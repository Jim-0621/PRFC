File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java
Patch:
@@ -251,9 +251,8 @@ ClientRequestContext newDerivedContext(RequestId id, @Nullable HttpRequest req,
      * Returns the {@link EndpointGroup} used for the current {@link Request}.
      *
      * @return the {@link EndpointGroup} if a user specified an {@link EndpointGroup} when initiating
-     *         a {@link Request}. {@code null} if a user specified an {@link Endpoint}.
+     *         a {@link Request}.
      */
-    @Nullable
     EndpointGroup endpointGroup();
 
     /**

File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContextWrapper.java
Patch:
@@ -52,7 +52,6 @@ public ClientRequestContext newDerivedContext(RequestId id, @Nullable HttpReques
         return unwrap().newDerivedContext(id, req, rpcReq, endpoint);
     }
 
-    @Nullable
     @Override
     public EndpointGroup endpointGroup() {
         return unwrap().endpointGroup();

File: core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java
Patch:
@@ -43,6 +43,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.common.Flags;
 import com.linecorp.armeria.common.HttpObject;
 import com.linecorp.armeria.common.HttpRequest;
@@ -572,7 +573,7 @@ public void onComplete() {}
             final DefaultClientRequestContext reqCtx = new DefaultClientRequestContext(
                     ctx.channel().eventLoop(), Flags.meterRegistry(), H1C, RequestId.random(),
                     com.linecorp.armeria.common.HttpMethod.OPTIONS,
-                    REQ_TARGET_ASTERISK, ClientOptions.of(),
+                    REQ_TARGET_ASTERISK, EndpointGroup.of(), ClientOptions.of(),
                     HttpRequest.of(com.linecorp.armeria.common.HttpMethod.OPTIONS, "*"),
                     null, REQUEST_OPTIONS_FOR_UPGRADE_REQUEST, CancellationScheduler.noop(),
                     System.nanoTime(), SystemInfo.currentTimeMicros());

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java
Patch:
@@ -179,11 +179,11 @@ private void doExecute0(ClientRequestContext ctx, RpcRequest req,
             // clear the pending throwable to retry endpoint selection
             ClientPendingThrowableUtil.removePendingThrowable(derivedCtx);
             // if the endpoint hasn't been selected, try to initialize the ctx with a new endpoint/event loop
-            res = initContextAndExecuteWithFallback(unwrap(), ctxExtension, endpointGroup, RpcResponse::from,
-                                                    (context, cause) -> RpcResponse.ofFailure(cause));
+            res = initContextAndExecuteWithFallback(unwrap(), ctxExtension, RpcResponse::from,
+                                                    (context, cause) -> RpcResponse.ofFailure(cause), req);
         } else {
             res = executeWithFallback(unwrap(), derivedCtx,
-                                      (context, cause) -> RpcResponse.ofFailure(cause));
+                                      (context, cause) -> RpcResponse.ofFailure(cause), req);
         }
 
         final RetryConfig<RpcResponse> retryConfig = mappedRetryConfig(ctx);

File: core/src/main/java/com/linecorp/armeria/internal/common/DefaultCancellationScheduler.java
Patch:
@@ -389,8 +389,9 @@ private Throwable getFinalCause(@Nullable Throwable cause) {
         return cause;
     }
 
+    @Override
     @VisibleForTesting
-    State state() {
+    public State state() {
         return state;
     }
 

File: oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2Client.java
Patch:
@@ -72,7 +72,7 @@ public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Ex
                             HttpHeaderNames.AUTHORIZATION, token.authorization()).build());
                     ctx.updateRequest(newReq);
                     return executeWithFallback(unwrap(), ctx,
-                                               (context, cause0) -> HttpResponse.ofFailure(cause0));
+                                               (context, cause0) -> HttpResponse.ofFailure(cause0), newReq);
                 });
         return HttpResponse.of(future);
     }

File: core/src/test/java/com/linecorp/armeria/client/EndpointTest.java
Patch:
@@ -539,8 +539,9 @@ void testToString() {
 
         // attributes
         final Endpoint endpointWithAttr = Endpoint.of("127.0.0.1").withAttr(AttributeKey.valueOf("test"), 1);
+        // toString() should not include the attributes.
         assertThat(endpointWithAttr.toString())
-                .isEqualTo("Endpoint{127.0.0.1, weight=1000, attributes=[test=1]}");
+                .isEqualTo("Endpoint{127.0.0.1, weight=1000}");
     }
 
     @Test

File: core/src/main/java/com/linecorp/armeria/client/ClientFactory.java
Patch:
@@ -36,6 +36,7 @@
 
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.common.FlagsProvider;
+import com.linecorp.armeria.common.NonBlocking;
 import com.linecorp.armeria.common.Scheme;
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.SessionProtocol;
@@ -49,7 +50,6 @@
 import io.micrometer.core.instrument.MeterRegistry;
 import io.netty.channel.EventLoop;
 import io.netty.channel.EventLoopGroup;
-import reactor.core.scheduler.NonBlocking;
 
 /**
  * Creates and manages clients.

File: core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java
Patch:
@@ -47,6 +47,7 @@
 import com.linecorp.armeria.client.proxy.Socks4ProxyConfig;
 import com.linecorp.armeria.client.proxy.Socks5ProxyConfig;
 import com.linecorp.armeria.common.ClosedSessionException;
+import com.linecorp.armeria.common.NonBlocking;
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.annotation.Nullable;
@@ -76,7 +77,6 @@
 import io.netty.util.AttributeKey;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.Promise;
-import reactor.core.scheduler.NonBlocking;
 
 final class HttpChannelPool implements AsyncCloseable {
 

File: core/src/main/java/com/linecorp/armeria/client/HttpClientFactory.java
Patch:
@@ -42,6 +42,7 @@
 import com.linecorp.armeria.client.proxy.ProxyConfigSelector;
 import com.linecorp.armeria.client.redirect.RedirectConfig;
 import com.linecorp.armeria.common.Http1HeaderNaming;
+import com.linecorp.armeria.common.NonBlocking;
 import com.linecorp.armeria.common.RequestContext;
 import com.linecorp.armeria.common.Scheme;
 import com.linecorp.armeria.common.SerializationFormat;
@@ -71,7 +72,6 @@
 import io.netty.handler.ssl.SslContextBuilder;
 import io.netty.resolver.AddressResolverGroup;
 import io.netty.util.concurrent.FutureListener;
-import reactor.core.scheduler.NonBlocking;
 
 /**
  * A {@link ClientFactory} that creates an HTTP client.

File: core/src/main/java/com/linecorp/armeria/common/CoreBlockHoundIntegration.java
Patch:
@@ -30,6 +30,8 @@
 public final class CoreBlockHoundIntegration implements BlockHoundIntegration {
     @Override
     public void applyTo(Builder builder) {
+        builder.nonBlockingThreadPredicate(predicate -> predicate.or(NonBlocking.class::isInstance));
+
         // short locks
         builder.allowBlockingCallsInside("com.linecorp.armeria.client.HttpClientFactory",
                                          "pool");

File: core/src/main/java/com/linecorp/armeria/common/util/EventLoopCheckingFuture.java
Patch:
@@ -31,10 +31,9 @@
 import com.google.common.collect.MapMaker;
 
 import com.linecorp.armeria.common.Flags;
+import com.linecorp.armeria.common.NonBlocking;
 import com.linecorp.armeria.common.annotation.Nullable;
 
-import reactor.core.scheduler.NonBlocking;
-
 /**
  * A {@link CompletableFuture} that warns the user if they call a method that blocks the event loop.
  */

File: core/src/main/java/com/linecorp/armeria/internal/common/util/EventLoopThread.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.linecorp.armeria.internal.common.util;
 
+import com.linecorp.armeria.common.NonBlocking;
 import com.linecorp.armeria.common.annotation.Nullable;
 
 import io.netty.util.concurrent.FastThreadLocal;
 import io.netty.util.concurrent.FastThreadLocalThread;
-import reactor.core.scheduler.NonBlocking;
 
 /**
  * An event loop thread with support for {@link TemporaryThreadLocals}, Netty {@link FastThreadLocal} and
- * Project Reactor {@link NonBlocking}.
+ * {@link NonBlocking} interface.
  */
 public final class EventLoopThread extends FastThreadLocalThread implements NonBlocking {
 

File: core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java
Patch:
@@ -619,7 +619,9 @@ static final class PoolKey {
         private final int hashCode;
 
         PoolKey(Endpoint endpoint, ProxyConfig proxyConfig) {
-            this.endpoint = endpoint;
+            // Remove the trailing dot of the host name because SNI does not allow it.
+            // https://lists.w3.org/Archives/Public/ietf-http-wg/2016JanMar/0430.html
+            this.endpoint = endpoint.withoutTrailingDot();
             this.proxyConfig = proxyConfig;
             hashCode = endpoint.hashCode() * 31 + proxyConfig.hashCode();
         }

File: core/src/main/java/com/linecorp/armeria/internal/common/Http1ObjectEncoder.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.linecorp.armeria.internal.common;
 
-import static com.linecorp.armeria.internal.client.ClosedStreamExceptionUtil.newClosedSessionException;
 import static java.util.Objects.requireNonNull;
 
 import java.util.AbstractMap.SimpleImmutableEntry;
@@ -392,7 +391,7 @@ protected final void updateClosedId(int id) {
     protected abstract boolean isPing(int id);
 
     @Override
-    public final void close() {
+    public final void close(Throwable cause) {
         if (closed) {
             return;
         }
@@ -403,7 +402,6 @@ public final void close() {
             return;
         }
 
-        final ClosedSessionException cause = newClosedSessionException(ch);
         for (Queue<Entry<HttpObject, ChannelPromise>> queue : pendingWritesMap.values()) {
             for (;;) {
                 final Entry<HttpObject, ChannelPromise> e = queue.poll();

File: core/src/main/java/com/linecorp/armeria/internal/common/Http2ObjectEncoder.java
Patch:
@@ -124,7 +124,7 @@ protected final boolean isStreamPresentAndWritable(int streamId) {
     }
 
     @Override
-    public final void close() {
+    public final void close(Throwable unused) {
         closed = true;
         keepAliveHandler().destroy();
     }

File: core/src/main/java/com/linecorp/armeria/internal/common/HttpObjectEncoder.java
Patch:
@@ -94,10 +94,10 @@ default ChannelFuture writeReset(int id, int streamId, Http2Error error,
     /**
      * Releases the resources related with this encoder and fails any unfinished writes.
      */
-    void close();
+    void close(Throwable cause);
 
     /**
-     * Returns {@code true} if {@link #close()} is called.
+     * Returns {@code true} if {@link #close(Throwable)} is called.
      */
     boolean isClosed();
 

File: core/src/main/java/com/linecorp/armeria/server/Http1RequestDecoder.java
Patch:
@@ -438,7 +438,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
                     pipeline.context(Http2ServerConnectionHandler.class);
             final Http2ServerConnectionHandler connectionHandler =
                     (Http2ServerConnectionHandler) connectionHandlerCtx.handler();
-            encoder.close();
+            encoder.close(ClosedSessionException.get());
             // The HTTP/2 encoder will be used when a protocol violation error occurs after upgrading to HTTP/2
             // that is directly written by 'fail()'.
             encoder = connectionHandler.getOrCreateResponseEncoder(connectionHandlerCtx);

File: spring/boot3-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaSettingsConfigurationTest.java
Patch:
@@ -118,8 +118,8 @@ void buildServerBasedOnProperties() {
         assertThat(defaultVirtualHost.verboseResponses()).isTrue();
 
         // ArmeriaServerConfigurator overrides the properties from ArmeriaSettings.
-        assertThat(config.gracefulShutdownTimeout().toMillis()).isEqualTo(10000);
-        assertThat(config.gracefulShutdownQuietPeriod().toMillis()).isEqualTo(1000);
+        assertThat(config.gracefulShutdown().timeout().toMillis()).isEqualTo(10000);
+        assertThat(config.gracefulShutdown().quietPeriod().toMillis()).isEqualTo(1000);
 
         assertThat(config.dependencyInjector().getInstance(Object.class)).isSameAs(dummyObject);
         final ServiceRequestContext ctx = ServiceRequestContext.of(

File: core/src/test/java/com/linecorp/armeria/client/Http1ResponseDecoderTest.java
Patch:
@@ -35,7 +35,8 @@ class Http1ResponseDecoderTest {
     @Test
     void testRequestTimeoutClosesImmediately() throws Exception {
         final EmbeddedChannel channel = new EmbeddedChannel();
-        try (HttpClientFactory httpClientFactory = new HttpClientFactory(ClientFactoryOptions.of())) {
+        try (HttpClientFactory httpClientFactory = new HttpClientFactory(ClientFactoryOptions.of(),
+                                                                         true)) {
             final Http1ResponseDecoder decoder = new Http1ResponseDecoder(
                     channel, httpClientFactory, SessionProtocol.H1);
             channel.pipeline().addLast(decoder);

File: core/src/main/java/com/linecorp/armeria/client/AbstractHttpResponseDecoder.java
Patch:
@@ -62,8 +62,7 @@ public HttpResponseWrapper addResponse(@Nullable AbstractHttpRequestHandler requ
                                            int id, DecodedHttpResponse res,
                                            ClientRequestContext ctx, EventLoop eventLoop) {
         final HttpResponseWrapper newRes =
-                new HttpResponseWrapper(requestHandler, res, eventLoop, ctx,
-                                        ctx.responseTimeoutMillis(), ctx.maxResponseLength());
+                new HttpResponseWrapper(requestHandler, res, eventLoop, ctx, ctx.maxResponseLength());
         final HttpResponseWrapper oldRes = responses.put(id, newRes);
         keepAliveHandler().increaseNumRequests();
 

File: core/src/main/java/com/linecorp/armeria/client/WebSocketHttp1ClientChannelHandler.java
Patch:
@@ -100,8 +100,7 @@ public HttpResponseWrapper addResponse(@Nullable AbstractHttpRequestHandler requ
                                            int id, DecodedHttpResponse decodedHttpResponse,
                                            ClientRequestContext ctx, EventLoop eventLoop) {
         assert res == null;
-        res = new WebSocketHttp1ResponseWrapper(decodedHttpResponse, eventLoop, ctx,
-                                                ctx.responseTimeoutMillis(), ctx.maxResponseLength());
+        res = new WebSocketHttp1ResponseWrapper(decodedHttpResponse, eventLoop, ctx, ctx.maxResponseLength());
         return res;
     }
 

File: core/src/main/java/com/linecorp/armeria/client/WebSocketHttp1ResponseWrapper.java
Patch:
@@ -26,9 +26,8 @@
 final class WebSocketHttp1ResponseWrapper extends HttpResponseWrapper {
 
     WebSocketHttp1ResponseWrapper(DecodedHttpResponse delegate,
-                                  EventLoop eventLoop, ClientRequestContext ctx,
-                                  long responseTimeoutMillis, long maxContentLength) {
-        super(null, delegate, eventLoop, ctx, responseTimeoutMillis, maxContentLength);
+                                  EventLoop eventLoop, ClientRequestContext ctx, long maxContentLength) {
+        super(null, delegate, eventLoop, ctx, maxContentLength);
         WebSocketClientUtil.setClosingResponseTask(ctx, cause -> {
             super.close(cause, false);
         });

File: core/src/main/java/com/linecorp/armeria/internal/client/ClientRequestContextExtension.java
Patch:
@@ -73,4 +73,6 @@ public interface ClientRequestContextExtension extends ClientRequestContext, Req
      * with default values on every request.
      */
     HttpHeaders internalRequestHeaders();
+
+    long remainingTimeoutNanos();
 }

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java
Patch:
@@ -241,7 +241,7 @@ public void start(Listener<O> responseListener, Metadata metadata) {
                 ctx.setResponseTimeout(TimeoutMode.SET_FROM_NOW, Duration.ofNanos(remainingNanos));
             }
         } else {
-            remainingNanos = MILLISECONDS.toNanos(ctx.responseTimeoutMillis());
+            remainingNanos = ctx.remainingTimeoutNanos();
         }
 
         // Must come after handling deadline.

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroup.java
Patch:
@@ -378,7 +378,7 @@ public String toString() {
                           .add("numEndpoints", endpoints.size())
                           .add("candidates", truncate(delegateEndpoints, 10))
                           .add("numCandidates", delegateEndpoints.size())
-                          .add("selectionStrategy", selectionStrategy().getClass())
+                          .add("selector", toStringSelector())
                           .add("initialized", whenReady().isDone())
                           .add("initialSelectionTimeoutMillis", initialSelectionTimeoutMillis)
                           .add("selectionTimeoutMillis", selectionTimeoutMillis)

File: core/src/main/java/com/linecorp/armeria/common/metric/MeterIdPrefixFunction.java
Patch:
@@ -55,6 +55,7 @@ public interface MeterIdPrefixFunction {
      *   <li>Client-side tags:<ul>
      *     <li>{@code method} - RPC method name or {@link HttpMethod#name()} if RPC method name is not
      *                          available</li>
+     *     <li>{@code service} - RPC service name or innermost service class name</li>
      *     <li>{@code httpStatus} - {@link HttpStatus#code()}</li>
      *   </ul></li>
      * </ul>

File: core/src/test/java/com/linecorp/armeria/client/endpoint/WeightRampingUpStrategyTest.java
Patch:
@@ -110,7 +110,6 @@ void rampingUpIsDoneAfterNumberOfSteps() {
         scheduledJobs.poll().run();
         // Ramping up is done because the step reached the numberOfSteps.
 
-        assertThat(selector.endpointsRampingUp).isEmpty();
         endpointsFromEntry = endpointsFromSelectorEntry(selector);
         assertThat(endpointsFromEntry).usingElementComparator(EndpointComparator.INSTANCE)
                                       .containsExactlyInAnyOrder(

File: core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceBuilder.java
Patch:
@@ -234,10 +234,11 @@ public HealthCheckServiceBuilder longPolling(long maxLongPollingTimeoutMillis,
      *
      * @return {@code this}
      * @see #updatable(HealthCheckUpdateHandler)
+     * @see HealthCheckUpdateHandler#of()
      */
     public HealthCheckServiceBuilder updatable(boolean updatable) {
         if (updatable) {
-            return updatable(DefaultHealthCheckUpdateHandler.INSTANCE);
+            return updatable(HealthCheckUpdateHandler.of());
         }
 
         updateHandler = null;

File: core/src/main/java/com/linecorp/armeria/server/logging/AccessLogWriter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 LINE Corporation
+ * Copyright 2024 LINE Corporation
  *
  * LINE Corporation licenses this file to you under the Apache License,
  * version 2.0 (the "License"); you may not use this file except in compliance
@@ -13,6 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
+
 package com.linecorp.armeria.server.logging;
 
 import static com.google.common.base.Preconditions.checkArgument;

File: nacos/src/test/java/com/linecorp/armeria/internal/nacos/NacosClientBuilderTest.java
Patch:
@@ -32,7 +32,7 @@ class NacosClientBuilderTest extends NacosTestBase {
     void gets403WhenNoToken() throws Exception {
         final HttpStatus status = WebClient.of(nacosUri())
                                            .blocking()
-                                           .get("/nacos/v1/ns/service/list?pageNo=0&pageSize=10")
+                                           .get("/v1/ns/service/list?pageNo=0&pageSize=10")
                                            .status();
         assertThat(status).isEqualTo(HttpStatus.FORBIDDEN);
     }

File: nacos/src/test/java/com/linecorp/armeria/internal/nacos/NacosTestBase.java
Patch:
@@ -80,7 +80,7 @@ protected static List<Endpoint> newSampleEndpoints() {
     static void start() {
         // Initialize Nacos Client
         nacosUri = URI.create(
-                "http://" + nacosContainer.getHost() + ':' + nacosContainer.getMappedPort(8848));
+                "http://" + nacosContainer.getHost() + ':' + nacosContainer.getMappedPort(8848) + "/nacos");
     }
 
     protected static NacosClient client(@Nullable String serviceName, @Nullable String groupName) {

File: core/src/test/java/com/linecorp/armeria/client/HttpClientExpect100HeaderTest.java
Patch:
@@ -552,7 +552,7 @@ private static String get(Http2Headers headers, CharSequence name) {
     private static void sendFrameHeaders(BufferedOutputStream bos,
                                          HttpStatus status,
                                          boolean endOfStream, int streamId) throws Exception {
-        final HPackEncoder encoder = new HPackEncoder(StandardCharsets.UTF_8);
+        final HPackEncoder encoder = new HPackEncoder(4096, StandardCharsets.UTF_8);
         final ByteArrayBuffer buffer = new ByteArrayBuffer(1024);
         encoder.encodeHeader(buffer, ":status", status.codeAsText(), false);
         final byte[] headersPayload = buffer.toByteArray();

File: core/src/test/java/com/linecorp/armeria/server/ServerRequestPathEncodingTest.java
Patch:
@@ -136,7 +136,7 @@ void requestUriEncodedHttp2(String path, String expected) throws Exception {
     }
 
     private static byte[] headerBytes(String path) throws Exception {
-        final HPackEncoder encoder = new HPackEncoder(StandardCharsets.UTF_8);
+        final HPackEncoder encoder = new HPackEncoder(4096, StandardCharsets.UTF_8);
         final ByteArrayBuffer buffer = new ByteArrayBuffer(1024);
         encoder.encodeHeader(buffer, ":method", "GET", false);
         encoder.encodeHeader(buffer, ":authority", server.httpUri().getAuthority(), false);

File: spring/boot3-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationTest.java
Patch:
@@ -382,7 +382,7 @@ void testPortConfiguration() {
     void testMetrics() {
         assertThat(GrpcClients.newClient(newUrl("h2c") + '/', TestServiceBlockingStub.class)
                               .hello(HelloRequest.getDefaultInstance())
-                              .getMessage()).isNotNull();
+                              .getMessage()).isEqualTo("Hello, ");
 
         final String metricReport = WebClient.of(newUrl("http"))
                                              .get("/internal/metrics")

File: tomcat10/src/main/java/com/linecorp/armeria/server/tomcat/ArmeriaProcessor.java
Patch:
@@ -54,6 +54,9 @@ protected void finishResponse() throws IOException {}
     @Override
     protected void ack(ContinueResponseTiming continueResponseTiming) {}
 
+    @Override
+    protected void earlyHints() throws IOException {}
+
     @Override
     protected void flush() throws IOException {}
 

File: tomcat9/src/main/java/com/linecorp/armeria/server/tomcat/ArmeriaProcessor.java
Patch:
@@ -51,6 +51,9 @@ protected void finishResponse() throws IOException {}
     @Override
     protected void ack(ContinueResponseTiming continueResponseTiming) {}
 
+    @Override
+    protected void earlyHints() throws IOException {}
+
     @Override
     protected void flush() throws IOException {}
 

File: xds/src/test/java/com/linecorp/armeria/xds/MissingResourceTest.java
Patch:
@@ -212,7 +212,7 @@ static class TestRequestObserver implements StreamObserver<DiscoveryRequest> {
 
         @Override
         public void onNext(DiscoveryRequest value) {
-            if (value.getErrorDetail() != null && value.getErrorDetail().getCode() != 0) {
+            if (value.hasErrorDetail() && value.getErrorDetail().getCode() != 0) {
                 logger.warn("Unexpected request with error: {}", value.getErrorDetail());
                 return;
             }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/DefaultHealthCheckerContext.java
Patch:
@@ -186,7 +186,7 @@ public void updateHealth(double health) {
     }
 
     @Override
-    public void updateHealth(double health, ClientRequestContext ctx,
+    public void updateHealth(double health, @Nullable ClientRequestContext ctx,
                              @Nullable ResponseHeaders headers, @Nullable Throwable cause) {
         final boolean isHealthy = health > 0;
         if (headers != null && headers.contains("x-envoy-degraded")) {

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroupBuilder.java
Patch:
@@ -23,7 +23,7 @@
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.common.util.AsyncCloseable;
-import com.linecorp.armeria.internal.client.endpoint.healthcheck.HttpHealthChecker;
+import com.linecorp.armeria.internal.client.endpoint.healthcheck.DefaultHttpHealthChecker;
 
 /**
  * A builder for creating a new {@link HealthCheckedEndpointGroup} that sends HTTP health check requests.
@@ -73,8 +73,8 @@ private static class HttpHealthCheckerFactory implements Function<HealthCheckerC
 
         @Override
         public AsyncCloseable apply(HealthCheckerContext ctx) {
-            final HttpHealthChecker checker = new HttpHealthChecker(ctx, ctx.endpoint(), path, useGet,
-                                                                    ctx.protocol(), null);
+            final DefaultHttpHealthChecker checker =
+                    new DefaultHttpHealthChecker(ctx, ctx.endpoint(), path, useGet, ctx.protocol(), null);
             checker.start();
             return checker;
         }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckerContext.java
Patch:
@@ -90,7 +90,7 @@ public interface HealthCheckerContext {
      * @param cause the cause of the failed health check request.
      *              {@code null} if the health checked request received the {@code headers}.
      */
-    default void updateHealth(double health, ClientRequestContext ctx,
+    default void updateHealth(double health, @Nullable ClientRequestContext ctx,
                               @Nullable ResponseHeaders headers, @Nullable Throwable cause) {
         // TODO(ikhoon): Make this method abstract in Armeria 2.0
         updateHealth(health);

File: benchmarks/jmh/src/jmh/java/com/linecorp/armeria/server/RoutersBenchmark.java
Patch:
@@ -61,7 +61,7 @@ public class RoutersBenchmark {
         FALLBACK_SERVICE = newServiceConfig(Route.ofCatchAll());
         HOST = new VirtualHost(
                 "localhost", "localhost", 0, null,
-                null, SERVICES, FALLBACK_SERVICE, RejectedRouteHandler.DISABLED,
+                null, null, SERVICES, FALLBACK_SERVICE, RejectedRouteHandler.DISABLED,
                 unused -> NOPLogger.NOP_LOGGER, FALLBACK_SERVICE.defaultServiceNaming(),
                 FALLBACK_SERVICE.defaultLogName(), 0, 0, false,
                 AccessLogWriter.disabled(), CommonPools.blockingTaskExecutor(), 0, SuccessFunction.ofDefault(),

File: core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java
Patch:
@@ -159,7 +159,7 @@ private enum HttpPreference {
 
     HttpClientPipelineConfigurator(HttpClientFactory clientFactory,
                                    boolean webSocket, SessionProtocol sessionProtocol,
-                                   @Nullable SslContext sslCtx) {
+                                   SslContext sslCtx) {
         this.clientFactory = clientFactory;
         this.webSocket = webSocket;
 

File: core/src/main/java/com/linecorp/armeria/common/Flags.java
Patch:
@@ -641,7 +641,7 @@ private static void detectTlsEngineAndDumpOpenSslInfo() {
                     /* forceHttp1 */ false,
                     tlsEngineType,
                     /* tlsAllowUnsafeCiphers */ false,
-                    ImmutableList.of(), null).newEngine(ByteBufAllocator.DEFAULT);
+                    null, null).newEngine(ByteBufAllocator.DEFAULT);
             logger.info("All available SSL protocols: {}",
                         ImmutableList.copyOf(engine.getSupportedProtocols()));
             logger.info("Default enabled SSL protocols: {}", SslContextUtil.DEFAULT_PROTOCOLS);

File: core/src/test/java/com/linecorp/armeria/client/IgnoreHostsTrustManagerTest.java
Patch:
@@ -37,6 +37,7 @@
 import com.google.common.collect.ImmutableSet;
 
 import com.linecorp.armeria.common.HttpResponse;
+import com.linecorp.armeria.internal.common.IgnoreHostsTrustManager;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.testing.junit5.server.ServerExtension;
 

File: core/src/test/java/com/linecorp/armeria/server/ServerTlsCertificateMetricsTest.java
Patch:
@@ -181,7 +181,7 @@ void tlsMetricGivenCertificateChainExpired() {
               .build();
 
         assertThatGauge(meterRegistry, CERT_VALIDITY_GAUGE_NAME, "localhost").isZero();
-        assertThatGauge(meterRegistry, CERT_VALIDITY_DAYS_GAUGE_NAME, "localhost").isEqualTo(-1);
+        assertThatGauge(meterRegistry, CERT_VALIDITY_DAYS_GAUGE_NAME, "localhost").isLessThanOrEqualTo(-1);
         assertThatGauge(meterRegistry, CERT_VALIDITY_GAUGE_NAME, "test.root.armeria").isOne();
         assertThatGauge(meterRegistry, CERT_VALIDITY_DAYS_GAUGE_NAME, "test.root.armeria").isPositive();
     }

File: core/src/test/java/com/linecorp/armeria/server/VirtualHostAnnotatedServiceBindingBuilderTest.java
Patch:
@@ -107,7 +107,7 @@ void testAllConfigsAreSet() {
                 .multipartUploadsLocation(multipartUploadsLocation)
                 .requestIdGenerator(serviceRequestIdGenerator)
                 .build(new TestService())
-                .build(template, noopDependencyInjector, null, ServerErrorHandler.ofDefault());
+                .build(template, noopDependencyInjector, null, ServerErrorHandler.ofDefault(), null);
 
         assertThat(virtualHost.serviceConfigs()).hasSize(2);
         final ServiceConfig pathBar = virtualHost.serviceConfigs().get(0);

File: thrift/thrift0.13/src/main/java/com/linecorp/armeria/internal/common/thrift/ThriftMetadataAccess.java
Patch:
@@ -36,7 +36,7 @@ public final class ThriftMetadataAccess {
 
     private static boolean preInitializeThriftClass;
 
-    private static final String THRIFT_OPTIONS_PROPERTIES = "../../common/thrift/thrift-options.properties";
+    private static final String THRIFT_OPTIONS_PROPERTIES = "thrift-options.properties";
 
     static {
         try {

File: spring/boot3-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/AbstractServerHttpResponse.java
Patch:
@@ -303,4 +303,7 @@ protected abstract Mono<Void> writeAndFlushWithInternal(
      */
     protected void touchDataBuffer(DataBuffer buffer) {
     }
+
+    @Nullable
+    abstract Integer getStatusCode0();
 }

File: core/src/test/java/com/linecorp/armeria/internal/server/annotation/ResponseEntityUtilTest.java
Patch:
@@ -72,7 +72,7 @@ void useNegotiatedResponseMediaType() {
                                                                .routingResult(routingResult)
                                                                .build();
 
-        final ResponseEntity<Void> result = ResponseEntity.of(ResponseHeaders.of(HttpStatus.OK));
+        final ResponseEntity<Void> result = ResponseEntity.of(HttpStatus.OK);
         final ResponseHeaders actual = ResponseEntityUtil.buildResponseHeaders(ctx, result);
         assertThat(actual.contentType()).isEqualTo(MediaType.JSON_UTF_8);
     }

File: core/src/test/java/com/linecorp/armeria/server/Http1ServerDelayedCloseConnectionTest.java
Patch:
@@ -109,7 +109,9 @@ void shouldWaitForDisconnectByClientSideFirst() throws IOException {
             assertThat(in.readLine()).isEmpty();
             assertThat(in.readLine()).isEqualToIgnoringCase("OK");
 
-            assertThat(server.server().numConnections()).isEqualTo(1);
+            await().untilAsserted(() -> {
+                assertThat(server.server().numConnections()).isEqualTo(1);
+            });
 
             socket.close();
             assertThatThrownBy(

File: core/src/test/java/com/linecorp/armeria/server/InitiateConnectionShutdownTest.java
Patch:
@@ -142,6 +142,7 @@ private void makeHttp2Request(String path) throws Exception {
         });
         await().untilTrue(finished);
         await().untilTrue(connectionClosed);
+        clientChannel.closeFuture().syncUninterruptibly();
     }
 
     @BeforeEach

File: core/src/main/java/com/linecorp/armeria/client/retry/Backoff.java
Patch:
@@ -59,7 +59,8 @@ static Backoff fixed(long delayMillis) {
     }
 
     /**
-     * Returns a {@link Backoff} that waits an exponentially-increasing amount of time between attempts.
+     * Returns a {@link Backoff} that waits an exponentially-increasing with multiplier
+     * 2.0 amount of time between attempts.
      */
     static Backoff exponential(long initialDelayMillis, long maxDelayMillis) {
         return exponential(initialDelayMillis, maxDelayMillis, 2.0);

File: core/src/main/java/com/linecorp/armeria/server/auth/OAuth2TokenExtractor.java
Patch:
@@ -61,7 +61,7 @@ public OAuth2Token apply(RequestHeaders headers) {
 
         final Matcher matcher = AUTHORIZATION_HEADER_PATTERN.matcher(authorization);
         if (!matcher.matches()) {
-            logger.warn("Invalid authorization header: " + authorization);
+            logger.debug("Invalid authorization header: {}", authorization);
             return null;
         }
 

File: core/src/main/java/com/linecorp/armeria/internal/client/DefaultClientRequestContext.java
Patch:
@@ -538,6 +538,8 @@ private DefaultClientRequestContext(DefaultClientRequestContext ctx,
 
         log = RequestLog.builder(this);
         log.startRequest();
+        // Cancel the original timeout and create a new scheduler for the derived context.
+        ctx.responseCancellationScheduler.cancelScheduled();
         responseCancellationScheduler =
                 CancellationScheduler.ofClient(TimeUnit.MILLISECONDS.toNanos(ctx.responseTimeoutMillis()));
         writeTimeoutMillis = ctx.writeTimeoutMillis();

File: core/src/main/java/com/linecorp/armeria/client/AbstractHttpRequestHandler.java
Patch:
@@ -198,6 +198,9 @@ final boolean tryInitialize() {
         final CancellationScheduler scheduler = cancellationScheduler();
         if (scheduler != null) {
             scheduler.updateTask(newCancellationTask());
+            if (ctx.responseTimeoutMode() == ResponseTimeoutMode.CONNECTION_ACQUIRED) {
+                scheduler.start();
+            }
         }
         if (ctx.isCancelled()) {
             // The previous cancellation task wraps the cause with an UnprocessedRequestException

File: core/src/main/java/com/linecorp/armeria/client/HttpResponseWrapper.java
Patch:
@@ -294,7 +294,9 @@ void initTimeout() {
             final CancellationScheduler responseCancellationScheduler =
                     ctxExtension.responseCancellationScheduler();
             responseCancellationScheduler.updateTask(newCancellationTask());
-            responseCancellationScheduler.start();
+            if (ctx.responseTimeoutMode() == ResponseTimeoutMode.REQUEST_SENT) {
+                responseCancellationScheduler.start();
+            }
         }
     }
 

File: core/src/main/java/com/linecorp/armeria/common/RequestContext.java
Patch:
@@ -467,6 +467,9 @@ default void setRequestAutoAbortDelay(Duration delay) {
 
     /**
      * Returns the cause of cancellation, {@code null} if the request has not been cancelled.
+     * Note that there is no guarantee that the cancellation cause is equivalent to the cause of failure
+     * for {@link HttpRequest} or {@link HttpResponse}. Refer to {@link RequestLog#requestCause()}
+     * or {@link RequestLog#responseCause()} for the exact reason why a request or response failed.
      */
     @Nullable
     Throwable cancellationCause();

File: core/src/main/java/com/linecorp/armeria/internal/server/DefaultServiceRequestContext.java
Patch:
@@ -389,13 +389,13 @@ public CompletableFuture<Throwable> whenRequestCancelled() {
     @Deprecated
     @Override
     public CompletableFuture<Void> whenRequestTimingOut() {
-        return requestCancellationScheduler.whenTimingOut();
+        return requestCancellationScheduler.whenCancelling().handle((v, e) -> null);
     }
 
     @Deprecated
     @Override
     public CompletableFuture<Void> whenRequestTimedOut() {
-        return requestCancellationScheduler.whenTimedOut();
+        return requestCancellationScheduler.whenCancelled().handle((v, e) -> null);
     }
 
     @Override

File: core/src/test/java/com/linecorp/armeria/client/CountingConnectionPoolListener.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * A {@link ConnectionPoolListener} to count the number of connections which have been open and closed.
  */
-public final class CountingConnectionPoolListener implements ConnectionPoolListener {
+public class CountingConnectionPoolListener implements ConnectionPoolListener {
 
     private final AtomicInteger opened = new AtomicInteger();
     private final AtomicInteger closed = new AtomicInteger();

File: xds/src/main/java/com/linecorp/armeria/xds/client/endpoint/XdsAttributeKeys.java
Patch:
@@ -26,8 +26,8 @@ final class XdsAttributeKeys {
             AttributeKey.valueOf(XdsAttributeKeys.class, "LB_ENDPOINT_KEY");
     static final AttributeKey<LocalityLbEndpoints> LOCALITY_LB_ENDPOINTS_KEY =
             AttributeKey.valueOf(XdsAttributeKeys.class, "LOCALITY_LB_ENDPOINTS_KEY");
-    static final AttributeKey<Integer> SELECTION_HASH =
-            AttributeKey.valueOf(XdsAttributeKeys.class, "SELECTION_HASH");
+    static final AttributeKey<XdsRandom> XDS_RANDOM =
+            AttributeKey.valueOf(XdsAttributeKeys.class, "XDS_RANDOM");
 
     private XdsAttributeKeys() {}
 }

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaCoroutineContextInterceptor.java
Patch:
@@ -17,6 +17,7 @@
 package com.linecorp.armeria.server.grpc;
 
 import static com.google.common.base.Preconditions.checkState;
+import static com.linecorp.armeria.server.grpc.FramedGrpcService.GRPC_USE_BLOCKING_EXECUTOR;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
@@ -96,7 +97,7 @@ public CoroutineContext coroutineContext(ServerCall<?, ?> serverCall, Metadata m
             // No custom context is specified. Use an event loop or a block task
             // executor as the default Coroutine dispatcher.
             final ScheduledExecutorService executor;
-            if (useBlockingTaskExecutor) {
+            if (useBlockingTaskExecutor || Boolean.TRUE.equals(ctx.attr(GRPC_USE_BLOCKING_EXECUTOR))) {
                 executor = ctx.blockingTaskExecutor().withoutContext();
             } else {
                 executor = ctx.eventLoop().withoutContext();

File: core/src/main/java/com/linecorp/armeria/common/stream/FuseableStreamMessage.java
Patch:
@@ -295,8 +295,8 @@ public void onNext(Object item) {
                 if (result != null && item != result) {
                     StreamMessageUtil.closeOrAbort(result, ex);
                 }
-                upstream.cancel();
                 onError(ex);
+                upstream.cancel();
             }
         }
 

File: core/src/main/java/com/linecorp/armeria/common/stream/StreamMessageInputStream.java
Patch:
@@ -145,10 +145,10 @@ public void onNext(T item) {
                 byteBufsInputStream.add(result.byteBuf());
             } catch (Throwable ex) {
                 StreamMessageUtil.closeOrAbort(item, ex);
+                onError(ex);
                 final Subscription upstream = this.upstream;
                 assert upstream != null;
                 upstream.cancel();
-                onError(ex);
             }
         }
 

File: core/src/main/java/com/linecorp/armeria/internal/common/stream/SurroundingPublisher.java
Patch:
@@ -445,11 +445,11 @@ private void close0(@Nullable Throwable cause) {
                 downstream.onComplete();
                 completionFuture.complete(null);
             } else {
+                downstream.onError(cause);
                 final Subscription upstream = this.upstream;
                 if (upstream != null) {
                     upstream.cancel();
                 }
-                downstream.onError(cause);
                 completionFuture.completeExceptionally(cause);
             }
             release(cause);

File: core/src/main/java/com/linecorp/armeria/server/encoding/HttpEncodedResponse.java
Patch:
@@ -143,7 +143,7 @@ protected HttpObject filter(HttpObject obj) {
             encodedBuf.readerIndex(encodedBuf.writerIndex());
             return httpData;
         } catch (IOException e) {
-            // An unreleased ByteBuf will be released by `beforeError()`
+            // An unreleased ByteBuf in `encodedStream` will be released by `beforeError()`
             throw new IllegalStateException(
                     "Error encoding HttpData, this should not happen with byte arrays.",
                     e);

File: core/src/test/java/com/linecorp/armeria/internal/logging/ContentPreviewingUtilTest.java
Patch:
@@ -63,7 +63,6 @@ void abortedRequestShouldAlsoBeCompleted() {
 
         ctx.logBuilder().endRequest();
         ctx.logBuilder().endResponse();
-        ctx.logBuilder().ensureComplete();
 
         final RequestLog log = ctx.log().whenComplete().join();
         assertThat(log.requestContentPreview()).isEmpty();

File: resteasy/src/main/java/com/linecorp/armeria/internal/common/resteasy/HttpMessageSubscriberAdapter.java
Patch:
@@ -64,10 +64,9 @@ public void onNext(HttpObject httpObject) {
             if (dataLength > 0) {
                 final long allowedDataLength = MAX_ALLOWED_DATA_LENGTH - contentLength;
                 if (dataLength > allowedDataLength) {
-                    //noinspection ConstantConditions
-                    subscription.cancel();
                     onError(new IllegalStateException(
                             "content length greater than " + MAX_ALLOWED_DATA_LENGTH));
+                    subscription.cancel();
                     return;
                 }
                 contentLength += dataLength;

File: spring/boot3-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ChannelSendOperator.java
Patch:
@@ -201,10 +201,10 @@ public final void onNext(T item) {
                     }
                     result.subscribe(writeCompletionBarrier);
                 } else {
+                    writeCompletionBarrier.onError(new IllegalStateException("Unexpected item."));
                     if (subscription != null) {
                         subscription.cancel();
                     }
-                    writeCompletionBarrier.onError(new IllegalStateException("Unexpected item."));
                 }
             }
         }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/WeightRampingUpStrategy.java
Patch:
@@ -20,8 +20,8 @@
 import static com.linecorp.armeria.client.endpoint.WeightRampingUpStrategyBuilder.DEFAULT_RAMPING_UP_TASK_WINDOW_MILLIS;
 import static com.linecorp.armeria.client.endpoint.WeightRampingUpStrategyBuilder.DEFAULT_TOTAL_STEPS;
 import static com.linecorp.armeria.client.endpoint.WeightRampingUpStrategyBuilder.defaultTransition;
-import static com.linecorp.armeria.internal.client.endpoint.RampingUpKeys.createdAtNanos;
-import static com.linecorp.armeria.internal.client.endpoint.RampingUpKeys.hasCreatedAtNanos;
+import static com.linecorp.armeria.internal.client.endpoint.EndpointAttributeKeys.createdAtNanos;
+import static com.linecorp.armeria.internal.client.endpoint.EndpointAttributeKeys.hasCreatedAtNanos;
 import static java.util.Objects.requireNonNull;
 
 import java.util.ArrayDeque;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroupBuilder.java
Patch:
@@ -23,6 +23,7 @@
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.common.util.AsyncCloseable;
+import com.linecorp.armeria.internal.client.endpoint.healthcheck.HttpHealthChecker;
 
 /**
  * A builder for creating a new {@link HealthCheckedEndpointGroup} that sends HTTP health check requests.
@@ -72,7 +73,8 @@ private static class HttpHealthCheckerFactory implements Function<HealthCheckerC
 
         @Override
         public AsyncCloseable apply(HealthCheckerContext ctx) {
-            final HttpHealthChecker checker = new HttpHealthChecker(ctx, path, useGet);
+            final HttpHealthChecker checker = new HttpHealthChecker(ctx, ctx.endpoint(), path, useGet,
+                                                                    ctx.protocol(), null);
             checker.start();
             return checker;
         }

File: core/src/test/java/com/linecorp/armeria/client/endpoint/WeightRampingUpStrategyTest.java
Patch:
@@ -16,7 +16,6 @@
 package com.linecorp.armeria.client.endpoint;
 
 import static com.linecorp.armeria.client.endpoint.EndpointWeightTransition.linear;
-import static com.linecorp.armeria.internal.client.endpoint.RampingUpKeys.withCreatedAtNanos;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.ArgumentMatchers.anyBoolean;
 import static org.mockito.Mockito.mock;
@@ -47,6 +46,7 @@
 import com.linecorp.armeria.client.endpoint.WeightedRandomDistributionEndpointSelector.Entry;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
+import com.linecorp.armeria.internal.client.endpoint.EndpointAttributeKeys;
 
 import io.netty.channel.DefaultEventLoop;
 import io.netty.util.concurrent.ScheduledFuture;
@@ -394,7 +394,8 @@ void endpointTimestampsArePrioritized() {
                                       .containsExactlyInAnyOrder(Endpoint.of("foo.com"));
 
         // as far as the selector is concerned, the endpoint is added at ticker#get now
-        final Endpoint endpoint = withCreatedAtNanos(Endpoint.of("foo.com"), ticker.get());
+        Endpoint endpoint = Endpoint.of("foo.com");
+        endpoint = endpoint.withAttr(EndpointAttributeKeys.CREATED_AT_NANOS_KEY, ticker.get());
         endpointGroup.setEndpoints(ImmutableList.of(endpoint));
 
         final long window = selector.windowIndex(ticker.get());

File: xds/src/test/java/com/linecorp/armeria/xds/client/endpoint/RampingUpTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.xds.client.endpoint;
 
-import static com.linecorp.armeria.internal.client.endpoint.RampingUpKeys.createdAtNanos;
+import static com.linecorp.armeria.internal.client.endpoint.EndpointAttributeKeys.createdAtNanos;
 import static com.linecorp.armeria.xds.XdsTestResources.BOOTSTRAP_CLUSTER_NAME;
 import static com.linecorp.armeria.xds.XdsTestResources.endpoint;
 import static com.linecorp.armeria.xds.XdsTestResources.localityLbEndpoints;

File: testing-internal/src/main/java/com/linecorp/armeria/internal/testing/InternalTestingBlockHoundIntegration.java
Patch:
@@ -75,6 +75,7 @@ public void applyTo(Builder builder) {
                 "writeBlockingMethod");
         builder.allowBlockingCallsInside("com.linecorp.armeria.client.ClientFactory", "ofDefault");
         builder.allowBlockingCallsInside("io.envoyproxy.controlplane.cache.SimpleCache", "createWatch");
+        builder.allowBlockingCallsInside("io.grpc.netty.shaded.io.netty.util.Version", "identify");
 
         // prints the exception which makes it easier to debug issues
         builder.blockingMethodCallback(this::writeBlockingMethod);

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMetrics.java
Patch:
@@ -27,6 +27,7 @@
 import com.google.common.util.concurrent.AtomicDouble;
 
 import com.linecorp.armeria.common.metric.MeterIdPrefix;
+import com.linecorp.armeria.common.util.EventCount;
 
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.MeterRegistry;

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/EventCount.java
Patch:
@@ -22,7 +22,10 @@
 
 /**
  * An immutable object that stores the count of events.
+ *
+ * @deprecated Use {@link com.linecorp.armeria.common.util.EventCount} instead.
  */
+@Deprecated
 public final class EventCount {
 
     /**

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/MetricCollectingCircuitBreakerListenerTest.java
Patch:
@@ -22,6 +22,7 @@
 
 import com.linecorp.armeria.common.metric.MoreMeters;
 import com.linecorp.armeria.common.prometheus.PrometheusMeterRegistries;
+import com.linecorp.armeria.common.util.EventCount;
 
 import io.micrometer.core.instrument.MeterRegistry;
 

File: xds/src/main/java/com/linecorp/armeria/xds/client/endpoint/ClusterEntry.java
Patch:
@@ -79,11 +79,11 @@ void accept(ClusterSnapshot clusterSnapshot, List<Endpoint> endpoints) {
         if (logger.isTraceEnabled()) {
             logger.trace("XdsEndpointGroup is using a new PrioritySet({})", prioritySet);
         }
+        LoadBalancer loadBalancer = new DefaultLoadBalancer(prioritySet);
         if (clusterSnapshot.xdsResource().resource().hasLbSubsetConfig()) {
-            loadBalancer = new SubsetLoadBalancer(prioritySet);
-        } else {
-            loadBalancer = new DefaultLoadBalancer(prioritySet);
+            loadBalancer = new SubsetLoadBalancer(prioritySet, loadBalancer);
         }
+        this.loadBalancer = loadBalancer;
         clusterManager.notifyListeners();
     }
 

File: core/src/main/java/com/linecorp/armeria/common/stream/StreamMessageInputStream.java
Patch:
@@ -154,7 +154,7 @@ public void onNext(T item) {
 
         @Override
         public void onError(Throwable cause) {
-            byteBufsInputStream.setEos();
+            byteBufsInputStream.interrupt(cause);
         }
 
         @Override

File: oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2AuthorizationGrantBuilder.java
Patch:
@@ -99,7 +99,9 @@ public OAuth2AuthorizationGrantBuilder responseHandler(
      * Sets a period when the token should be refreshed proactively prior to its expiry.
      */
     public OAuth2AuthorizationGrantBuilder refreshBefore(Duration refreshBefore) {
-        this.refreshBefore = requireNonNull(refreshBefore, "refreshBefore");
+        requireNonNull(refreshBefore, "refreshBefore");
+        checkState(!refreshBefore.isNegative(), "refreshBefore: %s (expected: >= 0)", refreshBefore);
+        this.refreshBefore = refreshBefore;
         return this;
     }
 

File: core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java
Patch:
@@ -244,6 +244,7 @@ private static void handleEarlyRequestException(ClientRequestContext ctx,
             final RequestLogBuilder logBuilder = ctx.logBuilder();
             logBuilder.endRequest(cause);
             logBuilder.endResponse(cause);
+            ctx.cancel(cause);
         }
     }
 

File: brave/brave6/src/main/java/com/linecorp/armeria/common/brave/RequestContextCurrentTraceContext.java
Patch:
@@ -174,7 +174,7 @@ public Scope newScope(@Nullable TraceContext currentSpan) {
 
     @UnstableApi
     @Override
-    public Scope decorateScope(TraceContext context, Scope scope) {
+    public Scope decorateScope(@Nullable TraceContext context, Scope scope) {
         // If a `Scope` is decorated, `ScopeDecorator`s populate some contexts as such as MDC, which are stored
         // to a thread-local. The activated contexts will be removed when `decoratedScope.close()` is called.
         // If `Scope.NOOP` is specified, CurrentTraceContext.decorateScope() performs nothing.

File: brave/brave6/src/main/java/com/linecorp/armeria/internal/common/brave/TraceContextUtil.java
Patch:
@@ -39,7 +39,7 @@ public static TraceContext traceContext(RequestContext ctx) {
         return ctx.attr(TRACE_CONTEXT_KEY);
     }
 
-    public static void setTraceContext(RequestContext ctx, TraceContext traceContext) {
+    public static void setTraceContext(RequestContext ctx, @Nullable TraceContext traceContext) {
         ctx.setAttr(TRACE_CONTEXT_KEY, traceContext);
     }
 

File: dropwizard2/src/main/java/com/linecorp/armeria/dropwizard/ArmeriaServerFactory.java
Patch:
@@ -64,6 +64,7 @@ class ArmeriaServerFactory extends AbstractServerFactory {
     public static final String TYPE = "armeria";
     private static final Logger logger = LoggerFactory.getLogger(ArmeriaServerFactory.class);
 
+    @Nullable
     @JsonUnwrapped
     private @Valid ArmeriaSettings armeriaSettings;
 
@@ -80,6 +81,7 @@ class ArmeriaServerFactory extends AbstractServerFactory {
     @JsonProperty
     private boolean jerseyEnabled = true;
 
+    @Nullable
     @JsonIgnore
     public ServerBuilder getServerBuilder() {
         return serverBuilder;
@@ -184,6 +186,7 @@ private ScheduledThreadPoolExecutor newBlockingTaskExecutor() {
         return blockingTaskExecutor;
     }
 
+    @Nullable
     ArmeriaSettings getArmeriaSettings() {
         return armeriaSettings;
     }

File: dropwizard2/src/main/java/com/linecorp/armeria/dropwizard/ManagedArmeriaServer.java
Patch:
@@ -65,6 +65,7 @@ class ManagedArmeriaServer<T extends Configuration> implements Managed {
     public void start() throws Exception {
         logger.trace("Getting Armeria Server Builder");
         final ServerBuilder sb = ((ArmeriaServerFactory) serverFactory).getServerBuilder();
+        assert sb != null;
         logger.trace("Calling Server Configurator");
         serverConfigurator.configure(sb);
         server = sb.build();

File: eureka/src/main/java/com/linecorp/armeria/client/eureka/EurekaEndpointGroup.java
Patch:
@@ -21,6 +21,7 @@
 import java.io.IOException;
 import java.net.URI;
 import java.util.List;
+import java.util.Objects;
 import java.util.Set;
 import java.util.StringJoiner;
 import java.util.concurrent.CompletableFuture;
@@ -284,7 +285,7 @@ private static Function<byte[], List<Endpoint>> responseConverter(
                 } else if (appName != null) {
                     filter = instanceInfo -> appName.equals(instanceInfo.getAppName());
                 } else {
-                    filter = instanceInfo -> instanceId.equals(instanceInfo.getInstanceId());
+                    filter = instanceInfo -> Objects.equals(instanceId, instanceInfo.getInstanceId());
                 }
             }
             final StringJoiner joiner = new StringJoiner(",");

File: eureka/src/main/java/com/linecorp/armeria/internal/common/eureka/InstanceInfo.java
Patch:
@@ -43,6 +43,7 @@ public final class InstanceInfo {
 
     private static final Logger logger = LoggerFactory.getLogger(InstanceInfo.class);
 
+    @Nullable
     private final String instanceId;
 
     @Nullable

File: eureka/src/main/java/com/linecorp/armeria/server/eureka/EurekaUpdatingListener.java
Patch:
@@ -133,6 +133,7 @@ public static EurekaUpdatingListenerBuilder builder(
 
     private final EurekaWebClient client;
     private final InstanceInfo initialInstanceInfo;
+    @Nullable
     private InstanceInfo instanceInfo;
     @Nullable
     private volatile ScheduledFuture<?> heartBeatFuture;
@@ -335,8 +336,9 @@ public void serverStopping(Server server) throws Exception {
         if (heartBeatFuture != null) {
             heartBeatFuture.cancel(false);
         }
+        final InstanceInfo instanceInfo = this.instanceInfo;
         final String appName = this.appName;
-        if (appName != null) {
+        if (instanceInfo != null && appName != null) {
             final String instanceId = instanceInfo.getInstanceId();
             assert instanceId != null;
             client.cancel(appName, instanceId).aggregate().handle((res, cause) -> {

File: graphql-protocol/src/main/java/com/linecorp/armeria/common/graphql/protocol/DefaultGraphqlRequest.java
Patch:
@@ -44,6 +44,7 @@ public String query() {
         return query;
     }
 
+    @Nullable
     @Override
     public String operationName() {
         return operationName;

File: graphql/src/main/java/com/linecorp/armeria/server/graphql/DefaultGraphqlService.java
Patch:
@@ -139,7 +139,9 @@ private HttpResponse execute(
                     }));
         } catch (Throwable cause) {
             cause = Exceptions.peel(cause);
-            return errorHandler.handle(ctx, input, null, cause);
+            final HttpResponse res = errorHandler.handle(ctx, input, null, cause);
+            assert res != null : "DefaultGraphqlService.handle() returned null?";
+            return res;
         }
     }
 

File: graphql/src/main/java/com/linecorp/armeria/server/graphql/GraphqlWSSubProtocol.java
Patch:
@@ -374,6 +374,7 @@ private static void writeError(WebSocketWriter out, String operationId, Throwabl
                 "id", operationId,
                 "payload", ImmutableList.of(
                         new GraphQLError() {
+                            @Nullable
                             @Override
                             public String getMessage() {
                                 return t.getMessage();
@@ -430,4 +431,3 @@ public Throwable fillInStackTrace() {
         }
     }
 }
-

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/DeframedMessage.java
Patch:
@@ -124,6 +124,7 @@ public void close() {
         if (buf != null) {
             buf.release();
         } else {
+            assert stream != null;
             try {
                 stream.close();
             } catch (IOException e) {

File: grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnsafeUnaryGrpcService.java
Patch:
@@ -142,6 +142,7 @@ protected final HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req)
                             final HttpData content = framer.writePayload(responseMessage);
                             final ResponseHeaders responseHeaders = RESPONSE_HEADERS_MAP.get(
                                     serializationFormat);
+                            assert responseHeaders != null;
                             if (UnaryGrpcSerializationFormats.isGrpcWeb(serializationFormat)) {
                                 // Send trailer as a part of the body for gRPC-web.
                                 final HttpData serializedTrailers = framer.writePayload(

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcClientFactory.java
Patch:
@@ -47,6 +47,8 @@
 import com.linecorp.armeria.client.grpc.GrpcClientStubFactory;
 import com.linecorp.armeria.client.grpc.protocol.UnaryGrpcClient;
 import com.linecorp.armeria.client.retry.RetryingClient;
+import com.linecorp.armeria.common.HttpResponse;
+import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.Scheme;
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.SessionProtocol;
@@ -200,7 +202,7 @@ private static ClientBuilderParams addTrailersExtractor(
                 originalDecoration.decorators();
 
         boolean foundRetryingClient = false;
-        final HttpClient noopClient = (ctx, req) -> null;
+        final HttpClient noopClient = (ctx, req) -> HttpResponse.of(HttpStatus.OK);
         for (Function<? super HttpClient, ? extends HttpClient> decorator : decorators) {
             final HttpClient decorated = decorator.apply(noopClient);
             if (decorated instanceof RetryingClient) {

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/JavaGrpcClientStubFactory.java
Patch:
@@ -22,6 +22,7 @@
 import java.lang.reflect.Method;
 
 import com.linecorp.armeria.client.grpc.GrpcClientStubFactory;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.Exceptions;
 
 import io.grpc.Channel;
@@ -32,6 +33,7 @@
  */
 public final class JavaGrpcClientStubFactory implements GrpcClientStubFactory {
 
+    @Nullable
     @Override
     public ServiceDescriptor findServiceDescriptor(Class<?> clientType) {
         final String clientTypeName = clientType.getName();
@@ -59,6 +61,7 @@ public ServiceDescriptor findServiceDescriptor(Class<?> clientType) {
     @Override
     public Object newClientStub(Class<?> clientType, Channel channel) {
         final Method stubFactoryMethod = GrpcClientFactoryUtil.findStubFactoryMethod(clientType);
+        assert stubFactoryMethod != null : "No stub factory method found for " + clientType;
         try {
             return stubFactoryMethod.invoke(null, channel);
         } catch (IllegalAccessException | InvocationTargetException e) {

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/NullGrpcClientStubFactory.java
Patch:
@@ -17,7 +17,6 @@
 package com.linecorp.armeria.internal.client.grpc;
 
 import com.linecorp.armeria.client.grpc.GrpcClientStubFactory;
-import com.linecorp.armeria.common.annotation.Nullable;
 
 import io.grpc.Channel;
 import io.grpc.ServiceDescriptor;
@@ -31,7 +30,6 @@ public ServiceDescriptor findServiceDescriptor(Class<?> clientType) {
         throw new UnsupportedOperationException();
     }
 
-    @Nullable
     @Override
     public Object newClientStub(Class<?> clientType, Channel channel) {
         throw new UnsupportedOperationException();

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ReactorGrpcClientStubFactory.java
Patch:
@@ -22,6 +22,7 @@
 import java.lang.reflect.Method;
 
 import com.linecorp.armeria.client.grpc.GrpcClientStubFactory;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.Exceptions;
 
 import io.grpc.Channel;
@@ -32,6 +33,7 @@
  */
 public final class ReactorGrpcClientStubFactory implements GrpcClientStubFactory {
 
+    @Nullable
     @Override
     public ServiceDescriptor findServiceDescriptor(Class<?> clientType) {
         final String clientTypeName = clientType.getName();
@@ -53,6 +55,7 @@ public ServiceDescriptor findServiceDescriptor(Class<?> clientType) {
     @Override
     public Object newClientStub(Class<?> clientType, Channel channel) {
         final Method stubFactoryMethod = GrpcClientFactoryUtil.findStubFactoryMethod(clientType);
+        assert stubFactoryMethod != null : "No stub factory method found for " + clientType;
         try {
             return stubFactoryMethod.invoke(null, channel);
         } catch (IllegalAccessException | InvocationTargetException e) {

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ScalaPbGrpcClientStubFactory.java
Patch:
@@ -22,6 +22,7 @@
 import java.lang.reflect.Method;
 
 import com.linecorp.armeria.client.grpc.GrpcClientStubFactory;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.Exceptions;
 
 import io.grpc.Channel;
@@ -32,6 +33,7 @@
  */
 public final class ScalaPbGrpcClientStubFactory implements GrpcClientStubFactory {
 
+    @Nullable
     @Override
     public ServiceDescriptor findServiceDescriptor(Class<?> clientType) {
         final Class<?> stubClass = clientType.getEnclosingClass();
@@ -50,6 +52,7 @@ public ServiceDescriptor findServiceDescriptor(Class<?> clientType) {
     @Override
     public Object newClientStub(Class<?> clientType, Channel channel) {
         final Method stubFactoryMethod = GrpcClientFactoryUtil.findStubFactoryMethod(clientType);
+        assert stubFactoryMethod != null : "No stub factory method found for " + clientType;
         try {
             return stubFactoryMethod.invoke(null, channel);
         } catch (IllegalAccessException | InvocationTargetException e) {

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ServiceDescriptorResolutionException.java
Patch:
@@ -36,6 +36,6 @@ public ServiceDescriptorResolutionException(String stubFactoryName, Throwable ca
 
     @Override
     public String toString() {
-        return stubFactoryName + '=' + getCause().toString();
+        return stubFactoryName + '=' + getCause();
     }
 }

File: grpc/src/main/java/com/linecorp/armeria/internal/common/grpc/MetadataUtil.java
Patch:
@@ -33,6 +33,7 @@
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpHeadersBuilder;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
 
 import io.grpc.InternalMetadata;
@@ -70,8 +71,8 @@ public final class MetadataUtil {
      * Copies the headers in the gRPC {@link Metadata} to the Armeria {@link HttpHeadersBuilder}. Headers will
      * be added, without replacing any currently present in the {@link HttpHeaders}.
      */
-    public static void fillHeaders(Metadata metadata, HttpHeadersBuilder builder) {
-        if (InternalMetadata.headerCount(metadata) == 0) {
+    public static void fillHeaders(@Nullable Metadata metadata, HttpHeadersBuilder builder) {
+        if (metadata == null || InternalMetadata.headerCount(metadata) == 0) {
             return;
         }
 

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/DeferredListener.java
Patch:
@@ -69,6 +69,7 @@ final class DeferredListener<I> extends ServerCall.Listener<I> {
             }
 
             this.delegate = delegate;
+            assert pendingQueue != null;
             try {
                 for (;;) {
                     final Consumer<Listener<I>> task = pendingQueue.poll();
@@ -142,6 +143,7 @@ private void maybeAddPendingTask(Consumer<ServerCall.Listener<I>> task) {
     }
 
     private void addPendingTask(Consumer<ServerCall.Listener<I>> task) {
+        assert pendingQueue != null;
         pendingQueue.add(task);
     }
 

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcDecoratingService.java
Patch:
@@ -100,6 +100,7 @@ public List<ServerServiceDefinition> services() {
         return delegate.services();
     }
 
+    @Nullable
     @Override
     public ServerMethodDefinition<?, ?> methodDefinition(ServiceRequestContext ctx) {
         return delegate.methodDefinition(ctx);

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/HttpJsonTranscodingService.java
Patch:
@@ -566,6 +566,7 @@ private HttpJsonTranscodingService(GrpcService delegate,
                                           .contains(HttpJsonTranscodingQueryParamMatchRule.ORIGINAL_FIELD);
     }
 
+    @Nullable
     @Override
     public HttpEndpointSpecification httpEndpointSpecification(Route route) {
         requireNonNull(route, "route");
@@ -597,6 +598,7 @@ public Set<Route> routes() {
         return routes;
     }
 
+    @Nullable
     @Override
     public ServerMethodDefinition<?, ?> methodDefinition(ServiceRequestContext ctx) {
         final TranscodingSpec spec = routeAndSpecs.get(ctx.config().mappedRoute());

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/JsonUnframedGrpcErrorHandler.java
Patch:
@@ -135,6 +135,7 @@ public HttpResponse handle(ServiceRequestContext ctx, Status status, AggregatedH
         final String grpcMessage = status.getDescription();
         final Throwable cause = responseCause(ctx);
         final HttpStatus httpStatus = statusMappingFunction.apply(ctx, status, cause);
+        assert httpStatus != null : "Default statusMappingFunction returned null?";
         final HttpHeaders trailers = !response.trailers().isEmpty() ?
                                      response.trailers() : response.headers();
         final String grpcStatusDetailsBin = trailers.get(GrpcHeaderNames.GRPC_STATUS_DETAILS_BIN);

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/StreamingServerCall.java
Patch:
@@ -262,7 +262,7 @@ public void onError(Throwable t) {
     }
 
     @Override
-    public void transportReportStatus(Status status, Metadata metadata) {
+    public void transportReportStatus(Status status, @Nullable Metadata metadata) {
         // A server doesn't see trailers from the client so will never have Metadata here.
 
         if (isCloseCalled()) {

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/TextUnframedGrpcErrorHandler.java
Patch:
@@ -76,6 +76,7 @@ public HttpResponse handle(ServiceRequestContext ctx, Status status, AggregatedH
         final String grpcMessage = status.getDescription();
         final Throwable cause = responseCause(ctx);
         final HttpStatus httpStatus = statusMappingFunction.apply(ctx, status, cause);
+        assert httpStatus != null : "Default statusMappingFunction returned null?";
         final ResponseHeaders responseHeaders = ResponseHeaders.builder(httpStatus)
                                                                .contentType(MediaType.PLAIN_TEXT_UTF_8)
                                                                .addInt(GrpcHeaderNames.GRPC_STATUS,

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/UnframedGrpcService.java
Patch:
@@ -32,6 +32,7 @@
 import com.linecorp.armeria.common.RequestHeadersBuilder;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.SerializationFormat;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
 import com.linecorp.armeria.common.logging.RequestLogProperty;
@@ -76,6 +77,7 @@ final class UnframedGrpcService extends AbstractUnframedGrpcService {
         checkArgument(delegate.isFramed(), "Decorated service must be a framed GrpcService.");
     }
 
+    @Nullable
     @Override
     public ServerMethodDefinition<?, ?> methodDefinition(ServiceRequestContext ctx) {
         return delegate.methodDefinition(ctx);

File: it/kubernetes-chaos-tests/src/main/java/com/linecorp/armeria/kubernetes/it/CheckerCommand.java
Patch:
@@ -48,6 +48,7 @@
 import picocli.CommandLine;
 import picocli.CommandLine.Command;
 
+@SuppressWarnings("NullAway")
 @Command(name = "checker", mixinStandardHelpOptions = true)
 public class CheckerCommand implements Runnable {
 

File: it/kubernetes-chaos-tests/src/main/java/com/linecorp/armeria/kubernetes/it/ControlCommand.java
Patch:
@@ -44,6 +44,7 @@
 import picocli.CommandLine;
 import picocli.CommandLine.Command;
 
+@SuppressWarnings("NullAway")
 @Command(name = "control", mixinStandardHelpOptions = true)
 public class ControlCommand implements Runnable {
 

File: jetty/jetty11/src/main/java/com/linecorp/armeria/server/jetty/JettyService.java
Patch:
@@ -411,6 +411,7 @@ public void send(MetaData.Request unused, MetaData.@Nullable Response response,
                 final int length = content != null ? content.remaining() : 0;
                 if (ctx.request().headers().method() != HttpMethod.HEAD && length != 0) {
                     final HttpData data;
+                    assert content != null;
                     if (content.hasArray()) {
                         final int from = content.arrayOffset() + content.position();
                         content.position(content.position() + length);

File: jetty/jetty9/src/main/java/com/linecorp/armeria/server/jetty/JettyService.java
Patch:
@@ -421,6 +421,7 @@ public void send(MetaData.@Nullable Response info, boolean head,
                 final int length = content != null ? content.remaining() : 0;
                 if (!head && length != 0) {
                     final HttpData data;
+                    assert content != null;
                     if (content.hasArray()) {
                         final int from = content.arrayOffset() + content.position();
                         content.position(content.position() + length);

File: kubernetes/src/main/java/com/linecorp/armeria/client/kubernetes/ArmeriaWebSocket.java
Patch:
@@ -52,6 +52,7 @@ public boolean send(ByteBuffer buffer) {
         // 'buffer' may be mutated by the caller, so we need to copy it.
         final ByteBufAllocator alloc = ClientRequestContext.mapCurrent(RequestContext::alloc,
                                                                        () -> ByteBufAllocator.DEFAULT);
+        assert alloc != null;
         final ByteBuf data = alloc.buffer(buffer.remaining()).writeBytes(buffer.duplicate());
         final int dataLength = data.readableBytes();
         pending.addAndGet(dataLength);

File: logback/logback12/src/main/java/com/linecorp/armeria/common/logback/UnionMap.java
Patch:
@@ -83,6 +83,7 @@ public boolean containsValue(Object value) {
         return first.containsValue(value) || second.containsValue(value);
     }
 
+    @Nullable
     @Override
     public V get(Object key) {
         final V value = first.get(key);

File: oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/OAuth2ResourceOwnerPasswordCredentialsGrantBuilder.java
Patch:
@@ -65,6 +65,7 @@ public OAuth2ResourceOwnerPasswordCredentialsGrantBuilder userCredentials(
      * Builds a new instance of {@link OAuth2ResourceOwnerPasswordCredentialsGrant} using configured parameters.
      */
     public OAuth2ResourceOwnerPasswordCredentialsGrant build() {
+        final Supplier<? extends Entry<String, String>> userCredentialsSupplier = this.userCredentialsSupplier;
         checkState(userCredentialsSupplier != null, "userCredentialsSupplier must be set.");
         final ClientAuthentication clientAuthentication = buildClientAuthentication();
         final Supplier<AccessTokenRequest> accessTokenRequestSupplier = () -> {

File: oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/DefaultTokenOperationRequest.java
Patch:
@@ -53,6 +53,7 @@ public String token() {
         return token;
     }
 
+    @Nullable
     @Override
     public String tokenTypeHint() {
         return tokenTypeHint;

File: oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/InvalidClientException.java
Patch:
@@ -44,7 +44,7 @@ public final class InvalidClientException extends TokenRequestException {
      *                 thus MUST NOT include characters outside
      *                 the set {@code %x21} / {@code %x23-5B} / {@code %x5D-7E}.
      */
-    public InvalidClientException(String errorDescription, @Nullable String errorUri) {
+    public InvalidClientException(@Nullable String errorDescription, @Nullable String errorUri) {
         super(errorDescription, errorUri);
     }
 
@@ -62,7 +62,8 @@ public InvalidClientException(String errorDescription, @Nullable String errorUri
      * @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method).
      *              (A {@code null} value is permitted, and indicates that the cause is nonexistent or unknown.)
      */
-    public InvalidClientException(String errorDescription, @Nullable String errorUri, Throwable cause) {
+    public InvalidClientException(@Nullable String errorDescription, @Nullable String errorUri,
+                                  @Nullable Throwable cause) {
         super(errorDescription, errorUri, cause);
     }
 }

File: oauth2/src/main/java/com/linecorp/armeria/common/auth/oauth2/TokenRequestException.java
Patch:
@@ -100,7 +100,7 @@ public static TokenRequestException parse(String rawResponse) {
      *                 thus MUST NOT include characters outside
      *                 the set {@code %x21} / {@code %x23-5B} / {@code %x5D-7E}.
      */
-    public TokenRequestException(String errorDescription, @Nullable String errorUri) {
+    public TokenRequestException(@Nullable String errorDescription, @Nullable String errorUri) {
         super(errorDescription);
         this.errorUri = errorUri;
     }
@@ -119,7 +119,8 @@ public TokenRequestException(String errorDescription, @Nullable String errorUri)
      * @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method).
      *              (A {@code null} value is permitted, and indicates that the cause is nonexistent or unknown.)
      */
-    public TokenRequestException(String errorDescription, @Nullable String errorUri, Throwable cause) {
+    public TokenRequestException(@Nullable String errorDescription, @Nullable String errorUri,
+                                 @Nullable Throwable cause) {
         super(errorDescription, cause);
         this.errorUri = errorUri;
     }

File: protobuf/src/main/java/com/linecorp/armeria/server/protobuf/ProtobufRequestConverterFunctionProvider.java
Patch:
@@ -24,6 +24,7 @@
 
 import com.google.protobuf.Message;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.server.annotation.RequestConverterFunction;
 import com.linecorp.armeria.server.annotation.RequestConverterFunctionProvider;
@@ -35,6 +36,7 @@
 @UnstableApi
 public final class ProtobufRequestConverterFunctionProvider implements RequestConverterFunctionProvider {
 
+    @Nullable
     @Override
     public RequestConverterFunction createRequestConverterFunction(Type requestType,
                                                                    RequestConverterFunction requestConverter) {

File: protobuf/src/main/java/com/linecorp/armeria/server/protobuf/ProtobufResponseConverterFunctionProvider.java
Patch:
@@ -27,6 +27,7 @@
 import com.google.protobuf.Message;
 import com.google.protobuf.MessageLite;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.server.annotation.ResponseConverterFunction;
 import com.linecorp.armeria.server.annotation.ResponseConverterFunctionProvider;
@@ -37,6 +38,7 @@
 @UnstableApi
 public final class ProtobufResponseConverterFunctionProvider implements ResponseConverterFunctionProvider {
 
+    @Nullable
     @Override
     public ResponseConverterFunction createResponseConverterFunction(Type returnType) {
         if (isSupportedType(returnType)) {

File: resteasy/src/main/java/com/linecorp/armeria/internal/common/resteasy/HttpMessageSubscriberAdapter.java
Patch:
@@ -53,6 +53,8 @@ public void onSubscribe(Subscription subscription) {
 
     @Override
     public void onNext(HttpObject httpObject) {
+        assert subscription != null;
+
         final boolean eos = httpObject.isEndOfStream();
         if (httpObject instanceof HttpHeaders) {
             subscriber.onHeaders((HttpHeaders) httpObject);

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlDecorator.java
Patch:
@@ -198,6 +198,7 @@ private AuthnRequest createAuthRequest(SamlIdentityProviderConfig idp, String de
         // The ProtocolBinding attribute is mutually exclusive with the AssertionConsumerServiceIndex attribute
         // and is typically accompanied by the AssertionConsumerServiceURL attribute.
         final SamlPortConfig portConfig = portConfigHolder.config();
+        assert portConfig != null;
         final SamlEndpoint acsEndpoint = idp.acsEndpoint() != null ? idp.acsEndpoint()
                                                                    : sp.defaultAcsConfig().endpoint();
         authnRequest.setAssertionConsumerServiceURL(acsEndpoint.toUriString(portConfig.scheme().uriText(),

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlService.java
Patch:
@@ -169,6 +169,8 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
             }
 
             final SamlPortConfig portConfig = portConfigHolder.config();
+            assert portConfig != null;
+
             final boolean isTls = ctx.sessionProtocol().isTls();
             if (portConfig.scheme().isTls() != isTls) {
                 if (isTls) {

File: spring/boot3-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/ArmeriaConfigurationUtil.java
Patch:
@@ -258,6 +258,7 @@ private static void configureInternalService(ServerBuilder server, InternalServi
         }
 
         if (needsPortBasedVirtualHost) {
+            assert internalPort != null;
             if (usesPrefixPath) {
                 server.virtualHost(internalPort.getPort()).serviceUnder(servicePath, service);
             } else {

File: spring/boot3-autoconfigure/src/main/java/com/linecorp/armeria/spring/AbstractArmeriaBeanPostProcessor.java
Patch:
@@ -82,6 +82,8 @@ protected InjectionMetadata findLocalArmeriaPortMetadata(
                 }
             }
         }
+
+        assert metadata != null;
         return metadata;
     }
 

File: spring/boot3-autoconfigure/src/main/java/com/linecorp/armeria/spring/Ssl.java
Patch:
@@ -137,7 +137,7 @@ public ClientAuth getClientAuth() {
      * Sets whether the client authentication is not none ({@link ClientAuth#NONE}), optional
      * ({@link ClientAuth#OPTIONAL}) or required ({@link ClientAuth#REQUIRE}).
      */
-    public Ssl setClientAuth(ClientAuth clientAuth) {
+    public Ssl setClientAuth(@Nullable ClientAuth clientAuth) {
         this.clientAuth = clientAuth;
         return this;
     }
@@ -154,7 +154,7 @@ public List<String> getCiphers() {
     /**
      * Sets the supported SSL ciphers.
      */
-    public Ssl setCiphers(List<String> ciphers) {
+    public Ssl setCiphers(@Nullable List<String> ciphers) {
         this.ciphers = ciphers;
         return this;
     }
@@ -171,7 +171,7 @@ public List<String> getEnabledProtocols() {
     /**
      * Sets the enabled SSL protocols.
      */
-    public Ssl setEnabledProtocols(List<String> enabledProtocols) {
+    public Ssl setEnabledProtocols(@Nullable List<String> enabledProtocols) {
         this.enabledProtocols = enabledProtocols;
         return this;
     }

File: spring/boot3-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/AbstractServerHttpRequestVersionSpecific.java
Patch:
@@ -22,11 +22,13 @@
 import org.springframework.http.server.reactive.AbstractServerHttpRequest;
 import org.springframework.util.MultiValueMap;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * A version specific {@link AbstractServerHttpRequest} which implements the APIs that only exists in Spring 6.
  */
 abstract class AbstractServerHttpRequestVersionSpecific extends AbstractServerHttpRequest {
-    protected AbstractServerHttpRequestVersionSpecific(HttpMethod method, URI uri, String contextPath,
+    protected AbstractServerHttpRequestVersionSpecific(HttpMethod method, URI uri, @Nullable String contextPath,
                                                        MultiValueMap<String, String> headers) {
         super(method, uri, contextPath, headers);
     }

File: spring/boot3-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/AbstractServerHttpResponse.java
Patch:
@@ -110,7 +110,9 @@ public final DataBufferFactory bufferFactory() {
     }
 
     final State state() {
-        return state.get();
+        final State state = this.state.get();
+        assert state != null;
+        return state;
     }
 
     @Override

File: spring/boot3-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaHttpResponseBodyStream.java
Patch:
@@ -75,7 +75,9 @@ public void subscribe(Subscriber<? super HttpData> s) {
             if (publisherForLateSubscribersUpdater.compareAndSet(this, null, newPublisher)) {
                 newPublisher.subscribe(s);
             } else {
-                this.publisherForLateSubscribers.subscribe(s);
+                final Publisher<HttpData> oldPublisherForLateSubscribers = this.publisherForLateSubscribers;
+                assert oldPublisherForLateSubscribers != null;
+                oldPublisherForLateSubscribers.subscribe(s);
             }
         }
     }

File: testing-internal/src/main/java/com/linecorp/armeria/internal/testing/webapp/WebAppContainerMutualTlsTest.java
Patch:
@@ -86,6 +86,7 @@ public void mutualTlsAttrs(SessionProtocol sessionProtocol) throws Exception {
 
             final AggregatedHttpResponse res = client.get("/jsp/mutual_tls.jsp").aggregate().join();
             final SSLSession sslSession = server().requestContextCaptor().take().sslSession();
+            assert sslSession != null;
             final String expectedId;
             if (sslSession.getId() != null) {
                 expectedId = BaseEncoding.base16().encode(sslSession.getId());

File: thrift/thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/ThriftReply.java
Patch:
@@ -88,6 +88,7 @@ public boolean isException() {
         if (isException()) {
             throw new IllegalStateException("not a reply but an exception");
         }
+        assert result != null;
         return result;
     }
 
@@ -100,6 +101,7 @@ public TApplicationException exception() {
         if (!isException()) {
             throw new IllegalStateException("not an exception but a reply");
         }
+        assert exception != null;
         return exception;
     }
 

File: thrift/thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/text/TTextProtocol.java
Patch:
@@ -442,6 +442,7 @@ public TMessage readMessageBegin() throws TException {
         } catch (IOException e) {
             throw new TException("Could not parse input, is it valid json?", e);
         }
+        assert root != null;
         if (!root.isObject()) {
             throw new TException("The top level of the input must be a json object with method and args!");
         }

File: thrift/thrift0.13/src/main/java/com/linecorp/armeria/internal/common/thrift/DefaultThriftProtocolFactoryProvider.java
Patch:
@@ -24,6 +24,7 @@
 import com.google.common.collect.ImmutableSet;
 
 import com.linecorp.armeria.common.SerializationFormat;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.thrift.ThriftProtocolFactories;
 import com.linecorp.armeria.common.thrift.ThriftProtocolFactoryProvider;
 import com.linecorp.armeria.common.thrift.ThriftSerializationFormats;
@@ -46,6 +47,7 @@ protected Set<SerializationFormat> serializationFormats() {
         return SERIALIZATION_FORMATS;
     }
 
+    @Nullable
     @Override
     protected TProtocolFactory protocolFactory(SerializationFormat serializationFormat,
                                                int maxStringLength, int maxContainerLength) {

File: thrift/thrift0.13/src/main/java/com/linecorp/armeria/internal/server/thrift/ThriftDocServicePlugin.java
Patch:
@@ -365,6 +365,7 @@ public Set<Class<?>> supportedExampleRequestTypes() {
         return ImmutableSet.of(TBase.class);
     }
 
+    @Nullable
     @Override
     public String guessServiceName(Object exampleRequest) {
         final TBase<?, ?> exampleTBase = asTBase(exampleRequest);
@@ -375,6 +376,7 @@ public String guessServiceName(Object exampleRequest) {
         return exampleTBase.getClass().getEnclosingClass().getName();
     }
 
+    @Nullable
     @Override
     public String guessServiceMethodName(Object exampleRequest) {
         final TBase<?, ?> exampleTBase = asTBase(exampleRequest);
@@ -387,6 +389,7 @@ public String guessServiceMethodName(Object exampleRequest) {
                                   typeName.length() - REQUEST_STRUCT_SUFFIX.length());
     }
 
+    @Nullable
     @Override
     public String serializeExampleRequest(String serviceName, String methodName,
                                           Object exampleRequest) {

File: thrift/thrift0.13/src/main/java/com/linecorp/armeria/internal/server/thrift/ThriftDocStringExtractor.java
Patch:
@@ -65,6 +65,7 @@ protected Map<String, String> getDocStringsFromFiles(Map<String, byte[]> files)
                 final Map<String, Object> namespaces =
                         (Map<String, Object>) json.getOrDefault("namespaces", ImmutableMap.of());
                 final String packageName = (String) namespaces.get("java");
+                assert packageName != null : "Missing namespace for Java? " + namespaces;
                 json.forEach((key, children) -> {
                     if (children instanceof Collection) {
                         @SuppressWarnings("unchecked")

File: tomcat10/src/main/java/com/linecorp/armeria/server/tomcat/ManagedTomcatService.java
Patch:
@@ -135,11 +135,13 @@ void stop() throws Exception {
         postStopTask.accept(connector);
     }
 
+    @Nullable
     @Override
     public Connector connector() {
         return connector;
     }
 
+    @Nullable
     @Override
     String hostName() {
         return hostName;

File: tomcat10/src/main/java/com/linecorp/armeria/server/tomcat/TomcatService.java
Patch:
@@ -513,6 +513,7 @@ private Request convertRequest(ServiceRequestContext ctx, String mappedPath, Agg
         coyoteReq.setLocalPort(localAddr.getPort());
 
         final String hostHeader = req.authority();
+        assert hostHeader != null;
         final int colonPos = hostHeader.indexOf(':');
         if (colonPos < 0) {
             coyoteReq.serverName().setString(hostHeader);

File: tomcat10/src/main/java/com/linecorp/armeria/server/tomcat/TomcatUtil.java
Patch:
@@ -34,10 +34,13 @@
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.Tomcat.DefaultWebXmlListener;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 final class TomcatUtil {
 
     private static final LifecycleListener defaultWebXmlListener = new DefaultWebXmlListener();
 
+    @Nullable
     static URL getWebAppConfigFile(String contextPath, Path docBase) {
         final AtomicReference<URL> configUrlRef = new AtomicReference<>();
         new Tomcat() {

File: tomcat10/src/main/java/com/linecorp/armeria/server/tomcat/UnmanagedTomcatService.java
Patch:
@@ -54,6 +54,7 @@ public Connector connector() {
         return tomcat.getConnector();
     }
 
+    @Nullable
     @Override
     public String hostName() {
         if (hostName != null) {

File: tomcat8/src/main/java/com/linecorp/armeria/server/tomcat/ArmeriaProcessor.java
Patch:
@@ -26,6 +26,8 @@
 import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * Provides a fake Processor to provide {@link ActionHook} to request/response.
  */
@@ -89,6 +91,7 @@ protected AbstractEndpoint.Handler.SocketState dispatchEndRequest() throws IOExc
         throw new UnsupportedOperationException();
     }
 
+    @Nullable
     @Override
     protected AbstractEndpoint.Handler.SocketState service(SocketWrapperBase<?> socketWrapper)
             throws IOException {

File: tomcat9/src/main/java/com/linecorp/armeria/server/tomcat/ArmeriaProcessor.java
Patch:
@@ -26,6 +26,8 @@
 import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * Provides a fake Processor to provide {@code ActionHook} to request/response.
  */
@@ -94,6 +96,7 @@ protected AbstractEndpoint.Handler.SocketState dispatchEndRequest() throws IOExc
         throw new UnsupportedOperationException();
     }
 
+    @Nullable
     @Override
     protected AbstractEndpoint.Handler.SocketState service(SocketWrapperBase<?> socketWrapper)
             throws IOException {

File: xds/src/main/java/com/linecorp/armeria/xds/AbstractResourceNode.java
Patch:
@@ -54,6 +54,7 @@ XdsBootstrapImpl xdsBootstrap() {
         return xdsBootstrap;
     }
 
+    @Nullable
     @Override
     public ConfigSource configSource() {
         return configSource;
@@ -63,6 +64,7 @@ private void setCurrent(@Nullable T current) {
         this.current = current;
     }
 
+    @Nullable
     @Override
     public T currentResource() {
         return current;

File: xds/src/main/java/com/linecorp/armeria/xds/AbstractRoot.java
Patch:
@@ -107,7 +107,7 @@ public void snapshotUpdated(T newSnapshot) {
             return;
         }
         snapshot = newSnapshot;
-        notifyWatchers("snapshotUpdated", watcher -> watcher.snapshotUpdated(snapshot));
+        notifyWatchers("snapshotUpdated", watcher -> watcher.snapshotUpdated(newSnapshot));
     }
 
     @Override

File: xds/src/main/java/com/linecorp/armeria/xds/ClusterXdsResource.java
Patch:
@@ -54,6 +54,7 @@ ClusterXdsResource withPrimer(@Nullable XdsResource primer) {
         return new ClusterXdsResource(cluster, primer);
     }
 
+    @Nullable
     @Override
     XdsResource primer() {
         return primer;

File: xds/src/main/java/com/linecorp/armeria/xds/CompositeXdsStream.java
Patch:
@@ -49,6 +49,8 @@ public void close() {
 
     @Override
     public void resourcesUpdated(XdsType type) {
-        streamMap.get(type).resourcesUpdated(type);
+        final XdsStream stream = streamMap.get(type);
+        assert stream != null;
+        stream.resourcesUpdated(type);
     }
 }

File: xds/src/main/java/com/linecorp/armeria/xds/XdsResourceParserUtil.java
Patch:
@@ -45,7 +45,9 @@ final class XdsResourceParserUtil {
     }
 
     static ResourceParser<?, ?> fromType(XdsType xdsType) {
-        return typeToResourceType.get(xdsType);
+        final ResourceParser<?, ?> parser = typeToResourceType.get(xdsType);
+        assert parser != null;
+        return parser;
     }
 
     private XdsResourceParserUtil() {}

File: xds/src/main/java/com/linecorp/armeria/xds/client/endpoint/DefaultLbStateFactory.java
Patch:
@@ -78,6 +78,7 @@ private static PerPriorityLoad calculatePerPriorityLoad(PrioritySet prioritySet)
     private static HealthAndDegraded recalculatePerPriorityState(
             int priority, PrioritySet prioritySet) {
         final HostSet hostSet = prioritySet.hostSets().get(priority);
+        assert hostSet != null;
         final int hostCount = hostSet.hosts().size();
 
         if (hostCount <= 0) {
@@ -187,6 +188,7 @@ private static PerPriorityPanic recalculatePerPriorityPanic(PrioritySet priority
         final ImmutableMap.Builder<Integer, Boolean> perPriorityPanicBuilder = ImmutableMap.builder();
         for (Integer priority : prioritySet.priorities()) {
             final HostSet hostSet = prioritySet.hostSets().get(priority);
+            assert hostSet != null;
             final boolean isPanic =
                     normalizedTotalAvailability == 100 ? false : isHostSetInPanic(hostSet, panicThreshold);
             perPriorityPanicBuilder.put(priority, isPanic);
@@ -211,6 +213,7 @@ private static PerPriorityLoad recalculateLoadInTotalPanic(PrioritySet priorityS
                 new Int2IntOpenHashMap(prioritySet.priorities().size());
         for (Integer priority: prioritySet.priorities()) {
             final HostSet hostSet = prioritySet.hostSets().get(priority);
+            assert hostSet != null;
             final int hostsSize = hostSet.hosts().size();
             if (firstNoEmpty == -1 && hostsSize > 0) {
                 firstNoEmpty = priority;

File: xds/src/main/java/com/linecorp/armeria/xds/client/endpoint/DefaultLoadBalancer.java
Patch:
@@ -95,6 +95,7 @@ HostsSource hostSourceToUse(DefaultLbState lbState, int hash) {
         final PrioritySet prioritySet = lbState.prioritySet();
         final int priority = priorityAndAvailability.priority;
         final HostSet hostSet = prioritySet.hostSets().get(priority);
+        assert hostSet != null;
         final HostAvailability hostAvailability = priorityAndAvailability.hostAvailability;
         if (lbState.perPriorityPanic().get(priority)) {
             if (prioritySet.failTrafficOnPanic()) {

File: zookeeper3/src/main/java/com/linecorp/armeria/client/zookeeper/LegacyZooKeeperDiscoverySpec.java
Patch:
@@ -18,11 +18,13 @@
 import javax.annotation.Nonnull;
 
 import com.linecorp.armeria.client.Endpoint;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.zookeeper.LegacyNodeValueCodec;
 
 enum LegacyZooKeeperDiscoverySpec implements ZooKeeperDiscoverySpec {
     INSTANCE;
 
+    @Nullable
     @Override
     public String path() {
         return null;

File: zookeeper3/src/main/java/com/linecorp/armeria/client/zookeeper/ServerSetsDiscoverySpec.java
Patch:
@@ -21,6 +21,7 @@
 import org.slf4j.LoggerFactory;
 
 import com.linecorp.armeria.client.Endpoint;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.zookeeper.ServerSetsInstance;
 import com.linecorp.armeria.internal.common.zookeeper.ServerSetsNodeValueCodec;
 
@@ -34,11 +35,13 @@ final class ServerSetsDiscoverySpec implements ZooKeeperDiscoverySpec {
         this.converter = converter;
     }
 
+    @Nullable
     @Override
     public String path() {
         return null;
     }
 
+    @Nullable
     @Override
     public Endpoint decode(byte[] data) {
         final ServerSetsInstance decodedInstance = ServerSetsNodeValueCodec.INSTANCE.decode(data);

File: resteasy/src/main/java/com/linecorp/armeria/client/resteasy/ArmeriaJaxrsClientEngine.java
Patch:
@@ -110,6 +110,7 @@ public ArmeriaJaxrsClientEngine(WebClient client, int bufferSize, @Nullable Dura
 
     @Override
     public void close() {
+        client.options().factory().closeAsync();
     }
 
     /**

File: grpc/src/main/java/com/linecorp/armeria/common/grpc/GrpcExceptionHandlerFunction.java
Patch:
@@ -65,6 +65,9 @@ static GrpcExceptionHandlerFunction of() {
      */
     default GrpcExceptionHandlerFunction orElse(GrpcExceptionHandlerFunction next) {
         requireNonNull(next, "next");
+        if (this == next) {
+            return this;
+        }
         return (ctx, status, cause, metadata) -> {
             final Status newStatus = apply(ctx, status, cause, metadata);
             if (newStatus != null) {

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaChannel.java
Patch:
@@ -44,13 +44,13 @@
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.grpc.GrpcCallOptions;
-import com.linecorp.armeria.common.grpc.GrpcExceptionHandlerFunction;
 import com.linecorp.armeria.common.grpc.GrpcJsonMarshaller;
 import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.common.util.SystemInfo;
 import com.linecorp.armeria.common.util.Unwrappable;
 import com.linecorp.armeria.internal.client.DefaultClientRequestContext;
 import com.linecorp.armeria.internal.common.RequestTargetCache;
+import com.linecorp.armeria.internal.common.grpc.InternalGrpcExceptionHandler;
 
 import io.grpc.CallCredentials;
 import io.grpc.CallOptions;
@@ -98,7 +98,7 @@ final class ArmeriaChannel extends Channel implements ClientBuilderParams, Unwra
     private final Compressor compressor;
     private final DecompressorRegistry decompressorRegistry;
     private final CallCredentials credentials0;
-    private final GrpcExceptionHandlerFunction exceptionHandler;
+    private final InternalGrpcExceptionHandler exceptionHandler;
     private final boolean useMethodMarshaller;
 
     ArmeriaChannel(ClientBuilderParams params,
@@ -124,7 +124,7 @@ final class ArmeriaChannel extends Channel implements ClientBuilderParams, Unwra
         compressor = options.get(GrpcClientOptions.COMPRESSOR);
         decompressorRegistry = options.get(GrpcClientOptions.DECOMPRESSOR_REGISTRY);
         credentials0 = options.get(GrpcClientOptions.CALL_CREDENTIALS);
-        exceptionHandler = options.get(GrpcClientOptions.EXCEPTION_HANDLER);
+        exceptionHandler = new InternalGrpcExceptionHandler(options.get(GrpcClientOptions.EXCEPTION_HANDLER));
     }
 
     @Override

File: grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/HttpStreamDeframerTest.java
Patch:
@@ -58,8 +58,8 @@ void setUp() {
         final ServiceRequestContext ctx = ServiceRequestContext.of(HttpRequest.of(HttpMethod.GET, "/"));
         final TransportStatusListener statusListener = (status, metadata) -> statusRef.set(status);
         deframer = new HttpStreamDeframer(DecompressorRegistry.getDefaultInstance(), ctx, statusListener,
-                                          GrpcExceptionHandlerFunction.of(), Integer.MAX_VALUE,
-                                          false, true);
+                                          new InternalGrpcExceptionHandler(GrpcExceptionHandlerFunction.of()),
+                                          Integer.MAX_VALUE, false, true);
     }
 
     @Test

File: core/src/main/java/com/linecorp/armeria/common/util/Version.java
Patch:
@@ -163,7 +163,7 @@ public static Map<String, Version> getAll(ClassLoader classLoader) {
             for (Object o : props.keySet()) {
                 final String k = (String) o;
 
-                final int dotIndex = k.indexOf('.');
+                final int dotIndex = k.lastIndexOf('.');
                 if (dotIndex <= 0) {
                     continue;
                 }

File: thrift/thrift0.13/src/test/java/com/linecorp/armeria/server/thrift/ThriftOverHttp2Test.java
Patch:
@@ -22,7 +22,7 @@
 
 import io.netty.handler.codec.http.DefaultHttpHeaders;
 
-public class ThriftOverHttp2Test extends AbstractThriftOverHttpTest {
+class ThriftOverHttp2Test extends AbstractThriftOverHttpTest {
     @Override
     protected TTransport newTransport(String uri, HttpHeaders headers) throws TTransportException {
         final io.netty.handler.codec.http.HttpHeaders nettyDefaultHeaders = new DefaultHttpHeaders();

File: benchmarks/jmh/src/jmh/java/com/linecorp/armeria/server/RoutersBenchmark.java
Patch:
@@ -78,7 +78,7 @@ private static ServiceConfig newServiceConfig(Route route) {
         final Path multipartUploadsLocation = Flags.defaultMultipartUploadsLocation();
         final ServiceErrorHandler serviceErrorHandler = ServerErrorHandler.ofDefault().asServiceErrorHandler();
         return new ServiceConfig(route, route,
-                                 SERVICE, defaultLogName, defaultServiceName, defaultServiceNaming, 0, 0,
+                                 SERVICE, defaultServiceName, defaultServiceNaming, defaultLogName, 0, 0,
                                  false, AccessLogWriter.disabled(), CommonPools.blockingTaskExecutor(),
                                  SuccessFunction.always(), 0, multipartUploadsLocation,
                                  MultipartRemovalStrategy.ON_RESPONSE_COMPLETION,

File: core/src/main/java/com/linecorp/armeria/client/AbstractHttpRequestHandler.java
Patch:
@@ -216,6 +216,7 @@ RequestHeaders mergedRequestHeaders(RequestHeaders headers) {
      * {@link Channel#flush()} when each write unit is done.
      */
     final void writeHeaders(RequestHeaders headers, boolean needs100Continue) {
+        assert session != null;
         final SessionProtocol protocol = session.protocol();
         assert protocol != null;
         if (needs100Continue) {

File: core/src/main/java/com/linecorp/armeria/client/Client.java
Patch:
@@ -24,6 +24,7 @@
 import com.linecorp.armeria.common.Response;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.Unwrappable;
 
 /**
@@ -71,6 +72,7 @@ public interface Client<I extends Request, O extends Response> extends Unwrappab
      * @see ClientFactory#unwrap(Object, Class)
      * @see Unwrappable
      */
+    @Nullable
     @Override
     default <T> T as(Class<T> type) {
         requireNonNull(type, "type");

File: core/src/main/java/com/linecorp/armeria/client/DecoratingClientFactory.java
Patch:
@@ -108,11 +108,13 @@ public Object newClient(ClientBuilderParams params) {
         return unwrap().newClient(params);
     }
 
+    @Nullable
     @Override
     public <T> ClientBuilderParams clientBuilderParams(T client) {
         return unwrap().clientBuilderParams(client);
     }
 
+    @Nullable
     @Override
     public <T> T unwrap(Object client, Class<T> type) {
         return unwrap().unwrap(client, type);

File: core/src/main/java/com/linecorp/armeria/client/DefaultClientFactory.java
Patch:
@@ -184,6 +184,7 @@ public Object newClient(ClientBuilderParams params) {
                 "No ClientFactory for scheme: " + scheme + " matched clientType: " + clientType);
     }
 
+    @Nullable
     @Override
     public <T> T unwrap(Object client, Class<T> type) {
         final T params = ClientFactory.super.unwrap(client, type);

File: core/src/main/java/com/linecorp/armeria/client/DefaultDnsCache.java
Patch:
@@ -147,6 +147,7 @@ public void cache(DnsQuestion question, UnknownHostException cause) {
         }
     }
 
+    @Nullable
     @Override
     public List<DnsRecord> get(DnsQuestion question) throws UnknownHostException {
         requireNonNull(question, "question");

File: core/src/main/java/com/linecorp/armeria/client/DefaultRequestOptions.java
Patch:
@@ -68,6 +68,7 @@ public long maxResponseLength() {
         return maxResponseLength;
     }
 
+    @Nullable
     @Override
     public Long requestAutoAbortDelayMillis() {
         return requestAutoAbortDelayMillis;
@@ -78,6 +79,7 @@ public Map<AttributeKey<?>, Object> attrs() {
         return attributeMap;
     }
 
+    @Nullable
     @Override
     public ExchangeType exchangeType() {
         return exchangeType;

File: core/src/main/java/com/linecorp/armeria/client/Endpoint.java
Patch:
@@ -37,6 +37,8 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.function.Consumer;
 
+import javax.annotation.Nonnull;
+
 import com.github.benmanes.caffeine.cache.Cache;
 import com.github.benmanes.caffeine.cache.Caffeine;
 import com.google.common.annotations.VisibleForTesting;
@@ -323,6 +325,7 @@ public EndpointSelectionStrategy selectionStrategy() {
         return EndpointSelectionStrategy.weightedRoundRobin();
     }
 
+    @Nonnull
     @Override
     public Endpoint selectNow(ClientRequestContext ctx) {
         return this;

File: core/src/main/java/com/linecorp/armeria/client/FutureTransformingRequestPreparation.java
Patch:
@@ -88,6 +88,7 @@ public CompletableFuture<T> execute() {
 
         return response.exceptionally(cause -> {
             cause = Exceptions.peel(cause);
+            assert errorHandler != null;
             final Object maybeRecovered = errorHandler.apply(cause);
             if (maybeRecovered instanceof Throwable) {
                 // The cause was translated.

File: core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java
Patch:
@@ -166,6 +166,7 @@ public SerializationFormat serializationFormat() {
         return serializationFormat;
     }
 
+    @Nullable
     @Override
     public SessionProtocol protocol() {
         return protocol;
@@ -223,8 +224,8 @@ public void invoke(PooledChannel pooledChannel, ClientRequestContext ctx,
         final long writeTimeoutMillis = ctx.writeTimeoutMillis();
 
         assert protocol != null;
-        assert responseDecoder != null;
         assert requestEncoder != null;
+        assert responseDecoder != null;
         if (!protocol.isMultiplex() && !serializationFormat.requiresNewConnection(protocol)) {
             // When HTTP/1.1 is used and the serialization format does not require
             // a new connection (w.g. WebSocket):
@@ -236,6 +237,7 @@ public void invoke(PooledChannel pooledChannel, ClientRequestContext ctx,
                     useHttp1Pipelining ? req.whenComplete()
                                        : CompletableFuture.allOf(req.whenComplete(), res.whenComplete());
             completionFuture.handle((ret, cause) -> {
+                assert responseDecoder != null;
                 if (isAcquirable(responseDecoder.keepAliveHandler())) {
                     pooledChannel.release();
                 }

File: core/src/main/java/com/linecorp/armeria/client/NoopHostFileEntriesResolver.java
Patch:
@@ -18,12 +18,15 @@
 
 import java.net.InetAddress;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 import io.netty.resolver.HostsFileEntriesResolver;
 import io.netty.resolver.ResolvedAddressTypes;
 
 enum NoopHostFileEntriesResolver implements HostsFileEntriesResolver {
     INSTANCE;
 
+    @Nullable
     @Override
     public InetAddress address(String inetHost, ResolvedAddressTypes resolvedAddressTypes) {
         return null;

File: core/src/main/java/com/linecorp/armeria/client/UnprocessedRequestException.java
Patch:
@@ -55,7 +55,9 @@ private UnprocessedRequestException(Throwable cause) {
     @Nonnull
     @Override
     public Throwable getCause() {
-        return super.getCause();
+        final Throwable cause = super.getCause();
+        assert cause != null;
+        return cause;
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/client/WebSocketHttp1ClientChannelHandler.java
Patch:
@@ -189,6 +189,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                         return;
                     }
 
+                    assert res != null;
                     res.startResponse();
                     final ResponseHeaders responseHeaders = ArmeriaHttpUtil.toArmeria(nettyRes);
                     if (responseHeaders.status() == HttpStatus.SWITCHING_PROTOCOLS) {
@@ -215,6 +216,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                     final ByteBuf data = (ByteBuf) msg;
                     final int dataLength = data.readableBytes();
                     if (dataLength > 0) {
+                        assert res != null;
                         final long maxContentLength = res.maxContentLength();
                         final long writtenBytes = res.writtenBytes();
                         if (maxContentLength > 0 && writtenBytes > maxContentLength - dataLength) {

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleWithContentBuilder.java
Patch:
@@ -83,6 +83,7 @@ private CircuitBreakerRuleWithContent<T> build(CircuitBreakerDecision decision)
             if (content == null) {
                 return NEXT_DECISION;
             }
+            assert responseFilter != null;
             return responseFilter.apply(ctx, content)
                                  .handle((matched, cause0) -> {
                                      if (cause0 != null) {

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/DefaultCircuitBreakerClientHandler.java
Patch:
@@ -23,6 +23,7 @@
 
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.common.Request;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.circuitbreaker.CircuitBreakerCallback;
 
 final class DefaultCircuitBreakerClientHandler implements CircuitBreakerClientHandler {
@@ -35,6 +36,7 @@ final class DefaultCircuitBreakerClientHandler implements CircuitBreakerClientHa
         this.mapping = mapping;
     }
 
+    @Nullable
     @Override
     public CircuitBreakerCallback tryRequest(ClientRequestContext ctx, Request req) {
         final CircuitBreaker circuitBreaker;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/AbstractEndpointGroup.java
Patch:
@@ -19,10 +19,12 @@
 import java.util.List;
 
 import com.linecorp.armeria.client.Endpoint;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.AbstractListenable;
 
 abstract class AbstractEndpointGroup extends AbstractListenable<List<Endpoint>> implements EndpointGroup {
 
+    @Nullable
     @Override
     protected List<Endpoint> latestValue() {
         if (whenReady().isDone()) {

File: core/src/main/java/com/linecorp/armeria/client/endpoint/AbstractEndpointSelector.java
Patch:
@@ -227,7 +227,7 @@ public boolean cancel(boolean mayInterruptIfRunning) {
         }
 
         @Override
-        public boolean complete(Endpoint value) {
+        public boolean complete(@Nullable Endpoint value) {
             cleanup(true);
             return super.complete(value);
         }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/CompositeEndpointGroup.java
Patch:
@@ -27,6 +27,7 @@
 
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.Endpoint;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.AsyncCloseable;
 import com.linecorp.armeria.common.util.AsyncCloseableSupport;
 import com.linecorp.armeria.common.util.ListenableAsyncCloseable;
@@ -104,6 +105,7 @@ public EndpointSelectionStrategy selectionStrategy() {
         return selectionStrategy;
     }
 
+    @Nullable
     @Override
     public Endpoint selectNow(ClientRequestContext ctx) {
         return selector.selectNow(ctx);

File: core/src/main/java/com/linecorp/armeria/client/endpoint/EndpointGroup.java
Patch:
@@ -29,6 +29,7 @@
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.client.retry.RetryingClient;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.util.AsyncCloseable;
 import com.linecorp.armeria.common.util.Listenable;
@@ -143,6 +144,7 @@ static EndpointGroup of(EndpointSelectionStrategy selectionStrategy,
      *         which was specified when constructing this {@link EndpointGroup},
      *         or {@code null} if this {@link EndpointGroup} is empty.
      */
+    @Nullable
     @Override
     Endpoint selectNow(ClientRequestContext ctx);
 

File: core/src/main/java/com/linecorp/armeria/client/endpoint/OrElseEndpointGroup.java
Patch:
@@ -26,6 +26,7 @@
 
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.Endpoint;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.AsyncCloseableSupport;
 import com.linecorp.armeria.common.util.ListenableAsyncCloseable;
 
@@ -68,6 +69,7 @@ public EndpointSelectionStrategy selectionStrategy() {
         return first.selectionStrategy();
     }
 
+    @Nullable
     @Override
     public Endpoint selectNow(ClientRequestContext ctx) {
         return selector.selectNow(ctx);

File: core/src/main/java/com/linecorp/armeria/client/endpoint/RoundRobinStrategy.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.Endpoint;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 final class RoundRobinStrategy implements EndpointSelectionStrategy {
 
@@ -46,6 +47,7 @@ static class RoundRobinSelector extends AbstractEndpointSelector {
             initialize();
         }
 
+        @Nullable
         @Override
         public Endpoint selectNow(ClientRequestContext ctx) {
             final List<Endpoint> endpoints = group().endpoints();

File: core/src/main/java/com/linecorp/armeria/client/endpoint/StickyEndpointSelectionStrategy.java
Patch:
@@ -25,6 +25,7 @@
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.common.HttpRequest;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * An {@link EndpointSelector} strategy which implements sticky load-balancing using
@@ -80,6 +81,7 @@ private static final class StickyEndpointSelector extends AbstractEndpointSelect
             initialize();
         }
 
+        @Nullable
         @Override
         public Endpoint selectNow(ClientRequestContext ctx) {
 

File: core/src/main/java/com/linecorp/armeria/client/endpoint/WeightRampingUpStrategy.java
Patch:
@@ -47,6 +47,7 @@
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.client.endpoint.WeightRampingUpStrategy.EndpointsRampingUpEntry.EndpointAndStep;
 import com.linecorp.armeria.common.CommonPools;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.ListenableAsyncCloseable;
 import com.linecorp.armeria.common.util.Ticker;
 import com.linecorp.armeria.internal.common.util.ReentrantShortLock;
@@ -166,6 +167,7 @@ private long computeCreateTimestamp(Endpoint endpoint) {
             return ticker.read();
         }
 
+        @Nullable
         @Override
         public Endpoint selectNow(ClientRequestContext ctx) {
             return endpointSelector.selectEndpoint();

File: core/src/main/java/com/linecorp/armeria/client/endpoint/WeightedRoundRobinStrategy.java
Patch:
@@ -69,6 +69,7 @@ protected void updateNewEndpoints(List<Endpoint> endpoints) {
             }
         }
 
+        @Nullable
         @Override
         public Endpoint selectNow(ClientRequestContext ctx) {
             final EndpointsAndWeights endpointsAndWeights = this.endpointsAndWeights;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HttpHealthChecker.java
Patch:
@@ -166,7 +166,7 @@ private class HealthCheckResponseSubscriber implements Subscriber<HttpObject> {
 
         private final ClientRequestContext reqCtx;
         private final HttpResponse res;
-        @SuppressWarnings("NotNullFieldNotInitialized")
+        @Nullable
         private Subscription subscription;
         @Nullable
         private ResponseHeaders responseHeaders;
@@ -192,6 +192,8 @@ public void onSubscribe(Subscription subscription) {
 
         @Override
         public void onNext(HttpObject obj) {
+            assert subscription != null;
+
             if (closeable.isClosing()) {
                 subscription.cancel();
                 return;

File: core/src/main/java/com/linecorp/armeria/client/proxy/DirectProxyConfig.java
Patch:
@@ -18,6 +18,8 @@
 
 import java.net.InetSocketAddress;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * Represents a direct connection without a proxy.
  */
@@ -32,6 +34,7 @@ public ProxyType proxyType() {
         return ProxyType.DIRECT;
     }
 
+    @Nullable
     @Override
     public InetSocketAddress proxyAddress() {
         return null;

File: core/src/main/java/com/linecorp/armeria/client/retry/Backoff.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.function.Supplier;
 
 import com.linecorp.armeria.common.Flags;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.Unwrappable;
 
 /**
@@ -152,6 +153,7 @@ static Backoff of(String specification) {
      *
      * @see Unwrappable
      */
+    @Nullable
     @Override
     default <T> T as(Class<T> type) {
         return Unwrappable.super.as(type);

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleWithContentBuilder.java
Patch:
@@ -89,6 +89,7 @@ RetryRuleWithContent<T> build(RetryDecision decision) {
             if (content == null) {
                 return NEXT_DECISION;
             }
+            assert responseFilter != null;
             return responseFilter.apply(ctx, content)
                                  .handle((matched, cause0) -> {
                                      if (cause0 != null) {

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java
Patch:
@@ -192,6 +192,7 @@ private void doExecute0(ClientRequestContext ctx, RpcRequest req,
                 retryConfig.retryRuleWithContent() : retryConfig.fromRetryRule();
         res.handle((unused1, cause) -> {
             try {
+                assert retryRule != null;
                 retryRule.shouldRetry(derivedCtx, res, cause).handle((decision, unused3) -> {
                     final Backoff backoff = decision != null ? decision.backoff() : null;
                     if (backoff != null) {

File: core/src/main/java/com/linecorp/armeria/common/ClientCacheControl.java
Patch:
@@ -254,6 +254,7 @@ public boolean equals(@Nullable Object o) {
             return false;
         }
 
+        assert o != null;
         final ClientCacheControl that = (ClientCacheControl) o;
         return onlyIfCached == that.onlyIfCached &&
                maxStaleSeconds == that.maxStaleSeconds &&

File: core/src/main/java/com/linecorp/armeria/common/DefaultAggregatedHttpRequest.java
Patch:
@@ -47,11 +47,13 @@ public String path() {
         return headers.path();
     }
 
+    @Nullable
     @Override
     public String scheme() {
         return headers.scheme();
     }
 
+    @Nullable
     @Override
     public String authority() {
         return headers.authority();

File: core/src/main/java/com/linecorp/armeria/common/DefaultAggregationOptions.java
Patch:
@@ -42,6 +42,7 @@ final class DefaultAggregationOptions implements AggregationOptions {
         this.cacheResult = cacheResult;
     }
 
+    @Nullable
     @Override
     public EventExecutor executor() {
         return executor;
@@ -57,6 +58,7 @@ public boolean preferCached() {
         return preferCached;
     }
 
+    @Nullable
     @Override
     public ByteBufAllocator alloc() {
         return alloc;

File: core/src/main/java/com/linecorp/armeria/common/DefaultCookie.java
Patch:
@@ -89,11 +89,13 @@ public boolean isValueQuoted() {
         return valueQuoted;
     }
 
+    @Nullable
     @Override
     public String domain() {
         return domain;
     }
 
+    @Nullable
     @Override
     public String path() {
         return path;
@@ -114,6 +116,7 @@ public boolean isHttpOnly() {
         return httpOnly;
     }
 
+    @Nullable
     @Override
     public String sameSite() {
         return sameSite;

File: core/src/main/java/com/linecorp/armeria/common/DefaultDependencyInjector.java
Patch:
@@ -26,6 +26,7 @@
 
 import com.google.common.base.MoreObjects;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.util.ReentrantShortLock;
 
 final class DefaultDependencyInjector implements DependencyInjector {
@@ -45,6 +46,7 @@ final class DefaultDependencyInjector implements DependencyInjector {
         }
     }
 
+    @Nullable
     @Override
     public <T> T getInstance(Class<T> type) {
         lock.lock();

File: core/src/main/java/com/linecorp/armeria/common/DefaultRequestHeaders.java
Patch:
@@ -52,6 +52,7 @@ public Locale selectLocale(Iterable<Locale> supportedLocales) {
         return super.selectLocale(supportedLocales);
     }
 
+    @Nullable
     @Override
     public List<LanguageRange> acceptLanguages() {
         return super.acceptLanguages();

File: core/src/main/java/com/linecorp/armeria/common/Flags.java
Patch:
@@ -588,6 +588,7 @@ public static TlsEngineType tlsEngineType() {
             return tlsEngineType;
         }
         detectTlsEngineAndDumpOpenSslInfo();
+        assert tlsEngineType != null;
         return tlsEngineType;
     }
 
@@ -661,6 +662,7 @@ public static boolean dumpOpenSslInfo() {
             return dumpOpenSslInfo;
         }
         detectTlsEngineAndDumpOpenSslInfo();
+        assert dumpOpenSslInfo != null;
         return dumpOpenSslInfo;
     }
 

File: core/src/main/java/com/linecorp/armeria/common/HttpHeaderNames.java
Patch:
@@ -958,13 +958,15 @@ public final class HttpHeaderNames {
             }
         }
         map = builder.build();
+        assert inverseMapBuilder != null;
         inverseMap = inverseMapBuilder.build();
         // inverseMapBuilder is used only when building inverseMap.
         inverseMapBuilder = null;
     }
 
     private static AsciiString create(String name) {
         final AsciiString cached = AsciiString.cached(Ascii.toLowerCase(name));
+        assert inverseMapBuilder != null;
         inverseMapBuilder.put(cached, name);
         return cached;
     }

File: core/src/main/java/com/linecorp/armeria/common/OrElseDependencyInjector.java
Patch:
@@ -18,6 +18,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 final class OrElseDependencyInjector implements DependencyInjector {
 
     private static final Logger logger = LoggerFactory.getLogger(OrElseDependencyInjector.class);
@@ -30,6 +32,7 @@ final class OrElseDependencyInjector implements DependencyInjector {
         this.second = second;
     }
 
+    @Nullable
     @Override
     public <T> T getInstance(Class<T> type) {
         final T instance = first.getInstance(type);

File: core/src/main/java/com/linecorp/armeria/common/PropagatingContextAwareBlockingTaskExecutor.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.google.common.base.MoreObjects;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.BlockingTaskExecutor;
 
 final class PropagatingContextAwareBlockingTaskExecutor
@@ -39,6 +40,7 @@ private PropagatingContextAwareBlockingTaskExecutor(BlockingTaskExecutor executo
         super(executor);
     }
 
+    @Nullable
     @Override
     RequestContext contextOrNull() {
         return RequestContext.mapCurrent(Function.identity(), LogRequestContextWarningOnce.INSTANCE);

File: core/src/main/java/com/linecorp/armeria/common/PropagatingContextAwareExecutor.java
Patch:
@@ -22,6 +22,8 @@
 
 import com.google.common.base.MoreObjects;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 final class PropagatingContextAwareExecutor extends AbstractContextAwareExecutor<Executor> {
 
     static PropagatingContextAwareExecutor of(Executor executor) {
@@ -37,6 +39,7 @@ private PropagatingContextAwareExecutor(Executor executor) {
         super(executor);
     }
 
+    @Nullable
     @Override
     RequestContext contextOrNull() {
         return RequestContext.mapCurrent(Function.identity(), LogRequestContextWarningOnce.INSTANCE);

File: core/src/main/java/com/linecorp/armeria/common/PropagatingContextAwareExecutorService.java
Patch:
@@ -22,6 +22,8 @@
 
 import com.google.common.base.MoreObjects;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 final class PropagatingContextAwareExecutorService
         extends AbstractContextAwareExecutorService<ExecutorService> {
 
@@ -38,6 +40,7 @@ private PropagatingContextAwareExecutorService(ExecutorService executor) {
         super(executor);
     }
 
+    @Nullable
     @Override
     RequestContext contextOrNull() {
         return RequestContext.mapCurrent(Function.identity(), LogRequestContextWarningOnce.INSTANCE);

File: core/src/main/java/com/linecorp/armeria/common/PropagatingContextAwareScheduledExecutorService.java
Patch:
@@ -22,6 +22,8 @@
 
 import com.google.common.base.MoreObjects;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 final class PropagatingContextAwareScheduledExecutorService
         extends AbstractContextAwareScheduledExecutorService<ScheduledExecutorService> {
 
@@ -38,6 +40,7 @@ private PropagatingContextAwareScheduledExecutorService(ScheduledExecutorService
         super(executor);
     }
 
+    @Nullable
     @Override
     RequestContext contextOrNull() {
         return RequestContext.mapCurrent(Function.identity(), LogRequestContextWarningOnce.INSTANCE);

File: core/src/main/java/com/linecorp/armeria/common/RequestContextWrapper.java
Patch:
@@ -98,11 +98,13 @@ public Iterator<Entry<AttributeKey<?>, Object>> ownAttrs() {
         return unwrap().ownAttrs();
     }
 
+    @Nullable
     @Override
     public <V> V setAttr(AttributeKey<V> key, @Nullable V value) {
         return unwrap().setAttr(key, value);
     }
 
+    @Nullable
     @Override
     public HttpRequest request() {
         return unwrap().request();
@@ -167,6 +169,7 @@ public String decodedPath() {
         return unwrap().decodedPath();
     }
 
+    @Nullable
     @Override
     public String query() {
         return unwrap().query();

File: core/src/main/java/com/linecorp/armeria/common/ServerCacheControl.java
Patch:
@@ -245,6 +245,7 @@ public boolean equals(@Nullable Object o) {
             return false;
         }
 
+        assert o != null;
         final ServerCacheControl that = (ServerCacheControl) o;
         return cachePublic == that.cachePublic &&
                cachePrivate == that.cachePrivate &&

File: core/src/main/java/com/linecorp/armeria/common/annotation/Nullable.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
-import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -32,7 +31,6 @@
  * @see NonNullByDefault
  */
 @Documented
-@Inherited
 @TypeQualifierNickname
 @Nonnull(when = When.MAYBE)
 @Retention(RetentionPolicy.RUNTIME)

File: core/src/main/java/com/linecorp/armeria/common/logging/RequestScopedMdc.java
Patch:
@@ -138,7 +138,7 @@ public final class RequestScopedMdc {
             try {
                 oldAdapterGetPropertyMap =
                         MethodHandles.publicLookup()
-                                     .findVirtual(oldAdapter.getClass(), "getPropertyMap",
+                                     .findVirtual(delegate.getClass(), "getPropertyMap",
                                                   MethodType.methodType(Map.class))
                                      .bindTo(delegate);
                 @SuppressWarnings("unchecked")

File: core/src/main/java/com/linecorp/armeria/common/multipart/MultipartDecoder.java
Patch:
@@ -144,6 +144,8 @@ public void subscribe(Subscriber<? super BodyPart> subscriber, EventExecutor exe
         if (!delegatedSubscriberUpdater.compareAndSet(this, null, multipartSubscriber)) {
             // Avoid calling method on late multipartSubscriber.
             // Because it's not static, so it will affect MultipartDecoder.
+            final MultipartSubscriber delegatedSubscriber = this.delegatedSubscriber;
+            assert delegatedSubscriber != null;
             SubscriberUtil.failLateSubscriber(executor, subscriber, delegatedSubscriber.subscriber);
             return;
         }
@@ -279,13 +281,13 @@ public void request(long n) {
             }
         }
 
-        @SuppressWarnings("UnstableApiUsage")
         private void request0(long n) {
             final long oldDemand = demandOfMultipart;
             demandOfMultipart = LongMath.saturatedAdd(oldDemand, n);
             if (oldDemand == 0) {
                 // We want first body publisher
                 if (currentExposedBodyPartPublisher == null) {
+                    assert subscription != null;
                     //This will trigger DecodedHttpStreamMessage's upstream.
                     subscription.request(1);
                 } else {

File: core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java
Patch:
@@ -365,6 +365,7 @@ private void notifySubscriber0() {
             return;
         }
 
+        assert subscription != null;
         for (;;) {
             if (state == State.CLEANUP) {
                 cleanupObjects(null);

File: core/src/main/java/com/linecorp/armeria/common/stream/StreamMessageCollector.java
Patch:
@@ -56,6 +56,7 @@ public void onSubscribe(Subscription s) {
     public void onNext(T o) {
         requireNonNull(o, "o");
 
+        assert elementsBuilder != null;
         elementsBuilder.add(touchOrCopyAndClose(o, withPooledObjects));
     }
 
@@ -64,6 +65,7 @@ public void onComplete() {
         if (future.isDone()) {
             return;
         }
+        assert elementsBuilder != null;
         future.complete(elementsBuilder.build());
         elementsBuilder = null;
     }
@@ -73,6 +75,7 @@ public void onError(Throwable t) {
         if (future.isDone()) {
             return;
         }
+        assert elementsBuilder != null;
         final ImmutableList<T> elements = elementsBuilder.build();
         for (T element : elements) {
             StreamMessageUtil.closeOrAbort(element, t);

File: core/src/main/java/com/linecorp/armeria/common/util/AbstractUnwrappable.java
Patch:
@@ -17,6 +17,8 @@
 
 import static java.util.Objects.requireNonNull;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * Skeletal {@link Unwrappable} implementation.
  *
@@ -33,6 +35,7 @@ protected AbstractUnwrappable(T delegate) {
         this.delegate = requireNonNull(delegate, "delegate");
     }
 
+    @Nullable
     @Override
     public final <U> U as(Class<U> type) {
         final U result = Unwrappable.super.as(type);

File: core/src/main/java/com/linecorp/armeria/common/util/AppRootFinder.java
Patch:
@@ -60,6 +60,7 @@ public static Path findCurrent(int callDepth) {
         // - This class
         // - The anonymous SecurityManager
         final Class<?>[] classes = classContextRef.get();
+        assert classes != null;
         final int toSkip = 2;
 
         if (callDepth < 0 || callDepth + toSkip >= classes.length) {

File: core/src/main/java/com/linecorp/armeria/common/util/Exceptions.java
Patch:
@@ -173,6 +173,7 @@ public static boolean isStreamCancelling(Throwable cause) {
         requireNonNull(cause, "cause");
         if (cause instanceof UnprocessedRequestException) {
             cause = cause.getCause();
+            assert cause != null;
         }
 
         for (ExceptionClassifier classifier : exceptionClassifiers) {
@@ -218,7 +219,7 @@ public static <T extends Throwable> T clearTrace(T exception) {
      *         e.g. {@code return Exceptions.throwUnsafely(...);} vs.
      *              {@code Exceptions.throwUnsafely(...); return null;}
      */
-    @SuppressWarnings("ReturnOfNull")
+    @SuppressWarnings({ "ReturnOfNull", "NullAway" })
     public static <T> T throwUnsafely(Throwable cause) {
         doThrowUnsafely(requireNonNull(cause, "cause"));
         return null; // Never reaches here.

File: core/src/main/java/com/linecorp/armeria/common/websocket/CloseByteBufWebSocketFrame.java
Patch:
@@ -86,6 +86,7 @@ private static int validateStatusCode(int statusCode) {
         }
     }
 
+    @Nullable
     @Override
     public String reasonPhrase() {
         return reasonPhrase;
@@ -135,7 +136,7 @@ public boolean equals(Object obj) {
 
         final CloseByteBufWebSocketFrame that = (CloseByteBufWebSocketFrame) obj;
         return status.equals(that.status()) &&
-               reasonPhrase.equals(that.reasonPhrase()) &&
+               Objects.equals(reasonPhrase, that.reasonPhrase()) &&
                super.equals(obj);
     }
 

File: core/src/main/java/com/linecorp/armeria/internal/client/endpoint/StaticEndpointGroup.java
Patch:
@@ -71,6 +71,7 @@ public EndpointSelectionStrategy selectionStrategy() {
         return selectionStrategy;
     }
 
+    @Nullable
     @Override
     public Endpoint selectNow(ClientRequestContext ctx) {
         return selector.selectNow(ctx);

File: core/src/main/java/com/linecorp/armeria/internal/common/BuiltInDependencyInjector.java
Patch:
@@ -24,6 +24,7 @@
 import com.google.common.collect.ImmutableSet;
 
 import com.linecorp.armeria.common.DependencyInjector;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.server.annotation.ServerSentEventResponseConverterFunction;
 import com.linecorp.armeria.server.annotation.decorator.LoggingDecoratorFactoryFunction;
 import com.linecorp.armeria.server.annotation.decorator.RateLimitingDecoratorFactoryFunction;
@@ -42,6 +43,7 @@ public enum BuiltInDependencyInjector implements DependencyInjector {
 
     private static final Map<Class<?>, Object> instances = new ConcurrentHashMap<>();
 
+    @Nullable
     @Override
     public <T> T getInstance(Class<T> type) {
         if (!builtInClasses.contains(type)) {

File: core/src/main/java/com/linecorp/armeria/internal/common/HttpObjectAggregator.java
Patch:
@@ -121,6 +121,7 @@ protected void onData(HttpData data) {
             if (dataLength > 0) {
                 final int allowedMaxDataLength = Integer.MAX_VALUE - contentLength;
                 if (dataLength > allowedMaxDataLength) {
+                    assert subscription != null;
                     subscription.cancel();
                     fail(new IllegalStateException("content length greater than Integer.MAX_VALUE"));
                     return;

File: core/src/main/java/com/linecorp/armeria/internal/common/ReflectiveDependencyInjector.java
Patch:
@@ -64,6 +64,7 @@ public static <T> T create(Class<? extends T> type, @Nullable Map<Class<?>, Obje
 
     private boolean isShutdown;
 
+    @Nullable
     @Override
     public <T> T getInstance(Class<T> type) {
         lock.lock();

File: core/src/main/java/com/linecorp/armeria/internal/common/encoding/DefaultHttpDecodedResponse.java
Patch:
@@ -115,6 +115,7 @@ protected HttpObject filter(HttpObject obj) {
         return decoder != null ? decoder.decode((HttpData) obj) : obj;
     }
 
+    @Nullable
     @Override
     StreamDecoder decoder() {
         return decoder;

File: core/src/main/java/com/linecorp/armeria/internal/common/stream/DecodedStreamMessage.java
Patch:
@@ -127,6 +127,7 @@ private void initialize() {
 
         initialized = true;
         if (cancelled) {
+            assert upstream != null;
             upstream.cancel();
             return;
         }

File: core/src/main/java/com/linecorp/armeria/internal/common/stream/FixedStreamMessage.java
Patch:
@@ -267,6 +267,7 @@ void onError(Throwable cause) {
 
     private void onError0(Throwable cause) {
         try {
+            assert subscriber != null;
             subscriber.onError(cause);
             if (!completionFuture.isDone()) {
                 completionFuture.completeExceptionally(cause);

File: core/src/main/java/com/linecorp/armeria/internal/common/stream/ThreeElementFixedStreamMessage.java
Patch:
@@ -76,6 +76,8 @@ final void cleanupObjects(@Nullable Throwable cause) {
     @Override
     final List<T> drainAll(boolean withPooledObjects) {
         assert obj1 != null;
+        assert obj2 != null;
+        assert obj3 != null;
         final List<T> objs = ImmutableList.of(touchOrCopyAndClose(obj1, withPooledObjects),
                                               touchOrCopyAndClose(obj2, withPooledObjects),
                                               touchOrCopyAndClose(obj3, withPooledObjects));

File: core/src/main/java/com/linecorp/armeria/internal/common/stream/TwoElementFixedStreamMessage.java
Patch:
@@ -72,6 +72,7 @@ final void cleanupObjects(@Nullable Throwable cause) {
     @Override
     final List<T> drainAll(boolean withPooledObjects) {
         assert obj1 != null;
+        assert obj2 != null;
         final List<T> objs = ImmutableList.of(touchOrCopyAndClose(obj1, withPooledObjects),
                                               touchOrCopyAndClose(obj2, withPooledObjects));
         obj1 = obj2 = null;

File: core/src/main/java/com/linecorp/armeria/internal/common/util/MinifiedBouncyCastleProvider.java
Patch:
@@ -41,6 +41,8 @@
 
 import com.google.common.annotations.VisibleForTesting;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * A downsized version of {@link BouncyCastleProvider} which provides only RSA/DSA/EC {@link KeyFactorySpi}s
  * and X.509 {@link CertificateFactorySpi}.
@@ -159,6 +161,7 @@ public void addKeyInfoConverter(ASN1ObjectIdentifier oid, AsymmetricKeyInfoConve
         keyInfoConverters.put(oid, keyInfoConverter);
     }
 
+    @Nullable
     @Override
     public AsymmetricKeyInfoConverter getKeyInfoConverter(ASN1ObjectIdentifier oid) {
         return keyInfoConverters.get(oid);

File: core/src/main/java/com/linecorp/armeria/internal/server/DefaultServiceRequestContext.java
Patch:
@@ -210,6 +210,7 @@ public DefaultServiceRequestContext(
         this.additionalResponseTrailers = additionalResponseTrailers;
     }
 
+    @Nullable
     @Override
     protected RequestTarget validateHeaders(RequestHeaders headers) {
         checkArgument(headers.scheme() != null && headers.authority() != null,

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AggregatedResponseConverterFunction.java
Patch:
@@ -47,6 +47,7 @@ final class AggregatedResponseConverterFunction implements ResponseConverterFunc
         this.responseConverter = responseConverter;
     }
 
+    @Nullable
     @Override
     public Boolean isResponseStreaming(Type returnType, @Nullable MediaType contentType) {
         final Class<?> clazz = typeToClass(unwrapUnaryAsyncType(returnType));

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedDocServicePlugin.java
Patch:
@@ -270,6 +270,7 @@ private static FieldInfo fieldInfo(AnnotatedValueResolver resolver) {
                     return null;
                 }
 
+                assert beanFactoryId != null;
                 final Class<?> type = beanFactoryId.type();
                 typeSignature = new RequestObjectTypeSignature(TypeSignatureType.STRUCT, type.getName(), type,
                                                                new AnnotatedValueResolversWrapper(resolvers));

File: core/src/main/java/com/linecorp/armeria/server/AbstractHttpResponseSubscriber.java
Patch:
@@ -216,6 +216,7 @@ public void onNext(HttpObject o) {
                 break;
             }
             case DONE:
+                assert subscription != null;
                 isSubscriptionCompleted = true;
                 subscription.cancel();
                 PooledObjects.close(o);

File: core/src/main/java/com/linecorp/armeria/server/DefaultRoutingContext.java
Patch:
@@ -165,6 +165,7 @@ public void deferStatusException(HttpStatusException deferredCause) {
         this.deferredCause = requireNonNull(deferredCause, "deferredCause");
     }
 
+    @Nullable
     @Override
     public HttpStatusException deferredStatusException() {
         return deferredCause;

File: core/src/main/java/com/linecorp/armeria/server/EmptyContentDecodedHttpRequest.java
Patch:
@@ -89,6 +89,7 @@ public RoutingContext routingContext() {
         return routingContext;
     }
 
+    @Nullable
     @Override
     public Routed<ServiceConfig> route() {
         if (routingContext.hasResult()) {

File: core/src/main/java/com/linecorp/armeria/server/LengthBasedServiceNaming.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.util.TargetLengthBasedClassNameAbbreviator;
 
 final class LengthBasedServiceNaming implements ServiceNaming {
@@ -36,10 +37,11 @@ private LengthBasedServiceNaming(int shortenedServiceNameLength) {
         abbreviator = new TargetLengthBasedClassNameAbbreviator(shortenedServiceNameLength);
     }
 
+    @Nullable
     @Override
     public String serviceName(ServiceRequestContext ctx) {
         final String fullTypeName = ServiceNaming.fullTypeName().serviceName(ctx);
-        return abbreviate(fullTypeName);
+        return fullTypeName != null ? abbreviate(fullTypeName) : null;
     }
 
     private String abbreviate(String serviceName) {

File: core/src/main/java/com/linecorp/armeria/server/Routed.java
Patch:
@@ -83,6 +83,7 @@ public boolean isPresent() {
      */
     public Route route() {
         ensurePresence();
+        assert route != null;
         return route;
     }
 
@@ -110,6 +111,7 @@ public RoutingResultType routingResultType() {
      */
     public T value() {
         ensurePresence();
+        assert value != null;
         return value;
     }
 

File: core/src/main/java/com/linecorp/armeria/server/RoutingContextWrapper.java
Patch:
@@ -104,6 +104,7 @@ public void deferStatusException(HttpStatusException cause) {
         delegate.deferStatusException(cause);
     }
 
+    @Nullable
     @Override
     public HttpStatusException deferredStatusException() {
         return delegate.deferredStatusException();

File: core/src/main/java/com/linecorp/armeria/server/RoutingResult.java
Patch:
@@ -121,6 +121,7 @@ public boolean isPresent() {
      */
     public String path() {
         ensurePresence();
+        assert path != null;
         return path;
     }
 
@@ -142,6 +143,7 @@ public String decodedPath() {
             return decodedPath;
         }
 
+        assert path != null;
         return this.decodedPath = ArmeriaHttpUtil.decodePath(path);
     }
 

File: core/src/main/java/com/linecorp/armeria/server/Server.java
Patch:
@@ -550,6 +550,9 @@ private ChannelFuture doStart(ServerPort port) {
                 return thread;
             });
 
+            final GracefulShutdownSupport gracefulShutdownSupport = this.gracefulShutdownSupport;
+            assert gracefulShutdownSupport != null;
+
             b.group(bossGroup, config.workerGroup());
             b.handler(connectionLimitingHandler);
             b.childHandler(new HttpServerPipelineConfigurator(config, port, gracefulShutdownSupport,

File: core/src/main/java/com/linecorp/armeria/server/Service.java
Patch:
@@ -69,6 +69,7 @@ default void serviceAdded(ServiceConfig cfg) throws Exception {}
      *
      * @see Unwrappable
      */
+    @Nullable
     @Override
     default <T> T as(Class<T> type) {
         requireNonNull(type, "type");

File: core/src/main/java/com/linecorp/armeria/server/ServiceConfig.java
Patch:
@@ -93,8 +93,8 @@ public final class ServiceConfig {
     /**
      * Creates a new instance.
      */
-    ServiceConfig(Route route, Route mappedRoute, HttpService service, @Nullable String defaultLogName,
-                  @Nullable String defaultServiceName, ServiceNaming defaultServiceNaming,
+    ServiceConfig(Route route, Route mappedRoute, HttpService service, @Nullable String defaultServiceName,
+                  ServiceNaming defaultServiceNaming, @Nullable String defaultLogName,
                   long requestTimeoutMillis, long maxRequestLength,
                   boolean verboseResponses, AccessLogWriter accessLogWriter,
                   BlockingTaskExecutor blockingTaskExecutor,

File: core/src/main/java/com/linecorp/armeria/server/VirtualHost.java
Patch:
@@ -92,6 +92,7 @@ public final class VirtualHost {
     private final Logger accessLogger;
 
     private final ServiceNaming defaultServiceNaming;
+    @Nullable
     private final String defaultLogName;
     private final long requestTimeoutMillis;
     private final long maxRequestLength;
@@ -114,7 +115,7 @@ public final class VirtualHost {
                 RejectedRouteHandler rejectionHandler,
                 Function<? super VirtualHost, ? extends Logger> accessLoggerMapper,
                 ServiceNaming defaultServiceNaming,
-                String defaultLogName,
+                @Nullable String defaultLogName,
                 long requestTimeoutMillis,
                 long maxRequestLength, boolean verboseResponses,
                 AccessLogWriter accessLogWriter,
@@ -362,6 +363,7 @@ public ServiceNaming defaultServiceNaming() {
      * Returns the default value of the {@link RequestLog#name()} property which is used when no name was set
      * via {@link RequestLogBuilder#name(String, String)}.
      */
+    @Nullable
     public String defaultLogName() {
         return defaultLogName;
     }

File: core/src/main/java/com/linecorp/armeria/server/annotation/ByteArrayResponseConverterFunction.java
Patch:
@@ -45,6 +45,7 @@
  */
 public final class ByteArrayResponseConverterFunction implements ResponseConverterFunction {
 
+    @Nullable
     @Override
     public Boolean isResponseStreaming(Type returnType, @Nullable MediaType produceType) {
         final Class<?> clazz = typeToClass(unwrapUnaryAsyncType(returnType));

File: core/src/main/java/com/linecorp/armeria/server/annotation/DefaultHttpResult.java
Patch:
@@ -49,6 +49,7 @@ public HttpHeaders headers() {
         return headers;
     }
 
+    @Nullable
     @Override
     public T content() {
         return content;

File: core/src/main/java/com/linecorp/armeria/server/annotation/HttpFileResponseConverterFunction.java
Patch:
@@ -39,6 +39,7 @@
  */
 public final class HttpFileResponseConverterFunction implements ResponseConverterFunction {
 
+    @Nullable
     @Override
     public Boolean isResponseStreaming(Type returnType, @Nullable MediaType produceType) {
         final Class<?> clazz = typeToClass(unwrapUnaryAsyncType(returnType));

File: core/src/main/java/com/linecorp/armeria/server/annotation/JacksonResponseConverterFunction.java
Patch:
@@ -71,6 +71,7 @@ public JacksonResponseConverterFunction(ObjectMapper mapper) {
         this.mapper = requireNonNull(mapper, "mapper");
     }
 
+    @Nullable
     @Override
     public Boolean isResponseStreaming(Type returnType, @Nullable MediaType produceType) {
         final Class<?> clazz = typeToClass(unwrapUnaryAsyncType(returnType));

File: core/src/main/java/com/linecorp/armeria/server/annotation/NullToNoContentResponseConverterFunction.java
Patch:
@@ -31,6 +31,7 @@
  */
 public final class NullToNoContentResponseConverterFunction implements ResponseConverterFunction {
 
+    @Nullable
     @Override
     public Boolean isResponseStreaming(Type returnType, @Nullable MediaType contentType) {
         return null;

File: core/src/main/java/com/linecorp/armeria/server/annotation/ServerSentEventResponseConverterFunction.java
Patch:
@@ -42,6 +42,7 @@
  */
 public final class ServerSentEventResponseConverterFunction implements ResponseConverterFunction {
 
+    @Nullable
     @Override
     public Boolean isResponseStreaming(Type returnType, @Nullable MediaType contentType) {
         final Class<?> clazz = typeToClass(unwrapUnaryAsyncType(returnType));

File: core/src/main/java/com/linecorp/armeria/server/annotation/StringResponseConverterFunction.java
Patch:
@@ -45,6 +45,7 @@
  */
 public final class StringResponseConverterFunction implements ResponseConverterFunction {
 
+    @Nullable
     @Override
     public Boolean isResponseStreaming(Type resultType, @Nullable MediaType contentType) {
         if (contentType != null && contentType.is(MediaType.ANY_TEXT_TYPE)) {

File: core/src/main/java/com/linecorp/armeria/server/docs/MethodInfo.java
Patch:
@@ -159,7 +159,9 @@ public MethodInfo(String serviceName, String name,
         for (String query : exampleQueries) {
             final RequestTarget reqTarget = RequestTarget.forServer("/?" + query);
             checkArgument(reqTarget != null, "exampleQueries contains an invalid query string: %s", query);
-            exampleQueriesBuilder.add(reqTarget.query());
+            final String safeQuery = reqTarget.query();
+            assert safeQuery != null;
+            exampleQueriesBuilder.add(safeQuery);
         }
         this.exampleQueries = exampleQueriesBuilder.build();
 

File: core/src/main/java/com/linecorp/armeria/server/file/AbstractHttpFile.java
Patch:
@@ -209,6 +209,7 @@ private HttpResponse read(Executor fileReadExecutor, ByteBufAllocator alloc,
             return null;
         }
 
+        assert attrs != null;
         final long length = attrs.length();
         if (length == 0) {
             // No need to stream an empty file.

File: core/src/main/java/com/linecorp/armeria/server/file/FileService.java
Patch:
@@ -445,7 +445,9 @@ private HttpFile cache(ServiceRequestContext ctx, PathAndEncoding pathAndEncodin
             if (decompress && encoding != null) {
                 assert aggregated instanceof HttpDataFile;
                 aggregated = decompress((HttpDataFile) aggregated, encoding, alloc);
-                if (aggregated.attributes().length() > config.maxCacheEntrySizeBytes()) {
+                final HttpFileAttributes attrs = aggregated.attributes();
+                assert attrs != null;
+                if (attrs.length() > config.maxCacheEntrySizeBytes()) {
                     // Invalidate the cache just in case the file was small previously.
                     cache.invalidate(pathAndEncoding);
                     return aggregated.toHttpFile();

File: core/src/main/java/com/linecorp/armeria/server/file/FileSystemHttpFile.java
Patch:
@@ -82,6 +82,7 @@ public CompletableFuture<HttpFileAttributes> readAttributes(Executor fileReadExe
         }, fileReadExecutor);
     }
 
+    @Nullable
     @Override
     protected ByteChannel newStream() throws IOException {
         try {

File: core/src/main/java/com/linecorp/armeria/server/file/HttpDataFile.java
Patch:
@@ -90,7 +90,9 @@ public CompletableFuture<HttpFileAttributes> readAttributes(Executor fileReadExe
     @Nonnull
     @Override
     public ResponseHeaders headers() {
-        return readHeaders(attrs);
+        final ResponseHeaders headers = readHeaders(attrs);
+        assert headers != null;
+        return headers;
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/server/file/StreamingHttpFile.java
Patch:
@@ -79,6 +79,7 @@ protected StreamingHttpFile(@Nullable MediaType contentType,
         super(contentType, clock, dateEnabled, lastModifiedEnabled, entityTagFunction, headers);
     }
 
+    @Nullable
     @Override
     protected final HttpResponse doRead(ResponseHeaders headers, long length,
                                         Executor fileReadExecutor, ByteBufAllocator alloc) throws IOException {

File: core/src/main/java/com/linecorp/armeria/server/logging/AccessLogComponent.java
Patch:
@@ -376,6 +376,7 @@ AsciiString headerName() {
             return headerName;
         }
 
+        @Nullable
         @Override
         public Object getMessage0(RequestLog log) {
             return httpHeaders.apply(log).get(headerName);

File: core/src/main/java/com/linecorp/armeria/server/logging/AccessLogFormats.java
Patch:
@@ -133,6 +133,7 @@ static List<AccessLogComponent> parseCustom(String formatStr) {
                         textBuilder.append(ch);
                     } else {
                         if (textBuilder.length() > 0) {
+                            assert condBuilder != null;
                             condBuilder.addHttpStatus(newStringAndReset(textBuilder));
                         }
                         // Loop again.

File: core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedBeanFactoryRegistryTest.java
Patch:
@@ -39,8 +39,9 @@
 public class AnnotatedBeanFactoryRegistryTest {
 
     public static final DependencyInjector noopDependencyInjector = new DependencyInjector() {
+        @Nullable
         @Override
-        public <T> @Nullable T getInstance(Class<T> type) {
+        public <T> T getInstance(Class<T> type) {
             return null;
         }
 

File: core/src/test/java/com/linecorp/armeria/server/ServiceNamingTest.java
Patch:
@@ -186,7 +186,7 @@ void shorten_trimTrailingDollarSignOnly() {
 
     private static ServiceConfig newServiceConfig(HttpService httpService, ServiceNaming serviceNaming) {
         return new ServiceConfig(Route.ofCatchAll(), Route.ofCatchAll(), httpService,
-                                 null, null, serviceNaming, 0, 0, false,
+                                 null, serviceNaming, null, 0, 0, false,
                                  AccessLogWriter.common(), CommonPools.blockingTaskExecutor(),
                                  SuccessFunction.always(),
                                  0, Files.newTemporaryFolder().toPath(),

File: core/src/test/java/com/linecorp/armeria/server/ServiceTest.java
Patch:
@@ -60,8 +60,9 @@ private static void assertDecoration(FooService inner, HttpService outer) throws
         // Test if FooService.serviceAdded() is invoked.
         final ServiceConfig cfg =
                 new ServiceConfig(Route.ofCatchAll(), Route.ofCatchAll(),
-                                  outer, /* defaultLogName */ null, /* defaultServiceName */ null,
-                                  ServiceNaming.of("FooService"), 1, 1, true,
+                                  outer, /* defaultServiceName */ null,
+                                  ServiceNaming.of("FooService"), /* defaultLogName */ null,
+                                  1, 1, true,
                                   AccessLogWriter.disabled(),
                                   CommonPools.blockingTaskExecutor(),
                                   SuccessFunction.always(),

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaChannel.java
Patch:
@@ -221,6 +221,7 @@ public ClientOptions options() {
         return params.options();
     }
 
+    @Nullable
     @Override
     public <T> T as(Class<T> type) {
         final T unwrapped = Unwrappable.super.as(type);

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcClientFactory.java
Patch:
@@ -50,6 +50,7 @@
 import com.linecorp.armeria.common.Scheme;
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.grpc.GrpcJsonMarshaller;
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
 import com.linecorp.armeria.common.util.Unwrappable;
@@ -225,6 +226,7 @@ private static ClientBuilderParams addTrailersExtractor(
                 params.clientType(), optionsBuilder.build());
     }
 
+    @Nullable
     @Override
     public <T> T unwrap(Object client, Class<T> type) {
         final T unwrapped = super.unwrap(client, type);

File: protobuf/src/main/java/com/linecorp/armeria/server/protobuf/ProtobufResponseConverterFunction.java
Patch:
@@ -145,6 +145,7 @@ public ProtobufResponseConverterFunction(Printer jsonPrinter) {
         this.jsonPrinter = requireNonNull(jsonPrinter, "jsonPrinter");
     }
 
+    @Nullable
     @Override
     public Boolean isResponseStreaming(Type returnType, @Nullable MediaType produceType) {
         final Class<?> clazz = typeToClass(unwrapUnaryAsyncType(returnType));

File: resilience4j2/src/main/java/com/linecorp/armeria/resilience4j/circuitbreaker/client/Resilience4JCircuitBreakerClientHandler.java
Patch:
@@ -27,6 +27,7 @@
 import com.linecorp.armeria.client.circuitbreaker.CircuitBreakerMapping;
 import com.linecorp.armeria.client.circuitbreaker.ClientCircuitBreakerGenerator;
 import com.linecorp.armeria.common.Request;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.circuitbreaker.CircuitBreakerCallback;
 
@@ -102,6 +103,7 @@ public static CircuitBreakerClientHandler of(
         this.mapping = mapping;
     }
 
+    @Nullable
     @Override
     public CircuitBreakerCallback tryRequest(ClientRequestContext ctx, Request req) {
         final CircuitBreaker circuitBreaker;

File: rxjava2/src/main/java/com/linecorp/armeria/server/rxjava2/ObservableResponseConverterFunction.java
Patch:
@@ -79,6 +79,7 @@ public ObservableResponseConverterFunction(ResponseConverterFunction responseCon
         exceptionHandler = null;
     }
 
+    @Nullable
     @Override
     public Boolean isResponseStreaming(Type returnType, @Nullable MediaType produceType) {
         final Class<?> clazz = typeToClass(unwrapUnaryAsyncType(returnType));

File: rxjava3/src/main/java/com/linecorp/armeria/server/rxjava3/ObservableResponseConverterFunction.java
Patch:
@@ -79,6 +79,7 @@ public ObservableResponseConverterFunction(ResponseConverterFunction responseCon
         exceptionHandler = null;
     }
 
+    @Nullable
     @Override
     public Boolean isResponseStreaming(Type returnType, @Nullable MediaType produceType) {
         final Class<?> clazz = typeToClass(unwrapUnaryAsyncType(returnType));

File: xds/src/main/java/com/linecorp/armeria/xds/client/endpoint/XdsEndpointGroup.java
Patch:
@@ -34,6 +34,7 @@
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.client.endpoint.EndpointSelectionStrategy;
 import com.linecorp.armeria.common.Flags;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.util.AbstractListenable;
 import com.linecorp.armeria.internal.common.util.ReentrantShortLock;
@@ -138,6 +139,7 @@ private void maybeCompleteInitialEndpointsFuture(List<Endpoint> endpoints) {
         }
     }
 
+    @Nullable
     @Override
     protected List<Endpoint> latestValue() {
         final List<Endpoint> endpoints = state.endpoints();
@@ -158,6 +160,7 @@ public EndpointSelectionStrategy selectionStrategy() {
         return selectionStrategy;
     }
 
+    @Nullable
     @Override
     public Endpoint selectNow(ClientRequestContext ctx) {
         return selector.selectNow(ctx);

File: graphql/src/main/java/com/linecorp/armeria/server/graphql/GraphqlErrorHandler.java
Patch:
@@ -46,7 +46,8 @@ static GraphqlErrorHandler of() {
      */
     @Nullable
     HttpResponse handle(
-            ServiceRequestContext ctx, ExecutionInput input, ExecutionResult result, @Nullable Throwable cause);
+            ServiceRequestContext ctx, ExecutionInput input, @Nullable ExecutionResult result,
+            @Nullable Throwable cause);
 
     /**
      * Returns a composed {@link GraphqlErrorHandler} that applies this first and the specified

File: core/src/test/java/com/linecorp/armeria/server/ServerMetricsTest.java
Patch:
@@ -206,7 +206,7 @@ void checkWhenOk(SessionProtocol sessionProtocol, long expectedPendingHttp1Reque
 
             assertThat(result.status()).isSameAs(HttpStatus.OK);
             assertThat(serverMetrics.pendingRequests()).isZero();
-            assertThat(serverMetrics.activeRequests()).isZero();
+            await().untilAsserted(() -> assertThat(serverMetrics.activeRequests()).isZero());
             await().until(() -> serverMetrics.activeConnections() == 0);
         }
     }
@@ -273,7 +273,7 @@ void checkWhenRequestTimeout(SessionProtocol sessionProtocol, long expectedPendi
 
             assertThat(result.status()).isSameAs(HttpStatus.SERVICE_UNAVAILABLE);
             assertThat(serverMetrics.pendingRequests()).isZero();
-            assertThat(serverMetrics.activeRequests()).isZero();
+            await().untilAsserted(() -> assertThat(serverMetrics.activeRequests()).isZero());
             await().until(() -> serverMetrics.activeConnections() == 0);
         }
     }

File: examples/tutorials/grpc/src/main/java/example/armeria/server/blog/grpc/GrpcExceptionHandler.java
Patch:
@@ -11,7 +11,7 @@ class GrpcExceptionHandler implements GrpcExceptionHandlerFunction {
 
     @Nullable
     @Override
-    public Status apply(RequestContext ctx, @Nullable Status status, Throwable cause, Metadata metadata) {
+    public Status apply(RequestContext ctx, Status status, Throwable cause, Metadata metadata) {
         if (cause instanceof IllegalArgumentException) {
             return Status.INVALID_ARGUMENT.withCause(cause);
         }

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcClientBuilder.java
Patch:
@@ -75,7 +75,6 @@
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageFramer;
-import com.linecorp.armeria.internal.common.grpc.UnwrappingGrpcExceptionHandleFunction;
 import com.linecorp.armeria.unsafe.grpc.GrpcUnsafeBufferUtil;
 
 import io.grpc.CallCredentials;
@@ -419,8 +418,7 @@ public <T> T build(Class<T> clientType) {
             option(INTERCEPTORS.newValue(clientInterceptors));
         }
         if (exceptionHandler != null) {
-            option(EXCEPTION_HANDLER.newValue(new UnwrappingGrpcExceptionHandleFunction(exceptionHandler.orElse(
-                    GrpcExceptionHandlerFunction.of()))));
+            option(EXCEPTION_HANDLER.newValue(exceptionHandler.orElse(GrpcExceptionHandlerFunction.of())));
         }
 
         final Object client;

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcClientOptions.java
Patch:
@@ -37,7 +37,6 @@
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageFramer;
 import com.linecorp.armeria.internal.client.grpc.NullCallCredentials;
 import com.linecorp.armeria.internal.client.grpc.NullGrpcClientStubFactory;
-import com.linecorp.armeria.internal.common.grpc.UnwrappingGrpcExceptionHandleFunction;
 import com.linecorp.armeria.unsafe.grpc.GrpcUnsafeBufferUtil;
 
 import io.grpc.CallCredentials;
@@ -174,8 +173,7 @@ public final class GrpcClientOptions {
      * to a gRPC {@link Status}.
      */
     public static final ClientOption<GrpcExceptionHandlerFunction> EXCEPTION_HANDLER =
-            ClientOption.define("EXCEPTION_HANDLER", new UnwrappingGrpcExceptionHandleFunction(
-                    GrpcExceptionHandlerFunction.of()));
+            ClientOption.define("EXCEPTION_HANDLER", GrpcExceptionHandlerFunction.of());
 
     /**
      * Sets whether to respect the marshaller specified in gRPC {@link MethodDescriptor}.

File: grpc/src/main/java/com/linecorp/armeria/common/grpc/DefaultGrpcExceptionHandlerFunction.java
Patch:
@@ -27,7 +27,6 @@
 import com.linecorp.armeria.common.ContentTooLargeException;
 import com.linecorp.armeria.common.RequestContext;
 import com.linecorp.armeria.common.TimeoutException;
-import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.stream.ClosedStreamException;
 import com.linecorp.armeria.server.RequestTimeoutException;
 import com.linecorp.armeria.server.ServiceRequestContext;
@@ -46,8 +45,8 @@ enum DefaultGrpcExceptionHandlerFunction implements GrpcExceptionHandlerFunction
      * well and the protocol package.
      */
     @Override
-    public Status apply(RequestContext ctx, @Nullable Status status, Throwable cause, Metadata metadata) {
-        if (status != null && status.getCode() != Code.UNKNOWN) {
+    public Status apply(RequestContext ctx, Status status, Throwable cause, Metadata metadata) {
+        if (status.getCode() != Code.UNKNOWN) {
             return status;
         }
         final Status s = Status.fromThrowable(cause);

File: grpc/src/main/java/com/linecorp/armeria/common/grpc/GoogleGrpcExceptionHandlerFunction.java
Patch:
@@ -40,7 +40,7 @@ public interface GoogleGrpcExceptionHandlerFunction extends GrpcExceptionHandler
 
     @Nullable
     @Override
-    default Status apply(RequestContext ctx, @Nullable Status status, Throwable throwable, Metadata metadata) {
+    default Status apply(RequestContext ctx, Status status, Throwable throwable, Metadata metadata) {
         return handleException(ctx, throwable, metadata, this::applyStatusProto);
     }
 

File: grpc/src/main/java/com/linecorp/armeria/internal/server/grpc/ServerStatusAndMetadata.java
Patch:
@@ -30,12 +30,12 @@ public final class ServerStatusAndMetadata extends StatusAndMetadata {
     // Set true if response content log should be written
     private boolean setResponseContent;
 
-    public ServerStatusAndMetadata(Status status, @Nullable Metadata metadata,  boolean setResponseContent) {
+    public ServerStatusAndMetadata(Status status, @Nullable Metadata metadata, boolean setResponseContent) {
         super(status, metadata);
         this.setResponseContent = setResponseContent;
     }
 
-    public ServerStatusAndMetadata(Status status, @Nullable Metadata metadata,  boolean setResponseContent,
+    public ServerStatusAndMetadata(Status status, @Nullable Metadata metadata, boolean setResponseContent,
                                    boolean shouldCancel) {
         super(status, metadata);
         this.setResponseContent = setResponseContent;

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.java
Patch:
@@ -51,7 +51,6 @@
 import com.linecorp.armeria.common.grpc.GrpcStatusFunction;
 import com.linecorp.armeria.common.grpc.protocol.AbstractMessageDeframer;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageFramer;
-import com.linecorp.armeria.internal.common.grpc.UnwrappingGrpcExceptionHandleFunction;
 import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.HttpServiceWithRoutes;
 import com.linecorp.armeria.server.Server;
@@ -1000,15 +999,14 @@ public GrpcService build() {
             registryBuilder.addService(grpcHealthCheckService.bindService(), null, ImmutableList.of());
         }
 
-        GrpcExceptionHandlerFunction grpcExceptionHandler;
+        final GrpcExceptionHandlerFunction grpcExceptionHandler;
         if (exceptionMappingsBuilder != null) {
             grpcExceptionHandler = exceptionMappingsBuilder.build().orElse(GrpcExceptionHandlerFunction.of());
         } else if (exceptionHandler != null) {
             grpcExceptionHandler = exceptionHandler.orElse(GrpcExceptionHandlerFunction.of());
         } else {
             grpcExceptionHandler = GrpcExceptionHandlerFunction.of();
         }
-        grpcExceptionHandler = new UnwrappingGrpcExceptionHandleFunction(grpcExceptionHandler);
         registryBuilder.setDefaultExceptionHandler(grpcExceptionHandler);
 
         if (interceptors != null) {

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/HandlerRegistry.java
Patch:
@@ -71,7 +71,6 @@
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.grpc.GrpcExceptionHandlerFunction;
 import com.linecorp.armeria.internal.common.ReflectiveDependencyInjector;
-import com.linecorp.armeria.internal.common.grpc.UnwrappingGrpcExceptionHandleFunction;
 import com.linecorp.armeria.internal.server.annotation.AnnotationUtil;
 import com.linecorp.armeria.internal.server.annotation.DecoratorAnnotationUtil;
 import com.linecorp.armeria.internal.server.annotation.DecoratorAnnotationUtil.DecoratorAndOrder;
@@ -282,8 +281,7 @@ private static void putGrpcExceptionHandlerIfPresent(
             grpcExceptionHandler.ifPresent(exceptionHandler -> {
                 GrpcExceptionHandlerFunction grpcExceptionHandler0 = exceptionHandler;
                 if (defaultExceptionHandler != null) {
-                    grpcExceptionHandler0 = new UnwrappingGrpcExceptionHandleFunction(
-                            exceptionHandler.orElse(defaultExceptionHandler));
+                    grpcExceptionHandler0 = exceptionHandler.orElse(defaultExceptionHandler);
                 }
                 grpcExceptionHandlersBuilder.put(methodDefinition, grpcExceptionHandler0);
             });

File: grpc/src/test/java/com/linecorp/armeria/common/grpc/DefaultGrpcExceptionHandlerFunctionTest.java
Patch:
@@ -33,15 +33,16 @@ class DefaultGrpcExceptionHandlerFunctionTest {
     void failFastExceptionToUnavailableCode() {
         assertThat(GrpcExceptionHandlerFunction
                            .of()
-                           .apply(null, null, new FailFastException(CircuitBreaker.ofDefaultName()), null)
+                           .apply(null, Status.UNKNOWN, new FailFastException(CircuitBreaker.ofDefaultName()),
+                                  null)
                            .getCode()).isEqualTo(Status.Code.UNAVAILABLE);
     }
 
     @Test
     void invalidProtocolBufferExceptionToInvalidArgumentCode() {
         assertThat(GrpcExceptionHandlerFunction
                            .of()
-                           .apply(null, null,
+                           .apply(null, Status.UNKNOWN,
                                   new InvalidProtocolBufferException("Failed to parse message"), null)
                            .getCode()).isEqualTo(Status.Code.INVALID_ARGUMENT);
     }

File: grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/HttpStreamDeframerTest.java
Patch:
@@ -58,8 +58,7 @@ void setUp() {
         final ServiceRequestContext ctx = ServiceRequestContext.of(HttpRequest.of(HttpMethod.GET, "/"));
         final TransportStatusListener statusListener = (status, metadata) -> statusRef.set(status);
         deframer = new HttpStreamDeframer(DecompressorRegistry.getDefaultInstance(), ctx, statusListener,
-                                          new UnwrappingGrpcExceptionHandleFunction(
-                                                  GrpcExceptionHandlerFunction.of()), Integer.MAX_VALUE,
+                                          GrpcExceptionHandlerFunction.of(), Integer.MAX_VALUE,
                                           false, true);
     }
 

File: grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/TestServiceImpl.java
Patch:
@@ -367,7 +367,8 @@ private synchronized void dispatchChunk() {
             } catch (Throwable e) {
                 failure = e;
                 if (GrpcExceptionHandlerFunction.of()
-                                                .apply(ServiceRequestContext.current(), null, e, new Metadata())
+                                                .apply(ServiceRequestContext.current(), Status.UNKNOWN,
+                                                       e, new Metadata())
                                                 .getCode() == Status.CANCELLED.getCode()) {
                     // Stream was cancelled by client, responseStream.onError() might be called already or
                     // will be called soon by inbounding StreamObserver.

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcExceptionHandlerAnnotationOnlyTest.java
Patch:
@@ -134,7 +134,7 @@ private static class FirstGrpcExceptionHandler implements GrpcExceptionHandlerFu
 
         @Nullable
         @Override
-        public Status apply(RequestContext ctx, @Nullable Status status, Throwable cause, Metadata metadata) {
+        public Status apply(RequestContext ctx, Status status, Throwable cause, Metadata metadata) {
             exceptionHandler.add("first");
             if (Objects.equals(cause.getMessage(), "first")) {
                 return Status.UNAUTHENTICATED;
@@ -147,7 +147,7 @@ private static class SecondGrpcExceptionHandler  implements GrpcExceptionHandler
 
         @Nullable
         @Override
-        public Status apply(RequestContext ctx, @Nullable Status status, Throwable cause, Metadata metadata) {
+        public Status apply(RequestContext ctx, Status status, Throwable cause, Metadata metadata) {
             exceptionHandler.add("second");
             if (Objects.equals(cause.getMessage(), "second")) {
                 return Status.INVALID_ARGUMENT;

File: core/src/main/java/com/linecorp/armeria/server/AbstractContextPathAnnotatedServiceConfigSetters.java
Patch:
@@ -23,8 +23,7 @@
 abstract class AbstractContextPathAnnotatedServiceConfigSetters
         <SELF extends AbstractContextPathAnnotatedServiceConfigSetters<SELF, T>,
                 T extends AbstractContextPathServicesBuilder<?, ?>>
-        extends AbstractAnnotatedServiceConfigSetters<
-        AbstractContextPathAnnotatedServiceConfigSetters<SELF, T>> {
+        extends AbstractAnnotatedServiceConfigSetters<SELF> {
 
     private final T builder;
     private final Set<String> contextPaths;
@@ -42,7 +41,7 @@ abstract class AbstractContextPathAnnotatedServiceConfigSetters
      *                If path prefix is not set then this service is registered to handle requests matching
      *                {@code /}
      */
-    T build(Object service) {
+    public T build(Object service) {
         requireNonNull(service, "service");
         service(service);
         contextPaths(contextPaths);

File: core/src/main/java/com/linecorp/armeria/server/AbstractContextPathServiceBindingBuilder.java
Patch:
@@ -21,7 +21,7 @@
 abstract class AbstractContextPathServiceBindingBuilder
         <SELF extends AbstractContextPathServiceBindingBuilder<SELF, T>,
                 T extends AbstractContextPathServicesBuilder<?, ?>>
-        extends AbstractServiceBindingBuilder<AbstractContextPathServiceBindingBuilder<SELF, T>> {
+        extends AbstractServiceBindingBuilder<SELF> {
 
     private final T contextPathServicesBuilder;
 

File: core/src/main/java/com/linecorp/armeria/server/docs/JsonSchemaGenerator.java
Patch:
@@ -77,7 +77,7 @@ private JsonSchemaGenerator(ServiceSpecification serviceSpecification) {
                 ImmutableMap.builderWithExpectedSize(serviceSpecification.structs().size());
         for (StructInfo struct : serviceSpecification.structs()) {
             typeSignatureToStructMappingBuilder.put(struct.name(), struct);
-            if (struct.alias() != null) {
+            if (struct.alias() != null && !struct.alias().equals(struct.name())) {
                 // TypeSignature.signature() could be StructInfo.alias() if the type is a protobuf Message.
                 typeSignatureToStructMappingBuilder.put(struct.alias(), struct);
             }

File: examples/tutorials/grpc/src/main/java/example/armeria/server/blog/grpc/GrpcExceptionHandler.java
Patch:
@@ -11,7 +11,7 @@ class GrpcExceptionHandler implements GrpcExceptionHandlerFunction {
 
     @Nullable
     @Override
-    public Status apply(RequestContext ctx, Throwable cause, Metadata metadata) {
+    public Status apply(RequestContext ctx, @Nullable Status status, Throwable cause, Metadata metadata) {
         if (cause instanceof IllegalArgumentException) {
             return Status.INVALID_ARGUMENT.withCause(cause);
         }

File: grpc/src/main/java/com/linecorp/armeria/common/grpc/GoogleGrpcExceptionHandlerFunction.java
Patch:
@@ -40,15 +40,15 @@ public interface GoogleGrpcExceptionHandlerFunction extends GrpcExceptionHandler
 
     @Nullable
     @Override
-    default Status apply(RequestContext ctx, Throwable throwable, Metadata metadata) {
+    default Status apply(RequestContext ctx, @Nullable Status status, Throwable throwable, Metadata metadata) {
         return handleException(ctx, throwable, metadata, this::applyStatusProto);
     }
 
     /**
      * Maps the specified {@link Throwable} to a {@link com.google.rpc.Status},
      * and mutates the specified {@link Metadata}.
      * The `grpc-status-details-bin` key is ignored since it will be overwritten
-     * by {@link GoogleGrpcExceptionHandlerFunction#apply(RequestContext, Throwable, Metadata)}.
+     * by {@link GrpcExceptionHandlerFunction#apply(RequestContext, Status, Throwable, Metadata)}.
      * If {@code null} is returned, the built-in mapping rule is used by default.
      */
     com.google.rpc.@Nullable Status applyStatusProto(RequestContext ctx, Throwable throwable,

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java
Patch:
@@ -248,7 +248,7 @@ public void start(Listener<O> responseListener, Metadata metadata) {
         prepareHeaders(compressor, metadata, remainingNanos);
 
         final BiFunction<ClientRequestContext, Throwable, HttpResponse> errorResponseFactory =
-                (unused, cause) -> HttpResponse.ofFailure(exceptionHandler.apply(ctx, cause, metadata)
+                (unused, cause) -> HttpResponse.ofFailure(exceptionHandler.apply(ctx, null, cause, metadata)
                                                                           .withDescription(cause.getMessage())
                                                                           .asRuntimeException());
         final HttpResponse res = initContextAndExecuteWithFallback(
@@ -454,7 +454,7 @@ public void onNext(DeframedMessage message) {
             });
         } catch (Throwable t) {
             final Metadata metadata = new Metadata();
-            close(exceptionHandler.apply(ctx, t, metadata), metadata);
+            close(exceptionHandler.apply(ctx, null, t, metadata), metadata);
         }
     }
 
@@ -511,7 +511,7 @@ private void prepareHeaders(Compressor compressor, Metadata metadata, long remai
 
     private void closeWhenListenerThrows(Throwable t) {
         final Metadata metadata = new Metadata();
-        closeWhenEos(exceptionHandler.apply(ctx, t, metadata), metadata);
+        closeWhenEos(exceptionHandler.apply(ctx, null, t, metadata), metadata);
     }
 
     private void closeWhenEos(Status status, Metadata metadata) {

File: grpc/src/main/java/com/linecorp/armeria/internal/common/grpc/HttpStreamDeframer.java
Patch:
@@ -120,7 +120,7 @@ public void processHeaders(HttpHeaders headers, StreamDecoderOutput<DeframedMess
                 decompressor(ForwardingDecompressor.forGrpc(decompressor));
             } catch (Throwable t) {
                 final Metadata metadata = new Metadata();
-                transportStatusListener.transportReportStatus(exceptionHandler.apply(ctx, t, metadata),
+                transportStatusListener.transportReportStatus(exceptionHandler.apply(ctx, null, t, metadata),
                                                               metadata);
                 return;
             }
@@ -148,7 +148,8 @@ public void processTrailers(HttpHeaders headers, StreamDecoderOutput<DeframedMes
     @Override
     public void processOnError(Throwable cause) {
         final Metadata metadata = new Metadata();
-        transportStatusListener.transportReportStatus(exceptionHandler.apply(ctx, cause, metadata), metadata);
+        transportStatusListener.transportReportStatus(
+                exceptionHandler.apply(ctx, null, cause, metadata), metadata);
     }
 
     @Override

File: grpc/src/main/java/com/linecorp/armeria/internal/common/grpc/UnwrappingGrpcExceptionHandleFunction.java
Patch:
@@ -34,10 +34,11 @@ public UnwrappingGrpcExceptionHandleFunction(GrpcExceptionHandlerFunction handle
         delegate = handlerFunction;
     }
 
+    @Nullable
     @Override
-    public @Nullable Status apply(RequestContext ctx, Throwable cause, Metadata metadata) {
+    public Status apply(RequestContext ctx, @Nullable Status status, Throwable cause, Metadata metadata) {
         final Throwable t = peelAndUnwrap(cause);
-        return delegate.apply(ctx, t, metadata);
+        return delegate.apply(ctx, status, t, metadata);
     }
 
     private static Throwable peelAndUnwrap(Throwable t) {

File: grpc/src/main/java/com/linecorp/armeria/internal/server/grpc/AbstractServerCall.java
Patch:
@@ -213,7 +213,7 @@ public final void close(Throwable exception) {
     public final void close(Throwable exception, boolean cancelled) {
         exception = Exceptions.peel(exception);
         final Metadata metadata = generateMetadataFromThrowable(exception);
-        final Status status = exceptionHandler.apply(ctx, exception, metadata);
+        final Status status = exceptionHandler.apply(ctx, null, exception, metadata);
         close(new ServerStatusAndMetadata(status, metadata, false, cancelled), exception);
     }
 
@@ -223,7 +223,7 @@ public final void close(Status status, Metadata metadata) {
             close(new ServerStatusAndMetadata(status, metadata, false));
             return;
         }
-        Status newStatus = exceptionHandler.apply(ctx, status.getCause(), metadata);
+        Status newStatus = exceptionHandler.apply(ctx, status, status.getCause(), metadata);
         assert newStatus != null;
         if (status.getDescription() != null) {
             newStatus = newStatus.withDescription(status.getDescription());

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/FramedGrpcService.java
Patch:
@@ -239,7 +239,7 @@ protected HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req) throws
                     return HttpResponse.of(
                             (ResponseHeaders) AbstractServerCall.statusToTrailers(
                                     ctx, defaultHeaders.get(serializationFormat).toBuilder(),
-                                    exceptionHandler.apply(ctx, e, metadata), metadata));
+                                    exceptionHandler.apply(ctx, null, e, metadata), metadata));
                 }
             } else {
                 if (Boolean.TRUE.equals(ctx.attr(AbstractUnframedGrpcService.IS_UNFRAMED_GRPC))) {
@@ -320,7 +320,7 @@ private <I, O> void startCall(ServerMethodDefinition<I, O> methodDef, ServiceReq
         call.setListener(listener);
         call.startDeframing();
         ctx.whenRequestCancelling().handle((cancellationCause, unused) -> {
-            final Status status = call.exceptionHandler().apply(ctx, cancellationCause, headers);
+            final Status status = call.exceptionHandler().apply(ctx, null, cancellationCause, headers);
             assert status != null;
             call.close(new ServerStatusAndMetadata(status, new Metadata(), true, true));
             return null;

File: grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientBuilderTest.java
Patch:
@@ -290,7 +290,7 @@ public O parse(InputStream inputStream) {
 
     @Test
     void useDefaultGrpcExceptionHandlerFunctionAsFallback() {
-        final GrpcExceptionHandlerFunction noopExceptionHandler = (ctx, cause, metadata) -> null;
+        final GrpcExceptionHandlerFunction noopExceptionHandler = (ctx, status, cause, metadata) -> null;
         final GrpcExceptionHandlerFunction exceptionHandler =
                 GrpcExceptionHandlerFunction.builder()
                                             .on(ContentTooLargeException.class, noopExceptionHandler)

File: grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientExceptionHandlerTest.java
Patch:
@@ -85,15 +85,15 @@ void chaining() {
         final RuntimeException exception = new RuntimeException();
         final TestServiceBlockingStub stub =
                 GrpcClients.builder(server.httpUri())
-                           .exceptionHandler(((ctx, cause, metadata) -> {
+                           .exceptionHandler(((ctx, status, cause, metadata) -> {
                                stringDeque.add("1");
                                return null;
                            }))
-                           .exceptionHandler(((ctx, cause, metadata) -> {
+                           .exceptionHandler(((ctx, status, cause, metadata) -> {
                                stringDeque.add("2");
                                return null;
                            }))
-                           .exceptionHandler(((ctx, cause, metadata) -> {
+                           .exceptionHandler(((ctx, status, cause, metadata) -> {
                                if (cause == exception) {
                                    stringDeque.add("3");
                                    return Status.DATA_LOSS;

File: grpc/src/test/java/com/linecorp/armeria/common/grpc/DefaultGrpcExceptionHandlerFunctionTest.java
Patch:
@@ -33,15 +33,16 @@ class DefaultGrpcExceptionHandlerFunctionTest {
     void failFastExceptionToUnavailableCode() {
         assertThat(GrpcExceptionHandlerFunction
                            .of()
-                           .apply(null, new FailFastException(CircuitBreaker.ofDefaultName()), null)
+                           .apply(null, null, new FailFastException(CircuitBreaker.ofDefaultName()), null)
                            .getCode()).isEqualTo(Status.Code.UNAVAILABLE);
     }
 
     @Test
     void invalidProtocolBufferExceptionToInvalidArgumentCode() {
         assertThat(GrpcExceptionHandlerFunction
                            .of()
-                           .apply(null, new InvalidProtocolBufferException("Failed to parse message"), null)
+                           .apply(null, null,
+                                  new InvalidProtocolBufferException("Failed to parse message"), null)
                            .getCode()).isEqualTo(Status.Code.INVALID_ARGUMENT);
     }
 }

File: grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/TestServiceImpl.java
Patch:
@@ -367,7 +367,7 @@ private synchronized void dispatchChunk() {
             } catch (Throwable e) {
                 failure = e;
                 if (GrpcExceptionHandlerFunction.of()
-                                                .apply(ServiceRequestContext.current(), e, new Metadata())
+                                                .apply(ServiceRequestContext.current(), null, e, new Metadata())
                                                 .getCode() == Status.CANCELLED.getCode()) {
                     // Stream was cancelled by client, responseStream.onError() might be called already or
                     // will be called soon by inbounding StreamObserver.

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/AsyncServerInterceptorTest.java
Patch:
@@ -55,7 +55,7 @@ class AsyncServerInterceptorTest {
     static ServerExtension server = new ServerExtension() {
         @Override
         protected void configure(ServerBuilder sb) {
-            final GrpcExceptionHandlerFunction exceptionHandler = (ctx, throwable, metadata) -> {
+            final GrpcExceptionHandlerFunction exceptionHandler = (ctx, status, throwable, metadata) -> {
                 exceptionCounter.getAndIncrement();
                 if (throwable instanceof AnticipatedException &&
                     "Invalid access".equals(throwable.getMessage())) {

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilderTest.java
Patch:
@@ -132,13 +132,13 @@ void mixExceptionMappingAndGrpcExceptionHandlerFunctions() {
         assertThatThrownBy(() -> GrpcService.builder()
                                             .addExceptionMapping(A1Exception.class, Status.RESOURCE_EXHAUSTED)
                                             .exceptionHandler(
-                                                    (ctx, cause, metadata) -> Status.PERMISSION_DENIED))
+                                                    (ctx, status, cause, metadata) -> Status.PERMISSION_DENIED))
                 .isInstanceOf(IllegalStateException.class)
                 .hasMessageContaining("addExceptionMapping() and exceptionHandler() are mutually exclusive.");
 
         assertThatThrownBy(() -> GrpcService.builder()
                                             .exceptionHandler(
-                                                    (ctx, cause, metadata) -> Status.PERMISSION_DENIED)
+                                                    (ctx, status, cause, metadata) -> Status.PERMISSION_DENIED)
                                             .addExceptionMapping(A1Exception.class, Status.RESOURCE_EXHAUSTED))
                 .isInstanceOf(IllegalStateException.class)
                 .hasMessageContaining("addExceptionMapping() and exceptionHandler() are mutually exclusive.");

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcStatusMappingTest.java
Patch:
@@ -102,7 +102,7 @@ protected void configure(ServerBuilder sb) throws Exception {
             sb.service(
                     GrpcService.builder()
                                .addService(new TestServiceImpl())
-                               .exceptionHandler((ctx, cause, metadata) -> {
+                               .exceptionHandler((ctx, status, cause, metadata) -> {
                                    final String attr = ctx.attr(METHOD_ATTR);
                                    if (attr != null) {
                                        metadata.put(METHOD_KEY, attr);

File: it/grpc/reactor/src/test/java/com/linecorp/armeria/grpc/reactor/TestServiceTest.java
Patch:
@@ -60,7 +60,7 @@ private static Server newServer(int httpPort) {
         final HttpServiceWithRoutes grpcService =
                 GrpcService.builder()
                            .addService(new TestServiceImpl())
-                           .exceptionHandler((ctx, throwable, metadata) -> {
+                           .exceptionHandler((ctx, status, throwable, metadata) -> {
                                if (throwable instanceof TestServiceImpl.AuthException) {
                                    return Status.UNAUTHENTICATED.withDescription(throwable.getMessage())
                                                                 .withCause(throwable);

File: core/src/main/java/com/linecorp/armeria/common/HttpRequest.java
Patch:
@@ -50,6 +50,7 @@
 import com.linecorp.armeria.common.stream.SubscriptionOption;
 import com.linecorp.armeria.internal.common.DefaultHttpRequest;
 import com.linecorp.armeria.internal.common.DefaultSplitHttpRequest;
+import com.linecorp.armeria.internal.common.HeaderOverridingHttpRequest;
 import com.linecorp.armeria.internal.common.stream.SurroundingPublisher;
 import com.linecorp.armeria.unsafe.PooledObjects;
 
@@ -478,8 +479,7 @@ default HttpRequest withHeaders(RequestHeaders newHeaders) {
             // Just check the reference only to avoid heavy comparison.
             return this;
         }
-
-        return new HeaderOverridingHttpRequest(this, newHeaders);
+        return HeaderOverridingHttpRequest.of(this, newHeaders);
     }
 
     /**

File: core/src/test/java/com/linecorp/armeria/common/AggregationOptionsTest.java
Patch:
@@ -37,6 +37,7 @@
 import com.google.common.collect.ImmutableList;
 
 import com.linecorp.armeria.common.stream.StreamMessage;
+import com.linecorp.armeria.internal.common.HeaderOverridingHttpRequest;
 
 import io.netty.buffer.ByteBufAllocator;
 import reactor.core.publisher.Flux;

File: core/src/main/java/com/linecorp/armeria/common/encoding/AbstractStreamDecoder.java
Patch:
@@ -53,6 +53,8 @@ public HttpData decode(HttpData obj) {
                                               .maxContentLength(maxLength)
                                               .cause(ex)
                                               .build();
+            } else {
+                throw ex;
             }
         }
         return fetchDecoderOutput();

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -407,7 +407,9 @@ private void handleRequest(ChannelHandlerContext ctx, DecodedHttpRequest req) th
         res = res.recover(cause -> {
             reqCtx.logBuilder().responseCause(cause);
             // Recover the failed response with the error handler.
-            return serviceCfg.errorHandler().onServiceException(reqCtx, cause);
+            try (SafeCloseable ignored = reqCtx.push()) {
+                return serviceCfg.errorHandler().onServiceException(reqCtx, cause);
+            }
         });
 
         // Keep track of the number of unfinished requests and

File: core/src/main/java/com/linecorp/armeria/server/HttpServerPipelineConfigurator.java
Patch:
@@ -45,6 +45,7 @@
 
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.Flags;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.metric.MoreMeters;
@@ -109,7 +110,6 @@ final class HttpServerPipelineConfigurator extends ChannelInitializer<Channel> {
     private static final Logger logger = LoggerFactory.getLogger(HttpServerPipelineConfigurator.class);
 
     private static final int SSL_RECORD_HEADER_LENGTH = 5;
-    private static final int MAX_CLIENT_HELLO_LENGTH = 4096; // 4KiB should be more than enough.
 
     static final AsciiString SCHEME_HTTP = AsciiString.cached("http");
     static final AsciiString SCHEME_HTTPS = AsciiString.cached("https");
@@ -232,7 +232,7 @@ private Timer newKeepAliveTimer(SessionProtocol protocol) {
     private void configureHttps(ChannelPipeline p, @Nullable ProxiedAddresses proxiedAddresses) {
         final Mapping<String, SslContext> sslContexts =
                 requireNonNull(config.sslContextMapping(), "config.sslContextMapping() returned null");
-        p.addLast(new SniHandler(sslContexts, MAX_CLIENT_HELLO_LENGTH, config.idleTimeoutMillis()));
+        p.addLast(new SniHandler(sslContexts, Flags.defaultMaxClientHelloLength(), config.idleTimeoutMillis()));
         p.addLast(TrafficLoggingHandler.SERVER);
         p.addLast(new Http2OrHttpHandler(proxiedAddresses));
     }

File: benchmarks/jmh/src/jmh/java/com/linecorp/armeria/server/RoutersBenchmark.java
Patch:
@@ -60,7 +60,8 @@ public class RoutersBenchmark {
         SERVICES = ImmutableList.of(newServiceConfig(route1), newServiceConfig(route2));
         FALLBACK_SERVICE = newServiceConfig(Route.ofCatchAll());
         HOST = new VirtualHost(
-                "localhost", "localhost", 0, null, SERVICES, FALLBACK_SERVICE, RejectedRouteHandler.DISABLED,
+                "localhost", "localhost", 0, null,
+                null, SERVICES, FALLBACK_SERVICE, RejectedRouteHandler.DISABLED,
                 unused -> NOPLogger.NOP_LOGGER, FALLBACK_SERVICE.defaultServiceNaming(),
                 FALLBACK_SERVICE.defaultLogName(), 0, 0, false,
                 AccessLogWriter.disabled(), CommonPools.blockingTaskExecutor(), 0, SuccessFunction.ofDefault(),

File: core/src/main/java/com/linecorp/armeria/common/Flags.java
Patch:
@@ -629,6 +629,7 @@ private static void detectTlsEngineAndDumpOpenSslInfo() {
             final SSLEngine engine = SslContextUtil.createSslContext(
                     SslContextBuilder::forClient,
                     /* forceHttp1 */ false,
+                    tlsEngineType,
                     /* tlsAllowUnsafeCiphers */ false,
                     ImmutableList.of(), null).newEngine(ByteBufAllocator.DEFAULT);
             logger.info("All available SSL protocols: {}",

File: core/src/main/java/com/linecorp/armeria/common/FlagsProvider.java
Patch:
@@ -217,6 +217,7 @@ default Boolean useOpenSsl() {
      * the default.</p>
      */
     @Nullable
+    @UnstableApi
     default TlsEngineType tlsEngineType() {
         return null;
     }

File: core/src/main/java/com/linecorp/armeria/internal/common/util/SslContextUtil.java
Patch:
@@ -37,8 +37,8 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 
-import com.linecorp.armeria.common.Flags;
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.common.util.TlsEngineType;
 
 import io.netty.buffer.PooledByteBufAllocator;
 import io.netty.handler.codec.http2.Http2SecurityUtil;
@@ -97,13 +97,13 @@ public final class SslContextUtil {
      */
     public static SslContext createSslContext(
             Supplier<SslContextBuilder> builderSupplier, boolean forceHttp1,
-            boolean tlsAllowUnsafeCiphers,
+            TlsEngineType tlsEngineType, boolean tlsAllowUnsafeCiphers,
             Iterable<? extends Consumer<? super SslContextBuilder>> userCustomizers,
             @Nullable List<X509Certificate> keyCertChainCaptor) {
 
         return MinifiedBouncyCastleProvider.call(() -> {
             final SslContextBuilder builder = builderSupplier.get();
-            final SslProvider provider = Flags.tlsEngineType().sslProvider();
+            final SslProvider provider = tlsEngineType.sslProvider();
             builder.sslProvider(provider);
 
             final Set<String> supportedProtocols = supportedProtocols(builder);

File: core/src/test/java/com/linecorp/armeria/server/VirtualHostAndServiceConfigConsistencyTest.java
Patch:
@@ -42,6 +42,7 @@ void testApiConsistencyBetweenVirtualHostAndServiceConfig() {
         final Set<String> ignorableVirtualHostMethods = ImmutableSet.of(
                 "defaultHostname",
                 "sslContext",
+                "tlsEngineType",
                 "accessLogger",
                 "port",
                 "hostnamePattern",

File: core/src/main/java/com/linecorp/armeria/server/WrappingTransientHttpService.java
Patch:
@@ -22,7 +22,7 @@
 import com.linecorp.armeria.common.HttpResponse;
 
 /**
- * Decorates a {@link HttpService} to be treated as {@link TransientService} without inheritance.
+ * Decorates an {@link HttpService} to be treated as {@link TransientService} without inheritance.
  */
 final class WrappingTransientHttpService extends SimpleDecoratingHttpService implements TransientHttpService {
 

File: core/src/test/java/com/linecorp/armeria/server/RoutingContextTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 import java.util.List;
 
@@ -141,6 +142,7 @@ static RoutingContext create(VirtualHost virtualHost, String path, @Nullable Str
 
     static VirtualHost virtualHost() {
         final HttpService service = mock(HttpService.class);
+        when(service.options()).thenReturn(ServiceOptions.of());
         final Server server = Server.builder()
                                     .virtualHost("example.com")
                                     .serviceUnder("/", service)

File: core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java
Patch:
@@ -378,7 +378,7 @@ void shouldLogFailedResponseWhenFailureSamplingRateIsAlways() throws Exception {
 
         // verify request log
         verify(logger).warn(argThat((String actLog) -> actLog.contains("Request:") &&
-                                                        actLog.endsWith("headers=[:method=GET, :path=/]}")));
+                                                       actLog.endsWith("headers=[:method=GET, :path=/]}")));
 
         // verify response log
         verify(logger).warn(argThat((String actLog) -> actLog.contains("Response:") &&

File: oauth2/src/test/java/com/linecorp/armeria/common/auth/oauth2/GrantedOAuth2AccessTokenTest.java
Patch:
@@ -173,7 +173,6 @@ void testToString() throws Exception {
                                                                        .scope(scope)
                                                                        .build();
 
-        System.out.println(token);
         assertThat(token.toString()).isEqualTo(toString);
     }
 

File: oauth2/src/test/java/com/linecorp/armeria/common/auth/oauth2/OAuth2TokenDescriptorTest.java
Patch:
@@ -197,8 +197,6 @@ void testToString() throws Exception {
                                                                       .extras(extras)
                                                                       .scope(scope)
                                                                       .build();
-
-        System.out.println(descriptor);
         assertThat(descriptor.toString()).isEqualTo(rawResponse);
     }
 

File: oauth2/src/test/java/com/linecorp/armeria/internal/common/auth/oauth2/TokenRevocationRequestTest.java
Patch:
@@ -69,7 +69,6 @@ public void testRevoke() throws Exception {
                 requestHeaders1, "token=" + token.grantedToken().accessToken() +
                                  "&token_type_hint=access_token").aggregate().join();
         assertThat(response1.status()).isEqualTo(HttpStatus.OK);
-        System.out.println(response1.contentUtf8());
         assertThat(response1.contentUtf8()).isEqualTo(HttpStatus.OK.toString());
 
         final RequestHeaders requestHeaders2 = RequestHeaders.of(

File: resteasy/src/test/java/com/linecorp/armeria/server/resteasy/BookServiceClientServerTest.java
Patch:
@@ -112,7 +112,6 @@ void testBooks() throws Exception {
         assertThatThrownBy(getBooks::hasEntity)
                 .isInstanceOf(IllegalStateException.class)
                 .hasMessage("RESTEASY003765: Response is closed.");
-        System.out.println(getBooksEntry);
         assertThat(getBooksEntry).contains("John Doe");
         assertThat(getBooksEntry).contains("Java");
         final Book[] getBooksEntryArray = JSON.readValue(getBooksEntry, Book[].class);
@@ -134,7 +133,6 @@ void testBooks() throws Exception {
                 .isInstanceOf(IllegalStateException.class)
                 .hasMessage("RESTEASY003765: Response is closed.");
         final String getBooksEntry2 = JSON.writeValueAsString(getBooksEntryArray2);
-        System.out.println(getBooksEntry2);
         assertThat(getBooksEntry2).isEqualTo(getBooksEntry);
 
         final Response getAllBooks = webTarget.path(booksPath)
@@ -150,7 +148,6 @@ void testBooks() throws Exception {
         assertThat(getAllBooksEntryArray[0]).isInstanceOf(Book.class);
         assertThat(getAllBooksEntryArray).contains(getBooksEntryArray2);
         final String getAllBooksEntry = JSON.writeValueAsString(getBooksEntryArray2);
-        System.out.println(getAllBooksEntry);
 
         final String getBookPath = "/resteasy/app/books/978-3-16-148410-0";
         final Response getBook = webTarget.path(getBookPath)

File: core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java
Patch:
@@ -183,7 +183,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                         }
 
                         if (!HttpUtil.isKeepAlive(nettyRes)) {
-                            session().deactivate();
+                            session().markUnacquirable();
                         }
 
                         final HttpResponseWrapper res = getResponse(resId);

File: core/src/main/java/com/linecorp/armeria/client/Http2ResponseDecoder.java
Patch:
@@ -159,14 +159,14 @@ public void onStreamRemoved(Http2Stream stream) {}
 
     @Override
     public void onGoAwaySent(int lastStreamId, long errorCode, ByteBuf debugData) {
-        session().deactivate();
+        session().markUnacquirable();
         goAwayHandler.onGoAwaySent(channel(), lastStreamId, errorCode, debugData);
     }
 
     @Override
     public void onGoAwayReceived(int lastStreamId, long errorCode, ByteBuf debugData) {
         // Should not reuse a connection that received a GOAWAY frame.
-        session().deactivate();
+        session().markUnacquirable();
         goAwayHandler.onGoAwayReceived(channel(), lastStreamId, errorCode, debugData);
     }
 

File: core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java
Patch:
@@ -805,7 +805,7 @@ private static final class ReadSuppressingAndChannelDeactivatingHandler extends
 
         @Override
         public void close(ChannelHandlerContext ctx, ChannelPromise promise) throws Exception {
-            HttpSession.get(ctx.channel()).deactivate();
+            HttpSession.get(ctx.channel()).markUnacquirable();
             super.close(ctx, promise);
         }
     }

File: core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java
Patch:
@@ -327,7 +327,7 @@ public boolean isAcquirable(KeepAliveHandler keepAliveHandler) {
     }
 
     @Override
-    public void deactivate() {
+    public void markUnacquirable() {
         isAcquirable = false;
     }
 

File: core/src/main/java/com/linecorp/armeria/client/WebSocketHttp1ClientChannelHandler.java
Patch:
@@ -180,7 +180,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                     }
 
                     if (!HttpUtil.isKeepAlive(nettyRes)) {
-                        session().deactivate();
+                        session().markUnacquirable();
                     }
 
                     if (res == null && ArmeriaHttpUtil.isRequestTimeoutResponse(nettyRes)) {

File: core/src/main/java/com/linecorp/armeria/internal/client/DefaultClientRequestContext.java
Patch:
@@ -1013,7 +1013,7 @@ public CompletableFuture<Void> initiateConnectionShutdown() {
                 });
                 // To deactivate the channel when initiateShutdown is called after the RequestHeaders is sent.
                 // The next request will trigger shutdown.
-                HttpSession.get(ch).deactivate();
+                HttpSession.get(ch).markUnacquirable();
             }
         });
         return completableFuture;

File: xds/src/main/java/com/linecorp/armeria/xds/client/endpoint/LoadBalancer.java
Patch:
@@ -24,6 +24,4 @@ interface LoadBalancer {
 
     @Nullable
     Endpoint selectNow(ClientRequestContext ctx);
-
-    void prioritySetUpdated(PrioritySet prioritySet);
 }

File: xds/src/main/java/com/linecorp/armeria/xds/client/endpoint/XdsAttributeAssigningEndpointGroup.java
Patch:
@@ -16,8 +16,8 @@
 
 package com.linecorp.armeria.xds.client.endpoint;
 
-import static com.linecorp.armeria.xds.client.endpoint.XdsAttributesKeys.LB_ENDPOINT_KEY;
-import static com.linecorp.armeria.xds.client.endpoint.XdsAttributesKeys.LOCALITY_LB_ENDPOINTS_KEY;
+import static com.linecorp.armeria.xds.client.endpoint.XdsAttributeKeys.LB_ENDPOINT_KEY;
+import static com.linecorp.armeria.xds.client.endpoint.XdsAttributeKeys.LOCALITY_LB_ENDPOINTS_KEY;
 
 import java.util.List;
 import java.util.function.Consumer;

File: xds/src/test/java/com/linecorp/armeria/xds/client/endpoint/XdsConverterUtilTest.java
Patch:
@@ -48,15 +48,15 @@ void convertEndpointsWithFilterMetadata() {
         final Metadata metadata1 = metadata(ImmutableMap.of("foo", "foo1"));
         final LbEndpoint lbEndpoint1 = endpoint("127.0.0.1", 8080, metadata1);
         final Endpoint endpoint1 = Endpoint.of("127.0.0.1", 8080)
-                                           .withAttr(XdsAttributesKeys.LB_ENDPOINT_KEY, lbEndpoint1);
+                                           .withAttr(XdsAttributeKeys.LB_ENDPOINT_KEY, lbEndpoint1);
         final Metadata metadata2 = metadata(ImmutableMap.of("foo", "foo1", "bar", "bar2"));
         final LbEndpoint lbEndpoint2 = endpoint("127.0.0.1", 8081, metadata2);
         final Endpoint endpoint2 = Endpoint.of("127.0.0.1", 8081)
-                                           .withAttr(XdsAttributesKeys.LB_ENDPOINT_KEY, lbEndpoint2);
+                                           .withAttr(XdsAttributeKeys.LB_ENDPOINT_KEY, lbEndpoint2);
         final Metadata metadata3 = metadata(ImmutableMap.of("foo", "foo1", "bar", "bar1", "baz", "baz1"));
         final LbEndpoint lbEndpoint3 = endpoint("127.0.0.1", 8082, metadata3);
         final Endpoint endpoint3 = Endpoint.of("127.0.0.1", 8082)
-                                           .withAttr(XdsAttributesKeys.LB_ENDPOINT_KEY, lbEndpoint3);
+                                           .withAttr(XdsAttributeKeys.LB_ENDPOINT_KEY, lbEndpoint3);
         final List<Endpoint> endpoints =
                 convertEndpoints(ImmutableList.of(endpoint1, endpoint2, endpoint3), Struct.newBuilder()
                                                       .putFields("foo", stringValue("foo1"))

File: core/src/main/java/com/linecorp/armeria/server/Http2RequestDecoder.java
Patch:
@@ -207,6 +207,7 @@ public void onHeadersRead(ChannelHandlerContext ctx, int streamId, Http2Headers
             req = DecodedHttpRequest.of(endOfStream, eventLoop, id, streamId, headers, true,
                                         inboundTrafficController, routingCtx);
             requests.put(streamId, req);
+            cfg.serverMetrics().increasePendingHttp2Requests();
             ctx.fireChannelRead(req);
         } else {
             if (!(req instanceof DecodedHttpRequestWriter)) {

File: core/src/test/java/com/linecorp/armeria/server/EmptyContentDecodedHttpRequestTest.java
Patch:
@@ -17,6 +17,7 @@
 package com.linecorp.armeria.server;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.RegisterExtension;
@@ -35,9 +36,10 @@ class EmptyContentDecodedHttpRequestTest {
 
     @Test
     void emptyContent() {
+        final RoutingContext routingContext = mock(RoutingContext.class);
         final RequestHeaders headers = RequestHeaders.of(HttpMethod.GET, "/");
         final EmptyContentDecodedHttpRequest req =
-                new EmptyContentDecodedHttpRequest(eventLoop.get(), 1, 3, headers, true, null,
+                new EmptyContentDecodedHttpRequest(eventLoop.get(), 1, 3, headers, true, routingContext,
                                                    ExchangeType.BIDI_STREAMING, 0, 0);
 
         StepVerifier.create(req)

File: core/src/main/java/com/linecorp/armeria/common/logging/AbstractLogFormatterBuilder.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * A skeletal builder implementation for {@link LogFormatter}.
  */
-abstract class AbstractLogFormatterBuilder<T, SELF extends AbstractLogFormatterBuilder<T, SELF>> {
+abstract class AbstractLogFormatterBuilder<SELF extends AbstractLogFormatterBuilder<SELF, T>, T> {
 
     @Nullable
     private HeadersSanitizer<T> requestHeadersSanitizer;

File: core/src/main/java/com/linecorp/armeria/common/logging/JsonLogFormatterBuilder.java
Patch:
@@ -34,7 +34,7 @@
  */
 @UnstableApi
 public final class JsonLogFormatterBuilder
-        extends AbstractLogFormatterBuilder<JsonNode, JsonLogFormatterBuilder> {
+        extends AbstractLogFormatterBuilder<JsonLogFormatterBuilder, JsonNode> {
 
     @Nullable
     private ObjectMapper objectMapper;

File: core/src/main/java/com/linecorp/armeria/common/logging/TextLogFormatterBuilder.java
Patch:
@@ -28,7 +28,7 @@
  */
 @UnstableApi
 public final class TextLogFormatterBuilder
-        extends AbstractLogFormatterBuilder<String, TextLogFormatterBuilder> {
+        extends AbstractLogFormatterBuilder<TextLogFormatterBuilder, String> {
 
     private boolean includeContext = true;
 

File: core/src/main/java/com/linecorp/armeria/server/AbstractContextPathAnnotatedServiceConfigSetters.java
Patch:
@@ -21,10 +21,10 @@
 import java.util.Set;
 
 abstract class AbstractContextPathAnnotatedServiceConfigSetters
-        <T extends AbstractContextPathServicesBuilder<?, ?>,
-                SELF extends AbstractContextPathAnnotatedServiceConfigSetters<T, SELF>>
+        <SELF extends AbstractContextPathAnnotatedServiceConfigSetters<SELF, T>,
+                T extends AbstractContextPathServicesBuilder<?, ?>>
         extends AbstractAnnotatedServiceConfigSetters<
-        AbstractContextPathAnnotatedServiceConfigSetters<T, SELF>> {
+        AbstractContextPathAnnotatedServiceConfigSetters<SELF, T>> {
 
     private final T builder;
     private final Set<String> contextPaths;

File: core/src/main/java/com/linecorp/armeria/server/AbstractContextPathDecoratingBindingBuilder.java
Patch:
@@ -22,8 +22,9 @@
 
 import com.linecorp.armeria.internal.server.RouteDecoratingService;
 
-abstract class AbstractContextPathDecoratingBindingBuilder<T extends AbstractContextPathServicesBuilder<?, ?>,
-        SELF extends AbstractContextPathDecoratingBindingBuilder<T, SELF>>
+abstract class AbstractContextPathDecoratingBindingBuilder
+        <SELF extends AbstractContextPathDecoratingBindingBuilder<SELF, T>,
+                T extends AbstractContextPathServicesBuilder<?, ?>>
         extends AbstractBindingBuilder<SELF> {
 
     private final T builder;

File: core/src/main/java/com/linecorp/armeria/server/AbstractContextPathServicesBuilder.java
Patch:
@@ -33,9 +33,8 @@
 import com.linecorp.armeria.server.annotation.RequestConverterFunction;
 import com.linecorp.armeria.server.annotation.ResponseConverterFunction;
 
-abstract class AbstractContextPathServicesBuilder<T extends ServiceConfigsBuilder<T>,
-        SELF extends AbstractContextPathServicesBuilder<T, SELF>>
-        implements ServiceConfigsBuilder<SELF> {
+abstract class AbstractContextPathServicesBuilder<SELF extends AbstractContextPathServicesBuilder<SELF, T>,
+        T extends ServiceConfigsBuilder<T>> implements ServiceConfigsBuilder<SELF> {
 
     private final Set<String> contextPaths;
     private final T parent;

File: core/src/main/java/com/linecorp/armeria/server/ContextPathAnnotatedServiceConfigSetters.java
Patch:
@@ -25,8 +25,8 @@
  */
 @UnstableApi
 public final class ContextPathAnnotatedServiceConfigSetters
-        extends AbstractContextPathAnnotatedServiceConfigSetters<ContextPathServicesBuilder,
-        ContextPathAnnotatedServiceConfigSetters> {
+        extends AbstractContextPathAnnotatedServiceConfigSetters<ContextPathAnnotatedServiceConfigSetters,
+        ContextPathServicesBuilder> {
 
     ContextPathAnnotatedServiceConfigSetters(ContextPathServicesBuilder builder) {
         super(builder);

File: core/src/main/java/com/linecorp/armeria/server/ContextPathDecoratingBindingBuilder.java
Patch:
@@ -38,8 +38,8 @@
  */
 @UnstableApi
 public final class ContextPathDecoratingBindingBuilder
-        extends AbstractContextPathDecoratingBindingBuilder<ContextPathServicesBuilder,
-        ContextPathDecoratingBindingBuilder> {
+        extends AbstractContextPathDecoratingBindingBuilder<ContextPathDecoratingBindingBuilder,
+        ContextPathServicesBuilder> {
 
     ContextPathDecoratingBindingBuilder(ContextPathServicesBuilder builder) {
         super(builder);

File: core/src/main/java/com/linecorp/armeria/server/ContextPathServiceBindingBuilder.java
Patch:
@@ -35,8 +35,8 @@
  */
 @UnstableApi
 public final class ContextPathServiceBindingBuilder
-        extends AbstractContextPathServiceBindingBuilder<ContextPathServicesBuilder,
-        ContextPathServiceBindingBuilder> {
+        extends AbstractContextPathServiceBindingBuilder<ContextPathServiceBindingBuilder,
+        ContextPathServicesBuilder> {
 
     ContextPathServiceBindingBuilder(ContextPathServicesBuilder builder) {
         super(builder);

File: core/src/main/java/com/linecorp/armeria/server/ContextPathServicesBuilder.java
Patch:
@@ -39,7 +39,7 @@
  */
 @UnstableApi
 public final class ContextPathServicesBuilder
-        extends AbstractContextPathServicesBuilder<ServerBuilder, ContextPathServicesBuilder> {
+        extends AbstractContextPathServicesBuilder<ContextPathServicesBuilder, ServerBuilder> {
 
     ContextPathServicesBuilder(ServerBuilder parent, VirtualHostBuilder virtualHostBuilder,
                                Set<String> contextPaths) {

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostContextPathAnnotatedServiceConfigSetters.java
Patch:
@@ -25,8 +25,8 @@
  */
 @UnstableApi
 public final class VirtualHostContextPathAnnotatedServiceConfigSetters
-        extends AbstractContextPathAnnotatedServiceConfigSetters<VirtualHostContextPathServicesBuilder,
-        VirtualHostContextPathAnnotatedServiceConfigSetters> {
+        extends AbstractContextPathAnnotatedServiceConfigSetters<
+        VirtualHostContextPathAnnotatedServiceConfigSetters, VirtualHostContextPathServicesBuilder> {
 
     VirtualHostContextPathAnnotatedServiceConfigSetters(VirtualHostContextPathServicesBuilder builder) {
         super(builder);

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostContextPathDecoratingBindingBuilder.java
Patch:
@@ -43,8 +43,8 @@
  */
 @UnstableApi
 public final class VirtualHostContextPathDecoratingBindingBuilder
-        extends AbstractContextPathDecoratingBindingBuilder<VirtualHostContextPathServicesBuilder,
-        VirtualHostContextPathDecoratingBindingBuilder> {
+        extends AbstractContextPathDecoratingBindingBuilder<VirtualHostContextPathDecoratingBindingBuilder,
+        VirtualHostContextPathServicesBuilder> {
 
     VirtualHostContextPathDecoratingBindingBuilder(VirtualHostContextPathServicesBuilder builder) {
         super(builder);

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostContextPathServiceBindingBuilder.java
Patch:
@@ -36,8 +36,8 @@
  */
 @UnstableApi
 public final class VirtualHostContextPathServiceBindingBuilder
-        extends AbstractContextPathServiceBindingBuilder<VirtualHostContextPathServicesBuilder,
-        VirtualHostContextPathServiceBindingBuilder> {
+        extends AbstractContextPathServiceBindingBuilder<VirtualHostContextPathServiceBindingBuilder,
+        VirtualHostContextPathServicesBuilder> {
 
     VirtualHostContextPathServiceBindingBuilder(VirtualHostContextPathServicesBuilder builder) {
         super(builder);

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostContextPathServicesBuilder.java
Patch:
@@ -40,7 +40,7 @@
  */
 @UnstableApi
 public final class VirtualHostContextPathServicesBuilder
-        extends AbstractContextPathServicesBuilder<VirtualHostBuilder, VirtualHostContextPathServicesBuilder> {
+        extends AbstractContextPathServicesBuilder<VirtualHostContextPathServicesBuilder, VirtualHostBuilder> {
 
     VirtualHostContextPathServicesBuilder(VirtualHostBuilder parent, VirtualHostBuilder virtualHostBuilder,
                                           Set<String> contextPaths) {

File: eureka/src/main/java/com/linecorp/armeria/client/eureka/EurekaEndpointGroupBuilder.java
Patch:
@@ -65,7 +65,7 @@
  * Builds a {@link EurekaEndpointGroup}.
  */
 public final class EurekaEndpointGroupBuilder extends AbstractWebClientBuilder
-        implements DynamicEndpointGroupSetters {
+        implements DynamicEndpointGroupSetters<EurekaEndpointGroupBuilder> {
 
     private static final long DEFAULT_REGISTRY_FETCH_INTERVAL_MILLIS = 30000;
 
@@ -465,7 +465,8 @@ public EurekaEndpointGroupBuilder selectionTimeoutMillis(long selectionTimeoutMi
      * EurekaEndpointGroupBuilder can't extend AbstractDynamicEndpointGroupBuilder because it already extends
      * EurekaEndpointGroupBuilder.
      */
-    private static class DynamicEndpointGroupBuilder extends AbstractDynamicEndpointGroupBuilder {
+    private static class DynamicEndpointGroupBuilder
+            extends AbstractDynamicEndpointGroupBuilder<DynamicEndpointGroupBuilder> {
 
         DynamicEndpointGroupBuilder() {
             super(Flags.defaultResponseTimeoutMillis());

File: core/src/main/java/com/linecorp/armeria/server/CorsServerErrorHandler.java
Patch:
@@ -54,7 +54,7 @@ final class CorsServerErrorHandler implements ServerErrorHandler {
             return serverErrorHandler.renderStatus(null, serviceConfig, headers, status, description, cause);
         }
 
-        final CorsService corsService = serviceConfig.service().as(CorsService.class);
+        final CorsService corsService = ctx.findService(CorsService.class);
         if (corsService == null) {
             return serverErrorHandler.renderStatus(ctx, serviceConfig, headers, status, description, cause);
         }
@@ -80,7 +80,7 @@ final class CorsServerErrorHandler implements ServerErrorHandler {
             if (oldRes == null) {
                 return null;
             }
-            final CorsService corsService = ctx.config().service().as(CorsService.class);
+            final CorsService corsService = ctx.findService(CorsService.class);
             if (corsService == null) {
                 return oldRes;
             }

File: core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java
Patch:
@@ -165,7 +165,7 @@
  *
  * @see VirtualHostBuilder
  */
-public final class ServerBuilder implements TlsSetters, ServiceConfigsBuilder {
+public final class ServerBuilder implements TlsSetters, ServiceConfigsBuilder<ServerBuilder> {
     private static final Logger logger = LoggerFactory.getLogger(ServerBuilder.class);
 
     // Defaults to no graceful shutdown.

File: core/src/main/java/com/linecorp/armeria/server/ServiceConfigBuilder.java
Patch:
@@ -49,7 +49,7 @@
 
 import io.netty.channel.EventLoopGroup;
 
-final class ServiceConfigBuilder implements ServiceConfigSetters {
+final class ServiceConfigBuilder implements ServiceConfigSetters<ServiceConfigBuilder> {
 
     private final Route route;
     private final HttpService service;

File: grpc/src/test/java/com/linecorp/armeria/internal/server/grpc/GrpcDocServicePluginTest.java
Patch:
@@ -354,7 +354,7 @@ void httpEndpoint() {
 
         // Expected generated routes. See 'transcoding.proto' file.
         final List<Route> routes = ImmutableList.of(
-                Route.builder().methods(HttpMethod.GET).path("/v1/messages/:@p0").build(),
+                Route.builder().methods(HttpMethod.GET).path("/v1/messages/:p0").build(),
                 Route.builder().methods(HttpMethod.GET).path("/v2/messages/{message_id}").build(),
                 Route.builder().methods(HttpMethod.GET).path("/v3/messages/{message_id}").build(),
                 Route.builder().methods(HttpMethod.PATCH).path("/v1/messages/{message_id}").build(),
@@ -385,7 +385,7 @@ void httpEndpoint() {
                                                    .findFirst().get();
         assertThat(getMessageV1.httpMethod()).isEqualTo(HttpMethod.GET);
         assertThat(getMessageV1.endpoints()).containsAll(ImmutableSet.of(
-                EndpointInfo.builder(virtualHostNamePattern, "/v1/messages/:@p0")
+                EndpointInfo.builder(virtualHostNamePattern, "/v1/messages/:p0")
                             .availableMimeTypes(MediaType.JSON_UTF_8).build()));
         assertThat(getMessageV1.parameters()).containsAll(ImmutableList.of(
                 FieldInfo.builder("name", TypeSignature.ofBase(JavaType.STRING.name()))
@@ -457,7 +457,7 @@ void httpEndpoint() {
 
     @Test
     void pathParamRegexIsConvertedCorrectly() {
-        assertThat(GrpcDocServicePlugin.convertRegexPath("/a/(?<p0>[^/]+):get"))
+        assertThat(convertRegexPath("/a/(?<p0>[^/]+):get"))
                 .isEqualTo("/a/p0:get");
     }
 }

File: grpc/src/test/java/com/linecorp/armeria/internal/server/grpc/GrpcDocServicePrefixTest.java
Patch:
@@ -78,7 +78,7 @@ void prefixTest() throws Exception {
                 "/route/innerPrefix/GetMessageV1");
         getMessageV1 = findMethod(httpMethods, "GetMessageV1");
         assertThat(pathMapping(getMessageV1)).containsExactlyInAnyOrder(
-                "/v1/messages/:@p0", "/outerPrefix/v1/messages/:@p0");
+                "/v1/messages/:p0", "/outerPrefix/v1/messages/:p0");
 
         JsonNode getMessageV2 = findMethod(methods, "GetMessageV2");
         assertThat(pathMapping(getMessageV2)).containsExactlyInAnyOrder(

File: core/src/main/java/com/linecorp/armeria/server/Route.java
Patch:
@@ -149,7 +149,7 @@ default RoutingResult apply(RoutingContext routingCtx) {
      * <ul>
      *   <li>EXACT: {@code [ "/foo", "/foo" ]} (The trie path is the same.)</li>
      *   <li>PREFIX: {@code [ "/foo/", "/foo/*" ]}</li>
-     *   <li>PARAMETERIZED: {@code [ "/foo/:", "/foo/:" ]} (The trie path is the same.)</li>
+     *   <li>PARAMETERIZED: {@code [ "/foo/\0", "/foo/\0" ]} (The trie path is the same.)</li>
      * </ul>
      *
      * <p>{@link RoutePathType#REGEX} may have one or two paths. If the {@link Route} was created from a glob

File: grpc/src/test/java/com/linecorp/armeria/it/grpc/HttpJsonTranscodingTest.java
Patch:
@@ -554,7 +554,7 @@ void shouldAcceptRfc3339TimeFormatAndDuration() throws JsonProcessingException {
         final String duration = "1.000340012s";
 
         final AggregatedHttpResponse response =
-                webClient.get("/v1/echo/" + timestamp + '/' + duration).aggregate().join();
+                webClient.get("/v1/echo/timestamp/" + timestamp + '/' + duration).aggregate().join();
         final JsonNode root = mapper.readTree(response.contentUtf8());
         assertThat(response.contentType()).isEqualTo(MediaType.JSON_UTF_8);
         assertThat(root.get("timestamp").asText()).isEqualTo(timestamp);
@@ -566,7 +566,7 @@ void shouldAcceptRfc3339TimeFormat() throws JsonProcessingException {
         final String timestamp = ZonedDateTime.now().format(DateTimeFormatter.ISO_INSTANT);
 
         final AggregatedHttpResponse response =
-                webClient.post("/v1/echo/" + timestamp + ":get", "").aggregate().join();
+                webClient.post("/v1/echo/timestamp/" + timestamp + ":get", "").aggregate().join();
         final JsonNode root = mapper.readTree(response.contentUtf8());
         assertThat(response.contentType()).isEqualTo(MediaType.JSON_UTF_8);
         assertThat(root.get("timestamp").asText()).isEqualTo(timestamp);

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/HttpJsonTranscodingPathParser.java
Patch:
@@ -382,7 +382,7 @@ public String pathVariable(PathMappingType type) {
                 if (parentFieldPath != null) {
                     return parentFieldPath;
                 } else {
-                    return 'p' + StringUtil.toString(pathVarIndex);
+                    return "@p" + StringUtil.toString(pathVarIndex);
                 }
             } else {
                 return StringUtil.toString(pathVarIndex);

File: grpc/src/test/java/com/linecorp/armeria/internal/server/grpc/GrpcDocServicePluginTest.java
Patch:
@@ -348,7 +348,7 @@ void httpEndpoint() {
 
         // Expected generated routes. See 'transcoding.proto' file.
         final List<Route> routes = ImmutableList.of(
-                Route.builder().methods(HttpMethod.GET).path("/v1/messages/:p0").build(),
+                Route.builder().methods(HttpMethod.GET).path("/v1/messages/:@p0").build(),
                 Route.builder().methods(HttpMethod.GET).path("/v2/messages/{message_id}").build(),
                 Route.builder().methods(HttpMethod.GET).path("/v3/messages/{message_id}").build(),
                 Route.builder().methods(HttpMethod.PATCH).path("/v1/messages/{message_id}").build(),
@@ -379,7 +379,7 @@ void httpEndpoint() {
                                                    .findFirst().get();
         assertThat(getMessageV1.httpMethod()).isEqualTo(HttpMethod.GET);
         assertThat(getMessageV1.endpoints()).containsAll(ImmutableSet.of(
-                EndpointInfo.builder(virtualHostNamePattern, "/v1/messages/:p0")
+                EndpointInfo.builder(virtualHostNamePattern, "/v1/messages/:@p0")
                             .availableMimeTypes(MediaType.JSON_UTF_8).build()));
         assertThat(getMessageV1.parameters()).containsAll(ImmutableList.of(
                 FieldInfo.builder("name", TypeSignature.ofBase(JavaType.STRING.name()))

File: grpc/src/test/java/com/linecorp/armeria/internal/server/grpc/GrpcDocServicePrefixTest.java
Patch:
@@ -78,7 +78,7 @@ void prefixTest() throws Exception {
                 "/route/innerPrefix/GetMessageV1");
         getMessageV1 = findMethod(httpMethods, "GetMessageV1");
         assertThat(pathMapping(getMessageV1)).containsExactlyInAnyOrder(
-                "/v1/messages/:p0", "/outerPrefix/v1/messages/:p0");
+                "/v1/messages/:@p0", "/outerPrefix/v1/messages/:@p0");
 
         JsonNode getMessageV2 = findMethod(methods, "GetMessageV2");
         assertThat(pathMapping(getMessageV2)).containsExactlyInAnyOrder(

File: core/src/main/java/com/linecorp/armeria/server/DecodedHttpRequest.java
Patch:
@@ -88,6 +88,8 @@ static DecodedHttpRequest of(boolean endOfStream, EventLoop eventLoop, int id, i
 
     void close(Throwable cause);
 
+    boolean isClosedSuccessfully();
+
     /**
      * Sets the specified {@link HttpResponse} which responds to this request. This is always called
      * by the {@link HttpServerHandler} after the handler gets the {@link HttpResponse} from an

File: core/src/test/java/com/linecorp/armeria/server/AggregatingRequestTimeoutTest.java
Patch:
@@ -91,6 +91,6 @@ void asynchronouslyHandleFailedRequest(SessionProtocol protocol) {
         // The service waits for the full request body and then responds.
         assertThat(WebClient.of(protocol, server.endpoint(protocol))
                             .execute(request).aggregate().join().status())
-                .isSameAs(HttpStatus.SERVICE_UNAVAILABLE);
+                .isSameAs(HttpStatus.REQUEST_TIMEOUT);
     }
 }

File: core/src/test/java/com/linecorp/armeria/server/ServiceTest.java
Patch:
@@ -65,7 +65,8 @@ private static void assertDecoration(FooService inner, HttpService outer) throws
                                   AccessLogWriter.disabled(),
                                   CommonPools.blockingTaskExecutor(),
                                   SuccessFunction.always(),
-                                  0, Files.newTemporaryFolder().toPath(), CommonPools.workerGroup(),
+                                  0, Files.newTemporaryFolder().toPath(),
+                                  MultipartRemovalStrategy.ON_RESPONSE_COMPLETION, CommonPools.workerGroup(),
                                   ImmutableList.of(), HttpHeaders.of(),
                                   ctx -> RequestId.of(1L),
                                   ServerErrorHandler.ofDefault().asServiceErrorHandler(), NOOP_CONTEXT_HOOK);

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/UnframedGrpcStatusMappingFunction.java
Patch:
@@ -37,7 +37,7 @@ public interface UnframedGrpcStatusMappingFunction {
      * code.proto</a>.
      */
     static UnframedGrpcStatusMappingFunction of() {
-        return (ctx, status, response) -> GrpcStatus.grpcStatusToHttpStatus(status);
+        return (ctx, status, response) -> GrpcStatus.grpcStatusToHttpStatus(ctx, status);
     }
 
     /**

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceServerTest.java
Patch:
@@ -890,8 +890,7 @@ public void onCompleted() {
             assertThat(rpcReq.method()).isEqualTo("StreamClientCancels");
             assertThat(rpcReq.params()).containsExactly(SimpleRequest.getDefaultInstance());
             assertThat(grpcStatus).isNotNull();
-            assertThat(grpcStatus.getCode()).isEqualTo(protocol.startsWith("h2") ? Code.CANCELLED
-                                                                                 : Code.UNKNOWN);
+            assertThat(grpcStatus.getCode()).isEqualTo(Code.CANCELLED);
         });
     }
 

File: core/src/test/java12/com/linecorp/armeria/server/InvalidPathWithDataTest.java
Patch:
@@ -27,9 +27,11 @@
 
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.RequestTarget;
+import com.linecorp.armeria.internal.testing.FlakyTest;
 import com.linecorp.armeria.server.logging.LoggingService;
 import com.linecorp.armeria.testing.junit5.server.ServerExtension;
 
+@FlakyTest
 class InvalidPathWithDataTest {
 
     @RegisterExtension

File: core/src/main/java/com/linecorp/armeria/client/WebClientRequestPreparation.java
Patch:
@@ -240,7 +240,7 @@ public <T> FutureTransformingRequestPreparation<ResponseEntity<T>> asJson(Class<
                                                                               ObjectMapper mapper) {
         requireNonNull(clazz, "clazz");
         requireNonNull(mapper, "mapper");
-        return asEntity(ResponseAs.json(clazz));
+        return asEntity(ResponseAs.json(clazz, mapper));
     }
 
     /**

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlAssertionConsumerFunction.java
Patch:
@@ -87,9 +87,10 @@ final class SamlAssertionConsumerFunction implements SamlServiceFunction {
     @Override
     public HttpResponse serve(ServiceRequestContext ctx, AggregatedHttpRequest req,
                               String defaultHostname, SamlPortConfig portConfig) {
+        MessageContext<Response> messageContext = null;
+
         try {
             final SamlBindingProtocol bindingProtocol = cfg.endpoint().bindingProtocol();
-            final MessageContext<Response> messageContext;
             if (bindingProtocol == SamlBindingProtocol.HTTP_REDIRECT) {
                 messageContext = HttpRedirectBindingUtil.toSamlObject(req, SAML_RESPONSE,
                                                                       idpConfigs, defaultIdpConfig,
@@ -116,7 +117,7 @@ public HttpResponse serve(ServiceRequestContext ctx, AggregatedHttpRequest req,
 
             return ssoHandler.loginSucceeded(ctx, req, messageContext, sessionIndex, relayState);
         } catch (SamlException e) {
-            return ssoHandler.loginFailed(ctx, req, null, e);
+            return ssoHandler.loginFailed(ctx, req, messageContext, e);
         }
     }
 

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcClientBuilder.java
Patch:
@@ -75,6 +75,7 @@
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageFramer;
+import com.linecorp.armeria.internal.common.grpc.UnwrappingGrpcExceptionHandleFunction;
 import com.linecorp.armeria.unsafe.grpc.GrpcUnsafeBufferUtil;
 
 import io.grpc.CallCredentials;
@@ -418,7 +419,8 @@ public <T> T build(Class<T> clientType) {
             option(INTERCEPTORS.newValue(clientInterceptors));
         }
         if (exceptionHandler != null) {
-            option(EXCEPTION_HANDLER.newValue(exceptionHandler));
+            option(EXCEPTION_HANDLER.newValue(new UnwrappingGrpcExceptionHandleFunction(exceptionHandler.orElse(
+                    GrpcExceptionHandlerFunction.of()))));
         }
 
         final Object client;

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcClientOptions.java
Patch:
@@ -37,7 +37,7 @@
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageFramer;
 import com.linecorp.armeria.internal.client.grpc.NullCallCredentials;
 import com.linecorp.armeria.internal.client.grpc.NullGrpcClientStubFactory;
-import com.linecorp.armeria.internal.common.grpc.GrpcStatus;
+import com.linecorp.armeria.internal.common.grpc.UnwrappingGrpcExceptionHandleFunction;
 import com.linecorp.armeria.unsafe.grpc.GrpcUnsafeBufferUtil;
 
 import io.grpc.CallCredentials;
@@ -174,8 +174,8 @@ public final class GrpcClientOptions {
      * to a gRPC {@link Status}.
      */
     public static final ClientOption<GrpcExceptionHandlerFunction> EXCEPTION_HANDLER =
-            ClientOption.define("EXCEPTION_HANDLER",
-                                (ctx, cause, metadata) -> GrpcStatus.fromThrowable(cause));
+            ClientOption.define("EXCEPTION_HANDLER", new UnwrappingGrpcExceptionHandleFunction(
+                    GrpcExceptionHandlerFunction.of()));
 
     /**
      * Sets whether to respect the marshaller specified in gRPC {@link MethodDescriptor}.

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/FramedGrpcService.java
Patch:
@@ -60,7 +60,6 @@
 import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.common.util.TimeoutMode;
-import com.linecorp.armeria.internal.common.grpc.GrpcStatus;
 import com.linecorp.armeria.internal.common.grpc.MetadataUtil;
 import com.linecorp.armeria.internal.common.grpc.TimeoutHeaderUtil;
 import com.linecorp.armeria.internal.server.grpc.AbstractServerCall;
@@ -241,8 +240,7 @@ protected HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req) throws
                     return HttpResponse.of(
                             (ResponseHeaders) AbstractServerCall.statusToTrailers(
                                     ctx, defaultHeaders.get(serializationFormat).toBuilder(),
-                                    GrpcStatus.fromThrowable(exceptionHandler, ctx, e, metadata),
-                                    metadata));
+                                    exceptionHandler.apply(ctx, e, metadata), metadata));
                 }
             } else {
                 if (Boolean.TRUE.equals(ctx.attr(AbstractUnframedGrpcService.IS_UNFRAMED_GRPC))) {

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/HandlerRegistry.java
Patch:
@@ -71,6 +71,7 @@
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.grpc.GrpcExceptionHandlerFunction;
 import com.linecorp.armeria.internal.common.ReflectiveDependencyInjector;
+import com.linecorp.armeria.internal.common.grpc.UnwrappingGrpcExceptionHandleFunction;
 import com.linecorp.armeria.internal.server.annotation.AnnotationUtil;
 import com.linecorp.armeria.internal.server.annotation.DecoratorAnnotationUtil;
 import com.linecorp.armeria.internal.server.annotation.DecoratorAnnotationUtil.DecoratorAndOrder;
@@ -281,7 +282,8 @@ private static void putGrpcExceptionHandlerIfPresent(
             grpcExceptionHandler.ifPresent(exceptionHandler -> {
                 GrpcExceptionHandlerFunction grpcExceptionHandler0 = exceptionHandler;
                 if (defaultExceptionHandler != null) {
-                    grpcExceptionHandler0 = exceptionHandler.orElse(defaultExceptionHandler);
+                    grpcExceptionHandler0 = new UnwrappingGrpcExceptionHandleFunction(
+                            exceptionHandler.orElse(defaultExceptionHandler));
                 }
                 grpcExceptionHandlersBuilder.put(methodDefinition, grpcExceptionHandler0);
             });

File: grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/MetadataUtilTest.java
Patch:
@@ -49,8 +49,8 @@ class MetadataUtilTest {
     private static final Metadata.Key<byte[]> TEST_BIN_KEY =
             Metadata.Key.of("testBinary-bin", Metadata.BINARY_BYTE_MARSHALLER);
 
-    private static final ThrowableProto THROWABLE_PROTO =
-            GrpcStatus.serializeThrowable(new RuntimeException("test"));
+    private static final ThrowableProto THROWABLE_PROTO = GrpcStatus.serializeThrowable(
+            new RuntimeException("test"));
 
     @Test
     void fillHeadersTest() {

File: core/src/main/java/com/linecorp/armeria/client/DefaultClientFactory.java
Patch:
@@ -167,6 +167,9 @@ public ClientFactoryOptions options() {
 
     @Override
     public Object newClient(ClientBuilderParams params) {
+        if (isClosing()) {
+            throw new IllegalStateException("Cannot create a client because the factory is closing.");
+        }
         validateParams(params);
         final Scheme scheme = params.scheme();
         final Class<?> clientType = params.clientType();

File: it/grpc/java/src/test/java/com/linecorp/armeria/grpc/java/ClientHttp2GracefulShutdownTimeoutOverridingTest.java
Patch:
@@ -39,7 +39,7 @@
 class ClientHttp2GracefulShutdownTimeoutOverridingTest {
 
     @Test
-    void idleTimeoutIsUsedForHttp2GracefulShutdownTimeout() throws Exception {
+    void http2GracefulShutdownTimeout() throws Exception {
         final CountDownLatch latch = new CountDownLatch(1);
         final Server server = ServerBuilder.forPort(0)
                                            .addService(new TestSleepService(latch))
@@ -48,7 +48,7 @@ void idleTimeoutIsUsedForHttp2GracefulShutdownTimeout() throws Exception {
 
         try (ClientFactory factory = ClientFactory.builder()
                                                   // Set greater than 40 seconds for HTTP/2 graceful shutdown.
-                                                  .idleTimeout(Duration.ofSeconds(50))
+                                                  .http2GracefulShutdownTimeout(Duration.ofSeconds(50))
                                                   .build()) {
             final TestServiceFutureStub client =
                     GrpcClients.builder("http://127.0.0.1:" + server.getPort())

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java
Patch:
@@ -160,7 +160,8 @@ final class ArmeriaClientCall<I, O> extends ClientCall<I, O>
             SerializationFormat serializationFormat,
             @Nullable GrpcJsonMarshaller jsonMarshaller,
             boolean unsafeWrapResponseBuffers,
-            GrpcExceptionHandlerFunction exceptionHandler) {
+            GrpcExceptionHandlerFunction exceptionHandler,
+            boolean useMethodMarshaller) {
         this.ctx = ctx;
         this.endpointGroup = endpointGroup;
         this.httpClient = httpClient;
@@ -184,7 +185,7 @@ final class ArmeriaClientCall<I, O> extends ClientCall<I, O>
 
         requestFramer = new ArmeriaMessageFramer(ctx.alloc(), maxOutboundMessageSizeBytes, grpcWebText);
         marshaller = new GrpcMessageMarshaller<>(ctx.alloc(), serializationFormat, method, jsonMarshaller,
-                                                 unsafeWrapResponseBuffers);
+                                                 unsafeWrapResponseBuffers, useMethodMarshaller);
 
         if (callOptions.getExecutor() == null) {
             executor = MoreExecutors.directExecutor();

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcClientFactory.java
Patch:
@@ -162,7 +162,6 @@ public Object newClient(ClientBuilderParams params) {
         } else {
             jsonMarshaller = null;
         }
-
         final ArmeriaChannel armeriaChannel =
                 new ArmeriaChannel(newParams, httpClient, meterRegistry(), scheme.sessionProtocol(),
                                    serializationFormat, jsonMarshaller, simpleMethodNames);

File: grpc/src/main/java/com/linecorp/armeria/internal/server/grpc/AbstractServerCall.java
Patch:
@@ -151,7 +151,8 @@ protected AbstractServerCall(HttpRequest req,
                                  ResponseHeaders defaultHeaders,
                                  @Nullable GrpcExceptionHandlerFunction exceptionHandler,
                                  @Nullable Executor blockingExecutor,
-                                 boolean autoCompression) {
+                                 boolean autoCompression,
+                                 boolean useMethodMarshaller) {
         requireNonNull(req, "req");
         this.method = requireNonNull(method, "method");
         this.simpleMethodName = requireNonNull(simpleMethodName, "simpleMethodName");
@@ -170,7 +171,7 @@ protected AbstractServerCall(HttpRequest req,
         clientAcceptEncoding = req.headers().get(GrpcHeaderNames.GRPC_ACCEPT_ENCODING, "");
         this.autoCompression = autoCompression;
         marshaller = new GrpcMessageMarshaller<>(alloc, serializationFormat, method, jsonMarshaller,
-                                                 unsafeWrapRequestBuffers);
+                                                 unsafeWrapRequestBuffers, useMethodMarshaller);
         this.unsafeWrapRequestBuffers = unsafeWrapRequestBuffers;
         this.blockingExecutor = blockingExecutor;
         defaultResponseHeaders = defaultHeaders;

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/StreamingServerCall.java
Patch:
@@ -85,10 +85,11 @@ final class StreamingServerCall<I, O> extends AbstractServerCall<I, O>
                         @Nullable GrpcJsonMarshaller jsonMarshaller, boolean unsafeWrapRequestBuffers,
                         ResponseHeaders defaultHeaders,
                         @Nullable GrpcExceptionHandlerFunction exceptionHandler,
-                        @Nullable Executor blockingExecutor, boolean autoCompress) {
+                        @Nullable Executor blockingExecutor, boolean autoCompress,
+                        boolean useMethodMarshaller) {
         super(req, method, simpleMethodName, compressorRegistry, decompressorRegistry, res,
               maxResponseMessageLength, ctx, serializationFormat, jsonMarshaller, unsafeWrapRequestBuffers,
-              defaultHeaders, exceptionHandler, blockingExecutor, autoCompress);
+              defaultHeaders, exceptionHandler, blockingExecutor, autoCompress, useMethodMarshaller);
         requireNonNull(req, "req");
         this.method = requireNonNull(method, "method");
         this.ctx = requireNonNull(ctx, "ctx");

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/UnaryServerCall.java
Patch:
@@ -72,10 +72,11 @@ final class UnaryServerCall<I, O> extends AbstractServerCall<I, O> {
                     ResponseHeaders defaultHeaders,
                     @Nullable GrpcExceptionHandlerFunction exceptionHandler,
                     @Nullable Executor blockingExecutor,
-                    boolean autoCompress) {
+                    boolean autoCompress,
+                    boolean useMethodMarshaller) {
         super(req, method, simpleMethodName, compressorRegistry, decompressorRegistry, res,
               maxResponseMessageLength, ctx, serializationFormat, jsonMarshaller, unsafeWrapRequestBuffers,
-              defaultHeaders, exceptionHandler, blockingExecutor, autoCompress);
+              defaultHeaders, exceptionHandler, blockingExecutor, autoCompress, useMethodMarshaller);
         requireNonNull(req, "req");
         this.ctx = requireNonNull(ctx, "ctx");
         final boolean grpcWebText = GrpcSerializationFormats.isGrpcWebText(serializationFormat);

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/DeferredListenerTest.java
Patch:
@@ -112,7 +112,7 @@ private static UnaryServerCall<SimpleRequest, SimpleResponse> newServerCall(
                                      DecompressorRegistry.getDefaultInstance(),
                                      HttpResponse.streaming(), new CompletableFuture<>(), 0, 0, ctx,
                                      GrpcSerializationFormats.PROTO, null, false,
-                                     ResponseHeaders.of(200), null, blockingTaskExecutor, false);
+                                     ResponseHeaders.of(200), null, blockingTaskExecutor, false, false);
     }
 
     private static class TestListener extends ServerCall.Listener<SimpleRequest> {

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/StreamingServerCallTest.java
Patch:
@@ -298,6 +298,7 @@ void deferResponseHeaders_streaming_nonResponseMessage() {
                                        .build(),
                         /* exceptionMappings */ null,
                         /* blockingExecutor */ null,
+                        false,
                         false);
 
         final AtomicReference<Subscription> subscriptionRef = new AtomicReference<>();
@@ -367,6 +368,7 @@ private StreamingServerCall<SimpleRequest, SimpleResponse> newServerCall(HttpRes
                                .build(),
                 /* exceptionMappings */ null,
                 /* blockingExecutor */ null,
+                false,
                 false);
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/cors/CorsConfig.java
Patch:
@@ -27,6 +27,7 @@
 import com.google.common.collect.Iterables;
 
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.internal.server.CorsHeaderUtil;
 import com.linecorp.armeria.server.Route;
 import com.linecorp.armeria.server.RoutingContext;
 
@@ -100,7 +101,7 @@ public CorsPolicy getPolicy(@Nullable String origin, RoutingContext routingConte
         }
 
         final String lowerCaseOrigin = Ascii.toLowerCase(origin);
-        final boolean isNullOrigin = CorsService.NULL_ORIGIN.equals(lowerCaseOrigin);
+        final boolean isNullOrigin = CorsHeaderUtil.NULL_ORIGIN.equals(lowerCaseOrigin);
         for (final CorsPolicy policy : policies) {
             if (isNullOrigin && policy.isNullOriginAllowed() &&
                 isPathMatched(policy, routingContext)) {

File: examples/grpc/src/main/java/example/armeria/grpc/Main.java
Patch:
@@ -46,6 +46,7 @@ static void configureServices(ServerBuilder sb) {
                            // See https://github.com/grpc/grpc-java/blob/master/documentation/server-reflection-tutorial.md
                            .addService(ProtoReflectionService.newInstance())
                            .supportedSerializationFormats(GrpcSerializationFormats.values())
+                           .enableHttpJsonTranscoding(true)
                            .enableUnframedRequests(true)
                            // You can set useBlockingTaskExecutor(true) in order to execute all gRPC
                            // methods in the blockingTaskExecutor thread pool.

File: core/src/main/java/com/linecorp/armeria/server/ServiceConfigBuilder.java
Patch:
@@ -333,14 +333,14 @@ ServiceConfig build(ServiceNaming defaultServiceNaming,
                         HttpHeaders virtualHostDefaultHeaders,
                         Function<? super RoutingContext, ? extends RequestId> defaultRequestIdGenerator,
                         ServiceErrorHandler defaultServiceErrorHandler,
-                        @Nullable UnhandledExceptionsReporter unhandledExceptionsReporter,
+                        @Nullable UnloggedExceptionsReporter unloggedExceptionsReporter,
                         String baseContextPath, Supplier<AutoCloseable> contextHook) {
         ServiceErrorHandler errorHandler =
                 serviceErrorHandler != null ? serviceErrorHandler.orElse(defaultServiceErrorHandler)
                                             : defaultServiceErrorHandler;
-        if (unhandledExceptionsReporter != null) {
+        if (unloggedExceptionsReporter != null) {
             errorHandler = new ExceptionReportingServiceErrorHandler(errorHandler,
-                                                                     unhandledExceptionsReporter);
+                                                                     unloggedExceptionsReporter);
         }
 
         final boolean webSocket = service.as(DefaultWebSocketService.class) != null;

File: core/src/main/java/com/linecorp/armeria/server/UnloggedExceptionsReporter.java
Patch:
@@ -18,10 +18,10 @@
 
 import io.micrometer.core.instrument.MeterRegistry;
 
-interface UnhandledExceptionsReporter extends ServerListener {
+interface UnloggedExceptionsReporter extends ServerListener {
 
-    static UnhandledExceptionsReporter of(MeterRegistry meterRegistry, long intervalMillis) {
-        return new DefaultUnhandledExceptionsReporter(meterRegistry, intervalMillis);
+    static UnloggedExceptionsReporter of(MeterRegistry meterRegistry, long intervalMillis) {
+        return new DefaultUnloggedExceptionsReporter(meterRegistry, intervalMillis);
     }
 
     void report(Throwable cause);

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostBuilder.java
Patch:
@@ -1279,7 +1279,7 @@ public VirtualHostBuilder contextHook(Supplier<? extends AutoCloseable> contextH
      * added to this builder.
      */
     VirtualHost build(VirtualHostBuilder template, DependencyInjector dependencyInjector,
-                      @Nullable UnhandledExceptionsReporter unhandledExceptionsReporter,
+                      @Nullable UnloggedExceptionsReporter unloggedExceptionsReporter,
                       ServerErrorHandler serverErrorHandler) {
         requireNonNull(template, "template");
 
@@ -1403,7 +1403,7 @@ VirtualHost build(VirtualHostBuilder template, DependencyInjector dependencyInje
                                             successFunction, requestAutoAbortDelayMillis,
                                             multipartUploadsLocation, serviceWorkerGroup, defaultHeaders,
                                             requestIdGenerator, defaultErrorHandler,
-                                            unhandledExceptionsReporter, baseContextPath, contextHook);
+                                            unloggedExceptionsReporter, baseContextPath, contextHook);
                 }).collect(toImmutableList());
 
         final ServiceConfig fallbackServiceConfig =
@@ -1412,7 +1412,7 @@ VirtualHost build(VirtualHostBuilder template, DependencyInjector dependencyInje
                                accessLogWriter, blockingTaskExecutor, successFunction,
                                requestAutoAbortDelayMillis, multipartUploadsLocation, serviceWorkerGroup,
                                defaultHeaders, requestIdGenerator,
-                               defaultErrorHandler, unhandledExceptionsReporter, "/", contextHook);
+                               defaultErrorHandler, unloggedExceptionsReporter, "/", contextHook);
 
         final ImmutableList.Builder<ShutdownSupport> builder = ImmutableList.builder();
         builder.addAll(shutdownSupports);

File: core/src/main/java/com/linecorp/armeria/server/logging/LoggingService.java
Patch:
@@ -77,7 +77,7 @@ public static LoggingServiceBuilder builder() {
 
     @Override
     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
-        ctx.setShouldReportUnhandledExceptions(false);
+        ctx.setShouldReportUnloggedExceptions(false);
         ctx.log().whenComplete().thenAccept(requestLog -> {
             if (sampler.isSampled(requestLog)) {
                 log(ctx, requestLog, logWriter);

File: core/src/test/java/com/linecorp/armeria/server/DefaultUnhandledExceptionReporterTest.java
Patch:
@@ -41,7 +41,7 @@ class DefaultUnhandledExceptionReporterTest {
     @Spy
     final ListAppender<ILoggingEvent> logAppender = new ListAppender<>();
     final Logger errorHandlerLogger =
-            (Logger) LoggerFactory.getLogger(DefaultUnhandledExceptionsReporter.class);
+            (Logger) LoggerFactory.getLogger(DefaultUnloggedExceptionsReporter.class);
     private static final long reportIntervalMillis = 1000;
     private static final long awaitIntervalMillis = 2000;
     private static volatile boolean throwNonIgnorableException;
@@ -87,7 +87,7 @@ protected void configure(ServerBuilder sb) {
               .build((ctx, req) -> {
                   throw HttpStatusException.of(HttpStatus.BAD_REQUEST);
               });
-            sb.unhandledExceptionsReportInterval(Duration.ofMillis(reportIntervalMillis));
+            sb.unloggedExceptionsReportInterval(Duration.ofMillis(reportIntervalMillis));
         }
     };
 

File: core/src/test/java/com/linecorp/armeria/server/ServiceRequestContextTest.java
Patch:
@@ -198,7 +198,7 @@ void queryParams() {
     @Test
     void defaultServiceRequestContextShouldLogExceptions() {
         final ServiceRequestContext sctx = serviceRequestContext();
-        assertThat(sctx.shouldReportUnhandledExceptions()).isTrue();
+        assertThat(sctx.shouldReportUnloggedExceptions()).isTrue();
     }
 
     private static void assertUnwrapAllCurrentCtx(@Nullable RequestContext ctx) {

File: core/src/test/java/com/linecorp/armeria/server/logging/AccessLoggerIntegrationTest.java
Patch:
@@ -17,6 +17,7 @@
 package com.linecorp.armeria.server.logging;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.awaitility.Awaitility.await;
 
 import java.util.concurrent.atomic.AtomicReference;
 
@@ -59,6 +60,7 @@ void testAccessLogger() throws Exception {
         assertThat(server.blockingWebClient().get("/").status().code()).isEqualTo(200);
         assertThat(server.requestContextCaptor().size()).isEqualTo(1);
         final ServiceRequestContext ctx = server.requestContextCaptor().poll();
-        assertThat(CTX_REF).hasValue(ctx);
+        assertThat(ctx).isNotNull();
+        await().untilAsserted(() -> assertThat(CTX_REF).hasValue(ctx));
     }
 }

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceElement.java
Patch:
@@ -24,6 +24,7 @@
 
 import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.Route;
+import com.linecorp.armeria.server.annotation.AnnotatedService;
 
 /**
  * Details of an annotated HTTP service method.
@@ -32,12 +33,12 @@ public final class AnnotatedServiceElement {
 
     private final Route route;
 
-    private final AnnotatedService service;
+    private final DefaultAnnotatedService service;
 
     private final Function<? super HttpService, ? extends HttpService> decorator;
 
     AnnotatedServiceElement(Route route,
-                            AnnotatedService service,
+                            DefaultAnnotatedService service,
                             Function<? super HttpService, ? extends HttpService> decorator) {
         this.route = requireNonNull(route, "route");
         this.service = requireNonNull(service, "service");

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java
Patch:
@@ -84,6 +84,7 @@
 import com.linecorp.armeria.internal.server.FileAggregatedMultipart;
 import com.linecorp.armeria.internal.server.annotation.AnnotatedBeanFactoryRegistry.BeanFactoryId;
 import com.linecorp.armeria.server.ServiceRequestContext;
+import com.linecorp.armeria.server.annotation.AnnotatedService;
 import com.linecorp.armeria.server.annotation.ByteArrayRequestConverterFunction;
 import com.linecorp.armeria.server.annotation.Default;
 import com.linecorp.armeria.server.annotation.Delimiter;

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/HttpResultUtil.java
Patch:
@@ -23,6 +23,7 @@
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.ResponseHeadersBuilder;
 import com.linecorp.armeria.server.ServiceRequestContext;
+import com.linecorp.armeria.server.annotation.AnnotatedService;
 import com.linecorp.armeria.server.annotation.HttpResult;
 
 final class HttpResultUtil {

File: core/src/main/java/com/linecorp/armeria/server/ContextPathAnnotatedServiceConfigSetters.java
Patch:
@@ -27,7 +27,7 @@
 import com.linecorp.armeria.common.SuccessFunction;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.util.BlockingTaskExecutor;
-import com.linecorp.armeria.internal.server.annotation.AnnotatedService;
+import com.linecorp.armeria.server.annotation.AnnotatedService;
 import com.linecorp.armeria.server.annotation.ExceptionHandlerFunction;
 import com.linecorp.armeria.server.annotation.RequestConverterFunction;
 import com.linecorp.armeria.server.annotation.ResponseConverterFunction;

File: core/src/main/java/com/linecorp/armeria/server/DefaultServerErrorHandler.java
Patch:
@@ -33,7 +33,7 @@
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;
-import com.linecorp.armeria.internal.server.annotation.AnnotatedService;
+import com.linecorp.armeria.server.annotation.AnnotatedService;
 
 /**
  * The default {@link ServerErrorHandler} that is used when a user didn't specify one.

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostContextPathAnnotatedServiceConfigSetters.java
Patch:
@@ -26,7 +26,7 @@
 import com.linecorp.armeria.common.SuccessFunction;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.util.BlockingTaskExecutor;
-import com.linecorp.armeria.internal.server.annotation.AnnotatedService;
+import com.linecorp.armeria.server.annotation.AnnotatedService;
 import com.linecorp.armeria.server.annotation.ExceptionHandlerFunction;
 import com.linecorp.armeria.server.annotation.RequestConverterFunction;
 import com.linecorp.armeria.server.annotation.ResponseConverterFunction;

File: kotlin/src/main/java/com/linecorp/armeria/common/kotlin/CoroutineContexts.java
Patch:
@@ -20,7 +20,7 @@
 
 import com.linecorp.armeria.common.RequestContext;
 import com.linecorp.armeria.common.annotation.Nullable;
-import com.linecorp.armeria.internal.server.annotation.AnnotatedService;
+import com.linecorp.armeria.server.annotation.AnnotatedService;
 import com.linecorp.armeria.server.kotlin.CoroutineContextService;
 
 import io.netty.util.AttributeKey;

File: core/src/main/java/com/linecorp/armeria/common/logging/ClientConnectionTimingsBuilder.java
Patch:
@@ -77,7 +77,7 @@ public ClientConnectionTimingsBuilder socketConnectStart() {
      * @throws IllegalStateException if {@link #socketConnectStart()} is not invoked before calling this.
      */
     public ClientConnectionTimingsBuilder socketConnectEnd() {
-        checkState(socketConnectStartTimeMicros >= 0, "socketConnectStart() is not called yet.");
+        checkState(socketConnectStartTimeMicros > 0, "socketConnectStart() is not called yet.");
         checkState(!socketConnectEndSet, "socketConnectEnd() is already called.");
         socketConnectEndNanos = System.nanoTime();
         socketConnectEndSet = true;
@@ -103,7 +103,7 @@ public ClientConnectionTimingsBuilder pendingAcquisitionStart() {
      * @throws IllegalStateException if {@link #pendingAcquisitionStart()} is not invoked before calling this.
      */
     public ClientConnectionTimingsBuilder pendingAcquisitionEnd() {
-        checkState(pendingAcquisitionStartTimeMicros >= 0, "pendingAcquisitionStart() is not called yet.");
+        checkState(pendingAcquisitionStartTimeMicros > 0, "pendingAcquisitionStart() is not called yet.");
         pendingAcquisitionEndNanos = System.nanoTime();
         pendingAcquisitionEndSet = true;
         return this;

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcStatusDetailsBinHeaderTest.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.linecorp.armeria.server.grpc;
 
+import static com.linecorp.armeria.server.grpc.JsonUnframedGrpcErrorHandler.decodeGrpcStatusDetailsBin;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import org.junit.jupiter.api.Test;
@@ -98,7 +99,7 @@ void googleRpcErrorDetail() throws InvalidProtocolBufferException {
                       .post(TestServiceGrpc.getEmptyCallMethod().getFullMethodName())
                       .content(MediaType.PROTOBUF, Empty.getDefaultInstance().toByteArray())
                       .execute();
-        final Status status = UnframedGrpcErrorHandlers.decodeGrpcStatusDetailsBin(
+        final Status status = decodeGrpcStatusDetailsBin(
                 response.headers().get(GrpcHeaderNames.GRPC_STATUS_DETAILS_BIN));
         assertThat(status).isEqualTo(googleRpcStatus);
         assertThat(response.trailers()).isEmpty();

File: xds/src/test/java/com/linecorp/armeria/xds/client/endpoint/XdsConverterUtilTest.java
Patch:
@@ -83,7 +83,7 @@ static Struct struct(Map<String, String> map) {
         return Struct.newBuilder().putAllFields(structMap).build();
     }
 
-    static ClusterLoadAssignment sampleClusterLoadAssignment() {
+    static ClusterLoadAssignment sampleClusterLoadAssignment(String clusterName) {
         final Metadata metadata1 =
                 Metadata.newBuilder()
                         .putFilterMetadata(SUBSET_LOAD_BALANCING_FILTER_NAME,
@@ -118,7 +118,7 @@ static ClusterLoadAssignment sampleClusterLoadAssignment() {
                                    .addLbEndpoints(endpoint3)
                                    .build();
         return ClusterLoadAssignment.newBuilder()
-                            .setClusterName("cluster")
+                            .setClusterName(clusterName)
                             .addEndpoints(lbEndpoints)
                             .build();
     }

File: core/src/main/java/com/linecorp/armeria/server/AbstractHttpResponseHandler.java
Patch:
@@ -212,7 +212,7 @@ final AggregatedHttpResponse toAggregatedHttpResponse(HttpStatusException cause)
         final Throwable cause0 = firstNonNull(cause.getCause(), cause);
         final ServiceConfig serviceConfig = reqCtx.config();
         final AggregatedHttpResponse response = serviceConfig.errorHandler()
-                                                             .renderStatus(serviceConfig, req.headers(), status,
+                                                             .renderStatus(reqCtx, req.headers(), status,
                                                                            null, cause0);
         assert response != null;
         return response;

File: core/src/main/java/com/linecorp/armeria/server/ExceptionReportingServiceErrorHandler.java
Patch:
@@ -52,9 +52,9 @@ private static boolean isIgnorableException(Throwable cause) {
 
     @Nullable
     @Override
-    public AggregatedHttpResponse renderStatus(ServiceConfig config, @Nullable RequestHeaders headers,
+    public AggregatedHttpResponse renderStatus(ServiceRequestContext ctx, RequestHeaders headers,
                                                HttpStatus status, @Nullable String description,
                                                @Nullable Throwable cause) {
-        return delegate.renderStatus(config, headers, status, description, cause);
+        return delegate.renderStatus(ctx, headers, status, description, cause);
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/FallbackService.java
Patch:
@@ -92,7 +92,7 @@ private static HttpResponse handleNotFound(ServiceRequestContext ctx, RoutingCon
 
     private static HttpResponse newFallbackResponse(ServiceRequestContext ctx, HttpStatus status) {
         final ServiceErrorHandler errorHandler = ctx.config().errorHandler();
-        final AggregatedHttpResponse rendered = errorHandler.renderStatus(ctx.config(),
+        final AggregatedHttpResponse rendered = errorHandler.renderStatus(ctx,
                                                                           ctx.request().headers(),
                                                                           status,
                                                                           null,

File: core/src/main/java/com/linecorp/armeria/server/ServiceErrorHandler.java
Patch:
@@ -88,7 +88,7 @@ public interface ServiceErrorHandler {
      * in the invocation chain will be used as a fallback (See {@link #orElse(ServiceErrorHandler)}
      * for more information).
      *
-     * @param config the {@link ServiceConfig} that provides the configuration properties.
+     * @param ctx the {@link ServiceRequestContext} of the request being handled.
      * @param headers the received {@link RequestHeaders}.
      * @param status the desired {@link HttpStatus} of the error response.
      * @param description an optional human-readable description of the error.
@@ -99,7 +99,7 @@ public interface ServiceErrorHandler {
      *         {@link #orElse(ServiceErrorHandler)} handle the event.
      */
     @Nullable
-    default AggregatedHttpResponse renderStatus(ServiceConfig config,
+    default AggregatedHttpResponse renderStatus(ServiceRequestContext ctx,
                                                 RequestHeaders headers,
                                                 HttpStatus status,
                                                 @Nullable String description,

File: core/src/test/java/com/linecorp/armeria/server/ServiceErrorHandlerTest.java
Patch:
@@ -49,7 +49,7 @@ protected void configure(ServerBuilder sb) {
             sb.service("/baz", (ctx, req) -> {
                 throw new RuntimeException();
             });
-            sb.errorHandler(((ctx, cause) -> HttpResponse.of(HttpStatus.NO_CONTENT)));
+            sb.errorHandler((ctx, cause) -> HttpResponse.of(HttpStatus.NO_CONTENT));
         }
     };
 

File: core/src/test/java/com/linecorp/armeria/internal/common/DefaultRequestTargetTest.java
Patch:
@@ -461,7 +461,7 @@ void shouldAcceptAsteriskPath(Mode mode) {
             "a://b?c#d,      a, b, /, c, d",
             "a://b#c?d,      a, b, /,, c?d",
             // Userinfo and port in authority
-            "a://b@c:80,     a, b@c:80, /,,",
+            "a://b@c:80,     a, c:80, /,,",
             // IP addresses
             "a://127.0.0.1/, a, 127.0.0.1, /,,",
             "a://[::1]:80/,  a, [::1]:80, /,,",

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceFactory.java
Patch:
@@ -591,7 +591,7 @@ private static Map<HttpMethod, List<String>> getHttpMethodAnnotatedPatternMap(
      */
     static DescriptionInfo findDescription(AnnotatedElement annotatedElement) {
         requireNonNull(annotatedElement, "annotatedElement");
-        final Description description = AnnotationUtil.findFirst(annotatedElement, Description.class);
+        final Description description = AnnotationUtil.findFirstDescription(annotatedElement);
         if (description != null) {
             final String value = description.value();
             if (DefaultValues.isSpecified(value)) {

File: core/src/main/java/com/linecorp/armeria/internal/common/stream/AbstractFixedStreamMessage.java
Patch:
@@ -151,7 +151,7 @@ public final void cancel() {
     }
 
     @Override
-    public final void abort() {
+    public void abort() {
         if (isDone()) {
             return;
         }
@@ -160,7 +160,7 @@ public final void abort() {
     }
 
     @Override
-    public final void abort(Throwable cause) {
+    public void abort(Throwable cause) {
         if (isDone()) {
             return;
         }

File: core/src/main/java/com/linecorp/armeria/server/AbstractHttpResponseHandler.java
Patch:
@@ -274,6 +274,7 @@ public void run(Throwable cause) {
                     // A stream or connection was already closed by a client
                     fail(cause);
                 } else {
+                    req.setShouldResetOnlyIfRemoteIsOpen(true);
                     req.abortResponse(cause, false);
                 }
             }

File: core/src/test/java/com/linecorp/armeria/server/ExceedingServiceMaxContentLengthTest.java
Patch:
@@ -103,7 +103,9 @@ public String formatResponse(RequestLog log) {
             sb.service("/unary", new HttpService() {
                 @Override
                 public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
-                    return HttpResponse.of("Hello, world!");
+                    return HttpResponse.of(req.aggregate().thenApply(agg -> {
+                        return HttpResponse.of("Hello, world!");
+                    }));
                 }
 
                 @Override

File: core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java
Patch:
@@ -43,6 +43,7 @@
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.internal.client.dns.DefaultDnsResolver;
 import com.linecorp.armeria.internal.client.dns.DnsQuestionWithoutTrailingDot;
+import com.linecorp.armeria.internal.client.dns.DnsUtil;
 
 import io.netty.channel.EventLoop;
 import io.netty.handler.codec.dns.DnsQuestion;
@@ -298,7 +299,7 @@ final class CacheEntry {
                 //                because Netty can change the behavior while we are not noticing that.
                 //                So sending a PR to upstream would be the best solution.
                 final UnknownHostException unknownHostException = (UnknownHostException) cause;
-                cacheable = unknownHostException.getCause() == null;
+                cacheable = !DnsUtil.isDnsQueryTimedOut(unknownHostException.getCause());
 
                 if (cacheable) {
                     negativeCacheFuture = executor().schedule(() -> addressResolverCache.invalidate(hostname),

File: core/src/test/java/com/linecorp/armeria/client/RefreshingAddressResolverTest.java
Patch:
@@ -69,6 +69,7 @@
 import io.netty.handler.codec.dns.DnsSection;
 import io.netty.resolver.AddressResolver;
 import io.netty.resolver.ResolvedAddressTypes;
+import io.netty.resolver.dns.DnsErrorCauseException;
 import io.netty.resolver.dns.DnsServerAddressStreamProvider;
 import io.netty.resolver.dns.DnsServerAddresses;
 import io.netty.util.NetUtil;
@@ -281,7 +282,7 @@ void negativeTtl() {
                         InetSocketAddress.createUnresolved("foo.com", 36462));
                 await().until(future2::isDone);
                 assertThat(future2.cause()).isInstanceOf(UnknownHostException.class)
-                                           .hasNoCause();
+                                           .hasCauseInstanceOf(DnsErrorCauseException.class);
                 // Because it is NXDOMAIN, the result is cached.
                 assertThat(cache.estimatedSize()).isOne();
             }

File: oauth2/src/test/java/com/linecorp/armeria/internal/common/auth/oauth2/MockOAuth2Service.java
Patch:
@@ -42,6 +42,7 @@ public abstract class MockOAuth2Service {
 
     public static final String INVALID_REQUEST = "{\"error\":\"invalid_request\"}";
     public static final String INVALID_CLIENT = "{\"error\":\"invalid_client\"}";
+    public static final String INVALID_GRANT = "{\"error\":\"invalid_grant\"}";
     public static final String NOT_ACTIVE_RESPONSE = "{\"active\":false}";
     public static final String UNSUPPORTED_GRANT_TYPE = "{\"error\":\"unsupported_grant_type\"}";
     public static final String UNAUTHORIZED_CLIENT = "{\"error\":\"unauthorized_client\"}";

File: oauth2/src/test/java/com/linecorp/armeria/server/auth/oauth2/OAuth2AuthorizationFailureHandlerTest.java
Patch:
@@ -33,7 +33,7 @@
 import com.linecorp.armeria.server.AbstractHttpService;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
-public class OAuth2AuthorizationFailureHandlerTest {
+class OAuth2AuthorizationFailureHandlerTest {
 
     @Test
     void testInvalidRequest() throws Exception {

File: kubernetes/src/main/java/com/linecorp/armeria/client/kubernetes/ArmeriaHttpClient.java
Patch:
@@ -93,7 +93,7 @@ public CompletableFuture<HttpResponse<AsyncBody>> consumeBytesDirect(
         return splitResponse.headers().thenApply(responseHeaders -> {
             final AsyncBodySubscriber subscriber = new AsyncBodySubscriber(consumer);
             splitResponse.body().subscribe(subscriber, ctx.eventLoop());
-            return new ArmeriaHttpResponse(responseHeaders, subscriber);
+            return new ArmeriaHttpResponse(request, responseHeaders, subscriber);
         });
     }
 

File: kubernetes/src/main/java/com/linecorp/armeria/client/kubernetes/package-info.java
Patch:
@@ -5,7 +5,7 @@
  * version 2.0 (the "License"); you may not use this file except in compliance
  * with the License. You may obtain a copy of the License at:
  *
- * https://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT

File: kubernetes/src/test/java/com/linecorp/armeria/client/kubernetes/ArmeriaHttpInterceptorTest.java
Patch:
@@ -37,6 +37,7 @@
 
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.DisplayName;
 import org.junit.jupiter.api.Test;
 
@@ -47,6 +48,8 @@
 import io.fabric8.kubernetes.client.http.Interceptor;
 import io.fabric8.mockwebserver.DefaultMockServer;
 
+// Remove @Disabled when https://github.com/fabric8io/kubernetes-client/pull/5852 is merged and released.
+@Disabled
 class ArmeriaHttpInterceptorTest extends AbstractInterceptorTest {
 
     private static DefaultMockServer mockServer;

File: testing-internal/src/main/java/com/linecorp/armeria/internal/testing/InternalTestingBlockHoundIntegration.java
Patch:
@@ -74,6 +74,7 @@ public void applyTo(Builder builder) {
                 "com.linecorp.armeria.internal.testing.InternalTestingBlockHoundIntegration",
                 "writeBlockingMethod");
         builder.allowBlockingCallsInside("com.linecorp.armeria.client.ClientFactory", "ofDefault");
+        builder.allowBlockingCallsInside("io.envoyproxy.controlplane.cache.SimpleCache", "createWatch");
 
         // prints the exception which makes it easier to debug issues
         builder.blockingMethodCallback(this::writeBlockingMethod);

File: grpc/src/main/java/com/linecorp/armeria/internal/common/grpc/GrpcStatus.java
Patch:
@@ -137,6 +137,9 @@ private static Status statusFromThrowable(Throwable t) {
         if (t instanceof ClosedStreamException || t instanceof RequestTimeoutException) {
             return Status.CANCELLED.withCause(t);
         }
+        if (t instanceof InvalidProtocolBufferException) {
+            return Status.INVALID_ARGUMENT.withCause(t);
+        }
         if (t instanceof UnprocessedRequestException ||
             t instanceof IOException ||
             t instanceof FailFastException) {

File: spring/boot3-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/ArmeriaConfigurationUtil.java
Patch:
@@ -64,6 +64,7 @@
 import com.linecorp.armeria.common.metric.MeterIdPrefixFunction;
 import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.ServerBuilder;
+import com.linecorp.armeria.server.ServerErrorHandler;
 import com.linecorp.armeria.server.encoding.EncodingService;
 import com.linecorp.armeria.server.metric.MetricCollectingService;
 import com.linecorp.armeria.server.metric.MetricCollectingServiceBuilder;
@@ -110,6 +111,7 @@ public static void configureServerWithArmeriaSettings(
             MeterIdPrefixFunction meterIdPrefixFunction,
             List<MetricCollectingServiceConfigurator> metricCollectingServiceConfigurators,
             List<DependencyInjector> dependencyInjectors,
+            List<ServerErrorHandler> serverErrorHandlers,
             BeanFactory beanFactory) {
 
         requireNonNull(server, "server");
@@ -203,6 +205,7 @@ public static void configureServerWithArmeriaSettings(
         if (settings.isEnableAutoInjection()) {
             server.dependencyInjector(SpringDependencyInjector.of(beanFactory), false);
         }
+        serverErrorHandlers.forEach(server::errorHandler);
     }
 
     private static void configureInternalService(ServerBuilder server, InternalServiceId serviceId,

File: spring/boot3-autoconfigure/src/main/java/com/linecorp/armeria/spring/AbstractArmeriaAutoConfiguration.java
Patch:
@@ -40,6 +40,7 @@
 import com.linecorp.armeria.common.metric.MeterIdPrefixFunction;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerBuilder;
+import com.linecorp.armeria.server.ServerErrorHandler;
 import com.linecorp.armeria.server.ServerPort;
 import com.linecorp.armeria.server.docs.DocService;
 import com.linecorp.armeria.server.healthcheck.HealthCheckService;
@@ -73,6 +74,7 @@ public Server armeriaServer(
             Optional<List<ArmeriaServerConfigurator>> armeriaServerConfigurators,
             Optional<List<Consumer<ServerBuilder>>> armeriaServerBuilderConsumers,
             Optional<List<DependencyInjector>> dependencyInjectors,
+            Optional<List<ServerErrorHandler>> serverErrorHandlers,
             BeanFactory beanFactory) {
 
         if (!armeriaServerConfigurators.isPresent() &&
@@ -98,6 +100,7 @@ public Server armeriaServer(
                                                    MeterIdPrefixFunction.ofDefault("armeria.server")),
                                            metricCollectingServiceConfigurators.orElse(ImmutableList.of()),
                                            dependencyInjectors.orElse(ImmutableList.of()),
+                                           serverErrorHandlers.orElse(ImmutableList.of()),
                                            beanFactory);
 
         return serverBuilder.build();

File: spring/boot3-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java
Patch:
@@ -64,6 +64,7 @@
 import com.linecorp.armeria.server.Route;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerBuilder;
+import com.linecorp.armeria.server.ServerErrorHandler;
 import com.linecorp.armeria.server.ServerPort;
 import com.linecorp.armeria.spring.ArmeriaServerConfigurator;
 import com.linecorp.armeria.spring.ArmeriaSettings;
@@ -167,6 +168,7 @@ public WebServer getWebServer(HttpHandler httpHandler) {
                                                meterIdPrefixFunctionOrDefault(),
                                                findBeans(MetricCollectingServiceConfigurator.class),
                                                findBeans(DependencyInjector.class),
+                                               findBeans(ServerErrorHandler.class),
                                                beanFactory);
         }
 

File: core/src/test/java/com/linecorp/armeria/server/ServerBuilderTest.java
Patch:
@@ -361,8 +361,8 @@ void serviceConfigurationPriority() {
                                                           Duration.ofMillis(250),
                                                           ctx.eventLoop())))
                                     .withVirtualHost(
-                                            h -> h.hostnamePattern("foo.com")
-                                                  .service("/custom_virtual_host",
+                                            "foo.com",
+                                            h -> h.service("/custom_virtual_host",
                                                            (ctx, req) -> HttpResponse.delayed(
                                                                    HttpResponse.of(HttpStatus.OK),
                                                                    Duration.ofMillis(150),

File: xds/src/main/java/com/linecorp/armeria/xds/ListenerResourceNode.java
Patch:
@@ -54,7 +54,8 @@ public void doOnChanged(ListenerXdsResource resource) {
             if (connectionManager.hasRds()) {
                 final Rds rds = connectionManager.getRds();
                 final String routeName = rds.getRouteConfigName();
-                final ConfigSource configSource = rds.getConfigSource();
+                final ConfigSource configSource = configSourceMapper()
+                        .rdsConfigSource(rds.getConfigSource(), routeName);
                 final RouteResourceNode routeResourceNode =
                         new RouteResourceNode(configSource, routeName, xdsBootstrap(), resource,
                                               snapshotWatcher, ResourceNodeType.DYNAMIC);

File: xds/src/main/java/com/linecorp/armeria/xds/RouteResourceNode.java
Patch:
@@ -80,7 +80,9 @@ public void doOnChanged(RouteXdsResource resource) {
                                          route, index++, cluster);
                     children().add(node);
                 } else {
-                    node = new ClusterResourceNode(null, clusterName, xdsBootstrap(),
+                    final ConfigSource configSource =
+                            configSourceMapper().cdsConfigSource(null, clusterName);
+                    node = new ClusterResourceNode(configSource, clusterName, xdsBootstrap(),
                                                    resource, snapshotWatcher, virtualHost, route,
                                                    index++, ResourceNodeType.DYNAMIC);
                     children().add(node);

File: xds/src/main/java/com/linecorp/armeria/xds/XdsConverterUtil.java
Patch:
@@ -32,8 +32,9 @@ static void validateConfigSource(@Nullable ConfigSource configSource) {
         if (configSource == null || configSource.equals(ConfigSource.getDefaultInstance())) {
             return;
         }
-        checkArgument(configSource.hasAds() || configSource.hasApiConfigSource(),
-                      "Only configSource with Ads or ApiConfigSource is supported for %s", configSource);
+        checkArgument(configSource.hasAds() || configSource.hasApiConfigSource() || configSource.hasSelf(),
+                      "Only one of (Ads, ApiConfigSource, or Self) type ConfigSource is supported for %s",
+                      configSource);
         if (configSource.hasApiConfigSource()) {
             final ApiConfigSource apiConfigSource = configSource.getApiConfigSource();
             final ApiType apiType = apiConfigSource.getApiType();

File: core/src/main/java/com/linecorp/armeria/internal/common/util/SslContextUtil.java
Patch:
@@ -103,7 +103,7 @@ public static SslContext createSslContext(
 
         return MinifiedBouncyCastleProvider.call(() -> {
             final SslContextBuilder builder = builderSupplier.get();
-            final SslProvider provider = Flags.useOpenSsl() ? SslProvider.OPENSSL : SslProvider.JDK;
+            final SslProvider provider = Flags.tlsEngineType().sslProvider();
             builder.sslProvider(provider);
 
             final Set<String> supportedProtocols = supportedProtocols(builder);
@@ -147,7 +147,7 @@ public static SslContext createSslContext(
                            "You must specify at least one cipher suite.");
 
                 if (forceHttp1) {
-                   // Skip validation
+                    // Skip validation
                 } else {
                     validateHttp2Ciphers(ciphers, tlsAllowUnsafeCiphers);
                 }

File: core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java
Patch:
@@ -90,6 +90,7 @@
 import com.linecorp.armeria.common.util.EventLoopGroups;
 import com.linecorp.armeria.common.util.SystemInfo;
 import com.linecorp.armeria.common.util.ThreadFactories;
+import com.linecorp.armeria.common.util.TlsEngineType;
 import com.linecorp.armeria.internal.common.BuiltInDependencyInjector;
 import com.linecorp.armeria.internal.common.ReflectiveDependencyInjector;
 import com.linecorp.armeria.internal.common.RequestContextUtil;
@@ -2181,7 +2182,7 @@ private DefaultServerConfig buildServerConfig(List<ServerPort> serverPorts) {
                 ports = ImmutableList.of(new ServerPort(0, HTTP));
             }
         } else {
-            if (!Flags.useOpenSsl() && !SystemInfo.jettyAlpnOptionalOrAvailable()) {
+            if (Flags.tlsEngineType() != TlsEngineType.OPENSSL && !SystemInfo.jettyAlpnOptionalOrAvailable()) {
                 throw new IllegalStateException(
                         "TLS configured but this is Java 8 and neither OpenSSL nor Jetty ALPN could be " +
                         "detected. To use TLS with Armeria, you must either use Java 9+, enable OpenSSL, " +

File: core/src/test/java/com/linecorp/armeria/internal/common/util/SslContextUtilTest.java
Patch:
@@ -43,7 +43,6 @@ class SslContextUtilTest {
 
     @Test
     void openSsl() {
-        assumeThat(Flags.useOpenSsl()).isTrue();
         final Set<String> supportedProtocols = SslContextUtil.supportedProtocols(
                 SslContextBuilder.forClient().sslProvider(SslProvider.OPENSSL));
         assertThat(supportedProtocols).contains("TLSv1.2", "TLSv1.3");
@@ -88,7 +87,7 @@ private static String getBadCipher() {
             try {
                 final SslContext sslCtx = MinifiedBouncyCastleProvider.call(() -> {
                     final SslContextBuilder builder = SslContextBuilder.forClient();
-                    final SslProvider provider = Flags.useOpenSsl() ? SslProvider.OPENSSL : SslProvider.JDK;
+                    final SslProvider provider = Flags.tlsEngineType().sslProvider();
                     builder.sslProvider(provider);
                     builder.protocols("TLSv1.2").ciphers(ImmutableList.of(cipher));
 

File: grpc/src/main/java/com/linecorp/armeria/internal/server/grpc/AbstractServerCall.java
Patch:
@@ -562,7 +562,7 @@ public static HttpHeaders statusToTrailers(
                     .build();
         }
         GrpcTrailersUtil.addStatusMessageToTrailers(
-                trailersBuilder, status.getCode().value(), status.getDescription());
+                trailersBuilder, status.getCode().value(), status.getDescription(), null);
 
         if (ctx.config().verboseResponses() && status.getCause() != null) {
             final ThrowableProto proto = GrpcStatus.serializeThrowable(status.getCause());

File: grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcWebTextTest.java
Patch:
@@ -142,7 +142,7 @@ private static void writeEncodedMessageAcrossFrames(
 
         private static void writeTrailers(ServiceRequestContext ctx, HttpResponseWriter streaming) {
             final HttpHeadersBuilder trailersBuilder = HttpHeaders.builder();
-            GrpcTrailersUtil.addStatusMessageToTrailers(trailersBuilder, StatusCodes.OK, null);
+            GrpcTrailersUtil.addStatusMessageToTrailers(trailersBuilder, StatusCodes.OK, null, null);
             final ByteBuf serializedTrailers =
                     GrpcTrailersUtil.serializeTrailersAsMessage(ctx.alloc(), trailersBuilder.build());
             final HttpData httpdataTrailers = HttpData.wrap(

File: grpc/src/test/java/com/linecorp/armeria/client/grpc/protocol/UnaryGrpcClientTest.java
Patch:
@@ -20,6 +20,7 @@
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
+import java.net.URI;
 import java.nio.charset.StandardCharsets;
 import java.util.concurrent.CompletionException;
 import java.util.stream.Stream;
@@ -81,8 +82,8 @@ private static SimpleRequest buildRequest(String payload) {
                             .build();
     }
 
-    private static String getUri(SerializationFormat serializationFormat) {
-        return String.format("%s+%s", serializationFormat, server.httpUri());
+    private static URI getUri(SerializationFormat serializationFormat) {
+        return server.httpUri(serializationFormat);
     }
 
     @ParameterizedTest

File: grpc/src/test/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramerTest.java
Patch:
@@ -209,7 +209,7 @@ void tooLargeCompressed() {
     private static ByteBuf serializedTrailers() {
         final ResponseHeadersBuilder trailersBuilder = ResponseHeaders.builder(200).contentType(
                 GrpcSerializationFormats.PROTO.mediaType());
-        GrpcTrailersUtil.addStatusMessageToTrailers(trailersBuilder, StatusCodes.OK, null);
+        GrpcTrailersUtil.addStatusMessageToTrailers(trailersBuilder, StatusCodes.OK, null, null);
         return serializeTrailersAsMessage(ByteBufAllocator.DEFAULT, trailersBuilder.build());
     }
 }

File: core/src/test/java/com/linecorp/armeria/server/logging/LoggingServiceTest.java
Patch:
@@ -635,7 +635,7 @@ void responseCauseFilter() throws Exception {
                 LoggingService.builder()
                               .logWriter(LogWriter.builder()
                                                   .logger(logger)
-                                                  .responseCauseFilter(throwable -> true)
+                                                  .responseCauseFilter((unused, throwable) -> true)
                                                   .build())
                               .newDecorator().apply(delegate);
 

File: xds/src/main/java/com/linecorp/armeria/xds/ConfigSourceClient.java
Patch:
@@ -113,7 +113,7 @@ boolean removeSubscriber(XdsType type, String resourceName,
     @Override
     public void close() {
         stream.close();
-        endpointGroup.close();
+        endpointGroup.closeAsync();
         subscriberStorage.close();
     }
 

File: core/src/main/java/com/linecorp/armeria/common/AbstractRequestContextBuilder.java
Patch:
@@ -154,7 +154,7 @@ protected AbstractRequestContextBuilder(boolean server, RpcRequest rpcReq, URI u
             this.reqTarget = reqTarget;
         } else {
             reqTarget = DefaultRequestTarget.createWithoutValidation(
-                    RequestTargetForm.ORIGIN, null, null,
+                    RequestTargetForm.ORIGIN, null, null, null, -1,
                     uri.getRawPath(), uri.getRawPath(), uri.getRawQuery(), uri.getRawFragment());
         }
     }

File: core/src/main/java/com/linecorp/armeria/internal/common/NonWrappingRequestContext.java
Patch:
@@ -69,6 +69,7 @@ public abstract class NonWrappingRequestContext implements RequestContextExtensi
 
     @Nullable
     private String decodedPath;
+
     private final Request originalRequest;
     @Nullable
     private volatile HttpRequest req;

File: core/src/main/java/com/linecorp/armeria/server/Server.java
Patch:
@@ -144,7 +144,9 @@ public static ServerBuilder builder() {
 
         // Invoke the serviceAdded() method in Service so that it can keep the reference to this Server or
         // add a listener to it.
-        config.serviceConfigs().forEach(cfg -> ServiceCallbackInvoker.invokeServiceAdded(cfg, cfg.service()));
+        for (ServiceConfig cfg : config.serviceConfigs()) {
+            ServiceCallbackInvoker.invokeServiceAdded(cfg, cfg.service());
+        }
         hasWebSocketService = hasWebSocketService(config);
     }
 

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostBuilder.java
Patch:
@@ -737,7 +737,8 @@ VirtualHostBuilder addRouteDecoratingService(RouteDecoratingService routeDecorat
                     routeDecoratingServices.stream()
                                            .map(service -> service.withRoutePrefix(baseContextPath))
                                            .collect(toImmutableList());
-            return RouteDecoratingService.newDecorator(Routers.ofRouteDecoratingService(prefixed));
+            return RouteDecoratingService.newDecorator(Routers.ofRouteDecoratingService(prefixed),
+                                                       routeDecoratingServices);
         } else {
             return null;
         }

File: core/src/main/java/com/linecorp/armeria/common/websocket/WebSocketFrame.java
Patch:
@@ -174,7 +174,7 @@ static WebSocketFrame ofPong(byte[] data) {
         if (data.length == 0) {
             return EMPTY_PONG;
         }
-        return new ByteArrayWebSocketFrame(data, WebSocketFrameType.PING);
+        return new ByteArrayWebSocketFrame(data, WebSocketFrameType.PONG);
     }
 
     /**

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcDecoratingService.java
Patch:
@@ -61,6 +61,9 @@ public void serviceAdded(ServiceConfig cfg) throws Exception {
                                                          .config()
                                                          .dependencyInjector();
         decorated = handlerRegistry.applyDecorators(delegate, dependencyInjector);
+        for (HttpService decorator : decorated.values()) {
+            decorator.serviceAdded(cfg);
+        }
     }
 
     @Override

File: logback/logback12/src/test/java/com/linecorp/armeria/common/logback/RequestContextExportingAppenderTest.java
Patch:
@@ -539,6 +539,7 @@ void testClientContextWithFullLogs() throws Exception {
         final ClientRequestContext ctx = newClientContext("/bar", null);
         try (SafeCloseable ignored = ctx.push()) {
             final RequestLogBuilder log = ctx.logBuilder();
+            log.authenticatedUser("auth_user");
             log.serializationFormat(ThriftSerializationFormats.BINARY);
             log.requestLength(64);
             log.requestHeaders(RequestHeaders.of(HttpMethod.GET, "/bar",
@@ -581,7 +582,8 @@ void testClientContextWithFullLogs() throws Exception {
                            .containsEntry("attrs.my_attr_value", "some-value")
                            .containsKey("req.id")
                            .containsKey("elapsed_nanos")
-                           .hasSize(27);
+                           .containsEntry("authenticated.user", "auth_user")
+                           .hasSize(28);
         }
     }
 

File: thrift/thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/text/StructContext.java
Patch:
@@ -58,6 +58,7 @@
 
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.SystemInfo;
+import com.linecorp.armeria.internal.common.thrift.ThriftMetadataAccess;
 
 /**
  * A struct parsing context. Builds a map from field name to TField.
@@ -170,7 +171,7 @@ private <T extends TBase<T, F>, F extends TFieldIdEnum> Map<String, TField> comp
             // Get the metaDataMap for this Thrift class
             @SuppressWarnings("unchecked")
             final Map<? extends TFieldIdEnum, FieldMetaData> metaDataMap =
-                    FieldMetaData.getStructMetaDataMap((Class<T>) clazz);
+                    ThriftMetadataAccess.getStructMetaDataMap((Class<T>) clazz);
 
             for (Entry<? extends TFieldIdEnum, FieldMetaData> e : metaDataMap.entrySet()) {
                 final String fieldName = e.getKey().getFieldName();

File: thrift/thrift0.13/src/main/java/com/linecorp/armeria/internal/common/thrift/ThriftFunction.java
Patch:
@@ -106,7 +106,7 @@ private <T extends TBase<T, F>, F extends TFieldIdEnum> ThriftFunction(
             //noinspection RedundantCast
             @SuppressWarnings("unchecked")
             final Map<TFieldIdEnum, FieldMetaData> metaDataMap =
-                    (Map<TFieldIdEnum, FieldMetaData>) FieldMetaData.getStructMetaDataMap(
+                    (Map<TFieldIdEnum, FieldMetaData>) ThriftMetadataAccess.getStructMetaDataMap(
                             (Class<T>) resultType);
 
             for (Entry<TFieldIdEnum, FieldMetaData> e : metaDataMap.entrySet()) {

File: thrift/thrift0.13/src/main/java/com/linecorp/armeria/internal/server/thrift/ThriftDescriptiveTypeInfoProvider.java
Patch:
@@ -48,6 +48,7 @@
 import com.google.common.annotations.VisibleForTesting;
 
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.internal.common.thrift.ThriftMetadataAccess;
 import com.linecorp.armeria.server.docs.DescriptiveTypeInfo;
 import com.linecorp.armeria.server.docs.DescriptiveTypeInfoProvider;
 import com.linecorp.armeria.server.docs.EnumInfo;

File: thrift/thrift0.13/src/main/java/com/linecorp/armeria/internal/server/thrift/ThriftDocServicePlugin.java
Patch:
@@ -50,6 +50,7 @@
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.thrift.ThriftProtocolFactories;
+import com.linecorp.armeria.internal.common.thrift.ThriftMetadataAccess;
 import com.linecorp.armeria.server.Route;
 import com.linecorp.armeria.server.RoutePathType;
 import com.linecorp.armeria.server.Service;

File: thrift/thrift0.13/src/main/java/com/linecorp/armeria/server/thrift/THttpService.java
Patch:
@@ -34,7 +34,6 @@
 import org.apache.thrift.TBase;
 import org.apache.thrift.TException;
 import org.apache.thrift.TFieldIdEnum;
-import org.apache.thrift.meta_data.FieldMetaData;
 import org.apache.thrift.protocol.TMessage;
 import org.apache.thrift.protocol.TMessageType;
 import org.apache.thrift.protocol.TProtocol;
@@ -74,6 +73,7 @@
 import com.linecorp.armeria.internal.common.thrift.TByteBufTransport;
 import com.linecorp.armeria.internal.common.thrift.ThriftFieldAccess;
 import com.linecorp.armeria.internal.common.thrift.ThriftFunction;
+import com.linecorp.armeria.internal.common.thrift.ThriftMetadataAccess;
 import com.linecorp.armeria.internal.common.thrift.ThriftProtocolUtil;
 import com.linecorp.armeria.internal.server.annotation.DecoratorAnnotationUtil.DecoratorAndOrder;
 import com.linecorp.armeria.server.DecoratingService;
@@ -653,7 +653,7 @@ private static RpcRequest toRpcRequest(Class<?> serviceType, String method, TBas
         // NB: The map returned by FieldMetaData.getStructMetaDataMap() is an EnumMap,
         //     so the parameter ordering is preserved correctly during iteration.
         final Set<? extends TFieldIdEnum> fields =
-                FieldMetaData.getStructMetaDataMap(thriftArgs.getClass()).keySet();
+                ThriftMetadataAccess.getStructMetaDataMap(thriftArgs.getClass()).keySet();
 
         // Handle the case where the number of arguments is 0 or 1.
         final int numFields = fields.size();

File: thrift/thrift0.13/src/test/java/com/linecorp/armeria/internal/common/thrift/ThriftMetadataAccessTest.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.internal.server.thrift;
+package com.linecorp.armeria.internal.common.thrift;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: eureka/src/main/java/com/linecorp/armeria/server/eureka/EurekaUpdatingListener.java
Patch:
@@ -266,7 +266,7 @@ private static String vipAddress(@Nullable String vipAddress, String hostName, P
         if (!portWrapper.isEnabled()) {
             return null;
         }
-        return vipAddress != null ? vipAddress : hostName + ':' + portWrapper.getPort();
+        return vipAddress != null ? vipAddress : hostName;
     }
 
     @Nullable

File: eureka/src/test/java/com/linecorp/armeria/server/eureka/EurekaUpdatingListenerTest.java
Patch:
@@ -195,8 +195,8 @@ private static InstanceInfo expectedInstanceInfo(Server application) {
         }
         final int port = application.activePort(SessionProtocol.HTTP).localAddress().getPort();
         final int securePort = application.activePort(SessionProtocol.HTTPS).localAddress().getPort();
-        builder.vipAddress(application.defaultHostname() + ':' + port)
-               .secureVipAddress(application.defaultHostname() + ':' + securePort)
+        builder.vipAddress(application.defaultHostname())
+               .secureVipAddress(application.defaultHostname())
                .port(port)
                .securePort(securePort)
                .healthCheckUrl("http://" + hostnameOrIpAddr + ':' + port + "/health")

File: xds/src/test/java/com/linecorp/armeria/xds/AggregatingNodeTest.java
Patch:
@@ -32,6 +32,7 @@
 
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.grpc.GrpcService;
 import com.linecorp.armeria.testing.junit5.server.ServerExtension;
 
@@ -53,7 +54,7 @@ class AggregatingNodeTest {
     @RegisterExtension
     static final ServerExtension server = new ServerExtension() {
         @Override
-        protected void configure(com.linecorp.armeria.server.ServerBuilder sb) throws Exception {
+        protected void configure(ServerBuilder sb) throws Exception {
             final V3DiscoveryServer v3DiscoveryServer = new V3DiscoveryServer(cache);
             sb.service(GrpcService.builder()
                                   .addService(v3DiscoveryServer.getAggregatedDiscoveryServiceImpl())

File: xds/src/test/java/com/linecorp/armeria/xds/XdsEndpointGroupTest.java
Patch:
@@ -49,7 +49,7 @@
 import io.envoyproxy.envoy.config.listener.v3.Listener;
 import io.envoyproxy.envoy.config.route.v3.RouteConfiguration;
 
-public class XdsEndpointGroupTest {
+class XdsEndpointGroupTest {
 
     private static final String GROUP = "key";
     private static final SimpleCache<String> cache = new SimpleCache<>(node -> GROUP);

File: xds/src/main/java/com/linecorp/armeria/xds/ClusterRoot.java
Patch:
@@ -43,7 +43,7 @@ public void close() {
             eventLoop().execute(this::close);
             return;
         }
-        super.close();
         node.close();
+        super.close();
     }
 }

File: xds/src/main/java/com/linecorp/armeria/xds/ListenerRoot.java
Patch:
@@ -42,7 +42,7 @@ public void close() {
             eventLoop().execute(this::close);
             return;
         }
-        super.close();
         node.close();
+        super.close();
     }
 }

File: xds/src/test/java/com/linecorp/armeria/xds/XdsClientIntegrationTest.java
Patch:
@@ -141,6 +141,7 @@ void multipleResources() throws Exception {
 
             // try removing the watcher for cluster1
             clusterRoot.close();
+            await().untilAsserted(() -> assertThat(clusterRoot.closed()).isTrue());
 
             cache.setSnapshot(
                     GROUP,

File: xds/src/main/java/com/linecorp/armeria/xds/AbstractRoot.java
Patch:
@@ -34,7 +34,7 @@
 import io.grpc.Status;
 import io.netty.util.concurrent.EventExecutor;
 
-abstract class AbstractRoot<T extends Snapshot<? extends ResourceHolder>>
+abstract class AbstractRoot<T extends Snapshot<? extends XdsResource>>
         implements SnapshotWatcher<T>, SafeCloseable {
 
     private static final Logger logger = LoggerFactory.getLogger(AbstractRoot.class);

File: xds/src/main/java/com/linecorp/armeria/xds/ClusterRoot.java
Patch:
@@ -16,13 +16,16 @@
 
 package com.linecorp.armeria.xds;
 
+import com.linecorp.armeria.common.annotation.UnstableApi;
+
 import io.envoyproxy.envoy.config.cluster.v3.Cluster;
 
 /**
  * A root node representing a {@link Cluster}.
  * Users may query the latest value of this resource or add a watcher to be notified of changes.
  * Note that it is important to close this resource to avoid leaking connections to the control plane server.
  */
+@UnstableApi
 public final class ClusterRoot extends AbstractRoot<ClusterSnapshot> {
 
     private final ClusterResourceNode node;

File: xds/src/main/java/com/linecorp/armeria/xds/ConfigSourceClient.java
Patch:
@@ -67,7 +67,7 @@ final class ConfigSourceClient implements SafeCloseable {
 
         endpointGroup = new XdsEndpointGroup(clusterSnapshot);
         final boolean ads = apiConfigSource.getApiType() == ApiType.AGGREGATED_GRPC;
-        final UpstreamTlsContext tlsContext = clusterSnapshot.holder().upstreamTlsContext();
+        final UpstreamTlsContext tlsContext = clusterSnapshot.xdsResource().upstreamTlsContext();
         final SessionProtocol sessionProtocol =
                 tlsContext != null ? SessionProtocol.HTTPS : SessionProtocol.HTTP;
         final GrpcClientBuilder builder = GrpcClients.builder(sessionProtocol, endpointGroup);
@@ -90,14 +90,14 @@ void updateResources(XdsType type) {
     }
 
     void addSubscriber(XdsType type, String resourceName,
-                       ResourceWatcher<AbstractResourceHolder> watcher) {
+                       ResourceWatcher<?> watcher) {
         if (subscriberStorage.register(type, resourceName, watcher)) {
             updateResources(type);
         }
     }
 
     boolean removeSubscriber(XdsType type, String resourceName,
-                             ResourceWatcher<AbstractResourceHolder> watcher) {
+                             ResourceWatcher<?> watcher) {
         if (subscriberStorage.unregister(type, resourceName, watcher)) {
             updateResources(type);
         }

File: xds/src/main/java/com/linecorp/armeria/xds/SotwXdsStream.java
Patch:
@@ -203,7 +203,7 @@ public void onNext(DiscoveryResponse value) {
 
             logger.debug("Received discovery response: {}", value);
 
-            final ResourceParser resourceParser = fromTypeUrl(value.getTypeUrl());
+            final ResourceParser<?, ?> resourceParser = fromTypeUrl(value.getTypeUrl());
             if (resourceParser == null) {
                 logger.warn("XDS stream Received unexpected type: {}", value.getTypeUrl());
                 return;

File: xds/src/main/java/com/linecorp/armeria/xds/XdsResource.java
Patch:
@@ -19,15 +19,15 @@
 import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
- * A holder object for xDS resources. This is a holder object which
+ * An object for xDS resources. This is a holder object which
  * is contained by {@link Snapshot} to:
  * <ul>
  *     <li>Provide additional metadata.</li>
  *     <li>Unify unpacking child object logic.</li>
  * </ul>
  */
 @UnstableApi
-public interface ResourceHolder {
+public interface XdsResource {
 
     /**
      * Returns the xDS type of the object.

File: xds/src/main/java/com/linecorp/armeria/xds/XdsResourceWithPrimer.java
Patch:
@@ -18,10 +18,10 @@
 
 import com.linecorp.armeria.common.annotation.Nullable;
 
-abstract class AbstractResourceHolder implements ResourceHolder {
+abstract class XdsResourceWithPrimer<T extends XdsResourceWithPrimer<T>> implements XdsResource {
 
-    abstract AbstractResourceHolder withPrimer(@Nullable ResourceHolder primer);
+    abstract T withPrimer(@Nullable XdsResource primer);
 
     @Nullable
-    abstract ResourceHolder primer();
+    abstract XdsResource primer();
 }

File: xds/src/test/java/com/linecorp/armeria/xds/DummyResourceWatcher.java
Patch:
@@ -16,9 +16,9 @@
 
 package com.linecorp.armeria.xds;
 
-final class DummyResourceWatcher implements ResourceWatcher<AbstractResourceHolder> {
+final class DummyResourceWatcher implements ResourceWatcher<XdsResourceWithPrimer<?>> {
 
     @Override
-    public void onChanged(AbstractResourceHolder update) {
+    public void onChanged(XdsResourceWithPrimer<?> update) {
     }
 }

File: xds/src/test/java/com/linecorp/armeria/xds/MultiConfigSourceTest.java
Patch:
@@ -121,7 +121,7 @@ void basicCase() throws Exception {
             // Updates are propagated for the initial value
             final ClusterLoadAssignment expectedCluster =
                     cache2.getSnapshot(GROUP).endpoints().resources().get("cluster1");
-            assertThat(clusterSnapshot.endpointSnapshot().holder().resource()).isEqualTo(expectedCluster);
+            assertThat(clusterSnapshot.endpointSnapshot().xdsResource().resource()).isEqualTo(expectedCluster);
 
             await().pollDelay(100, TimeUnit.MILLISECONDS)
                    .untilAsserted(() -> assertThat(watcher.events()).isEmpty());
@@ -141,7 +141,7 @@ void fromListener() throws Exception {
             final ClusterLoadAssignment expected =
                     cache2.getSnapshot(GROUP).endpoints().resources().get("cluster1");
             assertThat(listenerSnapshot.routeSnapshot().clusterSnapshots()
-                                       .get(0).endpointSnapshot().holder().resource()).isEqualTo(expected);
+                                       .get(0).endpointSnapshot().xdsResource().resource()).isEqualTo(expected);
 
             await().pollDelay(100, TimeUnit.MILLISECONDS)
                    .untilAsserted(() -> assertThat(watcher.events()).isEmpty());

File: xds/src/test/java/com/linecorp/armeria/xds/TestResourceWatcher.java
Patch:
@@ -52,10 +52,11 @@ public void snapshotUpdated(Snapshot<?> newSnapshot) {
     }
 
     List<Object> blockingMissing() {
+        //noinspection unchecked
         return blockingFirst("onMissing", List.class);
     }
 
-    <T> T  blockingChanged(Class<T> clazz) {
+    <T> T blockingChanged(Class<T> clazz) {
         return blockingFirst("snapshotUpdated", clazz);
     }
 

File: tomcat8/src/main/java/com/linecorp/armeria/server/tomcat/ArmeriaEndpoint.java
Patch:
@@ -40,6 +40,9 @@ private ArmeriaEndpoint() {}
     @Override
     protected void createSSLContext(SSLHostConfig sslHostConfig) throws Exception {}
 
+    @Override
+    protected void setDefaultSslHostConfig(SSLHostConfig sslHostConfig) {}
+
     @Override
     protected InetSocketAddress getLocalAddress() throws IOException {
         // Doesn't seem to be used.

File: core/src/test/java/com/linecorp/armeria/client/Http2HeadersLimitTest.java
Patch:
@@ -21,7 +21,8 @@
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.RegisterExtension;
-import org.testng.util.Strings;
+
+import com.google.common.base.Strings;
 
 import com.linecorp.armeria.client.logging.LoggingClient;
 import com.linecorp.armeria.common.Flags;

File: core/src/test/java/com/linecorp/armeria/common/DefaultSplitHttpResponseTest.java
Patch:
@@ -30,7 +30,8 @@
 import org.junit.jupiter.api.extension.RegisterExtension;
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
-import org.testng.util.Strings;
+
+import com.google.common.base.Strings;
 
 import com.linecorp.armeria.client.ResponseTimeoutException;
 import com.linecorp.armeria.client.WebClient;

File: grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/HttpDeframerTckTest.java
Patch:
@@ -40,6 +40,7 @@
 import reactor.core.publisher.Flux;
 
 @Test
+@Ignore
 public class HttpDeframerTckTest extends PublisherVerification<DeframedMessage> {
 
     private static final TransportStatusListener noopListener = (status, metadata) -> {};

File: core/src/main/java/com/linecorp/armeria/server/AggregatedHttpResponseHandler.java
Patch:
@@ -57,7 +57,7 @@ final class AggregatedHttpResponseHandler extends AbstractHttpResponseHandler
 
     @Override
     public Void apply(@Nullable AggregatedHttpResponse response, @Nullable Throwable cause) {
-        final EventLoop eventLoop = reqCtx.eventLoop();
+        final EventLoop eventLoop = ctx.channel().eventLoop();
         if (eventLoop.inEventLoop()) {
             apply0(response, cause);
         } else {

File: core/src/main/java/com/linecorp/armeria/server/ServerConfig.java
Patch:
@@ -103,8 +103,7 @@ public interface ServerConfig {
     List<ServiceConfig> serviceConfigs();
 
     /**
-     * Returns the worker {@link EventLoopGroup} which is responsible for performing socket I/O and running
-     * {@link Service#serve(ServiceRequestContext, Request)}.
+     * Returns the worker {@link EventLoopGroup} which is responsible for performing socket I/O.
      */
     EventLoopGroup workerGroup();
 

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContextBuilder.java
Patch:
@@ -236,10 +236,12 @@ public ServiceRequestContext build() {
             requestCancellationScheduler.initAndStart(eventLoop(), noopCancellationTask);
         }
 
+        final EventLoop serviceWorkerGroup = eventLoop();
+
         // Build the context with the properties set by a user and the fake objects.
         final Channel ch = fakeChannel();
         return new DefaultServiceRequestContext(
-                serviceCfg, ch, meterRegistry(), sessionProtocol(), id(), routingCtx,
+                serviceCfg, ch, serviceWorkerGroup, meterRegistry(), sessionProtocol(), id(), routingCtx,
                 routingResult, exchangeType, req, sslSession(), proxiedAddresses,
                 clientAddress, remoteAddress(), localAddress(),
                 requestCancellationScheduler,

File: core/src/test/java/com/linecorp/armeria/server/ServiceTest.java
Patch:
@@ -65,7 +65,8 @@ private static void assertDecoration(FooService inner, HttpService outer) throws
                                   AccessLogWriter.disabled(),
                                   CommonPools.blockingTaskExecutor(),
                                   SuccessFunction.always(),
-                                  0, Files.newTemporaryFolder().toPath(), ImmutableList.of(), HttpHeaders.of(),
+                                  0, Files.newTemporaryFolder().toPath(), CommonPools.workerGroup(),
+                                  ImmutableList.of(), HttpHeaders.of(),
                                   ctx -> RequestId.of(1L),
                                   ServerErrorHandler.ofDefault().asServiceErrorHandler(), NOOP_CONTEXT_HOOK);
         outer.serviceAdded(cfg);

File: examples/spring-boot-jetty/src/main/java/example/springframework/boot/jetty/HelloConfiguration.java
Patch:
@@ -1,8 +1,8 @@
 package example.springframework.boot.jetty;
 
+import org.eclipse.jetty.ee10.webapp.WebAppContext;
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.util.Loader;
-import org.eclipse.jetty.webapp.WebAppContext;
 import org.springframework.beans.factory.ObjectProvider;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.web.embedded.jetty.JettyServerCustomizer;
@@ -42,7 +42,7 @@ public HealthChecker jettyHealthChecker(ServletWebServerApplicationContext appli
     @Bean
     public JettyService jettyService(ServletWebServerApplicationContext applicationContext) {
         final JettyWebServer jettyWebServer = jettyServer(applicationContext);
-        return JettyService.of(jettyWebServer.getServer(), null, false);
+        return JettyService.of(jettyWebServer.getServer(), null);
     }
 
     /**

File: it/spring/boot3-jetty12/src/main/java/com/linecorp/armeria/spring/jetty/SpringJettyApplication.java
Patch:
@@ -16,9 +16,9 @@
 
 package com.linecorp.armeria.spring.jetty;
 
+import org.eclipse.jetty.ee10.webapp.WebAppContext;
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.util.Loader;
-import org.eclipse.jetty.webapp.WebAppContext;
 import org.springframework.beans.factory.ObjectProvider;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;

File: it/spring/boot3-jetty12/src/test/java/com/linecorp/armeria/spring/jetty/ActuatorAutoConfigurationHealthGroupTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
-import org.springframework.boot.test.autoconfigure.actuate.metrics.AutoConfigureMetrics;
+import org.springframework.boot.test.autoconfigure.actuate.observability.AutoConfigureObservability;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
 import org.springframework.boot.test.web.server.LocalManagementPort;
@@ -41,7 +41,7 @@
 @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
 @ActiveProfiles({ "local", "healthGroupTest" })
 @DirtiesContext
-@AutoConfigureMetrics
+@AutoConfigureObservability
 @EnableAutoConfiguration
 class ActuatorAutoConfigurationHealthGroupTest {
 

File: spring/boot3-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationSecureTest.java
Patch:
@@ -28,7 +28,6 @@
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.boot.test.autoconfigure.actuate.metrics.AutoConfigureMetrics;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.web.server.LocalManagementPort;
 import org.springframework.test.annotation.DirtiesContext;
@@ -44,7 +43,7 @@
 @SpringBootTest(classes = TestConfiguration.class)
 @ActiveProfiles({ "local", "secureTest" })
 @DirtiesContext
-@AutoConfigureMetrics
+@EnableTestMetrics
 @EnableAutoConfiguration
 @ImportAutoConfiguration({ ArmeriaSpringActuatorAutoConfiguration.class, JmxEndpointAutoConfiguration.class })
 @Timeout(10)

File: spring/boot3-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationSslTest.java
Patch:
@@ -22,7 +22,6 @@
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.boot.test.autoconfigure.actuate.metrics.AutoConfigureMetrics;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.web.server.LocalManagementPort;
 import org.springframework.test.annotation.DirtiesContext;
@@ -36,7 +35,7 @@
 @SpringBootTest(classes = TestConfiguration.class)
 @ActiveProfiles({ "local", "ssl" })
 @DirtiesContext
-@AutoConfigureMetrics
+@EnableTestMetrics
 @EnableAutoConfiguration
 @ImportAutoConfiguration(ArmeriaSpringActuatorAutoConfiguration.class)
 @Timeout(10)

File: spring/boot3-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java
Patch:
@@ -37,7 +37,6 @@
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.boot.test.autoconfigure.actuate.metrics.AutoConfigureMetrics;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.context.annotation.Bean;
 import org.springframework.test.annotation.DirtiesContext;
@@ -72,7 +71,7 @@
 @SpringBootTest(classes = TestConfiguration.class)
 @ActiveProfiles({ "local", "autoConfTest" })
 @DirtiesContext
-@AutoConfigureMetrics
+@EnableTestMetrics
 @EnableAutoConfiguration
 @ImportAutoConfiguration(ArmeriaSpringActuatorAutoConfiguration.class)
 @Timeout(unit = TimeUnit.MILLISECONDS, value = 30_000L)
@@ -333,7 +332,7 @@ void testCustomInfo() throws Exception {
     @SpringBootTest(classes = ArmeriaSpringActuatorAutoConfigurationCorsTest.TestConfiguration.class)
     @ActiveProfiles({ "local", "autoConfTest", "autoConfTestCors" })
     @DirtiesContext
-    @AutoConfigureMetrics
+    @EnableTestMetrics
     @EnableAutoConfiguration
     @ImportAutoConfiguration(ArmeriaSpringActuatorAutoConfiguration.class)
     @Timeout(10)

File: spring/boot3-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/PrometheusMetricExposureTest.java
Patch:
@@ -26,7 +26,6 @@
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.boot.test.autoconfigure.actuate.metrics.AutoConfigureMetrics;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.web.server.LocalManagementPort;
 import org.springframework.test.annotation.DirtiesContext;
@@ -44,7 +43,7 @@
 @SpringBootTest(classes = TestConfiguration.class)
 @ActiveProfiles({ "local", "managedMetricPath" })
 @DirtiesContext
-@AutoConfigureMetrics
+@EnableTestMetrics
 @EnableAutoConfiguration
 @ImportAutoConfiguration(ArmeriaSpringActuatorAutoConfiguration.class)
 class PrometheusMetricExposureTest {

File: spring/boot3-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaClientHttpResponse.java
Patch:
@@ -66,7 +66,7 @@ public HttpStatus getStatusCode() {
         return HttpStatus.valueOf(status.code());
     }
 
-    @Override
+    // This method exists only for Spring 5 compatibility.
     public int getRawStatusCode() {
         // Return the status code even if it is unknown.
         return status.code();

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/JavaGrpcClientStubFactory.java
Patch:
@@ -22,6 +22,7 @@
 import java.lang.reflect.Method;
 
 import com.linecorp.armeria.client.grpc.GrpcClientStubFactory;
+import com.linecorp.armeria.common.util.Exceptions;
 
 import io.grpc.Channel;
 import io.grpc.ServiceDescriptor;
@@ -51,7 +52,7 @@ public ServiceDescriptor findServiceDescriptor(Class<?> clientType) {
             final Method getServiceDescriptorMethod = enclosingClass.getDeclaredMethod("getServiceDescriptor");
             return (ServiceDescriptor) getServiceDescriptorMethod.invoke(null);
         } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
-            return null;
+            throw new ServiceDescriptorResolutionException(getClass().getSimpleName(), Exceptions.peel(e));
         }
     }
 

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ReactorGrpcClientStubFactory.java
Patch:
@@ -22,6 +22,7 @@
 import java.lang.reflect.Method;
 
 import com.linecorp.armeria.client.grpc.GrpcClientStubFactory;
+import com.linecorp.armeria.common.util.Exceptions;
 
 import io.grpc.Channel;
 import io.grpc.ServiceDescriptor;
@@ -45,7 +46,7 @@ public ServiceDescriptor findServiceDescriptor(Class<?> clientType) {
             return (ServiceDescriptor) getServiceDescriptorMethod.invoke(null);
         } catch (NoSuchMethodException | IllegalAccessException |
                 InvocationTargetException | NoSuchFieldException e) {
-            return null;
+            throw new ServiceDescriptorResolutionException(getClass().getSimpleName(), Exceptions.peel(e));
         }
     }
 

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ScalaPbGrpcClientStubFactory.java
Patch:
@@ -22,6 +22,7 @@
 import java.lang.reflect.Method;
 
 import com.linecorp.armeria.client.grpc.GrpcClientStubFactory;
+import com.linecorp.armeria.common.util.Exceptions;
 
 import io.grpc.Channel;
 import io.grpc.ServiceDescriptor;
@@ -42,7 +43,7 @@ public ServiceDescriptor findServiceDescriptor(Class<?> clientType) {
             final Method method = stubClass.getDeclaredMethod("SERVICE");
             return (ServiceDescriptor) method.invoke(null);
         } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
-            return null;
+            throw new ServiceDescriptorResolutionException(getClass().getSimpleName(), Exceptions.peel(e));
         }
     }
 

File: grpc/src/main/java/com/linecorp/armeria/internal/common/grpc/StatusAndMetadata.java
Patch:
@@ -26,7 +26,7 @@
  * A class that is used to cache {@link StatusRuntimeException} created from
  * {@link Status#asRuntimeException(Metadata)}.
  */
-public final class StatusAndMetadata {
+public class StatusAndMetadata {
 
     private final Status status;
     @Nullable

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/FramedGrpcService.java
Patch:
@@ -64,6 +64,7 @@
 import com.linecorp.armeria.internal.common.grpc.MetadataUtil;
 import com.linecorp.armeria.internal.common.grpc.TimeoutHeaderUtil;
 import com.linecorp.armeria.internal.server.grpc.AbstractServerCall;
+import com.linecorp.armeria.internal.server.grpc.ServerStatusAndMetadata;
 import com.linecorp.armeria.server.AbstractHttpService;
 import com.linecorp.armeria.server.RequestTimeoutException;
 import com.linecorp.armeria.server.Route;
@@ -323,7 +324,7 @@ private <I, O> void startCall(ServerMethodDefinition<I, O> methodDef, ServiceReq
             if (cancellationCause instanceof RequestTimeoutException) {
                 status = status.withDescription("Request timed out");
             }
-            call.close(status, new Metadata());
+            call.close(new ServerStatusAndMetadata(status, new Metadata(), true, true));
             return null;
         });
     }

File: core/src/main/java/com/linecorp/armeria/internal/common/util/StringUtil.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.util.Map;
 
-import com.google.common.base.Ascii;
 import com.google.common.collect.ImmutableMap;
 
 public final class StringUtil {
@@ -29,8 +28,10 @@ public final class StringUtil {
     private static final Map<String, Boolean> stringToBoolean =
             ImmutableMap.<String, Boolean>builder()
                         .put("true", true)
+                        .put("TRUE", true)
                         .put("1", true)
                         .put("false", false)
+                        .put("FALSE", false)
                         .put("0", false)
                         .build();
 
@@ -56,7 +57,7 @@ public static String toString(long num) {
     }
 
     public static Boolean toBoolean(String s, boolean errorOnFailure) {
-        final Boolean result = stringToBoolean.get(Ascii.toLowerCase(s));
+        final Boolean result = stringToBoolean.get(s);
         if (result != null) {
             return result;
         }

File: core/src/main/java/com/linecorp/armeria/server/Http2ServerConnectionHandler.java
Patch:
@@ -32,6 +32,7 @@
 import io.netty.handler.codec.http2.Http2ConnectionDecoder;
 import io.netty.handler.codec.http2.Http2ConnectionEncoder;
 import io.netty.handler.codec.http2.Http2Settings;
+import io.netty.util.AsciiString;
 
 final class Http2ServerConnectionHandler extends AbstractHttp2ConnectionHandler {
 
@@ -46,7 +47,7 @@ final class Http2ServerConnectionHandler extends AbstractHttp2ConnectionHandler
     Http2ServerConnectionHandler(Http2ConnectionDecoder decoder, Http2ConnectionEncoder encoder,
                                  Http2Settings initialSettings, Channel channel, ServerConfig cfg,
                                  Timer keepAliveTimer, GracefulShutdownSupport gracefulShutdownSupport,
-                                 String scheme) {
+                                 AsciiString scheme) {
 
         super(decoder, encoder, initialSettings, newKeepAliveHandler(encoder, channel, cfg, keepAliveTimer));
 

File: core/src/main/java/com/linecorp/armeria/server/Http2ServerConnectionHandlerBuilder.java
Patch:
@@ -22,6 +22,7 @@
 import io.netty.handler.codec.http2.Http2ConnectionDecoder;
 import io.netty.handler.codec.http2.Http2ConnectionEncoder;
 import io.netty.handler.codec.http2.Http2Settings;
+import io.netty.util.AsciiString;
 
 final class Http2ServerConnectionHandlerBuilder
         extends AbstractHttp2ConnectionHandlerBuilder<Http2ServerConnectionHandler,
@@ -30,10 +31,10 @@ final class Http2ServerConnectionHandlerBuilder
     private final ServerConfig config;
     private final Timer keepAliveTimer;
     private final GracefulShutdownSupport gracefulShutdownSupport;
-    private final String scheme;
+    private final AsciiString scheme;
 
     Http2ServerConnectionHandlerBuilder(Channel ch, ServerConfig config, Timer keepAliveTimer,
-                                        GracefulShutdownSupport gracefulShutdownSupport, String scheme) {
+                                        GracefulShutdownSupport gracefulShutdownSupport, AsciiString scheme) {
         super(ch);
         this.config = config;
         this.keepAliveTimer = keepAliveTimer;

File: core/src/main/java/com/linecorp/armeria/server/HttpServerPipelineConfigurator.java
Patch:
@@ -112,8 +112,8 @@ final class HttpServerPipelineConfigurator extends ChannelInitializer<Channel> {
     private static final int SSL_RECORD_HEADER_LENGTH = 5;
     private static final int MAX_CLIENT_HELLO_LENGTH = 4096; // 4KiB should be more than enough.
 
-    private static final AsciiString SCHEME_HTTP = AsciiString.cached("http");
-    private static final AsciiString SCHEME_HTTPS = AsciiString.cached("https");
+    static final AsciiString SCHEME_HTTP = AsciiString.cached("http");
+    static final AsciiString SCHEME_HTTPS = AsciiString.cached("https");
 
     private static final byte[] PROXY_V1_MAGIC_BYTES = {
             (byte) 'P', (byte) 'R', (byte) 'O', (byte) 'X', (byte) 'Y'
@@ -245,7 +245,7 @@ private Http2ConnectionHandler newHttp2ConnectionHandler(ChannelPipeline pipelin
         final Http2ConnectionEncoder encoder = encoder(connection);
         final Http2ConnectionDecoder decoder = decoder(connection, encoder);
         return new Http2ServerConnectionHandlerBuilder(pipeline.channel(), config, keepAliveTimer,
-                                                       gracefulShutdownSupport, scheme.toString())
+                                                       gracefulShutdownSupport, scheme)
                 .codec(decoder, encoder)
                 .initialSettings(http2Settings())
                 .build();

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContextBuilder.java
Patch:
@@ -213,7 +213,7 @@ public ServiceRequestContext build() {
                 localAddress().getHostString(),
                 requestTarget(),
                 req.headers(),
-                RoutingStatus.OK);
+                RoutingStatus.OK, sessionProtocol());
 
         final RoutingResult routingResult =
                 this.routingResult != null ? this.routingResult

File: core/src/main/java/com/linecorp/armeria/server/ServiceRouteUtil.java
Patch:
@@ -21,13 +21,15 @@
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.RequestTarget;
+import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.internal.common.util.ChannelUtil;
 
 import io.netty.channel.Channel;
 
 final class ServiceRouteUtil {
 
     static RoutingContext newRoutingContext(ServerConfig serverConfig, Channel channel,
+                                            SessionProtocol sessionProtocol,
                                             RequestHeaders headers, RequestTarget reqTarget) {
 
         final String hostname = hostname(headers);
@@ -48,7 +50,7 @@ static RoutingContext newRoutingContext(ServerConfig serverConfig, Channel chann
         }
 
         return DefaultRoutingContext.of(serverConfig.findVirtualHost(hostname, port),
-                                        hostname, reqTarget, headers, routingStatus);
+                                        hostname, reqTarget, headers, routingStatus, sessionProtocol);
     }
 
     private static String hostname(RequestHeaders headers) {

File: core/src/test/java/com/linecorp/armeria/server/CachingRoutingContextTest.java
Patch:
@@ -25,6 +25,7 @@
 import com.linecorp.armeria.common.QueryParams;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.RequestTarget;
+import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.server.RouteCache.CachingRoutingContext;
 
 class CachingRoutingContextTest {
@@ -46,7 +47,7 @@ void disableMatchingQueryParamsByCachingRoutingContext() {
                         virtualHost, virtualHost.defaultHostname(),
                         reqTarget,
                         RequestHeaders.of(HttpMethod.GET, reqTarget.pathAndQuery()),
-                        RoutingStatus.OK)) {
+                        RoutingStatus.OK, SessionProtocol.H2C)) {
                     @Override
                     public boolean requiresMatchingParamsPredicates() {
                         return true;
@@ -78,7 +79,7 @@ void disableMatchingHeadersByCachingRoutingContext() {
                         reqTarget,
                         RequestHeaders.of(HttpMethod.GET, reqTarget.pathAndQuery(),
                                           "foo", "qux"),
-                        RoutingStatus.OK)) {
+                        RoutingStatus.OK, SessionProtocol.H2C)) {
                     @Override
                     public boolean requiresMatchingHeadersPredicates() {
                         return true;

File: core/src/test/java/com/linecorp/armeria/server/RouterTest.java
Patch:
@@ -45,6 +45,7 @@
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.RequestTarget;
+import com.linecorp.armeria.common.SessionProtocol;
 
 class RouterTest {
     private static final Logger logger = LoggerFactory.getLogger(RouterTest.class);
@@ -119,7 +120,7 @@ void testFindAllMatchedRouters(String path, int expectForFind, List<Integer> exp
     private static DefaultRoutingContext routingCtx(String path) {
         return new DefaultRoutingContext(virtualHost(), "example.com",
                                          RequestHeaders.of(HttpMethod.GET, path),
-                                         RequestTarget.forServer(path), RoutingStatus.OK);
+                                         RequestTarget.forServer(path), RoutingStatus.OK, SessionProtocol.H2C);
     }
 
     static Stream<Arguments> generateRouteMatchData() {

File: core/src/test/java/com/linecorp/armeria/server/VirtualHostBuilderTest.java
Patch:
@@ -38,6 +38,7 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.RequestTarget;
+import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.SuccessFunction;
 
 import io.netty.handler.ssl.SslContextBuilder;
@@ -331,7 +332,8 @@ void precedenceOfDuplicateRoute() throws Exception {
         assertThat(virtualHost.serviceConfigs().size()).isEqualTo(2);
         final RoutingContext routingContext = new DefaultRoutingContext(virtualHost(), "example.com",
                                                                         RequestHeaders.of(HttpMethod.GET, "/"),
-                                                                        reqTarget, RoutingStatus.OK);
+                                                                        reqTarget, RoutingStatus.OK,
+                                                                        SessionProtocol.H2C);
         final Routed<ServiceConfig> serviceConfig = virtualHost.findServiceConfig(routingContext);
         final HttpResponse res = serviceConfig.value().service().serve(null, null);
         assertThat(res.aggregate().join().status().code()).isEqualTo(200);

File: core/src/main/java/com/linecorp/armeria/client/HttpResponseWrapper.java
Patch:
@@ -291,9 +291,7 @@ void initTimeout() {
         if (ctxExtension != null) {
             final CancellationScheduler responseCancellationScheduler =
                     ctxExtension.responseCancellationScheduler();
-            responseCancellationScheduler.init(
-                    ctx.eventLoop(), newCancellationTask(),
-                    TimeUnit.MILLISECONDS.toNanos(responseTimeoutMillis), /* server */ false);
+            responseCancellationScheduler.start(newCancellationTask());
         }
     }
 

File: core/src/main/java/com/linecorp/armeria/internal/server/DefaultServiceRequestContext.java
Patch:
@@ -177,7 +177,8 @@ public DefaultServiceRequestContext(
             this.requestCancellationScheduler = requestCancellationScheduler;
         } else {
             this.requestCancellationScheduler =
-                    CancellationScheduler.of(TimeUnit.MILLISECONDS.toNanos(cfg.requestTimeoutMillis()));
+                    CancellationScheduler.ofServer(TimeUnit.MILLISECONDS.toNanos(cfg.requestTimeoutMillis()));
+            this.requestCancellationScheduler.init(eventLoop());
         }
         this.sslSession = sslSession;
         this.proxiedAddresses = requireNonNull(proxiedAddresses, "proxiedAddresses");

File: core/src/main/java/com/linecorp/armeria/server/AbstractHttpResponseHandler.java
Patch:
@@ -243,8 +243,7 @@ final void maybeWriteAccessLog() {
      */
     final void scheduleTimeout() {
         // Schedule the initial request timeout with the timeoutNanos in the CancellationScheduler
-        reqCtx.requestCancellationScheduler().init(reqCtx.eventLoop(), newCancellationTask(),
-                                                   0, /* server */ true);
+        reqCtx.requestCancellationScheduler().start(newCancellationTask());
     }
 
     /**

File: core/src/test/java/com/linecorp/armeria/internal/client/DefaultClientRequestContextTest.java
Patch:
@@ -300,7 +300,7 @@ private static DefaultClientRequestContext newContext(ClientOptions clientOption
         return new DefaultClientRequestContext(
                 mock(EventLoop.class), NoopMeterRegistry.get(), SessionProtocol.H2C,
                 RequestId.random(), HttpMethod.POST, reqTarget, clientOptions, httpRequest,
-                null, RequestOptions.of(), CancellationScheduler.of(0), System.nanoTime(),
+                null, RequestOptions.of(), CancellationScheduler.ofClient(0), System.nanoTime(),
                 SystemInfo.currentTimeMicros());
     }
 

File: core/src/main/java/com/linecorp/armeria/client/websocket/WebSocketClientFrameDecoder.java
Patch:
@@ -25,7 +25,7 @@ final class WebSocketClientFrameDecoder extends WebSocketFrameDecoder {
 
     WebSocketClientFrameDecoder(ClientRequestContext ctx, int maxFramePayloadLength,
                                 boolean allowMaskMismatch) {
-        super(ctx, maxFramePayloadLength, allowMaskMismatch);
+        super(maxFramePayloadLength, allowMaskMismatch);
         this.ctx = ctx;
     }
 

File: core/src/main/java/com/linecorp/armeria/internal/server/websocket/WebSocketServiceFrameDecoder.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.linecorp.armeria.server.websocket;
+package com.linecorp.armeria.internal.server.websocket;
 
 import com.linecorp.armeria.common.HttpRequestWriter;
 import com.linecorp.armeria.common.Request;
@@ -27,7 +27,7 @@ final class WebSocketServiceFrameDecoder extends WebSocketFrameDecoder {
 
     WebSocketServiceFrameDecoder(ServiceRequestContext ctx, int maxFramePayloadLength,
                                  boolean allowMaskMismatch) {
-        super(ctx, maxFramePayloadLength, allowMaskMismatch);
+        super(maxFramePayloadLength, allowMaskMismatch);
         this.ctx = ctx;
     }
 

File: core/src/main/java/com/linecorp/armeria/server/ServiceConfigBuilder.java
Patch:
@@ -43,8 +43,8 @@
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.BlockingTaskExecutor;
 import com.linecorp.armeria.internal.common.websocket.WebSocketUtil;
+import com.linecorp.armeria.internal.server.websocket.DefaultWebSocketService;
 import com.linecorp.armeria.server.logging.AccessLogWriter;
-import com.linecorp.armeria.server.websocket.WebSocketService;
 
 final class ServiceConfigBuilder implements ServiceConfigSetters {
 
@@ -321,7 +321,7 @@ ServiceConfig build(ServiceNaming defaultServiceNaming,
                                                                      unhandledExceptionsReporter);
         }
 
-        final boolean webSocket = service.as(WebSocketService.class) != null;
+        final boolean webSocket = service.as(DefaultWebSocketService.class) != null;
         final long requestTimeoutMillis;
         if (this.requestTimeoutMillis != null) {
             requestTimeoutMillis = this.requestTimeoutMillis;

File: core/src/main/java/com/linecorp/armeria/server/file/HttpFile.java
Patch:
@@ -199,13 +199,14 @@ static HttpFileBuilder builder(URL url) {
             }
 
             return builder(f.toPath());
-        } else if ("jar".equals(url.getProtocol()) && url.getPath().startsWith("file:") ||
+        } else if ("jar".equals(url.getProtocol()) &&
+                   (url.getPath().startsWith("file:") || url.getPath().startsWith("nested:")) ||
                    "jrt".equals(url.getProtocol()) ||
                    "bundle".equals(url.getProtocol())) {
             return new ClassPathHttpFileBuilder(url);
         }
         throw new IllegalArgumentException("Unsupported URL: " + url + " (must start with " +
-                                           "'file:', 'jar:file', 'jrt:' or 'bundle:')");
+                                           "'file:', 'jar:file', 'jar:nested', 'jrt:' or 'bundle:')");
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/DefaultHealthCheckerContext.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.concurrent.locks.ReentrantLock;
 import java.util.function.BiConsumer;
 
+import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.ImmutableList;
 import com.google.errorprone.annotations.concurrent.GuardedBy;
@@ -299,6 +300,7 @@ private <T extends Future<U>, U> T add(T future) {
         return future;
     }
 
+    @VisibleForTesting
     int refCnt() {
         return refCnt;
     }

File: core/src/main/java/com/linecorp/armeria/common/websocket/CloseByteBufWebSocketFrame.java
Patch:
@@ -98,10 +98,10 @@ private static String reasonPhrase(ByteBuf data) {
         }
 
         final int index = data.readerIndex();
-        data.readerIndex(index + 2);
-        if (!data.isReadable()) {
+        if (index + 2 >= data.writerIndex()) { // No reasonPhrase
             return null;
         }
+        data.readerIndex(index + 2);
         final String reasonPhrase = data.toString(StandardCharsets.UTF_8);
         data.readerIndex(index);
         return reasonPhrase;

File: core/src/main/java/com/linecorp/armeria/client/Http2ClientConnectionHandlerBuilder.java
Patch:
@@ -34,6 +34,8 @@ final class Http2ClientConnectionHandlerBuilder
         super(ch);
         this.clientFactory = clientFactory;
         this.protocol = protocol;
+        // Disable RST frames limit for HTTP/2 clients.
+        decoderEnforceMaxRstFramesPerWindow(0, 0);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/common/FlagsProvider.java
Patch:
@@ -718,12 +718,12 @@ default Long defaultHttp2MaxHeaderListSize() {
      * {@link ServerBuilder#http2MaxResetFramesPerWindow(int, int)}.
      *
      * <p>The default value of this flag is
-     * {@value DefaultFlagsProvider#DEFAULT_HTTP2_MAX_RESET_FRAMES_PER_MINUTE}.
-     * Specify the {@code -Dcom.linecorp.armeria.defaultHttp2MaxResetFramesPerMinute=<integer>} JVM option
+     * {@value DefaultFlagsProvider#DEFAULT_SERVER_HTTP2_MAX_RESET_FRAMES_PER_MINUTE}.
+     * Specify the {@code -Dcom.linecorp.armeria.defaultServerHttp2MaxResetFramesPerMinute=<integer>} JVM option
      * to override the default value. {@code 0} means no protection should be applied.
      */
     @Nullable
-    default Integer defaultHttp2MaxResetFramesPerMinute() {
+    default Integer defaultServerHttp2MaxResetFramesPerMinute() {
         return null;
     }
 

File: core/src/main/java/com/linecorp/armeria/common/SystemPropertyFlagsProvider.java
Patch:
@@ -299,8 +299,8 @@ public Long defaultHttp2MaxHeaderListSize() {
     }
 
     @Override
-    public Integer defaultHttp2MaxResetFramesPerMinute() {
-        return getInt("defaultHttp2MaxResetFramesPerMinute");
+    public Integer defaultServerHttp2MaxResetFramesPerMinute() {
+        return getInt("defaultServerHttp2MaxResetFramesPerMinute");
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java
Patch:
@@ -232,7 +232,7 @@ public final class ServerBuilder implements TlsSetters, ServiceConfigsBuilder {
     private long unhandledExceptionsReportIntervalMillis =
             Flags.defaultUnhandledExceptionsReportIntervalMillis();
     private final List<ShutdownSupport> shutdownSupports = new ArrayList<>();
-    private int http2MaxResetFramesPerWindow = Flags.defaultHttp2MaxResetFramesPerMinute();
+    private int http2MaxResetFramesPerWindow = Flags.defaultServerHttp2MaxResetFramesPerMinute();
     private int http2MaxResetFramesWindowSeconds = 60;
 
     ServerBuilder() {
@@ -778,7 +778,7 @@ public ServerBuilder http2MaxStreamsPerConnection(long http2MaxStreamsPerConnect
     /**
      * Sets the maximum number of RST frames that are allowed per window before the connection is closed. This
      * allows to protect against the remote peer flooding us with such frames and using up a lot of CPU.
-     * Defaults to {@link Flags#defaultHttp2MaxResetFramesPerMinute()}.
+     * Defaults to {@link Flags#defaultServerHttp2MaxResetFramesPerMinute()}.
      *
      * <p>Note that {@code 0} for any of the parameters means no protection should be applied.
      */

File: core/src/main/java/com/linecorp/armeria/client/endpoint/AbstractEndpointGroup.java
Patch:
@@ -24,7 +24,7 @@
 abstract class AbstractEndpointGroup extends AbstractListenable<List<Endpoint>> implements EndpointGroup {
 
     @Override
-    protected final List<Endpoint> latestValue() {
+    protected List<Endpoint> latestValue() {
         if (whenReady().isDone()) {
             return endpoints();
         }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/RoundRobinStrategy.java
Patch:
@@ -43,16 +43,16 @@ static class RoundRobinSelector extends AbstractEndpointSelector {
 
         RoundRobinSelector(EndpointGroup endpointGroup) {
             super(endpointGroup);
+            initialize();
         }
 
         @Override
         public Endpoint selectNow(ClientRequestContext ctx) {
             final List<Endpoint> endpoints = group().endpoints();
-            final int currentSequence = sequence.getAndIncrement();
-
             if (endpoints.isEmpty()) {
                 return null;
             }
+            final int currentSequence = sequence.getAndIncrement();
             return endpoints.get(Math.abs(currentSequence % endpoints.size()));
         }
     }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/StickyEndpointSelectionStrategy.java
Patch:
@@ -77,6 +77,7 @@ private static final class StickyEndpointSelector extends AbstractEndpointSelect
                                ToLongFunction<? super ClientRequestContext> requestContextHasher) {
             super(endpointGroup);
             this.requestContextHasher = requireNonNull(requestContextHasher, "requestContextHasher");
+            initialize();
         }
 
         @Override

File: core/src/main/java/com/linecorp/armeria/client/ClientHttp2ObjectEncoder.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.linecorp.armeria.client;
 
+import static com.linecorp.armeria.internal.client.ClosedStreamExceptionUtil.newClosedStreamException;
 import static java.util.Objects.requireNonNull;
 
 import java.net.InetSocketAddress;
@@ -97,6 +98,6 @@ public ChannelFuture doWriteTrailers(int id, int streamId, HttpHeaders headers)
                                           0, true, ctx().newPromise());
         }
 
-        return newFailedFuture(ClosedStreamException.get());
+        return newFailedFuture(newClosedStreamException(channel()));
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/ClientHttpObjectEncoder.java
Patch:
@@ -16,7 +16,8 @@
 
 package com.linecorp.armeria.client;
 
-import com.linecorp.armeria.common.ClosedSessionException;
+import static com.linecorp.armeria.internal.client.ClosedStreamExceptionUtil.newClosedSessionException;
+
 import com.linecorp.armeria.common.HttpObject;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.internal.common.HttpObjectEncoder;
@@ -37,7 +38,7 @@ default ChannelFuture writeHeaders(int id, int streamId, RequestHeaders headers,
                                        ChannelPromise promise) {
         assert eventLoop().inEventLoop();
         if (isClosed()) {
-            promise.tryFailure(UnprocessedRequestException.of(ClosedSessionException.get()));
+            promise.tryFailure(UnprocessedRequestException.of(newClosedSessionException(channel())));
             return promise;
         }
 

File: core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java
Patch:
@@ -23,6 +23,7 @@
 import static com.linecorp.armeria.common.SessionProtocol.H2C;
 import static com.linecorp.armeria.common.SessionProtocol.HTTP;
 import static com.linecorp.armeria.common.SessionProtocol.HTTPS;
+import static com.linecorp.armeria.internal.client.PendingExceptionUtil.setPendingException;
 import static io.netty.handler.codec.http.HttpClientUpgradeHandler.UpgradeEvent.UPGRADE_REJECTED;
 import static io.netty.handler.codec.http2.Http2CodecUtil.DEFAULT_MAX_FRAME_SIZE;
 import static io.netty.handler.codec.http2.Http2CodecUtil.DEFAULT_WINDOW_SIZE;
@@ -299,13 +300,13 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws E
                             "Possible reasons: no cipher suites in common, unsupported TLS version, etc. " +
                             "(TLS version: " + tlsVersion + ", cipher suites: " + sslCtx.cipherSuites() + ')',
                             cause);
-                    HttpSessionHandler.setPendingException(ctx, maybeHandshakeException);
+                    setPendingException(ctx, maybeHandshakeException);
                     return;
                 }
                 if (handshakeFailed &&
                     cause instanceof DecoderException &&
                     cause.getCause() instanceof SSLException) {
-                    HttpSessionHandler.setPendingException(ctx, cause.getCause());
+                    setPendingException(ctx, cause.getCause());
                     return;
                 }
 

File: core/src/main/java/com/linecorp/armeria/client/WebSocketHttp1ClientChannelHandler.java
Patch:
@@ -17,14 +17,14 @@
 package com.linecorp.armeria.client;
 
 import static com.linecorp.armeria.client.AbstractHttpResponseDecoder.contentTooLargeException;
+import static com.linecorp.armeria.internal.client.ClosedStreamExceptionUtil.newClosedSessionException;
 import static io.netty.handler.codec.http.LastHttpContent.EMPTY_LAST_CONTENT;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.google.common.math.LongMath;
 
-import com.linecorp.armeria.common.ClosedSessionException;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.ProtocolViolationException;
@@ -153,7 +153,7 @@ public KeepAliveHandler keepAliveHandler() {
     public void channelInactive(ChannelHandlerContext ctx) throws Exception {
         keepAliveHandler.destroy();
         if (res != null) {
-            res.close(ClosedSessionException.get());
+            res.close(newClosedSessionException(ctx));
         }
         ctx.fireChannelInactive();
     }
@@ -196,7 +196,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                         state = State.NEEDS_HANDSHAKE_RESPONSE_END;
                     }
                     if (!res.tryWriteResponseHeaders(responseHeaders)) {
-                        fail(ctx, ClosedSessionException.get());
+                        fail(ctx, newClosedSessionException(ctx));
                     }
                     break;
                 case NEEDS_HANDSHAKE_RESPONSE_END:

File: core/src/main/java/com/linecorp/armeria/internal/common/Http1ObjectEncoder.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.linecorp.armeria.internal.common;
 
+import static com.linecorp.armeria.internal.client.ClosedStreamExceptionUtil.newClosedSessionException;
 import static java.util.Objects.requireNonNull;
 
 import java.util.AbstractMap.SimpleImmutableEntry;
@@ -402,7 +403,7 @@ public final void close() {
             return;
         }
 
-        final ClosedSessionException cause = ClosedSessionException.get();
+        final ClosedSessionException cause = newClosedSessionException(ch);
         for (Queue<Entry<HttpObject, ChannelPromise>> queue : pendingWritesMap.values()) {
             for (;;) {
                 final Entry<HttpObject, ChannelPromise> e = queue.poll();

File: core/src/main/java/com/linecorp/armeria/internal/common/Http2ObjectEncoder.java
Patch:
@@ -16,8 +16,9 @@
 
 package com.linecorp.armeria.internal.common;
 
+import static com.linecorp.armeria.internal.client.ClosedStreamExceptionUtil.newClosedStreamException;
+
 import com.linecorp.armeria.common.HttpData;
-import com.linecorp.armeria.common.stream.ClosedStreamException;
 
 import io.netty.buffer.Unpooled;
 import io.netty.channel.Channel;
@@ -71,7 +72,7 @@ public final ChannelFuture doWriteData(int id, int streamId, HttpData data, bool
             // Can't write to an outdated (closed) stream.
             data.close();
             return data.isEmpty() ? ctx.writeAndFlush(Unpooled.EMPTY_BUFFER)
-                                  : newFailedFuture(ClosedStreamException.get());
+                                  : newFailedFuture(newClosedStreamException(ctx));
         }
 
         // Cannot start a new stream with a DATA frame. It must start with a HEADERS frame.

File: core/src/main/java/com/linecorp/armeria/internal/common/HttpObjectEncoder.java
Patch:
@@ -16,8 +16,9 @@
 
 package com.linecorp.armeria.internal.common;
 
+import static com.linecorp.armeria.internal.client.ClosedStreamExceptionUtil.newClosedSessionException;
+
 import com.linecorp.armeria.common.ByteBufAccessMode;
-import com.linecorp.armeria.common.ClosedSessionException;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpObject;
@@ -106,7 +107,7 @@ default ChannelFuture writeReset(int id, int streamId, Http2Error error,
     boolean isWritable(int id, int streamId);
 
     default ChannelFuture newClosedSessionFuture() {
-        return newFailedFuture(ClosedSessionException.get());
+        return newFailedFuture(newClosedSessionException(channel()));
     }
 
     default ChannelFuture newFailedFuture(Throwable cause) {

File: core/src/main/java/com/linecorp/armeria/client/AbstractHttpRequestHandler.java
Patch:
@@ -353,7 +353,7 @@ final void failAndReset(Throwable cause) {
         }
 
         if (ch.isActive()) {
-            encoder.writeReset(id, streamId(), error);
+            encoder.writeReset(id, streamId(), error, false);
             ch.flush();
         }
     }

File: core/src/main/java/com/linecorp/armeria/common/util/Exceptions.java
Patch:
@@ -169,6 +169,7 @@ public static boolean isExpected(Throwable cause) {
      * Returns {@code true} if the specified exception will cancel the current request or response stream.
      */
     public static boolean isStreamCancelling(Throwable cause) {
+        // TODO(minwoox): return true if the cause is "io.grpc.StatusRuntimeException: CANCELLED"
         requireNonNull(cause, "cause");
         if (cause instanceof UnprocessedRequestException) {
             cause = cause.getCause();

File: core/src/main/java/com/linecorp/armeria/internal/common/Http1ObjectEncoder.java
Patch:
@@ -345,7 +345,7 @@ protected abstract void convertTrailers(HttpHeaders inputHeaders,
                                             io.netty.handler.codec.http.HttpHeaders outputHeaders);
 
     @Override
-    public final ChannelFuture doWriteReset(int id, int streamId, Http2Error error) {
+    public final ChannelFuture doWriteReset(int id, int streamId, Http2Error error, boolean unused) {
         // NB: this.minClosedId can be overwritten more than once when 3+ pipelined requests are received
         //     and they are handled by different threads simultaneously.
         //     e.g. when the 3rd request triggers a reset and then the 2nd one triggers another.

File: core/src/main/java/com/linecorp/armeria/server/Http2ServerConnectionHandler.java
Patch:
@@ -84,9 +84,7 @@ private static KeepAliveHandler newKeepAliveHandler(
     ServerHttp2ObjectEncoder getOrCreateResponseEncoder(ChannelHandlerContext connectionHandlerCtx) {
         if (responseEncoder == null) {
             assert connectionHandlerCtx.handler() == this;
-            responseEncoder = new ServerHttp2ObjectEncoder(connectionHandlerCtx, this,
-                                                           cfg.isDateHeaderEnabled(),
-                                                           cfg.isServerHeaderEnabled());
+            responseEncoder = new ServerHttp2ObjectEncoder(connectionHandlerCtx, this);
             requestDecoder.initEncoder(responseEncoder);
         }
         return responseEncoder;

File: core/src/main/java/com/linecorp/armeria/server/ServerHttp1ObjectEncoder.java
Patch:
@@ -181,7 +181,7 @@ protected ChannelFuture write(HttpObject obj, ChannelPromise promise) {
                 // Response headers were written already. This may occur Http1RequestDecoder sends an error
                 // response while HttpResponseSubscriber writes a response headers and then waits for bodies.
                 ReferenceCountUtil.release(obj);
-                return writeReset(currentId, 1, Http2Error.PROTOCOL_ERROR);
+                return writeReset(currentId, 1, Http2Error.PROTOCOL_ERROR, false);
             }
             if (webSocketUpgraded ||
                 ((HttpResponse) obj).status().codeClass() != HttpStatusClass.INFORMATIONAL) {

File: core/src/main/java/com/linecorp/armeria/server/WebSocketServiceChannelHandler.java
Patch:
@@ -98,7 +98,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) {
                                                     .transferred(transferredLength)
                                                     .build();
                     if (encoder.isResponseHeadersSent(req.id(), 1)) {
-                        encoder.writeReset(req.id(), 1, Http2Error.PROTOCOL_ERROR);
+                        encoder.writeReset(req.id(), 1, Http2Error.PROTOCOL_ERROR, false);
                     } else {
                         encoder.writeErrorResponse(req.id(), 1, serviceConfig, req.headers(),
                                                    HttpStatus.REQUEST_ENTITY_TOO_LARGE, null, null);

File: core/src/test/java/com/linecorp/armeria/server/StreamingDecodedHttpRequestTest.java
Patch:
@@ -111,7 +111,7 @@ private static StreamingDecodedHttpRequest decodedHttpRequest(RequestHeaders hea
                 request = new StreamingDecodedHttpRequest(sctx.eventLoop(), 1, 1, headers, true,
                                                           InboundTrafficController.disabled(),
                                                           sctx.maxRequestLength(), sctx.routingContext(),
-                                                          ExchangeType.BIDI_STREAMING, 0, 0, false);
+                                                          ExchangeType.BIDI_STREAMING, 0, 0, false, false);
         request.init(sctx);
         return request;
     }

File: core/src/main/java/com/linecorp/armeria/common/AggregatedHttpResponse.java
Patch:
@@ -17,7 +17,7 @@
 package com.linecorp.armeria.common;
 
 import static com.google.common.base.Preconditions.checkArgument;
-import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.setOrRemoveContentLength;
+import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.maybeUpdateContentLengthAndEndOfStream;
 import static java.util.Objects.requireNonNull;
 
 import java.nio.charset.StandardCharsets;
@@ -253,7 +253,8 @@ static AggregatedHttpResponse of(Iterable<ResponseHeaders> informationals, Respo
         requireNonNull(trailers, "trailers");
 
         // Set the 'content-length' header if possible.
-        final ResponseHeaders newHeaders = setOrRemoveContentLength(headers, content, trailers);
+        final ResponseHeaders newHeaders =
+                maybeUpdateContentLengthAndEndOfStream(headers, content, trailers, true);
 
         return new DefaultAggregatedHttpResponse(ImmutableList.copyOf(informationals),
                                                  newHeaders, content, trailers);

File: core/src/main/java/com/linecorp/armeria/common/DefaultHttpHeadersBuilder.java
Patch:
@@ -29,7 +29,8 @@ final class DefaultHttpHeadersBuilder
     public HttpHeaders build() {
         final HttpHeadersBase delegate = delegate();
         if (delegate != null) {
-            if (delegate.isEmpty()) {
+            // The size could be empty although delegate.isContentLengthUnknown() returns true.
+            if (delegate.isEmpty() && !delegate.isContentLengthUnknown()) {
                 return delegate.isEndOfStream() ? DefaultHttpHeaders.EMPTY_EOS : DefaultHttpHeaders.EMPTY;
             } else {
                 return new DefaultHttpHeaders(promoteDelegate());

File: core/src/main/java/com/linecorp/armeria/common/RequestHeadersBuilder.java
Patch:
@@ -139,6 +139,9 @@ default RequestHeadersBuilder acceptLanguages(LanguageRange... acceptedLanguages
     @Override
     RequestHeadersBuilder contentType(MediaType contentType);
 
+    @Override
+    RequestHeadersBuilder contentLengthUnknown();
+
     @Override
     RequestHeadersBuilder contentDisposition(ContentDisposition contentDisposition);
 

File: core/src/main/java/com/linecorp/armeria/common/ResponseHeadersBuilder.java
Patch:
@@ -69,6 +69,9 @@ public interface ResponseHeadersBuilder extends HttpHeadersBuilder, ResponseHead
     @Override
     ResponseHeadersBuilder contentLength(long contentLength);
 
+    @Override
+    ResponseHeadersBuilder contentLengthUnknown();
+
     @Override
     ResponseHeadersBuilder contentType(MediaType contentType);
 

File: core/src/main/java/com/linecorp/armeria/server/Http1RequestDecoder.java
Patch:
@@ -372,7 +372,7 @@ private boolean handle100Continue(int id, HttpRequest nettyReq) {
         }
 
         // Send a '100 Continue' response.
-        encoder.writeHeaders(id, 1, CONTINUE_RESPONSE, false);
+        encoder.writeHeaders(id, 1, CONTINUE_RESPONSE, false, HttpMethod.valueOf(nettyReq.method().name()));
 
         // Remove the 'expect' header so that it's handled in a way invisible to a Service.
         nettyHeaders.remove(HttpHeaderNames.EXPECT);

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -532,7 +532,7 @@ private ChannelFuture respond(ServiceRequestContext reqCtx, ResponseHeadersBuild
 
         final ResponseHeaders immutableResHeaders = resHeaders.build();
         ChannelFuture future = responseEncoder.writeHeaders(
-                req.id(), req.streamId(), immutableResHeaders, !hasContent);
+                req.id(), req.streamId(), immutableResHeaders, !hasContent, reqCtx.method());
         logBuilder.responseHeaders(immutableResHeaders);
         if (hasContent) {
             logBuilder.increaseResponseLength(resContent);

File: core/src/main/java/com/linecorp/armeria/server/ServerHttp2ObjectEncoder.java
Patch:
@@ -18,6 +18,7 @@
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpHeadersBuilder;
+import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.ResponseHeaders;
@@ -53,7 +54,7 @@ assert keepAliveHandler() instanceof Http2ServerKeepAliveHandler ||
 
     @Override
     public ChannelFuture doWriteHeaders(int id, int streamId, ResponseHeaders headers, boolean endStream,
-                                        boolean isTrailersEmpty) {
+                                        boolean isTrailersEmpty, HttpMethod method) {
         if (!isStreamPresentAndWritable(streamId) || isResponseHeadersSent(id, streamId)) {
             // One of the following cases:
             // - Stream has been closed already.

File: core/src/main/java/com/linecorp/armeria/server/WebSocketHttp1ResponseSubscriber.java
Patch:
@@ -47,7 +47,7 @@ void onResponseHeaders(ResponseHeaders headers) {
                                      config.isDateHeaderEnabled());
         logBuilder().responseHeaders(merged);
         setState(State.NEEDS_DATA);
-        responseEncoder.writeHeaders(req.id(), req.streamId(), merged, endOfStream)
+        responseEncoder.writeHeaders(req.id(), req.streamId(), merged, endOfStream, reqCtx.method())
                        .addListener(writeHeadersFutureListener(endOfStream));
     }
 }

File: core/src/test/java/com/linecorp/armeria/common/StringMultimapDerivedApiConsistencyTest.java
Patch:
@@ -61,6 +61,8 @@ private static List<String> signature(Class<?> type) {
                          if ("endOfStream".equals(methodName) ||
                              "isEndOfStream".equals(methodName) ||
                              "contentLength".equals(methodName) ||
+                             "isContentLengthUnknown".equals(methodName) ||
+                             "contentLengthUnknown".equals(methodName) ||
                              "contentType".equals(methodName) ||
                              "contentDisposition".equals(methodName)) {
                              return false;

File: core/src/main/java/com/linecorp/armeria/common/HttpRequest.java
Patch:
@@ -300,7 +300,7 @@ static HttpRequest of(RequestHeaders headers,
         if (trailers.isEmpty()) {
             return of(headers, publisher);
         }
-        return of(headers, new SurroundingPublisher<>(null, publisher, trailers));
+        return of(headers, new SurroundingPublisher<>(null, publisher, unused -> trailers));
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/client/encoding/DecodingClientBuilder.java
Patch:
@@ -35,9 +35,7 @@
  */
 public final class DecodingClientBuilder {
 
-    private List<StreamDecoderFactory> decoderFactories = ImmutableList.of(StreamDecoderFactory.brotli(),
-                                                                           StreamDecoderFactory.gzip(),
-                                                                           StreamDecoderFactory.deflate());
+    private List<StreamDecoderFactory> decoderFactories = StreamDecoderFactory.all();
 
     private boolean autoFillAcceptEncoding = true;
     private boolean strictContentEncoding;

File: core/src/main/java/com/linecorp/armeria/server/encoding/DecodingService.java
Patch:
@@ -53,8 +53,7 @@ public final class DecodingService extends SimpleDecoratingHttpService {
      * and 'brotli'.
      */
     public static Function<? super HttpService, DecodingService> newDecorator() {
-        return newDecorator(ImmutableList.of(StreamDecoderFactory.gzip(), StreamDecoderFactory.deflate(),
-                                             StreamDecoderFactory.brotli()));
+        return newDecorator(StreamDecoderFactory.all());
     }
 
     /**

File: core/src/test/java/com/linecorp/armeria/server/file/DefaultMediaTypeResolverTest.java
Patch:
@@ -41,6 +41,8 @@ public void knownExtensions() {
     public void preCompressed() {
         assertThat(MediaType.PNG.is(RESOLVER.guessFromPath("image.png.gz", "gzip"))).isTrue();
         assertThat(MediaType.PNG.is(RESOLVER.guessFromPath("/static/image.png.br", "brotli"))).isTrue();
+        assertThat(MediaType.PNG.is(RESOLVER.guessFromPath("/static/image.png.sz", "x-snappy-framed")))
+                .isTrue();
         assertThat(MediaType.OCTET_STREAM.is(RESOLVER.guessFromPath("image.png.bin", "identity"))).isTrue();
         assertThat(MediaType.OCTET_STREAM.is(RESOLVER.guessFromPath("image.png.bin", null))).isTrue();
     }

File: core/src/main/java/com/linecorp/armeria/server/annotation/ExceptionHandler.java
Patch:
@@ -32,8 +32,7 @@
 public @interface ExceptionHandler {
 
     /**
-     * {@link ExceptionHandlerFunction} implementation type. The specified class must have an accessible
-     * default constructor.
+     * {@link ExceptionHandlerFunction} implementation type.
      */
     Class<? extends ExceptionHandlerFunction> value();
 }

File: examples/tutorials/grpc/src/main/java/example/armeria/server/blog/grpc/GrpcExceptionHandler.java
Patch:
@@ -2,12 +2,12 @@
 
 import com.linecorp.armeria.common.RequestContext;
 import com.linecorp.armeria.common.annotation.Nullable;
-import com.linecorp.armeria.common.grpc.GrpcStatusFunction;
+import com.linecorp.armeria.common.grpc.GrpcExceptionHandlerFunction;
 
 import io.grpc.Metadata;
 import io.grpc.Status;
 
-class GrpcExceptionHandler implements GrpcStatusFunction {
+class GrpcExceptionHandler implements GrpcExceptionHandlerFunction {
 
     @Nullable
     @Override

File: examples/tutorials/grpc/src/main/java/example/armeria/server/blog/grpc/Main.java
Patch:
@@ -34,7 +34,7 @@ private static Server newServer(int port) throws Exception {
                 GrpcService.builder()
                            .addService(new BlogService())
                            .enableUnframedRequests(true)
-                           .exceptionMapping(new GrpcExceptionHandler())
+                           .exceptionHandler(new GrpcExceptionHandler())
                            // You can set useBlockingTaskExecutor(true) in order to execute all gRPC methods in
                            // the blockingTaskExecutor thread pool.
                            // .useBlockingTaskExecutor(true)

File: examples/tutorials/grpc/src/test/java/example/armeria/server/blog/grpc/BlogServiceTest.java
Patch:
@@ -41,7 +41,7 @@ class BlogServiceTest {
         protected void configure(ServerBuilder sb) throws Exception {
             sb.service(GrpcService.builder()
                                   .addService(new BlogService())
-                                  .exceptionMapping(new GrpcExceptionHandler())
+                                  .exceptionHandler(new GrpcExceptionHandler())
                                   .build());
         }
     };

File: grpc/src/main/java/com/linecorp/armeria/common/grpc/GrpcStatusFunction.java
Patch:
@@ -25,8 +25,11 @@
 
 /**
  * A mapping function that converts a {@link Throwable} into a gRPC {@link Status}.
+ *
+ * @deprecated Use {@link GrpcExceptionHandlerFunction} instead.
  */
 @UnstableApi
+@Deprecated
 @FunctionalInterface
 public interface GrpcStatusFunction {
 

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/UnframedGrpcServiceTest.java
Patch:
@@ -175,7 +175,7 @@ void succeedWithAllRequiredHeaders() throws Exception {
     }
 
     @Test
-    void unframedGrpcStatusFunction() throws Exception {
+    void unframedGrpcExceptionHandlerFunctions() throws Exception {
         final TestService spyTestService = spy(testService);
         doThrow(Status.UNKNOWN.withDescription("grpc error message").asRuntimeException())
                 .when(spyTestService)
@@ -198,7 +198,7 @@ void unframedGrpcStatusFunction() throws Exception {
     }
 
     @Test
-    void unframedGrpcStatusFunction_default() throws Exception {
+    void unframedGrpcExceptionHandlerFunctions_default() throws Exception {
         final TestService spyTestService = spy(testService);
         doThrow(Status.UNKNOWN.withDescription("grpc error message").asRuntimeException())
                 .when(spyTestService)
@@ -214,7 +214,7 @@ void unframedGrpcStatusFunction_default() throws Exception {
     }
 
     @Test
-    void unframedGrpcStatusFunction_orElse() throws Exception {
+    void unframedGrpcExceptionHandlerFunctions_orElse() throws Exception {
         final TestService spyTestService = spy(testService);
         doThrow(Status.UNKNOWN.withDescription("grpc error message").asRuntimeException())
                 .when(spyTestService)

File: it/grpc/reactor/src/test/java/com/linecorp/armeria/grpc/reactor/TestServiceImpl.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.time.Duration;
 
-import com.linecorp.armeria.common.grpc.GrpcStatusFunction;
+import com.linecorp.armeria.common.grpc.GrpcExceptionHandlerFunction;
 
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
@@ -45,7 +45,8 @@ public Flux<HelloReply> lotsOfRepliesWithoutScheduler(Mono<HelloRequest> request
     }
 
     /**
-     * Throws an {@link AuthException}, and the exception will be handled by {@link GrpcStatusFunction}.
+     * Throws an {@link AuthException}, and the exception will be handled
+     * by {@link GrpcExceptionHandlerFunction}.
      */
     @Override
     public Mono<HelloReply> helloError(Mono<HelloRequest> request) {

File: it/grpc/reactor/src/test/java/com/linecorp/armeria/grpc/reactor/TestServiceTest.java
Patch:
@@ -60,7 +60,7 @@ private static Server newServer(int httpPort) {
         final HttpServiceWithRoutes grpcService =
                 GrpcService.builder()
                            .addService(new TestServiceImpl())
-                           .exceptionMapping((ctx, throwable, metadata) -> {
+                           .exceptionHandler((ctx, throwable, metadata) -> {
                                if (throwable instanceof TestServiceImpl.AuthException) {
                                    return Status.UNAUTHENTICATED.withDescription(throwable.getMessage())
                                                                 .withCause(throwable);

File: tomcat10/src/main/java/com/linecorp/armeria/internal/server/tomcat/Tomcat90ProtocolHandler.java
Patch:
@@ -135,6 +135,9 @@ public boolean isSendfileSupported() {
     @Override
     public void addSslHostConfig(SSLHostConfig sslHostConfig) {}
 
+    @Override
+    public void addSslHostConfig(SSLHostConfig sslHostConfig, boolean replace) {}
+
     @Override
     @SuppressWarnings("ZeroLengthArrayAllocation")
     public SSLHostConfig[] findSslHostConfigs() {

File: core/src/test/java/com/linecorp/armeria/server/VirtualHostAnnotatedServiceBindingBuilderTest.java
Patch:
@@ -107,7 +107,7 @@ void testAllConfigsAreSet() {
                 .multipartUploadsLocation(multipartUploadsLocation)
                 .requestIdGenerator(serviceRequestIdGenerator)
                 .build(new TestService())
-                .build(template, noopDependencyInjector, null);
+                .build(template, noopDependencyInjector, null, ServerErrorHandler.ofDefault());
 
         assertThat(virtualHost.serviceConfigs()).hasSize(2);
         final ServiceConfig pathBar = virtualHost.serviceConfigs().get(0);

File: core/src/main/java/com/linecorp/armeria/server/Http2ServerConnectionHandlerBuilder.java
Patch:
@@ -42,6 +42,8 @@ final class Http2ServerConnectionHandlerBuilder
         // Disable graceful shutdown timeout in a super class. Server-side HTTP/2 graceful shutdown is
         // handled by Armeria's HTTP/2 server handler.
         gracefulShutdownTimeoutMillis(-1);
+        decoderEnforceMaxRstFramesPerWindow(config.http2MaxResetFramesPerWindow(),
+                                            config.http2MaxResetFramesWindowSeconds());
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/common/CommonPools.java
Patch:
@@ -17,6 +17,7 @@
 package com.linecorp.armeria.common;
 
 import com.linecorp.armeria.client.ClientFactoryBuilder;
+import com.linecorp.armeria.common.metric.MeterIdPrefix;
 import com.linecorp.armeria.common.metric.MoreMeterBinders;
 import com.linecorp.armeria.common.util.BlockingTaskExecutor;
 import com.linecorp.armeria.common.util.EventLoopGroups;
@@ -38,7 +39,7 @@ public final class CommonPools {
     static {
         // Bind EventLoopMetrics for the common worker group.
         MoreMeterBinders
-                .eventLoopMetrics(WORKER_GROUP, "common")
+                .eventLoopMetrics(WORKER_GROUP, new MeterIdPrefix("armeria.netty.common"))
                 .bindTo(Flags.meterRegistry());
     }
 

File: core/src/main/java/com/linecorp/armeria/common/Flags.java
Patch:
@@ -560,7 +560,7 @@ private static void setUseOpenSslAndDumpOpenSslInfo() {
                     SslContextBuilder::forClient,
                     /* forceHttp1 */ false,
                     /* tlsAllowUnsafeCiphers */ false,
-                    ImmutableList.of()).newEngine(ByteBufAllocator.DEFAULT);
+                    ImmutableList.of(), null).newEngine(ByteBufAllocator.DEFAULT);
             logger.info("All available SSL protocols: {}",
                         ImmutableList.copyOf(engine.getSupportedProtocols()));
             logger.info("Default enabled SSL protocols: {}", SslContextUtil.DEFAULT_PROTOCOLS);

File: core/src/main/java/com/linecorp/armeria/common/metric/EventLoopMetrics.java
Patch:
@@ -49,9 +49,9 @@ final class EventLoopMetrics implements MeterBinder {
     /**
      * Creates an instance of {@link EventLoopMetrics}.
      */
-    EventLoopMetrics(EventLoopGroup eventLoopGroup, String name) {
+    EventLoopMetrics(EventLoopGroup eventLoopGroup, MeterIdPrefix idPrefix) {
         this.eventLoopGroup = requireNonNull(eventLoopGroup, "eventLoopGroup");
-        idPrefix = new MeterIdPrefix("armeria.netty").append(requireNonNull(name, "name"));
+        this.idPrefix = idPrefix;
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/server/HttpServerPipelineConfigurator.java
Patch:
@@ -54,6 +54,7 @@
 import com.linecorp.armeria.internal.common.NoopKeepAliveHandler;
 import com.linecorp.armeria.internal.common.ReadSuppressingHandler;
 import com.linecorp.armeria.internal.common.TrafficLoggingHandler;
+import com.linecorp.armeria.internal.common.util.CertificateUtil;
 import com.linecorp.armeria.internal.common.util.ChannelUtil;
 
 import io.micrometer.core.instrument.Counter;

File: core/src/main/java/com/linecorp/armeria/server/ServerSslContextUtil.java
Patch:
@@ -100,7 +100,7 @@ static SslContext buildSslContext(
             Iterable<? extends Consumer<? super SslContextBuilder>> tlsCustomizers) {
         return SslContextUtil
                 .createSslContext(sslContextBuilderSupplier,
-                        /* forceHttp1 */ false, tlsAllowUnsafeCiphers, tlsCustomizers);
+                        /* forceHttp1 */ false, tlsAllowUnsafeCiphers, tlsCustomizers, null);
     }
 
     private static void unwrap(SSLEngine engine, ByteBuffer packetBuf) throws SSLException {

File: core/src/test/java/com/linecorp/armeria/server/ServerTlsCertificateMetricsTest.java
Patch:
@@ -33,7 +33,7 @@
 import io.micrometer.core.instrument.Gauge;
 import io.micrometer.core.instrument.MeterRegistry;
 
-class ServerTlsCertificateMetricsTest {
+public class ServerTlsCertificateMetricsTest {
 
     private static final String RESOURCE_PATH_PREFIX =
             "/testing/core/" + ServerTlsCertificateMetricsTest.class.getSimpleName() + '/';
@@ -130,15 +130,15 @@ void tlsMetricGivenVirtualHostCertificateNotExpired() throws CertificateExceptio
 
     @Test
     void tlsMetricGivenCertificateChainNotExpired() {
-        final InputStream expiredCertificateChain = getClass().getResourceAsStream(
+        final InputStream certificateChain = getClass().getResourceAsStream(
                 RESOURCE_PATH_PREFIX + "certificate-chain.pem");
         final InputStream pk = getClass().getResourceAsStream(RESOURCE_PATH_PREFIX + "pk.key");
 
         final MeterRegistry meterRegistry = PrometheusMeterRegistries.newRegistry();
         Server.builder()
               .service("/", (ctx, req) -> HttpResponse.of(200))
               .meterRegistry(meterRegistry)
-              .tls(expiredCertificateChain, pk)
+              .tls(certificateChain, pk)
               .build();
 
         assertThatGauge(meterRegistry, CERT_VALIDITY_GAUGE_NAME, "localhost").isOne();

File: core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java
Patch:
@@ -17,7 +17,6 @@
 package com.linecorp.armeria.client;
 
 import static com.google.common.base.MoreObjects.firstNonNull;
-import static com.linecorp.armeria.client.ClientRequestContextBuilder.noopResponseCancellationScheduler;
 import static com.linecorp.armeria.common.SessionProtocol.H1;
 import static com.linecorp.armeria.common.SessionProtocol.H1C;
 import static com.linecorp.armeria.common.SessionProtocol.H2;
@@ -57,6 +56,7 @@
 import com.linecorp.armeria.internal.client.UserAgentUtil;
 import com.linecorp.armeria.internal.common.ArmeriaHttp2HeadersDecoder;
 import com.linecorp.armeria.internal.common.ArmeriaHttpUtil;
+import com.linecorp.armeria.internal.common.CancellationScheduler;
 import com.linecorp.armeria.internal.common.ReadSuppressingHandler;
 import com.linecorp.armeria.internal.common.TrafficLoggingHandler;
 import com.linecorp.armeria.internal.common.util.ChannelUtil;
@@ -547,7 +547,7 @@ public void onComplete() {}
                     com.linecorp.armeria.common.HttpMethod.OPTIONS,
                     RequestTarget.forClient("*"), ClientOptions.of(),
                     HttpRequest.of(com.linecorp.armeria.common.HttpMethod.OPTIONS, "*"),
-                    null, REQUEST_OPTIONS_FOR_UPGRADE_REQUEST, noopResponseCancellationScheduler,
+                    null, REQUEST_OPTIONS_FOR_UPGRADE_REQUEST, CancellationScheduler.noop(),
                     System.nanoTime(), SystemInfo.currentTimeMicros());
 
             // NB: No need to set the response timeout because we have session creation timeout.

File: core/src/main/java/com/linecorp/armeria/internal/client/DefaultClientRequestContext.java
Patch:
@@ -226,7 +226,7 @@ private DefaultClientRequestContext(
                 responseTimeoutMillis = options().responseTimeoutMillis();
             }
             this.responseCancellationScheduler =
-                    new CancellationScheduler(TimeUnit.MILLISECONDS.toNanos(responseTimeoutMillis));
+                    CancellationScheduler.of(TimeUnit.MILLISECONDS.toNanos(responseTimeoutMillis));
         } else {
             this.responseCancellationScheduler = responseCancellationScheduler;
         }
@@ -504,7 +504,7 @@ private DefaultClientRequestContext(DefaultClientRequestContext ctx,
         log = RequestLog.builder(this);
         log.startRequest();
         responseCancellationScheduler =
-                new CancellationScheduler(TimeUnit.MILLISECONDS.toNanos(ctx.responseTimeoutMillis()));
+                CancellationScheduler.of(TimeUnit.MILLISECONDS.toNanos(ctx.responseTimeoutMillis()));
         writeTimeoutMillis = ctx.writeTimeoutMillis();
         maxResponseLength = ctx.maxResponseLength();
 

File: core/src/main/java/com/linecorp/armeria/internal/server/DefaultServiceRequestContext.java
Patch:
@@ -174,7 +174,7 @@ public DefaultServiceRequestContext(
             this.requestCancellationScheduler = requestCancellationScheduler;
         } else {
             this.requestCancellationScheduler =
-                    new CancellationScheduler(TimeUnit.MILLISECONDS.toNanos(cfg.requestTimeoutMillis()));
+                    CancellationScheduler.of(TimeUnit.MILLISECONDS.toNanos(cfg.requestTimeoutMillis()));
         }
         this.sslSession = sslSession;
         this.proxiedAddresses = requireNonNull(proxiedAddresses, "proxiedAddresses");

File: core/src/test/java/com/linecorp/armeria/internal/client/DefaultClientRequestContextTest.java
Patch:
@@ -300,7 +300,7 @@ private static DefaultClientRequestContext newContext(ClientOptions clientOption
         return new DefaultClientRequestContext(
                 mock(EventLoop.class), NoopMeterRegistry.get(), SessionProtocol.H2C,
                 RequestId.random(), HttpMethod.POST, reqTarget, clientOptions, httpRequest,
-                null, RequestOptions.of(), new CancellationScheduler(0), System.nanoTime(),
+                null, RequestOptions.of(), CancellationScheduler.of(0), System.nanoTime(),
                 SystemInfo.currentTimeMicros());
     }
 

File: core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java
Patch:
@@ -1132,7 +1132,7 @@ public ServerBuilder tlsAllowUnsafeCiphers(boolean tlsAllowUnsafeCiphers) {
      * @see ContextPathServicesBuilder
      */
     @UnstableApi
-    public ContextPathServicesBuilder<ServerBuilder> contextPath(String... contextPaths) {
+    public ContextPathServicesBuilder contextPath(String... contextPaths) {
         return contextPath(ImmutableSet.copyOf(requireNonNull(contextPaths, "contextPaths")));
     }
 
@@ -1143,9 +1143,9 @@ public ContextPathServicesBuilder<ServerBuilder> contextPath(String... contextPa
      * @see ContextPathServicesBuilder
      */
     @UnstableApi
-    public ContextPathServicesBuilder<ServerBuilder> contextPath(Iterable<String> contextPaths) {
+    public ContextPathServicesBuilder contextPath(Iterable<String> contextPaths) {
         requireNonNull(contextPaths, "contextPaths");
-        return new ContextPathServicesBuilder<>(
+        return new ContextPathServicesBuilder(
                 this, defaultVirtualHostBuilder, ImmutableSet.copyOf(contextPaths));
     }
 

File: core/src/test/java/com/linecorp/armeria/server/AbstractAnnotatedServiceConfigSettersTest.java
Patch:
@@ -29,6 +29,8 @@ class AbstractAnnotatedServiceConfigSettersTest {
 
     @ParameterizedTest
     @ValueSource(classes = {
+            ContextPathAnnotatedServiceConfigSetters.class,
+            VirtualHostContextPathAnnotatedServiceConfigSetters.class,
             VirtualHostAnnotatedServiceBindingBuilder.class,
             AnnotatedServiceBindingBuilder.class
     })

File: core/src/test/java/com/linecorp/armeria/server/AbstractBindingBuilderTest.java
Patch:
@@ -129,7 +129,9 @@ void nonEmptyMethod() {
     @ParameterizedTest
     @ValueSource(classes = {
             ContextPathDecoratingBindingBuilder.class,
+            VirtualHostContextPathDecoratingBindingBuilder.class,
             ContextPathServiceBindingBuilder.class,
+            VirtualHostContextPathServiceBindingBuilder.class,
             DecoratingServiceBindingBuilder.class,
             ServiceBindingBuilder.class,
             VirtualHostDecoratingServiceBindingBuilder.class,

File: core/src/test/java/com/linecorp/armeria/server/AbstractServiceBindingBuilderTest.java
Patch:
@@ -32,6 +32,7 @@ class AbstractServiceBindingBuilderTest {
     @ParameterizedTest
     @ValueSource(classes = {
             ContextPathServiceBindingBuilder.class,
+            VirtualHostContextPathServiceBindingBuilder.class,
             ServiceBindingBuilder.class,
             VirtualHostServiceBindingBuilder.class,
     })

File: it/builders/src/test/java/com/linecorp/armeria/OverriddenBuilderMethodsReturnTypeTest.java
Patch:
@@ -53,7 +53,9 @@ void methodChaining() {
                                                final Method overriddenMethod =
                                                        clazz.getDeclaredMethod(m.getName(),
                                                                                m.getParameterTypes());
-                                               assertThat(overriddenMethod.getReturnType()).isSameAs(clazz);
+                                               assertThat(overriddenMethod.getReturnType())
+                                                       .describedAs("Method name: " + m)
+                                                       .isSameAs(clazz);
                                            } catch (NoSuchMethodException e) {
                                                // ignored
                                            }

File: core/src/main/java/com/linecorp/armeria/internal/server/RouteDecoratingService.java
Patch:
@@ -85,9 +85,9 @@ public static Function<? super HttpService, InitialDispatcherService> newDecorat
     private final Route route;
     private final HttpService decorator;
 
-    public RouteDecoratingService(Route route,
+    public RouteDecoratingService(Route route, String contextPath,
                                   Function<? super HttpService, ? extends HttpService> decoratorFunction) {
-        this.route = requireNonNull(route, "route");
+        this.route = requireNonNull(route, "route").withPrefix(contextPath);
         decorator = requireNonNull(decoratorFunction, "decoratorFunction").apply(this);
     }
 

File: core/src/main/java/com/linecorp/armeria/server/DecoratingServiceBindingBuilder.java
Patch:
@@ -52,6 +52,7 @@ public final class DecoratingServiceBindingBuilder extends AbstractBindingBuilde
     private final ServerBuilder serverBuilder;
 
     DecoratingServiceBindingBuilder(ServerBuilder serverBuilder) {
+        super(EMPTY_CONTEXT_PATHS);
         this.serverBuilder = requireNonNull(serverBuilder, "serverBuilder");
     }
 
@@ -196,7 +197,7 @@ public DecoratingServiceBindingBuilder exclude(Route excludedRoute) {
     public ServerBuilder build(Function<? super HttpService, ? extends HttpService> decorator) {
         requireNonNull(decorator, "decorator");
         buildRouteList().forEach(
-                route -> serverBuilder.routingDecorator(new RouteDecoratingService(route, decorator)));
+                route -> serverBuilder.routingDecorator(new RouteDecoratingService(route, "/", decorator)));
         return serverBuilder;
     }
 

File: core/src/main/java/com/linecorp/armeria/server/ServiceBindingBuilder.java
Patch:
@@ -68,6 +68,7 @@ public final class ServiceBindingBuilder extends AbstractServiceBindingBuilder {
     private Route mappedRoute;
 
     ServiceBindingBuilder(ServerBuilder serverBuilder) {
+        super(EMPTY_CONTEXT_PATHS);
         this.serverBuilder = requireNonNull(serverBuilder, "serverBuilder");
     }
 
@@ -353,6 +354,7 @@ public ServiceBindingBuilder errorHandler(ServiceErrorHandler serviceErrorHandle
      * @throws IllegalStateException if the path that the {@link HttpService} will be bound to is not specified
      */
     public ServerBuilder build(HttpService service) {
+        requireNonNull(service, "service");
         if (mappedRoute != null) {
             // mappedRoute is only set when the service is an HttpServiceWithRoutes
             assert service.as(HttpServiceWithRoutes.class) != null;

File: core/src/main/java/com/linecorp/armeria/server/ServiceConfigBuilder.java
Patch:
@@ -79,8 +79,8 @@ final class ServiceConfigBuilder implements ServiceConfigSetters {
     @Nullable
     private Function<? super RoutingContext, ? extends RequestId> requestIdGenerator;
 
-    ServiceConfigBuilder(Route route, HttpService service) {
-        this.route = requireNonNull(route, "route");
+    ServiceConfigBuilder(Route route, String contextPath, HttpService service) {
+        this.route = requireNonNull(route, "route").withPrefix(contextPath);
         this.service = requireNonNull(service, "service");
     }
 

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostDecoratingServiceBindingBuilder.java
Patch:
@@ -53,6 +53,7 @@ public final class VirtualHostDecoratingServiceBindingBuilder extends AbstractBi
     private final VirtualHostBuilder virtualHostBuilder;
 
     VirtualHostDecoratingServiceBindingBuilder(VirtualHostBuilder virtualHostBuilder) {
+        super(EMPTY_CONTEXT_PATHS);
         this.virtualHostBuilder = requireNonNull(virtualHostBuilder, "virtualHostBuilder");
     }
 
@@ -197,7 +198,7 @@ public VirtualHostDecoratingServiceBindingBuilder exclude(Route excludedRoute) {
     public VirtualHostBuilder build(Function<? super HttpService, ? extends HttpService> decorator) {
         requireNonNull(decorator, "decorator");
         buildRouteList().forEach(route -> virtualHostBuilder.addRouteDecoratingService(
-                new RouteDecoratingService(route, decorator)));
+                new RouteDecoratingService(route, "/", decorator)));
         return virtualHostBuilder;
     }
 

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostServiceBindingBuilder.java
Patch:
@@ -66,6 +66,7 @@ public final class VirtualHostServiceBindingBuilder extends AbstractServiceBindi
     private final VirtualHostBuilder virtualHostBuilder;
 
     VirtualHostServiceBindingBuilder(VirtualHostBuilder virtualHostBuilder) {
+        super(EMPTY_CONTEXT_PATHS);
         this.virtualHostBuilder = requireNonNull(virtualHostBuilder, "virtualHostBuilder");
     }
 
@@ -353,6 +354,7 @@ public VirtualHostServiceBindingBuilder errorHandler(ServiceErrorHandler service
      * @throws IllegalStateException if the path that the {@link HttpService} will be bound to is not specified
      */
     public VirtualHostBuilder build(HttpService service) {
+        requireNonNull(service, "service");
         build0(service);
         return virtualHostBuilder;
     }

File: core/src/main/java/com/linecorp/armeria/server/DefaultRoute.java
Patch:
@@ -300,6 +300,9 @@ public RouteBuilder toBuilder() {
     @Override
     public Route withPrefix(String prefix) {
         requireNonNull(prefix, "prefix");
+        if ("/".equals(prefix)) {
+            return this;
+        }
         return new DefaultRoute(pathMapping.withPrefix(prefix), methods, consumes, produces, paramPredicates,
                                 headerPredicates, isFallback, excludedRoutes);
     }

File: core/src/main/java/com/linecorp/armeria/client/AbstractHttpRequestHandler.java
Patch:
@@ -165,7 +165,8 @@ final boolean tryInitialize() {
                         " in one connection. ID: " + id);
             } else {
                 exception = new ClosedSessionException(
-                        "Can't send requests. ID: " + id + ", session active: " + session.isAcquirable());
+                        "Can't send requests. ID: " + id + ", session active: " +
+                        session.isAcquirable(responseDecoder.keepAliveHandler()));
             }
             session.deactivate();
             // No need to send RST because we didn't send any packet and this will be disconnected anyway.

File: core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java
Patch:
@@ -53,6 +53,6 @@ HttpResponseWrapper addResponse(
     KeepAliveHandler keepAliveHandler();
 
     default boolean needsToDisconnectNow() {
-        return !session().isAcquirable() && !hasUnfinishedResponses();
+        return !session().isAcquirable(keepAliveHandler()) && !hasUnfinishedResponses();
     }
 }

File: core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java
Patch:
@@ -480,7 +480,7 @@ private void cleanupObjects(@Nullable Throwable cause) {
                 continue;
             }
 
-            if (e instanceof CompletableFuture) {
+            if (e instanceof AwaitDemandFuture) {
                 if (cause == null) {
                     cause = ClosedStreamException.get();
                 }

File: core/src/test/java/com/linecorp/armeria/client/InitiateConnectionShutdownTest.java
Patch:
@@ -106,6 +106,7 @@ void testConnectionShutdownCompletedExceptionallyWhenChannelNotAcquired(SessionP
             }
 
             assertNoOpenedConnectionNow(countingListener);
+            await().untilAsserted(() -> assertThat(completedResult.get().completed).isTrue());
             assertThat(completedResult.get().exception).isInstanceOf(UnprocessedRequestException.class);
             assertThat(completedResult.get().exception.getCause()).isSameAs(notAcquiredCause);
         }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/PropertiesEndpointGroup.java
Patch:
@@ -233,8 +233,6 @@ protected void doCloseAsync(CompletableFuture<?> future) {
 
     @Override
     public String toString() {
-        return toStringHelper()
-                .add("watchRegisterKey", watchRegisterKey)
-                .toString();
+        return toString(buf -> buf.append(", watchRegisterKey=").append(watchRegisterKey));
     }
 }

File: eureka/src/main/java/com/linecorp/armeria/client/eureka/EurekaEndpointGroup.java
Patch:
@@ -419,8 +419,6 @@ private static Endpoint endpoint(InstanceInfo instanceInfo, boolean secureVip) {
 
     @Override
     public String toString() {
-        return toStringHelper()
-                .add("requestHeaders", requestHeaders)
-                .toString();
+        return toString(buf -> buf.append(", requestHeaders=").append(requestHeaders));
     }
 }

File: core/src/main/java/com/linecorp/armeria/common/HttpResponseBuilder.java
Patch:
@@ -28,7 +28,6 @@
 import com.google.errorprone.annotations.FormatString;
 
 import com.linecorp.armeria.common.annotation.UnstableApi;
-import com.linecorp.armeria.common.stream.StreamMessage;
 
 /**
  * Builds a new {@link HttpResponse}.
@@ -299,8 +298,7 @@ public HttpResponse build() {
             if (trailers == null) {
                 return HttpResponse.of(responseHeaders, publisher);
             } else {
-                return HttpResponse.of(responseHeaders,
-                                       StreamMessage.concat(publisher, StreamMessage.of(trailers.build())));
+                return HttpResponse.of(responseHeaders, publisher, trailers.build());
             }
         }
     }

File: spring/boot3-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/AbstractServerHttpResponse.java
Patch:
@@ -45,7 +45,6 @@
 import org.springframework.core.io.buffer.DataBufferUtils;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.ResponseCookie;
-import org.springframework.http.server.reactive.ChannelSendOperator;
 import org.springframework.http.server.reactive.ServerHttpResponse;
 import org.springframework.lang.Nullable;
 import org.springframework.util.CollectionUtils;

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/InvalidGrpcMetadataTest.java
Patch:
@@ -56,7 +56,7 @@
 import testing.grpc.TestServiceGrpc;
 import testing.grpc.TestServiceGrpc.TestServiceBlockingStub;
 
-class GrpcServiceImplErrorTest {
+class InvalidGrpcMetadataTest {
 
     // Valid metadata has even count of binaryValues.
     private static final Metadata validMetadata = InternalMetadata.newMetadata(
@@ -144,7 +144,7 @@ void clientUnaryCall2ForServerUsingCorruptedInterceptor() throws InterruptedExce
             final ServiceRequestContextCaptor serviceCaptor = server.requestContextCaptor();
             assertThat(serviceCaptor.size()).isEqualTo(1);
             final ServiceRequestContext serviceCtx = serviceCaptor.take();
-            assertThat(serviceCtx.log().ensureComplete().responseCause())
+            assertThat(serviceCtx.log().whenComplete().join().responseCause())
                     .isInstanceOf(StatusRuntimeException.class)
                     .satisfies(cause -> {
                         assertThat(Status.fromThrowable(cause).getCode()).isEqualTo(

File: core/src/main/java/com/linecorp/armeria/server/docs/DocStringSupport.java
Patch:
@@ -45,7 +45,8 @@ ServiceSpecification addDocStrings(ServiceSpecification spec) {
                 spec.enums().stream().map(this::addEnumDocStrings).collect(toImmutableList()),
                 spec.structs().stream().map(this::addStructDocStrings).collect(toImmutableList()),
                 spec.exceptions().stream().map(this::addExceptionDocStrings).collect(toImmutableList()),
-                spec.exampleHeaders());
+                spec.exampleHeaders(),
+                spec.docServiceRoute());
     }
 
     private ServiceInfo addServiceDocStrings(ServiceInfo service) {

File: logback/logback13/src/main/java/com/linecorp/armeria/common/logback/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 LINE Corporation
+ * Copyright 2016 LINE Corporation
  *
  * LINE Corporation licenses this file to you under the Apache License,
  * version 2.0 (the "License"); you may not use this file except in compliance

File: core/src/test/java/com/linecorp/armeria/server/FallbackServiceTest.java
Patch:
@@ -144,6 +144,7 @@ void maxContentLengthWithFallbackService(SessionProtocol protocol) throws Interr
         // allowed length.
         final AggregatedHttpResponse agg = response.aggregate().join();
         assertThat(agg.status()).isEqualTo(HttpStatus.NOT_FOUND);
+        assertThat(agg.contentUtf8()).startsWith("Status: 404\n");
         final ServiceRequestContext sctx = lengthLimitServer.requestContextCaptor().take();
         final RequestLog log = sctx.log().whenComplete().join();
         // Make sure that the response was correctly logged.
@@ -167,6 +168,7 @@ void maxContentLengthWithLateResponse(SessionProtocol protocol) throws Interrupt
         // response instead.
         final AggregatedHttpResponse agg = response.aggregate().join();
         assertThat(agg.status()).isEqualTo(HttpStatus.REQUEST_ENTITY_TOO_LARGE);
+        assertThat(agg.contentUtf8()).startsWith("Status: 413\n");
         final ServiceRequestContext sctx = lengthLimitServerWithDecorator.requestContextCaptor().take();
         final RequestLog log = sctx.log().whenComplete().join();
         // Make sure that the response was correctly logged.

File: core/src/test/java/com/linecorp/armeria/server/HttpServerStreamingTest.java
Patch:
@@ -165,7 +165,7 @@ void testTooLargeContentToNonExistentService(WebClient client) throws Exception
         final byte[] content = new byte[maxContentLength + 1];
         final AggregatedHttpResponse res = client.post("/non-existent", content).aggregate().get();
         assertThat(res.status()).isSameAs(HttpStatus.NOT_FOUND);
-        assertThat(res.content().isEmpty()).isTrue();
+        assertThat(res.contentUtf8()).startsWith("Status: 404\n");
     }
 
     @ParameterizedTest

File: core/src/test/java/com/linecorp/armeria/server/HttpServerTest.java
Patch:
@@ -601,8 +601,7 @@ void testTooLargeContentToNonExistentService(WebClient client) {
         final byte[] content = new byte[(int) MAX_CONTENT_LENGTH + 1];
         final AggregatedHttpResponse res = client.post("/non-existent", content).aggregate().join();
         assertThat(res.status()).isSameAs(HttpStatus.NOT_FOUND);
-        // `FallbackService` does not send a response body.
-        assertThat(res.content().isEmpty()).isTrue();
+        assertThat(res.contentUtf8()).startsWith("Status: 404\n");
     }
 
     @ParameterizedTest

File: core/src/main/java/com/linecorp/armeria/internal/server/FileAggregatedMultipart.java
Patch:
@@ -73,7 +73,8 @@ public static CompletableFuture<FileAggregatedMultipart> aggregateMultipart(Serv
                     return bodyPart.writeTo(path, eventLoop, executor).thenCompose(ignore -> {
                         final Path completeDir = destination.resolve("complete");
                         return moveFile(path, completeDir, executor);
-                    }).thenApply(completePath -> MultipartFile.of(name, filename, completePath.toFile()));
+                    }).thenApply(completePath -> MultipartFile.of(name, filename, completePath.toFile(),
+                                                                  bodyPart.headers()));
                 });
             }
 

File: core/src/main/java/com/linecorp/armeria/client/Http1ClientKeepAliveHandler.java
Patch:
@@ -45,9 +45,10 @@ final class Http1ClientKeepAliveHandler extends Http1KeepAliveHandler {
 
     Http1ClientKeepAliveHandler(Channel channel, Http1ResponseDecoder decoder,
                                 Timer keepAliveTimer, long idleTimeoutMillis, long pingIntervalMillis,
-                                long maxConnectionAgeMillis, int maxNumRequestsPerConnection) {
+                                long maxConnectionAgeMillis, int maxNumRequestsPerConnection,
+                                boolean keepAliveOnPing) {
         super(channel, "client", keepAliveTimer, idleTimeoutMillis,
-              pingIntervalMillis, maxConnectionAgeMillis, maxNumRequestsPerConnection);
+              pingIntervalMillis, maxConnectionAgeMillis, maxNumRequestsPerConnection, keepAliveOnPing);
         httpSession = HttpSession.get(requireNonNull(channel, "channel"));
         this.decoder = requireNonNull(decoder, "decoder");
     }

File: core/src/main/java/com/linecorp/armeria/client/Http2ClientConnectionHandler.java
Patch:
@@ -57,6 +57,7 @@ private static KeepAliveHandler newKeepAliveHandler(
             HttpClientFactory clientFactory, SessionProtocol protocol) {
 
         final long idleTimeoutMillis = clientFactory.idleTimeoutMillis();
+        final boolean keepAliveOnPing = clientFactory.keepAliveOnPing();
         final long pingIntervalMillis = clientFactory.pingIntervalMillis();
         final long maxConnectionAgeMillis = clientFactory.maxConnectionAgeMillis();
         final int maxNumRequestsPerConnection = clientFactory.maxNumRequestsPerConnection();
@@ -72,7 +73,8 @@ private static KeepAliveHandler newKeepAliveHandler(
                                     ImmutableList.of(Tag.of("protocol", protocol.uriText())));
         return new Http2ClientKeepAliveHandler(
                 channel, encoder.frameWriter(), keepAliveTimer,
-                idleTimeoutMillis, pingIntervalMillis, maxConnectionAgeMillis, maxNumRequestsPerConnection);
+                idleTimeoutMillis, pingIntervalMillis, maxConnectionAgeMillis, maxNumRequestsPerConnection,
+                keepAliveOnPing);
     }
 
     Http2ResponseDecoder responseDecoder() {

File: core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java
Patch:
@@ -351,6 +351,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
                 final long pingIntervalMillis = clientFactory.pingIntervalMillis();
                 final long maxConnectionAgeMillis = clientFactory.maxConnectionAgeMillis();
                 final int maxNumRequestsPerConnection = clientFactory.maxNumRequestsPerConnection();
+                final boolean keepAliveOnPing = clientFactory.keepAliveOnPing();
                 final boolean needsKeepAliveHandler =
                         needsKeepAliveHandler(idleTimeoutMillis, pingIntervalMillis,
                                               maxConnectionAgeMillis, maxNumRequestsPerConnection);
@@ -363,7 +364,8 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
                                                 ImmutableList.of(Tag.of("protocol", protocol.uriText())));
                     keepAliveHandler = new Http1ClientKeepAliveHandler(
                             channel, responseDecoder, keepAliveTimer, idleTimeoutMillis,
-                            pingIntervalMillis, maxConnectionAgeMillis, maxNumRequestsPerConnection);
+                            pingIntervalMillis, maxConnectionAgeMillis, maxNumRequestsPerConnection,
+                            keepAliveOnPing);
                 } else {
                     keepAliveHandler = new NoopKeepAliveHandler();
                 }

File: core/src/main/java/com/linecorp/armeria/internal/common/Http1KeepAliveHandler.java
Patch:
@@ -22,9 +22,9 @@
 public abstract class Http1KeepAliveHandler extends AbstractKeepAliveHandler {
     protected Http1KeepAliveHandler(Channel channel, String name, Timer keepAliveTimer, long idleTimeoutMillis,
                                     long pingIntervalMillis, long maxConnectionAgeMillis,
-                                    long maxNumRequestsPerConnection) {
+                                    long maxNumRequestsPerConnection, boolean keepAliveOnPing) {
         super(channel, name, keepAliveTimer, idleTimeoutMillis, pingIntervalMillis, maxConnectionAgeMillis,
-              maxNumRequestsPerConnection);
+              maxNumRequestsPerConnection, keepAliveOnPing);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/internal/common/Http2KeepAliveHandler.java
Patch:
@@ -69,9 +69,10 @@ public abstract class Http2KeepAliveHandler extends AbstractKeepAliveHandler {
 
     protected Http2KeepAliveHandler(Channel channel, Http2FrameWriter frameWriter, String name,
                                     Timer keepAliveTimer, long idleTimeoutMillis, long pingIntervalMillis,
-                                    long maxConnectionAgeMillis, int maxNumRequestsPerConnection) {
+                                    long maxConnectionAgeMillis, int maxNumRequestsPerConnection,
+                                    boolean keepAliveOnPing) {
         super(channel, name, keepAliveTimer, idleTimeoutMillis, pingIntervalMillis,
-              maxConnectionAgeMillis, maxNumRequestsPerConnection);
+              maxConnectionAgeMillis, maxNumRequestsPerConnection, keepAliveOnPing);
         this.channel = requireNonNull(channel, "channel");
         this.frameWriter = requireNonNull(frameWriter, "frameWriter");
     }

File: core/src/main/java/com/linecorp/armeria/server/Http1ServerKeepAliveHandler.java
Patch:
@@ -29,7 +29,7 @@ final class Http1ServerKeepAliveHandler extends Http1KeepAliveHandler {
                                 long idleTimeoutMillis, long maxConnectionAgeMillis,
                                 int maxNumRequestsPerConnection) {
         super(channel, "server", keepAliveTimer, idleTimeoutMillis, /* pingIntervalMillis(unsupported) */ 0,
-              maxConnectionAgeMillis, maxNumRequestsPerConnection);
+              maxConnectionAgeMillis, maxNumRequestsPerConnection, false);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/server/Http2ServerConnectionHandler.java
Patch:
@@ -65,6 +65,7 @@ private static KeepAliveHandler newKeepAliveHandler(
             Http2ConnectionEncoder encoder, Channel channel, ServerConfig cfg, Timer keepAliveTimer) {
 
         final long idleTimeoutMillis = cfg.idleTimeoutMillis();
+        final boolean keepAliveOnPing = cfg.keepAliveOnPing();
         final long pingIntervalMillis = cfg.pingIntervalMillis();
         final long maxConnectionAgeMillis = cfg.maxConnectionAgeMillis();
         final int maxNumRequestsPerConnection = cfg.maxNumRequestsPerConnection();
@@ -77,7 +78,7 @@ private static KeepAliveHandler newKeepAliveHandler(
 
         return new Http2ServerKeepAliveHandler(
                 channel, encoder.frameWriter(), keepAliveTimer, idleTimeoutMillis,
-                pingIntervalMillis, maxConnectionAgeMillis, maxNumRequestsPerConnection);
+                pingIntervalMillis, maxConnectionAgeMillis, maxNumRequestsPerConnection, keepAliveOnPing);
     }
 
     ServerHttp2ObjectEncoder getOrCreateResponseEncoder(ChannelHandlerContext connectionHandlerCtx) {

File: core/src/main/java/com/linecorp/armeria/server/ServerHttp2ObjectEncoder.java
Patch:
@@ -54,10 +54,11 @@ assert keepAliveHandler() instanceof Http2ServerKeepAliveHandler ||
     @Override
     public ChannelFuture doWriteHeaders(int id, int streamId, ResponseHeaders headers, boolean endStream,
                                         boolean isTrailersEmpty) {
-        if (!isStreamPresentAndWritable(streamId)) {
+        if (!isStreamPresentAndWritable(streamId) || isResponseHeadersSent(id, streamId)) {
             // One of the following cases:
             // - Stream has been closed already.
             // - (bug) Server tried to send a response HEADERS frame before receiving a request HEADERS frame.
+            // - Server tried to send a response HEADERS frame twice.
             return newFailedFuture(ClosedStreamException.get());
         }
 

File: core/src/main/java/com/linecorp/armeria/client/AbstractDnsResolverBuilder.java
Patch:
@@ -527,8 +527,7 @@ protected final Consumer<DnsNameResolverBuilder> buildConfigurator(EventLoopGrou
                 builder.queryTimeoutMillis(queryTimeoutMillisForEachAttempt);
             } else {
                 if (queryTimeoutMillis == 0 || queryTimeoutMillis == Long.MAX_VALUE) {
-                    // Use 0 to disable the timeout once https://github.com/netty/netty/pull/13505 is merged.
-                    builder.queryTimeoutMillis(3600000); // 1 hour
+                    builder.queryTimeoutMillis(0);
                 } else {
                     builder.queryTimeoutMillis(queryTimeoutMillis);
                 }

File: core/src/main/java/com/linecorp/armeria/common/SystemPropertyFlagsProvider.java
Patch:
@@ -159,7 +159,7 @@ public Integer maxNumConnections() {
     }
 
     @Override
-    public Integer numCommonWorkers() {
+    public Integer numCommonWorkers(TransportType transportType) {
         return getInt("numCommonWorkers");
     }
 

File: consul/src/test/java/com/linecorp/armeria/internal/consul/ConsulClientBuilderTest.java
Patch:
@@ -29,7 +29,7 @@ class ConsulClientBuilderTest extends ConsulTestBase {
 
     @Test
     void gets403WhenNoToken() throws Exception {
-        final HttpStatus status = WebClient.of("http://localhost:" + consul().getHttpPort())
+        final HttpStatus status = WebClient.of(consulUri())
                                            .blocking()
                                            .get("/v1/agent/self")
                                            .status();

File: core/src/test/java/com/linecorp/armeria/internal/client/dns/DefaultDnsResolverTest.java
Patch:
@@ -90,7 +90,7 @@ public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)
                     DefaultDnsResolver.of(
                             new DnsNameResolverBuilder(eventLoop)
                                     .channelType(TransportType.datagramChannelType(eventLoop))
-                                    .queryTimeoutMillis(Long.MAX_VALUE)
+                                    .queryTimeoutMillis(TimeUnit.HOURS.toMillis(1))
                                     .nameServerProvider(
                                             name -> DnsServerAddresses.sequential(dnsServer.addr()).stream())
                                     .build(),
@@ -148,7 +148,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                     DefaultDnsResolver.of(
                             new DnsNameResolverBuilder(eventLoop)
                                     .channelType(TransportType.datagramChannelType(eventLoop))
-                                    .queryTimeoutMillis(Long.MAX_VALUE)
+                                    .queryTimeoutMillis(TimeUnit.HOURS.toMillis(1))
                                     .nameServerProvider(
                                             name -> DnsServerAddresses.sequential(dnsServer.addr()).stream())
                                     .build(),

File: grpc/src/main/java/com/linecorp/armeria/internal/server/grpc/AbstractServerCall.java
Patch:
@@ -240,7 +240,8 @@ private void doClose(Status status, Metadata metadata, @Nullable Throwable excep
             return;
         }
 
-        checkState(!closeCalled, "call already closed");
+        checkState(!closeCalled, "call already closed. status: %s, exception: %s",
+                   status, exception);
         closeCalled = true;
 
         boolean completed = true;

File: core/src/main/java/com/linecorp/armeria/common/logging/DefaultLogWriter.java
Patch:
@@ -32,7 +32,7 @@
 
 final class DefaultLogWriter implements LogWriter {
 
-    static final Logger defaultLogger = LoggerFactory.getLogger(DefaultLogWriter.class);
+    static final Logger defaultLogger = LoggerFactory.getLogger(LogWriter.class);
 
     static final DefaultLogWriter DEFAULT =
             new DefaultLogWriter(defaultLogger, DEFAULT_REQUEST_LOG_LEVEL_MAPPER,

File: core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java
Patch:
@@ -50,7 +50,7 @@
 import com.linecorp.armeria.internal.common.logging.LoggingTestUtil;
 
 class LoggingClientTest {
-    private static final HttpClient delegate = (ctx, req) -> {
+    static final HttpClient delegate = (ctx, req) -> {
         ctx.logBuilder().endRequest();
         ctx.logBuilder().endResponse();
         return HttpResponse.of(HttpStatus.NO_CONTENT);

File: core/src/test/java/com/linecorp/armeria/server/logging/LoggingServiceTest.java
Patch:
@@ -60,7 +60,7 @@
 
 class LoggingServiceTest {
 
-    private static final HttpService delegate = (ctx, req) -> {
+    static final HttpService delegate = (ctx, req) -> {
         ctx.logBuilder().endRequest();
         ctx.logBuilder().endResponse();
         return HttpResponse.of(200);

File: core/src/main/java/com/linecorp/armeria/client/Endpoint.java
Patch:
@@ -30,7 +30,6 @@
 import java.net.URISyntaxException;
 import java.net.URLDecoder;
 import java.net.UnknownHostException;
-import java.nio.file.Paths;
 import java.util.Comparator;
 import java.util.List;
 import java.util.Objects;
@@ -871,7 +870,7 @@ private InetSocketAddress toSocketAddress0(int defaultPort) {
             }
 
             assert decodedHost.startsWith("unix:") : decodedHost;
-            return DomainSocketAddress.of(Paths.get(decodedHost.substring(5))); // Strip "unix:"
+            return DomainSocketAddress.of(decodedHost.substring(5)); // Strip "unix:"
         }
 
         final int port = hasPort() ? this.port : defaultPort;

File: core/src/main/java/com/linecorp/armeria/server/websocket/WebSocketService.java
Patch:
@@ -51,6 +51,7 @@
 import com.linecorp.armeria.internal.common.websocket.WebSocketWrapper;
 import com.linecorp.armeria.server.AbstractHttpService;
 import com.linecorp.armeria.server.HttpService;
+import com.linecorp.armeria.server.ServiceConfig;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 import io.netty.handler.codec.http.HttpHeaderValues;
@@ -59,6 +60,8 @@
 /**
  * An {@link HttpService} that supports <a href="https://datatracker.ietf.org/doc/html/rfc6455">
  * The WebSocket Protocol</a>.
+ * This service has a few different default values for {@link ServiceConfig} from a normal {@link HttpService}
+ * because of the nature of WebSocket. See {@link WebSocketServiceBuilder} for more information.
  */
 @UnstableApi
 public final class WebSocketService extends AbstractHttpService {

File: core/src/main/java/com/linecorp/armeria/common/logging/LoggingDecoratorBuilder.java
Patch:
@@ -546,7 +546,7 @@ protected final LogWriter logWriter() {
         if (!buildLogWriter) {
             return LogWriter.of();
         }
-        final TextLogFormatter logFormatter =
+        final LogFormatter logFormatter =
                 LogFormatter.builderForText()
                             .requestHeadersSanitizer(convertToStringSanitizer(requestHeadersSanitizer))
                             .responseHeadersSanitizer(convertToStringSanitizer(responseHeadersSanitizer))

File: core/src/test/java/com/linecorp/armeria/internal/server/annotation/HttpRequestNotSubscribedTest.java
Patch:
@@ -48,6 +48,6 @@ public HttpResponse foo() {
     void nullRequestCause() throws InterruptedException {
         assertThat(server.blockingWebClient().get("/foo").status()).isSameAs(HttpStatus.OK);
         final ServiceRequestContext ctx = server.requestContextCaptor().take();
-        assertThat(ctx.log().ensureComplete().requestCause()).isNull();
+        assertThat(ctx.log().whenComplete().join().requestCause()).isNull();
     }
 }

File: core/src/test/java/com/linecorp/armeria/client/DefaultEventLoopSchedulerTest.java
Patch:
@@ -320,7 +320,7 @@ static AbstractEventLoopEntry acquireEntry(DefaultEventLoopScheduler s,
         } else {
             acquired = s.acquire(SessionProtocol.HTTP, EndpointGroup.of(), null);
         }
-        assert acquired instanceof AbstractEventLoopEntry;
+        assertThat(acquired).isInstanceOf(AbstractEventLoopEntry.class);
         return (AbstractEventLoopEntry) acquired;
     }
 }

File: core/src/test/java/com/linecorp/armeria/client/RedirectingClientTest.java
Patch:
@@ -121,7 +121,7 @@ private int otherHttpPort(ServiceRequestContext ctx) {
                           .filter(port -> port.localAddress().getPort() !=
                                           ctx.localAddress().getPort())
                           .findFirst();
-            assert serverPort.isPresent();
+            assertThat(serverPort).isPresent();
             return serverPort.get().localAddress().getPort();
         }
     };

File: core/src/test/java/com/linecorp/armeria/client/RestClientTest.java
Patch:
@@ -109,7 +109,7 @@ void restApi(RestClient restClient) {
                     preparation = restClient.delete("/rest/{id}");
                     break;
             }
-            assert preparation != null;
+            assertThat(preparation).isNotNull();
             final RestResponse response =
                     preparation.content("content")
                                .header("x-header", "header-value")

File: core/src/test/java/com/linecorp/armeria/client/endpoint/PropertiesEndpointGroupTest.java
Patch:
@@ -132,7 +132,7 @@ void resourceWithDefaultPort() {
     @Test
     void pathWithDefaultPort() throws Exception {
         final URL resourceUrl = getClass().getClassLoader().getResource("server-list.properties");
-        assert resourceUrl != null;
+        assertThat(resourceUrl).isNotNull();
         final Path resourcePath = new File(resourceUrl.toURI().getPath()).toPath();
         final PropertiesEndpointGroup endpointGroupA = PropertiesEndpointGroup.builder(
                 resourcePath, "serverA.hosts").defaultPort(80).build();
@@ -145,7 +145,7 @@ void pathWithDefaultPort() throws Exception {
     @Test
     void pathWithoutDefaultPort() throws URISyntaxException {
         final URL resourceUrl = getClass().getClassLoader().getResource("server-list.properties");
-        assert resourceUrl != null;
+        assertThat(resourceUrl).isNotNull();
         final Path resourcePath = new File(resourceUrl.toURI().getPath()).toPath();
         final PropertiesEndpointGroup endpointGroup = PropertiesEndpointGroup.of(
                 resourcePath, "serverA.hosts");

File: core/src/test/java/com/linecorp/armeria/client/proxy/HAProxyClientIntegrationTest.java
Patch:
@@ -270,7 +270,7 @@ void testHttpProxyUpgradeRequestFailure() throws Exception {
         final InetSocketAddress destAddr = new InetSocketAddress("127.0.0.2", 82);
         final Endpoint destEndpoint = Endpoint.of(destAddr.getHostString(), destAddr.getPort());
         final Endpoint proxyEndpoint = http1Server.endpoint();
-        assert proxyEndpoint.ipAddr() != null;
+        assertThat(proxyEndpoint.ipAddr()).isNotNull();
         final InetSocketAddress proxyAddr = new InetSocketAddress(proxyEndpoint.ipAddr(), proxyEndpoint.port());
 
         final AtomicReference<HAProxyMessage> msgRef = new AtomicReference<>();
@@ -328,7 +328,7 @@ void testHttpProxyPrefaceFailure() throws Exception {
         final InetSocketAddress destAddr = new InetSocketAddress("127.0.0.2", 82);
         final Endpoint destEndpoint = Endpoint.of(destAddr.getHostString(), destAddr.getPort());
         final Endpoint proxyEndpoint = http1Server.endpoint();
-        assert proxyEndpoint.ipAddr() != null;
+        assertThat(proxyEndpoint.ipAddr()).isNotNull();
         final InetSocketAddress proxyAddr = new InetSocketAddress(proxyEndpoint.ipAddr(), proxyEndpoint.port());
 
         final AtomicReference<HAProxyMessage> msgRef = new AtomicReference<>();

File: core/src/test/java/com/linecorp/armeria/client/proxy/ProxyClientIntegrationTest.java
Patch:
@@ -152,7 +152,7 @@ protected void configure(Channel ch) throws Exception {
     static NettyServerExtension httpsProxyServer = new NettyServerExtension() {
         @Override
         protected void configure(Channel ch) throws Exception {
-            assert sslContext != null;
+            assertThat(sslContext).isNotNull();
             final SslContext sslContext = SslContextBuilder
                     .forServer(ssc.privateKey(), ssc.certificate()).build();
             ch.pipeline().addLast(sslContext.newHandler(ch.alloc()));

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientWithDecoratorTest.java
Patch:
@@ -48,7 +48,7 @@ void responseCauseIsSetWhenExceptionIsRaisedInDecorator() throws InterruptedExce
         // Retry only 3 times.
         final RetryRule retryRule = RetryRule.builder()
                                              .onException((ctx, cause) -> {
-                                                 assert cause instanceof AnticipatedException;
+                                                 assertThat(cause).isInstanceOf(AnticipatedException.class);
                                                  return onExceptionCounter.incrementAndGet() != 3;
                                              })
                                              .onResponseTrailers((ctx, trailers) -> false)

File: core/src/test/java/com/linecorp/armeria/common/util/InetAddressPredicatesTest.java
Patch:
@@ -245,15 +245,15 @@ private static InetAddress ipv6(int ip1, int ip2, int ip3, int ip4) throws Unkno
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                 (byte) ip1, (byte) ip2, (byte) ip3, (byte) ip4
         });
-        assert inetAddress instanceof Inet6Address;
+        assertThat(inetAddress).isInstanceOf(Inet6Address.class);
         return inetAddress;
     }
 
     private static InetAddress ipv4(int ip1, int ip2, int ip3, int ip4) throws UnknownHostException {
         final InetAddress inetAddress = InetAddress.getByAddress(new byte[] {
                 (byte) ip1, (byte) ip2, (byte) ip3, (byte) ip4
         });
-        assert inetAddress instanceof Inet4Address;
+        assertThat(inetAddress).isInstanceOf(Inet4Address.class);
         return inetAddress;
     }
 }

File: core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceRequestConverterTest.java
Patch:
@@ -342,7 +342,7 @@ public Object convertRequest(
 
                 if (expectedResultType == Alice.class) {
                     final String age = ctx.pathParam("age");
-                    assert age != null;
+                    assertThat(age).isNotNull();
                     return new Alice(Integer.parseInt(age));
                 }
                 return RequestConverterFunction.fallthrough();
@@ -358,7 +358,7 @@ public Object convertRequest(
 
                 if (expectedResultType == Bob.class) {
                     final String age = ctx.pathParam("age");
-                    assert age != null;
+                    assertThat(age).isNotNull();
                     return new Bob(Integer.parseInt(age) * 2);
                 }
                 return RequestConverterFunction.fallthrough();

File: core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceResponseConverterTest.java
Patch:
@@ -508,7 +508,7 @@ public void subscribe(Subscriber<? super T> s) {
                 @Override
                 public void request(long n) {
                     final int size = objects.size();
-                    assert n >= size;
+                    assertThat(n).isGreaterThanOrEqualTo(size);
                     for (int i = 0; i < size; i++) {
                         s.onNext(objects.get(i));
                     }

File: core/src/test/java/com/linecorp/armeria/server/DefaultServiceRequestContextTest.java
Patch:
@@ -46,7 +46,7 @@ void requestTimedOut() {
         final HttpRequest request = HttpRequest.of(HttpMethod.GET, "/hello");
         final ServiceRequestContext ctx = ServiceRequestContext.builder(request).build();
         assertThat(ctx.isTimedOut()).isFalse();
-        assert ctx instanceof DefaultServiceRequestContext;
+        assertThat(ctx).isInstanceOf(DefaultServiceRequestContext.class);
         final DefaultServiceRequestContext defaultCtx = (DefaultServiceRequestContext) ctx;
         defaultCtx.setRequestTimeoutMillis(TimeoutMode.SET_FROM_NOW, 1000);
 

File: core/src/test/java/com/linecorp/armeria/server/HttpServerAbortingInfiniteStreamTest.java
Patch:
@@ -111,7 +111,7 @@ public void onSubscribe(Subscription s) {
 
             @Override
             public void onNext(HttpObject httpObject) {
-                assert subscription != null;
+                assertThat(subscription).isNotNull();
                 if (++count == 10) {
                     logger.debug("Cancel subscription: count={}", count);
                     subscription.cancel();

File: core/src/test/java/com/linecorp/armeria/server/ProxyProtocolEnabledServerTest.java
Patch:
@@ -81,7 +81,7 @@ protected void configure(ServerBuilder sb) throws Exception {
                 @Override
                 protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) {
                     final ProxiedAddresses proxyAddresses = ctx.proxiedAddresses();
-                    assert proxyAddresses != null;
+                    assertThat(proxyAddresses).isNotNull();
                     final InetSocketAddress src = proxyAddresses.sourceAddress();
                     final List<InetSocketAddress> dst = proxyAddresses.destinationAddresses();
                     return HttpResponse.of(HttpStatus.OK, MediaType.PLAIN_TEXT_UTF_8,
@@ -94,7 +94,7 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) {
             sb.service("/null-proxyaddr", new AbstractHttpService() {
                 @Override
                 protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) {
-                    assert ctx.proxiedAddresses().destinationAddresses().isEmpty();
+                    assertThat(ctx.proxiedAddresses().destinationAddresses()).isEmpty();
                     return HttpResponse.of(HttpStatus.OK);
                 }
             });

File: core/src/test/java/com/linecorp/armeria/server/websocket/WebSocketServiceHandshakeTest.java
Patch:
@@ -175,7 +175,7 @@ public void onComplete() {}
 
     private static Channel channel(ClientRequestContext ctx) {
         final Channel channel = ctx.log().whenAvailable(RequestLogProperty.SESSION).join().channel();
-        assert channel != null;
+        assertThat(channel).isNotNull();
         return channel;
     }
 

File: core/src/test/java/com/linecorp/armeria/server/websocket/WebSocketServiceTest.java
Patch:
@@ -151,7 +151,7 @@ public void onNext(WebSocketFrame webSocketFrame) {
                                 onBinary(writer, frame.byteBuf(ByteBufAccessMode.RETAINED_DUPLICATE));
                                 break;
                             case CLOSE:
-                                assert frame instanceof CloseWebSocketFrame;
+                                assertThat(frame).isInstanceOf(CloseWebSocketFrame.class);
                                 final CloseWebSocketFrame closeFrame = (CloseWebSocketFrame) frame;
                                 onClose(writer, closeFrame.status(), closeFrame.reasonPhrase());
                                 break;

File: graphql/src/main/java/com/linecorp/armeria/server/graphql/GraphqlServiceContexts.java
Patch:
@@ -24,6 +24,7 @@
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 import graphql.GraphQLContext;
+import graphql.VisibleForTesting;
 import graphql.com.google.common.collect.ImmutableMap;
 import graphql.schema.DataFetchingEnvironment;
 
@@ -34,7 +35,8 @@
 @UnstableApi
 public final class GraphqlServiceContexts {
 
-    private static final String GRAPHQL_CONTEXT_KEY = "com.linecorp.armeria.graphql.context.key";
+    @VisibleForTesting
+    static final String GRAPHQL_CONTEXT_KEY = "com.linecorp.armeria.graphql.context.key";
 
     /**
      * Returns a {@link Map} containing the {@link ServiceRequestContext}.

File: grpc/src/test/java/com/linecorp/armeria/internal/server/grpc/GrpcDocServiceJsonSchemaTest.java
Patch:
@@ -106,7 +106,7 @@ void testOk() throws Exception {
 
         final List<JsonNode> jsonSchemas = getJsonSchemas();
 
-        assert (jsonSchemas.size() == 1);
+        assertThat(jsonSchemas).hasSize(1);
     }
 
     @Test

File: spring/boot3-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaCompressionConfigurationTest.java
Patch:
@@ -86,7 +86,7 @@ public String hello(@Param Optional<Integer> size) {
     private ArmeriaSettings settings;
 
     private String newUrl() {
-        assert server != null;
+        assertThat(server).isNotNull();
         return "http://127.0.0.1:" + server.activeLocalPort();
     }
 

File: spring/boot3-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaSslConfigurationTest.java
Patch:
@@ -71,7 +71,7 @@ static class TestConfiguration {}
     private Server server;
 
     private String newUrl(SessionProtocol protocol) {
-        assert server != null;
+        assertThat(server).isNotNull();
         return protocol.uriText() + "://127.0.0.1:" + server.activeLocalPort(protocol);
     }
 

File: spring/boot3-autoconfigure/src/test/java/com/linecorp/armeria/spring/RetryableArmeriaServerGracefulShutdownLifecycle.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.linecorp.armeria.spring;
 
+import static org.assertj.core.api.Assertions.assertThat;
+
 import java.util.concurrent.TimeUnit;
 
 import org.slf4j.Logger;
@@ -65,7 +67,7 @@ public void start() {
             }
         }
 
-        assert caughtException != null;
+        assertThat(caughtException).isNotNull();
         Exceptions.throwUnsafely(caughtException);
     }
 

File: spring/boot3-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ByteBufLeakTest.java
Patch:
@@ -118,7 +118,7 @@ private static void addListenerForCountingCompletedRequests() {
 
     @Test
     public void confirmNoBufferLeak() throws Exception {
-        assert allocatedBuffers.isEmpty();
+        assertThat(allocatedBuffers).isEmpty();
         final WebClient client = WebClient.of("http://127.0.0.1:" + port);
         for (int i = 0; i < 2; i++) {
             assertThat(client.get("/mono").aggregate().join().contentUtf8())
@@ -137,7 +137,7 @@ public void confirmNoBufferLeak() throws Exception {
     @Test
     public void confirmNoBufferLeak_resetConnection() throws Exception {
         completed.set(0);
-        assert allocatedBuffers.isEmpty();
+        assertThat(allocatedBuffers).isEmpty();
 
         for (int i = 0; i < 2 * 3; i++) {
             try (Socket s = new Socket(NetUtil.LOCALHOST, port)) {

File: spring/boot3-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ReactiveWebServerCompressionLeakTest.java
Patch:
@@ -92,7 +92,7 @@ public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
                             public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {
                                 final Mono<? extends DataBuffer> buffer = Mono.from(body);
                                 return super.writeWith(buffer.doOnNext(b -> {
-                                    assert b instanceof NettyDataBuffer;
+                                    assertThat(b).isInstanceOf(NettyDataBuffer.class);
                                     nettyData.add((NettyDataBuffer) b);
                                 }));
                             }

File: spring/boot3-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/RetryableArmeriaReactiveWebServerFactory.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.linecorp.armeria.spring.web.reactive;
 
+import static org.assertj.core.api.Assertions.assertThat;
+
 import java.util.concurrent.TimeUnit;
 
 import org.slf4j.Logger;
@@ -77,7 +79,7 @@ public void start() {
                 }
             }
 
-            assert caughtException != null;
+            assertThat(caughtException).isNotNull();
             Exceptions.throwUnsafely(caughtException);
         }
 

File: core/src/main/java/com/linecorp/armeria/client/logging/AbstractLoggingClientBuilder.java
Patch:
@@ -38,8 +38,8 @@ abstract class AbstractLoggingClientBuilder extends LoggingDecoratorBuilder {
      */
     public AbstractLoggingClientBuilder sampler(Sampler<? super ClientRequestContext> sampler) {
         requireNonNull(sampler, "sampler");
-        this.successSampler = sampler;
-        this.failureSampler = sampler;
+        successSampler = sampler;
+        failureSampler = sampler;
         return this;
     }
 

File: core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java
Patch:
@@ -1436,9 +1436,9 @@ private String toStringWithChildren(String req, String res, int numChildren) {
     }
 
     private static StringBuilder toStringWithoutChildren(StringBuilder buf, String req, String res) {
-        return buf.append("{req=")
+        return buf.append('{')
                   .append(req)
-                  .append(", res=")
+                  .append(", ")
                   .append(res)
                   .append('}');
     }

File: core/src/main/java/com/linecorp/armeria/common/logging/RequestLog.java
Patch:
@@ -280,7 +280,8 @@ default String toStringResponseOnly(
                                }
                                return sanitized.toString();
                            })
+                           .includeContext(false)
                            .build()
-                           .formatRequest(this);
+                           .formatResponse(this);
     }
 }

File: core/src/main/java/com/linecorp/armeria/common/logging/RequestLogLevelMapper.java
Patch:
@@ -28,7 +28,7 @@
  * A {@link Function} that determines the {@link LogLevel} of an {@link HttpRequest} from a given
  * {@link RequestOnlyLog}.
  *
- * @see LoggingDecoratorBuilder#requestLogLevelMapper(RequestLogLevelMapper)
+ * @see LogWriterBuilder#requestLogLevelMapper(RequestLogLevelMapper)
  */
 // TODO(trustin): Remove 'extends Function' in the next major release.
 @UnstableApi

File: core/src/main/java/com/linecorp/armeria/common/logging/RequestOnlyLog.java
Patch:
@@ -349,6 +349,7 @@ default String toStringRequestOnly(
                                }
                                return sanitized.toString();
                            })
+                           .includeContext(false)
                            .build()
                            .formatRequest(this);
     }

File: core/src/main/java/com/linecorp/armeria/common/logging/ResponseLogLevelMapper.java
Patch:
@@ -30,7 +30,7 @@
  * A {@link Function} that determines the {@link LogLevel} of an {@link HttpResponse} from a given
  * {@link RequestLog}.
  *
- * @see LoggingDecoratorBuilder#responseLogLevelMapper(ResponseLogLevelMapper)
+ * @see LogWriterBuilder#responseLogLevelMapper(ResponseLogLevelMapper)
  */
 // TODO(trustin): Remove 'extends Function' in the next major release.
 @UnstableApi

File: core/src/main/java/com/linecorp/armeria/server/logging/AccessLogWriter.java
Patch:
@@ -72,6 +72,7 @@ static AccessLogWriter custom(String formatStr) {
      * Returns a new {@link AccessLogWriter} which combines two {@link AccessLogWriter}s.
      */
     default AccessLogWriter andThen(AccessLogWriter after) {
+        requireNonNull(after, "after");
         return new AccessLogWriter() {
             @Override
             public void log(RequestLog log) {

File: core/src/test/java/com/linecorp/armeria/internal/common/logging/LoggingTestUtil.java
Patch:
@@ -42,7 +42,7 @@ public static Logger newMockLogger(RequestContext ctx, AtomicReference<Throwable
             if (arguments.length == 0) {
                 return;
             }
-            if (arguments[0] == null) {
+            if (arguments[0] == null || "".equals(arguments[0])) {
                 // Invoked at verification phase
                 return;
             }

File: core/src/test/java/com/linecorp/armeria/server/AnnotatedServiceBindingBuilderTest.java
Patch:
@@ -149,7 +149,7 @@ void testAllConfigurationsAreRespected() {
         final ServiceRequestContext sctx = ServiceRequestContext.builder(HttpRequest.of(HttpMethod.GET, "/"))
                                                                 .build();
         // serviceErrorHandler is composed with ServerErrorHandler so we cannot do the equality check.
-        assertThat(homeFoo.errorHandler().onServiceException(sctx, null)
+        assertThat(homeFoo.errorHandler().onServiceException(sctx, new IllegalArgumentException("cause"))
                           .aggregate()
                           .join()
                           .status()).isSameAs(HttpStatus.OK);
@@ -162,7 +162,7 @@ void testAllConfigurationsAreRespected() {
         assertThat(homeBar.verboseResponses()).isTrue();
         assertThat(homeBar.multipartUploadsLocation()).isSameAs(multipartUploadsLocation);
         // serviceErrorHandler is composed with ServerErrorHandler so we cannot do the equality check.
-        assertThat(homeBar.errorHandler().onServiceException(sctx, null)
+        assertThat(homeBar.errorHandler().onServiceException(sctx, new IllegalArgumentException("cause"))
                           .aggregate()
                           .join()
                           .status()).isSameAs(HttpStatus.OK);

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/DeferredListenerTest.java
Patch:
@@ -54,7 +54,7 @@ class DeferredListenerTest {
     void shouldHaveRequestContextInThread() {
         assertThatThrownBy(() -> new DeferredListener<>(mock(ServerCall.class), null))
                 .isInstanceOf(IllegalStateException.class)
-                .hasMessage("Cannot use %s with a non-Armeria gRPC server",
+                .hasMessageContaining("Cannot use %s with a non-Armeria gRPC server",
                             AsyncServerInterceptor.class.getName());
     }
 

File: core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java
Patch:
@@ -134,8 +134,7 @@ private void resolveAddress(Endpoint endpoint, ClientRequestContext ctx,
 
         final Future<InetSocketAddress> resolveFuture =
                 addressResolverGroup.getResolver(ctx.eventLoop().withoutContext())
-                                    .resolve(InetSocketAddress.createUnresolved(endpoint.host(),
-                                                                                endpoint.port()));
+                                    .resolve(endpoint.toSocketAddress(-1));
         if (resolveFuture.isSuccess()) {
             final InetAddress address = resolveFuture.getNow().getAddress();
             onComplete.accept(endpoint.withInetAddress(address), null);

File: core/src/main/java/com/linecorp/armeria/server/DecoratingServiceBindingBuilder.java
Patch:
@@ -23,6 +23,7 @@
 
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.MediaType;
+import com.linecorp.armeria.internal.server.RouteDecoratingService;
 
 /**
  * A builder class for binding a {@code decorator} with {@link Route} fluently.

File: core/src/main/java/com/linecorp/armeria/server/RouteCache.java
Patch:
@@ -35,6 +35,7 @@
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.metric.MeterIdPrefix;
 import com.linecorp.armeria.internal.common.metric.CaffeineMetricSupport;
+import com.linecorp.armeria.internal.server.RouteDecoratingService;
 
 import io.micrometer.core.instrument.MeterRegistry;
 

File: core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java
Patch:
@@ -91,6 +91,7 @@
 import com.linecorp.armeria.internal.common.ReflectiveDependencyInjector;
 import com.linecorp.armeria.internal.common.RequestContextUtil;
 import com.linecorp.armeria.internal.common.util.ChannelUtil;
+import com.linecorp.armeria.internal.server.RouteDecoratingService;
 import com.linecorp.armeria.internal.server.annotation.AnnotatedServiceExtensions;
 import com.linecorp.armeria.server.annotation.ExceptionHandlerFunction;
 import com.linecorp.armeria.server.annotation.RequestConverterFunction;

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostBuilder.java
Patch:
@@ -81,6 +81,7 @@
 import com.linecorp.armeria.common.util.BlockingTaskExecutor;
 import com.linecorp.armeria.common.util.SystemInfo;
 import com.linecorp.armeria.internal.common.util.SelfSignedCertificate;
+import com.linecorp.armeria.internal.server.RouteDecoratingService;
 import com.linecorp.armeria.internal.server.annotation.AnnotatedServiceExtensions;
 import com.linecorp.armeria.server.annotation.ExceptionHandlerFunction;
 import com.linecorp.armeria.server.annotation.RequestConverterFunction;

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostDecoratingServiceBindingBuilder.java
Patch:
@@ -23,6 +23,7 @@
 
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.MediaType;
+import com.linecorp.armeria.internal.server.RouteDecoratingService;
 
 /**
  * A builder class for binding a {@code decorator} to a {@link Route} fluently.

File: core/src/main/java/com/linecorp/armeria/server/AbstractHttpResponseHandler.java
Patch:
@@ -75,6 +75,7 @@ boolean isDone() {
 
     void disconnectWhenFinished() {
         needsDisconnection = true;
+        responseEncoder.keepAliveHandler().disconnectWhenFinished();
     }
 
     final boolean tryComplete(@Nullable Throwable cause) {

File: brave/src/main/java/com/linecorp/armeria/client/brave/ArmeriaHttpClientParser.java
Patch:
@@ -18,7 +18,7 @@
 
 import static com.google.common.base.MoreObjects.firstNonNull;
 
-import java.net.SocketAddress;
+import java.net.InetSocketAddress;
 
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.common.HttpRequest;
@@ -94,12 +94,12 @@ public void parse(HttpResponse response, TraceContext context, SpanCustomizer sp
             span.tag(SpanTags.TAG_HTTP_SERIALIZATION_FORMAT, serFmt);
         }
 
-        final SocketAddress raddr = ctx.remoteAddress();
+        final InetSocketAddress raddr = ctx.remoteAddress();
         if (raddr != null) {
             span.tag(SpanTags.TAG_ADDRESS_REMOTE, raddr.toString());
         }
 
-        final SocketAddress laddr = ctx.localAddress();
+        final InetSocketAddress laddr = ctx.localAddress();
         if (laddr != null) {
             span.tag(SpanTags.TAG_ADDRESS_LOCAL, laddr.toString());
         }

File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContextBuilder.java
Patch:
@@ -17,7 +17,7 @@
 
 import static java.util.Objects.requireNonNull;
 
-import java.net.SocketAddress;
+import java.net.InetSocketAddress;
 import java.net.URI;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
@@ -200,12 +200,12 @@ public ClientRequestContextBuilder id(RequestId id) {
     }
 
     @Override
-    public ClientRequestContextBuilder remoteAddress(SocketAddress remoteAddress) {
+    public ClientRequestContextBuilder remoteAddress(InetSocketAddress remoteAddress) {
         return (ClientRequestContextBuilder) super.remoteAddress(remoteAddress);
     }
 
     @Override
-    public ClientRequestContextBuilder localAddress(SocketAddress localAddress) {
+    public ClientRequestContextBuilder localAddress(InetSocketAddress localAddress) {
         return (ClientRequestContextBuilder) super.localAddress(localAddress);
     }
 

File: core/src/main/java/com/linecorp/armeria/client/DefaultEventLoopScheduler.java
Patch:
@@ -170,8 +170,8 @@ private AbstractEventLoopState state(SessionProtocol sessionProtocol,
             secondTryHost = null;
         }
 
-        final int port = endpoint.hasPort() ? endpoint.port() : sessionProtocol.defaultPort();
-        final Endpoint endpointWithPort = endpoint.withPort(port);
+        final Endpoint endpointWithPort = endpoint.withDefaultPort(sessionProtocol);
+        final int port = endpointWithPort.port();
         final boolean isHttp1 = isHttp1(sessionProtocol, endpointWithPort);
         final StateKey firstKey = new StateKey(firstTryHost, port, isHttp1);
         AbstractEventLoopState state = states.get(firstKey);

File: core/src/main/java/com/linecorp/armeria/client/DefaultWebClient.java
Patch:
@@ -61,7 +61,7 @@ public HttpResponse execute(HttpRequest req, RequestOptions requestOptions) {
         final RequestTarget reqTarget = RequestTarget.forClient(originalPath, prefix);
         if (reqTarget == null) {
             return abortRequestAndReturnFailureResponse(
-                    req, new IllegalArgumentException("Invalid path: " + originalPath));
+                    req, new IllegalArgumentException("Invalid request target: " + originalPath));
         }
 
         final EndpointGroup endpointGroup;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/DefaultHealthCheckerContext.java
Patch:
@@ -78,7 +78,7 @@ final class DefaultHealthCheckerContext
         originalEndpoint = endpoint;
 
         if (port == 0) {
-            this.endpoint = endpoint.withoutDefaultPort(protocol.defaultPort());
+            this.endpoint = endpoint.withoutDefaultPort(protocol);
         } else if (port == protocol.defaultPort()) {
             this.endpoint = endpoint.withoutPort();
         } else {

File: core/src/main/java/com/linecorp/armeria/common/RequestContextWrapper.java
Patch:
@@ -18,7 +18,7 @@
 
 import static java.util.Objects.requireNonNull;
 
-import java.net.SocketAddress;
+import java.net.InetSocketAddress;
 import java.net.URI;
 import java.util.Iterator;
 import java.util.Map.Entry;
@@ -130,13 +130,13 @@ public SessionProtocol sessionProtocol() {
 
     @Nullable
     @Override
-    public <A extends SocketAddress> A remoteAddress() {
+    public InetSocketAddress remoteAddress() {
         return unwrap().remoteAddress();
     }
 
     @Nullable
     @Override
-    public <A extends SocketAddress> A localAddress() {
+    public InetSocketAddress localAddress() {
         return unwrap().localAddress();
     }
 

File: core/src/main/java/com/linecorp/armeria/common/logging/BuiltInProperty.java
Patch:
@@ -373,7 +373,7 @@ public enum BuiltInProperty {
 
     static {
         final ImmutableMap.Builder<String, BuiltInProperty> builder = ImmutableMap.builder();
-        for (BuiltInProperty k : BuiltInProperty.values()) {
+        for (BuiltInProperty k : values()) {
             builder.put(k.key, k);
         }
         keyToEnum = builder.build();
@@ -420,7 +420,7 @@ private static String getAuthority(RequestLog log) {
         final String authority;
         if (ctx instanceof ServiceRequestContext) {
             final ServiceRequestContext sCtx = (ServiceRequestContext) ctx;
-            final int port = ((InetSocketAddress) sCtx.remoteAddress()).getPort();
+            final int port = sCtx.remoteAddress().getPort();
             final String hostname = sCtx.config().virtualHost().defaultHostname();
             if (port == ctx.sessionProtocol().defaultPort()) {
                 authority = hostname;

File: core/src/main/java/com/linecorp/armeria/common/util/TextFormatter.java
Patch:
@@ -198,7 +198,7 @@ public static StringBuilder socketAddress(@Nullable SocketAddress addr) {
      * that it does not format a host name if it's not available or it's same with the IP address.
      */
     public static void appendSocketAddress(StringBuilder buf, @Nullable SocketAddress addr) {
-        if (!(addr instanceof InetSocketAddress)) {
+        if (!(addr instanceof InetSocketAddress) || addr instanceof DomainSocketAddress) {
             buf.append(addr);
             return;
         }

File: core/src/main/java/com/linecorp/armeria/internal/common/DefaultRequestTarget.java
Patch:
@@ -565,7 +565,7 @@ private static int findAuthority(String reqTarget) {
     @Nullable
     private static URI normalizeSchemeAndAuthority(String scheme, String authority) {
         try {
-            return new URI(scheme, authority, null, null, null);
+            return new URI(scheme + "://" + authority);
         } catch (Exception unused) {
             return null;
         }

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContextWrapper.java
Patch:
@@ -17,7 +17,7 @@
 package com.linecorp.armeria.server;
 
 import java.net.InetAddress;
-import java.net.SocketAddress;
+import java.net.InetSocketAddress;
 import java.time.Duration;
 import java.util.Map;
 import java.util.concurrent.CompletableFuture;
@@ -64,13 +64,13 @@ public HttpRequest request() {
 
     @Nonnull
     @Override
-    public <A extends SocketAddress> A remoteAddress() {
+    public InetSocketAddress remoteAddress() {
         return unwrap().remoteAddress();
     }
 
     @Nonnull
     @Override
-    public <A extends SocketAddress> A localAddress() {
+    public InetSocketAddress localAddress() {
         return unwrap().localAddress();
     }
 

File: core/src/main/java/com/linecorp/armeria/server/ServiceRouteUtil.java
Patch:
@@ -18,11 +18,10 @@
 
 import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.isCorsPreflightRequest;
 
-import java.net.InetSocketAddress;
-
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.RequestTarget;
+import com.linecorp.armeria.internal.common.util.ChannelUtil;
 
 import io.netty.channel.Channel;
 
@@ -32,7 +31,7 @@ static RoutingContext newRoutingContext(ServerConfig serverConfig, Channel chann
                                             RequestHeaders headers, RequestTarget reqTarget) {
 
         final String hostname = hostname(headers);
-        final int port = ((InetSocketAddress) channel.localAddress()).getPort();
+        final int port = ChannelUtil.getPort(channel.localAddress(), 0);
         final String originalPath = headers.path();
 
         final RoutingStatus routingStatus;

File: core/src/main/java/com/linecorp/armeria/server/logging/AccessLogComponent.java
Patch:
@@ -24,7 +24,6 @@
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
 import java.net.InetSocketAddress;
-import java.net.SocketAddress;
 import java.time.Duration;
 import java.time.Instant;
 import java.time.ZoneId;
@@ -283,8 +282,8 @@ public Object getMessage0(RequestLog log) {
                         return ctx.clientAddress().getHostAddress();
                     }
                 case REMOTE_HOST:
-                    final SocketAddress ra = log.context().remoteAddress();
-                    return ra instanceof InetSocketAddress ? ((InetSocketAddress) ra).getHostString() : null;
+                    final InetSocketAddress ra = log.context().remoteAddress();
+                    return ra != null ? ra.getHostString() : null;
 
                 case RFC931:
                     // We do not support this log type now.

File: core/src/test/java/com/linecorp/armeria/client/Http1ConnectionReuseTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import java.net.SocketAddress;
+import java.net.InetSocketAddress;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.CompletableFuture;
@@ -44,7 +44,7 @@
 
 class Http1ConnectionReuseTest {
 
-    private static final List<SocketAddress> remoteAddresses = new ArrayList<>(3);
+    private static final List<InetSocketAddress> remoteAddresses = new ArrayList<>(3);
 
     @RegisterExtension
     static final ServerExtension server = new ServerExtension() {

File: core/src/test/java/com/linecorp/armeria/client/RedirectingClientTest.java
Patch:
@@ -119,7 +119,7 @@ private int otherHttpPort(ServiceRequestContext ctx) {
                     server.server().activePorts().values()
                           .stream().filter(ServerPort::hasHttp)
                           .filter(port -> port.localAddress().getPort() !=
-                                          ((InetSocketAddress) ctx.localAddress()).getPort())
+                                          ctx.localAddress().getPort())
                           .findFirst();
             assert serverPort.isPresent();
             return serverPort.get().localAddress().getPort();

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientAuthorityHeaderTest.java
Patch:
@@ -19,7 +19,6 @@
 import static com.linecorp.armeria.common.HttpStatus.SERVICE_UNAVAILABLE;
 import static org.assertj.core.api.Assertions.assertThat;
 
-import java.net.InetSocketAddress;
 import java.util.function.Consumer;
 
 import org.junit.jupiter.api.AfterEach;
@@ -94,13 +93,13 @@ void authorityIsDifferentByBackendsWhenRetry() throws Exception {
 
         assertThat(backend1.requestContextCaptor().size()).isGreaterThanOrEqualTo(1);
         assertCaptorMatches(backend1.requestContextCaptor(), ctx -> {
-            assertThat(((InetSocketAddress) ctx.localAddress()).getPort()).isEqualTo(backend1.httpPort());
+            assertThat(ctx.localAddress().getPort()).isEqualTo(backend1.httpPort());
             assertThat(ctx.request().uri().getPort()).isEqualTo(backend1.httpPort());
         });
 
         assertThat(backend2.requestContextCaptor().size()).isGreaterThanOrEqualTo(1);
         assertCaptorMatches(backend2.requestContextCaptor(), ctx -> {
-            assertThat(((InetSocketAddress) ctx.localAddress()).getPort()).isEqualTo(backend2.httpPort());
+            assertThat(ctx.localAddress().getPort()).isEqualTo(backend2.httpPort());
             assertThat(ctx.request().uri().getPort()).isEqualTo(backend2.httpPort());
         });
     }

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientLoadBalancingTest.java
Patch:
@@ -68,12 +68,12 @@ protected void configure(ServerBuilder sb) throws Exception {
             }
 
             sb.service(TestMode.SUCCESS.path, (ctx, req) -> {
-                accessedPorts.add(((InetSocketAddress) ctx.localAddress()).getPort());
+                accessedPorts.add(ctx.localAddress().getPort());
                 return HttpResponse.of(HttpStatus.OK);
             });
 
             sb.service(TestMode.FAILURE.path, (ctx, req) -> {
-                accessedPorts.add(((InetSocketAddress) ctx.localAddress()).getPort());
+                accessedPorts.add(ctx.localAddress().getPort());
                 return HttpResponse.of(HttpStatus.SERVICE_UNAVAILABLE);
             });
         }

File: examples/proxy-server/src/main/java/example/armeria/proxy/ProxyService.java
Patch:
@@ -1,6 +1,5 @@
 package example.armeria.proxy;
 
-import java.net.InetSocketAddress;
 import java.time.Duration;
 import java.util.concurrent.ExecutionException;
 
@@ -119,7 +118,7 @@ private static HttpRequest addForwarded(ServiceRequestContext ctx, HttpRequest r
         // This is a simplified example. Please refer to https://datatracker.ietf.org/doc/rfc7239/
         // for more information about Forwarded header.
         final StringBuilder sb = new StringBuilder();
-        sb.append("for: ").append(ctx.<InetSocketAddress>remoteAddress().getAddress().getHostAddress());
+        sb.append("for: ").append(ctx.remoteAddress().getAddress().getHostAddress());
         sb.append(", host: ").append(req.authority());
         sb.append(", proto: ").append(ctx.sessionProtocol());
 

File: jetty/jetty11/src/main/java/com/linecorp/armeria/server/jetty/JettyService.java
Patch:
@@ -18,7 +18,6 @@
 
 import static java.util.Objects.requireNonNull;
 
-import java.net.InetSocketAddress;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
 import java.util.Objects;
@@ -257,7 +256,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) {
                     // Perform a reverse DNS lookup if needed.
                     if (needsReverseDnsLookup) {
                         try {
-                            ((InetSocketAddress) ctx.remoteAddress()).getHostName();
+                            ctx.remoteAddress().getHostName();
                         } catch (Throwable t) {
                             logger.warn("{} Failed to perform a reverse DNS lookup:", ctx, t);
                         }

File: jetty/jetty9/src/main/java/com/linecorp/armeria/server/jetty/JettyService.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
-import java.net.InetSocketAddress;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
 import java.util.function.Consumer;
@@ -302,7 +301,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) {
                     // Perform a reverse DNS lookup if needed.
                     if (needsReverseDnsLookup) {
                         try {
-                            ((InetSocketAddress) ctx.remoteAddress()).getHostName();
+                            ctx.remoteAddress().getHostName();
                         } catch (Throwable t) {
                             logger.warn("{} Failed to perform a reverse DNS lookup:", ctx, t);
                         }

File: graphql/src/main/java/com/linecorp/armeria/server/graphql/GraphqlService.java
Patch:
@@ -41,6 +41,7 @@ static GraphqlServiceBuilder builder() {
      * Returns a new {@link GraphqlService}.
      */
     static GraphqlService of(GraphQL graphQL) {
-        return new DefaultGraphqlService(graphQL, new DataLoaderRegistry(), false, GraphqlErrorHandler.of());
+        return new DefaultGraphqlService(graphQL, ctx -> new DataLoaderRegistry(), false,
+                                         GraphqlErrorHandler.of());
     }
 }

File: consul/src/test/java/com/linecorp/armeria/internal/consul/ConsulTestBase.java
Patch:
@@ -64,7 +64,7 @@ public abstract class ConsulTestBase {
 
     private static final String ENV_CONSUL_VERSION = "CONSUL_VERSION";
     private static final String ENV_CONSUL_BINARY_DOWNLOAD_DIR = "CONSUL_BINARY_DOWNLOAD_DIR";
-    private static final String FALLBACK_CONSUL_VERSION = "1.9.3";
+    private static final String FALLBACK_CONSUL_VERSION = "1.15.3";
 
     protected static final String CONSUL_TOKEN = UUID.randomUUID().toString();
     protected static final String serviceName = "testService";

File: core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java
Patch:
@@ -321,9 +321,9 @@ public void onComplete() {
 
             sb.service("glob:/oneparam/**", (ctx, req) -> {
                 // The client was able to send a request with an escaped path param. Armeria servers always
-                // decode the path so ctx.path == '/oneparam/foo' here (without query string).
-                if ("/oneparam/foo?bar".equals(req.headers().path()) &&
-                    "/oneparam/foo".equals(ctx.path())) {
+                // decode the path so ctx.path == '/oneparam/foo%3Fbar' here.
+                if ("/oneparam/foo%3Fbar".equals(req.headers().path()) &&
+                    "/oneparam/foo%3Fbar".equals(ctx.path())) {
                     return HttpResponse.of("routed");
                 }
                 return HttpResponse.of(HttpStatus.INTERNAL_SERVER_ERROR);

File: graphql/src/main/java/com/linecorp/armeria/server/graphql/DefaultGraphqlService.java
Patch:
@@ -40,7 +40,6 @@
 import graphql.ExecutionInput;
 import graphql.ExecutionResult;
 import graphql.GraphQL;
-import graphql.execution.ExecutionId;
 
 final class DefaultGraphqlService extends AbstractGraphqlService implements GraphqlService {
 
@@ -89,7 +88,6 @@ protected HttpResponse executeGraphql(ServiceRequestContext ctx, GraphqlRequest
 
         final ExecutionInput executionInput =
                 builder.context(ctx)
-                       .executionId(ExecutionId.from(ctx.id().text()))
                        .graphQLContext(GraphqlServiceContexts.graphqlContext(ctx))
                        .dataLoaderRegistry(dataLoaderRegistry)
                        .build();

File: spring/boot3-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java
Patch:
@@ -49,12 +49,12 @@
  * armeria:
  *   ports:
  *     - port: 8080
- *       protocol: HTTP
+ *       protocols: HTTP
  *     - address: 127.0.0.1
  *       port: 8081
- *       protocol:HTTP
+ *       protocols: HTTP
  *     - port: 8443
- *       protocol: HTTPS
+ *       protocols: HTTPS
  *   ssl:
  *     key-alias: "host.name.com"
  *     key-store: "keystore.jks"

File: core/src/main/java/com/linecorp/armeria/internal/common/DefaultRequestTarget.java
Patch:
@@ -57,7 +57,7 @@ public final class DefaultRequestTarget implements RequestTarget {
      * other implementations in the ecosystem, e.g. HTTP/JSON to gRPC transcoding. See
      * <a href="https://github.com/googleapis/googleapis/blob/02710fa0ea5312d79d7fb986c9c9823fb41049a9/google/api/http.proto#L257-L258">http.proto</a>.
      */
-    private static final BitSet PATH_MUST_PRESERVE_ENCODING = toBitSet("/");
+    private static final BitSet PATH_MUST_PRESERVE_ENCODING = toBitSet("/?");
 
     /**
      * The lookup table for the characters that whose percent encoding must be preserved

File: testing-internal/src/main/java/com/linecorp/armeria/internal/testing/InternalTestingBlockHoundIntegration.java
Patch:
@@ -69,7 +69,7 @@ public void applyTo(Builder builder) {
                                          "assertThatJson");
         builder.allowBlockingCallsInside("com.linecorp.armeria.testing.server.ServiceRequestContextCaptor$2",
                                          "serve");
-
+        builder.allowBlockingCallsInside("org.slf4j.impl.SimpleLogger", "write");
         builder.allowBlockingCallsInside(
                 "com.linecorp.armeria.internal.testing.InternalTestingBlockHoundIntegration",
                 "writeBlockingMethod");

File: core/src/test/java/com/linecorp/armeria/client/limit/ConcurrencyLimitingClientTest.java
Patch:
@@ -28,7 +28,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.function.BiConsumer;
 
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.RegisterExtension;
 import org.mockito.Mock;
@@ -44,7 +43,6 @@
 import com.linecorp.armeria.common.stream.NoopSubscriber;
 import com.linecorp.armeria.testing.junit5.common.EventLoopExtension;
 
-@Disabled
 class ConcurrencyLimitingClientTest {
 
     @RegisterExtension
@@ -179,6 +177,7 @@ void testFaultyDelegate() throws Exception {
         await().untilAsserted(() -> assertThat(res.isOpen()).isFalse());
         assertThatThrownBy(() -> res.whenComplete().get()).hasCauseInstanceOf(Exception.class);
         await().untilAsserted(() -> assertThat(client.numActiveRequests()).isZero());
+        await().untilAsserted(() -> assertThat(ctx.log().isComplete()).isTrue());
     }
 
     @Test

File: core/src/main/java/com/linecorp/armeria/client/AbstractEventLoopState.java
Patch:
@@ -21,6 +21,8 @@
 
 import com.google.common.annotations.VisibleForTesting;
 
+import com.linecorp.armeria.internal.common.util.ReentrantShortLock;
+
 import io.netty.channel.EventLoop;
 
 abstract class AbstractEventLoopState {
@@ -35,7 +37,7 @@ static AbstractEventLoopState of(List<EventLoop> eventLoops, int maxNumEventLoop
         return new HeapBasedEventLoopState(eventLoops, maxNumEventLoops, scheduler);
     }
 
-    private final ReentrantLock lock = new ReentrantLock();
+    private final ReentrantLock lock = new ReentrantShortLock();
     private final List<EventLoop> eventLoops;
     private final DefaultEventLoopScheduler scheduler;
 

File: core/src/main/java/com/linecorp/armeria/client/DefaultEventLoopScheduler.java
Patch:
@@ -41,6 +41,7 @@
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.ReleasableHolder;
+import com.linecorp.armeria.internal.common.util.ReentrantShortLock;
 
 import io.netty.channel.EventLoop;
 import io.netty.channel.EventLoopGroup;
@@ -58,7 +59,7 @@ final class DefaultEventLoopScheduler implements EventLoopScheduler {
 
     static final int DEFAULT_MAX_NUM_EVENT_LOOPS = 1;
 
-    private final ReentrantLock lock = new ReentrantLock();
+    private final ReentrantLock lock = new ReentrantShortLock();
 
     private final List<EventLoop> eventLoops;
 

File: core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java
Patch:
@@ -34,6 +34,7 @@
 import com.linecorp.armeria.common.Cookies;
 import com.linecorp.armeria.common.Scheme;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.internal.common.util.ReentrantShortLock;
 
 import io.netty.util.NetUtil;
 import it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap;
@@ -60,7 +61,7 @@ final class DefaultCookieJar implements CookieJar {
         this.cookiePolicy = cookiePolicy;
         store = new Object2LongOpenHashMap<>();
         filter = new HashMap<>();
-        lock = new ReentrantLock();
+        lock = new ReentrantShortLock();
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/client/endpoint/DynamicEndpointGroup.java
Patch:
@@ -30,7 +30,6 @@
 import java.util.concurrent.TimeoutException;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.concurrent.locks.Lock;
-import java.util.concurrent.locks.ReentrantLock;
 
 import com.google.common.base.MoreObjects;
 import com.google.common.base.MoreObjects.ToStringHelper;
@@ -45,6 +44,7 @@
 import com.linecorp.armeria.common.util.AsyncCloseableSupport;
 import com.linecorp.armeria.common.util.EventLoopCheckingFuture;
 import com.linecorp.armeria.common.util.ListenableAsyncCloseable;
+import com.linecorp.armeria.internal.common.util.ReentrantShortLock;
 
 /**
  * A dynamic {@link EndpointGroup}. The list of {@link Endpoint}s can be updated dynamically.
@@ -66,7 +66,7 @@ public static DynamicEndpointGroupBuilder builder() {
     private final EndpointSelectionStrategy selectionStrategy;
     private final AtomicReference<EndpointSelector> selector = new AtomicReference<>();
     private volatile List<Endpoint> endpoints = UNINITIALIZED_ENDPOINTS;
-    private final Lock endpointsLock = new ReentrantLock();
+    private final Lock endpointsLock = new ReentrantShortLock();
 
     private final CompletableFuture<List<Endpoint>> initialEndpointsFuture = new InitialEndpointsFuture();
     private final AsyncCloseableSupport closeable = AsyncCloseableSupport.of(this::closeAsync);

File: core/src/main/java/com/linecorp/armeria/client/endpoint/FileWatcherRegistry.java
Patch:
@@ -38,6 +38,7 @@
 import com.google.common.base.MoreObjects;
 
 import com.linecorp.armeria.client.endpoint.FileWatcherRunnable.FileWatchEvent;
+import com.linecorp.armeria.internal.common.util.ReentrantShortLock;
 
 /**
  * A registry which wraps a {@link WatchService} and allows paths to be registered.
@@ -133,7 +134,7 @@ void close() throws IOException {
 
     private final Map<FileSystem, FileSystemWatchContext> fileSystemWatchServiceMap =
             new HashMap<>();
-    private final ReentrantLock lock = new ReentrantLock();
+    private final ReentrantLock lock = new ReentrantShortLock();
 
     /**
      * Registers a {@code filePath} and {@code callback} to the {@link WatchService}. When the

File: core/src/main/java/com/linecorp/armeria/client/endpoint/RestartableThread.java
Patch:
@@ -22,13 +22,14 @@
 import java.util.function.Supplier;
 
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.internal.common.util.ReentrantShortLock;
 
 /**
  * A restartable thread utility class.
  */
 final class RestartableThread {
 
-    private final ReentrantLock lock = new ReentrantLock();
+    private final ReentrantLock lock = new ReentrantShortLock();
 
     @Nullable
     private Thread thread;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/WeightedRandomDistributionEndpointSelector.java
Patch:
@@ -27,6 +27,7 @@
 
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.internal.common.util.ReentrantShortLock;
 
 /**
  * This selector selects an {@link Endpoint} using random and the weight of the {@link Endpoint}. If there are
@@ -37,7 +38,7 @@
  */
 final class WeightedRandomDistributionEndpointSelector {
 
-    private final ReentrantLock lock = new ReentrantLock();
+    private final ReentrantLock lock = new ReentrantShortLock();
     private final List<Entry> allEntries;
     @GuardedBy("lock")
     private final List<Entry> currentEntries;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/DefaultHealthCheckerContext.java
Patch:
@@ -43,6 +43,7 @@
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.AsyncCloseable;
 import com.linecorp.armeria.common.util.EventLoopCheckingFuture;
+import com.linecorp.armeria.internal.common.util.ReentrantShortLock;
 
 import io.netty.channel.EventLoopGroup;
 import io.netty.util.concurrent.Future;
@@ -54,7 +55,7 @@ final class DefaultHealthCheckerContext
     private final Endpoint endpoint;
     private final SessionProtocol protocol;
     private final ClientOptions clientOptions;
-    private final ReentrantLock lock = new ReentrantLock();
+    private final ReentrantLock lock = new ReentrantShortLock();
 
     /**
      * Keeps the {@link Future}s which were scheduled via this {@link ScheduledExecutorService}.

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroup.java
Patch:
@@ -49,6 +49,7 @@
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.metric.MeterIdPrefix;
 import com.linecorp.armeria.common.util.AsyncCloseable;
+import com.linecorp.armeria.internal.common.util.ReentrantShortLock;
 
 import io.micrometer.core.instrument.binder.MeterBinder;
 
@@ -110,7 +111,7 @@ public static HealthCheckedEndpointGroupBuilder builder(EndpointGroup delegate,
     @VisibleForTesting
     final HealthCheckStrategy healthCheckStrategy;
 
-    private final ReentrantLock lock = new ReentrantLock();
+    private final ReentrantLock lock = new ReentrantShortLock();
     @GuardedBy("lock")
     private final Deque<HealthCheckContextGroup> contextGroupChain = new ArrayDeque<>(4);
 

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HttpHealthChecker.java
Patch:
@@ -49,6 +49,7 @@
 import com.linecorp.armeria.common.util.AsyncCloseable;
 import com.linecorp.armeria.common.util.AsyncCloseableSupport;
 import com.linecorp.armeria.common.util.TimeoutMode;
+import com.linecorp.armeria.internal.common.util.ReentrantShortLock;
 import com.linecorp.armeria.unsafe.PooledObjects;
 
 import io.netty.util.AsciiString;
@@ -60,7 +61,7 @@ final class HttpHealthChecker implements AsyncCloseable {
 
     private static final AsciiString ARMERIA_LPHC = HttpHeaderNames.of("armeria-lphc");
 
-    private final ReentrantLock lock = new ReentrantLock();
+    private final ReentrantLock lock = new ReentrantShortLock();
     private final HealthCheckerContext ctx;
     private final WebClient webClient;
     private final String authority;

File: core/src/main/java/com/linecorp/armeria/common/util/AbstractListenable.java
Patch:
@@ -25,6 +25,7 @@
 
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.util.IdentityHashStrategy;
+import com.linecorp.armeria.internal.common.util.ReentrantShortLock;
 
 import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenCustomHashSet;
 
@@ -40,7 +41,7 @@ public abstract class AbstractListenable<T> implements Listenable<T> {
     private final Set<Consumer<? super T>> updateListeners =
             new ObjectLinkedOpenCustomHashSet<>(IdentityHashStrategy.of());
 
-    private final ReentrantLock reentrantLock = new ReentrantLock();
+    private final ReentrantLock reentrantLock = new ReentrantShortLock();
 
     /**
      * Notify the new value changes to the listeners added via {@link #addListener(Consumer)}.

File: core/src/main/java/com/linecorp/armeria/common/util/AbstractOption.java
Patch:
@@ -31,6 +31,7 @@
 import com.google.common.collect.ImmutableSet;
 
 import com.linecorp.armeria.client.ClientOption;
+import com.linecorp.armeria.internal.common.util.ReentrantShortLock;
 
 /**
  * A configuration option.
@@ -236,7 +237,7 @@ private static final class Pool {
 
         private final Class<?> type;
         private final BiMap<String, AbstractOption<?, ?, ?>> options;
-        private final ReentrantLock reentrantLock = new ReentrantLock();
+        private final ReentrantLock reentrantLock = new ReentrantShortLock();
 
         Pool(Class<?> type) {
             this.type = type;

File: core/src/main/java/com/linecorp/armeria/common/util/CompositeException.java
Patch:
@@ -47,6 +47,7 @@
 
 import com.linecorp.armeria.common.Flags;
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.internal.common.util.ReentrantShortLock;
 
 /**
  * Represents an exception that is a composite of one or more other exceptions. A {@code CompositeException}
@@ -81,7 +82,7 @@ public final class CompositeException extends RuntimeException {
     @Nullable
     private Throwable cause;
 
-    private final ReentrantLock reentrantLock = new ReentrantLock();
+    private final ReentrantLock reentrantLock = new ReentrantShortLock();
 
     /**
      * Constructs a CompositeException with the given array of Throwables as the

File: core/src/main/java/com/linecorp/armeria/common/util/ShutdownHooks.java
Patch:
@@ -33,6 +33,7 @@
 
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
+import com.linecorp.armeria.internal.common.util.ReentrantShortLock;
 
 /**
  * A utility class for adding a task with an {@link AutoCloseable} on shutdown.
@@ -46,7 +47,7 @@ public final class ShutdownHooks {
     private static final Map<AutoCloseable, Queue<Runnable>> autoCloseableOnShutdownTasks =
             new LinkedHashMap<>();
 
-    private static final ReentrantLock reentrantLock = new ReentrantLock();
+    private static final ReentrantLock reentrantLock = new ReentrantShortLock();
 
     private static final ThreadFactory THREAD_FACTORY = ThreadFactories
             .builder("armeria-shutdown-hook")

File: core/src/main/java/com/linecorp/armeria/common/util/StartStopSupport.java
Patch:
@@ -32,6 +32,7 @@
 import org.slf4j.LoggerFactory;
 
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.internal.common.util.ReentrantShortLock;
 
 /**
  * Provides asynchronous start-stop life cycle support.
@@ -63,7 +64,7 @@ enum State {
      */
     private UnmodifiableFuture<?> future = completedFuture(null);
 
-    private final ReentrantLock reentrantLock = new ReentrantLock();
+    private final ReentrantLock reentrantLock = new ReentrantShortLock();
 
     /**
      * Creates a new instance.

File: core/src/main/java/com/linecorp/armeria/internal/common/JacksonUtil.java
Patch:
@@ -38,7 +38,8 @@ public final class JacksonUtil {
 
     static {
         final List<JacksonObjectMapperProvider> providers =
-                ImmutableList.copyOf(ServiceLoader.load(JacksonObjectMapperProvider.class));
+                ImmutableList.copyOf(ServiceLoader.load(JacksonObjectMapperProvider.class,
+                                                        JacksonObjectMapperProvider.class.getClassLoader()));
         if (!providers.isEmpty()) {
             // Use a custom ObjectMapper provided via SPI.
             provider = providers.get(0);

File: core/src/main/java/com/linecorp/armeria/internal/common/ReflectiveDependencyInjector.java
Patch:
@@ -31,6 +31,7 @@
 
 import com.linecorp.armeria.common.DependencyInjector;
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.internal.common.util.ReentrantShortLock;
 
 public final class ReflectiveDependencyInjector implements DependencyInjector {
 
@@ -57,7 +58,7 @@ public static <T> T create(Class<? extends T> type, @Nullable Map<Class<?>, Obje
         return instance;
     }
 
-    private final ReentrantLock lock = new ReentrantLock();
+    private final ReentrantLock lock = new ReentrantShortLock();
 
     private final Map<Class<?>, Object> instances = new HashMap<>();
 

File: core/src/main/java/com/linecorp/armeria/internal/common/metric/CaffeineMetricSupport.java
Patch:
@@ -43,6 +43,7 @@
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.metric.MeterIdPrefix;
 import com.linecorp.armeria.common.util.Ticker;
+import com.linecorp.armeria.internal.common.util.ReentrantShortLock;
 
 import io.micrometer.core.instrument.MeterRegistry;
 
@@ -86,7 +87,7 @@ private static final class CaffeineMetrics {
 
         private final MeterRegistry parent;
         private final MeterIdPrefix idPrefix;
-        private final ReentrantLock lock = new ReentrantLock();
+        private final ReentrantLock lock = new ReentrantShortLock();
         @GuardedBy("lock")
         private final List<CacheReference> cacheRefs = new ArrayList<>(2);
         private final AtomicBoolean hasLoadingCache = new AtomicBoolean();

File: core/src/main/java/com/linecorp/armeria/internal/common/util/MinifiedBouncyCastleProvider.java
Patch:
@@ -47,7 +47,7 @@ public final class MinifiedBouncyCastleProvider extends Provider implements Conf
 
     private static final String PROVIDER_NAME = "ArmeriaBC";
 
-    private static final ReentrantLock lock = new ReentrantLock();
+    private static final ReentrantLock lock = new ReentrantShortLock();
 
     private static final Map<ASN1ObjectIdentifier, AsymmetricKeyInfoConverter> keyInfoConverters =
             new ConcurrentHashMap<>();

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedBeanFactoryRegistry.java
Patch:
@@ -49,6 +49,7 @@
 
 import com.linecorp.armeria.common.DependencyInjector;
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.internal.common.util.ReentrantShortLock;
 import com.linecorp.armeria.internal.server.annotation.AnnotatedValueResolver.NoAnnotatedParameterException;
 import com.linecorp.armeria.internal.server.annotation.AnnotatedValueResolver.RequestObjectResolver;
 import com.linecorp.armeria.server.annotation.RequestConverter;
@@ -63,7 +64,7 @@
 final class AnnotatedBeanFactoryRegistry {
     private static final Logger logger = LoggerFactory.getLogger(AnnotatedBeanFactoryRegistry.class);
 
-    private static final ReentrantLock lock = new ReentrantLock();
+    private static final ReentrantLock lock = new ReentrantShortLock();
 
     private static final ClassValue<AnnotatedBeanFactories> factories =
             new ClassValue<AnnotatedBeanFactories>() {

File: core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckService.java
Patch:
@@ -43,6 +43,7 @@
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.TimeoutMode;
 import com.linecorp.armeria.internal.common.ArmeriaHttpUtil;
+import com.linecorp.armeria.internal.common.util.ReentrantShortLock;
 import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.HttpStatusException;
 import com.linecorp.armeria.server.RequestTimeoutException;
@@ -137,7 +138,7 @@ public static HealthCheckServiceBuilder builder() {
     private final long maxLongPollingTimeoutMillis;
     private final double longPollingTimeoutJitterRate;
     private final long pingIntervalMillis;
-    private final ReentrantLock lock = new ReentrantLock();
+    private final ReentrantLock lock = new ReentrantShortLock();
     @Nullable
     private final Consumer<HealthChecker> healthCheckerListener;
     @Nullable

File: core/src/test/java/com/linecorp/armeria/client/HttpClientPipeliningTest.java
Patch:
@@ -34,6 +34,7 @@
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.util.EventLoopGroups;
+import com.linecorp.armeria.internal.testing.BlockingUtils;
 import com.linecorp.armeria.server.AbstractHttpService;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.ServiceRequestContext;
@@ -72,7 +73,7 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) throws
                             lock.unlock();
                         }
 
-                        semaphore.acquireUninterruptibly();
+                        BlockingUtils.blockingRun(() -> semaphore.acquireUninterruptibly());
                         try {
                             return HttpResponse.of(HttpStatus.OK, MediaType.PLAIN_TEXT_UTF_8,
                                                    String.valueOf(ctx.remoteAddress()));

File: core/src/test/java/com/linecorp/armeria/client/endpoint/SelectionTimeoutTest.java
Patch:
@@ -45,6 +45,7 @@
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.internal.client.ClientPendingThrowableUtil;
+import com.linecorp.armeria.internal.testing.BlockingUtils;
 
 class SelectionTimeoutTest {
 
@@ -308,7 +309,7 @@ void select_shouldRespectResponseTimeout() {
             try (MockEndpointGroup endpointGroup = new MockEndpointGroup(5000)) {
                 final CompletableFuture<Endpoint> result =
                         endpointGroup.select(ctx, CommonPools.blockingTaskExecutor());
-                assertThat(result.join()).isNull();
+                assertThat(BlockingUtils.blockingRun(result::join)).isNull();
                 assertThat(stopwatch.elapsed())
                         .isGreaterThanOrEqualTo(Duration.ofSeconds(2));
             }

File: core/src/test/java/com/linecorp/armeria/common/util/EventLoopCheckingFutureTest.java
Patch:
@@ -38,6 +38,7 @@
 import org.slf4j.LoggerFactory;
 
 import com.linecorp.armeria.common.CommonPools;
+import com.linecorp.armeria.internal.testing.BlockingUtils;
 import com.linecorp.armeria.testing.junit5.common.EventLoopExtension;
 
 import ch.qos.logback.classic.Level;
@@ -117,7 +118,7 @@ void getTimeoutOffEventLoop() throws Exception {
 
     private void testBlockingOperationOnEventLoop(EventLoopCheckingFutureTask task) {
         final EventLoopCheckingFuture<String> future = new EventLoopCheckingFuture<>();
-        eventLoop.get().submit(() -> task.run(future));
+        eventLoop.get().submit(() -> BlockingUtils.blockingRun(() -> task.run(future)));
         try {
             await().untilAsserted(() -> {
                 verify(appender, atLeast(0)).doAppend(eventCaptor.capture());

File: core/src/test/java/com/linecorp/armeria/common/util/StartStopSupportTest.java
Patch:
@@ -63,7 +63,8 @@ public class StartStopSupportTest {
     private static final String THREAD_NAME_PREFIX = StartStopSupportTest.class.getSimpleName();
 
     @ClassRule
-    public static final EventLoopRule rule = new EventLoopRule(THREAD_NAME_PREFIX);
+    public static final EventLoopRule rule = new EventLoopRule(
+            ThreadFactories.newThreadFactory(THREAD_NAME_PREFIX, false));
 
     @Rule
     public TestRule globalTimeout = new DisableOnDebug(new Timeout(10, TimeUnit.SECONDS));

File: core/src/test/java/com/linecorp/armeria/common/util/ThreadFactoryTest.java
Patch:
@@ -68,7 +68,7 @@ void testNonEventLoopThreadFactory() {
                                                          .build()
                                                          .newThread(() -> {});
 
-        assertThat(nonEventLoopThread.getClass()).isSameAs(FastThreadLocalThread.class);
+        assertThat(nonEventLoopThread).isInstanceOf(FastThreadLocalThread.class);
         assertThat(nonEventLoopThread.getName()).startsWith("normal-thread");
         assertThat(nonEventLoopThread.getPriority()).isEqualTo(Thread.NORM_PRIORITY);
         assertThat(nonEventLoopThread.isDaemon()).isFalse();
@@ -82,7 +82,7 @@ void testNonEventLoopThreadFactory() {
                                                                .build()
                                                                .newThread(() -> {});
 
-        assertThat(nonEventLoopCustomThread.getClass()).isSameAs(FastThreadLocalThread.class);
+        assertThat(nonEventLoopCustomThread).isInstanceOf(FastThreadLocalThread.class);
         assertThat(nonEventLoopCustomThread.getName()).startsWith("custom-thread");
         assertThat(nonEventLoopCustomThread.getPriority()).isEqualTo(Thread.MAX_PRIORITY);
         assertThat(nonEventLoopCustomThread.isDaemon()).isTrue();

File: core/src/test/java/com/linecorp/armeria/server/GracefulShutdownSupportTest.java
Patch:
@@ -52,7 +52,7 @@ class GracefulShutdownSupportTest {
     void setUp() {
         executor = new ThreadPoolExecutor(
                 0, 1, 1, TimeUnit.SECONDS, new LinkedTransferQueue<>(),
-                ThreadFactories.newEventLoopThreadFactory("graceful-shutdown-test", true));
+                ThreadFactories.newThreadFactory("graceful-shutdown-test", true));
 
         support = GracefulShutdownSupport.create(Duration.ofNanos(QUIET_PERIOD_NANOS), executor, ticker);
     }

File: graphql/src/main/java/com/linecorp/armeria/server/graphql/DefaultGraphqlService.java
Patch:
@@ -40,6 +40,7 @@
 import graphql.ExecutionInput;
 import graphql.ExecutionResult;
 import graphql.GraphQL;
+import graphql.execution.ExecutionId;
 
 final class DefaultGraphqlService extends AbstractGraphqlService implements GraphqlService {
 
@@ -88,6 +89,7 @@ protected HttpResponse executeGraphql(ServiceRequestContext ctx, GraphqlRequest
 
         final ExecutionInput executionInput =
                 builder.context(ctx)
+                       .executionId(ExecutionId.from(ctx.id().text()))
                        .graphQLContext(GraphqlServiceContexts.graphqlContext(ctx))
                        .dataLoaderRegistry(dataLoaderRegistry)
                        .build();

File: it/context-storage/src/test/java/com/linecorp/armeria/common/RequestContextStorageCustomizingTest.java
Patch:
@@ -27,6 +27,7 @@
 import com.linecorp.armeria.common.CustomRequestContextStorageProvider.CustomRequestContextStorage;
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.SafeCloseable;
+import com.linecorp.armeria.common.util.ThreadFactories;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.testing.junit5.common.EventLoopExtension;
 
@@ -35,7 +36,8 @@
 class RequestContextStorageCustomizingTest {
 
     @RegisterExtension
-    static final EventLoopExtension eventLoopExtension = new EventLoopExtension();
+    static final EventLoopExtension eventLoopExtension = new EventLoopExtension(
+            ThreadFactories.newThreadFactory("armeria-testing-eventloop", false));
 
     @Test
     void requestContextStorageDoesNotAffectOtherThread() throws InterruptedException {

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlDecorator.java
Patch:
@@ -137,7 +137,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
             }).thenCompose(arg -> {
                 return ssoHandler.beforeInitiatingSso(ctx, req, arg.messageContext, arg.idpConfig)
                                  .thenApply(unused -> arg);
-            }).thenApply(arg -> {
+            }).thenApplyAsync(arg -> {
                 final SAMLBindingContext bindingContext =
                         arg.messageContext.getSubcontext(SAMLBindingContext.class);
                 final String relayState = bindingContext != null ? bindingContext.getRelayState() : null;
@@ -153,6 +153,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
                                 signingCredential, sp.signatureAlgorithm(),
                                 relayState));
                     } else {
+                        // signing can incur a blocking call
                         final String value = toSignedBase64(
                                 arg.messageContext.getMessage(),
                                 signingCredential,
@@ -166,7 +167,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
                 } catch (SamlException e) {
                     return fail(ctx, e);
                 }
-            }).exceptionally(e -> fail(ctx, e)));
+            }, ctx.blockingTaskExecutor()).exceptionally(e -> fail(ctx, e)));
         }));
     }
 

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlService.java
Patch:
@@ -152,7 +152,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
         } else {
             f = portConfigHolder.future().thenCompose(unused -> req.aggregate());
         }
-        return HttpResponse.from(f.handle((aggregatedReq, cause) -> {
+        return HttpResponse.from(f.handleAsync((aggregatedReq, cause) -> {
             if (cause != null) {
                 logger.warn("{} Failed to aggregate a SAML request.", ctx, cause);
                 return HttpResponse.of(HttpStatus.BAD_REQUEST, MediaType.PLAIN_TEXT_UTF_8,
@@ -177,8 +177,9 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
             // If there's no hostname set by a user, the default virtual hostname will be used.
             final String defaultHostname =
                     firstNonNull(sp.hostname(), ctx.config().virtualHost().defaultHostname());
+            // assertion, logout requests incur blocking calls
             return func.serve(ctx, aggregatedReq, defaultHostname, portConfig);
-        }));
+        }, ctx.blockingTaskExecutor()));
     }
 
     /**

File: zookeeper3/src/main/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroup.java
Patch:
@@ -34,10 +34,9 @@
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.client.endpoint.EndpointSelectionStrategy;
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.common.util.ThreadFactories;
 import com.linecorp.armeria.server.zookeeper.ZooKeeperUpdatingListener;
 
-import io.netty.util.concurrent.DefaultThreadFactory;
-
 /**
  * A ZooKeeper-based {@link EndpointGroup} implementation. This {@link EndpointGroup} retrieves the list of
  * {@link Endpoint}s from a ZooKeeper and updates it when the children of the znode changes.
@@ -49,7 +48,7 @@ public final class ZooKeeperEndpointGroup extends DynamicEndpointGroup {
     private static final Logger logger = LoggerFactory.getLogger(ZooKeeperEndpointGroup.class);
 
     private static final ThreadFactory closeCuratorFrameworkThreadFactory =
-            new DefaultThreadFactory("armeria-close-CuratorFramework");
+            ThreadFactories.newThreadFactory("armeria-close-CuratorFramework", false);
 
     /**
      * Returns a new {@link ZooKeeperEndpointGroup} that retrieves the {@link Endpoint} list from

File: spring/boot3-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ReactiveHealthEndpointWebExtensionUtil.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.reactivestreams.Publisher;
 import org.springframework.boot.actuate.endpoint.InvalidEndpointRequestException;
+import org.springframework.boot.actuate.health.HttpCodeStatusMapper;
 
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpResponse;
@@ -33,7 +34,7 @@
 
 final class ReactiveHealthEndpointWebExtensionUtil {
 
-    static HttpResponse handleMaybeReactorResult(SimpleHttpCodeStatusMapper statusMapper,
+    static HttpResponse handleMaybeReactorResult(HttpCodeStatusMapper statusMapper,
                                                  ServiceRequestContext ctx, Object result,
                                                  HttpMethod method) throws Throwable {
         if (result instanceof Flux) {
@@ -47,7 +48,7 @@ static HttpResponse handleMaybeReactorResult(SimpleHttpCodeStatusMapper statusMa
         return handleResult(statusMapper, ctx, result, method);
     }
 
-    private static HttpResponse handlePublisher(SimpleHttpCodeStatusMapper statusMapper,
+    private static HttpResponse handlePublisher(HttpCodeStatusMapper statusMapper,
                                                 ServiceRequestContext ctx, Publisher<?> result,
                                                 HttpMethod method) {
         final Mono<HttpResponse> monoResponse =

File: spring/boot3-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/WebOperationServiceUtil.java
Patch:
@@ -29,6 +29,7 @@
 import org.springframework.boot.actuate.health.AdditionalHealthEndpointPath;
 import org.springframework.boot.actuate.health.HealthEndpointGroup;
 import org.springframework.boot.actuate.health.HealthEndpointGroups;
+import org.springframework.boot.actuate.health.HttpCodeStatusMapper;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
@@ -52,7 +53,7 @@ static OperationArgumentResolver namespaceResolver(boolean server) {
 
     static void addAdditionalPath(ServerBuilder sb, List<Integer> exposedPorts,
                                   ExposableWebEndpoint endpoint,
-                                  SimpleHttpCodeStatusMapper statusMapper,
+                                  HttpCodeStatusMapper statusMapper,
                                   @Nullable CorsServiceBuilder cors, HealthEndpointGroups groups) {
         for (WebOperation operation : endpoint.getOperations()) {
             final WebOperationRequestPredicate predicate = operation.getRequestPredicate();
@@ -87,7 +88,7 @@ static void addAdditionalPath(ServerBuilder sb, List<Integer> exposedPorts,
     }
 
     static void addAdditionalPath(ServerBuilder sb, List<Integer> exposedPorts,
-                                  SimpleHttpCodeStatusMapper statusMapper, WebOperation operation,
+                                  HttpCodeStatusMapper statusMapper, WebOperation operation,
                                   WebOperationRequestPredicate predicate,
                                   Set<HealthEndpointGroup> additionalGroups,
                                   @Nullable CorsServiceBuilder cors) {

File: spring/boot3-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaSettingsConfigurationTest.java
Patch:
@@ -38,7 +38,7 @@
 @SpringBootTest(classes = TestConfiguration.class)
 @ActiveProfiles({ "local", "settings" })
 @DirtiesContext
-class ArmeriaSettingsConfigurationTest {
+public class ArmeriaSettingsConfigurationTest {
 
     @SpringBootApplication
     static class TestConfiguration {}

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlAssertionConsumerFunction.java
Patch:
@@ -141,7 +141,8 @@ private Assertion getValidatedAssertion(Response response, String endpointUri) {
         if (Math.abs(now.getMillis() - issueInstant.getMillis()) > MILLIS_IN_MINUTE) {
             // Allow if 'issueInstant' is in [now - 60s, now + 60s] because there might be the
             // time difference between SP's timer and IdP's timer.
-            throw new InvalidSamlRequestException("invalid IssueInstant: " + issueInstant);
+            throw new InvalidSamlRequestException("invalid IssueInstant: " + issueInstant +
+                                                  " (now: " + now + ')');
         }
 
         final List<Assertion> assertions;

File: core/src/main/java/com/linecorp/armeria/client/HttpClientFactory.java
Patch:
@@ -50,6 +50,7 @@
 import com.linecorp.armeria.common.util.ReleasableHolder;
 import com.linecorp.armeria.common.util.ShutdownHooks;
 import com.linecorp.armeria.common.util.TransportType;
+import com.linecorp.armeria.internal.common.RequestTargetCache;
 import com.linecorp.armeria.internal.common.util.SslContextUtil;
 
 import io.micrometer.core.instrument.MeterRegistry;
@@ -166,6 +167,7 @@ final class HttpClientFactory implements ClientFactory {
         this.options = options;
 
         clientDelegate = new HttpClientDelegate(this, addressResolverGroup);
+        RequestTargetCache.registerClientMetrics(meterRegistry);
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/client/logging/ContentPreviewingClient.java
Patch:
@@ -151,6 +151,7 @@ public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Ex
             final ContentPreviewer requestContentPreviewer =
                     contentPreviewerFactory.requestContentPreviewer(ctx, req.headers());
             req = setUpRequestContentPreviewer(ctx, req, requestContentPreviewer, requestPreviewSanitizer);
+            ctx.updateRequest(req);
         } else {
             // Set empty String.
             ctx.logBuilder().requestContentPreview("");

File: core/src/test/java/com/linecorp/armeria/client/HttpClientContextCaptorTest.java
Patch:
@@ -62,7 +62,7 @@ void connectionRefused() {
     void badPath() {
         try (ClientRequestContextCaptor ctxCaptor = Clients.newContextCaptor()) {
             // Send a request with a bad path.
-            final HttpResponse res = WebClient.of().get("http://127.0.0.1:1/|");
+            final HttpResponse res = WebClient.of().get("http://127.0.0.1:1/%");
             assertThatThrownBy(ctxCaptor::get).isInstanceOf(NoSuchElementException.class)
                                               .hasMessageContaining("no request was made");
             res.aggregate();

File: core/src/test/java/com/linecorp/armeria/server/RouterTest.java
Patch:
@@ -44,6 +44,7 @@
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.RequestHeaders;
+import com.linecorp.armeria.common.RequestTarget;
 
 class RouterTest {
     private static final Logger logger = LoggerFactory.getLogger(RouterTest.class);
@@ -118,7 +119,7 @@ void testFindAllMatchedRouters(String path, int expectForFind, List<Integer> exp
     private static DefaultRoutingContext routingCtx(String path) {
         return new DefaultRoutingContext(virtualHost(), "example.com",
                                          RequestHeaders.of(HttpMethod.GET, path),
-                                         path, null, null, RoutingStatus.OK);
+                                         RequestTarget.forServer(path), RoutingStatus.OK);
     }
 
     static Stream<Arguments> generateRouteMatchData() {

File: grpc-protocol/src/main/java/com/linecorp/armeria/client/grpc/protocol/UnaryGrpcClient.java
Patch:
@@ -193,7 +193,9 @@ public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) {
                                        }
 
                                        try {
-                                           return unwrap().execute(ctx, HttpRequest.of(req.headers(), framed))
+                                           final HttpRequest framedReq = HttpRequest.of(req.headers(), framed);
+                                           ctx.updateRequest(framedReq);
+                                           return unwrap().execute(ctx, framedReq)
                                                           .aggregate(aggregationOptions);
                                        } catch (Exception e) {
                                            throw new ArmeriaStatusException(StatusCodes.INTERNAL,

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceServerTest.java
Patch:
@@ -89,7 +89,7 @@
 import com.linecorp.armeria.grpc.testing.UnitTestServiceGrpc.UnitTestServiceBlockingStub;
 import com.linecorp.armeria.grpc.testing.UnitTestServiceGrpc.UnitTestServiceImplBase;
 import com.linecorp.armeria.grpc.testing.UnitTestServiceGrpc.UnitTestServiceStub;
-import com.linecorp.armeria.internal.common.PathAndQuery;
+import com.linecorp.armeria.internal.common.RequestTargetCache;
 import com.linecorp.armeria.internal.common.grpc.GrpcLogUtil;
 import com.linecorp.armeria.internal.common.grpc.GrpcTestUtil;
 import com.linecorp.armeria.internal.common.grpc.StreamRecorder;
@@ -545,7 +545,7 @@ void setUp() {
         COMPLETED.set(false);
         CLIENT_CLOSED.set(false);
 
-        PathAndQuery.clearCachedPaths();
+        RequestTargetCache.clearCachedPaths();
     }
 
     @AfterEach
@@ -564,7 +564,7 @@ void unary_normal(UnitTestServiceBlockingStub blockingClient) throws Exception {
         assertThat(blockingClient.staticUnaryCall(REQUEST_MESSAGE)).isEqualTo(RESPONSE_MESSAGE);
 
         // Confirm gRPC paths are cached despite using serviceUnder
-        await().untilAsserted(() -> assertThat(PathAndQuery.cachedPaths())
+        await().untilAsserted(() -> assertThat(RequestTargetCache.cachedServerPaths())
                 .contains("/armeria.grpc.testing.UnitTestService/StaticUnaryCall"));
 
         checkRequestLog((rpcReq, rpcRes, grpcStatus) -> {

File: core/src/test/java/com/linecorp/armeria/internal/client/AbstractRuleBuilderTest.java
Patch:
@@ -54,6 +54,7 @@ void checkStaticMethods() {
                                                           method.getName().startsWith("on") &&
                                                           !"onResponseHeaders".equals(method.getName()) &&
                                                           !"onResponseTrailers".equals(method.getName()) &&
+                                                          !"onGrpcTrailers".equals(method.getName()) &&
                                                           !"onUnprocessed".equals(method.getName()) &&
                                                           !method.isVarArgs());
 

File: grpc/src/main/java/com/linecorp/armeria/common/grpc/GrpcWebTrailers.java
Patch:
@@ -23,6 +23,7 @@
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
+import com.linecorp.armeria.internal.common.InternalGrpcWebTrailers;
 
 /**
  * Retrieves <a href="https://grpc.io/docs/languages/web/basics/">gRPC-Web</a> trailers.
@@ -65,14 +66,14 @@ public final class GrpcWebTrailers {
      */
     @Nullable
     public static HttpHeaders get(RequestContext ctx) {
-        return com.linecorp.armeria.common.grpc.protocol.GrpcWebTrailers.get(ctx);
+        return InternalGrpcWebTrailers.get(ctx);
     }
 
     /**
      * Sets the specified gRPC-Web trailers to the {@link RequestContext}.
      */
     public static void set(RequestContext ctx, HttpHeaders trailers) {
-        com.linecorp.armeria.common.grpc.protocol.GrpcWebTrailers.set(ctx, trailers);
+        InternalGrpcWebTrailers.set(ctx, trailers);
     }
 
     private GrpcWebTrailers() {}

File: core/src/main/java/com/linecorp/armeria/server/AggregatedHttpResponseHandler.java
Patch:
@@ -27,6 +27,7 @@
 
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.CancellationException;
+import com.linecorp.armeria.common.EmptyHttpResponseException;
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.common.util.SafeCloseable;
@@ -101,7 +102,7 @@ private void recoverAndWrite(Throwable cause) {
         } else if (cause instanceof HttpStatusException) {
             final Throwable cause0 = firstNonNull(cause.getCause(), cause);
             write(toAggregatedHttpResponse((HttpStatusException) cause), cause0);
-        } else if (Exceptions.isStreamCancelling(cause)) {
+        } else if (Exceptions.isStreamCancelling(cause) || cause instanceof EmptyHttpResponseException) {
             resetAndFail(cause);
         } else {
             if (!(cause instanceof CancellationException)) {

File: core/src/test/java/com/linecorp/armeria/server/HttpServerStreamingTest.java
Patch:
@@ -165,7 +165,7 @@ void testTooLargeContentToNonExistentService(WebClient client) throws Exception
         final byte[] content = new byte[maxContentLength + 1];
         final AggregatedHttpResponse res = client.post("/non-existent", content).aggregate().get();
         assertThat(res.status()).isSameAs(HttpStatus.NOT_FOUND);
-        assertThat(res.contentUtf8()).startsWith("Status: 404\n");
+        assertThat(res.content().isEmpty()).isTrue();
     }
 
     @ParameterizedTest

File: core/src/test/java/com/linecorp/armeria/server/HttpServerTest.java
Patch:
@@ -601,7 +601,8 @@ void testTooLargeContentToNonExistentService(WebClient client) {
         final byte[] content = new byte[(int) MAX_CONTENT_LENGTH + 1];
         final AggregatedHttpResponse res = client.post("/non-existent", content).aggregate().join();
         assertThat(res.status()).isSameAs(HttpStatus.NOT_FOUND);
-        assertThat(res.contentUtf8()).startsWith("Status: 404\n");
+        // `FallbackService` does not send a response body.
+        assertThat(res.content().isEmpty()).isTrue();
     }
 
     @ParameterizedTest

File: core/src/main/java/com/linecorp/armeria/client/ConnectionPoolLoggingListener.java
Patch:
@@ -18,6 +18,7 @@
 import static java.util.Objects.requireNonNull;
 
 import java.net.InetSocketAddress;
+import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import org.slf4j.Logger;
@@ -82,7 +83,7 @@ public void connectionClosed(SessionProtocol protocol,
             final long elapsedNanos = closeNanos - attrs.attr(OPEN_NANOS).get();
             logger.info("[L:{} ! R:{}][{}] CLOSED (lasted for: {}, active channels: {})",
                         localAddr, remoteAddr, protocol.uriText(),
-                        TextFormatter.elapsed(elapsedNanos), activeChannels);
+                        TextFormatter.elapsed(elapsedNanos, TimeUnit.NANOSECONDS), activeChannels);
         }
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/AbstractHttpResponseHandler.java
Patch:
@@ -201,9 +201,9 @@ final AggregatedHttpResponse toAggregatedHttpResponse(HttpStatusException cause)
         final HttpStatus status = cause.httpStatus();
         final Throwable cause0 = firstNonNull(cause.getCause(), cause);
         final ServiceConfig serviceConfig = reqCtx.config();
-        final AggregatedHttpResponse response =
-                serviceConfig.server().config().errorHandler()
-                             .renderStatus(serviceConfig, req.headers(), status, null, cause0);
+        final AggregatedHttpResponse response = serviceConfig.errorHandler()
+                                                             .renderStatus(serviceConfig, req.headers(), status,
+                                                                           null, cause0);
         assert response != null;
         return response;
     }

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -358,7 +358,6 @@ private void handleRequest(ChannelHandlerContext ctx, DecodedHttpRequest req) th
 
         try (SafeCloseable ignored = reqCtx.push()) {
             final RequestLogBuilder logBuilder = reqCtx.logBuilder();
-            final ServerErrorHandler serverErrorHandler = config.errorHandler();
             HttpResponse serviceResponse;
             try {
                 req.init(reqCtx);
@@ -377,7 +376,7 @@ private void handleRequest(ChannelHandlerContext ctx, DecodedHttpRequest req) th
                 // Store the cause to set as the log.responseCause().
                 CapturedServiceException.set(reqCtx, cause);
                 // Recover the failed response with the error handler.
-                return serverErrorHandler.onServiceException(reqCtx, cause);
+                return serviceCfg.errorHandler().onServiceException(reqCtx, cause);
             });
             final HttpResponse res = serviceResponse;
             final EventLoop eventLoop = channel.eventLoop();

File: core/src/main/java/com/linecorp/armeria/server/ServerConfig.java
Patch:
@@ -308,7 +308,7 @@ default boolean shutdownBlockingTaskExecutorOnStop() {
     Function<String, String> absoluteUriTransformer();
 
     /**
-     * Returns the interval between reporting unhandled exceptions.
+     * Returns the interval between reporting unhandled exceptions in milliseconds.
      */
-    Duration unhandledExceptionsReportInterval();
+    long unhandledExceptionsReportIntervalMillis();
 }

File: core/src/main/java/com/linecorp/armeria/server/UpdatableServerConfig.java
Patch:
@@ -289,8 +289,8 @@ public Function<String, String> absoluteUriTransformer() {
     }
 
     @Override
-    public Duration unhandledExceptionsReportInterval() {
-        return delegate.unhandledExceptionsReportInterval();
+    public long unhandledExceptionsReportIntervalMillis() {
+        return delegate.unhandledExceptionsReportIntervalMillis();
     }
 
     @Override

File: core/src/test/java/com/linecorp/armeria/server/ServiceTest.java
Patch:
@@ -65,7 +65,8 @@ private static void assertDecoration(FooService inner, HttpService outer) throws
                                   CommonPools.blockingTaskExecutor(),
                                   SuccessFunction.always(),
                                   Files.newTemporaryFolder().toPath(), ImmutableList.of(), HttpHeaders.of(),
-                                  (ctx) -> RequestId.of(1L));
+                                  ctx -> RequestId.of(1L),
+                                  ServerErrorHandler.ofDefault().asServiceErrorHandler());
         outer.serviceAdded(cfg);
         assertThat(inner.cfg).isSameAs(cfg);
     }

File: core/src/test/java/com/linecorp/armeria/server/VirtualHostAnnotatedServiceBindingBuilderTest.java
Patch:
@@ -107,7 +107,7 @@ void testAllConfigsAreSet() {
                 .multipartUploadsLocation(multipartUploadsLocation)
                 .requestIdGenerator(serviceRequestIdGenerator)
                 .build(new TestService())
-                .build(template, noopDependencyInjector);
+                .build(template, noopDependencyInjector, null);
 
         assertThat(virtualHost.serviceConfigs()).hasSize(2);
         final ServiceConfig pathBar = virtualHost.serviceConfigs().get(0);

File: core/src/main/java/com/linecorp/armeria/common/ContextAwareLogger.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.common;
 
-import static com.linecorp.armeria.common.RequestContextUtil.ensureSameCtx;
+import static com.linecorp.armeria.internal.common.RequestContextUtil.ensureSameCtx;
 import static java.util.Objects.requireNonNull;
 
 import org.slf4j.Logger;

File: core/src/main/java/com/linecorp/armeria/common/util/DefaultBlockingTaskExecutor.java
Patch:
@@ -23,15 +23,14 @@
 import java.util.concurrent.Future;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledFuture;
-import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 
 final class DefaultBlockingTaskExecutor implements BlockingTaskExecutor {
 
     private final ScheduledExecutorService delegate;
 
-    DefaultBlockingTaskExecutor(ScheduledThreadPoolExecutor delegate) {
+    DefaultBlockingTaskExecutor(ScheduledExecutorService delegate) {
         this.delegate = delegate;
     }
 

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContextWrapper.java
Patch:
@@ -25,7 +25,7 @@
 
 import javax.annotation.Nonnull;
 
-import com.linecorp.armeria.common.ContextAwareScheduledExecutorService;
+import com.linecorp.armeria.common.ContextAwareBlockingTaskExecutor;
 import com.linecorp.armeria.common.ExchangeType;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpHeadersBuilder;
@@ -100,7 +100,7 @@ public QueryParams queryParams() {
     }
 
     @Override
-    public ContextAwareScheduledExecutorService blockingTaskExecutor() {
+    public ContextAwareBlockingTaskExecutor blockingTaskExecutor() {
         return unwrap().blockingTaskExecutor();
     }
 

File: core/src/main/java/com/linecorp/armeria/server/UpdatableServerConfig.java
Patch:
@@ -24,14 +24,14 @@
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.Executor;
-import java.util.concurrent.ScheduledExecutorService;
 import java.util.function.Function;
 import java.util.function.Predicate;
 
 import com.linecorp.armeria.common.DependencyInjector;
 import com.linecorp.armeria.common.Http1HeaderNaming;
 import com.linecorp.armeria.common.RequestId;
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.common.util.BlockingTaskExecutor;
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.netty.channel.ChannelOption;
@@ -219,7 +219,7 @@ public Duration gracefulShutdownTimeout() {
     }
 
     @Override
-    public ScheduledExecutorService blockingTaskExecutor() {
+    public BlockingTaskExecutor blockingTaskExecutor() {
         return delegate.blockingTaskExecutor();
     }
 

File: core/src/test/java/com/linecorp/armeria/server/ServiceBindingBuilderTest.java
Patch:
@@ -30,7 +30,6 @@
 import java.nio.file.Path;
 import java.time.Duration;
 import java.util.List;
-import java.util.concurrent.ScheduledExecutorService;
 
 import org.assertj.core.util.Files;
 import org.junit.Test;
@@ -40,6 +39,7 @@
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
+import com.linecorp.armeria.common.util.BlockingTaskExecutor;
 import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.server.logging.AccessLogWriter;
 
@@ -50,7 +50,7 @@ public void serviceBindingBuilder() {
         final ServerBuilder sb = Server.builder();
         final AccessLogWriter accessLogWriter = mock(AccessLogWriter.class);
         when(accessLogWriter.shutdown()).thenReturn(UnmodifiableFuture.completedFuture(null));
-        final ScheduledExecutorService blockingTaskExecutor = mock(ScheduledExecutorService.class);
+        final BlockingTaskExecutor blockingTaskExecutor = mock(BlockingTaskExecutor.class);
         when(blockingTaskExecutor.isTerminated()).thenReturn(true);
         final Path multipartUploadsLocation = Files.newTemporaryFolder().toPath();
 

File: jetty9/src/main/java/com/linecorp/armeria/server/jetty/JettyServiceBuilder.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.util.List;
 import java.util.Map;
-import java.util.concurrent.ScheduledExecutorService;
 import java.util.function.Consumer;
 import java.util.function.Function;
 
@@ -38,6 +37,7 @@
 import com.google.common.collect.ImmutableMap;
 
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.common.util.BlockingTaskExecutor;
 
 /**
  * Builds a {@link JettyService}. Use {@link JettyService#of(Server)} if you have a configured Jetty
@@ -271,7 +271,7 @@ public JettyService build() {
         final List<LifeCycle.Listener> lifeCycleListeners = this.lifeCycleListeners.build();
         final List<Consumer<? super Server>> customizers = this.customizers.build();
 
-        final Function<ScheduledExecutorService, Server> serverFactory = blockingTaskExecutor -> {
+        final Function<BlockingTaskExecutor, Server> serverFactory = blockingTaskExecutor -> {
             final Server server = new Server(new ArmeriaThreadPool(blockingTaskExecutor));
 
             if (dumpAfterStart != null) {

File: core/src/main/java/com/linecorp/armeria/client/DecoratingClientFactory.java
Patch:
@@ -93,6 +93,7 @@ public MeterRegistry meterRegistry() {
     }
 
     @Override
+    @Deprecated
     public void setMeterRegistry(MeterRegistry meterRegistry) {
         unwrap().setMeterRegistry(meterRegistry);
     }

File: core/src/main/java/com/linecorp/armeria/client/DefaultClientFactory.java
Patch:
@@ -146,6 +146,7 @@ public MeterRegistry meterRegistry() {
     }
 
     @Override
+    @Deprecated
     public void setMeterRegistry(MeterRegistry meterRegistry) {
         httpClientFactory.setMeterRegistry(meterRegistry);
     }

File: core/src/main/java/com/linecorp/armeria/client/HttpClientFactory.java
Patch:
@@ -277,6 +277,7 @@ public MeterRegistry meterRegistry() {
     }
 
     @Override
+    @Deprecated
     public void setMeterRegistry(MeterRegistry meterRegistry) {
         this.meterRegistry = requireNonNull(meterRegistry, "meterRegistry");
     }

File: core/src/test/java/com/linecorp/armeria/server/HttpServerStreamingTest.java
Patch:
@@ -165,7 +165,7 @@ void testTooLargeContentToNonExistentService(WebClient client) throws Exception
         final byte[] content = new byte[maxContentLength + 1];
         final AggregatedHttpResponse res = client.post("/non-existent", content).aggregate().get();
         assertThat(res.status()).isSameAs(HttpStatus.NOT_FOUND);
-        assertThat(res.content().isEmpty()).isTrue();
+        assertThat(res.contentUtf8()).startsWith("Status: 404\n");
     }
 
     @ParameterizedTest

File: core/src/test/java/com/linecorp/armeria/server/HttpServerStreamingTest.java
Patch:
@@ -165,7 +165,7 @@ void testTooLargeContentToNonExistentService(WebClient client) throws Exception
         final byte[] content = new byte[maxContentLength + 1];
         final AggregatedHttpResponse res = client.post("/non-existent", content).aggregate().get();
         assertThat(res.status()).isSameAs(HttpStatus.NOT_FOUND);
-        assertThat(res.contentUtf8()).startsWith("Status: 404\n");
+        assertThat(res.content().isEmpty()).isTrue();
     }
 
     @ParameterizedTest

File: examples/spring-boot-minimal/src/main/java/example/springframework/boot/minimal/HelloAnnotatedService.java
Patch:
@@ -1,14 +1,14 @@
 package example.springframework.boot.minimal;
 
-import javax.validation.constraints.Size;
-
 import org.springframework.stereotype.Component;
 import org.springframework.validation.annotation.Validated;
 
 import com.linecorp.armeria.server.annotation.ExceptionHandler;
 import com.linecorp.armeria.server.annotation.Get;
 import com.linecorp.armeria.server.annotation.Param;
 
+import jakarta.validation.constraints.Size;
+
 /**
  * Note that this is not a Spring-based component but an annotated HTTP service that leverages
  * Armeria's built-in annotations.

File: examples/spring-boot-minimal/src/main/java/example/springframework/boot/minimal/ValidationExceptionHandler.java
Patch:
@@ -4,8 +4,6 @@
 
 import java.time.Instant;
 
-import javax.validation.ValidationException;
-
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;
 
@@ -15,6 +13,8 @@
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.annotation.ExceptionHandlerFunction;
 
+import jakarta.validation.ValidationException;
+
 /**
  * A sample exception handler which handles a {@link ValidationException}.
  */

File: examples/spring-boot-minimal/src/test/java/example/springframework/boot/minimal/HelloApplicationIntegrationTest.java
Patch:
@@ -3,8 +3,6 @@
 import static net.javacrumbs.jsonunit.fluent.JsonFluentAssert.assertThatJson;
 import static org.assertj.core.api.Assertions.assertThat;
 
-import javax.inject.Inject;
-
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.springframework.boot.test.context.SpringBootTest;
@@ -16,6 +14,8 @@
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.server.Server;
 
+import jakarta.inject.Inject;
+
 @ActiveProfiles("testbed")
 @SpringBootTest(webEnvironment = WebEnvironment.NONE)
 class HelloApplicationIntegrationTest {

File: examples/spring-boot-tomcat/src/test/java/example/springframework/boot/tomcat/HelloControllerTest.java
Patch:
@@ -3,14 +3,14 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
-import javax.inject.Inject;
-
 import org.junit.jupiter.api.Test;
 import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
 import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.web.servlet.MockMvc;
 import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
 
+import jakarta.inject.Inject;
+
 @ActiveProfiles("testbed")
 @WebMvcTest(HelloController.class)
 class HelloControllerTest {

File: examples/spring-boot-tomcat/src/test/java/example/springframework/boot/tomcat/HelloIntegrationTest.java
Patch:
@@ -2,8 +2,6 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import javax.inject.Inject;
-
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
@@ -16,6 +14,8 @@
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.server.Server;
 
+import jakarta.inject.Inject;
+
 @ActiveProfiles("testbed")
 @SpringBootTest(
         classes = {

File: examples/spring-boot-webflux/src/main/java/example/springframework/boot/webflux/HelloController.java
Patch:
@@ -1,13 +1,12 @@
 package example.springframework.boot.webflux;
 
-import javax.inject.Inject;
-
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.reactive.function.client.WebClient;
 import org.springframework.web.reactive.function.client.WebClient.Builder;
 
+import jakarta.inject.Inject;
 import reactor.core.publisher.Mono;
 
 /**

File: examples/spring-boot-webflux/src/test/java/example/springframework/boot/webflux/HelloControllerTest.java
Patch:
@@ -1,14 +1,14 @@
 package example.springframework.boot.webflux;
 
-import javax.inject.Inject;
-
 import org.junit.jupiter.api.Test;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
 import org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest;
 import org.springframework.test.web.reactive.server.WebTestClient;
 
 import com.linecorp.armeria.spring.web.reactive.ArmeriaClientAutoConfiguration;
 
+import jakarta.inject.Inject;
+
 @WebFluxTest(HelloController.class)
 @ImportAutoConfiguration(ArmeriaClientAutoConfiguration.class)
 class HelloControllerTest {

File: it/multipart/src/test/java/com/linecorp/armeria/common/multipart/SpringServerMultipartTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.jupiter.api.Test;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 
 import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.client.logging.ContentPreviewingClient;

File: it/spring/boot3-mixed-tomcat10/src/main/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplication.java
Patch:
@@ -16,8 +16,6 @@
 
 package com.linecorp.armeria.spring.mixed.tomcat;
 
-import javax.inject.Inject;
-
 import org.apache.catalina.startup.Tomcat;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
@@ -30,6 +28,8 @@
 import com.linecorp.armeria.server.tomcat.TomcatService;
 import com.linecorp.armeria.spring.ArmeriaServerConfigurator;
 
+import jakarta.inject.Inject;
+
 @SpringBootApplication
 public class SpringTomcatApplication {
 

File: it/spring/boot3-mixed-tomcat10/src/test/java/com/linecorp/armeria/spring/mixed/tomcat/SpringTomcatApplicationItTest.java
Patch:
@@ -19,8 +19,6 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
-import javax.inject.Inject;
-
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.BeansException;
@@ -32,6 +30,8 @@
 import com.linecorp.armeria.spring.ArmeriaAutoConfiguration;
 import com.linecorp.armeria.spring.web.reactive.ArmeriaReactiveWebServerFactory;
 
+import jakarta.inject.Inject;
+
 @RunWith(SpringRunner.class)
 @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
 public class SpringTomcatApplicationItTest {

File: it/spring/boot3-mixed/src/test/java/com/linecorp/armeria/spring/mixed/SpringApplicationItTest.java
Patch:
@@ -19,8 +19,6 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
-import javax.inject.Inject;
-
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.BeansException;
@@ -32,6 +30,8 @@
 import com.linecorp.armeria.spring.ArmeriaAutoConfiguration;
 import com.linecorp.armeria.spring.web.reactive.ArmeriaReactiveWebServerFactory;
 
+import jakarta.inject.Inject;
+
 @RunWith(SpringRunner.class)
 @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
 public class SpringApplicationItTest {

File: it/spring/boot3-tomcat10/src/test/java/com/linecorp/armeria/spring/tomcat/ActuatorAutoConfigurationHealthGroupTest.java
Patch:
@@ -22,11 +22,11 @@
 
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
-import org.springframework.boot.actuate.autoconfigure.web.server.LocalManagementPort;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.test.autoconfigure.actuate.metrics.AutoConfigureMetrics;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
+import org.springframework.boot.test.web.server.LocalManagementPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.ActiveProfiles;
 

File: it/spring/boot3-tomcat10/src/test/java/com/linecorp/armeria/spring/tomcat/ErrorHandlingTest.java
Patch:
@@ -19,8 +19,6 @@
 import static net.javacrumbs.jsonunit.fluent.JsonFluentAssert.assertThatJson;
 import static org.assertj.core.api.Assertions.assertThat;
 
-import javax.inject.Inject;
-
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.CsvSource;
 import org.springframework.boot.test.context.SpringBootTest;
@@ -31,6 +29,8 @@
 
 import com.linecorp.armeria.spring.LocalArmeriaPort;
 
+import jakarta.inject.Inject;
+
 @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
 class ErrorHandlingTest {
 

File: it/spring/webflux-security/src/test/java/com/linecorp/armeria/spring/security/SecureConfiguration.java
Patch:
@@ -17,6 +17,7 @@
 package com.linecorp.armeria.spring.security;
 
 import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
 import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;
 import org.springframework.security.config.web.server.ServerHttpSecurity;
 import org.springframework.security.core.userdetails.MapReactiveUserDetailsService;
@@ -25,6 +26,7 @@
 import org.springframework.security.core.userdetails.UserDetails;
 import org.springframework.security.web.server.SecurityWebFilterChain;
 
+@Configuration
 @EnableWebFluxSecurity
 public class SecureConfiguration {
 

File: it/spring/webflux-security/src/test/java/com/linecorp/armeria/spring/security/SecureResourceTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.jupiter.api.Test;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 
 import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.client.cookie.CookieClient;

File: reactor3/src/test/java/com/linecorp/armeria/common/reactor3/ContextAwareFluxTest.java
Patch:
@@ -390,12 +390,12 @@ void subscriberContextIsNotMissing() {
         final ClientRequestContext ctx = newContext();
         final Flux<String> flux;
         try (SafeCloseable ignored = ctx.push()) {
-            flux = Flux.deferWithContext(reactorCtx -> {
+            flux = Flux.deferContextual(reactorCtx -> {
                 assertThat((String) reactorCtx.get("foo")).isEqualTo("bar");
                 return Flux.just("baz");
             });
         }
-        final Flux<String> flux1 = flux.subscriberContext(reactorCtx -> reactorCtx.put("foo", "bar"));
+        final Flux<String> flux1 = flux.contextWrite(reactorCtx -> reactorCtx.put("foo", "bar"));
         StepVerifier.create(flux1)
                     .expectSubscriptionMatches(s -> ctxExists(ctx))
                     .expectNextMatches(s -> ctxExists(ctx) && "baz".equals(s))

File: reactor3/src/test/java/com/linecorp/armeria/common/reactor3/ContextAwareMonoTest.java
Patch:
@@ -236,12 +236,12 @@ void subscriberContextIsNotMissing() {
         final ClientRequestContext ctx = newContext();
         final Mono<String> mono;
         try (SafeCloseable ignored = ctx.push()) {
-            mono = Mono.subscriberContext().handle((reactorCtx, sink) -> {
+            mono = Mono.deferContextual(Mono::just).handle((reactorCtx, sink) -> {
                 assertThat((String) reactorCtx.get("foo")).isEqualTo("bar");
                 sink.next("baz");
             });
         }
-        final Mono<String> mono1 = mono.subscriberContext(reactorCtx -> reactorCtx.put("foo", "bar"));
+        final Mono<String> mono1 = mono.contextWrite(reactorCtx -> reactorCtx.put("foo", "bar"));
         StepVerifier.create(mono1)
                     .expectSubscriptionMatches(s -> ctxExists(ctx))
                     .expectNextMatches(s -> ctxExists(ctx) && "baz".equals(s))

File: spring/boot3-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfiguration.java
Patch:
@@ -65,7 +65,6 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.core.env.ConfigurableEnvironment;
 import org.springframework.core.env.PropertySource;
-import org.springframework.util.SocketUtils;
 import org.springframework.util.StringUtils;
 
 import com.google.common.annotations.VisibleForTesting;
@@ -80,6 +79,7 @@
 import com.linecorp.armeria.common.MediaTypeNames;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.internal.common.util.PortUtil;
 import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.Route;
 import com.linecorp.armeria.server.ServerBuilder;
@@ -256,7 +256,7 @@ private static Integer obtainManagementServerPort(ServerBuilder serverBuilder,
                 return null;
             }
             if (port == 0) {
-                port = SocketUtils.findAvailableTcpPort();
+                port = PortUtil.unusedTcpPort();
             }
             // The management port was not configured by ArmeriaAutoConfiguration
             final Port managementPort = new Port().setPort(port).setProtocol(SessionProtocol.HTTP);

File: spring/boot3-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationInternalServiceTest.java
Patch:
@@ -24,12 +24,12 @@
 import org.junit.jupiter.api.Timeout;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.boot.actuate.autoconfigure.web.server.LocalManagementPort;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.autoconfigure.actuate.metrics.AutoConfigureMetrics;
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.test.web.server.LocalManagementPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.ActiveProfiles;
 

File: spring/boot3-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationSecureTest.java
Patch:
@@ -24,12 +24,12 @@
 import org.junit.jupiter.api.Timeout;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.boot.actuate.autoconfigure.web.server.LocalManagementPort;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.autoconfigure.actuate.metrics.AutoConfigureMetrics;
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.test.web.server.LocalManagementPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.ActiveProfiles;
 

File: spring/boot3-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/PrometheusMetricExposureTest.java
Patch:
@@ -23,12 +23,12 @@
 
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
-import org.springframework.boot.actuate.autoconfigure.web.server.LocalManagementPort;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.autoconfigure.actuate.metrics.AutoConfigureMetrics;
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.test.web.server.LocalManagementPort;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.ActiveProfiles;
 

File: spring/boot3-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/ArmeriaConfigurationNetUtil.java
Patch:
@@ -26,12 +26,11 @@
 import java.util.Enumeration;
 import java.util.List;
 
-import org.springframework.util.SocketUtils;
-
 import com.google.common.collect.ImmutableList;
 
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.internal.common.util.PortUtil;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.ServerPort;
 import com.linecorp.armeria.spring.ArmeriaSettings.Port;
@@ -117,7 +116,7 @@ public static Port maybeNewPort(@Nullable Integer port, SessionProtocol protocol
             return null;
         }
         if (port == 0) {
-            port = SocketUtils.findAvailableTcpPort();
+            port = PortUtil.unusedTcpPort();
         }
         return new Port().setPort(port).setProtocol(protocol);
     }

File: spring/boot3-autoconfigure/src/main/java/com/linecorp/armeria/spring/InternalServices.java
Patch:
@@ -22,14 +22,14 @@
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.util.SocketUtils;
 
 import com.google.common.base.MoreObjects;
 import com.google.common.base.Strings;
 
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
+import com.linecorp.armeria.internal.common.util.PortUtil;
 import com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil;
 import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.docs.DocService;
@@ -122,7 +122,7 @@ public static InternalServices of(
 
         final Port internalPort = settings.getInternalServices();
         if (internalPort != null && internalPort.getPort() == 0) {
-            internalPort.setPort(SocketUtils.findAvailableTcpPort());
+            internalPort.setPort(PortUtil.unusedTcpPort());
         }
         return new InternalServices(docService, expositionService,
                                     healthCheckService, internalPort,

File: spring/boot3-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationInternalServiceTest.java
Patch:
@@ -36,8 +36,7 @@
 import com.linecorp.armeria.spring.ArmeriaSettings.Port;
 
 @RunWith(SpringRunner.class)
-@SpringBootTest(classes = TestConfiguration.class,
-        properties = "management.metrics.export.defaults.enabled=true")
+@SpringBootTest(classes = TestConfiguration.class)
 @ActiveProfiles({ "local", "internalServiceTest" })
 @DirtiesContext
 public class ArmeriaAutoConfigurationInternalServiceTest {

File: spring/boot3-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationTest.java
Patch:
@@ -87,8 +87,7 @@
  * application-autoConfTest.yml will be loaded with minimal settings to make it work.
  */
 @RunWith(SpringRunner.class)
-@SpringBootTest(classes = TestConfiguration.class, properties =
-        "management.metrics.export.defaults.enabled=true") // @AutoConfigureMetrics is not allowed for boot1.
+@SpringBootTest(classes = TestConfiguration.class)
 @ActiveProfiles({ "local", "autoConfTest" })
 @DirtiesContext
 public class ArmeriaAutoConfigurationTest {

File: spring/boot3-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationWithoutMeterTest.java
Patch:
@@ -45,8 +45,7 @@
  * application-autoConfTest.yml will be loaded with minimal settings to make it work.
  */
 @RunWith(SpringRunner.class)
-@SpringBootTest(classes = NoMeterTestConfiguration.class, properties =
-        "management.metrics.export.defaults.enabled=true") // @AutoConfigureMetrics is not allowed for boot1.
+@SpringBootTest(classes = NoMeterTestConfiguration.class)
 @ActiveProfiles({ "local", "autoConfTest" })
 public class ArmeriaAutoConfigurationWithoutMeterTest {
 

File: spring/boot3-autoconfigure/src/test/java/com/linecorp/armeria/spring/SpringDependencyInjectorBeanTest.java
Patch:
@@ -46,8 +46,7 @@
 import com.linecorp.armeria.spring.SpringDependencyInjectorBeanTest.TestConfiguration;
 
 @RunWith(SpringRunner.class)
-@SpringBootTest(classes = TestConfiguration.class, properties =
-        "management.metrics.export.defaults.enabled=true") // @AutoConfigureMetrics is not allowed for boot1.
+@SpringBootTest(classes = TestConfiguration.class)
 @ActiveProfiles({ "local", "settings" })
 @DirtiesContext
 public class SpringDependencyInjectorBeanTest {

File: spring/boot3-autoconfigure/src/test/java/com/linecorp/armeria/spring/SpringDependencyInjectorPropertyTest.java
Patch:
@@ -44,8 +44,7 @@
 import com.linecorp.armeria.spring.SpringDependencyInjectorPropertyTest.TestConfiguration;
 
 @RunWith(SpringRunner.class)
-@SpringBootTest(classes = TestConfiguration.class, properties =
-        "management.metrics.export.defaults.enabled=true") // @AutoConfigureMetrics is not allowed for boot1.
+@SpringBootTest(classes = TestConfiguration.class)
 @ActiveProfiles({ "local", "autoConfTest" })
 @DirtiesContext
 public class SpringDependencyInjectorPropertyTest {

File: spring/boot3-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/AbstractReactiveWebServerCustomKeyAliasTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.junit.jupiter.api.Test;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 
 import com.linecorp.armeria.client.ClientFactory;
 import com.linecorp.armeria.client.WebClient;

File: spring/boot3-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaAutoConfigurationWithConsumerTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 

File: spring/boot3-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaClientAutoConfigurationTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 import org.springframework.web.bind.annotation.GetMapping;

File: spring/boot3-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactoryTest.java
Patch:
@@ -45,7 +45,6 @@
 import org.springframework.http.server.reactive.ServerHttpRequest;
 import org.springframework.http.server.reactive.ServerHttpResponse;
 import org.springframework.mock.env.MockEnvironment;
-import org.springframework.util.SocketUtils;
 import org.springframework.util.unit.DataSize;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RestController;
@@ -64,6 +63,7 @@
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.metric.PrometheusMeterRegistries;
+import com.linecorp.armeria.internal.common.util.PortUtil;
 import com.linecorp.armeria.internal.testing.MockAddressResolverGroup;
 import com.linecorp.armeria.server.HttpStatusException;
 import com.linecorp.armeria.server.annotation.Get;
@@ -86,7 +86,7 @@ class ArmeriaReactiveWebServerFactoryTest {
     private static ClientFactory clientFactory;
 
     private static ArmeriaReactiveWebServerFactory factory(ConfigurableListableBeanFactory beanFactory) {
-        return new ArmeriaReactiveWebServerFactory(beanFactory, new MockEnvironment());
+        return new RetryableArmeriaReactiveWebServerFactory(beanFactory, new MockEnvironment());
     }
 
     private ArmeriaReactiveWebServerFactory factory() {
@@ -133,7 +133,7 @@ void shouldRunOnSpecifiedPort() {
         // So this test case is tried up to 3 times to avoid flakiness.
         for (int i = 0; i < 3; i++) {
             final ArmeriaReactiveWebServerFactory factory = factory(new DefaultListableBeanFactory());
-            final int port = SocketUtils.findAvailableTcpPort();
+            final int port = PortUtil.unusedTcpPort();
             factory.setPort(port);
             try {
                 runEchoServer(factory, server -> assertThat(server.getPort()).isEqualTo(port));

File: spring/boot3-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaSpringActuatorReactiveIndicatorTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.stereotype.Component;
 import org.springframework.test.context.ActiveProfiles;

File: spring/boot3-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaWebClientTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.core.io.ClassPathResource;
 import org.springframework.core.io.buffer.DataBuffer;
@@ -151,11 +151,12 @@ public void getConflict() {
 
     @Test
     public void getConflictUsingBodyToMono() {
+        @SuppressWarnings("Convert2MethodRef")
         final Mono<String> response =
                 webClient.get()
                          .uri(uri("/conflict"))
                          .retrieve()
-                         .onStatus(HttpStatus::isError,
+                         .onStatus(status -> status.isError(),
                                    resp -> resp.bodyToMono(String.class).map(Exception::new))
                          .bodyToMono(String.class);
         StepVerifier.create(response)

File: spring/boot3-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ByteBufLeakTest.java
Patch:
@@ -36,7 +36,7 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.core.io.buffer.DataBufferFactory;

File: spring/boot3-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ErrorWebExceptionHandlerTest.java
Patch:
@@ -26,8 +26,8 @@
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.boot.web.reactive.error.ErrorAttributes;
-import org.springframework.boot.web.server.LocalServerPort;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.http.HttpStatus;
@@ -85,7 +85,7 @@ Flux<byte[]> proxy(@RequestParam String port) {
                 return webClient.get()
                                 .uri("http://127.0.0.1:" + port + "/hello")
                                 .retrieve()
-                                .onStatus(HttpStatus::isError, res -> {
+                                .onStatus(status -> status.isError(), res -> {
                                     return Mono.error(new AnticipatedException());
                                 })
                                 .bodyToFlux(byte[].class);

File: spring/boot3-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/LocalArmeriaPortTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 
 import com.linecorp.armeria.spring.LocalArmeriaPort;
 

File: spring/boot3-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ReactiveWebServerAutoConfigurationTest.java
Patch:
@@ -32,7 +32,7 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.http.MediaType;

File: spring/boot3-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ReactiveWebServerCompressionLeakTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.core.io.buffer.DataBuffer;

File: spring/boot3-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ReactiveWebServerLoadBalancerInteropTest.java
Patch:
@@ -32,7 +32,7 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.test.context.ActiveProfiles;

File: tomcat10/src/main/java/com/linecorp/armeria/internal/server/tomcat/Tomcat90ProtocolHandler.java
Patch:
@@ -123,7 +123,6 @@ public long awaitConnectionsClose(long waitMillis) {
         return 0;
     }
 
-    @Override
     public boolean isAprRequired() {
         return false;
     }

File: tomcat9/src/main/java/com/linecorp/armeria/server/tomcat/ArmeriaProcessor.java
Patch:
@@ -19,7 +19,6 @@
 import java.io.IOException;
 
 import org.apache.coyote.AbstractProcessor;
-import org.apache.coyote.ActionHook;
 import org.apache.coyote.Adapter;
 import org.apache.coyote.ContinueResponseTiming;
 import org.apache.juli.logging.Log;
@@ -28,7 +27,7 @@
 import org.apache.tomcat.util.net.SocketWrapperBase;
 
 /**
- * Provides a fake Processor to provide {@link ActionHook} to request/response.
+ * Provides a fake Processor to provide {@code ActionHook} to request/response.
  */
 final class ArmeriaProcessor extends AbstractProcessor {
 

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java
Patch:
@@ -324,8 +324,7 @@ private void doExecute0(ClientRequestContext ctx, HttpRequestDuplicator rootReqD
             response = executeWithFallback(unwrap(), derivedCtx,
                                            (context, cause) -> HttpResponse.ofFailure(cause));
         }
-
-        final RetryConfig<HttpResponse> config = mapping().get(ctx, duplicateReq);
+        final RetryConfig<HttpResponse> config = mappedRetryConfig(ctx);
         if (!ctx.exchangeType().isResponseStreaming() || config.requiresResponseTrailers()) {
             // XXX(ikhoon): Should we use `response.aggregateWithPooledObjects()`?
             response.aggregate().handle((aggregated, cause) -> {

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java
Patch:
@@ -186,7 +186,7 @@ private void doExecute0(ClientRequestContext ctx, RpcRequest req,
                                       (context, cause) -> RpcResponse.ofFailure(cause));
         }
 
-        final RetryConfig<RpcResponse> retryConfig = mapping().get(ctx, req);
+        final RetryConfig<RpcResponse> retryConfig = mappedRetryConfig(ctx);
         final RetryRuleWithContent<RpcResponse> retryRule =
                 retryConfig.needsContentInRule() ?
                 retryConfig.retryRuleWithContent() : retryConfig.fromRetryRule();

File: brave/src/main/java/com/linecorp/armeria/client/brave/ClientRequestContextAdapter.java
Patch:
@@ -63,10 +63,8 @@ public String path() {
         }
 
         @Override
-        @Nullable
         public String url() {
-            final HttpRequest req = ctx.request();
-            return req != null ? req.uri().toString() : null;
+            return ctx.uri().toString();
         }
 
         @Override

File: core/src/main/java/com/linecorp/armeria/client/cookie/CookieClient.java
Patch:
@@ -72,7 +72,7 @@ private CookieClient(HttpClient delegate, CookieJar cookieJar) {
 
     @Override
     public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {
-        final URI uri = req.uri();
+        final URI uri = ctx.uri();
         final Cookies cookies = cookieJar.get(uri);
         if (!cookies.isEmpty()) {
             final String cookieHeader = Cookie.toCookieHeader(cookies);

File: core/src/main/java/com/linecorp/armeria/common/DefaultRequestHeadersBuilder.java
Patch:
@@ -66,7 +66,7 @@ public RequestHeaders build() {
     @Override
     public URI uri() {
         final HttpHeadersBase getters = getters();
-        checkState(getters != null, "must set ':scheme', ':authority' and ':path' headers");
+        checkState(getters != null, "must set ':scheme' and ':path' headers");
         return getters.uri();
     }
 

File: core/src/test/java/com/linecorp/armeria/client/DefaultWebClientTest.java
Patch:
@@ -82,7 +82,7 @@ void endpointRemapper() {
             await().untilAsserted(() -> {
                 assertThat(cctx.endpointGroup()).isSameAs(group);
                 assertThat(cctx.endpoint()).isEqualTo(Endpoint.of("127.0.0.1", 1));
-                assertThat(cctx.request().authority()).isEqualTo("127.0.0.1:1");
+                assertThat(cctx.authority()).isEqualTo("127.0.0.1:1");
             });
         }
     }
@@ -107,7 +107,7 @@ void endpointRemapperForUnspecifiedUri() {
             await().untilAsserted(() -> {
                 assertThat(cctx.endpointGroup()).isSameAs(group);
                 assertThat(cctx.endpoint()).isEqualTo(Endpoint.of("127.0.0.1", 1));
-                assertThat(cctx.request().authority()).isEqualTo("127.0.0.1:1");
+                assertThat(cctx.authority()).isEqualTo("127.0.0.1:1");
             });
         }
     }

File: thrift/thrift0.13/src/test/java/com/linecorp/armeria/client/thrift/ThriftClientAdditionalAuthorityTest.java
Patch:
@@ -52,6 +52,7 @@ void shouldDeriveAuthorityFromEndpoint() throws Exception {
             assertThat(client.hello("")).isEqualTo(expectedAuthority);
             assertThat(captor.get().log().whenComplete().join().requestHeaders().authority())
                     .isEqualTo(expectedAuthority);
+            assertThat(captor.get().authority()).isEqualTo(expectedAuthority);
         }
     }
 
@@ -67,6 +68,7 @@ void shouldRespectAuthorityInDefaultHeaders(String protocol, String headerName)
             assertThat(client.hello("")).isEqualTo("foo.com");
             assertThat(captor.get().log().whenComplete().join().requestHeaders().authority())
                     .isEqualTo("foo.com");
+            assertThat(captor.get().authority()).isEqualTo("foo.com");
         }
     }
 
@@ -83,6 +85,7 @@ void shouldRespectAuthorityInAdditionalHeaders(String protocol, String headerNam
             assertThat(client.hello("")).isEqualTo("bar.com");
             assertThat(captor.get().log().whenComplete().join().requestHeaders().authority())
                     .isEqualTo("bar.com");
+            assertThat(captor.get().authority()).isEqualTo("bar.com");
         }
     }
 }

File: core/src/main/java/com/linecorp/armeria/internal/common/HttpMessageAggregator.java
Patch:
@@ -218,9 +218,7 @@ private static HttpData aggregateData(List<HttpObject> objects, int contentLengt
             for (int i = start; i < end; i++) {
                 try (HttpData data = (HttpData) objects.get(i)) {
                     final ByteBuf buf = data.byteBuf();
-                    if (data.isEmpty()) {
-                        data.close();
-                    } else {
+                    if (!data.isEmpty()) {
                         merged.writeBytes(buf, buf.readerIndex(), data.length());
                     }
                 }

File: core/src/main/java/com/linecorp/armeria/server/AggregatedHttpResponseHandler.java
Patch:
@@ -33,7 +33,6 @@
 import com.linecorp.armeria.internal.common.Http1ObjectEncoder;
 import com.linecorp.armeria.internal.common.RequestContextUtil;
 import com.linecorp.armeria.internal.server.DefaultServiceRequestContext;
-import com.linecorp.armeria.unsafe.PooledObjects;
 
 import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelFutureListener;
@@ -74,7 +73,7 @@ private void apply0(@Nullable AggregatedHttpResponse response, @Nullable Throwab
 
         assert response != null;
         if (failIfStreamOrSessionClosed()) {
-            PooledObjects.close(response.content());
+            response.content().close();
             return;
         }
 

File: core/src/test/java/com/linecorp/armeria/server/HeadMethodLeakTest.java
Patch:
@@ -48,6 +48,7 @@
 import com.linecorp.armeria.testing.junit5.server.ServerExtension;
 
 import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
 
 class HeadMethodLeakTest {
 
@@ -74,7 +75,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
                     final HttpObject[] objs = new HttpObject[number + 1];
                     objs[0] = ResponseHeaders.of(HttpStatus.OK);
                     for (int i = 0; i < number; i++) {
-                        final ByteBuf buf = ctx.alloc().buffer().writeBytes(new byte[] { 1, 2, 3, 4 });
+                        final ByteBuf buf = Unpooled.buffer().writeBytes(new byte[] { 1, 2, 3, 4 });
                         bufs.add(buf);
                         objs[i + 1] = HttpData.wrap(buf);
                     }
@@ -129,7 +130,7 @@ private static class HeadRequestOptionsProvider implements ArgumentsProvider {
         @Override
         public Stream<? extends Arguments> provideArguments(ExtensionContext context) throws Exception {
             final Stream.Builder<Arguments> builder = Stream.builder();
-            for (int i = 0; i < 10; i++) {
+            for (int i = 0; i < 20; i++) {
                 for (SessionProtocol protocol : SessionProtocol.values()) {
                     if (protocol == SessionProtocol.PROXY) {
                         continue;

File: thrift/thrift0.13/src/main/java/com/linecorp/armeria/internal/server/thrift/ThriftDescriptiveTypeInfoProvider.java
Patch:
@@ -136,7 +136,6 @@ static ExceptionInfo newExceptionInfo(Class<? extends TException> exceptionClass
         return new ExceptionInfo(name, fields);
     }
 
-    @VisibleForTesting
     static FieldInfo newFieldInfo(Class<?> parentType, FieldMetaData fieldMetaData) {
         requireNonNull(fieldMetaData, "fieldMetaData");
         final FieldValueMetaData fieldValueMetaData = fieldMetaData.valueMetaData;
@@ -318,8 +317,7 @@ private static boolean hasTypeDef(FieldValueMetaData valueMetadata) {
     static <T extends TBase<T, F>, F extends TFieldIdEnum> StructInfo newStructInfo(Class<?> structClass) {
         final String name = structClass.getName();
 
-        //noinspection unchecked
-        final Map<?, FieldMetaData> metaDataMap = FieldMetaData.getStructMetaDataMap((Class<T>) structClass);
+        final Map<?, FieldMetaData> metaDataMap = ThriftMetadataAccess.getStructMetaDataMap(structClass);
         final List<FieldInfo> fields =
                 metaDataMap.values().stream()
                            .map(fieldMetaData -> newFieldInfo(structClass, fieldMetaData))

File: core/src/main/java/com/linecorp/armeria/server/ServerErrorHandler.java
Patch:
@@ -228,7 +228,7 @@ public AggregatedHttpResponse renderStatus(ServiceConfig config,
                                                        @Nullable String description,
                                                        @Nullable Throwable cause) {
                 final AggregatedHttpResponse response =
-                        ServerErrorHandler.super.renderStatus(config, headers, status, description, cause);
+                        ServerErrorHandler.this.renderStatus(config, headers, status, description, cause);
                 if (response != null) {
                     return response;
                 }

File: core/src/main/java/com/linecorp/armeria/server/logging/LoggingService.java
Patch:
@@ -145,6 +145,7 @@ public static LoggingServiceBuilder builder() {
 
     @Override
     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
+        ctx.setShouldReportUnhandledExceptions(false);
         ctx.log().whenComplete().thenAccept(requestLog -> {
             if (sampler.isSampled(requestLog)) {
                 log(logger, ctx, requestLog, requestLogger, responseLogger);

File: core/src/main/java/com/linecorp/armeria/server/ServerConfig.java
Patch:
@@ -275,8 +275,11 @@ default boolean shutdownBlockingTaskExecutorOnStop() {
 
     /**
      * Returns the {@link Function} that generates a {@link RequestId} for each {@link Request}.
+     *
+     * @deprecated Use {@link ServiceConfig#requestIdGenerator()} or {@link VirtualHost#requestIdGenerator()}.
      */
     @UnstableApi
+    @Deprecated
     Function<RoutingContext, RequestId> requestIdGenerator();
 
     /**

File: core/src/test/java/com/linecorp/armeria/server/ServiceTest.java
Patch:
@@ -28,6 +28,7 @@
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
+import com.linecorp.armeria.common.RequestId;
 import com.linecorp.armeria.common.SuccessFunction;
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.server.logging.AccessLogWriter;
@@ -63,7 +64,8 @@ private static void assertDecoration(FooService inner, HttpService outer) throws
                                   AccessLogWriter.disabled(),
                                   CommonPools.blockingTaskExecutor(),
                                   SuccessFunction.always(),
-                                  Files.newTemporaryFolder().toPath(), ImmutableList.of(), HttpHeaders.of());
+                                  Files.newTemporaryFolder().toPath(), ImmutableList.of(), HttpHeaders.of(),
+                                  (ctx) -> RequestId.of(1L));
         outer.serviceAdded(cfg);
         assertThat(inner.cfg).isSameAs(cfg);
     }

File: core/src/main/java/com/linecorp/armeria/client/AbstractHttpRequestHandler.java
Patch:
@@ -229,6 +229,7 @@ final void writeHeaders(RequestHeaders headers) {
      * {@link Channel#flush()} when each write unit is done.
      */
     final void writeData(HttpData data) {
+        data.touch(ctx);
         logBuilder.increaseRequestLength(data);
         write(data, data.isEndOfStream());
     }

File: core/src/main/java/com/linecorp/armeria/server/AbstractHttpResponseHandler.java
Patch:
@@ -147,6 +147,7 @@ final ChannelFuture writeAggregatedHttpResponse(AggregatedHttpResponse res) {
         }
 
         final HttpData content = res.content();
+        content.touch(reqCtx);
         // An aggregated response always has empty content if its status.isContentAlwaysEmpty() is true.
         assert !res.status().isContentAlwaysEmpty() || content.isEmpty();
         final boolean contentEmpty;

File: core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java
Patch:
@@ -115,6 +115,7 @@ public void onNext(HttpObject o) {
 
         if (failIfStreamOrSessionClosed()) {
             PooledObjects.close(o);
+            setDone(true);
             return;
         }
 
@@ -157,7 +158,7 @@ public void onNext(HttpObject o) {
                         state = State.NEEDS_DATA_OR_TRAILERS;
                     }
                     if (endOfStream) {
-                        setDone(false);
+                        setDone(true);
                     }
                     final ServerConfig config = reqCtx.config().server().config();
                     merged = mergeResponseHeaders(headers, reqCtx.additionalResponseHeaders(),
@@ -209,6 +210,7 @@ public void onNext(HttpObject o) {
                                    .addListener(writeHeadersFutureListener(true));
                 } else {
                     final HttpData data = (HttpData) o;
+                    data.touch(reqCtx);
                     final boolean wroteEmptyData = data.isEmpty();
                     logBuilder().increaseResponseLength(data);
                     if (endOfStream) {

File: benchmarks/jmh/src/jmh/java/com/linecorp/armeria/server/RoutersBenchmark.java
Patch:
@@ -75,7 +75,8 @@ public class RoutersBenchmark {
         HOST = new VirtualHost(
                 "localhost", "localhost", 0, null, SERVICES, FALLBACK_SERVICE, RejectedRouteHandler.DISABLED,
                 unused -> NOPLogger.NOP_LOGGER, defaultServiceNaming, 0, 0, false,
-                AccessLogWriter.disabled(), CommonPools.blockingTaskExecutor(), ImmutableList.of());
+                AccessLogWriter.disabled(), CommonPools.blockingTaskExecutor(), multipartUploadsLocation,
+                ImmutableList.of());
         ROUTER = Routers.ofVirtualHost(HOST, SERVICES, RejectedRouteHandler.DISABLED);
     }
 

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsAddressEndpointGroupBuilder.java
Patch:
@@ -71,14 +71,15 @@ DnsAddressEndpointGroupBuilder resolvedAddressTypes(ResolvedAddressTypes resolve
      * Returns a newly created {@link DnsAddressEndpointGroup}.
      */
     public DnsAddressEndpointGroup build() {
+        final EventLoop eventLoop = getOrAcquireEventLoop();
         final DefaultDnsResolver resolver = buildResolver(builder -> {
             if (resolvedAddressTypes != null) {
                 builder.resolvedAddressTypes(resolvedAddressTypes);
             }
-        });
+        }, eventLoop);
         return new DnsAddressEndpointGroup(selectionStrategy(), shouldAllowEmptyEndpoints(),
                                            selectionTimeoutMillis(), resolver,
-                                           eventLoop(), backoff(), minTtl(), maxTtl(),
+                                           eventLoop, backoff(), minTtl(), maxTtl(),
                                            resolvedAddressTypes, hostname(), port, dnsQueryListeners());
     }
 

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsServiceEndpointGroupBuilder.java
Patch:
@@ -43,9 +43,10 @@ public final class DnsServiceEndpointGroupBuilder extends DnsEndpointGroupBuilde
      * Returns a newly created {@link DnsServiceEndpointGroup}.
      */
     public DnsServiceEndpointGroup build() {
+        final EventLoop eventLoop = getOrAcquireEventLoop();
         return new DnsServiceEndpointGroup(selectionStrategy(), shouldAllowEmptyEndpoints(),
-                                           selectionTimeoutMillis(), buildResolver(),
-                                           eventLoop(), backoff(), minTtl(), maxTtl(),
+                                           selectionTimeoutMillis(), buildResolver(eventLoop),
+                                           eventLoop, backoff(), minTtl(), maxTtl(),
                                            hostname(), dnsQueryListeners());
     }
 

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsTextEndpointGroupBuilder.java
Patch:
@@ -50,9 +50,10 @@ public final class DnsTextEndpointGroupBuilder extends DnsEndpointGroupBuilder {
      * Returns a newly created {@link DnsTextEndpointGroup}.
      */
     public DnsTextEndpointGroup build() {
+        final EventLoop eventLoop = getOrAcquireEventLoop();
         return new DnsTextEndpointGroup(selectionStrategy(), shouldAllowEmptyEndpoints(),
-                                        selectionTimeoutMillis(), buildResolver(),
-                                        eventLoop(), backoff(), minTtl(), maxTtl(),
+                                        selectionTimeoutMillis(), buildResolver(eventLoop),
+                                        eventLoop, backoff(), minTtl(), maxTtl(),
                                         hostname(), mapping, dnsQueryListeners());
     }
 

File: core/src/main/java/com/linecorp/armeria/internal/client/dns/DefaultDnsResolver.java
Patch:
@@ -85,6 +85,7 @@ public CompletableFuture<List<DnsRecord>> resolve(List<? extends DnsQuestion> qu
     }
 
     private CompletableFuture<List<DnsRecord>> resolveOne(DnsQuestionContext ctx, DnsQuestion question) {
+        assert executor.inEventLoop();
         final CompletableFuture<List<DnsRecord>> future = delegate.resolve(ctx, question);
         ctx.whenCancelled().handle((unused0, unused1) -> {
             if (!future.isDone()) {
@@ -104,6 +105,7 @@ private CompletableFuture<List<DnsRecord>> resolveOne(DnsQuestionContext ctx, Dn
     @VisibleForTesting
     CompletableFuture<List<DnsRecord>> resolveAll(DnsQuestionContext ctx, List<? extends DnsQuestion> questions,
                                                   String logPrefix) {
+        assert executor.inEventLoop();
         final CompletableFuture<List<DnsRecord>> future = new CompletableFuture<>();
         final Object[] results = new Object[questions.size()];
         for (int i = 0; i < questions.size(); i++) {

File: core/src/test/java/com/linecorp/armeria/client/endpoint/dns/DnsEndpointGroupBuilderTest.java
Patch:
@@ -48,9 +48,9 @@ void hostname() {
 
     @Test
     void eventLoop() {
-        assertThat(builder().eventLoop()).isNotNull();
+        assertThat(builder().getOrAcquireEventLoop()).isNotNull();
         final EventLoop loop = new NioEventLoopGroup().next();
-        assertThat(builder().eventLoop(loop).eventLoop()).isSameAs(loop);
+        assertThat(builder().eventLoop(loop).getOrAcquireEventLoop()).isSameAs(loop);
         assertThatThrownBy(() -> builder().eventLoop(new DefaultEventLoop()))
                 .isInstanceOf(IllegalArgumentException.class).hasMessageContaining("unsupported");
     }

File: core/src/main/java/com/linecorp/armeria/client/AbstractHttpRequestHandler.java
Patch:
@@ -40,6 +40,8 @@
 import com.linecorp.armeria.common.stream.ClosedStreamException;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.common.util.SafeCloseable;
+import com.linecorp.armeria.internal.client.DecodedHttpResponse;
+import com.linecorp.armeria.internal.client.HttpSession;
 import com.linecorp.armeria.internal.common.RequestContextUtil;
 import com.linecorp.armeria.unsafe.PooledObjects;
 

File: core/src/main/java/com/linecorp/armeria/client/AggregatedHttpRequestHandler.java
Patch:
@@ -23,6 +23,7 @@
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.internal.client.DecodedHttpResponse;
 
 import io.netty.channel.Channel;
 import io.netty.channel.EventLoop;

File: core/src/main/java/com/linecorp/armeria/client/Http1ClientKeepAliveHandler.java
Patch:
@@ -22,6 +22,7 @@
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.internal.client.HttpSession;
 import com.linecorp.armeria.internal.client.UserAgentUtil;
 import com.linecorp.armeria.internal.common.Http1KeepAliveHandler;
 

File: core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java
Patch:
@@ -26,6 +26,7 @@
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.ProtocolViolationException;
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.internal.client.DecodedHttpResponse;
 import com.linecorp.armeria.internal.common.ArmeriaHttpUtil;
 import com.linecorp.armeria.internal.common.InboundTrafficController;
 import com.linecorp.armeria.internal.common.KeepAliveHandler;

File: core/src/main/java/com/linecorp/armeria/client/Http2ClientKeepAliveHandler.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.linecorp.armeria.client;
 
+import com.linecorp.armeria.internal.client.HttpSession;
 import com.linecorp.armeria.internal.common.Http2KeepAliveHandler;
 
 import io.micrometer.core.instrument.Timer;

File: core/src/main/java/com/linecorp/armeria/client/Http2ResponseDecoder.java
Patch:
@@ -32,6 +32,7 @@
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.stream.ClosedStreamException;
+import com.linecorp.armeria.internal.client.DecodedHttpResponse;
 import com.linecorp.armeria.internal.common.ArmeriaHttpUtil;
 import com.linecorp.armeria.internal.common.Http2GoAwayHandler;
 import com.linecorp.armeria.internal.common.InboundTrafficController;

File: core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java
Patch:
@@ -54,6 +54,8 @@
 import com.linecorp.armeria.common.logging.ClientConnectionTimingsBuilder;
 import com.linecorp.armeria.common.util.AsyncCloseable;
 import com.linecorp.armeria.common.util.AsyncCloseableSupport;
+import com.linecorp.armeria.internal.client.HttpSession;
+import com.linecorp.armeria.internal.client.PooledChannel;
 
 import io.netty.bootstrap.Bootstrap;
 import io.netty.channel.Channel;

File: core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java
Patch:
@@ -35,6 +35,9 @@
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.internal.client.ClientPendingThrowableUtil;
+import com.linecorp.armeria.internal.client.DecodedHttpResponse;
+import com.linecorp.armeria.internal.client.HttpSession;
+import com.linecorp.armeria.internal.client.PooledChannel;
 import com.linecorp.armeria.internal.common.PathAndQuery;
 import com.linecorp.armeria.internal.common.RequestContextUtil;
 import com.linecorp.armeria.server.ProxiedAddresses;

File: core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java
Patch:
@@ -44,6 +44,8 @@
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.Exceptions;
+import com.linecorp.armeria.internal.client.DecodedHttpResponse;
+import com.linecorp.armeria.internal.client.HttpSession;
 import com.linecorp.armeria.internal.client.UserAgentUtil;
 import com.linecorp.armeria.internal.common.ArmeriaHttp2HeadersDecoder;
 import com.linecorp.armeria.internal.common.ArmeriaHttpUtil;

File: core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java
Patch:
@@ -25,6 +25,7 @@
 import com.linecorp.armeria.common.HttpObject;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.internal.client.DecodedHttpResponse;
 import com.linecorp.armeria.unsafe.PooledObjects;
 
 import io.netty.channel.Channel;

File: core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java
Patch:
@@ -39,6 +39,8 @@
 import com.linecorp.armeria.common.stream.SubscriptionOption;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.internal.client.ClientRequestContextExtension;
+import com.linecorp.armeria.internal.client.DecodedHttpResponse;
+import com.linecorp.armeria.internal.client.HttpSession;
 import com.linecorp.armeria.internal.common.CancellationScheduler;
 import com.linecorp.armeria.internal.common.CancellationScheduler.CancellationTask;
 import com.linecorp.armeria.internal.common.InboundTrafficController;

File: core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java
Patch:
@@ -43,6 +43,9 @@
 import com.linecorp.armeria.common.stream.CancelledSubscriptionException;
 import com.linecorp.armeria.common.stream.SubscriptionOption;
 import com.linecorp.armeria.common.util.SafeCloseable;
+import com.linecorp.armeria.internal.client.DecodedHttpResponse;
+import com.linecorp.armeria.internal.client.HttpSession;
+import com.linecorp.armeria.internal.client.PooledChannel;
 import com.linecorp.armeria.internal.common.Http2GoAwayHandler;
 import com.linecorp.armeria.internal.common.InboundTrafficController;
 import com.linecorp.armeria.internal.common.KeepAliveHandler;

File: core/src/test/java/com/linecorp/armeria/client/HttpResponseWrapperTest.java
Patch:
@@ -30,6 +30,7 @@
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.logging.RequestLogProperty;
+import com.linecorp.armeria.internal.client.DecodedHttpResponse;
 import com.linecorp.armeria.internal.common.InboundTrafficController;
 import com.linecorp.armeria.internal.common.KeepAliveHandler;
 import com.linecorp.armeria.internal.common.NoopKeepAliveHandler;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/WeightedRoundRobinStrategy.java
Patch:
@@ -47,7 +47,7 @@ public EndpointSelector newSelector(EndpointGroup endpointGroup) {
      * <ul>
      *   <li>if endpoint weights are 1,1,1 (or 2,2,2), then select result is abc abc ...</li>
      *   <li>if endpoint weights are 1,2,3 (or 2,4,6), then select result is abcbcc(or abcabcbcbccc) ...</li>
-     *   <li>if endpoint weights are 3,5,7, then select result is abcabcabcbcbcbb abcabcabcbcbcbb ...</li>
+     *   <li>if endpoint weights are 3,5,7, then select result is abcabcabcbcbccc abcabcabcbcbccc ...</li>
      * </ul>
      */
     private static final class WeightedRoundRobinSelector extends AbstractEndpointSelector {

File: core/src/main/java/com/linecorp/armeria/common/stream/PathStreamMessage.java
Patch:
@@ -60,8 +60,6 @@ final class PathStreamMessage implements ByteStreamMessage {
     private static final AtomicIntegerFieldUpdater<PathStreamMessage> subscribedUpdater =
             AtomicIntegerFieldUpdater.newUpdater(PathStreamMessage.class, "subscribed");
 
-    static final int DEFAULT_FILE_BUFFER_SIZE = 8192;
-
     private static final Set<StandardOpenOption> READ_OPERATION = ImmutableSet.of(StandardOpenOption.READ);
 
     private final CompletableFuture<Void> completionFuture = new EventLoopCheckingFuture<>();

File: core/src/main/java/com/linecorp/armeria/internal/common/stream/InternalStreamMessageUtil.java
Patch:
@@ -22,6 +22,7 @@
 
 public final class InternalStreamMessageUtil {
 
+    public static final int DEFAULT_FILE_BUFFER_SIZE = 8192;
     public static final SubscriptionOption[] EMPTY_OPTIONS = {};
     public static final SubscriptionOption[] POOLED_OBJECTS = { SubscriptionOption.WITH_POOLED_OBJECTS };
     public static final SubscriptionOption[] CANCELLATION_OPTION = { SubscriptionOption.NOTIFY_CANCELLATION };

File: core/src/main/java/com/linecorp/armeria/server/ServerConfig.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.function.Function;
 import java.util.function.Predicate;
-import java.util.function.Supplier;
 
 import com.linecorp.armeria.common.DependencyInjector;
 import com.linecorp.armeria.common.Http1HeaderNaming;
@@ -275,9 +274,10 @@ default boolean shutdownBlockingTaskExecutorOnStop() {
     boolean isServerHeaderEnabled();
 
     /**
-     * Returns the {@link Supplier} that generates a {@link RequestId} for each {@link Request}.
+     * Returns the {@link Function} that generates a {@link RequestId} for each {@link Request}.
      */
-    Supplier<RequestId> requestIdGenerator();
+    @UnstableApi
+    Function<RoutingContext, RequestId> requestIdGenerator();
 
     /**
      * Returns the {@link ServerErrorHandler} that provides the error responses in case of unexpected

File: core/src/main/java/com/linecorp/armeria/server/UpdatableServerConfig.java
Patch:
@@ -27,7 +27,6 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.function.Function;
 import java.util.function.Predicate;
-import java.util.function.Supplier;
 
 import com.linecorp.armeria.common.DependencyInjector;
 import com.linecorp.armeria.common.Http1HeaderNaming;
@@ -265,7 +264,7 @@ public boolean isServerHeaderEnabled() {
     }
 
     @Override
-    public Supplier<RequestId> requestIdGenerator() {
+    public Function<RoutingContext, RequestId> requestIdGenerator() {
         return delegate.requestIdGenerator();
     }
 

File: core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java
Patch:
@@ -76,6 +76,9 @@ private static ImmutableList<DnsRecordType> dnsRecordTypes(ResolvedAddressTypes
             case IPV4_ONLY:
                 builder.add(DnsRecordType.A);
                 break;
+            case IPV6_ONLY:
+                builder.add(DnsRecordType.AAAA);
+                break;
             case IPV4_PREFERRED:
                 builder.add(DnsRecordType.A);
                 builder.add(DnsRecordType.AAAA);

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsAddressEndpointGroup.java
Patch:
@@ -85,10 +85,10 @@ public static DnsAddressEndpointGroupBuilder builder(String hostname) {
                             long selectionTimeoutMillis,
                             DefaultDnsResolver resolver, EventLoop eventLoop, Backoff backoff,
                             int minTtl, int maxTtl, @Nullable ResolvedAddressTypes resolvedAddressTypes,
-                            String hostname, int port) {
+                            String hostname, int port, List<DnsQueryListener> dnsQueryListeners) {
 
         super(selectionStrategy, allowEmptyEndpoints, selectionTimeoutMillis, resolver, eventLoop,
-              newQuestions(hostname, resolvedAddressTypes), backoff, minTtl, maxTtl);
+              newQuestions(hostname, resolvedAddressTypes), backoff, minTtl, maxTtl, dnsQueryListeners);
 
         this.hostname = hostname;
         this.port = port;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsServiceEndpointGroup.java
Patch:
@@ -67,11 +67,12 @@ public static DnsServiceEndpointGroupBuilder builder(String hostname) {
 
     DnsServiceEndpointGroup(EndpointSelectionStrategy selectionStrategy, boolean allowEmptyEndpoints,
                             long selectionTimeoutMillis, DefaultDnsResolver resolver, EventLoop eventLoop,
-                            Backoff backoff, int minTtl, int maxTtl, String hostname) {
+                            Backoff backoff, int minTtl, int maxTtl, String hostname,
+                            List<DnsQueryListener> dnsQueryListeners) {
 
         super(selectionStrategy, allowEmptyEndpoints, selectionTimeoutMillis, resolver, eventLoop,
               ImmutableList.of(DnsQuestionWithoutTrailingDot.of(hostname, DnsRecordType.SRV)),
-              backoff, minTtl, maxTtl);
+              backoff, minTtl, maxTtl, dnsQueryListeners);
         start();
     }
 

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsTextEndpointGroup.java
Patch:
@@ -74,11 +74,12 @@ public static DnsTextEndpointGroupBuilder builder(String hostname,
     DnsTextEndpointGroup(EndpointSelectionStrategy selectionStrategy, boolean allowEmptyEndpoints,
                          long selectionTimeoutMillis,
                          DefaultDnsResolver resolver, EventLoop eventLoop, Backoff backoff, int minTtl,
-                         int maxTtl, String hostname, Function<byte[], @Nullable Endpoint> mapping) {
+                         int maxTtl, String hostname, Function<byte[], @Nullable Endpoint> mapping,
+                         List<DnsQueryListener> dnsQueryListeners) {
 
         super(selectionStrategy, allowEmptyEndpoints, selectionTimeoutMillis, resolver, eventLoop,
               ImmutableList.of(DnsQuestionWithoutTrailingDot.of(hostname, DnsRecordType.TXT)),
-              backoff, minTtl, maxTtl);
+              backoff, minTtl, maxTtl, dnsQueryListeners);
         this.mapping = mapping;
         start();
     }

File: core/src/main/java/com/linecorp/armeria/server/FallbackService.java
Patch:
@@ -68,7 +68,7 @@ private static HttpResponse handleNotFound(ServiceRequestContext ctx,
         // Handle the case where '/path' (or '/path?query') doesn't exist
         // but '/path/' (or '/path/?query') exists.
         final String newPath = oldPath + '/';
-        if (!ctx.config().virtualHost().findServiceConfig(routingCtx.overridePath(newPath)).isPresent()) {
+        if (!ctx.config().virtualHost().findServiceConfig(routingCtx.withPath(newPath)).isPresent()) {
             // No need to send a redirect response because '/path/' (or '/path/?query') does not exist.
             throw cause;
         }

File: core/src/main/java/com/linecorp/armeria/server/RegexPathMappingWithPrefix.java
Patch:
@@ -66,7 +66,7 @@ RoutingResultBuilder doApply(RoutingContext routingCtx) {
             return null;
         }
 
-        return mapping.apply(routingCtx.overridePath(path.substring(pathPrefix.length() - 1)));
+        return mapping.apply(routingCtx.withPath(path.substring(pathPrefix.length() - 1)));
     }
 
     @Override

File: benchmarks/jmh/src/jmh/java/com/linecorp/armeria/common/stream/StreamMessageBenchmark.java
Patch:
@@ -161,7 +161,7 @@ public long notJmhEventLoop(StreamObjects streamObjects) throws Exception {
     static StreamMessage<Integer> newStream(StreamObjects streamObjects) {
         switch (streamObjects.streamType) {
             case DEFAULT_STREAM_MESSAGE:
-                return new DefaultStreamMessage<>();
+                return StreamMessage.streaming();
             case FIXED_STREAM_MESSAGE:
                 switch (streamObjects.num) {
                     case 0:

File: core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamWriter.java
Patch:
@@ -26,7 +26,7 @@
 import com.linecorp.armeria.internal.common.stream.AbortingSubscriber;
 import com.linecorp.armeria.internal.common.stream.StreamMessageUtil;
 
-abstract class AbstractStreamMessageWriter<T> extends CancellableStreamMessage<T> implements StreamWriter<T> {
+abstract class AbstractStreamWriter<T> extends CancellableStreamMessage<T> implements StreamWriter<T> {
 
     enum State {
         /**

File: core/src/main/java/com/linecorp/armeria/common/stream/ByteStreamMessageOutputStream.java
Patch:
@@ -33,7 +33,7 @@
 
 final class ByteStreamMessageOutputStream implements ByteStreamMessage {
 
-    private final StreamWriter<HttpData> outputStreamWriter = new DefaultStreamMessage<>();
+    private final StreamWriter<HttpData> outputStreamWriter = StreamMessage.streaming();
     private final ByteStreamMessage delegate = ByteStreamMessage.of(outputStreamWriter);
 
     private final Consumer<? super OutputStream> outputStreamConsumer;

File: core/src/main/java/com/linecorp/armeria/internal/common/DefaultHttpRequest.java
Patch:
@@ -32,6 +32,7 @@
 /**
  * Default {@link HttpRequest} implementation.
  */
+@SuppressWarnings("deprecation")
 public class DefaultHttpRequest extends DefaultStreamMessage<HttpObject> implements HttpRequestWriter {
 
     private final RequestHeaders headers;

File: core/src/main/java/com/linecorp/armeria/internal/common/DefaultHttpResponse.java
Patch:
@@ -29,6 +29,7 @@
 /**
  * Default {@link HttpResponse} instance.
  */
+@SuppressWarnings("deprecation")
 public class DefaultHttpResponse extends DefaultStreamMessage<HttpObject> implements HttpResponseWriter {
     @Override
     public String toString() {

File: core/src/test/java/com/linecorp/armeria/common/stream/ConcatPublisherStreamMessageTest.java
Patch:
@@ -211,7 +211,7 @@ void regularFixedStreamMessageShouldAbortElements() {
     @Test
     void defaultStreamMessageShouldAbortElements() {
         final StreamMessage<Integer> inner = StreamMessage.of(1);
-        final DefaultStreamMessage<StreamMessage<Integer>> defaultStreamMessage = new DefaultStreamMessage<>();
+        final StreamWriter<StreamMessage<Integer>> defaultStreamMessage = StreamMessage.streaming();
         defaultStreamMessage.write(inner);
         defaultStreamMessage.close();
 

File: core/src/test/java/com/linecorp/armeria/common/stream/DeferredStreamMessageVerification.java
Patch:
@@ -35,7 +35,7 @@ public StreamMessage<Long> createPublisher(long elements) {
     @Override
     public StreamMessage<Long> createFailedPublisher() {
         final DeferredStreamMessage<Long> stream = new DeferredStreamMessage<>();
-        final DefaultStreamMessage<Long> delegate = new DefaultStreamMessage<>();
+        final StreamWriter<Long> delegate = StreamMessage.streaming();
         delegate.subscribe(new NoopSubscriber<>());
         stream.delegate(delegate);
         return stream;

File: core/src/test/java/com/linecorp/armeria/common/stream/FilteredStreamMessageTest.java
Patch:
@@ -55,7 +55,7 @@ void withPooledObjects(boolean filterSupportsPooledObjects, boolean subscribedWi
                            int expectedRefCntInFilter, int expectedRefCntInOnNext) {
         final ByteBuf buf = newPooledBuffer();
         final HttpData data = HttpData.wrap(buf).withEndOfStream();
-        final DefaultStreamMessage<HttpData> stream = new DefaultStreamMessage<>();
+        final StreamWriter<HttpData> stream = StreamMessage.streaming();
         stream.write(data);
         stream.close();
 
@@ -108,7 +108,7 @@ public void onComplete() {
     void notifyCancellation() {
         final ByteBuf buf = newPooledBuffer();
         final HttpData data = HttpData.wrap(buf).withEndOfStream();
-        final DefaultStreamMessage<HttpData> stream = new DefaultStreamMessage<>();
+        final StreamWriter<HttpData> stream = StreamMessage.streaming();
         stream.write(data);
         stream.close();
 
@@ -126,7 +126,7 @@ protected HttpData filter(HttpData obj) {
     void errorPropagation() {
         final EventLoop eventLoop = eventLoopExtension.get();
         final AtomicReference<Throwable> causeRef = new AtomicReference<>();
-        final DefaultStreamMessage<Integer> streamMessage = new DefaultStreamMessage<>();
+        final StreamWriter<Integer> streamMessage = StreamMessage.streaming();
         streamMessage.write(1);
         streamMessage.write(2);
         streamMessage.close();

File: core/src/test/java/com/linecorp/armeria/common/stream/FuseableStreamMessageTest.java
Patch:
@@ -220,7 +220,7 @@ void mapError() {
                     .expectErrorMatches(cause -> cause == third)
                     .verify();
 
-        final DefaultStreamMessage<Integer> defaultStream = new DefaultStreamMessage<>();
+        final StreamWriter<Integer> defaultStream = StreamMessage.streaming();
         defaultStream.write(1);
         defaultStream.write(2);
         defaultStream.close(first);

File: core/src/test/java/com/linecorp/armeria/common/stream/PublisherBasedStreamMessageTest.java
Patch:
@@ -100,15 +100,15 @@ void testAbortWithoutSubscriber(@Nullable Throwable cause) {
     @Test
     void notifyCancellation() {
         final ByteBuf buf = newPooledBuffer();
-        final DefaultStreamMessage<HttpData> delegate = new DefaultStreamMessage<>();
+        final StreamWriter<HttpData> delegate = StreamMessage.streaming();
         delegate.write(HttpData.wrap(buf));
         final PublisherBasedStreamMessage<HttpData> p = new PublisherBasedStreamMessage<>(delegate);
         SubscriptionOptionTest.notifyCancellation(buf, p);
     }
 
     @Test
     void cancellationIsNotPropagatedByDefault() {
-        final DefaultStreamMessage<Integer> delegate = new DefaultStreamMessage<>();
+        final StreamWriter<Integer> delegate = StreamMessage.streaming();
         final PublisherBasedStreamMessage<Integer> p = new PublisherBasedStreamMessage<>(delegate);
 
         p.subscribe(new Subscriber<Integer>() {

File: core/src/test/java/com/linecorp/armeria/common/stream/StreamMessageDuplicatorCloseTest.java
Patch:
@@ -43,7 +43,7 @@ class StreamMessageDuplicatorCloseTest {
 
     @Test
     void closedDuplicator_elementsAreNotReleasedUntilSubscribedByAllSubscribers() {
-        final DefaultStreamMessage<HttpData> publisher = new DefaultStreamMessage<>();
+        final StreamWriter<HttpData> publisher = StreamMessage.streaming();
         final ArrayList<ByteBuf> byteBufs = new ArrayList<>(60);
         for (int i = 0; i < 60; i++) { // More than 50 that is the REQUEST_REMOVAL_THRESHOLD.
             final ByteBuf byteBuf = ByteBufAllocator.DEFAULT.buffer(4).writeInt(i);

File: core/src/test/java/com/linecorp/armeria/common/stream/StreamMessageDuplicatorVerification.java
Patch:
@@ -35,7 +35,7 @@ public StreamMessage<Long> createPublisher(long elements) {
 
     @Override
     public StreamMessage<Long> createFailedPublisher() {
-        final StreamMessage<Long> source = new DefaultStreamMessage<>();
+        final StreamMessage<Long> source = StreamMessage.streaming();
         final StreamMessageDuplicator<Long> duplicator = source.toDuplicator(ImmediateEventExecutor.INSTANCE);
         final StreamMessage<Long> duplicate = duplicator.duplicate();
         duplicate.subscribe(new NoopSubscriber<>());

File: core/src/test/java/com/linecorp/armeria/common/stream/StreamMessageInputStreamTest.java
Patch:
@@ -348,7 +348,7 @@ void httpDataConverter_error_thrown() throws IOException {
     @Test
     void maybeRequest_when_not_enough_data() throws IOException {
         final StreamMessage<String> streamMessage1 = StreamMessage.of("12", "34");
-        final DefaultStreamMessage<String> streamMessage2 = new DefaultStreamMessage<>();
+        final StreamWriter<String> streamMessage2 = StreamMessage.streaming();
         streamMessage2.write("56");
         streamMessage2.write("78");
         final AtomicBoolean consumed = new AtomicBoolean();

File: core/src/test/java/com/linecorp/armeria/common/stream/StreamMessagePeekTest.java
Patch:
@@ -90,7 +90,7 @@ void peekError() {
                     .expectErrorMatches(cause -> cause == third)
                     .verify();
 
-        final DefaultStreamMessage<Integer> defaultStream = new DefaultStreamMessage<>();
+        final StreamWriter<Integer> defaultStream = StreamMessage.streaming();
         defaultStream.write(1);
         defaultStream.write(2);
         defaultStream.close(first);

File: core/src/test/java/com/linecorp/armeria/common/stream/StreamMessageTest.java
Patch:
@@ -387,7 +387,7 @@ private static class StreamProvider implements ArgumentsProvider {
         @Override
         public Stream<? extends Arguments> provideArguments(ExtensionContext context) {
             return Stream.of(
-                    arguments(new DefaultStreamMessage<>(), TEN_INTEGERS),
+                    arguments(StreamMessage.streaming(), TEN_INTEGERS),
                     arguments(StreamMessage.of(), ImmutableList.of()),
                     arguments(StreamMessage.of(0), ImmutableList.of(0)),
                     arguments(StreamMessage.of(0, 1), ImmutableList.of(0, 1)),
@@ -400,7 +400,7 @@ private static class PooledHttpDataStreamProvider implements ArgumentsProvider {
         public Stream<? extends Arguments> provideArguments(ExtensionContext context) {
             final ByteBuf defaultBuf = newPooledBuffer();
             final HttpData defaultData = HttpData.wrap(defaultBuf).withEndOfStream();
-            final DefaultStreamMessage<HttpData> defaultStream = new DefaultStreamMessage<>();
+            final StreamWriter<HttpData> defaultStream = StreamMessage.streaming();
 
             final ByteBuf fixedBuf = newPooledBuffer();
             final HttpData fixedData = HttpData.wrap(fixedBuf).withEndOfStream();

File: core/src/test/java/com/linecorp/armeria/common/stream/SubscriptionOptionTest.java
Patch:
@@ -149,7 +149,7 @@ public Stream<? extends Arguments> provideArguments(ExtensionContext context) {
         }
 
         private static Arguments defaultStream() {
-            final DefaultStreamMessage<HttpData> defaultStream = new DefaultStreamMessage<>();
+            final StreamWriter<HttpData> defaultStream = StreamMessage.streaming();
             final ByteBuf buf = newPooledBuffer();
             final HttpData data = HttpData.wrap(buf).withEndOfStream();
             defaultStream.write(data);
@@ -166,7 +166,7 @@ private static Arguments fixedStream() {
 
         private static Arguments deferredStream() {
             final DeferredStreamMessage<HttpData> deferredStream = new DeferredStreamMessage<>();
-            final DefaultStreamMessage<HttpData> d = new DefaultStreamMessage<>();
+            final StreamWriter<HttpData> d = StreamMessage.streaming();
             deferredStream.delegate(d);
             final ByteBuf buf = newPooledBuffer();
             final HttpData data = HttpData.wrap(buf).withEndOfStream();

File: core/src/test/java/com/linecorp/armeria/server/Http1PipelineTest.java
Patch:
@@ -44,7 +44,8 @@
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.SplitHttpResponse;
-import com.linecorp.armeria.common.stream.DefaultStreamMessage;
+import com.linecorp.armeria.common.stream.StreamMessage;
+import com.linecorp.armeria.common.stream.StreamWriter;
 import com.linecorp.armeria.testing.junit5.server.ServerExtension;
 
 class Http1PipelineTest {
@@ -110,7 +111,7 @@ void shouldResetIfTwoHeadersAreWritten() throws InterruptedException {
                                               .factory(factory)
                                               .build();
 
-            final DefaultStreamMessage<HttpData> stream = new DefaultStreamMessage<>();
+            final StreamWriter<HttpData> stream = StreamMessage.streaming();
             final HttpResponse response =
                     client.prepare()
                           .post("/length-limit")

File: core/src/test/java/com/linecorp/armeria/server/ServerRequestDurationTest.java
Patch:
@@ -36,7 +36,8 @@
 import com.linecorp.armeria.common.ResponseEntity;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.logging.RequestLog;
-import com.linecorp.armeria.common.stream.DefaultStreamMessage;
+import com.linecorp.armeria.common.stream.StreamMessage;
+import com.linecorp.armeria.common.stream.StreamWriter;
 import com.linecorp.armeria.testing.junit5.server.ServerExtension;
 
 class ServerRequestDurationTest {
@@ -94,7 +95,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
     @ParameterizedTest
     void requestDuration(String path) throws InterruptedException {
         final WebClient client = server.webClient(cb -> cb.responseTimeoutMillis(100_000));
-        final DefaultStreamMessage<HttpData> stream = new DefaultStreamMessage<>();
+        final StreamWriter<HttpData> stream = StreamMessage.streaming();
         final CompletableFuture<ResponseEntity<String>> future =
                 client.prepare()
                       .post(path)

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcWebTrailersExtractor.java
Patch:
@@ -37,8 +37,8 @@
 import com.linecorp.armeria.common.grpc.protocol.DeframedMessage;
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
 import com.linecorp.armeria.common.grpc.protocol.GrpcWebTrailers;
-import com.linecorp.armeria.common.stream.DefaultStreamMessage;
 import com.linecorp.armeria.common.stream.StreamMessage;
+import com.linecorp.armeria.common.stream.StreamWriter;
 import com.linecorp.armeria.internal.client.grpc.protocol.InternalGrpcWebUtil;
 import com.linecorp.armeria.internal.common.ArmeriaHttpUtil;
 import com.linecorp.armeria.internal.common.grpc.ForwardingDecompressor;
@@ -73,7 +73,7 @@ public HttpResponse execute(HttpClient delegate, ClientRequestContext ctx, HttpR
 
         final ArmeriaMessageDeframer deframer =
                 new ArmeriaMessageDeframer(maxMessageSizeBytes, alloc, grpcWebText);
-        final DefaultStreamMessage<HttpData> publisher = new DefaultStreamMessage<>();
+        final StreamWriter<HttpData> publisher = StreamMessage.streaming();
         final StreamMessage<DeframedMessage> deframed = publisher.decode(deframer, alloc);
         deframed.subscribe(new TrailersSubscriber(ctx), ctx.eventLoop());
 

File: core/src/main/java/com/linecorp/armeria/client/Http2ClientConnectionHandler.java
Patch:
@@ -64,7 +64,7 @@ private static KeepAliveHandler newKeepAliveHandler(
                 idleTimeoutMillis, pingIntervalMillis, maxConnectionAgeMillis, maxNumRequestsPerConnection);
 
         if (!needsKeepAliveHandler) {
-            return NoopKeepAliveHandler.INSTANCE;
+            return new NoopKeepAliveHandler();
         }
 
         final Timer keepAliveTimer =

File: core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java
Patch:
@@ -293,7 +293,7 @@ private PooledChannel acquireNowExact(PoolKey key, SessionProtocol protocol) {
 
     private static boolean isHealthy(PooledChannel pooledChannel) {
         final Channel ch = pooledChannel.get();
-        return ch.isActive() && HttpSession.get(ch).canSendRequest();
+        return ch.isActive() && HttpSession.get(ch).isAcquirable();
     }
 
     @Nullable

File: core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java
Patch:
@@ -856,9 +856,9 @@ private static void toNettyHttp2Client(HttpHeaders inputHeaders, Http2Headers ou
      */
     public static void toNettyHttp1ServerHeaders(
             HttpHeaders inputHeaders, io.netty.handler.codec.http.HttpHeaders outputHeaders,
-            Http1HeaderNaming http1HeaderNaming) {
+            Http1HeaderNaming http1HeaderNaming, boolean keepAlive) {
         toNettyHttp1Server(inputHeaders, outputHeaders, http1HeaderNaming, false);
-        HttpUtil.setKeepAlive(outputHeaders, HttpVersion.HTTP_1_1, true);
+        HttpUtil.setKeepAlive(outputHeaders, HttpVersion.HTTP_1_1, keepAlive);
     }
 
     /**
@@ -900,7 +900,6 @@ public static void toNettyHttp1ClientHeaders(
             HttpHeaders inputHeaders, io.netty.handler.codec.http.HttpHeaders outputHeaders,
             Http1HeaderNaming http1HeaderNaming) {
         toNettyHttp1Client(inputHeaders, outputHeaders, http1HeaderNaming, false);
-        HttpUtil.setKeepAlive(outputHeaders, HttpVersion.HTTP_1_1, true);
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/internal/common/HttpHeadersUtil.java
Patch:
@@ -29,11 +29,14 @@
 import com.linecorp.armeria.internal.client.UserAgentUtil;
 import com.linecorp.armeria.internal.common.util.HttpTimestampSupplier;
 
+import io.netty.handler.codec.http.HttpHeaderValues;
 import io.netty.util.AsciiString;
 
 // TODO(minwoox): Replace this class with CompositeHeaders.
 public final class HttpHeadersUtil {
 
+    public static final String CLOSE_STRING = HttpHeaderValues.CLOSE.toString();
+
     /**
      * Merges the given {@link ResponseHeaders}. The headers have priority in the following order.
      * <pre>{@code

File: core/src/main/java/com/linecorp/armeria/server/Http2RequestDecoder.java
Patch:
@@ -69,7 +69,7 @@ final class Http2RequestDecoder extends Http2EventAdapter {
     private final InboundTrafficController inboundTrafficController;
     private final KeepAliveHandler keepAliveHandler;
     private final Http2GoAwayHandler goAwayHandler;
-    private final IntObjectMap<DecodedHttpRequest> requests = new IntObjectHashMap<>();
+    private final IntObjectMap<@Nullable DecodedHttpRequest> requests = new IntObjectHashMap<>();
     private int nextId;
 
     Http2RequestDecoder(ServerConfig cfg, Channel channel, String scheme, KeepAliveHandler keepAliveHandler) {

File: core/src/main/java/com/linecorp/armeria/server/Http2ServerConnectionHandler.java
Patch:
@@ -72,7 +72,7 @@ private static KeepAliveHandler newKeepAliveHandler(
                 idleTimeoutMillis, pingIntervalMillis, maxConnectionAgeMillis, maxNumRequestsPerConnection);
 
         if (!needsKeepAliveHandler) {
-            return NoopKeepAliveHandler.INSTANCE;
+            return new NoopKeepAliveHandler();
         }
 
         return new Http2ServerKeepAliveHandler(
@@ -129,7 +129,7 @@ protected void handlerRemoved0(ChannelHandlerContext ctx) throws Exception {
 
     private void maybeInitializeKeepAliveHandler(ChannelHandlerContext ctx) {
         final KeepAliveHandler keepAliveHandler = keepAliveHandler();
-        if (keepAliveHandler != NoopKeepAliveHandler.INSTANCE) {
+        if (!(keepAliveHandler instanceof NoopKeepAliveHandler)) {
             final Channel channel = ctx.channel();
             if (channel.isActive() && channel.isRegistered()) {
                 keepAliveHandler.initialize(ctx);
@@ -155,7 +155,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
 
     @Override
     public void close(ChannelHandlerContext ctx, ChannelPromise promise) throws Exception {
-        if (keepAliveHandler().needToCloseConnection()) {
+        if (keepAliveHandler().needsDisconnection()) {
             // Connection timed out or exceeded maximum number of requests.
             setGoAwayDebugMessage("max-age");
         }

File: core/src/main/java/com/linecorp/armeria/server/HttpServerPipelineConfigurator.java
Patch:
@@ -206,7 +206,7 @@ private void configureHttp(ChannelPipeline p, @Nullable ProxiedAddresses proxied
                                                                maxConnectionAgeMillis,
                                                                maxNumRequestsPerConnection);
         } else {
-            keepAliveHandler = NoopKeepAliveHandler.INSTANCE;
+            keepAliveHandler = new NoopKeepAliveHandler();
         }
         final ServerHttp1ObjectEncoder responseEncoder = new ServerHttp1ObjectEncoder(
                 p.channel(), H1C, keepAliveHandler,
@@ -513,7 +513,7 @@ private void addHttpHandlers(ChannelHandlerContext ctx) {
                                                                    maxConnectionAgeMillis,
                                                                    maxNumRequestsPerConnection);
             } else {
-                keepAliveHandler = NoopKeepAliveHandler.INSTANCE;
+                keepAliveHandler = new NoopKeepAliveHandler();
             }
 
             final ServerHttp1ObjectEncoder encoder = new ServerHttp1ObjectEncoder(

File: core/src/test/java/com/linecorp/armeria/client/HttpResponseWrapperTest.java
Patch:
@@ -164,13 +164,15 @@ private static HttpResponseWrapper httpResponseWrapper(DecodedHttpResponse res)
     }
 
     private static class TestHttpResponseDecoder extends HttpResponseDecoder {
+        private final KeepAliveHandler keepAliveHandler = new NoopKeepAliveHandler();
+
         TestHttpResponseDecoder(Channel channel, InboundTrafficController inboundTrafficController) {
             super(channel, inboundTrafficController);
         }
 
         @Override
         KeepAliveHandler keepAliveHandler() {
-            return NoopKeepAliveHandler.INSTANCE;
+            return keepAliveHandler;
         }
     }
 }

File: core/src/test/java/com/linecorp/armeria/internal/common/KeepAliveHandlerTest.java
Patch:
@@ -204,7 +204,7 @@ protected boolean hasRequestsInProgress(ChannelHandlerContext ctx) {
         keepAliveHandler.initialize(ctx);
 
         await().untilAsserted(() -> assertMeter(CONNECTION_LIFETIME + "#count", 0));
-        assertThat(keepAliveHandler.needToCloseConnection()).isFalse();
+        assertThat(keepAliveHandler.needsDisconnection()).isFalse();
     }
 
     @Test
@@ -239,7 +239,7 @@ protected boolean hasRequestsInProgress(ChannelHandlerContext ctx) {
         keepAliveHandler.initialize(ctx);
 
         final Stopwatch stopwatch = Stopwatch.createStarted();
-        await().untilAsserted(() -> assertThat(keepAliveHandler.needToCloseConnection()).isTrue());
+        await().untilAsserted(() -> assertThat(keepAliveHandler.needsDisconnection()).isTrue());
         assertThat(stopwatch.elapsed(TimeUnit.MILLISECONDS)).isBetween(500L, 1000L);
     }
 

File: core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java
Patch:
@@ -49,7 +49,7 @@ public interface KeepAliveHandler {
     void onPing();
 
     /**
-     * Invoked when a <a href="https://datatracker.ietf.org/doc/html/rfc7540#section-6.7">PING ACK</a> is received.
+     * Invoked when a <a href="https://datatracker.ietf.org/doc/html/rfc9113#name-ping">PING ACK</a> is received.
      * Note that this method is only valid for an HTTP/2 connection.
      */
     void onPingAck(long data);

File: core/src/main/java/com/linecorp/armeria/internal/common/Http1ObjectEncoder.java
Patch:
@@ -404,7 +404,7 @@ public final boolean isWritable(int id, int streamId) {
     }
 
     protected final boolean isWritable(int id) {
-        return id < minClosedId;
+        return id < minClosedId && !isClosed();
     }
 
     protected final void updateClosedId(int id) {

File: examples/grpc/src/main/java/example/armeria/grpc/HelloServiceImpl.java
Patch:
@@ -23,7 +23,7 @@ public class HelloServiceImpl extends HelloServiceImplBase {
     public void hello(HelloRequest request, StreamObserver<HelloReply> responseObserver) {
         if (request.getName().isEmpty()) {
             responseObserver.onError(
-                    Status.FAILED_PRECONDITION.withDescription("Name cannot be empty").asException());
+                    Status.FAILED_PRECONDITION.withDescription("Name cannot be empty").asRuntimeException());
         } else {
             responseObserver.onNext(buildReply(toMessage(request.getName())));
             responseObserver.onCompleted();

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/UnaryServerCallTest.java
Patch:
@@ -69,7 +69,7 @@
 import io.grpc.Metadata.Key;
 import io.grpc.ServerCall.Listener;
 import io.grpc.Status;
-import io.grpc.StatusException;
+import io.grpc.StatusRuntimeException;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufInputStream;
 import io.netty.util.AsciiString;
@@ -187,7 +187,7 @@ void duplicateRequestMessage_inputStream() {
         await().untilAsserted(() -> assertThat(call.isCancelled()).isTrue());
         assertThatThrownBy(() -> res.whenComplete().join())
                 .isInstanceOf(CompletionException.class)
-                .hasCauseInstanceOf(StatusException.class)
+                .hasCauseInstanceOf(StatusRuntimeException.class)
                 .hasMessageContaining("More than one request messages for unary call");
         assertThat(buf1.refCnt()).isZero();
         assertThat(buf2.refCnt()).isZero();
@@ -202,7 +202,7 @@ void duplicateRequestMessage_byteBuf() {
         await().untilAsserted(() -> assertThat(call.isCancelled()).isTrue());
         assertThatThrownBy(() -> res.whenComplete().join())
                 .isInstanceOf(CompletionException.class)
-                .hasCauseInstanceOf(StatusException.class)
+                .hasCauseInstanceOf(StatusRuntimeException.class)
                 .hasMessageContaining("More than one request messages for unary call");
         assertThat(buf1.refCnt()).isZero();
         assertThat(buf2.refCnt()).isZero();

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/UnframedGrpcErrorHandlerTest.java
Patch:
@@ -147,7 +147,7 @@ void plainTextWithStackTrace() {
         assertThat(response.status()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
         final String content = response.contentUtf8();
         assertThat(content).startsWith("grpc-code: UNKNOWN, grpc error message" +
-                                       "\nstack-trace:\nio.grpc.StatusException");
+                                       "\nstack-trace:\nio.grpc.StatusRuntimeException");
         assertThat(response.trailers()).isEmpty();
     }
 
@@ -163,7 +163,7 @@ void jsonWithStackTrace() {
         final String content = response.contentUtf8();
         assertThat(content).startsWith("{\"code\":2,\"grpc-code\":\"UNKNOWN\"," +
                                        "\"message\":\"grpc error message\"," +
-                                       "\"stack-trace\":\"io.grpc.StatusException");
+                                       "\"stack-trace\":\"io.grpc.StatusRuntimeException");
         assertThat(response.trailers()).isEmpty();
     }
 

File: it/grpc/java/src/test/java/com/linecorp/armeria/grpc/java/HelloServiceImpl.java
Patch:
@@ -39,7 +39,7 @@ public class HelloServiceImpl extends HelloServiceImplBase {
     public void hello(HelloRequest request, StreamObserver<HelloReply> responseObserver) {
         if (request.getName().isEmpty()) {
             responseObserver.onError(
-                    Status.FAILED_PRECONDITION.withDescription("Name cannot be empty").asException());
+                    Status.FAILED_PRECONDITION.withDescription("Name cannot be empty").asRuntimeException());
         } else {
             responseObserver.onNext(buildReply(toMessage(request.getName())));
             responseObserver.onCompleted();

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/AbstractCircuitBreakerClientBuilder.java
Patch:
@@ -40,7 +40,7 @@ public abstract class AbstractCircuitBreakerClientBuilder<I extends Request, O e
     private final CircuitBreakerRule rule;
     @Nullable
     private final CircuitBreakerRuleWithContent<O> ruleWithContent;
-    private CircuitBreakerClientHandler<I> handler =
+    private CircuitBreakerClientHandler handler =
             CircuitBreakerClientHandler.of(CircuitBreakerMapping.ofDefault());
 
     /**
@@ -94,12 +94,12 @@ public AbstractCircuitBreakerClientBuilder<I, O> mapping(CircuitBreakerMapping m
      * @return {@code this} to support method chaining.
      */
     @UnstableApi
-    public AbstractCircuitBreakerClientBuilder<I, O> handler(CircuitBreakerClientHandler<I> handler) {
+    public AbstractCircuitBreakerClientBuilder<I, O> handler(CircuitBreakerClientHandler handler) {
         this.handler = requireNonNull(handler, "handler");
         return this;
     }
 
-    final CircuitBreakerClientHandler<I> handler() {
+    final CircuitBreakerClientHandler handler() {
         return handler;
     }
 

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClientBuilder.java
Patch:
@@ -82,7 +82,7 @@ public CircuitBreakerClientBuilder mapping(CircuitBreakerMapping mapping) {
 
     @Override
     @UnstableApi
-    public CircuitBreakerClientBuilder handler(CircuitBreakerClientHandler<HttpRequest> handler) {
+    public CircuitBreakerClientBuilder handler(CircuitBreakerClientHandler handler) {
         return (CircuitBreakerClientBuilder) super.handler(handler);
     }
 

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRpcClientBuilder.java
Patch:
@@ -55,7 +55,7 @@ public CircuitBreakerRpcClientBuilder mapping(CircuitBreakerMapping mapping) {
     }
 
     @Override
-    public CircuitBreakerRpcClientBuilder handler(CircuitBreakerClientHandler<RpcRequest> handler) {
+    public CircuitBreakerRpcClientBuilder handler(CircuitBreakerClientHandler handler) {
         return (CircuitBreakerRpcClientBuilder) super.handler(handler);
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/DefaultCircuitBreakerClientHandler.java
Patch:
@@ -25,7 +25,7 @@
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.circuitbreaker.CircuitBreakerCallback;
 
-final class DefaultCircuitBreakerClientHandler<I extends Request> implements CircuitBreakerClientHandler<I> {
+final class DefaultCircuitBreakerClientHandler implements CircuitBreakerClientHandler {
 
     private static final Logger logger = LoggerFactory.getLogger(DefaultCircuitBreakerClientHandler.class);
 
@@ -36,12 +36,12 @@ final class DefaultCircuitBreakerClientHandler<I extends Request> implements Cir
     }
 
     @Override
-    public CircuitBreakerCallback tryRequest(ClientRequestContext ctx, I req) {
+    public CircuitBreakerCallback tryRequest(ClientRequestContext ctx, Request req) {
         final CircuitBreaker circuitBreaker;
         try {
             circuitBreaker = requireNonNull(mapping.get(ctx, req), "circuitBreaker");
         } catch (Throwable t) {
-            logger.warn("Failed to get a circuit breaker from mapping: {}", mapping, t);
+            logger.warn("Failed to get a circuit breaker from mapping ({}) for context ({})", mapping, ctx, t);
             return null;
         }
         if (!circuitBreaker.tryRequest()) {

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java
Patch:
@@ -490,11 +490,11 @@ private void close(Status status, Metadata metadata) {
         }
 
         final RequestLogBuilder logBuilder = ctx.logBuilder();
-        logBuilder.responseContent(GrpcLogUtil.rpcResponse(status, firstResponse), null);
+        logBuilder.responseContent(GrpcLogUtil.rpcResponse(status, firstResponse, metadata), null);
         if (status.isOk()) {
             req.abort();
         } else {
-            req.abort(status.asRuntimeException(metadata));
+            req.abort(status.asException(metadata));
         }
         if (upstream != null) {
             upstream.cancel();

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/UnaryServerCall.java
Patch:
@@ -167,12 +167,12 @@ void doClose(Status status, Metadata metadata, boolean completed) {
             }
 
             // Set responseContent before closing stream to use responseCause in error handling
-            ctx.logBuilder().responseContent(GrpcLogUtil.rpcResponse(status, responseMessage), null);
+            ctx.logBuilder().responseContent(GrpcLogUtil.rpcResponse(status, responseMessage, metadata), null);
             resFuture.complete(response);
         } catch (Exception ex) {
             resFuture.completeExceptionally(ex);
         } finally {
-            closeListener(status, completed, false);
+            closeListener(status, metadata, completed, false);
         }
     }
 

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/HttpJsonTranscodingService.java
Patch:
@@ -68,6 +68,7 @@
 import com.google.protobuf.Descriptors.ServiceDescriptor;
 import com.google.protobuf.DoubleValue;
 import com.google.protobuf.Duration;
+import com.google.protobuf.FieldMask;
 import com.google.protobuf.FloatValue;
 import com.google.protobuf.Int32Value;
 import com.google.protobuf.Int64Value;
@@ -397,7 +398,8 @@ private static JavaType getJavaTypeForWellKnownTypes(FieldDescriptor fd) {
         final String fullName = messageType.getFullName();
 
         if (Timestamp.getDescriptor().getFullName().equals(fullName) ||
-            Duration.getDescriptor().getFullName().equals(fullName)) {
+            Duration.getDescriptor().getFullName().equals(fullName) ||
+            FieldMask.getDescriptor().getFullName().equals(fullName)) {
             return JavaType.STRING;
         }
 

File: core/src/main/java/com/linecorp/armeria/common/encoding/BrotliStreamDecoder.java
Patch:
@@ -28,6 +28,6 @@ final class BrotliStreamDecoder extends AbstractStreamDecoder {
         // BrotliDecoder does not limit the max output size. If the output buffer exceeds 4MiB, it is
         // chunked into pieces of 4MiB. As a workaround, the max length is checked at the `StreamDecoder`
         // level after decoding.
-        super(brotliDecoder, alloc, maxLength, true);
+        super(brotliDecoder, alloc, maxLength);
     }
 }

File: core/src/main/java/com/linecorp/armeria/common/encoding/ZlibStreamDecoder.java
Patch:
@@ -32,7 +32,7 @@ final class ZlibStreamDecoder extends AbstractStreamDecoder {
             SystemPropertyUtil.getBoolean("io.netty.noJdkZlibDecoder", false);
 
     ZlibStreamDecoder(ZlibWrapper zlibWrapper, ByteBufAllocator alloc, int maxLength) {
-        super(newZlibDecoder(zlibWrapper, maxLength), alloc, maxLength, false);
+        super(newZlibDecoder(zlibWrapper, maxLength), alloc, maxLength);
     }
 
     private static ZlibDecoder newZlibDecoder(ZlibWrapper wrapper, int maxLength) {

File: core/src/main/java/com/linecorp/armeria/server/encoding/HttpEncoders.java
Patch:
@@ -83,7 +83,6 @@ static OutputStream getEncodingOutputStream(HttpEncodingType encodingType, Outpu
 
     // Copied from netty's HttpContentCompressor.
     @Nullable
-    @SuppressWarnings("FloatingPointEquality")
     private static HttpEncodingType determineEncoding(String acceptEncoding) {
         float starQ = -1.0f;
         final Map<HttpEncodingType, Float> encodings = new LinkedHashMap<>();

File: core/src/test/java/com/linecorp/armeria/client/DocServiceAssetCompressionTest.java
Patch:
@@ -28,10 +28,10 @@ class DocServiceAssetCompressionTest {
     @ValueSource(strings = {"index.html", "main.js"})
     @ParameterizedTest
     void shouldNotIncludeUncompressedAssets(String file) {
-        // `doc-client` should produce compressed asserts when building bundle files for DocService and
+        // `doc-client` should produce compressed assets when building bundle files for DocService and
         // they should exist in the classpath of the core module.
         // If Gradle build task is executed with `-PnoWeb`, this test may be broken.
         assertThat(DocService.class.getResource(file)).isNull();
-        assertThat(DocService.class.getResource(file + ".br")).isNotNull();
+        assertThat(DocService.class.getResource(file + ".gz")).isNotNull();
     }
 }

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotationUtil.java
Patch:
@@ -49,7 +49,7 @@
 /**
  * A utility class which helps to get annotations from an {@link AnnotatedElement}.
  */
-final class AnnotationUtil {
+public final class AnnotationUtil {
 
     private static final Logger logger = LoggerFactory.getLogger(AnnotationUtil.class);
 
@@ -102,7 +102,7 @@ enum FindOption {
      * @param annotationType the type of the annotation to find
      */
     @Nullable
-    static <T extends Annotation> T findFirst(AnnotatedElement element, Class<T> annotationType) {
+    public static <T extends Annotation> T findFirst(AnnotatedElement element, Class<T> annotationType) {
         final List<T> found = findAll(element, annotationType);
         return found.isEmpty() ? null : found.get(0);
     }

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/FramedGrpcService.java
Patch:
@@ -272,7 +272,7 @@ private <I, O> void startCall(
             SerializationFormat serializationFormat) {
         final MethodDescriptor<I, O> methodDescriptor = methodDef.getMethodDescriptor();
         final Executor blockingExecutor;
-        if (useBlockingTaskExecutor) {
+        if (useBlockingTaskExecutor || registry.needToUseBlockingTaskExecutor(methodDef)) {
             blockingExecutor = MoreExecutors.newSequentialExecutor(ctx.blockingTaskExecutor());
         } else {
             blockingExecutor = null;

File: core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java
Patch:
@@ -1392,6 +1392,9 @@ public VirtualHostBuilder virtualHost(String defaultHostname, String hostnamePat
      * with the specified {@code port}. The returned virtual host will have a catch-all (wildcard host) name
      * pattern that allows all host names.
      *
+     * <p>Note that you cannot configure TLS to the port-based virtual host. Configure it to the
+     * {@link ServerBuilder} or a {@linkplain #virtualHost(String) name-based virtual host}.
+     *
      * @param port the port number that this virtual host binds to
      * @return {@link VirtualHostBuilder} for building the virtual host
      */

File: core/src/main/java/com/linecorp/armeria/common/SerializationFormat.java
Patch:
@@ -94,7 +94,7 @@ private static SerializationFormat register(
             SerializationFormatProvider.Entry entry) {
 
         checkState(!uriTextToFormats.containsKey(entry.uriText),
-                   "serialization format registered already: ", entry.uriText);
+                   "serialization format registered already: %s", entry.uriText);
 
         final SerializationFormat value = new SerializationFormat(
                 entry.uriText, entry.primaryMediaType, entry.mediaTypes);
@@ -119,7 +119,7 @@ private static void checkMediaType(Multimap<MediaType, SerializationFormat> simp
         for (SerializationFormat format : simplifiedMediaTypeToFormats.get(simplifiedMediaType)) {
             for (MediaType registeredMediaType : format.mediaTypes()) {
                 checkState(!registeredMediaType.is(mediaType) && !mediaType.is(registeredMediaType),
-                           "media type registered already: ", mediaType);
+                           "media type registered already: %s", mediaType);
             }
         }
     }
@@ -139,7 +139,7 @@ public static Set<SerializationFormat> values() {
     public static SerializationFormat of(String uriText) {
         uriText = Ascii.toLowerCase(requireNonNull(uriText, "uriText"));
         final SerializationFormat value = uriTextToFormats.get(uriText);
-        checkArgument(value != null, "unknown serialization format: ", uriText);
+        checkArgument(value != null, "unknown serialization format: %s", uriText);
         return value;
     }
 

File: core/src/main/java/com/linecorp/armeria/common/SessionProtocol.java
Patch:
@@ -84,7 +84,7 @@ public enum SessionProtocol {
     public static SessionProtocol of(String uriText) {
         uriText = Ascii.toLowerCase(requireNonNull(uriText, "uriText"));
         final SessionProtocol value = uriTextToProtocols.get(uriText);
-        checkArgument(value != null, "unknown session protocol: ", uriText);
+        checkArgument(value != null, "unknown session protocol: %s", uriText);
         return value;
     }
 

File: core/src/main/java/com/linecorp/armeria/common/util/BlockingTaskExecutorBuilder.java
Patch:
@@ -69,7 +69,7 @@ public BlockingTaskExecutorBuilder numThreads(int numThreads) {
      */
     public BlockingTaskExecutorBuilder keepAliveTime(Duration keepAliveTime) {
         checkArgument(!requireNonNull(keepAliveTime, "keepAliveTime").isNegative(),
-                      "keepAliveTime: %s (expected: >= 0)");
+                      "keepAliveTime: %s (expected: >= 0)", keepAliveTime);
         return keepAliveTimeMillis(keepAliveTime.toMillis());
     }
 

File: core/src/main/java/com/linecorp/armeria/server/docs/DocServiceBuilder.java
Patch:
@@ -516,7 +516,7 @@ private static String serializeExampleRequest(
      */
     private static String[] guessAndSerializeExampleRequest(Object exampleRequest) {
         checkArgument(!(exampleRequest instanceof CharSequence),
-                      "can't guess service or method name from a string: ", exampleRequest);
+                      "can't guess service or method name from a string: %s", exampleRequest);
 
         boolean guessed = false;
         for (DocServicePlugin plugin : DocService.plugins) {

File: core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceBuilder.java
Patch:
@@ -214,7 +214,7 @@ public HealthCheckServiceBuilder longPolling(long maxLongPollingTimeoutMillis,
                       "maxLongPollingTimeoutMillis: %s (expected: >= 0)",
                       maxLongPollingTimeoutMillis);
         checkArgument(pingIntervalMillis >= 0,
-                      "pingIntervalMillis: %s (expected: >= 0)");
+                      "pingIntervalMillis: %s (expected: >= 0)", pingIntervalMillis);
         checkArgument(longPollingTimeoutJitterRate >= 0 && longPollingTimeoutJitterRate <= 1,
                       "longPollingTimeoutJitterRate: %s (expected: >= 0 && <= 1)",
                       longPollingTimeoutJitterRate);

File: core/src/test/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtilTest.java
Patch:
@@ -17,7 +17,6 @@
 package com.linecorp.armeria.internal.common;
 
 import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.concatPaths;
-import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.decodePath;
 import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.parseDirectives;
 import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.toArmeria;
 import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.toNettyHttp1ClientHeaders;
@@ -384,7 +383,8 @@ void stripTEHeadersAccountsForValueSimilarToTrailers() {
 
     @Test
     void stripTEHeadersAccountsForOWS() {
-        final io.netty.handler.codec.http.HttpHeaders in = new DefaultHttpHeaders();
+        // Disable headers validation to allow optional whitespace.
+        final io.netty.handler.codec.http.HttpHeaders in = new DefaultHttpHeaders(false);
         in.add(HttpHeaderNames.TE, " " + HttpHeaderValues.TRAILERS + ' ');
         final HttpHeadersBuilder out = HttpHeaders.builder();
         toArmeria(in, out);

File: eureka/src/test/java/com/linecorp/armeria/client/eureka/ArmeriaEurekaClientTest.java
Patch:
@@ -25,8 +25,6 @@
 import java.util.List;
 import java.util.Map;
 
-import javax.ws.rs.core.MediaType;
-
 import org.junit.Ignore;
 import org.junit.Test;
 
@@ -58,6 +56,8 @@
 import com.linecorp.armeria.internal.common.eureka.EurekaWebClient;
 import com.linecorp.armeria.internal.common.eureka.InstanceInfo.PortWrapper;
 
+import jakarta.ws.rs.core.MediaType;
+
 public final class ArmeriaEurekaClientTest extends EurekaHttpClientCompatibilityTestSuite {
 
     @Override

File: core/src/main/java/com/linecorp/armeria/common/ContentTooLargeException.java
Patch:
@@ -64,8 +64,9 @@ private ContentTooLargeException(boolean neverSample) {
         contentLength = -1;
     }
 
-    ContentTooLargeException(long maxContentLength, long contentLength, long transferred) {
-        super(toString(maxContentLength, contentLength, transferred));
+    ContentTooLargeException(long maxContentLength, long contentLength, long transferred,
+                             @Nullable Throwable cause) {
+        super(toString(maxContentLength, contentLength, transferred), cause);
 
         neverSample = false;
         this.transferred = transferred;

File: core/src/test/java/com/linecorp/armeria/common/encoding/BrotliStreamDecoderTest.java
Patch:
@@ -34,7 +34,7 @@ class BrotliStreamDecoderTest {
     private static final byte[] PAYLOAD = { -117, 1, -128, 77, 101, 111, 119, 3};
 
     StreamDecoder newDecoder() {
-        return new BrotliStreamDecoder(new BrotliDecoder(), ByteBufAllocator.DEFAULT);
+        return new BrotliStreamDecoder(new BrotliDecoder(), ByteBufAllocator.DEFAULT, 0);
     }
 
     @Test

File: core/src/test/java/com/linecorp/armeria/common/encoding/ZlibStreamDecoderTest.java
Patch:
@@ -21,6 +21,6 @@
 class ZlibStreamDecoderTest extends AbstractStreamDecoderTest {
     @Override
     StreamDecoder newDecoder() {
-        return new ZlibStreamDecoder(ZlibWrapper.NONE, ByteBufAllocator.DEFAULT);
+        return new ZlibStreamDecoder(ZlibWrapper.NONE, ByteBufAllocator.DEFAULT, 0);
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/AbstractHttpRequestHandler.java
Patch:
@@ -199,7 +199,8 @@ final void writeHeaders(RequestHeaders headers) {
             state = State.NEEDS_DATA_OR_TRAILERS;
         }
 
-        final RequestHeaders merged = mergeRequestHeaders(headers, ctx.additionalRequestHeaders());
+        final RequestHeaders merged = mergeRequestHeaders(
+                headers, ctx.defaultRequestHeaders(), ctx.additionalRequestHeaders());
         logBuilder.requestHeaders(merged);
         final ChannelPromise promise = ch.newPromise();
         // Attach a listener first to make the listener early handle a cause raised while writing headers

File: core/src/main/java/com/linecorp/armeria/client/ClientOptions.java
Patch:
@@ -130,7 +130,6 @@ public final class ClientOptions
 
     private static final List<AsciiString> PROHIBITED_HEADER_NAMES = ImmutableList.of(
             HttpHeaderNames.CONNECTION,
-            HttpHeaderNames.HOST,
             HttpHeaderNames.HTTP2_SETTINGS,
             HttpHeaderNames.METHOD,
             HttpHeaderNames.PATH,

File: core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java
Patch:
@@ -44,7 +44,7 @@
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.Exceptions;
-import com.linecorp.armeria.internal.client.HttpHeaderUtil;
+import com.linecorp.armeria.internal.client.UserAgentUtil;
 import com.linecorp.armeria.internal.common.ArmeriaHttp2HeadersDecoder;
 import com.linecorp.armeria.internal.common.ArmeriaHttpUtil;
 import com.linecorp.armeria.internal.common.ReadSuppressingHandler;
@@ -428,7 +428,7 @@ public void channelActive(ChannelHandlerContext ctx) throws Exception {
                     remoteAddress.getHostString(), remoteAddress.getPort(), H1C.defaultPort());
 
             upgradeReq.headers().set(HttpHeaderNames.HOST, host);
-            upgradeReq.headers().set(HttpHeaderNames.USER_AGENT, HttpHeaderUtil.USER_AGENT);
+            upgradeReq.headers().set(HttpHeaderNames.USER_AGENT, UserAgentUtil.USER_AGENT);
 
             ctx.writeAndFlush(upgradeReq);
 

File: core/src/main/java/com/linecorp/armeria/client/UserClient.java
Patch:
@@ -194,10 +194,9 @@ protected final O execute(SessionProtocol protocol, EndpointGroup endpointGroup,
             rpcReq = (RpcRequest) req;
         }
 
-        final boolean hasBaseUri = !Clients.isUndefinedUri(params.uri());
         final DefaultClientRequestContext ctx = new DefaultClientRequestContext(
                 meterRegistry, protocol, id, method, path, query, fragment, options(), httpReq, rpcReq,
-                requestOptions, System.nanoTime(), SystemInfo.currentTimeMicros(), hasBaseUri);
+                requestOptions, System.nanoTime(), SystemInfo.currentTimeMicros());
 
         return initContextAndExecuteWithFallback(unwrap(), ctx, endpointGroup,
                                                  futureConverter, errorResponseFactory);

File: core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java
Patch:
@@ -204,7 +204,7 @@ public boolean equals(AsciiString a, AsciiString b) {
     }
 
     static final Set<AsciiString> ADDITIONAL_REQUEST_HEADER_DISALLOWED_LIST = ImmutableSet.of(
-            HttpHeaderNames.SCHEME, HttpHeaderNames.STATUS, HttpHeaderNames.METHOD, HttpHeaderNames.AUTHORITY);
+            HttpHeaderNames.SCHEME, HttpHeaderNames.STATUS, HttpHeaderNames.METHOD);
 
     private static final Set<AsciiString> REQUEST_PSEUDO_HEADERS = ImmutableSet.of(
             HttpHeaderNames.METHOD, HttpHeaderNames.SCHEME, HttpHeaderNames.AUTHORITY,

File: core/src/main/java/com/linecorp/armeria/client/Clients.java
Patch:
@@ -303,7 +303,7 @@ public static <T> T newDerivedClient(T client, Iterable<ClientOptionValue<?>> ad
     public static <T> T newDerivedClient(
             T client, Function<? super ClientOptions, ClientOptions> configurator) {
         final ClientBuilderParams params = builderParams(client);
-        final ClientBuilder builder = builder(params.uri());
+        final ClientBuilder builder = newDerivedBuilder(params);
         builder.options(configurator.apply(params.options()));
 
         return newDerivedClient(builder, params.clientType());

File: core/src/main/java/com/linecorp/armeria/client/DefaultBlockingWebClient.java
Patch:
@@ -71,7 +71,7 @@ public URI uri() {
 
     @Override
     public Class<?> clientType() {
-        return delegate.clientType();
+        return BlockingWebClient.class;
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/client/DefaultClientFactory.java
Patch:
@@ -100,13 +100,15 @@ static void disableShutdownHook0() {
         this.httpClientFactory = httpClientFactory;
 
         final List<ClientFactory> availableClientFactories = new ArrayList<>();
-        availableClientFactories.add(httpClientFactory);
 
+        // Give priority to custom client factories.
         Streams.stream(ServiceLoader.load(ClientFactoryProvider.class,
                                           DefaultClientFactory.class.getClassLoader()))
                .map(provider -> provider.newFactory(httpClientFactory))
                .forEach(availableClientFactories::add);
 
+        availableClientFactories.add(httpClientFactory);
+
         final ImmutableListMultimap.Builder<Scheme, ClientFactory> builder = ImmutableListMultimap.builder();
         for (ClientFactory f : availableClientFactories) {
             f.supportedSchemes().forEach(s -> builder.put(s, f));

File: core/src/main/java/com/linecorp/armeria/client/DefaultRestClient.java
Patch:
@@ -64,7 +64,7 @@ public URI uri() {
 
     @Override
     public Class<?> clientType() {
-        return delegate.clientType();
+        return RestClient.class;
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedBeanFactoryRegistry.java
Patch:
@@ -117,7 +117,7 @@ static Set<AnnotatedValueResolver> uniqueResolverSet() {
         return new TreeSet<>((o1, o2) -> {
             final String o1Name = o1.httpElementName();
             final String o2Name = o2.httpElementName();
-            if (o1Name != null && o1Name.equals(o2Name) && o1.annotationType() == o2.annotationType()) {
+            if (o1Name.equals(o2Name) && o1.annotationType() == o2.annotationType()) {
                 return 0;
             }
             // We are not ordering, but just finding duplicate elements.

File: core/src/main/java/com/linecorp/armeria/server/docs/ServiceSpecification.java
Patch:
@@ -111,7 +111,7 @@ private static void generateDescriptiveTypeInfos(
             }
 
             generateDescriptiveTypeInfos(descriptiveTypeInfoFactory, enums, structs, exceptions,
-                                   newInfo.findDescriptiveTypes());
+                                         newInfo.findDescriptiveTypes());
         });
     }
 

File: core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolverTest.java
Patch:
@@ -290,7 +290,6 @@ private static void testResolver(AnnotatedValueResolver resolver) {
         if (resolver.annotationType() == Param.class) {
             if (shouldHttpParameterExist(resolver) ||
                 shouldPathVariableExist(resolver)) {
-                assertThat(resolver.httpElementName()).isNotNull();
                 if (resolver.elementType().isEnum()) {
                     testEnum(value, resolver.httpElementName());
                 } else if (resolver.shouldWrapValueAsOptional()) {

File: core/src/main/java/com/linecorp/armeria/client/AbstractDnsResolverBuilder.java
Patch:
@@ -37,7 +37,6 @@
 import com.linecorp.armeria.internal.client.dns.DnsUtil;
 
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.instrument.Metrics;
 import io.netty.channel.EventLoopGroup;
 import io.netty.handler.codec.dns.DnsRecord;
 import io.netty.resolver.HostsFileEntriesResolver;
@@ -462,7 +461,7 @@ protected final DnsCache maybeCreateDnsCache() {
                     "Cannot set dnsCache() with cacheSpec(), ttl(), or negativeTtl().");
         }
 
-        final MeterRegistry meterRegistry = firstNonNull(this.meterRegistry, Metrics.globalRegistry);
+        final MeterRegistry meterRegistry = firstNonNull(this.meterRegistry, Flags.meterRegistry());
         if (needsToCreateDnsCache) {
             return DnsCache.builder()
                            .cacheSpec(cacheSpec)
@@ -488,7 +487,7 @@ protected final Consumer<DnsNameResolverBuilder> buildConfigurator(EventLoopGrou
                        queryTimeoutMillis, queryTimeoutMillisForEachAttempt);
         }
 
-        final MeterRegistry meterRegistry = firstNonNull(this.meterRegistry, Metrics.globalRegistry);
+        final MeterRegistry meterRegistry = firstNonNull(this.meterRegistry, Flags.meterRegistry());
 
         final boolean traceEnabled = this.traceEnabled;
         final long queryTimeoutMillis = this.queryTimeoutMillis;

File: core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptions.java
Patch:
@@ -39,7 +39,6 @@
 import com.linecorp.armeria.internal.common.util.ChannelUtil;
 
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.instrument.Metrics;
 import io.netty.channel.ChannelOption;
 import io.netty.channel.ChannelPipeline;
 import io.netty.channel.EventLoop;
@@ -221,7 +220,7 @@ private static long clampedDefaultMaxClientConnectionAge() {
      * The {@link MeterRegistry} which collects various stats.
      */
     public static final ClientFactoryOption<MeterRegistry> METER_REGISTRY =
-            ClientFactoryOption.define("METER_REGISTRY", Metrics.globalRegistry);
+            ClientFactoryOption.define("METER_REGISTRY", Flags.meterRegistry());
 
     /**
      * The {@link ProxyConfigSelector} which determines the {@link ProxyConfig} to be used.

File: core/src/main/java/com/linecorp/armeria/client/DnsCacheBuilder.java
Patch:
@@ -29,7 +29,6 @@
 import com.linecorp.armeria.common.util.ThreadFactories;
 
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.instrument.Metrics;
 
 /**
  * A builder for {@link DnsCache}.
@@ -43,7 +42,7 @@ public final class DnsCacheBuilder {
     static final DnsCache DEFAULT_CACHE = DnsCache.builder().build();
 
     private String cacheSpec = Flags.dnsCacheSpec();
-    private MeterRegistry meterRegistry = Metrics.globalRegistry;
+    private MeterRegistry meterRegistry = Flags.meterRegistry();
     private ScheduledExecutorService executor = DEFAULT_EXECUTOR;
     private int minTtl = 1;
     private int maxTtl = Integer.MAX_VALUE;
@@ -62,7 +61,7 @@ public DnsCacheBuilder cacheSpec(String cacheSpec) {
 
     /**
      * Sets the {@link MeterRegistry} that collects cache stats.
-     * If unspecified, {@link Metrics#globalRegistry} is used.
+     * If unspecified, {@link Flags#meterRegistry()} is used.
      */
     public DnsCacheBuilder meterRegistry(MeterRegistry meterRegistry) {
         this.meterRegistry = requireNonNull(meterRegistry, "meterRegistry");

File: core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java
Patch:
@@ -90,7 +90,6 @@
 import com.linecorp.armeria.server.logging.AccessLogWriter;
 
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.instrument.Metrics;
 import io.netty.channel.ChannelOption;
 import io.netty.channel.EventLoopGroup;
 import io.netty.handler.ssl.SslContext;
@@ -195,7 +194,7 @@ public final class ServerBuilder implements TlsSetters {
     private int proxyProtocolMaxTlvSize = PROXY_PROTOCOL_DEFAULT_MAX_TLV_SIZE;
     private Duration gracefulShutdownQuietPeriod = DEFAULT_GRACEFUL_SHUTDOWN_QUIET_PERIOD;
     private Duration gracefulShutdownTimeout = DEFAULT_GRACEFUL_SHUTDOWN_TIMEOUT;
-    private MeterRegistry meterRegistry = Metrics.globalRegistry;
+    private MeterRegistry meterRegistry = Flags.meterRegistry();
     private ServerErrorHandler errorHandler = ServerErrorHandler.ofDefault();
     private List<ClientAddressSource> clientAddressSources = ClientAddressSource.DEFAULT_SOURCES;
     private Predicate<? super InetAddress> clientAddressTrustedProxyFilter = address -> false;

File: spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/AbstractArmeriaAutoConfiguration.java
Patch:
@@ -33,6 +33,7 @@
 import com.google.common.collect.ImmutableList;
 
 import com.linecorp.armeria.common.DependencyInjector;
+import com.linecorp.armeria.common.Flags;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.metric.MeterIdPrefixFunction;
@@ -46,7 +47,6 @@
 import com.linecorp.armeria.spring.ArmeriaSettings.Port;
 
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.instrument.Metrics;
 
 /**
  * Abstract class for implementing ArmeriaAutoConfiguration of boot2-autoconfigure module
@@ -93,7 +93,7 @@ public Server armeriaServer(
         configureServerWithArmeriaSettings(serverBuilder, armeriaSettings, internalService,
                                            armeriaServerConfigurators.orElse(ImmutableList.of()),
                                            armeriaServerBuilderConsumers.orElse(ImmutableList.of()),
-                                           meterRegistry.orElse(Metrics.globalRegistry),
+                                           meterRegistry.orElse(Flags.meterRegistry()),
                                            meterIdPrefixFunction.orElse(
                                                    MeterIdPrefixFunction.ofDefault("armeria.server")),
                                            metricCollectingServiceConfigurators.orElse(ImmutableList.of()),
@@ -133,7 +133,7 @@ public InternalServices internalServices(
             Optional<List<DocServiceConfigurator>> docServiceConfigurators,
             @Value("${management.server.port:#{null}}") @Nullable Integer managementServerPort) {
 
-        return InternalServices.of(settings, meterRegistry.orElse(Metrics.globalRegistry),
+        return InternalServices.of(settings, meterRegistry.orElse(Flags.meterRegistry()),
                                    healthCheckers.orElse(ImmutableList.of()),
                                    healthCheckServiceConfigurators.orElse(ImmutableList.of()),
                                    docServiceConfigurators.orElse(ImmutableList.of()), managementServerPort);

File: spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java
Patch:
@@ -54,6 +54,7 @@
 import com.google.common.primitives.Ints;
 
 import com.linecorp.armeria.common.DependencyInjector;
+import com.linecorp.armeria.common.Flags;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.SessionProtocol;
@@ -74,7 +75,6 @@
 import com.linecorp.armeria.spring.MetricCollectingServiceConfigurator;
 
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.instrument.Metrics;
 import io.netty.handler.ssl.ClientAuth;
 import reactor.core.Disposable;
 
@@ -159,7 +159,7 @@ public WebServer getWebServer(HttpHandler httpHandler) {
 
         if (armeriaSettings != null) {
             final MeterRegistry meterRegistry = firstNonNull(findBean(MeterRegistry.class),
-                                                             Metrics.globalRegistry);
+                                                             Flags.meterRegistry());
             configureServerWithArmeriaSettings(sb, armeriaSettings,
                                                newInternalServices(armeriaSettings, meterRegistry),
                                                findBeans(ArmeriaServerConfigurator.class),

File: core/src/main/java/com/linecorp/armeria/server/auth/AuthService.java
Patch:
@@ -123,6 +123,9 @@ private HttpResponse handleFailure(HttpService delegate,
                                        @Nullable Throwable cause) throws Exception {
         final AuthFailureHandler handler = authorizerFailureHandler == null ? defaultFailureHandler
                                                                             : authorizerFailureHandler;
+        if (cause != null) {
+            cause = Exceptions.peel(cause);
+        }
         return handler.authFailed(delegate, ctx, req, cause);
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerMapping.java
Patch:
@@ -28,7 +28,8 @@
  * Returns a {@link CircuitBreaker} instance from remote invocation parameters.
  */
 @FunctionalInterface
-public interface CircuitBreakerMapping {
+public interface CircuitBreakerMapping extends ClientCircuitBreakerGenerator<CircuitBreaker> {
+
     /**
      * Returns the default {@link CircuitBreakerMapping}.
      */
@@ -89,5 +90,6 @@ static CircuitBreakerMapping perHostAndMethod(
     /**
      * Returns the {@link CircuitBreaker} mapped to the given parameters.
      */
+    @Override
     CircuitBreaker get(ClientRequestContext ctx, Request req) throws Exception;
 }

File: core/src/main/java/com/linecorp/armeria/server/docs/DescriptiveTypeInfo.java
Patch:
@@ -23,10 +23,10 @@
 import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
- * Metadata about a named type.
+ * Metadata about a descriptive type.
  */
 @UnstableApi
-public interface NamedTypeInfo {
+public interface DescriptiveTypeInfo {
 
     /**
      * Returns the fully qualified type name.
@@ -43,7 +43,7 @@ public interface NamedTypeInfo {
     /**
      * Returns all enum, struct and exception types referred by this type.
      */
-    default Set<TypeSignature> findNamedTypes() {
+    default Set<DescriptiveTypeSignature> findDescriptiveTypes() {
         return ImmutableSet.of();
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/docs/DocServicePlugin.java
Patch:
@@ -53,11 +53,11 @@ public interface DocServicePlugin {
      *                       {@link #supportedServiceTypes()}
      * @param filter the {@link DocServiceFilter} that checks whether a method will be included while
      *               building {@link DocService}
-     * @param namedTypeInfoProvider the {@link NamedTypeInfoProvider} to create a {@link NamedTypeInfo} from
-     *                              a type descriptor.
+     * @param descriptiveTypeInfoProvider the {@link DescriptiveTypeInfoProvider} to create a
+     *                                    {@link DescriptiveTypeInfo} from a type descriptor.
      */
     ServiceSpecification generateSpecification(Set<ServiceConfig> serviceConfigs, DocServiceFilter filter,
-                                               NamedTypeInfoProvider namedTypeInfoProvider);
+                                               DescriptiveTypeInfoProvider descriptiveTypeInfoProvider);
 
     // Methods related with extracting documentation strings.
     // TODO(trustin): Define the docstring format.

File: core/src/main/java/com/linecorp/armeria/server/docs/DocStringSupport.java
Patch:
@@ -114,7 +114,7 @@ private ExceptionInfo addExceptionDocStrings(ExceptionInfo e) {
                 .withDescriptionInfo(descriptionInfo);
     }
 
-    private FieldInfo addFieldDocString(NamedTypeInfo parent, FieldInfo field) {
+    private FieldInfo addFieldDocString(DescriptiveTypeInfo parent, FieldInfo field) {
         final DescriptionInfo descriptionInfo =
                 findDescription(parent.name() + '/' + field.name(), field.descriptionInfo());
         return field.withDescriptionInfo(descriptionInfo);

File: core/src/main/java/com/linecorp/armeria/server/docs/EnumInfo.java
Patch:
@@ -35,7 +35,7 @@
  * Metadata about an enum type.
  */
 @UnstableApi
-public final class EnumInfo implements NamedTypeInfo {
+public final class EnumInfo implements DescriptiveTypeInfo {
 
     private final String name;
     private final List<EnumValueInfo> values;

File: core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedDocServicePluginTest.java
Patch:
@@ -142,12 +142,12 @@ void testToTypeSignature() throws Exception {
                 toTypeSignature(FieldContainer.class.getDeclaredField("biFunction").getGenericType());
         assertThat(biFunction).isEqualTo(TypeSignature.ofContainer(
                 "BiFunction",
-                TypeSignature.ofNamed(JsonNode.class),
+                TypeSignature.ofStruct(JsonNode.class),
                 TypeSignature.ofUnresolved(""),
                 TypeSignature.ofBase("string")));
 
         assertThat(toTypeSignature(FieldContainer.class)).isEqualTo(
-                TypeSignature.ofNamed(FieldContainer.class));
+                TypeSignature.ofStruct(FieldContainer.class));
         final TypeSignature optional =
                 toTypeSignature(FieldContainer.class.getDeclaredField("optional").getGenericType());
         assertThat(optional).isEqualTo(TypeSignature.ofOptional(TypeSignature.ofBase("string")));

File: core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceFactoryTest.java
Patch:
@@ -98,7 +98,7 @@ void testCreateAnnotatedServiceElementWithoutExplicitPathOnMethod() {
 
         final List<Route> actualRoutes = getMethods(ServiceObjectWithoutPathOnAnnotatedMethod.class,
                                                     HttpResponse.class)
-                .map(method -> create("/", serviceObject, method, /* useBlockingTaskExecutor */ false,
+                .map(method -> create("/", serviceObject, method, 0, false,
                                       ImmutableList.of(), ImmutableList.of(), ImmutableList.of(),
                                       noopDependencyInjector, null))
                 .flatMap(Collection::stream)
@@ -188,7 +188,7 @@ void testMultiPathFailingService() {
         final MultiPathFailingService serviceObject = new MultiPathFailingService();
         getMethods(MultiPathFailingService.class, HttpResponse.class).forEach(method -> {
             assertThatThrownBy(() -> {
-                create("/", serviceObject, method, /* useBlockingTaskExecutor */ false,
+                create("/", serviceObject, method, 0, false,
                        ImmutableList.of(), ImmutableList.of(), ImmutableList.of(),
                        noopDependencyInjector, null);
             }, method.getName()).isInstanceOf(IllegalArgumentException.class);
@@ -228,7 +228,7 @@ private static List<AnnotatedServiceElement> getServiceElements(
                 .filter(method -> method.getName().equals(methodName)).flatMap(
                         method -> {
                             final List<AnnotatedServiceElement> AnnotatedServices = create(
-                                    "/", service, method, /* useBlockingTaskExecutor */ false,
+                                    "/", service, method, 0, false,
                                     ImmutableList.of(), ImmutableList.of(), ImmutableList.of(),
                                     noopDependencyInjector, null);
                             return AnnotatedServices.stream();

File: core/src/test/java/com/linecorp/armeria/server/docs/ServiceInfoTest.java
Patch:
@@ -36,8 +36,8 @@ private static MethodInfo createMethodInfo(String methodName, HttpMethod method,
                                                String endpointPathMapping) {
         final EndpointInfo endpoint = EndpointInfo.builder("*", endpointPathMapping)
                 .availableMimeTypes(MediaType.JSON_UTF_8).build();
-        return new MethodInfo(methodName, TypeSignature.ofBase("T"), ImmutableList.of(), ImmutableList.of(),
-                              ImmutableList.of(endpoint), method, DescriptionInfo.empty());
+        return new MethodInfo("", methodName, 0, TypeSignature.ofBase("T"), ImmutableList.of(),
+                              ImmutableList.of(), ImmutableList.of(endpoint), method, DescriptionInfo.empty());
     }
 
     @Test

File: core/src/test/java/com/linecorp/armeria/server/docs/TypeSignatureJsonSerializerTest.java
Patch:
@@ -36,7 +36,7 @@ public void base() {
 
     @Test
     public void named() {
-        assertThat((Object) mapper.valueToTree(TypeSignature.ofNamed(URI.class)))
+        assertThat((Object) mapper.valueToTree(TypeSignature.ofStruct(URI.class)))
                 .isEqualTo(JsonNodeFactory.instance.textNode("java.net.URI"));
     }
 

File: grpc/src/test/java/com/linecorp/armeria/internal/server/grpc/GrpcDocServiceTest.java
Patch:
@@ -64,7 +64,7 @@
 import com.linecorp.armeria.server.docs.ServiceSpecification;
 import com.linecorp.armeria.server.grpc.GrpcService;
 import com.linecorp.armeria.server.logging.LoggingService;
-import com.linecorp.armeria.server.protobuf.ProtobufNamedTypeInfoProvider;
+import com.linecorp.armeria.server.protobuf.ProtobufDescriptiveTypeInfoProvider;
 import com.linecorp.armeria.testing.junit5.server.ServerExtension;
 
 import io.grpc.MethodDescriptor;
@@ -190,7 +190,7 @@ void testOk() throws Exception {
                         DocServiceFilter.ofMethodName(TestServiceGrpc.SERVICE_NAME, "EmptyCall")));
 
         final JsonNode expectedJson = mapper.valueToTree(
-                new GrpcDocServicePlugin().generate(serviceInfos, new ProtobufNamedTypeInfoProvider()));
+                new GrpcDocServicePlugin().generate(serviceInfos, new ProtobufDescriptiveTypeInfoProvider()));
 
         // The specification generated by GrpcDocServicePlugin does not include the examples specified
         // when building a DocService, so we add them manually here.

File: thrift/thrift0.13/src/test/java/com/linecorp/armeria/internal/server/thrift/ThriftDocServiceTest.java
Patch:
@@ -173,7 +173,7 @@ public void testOk() throws Exception {
 
         final JsonNode expectedJson = mapper.valueToTree(
                 new ThriftDocServicePlugin().generate(entries, (plugin, service, method) -> true,
-                                                      new ThriftNamedTypeInfoProvider()));
+                                                      new ThriftDescriptiveTypeInfoProvider()));
 
         // The specification generated by ThriftDocServicePlugin does not include the examples specified
         // when building a DocService, so we add them manually here.

File: core/src/main/java/com/linecorp/armeria/internal/common/Http1ObjectEncoder.java
Patch:
@@ -416,7 +416,7 @@ public final void close() {
 
     @Override
     public final boolean isClosed() {
-        return closed;
+        return closed || !channel().isActive();
     }
 
     private static final class PendingWrites extends ArrayDeque<Entry<HttpObject, ChannelPromise>> {

File: core/src/main/java/com/linecorp/armeria/internal/common/Http2ObjectEncoder.java
Patch:
@@ -126,6 +126,6 @@ public final void close() {
 
     @Override
     public boolean isClosed() {
-        return closed;
+        return closed || !channel().isActive();
     }
 }

File: core/src/test/java/com/linecorp/armeria/server/logging/ContentPreviewingFailureTest.java
Patch:
@@ -88,9 +88,9 @@ void shouldCompleteLogWhenExceptionIsThrown(String path, int status) {
                 assertThat(log.responseCause()).isNull();
                 break;
             case "/http-status-exception-with-cause":
-                assertThat(log.requestCause())
-                        .isInstanceOf(RuntimeException.class)
-                        .hasMessage("with-status");
+                // The cause of HttpStatusException and HttpResponseException are only propagated to
+                // `log.responseCause()`.
+                assertThat(log.requestCause()).isNull();
                 assertThat(log.responseCause())
                         .isInstanceOf(RuntimeException.class)
                         .hasMessage("with-status");

File: core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java
Patch:
@@ -29,6 +29,7 @@
 import com.linecorp.armeria.common.HttpObject;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.RequestHeaders;
+import com.linecorp.armeria.common.ResponseCompleteException;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.logging.RequestLogProperty;
@@ -319,7 +320,7 @@ private void close(@Nullable Throwable cause, boolean cancel) {
             cancelTimeoutOrLog(cause, cancel);
             if (ctx != null) {
                 if (cause == null) {
-                    ctx.request().abort();
+                    ctx.request().abort(ResponseCompleteException.get());
                 } else {
                     ctx.request().abort(cause);
                 }

File: core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java
Patch:
@@ -40,6 +40,7 @@
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.RequestContext;
 import com.linecorp.armeria.common.RequestHeaders;
+import com.linecorp.armeria.common.ResponseCompleteException;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;
@@ -1049,7 +1050,7 @@ private void endRequest0(@Nullable Throwable requestCause, long requestEndTimeNa
         if (requestCause instanceof HttpStatusException || requestCause instanceof HttpResponseException) {
             // Log the requestCause only when an Http{Status,Response}Exception was created with a cause.
             this.requestCause = requestCause.getCause();
-        } else {
+        } else if (!(requestCause instanceof ResponseCompleteException)) {
             this.requestCause = requestCause;
         }
         updateFlags(flags);

File: core/src/main/java/com/linecorp/armeria/common/stream/FilteredStreamMessage.java
Patch:
@@ -139,7 +139,7 @@ public CompletableFuture<List<U>> collect(EventExecutor executor, SubscriptionOp
         final SubscriptionOption[] filterOptions = filterSupportsPooledObjects ? POOLED_OBJECTS : EMPTY_OPTIONS;
         return upstream.collect(executor, filterOptions).handle((result, cause) -> {
             // CollectingSubscriberAndSubscription just captures cancel(), onComplete(), and onError() signals
-            // from the sub class of FilteredStreamMessage. So we need to follow regular Reactive Streams
+            // from the subclass of FilteredStreamMessage. So we need to follow regular Reactive Streams
             // specifications.
             final CollectingSubscriberAndSubscription<U> subscriberAndSubscription =
                     new CollectingSubscriberAndSubscription<>();

File: core/src/main/java/com/linecorp/armeria/server/AggregatedHttpResponseHandler.java
Patch:
@@ -80,7 +80,6 @@ private void apply0(@Nullable AggregatedHttpResponse response, @Nullable Throwab
 
         logBuilder().startResponse();
         write(response, null);
-        return;
     }
 
     private void write(AggregatedHttpResponse response, @Nullable Throwable cause) {

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -47,6 +47,7 @@
 import com.linecorp.armeria.common.ProtocolViolationException;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.RequestId;
+import com.linecorp.armeria.common.ResponseCompleteException;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.ResponseHeadersBuilder;
 import com.linecorp.armeria.common.SessionProtocol;
@@ -412,7 +413,7 @@ private void handleRequest(ChannelHandlerContext ctx, DecodedHttpRequest req) th
             res.whenComplete().handleAsync((ret, cause) -> {
                 try {
                     if (cause == null) {
-                        req.abort();
+                        req.abort(ResponseCompleteException.get());
                     } else {
                         req.abort(cause);
                     }

File: core/src/test/java/com/linecorp/armeria/internal/common/metric/RequestMetricSupportTest.java
Patch:
@@ -214,9 +214,9 @@ void writeTimedOutInClientSide() {
                                "service=none}", 1.0)
                 .containsEntry("foo.timeouts#count{cause=ResponseTimeoutException," +
                                "http.status=0,method=POST,service=none}", 0.0)
-                .containsEntry("foo.response.duration#count{http.status=0,method=POST,service=none}", 0.0)
-                .containsEntry("foo.response.length#count{http.status=0,method=POST,service=none}", 0.0)
-                .containsEntry("foo.total.duration#count{http.status=0,method=POST,service=none}", 0.0);
+                .containsEntry("foo.response.duration#count{http.status=0,method=POST,service=none}", 1.0)
+                .containsEntry("foo.response.length#count{http.status=0,method=POST,service=none}", 1.0)
+                .containsEntry("foo.total.duration#count{http.status=0,method=POST,service=none}", 1.0);
     }
 
     private static ClientRequestContext setupClientRequestCtx(MeterRegistry registry) {

File: core/src/test/java/com/linecorp/armeria/server/logging/ContentPreviewingServiceTest.java
Patch:
@@ -138,14 +138,14 @@ protected void configure(ServerBuilder sb) throws Exception {
 
             sb.service("/deferred", httpService);
             sb.decorator("/deferred", ContentPreviewingService.newDecorator(100));
-            sb.decorator("/deferred", ((delegate, ctx, req) -> HttpResponse.from(
+            sb.decorator("/deferred", (delegate, ctx, req) -> HttpResponse.from(
                     completedFuture(null).handleAsync((ignored, cause) -> {
                         try {
                             return delegate.serve(ctx, req);
                         } catch (Exception e) {
                             return Exceptions.throwUnsafely(e);
                         }
-                    }, ctx.eventLoop()))));
+                    }, ctx.eventLoop())));
 
             sb.service("/failingRequestPreviewSanitizer", httpService);
             sb.decorator("/failingRequestPreviewSanitizer",

File: graphql/src/main/java/com/linecorp/armeria/server/graphql/GraphqlService.java
Patch:
@@ -41,6 +41,6 @@ static GraphqlServiceBuilder builder() {
      * Returns a new {@link GraphqlService}.
      */
     static GraphqlService of(GraphQL graphQL) {
-        return new DefaultGraphqlService(graphQL, new DataLoaderRegistry(), false);
+        return new DefaultGraphqlService(graphQL, new DataLoaderRegistry(), false, GraphqlErrorHandler.of());
     }
 }

File: spring/boot2-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaSslConfigurationTest.java
Patch:
@@ -55,8 +55,7 @@
 public class ArmeriaSslConfigurationTest {
 
     @SpringBootApplication
-    static class TestConfiguration {
-    }
+    static class TestConfiguration {}
 
     private static final ClientFactory clientFactory =
             ClientFactory.builder()

File: spring/boot2-autoconfigure/src/test/java/com/linecorp/armeria/spring/RetryableArmeriaServerGracefulShutdownLifecycle.java
Patch:
@@ -32,7 +32,7 @@
  * A {@link SmartLifecycle} which retries to start the {@link Server} up to {@code maxAttempts}.
  * This is useful for testing that needs to bind a server to a random port number obtained in advance.
  */
-final class RetryableArmeriaServerGracefulShutdownLifecycle implements ArmeriaServerSmartLifecycle {
+public final class RetryableArmeriaServerGracefulShutdownLifecycle implements ArmeriaServerSmartLifecycle {
 
     private static final Logger logger =
             LoggerFactory.getLogger(RetryableArmeriaServerGracefulShutdownLifecycle.class);
@@ -41,7 +41,7 @@ final class RetryableArmeriaServerGracefulShutdownLifecycle implements ArmeriaSe
     private final int maxAttempts;
     private final Backoff backoff;
 
-    RetryableArmeriaServerGracefulShutdownLifecycle(Server server, int maxAttempts) {
+    public RetryableArmeriaServerGracefulShutdownLifecycle(Server server, int maxAttempts) {
         delegate = new ArmeriaServerGracefulShutdownLifecycle(server);
         this.maxAttempts = maxAttempts;
         backoff = Backoff.ofDefault();

File: spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactoryAutoConfiguration.java
Patch:
@@ -19,6 +19,7 @@
 import org.springframework.boot.autoconfigure.AutoConfigureOrder;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.boot.autoconfigure.web.ServerProperties;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
@@ -46,6 +47,7 @@ public class ArmeriaReactiveWebServerFactoryAutoConfiguration {
      * Returns a new {@link ArmeriaReactiveWebServerFactory} bean instance.
      */
     @Bean
+    @ConditionalOnMissingBean(ArmeriaReactiveWebServerFactory.class)
     public ArmeriaReactiveWebServerFactory armeriaReactiveWebServerFactory(
             ConfigurableListableBeanFactory beanFactory, Environment environment) {
         return new ArmeriaReactiveWebServerFactory(beanFactory, environment);

File: spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/ArmeriaConfigurationUtil.java
Patch:
@@ -195,7 +195,7 @@ public static void configureServerWithArmeriaSettings(
         dependencyInjectors.forEach(injector -> {
             server.dependencyInjector(injector, false); // The injector is closed by Spring.
         });
-        if (settings.enableAutoInjection()) {
+        if (settings.isEnableAutoInjection()) {
             server.dependencyInjector(SpringDependencyInjector.of(beanFactory), false);
         }
     }

File: spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java
Patch:
@@ -1046,7 +1046,7 @@ public void setVerboseResponses(@Nullable Boolean verboseResponses) {
     /**
      * Returns whether to apply {@link SpringDependencyInjector} automatically.
      */
-    public boolean enableAutoInjection() {
+    public boolean isEnableAutoInjection() {
         return enableAutoInjection;
     }
 

File: graphql-protocol/src/test/java/com/linecorp/armeria/server/graphql/protocol/AbstractGraphqlServiceTest.java
Patch:
@@ -88,7 +88,7 @@ void defaultContentType() throws Exception {
         final HttpRequest request = HttpRequest.of(HttpMethod.GET, "/graphql?" + query.toQueryString());
         final ServiceRequestContext ctx = ServiceRequestContext.of(request);
         testGraphqlService.serve(ctx, request);
-        assertThat(testGraphqlService.produceType).isEqualTo(MediaType.GRAPHQL_JSON);
+        assertThat(testGraphqlService.produceType).isEqualTo(MediaType.JSON);
     }
 
     @ArgumentsSource(MediaTypeProvider.class)

File: graphql/src/main/java/com/linecorp/armeria/server/graphql/DefaultGraphqlService.java
Patch:
@@ -65,8 +65,8 @@ protected HttpResponse executeGraphql(ServiceRequestContext ctx, GraphqlRequest
         final MediaType produceType = GraphqlUtil.produceType(ctx.request().headers());
         if (produceType == null) {
             return HttpResponse.of(HttpStatus.NOT_ACCEPTABLE, MediaType.PLAIN_TEXT,
-                                   "Only application/graphql+json and application/json compatible " +
-                                   "media types are acceptable");
+                                   "Only %s and %s compatible media types are acceptable",
+                                   MediaType.GRAPHQL_RESPONSE_JSON, MediaType.JSON);
         }
 
         final ExecutionInput.Builder builder = ExecutionInput.newExecutionInput(req.query());

File: core/src/main/java/com/linecorp/armeria/client/endpoint/WeightRampingUpStrategy.java
Patch:
@@ -74,6 +74,8 @@
 final class WeightRampingUpStrategy implements EndpointSelectionStrategy {
 
     private static final Ticker defaultTicker = Ticker.systemTicker();
+    private static final WeightedRandomDistributionEndpointSelector EMPTY_SELECTOR =
+            new WeightedRandomDistributionEndpointSelector(ImmutableList.of());
 
     static final WeightRampingUpStrategy INSTANCE =
             new WeightRampingUpStrategy(defaultTransition, () -> CommonPools.workerGroup().next(),
@@ -121,7 +123,7 @@ public EndpointSelector newSelector(EndpointGroup endpointGroup) {
     final class RampingUpEndpointWeightSelector extends AbstractEndpointSelector {
 
         private final EventExecutor executor;
-        private volatile WeightedRandomDistributionEndpointSelector endpointSelector;
+        private volatile WeightedRandomDistributionEndpointSelector endpointSelector = EMPTY_SELECTOR;
 
         private final List<Endpoint> endpointsFinishedRampingUp = new ArrayList<>();
 

File: core/src/test/java/com/linecorp/armeria/server/docs/MethodInfoTest.java
Patch:
@@ -35,7 +35,7 @@ private static MethodInfo newMethodInfo(List<String> examplePaths, List<String>
                               /* endpoints */ ImmutableList.of(), /* exampleHeaders */ ImmutableList.of(),
                               /* exampleRequests */ ImmutableList.of(),
                               examplePaths, exampleQueries,
-                              HttpMethod.GET, null);
+                              HttpMethod.GET, DescriptionInfo.empty());
     }
 
     @Test

File: core/src/test/java/com/linecorp/armeria/server/docs/ServiceInfoTest.java
Patch:
@@ -37,7 +37,7 @@ private static MethodInfo createMethodInfo(String methodName, HttpMethod method,
         final EndpointInfo endpoint = EndpointInfo.builder("*", endpointPathMapping)
                 .availableMimeTypes(MediaType.JSON_UTF_8).build();
         return new MethodInfo(methodName, TypeSignature.ofBase("T"), ImmutableList.of(), ImmutableList.of(),
-                              ImmutableList.of(endpoint), method, null);
+                              ImmutableList.of(endpoint), method, DescriptionInfo.empty());
     }
 
     @Test

File: protobuf/src/main/java/com/linecorp/armeria/server/protobuf/ProtobufRequestConverterFunction.java
Patch:
@@ -231,7 +231,7 @@ static boolean isJson(@Nullable MediaType contentType) {
         return contentType != null && contentType.isJson();
     }
 
-    private static Message.Builder getMessageBuilder(Class<?> clazz) {
+    static Message.Builder getMessageBuilder(Class<?> clazz) {
         final MethodHandle methodHandle = methodCache.get(clazz);
         if (methodHandle == unknownMethodHandle) {
             throw new IllegalStateException("Failed to find a static newBuilder() method from " + clazz);

File: protobuf/src/main/java/com/linecorp/armeria/server/protobuf/ProtobufRequestConverterFunctionProvider.java
Patch:
@@ -82,7 +82,7 @@ static ResultType toResultType(Type type) {
         return ResultType.UNKNOWN;
     }
 
-    private static boolean isProtobufMessage(Class<?> clazz) {
+    static boolean isProtobufMessage(Class<?> clazz) {
         return Message.class.isAssignableFrom(clazz);
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/DynamicEndpointGroup.java
Patch:
@@ -343,6 +343,9 @@ public String toString() {
         return toStringHelper().toString();
     }
 
+    /**
+     * Returns {@link ToStringHelper} that contains fields information.
+     */
     protected ToStringHelper toStringHelper() {
         return MoreObjects.toStringHelper(this)
                           .omitNullValues()

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroup.java
Patch:
@@ -335,6 +335,9 @@ public String toString() {
                           .add("numCandidates", delegateEndpoints.size())
                           .add("selectionStrategy", selectionStrategy().getClass())
                           .add("initialized", whenReady().isDone())
+                          .add("initialSelectionTimeoutMillis", initialSelectionTimeoutMillis)
+                          .add("selectionTimeoutMillis", selectionTimeoutMillis)
+                          .add("contextGroupChain", contextGroupChain)
                           .toString();
     }
 }

File: spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/AbstractArmeriaAutoConfiguration.java
Patch:
@@ -107,6 +107,7 @@ public Server armeriaServer(
      * Wrap {@link Server} with {@link SmartLifecycle}.
      */
     @Bean
+    @ConditionalOnMissingBean(SmartLifecycle.class)
     public SmartLifecycle armeriaServerGracefulShutdownLifecycle(Server server) {
         return new ArmeriaServerGracefulShutdownLifecycle(server);
     }

File: core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessageAndWriter.java
Patch:
@@ -26,7 +26,7 @@
 import com.linecorp.armeria.internal.common.stream.AbortingSubscriber;
 import com.linecorp.armeria.internal.common.stream.StreamMessageUtil;
 
-abstract class AbstractStreamMessageAndWriter<T> extends AbstractStreamMessage<T>
+abstract class AbstractStreamMessageAndWriter<T> extends CancellableStreamMessage<T>
         implements StreamMessageAndWriter<T> {
 
     enum State {

File: core/src/main/java/com/linecorp/armeria/common/stream/FilteredStreamMessage.java
Patch:
@@ -48,7 +48,7 @@
  * will happen from an I/O thread, meaning the order of the filtering will match the
  * order that the {@code delegate} processes the objects in.
  */
-public abstract class FilteredStreamMessage<T, U> implements StreamMessage<U> {
+public abstract class FilteredStreamMessage<T, U> extends AggregationSupport implements StreamMessage<U> {
 
     private static final Logger logger = LoggerFactory.getLogger(FilteredStreamMessage.class);
 

File: core/src/main/java/com/linecorp/armeria/common/stream/PublisherBasedStreamMessage.java
Patch:
@@ -58,7 +58,7 @@
  * @param <T> the type of element signaled
  */
 @UnstableApi
-public class PublisherBasedStreamMessage<T> implements StreamMessage<T> {
+public class PublisherBasedStreamMessage<T> extends AggregationSupport implements StreamMessage<T> {
 
     private static final Logger logger = LoggerFactory.getLogger(PublisherBasedStreamMessage.class);
 

File: core/src/main/java/com/linecorp/armeria/common/stream/StreamMessageWrapper.java
Patch:
@@ -31,7 +31,7 @@
  * Wraps a {@link StreamMessage} and forwards its method invocations to {@code delegate}.
  * @param <T> the type of elements
  */
-public class StreamMessageWrapper<T> implements StreamMessage<T> {
+public class StreamMessageWrapper<T> extends AggregationSupport implements StreamMessage<T> {
 
     private final StreamMessage<? extends T> delegate;
 

File: core/src/main/java/com/linecorp/armeria/internal/common/AbstractSplitHttpMessage.java
Patch:
@@ -29,14 +29,16 @@
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpMessage;
 import com.linecorp.armeria.common.SplitHttpMessage;
+import com.linecorp.armeria.common.stream.AggregationSupport;
 import com.linecorp.armeria.common.stream.ByteStreamMessage;
 import com.linecorp.armeria.common.stream.StreamMessage;
 import com.linecorp.armeria.common.stream.SubscriptionOption;
 import com.linecorp.armeria.internal.common.stream.NoopSubscription;
 
 import io.netty.util.concurrent.EventExecutor;
 
-abstract class AbstractSplitHttpMessage implements SplitHttpMessage, StreamMessage<HttpData> {
+abstract class AbstractSplitHttpMessage extends AggregationSupport
+        implements StreamMessage<HttpData>, SplitHttpMessage {
 
     private static final AtomicIntegerFieldUpdater<AbstractSplitHttpMessage> subscribedUpdater =
             AtomicIntegerFieldUpdater.newUpdater(AbstractSplitHttpMessage.class, "subscribed");

File: core/src/main/java/com/linecorp/armeria/internal/common/stream/AbortedStreamMessage.java
Patch:
@@ -24,13 +24,14 @@
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 
+import com.linecorp.armeria.common.stream.AggregationSupport;
 import com.linecorp.armeria.common.stream.StreamMessage;
 import com.linecorp.armeria.common.stream.SubscriptionOption;
 import com.linecorp.armeria.common.util.EventLoopCheckingFuture;
 
 import io.netty.util.concurrent.EventExecutor;
 
-public class AbortedStreamMessage<T> implements StreamMessage<T>, Subscription {
+public class AbortedStreamMessage<T> extends AggregationSupport implements StreamMessage<T>, Subscription {
 
     @SuppressWarnings("rawtypes")
     private static final AtomicIntegerFieldUpdater<AbortedStreamMessage> subscribedUpdater =

File: core/src/main/java/com/linecorp/armeria/internal/common/stream/FixedStreamMessage.java
Patch:
@@ -33,6 +33,7 @@
 
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.stream.AbortedStreamException;
+import com.linecorp.armeria.common.stream.AggregationSupport;
 import com.linecorp.armeria.common.stream.CancelledSubscriptionException;
 import com.linecorp.armeria.common.stream.StreamMessage;
 import com.linecorp.armeria.common.stream.SubscriptionOption;
@@ -45,7 +46,8 @@
 /**
  * A {@link StreamMessage} which only publishes a fixed number of objects known at construction time.
  */
-public abstract class FixedStreamMessage<T> implements StreamMessage<T>, Subscription {
+public abstract class FixedStreamMessage<T> extends AggregationSupport
+        implements StreamMessage<T>, Subscription {
 
     private static final Logger logger = LoggerFactory.getLogger(FixedStreamMessage.class);
 

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java
Patch:
@@ -53,6 +53,7 @@
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.common.util.UnmodifiableFuture;
+import com.linecorp.armeria.internal.server.FileAggregatedMultipart;
 import com.linecorp.armeria.internal.server.annotation.AnnotatedValueResolver.AggregatedResult;
 import com.linecorp.armeria.internal.server.annotation.AnnotatedValueResolver.AggregationStrategy;
 import com.linecorp.armeria.internal.server.annotation.AnnotatedValueResolver.AggregationType;

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java
Patch:
@@ -80,6 +80,7 @@
 import com.linecorp.armeria.common.multipart.Multipart;
 import com.linecorp.armeria.common.multipart.MultipartFile;
 import com.linecorp.armeria.common.util.Exceptions;
+import com.linecorp.armeria.internal.server.FileAggregatedMultipart;
 import com.linecorp.armeria.internal.server.annotation.AnnotatedBeanFactoryRegistry.BeanFactoryId;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.annotation.ByteArrayRequestConverterFunction;

File: graphql/src/test/java/com/linecorp/armeria/server/graphql/GraphqlServiceTest.java
Patch:
@@ -117,7 +117,7 @@ void shouldGetWithoutQuery() {
                                                                  .get("/graphql");
 
         assertThat(response.status()).isEqualTo(HttpStatus.BAD_REQUEST);
-        assertThat(response.contentUtf8()).isEqualTo("Missing query");
+        assertThat(response.contentUtf8()).isEqualTo("query is missing");
     }
 
     @Test

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/ResponseConverterFunctionUtil.java
Patch:
@@ -71,7 +71,7 @@ static ResponseConverterFunction newResponseConverter(Type returnType,
                                                           List<ResponseConverterFunction> responseConverters) {
         final List<ResponseConverterFunction> nonDelegatingSpiConverters =
                 responseConverterProviders.stream()
-                                          .map(provider -> provider.newResponseConverterFunction(returnType))
+                                          .map(provider -> provider.createResponseConverterFunction(returnType))
                                           .filter(Objects::nonNull)
                                           .collect(toImmutableList());
 

File: core/src/main/java/com/linecorp/armeria/server/annotation/ResponseConverterFunctionProvider.java
Patch:
@@ -37,5 +37,5 @@ public interface ResponseConverterFunctionProvider {
      * @param responseType the return {@link Type} of the annotated HTTP service method
      */
     @Nullable
-    ResponseConverterFunction newResponseConverterFunction(Type responseType);
+    ResponseConverterFunction createResponseConverterFunction(Type responseType);
 }

File: core/src/test/java/com/linecorp/armeria/internal/server/annotation/TestSpiConverterProvider.java
Patch:
@@ -34,7 +34,7 @@
 public final class TestSpiConverterProvider implements ResponseConverterFunctionProvider {
 
     @Override
-    public @Nullable ResponseConverterFunction newResponseConverterFunction(Type responseType) {
+    public @Nullable ResponseConverterFunction createResponseConverterFunction(Type responseType) {
         final Class<?> responseClass = ClassUtil.typeToClass(responseType);
         if (responseClass != null && TestClassWithNonDelegatingResponseConverterProvider.class.isAssignableFrom(
                 responseClass)) {

File: protobuf/src/main/java/com/linecorp/armeria/server/protobuf/ProtobufResponseConverterFunctionProvider.java
Patch:
@@ -38,7 +38,7 @@
 public final class ProtobufResponseConverterFunctionProvider implements ResponseConverterFunctionProvider {
 
     @Override
-    public ResponseConverterFunction newResponseConverterFunction(Type returnType) {
+    public ResponseConverterFunction createResponseConverterFunction(Type returnType) {
         if (isSupportedType(returnType)) {
             return new ProtobufResponseConverterFunction();
         }

File: core/src/main/java/com/linecorp/armeria/common/ThreadLocalRequestContextStorage.java
Patch:
@@ -46,7 +46,7 @@ public void pop(RequestContext current, @Nullable RequestContext toRestore) {
         requireNonNull(current, "current");
         final InternalThreadLocalMap map = InternalThreadLocalMap.get();
         final RequestContext contextInThreadLocal = context.get(map);
-        if (current != contextInThreadLocal) {
+        if (contextInThreadLocal == null || current.unwrapAll() != contextInThreadLocal.unwrapAll()) {
             throw newIllegalContextPoppingException(current, contextInThreadLocal);
         }
         context.set(map, toRestore);

File: core/src/main/java/com/linecorp/armeria/common/util/Samplers.java
Patch:
@@ -70,8 +70,10 @@ static <T> Sampler<T> of(String specification) {
         requireNonNull(specification, "specification");
         switch (specification.trim()) {
             case "always":
+            case "true":
                 return Sampler.always();
             case "never":
+            case "false":
                 return Sampler.never();
         }
 

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/HttpJsonTranscodingService.java
Patch:
@@ -557,8 +557,9 @@ private HttpResponse serve0(ServiceRequestContext ctx, HttpRequest req,
                                    "gRPC encoding is not supported for non-framed requests.");
         }
 
+        final MediaType jsonContentType = GrpcSerializationFormats.JSON.mediaType();
         grpcHeaders.method(HttpMethod.POST)
-                   .contentType(GrpcSerializationFormats.JSON.mediaType());
+                   .contentType(jsonContentType);
         // All clients support no encoding, and we don't support gRPC encoding for non-framed requests, so just
         // clear the header if it's present.
         grpcHeaders.remove(GrpcHeaderNames.GRPC_ACCEPT_ENCODING);
@@ -576,7 +577,7 @@ private HttpResponse serve0(ServiceRequestContext ctx, HttpRequest req,
                         ctx.setAttr(FramedGrpcService.RESOLVED_GRPC_METHOD, spec.method);
                         frameAndServe(unwrap(), ctx, grpcHeaders.build(),
                                       convertToJson(ctx, clientRequest, spec),
-                                      responseFuture, generateResponseBodyConverter(spec));
+                                      responseFuture, generateResponseBodyConverter(spec), jsonContentType);
                     } catch (IllegalArgumentException iae) {
                         responseFuture.completeExceptionally(
                                 HttpStatusException.of(HttpStatus.BAD_REQUEST, iae));

File: rxjava2/src/main/java/com/linecorp/armeria/internal/server/rxjava2/ObservableResponseConverterFunctionProvider.java
Patch:
@@ -22,8 +22,8 @@
 
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
+import com.linecorp.armeria.server.annotation.DelegatingResponseConverterFunctionProvider;
 import com.linecorp.armeria.server.annotation.ResponseConverterFunction;
-import com.linecorp.armeria.server.annotation.ResponseConverterFunctionProvider;
 import com.linecorp.armeria.server.rxjava2.ObservableResponseConverterFunction;
 
 import io.reactivex.Completable;
@@ -35,7 +35,8 @@
  * Provides an {@link ObservableResponseConverterFunction} to annotated services.
  */
 @UnstableApi
-public final class ObservableResponseConverterFunctionProvider implements ResponseConverterFunctionProvider {
+public final class ObservableResponseConverterFunctionProvider
+        implements DelegatingResponseConverterFunctionProvider {
 
     @Nullable
     @Override

File: rxjava3/src/main/java/com/linecorp/armeria/internal/server/rxjava3/ObservableResponseConverterFunctionProvider.java
Patch:
@@ -20,8 +20,8 @@
 
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
+import com.linecorp.armeria.server.annotation.DelegatingResponseConverterFunctionProvider;
 import com.linecorp.armeria.server.annotation.ResponseConverterFunction;
-import com.linecorp.armeria.server.annotation.ResponseConverterFunctionProvider;
 import com.linecorp.armeria.server.rxjava3.ObservableResponseConverterFunction;
 
 import io.reactivex.rxjava3.core.Completable;
@@ -33,7 +33,8 @@
  * Provides an {@link ObservableResponseConverterFunction} to annotated services.
  */
 @UnstableApi
-public final class ObservableResponseConverterFunctionProvider implements ResponseConverterFunctionProvider {
+public final class ObservableResponseConverterFunctionProvider
+        implements DelegatingResponseConverterFunctionProvider {
 
     @Nullable
     @Override

File: core/src/test/java/com/linecorp/armeria/client/endpoint/SelectionTimeoutTest.java
Patch:
@@ -273,8 +273,8 @@ void healthCheckedEndpointGroup_custom() {
 
     @Test
     void select_timeout() {
-        try (MockEndpointGroup endpointGroup = new MockEndpointGroup(2000)) {
-            final int expectedTimeout = 2000;
+        final int expectedTimeout = 3000;
+        try (MockEndpointGroup endpointGroup = new MockEndpointGroup(expectedTimeout)) {
             assertSelectionTimeout(endpointGroup).isEqualTo(expectedTimeout);
 
             final Stopwatch stopwatch = Stopwatch.createStarted();
@@ -283,7 +283,7 @@ void select_timeout() {
             assertThat(result.join()).isNull();
             assertThat(stopwatch.elapsed())
                     .isGreaterThanOrEqualTo(Duration.ofMillis(expectedTimeout))
-                    .isLessThan(Duration.ofMillis(expectedTimeout + 1000));
+                    .isLessThan(Duration.ofMillis(expectedTimeout + 2000));
         }
     }
 

File: core/src/main/java/com/linecorp/armeria/server/annotation/ByteArrayResponseConverterFunction.java
Patch:
@@ -17,7 +17,7 @@
 
 import static com.linecorp.armeria.internal.server.ResponseConversionUtil.streamingFrom;
 import static com.linecorp.armeria.internal.server.annotation.ClassUtil.typeToClass;
-import static com.linecorp.armeria.internal.server.annotation.ClassUtil.unwrapAsyncType;
+import static com.linecorp.armeria.internal.server.annotation.ClassUtil.unwrapUnaryAsyncType;
 
 import java.lang.reflect.Type;
 import java.util.stream.Stream;
@@ -47,7 +47,7 @@ public final class ByteArrayResponseConverterFunction implements ResponseConvert
 
     @Override
     public Boolean isResponseStreaming(Type returnType, @Nullable MediaType produceType) {
-        final Class<?> clazz = typeToClass(unwrapAsyncType(returnType));
+        final Class<?> clazz = typeToClass(unwrapUnaryAsyncType(returnType));
         if (clazz == null) {
             return null;
         }

File: core/src/main/java/com/linecorp/armeria/server/annotation/HttpFileResponseConverterFunction.java
Patch:
@@ -16,7 +16,7 @@
 package com.linecorp.armeria.server.annotation;
 
 import static com.linecorp.armeria.internal.server.annotation.ClassUtil.typeToClass;
-import static com.linecorp.armeria.internal.server.annotation.ClassUtil.unwrapAsyncType;
+import static com.linecorp.armeria.internal.server.annotation.ClassUtil.unwrapUnaryAsyncType;
 
 import java.lang.reflect.Type;
 
@@ -41,7 +41,7 @@ public final class HttpFileResponseConverterFunction implements ResponseConverte
 
     @Override
     public Boolean isResponseStreaming(Type returnType, @Nullable MediaType produceType) {
-        final Class<?> clazz = typeToClass(unwrapAsyncType(returnType));
+        final Class<?> clazz = typeToClass(unwrapUnaryAsyncType(returnType));
         if (clazz == null) {
             return null;
         }

File: core/src/main/java/com/linecorp/armeria/server/annotation/JacksonResponseConverterFunction.java
Patch:
@@ -17,7 +17,7 @@
 
 import static com.linecorp.armeria.internal.server.ResponseConversionUtil.aggregateFrom;
 import static com.linecorp.armeria.internal.server.annotation.ClassUtil.typeToClass;
-import static com.linecorp.armeria.internal.server.annotation.ClassUtil.unwrapAsyncType;
+import static com.linecorp.armeria.internal.server.annotation.ClassUtil.unwrapUnaryAsyncType;
 import static java.util.Objects.requireNonNull;
 
 import java.lang.reflect.Type;
@@ -73,7 +73,7 @@ public JacksonResponseConverterFunction(ObjectMapper mapper) {
 
     @Override
     public Boolean isResponseStreaming(Type returnType, @Nullable MediaType produceType) {
-        final Class<?> clazz = typeToClass(unwrapAsyncType(returnType));
+        final Class<?> clazz = typeToClass(unwrapUnaryAsyncType(returnType));
         if (clazz == null) {
             return null;
         }

File: core/src/main/java/com/linecorp/armeria/server/annotation/ServerSentEventResponseConverterFunction.java
Patch:
@@ -16,7 +16,7 @@
 package com.linecorp.armeria.server.annotation;
 
 import static com.linecorp.armeria.internal.server.annotation.ClassUtil.typeToClass;
-import static com.linecorp.armeria.internal.server.annotation.ClassUtil.unwrapAsyncType;
+import static com.linecorp.armeria.internal.server.annotation.ClassUtil.unwrapUnaryAsyncType;
 import static com.linecorp.armeria.server.streaming.ServerSentEvents.fromEvent;
 import static com.linecorp.armeria.server.streaming.ServerSentEvents.fromPublisher;
 import static com.linecorp.armeria.server.streaming.ServerSentEvents.fromStream;
@@ -44,7 +44,7 @@ public final class ServerSentEventResponseConverterFunction implements ResponseC
 
     @Override
     public Boolean isResponseStreaming(Type returnType, @Nullable MediaType contentType) {
-        final Class<?> clazz = typeToClass(unwrapAsyncType(returnType));
+        final Class<?> clazz = typeToClass(unwrapUnaryAsyncType(returnType));
         if (clazz == null) {
             return null;
         }

File: core/src/main/java/com/linecorp/armeria/server/annotation/StringResponseConverterFunction.java
Patch:
@@ -17,7 +17,7 @@
 
 import static com.linecorp.armeria.internal.server.ResponseConversionUtil.aggregateFrom;
 import static com.linecorp.armeria.internal.server.annotation.ClassUtil.typeToClass;
-import static com.linecorp.armeria.internal.server.annotation.ClassUtil.unwrapAsyncType;
+import static com.linecorp.armeria.internal.server.annotation.ClassUtil.unwrapUnaryAsyncType;
 
 import java.lang.reflect.Type;
 import java.nio.charset.Charset;
@@ -50,7 +50,7 @@ public Boolean isResponseStreaming(Type resultType, @Nullable MediaType contentT
         if (contentType != null && contentType.is(MediaType.ANY_TEXT_TYPE)) {
             return false;
         }
-        final Class<?> clazz = typeToClass(unwrapAsyncType(resultType));
+        final Class<?> clazz = typeToClass(unwrapUnaryAsyncType(resultType));
         if (clazz == null) {
             return null;
         }

File: core/src/test/java/com/linecorp/armeria/internal/server/annotation/ClassUtilTest.java
Patch:
@@ -49,7 +49,7 @@ void shouldCastTypeToClass() throws NoSuchMethodException {
     void shouldUnwrapAsyncType(String methodName) throws NoSuchMethodException {
         final Method method = ClassUtilTest.class.getDeclaredMethod(methodName);
         final Type returnType = method.getGenericReturnType();
-        final Type type = ClassUtil.unwrapAsyncType(returnType);
+        final Type type = ClassUtil.unwrapUnaryAsyncType(returnType);
         assertThat((Class<?>) type).isAssignableFrom(String.class);
     }
 

File: protobuf/src/main/java/com/linecorp/armeria/server/protobuf/ProtobufResponseConverterFunction.java
Patch:
@@ -19,7 +19,7 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.linecorp.armeria.internal.server.ResponseConversionUtil.aggregateFrom;
 import static com.linecorp.armeria.internal.server.annotation.ClassUtil.typeToClass;
-import static com.linecorp.armeria.internal.server.annotation.ClassUtil.unwrapAsyncType;
+import static com.linecorp.armeria.internal.server.annotation.ClassUtil.unwrapUnaryAsyncType;
 import static com.linecorp.armeria.server.protobuf.ProtobufRequestConverterFunction.isJson;
 import static com.linecorp.armeria.server.protobuf.ProtobufRequestConverterFunction.isProtobuf;
 import static java.util.Objects.requireNonNull;
@@ -147,7 +147,7 @@ public ProtobufResponseConverterFunction(Printer jsonPrinter) {
 
     @Override
     public Boolean isResponseStreaming(Type returnType, @Nullable MediaType produceType) {
-        final Class<?> clazz = typeToClass(unwrapAsyncType(returnType));
+        final Class<?> clazz = typeToClass(unwrapUnaryAsyncType(returnType));
         if (clazz == null) {
             return null;
         }

File: protobuf/src/main/java/com/linecorp/armeria/server/protobuf/ProtobufResponseConverterFunctionProvider.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.linecorp.armeria.server.protobuf;
 
-import static com.linecorp.armeria.internal.server.annotation.ClassUtil.unwrapAsyncType;
+import static com.linecorp.armeria.internal.server.annotation.ClassUtil.unwrapUnaryAsyncType;
 
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
@@ -52,7 +52,7 @@ public ResponseConverterFunction createResponseConverterFunction(
      * {@link ProtobufResponseConverterFunction}.
      */
     private static boolean isSupportedType(Type type) {
-        type = unwrapAsyncType(type);
+        type = unwrapUnaryAsyncType(type);
         if (type instanceof Class) {
             return MessageLite.class.isAssignableFrom((Class<?>) type);
         }

File: rxjava2/src/main/java/com/linecorp/armeria/server/rxjava2/ObservableResponseConverterFunction.java
Patch:
@@ -16,7 +16,7 @@
 package com.linecorp.armeria.server.rxjava2;
 
 import static com.linecorp.armeria.internal.server.annotation.ClassUtil.typeToClass;
-import static com.linecorp.armeria.internal.server.annotation.ClassUtil.unwrapAsyncType;
+import static com.linecorp.armeria.internal.server.annotation.ClassUtil.unwrapUnaryAsyncType;
 import static java.util.Objects.requireNonNull;
 
 import java.lang.reflect.Type;
@@ -81,7 +81,7 @@ public ObservableResponseConverterFunction(ResponseConverterFunction responseCon
 
     @Override
     public Boolean isResponseStreaming(Type returnType, @Nullable MediaType produceType) {
-        final Class<?> clazz = typeToClass(unwrapAsyncType(returnType));
+        final Class<?> clazz = typeToClass(unwrapUnaryAsyncType(returnType));
         if (clazz == null) {
             return null;
         }

File: rxjava3/src/main/java/com/linecorp/armeria/server/rxjava3/ObservableResponseConverterFunction.java
Patch:
@@ -16,7 +16,7 @@
 package com.linecorp.armeria.server.rxjava3;
 
 import static com.linecorp.armeria.internal.server.annotation.ClassUtil.typeToClass;
-import static com.linecorp.armeria.internal.server.annotation.ClassUtil.unwrapAsyncType;
+import static com.linecorp.armeria.internal.server.annotation.ClassUtil.unwrapUnaryAsyncType;
 import static java.util.Objects.requireNonNull;
 
 import java.lang.reflect.Type;
@@ -81,7 +81,7 @@ public ObservableResponseConverterFunction(ResponseConverterFunction responseCon
 
     @Override
     public Boolean isResponseStreaming(Type returnType, @Nullable MediaType produceType) {
-        final Class<?> clazz = typeToClass(unwrapAsyncType(returnType));
+        final Class<?> clazz = typeToClass(unwrapUnaryAsyncType(returnType));
         if (clazz == null) {
             return null;
         }

File: core/src/main/java/com/linecorp/armeria/server/AggregatingDecodedHttpRequest.java
Patch:
@@ -176,7 +176,7 @@ public void abortResponse(Throwable cause, boolean cancel) {
     }
 
     @Override
-    public boolean isAggregated() {
+    public boolean needsAggregation() {
         return true;
     }
 

File: core/src/main/java/com/linecorp/armeria/server/DecodedHttpRequest.java
Patch:
@@ -103,7 +103,7 @@ static DecodedHttpRequest of(boolean endOfStream, EventLoop eventLoop, int id, i
     /**
      * Returns whether the request should be fully aggregated before passed to the {@link HttpServerHandler}.
      */
-    boolean isAggregated();
+    boolean needsAggregation();
 
     /**
      * Returns the {@link ExchangeType} that determines whether to stream an {@link HttpRequest} or

File: core/src/main/java/com/linecorp/armeria/server/EmptyContentDecodedHttpRequest.java
Patch:
@@ -188,7 +188,7 @@ public void abortResponse(Throwable cause, boolean cancel) {
     }
 
     @Override
-    public boolean isAggregated() {
+    public boolean needsAggregation() {
         return false;
     }
 

File: core/src/main/java/com/linecorp/armeria/server/Http1RequestDecoder.java
Patch:
@@ -223,7 +223,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                                                            keepAlive, inboundTrafficController, routingCtx);
 
                     // An aggregating request will be fired after all objects are collected.
-                    if (!req.isAggregated()) {
+                    if (!req.needsAggregation()) {
                         ctx.fireChannelRead(req);
                     }
                 } else {
@@ -286,7 +286,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                     }
 
                     decodedReq.close();
-                    if (decodedReq.isAggregated()) {
+                    if (decodedReq.needsAggregation()) {
                         // An aggregated request is now ready to be fired.
                         ctx.fireChannelRead(decodedReq);
                     }

File: core/src/main/java/com/linecorp/armeria/server/StreamingDecodedHttpRequest.java
Patch:
@@ -189,7 +189,7 @@ public void abortResponse(Throwable cause, boolean cancel) {
     }
 
     @Override
-    public boolean isAggregated() {
+    public boolean needsAggregation() {
         return false;
     }
 

File: core/src/test/java/com/linecorp/armeria/client/Http1HeaderNamingTest.java
Patch:
@@ -139,7 +139,6 @@ void serverTraditionalHeaderNaming(boolean useHeaderNaming) throws IOException {
             boolean hasXForwardedFor = false;
             for (;;) {
                 final String line = reader.readLine();
-                System.out.println(line);
                 if (Strings.isNullOrEmpty(line)) {
                     break;
                 }

File: core/src/main/java/com/linecorp/armeria/server/Http2ServerConnectionHandler.java
Patch:
@@ -76,8 +76,8 @@ private static KeepAliveHandler newKeepAliveHandler(
         }
 
         return new Http2ServerKeepAliveHandler(
-                    channel, encoder.frameWriter(), keepAliveTimer, idleTimeoutMillis,
-                    pingIntervalMillis, maxConnectionAgeMillis, maxNumRequestsPerConnection);
+                channel, encoder.frameWriter(), keepAliveTimer, idleTimeoutMillis,
+                pingIntervalMillis, maxConnectionAgeMillis, maxNumRequestsPerConnection);
     }
 
     ServerHttp2ObjectEncoder getOrCreateResponseEncoder(ChannelHandlerContext connectionHandlerCtx) {

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilderTest.java
Patch:
@@ -281,7 +281,7 @@ void addServiceWithDecorators() {
                                                       .addService("/foo", secondTestService);
         final HandlerRegistry handlerRegistry = handlerRegistry(builder);
         final Map<ServerMethodDefinition<?, ?>, List<DecoratorAndOrder>> decorators =
-                handlerRegistry.decorators();
+                handlerRegistry.annotationDecorators();
 
         ServerMethodDefinition<?, ?> methodDefinition = handlerRegistry.methods().get(
                 "armeria.grpc.testing.TestService/UnaryCall");
@@ -319,7 +319,7 @@ void addServiceWithHierarchicalDecorators() {
                                                       .addService(thirdTestService);
         final HandlerRegistry handlerRegistry = handlerRegistry(builder);
         final Map<ServerMethodDefinition<?, ?>, List<DecoratorAndOrder>> decorators =
-                handlerRegistry.decorators();
+                handlerRegistry.annotationDecorators();
 
         ServerMethodDefinition<?, ?> methodDefinition = handlerRegistry.methods().get(
                 "armeria.grpc.testing.TestService/UnaryCall");
@@ -342,7 +342,7 @@ void addServiceWithInterceptorAndDecorators() {
                             impl -> ServerInterceptors.intercept(impl, new DummyInterceptor()));
         final HandlerRegistry handlerRegistry = handlerRegistry(builder);
         final Map<ServerMethodDefinition<?, ?>, List<DecoratorAndOrder>> decorators =
-                handlerRegistry.decorators();
+                handlerRegistry.annotationDecorators();
 
         final ServerMethodDefinition<?, ?> methodDefinition = handlerRegistry.methods().get(
                 "armeria.grpc.testing.TestService/UnaryCall");

File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContextBuilder.java
Patch:
@@ -33,6 +33,7 @@
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.logging.ClientConnectionTimings;
 import com.linecorp.armeria.common.util.SystemInfo;
+import com.linecorp.armeria.internal.client.DefaultClientRequestContext;
 import com.linecorp.armeria.internal.common.CancellationScheduler;
 import com.linecorp.armeria.internal.common.CancellationScheduler.CancellationTask;
 

File: core/src/main/java/com/linecorp/armeria/client/Clients.java
Patch:
@@ -32,6 +32,7 @@
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.common.util.Unwrappable;
+import com.linecorp.armeria.internal.client.ClientThreadLocalState;
 
 /**
  * Creates a new client that connects to a specified {@link URI}.

File: core/src/main/java/com/linecorp/armeria/client/UserClient.java
Patch:
@@ -40,6 +40,7 @@
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.AbstractUnwrappable;
 import com.linecorp.armeria.common.util.SystemInfo;
+import com.linecorp.armeria.internal.client.DefaultClientRequestContext;
 
 import io.micrometer.core.instrument.MeterRegistry;
 

File: core/src/main/java/com/linecorp/armeria/server/AbstractHttpResponseHandler.java
Patch:
@@ -31,6 +31,7 @@
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
 import com.linecorp.armeria.common.stream.ClosedStreamException;
 import com.linecorp.armeria.internal.common.CancellationScheduler.CancellationTask;
+import com.linecorp.armeria.internal.server.DefaultServiceRequestContext;
 
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelFuture;

File: core/src/main/java/com/linecorp/armeria/server/AggregatedHttpResponseHandler.java
Patch:
@@ -31,6 +31,7 @@
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.internal.common.Http1ObjectEncoder;
 import com.linecorp.armeria.internal.common.RequestContextUtil;
+import com.linecorp.armeria.internal.server.DefaultServiceRequestContext;
 import com.linecorp.armeria.unsafe.PooledObjects;
 
 import io.netty.channel.ChannelFuture;

File: core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java
Patch:
@@ -41,6 +41,7 @@
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.internal.common.Http1ObjectEncoder;
 import com.linecorp.armeria.internal.common.RequestContextUtil;
+import com.linecorp.armeria.internal.server.DefaultServiceRequestContext;
 import com.linecorp.armeria.unsafe.PooledObjects;
 
 import io.netty.channel.ChannelFuture;

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -61,6 +61,7 @@
 import com.linecorp.armeria.internal.common.Http1ObjectEncoder;
 import com.linecorp.armeria.internal.common.PathAndQuery;
 import com.linecorp.armeria.internal.common.RequestContextUtil;
+import com.linecorp.armeria.internal.server.DefaultServiceRequestContext;
 
 import io.netty.buffer.Unpooled;
 import io.netty.channel.Channel;

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContextBuilder.java
Patch:
@@ -43,6 +43,7 @@
 import com.linecorp.armeria.common.util.SystemInfo;
 import com.linecorp.armeria.internal.common.CancellationScheduler;
 import com.linecorp.armeria.internal.common.CancellationScheduler.CancellationTask;
+import com.linecorp.armeria.internal.server.DefaultServiceRequestContext;
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.netty.buffer.ByteBufAllocator;

File: core/src/test/java/com/linecorp/armeria/client/ClientRequestContextInitFailureTest.java
Patch:
@@ -28,6 +28,7 @@
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.util.SafeCloseable;
+import com.linecorp.armeria.internal.client.ClientThreadLocalState;
 
 class ClientRequestContextInitFailureTest {
     @Test

File: core/src/test/java/com/linecorp/armeria/common/DefaultConcurrentAttributesTest.java
Patch:
@@ -30,7 +30,7 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 
-import com.linecorp.armeria.server.DefaultServiceRequestContext;
+import com.linecorp.armeria.internal.server.DefaultServiceRequestContext;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 import io.netty.util.AttributeKey;

File: core/src/test/java/com/linecorp/armeria/server/DefaultServiceRequestContextTest.java
Patch:
@@ -30,6 +30,7 @@
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.util.TimeoutMode;
+import com.linecorp.armeria.internal.server.DefaultServiceRequestContext;
 
 class DefaultServiceRequestContextTest {
 

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaChannel.java
Patch:
@@ -26,7 +26,6 @@
 
 import com.linecorp.armeria.client.ClientBuilderParams;
 import com.linecorp.armeria.client.ClientOptions;
-import com.linecorp.armeria.client.DefaultClientRequestContext;
 import com.linecorp.armeria.client.HttpClient;
 import com.linecorp.armeria.client.RequestOptions;
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
@@ -45,6 +44,7 @@
 import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.common.util.SystemInfo;
 import com.linecorp.armeria.common.util.Unwrappable;
+import com.linecorp.armeria.internal.client.DefaultClientRequestContext;
 
 import io.grpc.CallCredentials;
 import io.grpc.CallOptions;

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java
Patch:
@@ -36,7 +36,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.linecorp.armeria.client.DefaultClientRequestContext;
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.client.HttpClient;
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
@@ -60,6 +59,7 @@
 import com.linecorp.armeria.common.stream.SubscriptionOption;
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.common.util.TimeoutMode;
+import com.linecorp.armeria.internal.client.DefaultClientRequestContext;
 import com.linecorp.armeria.internal.client.endpoint.StaticEndpointGroup;
 import com.linecorp.armeria.internal.client.grpc.protocol.InternalGrpcWebUtil;
 import com.linecorp.armeria.internal.common.grpc.ForwardingCompressor;

File: core/src/test/java/com/linecorp/armeria/server/file/HttpFileTest.java
Patch:
@@ -92,7 +92,7 @@ void createFromFileUrl(@TempDir Path tempDir) throws Exception {
     void createFromHttpUrl() throws Exception {
         final URL url = new URL("https://line.me");
         final String exMsg = "Unsupported URL: https://line.me " +
-            "(must start with 'file:', 'jar:file' or 'jrt:')";
+            "(must start with 'file:', 'jar:file', 'jrt:' or 'bundle:')";
         assertThatThrownBy(() -> HttpFile.builder(url)).isInstanceOf(IllegalArgumentException.class)
             .hasMessageContaining(exMsg);
     }
@@ -119,7 +119,7 @@ void createFromJarFileUrl() {
     void createFromJarHttpUrl() throws Exception {
         final URL jarHttpUrl = new URL("jar:http://www.foo.com/bar/baz.jar!/COM/foo/Quux.class");
         final String exMsg = "Unsupported URL: jar:http://www.foo.com/bar/baz.jar!/COM/foo/Quux.class " +
-            "(must start with 'file:', 'jar:file' or 'jrt:')";
+            "(must start with 'file:', 'jar:file', 'jrt:' or 'bundle:')";
         assertThatThrownBy(() -> HttpFile.builder(jarHttpUrl)).isInstanceOf(IllegalArgumentException.class)
             .hasMessageContaining(exMsg);
     }

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaChannel.java
Patch:
@@ -69,6 +69,9 @@ final class ArmeriaChannel extends Channel implements ClientBuilderParams, Unwra
     static {
         final EnumMap<MethodType, RequestOptions> requestOptionsMap = new EnumMap<>(MethodType.class);
         for (MethodType methodType : MethodType.values()) {
+            if (methodType == MethodType.UNKNOWN) {
+                continue;
+            }
             requestOptionsMap.put(methodType, newRequestOptions(toExchangeType(methodType)));
         }
         REQUEST_OPTIONS_MAP = Maps.immutableEnumMap(requestOptionsMap);

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -345,7 +345,7 @@ private void handleRequest(ChannelHandlerContext ctx, DecodedHttpRequest req) th
                 serviceCfg, channel, config.meterRegistry(), protocol,
                 nextRequestId(), routingCtx, routingResult, req.exchangeType(),
                 req, sslSession, proxiedAddresses, clientAddress,
-                System.nanoTime(), SystemInfo.currentTimeMicros());
+                req.requestStartTimeNanos(), req.requestStartTimeMicros());
 
         try (SafeCloseable ignored = reqCtx.push()) {
             final RequestLogBuilder logBuilder = reqCtx.logBuilder();

File: core/src/test/java/com/linecorp/armeria/server/EmptyContentDecodedHttpRequestTest.java
Patch:
@@ -38,7 +38,7 @@ void emptyContent() {
         final RequestHeaders headers = RequestHeaders.of(HttpMethod.GET, "/");
         final EmptyContentDecodedHttpRequest req =
                 new EmptyContentDecodedHttpRequest(eventLoop.get(), 1, 3, headers, true, null,
-                                                   ExchangeType.BIDI_STREAMING);
+                                                   ExchangeType.BIDI_STREAMING, 0, 0);
 
         StepVerifier.create(req)
                     .expectComplete()

File: core/src/test/java/com/linecorp/armeria/server/StreamingDecodedHttpRequestTest.java
Patch:
@@ -116,7 +116,7 @@ private static StreamingDecodedHttpRequest decodedHttpRequest(RequestHeaders hea
                 request = new StreamingDecodedHttpRequest(sctx.eventLoop(), 1, 1, headers, true,
                                                           InboundTrafficController.disabled(),
                                                           sctx.maxRequestLength(), sctx.routingContext(),
-                                                          ExchangeType.BIDI_STREAMING);
+                                                          ExchangeType.BIDI_STREAMING, 0, 0);
         request.init(sctx);
         return request;
     }

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/UnaryServerCallTest.java
Patch:
@@ -347,6 +347,7 @@ public void onHalfClose() {
             }
         });
         unaryCall.request(1);
+        unaryCall.startDeframing();
         await().untilTrue(completed);
 
         assertThat(requestCaptor).hasValue(GrpcTestUtil.REQUEST_MESSAGE);

File: core/src/main/java/com/linecorp/armeria/server/docs/DocServicePlugin.java
Patch:
@@ -62,7 +62,8 @@ public interface DocServicePlugin {
     // TODO(trustin): How do we specify the docstring of a method return value?
 
     /**
-     * Loads the documentation strings that describes services and their methods, enums and their values and
+     * Loads the {@link DescriptionInfo} that describes services and their methods, enums and their values and
+     * that describes services and their methods, enums and their values and
      * structs/exceptions and their fields. The {@link Map} returned by this method will contain the
      * documentation strings identified by the key strings that conforms to one of the following formats:
      * <ul>
@@ -75,7 +76,7 @@ public interface DocServicePlugin {
      *       an exception</li>
      * </ul>
      */
-    default Map<String, String> loadDocStrings(Set<ServiceConfig> serviceConfigs) {
+    default Map<String, DescriptionInfo> loadDocStrings(Set<ServiceConfig> serviceConfigs) {
         return ImmutableMap.of();
     }
 

File: core/src/main/java/com/linecorp/armeria/server/docs/NamedTypeInfo.java
Patch:
@@ -38,12 +38,12 @@ public interface NamedTypeInfo {
     String name();
 
     /**
-     * Returns the documentation string. If not available, an empty string is returned.
+     * Returns the description information. If not available, a null value is returned.
      */
     @JsonProperty
     @JsonInclude(Include.NON_NULL)
     @Nullable
-    String docString();
+    DescriptionInfo descriptionInfo();
 
     /**
      * Returns all enum, struct and exception types referred by this type.

File: graphql/src/main/java/com/linecorp/armeria/internal/server/graphql/GraphqlDocServicePlugin.java
Patch:
@@ -35,6 +35,7 @@
 import com.linecorp.armeria.server.Route;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceConfig;
+import com.linecorp.armeria.server.docs.DescriptionInfo;
 import com.linecorp.armeria.server.docs.DocServiceFilter;
 import com.linecorp.armeria.server.docs.DocServicePlugin;
 import com.linecorp.armeria.server.docs.EndpointInfo;
@@ -77,7 +78,7 @@ public ServiceSpecification generateSpecification(Set<ServiceConfig> serviceConf
         requireNonNull(filter, "filter");
 
         final Map<Class<?>, Set<MethodInfo>> methodInfos = new HashMap<>();
-        final Map<Class<?>, String> serviceDescription = new HashMap<>();
+        final Map<Class<?>, DescriptionInfo> serviceDescription = new HashMap<>();
         serviceConfigs.forEach(sc -> {
             final AbstractGraphqlService service = sc.service().as(AbstractGraphqlService.class);
             if (service != null) {
@@ -135,7 +136,7 @@ private static List<FieldInfo> fieldInfos() {
     }
 
     @VisibleForTesting
-    static ServiceSpecification generate(Map<Class<?>, String> serviceDescription,
+    static ServiceSpecification generate(Map<Class<?>, DescriptionInfo> serviceDescription,
                                          Map<Class<?>, Set<MethodInfo>> methodInfos) {
         final Set<ServiceInfo> serviceInfos = methodInfos
                 .entrySet().stream()

File: grpc/src/test/java/com/linecorp/armeria/internal/server/grpc/GrpcDocServicePluginTest.java
Patch:
@@ -272,7 +272,7 @@ void newMethodInfo() throws Exception {
         assertThat(methodInfo.parameters().get(0).typeSignature().namedTypeDescriptor())
                 .isEqualTo(SimpleRequest.getDescriptor());
         assertThat(methodInfo.exceptionTypeSignatures()).isEmpty();
-        assertThat(methodInfo.docString()).isNull();
+        assertThat(methodInfo.descriptionInfo()).isNull();
         assertThat(methodInfo.endpoints()).containsExactlyInAnyOrder(
                 EndpointInfo.builder("*", "/foo")
                             .availableFormats(GrpcSerializationFormats.PROTO)

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HttpHealthChecker.java
Patch:
@@ -297,7 +297,7 @@ private void updateHealth(@Nullable Throwable cause) {
                 pingCheckFuture.cancel(false);
             }
 
-            if (updatedHealth) {
+            if (closeable.isClosing() || updatedHealth) {
                 return;
             }
 

File: retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/AbstractSubscriber.java
Patch:
@@ -176,10 +176,9 @@ final void safeOnResponse(BufferedSource content) {
         callbackExecutor.execute(() -> {
             try {
                 callback.onResponse(armeriaCall, responseBuilder
-                        .body(ResponseBody.create(content,
-                                                  Strings.isNullOrEmpty(contentType) ?
+                        .body(ResponseBody.create(Strings.isNullOrEmpty(contentType) ?
                                                   null : MediaType.parse(contentType),
-                                                  contentLength))
+                                                  contentLength, content))
                         .build());
             } catch (IOException e) {
                 callback.onFailure(armeriaCall, e);

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceLogNameTest.java
Patch:
@@ -102,7 +102,7 @@ void logName() {
                            .build(TestServiceBlockingStub.class);
         client.emptyCall(Empty.newBuilder().build());
 
-        final RequestLog log = capturedCtx.log().partial();
+        final RequestLog log = capturedCtx.log().whenComplete().join();
         assertThat(log.serviceName()).isEqualTo(TestServiceGrpc.SERVICE_NAME);
         assertThat(log.name()).isEqualTo("EmptyCall");
         assertThat(log.fullName()).isEqualTo(TestServiceGrpc.getEmptyCallMethod().getFullMethodName());
@@ -115,7 +115,7 @@ void defaultNames() {
                            .build(TestServiceBlockingStub.class);
         client.emptyCall(Empty.newBuilder().build());
 
-        final RequestLog log = capturedCtx.log().partial();
+        final RequestLog log = capturedCtx.log().whenComplete().join();
         assertThat(log.serviceName()).isEqualTo("DefaultServiceName");
         assertThat(log.name()).isEqualTo("DefaultName");
         assertThat(log.fullName()).isEqualTo("DefaultServiceName/DefaultName");

File: brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java
Patch:
@@ -39,6 +39,7 @@
 import com.linecorp.armeria.common.util.SystemInfo;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerBuilder;
+import com.linecorp.armeria.server.logging.LoggingService;
 
 import brave.propagation.CurrentTraceContext;
 import brave.test.http.ITHttpServer;
@@ -109,6 +110,7 @@ protected void init() {
         sb.service("/badrequest", (ctx, req) -> HttpResponse.of(BAD_REQUEST));
 
         sb.decorator(BraveService.newDecorator(httpTracing));
+        sb.decorator(LoggingService.newDecorator());
 
         server = sb.build();
         server.start().join();

File: core/src/main/java/com/linecorp/armeria/internal/common/util/ObjectCollectingUtil.java
Patch:
@@ -45,7 +45,7 @@ public final class ObjectCollectingUtil {
      * <a href="https://projectreactor.io/">Project Reactor</a>.
      */
     @Nullable
-    private static final Class<?> MONO_CLASS;
+    public static final Class<?> MONO_CLASS;
 
     static {
         Class<?> mono = null;

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -614,11 +614,12 @@ private ServiceRequestContext newEarlyRespondingRequestContext(Channel channel,
                                                                    ProxiedAddresses proxiedAddresses,
                                                                    InetAddress clientAddress,
                                                                    RoutingContext routingCtx) {
+        final ServiceConfig serviceConfig = routingCtx.virtualHost().fallbackServiceConfig();
         final RoutingResult routingResult = RoutingResult.builder()
                                                          .path(routingCtx.path())
                                                          .build();
         return new DefaultServiceRequestContext(
-                routingCtx.virtualHost().fallbackServiceConfig(),
+                serviceConfig,
                 channel, NoopMeterRegistry.get(), protocol(),
                 nextRequestId(), routingCtx, routingResult, req.exchangeType(),
                 req, sslSession, proxiedAddresses, clientAddress,

File: core/src/main/java/com/linecorp/armeria/server/SimpleDecoratingHttpService.java
Patch:
@@ -19,7 +19,6 @@
 import com.linecorp.armeria.common.ExchangeType;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
-import com.linecorp.armeria.common.RequestHeaders;
 
 /**
  * An {@link HttpService} that decorates another {@link HttpService}.
@@ -37,7 +36,7 @@ protected SimpleDecoratingHttpService(HttpService delegate) {
     }
 
     @Override
-    public ExchangeType exchangeType(RequestHeaders headers, Route route) {
-        return ((HttpService) unwrap()).exchangeType(headers, route);
+    public ExchangeType exchangeType(RoutingContext routingContext) {
+        return ((HttpService) unwrap()).exchangeType(routingContext);
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/encoding/EncodingService.java
Patch:
@@ -25,7 +25,7 @@
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.server.HttpService;
-import com.linecorp.armeria.server.Route;
+import com.linecorp.armeria.server.RoutingContext;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.SimpleDecoratingHttpService;
 
@@ -73,7 +73,7 @@ public static Function<? super HttpService, EncodingService> newDecorator() {
     }
 
     @Override
-    public ExchangeType exchangeType(RequestHeaders headers, Route route) {
+    public ExchangeType exchangeType(RoutingContext routingContext) {
         // Avoid aggregation to preserve the compressed chunks.
         return ExchangeType.BIDI_STREAMING;
     }

File: core/src/main/java/com/linecorp/armeria/server/management/ThreadDumpService.java
Patch:
@@ -26,9 +26,8 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
-import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.server.HttpService;
-import com.linecorp.armeria.server.Route;
+import com.linecorp.armeria.server.RoutingContext;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 enum ThreadDumpService implements HttpService {
@@ -54,7 +53,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
     }
 
     @Override
-    public ExchangeType exchangeType(RequestHeaders headers, Route route) {
+    public ExchangeType exchangeType(RoutingContext routingContext) {
         return ExchangeType.UNARY;
     }
 }

File: core/src/test/java/com/linecorp/armeria/server/EmptyContentDecodedHttpRequestTest.java
Patch:
@@ -37,7 +37,7 @@ class EmptyContentDecodedHttpRequestTest {
     void emptyContent() {
         final RequestHeaders headers = RequestHeaders.of(HttpMethod.GET, "/");
         final EmptyContentDecodedHttpRequest req =
-                new EmptyContentDecodedHttpRequest(eventLoop.get(), 1, 3, headers, true, null, null,
+                new EmptyContentDecodedHttpRequest(eventLoop.get(), 1, 3, headers, true, null,
                                                    ExchangeType.BIDI_STREAMING);
 
         StepVerifier.create(req)

File: core/src/test/java/com/linecorp/armeria/server/StreamingDecodedHttpRequestTest.java
Patch:
@@ -111,10 +111,11 @@ private static StreamingDecodedHttpRequest decodedHttpRequest() {
 
     private static StreamingDecodedHttpRequest decodedHttpRequest(RequestHeaders headers,
                                                                   ServiceRequestContext sctx) {
+
         final StreamingDecodedHttpRequest
                 request = new StreamingDecodedHttpRequest(sctx.eventLoop(), 1, 1, headers, true,
                                                           InboundTrafficController.disabled(),
-                                                          sctx.maxRequestLength(), null, null,
+                                                          sctx.maxRequestLength(), sctx.routingContext(),
                                                           ExchangeType.BIDI_STREAMING);
         request.init(sctx);
         return request;

File: graphql-protocol/src/main/java/com/linecorp/armeria/server/graphql/protocol/AbstractGraphqlService.java
Patch:
@@ -30,15 +30,14 @@
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.QueryParams;
-import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.graphql.protocol.GraphqlRequest;
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.internal.common.JacksonUtil;
 import com.linecorp.armeria.server.AbstractHttpService;
 import com.linecorp.armeria.server.HttpResponseException;
-import com.linecorp.armeria.server.Route;
+import com.linecorp.armeria.server.RoutingContext;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 /**
@@ -152,7 +151,7 @@ protected HttpResponse doPost(ServiceRequestContext ctx, HttpRequest request) th
     }
 
     @Override
-    public ExchangeType exchangeType(RequestHeaders headers, Route route) {
+    public ExchangeType exchangeType(RoutingContext routingContext) {
         // Response stream will be supported via WebSocket.
         return ExchangeType.UNARY;
     }

File: grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnsafeUnaryGrpcService.java
Patch:
@@ -34,7 +34,6 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
-import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.ResponseHeadersBuilder;
 import com.linecorp.armeria.common.SerializationFormat;
@@ -53,7 +52,7 @@
 import com.linecorp.armeria.internal.common.grpc.protocol.StatusCodes;
 import com.linecorp.armeria.internal.common.grpc.protocol.UnaryGrpcSerializationFormats;
 import com.linecorp.armeria.server.AbstractHttpService;
-import com.linecorp.armeria.server.Route;
+import com.linecorp.armeria.server.RoutingContext;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 import io.netty.buffer.ByteBuf;
@@ -106,7 +105,7 @@ private static SerializationFormat resolveSerializationFormat(HttpRequest req) {
     }
 
     @Override
-    public ExchangeType exchangeType(RequestHeaders headers, Route route) {
+    public ExchangeType exchangeType(RoutingContext routingContext) {
         return ExchangeType.UNARY;
     }
 

File: jetty9/src/main/java/com/linecorp/armeria/server/jetty/JettyService.java
Patch:
@@ -64,7 +64,7 @@
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.internal.server.servlet.ServletTlsAttributes;
 import com.linecorp.armeria.server.HttpService;
-import com.linecorp.armeria.server.Route;
+import com.linecorp.armeria.server.RoutingContext;
 import com.linecorp.armeria.server.ServerListenerAdapter;
 import com.linecorp.armeria.server.ServiceConfig;
 import com.linecorp.armeria.server.ServiceRequestContext;
@@ -329,7 +329,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) {
     }
 
     @Override
-    public ExchangeType exchangeType(RequestHeaders headers, Route route) {
+    public ExchangeType exchangeType(RoutingContext routingContext) {
         return ExchangeType.RESPONSE_STREAMING;
     }
 

File: protobuf/src/main/java/com/linecorp/armeria/server/protobuf/ProtobufResponseConverterFunctionProvider.java
Patch:
@@ -15,6 +15,8 @@
  */
 package com.linecorp.armeria.server.protobuf;
 
+import static com.linecorp.armeria.internal.server.annotation.ClassUtil.unwrapAsyncType;
+
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 import java.util.Map;
@@ -50,6 +52,7 @@ public ResponseConverterFunction createResponseConverterFunction(
      * {@link ProtobufResponseConverterFunction}.
      */
     private static boolean isSupportedType(Type type) {
+        type = unwrapAsyncType(type);
         if (type instanceof Class) {
             return MessageLite.class.isAssignableFrom((Class<?>) type);
         }

File: resteasy/src/main/java/com/linecorp/armeria/server/resteasy/ResteasyService.java
Patch:
@@ -53,7 +53,7 @@
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.auth.BasicToken;
 import com.linecorp.armeria.server.HttpService;
-import com.linecorp.armeria.server.Route;
+import com.linecorp.armeria.server.RoutingContext;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.ServerListener;
@@ -169,7 +169,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) {
     }
 
     @Override
-    public ExchangeType exchangeType(RequestHeaders headers, Route route) {
+    public ExchangeType exchangeType(RoutingContext routingContext) {
         return ExchangeType.RESPONSE_STREAMING;
     }
 

File: spring/boot2-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/WebOperationService.java
Patch:
@@ -62,13 +62,12 @@
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.QueryParams;
-import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.ResponseHeadersBuilder;
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.server.HttpService;
-import com.linecorp.armeria.server.Route;
+import com.linecorp.armeria.server.RoutingContext;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 import io.netty.buffer.ByteBuf;
@@ -144,7 +143,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) {
     }
 
     @Override
-    public ExchangeType exchangeType(RequestHeaders headers, Route route) {
+    public ExchangeType exchangeType(RoutingContext routingContext) {
         return ExchangeType.UNARY;
     }
 

File: thrift0.13/src/main/java/com/linecorp/armeria/server/thrift/THttpService.java
Patch:
@@ -55,7 +55,6 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
-import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;
 import com.linecorp.armeria.common.SerializationFormat;
@@ -76,7 +75,7 @@
 import com.linecorp.armeria.server.HttpResponseException;
 import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.HttpStatusException;
-import com.linecorp.armeria.server.Route;
+import com.linecorp.armeria.server.RoutingContext;
 import com.linecorp.armeria.server.RpcService;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceConfig;
@@ -392,7 +391,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
     }
 
     @Override
-    public ExchangeType exchangeType(RequestHeaders headers, Route route) {
+    public ExchangeType exchangeType(RoutingContext routingContext) {
         return ExchangeType.UNARY;
     }
 

File: tomcat9/src/main/java/com/linecorp/armeria/server/tomcat/TomcatService.java
Patch:
@@ -59,15 +59,14 @@
 import com.linecorp.armeria.common.HttpResponseWriter;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
-import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.ResponseHeadersBuilder;
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.internal.server.servlet.ServletTlsAttributes;
 import com.linecorp.armeria.internal.server.tomcat.TomcatVersion;
 import com.linecorp.armeria.server.HttpService;
-import com.linecorp.armeria.server.Route;
+import com.linecorp.armeria.server.RoutingContext;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 import io.netty.util.AsciiString;
@@ -604,7 +603,7 @@ private static String toHeaderValue(MessageBytes value) {
     }
 
     @Override
-    public ExchangeType exchangeType(RequestHeaders headers, Route route) {
+    public ExchangeType exchangeType(RoutingContext routingContext) {
         return ExchangeType.RESPONSE_STREAMING;
     }
 }

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/StreamingServerCall.java
Patch:
@@ -81,11 +81,11 @@ final class StreamingServerCall<I, O> extends AbstractServerCall<I, O>
                         HttpResponseWriter res, int maxRequestMessageLength, int maxResponseMessageLength,
                         ServiceRequestContext ctx, SerializationFormat serializationFormat,
                         @Nullable GrpcJsonMarshaller jsonMarshaller, boolean unsafeWrapRequestBuffers,
-                        boolean useBlockingTaskExecutor, ResponseHeaders defaultHeaders,
-                        @Nullable GrpcStatusFunction statusFunction, boolean autoCompress) {
+                        ResponseHeaders defaultHeaders, @Nullable GrpcStatusFunction statusFunction,
+                        @Nullable Executor blockingExecutor, boolean autoCompress) {
         super(req, method, simpleMethodName, compressorRegistry, decompressorRegistry, res,
               maxResponseMessageLength, ctx, serializationFormat, jsonMarshaller, unsafeWrapRequestBuffers,
-              useBlockingTaskExecutor, defaultHeaders, statusFunction, autoCompress);
+              defaultHeaders, statusFunction, blockingExecutor, autoCompress);
         requireNonNull(req, "req");
         this.method = requireNonNull(method, "method");
         this.ctx = requireNonNull(ctx, "ctx");

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/StreamingServerCallTest.java
Patch:
@@ -293,11 +293,11 @@ void deferResponseHeaders_streaming_nonResponseMessage() {
                         GrpcSerializationFormats.PROTO,
                         new DefaultJsonMarshaller(MessageMarshaller.builder().build()),
                         false,
-                        false,
                         ResponseHeaders.builder(HttpStatus.OK)
                                        .contentType(GrpcSerializationFormats.PROTO.mediaType())
                                        .build(),
                         /* exceptionMappings */ null,
+                        /* blockingExecutor */ null,
                         false);
 
         final AtomicReference<Subscription> subscriptionRef = new AtomicReference<>();
@@ -362,11 +362,11 @@ private StreamingServerCall<SimpleRequest, SimpleResponse> newServerCall(HttpRes
                 GrpcSerializationFormats.PROTO,
                 new DefaultJsonMarshaller(MessageMarshaller.builder().build()),
                 unsafeWrapRequestBuffers,
-                false,
                 ResponseHeaders.builder(HttpStatus.OK)
                                .contentType(GrpcSerializationFormats.PROTO.mediaType())
                                .build(),
                 /* exceptionMappings */ null,
+                /* blockingExecutor */ null,
                 false);
     }
 }

File: core/src/main/java/com/linecorp/armeria/common/SplitHttpMessage.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.google.errorprone.annotations.CheckReturnValue;
 
+import com.linecorp.armeria.common.stream.ByteStreamMessage;
 import com.linecorp.armeria.common.stream.StreamMessage;
 
 /**
@@ -32,7 +33,7 @@ public interface SplitHttpMessage {
      * Returns a {@link StreamMessage} publishes HTTP payloads as a stream of {@link HttpData}.
      */
     @CheckReturnValue
-    StreamMessage<HttpData> body();
+    ByteStreamMessage body();
 
     /**
      * Returns a {@link CompletableFuture} completed with a {@linkplain HttpHeaders trailers}.

File: core/src/main/java/com/linecorp/armeria/common/multipart/BodyPart.java
Patch:
@@ -32,6 +32,7 @@
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.common.stream.ByteStreamMessage;
 import com.linecorp.armeria.common.stream.StreamMessage;
 
 import io.netty.buffer.ByteBufAllocator;
@@ -145,7 +146,7 @@ static BodyPartBuilder builder() {
      * Returns the reactive representation of the part content.
      */
     @CheckReturnValue
-    StreamMessage<HttpData> content();
+    ByteStreamMessage content();
 
     /**
      * Writes this {@link BodyPart} to the given {@link Path} with {@link OpenOption}s.

File: core/src/main/java/com/linecorp/armeria/common/multipart/BodyPartBuilder.java
Patch:
@@ -31,6 +31,7 @@
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.common.stream.ByteStreamMessage;
 import com.linecorp.armeria.common.stream.StreamMessage;
 
 /**
@@ -118,7 +119,7 @@ public BodyPartBuilder content(Path path) {
      */
     public BodyPartBuilder content(Path path, int bufferSize) {
         requireNonNull(path, "path");
-        return content(StreamMessage.of(path, bufferSize));
+        return content(StreamMessage.builder(path).bufferSize(bufferSize).build());
     }
 
     /**
@@ -158,6 +159,6 @@ public BodyPart build() {
             headers = this.headers;
         }
 
-        return new DefaultBodyPart(headers, StreamMessage.concat(contents));
+        return new DefaultBodyPart(headers, ByteStreamMessage.of(StreamMessage.concat(contents)));
     }
 }

File: core/src/main/java/com/linecorp/armeria/common/multipart/DefaultMultipart.java
Patch:
@@ -40,6 +40,7 @@
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.common.stream.ByteStreamMessage;
 import com.linecorp.armeria.common.stream.StreamMessage;
 import com.linecorp.armeria.common.stream.SubscriptionOption;
 import com.linecorp.armeria.common.util.UnmodifiableFuture;
@@ -161,8 +162,8 @@ public HttpResponse toHttpResponse(HttpStatus status) {
     }
 
     @Override
-    public StreamMessage<HttpData> toStreamMessage() {
-        return this;
+    public ByteStreamMessage toStreamMessage() {
+        return ByteStreamMessage.of(this);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/internal/common/AbstractSplitHttpMessage.java
Patch:
@@ -29,6 +29,7 @@
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpMessage;
 import com.linecorp.armeria.common.SplitHttpMessage;
+import com.linecorp.armeria.common.stream.ByteStreamMessage;
 import com.linecorp.armeria.common.stream.StreamMessage;
 import com.linecorp.armeria.common.stream.SubscriptionOption;
 import com.linecorp.armeria.internal.common.stream.NoopSubscription;
@@ -55,8 +56,8 @@ abstract class AbstractSplitHttpMessage implements SplitHttpMessage, StreamMessa
     }
 
     @Override
-    public final StreamMessage<HttpData> body() {
-        return this;
+    public final ByteStreamMessage body() {
+        return ByteStreamMessage.of(this);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/internal/common/stream/StreamMessageUtil.java
Patch:
@@ -22,9 +22,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.multipart.BodyPart;
+import com.linecorp.armeria.common.stream.ByteStreamMessage;
 import com.linecorp.armeria.common.stream.StreamMessage;
 import com.linecorp.armeria.unsafe.PooledObjects;
 
@@ -51,7 +51,7 @@ public static void closeOrAbort(Object obj, @Nullable Throwable cause) {
         }
 
         if (obj instanceof BodyPart) {
-            final StreamMessage<HttpData> content = ((BodyPart) obj).content();
+            final ByteStreamMessage content = ((BodyPart) obj).content();
             if (cause == null) {
                 content.abort();
             } else {

File: core/src/test/java/com/linecorp/armeria/common/multipart/MultipartIntegrationTest.java
Patch:
@@ -45,7 +45,7 @@
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.SplitHttpResponse;
 import com.linecorp.armeria.common.annotation.Nullable;
-import com.linecorp.armeria.common.stream.StreamMessage;
+import com.linecorp.armeria.common.stream.ByteStreamMessage;
 import com.linecorp.armeria.common.stream.SubscriptionOption;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.testing.junit5.server.ServerExtension;
@@ -272,7 +272,7 @@ void pingPong() {
         final SplitHttpResponse splitResponse = response.split();
         final ResponseHeaders responseHeaders = splitResponse.headers().join();
         assertThat(responseHeaders.status()).isEqualTo(HttpStatus.OK);
-        final StreamMessage<HttpData> responseContents = splitResponse.body();
+        final ByteStreamMessage responseContents = splitResponse.body();
         @Nullable
         final MediaType contentType = responseHeaders.contentType();
         assertThat(contentType).isNotNull();
@@ -296,7 +296,7 @@ void multipartSimpleResponse() {
         final SplitHttpResponse splitResponse = response.split();
         final ResponseHeaders responseHeaders = splitResponse.headers().join();
         assertThat(responseHeaders.status()).isEqualTo(HttpStatus.OK);
-        final StreamMessage<HttpData> responseContents = splitResponse.body();
+        final ByteStreamMessage responseContents = splitResponse.body();
         @Nullable
         final MediaType contentType = responseHeaders.contentType();
         assertThat(contentType).isNotNull();

File: core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java
Patch:
@@ -441,7 +441,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws E
         if (cause instanceof ProxyConnectException) {
             final SessionProtocol protocol = this.protocol != null ? this.protocol : desiredProtocol;
             final UnprocessedRequestException wrapped = UnprocessedRequestException.of(cause);
-            channelPool.invokeProxyConnectFailed(protocol, poolKey, wrapped);
+            channelPool.maybeHandleProxyFailure(protocol, poolKey, wrapped);
             sessionPromise.tryFailure(wrapped);
             return;
         }

File: core/src/main/java/com/linecorp/armeria/common/FixedHttpResponse.java
Patch:
@@ -58,7 +58,7 @@ static final class RegularFixedHttpResponse
             super(objs);
             checkArgument(objs.length > 0, "There must be at least one ResponseHeaders.");
             checkArgument(objs[0] instanceof ResponseHeaders,
-                          "The first HttpObject must be a ResponseHeaders: " + objs[0]);
+                          "The first HttpObject must be a ResponseHeaders: %s", objs[0]);
         }
     }
 

File: core/src/main/java/com/linecorp/armeria/internal/common/stream/ByteBufsDecoderInput.java
Patch:
@@ -27,17 +27,17 @@
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
 
-public final class ByteBufDecoderInput implements StreamDecoderInput {
+public final class ByteBufsDecoderInput implements StreamDecoderInput {
 
     private final ByteBufAllocator alloc;
     private final Queue<ByteBuf> queue;
     private int readableBytes;
 
     private boolean closed;
 
-    public ByteBufDecoderInput(ByteBufAllocator alloc) {
+    public ByteBufsDecoderInput(ByteBufAllocator alloc) {
         this.alloc = alloc;
-        queue = new ArrayDeque<>();
+        queue = new ArrayDeque<>(4);
     }
 
     public boolean add(ByteBuf byteBuf) {

File: core/src/main/java/com/linecorp/armeria/internal/common/stream/DecodedStreamMessage.java
Patch:
@@ -66,7 +66,7 @@ public static <O> StreamMessage<O> of(HttpMessage httpMessage,
 
     private final StreamDecoder<I, O> decoder;
     private final boolean isHttpDecoder;
-    private final ByteBufDecoderInput input;
+    private final ByteBufsDecoderInput input;
     private final StreamMessage<? extends I> publisher;
 
     @Nullable
@@ -89,7 +89,7 @@ public DecodedStreamMessage(StreamMessage<? extends I> streamMessage,
         publisher = requireNonNull(streamMessage, "streamMessage");
         this.decoder = requireNonNull(decoder, "decoder");
         isHttpDecoder = decoder instanceof HttpDecoder;
-        input = new ByteBufDecoderInput(requireNonNull(alloc, "alloc"));
+        input = new ByteBufsDecoderInput(requireNonNull(alloc, "alloc"));
         if (publisher instanceof HttpRequest) {
             requestHeaders = ((HttpRequest) publisher).headers();
         }

File: core/src/test/java/com/linecorp/armeria/common/multipart/MimeParserTest.java
Patch:
@@ -45,7 +45,7 @@
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.stream.StreamMessage;
-import com.linecorp.armeria.internal.common.stream.ByteBufDecoderInput;
+import com.linecorp.armeria.internal.common.stream.ByteBufsDecoderInput;
 
 import io.netty.buffer.ByteBufAllocator;
 import io.netty.buffer.Unpooled;
@@ -671,7 +671,7 @@ private static List<AggregatedBodyPart> parse(String boundary, byte[] data) {
      * @return test parser event processor
      */
     private static List<AggregatedBodyPart> parse(String boundary, List<byte[]> data) {
-        final ByteBufDecoderInput input = new ByteBufDecoderInput(ByteBufAllocator.DEFAULT);
+        final ByteBufsDecoderInput input = new ByteBufsDecoderInput(ByteBufAllocator.DEFAULT);
         final List<BodyPart> output = new ArrayList<>();
         final MimeParser parser = new MimeParser(input, output::add, boundary,
                                                  // Use onBodyPartBegin and requestUpstreamForBodyPartData

File: consul/src/main/java/com/linecorp/armeria/client/consul/ConsulEndpointGroup.java
Patch:
@@ -83,10 +83,11 @@ public static ConsulEndpointGroupBuilder builder(URI consulUri, String serviceNa
     @Nullable
     private volatile ScheduledFuture<?> scheduledFuture;
 
-    ConsulEndpointGroup(EndpointSelectionStrategy selectionStrategy, ConsulClient consulClient,
+    ConsulEndpointGroup(EndpointSelectionStrategy selectionStrategy, boolean allowEmptyEndpoints,
+                        long selectionTimeoutMillis, ConsulClient consulClient,
                         String serviceName, long registryFetchIntervalMillis, boolean useHealthyEndpoints,
                         @Nullable String datacenter, @Nullable String filter) {
-        super(selectionStrategy);
+        super(selectionStrategy, allowEmptyEndpoints, selectionTimeoutMillis);
         this.consulClient = requireNonNull(consulClient, "consulClient");
         this.serviceName = requireNonNull(serviceName, "serviceName");
         this.registryFetchIntervalMillis = registryFetchIntervalMillis;

File: core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java
Patch:
@@ -332,7 +332,7 @@ private CompletableFuture<Boolean> initEndpointGroup(EndpointGroup endpointGroup
 
         // Use an arbitrary event loop for asynchronous Endpoint selection.
         final EventLoop temporaryEventLoop = options().factory().eventLoopSupplier().get();
-        return endpointGroup.select(this, temporaryEventLoop, connectTimeoutMillis()).handle((e, cause) -> {
+        return endpointGroup.select(this, temporaryEventLoop).handle((e, cause) -> {
             updateEndpoint(e);
             acquireEventLoop(endpointGroup);
 

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsAddressEndpointGroup.java
Patch:
@@ -82,11 +82,12 @@ public static DnsAddressEndpointGroupBuilder builder(String hostname) {
     private final int port;
 
     DnsAddressEndpointGroup(EndpointSelectionStrategy selectionStrategy, boolean allowEmptyEndpoints,
+                            long selectionTimeoutMillis,
                             DefaultDnsResolver resolver, EventLoop eventLoop, Backoff backoff,
                             int minTtl, int maxTtl, @Nullable ResolvedAddressTypes resolvedAddressTypes,
                             String hostname, int port) {
 
-        super(selectionStrategy, allowEmptyEndpoints, resolver, eventLoop,
+        super(selectionStrategy, allowEmptyEndpoints, selectionTimeoutMillis, resolver, eventLoop,
               newQuestions(hostname, resolvedAddressTypes), backoff, minTtl, maxTtl);
 
         this.hostname = hostname;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsEndpointGroup.java
Patch:
@@ -68,11 +68,11 @@ abstract class DnsEndpointGroup extends DynamicEndpointGroup implements DnsCache
     int attemptsSoFar;
 
     DnsEndpointGroup(EndpointSelectionStrategy selectionStrategy, boolean allowEmptyEndpoints,
-                     DefaultDnsResolver resolver, EventLoop eventLoop,
+                     long selectionTimeoutMillis, DefaultDnsResolver resolver, EventLoop eventLoop,
                      List<DnsQuestionWithoutTrailingDot> questions,
                      Backoff backoff, int minTtl, int maxTtl) {
 
-        super(selectionStrategy, allowEmptyEndpoints);
+        super(selectionStrategy, allowEmptyEndpoints, selectionTimeoutMillis);
 
         this.resolver = resolver;
         this.eventLoop = eventLoop;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsServiceEndpointGroup.java
Patch:
@@ -66,10 +66,10 @@ public static DnsServiceEndpointGroupBuilder builder(String hostname) {
     }
 
     DnsServiceEndpointGroup(EndpointSelectionStrategy selectionStrategy, boolean allowEmptyEndpoints,
-                            DefaultDnsResolver resolver, EventLoop eventLoop, Backoff backoff,
-                            int minTtl, int maxTtl, String hostname) {
+                            long selectionTimeoutMillis, DefaultDnsResolver resolver, EventLoop eventLoop,
+                            Backoff backoff, int minTtl, int maxTtl, String hostname) {
 
-        super(selectionStrategy, allowEmptyEndpoints, resolver, eventLoop,
+        super(selectionStrategy, allowEmptyEndpoints, selectionTimeoutMillis, resolver, eventLoop,
               ImmutableList.of(DnsQuestionWithoutTrailingDot.of(hostname, DnsRecordType.SRV)),
               backoff, minTtl, maxTtl);
         start();

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsTextEndpointGroup.java
Patch:
@@ -72,10 +72,11 @@ public static DnsTextEndpointGroupBuilder builder(String hostname,
     private final Function<byte[], @Nullable Endpoint> mapping;
 
     DnsTextEndpointGroup(EndpointSelectionStrategy selectionStrategy, boolean allowEmptyEndpoints,
+                         long selectionTimeoutMillis,
                          DefaultDnsResolver resolver, EventLoop eventLoop, Backoff backoff, int minTtl,
                          int maxTtl, String hostname, Function<byte[], @Nullable Endpoint> mapping) {
 
-        super(selectionStrategy, allowEmptyEndpoints, resolver, eventLoop,
+        super(selectionStrategy, allowEmptyEndpoints, selectionTimeoutMillis, resolver, eventLoop,
               ImmutableList.of(DnsQuestionWithoutTrailingDot.of(hostname, DnsRecordType.TXT)),
               backoff, minTtl, maxTtl);
         this.mapping = mapping;

File: core/src/main/java/com/linecorp/armeria/internal/client/ClientUtil.java
Patch:
@@ -25,6 +25,7 @@
 import com.linecorp.armeria.client.Client;
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.DefaultClientRequestContext;
+import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.client.UnprocessedRequestException;
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.common.HttpRequest;

File: core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckContextGroupTest.java
Patch:
@@ -53,6 +53,7 @@ void shouldTransitionToNewEndpointsAfterHealthCheck() {
 
         try (HealthCheckedEndpointGroup endpointGroup =
                      new HealthCheckedEndpointGroup(delegate, true,
+                                                    10000, 10000,
                                                     SessionProtocol.HTTP, 80,
                                                     DEFAULT_HEALTH_CHECK_RETRY_BACKOFF,
                                                     ClientOptions.of(), checkFactory,
@@ -93,7 +94,7 @@ void shouldTransitionToNewEndpointsAfterHealthCheck() {
             assertThat(contexts).hasSize(4);
 
             assertThat(endpointGroup.endpoints()).usingElementComparator(new EndpointComparator())
-                    .containsExactly(dynamic1WithWeight, dynamic2);
+                                                 .containsExactly(dynamic1WithWeight, dynamic2);
 
             for (int i = 0; i < contexts.size(); i++) {
                 final DefaultHealthCheckerContext context = (DefaultHealthCheckerContext) contexts.get(i);
@@ -120,6 +121,7 @@ void shouldWaitUntilAllEndpointsAreChecked() {
 
         try (HealthCheckedEndpointGroup endpointGroup =
                      new HealthCheckedEndpointGroup(delegate, true,
+                                                    10000, 10000,
                                                     SessionProtocol.HTTP, 80,
                                                     DEFAULT_HEALTH_CHECK_RETRY_BACKOFF,
                                                     ClientOptions.of(), checkFactory,

File: core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroupBuilderTest.java
Patch:
@@ -37,9 +37,8 @@ void beforeEach() {
 
     @Test
     void defaultHealthCheckStrategy() {
-        final HealthCheckedEndpointGroup group1 = new HealthCheckedEndpointGroupBuilder(delegate, PATH).build();
-        final HealthCheckedEndpointGroup group2 = new HealthCheckedEndpointGroupBuilder(delegate, PATH).build();
-        assertThat(group1.healthCheckStrategy).isSameAs(HealthCheckStrategy.all());
+        final HealthCheckedEndpointGroup group = new HealthCheckedEndpointGroupBuilder(delegate, PATH).build();
+        assertThat(group.healthCheckStrategy).isSameAs(HealthCheckStrategy.all());
     }
 
     @Test

File: zookeeper3/src/main/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroup.java
Patch:
@@ -113,10 +113,10 @@ public static ZooKeeperEndpointGroupBuilder builder(
     private final CuratorFramework client;
     private final PathChildrenCache pathChildrenCache;
 
-    ZooKeeperEndpointGroup(EndpointSelectionStrategy selectionStrategy,
-                           CuratorFramework client, String znodePath,
+    ZooKeeperEndpointGroup(EndpointSelectionStrategy selectionStrategy, boolean allowEmptyEndpoints,
+                           long selectionTimeoutMillis, CuratorFramework client, String znodePath,
                            ZooKeeperDiscoverySpec discoverySpec, boolean internalClient) {
-        super(selectionStrategy);
+        super(selectionStrategy, allowEmptyEndpoints, selectionTimeoutMillis);
         this.internalClient = internalClient;
         this.client = requireNonNull(client, "client");
 

File: core/src/main/java/com/linecorp/armeria/client/endpoint/DynamicEndpointGroup.java
Patch:
@@ -233,7 +233,7 @@ private static boolean hasChanges(List<Endpoint> oldEndpoints, List<Endpoint> ne
         for (int i = 0; i < oldEndpoints.size(); i++) {
             final Endpoint a = oldEndpoints.get(i);
             final Endpoint b = newEndpoints.get(i);
-            if (!a.equals(b) || a.weight() != b.weight()) {
+            if (!a.equals(b) || a.weight() != b.weight() || !a.attrs().equals(b.attrs())) {
                 return true;
             }
         }

File: core/src/test/java/com/linecorp/armeria/client/ClientRequestContextDelayedInitTest.java
Patch:
@@ -31,8 +31,8 @@
 
 import com.linecorp.armeria.client.endpoint.AbstractEndpointSelector;
 import com.linecorp.armeria.client.endpoint.DynamicEndpointGroup;
-import com.linecorp.armeria.client.endpoint.EmptyEndpointGroupException;
 import com.linecorp.armeria.client.endpoint.EndpointSelectionStrategy;
+import com.linecorp.armeria.client.endpoint.EndpointSelectionTimeoutException;
 import com.linecorp.armeria.client.endpoint.EndpointSelector;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.Flags;
@@ -69,7 +69,7 @@ void timeout() {
         final Stopwatch stopwatch = Stopwatch.createStarted();
         assertThatThrownBy(() -> client.get("/").aggregate().join())
                 .getCause().isInstanceOf(UnprocessedRequestException.class)
-                .getCause().isInstanceOf(EmptyEndpointGroupException.class);
+                .getCause().isInstanceOf(EndpointSelectionTimeoutException.class);
         assertThat(stopwatch.elapsed(TimeUnit.MILLISECONDS))
                 .isGreaterThanOrEqualTo(Flags.defaultConnectTimeoutMillis());
     }

File: grpc/src/test/java/com/linecorp/armeria/client/grpc/LazyDynamicEndpointGroupTest.java
Patch:
@@ -36,9 +36,9 @@
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.client.UnprocessedRequestException;
 import com.linecorp.armeria.client.endpoint.DynamicEndpointGroup;
-import com.linecorp.armeria.client.endpoint.EmptyEndpointGroupException;
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.client.endpoint.EndpointSelectionStrategy;
+import com.linecorp.armeria.client.endpoint.EndpointSelectionTimeoutException;
 import com.linecorp.armeria.client.endpoint.EndpointSelector;
 import com.linecorp.armeria.client.logging.LoggingClient;
 import com.linecorp.armeria.common.Scheme;
@@ -98,7 +98,7 @@ public void onCompleted() {}
         await().untilTrue(completed);
         assertThat(causeRef.get()).isInstanceOf(StatusRuntimeException.class)
                                   .hasCauseInstanceOf(UnprocessedRequestException.class)
-                                  .hasRootCauseInstanceOf(EmptyEndpointGroupException.class);
+                                  .hasRootCauseInstanceOf(EndpointSelectionTimeoutException.class);
     }
 
     @Test
@@ -131,7 +131,7 @@ public void onCompleted() {}
         await().untilTrue(completed);
         assertThat(causeRef.get()).isInstanceOf(StatusRuntimeException.class)
                                   .hasCauseInstanceOf(UnprocessedRequestException.class)
-                                  .hasRootCauseInstanceOf(EmptyEndpointGroupException.class);
+                                  .hasRootCauseInstanceOf(EndpointSelectionTimeoutException.class);
     }
 
     @Test

File: core/src/main/java/com/linecorp/armeria/client/BlockingWebClientRequestPreparation.java
Patch:
@@ -309,13 +309,15 @@ public BlockingWebClientRequestPreparation content(MediaType contentType, String
 
     @Override
     @FormatMethod
+    @SuppressWarnings("FormatStringAnnotation")
     public BlockingWebClientRequestPreparation content(@FormatString String format, Object... content) {
         delegate.content(format, content);
         return this;
     }
 
     @Override
     @FormatMethod
+    @SuppressWarnings("FormatStringAnnotation")
     public BlockingWebClientRequestPreparation content(MediaType contentType, @FormatString String format,
                                                        Object... content) {
         delegate.content(contentType, format, content);

File: core/src/main/java/com/linecorp/armeria/client/FutureTransformingRequestPreparation.java
Patch:
@@ -247,13 +247,15 @@ public FutureTransformingRequestPreparation<T> content(MediaType contentType, St
 
     @Override
     @FormatMethod
+    @SuppressWarnings("FormatStringAnnotation")
     public FutureTransformingRequestPreparation<T> content(@FormatString String format, Object... content) {
         delegate.content(format, content);
         return this;
     }
 
     @Override
     @FormatMethod
+    @SuppressWarnings("FormatStringAnnotation")
     public FutureTransformingRequestPreparation<T> content(MediaType contentType, @FormatString String format,
                                                            Object... content) {
         delegate.content(contentType, format, content);

File: core/src/main/java/com/linecorp/armeria/client/TransformingRequestPreparation.java
Patch:
@@ -177,13 +177,15 @@ public TransformingRequestPreparation<T, R> content(MediaType contentType, Strin
 
     @Override
     @FormatMethod
+    @SuppressWarnings("FormatStringAnnotation")
     public TransformingRequestPreparation<T, R> content(String format, Object... content) {
         delegate.content(format, content);
         return this;
     }
 
     @Override
     @FormatMethod
+    @SuppressWarnings("FormatStringAnnotation")
     public TransformingRequestPreparation<T, R> content(MediaType contentType, String format,
                                                         Object... content) {
         delegate.content(contentType, format, content);

File: core/src/main/java/com/linecorp/armeria/client/WebClientRequestPreparation.java
Patch:
@@ -451,12 +451,14 @@ public WebClientRequestPreparation content(MediaType contentType, String content
 
     @Override
     @FormatMethod
+    @SuppressWarnings("FormatStringAnnotation")
     public WebClientRequestPreparation content(@FormatString String format, Object... content) {
         return (WebClientRequestPreparation) super.content(format, content);
     }
 
     @Override
     @FormatMethod
+    @SuppressWarnings("FormatStringAnnotation")
     public WebClientRequestPreparation content(MediaType contentType, @FormatString String format,
                                                Object... content) {
         return (WebClientRequestPreparation) super.content(contentType, format, content);

File: core/src/main/java/com/linecorp/armeria/common/multipart/MimeParser.java
Patch:
@@ -113,8 +113,7 @@ final class MimeParser {
     /**
      * The publisher that emits body part contents.
      */
-    @Nullable
-    private MultipartDecoder.BodyPartPublisher bodyPartPublisher;
+    private MultipartDecoder.@Nullable BodyPartPublisher bodyPartPublisher;
 
     /**
      * Read and process body parts until we see the terminating boundary line.

File: core/src/main/java/com/linecorp/armeria/server/logging/AccessLogFormats.java
Patch:
@@ -180,7 +180,7 @@ static List<AccessLogComponent> parseCustom(String formatStr) {
 
     private static AccessLogComponent newAccessLogComponent(char token,
                                                             @Nullable String variable,
-                                                            @Nullable Condition.Builder condBuilder) {
+                                                            Condition.@Nullable Builder condBuilder) {
         final AccessLogType type = AccessLogType.find(token);
         checkArgument(type != null, "Unexpected token character: '%s'", token);
         if (type.variableRequirement() == VariableRequirement.YES) {

File: core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java
Patch:
@@ -816,8 +816,7 @@ void httpsRequestWithInvalidCertificate() throws Exception {
     })
     class JettyInteropTest {
 
-        @Nullable
-        org.eclipse.jetty.server.Server jetty;
+        org.eclipse.jetty.server.@Nullable Server jetty;
 
         @BeforeAll
         void startJetty() throws Exception {

File: tomcat9/src/main/java/com/linecorp/armeria/server/tomcat/ManagedTomcatService.java
Patch:
@@ -46,8 +46,7 @@ final class ManagedTomcatService extends TomcatService {
     private final ServerListener configurator;
     private static final Set<String> activeEngines = new HashSet<>();
 
-    @Nullable
-    private org.apache.catalina.Server server;
+    private org.apache.catalina.@Nullable Server server;
     @Nullable
     private Server armeriaServer;
     @Nullable

File: zookeeper3/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java
Patch:
@@ -49,8 +49,8 @@ public class AbstractCuratorFrameworkBuilder {
     @Nullable
     private final CuratorFramework client;
     private final String znodePath;
-    @Nullable
-    private final CuratorFrameworkFactory.Builder clientBuilder;
+
+    private final CuratorFrameworkFactory.@Nullable Builder clientBuilder;
     @Nullable
     private final ImmutableList.Builder<Consumer<? super Builder>> customizers;
 

File: retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/AbstractSubscriber.java
Patch:
@@ -176,9 +176,10 @@ final void safeOnResponse(BufferedSource content) {
         callbackExecutor.execute(() -> {
             try {
                 callback.onResponse(armeriaCall, responseBuilder
-                        .body(ResponseBody.create(Strings.isNullOrEmpty(contentType) ?
+                        .body(ResponseBody.create(content,
+                                                  Strings.isNullOrEmpty(contentType) ?
                                                   null : MediaType.parse(contentType),
-                                                  contentLength, content))
+                                                  contentLength))
                         .build());
             } catch (IOException e) {
                 callback.onFailure(armeriaCall, e);

File: retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/StreamingCallSubscriber.java
Patch:
@@ -62,7 +62,9 @@ void onHttpData(HttpData data) {
             safeOnResponse(Okio.buffer(new ForwardingSource(pipeBuffer.source()) {
                 @Override
                 public long read(Buffer sink, long byteCount) throws IOException {
-                    request(1);
+                    if (pipeBuffer.exhausted()) {
+                        request(1);
+                    }
                     return super.read(sink, byteCount);
                 }
 

File: core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java
Patch:
@@ -94,6 +94,7 @@ public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Ex
 
         final Endpoint endpointWithPort = endpoint.withDefaultPort(ctx.sessionProtocol().defaultPort());
         final EventLoop eventLoop = ctx.eventLoop().withoutContext();
+        // TODO(ikhoon) Use ctx.exchangeType() to create an optimized HttpResponse for non-streaming response.
         final DecodedHttpResponse res = new DecodedHttpResponse(eventLoop);
 
         final ClientConnectionTimingsBuilder timingsBuilder = ClientConnectionTimings.builder();

File: core/src/main/java/com/linecorp/armeria/common/FixedHttpRequest.java
Patch:
@@ -44,6 +44,7 @@ public RequestHeaders headers() {
         }
     }
 
+    // TODO(ikhoon): Make `FixedHttpRequest`s implement AggregatedHttpRequest
     static final class OneElementFixedHttpRequest
             extends OneElementFixedStreamMessage<HttpObject> implements HttpRequest {
 

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContextBuilder.java
Patch:
@@ -30,6 +30,7 @@
 import javax.net.ssl.SSLSession;
 
 import com.linecorp.armeria.common.AbstractRequestContextBuilder;
+import com.linecorp.armeria.common.ExchangeType;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
@@ -242,6 +243,7 @@ public ServiceRequestContext build() {
         final RoutingResult routingResult =
                 this.routingResult != null ? this.routingResult
                                            : RoutingResult.builder().path(path()).query(query()).build();
+        final ExchangeType exchangeType = service.exchangeType(req.headers(), serviceCfg.route());
         final InetAddress clientAddress = server.config().clientAddressMapper().apply(proxiedAddresses)
                                                 .getAddress();
 
@@ -265,7 +267,7 @@ public ServiceRequestContext build() {
         // Build the context with the properties set by a user and the fake objects.
         return new DefaultServiceRequestContext(
                 serviceCfg, fakeChannel(), meterRegistry(), sessionProtocol(), id(), routingCtx,
-                routingResult, req, sslSession(), proxiedAddresses, clientAddress,
+                routingResult, exchangeType, req, sslSession(), proxiedAddresses, clientAddress,
                 requestCancellationScheduler,
                 isRequestStartTimeSet() ? requestStartTimeNanos() : System.nanoTime(),
                 isRequestStartTimeSet() ? requestStartTimeMicros() : SystemInfo.currentTimeMicros(),

File: core/src/test/java/com/linecorp/armeria/server/EmptyContentDecodedHttpRequestTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.RegisterExtension;
 
+import com.linecorp.armeria.common.ExchangeType;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.testing.junit5.common.EventLoopExtension;
@@ -36,7 +37,8 @@ class EmptyContentDecodedHttpRequestTest {
     void emptyContent() {
         final RequestHeaders headers = RequestHeaders.of(HttpMethod.GET, "/");
         final EmptyContentDecodedHttpRequest req =
-                new EmptyContentDecodedHttpRequest(eventLoop.get(), 1, 3, headers, true, null, null);
+                new EmptyContentDecodedHttpRequest(eventLoop.get(), 1, 3, headers, true, null, null,
+                                                   ExchangeType.BIDI_STREAMING);
 
         StepVerifier.create(req)
                     .expectComplete()

File: core/src/test/java/com/linecorp/armeria/server/StreamingDecodedHttpRequestTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.junit.ClassRule;
 import org.junit.Test;
 
+import com.linecorp.armeria.common.ExchangeType;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
@@ -113,7 +114,8 @@ private static StreamingDecodedHttpRequest decodedHttpRequest(RequestHeaders hea
         final StreamingDecodedHttpRequest
                 request = new StreamingDecodedHttpRequest(sctx.eventLoop(), 1, 1, headers, true,
                                                           InboundTrafficController.disabled(),
-                                                          sctx.maxRequestLength(), null, null);
+                                                          sctx.maxRequestLength(), null, null,
+                                                          ExchangeType.BIDI_STREAMING);
         request.init(sctx);
         return request;
     }

File: benchmarks/jmh/src/jmh/java/com/linecorp/armeria/grpc/downstream/LargePayloadBenchmark.java
Patch:
@@ -28,7 +28,7 @@
 import com.google.protobuf.ByteString;
 import com.google.protobuf.util.Timestamps;
 
-import com.linecorp.armeria.client.Clients;
+import com.linecorp.armeria.client.grpc.GrpcClients;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.grpc.BinaryProxyGrpc.BinaryProxyImplBase;
 import com.linecorp.armeria.grpc.BinaryProxyGrpc.BinaryProxyStub;
@@ -103,8 +103,8 @@ public void onCompleted() {
                        .build();
         server.start().join();
 
-        final String url = "gproto+http://127.0.0.1:" + server.activeLocalPort(SessionProtocol.HTTP) + '/';
-        binaryProxyClient = Clients.newClient(url, BinaryProxyStub.class);
+        final String url = "http://127.0.0.1:" + server.activeLocalPort(SessionProtocol.HTTP) + '/';
+        binaryProxyClient = GrpcClients.newClient(url, BinaryProxyStub.class);
     }
 
     @TearDown

File: it/grpc/reactor/src/test/java/com/linecorp/armeria/grpc/reactor/HelloServiceTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
-import com.linecorp.armeria.client.Clients;
+import com.linecorp.armeria.client.grpc.GrpcClients;
 import com.linecorp.armeria.grpc.reactor.Hello.HelloReply;
 import com.linecorp.armeria.grpc.reactor.Hello.HelloRequest;
 import com.linecorp.armeria.grpc.reactor.HelloServiceImpl.AuthError;
@@ -46,7 +46,7 @@ class HelloServiceTest {
     static void beforeClass() throws Exception {
         server = newServer(0);
         server.start().join();
-        helloService = Clients.newClient(uri(), ReactorHelloServiceGrpc.ReactorHelloServiceStub.class);
+        helloService = GrpcClients.newClient(uri(), ReactorHelloServiceGrpc.ReactorHelloServiceStub.class);
     }
 
     @AfterAll

File: it/thrift-fullcamel/src/test/java/server/thrift/CamelNameThriftServiceTest.java
Patch:
@@ -16,14 +16,13 @@
 
 package server.thrift;
 
-import static com.linecorp.armeria.common.thrift.ThriftSerializationFormats.BINARY;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import org.apache.thrift.TException;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.RegisterExtension;
 
-import com.linecorp.armeria.client.Clients;
+import com.linecorp.armeria.client.thrift.ThriftClients;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.thrift.THttpService;
 import com.linecorp.armeria.service.test.thrift.main.SayHelloService.Iface;
@@ -60,7 +59,7 @@ public String sayHelloWorld(String name) throws TException {
     @Test
     void testSync_SayHelloService_sayHello()
             throws Exception {
-        final Iface client = Clients.newClient(server.httpUri(BINARY) + "/hello", Iface.class);
+        final Iface client = ThriftClients.newClient(server.httpUri() + "/hello", Iface.class);
         assertThat(client.sayHello("Armeria")).isEqualTo("Hello, Armeria!");
         assertThat(client.sayHello(null)).isEqualTo("Hello, null!");
 

File: thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/ThriftJacksonSerializers.java
Patch:
@@ -127,8 +127,8 @@ private static String serializeTBaseLike(Consumer<TProtocol> writer, boolean use
             return Exceptions.throwUnsafely(ex);
         }
 
-        final TProtocolFactory factory = useNamedEnums ? ThriftProtocolFactories.TEXT_NAMED_ENUM
-                                                       : ThriftProtocolFactories.TEXT;
+        final TProtocolFactory factory = useNamedEnums ? ThriftProtocolFactories.textNamedEnum()
+                                                       : ThriftProtocolFactories.text();
         final TProtocol protocol = factory.getProtocol(buffer);
         writer.accept(protocol);
         return new String(buffer.getArray(), 0, buffer.length());

File: thrift0.13/src/main/java/com/linecorp/armeria/internal/client/thrift/THttpClientFactory.java
Patch:
@@ -70,8 +70,7 @@ public Object newClient(ClientBuilderParams params) {
         final Class<?> clientType = params.clientType();
         final ClientOptions options = params.options();
         final RpcClient delegate = options.decoration().rpcDecorate(
-                new THttpClientDelegate(newHttpClient(params),
-                                        params.scheme().serializationFormat()));
+                new THttpClientDelegate(newHttpClient(params), options, params.scheme().serializationFormat()));
 
         if (clientType == THttpClient.class) {
             // Create a THttpClient with path.

File: thrift0.13/src/main/java/com/linecorp/armeria/internal/server/thrift/ThriftDocServicePlugin.java
Patch:
@@ -536,7 +536,7 @@ public String serializeExampleRequest(String serviceName, String methodName,
 
         final TBase<?, ?> exampleTBase = (TBase<?, ?>) exampleRequest;
         try {
-            final TSerializer serializer = new TSerializer(ThriftProtocolFactories.TEXT);
+            final TSerializer serializer = new TSerializer(ThriftProtocolFactories.text());
             if (legacyTSerializerToString != null) {
                 try {
                     return (String) legacyTSerializerToString.invoke(serializer, exampleTBase,

File: thrift0.13/src/test/java/com/linecorp/armeria/client/thrift/THttpClientBadSeqIdTest.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.thrift.TApplicationException;
 import org.junit.Test;
 
-import com.linecorp.armeria.client.Clients;
 import com.linecorp.armeria.common.RpcResponse;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.service.test.thrift.main.HelloService;
@@ -42,7 +41,7 @@ public void badSeqId() throws Exception {
         try (ServerSocket ss = new ServerSocket(0)) {
             ss.setSoTimeout(5000);
 
-            final THttpClient client = Clients.newClient(
+            final THttpClient client = ThriftClients.newClient(
                     "ttext+h1c://127.0.0.1:" + ss.getLocalPort(), THttpClient.class);
 
             final RpcResponse res = client.execute("/", HelloService.Iface.class, "hello", "trustin");

File: thrift0.13/src/test/java/com/linecorp/armeria/it/thrift/TMultiplexedProtocolIntegrationTest.java
Patch:
@@ -29,7 +29,7 @@
 import org.junit.ClassRule;
 import org.junit.Test;
 
-import com.linecorp.armeria.client.Clients;
+import com.linecorp.armeria.client.thrift.ThriftClients;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.server.ServerBuilder;
@@ -92,6 +92,6 @@ private static Iface client(String serviceName) {
         } else {
             uri = server.httpUri(BINARY).resolve('#' + serviceName);
         }
-        return Clients.newClient(uri, Iface.class);
+        return ThriftClients.newClient(uri, Iface.class);
     }
 }

File: thrift0.13/src/test/java/com/linecorp/armeria/it/thrift/ThriftHttpErrorResponseTest.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.linecorp.armeria.it.thrift;
 
-import static com.linecorp.armeria.common.thrift.ThriftSerializationFormats.BINARY;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
@@ -26,8 +25,8 @@
 
 import com.google.common.base.Ascii;
 
-import com.linecorp.armeria.client.Clients;
 import com.linecorp.armeria.client.InvalidResponseHeadersException;
+import com.linecorp.armeria.client.thrift.ThriftClients;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.logging.RequestLog;
@@ -103,7 +102,7 @@ protected void configure(ServerBuilder sb) throws Exception {
     @ParameterizedTest
     @EnumSource(TestParam.class)
     void test(TestParam param) throws Exception {
-        final Iface client = Clients.newClient(server.httpUri(BINARY).resolve(param.path), Iface.class);
+        final Iface client = ThriftClients.newClient(server.httpUri().resolve(param.path), Iface.class);
         assertThatThrownBy(() -> client.hello("foo"))
                 .isInstanceOf(TTransportException.class)
                 .getCause()

File: thrift0.13/src/test/java/com/linecorp/armeria/server/thrift/ThriftTreeStructureTest.java
Patch:
@@ -27,7 +27,7 @@
 
 import com.google.common.collect.ImmutableList;
 
-import com.linecorp.armeria.client.Clients;
+import com.linecorp.armeria.client.thrift.ThriftClients;
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.thrift.ThriftSerializationFormats;
 import com.linecorp.armeria.server.ServerBuilder;
@@ -69,8 +69,8 @@ void setUp() {
     @Test
     void testRecursiveUnionCodec() throws TException {
         for (SerializationFormat format : ThriftSerializationFormats.values()) {
-            final TreeService.Iface client = Clients.newClient(server.uri(HTTP, format).resolve("/tree"),
-                                                               TreeService.Iface.class);
+            final TreeService.Iface client = ThriftClients.newClient(server.uri(HTTP, format).resolve("/tree"),
+                                                                     TreeService.Iface.class);
             assertThat(client.createTree(treeRequest)).isEqualTo("OK");
         }
     }

File: spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java
Patch:
@@ -65,8 +65,8 @@
  *     excluded-user-agents: some-user-agent, another-user-agent
  *     min-response-size: 1KB
  *   internal-services:
- *     - port: 18080
- *     - include: docs, health, metrics
+ *     port: 18080
+ *     include: docs, health, metrics
  * }</pre>
  */
 @ConfigurationProperties(prefix = "armeria")

File: core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java
Patch:
@@ -258,7 +258,6 @@ public void onError(Throwable cause) {
     @Override
     public void onComplete() {
         isSubscriptionCompleted = true;
-        cancelTimeout();
 
         if (state != State.DONE) {
             write(HttpData.empty(), true);

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcClientFactory.java
Patch:
@@ -19,7 +19,6 @@
 import static com.google.common.collect.ImmutableMap.toImmutableMap;
 import static com.google.common.collect.ImmutableSet.toImmutableSet;
 import static com.linecorp.armeria.internal.client.grpc.GrpcClientUtil.maxInboundMessageSizeBytes;
-import static com.linecorp.armeria.internal.server.grpc.GrpcMethodUtil.extractMethodName;
 import static java.util.Objects.requireNonNull;
 
 import java.util.Arrays;
@@ -128,7 +127,7 @@ public Object newClient(ClientBuilderParams params) {
         final Map<MethodDescriptor<?, ?>, String> simpleMethodNames =
                 serviceDescriptor.getMethods().stream()
                                  .collect(toImmutableMap(Function.identity(),
-                                                         e -> extractMethodName(e.getFullMethodName())));
+                                                         MethodDescriptor::getBareMethodName));
 
         final ClientBuilderParams newParams =
                 addTrailersExtractor(params, options, serializationFormat);

File: grpc/src/main/java/com/linecorp/armeria/internal/server/grpc/GrpcDocServicePlugin.java
Patch:
@@ -20,7 +20,6 @@
 import static com.google.common.collect.ImmutableMap.toImmutableMap;
 import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.concatPaths;
 import static com.linecorp.armeria.internal.server.annotation.AnnotatedDocServicePlugin.endpointInfoBuilder;
-import static com.linecorp.armeria.internal.server.grpc.GrpcMethodUtil.extractMethodName;
 import static java.util.Objects.requireNonNull;
 
 import java.io.UncheckedIOException;
@@ -602,7 +601,7 @@ ServiceInfosBuilder addEndpoint(io.grpc.MethodDescriptor<?, ?> grpcMethod, Endpo
             assert service != null;
 
             final MethodDescriptor method =
-                    service.findMethodByName(extractMethodName(grpcMethod.getFullMethodName()));
+                    service.findMethodByName(grpcMethod.getBareMethodName());
             assert method != null;
 
             methods.put(service, method);

File: grpc/src/test/java/com/linecorp/armeria/internal/server/grpc/GrpcDocServiceTest.java
Patch:
@@ -17,7 +17,6 @@
 package com.linecorp.armeria.internal.server.grpc;
 
 import static com.linecorp.armeria.internal.server.docs.DocServiceUtil.unifyFilter;
-import static com.linecorp.armeria.internal.server.grpc.GrpcMethodUtil.extractMethodName;
 import static net.javacrumbs.jsonunit.fluent.JsonFluentAssert.assertThatJson;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
@@ -161,7 +160,7 @@ void testOk() throws Exception {
                     methodDescriptor,
                     EndpointInfo
                             .builder("*", "/test/armeria.grpc.testing.TestService/" +
-                                          extractMethodName(methodDescriptor.getFullMethodName()))
+                                          methodDescriptor.getBareMethodName())
                             .availableMimeTypes(GrpcSerializationFormats.PROTO.mediaType(),
                                                 GrpcSerializationFormats.JSON.mediaType(),
                                                 GrpcSerializationFormats.PROTO_WEB.mediaType(),
@@ -179,7 +178,7 @@ void testOk() throws Exception {
             serviceInfosBuilder.addEndpoint(
                     methodDescriptor,
                     EndpointInfo.builder("*", "/armeria.grpc.testing.ReconnectService/" +
-                                              extractMethodName(methodDescriptor.getFullMethodName()))
+                                              methodDescriptor.getBareMethodName())
                                 .availableFormats(GrpcSerializationFormats.values())
                                 .build());
         });

File: grpc/src/test/java/com/linecorp/armeria/it/grpc/GrpcDecoratingServiceItTest.java
Patch:
@@ -43,7 +43,7 @@
 
 import io.grpc.stub.StreamObserver;
 
-class GrpcDecoratingServiceTest {
+class GrpcDecoratingServiceItTest {
 
     @RegisterExtension
     static final ServerExtension server = new ServerExtension() {

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/HandlerRegistryTest.java
Patch:
@@ -33,8 +33,8 @@ class HandlerRegistryTest {
     void normalizePath(String path1, String path2, String expected1, String expected2) {
         final HandlerRegistry.Builder builder = new HandlerRegistry.Builder();
         final TestServiceImplBase testService = new TestServiceImplBase() {};
-        final HandlerRegistry handlerRegistry = builder.addService(path1, testService.bindService(), null)
-                                                       .addService(path2, testService.bindService(), null)
+        final HandlerRegistry handlerRegistry = builder.addService(path1, testService.bindService(), null, null)
+                                                       .addService(path2, testService.bindService(), null, null)
                                                        .build();
 
         handlerRegistry.lookupMethod(expected1 + "EmptyCall");

File: core/src/test/java/com/linecorp/armeria/server/file/DefaultMediaTypeResolverTest.java
Patch:
@@ -34,15 +34,15 @@ public void knownExtensions() {
         assertThat(MediaType.PNG.is(RESOLVER.guessFromPath("/static/image.png", null))).isTrue();
         assertThat(MediaType.PDF.is(RESOLVER.guessFromPath("document.pdf", null))).isTrue();
         assertThat(MediaType.WEBP.is(RESOLVER.guessFromPath("image.webp", null))).isTrue();
-        assertThat(MediaType.OCTET_STREAM.is(RESOLVER.guessFromPath("image.png.gz", null))).isTrue();
+        assertThat(MediaType.OCTET_STREAM.is(RESOLVER.guessFromPath("image.png.bin", null))).isTrue();
     }
 
     @Test
     public void preCompressed() {
         assertThat(MediaType.PNG.is(RESOLVER.guessFromPath("image.png.gz", "gzip"))).isTrue();
         assertThat(MediaType.PNG.is(RESOLVER.guessFromPath("/static/image.png.br", "brotli"))).isTrue();
-        assertThat(MediaType.OCTET_STREAM.is(RESOLVER.guessFromPath("image.png.gz", "identity"))).isTrue();
-        assertThat(MediaType.OCTET_STREAM.is(RESOLVER.guessFromPath("image.png.gz", null))).isTrue();
+        assertThat(MediaType.OCTET_STREAM.is(RESOLVER.guessFromPath("image.png.bin", "identity"))).isTrue();
+        assertThat(MediaType.OCTET_STREAM.is(RESOLVER.guessFromPath("image.png.bin", null))).isTrue();
     }
 
     @Test

File: core/src/main/java/com/linecorp/armeria/client/endpoint/WeightRampingUpStrategy.java
Patch:
@@ -137,9 +137,9 @@ final class RampingUpEndpointWeightSelector extends AbstractEndpointSelector {
 
             final AtomicBoolean initialized = new AtomicBoolean();
             endpointGroup.addListener(newEndpoints -> {
-                final List<Endpoint> dedupEndpoints =
-                        new ArrayList<>(deduplicateEndpoints(newEndpoints).values());
                 if (initialized.compareAndSet(false, true)) {
+                    final List<Endpoint> dedupEndpoints =
+                            new ArrayList<>(deduplicateEndpoints(newEndpoints).values());
                     endpointSelector = new WeightedRandomDistributionEndpointSelector(dedupEndpoints);
                     endpointsFinishedRampingUp.addAll(dedupEndpoints);
                 } else {

File: core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroupIntegrationTest.java
Patch:
@@ -213,6 +213,7 @@ void endpoints_duplicateEntries(SessionProtocol protocol) throws Exception {
             endpointGroup.newMeterBinder("baz").bindTo(registry);
 
             assertThat(endpointGroup.endpoints())
+                    .hasSize(3)
                     .containsOnly(Endpoint.of("127.0.0.1", portOne));
 
             assertThat(MoreMeters.measureAll(registry))

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java
Patch:
@@ -1287,7 +1287,9 @@ private Class<?> getContainerType(Type parameterizedType) {
                 Set.class.isAssignableFrom(rawType)) {
                 try {
                     // Only if there is a default constructor.
-                    rawType.getConstructor();
+                    // Note: `requireNonNull()` is redundant here, but it stops Error Prone from complaining
+                    //       about an ignored return value.
+                    requireNonNull(rawType.getConstructor());
                     return rawType;
                 } catch (Throwable cause) {
                     throw new IllegalArgumentException("Unsupported container type: " + rawType.getName(),

File: spring/boot2-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationTest.java
Patch:
@@ -354,9 +354,9 @@ public void testPortConfiguration() {
 
     @Test
     public void testMetrics() {
-        GrpcClients.newClient(newUrl("h2c") + '/', HelloServiceBlockingStub.class)
-                   .hello(HelloRequest.getDefaultInstance())
-                   .getMessage();
+        assertThat(GrpcClients.newClient(newUrl("h2c") + '/', HelloServiceBlockingStub.class)
+                              .hello(HelloRequest.getDefaultInstance())
+                              .getMessage()).isNotNull();
 
         final String metricReport = WebClient.of(newUrl("http"))
                                              .get("/internal/metrics")

File: spring/boot2-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaMeterBindersConfigurationTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.linecorp.armeria.spring;
 
+import static java.util.Objects.requireNonNull;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import java.lang.management.ManagementFactory;
@@ -79,7 +80,7 @@ public void testDefaultMetrics() throws Exception {
         final OperatingSystemMXBean os = ManagementFactory.getOperatingSystemMXBean();
         boolean hasOpenFdCount = false;
         try {
-            os.getClass().getDeclaredMethod("getOpenFileDescriptorCount");
+            requireNonNull(os.getClass().getDeclaredMethod("getOpenFileDescriptorCount"));
             hasOpenFdCount = true;
         } catch (Exception ignored) {
             // Not supported

File: core/src/main/java/com/linecorp/armeria/common/util/CountingSampler.java
Patch:
@@ -74,6 +74,7 @@ static <T> Sampler<T> create(float probability) {
     private final AtomicInteger counter;
     @VisibleForTesting
     final BitSet sampleDecisions;
+    private final int percent;
 
     /** Fills a bitset with decisions according to the supplied percent. */
     CountingSampler(int percent) {
@@ -86,6 +87,7 @@ static <T> Sampler<T> create(float probability) {
     CountingSampler(int percent, Random random) {
         counter = new AtomicInteger();
         sampleDecisions = randomBitSet(100, percent, random);
+        this.percent = percent;
     }
 
     /** loops over the pre-canned decisions, resetting to zero when it gets to the end. */
@@ -96,7 +98,7 @@ public boolean isSampled(Object ignored) {
 
     @Override
     public String toString() {
-        return "CountingSampler()";
+        return "random=" + percent / 100.0;
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/common/util/RateLimitingSampler.java
Patch:
@@ -81,12 +81,14 @@ static <T> Sampler<T> create(int samplesPerSecond) {
     final MaxFunction maxFunction;
     private final AtomicInteger usage = new AtomicInteger();
     private final AtomicLong nextReset;
+    private final int samplesPerSecond;
 
     RateLimitingSampler(int samplesPerSecond) {
         maxFunction =
                 samplesPerSecond < 10 ? new LessThan10(samplesPerSecond) : new AtLeast10(samplesPerSecond);
         final long now = System.nanoTime();
         nextReset = new AtomicLong(now + NANOS_PER_SECOND);
+        this.samplesPerSecond = samplesPerSecond;
     }
 
     @Override
@@ -124,7 +126,7 @@ public boolean isSampled(Object ignored) {
 
     @Override
     public String toString() {
-        return "RateLimitingSampler()";
+        return "rate-limiting=" + samplesPerSecond;
     }
 
     private abstract static class MaxFunction {

File: core/src/main/java/com/linecorp/armeria/common/util/Samplers.java
Patch:
@@ -46,7 +46,7 @@ public boolean isSampled(Object ignored) {
 
         @Override
         public String toString() {
-            return "AlwaysSample";
+            return "always";
         }
     };
 
@@ -62,7 +62,7 @@ public boolean isSampled(Object ignored) {
 
         @Override
         public String toString() {
-            return "NeverSample";
+            return "never";
         }
     };
 

File: core/src/main/java/com/linecorp/armeria/common/util/SystemInfo.java
Patch:
@@ -495,9 +495,6 @@ private static final class DefaultNonLoopbackIPv4Address {
 
         private static boolean isPreferredAddress(InetAddress address) {
             final Predicate<InetAddress> predicates = Flags.preferredIpV4Addresses();
-            if (predicates == null) {
-                return true;
-            }
             return predicates.test(address);
         }
     }

File: grpc/src/test/java/com/linecorp/armeria/it/grpc/GrpcStatusCauseTest.java
Patch:
@@ -28,6 +28,7 @@
 import com.linecorp.armeria.common.Flags;
 import com.linecorp.armeria.common.grpc.StatusCauseException;
 import com.linecorp.armeria.common.util.Exceptions;
+import com.linecorp.armeria.common.util.Sampler;
 import com.linecorp.armeria.grpc.testing.Messages.SimpleRequest;
 import com.linecorp.armeria.grpc.testing.Messages.SimpleResponse;
 import com.linecorp.armeria.grpc.testing.TestServiceGrpc.TestServiceBlockingStub;
@@ -82,7 +83,7 @@ public void setUp() {
     @Test
     public void normal() {
         // These two properties are set in build.gradle.
-        assumeTrue("always".equals(Flags.verboseExceptionSamplerSpec()));
+        assumeTrue(Sampler.always().equals(Flags.verboseExceptionSampler()));
         assumeTrue(Flags.verboseResponses());
 
         assertThatThrownBy(() -> stub.unaryCall(SimpleRequest.getDefaultInstance()))

File: graphql/src/test/java/com/linecorp/armeria/server/graphql/GraphqlServiceBlockingTest.java
Patch:
@@ -57,7 +57,7 @@ protected void configure(ServerBuilder sb) throws Exception {
 
     private static DataFetcher<String> dataFetcher(String value) {
         return environment -> {
-            final ServiceRequestContext ctx = environment.getContext();
+            final ServiceRequestContext ctx = GraphqlServiceContexts.get(environment);
             assertThat(ctx.eventLoop().inEventLoop()).isFalse();
             // Make sure that a ServiceRequestContext is available
             assertThat(ServiceRequestContext.current()).isSameAs(ctx);

File: graphql/src/test/java/com/linecorp/armeria/server/graphql/GraphqlServiceTest.java
Patch:
@@ -72,7 +72,7 @@ protected void configure(ServerBuilder sb) throws Exception {
 
     private static DataFetcher<String> dataFetcher(String value) {
         return environment -> {
-            final ServiceRequestContext ctx = environment.getContext();
+            final ServiceRequestContext ctx = GraphqlServiceContexts.get(environment);
             assertThat(ctx.eventLoop().inEventLoop()).isTrue();
             // Make sure that a ServiceRequestContext is available
             assertThat(ServiceRequestContext.current()).isSameAs(ctx);
@@ -82,7 +82,7 @@ private static DataFetcher<String> dataFetcher(String value) {
 
     private static DataFetcher<String> errorDataFetcher() {
         return environment -> {
-            final ServiceRequestContext ctx = environment.getContext();
+            final ServiceRequestContext ctx = GraphqlServiceContexts.get(environment);
             assertThat(ctx.eventLoop().inEventLoop()).isTrue();
             throw new NullPointerException("npe");
         };

File: core/src/main/java/com/linecorp/armeria/server/RouteBuilder.java
Patch:
@@ -140,7 +140,7 @@ public RouteBuilder path(String prefix, String pathPattern) {
         return pathMapping(new RegexPathMappingWithPrefix(prefix, getPathMapping(pathPattern)));
     }
 
-    static PathMapping globPathMapping(String prefix, String glob, int numGroupsToSkip) {
+    private static PathMapping globPathMapping(String prefix, String glob, int numGroupsToSkip) {
         if (glob.startsWith("/")) {
             return globPathMapping(concatPaths(prefix, glob), numGroupsToSkip);
         }

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcDecoratingService.java
Patch:
@@ -105,7 +105,7 @@ public Set<SerializationFormat> supportedSerializationFormats() {
     }
 
     @Nullable
-    HttpService lookup(ServiceRequestContext ctx) {
+    private HttpService lookup(ServiceRequestContext ctx) {
         final ServerMethodDefinition<?, ?> method = lookupMethodFromAttribute ? ctx.attr(RESOLVED_GRPC_METHOD)
                                                                               : null;
         if (method == null || method.getMethodDescriptor() == null) {

File: core/src/main/java/com/linecorp/armeria/common/util/EventLoopCheckingFuture.java
Patch:
@@ -105,7 +105,7 @@ private void maybeLogIfOnEventLoop() {
                         "ServiceRequestContext.blockingExecutor to run this logic instead or switch to using " +
                         "asynchronous methods like thenApply. If you really believe it is fine to block the " +
                         "event loop like this, you can disable this log message by specifying the " +
-                        "-Dcom.linecorp.armeria.reportBlockedEventLoop=false system property",
+                        "-Dcom.linecorp.armeria.reportBlockedEventLoop=false JVM option.",
                         new IllegalStateException("Blocking event loop, don't do this."));
         }
     }

File: core/src/test/java/com/linecorp/armeria/server/ServiceTest.java
Patch:
@@ -53,7 +53,8 @@ private static void assertDecoration(FooService inner, HttpService outer) throws
         assertThat(outer.as(String.class)).isNull();
 
         // Test if FooService.serviceAdded() is invoked.
-        final ServiceConfig cfg = new ServiceConfig(Route.ofCatchAll(), outer, /* defaultLogName */ null,
+        final ServiceConfig cfg = new ServiceConfig(Route.ofCatchAll(), Route.ofCatchAll(),
+                                                    outer, /* defaultLogName */ null,
                                                     /* defaultServiceName */ null,
                                                     ServiceNaming.of("FooService"), 1, 1, true,
                                                     AccessLogWriter.disabled(), false,

File: grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java
Patch:
@@ -51,7 +51,6 @@
 
 import com.google.protobuf.ByteString;
 import com.google.protobuf.StringValue;
-import com.google.rpc.RequestInfo;
 
 import com.linecorp.armeria.client.ClientFactory;
 import com.linecorp.armeria.client.ClientOptions;
@@ -1499,8 +1498,6 @@ void unimplementedService() throws Exception {
             if (rpcReq != null) {
                 assertThat(rpcReq.params()).containsExactly(Empty.getDefaultInstance());
             }
-            assertThat(headers.get(GrpcHeaderNames.GRPC_STATUS)).isEqualTo(
-                    String.valueOf(Status.UNIMPLEMENTED.getCode().value()));
         });
     }
 

File: grpc/src/test/java/com/linecorp/armeria/internal/server/grpc/GrpcDocServiceTest.java
Patch:
@@ -201,7 +201,7 @@ void testOk() throws Exception {
 
         final JsonNode actualJson = mapper.readTree(res.contentUtf8());
 
-        // The specification generated by ThriftDocServicePlugin does not include the docstrings
+        // The specification generated by GrpcDocServicePlugin does not include the docstrings
         // because it's injected by the DocService, so we remove them here for easier comparison.
         removeDocStrings(actualJson);
         assertThatJson(actualJson).isEqualTo(expectedJson);

File: core/src/main/java/com/linecorp/armeria/client/Http1ClientKeepAliveHandler.java
Patch:
@@ -50,7 +50,7 @@ protected ChannelFuture writePing(ChannelHandlerContext ctx) {
         final int id = httpSession.incrementAndGetNumRequestsSent();
 
         decoder.setPingReqId(id);
-        final ChannelFuture future = encoder.writeHeaders(id, 0, HTTP1_PING_REQUEST, true);
+        final ChannelFuture future = encoder.writeHeaders(id, 0, HTTP1_PING_REQUEST, true, ctx.newPromise());
         ctx.flush();
         return future;
     }

File: core/src/main/java/com/linecorp/armeria/server/ServerHttp1ObjectEncoder.java
Patch:
@@ -92,7 +92,7 @@ public ChannelFuture doWriteHeaders(int id, int streamId, ResponseHeaders header
             converted.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.CLOSE);
             sentConnectionCloseHeader = true;
         }
-        return writeNonInformationalHeaders(id, converted, endStream);
+        return writeNonInformationalHeaders(id, converted, endStream, channel().newPromise());
     }
 
     private HttpResponse convertHeaders(ResponseHeaders headers, boolean endStream, boolean isTrailersEmpty) {

File: examples/grpc/src/test/java/example/armeria/grpc/HelloServiceTest.java
Patch:
@@ -66,8 +66,8 @@ void testsTheErrorUnframedResponseWithJsonContentType() throws InvalidProtocolBu
                                       .join()
                                       .contentUtf8();
         assertThat(response).startsWith(
-                "{\"grpc-code\":\"FAILED_PRECONDITION\",\"message\":\"Name cannot be empty\","
-                + "\"stack-trace\":\"io.grpc.StatusException");
+                "{\"grpc-code\":\"FAILED_PRECONDITION\",\"message\":\"Name cannot be empty\"," +
+                "\"stack-trace\":\"io.grpc.StatusException");
     }
 
     @Test

File: examples/grpc/src/test/java/example/armeria/grpc/HelloServiceTest.java
Patch:
@@ -65,8 +65,9 @@ void testsTheErrorUnframedResponseWithJsonContentType() throws InvalidProtocolBu
                                       .aggregate()
                                       .join()
                                       .contentUtf8();
-        assertThat(response).isEqualTo(
-                "{\"grpc-code\":\"FAILED_PRECONDITION\",\"message\":\"Name cannot be empty\"}");
+        assertThat(response).startsWith(
+                "{\"grpc-code\":\"FAILED_PRECONDITION\",\"message\":\"Name cannot be empty\","
+                + "\"stack-trace\":\"io.grpc.StatusException");
     }
 
     @Test

File: grpc/src/test/java/com/linecorp/armeria/it/grpc/GrpcMetricsIntegrationTest.java
Patch:
@@ -97,6 +97,7 @@ protected void configure(ServerBuilder sb) throws Exception {
                                   .build(),
                        MetricCollectingService.newDecorator(GrpcMeterIdPrefixFunction.of("server")),
                        LoggingService.newDecorator());
+            sb.verboseResponses(false);
         }
     };
 

File: core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java
Patch:
@@ -174,6 +174,7 @@ public void connect(ChannelHandlerContext ctx, SocketAddress remoteAddress, Sock
         } catch (Throwable t) {
             promise.tryFailure(t);
             ctx.close();
+            return;
         } finally {
             if (p.context(this) != null) {
                 p.remove(this);

File: core/src/main/java/com/linecorp/armeria/common/AbstractHttpRequestBuilder.java
Patch:
@@ -217,7 +217,7 @@ public AbstractHttpRequestBuilder queryParam(String name, Object value) {
         if (queryParams == null) {
             queryParams = QueryParams.builder();
         }
-        queryParams.setObject(name, value);
+        queryParams.addObject(name, value);
         return this;
     }
 
@@ -228,7 +228,7 @@ public AbstractHttpRequestBuilder queryParams(
         if (this.queryParams == null) {
             this.queryParams = QueryParams.builder();
         }
-        this.queryParams.set(queryParams);
+        this.queryParams.add(queryParams);
         return this;
     }
 

File: core/src/main/java/com/linecorp/armeria/common/HttpRequestSetters.java
Patch:
@@ -195,7 +195,7 @@ HttpRequestSetters trailers(
     HttpRequestSetters disablePathParams();
 
     /**
-     * Sets a query param for this request. For example:
+     * Adds a query param for this request. For example:
      * <pre>{@code
      * HttpRequest.builder()
      *            .get("/endpoint")
@@ -206,7 +206,7 @@ HttpRequestSetters trailers(
     HttpRequestSetters queryParam(String name, Object value);
 
     /**
-     * Sets multiple query params for this request. For example:
+     * Adds multiple query params for this request. For example:
      * <pre>{@code
      * HttpRequest.builder()
      *            .get("/endpoint")

File: core/src/main/java/com/linecorp/armeria/common/multipart/MimeParser.java
Patch:
@@ -344,7 +344,7 @@ private ByteBuf readBody() {
 
             state = State.END_PART;
             done = true;
-            final ByteBuf body = in.readBytes(bodyLength);
+            final ByteBuf body = safeReadBytes(in, bodyLength);
 
             // Discard a closing boundary
             in.skipBytes(boundaryLength + 2);

File: core/src/main/java/com/linecorp/armeria/client/Endpoint.java
Patch:
@@ -271,7 +271,7 @@ public CompletableFuture<Endpoint> select(ClientRequestContext ctx,
     @Override
     public CompletableFuture<List<Endpoint>> whenReady() {
         if (whenReadyFuture == null) {
-            whenReadyFuture = CompletableFuture.completedFuture(endpoints);
+            whenReadyFuture = UnmodifiableFuture.completedFuture(endpoints);
         }
         return whenReadyFuture;
     }

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRule.java
Patch:
@@ -232,15 +232,15 @@ default CircuitBreakerRule orElse(CircuitBreakerRule other) {
      * > CompletionStage<CircuitBreakerDecision> shouldReportAsSuccess(ClientRequestContext ctx,
      * >                                                               @Nullable Throwable cause) {
      * >     if (cause != null) {
-     * >         return CompletableFuture.completedFuture(CircuitBreakerDecision.failure());
+     * >         return UnmodifiableFuture.completedFuture(CircuitBreakerDecision.failure());
      * >     }
      *
      * >     ResponseHeaders responseHeaders = ctx.log().responseHeaders();
      * >     if (responseHeaders.status().codeClass() == HttpStatusClass.SERVER_ERROR) {
-     * >         return CompletableFuture.completedFuture(CircuitBreakerDecision.failure());
+     * >         return UnmodifiableFuture.completedFuture(CircuitBreakerDecision.failure());
      * >     }
      * >     ...
-     * >     return CompletableFuture.completedFuture(CircuitBreakerDecision.success())
+     * >     return UnmodifiableFuture.completedFuture(CircuitBreakerDecision.success())
      * > }
      * }</pre>
      *

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/AbstractHealthCheckedEndpointGroupBuilder.java
Patch:
@@ -195,7 +195,7 @@ public AbstractHealthCheckedEndpointGroupBuilder auth(AuthToken token) {
     }
 
     @Override
-    protected AbstractHealthCheckedEndpointGroupBuilder allowEmptyEndpoints(boolean allowEmptyEndpoints) {
+    public AbstractHealthCheckedEndpointGroupBuilder allowEmptyEndpoints(boolean allowEmptyEndpoints) {
         return (AbstractHealthCheckedEndpointGroupBuilder) super.allowEmptyEndpoints(allowEmptyEndpoints);
     }
 

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroup.java
Patch:
@@ -16,6 +16,7 @@
 package com.linecorp.armeria.client.endpoint.healthcheck;
 
 import static com.google.common.collect.ImmutableList.toImmutableList;
+import static com.linecorp.armeria.internal.common.util.CollectionUtil.truncate;
 import static java.util.Objects.requireNonNull;
 
 import java.util.ArrayDeque;
@@ -277,9 +278,9 @@ public String toString() {
         final List<Endpoint> endpoints = endpoints();
         final List<Endpoint> delegateEndpoints = delegate.endpoints();
         return MoreObjects.toStringHelper(this)
-                          .add("endpoints", truncatedEndpoints(endpoints))
+                          .add("endpoints", truncate(endpoints, 10))
                           .add("numEndpoints", endpoints.size())
-                          .add("candidates", truncatedEndpoints(delegateEndpoints))
+                          .add("candidates", truncate(delegateEndpoints, 10))
                           .add("numCandidates", delegateEndpoints.size())
                           .add("selectionStrategy", selectionStrategy().getClass())
                           .add("initialized", whenReady().isDone())

File: core/src/main/java/com/linecorp/armeria/client/limit/ConcurrencyLimitBuilder.java
Patch:
@@ -27,6 +27,7 @@
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.util.SafeCloseable;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 
 /**
  * Builds a {@link ConcurrencyLimit}.
@@ -35,7 +36,7 @@
 public final class ConcurrencyLimitBuilder {
 
     static final CompletableFuture<SafeCloseable> noLimitFuture =
-            CompletableFuture.completedFuture(() -> { /* no-op */ });
+            UnmodifiableFuture.completedFuture(() -> { /* no-op */ });
 
     private static final ConcurrencyLimit noLimit = ctx -> noLimitFuture;
 

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleBuilder.java
Patch:
@@ -34,6 +34,7 @@
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.internal.client.AbstractRuleBuilderUtil;
 
 /**
@@ -84,7 +85,7 @@ static RetryRule build(BiFunction<? super ClientRequestContext, ? super Throwabl
         if (decision == RetryDecision.DEFAULT) {
             decisionFuture = DEFAULT_DECISION;
         } else {
-            decisionFuture = CompletableFuture.completedFuture(decision);
+            decisionFuture = UnmodifiableFuture.completedFuture(decision);
         }
 
         return new RetryRule() {

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleUtil.java
Patch:
@@ -24,13 +24,14 @@
 import com.linecorp.armeria.common.HttpResponseDuplicator;
 import com.linecorp.armeria.common.Response;
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 
 final class RetryRuleUtil {
 
     static final CompletableFuture<RetryDecision> NEXT_DECISION =
-            CompletableFuture.completedFuture(RetryDecision.next());
+            UnmodifiableFuture.completedFuture(RetryDecision.next());
     static final CompletableFuture<RetryDecision> DEFAULT_DECISION =
-            CompletableFuture.completedFuture(RetryDecision.retry(Backoff.ofDefault()));
+            UnmodifiableFuture.completedFuture(RetryDecision.retry(Backoff.ofDefault()));
 
     static <T extends Response> RetryRule fromRetryRuleWithContent(RetryRuleWithContent<T> retryRule) {
         return new RetryRule() {

File: core/src/main/java/com/linecorp/armeria/common/stream/DeferredStreamMessage.java
Patch:
@@ -31,6 +31,7 @@
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.util.CompletionActions;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.internal.common.stream.AbortingSubscriber;
 
 import io.netty.util.concurrent.EventExecutor;
@@ -72,7 +73,7 @@ public class DeferredStreamMessage<T> extends AbstractStreamMessage<T> {
             DeferredStreamMessage.class, CompletableFuture.class, "collectingFuture");
 
     private static final CompletableFuture<List<?>> NO_COLLECTING_FUTURE =
-            CompletableFuture.completedFuture(null);
+            UnmodifiableFuture.completedFuture(null);
     private static final SubscriptionImpl NOOP_SUBSCRIPTION = noopSubscription();
 
     @Nullable

File: core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java
Patch:
@@ -586,7 +586,7 @@ default <U> StreamMessage<U> map(Function<? super T, ? extends U> function) {
      * <p>Example:<pre>{@code
      * StreamMessage<Integer> streamMessage = StreamMessage.of(1, 2, 3, 4, 5);
      * StreamMessage<Integer> transformed =
-     *     streamMessage.mapAsync(x -> CompletableFuture.completedFuture(x + 1));
+     *     streamMessage.mapAsync(x -> UnmodifiableFuture.completedFuture(x + 1));
      * }</pre>
      */
     default <U> StreamMessage<U> mapAsync(
@@ -608,7 +608,7 @@ default <U> StreamMessage<U> mapAsync(
      * <p>Example:<pre>{@code
      * StreamMessage<Integer> streamMessage = StreamMessage.of(1, 2, 3, 4, 5);
      * StreamMessage<Integer> transformed =
-     *     streamMessage.mapParallel(x -> CompletableFuture.completedFuture(x + 1));
+     *     streamMessage.mapParallel(x -> UnmodifiableFuture.completedFuture(x + 1));
      * }</pre>
      */
     @UnstableApi
@@ -632,7 +632,7 @@ default <U> StreamMessage<U> mapParallel(
      * <p>Example:<pre>{@code
      * StreamMessage<Integer> streamMessage = StreamMessage.of(1, 2, 3, 4, 5);
      * StreamMessage<Integer> transformed =
-     *     streamMessage.mapParallel(x -> CompletableFuture.completedFuture(x + 1), 20);
+     *     streamMessage.mapParallel(x -> UnmodifiableFuture.completedFuture(x + 1), 20);
      * }</pre>
      */
     @UnstableApi

File: core/src/main/java/com/linecorp/armeria/internal/client/endpoint/StaticEndpointGroup.java
Patch:
@@ -48,7 +48,7 @@ public final class StaticEndpointGroup implements EndpointGroup {
     public StaticEndpointGroup(EndpointSelectionStrategy selectionStrategy,
                                Iterable<Endpoint> endpoints) {
         this.endpoints = ImmutableList.copyOf(requireNonNull(endpoints, "endpoints"));
-        initialEndpointsFuture = CompletableFuture.completedFuture(this.endpoints);
+        initialEndpointsFuture = UnmodifiableFuture.completedFuture(this.endpoints);
         this.selectionStrategy = requireNonNull(selectionStrategy, "selectionStrategy");
         selector = selectionStrategy.newSelector(this);
     }

File: core/src/main/java/com/linecorp/armeria/internal/common/CancellationScheduler.java
Patch:
@@ -515,6 +515,7 @@ public interface CancellationTask {
     }
 
     private static class CancellationFuture extends UnmodifiableFuture<Throwable> {
+        @Override
         protected void doComplete(@Nullable Throwable cause) {
             super.doComplete(cause);
         }

File: core/src/main/java/com/linecorp/armeria/internal/common/util/ChannelUtil.java
Patch:
@@ -36,6 +36,7 @@
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.TransportType;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelFutureListener;
@@ -155,7 +156,7 @@ public static Set<ChannelOption<?>> prohibitedOptions() {
     public static CompletableFuture<Void> close(Iterable<? extends Channel> channels) {
         final List<Channel> channelsCopy = ImmutableList.copyOf(channels);
         if (channelsCopy.isEmpty()) {
-            return CompletableFuture.completedFuture(null);
+            return UnmodifiableFuture.completedFuture(null);
         }
 
         final AtomicInteger numChannelsToClose = new AtomicInteger(channelsCopy.size());

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java
Patch:
@@ -485,7 +485,7 @@ private static CompletionStage<?> toCompletionStage(@Nullable Object obj, Execut
         if (obj != null && ScalaUtil.isScalaFuture(obj.getClass())) {
             return ScalaUtil.FutureConverter.toCompletableFuture((scala.concurrent.Future<?>) obj, executor);
         }
-        return CompletableFuture.completedFuture(obj);
+        return UnmodifiableFuture.completedFuture(obj);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/server/auth/Authorizer.java
Patch:
@@ -16,12 +16,12 @@
 
 package com.linecorp.armeria.server.auth;
 
-import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
 
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.auth.AuthorizerChain.AuthorizerSelectionStrategy;
 
@@ -57,7 +57,7 @@ public interface Authorizer<T> {
     default CompletionStage<AuthorizationStatus> authorizeAndSupplyHandlers(ServiceRequestContext ctx,
                                                                             @Nullable T data) {
         if (data == null) {
-            return CompletableFuture.completedFuture(AuthorizationStatus.of(false));
+            return UnmodifiableFuture.completedFuture(AuthorizationStatus.of(false));
         }
         return authorize(ctx, data).thenApply(b -> {
             if (b == null) {

File: core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerChain.java
Patch:
@@ -21,12 +21,12 @@
 
 import java.util.Iterator;
 import java.util.List;
-import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
 
 import com.google.common.collect.ImmutableList;
 
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 /**
@@ -113,7 +113,7 @@ private CompletionStage<AuthorizationStatus> authorizeAndSupplyHandlers(
                 if (result.isAuthorized()) {
                     // always return associated successHandler on success!
                     // this could be NULL
-                    return CompletableFuture.completedFuture(
+                    return UnmodifiableFuture.completedFuture(
                             AuthorizationStatus.ofSuccess(result.successHandler()));
                 }
                 // handle failure result
@@ -151,7 +151,7 @@ private CompletionStage<AuthorizationStatus> authorizeAndSupplyHandlers(
                 }
                 if (!iterator.hasNext()) {
                     // this is the last item in the chain
-                    return CompletableFuture.completedFuture(
+                    return UnmodifiableFuture.completedFuture(
                             AuthorizationStatus.ofFailure(
                                     (selectionStrategy == AuthorizerSelectionStrategy.LAST) ? nextFailureHandler
                                                                                             : failureHandler));

File: core/src/main/java/com/linecorp/armeria/server/auth/AuthorizerUtil.java
Patch:
@@ -17,9 +17,8 @@
 
 import java.util.concurrent.CompletionStage;
 
-import com.spotify.futures.CompletableFutures;
-
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 final class AuthorizerUtil {
@@ -40,7 +39,7 @@ static <T> CompletionStage<AuthorizationStatus> authorizeAndSupplyHandlers(Autho
             }
             return f;
         } catch (Throwable cause) {
-            return CompletableFutures.exceptionallyCompletedFuture(cause);
+            return UnmodifiableFuture.exceptionallyCompletedFuture(cause);
         }
     }
 

File: core/src/main/java/com/linecorp/armeria/server/logging/AccessLogWriter.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.concurrent.CompletableFuture;
 
 import com.linecorp.armeria.common.logging.RequestLog;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.server.Service;
 
 /**
@@ -102,6 +103,6 @@ public CompletableFuture<Void> shutdown() {
      *         when this {@link AccessLogWriter} has been shut down.
      */
     default CompletableFuture<Void> shutdown() {
-        return CompletableFuture.completedFuture(null);
+        return UnmodifiableFuture.completedFuture(null);
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/throttling/RateLimitingThrottlingStrategy.java
Patch:
@@ -17,7 +17,6 @@
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static java.util.Objects.requireNonNull;
-import static java.util.concurrent.CompletableFuture.completedFuture;
 
 import java.util.concurrent.CompletionStage;
 
@@ -26,6 +25,7 @@
 
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 /**
@@ -66,6 +66,6 @@ final class RateLimitingThrottlingStrategy<T extends Request> extends Throttling
 
     @Override
     public CompletionStage<Boolean> accept(ServiceRequestContext ctx, T request) {
-        return completedFuture(rateLimiter.tryAcquire());
+        return UnmodifiableFuture.completedFuture(rateLimiter.tryAcquire());
     }
 }

File: core/src/test/java/com/linecorp/armeria/client/HttpResponseDecoderTest.java
Patch:
@@ -18,7 +18,6 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 import java.nio.channels.Channel;
-import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -44,6 +43,7 @@
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.common.stream.AbortedStreamException;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.testing.junit5.server.ServerExtension;
 
@@ -68,7 +68,7 @@ void confirmResponseStartAndEndInTheSameThread(SessionProtocol protocol)
             throws InterruptedException {
         final AtomicBoolean failed = new AtomicBoolean();
         final RetryRule strategy = (ctx, cause) ->
-                CompletableFuture.completedFuture(RetryDecision.retry(Backoff.withoutDelay()));
+                UnmodifiableFuture.completedFuture(RetryDecision.retry(Backoff.withoutDelay()));
 
         final WebClientBuilder builder = WebClient.builder(server.uri(protocol));
         // In order to use a different thread to subscribe to the response.

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClientTest.java
Patch:
@@ -26,7 +26,6 @@
 import static org.mockito.Mockito.when;
 
 import java.time.Duration;
-import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.function.BiFunction;
 import java.util.function.Function;
@@ -47,6 +46,7 @@
 import com.linecorp.armeria.common.HttpResponseWriter;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.ResponseHeaders;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.testing.junit5.server.ServerExtension;
 
@@ -422,7 +422,7 @@ private static CircuitBreakerRule rule() {
      * A rule with content that returns failure when am exception is thrown, and success otherwise.
      */
     private static CircuitBreakerRuleWithContent<HttpResponse> ruleWithResponse() {
-        return (ctx, response, cause) -> CompletableFuture.completedFuture(
+        return (ctx, response, cause) -> UnmodifiableFuture.completedFuture(
                 cause == null ? CircuitBreakerDecision.failure() : CircuitBreakerDecision.success());
     }
 }

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/KeyedRetryConfigMappingTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.client.circuitbreaker;
 
-import static java.util.concurrent.CompletableFuture.completedFuture;
+import static com.linecorp.armeria.common.util.UnmodifiableFuture.completedFuture;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import java.util.function.BiFunction;

File: core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroupTest.java
Patch:
@@ -16,7 +16,7 @@
 package com.linecorp.armeria.client.endpoint.healthcheck;
 
 import static com.linecorp.armeria.client.endpoint.healthcheck.AbstractHealthCheckedEndpointGroupBuilder.DEFAULT_HEALTH_CHECK_RETRY_BACKOFF;
-import static java.util.concurrent.CompletableFuture.completedFuture;
+import static com.linecorp.armeria.common.util.UnmodifiableFuture.completedFuture;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.awaitility.Awaitility.await;

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryRuleWithContentBuilderTest.java
Patch:
@@ -19,7 +19,6 @@
 import static com.linecorp.armeria.client.retry.RetryRuleBuilderTest.assertBackoff;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
-import java.util.concurrent.CompletableFuture;
 import java.util.stream.Stream;
 
 import org.junit.jupiter.api.BeforeEach;
@@ -40,6 +39,7 @@
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.RpcResponse;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 
 class RetryRuleWithContentBuilderTest {
 
@@ -65,7 +65,7 @@ void shouldSetRule() {
                 .hasMessageContaining("Should set at least one retry rule");
 
         RetryRuleWithContent.builder(HttpMethod.HEAD)
-                            .onResponse((unused, response) -> CompletableFuture.completedFuture(true))
+                            .onResponse((unused, response) -> UnmodifiableFuture.completedFuture(true))
                             .thenBackoff();
     }
 

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientLoadBalancingTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.net.InetSocketAddress;
 import java.util.List;
-import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CopyOnWriteArrayList;
 
 import org.junit.jupiter.api.extension.RegisterExtension;
@@ -37,6 +36,7 @@
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.logging.RequestLogProperty;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.testing.junit5.server.ServerExtension;
 
@@ -106,9 +106,9 @@ void test(TestMode mode) {
 
             // Retry only once on failure.
             if (!HttpStatus.OK.equals(status) && AbstractRetryingClient.getTotalAttempts(ctx) <= 1) {
-                return CompletableFuture.completedFuture(RetryDecision.retry(Backoff.withoutDelay()));
+                return UnmodifiableFuture.completedFuture(RetryDecision.retry(Backoff.withoutDelay()));
             } else {
-                return CompletableFuture.completedFuture(RetryDecision.noRetry());
+                return UnmodifiableFuture.completedFuture(RetryDecision.noRetry());
             }
         };
         final WebClient c = WebClient.builder(SessionProtocol.H2C, group)

File: core/src/test/java/com/linecorp/armeria/common/multipart/MimeParserTest.java
Patch:
@@ -150,7 +150,7 @@ void testMsg() {
                                       "Content-Transfer-Encoding: binary\n" +
                                       "Content-Id: part2\n" +
                                       '\n').getBytes(),
-                                     new byte[]{ (byte) 0xff, (byte) 0xd8 },
+                                     new byte[] { (byte) 0xff, (byte) 0xd8 },
                                      ("\n--" + boundary + "--").getBytes());
 
         final List<AggregatedBodyPart> parts = parse(boundary, chunk1);
@@ -238,7 +238,7 @@ void testNoClosingBoundary() {
                                       "Content-Transfer-Encoding: binary\n" +
                                       "Content-Id: part2\n" +
                                       '\n').getBytes(),
-                                     new byte[]{ (byte) 0xff, (byte) 0xd8 });
+                                     new byte[] { (byte) 0xff, (byte) 0xd8 });
 
         assertThatThrownBy(() -> parse(boundary, chunk1))
                 .isInstanceOf(MimeParsingException.class)
@@ -314,7 +314,7 @@ void testInvalidClosingBoundary() {
                                       "Content-Transfer-Encoding: binary\n" +
                                       "Content-Id: part2\n" +
                                       '\n').getBytes(),
-                                     new byte[]{ (byte) 0xff, (byte) 0xd8 },
+                                     new byte[] { (byte) 0xff, (byte) 0xd8 },
                                      ("\n--" + boundary).getBytes());
 
         assertThatThrownBy(() -> parse(boundary, chunk1))

File: core/src/test/java/com/linecorp/armeria/common/multipart/MultipartTest.java
Patch:
@@ -29,6 +29,7 @@
 
 import com.linecorp.armeria.common.AggregatedHttpObject;
 import com.linecorp.armeria.common.ContentDisposition;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 
 public class MultipartTest {
     @TempDir
@@ -88,7 +89,7 @@ void collectHandleNullName() {
                             "hello4")
         ).collect(bodyPart -> {
             if (bodyPart.name() == null) {
-                return CompletableFuture.completedFuture(null);
+                return UnmodifiableFuture.completedFuture(null);
             }
             if (bodyPart.filename() != null) {
                 final Path path = tempDir.resolve(bodyPart.name());

File: core/src/test/java/com/linecorp/armeria/common/stream/StreamMessageCollectingTest.java
Patch:
@@ -372,7 +372,7 @@ private static StreamMessage<HttpData> newStreamMessage(HttpData[] httpData, boo
     private static Map<HttpData, ByteBuf> newHttpData(int size) {
         final ImmutableMap.Builder<HttpData, ByteBuf> builder = ImmutableMap.builderWithExpectedSize(size);
         for (int i = 0; i < size; i++) {
-            final ByteBuf buf = Unpooled.wrappedBuffer(new byte[]{ (byte) i });
+            final ByteBuf buf = Unpooled.wrappedBuffer(new byte[] { (byte) i });
             builder.put(HttpData.wrap(buf), buf);
         }
         return builder.build();
@@ -381,7 +381,7 @@ private static Map<HttpData, ByteBuf> newHttpData(int size) {
     private static void assertData(List<HttpData> httpData, int size) {
         assertThat(httpData).hasSize(size);
         for (int i = 0; i < size; i++) {
-            assertThat(httpData.get(i).array()).isEqualTo(new byte[]{ (byte) i });
+            assertThat(httpData.get(i).array()).isEqualTo(new byte[] { (byte) i });
         }
     }
 

File: core/src/test/java/com/linecorp/armeria/internal/common/ContextFutureCallbackArgumentsProvider.java
Patch:
@@ -30,6 +30,7 @@
 import com.google.common.util.concurrent.MoreExecutors;
 
 import com.linecorp.armeria.common.RequestContext;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 
 public class ContextFutureCallbackArgumentsProvider implements ArgumentsProvider {
     static final class CallbackResult {
@@ -75,7 +76,7 @@ public Stream<? extends Arguments> provideArguments(ExtensionContext context) th
                     future.thenRunAsync(() -> fn.apply(result), MoreExecutors.directExecutor())
                           .exceptionally(cause -> fn.apply(result));
                 });
-        final CompletableFuture<Void> completedFuture = CompletableFuture.completedFuture(null);
+        final CompletableFuture<Void> completedFuture = UnmodifiableFuture.completedFuture(null);
         final Arguments thenCombine = Arguments.of(
                 (BiConsumer<CompletableFuture<?>, CallbackResult>) (future, result) -> {
                     future.thenCombine(completedFuture, (a, b) -> fn.apply(result))

File: core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedDocServiceTest.java
Patch:
@@ -60,6 +60,7 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.internal.server.annotation.AnnotatedDocServicePluginTest.CompositeBean;
 import com.linecorp.armeria.internal.testing.TestUtil;
 import com.linecorp.armeria.server.ServerBuilder;
@@ -403,7 +404,7 @@ public <T> T foo(@Header @Description("header parameter") int header,
         @Trace
         @Path("/allMethods")
         public CompletableFuture<?> allMethods() {
-            return CompletableFuture.completedFuture(HttpResponse.of("allMethods"));
+            return UnmodifiableFuture.completedFuture(HttpResponse.of("allMethods"));
         }
 
         @Get("/ints")

File: core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceResponseConverterTest.java
Patch:
@@ -56,6 +56,7 @@
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.sse.ServerSentEvent;
 import com.linecorp.armeria.common.stream.CancelledSubscriptionException;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.annotation.AdditionalHeader;
@@ -327,7 +328,7 @@ public HttpResult<List<String>> expectCustomTrailers() {
                 @ProducesJson
                 public HttpResult<CompletionStage<Map<String, String>>> asyncExpectCustomHeader() {
                     return HttpResult.of(HttpHeaders.of(HttpHeaderNames.of("x-custom-header"), "value"),
-                                         CompletableFuture.completedFuture(ImmutableMap.of("a", "b")));
+                                         UnmodifiableFuture.completedFuture(ImmutableMap.of("a", "b")));
                 }
 
                 @Get("/async/expect-custom-trailers")

File: core/src/test/java/com/linecorp/armeria/server/auth/AuthServiceTest.java
Patch:
@@ -17,7 +17,7 @@
 package com.linecorp.armeria.server.auth;
 
 import static com.linecorp.armeria.common.HttpHeaderNames.AUTHORIZATION;
-import static java.util.concurrent.CompletableFuture.completedFuture;
+import static com.linecorp.armeria.common.util.UnmodifiableFuture.completedFuture;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import java.nio.charset.StandardCharsets;

File: core/src/test/java/com/linecorp/armeria/server/auth/AuthorizerTest.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.linecorp.armeria.server.auth;
 
-import static com.spotify.futures.CompletableFutures.exceptionallyCompletedFuture;
-import static java.util.concurrent.CompletableFuture.completedFuture;
+import static com.linecorp.armeria.common.util.UnmodifiableFuture.completedFuture;
+import static com.linecorp.armeria.common.util.UnmodifiableFuture.exceptionallyCompletedFuture;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.mockito.ArgumentMatchers.any;

File: core/src/test/java/com/linecorp/armeria/server/healthcheck/ScheduledHealthCheckerTest.java
Patch:
@@ -29,6 +29,7 @@
 
 import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.HttpStatus;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.server.Server;
 
 class ScheduledHealthCheckerTest {
@@ -141,7 +142,7 @@ void awareUnhealthy() {
         final AtomicBoolean health = new AtomicBoolean(true);
         final ScheduledHealthChecker healthChecker =
                 (ScheduledHealthChecker) HealthChecker.of(
-                        () -> CompletableFuture.completedFuture(new HealthCheckStatus(health.get(), 100)),
+                        () -> UnmodifiableFuture.completedFuture(new HealthCheckStatus(health.get(), 100)),
                         Duration.ofDays(10));
         final Server server =
                 Server.builder()

File: core/src/test/java/com/linecorp/armeria/server/logging/ContentPreviewingServiceTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.server.logging;
 
-import static java.util.concurrent.CompletableFuture.completedFuture;
+import static com.linecorp.armeria.common.util.UnmodifiableFuture.completedFuture;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;

File: core/src/test/java/com/linecorp/armeria/server/throttling/ThrottlingServiceTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package com.linecorp.armeria.server.throttling;
 
+import static com.linecorp.armeria.common.util.UnmodifiableFuture.completedFuture;
 import static com.linecorp.armeria.server.throttling.ThrottlingStrategy.always;
 import static com.linecorp.armeria.server.throttling.ThrottlingStrategy.never;
-import static java.util.concurrent.CompletableFuture.completedFuture;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import org.junit.Rule;

File: core/src/test/java/com/linecorp/armeria/server/throttling/ThrottlingStrategyTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.server.throttling;
 
-import static java.util.concurrent.CompletableFuture.completedFuture;
+import static com.linecorp.armeria.common.util.UnmodifiableFuture.completedFuture;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import java.util.concurrent.CompletionStage;

File: examples/saml-service-provider/src/main/java/example/armeria/server/saml/sp/MyAuthHandler.java
Patch:
@@ -2,7 +2,6 @@
 
 import static com.linecorp.armeria.server.saml.SamlUtil.getNameId;
 
-import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
 
 import org.opensaml.messaging.context.MessageContext;
@@ -23,6 +22,7 @@
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.auth.Authorizer;
 import com.linecorp.armeria.server.saml.SamlNameIdFormat;
@@ -46,12 +46,12 @@ final class MyAuthHandler implements Authorizer<HttpRequest>, SamlSingleSignOnHa
     public CompletionStage<Boolean> authorize(ServiceRequestContext ctx, HttpRequest data) {
         final String cookie = data.headers().get(HttpHeaderNames.COOKIE);
         if (cookie == null) {
-            return CompletableFuture.completedFuture(false);
+            return UnmodifiableFuture.completedFuture(false);
         }
 
         final boolean authenticated = Cookie.fromCookieHeader(cookie).stream().anyMatch(
                 c -> "username".equals(c.name()) && !Strings.isNullOrEmpty(c.value()));
-        return CompletableFuture.completedFuture(authenticated);
+        return UnmodifiableFuture.completedFuture(authenticated);
     }
 
     /**

File: grpc-protocol/src/main/java/com/linecorp/armeria/client/grpc/protocol/UnaryGrpcClient.java
Patch:
@@ -52,6 +52,7 @@
 import com.linecorp.armeria.common.grpc.protocol.GrpcWebTrailers;
 import com.linecorp.armeria.common.grpc.protocol.StatusMessageEscaper;
 import com.linecorp.armeria.common.stream.SubscriptionOption;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.internal.client.grpc.protocol.InternalGrpcWebUtil;
 import com.linecorp.armeria.internal.common.grpc.protocol.StatusCodes;
 import com.linecorp.armeria.internal.common.grpc.protocol.UnaryGrpcSerializationFormats;
@@ -204,7 +205,7 @@ public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) {
                                    GrpcWebTrailers.set(ctx, msg.trailers());
                                }
                                // Nothing to deframe.
-                               return CompletableFuture.completedFuture(msg.toHttpResponse());
+                               return UnmodifiableFuture.completedFuture(msg.toHttpResponse());
                            }
 
                            final CompletableFuture<HttpResponse> responseFuture = new CompletableFuture<>();

File: grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcWebTextTest.java
Patch:
@@ -43,6 +43,7 @@
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer;
 import com.linecorp.armeria.common.grpc.protocol.DeframedMessage;
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.grpc.testing.Messages.Payload;
 import com.linecorp.armeria.grpc.testing.Messages.SimpleRequest;
 import com.linecorp.armeria.grpc.testing.Messages.SimpleResponse;
@@ -210,7 +211,7 @@ private static CompletableFuture<ByteBuf> handleMessage(ByteBuf message) {
             final SimpleResponse response = SimpleResponse.newBuilder()
                                                           .setPayload(request.getPayload())
                                                           .build();
-            return CompletableFuture.completedFuture(
+            return UnmodifiableFuture.completedFuture(
                     Unpooled.wrappedBuffer(response.toByteArray()));
         }
     }

File: grpc/src/test/java/com/linecorp/armeria/internal/client/grpc/GrpcClientUnwrapTest.java
Patch:
@@ -17,8 +17,6 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import java.util.concurrent.CompletableFuture;
-
 import org.junit.jupiter.api.Test;
 
 import com.linecorp.armeria.client.Client;
@@ -28,6 +26,7 @@
 import com.linecorp.armeria.client.logging.LoggingClient;
 import com.linecorp.armeria.client.retry.RetryDecision;
 import com.linecorp.armeria.client.retry.RetryingClient;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.common.util.Unwrappable;
 import com.linecorp.armeria.grpc.testing.TestServiceGrpc.TestServiceBlockingStub;
 
@@ -39,7 +38,7 @@ void test() {
                 GrpcClients.builder("http://127.0.0.1:1/")
                            .decorator(LoggingClient.newDecorator())
                            .decorator(RetryingClient.newDecorator(
-                                   (ctx, cause) -> CompletableFuture.completedFuture(RetryDecision.noRetry())))
+                                   (ctx, cause) -> UnmodifiableFuture.completedFuture(RetryDecision.noRetry())))
                            .build(TestServiceBlockingStub.class);
 
         assertThat(Clients.unwrap(client, TestServiceBlockingStub.class)).isSameAs(client);

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceServerTest.java
Patch:
@@ -997,7 +997,7 @@ void grpcWeb() throws Exception {
                 GrpcTestUtil.uncompressedFrame(GrpcTestUtil.requestByteBuf())).aggregate().get();
         final byte[] serializedStatusHeader = "grpc-status: 0\r\n".getBytes(StandardCharsets.US_ASCII);
         final byte[] serializedTrailers = Bytes.concat(
-                new byte[]{ TRAILERS_FRAME_HEADER },
+                new byte[] { TRAILERS_FRAME_HEADER },
                 Ints.toByteArray(serializedStatusHeader.length),
                 serializedStatusHeader);
         assertThat(response.content().array()).containsExactly(
@@ -1033,7 +1033,7 @@ void grpcWebText() throws Exception {
 
         final byte[] serializedStatusHeader = "grpc-status: 0\r\n".getBytes(StandardCharsets.US_ASCII);
         final byte[] serializedTrailers = Bytes.concat(
-                new byte[]{ TRAILERS_FRAME_HEADER },
+                new byte[] { TRAILERS_FRAME_HEADER },
                 Ints.toByteArray(serializedStatusHeader.length),
                 serializedStatusHeader);
         assertThat(response.content().array()).containsExactly(

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnaryGrpcServiceTest.java
Patch:
@@ -20,7 +20,6 @@
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
 import java.io.UncheckedIOException;
-import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
 import java.util.stream.Stream;
 
@@ -45,6 +44,7 @@
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaStatusException;
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
 import com.linecorp.armeria.common.grpc.protocol.GrpcWebTrailers;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.grpc.testing.Messages;
 import com.linecorp.armeria.grpc.testing.Messages.EchoStatus;
 import com.linecorp.armeria.grpc.testing.Messages.Payload;
@@ -102,7 +102,7 @@ protected CompletionStage<byte[]> handleMessage(ServiceRequestContext ctx, byte[
             } else {
                 // For normalUpstream() and normalDownstream()
                 assertThat(request).isEqualTo(REQUEST_MESSAGE);
-                return CompletableFuture.completedFuture(RESPONSE_MESSAGE.toByteArray());
+                return UnmodifiableFuture.completedFuture(RESPONSE_MESSAGE.toByteArray());
             }
         }
     }

File: it/grpcweb/src/test/java/com/example/helloworld/GreeterServiceImpl.java
Patch:
@@ -15,9 +15,10 @@
  */
 package com.example.helloworld;
 
-import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
 
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
+
 import akka.NotUsed;
 import akka.actor.typed.ActorSystem;
 import akka.japi.Pair;
@@ -51,7 +52,7 @@ public GreeterServiceImpl(ActorSystem<?> system) {
 
     @Override
     public CompletionStage<HelloReply> sayHello(HelloRequest request) {
-        return CompletableFuture.completedFuture(
+        return UnmodifiableFuture.completedFuture(
                 HelloReply.newBuilder()
                           .setMessage("Hello, " + request.getName())
                           .build()

File: junit5/src/main/java/com/linecorp/armeria/internal/testing/ServerRuleDelegate.java
Patch:
@@ -33,6 +33,7 @@
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerBuilder;
 
@@ -121,7 +122,7 @@ public Server start() {
     public CompletableFuture<Void> stop() {
         final Server server = this.server.getAndSet(null);
         if (server == null || server.activePorts().isEmpty()) {
-            return CompletableFuture.completedFuture(null);
+            return UnmodifiableFuture.completedFuture(null);
         }
 
         return server.stop();

File: oauth2/src/main/java/com/linecorp/armeria/client/auth/oauth2/AbstractOAuth2AuthorizationGrant.java
Patch:
@@ -36,6 +36,7 @@
 import com.linecorp.armeria.common.auth.oauth2.InvalidClientException;
 import com.linecorp.armeria.common.auth.oauth2.TokenRequestException;
 import com.linecorp.armeria.common.auth.oauth2.UnsupportedMediaTypeException;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.internal.client.auth.oauth2.RefreshAccessTokenRequest;
 
 /**
@@ -63,7 +64,7 @@ abstract class AbstractOAuth2AuthorizationGrant implements OAuth2AuthorizationGr
     private final Consumer<? super GrantedOAuth2AccessToken> newTokenConsumer;
 
     private volatile CompletableFuture<GrantedOAuth2AccessToken> tokenFuture =
-            CompletableFuture.completedFuture(null);
+            UnmodifiableFuture.completedFuture(null);
 
     AbstractOAuth2AuthorizationGrant(
             RefreshAccessTokenRequest refreshRequest, Duration refreshBefore,

File: oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizer.java
Patch:
@@ -21,7 +21,6 @@
 import static java.util.Objects.requireNonNull;
 
 import java.util.Set;
-import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
 
 import com.github.benmanes.caffeine.cache.Cache;
@@ -32,6 +31,7 @@
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.auth.OAuth2Token;
 import com.linecorp.armeria.common.auth.oauth2.OAuth2TokenDescriptor;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.internal.server.auth.oauth2.TokenIntrospectionRequest;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.auth.AbstractAuthorizerWithHandlers;
@@ -66,7 +66,7 @@ public static OAuth2TokenIntrospectionAuthorizerBuilder builder(WebClient intros
     static final String INVALID_TOKEN = "invalid_token";
 
     private static final CompletionStage<AuthorizationStatus> SUCCESS_STATUS_FUTURE =
-            CompletableFuture.completedFuture(AuthorizationStatus.ofSuccess());
+            UnmodifiableFuture.completedFuture(AuthorizationStatus.ofSuccess());
 
     private final Cache<String, OAuth2TokenDescriptor> tokenCache;
     private final Set<String> permittedScope;
@@ -95,7 +95,7 @@ public static OAuth2TokenIntrospectionAuthorizerBuilder builder(WebClient intros
                                                                                :
                                                       String.join(" ", permittedScope));
         failureStatus = AuthorizationStatus.ofFailure(authFailureHandler);
-        failureStatusFuture = CompletableFuture.completedFuture(failureStatus);
+        failureStatusFuture = UnmodifiableFuture.completedFuture(failureStatus);
     }
 
     /**

File: resteasy/src/main/java/com/linecorp/armeria/server/resteasy/ResteasyAsynchronousExecutionContextImpl.java
Patch:
@@ -29,6 +29,8 @@
 import org.jboss.resteasy.spi.ResteasyAsynchronousResponse;
 import org.jboss.resteasy.spi.RunnableWithException;
 
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
+
 import io.netty.util.concurrent.FastThreadLocalThread;
 
 /**
@@ -120,7 +122,7 @@ public CompletionStage<Void> executeBlockingIo(RunnableWithException f,
                 ret.completeExceptionally(e);
                 return ret;
             }
-            return CompletableFuture.completedFuture(null);
+            return UnmodifiableFuture.completedFuture(null);
         } else if (!hasInterceptors) {
             final Map<Class<?>, Object> context = ResteasyContext.getContextDataMap();
             // turn any sync request into async

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlSingleSignOnHandler.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.linecorp.armeria.server.saml;
 
-import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
 
 import org.opensaml.messaging.context.MessageContext;
@@ -29,6 +28,7 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 /**
@@ -49,7 +49,7 @@ public interface SamlSingleSignOnHandler {
     default CompletionStage<Void> beforeInitiatingSso(ServiceRequestContext ctx, HttpRequest req,
                                                       MessageContext<AuthnRequest> message,
                                                       SamlIdentityProviderConfig idpConfig) {
-        return CompletableFuture.completedFuture(null);
+        return UnmodifiableFuture.completedFuture(null);
     }
 
     /**

File: thrift0.13/src/test/java/com/linecorp/armeria/common/thrift/AsyncMethodCallbacksTest.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.linecorp.armeria.common.thrift;
 
-import static com.spotify.futures.CompletableFutures.exceptionallyCompletedFuture;
-import static java.util.concurrent.CompletableFuture.completedFuture;
+import static com.linecorp.armeria.common.util.UnmodifiableFuture.completedFuture;
+import static com.linecorp.armeria.common.util.UnmodifiableFuture.exceptionallyCompletedFuture;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.argThat;
 import static org.mockito.ArgumentMatchers.isA;

File: thrift0.13/src/test/java/com/linecorp/armeria/it/server/GracefulShutdownIntegrationTest.java
Patch:
@@ -40,6 +40,7 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.logging.RequestLog;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.internal.testing.FlakyTest;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerBuilder;
@@ -81,7 +82,7 @@ public void log(RequestLog log) {}
                 @Override
                 public CompletableFuture<Void> shutdown() {
                     accessLogWriterCounter1.getAndIncrement();
-                    return CompletableFuture.completedFuture(null);
+                    return UnmodifiableFuture.completedFuture(null);
                 }
             };
             final AccessLogWriter writer2 = new AccessLogWriter() {
@@ -91,7 +92,7 @@ public void log(RequestLog log) {}
                 @Override
                 public CompletableFuture<Void> shutdown() {
                     accessLogWriterCounter2.getAndIncrement();
-                    return CompletableFuture.completedFuture(null);
+                    return UnmodifiableFuture.completedFuture(null);
                 }
             };
             sb.route()

File: thrift0.13/src/test/java/com/linecorp/armeria/server/thrift/THttpServiceBuilderTest.java
Patch:
@@ -24,8 +24,6 @@
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;
 
-import java.util.concurrent.CompletableFuture;
-
 import org.apache.thrift.TException;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.RegisterExtension;
@@ -35,6 +33,7 @@
 import com.linecorp.armeria.common.RpcResponse;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.thrift.ThriftSerializationFormats;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.SimpleDecoratingRpcService;
@@ -78,7 +77,7 @@ protected void configure(ServerBuilder sb) throws Exception {
                         @Override
                         public RpcResponse serve(ServiceRequestContext ctx, RpcRequest req) throws Exception {
                             return RpcResponse.from(
-                                    ctx.makeContextAware(CompletableFuture.completedFuture(new Object()))
+                                    ctx.makeContextAware(UnmodifiableFuture.completedFuture(new Object()))
                                        .thenCompose(userInfo -> {
                                            try {
                                                return unwrap().serve(ctx, req);

File: retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaRetrofitBuilder.java
Patch:
@@ -151,7 +151,7 @@ public ArmeriaRetrofitBuilder nonBaseClientFactory(
 
     /**
      * Adds the specified converter factory for serialization and deserialization of objects.
-     * @see Retrofit.Builder#addCallAdapterFactory(CallAdapter.Factory)
+     * @see Retrofit.Builder#addConverterFactory(Converter.Factory)
      */
     public ArmeriaRetrofitBuilder addConverterFactory(Converter.Factory factory) {
         retrofitBuilder.addConverterFactory(requireNonNull(factory, "factory"));

File: core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolverTest.java
Patch:
@@ -57,6 +57,7 @@
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.RequestHeadersBuilder;
+import com.linecorp.armeria.internal.server.annotation.AnnotatedValueResolver.AggregatedResult;
 import com.linecorp.armeria.internal.server.annotation.AnnotatedValueResolver.NoAnnotatedParameterException;
 import com.linecorp.armeria.internal.server.annotation.AnnotatedValueResolver.RequestObjectResolver;
 import com.linecorp.armeria.internal.server.annotation.AnnotatedValueResolver.ResolverContext;
@@ -117,7 +118,7 @@ class AnnotatedValueResolverTest {
                                        .routingResult(builder.build())
                                        .build();
 
-        resolverContext = new ResolverContext(context, request, null);
+        resolverContext = new ResolverContext(context, request, AggregatedResult.EMPTY);
     }
 
     @AfterAll

File: examples/annotated-http-service/src/main/java/example/armeria/server/annotated/Main.java
Patch:
@@ -40,6 +40,7 @@ private static Server newServer(int port) {
     static void configureServices(ServerBuilder sb) {
         sb.annotatedService("/pathPattern", new PathPatternService())
           .annotatedService("/injection", new InjectionService())
+          .annotatedService("/file", new FileUploadService())
           .annotatedService("/messageConverter", new MessageConverterService())
           .annotatedService("/exception", new ExceptionHandlerService())
           .serviceUnder("/docs",

File: junit5/src/main/java/com/linecorp/armeria/testing/junit5/server/ServerExtension.java
Patch:
@@ -324,7 +324,7 @@ public WebClient webClient() {
     }
 
     /**
-     * Returna a newly created {@link WebClient} configured by {@link #configureWebClient(WebClientBuilder)}
+     * Returns a newly created {@link WebClient} configured by {@link #configureWebClient(WebClientBuilder)}
      * and then the specified customizer.
      */
     public WebClient webClient(Consumer<WebClientBuilder> webClientCustomizer) {

File: core/src/main/java/com/linecorp/armeria/client/endpoint/DynamicEndpointGroup.java
Patch:
@@ -180,12 +180,12 @@ protected final void addEndpoint(Endpoint e) {
      * Removes the specified {@link Endpoint} from current {@link Endpoint} list.
      */
     protected final void removeEndpoint(Endpoint e) {
-        if (!allowEmptyEndpoints && Iterables.size(endpoints) == 1) {
-            return;
-        }
         final List<Endpoint> newEndpoints;
         endpointsLock.lock();
         try {
+            if (!allowEmptyEndpoints && endpoints.size() == 1) {
+                return;
+            }
             endpoints = newEndpoints = endpoints.stream()
                                                 .filter(endpoint -> !endpoint.equals(e))
                                                 .collect(toImmutableList());

File: examples/graphql/src/main/java/example/armeria/server/graphql/Main.java
Patch:
@@ -5,6 +5,7 @@
 
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerBuilder;
+import com.linecorp.armeria.server.docs.DocService;
 import com.linecorp.armeria.server.file.HttpFile;
 import com.linecorp.armeria.server.graphql.GraphqlService;
 
@@ -44,5 +45,7 @@ static void configureService(ServerBuilder sb) {
         // Browsing and invoking GraphQL services using GraphQL Playground.
         sb.service("/graphql/playground", HttpFile.of(Main.class.getClassLoader(), "/graphql-playground.html")
                                                   .asService());
+
+        sb.serviceUnder("/docs", DocService.builder().build());
     }
 }

File: benchmarks/jmh/src/jmh/java/com/linecorp/armeria/server/RoutersBenchmark.java
Patch:
@@ -70,7 +70,7 @@ public class RoutersBenchmark {
     @Benchmark
     public Routed<ServiceConfig> exactMatch() {
         final RoutingContext ctx = DefaultRoutingContext.of(HOST, "localhost", METHOD1_HEADERS.path(),
-                                                            null, METHOD1_HEADERS, false);
+                                                            null, METHOD1_HEADERS, RoutingStatus.OK);
         final Routed<ServiceConfig> routed = ROUTER.find(ctx);
         if (routed.value() != SERVICES.get(0)) {
             throw new IllegalStateException("Routing error");
@@ -82,7 +82,7 @@ public Routed<ServiceConfig> exactMatch() {
     public Routed<ServiceConfig> exactMatch_wrapped() {
         final RoutingContext ctx = new RoutingContextWrapper(
                 DefaultRoutingContext.of(HOST, "localhost", METHOD1_HEADERS.path(),
-                                         null, METHOD1_HEADERS, false));
+                                         null, METHOD1_HEADERS, RoutingStatus.OK));
         final Routed<ServiceConfig> routed = ROUTER.find(ctx);
         if (routed.value() != SERVICES.get(0)) {
             throw new IllegalStateException("Routing error");

File: core/src/main/java/com/linecorp/armeria/common/HttpHeadersBase.java
Patch:
@@ -468,8 +468,8 @@ public long contentLength() {
             cache.put(HttpHeaderNames.CONTENT_LENGTH, parsed);
             return parsed;
         } else {
-            cache.put(HttpHeaderNames.CONTENT_LENGTH, -1);
-            return -1;
+            cache.put(HttpHeaderNames.CONTENT_LENGTH, -1L);
+            return -1L;
         }
     }
 

File: core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessage.java
Patch:
@@ -37,6 +37,7 @@
 import com.linecorp.armeria.common.util.CompositeException;
 import com.linecorp.armeria.common.util.EventLoopCheckingFuture;
 import com.linecorp.armeria.internal.common.stream.AbortingSubscriber;
+import com.linecorp.armeria.internal.common.stream.NeverInvokedSubscriber;
 import com.linecorp.armeria.internal.common.stream.NoopSubscription;
 
 import io.netty.util.concurrent.EventExecutor;

File: core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessageDuplicator.java
Patch:
@@ -54,6 +54,7 @@
 import com.linecorp.armeria.common.util.CompositeException;
 import com.linecorp.armeria.common.util.EventLoopCheckingFuture;
 import com.linecorp.armeria.internal.common.stream.AbortingSubscriber;
+import com.linecorp.armeria.internal.common.stream.NeverInvokedSubscriber;
 import com.linecorp.armeria.internal.common.stream.NoopSubscription;
 import com.linecorp.armeria.internal.common.stream.StreamMessageUtil;
 

File: core/src/main/java/com/linecorp/armeria/internal/common/stream/EmptyFixedStreamMessage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 LINE Corporation
+ * Copyright 2021 LINE Corporation
  *
  * LINE Corporation licenses this file to you under the Apache License,
  * version 2.0 (the "License"); you may not use this file except in compliance
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.common.stream;
+package com.linecorp.armeria.internal.common.stream;
 
 import java.util.List;
 
@@ -45,7 +45,7 @@ final void cleanupObjects(@Nullable Throwable cause) {
     }
 
     @Override
-    final List<T> drainAll(boolean withPooledObjects) {
+    protected final List<T> drainAll(boolean withPooledObjects) {
         return ImmutableList.of();
     }
 

File: core/src/main/java/com/linecorp/armeria/internal/common/stream/NeverInvokedSubscriber.java
Patch:
@@ -14,17 +14,17 @@
  * under the License.
  */
 
-package com.linecorp.armeria.common.stream;
+package com.linecorp.armeria.internal.common.stream;
 
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 
-final class NeverInvokedSubscriber<T> implements Subscriber<T> {
+public final class NeverInvokedSubscriber<T> implements Subscriber<T> {
 
     private static final NeverInvokedSubscriber<Object> INSTANCE = new NeverInvokedSubscriber<>();
 
     @SuppressWarnings("unchecked")
-    static <T> NeverInvokedSubscriber<T> get() {
+    public static <T> NeverInvokedSubscriber<T> get() {
         return (NeverInvokedSubscriber<T>) INSTANCE;
     }
 

File: core/src/main/java/com/linecorp/armeria/internal/common/stream/OneElementFixedStreamMessage.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.common.stream;
+package com.linecorp.armeria.internal.common.stream;
 
 import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.touchOrCopyAndClose;
 
@@ -24,7 +24,6 @@
 
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
-import com.linecorp.armeria.internal.common.stream.StreamMessageUtil;
 
 import io.netty.util.concurrent.EventExecutor;
 
@@ -37,7 +36,7 @@ public class OneElementFixedStreamMessage<T> extends FixedStreamMessage<T> {
     @Nullable
     private T obj;
 
-    protected OneElementFixedStreamMessage(T obj) {
+    public OneElementFixedStreamMessage(T obj) {
         this.obj = obj;
     }
 

File: core/src/main/java/com/linecorp/armeria/internal/common/stream/ThreeElementFixedStreamMessage.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.common.stream;
+package com.linecorp.armeria.internal.common.stream;
 
 import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.touchOrCopyAndClose;
 
@@ -24,7 +24,6 @@
 
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
-import com.linecorp.armeria.internal.common.stream.StreamMessageUtil;
 
 import io.netty.util.concurrent.EventExecutor;
 
@@ -47,7 +46,7 @@ public class ThreeElementFixedStreamMessage<T> extends FixedStreamMessage<T> {
     /**
      * Constructs a new {@link ThreeElementFixedStreamMessage} for the given objects.
      */
-    protected ThreeElementFixedStreamMessage(T obj1, T obj2, T obj3) {
+    public ThreeElementFixedStreamMessage(T obj1, T obj2, T obj3) {
         this.obj1 = obj1;
         this.obj2 = obj2;
         this.obj3 = obj3;

File: core/src/main/java/com/linecorp/armeria/internal/common/stream/TwoElementFixedStreamMessage.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.common.stream;
+package com.linecorp.armeria.internal.common.stream;
 
 import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.touchOrCopyAndClose;
 
@@ -24,7 +24,6 @@
 
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
-import com.linecorp.armeria.internal.common.stream.StreamMessageUtil;
 
 import io.netty.util.concurrent.EventExecutor;
 
@@ -45,7 +44,7 @@ public class TwoElementFixedStreamMessage<T> extends FixedStreamMessage<T> {
     /**
      * Constructs a new {@link TwoElementFixedStreamMessage} for the given objects.
      */
-    protected TwoElementFixedStreamMessage(T obj1, T obj2) {
+    public TwoElementFixedStreamMessage(T obj1, T obj2) {
         this.obj1 = obj1;
         this.obj2 = obj2;
     }

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java
Patch:
@@ -1279,13 +1279,13 @@ enum AggregationStrategy {
         /**
          * Returns whether the request should be aggregated.
          */
-        static boolean aggregationRequired(AggregationStrategy strategy, HttpRequest req) {
+        static boolean aggregationRequired(AggregationStrategy strategy, RequestHeaders headers) {
             requireNonNull(strategy, "strategy");
             switch (strategy) {
                 case ALWAYS:
                     return true;
                 case FOR_FORM_DATA:
-                    return isFormData(req.contentType());
+                    return isFormData(headers.contentType());
             }
             return false;
         }

File: core/src/main/java/com/linecorp/armeria/server/DefaultRoute.java
Patch:
@@ -223,7 +223,7 @@ private void deferStatusException(RoutingContext routingCtx, HttpStatus httpStat
 
     private static RoutingResult emptyOrCorsPreflightResult(RoutingContext routingCtx,
                                                             RoutingResultBuilder builder) {
-        if (routingCtx.isCorsPreflight()) {
+        if (routingCtx.status() == RoutingStatus.CORS_PREFLIGHT) {
             return builder.type(RoutingResultType.CORS_PREFLIGHT).build();
         }
 

File: core/src/main/java/com/linecorp/armeria/server/FallbackService.java
Patch:
@@ -42,7 +42,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
     }
 
     private static HttpStatusException getStatusException(RoutingContext routingCtx) {
-        if (routingCtx.isCorsPreflight()) {
+        if (routingCtx.status() == RoutingStatus.CORS_PREFLIGHT) {
             // '403 Forbidden' is better for a CORS preflight request than other statuses.
             return HttpStatusException.of(HttpStatus.FORBIDDEN);
         }

File: core/src/main/java/com/linecorp/armeria/server/Route.java
Patch:
@@ -76,7 +76,7 @@ default RoutingResult apply(RoutingContext routingCtx) {
      *                         {@code false} if this method is called for services.
      *                         If {@code true}, an {@link HttpStatusException} will not be
      *                         {@linkplain RoutingContext#deferStatusException(HttpStatusException) deferred}
-     *                         and {@linkplain RoutingContext#isCorsPreflight() preflight request} will not
+     *                         and {@linkplain RoutingStatus#CORS_PREFLIGHT preflight request} will not
      *                         be handled by this {@link Route}.
      *
      * @return a non-empty {@link RoutingResult} if the {@linkplain RoutingContext#path() path},

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContextBuilder.java
Patch:
@@ -237,7 +237,7 @@ public ServiceRequestContext build() {
                 path(),
                 query(),
                 req.headers(),
-                false);
+                RoutingStatus.OK);
 
         final RoutingResult routingResult =
                 this.routingResult != null ? this.routingResult

File: core/src/main/java/com/linecorp/armeria/server/VirtualHost.java
Patch:
@@ -392,7 +392,7 @@ public Routed<ServiceConfig> findServiceConfig(RoutingContext routingCtx, boolea
                 }
                 break;
             case CORS_PREFLIGHT:
-                assert routingCtx.isCorsPreflight();
+                assert routingCtx.status() == RoutingStatus.CORS_PREFLIGHT;
                 if (routed.value().handlesCorsPreflight()) {
                     // CorsService will handle the preflight request
                     // even if the service does not handle an OPTIONS method.

File: core/src/main/java/com/linecorp/armeria/server/cors/CorsService.java
Patch:
@@ -102,7 +102,7 @@ public CorsConfig config() {
     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
         // check if CORS preflight must be returned, or if
         // we need to forbid access because origin could not be validated
-        if (isCorsPreflightRequest(req)) {
+        if (isCorsPreflightRequest(req.headers())) {
             return handleCorsPreflight(ctx, req);
         }
         if (config.isShortCircuit() &&

File: core/src/test/java/com/linecorp/armeria/client/ReconfigurableServerTest.java
Patch:
@@ -31,7 +31,6 @@ class ReconfigurableServerTest {
     @Test
     void shouldBeAbleToReconfigureServer() throws Exception {
         final ServerBuilder sb = Server.builder();
-        sb.http(9009);
 
         sb.service("/test1", (ctx, req) -> HttpResponse.of("Hello, world!"));
 
@@ -101,7 +100,6 @@ void shouldBeAbleToReconfigureServer() throws Exception {
     @Test
     void reconfigureShouldConfigureAtleastOneService() throws Exception {
         final ServerBuilder sb = Server.builder();
-        sb.http(9010);
         sb.service("/test1", (ctx, req) -> HttpResponse.of("Hello, world!"));
 
         final Server server = sb.build();
@@ -121,7 +119,7 @@ void reconfigureShouldConfigureAtleastOneService() throws Exception {
     @Test
     void reconfigureHttpsServerConfig() throws Exception {
         final ServerBuilder sb = Server.builder();
-        sb.https(9009);
+        sb.https(0);
         sb.tlsSelfSigned();
 
         sb.service("/test1", (ctx, req) -> HttpResponse.of("Hello, world!"));

File: core/src/test/java/com/linecorp/armeria/common/HttpRequestSubscriberTest.java
Patch:
@@ -40,8 +40,8 @@
 import com.linecorp.armeria.common.FixedHttpRequest.RegularFixedHttpRequest;
 import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;
 import com.linecorp.armeria.common.logging.RequestLogAccess;
-import com.linecorp.armeria.common.stream.RegularFixedStreamMessage;
 import com.linecorp.armeria.common.util.SafeCloseable;
+import com.linecorp.armeria.internal.common.stream.RegularFixedStreamMessage;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.testing.junit5.server.ServerExtension;
 

File: core/src/test/java/com/linecorp/armeria/common/stream/ConcatPublisherStreamMessageTest.java
Patch:
@@ -32,6 +32,7 @@
 import org.reactivestreams.Subscription;
 
 import com.linecorp.armeria.common.HttpData;
+import com.linecorp.armeria.internal.common.stream.OneElementFixedStreamMessage;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;

File: core/src/test/java/com/linecorp/armeria/common/stream/StreamMessageVerification.java
Patch:
@@ -36,6 +36,7 @@
 
 import com.linecorp.armeria.common.SplitHttpResponse;
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.internal.common.stream.FixedStreamMessage;
 
 public abstract class StreamMessageVerification<T> extends PublisherVerification<T> {
 

File: core/src/test/java/com/linecorp/armeria/common/stream/SubscriberThrowingExceptionTest.java
Patch:
@@ -30,6 +30,9 @@
 
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.util.CompositeException;
+import com.linecorp.armeria.internal.common.stream.OneElementFixedStreamMessage;
+import com.linecorp.armeria.internal.common.stream.RegularFixedStreamMessage;
+import com.linecorp.armeria.internal.common.stream.TwoElementFixedStreamMessage;
 import com.linecorp.armeria.internal.testing.AnticipatedException;
 
 import io.netty.buffer.ByteBuf;

File: core/src/test/java/com/linecorp/armeria/common/stream/TwoElementFixedStreamMessageTest.java
Patch:
@@ -25,6 +25,7 @@
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.EventLoopGroups;
+import com.linecorp.armeria.internal.common.stream.TwoElementFixedStreamMessage;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;

File: core/src/test/java/com/linecorp/armeria/server/EmptyContentDecodedHttpRequestTest.java
Patch:
@@ -36,7 +36,7 @@ class EmptyContentDecodedHttpRequestTest {
     void emptyContent() {
         final RequestHeaders headers = RequestHeaders.of(HttpMethod.GET, "/");
         final EmptyContentDecodedHttpRequest req =
-                new EmptyContentDecodedHttpRequest(eventLoop.get(), 1, 3, headers, true);
+                new EmptyContentDecodedHttpRequest(eventLoop.get(), 1, 3, headers, true, null, null);
 
         StepVerifier.create(req)
                     .expectComplete()

File: core/src/test/java/com/linecorp/armeria/server/RouterTest.java
Patch:
@@ -118,7 +118,7 @@ void testFindAllMatchedRouters(String path, int expectForFind, List<Integer> exp
     private static DefaultRoutingContext routingCtx(String path) {
         return new DefaultRoutingContext(virtualHost(), "example.com",
                                          RequestHeaders.of(HttpMethod.GET, path),
-                                         path, null, false);
+                                         path, null, null, RoutingStatus.OK);
     }
 
     static Stream<Arguments> generateRouteMatchData() {

File: core/src/test/java/com/linecorp/armeria/server/VirtualHostBuilderTest.java
Patch:
@@ -319,7 +319,8 @@ void precedenceOfDuplicateRoute() {
         assertThat(virtualHost.serviceConfigs().size()).isEqualTo(2);
         final RoutingContext routingContext = new DefaultRoutingContext(virtualHost(), "example.com",
                                                                         RequestHeaders.of(HttpMethod.GET, "/"),
-                                                                        "/", null, false);
+                                                                        "/", null, null,
+                                                                        RoutingStatus.OK);
         final Routed<ServiceConfig> serviceConfig = virtualHost.findServiceConfig(routingContext);
         final Route route = serviceConfig.route();
         assertThat(route).isSameAs(routeA);

File: thrift0.13/src/test/java/com/linecorp/armeria/server/thrift/ThriftServiceLogNameTest.java
Patch:
@@ -99,7 +99,7 @@ void logName() throws TException {
                        .build(HelloService.Iface.class);
         client.hello("hello");
 
-        final RequestLog log = capturedCtx.log().partial();
+        final RequestLog log = capturedCtx.log().whenComplete().join();
         assertThat(log.name()).isEqualTo("hello");
         assertThat(log.serviceName()).isEqualTo(HelloService.AsyncIface.class.getName());
         assertThat(log.fullName()).isEqualTo(HelloService.AsyncIface.class.getName() + "/hello");
@@ -112,7 +112,7 @@ void defaultNames() throws TException {
                        .build(HelloService.Iface.class);
         client.hello("hello");
 
-        final RequestLog log = capturedCtx.log().partial();
+        final RequestLog log = capturedCtx.log().whenComplete().join();
         assertThat(log.serviceName()).isEqualTo("HelloService");
         assertThat(log.name()).isEqualTo("defaultName");
         assertThat(log.fullName()).isEqualTo("HelloService/defaultName");

File: core/src/main/java/com/linecorp/armeria/common/stream/StreamDecoderOutput.java
Patch:
@@ -19,13 +19,13 @@
 import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
- * An output of {@link HttpDecoder} which holds the decoded data.
+ * An output of {@link StreamDecoder} which holds the decoded data.
  */
 @UnstableApi
 @FunctionalInterface
-public interface HttpDecoderOutput<T> {
+public interface StreamDecoderOutput<T> {
     /**
-     * Adds the decoded item to this {@link HttpDecoderOutput}.
+     * Adds the decoded item to this {@link StreamDecoderOutput}.
      */
     void add(T e);
 }

File: core/src/main/java/com/linecorp/armeria/internal/common/stream/ByteBufDecoderInput.java
Patch:
@@ -22,12 +22,12 @@
 import java.util.Iterator;
 import java.util.Queue;
 
-import com.linecorp.armeria.common.stream.HttpDecoderInput;
+import com.linecorp.armeria.common.stream.StreamDecoderInput;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
 
-public final class ByteBufDecoderInput implements HttpDecoderInput {
+public final class ByteBufDecoderInput implements StreamDecoderInput {
 
     private final ByteBufAllocator alloc;
     private final Queue<ByteBuf> queue;

File: grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnsafeUnaryGrpcService.java
Patch:
@@ -17,7 +17,6 @@
 package com.linecorp.armeria.server.grpc.protocol;
 
 import static com.google.common.collect.ImmutableMap.toImmutableMap;
-import static com.linecorp.armeria.internal.common.grpc.protocol.Base64DecoderUtil.byteBufConverter;
 
 import java.util.Map;
 import java.util.Set;
@@ -106,15 +105,16 @@ private static SerializationFormat resolveSerializationFormat(HttpRequest req) {
     @Override
     protected final HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req) {
         final CompletableFuture<ByteBuf> deframed = new CompletableFuture<>();
-        final ArmeriaMessageDeframer deframer = new ArmeriaMessageDeframer(Integer.MAX_VALUE);
         final SerializationFormat serializationFormat = resolveSerializationFormat(req);
         if (serializationFormat == null) {
             return HttpResponse.of(HttpStatus.UNSUPPORTED_MEDIA_TYPE,
                                    MediaType.PLAIN_TEXT_UTF_8,
                                    "Missing or invalid Content-Type header.");
         }
         final boolean isGrpcWebText = UnaryGrpcSerializationFormats.isGrpcWebText(serializationFormat);
-        req.decode(deframer, ctx.alloc(), byteBufConverter(ctx.alloc(), isGrpcWebText))
+        final ArmeriaMessageDeframer deframer =
+                new ArmeriaMessageDeframer(Integer.MAX_VALUE, ctx.alloc(), isGrpcWebText);
+        req.decode(deframer, ctx.alloc())
            .subscribe(singleSubscriber(deframed), ctx.eventLoop(), SubscriptionOption.WITH_POOLED_OBJECTS);
 
         final CompletableFuture<HttpResponse> responseFuture =

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java
Patch:
@@ -18,7 +18,6 @@
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkState;
-import static com.linecorp.armeria.internal.common.grpc.protocol.Base64DecoderUtil.byteBufConverter;
 import static com.linecorp.armeria.internal.common.grpc.protocol.GrpcTrailersUtil.serializeTrailersAsMessage;
 import static java.util.Objects.requireNonNull;
 
@@ -183,10 +182,10 @@ final class ArmeriaServerCall<I, O> extends ServerCall<I, O>
         final ByteBufAllocator alloc = ctx.alloc();
         final HttpStreamDeframer requestDeframer =
                 new HttpStreamDeframer(decompressorRegistry, ctx, this, statusFunction,
-                                       maxRequestMessageLength)
+                                       maxRequestMessageLength, grpcWebText)
                         .decompressor(clientDecompressor(clientHeaders, decompressorRegistry));
         this.req = req;
-        deframedRequest = req.decode(requestDeframer, alloc, byteBufConverter(alloc, grpcWebText));
+        deframedRequest = req.decode(requestDeframer, alloc);
         requestDeframer.setDeframedStreamMessage(deframedRequest);
         responseFramer = new ArmeriaMessageFramer(alloc, maxResponseMessageLength, grpcWebText);
 

File: core/src/test/java/com/linecorp/armeria/internal/common/KeepAliveHandlerTest.java
Patch:
@@ -44,6 +44,7 @@
 
 import com.linecorp.armeria.common.metric.MoreMeters;
 import com.linecorp.armeria.internal.common.AbstractKeepAliveHandler.PingState;
+import com.linecorp.armeria.internal.testing.FlakyTest;
 import com.linecorp.armeria.testing.junit5.common.EventLoopExtension;
 
 import io.micrometer.core.instrument.MeterRegistry;
@@ -55,6 +56,7 @@
 import io.netty.channel.EventLoop;
 import io.netty.channel.embedded.EmbeddedChannel;
 
+@FlakyTest
 @MockitoSettings(strictness = Strictness.LENIENT)
 class KeepAliveHandlerTest {
 

File: core/src/test/java/com/linecorp/armeria/server/HttpServerKeepAliveHandlerTest.java
Patch:
@@ -50,6 +50,7 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.metric.MoreMeters;
+import com.linecorp.armeria.internal.testing.FlakyTest;
 import com.linecorp.armeria.server.logging.LoggingService;
 import com.linecorp.armeria.testing.junit5.server.ServerExtension;
 
@@ -60,6 +61,7 @@
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import io.netty.util.AttributeMap;
 
+@FlakyTest
 class HttpServerKeepAliveHandlerTest {
 
     private static final ch.qos.logback.classic.Logger rootLogger =
@@ -232,7 +234,7 @@ void clientShouldSendPingWithNoIdleTimeout(SessionProtocol protocol, boolean use
     }
 
     private ClientFactory newClientFactory(long clientIdleTimeout, boolean useHttp2Preface) {
-        return newClientFactory(clientIdleTimeout,  Flags.defaultPingIntervalMillis(), useHttp2Preface);
+        return newClientFactory(clientIdleTimeout, Flags.defaultPingIntervalMillis(), useHttp2Preface);
     }
 
     private ClientFactory newClientFactory(long clientIdleTimeout, long pingIntervalMillis,

File: core/src/main/java/com/linecorp/armeria/server/file/FileService.java
Patch:
@@ -53,7 +53,6 @@
 import com.linecorp.armeria.internal.common.metric.CaffeineMetricSupport;
 import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;
 import com.linecorp.armeria.server.AbstractHttpService;
-import com.linecorp.armeria.server.HttpResponseException;
 import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.Route;
 import com.linecorp.armeria.server.ServiceConfig;
@@ -282,7 +281,7 @@ private HttpFile findFile(ServiceRequestContext ctx, HttpRequest req) {
                                 locationBuilder.append('?')
                                                .append(ctx.query());
                             }
-                            throw HttpResponseException.of(HttpResponse.ofRedirect(locationBuilder.toString()));
+                            return HttpFile.ofRedirect(locationBuilder.toString());
                         }
                     } else {
                         return HttpFile.nonExistent();

File: core/src/main/java/com/linecorp/armeria/server/healthcheck/DefaultHealthCheckUpdateHandler.java
Patch:
@@ -30,6 +30,7 @@
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
+import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.server.HttpStatusException;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
@@ -50,7 +51,8 @@ public CompletionStage<HealthCheckUpdateResult> handle(ServiceRequestContext ctx
             case PATCH:
                 return req.aggregate().thenApply(DefaultHealthCheckUpdateHandler::handlePatch);
             default:
-                throw HttpStatusException.of(HttpStatus.METHOD_NOT_ALLOWED);
+                return UnmodifiableFuture.exceptionallyCompletedFuture(
+                        HttpStatusException.of(HttpStatus.METHOD_NOT_ALLOWED));
         }
     }
 

File: spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaWebServer.java
Patch:
@@ -96,7 +96,8 @@ public synchronized void start() {
                 isRunning = true;
             }
         } catch (Exception cause) {
-            throw new WebServerException("Failed to start " + ArmeriaWebServer.class.getSimpleName(),
+            throw new WebServerException("Failed to start " + ArmeriaWebServer.class.getSimpleName() +
+                                         ". server: " + server + ", primary port: " + port,
                                          Exceptions.peel(cause));
         }
     }

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/UnframedGrpcService.java
Patch:
@@ -115,7 +115,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
         final MediaType framedContentType;
         if (contentType.is(MediaType.PROTOBUF)) {
             framedContentType = GrpcSerializationFormats.PROTO.mediaType();
-        } else if (contentType.is(MediaType.JSON_UTF_8)) {
+        } else if (contentType.is(MediaType.JSON)) {
             framedContentType = GrpcSerializationFormats.JSON.mediaType();
         } else {
             return HttpResponse.of(HttpStatus.UNSUPPORTED_MEDIA_TYPE,

File: core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java
Patch:
@@ -91,6 +91,7 @@
 import com.linecorp.armeria.testing.junit5.server.ServerExtension;
 
 import io.netty.buffer.ByteBuf;
+import io.netty.handler.codec.compression.Brotli;
 import io.netty.util.AsciiString;
 
 class HttpClientIntegrationTest {
@@ -504,7 +505,8 @@ void httpDecoding() throws Exception {
 
         final AggregatedHttpResponse response =
                 client.execute(RequestHeaders.of(HttpMethod.GET, "/encoding"));
-        assertThat(response.headers().get(HttpHeaderNames.CONTENT_ENCODING)).isEqualTo("br");
+        assertThat(response.headers().get(HttpHeaderNames.CONTENT_ENCODING)).isEqualTo(
+                Brotli.isAvailable() ? "br" : "gzip");
         assertThat(response.contentUtf8()).isEqualTo(
                 "some content to compress more content to compress");
     }

File: core/src/test/java/com/linecorp/armeria/client/encoding/DecodingClientTest.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.function.Function;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.condition.EnabledIf;
 import org.junit.jupiter.api.extension.RegisterExtension;
 
 import com.linecorp.armeria.client.HttpClient;
@@ -104,6 +105,7 @@ void httpDeflateDecodingTest() throws Exception {
     }
 
     @Test
+    @EnabledIf("io.netty.handler.codec.compression.Brotli#isAvailable")
     void httpBrotliDecodingTest() throws Exception {
         final WebClient client = WebClient.builder(server.httpUri())
                                           .decorator(DecodingClient.newDecorator(

File: core/src/test/java/com/linecorp/armeria/common/encoding/BrotliStreamDecoderTest.java
Patch:
@@ -21,13 +21,15 @@
 import java.io.IOException;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.condition.EnabledIf;
 
 import com.linecorp.armeria.common.HttpData;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
 import io.netty.handler.codec.compression.BrotliDecoder;
 
+@EnabledIf("io.netty.handler.codec.compression.Brotli#isAvailable")
 class BrotliStreamDecoderTest {
     private static final byte[] PAYLOAD = { -117, 1, -128, 77, 101, 111, 119, 3};
 

File: core/src/test/java/com/linecorp/armeria/server/HttpServerTest.java
Patch:
@@ -46,6 +46,7 @@
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.condition.EnabledIf;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.RegisterExtension;
 import org.junit.jupiter.params.ParameterizedTest;
@@ -617,6 +618,7 @@ void testStrings_noAcceptEncoding(WebClient client) throws Exception {
 
     @ParameterizedTest
     @ArgumentsSource(ClientAndProtocolProvider.class)
+    @EnabledIf("io.netty.handler.codec.compression.Brotli#isAvailable")
     void testStrings_acceptEncodingBrotli(WebClient client) throws Exception {
         final RequestHeaders req = RequestHeaders.of(HttpMethod.GET, "/strings",
                                                      HttpHeaderNames.ACCEPT_ENCODING, "br");

File: core/src/test/java/com/linecorp/armeria/server/encoding/DecodingServiceTest.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.zip.GZIPOutputStream;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.condition.EnabledIf;
 import org.junit.jupiter.api.extension.RegisterExtension;
 
 import com.aayushatharva.brotli4j.encoder.BrotliOutputStream;
@@ -103,6 +104,7 @@ void decodingDeflatedPayloadFromClient() throws IOException {
     }
 
     @Test
+    @EnabledIf("io.netty.handler.codec.compression.Brotli#isAvailable")
     void decodingBrotliCompressedPayloadFromClient() throws Throwable {
 
         final WebClient client = WebClient.builder(server.httpUri()).build();

File: thrift0.13/src/test/java/com/linecorp/armeria/server/thrift/AbstractTHttp2Client.java
Patch:
@@ -15,6 +15,8 @@
  */
 package com.linecorp.armeria.server.thrift;
 
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.awaitility.Awaitility.await;
 import static org.junit.Assert.assertTrue;
 
 import java.net.URI;
@@ -211,7 +213,7 @@ public void flush() throws TTransportException {
             final THttp2ClientHandler handler = initHandler.clientHandler;
 
             // Wait until HTTP/2 upgrade is finished.
-            assertTrue(handler.settingsPromise.await(5, TimeUnit.SECONDS));
+            await().untilAsserted(() -> assertThat(handler.settingsPromise.isDone()).isTrue());
             handler.settingsPromise.get();
 
             // Send a Thrift request.

File: core/src/test/java/com/linecorp/armeria/server/healthcheck/ScheduledHealthCheckerTest.java
Patch:
@@ -153,7 +153,7 @@ void awareUnhealthy() {
         assertThat(WebClient.of(uri).get("/hc").aggregate().join().status()).isSameAs(HttpStatus.OK);
 
         health.set(false);
-        await().atMost(Duration.ofSeconds(1))
+        await().atMost(Duration.ofSeconds(5))
                .untilAsserted(
                        () -> assertThat(WebClient.of(uri).get("/hc").aggregate().join().status())
                                .isSameAs(HttpStatus.SERVICE_UNAVAILABLE));

File: core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessage.java
Patch:
@@ -16,12 +16,12 @@
 
 package com.linecorp.armeria.common.stream;
 
-import static com.linecorp.armeria.common.stream.SubscriberUtil.abortedOrLate;
 import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;
 import static com.linecorp.armeria.internal.common.stream.InternalStreamMessageUtil.EMPTY_OPTIONS;
 import static com.linecorp.armeria.internal.common.stream.InternalStreamMessageUtil.containsNotifyCancellation;
 import static com.linecorp.armeria.internal.common.stream.InternalStreamMessageUtil.containsWithPooledObjects;
 import static com.linecorp.armeria.internal.common.stream.StreamMessageUtil.touchOrCopyAndClose;
+import static com.linecorp.armeria.internal.common.stream.SubscriberUtil.abortedOrLate;
 import static java.util.Objects.requireNonNull;
 
 import java.util.concurrent.CompletableFuture;
@@ -36,6 +36,7 @@
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.CompositeException;
 import com.linecorp.armeria.common.util.EventLoopCheckingFuture;
+import com.linecorp.armeria.internal.common.stream.AbortingSubscriber;
 import com.linecorp.armeria.internal.common.stream.NoopSubscription;
 
 import io.netty.util.concurrent.EventExecutor;

File: core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessageAndWriter.java
Patch:
@@ -23,6 +23,7 @@
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 
+import com.linecorp.armeria.internal.common.stream.AbortingSubscriber;
 import com.linecorp.armeria.internal.common.stream.StreamMessageUtil;
 
 abstract class AbstractStreamMessageAndWriter<T> extends AbstractStreamMessage<T>

File: core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessageDuplicator.java
Patch:
@@ -19,11 +19,11 @@
 import static com.google.common.base.MoreObjects.toStringHelper;
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkState;
-import static com.linecorp.armeria.common.stream.SubscriberUtil.abortedOrLate;
 import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;
 import static com.linecorp.armeria.internal.common.stream.InternalStreamMessageUtil.CANCELLATION_AND_POOLED_OPTIONS;
 import static com.linecorp.armeria.internal.common.stream.InternalStreamMessageUtil.containsNotifyCancellation;
 import static com.linecorp.armeria.internal.common.stream.InternalStreamMessageUtil.containsWithPooledObjects;
+import static com.linecorp.armeria.internal.common.stream.SubscriberUtil.abortedOrLate;
 import static java.util.Objects.requireNonNull;
 
 import java.util.ArrayList;
@@ -53,6 +53,7 @@
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.util.CompositeException;
 import com.linecorp.armeria.common.util.EventLoopCheckingFuture;
+import com.linecorp.armeria.internal.common.stream.AbortingSubscriber;
 import com.linecorp.armeria.internal.common.stream.NoopSubscription;
 import com.linecorp.armeria.internal.common.stream.StreamMessageUtil;
 

File: core/src/main/java/com/linecorp/armeria/common/stream/DeferredStreamMessage.java
Patch:
@@ -31,6 +31,7 @@
 import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.util.CompletionActions;
+import com.linecorp.armeria.internal.common.stream.AbortingSubscriber;
 
 import io.netty.util.concurrent.EventExecutor;
 import io.netty.util.concurrent.ImmediateEventExecutor;

File: core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckStatus.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021 LINE Corporation
+ * Copyright 2022 LINE Corporation
  *
  * LINE Corporation licenses this file to you under the Apache License,
  * version 2.0 (the "License"); you may not use this file except in compliance
@@ -11,7 +11,7 @@
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  * License for the specific language governing permissions and limitations
- * under the Licenses
+ * under the License.
  */
 
 package com.linecorp.armeria.server.healthcheck;

File: core/src/main/java/com/linecorp/armeria/server/healthcheck/ScheduledHealthChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021 LINE Corporation
+ * Copyright 2022 LINE Corporation
  *
  * LINE Corporation licenses this file to you under the Apache License,
  * version 2.0 (the "License"); you may not use this file except in compliance
@@ -11,7 +11,7 @@
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  * License for the specific language governing permissions and limitations
- * under the Licenses
+ * under the License.
  */
 
 package com.linecorp.armeria.server.healthcheck;

File: core/src/test/java/com/linecorp/armeria/server/healthcheck/ScheduledHealthCheckerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021 LINE Corporation
+ * Copyright 2022 LINE Corporation
  *
  * LINE Corporation licenses this file to you under the Apache License,
  * version 2.0 (the "License"); you may not use this file except in compliance
@@ -11,7 +11,7 @@
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  * License for the specific language governing permissions and limitations
- * under the Licenses
+ * under the License.
  */
 
 package com.linecorp.armeria.server.healthcheck;

File: brave/src/test/java/com/linecorp/armeria/client/brave/BraveClientIntegrationTest.java
Patch:
@@ -149,7 +149,7 @@ protected void closeClient(WebClient client) {
 
     @Override
     protected void get(WebClient client, String pathIncludingQuery) {
-        client.get(pathIncludingQuery).aggregate().join();
+        client.blocking().get(pathIncludingQuery);
     }
 
     @Override
@@ -172,12 +172,12 @@ protected void get(WebClient client, String path, BiConsumer<Integer, Throwable>
 
     @Override
     protected void post(WebClient client, String pathIncludingQuery, String body) {
-        client.post(pathIncludingQuery, body).aggregate().join();
+        client.blocking().post(pathIncludingQuery, body);
     }
 
     @Override
     protected void options(WebClient client, String path) {
-        client.options(path).aggregate().join();
+        client.blocking().options(path);
     }
 
     static ServiceRequestContext serverContext() {

File: consul/src/test/java/com/linecorp/armeria/internal/consul/ConsulClientBuilderTest.java
Patch:
@@ -30,8 +30,9 @@ class ConsulClientBuilderTest extends ConsulTestBase {
     @Test
     void gets403WhenNoToken() throws Exception {
         final HttpStatus status = WebClient.of("http://localhost:" + consul().getHttpPort())
-                                           .get("/v1/agent/self").aggregate()
-                                           .get().status();
+                                           .blocking()
+                                           .get("/v1/agent/self")
+                                           .status();
         assertThat(status).isEqualTo(HttpStatus.FORBIDDEN);
     }
 

File: core/src/main/java/com/linecorp/armeria/client/Clients.java
Patch:
@@ -35,7 +35,7 @@
 
 /**
  * Creates a new client that connects to a specified {@link URI}.
- * If you are creating an {@link WebClient}, it is recommended to use the factory methods in
+ * If you are creating a {@link WebClient}, it is recommended to use the factory methods in
  * {@link WebClient}.
  */
 public final class Clients {

File: core/src/main/java/com/linecorp/armeria/client/WebClientUtil.java
Patch:
@@ -18,16 +18,16 @@
 import static java.util.Objects.requireNonNull;
 
 import com.linecorp.armeria.common.QueryParams;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 final class WebClientUtil {
 
     /**
      * Appends query params to the current path and returns the modified path.
      */
-    static String addQueryParams(String path, QueryParams params) {
+    static String addQueryParams(String path, @Nullable QueryParams params) {
         requireNonNull(path, "path");
-        requireNonNull(params, "params");
-        if (params.isEmpty()) {
+        if (params == null || params.isEmpty()) {
             return path;
         }
 

File: core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceBlockingTest.java
Patch:
@@ -32,6 +32,7 @@
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.node.TextNode;
 
+import com.linecorp.armeria.client.BlockingWebClient;
 import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpMethod;
@@ -149,10 +150,10 @@ public String duplicated() {
             "/myEvenLoop/completionStage, 0"
     })
     void testOnlyEventLoopWithoutBlockingAnnotation(String path, Integer count) throws Exception {
-        final WebClient client = WebClient.of(server.httpUri());
+        final BlockingWebClient client = BlockingWebClient.of(server.httpUri());
 
         final RequestHeaders headers = RequestHeaders.of(HttpMethod.GET, path);
-        final AggregatedHttpResponse res = client.execute(headers).aggregate().join();
+        final AggregatedHttpResponse res = client.execute(headers);
         assertThat(res.status()).isSameAs(HttpStatus.OK);
         assertThat(blockingCount).hasValue(count);
     }

File: core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceHandlersOrderTest.java
Patch:
@@ -27,7 +27,7 @@
 import com.fasterxml.jackson.databind.JsonNode;
 import com.google.common.collect.ImmutableList;
 
-import com.linecorp.armeria.client.WebClient;
+import com.linecorp.armeria.client.BlockingWebClient;
 import com.linecorp.armeria.common.AggregatedHttpRequest;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpData;
@@ -313,7 +313,7 @@ void exceptionHandlerOrder() throws Exception {
     }
 
     private static AggregatedHttpResponse executeRequest(AggregatedHttpRequest req) {
-        final WebClient client = WebClient.of(server.httpUri());
-        return client.execute(req).aggregate().join();
+        final BlockingWebClient client = BlockingWebClient.of(server.httpUri());
+        return client.execute(req);
     }
 }

File: core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceNullablePathTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.CsvSource;
 
-import com.linecorp.armeria.client.WebClient;
+import com.linecorp.armeria.client.BlockingWebClient;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.server.Server;
@@ -65,8 +65,8 @@ public HttpResponse multipleValue() {
     @ParameterizedTest
     @CsvSource({ "/default, 200", "/empty, 200", "/multiple, 307", "/multiple/, 200" })
     void params(String path, int statusCode) {
-        final WebClient client = WebClient.of(server.httpUri());
-        assertThat(client.get(path).aggregate().join().status().code()).isEqualTo(statusCode);
+        final BlockingWebClient client = BlockingWebClient.of(server.httpUri());
+        assertThat(client.get(path).status().code()).isEqualTo(statusCode);
     }
 
     @Test

File: core/src/test/java/com/linecorp/armeria/server/file/FileServiceAdditionalHeadersTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.junit.ClassRule;
 import org.junit.Test;
 
-import com.linecorp.armeria.client.WebClient;
+import com.linecorp.armeria.client.BlockingWebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpStatus;
@@ -47,8 +47,8 @@ protected void configure(ServerBuilder sb) throws Exception {
 
     @Test
     public void testAdditionalHeaders() {
-        final WebClient client = WebClient.of(server.httpUri());
-        final AggregatedHttpResponse res = client.get("/java/lang/Object.class").aggregate().join();
+        final BlockingWebClient client = BlockingWebClient.of(server.httpUri());
+        final AggregatedHttpResponse res = client.get("/java/lang/Object.class");
         assertThat(res.status()).isEqualTo(HttpStatus.OK);
         assertThat(res.headers().getAll(HttpHeaderNames.of("foo"))).containsExactly("1", "2");
         assertThat(res.headers().getAll(HttpHeaderNames.of("bar"))).containsExactly("3");

File: spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaClientConfigurator.java
Patch:
@@ -23,7 +23,7 @@
 import com.linecorp.armeria.client.WebClientBuilder;
 
 /**
- * A configurator to configure an {@link WebClientBuilder} for an {@link ArmeriaClientHttpConnector}.
+ * A configurator to configure a {@link WebClientBuilder} for an {@link ArmeriaClientHttpConnector}.
  */
 @FunctionalInterface
 public interface ArmeriaClientConfigurator extends Ordered {

File: spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaClientHttpConnector.java
Patch:
@@ -53,7 +53,7 @@ final class ArmeriaClientHttpConnector implements ClientHttpConnector {
      * Creates an {@link ArmeriaClientHttpConnector} with the specified
      * {@link ArmeriaClientConfigurator} and the default {@link DataBufferFactoryWrapper}.
      *
-     * @param configurator the configurator to be used to build an {@link WebClient}
+     * @param configurator the configurator to be used to build a {@link WebClient}
      */
     @VisibleForTesting
     ArmeriaClientHttpConnector(ArmeriaClientConfigurator configurator) {

File: core/src/main/java/com/linecorp/armeria/server/file/ClassPathHttpFile.java
Patch:
@@ -47,7 +47,8 @@ final class ClassPathHttpFile extends StreamingHttpFile<InputStream> {
                       boolean lastModifiedEnabled,
                       @Nullable BiFunction<String, HttpFileAttributes, String> entityTagFunction,
                       HttpHeaders headers) {
-        super(contentTypeAutoDetectionEnabled ? MimeTypeUtil.guessFromPath(url.toString()) : null,
+        super(contentTypeAutoDetectionEnabled ?
+              MediaTypeResolver.ofDefault().guessFromPath(url.toString(), null) : null,
               clock, dateEnabled, lastModifiedEnabled, entityTagFunction, headers);
         this.url = requireNonNull(url, "url");
     }

File: core/src/main/java/com/linecorp/armeria/server/file/FileSystemHttpFile.java
Patch:
@@ -49,7 +49,8 @@ final class FileSystemHttpFile extends StreamingHttpFile<ByteChannel> {
                        boolean lastModifiedEnabled,
                        @Nullable BiFunction<String, HttpFileAttributes, String> entityTagFunction,
                        HttpHeaders headers) {
-        super(contentTypeAutoDetectionEnabled ? MimeTypeUtil.guessFromPath(path.toString()) : null,
+        super(contentTypeAutoDetectionEnabled ?
+              MediaTypeResolver.ofDefault().guessFromPath(path.toString(), null) : null,
               clock, dateEnabled, lastModifiedEnabled, entityTagFunction, headers);
         this.path = requireNonNull(path, "path");
     }

File: core/src/main/java/com/linecorp/armeria/common/metric/MoreMeters.java
Patch:
@@ -106,6 +106,7 @@ public static DistributionSummary newDistributionSummary(MeterRegistry registry,
                                    .tags(tags)
                                    .publishPercentiles(distStatCfg.getPercentiles())
                                    .publishPercentileHistogram(distStatCfg.isPercentileHistogram())
+                                   .percentilePrecision(distStatCfg.getPercentilePrecision())
                                    .distributionStatisticBufferLength(distStatCfg.getBufferLength())
                                    .distributionStatisticExpiry(distStatCfg.getExpiry());
 
@@ -151,6 +152,7 @@ public static Timer newTimer(MeterRegistry registry, String name, Iterable<Tag>
                     .minimumExpectedValue(minExpectedValue)
                     .publishPercentiles(distStatCfg.getPercentiles())
                     .publishPercentileHistogram(distStatCfg.isPercentileHistogram())
+                    .percentilePrecision(distStatCfg.getPercentilePrecision())
                     .distributionStatisticBufferLength(distStatCfg.getBufferLength())
                     .distributionStatisticExpiry(distStatCfg.getExpiry())
                     .register(registry);

File: jetty9/src/main/java/com/linecorp/armeria/server/jetty/ArmeriaEndPoint.java
Patch:
@@ -15,8 +15,6 @@
  */
 package com.linecorp.armeria.server.jetty;
 
-import static com.google.common.base.MoreObjects.firstNonNull;
-
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.UnknownHostException;
@@ -59,7 +57,7 @@ protected void onIncompleteFlush() {}
 
     ArmeriaEndPoint(ServiceRequestContext ctx, @Nullable String hostname) {
         this.ctx = ctx;
-        this.hostname = firstNonNull(hostname, ctx.config().virtualHost().defaultHostname());
+        this.hostname = hostname != null ? hostname : ctx.config().virtualHost().defaultHostname();
     }
 
     @Override

File: jetty9/src/test/java/com/linecorp/armeria/server/jetty/JettyServiceStartupTest.java
Patch:
@@ -55,7 +55,7 @@ protected void configure(ServerBuilder sb) throws Exception {
                     "/jsp/",
                     JettyService.builder()
                                 .handler(newWebAppContext())
-                                .configurator(s -> jettyBeans.addAll(s.getBeans()))
+                                .customizer(s -> jettyBeans.addAll(s.getBeans()))
                                 .build()
                                 .decorate(LoggingService.newDecorator()));
 

File: jetty9/src/test/java/com/linecorp/armeria/server/jetty/JettyServiceTest.java
Patch:
@@ -129,7 +129,7 @@ protected void configure(ServerBuilder sb) throws Exception {
                     "/jsp/",
                     JettyService.builder()
                                 .handler(newWebAppContext())
-                                .configurator(s -> jettyBeans.addAll(s.getBeans()))
+                                .customizer(s -> jettyBeans.addAll(s.getBeans()))
                                 .build()
                                 .decorate(LoggingService.newDecorator()));
 

File: core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java
Patch:
@@ -315,7 +315,7 @@ public void onError(Throwable cause) {
             final ServiceConfig serviceConfig = reqCtx.config();
             final AggregatedHttpResponse res =
                     serviceConfig.server().config().errorHandler()
-                                 .renderStatus(serviceConfig, status, null, cause0);
+                                 .renderStatus(serviceConfig, req.headers(), status, null, cause0);
             assert res != null;
             failAndRespond(cause0, res, Http2Error.CANCEL, false);
         } else if (Exceptions.isStreamCancelling(cause)) {

File: core/src/main/java/com/linecorp/armeria/server/ServerHttp1ObjectEncoder.java
Patch:
@@ -20,6 +20,7 @@
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpStatus;
+import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.annotation.Nullable;
@@ -184,6 +185,7 @@ public boolean isResponseHeadersSent(int id, int streamId) {
     @Override
     public ChannelFuture writeErrorResponse(int id, int streamId,
                                             ServiceConfig serviceConfig,
+                                            RequestHeaders headers,
                                             HttpStatus status,
                                             @Nullable String message,
                                             @Nullable Throwable cause) {
@@ -193,7 +195,7 @@ public ChannelFuture writeErrorResponse(int id, int streamId,
         keepAliveHandler().destroy();
 
         final ChannelFuture future = ServerHttpObjectEncoder.super.writeErrorResponse(
-                id, streamId, serviceConfig, status, message, cause);
+                id, streamId, serviceConfig, headers, status, message, cause);
         // Update the closed ID to prevent the HttpResponseSubscriber from
         // writing additional headers or messages.
         updateClosedId(id);

File: core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedDocServiceTest.java
Patch:
@@ -207,7 +207,7 @@ private static void addIntsMethodInfo(Map<Class<?>, Set<MethodInfo>> methodInfos
     }
 
     private static void addPathParamsMethodInfo(Map<Class<?>, Set<MethodInfo>> methodInfos) {
-        final EndpointInfo endpoint = EndpointInfo.builder("*", "/service/hello1/{hello2}/hello3/{hello4}")
+        final EndpointInfo endpoint = EndpointInfo.builder("*", "/service/hello1/:hello2/hello3/:hello4")
                                                   .availableMimeTypes(MediaType.JSON_UTF_8)
                                                   .build();
         final List<FieldInfo> fieldInfos = ImmutableList.of(
@@ -220,7 +220,7 @@ private static void addPathParamsMethodInfo(Map<Class<?>, Set<MethodInfo>> metho
     }
 
     private static void addPathParamsWithQueriesMethodInfo(Map<Class<?>, Set<MethodInfo>> methodInfos) {
-        final EndpointInfo endpoint = EndpointInfo.builder("*", "/service/hello1/{hello2}")
+        final EndpointInfo endpoint = EndpointInfo.builder("*", "/service/hello1/:hello2")
                                                   .availableMimeTypes(MediaType.JSON_UTF_8)
                                                   .build();
         final List<FieldInfo> fieldInfos = ImmutableList.of(

File: it/spring/boot2-tomcat9/src/main/java/com/linecorp/armeria/spring/tomcat/ErrorHandlingController.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.spring.tomcat.demo;
+package com.linecorp.armeria.spring.tomcat;
 
 import java.util.Map;
 

File: it/spring/boot2-tomcat9/src/main/java/com/linecorp/armeria/spring/tomcat/GlobalBaseException.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.spring.tomcat.demo;
+package com.linecorp.armeria.spring.tomcat;
 
 public class GlobalBaseException extends RuntimeException {
     GlobalBaseException(String message) {

File: it/spring/boot2-tomcat9/src/main/java/com/linecorp/armeria/spring/tomcat/GlobalExceptionHandler.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.spring.tomcat.demo;
+package com.linecorp.armeria.spring.tomcat;
 
 import java.util.Map;
 

File: it/spring/boot2-tomcat9/src/main/java/com/linecorp/armeria/spring/tomcat/Greeting.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.spring.tomcat.demo;
+package com.linecorp.armeria.spring.tomcat;
 
 public class Greeting {
 

File: it/spring/boot2-tomcat9/src/main/java/com/linecorp/armeria/spring/tomcat/GreetingController.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.spring.tomcat.demo;
+package com.linecorp.armeria.spring.tomcat;
 
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.GetMapping;

File: it/spring/boot2-tomcat9/src/main/java/com/linecorp/armeria/spring/tomcat/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 @NonNullByDefault
-package com.linecorp.armeria.spring.tomcat.demo;
+package com.linecorp.armeria.spring.tomcat;
 
 import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: it/spring/boot2-tomcat9/src/test/java/com/linecorp/armeria/spring/tomcat/ErrorHandlingTest.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.spring.tomcat.demo;
+package com.linecorp.armeria.spring.tomcat;
 
 import static net.javacrumbs.jsonunit.fluent.JsonFluentAssert.assertThatJson;
 import static org.assertj.core.api.Assertions.assertThat;

File: it/spring/boot2-tomcat9/src/test/java/com/linecorp/armeria/spring/tomcat/SpringTomcatApplicationItTest.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.spring.tomcat.demo;
+package com.linecorp.armeria.spring.tomcat;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: spring/boot2-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java
Patch:
@@ -202,7 +202,8 @@ void testHeapDump() throws Exception {
                         assertThat(headers.status()).isEqualTo(HttpStatus.OK);
                         assertThat(headers.contentType()).isEqualTo(MediaType.OCTET_STREAM);
                         assertThat(headers.get(HttpHeaderNames.CONTENT_DISPOSITION))
-                                .startsWith("attachment;filename=heapdump");
+                                // e.g. attachment;filename=heap-2022-01-19-22-064029423405632482108.hprof
+                                .startsWith("attachment;filename=heap");
                         final long contentLength = headers.getLong(HttpHeaderNames.CONTENT_LENGTH, -1);
                         assertThat(contentLength).isPositive();
                         remainingBytes.set(contentLength);

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java
Patch:
@@ -298,10 +298,9 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
             // If an error occurs, the default ExceptionHandler will handle the error.
             if (Flags.annotatedServiceExceptionVerbosity() == ExceptionVerbosity.ALL &&
                 logger.isWarnEnabled()) {
-                return response.mapError(cause -> {
+                return response.peekError(cause -> {
                     logger.warn("{} Exception raised by method '{}' in '{}':",
                                 ctx, methodName(), object.getClass().getSimpleName(), Exceptions.peel(cause));
-                    return cause;
                 });
             }
         }

File: grpc/src/main/java/com/linecorp/armeria/common/grpc/GrpcJsonMarshaller.java
Patch:
@@ -23,7 +23,7 @@
 
 import com.google.protobuf.Message;
 
-import com.linecorp.armeria.client.grpc.GrpcClientOptions;
+import com.linecorp.armeria.client.grpc.GrpcClientBuilder;
 import com.linecorp.armeria.server.grpc.GrpcServiceBuilder;
 
 import io.grpc.MethodDescriptor.Marshaller;
@@ -33,7 +33,7 @@
  * A JSON marshaller for gRPC method request or response messages to and from JSON.
  *
  * @see GrpcServiceBuilder#jsonMarshallerFactory(Function)
- * @see GrpcClientOptions#GRPC_JSON_MARSHALLER_FACTORY
+ * @see GrpcClientBuilder#jsonMarshallerFactory(Function)
  */
 public interface GrpcJsonMarshaller {
 

File: grpc/src/main/java/com/linecorp/armeria/internal/common/grpc/HttpStreamDeframer.java
Patch:
@@ -54,8 +54,8 @@ public HttpStreamDeframer(
             RequestContext ctx,
             TransportStatusListener transportStatusListener,
             @Nullable GrpcStatusFunction statusFunction,
-            int maxMessageSizeBytes) {
-        super(maxMessageSizeBytes);
+            int maxMessageLength) {
+        super(maxMessageLength);
         this.ctx = requireNonNull(ctx, "ctx");
         this.decompressorRegistry = requireNonNull(decompressorRegistry, "decompressorRegistry");
         this.transportStatusListener = requireNonNull(transportStatusListener, "transportStatusListener");

File: grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcWebTextTest.java
Patch:
@@ -31,7 +31,6 @@
 import com.google.protobuf.ByteString;
 import com.google.protobuf.InvalidProtocolBufferException;
 
-import com.linecorp.armeria.client.Clients;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
@@ -76,8 +75,8 @@ protected void configure(ServerBuilder sb) {
     @Test
     void unaryCallSuccessWhenEncodedDataSpansMultipleHttpFrames() {
         final TestServiceBlockingStub stub =
-                Clients.newClient(server.httpUri(GrpcSerializationFormats.PROTO_WEB_TEXT),
-                                  TestServiceBlockingStub.class);
+                GrpcClients.newClient(server.httpUri(GrpcSerializationFormats.PROTO_WEB_TEXT),
+                                      TestServiceBlockingStub.class);
         final SimpleRequest request =
                 SimpleRequest.newBuilder()
                              .setPayload(Payload.newBuilder()

File: grpc/src/test/java/com/linecorp/armeria/it/grpc/GrpcStatusCauseTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.ClassRule;
 import org.junit.Test;
 
-import com.linecorp.armeria.client.Clients;
+import com.linecorp.armeria.client.grpc.GrpcClients;
 import com.linecorp.armeria.common.Flags;
 import com.linecorp.armeria.common.grpc.StatusCauseException;
 import com.linecorp.armeria.common.util.Exceptions;
@@ -76,7 +76,7 @@ protected void configure(ServerBuilder sb) throws Exception {
 
     @Before
     public void setUp() {
-        stub = Clients.newClient("gproto+" + server.httpUri(), TestServiceBlockingStub.class);
+        stub = GrpcClients.newClient(server.httpUri(), TestServiceBlockingStub.class);
     }
 
     @Test

File: it/grpcweb/src/test/java/com/linecorp/armeria/server/grpc/GrpcWebServiceTest.java
Patch:
@@ -38,6 +38,7 @@
 
 import com.linecorp.armeria.client.ClientRequestContextCaptor;
 import com.linecorp.armeria.client.Clients;
+import com.linecorp.armeria.client.grpc.GrpcClients;
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
 import com.linecorp.armeria.common.logging.RequestLog;
@@ -86,7 +87,7 @@ void grpcProtoWebClient(SerializationFormat serializationFormat) {
         final String serverUri = serializationFormat.uriText() + "+http://127.0.0.1:" +
                                  serverBinding.localAddress().getPort();
         final GreeterServiceBlockingStub blockingStub =
-                Clients.newClient(serverUri, GreeterServiceBlockingStub.class);
+                GrpcClients.newClient(serverUri, GreeterServiceBlockingStub.class);
         try (ClientRequestContextCaptor captor = Clients.newContextCaptor()) {
             final HelloReply armeria =
                     blockingStub.sayHello(HelloRequest.newBuilder().setName("Armeria").build());

File: junit5/src/main/java/com/linecorp/armeria/testing/server/ServiceRequestContextCaptor.java
Patch:
@@ -48,6 +48,7 @@
  *
  *     @Test
  *     void test() {
+ *         final WebClient client = WebClient.of(server.httpUri());
  *         final ServiceRequestContextCaptor captor = server.requestContextCaptor();
  *         client.get("/hello").aggregate().join();
  *         assertThat(captor.size()).isEqualTo(1);

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroupMetrics.java
Patch:
@@ -54,8 +54,7 @@ public void bindTo(MeterRegistry registry) {
                        unused -> endpointGroup.delegate.endpoints().size() - endpointGroup.endpoints().size());
 
         final ListenerImpl listener = new ListenerImpl(registry, idPrefix.append("healthy"));
-        listener.accept(endpointGroup.endpoints());
-        endpointGroup.addListener(listener);
+        endpointGroup.addListener(listener, true);
     }
 
     private final class ListenerImpl implements Consumer<List<Endpoint>> {

File: core/src/test/java/com/linecorp/armeria/common/DefaultAggregatedHttpRequestTest.java
Patch:
@@ -94,7 +94,7 @@ void shouldHaveAllGettersInHttpRequest() {
                                                                             AggregatedHttpObject.class);
         for (String httpRequestMethod : httpRequestMethods) {
             if (httpRequestMethod.startsWith("builder") || httpRequestMethod.startsWith("aggregate") ||
-                httpRequestMethod.startsWith("toDuplicator")) {
+                httpRequestMethod.startsWith("toDuplicator") || httpRequestMethod.startsWith("split")) {
                 // Not a getter.
                 continue;
             }

File: core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java
Patch:
@@ -1266,6 +1266,7 @@ public void responseContent(@Nullable Object responseContent, @Nullable Object r
             }
             if (rpcResponse.cause() != null) {
                 responseCause = rpcResponse.cause();
+                updateFlags(RequestLogProperty.RESPONSE_CAUSE);
             }
         }
 

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/FramedGrpcService.java
Patch:
@@ -268,7 +268,7 @@ private <I, O> ArmeriaServerCall<I, O> startCall(
             call.close(GrpcStatus.fromThrowable(statusFunction, ctx, t, metadata), metadata);
             logger.warn(
                     "Exception thrown from streaming request stub method before processing any request data" +
-                    " - this is likely a bug in the stub implementation.");
+                    " - this is likely a bug in the stub implementation.", t);
             return null;
         }
         if (listener == null) {

File: core/src/main/java/com/linecorp/armeria/client/cookie/CookieClient.java
Patch:
@@ -79,12 +79,11 @@ public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Ex
             req = req.withHeaders(req.headers().toBuilder().add(HttpHeaderNames.COOKIE, cookieHeader));
             ctx.updateRequest(req);
         }
-        return unwrap().execute(ctx, req).mapHeaders(headers -> {
+        return unwrap().execute(ctx, req).peekHeaders(headers -> {
             final List<String> setCookieHeaders = headers.getAll(HttpHeaderNames.SET_COOKIE);
             if (!setCookieHeaders.isEmpty()) {
                 cookieJar.set(uri, Cookie.fromSetCookieHeaders(setCookieHeaders));
             }
-            return headers;
         });
     }
 }

File: core/src/main/java/com/linecorp/armeria/common/HttpRequest.java
Patch:
@@ -522,7 +522,7 @@ default <T> StreamMessage<T> decode(HttpDecoder<T> decoder, ByteBufAllocator all
     }
 
     /**
-     * Transforms the {@link ResponseHeaders} of this {@link HttpRequest} by applying the specified
+     * Transforms the {@link RequestHeaders} of this {@link HttpRequest} by applying the specified
      * {@link Function}.
      *
      * <p>For example:<pre>{@code

File: thrift0.13/src/test/java/com/linecorp/armeria/it/thrift/ThriftHttpHeaderTest.java
Patch:
@@ -143,9 +143,8 @@ public void httpResponseHeaderContainsFoo() throws TException {
         final Iface client =
                 Clients.builder(server.httpUri(BINARY) + "/hello")
                        .decorator((delegate, ctx, req) -> {
-                           return delegate.execute(ctx, req).mapHeaders(headers -> {
+                           return delegate.execute(ctx, req).peekHeaders(headers -> {
                                assertThat(headers.get("foo")).isEqualTo("bar");
-                               return headers;
                            });
                        })
                        .build(Iface.class);

File: core/src/main/java/com/linecorp/armeria/common/AbstractHttpRequestBuilder.java
Patch:
@@ -349,7 +349,7 @@ public AbstractHttpRequestBuilder queryParams(
      * <pre>{@code
      * HttpRequest.builder()
      *            .get("/")
-     *            .cookie(Cookie.of("cookie", "foo"))
+     *            .cookie(Cookie.ofSecure("cookie", "foo"))
      *            .build();
      * }</pre>
      *
@@ -369,8 +369,8 @@ public AbstractHttpRequestBuilder cookie(Cookie cookie) {
      * <pre>{@code
      * HttpRequest.builder()
      *            .get("/")
-     *            .cookies(Cookies.of(Cookie.of("cookie1", "foo"),
-     *                                Cookie.of("cookie2", "bar")))
+     *            .cookies(Cookies.ofSecure(Cookie.ofSecure("cookie1", "foo"),
+     *                                      Cookie.ofSecure("cookie2", "bar")))
      *            .build();
      * }</pre>
      *

File: core/src/test/java/com/linecorp/armeria/client/cookie/AcceptOriginCookiePolicyTest.java
Patch:
@@ -31,11 +31,11 @@ class AcceptOriginCookiePolicyTest {
 
     @Test
     void accept() {
-        final CookieBuilder builder = Cookie.builder("name", "value");
+        final CookieBuilder builder = Cookie.secureBuilder("name", "value");
 
-        assertThat(policy.accept(URI.create("foo.com"), Cookie.of("name", "value"))).isFalse();
+        assertThat(policy.accept(URI.create("foo.com"), Cookie.ofSecure("name", "value"))).isFalse();
         assertThat(policy.accept(URI.create("foo.com"), builder.domain("foo.com").build())).isFalse();
-        assertThat(policy.accept(URI.create("http://foo.com"), Cookie.of("name", "value"))).isFalse();
+        assertThat(policy.accept(URI.create("http://foo.com"), Cookie.ofSecure("name", "value"))).isFalse();
         assertThat(policy.accept(URI.create("http://foo.com"), builder.domain("foo.com").build())).isTrue();
 
         final URI google = URI.create("http://google.com");

File: examples/saml-service-provider/src/main/java/example/armeria/server/saml/sp/MyAuthHandler.java
Patch:
@@ -73,8 +73,7 @@ public HttpResponse loginSucceeded(ServiceRequestContext ctx, AggregatedHttpRequ
 
         logger.info("{} user '{}' has been logged in.", ctx, username);
 
-        final Cookie cookie = Cookie.builder("username", username)
-                                    .httpOnly(true)
+        final Cookie cookie = Cookie.secureBuilder("username", username)
                                     .domain("localhost")
                                     .maxAge(60)
                                     .path("/")

File: resteasy/src/test/java/com/linecorp/armeria/server/resteasy/BookServiceServerTest.java
Patch:
@@ -80,8 +80,8 @@ void testBooksContext() throws Exception {
         assertThat(context.contentType()).isNull();
         assertThat(context.content().isEmpty()).isTrue();
         final Cookies cookies =
-            Cookie.fromSetCookieHeaders(context.headers().getAll(HttpHeaderNames.SET_COOKIE));
-        assertThat(cookies).containsOnly(Cookie.of("serverCookie", "123"));
+                Cookie.fromSetCookieHeaders(context.headers().getAll(HttpHeaderNames.SET_COOKIE));
+        assertThat(cookies).containsOnly(Cookie.ofSecure("serverCookie", "123"));
     }
 
     @Test

File: resteasy/src/test/java/com/linecorp/armeria/server/resteasy/CalculatorServiceServerTest.java
Patch:
@@ -76,7 +76,7 @@ void testCalcContext() throws Exception {
         assertThat(context.content().isEmpty()).isTrue();
         final Cookies cookies =
             Cookie.fromSetCookieHeaders(context.headers().getAll(HttpHeaderNames.SET_COOKIE));
-        assertThat(cookies).containsOnly(Cookie.of("serverCookie", "123"));
+        assertThat(cookies).containsOnly(Cookie.ofSecure("serverCookie", "123"));
     }
 
     @Test

File: saml/src/test/java/com/linecorp/armeria/server/saml/SamlServiceProviderTest.java
Patch:
@@ -244,10 +244,9 @@ static class CookieBasedSsoHandler implements SamlSingleSignOnHandler {
             requireNonNull(cookieName, "cookieName");
             requireNonNull(cookieValue, "cookieValue");
 
-            final Cookie cookie = Cookie.builder(cookieName, cookieValue)
+            final Cookie cookie = Cookie.secureBuilder(cookieName, cookieValue)
                                         .domain(spHostname)
                                         .path("/")
-                                        .httpOnly(true)
                                         .build();
             setCookie = cookie.toSetCookieHeader();
         }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/EndpointGroup.java
Patch:
@@ -29,6 +29,7 @@
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.common.util.AsyncCloseable;
 import com.linecorp.armeria.common.util.Listenable;
+import com.linecorp.armeria.internal.client.endpoint.StaticEndpointGroup;
 
 /**
  * A list of {@link Endpoint}s.

File: core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroupCompatibilityTest.java
Patch:
@@ -63,7 +63,7 @@ private static void test(String path) {
         final Endpoint endpoint = Endpoint.of("127.0.0.1", server.httpPort());
         try (HealthCheckedEndpointGroup endpointGroup =
                      HealthCheckedEndpointGroup.of(endpoint, path)) {
-
+            endpointGroup.whenReady().join();
             // Check the initial state (healthy).
             assertThat(endpointGroup.endpoints()).containsExactly(endpoint);
         }

File: core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroupIntegrationTest.java
Patch:
@@ -85,6 +85,7 @@ void endpoints(SessionProtocol protocol, boolean useGet) throws Exception {
                         HEALTH_CHECK_PATH).useGet(useGet),
                 protocol)) {
 
+            endpointGroup.whenReady().join();
             endpointGroup.newMeterBinder("foo").bindTo(registry);
 
             await().untilAsserted(() -> {
@@ -136,6 +137,8 @@ void endpoints_withIpAndNoIp(SessionProtocol protocol) throws Exception {
                      HealthCheckedEndpointGroup.builder(Endpoint.of("localhost", portTwo),
                              HEALTH_CHECK_PATH),
                      protocol)) {
+            groupFoo.whenReady().join();
+            groupBar.whenReady().join();
 
             groupFoo.newMeterBinder("foo").bindTo(registry);
             groupBar.newMeterBinder("bar").bindTo(registry);

File: core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroupLongPollingTest.java
Patch:
@@ -83,6 +83,7 @@ void immediateNotification() throws Exception {
         try (HealthCheckedEndpointGroup endpointGroup = build(
                 HealthCheckedEndpointGroup.builder(endpoint, HEALTH_CHECK_PATH))) {
 
+            endpointGroup.whenReady().join();
             // Check the initial state (healthy).
             assertThat(endpointGroup.endpoints()).containsExactly(endpoint);
 
@@ -108,6 +109,7 @@ void longPollingDisabledOnStop() throws Exception {
         try (HealthCheckedEndpointGroup endpointGroup = build(
                 HealthCheckedEndpointGroup.builder(endpoint, HEALTH_CHECK_PATH))) {
 
+            endpointGroup.whenReady().join();
             // Check the initial state (healthy).
             assertThat(endpointGroup.endpoints()).containsExactly(endpoint);
 
@@ -176,6 +178,7 @@ void keepEndpointHealthinessWhenLongPollingTimeout() throws Exception {
         try (HealthCheckedEndpointGroup endpointGroup = build(
                 HealthCheckedEndpointGroup.builder(endpoint, HEALTH_CHECK_PATH))) {
 
+            endpointGroup.whenReady().join();
             // Check the initial state (healthy).
             assertThat(endpointGroup.endpoints()).containsExactly(endpoint);
 

File: core/src/test/java/com/linecorp/armeria/server/HttpServerTlsCorruptionTest.java
Patch:
@@ -118,5 +118,6 @@ void test() throws Throwable {
             logger.warn("Received a corrupt response after {} request(s)", i);
             throw cause;
         }
+        clientFactory.close();
     }
 }

File: core/src/main/java/com/linecorp/armeria/common/AbstractHttpRequestBuilder.java
Patch:
@@ -135,7 +135,6 @@ public AbstractHttpRequestBuilder method(HttpMethod method) {
      */
     public AbstractHttpRequestBuilder path(String path) {
         requireNonNull(path, "path");
-        checkArgument(!path.isEmpty(), "path is empty.");
         this.path = path;
         return this;
     }

File: core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java
Patch:
@@ -288,13 +288,13 @@ public static String concatPaths(@Nullable String path1, @Nullable String path2)
             return path1 + path2;
         }
 
-        if (path2.charAt(0) == '/') {
-            // path1 does not end with '/' and path2 starts with '/'.
+        if (path2.charAt(0) == '/' || path2.charAt(0) == '?') {
+            // path1 does not end with '/' and path2 starts with '/' or '?'
             // Simple concatenation would suffice.
             return path1 + path2;
         }
 
-        // path1 does not end with '/' and path2 does not start with '/'.
+        // path1 does not end with '/' and path2 does not start with '/' or '?'.
         // Need to insert '/' between path1 and path2.
         return path1 + '/' + path2;
     }

File: core/src/main/java/com/linecorp/armeria/server/Http2RequestDecoder.java
Patch:
@@ -235,10 +235,11 @@ public int onDataRead(
                                                 .transferred(transferredLength)
                                                 .build();
 
-                writeErrorResponse(streamId, HttpStatus.REQUEST_ENTITY_TOO_LARGE, null, cause);
+                final HttpStatus entityTooLarge = HttpStatus.REQUEST_ENTITY_TOO_LARGE;
+                writeErrorResponse(streamId, entityTooLarge, null, cause);
 
                 if (decodedReq.isOpen()) {
-                    decodedReq.close(cause);
+                    decodedReq.close(HttpStatusException.of(entityTooLarge, cause));
                 }
             } else {
                 // The response has been started already. Abort the request and let the response continue.

File: core/src/main/java/com/linecorp/armeria/server/ServerHttp1ObjectEncoder.java
Patch:
@@ -194,6 +194,9 @@ public ChannelFuture writeErrorResponse(int id, int streamId,
 
         final ChannelFuture future = ServerHttpObjectEncoder.super.writeErrorResponse(
                 id, streamId, serviceConfig, status, message, cause);
+        // Update the closed ID to prevent the HttpResponseSubscriber from
+        // writing additional headers or messages.
+        updateClosedId(id);
 
         return future.addListener(ChannelFutureListener.CLOSE);
     }

File: graphql-protocol/src/main/java/com/linecorp/armeria/internal/server/graphql/protocol/GraphqlUtil.java
Patch:
@@ -57,6 +57,9 @@ public static MediaType produceType(RequestHeaders headers) {
         }
 
         for (MediaType accept : acceptTypes) {
+            if (MediaType.ANY_TYPE.is(accept) || MediaType.ANY_APPLICATION_TYPE.is(accept)) {
+                return MediaType.GRAPHQL_JSON;
+            }
             if (accept.is(MediaType.GRAPHQL_JSON) || accept.is(MediaType.JSON)) {
                 return accept;
             }

File: core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java
Patch:
@@ -213,6 +213,9 @@ private boolean handleEarlyCancellation(ClientRequestContext ctx, HttpRequest re
             return false;
         }
 
+        assert responseDecoder != null;
+        responseDecoder.decrementUnfinishedResponses();
+
         // The response has been closed even before its request is sent.
         assert protocol != null;
 

File: core/src/test/java/com/linecorp/armeria/server/HttpServerTlsCorruptionTest.java
Patch:
@@ -90,6 +90,7 @@ void test() throws Throwable {
         int i = 0;
         try {
             for (; i < 1000; i++) {
+                server.requestContextCaptor().clear();
                 semaphore.acquire();
                 client.get("/")
                       .aggregate()

File: grpc/src/test/java/com/linecorp/armeria/client/grpc/protocol/UnaryGrpcClientTest.java
Patch:
@@ -84,7 +84,7 @@ private static String getUri(SerializationFormat serializationFormat) {
     @ParameterizedTest
     @ArgumentsSource(UnsupportedGrpcSerializationFormatArgumentsProvider.class)
     void unsupportedSerializationFormat(SerializationFormat serializationFormat) {
-        assertThrows(AssertionError.class,
+        assertThrows(IllegalStateException.class,
                      () -> Clients.newClient(getUri(serializationFormat), UnaryGrpcClient.class));
     }
 

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java
Patch:
@@ -170,7 +170,7 @@ final class ArmeriaClientCall<I, O> extends ClientCall<I, O>
         this.advertisedEncodingsHeader = advertisedEncodingsHeader;
         grpcWebText = GrpcSerializationFormats.isGrpcWebText(serializationFormat);
         this.maxInboundMessageSizeBytes = maxInboundMessageSizeBytes;
-        endpointInitialized = endpointGroup.whenReady().isDone();
+        endpointInitialized = endpointGroup.whenReady().isDone() && !endpointGroup.endpoints().isEmpty();
         if (!endpointInitialized) {
             ctx.whenInitialized().handle((unused1, unused2) -> {
                 runPendingTask();

File: core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptions.java
Patch:
@@ -43,7 +43,6 @@
 import io.netty.channel.EventLoopGroup;
 import io.netty.handler.ssl.SslContextBuilder;
 import io.netty.resolver.AddressResolverGroup;
-import io.netty.util.AsciiString;
 
 /**
  * A set of {@link ClientFactoryOption}s and their respective values.
@@ -232,7 +231,7 @@ private static long clampedDefaultMaxClientConnectionAge() {
      * another HTTP/1 header name.
      */
     public static final ClientFactoryOption<Http1HeaderNaming> HTTP1_HEADER_NAMING =
-            ClientFactoryOption.define("HTTP1_HEADER_NAMING", AsciiString::toString);
+            ClientFactoryOption.define("HTTP1_HEADER_NAMING", Http1HeaderNaming.ofDefault());
 
     /**
      * The {@link ChannelOption}s of the sockets created by the {@link ClientFactory}.

File: graphql-protocol/src/main/java/com/linecorp/armeria/server/graphql/protocol/package-info.java
Patch:
@@ -16,7 +16,7 @@
 /**
  * {@link com.linecorp.armeria.server.HttpService} implementations for supporting the GraphQL protocol.
  * This GraphQL service only handles network layers and cannot parse a GraphQL query. You should parse
- * the {@link com.linecorp.armeria.server.graphql.protocol.GraphqlRequest#query()} with third party GraphQL
+ * the {@link com.linecorp.armeria.common.graphql.protocol.GraphqlRequest#query()} with third party GraphQL
  * libraries.
  */
 @UnstableApi

File: graphql/src/main/java/com/linecorp/armeria/server/graphql/DefaultGraphqlService.java
Patch:
@@ -30,9 +30,10 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
+import com.linecorp.armeria.common.graphql.protocol.GraphqlRequest;
+import com.linecorp.armeria.internal.server.graphql.protocol.GraphqlUtil;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.graphql.protocol.AbstractGraphqlService;
-import com.linecorp.armeria.server.graphql.protocol.GraphqlRequest;
 
 import graphql.ExecutionInput;
 import graphql.ExecutionResult;
@@ -61,7 +62,7 @@ final class DefaultGraphqlService extends AbstractGraphqlService implements Grap
 
     @Override
     protected HttpResponse executeGraphql(ServiceRequestContext ctx, GraphqlRequest req) throws Exception {
-        final MediaType produceType = req.produceType();
+        final MediaType produceType = GraphqlUtil.produceType(ctx.request().headers());
         if (produceType == null) {
             return HttpResponse.of(HttpStatus.NOT_ACCEPTABLE, MediaType.PLAIN_TEXT,
                                    "Only application/graphql+json and application/json compatible " +

File: rxjava3/src/main/java/com/linecorp/armeria/common/rxjava3/RequestContextAssembly.java
Patch:
@@ -29,8 +29,8 @@
 import io.reactivex.rxjava3.flowables.ConnectableFlowable;
 import io.reactivex.rxjava3.functions.Function;
 import io.reactivex.rxjava3.functions.Supplier;
-import io.reactivex.rxjava3.internal.fuseable.ScalarSupplier;
 import io.reactivex.rxjava3.observables.ConnectableObservable;
+import io.reactivex.rxjava3.operators.ScalarSupplier;
 import io.reactivex.rxjava3.parallel.ParallelFlowable;
 import io.reactivex.rxjava3.plugins.RxJavaPlugins;
 

File: rxjava3/src/main/java/com/linecorp/armeria/common/rxjava3/RequestContextConditionalSubscriber.java
Patch:
@@ -19,9 +19,9 @@
 import com.linecorp.armeria.common.RequestContext;
 import com.linecorp.armeria.common.util.SafeCloseable;
 
-import io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber;
-import io.reactivex.rxjava3.internal.fuseable.QueueSubscription;
 import io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriber;
+import io.reactivex.rxjava3.operators.ConditionalSubscriber;
+import io.reactivex.rxjava3.operators.QueueSubscription;
 
 final class RequestContextConditionalSubscriber<T> extends BasicFuseableConditionalSubscriber<T, T> {
 

File: rxjava3/src/main/java/com/linecorp/armeria/common/rxjava3/RequestContextConnectableFlowable.java
Patch:
@@ -24,7 +24,7 @@
 import io.reactivex.rxjava3.disposables.Disposable;
 import io.reactivex.rxjava3.flowables.ConnectableFlowable;
 import io.reactivex.rxjava3.functions.Consumer;
-import io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber;
+import io.reactivex.rxjava3.operators.ConditionalSubscriber;
 
 final class RequestContextConnectableFlowable<T> extends ConnectableFlowable<T> {
     private final ConnectableFlowable<T> source;

File: rxjava3/src/main/java/com/linecorp/armeria/common/rxjava3/RequestContextFlowable.java
Patch:
@@ -23,7 +23,7 @@
 import com.linecorp.armeria.common.util.SafeCloseable;
 
 import io.reactivex.rxjava3.core.Flowable;
-import io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber;
+import io.reactivex.rxjava3.operators.ConditionalSubscriber;
 
 final class RequestContextFlowable<T> extends Flowable<T> {
 

File: rxjava3/src/main/java/com/linecorp/armeria/common/rxjava3/RequestContextObserver.java
Patch:
@@ -20,8 +20,8 @@
 import com.linecorp.armeria.common.util.SafeCloseable;
 
 import io.reactivex.rxjava3.core.Observer;
-import io.reactivex.rxjava3.internal.fuseable.QueueDisposable;
 import io.reactivex.rxjava3.internal.observers.BasicFuseableObserver;
+import io.reactivex.rxjava3.operators.QueueDisposable;
 
 final class RequestContextObserver<T> extends BasicFuseableObserver<T, T> {
     private final RequestContext assemblyContext;

File: rxjava3/src/main/java/com/linecorp/armeria/common/rxjava3/RequestContextParallelFlowable.java
Patch:
@@ -21,7 +21,7 @@
 import com.linecorp.armeria.common.RequestContext;
 import com.linecorp.armeria.common.util.SafeCloseable;
 
-import io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber;
+import io.reactivex.rxjava3.operators.ConditionalSubscriber;
 import io.reactivex.rxjava3.parallel.ParallelFlowable;
 
 final class RequestContextParallelFlowable<T> extends ParallelFlowable<T> {

File: rxjava3/src/main/java/com/linecorp/armeria/common/rxjava3/RequestContextScalarSupplierFlowable.java
Patch:
@@ -23,8 +23,8 @@
 import com.linecorp.armeria.common.util.SafeCloseable;
 
 import io.reactivex.rxjava3.core.Flowable;
-import io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber;
-import io.reactivex.rxjava3.internal.fuseable.ScalarSupplier;
+import io.reactivex.rxjava3.operators.ConditionalSubscriber;
+import io.reactivex.rxjava3.operators.ScalarSupplier;
 
 final class RequestContextScalarSupplierFlowable<T> extends Flowable<T> implements ScalarSupplier<T> {
     private final Publisher<T> source;

File: rxjava3/src/main/java/com/linecorp/armeria/common/rxjava3/RequestContextScalarSupplierMaybe.java
Patch:
@@ -22,7 +22,7 @@
 import io.reactivex.rxjava3.core.Maybe;
 import io.reactivex.rxjava3.core.MaybeObserver;
 import io.reactivex.rxjava3.core.MaybeSource;
-import io.reactivex.rxjava3.internal.fuseable.ScalarSupplier;
+import io.reactivex.rxjava3.operators.ScalarSupplier;
 
 final class RequestContextScalarSupplierMaybe<T> extends Maybe<T> implements ScalarSupplier<T> {
     private final MaybeSource<T> source;

File: rxjava3/src/main/java/com/linecorp/armeria/common/rxjava3/RequestContextScalarSupplierObservable.java
Patch:
@@ -22,7 +22,7 @@
 import io.reactivex.rxjava3.core.Observable;
 import io.reactivex.rxjava3.core.ObservableSource;
 import io.reactivex.rxjava3.core.Observer;
-import io.reactivex.rxjava3.internal.fuseable.ScalarSupplier;
+import io.reactivex.rxjava3.operators.ScalarSupplier;
 
 final class RequestContextScalarSupplierObservable<T> extends Observable<T> implements ScalarSupplier<T> {
 

File: rxjava3/src/main/java/com/linecorp/armeria/common/rxjava3/RequestContextScalarSupplierSingle.java
Patch:
@@ -22,7 +22,7 @@
 import io.reactivex.rxjava3.core.Single;
 import io.reactivex.rxjava3.core.SingleObserver;
 import io.reactivex.rxjava3.core.SingleSource;
-import io.reactivex.rxjava3.internal.fuseable.ScalarSupplier;
+import io.reactivex.rxjava3.operators.ScalarSupplier;
 
 final class RequestContextScalarSupplierSingle<T> extends Single<T> implements ScalarSupplier<T> {
     private final SingleSource<T> source;

File: rxjava3/src/main/java/com/linecorp/armeria/common/rxjava3/RequestContextSubscriber.java
Patch:
@@ -21,8 +21,8 @@
 import com.linecorp.armeria.common.RequestContext;
 import com.linecorp.armeria.common.util.SafeCloseable;
 
-import io.reactivex.rxjava3.internal.fuseable.QueueSubscription;
 import io.reactivex.rxjava3.internal.subscribers.BasicFuseableSubscriber;
+import io.reactivex.rxjava3.operators.QueueSubscription;
 
 final class RequestContextSubscriber<T> extends BasicFuseableSubscriber<T, T> {
 

File: rxjava3/src/main/java/com/linecorp/armeria/common/rxjava3/RequestContextSupplierFlowable.java
Patch:
@@ -24,7 +24,7 @@
 
 import io.reactivex.rxjava3.core.Flowable;
 import io.reactivex.rxjava3.functions.Supplier;
-import io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber;
+import io.reactivex.rxjava3.operators.ConditionalSubscriber;
 
 final class RequestContextSupplierFlowable<T> extends Flowable<T> implements Supplier<T> {
     private final Publisher<T> source;

File: core/src/test/java/com/linecorp/armeria/server/HttpServerStreamingTest.java
Patch:
@@ -153,7 +153,7 @@ void testTooLargeContent(WebClient client) throws Exception {
 
         assertThat(res.status()).isEqualTo(HttpStatus.REQUEST_ENTITY_TOO_LARGE);
         assertThat(res.contentType()).isEqualTo(MediaType.PLAIN_TEXT_UTF_8);
-        assertThat(res.contentUtf8()).isEqualTo("413 Request Entity Too Large");
+        assertThat(res.contentUtf8()).startsWith("Status: 413\n");
     }
 
     @ParameterizedTest
@@ -165,7 +165,7 @@ void testTooLargeContentToNonExistentService(WebClient client) throws Exception
         final byte[] content = new byte[maxContentLength + 1];
         final AggregatedHttpResponse res = client.post("/non-existent", content).aggregate().get();
         assertThat(res.status()).isSameAs(HttpStatus.NOT_FOUND);
-        assertThat(res.contentUtf8()).isEqualTo("404 Not Found");
+        assertThat(res.contentUtf8()).startsWith("Status: 404\n");
     }
 
     @ParameterizedTest

File: core/src/main/java/com/linecorp/armeria/client/ClientHttp1ObjectEncoder.java
Patch:
@@ -61,7 +61,7 @@ private HttpObject convertHeaders(RequestHeaders headers, boolean endStream) {
         final HttpRequest req = new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.valueOf(method),
                                                        headers.path(), false);
         final io.netty.handler.codec.http.HttpHeaders nettyHeaders = req.headers();
-        ArmeriaHttpUtil.toNettyHttp1ClientHeader(headers, nettyHeaders, http1HeaderNaming);
+        ArmeriaHttpUtil.toNettyHttp1ClientHeaders(headers, nettyHeaders, http1HeaderNaming);
 
         if (!nettyHeaders.contains(HttpHeaderNames.USER_AGENT)) {
             nettyHeaders.add(HttpHeaderNames.USER_AGENT, HttpHeaderUtil.USER_AGENT.toString());
@@ -109,7 +109,7 @@ private HttpObject convertHeaders(RequestHeaders headers, boolean endStream) {
     @Override
     protected void convertTrailers(HttpHeaders inputHeaders,
                                    io.netty.handler.codec.http.HttpHeaders outputHeaders) {
-        ArmeriaHttpUtil.toNettyHttp1ClientTrailer(inputHeaders, outputHeaders, http1HeaderNaming);
+        ArmeriaHttpUtil.toNettyHttp1ClientTrailers(inputHeaders, outputHeaders, http1HeaderNaming);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/common/Flags.java
Patch:
@@ -61,6 +61,7 @@
 import com.linecorp.armeria.internal.common.util.SslContextUtil;
 import com.linecorp.armeria.internal.common.util.StringUtil;
 import com.linecorp.armeria.server.ServerBuilder;
+import com.linecorp.armeria.server.ServerErrorHandler;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.TransientService;
@@ -1201,7 +1202,7 @@ public static String dnsCacheSpec() {
      * @see ExceptionVerbosity
      *
      * @deprecated Use {@link LoggingService} or log exceptions using
-     *             {@link ServerBuilder#exceptionHandler(com.linecorp.armeria.server.ExceptionHandler)}.
+     *             {@link ServerBuilder#errorHandler(ServerErrorHandler)}.
      */
     @Deprecated
     public static ExceptionVerbosity annotatedServiceExceptionVerbosity() {

File: core/src/main/java/com/linecorp/armeria/server/HttpServerPipelineConfigurator.java
Patch:
@@ -501,16 +501,16 @@ private void addHttpHandlers(ChannelHandlerContext ctx) {
                 keepAliveHandler = NoopKeepAliveHandler.INSTANCE;
             }
 
-            final ServerHttp1ObjectEncoder writer = new ServerHttp1ObjectEncoder(
+            final ServerHttp1ObjectEncoder encoder = new ServerHttp1ObjectEncoder(
                     ch, H1, keepAliveHandler, config.isDateHeaderEnabled(), config.isServerHeaderEnabled());
             p.addLast(new HttpServerCodec(
                     config.http1MaxInitialLineLength(),
                     config.http1MaxHeaderSize(),
                     config.http1MaxChunkSize()));
-            p.addLast(new Http1RequestDecoder(config, ch, SCHEME_HTTPS, writer));
+            p.addLast(new Http1RequestDecoder(config, ch, SCHEME_HTTPS, encoder));
             p.addLast(new HttpServerHandler(configHolder,
                                             gracefulShutdownSupport,
-                                            writer, H1, proxiedAddresses));
+                                            encoder, H1, proxiedAddresses));
         }
 
         @Override

File: core/src/main/java/com/linecorp/armeria/server/Server.java
Patch:
@@ -410,6 +410,7 @@ public void reconfigure(ServerConfigurator serverConfigurator) {
         final ServerBuilder sb = builder();
         serverConfigurator.reconfigure(sb);
         config = sb.buildServerConfig(config());
+        config.setServer(this);
         // Invoke the serviceAdded() method in Service so that it can keep the reference to this Server or
         // add a listener to it.
         config.serviceConfigs().forEach(cfg -> ServiceCallbackInvoker.invokeServiceAdded(cfg, cfg.service()));

File: core/src/main/java/com/linecorp/armeria/server/annotation/ExceptionVerbosity.java
Patch:
@@ -19,13 +19,14 @@
 import com.linecorp.armeria.server.HttpResponseException;
 import com.linecorp.armeria.server.HttpStatusException;
 import com.linecorp.armeria.server.ServerBuilder;
+import com.linecorp.armeria.server.ServerErrorHandler;
 import com.linecorp.armeria.server.logging.LoggingService;
 
 /**
  * The verbosity of exceptions logged by annotated HTTP services.
  *
  * @deprecated Use {@link LoggingService} or log exceptions using
- *             {@link ServerBuilder#exceptionHandler(com.linecorp.armeria.server.ExceptionHandler)} instead.
+ *             {@link ServerBuilder#errorHandler(ServerErrorHandler)} instead.
  */
 @Deprecated
 public enum ExceptionVerbosity {

File: core/src/test/java/com/linecorp/armeria/client/limit/ConcurrencyLimitingClientTest.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.function.BiConsumer;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.RegisterExtension;
 import org.mockito.Mock;
@@ -43,6 +44,7 @@
 import com.linecorp.armeria.common.stream.NoopSubscriber;
 import com.linecorp.armeria.testing.junit5.common.EventLoopExtension;
 
+@Disabled
 class ConcurrencyLimitingClientTest {
 
     @RegisterExtension

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedDocServicePlugin.java
Patch:
@@ -19,7 +19,7 @@
 import static com.google.common.collect.ImmutableList.toImmutableList;
 import static com.google.common.collect.ImmutableSet.toImmutableSet;
 import static com.linecorp.armeria.internal.server.annotation.KotlinUtil.isSuspendingFunction;
-import static com.linecorp.armeria.internal.server.annotation.KotlinUtil.kFunctionReturnType;
+import static com.linecorp.armeria.internal.server.annotation.KotlinUtil.kFunctionGenericReturnType;
 import static com.linecorp.armeria.server.docs.FieldLocation.HEADER;
 import static com.linecorp.armeria.server.docs.FieldLocation.PATH;
 import static com.linecorp.armeria.server.docs.FieldLocation.QUERY;
@@ -156,7 +156,7 @@ private static void addMethodInfo(Map<Class<?>, Set<MethodInfo>> methodInfos,
         final Method method = service.method();
         final String name = method.getName();
         final TypeSignature returnTypeSignature =
-                isSuspendingFunction(method) ? toTypeSignature(kFunctionReturnType(method))
+                isSuspendingFunction(method) ? toTypeSignature(kFunctionGenericReturnType(method))
                                              : toTypeSignature(method.getGenericReturnType());
         final List<FieldInfo> fieldInfos = fieldInfos(service.annotatedValueResolvers());
         final Class<?> clazz = service.object().getClass();

File: core/src/main/java/com/linecorp/armeria/server/cors/CorsService.java
Patch:
@@ -127,7 +127,7 @@ private HttpResponse handleCorsPreflight(ServiceRequestContext ctx, HttpRequest
         final CorsPolicy policy = setCorsOrigin(ctx, req, headers);
         if (policy != null) {
             policy.setCorsAllowMethods(headers);
-            policy.setCorsAllowHeaders(headers);
+            policy.setCorsAllowHeaders(req.headers(), headers);
             policy.setCorsAllowCredentials(headers);
             policy.setCorsMaxAge(headers);
             policy.setCorsPreflightResponseHeaders(headers);
@@ -147,7 +147,7 @@ private void setCorsResponseHeaders(ServiceRequestContext ctx, HttpRequest req,
         final CorsPolicy policy = setCorsOrigin(ctx, req, headers);
         if (policy != null) {
             policy.setCorsAllowCredentials(headers);
-            policy.setCorsAllowHeaders(headers);
+            policy.setCorsAllowHeaders(req.headers(), headers);
             policy.setCorsExposeHeaders(headers);
         }
     }

File: benchmarks/jmh/src/jmh/java/com/linecorp/armeria/internal/server/annotation/MethodInvokerBenchmark.java
Patch:
@@ -154,7 +154,7 @@ public String method3(String param0, int... params) {
         return builder.toString();
     }
 
-    // This is a replica of AnnotatedService#asMethodHandle(Method, Object)} with additional support for varargs
+    // This is a replica of AnnotatedService#asMethodHandle(Method, Object) with additional support for varargs
     private static MethodHandle asMethodHandle(Method method, @Nullable Object object) {
         MethodHandle methodHandle;
         try {

File: core/src/main/java/com/linecorp/armeria/client/Endpoint.java
Patch:
@@ -477,7 +477,7 @@ private Endpoint withIpAddr(String ipAddr, StandardProtocolFamily ipFamily) {
     }
 
     /**
-     * Returns a new host endpoint with the {@linkplain InetAddress#getHostAddress()} IP address} of
+     * Returns a new host endpoint with the {@linkplain InetAddress#getHostAddress() IP address} of
      * the specified {@link InetAddress}.
      *
      * @return the new endpoint with the specified {@link InetAddress}.

File: core/src/main/java/com/linecorp/armeria/client/redirect/UnexpectedProtocolRedirectException.java
Patch:
@@ -27,7 +27,7 @@
 import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
- * An exception indicating that the {@linkplain URI#getScheme()} session protocol} of the redirection URI
+ * An exception indicating that the {@linkplain URI#getScheme() session protocol} of the redirection URI
  * is not allowed to redirect.
  *
  * @see RedirectConfigBuilder#allowProtocols(Iterable)

File: core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClientBuilder.java
Patch:
@@ -99,7 +99,7 @@ public AbstractRetryingClientBuilder<O> maxTotalAttempts(int maxTotalAttempts) {
      * When requests in {@link AbstractRetryingClient} are made,
      * corresponding responses are timed out by this value. {@code 0} disables the timeout.
      * It will be set by the default value in {@link Flags#defaultResponseTimeoutMillis()}, if the client
-     * dose not specify.
+     * does not specify.
      *
      * @return {@code this} to support method chaining.
      *

File: core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java
Patch:
@@ -109,7 +109,7 @@ public static ContentDisposition of(String type, String name) {
      * @param type the disposition type like for example {@code inline}, {@code attachment},
      *             or {@code form-data}
      * @param name the name parameter
-     * @param filename the filename parameter that will be be formatted as quoted-string,
+     * @param filename the filename parameter that will be formatted as quoted-string,
      *                 as defined in RFC 2616, section 2.2, and any quote characters within
      *                 the filename value will be escaped with a backslash,
      *                 e.g. {@code "foo\"bar.txt"} becomes {@code "foo\\\"bar.txt"}

File: core/src/main/java/com/linecorp/armeria/common/logging/BuiltInProperty.java
Patch:
@@ -323,7 +323,7 @@ public enum BuiltInProperty {
     }),
 
     /**
-     * {@code "tls.proto"} - the current {@linkplain SSLSession#getProtocol()} TLS protocol}.
+     * {@code "tls.proto"} - the current {@linkplain SSLSession#getProtocol() TLS protocol}.
      * Unavailable if TLS handshake is not finished or the connection is not a TLS connection, such as
      * {@code "TLSv1.2"}.
      */

File: core/src/main/java/com/linecorp/armeria/common/multipart/Multipart.java
Patch:
@@ -139,7 +139,7 @@ static Multipart from(HttpRequest request) {
     }
 
     /**
-     * Returns a decoded {@link Multipart} from the the specified {@code boundary} and
+     * Returns a decoded {@link Multipart} from the specified {@code boundary} and
      * {@link Publisher} of {@link HttpData}.
      * For instance, {@link Multipart} could be decoded from the specified {@link HttpResponse}
      * in the following way:
@@ -163,7 +163,7 @@ static Multipart from(String boundary, Publisher<? extends HttpData> contents) {
     }
 
     /**
-     * Returns a decoded {@link Multipart} from the the specified {@code boundary},
+     * Returns a decoded {@link Multipart} from the specified {@code boundary},
      * {@link Publisher} of {@link HttpData} and {@link ByteBufAllocator}.
      */
     static Multipart from(String boundary, Publisher<? extends HttpData> contents, ByteBufAllocator alloc) {

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java
Patch:
@@ -550,7 +550,7 @@ default void timeoutNow() {
 
     /**
      * Initiates graceful connection shutdown with a given drain duration in microseconds and returns
-     * {@link CompletableFuture} that completes when the channel is closed..
+     * {@link CompletableFuture} that completes when the channel is closed.
      *
      * <p>
      * At the connection drain server signals the clients that the connection shutdown is imminent

File: oauth2/src/main/java/com/linecorp/armeria/server/auth/oauth2/OAuth2TokenIntrospectionAuthorizerBuilder.java
Patch:
@@ -61,7 +61,7 @@ public final class OAuth2TokenIntrospectionAuthorizerBuilder {
     private CaffeineSpec cacheSpec;
 
     /**
-     * Constructs new new builder for OAuth 2.0 Token Introspection {@link Authorizer},
+     * Constructs new builder for OAuth 2.0 Token Introspection {@link Authorizer},
      * as per<a href="https://datatracker.ietf.org/doc/html/rfc7662#section-2">[RFC7662], Section 2</a>.
      *
      * @param introspectionEndpoint A {@link WebClient} to facilitate the Token Introspection request. Must
@@ -162,7 +162,7 @@ public OAuth2TokenIntrospectionAuthorizerBuilder permittedScope(Iterable<String>
     }
 
     /**
-     * An array of of case-sensitive scope strings permitted by this authorizer.
+     * An array of case-sensitive scope strings permitted by this authorizer.
      * The authorizer will accept any scope if empty.
      */
     public OAuth2TokenIntrospectionAuthorizerBuilder permittedScope(String... scope) {

File: resteasy/src/main/java/com/linecorp/armeria/internal/common/resteasy/ByteBufferBackedOutputStream.java
Patch:
@@ -85,7 +85,7 @@ public void close() throws IOException {
     }
 
     /**
-     * Resets the the underlying buffer and the flush indicator.
+     * Resets the underlying buffer and the flush indicator.
      */
     public void reset() {
         buffer.clear();

File: benchmarks/jmh/src/jmh/java/com/linecorp/armeria/server/RoutersBenchmark.java
Patch:
@@ -61,7 +61,7 @@ public class RoutersBenchmark {
                                              defaultServiceNaming, 0, 0, false, AccessLogWriter.disabled(),
                                              false, CommonPools.blockingTaskExecutor(), true);
         HOST = new VirtualHost(
-                "localhost", "localhost", null, SERVICES, FALLBACK_SERVICE, RejectedRouteHandler.DISABLED,
+                "localhost", "localhost", 0, null, SERVICES, FALLBACK_SERVICE, RejectedRouteHandler.DISABLED,
                 unused -> NOPLogger.NOP_LOGGER, defaultServiceNaming, 0, 0, false,
                 AccessLogWriter.disabled(), false, CommonPools.blockingTaskExecutor(), true);
         ROUTER = Routers.ofVirtualHost(HOST, SERVICES, RejectedRouteHandler.DISABLED);

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -319,7 +319,8 @@ private void handleRequest(ChannelHandlerContext ctx, DecodedHttpRequest req) th
         final Channel channel = ctx.channel();
         final RequestHeaders headers = req.headers();
         final String hostname = hostname(headers);
-        final VirtualHost virtualHost = config.findVirtualHost(hostname);
+        final int port = ((InetSocketAddress) channel.localAddress()).getPort();
+        final VirtualHost virtualHost = config.findVirtualHost(hostname, port);
         final ProxiedAddresses proxiedAddresses = determineProxiedAddresses(channel, headers);
         final InetAddress clientAddress = config.clientAddressMapper().apply(proxiedAddresses).getAddress();
 

File: core/src/test/java/com/linecorp/armeria/server/RoutingContextTest.java
Patch:
@@ -112,6 +112,6 @@ static VirtualHost virtualHost() {
                                     .serviceUnder("/", service)
                                     .and()
                                     .build();
-        return server.config().findVirtualHost("example.com");
+        return server.config().findVirtualHost("example.com", -1);
     }
 }

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceElement.java
Patch:
@@ -75,9 +75,10 @@ public AnnotatedService service() {
     public HttpService buildSafeDecoratedService(
             Function<? super HttpService, ? extends HttpService> localDecorator) {
         // Apply decorators which are specified in the service class.
-        final HttpService decoratedService = decorator.apply(service);
+        HttpService decoratedService = decorator.apply(service);
         // Apply localDecorator passed in through method parameter
-        return decoratedService.decorate(localDecorator);
+        decoratedService = decoratedService.decorate(localDecorator);
+        return service.withExceptionHandler(decoratedService);
     }
 
     @Override

File: core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceExceptionHandlerTest.java
Patch:
@@ -192,8 +192,8 @@ void handle3WithBadDecorator() {
         // A decorator throws an exception.
         final AggregatedHttpResponse response = client.execute(RequestHeaders.of(HttpMethod.GET, "/5/handler3"))
                                                       .aggregate().join();
-
-        assertThat(response.status()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
+        assertThat(response.status()).isEqualTo(HttpStatus.OK);
+        assertThat(response.contentUtf8()).isEqualTo("handler3");
     }
 
     @ResponseConverter(UnformattedStringConverterFunction.class)

File: spring/boot2-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java
Patch:
@@ -187,7 +187,7 @@ void testLoggers() throws Exception {
     void testPrometheus() throws Exception {
         final AggregatedHttpResponse res = client.get("/internal/actuator/prometheus").aggregate().get();
         assertThat(res.status()).isEqualTo(HttpStatus.OK);
-        assertThat(res.contentType()).isEqualTo(MediaType.parse(TextFormat.CONTENT_TYPE_OPENMETRICS_100));
+        assertThat(res.contentType()).isEqualTo(MediaType.parse(TextFormat.CONTENT_TYPE_004));
         assertThat(res.contentAscii()).startsWith("# HELP ");
     }
 

File: core/src/main/java/com/linecorp/armeria/client/encoding/DecodingClient.java
Patch:
@@ -38,6 +38,7 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.RequestHeadersBuilder;
 import com.linecorp.armeria.common.annotation.Nullable;
+import com.linecorp.armeria.internal.common.encoding.DefaultHttpDecodedResponse;
 
 /**
  * A {@link DecoratingClient} that requests and decodes HTTP encoding (e.g., gzip) that has been applied to the
@@ -151,11 +152,11 @@ public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Ex
         return executeAndDecodeResponse(ctx, req, decoderFactories);
     }
 
-    private HttpDecodedResponse executeAndDecodeResponse(
+    private DefaultHttpDecodedResponse executeAndDecodeResponse(
             ClientRequestContext ctx, HttpRequest req,
             Map<String, StreamDecoderFactory> decoderFactories) throws Exception {
         final HttpResponse res = unwrap().execute(ctx, req);
-        return new HttpDecodedResponse(res, decoderFactories, ctx.alloc(), strictContentEncoding);
+        return new DefaultHttpDecodedResponse(res, decoderFactories, ctx.alloc(), strictContentEncoding);
     }
 
     private static HttpRequest updateAcceptEncoding(ClientRequestContext ctx, HttpRequest req,

File: core/src/main/java/com/linecorp/armeria/client/encoding/StreamDecoderFactories.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Stream Decoder Factories for gzip, deflate.
  *
- * @deprecated Use {@link com.linecorp.armeria.common.encoding.StreamDecoderFactories} instead.
+ * @deprecated Use {@code com.linecorp.armeria.common.encoding.StreamDecoderFactories} instead.
  */
 @Deprecated
 enum StreamDecoderFactories implements StreamDecoderFactory {

File: core/src/main/java/com/linecorp/armeria/common/HttpRequest.java
Patch:
@@ -46,6 +46,7 @@
 import com.linecorp.armeria.common.stream.PublisherBasedStreamMessage;
 import com.linecorp.armeria.common.stream.StreamMessage;
 import com.linecorp.armeria.internal.common.DefaultHttpRequest;
+import com.linecorp.armeria.internal.common.HttpMessageAggregator;
 import com.linecorp.armeria.internal.common.stream.DecodedHttpStreamMessage;
 import com.linecorp.armeria.unsafe.PooledObjects;
 

File: core/src/main/java/com/linecorp/armeria/common/HttpResponse.java
Patch:
@@ -52,6 +52,7 @@
 import com.linecorp.armeria.common.stream.SubscriptionOption;
 import com.linecorp.armeria.internal.common.DefaultHttpResponse;
 import com.linecorp.armeria.internal.common.DefaultSplitHttpResponse;
+import com.linecorp.armeria.internal.common.HttpMessageAggregator;
 import com.linecorp.armeria.internal.common.JacksonUtil;
 import com.linecorp.armeria.internal.common.stream.DecodedHttpStreamMessage;
 import com.linecorp.armeria.internal.common.stream.RecoverableStreamMessage;

File: core/src/main/java/com/linecorp/armeria/server/file/HttpDataFile.java
Patch:
@@ -76,6 +76,7 @@ protected String pathOrUri() {
         return "";
     }
 
+    @Nonnull
     @Override
     public HttpFileAttributes attributes() {
         return attrs;
@@ -86,6 +87,7 @@ public CompletableFuture<HttpFileAttributes> readAttributes(Executor fileReadExe
         return UnmodifiableFuture.completedFuture(attrs);
     }
 
+    @Nonnull
     @Override
     public ResponseHeaders headers() {
         return readHeaders(attrs);

File: core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java
Patch:
@@ -373,11 +373,12 @@ private void failAndRespond(Throwable cause, AggregatedHttpResponse res, Http2Er
         ChannelFuture future;
         final boolean isReset;
         if (oldState == State.NEEDS_HEADERS) { // ResponseHeaders is not sent yet, so we can send the response.
-            final ResponseHeaders headers = res.headers();
+            final ResponseHeaders headers =
+                    mergeResponseHeaders(res.headers(), reqCtx.additionalResponseHeaders());
             logBuilder().responseHeaders(headers);
 
             final HttpData content = res.content();
-            final HttpHeaders trailers = res.trailers();
+            final HttpHeaders trailers = mergeTrailers(res.trailers(), reqCtx.additionalResponseTrailers());
             final boolean trailersEmpty = trailers.isEmpty();
             future = responseEncoder.writeHeaders(id, streamId, headers,
                                                   content.isEmpty() && trailersEmpty, trailersEmpty);

File: core/src/main/java/com/linecorp/armeria/client/Http2ResponseDecoder.java
Patch:
@@ -166,6 +166,8 @@ public void onGoAwaySent(int lastStreamId, long errorCode, ByteBuf debugData) {
 
     @Override
     public void onGoAwayReceived(int lastStreamId, long errorCode, ByteBuf debugData) {
+        // Should not reuse a connection that received a GOAWAY frame.
+        HttpSession.get(channel()).deactivate();
         disconnectWhenFinished();
         goAwayHandler.onGoAwayReceived(channel(), lastStreamId, errorCode, debugData);
     }

File: core/src/main/java/com/linecorp/armeria/internal/common/AbstractKeepAliveHandler.java
Patch:
@@ -341,6 +341,9 @@ private final class ConnectionIdleTimeoutTask extends AbstractKeepAliveTask {
 
         @Override
         protected void run(ChannelHandlerContext ctx) {
+            if (pingState == PingState.SHUTDOWN) {
+                return;
+            }
 
             final long lastConnectionIdleTime = AbstractKeepAliveHandler.this.lastConnectionIdleTime;
             final long nextDelay;

File: core/src/main/java/com/linecorp/armeria/server/Http2ServerConnectionHandler.java
Patch:
@@ -156,6 +156,7 @@ private final class Http2GracefulConnectionShutdownHandler extends GracefulConne
         @Override
         public void onDrainStart(ChannelHandlerContext ctx) {
             goAway(ctx, Integer.MAX_VALUE);
+            ctx.flush();
         }
 
         /**

File: core/src/test/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceTest.java
Patch:
@@ -22,6 +22,7 @@
 import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
@@ -491,7 +492,8 @@ void customError() {
 
     private static void verifyDebugEnabled(Logger logger) {
         await().untilAsserted(() -> {
-            verify(logger).isDebugEnabled();
+            // 2 times for the request and the response.
+            verify(logger, times(2)).isDebugEnabled();
         });
     }
 

File: core/src/test/java/com/linecorp/armeria/server/metric/PrometheusExpositionServiceTest.java
Patch:
@@ -93,8 +93,7 @@ void prometheusRequests() throws InterruptedException {
         });
         // Access log is not written.
         await().pollDelay(500, TimeUnit.MILLISECONDS).then().until(() -> logs.size() == 1);
-        // LoggingService ignores the request.
-        verify(logger, times(3)).isDebugEnabled();
+        verify(logger, times(4)).isDebugEnabled();
         verify(logger, times(2)).debug(anyString(), any(), any());
 
         client.get("/enabled").aggregate().join();
@@ -109,7 +108,7 @@ void prometheusRequests() throws InterruptedException {
         });
         // Access log is written.
         await().pollDelay(500, TimeUnit.MILLISECONDS).until(() -> logs.size() == 2);
-        verify(logger, times(5)).isDebugEnabled();
+        verify(logger, times(6)).isDebugEnabled();
         verify(logger, times(4)).debug(anyString(), any(), any());
     }
 }

File: core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java
Patch:
@@ -441,7 +441,7 @@ public final void close(Throwable cause) {
      * @return {@code true} if the stream has been closed by this method call.
      *         {@code false} if the stream has been closed already by other party.
      */
-    protected final boolean tryClose(Throwable cause) {
+    public final boolean tryClose(Throwable cause) {
         if (setState(State.OPEN, State.CLOSED)) {
             addObjectOrEvent(new CloseEvent(cause));
             return true;

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java
Patch:
@@ -199,6 +199,9 @@ private static ResponseConverterFunction responseConverter(
             final ParameterizedType type = (ParameterizedType) method.getGenericReturnType();
             warnIfHttpResponseArgumentExists(type, type);
             actualType = type.getActualTypeArguments()[0];
+        } else if (KotlinUtil.isSuspendingFunction(method)) {
+            // Use kotlin reflection since suspending function's java return type is always Object.
+            actualType = KotlinUtil.kFunctionReturnType(method);
         } else {
             actualType = method.getGenericReturnType();
         }

File: kotlin/src/test/java/com/linecorp/armeria/internal/server/annotation/KotlinUtilWithKotlinDependenciesTest.java
Patch:
@@ -27,8 +27,8 @@
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.RequestContext;
-import com.linecorp.armeria.server.ExampleService;
 import com.linecorp.armeria.server.ServiceRequestContext;
+import com.linecorp.armeria.server.kotlin.ExampleService;
 
 import kotlin.coroutines.Continuation;
 

File: grpc/src/test/java/com/linecorp/armeria/it/grpc/GrpcMetricsIntegrationTest.java
Patch:
@@ -189,7 +189,7 @@ public void unframed() throws Exception {
         assertThat(findServerMeter("UnaryCall2", "response.length", TOTAL,
                                    "http.status", "200", "grpc.status", "0")).isEqualTo(0.0);
         assertThat(findServerMeter("UnaryCall2", "response.length", TOTAL,
-                                   "http.status", "500", "grpc.status", "2")).isEqualTo(225.0);
+                                   "http.status", "500", "grpc.status", "2")).isEqualTo(54.0);
     }
 
     @Nullable

File: graphql/src/test/java/com/linecorp/armeria/server/graphql/GraphqlServiceBlockingTest.java
Patch:
@@ -59,6 +59,8 @@ private static DataFetcher<String> dataFetcher(String value) {
         return environment -> {
             final ServiceRequestContext ctx = environment.getContext();
             assertThat(ctx.eventLoop().inEventLoop()).isFalse();
+            // Make sure that a ServiceRequestContext is available
+            assertThat(ServiceRequestContext.current()).isSameAs(ctx);
             return value;
         };
     }

File: core/src/main/java/com/linecorp/armeria/client/DefaultEventLoopScheduler.java
Patch:
@@ -146,8 +146,8 @@ private AbstractEventLoopState state(SessionProtocol sessionProtocol,
                                          @Nullable Endpoint endpoint) {
         if (endpoint == null) {
             // Use a fake endpoint if no endpoint was selected from the endpointGroup.
-            endpoint = Endpoint.of(
-                    "armeria-group-" + Integer.toHexString(System.identityHashCode(endpointGroup)));
+            endpoint = Endpoint.unsafeCreate(
+                    "armeria-group-" + Integer.toHexString(System.identityHashCode(endpointGroup)), 0);
         }
 
         final String firstTryHost;

File: core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java
Patch:
@@ -431,7 +431,7 @@ void invokeProxyConnectFailed(SessionProtocol protocol, PoolKey poolKey, Throwab
                 final InetSocketAddress proxyAddress = proxyConfig.proxyAddress();
                 assert proxyAddress != null;
                 final ProxyConfigSelector proxyConfigSelector = clientFactory.proxyConfigSelector();
-                proxyConfigSelector.connectFailed(protocol, Endpoint.of(poolKey.host, poolKey.port),
+                proxyConfigSelector.connectFailed(protocol, Endpoint.unsafeCreate(poolKey.host, poolKey.port),
                                                   proxyAddress, UnprocessedRequestException.of(cause));
             }
         } catch (Throwable t) {

File: core/src/main/java/com/linecorp/armeria/client/UserClient.java
Patch:
@@ -176,9 +176,10 @@ protected final O execute(SessionProtocol protocol, EndpointGroup endpointGroup,
             rpcReq = (RpcRequest) req;
         }
 
+        final boolean hasBaseUri = !Clients.isUndefinedUri(params.uri());
         final DefaultClientRequestContext ctx = new DefaultClientRequestContext(
                 meterRegistry, protocol, id, method, path, query, fragment, options(), httpReq, rpcReq,
-                requestOptions, System.nanoTime(), SystemInfo.currentTimeMicros());
+                requestOptions, System.nanoTime(), SystemInfo.currentTimeMicros(), hasBaseUri);
 
         return initContextAndExecuteWithFallback(unwrap(), ctx, endpointGroup,
                                                  futureConverter, errorResponseFactory);

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsAddressEndpointGroup.java
Patch:
@@ -189,7 +189,7 @@ ImmutableSortedSet<Endpoint> onDnsRecords(List<DnsRecord> records, int ttl) thro
                 ipAddr = NetUtil.bytesToIpAddress(addrBytes);
             }
 
-            final Endpoint endpoint = port != 0 ? Endpoint.of(hostname, port) : Endpoint.of(hostname);
+            final Endpoint endpoint = Endpoint.unsafeCreate(hostname, port);
             builder.add(endpoint.withIpAddr(ipAddr));
         }
 

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HttpHealthChecker.java
Patch:
@@ -95,7 +95,7 @@ private synchronized void check() {
         final RequestHeaders headers;
         final RequestHeadersBuilder builder =
                 RequestHeaders.builder(useGet ? HttpMethod.GET : HttpMethod.HEAD, path)
-                              .add(HttpHeaderNames.AUTHORITY, authority);
+                              .authority(authority);
         if (maxLongPollingSeconds > 0) {
             headers = builder.add(HttpHeaderNames.IF_NONE_MATCH, wasHealthy ? "\"healthy\"" : "\"unhealthy\"")
                              .add(HttpHeaderNames.PREFER, "wait=" + maxLongPollingSeconds)

File: core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java
Patch:
@@ -207,7 +207,7 @@ public boolean equals(AsciiString a, AsciiString b) {
     }
 
     static final Set<AsciiString> ADDITIONAL_REQUEST_HEADER_DISALLOWED_LIST = ImmutableSet.of(
-            HttpHeaderNames.SCHEME, HttpHeaderNames.STATUS, HttpHeaderNames.METHOD);
+            HttpHeaderNames.SCHEME, HttpHeaderNames.STATUS, HttpHeaderNames.METHOD, HttpHeaderNames.AUTHORITY);
 
     static final Set<AsciiString> ADDITIONAL_RESPONSE_HEADER_DISALLOWED_LIST = ImmutableSet.of(
             HttpHeaderNames.SCHEME, HttpHeaderNames.STATUS, HttpHeaderNames.METHOD, HttpHeaderNames.PATH);

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaChannel.java
Patch:
@@ -191,6 +191,7 @@ private DefaultClientRequestContext newContext(HttpMethod method, HttpRequest re
                 null,
                 RequestOptions.of(),
                 System.nanoTime(),
-                SystemInfo.currentTimeMicros());
+                SystemInfo.currentTimeMicros(),
+                /* hasBaseUri */ true);
     }
 }

File: junit5/src/main/java/com/linecorp/armeria/internal/testing/ServerRuleDelegate.java
Patch:
@@ -186,7 +186,7 @@ private boolean hasSessionProtocol(SessionProtocol protocol) {
      */
     public Endpoint endpoint(SessionProtocol protocol) {
         ensureStarted();
-        return Endpoint.of("127.0.0.1", port(protocol));
+        return Endpoint.unsafeCreate("127.0.0.1", port(protocol));
     }
 
     /**

File: retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaCallFactory.java
Patch:
@@ -89,7 +89,7 @@ WebClient getWebClient(HttpUrl url) {
         }
 
         final SessionProtocol protocol = url.isHttps() ? SessionProtocol.HTTPS : SessionProtocol.HTTP;
-        final Endpoint endpoint = Endpoint.of(url.host(), url.port());
+        final Endpoint endpoint = Endpoint.unsafeCreate(url.host(), url.port());
         return nonBaseWebClientFactory.apply(protocol, endpoint);
     }
 

File: testing-internal/src/main/java/com/linecorp/armeria/internal/testing/NettyServerExtension.java
Patch:
@@ -51,7 +51,7 @@ public final InetSocketAddress address() {
     }
 
     public final Endpoint endpoint() {
-        return Endpoint.of(address().getHostString(), address().getPort());
+        return Endpoint.unsafeCreate(address().getHostString(), address().getPort());
     }
 
     protected abstract void configure(Channel ch) throws Exception;

File: thrift0.13/src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTest.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.thrift.async.AsyncMethodCallback;
 import org.apache.thrift.protocol.TMessageType;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.transport.TTransportException;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;
@@ -722,6 +723,8 @@ void testBadStatus(
                                                  .options(clientOptions)
                                                  .build(Handlers.HELLO.iface());
         assertThatThrownBy(() -> client.hello(""))
+                .isInstanceOf(TTransportException.class)
+                .getCause()
                 .isInstanceOfSatisfying(InvalidResponseHeadersException.class, cause -> {
                     assertThat(cause.headers().status()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
                 })

File: thrift0.13/src/test/java/com/linecorp/armeria/it/server/GracefulShutdownIntegrationTest.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 
+import org.apache.thrift.transport.TTransportException;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -206,7 +207,8 @@ void interruptsSlowRequests() throws Exception {
                 latch1.countDown();
                 client.sleep(30000L);
                 completed.set(true);
-            } catch (ClosedSessionException expected) {
+            } catch (TTransportException cause) {
+                assertThat(cause).hasCauseInstanceOf(ClosedSessionException.class);
                 latch2.countDown();
             } catch (Throwable t) {
                 logger.error("Unexpected failure:", t);

File: thrift0.13/src/test/java/com/linecorp/armeria/it/thrift/ThriftHttpErrorResponseTest.java
Patch:
@@ -19,6 +19,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
+import org.apache.thrift.transport.TTransportException;
 import org.junit.jupiter.api.extension.RegisterExtension;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.EnumSource;
@@ -82,6 +83,8 @@ protected void configure(ServerBuilder sb) throws Exception {
     void test(TestParam param) throws Exception {
         final Iface client = Clients.newClient(server.httpUri(BINARY).resolve(param.path), Iface.class);
         assertThatThrownBy(() -> client.hello("foo"))
+                .isInstanceOf(TTransportException.class)
+                .getCause()
                 .isInstanceOfSatisfying(InvalidResponseHeadersException.class, cause -> {
                     assertThat(cause.headers().status()).isEqualTo(HttpStatus.CONFLICT);
                 });

File: thrift0.13/src/test/java/com/linecorp/armeria/it/thrift/ThrottlingRpcServiceTest.java
Patch:
@@ -24,6 +24,7 @@
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
 
+import org.apache.thrift.transport.TTransportException;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -85,6 +86,8 @@ public void throttle() throws Exception {
                 Clients.newClient(server.httpUri(BINARY) + "/thrift-never", HelloService.Iface.class);
 
         assertThatThrownBy(() -> client.hello("foo"))
+                .isInstanceOf(TTransportException.class)
+                .getCause()
                 .isInstanceOfSatisfying(InvalidResponseHeadersException.class, cause -> {
                     assertThat(cause.headers().status()).isEqualTo(HttpStatus.SERVICE_UNAVAILABLE);
                 });

File: core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java
Patch:
@@ -396,7 +396,7 @@ public ServerBuilder localPort(int port, Iterable<SessionProtocol> protocols) {
         final long portGroup = ServerPort.nextPortGroup();
         port(new ServerPort(new InetSocketAddress(NetUtil.LOCALHOST4, port), protocols, portGroup));
 
-        if (!NetUtil.isIpV4StackPreferred()) {
+        if (SystemInfo.hasIpV6()) {
             port(new ServerPort(new InetSocketAddress(NetUtil.LOCALHOST6, port), protocols, portGroup));
         }
 

File: core/src/test/java/com/linecorp/armeria/server/ServerEphemeralLocalPortTest.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Collection;
 
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.condition.DisabledIf;
+import org.junit.jupiter.api.condition.EnabledIf;
 import org.junit.jupiter.api.extension.RegisterExtension;
 
 import com.linecorp.armeria.common.HttpResponse;
@@ -30,7 +30,7 @@
 
 import io.netty.util.NetUtil;
 
-@DisabledIf(value = "io.netty.util.NetUtil#isIpV4StackPreferred", disabledReason = "IPv6 disabled")
+@EnabledIf(value = "com.linecorp.armeria.common.util.SystemInfo#hasIpV6", disabledReason = "IPv6 disabled")
 class ServerEphemeralLocalPortTest {
 
     @RegisterExtension

File: spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponseTest.java
Patch:
@@ -338,7 +338,7 @@ public void onComplete() {
 
         await().untilTrue(completed);
         assertThat(error.get()).isInstanceOf(IllegalArgumentException.class)
-                               .hasMessageContaining("Reactive Streams specification rule 3.9");
+                               .hasMessageContaining("non-positive request signals are illegal");
         await().untilAsserted(() -> {
             assertThat(allocatedBuffers).hasSize(1);
             assertThat(allocatedBuffers.peek().getNativeBuffer().refCnt()).isZero();

File: core/src/test/java/com/linecorp/armeria/client/DnsMetricsTest.java
Patch:
@@ -61,7 +61,7 @@
 import io.netty.resolver.dns.DnsServerAddresses;
 import io.netty.util.ReferenceCountUtil;
 
-public class DnsMetricsTest {
+class DnsMetricsTest {
 
     @Test
     void success() {

File: core/src/main/java/com/linecorp/armeria/server/annotation/JacksonResponseConverterFunction.java
Patch:
@@ -83,7 +83,8 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,
                 // because ObjectMapper always writes JSON document as UTF-8.
                 if (charset.contains(StandardCharsets.UTF_8)) {
                     if (result instanceof Publisher) {
-                        return aggregateFrom((Publisher<?>) result, headers, trailers, this::toJsonHttpData);
+                        return aggregateFrom((Publisher<?>) result, headers, trailers,
+                                             this::toJsonHttpData, ctx);
                     }
                     if (result instanceof Stream) {
                         return aggregateFrom((Stream<?>) result, headers, trailers,

File: core/src/main/java/com/linecorp/armeria/server/annotation/StringResponseConverterFunction.java
Patch:
@@ -56,7 +56,8 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,
 
                 // To avoid sending an unfinished text to the client, always aggregate the published strings.
                 if (result instanceof Publisher) {
-                    return aggregateFrom((Publisher<?>) result, headers, trailers, o -> toHttpData(o, charset));
+                    return aggregateFrom((Publisher<?>) result, headers, trailers,
+                                         o -> toHttpData(o, charset), ctx);
                 }
                 if (result instanceof Stream) {
                     return aggregateFrom((Stream<?>) result, headers, trailers,

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientTest.java
Patch:
@@ -21,7 +21,6 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.assertj.core.api.Assertions.catchThrowable;
-import static org.awaitility.Awaitility.await;
 
 import java.time.Duration;
 import java.util.Arrays;
@@ -660,7 +659,7 @@ void doNotRetryWhenResponseIsAborted() throws Exception {
     }
 
     @Test
-    void retryDoNotStopUntilGetResponseWhenSubscriberCancel() {
+    void doNotRetryWhenSubscriberIsCancelled() throws Exception {
         final WebClient client = client(retryAlways);
         client.get("/subscriber-cancel").subscribe(
                 new Subscriber<HttpObject>() {
@@ -679,7 +678,8 @@ public void onError(Throwable t) {}
                     public void onComplete() {}
                 });
 
-        await().untilAsserted(() -> assertThat(subscriberCancelServiceCallCounter.get()).isEqualTo(3));
+        TimeUnit.SECONDS.sleep(1L); // Sleep to check if there's a retry.
+        assertThat(subscriberCancelServiceCallCounter.get()).isEqualTo(1);
     }
 
     @Test

File: protobuf/src/main/java/com/linecorp/armeria/server/protobuf/ProtobufResponseConverterFunction.java
Patch:
@@ -203,7 +203,7 @@ public HttpResponse convertResponse(ServiceRequestContext ctx, ResponseHeaders h
             if (result instanceof Publisher) {
                 @SuppressWarnings("unchecked")
                 final Publisher<Object> publisher = (Publisher<Object>) result;
-                return aggregateFrom(publisher, headers, trailers, obj -> toJsonHttpData(obj, charset));
+                return aggregateFrom(publisher, headers, trailers, obj -> toJsonHttpData(obj, charset), ctx);
             }
             if (result instanceof Stream) {
                 @SuppressWarnings("unchecked")

File: benchmarks/src/jmh/java/com/linecorp/armeria/common/HttpHeadersBenchmark.java
Patch:
@@ -16,11 +16,11 @@
 
 package com.linecorp.armeria.common;
 
-import javax.annotation.Nullable;
-
 import org.openjdk.jmh.annotations.Benchmark;
 import org.openjdk.jmh.annotations.Fork;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * Microbenchmarks of {@link DefaultHttpHeaders} construction.
  */

File: benchmarks/src/jmh/java/com/linecorp/armeria/core/client/endpoint/WeightedRoundRobinStrategyBenchmark.java
Patch:
@@ -20,8 +20,6 @@
 import java.util.List;
 import java.util.Random;
 
-import javax.annotation.Nullable;
-
 import org.openjdk.jmh.annotations.Benchmark;
 import org.openjdk.jmh.annotations.Scope;
 import org.openjdk.jmh.annotations.Setup;
@@ -31,6 +29,7 @@
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.client.endpoint.EndpointSelectionStrategy;
 import com.linecorp.armeria.client.endpoint.EndpointSelector;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * Microbenchmarks of different {@link EndpointSelector} configurations.

File: benchmarks/src/jmh/java/com/linecorp/armeria/grpc/shared/SimpleBenchmarkBase.java
Patch:
@@ -20,8 +20,6 @@
 
 import java.util.concurrent.TimeUnit;
 
-import javax.annotation.Nullable;
-
 import org.openjdk.jmh.annotations.Benchmark;
 import org.openjdk.jmh.annotations.Param;
 import org.openjdk.jmh.annotations.Scope;
@@ -34,6 +32,7 @@
 import com.google.common.util.concurrent.MoreExecutors;
 import com.google.protobuf.Empty;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.grpc.GithubApi.SearchResponse;
 import com.linecorp.armeria.grpc.GithubServiceGrpc;
 import com.linecorp.armeria.grpc.GithubServiceGrpc.GithubServiceBlockingStub;

File: benchmarks/src/jmh/java/com/linecorp/armeria/internal/server/annotation/MethodInvokerBenchmark.java
Patch:
@@ -23,8 +23,6 @@
 import java.lang.reflect.Modifier;
 import java.util.concurrent.TimeUnit;
 
-import javax.annotation.Nullable;
-
 import org.openjdk.jmh.annotations.Benchmark;
 import org.openjdk.jmh.annotations.BenchmarkMode;
 import org.openjdk.jmh.annotations.Level;
@@ -36,6 +34,8 @@
 import org.openjdk.jmh.annotations.Warmup;
 import org.openjdk.jmh.infra.Blackhole;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 @State(Scope.Benchmark)
 @OutputTimeUnit(TimeUnit.NANOSECONDS)
 @BenchmarkMode(Mode.AverageTime)

File: brave/src/main/java/com/linecorp/armeria/client/brave/BraveClient.java
Patch:
@@ -21,8 +21,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.function.Function;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -33,6 +31,7 @@
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.RequestHeadersBuilder;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.brave.RequestContextCurrentTraceContext;
 import com.linecorp.armeria.common.logging.ClientConnectionTimings;
 import com.linecorp.armeria.internal.common.brave.SpanTags;

File: brave/src/main/java/com/linecorp/armeria/client/brave/ClientRequestContextAdapter.java
Patch:
@@ -16,13 +16,12 @@
 
 package com.linecorp.armeria.client.brave;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.RequestHeadersBuilder;
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogAccess;
 import com.linecorp.armeria.common.logging.RequestLogProperty;

File: brave/src/main/java/com/linecorp/armeria/common/brave/RequestContextCurrentTraceContext.java
Patch:
@@ -24,13 +24,12 @@
 import java.util.function.Supplier;
 import java.util.regex.Pattern;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.linecorp.armeria.client.brave.BraveClient;
 import com.linecorp.armeria.common.RequestContext;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.internal.common.brave.TraceContextUtil;
 import com.linecorp.armeria.server.brave.BraveService;

File: brave/src/main/java/com/linecorp/armeria/internal/common/brave/TraceContextUtil.java
Patch:
@@ -18,11 +18,10 @@
 
 import static java.util.Objects.requireNonNull;
 
-import javax.annotation.Nullable;
-
 import com.google.common.annotations.VisibleForTesting;
 
 import com.linecorp.armeria.common.RequestContext;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.brave.RequestContextCurrentTraceContext;
 
 import brave.Tracing;

File: brave/src/main/java/com/linecorp/armeria/server/brave/ServiceRequestContextAdapter.java
Patch:
@@ -16,10 +16,9 @@
 
 package com.linecorp.armeria.server.brave;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.common.RequestContext;
 import com.linecorp.armeria.common.SerializationFormat;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.internal.common.brave.SpanContextUtil;

File: brave/src/test/java/com/linecorp/armeria/client/brave/BraveClientTest.java
Patch:
@@ -28,8 +28,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import javax.annotation.Nullable;
-
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Test;
 
@@ -44,6 +42,7 @@
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.brave.HelloService;
 import com.linecorp.armeria.common.brave.RequestContextCurrentTraceContext;
 import com.linecorp.armeria.common.brave.SpanCollector;

File: brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java
Patch:
@@ -24,8 +24,6 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.function.Consumer;
 
-import javax.annotation.Nullable;
-
 import org.junit.After;
 import org.junit.AssumptionViolatedException;
 import org.junit.Test;
@@ -36,6 +34,7 @@
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.brave.RequestContextCurrentTraceContext;
 import com.linecorp.armeria.common.util.SystemInfo;
 import com.linecorp.armeria.server.Server;

File: bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/TokenBucket.java
Patch:
@@ -20,10 +20,9 @@
 
 import java.time.Duration;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.MoreObjects;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**

File: bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/TokenBucketSpec.java
Patch:
@@ -26,10 +26,10 @@
 import java.util.Map;
 import java.util.stream.Collectors;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.Splitter;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * A specification of a {@link TokenBucket} configuration represented by a string. The string syntax is
  * a series of comma-separated {@link BandwidthLimit} configurations and each values is semicolon-separated,

File: bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/TokenBucketThrottlingStrategy.java
Patch:
@@ -21,10 +21,9 @@
 import java.util.concurrent.CompletionStage;
 import java.util.concurrent.TimeUnit;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.Request;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.throttling.ThrottlingHeaders;
 import com.linecorp.armeria.server.ServiceRequestContext;

File: bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/TokenBucketThrottlingStrategyBuilder.java
Patch:
@@ -21,9 +21,8 @@
 
 import java.time.Duration;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.common.Request;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.throttling.ThrottlingHeaders;
 

File: consul/src/main/java/com/linecorp/armeria/client/consul/ConsulEndpointGroup.java
Patch:
@@ -23,8 +23,6 @@
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -34,6 +32,7 @@
 import com.linecorp.armeria.client.endpoint.DynamicEndpointGroup;
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.client.endpoint.EndpointSelectionStrategy;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.internal.consul.ConsulClient;
 

File: consul/src/main/java/com/linecorp/armeria/client/consul/ConsulEndpointGroupBuilder.java
Patch:
@@ -21,9 +21,8 @@
 import java.net.URI;
 import java.time.Duration;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.client.endpoint.EndpointSelectionStrategy;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.consul.ConsulConfigSetters;
 import com.linecorp.armeria.internal.consul.ConsulClient;

File: consul/src/main/java/com/linecorp/armeria/internal/consul/AgentServiceClient.java
Patch:
@@ -19,8 +19,6 @@
 
 import java.util.List;
 
-import javax.annotation.Nullable;
-
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
@@ -32,6 +30,7 @@
 import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpResponse;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.PercentEncoder;
 
 /**

File: consul/src/main/java/com/linecorp/armeria/internal/consul/CatalogClient.java
Patch:
@@ -24,8 +24,6 @@
 import java.util.Objects;
 import java.util.concurrent.CompletableFuture;
 
-import javax.annotation.Nullable;
-
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -38,6 +36,7 @@
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.QueryParams;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.internal.common.PercentEncoder;
 

File: consul/src/main/java/com/linecorp/armeria/internal/consul/Check.java
Patch:
@@ -17,14 +17,14 @@
 
 import java.util.Map;
 
-import javax.annotation.Nullable;
-
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.google.common.base.MoreObjects;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 @JsonIgnoreProperties(ignoreUnknown = true)
 @JsonInclude(Include.NON_NULL)
 public final class Check {

File: consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClient.java
Patch:
@@ -20,8 +20,6 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.function.Function;
 
-import javax.annotation.Nullable;
-
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 import com.linecorp.armeria.client.Endpoint;
@@ -33,6 +31,7 @@
 import com.linecorp.armeria.client.retry.RetryingClient;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpResponse;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A client for accessing a Consul agent API server.

File: consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClientBuilder.java
Patch:
@@ -22,8 +22,7 @@
 import java.net.URISyntaxException;
 import java.util.regex.Pattern;
 
-import javax.annotation.Nullable;
-
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.consul.ConsulConfigSetters;
 
 public final class ConsulClientBuilder implements ConsulConfigSetters {

File: consul/src/main/java/com/linecorp/armeria/internal/consul/ConsulClientUtil.java
Patch:
@@ -15,10 +15,9 @@
  */
 package com.linecorp.armeria.internal.consul;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.common.QueryParams;
 import com.linecorp.armeria.common.QueryParamsBuilder;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * Utility methods related to Consul clients.

File: consul/src/main/java/com/linecorp/armeria/internal/consul/HealthClient.java
Patch:
@@ -25,8 +25,6 @@
 import java.util.Objects;
 import java.util.concurrent.CompletableFuture;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -42,6 +40,7 @@
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.QueryParams;
 import com.linecorp.armeria.common.QueryParamsBuilder;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.PercentEncoder;
 
 /**

File: consul/src/main/java/com/linecorp/armeria/server/consul/ConsulUpdatingListener.java
Patch:
@@ -22,14 +22,13 @@
 import java.util.List;
 import java.util.concurrent.ThreadLocalRandom;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpStatus;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.util.SystemInfo;
 import com.linecorp.armeria.internal.consul.Check;

File: consul/src/main/java/com/linecorp/armeria/server/consul/ConsulUpdatingListenerBuilder.java
Patch:
@@ -21,12 +21,11 @@
 import java.net.URI;
 import java.time.Duration;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableSet;
 
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.common.HttpMethod;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.consul.ConsulConfigSetters;
 import com.linecorp.armeria.internal.consul.ConsulClient;

File: consul/src/test/java/com/linecorp/armeria/internal/consul/ConsulTestBase.java
Patch:
@@ -29,8 +29,6 @@
 import java.util.UUID;
 import java.util.concurrent.ThreadLocalRandom;
 
-import javax.annotation.Nullable;
-
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.slf4j.Logger;
@@ -47,6 +45,7 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.ResponseHeaders;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.CompletionActions;
 import com.linecorp.armeria.internal.testing.FlakyTest;
 import com.linecorp.armeria.server.AbstractHttpService;

File: core/src/main/java/com/linecorp/armeria/client/AbstractClientOptionsBuilder.java
Patch:
@@ -25,13 +25,12 @@
 import java.util.function.Function;
 import java.util.function.Supplier;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpHeadersBuilder;
 import com.linecorp.armeria.common.RequestId;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.auth.BasicToken;
 import com.linecorp.armeria.common.auth.OAuth1aToken;
 import com.linecorp.armeria.common.auth.OAuth2Token;

File: core/src/main/java/com/linecorp/armeria/client/AbstractRuleBuilder.java
Patch:
@@ -23,8 +23,6 @@
 import java.util.function.BiPredicate;
 import java.util.function.Predicate;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Sets;
@@ -38,6 +36,7 @@
 import com.linecorp.armeria.common.HttpStatusClass;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.ResponseHeaders;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**

File: core/src/main/java/com/linecorp/armeria/client/AbstractRuleWithContentBuilder.java
Patch:
@@ -22,14 +22,13 @@
 import java.util.function.BiFunction;
 import java.util.function.BiPredicate;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.client.circuitbreaker.CircuitBreakerRuleWithContent;
 import com.linecorp.armeria.client.retry.RetryRuleWithContent;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpResponseDuplicator;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.Response;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**

File: core/src/main/java/com/linecorp/armeria/client/AbstractWebClientBuilder.java
Patch:
@@ -22,15 +22,14 @@
 import java.util.Set;
 import java.util.function.Function;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Sets;
 
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.common.Scheme;
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A skeletal builder implementation for {@link WebClient}.

File: core/src/main/java/com/linecorp/armeria/client/ClientBuilder.java
Patch:
@@ -24,11 +24,10 @@
 import java.util.function.Function;
 import java.util.function.Supplier;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.common.RequestId;
 import com.linecorp.armeria.common.Scheme;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.auth.BasicToken;
 import com.linecorp.armeria.common.auth.OAuth1aToken;
 import com.linecorp.armeria.common.auth.OAuth2Token;

File: core/src/main/java/com/linecorp/armeria/client/ClientBuilderParams.java
Patch:
@@ -20,10 +20,9 @@
 
 import java.net.URI;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.common.Scheme;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * Provides the construction parameters of a client.

File: core/src/main/java/com/linecorp/armeria/client/ClientFactory.java
Patch:
@@ -29,8 +29,6 @@
 import java.util.concurrent.ExecutionException;
 import java.util.function.Supplier;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -40,6 +38,7 @@
 import com.linecorp.armeria.common.Scheme;
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.common.util.ListenableAsyncCloseable;
 import com.linecorp.armeria.common.util.ReleasableHolder;

File: core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java
Patch:
@@ -38,7 +38,6 @@
 import java.util.function.Function;
 import java.util.function.ToIntFunction;
 
-import javax.annotation.Nullable;
 import javax.net.ssl.KeyManagerFactory;
 import javax.net.ssl.TrustManagerFactory;
 
@@ -55,6 +54,7 @@
 import com.linecorp.armeria.common.Flags;
 import com.linecorp.armeria.common.Http1HeaderNaming;
 import com.linecorp.armeria.common.Request;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.EventLoopGroups;
 import com.linecorp.armeria.internal.common.RequestContextUtil;
 import com.linecorp.armeria.internal.common.util.ChannelUtil;

File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java
Patch:
@@ -28,8 +28,6 @@
 import java.util.function.Function;
 import java.util.function.Supplier;
 
-import javax.annotation.Nullable;
-
 import com.google.errorprone.annotations.MustBeClosed;
 
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
@@ -42,6 +40,7 @@
 import com.linecorp.armeria.common.RequestId;
 import com.linecorp.armeria.common.Response;
 import com.linecorp.armeria.common.RpcRequest;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.common.util.TimeoutMode;

File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContextBuilder.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
-import javax.annotation.Nullable;
 import javax.net.ssl.SSLSession;
 
 import com.linecorp.armeria.common.AbstractRequestContextBuilder;
@@ -31,6 +30,7 @@
 import com.linecorp.armeria.common.RequestId;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.logging.ClientConnectionTimings;
 import com.linecorp.armeria.common.util.SystemInfo;
 import com.linecorp.armeria.internal.common.CancellationScheduler;

File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContextCaptor.java
Patch:
@@ -19,8 +19,7 @@
 import java.util.NoSuchElementException;
 import java.util.function.Supplier;
 
-import javax.annotation.Nullable;
-
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.SafeCloseable;
 
 /**

File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContextWrapper.java
Patch:
@@ -20,15 +20,14 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.function.Consumer;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpHeadersBuilder;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.RequestContextWrapper;
 import com.linecorp.armeria.common.RequestId;
 import com.linecorp.armeria.common.RpcRequest;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.TimeoutMode;
 
 /**

File: core/src/main/java/com/linecorp/armeria/client/ClientThreadLocalState.java
Patch:
@@ -20,10 +20,9 @@
 import java.util.NoSuchElementException;
 import java.util.function.Consumer;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.SafeCloseable;
 
 import io.netty.util.concurrent.FastThreadLocal;

File: core/src/main/java/com/linecorp/armeria/client/Clients.java
Patch:
@@ -21,8 +21,6 @@
 import java.util.function.Consumer;
 import java.util.function.Function;
 
-import javax.annotation.Nullable;
-
 import com.google.errorprone.annotations.MustBeClosed;
 
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
@@ -31,6 +29,7 @@
 import com.linecorp.armeria.common.Scheme;
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.common.util.Unwrappable;
 

File: core/src/main/java/com/linecorp/armeria/client/DecodedHttpResponse.java
Patch:
@@ -16,10 +16,9 @@
 
 package com.linecorp.armeria.client;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpObject;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.DefaultHttpResponse;
 import com.linecorp.armeria.internal.common.InboundTrafficController;
 

File: core/src/main/java/com/linecorp/armeria/client/DecoratingClientFactory.java
Patch:
@@ -21,12 +21,11 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.function.Supplier;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.common.Scheme;
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.AbstractUnwrappable;
 import com.linecorp.armeria.common.util.ReleasableHolder;
 

File: core/src/main/java/com/linecorp/armeria/client/DefaultClientBuilderParams.java
Patch:
@@ -20,14 +20,13 @@
 
 import java.net.URI;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.MoreObjects;
 import com.google.common.base.Strings;
 
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.common.Scheme;
 import com.linecorp.armeria.common.SerializationFormat;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;
 
 /**

File: core/src/main/java/com/linecorp/armeria/client/DefaultClientFactory.java
Patch:
@@ -27,8 +27,6 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.function.Supplier;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -40,6 +38,7 @@
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.common.Scheme;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.AsyncCloseableSupport;
 import com.linecorp.armeria.common.util.ReleasableHolder;
 

File: core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java
Patch:
@@ -29,7 +29,6 @@
 import java.util.function.Consumer;
 import java.util.function.Function;
 
-import javax.annotation.Nullable;
 import javax.net.ssl.SSLSession;
 
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
@@ -49,6 +48,7 @@
 import com.linecorp.armeria.common.Response;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogAccess;

File: core/src/main/java/com/linecorp/armeria/client/DefaultDnsQueryLifecycleObserver.java
Patch:
@@ -19,11 +19,10 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.Ascii;
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.metric.MeterIdPrefix;
 import com.linecorp.armeria.internal.common.util.StringUtil;
 

File: core/src/main/java/com/linecorp/armeria/client/DefaultEventLoopScheduler.java
Patch:
@@ -29,8 +29,6 @@
 import java.util.concurrent.atomic.AtomicLongFieldUpdater;
 import java.util.function.ToIntFunction;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -40,6 +38,7 @@
 
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.ReleasableHolder;
 
 import io.netty.channel.EventLoop;

File: core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java
Patch:
@@ -24,13 +24,12 @@
 import java.util.List;
 import java.util.function.Consumer;
 
-import javax.annotation.Nullable;
-
 import com.github.benmanes.caffeine.cache.CaffeineSpec;
 import com.google.common.collect.ImmutableList;
 
 import com.linecorp.armeria.client.retry.Backoff;
 import com.linecorp.armeria.common.Flags;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.metric.MeterIdPrefix;
 import com.linecorp.armeria.common.util.TransportType;
 

File: core/src/main/java/com/linecorp/armeria/client/DnsTimeoutException.java
Patch:
@@ -16,10 +16,9 @@
 
 package com.linecorp.armeria.client;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.common.Flags;
 import com.linecorp.armeria.common.TimeoutException;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A {@link TimeoutException} raised when a response has not been received from a DNS server within timeout.

File: core/src/main/java/com/linecorp/armeria/client/Endpoint.java
Patch:
@@ -30,8 +30,6 @@
 import java.util.function.Predicate;
 import java.util.regex.Pattern;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 import com.google.common.net.HostAndPort;
 import com.google.common.net.InternetDomainName;
@@ -41,6 +39,7 @@
 import com.linecorp.armeria.common.Scheme;
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;
 

File: core/src/main/java/com/linecorp/armeria/client/EventLoopScheduler.java
Patch:
@@ -16,10 +16,9 @@
 
 package com.linecorp.armeria.client;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.ReleasableHolder;
 
 import io.netty.channel.EventLoop;

File: core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java
Patch:
@@ -16,8 +16,6 @@
 
 package com.linecorp.armeria.client;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -27,6 +25,7 @@
 import com.linecorp.armeria.common.ContentTooLargeException;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.ProtocolViolationException;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.stream.ClosedStreamException;
 import com.linecorp.armeria.internal.common.ArmeriaHttpUtil;
 import com.linecorp.armeria.internal.common.InboundTrafficController;

File: core/src/main/java/com/linecorp/armeria/client/Http2ResponseDecoder.java
Patch:
@@ -20,8 +20,6 @@
 import static io.netty.handler.codec.http2.Http2Error.PROTOCOL_ERROR;
 import static io.netty.handler.codec.http2.Http2Exception.connectionError;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -30,6 +28,7 @@
 import com.linecorp.armeria.common.ContentTooLargeException;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaders;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.stream.ClosedStreamException;
 import com.linecorp.armeria.internal.common.ArmeriaHttpUtil;
 import com.linecorp.armeria.internal.common.Http2GoAwayHandler;

File: core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java
Patch:
@@ -35,8 +35,6 @@
 import java.util.function.Consumer;
 import java.util.function.Function;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -51,6 +49,7 @@
 import com.linecorp.armeria.client.proxy.Socks5ProxyConfig;
 import com.linecorp.armeria.common.ClosedSessionException;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.logging.ClientConnectionTimingsBuilder;
 import com.linecorp.armeria.common.util.AsyncCloseable;
 import com.linecorp.armeria.common.util.AsyncCloseableSupport;

File: core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java
Patch:
@@ -19,8 +19,6 @@
 
 import java.net.InetSocketAddress;
 
-import javax.annotation.Nullable;
-
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Strings;
 
@@ -33,6 +31,7 @@
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.logging.ClientConnectionTimings;
 import com.linecorp.armeria.common.logging.ClientConnectionTimingsBuilder;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;

File: core/src/main/java/com/linecorp/armeria/client/HttpClientFactory.java
Patch:
@@ -30,8 +30,6 @@
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -46,6 +44,7 @@
 import com.linecorp.armeria.common.Scheme;
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.AsyncCloseableSupport;
 import com.linecorp.armeria.common.util.ReleasableHolder;
 import com.linecorp.armeria.common.util.TransportType;

File: core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java
Patch:
@@ -31,7 +31,6 @@
 import java.net.SocketAddress;
 import java.util.List;
 
-import javax.annotation.Nullable;
 import javax.net.ssl.SSLEngine;
 import javax.net.ssl.SSLException;
 import javax.net.ssl.SSLParameters;
@@ -43,6 +42,7 @@
 
 import com.linecorp.armeria.common.HttpObject;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.internal.client.HttpHeaderUtil;
 import com.linecorp.armeria.internal.common.ArmeriaHttpUtil;

File: core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java
Patch:
@@ -22,8 +22,6 @@
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 import org.slf4j.Logger;
@@ -38,6 +36,7 @@
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
 import com.linecorp.armeria.common.stream.ClosedStreamException;
 import com.linecorp.armeria.common.util.Exceptions;

File: core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java
Patch:
@@ -22,8 +22,6 @@
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -33,6 +31,7 @@
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.ResponseHeaders;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.common.stream.CancelledSubscriptionException;
 import com.linecorp.armeria.common.stream.StreamWriter;

File: core/src/main/java/com/linecorp/armeria/client/HttpSession.java
Patch:
@@ -16,11 +16,10 @@
 
 package com.linecorp.armeria.client;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.common.ClosedSessionException;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.InboundTrafficController;
 
 import io.netty.channel.Channel;

File: core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java
Patch:
@@ -27,8 +27,6 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ScheduledFuture;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -39,6 +37,7 @@
 import com.linecorp.armeria.common.ClosedSessionException;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.metric.MoreMeters;
 import com.linecorp.armeria.common.stream.CancelledSubscriptionException;
 import com.linecorp.armeria.common.stream.SubscriptionOption;

File: core/src/main/java/com/linecorp/armeria/client/InvalidResponseException.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.linecorp.armeria.client;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A {@link RuntimeException} raised when a client received an invalid response.

File: core/src/main/java/com/linecorp/armeria/client/InvalidResponseHeadersException.java
Patch:
@@ -17,9 +17,8 @@
 
 import static java.util.Objects.requireNonNull;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.common.ResponseHeaders;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * An {@link InvalidResponseException} raised when a client received a response with invalid headers.

File: core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java
Patch:
@@ -28,8 +28,6 @@
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -38,6 +36,7 @@
 import com.google.common.base.MoreObjects;
 
 import com.linecorp.armeria.client.retry.Backoff;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.client.DefaultDnsNameResolver;
 import com.linecorp.armeria.internal.client.DnsQuestionWithoutTrailingDot;
 

File: core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java
Patch:
@@ -23,8 +23,6 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.function.Consumer;
 
-import javax.annotation.Nullable;
-
 import com.github.benmanes.caffeine.cache.Cache;
 import com.github.benmanes.caffeine.cache.Caffeine;
 import com.github.benmanes.caffeine.cache.RemovalListener;
@@ -34,6 +32,7 @@
 
 import com.linecorp.armeria.client.RefreshingAddressResolver.CacheEntry;
 import com.linecorp.armeria.client.retry.Backoff;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.client.DefaultDnsNameResolver;
 
 import io.netty.channel.EventLoop;

File: core/src/main/java/com/linecorp/armeria/client/RequestOptionsBuilder.java
Patch:
@@ -24,10 +24,10 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableMap;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 import io.netty.util.AttributeKey;
 
 /**

File: core/src/main/java/com/linecorp/armeria/client/RequestOptionsSetters.java
Patch:
@@ -18,10 +18,9 @@
 
 import java.time.Duration;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.Response;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 import io.netty.util.AttributeKey;
 

File: core/src/main/java/com/linecorp/armeria/client/SessionProtocolNegotiationException.java
Patch:
@@ -18,10 +18,9 @@
 
 import static java.util.Objects.requireNonNull;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.common.Flags;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * An exception triggered when failed to negotiate the desired {@link SessionProtocol} with a server.

File: core/src/main/java/com/linecorp/armeria/client/UserClient.java
Patch:
@@ -23,8 +23,6 @@
 import java.util.function.BiFunction;
 import java.util.function.Function;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -39,6 +37,7 @@
 import com.linecorp.armeria.common.RpcResponse;
 import com.linecorp.armeria.common.Scheme;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.AbstractUnwrappable;
 import com.linecorp.armeria.common.util.SystemInfo;
 

File: core/src/main/java/com/linecorp/armeria/client/WebClientBuilder.java
Patch:
@@ -22,11 +22,10 @@
 import java.util.function.Function;
 import java.util.function.Supplier;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.common.RequestId;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.auth.BasicToken;
 import com.linecorp.armeria.common.auth.OAuth1aToken;
 import com.linecorp.armeria.common.auth.OAuth2Token;

File: core/src/main/java/com/linecorp/armeria/client/WebClientRequestPreparation.java
Patch:
@@ -21,8 +21,6 @@
 import java.time.Duration;
 import java.util.Map;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Publisher;
 
 import com.google.errorprone.annotations.FormatMethod;
@@ -35,6 +33,7 @@
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.MediaType;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 import io.netty.util.AttributeKey;
 

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/AbstractCircuitBreakerClient.java
Patch:
@@ -22,8 +22,6 @@
 
 import java.util.concurrent.CompletionStage;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -32,6 +30,7 @@
 import com.linecorp.armeria.client.SimpleDecoratingClient;
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.Response;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.CompletionActions;
 
 /**

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/AbstractCircuitBreakerClientBuilder.java
Patch:
@@ -19,12 +19,11 @@
 import static com.google.common.base.Preconditions.checkState;
 import static java.util.Objects.requireNonNull;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.MoreObjects;
 
 import com.linecorp.armeria.client.Client;
 import com.linecorp.armeria.common.Response;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A skeletal builder implementation that builds a new {@link AbstractCircuitBreakerClient} or

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerBuilder.java
Patch:
@@ -23,10 +23,9 @@
 import java.util.Collections;
 import java.util.List;
 
-import javax.annotation.Nullable;
-
 import com.google.common.annotations.VisibleForTesting;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.Ticker;
 
 /**

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerConfig.java
Patch:
@@ -19,10 +19,10 @@
 import java.time.Duration;
 import java.util.List;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.MoreObjects;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * Stores configurations of circuit breaker.
  */

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerFactory.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.client.circuitbreaker;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A functional interface that represents a mapper factory, mapping a combination of host, method and path

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRule.java
Patch:
@@ -22,8 +22,6 @@
 import java.util.concurrent.CompletionStage;
 import java.util.function.BiPredicate;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
@@ -37,6 +35,7 @@
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.Response;
 import com.linecorp.armeria.common.ResponseHeaders;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * Determines whether a {@link Response} should be reported as a success or failure to a

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleBuilder.java
Patch:
@@ -26,8 +26,6 @@
 import java.util.function.BiFunction;
 import java.util.function.BiPredicate;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.client.AbstractRuleBuilder;
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.UnprocessedRequestException;
@@ -37,6 +35,7 @@
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.Response;
 import com.linecorp.armeria.common.ResponseHeaders;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.client.AbstractRuleBuilderUtil;
 
 /**

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleUtil.java
Patch:
@@ -19,12 +19,11 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpResponseDuplicator;
 import com.linecorp.armeria.common.Response;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 final class CircuitBreakerRuleUtil {
 

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleWithContent.java
Patch:
@@ -23,8 +23,6 @@
 import java.util.function.BiFunction;
 import java.util.function.BiPredicate;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
@@ -35,6 +33,7 @@
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.Response;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * Determines whether a {@link Response} should be reported as a success or failure to a

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/EventCount.java
Patch:
@@ -18,7 +18,7 @@
 
 import static com.google.common.base.Preconditions.checkArgument;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * An immutable object that stores the count of events.

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/EventCounter.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.client.circuitbreaker;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 interface EventCounter {
 

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/NonBlockingCircuitBreaker.java
Patch:
@@ -22,14 +22,13 @@
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicReference;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.MoreObjects;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.Ticker;
 
 /**

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/SlidingWindowCounter.java
Patch:
@@ -25,8 +25,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.concurrent.atomic.LongAdder;
 
-import javax.annotation.Nullable;
-
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.Ticker;
 
 /**

File: core/src/main/java/com/linecorp/armeria/client/encoding/DecodingClient.java
Patch:
@@ -23,8 +23,6 @@
 import java.util.Map;
 import java.util.function.Function;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.Splitter;
 import com.google.common.base.Strings;
 import com.google.common.collect.ImmutableList;
@@ -39,6 +37,7 @@
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.RequestHeadersBuilder;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A {@link DecoratingClient} that requests and decodes HTTP encoding (e.g., gzip) that has been applied to the

File: core/src/main/java/com/linecorp/armeria/client/encoding/HttpDecodedResponse.java
Patch:
@@ -19,8 +19,6 @@
 import java.io.UnsupportedEncodingException;
 import java.util.Map;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Subscriber;
 
 import com.google.common.base.Ascii;
@@ -31,6 +29,7 @@
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpObject;
 import com.linecorp.armeria.common.HttpResponse;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.internal.common.ArmeriaHttpUtil;
 

File: core/src/main/java/com/linecorp/armeria/client/endpoint/AbstractEndpointSelector.java
Patch:
@@ -25,10 +25,9 @@
 import java.util.concurrent.TimeUnit;
 import java.util.function.Consumer;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.Endpoint;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.UnmodifiableFuture;
 
 /**

File: core/src/main/java/com/linecorp/armeria/client/endpoint/EndpointGroupException.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.client.endpoint;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A {@link RuntimeException} raised when the resolution of an {@link EndpointGroup} fails.

File: core/src/main/java/com/linecorp/armeria/client/endpoint/EndpointGroupUtil.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 final class EndpointGroupUtil {
 

File: core/src/main/java/com/linecorp/armeria/client/endpoint/EndpointSelector.java
Patch:
@@ -19,11 +19,10 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ScheduledExecutorService;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.common.Request;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * Selects an {@link Endpoint} from an {@link EndpointGroup}.

File: core/src/main/java/com/linecorp/armeria/client/endpoint/LazyList.java
Patch:
@@ -19,11 +19,11 @@
 import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
 import java.util.function.Supplier;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ForwardingList;
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 final class LazyList<E> extends ForwardingList<E> {
 
     @SuppressWarnings("rawtypes")

File: core/src/main/java/com/linecorp/armeria/client/endpoint/PropertiesEndpointGroup.java
Patch:
@@ -27,13 +27,12 @@
 import java.util.Properties;
 import java.util.concurrent.CompletableFuture;
 
-import javax.annotation.Nullable;
-
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableList;
 
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.client.endpoint.FileWatcherRegistry.FileWatchRegisterKey;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A {@link Properties} backed {@link EndpointGroup}. The list of {@link Endpoint}s are loaded from the

File: core/src/main/java/com/linecorp/armeria/client/endpoint/PropertiesEndpointGroupBuilder.java
Patch:
@@ -27,11 +27,10 @@
 import java.util.Map.Entry;
 import java.util.Properties;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 
 import com.linecorp.armeria.client.Endpoint;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * Builds a {@link PropertiesEndpointGroup}.

File: core/src/main/java/com/linecorp/armeria/client/endpoint/RestartableThread.java
Patch:
@@ -20,7 +20,7 @@
 
 import java.util.function.Supplier;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A restartable thread utility class.

File: core/src/main/java/com/linecorp/armeria/client/endpoint/StaticEndpointGroup.java
Patch:
@@ -21,12 +21,11 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ScheduledExecutorService;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.Endpoint;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.UnmodifiableFuture;
 
 /**

File: core/src/main/java/com/linecorp/armeria/client/endpoint/WeightRampingUpStrategy.java
Patch:
@@ -35,8 +35,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.function.Supplier;
 
-import javax.annotation.Nullable;
-
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.ImmutableList;
@@ -47,6 +45,7 @@
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.client.endpoint.WeightRampingUpStrategy.EndpointsRampingUpEntry.EndpointAndStep;
 import com.linecorp.armeria.common.CommonPools;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.ListenableAsyncCloseable;
 import com.linecorp.armeria.common.util.Ticker;
 

File: core/src/main/java/com/linecorp/armeria/client/endpoint/WeightRampingUpStrategyBuilder.java
Patch:
@@ -22,10 +22,9 @@
 import java.time.Duration;
 import java.util.function.Supplier;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.common.CommonPools;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 
 import io.netty.channel.EventLoop;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/WeightedRandomDistributionEndpointSelector.java
Patch:
@@ -20,12 +20,11 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLongFieldUpdater;
 
-import javax.annotation.Nullable;
-
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableList;
 
 import com.linecorp.armeria.client.Endpoint;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * This selector selects an {@link Endpoint} using random and the weight of the {@link Endpoint}. If there are

File: core/src/main/java/com/linecorp/armeria/client/endpoint/WeightedRoundRobinStrategy.java
Patch:
@@ -22,13 +22,12 @@
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Streams;
 
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.Endpoint;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 final class WeightedRoundRobinStrategy implements EndpointSelectionStrategy {
 

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsAddressEndpointGroup.java
Patch:
@@ -22,8 +22,6 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSortedSet;
 
@@ -32,6 +30,7 @@
 import com.linecorp.armeria.client.endpoint.EndpointSelectionStrategy;
 import com.linecorp.armeria.client.retry.Backoff;
 import com.linecorp.armeria.common.CommonPools;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.client.DnsQuestionWithoutTrailingDot;
 
 import io.netty.channel.EventLoop;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsAddressEndpointGroupBuilder.java
Patch:
@@ -20,13 +20,12 @@
 import java.net.InetSocketAddress;
 import java.time.Duration;
 
-import javax.annotation.Nullable;
-
 import com.google.common.annotations.VisibleForTesting;
 
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.client.endpoint.EndpointSelectionStrategy;
 import com.linecorp.armeria.client.retry.Backoff;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 import io.netty.channel.EventLoop;
 import io.netty.resolver.ResolvedAddressTypes;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsEndpointGroup.java
Patch:
@@ -23,8 +23,6 @@
 import java.util.function.Consumer;
 import java.util.stream.Collectors;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -36,6 +34,7 @@
 import com.linecorp.armeria.client.endpoint.DynamicEndpointGroup;
 import com.linecorp.armeria.client.endpoint.EndpointSelectionStrategy;
 import com.linecorp.armeria.client.retry.Backoff;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.TransportType;
 import com.linecorp.armeria.internal.client.DefaultDnsNameResolver;
 import com.linecorp.armeria.internal.client.DnsUtil;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsEndpointGroupBuilder.java
Patch:
@@ -22,15 +22,14 @@
 import java.net.InetSocketAddress;
 import java.time.Duration;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.Ascii;
 import com.google.common.collect.ImmutableList;
 
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.client.endpoint.EndpointSelectionStrategy;
 import com.linecorp.armeria.client.retry.Backoff;
 import com.linecorp.armeria.common.CommonPools;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.TransportType;
 
 import io.netty.channel.EventLoop;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsTextEndpointGroupBuilder.java
Patch:
@@ -24,6 +24,7 @@
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.client.endpoint.EndpointSelectionStrategy;
 import com.linecorp.armeria.client.retry.Backoff;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 import io.netty.channel.EventLoop;
 
@@ -33,9 +34,9 @@
  */
 public final class DnsTextEndpointGroupBuilder extends DnsEndpointGroupBuilder {
 
-    private final Function<byte[], Endpoint> mapping;
+    private final Function<byte[], @Nullable Endpoint> mapping;
 
-    DnsTextEndpointGroupBuilder(String hostname, Function<byte[], Endpoint> mapping) {
+    DnsTextEndpointGroupBuilder(String hostname, Function<byte[], @Nullable Endpoint> mapping) {
         super(hostname);
         this.mapping = requireNonNull(mapping, "mapping");
     }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/AbstractHealthCheckedEndpointGroupBuilder.java
Patch:
@@ -23,8 +23,6 @@
 import java.time.Duration;
 import java.util.function.Function;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.client.Client;
 import com.linecorp.armeria.client.ClientFactory;
 import com.linecorp.armeria.client.ClientOptions;
@@ -33,6 +31,7 @@
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.client.retry.Backoff;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.AsyncCloseable;
 
 /**

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroup.java
Patch:
@@ -35,8 +35,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.function.Function;
 
-import javax.annotation.Nullable;
-
 import org.jctools.maps.NonBlockingHashSet;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -51,6 +49,7 @@
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.client.retry.Backoff;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.metric.MeterIdPrefix;
 import com.linecorp.armeria.common.util.AsyncCloseable;
 import com.linecorp.armeria.common.util.EventLoopCheckingFuture;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HttpHealthChecker.java
Patch:
@@ -20,8 +20,6 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 import org.slf4j.Logger;
@@ -45,6 +43,7 @@
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.RequestHeadersBuilder;
 import com.linecorp.armeria.common.ResponseHeaders;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.stream.SubscriptionOption;
 import com.linecorp.armeria.common.util.AsyncCloseable;
 import com.linecorp.armeria.common.util.AsyncCloseableSupport;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/PartialHealthCheckStrategyBuilder.java
Patch:
@@ -17,9 +17,8 @@
 
 import static com.google.common.base.Preconditions.checkArgument;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.client.endpoint.healthcheck.PartialHealthCheckStrategy.EndpointLimitingFunction;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A builder for creating a new {@link PartialHealthCheckStrategy}.

File: core/src/main/java/com/linecorp/armeria/client/metric/AbstractMetricCollectingClient.java
Patch:
@@ -19,14 +19,13 @@
 
 import java.util.function.BiPredicate;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.client.Client;
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.SimpleDecoratingClient;
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.RequestContext;
 import com.linecorp.armeria.common.Response;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.metric.MeterIdPrefixFunction;
 import com.linecorp.armeria.internal.common.metric.RequestMetricSupport;

File: core/src/main/java/com/linecorp/armeria/client/metric/MetricCollectingClient.java
Patch:
@@ -20,12 +20,11 @@
 import java.util.function.BiPredicate;
 import java.util.function.Function;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.client.HttpClient;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.RequestContext;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.metric.MeterIdPrefixFunction;
 

File: core/src/main/java/com/linecorp/armeria/client/metric/MetricCollectingRpcClient.java
Patch:
@@ -20,12 +20,11 @@
 import java.util.function.BiPredicate;
 import java.util.function.Function;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.client.RpcClient;
 import com.linecorp.armeria.common.RequestContext;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.metric.MeterIdPrefixFunction;
 

File: core/src/main/java/com/linecorp/armeria/client/proxy/ConnectProxyConfig.java
Patch:
@@ -19,10 +19,10 @@
 import java.net.InetSocketAddress;
 import java.util.Objects;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.MoreObjects;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * CONNECT proxy configuration.
  */

File: core/src/main/java/com/linecorp/armeria/client/proxy/HAProxyConfig.java
Patch:
@@ -21,10 +21,9 @@
 import java.net.InetSocketAddress;
 import java.util.Objects;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.MoreObjects;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 /**

File: core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfig.java
Patch:
@@ -22,9 +22,8 @@
 
 import java.net.InetSocketAddress;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.client.ClientFactory;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 /**

File: core/src/main/java/com/linecorp/armeria/client/proxy/Socks4ProxyConfig.java
Patch:
@@ -19,10 +19,10 @@
 import java.net.InetSocketAddress;
 import java.util.Objects;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.MoreObjects;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * SOCKS4 proxy configuration.
  */

File: core/src/main/java/com/linecorp/armeria/client/proxy/Socks5ProxyConfig.java
Patch:
@@ -19,10 +19,10 @@
 import java.net.InetSocketAddress;
 import java.util.Objects;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.MoreObjects;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * SOCKS5 proxy configuration.
  */

File: core/src/main/java/com/linecorp/armeria/client/proxy/WrappingProxyConfigSelector.java
Patch:
@@ -27,13 +27,12 @@
 import java.net.URISyntaxException;
 import java.util.List;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * See {@link ProxyConfigSelector#of(ProxySelector)} for more information.

File: core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java
Patch:
@@ -21,8 +21,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.function.Consumer;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -38,6 +36,7 @@
 import com.linecorp.armeria.common.RequestId;
 import com.linecorp.armeria.common.Response;
 import com.linecorp.armeria.common.RpcRequest;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogAccess;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;

File: core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClientBuilder.java
Patch:
@@ -22,14 +22,13 @@
 
 import java.time.Duration;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.MoreObjects;
 import com.google.common.base.MoreObjects.ToStringHelper;
 
 import com.linecorp.armeria.client.Client;
 import com.linecorp.armeria.common.Flags;
 import com.linecorp.armeria.common.Response;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * Builds a new {@link AbstractRetryingClient} or its decorator function.

File: core/src/main/java/com/linecorp/armeria/client/retry/BackoffSpec.java
Patch:
@@ -21,15 +21,15 @@
 
 import java.util.List;
 
-import javax.annotation.Nullable;
-
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Ascii;
 import com.google.common.base.MoreObjects;
 import com.google.common.base.MoreObjects.ToStringHelper;
 import com.google.common.base.Splitter;
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * A specification of a {@link Backoff} configuration represented by a string. The string syntax is
  * a series of comma-separated options(key-values pair) and each values is colon-separated.

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryConfig.java
Patch:
@@ -19,14 +19,13 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static java.util.Objects.requireNonNull;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.Response;
 import com.linecorp.armeria.common.RpcResponse;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * Holds retry config used by a {@link RetryingClient}.

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryConfigBuilder.java
Patch:
@@ -21,13 +21,12 @@
 
 import java.time.Duration;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.MoreObjects;
 import com.google.common.base.MoreObjects.ToStringHelper;
 
 import com.linecorp.armeria.common.Flags;
 import com.linecorp.armeria.common.Response;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * Builds a {@link RetryConfig}.

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryDecision.java
Patch:
@@ -17,7 +17,7 @@
 package com.linecorp.armeria.client.retry;
 import static java.util.Objects.requireNonNull;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A {@link RetryDecision} that determines whether a {@link RetryRule} retries with a {@link Backoff},

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java
Patch:
@@ -22,8 +22,6 @@
 import java.util.concurrent.CompletionStage;
 import java.util.function.BiPredicate;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
@@ -38,6 +36,7 @@
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.Response;
 import com.linecorp.armeria.common.ResponseHeaders;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * Determines whether a failed request should be retried.

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleBuilder.java
Patch:
@@ -25,8 +25,6 @@
 import java.util.function.BiFunction;
 import java.util.function.BiPredicate;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.client.AbstractRuleBuilder;
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.UnprocessedRequestException;
@@ -35,6 +33,7 @@
 import com.linecorp.armeria.common.HttpStatusClass;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.ResponseHeaders;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.client.AbstractRuleBuilderUtil;
 
 /**

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleUtil.java
Patch:
@@ -19,12 +19,11 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpResponseDuplicator;
 import com.linecorp.armeria.common.Response;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 final class RetryRuleUtil {
 

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleWithContent.java
Patch:
@@ -23,8 +23,6 @@
 import java.util.function.BiFunction;
 import java.util.function.BiPredicate;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
@@ -35,6 +33,7 @@
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.Response;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * Determines whether a failed request should be retried using the content of a {@link Response}.

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java
Patch:
@@ -26,8 +26,6 @@
 import java.util.concurrent.CompletionStage;
 import java.util.function.Function;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -42,6 +40,7 @@
 import com.linecorp.armeria.common.HttpResponseDuplicator;
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.RequestHeadersBuilder;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.logging.RequestLogAccess;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
 import com.linecorp.armeria.common.logging.RequestLogProperty;

File: core/src/main/java/com/linecorp/armeria/common/AbstractContextAwareExecutorService.java
Patch:
@@ -28,11 +28,11 @@
 import java.util.concurrent.TimeoutException;
 import java.util.function.Supplier;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 abstract class AbstractContextAwareExecutorService<ES extends ExecutorService> implements ExecutorService {
     enum LogRequestContextWarningOnce implements Supplier<RequestContext> {
         INSTANCE;

File: core/src/main/java/com/linecorp/armeria/common/AbstractHttpHeadersBuilder.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.linecorp.armeria.common;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 import io.netty.util.AsciiString;
 

File: core/src/main/java/com/linecorp/armeria/common/AbstractHttpHeadersJsonDeserializer.java
Patch:
@@ -22,8 +22,6 @@
 import java.util.Iterator;
 import java.util.Map.Entry;
 
-import javax.annotation.Nullable;
-
 import com.fasterxml.jackson.core.JsonParser;
 import com.fasterxml.jackson.databind.DeserializationContext;
 import com.fasterxml.jackson.databind.JsonDeserializer;
@@ -32,6 +30,8 @@
 import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 import io.netty.util.AsciiString;
 
 /**

File: core/src/main/java/com/linecorp/armeria/common/AbstractHttpRequestBuilder.java
Patch:
@@ -30,8 +30,6 @@
 import java.util.Map;
 import java.util.Map.Entry;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Publisher;
 
 import com.google.errorprone.annotations.FormatMethod;
@@ -40,6 +38,7 @@
 import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;
 import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;
 import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.stream.StreamMessage;
 import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;
 

File: core/src/main/java/com/linecorp/armeria/common/AbstractRequestContextBuilder.java
Patch:
@@ -25,11 +25,11 @@
 import java.net.URI;
 import java.util.concurrent.ThreadLocalRandom;
 
-import javax.annotation.Nullable;
 import javax.net.ssl.SSLSession;
 
 import com.linecorp.armeria.client.Client;
 import com.linecorp.armeria.client.ClientRequestContextBuilder;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.metric.NoopMeterRegistry;
 import com.linecorp.armeria.internal.common.PathAndQuery;
 import com.linecorp.armeria.server.Service;

File: core/src/main/java/com/linecorp/armeria/common/AggregatedHttpObject.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.nio.charset.Charset;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A complete HTTP headers and content that are readily available.

File: core/src/main/java/com/linecorp/armeria/common/AggregatedHttpRequest.java
Patch:
@@ -26,12 +26,12 @@
 import java.util.Locale;
 import java.util.Locale.LanguageRange;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 import com.google.errorprone.annotations.FormatMethod;
 import com.google.errorprone.annotations.FormatString;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * A complete HTTP request whose content is readily available as a single {@link HttpData}.
  */

File: core/src/main/java/com/linecorp/armeria/common/ByteBufHttpData.java
Patch:
@@ -21,8 +21,7 @@
 import java.io.InputStream;
 import java.nio.charset.Charset;
 
-import javax.annotation.Nullable;
-
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;
 
 import io.netty.buffer.ByteBuf;

File: core/src/main/java/com/linecorp/armeria/common/CacheControl.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.linecorp.armeria.common;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * Directives for HTTP caching mechanisms in requests or responses. Use {@link ServerCacheControl} for

File: core/src/main/java/com/linecorp/armeria/common/CacheControlBuilder.java
Patch:
@@ -19,7 +19,7 @@
 
 import java.time.Duration;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A skeletal builder implementation of {@link CacheControl}. Use {@link ServerCacheControlBuilder} for

File: core/src/main/java/com/linecorp/armeria/common/CancellationException.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.common;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A {@link RuntimeException} raised when a requested invocation is forced to stop before its completion.

File: core/src/main/java/com/linecorp/armeria/common/ClientCacheControl.java
Patch:
@@ -22,11 +22,11 @@
 import java.util.Map;
 import java.util.function.BiConsumer;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * Directives for HTTP caching mechanisms in requests.
  *

File: core/src/main/java/com/linecorp/armeria/common/ClientCacheControlBuilder.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.time.Duration;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * Creates a new {@link ClientCacheControl} using the builder pattern.

File: core/src/main/java/com/linecorp/armeria/common/ClientCookieDecoder.java
Patch:
@@ -34,11 +34,11 @@
 
 import java.util.Date;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 import io.netty.handler.codec.DateFormatter;
 import io.netty.handler.codec.http.cookie.CookieHeaderNames;
 

File: core/src/main/java/com/linecorp/armeria/common/ClosedSessionException.java
Patch:
@@ -15,8 +15,7 @@
  */
 package com.linecorp.armeria.common;
 
-import javax.annotation.Nullable;
-
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.stream.ClosedStreamException;
 
 /**

File: core/src/main/java/com/linecorp/armeria/common/CompletableRpcResponse.java
Patch:
@@ -21,10 +21,9 @@
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.MoreObjects;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.EventLoopCheckingFuture;
 
 /**

File: core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java
Patch:
@@ -44,12 +44,11 @@
 import java.util.Map;
 import java.util.Objects;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.Ascii;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;
 
 /**

File: core/src/main/java/com/linecorp/armeria/common/ContentDispositionBuilder.java
Patch:
@@ -37,7 +37,7 @@
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A builder class for creating {@link ContentDisposition}.

File: core/src/main/java/com/linecorp/armeria/common/ContentTooLargeException.java
Patch:
@@ -16,8 +16,7 @@
 
 package com.linecorp.armeria.common;
 
-import javax.annotation.Nullable;
-
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;
 
 /**

File: core/src/main/java/com/linecorp/armeria/common/Cookie.java
Patch:
@@ -38,11 +38,11 @@
 import java.util.List;
 import java.util.function.Consumer;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * An interface defining an
  * <a href="http://en.wikipedia.org/wiki/HTTP_cookie">HTTP cookie</a>.

File: core/src/main/java/com/linecorp/armeria/common/CookieBuilder.java
Patch:
@@ -20,7 +20,7 @@
 
 import java.util.BitSet;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * Builds a {@link Cookie}.

File: core/src/main/java/com/linecorp/armeria/common/CookieUtil.java
Patch:
@@ -37,13 +37,13 @@
 import java.util.Iterator;
 import java.util.List;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 import io.netty.handler.codec.http.HttpConstants;
 import io.netty.util.internal.InternalThreadLocalMap;
 

File: core/src/main/java/com/linecorp/armeria/common/DefaultAggregatedHttpRequest.java
Patch:
@@ -16,11 +16,11 @@
 
 package com.linecorp.armeria.common;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.MoreObjects;
 import com.google.common.base.MoreObjects.ToStringHelper;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 final class DefaultAggregatedHttpRequest extends AbstractAggregatedHttpMessage
         implements AggregatedHttpRequest {
 

File: core/src/main/java/com/linecorp/armeria/common/DefaultAggregatedHttpResponse.java
Patch:
@@ -18,11 +18,11 @@
 
 import java.util.List;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.MoreObjects;
 import com.google.common.base.MoreObjects.ToStringHelper;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 final class DefaultAggregatedHttpResponse extends AbstractAggregatedHttpMessage
         implements AggregatedHttpResponse {
 

File: core/src/main/java/com/linecorp/armeria/common/DefaultAttributeMap.java
Patch:
@@ -41,11 +41,11 @@
 import java.util.concurrent.atomic.AtomicReferenceArray;
 import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
 
-import javax.annotation.Nullable;
-
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.Iterators;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 import io.netty.util.AttributeKey;
 
 final class DefaultAttributeMap {

File: core/src/main/java/com/linecorp/armeria/common/DefaultCookie.java
Patch:
@@ -32,11 +32,11 @@
 
 import java.util.Objects;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.MoreObjects;
 import com.google.common.base.MoreObjects.ToStringHelper;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * The default {@link Cookie} implementation.
  */

File: core/src/main/java/com/linecorp/armeria/common/DefaultHttpHeaders.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.linecorp.armeria.common;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 @SuppressWarnings("checkstyle:EqualsHashCode")
 class DefaultHttpHeaders extends HttpHeadersBase implements HttpHeaders {

File: core/src/main/java/com/linecorp/armeria/common/DefaultQueryParams.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.linecorp.armeria.common;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 @SuppressWarnings({ "checkstyle:EqualsHashCode", "EqualsAndHashcode" })
 final class DefaultQueryParams extends QueryParamsBase implements QueryParams {

File: core/src/main/java/com/linecorp/armeria/common/DefaultRequestHeaders.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Locale;
 import java.util.Locale.LanguageRange;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 @SuppressWarnings({ "checkstyle:EqualsHashCode", "EqualsAndHashcode" })
 final class DefaultRequestHeaders extends DefaultHttpHeaders implements RequestHeaders {

File: core/src/main/java/com/linecorp/armeria/common/DefaultRequestHeadersBuilder.java
Patch:
@@ -24,12 +24,12 @@
 import java.util.Locale;
 import java.util.Locale.LanguageRange;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 final class DefaultRequestHeadersBuilder extends AbstractHttpHeadersBuilder<RequestHeadersBuilder>
         implements RequestHeadersBuilder {
 

File: core/src/main/java/com/linecorp/armeria/common/DefaultRequestId.java
Patch:
@@ -17,8 +17,7 @@
 
 import java.util.concurrent.ThreadLocalRandom;
 
-import javax.annotation.Nullable;
-
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;
 
 /**

File: core/src/main/java/com/linecorp/armeria/common/DefaultResponseHeaders.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.linecorp.armeria.common;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 @SuppressWarnings({ "checkstyle:EqualsHashCode", "EqualsAndHashcode" })
 final class DefaultResponseHeaders extends DefaultHttpHeaders implements ResponseHeaders {

File: core/src/main/java/com/linecorp/armeria/common/DefaultRpcRequest.java
Patch:
@@ -23,11 +23,11 @@
 import java.util.Collections;
 import java.util.List;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * Default {@link RpcRequest} implementation.
  */

File: core/src/main/java/com/linecorp/armeria/common/DeferredHttpResponse.java
Patch:
@@ -20,8 +20,7 @@
 
 import java.util.concurrent.CompletionStage;
 
-import javax.annotation.Nullable;
-
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.stream.DeferredStreamMessage;
 import com.linecorp.armeria.common.util.Exceptions;
 

File: core/src/main/java/com/linecorp/armeria/common/Flags.java
Patch:
@@ -32,7 +32,6 @@
 import java.util.function.LongPredicate;
 import java.util.function.Predicate;
 
-import javax.annotation.Nullable;
 import javax.net.ssl.SSLEngine;
 import javax.net.ssl.SSLException;
 
@@ -53,6 +52,7 @@
 import com.linecorp.armeria.client.retry.Backoff;
 import com.linecorp.armeria.client.retry.RetryingClient;
 import com.linecorp.armeria.client.retry.RetryingRpcClient;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.common.util.InetAddressPredicates;
 import com.linecorp.armeria.common.util.Sampler;

File: core/src/main/java/com/linecorp/armeria/common/HeaderOverridingHttpRequest.java
Patch:
@@ -21,12 +21,11 @@
 import java.util.List;
 import java.util.concurrent.CompletableFuture;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Subscriber;
 
 import com.google.common.base.MoreObjects;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.stream.SubscriptionOption;
 
 import io.netty.buffer.ByteBufAllocator;

File: core/src/main/java/com/linecorp/armeria/common/HttpData.java
Patch:
@@ -29,13 +29,12 @@
 import java.util.Locale;
 import java.util.concurrent.Executor;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Subscriber;
 
 import com.google.errorprone.annotations.FormatMethod;
 import com.google.errorprone.annotations.FormatString;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.stream.StreamMessage;
 import com.linecorp.armeria.common.stream.SubscriptionOption;

File: core/src/main/java/com/linecorp/armeria/common/HttpHeaderGetters.java
Patch:
@@ -25,10 +25,10 @@
 import java.util.function.Consumer;
 import java.util.stream.Stream;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.Streams;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 import io.netty.util.AsciiString;
 
 /**

File: core/src/main/java/com/linecorp/armeria/common/HttpHeaderNames.java
Patch:
@@ -35,12 +35,12 @@
 import java.util.BitSet;
 import java.util.Map;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.Ascii;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.math.IntMath;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 import io.netty.util.AsciiString;
 
 /**

File: core/src/main/java/com/linecorp/armeria/common/HttpHeadersBase.java
Patch:
@@ -49,14 +49,13 @@
 import java.util.StringJoiner;
 import java.util.function.Function;
 
-import javax.annotation.Nullable;
-
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Splitter;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
 import com.google.common.math.IntMath;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.util.StringUtil;
 
 import io.netty.util.AsciiString;

File: core/src/main/java/com/linecorp/armeria/common/HttpHeadersBuilder.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Map;
 import java.util.Map.Entry;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * Builds an {@link HttpHeaders}.

File: core/src/main/java/com/linecorp/armeria/common/HttpMessageAggregator.java
Patch:
@@ -24,10 +24,9 @@
 import java.util.List;
 import java.util.concurrent.CompletableFuture;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.stream.SubscriptionOption;
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.common.util.UnmodifiableFuture;

File: core/src/main/java/com/linecorp/armeria/common/HttpMethod.java
Patch:
@@ -35,10 +35,10 @@
 import java.util.EnumSet;
 import java.util.Set;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.Sets;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * HTTP request method.
  */

File: core/src/main/java/com/linecorp/armeria/common/HttpRequest.java
Patch:
@@ -28,8 +28,6 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.function.Function;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Publisher;
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
@@ -42,6 +40,7 @@
 import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;
 import com.linecorp.armeria.common.FixedHttpRequest.RegularFixedHttpRequest;
 import com.linecorp.armeria.common.FixedHttpRequest.TwoElementFixedHttpRequest;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.stream.HttpDecoder;
 import com.linecorp.armeria.common.stream.PublisherBasedStreamMessage;

File: core/src/main/java/com/linecorp/armeria/common/HttpStatus.java
Patch:
@@ -18,8 +18,7 @@
 
 import static java.util.Objects.requireNonNull;
 
-import javax.annotation.Nullable;
-
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.util.StringUtil;
 
 /**

File: core/src/main/java/com/linecorp/armeria/common/MediaType.java
Patch:
@@ -50,8 +50,6 @@
 import java.util.function.Function;
 import java.util.stream.Stream;
 
-import javax.annotation.Nullable;
-
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import com.google.common.base.Ascii;
@@ -66,6 +64,8 @@
 import com.google.common.collect.Multimap;
 import com.google.common.collect.Multimaps;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * Represents an <a href="https://en.wikipedia.org/wiki/Internet_media_type">Internet Media Type</a>
  * (also known as a MIME Type or Content Type). This class also supports the concept of media ranges

File: core/src/main/java/com/linecorp/armeria/common/MediaTypeJsonDeserializer.java
Patch:
@@ -17,14 +17,14 @@
 
 import java.io.IOException;
 
-import javax.annotation.Nullable;
-
 import com.fasterxml.jackson.core.JsonParser;
 import com.fasterxml.jackson.databind.DeserializationContext;
 import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * Jackson {@link JsonDeserializer} for {@link MediaType}.
  */

File: core/src/main/java/com/linecorp/armeria/common/MediaTypeSet.java
Patch:
@@ -26,13 +26,13 @@
 import java.util.List;
 import java.util.Set;
 
-import javax.annotation.Nullable;
-
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterators;
 import com.google.common.collect.Lists;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * An immutable {@link Set} of {@link MediaType}s which provides useful methods for content negotiation.
  *

File: core/src/main/java/com/linecorp/armeria/common/NonWrappingRequestContext.java
Patch:
@@ -25,8 +25,7 @@
 import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
 import java.util.function.Supplier;
 
-import javax.annotation.Nullable;
-
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.internal.common.ArmeriaHttpUtil;

File: core/src/main/java/com/linecorp/armeria/common/ProtocolViolationException.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.linecorp.armeria.common;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A {@link RuntimeException} raised when a remote peer violated the current {@link SessionProtocol}.

File: core/src/main/java/com/linecorp/armeria/common/QueryParamGetters.java
Patch:
@@ -25,10 +25,9 @@
 import java.util.function.Consumer;
 import java.util.stream.Stream;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.Streams;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;
 
 /**

File: core/src/main/java/com/linecorp/armeria/common/QueryParams.java
Patch:
@@ -23,10 +23,9 @@
 import java.util.Date;
 import java.util.function.Consumer;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.Strings;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;
 
 /**

File: core/src/main/java/com/linecorp/armeria/common/QueryParamsBase.java
Patch:
@@ -29,7 +29,7 @@
  */
 package com.linecorp.armeria.common;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * The base container implementation of {@link QueryParams} and {@link QueryParamsBuilder}.

File: core/src/main/java/com/linecorp/armeria/common/QueryParamsBuilder.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Map;
 import java.util.Map.Entry;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * Builds a {@link QueryParams}.

File: core/src/main/java/com/linecorp/armeria/common/RequestContext.java
Patch:
@@ -34,14 +34,14 @@
 import java.util.function.Function;
 import java.util.function.Supplier;
 
-import javax.annotation.Nullable;
 import javax.net.ssl.SSLSession;
 
 import org.slf4j.Logger;
 
 import com.google.errorprone.annotations.MustBeClosed;
 
 import com.linecorp.armeria.client.ClientRequestContext;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogAccess;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
@@ -115,7 +115,8 @@ static ScheduledExecutorService makeContextPropagating(ScheduledExecutorService
      */
     @Nullable
     static <T> T mapCurrent(
-            Function<? super RequestContext, T> mapper, @Nullable Supplier<T> defaultValueSupplier) {
+            Function<? super RequestContext, T> mapper,
+            @Nullable Supplier<@Nullable T> defaultValueSupplier) {
 
         final RequestContext ctx = currentOrNull();
         if (ctx != null) {

File: core/src/main/java/com/linecorp/armeria/common/RequestContextStorage.java
Patch:
@@ -20,8 +20,7 @@
 
 import java.util.function.Function;
 
-import javax.annotation.Nullable;
-
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.util.Unwrappable;
 import com.linecorp.armeria.internal.common.RequestContextUtil;

File: core/src/main/java/com/linecorp/armeria/common/RequestContextStorageWrapper.java
Patch:
@@ -17,8 +17,7 @@
 
 import java.util.function.Function;
 
-import javax.annotation.Nullable;
-
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.AbstractUnwrappable;
 
 /**

File: core/src/main/java/com/linecorp/armeria/common/RequestContextWrapper.java
Patch:
@@ -22,9 +22,9 @@
 import java.util.Iterator;
 import java.util.Map.Entry;
 
-import javax.annotation.Nullable;
 import javax.net.ssl.SSLSession;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.logging.RequestLogAccess;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
 import com.linecorp.armeria.server.ServiceRequestContext;

File: core/src/main/java/com/linecorp/armeria/common/RequestHeaderGetters.java
Patch:
@@ -22,10 +22,10 @@
 import java.util.Locale;
 import java.util.Locale.LanguageRange;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * Provides the getter methods to {@link RequestHeaders} and {@link RequestHeadersBuilder}.
  *

File: core/src/main/java/com/linecorp/armeria/common/RpcRequest.java
Patch:
@@ -21,10 +21,10 @@
 
 import java.util.List;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * An RPC {@link Request}.
  */

File: core/src/main/java/com/linecorp/armeria/common/RpcResponse.java
Patch:
@@ -22,8 +22,7 @@
 import java.util.concurrent.CompletionStage;
 import java.util.concurrent.Future;
 
-import javax.annotation.Nullable;
-
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.Exceptions;
 
 /**

File: core/src/main/java/com/linecorp/armeria/common/Scheme.java
Patch:
@@ -20,11 +20,11 @@
 
 import java.util.Map;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.Ascii;
 import com.google.common.collect.ImmutableMap;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * A pair of {@link SerializationFormat} and {@link SessionProtocol}.
  * <p>

File: core/src/main/java/com/linecorp/armeria/common/SerializationFormat.java
Patch:
@@ -26,8 +26,6 @@
 import java.util.ServiceLoader;
 import java.util.Set;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -40,6 +38,8 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Multimap;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * Serialization format of a remote procedure call and its reply.
  */

File: core/src/main/java/com/linecorp/armeria/common/SerializationFormatProvider.java
Patch:
@@ -20,12 +20,11 @@
 
 import java.util.Set;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.Ascii;
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**

File: core/src/main/java/com/linecorp/armeria/common/ServerCacheControl.java
Patch:
@@ -22,11 +22,11 @@
 import java.util.Map;
 import java.util.function.BiConsumer;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * Directives for HTTP caching mechanisms in responses.
  *

File: core/src/main/java/com/linecorp/armeria/common/ServerCacheControlBuilder.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.time.Duration;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * Creates a new {@link ServerCacheControl} using the builder pattern.

File: core/src/main/java/com/linecorp/armeria/common/SessionProtocol.java
Patch:
@@ -22,12 +22,12 @@
 import java.util.Map;
 import java.util.Set;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.Ascii;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Sets;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * Session-level protocol that provides facilities such as framing and flow control.
  */

File: core/src/main/java/com/linecorp/armeria/common/StringMultimap.java
Patch:
@@ -47,13 +47,12 @@
 import java.util.function.BiConsumer;
 import java.util.function.Consumer;
 
-import javax.annotation.Nullable;
-
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterators;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.util.StringUtil;
 
 import io.netty.handler.codec.DateFormatter;

File: core/src/main/java/com/linecorp/armeria/common/StringMultimapBuilder.java
Patch:
@@ -29,11 +29,11 @@
 import java.util.function.Consumer;
 import java.util.stream.Stream;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * Skeletal builder implementation of {@link StringMultimap} and/or its subtypes.
  *

File: core/src/main/java/com/linecorp/armeria/common/StringMultimapGetters.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.function.Consumer;
 import java.util.stream.Stream;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * Provides the getter methods to {@link StringMultimap}.

File: core/src/main/java/com/linecorp/armeria/common/StringValueConverter.java
Patch:
@@ -35,8 +35,7 @@
 import java.util.Calendar;
 import java.util.Date;
 
-import javax.annotation.Nullable;
-
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.util.StringUtil;
 
 import io.netty.handler.codec.DateFormatter;

File: core/src/main/java/com/linecorp/armeria/common/ThreadLocalRequestContextStorage.java
Patch:
@@ -19,7 +19,7 @@
 import static com.linecorp.armeria.internal.common.RequestContextUtil.newIllegalContextPoppingException;
 import static java.util.Objects.requireNonNull;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 import io.netty.util.concurrent.FastThreadLocal;
 import io.netty.util.internal.InternalThreadLocalMap;

File: core/src/main/java/com/linecorp/armeria/common/TimeoutException.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.common;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A {@link RuntimeException} raised when a requested invocation does not complete before its deadline.

File: core/src/main/java/com/linecorp/armeria/common/annotation/NonNullByDefault.java
Patch:
@@ -22,7 +22,6 @@
 import java.lang.annotation.Target;
 
 import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
 import javax.annotation.meta.TypeQualifierDefault;
 
 /**

File: core/src/main/java/com/linecorp/armeria/common/auth/AuthUtil.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.common.auth;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 final class AuthUtil {
 

File: core/src/main/java/com/linecorp/armeria/common/auth/BasicToken.java
Patch:
@@ -23,11 +23,10 @@
 import java.util.Base64;
 import java.util.Objects;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.MoreObjects;
 
 import com.linecorp.armeria.common.HttpHeaderNames;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * The bearer token of

File: core/src/main/java/com/linecorp/armeria/common/auth/OAuth1aToken.java
Patch:
@@ -23,11 +23,10 @@
 import java.util.Map.Entry;
 import java.util.Objects;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.MoreObjects;
 
 import com.linecorp.armeria.common.HttpHeaderNames;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;
 
 /**

File: core/src/main/java/com/linecorp/armeria/common/auth/OAuth1aTokenBuilder.java
Patch:
@@ -30,11 +30,11 @@
 import java.util.Map;
 import java.util.Map.Entry;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.Ascii;
 import com.google.common.collect.ImmutableMap;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * Builds a new {@link OAuth1aToken}.
  */

File: core/src/main/java/com/linecorp/armeria/common/auth/OAuth2Token.java
Patch:
@@ -19,9 +19,8 @@
 import static com.linecorp.armeria.common.auth.AuthUtil.secureEquals;
 import static java.util.Objects.requireNonNull;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.common.HttpHeaderNames;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * The bearer token of <a href="https://datatracker.ietf.org/doc/rfc6750/">OAuth 2.0 authentication</a>.

File: core/src/main/java/com/linecorp/armeria/common/logging/BuiltInProperty.java
Patch:
@@ -27,7 +27,6 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import javax.annotation.Nullable;
 import javax.net.ssl.SSLSession;
 
 import com.google.common.collect.ImmutableMap;
@@ -44,6 +43,7 @@
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;
 import com.linecorp.armeria.common.Scheme;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.util.StringUtil;
 import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.ServiceRequestContext;

File: core/src/main/java/com/linecorp/armeria/common/logging/ContentPreviewer.java
Patch:
@@ -16,9 +16,8 @@
 
 package com.linecorp.armeria.common.logging;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.common.HttpData;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * Produces the preview of {@link RequestLog}.

File: core/src/main/java/com/linecorp/armeria/common/logging/ExportGroupBuilder.java
Patch:
@@ -21,11 +21,10 @@
 import java.util.Set;
 import java.util.function.Function;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableSet;
 
 import com.linecorp.armeria.common.HttpHeaderNames;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 import io.netty.util.AsciiString;
 import io.netty.util.AttributeKey;

File: core/src/main/java/com/linecorp/armeria/common/logging/LengthLimitingContentPreviewer.java
Patch:
@@ -22,13 +22,12 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.annotation.Nullable;
-
 import com.google.common.math.IntMath;
 import com.google.common.primitives.Ints;
 
 import com.linecorp.armeria.common.ByteBufAccessMode;
 import com.linecorp.armeria.common.HttpData;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;

File: core/src/main/java/com/linecorp/armeria/common/logging/LogLevel.java
Patch:
@@ -17,10 +17,10 @@
 
 import static java.util.Objects.requireNonNull;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * Log level.
  */

File: core/src/main/java/com/linecorp/armeria/common/logging/NoopContentPreviewer.java
Patch:
@@ -16,9 +16,8 @@
 
 package com.linecorp.armeria.common.logging;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.common.HttpData;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A skeletal {@link ContentPreviewer} implementation in order for a user to implement only the methods

File: core/src/main/java/com/linecorp/armeria/common/logging/PreviewSpec.java
Patch:
@@ -19,10 +19,9 @@
 import java.util.function.BiFunction;
 import java.util.function.BiPredicate;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.RequestContext;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 import io.netty.buffer.ByteBuf;
 

File: core/src/main/java/com/linecorp/armeria/common/logging/RegexBasedSanitizer.java
Patch:
@@ -22,11 +22,10 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 
 import com.linecorp.armeria.common.RequestContext;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * Regex based sanitizer.

File: core/src/main/java/com/linecorp/armeria/common/logging/RequestContextExporter.java
Patch:
@@ -25,14 +25,13 @@
 import java.util.Objects;
 import java.util.Set;
 
-import javax.annotation.Nullable;
-
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.RequestContext;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.logging.ExportGroupBuilder.ExportEntry;
 
 import io.netty.util.AsciiString;

File: core/src/main/java/com/linecorp/armeria/common/logging/RequestContextExporterBuilder.java
Patch:
@@ -22,11 +22,10 @@
 import java.util.List;
 import java.util.function.Function;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.ImmutableSet.Builder;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.logging.ExportGroupBuilder.ExportEntry;
 
 import io.netty.util.AsciiString;

File: core/src/main/java/com/linecorp/armeria/common/logging/RequestLogAccess.java
Patch:
@@ -18,10 +18,9 @@
 import java.util.List;
 import java.util.concurrent.CompletableFuture;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.RequestContext;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * Provides the access to a {@link RequestLog} or {@link RequestOnlyLog}, while ensuring the interested

File: core/src/main/java/com/linecorp/armeria/common/logging/RequestLogAvailabilityException.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.common.logging;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A {@link RuntimeException} raised when accessing a {@link RequestLog} property that's not available yet.

File: core/src/main/java/com/linecorp/armeria/common/logging/RequestLogBuilder.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.linecorp.armeria.common.logging;
 
-import javax.annotation.Nullable;
 import javax.net.ssl.SSLSession;
 
 import com.linecorp.armeria.common.HttpData;
@@ -28,6 +27,7 @@
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.SystemInfo;
 import com.linecorp.armeria.server.HttpService;
 

File: core/src/main/java/com/linecorp/armeria/common/logging/RequestScopedMdc.java
Patch:
@@ -25,14 +25,13 @@
 import java.lang.reflect.Field;
 import java.util.Map;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.slf4j.MDC;
 import org.slf4j.spi.MDCAdapter;
 
 import com.linecorp.armeria.common.RequestContext;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.Exceptions;
 
 import io.netty.util.AttributeKey;

File: core/src/main/java/com/linecorp/armeria/common/metric/AbstractMetricCollectingBuilder.java
Patch:
@@ -19,9 +19,8 @@
 
 import java.util.function.BiPredicate;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.common.RequestContext;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.logging.RequestLog;
 
 /**

File: core/src/main/java/com/linecorp/armeria/common/metric/DropwizardMeterRegistries.java
Patch:
@@ -19,11 +19,11 @@
 import static java.util.Comparator.comparing;
 import static java.util.Objects.requireNonNull;
 
-import javax.annotation.Nullable;
-
 import com.codahale.metrics.MetricRegistry;
 import com.google.common.annotations.VisibleForTesting;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.Tag;

File: core/src/main/java/com/linecorp/armeria/common/metric/MeterIdPrefix.java
Patch:
@@ -24,10 +24,10 @@
 import java.util.Collections;
 import java.util.List;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.Tag;
 

File: core/src/main/java/com/linecorp/armeria/common/metric/NoopMeterRegistry.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.function.ToDoubleFunction;
 import java.util.function.ToLongFunction;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.Counter;

File: core/src/main/java/com/linecorp/armeria/common/multipart/AggregatedBodyPart.java
Patch:
@@ -17,12 +17,11 @@
 
 import static java.util.Objects.requireNonNull;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.common.AggregatedHttpObject;
 import com.linecorp.armeria.common.ContentDisposition;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaders;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A complete body part whose headers and content are readily available.

File: core/src/main/java/com/linecorp/armeria/common/multipart/AggregatedMultipart.java
Patch:
@@ -23,10 +23,10 @@
 import java.util.List;
 import java.util.Set;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * A complete multipart whose body parts are readily available.
  */

File: core/src/main/java/com/linecorp/armeria/common/multipart/BodyPart.java
Patch:
@@ -17,8 +17,6 @@
 
 import static java.util.Objects.requireNonNull;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Publisher;
 
 import com.google.errorprone.annotations.CheckReturnValue;
@@ -27,6 +25,7 @@
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.MediaType;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.stream.StreamMessage;
 
 /**

File: core/src/main/java/com/linecorp/armeria/common/multipart/BodyPartBuilder.java
Patch:
@@ -22,8 +22,6 @@
 import java.nio.file.Path;
 import java.util.List;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Publisher;
 
 import com.google.common.collect.ImmutableList;
@@ -32,6 +30,7 @@
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.MediaType;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.stream.StreamMessage;
 
 /**

File: core/src/main/java/com/linecorp/armeria/common/multipart/DefaultMultipart.java
Patch:
@@ -23,8 +23,6 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ThreadLocalRandom;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 
@@ -41,6 +39,7 @@
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.ResponseHeaders;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.stream.StreamMessage;
 import com.linecorp.armeria.common.stream.SubscriptionOption;
 import com.linecorp.armeria.common.util.UnmodifiableFuture;

File: core/src/main/java/com/linecorp/armeria/common/multipart/MimeParser.java
Patch:
@@ -34,14 +34,13 @@
 import java.nio.charset.StandardCharsets;
 import java.util.regex.Pattern;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpHeadersBuilder;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.stream.DefaultStreamMessage;
 import com.linecorp.armeria.common.stream.HttpDecoderInput;
 import com.linecorp.armeria.common.stream.HttpDecoderOutput;

File: core/src/main/java/com/linecorp/armeria/common/multipart/Multipart.java
Patch:
@@ -21,8 +21,6 @@
 
 import java.util.concurrent.CompletableFuture;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Publisher;
 
 import com.google.common.collect.ImmutableList;
@@ -36,6 +34,7 @@
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.ResponseHeaders;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.stream.StreamMessage;
 
 import io.netty.buffer.ByteBufAllocator;

File: core/src/main/java/com/linecorp/armeria/common/multipart/MultipartDecoder.java
Patch:
@@ -18,13 +18,12 @@
 
 import java.util.concurrent.CompletableFuture;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Subscriber;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.linecorp.armeria.common.HttpData;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.stream.HttpDecoder;
 import com.linecorp.armeria.common.stream.HttpDecoderInput;
 import com.linecorp.armeria.common.stream.HttpDecoderOutput;

File: core/src/main/java/com/linecorp/armeria/common/multipart/MultipartEncoder.java
Patch:
@@ -22,12 +22,11 @@
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
 import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 
 import com.linecorp.armeria.common.HttpData;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.stream.AbortedStreamException;
 import com.linecorp.armeria.common.stream.CancelledSubscriptionException;
 import com.linecorp.armeria.common.stream.DefaultStreamMessage;

File: core/src/main/java/com/linecorp/armeria/common/multipart/Multiparts.java
Patch:
@@ -18,11 +18,10 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static java.util.Objects.requireNonNull;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.Iterables;
 
 import com.linecorp.armeria.common.MediaType;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * Utility methods to support multipart metadata handling.

File: core/src/main/java/com/linecorp/armeria/common/sse/DefaultServerSentEvent.java
Patch:
@@ -18,10 +18,10 @@
 import java.time.Duration;
 import java.util.Objects;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.MoreObjects;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * A default implementation of the {@link ServerSentEvent} interface.
  */

File: core/src/main/java/com/linecorp/armeria/common/sse/ServerSentEvent.java
Patch:
@@ -18,10 +18,9 @@
 import java.time.Duration;
 import java.util.stream.Stream;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Publisher;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.server.annotation.ProducesEventStream;
 import com.linecorp.armeria.server.annotation.ServerSentEventResponseConverterFunction;
 

File: core/src/main/java/com/linecorp/armeria/common/sse/ServerSentEventBuilder.java
Patch:
@@ -19,7 +19,7 @@
 
 import java.time.Duration;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A builder which creates a {@link ServerSentEvent} instance.

File: core/src/main/java/com/linecorp/armeria/common/stream/AbortingSubscriber.java
Patch:
@@ -16,11 +16,11 @@
 
 package com.linecorp.armeria.common.stream;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 final class AbortingSubscriber<T> implements Subscriber<T> {
 
     static final AbortingSubscriber<Object> INSTANCE =

File: core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessage.java
Patch:
@@ -26,15 +26,14 @@
 
 import java.util.concurrent.CompletableFuture;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.google.common.base.MoreObjects;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.CompositeException;
 import com.linecorp.armeria.common.util.EventLoopCheckingFuture;
 import com.linecorp.armeria.internal.common.stream.NoopSubscription;

File: core/src/main/java/com/linecorp/armeria/common/stream/ClosedStreamException.java
Patch:
@@ -16,9 +16,8 @@
 
 package com.linecorp.armeria.common.stream;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.common.Flags;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A {@link RuntimeException} that is raised when a {@link StreamMessage} has been closed unexpectedly.
@@ -67,7 +66,7 @@ public ClosedStreamException(@Nullable Throwable cause) {
      * disabled, and writable stack trace enabled or disabled.
      */
     protected ClosedStreamException(@Nullable String message, @Nullable Throwable cause,
-                                  boolean enableSuppression, boolean writableStackTrace) {
+                                    boolean enableSuppression, boolean writableStackTrace) {
         super(message, cause, enableSuppression, writableStackTrace);
     }
 }

File: core/src/main/java/com/linecorp/armeria/common/stream/ConcatArrayStreamMessage.java
Patch:
@@ -39,11 +39,10 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.stream.NoopSubscription;
 import com.linecorp.armeria.internal.common.stream.SubscriptionArbiter;
 

File: core/src/main/java/com/linecorp/armeria/common/stream/ConcatPublisherStreamMessage.java
Patch:
@@ -22,12 +22,11 @@
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
 import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Publisher;
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.stream.NoopSubscription;
 import com.linecorp.armeria.internal.common.stream.SubscriptionArbiter;
 

File: core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java
Patch:
@@ -24,13 +24,12 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
 
-import javax.annotation.Nullable;
-
 import org.jctools.queues.MpscChunkedArrayQueue;
 import org.reactivestreams.Subscriber;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 
 import io.netty.util.concurrent.EventExecutor;

File: core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessageDuplicator.java
Patch:
@@ -36,8 +36,6 @@
 import java.util.concurrent.atomic.AtomicLongFieldUpdater;
 import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 import org.slf4j.Logger;
@@ -51,6 +49,7 @@
 import com.linecorp.armeria.common.ByteBufAccessMode;
 import com.linecorp.armeria.common.ContentTooLargeException;
 import com.linecorp.armeria.common.HttpData;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.util.CompositeException;
 import com.linecorp.armeria.common.util.EventLoopCheckingFuture;

File: core/src/main/java/com/linecorp/armeria/common/stream/DeferredStreamMessage.java
Patch:
@@ -25,11 +25,10 @@
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
 import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.util.CompletionActions;
 

File: core/src/main/java/com/linecorp/armeria/common/stream/EmptyFixedStreamMessage.java
Patch:
@@ -18,10 +18,9 @@
 
 import java.util.List;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**

File: core/src/main/java/com/linecorp/armeria/common/stream/FilteredStreamMessage.java
Patch:
@@ -27,8 +27,6 @@
 import java.util.List;
 import java.util.concurrent.CompletableFuture;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 import org.slf4j.Logger;
@@ -37,6 +35,7 @@
 import com.google.common.collect.ImmutableList;
 
 import com.linecorp.armeria.common.HttpData;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.unsafe.PooledObjects;

File: core/src/main/java/com/linecorp/armeria/common/stream/FixedStreamMessage.java
Patch:
@@ -26,13 +26,12 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.CompositeException;
 import com.linecorp.armeria.common.util.EventLoopCheckingFuture;
 import com.linecorp.armeria.internal.common.stream.NoopSubscription;

File: core/src/main/java/com/linecorp/armeria/common/stream/FuseableStreamMessage.java
Patch:
@@ -23,14 +23,13 @@
 import java.util.function.Function;
 import java.util.function.Predicate;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.CompositeException;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.internal.common.stream.NonOverridableStreamMessageWrapper;

File: core/src/main/java/com/linecorp/armeria/common/stream/OneElementFixedStreamMessage.java
Patch:
@@ -20,10 +20,9 @@
 
 import java.util.List;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 
 import io.netty.util.concurrent.EventExecutor;

File: core/src/main/java/com/linecorp/armeria/common/stream/PathStreamMessage.java
Patch:
@@ -30,8 +30,6 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 import org.slf4j.Logger;
@@ -41,6 +39,7 @@
 import com.google.common.math.LongMath;
 
 import com.linecorp.armeria.common.HttpData;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.EventLoopCheckingFuture;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.internal.common.stream.NoopSubscription;

File: core/src/main/java/com/linecorp/armeria/common/stream/PublisherBasedStreamMessage.java
Patch:
@@ -26,8 +26,6 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Publisher;
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
@@ -37,6 +35,7 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.math.LongMath;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.util.CompositeException;
 import com.linecorp.armeria.common.util.EventLoopCheckingFuture;

File: core/src/main/java/com/linecorp/armeria/common/stream/RegularFixedStreamMessage.java
Patch:
@@ -21,10 +21,9 @@
 
 import java.util.List;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 
 import io.netty.util.concurrent.EventExecutor;

File: core/src/main/java/com/linecorp/armeria/common/stream/StreamMessageCollector.java
Patch:
@@ -23,13 +23,13 @@
 import java.util.List;
 import java.util.concurrent.CompletableFuture;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 final class StreamMessageCollector<T> implements Subscriber<T> {
 
     private final CompletableFuture<List<T>> future = new CompletableFuture<>();

File: core/src/main/java/com/linecorp/armeria/common/stream/StreamMessageUtil.java
Patch:
@@ -16,11 +16,10 @@
 
 package com.linecorp.armeria.common.stream;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Publisher;
 
 import com.linecorp.armeria.common.HttpData;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.multipart.BodyPart;
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.unsafe.PooledObjects;

File: core/src/main/java/com/linecorp/armeria/common/stream/ThreeElementFixedStreamMessage.java
Patch:
@@ -20,10 +20,9 @@
 
 import java.util.List;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 
 import io.netty.util.concurrent.EventExecutor;

File: core/src/main/java/com/linecorp/armeria/common/stream/TwoElementFixedStreamMessage.java
Patch:
@@ -20,10 +20,9 @@
 
 import java.util.List;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 
 import io.netty.util.concurrent.EventExecutor;

File: core/src/main/java/com/linecorp/armeria/common/util/AbstractThreadFactory.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.concurrent.ThreadFactory;
 import java.util.function.Function;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 import io.netty.util.concurrent.DefaultThreadFactory;
 

File: core/src/main/java/com/linecorp/armeria/common/util/CompletionActions.java
Patch:
@@ -18,11 +18,11 @@
 
 import java.util.concurrent.CompletionStage;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * Provides the common actions that are useful when handling a {@link CompletionStage}.
  */

File: core/src/main/java/com/linecorp/armeria/common/util/CompositeException.java
Patch:
@@ -40,10 +40,10 @@
 import java.util.Map;
 import java.util.Set;
 
-import javax.annotation.Nullable;
-
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * Represents an exception that is a composite of one or more other exceptions. A {@code CompositeException}
  * does not modify the structure of any exception it wraps, but at print-time it iterates through the list of

File: core/src/main/java/com/linecorp/armeria/common/util/EventLoopCheckingFuture.java
Patch:
@@ -25,14 +25,13 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.google.common.collect.MapMaker;
 
 import com.linecorp.armeria.common.Flags;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 import reactor.core.scheduler.NonBlocking;
 

File: core/src/main/java/com/linecorp/armeria/common/util/EventLoopThreadFactory.java
Patch:
@@ -19,8 +19,7 @@
 import java.util.concurrent.ThreadFactory;
 import java.util.function.Function;
 
-import javax.annotation.Nullable;
-
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.util.EventLoopThread;
 
 /**

File: core/src/main/java/com/linecorp/armeria/common/util/Exceptions.java
Patch:
@@ -30,7 +30,6 @@
 import java.util.function.Supplier;
 import java.util.regex.Pattern;
 
-import javax.annotation.Nullable;
 import javax.net.ssl.SSLException;
 
 import org.slf4j.Logger;
@@ -42,6 +41,7 @@
 import com.linecorp.armeria.common.ClosedSessionException;
 import com.linecorp.armeria.common.Flags;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.stream.AbortedStreamException;
 import com.linecorp.armeria.common.stream.CancelledSubscriptionException;
 import com.linecorp.armeria.common.stream.ClosedStreamException;

File: core/src/main/java/com/linecorp/armeria/common/util/Inet4AddressBlock.java
Patch:
@@ -23,10 +23,10 @@
 import java.net.InetAddress;
 import java.util.function.Predicate;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.MoreObjects;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 final class Inet4AddressBlock implements Predicate<InetAddress> {
 
     private static final byte[] localhost = { 127, 0, 0, 1 };

File: core/src/main/java/com/linecorp/armeria/common/util/NonEventLoopThreadFactory.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.concurrent.ThreadFactory;
 import java.util.function.Function;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 import io.netty.util.concurrent.FastThreadLocalThread;
 

File: core/src/main/java/com/linecorp/armeria/common/util/StartStopSupport.java
Patch:
@@ -27,11 +27,11 @@
 import java.util.concurrent.Executor;
 import java.util.function.Function;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * Provides asynchronous start-stop life cycle support.
  *

File: core/src/main/java/com/linecorp/armeria/common/util/SystemInfo.java
Patch:
@@ -37,14 +37,13 @@
 import java.util.function.Predicate;
 import java.util.regex.Pattern;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.google.common.base.Ascii;
 
 import com.linecorp.armeria.common.Flags;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.JavaVersionSpecific;
 
 /**

File: core/src/main/java/com/linecorp/armeria/common/util/TextFormatter.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Locale;
 import java.util.concurrent.TimeUnit;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A utility class to format things as a {@link String} with ease.

File: core/src/main/java/com/linecorp/armeria/common/util/ThreadFactoryBuilder.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.concurrent.ThreadFactory;
 import java.util.function.Function;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * Builds a new {@link ThreadFactory}.

File: core/src/main/java/com/linecorp/armeria/common/util/TransportType.java
Patch:
@@ -18,10 +18,9 @@
 import java.util.concurrent.ThreadFactory;
 import java.util.function.Function;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.Ascii;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.internal.common.util.TransportTypeProvider;
 
 import io.netty.channel.EventLoop;

File: core/src/main/java/com/linecorp/armeria/common/util/UnmodifiableFuture.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.CompletableFuture;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A {@link CompletableFuture} which prevents the caller from completing it. An attempt to call any of

File: core/src/main/java/com/linecorp/armeria/common/util/Unwrappable.java
Patch:
@@ -17,7 +17,7 @@
 
 import static java.util.Objects.requireNonNull;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * Provides a way to unwrap an object in decorator pattern, similar to down-casting in an inheritance pattern.

File: core/src/main/java/com/linecorp/armeria/internal/client/AbstractRuleBuilderUtil.java
Patch:
@@ -19,13 +19,12 @@
 import java.util.function.BiFunction;
 import java.util.function.BiPredicate;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.client.AbstractRuleBuilder;
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.ResponseHeaders;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.common.util.Exceptions;
@@ -37,6 +36,7 @@ public final class AbstractRuleBuilderUtil {
      * if all rules in the {@link AbstractRuleBuilder} match
      * a given {@link ClientRequestContext} and {@link Throwable}.
      */
+    // TODO(ikhoon): Use BiPredicate.
     public static BiFunction<? super ClientRequestContext, ? super Throwable, Boolean>
     buildFilter(BiPredicate<ClientRequestContext, RequestHeaders> requestHeadersFilter,
                 @Nullable BiPredicate<ClientRequestContext, ResponseHeaders> responseHeadersFilter,

File: core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java
Patch:
@@ -25,8 +25,6 @@
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -35,6 +33,7 @@
 import com.google.common.collect.Ordering;
 
 import com.linecorp.armeria.client.DnsTimeoutException;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 import io.netty.channel.EventLoop;
 import io.netty.handler.codec.dns.DnsQuestion;

File: core/src/main/java/com/linecorp/armeria/internal/client/DnsQuestionWithoutTrailingDot.java
Patch:
@@ -19,7 +19,7 @@
 
 import java.net.IDN;
 
-import javax.annotation.Nullable;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 import io.netty.handler.codec.dns.DnsQuestion;
 import io.netty.handler.codec.dns.DnsRecordType;

File: core/src/main/java/com/linecorp/armeria/internal/client/DnsUtil.java
Patch:
@@ -22,11 +22,11 @@
 import java.net.SocketException;
 import java.util.Enumeration;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufHolder;
 import io.netty.buffer.ByteBufUtil;

File: core/src/main/java/com/linecorp/armeria/internal/client/PublicSuffix.java
Patch:
@@ -26,11 +26,11 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.Ascii;
 import com.google.common.base.CharMatcher;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 /**
  * Utility class to determine if a domain is a public suffix. List of rules taken from
  * <a href="https://publicsuffix.org/list/public_suffix_list.dat">Public Suffix List</a>.

File: core/src/main/java/com/linecorp/armeria/internal/client/TruncatingHttpResponse.java
Patch:
@@ -16,15 +16,14 @@
 
 package com.linecorp.armeria.internal.client;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 
 import com.linecorp.armeria.common.FilteredHttpResponse;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpObject;
 import com.linecorp.armeria.common.HttpResponse;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 /**
  * A variant of {@link HttpResponse} that limits the maximum length of the content.

File: core/src/main/java/com/linecorp/armeria/internal/common/AbstractHttp2ConnectionHandler.java
Patch:
@@ -24,14 +24,13 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.google.common.annotations.VisibleForTesting;
 
 import com.linecorp.armeria.client.ClientFactory;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.server.Server;
 

File: core/src/main/java/com/linecorp/armeria/internal/common/AbstractKeepAliveHandler.java
Patch:
@@ -21,14 +21,13 @@
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Stopwatch;
 
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.Exceptions;
 
 import io.micrometer.core.instrument.Timer;

File: core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java
Patch:
@@ -50,8 +50,6 @@
 import java.util.StringJoiner;
 import java.util.function.BiConsumer;
 
-import javax.annotation.Nullable;
-
 import com.github.benmanes.caffeine.cache.Caffeine;
 import com.github.benmanes.caffeine.cache.LoadingCache;
 import com.google.common.annotations.VisibleForTesting;
@@ -72,6 +70,7 @@
 import com.linecorp.armeria.common.RequestHeadersBuilder;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.ResponseHeadersBuilder;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.Version;
 import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;
 import com.linecorp.armeria.server.ServerConfig;

File: core/src/main/java/com/linecorp/armeria/internal/common/CancellationScheduler.java
Patch:
@@ -24,13 +24,12 @@
 import java.util.concurrent.atomic.AtomicLongFieldUpdater;
 import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
 
-import javax.annotation.Nullable;
-
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.math.LongMath;
 
 import com.linecorp.armeria.client.ResponseTimeoutException;
 import com.linecorp.armeria.common.TimeoutException;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.util.TimeoutMode;
 import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.server.RequestTimeoutException;

File: core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java
Patch:
@@ -22,8 +22,6 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 import org.slf4j.Logger;
@@ -38,6 +36,7 @@
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.SplitHttpResponse;
+import com.linecorp.armeria.common.annotation.Nullable;
 import com.linecorp.armeria.common.stream.AbortedStreamException;
 import com.linecorp.armeria.common.stream.CancelledSubscriptionException;
 import com.linecorp.armeria.common.stream.NoopSubscriber;

File: core/src/main/java/com/linecorp/armeria/internal/common/GracefulConnectionShutdownHandler.java
Patch:
@@ -19,11 +19,11 @@
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelFutureListener;
 import io.netty.channel.ChannelHandlerContext;

File: core/src/main/java/com/linecorp/armeria/internal/common/Http2KeepAliveHandler.java
Patch:
@@ -22,15 +22,14 @@
 import java.util.concurrent.ThreadLocalRandom;
 import java.util.concurrent.TimeUnit;
 
-import javax.annotation.Nullable;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Stopwatch;
 
 import com.linecorp.armeria.common.Flags;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 import io.micrometer.core.instrument.Timer;
 import io.netty.channel.Channel;

File: core/src/main/java/com/linecorp/armeria/internal/common/HttpObjectAggregator.java
Patch:
@@ -20,15 +20,14 @@
 import java.util.List;
 import java.util.concurrent.CompletableFuture;
 
-import javax.annotation.Nullable;
-
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 
 import com.linecorp.armeria.common.AggregatedHttpObject;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpObject;
+import com.linecorp.armeria.common.annotation.Nullable;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;

File: core/src/main/java/com/linecorp/armeria/internal/common/InboundTrafficController.java
Patch:
@@ -18,11 +18,11 @@
 
 import java.util.concurrent.atomic.AtomicInteger;
 
-import javax.annotation.Nullable;
-
 import com.google.common.base.MoreObjects;
 import com.google.common.math.IntMath;
 
+import com.linecorp.armeria.common.annotation.Nullable;
+
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelConfig;
 

File: core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java
Patch:
@@ -441,6 +441,7 @@ private DefaultClientRequestContext(DefaultClientRequestContext ctx,
         root = ctx.root();
 
         log = RequestLog.builder(this);
+        log.startRequest();
         responseCancellationScheduler =
                 new CancellationScheduler(TimeUnit.MILLISECONDS.toNanos(ctx.responseTimeoutMillis()));
         writeTimeoutMillis = ctx.writeTimeoutMillis();

File: core/src/main/java/com/linecorp/armeria/server/Http2ServerConnectionHandler.java
Patch:
@@ -162,8 +162,8 @@ public void onDrainStart(ChannelHandlerContext ctx) {
          * Start channel shutdown. Will send final GOAWAY with latest created stream ID.
          */
         @Override
-        public void onDrainEnd(ChannelHandlerContext ctx, ChannelPromise promise) throws Exception {
-            Http2ServerConnectionHandler.super.close(ctx, promise);
+        public void onDrainEnd(ChannelHandlerContext ctx) throws Exception {
+            Http2ServerConnectionHandler.super.close(ctx, ctx.newPromise());
             // Cancel scheduled tasks after the call to the super class above to avoid triggering
             // needsImmediateDisconnection.
             cancelScheduledTasks();

File: grpc/src/test/java/com/linecorp/armeria/client/grpc/protocol/UnaryGrpcClientTest.java
Patch:
@@ -207,7 +207,7 @@ private static class GrpcWebUnaryGrpcSerializationFormatArgumentsProvider implem
         @Override
         public Stream<? extends Arguments> provideArguments(final ExtensionContext context) throws Exception {
             return UnaryGrpcSerializationFormats.values().stream().filter(
-                    f -> UnaryGrpcSerializationFormats.isGrpcWeb(f)).map(Arguments::of);
+                    UnaryGrpcSerializationFormats::isGrpcWeb).map(Arguments::of);
         }
     }
 

File: grpc/src/main/java/com/linecorp/armeria/common/grpc/GrpcMeterIdPrefixFunction.java
Patch:
@@ -31,6 +31,7 @@
 import com.linecorp.armeria.client.metric.MetricCollectingClient;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
+import com.linecorp.armeria.common.grpc.protocol.GrpcWebTrailers;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestOnlyLog;
 import com.linecorp.armeria.common.metric.MeterIdPrefix;

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java
Patch:
@@ -49,10 +49,10 @@
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.grpc.GrpcJsonMarshaller;
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
-import com.linecorp.armeria.common.grpc.GrpcWebTrailers;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageFramer;
 import com.linecorp.armeria.common.grpc.protocol.DeframedMessage;
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
+import com.linecorp.armeria.common.grpc.protocol.GrpcWebTrailers;
 import com.linecorp.armeria.common.logging.RequestLogAccess;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
 import com.linecorp.armeria.common.logging.RequestLogProperty;

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcWebTrailersExtractor.java
Patch:
@@ -36,10 +36,10 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.ResponseHeaders;
-import com.linecorp.armeria.common.grpc.GrpcWebTrailers;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer;
 import com.linecorp.armeria.common.grpc.protocol.DeframedMessage;
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
+import com.linecorp.armeria.common.grpc.protocol.GrpcWebTrailers;
 import com.linecorp.armeria.common.stream.DefaultStreamMessage;
 import com.linecorp.armeria.common.stream.StreamMessage;
 import com.linecorp.armeria.internal.client.grpc.protocol.InternalGrpcWebUtil;

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java
Patch:
@@ -49,12 +49,12 @@
 import com.linecorp.armeria.common.grpc.GrpcJsonMarshaller;
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
 import com.linecorp.armeria.common.grpc.GrpcStatusFunction;
-import com.linecorp.armeria.common.grpc.GrpcWebTrailers;
 import com.linecorp.armeria.common.grpc.ThrowableProto;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageFramer;
 import com.linecorp.armeria.common.grpc.protocol.Decompressor;
 import com.linecorp.armeria.common.grpc.protocol.DeframedMessage;
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
+import com.linecorp.armeria.common.grpc.protocol.GrpcWebTrailers;
 import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.common.stream.AbortedStreamException;
 import com.linecorp.armeria.common.stream.ClosedStreamException;

File: grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcWebRetryTest.java
Patch:
@@ -39,8 +39,8 @@
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
-import com.linecorp.armeria.common.grpc.GrpcWebTrailers;
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
+import com.linecorp.armeria.common.grpc.protocol.GrpcWebTrailers;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.grpc.testing.Messages.CompressionType;
 import com.linecorp.armeria.grpc.testing.Messages.SimpleRequest;

File: grpc/src/test/java/com/linecorp/armeria/common/grpc/GrpcMeterIdPrefixFunctionTest.java
Patch:
@@ -45,6 +45,7 @@
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
+import com.linecorp.armeria.common.grpc.protocol.GrpcWebTrailers;
 import com.linecorp.armeria.common.logging.RequestLogAccess;
 import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.common.metric.MeterIdPrefix;

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedDocServicePlugin.java
Patch:
@@ -51,7 +51,7 @@
 import com.google.common.collect.ImmutableSet;
 
 import com.linecorp.armeria.common.MediaType;
-import com.linecorp.armeria.internal.server.JacksonUtil;
+import com.linecorp.armeria.internal.common.JacksonUtil;
 import com.linecorp.armeria.internal.server.RouteUtil;
 import com.linecorp.armeria.internal.server.annotation.AnnotatedBeanFactoryRegistry.BeanFactoryId;
 import com.linecorp.armeria.server.Route;

File: core/src/main/java/com/linecorp/armeria/server/annotation/JacksonRequestConverterFunction.java
Patch:
@@ -40,7 +40,7 @@
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.RequestHeaders;
-import com.linecorp.armeria.internal.server.JacksonUtil;
+import com.linecorp.armeria.internal.common.JacksonUtil;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 import io.netty.util.AsciiString;

File: core/src/main/java/com/linecorp/armeria/server/annotation/JacksonResponseConverterFunction.java
Patch:
@@ -35,7 +35,7 @@
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.util.Exceptions;
-import com.linecorp.armeria.internal.server.JacksonUtil;
+import com.linecorp.armeria.internal.common.JacksonUtil;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.streaming.JsonTextSequences;
 

File: core/src/main/java/com/linecorp/armeria/server/streaming/JsonLines.java
Patch:
@@ -41,7 +41,7 @@
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.util.Exceptions;
-import com.linecorp.armeria.internal.server.JacksonUtil;
+import com.linecorp.armeria.internal.common.JacksonUtil;
 
 /**
  * A utility class which helps to create a <a href="https://jsonlines.org/">JavaScript Object

File: core/src/main/java/com/linecorp/armeria/server/streaming/JsonTextSequences.java
Patch:
@@ -39,7 +39,7 @@
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.util.Exceptions;
-import com.linecorp.armeria.internal.server.JacksonUtil;
+import com.linecorp.armeria.internal.common.JacksonUtil;
 
 /**
  * A utility class which helps to create a <a href="https://datatracker.ietf.org/doc/rfc7464/">JavaScript Object

File: graphql-protocol/src/main/java/com/linecorp/armeria/server/graphql/protocol/AbstractGraphqlService.java
Patch:
@@ -35,7 +35,7 @@
 import com.linecorp.armeria.common.QueryParams;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.annotation.UnstableApi;
-import com.linecorp.armeria.internal.server.JacksonUtil;
+import com.linecorp.armeria.internal.common.JacksonUtil;
 import com.linecorp.armeria.server.AbstractHttpService;
 import com.linecorp.armeria.server.ServiceRequestContext;
 

File: it/jackson-provider/src/test/java/com/linecorp/armeria/common/JacksonObjectMapperProviderTest.java
Patch:
@@ -24,9 +24,9 @@
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 
-import com.linecorp.armeria.internal.server.JacksonUtil;
+import com.linecorp.armeria.internal.common.JacksonUtil;
 
-class JacksonModuleProviderTest {
+class JacksonObjectMapperProviderTest {
 
     @Test
     void overrideDefaultJacksonModules() {

File: core/src/main/java/com/linecorp/armeria/server/Http2ServerConnectionHandlerBuilder.java
Patch:
@@ -39,6 +39,9 @@ final class Http2ServerConnectionHandlerBuilder
         this.keepAliveTimer = keepAliveTimer;
         this.gracefulShutdownSupport = gracefulShutdownSupport;
         this.scheme = scheme;
+        // Disable graceful shutdown timeout in a super class. Server-side HTTP/2 graceful shutdown is
+        // handled by Armeria's HTTP/2 server handler.
+        gracefulShutdownTimeoutMillis(-1);
     }
 
     @Override

File: core/src/test/java/com/linecorp/armeria/common/KeepAliveMaxNumRequestsTest.java
Patch:
@@ -47,7 +47,7 @@
 
 class KeepAliveMaxNumRequestsTest {
 
-    private static final int MAX_NUM_REQUESTS = 20;
+    private static final int MAX_NUM_REQUESTS = 3;
 
     @RegisterExtension
     static ServerExtension server = new ServerExtension() {

File: core/src/main/java/com/linecorp/armeria/common/util/Exceptions.java
Patch:
@@ -45,6 +45,7 @@
 import com.linecorp.armeria.common.stream.AbortedStreamException;
 import com.linecorp.armeria.common.stream.CancelledSubscriptionException;
 import com.linecorp.armeria.common.stream.ClosedStreamException;
+import com.linecorp.armeria.server.RequestCancellationException;
 
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelException;
@@ -192,6 +193,7 @@ public static boolean isStreamCancelling(Throwable cause) {
 
         return cause instanceof ClosedStreamException ||
                cause instanceof CancelledSubscriptionException ||
+               cause instanceof RequestCancellationException ||
                cause instanceof WriteTimeoutException ||
                cause instanceof AbortedStreamException ||
                (cause instanceof Http2Exception.StreamException &&

File: core/src/main/java/com/linecorp/armeria/internal/common/CancellationScheduler.java
Patch:
@@ -299,6 +299,9 @@ public void finishNow() {
     }
 
     public void finishNow(@Nullable Throwable cause) {
+        if (isFinishing()) {
+            return;
+        }
         if (isInitialized()) {
             if (eventLoop.inEventLoop()) {
                 finishNow0(cause);

File: core/src/main/java/com/linecorp/armeria/server/ServerConfig.java
Patch:
@@ -37,7 +37,7 @@
 
 import com.google.common.collect.ImmutableList;
 
-import com.linecorp.armeria.common.AggregatedHttpResponse;
+import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.RequestId;
 import com.linecorp.armeria.common.util.BlockingTaskExecutor;
@@ -639,7 +639,7 @@ public Supplier<RequestId> requestIdGenerator() {
 
     /**
      * Returns the {@link ExceptionHandler} that converts a {@link Throwable} to an
-     * {@link AggregatedHttpResponse}.
+     * {@link HttpResponse}.
      */
     public ExceptionHandler exceptionHandler() {
         return exceptionHandler;

File: protobuf/src/main/java/com/linecorp/armeria/server/protobuf/ProtobufResponseConverterFunctionProvider.java
Patch:
@@ -26,7 +26,6 @@
 import com.google.protobuf.MessageLite;
 
 import com.linecorp.armeria.common.annotation.UnstableApi;
-import com.linecorp.armeria.server.annotation.ExceptionHandlerFunction;
 import com.linecorp.armeria.server.annotation.ResponseConverterFunction;
 import com.linecorp.armeria.server.annotation.ResponseConverterFunctionProvider;
 
@@ -39,8 +38,7 @@ public final class ProtobufResponseConverterFunctionProvider implements Response
     @Override
     public ResponseConverterFunction createResponseConverterFunction(
             Type returnType,
-            ResponseConverterFunction responseConverter,
-            ExceptionHandlerFunction exceptionHandler) {
+            ResponseConverterFunction responseConverter) {
         if (isSupportedType(returnType)) {
             return new ProtobufResponseConverterFunction();
         }

File: rxjava2/src/test/java/com/linecorp/armeria/server/rxjava2/ObservableResponseConverterFunctionProviderTest.java
Patch:
@@ -61,9 +61,7 @@ public void shouldFailOnObservableOfObservable() throws NoSuchMethodException {
         final Type returnType = Sample.class.getMethod("unsupported")
                                             .getGenericReturnType();
         assertThatThrownBy(
-                () -> provider.createResponseConverterFunction(returnType,
-                                                               new DummyResponseConverter(),
-                                                               new DummyExceptionHandler()))
+                () -> provider.createResponseConverterFunction(returnType, new DummyResponseConverter()))
                 .isInstanceOf(IllegalStateException.class)
                 .hasMessageContaining(
                         "Disallowed type exists in the generic type arguments of the return type " +

File: rxjava3/src/test/java/com/linecorp/armeria/server/rxjava3/ObservableResponseConverterFunctionProviderTest.java
Patch:
@@ -61,9 +61,7 @@ void shouldFailOnObservableOfObservable() throws NoSuchMethodException {
         final Type returnType = Sample.class.getMethod("unsupported")
                                             .getGenericReturnType();
         assertThatThrownBy(
-                () -> provider.createResponseConverterFunction(returnType,
-                                                               new DummyResponseConverter(),
-                                                               new DummyExceptionHandler()))
+                () -> provider.createResponseConverterFunction(returnType, new DummyResponseConverter()))
                 .isInstanceOf(IllegalStateException.class)
                 .hasMessageContaining(
                         "Disallowed type exists in the generic type arguments of the return type " +

File: core/src/main/java/com/linecorp/armeria/common/ResponseHeadersBuilder.java
Patch:
@@ -44,17 +44,17 @@ public interface ResponseHeadersBuilder extends HttpHeadersBuilder, ResponseHead
     ResponseHeadersBuilder status(HttpStatus status);
 
     /**
-     * Sets the <a href="https://datatracker.ietf.org/doc/html/rfc6265#section-4.1">set-cookie</a> header.
+     * Adds the <a href="https://datatracker.ietf.org/doc/html/rfc6265#section-4.1">set-cookie</a> header.
      */
     ResponseHeadersBuilder cookie(Cookie cookie);
 
     /**
-     * Sets the <a href="https://datatracker.ietf.org/doc/html/rfc6265#section-4.1">set-cookie</a> header.
+     * Adds the <a href="https://datatracker.ietf.org/doc/html/rfc6265#section-4.1">set-cookie</a> header.
      */
     ResponseHeadersBuilder cookies(Iterable<? extends Cookie> cookies);
 
     /**
-     * Sets the <a href="https://datatracker.ietf.org/doc/html/rfc6265#section-4.1">set-cookie</a> header.
+     * Adds the <a href="https://datatracker.ietf.org/doc/html/rfc6265#section-4.1">set-cookie</a> header.
      */
     ResponseHeadersBuilder cookies(Cookie... cookies);
 

File: eureka/src/main/java/com/linecorp/armeria/client/eureka/EurekaEndpointGroup.java
Patch:
@@ -47,11 +47,10 @@
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.client.endpoint.EndpointSelectionStrategy;
 import com.linecorp.armeria.common.HttpData;
-import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
-import com.linecorp.armeria.common.MediaTypeNames;
+import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.QueryParams;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.RequestHeadersBuilder;
@@ -173,7 +172,7 @@ public static EurekaEndpointGroupBuilder builder(
 
         final RequestHeadersBuilder headersBuilder = RequestHeaders.builder();
         headersBuilder.method(HttpMethod.GET);
-        headersBuilder.add(HttpHeaderNames.ACCEPT, MediaTypeNames.JSON_UTF_8);
+        headersBuilder.accept(MediaType.JSON_UTF_8);
         responseConverter = responseConverter(headersBuilder, appName, instanceId,
                                               vipAddress, secureVipAddress, regions);
         requestHeaders = headersBuilder.build();

File: graphql/src/test/java/com/linecorp/armeria/server/graphql/GraphqlServiceSubscriptionTest.java
Patch:
@@ -76,7 +76,7 @@ void testSubscription() {
                                                          .execute(request)
                                                          .aggregate().join();
 
-        assertThat(response.status()).isEqualTo(HttpStatus.OK);
+        assertThat(response.status()).isEqualTo(HttpStatus.NOT_IMPLEMENTED);
         assertThatJson(response.contentUtf8())
                 .withMatcher("errors",
                              new CustomTypeSafeMatcher<List<Map<String, String>>>("errors") {

File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java
Patch:
@@ -221,12 +221,12 @@ default SafeCloseable push() {
         }
 
         if (oldCtx == null) {
-            return () -> RequestContextUtil.pop(this, null);
+            return RequestContextUtil.invokeHookAndPop(this, null);
         }
 
         final ServiceRequestContext root = root();
         if (oldCtx.root() == root) {
-            return () -> RequestContextUtil.pop(this, oldCtx);
+            return RequestContextUtil.invokeHookAndPop(this, oldCtx);
         }
 
         // Put the oldCtx back before throwing an exception.

File: core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java
Patch:
@@ -98,8 +98,6 @@ public final class DefaultServiceRequestContext
     private ContextAwareEventLoop contextAwareEventLoop;
     @Nullable
     private ContextAwareScheduledExecutorService blockingTaskExecutor;
-    @Nullable
-    private Runnable requestTimeoutHandler;
     private long maxRequestLength;
 
     @SuppressWarnings("FieldMayBeFinal") // Updated via `additionalResponseHeadersUpdater`

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java
Patch:
@@ -218,11 +218,11 @@ default SafeCloseable push() {
         }
 
         if (oldCtx == null) {
-            return () -> RequestContextUtil.pop(this, null);
+            return RequestContextUtil.invokeHookAndPop(this, null);
         }
 
         if (oldCtx.root() == this) {
-            return () -> RequestContextUtil.pop(this, oldCtx);
+            return RequestContextUtil.invokeHookAndPop(this, oldCtx);
         }
 
         // Put the oldCtx back before throwing an exception.

File: zookeeper3/src/test/java/com/linecorp/armeria/server/zookeeper/ServerSetRegistrationTest.java
Patch:
@@ -38,10 +38,12 @@
 import com.linecorp.armeria.common.zookeeper.ZooKeeperExtension;
 import com.linecorp.armeria.common.zookeeper.ZooKeeperTestUtil;
 import com.linecorp.armeria.internal.common.zookeeper.ServerSetsNodeValueCodec;
+import com.linecorp.armeria.internal.testing.FlakyTest;
 import com.linecorp.armeria.server.Server;
 
 import zookeeperjunit.CloseableZooKeeper;
 
+@FlakyTest
 class ServerSetRegistrationTest {
 
     private static final String Z_NODE = "/testEndPoints";

File: core/src/main/java/com/linecorp/armeria/common/AbstractHttpRequestBuilder.java
Patch:
@@ -423,7 +423,7 @@ private RequestHeaders requestHeaders() {
         if (content == null || content.isEmpty()) {
             requestHeadersBuilder.remove(CONTENT_LENGTH);
         } else {
-            requestHeadersBuilder.setInt(CONTENT_LENGTH, content.length());
+            requestHeadersBuilder.contentLength(content.length());
         }
         return requestHeadersBuilder.build();
     }

File: core/src/main/java/com/linecorp/armeria/common/AggregatedHttpRequest.java
Patch:
@@ -157,8 +157,7 @@ static AggregatedHttpRequest of(HttpMethod method, String path, MediaType mediaT
         requireNonNull(mediaType, "mediaType");
         requireNonNull(content, "content");
         requireNonNull(trailers, "trailers");
-        return of(RequestHeaders.builder(method, path)
-                                .contentType(mediaType).build(),
+        return of(RequestHeaders.builder(method, path).contentType(mediaType).build(),
                   content, trailers);
     }
 
@@ -200,7 +199,7 @@ static AggregatedHttpRequest of(RequestHeaders headers, HttpData content, HttpHe
         if (content.isEmpty()) {
             builder.remove(CONTENT_LENGTH);
         } else {
-            builder.setInt(CONTENT_LENGTH, content.length());
+            builder.contentLength(content.length());
         }
         headers = builder.build();
         return new DefaultAggregatedHttpRequest(headers, content, trailers);

File: core/src/main/java/com/linecorp/armeria/common/Flags.java
Patch:
@@ -59,6 +59,7 @@
 import com.linecorp.armeria.common.util.SystemInfo;
 import com.linecorp.armeria.common.util.TransportType;
 import com.linecorp.armeria.internal.common.util.SslContextUtil;
+import com.linecorp.armeria.internal.common.util.StringUtil;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
@@ -1347,7 +1348,7 @@ private static boolean getBoolean(String name, boolean defaultValue, Predicate<B
     }
 
     private static int getInt(String name, int defaultValue, IntPredicate validator) {
-        return Integer.parseInt(getNormalized(name, String.valueOf(defaultValue), value -> {
+        return Integer.parseInt(getNormalized(name, StringUtil.toString(defaultValue), value -> {
             try {
                 return validator.test(Integer.parseInt(value));
             } catch (Exception e) {
@@ -1358,7 +1359,7 @@ private static int getInt(String name, int defaultValue, IntPredicate validator)
     }
 
     private static long getLong(String name, long defaultValue, LongPredicate validator) {
-        return Long.parseLong(getNormalized(name, String.valueOf(defaultValue), value -> {
+        return Long.parseLong(getNormalized(name, StringUtil.toString(defaultValue), value -> {
             try {
                 return validator.test(Long.parseLong(value));
             } catch (Exception e) {

File: core/src/main/java/com/linecorp/armeria/common/HttpRequest.java
Patch:
@@ -233,7 +233,7 @@ static HttpRequest of(RequestHeaders headers, HttpData content, HttpHeaders trai
 
         // `content` is not empty.
         headers = headers.toBuilder()
-                         .setInt(CONTENT_LENGTH, contentLength)
+                         .contentLength(contentLength)
                          .build();
 
         if (trailers.isEmpty()) {

File: core/src/main/java/com/linecorp/armeria/common/HttpResponse.java
Patch:
@@ -323,8 +323,9 @@ static HttpResponse of(HttpStatus status, MediaType mediaType, HttpData content,
         requireNonNull(mediaType, "mediaType");
         requireNonNull(content, "content");
 
-        final ResponseHeaders headers = ResponseHeaders.of(status,
-                                                           HttpHeaderNames.CONTENT_TYPE, mediaType);
+        final ResponseHeaders headers = ResponseHeaders.builder(status)
+                                                       .contentType(mediaType)
+                                                       .build();
         return of(headers, content, trailers);
     }
 

File: core/src/main/java/com/linecorp/armeria/common/RequestHeaders.java
Patch:
@@ -44,8 +44,8 @@ static RequestHeadersBuilder builder() {
     static RequestHeadersBuilder builder(HttpMethod method, String path) {
         requireNonNull(method, "method");
         requireNonNull(path, "path");
-        return builder().add(HttpHeaderNames.METHOD, method.name())
-                        .add(HttpHeaderNames.PATH, path);
+        return builder().method(method)
+                        .path(path);
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/common/RequestHeadersBuilder.java
Patch:
@@ -134,6 +134,9 @@ default RequestHeadersBuilder acceptLanguages(LanguageRange... acceptedLanguages
     @Override
     RequestHeadersBuilder endOfStream(boolean endOfStream);
 
+    @Override
+    RequestHeadersBuilder contentLength(long contentLength);
+
     @Override
     RequestHeadersBuilder contentType(MediaType contentType);
 

File: core/src/main/java/com/linecorp/armeria/common/ResponseHeaderGetters.java
Patch:
@@ -30,7 +30,8 @@ interface ResponseHeaderGetters extends HttpHeaderGetters {
     HttpStatus status();
 
     /**
-     * Returns the parsed <a href="https://datatracker.ietf.org/doc/html/rfc6265#section-4.1">set-cookie</a> header.
+     * Returns the parsed
+     * <a href="https://datatracker.ietf.org/doc/html/rfc6265#section-4.1">set-cookie</a> header.
      *
      * @return a {@link Cookies} or an empty {@link Cookies} if there is no such header.
      */

File: core/src/main/java/com/linecorp/armeria/common/ResponseHeaders.java
Patch:
@@ -50,7 +50,7 @@ static ResponseHeadersBuilder builder(int statusCode) {
      */
     static ResponseHeadersBuilder builder(HttpStatus status) {
         requireNonNull(status, "status");
-        return builder().add(HttpHeaderNames.STATUS, status.codeAsText());
+        return builder().status(status);
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/common/ResponseHeadersBuilder.java
Patch:
@@ -66,6 +66,9 @@ public interface ResponseHeadersBuilder extends HttpHeadersBuilder, ResponseHead
     @Override
     ResponseHeadersBuilder endOfStream(boolean endOfStream);
 
+    @Override
+    ResponseHeadersBuilder contentLength(long contentLength);
+
     @Override
     ResponseHeadersBuilder contentType(MediaType contentType);
 

File: core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java
Patch:
@@ -615,7 +615,7 @@ public static ResponseHeaders toArmeria(HttpResponse in) {
         final io.netty.handler.codec.http.HttpHeaders inHeaders = in.headers();
         final ResponseHeadersBuilder out = ResponseHeaders.builder();
         out.sizeHint(inHeaders.size());
-        out.add(HttpHeaderNames.STATUS, HttpStatus.valueOf(in.status().code()).codeAsText());
+        out.status(HttpStatus.valueOf(in.status().code()));
         // Add the HTTP headers which have not been consumed above
         toArmeria(inHeaders, out);
         return out.build();
@@ -1070,7 +1070,7 @@ public static ResponseHeaders setOrRemoveContentLength(ResponseHeaders headers,
 
         if (!headers.contains(HttpHeaderNames.CONTENT_LENGTH) || !content.isEmpty()) {
             return headers.toBuilder()
-                          .setInt(HttpHeaderNames.CONTENT_LENGTH, content.length())
+                          .contentLength(content.length())
                           .build();
         }
 

File: core/src/main/java/com/linecorp/armeria/server/Http1RequestDecoder.java
Patch:
@@ -336,8 +336,8 @@ private void fail(int id, HttpResponseStatus status, @Nullable HttpData content)
         final ResponseHeaders headers =
                 ResponseHeaders.builder()
                                .status(status.code())
-                               .setObject(HttpHeaderNames.CONTENT_TYPE, MediaType.PLAIN_TEXT_UTF_8)
-                               .setInt(HttpHeaderNames.CONTENT_LENGTH, data.length())
+                               .contentType(MediaType.PLAIN_TEXT_UTF_8)
+                               .contentLength(data.length())
                                .build();
         writer.writeHeaders(id, 1, headers, false);
         writer.writeData(id, 1, data, true).addListener(ChannelFutureListener.CLOSE);

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -539,8 +539,7 @@ private void respond(ChannelHandlerContext ctx, ServiceRequestContext reqCtx,
         }
 
         respond(ctx, reqCtx,
-                ResponseHeaders.builder(status)
-                               .addObject(HttpHeaderNames.CONTENT_TYPE, ERROR_CONTENT_TYPE),
+                ResponseHeaders.builder(status).contentType(ERROR_CONTENT_TYPE),
                 resContent, cause);
     }
 
@@ -632,7 +631,7 @@ private static void setContentLength(HttpRequest req, ResponseHeadersBuilder hea
         if (req.method() == HttpMethod.HEAD || headers.status().isContentAlwaysEmpty()) {
             return;
         }
-        headers.setInt(HttpHeaderNames.CONTENT_LENGTH, contentLength);
+        headers.contentLength(contentLength);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/server/RoutingResult.java
Patch:
@@ -24,6 +24,7 @@
 
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.internal.common.ArmeriaHttpUtil;
+import com.linecorp.armeria.internal.common.util.StringUtil;
 
 /**
  * The result returned by {@link Route#apply(RoutingContext, boolean)}.
@@ -203,7 +204,7 @@ public MediaType negotiatedResponseMediaType() {
     @Override
     public String toString() {
         if (isPresent()) {
-            String score = String.valueOf(this.score);
+            String score = StringUtil.toString(this.score);
             if (hasHighestScore()) {
                 score += " (highest)";
             } else if (hasLowestScore()) {

File: core/src/main/java/com/linecorp/armeria/server/file/AbstractHttpFile.java
Patch:
@@ -171,7 +171,7 @@ protected final ResponseHeaders readHeaders(@Nullable HttpFileAttributes attrs)
     private ResponseHeaders addCommonHeaders(ResponseHeadersBuilder headers, HttpFileAttributes attrs,
                                              @Nullable String etag) {
         if (contentType != null) {
-            headers.set(HttpHeaderNames.CONTENT_TYPE, contentType.toString());
+            headers.contentType(contentType);
         }
         if (dateEnabled) {
             headers.setTimeMillis(HttpHeaderNames.DATE, clock.millis());

File: core/src/test/java/com/linecorp/armeria/common/StringMultimapDerivedApiConsistencyTest.java
Patch:
@@ -60,6 +60,7 @@ private static List<String> signature(Class<?> type) {
                          // Ignore the methods only available in HttpHeaderGetters or HttpHeadersBuilder.
                          if ("endOfStream".equals(methodName) ||
                              "isEndOfStream".equals(methodName) ||
+                             "contentLength".equals(methodName) ||
                              "contentType".equals(methodName) ||
                              "contentDisposition".equals(methodName)) {
                              return false;

File: examples/proxy-server/src/main/java/example/armeria/proxy/AnimationService.java
Patch:
@@ -5,7 +5,6 @@
 import java.util.concurrent.TimeUnit;
 
 import com.linecorp.armeria.common.HttpData;
-import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpResponseWriter;
@@ -63,8 +62,9 @@ public AnimationService(int frameIntervalMillis) {
     protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) throws Exception {
         // Create a response for streaming. If you don't need to stream, use HttpResponse.of(...) instead.
         final HttpResponseWriter res = HttpResponse.streaming();
-        res.write(ResponseHeaders.of(HttpStatus.OK,
-                                     HttpHeaderNames.CONTENT_TYPE, MediaType.PLAIN_TEXT_UTF_8));
+        res.write(ResponseHeaders.builder(HttpStatus.OK)
+                                 .contentType(MediaType.PLAIN_TEXT_UTF_8)
+                                 .build());
         res.whenConsumed().thenRun(() -> streamData(ctx.eventLoop(), res, 0));
         return res;
     }

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/UnframedGrpcService.java
Patch:
@@ -31,7 +31,6 @@
 import com.linecorp.armeria.common.AggregatedHttpRequest;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpData;
-import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
@@ -306,7 +305,7 @@ public void onSubscribe(Subscription subscription) {
             public void onNext(DeframedMessage message) {
                 // We know that we don't support compression, so this is always a ByteBuf.
                 final HttpData unframedContent = HttpData.wrap(message.buf()).withEndOfStream();
-                unframedHeaders.setInt(HttpHeaderNames.CONTENT_LENGTH, unframedContent.length());
+                unframedHeaders.contentLength(unframedContent.length());
                 res.complete(HttpResponse.of(unframedHeaders.build(), unframedContent));
             }
 

File: oauth2/src/main/java/com/linecorp/armeria/internal/common/auth/oauth2/AbstractOAuth2Request.java
Patch:
@@ -140,7 +140,7 @@ private HttpRequest createHttpRequest(String endpointPath, QueryParams requestFo
         } else {
             requestFormData = requestFormData.withMutations(this::addCredentialsAsBodyParameters);
         }
-        headersBuilder.addObject(HttpHeaderNames.CONTENT_TYPE, MediaType.FORM_DATA);
+        headersBuilder.contentType(MediaType.FORM_DATA);
 
         return HttpRequest.of(headersBuilder.build(), HttpData.ofUtf8(requestFormData.toQueryString()));
     }

File: resteasy/src/main/java/com/linecorp/armeria/server/resteasy/ResteasyService.java
Patch:
@@ -157,8 +157,8 @@ public ServerBuilder register(ServerBuilder serverBuilder) {
     @Override
     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) {
         final RequestHeaders headers = req.headers();
-        final Long contentLength = headers.getLong(HttpHeaderNames.CONTENT_LENGTH);
-        if (contentLength != null && contentLength <= maxRequestBufferSize) {
+        final long contentLength = headers.contentLength();
+        if (contentLength >= -1 && contentLength <= maxRequestBufferSize) {
             // aggregate bounded requests
             return HttpResponse.from(req.aggregate().thenCompose(r -> serveAsync(ctx, r)));
         } else {

File: retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/AbstractSubscriber.java
Patch:
@@ -112,7 +112,7 @@ public final void onNext(HttpObject httpObject) {
                     headers.forEach(header -> responseBuilder.addHeader(header.getKey().toString(),
                                                                         header.getValue()));
                     contentType = headers.get(HttpHeaderNames.CONTENT_TYPE);
-                    contentLength = headers.getLong(HttpHeaderNames.CONTENT_LENGTH, NO_CONTENT_LENGTH);
+                    contentLength = headers.contentLength();
                 }
                 break;
             case WAIT_DATA_OR_TRAILERS:

File: spring/boot2-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/WebOperationService.java
Patch:
@@ -229,7 +229,7 @@ private HttpResponse handleResult(ServiceRequestContext ctx,
             final long length = resource.contentLength();
             final ResponseHeadersBuilder headers = ResponseHeaders.builder(status);
             headers.contentType(contentType);
-            headers.setLong(HttpHeaderNames.CONTENT_LENGTH, length);
+            headers.contentLength(length);
             headers.setTimeMillis(HttpHeaderNames.LAST_MODIFIED, resource.lastModified());
             if (filename != null) {
                 headers.set(HttpHeaderNames.CONTENT_DISPOSITION,

File: core/src/main/java/com/linecorp/armeria/server/encoding/HttpEncodingType.java
Patch:
@@ -21,5 +21,6 @@
  */
 enum HttpEncodingType {
     GZIP,
-    DEFLATE
+    DEFLATE,
+    BROTLI
 }

File: core/src/main/java/com/linecorp/armeria/server/ServerConfig.java
Patch:
@@ -702,7 +702,7 @@ static String toString(
 
         boolean hasPorts = false;
         for (final ServerPort p : ports) {
-            buf.append(ServerPort.toString(null, p.localAddress(), p.protocols()));
+            buf.append(ServerPort.toString(null, p.localAddress(), p.protocols(), p.portGroup()));
             buf.append(", ");
             hasPorts = true;
         }

File: core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java
Patch:
@@ -193,15 +193,16 @@ private void writeFirstHeader(HttpSession session) {
 
         final SessionProtocol protocol = session.protocol();
         assert protocol != null;
-        if (request.isEmpty()) {
+        final boolean isEmpty = request.isEmpty();
+        if (isEmpty) {
             state = State.DONE;
         } else {
             state = State.NEEDS_DATA_OR_TRAILERS;
         }
 
         final RequestHeaders merged = mergeRequestHeaders(firstHeaders, ctx.additionalRequestHeaders());
         logBuilder.requestHeaders(merged);
-        final ChannelFuture future = encoder.writeHeaders(id, streamId(), merged, request.isEmpty());
+        final ChannelFuture future = encoder.writeHeaders(id, streamId(), merged, isEmpty);
         future.addListener(this);
         ch.flush();
     }

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java
Patch:
@@ -238,7 +238,7 @@ public void start(Listener<O> responseListener, Metadata metadata) {
                                                                     .asRuntimeException()));
 
         final HttpStreamDeframer deframer =
-                new HttpStreamDeframer(decompressorRegistry, this, null, maxInboundMessageSizeBytes);
+                new HttpStreamDeframer(decompressorRegistry, ctx, this, null, maxInboundMessageSizeBytes);
         final ByteBufAllocator alloc = ctx.alloc();
         final StreamMessage<DeframedMessage> deframed =
                 res.decode(deframer, alloc, byteBufConverter(alloc, grpcWebText));

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/FramedGrpcService.java
Patch:
@@ -197,7 +197,7 @@ protected HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req) throws
                     return HttpResponse.of(
                             (ResponseHeaders) ArmeriaServerCall.statusToTrailers(
                                     ctx, defaultHeaders.get(serializationFormat).toBuilder(),
-                                    GrpcStatus.fromThrowable(statusFunction, e, metadata), metadata));
+                                    GrpcStatus.fromThrowable(statusFunction, ctx, e, metadata), metadata));
                 }
             }
         }
@@ -251,7 +251,7 @@ private <I, O> ArmeriaServerCall<I, O> startCall(
         } catch (Throwable t) {
             call.setListener(new EmptyListener<>());
             final Metadata metadata = new Metadata();
-            call.close(GrpcStatus.fromThrowable(statusFunction, t, metadata), metadata);
+            call.close(GrpcStatus.fromThrowable(statusFunction, ctx, t, metadata), metadata);
             logger.warn(
                     "Exception thrown from streaming request stub method before processing any request data" +
                     " - this is likely a bug in the stub implementation.");

File: it/grpc/reactor/src/test/java/com/linecorp/armeria/grpc/reactor/HelloServiceTest.java
Patch:
@@ -60,7 +60,7 @@ private static Server newServer(int httpPort) {
         final HttpServiceWithRoutes grpcService =
                 GrpcService.builder()
                            .addService(new HelloServiceImpl())
-                           .exceptionMapping((throwable, metadata) -> {
+                           .exceptionMapping((ctx, throwable, metadata) -> {
                                if (throwable instanceof AuthError) {
                                    return Status.UNAUTHENTICATED.withDescription(throwable.getMessage())
                                                                 .withCause(throwable);

File: grpc-protocol/src/main/java/com/linecorp/armeria/internal/common/grpc/protocol/GrpcSerializationFormatProvider.java
Patch:
@@ -14,7 +14,7 @@
  *  under the License.
  */
 
-package com.linecorp.armeria.internal.common.grpc;
+package com.linecorp.armeria.internal.common.grpc.protocol;
 
 import static com.linecorp.armeria.common.MediaType.create;
 

File: core/src/main/java/com/linecorp/armeria/internal/common/util/TransportTypeProvider.java
Patch:
@@ -166,7 +166,9 @@ private static TransportTypeProvider of(
                 initializeMethod.setAccessible(true);
                 initializeMethod.invoke(null, NetUtil.isIpV4StackPreferred());
             } catch (Throwable cause) {
-                if (Exceptions.peel(cause) instanceof UnsatisfiedLinkError) {
+                final Throwable peeledCause = Exceptions.peel(cause);
+                if (peeledCause instanceof UnsatisfiedLinkError ||
+                    peeledCause instanceof ClassNotFoundException) {
                     // Failed to load a native library, which is fine.
                 } else {
                     logger.debug("Failed to force-initialize '" + ChannelUtil.channelPackageName() +

File: core/src/main/java/com/linecorp/armeria/common/HttpResponse.java
Patch:
@@ -743,8 +743,8 @@ default HttpResponse mapTrailers(Function<? super HttpHeaders, ? extends HttpHea
      *         return new MyDomainException(cause);
      *     } else {
      *         return cause;
-     *     });
-     * })
+     *     }
+     * });
      * }</pre>
      */
     @Override

File: core/src/main/java/com/linecorp/armeria/internal/common/util/SslContextUtil.java
Patch:
@@ -96,7 +96,7 @@ public static SslContext createSslContext(
             boolean tlsAllowUnsafeCiphers,
             Iterable<? extends Consumer<? super SslContextBuilder>> userCustomizers) {
 
-        return BouncyCastleKeyFactoryProvider.call(() -> {
+        return MinifiedBouncyCastleProvider.call(() -> {
             final SslContextBuilder builder = builderSupplier.get();
             final SslProvider provider = Flags.useOpenSsl() ? SslProvider.OPENSSL : SslProvider.JDK;
             builder.sslProvider(provider);

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostBuilder.java
Patch:
@@ -62,6 +62,7 @@
 
 import com.linecorp.armeria.common.Flags;
 import com.linecorp.armeria.common.util.SystemInfo;
+import com.linecorp.armeria.internal.common.util.SelfSignedCertificate;
 import com.linecorp.armeria.internal.common.util.SslContextUtil;
 import com.linecorp.armeria.internal.server.annotation.AnnotatedServiceExtensions;
 import com.linecorp.armeria.server.annotation.ExceptionHandlerFunction;
@@ -73,7 +74,6 @@
 import io.netty.handler.ssl.SslContext;
 import io.netty.handler.ssl.SslContextBuilder;
 import io.netty.handler.ssl.util.InsecureTrustManagerFactory;
-import io.netty.handler.ssl.util.SelfSignedCertificate;
 import io.netty.util.ReferenceCountUtil;
 
 /**

File: core/src/test/java/com/linecorp/armeria/client/ClientFactoryBuilderTest.java
Patch:
@@ -36,7 +36,7 @@
 
 import com.linecorp.armeria.common.Flags;
 import com.linecorp.armeria.common.util.TransportType;
-import com.linecorp.armeria.internal.common.util.BouncyCastleKeyFactoryProvider;
+import com.linecorp.armeria.internal.common.util.MinifiedBouncyCastleProvider;
 
 import io.netty.channel.ChannelOption;
 import io.netty.resolver.DefaultAddressResolverGroup;
@@ -145,7 +145,7 @@ void useRefreshingAddressResolverGroup() {
     @CsvSource({ "pkcs5.key", "pkcs8.key" })
     void shouldAllowPkcsPrivateKeys(String privateKeyPath) {
         final String resourceRoot =
-                '/' + BouncyCastleKeyFactoryProvider.class.getPackage().getName().replace('.', '/') + '/';
+                '/' + MinifiedBouncyCastleProvider.class.getPackage().getName().replace('.', '/') + '/';
         ClientFactory.builder().tlsCustomizer(sslCtxBuilder -> {
             sslCtxBuilder.keyManager(
                     getClass().getResourceAsStream(resourceRoot + "test.crt"),

File: core/src/test/java/com/linecorp/armeria/internal/common/util/SslContextUtilTest.java
Patch:
@@ -86,7 +86,7 @@ void unsafeTlsCiphers() {
     private static String getBadCipher() {
         for (String cipher : BAD_HTTP2_CIPHERS) {
             try {
-                final SslContext sslCtx = BouncyCastleKeyFactoryProvider.call(() -> {
+                final SslContext sslCtx = MinifiedBouncyCastleProvider.call(() -> {
                     final SslContextBuilder builder = SslContextBuilder.forClient();
                     final SslProvider provider = Flags.useOpenSsl() ? SslProvider.OPENSSL : SslProvider.JDK;
                     builder.sslProvider(provider);

File: core/src/test/java/com/linecorp/armeria/server/ServerBuilderTest.java
Patch:
@@ -52,7 +52,7 @@
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.metric.PrometheusMeterRegistries;
 import com.linecorp.armeria.common.util.TransportType;
-import com.linecorp.armeria.internal.common.util.BouncyCastleKeyFactoryProvider;
+import com.linecorp.armeria.internal.common.util.MinifiedBouncyCastleProvider;
 import com.linecorp.armeria.internal.testing.MockAddressResolverGroup;
 import com.linecorp.armeria.testing.junit5.server.SelfSignedCertificateExtension;
 import com.linecorp.armeria.testing.junit5.server.ServerExtension;
@@ -490,7 +490,7 @@ void tlsCustomizerWithoutTlsSelfSigned() {
     @CsvSource({ "/pkcs5.pem", "/pkcs8.pem" })
     void tlsPkcsPrivateKeys(String privateKeyPath) {
         final String resourceRoot =
-                '/' + BouncyCastleKeyFactoryProvider.class.getPackage().getName().replace('.', '/') + '/';
+                '/' + MinifiedBouncyCastleProvider.class.getPackage().getName().replace('.', '/') + '/';
         Server.builder()
               .tls(getClass().getResourceAsStream("/cert.pem"),
                    getClass().getResourceAsStream(privateKeyPath))

File: junit5/src/main/java/com/linecorp/armeria/internal/testing/SelfSignedCertificateRuleDelegate.java
Patch:
@@ -30,7 +30,7 @@
 
 import javax.annotation.Nullable;
 
-import io.netty.handler.ssl.util.SelfSignedCertificate;
+import com.linecorp.armeria.internal.common.util.SelfSignedCertificate;
 
 /**
  * A delegate that has common testing methods of {@link SelfSignedCertificate}.

File: saml/src/test/java/com/linecorp/armeria/server/saml/SamlServiceProviderTest.java
Patch:
@@ -101,14 +101,13 @@
 import com.linecorp.armeria.common.QueryParams;
 import com.linecorp.armeria.common.QueryParamsBuilder;
 import com.linecorp.armeria.common.RequestHeaders;
+import com.linecorp.armeria.internal.common.util.SelfSignedCertificate;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.annotation.Get;
 import com.linecorp.armeria.server.auth.Authorizer;
 import com.linecorp.armeria.testing.junit4.server.ServerRule;
 
-import io.netty.handler.ssl.util.SelfSignedCertificate;
-
 public class SamlServiceProviderTest {
 
     private static final String signatureAlgorithm = SignatureConstants.ALGO_ID_SIGNATURE_RSA;

File: core/src/main/java/com/linecorp/armeria/common/HttpRequest.java
Patch:
@@ -593,9 +593,9 @@ default HttpRequest mapTrailers(Function<? super HttpHeaders, ? extends HttpHead
      * HttpRequest request = HttpRequest.ofFailure(new IllegalStateException("Something went wrong.");
      * HttpRequest transformed = request.mapError(cause -> {
      *     if (cause instanceof IllegalStateException) {
-     *         return new MyDomainException(ex);
+     *         return new MyDomainException(cause);
      *     } else {
-     *         return ex;
+     *         return cause;
      *     }
      * });
      * }</pre>

File: jetty9/src/test/java/com/linecorp/armeria/server/jetty/JettyServiceTest.java
Patch:
@@ -214,7 +214,6 @@ protected void configure(ServerBuilder sb) throws Exception {
                            } catch (Throwable cause) {
                                capturedException.set(cause);
                            }
-
                        }));
 
             sb.service("/stream/{totalSize}/{chunkSize}",

File: grpc/src/main/java/com/linecorp/armeria/internal/common/grpc/GrpcStatus.java
Patch:
@@ -174,8 +174,9 @@ private static Throwable unwrap(Throwable t) {
     }
 
     /**
-     * Maps GRPC status codes to http status, as defined in upstream grpc-gateway
-     * <a href="https://github.com/grpc-ecosystem/grpc-gateway/blob/master/third_party/googleapis/google/rpc/code.proto">code.proto</a>.
+     * Maps GRPC status codes to http status, as defined in upstream Google APIs
+     * <a href="https://github.com/googleapis/googleapis/blob/b2a7d2709887e38bcd3b5142424e563b0b386b6f/google/rpc/code.proto">
+     * code.proto</a>.
      */
     public static HttpStatus grpcCodeToHttpStatus(Status.Code grpcStatusCode) {
         switch (grpcStatusCode) {

File: core/src/main/java/com/linecorp/armeria/common/stream/DeferredStreamMessage.java
Patch:
@@ -314,7 +314,7 @@ public final void abort(Throwable cause) {
         }
 
         final SubscriptionImpl newSubscription = new SubscriptionImpl(
-                this, AbortingSubscriber.get(cause), ImmediateEventExecutor.INSTANCE, EMPTY_OPTIONS, null);
+                this, AbortingSubscriber.get(cause), ImmediateEventExecutor.INSTANCE, EMPTY_OPTIONS);
         downstreamSubscriptionUpdater.compareAndSet(this, null, newSubscription);
 
         final StreamMessage<T> upstream = this.upstream;
@@ -368,7 +368,7 @@ private static SubscriptionImpl noopSubscription() {
         final DefaultStreamMessage<?> streamMessage = new DefaultStreamMessage<>();
         streamMessage.close();
         return new SubscriptionImpl(streamMessage, NoopSubscriber.get(), ImmediateEventExecutor.INSTANCE,
-                                    EMPTY_OPTIONS, null);
+                                    EMPTY_OPTIONS);
     }
 
     private final class ForwardingSubscriber implements Subscriber<T> {

File: core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedDocServiceTest.java
Patch:
@@ -457,8 +457,7 @@ public String toString() {
 
         @Get("/bean")
         public HttpResponse bean(CompositeBean compositeBean) throws JsonProcessingException {
-            final ObjectMapper mapper = new ObjectMapper();
-            return HttpResponse.of(mapper.writeValueAsString(compositeBean));
+            return HttpResponse.ofJson(compositeBean);
         }
 
         @Get("/exclude1")

File: benchmarks/src/jmh/java/com/linecorp/armeria/common/stream/StreamMessageBenchmark.java
Patch:
@@ -39,7 +39,8 @@
 /**
  * Microbenchmarks of {@link StreamMessage Stream Messages}.
  */
-@Fork(jvmArgsAppend = { EventLoopJmhExecutor.JVM_ARG_1, EventLoopJmhExecutor.JVM_ARG_2 })
+@Fork(jvmArgsAppend = { EventLoopJmhExecutor.JVM_ARG_1, EventLoopJmhExecutor.JVM_ARG_2,
+                        "-Dcom.linecorp.armeria.reportBlockedEventLoop=false"})
 @State(Scope.Benchmark)
 public class StreamMessageBenchmark {
 

File: core/src/test/java/com/linecorp/armeria/client/ClientFactoryBuilderTest.java
Patch:
@@ -122,7 +122,7 @@ void shouldPreserveChannelOptionInClientFactory() {
                                                   .build()) {
             final Map<ChannelOption<?>, Object> channelOptions =
                     factory.options().get(ClientFactoryOptions.CHANNEL_OPTIONS);
-            final int connectTimeoutMillis = (int) channelOptions.get(ChannelOption.CONNECT_TIMEOUT_MILLIS);
+            final int connectTimeoutMillis = (int) channelOptions.get(CONNECT_TIMEOUT_MILLIS);
             assertThat(connectTimeoutMillis).isEqualTo(Flags.defaultConnectTimeoutMillis());
         }
     }

File: core/src/main/java/com/linecorp/armeria/server/Http2RequestDecoder.java
Patch:
@@ -24,10 +24,7 @@
 
 import javax.annotation.Nullable;
 
-import com.google.common.math.LongMath;
-
 import com.linecorp.armeria.common.ContentTooLargeException;
-import com.linecorp.armeria.common.ContentTooLargeExceptionBuilder;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpMethod;

File: zookeeper3/src/test/java/com/linecorp/armeria/server/zookeeper/ZooKeeperRegistrationTest.java
Patch:
@@ -17,6 +17,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatCode;
+import static org.assertj.core.api.Assumptions.assumeThat;
 import static org.awaitility.Awaitility.await;
 
 import java.time.Duration;
@@ -148,6 +149,8 @@ private static List<Server> startServers(boolean legacySpec) throws Exception {
 
     @Test
     void curatorRegistrationSpec() throws Throwable {
+        assumeThat(System.getenv("FLAKY_TESTS")).isNotEqualTo("false");
+
         final List<Server> servers = startServersWithRetry(false);
         // all servers start and with znode created
         await().untilAsserted(() -> {

File: core/src/test/java/com/linecorp/armeria/client/ClientFactoryBuilderTest.java
Patch:
@@ -37,8 +37,6 @@
 import com.linecorp.armeria.common.Flags;
 import com.linecorp.armeria.common.util.TransportType;
 import com.linecorp.armeria.internal.common.util.BouncyCastleKeyFactoryProvider;
-import com.linecorp.armeria.internal.common.util.ChannelUtil;
-import com.linecorp.armeria.internal.common.util.ChannelUtilTest;
 
 import io.netty.channel.ChannelOption;
 import io.netty.resolver.DefaultAddressResolverGroup;

File: core/src/test/java/com/linecorp/armeria/common/HttpHeadersBaseTest.java
Patch:
@@ -813,6 +813,7 @@ private static HttpHeadersBase newHttp2Headers() {
         headers.authority("netty.io");
         headers.add("name3", "value4");
         headers.scheme("https");
+        headers.add(HttpHeaderNames.PROTOCOL, "websocket");
         return headers;
     }
 }

File: spring/boot2-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java
Patch:
@@ -187,7 +187,7 @@ void testLoggers() throws Exception {
     void testPrometheus() throws Exception {
         final AggregatedHttpResponse res = client.get("/internal/actuator/prometheus").aggregate().get();
         assertThat(res.status()).isEqualTo(HttpStatus.OK);
-        assertThat(res.contentType()).isEqualTo(MediaType.parse(TextFormat.CONTENT_TYPE_004));
+        assertThat(res.contentType()).isEqualTo(MediaType.parse(TextFormat.CONTENT_TYPE_OPENMETRICS_100));
         assertThat(res.contentAscii()).startsWith("# HELP ");
     }
 

File: core/src/main/java/com/linecorp/armeria/server/annotation/JacksonRequestConverterFunction.java
Patch:
@@ -96,8 +96,7 @@ public Object convertRequest(
             @Nullable ParameterizedType expectedParameterizedResultType) throws Exception {
 
         final MediaType contentType = request.contentType();
-        if (contentType != null && (contentType.is(MediaType.JSON) ||
-                                    contentType.subtype().endsWith("+json"))) {
+        if (contentType != null && contentType.isJson()) {
             if (expectedResultType == TreeNode.class ||
                 expectedResultType == JsonNode.class) {
                 try {

File: core/src/main/java/com/linecorp/armeria/server/annotation/JacksonResponseConverterFunction.java
Patch:
@@ -78,7 +78,7 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,
         if (mediaType != null) {
             // @Produces("application/json") or @ProducesJson is specified.
             // Any MIME type which ends with '+json' such as 'application/json-patch+json' can be also accepted.
-            if (mediaType.is(MediaType.JSON) || mediaType.subtype().endsWith("+json")) {
+            if (mediaType.isJson()) {
                 final Charset charset = mediaType.charset(StandardCharsets.UTF_8);
                 // Convert the object only if the charset supports UTF-8,
                 // because ObjectMapper always writes JSON document as UTF-8.

File: protobuf/src/main/java/com/linecorp/armeria/server/protobuf/ProtobufRequestConverterFunction.java
Patch:
@@ -229,8 +229,7 @@ static boolean isProtobuf(@Nullable MediaType contentType) {
     }
 
     static boolean isJson(@Nullable MediaType contentType) {
-        return contentType != null &&
-               (contentType.is(MediaType.JSON) || contentType.subtype().endsWith("+json"));
+        return contentType != null && contentType.isJson();
     }
 
     private static Message.Builder getMessageBuilder(Class<?> clazz) {

File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java
Patch:
@@ -283,13 +283,13 @@ ClientRequestContext newDerivedContext(RequestId id, @Nullable HttpRequest req,
     long writeTimeoutMillis();
 
     /**
-     * Returns the amount of time allowed until the initial write attempt of the current {@link Request}
+     * Sets the amount of time allowed until the initial write attempt of the current {@link Request}
      * succeeds. This value is initially set from {@link ClientOptions#WRITE_TIMEOUT_MILLIS}.
      */
     void setWriteTimeoutMillis(long writeTimeoutMillis);
 
     /**
-     * Returns the amount of time allowed until the initial write attempt of the current {@link Request}
+     * Sets the amount of time allowed until the initial write attempt of the current {@link Request}
      * succeeds. This value is initially set from {@link ClientOptions#WRITE_TIMEOUT_MILLIS}.
      */
     void setWriteTimeout(Duration writeTimeout);

File: core/src/test/java/com/linecorp/armeria/client/DefaultClientRequestContextTest.java
Patch:
@@ -217,7 +217,8 @@ private static DefaultClientRequestContext newContext() {
                         HttpMethod.POST, "/foo",
                         HttpHeaderNames.SCHEME, "http",
                         HttpHeaderNames.AUTHORITY, "example.com:8080")),
-                null, new CancellationScheduler(0), System.nanoTime(), SystemInfo.currentTimeMicros());
+                null, RequestOptions.of(), new CancellationScheduler(0), System.nanoTime(),
+                SystemInfo.currentTimeMicros());
         ctx.init(Endpoint.of("example.com", 8080));
         return ctx;
     }

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaChannel.java
Patch:
@@ -26,6 +26,7 @@
 import com.linecorp.armeria.client.ClientOptions;
 import com.linecorp.armeria.client.DefaultClientRequestContext;
 import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.RequestOptions;
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.client.grpc.GrpcClientOptions;
 import com.linecorp.armeria.common.HttpHeaderNames;
@@ -189,6 +190,7 @@ private DefaultClientRequestContext newContext(HttpMethod method, HttpRequest re
                 options(),
                 req,
                 null,
+                RequestOptions.of(),
                 System.nanoTime(),
                 SystemInfo.currentTimeMicros());
     }

File: core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java
Patch:
@@ -67,7 +67,6 @@
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.logging.RequestOnlyLog;
 import com.linecorp.armeria.common.util.BlockingTaskExecutor;
-import com.linecorp.armeria.common.util.BlockingTaskExecutorBuilder;
 import com.linecorp.armeria.common.util.EventLoopGroups;
 import com.linecorp.armeria.common.util.SystemInfo;
 import com.linecorp.armeria.internal.common.RequestContextUtil;

File: core/src/main/java/com/linecorp/armeria/common/stream/FuseableStreamMessage.java
Patch:
@@ -32,7 +32,6 @@
 import com.google.common.collect.ImmutableList;
 
 import com.linecorp.armeria.common.util.Exceptions;
-
 import com.linecorp.armeria.internal.common.stream.NonOverridableStreamMessageWrapper;
 
 import io.netty.util.concurrent.EventExecutor;

File: spring/boot2-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/WebOperationService.java
Patch:
@@ -30,7 +30,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.RejectedExecutionException;
 import java.util.regex.Pattern;
 
 import javax.annotation.Nullable;

File: benchmarks/src/jmh/java/com/linecorp/armeria/common/stream/StreamMessageBenchmark.java
Patch:
@@ -107,7 +107,7 @@ private long computedSum(StreamMessage<Integer> stream) {
             return computedSum;
         }
 
-        private void writeAllValues(StreamMessage<Integer> stream) {
+        void writeAllValues(StreamMessage<Integer> stream) {
             if (stream instanceof StreamWriter) {
                 @SuppressWarnings("unchecked")
                 final StreamWriter<Integer> writer = (StreamWriter<Integer>) stream;
@@ -157,7 +157,7 @@ public long notJmhEventLoop(StreamObjects streamObjects) throws Exception {
         return streamObjects.computedSum(stream);
     }
 
-    private static StreamMessage<Integer> newStream(StreamObjects streamObjects) {
+    static StreamMessage<Integer> newStream(StreamObjects streamObjects) {
         switch (streamObjects.streamType) {
             case DEFAULT_STREAM_MESSAGE:
                 return new DefaultStreamMessage<>();

File: core/src/main/java/com/linecorp/armeria/client/encoding/HttpDecodedResponse.java
Patch:
@@ -41,7 +41,6 @@
  */
 final class HttpDecodedResponse extends FilteredHttpResponse {
 
-    private final HttpResponse delegate;
     private final Map<String, StreamDecoderFactory> availableDecoders;
     private final ByteBufAllocator alloc;
     private final boolean strictContentEncoding;
@@ -54,7 +53,6 @@ final class HttpDecodedResponse extends FilteredHttpResponse {
     HttpDecodedResponse(HttpResponse delegate, Map<String, StreamDecoderFactory> availableDecoders,
                         ByteBufAllocator alloc, boolean strictContentEncoding) {
         super(delegate, true);
-        this.delegate = delegate;
         this.availableDecoders = availableDecoders;
         this.alloc = alloc;
         this.strictContentEncoding = strictContentEncoding;

File: core/src/main/java/com/linecorp/armeria/common/multipart/MultipartEncoder.java
Patch:
@@ -54,8 +54,6 @@ final class MultipartEncoder implements StreamMessage<HttpData> {
 
     private static final HttpData CRLF = HttpData.ofUtf8("\r\n");
 
-    static final SubscriptionOption[] EMPTY_OPTIONS = {};
-
     private final String boundary;
 
     private final StreamMessage<BodyPart> publisher;

File: core/src/main/java/com/linecorp/armeria/common/stream/ConcatArrayStreamMessage.java
Patch:
@@ -32,7 +32,7 @@
 
 package com.linecorp.armeria.common.stream;
 
-import static com.linecorp.armeria.common.stream.StreamMessageUtil.containsNotifyCancellation;
+import static com.linecorp.armeria.internal.common.stream.InternalStreamMessageUtil.containsNotifyCancellation;
 import static java.util.Objects.requireNonNull;
 
 import java.util.List;

File: core/src/main/java/com/linecorp/armeria/common/stream/ConcatPublisherStreamMessage.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.linecorp.armeria.common.stream;
 
-import static com.linecorp.armeria.common.stream.StreamMessageUtil.containsNotifyCancellation;
+import static com.linecorp.armeria.internal.common.stream.InternalStreamMessageUtil.containsNotifyCancellation;
 import static java.util.Objects.requireNonNull;
 
 import java.util.concurrent.CompletableFuture;

File: core/src/main/java/com/linecorp/armeria/common/stream/PathStreamMessage.java
Patch:
@@ -16,8 +16,8 @@
 
 package com.linecorp.armeria.common.stream;
 
-import static com.linecorp.armeria.common.stream.StreamMessageUtil.containsNotifyCancellation;
-import static com.linecorp.armeria.common.stream.StreamMessageUtil.containsWithPooledObjects;
+import static com.linecorp.armeria.internal.common.stream.InternalStreamMessageUtil.containsNotifyCancellation;
+import static com.linecorp.armeria.internal.common.stream.InternalStreamMessageUtil.containsWithPooledObjects;
 import static java.util.Objects.requireNonNull;
 
 import java.io.IOException;

File: core/src/main/java/com/linecorp/armeria/internal/client/TruncatingHttpResponse.java
Patch:
@@ -50,10 +50,10 @@ protected void beforeSubscribe(Subscriber<? super HttpObject> subscriber, Subscr
 
     @Override
     protected HttpObject filter(HttpObject obj) {
-        if (obj instanceof HttpData) {
+        if (!overflow && obj instanceof HttpData) {
             final int dataLength = ((HttpData) obj).length();
             contentLength += dataLength;
-            if (contentLength > maxContentLength && !overflow) {
+            if (contentLength > maxContentLength) {
                 overflow = true;
                 assert subscriber != null;
                 subscriber.onComplete();

File: core/src/main/java/com/linecorp/armeria/internal/common/DefaultSplitHttpResponse.java
Patch:
@@ -64,7 +64,6 @@ public class DefaultSplitHttpResponse implements StreamMessage<HttpData>, SplitH
 
     private static final ResponseHeaders HEADERS_WITH_UNKNOWN_STATUS = ResponseHeaders.of(HttpStatus.UNKNOWN);
     private static final HeadersFuture<HttpHeaders> EMPTY_TRAILERS;
-    private static final SubscriptionOption[] EMPTY_OPTIONS = {};
 
     static {
         EMPTY_TRAILERS = new HeadersFuture<>();

File: core/src/test/java/com/linecorp/armeria/common/stream/PathStreamMessageTest.java
Patch:
@@ -16,8 +16,8 @@
 
 package com.linecorp.armeria.common.stream;
 
-import static com.linecorp.armeria.common.stream.StreamMessageUtil.EMPTY_OPTIONS;
-import static com.linecorp.armeria.common.stream.StreamMessageUtil.containsWithPooledObjects;
+import static com.linecorp.armeria.internal.common.stream.InternalStreamMessageUtil.EMPTY_OPTIONS;
+import static com.linecorp.armeria.internal.common.stream.InternalStreamMessageUtil.containsWithPooledObjects;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.awaitility.Awaitility.await;
 

File: core/src/test/java/com/linecorp/armeria/server/ServerMaxConnectionAgeTest.java
Patch:
@@ -147,7 +147,9 @@ public void connectionClosed(SessionProtocol protocol, InetSocketAddress remoteA
                                           .build();
 
         while (closed.get() < maxClosedConnection) {
-            assertThat(client.get("/").aggregate().join().status()).isEqualTo(OK);
+            final HttpResponse response = client.get("/");
+            assertThat(response.aggregate().join().status()).isEqualTo(OK);
+            response.whenComplete().join();
             final int closed = this.closed.get();
             assertThat(opened).hasValueBetween(closed, closed + 1);
         }

File: it/jackson-provider/src/test/java/com/linecorp/armeria/common/CustomJacksonModuleProvider.java
Patch:
@@ -22,8 +22,6 @@
 import com.fasterxml.jackson.module.kotlin.KotlinModule;
 import com.google.common.collect.ImmutableList;
 
-import com.linecorp.armeria.common.JacksonModuleProvider;
-
 public final class CustomJacksonModuleProvider implements JacksonModuleProvider {
     @Override
     public List<Module> modules() {

File: core/src/main/java/com/linecorp/armeria/internal/common/PercentDecoder.java
Patch:
@@ -64,7 +64,9 @@ public final class PercentDecoder {
      * <a href="https://datatracker.ietf.org/doc/html/rfc3986#section-2.1">Percent-Encoded</a>.
      */
     public static String decodeComponent(String s) {
-        return decodeComponent(TemporaryThreadLocals.get(), s, 0, s.length());
+        try (TemporaryThreadLocals tempThreadLocals = TemporaryThreadLocals.acquire()) {
+            return decodeComponent(tempThreadLocals, s, 0, s.length());
+        }
     }
 
     /**

File: core/src/test/java/com/linecorp/armeria/server/healthcheck/ScheduledHealthCheckerTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.time.Duration;
 import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
@@ -52,10 +51,10 @@ void stopSchedulingAfterStop() throws InterruptedException {
         assertThat(invokedCount.get()).isZero();
 
         server.start().join();
-        assertThat(invokedCount.get()).isOne();
+        await().untilAsserted(() -> assertThat(invokedCount.get()).isOne());
 
         holder.get().complete(new HealthCheckStatus(true, 100));
-        await().atMost(1, TimeUnit.SECONDS).untilAsserted(() -> assertThat(invokedCount.get()).isEqualTo(2));
+        await().untilAsserted(() -> assertThat(invokedCount.get()).isEqualTo(2));
 
         server.stop().join();
         holder.get().complete(new HealthCheckStatus(true, 100));

File: core/src/main/java/com/linecorp/armeria/common/util/BlockingTaskExecutor.java
Patch:
@@ -34,6 +34,9 @@ static BlockingTaskExecutor of() {
         return (BlockingTaskExecutor) CommonPools.blockingTaskExecutor();
     }
 
+    /**
+     * Returns a new builder for {@link BlockingTaskExecutor}.
+     */
     static BlockingTaskExecutorBuilder builder() {
         return new BlockingTaskExecutorBuilder();
     }

File: core/src/main/java/com/linecorp/armeria/server/DefaultServiceConfigSetters.java
Patch:
@@ -173,7 +173,9 @@ ServiceConfigBuilder toServiceConfigBuilder(Route route, HttpService service) {
         } else if (defaultServiceNaming != null) {
             serviceConfigBuilder.defaultServiceNaming(defaultServiceNaming);
         } else {
-            if (annotatedService != null) {
+            // Set the default service name only when the service name is set using @ServiceName.
+            // If it's not, the global defaultServiceNaming is used.
+            if (annotatedService != null && annotatedService.serviceNameSetByAnnotation()) {
                 serviceConfigBuilder.defaultServiceName(annotatedService.serviceName());
             }
         }

File: kotlin/src/main/java/com/linecorp/armeria/server/kotlin/CoroutineContextService.java
Patch:
@@ -42,7 +42,7 @@
  * >         }
  * >     })
  * >     .decorator(CoroutineContextService.newDecorator { ctx ->
- * >         CoroutineName(ctx.config().defaultServiceName() ?: "none")
+ * >         CoroutineName(ctx.config().defaultServiceNaming.serviceName(ctx) ?: "name")
  * >     })
  * }
  * </pre>

File: core/src/main/java/com/linecorp/armeria/common/RpcResponse.java
Patch:
@@ -60,7 +60,7 @@ static RpcResponse from(CompletionStage<?> stage) {
         final CompletableRpcResponse res = new CompletableRpcResponse();
         stage.handle((value, cause) -> {
             if (cause != null) {
-                res.completeExceptionally(cause);
+                res.completeExceptionally(Exceptions.peel(cause));
             } else if (value instanceof RpcResponse) {
                 ((RpcResponse) value).handle((rpcResponseResult, rpcResponseCause) -> {
                     if (rpcResponseCause != null) {

File: thrift0.13/src/main/java/com/linecorp/armeria/server/thrift/THttpService.java
Patch:
@@ -588,7 +588,7 @@ private static void handleOneWaySuccess(
     private void handleException(ServiceRequestContext ctx, CompletableFuture<HttpResponse> res,
                                  SerializationFormat serializationFormat, int seqId,
                                  ThriftFunction func, Throwable cause) {
-        final RpcResponse response = handleException(ctx, cause);
+        final RpcResponse response = handleException(ctx, Exceptions.peel(cause));
         response.handle((result, convertedCause) -> {
             if (convertedCause != null) {
                 handleException(ctx, response, res, serializationFormat, seqId, func, convertedCause);

File: core/src/main/java/com/linecorp/armeria/internal/common/util/TransportTypeProvider.java
Patch:
@@ -19,7 +19,6 @@
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
-import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.Map;
 import java.util.Set;
@@ -155,8 +154,7 @@ private static TransportTypeProvider of(
                 initializeMethod.setAccessible(true);
                 initializeMethod.invoke(null, NetUtil.isIpV4StackPreferred());
             } catch (Throwable cause) {
-                if (cause instanceof InvocationTargetException &&
-                    cause.getCause() instanceof UnsatisfiedLinkError) {
+                if (Exceptions.peel(cause) instanceof UnsatisfiedLinkError) {
                     // Failed to load a native library, which is fine.
                 } else {
                     logger.debug("Failed to force-initialize 'io.netty.channel.unix.Socket':", cause);

File: core/src/main/java/com/linecorp/armeria/common/FixedHttpRequest.java
Patch:
@@ -65,8 +65,7 @@ static final class TwoElementFixedHttpRequest
 
         private final RequestHeaders headers;
 
-        TwoElementFixedHttpRequest(
-                RequestHeaders headers, HttpObject obj1, HttpObject obj2) {
+        TwoElementFixedHttpRequest(RequestHeaders headers, HttpObject obj1, HttpObject obj2) {
             super(obj1, obj2);
             this.headers = headers;
         }

File: core/src/main/java/com/linecorp/armeria/common/HttpResponse.java
Patch:
@@ -39,6 +39,7 @@
 
 import com.linecorp.armeria.common.FixedHttpResponse.OneElementFixedHttpResponse;
 import com.linecorp.armeria.common.FixedHttpResponse.RegularFixedHttpResponse;
+import com.linecorp.armeria.common.FixedHttpResponse.ThreeElementFixedHttpResponse;
 import com.linecorp.armeria.common.FixedHttpResponse.TwoElementFixedHttpResponse;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.stream.HttpDecoder;
@@ -373,7 +374,7 @@ static HttpResponse of(ResponseHeaders headers, HttpData content, HttpHeaders tr
         if (trailers.isEmpty()) {
             return new TwoElementFixedHttpResponse(newHeaders, content);
         } else {
-            return new RegularFixedHttpResponse(newHeaders, content, trailers);
+            return new ThreeElementFixedHttpResponse(newHeaders, content, trailers);
         }
     }
 

File: core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessageDuplicator.java
Patch:
@@ -457,7 +457,8 @@ private void doCleanup(Throwable cause) {
         }
     }
 
-    private static final class ChildStreamMessage<T> implements StreamMessage<T> {
+    @VisibleForTesting
+    static final class ChildStreamMessage<T> implements StreamMessage<T> {
 
         @SuppressWarnings("rawtypes")
         private static final AtomicReferenceFieldUpdater<ChildStreamMessage, DownstreamSubscription>

File: core/src/test/java/com/linecorp/armeria/common/multipart/MultipartDecoderTckTest.java
Patch:
@@ -16,7 +16,6 @@
 package com.linecorp.armeria.common.multipart;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.awaitility.Awaitility.await;
 
 import java.util.stream.LongStream;
 
@@ -88,10 +87,9 @@ public void required_completionFutureMustCompleteOnTermination0() throws Throwab
 
             // TODO(ikhoon): Gerneralize this test suit?
 
-            assertThat(stream.whenComplete()).isNotDone();
+            assertThat(stream.whenComplete()).isDone();
             sub.requestEndOfStream();
 
-            await().untilAsserted(() -> assertThat(stream.whenComplete()).isCompleted());
             assertThat(stream.isOpen()).isFalse();
             assertThat(stream.isEmpty()).isTrue();
             sub.expectNone();

File: core/src/test/java/com/linecorp/armeria/common/stream/SubscriberThrowingExceptionTest.java
Patch:
@@ -114,7 +114,7 @@ void streamMessages(boolean throwExceptionOnOnSubscribe) {
         await().until(() -> data3.refCnt() == 0);
     }
 
-    private void subscribeAndValidate(StreamMessage<?> stream, boolean throwExceptionOnOnSubscribe) {
+    private static void subscribeAndValidate(StreamMessage<?> stream, boolean throwExceptionOnOnSubscribe) {
         final AtomicReference<Throwable> onErrorCaptor = new AtomicReference<>();
         stream.subscribe(new ExceptionThrowingSubscriber(onErrorCaptor, throwExceptionOnOnSubscribe),
                          ImmediateEventExecutor.INSTANCE);

File: grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnsafeUnaryGrpcService.java
Patch:
@@ -30,6 +30,7 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.ResponseHeaders;
+import com.linecorp.armeria.common.ResponseHeadersBuilder;
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageFramer;
@@ -94,7 +95,7 @@ protected final HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req)
                             framed,
                             trailers.build());
                 }).exceptionally(t -> {
-                    final HttpHeadersBuilder trailers = RESPONSE_HEADERS.toBuilder();
+                    final ResponseHeadersBuilder trailers = RESPONSE_HEADERS.toBuilder();
                     if (t instanceof ArmeriaStatusException) {
                         final ArmeriaStatusException statusException = (ArmeriaStatusException) t;
                         GrpcTrailersUtil.addStatusMessageToTrailers(

File: core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java
Patch:
@@ -200,7 +200,7 @@ private void writeFirstHeader(HttpSession session) {
         }
 
         final RequestHeaders merged = mergeRequestHeaders(firstHeaders, ctx.additionalRequestHeaders());
-        logBuilder.requestHeaders(firstHeaders);
+        logBuilder.requestHeaders(merged);
         final ChannelFuture future = encoder.writeHeaders(id, streamId(), merged, request.isEmpty());
         future.addListener(this);
         ch.flush();

File: core/src/test/java/com/linecorp/armeria/server/ServiceRequestCancellationTest.java
Patch:
@@ -83,5 +83,7 @@ void shouldCompleteLogWhenCancelledByClient(SessionProtocol protocol) {
                     .isInstanceOf(CompletionException.class)
                     .hasCauseInstanceOf(ClosedSessionException.class);
         }
+
+        ctxRef.set(null);
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/ServiceNaming.java
Patch:
@@ -54,7 +54,8 @@ static ServiceNaming fullTypeName() {
             if (rpcReq != null) {
                 return rpcReq.serviceName();
             }
-            return ServiceNamingUtil.fullTypeHttpServiceName(ctx.config().service());
+            return ServiceNamingUtil.trimTrailingDollarSigns(
+                    ServiceNamingUtil.fullTypeHttpServiceName(ctx.config().service()));
         };
     }
 

File: core/src/main/java/com/linecorp/armeria/server/logging/LoggingService.java
Patch:
@@ -43,7 +43,6 @@
 import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.SimpleDecoratingHttpService;
-import com.linecorp.armeria.server.TransientServiceOption;
 
 /**
  * Decorates an {@link HttpService} to log {@link HttpRequest}s and {@link HttpResponse}s.
@@ -122,8 +121,7 @@ public static LoggingServiceBuilder builder() {
 
     @Override
     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
-        if (ctx.config().transientServiceOptions().contains(TransientServiceOption.WITH_SERVICE_LOGGING) &&
-            sampler.isSampled(ctx)) {
+        if (sampler.isSampled(ctx)) {
             logWhenComplete(logger, ctx, requestLogger, responseLogger);
         }
         return unwrap().serve(ctx, req);

File: core/src/main/java/com/linecorp/armeria/common/annotation/NonNullByDefault.java
Patch:
@@ -33,6 +33,6 @@
 @Documented
 @Target(ElementType.PACKAGE)
 @Retention(RetentionPolicy.RUNTIME)
-@TypeQualifierDefault({ ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD })
+@TypeQualifierDefault({ ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.TYPE_USE })
 public @interface NonNullByDefault {
 }

File: core/src/test/java/com/linecorp/armeria/common/DefaultHttpHeadersBuilderTest.java
Patch:
@@ -31,7 +31,7 @@ void add() {
                                                .add("a", "b")
                                                .add("c", ImmutableList.of("d", "e"))
                                                .add("f", "g", "h")
-                                               .add(ImmutableMap.of("i", "j").entrySet())
+                                               .add(ImmutableMap.of("i", "j"))
                                                .build();
         assertThat(headers).containsExactly(
                 Maps.immutableEntry(HttpHeaderNames.of("a"), "b"),
@@ -48,11 +48,11 @@ void set() {
                                                .add("a", "b")
                                                .add("c", ImmutableList.of("d", "e"))
                                                .add("f", "g", "h")
-                                               .add(ImmutableMap.of("i", "j").entrySet())
+                                               .add(ImmutableMap.of("i", "j"))
                                                .set("a", "B")
                                                .set("c", ImmutableList.of("D", "E"))
                                                .set("f", "G", "H")
-                                               .set(ImmutableMap.of("i", "J").entrySet())
+                                               .set(ImmutableMap.of("i", "J"))
                                                .build();
         assertThat(headers).containsExactly(
                 Maps.immutableEntry(HttpHeaderNames.of("a"), "B"),

File: core/src/main/java/com/linecorp/armeria/client/DefaultDnsQueryLifecycleObserver.java
Patch:
@@ -24,6 +24,7 @@
 import com.google.common.collect.ImmutableList;
 
 import com.linecorp.armeria.common.metric.MeterIdPrefix;
+import com.linecorp.armeria.internal.common.util.StringUtil;
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Tag;
@@ -138,7 +139,8 @@ public DnsQueryLifecycleObserver queryCNAMEd(DnsQuestion cnameQuestion) {
 
     @Override
     public DnsQueryLifecycleObserver queryNoAnswer(DnsResponseCode code) {
-        final List<Tag> tags = ImmutableList.of(nameTag, Tag.of(CODE_TAG, String.valueOf(code.intValue())));
+        final List<Tag> tags = ImmutableList.of(nameTag,
+                                                Tag.of(CODE_TAG, StringUtil.toString(code.intValue())));
         meterRegistry.counter(meterIdPrefixNoAnswer, tags).increment();
         return this;
     }

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java
Patch:
@@ -28,6 +28,7 @@
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;
+import com.linecorp.armeria.internal.common.util.StringUtil;
 
 /**
  * An {@link RpcClient} decorator that handles failures of an invocation and retries RPC requests.
@@ -163,7 +164,7 @@ private void doExecute0(ClientRequestContext ctx, RpcRequest req,
 
         if (!initialAttempt) {
             derivedCtx.mutateAdditionalRequestHeaders(
-                    mutator -> mutator.add(ARMERIA_RETRY_COUNT, Integer.toString(totalAttempts - 1)));
+                    mutator -> mutator.add(ARMERIA_RETRY_COUNT, StringUtil.toString(totalAttempts - 1)));
         }
 
         final RpcResponse res = executeWithFallback(unwrap(), derivedCtx,

File: core/src/main/java/com/linecorp/armeria/common/HttpStatus.java
Patch:
@@ -20,6 +20,8 @@
 
 import javax.annotation.Nullable;
 
+import com.linecorp.armeria.internal.common.util.StringUtil;
+
 /**
  * HTTP response code and its description.
  */
@@ -431,7 +433,7 @@ public HttpStatus(int statusCode, @Nullable String reasonPhrase) {
         }
 
         code = statusCode;
-        codeAsText = Integer.toString(statusCode);
+        codeAsText = StringUtil.toString(statusCode);
         codeClass = HttpStatusClass.valueOf(statusCode);
         this.reasonPhrase = reasonPhrase;
 

File: core/src/main/java/com/linecorp/armeria/common/StringMultimap.java
Patch:
@@ -53,6 +53,8 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterators;
 
+import com.linecorp.armeria.internal.common.util.StringUtil;
+
 import io.netty.handler.codec.DateFormatter;
 import io.netty.util.AsciiString;
 
@@ -732,7 +734,7 @@ final void setObject(Iterable<? extends Map.Entry<? extends IN_NAME, ?>> entries
     }
 
     final void setInt(IN_NAME name, int value) {
-        set(name, String.valueOf(value));
+        set(name, StringUtil.toString(value));
     }
 
     final void setLong(IN_NAME name, long value) {

File: grpc-protocol/src/main/java/com/linecorp/armeria/internal/common/grpc/protocol/GrpcTrailersUtil.java
Patch:
@@ -26,6 +26,7 @@
 import com.linecorp.armeria.common.HttpHeadersBuilder;
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
 import com.linecorp.armeria.common.grpc.protocol.StatusMessageEscaper;
+import com.linecorp.armeria.internal.common.util.StringUtil;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
@@ -45,7 +46,7 @@ public final class GrpcTrailersUtil {
     public static void addStatusMessageToTrailers(
             HttpHeadersBuilder trailersBuilder, int code, @Nullable String message) {
         trailersBuilder.endOfStream(true);
-        trailersBuilder.add(GrpcHeaderNames.GRPC_STATUS, Integer.toString(code));
+        trailersBuilder.add(GrpcHeaderNames.GRPC_STATUS, StringUtil.toString(code));
         if (message != null) {
             trailersBuilder.add(GrpcHeaderNames.GRPC_MESSAGE, StatusMessageEscaper.escape(message));
         }

File: core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java
Patch:
@@ -52,7 +52,6 @@
 import com.linecorp.armeria.common.util.TextFormatter;
 import com.linecorp.armeria.common.util.UnmodifiableFuture;
 import com.linecorp.armeria.internal.common.util.ChannelUtil;
-import com.linecorp.armeria.internal.common.util.ServiceNamingUtil;
 import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;
 import com.linecorp.armeria.server.ServiceConfig;
 import com.linecorp.armeria.server.ServiceNaming;
@@ -1059,14 +1058,13 @@ private void setNamesIfAbsent() {
                 if (config != null) {
                     newServiceName = ServiceNaming.fullTypeName().serviceName(sctx);
                 } else if (rpcReq != null) {
-                    newServiceName = ServiceNamingUtil.fullTypeRpcServiceName(rpcReq);
+                    newServiceName = rpcReq.serviceName();
                 }
             }
 
             if (newName == null) {
                 if (rpcReq != null) {
                     newName = rpcReq.method();
-                    newName = newName.substring(newName.lastIndexOf('/') + 1);
                 } else {
                     newName = ctx.method().name();
                 }

File: core/src/main/java/com/linecorp/armeria/server/ServiceNaming.java
Patch:
@@ -52,7 +52,7 @@ static ServiceNaming fullTypeName() {
         return ctx -> {
             final RpcRequest rpcReq = ctx.rpcRequest();
             if (rpcReq != null) {
-                return ServiceNamingUtil.fullTypeRpcServiceName(rpcReq);
+                return rpcReq.serviceName();
             }
             return ServiceNamingUtil.fullTypeHttpServiceName(ctx.config().service());
         };

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/ArmeriaServerCallTest.java
Patch:
@@ -95,6 +95,7 @@ void setUp() {
         call = new ArmeriaServerCall<>(
                 HttpRequest.of(HttpMethod.GET, "/"),
                 TestServiceGrpc.getUnaryCallMethod(),
+                TestServiceGrpc.getUnaryCallMethod().getBareMethodName(),
                 CompressorRegistry.getDefaultInstance(),
                 DecompressorRegistry.getDefaultInstance(),
                 res,
@@ -145,6 +146,7 @@ void messageRead_wrappedByteBuf() {
         call = new ArmeriaServerCall<>(
                 HttpRequest.of(HttpMethod.GET, "/"),
                 TestServiceGrpc.getUnaryCallMethod(),
+                TestServiceGrpc.getUnaryCallMethod().getBareMethodName(),
                 CompressorRegistry.getDefaultInstance(),
                 DecompressorRegistry.getDefaultInstance(),
                 res,

File: spring/boot2-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationSecureTest.java
Patch:
@@ -38,8 +38,9 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.spring.ArmeriaSettings;
+import com.linecorp.armeria.spring.actuate.ArmeriaSpringActuatorAutoConfigurationSecureTest.TestConfiguration;
 
-@SpringBootTest(classes = org.springframework.boot.test.context.TestConfiguration.class)
+@SpringBootTest(classes = TestConfiguration.class)
 @ActiveProfiles({ "local", "secureTest" })
 @DirtiesContext
 @AutoConfigureMetrics

File: spring/boot2-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java
Patch:
@@ -251,17 +251,17 @@ void testInvalidMediaType() throws Exception {
     }
 
     @Nested
-    @SpringBootTest(classes = org.springframework.boot.test.context.TestConfiguration.class)
+    @SpringBootTest(classes = ArmeriaSpringActuatorAutoConfigurationCorsTest.TestConfiguration.class)
     @ActiveProfiles({ "local", "autoConfTest", "autoConfTestCors" })
     @DirtiesContext
     @AutoConfigureMetrics
     @EnableAutoConfiguration
     @ImportAutoConfiguration(ArmeriaSpringActuatorAutoConfiguration.class)
     @Timeout(10)
-    class ArmeriaSpringActuatorAutoConfigurationCorsTest {
+    static class ArmeriaSpringActuatorAutoConfigurationCorsTest {
 
         @SpringBootApplication
-        class TestConfiguration {}
+        static class TestConfiguration {}
 
         @Inject
         private Server server;

File: spring/boot2-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/PrometheusMetricExposureTest.java
Patch:
@@ -36,8 +36,9 @@
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.server.Server;
+import com.linecorp.armeria.spring.actuate.PrometheusMetricExposureTest.TestConfiguration;
 
-@SpringBootTest(classes = org.springframework.boot.test.context.TestConfiguration.class)
+@SpringBootTest(classes = TestConfiguration.class)
 @ActiveProfiles({ "local", "managedMetricPath" })
 @DirtiesContext
 @AutoConfigureMetrics
@@ -46,7 +47,7 @@
 class PrometheusMetricExposureTest {
 
     @SpringBootApplication
-    class TestConfiguration {}
+    static class TestConfiguration {}
 
     @Inject
     private Server server;

File: spring/boot2-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationDisabledTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.springframework.test.context.junit4.SpringRunner;
 
 import com.linecorp.armeria.server.Server;
-import com.linecorp.armeria.spring.ArmeriaAutoConfigurationWithConsumerTest.TestConfiguration;
+import com.linecorp.armeria.spring.ArmeriaAutoConfigurationDisabledTest.TestConfiguration;
 
 /**
  * This test {@link ArmeriaAutoConfiguration} could be disabled.

File: spring/boot2-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaGracefulShutdownConfigurationTest.java
Patch:
@@ -32,7 +32,7 @@
 import org.springframework.test.context.junit4.SpringRunner;
 
 import com.linecorp.armeria.server.Server;
-import com.linecorp.armeria.spring.ArmeriaAutoConfigurationTest.TestConfiguration;
+import com.linecorp.armeria.spring.ArmeriaGracefulShutdownConfigurationTest.TestConfiguration;
 
 /**
  * This uses {@link ArmeriaAutoConfiguration} for integration tests.

File: spring/boot2-autoconfigure/src/test/java/com/linecorp/armeria/spring/LocalArmeriaPortHttpsTest.java
Patch:
@@ -37,7 +37,7 @@
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.internal.testing.MockAddressResolverGroup;
 import com.linecorp.armeria.server.Server;
-import com.linecorp.armeria.spring.LocalArmeriaPortTest.TestConfiguration;
+import com.linecorp.armeria.spring.LocalArmeriaPortHttpsTest.TestConfiguration;
 
 /**
  * Tests for {@link LocalArmeriaPort} when https.

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryRuleWithContentBuilder.java
Patch:
@@ -83,7 +83,8 @@ RetryRuleWithContent<T> build(RetryDecision decision) {
                 ? extends CompletionStage<Boolean>> responseFilter = responseFilter();
         final boolean hasResponseFilter = responseFilter != null;
         if (decision != RetryDecision.noRetry() && exceptionFilter() == null &&
-            responseHeadersFilter() == null && !hasResponseFilter) {
+            responseHeadersFilter() == null && responseTrailersFilter() == null &&
+            !hasResponseFilter) {
             throw new IllegalStateException("Should set at least one retry rule if a backoff was set.");
         }
 

File: core/src/test/java/com/linecorp/armeria/internal/common/KeepAliveHandlerTest.java
Patch:
@@ -117,7 +117,7 @@ protected boolean hasRequestsInProgress(ChannelHandlerContext ctx) {
 
         idleTimeoutScheduler.initialize(ctx);
         await().timeout(20, TimeUnit.SECONDS).untilAtomic(counter, Matchers.is(10));
-        assertMeter(CONNECTION_LIFETIME + "#total", 1, withinPercentage(15));
+        assertMeter(CONNECTION_LIFETIME + "#total", 1, withinPercentage(25));
         idleTimeoutScheduler.destroy();
     }
 

File: core/src/test/java/com/linecorp/armeria/server/HttpServerRequestTimeoutTest.java
Patch:
@@ -60,13 +60,13 @@ class HttpServerRequestTimeoutTest {
     static ServerExtension server = new ServerExtension() {
         @Override
         protected void configure(ServerBuilder sb) throws Exception {
-            sb.requestTimeoutMillis(400)
+            sb.requestTimeoutMillis(600)
               .accessLogWriter(accessLog::set, false)
               .service("/extend-timeout-from-now", (ctx, req) -> {
                   final Flux<Long> publisher =
                           Flux.interval(Duration.ofMillis(200))
                               .doOnNext(i -> ctx.setRequestTimeout(TimeoutMode.SET_FROM_NOW,
-                                                                   Duration.ofMillis(300)));
+                                                                   Duration.ofMillis(500)));
                   return JsonTextSequences.fromPublisher(publisher.take(5));
               })
               .service("/extend-timeout-from-start", (ctx, req) -> {

File: examples/server-sent-events/src/main/java/example/armeria/server/sse/Main.java
Patch:
@@ -52,6 +52,7 @@ static Server newServer(int httpPort, int httpsPort, Duration sendingInterval, l
                          ctx.clearRequestTimeout();
                          return ServerSentEvents.fromPublisher(
                                  Flux.interval(sendingInterval)
+                                     .onBackpressureDrop()
                                      .take(eventCount)
                                      .map(unused -> ServerSentEvent.ofData(randomStringSupplier.get())));
                      })
@@ -63,6 +64,7 @@ public Publisher<ServerSentEvent> sendEvents() {
                              // The event stream will be closed after
                              // the request timed out (10 seconds by default).
                              return Flux.interval(sendingInterval)
+                                        .onBackpressureDrop()
                                         .take(eventCount)
                                         // A user can use a builder to build a Server-Sent Event.
                                         .map(id -> ServerSentEvent.builder()

File: examples/server-sent-events/src/test/java/example/armeria/server/sse/MainTest.java
Patch:
@@ -35,11 +35,10 @@ class MainTest {
     private static Server server;
     private static WebClient client;
 
-    static final AtomicLong sequence = new AtomicLong();
+    private static final AtomicLong sequence = new AtomicLong();
 
     @BeforeAll
     static void beforeClass() throws Exception {
-
         // The server emits only 5 events here because this test is to show how the events are encoded.
         server = Main.newServer(0, 0,
                                 Duration.ofMillis(200), 5, () -> Long.toString(sequence.getAndIncrement()));

File: thrift0.13/src/test/java/com/linecorp/armeria/it/server/GracefulShutdownIntegrationTest.java
Patch:
@@ -181,7 +181,8 @@ void waitsForRequestToComplete() throws Exception {
         assertThat(completed.get()).isTrue();
 
         // Should take 500 more milliseconds than the baseline.
-        assertThat(stopTime - startTime).isBetween(baselineNanos, baselineNanos + MILLISECONDS.toNanos(900));
+        assertThat(stopTime - startTime).isBetween(baselineNanos - MILLISECONDS.toNanos(100),
+                                                   baselineNanos + MILLISECONDS.toNanos(900));
     }
 
     @Test
@@ -218,7 +219,7 @@ void interruptsSlowRequests() throws Exception {
         // Should take 1 more second than the baseline, because the long sleep will trigger shutdown timeout.
         final long stopTime = System.nanoTime();
         assertThat(stopTime - startTime).isBetween(baselineNanos + MILLISECONDS.toNanos(600),
-                                                   baselineNanos + MILLISECONDS.toNanos(1400));
+                                                   baselineNanos + MILLISECONDS.toNanos(1800));
     }
 
     @Test

File: zookeeper3/src/test/java/com/linecorp/armeria/server/zookeeper/CuratorServiceExternalClientUsageTest.java
Patch:
@@ -68,5 +68,6 @@ void updatingListenerWithExternalClient() {
         await().untilAsserted(() -> zkInstance.assertExists(Z_NODE + "/foo/bar"));
         server.stop().join();
         client.close();
+        await().untilAsserted(() -> zkInstance.assertNotExists(Z_NODE + "/foo/bar"));
     }
 }

File: thrift0.13/src/test/java/com/linecorp/armeria/it/server/GracefulShutdownIntegrationTest.java
Patch:
@@ -181,8 +181,7 @@ void waitsForRequestToComplete() throws Exception {
         assertThat(completed.get()).isTrue();
 
         // Should take 500 more milliseconds than the baseline.
-        assertThat(stopTime - startTime).isBetween(baselineNanos + MILLISECONDS.toNanos(100),
-                                                   baselineNanos + MILLISECONDS.toNanos(900));
+        assertThat(stopTime - startTime).isBetween(baselineNanos, baselineNanos + MILLISECONDS.toNanos(900));
     }
 
     @Test

File: core/src/main/java/com/linecorp/armeria/client/DefaultDnsQueryLifecycleObserver.java
Patch:
@@ -113,7 +113,7 @@ public void queryCancelled(int queriesRemaining) {
     @Override
     public DnsQueryLifecycleObserver queryRedirected(List<InetSocketAddress> nameServers) {
         final String servers = nameServers.stream()
-                                          .map(addr -> getHostAddress(addr))
+                                          .map(DefaultDnsQueryLifecycleObserver::getHostAddress)
                                           .collect(Collectors.joining(","));
         final List<Tag> tags = ImmutableList.of(nameTag, Tag.of(SERVERS_TAG, servers));
         meterRegistry.counter(meterIdPrefixRedirected, tags).increment();

File: core/src/test/java/com/linecorp/armeria/client/ClientMaxConnectionAgeTest.java
Patch:
@@ -105,7 +105,7 @@ void maxConnectionAge(SessionProtocol protocol) {
         while (closed.get() < maxClosedConnection) {
             assertThat(client.get("/").aggregate().join().status()).isEqualTo(OK);
             final int closed = this.closed.get();
-            await().timeout(Duration.ofMillis(500)).untilAsserted(() -> {
+            await().timeout(Duration.ofSeconds(2)).untilAsserted(() -> {
                 assertThat(opened).hasValueBetween(closed, closed + 1);
             });
         }

File: core/src/test/java/com/linecorp/armeria/client/RefreshingAddressResolverTest.java
Patch:
@@ -329,7 +329,8 @@ void returnDnsQuestionsWhenAllQueryTimeout() throws Exception {
                 final Future<InetSocketAddress> future = resolver.resolve(
                         InetSocketAddress.createUnresolved("foo.com", 36462));
                 await().until(future::isDone);
-                assertThat(future.cause()).isInstanceOf(DnsTimeoutException.class);
+                assertThat(Throwables.getRootCause(future.cause()))
+                        .isInstanceOfAny(DnsTimeoutException.class, DnsNameResolverTimeoutException.class);
             }
         }
     }

File: core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java
Patch:
@@ -452,9 +452,9 @@ public void run(Throwable cause) {
                 // This method will be invoked only when `canSchedule()` returns true.
                 assert state != State.DONE;
 
-                if (cause instanceof ClosedStreamException || cause instanceof ClosedSessionException) {
+                if (cause instanceof ClosedStreamException) {
                     // A stream or connection was already closed by a client
-                    setDone(true);
+                    fail(cause);
                 } else {
                     failAndRespond(cause, convertException(cause), Http2Error.INTERNAL_ERROR, true);
                 }

File: core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java
Patch:
@@ -1038,7 +1038,7 @@ private void setNamesIfAbsent() {
 
             // Set the default names from ServiceConfig
             if (ctx instanceof ServiceRequestContext) {
-                sctx = ((ServiceRequestContext) ctx);
+                sctx = (ServiceRequestContext) ctx;
                 config = sctx.config();
                 newServiceName = config.defaultServiceNaming().serviceName(sctx);
                 newName = config.defaultLogName();

File: core/src/main/java/com/linecorp/armeria/server/ServiceConfigBuilder.java
Patch:
@@ -117,13 +117,13 @@ public ServiceConfigBuilder defaultLogName(String defaultLogName) {
     public ServiceConfigBuilder defaultServiceName(String defaultServiceName) {
         requireNonNull(defaultServiceName, "defaultServiceName");
         this.defaultServiceName = defaultServiceName;
-        this.defaultServiceNaming = ServiceNaming.of(defaultServiceName);
+        defaultServiceNaming = ServiceNaming.of(defaultServiceName);
         return this;
     }
 
     @Override
     public ServiceConfigBuilder defaultServiceNaming(ServiceNaming defaultServiceNaming) {
-        this.defaultServiceName = null;
+        defaultServiceName = null;
         this.defaultServiceNaming = requireNonNull(defaultServiceNaming, "defaultServiceNaming");
         return this;
     }

File: core/src/main/java/com/linecorp/armeria/server/Http2RequestDecoder.java
Patch:
@@ -312,8 +312,9 @@ public void onRstStreamRead(ChannelHandlerContext ctx, int streamId, long errorC
                                   "received a RST_STREAM frame for an unknown stream: %d", streamId);
         }
 
-        req.abortResponse(new ClosedStreamException(
-                "received a RST_STREAM frame: " + Http2Error.valueOf(errorCode)));
+        final ClosedStreamException cause =
+                new ClosedStreamException("received a RST_STREAM frame: " + Http2Error.valueOf(errorCode));
+        req.abortResponse(cause, /* cancel */ true);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -233,9 +233,10 @@ private void cleanup() {
         if (!unfinishedRequests.isEmpty()) {
             final ClosedSessionException cause = ClosedSessionException.get();
             unfinishedRequests.forEach((req, res) -> {
+                // An HTTP2 request is cancelled by Http2RequestDecoder.onRstStreamRead()
+                final boolean cancel = !protocol.isMultiplex();
                 // Mark the request stream as closed due to disconnection.
-                req.close(cause);
-                res.abort(cause);
+                req.abortResponse(cause, cancel);
             });
         }
     }

File: core/src/test/java/com/linecorp/armeria/common/stream/StreamMessageVerification.java
Patch:
@@ -43,7 +43,7 @@ public abstract class StreamMessageVerification<T> extends PublisherVerification
     private final TestEnvironment env;
 
     protected StreamMessageVerification() {
-        this(new TestEnvironment(1000, 200));
+        this(new TestEnvironment(5000, 1000));
     }
 
     protected StreamMessageVerification(TestEnvironment env) {

File: core/src/test/java/com/linecorp/armeria/server/HttpServerRequestTimeoutTest.java
Patch:
@@ -127,9 +127,9 @@ protected void configure(ServerBuilder sb) throws Exception {
             sb.requestTimeoutMillis(0)
               .service("/extend-timeout-from-now", (ctx, req) -> {
                   final Flux<Long> publisher =
-                          Flux.interval(Duration.ofMillis(100))
+                          Flux.interval(Duration.ofMillis(200))
                               .doOnNext(i -> ctx.setRequestTimeout(TimeoutMode.SET_FROM_NOW,
-                                                                   Duration.ofMillis(150)));
+                                                                   Duration.ofMillis(500)));
                   return JsonTextSequences.fromPublisher(publisher.take(5));
               })
               .service("/timeout-now", (ctx, req) -> {

File: core/src/main/java/com/linecorp/armeria/server/annotation/JacksonRequestConverterFunction.java
Patch:
@@ -40,6 +40,7 @@
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.RequestHeaders;
+import com.linecorp.armeria.internal.server.JacksonUtil;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 import io.netty.util.AsciiString;
@@ -54,7 +55,7 @@
  */
 public final class JacksonRequestConverterFunction implements RequestConverterFunction {
 
-    private static final ObjectMapper defaultObjectMapper = new ObjectMapper();
+    private static final ObjectMapper defaultObjectMapper = JacksonUtil.newDefaultObjectMapper();
     private static final Map<Class<?>, Boolean> skippableTypes;
 
     static {

File: core/src/main/java/com/linecorp/armeria/server/annotation/JacksonResponseConverterFunction.java
Patch:
@@ -35,6 +35,7 @@
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.util.Exceptions;
+import com.linecorp.armeria.internal.server.JacksonUtil;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.streaming.JsonTextSequences;
 
@@ -50,7 +51,7 @@
  */
 public final class JacksonResponseConverterFunction implements ResponseConverterFunction {
 
-    private static final ObjectMapper defaultObjectMapper = new ObjectMapper();
+    private static final ObjectMapper defaultObjectMapper = JacksonUtil.newDefaultObjectMapper();
 
     private final ObjectMapper mapper;
 

File: core/src/main/java/com/linecorp/armeria/server/streaming/JsonTextSequences.java
Patch:
@@ -40,6 +40,7 @@
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.util.Exceptions;
+import com.linecorp.armeria.internal.server.JacksonUtil;
 
 /**
  * A utility class which helps to create a <a href="https://datatracker.ietf.org/doc/rfc7464/">JavaScript Object
@@ -88,7 +89,7 @@ public final class JsonTextSequences {
     /**
      * A default {@link ObjectMapper} which converts the objects into JSON Text Sequences.
      */
-    private static final ObjectMapper defaultMapper = new ObjectMapper();
+    private static final ObjectMapper defaultMapper = JacksonUtil.newDefaultObjectMapper();
 
     /**
      * A default {@link ResponseHeaders} of JSON Text Sequences.

File: core/src/main/java/com/linecorp/armeria/server/logging/AccessLogComponent.java
Patch:
@@ -17,6 +17,7 @@
 
 import static com.google.common.base.MoreObjects.firstNonNull;
 import static com.google.common.base.Preconditions.checkArgument;
+import static com.linecorp.armeria.internal.common.util.ServiceNamingUtil.GRPC_SERVICE_NAME;
 import static java.util.Objects.requireNonNull;
 import static org.reflections.ReflectionUtils.getFields;
 
@@ -297,8 +298,7 @@ public Object getMessage0(RequestLog log) {
                     final String name = log.name();
                     final RpcRequest rpcRequest = log.context().rpcRequest();
                     final boolean isGrpc = rpcRequest != null &&
-                                           "com.linecorp.armeria.internal.common.grpc.GrpcLogUtil".equals(
-                                                   rpcRequest.serviceType().getName());
+                                           GRPC_SERVICE_NAME.equals(rpcRequest.serviceType().getName());
 
                     final String logName;
                     if (name != null && !isGrpc) {

File: core/src/test/java/com/linecorp/armeria/server/ServiceTest.java
Patch:
@@ -51,8 +51,9 @@ private static void assertDecoration(FooService inner, HttpService outer) throws
         assertThat(outer.as(String.class)).isNull();
 
         // Test if FooService.serviceAdded() is invoked.
-        final ServiceConfig cfg = new ServiceConfig(Route.ofCatchAll(), outer, /* defaultServiceName */ null,
-                                                    /* defaultLogName */ null, 1, 1, true,
+        final ServiceConfig cfg = new ServiceConfig(Route.ofCatchAll(), outer, /* defaultLogName */ null,
+                                                    /* defaultServiceName */ null,
+                                                    ServiceNaming.of("FooService"), 1, 1, true,
                                                     AccessLogWriter.disabled(), false);
         outer.serviceAdded(cfg);
         assertThat(inner.cfg).isSameAs(cfg);

File: bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/TokenBucketThrottlingStrategy.java
Patch:
@@ -33,6 +33,7 @@
 import io.github.bucket4j.AsyncBucket;
 import io.github.bucket4j.Bucket4j;
 import io.github.bucket4j.ConfigurationBuilder;
+import io.github.bucket4j.TokensInheritanceStrategy;
 import io.github.bucket4j.local.LocalBucketBuilder;
 
 /**
@@ -103,7 +104,8 @@ public CompletableFuture<Void> reconfigure(TokenBucket tokenBucket) {
             builder.addLimit(limit.bandwidth());
         }
         // reconfigure the bucket
-        return asyncBucket.replaceConfiguration(builder.build())
+        return asyncBucket.replaceConfiguration(builder.build(),
+                                                TokensInheritanceStrategy.PROPORTIONALLY)
                           .thenRun(() -> quota = sendQuota ? tokenBucket.toSpecString() : null);
     }
 

File: zookeeper3/src/test/java/com/linecorp/armeria/server/zookeeper/ZooKeeperRegistrationTest.java
Patch:
@@ -159,7 +159,9 @@ void curatorRegistrationSpec() throws Throwable {
                 discoverySpec.decode(zk.getData(Z_NODE + '/' + CURATOR_X_SERVICE_NAME + '/' + i).get());
                 final ServiceInstance<?> actual = instanceCaptor.join();
                 final ServiceInstance<Object> expected = expectedInstance(servers, i);
-                assertThat(actual).isEqualToIgnoringGivenFields(expected, "registrationTimeUTC");
+                assertThat(actual).usingRecursiveComparison()
+                                  .ignoringFields("registrationTimeUTC")
+                                  .isEqualTo(expected);
             }
             validateOneNodeRemoved(servers, zk, false);
         }

File: thrift0.13/src/test/java/com/linecorp/armeria/server/thrift/ThriftServiceTest.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.thrift.protocol.TProtocol;
 import org.apache.thrift.transport.TMemoryBuffer;
 import org.apache.thrift.transport.TMemoryInputTransport;
+import org.apache.thrift.transport.TTransportException;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.RegisterExtension;
@@ -113,7 +114,7 @@ class ThriftServiceTest {
     private CompletableFuture<HttpData> promise2;
 
     @BeforeEach
-    void before() {
+    void before() throws TTransportException {
         in = new TMemoryInputTransport();
         out = new TMemoryBuffer(128);
 

File: core/src/test/java/com/linecorp/armeria/server/HttpServerAutoRedirectTest.java
Patch:
@@ -61,9 +61,6 @@ protected void configure(ServerBuilder sb) throws Exception {
             // returning `202 Accepted`.
             sb.service("/f/", service);
             sb.routeDecorator().pathPrefix("/f/").build((delegate, ctx, req) -> HttpResponse.of(202));
-
-            // This should never be invoked in this test.
-            sb.serviceUnder("/", service);
         }
     };
 

File: core/src/test/java/com/linecorp/armeria/server/RoutingTrieTest.java
Patch:
@@ -32,6 +32,7 @@
 import com.google.common.collect.ImmutableList;
 
 import com.linecorp.armeria.server.RoutingTrie.Node;
+import com.linecorp.armeria.server.RoutingTrie.NodeProcessor;
 
 class RoutingTrieTest {
 
@@ -238,7 +239,7 @@ private static Node<?> testNodeWithFindParentNode(RoutingTrie<?> trie,
         final Node<?> found = trie.findNode(targetPath);
         assertThat(found).isNotNull();
         assertThat(found.parent()).isNotNull();
-        assertThat(found.parent()).isSameAs(trie.findNode(parentPath, true));
+        assertThat(found.parent()).isSameAs(trie.findNode(parentPath, true, NodeProcessor.noop()));
         testValues(found, values);
         return found;
     }
@@ -248,7 +249,7 @@ private static Node<?> testIntermNode(RoutingTrie<?> trie, String targetPath, St
         assertThat(found).isNotNull();
         assertThat(found.values).isEmpty();
         assertThat(found.parent()).isNotNull();
-        assertThat(found.parent()).isSameAs(trie.findNode(parentPath, true));
+        assertThat(found.parent()).isSameAs(trie.findNode(parentPath, true, NodeProcessor.noop()));
         return found;
     }
 

File: core/src/main/java/com/linecorp/armeria/common/CookieUtil.java
Patch:
@@ -251,7 +251,6 @@ static CookieBuilder initCookie(Logger logger, boolean strict,
     }
 
     // The methods newly added in the fork.
-
     static Cookies fromSetCookieHeaders(ImmutableSet.Builder<Cookie> builder,
                                         boolean strict, Iterator<String> it) {
         assert it.hasNext();

File: consul/src/main/java/com/linecorp/armeria/client/consul/ConsulEndpointGroupBuilder.java
Patch:
@@ -32,7 +32,7 @@
 
 /**
  * A builder class for {@link ConsulEndpointGroup}.
- * <h3>Examples</h3>
+ * <h2>Examples</h2>
  * <pre>{@code
  * ConsulEndpointGroup endpointGroup = ConsulEndpointGroup.builder(consulUri, "myService")
  *                                                        .build();

File: consul/src/main/java/com/linecorp/armeria/server/consul/ConsulUpdatingListenerBuilder.java
Patch:
@@ -35,7 +35,7 @@
 
 /**
  * Builds a new {@link ConsulUpdatingListener}, which registers the server to Consul cluster.
- * <h3>Examples</h3>
+ * <h2>Examples</h2>
  * <pre>{@code
  * ConsulUpdatingListener listener = ConsulUpdatingListener.builder(consulUri, "myService")
  *                                                         .build();

File: core/src/main/java/com/linecorp/armeria/common/ContentDispositionBuilder.java
Patch:
@@ -86,7 +86,7 @@ public ContentDispositionBuilder filename(String filename) {
      * Only the US-ASCII, UTF-8 and ISO-8859-1 charsets are supported.
      *
      * <p><strong>Note:</strong> Do not use this for a {@code "multipart/form-data"} requests as per
-     * <a link="https://datatracker.ietf.org/doc/html/rfc7578#section-4.2">RFC 7578, Section 4.2</a>
+     * <a href="https://datatracker.ietf.org/doc/html/rfc7578#section-4.2">RFC 7578, Section 4.2</a>
      * and also RFC 5987 itself mentions it does not apply to multipart requests.
      */
     public ContentDispositionBuilder filename(String filename, @Nullable Charset charset) {

File: core/src/main/java/com/linecorp/armeria/common/RequestHeaderGetters.java
Patch:
@@ -87,8 +87,8 @@ interface RequestHeaderGetters extends HttpHeaderGetters {
      * algorithm described in
      * <a href="https://datatracker.ietf.org/doc/html/rfc2616#section-14.4">RFC2616 Accept-Language (obsoleted)</a>
      * and also referenced in <a href="https://datatracker.ietf.org/doc/html/rfc7231#section-5.3.5">RFC7231 Accept-Language</a>.
-     * <p/>
      * See also {@link Locale#lookup} for another algorithm.
+     *
      * @param supportedLocales a {@link Iterable} of {@link Locale}s supported by the server.
      * @return The best matching {@link Locale} or {@code null} if no locale matches.
      */
@@ -103,8 +103,8 @@ interface RequestHeaderGetters extends HttpHeaderGetters {
      * algorithm described in
      * <a href="https://datatracker.ietf.org/doc/html/rfc2616#section-14.4">RFC2616 Accept-Language (obsoleted)</a>
      * and also referenced in <a href="https://datatracker.ietf.org/doc/html/rfc7231#section-5.3.5">RFC7231 Accept-Language</a>.
-     * <p/>
      * See also {@link Locale#lookup} for another algorithm.
+     *
      * @param supportedLocales {@link Locale}s supported by the server.
      * @return The best matching {@link Locale} or {@code null} if no locale matches.
      */

File: protobuf/src/main/java/com/linecorp/armeria/server/protobuf/ProtobufRequestConverterFunction.java
Patch:
@@ -63,7 +63,7 @@
  * The {@link Parser} for JSON is applied only when the {@code content-type} of
  * the {@link RequestHeaders} is either {@link MediaType#JSON} or ends with {@code +json}.
  *
- * <h3>Conversion of multiple Protobuf messages</h3>
+ * <h2>Conversion of multiple Protobuf messages</h2>
  * A sequence of Protocol Buffer messages can not be handled by this {@link RequestConverterFunction},
  * because Protocol Buffers wire format is not self-delimiting.
  * See

File: protobuf/src/main/java/com/linecorp/armeria/server/protobuf/ProtobufResponseConverterFunction.java
Patch:
@@ -61,7 +61,7 @@
  * <a href="https://developers.google.com/protocol-buffers/docs/encoding">Protocol Buffers</a> or
  * <a href="https://developers.google.com/protocol-buffers/docs/proto3#json">JSON</a> format.
  *
- * <h3>Conversion of multiple Protobuf messages</h3>
+ * <h2>Conversion of multiple Protobuf messages</h2>
  * A sequence of Protocol Buffer messages can not be handled by this {@link ResponseConverterFunction},
  * because Protocol Buffers wire format is not self-delimiting.
  * See

File: resteasy/src/main/java/com/linecorp/armeria/client/resteasy/ArmeriaResteasyClientBuilder.java
Patch:
@@ -66,12 +66,12 @@
  * {@link ResteasyClient} could still be constructed using ArmeriaJaxrsClientEngine directly by setting it
  * to {@link ResteasyClientBuilder} via {@link ResteasyClientBuilder#httpEngine(ClientHttpEngine)} method
  * as below.
+ * </p>
  * <pre>{@code
  *     final Client jaxrsClient = ((ResteasyClientBuilder) ClientBuilder.newBuilder())
  *             .httpEngine(new ArmeriaJaxrsClientEngine(armeriaWebClient))
  *             .build();
  * }</pre>
- * </p>
  */
 public final class ArmeriaResteasyClientBuilder extends ResteasyClientBuilder {
 

File: spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/HealthCheckServiceConfigurator.java
Patch:
@@ -24,7 +24,7 @@
 import com.linecorp.armeria.server.healthcheck.HealthCheckServiceBuilder;
 
 /**
- * Interface used to configure a {@link HealthCheckService} on the default armeria server.
+ * Interface used to configure a {@code HealthCheckService} on the default Armeria server.
  */
 @FunctionalInterface
 public interface HealthCheckServiceConfigurator extends Ordered {

File: grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnaryGrpcService.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.server.grpc.protocol;
 
-import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletionStage;
 
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.server.ServiceRequestContext;
@@ -40,10 +40,10 @@ public abstract class AbstractUnaryGrpcService extends AbstractUnsafeUnaryGrpcSe
      * expected that the implementation has the logic to know how to parse the request and serialize a response
      * into {@code byte[]}. The returned {@code byte[]} will be framed and returned to the client.
      */
-    protected abstract CompletableFuture<byte[]> handleMessage(ServiceRequestContext ctx, byte[] message);
+    protected abstract CompletionStage<byte[]> handleMessage(ServiceRequestContext ctx, byte[] message);
 
     @Override
-    protected final CompletableFuture<ByteBuf> handleMessage(ServiceRequestContext ctx, ByteBuf message) {
+    protected final CompletionStage<ByteBuf> handleMessage(ServiceRequestContext ctx, ByteBuf message) {
         final byte[] bytes;
         try {
             bytes = ByteBufUtil.getBytes(message);

File: grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnsafeUnaryGrpcService.java
Patch:
@@ -17,6 +17,7 @@
 package com.linecorp.armeria.server.grpc.protocol;
 
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletionStage;
 
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
@@ -68,7 +69,7 @@ public abstract class AbstractUnsafeUnaryGrpcService extends AbstractHttpService
      * expected that the implementation has the logic to know how to parse the request and serialize a response
      * into {@link ByteBuf}. The returned {@link ByteBuf} will be framed and returned to the client.
      */
-    protected abstract CompletableFuture<ByteBuf> handleMessage(ServiceRequestContext ctx, ByteBuf message);
+    protected abstract CompletionStage<ByteBuf> handleMessage(ServiceRequestContext ctx, ByteBuf message);
 
     @Override
     protected final HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req) {

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnaryGrpcServiceTest.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.io.UncheckedIOException;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletionStage;
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.RegisterExtension;
@@ -53,7 +54,7 @@ class AbstractUnaryGrpcServiceTest {
     private static class TestService extends AbstractUnaryGrpcService {
 
         @Override
-        protected CompletableFuture<byte[]> handleMessage(ServiceRequestContext ctx, byte[] message) {
+        protected CompletionStage<byte[]> handleMessage(ServiceRequestContext ctx, byte[] message) {
             assertThat(ServiceRequestContext.currentOrNull()).isSameAs(ctx);
 
             final SimpleRequest request;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/StickyEndpointSelectionStrategy.java
Patch:
@@ -30,7 +30,7 @@
  * An {@link EndpointSelector} strategy which implements sticky load-balancing using
  * user passed {@link ToLongFunction} to compute hashes for consistent hashing.
  *
- * <p>This strategy can be useful when all requests that qualify some given criterias must be sent to the same
+ * <p>This strategy can be useful when all requests that qualify some given criteria must be sent to the same
  * backend server. A common use case is to send all requests for the same logged-in user to the same backend,
  * which could have a local cache keyed by user id.
  *

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsEndpointGroupBuilder.java
Patch:
@@ -168,7 +168,7 @@ public DnsEndpointGroupBuilder backoff(Backoff backoff) {
     }
 
     /**
-     * Sets the {@link EndpointSelectionStrategy} that deteremines the enumeration order of {@link Endpoint}s.
+     * Sets the {@link EndpointSelectionStrategy} that determines the enumeration order of {@link Endpoint}s.
      */
     public DnsEndpointGroupBuilder selectionStrategy(EndpointSelectionStrategy selectionStrategy) {
         this.selectionStrategy = requireNonNull(selectionStrategy, "selectionStrategy");

File: core/src/main/java/com/linecorp/armeria/common/ClientCacheControl.java
Patch:
@@ -127,7 +127,7 @@ public static ClientCacheControl parse(Iterable<String> directives) {
     }
 
     /**
-     * Returns a newly created {@link ClientCacheControlBuilder} with all directived disabled initially.
+     * Returns a newly created {@link ClientCacheControlBuilder} with all directives disabled initially.
      */
     public static ClientCacheControlBuilder builder() {
         return new ClientCacheControlBuilder();

File: core/src/main/java/com/linecorp/armeria/common/logging/ContentPreviewerFactoryBuilder.java
Patch:
@@ -44,7 +44,7 @@
  */
 public final class ContentPreviewerFactoryBuilder {
 
-    // TODO(minwoox): Add setters for the seprate request and response previewer.
+    // TODO(minwoox): Add setters for the separate request and response previewer.
 
     private static final int DEFAULT_MAX_LENGTH = 32;
 

File: core/src/main/java/com/linecorp/armeria/server/ParameterizedPathMapping.java
Patch:
@@ -53,7 +53,7 @@ final class ParameterizedPathMapping extends AbstractPathMapping {
      */
     private final String pathPattern;
 
-    private final String nomalizedPathPattern;
+    private final String normalizedPathPattern;
 
     /**
      * Regex form of given path, which will be used for matching or extracting.
@@ -134,7 +134,7 @@ final class ParameterizedPathMapping extends AbstractPathMapping {
 
         this.pathPattern = pathPattern;
         pattern = Pattern.compile(patternJoiner.toString());
-        nomalizedPathPattern = normalizedPatternJoiner.toString();
+        normalizedPathPattern = normalizedPatternJoiner.toString();
         skeleton = skeletonJoiner.toString();
         paths = ImmutableList.of(skeleton, skeleton);
         paramNameArray = paramNames.toArray(EMPTY_NAMES);
@@ -177,7 +177,7 @@ public Set<String> paramNames() {
 
     @Override
     public String patternString() {
-        return nomalizedPathPattern;
+        return normalizedPathPattern;
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java
Patch:
@@ -589,7 +589,7 @@ public ServerBuilder http2MaxStreamsPerConnection(long http2MaxStreamsPerConnect
     public ServerBuilder http2MaxFrameSize(int http2MaxFrameSize) {
         checkArgument(http2MaxFrameSize >= MAX_FRAME_SIZE_LOWER_BOUND &&
                       http2MaxFrameSize <= MAX_FRAME_SIZE_UPPER_BOUND,
-                      "http2MaxFramSize: %s (expected: >= %s and <= %s)",
+                      "http2MaxFrameSize: %s (expected: >= %s and <= %s)",
                       http2MaxFrameSize, MAX_FRAME_SIZE_LOWER_BOUND, MAX_FRAME_SIZE_UPPER_BOUND);
         this.http2MaxFrameSize = http2MaxFrameSize;
         return this;

File: core/src/test/java/com/linecorp/armeria/client/IgnoreHostsTrustManagerTest.java
Patch:
@@ -278,7 +278,7 @@ public void checkServerTrusted(X509Certificate[] x509Certificates, String authTy
         }
 
         @Override
-        public void checkServerTrusted(X509Certificate[] x509Certificates, String autyType) {
+        public void checkServerTrusted(X509Certificate[] x509Certificates, String authType) {
             throw new UnsupportedOperationException();
         }
 

File: core/src/test/java/com/linecorp/armeria/client/proxy/ProxyConfigTest.java
Patch:
@@ -58,7 +58,7 @@ void testUnresolvedProxyAddress() {
     }
 
     @Test
-    void testNullProxyAddresss() {
+    void testNullProxyAddress() {
         assertThatThrownBy(() -> ProxyConfig.socks4(null)).isInstanceOf(NullPointerException.class);
         assertThatThrownBy(() -> ProxyConfig.socks5(null)).isInstanceOf(NullPointerException.class);
         assertThatThrownBy(() -> ProxyConfig.connect(null)).isInstanceOf(NullPointerException.class);

File: core/src/test/java/com/linecorp/armeria/internal/common/ContextAwareFutureTest.java
Patch:
@@ -47,7 +47,7 @@
 
 class ContextAwareFutureTest {
 
-    // TODO(minwoox) Make an extesion which a user can easily check the logs.
+    // TODO(minwoox) Make an extension which a user can easily check the logs.
     @Mock
     private Appender<ILoggingEvent> appender;
     @Captor

File: core/src/test/java9/com/linecorp/armeria/internal/common/Java9ContextAwareFutureTest.java
Patch:
@@ -60,7 +60,7 @@
 
 class Java9ContextAwareFutureTest {
 
-    // TODO(minwoox) Make an extesion which a user can easily check the logs.
+    // TODO(minwoox) Make an extension which a user can easily check the logs.
     @Mock
     private Appender<ILoggingEvent> appender;
     @Captor

File: dropwizard2/src/main/java/com/linecorp/armeria/dropwizard/ArmeriaSettings.java
Patch:
@@ -99,7 +99,7 @@
  * ...
  *
  * }</pre>
- * TODO(ikhoon): Merge this DroppWizard ArmeriaSettings with c.l.a.spring.ArmeriaSettings
+ * TODO(ikhoon): Merge this DropWizard ArmeriaSettings with c.l.a.spring.ArmeriaSettings
  *               to provide common API to configure Server from JSON and YAML.
  */
 class ArmeriaSettings {

File: eureka/src/test/java/com/linecorp/armeria/server/eureka/EurekaUpdatingListenerTest.java
Patch:
@@ -208,7 +208,7 @@ void specifiedPortIsUsed() throws IOException {
                                       .instanceId(INSTANCE_ID)
                                       .renewalInterval(Duration.ofSeconds(2))
                                       .leaseDuration(Duration.ofSeconds(10))
-                                      .port(1) // misconfigued!
+                                      .port(1) // misconfigured!
                                       .appName(APP_NAME)
                                       .build();
 

File: spring/boot2-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationDisabledTest.java
Patch:
@@ -31,8 +31,8 @@
 import com.linecorp.armeria.spring.ArmeriaAutoConfigurationWithConsumerTest.TestConfiguration;
 
 /**
- * This test {@link ArmeriaAutoConfiguration} could be disabed.
- * application-disalbed.yml will set armeria.server-enabled to false:
+ * This test {@link ArmeriaAutoConfiguration} could be disabled.
+ * application-disabled.yml will set armeria.server-enabled to false:
  */
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = TestConfiguration.class)

File: core/src/main/java/com/linecorp/armeria/common/HttpRequestAggregator.java
Patch:
@@ -20,9 +20,11 @@
 
 import javax.annotation.Nullable;
 
+import com.linecorp.armeria.internal.common.HttpObjectAggregator;
+
 import io.netty.buffer.ByteBufAllocator;
 
-final class HttpRequestAggregator extends HttpMessageAggregator<AggregatedHttpRequest> {
+final class HttpRequestAggregator extends HttpObjectAggregator<AggregatedHttpRequest> {
 
     private final HttpRequest request;
     private HttpHeaders trailers;

File: core/src/main/java/com/linecorp/armeria/common/HttpResponseAggregator.java
Patch:
@@ -26,9 +26,11 @@
 
 import javax.annotation.Nullable;
 
+import com.linecorp.armeria.internal.common.HttpObjectAggregator;
+
 import io.netty.buffer.ByteBufAllocator;
 
-final class HttpResponseAggregator extends HttpMessageAggregator<AggregatedHttpResponse> {
+final class HttpResponseAggregator extends HttpObjectAggregator<AggregatedHttpResponse> {
 
     @Nullable
     private List<ResponseHeaders> informationals; // needs aggregation as well

File: core/src/test/java/com/linecorp/armeria/common/DefaultAggregatedHttpRequestTest.java
Patch:
@@ -90,7 +90,8 @@ void requestAbortPropagatesException() {
     void shouldHaveAllGettersInHttpRequest() {
         final List<String> httpRequestMethods = noParameterMethods(HttpRequest.class);
         final List<String> aggregateHttpRequestMethods = noParameterMethods(AggregatedHttpRequest.class,
-                                                                            AggregatedHttpMessage.class);
+                                                                            AggregatedHttpMessage.class,
+                                                                            AggregatedHttpObject.class);
         for (String httpRequestMethod : httpRequestMethods) {
             if (httpRequestMethod.startsWith("builder") || httpRequestMethod.startsWith("aggregate") ||
                 httpRequestMethod.startsWith("toDuplicator")) {

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostBuilder.java
Patch:
@@ -961,7 +961,7 @@ VirtualHost build(VirtualHostBuilder template) {
                 }).collect(toImmutableList());
 
         final ServiceConfig fallbackServiceConfig =
-                new ServiceConfigBuilder(Route.ofCatchAll(), FallbackService.INSTANCE)
+                new ServiceConfigBuilder(RouteBuilder.FALLBACK_ROUTE, FallbackService.INSTANCE)
                         .build(requestTimeoutMillis, maxRequestLength, verboseResponses,
                                accessLogWriter, shutdownAccessLogWriterOnStop);
 

File: bucket4j/src/main/java/com/linecorp/armeria/common/throttling/ThrottlingHeaders.java
Patch:
@@ -27,8 +27,8 @@
 public interface ThrottlingHeaders {
     /**
      * Describes
-     * <a href="https://tools.ietf.org/id/draft-polli-ratelimit-headers-00.html">RateLimit Header Scheme for HTTP</a>.
-     * For example:
+     * <a href="https://datatracker.ietf.org/doc/draft-ietf-httpapi-ratelimit-headers/">RateLimit Header Fields
+     * for HTTP</a>. For example:
      * <pre>{@code
      * RateLimit-Limit: 10
      * RateLimit-Remaining: 1

File: core/src/main/java/com/linecorp/armeria/client/ClientHttp1ObjectEncoder.java
Patch:
@@ -78,7 +78,7 @@ private HttpObject convertHeaders(RequestHeaders headers, boolean endStream) {
             nettyHeaders.remove(HttpHeaderNames.TRANSFER_ENCODING);
 
             // Set or remove the 'content-length' header depending on request method.
-            // See: https://tools.ietf.org/html/rfc7230#section-3.3.2
+            // See: https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.2
             //
             // > A user agent SHOULD send a Content-Length in a request message when
             // > no Transfer-Encoding is sent and the request method defines a meaning

File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java
Patch:
@@ -269,7 +269,7 @@ ClientRequestContext newDerivedContext(RequestId id, @Nullable HttpRequest req,
 
     /**
      * Returns the fragment part of the URI of the current {@link Request}, as defined in
-     * <a href="https://tools.ietf.org/html/rfc3986#section-3.5">the section 3.5 of RFC3986</a>.
+     * <a href="https://datatracker.ietf.org/doc/html/rfc3986#section-3.5">the section 3.5 of RFC3986</a>.
      *
      * @return the fragment part of the request URI, or {@code null} if no fragment was specified
      */

File: core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java
Patch:
@@ -293,7 +293,7 @@ public DnsResolverGroupBuilder ndots(int ndots) {
 
     /**
      * Sets if the domain and host names should be decoded to unicode when received.
-     * See <a href="https://tools.ietf.org/html/rfc3492">rfc3492</a>. This flag is enabled by default.
+     * See <a href="https://datatracker.ietf.org/doc/rfc3492/">rfc3492</a>. This flag is enabled by default.
      *
      * @see DnsNameResolverBuilder#decodeIdn(boolean)
      */

File: core/src/main/java/com/linecorp/armeria/client/Endpoint.java
Patch:
@@ -64,7 +64,7 @@ public final class Endpoint implements Comparable<Endpoint>, EndpointGroup {
 
     /**
      * Validator for the scheme part of the URI, as defined in
-     * <a href="https://tools.ietf.org/html/rfc3986#section-3.1">the section 3.1 of RFC3986</a>.
+     * <a href="https://datatracker.ietf.org/doc/html/rfc3986#section-3.1">the section 3.1 of RFC3986</a>.
      */
     private static final Predicate<String> SCHEME_VALIDATOR =
             scheme -> Pattern.compile("^([a-z][a-z0-9+\\-.]*)").matcher(scheme).matches();

File: core/src/main/java/com/linecorp/armeria/client/GoAwayReceivedException.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * A {@link RuntimeException} raised when a server sent an
- * <a href="https://httpwg.org/specs/rfc7540.html#GOAWAY">HTTP/2 GOAWAY frame</a> with
+ * <a href="https://datatracker.ietf.org/doc/html/rfc7540#section-6.8">HTTP/2 GOAWAY frame</a> with
  * the {@code lastStreamId} less then the stream ID of the request.
  */
 public final class GoAwayReceivedException extends RuntimeException {

File: core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java
Patch:
@@ -488,8 +488,8 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                 // - The response has 'Content-Length' or 'Transfer-Encoding: chunked',
                 //   i.e. possible to determine the end of the response.
                 //
-                // See: https://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html#sec8.1.2.1
-                //      https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.4
+                // See: https://datatracker.ietf.org/doc/html/rfc2616#section-8.1.2.1
+                //      https://datatracker.ietf.org/doc/html/rfc2616#section-4.4
                 needsToClose = !(HttpUtil.isKeepAlive(res) &&
                                  (HttpUtil.isContentLengthSet(res) ||
                                   HttpUtil.isTransferEncodingChunked(res)));

File: core/src/main/java/com/linecorp/armeria/client/RefusedStreamException.java
Patch:
@@ -20,8 +20,8 @@
 
 /**
  * A {@link RuntimeException} raised when a server set
- * HTTP/2 <a href="https://httpwg.org/specs/rfc7540.html#SETTINGS_MAX_CONCURRENT_STREAMS">{@code MAX_CONCURRENT_STREAMS}</a> to 0,
- * which means a client can't send anything.
+ * HTTP/2 <a href="https://datatracker.ietf.org/doc/html/rfc7540#section-5.1.2">{@code MAX_CONCURRENT_STREAMS}</a>
+ * to 0, which means a client can't send anything.
  */
 public final class RefusedStreamException extends RuntimeException {
 

File: core/src/main/java/com/linecorp/armeria/client/UnprocessedRequestException.java
Patch:
@@ -27,7 +27,7 @@
  * thus can be retried safely. This exception is usually raised when a server sent an HTTP/2 GOAWAY frame with
  * the {@code lastStreamId} less than the stream ID of the request.
  *
- * @see <a href="https://httpwg.org/specs/rfc7540.html#GOAWAY">Section 6.8, RFC7540</a>
+ * @see <a href="https://datatracker.ietf.org/doc/html/rfc7540#section-6.8">Section 6.8, RFC7540</a>
  */
 public final class UnprocessedRequestException extends RuntimeException {
 

File: core/src/main/java/com/linecorp/armeria/client/cookie/AcceptOriginCookiePolicy.java
Patch:
@@ -40,7 +40,7 @@ private AcceptOriginCookiePolicy() {}
 
     /**
      * Accepts a cookie if its domain is non-null, not a public suffix, and matches the server host as
-     * specified by RFC 6265 <a href="https://tools.ietf.org/html/rfc6265#section-5.1.3">Domain Matching</a>.
+     * specified by RFC 6265 <a href="https://datatracker.ietf.org/doc/html/rfc6265#section-5.1.3">Domain Matching</a>.
      */
     @Override
     public boolean accept(URI uri, Cookie cookie) {

File: core/src/main/java/com/linecorp/armeria/client/cookie/DefaultCookieJar.java
Patch:
@@ -123,8 +123,8 @@ public CookieState state(Cookie cookie, long currentTimeMillis) {
      * Ensures this cookie has domain and path attributes, otherwise sets them to default values. If domain
      * is absent, the default is the request host, with {@code host-only} flag set to {@code true}. If path is
      * absent, the default is computed from the request path. See RFC 6265
-     * <a href="https://tools.ietf.org/html/rfc6265#section-5.3">5.3</a> and
-     * <a href="https://tools.ietf.org/html/rfc6265#section-5.1.4">5.1.4</a>
+     * <a href="https://datatracker.ietf.org/doc/html/rfc6265#section-5.3">5.3</a> and
+     * <a href="https://datatracker.ietf.org/doc/html/rfc6265#section-5.1.4">5.1.4</a>
      */
     @VisibleForTesting
     Cookie ensureDomainAndPath(Cookie cookie, URI uri) {

File: core/src/main/java/com/linecorp/armeria/common/ClientCookieDecoder.java
Patch:
@@ -43,7 +43,7 @@
 import io.netty.handler.codec.http.cookie.CookieHeaderNames;
 
 /**
- * A <a href="http://tools.ietf.org/html/rfc6265">RFC 6265</a> compliant cookie decoder for client side.
+ * A <a href="https://datatracker.ietf.org/doc/rfc6265/">RFC 6265</a> compliant cookie decoder for client side.
  *
  * <p>It will store the way the raw value was wrapped in {@link Cookie#isValueQuoted()} so it can be sent back
  * to the origin server as is.</p>

File: core/src/main/java/com/linecorp/armeria/common/ClientCookieEncoder.java
Patch:
@@ -45,7 +45,7 @@
 import io.netty.util.internal.InternalThreadLocalMap;
 
 /**
- * A <a href="http://tools.ietf.org/html/rfc6265">RFC 6265</a> compliant cookie encoder for client side.
+ * A <a href="https://datatracker.ietf.org/doc/rfc6265/">RFC 6265</a> compliant cookie encoder for client side.
  *
  * <p>Note that multiple cookies are supposed to be sent at once in a single {@code "Cookie"} header.</p>
  *

File: core/src/main/java/com/linecorp/armeria/common/ContentDisposition.java
Patch:
@@ -59,7 +59,7 @@
  * @author Juergen Hoeller
  * @author Rossen Stoyanchev
  * @author Sergey Tsypanov
- * @see <a href="https://tools.ietf.org/html/rfc6266">RFC 6266</a>
+ * @see <a href="https://datatracker.ietf.org/doc/rfc6266/">RFC 6266</a>
  */
 public final class ContentDisposition {
 
@@ -277,7 +277,7 @@ private static List<String> tokenize(String headerValue) {
      * @param charset the charset for the filename
      * @return the encoded header field param
      *
-     * @see <a href="https://tools.ietf.org/html/rfc5987">RFC 5987</a>
+     * @see <a href="https://datatracker.ietf.org/doc/rfc5987/">RFC 5987</a>
      */
     private static String decodeFilename(String filename, Charset charset) {
         final byte[] value = filename.getBytes(charset);
@@ -345,7 +345,7 @@ private static void escapeQuotationsInFilename(StringBuilder sb, String filename
      * @param input the header field param
      * @param charset the charset of the header field param string,
      *                only the US-ASCII, UTF-8 and ISO-8859-1 charsets are supported
-     * @see <a href="https://tools.ietf.org/html/rfc5987">RFC 5987</a>
+     * @see <a href="https://datatracker.ietf.org/doc/rfc5987/">RFC 5987</a>
      */
     private static void encodeFilename(StringBuilder sb, String input, Charset charset) {
         final byte[] source = input.getBytes(charset);

File: core/src/main/java/com/linecorp/armeria/common/ContentDispositionBuilder.java
Patch:
@@ -86,7 +86,7 @@ public ContentDispositionBuilder filename(String filename) {
      * Only the US-ASCII, UTF-8 and ISO-8859-1 charsets are supported.
      *
      * <p><strong>Note:</strong> Do not use this for a {@code "multipart/form-data"} requests as per
-     * <a link="https://tools.ietf.org/html/rfc7578#section-4.2">RFC 7578, Section 4.2</a>
+     * <a link="https://datatracker.ietf.org/doc/html/rfc7578#section-4.2">RFC 7578, Section 4.2</a>
      * and also RFC 5987 itself mentions it does not apply to multipart requests.
      */
     public ContentDispositionBuilder filename(String filename, @Nullable Charset charset) {

File: core/src/main/java/com/linecorp/armeria/common/Cookie.java
Patch:
@@ -465,7 +465,7 @@ static List<String> toSetCookieHeaders(boolean strict, Collection<? extends Cook
     boolean isHttpOnly();
 
     /**
-     * Returns the <a href="https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-4.1.2.7"
+     * Returns the <a href="https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis-07#section-4.1.2.7"
      * >{@code "SameSite"}</a> attribute of this {@link Cookie}.
      *
      * @return the {@code "SameSite"} attribute, or {@code null}.
@@ -484,7 +484,7 @@ static List<String> toSetCookieHeaders(boolean strict, Collection<? extends Cook
      * Encodes this {@link Cookie} into a single {@code "Cookie"} header value.
      * Note that you must use {@link #toCookieHeader(Collection)} when encoding more than one {@link Cookie},
      * because it is prohibited to send multiple {@code "Cookie"} headers in an HTTP request,
-     * according to <a href="https://tools.ietf.org/html/rfc6265#section-5.4">RFC 6265</a>.
+     * according to <a href="https://datatracker.ietf.org/doc/html/rfc6265#section-5.4">RFC 6265</a>.
      *
      * @return a single RFC 6265-style {@code "Cookie"} header value.
      */
@@ -496,7 +496,7 @@ default String toCookieHeader() {
      * Encodes this {@link Cookie} into a single {@code "Cookie"} header value.
      * Note that you must use {@link #toCookieHeader(boolean, Collection)} when encoding
      * more than one {@link Cookie}, because it is prohibited to send multiple {@code "Cookie"} headers
-     * in an HTTP request, according to <a href="https://tools.ietf.org/html/rfc6265#section-5.4">RFC 6265</a>.
+     * in an HTTP request, according to <a href="https://datatracker.ietf.org/doc/html/rfc6265#section-5.4">RFC 6265</a>.
      *
      * @param strict whether to validate that the cookie name and value are in the valid scope
      *               defined in RFC 6265.

File: core/src/main/java/com/linecorp/armeria/common/CookieBuilder.java
Patch:
@@ -50,7 +50,7 @@ private static String validateAttributeValue(String value, String valueName) {
         return value;
     }
 
-    // As per https://tools.ietf.org/html/rfc6265#section-4.1.2.3.
+    // As per https://datatracker.ietf.org/doc/html/rfc6265#section-4.1.2.3.
     @Nullable
     private static String trimDomainDot(String domain) {
         if (domain.charAt(domain.length() - 1) == '.') {
@@ -180,7 +180,7 @@ public CookieBuilder hostOnly(boolean hostOnly) {
     }
 
     /**
-     * Sets the <a href="https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-4.1.2.7"
+     * Sets the <a href="https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis-07#section-4.1.2.7"
      * >{@code SameSite}</a> attribute of the {@link Cookie}. The value is supposed to be one of {@code "Lax"},
      * {@code "Strict"} or {@code "None"}. Note that this attribute is server-side only.
      */

File: core/src/main/java/com/linecorp/armeria/common/HttpHeaders.java
Patch:
@@ -98,7 +98,7 @@
  *   <li>{@link Instant}, {@link TemporalAccessor}, {@link Date} and {@link Calendar}
  *     <ul>
  *       <li>Converted into a time and date string as specified in
- *         <a href="https://tools.ietf.org/html/rfc1123#page-55">RFC1123</a></li>
+ *         <a href="https://datatracker.ietf.org/doc/html/rfc1123#page-55">RFC1123</a></li>
  *       <li>e.g. {@code Sun, 27 Nov 2016 19:37:15 UTC}</li>
  *     </ul>
  *   </li>

File: core/src/main/java/com/linecorp/armeria/common/HttpRequestAggregator.java
Patch:
@@ -44,7 +44,7 @@ protected void onHeaders(HttpHeaders headers) {
             trailers = headers;
         } else {
             // Optionally, only one trailers can be present.
-            // See https://tools.ietf.org/html/rfc7540#section-8.1
+            // See https://datatracker.ietf.org/doc/html/rfc7540#section-8.1
         }
     }
 
@@ -53,7 +53,7 @@ protected void onData(HttpData data) {
         if (!trailers.isEmpty()) {
             data.close();
             // Data can't come after trailers.
-            // See https://tools.ietf.org/html/rfc7540#section-8.1
+            // See https://datatracker.ietf.org/doc/html/rfc7540#section-8.1
             return;
         }
         super.onData(data);

File: core/src/main/java/com/linecorp/armeria/common/HttpResponseAggregator.java
Patch:
@@ -52,7 +52,7 @@ protected void onHeaders(HttpHeaders headers) {
             trailers = headers;
         } else {
             // Optionally, only one trailers can be present.
-            // See https://tools.ietf.org/html/rfc7540#section-8.1
+            // See https://datatracker.ietf.org/doc/html/rfc7540#section-8.1
         }
     }
 
@@ -61,7 +61,7 @@ protected void onData(HttpData data) {
         if (!trailers.isEmpty()) {
             data.close();
             // Data can't come after trailers.
-            // See https://tools.ietf.org/html/rfc7540#section-8.1
+            // See https://datatracker.ietf.org/doc/html/rfc7540#section-8.1
             return;
         }
         super.onData(data);

File: core/src/main/java/com/linecorp/armeria/common/HttpStatus.java
Patch:
@@ -214,7 +214,8 @@ public final class HttpStatus implements Comparable<HttpStatus> {
     /**
      * 421 Misdirected Request.
      *
-     * @see <a href="https://tools.ietf.org/html/draft-ietf-httpbis-http2-15#section-9.1.2">421 Status Code</a>
+     * @see <a href="https://datatracker.ietf.org/doc/html/rfc7540#section-9.1.2">421 (Misdirected Request)
+     *      Status Code</a>
      */
     public static final HttpStatus MISDIRECTED_REQUEST = newConstant(421, "Misdirected Request");
 

File: core/src/main/java/com/linecorp/armeria/common/MediaTypeSet.java
Patch:
@@ -123,7 +123,7 @@ public int size() {
      * specified string.
      *
      * @param acceptHeaders the values of the {@code "accept"} header, as defined in
-     *        <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html">the section 14.1, RFC2616</a>
+     *        <a href="https://datatracker.ietf.org/doc/html/rfc2616#section-14.1">the section 14.1, RFC2616</a>
      * @return the most preferred {@link MediaType} that matches one of the specified media ranges.
      *         {@code null} if there are no matches or {@code acceptHeaders} does not contain any valid ranges.
      */
@@ -143,7 +143,7 @@ public MediaType matchHeaders(Iterable<? extends CharSequence> acceptHeaders) {
      * specified string.
      *
      * @param acceptHeaders the values of the {@code "accept"} header, as defined in
-     *        <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html">the section 14.1, RFC2616</a>
+     *        <a href="https://datatracker.ietf.org/doc/html/rfc2616#section-14.1">the section 14.1, RFC2616</a>
      * @return the most preferred {@link MediaType} that matches one of the specified media ranges.
      *         {@code null} if there are no matches or {@code acceptHeaders} does not contain any valid ranges.
      */

File: core/src/main/java/com/linecorp/armeria/common/QueryParams.java
Patch:
@@ -101,7 +101,7 @@
  *   <li>{@link Instant}, {@link TemporalAccessor}, {@link Date} and {@link Calendar}
  *     <ul>
  *       <li>Converted into a time and date string as specified in
- *         <a href="https://tools.ietf.org/html/rfc1123#page-55">RFC1123</a></li>
+ *         <a href="https://datatracker.ietf.org/doc/html/rfc1123#page-55">RFC1123</a></li>
  *       <li>e.g. {@code Sun, 27 Nov 2016 19:37:15 UTC}</li>
  *     </ul>
  *   </li>

File: core/src/main/java/com/linecorp/armeria/common/QueryParamsBase.java
Patch:
@@ -57,7 +57,7 @@ final int hashName(String s) {
 
     @Override
     final boolean nameEquals(String a, String b) {
-        // Keys in URL parameters are case-sensitive - https://tools.ietf.org/html/rfc3986#page-39
+        // Keys in URL parameters are case-sensitive - https://datatracker.ietf.org/doc/html/rfc3986#page-39
         return a.equals(b);
     }
 

File: core/src/main/java/com/linecorp/armeria/common/RequestContext.java
Patch:
@@ -331,7 +331,7 @@ default boolean hasOwnAttr(AttributeKey<?> key) {
 
     /**
      * Returns the absolute path part of the current {@link Request} URI, excluding the query part,
-     * as defined in <a href="https://tools.ietf.org/html/rfc3986">RFC3986</a>.
+     * as defined in <a href="https://datatracker.ietf.org/doc/rfc3986/">RFC3986</a>.
      */
     String path();
 
@@ -343,7 +343,7 @@ default boolean hasOwnAttr(AttributeKey<?> key) {
 
     /**
      * Returns the query part of the current {@link Request} URI, without the leading {@code '?'},
-     * as defined in <a href="https://tools.ietf.org/html/rfc3986">RFC3986</a>.
+     * as defined in <a href="https://datatracker.ietf.org/doc/rfc3986/">RFC3986</a>.
      */
     @Nullable
     String query();

File: core/src/main/java/com/linecorp/armeria/common/ServerCookieDecoder.java
Patch:
@@ -40,10 +40,10 @@
 import io.netty.handler.codec.http.cookie.CookieHeaderNames;
 
 /**
- * A <a href="http://tools.ietf.org/html/rfc6265">RFC 6265</a> compliant cookie decoder for server side.
+ * A <a href="https://datatracker.ietf.org/doc/rfc6265/">RFC 6265</a> compliant cookie decoder for server side.
  *
  * <p>Thie decoder decodes only cookie name and value. The old fields in
- * <a href="http://tools.ietf.org/html/rfc2965">RFC 2965</a> such as {@code "path"} and {@code "domain"} are
+ * <a href="https://datatracker.ietf.org/doc/rfc2965/">RFC 2965</a> such as {@code "path"} and {@code "domain"} are
  * ignored.</p>
  *
  * @see ServerCookieEncoder

File: core/src/main/java/com/linecorp/armeria/common/ServerCookieEncoder.java
Patch:
@@ -45,7 +45,7 @@
 import io.netty.handler.codec.http.cookie.CookieHeaderNames;
 
 /**
- * A <a href="http://tools.ietf.org/html/rfc6265">RFC 6265</a> compliant cookie encoder for server side.
+ * A <a href="https://datatracker.ietf.org/doc/rfc6265/">RFC 6265</a> compliant cookie encoder for server side.
  *
  * <p>Note that multiple cookies must be sent as separate "Set-Cookie" headers.</p>
  *

File: core/src/main/java/com/linecorp/armeria/common/auth/OAuth2Token.java
Patch:
@@ -24,7 +24,7 @@
 import com.linecorp.armeria.common.HttpHeaderNames;
 
 /**
- * The bearer token of <a href="https://tools.ietf.org/html/rfc6750">OAuth 2.0 authentication</a>.
+ * The bearer token of <a href="https://datatracker.ietf.org/doc/rfc6750/">OAuth 2.0 authentication</a>.
  */
 public final class OAuth2Token {
 

File: core/src/main/java/com/linecorp/armeria/common/util/InetAddressPredicates.java
Patch:
@@ -93,7 +93,7 @@ public static Predicate<InetAddress> ofExact(String address) {
 
     /**
      * Returns a {@link Predicate} which returns {@code true} if the given {@link InetAddress} is in the
-     * range of a <a href="https://tools.ietf.org/html/rfc4632">Classless Inter-domain Routing (CIDR)</a> block.
+     * range of a <a href="https://datatracker.ietf.org/doc/rfc4632/">Classless Inter-domain Routing (CIDR)</a> block.
      *
      * @param baseAddress the base {@link InetAddress} of a CIDR notation
      * @param maskBits the number of significant bits which describes its network portion
@@ -106,7 +106,7 @@ public static Predicate<InetAddress> ofCidr(InetAddress baseAddress, int maskBit
 
     /**
      * Returns a {@link Predicate} which returns {@code true} if the given {@link InetAddress} is in the
-     * range of a <a href="https://tools.ietf.org/html/rfc4632">Classless Inter-domain Routing (CIDR)</a> block.
+     * range of a <a href="https://datatracker.ietf.org/doc/rfc4632/">Classless Inter-domain Routing (CIDR)</a> block.
      *
      * @param baseAddress the base {@link InetAddress} of a CIDR notation
      * @param subnetMask the subnet mask, e.g. {@code 255.255.255.0}
@@ -122,7 +122,7 @@ public static Predicate<InetAddress> ofCidr(InetAddress baseAddress, String subn
 
     /**
      * Returns a {@link Predicate} which returns {@code true} if the given {@link InetAddress} is in the
-     * range of a <a href="https://tools.ietf.org/html/rfc4632">Classless Inter-domain Routing (CIDR)</a> block.
+     * range of a <a href="https://datatracker.ietf.org/doc/rfc4632/">Classless Inter-domain Routing (CIDR)</a> block.
      *
      * @param cidr the CIDR notation of an address block, e.g. {@code 10.0.0.0/8}, {@code 192.168.1.0/24},
      *             {@code 1080:0:0:0:8:800:200C:4100/120}. If it's an exact IP address such as

File: core/src/main/java/com/linecorp/armeria/internal/common/KeepAliveHandler.java
Patch:
@@ -49,7 +49,7 @@ public interface KeepAliveHandler {
     void onPing();
 
     /**
-     * Invoked when a <a href="https://tools.ietf.org/html/rfc7540#section-6.7">PING ACK</a> is received.
+     * Invoked when a <a href="https://datatracker.ietf.org/doc/html/rfc7540#section-6.7">PING ACK</a> is received.
      * Note that this method is only valid for an HTTP/2 connection.
      */
     void onPingAck(long data);

File: core/src/main/java/com/linecorp/armeria/internal/common/PathAndQuery.java
Patch:
@@ -520,7 +520,7 @@ int nextCodePoint() {
      * Reserved characters which require percent-encoding. These values are only used for constructing
      * {@link #RAW_CHAR_TO_MARKER} and {@link #MARKER_TO_PERCENT_ENCODED_CHAR} mapping tables.
      *
-     * @see <a href="https://tools.ietf.org/html/rfc3986#section-2.2">RFC 3986, section 2.2</a>
+     * @see <a href="https://datatracker.ietf.org/doc/html/rfc3986#section-2.2">RFC 3986, section 2.2</a>
      */
     private enum ReservedChar {
         GEN_DELIM_01(':', "%3A", (byte) 0x01),

File: core/src/main/java/com/linecorp/armeria/internal/common/PercentDecoder.java
Patch:
@@ -61,15 +61,15 @@ public final class PercentDecoder {
 
     /**
      * Decodes the specified string if it's
-     * <a href="https://tools.ietf.org/html/rfc3986#section-2.1">Percent-Encoded</a>.
+     * <a href="https://datatracker.ietf.org/doc/html/rfc3986#section-2.1">Percent-Encoded</a>.
      */
     public static String decodeComponent(String s) {
         return decodeComponent(TemporaryThreadLocals.get(), s, 0, s.length());
     }
 
     /**
      * Decodes the specified string from the index of {@code from} to the index of {@code toExcluded} if it's
-     * <a href="https://tools.ietf.org/html/rfc3986#section-2.1">Percent-Encoded</a>.
+     * <a href="https://datatracker.ietf.org/doc/html/rfc3986#section-2.1">Percent-Encoded</a>.
      */
     public static String decodeComponent(TemporaryThreadLocals tempThreadLocals,
                                          String s, int from, int toExcluded) {

File: core/src/main/java/com/linecorp/armeria/internal/common/PercentEncoder.java
Patch:
@@ -57,7 +57,7 @@ public final class PercentEncoder {
 
     static {
         // Unreserved characters with '*' because most browsers such as Chrome and Firefox do not encode '*'.
-        // See https://tools.ietf.org/html/rfc3986#section-2.3
+        // See https://datatracker.ietf.org/doc/html/rfc3986#section-2.3
         final String safeOctetStr = "-_.~*abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
         for (int i = 0; i < safeOctetStr.length(); i++) {
             SAFE_OCTETS[safeOctetStr.charAt(i)] = -1;
@@ -66,7 +66,7 @@ public final class PercentEncoder {
 
     /**
      * Encodes the specified string using
-     * <a href="https://tools.ietf.org/html/rfc3986#section-2.1">Percent-Encoding</a> and appends it to the
+     * <a href="https://datatracker.ietf.org/doc/html/rfc3986#section-2.1">Percent-Encoding</a> and appends it to the
      * specified {@link StringBuilder}.
      */
     public static void encodeComponent(StringBuilder buf, String s) {

File: core/src/main/java/com/linecorp/armeria/internal/common/util/SslContextUtil.java
Patch:
@@ -208,10 +208,10 @@ private static void validateHttp2Ciphers(Set<String> ciphers, boolean tlsAllowUn
     private static String badCipherSuiteMessage(String cipher) {
         return "Attempted to configure TLS with a bad cipher suite (" + cipher + "). " +
                "Do not use any cipher suites listed in " +
-               "https://httpwg.org/specs/rfc7540.html#BadCipherSuites";
+               "https://datatracker.ietf.org/doc/html/rfc7540#appendix-A";
     }
 
-    // https://httpwg.org/specs/rfc7540.html#BadCipherSuites
+    // https://datatracker.ietf.org/doc/html/rfc7540#appendix-A
     @VisibleForTesting
     static final Set<String> BAD_HTTP2_CIPHERS =
             ImmutableSet.of(

File: core/src/main/java/com/linecorp/armeria/server/AbstractBindingBuilder.java
Patch:
@@ -267,7 +267,7 @@ public AbstractBindingBuilder consumes(Iterable<MediaType> consumeTypes) {
 
     /**
      * Sets {@link MediaType}s that an {@link HttpService} will produce to be used in
-     * content negotiation. See <a href="https://tools.ietf.org/html/rfc7231#section-5.3.2">Accept header</a>
+     * content negotiation. See <a href="https://datatracker.ietf.org/doc/html/rfc7231#section-5.3.2">Accept header</a>
      * for more information.
      */
     public AbstractBindingBuilder produces(MediaType... produceTypes) {
@@ -277,7 +277,7 @@ public AbstractBindingBuilder produces(MediaType... produceTypes) {
 
     /**
      * Sets {@link MediaType}s that an {@link HttpService} will produce to be used in
-     * content negotiation. See <a href="https://tools.ietf.org/html/rfc7231#section-5.3.2">Accept header</a>
+     * content negotiation. See <a href="https://datatracker.ietf.org/doc/html/rfc7231#section-5.3.2">Accept header</a>
      * for more information.
      */
     public AbstractBindingBuilder produces(Iterable<MediaType> produceTypes) {

File: core/src/main/java/com/linecorp/armeria/server/HttpHeaderUtil.java
Patch:
@@ -70,7 +70,7 @@ final class HttpHeaderUtil {
      * @param proxiedAddresses source and destination addresses retrieved from PROXY protocol header
      * @param remoteAddress a remote endpoint of a channel
      * @param filter the filter which evaluates an {@link InetAddress} can be used as a client address
-     * @see <a href="https://tools.ietf.org/html/rfc7239">Forwarded HTTP Extension</a>
+     * @see <a href="https://datatracker.ietf.org/doc/rfc7239/">Forwarded HTTP Extension</a>
      * @see <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For">X-Forwarded-For</a>
      */
     static ProxiedAddresses determineProxiedAddresses(HttpHeaders headers,
@@ -140,7 +140,7 @@ private static InetSocketAddress createInetSocketAddress(String address) throws
             (firstChar == 'u' && "unknown".equals(address))) {
             // To early return when the address is not an IP address.
             // - an obfuscated identifier which must start with '_'
-            //   - https://tools.ietf.org/html/rfc7239#section-6.3
+            //   - https://datatracker.ietf.org/doc/html/rfc7239#section-6.3
             // - the "unknown" identifier
             return null;
         }

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -601,7 +601,7 @@ private void addKeepAliveHeaders(ResponseHeadersBuilder headers) {
             headers.set(HttpHeaderNames.CONNECTION, "keep-alive");
         } else {
             // Do not add the 'connection' header for HTTP/2 responses.
-            // See https://tools.ietf.org/html/rfc7540#section-8.1.2.2
+            // See https://datatracker.ietf.org/doc/html/rfc7540#section-8.1.2.2
         }
     }
 
@@ -610,7 +610,7 @@ private void addKeepAliveHeaders(ResponseHeadersBuilder headers) {
      */
     private static void setContentLength(HttpRequest req, ResponseHeadersBuilder headers,
                                          int contentLength) {
-        // https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.4
+        // https://datatracker.ietf.org/doc/html/rfc2616#section-4.4
         // prohibits to send message body for below cases.
         // and in those cases, content should be empty.
         if (req.method() == HttpMethod.HEAD || headers.status().isContentAlwaysEmpty()) {

File: core/src/main/java/com/linecorp/armeria/server/RoutingContext.java
Patch:
@@ -52,13 +52,13 @@ public interface RoutingContext {
 
     /**
      * Returns the absolute path retrieved from the request,
-     * as defined in <a href="https://tools.ietf.org/html/rfc3986">RFC3986</a>.
+     * as defined in <a href="https://datatracker.ietf.org/doc/rfc3986/">RFC3986</a>.
      */
     String path();
 
     /**
      * Returns the query retrieved from the request,
-     * as defined in <a href="https://tools.ietf.org/html/rfc3986">RFC3986</a>.
+     * as defined in <a href="https://datatracker.ietf.org/doc/rfc3986/">RFC3986</a>.
      */
     @Nullable
     String query();

File: core/src/main/java/com/linecorp/armeria/server/RoutingResultBuilder.java
Patch:
@@ -69,7 +69,7 @@ public RoutingResultBuilder type(RoutingResultType type) {
     }
 
     /**
-     * Sets the mapped path, encoded as defined in <a href="https://tools.ietf.org/html/rfc3986">RFC3986</a>.
+     * Sets the mapped path, encoded as defined in <a href="https://datatracker.ietf.org/doc/rfc3986/">RFC3986</a>.
      */
     public RoutingResultBuilder path(String path) {
         this.path = requireNonNull(path, "path");

File: core/src/main/java/com/linecorp/armeria/server/ServerHttp1ObjectEncoder.java
Patch:
@@ -91,7 +91,7 @@ private HttpResponse convertHeaders(ResponseHeaders headers, boolean endStream,
             if (HttpStatus.isContentAlwaysEmpty(statusCode)) {
                 if (statusCode == 304) {
                     // 304 response can have the "content-length" header when it is a response to a conditional
-                    // GET request. See https://tools.ietf.org/html/rfc7230#section-3.3.2
+                    // GET request. See https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.2
                 } else {
                     outHeaders.remove(HttpHeaderNames.CONTENT_LENGTH);
                 }

File: core/src/main/java/com/linecorp/armeria/server/VirtualHost.java
Patch:
@@ -44,7 +44,7 @@
  * A {@link VirtualHost} contains the following information:
  * <ul>
  *   <li>the hostname pattern, as defined in
- *       <a href="https://tools.ietf.org/html/rfc2818#section-3.1">the section 3.1 of RFC2818</a></li>
+ *       <a href="https://datatracker.ietf.org/doc/html/rfc2818#section-3.1">the section 3.1 of RFC2818</a></li>
  *   <li>{@link SslContext} if TLS is enabled</li>
  *   <li>the list of available {@link HttpService}s and their {@link Route}s</li>
  * </ul>
@@ -220,7 +220,7 @@ public String defaultHostname() {
 
     /**
      * Returns the hostname pattern of this virtual host, as defined in
-     * <a href="https://tools.ietf.org/html/rfc2818#section-3.1">the section 3.1 of RFC2818</a>.
+     * <a href="https://datatracker.ietf.org/doc/html/rfc2818#section-3.1">the section 3.1 of RFC2818</a>.
      */
     public String hostnamePattern() {
         return hostnamePattern;

File: core/src/main/java/com/linecorp/armeria/server/annotation/JacksonResponseConverterFunction.java
Patch:
@@ -46,7 +46,7 @@
  * Note that this {@link ResponseConverterFunction} is applied to an annotated service by default,
  * so you don't have to specify this converter explicitly unless you want to use your own {@link ObjectMapper}.
  *
- * @see <a href="https://tools.ietf.org/html/rfc7464">JavaScript Object Notation (JSON) Text Sequences</a>
+ * @see <a href="https://datatracker.ietf.org/doc/rfc7464/">JavaScript Object Notation (JSON) Text Sequences</a>
  */
 public final class JacksonResponseConverterFunction implements ResponseConverterFunction {
 

File: core/src/main/java/com/linecorp/armeria/server/file/AbstractHttpFile.java
Patch:
@@ -251,7 +251,7 @@ public HttpService asService() {
                     return HttpResponse.of(HttpStatus.NOT_FOUND);
                 }
 
-                // See https://tools.ietf.org/html/rfc7232#section-6 for more information
+                // See https://datatracker.ietf.org/doc/html/rfc7232#section-6 for more information
                 // about how conditional requests are handled.
 
                 // Handle 'if-none-match' header.

File: core/src/main/java/com/linecorp/armeria/server/streaming/JsonTextSequences.java
Patch:
@@ -40,7 +40,7 @@
 import com.linecorp.armeria.common.util.Exceptions;
 
 /**
- * A utility class which helps to create a <a href="https://tools.ietf.org/html/rfc7464">JavaScript Object
+ * A utility class which helps to create a <a href="https://datatracker.ietf.org/doc/rfc7464/">JavaScript Object
  * Notation (JSON) Text Sequences</a> from a content {@link Publisher} or {@link Stream}.
  *
  * <p>A user simply creates a streaming {@link HttpResponse} which emits JSON Text Sequences, e.g.
@@ -277,7 +277,7 @@ static ResponseHeaders ensureHttpStatus(ResponseHeaders headers) {
                     "Overwriting the HTTP status code from '{}' to '{}' for JSON Text Sequences. " +
                     "Do not set an HTTP status code on the HttpHeaders when calling factory methods in '{}', " +
                     "or set '{}' if you want to specify its status code. " +
-                    "Please refer to https://tools.ietf.org/html/rfc7464 for more information.",
+                    "Please refer to https://datatracker.ietf.org/doc/rfc7464/ for more information.",
                     status, HttpStatus.OK, JsonTextSequences.class.getSimpleName(), HttpStatus.OK);
             warnedStatusCode = true;
         }
@@ -300,7 +300,7 @@ static ResponseHeaders ensureContentType(ResponseHeaders headers) {
             logger.warn("Overwriting content-type from '{}' to '{}' for JSON Text Sequences. " +
                         "Do not set a content-type on the HttpHeaders when calling factory methods in '{}', " +
                         "or set '{}' if you want to specify its content-type. " +
-                        "Please refer to https://tools.ietf.org/html/rfc7464 for more information.",
+                        "Please refer to https://datatracker.ietf.org/doc/rfc7464/ for more information.",
                         contentType, MediaType.JSON_SEQ,
                         JsonTextSequences.class.getSimpleName(), MediaType.JSON_SEQ);
             warnedContentType = true;

File: core/src/test/java/com/linecorp/armeria/common/DefaultAggregatedHttpResponseTest.java
Patch:
@@ -116,7 +116,7 @@ void contentLengthIsNotSetWhen204Or205() {
         assertThat(AggregatedHttpResponse.of(headers).headers().get(CONTENT_LENGTH)).isNull();
 
         // 304 response can have the 'Content-length' header when it is a response to a conditional
-        // GET request. See https://tools.ietf.org/html/rfc7230#section-3.3.2
+        // GET request. See https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.2
         headers = ResponseHeaders.of(HttpStatus.NOT_MODIFIED, CONTENT_LENGTH, 100);
         assertThat(AggregatedHttpResponse.of(headers).headers().getInt(CONTENT_LENGTH)).isEqualTo(100);
     }

File: examples/proxy-server/src/main/java/example/armeria/proxy/ProxyService.java
Patch:
@@ -24,7 +24,7 @@
 public final class ProxyService extends AbstractHttpService {
 
     // This is a simplified example. Please refer to
-    // https://tools.ietf.org/html/rfc7230#section-5.7.1 for more information about Via header.
+    // https://datatracker.ietf.org/doc/html/rfc7230#section-5.7.1 for more information about Via header.
     private static final String viaHeaderValue = "HTTP/2.0 Armeria proxy"; // The pseudonym is Armeria proxy.
 
     /**
@@ -119,7 +119,7 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) throws
     }
 
     private static HttpRequest addForwarded(ServiceRequestContext ctx, HttpRequest req) {
-        // This is a simplified example. Please refer to https://tools.ietf.org/html/rfc7239
+        // This is a simplified example. Please refer to https://datatracker.ietf.org/doc/rfc7239/
         // for more information about Forwarded header.
         final StringBuilder sb = new StringBuilder();
         sb.append("for: ").append(ctx.<InetSocketAddress>remoteAddress().getAddress().getHostAddress());

File: protobuf/src/main/java/com/linecorp/armeria/server/protobuf/ProtobufRequestConverterFunction.java
Patch:
@@ -70,7 +70,7 @@
  * <a href="https://developers.google.com/protocol-buffers/docs/techniques#streaming">Streaming Multiple Messages</a>
  * for more information.
  * However, {@link Collection} types such as {@code List<Message>} and {@code Set<Message>} are supported
- * when converted from <a href="https://tools.ietf.org/html/rfc7159#section-5">JSON array</a>.
+ * when converted from <a href="https://datatracker.ietf.org/doc/html/rfc7159#section-5">JSON array</a>.
  *
  * <p>Note that this {@link RequestConverterFunction} is applied to an annotated service by default,
  * so you don't have to specify this converter explicitly unless you want to use your own {@link Parser} and

File: protobuf/src/main/java/com/linecorp/armeria/server/protobuf/ProtobufResponseConverterFunction.java
Patch:
@@ -62,7 +62,7 @@
  * <a href="https://developers.google.com/protocol-buffers/docs/techniques#streaming">Streaming Multiple Messages</a>
  * for more information.
  * However, {@link Publisher}, {@link Stream} and {@link Iterable} are supported when converting to
- * <a href="https://tools.ietf.org/html/rfc7159#section-5">JSON array</a>.
+ * <a href="https://datatracker.ietf.org/doc/html/rfc7159#section-5">JSON array</a>.
  *
  * <p>Note that this {@link ResponseConverterFunction} is applied to an annotated service by default,
  * so you don't have to specify this converter explicitly unless you want to use your own {@link Printer}.

File: tomcat9/src/main/java/com/linecorp/armeria/server/tomcat/TomcatService.java
Patch:
@@ -455,7 +455,7 @@ private Request convertRequest(ServiceRequestContext ctx, AggregatedHttpRequest
             }
         }
 
-        // Set the protocol, as documented in https://tools.ietf.org/html/rfc3875#section-4.1.16
+        // Set the protocol, as documented in https://datatracker.ietf.org/doc/html/rfc3875#section-4.1.16
         coyoteReq.protocol().setString(ctx.sessionProtocol().isMultiplex() ? "HTTP/2.0" : "HTTP/1.1");
 
         // Set the method.

File: core/src/test/java/com/linecorp/armeria/common/DefaultAggregatedHttpRequestTest.java
Patch:
@@ -87,7 +87,7 @@ void requestAbortPropagatesException() {
     }
 
     @Test
-    void shouldHaveAllGettersInHttpRequest() throws Exception {
+    void shouldHaveAllGettersInHttpRequest() {
         final List<String> httpRequestMethods = noParameterMethods(HttpRequest.class);
         final List<String> aggregateHttpRequestMethods = noParameterMethods(AggregatedHttpRequest.class,
                                                                             AggregatedHttpMessage.class);

File: thrift0.13/src/main/java/com/linecorp/armeria/internal/client/thrift/THttpClientDelegate.java
Patch:
@@ -107,7 +107,7 @@ public RpcResponse execute(ClientRequestContext ctx, RpcRequest call) {
         }
 
         try {
-            final TMessage header = new TMessage(fullMethod(ctx, method), func.messageType(), seqId);
+            final TMessage header = new TMessage(fullMethod(ctx, func.name()), func.messageType(), seqId);
 
             final ByteBuf buf = ctx.alloc().buffer(128);
 

File: core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessageDuplicator.java
Patch:
@@ -808,7 +808,7 @@ private boolean doSignalSingle(SignalQueue signals) {
                     return false;
                 }
 
-                if (processor.isClosed()) {
+                if (processor.isClosed() && processor.duplicator.unsubscribed == 0) {
                     if (++processor.downstreamSignaledCounter >= REQUEST_REMOVAL_THRESHOLD) {
                         // don't need to use AtomicBoolean cause it's used for rough counting
                         processor.downstreamSignaledCounter = 0;

File: consul/src/test/java/com/linecorp/armeria/internal/consul/ConsulTestBase.java
Patch:
@@ -77,7 +77,7 @@ static void start() throws Throwable {
         // This EmbeddedConsul tested with Consul version above 1.4.0
         final ConsulStarterBuilder builder =
                 ConsulStarterBuilder.consulStarter()
-                                    .withConsulVersion("1.9.0")
+                                    .withConsulVersion("1.9.3")
                                     .withWaitTimeout(120)
                                     .withCustomConfig(aclConfiguration(CONSUL_TOKEN))
                                     .withToken(CONSUL_TOKEN);

File: spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpRequest.java
Patch:
@@ -28,6 +28,7 @@
 import org.springframework.core.io.buffer.DataBuffer;
 import org.springframework.http.HttpCookie;
 import org.springframework.http.HttpHeaders;
+import org.springframework.http.server.reactive.AbstractServerHttpRequest;
 import org.springframework.http.server.reactive.ServerHttpRequest;
 import org.springframework.http.server.reactive.SslInfo;
 import org.springframework.util.LinkedMultiValueMap;

File: thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/text/StackWalkingThriftMessageClassFinder.java
Patch:
@@ -80,7 +80,7 @@ final class StackWalkingThriftMessageClassFinder extends AbstractThriftMessageCl
             final Enum<?> RETAIN_CLASS_REFERENCE =
                     Arrays.stream((Enum<?>[]) Option.getEnumConstants())
                           .filter(op -> "RETAIN_CLASS_REFERENCE".equals(op.name()))
-                          .findFirst().orElseGet(null);
+                          .findFirst().orElse(null);
 
             if (RETAIN_CLASS_REFERENCE == null) {
                 throw new IllegalStateException("Failed to get RETAIN_CLASS_REFERENCE option");

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcClientFactoryUtil.java
Patch:
@@ -53,6 +53,7 @@ static <T> Method findStubFactoryMethod(Class<T> clientType) {
 
             return method;
         }
+        return null;
     }
 
     static IllegalStateException newClientStubCreationException(Throwable cause) {

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java
Patch:
@@ -67,6 +67,7 @@
 import com.linecorp.armeria.server.annotation.ExceptionHandlerFunction;
 import com.linecorp.armeria.server.annotation.ExceptionVerbosity;
 import com.linecorp.armeria.server.annotation.FallthroughException;
+import com.linecorp.armeria.server.annotation.HttpFileResponseConverterFunction;
 import com.linecorp.armeria.server.annotation.HttpResult;
 import com.linecorp.armeria.server.annotation.JacksonResponseConverterFunction;
 import com.linecorp.armeria.server.annotation.Path;
@@ -94,7 +95,8 @@ public final class AnnotatedService implements HttpService {
     private static final List<ResponseConverterFunction> defaultResponseConverters =
             ImmutableList.of(new JacksonResponseConverterFunction(),
                              new StringResponseConverterFunction(),
-                             new ByteArrayResponseConverterFunction());
+                             new ByteArrayResponseConverterFunction(),
+                             new HttpFileResponseConverterFunction());
 
     static final List<ResponseConverterFunctionProvider> responseConverterFunctionProviders =
             ImmutableList.copyOf(ServiceLoader.load(ResponseConverterFunctionProvider.class,

File: spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/ArmeriaConfigurationNetUtil.java
Patch:
@@ -13,7 +13,6 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-
 package com.linecorp.armeria.internal.spring;
 
 import static com.google.common.base.MoreObjects.firstNonNull;

File: spring/boot2-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationWithConsumerTest.java
Patch:
@@ -55,7 +55,7 @@ public class ArmeriaAutoConfigurationWithConsumerTest {
     public static class TestConfiguration {
         @Bean
         public Consumer<ServerBuilder> customizer() {
-            return sb -> sb.service("/customizer", ((ctx, req) -> HttpResponse.of(HttpStatus.OK)));
+            return sb -> sb.service("/customizer", (ctx, req) -> HttpResponse.of(HttpStatus.OK));
         }
     }
 

File: spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ReactiveWebServerCustomKeyAlias1Test.java
Patch:
@@ -16,14 +16,12 @@
 package com.linecorp.armeria.spring.web.reactive;
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.context.annotation.Configuration;
 import org.springframework.test.context.ActiveProfiles;
 
 @ActiveProfiles("test_custom_key_alias_1")
 class ReactiveWebServerCustomKeyAlias1Test extends AbstractReactiveWebServerCustomKeyAliasTest {
 
     @SpringBootApplication
-    @Configuration
     static class TestConfiguration {}
 
     ReactiveWebServerCustomKeyAlias1Test() {

File: spring/boot2-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ReactiveWebServerCustomKeyAlias2Test.java
Patch:
@@ -16,14 +16,12 @@
 package com.linecorp.armeria.spring.web.reactive;
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.context.annotation.Configuration;
 import org.springframework.test.context.ActiveProfiles;
 
 @ActiveProfiles("test_custom_key_alias_2")
 class ReactiveWebServerCustomKeyAlias2Test extends AbstractReactiveWebServerCustomKeyAliasTest {
 
     @SpringBootApplication
-    @Configuration
     static class TestConfiguration {}
 
     ReactiveWebServerCustomKeyAlias2Test() {

File: core/src/main/java/com/linecorp/armeria/client/Http2ClientKeepAliveHandler.java
Patch:
@@ -25,11 +25,11 @@
 
 final class Http2ClientKeepAliveHandler extends Http2KeepAliveHandler {
     Http2ClientKeepAliveHandler(Channel channel, Http2FrameWriter frameWriter, Timer keepAliveTimer,
-                                long idleTimeoutMillis, long pingIntervalMillis) {
+                                long idleTimeoutMillis, long pingIntervalMillis,
+                                long maxConnectionAgeMillis, int maxNumRequestsPerConnection) {
 
-        // TODO(ikhoon): Should set maxConnectionAgeMillis by https://github.com/line/armeria/pull/2741
         super(channel, frameWriter, "client", keepAliveTimer,
-              idleTimeoutMillis, pingIntervalMillis, /* maxConnectionAgeMillis */ 0);
+              idleTimeoutMillis, pingIntervalMillis, maxConnectionAgeMillis, maxNumRequestsPerConnection);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/internal/common/HttpObjectEncoder.java
Patch:
@@ -16,8 +16,6 @@
 
 package com.linecorp.armeria.internal.common;
 
-import javax.annotation.Nullable;
-
 import com.linecorp.armeria.common.ByteBufAccessMode;
 import com.linecorp.armeria.common.ClosedSessionException;
 import com.linecorp.armeria.common.HttpData;
@@ -41,7 +39,6 @@ default EventLoop eventLoop() {
         return channel().eventLoop();
     }
 
-    @Nullable
     KeepAliveHandler keepAliveHandler();
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/Http2ServerKeepAliveHandler.java
Patch:
@@ -25,9 +25,10 @@
 
 final class Http2ServerKeepAliveHandler extends Http2KeepAliveHandler {
     Http2ServerKeepAliveHandler(Channel channel, Http2FrameWriter frameWriter, Timer keepAliveTimer,
-                                long idleTimeoutMillis, long pingIntervalMillis, long maxConnectionAgeMillis) {
+                                long idleTimeoutMillis, long pingIntervalMillis,
+                                long maxConnectionAgeMillis, int maxNumRequestsPerConnection) {
         super(channel, frameWriter, "server", keepAliveTimer,
-              idleTimeoutMillis, pingIntervalMillis, maxConnectionAgeMillis);
+              idleTimeoutMillis, pingIntervalMillis, maxConnectionAgeMillis, maxNumRequestsPerConnection);
     }
 
     @Override

File: core/src/test/java/com/linecorp/armeria/server/ServerMaxConnectionAgeTest.java
Patch:
@@ -120,7 +120,7 @@ public void connectionClosed(SessionProtocol protocol, InetSocketAddress remoteA
 
     @CsvSource({ "H1C", "H1" })
     @ParameterizedTest
-    void http1MaxConnectionAge(SessionProtocol protocol) throws InterruptedException {
+    void http1MaxConnectionAge(SessionProtocol protocol) {
         final int maxClosedConnection = 5;
         final ConnectionPoolListener connectionPoolListener = new ConnectionPoolListener() {
             @Override

File: spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/AbstractArmeriaBeanPostProcessor.java
Patch:
@@ -70,7 +70,7 @@ abstract class AbstractArmeriaBeanPostProcessor {
 
     protected InjectionMetadata findLocalArmeriaPortMetadata(
             String beanName, Class<?> clazz, @Nullable PropertyValues pvs) {
-        final String cacheKey = Strings.isNullOrEmpty(beanName) ? beanName : clazz.getName();
+        final String cacheKey = !Strings.isNullOrEmpty(beanName) ? beanName : clazz.getName();
         InjectionMetadata metadata = injectionMetadataCache.get(cacheKey);
         if (InjectionMetadata.needsRefresh(metadata, clazz)) {
             synchronized (injectionMetadataCache) {

File: core/src/main/java/com/linecorp/armeria/common/HttpHeaders.java
Patch:
@@ -89,10 +89,10 @@
  *       <li>e.g. {@code "42"}, {@code "string"}, {@code "text/plain; charset=utf-8"}</li>
  *     </ul>
  *   </li>
- *   <li>{@link CacheControl}
+ *   <li>{@link CacheControl} and {@link ContentDisposition}
  *     <ul>
- *       <li>Converted via {@link CacheControl#asHeaderValue() asHeaderValue()}</li>
- *       <li>e.g. {@code "no-cache, no-store, must-revalidate"}</li>
+ *       <li>Converted via {@code asHeaderValue()}</li>
+ *       <li>e.g. {@code "no-cache, no-store, must-revalidate"}, {@code "form-data; name=\"fieldName\""}</li>
  *     </ul>
  *   </li>
  *   <li>{@link Instant}, {@link TemporalAccessor}, {@link Date} and {@link Calendar}

File: core/src/main/java/com/linecorp/armeria/common/QueryParams.java
Patch:
@@ -92,10 +92,10 @@
  *       <li>e.g. {@code "42"}, {@code "string"}, {@code "text/plain; charset=utf-8"}</li>
  *     </ul>
  *   </li>
- *   <li>{@link CacheControl}
+ *   <li>{@link CacheControl} and {@link ContentDisposition}
  *     <ul>
- *       <li>Converted via {@link CacheControl#asHeaderValue() asHeaderValue()}</li>
- *       <li>e.g. {@code "no-cache, no-store, must-revalidate"}</li>
+ *       <li>Converted via {@code asHeaderValue()}</li>
+ *       <li>e.g. {@code "no-cache, no-store, must-revalidate"}, {@code "form-data; name=\"fieldName\""}</li>
  *     </ul>
  *   </li>
  *   <li>{@link Instant}, {@link TemporalAccessor}, {@link Date} and {@link Calendar}

File: core/src/main/java/com/linecorp/armeria/common/RequestHeadersBuilder.java
Patch:
@@ -121,6 +121,9 @@ default RequestHeadersBuilder acceptLanguages(LanguageRange... acceptedLanguages
     @Override
     RequestHeadersBuilder contentType(MediaType contentType);
 
+    @Override
+    RequestHeadersBuilder contentDisposition(ContentDisposition contentDisposition);
+
     @Override
     RequestHeadersBuilder add(CharSequence name, String value);
 

File: core/src/main/java/com/linecorp/armeria/common/ResponseHeadersBuilder.java
Patch:
@@ -53,6 +53,9 @@ public interface ResponseHeadersBuilder extends HttpHeadersBuilder, ResponseHead
     @Override
     ResponseHeadersBuilder contentType(MediaType contentType);
 
+    @Override
+    ResponseHeadersBuilder contentDisposition(ContentDisposition contentDisposition);
+
     @Override
     ResponseHeadersBuilder add(CharSequence name, String value);
 

File: core/src/test/java/com/linecorp/armeria/common/StringMultimapDerivedApiConsistencyTest.java
Patch:
@@ -60,7 +60,8 @@ private static List<String> signature(Class<?> type) {
                          // Ignore the methods only available in HttpHeaderGetters or HttpHeadersBuilder.
                          if ("endOfStream".equals(methodName) ||
                              "isEndOfStream".equals(methodName) ||
-                             "contentType".equals(methodName)) {
+                             "contentType".equals(methodName) ||
+                             "contentDisposition".equals(methodName)) {
                              return false;
                          }
 

File: dropwizard2/src/main/java/com/linecorp/armeria/dropwizard/ArmeriaServerFactory.java
Patch:
@@ -15,7 +15,8 @@
  */
 package com.linecorp.armeria.dropwizard;
 
-import java.util.Objects;
+import static java.util.Objects.requireNonNull;
+
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
@@ -80,7 +81,7 @@ public ServerBuilder getServerBuilder() {
 
     @Override
     public Server build(Environment environment) {
-        Objects.requireNonNull(environment, "environment");
+        requireNonNull(environment, "environment");
         printBanner(environment.getName());
         final MetricRegistry metrics = environment.metrics();
         final ThreadPool threadPool = createThreadPool(metrics);

File: core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java
Patch:
@@ -327,6 +327,7 @@ public void onComplete() {
     private void fail(Throwable cause) {
         if (tryComplete()) {
             setDone(true);
+            logBuilder().endRequest(cause);
             logBuilder().endResponse(cause);
             final ServiceConfig config = reqCtx.config();
             if (config.transientServiceOptions().contains(TransientServiceOption.WITH_ACCESS_LOGGING)) {
@@ -394,6 +395,7 @@ private void addCallbackAndFlush(Throwable cause, State oldState, ChannelFuture
                     }
                     // Write an access log always with a cause. Respect the first specified cause.
                     if (tryComplete()) {
+                        logBuilder().endRequest(cause);
                         logBuilder().endResponse(cause);
                         final ServiceConfig config = reqCtx.config();
                         if (config.transientServiceOptions().contains(
@@ -500,6 +502,7 @@ void handleWriteComplete(ChannelFuture future, boolean endOfStream, boolean isSu
 
             if (endOfStream) {
                 if (tryComplete()) {
+                    logBuilder().endRequest();
                     logBuilder().endResponse();
                     final ServiceConfig config = reqCtx.config();
                     if (config.transientServiceOptions().contains(TransientServiceOption.WITH_ACCESS_LOGGING)) {

File: core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessage.java
Patch:
@@ -17,9 +17,9 @@
 package com.linecorp.armeria.common.stream;
 
 import static com.linecorp.armeria.common.stream.StreamMessageUtil.EMPTY_OPTIONS;
-import static com.linecorp.armeria.common.stream.StreamMessageUtil.abortedOrLate;
 import static com.linecorp.armeria.common.stream.StreamMessageUtil.containsNotifyCancellation;
 import static com.linecorp.armeria.common.stream.StreamMessageUtil.containsWithPooledObjects;
+import static com.linecorp.armeria.common.stream.SubscriberUtil.abortedOrLate;
 import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;
 import static java.util.Objects.requireNonNull;
 

File: core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessageDuplicator.java
Patch:
@@ -19,9 +19,9 @@
 import static com.google.common.base.MoreObjects.toStringHelper;
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkState;
-import static com.linecorp.armeria.common.stream.StreamMessageUtil.abortedOrLate;
 import static com.linecorp.armeria.common.stream.StreamMessageUtil.containsNotifyCancellation;
 import static com.linecorp.armeria.common.stream.StreamMessageUtil.containsWithPooledObjects;
+import static com.linecorp.armeria.common.stream.SubscriberUtil.abortedOrLate;
 import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;
 import static java.util.Objects.requireNonNull;
 

File: core/src/main/java/com/linecorp/armeria/common/stream/DeferredStreamMessage.java
Patch:
@@ -74,10 +74,10 @@ public class DeferredStreamMessage<T> extends AbstractStreamMessage<T> {
     private Subscription upstreamSubscription;
 
     @Nullable
-    @SuppressWarnings("unused") // Updated only via subscriptionUpdater
+    @SuppressWarnings("unused") // Updated only via downstreamSubscriptionUpdater
     private volatile SubscriptionImpl downstreamSubscription;
 
-    @SuppressWarnings("unused") // Updated only via subscribedToDelegateUpdater
+    @SuppressWarnings("unused") // Updated only via subscribedToUpstreamUpdater
     private volatile int subscribedToUpstream;
 
     // Only accessed from subscription's executor.

File: core/src/main/java/com/linecorp/armeria/common/stream/PublisherBasedStreamMessage.java
Patch:
@@ -16,8 +16,8 @@
 
 package com.linecorp.armeria.common.stream;
 
-import static com.linecorp.armeria.common.stream.StreamMessageUtil.abortedOrLate;
 import static com.linecorp.armeria.common.stream.StreamMessageUtil.containsNotifyCancellation;
+import static com.linecorp.armeria.common.stream.SubscriberUtil.abortedOrLate;
 import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;
 import static java.util.Objects.requireNonNull;
 

File: core/src/main/java/com/linecorp/armeria/common/AbstractHttpRequestBuilder.java
Patch:
@@ -186,7 +186,7 @@ public AbstractHttpRequestBuilder content(MediaType contentType, HttpData conten
     }
 
     /**
-     * Sets a header for this request. For example:
+     * Adds a header for this request. For example:
      * <pre>{@code
      * HttpRequest.builder()
      *            .get("/")
@@ -200,7 +200,7 @@ public AbstractHttpRequestBuilder header(CharSequence name, Object value) {
     }
 
     /**
-     * Sets multiple headers for this request. For example:
+     * Adds multiple headers for this request. For example:
      * <pre>{@code
      * HttpRequest.builder()
      *            .get("/")

File: core/src/main/java/com/linecorp/armeria/server/ServiceConfigBuilder.java
Patch:
@@ -100,19 +100,19 @@ public final ServiceConfigBuilder decorators(
     }
 
     @Override
-    public ServiceConfigSetters decorators(
+    public ServiceConfigBuilder decorators(
             Iterable<? extends Function<? super HttpService, ? extends HttpService>> decorators) {
         throw new UnsupportedOperationException();
     }
 
     @Override
-    public ServiceConfigSetters defaultServiceName(String defaultServiceName) {
+    public ServiceConfigBuilder defaultServiceName(String defaultServiceName) {
         this.defaultServiceName = requireNonNull(defaultServiceName, "defaultServiceName");
         return this;
     }
 
     @Override
-    public ServiceConfigSetters defaultLogName(String defaultLogName) {
+    public ServiceConfigBuilder defaultLogName(String defaultLogName) {
         this.defaultLogName = requireNonNull(defaultLogName, "defaultLogName");
         return this;
     }

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostAnnotatedServiceBindingBuilder.java
Patch:
@@ -217,7 +217,7 @@ public final VirtualHostAnnotatedServiceBindingBuilder decorators(
     }
 
     @Override
-    public ServiceConfigSetters decorators(
+    public VirtualHostAnnotatedServiceBindingBuilder decorators(
             Iterable<? extends Function<? super HttpService, ? extends HttpService>> decorators) {
         defaultServiceConfigSetters.decorators(decorators);
         return this;

File: core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java
Patch:
@@ -768,6 +768,7 @@ public String serviceName() {
     @Override
     public String name() {
         ensureAvailable(RequestLogProperty.NAME);
+        assert name != null;
         return name;
     }
 
@@ -908,11 +909,10 @@ public void requestContent(@Nullable Object requestContent, @Nullable Object raw
 
         this.requestContent = requestContent;
         this.rawRequestContent = rawRequestContent;
-        updateFlags(RequestLogProperty.REQUEST_CONTENT);
-
         if (requestContent instanceof RpcRequest && ctx.rpcRequest() == null) {
             ctx.updateRpcRequest((RpcRequest) requestContent);
         }
+        updateFlags(RequestLogProperty.REQUEST_CONTENT);
 
         final int requestCompletionFlags = RequestLogProperty.FLAGS_REQUEST_COMPLETE & ~deferredFlags;
         if (isAvailable(requestCompletionFlags)) {

File: spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/AbstractArmeriaBeanPostProcessor.java
Patch:
@@ -144,7 +144,7 @@ private InjectionMetadata buildLocalArmeriaPortMetadata(Class<?> clazz) {
         return new InjectionMetadata(clazz, elements);
     }
 
-    private void serServer(Server server) {
+    private void setServer(Server server) {
         this.server = requireNonNull(server, "server");
     }
 
@@ -168,7 +168,7 @@ private LocalArmeriaPortElement(Member member, AnnotatedElement ae, @Nullable Pr
             Server server = getServer();
             if (server == null) {
                 server = beanFactory.getBean(Server.class);
-                serServer(server);
+                setServer(server);
             }
 
             Integer port = portCache.get(protocol);
@@ -201,7 +201,7 @@ private LocalArmeriaPortsElement(Member member, @Nullable PropertyDescriptor pd)
             Server server = getServer();
             if (server == null) {
                 server = beanFactory.getBean(Server.class);
-                serServer(server);
+                setServer(server);
             }
 
             final Builder<Integer> ports = ImmutableList.builder();

File: core/src/test/java/com/linecorp/armeria/common/FlagsTest.java
Patch:
@@ -48,8 +48,8 @@ class FlagsTest {
     @Test
     void epollAvailableOnLinux() {
         assumeThat(osName).startsWith("linux");
-        assumeThat(System.getenv("WSLENV")).isNull();
-        assumeThat(System.getProperty("com.linecorp.armeria.useEpoll")).isEqualTo("false");
+        assumeThat(System.getProperty("com.linecorp.armeria.useEpoll")).isNull();
+        assumeThat(System.getProperty("com.linecorp.armeria.transportType")).isNull();
 
         assertThat(Flags.transportType()).isEqualTo(TransportType.EPOLL);
         assertThat(Epoll.isAvailable()).isTrue();
@@ -63,7 +63,7 @@ void epollAvailableOnLinux() {
     void openSslAvailable() {
         assumeThat(osName.startsWith("linux") || osName.startsWith("windows") ||
                    osName.startsWith("macosx") || osName.startsWith("osx")).isTrue();
-        assumeThat(System.getProperty("com.linecorp.armeria.useOpenSsl")).isEqualTo("false");
+        assumeThat(System.getProperty("com.linecorp.armeria.useOpenSsl")).isNull();
 
         assertThat(Flags.useOpenSsl()).isTrue();
         assertThat(OpenSsl.isAvailable()).isTrue();

File: core/src/test/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolverTest.java
Patch:
@@ -27,7 +27,7 @@
 
 import com.linecorp.armeria.client.endpoint.dns.TestDnsServer;
 import com.linecorp.armeria.common.CommonPools;
-import com.linecorp.armeria.common.util.EventLoopGroups;
+import com.linecorp.armeria.common.util.TransportType;
 
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelOutboundHandlerAdapter;
@@ -69,7 +69,7 @@ public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)
             final EventLoop eventLoop = CommonPools.workerGroup().next();
             final DefaultDnsNameResolver resolver = new DefaultDnsNameResolver(
                     new DnsNameResolverBuilder(eventLoop)
-                            .channelType(EventLoopGroups.datagramChannelType(eventLoop))
+                            .channelType(TransportType.datagramChannelType(eventLoop))
                             .queryTimeoutMillis(Long.MAX_VALUE)
                             .nameServerProvider(name -> DnsServerAddresses.sequential(dnsServer.addr())
                                                                           .stream())

File: core/src/main/java/com/linecorp/armeria/common/stream/DeferredStreamMessage.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.linecorp.armeria.common.stream;
 
+import static com.linecorp.armeria.common.stream.StreamMessageUtil.EMPTY_OPTIONS;
 import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;
 import static java.util.Objects.requireNonNull;
 
@@ -166,7 +167,7 @@ public final boolean isEmpty() {
     }
 
     @Override
-    final long demand() {
+    public final long demand() {
         return pendingDemand;
     }
 
@@ -296,7 +297,7 @@ public final void abort(Throwable cause) {
         }
 
         final SubscriptionImpl newSubscription = new SubscriptionImpl(
-                this, AbortingSubscriber.get(cause), ImmediateEventExecutor.INSTANCE, false, false);
+                this, AbortingSubscriber.get(cause), ImmediateEventExecutor.INSTANCE, EMPTY_OPTIONS);
         downstreamSubscriptionUpdater.compareAndSet(this, null, newSubscription);
 
         final StreamMessage<T> upstream = this.upstream;

File: core/src/main/java/com/linecorp/armeria/common/stream/FixedStreamMessage.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.linecorp.armeria.common.stream;
 
+import static com.linecorp.armeria.common.stream.StreamMessageUtil.EMPTY_OPTIONS;
 import static com.linecorp.armeria.common.util.Exceptions.throwIfFatal;
 import static java.util.Objects.requireNonNull;
 
@@ -94,7 +95,7 @@ final void request(long n) {
     }
 
     @Override
-    final long demand() {
+    public final long demand() {
         return requested;
     }
 
@@ -166,7 +167,7 @@ private void abort0(Throwable cause) {
         }
 
         final SubscriptionImpl newSubscription = new SubscriptionImpl(
-                this, AbortingSubscriber.get(cause), ImmediateEventExecutor.INSTANCE, false, false);
+                this, AbortingSubscriber.get(cause), ImmediateEventExecutor.INSTANCE, EMPTY_OPTIONS);
         subscriptionUpdater.compareAndSet(this, null, newSubscription);
         cancelOrAbort(cause);
     }

File: core/src/main/java/com/linecorp/armeria/common/stream/HttpDecoderInput.java
Patch:
@@ -23,10 +23,10 @@
 import io.netty.buffer.ByteBuf;
 
 /**
- * An input of {@link HttpDeframer} which is used to read a stream of {@link HttpData}.
+ * An input of {@link HttpDecoder} which is used to read a stream of {@link HttpData}.
  */
 @UnstableApi
-public interface HttpDeframerInput extends SafeCloseable {
+public interface HttpDecoderInput extends SafeCloseable {
 
     /**
      * Returns the number of readable bytes.

File: core/src/main/java/com/linecorp/armeria/common/stream/HttpDecoderOutput.java
Patch:
@@ -19,13 +19,13 @@
 import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
- * An output of {@link HttpDeframer} which holds the decoded data.
+ * An output of {@link HttpDecoder} which holds the decoded data.
  */
 @UnstableApi
 @FunctionalInterface
-public interface HttpDeframerOutput<T> {
+public interface HttpDecoderOutput<T> {
     /**
-     * Adds the decoded item to this {@link HttpDeframerOutput}.
+     * Adds the decoded item to this {@link HttpDecoderOutput}.
      */
     void add(T e);
 }

File: core/src/main/java/com/linecorp/armeria/common/stream/StreamMessageUtil.java
Patch:
@@ -22,6 +22,8 @@
 
 final class StreamMessageUtil {
 
+    static final SubscriptionOption[] EMPTY_OPTIONS = {};
+
     static Throwable abortedOrLate(Subscriber<?> oldSubscriber) {
         if (oldSubscriber instanceof AbortingSubscriber) {
             return ((AbortingSubscriber<?>) oldSubscriber).cause();

File: eureka/src/main/java/com/linecorp/armeria/server/eureka/EurekaUpdatingListener.java
Patch:
@@ -165,6 +165,7 @@ public void serverStarted(Server server) throws Exception {
                                 newInfo.getHostName(), client.uri(), cause);
                     return null;
                 }
+
                 final ResponseHeaders headers = res.headers();
                 if (headers.status() != HttpStatus.NO_CONTENT) {
                     logger.warn("Failed to register {} to Eureka: {}. (status: {}, content: {})",

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcClientOptions.java
Patch:
@@ -31,7 +31,7 @@
 import com.linecorp.armeria.common.grpc.GrpcJsonMarshaller;
 import com.linecorp.armeria.common.grpc.GrpcJsonMarshallerBuilder;
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
-import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframerHandler;
+import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageFramer;
 import com.linecorp.armeria.unsafe.grpc.GrpcUnsafeBufferUtil;
 
@@ -44,12 +44,12 @@ public final class GrpcClientOptions {
 
     /**
      * The maximum size, in bytes, of messages coming in a response.
-     * The default value is {@value ArmeriaMessageDeframerHandler#NO_MAX_INBOUND_MESSAGE_SIZE},
+     * The default value is {@value ArmeriaMessageDeframer#NO_MAX_INBOUND_MESSAGE_SIZE},
      * which means 'use {@link ClientOptions#MAX_RESPONSE_LENGTH}'.
      */
     public static final ClientOption<Integer> MAX_INBOUND_MESSAGE_SIZE_BYTES =
             ClientOption.define("GRPC_MAX_INBOUND_MESSAGE_SIZE_BYTES",
-                                ArmeriaMessageDeframerHandler.NO_MAX_INBOUND_MESSAGE_SIZE);
+                                ArmeriaMessageDeframer.NO_MAX_INBOUND_MESSAGE_SIZE);
 
     /**
      * The maximum size, in bytes, of messages sent in a request.

File: grpc/src/main/java/com/linecorp/armeria/internal/common/grpc/GrpcStatus.java
Patch:
@@ -61,7 +61,7 @@
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
 import com.linecorp.armeria.common.grpc.protocol.StatusMessageEscaper;
 import com.linecorp.armeria.common.stream.ClosedStreamException;
-import com.linecorp.armeria.common.stream.HttpDeframer;
+import com.linecorp.armeria.common.stream.StreamMessage;
 
 import io.grpc.Metadata;
 import io.grpc.Status;
@@ -281,9 +281,9 @@ public static ThrowableProto serializeThrowable(Throwable t) {
      * to the {@link TransportStatusListener} when the response is completed.
      */
     public static void reportStatusLater(HttpHeaders headers,
-                                         HttpDeframer<DeframedMessage> deframer,
+                                         StreamMessage<DeframedMessage> deframedStreamMessage,
                                          TransportStatusListener transportStatusListener) {
-        deframer.whenComplete().handle((unused1, unused2) -> {
+        deframedStreamMessage.whenComplete().handle((unused1, unused2) -> {
             reportStatus(headers, transportStatusListener);
             return null;
         });

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.java
Patch:
@@ -50,7 +50,7 @@
 import com.linecorp.armeria.common.grpc.GrpcJsonMarshallerBuilder;
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
 import com.linecorp.armeria.common.grpc.GrpcStatusFunction;
-import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframerHandler;
+import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageFramer;
 import com.linecorp.armeria.server.HttpServiceWithRoutes;
 import com.linecorp.armeria.server.Route;
@@ -116,7 +116,7 @@ public final class GrpcServiceBuilder {
 
     private Set<SerializationFormat> supportedSerializationFormats = DEFAULT_SUPPORTED_SERIALIZATION_FORMATS;
 
-    private int maxInboundMessageSizeBytes = ArmeriaMessageDeframerHandler.NO_MAX_INBOUND_MESSAGE_SIZE;
+    private int maxInboundMessageSizeBytes = ArmeriaMessageDeframer.NO_MAX_INBOUND_MESSAGE_SIZE;
 
     private int maxOutboundMessageSizeBytes = ArmeriaMessageFramer.NO_MAX_OUTBOUND_MESSAGE_SIZE;
 

File: spring/boot2-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfiguration.java
Patch:
@@ -204,7 +204,7 @@ ArmeriaServerConfigurator actuatorServerConfigurator(
                             OBJECT_MAPPER.writeValueAsBytes(ImmutableMap.of("_links", links))
                     );
                 };
-                sb.service(route, linksService);
+                sb.route().addRoute(route).defaultServiceName("LinksService").build(linksService);
                 if (cors != null) {
                     cors.route(endpointMapping.getPath());
                 }

File: eureka/src/main/java/com/linecorp/armeria/internal/common/eureka/InstanceInfo.java
Patch:
@@ -368,7 +368,7 @@ public PortWrapper(@JsonProperty("@enabled") boolean enabled, @JsonProperty("$")
             this.port = port;
         }
 
-        @JsonProperty
+        @JsonProperty("@enabled")
         @JsonSerialize(using = ToStringSerializer.class)
         public boolean isEnabled() {
             return enabled;

File: core/src/main/java/com/linecorp/armeria/common/stream/PublisherBasedStreamMessage.java
Patch:
@@ -263,6 +263,7 @@ private void cancelOrAbort0(boolean cancel) {
 
         @Override
         public void onSubscribe(Subscription subscription) {
+            requireNonNull(subscription, "subscription");
             if (executor.inEventLoop()) {
                 onSubscribe0(subscription);
             } else {
@@ -287,6 +288,7 @@ private void onSubscribe0(Subscription subscription) {
 
         @Override
         public void onNext(Object obj) {
+            requireNonNull(obj, "obj");
             parent.publishedAny = true;
             if (executor.inEventLoop()) {
                 onNext0(obj);
@@ -308,6 +310,7 @@ private void onNext0(Object obj) {
 
         @Override
         public void onError(Throwable cause) {
+            requireNonNull(cause, "cause");
             if (executor.inEventLoop()) {
                 onError0(cause);
             } else {

File: grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/HttpStreamDeframerTest.java
Patch:
@@ -56,7 +56,7 @@ void setUp() {
         final TransportStatusListener statusListener = (status, metadata) -> statusRef.set(status);
         final HttpStreamDeframerHandler handler =
                 new HttpStreamDeframerHandler(DecompressorRegistry.getDefaultInstance(), statusListener,
-                                              Integer.MAX_VALUE);
+                                              null, Integer.MAX_VALUE);
         deframer = HttpDeframer.of(handler, ByteBufAllocator.DEFAULT);
         handler.setDeframer(deframer);
     }

File: core/src/main/java/com/linecorp/armeria/common/stream/HttpDeframerHandler.java
Patch:
@@ -22,12 +22,14 @@
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpObject;
 import com.linecorp.armeria.common.ResponseHeaders;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * An {@link HttpDeframerHandler} that decodes a stream of {@link HttpObject}s to N objects.
  *
  * @param <T> the result type of being deframed
  */
+@UnstableApi
 public interface HttpDeframerHandler<T> {
 
     /**

File: core/src/main/java/com/linecorp/armeria/common/stream/HttpDeframerInput.java
Patch:
@@ -17,13 +17,15 @@
 package com.linecorp.armeria.common.stream;
 
 import com.linecorp.armeria.common.HttpData;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.util.SafeCloseable;
 
 import io.netty.buffer.ByteBuf;
 
 /**
  * An input of {@link HttpDeframer} which is used to read a stream of {@link HttpData}.
  */
+@UnstableApi
 public interface HttpDeframerInput extends SafeCloseable {
 
     /**

File: core/src/main/java/com/linecorp/armeria/common/stream/HttpDeframerOutput.java
Patch:
@@ -16,9 +16,12 @@
 
 package com.linecorp.armeria.common.stream;
 
+import com.linecorp.armeria.common.annotation.UnstableApi;
+
 /**
  * An output of {@link HttpDeframer} which holds the decoded data.
  */
+@UnstableApi
 @FunctionalInterface
 public interface HttpDeframerOutput<T> {
     /**

File: grpc-protocol/src/main/java/com/linecorp/armeria/client/grpc/protocol/UnaryGrpcClient.java
Patch:
@@ -165,7 +165,7 @@ public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) {
                            final ArmeriaMessageDeframerHandler handler =
                                    new ArmeriaMessageDeframerHandler(Integer.MAX_VALUE);
                            final HttpDeframer<DeframedMessage> deframer =
-                                   new HttpDeframer<>(handler, ctx.alloc());
+                                   HttpDeframer.of(handler, ctx.alloc());
 
                            StreamMessage.of(msg.content()).subscribe(deframer, ctx.eventLoop());
                            deframer.subscribe(singleSubscriber(msg, responseFuture), ctx.eventLoop());

File: grpc-protocol/src/main/java/com/linecorp/armeria/internal/common/grpc/protocol/HttpDeframerUtil.java
Patch:
@@ -35,9 +35,9 @@ public static HttpDeframer<DeframedMessage> newHttpDeframer(
             ByteBufAllocator alloc, boolean decodeBase64) {
         if (decodeBase64) {
             final Base64Decoder base64Decoder = new Base64Decoder(alloc);
-            return new HttpDeframer<>(handler, alloc, data -> base64Decoder.decode(data.byteBuf()));
+            return HttpDeframer.of(handler, alloc, data -> base64Decoder.decode(data.byteBuf()));
         } else {
-            return new HttpDeframer<>(handler, alloc, HttpData::byteBuf);
+            return HttpDeframer.of(handler, alloc, HttpData::byteBuf);
         }
     }
 

File: grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnsafeUnaryGrpcService.java
Patch:
@@ -110,7 +110,7 @@ private static CompletableFuture<ByteBuf> deframeMessage(HttpData framed,
                                                              ByteBufAllocator alloc) {
         final CompletableFuture<ByteBuf> deframed = new CompletableFuture<>();
         final ArmeriaMessageDeframerHandler handler = new ArmeriaMessageDeframerHandler(Integer.MAX_VALUE);
-        final HttpDeframer<DeframedMessage> deframer = new HttpDeframer<>(handler, alloc);
+        final HttpDeframer<DeframedMessage> deframer = HttpDeframer.of(handler, alloc);
 
         StreamMessage.of(framed).subscribe(deframer, eventLoop);
         deframer.subscribe(singleSubscriber(deframed), eventLoop);

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/UnframedGrpcService.java
Patch:
@@ -280,7 +280,7 @@ private static void deframeAndRespond(
         final ArmeriaMessageDeframerHandler handler = new ArmeriaMessageDeframerHandler(
                 // Max outbound message size is handled by the GrpcService, so we don't need to set it here.
                 Integer.MAX_VALUE);
-        final HttpDeframer<DeframedMessage> deframer = new HttpDeframer<>(handler, ctx.alloc());
+        final HttpDeframer<DeframedMessage> deframer = HttpDeframer.of(handler, ctx.alloc());
         StreamMessage.of(grpcResponse.content()).subscribe(deframer, ctx.eventLoop());
         deframer.subscribe(singleSubscriber(unframedHeaders, res), ctx.eventLoop());
     }

File: grpc/src/test/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageDeframerHandlerTest.java
Patch:
@@ -72,13 +72,13 @@ class ArmeriaMessageDeframerHandlerTest {
     void setUp() {
         final ArmeriaMessageDeframerHandler handler = new ArmeriaMessageDeframerHandler(MAX_MESSAGE_SIZE)
                 .decompressor(ForwardingDecompressor.forGrpc(new Gzip()));
-        deframer = new HttpDeframer<>(handler, UnpooledByteBufAllocator.DEFAULT);
+        deframer = HttpDeframer.of(handler, UnpooledByteBufAllocator.DEFAULT);
         deframedMessage = new DeframedMessage(GrpcTestUtil.requestByteBuf(), 0);
     }
 
     @AfterEach
     void tearDown() throws Exception {
-        deframer.close();
+        deframer.abort();
         deframedMessage.buf().release();
     }
 

File: grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/HttpDeframerTckTest.java
Patch:
@@ -70,7 +70,7 @@ public Publisher<DeframedMessage> createPublisher(long elements) {
         final HttpStreamDeframerHandler handler =
                 new HttpStreamDeframerHandler(DecompressorRegistry.getDefaultInstance(), noopListener, -1);
         final HttpDeframer<DeframedMessage> deframer =
-                        new HttpDeframer<>(handler, ByteBufAllocator.DEFAULT);
+                        HttpDeframer.of(handler, ByteBufAllocator.DEFAULT);
 
         source.subscribe(deframer, ImmediateEventExecutor.INSTANCE);
         return Flux.from(deframer).doOnNext(message -> byteBufs.add(message.buf()));
@@ -81,7 +81,7 @@ public Publisher<DeframedMessage> createFailedPublisher() {
         final Flux<HttpData> source = Flux.error(new RuntimeException());
         final HttpStreamDeframerHandler handler =
                 new HttpStreamDeframerHandler(DecompressorRegistry.getDefaultInstance(), noopListener, -1);
-        final HttpDeframer<DeframedMessage> reader = new HttpDeframer<>(handler, ByteBufAllocator.DEFAULT);
+        final HttpDeframer<DeframedMessage> reader = HttpDeframer.of(handler, ByteBufAllocator.DEFAULT);
         source.subscribe(reader);
         return reader;
     }

File: grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/HttpStreamDeframerTest.java
Patch:
@@ -57,7 +57,7 @@ void setUp() {
         final HttpStreamDeframerHandler handler =
                 new HttpStreamDeframerHandler(DecompressorRegistry.getDefaultInstance(), statusListener,
                                               Integer.MAX_VALUE);
-        deframer = new HttpDeframer<>(handler, ByteBufAllocator.DEFAULT);
+        deframer = HttpDeframer.of(handler, ByteBufAllocator.DEFAULT);
         handler.setDeframer(deframer);
     }
 

File: core/src/test/java/com/linecorp/armeria/common/ServerCookieEncoderTest.java
Patch:
@@ -58,7 +58,7 @@ public void testEncodingSingleCookieV0() throws ParseException {
         final int maxAge = 50;
 
         final String result = "myCookie=myValue; Max-Age=50; Expires=(.+?); Path=/apathsomewhere; " +
-                              "Domain=.adomainsomewhere; Secure; SameSite=Strict";
+                              "Domain=adomainsomewhere; Secure; SameSite=Strict";
         final Cookie cookie = Cookie.builder("myCookie", "myValue")
                                     .domain(".adomainsomewhere")
                                     .maxAge(maxAge)

File: core/src/test/java/com/linecorp/armeria/client/RefreshingAddressResolverTest.java
Patch:
@@ -43,6 +43,7 @@
 import com.linecorp.armeria.client.RefreshingAddressResolver.CacheEntry;
 import com.linecorp.armeria.client.endpoint.dns.TestDnsServer;
 import com.linecorp.armeria.client.retry.Backoff;
+import com.linecorp.armeria.common.metric.PrometheusMeterRegistries;
 import com.linecorp.armeria.testing.junit5.common.EventLoopExtension;
 
 import io.netty.channel.ChannelHandlerContext;
@@ -405,6 +406,7 @@ private static DnsResolverGroupBuilder builder(TestDnsServer... servers) {
                         Stream.of(servers).map(TestDnsServer::addr).collect(toImmutableList())).stream();
         return new DnsResolverGroupBuilder()
                 .dnsServerAddressStreamProvider(dnsServerAddressStreamProvider)
+                .meterRegistry(PrometheusMeterRegistries.newRegistry())
                 .resolvedAddressTypes(ResolvedAddressTypes.IPV4_ONLY)
                 .traceEnabled(false);
     }

File: core/src/test/java/com/linecorp/armeria/client/endpoint/dns/DnsNameEncoder.java
Patch:
@@ -18,9 +18,9 @@
 import io.netty.buffer.ByteBuf;
 import io.netty.handler.codec.dns.DefaultDnsRecordEncoder;
 
-final class DnsNameEncoder {
+public final class DnsNameEncoder {
 
-    static void encodeName(String name, ByteBuf out) {
+    public static void encodeName(String name, ByteBuf out) {
         DefaultDnsRecordEncoderTrampoline.INSTANCE.encodeName(name, out);
     }
 

File: core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java
Patch:
@@ -279,7 +279,6 @@ void clear() {
         }
 
         void clear0() {
-            assert resolverClosed;
             if (refreshFuture != null) {
                 refreshFuture.cancel(false);
             }

File: jetty9/src/main/java/com/linecorp/armeria/server/jetty/JettyService.java
Patch:
@@ -311,7 +311,9 @@ private static MetaData.Request toRequestMetadata(ServiceRequestContext ctx, Agg
         });
 
         return new MetaData.Request(aHeaders.get(HttpHeaderNames.METHOD), uri,
-                                    HttpVersion.HTTP_1_1, jHeaders, aReq.content().length());
+                                    ctx.sessionProtocol().isMultiplex() ? HttpVersion.HTTP_2
+                                                                        : HttpVersion.HTTP_1_1,
+                                    jHeaders, aReq.content().length());
     }
 
     private static ResponseHeaders toResponseHeaders(ArmeriaHttpTransport transport) {

File: tomcat9/src/main/java/com/linecorp/armeria/server/tomcat/TomcatService.java
Patch:
@@ -434,6 +434,9 @@ private Request convertRequest(ServiceRequestContext ctx, AggregatedHttpRequest
             }
         }
 
+        // Set the protocol, as documented in https://tools.ietf.org/html/rfc3875#section-4.1.16
+        coyoteReq.protocol().setString(ctx.sessionProtocol().isMultiplex() ? "HTTP/2.0" : "HTTP/1.1");
+
         // Set the method.
         final HttpMethod method = req.method();
         coyoteReq.method().setString(method.name());

File: core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java
Patch:
@@ -31,7 +31,7 @@
 
 import com.linecorp.armeria.client.retry.Backoff;
 import com.linecorp.armeria.common.Flags;
-import com.linecorp.armeria.internal.common.util.TransportType;
+import com.linecorp.armeria.common.util.TransportType;
 
 import io.netty.channel.EventLoopGroup;
 import io.netty.resolver.AddressResolver;

File: core/src/main/java/com/linecorp/armeria/client/HttpClientFactory.java
Patch:
@@ -47,8 +47,8 @@
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.util.AsyncCloseableSupport;
 import com.linecorp.armeria.common.util.ReleasableHolder;
+import com.linecorp.armeria.common.util.TransportType;
 import com.linecorp.armeria.internal.common.util.SslContextUtil;
-import com.linecorp.armeria.internal.common.util.TransportType;
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.netty.bootstrap.Bootstrap;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsEndpointGroup.java
Patch:
@@ -36,9 +36,9 @@
 import com.linecorp.armeria.client.endpoint.DynamicEndpointGroup;
 import com.linecorp.armeria.client.endpoint.EndpointSelectionStrategy;
 import com.linecorp.armeria.client.retry.Backoff;
+import com.linecorp.armeria.common.util.TransportType;
 import com.linecorp.armeria.internal.client.DefaultDnsNameResolver;
 import com.linecorp.armeria.internal.client.DnsUtil;
-import com.linecorp.armeria.internal.common.util.TransportType;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.EventLoop;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsEndpointGroupBuilder.java
Patch:
@@ -31,7 +31,7 @@
 import com.linecorp.armeria.client.endpoint.EndpointSelectionStrategy;
 import com.linecorp.armeria.client.retry.Backoff;
 import com.linecorp.armeria.common.CommonPools;
-import com.linecorp.armeria.internal.common.util.TransportType;
+import com.linecorp.armeria.common.util.TransportType;
 
 import io.netty.channel.EventLoop;
 import io.netty.resolver.dns.DnsNameResolverBuilder;

File: core/src/main/java/com/linecorp/armeria/common/util/EventLoopGroups.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.TimeUnit;
 
-import com.linecorp.armeria.internal.common.util.TransportType;
+import com.linecorp.armeria.common.Flags;
 
 import io.netty.bootstrap.Bootstrap;
 import io.netty.channel.AbstractEventLoop;
@@ -87,7 +87,7 @@ public static EventLoopGroup newEventLoopGroup(int numThreads, String threadName
         checkArgument(numThreads > 0, "numThreads: %s (expected: > 0)", numThreads);
         requireNonNull(threadNamePrefix, "threadNamePrefix");
 
-        final TransportType type = TransportType.detectTransportType();
+        final TransportType type = Flags.transportType();
         final String prefix = threadNamePrefix + '-' + type.lowerCasedName();
         return newEventLoopGroup(numThreads, ThreadFactories.newEventLoopThreadFactory(prefix,
                                                                                        useDaemonThreads));
@@ -104,7 +104,7 @@ public static EventLoopGroup newEventLoopGroup(int numThreads, ThreadFactory thr
         checkArgument(numThreads > 0, "numThreads: %s (expected: > 0)", numThreads);
         requireNonNull(threadFactory, "threadFactory");
 
-        final TransportType type = TransportType.detectTransportType();
+        final TransportType type = Flags.transportType();
         return type.newEventLoopGroup(numThreads, unused -> threadFactory);
     }
 

File: core/src/main/java/com/linecorp/armeria/server/Server.java
Patch:
@@ -56,6 +56,7 @@
 import com.google.common.collect.ImmutableSet.Builder;
 import com.spotify.futures.CompletableFutures;
 
+import com.linecorp.armeria.common.Flags;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.metric.MeterIdPrefix;
 import com.linecorp.armeria.common.util.EventLoopGroups;
@@ -65,7 +66,6 @@
 import com.linecorp.armeria.common.util.Version;
 import com.linecorp.armeria.internal.common.PathAndQuery;
 import com.linecorp.armeria.internal.common.util.ChannelUtil;
-import com.linecorp.armeria.internal.common.util.TransportType;
 import com.linecorp.armeria.server.logging.AccessLogWriter;
 
 import io.micrometer.core.instrument.Gauge;
@@ -468,7 +468,7 @@ private ChannelFuture doStart(ServerPort port) {
             });
 
             b.group(bossGroup, config.workerGroup());
-            b.channel(TransportType.detectTransportType().serverChannelType());
+            b.channel(Flags.transportType().serverChannelType());
             b.handler(connectionLimitingHandler);
             b.childHandler(new HttpServerPipelineConfigurator(config, port, sslContexts,
                                                               gracefulShutdownSupport));

File: core/src/test/java/com/linecorp/armeria/client/endpoint/dns/TestDnsServer.java
Patch:
@@ -27,7 +27,7 @@
 import com.google.common.collect.ImmutableMap;
 
 import com.linecorp.armeria.common.CommonPools;
-import com.linecorp.armeria.internal.common.util.TransportType;
+import com.linecorp.armeria.common.util.TransportType;
 
 import io.netty.bootstrap.Bootstrap;
 import io.netty.buffer.Unpooled;

File: core/src/test/java/com/linecorp/armeria/common/FlagsTest.java
Patch:
@@ -33,6 +33,7 @@
 import com.google.common.base.Ascii;
 
 import com.linecorp.armeria.common.util.Exceptions;
+import com.linecorp.armeria.common.util.TransportType;
 
 import io.netty.channel.epoll.Epoll;
 import io.netty.handler.ssl.OpenSsl;
@@ -50,7 +51,7 @@ void epollAvailableOnLinux() {
         assumeThat(System.getenv("WSLENV")).isNull();
         assumeThat(System.getProperty("com.linecorp.armeria.useEpoll")).isEqualTo("false");
 
-        assertThat(Flags.useEpoll()).isTrue();
+        assertThat(Flags.transportType()).isEqualTo(TransportType.EPOLL);
         assertThat(Epoll.isAvailable()).isTrue();
     }
 

File: core/src/test/java/com/linecorp/armeria/client/Http2ClientSettingsTest.java
Patch:
@@ -197,7 +197,9 @@ void maxFrameSize() throws Exception {
                     public void onGoAwayRead(ChannelHandlerContext ctx, int lastStreamId, long errorCode,
                                              ByteBuf debugData)
                             throws Http2Exception {
-                        assertThat(lastStreamId).isZero(); // 0: connection error
+                        // It's Integer.MAX_VALUE for connection error.
+                        // See https://github.com/netty/netty/pull/10775
+                        assertThat(lastStreamId).isEqualTo(Integer.MAX_VALUE);
                         assertThat(errorCode).isEqualTo(Http2Error.FRAME_SIZE_ERROR.code());
                         latch.countDown();
                     }

File: spring/boot2-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/PrometheusMetricExposureTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.test.autoconfigure.actuate.metrics.AutoConfigureMetrics;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.annotation.DirtiesContext;
 import org.springframework.test.context.ActiveProfiles;
@@ -38,6 +39,7 @@
 @SpringBootTest(classes = org.springframework.boot.test.context.TestConfiguration.class)
 @ActiveProfiles({ "local", "managedMetricPath" })
 @DirtiesContext
+@AutoConfigureMetrics
 @EnableAutoConfiguration
 @ImportAutoConfiguration(ArmeriaSpringActuatorAutoConfiguration.class)
 class PrometheusMetricExposureTest {

File: spring/boot2-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationTest.java
Patch:
@@ -85,7 +85,8 @@
  * application-autoConfTest.yml will be loaded with minimal settings to make it work.
  */
 @RunWith(SpringRunner.class)
-@SpringBootTest(classes = TestConfiguration.class)
+@SpringBootTest(classes = TestConfiguration.class, properties =
+        "management.metrics.export.defaults.enabled=true") // @AutoConfigureMetrics is not allowed for boot1.
 @ActiveProfiles({ "local", "autoConfTest" })
 @DirtiesContext
 public class ArmeriaAutoConfigurationTest {

File: spring/boot2-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationWithoutMeterTest.java
Patch:
@@ -45,7 +45,8 @@
  * application-autoConfTest.yml will be loaded with minimal settings to make it work.
  */
 @RunWith(SpringRunner.class)
-@SpringBootTest(classes = NoMeterTestConfiguration.class)
+@SpringBootTest(classes = NoMeterTestConfiguration.class, properties =
+        "management.metrics.export.defaults.enabled=true") // @AutoConfigureMetrics is not allowed for boot1.
 @ActiveProfiles({ "local", "autoConfTest" })
 public class ArmeriaAutoConfigurationWithoutMeterTest {
 

File: spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpRequest.java
Patch:
@@ -28,7 +28,6 @@
 import org.springframework.core.io.buffer.DataBuffer;
 import org.springframework.http.HttpCookie;
 import org.springframework.http.HttpHeaders;
-import org.springframework.http.server.reactive.AbstractServerHttpRequest;
 import org.springframework.http.server.reactive.ServerHttpRequest;
 import org.springframework.http.server.reactive.SslInfo;
 import org.springframework.util.LinkedMultiValueMap;

File: core/src/main/java/com/linecorp/armeria/server/logging/LoggingService.java
Patch:
@@ -43,6 +43,7 @@
 import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.SimpleDecoratingHttpService;
+import com.linecorp.armeria.server.TransientServiceOption;
 
 /**
  * Decorates an {@link HttpService} to log {@link HttpRequest}s and {@link HttpResponse}s.
@@ -121,7 +122,8 @@ public static LoggingServiceBuilder builder() {
 
     @Override
     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
-        if (sampler.isSampled(ctx)) {
+        if (ctx.config().transientServiceOptions().contains(TransientServiceOption.WITH_SERVICE_LOGGING) &&
+            sampler.isSampled(ctx)) {
             logWhenComplete(logger, ctx, requestLogger, responseLogger);
         }
         return unwrap().serve(ctx, req);

File: spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/PrometheusSupport.java
Patch:
@@ -39,7 +39,7 @@ static boolean addExposition(ArmeriaSettings settings, ServerBuilder server,
             if (meterRegistry instanceof PrometheusMeterRegistry) {
                 final CollectorRegistry prometheusRegistry =
                         ((PrometheusMeterRegistry) meterRegistry).getPrometheusRegistry();
-                server.service(metricsPath, new PrometheusExpositionService(prometheusRegistry));
+                server.service(metricsPath, PrometheusExpositionService.of(prometheusRegistry));
                 return true;
             }
 

File: thrift0.13/src/test/java/com/linecorp/armeria/it/metric/PrometheusMetricsIntegrationTest.java
Patch:
@@ -87,8 +87,7 @@ protected void configure(ServerBuilder sb) throws Exception {
             sb.service("/bar", helloService.decorate(
                     MetricCollectingService.newDecorator(new MeterIdPrefixFunctionImpl("server", "Bar"))));
 
-            sb.service("/internal/prometheus/metrics",
-                       new PrometheusExpositionService(prometheusRegistry));
+            sb.service("/internal/prometheus/metrics", PrometheusExpositionService.of(prometheusRegistry));
         }
     };
 

File: core/src/main/java/com/linecorp/armeria/server/RouteDecoratingService.java
Patch:
@@ -58,9 +58,9 @@
  * <p>The request will go through the below decorators to reach the {@code userService}.
  * <pre>{@code
  *  request -> initialDispatcherService
- *          -> loggingDecorator         -> routeDecoratingService
- *          -> authDecorator            -> routeDecoratingService
  *          -> traceDecorator           -> routeDecoratingService
+ *          -> authDecorator            -> routeDecoratingService
+ *          -> loggingDecorator         -> routeDecoratingService
  *          -> userService
  * }</pre>
  */

File: core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolverTest.java
Patch:
@@ -143,7 +143,7 @@ void ofMethods() {
         getAllMethods(Service.class).forEach(method -> {
             try {
                 final List<AnnotatedValueResolver> elements =
-                        AnnotatedValueResolver.ofServiceMethod(method, pathParams, objectResolvers);
+                        AnnotatedValueResolver.ofServiceMethod(method, pathParams, objectResolvers, false);
                 elements.forEach(AnnotatedValueResolverTest::testResolver);
             } catch (NoAnnotatedParameterException ignored) {
                 // Ignore this exception because MixedBean class has not annotated method.

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryRule.java
Patch:
@@ -128,7 +128,7 @@ static RetryRule onStatus(BiPredicate<? super ClientRequestContext, ? super Http
     /**
      * Returns a newly created a {@link RetryRule} that will retry with
      * the {@linkplain Backoff#ofDefault() default backoff} if an {@link Exception} is raised and
-     * that is instance of the specified {@code exception}.
+     * that is an instance of the specified {@code exception}.
      */
     static RetryRule onException(Class<? extends Throwable> exception) {
         return builder().onException(exception).thenBackoff();

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceFactory.java
Patch:
@@ -336,9 +336,8 @@ private static List<AnnotatedValueResolver> getAnnotatedValueResolvers(List<Requ
         final Set<String> expectedParamNames = route.paramNames();
         List<AnnotatedValueResolver> resolvers;
         try {
-            resolvers = AnnotatedValueResolver.ofServiceMethod(method, expectedParamNames,
-                                                               AnnotatedValueResolver
-                                                                       .toRequestObjectResolvers(req));
+            resolvers = AnnotatedValueResolver.ofServiceMethod(
+                    method, expectedParamNames, AnnotatedValueResolver.toRequestObjectResolvers(req, method));
         } catch (NoParameterException ignored) {
             // Allow no parameter like below:
             //

File: core/src/main/java/com/linecorp/armeria/server/annotation/ByteArrayRequestConverterFunction.java
Patch:
@@ -28,8 +28,8 @@
  * A {@link RequestConverterFunction} which converts a binary body of the
  * {@link AggregatedHttpRequest} to one of {@code byte[]} or {@link HttpData} depending on the
  * {@code expectedResultType}.
- * Note that this {@link RequestConverterFunction} is applied to the annotated service by default,
- * so you don't have to set explicitly.
+ * Note that this {@link RequestConverterFunction} is applied to an annotated service by default,
+ * so you don't have to specify this converter explicitly.
  */
 public final class ByteArrayRequestConverterFunction implements RequestConverterFunction {
 

File: core/src/main/java/com/linecorp/armeria/server/annotation/ByteArrayResponseConverterFunction.java
Patch:
@@ -38,8 +38,8 @@
  *       {@code "content-type"} of the {@link ResponseHeaders} is {@code "application/binary"} or
  *       {@code "application/octet-stream"}</li>
  * </ul>
- * Note that this {@link ResponseConverterFunction} is applied to the annotated service by default,
- * so you don't have to set explicitly.
+ * Note that this {@link ResponseConverterFunction} is applied to an annotated service by default,
+ * so you don't have to specify this converter explicitly.
  */
 public final class ByteArrayResponseConverterFunction implements ResponseConverterFunction {
 

File: core/src/main/java/com/linecorp/armeria/server/annotation/JacksonRequestConverterFunction.java
Patch:
@@ -49,8 +49,8 @@
  * the {@link AggregatedHttpRequest} to an object using the default {@link ObjectMapper}.
  * The {@link RequestConverterFunction} is applied only when the {@code content-type} of the
  * {@link RequestHeaders} is {@link MediaType#JSON} or ends with {@code +json}.
- * Note that this {@link RequestConverterFunction} is applied to the annotated service by default,
- * so you don't have to set explicitly unless you want to use your own {@link ObjectMapper}.
+ * Note that this {@link RequestConverterFunction} is applied to an annotated service by default,
+ * so you don't have to specify this converter explicitly unless you want to use your own {@link ObjectMapper}.
  */
 public final class JacksonRequestConverterFunction implements RequestConverterFunction {
 

File: core/src/main/java/com/linecorp/armeria/server/annotation/JacksonResponseConverterFunction.java
Patch:
@@ -43,8 +43,8 @@
  * {@code content-type: application/json; charset=utf-8} or {@code content-type: application/json-seq}.
  * The objects published from a {@link Publisher} or {@link Stream} would be converted into JSON Text Sequences
  * if a {@link ProducesJsonSequences} annotation is specified on an annotated service method.
- * Note that this {@link ResponseConverterFunction} is applied to the annotated service by default,
- * so you don't have to set explicitly unless you want to use your own {@link ObjectMapper}.
+ * Note that this {@link ResponseConverterFunction} is applied to an annotated service by default,
+ * so you don't have to specify this converter explicitly unless you want to use your own {@link ObjectMapper}.
  *
  * @see <a href="https://tools.ietf.org/html/rfc7464">JavaScript Object Notation (JSON) Text Sequences</a>
  */

File: core/src/main/java/com/linecorp/armeria/server/annotation/StringRequestConverterFunction.java
Patch:
@@ -29,8 +29,8 @@
 /**
  * A {@link RequestConverterFunction} which converts a text body of the
  * {@link AggregatedHttpRequest} to a {@link String}.
- * Note that this {@link RequestConverterFunction} is applied to the annotated service by default,
- * so you don't have to set explicitly.
+ * Note that this {@link RequestConverterFunction} is applied to an annotated service by default,
+ * so you don't have to specify this converter explicitly.
  */
 public final class StringRequestConverterFunction implements RequestConverterFunction {
     /**

File: core/src/main/java/com/linecorp/armeria/server/annotation/StringResponseConverterFunction.java
Patch:
@@ -35,11 +35,11 @@
 /**
  * A {@link ResponseConverterFunction} which creates an {@link HttpResponse} when:
  * <ul>
- *   <li>the {@code result} is instance of {@link CharSequence}</li>
+ *   <li>the {@code result} is an instance of {@link CharSequence}</li>
  *   <li>the {@code "content-type"} of the {@link ResponseHeaders} is {@link MediaType#ANY_TEXT_TYPE}</li>
  * </ul>
- * Note that this {@link ResponseConverterFunction} is applied to the annotated service by default,
- * so you don't have to set explicitly.
+ * Note that this {@link ResponseConverterFunction} is applied to an annotated service by default,
+ * so you don't have to specify this converter explicitly.
  */
 public final class StringResponseConverterFunction implements ResponseConverterFunction {
 

File: core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolverTest.java
Patch:
@@ -75,7 +75,8 @@ class AnnotatedValueResolverTest {
 
     private static final Logger logger = LoggerFactory.getLogger(AnnotatedValueResolverTest.class);
 
-    static final List<RequestObjectResolver> objectResolvers = toRequestObjectResolvers(ImmutableList.of());
+    static final List<RequestObjectResolver> objectResolvers =
+            toRequestObjectResolvers(ImmutableList.of(), AnnotatedValueResolverTest.class.getMethods()[0]);
 
     // A string which is the same as the parameter will be returned.
     static final Set<String> pathParams = ImmutableSet.of("var1");

File: rxjava2/src/main/java/com/linecorp/armeria/internal/server/rxjava2/ObservableResponseConverterFunctionProvider.java
Patch:
@@ -20,6 +20,7 @@
 
 import javax.annotation.Nullable;
 
+import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.server.annotation.ExceptionHandlerFunction;
 import com.linecorp.armeria.server.annotation.ResponseConverterFunction;
 import com.linecorp.armeria.server.annotation.ResponseConverterFunctionProvider;
@@ -33,6 +34,7 @@
 /**
  * Provides an {@link ObservableResponseConverterFunction} to annotated services.
  */
+@UnstableApi
 public final class ObservableResponseConverterFunctionProvider implements ResponseConverterFunctionProvider {
 
     @Nullable

File: rxjava3/src/main/java/com/linecorp/armeria/internal/server/rxjava3/ObservableResponseConverterFunctionProvider.java
Patch:
@@ -20,6 +20,7 @@
 
 import javax.annotation.Nullable;
 
+import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.server.annotation.ExceptionHandlerFunction;
 import com.linecorp.armeria.server.annotation.ResponseConverterFunction;
 import com.linecorp.armeria.server.annotation.ResponseConverterFunctionProvider;
@@ -33,6 +34,7 @@
 /**
  * Provides an {@link ObservableResponseConverterFunction} to annotated services.
  */
+@UnstableApi
 public final class ObservableResponseConverterFunctionProvider implements ResponseConverterFunctionProvider {
 
     @Nullable

File: core/src/test/java/com/linecorp/armeria/common/DefaultSplitHttpResponseTest.java
Patch:
@@ -140,11 +140,12 @@ void cancelResponse() {
                                                                 HttpData.ofUtf8("Hello2"),
                                                                 HttpHeaders.of("grpc-status", 0)));
         final SplitHttpResponse splitHttpResponse = response.split();
+        // HTTP headers is prefetched before subscribing to HTTP body.
+        assertThat(splitHttpResponse.headers().join()).isEqualTo(ResponseHeaders.of(HttpStatus.OK));
         StepVerifier.create(splitHttpResponse.body())
                     .thenCancel()
                     .verify();
 
-        assertThat(splitHttpResponse.headers().join()).isEqualTo(ResponseHeaders.of(HttpStatus.OK));
         assertThat(splitHttpResponse.trailers().join().isEmpty()).isTrue();
     }
 

File: core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java
Patch:
@@ -114,7 +114,7 @@ public final boolean isEmpty() {
     }
 
     @Override
-    final SubscriptionImpl subscribe(SubscriptionImpl subscription) {
+    SubscriptionImpl subscribe(SubscriptionImpl subscription) {
         if (!subscriptionUpdater.compareAndSet(this, null, subscription)) {
             final SubscriptionImpl oldSubscription = this.subscription;
             assert oldSubscription != null;
@@ -215,7 +215,7 @@ final long demand() {
     }
 
     @Override
-    final void request(long n) {
+    void request(long n) {
         final SubscriptionImpl subscription = this.subscription;
         // A user cannot access subscription without subscribing.
         assert subscription != null;
@@ -241,7 +241,7 @@ private void doRequest(long n) {
     }
 
     @Override
-    final void cancel() {
+    void cancel() {
         if (setState(State.OPEN, State.CLEANUP) || setState(State.CLOSED, State.CLEANUP)) {
             // It the state was CLOSED, close() or close(cause) has been called before cancel() or abort()
             // is called. We just ignore the previously pushed event and deal with CANCELLED_CLOSE.

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcClientOptions.java
Patch:
@@ -31,7 +31,7 @@
 import com.linecorp.armeria.common.grpc.GrpcJsonMarshaller;
 import com.linecorp.armeria.common.grpc.GrpcJsonMarshallerBuilder;
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
-import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer;
+import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframerHandler;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageFramer;
 import com.linecorp.armeria.unsafe.grpc.GrpcUnsafeBufferUtil;
 
@@ -44,12 +44,12 @@ public final class GrpcClientOptions {
 
     /**
      * The maximum size, in bytes, of messages coming in a response.
-     * The default value is {@value ArmeriaMessageDeframer#NO_MAX_INBOUND_MESSAGE_SIZE},
+     * The default value is {@value ArmeriaMessageDeframerHandler#NO_MAX_INBOUND_MESSAGE_SIZE},
      * which means 'use {@link ClientOptions#MAX_RESPONSE_LENGTH}'.
      */
     public static final ClientOption<Integer> MAX_INBOUND_MESSAGE_SIZE_BYTES =
             ClientOption.define("GRPC_MAX_INBOUND_MESSAGE_SIZE_BYTES",
-                                ArmeriaMessageDeframer.NO_MAX_INBOUND_MESSAGE_SIZE);
+                                ArmeriaMessageDeframerHandler.NO_MAX_INBOUND_MESSAGE_SIZE);
 
     /**
      * The maximum size, in bytes, of messages sent in a request.

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/InternalGrpcWebUtil.java
Patch:
@@ -26,7 +26,7 @@
 
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpHeadersBuilder;
-import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer.DeframedMessage;
+import com.linecorp.armeria.common.grpc.protocol.DeframedMessage;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;

File: grpc/src/main/java/com/linecorp/armeria/internal/common/grpc/GrpcMessageMarshaller.java
Patch:
@@ -34,7 +34,7 @@
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.grpc.GrpcJsonMarshaller;
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
-import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer.DeframedMessage;
+import com.linecorp.armeria.common.grpc.protocol.DeframedMessage;
 
 import io.grpc.MethodDescriptor;
 import io.grpc.MethodDescriptor.Marshaller;

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/FramedGrpcService.java
Patch:
@@ -48,7 +48,7 @@
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.grpc.GrpcJsonMarshaller;
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
-import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer;
+import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframerHandler;
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
 import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.common.stream.SubscriptionOption;
@@ -206,7 +206,7 @@ protected HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req) throws
                 methodName, method, ctx, req.headers(), res, serializationFormat);
         if (call != null) {
             ctx.whenRequestCancelling().thenRun(() -> call.close(Status.CANCELLED, new Metadata()));
-            req.subscribe(call.messageReader(), ctx.eventLoop(), SubscriptionOption.WITH_POOLED_OBJECTS);
+            req.subscribe(call.messageDeframer(), ctx.eventLoop(), SubscriptionOption.WITH_POOLED_OBJECTS);
         }
         return res;
     }
@@ -257,7 +257,7 @@ private <I, O> ArmeriaServerCall<I, O> startCall(
 
     @Override
     public void serviceAdded(ServiceConfig cfg) {
-        if (maxInboundMessageSizeBytes == ArmeriaMessageDeframer.NO_MAX_INBOUND_MESSAGE_SIZE) {
+        if (maxInboundMessageSizeBytes == ArmeriaMessageDeframerHandler.NO_MAX_INBOUND_MESSAGE_SIZE) {
             maxInboundMessageSizeBytes = (int) Math.min(cfg.maxRequestLength(), Integer.MAX_VALUE);
         }
 

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.java
Patch:
@@ -43,7 +43,7 @@
 import com.linecorp.armeria.common.grpc.GrpcJsonMarshaller;
 import com.linecorp.armeria.common.grpc.GrpcJsonMarshallerBuilder;
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
-import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer;
+import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframerHandler;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageFramer;
 import com.linecorp.armeria.server.HttpServiceWithRoutes;
 import com.linecorp.armeria.server.Route;
@@ -102,7 +102,7 @@ public final class GrpcServiceBuilder {
 
     private Set<SerializationFormat> supportedSerializationFormats = DEFAULT_SUPPORTED_SERIALIZATION_FORMATS;
 
-    private int maxInboundMessageSizeBytes = ArmeriaMessageDeframer.NO_MAX_INBOUND_MESSAGE_SIZE;
+    private int maxInboundMessageSizeBytes = ArmeriaMessageDeframerHandler.NO_MAX_INBOUND_MESSAGE_SIZE;
 
     private int maxOutboundMessageSizeBytes = ArmeriaMessageFramer.NO_MAX_OUTBOUND_MESSAGE_SIZE;
 

File: grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java
Patch:
@@ -811,6 +811,7 @@ public void onClose(Status status, Metadata trailers) {
         final Object actualResponse2 = queue.poll(operationTimeoutMillis(), TimeUnit.MILLISECONDS);
         assertThat(actualResponse2).withFailMessage("Unexpected response: %s", actualResponse2)
                                    .isEqualTo(goldenResponses.get(1));
+        call.request(1);
         assertThat(queue.poll(operationTimeoutMillis(), TimeUnit.MILLISECONDS)).isEqualTo(Status.OK);
         call.cancel("Cancelled after all of the requests are done", null);
 

File: grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/GrpcMessageMarshallerTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.junit.Test;
 
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
-import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer.DeframedMessage;
+import com.linecorp.armeria.common.grpc.protocol.DeframedMessage;
 import com.linecorp.armeria.grpc.testing.Messages.SimpleRequest;
 import com.linecorp.armeria.grpc.testing.Messages.SimpleResponse;
 import com.linecorp.armeria.grpc.testing.TestServiceGrpc;

File: it/grpcweb/src/test/java/com/linecorp/armeria/server/grpc/GrpcWebServiceTest.java
Patch:
@@ -91,7 +91,7 @@ void grpcProtoWebClient(SerializationFormat serializationFormat) {
             final HelloReply armeria =
                     blockingStub.sayHello(HelloRequest.newBuilder().setName("Armeria").build());
             assertThat(armeria.getMessage()).isEqualTo("Hello, Armeria");
-            final RequestLog requestLog = captor.get().log().ensureComplete();
+            final RequestLog requestLog = captor.get().log().whenComplete().join();
             assertThat(requestLog.responseContent().toString()).contains("Hello, Armeria");
         }
     }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/DynamicEndpointGroup.java
Patch:
@@ -52,8 +52,8 @@ public class DynamicEndpointGroup
     private final AtomicReference<EndpointSelector> selector = new AtomicReference<>();
     private volatile List<Endpoint> endpoints = UNINITIALIZED_ENDPOINTS;
     private final Lock endpointsLock = new ReentrantLock();
-    private final CompletableFuture<List<Endpoint>> initialEndpointsFuture =
-            new EventLoopCheckingFuture<>();
+
+    private final CompletableFuture<List<Endpoint>> initialEndpointsFuture = new EventLoopCheckingFuture<>();
     private final AsyncCloseableSupport closeable = AsyncCloseableSupport.of(this::closeAsync);
 
     /**
@@ -198,7 +198,7 @@ private static boolean hasChanges(List<Endpoint> oldEndpoints, List<Endpoint> ne
 
     private void completeInitialEndpointsFuture(List<Endpoint> endpoints) {
         if (endpoints != UNINITIALIZED_ENDPOINTS && !initialEndpointsFuture.isDone()) {
-            initialEndpointsFuture.complete(endpoints);
+            initialEndpointsFuture.complete(new LazyList<>(this::endpoints));
         }
     }
 

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostBuilder.java
Patch:
@@ -986,7 +986,9 @@ private SelfSignedCertificate selfSignedCertificate() throws CertificateExceptio
     private static SslContext buildSslContext(
             Supplier<SslContextBuilder> sslContextBuilderSupplier,
             Iterable<? extends Consumer<? super SslContextBuilder>> tlsCustomizers) {
-        return SslContextUtil.createSslContext(sslContextBuilderSupplier, false, tlsCustomizers);
+        return SslContextUtil
+                .createSslContext(sslContextBuilderSupplier,
+                        /* forceHttp1 */ false, /* tlsAllowUnsafeCiphers */ false, tlsCustomizers);
     }
 
     /**

File: core/src/test/java/com/linecorp/armeria/client/ClientFactoryBuilderTest.java
Patch:
@@ -128,7 +128,7 @@ void useDefaultAddressResolverGroup() {
     }
 
     @Test
-    @DisabledIfSystemProperty(named = "com.linecorp.armeria.useJdkDnsResolver",  matches = "true")
+    @DisabledIfSystemProperty(named = "com.linecorp.armeria.useJdkDnsResolver", matches = "true")
     void useRefreshingAddressResolverGroup() {
         final DefaultClientFactory clientFactory = (DefaultClientFactory) ClientFactory.ofDefault();
         assertThat(clientFactory.addressResolverGroup()).isInstanceOf(RefreshingAddressResolverGroup.class);

File: core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessage.java
Patch:
@@ -35,6 +35,7 @@
 
 import com.linecorp.armeria.common.util.CompositeException;
 import com.linecorp.armeria.common.util.EventLoopCheckingFuture;
+import com.linecorp.armeria.internal.common.stream.NoopSubscription;
 import com.linecorp.armeria.unsafe.PooledObjects;
 
 import io.netty.util.concurrent.EventExecutor;
@@ -129,7 +130,7 @@ static void failLateSubscriber(SubscriptionImpl subscription, Subscriber<?> late
 
     private static void handleLateSubscriber(Subscriber<?> lateSubscriber, Throwable cause) {
         try {
-            lateSubscriber.onSubscribe(NoopSubscription.INSTANCE);
+            lateSubscriber.onSubscribe(NoopSubscription.get());
             lateSubscriber.onError(cause);
         } catch (Throwable t) {
             throwIfFatal(t);

File: core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessageDuplicator.java
Patch:
@@ -52,6 +52,7 @@
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.util.CompositeException;
 import com.linecorp.armeria.common.util.EventLoopCheckingFuture;
+import com.linecorp.armeria.internal.common.stream.NoopSubscription;
 import com.linecorp.armeria.unsafe.PooledObjects;
 
 import io.netty.buffer.ByteBuf;
@@ -292,7 +293,7 @@ private void doSubscribe(DownstreamSubscription<T> subscription) {
         private static void failLateProcessorSubscriber(DownstreamSubscription<?> subscription) {
             final Subscriber<?> lateSubscriber = subscription.subscriber();
             try {
-                lateSubscriber.onSubscribe(NoopSubscription.INSTANCE);
+                lateSubscriber.onSubscribe(NoopSubscription.get());
                 lateSubscriber.onError(
                         new IllegalStateException("duplicator is closed or no more downstream can be added."));
             } catch (Throwable t) {
@@ -534,7 +535,7 @@ private static void failLateSubscriber(EventExecutor executor,
 
             executor.execute(() -> {
                 try {
-                    lateSubscriber.onSubscribe(NoopSubscription.INSTANCE);
+                    lateSubscriber.onSubscribe(NoopSubscription.get());
                     lateSubscriber.onError(cause);
                 } catch (Throwable t) {
                     throwIfFatal(t);

File: core/src/main/java/com/linecorp/armeria/common/stream/PublisherBasedStreamMessage.java
Patch:
@@ -37,6 +37,7 @@
 import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.util.CompositeException;
 import com.linecorp.armeria.common.util.EventLoopCheckingFuture;
+import com.linecorp.armeria.internal.common.stream.NoopSubscription;
 
 import io.netty.util.concurrent.EventExecutor;
 import io.netty.util.concurrent.ImmediateEventExecutor;
@@ -131,7 +132,7 @@ private static void failLateSubscriber(EventExecutor executor,
 
         executor.execute(() -> {
             try {
-                lateSubscriber.onSubscribe(NoopSubscription.INSTANCE);
+                lateSubscriber.onSubscribe(NoopSubscription.get());
                 lateSubscriber.onError(cause);
             } catch (Throwable t) {
                 throwIfFatal(t);
@@ -167,7 +168,7 @@ private void abort0(Throwable cause) {
         }
 
         abortable.abort(cause);
-        abortable.onSubscribe(NoopSubscription.INSTANCE);
+        abortable.onSubscribe(NoopSubscription.get());
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java
Patch:
@@ -26,6 +26,7 @@
 
 import javax.annotation.Nullable;
 
+import com.github.benmanes.caffeine.cache.CaffeineSpec;
 import com.google.common.collect.ImmutableList;
 
 import com.linecorp.armeria.client.retry.Backoff;
@@ -297,8 +298,8 @@ public DnsResolverGroupBuilder decodeIdn(boolean decodeIdn) {
     }
 
     /**
-     * Sets the cache spec for caching resolved addresses.
-     * {@link Flags#dnsCacheSpec()} is used by default.
+     * Sets the {@linkplain CaffeineSpec Caffeine specification string} of the cache that stores the domain
+     * names and their resolved addresses. If not set, {@link Flags#dnsCacheSpec()} is used by default.
      */
     public DnsResolverGroupBuilder cacheSpec(String cacheSpec) {
         this.cacheSpec = requireNonNull(cacheSpec, "cacheSpec");

File: core/src/main/java/com/linecorp/armeria/client/retry/Backoff.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.concurrent.ThreadLocalRandom;
 import java.util.function.Supplier;
 
+import com.linecorp.armeria.common.Flags;
 import com.linecorp.armeria.common.util.Unwrappable;
 
 /**
@@ -33,6 +34,8 @@ public interface Backoff extends Unwrappable {
 
     /**
      * Returns the default {@link Backoff}.
+     *
+     * @see Flags#defaultBackoffSpec()
      */
     static Backoff ofDefault() {
         return defaultBackoff;

File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java
Patch:
@@ -466,13 +466,15 @@ default void setResponseTimeout(Duration responseTimeout) {
     /**
      * Cancels the response. Shortcut for {@code cancel(ResponseCancellationException.get())}.
      */
+    @Override
     default void cancel() {
         cancel(ResponseCancellationException.get());
     }
 
     /**
      * Times out the response. Shortcut for {@code cancel(ResponseTimeoutException.get())}.
      */
+    @Override
     default void timeoutNow() {
         cancel(ResponseTimeoutException.get());
     }

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java
Patch:
@@ -454,13 +454,15 @@ default void setRequestTimeout(Duration requestTimeout) {
     /**
      * Cancels the request. Shortcut for {@code cancel(RequestCancellationException.get())}.
      */
+    @Override
     default void cancel() {
         cancel(RequestCancellationException.get());
     }
 
     /**
      * Times out the request. Shortcut for {@code cancel(RequestTimeoutException.get())}.
      */
+    @Override
     default void timeoutNow() {
         cancel(RequestTimeoutException.get());
     }

File: core/src/main/java/com/linecorp/armeria/server/RouteCache.java
Patch:
@@ -123,7 +123,7 @@ public Routed<V> find(RoutingContext routingCtx) {
                 // RoutingResult may be different to each other for every requests, so we cannot
                 // use it as a cache value.
                 final Route route = routeResolver.apply(cached);
-                final RoutingResult routingResult = route.apply(routingCtx);
+                final RoutingResult routingResult = route.apply(routingCtx, false);
                 return Routed.of(route, routingResult, cached);
             }
 
@@ -155,7 +155,7 @@ public List<Routed<V>> findAll(RoutingContext routingCtx) {
         private List<Routed<V>> filterRoutes(List<V> list, RoutingContext routingCtx) {
             return list.stream().map(cached -> {
                 final Route route = routeResolver.apply(cached);
-                final RoutingResult routingResult = route.apply(routingCtx);
+                final RoutingResult routingResult = route.apply(routingCtx, false);
                 return routingResult.isPresent() ? Routed.of(route, routingResult, cached)
                                                  : Routed.<V>empty();
             }).filter(Routed::isPresent).collect(toImmutableList());

File: core/src/main/java/com/linecorp/armeria/server/RouteDecoratingService.java
Patch:
@@ -119,8 +119,7 @@ private static class InitialDispatcherService extends SimpleDecoratingHttpServic
         @Override
         public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
             final Queue<HttpService> serviceChain = new ArrayDeque<>(4);
-            // TODO(minwoox): Can do without making a new instance for RoutingContext?
-            router.findAll(RouteDecoratorRoutingContext.of(ctx.routingContext())).forEach(routed -> {
+            router.findAll(ctx.routingContext()).forEach(routed -> {
                 if (routed.isPresent()) {
                     serviceChain.add(routed.value().decorator());
                 }

File: core/src/main/java/com/linecorp/armeria/server/cors/CorsConfig.java
Patch:
@@ -119,7 +119,7 @@ private static boolean isPathMatched(CorsPolicy policy, RoutingContext routingCo
         // We do not consider the score of the routing result for simplicity. It'd be enough to find
         // whether the path is matched or not.
         return routes.isEmpty() ||
-               routes.stream().anyMatch(route -> route.apply(routingContext).isPresent());
+               routes.stream().anyMatch(route -> route.apply(routingContext, false).isPresent());
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/server/RouteDecoratingService.java
Patch:
@@ -119,7 +119,8 @@ private static class InitialDispatcherService extends SimpleDecoratingHttpServic
         @Override
         public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
             final Queue<HttpService> serviceChain = new ArrayDeque<>(4);
-            router.findAll(ctx.routingContext()).forEach(routed -> {
+            // TODO(minwoox): Can do without making a new instance for RoutingContext?
+            router.findAll(RouteDecoratorRoutingContext.of(ctx.routingContext())).forEach(routed -> {
                 if (routed.isPresent()) {
                     serviceChain.add(routed.value().decorator());
                 }

File: core/src/main/java/com/linecorp/armeria/common/SerializationFormat.java
Patch:
@@ -78,7 +78,7 @@ public final class SerializationFormat implements Comparable<SerializationFormat
                 ServiceLoader.load(SerializationFormatProvider.class,
                                    SerializationFormatProvider.class.getClassLoader()));
         if (!providers.isEmpty()) {
-            logger.info("Loaded {}: {}", SerializationFormatProvider.class.getSimpleName(), providers);
+            logger.debug("Available {}s: {}", SerializationFormatProvider.class.getSimpleName(), providers);
 
             providers.forEach(p -> p.entries().forEach(e -> register(mutableUriTextToFormats,
                                                                      mutableSimplifiedMediaTypeToFormats, e)));

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java
Patch:
@@ -98,8 +98,8 @@ public final class AnnotatedService implements HttpService {
 
     static {
         if (!responseConverterFunctionProviders.isEmpty()) {
-            logger.info("Loaded {}: {}", ResponseConverterFunctionProvider.class.getSimpleName(),
-                        responseConverterFunctionProviders);
+            logger.debug("Available {}s: {}", ResponseConverterFunctionProvider.class.getSimpleName(),
+                         responseConverterFunctionProviders);
         }
     }
 

File: core/src/main/java/com/linecorp/armeria/server/docs/DocService.java
Patch:
@@ -97,7 +97,7 @@ public final class DocService extends SimpleDecoratingHttpService {
             DocServicePlugin.class, DocService.class.getClassLoader()));
 
     static {
-        logger.info("Loaded {}: {}", DocServicePlugin.class.getSimpleName(), plugins);
+        logger.debug("Available {}s: {}", DocServicePlugin.class.getSimpleName(), plugins);
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/common/metric/MeterIdPrefixFunction.java
Patch:
@@ -26,7 +26,6 @@
 import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.common.logging.RequestOnlyLog;
 import com.linecorp.armeria.internal.common.metric.DefaultMeterIdPrefixFunction;
-import com.linecorp.armeria.server.Route;
 import com.linecorp.armeria.server.VirtualHost;
 import com.linecorp.armeria.server.metric.MetricCollectingService;
 
@@ -48,7 +47,7 @@ public interface MeterIdPrefixFunction {
      * <ul>
      *   <li>Server-side tags:<ul>
      *     <li>{@code hostnamePattern} - {@link VirtualHost#hostnamePattern()}
-     *     <li>{@code route} - {@link Route#patternString()}</li>
+     *     <li>{@code service} - RPC service name or innermost service class name</li>
      *     <li>{@code method} - RPC method name or {@link HttpMethod#name()} if RPC method name is not
      *                          available</li>
      *     <li>{@code httpStatus} - {@link HttpStatus#code()}</li>

File: spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/AbstractArmeriaBeanPostProcessor.java
Patch:
@@ -47,7 +47,7 @@
 import com.linecorp.armeria.server.Server;
 
 /**
- * Abstract class for implementing ArmeriaBeanPostProcessor of boot-autoconfigure module
+ * Abstract class for implementing ArmeriaBeanPostProcessor of boot2-autoconfigure module
  * and ArmeriaSpringBoot1BeanPostProcessor of boot1-autoconfigure module.
  */
 abstract class AbstractArmeriaBeanPostProcessor {

File: eureka/src/main/java/com/linecorp/armeria/server/eureka/EurekaUpdatingListenerBuilder.java
Patch:
@@ -65,7 +65,7 @@
  *                               .vipAddress("armeria.service.com:8080");
  *                               .build();
  * ServerBuilder sb = Server.builder();
- * sb.addListener(listener);
+ * sb.serverListener(listener);
  * }</pre>
  */
 public final class EurekaUpdatingListenerBuilder extends AbstractWebClientBuilder {

File: zookeeper3/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListenerBuilder.java
Patch:
@@ -35,7 +35,7 @@
  *                              .sessionTimeoutMillis(10000)
  *                              .build();
  * ServerBuilder sb = Server.builder();
- * sb.addListener(listener);
+ * sb.serverListener(listener);
  * }</pre>
  * This registers the {@link Server} using the format compatible with
  * <a href="https://curator.apache.org/curator-x-discovery/index.html">Curator Service Discovery</a>.
@@ -51,7 +51,7 @@
  *     ZooKeeperUpdatingListener.builder(curatorFramework, "/myProductionEndpoints", spec)
  *                              .build();
  * ServerBuilder sb = Server.builder();
- * sb.addListener(listener);
+ * sb.serverListener(listener);
  * }</pre>
  * */
 public final class ZooKeeperUpdatingListenerBuilder extends AbstractCuratorFrameworkBuilder {

File: core/src/test/java/com/linecorp/armeria/common/FlagsTest.java
Patch:
@@ -19,7 +19,6 @@
 import static org.assertj.core.api.Assumptions.assumeThat;
 
 import java.io.ByteArrayOutputStream;
-import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.lang.invoke.MethodHandle;
@@ -103,7 +102,7 @@ public Class<?> loadClass(String name) throws ClassNotFoundException {
             // Reload every class in common package.
             try {
                 // Classes do not have an inner class.
-                final String replaced = name.replace('.', File.separatorChar) + ".class";
+                final String replaced = name.replace('.', '/') + ".class";
                 final URL url = getClass().getClassLoader().getResource(replaced);
                 final URLConnection connection = url.openConnection();
                 final InputStream input = connection.getInputStream();

File: examples/thrift/src/main/java/example/armeria/thrift/Main.java
Patch:
@@ -42,6 +42,7 @@ static Server newServer(int httpPort, int httpsPort) throws Exception {
                      .https(httpsPort)
                      .tlsSelfSigned()
                      .service("/", thriftService)
+                     .service("/second", thriftService)
                      // You can access the documentation service at http://127.0.0.1:8080/docs.
                      // See https://armeria.dev/docs/server-docservice for more information.
                      .serviceUnder("/docs",

File: grpc/src/main/java/com/linecorp/armeria/internal/server/grpc/GrpcDocServicePlugin.java
Patch:
@@ -276,6 +276,7 @@ static MethodInfo newMethodInfo(MethodDescriptor method, ServiceEntry service) {
                                          return builder.availableMimeTypes(e.availableMimeTypes()).build();
                                      })
                                      .collect(toImmutableSet());
+
         return new MethodInfo(
                 method.getName(),
                 namedMessageSignature(method.getOutputType()),

File: core/src/main/java/com/linecorp/armeria/common/util/Version.java
Patch:
@@ -111,7 +111,7 @@ public static Version get(String artifactId, ClassLoader classLoader) {
 
     /**
      * Retrieves the version information of Armeria artifacts.
-     * This method is a shortcut for {@code identify(Version.class.getClassLoader())}.
+     * This method is a shortcut for {@link #getAll(ClassLoader) getAll(Version.class.getClassLoader())}.
      *
      * @return A {@link Map} whose keys are Maven artifact IDs and whose values are {@link Version}s
      */

File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java
Patch:
@@ -296,8 +296,8 @@ ClientRequestContext newDerivedContext(RequestId id, @Nullable HttpRequest req,
 
     /**
      * Returns the amount of time allowed until receiving the {@link Response} completely
-     * since the transfer of the {@link Response} started. This value is initially set from
-     * {@link ClientOptions#RESPONSE_TIMEOUT_MILLIS}.
+     * since the transfer of the {@link Response} started or the {@link Request} was fully sent. This value is
+     * initially set from {@link ClientOptions#RESPONSE_TIMEOUT_MILLIS}.
      */
     long responseTimeoutMillis();
 

File: spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaClientHttpRequest.java
Patch:
@@ -141,7 +141,7 @@ private Supplier<Mono<Void>> execute(Supplier<HttpRequest> supplier) {
             assert request == null : request;
             request = supplier.get();
             future.complete(client.execute(request));
-            return Mono.fromFuture(request.whenComplete());
+            return Mono.empty();
         });
     }
 

File: core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java
Patch:
@@ -648,6 +648,7 @@ private Http2Settings http2Settings() {
             settings.maxFrameSize(maxFrameSize);
         }
         settings.maxHeaderListSize(clientFactory.http2MaxHeaderListSize());
+        settings.pushEnabled(false);
         return settings;
     }
 

File: spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/ArmeriaConfigurationUtil.java
Patch:
@@ -84,7 +84,8 @@ public final class ArmeriaConfigurationUtil {
      */
     public static void configureServerWithArmeriaSettings(ServerBuilder server, ArmeriaSettings settings,
                                                           MeterRegistry meterRegistry,
-                                                          List<HealthChecker> healthCheckers) {
+                                                          List<HealthChecker> healthCheckers,
+                                                          MeterIdPrefixFunction meterIdPrefixFunction) {
         requireNonNull(server, "server");
         requireNonNull(settings, "settings");
         requireNonNull(meterRegistry, "meterRegistry");
@@ -128,8 +129,7 @@ public static void configureServerWithArmeriaSettings(ServerBuilder server, Arme
                 }
             }
 
-            server.decorator(MetricCollectingService.newDecorator(
-                    MeterIdPrefixFunction.ofDefault("armeria.server")));
+            server.decorator(MetricCollectingService.newDecorator(meterIdPrefixFunction));
         }
 
         if (settings.getSsl() != null) {

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/KotlinUtil.java
Patch:
@@ -54,7 +54,7 @@ final class KotlinUtil {
         MethodHandle callKotlinSuspendingMethod = null;
         try {
             final Class<?> coroutineUtilClass =
-                    getClass("com.linecorp.armeria.internal.common.kotlin.CoroutineUtil");
+                    getClass("com.linecorp.armeria.internal.common.kotlin.ArmeriaCoroutineUtil");
 
             callKotlinSuspendingMethod = MethodHandles.lookup().findStatic(
                     coroutineUtilClass, "callKotlinSuspendingMethod",
@@ -75,7 +75,7 @@ final class KotlinUtil {
         Method isReturnTypeUnit = null;
         try {
             final Class<?> kotlinUtilClass =
-                    getClass("com.linecorp.armeria.internal.common.kotlin.KotlinUtil");
+                    getClass("com.linecorp.armeria.internal.common.kotlin.ArmeriaKotlinUtil");
 
             isContinuation = kotlinUtilClass.getMethod("isContinuation", Class.class);
             isSuspendingFunction = kotlinUtilClass.getMethod("isSuspendingFunction", Method.class);

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceFactory.java
Patch:
@@ -193,7 +193,8 @@ private static HttpStatus defaultResponseStatus(Method method) {
             // Set a default HTTP status code for a response depending on the return type of the method.
             final Class<?> returnType = method.getReturnType();
             return returnType == Void.class ||
-                   returnType == void.class ? HttpStatus.NO_CONTENT : HttpStatus.OK;
+                   returnType == void.class ||
+                   KotlinUtil.isSuspendingAndReturnTypeUnit(method) ? HttpStatus.NO_CONTENT : HttpStatus.OK;
         }
 
         final int statusCode = statusCodeAnnotation.value();
@@ -374,7 +375,7 @@ private static List<Method> requestMappingMethods(Object object) {
                                            .stream()
                                            .map(Annotation::annotationType)
                                            .anyMatch(a -> a == Path.class ||
-                                       HTTP_METHOD_MAP.containsKey(a)))
+                                                          HTTP_METHOD_MAP.containsKey(a)))
                 .sorted(Comparator.comparingInt(AnnotatedServiceFactory::order))
                 .collect(toImmutableList());
     }

File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContextBuilder.java
Patch:
@@ -17,7 +17,7 @@
 
 import static java.util.Objects.requireNonNull;
 
-import java.net.InetSocketAddress;
+import java.net.SocketAddress;
 import java.net.URI;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
@@ -193,12 +193,12 @@ public ClientRequestContextBuilder id(RequestId id) {
     }
 
     @Override
-    public ClientRequestContextBuilder remoteAddress(InetSocketAddress remoteAddress) {
+    public ClientRequestContextBuilder remoteAddress(SocketAddress remoteAddress) {
         return (ClientRequestContextBuilder) super.remoteAddress(remoteAddress);
     }
 
     @Override
-    public ClientRequestContextBuilder localAddress(InetSocketAddress localAddress) {
+    public ClientRequestContextBuilder localAddress(SocketAddress localAddress) {
         return (ClientRequestContextBuilder) super.localAddress(localAddress);
     }
 

File: core/src/main/java/com/linecorp/armeria/client/ConnectionPoolListener.java
Patch:
@@ -17,7 +17,6 @@
 
 import java.net.InetSocketAddress;
 
-import com.linecorp.armeria.client.logging.ConnectionPoolLoggingListener;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.util.Ticker;
 import com.linecorp.armeria.common.util.Unwrappable;

File: core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java
Patch:
@@ -193,7 +193,7 @@ private DefaultClientRequestContext(
         }
         writeTimeoutMillis = options.writeTimeoutMillis();
         maxResponseLength = options.maxResponseLength();
-        additionalRequestHeaders = options.get(ClientOptions.HTTP_HEADERS);
+        additionalRequestHeaders = options.get(ClientOptions.HEADERS);
         customizers = copyThreadLocalCustomizers();
     }
 

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/AbstractHealthCheckedEndpointGroupBuilder.java
Patch:
@@ -138,8 +138,8 @@ public AbstractHealthCheckedEndpointGroupBuilder clientOptions(ClientOptions cli
      * Sets the {@link Function} that customizes a {@link Client} that sends health check requests.
      * <pre>{@code
      * builder.withClientOptions(b -> {
-     *     return b.setHttpHeader(HttpHeaders.AUTHORIZATION,
-     *                            "bearer my-access-token")
+     *     return b.setHeader(HttpHeaders.AUTHORIZATION,
+     *                        "bearer my-access-token")
      *             .responseTimeout(Duration.ofSeconds(3));
      * });
      * }</pre>

File: core/src/main/java/com/linecorp/armeria/common/logging/BuiltInProperty.java
Patch:
@@ -50,7 +50,7 @@
 /**
  * A built-in property exported by {@link RequestContextExporter}.
  *
- * @see RequestContextExporterBuilder#addBuiltIn(BuiltInProperty)
+ * @see RequestContextExporterBuilder#builtIn(BuiltInProperty)
  */
 public enum BuiltInProperty {
     /**

File: core/src/main/java/com/linecorp/armeria/common/metric/DropwizardMeterRegistries.java
Patch:
@@ -159,7 +159,6 @@ public MeterFilterReply accept(Meter.Id id) {
             }
         });
 
-        meterRegistry.config().namingConvention(MoreNamingConventions.dropwizard());
         return meterRegistry;
     }
 

File: core/src/main/java/com/linecorp/armeria/common/metric/PrometheusMeterRegistries.java
Patch:
@@ -71,9 +71,8 @@ public static PrometheusMeterRegistry newRegistry(CollectorRegistry registry, Cl
      * @return the specified {@link PrometheusMeterRegistry}
      */
     public static <T extends PrometheusMeterRegistry> T configureRegistry(T meterRegistry) {
-        requireNonNull(meterRegistry, "meterRegistry");
-        meterRegistry.config().namingConvention(MoreNamingConventions.prometheus());
-        return meterRegistry;
+        // This method currently does nothing, but we may do something in the future.
+        return requireNonNull(meterRegistry, "meterRegistry");
     }
 
     private PrometheusMeterRegistries() {}

File: core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java
Patch:
@@ -931,8 +931,8 @@ public ServerBuilder service(
             checkNotNull(decorated, "A decorator returned null: %s", d);
         }
 
-        final HttpService decorator = decorated;
-        serviceWithRoutes.routes().forEach(route -> service(route, decorator));
+        final HttpService finalDecorated = decorated;
+        serviceWithRoutes.routes().forEach(route -> service(route, finalDecorated));
         return this;
     }
 

File: core/src/main/java/com/linecorp/armeria/server/encoding/EncodingServiceBuilder.java
Patch:
@@ -80,14 +80,14 @@ public EncodingServiceBuilder encodableContentTypes(MediaType... contentTypes) {
      */
     public EncodingServiceBuilder encodableContentTypes(Iterable<MediaType> contentTypes) {
         final List<MediaType> snapshot = ImmutableList.copyOf(requireNonNull(contentTypes, "contentTypes"));
-        return encodableContentTypePredicate(mediaType -> snapshot.stream().anyMatch(mediaType::belongsTo));
+        return encodableContentTypes(mediaType -> snapshot.stream().anyMatch(mediaType::belongsTo));
     }
 
     /**
      * Sets the specified {@link Predicate} to evaluate whether the content type of the {@link HttpResponse} is
      * encodable or not.
      */
-    public EncodingServiceBuilder encodableContentTypePredicate(
+    public EncodingServiceBuilder encodableContentTypes(
             Predicate<MediaType> encodableContentTypePredicate) {
         requireNonNull(encodableContentTypePredicate, "encodableContentTypePredicate");
         this.encodableContentTypePredicate = encodableContentTypePredicate;
@@ -99,7 +99,7 @@ public EncodingServiceBuilder encodableContentTypePredicate(
      * {@link HttpRequest} whose {@link RequestHeaders} is the input of the {@link Predicate}
      * is encodable or not.
      */
-    public EncodingServiceBuilder encodableRequestHeadersPredicate(
+    public EncodingServiceBuilder encodableRequestHeaders(
             Predicate<? super RequestHeaders> encodableRequestHeadersPredicate) {
         requireNonNull(encodableRequestHeadersPredicate, "encodableRequestHeadersPredicate");
         this.encodableRequestHeadersPredicate = encodableRequestHeadersPredicate;

File: core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java
Patch:
@@ -413,8 +413,8 @@ void testUnresolvedEndpointWithAlternateAuthority() throws Exception {
 
     private static void testEndpointWithAlternateAuthority(EndpointGroup group) {
         final WebClient client = WebClient.builder(SessionProtocol.HTTP, group)
-                                          .setHttpHeader(HttpHeaderNames.AUTHORITY,
-                                                         "255.255.255.255.xip.io")
+                                          .setHeader(HttpHeaderNames.AUTHORITY,
+                                                     "255.255.255.255.xip.io")
                                           .build();
 
         final AggregatedHttpResponse res = client.get("/hello/world").aggregate().join();
@@ -451,7 +451,7 @@ void testUserAgentOverridableByClientOption() throws Exception {
     private static void testHeaderOverridableByClientOption(String path, AsciiString headerName,
                                                             String headerValue) throws Exception {
         final WebClient client = WebClient.builder(server.httpUri())
-                                          .setHttpHeader(headerName, headerValue)
+                                          .setHeader(headerName, headerValue)
                                           .build();
 
         final AggregatedHttpResponse response = client.get(path).aggregate().get();

File: core/src/test/java/com/linecorp/armeria/client/HttpClientSniTest.java
Patch:
@@ -145,7 +145,7 @@ void testCustomAuthorityWithAdditionalHeaders() throws Exception {
         final WebClient client = WebClient.builder("https://127.0.0.1:" + httpsPort)
                                           .factory(clientFactory)
                                           .build();
-        try (SafeCloseable unused = Clients.withHttpHeader(HttpHeaderNames.AUTHORITY, "a.com:" + httpsPort)) {
+        try (SafeCloseable unused = Clients.withHeader(HttpHeaderNames.AUTHORITY, "a.com:" + httpsPort)) {
             final AggregatedHttpResponse response = client.get("/").aggregate().get();
             assertThat(response.status()).isEqualTo(HttpStatus.OK);
             assertThat(response.contentUtf8()).isEqualTo("a.com: CN=a.com");

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientWithLoggingTest.java
Patch:
@@ -45,6 +45,7 @@
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogAvailabilityException;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
+import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.server.AbstractHttpService;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.ServiceRequestContext;
@@ -118,8 +119,8 @@ void retryingThenLogging() throws InterruptedException {
                                               final RequestLogBuilder logBuilder = ctx.logBuilder();
                                               logBuilder.name("FooService", "foo");
                                               logBuilder.requestContent("bar", null);
-                                              logBuilder.deferRequestContentPreview();
-                                              logBuilder.deferResponseContent();
+                                              logBuilder.defer(RequestLogProperty.REQUEST_CONTENT_PREVIEW);
+                                              logBuilder.defer(RequestLogProperty.RESPONSE_CONTENT);
                                               return delegate.execute(ctx, req);
                                           })
                                           .build();

File: core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java
Patch:
@@ -73,9 +73,7 @@ protected void configure(ServerBuilder sb) throws Exception {
                   });
                   return delegate.serve(ctx, req);
               })
-              .decorator(decorator1)
-              .decorator(decorator2)
-              .decorator(decorator3)
+              .decorators(decorator1, decorator2, decorator3)
               .build((ctx, req) -> {
                   if (req.method() == HttpMethod.GET) {
                       return HttpResponse.of(ctx.pathParam("name"));

File: dropwizard2/src/main/java/com/linecorp/armeria/dropwizard/ArmeriaConfigurationUtil.java
Patch:
@@ -340,8 +340,8 @@ private static Function<? super HttpService, EncodingService> contentEncodingDec
         }
 
         return EncodingService.builder()
-                              .encodableContentTypePredicate(encodableContentTypePredicate)
-                              .encodableRequestHeadersPredicate(encodableRequestHeadersPredicate)
+                              .encodableContentTypes(encodableContentTypePredicate)
+                              .encodableRequestHeaders(encodableRequestHeadersPredicate)
                               .minBytesToForceChunkedEncoding(minBytesToForceChunkedAndEncoding)
                               .newDecorator();
     }

File: examples/grpc-reactor/src/main/java/example/armeria/grpc/reactor/Main.java
Patch:
@@ -54,13 +54,13 @@ static Server newServer(int httpPort, int httpsPort) throws Exception {
                      // See https://armeria.dev/docs/server-docservice for more information.
                      .serviceUnder("/docs",
                              DocService.builder()
-                                       .exampleRequestForMethod(
+                                       .exampleRequests(
                                                HelloServiceGrpc.SERVICE_NAME,
                                                "Hello", exampleRequest)
-                                       .exampleRequestForMethod(
+                                       .exampleRequests(
                                                HelloServiceGrpc.SERVICE_NAME,
                                                "LazyHello", exampleRequest)
-                                       .exampleRequestForMethod(
+                                       .exampleRequests(
                                                HelloServiceGrpc.SERVICE_NAME,
                                                "BlockingHello", exampleRequest)
                                        .exclude(DocServiceFilter.ofServiceName(

File: examples/saml-service-provider/src/main/java/example/armeria/server/saml/sp/Main.java
Patch:
@@ -55,8 +55,8 @@ private static SamlServiceProvider samlServiceProvider() throws IOException, Gen
                         .type("PKCS12")
                         .password("N5^X[hvG")
                         // You need to specify your key pair and its password here.
-                        .addKeyPassword("signing", "N5^X[hvG")
-                        .addKeyPassword("encryption", "N5^X[hvG")
+                        .keyPassword("signing", "N5^X[hvG")
+                        .keyPassword("encryption", "N5^X[hvG")
                         .build();
 
         return SamlServiceProvider.builder()

File: grpc/src/main/java/com/linecorp/armeria/internal/server/grpc/GrpcDocServicePlugin.java
Patch:
@@ -284,7 +284,7 @@ static MethodInfo newMethodInfo(MethodDescriptor method, ServiceEntry service) {
                                           .requirement(FieldRequirement.REQUIRED).build()),
                 /* exceptionTypeSignatures */ ImmutableList.of(),
                 methodEndpoints,
-                /* exampleHttpHeaders */ ImmutableList.of(),
+                /* exampleHeaders */ ImmutableList.of(),
                 defaultExamples(method),
                 /* examplePaths */ ImmutableList.of(),
                 /* exampleQueries */ ImmutableList.of(),

File: grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java
Patch:
@@ -870,7 +870,7 @@ void exchangeHeadersUnaryCall_armeriaHeaders() throws Exception {
         TestServiceBlockingStub stub =
                 Clients.newDerivedClient(
                         blockingStub,
-                        ClientOptions.HTTP_HEADERS.newValue(
+                        ClientOptions.HEADERS.newValue(
                                 HttpHeaders.of(TestServiceImpl.EXTRA_HEADER_NAME, "dog")));
 
         final AtomicReference<Metadata> headers = new AtomicReference<>();
@@ -1089,7 +1089,7 @@ void exchangeHeadersStreamingCall() throws Exception {
         final TestServiceStub stub =
                 Clients.newDerivedClient(
                         asyncStub,
-                        ClientOptions.HTTP_HEADERS.newValue(
+                        ClientOptions.HEADERS.newValue(
                                 HttpHeaders.of(TestServiceImpl.EXTRA_HEADER_NAME, "dog")));
 
         final List<Integer> responseSizes = Arrays.asList(50, 100, 150, 200);

File: grpc/src/test/java/com/linecorp/armeria/internal/server/grpc/GrpcDocServiceTest.java
Patch:
@@ -117,15 +117,15 @@ protected void configure(ServerBuilder sb) throws Exception {
                                        .build());
             sb.serviceUnder("/docs/",
                             DocService.builder()
-                                      .exampleRequestForMethod(
+                                      .exampleRequests(
                                             TestServiceGrpc.SERVICE_NAME,
                                             "UnaryCall",
                                             SimpleRequest.newBuilder()
                                                          .setPayload(
                                                              Payload.newBuilder()
                                                                     .setBody(ByteString.copyFromUtf8("world")))
                                                          .build())
-                                      .injectedScript(INJECTED_HEADER_PROVIDER1, INJECTED_HEADER_PROVIDER2)
+                                      .injectedScripts(INJECTED_HEADER_PROVIDER1, INJECTED_HEADER_PROVIDER2)
                                       .injectedScriptSupplier((ctx, req) -> INJECTED_HEADER_PROVIDER3)
                                       .exclude(DocServiceFilter.ofMethodName(
                                                         TestServiceGrpc.SERVICE_NAME,

File: grpc/src/test/java/com/linecorp/armeria/it/grpc/GrpcMetricsIntegrationTest.java
Patch:
@@ -240,7 +240,7 @@ private static void makeUnframedRequest(String name) throws Exception {
         final WebClient client =
                 Clients.builder(server.httpUri())
                        .factory(clientFactory)
-                       .addHttpHeader(HttpHeaderNames.CONTENT_TYPE, MediaType.PROTOBUF.toString())
+                       .addHeader(HttpHeaderNames.CONTENT_TYPE, MediaType.PROTOBUF.toString())
                        .build(WebClient.class);
 
         final SimpleRequest request =

File: retrofit2/src/test/java/com/linecorp/armeria/client/retrofit2/ArmeriaRetrofitBuilderTest.java
Patch:
@@ -122,7 +122,7 @@ void build_armeriaGroupAuthority() {
     void build_clientOptions() {
         final Service secretService = ArmeriaRetrofit
                 .builder(server.httpUri())
-                .addHttpHeader(HttpHeaderNames.AUTHORIZATION, "Bearer: access-token")
+                .addHeader(HttpHeaderNames.AUTHORIZATION, "Bearer: access-token")
                 .addConverterFactory(converterFactory)
                 .build()
                 .create(Service.class);

File: saml/src/main/java/com/linecorp/armeria/server/saml/KeyStoreCredentialResolverBuilder.java
Patch:
@@ -95,7 +95,7 @@ public KeyStoreCredentialResolverBuilder password(@Nullable String password) {
     /**
      * Adds a key name and its password to the {@link KeyStoreCredentialResolverBuilder}.
      */
-    public KeyStoreCredentialResolverBuilder addKeyPassword(String name, String password) {
+    public KeyStoreCredentialResolverBuilder keyPassword(String name, String password) {
         requireNonNull(name, "name");
         requireNonNull(password, "password");
         checkArgument(!keyPasswords.containsKey(name), "key already exists: %s", name);
@@ -106,9 +106,9 @@ public KeyStoreCredentialResolverBuilder addKeyPassword(String name, String pass
     /**
      * Adds all key names and their passwords which are specified by the {@code keyPasswords}.
      */
-    public KeyStoreCredentialResolverBuilder addKeyPasswords(Map<String, String> keyPasswords) {
+    public KeyStoreCredentialResolverBuilder keyPasswords(Map<String, String> keyPasswords) {
         requireNonNull(keyPasswords, "keyPasswords");
-        keyPasswords.forEach(this::addKeyPassword);
+        keyPasswords.forEach(this::keyPassword);
         return this;
     }
 

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlMetadataServiceFunction.java
Patch:
@@ -67,7 +67,7 @@ final class SamlMetadataServiceFunction implements SamlServiceFunction {
     @VisibleForTesting
     static final MediaType CONTENT_TYPE_SAML_METADATA = MediaType.parse("application/samlmetadata+xml");
 
-    private static final ResponseHeaders HTTP_HEADERS =
+    private static final ResponseHeaders RESPONSE_HEADERS =
             ResponseHeaders.of(HttpStatus.OK,
                                HttpHeaderNames.CONTENT_TYPE, CONTENT_TYPE_SAML_METADATA,
                                HttpHeaderNames.CONTENT_DISPOSITION,
@@ -113,7 +113,7 @@ public HttpResponse serve(ServiceRequestContext ctx, AggregatedHttpRequest req,
         });
 
         if (metadata != HttpData.empty()) {
-            return HttpResponse.of(HTTP_HEADERS, metadata);
+            return HttpResponse.of(RESPONSE_HEADERS, metadata);
         } else {
             return HttpResponse.of(HttpStatus.NOT_FOUND);
         }

File: spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/DataBufferFactoryWrapperConfiguration.java
Patch:
@@ -22,8 +22,6 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.core.io.buffer.DataBufferFactory;
 
-import com.linecorp.armeria.spring.web.ArmeriaWebServer;
-
 /**
  * A configuration class which creates an {@link DataBufferFactoryWrapper}.
  */

File: thrift0.13/src/test/java/com/linecorp/armeria/server/thrift/ThriftSerializationFormatsTest.java
Patch:
@@ -123,7 +123,7 @@ public void contentTypeNotThrift() throws Exception {
         // Browser clients often send a non-Thrift content type.
         final HelloService.Iface client =
                 Clients.builder(server.httpUri(BINARY) + "/hello")
-                       .setHttpHeader(HttpHeaderNames.CONTENT_TYPE, "text/plain; charset=utf-8")
+                       .setHeader(HttpHeaderNames.CONTENT_TYPE, "text/plain; charset=utf-8")
                        .build(HelloService.Iface.class);
         assertThat(client.hello("Trustin")).isEqualTo("Hello, Trustin!");
     }
@@ -132,7 +132,7 @@ public void contentTypeNotThrift() throws Exception {
     public void acceptNotSameAsContentType() throws Exception {
         final HelloService.Iface client =
                 Clients.builder(server.httpUri(TEXT) + "/hello")
-                       .setHttpHeader(HttpHeaderNames.ACCEPT, "application/x-thrift; protocol=TBINARY")
+                       .setHeader(HttpHeaderNames.ACCEPT, "application/x-thrift; protocol=TBINARY")
                        .build(HelloService.Iface.class);
         assertThatThrownBy(() -> client.hello("Trustin")).isInstanceOf(InvalidResponseHeadersException.class)
                                                          .hasMessageContaining(":status=406");

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaChannel.java
Patch:
@@ -92,9 +92,6 @@ public <I, O> ClientCall<I, O> newCall(
                                   HttpHeaderNames.TE, HttpHeaderValues.TRAILERS));
         final DefaultClientRequestContext ctx = newContext(HttpMethod.POST, req);
 
-        final String fullMethodName = method.getFullMethodName();
-        final int methodIndex = fullMethodName.lastIndexOf('/') + 1;
-        ctx.logBuilder().name(method.getServiceName(), fullMethodName.substring(methodIndex));
         ctx.logBuilder().serializationFormat(serializationFormat);
         ctx.logBuilder().defer(RequestLogProperty.REQUEST_CONTENT,
                                RequestLogProperty.RESPONSE_CONTENT);

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/FramedGrpcService.java
Patch:
@@ -197,8 +197,6 @@ protected HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req) throws
             }
         }
 
-        final int methodIndex = methodName.lastIndexOf('/') + 1;
-        ctx.logBuilder().name(method.getMethodDescriptor().getServiceName(), methodName.substring(methodIndex));
         ctx.logBuilder().defer(RequestLogProperty.REQUEST_CONTENT,
                                RequestLogProperty.RESPONSE_CONTENT);
 

File: thrift0.13/src/main/java/com/linecorp/armeria/internal/client/thrift/THttpClientDelegate.java
Patch:
@@ -93,7 +93,6 @@ public RpcResponse execute(ClientRequestContext ctx, RpcRequest call) {
         final List<Object> args = call.params();
         final CompletableRpcResponse reply = new CompletableRpcResponse();
 
-        ctx.logBuilder().name(call.serviceType().getName(), call.method());
         ctx.logBuilder().serializationFormat(serializationFormat);
 
         final ThriftFunction func;

File: thrift0.13/src/main/java/com/linecorp/armeria/server/thrift/THttpService.java
Patch:
@@ -482,7 +482,6 @@ private void decodeAndInvoke(
                 handlePreDecodeException(ctx, httpRes, cause, serializationFormat, seqId, methodName);
                 return;
             }
-            ctx.logBuilder().name(f.serviceType().getName(), methodName);
 
             // Decode the invocation parameters.
             try {

File: core/src/main/java/com/linecorp/armeria/client/ClientBuilderParams.java
Patch:
@@ -44,12 +44,12 @@ static ClientBuilderParams of(URI uri, Class<?> type, ClientOptions options) {
      * Returns a newly created {@link ClientBuilderParams} from the specified properties.
      */
     static ClientBuilderParams of(Scheme scheme, EndpointGroup endpointGroup,
-                                  @Nullable String path, Class<?> type, ClientOptions options) {
+                                  @Nullable String absolutePathRef, Class<?> type, ClientOptions options) {
         requireNonNull(scheme, "scheme");
         requireNonNull(endpointGroup, "endpointGroup");
         requireNonNull(type, "type");
         requireNonNull(options, "options");
-        return new DefaultClientBuilderParams(scheme, endpointGroup, path, type, options);
+        return new DefaultClientBuilderParams(scheme, endpointGroup, absolutePathRef, type, options);
     }
 
     /**

File: grpc-protocol/src/main/java/com/linecorp/armeria/internal/common/grpc/protocol/GrpcTrailersUtil.java
Patch:
@@ -52,7 +52,7 @@ public static void addStatusMessageToTrailers(
     }
 
     /**
-     * Serializes the specified {@link HttpHeaders} to send as a body in grpc-web.
+     * Serializes the specified {@link HttpHeaders} to send as a body in gRPC-Web.
      */
     public static ByteBuf serializeTrailersAsMessage(ByteBufAllocator alloc, HttpHeaders trailers) {
         final ByteBuf serialized = alloc.buffer();

File: grpc/src/main/java/com/linecorp/armeria/common/grpc/GrpcSerializationFormats.java
Patch:
@@ -40,12 +40,12 @@ public final class GrpcSerializationFormats {
     public static final SerializationFormat JSON = SerializationFormat.of("gjson");
 
     /**
-     * gRPC-web protobuf serialization format.
+     * gRPC-Web protobuf serialization format.
      */
     public static final SerializationFormat PROTO_WEB = SerializationFormat.of("gproto-web");
 
     /**
-     * gRPC-web JSON serialization format.
+     * gRPC-Web JSON serialization format.
      */
     public static final SerializationFormat JSON_WEB = SerializationFormat.of("gjson-web");
 
@@ -88,7 +88,7 @@ public static boolean isJson(SerializationFormat format) {
     }
 
     /**
-     * Returns whether the specified {@link SerializationFormat} is gRPC-web, the subset of gRPC that supports
+     * Returns whether the specified {@link SerializationFormat} is gRPC-Web, the subset of gRPC that supports
      * browsers.
      */
     public static boolean isGrpcWeb(SerializationFormat format) {

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java
Patch:
@@ -45,6 +45,7 @@
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.grpc.GrpcJsonMarshaller;
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
+import com.linecorp.armeria.common.grpc.GrpcWebTrailers;
 import com.linecorp.armeria.common.grpc.ThrowableProto;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer.DeframedMessage;
@@ -310,6 +311,7 @@ private void doClose(Status status, Metadata metadata) {
                 status, metadata);
         try {
             if (sendHeadersCalled && GrpcSerializationFormats.isGrpcWeb(serializationFormat)) {
+                GrpcWebTrailers.set(ctx, trailers);
                 // Normal trailers are not supported in grpc-web and must be encoded as a message.
                 final ByteBuf serialized = serializeTrailersAsMessage(ctx.alloc(), trailers);
                 if (res.tryWrite(messageFramer.writePayload(serialized, true))) {

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.java
Patch:
@@ -305,7 +305,7 @@ public GrpcServiceBuilder jsonMarshallerFactory(
      * processing. If disabled, the request timeout will be the one configured for the Armeria server, e.g.,
      * using {@link ServerBuilder#requestTimeout(Duration)}.
      *
-     * <p>It is recommended to disable this when clients are not trusted code, e.g., for grpc-web clients that
+     * <p>It is recommended to disable this when clients are not trusted code, e.g., for gRPC-Web clients that
      * can come from arbitrary browsers.
      */
     public GrpcServiceBuilder useClientTimeoutHeader(boolean useClientTimeoutHeader) {

File: core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java
Patch:
@@ -649,7 +649,7 @@ void testUpgradeRequestExecutesLogicOnlyOnce() throws Exception {
 
         assertThat(response.status()).isEqualTo(HttpStatus.OK);
 
-        clientFactory.close();
+        clientFactory.closeAsync();
     }
 
     @Test
@@ -665,7 +665,7 @@ void testDefaultClientFactoryOptions() throws Exception {
                 AggregatedHttpRequest.of(HttpMethod.GET, "/hello/world")).aggregate().get();
         assertThat(response.status()).isEqualTo(HttpStatus.OK);
 
-        clientFactory.close();
+        clientFactory.closeAsync();
     }
 
     @Test
@@ -681,7 +681,7 @@ void testEmptyClientFactoryOptions() throws Exception {
                 AggregatedHttpRequest.of(HttpMethod.GET, "/hello/world")).aggregate().get();
         assertThat(response.status()).isEqualTo(HttpStatus.OK);
 
-        clientFactory.close();
+        clientFactory.closeAsync();
     }
 
     @ParameterizedTest

File: core/src/test/java/com/linecorp/armeria/client/HttpClientTimeoutTest.java
Patch:
@@ -50,7 +50,7 @@ public static void init() {
 
     @AfterClass
     public static void destroy() {
-        factory.close();
+        factory.closeAsync();
     }
 
     @Rule

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientTest.java
Patch:
@@ -99,7 +99,7 @@ static void beforeAll() {
 
     @AfterAll
     static void afterAll() {
-        clientFactory.close();
+        clientFactory.closeAsync();
     }
 
     private final AtomicInteger responseAbortServiceCallCounter = new AtomicInteger();

File: core/src/test/java/com/linecorp/armeria/server/HttpServerStreamingTest.java
Patch:
@@ -130,7 +130,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
 
     @AfterAll
     static void destroy() {
-        CompletableFuture.runAsync(clientFactory::close);
+        clientFactory.closeAsync();
     }
 
     @BeforeEach

File: core/src/test/java/com/linecorp/armeria/server/HttpServerTest.java
Patch:
@@ -440,7 +440,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
 
     @AfterAll
     static void destroy() {
-        CompletableFuture.runAsync(clientFactory::close);
+        clientFactory.closeAsync();
     }
 
     @BeforeEach

File: core/src/test/java/com/linecorp/armeria/server/ProxyProtocolEnabledServerTest.java
Patch:
@@ -216,6 +216,7 @@ private static byte[] encodeV2UnknownProtocol(HAProxyMessage msg) {
 
         final byte[] out = new byte[buf.readableBytes()];
         buf.writeBytes(out);
+        buf.release();
         return out;
     }
 }

File: core/src/test/java/com/linecorp/armeria/server/ServerBuilderTest.java
Patch:
@@ -91,7 +91,7 @@ static void init() {
 
     @AfterAll
     static void destroy() {
-        clientFactory.close();
+        clientFactory.closeAsync();
     }
 
     private static Server newServerWithKeepAlive(long idleTimeoutMillis, long pingIntervalMillis) {

File: core/src/test/java/com/linecorp/armeria/server/ServerMaxConnectionAgeTest.java
Patch:
@@ -172,7 +172,7 @@ public void connectionClosed(SessionProtocol protocol, InetSocketAddress remoteA
                             "armeria.server.connections.lifespan#count{protocol=" + protocol.uriText() + '}',
                             value -> assertThat(value).isEqualTo(maxClosedConnection));
         });
-        clientFactory.close();
+        clientFactory.closeAsync();
     }
 
     @Test

File: grpc/src/test/java/com/linecorp/armeria/it/grpc/GrpcMetricsIntegrationTest.java
Patch:
@@ -106,7 +106,7 @@ protected void configure(ServerBuilder sb) throws Exception {
 
     @AfterClass
     public static void closeClientFactory() {
-        clientFactory.close();
+        clientFactory.closeAsync();
     }
 
     @Rule

File: thrift0.13/src/test/java/com/linecorp/armeria/it/metric/DropwizardMetricsIntegrationTest.java
Patch:
@@ -69,7 +69,7 @@ protected void configure(ServerBuilder sb) throws Exception {
 
     @AfterAll
     static void closeClientFactory() {
-        clientFactory.close();
+        clientFactory.closeAsync();
     }
 
     @Test

File: thrift0.13/src/test/java/com/linecorp/armeria/it/metric/PrometheusMetricsIntegrationTest.java
Patch:
@@ -97,7 +97,7 @@ protected void configure(ServerBuilder sb) throws Exception {
 
     @AfterClass
     public static void closeClientFactory() {
-        clientFactory.close();
+        clientFactory.closeAsync();
     }
 
     @Rule

File: spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactoryAutoConfiguration.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Import;
 import org.springframework.core.Ordered;
+import org.springframework.core.env.Environment;
 
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.spring.ArmeriaSettings;
@@ -46,7 +47,7 @@ public class ArmeriaReactiveWebServerFactoryAutoConfiguration {
      */
     @Bean
     public ArmeriaReactiveWebServerFactory armeriaReactiveWebServerFactory(
-            ConfigurableListableBeanFactory beanFactory) {
-        return new ArmeriaReactiveWebServerFactory(beanFactory);
+            ConfigurableListableBeanFactory beanFactory, Environment environment) {
+        return new ArmeriaReactiveWebServerFactory(beanFactory, environment);
     }
 }

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java
Patch:
@@ -242,8 +242,6 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
      * {@link HttpResponse}, it will be executed in the blocking task executor.
      */
     private CompletionStage<HttpResponse> serve0(ServiceRequestContext ctx, HttpRequest req) {
-        ctx.logBuilder().name(serviceName(), methodName());
-
         final CompletableFuture<AggregatedHttpRequest> f;
         if (AggregationStrategy.aggregationRequired(aggregationStrategy, req)) {
             f = req.aggregate();

File: core/src/main/java/com/linecorp/armeria/common/logging/RequestOnlyLog.java
Patch:
@@ -201,15 +201,13 @@ default long requestDurationNanos() {
      * </ul>
      * This property is often used as a meter tag or distributed trace's span name.
      */
-    @Nullable
     String name();
 
     /**
      * Returns the human-readable full name, which is the concatenation of {@link #serviceName()} and
      * {@link #name()} using {@code '/'}, of the {@link Request}.
      * This property is often used as a meter tag or distributed trace's span name.
      */
-    @Nullable
     String fullName();
 
     /**

File: spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponse.java
Patch:
@@ -287,7 +287,9 @@ private Mono<Void> cleanup(@Nullable Throwable cause) {
         final HttpResponse response = HttpResponse.of(buildResponseHeaders());
         future.complete(response);
         logger.debug("{} Response future has been completed with an HttpResponse", ctx);
-        return Mono.fromFuture(response.whenComplete());
+
+        return Mono.fromFuture(response.whenComplete())
+                   .onErrorResume(CancelledSubscriptionException.class, e -> Mono.empty());
     }
 
     @Override

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/FramedGrpcServiceTest.java
Patch:
@@ -31,6 +31,7 @@
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.ResponseHeaders;
+import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
 import com.linecorp.armeria.grpc.testing.TestServiceGrpc.TestServiceImplBase;
 import com.linecorp.armeria.server.Route;
 import com.linecorp.armeria.server.RoutingResult;
@@ -105,6 +106,8 @@ void missingMethod() throws Exception {
                 ResponseHeaders.builder(HttpStatus.OK)
                                .endOfStream(true)
                                .add(HttpHeaderNames.CONTENT_TYPE, "application/grpc+proto")
+                               .add(GrpcHeaderNames.GRPC_ENCODING, "identity")
+                               .add(GrpcHeaderNames.GRPC_ACCEPT_ENCODING, "gzip")
                                .addInt("grpc-status", 12)
                                .add("grpc-message", "Method not found: grpc.testing.TestService/FooCall")
                                .addInt(HttpHeaderNames.CONTENT_LENGTH, 0)

File: core/src/test/java/com/linecorp/armeria/client/ClientRequestContextTest.java
Patch:
@@ -62,9 +62,7 @@ void currentOrNull() {
         assertCurrentCtx(null);
 
         try (SafeCloseable unused = serviceRequestContext().push()) {
-            assertThatThrownBy(ClientRequestContext::currentOrNull)
-                    .isInstanceOf(IllegalStateException.class)
-                    .hasMessageContaining("not a client-side context");
+            assertThat(ClientRequestContext.currentOrNull()).isNull();
         }
     }
 

File: core/src/test/java/com/linecorp/armeria/server/ServiceRequestContextTest.java
Patch:
@@ -75,9 +75,7 @@ void currentOrNull() {
         assertCurrentCtx(null);
 
         try (SafeCloseable unused = clientRequestContext().push()) {
-            assertThatThrownBy(ServiceRequestContext::currentOrNull)
-                    .isInstanceOf(IllegalStateException.class)
-                    .hasMessageContaining("not a server-side context");
+            assertThat(ServiceRequestContext.currentOrNull()).isNull();
         }
     }
 

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/FramedGrpcService.java
Patch:
@@ -207,7 +207,6 @@ protected HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req) throws
         if (call != null) {
             ctx.whenRequestTimingOut().thenRun(() -> call.close(Status.CANCELLED, new Metadata()));
             req.subscribe(call.messageReader(), ctx.eventLoop(), SubscriptionOption.WITH_POOLED_OBJECTS);
-            req.whenComplete().handleAsync(call.messageReader(), ctx.eventLoop());
         }
         return res;
     }

File: grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/HttpStreamReaderTest.java
Patch:
@@ -153,15 +153,15 @@ public void onMessage_deframeError_errorListenerThrows() throws Exception {
 
     @Test
     public void clientDone() throws Exception {
-        reader.apply(null, null);
+        reader.onComplete();
         verify(deframer).deframe(HttpData.empty(), true);
         verify(deframer).closeWhenComplete();
     }
 
     @Test
     public void onComplete_when_deframer_isClosing() {
         when(deframer.isClosing()).thenReturn(true);
-        reader.apply(null, null);
+        reader.onComplete();
         verify(deframer, never()).deframe(HttpData.empty(), true);
         verify(deframer, never()).closeWhenComplete();
     }

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java
Patch:
@@ -331,8 +331,8 @@ public void messageRead(DeframedMessage message) {
                 // TODO(minwoox) Optimize this by creating buffer with the sensible initial capacity.
                 buf = ctx.alloc().compositeBuffer();
                 boolean success = false;
-                try (ByteBufOutputStream os = new ByteBufOutputStream(buf)) {
-                    final InputStream stream = message.stream();
+                try (ByteBufOutputStream os = new ByteBufOutputStream(buf);
+                     InputStream stream = message.stream()) {
                     assert stream != null;
                     ByteStreams.copy(stream, os);
                     success = true;

File: core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java
Patch:
@@ -186,9 +186,6 @@ private void addResponseToDecoder() {
         final long maxContentLength = ctx.maxResponseLength();
         responseWrapper = responseDecoder.addResponse(id, originalRes, ctx,
                                                       ch.eventLoop(), responseTimeoutMillis, maxContentLength);
-        if (ctx instanceof DefaultClientRequestContext) {
-            ((DefaultClientRequestContext) ctx).setResponseTimeoutController(responseWrapper);
-        }
     }
 
     private void writeFirstHeader(HttpSession session) {

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -462,7 +462,6 @@ private void handleRequest(ChannelHandlerContext ctx, DecodedHttpRequest req) th
             assert responseEncoder != null;
             final HttpResponseSubscriber resSubscriber =
                     new HttpResponseSubscriber(ctx, responseEncoder, reqCtx, req);
-            reqCtx.setRequestTimeoutController(resSubscriber);
             res.subscribe(resSubscriber, eventLoop, SubscriptionOption.WITH_POOLED_OBJECTS);
         }
     }

File: core/src/test/java/com/linecorp/armeria/client/HttpClientResponseTimeoutHandlerTest.java
Patch:
@@ -72,7 +72,7 @@ void testResponseTimeoutHandler(SessionProtocol protocol, boolean useResponseTim
                                           .responseTimeout(Duration.ofSeconds(2))
                                           .decorator((delegate, ctx, req) -> {
                                               if (useResponseTimeoutHandler) {
-                                                  ctx.setResponseTimeoutHandler(() -> {
+                                                  ctx.whenResponseTimingOut().thenRun(() -> {
                                                       ctx.request().abort(reqCause);
                                                       invokeResponseTimeoutHandler.set(true);
                                                   });
@@ -107,7 +107,7 @@ void testResponseTimeoutHandlerRequestAbort(SessionProtocol protocol) {
         final WebClient client = WebClient.builder(server.uri(protocol))
                                           .responseTimeout(Duration.ofSeconds(2))
                                           .decorator((delegate, ctx, req) -> {
-                                              ctx.setResponseTimeoutHandler(() -> {
+                                              ctx.whenResponseTimingOut().thenRun(() -> {
                                                   ctx.request().abort(reqCause);
                                               });
                                               logHolder.set(ctx.log());
@@ -136,7 +136,7 @@ void testResponseTimeoutHandlerResponseAbort(SessionProtocol protocol) {
                 .responseTimeout(Duration.ofSeconds(2))
                 .decorator((delegate, ctx, req) -> {
                     final HttpResponse response = delegate.execute(ctx, req);
-                    ctx.setResponseTimeoutHandler(() -> {
+                    ctx.whenResponseTimingOut().thenRun(() -> {
                         invokeResponseTimeoutHandler.set(true);
                         response.abort(resCause);
                     });

File: core/src/test/java/com/linecorp/armeria/server/HttpServerTest.java
Patch:
@@ -150,7 +150,7 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) {
                 protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) {
                     final CompletableFuture<HttpResponse> responseFuture = new CompletableFuture<>();
                     final HttpResponse res = HttpResponse.from(responseFuture);
-                    ctx.setRequestTimeoutHandler(
+                    ctx.whenRequestTimingOut().thenRun(
                             () -> responseFuture.complete(
                                     HttpResponse.of(HttpStatus.OK, MediaType.PLAIN_TEXT_UTF_8, "timed out")));
                     final long delayMillis = Long.parseLong(ctx.pathParam("delay"));
@@ -163,7 +163,7 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) {
             sb.service("/delay-custom-deferred/{delay}", (ctx, req) -> {
                 final CompletableFuture<HttpResponse> responseFuture = new CompletableFuture<>();
                 final HttpResponse res = HttpResponse.from(responseFuture);
-                ctx.setRequestTimeoutHandler(
+                ctx.whenRequestTimingOut().thenRun(
                         () -> responseFuture.complete(HttpResponse.of(
                                 HttpStatus.OK, MediaType.PLAIN_TEXT_UTF_8, "timed out")));
                 final long delayMillis = Long.parseLong(ctx.pathParam("delay"));

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/FramedGrpcService.java
Patch:
@@ -205,7 +205,7 @@ protected HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req) throws
         final ArmeriaServerCall<?, ?> call = startCall(
                 methodName, method, ctx, req.headers(), res, serializationFormat);
         if (call != null) {
-            ctx.setRequestTimeoutHandler(() -> call.close(Status.CANCELLED, new Metadata()));
+            ctx.whenRequestTimingOut().thenRun(() -> call.close(Status.CANCELLED, new Metadata()));
             req.subscribe(call.messageReader(), ctx.eventLoop(), SubscriptionOption.WITH_POOLED_OBJECTS);
             req.whenComplete().handleAsync(call.messageReader(), ctx.eventLoop());
         }

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java
Patch:
@@ -144,7 +144,7 @@ public HttpData writePayload(ByteBuf message, boolean webTrailers) {
             final ByteBuf maybeEncodedBuf;
             if (encodeBase64) {
                 try {
-                    maybeEncodedBuf = Base64.encode(buf);
+                    maybeEncodedBuf = Base64.encode(buf, false);
                 } finally {
                     buf.release();
                 }

File: benchmarks/src/jmh/java/com/linecorp/armeria/grpc/GrpcServiceBenchmark.java
Patch:
@@ -52,7 +52,7 @@ public class GrpcServiceBenchmark {
     private static final byte[] FRAMED_EMPTY;
 
     static {
-        try (HttpData data = new ArmeriaMessageFramer(ByteBufAllocator.DEFAULT, 0)
+        try (HttpData data = new ArmeriaMessageFramer(ByteBufAllocator.DEFAULT, 0, false)
                 .writePayload(Unpooled.wrappedBuffer(Empty.getDefaultInstance().toByteArray()))) {
             FRAMED_EMPTY = data.array();
         }

File: benchmarks/src/jmh/java/com/linecorp/armeria/grpc/downstream/LargePayloadBenchmark.java
Patch:
@@ -76,8 +76,7 @@ public void onNext(BinaryPayload value) {
                             responseObserver.onNext(value);
                         } finally {
                             if (wrapBuffer) {
-                                GrpcUnsafeBufferUtil.releaseBuffer(value,
-                                                                   ServiceRequestContext.current());
+                                GrpcUnsafeBufferUtil.releaseBuffer(value, ServiceRequestContext.current());
                             }
                         }
                     }

File: grpc-protocol/src/main/java/com/linecorp/armeria/client/grpc/protocol/UnaryGrpcClient.java
Patch:
@@ -139,7 +139,7 @@ public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) {
                                    final ByteBuf buf = msg.content().byteBuf();
                                    final HttpData framed;
                                    try (ArmeriaMessageFramer framer = new ArmeriaMessageFramer(
-                                           ctx.alloc(), Integer.MAX_VALUE)) {
+                                           ctx.alloc(), Integer.MAX_VALUE, false)) {
                                        framed = framer.writePayload(buf);
                                    }
 
@@ -179,7 +179,7 @@ public void endOfStream() {
                                                                                msg.trailers()));
                                    }
                                }
-                           }, Integer.MAX_VALUE, ctx.alloc())) {
+                           }, Integer.MAX_VALUE, ctx.alloc(), false)) {
                                deframer.request(1);
                                deframer.deframe(msg.content(), true);
                            }

File: grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnsafeUnaryGrpcService.java
Patch:
@@ -74,7 +74,7 @@ protected final HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req)
                    .thenCompose(this::handleMessage)
                    .thenApply(responseMessage -> {
                        final ArmeriaMessageFramer framer = new ArmeriaMessageFramer(
-                               ctx.alloc(), Integer.MAX_VALUE);
+                               ctx.alloc(), Integer.MAX_VALUE, false);
                        final HttpData framed = framer.writePayload(responseMessage);
                        return HttpResponse.of(
                                RESPONSE_HEADERS,
@@ -116,7 +116,7 @@ public void endOfStream() {
                     }
                 },
                 Integer.MAX_VALUE,
-                alloc)) {
+                alloc, false)) {
             deframer.request(1);
             deframer.deframe(framed, true);
         }

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcClientOptions.java
Patch:
@@ -30,6 +30,7 @@
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.grpc.GrpcJsonMarshaller;
 import com.linecorp.armeria.common.grpc.GrpcJsonMarshallerBuilder;
+import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageFramer;
 import com.linecorp.armeria.unsafe.grpc.GrpcUnsafeBufferUtil;
@@ -77,9 +78,8 @@ public final class GrpcClientOptions {
      * work. If {@link GrpcUnsafeBufferUtil#releaseBuffer(Object, RequestContext)} is not called, the memory
      * will be leaked.
      *
-     * <p>Due to the limited lifetime of {@link RequestContext} for blocking and async clients, this option
-     * is only really useful in conjunction with streaming clients. Even when using unary methods, it is
-     * recommended to use a streaming stub for easy access to the {@link RequestContext}.
+     * <p>Note that this has no effect if the payloads are compressed or the {@link SerializationFormat} is
+     * {@link GrpcSerializationFormats#PROTO_WEB_TEXT}.
      */
     public static final ClientOption<Boolean> UNSAFE_WRAP_RESPONSE_BUFFERS =
             ClientOption.define("GRPC_UNSAFE_WRAP_RESPONSE_BUFFERS", false);

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/UnframedGrpcService.java
Patch:
@@ -186,7 +186,7 @@ private void frameAndServe(
             CompletableFuture<HttpResponse> res) {
         final HttpRequest grpcRequest;
         try (ArmeriaMessageFramer framer = new ArmeriaMessageFramer(
-                ctx.alloc(), ArmeriaMessageFramer.NO_MAX_OUTBOUND_MESSAGE_SIZE)) {
+                ctx.alloc(), ArmeriaMessageFramer.NO_MAX_OUTBOUND_MESSAGE_SIZE, false)) {
             final HttpData content = clientRequest.content();
             final HttpData frame;
             boolean success = false;
@@ -282,7 +282,7 @@ public void endOfStream() {
                 },
                 // Max outbound message size is handled by the GrpcService, so we don't need to set it here.
                 Integer.MAX_VALUE,
-                ctx.alloc())) {
+                ctx.alloc(), false)) {
             deframer.request(1);
             deframer.deframe(grpcResponse.content(), true);
         }

File: core/src/main/java/com/linecorp/armeria/client/DefaultEventLoopScheduler.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ThreadLocalRandom;
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
 import java.util.concurrent.atomic.AtomicLongFieldUpdater;
 import java.util.function.ToIntFunction;
@@ -81,6 +82,8 @@ final class DefaultEventLoopScheduler implements EventLoopScheduler {
                             .map(EventLoop.class::cast)
                             .collect(toImmutableList());
         final int eventLoopSize = eventLoops.size();
+        acquisitionStartIndex = ThreadLocalRandom.current().nextInt(eventLoopSize);
+
         if (maxNumEventLoopsPerEndpoint <= 0) {
             this.maxNumEventLoopsPerEndpoint = DEFAULT_MAX_NUM_EVENT_LOOPS;
         } else {

File: core/src/main/java/com/linecorp/armeria/server/Routers.java
Patch:
@@ -258,7 +258,7 @@ private static <V> Router<V> router(boolean isTrie, List<V> values, @Nullable V
                          values.size(), router.getClass().getSimpleName());
             for (V v : values) {
                 final Route route = routeResolver.apply(v);
-                logger.debug("meterTag: {}, complexity: {}", route.meterTag(), route.complexity());
+                logger.debug("patternString: {}, complexity: {}", route.patternString(), route.complexity());
             }
         }
         values.clear();

File: grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnsafeUnaryGrpcService.java
Patch:
@@ -32,7 +32,7 @@
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageFramer;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaStatusException;
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
-import com.linecorp.armeria.common.grpc.protocol.GrpcTrailersUtil;
+import com.linecorp.armeria.internal.common.grpc.protocol.GrpcTrailersUtil;
 import com.linecorp.armeria.internal.common.grpc.protocol.StatusCodes;
 import com.linecorp.armeria.server.AbstractHttpService;
 import com.linecorp.armeria.server.ServiceRequestContext;

File: grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcWebRetryTest.java
Patch:
@@ -112,8 +112,8 @@ void emptyCall(SerializationFormat serializationFormat) {
                        .build(TestServiceBlockingStub.class);
 
         try (ClientRequestContextCaptor captor = Clients.newContextCaptor()) {
-            final SimpleResponse result = client.unaryCall(SimpleRequest.newBuilder().build());
-            assertThat(result.getUsername()).isEqualTo("my name");
+            final Empty result = client.emptyCall(Empty.newBuilder().build());
+            assertThat(result).isEqualTo(Empty.getDefaultInstance());
             final RequestLog log = captor.get().log().whenComplete().join();
             assertThat(log.children()).hasSize(3);
         }

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceServerTest.java
Patch:
@@ -135,6 +135,8 @@ class GrpcServiceServerTest {
 
     private static final int MAX_MESSAGE_SIZE = 16 * 1024 * 1024;
 
+    private static final byte TRAILERS_FRAME_HEADER = (byte) (1 << 7);
+
     private static final Key<StringValue> STRING_VALUE_KEY =
             ProtoUtils.keyForProto(StringValue.getDefaultInstance());
 
@@ -982,7 +984,7 @@ void grpcWeb() throws Exception {
                 GrpcTestUtil.uncompressedFrame(GrpcTestUtil.requestByteBuf())).aggregate().get();
         final byte[] serializedStatusHeader = "grpc-status: 0\r\n".getBytes(StandardCharsets.US_ASCII);
         final byte[] serializedTrailers = Bytes.concat(
-                new byte[] { ArmeriaServerCall.TRAILERS_FRAME_HEADER },
+                new byte[] { TRAILERS_FRAME_HEADER },
                 Ints.toByteArray(serializedStatusHeader.length),
                 serializedStatusHeader);
         assertThat(response.content().array()).containsExactly(

File: zookeeper3/src/test/java/com/linecorp/armeria/server/zookeeper/CuratorServiceDiscoveryCompatibilityTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.linecorp.armeria.server.zookeeper;
 
+import static com.linecorp.armeria.common.zookeeper.ZooKeeperTestUtil.startServerWithRetries;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.awaitility.Awaitility.await;
 
@@ -82,7 +83,7 @@ void registeredInstancesAreSameWhenUsingServiceDiscoveryImplAndUpdatingListener(
                                     .service("/", (ctx, req) -> HttpResponse.of(200))
                                     .build();
         server.addListener(listener);
-        server.start().join();
+        startServerWithRetries(server);
         assertInstance(registered);
         server.stop().join();
         client.close();

File: zookeeper3/src/test/java/com/linecorp/armeria/server/zookeeper/ServerSetRegistrationTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.linecorp.armeria.server.zookeeper;
 
+import static com.linecorp.armeria.common.zookeeper.ZooKeeperTestUtil.startServerWithRetries;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.awaitility.Awaitility.await;
 
@@ -87,7 +88,7 @@ void serverSetImplCompatible() throws Throwable {
                                     .https(endpoints.get(1).port())
                                     .service("/", (ctx, req) -> HttpResponse.of(200))
                                     .build();
-        server.start().join();
+        startServerWithRetries(server);
 
         final byte[] updatingListenerBytes;
         try (CloseableZooKeeper zk = zkInstance.connection()) {

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/KeyedCircuitBreakerMapping.java
Patch:
@@ -128,7 +128,7 @@ public interface KeySelector<K> {
          * A {@link KeySelector} that returns a key consisted of remote host name, IP address, port number
          * and method name.
          *
-         * @deprecated Use {@link CircuitBreakerMapping#perHostAndMethod(Function)}.
+         * @deprecated Use {@link CircuitBreakerMapping#perHostAndMethod(BiFunction)}.
          */
         @Deprecated
         KeySelector<String> HOST_AND_METHOD =

File: core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java
Patch:
@@ -295,7 +295,7 @@ protected static ClientRequestContext newDerivedContext(ClientRequestContext ctx
         if (endpointGroup != null && !initialAttempt) {
             derived = ctx.newDerivedContext(id, req, rpcReq, endpointGroup.selectNow(ctx));
         } else {
-            derived = ctx.newDerivedContext(id, req, rpcReq);
+            derived = ctx.newDerivedContext(id, req, rpcReq, ctx.endpoint());
         }
 
         final RequestLogAccess parentLog = ctx.log();

File: core/src/main/java/com/linecorp/armeria/common/logging/RequestContextExporter.java
Patch:
@@ -236,7 +236,7 @@ public Map<String, String> export(RequestContext ctx) {
         }
 
         if (needsUpdate) {
-            export(state, ctx, log.partial());
+            export(state, log.partial());
         }
 
         // Create a copy of 'state' to avoid the race between:
@@ -245,7 +245,7 @@ public Map<String, String> export(RequestContext ctx) {
         return state.clone();
     }
 
-    private void export(State state, RequestContext ctx, RequestLog log) {
+    private void export(State state, RequestLog log) {
         exportBuiltIns(state, log);
         exportAttributes(state);
         exportRequestHeaders(state, log);

File: core/src/main/java/com/linecorp/armeria/server/encoding/EncodingServiceBuilder.java
Patch:
@@ -45,7 +45,7 @@ public final class EncodingServiceBuilder {
                             MediaType.JAVASCRIPT_UTF_8,
                             MediaType.JSON_UTF_8);
 
-    // TODO(minwoox) consider this condition to align with the default text preveiwer.
+    // TODO(minwoox) consider this condition to align with the default text previewer.
     private static final Predicate<MediaType> defaultEncodableContentTypePredicate =
             contentType -> {
                 for (MediaType encodableMediaType : defaultEncodableMediaTypsSet) {

File: core/src/main/java/com/linecorp/armeria/server/file/AbstractHttpFile.java
Patch:
@@ -183,7 +183,7 @@ private ResponseHeaders addCommonHeaders(ResponseHeadersBuilder headers, HttpFil
             headers.set(HttpHeaderNames.ETAG, '\"' + etag + '\"');
         }
 
-        headers.set(this.additionalHeaders);
+        headers.set(additionalHeaders);
         return headers.build();
     }
 

File: core/src/main/java/com/linecorp/armeria/server/file/AbstractHttpFileBuilder.java
Patch:
@@ -150,7 +150,7 @@ public AbstractHttpFileBuilder entityTag(BiFunction<String, HttpFileAttributes,
      * {@link HttpResponse}.
      */
     protected final HttpHeaders buildHeaders() {
-        return headers != null ? headers.build() : HttpHeaders.of();
+        return headers != null ? headers.removeAndThen(HttpHeaderNames.STATUS).build() : HttpHeaders.of();
     }
 
     private HttpHeadersBuilder headersBuilder() {

File: core/src/main/java9/com/linecorp/armeria/internal/common/Java9ContextAwareMinimalStage.java
Patch:
@@ -26,7 +26,6 @@
 
 import com.google.common.base.MoreObjects;
 
-@SuppressWarnings("unchecked")
 final class Java9ContextAwareMinimalStage<T> implements CompletionStage<T> {
 
     private final CompletableFuture<T> delegate;

File: core/src/test/java/com/linecorp/armeria/client/ClientRequestContextTest.java
Patch:
@@ -181,7 +181,7 @@ void pushWithOldClientCtxWhoseRootIsSameServiceCtx_derivedCtx() {
             assertCurrentCtx(sctx);
             final ClientRequestContext cctx1 = clientRequestContext();
             final ClientRequestContext derived = cctx1.newDerivedContext(cctx1.id(), cctx1.request(),
-                                                                         cctx1.rpcRequest());
+                                                                         cctx1.rpcRequest(), cctx1.endpoint());
             try (SafeCloseable ignored1 = derived.push()) {
                 assertCurrentCtx(derived);
                 final ClientRequestContext cctx2 = clientRequestContext();

File: core/src/test/java/com/linecorp/armeria/client/DefaultClientRequestContextTest.java
Patch:
@@ -71,7 +71,7 @@ void canBringAttributeInServiceRequestContext() {
 
             final ClientRequestContext derivedContext = clientContext.newDerivedContext(
                     clientContext.id(), clientContext.request(),
-                    clientContext.rpcRequest());
+                    clientContext.rpcRequest(), clientContext.endpoint());
             assertThat(derivedContext.attr(fooKey)).isNotNull();
             // Attributes in serviceContext is not copied to clientContext when derived.
 
@@ -113,7 +113,8 @@ void deriveContext() {
                 HttpHeaderNames.SCHEME, "http",
                 HttpHeaderNames.AUTHORITY, "example.com:8080",
                 "foo", "bar"));
-        final ClientRequestContext derivedCtx = originalCtx.newDerivedContext(newId, newRequest, null);
+        final ClientRequestContext derivedCtx = originalCtx.newDerivedContext(newId, newRequest, null,
+                                                                              originalCtx.endpoint());
         assertThat(derivedCtx.endpoint()).isSameAs(originalCtx.endpoint());
         assertThat(derivedCtx.sessionProtocol()).isSameAs(originalCtx.sessionProtocol());
         assertThat(derivedCtx.method()).isSameAs(originalCtx.method());

File: core/src/test/java/com/linecorp/armeria/client/endpoint/AbstractEndpointSelectorTest.java
Patch:
@@ -79,7 +79,7 @@ void timeout() {
         assertThat(stopwatch.elapsed(TimeUnit.MILLISECONDS)).isGreaterThan(900);
     }
 
-    private EndpointSelector newSelector(EndpointGroup endpointGroup) {
+    private static EndpointSelector newSelector(EndpointGroup endpointGroup) {
         return new AbstractEndpointSelector(endpointGroup) {
             @Nullable
             @Override

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientTest.java
Patch:
@@ -298,8 +298,7 @@ void setUp() {
     @Test
     void retryWhenContentMatched() {
         final Function<? super HttpClient, RetryingClient> retryingDecorator =
-                RetryingClient.builder(new RetryIfContentMatch("Need to retry"))
-                              .contentPreviewLength(1024)
+                RetryingClient.builder(new RetryIfContentMatch("Need to retry"), 1024)
                               .newDecorator();
         final WebClient client = WebClient.builder(server.httpUri())
                                           .factory(clientFactory)

File: core/src/test/java/com/linecorp/armeria/internal/common/metric/RequestMetricSupportTest.java
Patch:
@@ -223,7 +223,7 @@ private static ClientRequestContext setupClientRequestCtx(MeterRegistry registry
 
     private static void addLogInfoInDerivedCtx(ClientRequestContext ctx) {
         final ClientRequestContext derivedCtx =
-                ctx.newDerivedContext(ctx.id(), ctx.request(), ctx.rpcRequest());
+                ctx.newDerivedContext(ctx.id(), ctx.request(), ctx.rpcRequest(), ctx.endpoint());
 
         ctx.logBuilder().addChild(derivedCtx.log());
         derivedCtx.logBuilder().session(null, ctx.sessionProtocol(), newConnectionTimings());

File: core/src/test/java/com/linecorp/armeria/server/logging/AccessLogFormatsTest.java
Patch:
@@ -498,6 +498,7 @@ public String toString() {
         }
     }
 
+    @SuppressWarnings("unused")
     static class AttributeStringifier implements Function<Attr, String> {
         @Override
         public String apply(Attr attr) {

File: core/src/test/java/com/linecorp/armeria/server/logging/AccessLoggerTest.java
Patch:
@@ -19,12 +19,12 @@
 import static com.linecorp.armeria.server.logging.AccessLogger.escapeAndQuote;
 import static org.assertj.core.api.Assertions.assertThat;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-public class AccessLoggerTest {
+class AccessLoggerTest {
 
     @Test
-    public void testQuote() {
+    void testQuote() {
         assertThat(escapeAndQuote(new StringBuilder(), "a").toString())
                 .isEqualTo("\"a\"");
         assertThat(escapeAndQuote(new StringBuilder(), "\"a\"").toString())

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.java
Patch:
@@ -169,9 +169,7 @@ public GrpcServiceBuilder supportedSerializationFormats(SerializationFormat... f
 
     /**
      * Sets the {@link SerializationFormat}s supported by this server. If not set, defaults to supporting binary
-     * protobuf formats. JSON formats are currently very inefficient and not recommended for use in production.
-     *
-     * <p>TODO(anuraaga): Use faster JSON marshalling.
+     * protobuf formats.
      */
     public GrpcServiceBuilder supportedSerializationFormats(Iterable<SerializationFormat> formats) {
         requireNonNull(formats, "formats");

File: retrofit2/src/test/java/com/linecorp/armeria/client/retrofit2/ArmeriaCallFactoryTest.java
Patch:
@@ -456,7 +456,6 @@ void respectsHttpClientUri_endpointGroup() throws Exception {
             assertThat(log.sessionProtocol()).isSameAs(SessionProtocol.H2C);
             assertThat(log.requestHeaders().authority()).isEqualTo("127.0.0.1:" + server.httpPort());
 
-            // TODO(ide) Use the actual `host:port`. See https://github.com/line/armeria/issues/379
             final HttpUrl url = response.raw().request().url();
             assertThat(url.scheme()).isEqualTo("http");
             assertThat(url.host()).startsWith("armeria-group-");

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlInitializer.java
Patch:
@@ -57,7 +57,7 @@ final class SamlInitializer {
      * Returns {@code true} if and only if the OpenSAML library is available.
      */
     static boolean isAvailable() {
-        return UNAVAILABILITY_CAUSE == null;
+        return unavailabilityCause() == null;
     }
 
     /**
@@ -66,8 +66,8 @@ static boolean isAvailable() {
      * @throws Error if unavailable
      */
     static void ensureAvailability() {
-        if (UNAVAILABILITY_CAUSE != null) {
-            throw new Error("failed to initialize OpenSAML library", UNAVAILABILITY_CAUSE);
+        if (!isAvailable()) {
+            throw new Error("failed to initialize OpenSAML library", unavailabilityCause());
         }
     }
 

File: thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/ThriftJacksonSerializers.java
Patch:
@@ -81,6 +81,8 @@ static void serializeTMessage(TMessage value, JsonGenerator gen) throws IOExcept
         gen.writeEndObject();
     }
 
+    // TODO(trustin): Merge serializeTBase() and serializeTApplicationException() once we drop support for 0.9.
+    //                Since 0.10, both TBase and TApplicationException implement TSerializable.
     @SuppressWarnings("rawtypes")
     static void serializeTBase(@Nullable TBase value, JsonGenerator gen,
                                boolean useNamedEnums) throws IOException {
@@ -131,6 +133,7 @@ static final class ThriftCallJsonSerializer extends StdSerializer<ThriftCall> {
 
         private final boolean useNamedEnums;
 
+        @SuppressWarnings("unused")
         ThriftCallJsonSerializer() {
             this(false);
         }

File: core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java
Patch:
@@ -18,13 +18,13 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.fail;
+import static org.awaitility.Awaitility.await;
 
 import java.io.IOException;
 import java.util.Queue;
 import java.util.concurrent.ArrayBlockingQueue;
 import java.util.concurrent.CountDownLatch;
 import java.util.function.Function;
-import java.util.stream.Collectors;
 
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -121,7 +121,7 @@ void routeService() throws InterruptedException {
         propertyCheckLatch.await();
         assertThat(res.status()).isSameAs(HttpStatus.OK);
         assertThat(res.contentUtf8()).isEqualTo("armeria");
-        assertThat(decoratorLog.stream().collect(Collectors.toList())).containsExactly(3, 2, 1);
+        await().untilAsserted(() -> assertThat(decoratorLog).containsExactly(3, 2, 1));
 
         res = client.post("/greet", "armeria").aggregate().join();
         assertThat(res.status()).isSameAs(HttpStatus.OK);
@@ -141,7 +141,7 @@ void consumesAndProduces() throws IOException {
                                            .aggregate().join();
         assertThat(res.status()).isSameAs(HttpStatus.OK);
         assertThat(res.contentUtf8()).isEqualTo("armeria");
-        assertThat(decoratorLog.stream().collect(Collectors.toList())).containsExactly(3, 2, 1);
+        await().untilAsserted(() -> assertThat(decoratorLog).containsExactly(3, 2, 1));
 
         res = client.execute(RequestHeaders.of(HttpMethod.POST, "/hello",
                                                HttpHeaderNames.CONTENT_TYPE, MediaType.PLAIN_TEXT_UTF_8),

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceFactory.java
Patch:
@@ -303,7 +303,9 @@ static List<AnnotatedServiceElement> create(String pathPrefix, Object object, Me
         final ResponseHeaders responseHeaders = defaultHeaders.build();
         final HttpHeaders responseTrailers = defaultTrailers.build();
 
-        final boolean useBlockingTaskExecutor = AnnotationUtil.findFirst(method, Blocking.class) != null;
+        final boolean useBlockingTaskExecutor =
+                AnnotationUtil.findFirst(method, Blocking.class) != null ||
+                AnnotationUtil.findFirst(object.getClass(), Blocking.class) != null;
 
         return routes.stream().map(route -> {
             final List<AnnotatedValueResolver> resolvers = getAnnotatedValueResolvers(req, route, method,

File: core/src/main/java/com/linecorp/armeria/server/AnnotatedServiceBindingBuilder.java
Patch:
@@ -147,8 +147,9 @@ public AnnotatedServiceBindingBuilder decorator(
         return this;
     }
 
+    @SafeVarargs
     @Override
-    public AnnotatedServiceBindingBuilder decorators(
+    public final AnnotatedServiceBindingBuilder decorators(
             Function<? super HttpService, ? extends HttpService>... decorators) {
         defaultServiceConfigSetters.decorators(decorators);
         return this;

File: core/src/main/java/com/linecorp/armeria/server/ServiceBindingBuilder.java
Patch:
@@ -228,8 +228,9 @@ public ServiceBindingBuilder decorator(Function<? super HttpService, ? extends H
         return (ServiceBindingBuilder) super.decorator(decorator);
     }
 
+    @SafeVarargs
     @Override
-    public ServiceBindingBuilder decorators(
+    public final ServiceBindingBuilder decorators(
             Function<? super HttpService, ? extends HttpService>... decorators) {
         return (ServiceBindingBuilder) super.decorators(decorators);
     }

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostServiceBindingBuilder.java
Patch:
@@ -232,8 +232,9 @@ public VirtualHostServiceBindingBuilder decorator(
         return (VirtualHostServiceBindingBuilder) super.decorator(decorator);
     }
 
+    @SafeVarargs
     @Override
-    public VirtualHostServiceBindingBuilder decorators(
+    public final VirtualHostServiceBindingBuilder decorators(
             Function<? super HttpService, ? extends HttpService>... decorators) {
         return (VirtualHostServiceBindingBuilder) super.decorators(decorators);
     }

File: core/src/main/java/com/linecorp/armeria/server/annotation/Blocking.java
Patch:
@@ -29,6 +29,6 @@
  * instead of an event loop thread.
  */
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.METHOD)
+@Target({ElementType.TYPE, ElementType.METHOD})
 public @interface Blocking {
 }

File: annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java
Patch:
@@ -64,7 +64,7 @@
         "com.linecorp.armeria.server.annotation.Patch",
 })
 @SupportedSourceVersion(SourceVersion.RELEASE_8)
-public class DocumentationProcessor extends AbstractProcessor {
+public final class DocumentationProcessor extends AbstractProcessor {
     private static final Splitter LINEBREAK_SPLITTER = Splitter.on(Pattern.compile("\\R"))
                                                                .trimResults()
                                                                .omitEmptyStrings();

File: bucket4j/src/main/java/com/linecorp/armeria/common/throttling/ThrottlingHeaders.java
Patch:
@@ -16,11 +16,14 @@
 
 package com.linecorp.armeria.common.throttling;
 
+import com.linecorp.armeria.common.annotation.UnstableApi;
+
 import io.netty.util.AsciiString;
 
 /**
  * A RateLimit Header Scheme for HTTP.
  */
+@UnstableApi
 public interface ThrottlingHeaders {
     /**
      * Describes

File: bucket4j/src/main/java/com/linecorp/armeria/common/throttling/package-info.java
Patch:
@@ -17,7 +17,9 @@
 /**
  * Common throttling artifacts used by throttling implementation.
  */
+@UnstableApi
 @NonNullByDefault
 package com.linecorp.armeria.common.throttling;
 
 import com.linecorp.armeria.common.annotation.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.UnstableApi;

File: bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/BandwidthLimit.java
Patch:
@@ -23,12 +23,15 @@
 
 import com.google.common.base.MoreObjects;
 
+import com.linecorp.armeria.common.annotation.UnstableApi;
+
 import io.github.bucket4j.Bandwidth;
 import io.github.bucket4j.Refill;
 
 /**
  * Stores configurations of a single Token-Bucket bandwidth limit.
  */
+@UnstableApi
 public final class BandwidthLimit {
 
     /**

File: bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/TokenBucket.java
Patch:
@@ -24,9 +24,12 @@
 
 import com.google.common.base.MoreObjects;
 
+import com.linecorp.armeria.common.annotation.UnstableApi;
+
 /**
  * Stores configuration of the Token-Bucket algorithm, comprised of multiple limits.
  */
+@UnstableApi
 public final class TokenBucket {
 
     /**

File: bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/TokenBucketBuilder.java
Patch:
@@ -22,9 +22,12 @@
 
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.annotation.UnstableApi;
+
 /**
  * Builds a {@link TokenBucket} instance.
  */
+@UnstableApi
 public final class TokenBucketBuilder {
     private static final BandwidthLimit[] NO_BANDWIDTH_LIMITS = {};
 

File: bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/TokenBucketThrottlingStrategy.java
Patch:
@@ -25,6 +25,7 @@
 
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.Request;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.throttling.ThrottlingHeaders;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.throttling.ThrottlingStrategy;
@@ -39,6 +40,7 @@
  * The throttling works by examining the number of requests from the beginning, and
  * throttling if the request rate exceed the configured bucket limits.
  */
+@UnstableApi
 public final class TokenBucketThrottlingStrategy<T extends Request> extends ThrottlingStrategy<T> {
 
     /**

File: bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/TokenBucketThrottlingStrategyBuilder.java
Patch:
@@ -24,11 +24,13 @@
 import javax.annotation.Nullable;
 
 import com.linecorp.armeria.common.Request;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.throttling.ThrottlingHeaders;
 
 /**
  * Builds {@link TokenBucketThrottlingStrategy}.
  */
+@UnstableApi
 public final class TokenBucketThrottlingStrategyBuilder<T extends Request> {
 
     private final TokenBucket tokenBucket;

File: bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/package-info.java
Patch:
@@ -18,9 +18,10 @@
  * Rate-limiting throttling implementation based on
  * <a href="https://en.wikipedia.org/wiki/Token_bucket">Token-Bucket</a> algorithm
  * and <a href="https://github.com/vladimir-bukhtoyarov/bucket4j">Bucket4j</a> library.
- *
  */
+@UnstableApi
 @NonNullByDefault
 package com.linecorp.armeria.server.throttling.bucket4j;
 
 import com.linecorp.armeria.common.annotation.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.UnstableApi;

File: core/src/main/java/com/linecorp/armeria/client/AbstractEventLoopEntry.java
Patch:
@@ -31,12 +31,12 @@ abstract class AbstractEventLoopEntry implements ReleasableHolder<EventLoop> {
     }
 
     @Override
-    public EventLoop get() {
+    public final EventLoop get() {
         return eventLoop;
     }
 
     @Override
-    public void release() {
+    public final void release() {
         parent.release(this);
     }
 

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.java
Patch:
@@ -38,7 +38,7 @@
 /**
  * An {@link HttpClient} decorator that handles failures of HTTP requests based on circuit breaker pattern.
  */
-public class CircuitBreakerClient extends AbstractCircuitBreakerClient<HttpRequest, HttpResponse>
+public final class CircuitBreakerClient extends AbstractCircuitBreakerClient<HttpRequest, HttpResponse>
         implements HttpClient {
 
     /**

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java
Patch:
@@ -560,7 +560,7 @@ private static AnnotatedValueResolver ofInjectableTypes0(AnnotatedElement annota
                     .resolver((unused, ctx) -> {
                         final String value = ctx.request().headers().get(HttpHeaderNames.COOKIE);
                         if (value == null) {
-                            return Cookies.empty();
+                            return Cookies.of();
                         }
                         return Cookie.fromCookieHeader(value);
                     })

File: core/src/test/java/com/linecorp/armeria/client/ClientRequestContextInitFailureTest.java
Patch:
@@ -32,7 +32,7 @@
 class ClientRequestContextInitFailureTest {
     @Test
     void endpointSelectionFailure() {
-        assertFailure(EndpointGroup.empty(), actualCause -> {
+        assertFailure(EndpointGroup.of(), actualCause -> {
             assertThat(actualCause).isInstanceOf(EmptyEndpointGroupException.class);
         });
     }

File: core/src/test/java/com/linecorp/armeria/client/DefaultEventLoopSchedulerTest.java
Patch:
@@ -306,7 +306,7 @@ static AbstractEventLoopEntry acquireEntry(DefaultEventLoopScheduler s,
         if (endpoint != null) {
             acquired = s.acquire(SessionProtocol.HTTP, endpoint, endpoint);
         } else {
-            acquired = s.acquire(SessionProtocol.HTTP, EndpointGroup.empty(), null);
+            acquired = s.acquire(SessionProtocol.HTTP, EndpointGroup.of(), null);
         }
         assert acquired instanceof AbstractEventLoopEntry;
         return (AbstractEventLoopEntry) acquired;

File: core/src/test/java/com/linecorp/armeria/client/endpoint/EndpointGroupTest.java
Patch:
@@ -40,7 +40,7 @@ class EndpointGroupTest {
 
     @Test
     void orElse() {
-        final EndpointGroup emptyEndpointGroup = EndpointGroup.empty();
+        final EndpointGroup emptyEndpointGroup = EndpointGroup.of();
         final EndpointGroup endpointGroup1 = EndpointGroup.of(Endpoint.of("127.0.0.1", 1234));
         // Make sure factory that takes an Iterable accepts a list of Endpoint (subclass).
         final List<Endpoint> endpoint2Endpoints = ImmutableList.of(Endpoint.of("127.0.0.1", 2345));

File: core/src/test/java/com/linecorp/armeria/client/endpoint/RoundRobinStrategyTest.java
Patch:
@@ -32,7 +32,7 @@ class RoundRobinStrategyTest {
                              Endpoint.parse("localhost:1234"),
                              Endpoint.parse("localhost:2345"));
 
-    private static final EndpointGroup emptyGroup = EndpointGroup.empty();
+    private static final EndpointGroup emptyGroup = EndpointGroup.of();
 
     private final ClientRequestContext ctx = ClientRequestContext.of(HttpRequest.of(HttpMethod.GET, "/"));
 

File: core/src/test/java/com/linecorp/armeria/client/endpoint/WeightedRoundRobinStrategyTest.java
Patch:
@@ -34,7 +34,7 @@
 
 class WeightedRoundRobinStrategyTest {
 
-    private static final EndpointGroup emptyGroup = EndpointGroup.empty();
+    private static final EndpointGroup emptyGroup = EndpointGroup.of();
 
     private final ClientRequestContext ctx = ClientRequestContext.of(HttpRequest.of(HttpMethod.GET, "/"));
 

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientWithEmptyEndpointGroupTest.java
Patch:
@@ -36,7 +36,7 @@ class RetryingClientWithEmptyEndpointGroupTest {
     void shouldRetryEvenIfEndpointGroupIsEmpty() {
         final int numAttempts = 3;
         final WebClient client =
-                WebClient.builder(SessionProtocol.HTTP, EndpointGroup.empty())
+                WebClient.builder(SessionProtocol.HTTP, EndpointGroup.of())
                          .decorator(RetryingClient.builder(RetryRule.builder()
                                                                     .onUnprocessed()
                                                                     .thenBackoff(Backoff.withoutDelay()))

File: grpc/src/main/java/com/linecorp/armeria/unsafe/grpc/GrpcUnsafeBufferUtil.java
Patch:
@@ -24,13 +24,15 @@
 import com.google.protobuf.Message;
 
 import com.linecorp.armeria.common.RequestContext;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.util.AttributeKey;
 
 /**
  * Provides utility methods useful for storing and releasing the {@link ByteBuf} backing a {@link Message}.
  */
+@UnstableApi
 public final class GrpcUnsafeBufferUtil {
 
     /**

File: grpc/src/main/java/com/linecorp/armeria/unsafe/grpc/package-info.java
Patch:
@@ -20,6 +20,8 @@
  * these methods if you really know what you're doing.
  */
 @NonNullByDefault
+@UnstableApi
 package com.linecorp.armeria.unsafe.grpc;
 
 import com.linecorp.armeria.common.annotation.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.UnstableApi;

File: grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientRequestContextInitFailureTest.java
Patch:
@@ -40,7 +40,7 @@
 class GrpcClientRequestContextInitFailureTest {
     @Test
     void endpointSelectionFailure() {
-        assertFailure(EndpointGroup.empty(), actualCause -> {
+        assertFailure(EndpointGroup.of(), actualCause -> {
             assertThat(actualCause).isInstanceOf(EmptyEndpointGroupException.class);
         });
     }

File: thrift0.13/src/test/java/com/linecorp/armeria/client/thrift/ThriftClientRequestContextInitFailureTest.java
Patch:
@@ -37,7 +37,7 @@
 class ThriftClientRequestContextInitFailureTest {
     @Test
     void endpointSelectionFailure() {
-        assertFailure(EndpointGroup.empty(), actualCause -> {
+        assertFailure(EndpointGroup.of(), actualCause -> {
             assertThat(actualCause).isInstanceOf(EmptyEndpointGroupException.class);
         });
     }

File: core/src/main/java/com/linecorp/armeria/client/HttpClient.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.linecorp.armeria.client;
 
+import com.google.errorprone.annotations.CheckReturnValue;
+
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 
@@ -25,5 +27,6 @@
 @FunctionalInterface
 public interface HttpClient extends Client<HttpRequest, HttpResponse> {
     @Override
+    @CheckReturnValue
     HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception;
 }

File: core/src/main/java/com/linecorp/armeria/common/HttpResponseDuplicator.java
Patch:
@@ -18,6 +18,8 @@
 
 import org.reactivestreams.Subscriber;
 
+import com.google.errorprone.annotations.CheckReturnValue;
+
 import com.linecorp.armeria.common.stream.StreamMessageDuplicator;
 import com.linecorp.armeria.common.stream.SubscriptionOption;
 
@@ -55,5 +57,6 @@ public interface HttpResponseDuplicator extends StreamMessageDuplicator<HttpObje
      * and {@linkplain HttpHeaders trailers} as the {@link HttpResponse} that this duplicator is created from.
      */
     @Override
+    @CheckReturnValue
     HttpResponse duplicate();
 }

File: core/src/main/java/com/linecorp/armeria/common/stream/StreamMessageDuplicator.java
Patch:
@@ -18,6 +18,8 @@
 
 import org.reactivestreams.Subscriber;
 
+import com.google.errorprone.annotations.CheckReturnValue;
+
 import com.linecorp.armeria.common.util.SafeCloseable;
 
 /**
@@ -57,6 +59,7 @@ public interface StreamMessageDuplicator<T> extends SafeCloseable {
      * Returns a new {@link StreamMessage} that publishes the same elements as the {@link StreamMessage}
      * that this duplicator is created from.
      */
+    @CheckReturnValue
     StreamMessage<T> duplicate();
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/HttpService.java
Patch:
@@ -18,6 +18,8 @@
 
 import java.util.function.Function;
 
+import com.google.errorprone.annotations.CheckReturnValue;
+
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.Request;
@@ -30,6 +32,7 @@
 public interface HttpService extends Service<HttpRequest, HttpResponse> {
 
     @Override
+    @CheckReturnValue
     HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception;
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/annotation/ExceptionHandlerFunction.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.linecorp.armeria.server.annotation;
 
+import com.google.errorprone.annotations.CheckReturnValue;
+
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.server.ServiceRequestContext;
@@ -32,6 +34,7 @@ public interface ExceptionHandlerFunction {
      * Calls {@link ExceptionHandlerFunction#fallthrough()} or throws a {@link FallthroughException} if
      * this handler cannot handle the {@code cause}.
      */
+    @CheckReturnValue
     HttpResponse handleException(ServiceRequestContext ctx, HttpRequest req, Throwable cause);
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/annotation/ResponseConverterFunction.java
Patch:
@@ -20,6 +20,8 @@
 
 import javax.annotation.Nullable;
 
+import com.google.errorprone.annotations.CheckReturnValue;
+
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
@@ -60,6 +62,7 @@ public interface ResponseConverterFunction {
      *                 {@link ServiceRequestContext#mutateAdditionalResponseTrailers(Consumer)}
      *                 and {@link AdditionalTrailer} are not included in this trailers.
      */
+    @CheckReturnValue
     HttpResponse convertResponse(ServiceRequestContext ctx,
                                  ResponseHeaders headers,
                                  @Nullable Object result,

File: core/src/main/java/com/linecorp/armeria/server/auth/AuthFailureHandler.java
Patch:
@@ -17,6 +17,8 @@
 
 import javax.annotation.Nullable;
 
+import com.google.errorprone.annotations.CheckReturnValue;
+
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.server.HttpService;
@@ -39,6 +41,7 @@ public interface AuthFailureHandler {
      * @param cause {@code null} if the {@link HttpRequest} has been rejected by the {@link Authorizer}.
      *              non-{@code null} if the {@link Authorizer} raised an {@link Exception}.
      */
+    @CheckReturnValue
     HttpResponse authFailed(HttpService delegate, ServiceRequestContext ctx,
                             HttpRequest req, @Nullable Throwable cause) throws Exception;
 }

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlServiceFunction.java
Patch:
@@ -15,6 +15,8 @@
  */
 package com.linecorp.armeria.server.saml;
 
+import com.google.errorprone.annotations.CheckReturnValue;
+
 import com.linecorp.armeria.common.AggregatedHttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.SessionProtocol;
@@ -35,6 +37,7 @@ interface SamlServiceFunction {
      *                        hostname
      * @param portConfig the port number and its {@link SessionProtocol} which the server is bound to
      */
+    @CheckReturnValue
     HttpResponse serve(ServiceRequestContext ctx, AggregatedHttpRequest req,
                        String defaultHostname, SamlPortConfig portConfig);
 }

File: core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java
Patch:
@@ -23,9 +23,9 @@
 
 import com.linecorp.armeria.common.ClosedSessionException;
 import com.linecorp.armeria.common.ContentTooLargeException;
+import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.ProtocolViolationException;
 import com.linecorp.armeria.common.stream.ClosedStreamException;
-import com.linecorp.armeria.common.unsafe.PooledHttpData;
 import com.linecorp.armeria.internal.common.ArmeriaHttpUtil;
 import com.linecorp.armeria.internal.common.InboundTrafficController;
 import com.linecorp.armeria.internal.common.KeepAliveHandler;
@@ -209,7 +209,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                             if (maxContentLength > 0 && res.writtenBytes() > maxContentLength - dataLength) {
                                 fail(ctx, ContentTooLargeException.get());
                                 return;
-                            } else if (!res.tryWrite(PooledHttpData.wrap(data.retain()))) {
+                            } else if (!res.tryWrite(HttpData.wrap(data.retain()))) {
                                 fail(ctx, ClosedStreamException.get());
                                 return;
                             }

File: core/src/main/java/com/linecorp/armeria/client/Http2ResponseDecoder.java
Patch:
@@ -26,9 +26,9 @@
 import org.slf4j.LoggerFactory;
 
 import com.linecorp.armeria.common.ContentTooLargeException;
+import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.stream.ClosedStreamException;
-import com.linecorp.armeria.common.unsafe.PooledHttpData;
 import com.linecorp.armeria.internal.common.ArmeriaHttpUtil;
 import com.linecorp.armeria.internal.common.Http2GoAwayHandler;
 import com.linecorp.armeria.internal.common.Http2KeepAliveHandler;
@@ -249,7 +249,7 @@ public int onDataRead(
         }
 
         try {
-            res.write(PooledHttpData.wrap(data.retain()).withEndOfStream(endOfStream));
+            res.write(HttpData.wrap(data.retain()).withEndOfStream(endOfStream));
         } catch (Throwable t) {
             res.close(t);
             throw connectionError(INTERNAL_ERROR, t, "failed to consume a DATA frame");

File: core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java
Patch:
@@ -43,13 +43,13 @@
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.internal.common.RequestContextUtil;
+import com.linecorp.armeria.unsafe.PooledObjects;
 
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelFutureListener;
 import io.netty.handler.codec.http2.Http2Error;
 import io.netty.handler.proxy.ProxyConnectException;
-import io.netty.util.ReferenceCountUtil;
 
 final class HttpRequestSubscriber implements Subscriber<HttpObject>, ChannelFutureListener {
 
@@ -238,7 +238,7 @@ public void onNext(HttpObject o) {
             case DONE:
                 // Cancel the subscription if any message comes here after the state has been changed to DONE.
                 cancelSubscription();
-                ReferenceCountUtil.safeRelease(o);
+                PooledObjects.close(o);
                 break;
         }
     }
@@ -266,7 +266,7 @@ public void onComplete() {
 
     private void write(HttpObject o, boolean endOfStream) {
         if (!ch.isActive()) {
-            ReferenceCountUtil.safeRelease(o);
+            PooledObjects.close(o);
             fail(ClosedSessionException.get());
             return;
         }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HttpHealthChecker.java
Patch:
@@ -49,9 +49,9 @@
 import com.linecorp.armeria.common.util.AsyncCloseable;
 import com.linecorp.armeria.common.util.AsyncCloseableSupport;
 import com.linecorp.armeria.common.util.TimeoutMode;
+import com.linecorp.armeria.unsafe.PooledObjects;
 
 import io.netty.util.AsciiString;
-import io.netty.util.ReferenceCountUtil;
 import io.netty.util.concurrent.ScheduledFuture;
 
 final class HttpHealthChecker implements AsyncCloseable {
@@ -183,7 +183,7 @@ public void onNext(HttpObject obj) {
 
             try {
                 if (!(obj instanceof ResponseHeaders)) {
-                    ReferenceCountUtil.release(obj);
+                    PooledObjects.close(obj);
                     return;
                 }
 

File: core/src/main/java/com/linecorp/armeria/common/HttpRequestAggregator.java
Patch:
@@ -21,7 +21,6 @@
 import javax.annotation.Nullable;
 
 import io.netty.buffer.ByteBufAllocator;
-import io.netty.util.ReferenceCountUtil;
 
 final class HttpRequestAggregator extends HttpMessageAggregator<AggregatedHttpRequest> {
 
@@ -52,7 +51,7 @@ protected void onHeaders(HttpHeaders headers) {
     @Override
     protected void onData(HttpData data) {
         if (!trailers.isEmpty()) {
-            ReferenceCountUtil.safeRelease(data);
+            data.close();
             // Data can't come after trailers.
             // See https://tools.ietf.org/html/rfc7540#section-8.1
             return;

File: core/src/main/java/com/linecorp/armeria/common/HttpResponseAggregator.java
Patch:
@@ -27,7 +27,6 @@
 import javax.annotation.Nullable;
 
 import io.netty.buffer.ByteBufAllocator;
-import io.netty.util.ReferenceCountUtil;
 
 final class HttpResponseAggregator extends HttpMessageAggregator<AggregatedHttpResponse> {
 
@@ -60,7 +59,7 @@ protected void onHeaders(HttpHeaders headers) {
     @Override
     protected void onData(HttpData data) {
         if (!trailers.isEmpty()) {
-            ReferenceCountUtil.safeRelease(data);
+            data.close();
             // Data can't come after trailers.
             // See https://tools.ietf.org/html/rfc7540#section-8.1
             return;

File: core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java
Patch:
@@ -32,8 +32,8 @@
 import org.slf4j.LoggerFactory;
 
 import com.linecorp.armeria.common.annotation.UnstableApi;
+import com.linecorp.armeria.unsafe.PooledObjects;
 
-import io.netty.util.ReferenceCountUtil;
 import io.netty.util.concurrent.ImmediateEventExecutor;
 
 /**
@@ -289,7 +289,7 @@ private void notifySubscriberOfCloseEvent0(SubscriptionImpl subscription, CloseE
                     final T obj = (T) e;
                     onRemoval(obj);
                 } finally {
-                    ReferenceCountUtil.safeRelease(e);
+                    PooledObjects.close(e);
                 }
             }
         }
@@ -498,7 +498,7 @@ private void cleanupObjects() {
                 final T obj = (T) e;
                 onRemoval(obj);
             } finally {
-                ReferenceCountUtil.safeRelease(e);
+                PooledObjects.close(e);
             }
         }
     }

File: core/src/main/java/com/linecorp/armeria/common/stream/OneElementFixedStreamMessage.java
Patch:
@@ -21,8 +21,7 @@
 import javax.annotation.Nullable;
 
 import com.linecorp.armeria.common.annotation.UnstableApi;
-
-import io.netty.util.ReferenceCountUtil;
+import com.linecorp.armeria.unsafe.PooledObjects;
 
 /**
  * A {@link FixedStreamMessage} that only publishes one object.
@@ -43,7 +42,7 @@ final void cleanupObjects() {
             try {
                 onRemoval(obj);
             } finally {
-                ReferenceCountUtil.safeRelease(obj);
+                PooledObjects.close(obj);
             }
             obj = null;
         }

File: core/src/main/java/com/linecorp/armeria/common/stream/RegularFixedStreamMessage.java
Patch:
@@ -22,8 +22,7 @@
 import org.reactivestreams.Subscriber;
 
 import com.linecorp.armeria.common.annotation.UnstableApi;
-
-import io.netty.util.ReferenceCountUtil;
+import com.linecorp.armeria.unsafe.PooledObjects;
 
 /**
  * A {@link FixedStreamMessage} that publishes an arbitrary number of objects. It is recommended to use
@@ -61,7 +60,7 @@ final void cleanupObjects() {
             try {
                 onRemoval(obj);
             } finally {
-                ReferenceCountUtil.safeRelease(obj);
+                PooledObjects.close(obj);
             }
         }
     }

File: core/src/main/java/com/linecorp/armeria/internal/common/Http2ObjectEncoder.java
Patch:
@@ -28,7 +28,6 @@
 import io.netty.handler.codec.http2.Http2ConnectionEncoder;
 import io.netty.handler.codec.http2.Http2Error;
 import io.netty.handler.codec.http2.Http2Stream;
-import io.netty.util.ReferenceCountUtil;
 
 public abstract class Http2ObjectEncoder implements HttpObjectEncoder {
     private final ChannelHandlerContext ctx;
@@ -58,13 +57,13 @@ public final ChannelFuture doWriteData(int id, int streamId, HttpData data, bool
 
         if (encoder.connection().local().mayHaveCreatedStream(streamId)) {
             // Can't write to an outdated (closed) stream.
-            ReferenceCountUtil.safeRelease(data);
+            data.close();
             return data.isEmpty() ? ctx.writeAndFlush(Unpooled.EMPTY_BUFFER)
                                   : newFailedFuture(ClosedStreamException.get());
         }
 
         // Cannot start a new stream with a DATA frame. It must start with a HEADERS frame.
-        ReferenceCountUtil.safeRelease(data);
+        data.close();
         return newFailedFuture(new IllegalStateException(
                 "Trying to write data to the closed stream " + streamId +
                 " or start a new stream with a DATA frame"));

File: core/src/main/java/com/linecorp/armeria/server/DecodedHttpRequest.java
Patch:
@@ -110,6 +110,7 @@ public boolean tryWrite(HttpObject obj) {
             close();
         } else {
             final HttpData httpData = (HttpData) obj;
+            httpData.touch(ctx);
             published = super.tryWrite(httpData);
             if (published) {
                 inboundTrafficController.inc(httpData.length());

File: core/src/main/java/com/linecorp/armeria/server/Http1RequestDecoder.java
Patch:
@@ -33,7 +33,6 @@
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.ProtocolViolationException;
 import com.linecorp.armeria.common.ResponseHeaders;
-import com.linecorp.armeria.common.unsafe.PooledHttpData;
 import com.linecorp.armeria.internal.common.ArmeriaHttpUtil;
 import com.linecorp.armeria.internal.common.InboundTrafficController;
 import com.linecorp.armeria.internal.common.KeepAliveHandler;
@@ -241,7 +240,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                     }
 
                     if (req.isOpen()) {
-                        req.write(PooledHttpData.wrap(data.retain()));
+                        req.write(HttpData.wrap(data.retain()));
                     }
                 }
 

File: core/src/main/java/com/linecorp/armeria/server/Http2RequestDecoder.java
Patch:
@@ -25,12 +25,12 @@
 import javax.annotation.Nullable;
 
 import com.linecorp.armeria.common.ContentTooLargeException;
+import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.stream.ClosedStreamException;
-import com.linecorp.armeria.common.unsafe.PooledHttpData;
 import com.linecorp.armeria.internal.common.ArmeriaHttpUtil;
 import com.linecorp.armeria.internal.common.Http2GoAwayHandler;
 import com.linecorp.armeria.internal.common.Http2KeepAliveHandler;
@@ -246,7 +246,7 @@ public int onDataRead(
             }
         } else if (req.isOpen()) {
             try {
-                req.write(PooledHttpData.wrap(data.retain()).withEndOfStream(endOfStream));
+                req.write(HttpData.wrap(data.retain()).withEndOfStream(endOfStream));
             } catch (Throwable t) {
                 req.close(t);
                 throw connectionError(INTERNAL_ERROR, t, "failed to consume a DATA frame");

File: core/src/main/java/com/linecorp/armeria/server/file/NonExistentAggregatedHttpFile.java
Patch:
@@ -18,8 +18,8 @@
 import javax.annotation.Nullable;
 
 import com.linecorp.armeria.common.AggregatedHttpResponse;
+import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.ResponseHeaders;
-import com.linecorp.armeria.common.unsafe.PooledHttpData;
 
 final class NonExistentAggregatedHttpFile implements AggregatedHttpFile {
 
@@ -47,7 +47,7 @@ public AggregatedHttpResponse response() {
 
     @Nullable
     @Override
-    public PooledHttpData content() {
+    public HttpData content() {
         return null;
     }
 

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClientTest.java
Patch:
@@ -183,7 +183,7 @@ private static void invoke(
         final HttpClient client = mock(HttpClient.class);
         final HttpClient decorated = decorator.apply(client);
 
-        decorated.execute(ctx, req);
+        decorated.execute(ctx, req).aggregate();
     }
 
     /**

File: core/src/test/java/com/linecorp/armeria/common/logging/ContentPreviewerTest.java
Patch:
@@ -163,7 +163,7 @@ RequestLog post(String path, byte[] content, MediaType contentType) throws Excep
                                                  HttpHeaderNames.CONTENT_TYPE, contentType,
                                                  HttpHeaderNames.ACCEPT, "utf-8",
                                                  HttpHeaderNames.CONTENT_TYPE, MediaType.ANY_TEXT_TYPE),
-                               content);
+                               content).aggregate();
                 final RequestLog log = waitingFuture.get();
                 waitingFuture = null;
                 return log;

File: core/src/test/java/com/linecorp/armeria/server/HttpServerTest.java
Patch:
@@ -81,7 +81,6 @@
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.stream.ClosedStreamException;
-import com.linecorp.armeria.common.unsafe.PooledHttpData;
 import com.linecorp.armeria.common.util.EventLoopGroups;
 import com.linecorp.armeria.common.util.TimeoutMode;
 import com.linecorp.armeria.internal.common.PathAndQuery;
@@ -216,7 +215,7 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) {
                                         final ByteBuf content = PooledByteBufAllocator.DEFAULT
                                                 .buffer(1)
                                                 .writeByte('0' + finalI);
-                                        data = PooledHttpData.wrap(content);
+                                        data = HttpData.wrap(content);
                                     } else {
                                         data = HttpData.ofAscii(String.valueOf(finalI));
                                     }

File: core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java
Patch:
@@ -179,7 +179,7 @@ void accessLogWriter() throws InterruptedException {
 
         assertThat(accessLogWriterCheckLatch.getCount()).isOne();
 
-        client.get("/greet/armeria");
+        client.get("/greet/armeria").aggregate();
         accessLogWriterCheckLatch.await();
     }
 

File: core/src/test/java/com/linecorp/armeria/server/encoding/HttpEncodedResponseTest.java
Patch:
@@ -28,7 +28,6 @@
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.stream.NoopSubscriber;
-import com.linecorp.armeria.common.unsafe.PooledHttpData;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
@@ -39,13 +38,13 @@ class HttpEncodedResponseTest {
 
     @Test
     void testLeak() {
-        final ByteBuf buf = Unpooled.buffer();
+        final ByteBuf buf = Unpooled.directBuffer();
         buf.writeCharSequence("foo", StandardCharsets.UTF_8);
 
         final HttpResponse orig =
                 AggregatedHttpResponse.of(HttpStatus.OK,
                                           MediaType.PLAIN_TEXT_UTF_8,
-                                          PooledHttpData.wrap(buf).withEndOfStream()).toHttpResponse();
+                                          HttpData.wrap(buf).withEndOfStream()).toHttpResponse();
         final HttpEncodedResponse encoded = new HttpEncodedResponse(
                 orig, HttpEncodingType.DEFLATE, mediaType -> true, 1);
 

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java
Patch:
@@ -39,6 +39,7 @@
 import com.google.common.base.Strings;
 import com.google.common.util.concurrent.MoreExecutors;
 
+import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpHeadersBuilder;
 import com.linecorp.armeria.common.HttpObject;
@@ -55,7 +56,6 @@
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
 import com.linecorp.armeria.common.grpc.protocol.GrpcTrailersUtil;
 import com.linecorp.armeria.common.logging.RequestLogProperty;
-import com.linecorp.armeria.common.unsafe.PooledHttpData;
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.internal.common.grpc.ForwardingCompressor;
 import com.linecorp.armeria.internal.common.grpc.ForwardingDecompressor;
@@ -544,7 +544,7 @@ void setListener(Listener<I> listener) {
         this.listener = requireNonNull(listener, "listener");
     }
 
-    private PooledHttpData serializeTrailersAsMessage(HttpHeaders trailers) {
+    private HttpData serializeTrailersAsMessage(HttpHeaders trailers) {
         final ByteBuf serialized = ctx.alloc().buffer();
         boolean success = false;
         try {
@@ -562,7 +562,7 @@ private PooledHttpData serializeTrailersAsMessage(HttpHeaders trailers) {
                 serialized.release();
             }
         }
-        return PooledHttpData.wrap(serialized).withEndOfStream();
+        return HttpData.wrap(serialized).withEndOfStream();
     }
 
     @Nullable

File: grpc/src/test/java/com/linecorp/armeria/it/grpc/GrpcMetricsIntegrationTest.java
Patch:
@@ -234,7 +234,8 @@ private static void makeUnframedRequest(String name) throws Exception {
                                                 .setBody(ByteString.copyFromUtf8(name)))
                              .build();
         try {
-            client.post("/armeria.grpc.testing.TestService/UnaryCall2", request.toByteArray());
+            client.post("/armeria.grpc.testing.TestService/UnaryCall2", request.toByteArray())
+                  .aggregate();
         } catch (Throwable t) {
             // Ignore, we will count these up
         }

File: retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/AbstractSubscriber.java
Patch:
@@ -32,8 +32,8 @@
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpObject;
 import com.linecorp.armeria.common.HttpStatus;
+import com.linecorp.armeria.unsafe.PooledObjects;
 
-import io.netty.util.ReferenceCountUtil;
 import okhttp3.Callback;
 import okhttp3.MediaType;
 import okhttp3.Protocol;
@@ -128,7 +128,7 @@ public final void onNext(HttpObject httpObject) {
                 // Cancel the subscription if any message comes here after the state has been changed to DONE.
                 assert subscription != null;
                 subscription.cancel();
-                ReferenceCountUtil.safeRelease(httpObject);
+                PooledObjects.close(httpObject);
                 break;
         }
     }

File: spring/boot2-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/WebOperationService.java
Patch:
@@ -50,6 +50,7 @@
 import com.google.common.collect.ImmutableMap;
 
 import com.linecorp.armeria.common.AggregatedHttpRequest;
+import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
@@ -60,7 +61,6 @@
 import com.linecorp.armeria.common.QueryParams;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.ResponseHeadersBuilder;
-import com.linecorp.armeria.common.unsafe.PooledHttpData;
 import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
@@ -275,7 +275,7 @@ private static void streamResource(ServiceRequestContext ctx, HttpResponseWriter
         final long nextRemainingBytes = remainingBytes - readBytes;
         final boolean endOfStream = nextRemainingBytes == 0;
         if (readBytes > 0) {
-            if (!res.tryWrite(PooledHttpData.wrap(buf).withEndOfStream(endOfStream))) {
+            if (!res.tryWrite(HttpData.wrap(buf).withEndOfStream(endOfStream))) {
                 close(in);
                 return;
             }

File: annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.annotation.processor;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: brave/src/main/java/com/linecorp/armeria/client/brave/package-info.java
Patch:
@@ -21,4 +21,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.client.brave;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: brave/src/main/java/com/linecorp/armeria/common/brave/package-info.java
Patch:
@@ -22,4 +22,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.common.brave;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: brave/src/main/java/com/linecorp/armeria/internal/common/brave/package-info.java
Patch:
@@ -22,4 +22,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.internal.common.brave;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: brave/src/main/java/com/linecorp/armeria/server/brave/package-info.java
Patch:
@@ -21,4 +21,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.brave;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: bucket4j/src/main/java/com/linecorp/armeria/common/throttling/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.common.throttling;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/package-info.java
Patch:
@@ -23,4 +23,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.throttling.bucket4j;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/client/AbstractRuleBuilder.java
Patch:
@@ -39,7 +39,7 @@
 import com.linecorp.armeria.common.HttpStatusClass;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.ResponseHeaders;
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * A skeletal builder implementation for {@link RetryRule}, {@link RetryRuleWithContent},

File: core/src/main/java/com/linecorp/armeria/client/AbstractRuleWithContentBuilder.java
Patch:
@@ -32,7 +32,7 @@
 import com.linecorp.armeria.common.HttpResponseDuplicator;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.Response;
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * A skeletal builder implementation for {@link RetryRuleWithContent} and {@link CircuitBreakerRuleWithContent}.

File: core/src/main/java/com/linecorp/armeria/client/ClientFactoryProvider.java
Patch:
@@ -17,7 +17,7 @@
 package com.linecorp.armeria.client;
 
 import com.linecorp.armeria.common.SerializationFormat;
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * Creates a new {@link ClientFactory} dynamically via Java SPI (Service Provider Interface).

File: core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java
Patch:
@@ -49,6 +49,7 @@
 import com.linecorp.armeria.common.Response;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogAccess;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
@@ -57,7 +58,6 @@
 import com.linecorp.armeria.common.util.TextFormatter;
 import com.linecorp.armeria.common.util.TimeoutMode;
 import com.linecorp.armeria.common.util.UnmodifiableFuture;
-import com.linecorp.armeria.common.util.UnstableApi;
 import com.linecorp.armeria.internal.common.TimeoutController;
 import com.linecorp.armeria.internal.common.TimeoutScheduler;
 import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleWithContentBuilder.java
Patch:
@@ -39,7 +39,7 @@
  * A builder for creating a new {@link CircuitBreakerRuleWithContent}.
  * @param <T> the response type
  */
-public class CircuitBreakerRuleWithContentBuilder<T extends Response>
+public final class CircuitBreakerRuleWithContentBuilder<T extends Response>
         extends AbstractRuleWithContentBuilder<T> {
 
     CircuitBreakerRuleWithContentBuilder(

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/package-info.java
Patch:
@@ -125,4 +125,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.client.circuitbreaker;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/client/encoding/HttpDecodedResponse.java
Patch:
@@ -37,7 +37,7 @@
 /**
  * A {@link FilteredHttpResponse} that applies HTTP decoding to {@link HttpObject}s as they are published.
  */
-class HttpDecodedResponse extends FilteredHttpResponse {
+final class HttpDecodedResponse extends FilteredHttpResponse {
 
     private final Map<String, StreamDecoderFactory> availableDecoders;
     private final ByteBufAllocator alloc;

File: core/src/main/java/com/linecorp/armeria/client/encoding/ZlibStreamDecoder.java
Patch:
@@ -31,7 +31,7 @@
  * A {@link StreamDecoder} that user zlib ('gzip' or 'deflate'). Netty implementation used to allow
  * for incremental decoding using an {@link EmbeddedChannel}.
  */
-class ZlibStreamDecoder implements StreamDecoder {
+final class ZlibStreamDecoder implements StreamDecoder {
 
     private final EmbeddedChannel decoder;
 

File: core/src/main/java/com/linecorp/armeria/client/encoding/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.client.encoding;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/EmptyEndpointGroupException.java
Patch:
@@ -37,7 +37,7 @@ public static EmptyEndpointGroupException get() {
                new EmptyEndpointGroupException() : INSTANCE;
     }
 
-    EmptyEndpointGroupException() {}
+    private EmptyEndpointGroupException() {}
 
     private EmptyEndpointGroupException(@SuppressWarnings("unused") boolean dummy) {
         super(null, null, false, false);

File: core/src/main/java/com/linecorp/armeria/client/endpoint/FileWatcherRunnable.java
Patch:
@@ -35,7 +35,7 @@
 /**
  * A runnable which watches files.
  */
-class FileWatcherRunnable implements Runnable {
+final class FileWatcherRunnable implements Runnable {
     private static final Logger logger = LoggerFactory.getLogger(FileWatcherRunnable.class);
 
     private final WatchService watchService;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.client.endpoint.dns;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/PartialHealthCheckStrategyBuilder.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * A builder for creating a new {@link PartialHealthCheckStrategy}.
  */
-class PartialHealthCheckStrategyBuilder {
+final class PartialHealthCheckStrategyBuilder {
 
     @Nullable
     private Integer maxEndpointCount;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/package-info.java
Patch:
@@ -21,4 +21,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.client.endpoint.healthcheck;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/package-info.java
Patch:
@@ -25,4 +25,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.client.endpoint;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/client/limit/package-info.java
Patch:
@@ -19,4 +19,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.client.limit;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/client/logging/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.client.logging;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/client/metric/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.client.metric;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/client/package-info.java
Patch:
@@ -26,4 +26,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.client;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/client/proxy/DirectProxyConfig.java
Patch:
@@ -25,8 +25,7 @@ public final class DirectProxyConfig extends ProxyConfig {
 
     static final DirectProxyConfig DIRECT_PROXY_CONFIG = new DirectProxyConfig();
 
-    private DirectProxyConfig() {
-    }
+    private DirectProxyConfig() {}
 
     @Override
     public ProxyType proxyType() {

File: core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfigSelector.java
Patch:
@@ -24,7 +24,7 @@
 
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.common.SessionProtocol;
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * Selects the {@link ProxyConfig} to use when connecting to a network

File: core/src/main/java/com/linecorp/armeria/client/proxy/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.client.proxy;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/client/retry/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.client.retry;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/common/NonWrappingRequestContext.java
Patch:
@@ -26,7 +26,7 @@
 
 import javax.annotation.Nullable;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.internal.common.ArmeriaHttpUtil;
 
 import io.micrometer.core.instrument.MeterRegistry;

File: core/src/main/java/com/linecorp/armeria/common/RequestContextStorage.java
Patch:
@@ -22,7 +22,7 @@
 
 import javax.annotation.Nullable;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.util.Unwrappable;
 import com.linecorp.armeria.internal.common.RequestContextUtil;
 

File: core/src/main/java/com/linecorp/armeria/common/RequestContextStorageProvider.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.common;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * Creates a new {@link RequestContextStorage} dynamically via Java SPI (Service Provider Interface).

File: core/src/main/java/com/linecorp/armeria/common/SerializationFormatProvider.java
Patch:
@@ -26,7 +26,7 @@
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.ImmutableList;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * Registers the {@link SerializationFormat}s dynamically via Java SPI (Service Provider Interface).

File: core/src/main/java/com/linecorp/armeria/common/annotation/NonNullByDefault.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.linecorp.armeria.common.util;
+package com.linecorp.armeria.common.annotation;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;

File: core/src/main/java/com/linecorp/armeria/common/annotation/UnstableApi.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.linecorp.armeria.common.util;
+package com.linecorp.armeria.common.annotation;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;

File: core/src/main/java/com/linecorp/armeria/common/auth/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.common.auth;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/common/logging/package-info.java
Patch:
@@ -27,4 +27,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.common.logging;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/common/metric/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.common.metric;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/common/package-info.java
Patch:
@@ -25,4 +25,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.common;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/common/sse/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.common.sse;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java
Patch:
@@ -31,7 +31,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 import io.netty.util.ReferenceCountUtil;
 import io.netty.util.concurrent.ImmediateEventExecutor;

File: core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessageDuplicator.java
Patch:
@@ -47,9 +47,9 @@
 import com.spotify.futures.CompletableFutures;
 
 import com.linecorp.armeria.common.ContentTooLargeException;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.util.CompositeException;
 import com.linecorp.armeria.common.util.EventLoopCheckingFuture;
-import com.linecorp.armeria.common.util.UnstableApi;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufHolder;

File: core/src/main/java/com/linecorp/armeria/common/stream/DeferredStreamMessage.java
Patch:
@@ -29,8 +29,8 @@
 
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.util.CompletionActions;
-import com.linecorp.armeria.common.util.UnstableApi;
 
 import io.netty.util.concurrent.ImmediateEventExecutor;
 

File: core/src/main/java/com/linecorp/armeria/common/stream/EmptyFixedStreamMessage.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.common.stream;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * A {@link FixedStreamMessage} that publishes no objects, just a close event.

File: core/src/main/java/com/linecorp/armeria/common/stream/OneElementFixedStreamMessage.java
Patch:
@@ -20,7 +20,7 @@
 
 import javax.annotation.Nullable;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 import io.netty.util.ReferenceCountUtil;
 

File: core/src/main/java/com/linecorp/armeria/common/stream/PublisherBasedStreamMessage.java
Patch:
@@ -34,9 +34,9 @@
 
 import com.google.common.annotations.VisibleForTesting;
 
+import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.util.CompositeException;
 import com.linecorp.armeria.common.util.EventLoopCheckingFuture;
-import com.linecorp.armeria.common.util.UnstableApi;
 
 import io.netty.util.concurrent.EventExecutor;
 import io.netty.util.concurrent.ImmediateEventExecutor;

File: core/src/main/java/com/linecorp/armeria/common/stream/RegularFixedStreamMessage.java
Patch:
@@ -21,7 +21,7 @@
 
 import org.reactivestreams.Subscriber;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 import io.netty.util.ReferenceCountUtil;
 

File: core/src/main/java/com/linecorp/armeria/common/stream/TwoElementFixedStreamMessage.java
Patch:
@@ -20,7 +20,7 @@
 
 import javax.annotation.Nullable;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 import io.netty.util.ReferenceCountUtil;
 

File: core/src/main/java/com/linecorp/armeria/common/stream/package-info.java
Patch:
@@ -26,4 +26,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.common.stream;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/common/unsafe/package-info.java
Patch:
@@ -25,5 +25,5 @@
 @NonNullByDefault
 package com.linecorp.armeria.common.unsafe;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.UnstableApi;

File: core/src/main/java/com/linecorp/armeria/common/util/Functions.java
Patch:
@@ -178,6 +178,7 @@ public static <A, B, C, D, E, F, G, H, I, J> Function<A, J> compose(Function<A,
      * Converts the specified {@link Consumer} into a {@link Function} that returns {@code null}.
      */
     public static <T> Function<T, Void> voidFunction(Consumer<T> consumer) {
+        requireNonNull(consumer, "consumer");
         return v -> {
             consumer.accept(v);
             return null;
@@ -188,6 +189,7 @@ public static <T> Function<T, Void> voidFunction(Consumer<T> consumer) {
      * Converts the specified {@link BiConsumer} into a {@link BiFunction} that returns {@code null}.
      */
     public static <T, U> BiFunction<T, U, Void> voidFunction(BiConsumer<T, U> consumer) {
+        requireNonNull(consumer, "consumer");
         return (a, b) -> {
             consumer.accept(a, b);
             return null;

File: core/src/main/java/com/linecorp/armeria/common/util/Version.java
Patch:
@@ -95,6 +95,7 @@ public static Version get(String artifactId) {
      * with arbitrary {@code unknown} values.
      */
     public static Version get(String artifactId, ClassLoader classLoader) {
+        requireNonNull(artifactId, "artifactId");
         final Version version = getAll(classLoader).get(artifactId);
         if (version != null) {
             return version;

File: core/src/main/java/com/linecorp/armeria/common/util/package-info.java
Patch:
@@ -19,3 +19,5 @@
  */
 @NonNullByDefault
 package com.linecorp.armeria.common.util;
+
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/internal/client/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.internal.client;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/internal/common/logging/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.internal.common.logging;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/internal/common/metric/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.internal.common.metric;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/internal/common/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.internal.common;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/internal/common/util/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.internal.common.util;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/internal/logging/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.internal.logging;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.internal.server.annotation;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/internal/server/docs/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.internal.server.docs;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/internal/server/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.internal.server;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java
Patch:
@@ -48,13 +48,13 @@
 import com.linecorp.armeria.common.Response;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogAccess;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
 import com.linecorp.armeria.common.util.SystemInfo;
 import com.linecorp.armeria.common.util.TextFormatter;
 import com.linecorp.armeria.common.util.TimeoutMode;
-import com.linecorp.armeria.common.util.UnstableApi;
 import com.linecorp.armeria.internal.common.TimeoutController;
 import com.linecorp.armeria.internal.common.TimeoutScheduler;
 import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;

File: core/src/main/java/com/linecorp/armeria/server/annotation/JacksonResponseConverterFunction.java
Patch:
@@ -43,6 +43,8 @@
  * {@code content-type: application/json; charset=utf-8} or {@code content-type: application/json-seq}.
  * The objects published from a {@link Publisher} or {@link Stream} would be converted into JSON Text Sequences
  * if a {@link ProducesJsonSequences} annotation is specified on an annotated service method.
+ * Note that this {@link ResponseConverterFunction} is applied to the annotated service by default,
+ * so you don't have to set explicitly unless you want to use your own {@link ObjectMapper}.
  *
  * @see <a href="https://tools.ietf.org/html/rfc7464">JavaScript Object Notation (JSON) Text Sequences</a>
  */

File: core/src/main/java/com/linecorp/armeria/server/annotation/ResponseConverterFunctionProvider.java
Patch:
@@ -20,7 +20,7 @@
 import javax.annotation.Nullable;
 
 import com.linecorp.armeria.common.HttpResponse;
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * A {@link ResponseConverterFunction} provider interface which creates a new

File: core/src/main/java/com/linecorp/armeria/server/annotation/decorator/LoggingDecorator.java
Patch:
@@ -64,4 +64,3 @@
      */
     int order() default 0;
 }
-

File: core/src/main/java/com/linecorp/armeria/server/annotation/decorator/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.annotation.decorator;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/annotation/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.annotation;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/auth/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.auth;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/composition/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.composition;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/cors/package-info.java
Patch:
@@ -21,4 +21,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.cors;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/docs/DocServicePlugin.java
Patch:
@@ -24,7 +24,7 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceConfig;
 

File: core/src/main/java/com/linecorp/armeria/server/docs/DocStringExtractor.java
Patch:
@@ -40,7 +40,7 @@
 import com.google.common.collect.Maps;
 import com.google.common.io.Resources;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * A supporting base class for implementing the standard pattern of extracting docstrings

File: core/src/main/java/com/linecorp/armeria/server/docs/EndpointInfo.java
Patch:
@@ -32,7 +32,7 @@
 import com.google.common.collect.ImmutableSortedSet;
 
 import com.linecorp.armeria.common.MediaType;
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.server.Service;
 
 /**

File: core/src/main/java/com/linecorp/armeria/server/docs/EndpointInfoBuilder.java
Patch:
@@ -32,7 +32,7 @@
 
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.SerializationFormat;
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * Creates a new {@link EndpointInfo} using the builder pattern.

File: core/src/main/java/com/linecorp/armeria/server/docs/EnumInfo.java
Patch:
@@ -29,7 +29,7 @@
 import com.google.common.base.Strings;
 import com.google.common.collect.ImmutableList;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * Metadata about an enum type.

File: core/src/main/java/com/linecorp/armeria/server/docs/EnumValueInfo.java
Patch:
@@ -27,7 +27,7 @@
 import com.google.common.base.MoreObjects;
 import com.google.common.base.Strings;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * Metadata about an enum value.

File: core/src/main/java/com/linecorp/armeria/server/docs/ExceptionInfo.java
Patch:
@@ -31,7 +31,7 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSortedSet;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * Metadata about an exception type.

File: core/src/main/java/com/linecorp/armeria/server/docs/FieldInfo.java
Patch:
@@ -27,7 +27,7 @@
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.ImmutableList;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * Metadata about a field of a struct or an exception.

File: core/src/main/java/com/linecorp/armeria/server/docs/FieldInfoBuilder.java
Patch:
@@ -26,7 +26,7 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * Creates a new {@link FieldInfo} using the builder pattern.

File: core/src/main/java/com/linecorp/armeria/server/docs/FieldLocation.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.server.docs;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * The location of a field.

File: core/src/main/java/com/linecorp/armeria/server/docs/FieldRequirement.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.server.docs;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * The requirement level of a field.

File: core/src/main/java/com/linecorp/armeria/server/docs/MethodInfo.java
Patch:
@@ -37,7 +37,7 @@
 
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpMethod;
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.internal.common.PathAndQuery;
 import com.linecorp.armeria.server.Service;
 

File: core/src/main/java/com/linecorp/armeria/server/docs/NamedTypeInfo.java
Patch:
@@ -24,7 +24,7 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.google.common.collect.ImmutableSet;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * Metadata about a named type.

File: core/src/main/java/com/linecorp/armeria/server/docs/ServiceInfo.java
Patch:
@@ -40,7 +40,7 @@
 
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpMethod;
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.server.Service;
 
 /**

File: core/src/main/java/com/linecorp/armeria/server/docs/ServiceSpecification.java
Patch:
@@ -32,7 +32,7 @@
 import com.google.common.collect.Streams;
 
 import com.linecorp.armeria.common.HttpHeaders;
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.server.Service;
 
 /**

File: core/src/main/java/com/linecorp/armeria/server/docs/StructInfo.java
Patch:
@@ -31,7 +31,7 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSortedSet;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * Metadata about a struct type.

File: core/src/main/java/com/linecorp/armeria/server/docs/TypeSignature.java
Patch:
@@ -28,7 +28,7 @@
 import com.google.common.base.Joiner;
 import com.google.common.collect.ImmutableList;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * Type signature of a method parameter, a method return value or a struct/exception field.

File: core/src/main/java/com/linecorp/armeria/server/docs/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.docs;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/encoding/HttpEncodedResponse.java
Patch:
@@ -44,7 +44,7 @@
 /**
  * A {@link FilteredStreamMessage} that applies HTTP encoding to {@link HttpObject}s as they are published.
  */
-class HttpEncodedResponse extends FilteredHttpResponse {
+final class HttpEncodedResponse extends FilteredHttpResponse {
 
     private static final Logger logger = LoggerFactory.getLogger(HttpEncodedResponse.class);
 

File: core/src/main/java/com/linecorp/armeria/server/encoding/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.encoding;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/file/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.file;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/healthcheck/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.healthcheck;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/logging/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.logging;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/metric/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.metric;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/package-info.java
Patch:
@@ -27,4 +27,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/streaming/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.streaming;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/throttling/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.throttling;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/reactor/core/scheduler/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package reactor.core.scheduler;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/test/java/com/linecorp/armeria/client/ClientFactoryBuilderTest.java
Patch:
@@ -94,8 +94,8 @@ void shouldInheritClientFactoryOptions() {
     @Test
     void shouldPreserveChannelOptionInClientFactory() {
         final ClientFactory factory = ClientFactory.builder()
-                .options(ClientFactoryOptions.of())
-                .build();
+                                                   .options(ClientFactoryOptions.of())
+                                                   .build();
         final Map<ChannelOption<?>, Object> channelOptions =
                 factory.options().get(ClientFactoryOption.CHANNEL_OPTIONS);
         final int connectTimeoutMillis = (int) channelOptions.get(ChannelOption.CONNECT_TIMEOUT_MILLIS);

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/MetricCollectingCircuitBreakerListenerTest.java
Patch:
@@ -30,7 +30,7 @@ class MetricCollectingCircuitBreakerListenerTest {
     @Test
     void test() throws Exception {
         final MeterRegistry registry = PrometheusMeterRegistries.newRegistry();
-        final CircuitBreakerListener l = new MetricCollectingCircuitBreakerListener(registry, "foo");
+        final CircuitBreakerListener l = CircuitBreakerListener.metricCollecting(registry, "foo");
 
         // Note: We only use the name of the circuit breaker.
         final CircuitBreaker cb = CircuitBreaker.builder("bar").build();

File: core/src/test/java/com/linecorp/armeria/server/throttling/RateLimitingThrottlingStrategyTest.java
Patch:
@@ -37,8 +37,7 @@ public class RateLimitingThrottlingStrategyTest {
 
     @Test
     public void rateLimit() {
-        final RateLimitingThrottlingStrategy<Request> strategy =
-                new RateLimitingThrottlingStrategy<>(rateLimiter);
+        final ThrottlingStrategy<Request> strategy = new RateLimitingThrottlingStrategy<>(rateLimiter);
         when(rateLimiter.tryAcquire()).thenReturn(true)
                                       .thenReturn(false)
                                       .thenReturn(true);

File: dropwizard2/src/main/java/com/linecorp/armeria/dropwizard/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.dropwizard;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: eureka/src/main/java/com/linecorp/armeria/client/eureka/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.client.eureka;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: eureka/src/main/java/com/linecorp/armeria/internal/common/eureka/package-info.java
Patch:
@@ -19,4 +19,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.internal.common.eureka;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: eureka/src/main/java/com/linecorp/armeria/server/eureka/package-info.java
Patch:
@@ -19,4 +19,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.eureka;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: grpc-protocol/src/main/java/com/linecorp/armeria/client/grpc/protocol/UnaryGrpcClient.java
Patch:
@@ -35,6 +35,7 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.RequestHeaders;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer.DeframedMessage;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer.Listener;
@@ -43,7 +44,6 @@
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
 import com.linecorp.armeria.common.grpc.protocol.StatusMessageEscaper;
 import com.linecorp.armeria.common.unsafe.PooledHttpData;
-import com.linecorp.armeria.common.util.UnstableApi;
 import com.linecorp.armeria.internal.common.grpc.protocol.StatusCodes;
 
 import io.netty.buffer.ByteBuf;

File: grpc-protocol/src/main/java/com/linecorp/armeria/client/grpc/protocol/package-info.java
Patch:
@@ -28,5 +28,5 @@
 @NonNullByDefault
 package com.linecorp.armeria.client.grpc.protocol;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.UnstableApi;

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageDeframer.java
Patch:
@@ -62,7 +62,7 @@
 import com.google.common.annotations.VisibleForTesting;
 
 import com.linecorp.armeria.common.HttpData;
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.internal.common.grpc.protocol.StatusCodes;
 
 import io.netty.buffer.ByteBuf;

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java
Patch:
@@ -55,8 +55,8 @@
 
 import javax.annotation.Nullable;
 
+import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.unsafe.PooledHttpData;
-import com.linecorp.armeria.common.util.UnstableApi;
 import com.linecorp.armeria.internal.common.grpc.protocol.StatusCodes;
 
 import io.netty.buffer.ByteBuf;

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaStatusException.java
Patch:
@@ -18,7 +18,7 @@
 
 import javax.annotation.Nullable;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * An {@link Exception} that contains enough information to convert it to a gRPC status.

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/Compressor.java
Patch:
@@ -34,7 +34,7 @@
 import java.io.IOException;
 import java.io.OutputStream;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * Represents a message compressor.

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/Decompressor.java
Patch:
@@ -34,7 +34,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * Represents a message decompressor.

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/GrpcHeaderNames.java
Patch:
@@ -17,7 +17,7 @@
 package com.linecorp.armeria.common.grpc.protocol;
 
 import com.linecorp.armeria.common.HttpHeaderNames;
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 import io.netty.util.AsciiString;
 

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/GrpcTrailersUtil.java
Patch:
@@ -23,7 +23,7 @@
 import com.linecorp.armeria.common.HttpHeadersBuilder;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.ResponseHeaders;
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * Utility for creating response trailers for a gRPC status. Trailers are only returned from a server.

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/StatusMessageEscaper.java
Patch:
@@ -49,7 +49,7 @@
 import java.nio.ByteBuffer;
 import java.nio.charset.StandardCharsets;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.internal.common.util.TemporaryThreadLocals;
 
 /**

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/package-info.java
Patch:
@@ -28,5 +28,5 @@
 @NonNullByDefault
 package com.linecorp.armeria.common.grpc.protocol;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.UnstableApi;

File: grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnaryGrpcService.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.util.concurrent.CompletableFuture;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufUtil;

File: grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnsafeUnaryGrpcService.java
Patch:
@@ -25,14 +25,14 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.ResponseHeaders;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer.DeframedMessage;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer.Listener;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageFramer;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaStatusException;
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
 import com.linecorp.armeria.common.grpc.protocol.GrpcTrailersUtil;
-import com.linecorp.armeria.common.util.UnstableApi;
 import com.linecorp.armeria.internal.common.grpc.protocol.StatusCodes;
 import com.linecorp.armeria.server.AbstractHttpService;
 import com.linecorp.armeria.server.ServiceRequestContext;

File: grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/package-info.java
Patch:
@@ -29,5 +29,5 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.grpc.protocol;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.UnstableApi;

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcWebUtil.java
Patch:
@@ -24,9 +24,9 @@
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaders;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
 import com.linecorp.armeria.common.unsafe.PooledHttpData;
-import com.linecorp.armeria.common.util.UnstableApi;
 import com.linecorp.armeria.internal.client.grpc.InternalGrpcWebUtil;
 
 import io.grpc.ClientInterceptor;

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.client.grpc;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: grpc/src/main/java/com/linecorp/armeria/common/grpc/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.common.grpc;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: grpc/src/main/java/com/linecorp/armeria/internal/common/grpc/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.internal.common.grpc;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.grpc;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: grpc/src/main/java/com/linecorp/armeria/unsafe/grpc/package-info.java
Patch:
@@ -22,4 +22,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.unsafe.grpc;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: it/spring/boot2-tomcat9/src/main/java/com/linecorp/armeria/spring/tomcat/demo/package-info.java
Patch:
@@ -17,4 +17,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.spring.tomcat.demo;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: jetty9/src/main/java/com/linecorp/armeria/server/jetty/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.jetty;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: junit4/src/main/java/com/linecorp/armeria/testing/junit4/common/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.testing.junit4.common;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: junit4/src/main/java/com/linecorp/armeria/testing/junit4/server/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.testing.junit4.server;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: junit5/src/main/java/com/linecorp/armeria/internal/testing/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.internal.testing;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: junit5/src/main/java/com/linecorp/armeria/testing/junit5/common/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.testing.junit5.common;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: junit5/src/main/java/com/linecorp/armeria/testing/junit5/server/mock/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.testing.junit5.server.mock;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: junit5/src/main/java/com/linecorp/armeria/testing/junit5/server/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.testing.junit5.server;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: kafka/src/main/java/com/linecorp/armeria/server/logging/kafka/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.logging.kafka;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: logback/src/main/java/com/linecorp/armeria/common/logback/package-info.java
Patch:
@@ -23,4 +23,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.common.logback;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.client.retrofit2;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: rxjava2/src/main/java/com/linecorp/armeria/common/rxjava2/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.common.rxjava2;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: rxjava2/src/main/java/com/linecorp/armeria/internal/server/rxjava2/package-info.java
Patch:
@@ -17,4 +17,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.internal.server.rxjava2;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: rxjava2/src/main/java/com/linecorp/armeria/server/rxjava2/package-info.java
Patch:
@@ -23,4 +23,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.rxjava2;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: rxjava3/src/main/java/com/linecorp/armeria/common/rxjava3/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.common.rxjava3;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: rxjava3/src/main/java/com/linecorp/armeria/internal/server/rxjava3/package-info.java
Patch:
@@ -17,4 +17,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.internal.server.rxjava3;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: rxjava3/src/main/java/com/linecorp/armeria/server/rxjava3/package-info.java
Patch:
@@ -23,4 +23,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.rxjava3;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: saml/src/main/java/com/linecorp/armeria/server/saml/package-info.java
Patch:
@@ -21,4 +21,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.saml;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: spring/boot2-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.spring.actuate;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.internal.spring;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: spring/boot2-autoconfigure/src/main/java/com/linecorp/armeria/spring/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.spring;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.spring.web;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: spring/boot2-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.spring.web.reactive;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: testing-internal/src/main/java/com/linecorp/armeria/internal/testing/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.internal.testing;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: testing-internal/src/main/java/com/linecorp/armeria/internal/testing/webapp/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.internal.testing.webapp;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: thrift0.13/src/main/java/com/linecorp/armeria/client/thrift/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.client.thrift;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.common.thrift;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/text/package-info.java
Patch:
@@ -47,4 +47,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.common.thrift.text;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: thrift0.13/src/main/java/com/linecorp/armeria/internal/common/thrift/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.internal.common.thrift;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: thrift0.13/src/main/java/com/linecorp/armeria/server/thrift/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.thrift;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: tomcat9/src/main/java/com/linecorp/armeria/server/tomcat/package-info.java
Patch:
@@ -20,4 +20,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.tomcat;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: zookeeper3/src/main/java/com/linecorp/armeria/client/zookeeper/package-info.java
Patch:
@@ -19,4 +19,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.client.zookeeper;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: zookeeper3/src/main/java/com/linecorp/armeria/common/zookeeper/AbstractCuratorFrameworkBuilder.java
Patch:
@@ -34,7 +34,7 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.primitives.Ints;
 
-import com.linecorp.armeria.common.util.UnstableApi;
+import com.linecorp.armeria.common.annotation.UnstableApi;
 
 /**
  * A skeletal builder implementation for {@link CuratorFramework}.

File: zookeeper3/src/main/java/com/linecorp/armeria/common/zookeeper/package-info.java
Patch:
@@ -19,4 +19,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.common.zookeeper;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: zookeeper3/src/main/java/com/linecorp/armeria/internal/common/zookeeper/package-info.java
Patch:
@@ -19,4 +19,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.internal.common.zookeeper;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: zookeeper3/src/main/java/com/linecorp/armeria/server/zookeeper/package-info.java
Patch:
@@ -19,4 +19,4 @@
 @NonNullByDefault
 package com.linecorp.armeria.server.zookeeper;
 
-import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.annotation.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java
Patch:
@@ -19,7 +19,6 @@
 import static com.linecorp.armeria.common.SessionProtocol.H1C;
 import static com.linecorp.armeria.common.SessionProtocol.H2;
 import static com.linecorp.armeria.common.SessionProtocol.H2C;
-import static com.linecorp.armeria.internal.stream.InternalSubscriptionOption.WITH_POOLED_OBJECTS;
 import static java.util.Objects.requireNonNull;
 
 import java.io.IOException;
@@ -40,6 +39,7 @@
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.metric.MoreMeters;
 import com.linecorp.armeria.common.stream.CancelledSubscriptionException;
+import com.linecorp.armeria.common.stream.SubscriptionOption;
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.internal.common.InboundTrafficController;
 import com.linecorp.armeria.internal.common.RequestContextUtil;
@@ -212,7 +212,7 @@ public void invoke(PooledChannel pooledChannel, ClientRequestContext ctx,
         final HttpRequestSubscriber reqSubscriber =
                 new HttpRequestSubscriber(channel, requestEncoder, responseDecoder,
                                           req, res, ctx, writeTimeoutMillis);
-        req.subscribe(reqSubscriber, channel.eventLoop(), WITH_POOLED_OBJECTS);
+        req.subscribe(reqSubscriber, channel.eventLoop(), SubscriptionOption.WITH_POOLED_OBJECTS);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/common/AggregatedHttpMessage.java
Patch:
@@ -25,7 +25,7 @@
  * HTTP request or an HTTP response depending on what header values it contains. For example, having a
  * {@link HttpHeaderNames#STATUS} header could mean it is an HTTP response.
  */
-public interface AggregatedHttpMessage {
+interface AggregatedHttpMessage {
 
     /**
      * Returns the HTTP headers.

File: core/src/main/java/com/linecorp/armeria/common/HttpData.java
Patch:
@@ -13,7 +13,6 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-
 package com.linecorp.armeria.common;
 
 import static java.util.Objects.requireNonNull;

File: core/src/main/java/com/linecorp/armeria/common/stream/DeferredStreamMessage.java
Patch:
@@ -31,7 +31,6 @@
 
 import com.linecorp.armeria.common.util.CompletionActions;
 import com.linecorp.armeria.common.util.UnstableApi;
-import com.linecorp.armeria.internal.stream.InternalSubscriptionOption;
 
 import io.netty.util.concurrent.ImmediateEventExecutor;
 
@@ -273,7 +272,7 @@ private void safeOnSubscribeToUpstream() {
 
         final ImmutableList.Builder<SubscriptionOption> builder = ImmutableList.builder();
         if (downstreamSubscription.withPooledObjects()) {
-            builder.add(InternalSubscriptionOption.WITH_POOLED_OBJECTS);
+            builder.add(SubscriptionOption.WITH_POOLED_OBJECTS);
         }
         if (downstreamSubscription.notifyCancellation()) {
             builder.add(SubscriptionOption.NOTIFY_CANCELLATION);

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -21,7 +21,6 @@
 import static com.linecorp.armeria.common.SessionProtocol.H2;
 import static com.linecorp.armeria.common.SessionProtocol.H2C;
 import static com.linecorp.armeria.internal.common.ArmeriaHttpUtil.isCorsPreflightRequest;
-import static com.linecorp.armeria.internal.stream.InternalSubscriptionOption.WITH_POOLED_OBJECTS;
 import static io.netty.handler.codec.http2.Http2CodecUtil.DEFAULT_WINDOW_SIZE;
 import static java.util.Objects.requireNonNull;
 
@@ -54,6 +53,7 @@
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
 import com.linecorp.armeria.common.metric.NoopMeterRegistry;
 import com.linecorp.armeria.common.stream.ClosedStreamException;
+import com.linecorp.armeria.common.stream.SubscriptionOption;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.common.util.SystemInfo;
@@ -463,7 +463,7 @@ private void handleRequest(ChannelHandlerContext ctx, DecodedHttpRequest req) th
             final HttpResponseSubscriber resSubscriber =
                     new HttpResponseSubscriber(ctx, responseEncoder, reqCtx, req);
             reqCtx.setRequestTimeoutController(resSubscriber);
-            res.subscribe(resSubscriber, eventLoop, WITH_POOLED_OBJECTS);
+            res.subscribe(resSubscriber, eventLoop, SubscriptionOption.WITH_POOLED_OBJECTS);
         }
     }
 

File: core/src/main/java/com/linecorp/armeria/server/RedirectService.java
Patch:
@@ -125,7 +125,7 @@ public final class RedirectService implements HttpService {
 
     private static final Pattern VALID_DEFAULT_URI_PATTERN = Pattern
             .compile("(?:(?:^https?:/{2}(?:([^:]+:)?[^:@]+@)?[^:]+)(?::[0-9]{1,5})?)?" +
-                    "(?:/[^/{}:]+|/:[^/{}]+|/\\{[^/{}]+})+/?");
+                     "(?:/[^/{}:]+|/:[^/{}]+|/\\{[^/{}]+})+/?");
     private static final Pattern PATTERN_PARAMS_START = Pattern.compile("/:|/\\{");
 
     private final HttpStatus httpStatus;

File: core/src/test/java/com/linecorp/armeria/client/encoding/HttpDecodedResponseTest.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.linecorp.armeria.client.encoding;
 
-import static com.linecorp.armeria.internal.stream.InternalSubscriptionOption.WITH_POOLED_OBJECTS;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import java.io.ByteArrayOutputStream;
@@ -39,6 +38,7 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.ResponseHeaders;
+import com.linecorp.armeria.common.stream.SubscriptionOption;
 import com.linecorp.armeria.common.unsafe.PooledHttpData;
 
 import io.netty.buffer.ByteBuf;
@@ -131,7 +131,7 @@ public void onError(Throwable t) {}
 
                 @Override
                 public void onComplete() {}
-            }, WITH_POOLED_OBJECTS);
+            }, SubscriptionOption.WITH_POOLED_OBJECTS);
         } else {
             decoded.subscribe(new Subscriber<HttpObject>() {
                 @Override

File: core/src/test/java/com/linecorp/armeria/common/stream/FilteredStreamMessageTest.java
Patch:
@@ -52,8 +52,7 @@ void withPooledObjects(boolean filterSupportsPooledObjects, boolean subscribedWi
         stream.close();
 
         final FilteredStreamMessage<PooledHttpData, PooledHttpData> filtered =
-                new FilteredStreamMessage<PooledHttpData, PooledHttpData>(stream,
-                                                                            filterSupportsPooledObjects) {
+                new FilteredStreamMessage<PooledHttpData, PooledHttpData>(stream, filterSupportsPooledObjects) {
                     @Override
                     protected PooledHttpData filter(PooledHttpData obj) {
                         assertThat(data.refCnt()).isEqualTo(expectedRefCntInFilter);

File: core/src/test/java/com/linecorp/armeria/common/stream/StreamMessageDuplicatorTest.java
Patch:
@@ -19,8 +19,8 @@
 import static com.linecorp.armeria.common.stream.AbortCauseArgumentProvider.ABORT_CAUSES;
 import static com.linecorp.armeria.common.stream.StreamMessageTest.newPooledBuffer;
 import static com.linecorp.armeria.common.stream.SubscriptionOption.NOTIFY_CANCELLATION;
+import static com.linecorp.armeria.common.stream.SubscriptionOption.WITH_POOLED_OBJECTS;
 import static com.linecorp.armeria.common.util.Exceptions.clearTrace;
-import static com.linecorp.armeria.internal.stream.InternalSubscriptionOption.WITH_POOLED_OBJECTS;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.awaitility.Awaitility.await;

File: core/src/test/java/com/linecorp/armeria/common/stream/StreamMessageTest.java
Patch:
@@ -17,7 +17,6 @@
 package com.linecorp.armeria.common.stream;
 
 import static com.google.common.collect.ImmutableList.toImmutableList;
-import static com.linecorp.armeria.internal.stream.InternalSubscriptionOption.WITH_POOLED_OBJECTS;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.fail;
 import static org.awaitility.Awaitility.await;
@@ -265,7 +264,7 @@ public void onError(Throwable throwable) {
             public void onComplete() {
                 fail("onComplete() invoked unexpectedly");
             }
-        }, WITH_POOLED_OBJECTS);
+        }, SubscriptionOption.WITH_POOLED_OBJECTS);
 
         await().untilAsserted(() -> assertThat(stream.isOpen()).isFalse());
         await().untilAsserted(() -> assertThat(data.refCnt()).isZero());
@@ -301,7 +300,7 @@ public void onError(Throwable throwable) {
             public void onComplete() {
                 fail("onComplete() invoked unexpectedly");
             }
-        }, WITH_POOLED_OBJECTS);
+        }, SubscriptionOption.WITH_POOLED_OBJECTS);
 
         await().untilAsserted(() -> assertThat(stream.isOpen()).isFalse());
         await().untilAsserted(() -> assertThat(data.refCnt()).isZero());

File: core/src/test/java/com/linecorp/armeria/common/stream/TwoElementFixedStreamMessageTest.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.linecorp.armeria.common.stream;
 
-import static com.linecorp.armeria.internal.stream.InternalSubscriptionOption.WITH_POOLED_OBJECTS;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import javax.annotation.Nullable;
@@ -40,7 +39,7 @@ void cancelOnFirstElement() {
         final TwoElementFixedStreamMessage<ByteBuf> streamMessage =
                 new TwoElementFixedStreamMessage<>(obj1, obj2);
         streamMessage.subscribe(new CancelSubscriber(1), EventLoopGroups.directEventLoop(),
-                                WITH_POOLED_OBJECTS);
+                                SubscriptionOption.WITH_POOLED_OBJECTS);
 
         assertThat(obj1.refCnt()).isZero();
         assertThat(obj2.refCnt()).isZero();
@@ -53,7 +52,7 @@ void cancelOnSecondElement() {
         final TwoElementFixedStreamMessage<ByteBuf> streamMessage =
                 new TwoElementFixedStreamMessage<>(obj1, obj2);
         streamMessage.subscribe(new CancelSubscriber(2), EventLoopGroups.directEventLoop(),
-                                WITH_POOLED_OBJECTS);
+                                SubscriptionOption.WITH_POOLED_OBJECTS);
 
         assertThat(obj1.refCnt()).isZero();
         assertThat(obj2.refCnt()).isZero();

File: core/src/test/java/com/linecorp/armeria/internal/common/DefaultHttpRequestTest.java
Patch:
@@ -40,7 +40,6 @@
 import com.linecorp.armeria.common.HttpRequestWriter;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.stream.AbortedStreamException;
-import com.linecorp.armeria.common.unsafe.PooledHttpRequest;
 
 import io.netty.buffer.PooledByteBufAllocator;
 
@@ -59,14 +58,14 @@ void abortedAggregation(boolean executorSpecified, boolean withPooledObjects, Th
         // Practically same execution, but we need to test the both case due to code duplication.
         if (executorSpecified) {
             if (withPooledObjects) {
-                future = PooledHttpRequest.of(req).aggregateWithPooledObjects(
+                future = req.aggregateWithPooledObjects(
                         CommonPools.workerGroup().next(), PooledByteBufAllocator.DEFAULT);
             } else {
                 future = req.aggregate(CommonPools.workerGroup().next());
             }
         } else {
             if (withPooledObjects) {
-                future = PooledHttpRequest.of(req).aggregateWithPooledObjects(PooledByteBufAllocator.DEFAULT);
+                future = req.aggregateWithPooledObjects(PooledByteBufAllocator.DEFAULT);
             } else {
                 future = req.aggregate();
             }

File: grpc/src/test/java/com/linecorp/armeria/internal/client/grpc/GrpcClientUnwrapTest.java
Patch:
@@ -27,7 +27,6 @@
 import com.linecorp.armeria.client.logging.LoggingClient;
 import com.linecorp.armeria.client.retry.RetryDecision;
 import com.linecorp.armeria.client.retry.RetryingClient;
-import com.linecorp.armeria.client.unsafe.PooledHttpClient;
 import com.linecorp.armeria.common.util.Unwrappable;
 import com.linecorp.armeria.grpc.testing.TestServiceGrpc.TestServiceBlockingStub;
 
@@ -50,9 +49,9 @@ void test() {
         // The outermost decorator of the client must be returned,
         // because the search begins from outside to inside.
         // In the current setup, the outermost `Unwrappable` and `Client` are
-        // `ArmeriaChannel` and `PooledHttpClient` respectively.
+        // `ArmeriaChannel` and `RetryingClient` respectively.
         assertThat(Clients.unwrap(client, Unwrappable.class)).isInstanceOf(ArmeriaChannel.class);
-        assertThat(Clients.unwrap(client, Client.class)).isInstanceOf(PooledHttpClient.class);
+        assertThat(Clients.unwrap(client, Client.class)).isInstanceOf(RetryingClient.class);
 
         assertThat(Clients.unwrap(client, DecodingClient.class)).isNull();
     }

File: thrift0.13/src/main/java/com/linecorp/armeria/server/thrift/THttpService.java
Patch:
@@ -63,7 +63,6 @@
 import com.linecorp.armeria.common.thrift.ThriftReply;
 import com.linecorp.armeria.common.thrift.ThriftSerializationFormats;
 import com.linecorp.armeria.common.unsafe.PooledHttpData;
-import com.linecorp.armeria.common.unsafe.PooledHttpRequest;
 import com.linecorp.armeria.common.util.CompletionActions;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.common.util.SafeCloseable;
@@ -354,8 +353,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
         final HttpResponse res = HttpResponse.from(responseFuture);
         ctx.logBuilder().serializationFormat(serializationFormat);
         ctx.logBuilder().defer(RequestLogProperty.REQUEST_CONTENT);
-        PooledHttpRequest.of(req).aggregateWithPooledObjects(
-                ctx.eventLoop(), ctx.alloc()).handle((aReq, cause) -> {
+        req.aggregateWithPooledObjects(ctx.eventLoop(), ctx.alloc()).handle((aReq, cause) -> {
             if (cause != null) {
                 final HttpResponse errorRes;
                 if (ctx.config().verboseResponses()) {

File: core/src/main/java/com/linecorp/armeria/client/ClientHttp2ObjectEncoder.java
Patch:
@@ -89,7 +89,8 @@ private Http2Headers convertHeaders(HttpHeaders inputHeaders) {
                                                                        : SessionProtocol.HTTP.uriText());
         }
 
-        if (!outputHeaders.contains(HttpHeaderNames.AUTHORITY)) {
+        if (!outputHeaders.contains(HttpHeaderNames.AUTHORITY) &&
+            !outputHeaders.contains(HttpHeaderNames.HOST)) {
             final InetSocketAddress remoteAddress = (InetSocketAddress) channel().remoteAddress();
             outputHeaders.add(HttpHeaderNames.AUTHORITY,
                               ArmeriaHttpUtil.authorityHeader(remoteAddress.getHostName(),

File: core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java
Patch:
@@ -514,7 +514,7 @@ public static RequestHeaders toArmeriaRequestHeaders(ChannelHandlerContext ctx,
         if (!builder.contains(HttpHeaderNames.SCHEME)) {
             builder.add(HttpHeaderNames.SCHEME, scheme);
         }
-        if (!builder.contains(HttpHeaderNames.AUTHORITY)) {
+        if (builder.authority() == null) {
             final String defaultHostname = cfg.defaultVirtualHost().defaultHostname();
             final int port = ((InetSocketAddress) ctx.channel().localAddress()).getPort();
             builder.add(HttpHeaderNames.AUTHORITY, defaultHostname + ':' + port);

File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java
Patch:
@@ -29,6 +29,8 @@
 
 import javax.annotation.Nullable;
 
+import com.google.errorprone.annotations.MustBeClosed;
+
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.common.ContentTooLargeException;
 import com.linecorp.armeria.common.HttpHeaders;
@@ -207,6 +209,7 @@ static ClientRequestContextBuilder builder(RpcRequest request, URI uri) {
      * Otherwise, this method will throw an {@link IllegalStateException}.
      */
     @Override
+    @MustBeClosed
     default SafeCloseable push() {
         final RequestContext oldCtx = RequestContextUtil.getAndSet(this);
         if (oldCtx == this) {

File: core/src/main/java/com/linecorp/armeria/common/stream/StreamWriter.java
Patch:
@@ -19,10 +19,10 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.function.Supplier;
 
-import javax.annotation.CheckReturnValue;
-
 import org.reactivestreams.Subscriber;
 
+import com.google.errorprone.annotations.CheckReturnValue;
+
 import com.linecorp.armeria.common.unsafe.PooledHttpData;
 
 import io.netty.buffer.ByteBuf;

File: core/src/main/java/com/linecorp/armeria/internal/common/Http2KeepAliveHandler.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.concurrent.TimeUnit;
 
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.NotThreadSafe;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -57,7 +56,6 @@
  * @see Flags#defaultServerIdleTimeoutMillis()
  * @see Flags#defaultPingIntervalMillis()
  */
-@NotThreadSafe
 public abstract class Http2KeepAliveHandler extends KeepAliveHandler {
 
     private static final Logger logger = LoggerFactory.getLogger(Http2KeepAliveHandler.class);

File: core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java
Patch:
@@ -32,6 +32,7 @@
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.MapMaker;
+import com.google.errorprone.annotations.MustBeClosed;
 
 import com.linecorp.armeria.common.Flags;
 import com.linecorp.armeria.common.HttpRequest;
@@ -120,6 +121,7 @@ public static void init() { /* no-op */ }
     /**
      * Returns the {@link SafeCloseable} which doesn't do anything.
      */
+    @MustBeClosed
     public static SafeCloseable noopSafeCloseable() {
         return noopSafeCloseable;
     }
@@ -196,6 +198,7 @@ public static <T extends RequestContext> T getAndSet(RequestContext ctx) {
      * eventloop might have the wrong {@link RequestContext} in the {@link RequestContextStorage},
      * so we should pop it.
      */
+    @MustBeClosed
     public static SafeCloseable pop() {
         final RequestContext oldCtx = requestContextStorage.currentOrNull();
         if (oldCtx == null) {

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java
Patch:
@@ -30,6 +30,8 @@
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 
+import com.google.errorprone.annotations.MustBeClosed;
+
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.common.ContentTooLargeException;
 import com.linecorp.armeria.common.ContextAwareScheduledExecutorService;
@@ -209,6 +211,7 @@ default ServiceRequestContext root() {
      * Otherwise, this method will throw an {@link IllegalStateException}.
      */
     @Override
+    @MustBeClosed
     default SafeCloseable push() {
         final RequestContext oldCtx = RequestContextUtil.getAndSet(this);
         if (oldCtx == this) {

File: core/src/test/java/com/linecorp/armeria/server/TestConverters.java
Patch:
@@ -38,7 +38,7 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,
                                             @Nullable Object result,
                                             HttpHeaders trailers) throws Exception {
             if (result instanceof Integer) {
-                return httpResponse(HttpData.ofUtf8("Integer: %d", result));
+                return httpResponse(HttpData.ofUtf8("Integer: %d", (Integer) result));
             }
             return ResponseConverterFunction.fallthrough();
         }

File: grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/TestServiceImpl.java
Patch:
@@ -25,10 +25,9 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 
-import javax.annotation.concurrent.GuardedBy;
-
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Queues;
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 import com.google.protobuf.ByteString;
 import com.google.protobuf.StringValue;
 

File: rxjava2/src/main/java/com/linecorp/armeria/common/rxjava2/RequestContextAssembly.java
Patch:
@@ -19,7 +19,8 @@
 import java.util.concurrent.Callable;
 
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
+
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 
 import com.linecorp.armeria.common.RequestContext;
 

File: rxjava3/src/main/java/com/linecorp/armeria/common/rxjava3/RequestContextAssembly.java
Patch:
@@ -17,7 +17,8 @@
 package com.linecorp.armeria.common.rxjava3;
 
 import javax.annotation.Nullable;
-import javax.annotation.concurrent.GuardedBy;
+
+import com.google.errorprone.annotations.concurrent.GuardedBy;
 
 import com.linecorp.armeria.common.RequestContext;
 

File: spring/boot2-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationTest.java
Patch:
@@ -44,6 +44,7 @@
 import com.linecorp.armeria.client.Clients;
 import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
+import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpMethod;
@@ -156,7 +157,7 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,
             if (result instanceof String) {
                 return HttpResponse.of(HttpStatus.OK,
                                        MediaType.ANY_TEXT_TYPE,
-                                       result.toString(),
+                                       HttpData.ofUtf8(result.toString()),
                                        trailers);
             }
             return ResponseConverterFunction.fallthrough();

File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContextWrapper.java
Patch:
@@ -100,9 +100,8 @@ public void setResponseTimeoutMillis(TimeoutMode mode, long responseTimeoutMilli
     }
 
     @Override
-    @Deprecated
-    public void setResponseTimeoutAtMillis(long responseTimeoutAtMillis) {
-        delegate().setResponseTimeoutAtMillis(responseTimeoutAtMillis);
+    public void setResponseTimeout(TimeoutMode mode, Duration responseTimeout) {
+        delegate().setResponseTimeout(mode, responseTimeout);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java
Patch:
@@ -17,6 +17,7 @@
 package com.linecorp.armeria.client;
 
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.TimeUnit;
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 
@@ -365,7 +366,7 @@ private void cancelTimeoutOrLog(@Nullable Throwable cause,
 
         void initTimeout() {
             if (responseTimeoutMillis > 0) {
-                scheduleTimeout(responseTimeoutMillis);
+                scheduleTimeoutNanos(TimeUnit.MILLISECONDS.toNanos(responseTimeoutMillis));
             }
         }
 

File: core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java
Patch:
@@ -20,6 +20,7 @@
 import static com.linecorp.armeria.internal.common.HttpHeadersUtil.mergeTrailers;
 
 import java.nio.channels.ClosedChannelException;
+import java.util.concurrent.TimeUnit;
 
 import javax.annotation.Nullable;
 
@@ -115,7 +116,7 @@ public void onSubscribe(Subscription subscription) {
         // Schedule the initial request timeout.
         final long requestTimeoutMillis = reqCtx.requestTimeoutMillis();
         if (requestTimeoutMillis > 0) {
-            scheduleTimeout(requestTimeoutMillis);
+            scheduleTimeoutNanos(TimeUnit.MILLISECONDS.toNanos(requestTimeoutMillis));
         }
 
         // Start consuming.

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContextWrapper.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.net.InetAddress;
 import java.net.SocketAddress;
+import java.time.Duration;
 import java.util.Map;
 import java.util.function.Consumer;
 
@@ -132,9 +133,8 @@ public void setRequestTimeoutMillis(TimeoutMode mode, long requestTimeoutMillis)
     }
 
     @Override
-    @Deprecated
-    public void setRequestTimeoutAtMillis(long requestTimeoutAtMillis) {
-        delegate().setRequestTimeoutAtMillis(requestTimeoutAtMillis);
+    public void setRequestTimeout(TimeoutMode mode, Duration requestTimeout) {
+        delegate().setRequestTimeout(mode, requestTimeout);
     }
 
     @Nullable

File: core/src/main/java/com/linecorp/armeria/common/unsafe/PooledHttpRequest.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.concurrent.CompletableFuture;
 
 import com.linecorp.armeria.common.AggregatedHttpRequest;
+import com.linecorp.armeria.common.HttpObject;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.util.EventLoopCheckingFuture;
@@ -33,7 +34,7 @@
 /**
  * A streamed HTTP/2 {@link Request} which returns pooled buffers.
  */
-public interface PooledHttpRequest extends HttpRequest, PooledHttpStreamMessage {
+public interface PooledHttpRequest extends HttpRequest, PooledStreamMessage<HttpObject> {
 
     /**
      * Returns a {@link PooledHttpRequest} that wraps the {@link HttpRequest}, ensuring all published data

File: core/src/main/java/com/linecorp/armeria/common/unsafe/PooledHttpResponse.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.concurrent.CompletableFuture;
 
 import com.linecorp.armeria.common.AggregatedHttpResponse;
+import com.linecorp.armeria.common.HttpObject;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.Response;
 import com.linecorp.armeria.common.util.EventLoopCheckingFuture;
@@ -33,7 +34,7 @@
 /**
  * A streamed HTTP/2 {@link Response} which returns pooled buffers.
  */
-public interface PooledHttpResponse extends HttpResponse, PooledHttpStreamMessage {
+public interface PooledHttpResponse extends HttpResponse, PooledStreamMessage<HttpObject> {
 
     /**
      * Returns a {@link PooledHttpResponse} that wraps the {@link HttpResponse}, ensuring all published data

File: core/src/test/java/com/linecorp/armeria/common/unsafe/PooledStreamMessageTest.java
Patch:
@@ -32,7 +32,7 @@
 import io.netty.buffer.ByteBufAllocator;
 import io.netty.buffer.ByteBufUtil;
 
-class PooledHttpStreamMessageTest {
+class PooledStreamMessageTest {
 
     @Test
     void subscribeWithPooledObjects() {

File: core/src/test/java/com/linecorp/armeria/common/logging/LoggingDecoratorBuilderTest.java
Patch:
@@ -78,7 +78,7 @@ void logger() {
     void requestLog() {
         assertThatThrownBy(() -> builder.requestLogLevel(null))
                 .isInstanceOf(NullPointerException.class);
-        assertThat(builder.requestLogLevel()).isEqualTo(LogLevel.TRACE);
+        assertThat(builder.requestLogLevel()).isEqualTo(LogLevel.DEBUG);
 
         builder.requestLogLevel(LogLevel.ERROR);
         assertThat(builder.requestLogLevel()).isEqualTo(LogLevel.ERROR);
@@ -88,7 +88,7 @@ void requestLog() {
     public void successfulResponseLogLevel() {
         assertThatThrownBy(() -> builder.successfulResponseLogLevel(null))
                 .isInstanceOf(NullPointerException.class);
-        assertThat(builder.successfulResponseLogLevel()).isEqualTo(LogLevel.TRACE);
+        assertThat(builder.successfulResponseLogLevel()).isEqualTo(LogLevel.DEBUG);
 
         builder.successfulResponseLogLevel(LogLevel.ERROR);
         assertThat(builder.successfulResponseLogLevel()).isEqualTo(LogLevel.ERROR);

File: core/src/test/java/com/linecorp/armeria/server/logging/LoggingServiceTest.java
Patch:
@@ -79,7 +79,7 @@ void defaultsSuccess() throws Exception {
                               .newDecorator().apply(delegate);
 
         service.serve(ctx, ctx.request());
-        verify(logger, times(2)).isTraceEnabled();
+        verify(logger, times(2)).isDebugEnabled();
     }
 
     @Test
@@ -98,7 +98,7 @@ void defaultsError() throws Exception {
 
         service.serve(ctx, ctx.request());
 
-        verify(logger, times(2)).isTraceEnabled();
+        verify(logger, times(2)).isDebugEnabled();
         verify(logger).isWarnEnabled();
         verify(logger).warn(eq(REQUEST_FORMAT), same(ctx),
                             matches(".*headers=\\[:method=GET, :path=/].*"));

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClientBuilderTest.java
Patch:
@@ -27,7 +27,7 @@ class CircuitBreakerClientBuilderTest {
     @Test
     void buildWithMaxContentLength() {
         final CircuitBreakerRuleWithContent<HttpResponse> rule =
-                CircuitBreakerRuleWithContent.onResponse(unused -> null);
+                CircuitBreakerRuleWithContent.onResponse((unused1, unused2) -> null);
         assertThatThrownBy(() -> CircuitBreakerClient.builder(rule, 0))
                   .isInstanceOf(IllegalArgumentException.class)
                   .hasMessageContaining("maxContentLength: 0 (expected: > 0)");

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClientRuleTest.java
Patch:
@@ -58,7 +58,7 @@ void openCircuitWithContent() {
         final CircuitBreakerRuleWithContent<HttpResponse> rule =
                 CircuitBreakerRuleWithContent
                         .<HttpResponse>builder()
-                        .onResponse(response -> {
+                        .onResponse((unused, response) -> {
                             return response.aggregate()
                                            .thenApply(content -> content.contentUtf8().contains("Hello"));
                         })
@@ -98,7 +98,7 @@ void openCircuitWithStatus() {
     void openCircuitWithTrailer() {
         final CircuitBreakerRule rule =
                 CircuitBreakerRule.builder()
-                                  .onResponseTrailers(trailers -> trailers.containsInt("grpc-status", 3))
+                                  .onResponseTrailers((ctx, trailers) -> trailers.containsInt("grpc-status", 3))
                                   .thenFailure();
 
         final WebClient client =

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRuleWithContentBuilderTest.java
Patch:
@@ -59,9 +59,9 @@ void shouldReportAsWithContent(String message, CircuitBreakerDecision decision)
         final CircuitBreakerRuleWithContent<HttpResponse> rule =
                 CircuitBreakerRuleWithContent
                         .<HttpResponse>builder()
-                        .onResponse(response -> response.aggregate().thenApply(content -> false))
-                        .onResponse(response -> response.aggregate().thenApply(content -> false))
-                        .onResponse(response -> {
+                        .onResponse((unused, response) -> response.aggregate().thenApply(content -> false))
+                        .onResponse((unused, response) -> response.aggregate().thenApply(content -> false))
+                        .onResponse((unused, response) -> {
                             return response.aggregate()
                                            .thenApply(content -> content.contentUtf8().contains(message));
                         })

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientBuilderTest.java
Patch:
@@ -43,7 +43,8 @@ void contentPreviewLengthCannotBeZero() {
 
     @Test
     void buildWithMaxContentLength() {
-        final RetryRuleWithContent<HttpResponse> rule = RetryRuleWithContent.onResponse(unused -> null);
+        final RetryRuleWithContent<HttpResponse> rule =
+                RetryRuleWithContent.onResponse((unused1, unused2) -> null);
 
         RetryingClient.builder(rule, 1);
         RetryingClient.builder(rule).contentPreviewLength(10);

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientWithLoggingTest.java
Patch:
@@ -107,7 +107,7 @@ void init() {
     void retryingThenLogging() throws InterruptedException {
         successLogIndex = 3;
         final RetryRuleWithContent<HttpResponse> retryRule =
-                RetryRuleWithContent.onResponse(response -> {
+                RetryRuleWithContent.onResponse((unused, response) -> {
                     return response.aggregate().thenApply(content -> !"hello".equals(content.contentUtf8()));
                 });
 

File: core/src/main/java/com/linecorp/armeria/common/stream/DeferredStreamMessage.java
Patch:
@@ -66,7 +66,7 @@ public class DeferredStreamMessage<T> extends AbstractStreamMessage<T> {
             DeferredStreamMessage.class, Throwable.class, "abortCause");
 
     @Nullable
-    @SuppressWarnings("unused") // Updated only via delegateUpdater
+    @SuppressWarnings("unused") // Updated only via upstreamUpdater
     private volatile StreamMessage<T> upstream;
 
     // Only accessed from subscription's executor.

File: core/src/test/java/com/linecorp/armeria/server/file/HttpFileTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.junit.Test;
 
+import com.linecorp.armeria.common.CommonPools;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.MediaType;
@@ -41,7 +42,7 @@ public void additionalHeaders() throws Exception {
         assertThat(((AbstractHttpFile) f).contentType()).isNull();
 
         // Make sure all additional headers are set as expected.
-        final HttpHeaders headers = f.readHeaders();
+        final HttpHeaders headers = f.readHeaders(CommonPools.blockingTaskExecutor()).join();
         assertThat(headers).isNotNull();
         assertThat(headers.getAll(HttpHeaderNames.of("foo"))).containsExactly("1", "2");
         assertThat(headers.getAll(HttpHeaderNames.of("bar"))).containsExactly("3");
@@ -54,7 +55,7 @@ public void additionalHeaders() throws Exception {
     @Test
     public void leadingSlashInResourcePath() throws Exception {
         final HttpFile f = HttpFile.of(ClassLoader.getSystemClassLoader(), "/java/lang/Object.class");
-        final HttpFileAttributes attrs = f.readAttributes();
+        final HttpFileAttributes attrs = f.readAttributes(CommonPools.blockingTaskExecutor()).join();
         assertThat(attrs).isNotNull();
         assertThat(attrs.length()).isPositive();
     }

File: core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java
Patch:
@@ -440,6 +440,7 @@ public void onError(Throwable t) {
                 public void onComplete() {}
             }, ctx.channel().eventLoop());
 
+            responseDecoder.reserveUnfinishedResponse(Integer.MAX_VALUE);
             // NB: No need to set the response timeout because we have session creation timeout.
             responseDecoder.addResponse(0, res, null, ctx.channel().eventLoop(), /* response timeout */ 0,
                                         UPGRADE_RESPONSE_MAX_LENGTH);

File: core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java
Patch:
@@ -96,6 +96,7 @@ final HttpResponseWrapper removeResponse(int id) {
         final HttpResponseWrapper removed = responses.remove(id);
         if (removed != null) {
             unfinishedResponses--;
+            assert unfinishedResponses >= 0 : unfinishedResponses;
         }
         return removed;
     }

File: core/src/test/java/com/linecorp/armeria/client/HttpSessionHandlerTest.java
Patch:
@@ -39,6 +39,7 @@ void connectionTimeoutBeforeSettingsFrameIsSent() throws Exception {
              ClientFactory clientFactory =
                      ClientFactory.builder()
                                   .idleTimeoutMillis(1000)
+                                  .useHttp2Preface(true)
                                   .build()) {
             final int port = ss.getLocalPort();
             final WebClient client = WebClient.builder("h2c://127.0.0.1:" + port)

File: core/src/main/java/com/linecorp/armeria/client/endpoint/EndpointGroup.java
Patch:
@@ -140,7 +140,7 @@ static EndpointGroup of(EndpointSelectionStrategy selectionStrategy,
      *         or {@code null} if this {@link EndpointGroup} is empty.
      */
     @Override
-    Endpoint select(ClientRequestContext ctx);
+    Endpoint selectNow(ClientRequestContext ctx);
 
     /**
      * Returns a {@link CompletableFuture} which is completed when the initial {@link Endpoint}s are ready.

File: core/src/main/java/com/linecorp/armeria/client/endpoint/WeightedRoundRobinStrategy.java
Patch:
@@ -51,18 +51,19 @@ public EndpointSelector newSelector(EndpointGroup endpointGroup) {
      *   <li>if endpoint weights are 3,5,7, then select result is abcabcabcbcbcbb abcabcabcbcbcbb ...</li>
      * </ul>
      */
-    private static final class WeightedRoundRobinSelector implements EndpointSelector {
+    private static final class WeightedRoundRobinSelector extends AbstractEndpointSelector {
 
         private final AtomicInteger sequence = new AtomicInteger();
         private volatile EndpointsAndWeights endpointsAndWeights;
 
         WeightedRoundRobinSelector(EndpointGroup endpointGroup) {
+            super(endpointGroup);
             endpointsAndWeights = new EndpointsAndWeights(endpointGroup.endpoints());
             endpointGroup.addListener(endpoints -> endpointsAndWeights = new EndpointsAndWeights(endpoints));
         }
 
         @Override
-        public Endpoint select(ClientRequestContext ctx) {
+        public Endpoint selectNow(ClientRequestContext ctx) {
             final int currentSequence = sequence.getAndIncrement();
             return endpointsAndWeights.selectEndpoint(currentSequence);
         }

File: core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java
Patch:
@@ -293,7 +293,7 @@ protected static ClientRequestContext newDerivedContext(ClientRequestContext ctx
         final EndpointGroup endpointGroup = ctx.endpointGroup();
         final ClientRequestContext derived;
         if (endpointGroup != null && !initialAttempt) {
-            derived = ctx.newDerivedContext(id, req, rpcReq, endpointGroup.select(ctx));
+            derived = ctx.newDerivedContext(id, req, rpcReq, endpointGroup.selectNow(ctx));
         } else {
             derived = ctx.newDerivedContext(id, req, rpcReq);
         }

File: core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java
Patch:
@@ -222,10 +222,10 @@ private static boolean isValidPath(HttpRequest req) {
     private static void handleEarlyRequestException(ClientRequestContext ctx,
                                                     HttpRequest req, Throwable cause) {
         try (SafeCloseable ignored = RequestContextUtil.pop()) {
+            req.abort(cause);
             final RequestLogBuilder logBuilder = ctx.logBuilder();
             logBuilder.endRequest(cause);
             logBuilder.endResponse(cause);
-            req.abort(cause);
         }
     }
 

File: core/src/main/java/com/linecorp/armeria/client/logging/ContentPreviewingClient.java
Patch:
@@ -36,6 +36,7 @@
 import com.linecorp.armeria.common.logging.ContentPreviewerFactory;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogAccess;
+import com.linecorp.armeria.common.logging.RequestLogProperty;
 
 /**
  * Decorates an {@link HttpClient} to preview the content of {@link Request}s and {@link Response}s.
@@ -118,7 +119,7 @@ public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Ex
                 contentPreviewerFactory.requestContentPreviewer(ctx, req.headers());
         req = setUpRequestContentPreviewer(ctx, req, requestContentPreviewer);
 
-        ctx.logBuilder().deferResponseContentPreview();
+        ctx.logBuilder().defer(RequestLogProperty.RESPONSE_CONTENT_PREVIEW);
         final HttpResponse res = unwrap().execute(ctx, req);
         return setUpResponseContentPreviewer(contentPreviewerFactory, ctx, res);
     }

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java
Patch:
@@ -309,12 +309,12 @@ private void handleResponse(ClientRequestContext ctx, HttpRequestDuplicator root
     private static void handleException(ClientRequestContext ctx, HttpRequestDuplicator rootReqDuplicator,
                                         CompletableFuture<HttpResponse> future, Throwable cause,
                                         boolean endRequestLog) {
+        future.completeExceptionally(cause);
+        rootReqDuplicator.abort(cause);
         if (endRequestLog) {
             ctx.logBuilder().endRequest(cause);
         }
         ctx.logBuilder().endResponse(cause);
-        future.completeExceptionally(cause);
-        rootReqDuplicator.abort(cause);
     }
 
     private BiFunction<RetryDecision, Throwable, Void> handleBackoff(

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java
Patch:
@@ -161,10 +161,10 @@ private static void onRetryComplete(ClientRequestContext ctx, ClientRequestConte
 
     private static void handleException(ClientRequestContext ctx, CompletableFuture<RpcResponse> future,
                                         Throwable cause, boolean endRequestLog) {
+        future.completeExceptionally(cause);
         if (endRequestLog) {
             ctx.logBuilder().endRequest(cause);
         }
         ctx.logBuilder().endResponse(cause);
-        future.completeExceptionally(cause);
     }
 }

File: core/src/main/java/com/linecorp/armeria/internal/logging/ContentPreviewingUtil.java
Patch:
@@ -34,6 +34,7 @@
 import com.linecorp.armeria.common.logging.ContentPreviewer;
 import com.linecorp.armeria.common.logging.ContentPreviewerFactory;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
+import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.internal.common.ArmeriaHttpUtil;
 
 public final class ContentPreviewingUtil {
@@ -52,7 +53,7 @@ public static HttpRequest setUpRequestContentPreviewer(RequestContext ctx, HttpR
         }
 
         final RequestLogBuilder logBuilder = ctx.logBuilder();
-        logBuilder.deferRequestContentPreview();
+        logBuilder.defer(RequestLogProperty.REQUEST_CONTENT_PREVIEW);
         req.whenComplete().handle((unused, unused1) -> {
             // The HttpRequest cannot be subscribed so call requestContentPreview(null) to make sure that the
             // log is complete.

File: core/src/main/java/com/linecorp/armeria/server/DecodedHttpRequest.java
Patch:
@@ -104,17 +104,17 @@ public boolean tryWrite(HttpObject obj) {
 
         final boolean published;
         if (obj instanceof HttpHeaders) { // HTTP trailers.
-            ctx.logBuilder().requestTrailers((HttpHeaders) obj);
             published = super.tryWrite(obj);
+            ctx.logBuilder().requestTrailers((HttpHeaders) obj);
             // Close this stream because HTTP trailers is the last element of the request.
             close();
         } else {
             final HttpData httpData = (HttpData) obj;
-            ctx.logBuilder().increaseRequestLength(httpData);
             published = super.tryWrite(httpData);
             if (published) {
                 inboundTrafficController.inc(httpData.length());
             }
+            ctx.logBuilder().increaseRequestLength(httpData);
         }
 
         return published;

File: core/src/main/java/com/linecorp/armeria/server/logging/ContentPreviewingService.java
Patch:
@@ -33,6 +33,7 @@
 import com.linecorp.armeria.common.logging.ContentPreviewerFactory;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogAccess;
+import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.SimpleDecoratingHttpService;
@@ -118,7 +119,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
                 contentPreviewerFactory.requestContentPreviewer(ctx, req.headers());
         req = setUpRequestContentPreviewer(ctx, req, requestContentPreviewer);
 
-        ctx.logBuilder().deferResponseContentPreview();
+        ctx.logBuilder().defer(RequestLogProperty.RESPONSE_CONTENT_PREVIEW);
         final HttpResponse res = unwrap().serve(ctx, req);
         return setUpResponseContentPreviewer(contentPreviewerFactory, ctx, res);
     }

File: core/src/test/java/com/linecorp/armeria/client/HttpClientMaxConcurrentStreamTest.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.net.ConnectException;
 import java.net.InetSocketAddress;
+import java.net.SocketException;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Queue;
@@ -275,6 +276,8 @@ void exceededMaxStreamsPropagatesFailureCorrectly() throws Exception {
                     assertThat(throwable.getCause().getCause()).satisfiesAnyOf(
                             e -> assertThat(e).isInstanceOf(ClosedSessionException.class),
                             e -> assertThat(e).isInstanceOf(ConnectException.class)
+                                              .hasMessageContaining("reset by peer"),
+                            e -> assertThat(e).isInstanceOf(SocketException.class)
                                               .hasMessageContaining("reset by peer"));
                 });
     }

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientWithLoggingTest.java
Patch:
@@ -65,8 +65,7 @@ protected void configure(ServerBuilder sb) throws Exception {
                 final AtomicInteger reqCount = new AtomicInteger();
 
                 @Override
-                protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)
-                        throws Exception {
+                protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) {
                     ctx.mutateAdditionalResponseTrailers(
                             mutator -> mutator.add(HttpHeaderNames.of("foo"), "bar"));
                     if (reqCount.getAndIncrement() < 1) {

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaChannel.java
Patch:
@@ -37,6 +37,7 @@
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.grpc.GrpcJsonMarshaller;
+import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.common.util.SystemInfo;
 import com.linecorp.armeria.common.util.Unwrappable;
 
@@ -96,8 +97,8 @@ public <I, O> ClientCall<I, O> newCall(
         final int methodIndex = fullMethodName.lastIndexOf('/') + 1;
         ctx.logBuilder().name(method.getServiceName(), fullMethodName.substring(methodIndex));
         ctx.logBuilder().serializationFormat(serializationFormat);
-        ctx.logBuilder().deferRequestContent();
-        ctx.logBuilder().deferResponseContent();
+        ctx.logBuilder().defer(RequestLogProperty.REQUEST_CONTENT,
+                               RequestLogProperty.RESPONSE_CONTENT);
 
         final ClientOptions options = options();
         final int maxOutboundMessageSizeBytes = options.get(GrpcClientOptions.MAX_OUTBOUND_MESSAGE_SIZE_BYTES);

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/FramedGrpcService.java
Patch:
@@ -49,6 +49,7 @@
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer;
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
+import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.common.unsafe.PooledHttpRequest;
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.common.util.TimeoutMode;
@@ -196,8 +197,8 @@ protected HttpResponse doPost(ServiceRequestContext ctx, PooledHttpRequest req)
 
         final int methodIndex = methodName.lastIndexOf('/') + 1;
         ctx.logBuilder().name(method.getMethodDescriptor().getServiceName(), methodName.substring(methodIndex));
-        ctx.logBuilder().deferRequestContent();
-        ctx.logBuilder().deferResponseContent();
+        ctx.logBuilder().defer(RequestLogProperty.REQUEST_CONTENT,
+                               RequestLogProperty.RESPONSE_CONTENT);
 
         final HttpResponseWriter res = HttpResponse.streaming();
         final ArmeriaServerCall<?, ?> call = startCall(

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/UnframedGrpcService.java
Patch:
@@ -44,6 +44,7 @@
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer.Listener;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageFramer;
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
+import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.common.unsafe.PooledHttpData;
 import com.linecorp.armeria.common.unsafe.PooledHttpRequest;
 import com.linecorp.armeria.internal.common.grpc.GrpcStatus;
@@ -170,8 +171,8 @@ public HttpResponse serve(
         // clear the header if it's present.
         grpcHeaders.remove(GrpcHeaderNames.GRPC_ACCEPT_ENCODING);
 
-        ctx.logBuilder().deferRequestContent();
-        ctx.logBuilder().deferResponseContent();
+        ctx.logBuilder().defer(RequestLogProperty.REQUEST_CONTENT,
+                               RequestLogProperty.RESPONSE_CONTENT);
 
         final CompletableFuture<HttpResponse> responseFuture = new CompletableFuture<>();
         req.aggregateWithPooledObjects(ctx.eventLoop(), ctx.alloc()).handle((clientRequest, t) -> {

File: thrift/src/main/java/com/linecorp/armeria/internal/client/thrift/THttpClientDelegate.java
Patch:
@@ -57,6 +57,7 @@
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;
 import com.linecorp.armeria.common.SerializationFormat;
+import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.common.thrift.ThriftCall;
 import com.linecorp.armeria.common.thrift.ThriftProtocolFactories;
 import com.linecorp.armeria.common.thrift.ThriftReply;
@@ -144,7 +145,7 @@ public RpcResponse execute(ClientRequestContext ctx, RpcRequest call) {
                     PooledHttpData.wrap(buf).withEndOfStream());
 
             ctx.updateRequest(httpReq);
-            ctx.logBuilder().deferResponseContent();
+            ctx.logBuilder().defer(RequestLogProperty.RESPONSE_CONTENT);
 
             assert unwrap() instanceof PooledHttpClient;
             final PooledHttpClient client = (PooledHttpClient) unwrap();

File: spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaServerConfigurator.java
Patch:
@@ -24,8 +24,7 @@
 
 /**
  * Interface used to configure a service on the default armeria server. Can be
- * used to register arbitrary services. When possible, it is usually preferable
- * to use convenience beans like {@link ThriftServiceRegistrationBean}.
+ * used to register arbitrary services.
  */
 @FunctionalInterface
 public interface ArmeriaServerConfigurator extends Ordered {

File: thrift/src/main/java/com/linecorp/armeria/internal/client/thrift/DefaultTHttpClient.java
Patch:
@@ -63,8 +63,9 @@ private RpcResponse execute0(
         pathAndQuery.storeInCache(path);
 
         final RpcRequest call = RpcRequest.of(serviceType, method, args);
-        return execute(HttpMethod.POST, pathAndQuery.path(), null, serviceName, call,
-                       (ctx, cause) -> RpcResponse.ofFailure(cause));
+
+        return execute(HttpMethod.POST, scheme().sessionProtocol(), pathAndQuery.path(), null, serviceName,
+                       call, (ctx, cause) -> RpcResponse.ofFailure(cause));
     }
 
     @Override

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java
Patch:
@@ -27,7 +27,6 @@
 
 import javax.annotation.Nullable;
 
-import org.curioswitch.common.protobuf.json.MessageMarshaller;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -41,6 +40,7 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.RequestHeadersBuilder;
 import com.linecorp.armeria.common.SerializationFormat;
+import com.linecorp.armeria.common.grpc.GrpcJsonMarshaller;
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer.DeframedMessage;
@@ -131,7 +131,7 @@ final class ArmeriaClientCall<I, O> extends ClientCall<I, O>
             CompressorRegistry compressorRegistry,
             DecompressorRegistry decompressorRegistry,
             SerializationFormat serializationFormat,
-            @Nullable MessageMarshaller jsonMarshaller,
+            @Nullable GrpcJsonMarshaller jsonMarshaller,
             boolean unsafeWrapResponseBuffers,
             String advertisedEncodingsHeader) {
         this.ctx = ctx;

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java
Patch:
@@ -31,7 +31,6 @@
 
 import javax.annotation.Nullable;
 
-import org.curioswitch.common.protobuf.json.MessageMarshaller;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -46,6 +45,7 @@
 import com.linecorp.armeria.common.HttpResponseWriter;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.SerializationFormat;
+import com.linecorp.armeria.common.grpc.GrpcJsonMarshaller;
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
 import com.linecorp.armeria.common.grpc.ThrowableProto;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer;
@@ -152,7 +152,7 @@ final class ArmeriaServerCall<I, O> extends ServerCall<I, O>
                       int maxOutboundMessageSizeBytes,
                       ServiceRequestContext ctx,
                       SerializationFormat serializationFormat,
-                      @Nullable MessageMarshaller jsonMarshaller,
+                      @Nullable GrpcJsonMarshaller jsonMarshaller,
                       boolean unsafeWrapRequestBuffers,
                       boolean useBlockingTaskExecutor,
                       ResponseHeaders defaultHeaders) {

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/ArmeriaServerCallTest.java
Patch:
@@ -51,6 +51,7 @@
 import com.linecorp.armeria.grpc.testing.Messages.SimpleRequest;
 import com.linecorp.armeria.grpc.testing.Messages.SimpleResponse;
 import com.linecorp.armeria.grpc.testing.TestServiceGrpc;
+import com.linecorp.armeria.internal.common.grpc.DefaultJsonMarshaller;
 import com.linecorp.armeria.internal.common.grpc.GrpcTestUtil;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.testing.junit4.common.EventLoopRule;
@@ -114,7 +115,7 @@ public void setUp() {
                 MAX_MESSAGE_BYTES,
                 ctx,
                 GrpcSerializationFormats.PROTO,
-                MessageMarshaller.builder().build(),
+                new DefaultJsonMarshaller(MessageMarshaller.builder().build()),
                 false,
                 false,
                 ResponseHeaders.builder(HttpStatus.OK)
@@ -169,7 +170,7 @@ public void messageRead_wrappedByteBuf() {
                 MAX_MESSAGE_BYTES,
                 ctx,
                 GrpcSerializationFormats.PROTO,
-                MessageMarshaller.builder().build(),
+                new DefaultJsonMarshaller(MessageMarshaller.builder().build()),
                 true,
                 false,
                 ResponseHeaders.builder(HttpStatus.OK)

File: core/src/main/java/com/linecorp/armeria/common/HttpStatus.java
Patch:
@@ -510,7 +510,7 @@ public boolean isRedirection() {
     }
 
     /**
-     *  Returns whether the {@link HttpStatus} is a client error, with a status code of 4XX.
+     * Returns whether the {@link HttpStatus} is a client error, with a status code of 4XX.
      */
     public boolean isClientError() {
         return codeClass == HttpStatusClass.CLIENT_ERROR;

File: annotation-processor/src/main/java/com/linecorp/armeria/server/annotation/processor/DocumentationProcessor.java
Patch:
@@ -35,6 +35,8 @@
 import javax.annotation.processing.AbstractProcessor;
 import javax.annotation.processing.RoundEnvironment;
 import javax.annotation.processing.SupportedAnnotationTypes;
+import javax.annotation.processing.SupportedSourceVersion;
+import javax.lang.model.SourceVersion;
 import javax.lang.model.element.ElementKind;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
@@ -61,6 +63,7 @@
         "com.linecorp.armeria.server.annotation.Options",
         "com.linecorp.armeria.server.annotation.Patch",
 })
+@SupportedSourceVersion(SourceVersion.RELEASE_8)
 public class DocumentationProcessor extends AbstractProcessor {
     private static final Splitter LINEBREAK_SPLITTER = Splitter.on(Pattern.compile("\\R"))
                                                                .trimResults()

File: benchmarks/src/jmh/java/com/linecorp/armeria/thrift/PooledResponseBufferBenchmark.java
Patch:
@@ -71,7 +71,7 @@ private PooledDecoratingService(HttpService delegate) {
 
         @Override
         public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
-            final HttpResponse res = delegate().serve(ctx, req);
+            final HttpResponse res = unwrap().serve(ctx, req);
             final HttpResponseWriter decorated = HttpResponse.streaming();
             res.subscribe(new Subscriber<HttpObject>() {
                 @Override
@@ -106,7 +106,7 @@ private UnpooledDecoratingService(HttpService delegate) {
 
         @Override
         public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
-            final HttpResponse res = delegate().serve(ctx, req);
+            final HttpResponse res = unwrap().serve(ctx, req);
             final HttpResponseWriter decorated = HttpResponse.streaming();
             res.subscribe(new Subscriber<HttpObject>() {
                 @Override

File: brave/src/main/java/com/linecorp/armeria/client/brave/BraveClient.java
Patch:
@@ -113,7 +113,7 @@ public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Ex
         // For no-op spans, we only need to inject into headers and don't set any other attributes.
         if (span.isNoop()) {
             try (SpanInScope ignored = tracer.withSpanInScope(span)) {
-                return delegate().execute(ctx, req);
+                return unwrap().execute(ctx, req);
             }
         }
 
@@ -164,7 +164,7 @@ public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Ex
         });
 
         try (SpanInScope ignored = tracer.withSpanInScope(span)) {
-            return delegate().execute(ctx, req);
+            return unwrap().execute(ctx, req);
         }
     }
 

File: brave/src/main/java/com/linecorp/armeria/internal/common/brave/TraceContextUtil.java
Patch:
@@ -18,8 +18,6 @@
 
 import static java.util.Objects.requireNonNull;
 
-import java.util.Collections;
-
 import javax.annotation.Nullable;
 
 import com.google.common.annotations.VisibleForTesting;
@@ -56,7 +54,7 @@ public static void ensureScopeUsesRequestContext(Tracing tracing) {
         final PingPongExtra extra = new PingPongExtra();
         // trace contexts are not recorded until Tracer.toSpan, so this won't end up as junk data
         final TraceContext dummyContext = TraceContext.newBuilder().traceId(1).spanId(1)
-                                                      .extra(Collections.singletonList(extra)).build();
+                                                      .addExtra(extra).build();
         final boolean scopeUsesRequestContext;
         try (Scope scope = tracing.currentTraceContext().newScope(dummyContext)) {
             scopeUsesRequestContext = extra.isPong();

File: brave/src/main/java/com/linecorp/armeria/server/brave/BraveService.java
Patch:
@@ -81,7 +81,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
         // For no-op spans, nothing special to do.
         if (span.isNoop()) {
             try (SpanInScope ignored = tracer.withSpanInScope(span)) {
-                return delegate().serve(ctx, req);
+                return unwrap().serve(ctx, req);
             }
         }
 
@@ -100,12 +100,12 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
             }
 
             final HttpServerResponse braveRes =
-                ServiceRequestContextAdapter.asHttpServerResponse(log, braveReq);
+                    ServiceRequestContextAdapter.asHttpServerResponse(log, braveReq);
             handler.handleSend(braveRes, span);
         });
 
         try (SpanInScope ignored = tracer.withSpanInScope(span)) {
-            return delegate().serve(ctx, req);
+            return unwrap().serve(ctx, req);
         }
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/FunctionalDecoratingHttpClient.java
Patch:
@@ -41,11 +41,11 @@ final class FunctionalDecoratingHttpClient extends SimpleDecoratingHttpClient {
 
     @Override
     public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {
-        return function.execute(delegate(), ctx, req);
+        return function.execute((HttpClient) unwrap(), ctx, req);
     }
 
     @Override
     public String toString() {
-        return FunctionalDecoratingHttpClient.class.getSimpleName() + '(' + delegate() + ", " + function + ')';
+        return FunctionalDecoratingHttpClient.class.getSimpleName() + '(' + unwrap() + ", " + function + ')';
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/FunctionalDecoratingRpcClient.java
Patch:
@@ -41,11 +41,11 @@ final class FunctionalDecoratingRpcClient extends SimpleDecoratingRpcClient {
 
     @Override
     public RpcResponse execute(ClientRequestContext ctx, RpcRequest req) throws Exception {
-        return function.execute(delegate(), ctx, req);
+        return function.execute((RpcClient) unwrap(), ctx, req);
     }
 
     @Override
     public String toString() {
-        return FunctionalDecoratingRpcClient.class.getSimpleName() + '(' + delegate() + ", " + function + ')';
+        return FunctionalDecoratingRpcClient.class.getSimpleName() + '(' + unwrap() + ", " + function + ')';
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/WebClient.java
Patch:
@@ -384,4 +384,7 @@ default HttpResponse delete(String path) {
     default HttpResponse trace(String path) {
         return execute(RequestHeaders.of(HttpMethod.TRACE, path));
     }
+
+    @Override
+    HttpClient unwrap();
 }

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/AbstractCircuitBreakerClient.java
Patch:
@@ -126,7 +126,7 @@ public O execute(ClientRequestContext ctx, I req) throws Exception {
             circuitBreaker = mapping.get(ctx, req);
         } catch (Throwable t) {
             logger.warn("Failed to get a circuit breaker from mapping", t);
-            return delegate().execute(ctx, req);
+            return unwrap().execute(ctx, req);
         }
 
         if (circuitBreaker.canRequest()) {

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.java
Patch:
@@ -245,7 +245,7 @@ protected HttpResponse doExecute(ClientRequestContext ctx, HttpRequest req, Circ
         final CircuitBreakerRule rule = needsContentInRule ? fromRuleWithContent() : rule();
         final HttpResponse response;
         try {
-            response = delegate().execute(ctx, req);
+            response = unwrap().execute(ctx, req);
         } catch (Throwable cause) {
             reportSuccessOrFailure(circuitBreaker, rule.shouldReportAsSuccess(ctx, cause));
             throw cause;

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRpcClient.java
Patch:
@@ -128,7 +128,7 @@ protected RpcResponse doExecute(ClientRequestContext ctx, RpcRequest req, Circui
             throws Exception {
         final RpcResponse response;
         try {
-            response = delegate().execute(ctx, req);
+            response = unwrap().execute(ctx, req);
         } catch (Throwable cause) {
             reportSuccessOrFailure(circuitBreaker, ruleWithContent().shouldReportAsSuccess(
                     ctx, null, cause));

File: core/src/main/java/com/linecorp/armeria/client/encoding/DecodingClient.java
Patch:
@@ -80,14 +80,14 @@ public static Function<? super HttpClient, DecodingClient> newDecorator(
     public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {
         if (req.headers().contains(HttpHeaderNames.ACCEPT_ENCODING)) {
             // Client specified encoding, so we don't do anything automatically.
-            return delegate().execute(ctx, req);
+            return unwrap().execute(ctx, req);
         }
 
         req = req.withHeaders(req.headers().toBuilder()
                                  .set(HttpHeaderNames.ACCEPT_ENCODING, acceptEncodingHeader));
         ctx.updateRequest(req);
 
-        final HttpResponse res = delegate().execute(ctx, req);
+        final HttpResponse res = unwrap().execute(ctx, req);
         return new HttpDecodedResponse(res, decoderFactories, ctx.alloc());
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HttpHealthChecker.java
Patch:
@@ -144,7 +144,7 @@ public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Ex
                 ctx.setResponseTimeoutMillis(TimeoutMode.EXTEND,
                                              TimeUnit.SECONDS.toMillis(maxLongPollingSeconds));
             }
-            return delegate().execute(ctx, req);
+            return unwrap().execute(ctx, req);
         }
     }
 

File: core/src/main/java/com/linecorp/armeria/client/limit/AbstractConcurrencyLimitingClient.java
Patch:
@@ -147,7 +147,7 @@ private O unlimitedExecute(ClientRequestContext ctx, I req) throws Exception {
         numActiveRequests.incrementAndGet();
         boolean success = false;
         try {
-            final O res = delegate().execute(ctx, req);
+            final O res = unwrap().execute(ctx, req);
             res.whenComplete().handle((unused, cause) -> {
                 numActiveRequests.decrementAndGet();
                 return null;
@@ -234,7 +234,7 @@ public void run() {
 
             try (SafeCloseable ignored = ctx.replace()) {
                 try {
-                    final O actualRes = delegate().execute(ctx, req);
+                    final O actualRes = unwrap().execute(ctx, req);
                     actualRes.whenComplete().handleAsync((unused, cause) -> {
                         numActiveRequests.decrementAndGet();
                         drain();

File: core/src/main/java/com/linecorp/armeria/client/logging/AbstractLoggingClient.java
Patch:
@@ -129,7 +129,7 @@ public O execute(ClientRequestContext ctx, I req) throws Exception {
             ctx.log().whenRequestComplete().thenAccept(requestLogger);
             ctx.log().whenComplete().thenAccept(responseLogger);
         }
-        return delegate().execute(ctx, req);
+        return unwrap().execute(ctx, req);
     }
 
     private class RequestLogger implements Consumer<RequestOnlyLog> {

File: core/src/main/java/com/linecorp/armeria/client/logging/ContentPreviewingClient.java
Patch:
@@ -119,7 +119,7 @@ public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Ex
         req = setUpRequestContentPreviewer(ctx, req, requestContentPreviewer);
 
         ctx.logBuilder().deferResponseContentPreview();
-        final HttpResponse res = delegate().execute(ctx, req);
+        final HttpResponse res = unwrap().execute(ctx, req);
         return setUpResponseContentPreviewer(contentPreviewerFactory, ctx, res);
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/metric/AbstractMetricCollectingClient.java
Patch:
@@ -48,6 +48,6 @@ abstract class AbstractMetricCollectingClient<I extends Request, O extends Respo
     @Override
     public O execute(ClientRequestContext ctx, I req) throws Exception {
         RequestMetricSupport.setup(ctx, REQUEST_METRICS_SET, meterIdPrefixFunction, false);
-        return delegate().execute(ctx, req);
+        return unwrap().execute(ctx, req);
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/retry/AttemptLimitingBackoff.java
Patch:
@@ -41,7 +41,7 @@ public long nextDelayMillis(int numAttemptsSoFar) {
     @Override
     public String toString() {
         return MoreObjects.toStringHelper(this)
-                          .add("delegate", delegate())
+                          .add("delegate", unwrap())
                           .add("maxAttempts", maxAttempts)
                           .toString();
     }

File: core/src/main/java/com/linecorp/armeria/client/retry/BackoffWrapper.java
Patch:
@@ -28,6 +28,6 @@ protected BackoffWrapper(Backoff delegate) {
 
     @Override
     public long nextDelayMillis(int numAttemptsSoFar) {
-        return delegate().nextDelayMillis(numAttemptsSoFar);
+        return unwrap().nextDelayMillis(numAttemptsSoFar);
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/retry/JitterAddingBackoff.java
Patch:
@@ -50,7 +50,7 @@ final class JitterAddingBackoff extends BackoffWrapper {
     @Override
     public long nextDelayMillis(int numAttemptsSoFar) {
         validateNumAttemptsSoFar(numAttemptsSoFar);
-        final long nextDelayMillis = delegate().nextDelayMillis(numAttemptsSoFar);
+        final long nextDelayMillis = unwrap().nextDelayMillis(numAttemptsSoFar);
         if (nextDelayMillis < 0) {
             return nextDelayMillis;
         }
@@ -65,7 +65,7 @@ public long nextDelayMillis(int numAttemptsSoFar) {
     @Override
     public String toString() {
         return MoreObjects.toStringHelper(this)
-                          .add("delegate", delegate())
+                          .add("delegate", unwrap())
                           .add("minJitterRate", minJitterRate)
                           .add("maxJitterRate", maxJitterRate)
                           .toString();

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java
Patch:
@@ -248,7 +248,7 @@ private void doExecute0(ClientRequestContext ctx, HttpRequestDuplicator rootReqD
                                                                   initialAttempt);
         ctx.logBuilder().addChild(derivedCtx.log());
 
-        final HttpResponse response = executeWithFallback(delegate(), derivedCtx,
+        final HttpResponse response = executeWithFallback(unwrap(), derivedCtx,
                                                           (context, cause) -> HttpResponse.ofFailure(cause));
 
         if (requiresResponseTrailers) {

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java
Patch:
@@ -121,7 +121,7 @@ private void doExecute0(ClientRequestContext ctx, RpcRequest req,
                     mutator -> mutator.add(ARMERIA_RETRY_COUNT, Integer.toString(totalAttempts - 1)));
         }
 
-        final RpcResponse res = executeWithFallback(delegate(), derivedCtx,
+        final RpcResponse res = executeWithFallback(unwrap(), derivedCtx,
                                                     (context, cause) -> RpcResponse.ofFailure(cause));
 
         res.handle((unused1, cause) -> {

File: core/src/main/java/com/linecorp/armeria/common/RequestContextStorageWrapper.java
Patch:
@@ -39,17 +39,17 @@ protected RequestContextStorageWrapper(RequestContextStorage delegate) {
     @Nullable
     @Override
     public <T extends RequestContext> T push(RequestContext toPush) {
-        return delegate().push(toPush);
+        return unwrap().push(toPush);
     }
 
     @Override
     public void pop(RequestContext current, @Nullable RequestContext toRestore) {
-        delegate().pop(current, toRestore);
+        unwrap().pop(current, toRestore);
     }
 
     @Nullable
     @Override
     public <T extends RequestContext> T currentOrNull() {
-        return delegate().currentOrNull();
+        return unwrap().currentOrNull();
     }
 }

File: core/src/main/java/com/linecorp/armeria/internal/common/RequestContextUtil.java
Patch:
@@ -172,7 +172,7 @@ public static void hook(Function<? super RequestContextStorage, ? extends Reques
     @Nullable
     @SuppressWarnings("unchecked")
     public static <T extends RequestContext> T get() {
-        return (T) requestContextStorage.currentOrNull();
+        return requestContextStorage.currentOrNull();
     }
 
     /**
@@ -183,7 +183,7 @@ public static <T extends RequestContext> T get() {
     @SuppressWarnings("unchecked")
     public static <T extends RequestContext> T getAndSet(RequestContext ctx) {
         requireNonNull(ctx, "ctx");
-        return (T) requestContextStorage.push(ctx);
+        return requestContextStorage.push(ctx);
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java
Patch:
@@ -411,7 +411,7 @@ private class ExceptionFilteredHttpResponseDecorator extends SimpleDecoratingHtt
         @Override
         public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
             try {
-                final HttpResponse response = delegate().serve(ctx, req);
+                final HttpResponse response = unwrap().serve(ctx, req);
                 if (response instanceof ExceptionFilteredHttpResponse) {
                     return response;
                 }

File: core/src/main/java/com/linecorp/armeria/server/DecoratingService.java
Patch:
@@ -46,11 +46,11 @@ protected DecoratingService(Service<T_I, T_O> delegate) {
 
     @Override
     public void serviceAdded(ServiceConfig cfg) throws Exception {
-        ServiceCallbackInvoker.invokeServiceAdded(cfg, delegate());
+        ServiceCallbackInvoker.invokeServiceAdded(cfg, unwrap());
     }
 
     @Override
     public boolean shouldCachePath(String path, @Nullable String query, Route route) {
-        return delegate().shouldCachePath(path, query, route);
+        return unwrap().shouldCachePath(path, query, route);
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/FunctionalDecoratingHttpService.java
Patch:
@@ -42,11 +42,11 @@ final class FunctionalDecoratingHttpService extends SimpleDecoratingHttpService
 
     @Override
     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
-        return function.serve(delegate(), ctx, req);
+        return function.serve((HttpService) unwrap(), ctx, req);
     }
 
     @Override
     public String toString() {
-        return FunctionalDecoratingHttpService.class.getSimpleName() + '(' + delegate() + ", " + function + ')';
+        return FunctionalDecoratingHttpService.class.getSimpleName() + '(' + unwrap() + ", " + function + ')';
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/FunctionalDecoratingRpcService.java
Patch:
@@ -41,11 +41,11 @@ final class FunctionalDecoratingRpcService extends SimpleDecoratingRpcService {
 
     @Override
     public RpcResponse serve(ServiceRequestContext ctx, RpcRequest req) throws Exception {
-        return function.serve(delegate(), ctx, req);
+        return function.serve((RpcService) unwrap(), ctx, req);
     }
 
     @Override
     public String toString() {
-        return FunctionalDecoratingRpcService.class.getSimpleName() + '(' + delegate() + ", " + function + ')';
+        return FunctionalDecoratingRpcService.class.getSimpleName() + '(' + unwrap() + ", " + function + ')';
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/HttpServerPipelineConfigurator.java
Patch:
@@ -76,7 +76,7 @@
 import io.netty.handler.ssl.SslContext;
 import io.netty.handler.ssl.SslHandler;
 import io.netty.util.AsciiString;
-import io.netty.util.DomainNameMapping;
+import io.netty.util.Mapping;
 import io.netty.util.NetUtil;
 import io.netty.util.concurrent.ScheduledFuture;
 
@@ -106,15 +106,15 @@ final class HttpServerPipelineConfigurator extends ChannelInitializer<Channel> {
     private final ServerConfig config;
     private final ServerPort port;
     @Nullable
-    private final DomainNameMapping<SslContext> sslContexts;
+    private final Mapping<String, SslContext> sslContexts;
     private final GracefulShutdownSupport gracefulShutdownSupport;
 
     /**
      * Creates a new instance.
      */
     HttpServerPipelineConfigurator(
             ServerConfig config, ServerPort port,
-            @Nullable DomainNameMapping<SslContext> sslContexts,
+            @Nullable Mapping<String, SslContext> sslContexts,
             GracefulShutdownSupport gracefulShutdownSupport) {
 
         this.config = requireNonNull(config, "config");

File: core/src/main/java/com/linecorp/armeria/server/RouteDecoratingService.java
Patch:
@@ -126,9 +126,9 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
             });
 
             if (serviceChain.isEmpty()) {
-                return delegate().serve(ctx, req);
+                return unwrap().serve(ctx, req);
             }
-            serviceChain.add(delegate());
+            serviceChain.add((HttpService) unwrap());
             final HttpService service = serviceChain.poll();
             ctx.setAttr(DECORATOR_KEY, serviceChain);
             assert service != null;
@@ -139,7 +139,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
         public String toString() {
             return MoreObjects.toStringHelper(this)
                               .add("router", router)
-                              .add("delegate", delegate()).toString();
+                              .add("delegate", unwrap()).toString();
         }
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/Server.java
Patch:
@@ -81,7 +81,7 @@
 import io.netty.channel.EventLoopGroup;
 import io.netty.channel.ServerChannel;
 import io.netty.handler.ssl.SslContext;
-import io.netty.util.DomainNameMapping;
+import io.netty.util.Mapping;
 import io.netty.util.concurrent.FastThreadLocalThread;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.ImmediateEventExecutor;
@@ -104,7 +104,7 @@ public static ServerBuilder builder() {
 
     private final ServerConfig config;
     @Nullable
-    private final DomainNameMapping<SslContext> sslContexts;
+    private final Mapping<String, SslContext> sslContexts;
 
     private final StartStopSupport<Void, Void, Void, ServerListener> startStop;
     private final Set<ServerChannel> serverChannels = new NonBlockingHashSet<>();
@@ -115,7 +115,7 @@ public static ServerBuilder builder() {
     @VisibleForTesting
     ServerBootstrap serverBootstrap;
 
-    Server(ServerConfig config, @Nullable DomainNameMapping<SslContext> sslContexts) {
+    Server(ServerConfig config, @Nullable Mapping<String, SslContext> sslContexts) {
         this.config = requireNonNull(config, "config");
         this.sslContexts = sslContexts;
         startStop = new ServerStartStopSupport(config.startStopExecutor());

File: core/src/main/java/com/linecorp/armeria/server/cors/CorsService.java
Patch:
@@ -113,7 +113,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
             return forbidden();
         }
 
-        return new FilteredHttpResponse(delegate().serve(ctx, req)) {
+        return new FilteredHttpResponse(unwrap().serve(ctx, req)) {
             @Override
             protected HttpObject filter(HttpObject obj) {
                 if (!(obj instanceof ResponseHeaders)) {

File: core/src/main/java/com/linecorp/armeria/server/encoding/EncodingService.java
Patch:
@@ -73,7 +73,7 @@ public static Function<? super HttpService, EncodingService> newDecorator() {
     @Override
     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
         final HttpEncodingType encodingType = HttpEncoders.getWrapperForRequest(req);
-        final HttpResponse delegateResponse = delegate().serve(ctx, req);
+        final HttpResponse delegateResponse = unwrap().serve(ctx, req);
         if (encodingType == null || !encodableRequestHeadersPredicate.test(req.headers())) {
             return delegateResponse;
         }

File: core/src/main/java/com/linecorp/armeria/server/logging/ContentPreviewingService.java
Patch:
@@ -119,7 +119,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
         req = setUpRequestContentPreviewer(ctx, req, requestContentPreviewer);
 
         ctx.logBuilder().deferResponseContentPreview();
-        final HttpResponse res = delegate().serve(ctx, req);
+        final HttpResponse res = unwrap().serve(ctx, req);
         return setUpResponseContentPreviewer(contentPreviewerFactory, ctx, res);
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/logging/LoggingService.java
Patch:
@@ -129,7 +129,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
             ctx.log().whenRequestComplete().thenAccept(requestLogger);
             ctx.log().whenComplete().thenAccept(responseLogger);
         }
-        return delegate().serve(ctx, req);
+        return unwrap().serve(ctx, req);
     }
 
     private class RequestLogger implements Consumer<RequestOnlyLog> {

File: core/src/main/java/com/linecorp/armeria/server/metric/MetricCollectingService.java
Patch:
@@ -72,6 +72,6 @@ public static Function<? super HttpService, MetricCollectingService> newDecorato
     @Override
     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
         RequestMetricSupport.setup(ctx, REQUEST_METRICS_SET, meterIdPrefixFunction, true);
-        return delegate().serve(ctx, req);
+        return unwrap().serve(ctx, req);
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/throttling/AbstractThrottlingService.java
Patch:
@@ -58,9 +58,9 @@ public O serve(ServiceRequestContext ctx, I req) throws Exception {
                 strategy.accept(ctx, req).handleAsync((accept, cause) -> {
                     try {
                         if (cause != null || !accept) {
-                            return rejectHandler.handleRejected(delegate(), ctx, req, cause);
+                            return rejectHandler.handleRejected(unwrap(), ctx, req, cause);
                         }
-                        return acceptHandler.handleAccepted(delegate(), ctx, req);
+                        return acceptHandler.handleAccepted(unwrap(), ctx, req);
                     } catch (Exception e) {
                         return Exceptions.throwUnsafely(e);
                     }

File: core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java
Patch:
@@ -109,7 +109,7 @@ private PoolUnawareDecorator(HttpService delegate) {
 
         @Override
         public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
-            final HttpResponse res = delegate().serve(ctx, req);
+            final HttpResponse res = unwrap().serve(ctx, req);
             final HttpResponseWriter decorated = HttpResponse.streaming();
             res.subscribe(new Subscriber<HttpObject>() {
                 @Override
@@ -144,7 +144,7 @@ private PoolAwareDecorator(HttpService delegate) {
 
         @Override
         public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
-            final HttpResponse res = delegate().serve(ctx, req);
+            final HttpResponse res = unwrap().serve(ctx, req);
             final HttpResponseWriter decorated = HttpResponse.streaming();
             res.subscribe(new Subscriber<HttpObject>() {
                 @Override

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientWithLoggingTest.java
Patch:
@@ -176,7 +176,7 @@ void loggingThenRetrying() throws Exception {
             public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {
                 ctx.log().whenRequestComplete().thenAccept(log -> listener.accept(log.partial()));
                 ctx.log().whenComplete().thenAccept(listener);
-                return delegate().execute(ctx, req);
+                return unwrap().execute(ctx, req);
             }
         };
     }

File: core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceAnnotationAliasTest.java
Patch:
@@ -193,7 +193,7 @@ static class MyDecorator3Factory implements DecoratorFactoryFunction<MyDecorator
                 @Override
                 public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
                     appendAttribute(ctx, " (decorated-3)");
-                    return delegate().serve(ctx, req);
+                    return unwrap().serve(ctx, req);
                 }
             };
         }

File: core/src/test/java/com/linecorp/armeria/server/HttpServerStreamingTest.java
Patch:
@@ -117,7 +117,7 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) {
                         @Override
                         public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
                             ctx.setMaxRequestLength(serverMaxRequestLength);
-                            return delegate().serve(ctx, req);
+                            return unwrap().serve(ctx, req);
                         }
                     };
             sb.decorator(decorator);

File: core/src/test/java/com/linecorp/armeria/server/HttpServerTest.java
Patch:
@@ -426,7 +426,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
                                 pendingRequestLogs.decrementAndGet();
                                 requestLogs.add(log);
                             });
-                            return delegate().serve(ctx, req);
+                            return unwrap().serve(ctx, req);
                         }
                     };
             sb.decorator(decorator);

File: core/src/test/java/com/linecorp/armeria/server/ServerTest.java
Patch:
@@ -152,11 +152,11 @@ protected HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req) {
                         @Override
                         public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
                             if ("/timeout-not".equals(ctx.path())) {
-                               ctx.clearRequestTimeout();
+                                ctx.clearRequestTimeout();
                             } else {
                                 ctx.setRequestTimeoutMillis(TimeoutMode.SET_FROM_NOW, requestTimeoutMillis);
                             }
-                            return delegate().serve(ctx, req);
+                            return unwrap().serve(ctx, req);
                         }
                     };
 

File: core/src/test/java/com/linecorp/armeria/server/ServiceTest.java
Patch:
@@ -87,7 +87,7 @@ public FooServiceDecorator(HttpService delegate) {
 
         @Override
         public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
-            return delegate().serve(ctx, req);
+            return unwrap().serve(ctx, req);
         }
     }
 

File: core/src/test/java/com/linecorp/armeria/server/UnwrappingServiceTest.java
Patch:
@@ -51,7 +51,7 @@ private static final class MyDecoratorA extends SimpleDecoratingHttpService {
 
         @Override
         public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
-            return delegate().serve(ctx, req);
+            return unwrap().serve(ctx, req);
         }
     }
 
@@ -62,7 +62,7 @@ private static final class MyDecoratorB extends SimpleDecoratingHttpService {
 
         @Override
         public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
-            return delegate().serve(ctx, req);
+            return unwrap().serve(ctx, req);
         }
     }
 }

File: dropwizard/src/main/java/com/linecorp/armeria/dropwizard/ArmeriaServerFactory.java
Patch:
@@ -64,8 +64,10 @@ class ArmeriaServerFactory extends AbstractServerFactory {
     @Nullable
     private transient ServerBuilder serverBuilder;
 
+    @SuppressWarnings("deprecation")
     @NotEmpty
     private String applicationContextPath = "/application";
+    @SuppressWarnings("deprecation")
     @NotEmpty
     private String adminContextPath = "/admin";
     @JsonProperty

File: grpc-protocol/src/main/java/com/linecorp/armeria/client/grpc/protocol/UnaryGrpcClient.java
Patch:
@@ -152,9 +152,8 @@ public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) {
                                    }
 
                                    try {
-                                       return delegate().execute(ctx, HttpRequest.of(req.headers(), framed))
-                                                        .aggregateWithPooledObjects(ctx.eventLoop(),
-                                                                                    ctx.alloc());
+                                       return unwrap().execute(ctx, HttpRequest.of(req.headers(), framed))
+                                                      .aggregateWithPooledObjects(ctx.eventLoop(), ctx.alloc());
                                    } catch (Exception e) {
                                        throw new ArmeriaStatusException(StatusCodes.INTERNAL,
                                                                         "Error executing request.");

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/CallCredentialsDecoratingClient.java
Patch:
@@ -94,7 +94,7 @@ public void apply(Metadata metadata) {
                         ctx.mutateAdditionalRequestHeaders(
                                 headers -> MetadataUtil.fillHeaders(metadata, headers));
                         try {
-                            response.complete(delegate().execute(ctx, req));
+                            response.complete(unwrap().execute(ctx, req));
                         } catch (Exception e) {
                             response.completeExceptionally(e);
                         }

File: grpc/src/test/java/com/linecorp/armeria/internal/client/grpc/GrpcClientUnwrapTest.java
Patch:
@@ -26,7 +26,6 @@
 import com.linecorp.armeria.client.encoding.DecodingClient;
 import com.linecorp.armeria.client.logging.LoggingClient;
 import com.linecorp.armeria.client.retry.RetryDecision;
-import com.linecorp.armeria.client.retry.RetryRule;
 import com.linecorp.armeria.client.retry.RetryingClient;
 import com.linecorp.armeria.common.util.Unwrappable;
 import com.linecorp.armeria.grpc.testing.TestServiceGrpc.TestServiceBlockingStub;
@@ -39,8 +38,7 @@ void test() {
                 Clients.builder("gproto+http://127.0.0.1:1/")
                        .decorator(LoggingClient.newDecorator())
                        .decorator(RetryingClient.newDecorator(
-                               (RetryRule) (ctx, cause) ->
-                                       CompletableFuture.completedFuture(RetryDecision.noRetry())))
+                               (ctx, cause) -> CompletableFuture.completedFuture(RetryDecision.noRetry())))
                        .build(TestServiceBlockingStub.class);
 
         assertThat(Clients.unwrap(client, TestServiceBlockingStub.class)).isSameAs(client);

File: grpc/src/test/java/com/linecorp/armeria/internal/common/grpc/TestServiceImpl.java
Patch:
@@ -534,7 +534,7 @@ public EchoRequestHeadersInTrailers(HttpService delegate) {
 
         @Override
         public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
-            final HttpResponse res = delegate().serve(ctx, req);
+            final HttpResponse res = unwrap().serve(ctx, req);
             return new FilteredHttpResponse(res) {
                 private boolean headersReceived;
 

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceServerTest.java
Patch:
@@ -1014,7 +1014,7 @@ void json() throws Exception {
                            public HttpResponse execute(ClientRequestContext ctx, HttpRequest req)
                                    throws Exception {
                                requestHeaders.set(req.headers());
-                               return new FilteredHttpResponse(delegate().execute(ctx, req)) {
+                               return new FilteredHttpResponse(unwrap().execute(ctx, req)) {
                                    @Override
                                    protected HttpObject filter(HttpObject obj) {
                                        if (obj instanceof HttpData) {
@@ -1054,7 +1054,7 @@ void json_preservingFieldNames() throws Exception {
                            public HttpResponse execute(ClientRequestContext ctx, HttpRequest req)
                                    throws Exception {
                                requestHeaders.set(req.headers());
-                               return new FilteredHttpResponse(delegate().execute(ctx, req)) {
+                               return new FilteredHttpResponse(unwrap().execute(ctx, req)) {
                                    @Override
                                    protected HttpObject filter(HttpObject obj) {
                                        if (obj instanceof HttpData) {

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlDecorator.java
Patch:
@@ -111,7 +111,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
             if (cause == null && result) {
                 // Already authenticated.
                 try {
-                    return delegate().serve(ctx, req);
+                    return unwrap().serve(ctx, req);
                 } catch (Exception e) {
                     return Exceptions.throwUnsafely(e);
                 }

File: thrift/src/main/java/com/linecorp/armeria/common/thrift/text/BaseContext.java
Patch:
@@ -102,6 +102,6 @@ protected JsonNode getCurrentChild() {
      * Returns whether there are more child elements to process.
      */
     protected boolean hasMoreChildren() {
-        return (Boolean) unsupportedOperation();
+        return unsupportedOperation();
     }
 }

File: thrift/src/main/java/com/linecorp/armeria/internal/client/thrift/THttpClientDelegate.java
Patch:
@@ -145,7 +145,7 @@ public RpcResponse execute(ClientRequestContext ctx, RpcRequest call) throws Exc
             ctx.logBuilder().deferResponseContent();
 
             final CompletableFuture<AggregatedHttpResponse> future =
-                    delegate().execute(ctx, httpReq).aggregateWithPooledObjects(ctx.eventLoop(), ctx.alloc());
+                    unwrap().execute(ctx, httpReq).aggregateWithPooledObjects(ctx.eventLoop(), ctx.alloc());
 
             future.handle((res, cause) -> {
                 if (cause != null) {

File: thrift/src/main/java/com/linecorp/armeria/internal/client/thrift/THttpClientInvocationHandler.java
Patch:
@@ -137,10 +137,10 @@ private Object invokeClientMethod(Method method, @Nullable Object[] args) throws
             try {
                 final RpcResponse reply;
                 if (fragment != null) {
-                    reply = delegate().executeMultiplexed(
+                    reply = unwrap().executeMultiplexed(
                             path, params.clientType(), fragment, method.getName(), args);
                 } else {
-                    reply = delegate().execute(path, params.clientType(), method.getName(), args);
+                    reply = unwrap().execute(path, params.clientType(), method.getName(), args);
                 }
 
                 final ClientRequestContext ctx = captor.get();

File: thrift/src/main/java/com/linecorp/armeria/server/thrift/THttpService.java
Patch:
@@ -542,7 +542,7 @@ private void invoke(
         final RpcResponse reply;
 
         try (SafeCloseable ignored = ctx.push()) {
-            reply = delegate().serve(ctx, call);
+            reply = unwrap().serve(ctx, call);
         } catch (Throwable cause) {
             handleException(ctx, RpcResponse.ofFailure(cause), res, serializationFormat, seqId, func, cause);
             return;

File: thrift/src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTest.java
Patch:
@@ -376,7 +376,7 @@ void testOnewayHelloServiceAsync(
         }
 
         for (String ignored : names) {
-            assertThat(serverReceivedNames.take()).isIn(names);
+            assertThat(serverReceivedNames.take()).isIn((Object[]) names);
         }
     }
 
@@ -416,7 +416,7 @@ void testExceptionThrowingOnewayServiceAsync(
         }
 
         for (String ignored : names) {
-            assertThat(serverReceivedNames.take()).isIn(names);
+            assertThat(serverReceivedNames.take()).isIn((Object[]) names);
         }
     }
 
@@ -456,7 +456,7 @@ void testDevNullServiceAsync(
         }
 
         for (String ignored : names) {
-            assertThat(serverReceivedNames.take()).isIn(names);
+            assertThat(serverReceivedNames.take()).isIn((Object[]) names);
         }
     }
 

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/AbstractThriftOverHttpTest.java
Patch:
@@ -143,7 +143,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
                             if (recordMessageLogs) {
                                 ctx.log().whenComplete().thenAccept(requestLogs::add);
                             }
-                            return delegate().serve(ctx, req);
+                            return unwrap().serve(ctx, req);
                         }
                     };
 

File: core/src/test/java/com/linecorp/armeria/internal/client/AbstractRuleBuilderTest.java
Patch:
@@ -53,6 +53,7 @@ void checkStaticMethods() {
                                                           Modifier.isPublic(method.getModifiers()) &&
                                                           method.getName().startsWith("on") &&
                                                           !"onResponseHeaders".equals(method.getName()) &&
+                                                          !"onResponseTrailers".equals(method.getName()) &&
                                                           !"onUnprocessed".equals(method.getName()) &&
                                                           !method.isVarArgs());
 

File: examples/grpc-kotlin/gen-src/main/grpc/example/armeria/grpc/kotlin/HelloServiceGrpc.java
Patch:
@@ -18,7 +18,7 @@
 /**
  */
 @javax.annotation.Generated(
-    value = "by gRPC proto compiler (version 1.29.0)",
+    value = "by gRPC proto compiler (version 1.30.0)",
     comments = "Source: hello.proto")
 public final class HelloServiceGrpc {
 

File: core/src/test/java/com/linecorp/armeria/client/proxy/ProxyClientIntegrationTest.java
Patch:
@@ -360,7 +360,7 @@ void testProxyWithH2C() throws Exception {
         await().until(() -> responseFutures.stream().allMatch(CompletableFuture::isDone));
         assertThat(responseFutures.stream().map(CompletableFuture::join))
                 .allMatch(response -> response.contentUtf8().equals(SUCCESS_RESPONSE));
-        assertThat(numSuccessfulProxyRequests).isEqualTo(1);
+        assertThat(numSuccessfulProxyRequests).isGreaterThanOrEqualTo(1);
         clientFactory.close();
     }
 

File: core/src/main/java/com/linecorp/armeria/common/logging/BuiltInProperties.java
Patch:
@@ -28,8 +28,6 @@
 
 final class BuiltInProperties {
 
-    private static final BuiltInProperty[] allValues = BuiltInProperty.values();
-
     private static final long MASK_ADDRESSES =
             mask(REMOTE_HOST, REMOTE_IP, REMOTE_PORT, LOCAL_HOST, LOCAL_IP, LOCAL_PORT, CLIENT_IP);
     private static final long MASK_SSL = mask(TLS_SESSION_ID, TLS_CIPHER, TLS_PROTO);

File: core/src/main/java/com/linecorp/armeria/common/logging/RequestLogProperty.java
Patch:
@@ -59,7 +59,7 @@ public enum RequestLogProperty {
     SCHEME(true),
 
     /**
-     * {@link RequestLog#name()}.
+     * {@link RequestLog#name()}, {@link RequestLog#serviceName()}, {@link RequestLog#fullName()}.
      */
     NAME(true),
 

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientWithLoggingTest.java
Patch:
@@ -117,7 +117,7 @@ void retryingThenLogging() throws InterruptedException {
                                           .decorator(RetryingClient.builder(retryRule).newDecorator())
                                           .decorator((delegate, ctx, req) -> {
                                               final RequestLogBuilder logBuilder = ctx.logBuilder();
-                                              logBuilder.name("foo");
+                                              logBuilder.name("FooService", "foo");
                                               logBuilder.requestContent("bar", null);
                                               logBuilder.deferRequestContentPreview();
                                               logBuilder.deferResponseContent();
@@ -140,7 +140,9 @@ void retryingThenLogging() throws InterruptedException {
         await().untilAsserted(() -> assertThat(logResult).hasSize(successLogIndex + 1));
         // Let's just check the first request log.
         final RequestLog requestLog = logResult.get(0);
+        assertThat(requestLog.serviceName()).isEqualTo("FooService");
         assertThat(requestLog.name()).isEqualTo("foo");
+        assertThat(requestLog.fullName()).isEqualTo("FooService/foo");
         assertThat(requestLog.requestContent()).isEqualTo("bar");
         assertThat(requestLog.requestContentPreview()).isEqualTo("baz");
 

File: core/src/test/java/com/linecorp/armeria/common/logging/RequestContextExporterTest.java
Patch:
@@ -63,6 +63,8 @@ void shouldNotExportNullValue() {
                 BuiltInProperty.REMOTE_HOST.key,
                 BuiltInProperty.REMOTE_IP.key,
                 BuiltInProperty.REMOTE_PORT.key,
+                BuiltInProperty.REQ_NAME.key,
+                BuiltInProperty.REQ_SERVICE_NAME.key,
                 BuiltInProperty.REQ_AUTHORITY.key,
                 BuiltInProperty.REQ_CONTENT_LENGTH.key,
                 BuiltInProperty.REQ_DIRECTION.key,

File: core/src/test/java/com/linecorp/armeria/server/ServiceTest.java
Patch:
@@ -51,7 +51,8 @@ private static void assertDecoration(FooService inner, HttpService outer) throws
         assertThat(outer.as(String.class)).isNull();
 
         // Test if FooService.serviceAdded() is invoked.
-        final ServiceConfig cfg = new ServiceConfig(Route.ofCatchAll(), outer, null, 1, 1, true,
+        final ServiceConfig cfg = new ServiceConfig(Route.ofCatchAll(), outer, /* defaultServiceName */ null,
+                                                    /* defaultLogName */ null, 1, 1, true,
                                                     AccessLogWriter.disabled(), false);
         outer.serviceAdded(cfg);
         assertThat(inner.cfg).isSameAs(cfg);

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/FramedGrpcService.java
Patch:
@@ -191,7 +191,8 @@ protected HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req) throws
             }
         }
 
-        ctx.logBuilder().name(methodName);
+        final int methodIndex = methodName.lastIndexOf('/') + 1;
+        ctx.logBuilder().name(method.getMethodDescriptor().getServiceName(), methodName.substring(methodIndex));
         ctx.logBuilder().deferRequestContent();
         ctx.logBuilder().deferResponseContent();
 

File: retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/InvocationUtil.java
Patch:
@@ -50,7 +50,7 @@ static void setInvocation(ClientRequestContext ctx, @Nullable Invocation invocat
             return;
         }
         ctx.setAttr(RETROFIT_INVOCATION, invocation);
-        ctx.logBuilder().name(invocation.method().getName());
+        ctx.logBuilder().name(invocation.method().getDeclaringClass().getName(), invocation.method().getName());
     }
 
     private InvocationUtil() {}

File: thrift/src/main/java/com/linecorp/armeria/internal/client/thrift/THttpClientDelegate.java
Patch:
@@ -98,7 +98,7 @@ public RpcResponse execute(ClientRequestContext ctx, RpcRequest call) throws Exc
         final List<Object> args = call.params();
         final CompletableRpcResponse reply = new CompletableRpcResponse();
 
-        ctx.logBuilder().name(call.method());
+        ctx.logBuilder().name(call.serviceType().getName(), call.method());
         ctx.logBuilder().serializationFormat(serializationFormat);
 
         final ThriftFunction func;

File: thrift/src/main/java/com/linecorp/armeria/server/thrift/THttpService.java
Patch:
@@ -492,7 +492,7 @@ private void decodeAndInvoke(
                 handlePreDecodeException(ctx, httpRes, cause, serializationFormat, seqId, methodName);
                 return;
             }
-            ctx.logBuilder().name(header.name);
+            ctx.logBuilder().name(f.serviceType().getName(), methodName);
 
             // Decode the invocation parameters.
             try {

File: thrift/src/test/java/com/linecorp/armeria/it/metric/DropwizardMetricsIntegrationTest.java
Patch:
@@ -128,7 +128,7 @@ private static String serverMetricName(String property, int status, String resul
                             CaseFormat.LOWER_CAMEL.to(CaseFormat.UPPER_CAMEL, property);
         return MetricRegistry.name(name,
                                    "hostnamePattern:*", "httpStatus:" + status,
-                                   "method:hello", result, "route:exact:/helloservice");
+                                   "method:hello", result, "service:" + Iface.class.getName());
     }
 
     private static String serverMetricNameWithStatus(String property, int status) {
@@ -142,7 +142,8 @@ private static String serverMetricNameWithStatusAndResult(String property, int s
     private static String clientMetricName(String property, int status, String result) {
         final String name = "armeriaClientHelloService" +
                             CaseFormat.LOWER_CAMEL.to(CaseFormat.UPPER_CAMEL, property);
-        return MetricRegistry.name(name, "httpStatus:" + status, "method:hello", result);
+        return MetricRegistry.name(name, "httpStatus:" + status, "method:hello", result,
+                                   "service:" + Iface.class.getName());
     }
 
     private static String clientMetricNameWithStatus(String prop, int status) {

File: core/src/test/java/com/linecorp/armeria/common/stream/PublisherBasedStreamMessageTest.java
Patch:
@@ -23,6 +23,7 @@
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.timeout;
 import static org.mockito.Mockito.verify;
 
 import javax.annotation.Nullable;
@@ -192,7 +193,7 @@ void awaitAbort(@Nullable Throwable cause) {
 
         void verify(@Nullable Throwable cause) {
             // Ensure subscription.cancel() has been invoked.
-            Mockito.verify(subscription).cancel();
+            Mockito.verify(subscription, timeout(3000)).cancel();
 
             // Ensure completionFuture is complete exceptionally.
             assertThat(publisher.whenComplete()).isCompletedExceptionally();

File: core/src/test/java/com/linecorp/armeria/server/annotation/ByteArrayRequestConverterFunctionTest.java
Patch:
@@ -40,7 +40,7 @@ void jsonTextToByteArray() throws Exception {
         when(req.contentType()).thenReturn(MediaType.JSON);
         when(req.content()).thenReturn(HttpData.ofUtf8(JSON_TEXT));
 
-        final Object result = function.convertRequest(ctx, req, byte[].class);
+        final Object result = function.convertRequest(ctx, req, byte[].class, null);
         assertThat(result).isInstanceOf(byte[].class);
     }
 
@@ -49,7 +49,7 @@ void jsonTextToHttpData() throws Exception {
         when(req.contentType()).thenReturn(MediaType.JSON);
         when(req.content()).thenReturn(HttpData.ofUtf8(JSON_TEXT));
 
-        final Object result = function.convertRequest(ctx, req, HttpData.class);
+        final Object result = function.convertRequest(ctx, req, HttpData.class, null);
         assertThat(result).isInstanceOf(HttpData.class);
     }
 }

File: core/src/test/java/com/linecorp/armeria/server/annotation/StringRequestConverterFunctionTest.java
Patch:
@@ -40,7 +40,7 @@ void jsonTextToString() throws Exception {
         when(req.contentType()).thenReturn(MediaType.JSON);
         when(req.content(ArmeriaHttpUtil.HTTP_DEFAULT_CONTENT_CHARSET)).thenReturn(JSON_TEXT);
 
-        final Object result = function.convertRequest(ctx, req, String.class);
+        final Object result = function.convertRequest(ctx, req, String.class, null);
         assertThat(result).isInstanceOf(String.class);
     }
 
@@ -49,7 +49,7 @@ void jsonTextToCharSequence() throws Exception {
         when(req.contentType()).thenReturn(MediaType.JSON);
         when(req.content(ArmeriaHttpUtil.HTTP_DEFAULT_CONTENT_CHARSET)).thenReturn(JSON_TEXT);
 
-        final Object result = function.convertRequest(ctx, req, CharSequence.class);
+        final Object result = function.convertRequest(ctx, req, CharSequence.class, null);
         assertThat(result).isInstanceOf(CharSequence.class);
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolver.java
Patch:
@@ -327,7 +327,7 @@ public void run() {
                 servedFromCache = false;
                 numAttemptsSoFar = 1;
 
-                if (entry.address().equals(address) && entry.ttlMillis() == ttlMillis) {
+                if (address.equals(entry.address()) && entry.ttlMillis() == ttlMillis) {
                     scheduleRefresh(ttlMillis);
                 } else {
                     // Replace the old entry with the new one.

File: core/src/main/java/com/linecorp/armeria/common/MediaType.java
Patch:
@@ -1214,6 +1214,7 @@ private static final class KnownTypesByString {
                       .distinct()
                       .collect(toImmutableMap(MediaType::toString, Function.identity(), (a, b) -> a));
 
+        @Nullable
         static MediaType get(String input) {
             return KNOWN_TYPES_BY_STRING.get(input);
         }

File: core/src/main/java/com/linecorp/armeria/internal/common/DefaultTimeoutController.java
Patch:
@@ -269,6 +269,7 @@ ScheduledFuture<?> timeoutFuture() {
         return timeoutFuture;
     }
 
+    @Nullable
     @VisibleForTesting
     TimeoutTask timeoutTask() {
         return timeoutTask;

File: core/src/main/java/com/linecorp/armeria/internal/common/util/ObjectCollectingUtil.java
Patch:
@@ -42,6 +42,7 @@ public final class ObjectCollectingUtil {
      * The {@link Class} instance of {@code reactor.core.publisher.Mono} of
      * <a href="https://projectreactor.io/">Project Reactor</a>.
      */
+    @Nullable
     private static final Class<?> MONO_CLASS;
 
     static {

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotationUtil.java
Patch:
@@ -220,14 +220,14 @@ static <T extends Annotation> List<T> find(AnnotatedElement element, Class<T> an
 
     private static <T extends Annotation> void findMetaAnnotations(
             Builder<T> builder, Annotation annotation,
-            Class<T> annotationType, Class<? extends Annotation> containerType) {
+            Class<T> annotationType, @Nullable Class<? extends Annotation> containerType) {
         findMetaAnnotations(builder, annotation, annotationType, containerType,
                             Collections.newSetFromMap(new IdentityHashMap<>()));
     }
 
     private static <T extends Annotation> boolean findMetaAnnotations(
             Builder<T> builder, Annotation annotation,
-            Class<T> annotationType, Class<? extends Annotation> containerType,
+            Class<T> annotationType, @Nullable Class<? extends Annotation> containerType,
             Set<Class<? extends Annotation>> visitedAnnotationTypes) {
 
         final Class<? extends Annotation> actualAnnotationType = annotation.annotationType();

File: core/src/main/java/com/linecorp/armeria/server/docs/DocService.java
Patch:
@@ -301,6 +301,7 @@ private static FieldInfo addFieldDocString(NamedTypeInfo parent, FieldInfo field
                              docString(parent.name() + '/' + field.name(), field.docString(), docStrings));
     }
 
+    @Nullable
     private static String docString(
             String key, @Nullable String currentDocString, Map<String, String> docStrings) {
         return currentDocString != null ? currentDocString : docStrings.get(key);

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.linecorp.armeria.internal.server.annotation;
 
+import java.time.Period;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.LinkedHashSet;
@@ -50,6 +51,7 @@ final class AnnotatedServiceTypeUtil {
                     .put(Double.class, Double::valueOf)
                     .put(String.class, Function.identity())
                     .put(UUID.class, UUID::fromString)
+                    .put(Period.class, Period::parse)
                     .build();
 
     private static final Map<String, Boolean> stringToBooleanMap =

File: core/src/main/java/com/linecorp/armeria/client/Http2ResponseDecoder.java
Patch:
@@ -200,7 +200,7 @@ public void onHeadersRead(ChannelHandlerContext ctx, int streamId, Http2Headers
         final HttpHeaders converted = ArmeriaHttpUtil.toArmeria(headers, false, endOfStream);
         try {
             res.initTimeout();
-            res.tryWrite(converted);
+            res.write(converted);
         } catch (Throwable t) {
             res.close(t);
             throw connectionError(INTERNAL_ERROR, t, "failed to consume a HEADERS frame");
@@ -249,7 +249,7 @@ public int onDataRead(
         }
 
         try {
-            res.tryWrite(new ByteBufHttpData(data.retain(), endOfStream));
+            res.write(new ByteBufHttpData(data.retain(), endOfStream));
         } catch (Throwable t) {
             res.close(t);
             throw connectionError(INTERNAL_ERROR, t, "failed to consume a DATA frame");

File: core/src/main/java/com/linecorp/armeria/common/HttpResponseWriter.java
Patch:
@@ -56,7 +56,8 @@ default void close(AggregatedHttpResponse res) {
 
             final HttpHeaders trailers = res.trailers();
             if (!trailers.isEmpty()) {
-                tryWrite(trailers);
+                @SuppressWarnings("CheckReturnValue")
+                final boolean ignored = tryWrite(trailers);
             }
         } finally {
             close();

File: core/src/main/java/com/linecorp/armeria/common/logging/ContentPreviewerFactoryBuilder.java
Patch:
@@ -56,7 +56,7 @@ public final class ContentPreviewerFactoryBuilder {
      * Sets the maximum length of the produced preview.
      */
     public ContentPreviewerFactoryBuilder maxLength(int maxLength) {
-        checkArgument(maxLength > 0, "maxLength : %d (expected: > 0)", maxLength);
+        checkArgument(maxLength > 0, "maxLength : %s (expected: > 0)", maxLength);
         this.maxLength = maxLength;
         return this;
     }

File: core/src/main/java/com/linecorp/armeria/internal/server/ResponseConversionUtil.java
Patch:
@@ -252,7 +252,9 @@ public void onComplete() {
                 return;
             }
             if (!trailers.isEmpty()) {
-                writer.tryWrite(trailers);
+                if (!writer.tryWrite(trailers)) {
+                    return;
+                }
             }
             writer.close();
         }

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotationUtil.java
Patch:
@@ -230,7 +230,7 @@ private static <T extends Annotation> boolean findMetaAnnotations(
             Class<T> annotationType, Class<? extends Annotation> containerType,
             Set<Class<? extends Annotation>> visitedAnnotationTypes) {
 
-        final Class<? extends Annotation> actualAnnotationType = annotation.getClass();
+        final Class<? extends Annotation> actualAnnotationType = annotation.annotationType();
         if (knownCyclicAnnotationTypes.contains(actualAnnotationType)) {
             return false;
         }

File: core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckService.java
Patch:
@@ -329,7 +329,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
 
                     // Send the initial ack (102 Processing) to let the client know that the request
                     // was accepted.
-                    res.tryWrite(ping);
+                    res.write(ping);
 
                     // Send pings (102 Processing) periodically afterwards.
                     final ScheduledFuture<?> pingFuture;

File: core/src/test/java/com/linecorp/armeria/client/proxy/ProxyClientIntegrationTest.java
Patch:
@@ -369,7 +369,7 @@ void testProxyWithUserName() throws Exception {
         final String username = "username";
         DYNAMIC_HANDLER.setChannelReadCustomizer((ctx, msg) -> {
             if (msg instanceof DefaultSocks4CommandRequest) {
-                assertThat(username.equals(((DefaultSocks4CommandRequest) msg).userId()));
+                assertThat(username).isEqualTo(((DefaultSocks4CommandRequest) msg).userId());
             }
             ctx.fireChannelRead(msg);
         });

File: core/src/test/java/com/linecorp/armeria/common/stream/PublisherBasedStreamMessageTest.java
Patch:
@@ -130,7 +130,7 @@ public void onComplete() {
         });
 
         // We do call onError(t) first before completing the future.
-        await().untilAsserted(() -> assertThat(p.whenComplete().isCompletedExceptionally()));
+        await().untilAsserted(() -> assertThat(p.whenComplete()).isCompletedExceptionally());
     }
 
     private static final class AbortTest {

File: core/src/test/java/com/linecorp/armeria/common/stream/SubscriptionOptionTest.java
Patch:
@@ -131,7 +131,7 @@ public void onComplete() {
         }, NOTIFY_CANCELLATION);
 
         await().untilAsserted(() -> assertThat(completed).isTrue());
-        await().untilAsserted(() -> assertThat(stream.whenComplete().isCompletedExceptionally()));
+        await().untilAsserted(() -> assertThat(stream.whenComplete()).isCompletedExceptionally());
     }
 
     static SubscriptionOption[] subscriptionOptions(boolean subscribedWithPooledObjects) {

File: core/src/test/java/com/linecorp/armeria/server/TestConverters.java
Patch:
@@ -38,7 +38,7 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,
                                             @Nullable Object result,
                                             HttpHeaders trailers) throws Exception {
             if (result instanceof Integer) {
-                return httpResponse(HttpData.ofUtf8(String.format("Integer: %d", result)));
+                return httpResponse(HttpData.ofUtf8(String.format("Integer: %d", (Integer) result)));
             }
             return ResponseConverterFunction.fallthrough();
         }

File: core/src/test/java/com/linecorp/armeria/server/logging/LoggingServiceTest.java
Patch:
@@ -376,8 +376,8 @@ void sanitizeRequestHeaders() throws Exception {
                                       Pattern.compile("com")))
                               .newDecorator().apply(delegate);
 
-        assertThat(ctx.logBuilder().toString().contains("trustin"));
-        assertThat(ctx.logBuilder().toString().contains("test.com"));
+        assertThat(ctx.logBuilder().toString()).contains("trustin");
+        assertThat(ctx.logBuilder().toString()).contains("test.com");
         service.serve(ctx, ctx.request());
         assertThat(ctx.logBuilder().toString()).doesNotContain("trustin");
         assertThat(ctx.logBuilder().toString()).doesNotContain("com");

File: examples/server-sent-events/src/test/java/example/armeria/server/sse/MainTest.java
Patch:
@@ -56,7 +56,7 @@ void testServerSentEvents() {
                     .expectNext(HttpData.ofUtf8("data:2\n\n"))
                     .expectNext(HttpData.ofUtf8("data:3\n\n"))
                     .expectNext(HttpData.ofUtf8("data:4\n\n"))
-                    .assertNext(o -> assertThat(o.isEndOfStream()))
+                    .assertNext(o -> assertThat(o.isEndOfStream()).isTrue())
                     .expectComplete()
                     .verify();
 
@@ -68,7 +68,7 @@ void testServerSentEvents() {
                     .expectNext(HttpData.ofUtf8("id:2\ndata:7\nretry:5000\n\n"))
                     .expectNext(HttpData.ofUtf8("id:3\ndata:8\nretry:5000\n\n"))
                     .expectNext(HttpData.ofUtf8("id:4\ndata:9\nretry:5000\n\n"))
-                    .assertNext(o -> assertThat(o.isEndOfStream()))
+                    .assertNext(o -> assertThat(o.isEndOfStream()).isTrue())
                     .expectComplete()
                     .verify();
     }

File: retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/RetrofitClassAwareMeterIdPrefixFunction.java
Patch:
@@ -158,7 +158,7 @@ private static List<Tag> tagsFromAnnotation(Annotation annotation) {
         } else {
             final Method valueMethod;
             try {
-                valueMethod = annotation.getClass().getMethod("value");
+                valueMethod = annotation.annotationType().getMethod("value");
                 httpPath = (String) valueMethod.invoke(annotation);
             } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
                 // Should never happen on valid Retrofit client.

File: core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedDocServicePluginTest.java
Patch:
@@ -29,6 +29,7 @@
 import static com.linecorp.armeria.internal.server.docs.DocServiceUtil.unifyFilter;
 import static com.linecorp.armeria.server.docs.FieldLocation.HEADER;
 import static com.linecorp.armeria.server.docs.FieldLocation.QUERY;
+import static com.linecorp.armeria.server.docs.FieldRequirement.OPTIONAL;
 import static com.linecorp.armeria.server.docs.FieldRequirement.REQUIRED;
 import static org.assertj.core.api.Assertions.assertThat;
 
@@ -387,7 +388,7 @@ private static FieldInfo createBean1() {
                                        .build();
         final FieldInfo seqNum = FieldInfo.builder("seqNum", LONG)
                                           .location(QUERY)
-                                          .requirement(REQUIRED)
+                                          .requirement(OPTIONAL)
                                           .build();
         return FieldInfo.builder(RequestBean1.class.getSimpleName(), BEAN, uid, seqNum).build();
     }

File: core/src/main/java/com/linecorp/armeria/client/Http1ClientKeepAliveHandler.java
Patch:
@@ -36,7 +36,8 @@ final class Http1ClientKeepAliveHandler extends KeepAliveHandler {
 
     Http1ClientKeepAliveHandler(Channel channel, ClientHttp1ObjectEncoder encoder, Http1ResponseDecoder decoder,
                                 long idleTimeoutMillis, long pingIntervalMillis) {
-        super(channel, "client", idleTimeoutMillis, pingIntervalMillis);
+        // TODO(ikhoon): Should set maxConnectionAgeMillis by https://github.com/line/armeria/pull/2741
+        super(channel, "client", idleTimeoutMillis, pingIntervalMillis, /* maxConnectionAgeMillis */ 0);
         httpSession = HttpSession.get(requireNonNull(channel, "channel"));
         this.encoder = requireNonNull(encoder, "encoder");
         this.decoder = requireNonNull(decoder, "decoder");

File: core/src/main/java/com/linecorp/armeria/client/Http2ClientConnectionHandler.java
Patch:
@@ -103,7 +103,7 @@ public void channelActive(ChannelHandlerContext ctx) throws Exception {
     protected boolean needsImmediateDisconnection() {
         return clientFactory.isClosing() ||
                responseDecoder.goAwayHandler().receivedErrorGoAway() ||
-               keepAliveHandler.isClosing();
+               (keepAliveHandler != null && keepAliveHandler.isClosing());
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java
Patch:
@@ -228,8 +228,7 @@ public void onNext(HttpObject o) {
                 if (o instanceof HttpHeaders) {
                     final HttpHeaders trailers = (HttpHeaders) o;
                     if (trailers.contains(HttpHeaderNames.STATUS)) {
-                        failAndReset(
-                                new IllegalArgumentException("published a trailers with status: " + o));
+                        failAndReset(new IllegalArgumentException("published a trailers with status: " + o));
                         return;
                     }
                     // Trailers always end the stream even if not explicitly set.

File: core/src/main/java/com/linecorp/armeria/server/Http1ServerKeepAliveHandler.java
Patch:
@@ -23,8 +23,8 @@
 import io.netty.channel.ChannelHandlerContext;
 
 class Http1ServerKeepAliveHandler extends KeepAliveHandler {
-    Http1ServerKeepAliveHandler(Channel channel, long idleTimeoutMillis) {
-        super(channel, "server", idleTimeoutMillis, 0);
+    Http1ServerKeepAliveHandler(Channel channel, long idleTimeoutMillis, long maxConnectionAgeMillis) {
+        super(channel, "server", idleTimeoutMillis, 0, maxConnectionAgeMillis);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/server/Http2ServerConnectionHandler.java
Patch:
@@ -46,7 +46,8 @@ final class Http2ServerConnectionHandler extends AbstractHttp2ConnectionHandler
         if (config.idleTimeoutMillis() > 0 || config.pingIntervalMillis() > 0) {
             keepAliveHandler = new Http2ServerKeepAliveHandler(channel, encoder().frameWriter(),
                                                                config.idleTimeoutMillis(),
-                                                               config.pingIntervalMillis());
+                                                               config.pingIntervalMillis(),
+                                                               config.maxConnectionAgeMillis());
         } else {
             keepAliveHandler = null;
         }
@@ -69,7 +70,7 @@ final class Http2ServerConnectionHandler extends AbstractHttp2ConnectionHandler
     protected boolean needsImmediateDisconnection() {
         return gracefulShutdownSupport.isShuttingDown() ||
                requestDecoder.goAwayHandler().receivedErrorGoAway() ||
-               keepAliveHandler.isClosing();
+               (keepAliveHandler != null && keepAliveHandler.isClosing());
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/server/Http2ServerKeepAliveHandler.java
Patch:
@@ -24,8 +24,8 @@
 
 final class Http2ServerKeepAliveHandler extends Http2KeepAliveHandler {
     Http2ServerKeepAliveHandler(Channel channel, Http2FrameWriter frameWriter,
-                                long idleTimeoutMillis, long pingIntervalMillis) {
-        super(channel, frameWriter, "server", idleTimeoutMillis, pingIntervalMillis);
+                                long idleTimeoutMillis, long pingIntervalMillis, long maxConnectionAgeMillis) {
+        super(channel, frameWriter, "server", idleTimeoutMillis, pingIntervalMillis, maxConnectionAgeMillis);
     }
 
     @Override

File: core/src/test/java/com/linecorp/armeria/internal/common/Http2KeepAliveHandlerTest.java
Patch:
@@ -62,7 +62,7 @@ public void setup() throws Exception {
         when(ctx.channel()).thenReturn(channel);
 
         keepAliveHandler = new Http2KeepAliveHandler(channel, frameWriter, "test",
-                                                     idleTimeoutMillis, pingIntervalMillis) {
+                                                     idleTimeoutMillis, pingIntervalMillis, 0) {
             @Override
             protected boolean hasRequestsInProgress(ChannelHandlerContext ctx) {
                 return false;

File: spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaAutoConfiguration.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.linecorp.armeria.spring;
 
+import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationNetUtil.configurePorts;
 import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configureAnnotatedServices;
 import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configureGrpcServices;
 import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configureHttpServices;
-import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configurePorts;
 import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configureServerWithArmeriaSettings;
 import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configureThriftServices;
 

File: spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java
Patch:
@@ -18,10 +18,10 @@
 import static com.google.common.base.MoreObjects.firstNonNull;
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.collect.ImmutableList.toImmutableList;
+import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationNetUtil.configurePorts;
 import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configureAnnotatedServices;
 import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configureGrpcServices;
 import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configureHttpServices;
-import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configurePorts;
 import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configureServerWithArmeriaSettings;
 import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configureThriftServices;
 import static com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configureTls;

File: core/src/main/java/com/linecorp/armeria/server/composition/AbstractCompositeServiceBuilder.java
Patch:
@@ -63,7 +63,10 @@
  * }</pre>
  *
  * @see CompositeServiceEntry
+ *
+ * @deprecated This class will be removed without a replacement.
  */
+@Deprecated
 public abstract class AbstractCompositeServiceBuilder<T extends Service<?, ?>> {
 
     private final List<CompositeServiceEntry<T>> services = new ArrayList<>();

File: core/src/main/java/com/linecorp/armeria/server/composition/CompositeServiceEntry.java
Patch:
@@ -28,7 +28,10 @@
  * A pair of a {@link Route} and an {@link Service} bound to it.
  *
  * @param <T> the {@link Service} type
+ *
+ * @deprecated This class will be removed without a replacement.
  */
+@Deprecated
 public final class CompositeServiceEntry<T extends Service<?, ?>> {
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/composition/SimpleCompositeRpcService.java
Patch:
@@ -27,7 +27,10 @@
 /**
  * A general purpose {@link AbstractCompositeService} implementation. Useful when you do not want to define
  * a new dedicated {@link RpcService} type.
+ *
+ * @deprecated This class will be removed without a replacement.
  */
+@Deprecated
 public final class SimpleCompositeRpcService
         extends AbstractCompositeService<RpcService, RpcRequest, RpcResponse> implements RpcService {
 

File: core/src/main/java/com/linecorp/armeria/server/composition/SimpleCompositeRpcServiceBuilder.java
Patch:
@@ -22,7 +22,10 @@
 /**
  * A general purpose {@link AbstractCompositeServiceBuilder} implementation. Useful when you do not want to
  * define a new dedicated {@link RpcService} builder type.
+ *
+ * @deprecated This class will be removed without a replacement.
  */
+@Deprecated
 public final class SimpleCompositeRpcServiceBuilder extends AbstractCompositeServiceBuilder<RpcService> {
 
     SimpleCompositeRpcServiceBuilder() {}

File: core/src/main/java/com/linecorp/armeria/server/composition/SimpleCompositeService.java
Patch:
@@ -27,7 +27,10 @@
 /**
  * A general purpose {@link AbstractCompositeService} implementation. Useful when you do not want to define
  * a new dedicated {@link HttpService} type.
+ *
+ * @deprecated This class will be removed without a replacement.
  */
+@Deprecated
 public final class SimpleCompositeService
         extends AbstractCompositeService<HttpService, HttpRequest, HttpResponse> implements HttpService {
 

File: core/src/main/java/com/linecorp/armeria/server/composition/SimpleCompositeServiceBuilder.java
Patch:
@@ -22,7 +22,10 @@
 /**
  * A general purpose {@link AbstractCompositeServiceBuilder} implementation. Useful when you do not want to
  * define a new dedicated {@link HttpService} builder type.
+ *
+ * @deprecated This class will be removed without a replacement.
  */
+@Deprecated
 public final class SimpleCompositeServiceBuilder extends AbstractCompositeServiceBuilder<HttpService> {
 
     SimpleCompositeServiceBuilder() {}

File: core/src/test/java/com/linecorp/armeria/client/HttpClientResponseTimeoutTest.java
Patch:
@@ -36,6 +36,7 @@
 import org.junit.jupiter.params.provider.ArgumentsSource;
 
 import com.linecorp.armeria.common.HttpResponse;
+import com.linecorp.armeria.common.RequestContext;
 import com.linecorp.armeria.common.util.TimeoutMode;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.testing.junit.server.ServerExtension;
@@ -112,7 +113,8 @@ public Stream<? extends Arguments> provideArguments(ExtensionContext extensionCo
             final Stream<Consumer<? super ClientRequestContext>> timeoutCustomizers = Stream.of(
                     ctx -> ctx.setResponseTimeoutAt(Instant.now().minusSeconds(1)),
                     ctx -> ctx.setResponseTimeoutMillis(TimeoutMode.SET_FROM_NOW, 1000),
-                    ctx -> ctx.setResponseTimeoutMillis(TimeoutMode.SET_FROM_START, 1000)
+                    ctx -> ctx.setResponseTimeoutMillis(TimeoutMode.SET_FROM_START, 1000),
+                    RequestContext::timeoutNow
             );
             return timeoutCustomizers.map(Arguments::of);
         }

File: core/src/test/java/com/linecorp/armeria/server/HttpServerKeepAliveHandlerTest.java
Patch:
@@ -97,6 +97,7 @@ protected void configure(ServerBuilder sb) throws Exception {
         protected void configure(ServerBuilder sb) throws Exception {
             sb.idleTimeoutMillis(0);
             sb.pingIntervalMillis(0);
+            sb.requestTimeoutMillis(1000);
             sb.service("/", (ctx, req) -> HttpResponse.of("OK"));
             sb.service("/streaming", (ctx, req) -> HttpResponse.streaming());
         }

File: core/src/test/java/com/linecorp/armeria/client/Http2ClientSettingsTest.java
Patch:
@@ -218,7 +218,7 @@ public void onGoAwayRead(ChannelHandlerContext ctx, int lastStreamId, long error
         }
     }
 
-    private static byte[] readBytes(InputStream in, int length) throws IOException {
+    static byte[] readBytes(InputStream in, int length) throws IOException {
         final byte[] buf = new byte[length];
         ByteStreams.readFully(in, buf);
         return buf;

File: core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java
Patch:
@@ -270,7 +270,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
             } else {
                 typeInfo = String.valueOf(msg);
             }
-            throw new IllegalStateException("unexpected message type: " + typeInfo);
+            throw new IllegalStateException("unexpected message type: " + typeInfo + " (expected: ByteBuf)");
         } finally {
             ReferenceCountUtil.release(msg);
         }

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRpcClientBuilder.java
Patch:
@@ -27,15 +27,15 @@
 public final class CircuitBreakerRpcClientBuilder
         extends AbstractCircuitBreakerClientBuilder<RpcResponse> {
 
-    CircuitBreakerRpcClientBuilder(CircuitBreakerStrategyWithContent<RpcResponse> strategyWithContent) {
-        super(strategyWithContent);
+    CircuitBreakerRpcClientBuilder(CircuitBreakerRuleWithContent<RpcResponse> ruleWithContent) {
+        super(ruleWithContent);
     }
 
     /**
      * Returns a newly-created {@link CircuitBreakerRpcClient} based on the properties of this builder.
      */
     public CircuitBreakerRpcClient build(RpcClient delegate) {
-        return new CircuitBreakerRpcClient(delegate, mapping(), strategyWithContent());
+        return new CircuitBreakerRpcClient(delegate, mapping(), ruleWithContent());
     }
 
     /**

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClientIntegrationTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.net.ConnectException;
 import java.time.Duration;
-import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionException;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
@@ -51,7 +50,7 @@ void abortOnFailFast() throws Exception {
                 WebClient.builder()
                          .decorator(CircuitBreakerClient.newDecorator(
                                  circuitBreaker,
-                                 (ctx, cause) -> CompletableFuture.completedFuture(false)))
+                                 CircuitBreakerRule.onException()))
                          .build();
 
         for (int i = 0; i < 3; i++) {

File: core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java
Patch:
@@ -221,7 +221,7 @@ public boolean equals(AsciiString a, AsciiString b) {
             HttpHeaderNames.SCHEME, HttpHeaderNames.STATUS, HttpHeaderNames.METHOD, HttpHeaderNames.PATH);
 
     public static final String SERVER_HEADER =
-            "Armeria/" + Version.getAll(ArmeriaHttpUtil.class.getClassLoader()).get("armeria")
+            "Armeria/" + Version.get("armeria", ArmeriaHttpUtil.class.getClassLoader())
                                 .artifactVersion();
 
     /**

File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContextWrapper.java
Patch:
@@ -45,7 +45,7 @@ protected ClientRequestContextWrapper(ClientRequestContext delegate) {
 
     @Override
     public ClientRequestContext newDerivedContext(RequestId id, @Nullable HttpRequest req,
-                                                  @Nullable RpcRequest rpcReq, Endpoint endpoint) {
+                                                  @Nullable RpcRequest rpcReq, @Nullable Endpoint endpoint) {
         return delegate().newDerivedContext(id, req, rpcReq, endpoint);
     }
 

File: core/src/main/java/com/linecorp/armeria/client/endpoint/EndpointGroup.java
Patch:
@@ -136,7 +136,8 @@ static EndpointGroup of(EndpointSelectionStrategy selectionStrategy,
      * Selects an {@link Endpoint} from this {@link EndpointGroup}.
      *
      * @return the {@link Endpoint} selected by the {@link EndpointSelectionStrategy},
-     *         which was specified when constructing this {@link EndpointGroup}.
+     *         which was specified when constructing this {@link EndpointGroup},
+     *         or {@code null} if this {@link EndpointGroup} is empty.
      */
     @Override
     Endpoint select(ClientRequestContext ctx);

File: core/src/main/java/com/linecorp/armeria/client/endpoint/RoundRobinStrategy.java
Patch:
@@ -56,7 +56,7 @@ public Endpoint select(ClientRequestContext ctx) {
             final int currentSequence = sequence.getAndIncrement();
 
             if (endpoints.isEmpty()) {
-                throw EmptyEndpointGroupException.get();
+                return null;
             }
             return endpoints.get(Math.abs(currentSequence % endpoints.size()));
         }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/StaticEndpointGroup.java
Patch:
@@ -83,9 +83,7 @@ public String toString() {
     private static class EmptyEndpointSelectionStrategy implements EndpointSelectionStrategy {
         @Override
         public EndpointSelector newSelector(EndpointGroup endpointGroup) {
-            return ctx -> {
-                throw EmptyEndpointGroupException.get();
-            };
+            return ctx -> null;
         }
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/StickyEndpointSelectionStrategy.java
Patch:
@@ -85,7 +85,7 @@ public Endpoint select(ClientRequestContext ctx) {
 
             final List<Endpoint> endpoints = endpointGroup.endpoints();
             if (endpoints.isEmpty()) {
-                throw EmptyEndpointGroupException.get();
+                return null;
             }
 
             final long key = requestContextHasher.applyAsLong(ctx);

File: core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java
Patch:
@@ -239,6 +239,9 @@ protected static void scheduleNextRetry(ClientRequestContext ctx,
                         // future is cancelled when the client factory is closed.
                         actionOnException.accept(new IllegalStateException(
                                 ClientFactory.class.getSimpleName() + " has been closed."));
+                    } else if (future.cause() != null) {
+                        // Other unexpected exceptions.
+                        actionOnException.accept(future.cause());
                     }
                 });
             }

File: core/src/test/java/com/linecorp/armeria/client/endpoint/RoundRobinStrategyTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import static com.linecorp.armeria.client.endpoint.EndpointSelectionStrategy.roundRobin;
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
 import org.junit.jupiter.api.Test;
 
@@ -52,7 +51,6 @@ void select() {
     @Test
     void selectEmpty() {
         assertThat(group.select(ctx)).isNotNull();
-
-        assertThatThrownBy(() -> emptyGroup.select(ctx)).isInstanceOf(EmptyEndpointGroupException.class);
+        assertThat(emptyGroup.select(ctx)).isNull();
     }
 }

File: core/src/test/java/com/linecorp/armeria/client/endpoint/StickyEndpointSelectionStrategyTest.java
Patch:
@@ -17,7 +17,6 @@
 package com.linecorp.armeria.client.endpoint;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
 import java.util.function.ToLongFunction;
 
@@ -85,8 +84,7 @@ void select() {
         assertThat(dynamicGroup.select(contextWithHeader(STICKY_HEADER_NAME, "armeria1"))).isEqualTo(ep4);
 
         dynamicGroup.removeEndpoint(ep4);
-        assertThatThrownBy(() -> dynamicGroup.select(contextWithHeader(STICKY_HEADER_NAME, "armeria1")))
-                .isInstanceOf(EmptyEndpointGroupException.class);
+        assertThat(dynamicGroup.select(contextWithHeader(STICKY_HEADER_NAME, "armeria1"))).isNull();
     }
 
     private static ClientRequestContext contextWithHeader(String k, String v) {

File: core/src/test/java/com/linecorp/armeria/client/endpoint/WeightedRoundRobinStrategyTest.java
Patch:
@@ -19,7 +19,6 @@
 import static com.linecorp.armeria.client.endpoint.EndpointSelectionStrategy.roundRobin;
 import static com.linecorp.armeria.client.endpoint.EndpointSelectionStrategy.weightedRoundRobin;
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
 import java.util.List;
 import java.util.Random;
@@ -45,7 +44,7 @@ void select() {
                                     Endpoint.parse("localhost:2345"))
                                 .select(ctx)).isNotNull();
 
-        assertThatThrownBy(() -> emptyGroup.select(ctx)).isInstanceOf(EmptyEndpointGroupException.class);
+        assertThat(emptyGroup.select(ctx)).isNull();
     }
 
     @Test

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientWithContextAwareTest.java
Patch:
@@ -34,7 +34,7 @@
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.testing.junit.server.ServerExtension;
 
-class RetryingHttpClientWithContextAwareTest {
+class RetryingClientWithContextAwareTest {
 
     @RegisterExtension
     static final ServerExtension server = new ServerExtension() {

File: core/src/test/java/com/linecorp/armeria/client/WebClientBuilderTest.java
Patch:
@@ -84,7 +84,6 @@ void authorityHeader() {
         final AggregatedHttpRequest request = AggregatedHttpRequest.of(
                 requestHeadersBuilder.method(HttpMethod.GET).build());
         final HttpResponse response = WebClient.of().execute(request);
-        assertThat(response.isOpen()).isTrue();
         assertThat(response.aggregate().join().contentUtf8()).isEqualTo(path);
     }
 

File: core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java
Patch:
@@ -218,10 +218,10 @@ private static boolean isValidPath(HttpRequest req) {
     private static void handleEarlyRequestException(ClientRequestContext ctx,
                                                     HttpRequest req, Throwable cause) {
         try (SafeCloseable ignored = RequestContextUtil.pop()) {
-            req.abort(cause);
             final RequestLogBuilder logBuilder = ctx.logBuilder();
             logBuilder.endRequest(cause);
             logBuilder.endResponse(cause);
+            req.abort(cause);
         }
     }
 

File: core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java
Patch:
@@ -330,8 +330,8 @@ private void fail(Throwable cause) {
                 logBuilder.endResponse(cause);
             }
         } else {
-            originalRes.close(cause);
             logBuilder.endResponse(cause);
+            originalRes.close(cause);
         }
     }
 

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java
Patch:
@@ -188,9 +188,9 @@ private void doExecute0(ClientRequestContext ctx, RpcRequest req,
         final RpcResponse res = executeWithFallback(delegate(), derivedCtx,
                                                     (context, cause) -> RpcResponse.ofFailure(cause));
 
-        res.handle((unused1, unused2) -> {
+        res.handle((unused1, cause) -> {
             try {
-                retryRuleWithContent().shouldRetry(derivedCtx, res).handle((decision, unused3) -> {
+                retryRuleWithContent().shouldRetry(derivedCtx, res, cause).handle((decision, unused3) -> {
                     final Backoff backoff = decision != null ? decision.backoff() : null;
                     if (backoff != null) {
                         final long nextDelay = getNextDelay(derivedCtx, backoff);
@@ -199,7 +199,7 @@ private void doExecute0(ClientRequestContext ctx, RpcRequest req,
                             return null;
                         }
 
-                        scheduleNextRetry(ctx, cause -> handleException(ctx, future, cause, false),
+                        scheduleNextRetry(ctx, cause0 -> handleException(ctx, future, cause0, false),
                                           () -> doExecute0(ctx, req, returnedRes, future), nextDelay);
                     } else {
                         onRetryComplete(ctx, derivedCtx, res, future);

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientBuilderTest.java
Patch:
@@ -35,9 +35,9 @@ void cannotSetContentPreviewLengthWhenRetryStrategyIsUsed() {
 
     @Test
     void contentPreviewLengthCannotBeZero() {
-        final RetryRuleWithContent<HttpResponse> strategy =
-                (ctx, response) -> response.aggregate().handle((unused1, unused2) -> null);
-        assertThatThrownBy(() -> RetryingClient.builder(strategy).contentPreviewLength(0))
+        final RetryRuleWithContent<HttpResponse> rule =
+                (ctx, response, cause) -> response.aggregate().handle((unused1, unused2) -> null);
+        assertThatThrownBy(() -> RetryingClient.builder(rule).contentPreviewLength(0))
                 .isExactlyInstanceOf(IllegalArgumentException.class);
     }
 }

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientWithMetricsTest.java
Patch:
@@ -101,8 +101,8 @@ public void destroy() {
     // In this case, all of the requests and responses are recorded.
     @Test
     void retryingThenMetricCollecting() throws Exception {
-        final RetryRuleWithContent<HttpResponse> retryStrategy =
-                (ctx, response) -> response.aggregate().handle((msg, cause) -> {
+        final RetryRuleWithContent<HttpResponse> rule =
+                (ctx, response, cause) -> response.aggregate().handle((msg, unused) -> {
                     if ("hello".equals(msg.contentUtf8())) {
                         return RetryDecision.noRetry();
                     }
@@ -111,7 +111,7 @@ void retryingThenMetricCollecting() throws Exception {
         final WebClient client = WebClient.builder(server.httpUri())
                                           .factory(clientFactory)
                                           .decorator(MetricCollectingClient.newDecorator(meterIdPrefixFunction))
-                                          .decorator(RetryingClient.builder(retryStrategy).newDecorator())
+                                          .decorator(RetryingClient.newDecorator(rule))
                                           .build();
         assertThat(client.get("/hello").aggregate().join().contentUtf8()).isEqualTo("hello");
 

File: core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClientBuilder.java
Patch:
@@ -126,7 +126,7 @@ int maxTotalAttempts() {
      *
      * @return {@code this} to support method chaining.
      *
-     * @see <a href="https://line.github.io/armeria/advanced-retry.html#per-attempt-timeout">Per-attempt
+     * @see <a href="https://line.github.io/armeria/docs/client-retry#per-attempt-timeout">Per-attempt
      *      timeout</a>
      */
     public AbstractRetryingClientBuilder<O> responseTimeoutMillisForEachAttempt(
@@ -148,7 +148,7 @@ long responseTimeoutMillisForEachAttempt() {
      *
      * @return {@code this} to support method chaining.
      *
-     * @see <a href="https://line.github.io/armeria/advanced-retry.html#per-attempt-timeout">Per-attempt
+     * @see <a href="https://line.github.io/armeria/docs/client-retry#per-attempt-timeout">Per-attempt
      *      timeout</a>
      */
     public AbstractRetryingClientBuilder<O> responseTimeoutForEachAttempt(

File: core/src/main/java/com/linecorp/armeria/common/logging/RequestContextExporterBuilder.java
Patch:
@@ -148,7 +148,7 @@ private static AsciiString toHeaderName(CharSequence name) {
 
     /**
      * Adds the property represented by the specified key pattern to the export list. Please refer to the
-     * <a href="https://line.github.io/armeria/advanced-logging.html">Logging contextual information</a>
+     * <a href="https://line.github.io/armeria/docs/advanced-logging">Logging contextual information</a>
      * in order to learn how to specify a key pattern.
      */
     public RequestContextExporterBuilder addKeyPattern(String keyPattern) {

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java
Patch:
@@ -77,7 +77,7 @@
 /**
  * An {@link HttpService} which is defined by a {@link Path} or HTTP method annotations.
  * This class is not supposed to be instantiated by a user. Please check out the documentation
- * <a href="https://line.github.io/armeria/server-annotated-service.html#annotated-http-service">
+ * <a href="https://line.github.io/armeria/docs/server-annotated-service">
  * Annotated HTTP Service</a> to use this.
  */
 public class AnnotatedService implements HttpService {

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceFactory.java
Patch:
@@ -112,7 +112,7 @@
 /**
  * Builds a list of {@link AnnotatedService}s from an {@link Object}.
  * This class is not supposed to be used by a user. Please check out the documentation
- * <a href="https://line.github.io/armeria/server-annotated-service.html#annotated-http-service">
+ * <a href="https://line.github.io/armeria/docs/server-annotated-service">
  * Annotated HTTP Service</a> to use {@link AnnotatedService}.
  */
 public final class AnnotatedServiceFactory {

File: examples/annotated-http-service/src/main/java/example/armeria/server/annotated/ExceptionHandlerService.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * Examples how to use {@link ExceptionHandler}.
  *
- * @see <a href="https://line.github.io/armeria/server-annotated-service.html#handling-exceptions">
+ * @see <a href="https://line.github.io/armeria/docs/server-annotated-service#handling-exceptions">
  *      Handling exceptions</a>
  */
 @LoggingDecorator(

File: examples/annotated-http-service/src/main/java/example/armeria/server/annotated/InjectionService.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Examples how to use {@link Param}, {@link Header} and {@link Cookies}.
  *
- * @see <a href="https://line.github.io/armeria/server-annotated-service.html#parameter-injection">
+ * @see <a href="https://line.github.io/armeria/docs/server-annotated-service#parameter-injection">
  *      Parameter injection</a>
  */
 @LoggingDecorator(

File: examples/annotated-http-service/src/main/java/example/armeria/server/annotated/MessageConverterService.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * Examples how to use {@link RequestConverter} and {@link ResponseConverter}.
  *
- * @see <a href="https://line.github.io/armeria/server-annotated-service.html#conversion-between-an-http-message-and-a-java-object">
+ * @see <a href="https://line.github.io/armeria/docs/server-annotated-service#conversion-between-an-http-message-and-a-java-object">
  *      Conversion between an HTTP message and a Java object</a>
  */
 @LoggingDecorator(
@@ -97,7 +97,7 @@ public Response json3(@RequestObject Request request) {
      * be executed after the future is completed with the {@link Response} object.
      *
      * <p>Note that the {@link ServiceRequestContext} of the request is also automatically injected. See
-     * <a href="https://line.github.io/armeria/server-annotated-service.html#other-classes-automatically-injected">
+     * <a href="https://line.github.io/armeria/docs/server-annotated-service#other-classes-automatically-injected">
      * Other classes automatically injected</a> for more information.
      */
     @Post("/obj/future")

File: examples/annotated-http-service/src/main/java/example/armeria/server/annotated/PathPatternService.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * Examples how to use path patterns provided by Armeria.
  *
- * @see <a href="https://line.github.io/armeria/server-annotated-service.html#mapping-http-service-methods">
+ * @see <a href="https://line.github.io/armeria/docs/server-annotated-service#mapping-http-service-methods">
  *      Mapping HTTP service methods</a>
  */
 @LoggingDecorator(

File: examples/grpc-reactor/src/main/java/example/armeria/grpc/reactor/HelloServiceImpl.java
Patch:
@@ -39,7 +39,7 @@ public Mono<HelloReply> lazyHello(Mono<HelloRequest> request) {
     /**
      * Sends a {@link HelloReply} using {@code blockingTaskExecutor}.
      *
-     * @see <a href="https://line.github.io/armeria/server-grpc.html#blocking-service-implementation">Blocking
+     * @see <a href="https://line.github.io/armeria/docs/server-grpc#blocking-service-implementation">Blocking
      *      service implementation</a>
      */
     @Override

File: examples/grpc-reactor/src/main/java/example/armeria/grpc/reactor/Main.java
Patch:
@@ -51,7 +51,7 @@ static Server newServer(int httpPort, int httpsPort) throws Exception {
                      .tlsSelfSigned()
                      .service(grpcService)
                      // You can access the documentation service at http://127.0.0.1:8080/docs.
-                     // See https://line.github.io/armeria/server-docservice.html for more information.
+                     // See https://line.github.io/armeria/docs/server-docservice for more information.
                      .serviceUnder("/docs",
                              DocService.builder()
                                        .exampleRequestForMethod(

File: examples/grpc/src/main/java/example/armeria/grpc/HelloServiceImpl.java
Patch:
@@ -39,7 +39,7 @@ public void lazyHello(HelloRequest request, StreamObserver<HelloReply> responseO
     /**
      * Sends a {@link HelloReply} using {@code blockingTaskExecutor}.
      *
-     * @see <a href="https://line.github.io/armeria/server-grpc.html#blocking-service-implementation">Blocking
+     * @see <a href="https://line.github.io/armeria/docs/server-grpc#blocking-service-implementation">Blocking
      *      service implementation</a>
      */
     @Override

File: examples/grpc/src/main/java/example/armeria/grpc/Main.java
Patch:
@@ -51,7 +51,7 @@ static Server newServer(int httpPort, int httpsPort) throws Exception {
                      .tlsSelfSigned()
                      .service(grpcService)
                      // You can access the documentation service at http://127.0.0.1:8080/docs.
-                     // See https://line.github.io/armeria/server-docservice.html for more information.
+                     // See https://line.github.io/armeria/docs/server-docservice for more information.
                      .serviceUnder("/docs",
                              DocService.builder()
                                        .exampleRequestForMethod(HelloServiceGrpc.SERVICE_NAME,

File: examples/proxy-server/src/main/java/example/armeria/proxy/ProxyService.java
Patch:
@@ -30,8 +30,8 @@ public final class ProxyService extends AbstractHttpService {
     /**
      * We used hardcoded backend addresses. But you can use other service discovery mechanisms to configure
      * backends dynamically using {@link DnsServiceEndpointGroup}, ZooKeeper or Central Dogma.
-     * See <a href="https://line.github.io/armeria/client-service-discovery.html">service discovery</a>,
-     * <a href="https://line.github.io/armeria/advanced-zookeeper.html#advanced-zookeeper">Service discovery
+     * See <a href="https://line.github.io/armeria/docs/client-service-discovery">service discovery</a>,
+     * <a href="https://line.github.io/armeria/docs/advanced-zookeeper">Service discovery
      * with ZooKeeper</a> and <a href="https://line.github.io/centraldogma/">centraldogma</a>.
      */
     private static final EndpointGroup animationGroup = EndpointGroup.of(

File: examples/spring-boot-minimal/src/main/java/example/springframework/boot/minimal/HelloAnnotatedService.java
Patch:
@@ -13,7 +13,7 @@
  * Note that this is not a Spring-based component but an annotated HTTP service that leverages
  * Armeria's built-in annotations.
  *
- * @see <a href="https://line.github.io/armeria/server-annotated-service.html">Annotated HTTP Service</a>
+ * @see <a href="https://line.github.io/armeria/docs/server-annotated-service">Annotated HTTP Service</a>
  */
 @Component
 @Validated

File: logback/src/main/java/com/linecorp/armeria/common/logback/RequestContextExportingAppender.java
Patch:
@@ -50,7 +50,7 @@
  * A <a href="https://logback.qos.ch/">Logback</a> {@link Appender} that exports the properties of the current
  * {@link RequestContext} to {@link MDC}.
  *
- * <p>Read '<a href="https://line.github.io/armeria/advanced-logging.html">Logging contextual information</a>'
+ * <p>Read '<a href="https://line.github.io/armeria/docs/advanced-logging">Logging contextual information</a>'
  * for more information.
  */
 public final class RequestContextExportingAppender

File: logback/src/main/java/com/linecorp/armeria/common/logback/package-info.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * <a href="https://logback.qos.ch/">Logback</a> integration.
  *
- * <p>Read '<a href="https://line.github.io/armeria/server-basics.html">Logging contextual information</a>'
+ * <p>Read '<a href="https://line.github.io/armeria/docs/server-basics">Logging contextual information</a>'
  * for more information.
  */
 @NonNullByDefault

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlServiceProvider.java
Patch:
@@ -40,7 +40,7 @@
 /**
  * A SAML service provider implementation.
  *
- * @see <a href="https://line.github.io/armeria/advanced-saml.html">SAML Single Sign-On</a>
+ * @see <a href="https://line.github.io/armeria/docs/advanced-saml">SAML Single Sign-On</a>
  */
 public final class SamlServiceProvider {
 

File: benchmarks/src/jmh/java/com/linecorp/armeria/core/client/retry/WithDuplicator.java
Patch:
@@ -20,7 +20,7 @@
 import org.openjdk.jmh.annotations.State;
 
 import com.linecorp.armeria.client.WebClient;
-import com.linecorp.armeria.client.retry.RetryStrategyWithContent;
+import com.linecorp.armeria.client.retry.RetryRuleWithContent;
 import com.linecorp.armeria.client.retry.RetryingClient;
 import com.linecorp.armeria.common.HttpResponse;
 
@@ -29,7 +29,7 @@ public class WithDuplicator extends RetryingClientBase {
 
     @Override
     protected WebClient newClient() {
-        final RetryStrategyWithContent<HttpResponse> retryStrategy =
+        final RetryRuleWithContent<HttpResponse> retryStrategy =
                 (ctx, response) -> response.aggregate().handle((unused1, unused2) -> null);
 
         return WebClient.builder(baseUrl())

File: benchmarks/src/jmh/java/com/linecorp/armeria/core/client/retry/WithoutDuplicator.java
Patch:
@@ -20,7 +20,7 @@
 import org.openjdk.jmh.annotations.State;
 
 import com.linecorp.armeria.client.WebClient;
-import com.linecorp.armeria.client.retry.RetryStrategy;
+import com.linecorp.armeria.client.retry.RetryRule;
 import com.linecorp.armeria.client.retry.RetryingClient;
 
 @State(Scope.Benchmark)
@@ -29,7 +29,7 @@ public class WithoutDuplicator extends RetryingClientBase {
     @Override
     protected WebClient newClient() {
         return WebClient.builder(baseUrl())
-                        .decorator(RetryingClient.newDecorator(RetryStrategy.never()))
+                        .decorator(RetryingClient.newDecorator(RetryRule.builder().thenNoRetry()))
                         .build();
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClientBuilder.java
Patch:
@@ -27,16 +27,16 @@
  */
 public final class RetryingRpcClientBuilder extends AbstractRetryingClientBuilder<RpcResponse> {
 
-    RetryingRpcClientBuilder(RetryStrategyWithContent<RpcResponse> retryStrategyWithContent) {
-        super(retryStrategyWithContent);
+    RetryingRpcClientBuilder(RetryRuleWithContent<RpcResponse> retryRuleWithContent) {
+        super(retryRuleWithContent);
     }
 
     /**
      * Returns a newly-created {@link RetryingRpcClient} based on the properties of this builder.
      */
     public RetryingRpcClient build(RpcClient delegate) {
         return new RetryingRpcClient(
-                delegate, retryStrategyWithContent(), maxTotalAttempts(),
+                delegate, retryRuleWithContent(), maxTotalAttempts(),
                 responseTimeoutMillisForEachAttempt());
     }
 

File: core/src/main/java/com/linecorp/armeria/common/Cookie.java
Patch:
@@ -170,7 +170,7 @@ static String toCookieHeader(boolean strict, Iterable<? extends Cookie> cookies)
 
         requireNonNull(cookies, "cookies");
         final Iterator<? extends Cookie> it = cookies.iterator();
-        checkArgument(it.hasNext(), "cookies is empty");
+        checkArgument(it.hasNext(), "cookies is empty.");
         return ClientCookieEncoder.encode(strict, it);
     }
 
@@ -188,7 +188,7 @@ static String toCookieHeader(boolean strict, Iterable<? extends Cookie> cookies)
      */
     static String toCookieHeader(boolean strict, Collection<? extends Cookie> cookies) {
         requireNonNull(cookies, "cookies");
-        checkArgument(!cookies.isEmpty(), "cookies is empty");
+        checkArgument(!cookies.isEmpty(), "cookies is empty.");
         return ClientCookieEncoder.encode(strict, cookies.iterator());
     }
 

File: core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessageDuplicator.java
Patch:
@@ -1026,7 +1026,7 @@ Object get(int offset) {
 
             final int length = elements.length;
             final int convertedIndex = offset & length - 1;
-            checkState(size > 0, "queue is empty");
+            checkState(size > 0, "queue is empty.");
             checkArgument(head < tail ? head <= convertedIndex && convertedIndex < tail
                                       : head <= convertedIndex && convertedIndex < length ||
                                         0 <= convertedIndex && convertedIndex < tail,

File: core/src/main/java/com/linecorp/armeria/common/util/CompositeException.java
Patch:
@@ -101,7 +101,7 @@ public CompositeException(Iterable<? extends Throwable> errors) {
             }
         }
         if (deDupedExceptions.isEmpty()) {
-            throw new IllegalArgumentException("errors is empty");
+            throw new IllegalArgumentException("errors is empty.");
         }
         exceptions = ImmutableList.copyOf(deDupedExceptions);
         message = exceptions.size() + " exceptions occurred. ";

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedElementNameUtil.java
Patch:
@@ -40,7 +40,7 @@ static String findName(Param param, Object nameRetrievalTarget) {
 
         final String value = param.value();
         if (DefaultValues.isSpecified(value)) {
-            checkArgument(!value.isEmpty(), "value is empty");
+            checkArgument(!value.isEmpty(), "value is empty.");
             return value;
         }
         return getName(nameRetrievalTarget);
@@ -61,7 +61,7 @@ static String findName(Header header, Object nameRetrievalTarget) {
 
         final String value = header.value();
         if (DefaultValues.isSpecified(value)) {
-            checkArgument(!value.isEmpty(), "value is empty");
+            checkArgument(!value.isEmpty(), "value is empty.");
             return value;
         }
         return toHeaderName(getName(nameRetrievalTarget));
@@ -88,7 +88,7 @@ private static String getName(Object element) {
     @VisibleForTesting
     static String toHeaderName(String name) {
         requireNonNull(name, "name");
-        checkArgument(!name.isEmpty(), "name is empty");
+        checkArgument(!name.isEmpty(), "name is empty.");
 
         final String upperCased = Ascii.toUpperCase(name);
         if (name.equals(upperCased)) {

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceFactory.java
Patch:
@@ -734,7 +734,7 @@ static String findDescription(AnnotatedElement annotatedElement) {
         if (description != null) {
             final String value = description.value();
             if (DefaultValues.isSpecified(value)) {
-                checkArgument(!value.isEmpty(), "value is empty");
+                checkArgument(!value.isEmpty(), "value is empty.");
                 return value;
             }
         }

File: core/src/main/java/com/linecorp/armeria/server/AbstractBindingBuilder.java
Patch:
@@ -241,7 +241,7 @@ public AbstractBindingBuilder methods(HttpMethod... methods) {
      */
     public AbstractBindingBuilder methods(Iterable<HttpMethod> methods) {
         requireNonNull(methods, "methods");
-        checkArgument(!Iterables.isEmpty(methods), "methods can't be empty");
+        checkArgument(!Iterables.isEmpty(methods), "methods can't be empty.");
         this.methods = Sets.immutableEnumSet(methods);
         return this;
     }

File: core/src/main/java/com/linecorp/armeria/server/docs/FieldInfoBuilder.java
Patch:
@@ -57,7 +57,7 @@ public final class FieldInfoBuilder {
         this.name = requireNonNull(name, "name");
         this.typeSignature = typeSignature;
         checkArgument(!Iterables.isEmpty(requireNonNull(childFieldInfos, "childFieldInfos")),
-                      "childFieldInfos can't be empty");
+                      "childFieldInfos can't be empty.");
         this.childFieldInfos = ImmutableList.copyOf(childFieldInfos);
     }
 

File: core/src/test/java/com/linecorp/armeria/client/HttpClientUnwrapTest.java
Patch:
@@ -21,7 +21,7 @@
 
 import com.linecorp.armeria.client.encoding.DecodingClient;
 import com.linecorp.armeria.client.logging.LoggingClient;
-import com.linecorp.armeria.client.retry.RetryStrategy;
+import com.linecorp.armeria.client.retry.RetryRule;
 import com.linecorp.armeria.client.retry.RetryingClient;
 import com.linecorp.armeria.common.util.Unwrappable;
 
@@ -32,7 +32,7 @@ void test() {
         final WebClient client =
                 WebClient.builder()
                          .decorator(LoggingClient.newDecorator())
-                         .decorator(RetryingClient.newDecorator(RetryStrategy.never()))
+                         .decorator(RetryingClient.newDecorator(RetryRule.builder().thenNoRetry()))
                          .build();
 
         assertThat(client.as(WebClient.class)).isSameAs(client);

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientAuthorityHeaderTest.java
Patch:
@@ -81,7 +81,8 @@ private static WebClient newHttpClientWithEndpointGroup() {
                 Endpoint.of("www.bar.com", backend2.httpPort()).withIpAddr("127.0.0.1"));
 
         return WebClient.builder(SessionProtocol.H2C, endpointGroup)
-                        .decorator(RetryingClient.newDecorator(RetryStrategy.onServerErrorStatus()))
+                        .decorator(RetryingClient.newDecorator(
+                                RetryRule.builder().onServerErrorStatus().onException().thenBackoff()))
                         .build();
     }
 }

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingHttpClientWithContextAwareTest.java
Patch:
@@ -49,7 +49,7 @@ void contextAwareDoesNotThrowException() {
         final WebClient client =
                 WebClient.builder(server.httpUri())
                          .responseTimeoutMillis(100)
-                         .decorator(RetryingClient.builder(RetryStrategy.onServerErrorStatus())
+                         .decorator(RetryingClient.builder(RetryRule.failsafe())
                                                   .maxTotalAttempts(2)
                                                   .newDecorator())
                          .build();

File: core/src/test/java/com/linecorp/armeria/server/AbstractBindingBuilderTest.java
Patch:
@@ -114,6 +114,6 @@ void shouldFailOnDuplicatedMethod() {
     void nonEmptyMethod() {
         assertThatThrownBy(() -> new AbstractBindingBuilder() {}.methods(ImmutableList.of()))
                 .isInstanceOf(IllegalArgumentException.class)
-                .hasMessageContaining("methods can't be empty");
+                .hasMessageContaining("methods can't be empty.");
     }
 }

File: thrift/src/main/java/com/linecorp/armeria/internal/common/thrift/ThriftFunction.java
Patch:
@@ -356,7 +356,7 @@ private static TFieldIdEnum[] getArgFields0(Type type, Class<?> funcClass, Strin
             final Class<?> fieldIdEnumType =
                     Class.forName(fieldIdEnumTypeName, false, funcClass.getClassLoader());
             return (TFieldIdEnum[]) requireNonNull(fieldIdEnumType.getEnumConstants(),
-                                                   "field enum may not be empty");
+                                                   "field enum may not be empty.");
         } catch (Exception e) {
             throw new IllegalStateException("cannot determine the arg fields of method: " + methodName, e);
         }

File: thrift/src/test/java/com/linecorp/armeria/internal/client/thrift/THttpClientUnwrapTest.java
Patch:
@@ -17,15 +17,15 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import java.util.concurrent.CompletableFuture;
-
 import org.junit.jupiter.api.Test;
 
 import com.linecorp.armeria.client.Client;
 import com.linecorp.armeria.client.Clients;
 import com.linecorp.armeria.client.circuitbreaker.CircuitBreakerRpcClient;
 import com.linecorp.armeria.client.logging.LoggingClient;
+import com.linecorp.armeria.client.retry.RetryRuleWithContent;
 import com.linecorp.armeria.client.retry.RetryingRpcClient;
+import com.linecorp.armeria.common.RpcResponse;
 import com.linecorp.armeria.common.util.Unwrappable;
 import com.linecorp.armeria.service.test.thrift.main.HelloService;
 
@@ -37,7 +37,7 @@ void test() {
                 Clients.builder("tbinary+http://127.0.0.1:1/")
                        .decorator(LoggingClient.newDecorator())
                        .rpcDecorator(RetryingRpcClient.newDecorator(
-                               (ctx, response) -> CompletableFuture.completedFuture(null)))
+                               RetryRuleWithContent.<RpcResponse>builder().thenNoRetry()))
                        .build(HelloService.Iface.class);
 
         assertThat(Clients.unwrap(client, HelloService.Iface.class)).isSameAs(client);

File: zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListenerBuilder.java
Patch:
@@ -73,7 +73,7 @@ public final class ZooKeeperUpdatingListenerBuilder extends AbstractCuratorFrame
     ZooKeeperUpdatingListenerBuilder(CuratorFramework client, String zNodePath) {
         super(client);
         this.zNodePath = zNodePath;
-        checkArgument(!this.zNodePath.isEmpty(), "zNodePath can't be empty");
+        checkArgument(!this.zNodePath.isEmpty(), "zNodePath can't be empty.");
     }
 
     /**
@@ -85,7 +85,7 @@ public final class ZooKeeperUpdatingListenerBuilder extends AbstractCuratorFrame
     ZooKeeperUpdatingListenerBuilder(String zkConnectionStr, String zNodePath) {
         super(zkConnectionStr);
         this.zNodePath = zNodePath;
-        checkArgument(!this.zNodePath.isEmpty(), "zNodePath can't be empty");
+        checkArgument(!this.zNodePath.isEmpty(), "zNodePath can't be empty.");
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/client/metric/MetricCollectingRpcClient.java
Patch:
@@ -33,7 +33,7 @@
  * <pre>{@code
  * MyService.Iface client =
  *     Clients.builder(uri)
- *            .decorator(MetricCollectingRpcClient.newDecorator(MeterIdPrefixFunction.ofDefault("myClient")))
+ *            .rpcDecorator(MetricCollectingRpcClient.newDecorator(MeterIdPrefixFunction.ofDefault("myClient")))
  *            .build(MyService.Iface.class);
  * }</pre>
  *

File: core/src/main/java/com/linecorp/armeria/client/Http2ClientConnectionHandler.java
Patch:
@@ -101,7 +101,9 @@ public void channelActive(ChannelHandlerContext ctx) throws Exception {
 
     @Override
     protected boolean needsImmediateDisconnection() {
-        return clientFactory.isClosing() || responseDecoder.goAwayHandler().receivedErrorGoAway();
+        return clientFactory.isClosing() ||
+               responseDecoder.goAwayHandler().receivedErrorGoAway() ||
+               keepAliveHandler.isClosing();
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/server/Http2ServerConnectionHandler.java
Patch:
@@ -67,7 +67,9 @@ final class Http2ServerConnectionHandler extends AbstractHttp2ConnectionHandler
 
     @Override
     protected boolean needsImmediateDisconnection() {
-        return gracefulShutdownSupport.isShuttingDown() || requestDecoder.goAwayHandler().receivedErrorGoAway();
+        return gracefulShutdownSupport.isShuttingDown() ||
+               requestDecoder.goAwayHandler().receivedErrorGoAway() ||
+               keepAliveHandler.isClosing();
     }
 
     @Override

File: spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java
Patch:
@@ -203,7 +203,7 @@ public WebServer getWebServer(HttpHandler httpHandler) {
                 firstNonNull(findBean(DataBufferFactoryWrapper.class), DataBufferFactoryWrapper.DEFAULT);
 
         final Server server = configureService(sb, httpHandler, factoryWrapper, getServerHeader()).build();
-        return new ArmeriaWebServer(server, protocol, address, port);
+        return new ArmeriaWebServer(server, protocol, address, port, beanFactory);
     }
 
     private static ServerBuilder configureService(ServerBuilder sb, HttpHandler httpHandler,

File: core/src/main/java/com/linecorp/armeria/server/auth/AuthServiceBuilder.java
Patch:
@@ -27,6 +27,9 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.RequestHeaders;
+import com.linecorp.armeria.common.auth.BasicToken;
+import com.linecorp.armeria.common.auth.OAuth1aToken;
+import com.linecorp.armeria.common.auth.OAuth2Token;
 import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.Service;
 

File: core/src/main/java/com/linecorp/armeria/server/auth/AuthTokenExtractors.java
Patch:
@@ -20,6 +20,9 @@
 
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.RequestHeaders;
+import com.linecorp.armeria.common.auth.BasicToken;
+import com.linecorp.armeria.common.auth.OAuth1aToken;
+import com.linecorp.armeria.common.auth.OAuth2Token;
 
 /**
  * A utility class that provides singleton instances of authorization token extractor functions.

File: core/src/main/java/com/linecorp/armeria/server/auth/BasicTokenExtractor.java
Patch:
@@ -34,6 +34,7 @@
 
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.RequestHeaders;
+import com.linecorp.armeria.common.auth.BasicToken;
 
 import io.netty.util.AsciiString;
 

File: core/src/main/java/com/linecorp/armeria/server/auth/OAuth1aTokenExtractor.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.linecorp.armeria.server.auth;
 
+import static com.linecorp.armeria.internal.common.PercentDecoder.decodeComponent;
 import static java.util.Objects.requireNonNull;
 
 import java.util.function.Function;
@@ -32,6 +33,7 @@
 
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.RequestHeaders;
+import com.linecorp.armeria.common.auth.OAuth1aToken;
 
 import io.netty.util.AsciiString;
 
@@ -74,7 +76,7 @@ public OAuth1aToken apply(RequestHeaders headers) {
             }
             final String key = token.substring(0, sep);
             final String value = token.substring(sep + 2, token.length() - 1);
-            builder.put(key, value);
+            builder.put(decodeComponent(key), decodeComponent(value));
         }
 
         return OAuth1aToken.of(builder.build());

File: core/src/main/java/com/linecorp/armeria/server/auth/OAuth2TokenExtractor.java
Patch:
@@ -31,6 +31,7 @@
 
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.RequestHeaders;
+import com.linecorp.armeria.common.auth.OAuth2Token;
 
 import io.netty.util.AsciiString;
 

File: core/src/test/java/com/linecorp/armeria/server/auth/BasicTokenTest.java
Patch:
@@ -19,6 +19,8 @@
 
 import org.junit.jupiter.api.Test;
 
+import com.linecorp.armeria.common.auth.BasicToken;
+
 class BasicTokenTest {
     @Test
     void testEquals() {

File: core/src/test/java/com/linecorp/armeria/server/auth/OAuth2TokenTest.java
Patch:
@@ -19,6 +19,8 @@
 
 import org.junit.jupiter.api.Test;
 
+import com.linecorp.armeria.common.auth.OAuth2Token;
+
 class OAuth2TokenTest {
     @Test
     void testEquals() {

File: core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java
Patch:
@@ -425,7 +425,7 @@ void connect(SocketAddress remoteAddress, SessionProtocol desiredProtocol,
             if (future.isSuccess()) {
                 initSession(desiredProtocol, future, sessionPromise);
             } else {
-                sessionPromise.setFailure(future.cause());
+                sessionPromise.tryFailure(future.cause());
             }
         });
     }

File: core/src/main/java/com/linecorp/armeria/client/ClientHttpObjectEncoder.java
Patch:
@@ -14,9 +14,8 @@
  * under the License.
  */
 
-package com.linecorp.armeria.internal.client;
+package com.linecorp.armeria.client;
 
-import com.linecorp.armeria.client.UnprocessedRequestException;
 import com.linecorp.armeria.common.ClosedSessionException;
 import com.linecorp.armeria.common.HttpObject;
 import com.linecorp.armeria.common.RequestHeaders;
@@ -28,7 +27,7 @@
 /**
  * Converts an {@link HttpObject} into a protocol-specific object and writes it into a {@link Channel}.
  */
-public interface ClientHttpObjectEncoder extends HttpObjectEncoder {
+interface ClientHttpObjectEncoder extends HttpObjectEncoder {
 
     /**
      * Writes a {@link RequestHeaders}.

File: core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java
Patch:
@@ -42,7 +42,6 @@
 import com.linecorp.armeria.common.stream.ClosedStreamException;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.common.util.SafeCloseable;
-import com.linecorp.armeria.internal.client.ClientHttpObjectEncoder;
 import com.linecorp.armeria.internal.common.RequestContextUtil;
 
 import io.netty.channel.Channel;

File: core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java
Patch:
@@ -44,7 +44,6 @@
 import com.linecorp.armeria.internal.common.DefaultTimeoutController;
 import com.linecorp.armeria.internal.common.Http1ObjectEncoder;
 import com.linecorp.armeria.internal.common.RequestContextUtil;
-import com.linecorp.armeria.internal.server.ServerHttpObjectEncoder;
 
 import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelFutureListener;

File: core/src/main/java/com/linecorp/armeria/server/ServerHttpObjectEncoder.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.internal.server;
+package com.linecorp.armeria.server;
 
 import com.linecorp.armeria.common.HttpObject;
 import com.linecorp.armeria.common.ResponseHeaders;
@@ -26,7 +26,7 @@
 /**
  * Converts an {@link HttpObject} into a protocol-specific object and writes it into a {@link Channel}.
  */
-public interface ServerHttpObjectEncoder extends HttpObjectEncoder {
+interface ServerHttpObjectEncoder extends HttpObjectEncoder {
 
     /**
      * Writes a {@link ResponseHeaders}.

File: core/src/main/java/com/linecorp/armeria/common/metric/MoreNamingConventions.java
Patch:
@@ -176,7 +176,7 @@ public String name(String name, Type type, @Nullable String baseUnit) {
             }
             buf.setLength(buf.length() - 1);
 
-            if (type == Type.TIMER) {
+            if (type == Type.TIMER || type == Type.LONG_TASK_TIMER) {
                 baseUnit = SUFFIX_SECONDS;
             }
 

File: thrift/src/main/java/com/linecorp/armeria/internal/common/thrift/TByteBufTransport.java
Patch:
@@ -47,7 +47,7 @@ public void open() {}
     @Override
     public int read(byte[] buf, int off, int len) {
         final int bytesRemaining = this.buf.readableBytes();
-        final int amtToRead = len > bytesRemaining ? bytesRemaining : len;
+        final int amtToRead = Math.min(len, bytesRemaining);
         if (amtToRead > 0) {
             this.buf.readBytes(buf, off, amtToRead);
         }

File: core/src/main/java/com/linecorp/armeria/client/retry/HttpStatusBasedRetryStrategy.java
Patch:
@@ -35,12 +35,13 @@
  */
 final class HttpStatusBasedRetryStrategy implements RetryStrategy {
 
-    private final BiFunction<HttpStatus, Throwable, Backoff> backoffFunction;
+    private final BiFunction<? super HttpStatus, ? super Throwable, ? extends Backoff> backoffFunction;
 
     /**
      * Creates a new instance.
      */
-    HttpStatusBasedRetryStrategy(BiFunction<HttpStatus, Throwable, Backoff> backoffFunction) {
+    HttpStatusBasedRetryStrategy(
+            BiFunction<? super HttpStatus, ? super Throwable, ? extends Backoff> backoffFunction) {
         this.backoffFunction = requireNonNull(backoffFunction, "backoffFunction");
     }
 

File: core/src/main/java/com/linecorp/armeria/common/QueryStringEncoder.java
Patch:
@@ -65,6 +65,9 @@ final class QueryStringEncoder {
     }
 
     static void encodeParams(StringBuilder buf, QueryParamGetters params) {
+        if (params.isEmpty()) {
+            return;
+        }
         for (Entry<String, String> e : params) {
             encodeComponent(buf, e.getKey()).append('=');
             encodeComponent(buf, e.getValue()).append('&');

File: core/src/test/java/com/linecorp/armeria/common/QueryParamsTest.java
Patch:
@@ -252,6 +252,7 @@ private static void assertQueryString(String expected, String actual, boolean se
     @Test
     @SuppressWarnings("checkstyle:AvoidEscapedUnicodeCharacters")
     void testDefaultEncoding() throws Exception {
+        assertThat(QueryParams.of().toQueryString()).isEmpty();
         assertThat(QueryParams.of("a", "b=c").toQueryString()).isEqualTo("a=b%3Dc");
         assertThat(QueryParams.of("a", "\u00A5").toQueryString()).isEqualTo("a=%C2%A5");
         assertThat(QueryParams.of("a", "1", "b", "2").toQueryString()).isEqualTo("a=1&b=2");

File: benchmarks/src/jmh/java/com/linecorp/armeria/server/RoutersBenchmark.java
Patch:
@@ -45,11 +45,11 @@ public class RoutersBenchmark {
     static {
         SERVICES = ImmutableList.of(
                 new ServiceConfig(Route.builder().exact("/grpc.package.Service/Method1").build(),
-                                  SERVICE, 0, 0, false, AccessLogWriter.disabled(), false),
+                                  SERVICE, null, 0, 0, false, AccessLogWriter.disabled(), false),
                 new ServiceConfig(Route.builder().exact("/grpc.package.Service/Method2").build(),
-                                  SERVICE, 0, 0, false, AccessLogWriter.disabled(), false)
+                                  SERVICE, null, 0, 0, false, AccessLogWriter.disabled(), false)
         );
-        FALLBACK_SERVICE = new ServiceConfig(Route.ofCatchAll(), SERVICE, 0, 0, false,
+        FALLBACK_SERVICE = new ServiceConfig(Route.ofCatchAll(), SERVICE, null, 0, 0, false,
                                              AccessLogWriter.disabled(), false);
         HOST = new VirtualHost(
                 "localhost", "localhost", null, SERVICES, FALLBACK_SERVICE, RejectedRouteHandler.DISABLED,

File: brave/src/main/java/com/linecorp/armeria/server/brave/ServiceRequestContextAdapter.java
Patch:
@@ -85,7 +85,7 @@ public String path() {
         @Override
         @Nullable
         public String route() {
-            final Route route = ctx.route();
+            final Route route = ctx.config().route();
             final List<String> paths = route.paths();
             switch (route.pathType()) {
                 case EXACT:

File: core/src/main/java/com/linecorp/armeria/common/logging/BuiltInProperty.java
Patch:
@@ -360,7 +360,7 @@ private static String getAuthority(RequestLog log) {
         if (ctx instanceof ServiceRequestContext) {
             final ServiceRequestContext sCtx = (ServiceRequestContext) ctx;
             final int port = ((InetSocketAddress) sCtx.remoteAddress()).getPort();
-            final String hostname = sCtx.virtualHost().defaultHostname();
+            final String hostname = sCtx.config().virtualHost().defaultHostname();
             if (port == ctx.sessionProtocol().defaultPort()) {
                 authority = hostname;
             } else {

File: core/src/main/java/com/linecorp/armeria/common/metric/MeterIdPrefixFunction.java
Patch:
@@ -102,14 +102,14 @@ private void buildTags(ImmutableList.Builder<Tag> tagListBuilder, RequestOnlyLog
                     final ServiceRequestContext sCtx = (ServiceRequestContext) ctx;
                     tagListBuilder.add(Tag.of(Flags.useLegacyMeterNames() ? "hostnamePattern"
                                                                           : "hostname.pattern",
-                                              sCtx.virtualHost().hostnamePattern()));
+                                              sCtx.config().virtualHost().hostnamePattern()));
                 }
 
                 tagListBuilder.add(Tag.of("method", methodName));
 
                 if (ctx instanceof ServiceRequestContext) {
                     final ServiceRequestContext sCtx = (ServiceRequestContext) ctx;
-                    tagListBuilder.add(Tag.of("route", sCtx.route().meterTag()));
+                    tagListBuilder.add(Tag.of("route", sCtx.config().route().meterTag()));
                 }
             }
         };

File: core/src/main/java/com/linecorp/armeria/server/FallbackService.java
Patch:
@@ -68,7 +68,7 @@ private static HttpResponse handleNotFound(ServiceRequestContext ctx,
         // Handle the case where '/path' (or '/path?query') doesn't exist
         // but '/path/' (or '/path/?query') exists.
         final String newPath = oldPath + '/';
-        if (!ctx.virtualHost().findServiceConfig(routingCtx.overridePath(newPath)).isPresent()) {
+        if (!ctx.config().virtualHost().findServiceConfig(routingCtx.overridePath(newPath)).isPresent()) {
             // No need to send a redirect response because '/path/' (or '/path/?query') does not exist.
             throw cause;
         }

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -578,7 +578,7 @@ private ChannelFuture respond(ServiceRequestContext reqCtx, boolean addKeepAlive
                     // Respect the first specified cause.
                     logBuilder.endResponse(firstNonNull(cause, f.cause()));
                 }
-                reqCtx.log().whenComplete().thenAccept(reqCtx.accessLogWriter()::log);
+                reqCtx.log().whenComplete().thenAccept(reqCtx.config().accessLogWriter()::log);
             }
         });
         return future;

File: core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java
Patch:
@@ -862,15 +862,15 @@ public ServerBuilder serviceUnder(String pathPrefix, HttpService service) {
      * @throws IllegalArgumentException if the specified path pattern is invalid
      */
     public ServerBuilder service(String pathPattern, HttpService service) {
-        return service(Route.builder().path(pathPattern).build(), service);
+        return route().path(pathPattern).build(service);
     }
 
     /**
      * Binds the specified {@link HttpService} at the specified {@link Route} of the default
      * {@link VirtualHost}.
      */
     public ServerBuilder service(Route route, HttpService service) {
-        return serviceConfigBuilder(new ServiceConfigBuilder(route, service));
+        return route().addRoute(route).build(service);
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostAnnotatedServiceBindingBuilder.java
Patch:
@@ -228,7 +228,7 @@ List<ServiceConfigBuilder> buildServiceConfigBuilder(AnnotatedServiceExtensions
 
         final List<AnnotatedServiceElement> elements =
                 AnnotatedServiceFactory.find(pathPrefix, service, requestConverterFunctions,
-                                                 responseConverterFunctions, exceptionHandlerFunctions);
+                                             responseConverterFunctions, exceptionHandlerFunctions);
         return elements.stream().map(element -> {
             final HttpService decoratedService =
                     element.buildSafeDecoratedService(defaultServiceConfigSetters.decorator());

File: core/src/main/java/com/linecorp/armeria/server/file/CachingHttpFile.java
Patch:
@@ -99,7 +99,8 @@ public CompletableFuture<AggregatedHttpFile> aggregateWithPooledObjects(Executor
     @Override
     public HttpService asService() {
         return (ctx, req) -> {
-            final HttpFile file = firstNonNull(getFile(ctx.blockingTaskExecutor()), HttpFile.nonExistent());
+            final HttpFile file = firstNonNull(getFile(ctx.blockingTaskExecutor()),
+                                               HttpFile.nonExistent());
             return file.asService().serve(ctx, req);
         };
     }

File: core/src/main/java/com/linecorp/armeria/server/logging/AccessLogger.java
Patch:
@@ -106,7 +106,7 @@ final class AccessLogger {
      * Writes an access log for the specified {@link RequestLog}.
      */
     static void write(List<AccessLogComponent> format, RequestLog log) {
-        final VirtualHost host = ((ServiceRequestContext) log.context()).virtualHost();
+        final VirtualHost host = ((ServiceRequestContext) log.context()).config().virtualHost();
         final Logger logger = host.accessLogger();
         if (!format.isEmpty() && logger.isInfoEnabled()) {
             logger.info(format(format, log));

File: core/src/test/java/com/linecorp/armeria/server/DefaultServiceRequestContextTest.java
Patch:
@@ -84,10 +84,10 @@ void deriveContext() {
         final HttpRequest newRequest = HttpRequest.of(HttpMethod.GET, "/derived/hello");
         final ServiceRequestContext derivedCtx = originalCtx.newDerivedContext(newId, newRequest, null);
 
-        assertThat(derivedCtx.server()).isSameAs(originalCtx.server());
+        assertThat(derivedCtx.config().server()).isSameAs(originalCtx.config().server());
         assertThat(derivedCtx.sessionProtocol()).isSameAs(originalCtx.sessionProtocol());
-        assertThat(derivedCtx.service()).isSameAs(originalCtx.service());
-        assertThat(derivedCtx.route()).isSameAs(originalCtx.route());
+        assertThat(derivedCtx.config().service()).isSameAs(originalCtx.config().service());
+        assertThat(derivedCtx.config().route()).isSameAs(originalCtx.config().route());
         assertThat(derivedCtx.id()).isSameAs(newId);
         assertThat(derivedCtx.request()).isSameAs(newRequest);
 

File: core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java
Patch:
@@ -58,7 +58,7 @@ protected void configure(ServerBuilder sb) throws Exception {
                   ctx.log().whenComplete().thenAccept(log -> {
                       assertThat(ctx.requestTimeoutMillis()).isEqualTo(1000);
                       assertThat(ctx.maxRequestLength()).isEqualTo(8192);
-                      assertThat(ctx.verboseResponses()).isTrue();
+                      assertThat(ctx.config().verboseResponses()).isTrue();
 
                       propertyCheckLatch.countDown();
                   });

File: core/src/test/java/com/linecorp/armeria/server/ServiceTest.java
Patch:
@@ -51,7 +51,7 @@ private static void assertDecoration(FooService inner, HttpService outer) throws
         assertThat(outer.as(String.class)).isNull();
 
         // Test if FooService.serviceAdded() is invoked.
-        final ServiceConfig cfg = new ServiceConfig(Route.ofCatchAll(), outer, 1, 1, true,
+        final ServiceConfig cfg = new ServiceConfig(Route.ofCatchAll(), outer, null, 1, 1, true,
                                                     AccessLogWriter.disabled(), false);
         outer.serviceAdded(cfg);
         assertThat(inner.cfg).isSameAs(cfg);

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java
Patch:
@@ -524,7 +524,7 @@ static HttpHeaders statusToTrailers(
 
         MetadataUtil.fillHeaders(metadata, trailers);
 
-        if (ctx.verboseResponses() && status.getCause() != null) {
+        if (ctx.config().verboseResponses() && status.getCause() != null) {
             final ThrowableProto proto = GrpcStatus.serializeThrowable(status.getCause());
             trailers.add(GrpcHeaderNames.ARMERIA_GRPC_THROWABLEPROTO_BIN,
                          Base64.getEncoder().encodeToString(proto.toByteArray()));

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlDecorator.java
Patch:
@@ -129,7 +129,8 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
                 if (idp == null) {
                     throw new RuntimeException("cannot find a suitable identity provider from configurations");
                 }
-                final String defaultHostname = firstNonNull(sp.hostname(), ctx.virtualHost().defaultHostname());
+                final String defaultHostname =
+                        firstNonNull(sp.hostname(), ctx.config().virtualHost().defaultHostname());
                 final AuthnRequest request = createAuthRequest(idp, defaultHostname);
                 final MessageContext<AuthnRequest> messageContext = new MessageContext<>();
                 messageContext.setMessage(request);

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlService.java
Patch:
@@ -176,7 +176,8 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
 
             // Use user-specified hostname if it exists.
             // If there's no hostname set by a user, the default virtual hostname will be used.
-            final String defaultHostname = firstNonNull(sp.hostname(), ctx.virtualHost().defaultHostname());
+            final String defaultHostname =
+                    firstNonNull(sp.hostname(), ctx.config().virtualHost().defaultHostname());
             return func.serve(ctx, aggregatedReq, defaultHostname, portConfig);
         }));
     }

File: spring/boot-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/WebOperationService.java
Patch:
@@ -291,7 +291,8 @@ private static void streamResource(ServiceRequestContext ctx, HttpResponseWriter
 
         res.whenConsumed().thenRun(() -> {
             try {
-                ctx.blockingTaskExecutor().execute(() -> streamResource(ctx, res, in, nextRemainingBytes));
+                ctx.blockingTaskExecutor()
+                   .execute(() -> streamResource(ctx, res, in, nextRemainingBytes));
             } catch (Exception e) {
                 close(res, in, e);
             }

File: thrift/src/main/java/com/linecorp/armeria/server/thrift/THttpService.java
Patch:
@@ -355,7 +355,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
         req.aggregateWithPooledObjects(ctx.eventLoop(), ctx.alloc()).handle((aReq, cause) -> {
             if (cause != null) {
                 final HttpResponse errorRes;
-                if (ctx.verboseResponses()) {
+                if (ctx.config().verboseResponses()) {
                     errorRes = HttpResponse.of(HttpStatus.INTERNAL_SERVER_ERROR,
                                                MediaType.PLAIN_TEXT_UTF_8,
                                                Exceptions.traceText(cause));
@@ -445,7 +445,7 @@ private void decodeAndInvoke(
                 logger.debug("{} Failed to decode a {} header:", ctx, serializationFormat, e);
 
                 final HttpResponse errorRes;
-                if (ctx.verboseResponses()) {
+                if (ctx.config().verboseResponses()) {
                     errorRes = HttpResponse.of(HttpStatus.BAD_REQUEST, MediaType.PLAIN_TEXT_UTF_8,
                                                "Failed to decode a %s header: %s", serializationFormat,
                                                Exceptions.traceText(e));
@@ -692,7 +692,7 @@ private static HttpData encodeException(ServiceRequestContext ctx,
         if (cause instanceof TApplicationException) {
             appException = (TApplicationException) cause;
         } else {
-            if (ctx.verboseResponses()) {
+            if (ctx.config().verboseResponses()) {
                 appException = new TApplicationException(
                         TApplicationException.INTERNAL_ERROR,
                         "\n---- BEGIN server-side trace ----\n" +

File: core/src/main/java/com/linecorp/armeria/common/ClosedSessionException.java
Patch:
@@ -17,10 +17,12 @@
 
 import javax.annotation.Nullable;
 
+import com.linecorp.armeria.common.stream.ClosedStreamException;
+
 /**
  * A {@link RuntimeException} raised when the connection to the remote peer has been closed unexpectedly.
  */
-public final class ClosedSessionException extends RuntimeException {
+public final class ClosedSessionException extends ClosedStreamException {
 
     private static final long serialVersionUID = -78487475521731580L;
 

File: core/src/main/java/com/linecorp/armeria/common/stream/ClosedStreamException.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * A {@link RuntimeException} that is raised when a {@link StreamMessage} has been closed unexpectedly.
  */
-public final class ClosedStreamException extends RuntimeException {
+public class ClosedStreamException extends RuntimeException {
 
     private static final long serialVersionUID = -7665826869012452735L;
 
@@ -66,7 +66,7 @@ public ClosedStreamException(@Nullable Throwable cause) {
      * Creates a new instance with the specified {@code message}, {@code cause}, suppression enabled or
      * disabled, and writable stack trace enabled or disabled.
      */
-    private ClosedStreamException(@Nullable String message, @Nullable Throwable cause,
+    protected ClosedStreamException(@Nullable String message, @Nullable Throwable cause,
                                   boolean enableSuppression, boolean writableStackTrace) {
         super(message, cause, enableSuppression, writableStackTrace);
     }

File: core/src/main/java/com/linecorp/armeria/common/util/Exceptions.java
Patch:
@@ -177,7 +177,6 @@ public static boolean isStreamCancelling(Throwable cause) {
         }
 
         return cause instanceof ClosedStreamException ||
-               cause instanceof ClosedSessionException ||
                cause instanceof CancelledSubscriptionException ||
                cause instanceof WriteTimeoutException ||
                cause instanceof AbortedStreamException ||

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedService.java
Patch:
@@ -462,6 +462,9 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,
                                             ResponseHeaders headers,
                                             @Nullable Object result,
                                             HttpHeaders trailers) throws Exception {
+            if (result instanceof HttpResponse) {
+                return (HttpResponse) result;
+            }
             try (SafeCloseable ignored = ctx.push()) {
                 for (final ResponseConverterFunction func : functions) {
                     try {

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsServiceEndpointGroup.java
Patch:
@@ -68,10 +68,10 @@ public static DnsServiceEndpointGroupBuilder builder(String hostname) {
 
     DnsServiceEndpointGroup(EndpointSelectionStrategy selectionStrategy,
                             EventLoop eventLoop, int minTtl, int maxTtl,
-                            DnsServerAddressStreamProvider serverAddressStreamProvider,
+                            long queryTimeoutMillis, DnsServerAddressStreamProvider serverAddressStreamProvider,
                             Backoff backoff, String hostname) {
-        super(selectionStrategy, eventLoop, minTtl, maxTtl, serverAddressStreamProvider, backoff,
-              ImmutableList.of(DnsQuestionWithoutTrailingDot.of(hostname, DnsRecordType.SRV)),
+        super(selectionStrategy, eventLoop, minTtl, maxTtl, queryTimeoutMillis, serverAddressStreamProvider,
+              backoff, ImmutableList.of(DnsQuestionWithoutTrailingDot.of(hostname, DnsRecordType.SRV)),
               unused -> {});
         start();
     }

File: brave/src/test/java/com/linecorp/armeria/it/brave/BraveIntegrationTest.java
Patch:
@@ -212,12 +212,12 @@ void setupClients() {
         timeoutClientClientTimesOut =
                 Clients.builder(server.httpUri(BINARY) + "/timeout")
                        .decorator(BraveClient.newDecorator(newTracing("client/timeout")))
-                       .responseTimeout(Duration.ofMillis(10))
+                       .responseTimeout(Duration.ofMillis(3))
                        .build(HelloService.Iface.class);
         http1TimeoutClientClientTimesOut =
                 Clients.builder(server.uri(H1C, BINARY) + "/timeout")
                        .decorator(BraveClient.newDecorator(newTracing("client/timeout")))
-                       .responseTimeout(Duration.ofMillis(10))
+                       .responseTimeout(Duration.ofMillis(3))
                        .build(HelloService.Iface.class);
     }
 

File: core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java
Patch:
@@ -39,7 +39,7 @@
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.internal.client.ClientHttp1ObjectEncoder;
 import com.linecorp.armeria.internal.client.ClientHttp2ObjectEncoder;
-import com.linecorp.armeria.internal.common.HttpObjectEncoder;
+import com.linecorp.armeria.internal.client.ClientHttpObjectEncoder;
 import com.linecorp.armeria.internal.common.InboundTrafficController;
 import com.linecorp.armeria.internal.common.RequestContextUtil;
 
@@ -88,7 +88,7 @@ final class HttpSessionHandler extends ChannelDuplexHandler implements HttpSessi
     @Nullable
     private HttpResponseDecoder responseDecoder;
     @Nullable
-    private HttpObjectEncoder requestEncoder;
+    private ClientHttpObjectEncoder requestEncoder;
 
     /**
      * The maximum number of unfinished requests. In HTTP/2, this value is identical to MAX_CONCURRENT_STREAMS.

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HttpHealthChecker.java
Patch:
@@ -48,6 +48,7 @@
 import com.linecorp.armeria.common.stream.SubscriptionOption;
 import com.linecorp.armeria.common.util.AsyncCloseable;
 import com.linecorp.armeria.common.util.AsyncCloseableSupport;
+import com.linecorp.armeria.common.util.TimeoutMode;
 
 import io.netty.util.AsciiString;
 import io.netty.util.ReferenceCountUtil;
@@ -140,7 +141,8 @@ private final class ResponseTimeoutUpdater extends SimpleDecoratingHttpClient {
         @Override
         public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {
             if (maxLongPollingSeconds > 0) {
-                ctx.extendResponseTimeoutMillis(TimeUnit.SECONDS.toMillis(maxLongPollingSeconds));
+                ctx.setResponseTimeoutMillis(TimeoutMode.EXTEND,
+                                             TimeUnit.SECONDS.toMillis(maxLongPollingSeconds));
             }
             return delegate().execute(ctx, req);
         }

File: core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java
Patch:
@@ -43,6 +43,7 @@
 import com.linecorp.armeria.common.logging.RequestLogAccess;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
 import com.linecorp.armeria.common.logging.RequestLogProperty;
+import com.linecorp.armeria.common.util.TimeoutMode;
 
 import io.netty.util.AsciiString;
 import io.netty.util.AttributeKey;
@@ -197,7 +198,7 @@ protected final boolean setResponseTimeout(ClientRequestContext ctx) {
             ctx.clearResponseTimeout();
             return true;
         } else {
-            ctx.setResponseTimeoutAfterMillis(responseTimeoutMillis);
+            ctx.setResponseTimeoutMillis(TimeoutMode.SET_FROM_NOW, responseTimeoutMillis);
             return true;
         }
     }

File: core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckService.java
Patch:
@@ -37,6 +37,7 @@
 import com.linecorp.armeria.common.HttpResponseWriter;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.ResponseHeaders;
+import com.linecorp.armeria.common.util.TimeoutMode;
 import com.linecorp.armeria.internal.common.ArmeriaHttpUtil;
 import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.HttpStatusException;
@@ -454,7 +455,7 @@ private boolean isLongPollingEnabled() {
     private static void updateRequestTimeout(ServiceRequestContext ctx, long longPollingTimeoutMillis) {
         final long requestTimeoutMillis = ctx.requestTimeoutMillis();
         if (requestTimeoutMillis > 0) {
-            ctx.extendRequestTimeoutMillis(longPollingTimeoutMillis);
+            ctx.setRequestTimeoutMillis(TimeoutMode.EXTEND, longPollingTimeoutMillis);
         }
     }
 

File: core/src/test/java/com/linecorp/armeria/internal/common/DefaultTimeoutControllerTest.java
Patch:
@@ -74,8 +74,8 @@ void shouldHaveTimeoutTask() {
     @Test
     void adjustTimeout() {
         final long initTimeoutMillis = 1000;
-        final long adjustmentMillis = 100;
-        final long tolerance = 50;
+        final long adjustmentMillis = 200;
+        final long tolerance = 100;
 
         timeoutController.scheduleTimeout(initTimeoutMillis);
         final long startTimeNanos = timeoutController.startTimeNanos();

File: core/src/test/java/com/linecorp/armeria/server/ServerTest.java
Patch:
@@ -71,6 +71,7 @@
 import com.linecorp.armeria.common.util.CompletionActions;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.common.util.ThreadFactories;
+import com.linecorp.armeria.common.util.TimeoutMode;
 import com.linecorp.armeria.internal.common.metric.MicrometerUtil;
 import com.linecorp.armeria.internal.testing.AnticipatedException;
 import com.linecorp.armeria.server.logging.AccessLogWriter;
@@ -152,7 +153,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
                             if ("/timeout-not".equals(ctx.path())) {
                                ctx.clearRequestTimeout();
                             } else {
-                                ctx.setRequestTimeoutAfterMillis(requestTimeoutMillis);
+                                ctx.setRequestTimeoutMillis(TimeoutMode.SET_FROM_NOW, requestTimeoutMillis);
                             }
                             return delegate().serve(ctx, req);
                         }

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaClientCall.java
Patch:
@@ -50,6 +50,7 @@
 import com.linecorp.armeria.common.logging.RequestLogAccess;
 import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.common.util.SafeCloseable;
+import com.linecorp.armeria.common.util.TimeoutMode;
 import com.linecorp.armeria.internal.common.grpc.ForwardingCompressor;
 import com.linecorp.armeria.internal.common.grpc.GrpcLogUtil;
 import com.linecorp.armeria.internal.common.grpc.GrpcMessageMarshaller;
@@ -193,7 +194,7 @@ public void start(Listener<O> responseListener, Metadata metadata) {
                                 callOptions.getDeadline());
                 close(status, new Metadata());
             } else {
-                ctx.setResponseTimeoutAfterMillis(remainingMillis);
+                ctx.setResponseTimeoutMillis(TimeoutMode.SET_FROM_NOW, remainingMillis);
                 ctx.setResponseTimeoutHandler(() -> {
                     final Status status = Status.DEADLINE_EXCEEDED
                             .augmentDescription(

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/FramedGrpcService.java
Patch:
@@ -53,6 +53,7 @@
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer;
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
 import com.linecorp.armeria.common.util.SafeCloseable;
+import com.linecorp.armeria.common.util.TimeoutMode;
 import com.linecorp.armeria.internal.common.grpc.GrpcJsonUtil;
 import com.linecorp.armeria.internal.common.grpc.GrpcStatus;
 import com.linecorp.armeria.internal.common.grpc.MetadataUtil;
@@ -180,7 +181,7 @@ protected HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req) throws
                     if (timeout == 0) {
                         ctx.clearRequestTimeout();
                     } else {
-                        ctx.setRequestTimeoutAfter(Duration.ofNanos(timeout));
+                        ctx.setRequestTimeout(TimeoutMode.SET_FROM_NOW, Duration.ofNanos(timeout));
                     }
                 } catch (IllegalArgumentException e) {
                     return HttpResponse.of(

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceServerTest.java
Patch:
@@ -80,6 +80,7 @@
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.stream.ClosedStreamException;
 import com.linecorp.armeria.common.util.EventLoopGroups;
+import com.linecorp.armeria.common.util.TimeoutMode;
 import com.linecorp.armeria.grpc.testing.Messages.EchoStatus;
 import com.linecorp.armeria.grpc.testing.Messages.Payload;
 import com.linecorp.armeria.grpc.testing.Messages.SimpleRequest;
@@ -345,7 +346,7 @@ public void grpcContext(SimpleRequest request, StreamObserver<SimpleResponse> re
 
         @Override
         public void timesOut(SimpleRequest request, StreamObserver<SimpleResponse> responseObserver) {
-            ServiceRequestContext.current().setRequestTimeoutAfterMillis(100);
+            ServiceRequestContext.current().setRequestTimeoutMillis(TimeoutMode.SET_FROM_NOW, 100);
         }
     }
 

File: thrift/src/test/java/com/linecorp/armeria/it/thrift/ThriftDynamicTimeoutTest.java
Patch:
@@ -38,6 +38,7 @@
 import com.linecorp.armeria.client.SimpleDecoratingRpcClient;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;
+import com.linecorp.armeria.common.util.TimeoutMode;
 import com.linecorp.armeria.server.RpcService;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.ServiceRequestContext;
@@ -133,7 +134,7 @@ private static final class DynamicTimeoutService extends SimpleDecoratingRpcServ
 
         @Override
         public RpcResponse serve(ServiceRequestContext ctx, RpcRequest req) throws Exception {
-            ctx.extendRequestTimeoutMillis(((Number) req.params().get(0)).longValue());
+            ctx.setRequestTimeoutMillis(TimeoutMode.EXTEND, ((Number) req.params().get(0)).longValue());
             return delegate().serve(ctx, req);
         }
     }
@@ -159,7 +160,7 @@ private static final class DynamicTimeoutClient extends SimpleDecoratingRpcClien
 
         @Override
         public RpcResponse execute(ClientRequestContext ctx, RpcRequest req) throws Exception {
-            ctx.extendResponseTimeoutMillis(((Number) req.params().get(0)).longValue());
+            ctx.setResponseTimeoutMillis(TimeoutMode.EXTEND, ((Number) req.params().get(0)).longValue());
             return delegate().execute(ctx, req);
         }
     }

File: core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java
Patch:
@@ -46,6 +46,8 @@
 import com.linecorp.armeria.common.HttpObject;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.util.Exceptions;
+import com.linecorp.armeria.internal.client.HttpHeaderUtil;
+import com.linecorp.armeria.internal.common.ArmeriaHttpUtil;
 import com.linecorp.armeria.internal.common.ReadSuppressingHandler;
 import com.linecorp.armeria.internal.common.TrafficLoggingHandler;
 import com.linecorp.armeria.internal.common.util.ChannelUtil;
@@ -403,7 +405,7 @@ public void channelActive(ChannelHandlerContext ctx) throws Exception {
             //       because they are filled by Http2ClientUpgradeCodec.
 
             assert remoteAddress != null;
-            final String host = HttpHeaderUtil.hostHeader(
+            final String host = ArmeriaHttpUtil.authorityHeader(
                     remoteAddress.getHostString(), remoteAddress.getPort(), H1C.defaultPort());
 
             upgradeReq.headers().set(HttpHeaderNames.HOST, host);

File: core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java
Patch:
@@ -79,6 +79,7 @@
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.util.CompletionActions;
 import com.linecorp.armeria.common.util.Exceptions;
+import com.linecorp.armeria.internal.client.HttpHeaderUtil;
 import com.linecorp.armeria.server.AbstractHttpService;
 import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.ServerBuilder;

File: core/src/main/java/com/linecorp/armeria/common/util/CountingSampler.java
Patch:
@@ -58,8 +58,8 @@ final class CountingSampler<T> implements Sampler<T> {
      * @param probability {@code 0.0} means never sample, {@code 1.0} means always sample.
      *                    Otherwise minimum probability is between {@code 0.01} and {@code 1.0}.
      */
-    static <T> Sampler<T> create(double probability) {
-        final int percent = (int) (probability * 100.0);
+    static <T> Sampler<T> create(float probability) {
+        final int percent = (int) (probability * 100.0f);
         checkArgument(percent >= 0 && percent <= 100,
                       "probability: %s (expected: 0.0 <= probability <= 1.0)", probability);
         if (percent == 0) {

File: core/src/main/java/com/linecorp/armeria/common/util/Sampler.java
Patch:
@@ -49,7 +49,7 @@ public interface Sampler<T> {
      * @param probability the probability expressed as a floating point number
      *                    between {@code 0.0} and {@code 1.0}.
      */
-    static <T> Sampler<T> random(double probability) {
+    static <T> Sampler<T> random(float probability) {
         return CountingSampler.create(probability);
     }
 

File: core/src/main/java/com/linecorp/armeria/common/util/Samplers.java
Patch:
@@ -83,7 +83,7 @@ static <T> Sampler<T> of(String specification) {
         try {
             switch (key) {
                 case "random":
-                    return Sampler.random(Double.parseDouble(value));
+                    return Sampler.random(Float.parseFloat(value));
                 case "rate-limit":
                 case "rate-limiting":
                 case "rate-limited":

File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContextWrapper.java
Patch:
@@ -165,7 +165,7 @@ public Runnable responseTimeoutHandler() {
 
     @Override
     public void setResponseTimeoutHandler(Runnable responseTimeoutHandler) {
-       delegate().setResponseTimeoutHandler(responseTimeoutHandler);
+        delegate().setResponseTimeoutHandler(responseTimeoutHandler);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/internal/common/util/TemporaryThreadLocals.java
Patch:
@@ -44,8 +44,8 @@
  * > assert "\"foo\"".equals(new A().toString());
  * }</pre></p>
  *
- * <p>A rule of thumb is to use the thread-local variables provided by this class in a narrow scope
- * where there's no chance of recursion or reentrance.</p>
+ * <p>A general rule of thumb is not to call other methods while using the thread-local variables provided by
+ * this class, unless you are sure the methods you're calling never uses the same thread-local variables.</p>
  */
 public final class TemporaryThreadLocals {
 

File: core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java
Patch:
@@ -52,6 +52,7 @@
 import io.netty.handler.codec.http2.Http2ConnectionHandler;
 import io.netty.handler.codec.http2.Http2ConnectionPrefaceAndSettingsFrameWrittenEvent;
 import io.netty.handler.codec.http2.Http2Settings;
+import io.netty.handler.proxy.ProxyConnectionEvent;
 import io.netty.handler.ssl.SslCloseCompletionEvent;
 import io.netty.handler.ssl.SslHandshakeCompletionEvent;
 import io.netty.util.AttributeKey;
@@ -303,7 +304,8 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
         if (evt instanceof Http2ConnectionPrefaceAndSettingsFrameWrittenEvent ||
             evt instanceof SslHandshakeCompletionEvent ||
             evt instanceof SslCloseCompletionEvent ||
-            evt instanceof ChannelInputShutdownReadComplete) {
+            evt instanceof ChannelInputShutdownReadComplete ||
+            evt instanceof ProxyConnectionEvent) {
             // Expected events
             return;
         }

File: core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.UUID;
 import java.util.function.Function;
 
 import com.google.common.collect.ImmutableMap;
@@ -47,6 +48,7 @@ final class AnnotatedServiceTypeUtil {
                     .put(Double.TYPE, Double::valueOf)
                     .put(Double.class, Double::valueOf)
                     .put(String.class, Function.identity())
+                    .put(UUID.class, UUID::fromString)
                     .build();
 
     /**

File: core/src/main/java/com/linecorp/armeria/client/limit/AbstractConcurrencyLimitingClient.java
Patch:
@@ -228,7 +228,7 @@ public void run() {
                 }
             }
 
-            try (SafeCloseable ignored = ctx.push()) {
+            try (SafeCloseable ignored = ctx.replace()) {
                 try {
                     final O actualRes = delegate().execute(ctx, req);
                     actualRes.whenComplete().handleAsync((unused, cause) -> {

File: core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java
Patch:
@@ -416,7 +416,8 @@ private void notifyConnect(SessionProtocol desiredProtocol, PoolKey key, Future<
                 if (protocol == null || closeable.isClosing()) {
                     channel.close();
                     promise.completeExceptionally(
-                            new UnprocessedRequestException(ClosedSessionException.get()));
+                            new UnprocessedRequestException(
+                                    new ClosedSessionException("acquired an unhealthy connection")));
                     return;
                 }
 

File: core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java
Patch:
@@ -17,7 +17,6 @@
 package com.linecorp.armeria.client;
 
 import static com.google.common.base.MoreObjects.firstNonNull;
-import static com.linecorp.armeria.client.HttpSessionHandler.PENDING_EXCEPTION;
 import static com.linecorp.armeria.common.SessionProtocol.H1;
 import static com.linecorp.armeria.common.SessionProtocol.H1C;
 import static com.linecorp.armeria.common.SessionProtocol.H2;
@@ -229,7 +228,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws E
                 if (handshakeFailed &&
                     cause instanceof DecoderException &&
                     cause.getCause() instanceof SSLException) {
-                    ctx.channel().attr(PENDING_EXCEPTION).set(cause.getCause());
+                    HttpSessionHandler.setPendingException(ctx, cause.getCause());
                     return;
                 }
 

File: core/src/main/java/com/linecorp/armeria/server/Http2RequestDecoder.java
Patch:
@@ -24,7 +24,6 @@
 
 import javax.annotation.Nullable;
 
-import com.linecorp.armeria.common.ClosedSessionException;
 import com.linecorp.armeria.common.ContentTooLargeException;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpMethod;
@@ -205,7 +204,7 @@ public void onStreamClosed(Http2Stream stream) {
         final DecodedHttpRequest req = requests.remove(stream.id());
         if (req != null) {
             // Ignored if the stream has already been closed.
-            req.close(ClosedSessionException.get());
+            req.close(ClosedStreamException.get());
         }
     }
 
@@ -305,7 +304,8 @@ public void onRstStreamRead(ChannelHandlerContext ctx, int streamId, long errorC
                                   "received a RST_STREAM frame for an unknown stream: %d", streamId);
         }
 
-        req.abortResponse(ClosedStreamException.get());
+        req.abortResponse(new ClosedStreamException(
+                "received a RST_STREAM frame: " + Http2Error.valueOf(errorCode)));
     }
 
     @Override

File: core/src/test/java/com/linecorp/armeria/server/HttpServerRequestTimeoutTest.java
Patch:
@@ -32,9 +32,9 @@
 import com.linecorp.armeria.client.ClientOption;
 import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
-import com.linecorp.armeria.common.ClosedSessionException;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
+import com.linecorp.armeria.common.stream.ClosedStreamException;
 import com.linecorp.armeria.server.streaming.JsonTextSequences;
 import com.linecorp.armeria.testing.junit.server.ServerExtension;
 
@@ -152,7 +152,7 @@ void requestTimeout_503() {
     void requestTimeout_reset_stream() {
         assertThatThrownBy(() -> clientWithoutTimeout.get("/timeout-while-writing").aggregate().join())
                 .isInstanceOf(CompletionException.class)
-                .hasCauseInstanceOf(ClosedSessionException.class);
+                .hasCauseInstanceOf(ClosedStreamException.class);
     }
 
     @Test

File: retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/AbstractSubscriber.java
Patch:
@@ -136,7 +136,7 @@ public final void onNext(HttpObject httpObject) {
     @Override
     public final void onError(Throwable throwable) {
         if (armeriaCall.tryFinish()) {
-            onError0(new IOException(throwable.getMessage(), throwable));
+            onError0(new IOException(throwable.toString(), throwable));
         } else {
             onError0(newCancelledException());
         }

File: retrofit2/src/test/java/com/linecorp/armeria/client/retrofit2/StreamingCallSubscriberTest.java
Patch:
@@ -205,7 +205,7 @@ public void exception_beforeReceivingHttpData() throws Exception {
 
         verify(subscription, times(2)).request(1L);
         await().untilAsserted(() -> assertThat(callback.callbackCallingCount).isEqualTo(1));
-        assertThat(callback.exception).hasMessage("foo");
+        assertThat(callback.exception).hasMessageEndingWith("foo");
     }
 
     @Test

File: core/src/main/java/com/linecorp/armeria/server/annotation/ExceptionVerbosity.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.linecorp.armeria.server.annotation;
 
+import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.server.HttpResponseException;
 import com.linecorp.armeria.server.HttpStatusException;
 
@@ -33,6 +34,7 @@ public enum ExceptionVerbosity {
      *     <li>{@link IllegalArgumentException}</li>
      *     <li>{@link HttpStatusException}</li>
      *     <li>{@link HttpResponseException}</li>
+     *     <li>Other expected exceptions as defined in {@link Exceptions#isExpected(Throwable)}</li>
      * </ul>
      */
     UNHANDLED,

File: core/src/main/java/com/linecorp/armeria/common/HttpMethod.java
Patch:
@@ -35,7 +35,7 @@
 import java.util.EnumSet;
 import java.util.Set;
 
-import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Sets;
 
 /**
  * HTTP request method.
@@ -108,12 +108,12 @@ public enum HttpMethod {
      */
     UNKNOWN;
 
-    private static final Set<HttpMethod> knownMethods;
+    private static final Set<HttpMethod> knownMethods; // ImmutableEnumSet
 
     static {
         final Set<HttpMethod> allMethods = EnumSet.allOf(HttpMethod.class);
         allMethods.remove(UNKNOWN);
-        knownMethods = ImmutableSet.copyOf(allMethods);
+        knownMethods = Sets.immutableEnumSet(allMethods);
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/Route.java
Patch:
@@ -119,7 +119,7 @@ static RouteBuilder builder() {
     int complexity();
 
     /**
-     * Returns the {@link Set} of {@link HttpMethod}s that this {@link Route} supports.
+     * Returns the {@link Set} of non-empty {@link HttpMethod}s that this {@link Route} supports.
      */
     Set<HttpMethod> methods();
 

File: core/src/main/java/com/linecorp/armeria/server/RouteBuilder.java
Patch:
@@ -418,7 +418,9 @@ public Route build() {
             throw new IllegalStateException("Must set methods if consumes or produces is not empty." +
                                             " consumes: " + consumes + ", produces: " + produces);
         }
-        return new DefaultRoute(pathMapping, methods, consumes, produces, paramPredicates, headerPredicates);
+        final Set<HttpMethod> pathMethods = methods.isEmpty() ? HttpMethod.knownMethods() : methods;
+        return new DefaultRoute(pathMapping, pathMethods, consumes, produces,
+                                paramPredicates, headerPredicates);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/client/ClientDecorationBuilder.java
Patch:
@@ -58,6 +58,7 @@ public ClientDecorationBuilder add(Function<? super HttpClient, ? extends HttpCl
      * @param decorator the {@link DecoratingHttpClientFunction} that intercepts an invocation
      */
     public ClientDecorationBuilder add(DecoratingHttpClientFunction decorator) {
+        requireNonNull(decorator, "decorator");
         return add(delegate -> new FunctionalDecoratingHttpClient(delegate, decorator));
     }
 
@@ -77,6 +78,7 @@ public ClientDecorationBuilder addRpc(Function<? super RpcClient, ? extends RpcC
      * @param decorator the {@link DecoratingHttpClientFunction} that intercepts an invocation
      */
     public ClientDecorationBuilder addRpc(DecoratingRpcClientFunction decorator) {
+        requireNonNull(decorator, "decorator");
         return addRpc(delegate -> new FunctionalDecoratingRpcClient(delegate, decorator));
     }
 

File: core/src/test/java/com/linecorp/armeria/common/logging/ContentPreviewerTest.java
Patch:
@@ -282,18 +282,18 @@ void testServerLog() throws Exception {
 
     @Test
     void testCustomPreviewer() throws Exception {
-        ContentPreviewer previewer = hexDumpContenPreviewer();
+        ContentPreviewer previewer = hexDumpContentPreviewer();
         previewer.onData(HttpData.wrap(new byte[] { 1, 2, 3, 4 }));
         assertThat(previewer.produce()).isEqualTo("01020304");
 
-        previewer = hexDumpContenPreviewer();
+        previewer = hexDumpContentPreviewer();
         previewer.onData(HttpData.wrap(new byte[] { 1, 2, 3 }));
         previewer.onData(HttpData.wrap(new byte[] { 4, 5 }));
         assertThat(previewer.produce()).isEqualTo("0102030405");
         assertThat(previewer.produce()).isEqualTo("0102030405");
     }
 
-    ContentPreviewer hexDumpContenPreviewer() {
+    ContentPreviewer hexDumpContentPreviewer() {
         return new ProducerBasedContentPreviewer(100, HttpHeaders.of(), hexDumpProducer());
     }
 }

File: brave/src/test/java/com/linecorp/armeria/client/brave/BraveClientIntegrationTest.java
Patch:
@@ -54,7 +54,7 @@
 public class BraveClientIntegrationTest extends ITHttpAsyncClient<WebClient> {
 
     @Rule(order = Integer.MAX_VALUE)
-    public TestRule globalTimeout = new DisableOnDebug(Timeout.seconds(10));
+    public TestRule globalTimeout = new DisableOnDebug(Timeout.seconds(15));
 
     @Parameters
     public static List<SessionProtocol> sessionProtocols() {

File: core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java
Patch:
@@ -519,7 +519,6 @@ public boolean canSchedule() {
             @Override
             public void run() {
                 if (state != State.DONE) {
-                    reqCtx.setTimedOut();
                     final Runnable requestTimeoutHandler = reqCtx.requestTimeoutHandler();
                     if (requestTimeoutHandler != null) {
                         requestTimeoutHandler.run();

File: core/src/main/java/com/linecorp/armeria/server/docs/ServiceInfo.java
Patch:
@@ -123,8 +123,8 @@ static Set<MethodInfo> mergeEndpoints(Iterable<MethodInfo> methodInfos) {
                     return new MethodInfo(value.name(), value.returnTypeSignature(),
                                           value.parameters(), value.exceptionTypeSignatures(),
                                           endpointInfos, value.exampleHttpHeaders(),
-                                          value.exampleRequests(), value.httpMethod(),
-                                          value.docString());
+                                          value.exampleRequests(), value.examplePaths(), value.exampleQueries(),
+                                          value.httpMethod(), value.docString());
                 }
             });
         }

File: core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java
Patch:
@@ -442,7 +442,7 @@ public ClientFactoryBuilder http2PingTimeout(Duration http2PingTimeout) {
      * when there are no active streams open.
      */
     public ClientFactoryBuilder useHttp2PingWhenNoActiveStreams(boolean useHttp2PingWhenNoActiveStreams) {
-        option(ClientFactoryOption.USE_HTT2_PING_WHEN_NO_ACTIVE_STREAMS, useHttp2PingWhenNoActiveStreams);
+        option(ClientFactoryOption.USE_HTTP2_PING_WHEN_NO_ACTIVE_STREAMS, useHttp2PingWhenNoActiveStreams);
         return this;
     }
 

File: core/src/main/java/com/linecorp/armeria/client/ClientFactoryOption.java
Patch:
@@ -188,8 +188,8 @@ public final class ClientFactoryOption<T>
      * Whether to sent <a href="https://httpwg.org/specs/rfc7540.html#PING">PING</a> when
      * there are no active HTTP/2 streams.
      */
-    public static final ClientFactoryOption<Boolean> USE_HTT2_PING_WHEN_NO_ACTIVE_STREAMS =
-            define("USE_HTT2_PING_WHEN_NO_ACTIVE_STREAMS", Flags.useHttp2PingWhenNoActiveStreams());
+    public static final ClientFactoryOption<Boolean> USE_HTTP2_PING_WHEN_NO_ACTIVE_STREAMS =
+            define("USE_HTTP2_PING_WHEN_NO_ACTIVE_STREAMS", Flags.defaultUseHttp2PingWhenNoActiveStreams());
 
     /**
      * Whether to send an HTTP/2 preface string instead of an HTTP/1 upgrade request to negotiate

File: core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptions.java
Patch:
@@ -229,7 +229,7 @@ public long http2PingTimeoutMillis() {
      * no active HTTP/2 streams.
      */
     public boolean useHttp2PingWhenNoActiveStreams() {
-        return get(ClientFactoryOption.USE_HTT2_PING_WHEN_NO_ACTIVE_STREAMS);
+        return get(ClientFactoryOption.USE_HTTP2_PING_WHEN_NO_ACTIVE_STREAMS);
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/internal/common/Http2KeepAliveHandler.java
Patch:
@@ -53,7 +53,7 @@
  *
  * <p>Once an {@link IdleStateEvent} is triggered and when there are active streams open then a
  * {@link Http2PingFrame} will be written on connection. When there are no active streams then it depends on
- * {@link Flags#useHttp2PingWhenNoActiveStreams()}.
+ * {@link Flags#defaultUseHttp2PingWhenNoActiveStreams()}.
  *
  * <p>Once a {@link Http2PingFrame} is written, then either an ACK for the {@link Http2PingFrame} or any data
  * is read on connection will invalidate the condition that triggers connection closure. If either of the
@@ -62,7 +62,7 @@
  * <p>This class is <b>not</b> thread-safe and all methods are to be called from single thread such
  * as {@link EventLoop}.
  *
- * @see Flags#useHttp2PingWhenNoActiveStreams()
+ * @see Flags#defaultUseHttp2PingWhenNoActiveStreams()
  * @see Flags#defaultHttp2PingTimeoutMillis()
  */
 @NotThreadSafe

File: core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java
Patch:
@@ -164,7 +164,7 @@ public final class ServerBuilder {
     private int maxNumConnections = Flags.maxNumConnections();
     private long idleTimeoutMillis = Flags.defaultServerIdleTimeoutMillis();
     private long http2PingTimeoutMillis = Flags.defaultHttp2PingTimeoutMillis();
-    private boolean useHttp2PingWhenNoActiveStreams = Flags.useHttp2PingWhenNoActiveStreams();
+    private boolean useHttp2PingWhenNoActiveStreams = Flags.defaultUseHttp2PingWhenNoActiveStreams();
     private int http2InitialConnectionWindowSize = Flags.defaultHttp2InitialConnectionWindowSize();
     private int http2InitialStreamWindowSize = Flags.defaultHttp2InitialStreamWindowSize();
     private long http2MaxStreamsPerConnection = Flags.defaultHttp2MaxStreamsPerConnection();

File: core/src/main/java/com/linecorp/armeria/client/HttpClientIdleTimeoutHandler.java
Patch:
@@ -22,8 +22,8 @@
 
 final class HttpClientIdleTimeoutHandler extends IdleTimeoutHandler {
 
-    HttpClientIdleTimeoutHandler(long idleTimeoutMillis) {
-        super("client", idleTimeoutMillis);
+    HttpClientIdleTimeoutHandler(long idleTimeoutMillis, boolean isHttp2, boolean sendHttp2Ping) {
+        super("client", idleTimeoutMillis, isHttp2, sendHttp2Ping);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java
Patch:
@@ -339,7 +339,9 @@ void finishSuccessfully(ChannelPipeline pipeline, SessionProtocol protocol) {
 
         final long idleTimeoutMillis = clientFactory.idleTimeoutMillis();
         if (idleTimeoutMillis > 0) {
-            pipeline.addFirst(new HttpClientIdleTimeoutHandler(idleTimeoutMillis));
+            pipeline.addFirst(new HttpClientIdleTimeoutHandler(idleTimeoutMillis,
+                                                               protocol.isMultiplex(),
+                                                               clientFactory.http2PingTimeoutMillis() > 0));
         }
 
         pipeline.channel().eventLoop().execute(() -> pipeline.fireUserEventTriggered(protocol));

File: core/src/main/java/com/linecorp/armeria/server/HttpServerIdleTimeoutHandler.java
Patch:
@@ -22,8 +22,8 @@
 
 final class HttpServerIdleTimeoutHandler extends IdleTimeoutHandler {
 
-    HttpServerIdleTimeoutHandler(long idleTimeoutMillis) {
-        super("server", idleTimeoutMillis);
+    HttpServerIdleTimeoutHandler(long idleTimeoutMillis, boolean isHttp2, boolean sendHttp2Ping) {
+        super("server", idleTimeoutMillis, isHttp2, sendHttp2Ping);
     }
 
     @Override

File: core/src/test/java/com/linecorp/armeria/client/HttpClientIdleTimeoutHandlerTest.java
Patch:
@@ -40,7 +40,7 @@ public class HttpClientIdleTimeoutHandlerTest {
     @Before
     public void before() {
         session = new MockHttpSessionHandler();
-        ch = new EmbeddedChannel(new HttpClientIdleTimeoutHandler(idleTimeoutMillis), session);
+        ch = new EmbeddedChannel(new HttpClientIdleTimeoutHandler(idleTimeoutMillis, false, false), session);
         assertTrue(ch.isOpen());
     }
 

File: core/src/test/java/com/linecorp/armeria/server/HttpServerIdleTimeoutHandlerTest.java
Patch:
@@ -38,7 +38,7 @@ public class HttpServerIdleTimeoutHandlerTest {
     @Before
     public void before() {
         server = new MockHttpServerHandler();
-        ch = new EmbeddedChannel(new HttpServerIdleTimeoutHandler(idleTimeoutMillis), server);
+        ch = new EmbeddedChannel(new HttpServerIdleTimeoutHandler(idleTimeoutMillis, false, false), server);
         assertTrue(ch.isOpen());
     }
 

File: core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckService.java
Patch:
@@ -348,9 +348,9 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
 
                     updateRequestTimeout(ctx, longPollingTimeoutMillis);
 
-                    // Cancel the scheduled timeout task if the response is closed,
-                    // so that it's removed from the event loop's task queue quickly.
-                    res.whenComplete().exceptionally(cause -> {
+                    // Cancel the scheduled timeout and ping task if the response is closed,
+                    // so that they are removed from the event loop's task queue.
+                    res.whenComplete().handle((unused1, unused2) -> {
                         pendingResponse.cancelAllScheduledFutures();
                         return null;
                     });

File: core/src/main/java/com/linecorp/armeria/client/DecodedHttpResponse.java
Patch:
@@ -18,9 +18,9 @@
 
 import javax.annotation.Nullable;
 
-import com.linecorp.armeria.common.DefaultHttpResponse;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpObject;
+import com.linecorp.armeria.internal.common.DefaultHttpResponse;
 import com.linecorp.armeria.internal.common.InboundTrafficController;
 
 import io.netty.channel.EventLoop;

File: core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java
Patch:
@@ -42,7 +42,6 @@
 import com.linecorp.armeria.common.RequestHeadersBuilder;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
-import com.linecorp.armeria.common.stream.ClosedPublisherException;
 import com.linecorp.armeria.common.stream.ClosedStreamException;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.common.util.SafeCloseable;
@@ -139,7 +138,7 @@ public void operationComplete(ChannelFuture future) throws Exception {
         }
 
         final Throwable cause = future.cause();
-        if (!(cause instanceof ClosedPublisherException)) {
+        if (!(cause instanceof ClosedStreamException)) {
             final Channel ch = future.channel();
             Exceptions.logIfUnexpected(logger, ch, HttpSession.get(ch).protocol(), cause);
             ch.close();

File: core/src/main/java/com/linecorp/armeria/client/encoding/DecodingClient.java
Patch:
@@ -36,7 +36,7 @@
  * A {@link DecoratingClient} that requests and decodes HTTP encoding (e.g., gzip) that has been applied to the
  * content of an {@link HttpResponse}.
  */
-public class DecodingClient extends SimpleDecoratingHttpClient {
+public final class DecodingClient extends SimpleDecoratingHttpClient {
 
     /**
      * Creates a new {@link DecodingClient} decorator with the default encodings of 'gzip' and 'deflate'.

File: core/src/main/java/com/linecorp/armeria/client/limit/ConcurrencyLimitingClient.java
Patch:
@@ -36,7 +36,7 @@
  * }</pre>
  *
  */
-public class ConcurrencyLimitingClient
+public final class ConcurrencyLimitingClient
         extends AbstractConcurrencyLimitingClient<HttpRequest, HttpResponse> implements HttpClient {
 
     /**

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java
Patch:
@@ -54,7 +54,7 @@
 /**
  * An {@link HttpClient} decorator that handles failures of an invocation and retries HTTP requests.
  */
-public class RetryingClient extends AbstractRetryingClient<HttpRequest, HttpResponse>
+public final class RetryingClient extends AbstractRetryingClient<HttpRequest, HttpResponse>
         implements HttpClient {
 
     private static final Logger logger = LoggerFactory.getLogger(RetryingClient.class);

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingClientBuilder.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * Builds a new {@link RetryingClient} or its decorator function.
  */
-public class RetryingClientBuilder extends AbstractRetryingClientBuilder<HttpResponse> {
+public final class RetryingClientBuilder extends AbstractRetryingClientBuilder<HttpResponse> {
 
     private static final int DEFAULT_CONTENT_PREVIEW_LENGTH = Integer.MAX_VALUE;
 

File: core/src/main/java/com/linecorp/armeria/common/stream/ClosedStreamException.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * A {@link RuntimeException} that is raised when a {@link StreamMessage} has been closed unexpectedly.
  */
-public final class ClosedStreamException extends ClosedPublisherException {
+public final class ClosedStreamException extends RuntimeException {
 
     private static final long serialVersionUID = -7665826869012452735L;
 
@@ -38,7 +38,7 @@ public static ClosedStreamException get() {
 
     private ClosedStreamException() {}
 
-    private ClosedStreamException(boolean dummy) {
-        super(dummy);
+    private ClosedStreamException(@SuppressWarnings("unused") boolean dummy) {
+        super(null, null, false, false);
     }
 }

File: core/src/main/java/com/linecorp/armeria/common/stream/DeferredStreamMessage.java
Patch:
@@ -62,7 +62,7 @@ public class DeferredStreamMessage<T> extends AbstractStreamMessage<T> {
     @SuppressWarnings("rawtypes")
     private static final AtomicReferenceFieldUpdater<DeferredStreamMessage, Throwable>
             abortCauseUpdater = AtomicReferenceFieldUpdater.newUpdater(
-                    DeferredStreamMessage.class, Throwable.class, "abortCause");
+            DeferredStreamMessage.class, Throwable.class, "abortCause");
 
     @Nullable
     @SuppressWarnings("unused") // Updated only via delegateUpdater

File: core/src/main/java/com/linecorp/armeria/server/DecodedHttpRequest.java
Patch:
@@ -18,12 +18,12 @@
 
 import javax.annotation.Nullable;
 
-import com.linecorp.armeria.common.DefaultHttpRequest;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpObject;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.RequestHeaders;
+import com.linecorp.armeria.internal.common.DefaultHttpRequest;
 import com.linecorp.armeria.internal.common.InboundTrafficController;
 
 import io.netty.channel.ChannelHandlerContext;

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -53,7 +53,7 @@
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
 import com.linecorp.armeria.common.metric.NoopMeterRegistry;
-import com.linecorp.armeria.common.stream.ClosedPublisherException;
+import com.linecorp.armeria.common.stream.ClosedStreamException;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.common.util.SystemInfo;
@@ -105,7 +105,7 @@ final class HttpServerHandler extends ChannelInboundHandlerAdapter implements Ht
 
     static final ChannelFutureListener CLOSE_ON_FAILURE = future -> {
         final Throwable cause = future.cause();
-        if (cause != null && !(cause instanceof ClosedPublisherException)) {
+        if (cause != null && !(cause instanceof ClosedStreamException)) {
             final Channel ch = future.channel();
             logException(ch, cause);
             safeClose(ch);

File: core/src/main/java/com/linecorp/armeria/server/auth/AuthService.java
Patch:
@@ -37,7 +37,7 @@
  *
  * @see AuthServiceBuilder
  */
-public class AuthService extends SimpleDecoratingHttpService {
+public final class AuthService extends SimpleDecoratingHttpService {
 
     static final Logger logger = LoggerFactory.getLogger(AuthService.class);
 

File: core/src/main/java/com/linecorp/armeria/server/auth/AuthServiceBuilder.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * Builds a new {@link AuthService}.
  */
-public class AuthServiceBuilder {
+public final class AuthServiceBuilder {
 
     @Nullable
     private Authorizer<HttpRequest> authorizer;

File: core/src/main/java/com/linecorp/armeria/server/file/FileService.java
Patch:
@@ -64,7 +64,7 @@
  *
  * @see FileServiceBuilder
  */
-public class FileService extends AbstractHttpService {
+public final class FileService extends AbstractHttpService {
 
     private static final Logger logger = LoggerFactory.getLogger(FileService.class);
 

File: core/src/main/java/com/linecorp/armeria/server/file/FileServiceBuilder.java
Patch:
@@ -38,7 +38,7 @@
  * Builds a new {@link FileService} and its {@link FileServiceConfig}. Use the factory methods in
  * {@link FileService} if you do not override the default settings.
  */
-public class FileServiceBuilder {
+public final class FileServiceBuilder {
 
     @Nullable
     private static final String DEFAULT_ENTRY_CACHE_SPEC = Flags.fileServiceCacheSpec();

File: core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroupLongPollingTest.java
Patch:
@@ -65,7 +65,7 @@ protected void configure(ServerBuilder sb) throws Exception {
             // to send a health check response when the server is shutting down.
             // Without graceful shutdown, the health check request will be aborted
             // with GOAWAY or disconnection.
-            sb.gracefulShutdownTimeout(3000, 10000);
+            sb.gracefulShutdownTimeoutMillis(3000, 10000);
         }
     };
 

File: core/src/test/java/com/linecorp/armeria/common/logging/ContentPreviewerTest.java
Patch:
@@ -124,7 +124,7 @@ private static ContentPreviewerFactory contentPreviewerFactory(int maxLength) {
         return ContentPreviewerFactory.builder()
                                       .maxLength(maxLength)
                                       .defaultCharset(StandardCharsets.UTF_8)
-                                      .disable(new MediaTypeSet(MediaType.BASIC_AUDIO))
+                                      .disable(MediaTypeSet.of(MediaType.BASIC_AUDIO))
                                       .build();
     }
 

File: core/src/test/java/com/linecorp/armeria/common/logging/RequestContextExporterTest.java
Patch:
@@ -148,7 +148,7 @@ void customExportKey() {
                 .builder()
                 .addAttribute("attrs.attr1", ATTR1)
                 .addAttribute("my_attr2", ATTR1)
-                .addHttpRequestHeader(HttpHeaderNames.METHOD, "request_method")
+                .addRequestHeader(HttpHeaderNames.METHOD, "request_method")
                 .addKeyPattern("request_id=req.id")
                 .addKeyPattern("foo=attr:" + Foo.class.getName() + "#ATTR3")
                 .addKeyPattern("bar=attr:" + Foo.class.getName() + "#ATTR3:" + FooStringifier.class.getName())

File: core/src/test/java/com/linecorp/armeria/common/util/ThreadFactoryTest.java
Patch:
@@ -113,8 +113,7 @@ void testAbstractThreadFactory() {
         final Thread t3 = new EventLoopThreadFactory("test", Thread.MAX_PRIORITY).newThread(() -> {});
         assertThat(t3.getPriority()).isEqualTo(Thread.MAX_PRIORITY);
 
-        final Thread t4 = new EventLoopThreadFactory("test",
-                                               true, Thread.MIN_PRIORITY).newThread(() -> {});
+        final Thread t4 = new EventLoopThreadFactory("test", true, Thread.MIN_PRIORITY).newThread(() -> {});
         assertThat(t4.isDaemon()).isTrue();
         assertThat(t4.getPriority()).isEqualTo(Thread.MIN_PRIORITY);
 

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageDeframer.java
Patch:
@@ -98,6 +98,7 @@ public class ArmeriaMessageDeframer implements AutoCloseable {
      * as is in {@code buf} to optimize parsing. For compressed messages, we will parse incrementally
      * and thus return a {@link InputStream} in {@code stream}.
      */
+    @UnstableApi
     public static final class DeframedMessage {
         private final int type;
 
@@ -180,6 +181,7 @@ public int hashCode() {
     /**
      * A listener of deframing events.
      */
+    @UnstableApi
     public interface Listener {
 
         /**

File: retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/RetrofitClassAwareMeterIdPrefixFunction.java
Patch:
@@ -87,7 +87,7 @@ final class RetrofitClassAwareMeterIdPrefixFunction extends RetrofitMeterIdPrefi
                                             @Nullable String serviceTagName,
                                             @Nullable String serviceName,
                                             Class<?> serviceClass) {
-        super(name, null, null, null);
+        super(name, null, null);
 
         this.name = name;
         this.serviceTagName = firstNonNull(serviceTagName, "service");

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/THttpClientTest.java
Patch:
@@ -22,7 +22,7 @@
 
 import org.junit.jupiter.api.Test;
 
-import com.linecorp.armeria.common.DefaultRpcResponse;
+import com.linecorp.armeria.common.CompletableRpcResponse;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;
 import com.linecorp.armeria.server.Server;
@@ -47,7 +47,7 @@ public void serviceAdded(ServiceConfig cfg) throws Exception {
                                      @Override
                                      public RpcResponse serve(
                                              ServiceRequestContext ctx, RpcRequest req) throws Exception {
-                                         return new DefaultRpcResponse();
+                                         return new CompletableRpcResponse();
                                      }
                                  }).decorate(THttpService.newDecorator());
         Server.builder().service("/", tHttpService).build();

File: core/src/main/java/com/linecorp/armeria/common/stream/FixedStreamMessage.java
Patch:
@@ -120,7 +120,6 @@ final SubscriptionImpl subscribe(SubscriptionImpl subscription) {
         return subscription;
     }
 
-    @Override
     final void notifySubscriberOfCloseEvent(SubscriptionImpl subscription, CloseEvent event) {
         try {
             event.notifySubscriber(subscription, whenComplete());

File: brave/src/test/java/com/linecorp/armeria/client/brave/BraveClientIntegrationTest.java
Patch:
@@ -154,14 +154,14 @@ protected void post(WebClient client, String pathIncludingQuery, String body) {
     }
 
     @Override
-    protected void getAsync(WebClient client, String path, Callback<Void> callback) throws Exception {
+    protected void getAsync(WebClient client, String path, Callback<Integer> callback) throws Exception {
         try (ClientRequestContextCaptor ctxCaptor = Clients.newContextCaptor()) {
             final HttpResponse res = client.get(path);
             final ClientRequestContext ctx = ctxCaptor.get();
-            res.aggregate().handle((unused, cause) -> {
+            res.aggregate().handle((response, cause) -> {
                 try (SafeCloseable ignored = ctx.push()) {
                     if (cause == null) {
-                        callback.onSuccess(null);
+                        callback.onSuccess(response.status().code());
                     } else {
                         callback.onError(cause);
                     }

File: brave/src/test/java/com/linecorp/armeria/client/brave/ClientRequestContextAdapterTest.java
Patch:
@@ -78,7 +78,7 @@ void statusCode() {
         ctx.logBuilder().endResponse();
 
         final HttpClientResponse res =
-                ClientRequestContextAdapter.asHttpClientResponse(ctx.log().ensureComplete());
+                ClientRequestContextAdapter.asHttpClientResponse(ctx.log().ensureComplete(), null);
 
         assertThat(res.statusCode()).isEqualTo(200);
     }

File: brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceIntegrationTest.java
Patch:
@@ -56,7 +56,7 @@ public void setup() throws Exception {
     }
 
     @Override
-    protected void init() throws Exception {
+    protected void init() {
         final ServerBuilder sb = Server.builder();
         sb.service("/", (ctx, req) -> {
             if (req.method() == HttpMethod.OPTIONS) {
@@ -74,7 +74,7 @@ protected void init() throws Exception {
             return HttpResponse.of(OK, MediaType.PLAIN_TEXT_UTF_8, "happy");
         });
         sb.service("/exception", (ctx, req) -> {
-            throw new Exception();
+            throw new Exception("not ready");
         });
         sb.decorator(BraveService.newDecorator(httpTracing));
 

File: examples/context-propagation/rxjava/src/main/java/example/armeria/contextpropagation/rxjava/Main.java
Patch:
@@ -8,10 +8,10 @@ public class Main {
 
     public static void main(String[] args) {
         final Server backend = Server.builder()
-                                     .service("/square/{num}", ((ctx, req) -> {
+                                     .service("/square/{num}", (ctx, req) -> {
                                          final long num = Long.parseLong(ctx.pathParam("num"));
                                          return HttpResponse.of(Long.toString(num * num));
-                                     }))
+                                     })
                                      .http(8081)
                                      .build();
 

File: rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextFlowable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 LINE Corporation
+ * Copyright 2020 LINE Corporation
  *
  * LINE Corporation licenses this file to you under the Apache License,
  * version 2.0 (the "License"); you may not use this file except in compliance
@@ -22,8 +22,8 @@
 import com.linecorp.armeria.common.RequestContext;
 import com.linecorp.armeria.common.util.SafeCloseable;
 
-import io.reactivex.Flowable;
-import io.reactivex.internal.fuseable.ConditionalSubscriber;
+import io.reactivex.rxjava3.core.Flowable;
+import io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber;
 
 final class RequestContextFlowable<T> extends Flowable<T> {
 

File: rxjava/src/main/java/com/linecorp/armeria/common/rxjava/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 LINE Corporation
+ * Copyright 2020 LINE Corporation
  *
  * LINE Corporation licenses this file to you under the Apache License,
  * version 2.0 (the "License"); you may not use this file except in compliance
@@ -15,7 +15,7 @@
  */
 
 /**
- * RxJava2 plugins to help keep {@link com.linecorp.armeria.common.RequestContext} during RxJava2 Operations.
+ * RxJava3 plugins to help keep {@link com.linecorp.armeria.common.RequestContext} during RxJava3 Operations.
  */
 @NonNullByDefault
 package com.linecorp.armeria.common.rxjava;

File: rxjava2/src/main/java/com/linecorp/armeria/common/rxjava2/RequestContextCallableCompletable.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.common.rxjava;
+package com.linecorp.armeria.common.rxjava2;
 
 import java.util.concurrent.Callable;
 

File: rxjava2/src/main/java/com/linecorp/armeria/common/rxjava2/RequestContextCallableFlowable.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.common.rxjava;
+package com.linecorp.armeria.common.rxjava2;
 
 import java.util.concurrent.Callable;
 

File: rxjava2/src/main/java/com/linecorp/armeria/common/rxjava2/RequestContextCallableMaybe.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.common.rxjava;
+package com.linecorp.armeria.common.rxjava2;
 
 import java.util.concurrent.Callable;
 

File: rxjava2/src/main/java/com/linecorp/armeria/common/rxjava2/RequestContextCallableObservable.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.common.rxjava;
+package com.linecorp.armeria.common.rxjava2;
 
 import java.util.concurrent.Callable;
 

File: rxjava2/src/main/java/com/linecorp/armeria/common/rxjava2/RequestContextCallableSingle.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.common.rxjava;
+package com.linecorp.armeria.common.rxjava2;
 
 import java.util.concurrent.Callable;
 

File: core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptionValue.java
Patch:
@@ -22,7 +22,8 @@
  *
  * @param <T> the type of the option value
  */
-public final class ClientFactoryOptionValue<T> extends AbstractOptionValue<ClientFactoryOption<T>, T> {
+public final class ClientFactoryOptionValue<T>
+        extends AbstractOptionValue<ClientFactoryOptionValue<T>, ClientFactoryOption<T>, T> {
     ClientFactoryOptionValue(ClientFactoryOption<T> option, T value) {
         super(option, value);
     }

File: core/src/main/java/com/linecorp/armeria/client/ClientOptionValue.java
Patch:
@@ -22,9 +22,9 @@
  *
  * @param <T> the type of the option value
  */
-public final class ClientOptionValue<T> extends AbstractOptionValue<ClientOption<T>, T> {
+public final class ClientOptionValue<T> extends AbstractOptionValue<ClientOptionValue<T>, ClientOption<T>, T> {
 
-    ClientOptionValue(ClientOption<T> constant, T value) {
-        super(constant, value);
+    ClientOptionValue(ClientOption<T> option, T value) {
+        super(option, value);
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java
Patch:
@@ -179,7 +179,7 @@ private DefaultClientRequestContext(
         writeTimeoutMillis = options.writeTimeoutMillis();
         responseTimeoutMillis = options.responseTimeoutMillis();
         maxResponseLength = options.maxResponseLength();
-        additionalRequestHeaders = options.getOrElse(ClientOption.HTTP_HEADERS, HttpHeaders.of());
+        additionalRequestHeaders = options.get(ClientOption.HTTP_HEADERS);
         customizers = copyThreadLocalCustomizers();
     }
 

File: core/src/main/java/com/linecorp/armeria/common/StringMultimapBuilder.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.linecorp.armeria.common;
 
+import static com.google.common.base.MoreObjects.firstNonNull;
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkState;
 import static java.util.Objects.requireNonNull;
@@ -515,6 +516,6 @@ public final SELF clear() {
 
     @Override
     public final String toString() {
-        return getClass().getSimpleName() + getters();
+        return getClass().getSimpleName() + firstNonNull(getters(), "[]");
     }
 }

File: core/src/test/java/com/linecorp/armeria/client/ClientFactoryBuilderTest.java
Patch:
@@ -66,7 +66,6 @@ void maxNumEventLoopsAndEventLoopSchedulerFactoryAreMutuallyExclusive() {
                 .hasMessageContaining("mutually exclusive");
     }
 
-    @SuppressWarnings("unchecked")
     @Test
     void shouldInheritClientFactoryOptions() {
         final ClientFactory factory1 = ClientFactory.builder()

File: grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcClientFactory.java
Patch:
@@ -96,7 +96,7 @@ public Object newClient(ClientBuilderParams params) {
                 GrpcSerializationFormats.isJson(serializationFormat) ?
                 GrpcJsonUtil.jsonMarshaller(
                         stubMethods(stubClass),
-                        options.getOrElse(GrpcClientOptions.JSON_MARSHALLER_CUSTOMIZER, NO_OP)) : null;
+                        options.get(GrpcClientOptions.JSON_MARSHALLER_CUSTOMIZER)) : null;
 
         final ArmeriaChannel channel = new ArmeriaChannel(
                 params,

File: grpc/src/test/java/com/linecorp/armeria/it/grpc/GrpcFlowControlTest.java
Patch:
@@ -37,7 +37,6 @@
 import com.google.protobuf.ByteString;
 
 import com.linecorp.armeria.client.Clients;
-import com.linecorp.armeria.client.grpc.GrpcClientOptions;
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
 import com.linecorp.armeria.grpc.testing.FlowControlTestServiceGrpc.FlowControlTestServiceImplBase;
 import com.linecorp.armeria.grpc.testing.FlowControlTestServiceGrpc.FlowControlTestServiceStub;
@@ -208,7 +207,6 @@ public void setUp() {
         client = Clients.builder(server.httpUri(GrpcSerializationFormats.PROTO))
                         .maxResponseLength(0)
                         .responseTimeoutMillis(0)
-                        .option(GrpcClientOptions.MAX_INBOUND_MESSAGE_SIZE_BYTES.newValue(Integer.MAX_VALUE))
                         .build(FlowControlTestServiceStub.class);
     }
 

File: core/src/main/java/com/linecorp/armeria/server/RouteDecoratingService.java
Patch:
@@ -104,7 +104,7 @@ private HttpService decorator() {
     public String toString() {
         return MoreObjects.toStringHelper(this)
                           .add("route", route)
-                          .add("decorator", decorator).toString();
+                          .toString();
     }
 
     private static class InitialDispatcherService extends SimpleDecoratingHttpService {

File: core/src/main/java/com/linecorp/armeria/common/logging/RequestContextExporter.java
Patch:
@@ -613,7 +613,7 @@ String stringify(@Nullable Object value) {
 
         @Override
         public int hashCode() {
-            return key.hashCode();
+            return key.hashCode() * 31 + exportKey.hashCode();
         }
 
         @Override
@@ -626,7 +626,8 @@ public boolean equals(@Nullable Object o) {
                 return false;
             }
 
-            return key.equals(((ExportEntry<?>) o).key);
+            return key.equals(((ExportEntry<?>) o).key) &&
+                   exportKey.equals(((ExportEntry<?>) o).exportKey);
         }
 
         @Override

File: logback/src/test/java/com/linecorp/armeria/common/logback/CustomObjectValueStringifier.java
Patch:
@@ -17,9 +17,9 @@
 
 import java.util.function.Function;
 
-public final class CustomValueStringifier implements Function<CustomValue, String> {
+public final class CustomObjectValueStringifier implements Function<CustomObject, String> {
     @Override
-    public String apply(CustomValue o) {
+    public String apply(CustomObject o) {
         return o.value;
     }
 }

File: core/src/test/java/com/linecorp/armeria/client/HttpClientMaxConcurrentStreamTest.java
Patch:
@@ -255,6 +255,8 @@ void exceededMaxStreamsPropagatesFailureCorrectly() throws Exception {
         });
 
         await().untilAsserted(() -> assertThat(responses).hasSize(numRequests));
+        await().until(() -> receivedResponses.stream().filter(CompletableFuture::isCompletedExceptionally)
+                                             .count() == numFailedRequests);
         assertThat(opens).hasValue(numExpectedConnections);
         assertThat(connectionTimings.stream().filter(
                 timings -> timings.pendingAcquisitionDurationNanos() > 0))

File: core/src/main/java/com/linecorp/armeria/client/AbstractClientOptionsBuilder.java
Patch:
@@ -60,7 +60,7 @@ protected AbstractClientOptionsBuilder(ClientOptions options) {
      */
     public AbstractClientOptionsBuilder options(ClientOptions options) {
         requireNonNull(options, "options");
-        options.asMap().values().forEach(this::option);
+        options.forEach(this::option);
         return this;
     }
 

File: core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java
Patch:
@@ -505,7 +505,7 @@ public <T> ClientFactoryBuilder option(ClientFactoryOptionValue<T> optionValue)
      */
     public ClientFactoryBuilder options(ClientFactoryOptions options) {
         requireNonNull(options, "options");
-        options.asMap().values().forEach(this::option);
+        options.forEach(this::option);
         return this;
     }
 

File: core/src/main/java/com/linecorp/armeria/server/docs/DocStringExtractor.java
Patch:
@@ -33,7 +33,6 @@
 import org.reflections.util.ClasspathHelper;
 import org.reflections.util.ConfigurationBuilder;
 import org.reflections.util.FilterBuilder;
-import org.reflections.util.Utils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -82,7 +81,7 @@ private Map<String, String> getAllDocStrings0(ClassLoader classLoader) {
 
         final Reflections reflections = new Reflections(configuration);
         final Store store = reflections.getStore();
-        if (!store.keySet().contains(Utils.index(ResourcesScanner.class))) {
+        if (!store.keySet().contains(ResourcesScanner.class.getSimpleName())) {
             // No resources were found.
             return ImmutableMap.of();
         }

File: core/src/test/java/com/linecorp/armeria/common/logging/RequestContextExporterTest.java
Patch:
@@ -62,6 +62,7 @@ void shouldNotExportNullValue() {
                 BuiltInProperty.REQ_PATH.key,
                 BuiltInProperty.RES_CONTENT_LENGTH.key,
                 BuiltInProperty.RES_STATUS_CODE.key,
+                BuiltInProperty.REQ_ID.key,
                 BuiltInProperty.SCHEME.key,
                 "attrs.attr1");
     }

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/THttp2Client.java
Patch:
@@ -28,8 +28,6 @@
 import org.apache.thrift.transport.TTransport;
 import org.apache.thrift.transport.TTransportException;
 
-import com.linecorp.armeria.internal.client.Http1ClientCodec;
-
 import io.netty.bootstrap.Bootstrap;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
@@ -47,6 +45,7 @@
 import io.netty.handler.codec.http.DefaultFullHttpRequest;
 import io.netty.handler.codec.http.FullHttpRequest;
 import io.netty.handler.codec.http.FullHttpResponse;
+import io.netty.handler.codec.http.HttpClientCodec;
 import io.netty.handler.codec.http.HttpClientUpgradeHandler;
 import io.netty.handler.codec.http.HttpHeaderNames;
 import io.netty.handler.codec.http.HttpHeaders;
@@ -265,7 +264,7 @@ public void initChannel(SocketChannel ch) throws Exception {
                 p.addLast(connHandler);
                 configureEndOfPipeline(p);
             } else {
-                final Http1ClientCodec sourceCodec = new Http1ClientCodec();
+                final HttpClientCodec sourceCodec = new HttpClientCodec();
                 final HttpClientUpgradeHandler upgradeHandler = new HttpClientUpgradeHandler(
                         sourceCodec, new Http2ClientUpgradeCodec(connHandler), 65536);
 

File: core/src/main/java/com/linecorp/armeria/common/Flags.java
Patch:
@@ -455,7 +455,7 @@ private static void setUseOpenSslAndDumpOpenSslInfo() {
         dumpOpenSslInfo = getBoolean("dumpOpenSslInfo", false);
         if (dumpOpenSslInfo) {
             final SSLEngine engine = SslContextUtil.createSslContext(
-                    SslContextBuilder.forClient(),
+                    SslContextBuilder::forClient,
                     false,
                     ImmutableList.of()).newEngine(ByteBufAllocator.DEFAULT);
             logger.info("All available SSL protocols: {}",

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HttpHealthChecker.java
Patch:
@@ -250,7 +250,7 @@ private void updateLongPollingSettings(ResponseHeaders headers) {
                         0, Integer.parseInt(longPollingSettings.substring(0, commaPos).trim()));
                 pingIntervalSeconds = Integer.max(
                         0, Integer.parseInt(longPollingSettings.substring(commaPos + 1).trim()));
-            } catch (NumberFormatException e) {
+            } catch (Exception e) {
                 // Ignore malformed settings.
             }
 

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostAnnotatedServiceBindingBuilder.java
Patch:
@@ -248,7 +248,7 @@ public VirtualHostAnnotatedServiceBindingBuilder decorator(
     public VirtualHostBuilder build(Object service) {
         requireNonNull(service, "service");
         this.service = service;
-        virtualHostBuilder.addAnnotatedServiceBindingBuilder(this);
+        virtualHostBuilder.addServiceConfigSetters(this);
         return virtualHostBuilder;
     }
 

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostServiceBindingBuilder.java
Patch:
@@ -203,6 +203,6 @@ public VirtualHostBuilder build(HttpService service) {
 
     @Override
     void serviceConfigBuilder(ServiceConfigBuilder serviceConfigBuilder) {
-        virtualHostBuilder.addServiceConfigBuilder(serviceConfigBuilder);
+        virtualHostBuilder.addServiceConfigSetters(serviceConfigBuilder);
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsAddressEndpointGroup.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.linecorp.armeria.client.endpoint.dns;
 
+import static com.linecorp.armeria.internal.client.DnsUtil.anyInterfaceSupportsIpV6;
 import static com.linecorp.armeria.internal.client.DnsUtil.extractAddressBytes;
 
 import java.util.List;
@@ -105,7 +106,7 @@ private static List<DnsQuestion> newQuestions(
             String hostname, @Nullable ResolvedAddressTypes resolvedAddressTypes) {
 
         if (resolvedAddressTypes == null) {
-            if (NetUtil.isIpV4StackPreferred()) {
+            if (NetUtil.isIpV4StackPreferred() || !anyInterfaceSupportsIpV6()) {
                 resolvedAddressTypes = ResolvedAddressTypes.IPV4_ONLY;
             } else {
                 resolvedAddressTypes = ResolvedAddressTypes.IPV4_PREFERRED;

File: core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java
Patch:
@@ -280,15 +280,15 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)
                             HttpData.ofUtf8("some content to compress "),
                             HttpData.ofUtf8("more content to compress"));
                 }
-            }.decorate(EncodingService.class));
+            }.decorate(EncodingService.newDecorator()));
 
             sb.service("/encoding-toosmall", new AbstractHttpService() {
                 @Override
                 protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)
                         throws Exception {
                     return HttpResponse.of(HttpStatus.OK, MediaType.PLAIN_TEXT_UTF_8, "small content");
                 }
-            }.decorate(EncodingService.class));
+            }.decorate(EncodingService.newDecorator()));
 
             sb.service("/pooled", new PooledContentService());
 

File: core/src/test/java/com/linecorp/armeria/client/logging/ContentPreviewingClientTest.java
Patch:
@@ -70,7 +70,9 @@ protected void configure(ServerBuilder sb) throws Exception {
                            return HttpResponse.of(responseHeaders,
                                                   HttpData.ofUtf8("Hello " + aggregated.contentUtf8() + '!'));
                        })));
-            sb.decorator(delegate -> new EncodingService(delegate, unused -> true, 1));
+            sb.decorator(EncodingService.builder()
+                                        .minBytesToForceChunkedEncoding(1)
+                                        .newDecorator());
         }
     };
 

File: spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java
Patch:
@@ -193,7 +193,7 @@ public static class Compression {
         /**
          * The minimum bytes for encoding the content of an HTTP response.
          */
-        private String minResponseSize = "2048";
+        private String minResponseSize = "1024";
 
         /**
          * Returns {@code true} if the HTTP content encoding is enabled.

File: benchmarks/src/jmh/java/com/linecorp/armeria/common/MediaTypesBenchmark.java
Patch:
@@ -24,7 +24,7 @@
  */
 public class MediaTypesBenchmark {
 
-    private static final MediaTypeSet MEDIA_TYPES = new MediaTypeSet(
+    private static final MediaTypeSet MEDIA_TYPES = MediaTypeSet.of(
             MediaType.create("application", "grpc"), MediaType.create("application", "grpc+proto"));
 
     private static final MediaType GRPC_MEDIA_TYPE = MediaType.create("application", "grpc");

File: core/src/main/java/com/linecorp/armeria/server/annotation/StringResponseConverterFunction.java
Patch:
@@ -18,7 +18,6 @@
 import static com.linecorp.armeria.internal.server.ResponseConversionUtil.aggregateFrom;
 
 import java.nio.charset.Charset;
-import java.nio.charset.StandardCharsets;
 import java.util.stream.Stream;
 
 import javax.annotation.Nullable;
@@ -30,6 +29,7 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.ResponseHeaders;
+import com.linecorp.armeria.internal.common.ArmeriaHttpUtil;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 /**
@@ -48,7 +48,7 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,
             // @Produces("text/plain") or @ProducesText is specified.
             if (mediaType.is(MediaType.ANY_TEXT_TYPE)) {
                 // Use 'utf-8' charset by default.
-                final Charset charset = mediaType.charset(StandardCharsets.UTF_8);
+                final Charset charset = mediaType.charset(ArmeriaHttpUtil.HTTP_DEFAULT_CONTENT_CHARSET);
 
                 // To avoid sending an unfinished text to the client, always aggregate the published strings.
                 if (result instanceof Publisher) {

File: core/src/test/java/com/linecorp/armeria/client/HttpResponseDecoderTest.java
Patch:
@@ -70,7 +70,7 @@ void confirmResponseStartAndEndInTheSameThread(SessionProtocol protocol)
         // This increases the execution duration of 'endResponse0' of the DefaultRequestLog,
         // which means that we have more chance to reproduce the bug if two threads are racing
         // for notifying RESPONSE_END to listeners.
-        builder.decorator(ContentPreviewingClient.builder().contentPreview(100).newDecorator());
+        builder.decorator(ContentPreviewingClient.newDecorator(100));
         // In order to use a different thread to subscribe to the response.
         builder.decorator(RetryingClient.builder(strategy)
                                         .maxTotalAttempts(2)

File: core/src/test/java/com/linecorp/armeria/common/logging/LoggingDecoratorBuilderTest.java
Patch:
@@ -173,6 +173,6 @@ void responseCauseSanitizer() {
         assertThat(builder.responseCauseSanitizer()).isEqualTo(CAUSE_SANITIZER);
     }
 
-    private static final class Builder extends LoggingDecoratorBuilder<Builder> {
+    private static final class Builder extends LoggingDecoratorBuilder {
     }
 }

File: dropwizard/src/main/java/com/linecorp/armeria/dropwizard/ArmeriaConfigurationUtil.java
Patch:
@@ -99,8 +99,8 @@ static void configureServer(ServerBuilder serverBuilder, ArmeriaSettings setting
 
         if (settings.getGracefulShutdownQuietPeriodMillis() >= 0 &&
             settings.getGracefulShutdownTimeoutMillis() >= 0) {
-            serverBuilder.gracefulShutdownTimeout(settings.getGracefulShutdownQuietPeriodMillis(),
-                                                  settings.getGracefulShutdownTimeoutMillis());
+            serverBuilder.gracefulShutdownTimeoutMillis(settings.getGracefulShutdownQuietPeriodMillis(),
+                                                        settings.getGracefulShutdownTimeoutMillis());
             logger.debug("Set graceful shutdown timeout: quiet period {} ms, timeout {} ms",
                          settings.getGracefulShutdownQuietPeriodMillis(),
                          settings.getGracefulShutdownTimeoutMillis());

File: spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/ArmeriaConfigurationUtil.java
Patch:
@@ -120,8 +120,8 @@ public static void configureServerWithArmeriaSettings(ServerBuilder server, Arme
 
         if (settings.getGracefulShutdownQuietPeriodMillis() >= 0 &&
             settings.getGracefulShutdownTimeoutMillis() >= 0) {
-            server.gracefulShutdownTimeout(settings.getGracefulShutdownQuietPeriodMillis(),
-                                           settings.getGracefulShutdownTimeoutMillis());
+            server.gracefulShutdownTimeoutMillis(settings.getGracefulShutdownQuietPeriodMillis(),
+                                                 settings.getGracefulShutdownTimeoutMillis());
             logger.debug("Set graceful shutdown timeout: quiet period {} ms, timeout {} ms",
                          settings.getGracefulShutdownQuietPeriodMillis(),
                          settings.getGracefulShutdownTimeoutMillis());

File: core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceAnnotationAliasTest.java
Patch:
@@ -37,6 +37,7 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
+import com.linecorp.armeria.common.MediaTypeNames;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.logging.LogLevel;
@@ -73,10 +74,10 @@ public class AnnotatedServiceAnnotationAliasTest {
 
     @RequestConverter(MyRequestConverter.class)
     @ResponseConverter(MyResponseConverter.class)
-    @Consumes("text/plain; charset=utf-8")
+    @Consumes(MediaTypeNames.PLAIN_TEXT_UTF_8)
     @Consumes("application/xml")
     @ConsumesJson
-    @Produces("text/plain; charset=utf-8")
+    @Produces(MediaTypeNames.PLAIN_TEXT_UTF_8)
     @Produces("application/xml")
     @ProducesJson
     @ExceptionHandler(MyExceptionHandler1.class)

File: spring/boot-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfiguration.java
Patch:
@@ -60,6 +60,7 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
+import com.linecorp.armeria.common.MediaTypeNames;
 import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.Route;
 import com.linecorp.armeria.server.cors.CorsService;
@@ -79,7 +80,7 @@ public class ArmeriaSpringActuatorAutoConfiguration {
     static final MediaType ACTUATOR_MEDIA_TYPE = MediaType.parse(ActuatorMediaType.V3_JSON);
 
     private static final List<String> MEDIA_TYPES =
-            ImmutableList.of(ActuatorMediaType.V3_JSON, "application/json");
+            ImmutableList.of(ActuatorMediaType.V3_JSON, MediaTypeNames.JSON);
 
     private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();
 

File: core/src/main/java/com/linecorp/armeria/client/ClientFactoryProvider.java
Patch:
@@ -17,10 +17,12 @@
 package com.linecorp.armeria.client;
 
 import com.linecorp.armeria.common.SerializationFormat;
+import com.linecorp.armeria.common.util.UnstableApi;
 
 /**
  * Creates a new {@link ClientFactory} dynamically via Java SPI (Service Provider Interface).
  */
+@UnstableApi
 @FunctionalInterface
 public interface ClientFactoryProvider {
     /**

File: core/src/main/java/com/linecorp/armeria/common/NonWrappingRequestContext.java
Patch:
@@ -26,6 +26,7 @@
 
 import javax.annotation.Nullable;
 
+import com.linecorp.armeria.common.util.UnstableApi;
 import com.linecorp.armeria.internal.ArmeriaHttpUtil;
 
 import io.micrometer.core.instrument.MeterRegistry;
@@ -36,6 +37,7 @@
  * A skeletal {@link RequestContext} implementation that helps to implement a non-wrapping
  * {@link RequestContext}.
  */
+@UnstableApi
 public abstract class NonWrappingRequestContext implements RequestContext {
 
     private final MeterRegistry meterRegistry;

File: core/src/main/java/com/linecorp/armeria/common/SerializationFormatProvider.java
Patch:
@@ -26,9 +26,12 @@
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.util.UnstableApi;
+
 /**
  * Registers the {@link SerializationFormat}s dynamically via Java SPI (Service Provider Interface).
  */
+@UnstableApi
 public abstract class SerializationFormatProvider {
 
     /**

File: core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessageDuplicator.java
Patch:
@@ -46,7 +46,7 @@
 
 import com.linecorp.armeria.common.ContentTooLargeException;
 import com.linecorp.armeria.common.util.EventLoopCheckingFuture;
-import com.linecorp.armeria.common.util.SafeCloseable;
+import com.linecorp.armeria.common.util.UnstableApi;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufHolder;
@@ -61,7 +61,8 @@
  * @param <T> the type of elements
  * @see StreamMessageDuplicator
  */
-public class DefaultStreamMessageDuplicator<T> implements StreamMessageDuplicator<T>, SafeCloseable {
+@UnstableApi
+public class DefaultStreamMessageDuplicator<T> implements StreamMessageDuplicator<T> {
 
     @SuppressWarnings("rawtypes")
     private static final AtomicIntegerFieldUpdater<DefaultStreamMessageDuplicator> unsubscribedUpdater =

File: core/src/main/java/com/linecorp/armeria/common/stream/DeferredStreamMessage.java
Patch:
@@ -30,6 +30,7 @@
 import com.google.common.collect.ImmutableList.Builder;
 
 import com.linecorp.armeria.common.util.CompletionActions;
+import com.linecorp.armeria.common.util.UnstableApi;
 
 import io.netty.util.concurrent.ImmediateEventExecutor;
 
@@ -39,6 +40,7 @@
  *
  * @param <T> the type of element signaled
  */
+@UnstableApi
 public class DeferredStreamMessage<T> extends AbstractStreamMessage<T> {
 
     @SuppressWarnings("rawtypes")

File: core/src/main/java/com/linecorp/armeria/common/stream/EmptyFixedStreamMessage.java
Patch:
@@ -16,9 +16,12 @@
 
 package com.linecorp.armeria.common.stream;
 
+import com.linecorp.armeria.common.util.UnstableApi;
+
 /**
  * A {@link FixedStreamMessage} that publishes no objects, just a close event.
  */
+@UnstableApi
 public class EmptyFixedStreamMessage<T> extends FixedStreamMessage<T> {
 
     // No objects, so just notify of close as soon as there is demand.

File: core/src/main/java/com/linecorp/armeria/common/stream/OneElementFixedStreamMessage.java
Patch:
@@ -18,11 +18,14 @@
 
 import javax.annotation.Nullable;
 
+import com.linecorp.armeria.common.util.UnstableApi;
+
 import io.netty.util.ReferenceCountUtil;
 
 /**
  * A {@link FixedStreamMessage} that only publishes one object.
  */
+@UnstableApi
 public class OneElementFixedStreamMessage<T> extends FixedStreamMessage<T> {
 
     @Nullable

File: core/src/main/java/com/linecorp/armeria/common/stream/PublisherBasedStreamMessage.java
Patch:
@@ -34,6 +34,7 @@
 import com.spotify.futures.CompletableFutures;
 
 import com.linecorp.armeria.common.util.EventLoopCheckingFuture;
+import com.linecorp.armeria.common.util.UnstableApi;
 
 import io.netty.util.concurrent.EventExecutor;
 import io.netty.util.concurrent.ImmediateEventExecutor;
@@ -43,6 +44,7 @@
  *
  * @param <T> the type of element signaled
  */
+@UnstableApi
 public class PublisherBasedStreamMessage<T> implements StreamMessage<T> {
 
     @SuppressWarnings("rawtypes")

File: core/src/main/java/com/linecorp/armeria/common/stream/RegularFixedStreamMessage.java
Patch:
@@ -20,13 +20,16 @@
 
 import org.reactivestreams.Subscriber;
 
+import com.linecorp.armeria.common.util.UnstableApi;
+
 import io.netty.util.ReferenceCountUtil;
 
 /**
  * A {@link FixedStreamMessage} that publishes an arbitrary number of objects. It is recommended to use
  * {@link EmptyFixedStreamMessage}, {@link OneElementFixedStreamMessage}, or
  * {@link TwoElementFixedStreamMessage} when publishing less than three objects.
  */
+@UnstableApi
 public class RegularFixedStreamMessage<T> extends FixedStreamMessage<T> {
 
     private final T[] objs;

File: core/src/main/java/com/linecorp/armeria/common/stream/TwoElementFixedStreamMessage.java
Patch:
@@ -18,11 +18,14 @@
 
 import javax.annotation.Nullable;
 
+import com.linecorp.armeria.common.util.UnstableApi;
+
 import io.netty.util.ReferenceCountUtil;
 
 /**
  * A {@link FixedStreamMessage} that publishes two objects.
  */
+@UnstableApi
 public class TwoElementFixedStreamMessage<T> extends FixedStreamMessage<T> {
 
     @Nullable

File: core/src/main/java/com/linecorp/armeria/common/util/NonNullByDefault.java
Patch:
@@ -26,9 +26,8 @@
 import javax.annotation.meta.TypeQualifierDefault;
 
 /**
- * An annotation that signifies the return values, parameters and fields are non-nullable by default
- * leveraging the JSR-305 {@link Nonnull} annotation. Annotate a package with this annotation and
- * annotate nullable return values, parameters and fields with {@link Nullable}.
+ * Indicates the return values, parameters and fields are non-nullable by default. Annotate a package with
+ * this annotation and annotate nullable return values, parameters and fields with {@link Nullable}.
  */
 @Nonnull
 @Documented

File: core/src/main/java/com/linecorp/armeria/internal/DefaultTimeoutController.java
Patch:
@@ -27,8 +27,6 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.math.LongMath;
 
-import com.linecorp.armeria.common.util.TimeoutController;
-
 import io.netty.channel.EventLoop;
 
 /**

File: core/src/main/java/com/linecorp/armeria/internal/TimeoutController.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.linecorp.armeria.common.util;
+package com.linecorp.armeria.internal;
 
 import javax.annotation.Nullable;
 

File: core/src/main/java/com/linecorp/armeria/server/annotation/ResponseConverterFunctionProvider.java
Patch:
@@ -20,11 +20,13 @@
 import javax.annotation.Nullable;
 
 import com.linecorp.armeria.common.HttpResponse;
+import com.linecorp.armeria.common.util.UnstableApi;
 
 /**
  * A {@link ResponseConverterFunction} provider interface which creates a new
  * {@link ResponseConverterFunction} for converting an object of the given type and functions.
  */
+@UnstableApi
 @FunctionalInterface
 public interface ResponseConverterFunctionProvider {
 

File: core/src/main/java/com/linecorp/armeria/server/docs/DocServicePlugin.java
Patch:
@@ -24,12 +24,14 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 
+import com.linecorp.armeria.common.util.UnstableApi;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceConfig;
 
 /**
  * Generates the {@link ServiceSpecification}s of the supported {@link Service}s.
  */
+@UnstableApi
 public interface DocServicePlugin {
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/docs/DocStringExtractor.java
Patch:
@@ -39,10 +39,13 @@
 
 import com.google.common.io.Resources;
 
+import com.linecorp.armeria.common.util.UnstableApi;
+
 /**
  * A supporting base class for implementing the standard pattern of extracting docstrings
  * from arbitrary files in a particular classpath location.
  */
+@UnstableApi
 public abstract class DocStringExtractor {
 
     private static final Logger logger = LoggerFactory.getLogger(DocStringExtractor.class);

File: core/src/main/java/com/linecorp/armeria/server/docs/EndpointInfo.java
Patch:
@@ -32,11 +32,13 @@
 import com.google.common.collect.ImmutableSortedSet;
 
 import com.linecorp.armeria.common.MediaType;
+import com.linecorp.armeria.common.util.UnstableApi;
 import com.linecorp.armeria.server.Service;
 
 /**
  * Metadata about the endpoints exposed by a {@link Service}.
  */
+@UnstableApi
 @JsonInclude(Include.NON_NULL)
 public final class EndpointInfo {
 

File: core/src/main/java/com/linecorp/armeria/server/docs/EndpointInfoBuilder.java
Patch:
@@ -32,10 +32,12 @@
 
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.SerializationFormat;
+import com.linecorp.armeria.common.util.UnstableApi;
 
 /**
  * Creates a new {@link EndpointInfo} using the builder pattern.
  */
+@UnstableApi
 public final class EndpointInfoBuilder {
 
     private final String hostnamePattern;

File: core/src/main/java/com/linecorp/armeria/server/docs/EnumInfo.java
Patch:
@@ -29,9 +29,12 @@
 import com.google.common.base.Strings;
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.util.UnstableApi;
+
 /**
  * Metadata about an enum type.
  */
+@UnstableApi
 public final class EnumInfo implements NamedTypeInfo {
 
     private final String name;

File: core/src/main/java/com/linecorp/armeria/server/docs/EnumValueInfo.java
Patch:
@@ -27,9 +27,12 @@
 import com.google.common.base.MoreObjects;
 import com.google.common.base.Strings;
 
+import com.linecorp.armeria.common.util.UnstableApi;
+
 /**
  * Metadata about an enum value.
  */
+@UnstableApi
 public final class EnumValueInfo {
 
     private final String name;

File: core/src/main/java/com/linecorp/armeria/server/docs/ExceptionInfo.java
Patch:
@@ -31,9 +31,12 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSortedSet;
 
+import com.linecorp.armeria.common.util.UnstableApi;
+
 /**
  * Metadata about an exception type.
  */
+@UnstableApi
 public final class ExceptionInfo implements NamedTypeInfo {
 
     private final String name;

File: core/src/main/java/com/linecorp/armeria/server/docs/FieldInfo.java
Patch:
@@ -27,11 +27,14 @@
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.util.UnstableApi;
+
 /**
  * Metadata about a field of a struct or an exception.
  *
  * @see FieldInfoBuilder
  */
+@UnstableApi
 public final class FieldInfo {
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/docs/FieldInfoBuilder.java
Patch:
@@ -26,9 +26,12 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
 
+import com.linecorp.armeria.common.util.UnstableApi;
+
 /**
  * Creates a new {@link FieldInfo} using the builder pattern.
  */
+@UnstableApi
 public final class FieldInfoBuilder {
 
     private final String name;

File: core/src/main/java/com/linecorp/armeria/server/docs/FieldLocation.java
Patch:
@@ -16,9 +16,12 @@
 
 package com.linecorp.armeria.server.docs;
 
+import com.linecorp.armeria.common.util.UnstableApi;
+
 /**
  * The location of a field.
  */
+@UnstableApi
 public enum FieldLocation {
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/docs/FieldRequirement.java
Patch:
@@ -16,9 +16,12 @@
 
 package com.linecorp.armeria.server.docs;
 
+import com.linecorp.armeria.common.util.UnstableApi;
+
 /**
  * The requirement level of a field.
  */
+@UnstableApi
 public enum FieldRequirement {
     /**
      * The field is required. The invocation will fail if the field is not specified.

File: core/src/main/java/com/linecorp/armeria/server/docs/MethodInfo.java
Patch:
@@ -35,11 +35,13 @@
 
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpMethod;
+import com.linecorp.armeria.common.util.UnstableApi;
 import com.linecorp.armeria.server.Service;
 
 /**
  * Metadata about a function of a {@link Service}.
  */
+@UnstableApi
 public final class MethodInfo {
 
     // FIXME(trustin): Return types and exception types should also have docstrings like params have them.

File: core/src/main/java/com/linecorp/armeria/server/docs/NamedTypeInfo.java
Patch:
@@ -24,9 +24,12 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.google.common.collect.ImmutableSet;
 
+import com.linecorp.armeria.common.util.UnstableApi;
+
 /**
  * Metadata about a named type.
  */
+@UnstableApi
 public interface NamedTypeInfo {
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/docs/ServiceInfo.java
Patch:
@@ -40,11 +40,13 @@
 
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpMethod;
+import com.linecorp.armeria.common.util.UnstableApi;
 import com.linecorp.armeria.server.Service;
 
 /**
  * Metadata about a {@link Service}.
  */
+@UnstableApi
 public final class ServiceInfo {
 
     private final String name;

File: core/src/main/java/com/linecorp/armeria/server/docs/ServiceSpecification.java
Patch:
@@ -32,12 +32,14 @@
 import com.google.common.collect.Streams;
 
 import com.linecorp.armeria.common.HttpHeaders;
+import com.linecorp.armeria.common.util.UnstableApi;
 import com.linecorp.armeria.server.Service;
 
 /**
  * The specification of one or more {@link Service}s that provides their {@link ServiceInfo}s and
  * {@link NamedTypeInfo}s.
  */
+@UnstableApi
 public final class ServiceSpecification {
 
     private static final ServiceSpecification emptyServiceSpecification =

File: core/src/main/java/com/linecorp/armeria/server/docs/StructInfo.java
Patch:
@@ -31,9 +31,12 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSortedSet;
 
+import com.linecorp.armeria.common.util.UnstableApi;
+
 /**
  * Metadata about a struct type.
  */
+@UnstableApi
 public final class StructInfo implements NamedTypeInfo {
 
     private final String name;

File: core/src/main/java/com/linecorp/armeria/server/docs/TypeSignature.java
Patch:
@@ -28,6 +28,8 @@
 import com.google.common.base.Joiner;
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.util.UnstableApi;
+
 /**
  * Type signature of a method parameter, a method return value or a struct/exception field.
  * A type signature can be represented as a string in one of the following forms:
@@ -52,6 +54,7 @@
  *   </ul></li>
  * </ul>
  */
+@UnstableApi
 @JsonSerialize(using = TypeSignatureJsonSerializer.class)
 public final class TypeSignature {
 

File: core/src/main/java/com/linecorp/armeria/unsafe/ByteBufHttpData.java
Patch:
@@ -25,6 +25,7 @@
 
 import com.linecorp.armeria.common.AbstractHttpData;
 import com.linecorp.armeria.common.HttpData;
+import com.linecorp.armeria.common.util.UnstableApi;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufHolder;
@@ -36,6 +37,7 @@
  * An {@link HttpData} that is backed by a {@link ByteBuf} for optimizing certain internal use cases. Not for
  * general use.
  */
+@UnstableApi
 public final class ByteBufHttpData extends AbstractHttpData implements ByteBufHolder {
 
     private final ByteBuf buf;

File: core/src/main/java/com/linecorp/armeria/unsafe/package-info.java
Patch:
@@ -13,14 +13,14 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-
 /**
  * Utilities for working with {@link io.netty.buffer.ByteBuf} in an unsafe way. These can improve performance
  * when dealing with large buffers but require careful memory management or there will be memory leaks. Only use
  * these methods if you really know what you're doing.
  */
-
+@UnstableApi
 @NonNullByDefault
 package com.linecorp.armeria.unsafe;
 
 import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.util.UnstableApi;

File: core/src/test/java/com/linecorp/armeria/client/DefaultClientRequestContextTest.java
Patch:
@@ -42,7 +42,7 @@
 import com.linecorp.armeria.common.metric.NoopMeterRegistry;
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.common.util.SystemInfo;
-import com.linecorp.armeria.common.util.TimeoutController;
+import com.linecorp.armeria.internal.TimeoutController;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 import io.netty.channel.EventLoop;

File: core/src/test/java/com/linecorp/armeria/common/DefaultHttpRequestDuplicatorTest.java
Patch:
@@ -108,7 +108,7 @@ private static void writeStreamingRequest(HttpRequestWriter req, int index) {
             return;
         }
         req.write(HttpData.ofUtf8(String.valueOf(index)));
-        req.onDemand(() -> eventLoop.get().schedule(() -> writeStreamingRequest(req, index + 1),
-                                                    300, TimeUnit.MILLISECONDS));
+        req.whenConsumed().thenRun(() -> eventLoop.get().schedule(() -> writeStreamingRequest(req, index + 1),
+                                                                  300, TimeUnit.MILLISECONDS));
     }
 }

File: core/src/test/java/com/linecorp/armeria/common/stream/DefaultStreamMessageVerification.java
Patch:
@@ -45,7 +45,7 @@ static StreamMessage<Long> createStreamMessage(long elements, boolean abort) {
 
     private static void stream(long elements, boolean abort,
                                AtomicLong remaining, DefaultStreamMessage<Long> stream) {
-        stream.onDemand(() -> {
+        stream.whenConsumed().thenRun(() -> {
             for (;;) {
                 final long r = remaining.decrementAndGet();
                 final boolean written = stream.tryWrite(elements - r);

File: core/src/test/java/com/linecorp/armeria/internal/DefaultTimeoutControllerTest.java
Patch:
@@ -30,7 +30,6 @@
 import com.google.common.util.concurrent.Uninterruptibles;
 
 import com.linecorp.armeria.common.CommonPools;
-import com.linecorp.armeria.common.util.TimeoutController;
 import com.linecorp.armeria.internal.DefaultTimeoutController.State;
 import com.linecorp.armeria.internal.DefaultTimeoutController.TimeoutTask;
 

File: core/src/test/java/com/linecorp/armeria/server/DefaultServiceRequestContextTest.java
Patch:
@@ -34,7 +34,7 @@
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.RequestId;
-import com.linecorp.armeria.common.util.TimeoutController;
+import com.linecorp.armeria.internal.TimeoutController;
 
 import io.netty.util.AttributeKey;
 

File: core/src/test/java/com/linecorp/armeria/server/HttpServerAbortingInfiniteStreamTest.java
Patch:
@@ -66,11 +66,11 @@ protected void configure(ServerBuilder sb) throws Exception {
                 writer.write(ResponseHeaders.of(HttpStatus.OK));
 
                 // Do not close the response writer because it returns data infinitely.
-                writer.onDemand(new Runnable() {
+                writer.whenConsumed().thenRun(new Runnable() {
                     @Override
                     public void run() {
                         writer.write(HttpData.ofUtf8("infinite stream"));
-                        writer.onDemand(this);
+                        writer.whenConsumed().thenRun(this);
                     }
                 });
                 writer.whenComplete().whenComplete((unused, cause) -> {

File: core/src/test/java/com/linecorp/armeria/server/HttpServerStreamingTest.java
Patch:
@@ -270,7 +270,8 @@ private static void stream(StreamWriter<HttpObject> writer, long size, int chunk
             return;
         }
 
-        writer.onDemand(() -> stream(writer, remaining, (int) Math.min(remaining, chunkSize)))
+        writer.whenConsumed()
+              .thenRun(() -> stream(writer, remaining, (int) Math.min(remaining, chunkSize)))
               .exceptionally(cause -> {
                   logger.warn("Unexpected exception:", cause);
                   writer.close(cause);

File: grpc-protocol/src/main/java/com/linecorp/armeria/client/grpc/protocol/UnaryGrpcClient.java
Patch:
@@ -42,6 +42,7 @@
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaStatusException;
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
 import com.linecorp.armeria.common.grpc.protocol.StatusMessageEscaper;
+import com.linecorp.armeria.common.util.UnstableApi;
 import com.linecorp.armeria.internal.grpc.protocol.StatusCodes;
 import com.linecorp.armeria.unsafe.ByteBufHttpData;
 
@@ -57,6 +58,7 @@
  * <p>This client does not support compression. If you need support for compression, please consider using
  * normal gRPC stubs or file a feature request.
  */
+@UnstableApi
 public final class UnaryGrpcClient {
 
     private final WebClient webClient;

File: grpc-protocol/src/main/java/com/linecorp/armeria/client/grpc/protocol/package-info.java
Patch:
@@ -24,7 +24,9 @@
  * <p>The classes in this package, unlike other packages, are not guaranteed to be backward compatible since
  * it's an advanced API.</p>
  */
+@UnstableApi
 @NonNullByDefault
 package com.linecorp.armeria.client.grpc.protocol;
 
 import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.util.UnstableApi;

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageDeframer.java
Patch:
@@ -62,6 +62,7 @@
 import com.google.common.annotations.VisibleForTesting;
 
 import com.linecorp.armeria.common.HttpData;
+import com.linecorp.armeria.common.util.UnstableApi;
 import com.linecorp.armeria.internal.grpc.protocol.StatusCodes;
 
 import io.netty.buffer.ByteBuf;
@@ -79,6 +80,7 @@
  * abstraction in favor of using {@link ByteBuf} directly, and allowing the delivery of uncompressed frames as
  * a {@link ByteBuf} to optimize message parsing.
  */
+@UnstableApi
 public class ArmeriaMessageDeframer implements AutoCloseable {
 
     private static final String DEBUG_STRING = ArmeriaMessageDeframer.class.getName();

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java
Patch:
@@ -55,6 +55,7 @@
 
 import javax.annotation.Nullable;
 
+import com.linecorp.armeria.common.util.UnstableApi;
 import com.linecorp.armeria.internal.grpc.protocol.StatusCodes;
 import com.linecorp.armeria.unsafe.ByteBufHttpData;
 
@@ -73,6 +74,7 @@
  * abstraction in favor of using {@link ByteBuf} directly. The code has been vastly simplified due to the lack
  * of support for arbitrary {@link InputStream}s.
  */
+@UnstableApi
 public class ArmeriaMessageFramer implements AutoCloseable {
 
     public static final int NO_MAX_OUTBOUND_MESSAGE_SIZE = -1;

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaStatusException.java
Patch:
@@ -18,9 +18,12 @@
 
 import javax.annotation.Nullable;
 
+import com.linecorp.armeria.common.util.UnstableApi;
+
 /**
  * An {@link Exception} that contains enough information to convert it to a gRPC status.
  */
+@UnstableApi
 public final class ArmeriaStatusException extends RuntimeException {
 
     private static final long serialVersionUID = -8370257107063108923L;

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/Compressor.java
Patch:
@@ -34,9 +34,12 @@
 import java.io.IOException;
 import java.io.OutputStream;
 
+import com.linecorp.armeria.common.util.UnstableApi;
+
 /**
  * Represents a message compressor.
  */
+@UnstableApi
 public interface Compressor {
 
     // Copied from `io.grpc.Compressor` at:

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/Decompressor.java
Patch:
@@ -34,9 +34,12 @@
 import java.io.IOException;
 import java.io.InputStream;
 
+import com.linecorp.armeria.common.util.UnstableApi;
+
 /**
  * Represents a message decompressor.
  */
+@UnstableApi
 public interface Decompressor {
 
     // Copied from `io.grpc.Decompressor` at:

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/GrpcHeaderNames.java
Patch:
@@ -17,12 +17,14 @@
 package com.linecorp.armeria.common.grpc.protocol;
 
 import com.linecorp.armeria.common.HttpHeaderNames;
+import com.linecorp.armeria.common.util.UnstableApi;
 
 import io.netty.util.AsciiString;
 
 /**
  * gRPC-related HTTP header names.
  */
+@UnstableApi
 public final class GrpcHeaderNames {
     /**
      * {@code "grpc-status"}.

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/GrpcTrailersUtil.java
Patch:
@@ -23,10 +23,12 @@
 import com.linecorp.armeria.common.HttpHeadersBuilder;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.ResponseHeaders;
+import com.linecorp.armeria.common.util.UnstableApi;
 
 /**
  * Utility for creating response trailers for a gRPC status. Trailers are only returned from a server.
  */
+@UnstableApi
 public final class GrpcTrailersUtil {
 
     /**

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/StatusMessageEscaper.java
Patch:
@@ -49,11 +49,13 @@
 import java.nio.ByteBuffer;
 import java.nio.charset.StandardCharsets;
 
+import com.linecorp.armeria.common.util.UnstableApi;
 import com.linecorp.armeria.internal.TemporaryThreadLocals;
 
 /**
  * Utility to escape status messages (e.g., error messages) for saving to ascii headers.
  */
+@UnstableApi
 public final class StatusMessageEscaper {
 
     private static final byte[] HEX =

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/package-info.java
Patch:
@@ -24,7 +24,9 @@
  * <p>The classes in this package, unlike other packages, are not guaranteed to be backward compatible since
  * it's an advanced API.</p>
  */
+@UnstableApi
 @NonNullByDefault
 package com.linecorp.armeria.common.grpc.protocol;
 
 import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.util.UnstableApi;

File: grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnaryGrpcService.java
Patch:
@@ -18,6 +18,8 @@
 
 import java.util.concurrent.CompletableFuture;
 
+import com.linecorp.armeria.common.util.UnstableApi;
+
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufUtil;
 import io.netty.buffer.Unpooled;
@@ -29,6 +31,7 @@
  * <p>This service does not support compression. If you need support for compression, please consider using
  * normal gRPC stubs or file a feature request.
  */
+@UnstableApi
 public abstract class AbstractUnaryGrpcService extends AbstractUnsafeUnaryGrpcService {
 
     /**

File: grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/AbstractUnsafeUnaryGrpcService.java
Patch:
@@ -32,6 +32,7 @@
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaStatusException;
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
 import com.linecorp.armeria.common.grpc.protocol.GrpcTrailersUtil;
+import com.linecorp.armeria.common.util.UnstableApi;
 import com.linecorp.armeria.internal.grpc.protocol.StatusCodes;
 import com.linecorp.armeria.server.AbstractHttpService;
 import com.linecorp.armeria.server.ServiceRequestContext;
@@ -50,6 +51,7 @@
  * <p>This service does not support compression. If you need support for compression, please consider using
  * normal gRPC stubs or file a feature request.
  */
+@UnstableApi
 public abstract class AbstractUnsafeUnaryGrpcService extends AbstractHttpService {
 
     private static final ResponseHeaders RESPONSE_HEADERS =

File: grpc-protocol/src/main/java/com/linecorp/armeria/server/grpc/protocol/package-info.java
Patch:
@@ -25,7 +25,9 @@
  * <p>The classes in this package, unlike other packages, are not guaranteed to be backward compatible since
  * it's an advanced API.</p>
  */
+@UnstableApi
 @NonNullByDefault
 package com.linecorp.armeria.server.grpc.protocol;
 
 import com.linecorp.armeria.common.util.NonNullByDefault;
+import com.linecorp.armeria.common.util.UnstableApi;

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcClientFactoryProvider.java
Patch:
@@ -18,10 +18,12 @@
 
 import com.linecorp.armeria.client.ClientFactory;
 import com.linecorp.armeria.client.ClientFactoryProvider;
+import com.linecorp.armeria.common.util.UnstableApi;
 
 /**
  * {@link ClientFactoryProvider} that creates a {@link GrpcClientFactory}.
  */
+@UnstableApi
 public final class GrpcClientFactoryProvider implements ClientFactoryProvider {
     @Override
     public ClientFactory newFactory(ClientFactory httpClientFactory) {

File: grpc/src/main/java/com/linecorp/armeria/common/grpc/GrpcSerializationFormatProvider.java
Patch:
@@ -24,10 +24,12 @@
 
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.SerializationFormatProvider;
+import com.linecorp.armeria.common.util.UnstableApi;
 
 /**
  * {@link SerializationFormatProvider} that provides the gRPC-related {@link SerializationFormat}s.
  */
+@UnstableApi
 public final class GrpcSerializationFormatProvider extends SerializationFormatProvider {
     @Override
     protected Set<Entry> entries() {

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcDocServicePlugin.java
Patch:
@@ -49,6 +49,7 @@
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
+import com.linecorp.armeria.common.util.UnstableApi;
 import com.linecorp.armeria.server.Route;
 import com.linecorp.armeria.server.RoutePathType;
 import com.linecorp.armeria.server.Service;
@@ -74,6 +75,7 @@
 /**
  * {@link DocServicePlugin} implementation that supports {@link GrpcService}s.
  */
+@UnstableApi
 public final class GrpcDocServicePlugin implements DocServicePlugin {
 
     @VisibleForTesting

File: rxjava/src/main/java/com/linecorp/armeria/server/rxjava/ObservableResponseConverterFunctionProvider.java
Patch:
@@ -20,6 +20,7 @@
 
 import javax.annotation.Nullable;
 
+import com.linecorp.armeria.common.util.UnstableApi;
 import com.linecorp.armeria.server.annotation.ExceptionHandlerFunction;
 import com.linecorp.armeria.server.annotation.ResponseConverterFunction;
 import com.linecorp.armeria.server.annotation.ResponseConverterFunctionProvider;
@@ -32,6 +33,7 @@
 /**
  * Provides an {@link ObservableResponseConverterFunction} to annotated services.
  */
+@UnstableApi
 public final class ObservableResponseConverterFunctionProvider implements ResponseConverterFunctionProvider {
 
     @Nullable

File: thrift/src/main/java/com/linecorp/armeria/client/thrift/THttpClientFactoryProvider.java
Patch:
@@ -18,10 +18,12 @@
 
 import com.linecorp.armeria.client.ClientFactory;
 import com.linecorp.armeria.client.ClientFactoryProvider;
+import com.linecorp.armeria.common.util.UnstableApi;
 
 /**
  * {@link ClientFactoryProvider} that creates a {@link THttpClientFactory}.
  */
+@UnstableApi
 public final class THttpClientFactoryProvider implements ClientFactoryProvider {
     @Override
     public ClientFactory newFactory(ClientFactory httpClientFactory) {

File: thrift/src/main/java/com/linecorp/armeria/common/thrift/ThriftSerializationFormatProvider.java
Patch:
@@ -25,10 +25,12 @@
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.SerializationFormatProvider;
+import com.linecorp.armeria.common.util.UnstableApi;
 
 /**
  * {@link SerializationFormatProvider} that provides the Thrift-related {@link SerializationFormat}s.
  */
+@UnstableApi
 public final class ThriftSerializationFormatProvider extends SerializationFormatProvider {
     @Override
     protected Set<Entry> entries() {

File: thrift/src/main/java/com/linecorp/armeria/server/thrift/ThriftDocServicePlugin.java
Patch:
@@ -55,6 +55,7 @@
 import com.google.common.collect.ImmutableSet;
 
 import com.linecorp.armeria.common.thrift.ThriftProtocolFactories;
+import com.linecorp.armeria.common.util.UnstableApi;
 import com.linecorp.armeria.server.Route;
 import com.linecorp.armeria.server.RoutePathType;
 import com.linecorp.armeria.server.Service;
@@ -77,6 +78,7 @@
 /**
  * {@link DocServicePlugin} implementation that supports {@link THttpService}s.
  */
+@UnstableApi
 public final class ThriftDocServicePlugin implements DocServicePlugin {
 
     private static final String REQUEST_STRUCT_SUFFIX = "_args";

File: tomcat/src/main/java/com/linecorp/armeria/internal/tomcat/Tomcat90InputBuffer.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.linecorp.armeria.server.tomcat;
+package com.linecorp.armeria.internal.tomcat;
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
@@ -24,11 +24,11 @@
 
 import com.linecorp.armeria.common.HttpData;
 
-class Tomcat90InputBuffer implements InputBuffer {
+public final class Tomcat90InputBuffer implements InputBuffer {
     private final HttpData content;
     private boolean read;
 
-    Tomcat90InputBuffer(HttpData content) {
+    public Tomcat90InputBuffer(HttpData content) {
         this.content = content;
     }
 

File: tomcat/src/main/java/com/linecorp/armeria/internal/tomcat/Tomcat90OutputBuffer.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.linecorp.armeria.server.tomcat;
+package com.linecorp.armeria.internal.tomcat;
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
@@ -25,11 +25,11 @@
 
 import com.linecorp.armeria.common.HttpData;
 
-class Tomcat90OutputBuffer implements OutputBuffer {
+public final class Tomcat90OutputBuffer implements OutputBuffer {
     private final Queue<HttpData> data;
     private long bytesWritten;
 
-    Tomcat90OutputBuffer(Queue<HttpData> data) {
+    public Tomcat90OutputBuffer(Queue<HttpData> data) {
         this.data = data;
     }
 

File: tomcat/src/main/java/com/linecorp/armeria/internal/tomcat/Tomcat90ProtocolHandler.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.server.tomcat;
+package com.linecorp.armeria.internal.tomcat;
 
 import java.util.concurrent.Executor;
 import java.util.concurrent.ScheduledExecutorService;

File: tomcat/src/main/java/com/linecorp/armeria/server/tomcat/TomcatService.java
Patch:
@@ -84,8 +84,8 @@ public abstract class TomcatService implements HttpService {
     static final Class<?> PROTOCOL_HANDLER_CLASS;
 
     static {
-        final String prefix = TomcatService.class.getPackage().getName() + '.';
-        final ClassLoader classLoader = TomcatService.class.getClassLoader();
+        final String prefix = TomcatVersion.class.getPackage().getName() + '.';
+        final ClassLoader classLoader = TomcatVersion.class.getClassLoader();
         final Class<?> inputBufferClass;
         final Class<?> outputBufferClass;
         final Class<?> protocolHandlerClass;

File: testing-internal/src/main/java/com/linecorp/armeria/testing/internal/webapp/WebAppContainerTest.java
Patch:
@@ -42,12 +42,11 @@
 import com.linecorp.armeria.client.ClientFactory;
 import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
+import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.testing.junit4.server.ServerRule;
 
-import io.netty.handler.codec.http.HttpHeaderNames;
-
 /**
  * Tests a web application container {@link Service}.
  */

File: core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptionValue.java
Patch:
@@ -13,7 +13,6 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-
 package com.linecorp.armeria.client;
 
 import com.linecorp.armeria.common.util.AbstractOptionValue;
@@ -23,7 +22,7 @@
  *
  * @param <T> the type of the option value
  */
-public class ClientFactoryOptionValue<T> extends AbstractOptionValue<ClientFactoryOption<T>, T> {
+public final class ClientFactoryOptionValue<T> extends AbstractOptionValue<ClientFactoryOption<T>, T> {
     ClientFactoryOptionValue(ClientFactoryOption<T> option, T value) {
         super(option, value);
     }

File: core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java
Patch:
@@ -67,7 +67,9 @@
 /**
  * Default {@link ClientRequestContext} implementation.
  */
-public class DefaultClientRequestContext extends NonWrappingRequestContext implements ClientRequestContext {
+public final class DefaultClientRequestContext
+        extends NonWrappingRequestContext
+        implements ClientRequestContext {
 
     private static final AtomicReferenceFieldUpdater<DefaultClientRequestContext, HttpHeaders>
             additionalRequestHeadersUpdater = AtomicReferenceFieldUpdater.newUpdater(

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/KeyedCircuitBreakerMapping.java
Patch:
@@ -34,7 +34,7 @@
  *
  * @param <K> the key type
  */
-public class KeyedCircuitBreakerMapping<K> implements CircuitBreakerMapping {
+public final class KeyedCircuitBreakerMapping<K> implements CircuitBreakerMapping {
 
     static final CircuitBreakerMapping defaultMapping =
             new KeyedCircuitBreakerMapping<>(KeySelector.HOST, CircuitBreaker::of);

File: core/src/main/java/com/linecorp/armeria/client/encoding/ZlibStreamDecoder.java
Patch:
@@ -56,7 +56,7 @@ public HttpData finish() {
         if (decoder.finish()) {
             return fetchDecoderOutput();
         } else {
-            return HttpData.EMPTY_DATA;
+            return HttpData.empty();
         }
     }
 
@@ -84,7 +84,7 @@ private HttpData fetchDecoderOutput() {
         }
 
         if (decoded == null) {
-            return HttpData.EMPTY_DATA;
+            return HttpData.empty();
         }
 
         return new ByteBufHttpData(decoded, false);

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroupBuilder.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * A builder for creating a new {@link HealthCheckedEndpointGroup} that sends HTTP health check requests.
  */
-public class HealthCheckedEndpointGroupBuilder extends AbstractHealthCheckedEndpointGroupBuilder {
+public final class HealthCheckedEndpointGroupBuilder extends AbstractHealthCheckedEndpointGroupBuilder {
 
     private final String path;
     private boolean useGet;

File: core/src/main/java/com/linecorp/armeria/client/logging/ConnectionPoolLoggingListener.java
Patch:
@@ -34,7 +34,7 @@
 /**
  * Decorates a {@link ConnectionPoolListener} to log the connection pool events.
  */
-public class ConnectionPoolLoggingListener implements ConnectionPoolListener {
+public final class ConnectionPoolLoggingListener implements ConnectionPoolListener {
     private static final Logger logger = LoggerFactory.getLogger(ConnectionPoolLoggingListener.class);
 
     private static final AttributeKey<Long> OPEN_NANOS =

File: core/src/main/java/com/linecorp/armeria/common/HttpMessageAggregator.java
Patch:
@@ -64,7 +64,7 @@ public final void onError(Throwable t) {
     public final void onComplete() {
         final HttpData content;
         if (contentLength == 0) {
-            content = HttpData.EMPTY_DATA;
+            content = HttpData.empty();
         } else {
             if (alloc != null) {
                 final ByteBuf merged = alloc.buffer(contentLength);

File: core/src/main/java/com/linecorp/armeria/common/sse/ServerSentEventBuilder.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * A builder which creates a {@link ServerSentEvent} instance.
  */
-public class ServerSentEventBuilder {
+public final class ServerSentEventBuilder {
 
     @Nullable
     private String id;

File: core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java
Patch:
@@ -66,7 +66,9 @@
 /**
  * Default {@link ServiceRequestContext} implementation.
  */
-public class DefaultServiceRequestContext extends NonWrappingRequestContext implements ServiceRequestContext {
+public final class DefaultServiceRequestContext
+        extends NonWrappingRequestContext
+        implements ServiceRequestContext {
 
     private static final AtomicReferenceFieldUpdater<DefaultServiceRequestContext, HttpHeaders>
             additionalResponseHeadersUpdater = AtomicReferenceFieldUpdater.newUpdater(

File: core/src/main/java/com/linecorp/armeria/server/HttpResponseException.java
Patch:
@@ -29,7 +29,7 @@
  *
  * @see HttpStatusException
  */
-public class HttpResponseException extends RuntimeException {
+public final class HttpResponseException extends RuntimeException {
 
     /**
      * Returns a new {@link HttpResponseException} instance with the specified HTTP status code.
@@ -67,7 +67,7 @@ public static HttpResponseException of(HttpResponse httpResponse) {
     /**
      * Creates a new instance with the specified {@link HttpResponse}.
      */
-    protected HttpResponseException(HttpResponse httpResponse) {
+    private HttpResponseException(HttpResponse httpResponse) {
         this.httpResponse = requireNonNull(httpResponse, "httpResponse");
     }
 

File: core/src/main/java/com/linecorp/armeria/server/RedirectService.java
Patch:
@@ -121,7 +121,7 @@
  * sb.service("/old", new RedirectService("/new?redirected=1"));
  * }</pre>
  */
-public class RedirectService extends AbstractHttpService {
+public final class RedirectService extends AbstractHttpService {
 
     private static final Pattern VALID_DEFAULT_URI_PATTERN = Pattern
             .compile("(?:(?:^https?:/{2}(?:([^:]+:)?[^:@]+@)?[^:]+)(?::[0-9]{1,5})?)?" +

File: core/src/main/java/com/linecorp/armeria/server/annotation/ByteArrayRequestConverterFunction.java
Patch:
@@ -24,7 +24,7 @@
  * A default implementation of a {@link RequestConverterFunction} which converts a binary body of
  * the {@link AggregatedHttpRequest} to one of {@code byte[]} or {@link HttpData}.
  */
-public class ByteArrayRequestConverterFunction implements RequestConverterFunction {
+public final class ByteArrayRequestConverterFunction implements RequestConverterFunction {
 
     /**
      * Converts the specified {@link AggregatedHttpRequest} to an object of {@code expectedResultType}.

File: core/src/main/java/com/linecorp/armeria/server/annotation/ByteArrayResponseConverterFunction.java
Patch:
@@ -34,7 +34,7 @@
  * A response converter implementation which creates an {@link HttpResponse} with
  * {@code content-type: application/binary} or {@code content-type: application/octet-stream}.
  */
-public class ByteArrayResponseConverterFunction implements ResponseConverterFunction {
+public final class ByteArrayResponseConverterFunction implements ResponseConverterFunction {
 
     @Override
     public HttpResponse convertResponse(ServiceRequestContext ctx,
@@ -92,7 +92,7 @@ private static HttpData toHttpData(@Nullable Object value) {
             return HttpData.wrap((byte[]) value);
         }
         if (value == null) {
-            return HttpData.EMPTY_DATA;
+            return HttpData.empty();
         }
         throw new IllegalStateException("Failed to convert an object to an HttpData: " +
                                         value.getClass().getName());

File: core/src/main/java/com/linecorp/armeria/server/annotation/JacksonRequestConverterFunction.java
Patch:
@@ -37,7 +37,7 @@
  * A default implementation of a {@link RequestConverterFunction} which converts a JSON body of
  * the {@link AggregatedHttpRequest} to an object by {@link ObjectMapper}.
  */
-public class JacksonRequestConverterFunction implements RequestConverterFunction {
+public final class JacksonRequestConverterFunction implements RequestConverterFunction {
 
     private static final ObjectMapper defaultObjectMapper = new ObjectMapper();
 

File: core/src/main/java/com/linecorp/armeria/server/annotation/JacksonResponseConverterFunction.java
Patch:
@@ -46,7 +46,7 @@
  *
  * @see <a href="https://tools.ietf.org/html/rfc7464">JavaScript Object Notation (JSON) Text Sequences</a>
  */
-public class JacksonResponseConverterFunction implements ResponseConverterFunction {
+public final class JacksonResponseConverterFunction implements ResponseConverterFunction {
 
     private static final ObjectMapper defaultObjectMapper = new ObjectMapper();
 

File: core/src/main/java/com/linecorp/armeria/server/annotation/ServerSentEventResponseConverterFunction.java
Patch:
@@ -38,7 +38,7 @@
  * would be converted into Server-Sent Events if a {@link ProducesEventStream} annotation is specified
  * on an annotated service method.
  */
-public class ServerSentEventResponseConverterFunction implements ResponseConverterFunction {
+public final class ServerSentEventResponseConverterFunction implements ResponseConverterFunction {
 
     @Override
     public HttpResponse convertResponse(ServiceRequestContext ctx,

File: core/src/main/java/com/linecorp/armeria/server/annotation/StringRequestConverterFunction.java
Patch:
@@ -27,7 +27,7 @@
  * A default implementation of a {@link RequestConverterFunction} which converts a text body of
  * the {@link AggregatedHttpRequest} to a {@link String}.
  */
-public class StringRequestConverterFunction implements RequestConverterFunction {
+public final class StringRequestConverterFunction implements RequestConverterFunction {
     /**
      * Converts the specified {@link AggregatedHttpRequest} to a {@link String}.
      */

File: core/src/main/java/com/linecorp/armeria/server/annotation/StringResponseConverterFunction.java
Patch:
@@ -36,7 +36,7 @@
  * A response converter implementation which creates an {@link HttpResponse} with
  * {@code content-type: text/plain}.
  */
-public class StringResponseConverterFunction implements ResponseConverterFunction {
+public final class StringResponseConverterFunction implements ResponseConverterFunction {
 
     @Override
     public HttpResponse convertResponse(ServiceRequestContext ctx,
@@ -72,7 +72,7 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,
     private static HttpData toHttpData(@Nullable Object value, Charset charset) {
         if (value == null) {
             // To prevent to convert null value to 'null' string.
-            return HttpData.EMPTY_DATA;
+            return HttpData.empty();
         }
 
         if (value instanceof Iterable) {

File: core/src/main/java/com/linecorp/armeria/server/cors/ChainedCorsPolicyBuilder.java
Patch:
@@ -28,7 +28,8 @@
  *
  * <p>Calling {@link #and()} method will return the control to {@link CorsServiceBuilder}.
  */
-public class ChainedCorsPolicyBuilder extends AbstractCorsPolicyBuilder<ChainedCorsPolicyBuilder> {
+public final class ChainedCorsPolicyBuilder extends AbstractCorsPolicyBuilder<ChainedCorsPolicyBuilder> {
+
     private final CorsServiceBuilder serviceBuilder;
 
     ChainedCorsPolicyBuilder(CorsServiceBuilder builder) {

File: core/src/main/java/com/linecorp/armeria/server/docs/DocService.java
Patch:
@@ -78,7 +78,7 @@
  * @see DocServiceBuilder#include(DocServiceFilter)
  * @see DocServiceBuilder#exclude(DocServiceFilter)
  */
-public class DocService extends AbstractCompositeService<HttpService, HttpRequest, HttpResponse>
+public final class DocService extends AbstractCompositeService<HttpService, HttpRequest, HttpResponse>
         implements HttpService {
 
     private static final int SPECIFICATION_INDEX = 0;

File: core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionService.java
Patch:
@@ -35,7 +35,7 @@
  * Exposes Prometheus metrics in <a href="https://prometheus.io/docs/instrumenting/exposition_formats/">text
  * format 0.0.4</a>.
  */
-public class PrometheusExpositionService extends AbstractHttpService {
+public final class PrometheusExpositionService extends AbstractHttpService {
 
     private static final MediaType CONTENT_TYPE_004 = MediaType.parse(TextFormat.CONTENT_TYPE_004);
 

File: core/src/main/java/com/linecorp/armeria/server/streaming/ServerSentEvents.java
Patch:
@@ -368,14 +368,14 @@ private static HttpData toHttpData(ServerSentEvent sse) {
             sb.append("retry:").append(retry.toMillis()).append(LINE_FEED);
         }
 
-        return sb.length() == 0 ? HttpData.EMPTY_DATA
+        return sb.length() == 0 ? HttpData.empty()
                                 : HttpData.ofUtf8(sb.append(LINE_FEED).toString());
     }
 
     private static <T> HttpData toHttpData(
             Function<? super T, ? extends ServerSentEvent> converter, T content) {
         final ServerSentEvent sse = converter.apply(content);
-        return sse == null ? HttpData.EMPTY_DATA : toHttpData(sse);
+        return sse == null ? HttpData.empty() : toHttpData(sse);
     }
 
     private static void appendField(StringBuilder sb, String name, String value,

File: core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingRpcService.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * Decorates an RPC {@link Service} to throttle incoming requests.
  */
-public class ThrottlingRpcService extends AbstractThrottlingService<RpcRequest, RpcResponse>
+public final class ThrottlingRpcService extends AbstractThrottlingService<RpcRequest, RpcResponse>
         implements RpcService {
     /**
      * Creates a new decorator using the specified {@link ThrottlingStrategy} instance.

File: core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingService.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * Decorates an {@link HttpService} to throttle incoming requests.
  */
-public class ThrottlingService extends AbstractThrottlingService<HttpRequest, HttpResponse>
+public final class ThrottlingService extends AbstractThrottlingService<HttpRequest, HttpResponse>
         implements HttpService {
     /**
      * Creates a new decorator using the specified {@link ThrottlingStrategy} instance.
@@ -46,7 +46,7 @@ public class ThrottlingService extends AbstractThrottlingService<HttpRequest, Ht
     /**
      * Creates a new instance that decorates the specified {@link HttpService}.
      */
-    protected ThrottlingService(HttpService delegate, ThrottlingStrategy<HttpRequest> strategy) {
+    private ThrottlingService(HttpService delegate, ThrottlingStrategy<HttpRequest> strategy) {
         super(delegate, strategy, HttpResponse::from);
     }
 

File: core/src/main/java/com/linecorp/armeria/unsafe/ByteBufHttpData.java
Patch:
@@ -36,7 +36,7 @@
  * An {@link HttpData} that is backed by a {@link ByteBuf} for optimizing certain internal use cases. Not for
  * general use.
  */
-public class ByteBufHttpData extends AbstractHttpData implements ByteBufHolder {
+public final class ByteBufHttpData extends AbstractHttpData implements ByteBufHolder {
 
     private final ByteBuf buf;
     private final boolean endOfStream;

File: core/src/test/java/com/linecorp/armeria/client/encoding/AbstractStreamDecoderTest.java
Patch:
@@ -61,7 +61,7 @@ public void notEmpty() {
     @Test
     public void empty_unpooled() {
         final StreamDecoder decoder = newDecoder();
-        final HttpData data = decoder.decode(HttpData.EMPTY_DATA);
+        final HttpData data = decoder.decode(HttpData.empty());
         assertThat(data).isNotInstanceOf(ByteBufHolder.class);
     }
 

File: core/src/test/java/com/linecorp/armeria/server/HttpServiceTest.java
Patch:
@@ -165,7 +165,7 @@ public void contentLengthIsNotSetWhenTrailerExists() {
         AggregatedHttpResponse res = client.get("/trailersWithoutData").aggregate().join();
         assertThat(res.headers().get(HttpHeaderNames.CONTENT_LENGTH)).isNull();
         assertThat(res.trailers().get(HttpHeaderNames.of("foo"))).isEqualTo("bar");
-        assertThat(res.content()).isSameAs(HttpData.EMPTY_DATA);
+        assertThat(res.content()).isSameAs(HttpData.empty());
 
         res = client.get("/dataAndTrailers").aggregate().join();
         assertThat(res.headers().get(HttpHeaderNames.CONTENT_LENGTH)).isNull();

File: core/src/test/java/com/linecorp/armeria/server/annotation/ServerSentEventResponseConverterFunctionTest.java
Patch:
@@ -108,7 +108,7 @@ public void emitFieldNameOnly() throws Exception {
                           ServerSentEvent.ofData("")));
         StepVerifier.create(response)
                     .expectNext(EVENT_STREAM_HEADER)
-                    .expectNext(HttpData.EMPTY_DATA)
+                    .expectNext(HttpData.empty())
                     .expectNext(HttpData.ofUtf8("id\n\n"))
                     .expectNext(HttpData.ofUtf8("event\n\n"))
                     .expectNext(HttpData.ofUtf8("data\n\n"))

File: grpc-protocol/src/main/java/com/linecorp/armeria/client/grpc/protocol/UnaryGrpcClient.java
Patch:
@@ -57,7 +57,7 @@
  * <p>This client does not support compression. If you need support for compression, please consider using
  * normal gRPC stubs or file a feature request.
  */
-public class UnaryGrpcClient {
+public final class UnaryGrpcClient {
 
     private final WebClient webClient;
 

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageDeframer.java
Patch:
@@ -94,7 +94,7 @@ public class ArmeriaMessageDeframer implements AutoCloseable {
      * as is in {@code buf} to optimize parsing. For compressed messages, we will parse incrementally
      * and thus return a {@link InputStream} in {@code stream}.
      */
-    public static class DeframedMessage {
+    public static final class DeframedMessage {
         private final int type;
 
         @Nullable

File: grpc/src/main/java/com/linecorp/armeria/internal/grpc/HttpStreamReader.java
Patch:
@@ -200,7 +200,7 @@ public void cancel() {
 
     void closeDeframer() {
         if (!deframer.isClosed()) {
-            deframer.deframe(HttpData.EMPTY_DATA, true);
+            deframer.deframe(HttpData.empty(), true);
             deframer.closeWhenComplete();
         }
     }

File: grpc/src/test/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageDeframerTest.java
Patch:
@@ -164,7 +164,7 @@ void deframe_multipleMessagesAfterRequests() throws Exception {
     @Test
     void deframe_endOfStream() throws Exception {
         deframer.request(1);
-        deframer.deframe(HttpData.EMPTY_DATA, true);
+        deframer.deframe(HttpData.empty(), true);
         deframer.closeWhenComplete();
         verify(listener).endOfStream();
         verifyNoMoreInteractions(listener);

File: grpc/src/test/java/com/linecorp/armeria/internal/grpc/HttpStreamReaderTest.java
Patch:
@@ -37,6 +37,7 @@
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.ResponseHeaders;
+import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer;
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
 
 import io.grpc.DecompressorRegistry;
@@ -55,7 +56,7 @@ public class HttpStreamReaderTest {
     private TransportStatusListener transportStatusListener;
 
     @Mock
-    private com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer deframer;
+    private ArmeriaMessageDeframer deframer;
 
     @Mock
     private Subscription subscription;
@@ -152,7 +153,7 @@ public void onMessage_deframeError_errorListenerThrows() throws Exception {
     @Test
     public void clientDone() throws Exception {
         reader.apply(null, null);
-        verify(deframer).deframe(HttpData.EMPTY_DATA, true);
+        verify(deframer).deframe(HttpData.empty(), true);
         verify(deframer).closeWhenComplete();
     }
 

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceTest.java
Patch:
@@ -109,7 +109,7 @@ void missingMethod() throws Exception {
                                .add("grpc-message", "Method not found: grpc.testing.TestService/FooCall")
                                .addInt(HttpHeaderNames.CONTENT_LENGTH, 0)
                                .build(),
-                HttpData.EMPTY_DATA));
+                HttpData.empty()));
     }
 
     @Test

File: rxjava/src/main/java/com/linecorp/armeria/server/rxjava/ObservableResponseConverterFunction.java
Patch:
@@ -42,7 +42,7 @@
  * The types, which publish 0 or 1 object such as {@link Single}, {@link Maybe} and {@link Completable},
  * would not be converted into a {@link Flowable}.
  */
-public class ObservableResponseConverterFunction implements ResponseConverterFunction {
+public final class ObservableResponseConverterFunction implements ResponseConverterFunction {
 
     private final ResponseConverterFunction responseConverter;
     private final ExceptionHandlerFunction exceptionHandler;

File: rxjava/src/main/java/com/linecorp/armeria/server/rxjava/ObservableResponseConverterFunctionProvider.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * Provides an {@link ObservableResponseConverterFunction} to annotated services.
  */
-public class ObservableResponseConverterFunctionProvider implements ResponseConverterFunctionProvider {
+public final class ObservableResponseConverterFunctionProvider implements ResponseConverterFunctionProvider {
 
     @Nullable
     @Override

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlMetadataServiceFunction.java
Patch:
@@ -108,11 +108,11 @@ public HttpResponse serve(ServiceRequestContext ctx, AggregatedHttpRequest req,
                 return newMetadata;
             } catch (Throwable cause) {
                 logger.warn("{} Unexpected metadata request.", ctx, cause);
-                return HttpData.EMPTY_DATA;
+                return HttpData.empty();
             }
         });
 
-        if (metadata != HttpData.EMPTY_DATA) {
+        if (metadata != HttpData.empty()) {
             return HttpResponse.of(HTTP_HEADERS, metadata);
         } else {
             return HttpResponse.of(HttpStatus.NOT_FOUND);

File: testing-internal/src/main/java/com/linecorp/armeria/testing/internal/AnticipatedException.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * A {@link RuntimeException} which is expected to be raised during a test.
  */
-public class AnticipatedException extends RuntimeException {
+public final class AnticipatedException extends RuntimeException {
 
     private static final long serialVersionUID = -3303479723421632825L;
 

File: testing-internal/src/main/java/com/linecorp/armeria/testing/internal/UniqueProtocolsProvider.java
Patch:
@@ -28,7 +28,7 @@
  * An {@link ArgumentsProvider} that provides all the unique {@link SessionProtocol} Armeria supports, which is
  * a common test parameter.
  */
-public class UniqueProtocolsProvider implements ArgumentsProvider {
+public final class UniqueProtocolsProvider implements ArgumentsProvider {
     @Override
     public Stream<? extends Arguments> provideArguments(ExtensionContext context) throws Exception {
         return Stream.of(SessionProtocol.H1C, SessionProtocol.H1, SessionProtocol.H2C, SessionProtocol.H2)

File: testing/common/src/main/java/com/linecorp/armeria/testing/internal/EventLoopGroupRuleDelegate.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * A delegate that has common testing methods of {@link EventLoopGroup}.
  */
-public class EventLoopGroupRuleDelegate {
+public final class EventLoopGroupRuleDelegate {
 
     private final int numThreads;
     private final String threadNamePrefix;

File: testing/common/src/main/java/com/linecorp/armeria/testing/internal/SelfSignedCertificateRuleDelegate.java
Patch:
@@ -35,7 +35,7 @@
 /**
  * A delegate that has common testing methods of {@link SelfSignedCertificate}.
  */
-public class SelfSignedCertificateRuleDelegate {
+public final class SelfSignedCertificateRuleDelegate {
 
     @Nullable
     private final String fqdn;

File: testing/junit4/src/main/java/com/linecorp/armeria/testing/junit4/common/EventLoopGroupRule.java
Patch:
@@ -39,7 +39,7 @@
  *
  * @see EventLoopRule
  */
-public class EventLoopGroupRule extends AbstractEventLoopGroupRule {
+public final class EventLoopGroupRule extends AbstractEventLoopGroupRule {
 
     /**
      * Creates a new {@link TestRule} that provides an {@link EventLoopGroup}.

File: testing/junit4/src/main/java/com/linecorp/armeria/testing/junit4/common/EventLoopRule.java
Patch:
@@ -37,7 +37,7 @@
  *
  * @see EventLoopGroupRule
  */
-public class EventLoopRule extends AbstractEventLoopGroupRule {
+public final class EventLoopRule extends AbstractEventLoopGroupRule {
 
     /**
      * Creates a new {@link TestRule} that provides an {@link EventLoop}.

File: testing/junit4/src/main/java/com/linecorp/armeria/testing/junit4/server/SelfSignedCertificateRule.java
Patch:
@@ -34,7 +34,8 @@
 /**
  * A {@link TestRule} that provides a temporary self-signed certificate.
  */
-public class SelfSignedCertificateRule extends ExternalResource {
+public final class SelfSignedCertificateRule extends ExternalResource {
+
     private final SelfSignedCertificateRuleDelegate delegate;
 
     /**

File: thrift/src/main/java/com/linecorp/armeria/common/thrift/ThriftJacksonSerializers.java
Patch:
@@ -37,8 +37,6 @@
 import com.fasterxml.jackson.databind.ser.Serializers;
 import com.fasterxml.jackson.databind.ser.std.StdSerializer;
 
-import com.linecorp.armeria.common.thrift.text.TTextProtocol;
-
 final class ThriftJacksonSerializers extends Serializers.Base implements Serializable {
 
     private static final long serialVersionUID = -285900387635271875L;
@@ -110,7 +108,7 @@ static void serializeTApplicationException(@Nullable TApplicationException value
 
     private static String serializeTBaseLike(Consumer<TProtocol> writer) {
         final TMemoryBuffer buffer = new TMemoryBuffer(1024);
-        final TProtocol protocol = new TTextProtocol.Factory().getProtocol(buffer);
+        final TProtocol protocol = ThriftProtocolFactories.TEXT.getProtocol(buffer);
         writer.accept(protocol);
         return new String(buffer.getArray(), 0, buffer.length());
     }

File: thrift/src/main/java/com/linecorp/armeria/common/thrift/text/MapContext.java
Patch:
@@ -41,10 +41,9 @@
  *
  * @author Alex Roetter
  */
-class MapContext extends PairContext {
+final class MapContext extends PairContext {
 
-    // SUPPRESS CHECKSTYLE JavadocMethod
-    protected MapContext(@Nullable JsonNode json) {
+    MapContext(@Nullable JsonNode json) {
         super(json);
     }
 

File: thrift/src/main/java/com/linecorp/armeria/common/thrift/text/SequenceContext.java
Patch:
@@ -42,7 +42,7 @@
  *
  * @author Alex Roetter
  */
-class SequenceContext extends BaseContext {
+final class SequenceContext extends BaseContext {
 
     @Nullable
     private final Iterator<JsonNode> children;

File: thrift/src/main/java/com/linecorp/armeria/common/thrift/text/StructContext.java
Patch:
@@ -63,7 +63,7 @@
  *
  * @author Alex Roetter
  */
-class StructContext extends PairContext {
+final class StructContext extends PairContext {
     private static final Logger log = LoggerFactory.getLogger(StructContext.class);
     private static final Supplier<Class<?>> thriftMessageClassFinder;
 

File: thrift/src/main/java/com/linecorp/armeria/server/thrift/ThriftDocServicePlugin.java
Patch:
@@ -77,7 +77,7 @@
 /**
  * {@link DocServicePlugin} implementation that supports {@link THttpService}s.
  */
-public class ThriftDocServicePlugin implements DocServicePlugin {
+public final class ThriftDocServicePlugin implements DocServicePlugin {
 
     private static final String REQUEST_STRUCT_SUFFIX = "_args";
 

File: zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroupBuilder.java
Patch:
@@ -36,7 +36,7 @@
 /**
  * Builds a {@link ZooKeeperEndpointGroup}.
  */
-public class ZooKeeperEndpointGroupBuilder {
+public final class ZooKeeperEndpointGroupBuilder {
 
     @Nullable
     private final CuratorFramework client;

File: zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListener.java
Patch:
@@ -40,7 +40,7 @@
  * removed. As a result, the clients that use a {@link ZooKeeperEndpointGroup} will be notified, and they will
  * update their endpoint list automatically so that they do not attempt to connect to the unreachable servers.
  */
-public class ZooKeeperUpdatingListener extends ServerListenerAdapter {
+public final class ZooKeeperUpdatingListener extends ServerListenerAdapter {
 
     /**
      * Returns a {@link ZooKeeperUpdatingListenerBuilder} with a {@link CuratorFramework} instance and a zNode

File: core/src/main/java/com/linecorp/armeria/client/encoding/DecodingClient.java
Patch:
@@ -42,8 +42,7 @@ public class DecodingClient extends SimpleDecoratingHttpClient {
      * Creates a new {@link DecodingClient} decorator with the default encodings of 'gzip' and 'deflate'.
      */
     public static Function<? super HttpClient, DecodingClient> newDecorator() {
-        return newDecorator(
-                ImmutableList.of(new GzipStreamDecoderFactory(), new DeflateStreamDecoderFactory()));
+        return newDecorator(ImmutableList.of(StreamDecoderFactory.gzip(), StreamDecoderFactory.deflate()));
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/client/encoding/HttpDecodingClient.java
Patch:
@@ -40,8 +40,7 @@ public final class HttpDecodingClient extends DecodingClient {
      */
     @Deprecated
     public static Function<? super HttpClient, DecodingClient> newDecorator() {
-        return newDecorator(
-                ImmutableList.of(new GzipStreamDecoderFactory(), new DeflateStreamDecoderFactory()));
+        return newDecorator(ImmutableList.of(StreamDecoderFactory.gzip(), StreamDecoderFactory.deflate()));
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/common/NonWrappingRequestContext.java
Patch:
@@ -33,7 +33,8 @@
 import io.netty.util.AttributeKey;
 
 /**
- * Default {@link RequestContext} implementation.
+ * A skeletal {@link RequestContext} implementation that helps to implement a non-wrapping
+ * {@link RequestContext}.
  */
 public abstract class NonWrappingRequestContext implements RequestContext {
 

File: core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java
Patch:
@@ -61,7 +61,7 @@
 import com.google.common.io.Closeables;
 
 import com.linecorp.armeria.client.encoding.DecodingClient;
-import com.linecorp.armeria.client.encoding.DeflateStreamDecoderFactory;
+import com.linecorp.armeria.client.encoding.StreamDecoderFactory;
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.common.AggregatedHttpRequest;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
@@ -485,7 +485,7 @@ void httpDecoding_deflate() throws Exception {
         final WebClient client = WebClient.builder(server.uri("/"))
                                           .factory(clientFactory)
                                           .decorator(DecodingClient.newDecorator(
-                                                  new DeflateStreamDecoderFactory()))
+                                                  StreamDecoderFactory.deflate()))
                                           .build();
 
         final AggregatedHttpResponse response =
@@ -500,7 +500,7 @@ void httpDecoding_noEncodingApplied() throws Exception {
         final WebClient client = WebClient.builder(server.uri("/"))
                                           .factory(clientFactory)
                                           .decorator(DecodingClient.newDecorator(
-                                                  new DeflateStreamDecoderFactory()))
+                                                  StreamDecoderFactory.deflate()))
                                           .build();
 
         final AggregatedHttpResponse response =

File: spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java
Patch:
@@ -39,7 +39,7 @@
 import io.micrometer.prometheus.PrometheusMeterRegistry;
 
 /**
- * Settings for armeria servers, e.g.,
+ * Settings for armeria servers. For example:
  * <pre>{@code
  * armeria:
  *   ports:

File: spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/DataBufferFactoryWrapper.java
Patch:
@@ -40,7 +40,7 @@
  */
 final class DataBufferFactoryWrapper<T extends DataBufferFactory> {
 
-    static DataBufferFactoryWrapper<NettyDataBufferFactory> DEFAULT =
+    static final DataBufferFactoryWrapper<NettyDataBufferFactory> DEFAULT =
             new DataBufferFactoryWrapper<>(new NettyDataBufferFactory(PooledByteBufAllocator.DEFAULT));
 
     private final T delegate;
@@ -86,7 +86,7 @@ DataBuffer toDataBuffer(HttpData httpData) {
 
     /**
      * Returns a {@link PooledDataBuffer} which will be released after consuming by the consumer.
-     * Currently the {@link NettyDataBuffer} is only one implementation of the {@link PooledDataBuffer}
+     * Currently, the {@link NettyDataBuffer} is only one implementation of the {@link PooledDataBuffer}
      * which is exposed to the public API.
      */
     private PooledDataBuffer withNettyDataBufferFactory(ByteBufHttpData data) {

File: thrift/src/main/java/com/linecorp/armeria/common/thrift/ThriftCall.java
Patch:
@@ -13,7 +13,6 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-
 package com.linecorp.armeria.common.thrift;
 
 import static java.util.Objects.requireNonNull;
@@ -24,6 +23,7 @@
 import org.apache.thrift.protocol.TMessage;
 import org.apache.thrift.protocol.TMessageType;
 
+import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import com.google.common.base.MoreObjects;
 
 import com.linecorp.armeria.common.logging.RequestLog;
@@ -32,6 +32,7 @@
  * A container of a Thrift one-way or two-way call object ({@link TBase}) and its header ({@link TMessage}).
  * It is exported to {@link RequestLog#requestContent()} when a Thrift call is processed.
  */
+@JsonSerialize(using = ThriftJacksonSerializers.ThriftCallJsonSerializer.class)
 public final class ThriftCall extends ThriftMessage {
 
     private final TBase<?, ?> args;

File: thrift/src/main/java/com/linecorp/armeria/common/thrift/ThriftReply.java
Patch:
@@ -13,7 +13,6 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-
 package com.linecorp.armeria.common.thrift;
 
 import static java.util.Objects.requireNonNull;
@@ -27,6 +26,7 @@
 import org.apache.thrift.protocol.TMessage;
 import org.apache.thrift.protocol.TMessageType;
 
+import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import com.google.common.base.MoreObjects;
 import com.google.common.base.MoreObjects.ToStringHelper;
 
@@ -37,6 +37,7 @@
  * its header ({@link TMessage}). It is exported to {@link RequestLog#responseContent()} when a Thrift call
  * is processed.
  */
+@JsonSerialize(using = ThriftJacksonSerializers.ThriftReplyJsonSerializer.class)
 public final class ThriftReply extends ThriftMessage {
 
     @Nullable

File: zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroup.java
Patch:
@@ -32,13 +32,16 @@
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.client.endpoint.EndpointSelectionStrategy;
 import com.linecorp.armeria.common.zookeeper.NodeValueCodec;
+import com.linecorp.armeria.server.zookeeper.ZooKeeperUpdatingListener;
 
 import io.netty.util.concurrent.DefaultThreadFactory;
 
 /**
  * A ZooKeeper-based {@link EndpointGroup} implementation. This {@link EndpointGroup} retrieves the list of
  * {@link Endpoint}s from a ZooKeeper using {@link NodeValueCodec} and updates it when the children of the
  * zNode changes.
+ *
+ * @see ZooKeeperUpdatingListener
  */
 public final class ZooKeeperEndpointGroup extends DynamicEndpointGroup {
 

File: zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/package-info.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 /**
- * ZooKeeper-based {@link com.linecorp.armeria.client.endpoint.EndpointGroup} implementation.
+ * ZooKeeper-based {@link com.linecorp.armeria.client.endpoint.EndpointGroup} for automatic service discovery.
  */
 @NonNullByDefault
 package com.linecorp.armeria.client.zookeeper;

File: zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/package-info.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 /**
- * Common classes will be used by Server and Client implementations.
+ * <a href="https://zookeeper.apache.org/">ZooKeeper</a>-related common classes.
  */
 @NonNullByDefault
 package com.linecorp.armeria.common.zookeeper;

File: brave/src/main/java/com/linecorp/armeria/client/brave/BraveClient.java
Patch:
@@ -26,13 +26,13 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.linecorp.armeria.client.ClientConnectionTimings;
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.HttpClient;
 import com.linecorp.armeria.client.SimpleDecoratingHttpClient;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.RequestHeadersBuilder;
+import com.linecorp.armeria.common.logging.ClientConnectionTimings;
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.internal.brave.SpanTags;
 
@@ -137,7 +137,7 @@ public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Ex
 
             SpanTags.updateRemoteEndpoint(span, ctx);
 
-            final ClientConnectionTimings timings = ClientConnectionTimings.get(ctx);
+            final ClientConnectionTimings timings = log.connectionTimings();
             if (timings != null) {
                 logTiming(span, "connection-acquire.start", "connection-acquire.end",
                           timings.connectionAcquisitionStartTimeMicros(),

File: core/src/main/java/com/linecorp/armeria/client/DefaultWebClient.java
Patch:
@@ -95,7 +95,7 @@ private HttpResponse execute(EndpointGroup endpointGroup, HttpRequest req) {
         return execute(endpointGroup, req.method(),
                        pathAndQuery.path(), pathAndQuery.query(), null, req,
                        (ctx, cause) -> {
-                           if (ctx != null && !ctx.log().isAvailable(RequestLogProperty.REQUEST_START_TIME)) {
+                           if (ctx != null && !ctx.log().isAvailable(RequestLogProperty.SESSION)) {
                                // An exception has been raised even before sending a request,
                                // so abort the request to release the elements.
                                if (cause == null) {

File: core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java
Patch:
@@ -40,6 +40,7 @@
 
 import com.linecorp.armeria.common.ClosedSessionException;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.logging.ClientConnectionTimingsBuilder;
 import com.linecorp.armeria.common.util.AsyncCloseable;
 import com.linecorp.armeria.common.util.AsyncCloseableSupport;
 

File: core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java
Patch:
@@ -176,7 +176,6 @@ private void writeFirstHeader() {
 
         final SessionProtocol protocol = session.protocol();
         assert protocol != null;
-        logBuilder.startRequest(ch, protocol);
         logBuilder.requestHeaders(firstHeaders);
 
         if (request.isEmpty()) {

File: core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java
Patch:
@@ -193,7 +193,7 @@ private boolean handleEarlyCancellation(ClientRequestContext ctx, HttpRequest re
 
         try (SafeCloseable ignored = RequestContextUtil.pop()) {
             req.abort(CancelledSubscriptionException.get());
-            ctx.logBuilder().startRequest(channel, protocol);
+            ctx.logBuilder().session(channel, protocol, null);
             ctx.logBuilder().requestHeaders(req.headers());
             req.whenComplete().handle((unused, cause) -> {
                 if (cause == null) {

File: core/src/main/java/com/linecorp/armeria/client/UserClient.java
Patch:
@@ -35,6 +35,7 @@
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.Scheme;
 import com.linecorp.armeria.common.util.AbstractUnwrappable;
+import com.linecorp.armeria.common.util.SystemInfo;
 
 import io.micrometer.core.instrument.MeterRegistry;
 
@@ -147,8 +148,8 @@ protected final O execute(EndpointGroup endpointGroup,
 
         final DefaultClientRequestContext ctx =
                 new DefaultClientRequestContext(meterRegistry, scheme().sessionProtocol(),
-                                                id, method, path, query, fragment, options(),
-                                                httpReq, rpcReq);
+                                                id, method, path, query, fragment, options(), httpReq, rpcReq,
+                                                System.nanoTime(), SystemInfo.currentTimeMicros());
 
         return initContextAndExecuteWithFallback(delegate(), ctx, endpointGroup, fallback);
     }

File: core/src/main/java/com/linecorp/armeria/common/logging/ClientConnectionTimingsBuilder.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.client;
+package com.linecorp.armeria.common.logging;
 
 import static com.google.common.base.Preconditions.checkState;
 

File: core/src/main/java/com/linecorp/armeria/internal/ClientUtil.java
Patch:
@@ -106,7 +106,7 @@ private static <O extends Response> O failAndGetFallbackResponse(
             Throwable cause) {
 
         final RequestLogBuilder logBuilder = ctx.logBuilder();
-        if (!ctx.log().isAvailable(RequestLogProperty.REQUEST_START_TIME)) {
+        if (!ctx.log().isAvailable(RequestLogProperty.SESSION)) {
             // An exception is raised even before sending a request,
             // so end the request with the exception.
             logBuilder.endRequest(cause);

File: core/src/main/java/com/linecorp/armeria/internal/metric/RequestMetricSupport.java
Patch:
@@ -28,13 +28,13 @@
 
 import com.google.common.collect.ImmutableList;
 
-import com.linecorp.armeria.client.ClientConnectionTimings;
 import com.linecorp.armeria.client.ResponseTimeoutException;
 import com.linecorp.armeria.client.WriteTimeoutException;
 import com.linecorp.armeria.common.Flags;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.RequestContext;
 import com.linecorp.armeria.common.RpcResponse;
+import com.linecorp.armeria.common.logging.ClientConnectionTimings;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.common.metric.MeterIdPrefix;
@@ -131,7 +131,7 @@ private static void onResponse(RequestLog log, MeterIdPrefixFunction meterIdPref
                                                                      ClientRequestMetrics.class,
                                                                      DefaultClientRequestMetrics::new);
         updateMetrics(log, metrics);
-        final ClientConnectionTimings timings = ClientConnectionTimings.get(log);
+        final ClientConnectionTimings timings = log.connectionTimings();
         if (timings != null) {
             metrics.connectionAcquisitionDuration().record(timings.connectionAcquisitionDurationNanos(),
                                                            TimeUnit.NANOSECONDS);

File: core/src/test/java/com/linecorp/armeria/client/DefaultClientRequestContextTest.java
Patch:
@@ -41,6 +41,7 @@
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.metric.NoopMeterRegistry;
 import com.linecorp.armeria.common.util.SafeCloseable;
+import com.linecorp.armeria.common.util.SystemInfo;
 import com.linecorp.armeria.common.util.TimeoutController;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
@@ -214,7 +215,7 @@ private static DefaultClientRequestContext newContext() {
                         HttpMethod.POST, "/foo",
                         HttpHeaderNames.SCHEME, "http",
                         HttpHeaderNames.AUTHORITY, "example.com:8080")),
-                null);
+                null, System.nanoTime(), SystemInfo.currentTimeMicros());
         ctx.init(Endpoint.of("example.com", 8080));
         return ctx;
     }

File: core/src/test/java/com/linecorp/armeria/common/logging/ClientConnectionTimingsTest.java
Patch:
@@ -14,9 +14,9 @@
  * under the License.
  */
 
-package com.linecorp.armeria.client;
+package com.linecorp.armeria.common.logging;
 
-import static com.linecorp.armeria.client.ClientConnectionTimings.TO_STRING_BUILDER_CAPACITY;
+import static com.linecorp.armeria.common.logging.ClientConnectionTimings.TO_STRING_BUILDER_CAPACITY;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import org.junit.jupiter.api.Test;

File: core/src/test/java/com/linecorp/armeria/common/logging/DefaultRequestLogTest.java
Patch:
@@ -138,7 +138,8 @@ void rpcFailure_endResponseDifferentCause() {
     void addChild() {
         final DefaultRequestLog child = new DefaultRequestLog(ctx);
         log.addChild(child);
-        child.startRequest(channel, SessionProtocol.H2C);
+        child.startRequest();
+        child.session(channel, SessionProtocol.H2C, null, null);
         assertThat(log.requestStartTimeMicros()).isEqualTo(child.requestStartTimeMicros());
         assertThat(log.channel()).isSameAs(channel);
         assertThat(log.sessionProtocol()).isSameAs(SessionProtocol.H2C);

File: thrift/src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTServletIntegrationTest.java
Patch:
@@ -300,7 +300,7 @@ private static HelloService.Iface newSchemeCapturingClient(
 
         return Clients.builder(uri)
                       .rpcDecorator((delegate, ctx, req) -> {
-                          ctx.log().whenAvailable(RequestLogProperty.REQUEST_START_TIME)
+                          ctx.log().whenAvailable(RequestLogProperty.SESSION)
                              .thenAccept(log -> sessionProtocol.set(log.sessionProtocol()));
                           return delegate.execute(ctx, req);
                       })

File: core/src/main/java/com/linecorp/armeria/server/Route.java
Patch:
@@ -53,7 +53,7 @@ static RouteBuilder builder() {
      * @return a non-empty {@link RoutingResult} if the {@linkplain RoutingContext#path() path},
      *         {@linkplain RoutingContext#method() method},
      *         {@linkplain RoutingContext#contentType() contentType} and
-     *         {@linkplain RoutingContext#acceptTypes() acceptTypes} amd
+     *         {@linkplain RoutingContext#acceptTypes() acceptTypes} and
      *         {@linkplain RoutingContext#headers() HTTP headers} and
      *         {@linkplain RoutingContext#params() query parameters} matches the equivalent conditions in
      *         {@link Route}. {@link RoutingResult#empty()} otherwise.

File: brave/src/test/java/com/linecorp/armeria/it/brave/BraveIntegrationTest.java
Patch:
@@ -41,7 +41,6 @@
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.Timeout;
 import org.junit.jupiter.api.extension.RegisterExtension;
 
 import com.google.common.util.concurrent.ListenableFuture;
@@ -83,7 +82,6 @@
 import zipkin2.Span;
 import zipkin2.reporter.Reporter;
 
-@Timeout(10)
 class BraveIntegrationTest {
 
     private static final ReporterImpl spanReporter = new ReporterImpl();

File: core/src/test/java/com/linecorp/armeria/server/HttpServerHeaderValidationTest.java
Patch:
@@ -25,7 +25,6 @@
 import java.nio.charset.StandardCharsets;
 import java.util.stream.Stream;
 
-import org.junit.jupiter.api.Timeout;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.api.extension.RegisterExtension;
 import org.junit.jupiter.params.ParameterizedTest;
@@ -43,7 +42,6 @@
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.testing.junit.server.ServerExtension;
 
-@Timeout(10)
 class HttpServerHeaderValidationTest {
 
     @RegisterExtension

File: brave/src/main/java/com/linecorp/armeria/client/brave/ArmeriaHttpClientParser.java
Patch:
@@ -96,9 +96,9 @@ public <T> void response(HttpAdapter<?, T> rawAdapter, T res, Throwable error, S
             customizer.tag(SpanTags.TAG_ADDRESS_LOCAL, laddr.toString());
         }
 
-        final String rpcMethod = ClientRequestContextAdapter.rpcMethod(log);
-        if (rpcMethod != null) {
-            customizer.name(rpcMethod);
+        final String name = log.name();
+        if (name != null) {
+            customizer.name(name);
         }
     }
 }

File: brave/src/main/java/com/linecorp/armeria/server/brave/ArmeriaHttpServerParser.java
Patch:
@@ -79,9 +79,9 @@ public <T> void response(HttpAdapter<?, T> rawAdapter, T res, Throwable error, S
             customizer.tag(SpanTags.TAG_HTTP_SERIALIZATION_FORMAT, serFmt);
         }
 
-        final String rpcMethod = ServiceRequestContextAdapter.rpcMethod(requestLog);
-        if (rpcMethod != null) {
-            customizer.name(rpcMethod);
+        final String name = requestLog.name();
+        if (name != null) {
+            customizer.name(name);
         }
     }
 }

File: brave/src/test/java/com/linecorp/armeria/it/brave/BraveIntegrationTest.java
Patch:
@@ -13,7 +13,6 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-
 package com.linecorp.armeria.it.brave;
 
 import static com.google.common.collect.ImmutableList.toImmutableList;
@@ -126,7 +125,7 @@ protected void configure(ServerBuilder sb) throws Exception {
                         quxClient.hello(name, f1);
                         quxClient.hello(name, f2);
                         CompletableFuture.allOf(f1, f2).whenCompleteAsync((aVoid, throwable) -> {
-                            resultHandler.onComplete(f1.join() + ", and " + f2.join());
+                            resultHandler.onComplete(f1.getNow(null) + ", and " + f2.getNow(null));
                         }, RequestContext.current().contextAwareExecutor());
                     })));
 

File: core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotatedService.java
Patch:
@@ -225,6 +225,8 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
      * {@link HttpResponse}, it will be executed in the blocking task executor.
      */
     private CompletionStage<HttpResponse> serve0(ServiceRequestContext ctx, HttpRequest req) {
+        ctx.logBuilder().name(method.getName());
+
         final CompletableFuture<AggregatedHttpRequest> f =
                 aggregationRequired(aggregationStrategy, req) ? req.aggregate()
                                                               : CompletableFuture.completedFuture(null);

File: core/src/main/java/com/linecorp/armeria/internal/metric/RequestMetricSupport.java
Patch:
@@ -68,7 +68,7 @@ public static void setup(RequestContext ctx, AttributeKey<Boolean> requestMetric
         ctx.log()
            .whenAvailable(RequestLogProperty.REQUEST_START_TIME,
                           RequestLogProperty.REQUEST_HEADERS,
-                          RequestLogProperty.REQUEST_CONTENT,
+                          RequestLogProperty.NAME,
                           RequestLogProperty.SESSION)
            .thenAccept(log -> onRequest(log, meterIdPrefixFunction, server));
     }

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaChannel.java
Patch:
@@ -95,6 +95,7 @@ public <I, O> ClientCall<I, O> newCall(
                                   HttpHeaderNames.CONTENT_TYPE, serializationFormat.mediaType(),
                                   HttpHeaderNames.TE, HttpHeaderValues.TRAILERS));
         final DefaultClientRequestContext ctx = newContext(HttpMethod.POST, req);
+        ctx.logBuilder().name(method.getFullMethodName());
         ctx.logBuilder().serializationFormat(serializationFormat);
         ctx.logBuilder().deferRequestContent();
         ctx.logBuilder().deferResponseContent();

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcService.java
Patch:
@@ -209,6 +209,7 @@ protected HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req) throws
             }
         }
 
+        ctx.logBuilder().name(methodName);
         ctx.logBuilder().deferRequestContent();
         ctx.logBuilder().deferResponseContent();
 

File: retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaCallFactory.java
Patch:
@@ -143,7 +143,7 @@ private static HttpResponse doCall(ArmeriaCallFactory callFactory, Request reque
             if (body == null) {
                 // Without a body.
                 try (SafeCloseable ignored = withContextCustomizer(
-                        ctx -> InvocationUtil.setInvocation(ctx.log(), invocation))) {
+                        ctx -> InvocationUtil.setInvocation(ctx, invocation))) {
                     return webClient.execute(headers.build());
                 }
             }
@@ -158,7 +158,7 @@ private static HttpResponse doCall(ArmeriaCallFactory callFactory, Request reque
                 body.writeTo(contentBuffer);
 
                 try (SafeCloseable ignored = withContextCustomizer(
-                        ctx -> InvocationUtil.setInvocation(ctx.log(), invocation))) {
+                        ctx -> InvocationUtil.setInvocation(ctx, invocation))) {
                     return webClient.execute(headers.build(), contentBuffer.readByteArray());
                 }
             } catch (IOException e) {

File: thrift/src/main/java/com/linecorp/armeria/client/thrift/THttpClientDelegate.java
Patch:
@@ -98,6 +98,7 @@ public RpcResponse execute(ClientRequestContext ctx, RpcRequest call) throws Exc
         final List<Object> args = call.params();
         final DefaultRpcResponse reply = new DefaultRpcResponse();
 
+        ctx.logBuilder().name(call.method());
         ctx.logBuilder().serializationFormat(serializationFormat);
 
         final ThriftFunction func;

File: thrift/src/main/java/com/linecorp/armeria/server/thrift/THttpService.java
Patch:
@@ -602,6 +602,7 @@ private void decodeAndInvoke(
                 handlePreDecodeException(ctx, httpRes, cause, serializationFormat, seqId, methodName);
                 return;
             }
+            ctx.logBuilder().name(header.name);
 
             // Decode the invocation parameters.
             try {

File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java
Patch:
@@ -611,13 +611,16 @@ ClientRequestContext newDerivedContext(RequestId id, @Nullable HttpRequest req,
      * Returns the maximum length of the received {@link Response}.
      * This value is initially set from {@link ClientOption#MAX_RESPONSE_LENGTH}.
      *
+     * @return the maximum length of the response. {@code 0} if unlimited.
+     *
      * @see ContentTooLargeException
      */
     long maxResponseLength();
 
     /**
      * Sets the maximum length of the received {@link Response}.
      * This value is initially set from {@link ClientOption#MAX_RESPONSE_LENGTH}.
+     * Specify {@code 0} to disable the limit of the length of a response.
      *
      * @see ContentTooLargeException
      */

File: core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java
Patch:
@@ -592,6 +592,7 @@ public long maxResponseLength() {
 
     @Override
     public void setMaxResponseLength(long maxResponseLength) {
+        checkArgument(maxResponseLength >= 0, "maxResponseLength: %s (expected: >= 0)", maxResponseLength);
         this.maxResponseLength = maxResponseLength;
     }
 

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/AbstractHealthCheckedEndpointGroupBuilder.java
Patch:
@@ -109,7 +109,7 @@ public AbstractHealthCheckedEndpointGroupBuilder port(int port) {
     public AbstractHealthCheckedEndpointGroupBuilder retryInterval(Duration retryInterval) {
         requireNonNull(retryInterval, "retryInterval");
         checkArgument(!retryInterval.isNegative() && !retryInterval.isZero(),
-                      "retryInterval: %s (expected > 0)", retryInterval);
+                      "retryInterval: %s (expected: > 0)", retryInterval);
         return retryIntervalMillis(retryInterval.toMillis());
     }
 
@@ -118,7 +118,7 @@ public AbstractHealthCheckedEndpointGroupBuilder retryInterval(Duration retryInt
      */
     public AbstractHealthCheckedEndpointGroupBuilder retryIntervalMillis(long retryIntervalMillis) {
         checkArgument(retryIntervalMillis > 0,
-                      "retryIntervalMillis: %s (expected > 0)", retryIntervalMillis);
+                      "retryIntervalMillis: %s (expected: > 0)", retryIntervalMillis);
         return retryBackoff(Backoff.fixed(retryIntervalMillis).withJitter(0.2));
     }
 

File: core/src/main/java/com/linecorp/armeria/common/FixedHttpRequest.java
Patch:
@@ -27,6 +27,8 @@
  */
 final class FixedHttpRequest {
 
+    // TODO(minwoox): Override toDuplicator(...) methods for optimization
+
     static final class EmptyFixedHttpRequest
             extends EmptyFixedStreamMessage<HttpObject> implements HttpRequest {
 

File: core/src/main/java/com/linecorp/armeria/common/FixedHttpResponse.java
Patch:
@@ -28,6 +28,8 @@
  */
 final class FixedHttpResponse {
 
+    // TODO(minwoox): Override toDuplicator(...) methods for optimization
+
     static final class OneElementFixedHttpResponse
             extends OneElementFixedStreamMessage<HttpObject> implements HttpResponse {
         OneElementFixedHttpResponse(ResponseHeaders headers) {

File: core/src/main/java/com/linecorp/armeria/common/PublisherBasedHttpResponse.java
Patch:
@@ -21,6 +21,7 @@
 import com.linecorp.armeria.common.stream.PublisherBasedStreamMessage;
 
 final class PublisherBasedHttpResponse extends PublisherBasedStreamMessage<HttpObject> implements HttpResponse {
+
     PublisherBasedHttpResponse(Publisher<? extends HttpObject> publisher) {
         super(publisher);
     }

File: core/src/main/java/com/linecorp/armeria/common/logging/BinaryContentPreviewer.java
Patch:
@@ -63,7 +63,7 @@ void maxAggregatedLength(int length) {
     static ContentPreviewer create(int maxAggregatedLength,
                                    BiFunction<? super HttpHeaders, ? super ByteBuf, String> reproducer) {
         requireNonNull(reproducer, "reproducer");
-        checkArgument(maxAggregatedLength > 0, "maxAggregatedLength: %s (expected > 0)", maxAggregatedLength);
+        checkArgument(maxAggregatedLength > 0, "maxAggregatedLength: %s (expected: > 0)", maxAggregatedLength);
         return new BinaryContentPreviewer(maxAggregatedLength) {
             @Override
             protected String reproduce(HttpHeaders headers, ByteBuf wrappedBuffer) {

File: core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceBuilder.java
Patch:
@@ -228,7 +228,7 @@ public HealthCheckServiceBuilder longPolling(Duration maxLongPollingTimeout,
 
         requireNonNull(pingInterval, "pingInterval");
         checkArgument(!pingInterval.isNegative(),
-                      "pingInterval: %s (expected >= 0)", pingInterval);
+                      "pingInterval: %s (expected: >= 0)", pingInterval);
 
         return longPolling(maxLongPollingTimeout.toMillis(),
                            longPollingTimeoutJitterRate,

File: examples/proxy-server/src/main/java/example/armeria/proxy/AnimationService.java
Patch:
@@ -54,7 +54,7 @@ public final class AnimationService extends AbstractHttpService {
     public AnimationService(int frameIntervalMillis) {
         if (frameIntervalMillis < 0) {
             throw new IllegalArgumentException("frameIntervalMillis: " + frameIntervalMillis +
-                                               " (expected >= 0)");
+                                               " (expected: >= 0)");
         }
         this.frameIntervalMillis = frameIntervalMillis;
     }

File: brave/src/main/java/com/linecorp/armeria/client/brave/ArmeriaHttpClientParser.java
Patch:
@@ -78,7 +78,7 @@ public <T> void response(HttpAdapter<?, T> rawAdapter, T res, Throwable error, S
         }
 
         final ClientRequestContext ctx = (ClientRequestContext) res;
-        final RequestLog log = ctx.log();
+        final RequestLog log = ctx.log().ensureComplete();
         customizer.tag(SpanTags.TAG_HTTP_PROTOCOL, ClientRequestContextAdapter.protocol(log));
 
         final String serFmt = ClientRequestContextAdapter.serializationFormat(log);

File: brave/src/main/java/com/linecorp/armeria/server/brave/ArmeriaHttpServerParser.java
Patch:
@@ -73,7 +73,7 @@ public <T> void response(HttpAdapter<?, T> rawAdapter, T res, Throwable error, S
         }
 
         final ServiceRequestContext ctx = (ServiceRequestContext) res;
-        final RequestLog requestLog = ctx.log();
+        final RequestLog requestLog = ctx.log().ensureComplete();
         final String serFmt = ServiceRequestContextAdapter.serializationFormat(requestLog);
         if (serFmt != null) {
             customizer.tag(SpanTags.TAG_HTTP_SERIALIZATION_FORMAT, serFmt);

File: brave/src/test/java/com/linecorp/armeria/client/brave/BraveClientTest.java
Patch:
@@ -242,7 +242,7 @@ private static RequestLog testRemoteInvocation(Tracing tracing, @Nullable String
         ctx.logBuilder().responseFirstBytesTransferred();
         ctx.logBuilder().responseContent(rpcRes, res);
         ctx.logBuilder().endResponse();
-        return ctx.log();
+        return ctx.log().ensureComplete();
     }
 
     private static void assertTags(@Nullable Span span) {

File: brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceTest.java
Patch:
@@ -191,7 +191,7 @@ private static RequestLog testServiceInvocation(Reporter<Span> reporter,
         logBuilder.responseFirstBytesTransferred();
         logBuilder.responseContent(rpcRes, res);
         logBuilder.endResponse();
-        return ctx.log();
+        return ctx.log().ensureComplete();
     }
 
     private static void assertTags(Span span) {

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/HttpStatusBasedCircuitBreakerStrategy.java
Patch:
@@ -27,7 +27,7 @@
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.UnprocessedRequestException;
 import com.linecorp.armeria.common.HttpStatus;
-import com.linecorp.armeria.common.logging.RequestLogAvailability;
+import com.linecorp.armeria.common.logging.RequestLogProperty;
 
 final class HttpStatusBasedCircuitBreakerStrategy implements CircuitBreakerStrategy {
 
@@ -43,8 +43,8 @@ public CompletionStage<Boolean> shouldReportAsSuccess(ClientRequestContext ctx,
             return CompletableFuture.completedFuture(null); // Neither success nor failure.
         }
         final HttpStatus status;
-        if (ctx.log().isAvailable(RequestLogAvailability.RESPONSE_HEADERS)) {
-            status = ctx.log().responseHeaders().status();
+        if (ctx.log().isAvailable(RequestLogProperty.RESPONSE_HEADERS)) {
+            status = ctx.log().partial().responseHeaders().status();
         } else {
             status = null;
         }

File: core/src/main/java/com/linecorp/armeria/client/logging/LoggingClient.java
Patch:
@@ -31,6 +31,7 @@
 import com.linecorp.armeria.common.Response;
 import com.linecorp.armeria.common.logging.LogLevel;
 import com.linecorp.armeria.common.logging.RequestLog;
+import com.linecorp.armeria.common.logging.RequestOnlyLog;
 import com.linecorp.armeria.common.util.Sampler;
 
 /**
@@ -98,7 +99,7 @@ public LoggingClient(HttpClient delegate, LogLevel level) {
      */
     LoggingClient(HttpClient delegate,
                   @Nullable Logger logger,
-                  Function<? super RequestLog, LogLevel> requestLogLevelMapper,
+                  Function<? super RequestOnlyLog, LogLevel> requestLogLevelMapper,
                   Function<? super RequestLog, LogLevel> responseLogLevelMapper,
                   Function<? super HttpHeaders, ?> requestHeadersSanitizer,
                   Function<Object, ?> requestContentSanitizer,

File: core/src/main/java/com/linecorp/armeria/client/logging/LoggingRpcClient.java
Patch:
@@ -31,6 +31,7 @@
 import com.linecorp.armeria.common.RpcResponse;
 import com.linecorp.armeria.common.logging.LogLevel;
 import com.linecorp.armeria.common.logging.RequestLog;
+import com.linecorp.armeria.common.logging.RequestOnlyLog;
 import com.linecorp.armeria.common.util.Sampler;
 
 /**
@@ -66,7 +67,7 @@ public static LoggingRpcClientBuilder builder() {
      */
     LoggingRpcClient(RpcClient delegate,
                      @Nullable Logger logger,
-                     Function<? super RequestLog, LogLevel> requestLogLevelMapper,
+                     Function<? super RequestOnlyLog, LogLevel> requestLogLevelMapper,
                      Function<? super RequestLog, LogLevel> responseLogLevelMapper,
                      Function<? super HttpHeaders, ?> requestHeadersSanitizer,
                      Function<Object, ?> requestContentSanitizer,

File: core/src/main/java/com/linecorp/armeria/client/retry/HttpStatusBasedRetryStrategy.java
Patch:
@@ -27,7 +27,7 @@
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
-import com.linecorp.armeria.common.logging.RequestLogAvailability;
+import com.linecorp.armeria.common.logging.RequestLogProperty;
 
 /**
  * Provides a {@link RetryStrategy} that decides to retry the request based on the {@link HttpStatus} of
@@ -47,8 +47,8 @@ final class HttpStatusBasedRetryStrategy implements RetryStrategy {
     @Override
     public CompletionStage<Backoff> shouldRetry(ClientRequestContext ctx, @Nullable Throwable cause) {
         final HttpStatus status;
-        if (ctx.log().isAvailable(RequestLogAvailability.RESPONSE_HEADERS)) {
-            status = ctx.log().responseHeaders().status();
+        if (ctx.log().isAvailable(RequestLogProperty.RESPONSE_HEADERS)) {
+            status = ctx.log().partial().responseHeaders().status();
         } else {
             status = null;
         }

File: core/src/main/java/com/linecorp/armeria/common/RequestContextWrapper.java
Patch:
@@ -26,7 +26,7 @@
 import javax.annotation.Nullable;
 import javax.net.ssl.SSLSession;
 
-import com.linecorp.armeria.common.logging.RequestLog;
+import com.linecorp.armeria.common.logging.RequestLogAccess;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
 
 import io.micrometer.core.instrument.MeterRegistry;
@@ -127,7 +127,7 @@ public String query() {
     }
 
     @Override
-    public RequestLog log() {
+    public RequestLogAccess log() {
         return delegate().log();
     }
 

File: core/src/main/java/com/linecorp/armeria/internal/ClientUtil.java
Patch:
@@ -29,8 +29,8 @@
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.Response;
-import com.linecorp.armeria.common.logging.RequestLogAvailability;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
+import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.common.stream.StreamMessage;
 import com.linecorp.armeria.common.util.SafeCloseable;
 
@@ -60,7 +60,7 @@ O initContextAndExecuteWithFallback(U delegate,
                 if (res instanceof StreamMessage) {
                     ((StreamMessage<?>) res).abort();
                 }
-                return fallback.apply(ctx, ctx.log().requestCause());
+                return fallback.apply(ctx, ctx.log().partial().requestCause());
             }
         } catch (Throwable cause) {
             return failAndGetFallbackResponse(ctx, fallback, cause);
@@ -106,7 +106,7 @@ private static <O extends Response> O failAndGetFallbackResponse(
             Throwable cause) {
 
         final RequestLogBuilder logBuilder = ctx.logBuilder();
-        if (!ctx.log().isAvailable(RequestLogAvailability.REQUEST_START)) {
+        if (!ctx.log().isAvailable(RequestLogProperty.REQUEST_START_TIME)) {
             // An exception is raised even before sending a request,
             // so end the request with the exception.
             logBuilder.endRequest(cause);

File: core/src/main/java/com/linecorp/armeria/internal/logging/LoggingDecorators.java
Patch:
@@ -26,6 +26,7 @@
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.logging.LogLevel;
 import com.linecorp.armeria.common.logging.RequestLog;
+import com.linecorp.armeria.common.logging.RequestOnlyLog;
 
 /**
  * Utilities for logging decorators.
@@ -41,8 +42,8 @@ private LoggingDecorators() {}
      * Logs a stringified request of {@link RequestLog}.
      */
     public static void logRequest(
-            Logger logger, RequestLog log,
-            Function<? super RequestLog, LogLevel> requestLogLevelMapper,
+            Logger logger, RequestOnlyLog log,
+            Function<? super RequestOnlyLog, LogLevel> requestLogLevelMapper,
             Function<? super RequestHeaders, ?> requestHeadersSanitizer,
             Function<Object, ?> requestContentSanitizer,
             Function<? super HttpHeaders, ?> requestTrailersSanitizer) {

File: core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java
Patch:
@@ -51,7 +51,7 @@
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.logging.DefaultRequestLog;
-import com.linecorp.armeria.common.logging.RequestLog;
+import com.linecorp.armeria.common.logging.RequestLogAccess;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
 import com.linecorp.armeria.common.util.TimeoutController;
 import com.linecorp.armeria.server.logging.AccessLogWriter;
@@ -629,7 +629,7 @@ public ProxiedAddresses proxiedAddresses() {
     }
 
     @Override
-    public RequestLog log() {
+    public RequestLogAccess log() {
         return log;
     }
 

File: core/src/main/java/com/linecorp/armeria/server/logging/AccessLogWriter.java
Patch:
@@ -65,15 +65,15 @@ static AccessLogWriter custom(String formatStr) {
     /**
      * Logs the specified {@link RequestLog}.
      */
-    void log(RequestLog log) throws Exception;
+    void log(RequestLog log);
 
     /**
      * Returns a new {@link AccessLogWriter} which combines two {@link AccessLogWriter}s.
      */
     default AccessLogWriter andThen(AccessLogWriter after) {
         return new AccessLogWriter() {
             @Override
-            public void log(RequestLog log) throws Exception {
+            public void log(RequestLog log) {
                 try {
                     AccessLogWriter.this.log(log);
                 } finally {

File: core/src/main/java/com/linecorp/armeria/server/logging/structured/StructuredLoggingService.java
Patch:
@@ -23,7 +23,6 @@
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.logging.RequestLog;
-import com.linecorp.armeria.common.logging.RequestLogAvailability;
 import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerListenerAdapter;
@@ -78,12 +77,12 @@ public void serverStopped(Server server) {
 
     @Override
     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
-        ctx.log().addListener(log -> {
+        ctx.log().whenComplete().thenAccept(log -> {
             final L structuredLog = logBuilder.build(log);
             if (structuredLog != null) {
                 writeLog(log, structuredLog);
             }
-        }, RequestLogAvailability.COMPLETE);
+        });
         return delegate().serve(ctx, req);
     }
 

File: core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroupLongPollingTest.java
Patch:
@@ -40,7 +40,6 @@
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.logging.RequestLog;
-import com.linecorp.armeria.common.logging.RequestLogAvailability;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.healthcheck.HealthCheckService;
 import com.linecorp.armeria.server.healthcheck.SettableHealthChecker;
@@ -227,7 +226,7 @@ private HealthCheckedEndpointGroup build(HealthCheckedEndpointGroupBuilder build
                 // Record when health check requests were sent.
                 final Queue<RequestLog> healthCheckRequestLogs = this.healthCheckRequestLogs;
                 if (healthCheckRequestLogs != null) {
-                    ctx.log().addListener(healthCheckRequestLogs::add, RequestLogAvailability.COMPLETE);
+                    ctx.log().whenComplete().thenAccept(healthCheckRequestLogs::add);
                 }
                 return delegate.execute(ctx, req);
             });

File: core/src/test/java/com/linecorp/armeria/client/logging/LoggingClientTest.java
Patch:
@@ -79,7 +79,7 @@ void logger() throws Exception {
 
         // verify response log
         verify(logger).info(eq("{} Response: {}"), eq(context),
-                            argThat((String actLog) -> actLog.endsWith("duration=0ns, headers=[:status=0]}")));
+                            argThat((String actLog) -> actLog.endsWith("headers=[:status=0]}")));
 
         verifyNoMoreInteractions(logger);
         clearInvocations(logger);

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientLoadBalancingTest.java
Patch:
@@ -36,7 +36,7 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.SessionProtocol;
-import com.linecorp.armeria.common.logging.RequestLogAvailability;
+import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.testing.junit.server.ServerExtension;
 
@@ -98,8 +98,8 @@ void test(TestMode mode) {
         final RetryStrategy retryStrategy = (ctx, cause) -> {
             // Get the response status.
             final HttpStatus status;
-            if (ctx.log().isAvailable(RequestLogAvailability.RESPONSE_HEADERS)) {
-                status = ctx.log().responseHeaders().status();
+            if (ctx.log().isAvailable(RequestLogProperty.RESPONSE_HEADERS)) {
+                status = ctx.log().partial().responseHeaders().status();
             } else {
                 status = null;
             }

File: core/src/test/java/com/linecorp/armeria/common/logging/ContentPreviewerTest.java
Patch:
@@ -76,8 +76,7 @@ static class MyHttpClient {
                                                     .newDecorator())
                             .decorator((delegate, ctx, req) -> {
                                 if (waitingFuture != null) {
-                                    ctx.log().addListener(waitingFuture::complete,
-                                                          RequestLogAvailability.COMPLETE);
+                                    ctx.log().whenComplete().thenAccept(waitingFuture::complete);
                                 }
                                 return delegate.execute(ctx, req);
                             }).build();
@@ -192,7 +191,7 @@ void build(ServerBuilder sb) {
             sb.contentPreview(10, StandardCharsets.UTF_8);
             sb.decorator(delegate -> (ctx, req) -> {
                 if (waitingFuture != null) {
-                    ctx.log().addListener(waitingFuture::complete, RequestLogAvailability.COMPLETE);
+                    ctx.log().whenComplete().thenAccept(waitingFuture::complete);
                 }
                 return delegate.serve(ctx, req);
             });

File: core/src/test/java/com/linecorp/armeria/server/DecodedHttpRequestTest.java
Patch:
@@ -17,7 +17,6 @@
 package com.linecorp.armeria.server;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.awaitility.Awaitility.await;
 
 import java.util.List;
 
@@ -122,7 +121,7 @@ public void contentPreview() {
         assertThat(req.tryWrite(new ByteBufHttpData(newBuffer("hello"), false))).isTrue();
         req.close();
 
-        await().untilAsserted(() -> assertThat(sctx.log().requestContentPreview()).isEqualTo("hello"));
+        assertThat(sctx.log().whenRequestComplete().join().requestContentPreview()).isEqualTo("hello");
     }
 
     private static DecodedHttpRequest decodedHttpRequest() {

File: core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java
Patch:
@@ -38,7 +38,6 @@
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.logging.ContentPreviewerAdapter;
 import com.linecorp.armeria.common.logging.ContentPreviewerFactory;
-import com.linecorp.armeria.common.logging.RequestLogAvailability;
 import com.linecorp.armeria.testing.junit.server.ServerExtension;
 
 class ServiceBindingTest {
@@ -75,15 +74,15 @@ public String produce() {
               .responseContentPreviewerFactory(responseContentPreviewerFactory)
               .accessLogWriter(log -> accessLogWriterCheckLatch.countDown(), true)
               .decorator(delegate -> (ctx, req) -> {
-                  ctx.log().addListener(log -> {
+                  ctx.log().whenComplete().thenAccept(log -> {
                       assertThat(ctx.requestTimeoutMillis()).isEqualTo(1000);
                       assertThat(ctx.maxRequestLength()).isEqualTo(8192);
                       assertThat(ctx.verboseResponses()).isTrue();
                       assertThat(log.requestContentPreview()).isEqualTo("request content");
                       assertThat(log.responseContentPreview()).isEqualTo("response content");
 
                       propertyCheckLatch.countDown();
-                  }, RequestLogAvailability.COMPLETE);
+                  });
                   return delegate.serve(ctx, req);
               })
               .build((ctx, req) -> {

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java
Patch:
@@ -55,7 +55,7 @@
 import com.linecorp.armeria.common.grpc.protocol.Decompressor;
 import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;
 import com.linecorp.armeria.common.grpc.protocol.GrpcTrailersUtil;
-import com.linecorp.armeria.common.logging.RequestLogAvailability;
+import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.internal.grpc.ForwardingCompressor;
 import com.linecorp.armeria.internal.grpc.ForwardingDecompressor;
@@ -392,7 +392,7 @@ public void messageRead(DeframedMessage message) {
             throw new UncheckedIOException(e);
         }
 
-        if (!ctx.log().isAvailable(RequestLogAvailability.REQUEST_CONTENT)) {
+        if (!ctx.log().isAvailable(RequestLogProperty.REQUEST_CONTENT)) {
             ctx.logBuilder().requestContent(GrpcLogUtil.rpcRequest(method, request), null);
         }
 
@@ -419,7 +419,7 @@ private void invokeOnMessage(I request) {
     public void endOfStream() {
         setClientStreamClosed();
         if (!closeCalled) {
-            if (!ctx.log().isAvailable(RequestLogAvailability.REQUEST_CONTENT)) {
+            if (!ctx.log().isAvailable(RequestLogProperty.REQUEST_CONTENT)) {
                 ctx.logBuilder().requestContent(GrpcLogUtil.rpcRequest(method), null);
             }
 

File: retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/InvocationUtil.java
Patch:
@@ -18,6 +18,7 @@
 import javax.annotation.Nullable;
 
 import com.linecorp.armeria.common.logging.RequestLog;
+import com.linecorp.armeria.common.logging.RequestLogAccess;
 
 import io.netty.util.AttributeKey;
 import retrofit2.Invocation;
@@ -34,14 +35,14 @@ public final class InvocationUtil {
      * Retrieves a Retrofit {@link Invocation} associated with a {@link RequestLog}.
      */
     @Nullable
-    public static Invocation getInvocation(RequestLog log) {
+    public static Invocation getInvocation(RequestLogAccess log) {
         return log.context().attr(RETROFIT_INVOCATION);
     }
 
     /**
      * Put {@code Invocation} to {@code RequestLog} if not null.
      */
-    static void setInvocation(RequestLog log, @Nullable Invocation invocation) {
+    static void setInvocation(RequestLogAccess log, @Nullable Invocation invocation) {
         if (invocation == null) {
             return;
         }

File: thrift/src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTServletIntegrationTest.java
Patch:
@@ -67,7 +67,7 @@
 import com.linecorp.armeria.client.UnprocessedRequestException;
 import com.linecorp.armeria.common.ClosedSessionException;
 import com.linecorp.armeria.common.SessionProtocol;
-import com.linecorp.armeria.common.logging.RequestLogAvailability;
+import com.linecorp.armeria.common.logging.RequestLogProperty;
 import com.linecorp.armeria.common.thrift.ThriftProtocolFactories;
 import com.linecorp.armeria.service.test.thrift.main.HelloService;
 import com.linecorp.armeria.service.test.thrift.main.HelloService.Processor;
@@ -300,8 +300,8 @@ private static HelloService.Iface newSchemeCapturingClient(
 
         return Clients.builder(uri)
                       .rpcDecorator((delegate, ctx, req) -> {
-                          ctx.log().addListener(log -> sessionProtocol.set(log.sessionProtocol()),
-                                                RequestLogAvailability.REQUEST_START);
+                          ctx.log().whenAvailable(RequestLogProperty.REQUEST_START_TIME)
+                             .thenAccept(log -> sessionProtocol.set(log.sessionProtocol()));
                           return delegate.execute(ctx, req);
                       })
                       .build(HelloService.Iface.class);

File: thrift/src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTest.java
Patch:
@@ -66,7 +66,6 @@
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.logging.RequestLog;
-import com.linecorp.armeria.common.logging.RequestLogAvailability;
 import com.linecorp.armeria.common.thrift.ThriftCall;
 import com.linecorp.armeria.common.thrift.ThriftFuture;
 import com.linecorp.armeria.common.thrift.ThriftReply;
@@ -227,7 +226,7 @@ static void init() throws Exception {
         final ClientDecorationBuilder decoBuilder = ClientDecoration.builder();
         decoBuilder.addRpc((delegate, ctx, req) -> {
             if (recordMessageLogs) {
-                ctx.log().addListener(requestLogs::add, RequestLogAvailability.COMPLETE);
+                ctx.log().whenComplete().thenAccept(requestLogs::add);
             }
             return delegate.execute(ctx, req);
         });

File: thrift/src/test/java/com/linecorp/armeria/it/server/GracefulShutdownIntegrationTest.java
Patch:
@@ -70,7 +70,7 @@ protected void configure(ServerBuilder sb) throws Exception {
 
             final AccessLogWriter writer1 = new AccessLogWriter() {
                 @Override
-                public void log(RequestLog log) throws Exception {}
+                public void log(RequestLog log) {}
 
                 @Override
                 public CompletableFuture<Void> shutdown() {
@@ -80,7 +80,7 @@ public CompletableFuture<Void> shutdown() {
             };
             final AccessLogWriter writer2 = new AccessLogWriter() {
                 @Override
-                public void log(RequestLog log) throws Exception {}
+                public void log(RequestLog log) {}
 
                 @Override
                 public CompletableFuture<Void> shutdown() {

File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java
Patch:
@@ -549,6 +549,7 @@ ClientRequestContext newDerivedContext(RequestId id, @Nullable HttpRequest req,
     /**
      * Schedules the response timeout that is triggered at the specified time represented
      * as the number since the epoch ({@code 1970-01-01T00:00:00Z}).
+     * Note that the response will be timed out immediately if the specified time is before now.
      * The initial timeout is set from {@link ClientOption#RESPONSE_TIMEOUT_MILLIS}.
      *
      * <p>For example:
@@ -567,6 +568,7 @@ ClientRequestContext newDerivedContext(RequestId id, @Nullable HttpRequest req,
     /**
      * Schedules the response timeout that is triggered at the specified time represented
      * as the number of milliseconds since the epoch ({@code 1970-01-01T00:00:00Z}).
+     * Note that the response will be timed out immediately if the specified time is before now.
      * The initial timeout is set from {@link ClientOption#RESPONSE_TIMEOUT_MILLIS}.
      *
      * <p>For example:

File: core/src/main/java/com/linecorp/armeria/server/RoutingTrieBuilder.java
Patch:
@@ -363,7 +363,7 @@ void split(int pathSplitPos) {
         private void updatePath(String path) {
             requireNonNull(path, "path");
             checkArgument(this.path.charAt(0) == path.charAt(0),
-                          "Not acceptable path for update: " + path);
+                          "Not acceptable path for update: %s", path);
             this.path = path;
         }
 

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java
Patch:
@@ -448,6 +448,7 @@ default MediaType negotiatedProduceType() {
     /**
      * Schedules the request timeout that is triggered at the specified time represented
      * as the number since the epoch ({@code 1970-01-01T00:00:00Z}).
+     * Note that the request will be timed out immediately if the specified time is before now.
      * The initial timeout is set from {@link ServiceConfig#requestTimeoutMillis()}.
      *
      * <p>For example:
@@ -466,6 +467,7 @@ default MediaType negotiatedProduceType() {
     /**
      * Schedules the request timeout that is triggered at the specified time represented
      * as the number since the epoch ({@code 1970-01-01T00:00:00Z}).
+     * Note that the request will be timed out immediately if the specified time is before now.
      * The initial timeout is set from {@link ServiceConfig#requestTimeoutMillis()}.
      *
      * <p>For example:

File: core/src/main/java/com/linecorp/armeria/server/logging/AccessLogComponent.java
Patch:
@@ -253,8 +253,7 @@ static boolean isSupported(AccessLogType type) {
                         @Nullable String variable) {
             super(condition, addQuote);
             checkArgument(isSupported(requireNonNull(type, "type")),
-                          "Type '" + type + "' is not acceptable by " +
-                          CommonComponent.class.getName());
+                          "Type '%s' is not acceptable by %s", type, CommonComponent.class.getName());
             this.type = type;
             this.variable = variable;
         }

File: core/src/main/java/com/linecorp/armeria/server/logging/AccessLogFormats.java
Patch:
@@ -186,16 +186,16 @@ private static AccessLogComponent newAccessLogComponent(char token,
         checkArgument(type != null, "Unexpected token character: '%s'", token);
         if (type.variableRequirement() == VariableRequirement.YES) {
             checkArgument(variable != null,
-                          "Token " + type.token() + " requires a variable.");
+                          "Token %s requires a variable.", type.token());
         }
         if (type.isConditionAvailable()) {
             if (condBuilder != null) {
                 checkArgument(!condBuilder.isEmpty(),
-                              "Token " + type.token() + " has an invalid condition.");
+                              "Token %s has an invalid condition.", type.token());
             }
         } else {
             checkArgument(condBuilder == null,
-                          "Token " + type.token() + " does not support a condition.");
+                          "Token %s does not support a condition.", type.token());
         }
 
         if (TextComponent.isSupported(type)) {

File: core/src/test/java/com/linecorp/armeria/client/HttpClientResponseTimeoutHandlerTest.java
Patch:
@@ -30,7 +30,6 @@
 import org.junit.jupiter.params.provider.CsvSource;
 import org.junit.jupiter.params.provider.EnumSource;
 
-import com.linecorp.armeria.common.ClosedSessionException;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
@@ -94,7 +93,7 @@ void testResponseTimeoutHandler(SessionProtocol protocol, boolean useResponseTim
             assertThat(logHolder.get().requestCause()).isSameAs(reqCause);
             assertThatThrownBy(() -> response.aggregate().join())
                     .isInstanceOf(CompletionException.class)
-                    .hasCauseInstanceOf(ClosedSessionException.class);
+                    .hasCauseReference(reqCause);
         } else {
             assertThat(logHolder.get().requestCause()).isInstanceOf(ResponseTimeoutException.class);
             assertThatThrownBy(() -> response.aggregate().join())
@@ -124,7 +123,7 @@ void testResponseTimeoutHandlerRequestAbort(SessionProtocol protocol) {
             assertThat(logHolder.get().isAvailable(RequestLogAvailability.COMPLETE)).isTrue();
         });
         assertThatThrownBy(() -> response.aggregate().join()).isInstanceOf(CompletionException.class)
-                                                             .hasCauseInstanceOf(ClosedSessionException.class);
+                                                             .hasCauseReference(reqCause);
         assertThat(logHolder.get().requestCause()).isSameAs(reqCause);
         assertThat(logHolder.get().responseCause()).isSameAs(reqCause);
     }

File: spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaClientHttpConnector.java
Patch:
@@ -102,8 +102,8 @@ private ArmeriaClientHttpRequest createRequest(HttpMethod method, URI uri) {
         final String path = uri.getRawPath();
         final String query = uri.getRawQuery();
 
-        checkArgument(!Strings.isNullOrEmpty(authority), "URI is not absolute: " + uri);
-        checkArgument(!Strings.isNullOrEmpty(path), "path is undefined: " + uri);
+        checkArgument(!Strings.isNullOrEmpty(authority), "URI is not absolute: %s", uri);
+        checkArgument(!Strings.isNullOrEmpty(path), "path is undefined: %s", uri);
 
         final URI baseUri = URI.create(Strings.isNullOrEmpty(scheme) ? authority : scheme + "://" + authority);
         final WebClientBuilder builder = WebClient.builder(baseUri);

File: brave/src/test/java/com/linecorp/armeria/it/brave/BraveIntegrationTest.java
Patch:
@@ -64,7 +64,7 @@
 import com.linecorp.armeria.common.brave.HelloService;
 import com.linecorp.armeria.common.brave.HelloService.AsyncIface;
 import com.linecorp.armeria.common.brave.RequestContextCurrentTraceContext;
-import com.linecorp.armeria.common.thrift.ThriftCompletableFuture;
+import com.linecorp.armeria.common.thrift.ThriftFuture;
 import com.linecorp.armeria.common.util.ThreadFactories;
 import com.linecorp.armeria.server.AbstractHttpService;
 import com.linecorp.armeria.server.HttpService;
@@ -121,8 +121,8 @@ protected void configure(ServerBuilder sb) throws Exception {
 
             sb.service("/zip", decorate("service/zip", THttpService.of(
                     (AsyncIface) (name, resultHandler) -> {
-                        final ThriftCompletableFuture<String> f1 = new ThriftCompletableFuture<>();
-                        final ThriftCompletableFuture<String> f2 = new ThriftCompletableFuture<>();
+                        final ThriftFuture<String> f1 = new ThriftFuture<>();
+                        final ThriftFuture<String> f2 = new ThriftFuture<>();
                         quxClient.hello(name, f1);
                         quxClient.hello(name, f2);
                         CompletableFuture.allOf(f1, f2).whenCompleteAsync((aVoid, throwable) -> {

File: core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessage.java
Patch:
@@ -33,8 +33,8 @@
 import com.google.common.base.MoreObjects;
 import com.spotify.futures.CompletableFutures;
 
+import com.linecorp.armeria.common.util.EventLoopCheckingFuture;
 import com.linecorp.armeria.internal.PooledObjects;
-import com.linecorp.armeria.internal.eventloop.EventLoopCheckingCompletableFuture;
 
 import io.netty.util.ReferenceCountUtil;
 import io.netty.util.concurrent.EventExecutor;
@@ -45,7 +45,7 @@ abstract class AbstractStreamMessage<T> implements StreamMessage<T> {
     static final CloseEvent CANCELLED_CLOSE = new CloseEvent(CancelledSubscriptionException.INSTANCE);
     static final CloseEvent ABORTED_CLOSE = new CloseEvent(AbortedStreamException.INSTANCE);
 
-    private final CompletableFuture<Void> completionFuture = new EventLoopCheckingCompletableFuture<>();
+    private final CompletableFuture<Void> completionFuture = new EventLoopCheckingFuture<>();
 
     @Override
     public final void subscribe(Subscriber<? super T> subscriber, EventExecutor executor) {

File: core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessageDuplicator.java
Patch:
@@ -46,8 +46,8 @@
 
 import com.linecorp.armeria.common.CommonPools;
 import com.linecorp.armeria.common.RequestContext;
+import com.linecorp.armeria.common.util.EventLoopCheckingFuture;
 import com.linecorp.armeria.common.util.SafeCloseable;
-import com.linecorp.armeria.internal.eventloop.EventLoopCheckingCompletableFuture;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufHolder;
@@ -504,7 +504,7 @@ private static class ChildStreamMessage<T> implements StreamMessage<T> {
         @SuppressWarnings("unused")
         private volatile DownstreamSubscription<T> subscription;
 
-        private final CompletableFuture<Void> completionFuture = new EventLoopCheckingCompletableFuture<>();
+        private final CompletableFuture<Void> completionFuture = new EventLoopCheckingFuture<>();
 
         ChildStreamMessage(AbstractStreamMessageDuplicator<T, ?> parent,
                            StreamMessageProcessor<T> processor, boolean lastStream) {

File: core/src/main/java/com/linecorp/armeria/common/stream/PublisherBasedStreamMessage.java
Patch:
@@ -33,7 +33,7 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.spotify.futures.CompletableFutures;
 
-import com.linecorp.armeria.internal.eventloop.EventLoopCheckingCompletableFuture;
+import com.linecorp.armeria.common.util.EventLoopCheckingFuture;
 
 import io.netty.util.concurrent.EventExecutor;
 import io.netty.util.concurrent.ImmediateEventExecutor;
@@ -51,7 +51,7 @@ public class PublisherBasedStreamMessage<T> implements StreamMessage<T> {
             PublisherBasedStreamMessage.class, AbortableSubscriber.class, "subscriber");
 
     private final Publisher<? extends T> publisher;
-    private final CompletableFuture<Void> completionFuture = new EventLoopCheckingCompletableFuture<>();
+    private final CompletableFuture<Void> completionFuture = new EventLoopCheckingFuture<>();
     @Nullable
     @SuppressWarnings("unused") // Updated only via subscriberUpdater.
     private volatile AbortableSubscriber subscriber;

File: core/src/main/java/com/linecorp/armeria/common/stream/StreamMessageDrainer.java
Patch:
@@ -27,13 +27,13 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableList.Builder;
 
-import com.linecorp.armeria.internal.eventloop.EventLoopCheckingCompletableFuture;
+import com.linecorp.armeria.common.util.EventLoopCheckingFuture;
 
 import io.netty.util.ReferenceCountUtil;
 
 final class StreamMessageDrainer<T> implements Subscriber<T> {
 
-    private final CompletableFuture<List<T>> future = new EventLoopCheckingCompletableFuture<>();
+    private final CompletableFuture<List<T>> future = new EventLoopCheckingFuture<>();
 
     @Nullable
     private Builder<T> drained = ImmutableList.builder();

File: core/src/main/java/com/linecorp/armeria/internal/AbstractRequestContextAwareFuture.java
Patch:
@@ -39,14 +39,14 @@
  * A base class for {@link CompletableFuture} which pushing {@link RequestContext} into the thread-local
  * when executes callbacks.
  */
-public abstract class AbstractRequestContextAwareCompletableFuture<T> extends CompletableFuture<T> {
+public abstract class AbstractRequestContextAwareFuture<T> extends CompletableFuture<T> {
 
     private static final Logger logger =
-            LoggerFactory.getLogger(AbstractRequestContextAwareCompletableFuture.class);
+            LoggerFactory.getLogger(AbstractRequestContextAwareFuture.class);
 
     private final RequestContext ctx;
 
-    protected AbstractRequestContextAwareCompletableFuture(RequestContext ctx) {
+    protected AbstractRequestContextAwareFuture(RequestContext ctx) {
         this.ctx = ctx;
     }
 

File: core/src/main/java/com/linecorp/armeria/internal/JavaVersionSpecific.java
Patch:
@@ -66,6 +66,6 @@ public long currentTimeMicros() {
      * Returns a {@link CompletableFuture} which executes all callbacks with the {@link RequestContext}.
      */
     public <T> CompletableFuture<T> newRequestContextAwareFuture(RequestContext ctx) {
-        return new RequestContextAwareCompletableFuture<>(requireNonNull(ctx, "ctx"));
+        return new RequestContextAwareFuture<>(requireNonNull(ctx, "ctx"));
     }
 }

File: core/src/main/java/com/linecorp/armeria/internal/RequestContextAwareFuture.java
Patch:
@@ -28,9 +28,9 @@
 
 import com.linecorp.armeria.common.RequestContext;
 
-final class RequestContextAwareCompletableFuture<T> extends AbstractRequestContextAwareCompletableFuture<T> {
+final class RequestContextAwareFuture<T> extends AbstractRequestContextAwareFuture<T> {
 
-    RequestContextAwareCompletableFuture(RequestContext requestContext) {
+    RequestContextAwareFuture(RequestContext requestContext) {
         super(requestContext);
     }
 

File: core/src/main/java/com/linecorp/armeria/server/file/StreamingHttpFile.java
Patch:
@@ -39,7 +39,7 @@
 import com.linecorp.armeria.common.HttpResponseWriter;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.ResponseHeaders;
-import com.linecorp.armeria.internal.eventloop.EventLoopCheckingCompletableFuture;
+import com.linecorp.armeria.common.util.EventLoopCheckingFuture;
 import com.linecorp.armeria.unsafe.ByteBufHttpData;
 
 import io.netty.buffer.ByteBuf;
@@ -192,7 +192,7 @@ private CompletableFuture<AggregatedHttpFile> doAggregate(Executor fileReadExecu
 
         boolean submitted = false;
         try {
-            final CompletableFuture<AggregatedHttpFile> future = new EventLoopCheckingCompletableFuture<>();
+            final CompletableFuture<AggregatedHttpFile> future = new EventLoopCheckingFuture<>();
             fileReadExecutor.execute(() -> {
                 final int length = (int) attrs.length();
                 final byte[] array;

File: core/src/main/java9/com/linecorp/armeria/internal/Java9VersionSpecific.java
Patch:
@@ -44,6 +44,6 @@ public final long currentTimeMicros() {
 
     @Override
     public final <T> CompletableFuture<T> newRequestContextAwareFuture(RequestContext ctx) {
-        return new Java9RequestContextAwareCompletableFuture<>(requireNonNull(ctx, "ctx"));
+        return new Java9RequestContextAwareFuture<>(requireNonNull(ctx, "ctx"));
     }
 }

File: core/src/test/java/com/linecorp/armeria/internal/RequestContextAwareFutureTest.java
Patch:
@@ -43,7 +43,7 @@
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.Appender;
 
-class RequestContextAwareCompletableFutureTest {
+class RequestContextAwareFutureTest {
 
     // TODO(minwoox) Make an extesion which a user can easily check the logs.
     @Mock

File: core/src/test/java9/com/linecorp/armeria/internal/Java9RequestContextAwareFutureTest.java
Patch:
@@ -58,7 +58,7 @@
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.Appender;
 
-class Java9RequestContextAwareCompletableFutureTest {
+class Java9RequestContextAwareFutureTest {
 
     // TODO(minwoox) Make an extesion which a user can easily check the logs.
     @Mock

File: thrift/src/main/java/com/linecorp/armeria/common/thrift/ThriftCompletableFuture.java
Patch:
@@ -23,7 +23,10 @@
 /**
  * A {@link CompletableFuture} that can be passed in as an {@link AsyncMethodCallback}
  * when making an asynchronous client-side Thrift RPC.
+ *
+ * @deprecated Use {@link ThriftFuture}.
  */
+@Deprecated
 public class ThriftCompletableFuture<T> extends CompletableFuture<T> implements AsyncMethodCallback<T> {
     @Override
     public void onComplete(T t) {

File: thrift/src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTest.java
Patch:
@@ -68,7 +68,7 @@
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogAvailability;
 import com.linecorp.armeria.common.thrift.ThriftCall;
-import com.linecorp.armeria.common.thrift.ThriftCompletableFuture;
+import com.linecorp.armeria.common.thrift.ThriftFuture;
 import com.linecorp.armeria.common.thrift.ThriftReply;
 import com.linecorp.armeria.common.thrift.ThriftSerializationFormats;
 import com.linecorp.armeria.common.util.Exceptions;
@@ -339,7 +339,7 @@ void contextCaptorAsync(
                            .build(Handlers.HELLO.asyncIface());
 
             try (ClientRequestContextCaptor ctxCaptor = Clients.newContextCaptor()) {
-                client.hello("kukuman", new ThriftCompletableFuture<>());
+                client.hello("kukuman", new ThriftFuture<>());
                 final ClientRequestContext ctx = ctxCaptor.get();
                 final RpcRequest rpcReq = ctx.rpcRequest();
                 assertThat(rpcReq).isNotNull();

File: core/src/main/java/com/linecorp/armeria/client/DecodedHttpResponse.java
Patch:
@@ -46,7 +46,7 @@ long writtenBytes() {
     }
 
     @Override
-    protected EventExecutor defaultSubscriberExecutor() {
+    public EventExecutor defaultSubscriberExecutor() {
         return eventLoop;
     }
 

File: core/src/main/java/com/linecorp/armeria/common/DeferredHttpResponse.java
Patch:
@@ -61,7 +61,7 @@ public void delegate(HttpResponse delegate) {
     }
 
     @Override
-    protected EventExecutor defaultSubscriberExecutor() {
+    public EventExecutor defaultSubscriberExecutor() {
         if (executor != null) {
             return executor;
         }

File: core/src/main/java/com/linecorp/armeria/server/DecodedHttpRequest.java
Patch:
@@ -94,7 +94,7 @@ void increaseTransferredBytes(long delta) {
     }
 
     @Override
-    protected EventLoop defaultSubscriberExecutor() {
+    public EventLoop defaultSubscriberExecutor() {
         return eventLoop;
     }
 

File: core/src/main/java/com/linecorp/armeria/client/ClientFactory.java
Patch:
@@ -312,7 +312,7 @@ default Scheme validateScheme(Scheme scheme) {
      */
     default ClientBuilderParams validateParams(ClientBuilderParams params) {
         requireNonNull(params, "params");
-        if (params.factory() != this) {
+        if (params.options().factory() != this) {
             validateScheme(params.scheme());
         } else {
             // Validated already, unless `ClientBuilderParams` has a bug.

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HttpHealthChecker.java
Patch:
@@ -27,7 +27,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.linecorp.armeria.client.ClientOptions;
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.ClientRequestContextCaptor;
 import com.linecorp.armeria.client.Clients;
@@ -75,8 +74,7 @@ final class HttpHealthChecker implements AsyncCloseable {
         final Endpoint endpoint = ctx.endpoint();
         this.ctx = ctx;
         webClient = WebClient.builder(ctx.protocol(), endpoint)
-                             .factory(ctx.clientFactory())
-                             .options(ctx.clientConfigurator().apply(ClientOptions.builder()).build())
+                             .options(ctx.clientOptions())
                              .decorator(ResponseTimeoutUpdater::new)
                              .build();
         authority = endpoint.authority();

File: core/src/test/java/com/linecorp/armeria/client/DefaultWebClientTest.java
Patch:
@@ -89,7 +89,7 @@ void testWithoutRequestParamsUndefinedEndPoint() throws Exception {
     private static DefaultWebClient createDefaultWebClient(
             String clientUriPath, HttpClient mockClientDelegate) throws URISyntaxException {
         final ClientBuilderParams clientBuilderParams = ClientBuilderParams.of(
-                ClientFactory.ofDefault(), new URI(clientUriPath), WebClient.class, ClientOptions.of());
+                new URI(clientUriPath), WebClient.class, ClientOptions.of());
         return new DefaultWebClient(
                 clientBuilderParams, mockClientDelegate, NoopMeterRegistry.get());
     }

File: core/src/test/java/com/linecorp/armeria/client/HttpClientUnwrapTest.java
Patch:
@@ -49,7 +49,7 @@ void test() {
 
         assertThat(client.as(String.class)).isNull();
 
-        final ClientFactory factory = client.factory();
+        final ClientFactory factory = client.options().factory();
 
         assertThat(factory.unwrap(client, WebClient.class)).isSameAs(client);
 

File: examples/annotated-http-service/src/test/java/example/armeria/server/annotated/AnnotatedServiceTest.java
Patch:
@@ -37,7 +37,7 @@ static void afterClass() {
             server.stop().join();
         }
         if (client != null) {
-            client.factory().close();
+            client.options().factory().close();
         }
     }
 

File: examples/server-sent-events/src/test/java/example/armeria/server/sse/MainTest.java
Patch:
@@ -42,7 +42,7 @@ static void afterClass() {
             server.stop().join();
         }
         if (client != null) {
-            client.factory().close();
+            client.options().factory().close();
         }
     }
 

File: examples/static-files/src/test/java/example/armeria/server/files/MainTest.java
Patch:
@@ -30,7 +30,7 @@ static void afterClass() {
             server.stop().join();
         }
         if (client != null) {
-            client.factory().close();
+            client.options().factory().close();
         }
     }
 

File: retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaRetrofitBuilder.java
Patch:
@@ -72,12 +72,10 @@ public final class ArmeriaRetrofitBuilder {
         // Re-create the base client without a path, because Retrofit will always provide a full path.
         baseWebClient = WebClient.builder(protocol,
                                           webClient.endpointGroup())
-                                 .factory(webClient.factory())
                                  .options(webClient.options())
                                  .build();
 
         nonBaseClientFactory = (p, url) -> WebClient.builder(p, Endpoint.of(url.host(), url.port()))
-                                                    .factory(baseWebClient.factory())
                                                     .options(baseWebClient.options())
                                                     .build();
     }

File: thrift/src/main/java/com/linecorp/armeria/client/thrift/THttpClientFactory.java
Patch:
@@ -79,8 +79,7 @@ public Object newClient(ClientBuilderParams params) {
 
         // Create a THttpClient without path.
         final ClientBuilderParams delegateParams =
-                ClientBuilderParams.of(params.factory(),
-                                       params.scheme(),
+                ClientBuilderParams.of(params.scheme(),
                                        params.endpointGroup(),
                                        "/", THttpClient.class,
                                        options);

File: core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java
Patch:
@@ -518,7 +518,7 @@ public void setResponseTimeoutAfter(Duration responseTimeout) {
     public void setResponseTimeoutAtMillis(long responseTimeoutAtMillis) {
         checkArgument(responseTimeoutAtMillis >= 0,
                       "responseTimeoutAtMillis: " + responseTimeoutAtMillis + " (expected: >= 0)");
-        final long nowMillis = Instant.now().toEpochMilli();
+        final long nowMillis = System.currentTimeMillis();
         final long responseTimeoutAfter = responseTimeoutAtMillis - nowMillis;
         checkArgument(responseTimeoutAfter > 0,
                       "responseTimeoutAtMillis: %s (expected: > 'now=%s')", responseTimeoutAtMillis, nowMillis);

File: core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroupAuthorityTest.java
Patch:
@@ -30,7 +30,7 @@
 import com.linecorp.armeria.client.logging.LoggingClient;
 import com.linecorp.armeria.common.RequestHeaders;
 
-class HttpHealthCheckedEndpointGroupAuthorityTest {
+class HealthCheckedEndpointGroupAuthorityTest {
 
     private static final String HEALTH_CHECK_PATH = "/healthcheck";
 

File: core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroupIntegrationTest.java
Patch:
@@ -43,7 +43,7 @@
 
 import io.micrometer.core.instrument.MeterRegistry;
 
-class HttpHealthCheckedEndpointGroupTest {
+class HealthCheckedEndpointGroupIntegrationTest {
 
     private static final String HEALTH_CHECK_PATH = "/healthcheck";
 

File: core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroupLongPollingTest.java
Patch:
@@ -46,7 +46,7 @@
 import com.linecorp.armeria.server.healthcheck.SettableHealthChecker;
 import com.linecorp.armeria.testing.junit.server.ServerExtension;
 
-class HttpHealthCheckedEndpointGroupLongPollingTest {
+class HealthCheckedEndpointGroupLongPollingTest {
 
     private static final Duration RETRY_INTERVAL = Duration.ofSeconds(3);
     private static final String HEALTH_CHECK_PATH = "/healthcheck";
@@ -133,7 +133,7 @@ void longPollingDisabledOnStop() throws Exception {
                 }
 
                 assertThat(stoppingResponseHeaders.status()).isEqualTo(HttpStatus.SERVICE_UNAVAILABLE);
-                assertThat(stoppingResponseHeaders.getLong("armeria-lphc", -1)).isEqualTo(0);
+                assertThat(stoppingResponseHeaders.getLong("armeria-lphc")).isNull();
                 break;
             }
 

File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContextWrapper.java
Patch:
@@ -23,7 +23,7 @@
 
 import javax.annotation.Nullable;
 
-import com.linecorp.armeria.client.endpoint.EndpointSelector;
+import com.linecorp.armeria.client.endpoint.EndpointGroup;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.RequestContextWrapper;
@@ -69,8 +69,8 @@ public ClientRequestContext newDerivedContext(RequestId id, @Nullable HttpReques
     }
 
     @Override
-    public EndpointSelector endpointSelector() {
-        return delegate().endpointSelector();
+    public EndpointGroup endpointGroup() {
+        return delegate().endpointGroup();
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/client/DefaultEventLoopScheduler.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.linecorp.armeria.client;
 
-import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.collect.ImmutableList.toImmutableList;
 import static java.util.Objects.requireNonNull;
 
@@ -114,7 +113,6 @@ int acquisitionStartIndex(int need) {
     @Override
     public ReleasableHolder<EventLoop> acquire(Endpoint endpoint, SessionProtocol sessionProtocol) {
         requireNonNull(endpoint, "endpoint");
-        checkArgument(!endpoint.isGroup(), "endpoint must be a host: %s", endpoint);
         requireNonNull(sessionProtocol, "sessionProtocol");
         final AbstractEventLoopState state = state(endpoint, sessionProtocol);
         final AbstractEventLoopEntry acquired = state.acquire();

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/KeyedCircuitBreakerMapping.java
Patch:
@@ -89,8 +89,6 @@ public interface KeySelector<K> {
                     final Endpoint endpoint = ctx.endpoint();
                     if (endpoint == null) {
                         return "UNKNOWN";
-                    } else if (endpoint.isGroup()) {
-                        return endpoint.authority();
                     } else {
                         final String ipAddr = endpoint.ipAddr();
                         if (ipAddr == null || endpoint.isIpAddrOnly()) {

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsAddressEndpointGroupBuilder.java
Patch:
@@ -69,7 +69,7 @@ DnsAddressEndpointGroupBuilder resolvedAddressTypes(ResolvedAddressTypes resolve
      * Returns a newly created {@link DnsAddressEndpointGroup}.
      */
     public DnsAddressEndpointGroup build() {
-        return new DnsAddressEndpointGroup(eventLoop(), minTtl(), maxTtl(),
+        return new DnsAddressEndpointGroup(selectionStrategy(), eventLoop(), minTtl(), maxTtl(),
                                            serverAddressStreamProvider(), backoff(),
                                            resolvedAddressTypes, hostname(), port);
     }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsServiceEndpointGroupBuilder.java
Patch:
@@ -40,8 +40,7 @@ public DnsServiceEndpointGroupBuilder(String hostname) {
      * Returns a newly created {@link DnsServiceEndpointGroup}.
      */
     public DnsServiceEndpointGroup build() {
-        return new DnsServiceEndpointGroup(eventLoop(), minTtl(), maxTtl(),
-                                           serverAddressStreamProvider(),
-                                           backoff(), hostname());
+        return new DnsServiceEndpointGroup(selectionStrategy(), eventLoop(), minTtl(), maxTtl(),
+                                           serverAddressStreamProvider(), backoff(), hostname());
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsTextEndpointGroupBuilder.java
Patch:
@@ -50,8 +50,7 @@ public DnsTextEndpointGroupBuilder(String hostname, Function<byte[], Endpoint> m
      * Returns a newly created {@link DnsTextEndpointGroup}.
      */
     public DnsTextEndpointGroup build() {
-        return new DnsTextEndpointGroup(eventLoop(), minTtl(), maxTtl(),
-                                        serverAddressStreamProvider(),
-                                        backoff(), hostname(), mapping);
+        return new DnsTextEndpointGroup(selectionStrategy(), eventLoop(), minTtl(), maxTtl(),
+                                        serverAddressStreamProvider(), backoff(), hostname(), mapping);
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/package-info.java
Patch:
@@ -19,7 +19,6 @@
  *
  * <h2>Starting points</h2>
  * <ul>
- *   <li>{@link com.linecorp.armeria.client.endpoint.EndpointGroupRegistry}</li>
  *   <li>{@link com.linecorp.armeria.client.endpoint.EndpointGroup}</li>
  * </ul>
  */

File: core/src/main/java/com/linecorp/armeria/common/RequestHeadersBuilder.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.linecorp.armeria.common;
 
-import static com.google.common.base.Preconditions.checkArgument;
 import static java.util.Objects.requireNonNull;
 
 import java.util.Map.Entry;
@@ -88,7 +87,6 @@ default RequestHeadersBuilder scheme(SessionProtocol sessionProtocol) {
      */
     default RequestHeadersBuilder authority(Endpoint endpoint) {
         requireNonNull(endpoint, "endpoint");
-        checkArgument(!endpoint.isGroup(), "endpoint: %s (expected: a host endpoint)", endpoint);
         return authority(endpoint.authority());
     }
 

File: core/src/main/java/com/linecorp/armeria/common/logging/RequestContextExporter.java
Patch:
@@ -384,8 +384,6 @@ private static void exportAuthority(Map<String, String> out, RequestContext ctx,
             final Endpoint endpoint = cCtx.endpoint();
             if (endpoint == null) {
                 authority = "UNKNOWN";
-            } else if (endpoint.isGroup()) {
-                authority = endpoint.authority();
             } else {
                 final int defaultPort = cCtx.sessionProtocol().defaultPort();
                 final int port = endpoint.port(defaultPort);

File: core/src/main/java/com/linecorp/armeria/internal/RouteUtil.java
Patch:
@@ -52,7 +52,7 @@ public final class RouteUtil {
     public static final String ROOT_LOGGER_NAME = "__ROOT__";
 
     /**
-     * Ensures that the specified {@code path} is an absolute path.
+     * Ensures that the specified {@code path} is an absolute path that starts with {@code "/"}.
      *
      * @return {@code path}
      *
@@ -62,7 +62,8 @@ public final class RouteUtil {
     public static String ensureAbsolutePath(String path, String paramName) {
         requireNonNull(path, paramName);
         if (path.isEmpty() || path.charAt(0) != '/') {
-            throw new IllegalArgumentException(paramName + ": " + path + " (expected: an absolute path)");
+            throw new IllegalArgumentException(paramName + ": " + path +
+                                               " (expected: an absolute path starting with '/')");
         }
         return path;
     }

File: core/src/main/java/com/linecorp/armeria/server/RouteBuilder.java
Patch:
@@ -525,7 +525,8 @@ private static PathMapping getPathMapping(String pathPattern) {
         }
         if (!pathPattern.startsWith("/")) {
             throw new IllegalArgumentException(
-                    "pathPattern: " + pathPattern + " (not an absolute path or a unknown pattern type)");
+                    "pathPattern: " + pathPattern +
+                    " (not an absolute path starting with '/' or a unknown pattern type)");
         }
         if (!pathPattern.contains("{") && !pathPattern.contains(":")) {
             return new ExactPathMapping(pathPattern);

File: core/src/main/java/com/linecorp/armeria/server/file/HttpVfs.java
Patch:
@@ -100,7 +100,7 @@ static HttpVfs ofClassPath(ClassLoader classLoader, String rootDir) {
     /**
      * Finds the file at the specified {@code path}.
      *
-     * @param path an absolute path whose component separator is {@code '/'}
+     * @param path an absolute path that starts with {@code '/'}, whose component separator is {@code '/'}
      * @param clock the {@link Clock} which provides the current date and time
      * @param contentEncoding the desired {@code 'content-encoding'} header value of the file.
      *                        {@code null} to omit the header.
@@ -113,7 +113,7 @@ static HttpVfs ofClassPath(ClassLoader classLoader, String rootDir) {
     /**
      * Returns whether the file at the specified {@code path} is a directory.
      *
-     * @param path an absolute path whose component separator is {@code '/'}.
+     * @param path an absolute path that starts with {@code '/'}, whose component separator is {@code '/'}
      * @return {@code true} if the file is a directory. {@code false} if the directory does not exist or
      *         the file listing is not available.
      */
@@ -122,7 +122,7 @@ static HttpVfs ofClassPath(ClassLoader classLoader, String rootDir) {
     /**
      * Lists the files at the specified directory {@code path} non-recursively.
      *
-     * @param path an absolute path whose component separator is {@code '/'}.
+     * @param path an absolute path that starts with {@code '/'}, whose component separator is {@code '/'}
      * @return the list of the file names. If the file is a directory, the file name will end with
      *         {@code '/'}. If the directory does not exist or the file listing is not available,
      *         an empty {@link List} is returned.

File: core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/AllHealthCheckStrategyTest.java
Patch:
@@ -36,7 +36,7 @@ private static List<Endpoint> createCandidates(int size) {
         final Random random = new Random();
 
         return IntStream.range(0, size)
-                        .mapToObj(i -> Endpoint.ofGroup("dummy" + random.nextInt()))
+                        .mapToObj(i -> Endpoint.of("dummy" + random.nextInt()))
                         .collect(Collectors.toList());
     }
 
@@ -87,7 +87,7 @@ void updateHealthWhenEndpointHealthyAndUnhealthy() {
     @Test
     void updateHealthByDisappearedCandidate() {
         strategy.updateCandidates(candidates);
-        final Endpoint disappearedCandidate = Endpoint.ofGroup("dummy");
+        final Endpoint disappearedCandidate = Endpoint.of("dummy");
 
         boolean actUpdateRes = strategy.updateHealth(disappearedCandidate, 0);
         assertThat(actUpdateRes).isTrue();

File: testing/common/src/main/java/com/linecorp/armeria/testing/internal/ServerRuleDelegate.java
Patch:
@@ -311,7 +311,8 @@ public InetSocketAddress httpsSocketAddress() {
 
     private static void validatePath(String path) {
         if (!requireNonNull(path, "path").startsWith("/")) {
-            throw new IllegalArgumentException("path: " + path + " (expected: an absolute path)");
+            throw new IllegalArgumentException("path: " + path +
+                                               " (expected: an absolute path starting with '/')");
         }
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptions.java
Patch:
@@ -29,6 +29,7 @@
 import javax.annotation.Nullable;
 
 import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
 
@@ -44,7 +45,6 @@
 import io.netty.channel.epoll.EpollChannelOption;
 import io.netty.handler.ssl.SslContextBuilder;
 import io.netty.resolver.AddressResolverGroup;
-import it.unimi.dsi.fastutil.objects.Object2ObjectArrayMap;
 
 /**
  * A set of {@link ClientFactoryOption}s and their respective values.
@@ -78,7 +78,7 @@ public final class ClientFactoryOptions extends AbstractOptions {
             ClientFactoryOption.WORKER_GROUP.newValue(DEFAULT_WORKER_GROUP),
             ClientFactoryOption.SHUTDOWN_WORKER_GROUP_ON_CLOSE.newValue(false),
             ClientFactoryOption.EVENT_LOOP_SCHEDULER_FACTORY.newValue(DEFAULT_EVENT_LOOP_SCHEDULER_FACTORY),
-            ClientFactoryOption.CHANNEL_OPTIONS.newValue(new Object2ObjectArrayMap<>()),
+            ClientFactoryOption.CHANNEL_OPTIONS.newValue(ImmutableMap.of()),
             ClientFactoryOption.TLS_CUSTOMIZER.newValue(DEFAULT_TLS_CUSTOMIZER),
             ClientFactoryOption.ADDRESS_RESOLVER_GROUP_FACTORY.newValue(DEFAULT_ADDRESS_RESOLVER_GROUP_FACTORY),
             ClientFactoryOption.HTTP2_INITIAL_CONNECTION_WINDOW_SIZE.newValue(

File: thrift/src/main/java/com/linecorp/armeria/client/thrift/THttpClientDelegate.java
Patch:
@@ -146,7 +146,7 @@ public RpcResponse execute(ClientRequestContext ctx, RpcRequest call) throws Exc
             final CompletableFuture<AggregatedHttpResponse> future =
                     delegate().execute(ctx, httpReq).aggregateWithPooledObjects(ctx.eventLoop(), ctx.alloc());
 
-            future.handleAsync((res, cause) -> {
+            future.handle((res, cause) -> {
                 if (cause != null) {
                     handlePreDecodeException(ctx, reply, func, Exceptions.peel(cause));
                     return null;
@@ -171,7 +171,7 @@ public RpcResponse execute(ClientRequestContext ctx, RpcRequest call) throws Exc
                 }
 
                 return null;
-            }, ctx.contextAwareExecutor()).exceptionally(CompletionActions::log);
+            }).exceptionally(CompletionActions::log);
         } catch (Throwable cause) {
             handlePreDecodeException(ctx, reply, func, cause);
         }

File: core/src/main/java/com/linecorp/armeria/internal/RequestContextAwareCompletableFuture.java
Patch:
@@ -28,7 +28,7 @@
 
 import com.linecorp.armeria.common.RequestContext;
 
-class RequestContextAwareCompletableFuture<T> extends AbstractRequestContextAwareCompletableFuture<T> {
+final class RequestContextAwareCompletableFuture<T> extends AbstractRequestContextAwareCompletableFuture<T> {
 
     RequestContextAwareCompletableFuture(RequestContext requestContext) {
         super(requestContext);

File: core/src/main/java9/com/linecorp/armeria/internal/Java9RequestContextAwareCompletableFuture.java
Patch:
@@ -29,7 +29,8 @@
 
 import com.linecorp.armeria.common.RequestContext;
 
-class Java9RequestContextAwareCompletableFuture<T> extends AbstractRequestContextAwareCompletableFuture<T> {
+final class Java9RequestContextAwareCompletableFuture<T>
+        extends AbstractRequestContextAwareCompletableFuture<T> {
 
     Java9RequestContextAwareCompletableFuture(RequestContext requestContext) {
         super(requestContext);

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaClientCall.java
Patch:
@@ -212,6 +212,7 @@ public void start(Listener<O> responseListener, Metadata metadata) {
 
         res.subscribe(responseReader, ctx.eventLoop(), WITH_POOLED_OBJECTS);
         res.completionFuture().handleAsync(responseReader, ctx.eventLoop());
+        responseListener.onReady();
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java
Patch:
@@ -391,7 +391,7 @@ ClientRequestContext newDerivedContext(RequestId id, @Nullable HttpRequest req,
     /**
      * Returns the remote {@link Endpoint} of the current {@link Request}.
      *
-     * @return the remote {@link Endpoint}. {@code null} if the {@link Request} has failed
+     * @return the remote {@link Endpoint}, or {@code null} if the {@link Request} has failed
      *         because its remote {@link Endpoint} couldn't be determined.
      */
     @Nullable

File: core/src/main/java/com/linecorp/armeria/client/DecoratingClientFactory.java
Patch:
@@ -19,7 +19,6 @@
 import static java.util.Objects.requireNonNull;
 
 import java.net.URI;
-import java.util.Optional;
 import java.util.Set;
 import java.util.function.Supplier;
 
@@ -101,12 +100,12 @@ public <T> T newClient(Scheme scheme, Endpoint endpoint, @Nullable String path,
     }
 
     @Override
-    public <T> Optional<ClientBuilderParams> clientBuilderParams(T client) {
+    public <T> ClientBuilderParams clientBuilderParams(T client) {
         return delegate().clientBuilderParams(client);
     }
 
     @Override
-    public <T> Optional<T> unwrap(Object client, Class<T> type) {
+    public <T> T unwrap(Object client, Class<T> type) {
         return delegate().unwrap(client, type);
     }
 

File: core/src/main/java/com/linecorp/armeria/client/retry/Backoff.java
Patch:
@@ -19,7 +19,6 @@
 import static com.linecorp.armeria.client.retry.DefaultBackoffHolder.defaultBackoff;
 import static com.linecorp.armeria.client.retry.FixedBackoff.NO_DELAY;
 
-import java.util.Optional;
 import java.util.Random;
 import java.util.concurrent.ThreadLocalRandom;
 import java.util.function.Supplier;
@@ -146,12 +145,12 @@ static Backoff of(String specification) {
      *
      * @param type the type of the desired {@link Backoff}
      * @return the {@link Backoff} which is an instance of {@code type} if this {@link Backoff}
-     *         decorated such a {@link Backoff}. {@link Optional#empty()} otherwise.
+     *         decorated such a {@link Backoff}, or {@code null} otherwise.
      *
      * @see Unwrappable
      */
     @Override
-    default <T> Optional<T> as(Class<T> type) {
+    default <T> T as(Class<T> type) {
         return Unwrappable.super.as(type);
     }
 

File: core/src/main/java/com/linecorp/armeria/common/AggregatedHttpMessage.java
Patch:
@@ -75,7 +75,7 @@ default String contentAscii() {
 
     /**
      * Returns the value of the {@code 'content-type'} header.
-     * @return the valid header value if present. {@code null} otherwise.
+     * @return the valid header value if present, or {@code null} otherwise.
      */
     @Nullable
     default MediaType contentType() {

File: core/src/main/java/com/linecorp/armeria/common/Cookie.java
Patch:
@@ -196,7 +196,7 @@ static String toCookieHeader(boolean strict, Collection<? extends Cookie> cookie
      * Decodes the specified {@code "Set-Cookie"} header value into a {@link Cookie}.
      *
      * @param setCookieHeader the {@code "Set-Cookie"} header value.
-     * @return the decoded {@link Cookie} if decoded successfully. {@code null} otherwise.
+     * @return the decoded {@link Cookie} if decoded successfully, or {@code null} otherwise.
      */
     @Nullable
     static Cookie fromSetCookieHeader(String setCookieHeader) {
@@ -208,7 +208,7 @@ static Cookie fromSetCookieHeader(String setCookieHeader) {
      *
      * @param strict whether to validate the cookie names and values are in the valid scope defined in RFC 6265.
      * @param setCookieHeader the {@code "Set-Cookie"} header value.
-     * @return the decoded {@link Cookie} if decoded successfully. {@code null} otherwise.
+     * @return the decoded {@link Cookie} if decoded successfully, or {@code null} otherwise.
      */
     @Nullable
     static Cookie fromSetCookieHeader(boolean strict, String setCookieHeader) {

File: core/src/main/java/com/linecorp/armeria/common/HttpHeaderGetters.java
Patch:
@@ -44,7 +44,7 @@ interface HttpHeaderGetters extends StringMultimapGetters</* IN_NAME */ CharSequ
     /**
      * Returns the parsed {@code "content-type"} header.
      *
-     * @return the parsed {@link MediaType} if present and valid. {@code null} otherwise.
+     * @return the parsed {@link MediaType} if present and valid, or {@code null} otherwise.
      */
     @Nullable
     MediaType contentType();
@@ -54,7 +54,7 @@ interface HttpHeaderGetters extends StringMultimapGetters</* IN_NAME */ CharSequ
      * the specified {@code name}, the first value in insertion order is returned.
      *
      * @param name the name of the header to retrieve
-     * @return the first header value if the header is found. {@code null} if there's no such header
+     * @return the first header value if the header is found, or {@code null} if there's no such header
      */
     @Override
     @Nullable

File: core/src/main/java/com/linecorp/armeria/common/HttpResponseWriter.java
Patch:
@@ -77,7 +77,7 @@ default void respond(HttpStatus status, MediaType mediaType, String content) {
         requireNonNull(mediaType, "mediaType");
         requireNonNull(content, "content");
         respond(status,
-                mediaType, content.getBytes(mediaType.charset().orElse(StandardCharsets.UTF_8)));
+                mediaType, content.getBytes(mediaType.charset(StandardCharsets.UTF_8)));
     }
 
     /**
@@ -100,7 +100,7 @@ default void respond(HttpStatus status, MediaType mediaType, String format, Obje
         respond(status,
                 mediaType,
                 String.format(Locale.ENGLISH, format, args).getBytes(
-                        mediaType.charset().orElse(StandardCharsets.UTF_8)));
+                        mediaType.charset(StandardCharsets.UTF_8)));
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/common/QueryParamGetters.java
Patch:
@@ -41,7 +41,7 @@ interface QueryParamGetters extends StringMultimapGetters</* IN_NAME */ String,
      * the specified {@code name}, the first value in insertion order is returned.
      *
      * @param name the parameter name
-     * @return the first parameter value if found. {@code null} if there is no such parameter
+     * @return the first parameter value if found, or {@code null} if there is no such parameter
      */
     @Override
     @Nullable
@@ -53,7 +53,7 @@ interface QueryParamGetters extends StringMultimapGetters</* IN_NAME */ String,
      *
      * @param name the parameter name
      * @param defaultValue the default value
-     * @return the first parameter value or {@code defaultValue} if there is no such parameter
+     * @return the first parameter value, or {@code defaultValue} if there is no such parameter
      */
     @Override
     String get(String name, String defaultValue);

File: core/src/main/java/com/linecorp/armeria/common/logging/StringContentPreviewer.java
Patch:
@@ -49,7 +49,7 @@ int length() {
     public void onHeaders(HttpHeaders headers) {
         super.onHeaders(headers);
         if (headers.contentType() != null) {
-            charset = headers.contentType().charset().orElse(defaultCharset);
+            charset = headers.contentType().charset(defaultCharset);
         } else {
             charset = defaultCharset;
         }

File: core/src/main/java/com/linecorp/armeria/common/logging/TextualContentPreviewerFactory.java
Patch:
@@ -41,7 +41,7 @@ public ContentPreviewer get(RequestContext ctx, HttpHeaders headers) {
         if (contentType == null) {
             return ContentPreviewer.disabled();
         }
-        if (contentType.charset().isPresent() ||
+        if (contentType.charset() != null ||
             "text".equals(contentType.type()) ||
             subTypeEquals.contains(contentType.subtype()) ||
             subTypeEndsWith.stream().anyMatch(contentType.subtype()::endsWith) ||

File: core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java
Patch:
@@ -237,7 +237,7 @@ public boolean equals(AsciiString a, AsciiString b) {
 
     @Nullable
     private static final LoadingCache<AsciiString, String> HEADER_VALUE_CACHE =
-            Flags.headerValueCacheSpec().map(ArmeriaHttpUtil::buildCache).orElse(null);
+            Flags.headerValueCacheSpec() != null ? buildCache(Flags.headerValueCacheSpec()) : null;
     private static final Set<AsciiString> CACHED_HEADERS = Flags.cachedHeaders().stream().map(AsciiString::of)
                                                                 .collect(toImmutableSet());
 

File: core/src/main/java/com/linecorp/armeria/internal/PathAndQuery.java
Patch:
@@ -78,7 +78,7 @@ public final class PathAndQuery {
 
     @Nullable
     private static final Cache<String, PathAndQuery> CACHE =
-            Flags.parsedPathCacheSpec().map(PathAndQuery::buildCache).orElse(null);
+            Flags.parsedPathCacheSpec() != null ? buildCache(Flags.parsedPathCacheSpec()) : null;
 
     private static Cache<String, PathAndQuery> buildCache(String spec) {
         return Caffeine.from(spec).build();

File: core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotatedService.java
Patch:
@@ -301,7 +301,7 @@ private HttpResponse convertResponse(ServiceRequestContext ctx, HttpRequest req,
         if (result instanceof HttpResult) {
             final HttpResult<?> httpResult = (HttpResult<?>) result;
             newHeaders = setHttpStatus(addNegotiatedResponseMediaType(ctx, httpResult.headers()));
-            result = httpResult.content().orElse(null);
+            result = httpResult.content();
             newTrailers = httpResult.trailers();
         } else {
             newHeaders = setHttpStatus(
@@ -477,7 +477,7 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,
             // If you want to force to send '204 No Content' for this case, add
             // 'NullToNoContentResponseConverterFunction' to the list of response converters.
             if (result == null) {
-                return HttpResponse.of(headers, HttpData.EMPTY_DATA, trailers);
+                return HttpResponse.of(headers, HttpData.empty(), trailers);
             }
             throw new IllegalStateException(
                     "No response converter exists for a result: " + result.getClass().getName());

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -380,7 +380,7 @@ private void handleRequest(ChannelHandlerContext ctx, DecodedHttpRequest req) th
 
             // Keep track of the number of unfinished requests and
             // clean up the request stream when response stream ends.
-            final boolean isTransient = service.as(TransientService.class).isPresent();
+            final boolean isTransient = service.as(TransientService.class) != null;
             if (!isTransient) {
                 gracefulShutdownSupport.inc();
             }

File: core/src/main/java/com/linecorp/armeria/server/RoutingResult.java
Patch:
@@ -134,7 +134,7 @@ public String decodedPath() {
     /**
      * Returns the query mapped by the {@link Route}.
      *
-     * @return the query string. {@code null} If there is no query part.
+     * @return the query string, or {@code null} if there is no query part.
      * @throws IllegalStateException if there's no match
      */
     @Nullable

File: core/src/main/java/com/linecorp/armeria/server/Service.java
Patch:
@@ -19,7 +19,6 @@
 import static java.util.Objects.requireNonNull;
 
 import java.lang.reflect.Constructor;
-import java.util.Optional;
 
 import javax.annotation.Nullable;
 
@@ -69,12 +68,12 @@ default void serviceAdded(ServiceConfig cfg) throws Exception {}
      * }</pre>
      *
      * @param type the type of the object to return
-     * @return the object of the specified {@code type} if found. {@link Optional#empty()} if not found.
+     * @return the object of the specified {@code type} if found, or {@code null} if not found.
      *
      * @see Unwrappable
      */
     @Override
-    default <T> Optional<T> as(Class<T> type) {
+    default <T> T as(Class<T> type) {
         requireNonNull(type, "type");
         return Unwrappable.super.as(type);
     }

File: core/src/main/java/com/linecorp/armeria/server/ServiceConfig.java
Patch:
@@ -89,7 +89,7 @@ private ServiceConfig(@Nullable VirtualHost virtualHost, Route route, HttpServic
         this.accessLogWriter = requireNonNull(accessLogWriter, "accessLogWriter");
         this.shutdownAccessLogWriterOnStop = shutdownAccessLogWriterOnStop;
 
-        handlesCorsPreflight = service.as(CorsService.class).isPresent();
+        handlesCorsPreflight = service.as(CorsService.class) != null;
     }
 
     static long validateRequestTimeoutMillis(long requestTimeoutMillis) {

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContextBuilder.java
Patch:
@@ -185,7 +185,7 @@ private static ServiceConfig findServiceConfig(Server server, String path, HttpS
                 continue;
             }
 
-            if (cfg.service().as(service.getClass()).isPresent()) {
+            if (cfg.service().as(service.getClass()) != null) {
                 return cfg;
             }
         }

File: core/src/main/java/com/linecorp/armeria/server/annotation/JacksonRequestConverterFunction.java
Patch:
@@ -70,7 +70,7 @@ public Object convertRequest(ServiceRequestContext ctx, AggregatedHttpRequest re
                                     contentType.subtype().endsWith("+json"))) {
             final ObjectReader reader = readers.computeIfAbsent(expectedResultType, mapper::readerFor);
             if (reader != null) {
-                final String content = request.content(contentType.charset().orElse(StandardCharsets.UTF_8));
+                final String content = request.content(contentType.charset(StandardCharsets.UTF_8));
                 try {
                     return reader.readValue(content);
                 } catch (JsonProcessingException e) {

File: core/src/main/java/com/linecorp/armeria/server/annotation/JacksonResponseConverterFunction.java
Patch:
@@ -76,7 +76,7 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,
             // @Produces("application/json") or @ProducesJson is specified.
             // Any MIME type which ends with '+json' such as 'application/json-patch+json' can be also accepted.
             if (mediaType.is(MediaType.JSON) || mediaType.subtype().endsWith("+json")) {
-                final Charset charset = mediaType.charset().orElse(StandardCharsets.UTF_8);
+                final Charset charset = mediaType.charset(StandardCharsets.UTF_8);
                 // Convert the object only if the charset supports UTF-8,
                 // because ObjectMapper always writes JSON document as UTF-8.
                 if (charset.contains(StandardCharsets.UTF_8)) {

File: core/src/main/java/com/linecorp/armeria/server/annotation/StringRequestConverterFunction.java
Patch:
@@ -39,7 +39,7 @@ public Object convertRequest(ServiceRequestContext ctx, AggregatedHttpRequest re
             final Charset charset;
             final MediaType contentType = request.contentType();
             if (contentType != null) {
-                charset = contentType.charset().orElse(ArmeriaHttpUtil.HTTP_DEFAULT_CONTENT_CHARSET);
+                charset = contentType.charset(ArmeriaHttpUtil.HTTP_DEFAULT_CONTENT_CHARSET);
             } else {
                 charset = ArmeriaHttpUtil.HTTP_DEFAULT_CONTENT_CHARSET;
             }

File: core/src/main/java/com/linecorp/armeria/server/annotation/StringResponseConverterFunction.java
Patch:
@@ -48,7 +48,7 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,
             // @Produces("text/plain") or @ProducesText is specified.
             if (mediaType.is(MediaType.ANY_TEXT_TYPE)) {
                 // Use 'utf-8' charset by default.
-                final Charset charset = mediaType.charset().orElse(StandardCharsets.UTF_8);
+                final Charset charset = mediaType.charset(StandardCharsets.UTF_8);
 
                 // To avoid sending an unfinished text to the client, always aggregate the published strings.
                 if (result instanceof Publisher) {

File: core/src/main/java/com/linecorp/armeria/server/cors/CorsDecoratorFactoryFunction.java
Patch:
@@ -36,7 +36,7 @@ public final class CorsDecoratorFactoryFunction implements DecoratorFactoryFunct
 
         final Function<? super HttpService, CorsService> decorator = cb.newDecorator();
         return service -> {
-            if (service.as(CorsService.class).isPresent()) {
+            if (service.as(CorsService.class) != null) {
                 return service;
             } else {
                 return decorator.apply(service);

File: core/src/main/java/com/linecorp/armeria/server/cors/CorsDecoratorsFactoryFunction.java
Patch:
@@ -49,7 +49,7 @@ public final class CorsDecoratorsFactoryFunction implements DecoratorFactoryFunc
 
         final Function<? super HttpService, CorsService> decorator = cb.newDecorator();
         return service -> {
-            if (service.as(CorsService.class).isPresent()) {
+            if (service.as(CorsService.class) != null) {
                 return service;
             } else {
                 return decorator.apply(service);

File: core/src/main/java/com/linecorp/armeria/server/cors/CorsServiceBuilder.java
Patch:
@@ -426,7 +426,7 @@ public CorsServiceBuilder disablePreflightResponseHeaders() {
      * Returns a newly-created {@link CorsService} based on the properties of this builder.
      */
     public CorsService build(HttpService delegate) {
-        if (delegate.as(CorsService.class).isPresent()) {
+        if (delegate.as(CorsService.class) != null) {
             throw new IllegalArgumentException(
                     "decorated with a " + CorsService.class.getSimpleName() + " already: " +
                     delegate);

File: core/src/main/java/com/linecorp/armeria/server/docs/DocService.java
Patch:
@@ -340,7 +340,7 @@ private static Set<ServiceConfig> findSupportedServices(
 
     private static boolean isSupported(
             ServiceConfig serviceCfg, Set<Class<? extends Service<?, ?>>> supportedServiceTypes) {
-        return supportedServiceTypes.stream().anyMatch(type -> serviceCfg.service().as(type).isPresent());
+        return supportedServiceTypes.stream().anyMatch(type -> serviceCfg.service().as(type) != null);
     }
 
     static final class DocServiceVfs extends AbstractHttpVfs {

File: core/src/main/java/com/linecorp/armeria/server/docs/TypeSignature.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.util.List;
 import java.util.Objects;
-import java.util.Optional;
 import java.util.regex.Pattern;
 
 import javax.annotation.Nullable;
@@ -247,8 +246,9 @@ public String name() {
      * For reflection-based {@link DocServicePlugin}s, this will probably be a {@link Class}, but
      * other plugins may use an actual instance with descriptor information.
      */
-    public Optional<Object> namedTypeDescriptor() {
-        return Optional.ofNullable(namedTypeDescriptor);
+    @Nullable
+    public Object namedTypeDescriptor() {
+        return namedTypeDescriptor;
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/logging/AccessLogFormats.java
Patch:
@@ -182,8 +182,8 @@ static List<AccessLogComponent> parseCustom(String formatStr) {
     private static AccessLogComponent newAccessLogComponent(char token,
                                                             @Nullable String variable,
                                                             @Nullable Condition.Builder condBuilder) {
-        final AccessLogType type = AccessLogType.find(token).orElseThrow(
-                () -> new IllegalArgumentException("Unexpected token character: '" + token + '\''));
+        final AccessLogType type = AccessLogType.find(token);
+        checkArgument(type != null, "Unexpected token character: '%s'", token);
         if (type.variableRequirement() == VariableRequirement.YES) {
             checkArgument(variable != null,
                           "Token " + type.token() + " requires a variable.");

File: core/src/test/java/com/linecorp/armeria/client/ClientOptionsTest.java
Patch:
@@ -55,10 +55,10 @@ void testSetHttpHeader() {
         final HttpHeaders httpHeader = HttpHeaders.of(HttpHeaderNames.of("x-user-defined"), "HEADER_VALUE");
 
         final ClientOptions options = ClientOptions.of(ClientOption.HTTP_HEADERS.newValue(httpHeader));
-        assertThat(options.get(ClientOption.HTTP_HEADERS)).contains(httpHeader);
+        assertThat(options.get(ClientOption.HTTP_HEADERS)).isEqualTo(httpHeader);
 
         final ClientOptions options2 = ClientOptions.of();
-        assertThat(options2.get(ClientOption.HTTP_HEADERS)).contains(HttpHeaders.of());
+        assertThat(options2.get(ClientOption.HTTP_HEADERS)).isEqualTo(HttpHeaders.of());
     }
 
     @Test

File: core/src/test/java/com/linecorp/armeria/client/MaxNumEventLoopsPerEndpointTest.java
Patch:
@@ -19,11 +19,11 @@
 import static com.google.common.collect.ImmutableList.toImmutableList;
 import static com.linecorp.armeria.client.DefaultEventLoopSchedulerTest.acquireEntry;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.fail;
 
 import java.util.List;
 import java.util.function.ToIntFunction;
 
-import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
 import com.google.common.collect.ImmutableList;
@@ -301,7 +301,7 @@ private static int findIndex(List<EventLoop> eventLoops, EventLoop eventLoop) {
         }
 
         // Should never reach here.
-        Assertions.fail("Could not find the eventLoop.");
+        fail("Could not find the eventLoop.");
         return -1;
     }
 

File: core/src/test/java/com/linecorp/armeria/common/HttpHeadersBaseTest.java
Patch:
@@ -31,7 +31,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
-import static org.junit.jupiter.api.Assertions.fail;
+import static org.assertj.core.api.Assertions.fail;
 
 import java.net.URI;
 import java.util.Iterator;

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedBeanFactoryRegistryTest.java
Patch:
@@ -91,10 +91,10 @@ public void shouldBeRegisteredAsUnsupported() {
         BeanFactoryId id;
 
         id = register(InnerClass.class, vars, resolvers);
-        assertThat(find(id).isPresent()).isFalse();
+        assertThat(find(id)).isNull();
 
         id = register(NotARequestBeanBecauseOfInnerClass.class, vars, resolvers);
-        assertThat(find(id).isPresent()).isFalse();
+        assertThat(find(id)).isNull();
     }
 
     // error test case: more than 1 annotated constructors

File: core/src/test/java/com/linecorp/armeria/server/ServiceTest.java
Patch:
@@ -61,9 +61,9 @@ void reflectionDecorator() throws Exception {
     private static void assertDecoration(FooService inner, HttpService outer) throws Exception {
 
         // Test if Service.as() works as expected.
-        assertThat(outer.as(serviceType(inner))).containsSame(inner);
-        assertThat(outer.as(serviceType(outer))).containsSame(outer);
-        assertThat(outer.as(String.class)).isNotPresent();
+        assertThat(outer.as(serviceType(inner))).isSameAs(inner);
+        assertThat(outer.as(serviceType(outer))).isSameAs(outer);
+        assertThat(outer.as(String.class)).isNull();
 
         // Test if FooService.serviceAdded() is invoked.
         final ServiceConfig cfg = new ServiceConfig(Route.ofCatchAll(), outer, 1, 1, true,

File: core/src/test/java/com/linecorp/armeria/server/docs/ServiceInfoTest.java
Patch:
@@ -17,7 +17,6 @@
 package com.linecorp.armeria.server.docs;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.jupiter.api.Assertions.assertEquals;
 
 import java.util.List;
 import java.util.Set;
@@ -66,7 +65,7 @@ void testCollectMethodGrouping() {
         final List<MethodInfo> collectMethods =
                 ImmutableList.copyOf(ServiceInfo.mergeEndpoints(inputMethodInfos));
 
-        assertEquals(4, collectMethods.size());
+        assertThat(collectMethods).hasSize(4);
 
         final Function<MethodInfo, Set<String>> getPaths = methodInfo ->
                 methodInfo.endpoints().stream().map(EndpointInfo::pathMapping).collect(Collectors.toSet());

File: core/src/test/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceTest.java
Patch:
@@ -109,7 +109,8 @@ void clearChecker() {
     @AfterEach
     void ensureNoPendingResponses() {
         server.server().serviceConfigs().forEach(cfg -> {
-            cfg.service().as(HealthCheckService.class).ifPresent(service -> {
+            final HealthCheckService service = cfg.service().as(HealthCheckService.class);
+            if (service != null) {
                 await().untilAsserted(() -> {
                     if (service.pendingHealthyResponses != null) {
                         assertThat(service.pendingHealthyResponses).isEmpty();
@@ -118,7 +119,7 @@ void ensureNoPendingResponses() {
                         assertThat(service.pendingUnhealthyResponses).isEmpty();
                     }
                 });
-            });
+            }
         });
     }
 

File: dropwizard/src/main/java/com/linecorp/armeria/dropwizard/ArmeriaServerFactory.java
Patch:
@@ -18,7 +18,6 @@
 import java.security.cert.CertificateException;
 import java.time.Duration;
 import java.util.Objects;
-import java.util.Optional;
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
@@ -128,7 +127,9 @@ ServerBuilder decorateServerBuilderFromConfig(ServerBuilder serverBuilder) {
         if (!isServerHeaderEnabled()) {
             serverBuilder.disableServerHeader();
         }
-        Optional.ofNullable(getDefaultHostname()).ifPresent(serverBuilder::defaultHostname);
+        if (getDefaultHostname() != null) {
+            serverBuilder.defaultHostname(getDefaultHostname());
+        }
         // TODO: Add more items to server builder via Configuration
         return serverBuilder;
     }

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageDeframer.java
Patch:
@@ -127,7 +127,7 @@ private DeframedMessage(@Nullable ByteBuf buf, @Nullable InputStream stream, int
         /**
          * Returns the {@link ByteBuf}.
          *
-         * @return the {@link ByteBuf}. {@code null} if not created with
+         * @return the {@link ByteBuf}, or {@code null} if not created with
          *         {@link #DeframedMessage(ByteBuf, int)}.
          */
         @Nullable
@@ -138,7 +138,7 @@ public ByteBuf buf() {
         /**
          * Returns the {@link InputStream}.
          *
-         * @return the {@link InputStream}. {@code null} if not created with
+         * @return the {@link InputStream}, or {@code null} if not created with
          *         {@link #DeframedMessage(InputStream, int)}.
          */
         @Nullable

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcService.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
-import java.util.Optional;
+import java.util.Objects;
 import java.util.Set;
 import java.util.concurrent.TimeUnit;
 import java.util.function.Consumer;
@@ -277,8 +277,8 @@ public void serviceAdded(ServiceConfig cfg) {
                     cfg.server().config().virtualHosts().stream()
                        .flatMap(host -> host.serviceConfigs().stream())
                        .map(serviceConfig -> serviceConfig.service().as(GrpcService.class))
-                       .filter(Optional::isPresent)
-                       .flatMap(service -> service.get().services().stream())
+                       .filter(Objects::nonNull)
+                       .flatMap(service -> service.services().stream())
                        // Armeria allows the same service to be registered multiple times at different
                        // paths, but proto reflection service only supports a single instance of each
                        // service so we dedupe here.

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcDocServicePluginTest.java
Patch:
@@ -248,13 +248,13 @@ void newMethodInfo() throws Exception {
         assertThat(methodInfo.name()).isEqualTo("UnaryCall");
         assertThat(methodInfo.returnTypeSignature().name()).isEqualTo("armeria.grpc.testing.SimpleResponse");
         assertThat(methodInfo.returnTypeSignature().namedTypeDescriptor())
-                .contains(SimpleResponse.getDescriptor());
+                .isEqualTo(SimpleResponse.getDescriptor());
         assertThat(methodInfo.parameters()).hasSize(1);
         assertThat(methodInfo.parameters().get(0).name()).isEqualTo("request");
         assertThat(methodInfo.parameters().get(0).typeSignature().name())
                 .isEqualTo("armeria.grpc.testing.SimpleRequest");
         assertThat(methodInfo.parameters().get(0).typeSignature().namedTypeDescriptor())
-                .contains(SimpleRequest.getDescriptor());
+                .isEqualTo(SimpleRequest.getDescriptor());
         assertThat(methodInfo.exceptionTypeSignatures()).isEmpty();
         assertThat(methodInfo.docString()).isNull();
         assertThat(methodInfo.endpoints()).containsExactlyInAnyOrder(

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlDecorator.java
Patch:
@@ -196,9 +196,9 @@ private AuthnRequest createAuthRequest(SamlIdentityProviderConfig idp, String de
 
         // The ProtocolBinding attribute is mutually exclusive with the AssertionConsumerServiceIndex attribute
         // and is typically accompanied by the AssertionConsumerServiceURL attribute.
-        final SamlPortConfig portConfig = portConfigHolder.config().get();
-        final SamlEndpoint acsEndpoint = idp.acsEndpoint()
-                                            .orElse(sp.defaultAcsConfig().endpoint());
+        final SamlPortConfig portConfig = portConfigHolder.config();
+        final SamlEndpoint acsEndpoint = idp.acsEndpoint() != null ? idp.acsEndpoint()
+                                                                   : sp.defaultAcsConfig().endpoint();
         authnRequest.setAssertionConsumerServiceURL(acsEndpoint.toUriString(portConfig.scheme().uriText(),
                                                                             defaultHostname,
                                                                             portConfig.port()));

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlInitializer.java
Patch:
@@ -74,7 +74,7 @@ static void ensureAvailability() {
     /**
      * Returns the cause of unavailability of the OpenSAML library.
      *
-     * @return the cause if unavailable. {@code null} if available.
+     * @return the cause if unavailable, or {@code null} if available.
      */
     @Nullable
     static Throwable unavailabilityCause() {

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlService.java
Patch:
@@ -160,7 +160,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
                                        DATA_AGGREGATION_FAILURE);
             }
 
-            final SamlPortConfig portConfig = portConfigHolder.config().get();
+            final SamlPortConfig portConfig = portConfigHolder.config();
             final boolean isTls = ctx.sessionProtocol().isTls();
             if (portConfig.scheme().isTls() != isTls) {
                 if (isTls) {
@@ -195,7 +195,7 @@ static final class SamlParameters {
             final MediaType contentType = req.contentType();
 
             if (contentType != null && contentType.belongsTo(MediaType.FORM_DATA)) {
-                final String query = req.content(contentType.charset().orElse(StandardCharsets.UTF_8));
+                final String query = req.content(contentType.charset(StandardCharsets.UTF_8));
                 params = QueryParams.fromQueryString(query);
             } else {
                 final String path = req.path();

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlSingleLogoutFunction.java
Patch:
@@ -103,7 +103,7 @@ public HttpResponse serve(ServiceRequestContext ctx, AggregatedHttpRequest req,
                 validateSignature(idp.signingCredential(), logoutRequest);
             }
 
-            final SamlEndpoint sloResEndpoint = idp.sloResEndpoint().orElse(null);
+            final SamlEndpoint sloResEndpoint = idp.sloResEndpoint();
             if (sloResEndpoint == null) {
                 // No response URL. Just return 200 OK.
                 return HttpResponse.from(sloHandler.logoutSucceeded(ctx, req, messageContext)

File: spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/internal/spring/ArmeriaConfigurationUtilTest.java
Patch:
@@ -64,7 +64,7 @@ public void makesSureDecoratorsAreConfigured() {
                                        MeterIdPrefixFunctionFactory.DEFAULT, null);
         final Server s1 = sb1.build();
         verify(decorator, times(2)).apply(any());
-        assertThat(service(s1).as(MetricCollectingService.class)).isPresent();
+        assertThat(service(s1).as(MetricCollectingService.class)).isNotNull();
 
         reset(decorator);
 
@@ -91,7 +91,7 @@ public void makesSureDecoratedServiceIsAdded() {
         configureAnnotatedServices(sb, dsb, ImmutableList.of(bean), null, null);
         final Server s = sb.build();
         verify(decorator, times(2)).apply(any());
-        assertThat(service(s).as(SimpleDecorator.class)).isPresent();
+        assertThat(service(s).as(SimpleDecorator.class)).isNotNull();
     }
 
     private static HttpService service(Server server) {

File: spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaCompressionConfigurationTest.java
Patch:
@@ -87,8 +87,7 @@ public String hello(@Param Optional<Integer> size) {
 
     private String newUrl() {
         assert server != null;
-        return server.activePort().map(p -> "http://127.0.0.1:" + p.localAddress().getPort())
-                     .orElseThrow(() -> new RuntimeException("Failed to get an active port."));
+        return "http://127.0.0.1:" + server.activeLocalPort();
     }
 
     private static HttpRequest request(int sizeParam) {

File: thrift/src/main/java/com/linecorp/armeria/internal/thrift/ThriftServiceMetadata.java
Patch:
@@ -221,7 +221,7 @@ public Set<Class<?>> interfaces() {
     /**
      * Returns the {@link ThriftFunction} that provides the metadata of the specified Thrift function.
      *
-     * @return the {@link ThriftFunction}. {@code null} if there's no such function.
+     * @return the {@link ThriftFunction}, or {@code null} if there's no such function.
      */
     @Nullable
     public ThriftFunction function(String method) {

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/THttpClientTest.java
Patch:
@@ -56,7 +56,7 @@ public RpcResponse serve(
         assertThat(serviceConfig).isNotNull();
         assertThat(serviceConfig.service()).isInstanceOf(THttpService.class);
 
-        final ThriftCallService thriftCallService = tHttpService.as(ThriftCallService.class).get();
+        final ThriftCallService thriftCallService = tHttpService.as(ThriftCallService.class);
         assertThat(thriftCallService).isNotNull();
     }
 }

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftServiceTest.java
Patch:
@@ -19,7 +19,7 @@
 import static com.google.common.collect.ImmutableList.toImmutableList;
 import static com.linecorp.armeria.common.util.Functions.voidFunction;
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.jupiter.api.Assertions.fail;
+import static org.assertj.core.api.Assertions.fail;
 
 import java.nio.ByteBuffer;
 import java.util.ArrayList;

File: tomcat/src/main/java/com/linecorp/armeria/server/tomcat/ManagedTomcatService.java
Patch:
@@ -17,7 +17,6 @@
 package com.linecorp.armeria.server.tomcat;
 
 import java.util.HashSet;
-import java.util.Optional;
 import java.util.Set;
 import java.util.function.Consumer;
 import java.util.function.Function;
@@ -139,8 +138,8 @@ void stop() throws Exception {
     }
 
     @Override
-    public Optional<Connector> connector() {
-        return Optional.ofNullable(connector);
+    public Connector connector() {
+        return connector;
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/common/metric/DropwizardMeterRegistries.java
Patch:
@@ -30,7 +30,6 @@
 import io.micrometer.core.instrument.config.MeterFilter;
 import io.micrometer.core.instrument.config.MeterFilterReply;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.instrument.distribution.pause.NoPauseDetector;
 import io.micrometer.core.instrument.dropwizard.DropwizardConfig;
 import io.micrometer.core.instrument.dropwizard.DropwizardMeterRegistry;
 import io.micrometer.core.instrument.util.HierarchicalNameMapper;
@@ -159,8 +158,8 @@ public MeterFilterReply accept(Meter.Id id) {
                 return MeterFilterReply.NEUTRAL;
             }
         });
+
         meterRegistry.config().namingConvention(MoreNamingConventions.dropwizard());
-        meterRegistry.config().pauseDetector(new NoPauseDetector());
         return meterRegistry;
     }
 

File: core/src/main/java/com/linecorp/armeria/common/metric/MoreMeters.java
Patch:
@@ -167,8 +167,8 @@ public static Timer timerWithDefaultQuantiles(MeterRegistry registry, String nam
      * specified {@link MeterRegistry}. The format of the key string is:
      * <ul>
      *   <li>{@code <name>#<statistic>{tagName=tagValue,...}}</li>
-     *   <li>e.g. {@code "armeria.server.activeRequests#value{method=greet}"}</li>
-     *   <li>e.g. {@code "someSubsystem.someValue#sumOfSquares"} (no tags)</li>
+     *   <li>e.g. {@code "armeria.server.active.requests#value{method=greet}"}</li>
+     *   <li>e.g. {@code "some.subsystem.some.value#count"} (no tags)</li>
      * </ul>
      * Note: It is not recommended to use this method for the purposes other than testing.
      */

File: core/src/main/java/com/linecorp/armeria/common/metric/NoopMeterRegistry.java
Patch:
@@ -35,6 +35,7 @@
 import io.micrometer.core.instrument.Meter.Type;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Timer;
+import io.micrometer.core.instrument.config.NamingConvention;
 import io.micrometer.core.instrument.distribution.DistributionStatisticConfig;
 import io.micrometer.core.instrument.distribution.pause.PauseDetector;
 import io.micrometer.core.instrument.noop.NoopCounter;
@@ -62,7 +63,7 @@ public static NoopMeterRegistry get() {
 
     private NoopMeterRegistry() {
         super(Clock.SYSTEM);
-        config().namingConvention(MoreNamingConventions.identity());
+        config().namingConvention(NamingConvention.identity);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/common/metric/PrometheusMeterRegistries.java
Patch:
@@ -20,7 +20,6 @@
 
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.config.NamingConvention;
-import io.micrometer.core.instrument.distribution.pause.NoPauseDetector;
 import io.micrometer.prometheus.PrometheusConfig;
 import io.micrometer.prometheus.PrometheusMeterRegistry;
 import io.prometheus.client.CollectorRegistry;
@@ -80,7 +79,6 @@ public static PrometheusMeterRegistry newRegistry(CollectorRegistry registry, Cl
     public static <T extends PrometheusMeterRegistry> T configureRegistry(T meterRegistry) {
         requireNonNull(meterRegistry, "meterRegistry");
         meterRegistry.config().namingConvention(MoreNamingConventions.prometheus());
-        meterRegistry.config().pauseDetector(new NoPauseDetector());
         return meterRegistry;
     }
 

File: core/src/test/java/com/linecorp/armeria/internal/metric/MicrometerUtilTest.java
Patch:
@@ -19,20 +19,20 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import com.linecorp.armeria.common.metric.MeterIdPrefix;
 import com.linecorp.armeria.common.metric.PrometheusMeterRegistries;
 
 import io.micrometer.core.instrument.MeterRegistry;
 
-public class MicrometerUtilTest {
+class MicrometerUtilTest {
 
     private static final MeterIdPrefix ID_PREFIX_A = new MeterIdPrefix("a");
     private static final MeterRegistry metrics = PrometheusMeterRegistries.newRegistry();
 
     @Test
-    public void getOrCreateGroup() {
+    void getOrCreateGroup() {
         final Integer a = MicrometerUtil.register(metrics, ID_PREFIX_A, Integer.class,
                                                   (parent, id) -> 42);
 

File: core/src/test/java/com/linecorp/armeria/server/ServerTest.java
Patch:
@@ -169,8 +169,8 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
     public static void checkMetrics() {
         final MeterRegistry registry = server.server().meterRegistry();
         assertThat(MicrometerUtil.register(registry,
-                                           new MeterIdPrefix("armeria.server.router.virtualHostCache",
-                                                             "hostnamePattern", "*"),
+                                           new MeterIdPrefix("armeria.server.router.virtual.host.cache",
+                                                             "hostname.pattern", "*"),
                                            Object.class, (r, i) -> null)).isNotNull();
     }
 
@@ -507,7 +507,7 @@ public void versionMetrics() {
 
         final MeterRegistry meterRegistry = server.config().meterRegistry();
         final Gauge gauge = meterRegistry.find("armeria.build.info")
-                                         .tagKeys("version", "commit", "repoStatus")
+                                         .tagKeys("version", "commit", "repo.status")
                                          .gauge();
         assertThat(gauge).isNotNull();
         assertThat(gauge.value()).isOne();

File: core/src/test/java/com/linecorp/armeria/server/composition/CompositeServiceTest.java
Patch:
@@ -73,8 +73,8 @@ protected void configure(ServerBuilder sb) throws Exception {
     static void checkMetrics() {
         final MeterRegistry registry = server.server().meterRegistry();
         assertThat(MicrometerUtil.register(registry,
-                                           new MeterIdPrefix("armeria.server.router.compositeServiceCache",
-                                                             "hostnamePattern", "*",
+                                           new MeterIdPrefix("armeria.server.router.composite.service.cache",
+                                                             "hostname.pattern", "*",
                                                              "route", "prefix:/qux/"),
                                            Object.class, (r, i) -> null)).isNotNull();
     }

File: retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/RetrofitMeterIdPrefixFunctionBuilder.java
Patch:
@@ -41,7 +41,7 @@ public final class RetrofitMeterIdPrefixFunctionBuilder {
     /**
      * Adds a tag that signifies the service name to the generated {@link MeterIdPrefix}es.
      *
-     * @param serviceTagName the name of the tag to be added, e.g. {@code "serviceName"}
+     * @param serviceTagName the name of the tag to be added, e.g. {@code "service.name"}
      * @param defaultServiceName the default value of the tag, e.g. {@code "myService"}
      */
     public RetrofitMeterIdPrefixFunctionBuilder withServiceTag(String serviceTagName,

File: core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java
Patch:
@@ -447,7 +447,8 @@ public void onComplete() {}
             }, ctx.channel().eventLoop());
 
             // NB: No need to set the response timeout because we have session creation timeout.
-            responseDecoder.addResponse(0, res, null, 0, UPGRADE_RESPONSE_MAX_LENGTH);
+            responseDecoder.addResponse(0, res, null, ctx.channel().eventLoop(), /* response timeout */ 0,
+                                        UPGRADE_RESPONSE_MAX_LENGTH);
             ctx.fireChannelActive();
         }
 

File: core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java
Patch:
@@ -118,7 +118,7 @@ public void operationComplete(ChannelFuture future) throws Exception {
 
             if (state == State.DONE) {
                 // Successfully sent the request; schedule the response timeout.
-                response.scheduleTimeout(ch.eventLoop());
+                response.initTimeout();
             }
 
             // Request more messages regardless whether the state is DONE. It makes the producer have

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -430,7 +430,7 @@ private void handleRequest(ChannelHandlerContext ctx, DecodedHttpRequest req) th
             final HttpResponseSubscriber resSubscriber =
                     new HttpResponseSubscriber(ctx, responseEncoder, reqCtx, req,
                                                config.isServerHeaderEnabled(), config.isDateHeaderEnabled());
-            reqCtx.setRequestTimeoutChangeListener(resSubscriber);
+            reqCtx.setRequestTimeoutController(resSubscriber);
             res.subscribe(resSubscriber, eventLoop, WITH_POOLED_OBJECTS);
         }
     }

File: core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckService.java
Patch:
@@ -29,7 +29,6 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Ascii;
 import com.google.common.collect.ImmutableSet;
-import com.google.common.math.LongMath;
 
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpHeaderNames;
@@ -407,7 +406,7 @@ private boolean isLongPollingEnabled() {
     private static void updateRequestTimeout(ServiceRequestContext ctx, long longPollingTimeoutMillis) {
         final long requestTimeoutMillis = ctx.requestTimeoutMillis();
         if (requestTimeoutMillis > 0) {
-            ctx.setRequestTimeoutMillis(LongMath.saturatedAdd(longPollingTimeoutMillis, requestTimeoutMillis));
+            ctx.extendRequestTimeoutMillis(longPollingTimeoutMillis);
         }
     }
 

File: core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java
Patch:
@@ -29,7 +29,6 @@
 import java.net.SocketTimeoutException;
 import java.net.URI;
 import java.nio.charset.StandardCharsets;
-import java.time.Duration;
 import java.util.Collections;
 import java.util.concurrent.CompletionException;
 import java.util.concurrent.atomic.AtomicReference;
@@ -300,7 +299,7 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)
             sb.service("/pooled-unaware", new PooledContentService().decorate(PoolUnawareDecorator::new));
 
             sb.service("/stream-closed", (ctx, req) -> {
-                ctx.setRequestTimeout(Duration.ZERO);
+                ctx.clearRequestTimeout();
                 final HttpResponseWriter res = HttpResponse.streaming();
                 res.write(ResponseHeaders.of(HttpStatus.OK));
                 req.subscribe(new Subscriber<HttpObject>() {

File: core/src/test/java/com/linecorp/armeria/client/HttpResponseWrapperTest.java
Patch:
@@ -151,7 +151,7 @@ private static HttpResponseWrapper httpResponseWrapper(DecodedHttpResponse res)
                 new TestHttpResponseDecoder(cctx.log().channel(), controller);
 
         res.init(controller);
-        return decoder.addResponse(1, res, cctx, cctx.responseTimeoutMillis(),
+        return decoder.addResponse(1, res, cctx, cctx.eventLoop(), cctx.responseTimeoutMillis(),
                                    cctx.maxResponseLength());
     }
 

File: examples/server-sent-events/src/main/java/example/armeria/server/sse/Main.java
Patch:
@@ -47,9 +47,9 @@ static Server newServer(int httpPort, int httpsPort, Duration sendingInterval, l
                      .service("/long", (ctx, req) -> {
                          // Note that you MUST adjust the request timeout if you want to send events for a
                          // longer period than the configured request timeout. The timeout can be disabled by
-                         // setting 0 like the below, but it is NOT RECOMMENDED in the real world application,
-                         // because it can leave a lot of unfinished requests.
-                         ctx.setRequestTimeout(Duration.ZERO);
+                         // 'clearRequestTimeout()' like the below, but it is NOT RECOMMENDED in
+                         // the real world application, because it can leave a lot of unfinished requests.
+                         ctx.clearRequestTimeout();
                          return ServerSentEvents.fromPublisher(
                                  Flux.interval(sendingInterval)
                                      .take(eventCount)

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaClientCall.java
Patch:
@@ -193,7 +193,7 @@ public void start(Listener<O> responseListener, Metadata metadata) {
                                 callOptions.getDeadline());
                 close(status, new Metadata());
             } else {
-                ctx.setResponseTimeoutMillis(remainingMillis);
+                ctx.setResponseTimeoutAfterMillis(remainingMillis);
                 ctx.setResponseTimeoutHandler(() -> {
                     final Status status = Status.DEADLINE_EXCEEDED
                             .augmentDescription(

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceServerTest.java
Patch:
@@ -345,7 +345,7 @@ public void grpcContext(SimpleRequest request, StreamObserver<SimpleResponse> re
 
         @Override
         public void timesOut(SimpleRequest request, StreamObserver<SimpleResponse> responseObserver) {
-            ServiceRequestContext.current().setRequestTimeoutMillis(100);
+            ServiceRequestContext.current().setRequestTimeoutAfterMillis(100);
         }
     }
 

File: core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java
Patch:
@@ -17,6 +17,7 @@
 package com.linecorp.armeria.client;
 
 import static com.google.common.base.MoreObjects.firstNonNull;
+import static com.linecorp.armeria.client.HttpSessionHandler.PENDING_EXCEPTION;
 import static com.linecorp.armeria.common.SessionProtocol.H1;
 import static com.linecorp.armeria.common.SessionProtocol.H1C;
 import static com.linecorp.armeria.common.SessionProtocol.H2;
@@ -192,7 +193,6 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
                 final SslHandshakeCompletionEvent handshakeEvent = (SslHandshakeCompletionEvent) evt;
                 if (!handshakeEvent.isSuccess()) {
                     // The connection will be closed automatically by SslHandler.
-                    logger.warn("{} TLS handshake failed:", ctx.channel(), handshakeEvent.cause());
                     handshakeFailed = true;
                     return;
                 }
@@ -231,7 +231,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws E
                 if (handshakeFailed &&
                     cause instanceof DecoderException &&
                     cause.getCause() instanceof SSLException) {
-                    // Swallow an SSLException raised after handshake failure.
+                    ctx.channel().attr(PENDING_EXCEPTION).set(cause.getCause());
                     return;
                 }
 

File: core/src/main/java/com/linecorp/armeria/client/ClientBuilder.java
Patch:
@@ -37,7 +37,7 @@
  * a {@link ClientOption#DECORATION} or a {@link ClientOption#HTTP_HEADERS}, this builder will not simply
  * replace the old option but <em>merge</em> the specified option into the previous option value. For example:
  * <pre>{@code
- * ClientOptionsBuilder b = new ClientOptionsBuilder();
+ * ClientOptionsBuilder b = ClientOptions.builder();
  * b.option(ClientOption.HTTP_HEADERS, headersA);
  * b.option(ClientOption.HTTP_HEADERS, headersB);
  * b.option(ClientOption.DECORATION, decorationA);

File: core/src/main/java/com/linecorp/armeria/client/Clients.java
Patch:
@@ -349,8 +349,8 @@ public static <T> T newDerivedClient(T client, Iterable<ClientOptionValue<?>> ad
      *
      * <pre>{@code
      * WebClient derivedWebClient = Clients.newDerivedClient(webClient, options -> {
-     *     ClientOptionsBuilder builder = new ClientOptionsBuilder(options);
-     *     builder.decorator(...);  // Add a decorator.
+     *     ClientOptionsBuilder builder = options.toBuilder();
+     *     builder.decorator(...);     // Add a decorator.
      *     builder.addHttpHeader(...); // Add an HTTP header.
      *     return builder.build();
      * });

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/SlidingWindowCounter.java
Patch:
@@ -136,7 +136,7 @@ private EventCount trimAndSum(long tickerNanos) {
             }
         }
 
-        return new EventCount(success, failure);
+        return EventCount.of(success, failure);
     }
 
     private enum Event {

File: core/src/main/java/com/linecorp/armeria/common/ClientCacheControlBuilder.java
Patch:
@@ -24,7 +24,7 @@
  *
  * <pre>{@code
  * ClientCacheControl cacheControl =
- *     new ClientCacheControlBuilder().noCache().build();
+ *     ClientCacheControl.builder().noCache().build();
  * }</pre>
  *
  * @see ServerCacheControlBuilder

File: core/src/main/java/com/linecorp/armeria/server/DecoratingServiceBindingBuilder.java
Patch:
@@ -31,7 +31,7 @@
  * to build the {@code decorator} and return to the {@link ServerBuilder}.
  *
  * <pre>{@code
- * ServerBuilder sb = new ServerBuilder();
+ * ServerBuilder sb = Server.builder();
  *
  * sb.routeDecorator()                                // Configure a decorator with route.
  *   .pathPrefix("/api/users")

File: core/src/main/java/com/linecorp/armeria/server/RedirectService.java
Patch:
@@ -116,7 +116,7 @@
  * the following location function never preserves the original query string:</p>
  *
  * <pre>{@code
- * ServiceBuilder sb = new ServiceBuilder();
+ * ServiceBuilder sb = Server.builder();
  * // /old?foo=bar -> /new?redirected=1 (?foo=bar is ignored.)
  * sb.service("/old", new RedirectService("/new?redirected=1"));
  * }</pre>

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostDecoratingServiceBindingBuilder.java
Patch:
@@ -31,7 +31,7 @@
  * to build the {@code decorator} and return to the {@link VirtualHostBuilder}.
  *
  * <pre>{@code
- * ServerBuilder sb = new ServerBuilder();
+ * ServerBuilder sb = Server.builder();
  *
  * sb.virtualHost("example.com")
  *   .routeDecorator()                                // Configure a decorator with route.

File: core/src/main/java/com/linecorp/armeria/server/annotation/PathPrefix.java
Patch:
@@ -35,7 +35,7 @@
  * }</pre>
  * And then can be registered to {@link ServerBuilder} like this
  * <pre>{@code
- * ServerBuilder sb = new ServerBuilder();
+ * ServerBuilder sb = Server.builder();
  * sb.annotatedService("/a", new MyService());
  * }</pre>
  *

File: core/src/main/java/com/linecorp/armeria/server/auth/AuthService.java
Patch:
@@ -49,7 +49,7 @@ public class AuthService extends SimpleDecoratingHttpService {
      */
     public static Function<? super HttpService, AuthService> newDecorator(
             Iterable<? extends Authorizer<HttpRequest>> authorizers) {
-        return new AuthServiceBuilder().add(authorizers).newDecorator();
+        return builder().add(authorizers).newDecorator();
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/auth/AuthServiceBuilder.java
Patch:
@@ -79,7 +79,7 @@ public AuthServiceBuilder add(Iterable<? extends Authorizer<HttpRequest>> author
      * Adds an HTTP basic {@link Authorizer}.
      */
     public AuthServiceBuilder addBasicAuth(Authorizer<? super BasicToken> authorizer) {
-        return addTokenAuthorizer(AuthTokenExtractors.BASIC,
+        return addTokenAuthorizer(AuthTokenExtractors.basic(),
                                   requireNonNull(authorizer, "authorizer"));
     }
 
@@ -95,7 +95,7 @@ public AuthServiceBuilder addBasicAuth(Authorizer<? super BasicToken> authorizer
      * Adds an OAuth1a {@link Authorizer}.
      */
     public AuthServiceBuilder addOAuth1a(Authorizer<? super OAuth1aToken> authorizer) {
-        return addTokenAuthorizer(AuthTokenExtractors.OAUTH1A,
+        return addTokenAuthorizer(AuthTokenExtractors.oAuth1a(),
                                   requireNonNull(authorizer, "authorizer"));
     }
 
@@ -111,7 +111,7 @@ public AuthServiceBuilder addOAuth1a(Authorizer<? super OAuth1aToken> authorizer
      * Adds an OAuth2 {@link Authorizer}.
      */
     public AuthServiceBuilder addOAuth2(Authorizer<? super OAuth2Token> authorizer) {
-        return addTokenAuthorizer(AuthTokenExtractors.OAUTH2, requireNonNull(authorizer, "authorizer"));
+        return addTokenAuthorizer(AuthTokenExtractors.oAuth2(), requireNonNull(authorizer, "authorizer"));
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/auth/HttpAuthService.java
Patch:
@@ -44,7 +44,7 @@ public final class HttpAuthService extends AuthService {
     @Deprecated
     public static Function<? super HttpService, AuthService> newDecorator(
             Iterable<? extends Authorizer<HttpRequest>> authorizers) {
-        return new AuthServiceBuilder().add(authorizers).newDecorator();
+        return builder().add(authorizers).newDecorator();
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/composition/SimpleCompositeRpcServiceBuilder.java
Patch:
@@ -53,6 +53,6 @@ public SimpleCompositeRpcServiceBuilder service(Route route, RpcService  service
      * builder.
      */
     public SimpleCompositeRpcService build() {
-        return new SimpleCompositeRpcService(services());
+        return SimpleCompositeRpcService.of(services());
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/composition/SimpleCompositeServiceBuilder.java
Patch:
@@ -53,6 +53,6 @@ public SimpleCompositeServiceBuilder service(Route route, HttpService  service)
      * builder.
      */
     public SimpleCompositeService build() {
-        return new SimpleCompositeService(services());
+        return SimpleCompositeService.of(services());
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/cors/CorsServiceBuilder.java
Patch:
@@ -475,6 +475,6 @@ public ChainedCorsPolicyBuilder andForOrigin(String origin) {
 
     @Override
     public String toString() {
-        return CorsConfig.toString(this, true, anyOriginSupported, shortCircuit, policies);
+        return CorsConfig.toString(this, anyOriginSupported, shortCircuit, policies);
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/docs/DocStringExtractor.java
Patch:
@@ -17,6 +17,7 @@
 package com.linecorp.armeria.server.docs;
 
 import static com.google.common.collect.ImmutableMap.toImmutableMap;
+import static java.util.Objects.requireNonNull;
 
 import java.io.IOException;
 import java.io.UncheckedIOException;
@@ -59,6 +60,7 @@ protected DocStringExtractor(String defaultPath, String pathPropertyName) {
      * {@link #getDocStringsFromFiles(Map)} for actual processing.
      */
     public Map<String, String> getAllDocStrings(ClassLoader classLoader) {
+        requireNonNull(classLoader, "classLoader");
         return cached.computeIfAbsent(classLoader, this::getAllDocStrings0);
     }
 

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/MetricCollectingCircuitBreakerListenerTest.java
Patch:
@@ -36,7 +36,7 @@ public void test() throws Exception {
         final CircuitBreaker cb = CircuitBreaker.builder("bar").build();
 
         // Trigger the first event so that the metric group is registered.
-        l.onEventCountUpdated(cb.name(), new EventCount(1, 2));
+        l.onEventCountUpdated(cb.name(), EventCount.of(1, 2));
 
         assertThat(MoreMeters.measureAll(registry))
                 .containsEntry("foo.requests#value{name=bar,result=success}", 1.0)

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/NonBlockingCircuitBreakerTest.java
Patch:
@@ -201,7 +201,7 @@ void testNotification() throws Exception {
         cb.onFailure();
 
         // Notify updated event count
-        verify(listener, times(1)).onEventCountUpdated(name, new EventCount(0, 1));
+        verify(listener, times(1)).onEventCountUpdated(name, EventCount.of(0, 1));
         reset(listener);
 
         // Notify circuit tripped

File: testing/junit/src/main/java/com/linecorp/armeria/testing/junit/common/EventLoopGroupExtension.java
Patch:
@@ -30,9 +30,9 @@
  * >
  * >     @Test
  * >     public void test() {
- * >         ClientFactory f = new ClientFactoryBuilder()
- * >                 .workerGroup(eventLoopGroup.get())
- * >                 .build();
+ * >         ClientFactory f = ClientFactory.builder()
+ * >                                        .workerGroup(eventLoopGroup.get())
+ * >                                        .build();
  * >         ...
  * >     }
  * > }

File: testing/junit4/src/main/java/com/linecorp/armeria/testing/junit4/common/EventLoopGroupRule.java
Patch:
@@ -29,9 +29,9 @@
  * >
  * >     @Test
  * >     public void test() {
- * >         ClientFactory f = new ClientFactoryBuilder()
- * >                 .workerGroup(eventLoopGroup.get())
- * >                 .build();
+ * >         ClientFactory f = ClientFactory.builder()
+ * >                                        .workerGroup(eventLoopGroup.get())
+ * >                                        .build();
  * >         ...
  * >     }
  * > }

File: core/src/main/java/com/linecorp/armeria/internal/RequestContextAwareCompletableFuture.java
Patch:
@@ -26,7 +26,7 @@
 
 import com.linecorp.armeria.common.RequestContext;
 
-final class RequestContextAwareCompletableFuture<T> extends CompletableFuture<T> {
+class RequestContextAwareCompletableFuture<T> extends CompletableFuture<T> {
 
     private final RequestContext ctx;
 

File: core/src/main/java9/com/linecorp/armeria/internal/Java9RequestContextAwareCompletableFuture.java
Patch:
@@ -28,7 +28,7 @@
 import com.linecorp.armeria.common.RequestContext;
 import com.linecorp.armeria.common.util.SafeCloseable;
 
-final class Java9RequestContextAwareCompletableFuture<T> extends CompletableFuture<T> {
+class Java9RequestContextAwareCompletableFuture<T> extends CompletableFuture<T> {
 
     private final RequestContext ctx;
 

File: core/src/main/java/com/linecorp/armeria/client/endpoint/FileWatcherRegistry.java
Patch:
@@ -130,8 +130,8 @@ void close() throws IOException {
         }
     }
 
-    private final Map<FileSystem, FileSystemWatchContext> fileSystemWatchServiceMap
-            = new HashMap<>();
+    private final Map<FileSystem, FileSystemWatchContext> fileSystemWatchServiceMap =
+            new HashMap<>();
 
     /**
      * Registers a {@code filePath} and {@code callback} to the {@link WatchService}. When the

File: core/src/main/java/com/linecorp/armeria/client/endpoint/WeightedRoundRobinStrategy.java
Patch:
@@ -156,8 +156,8 @@ private static final class EndpointsAndWeights {
                 // accumulation
                 long totalWeight = 0;
 
-                ImmutableList.Builder<EndpointsGroupByWeight> accumulatedGroupsBuilder
-                        = ImmutableList.builderWithExpectedSize(numberDistinctWeight);
+                ImmutableList.Builder<EndpointsGroupByWeight> accumulatedGroupsBuilder =
+                        ImmutableList.builderWithExpectedSize(numberDistinctWeight);
                 EndpointsGroupByWeight currentGroup = null;
 
                 long rest = numEndpoints;

File: core/src/main/java/com/linecorp/armeria/server/composition/AbstractCompositeService.java
Patch:
@@ -165,7 +165,7 @@ public O serve(ServiceRequestContext ctx, I req) throws Exception {
 
             final ServiceRequestContext newCtx = new CompositeServiceRequestContext(
                     ctx, newRoute, result.routingResult().path());
-            try (SafeCloseable ignored = newCtx.push(false)) {
+            try (SafeCloseable ignored = newCtx.replace()) {
                 return result.value().serve(newCtx, req);
             }
         } else {

File: core/src/main/java9/com/linecorp/armeria/internal/Java9RequestContextAwareCompletableFuture.java
Patch:
@@ -270,7 +270,7 @@ public CompletableFuture<T> completeAsync(Supplier<? extends T> supplier, Execut
 
     private Supplier<T> makeContextAware(Supplier<? extends T> action) {
         return () -> {
-            try (SafeCloseable ignored = ctx.pushIfAbsent()) {
+            try (SafeCloseable ignored = ctx.push()) {
                 return action.get();
             }
         };

File: core/src/test/java/com/linecorp/armeria/common/stream/PublisherBasedStreamMessageVerification.java
Patch:
@@ -42,8 +42,8 @@ public StreamMessage<Long> createFailedPublisher() {
     @Override
     public StreamMessage<Long> createAbortedPublisher(long elements) {
         if (elements == 0) {
-            final PublisherBasedStreamMessage<Long> stream
-                    = new PublisherBasedStreamMessage<>(s -> { /* noop */ });
+            final PublisherBasedStreamMessage<Long> stream =
+                    new PublisherBasedStreamMessage<>(s -> { /* noop */ });
             stream.abort();
             return stream;
         }

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java
Patch:
@@ -185,7 +185,7 @@ final class ArmeriaServerCall<I, O> extends ServerCall<I, O>
             if (!closeCalled) {
                 // Closed by client, not by server.
                 cancelled = true;
-                try (SafeCloseable ignore = ctx.pushIfAbsent()) {
+                try (SafeCloseable ignore = ctx.push()) {
                     close(Status.CANCELLED, new Metadata());
                 }
             }

File: rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextCallableCompletable.java
Patch:
@@ -37,15 +37,15 @@ final class RequestContextCallableCompletable<T> extends Completable
 
     @Override
     protected void subscribeActual(CompletableObserver s) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             source.subscribe(new RequestContextCompletableObserver(s, assemblyContext));
         }
     }
 
     @SuppressWarnings("unchecked")
     @Override
     public T call() throws Exception {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             return ((Callable<T>) source).call();
         }
     }

File: rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextCallableFlowable.java
Patch:
@@ -39,7 +39,7 @@ final class RequestContextCallableFlowable<T> extends Flowable<T> implements Cal
     @SuppressWarnings("unchecked")
     @Override
     protected void subscribeActual(Subscriber<? super T> s) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             if (s instanceof ConditionalSubscriber) {
                 source.subscribe(new RequestContextConditionalSubscriber<>(
                         (ConditionalSubscriber<? super T>) s, assemblyContext
@@ -53,7 +53,7 @@ protected void subscribeActual(Subscriber<? super T> s) {
     @SuppressWarnings("unchecked")
     @Override
     public T call() throws Exception {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             return ((Callable<T>) source).call();
         }
     }

File: rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextCallableMaybe.java
Patch:
@@ -36,15 +36,15 @@ final class RequestContextCallableMaybe<T> extends Maybe<T> implements Callable<
 
     @Override
     protected void subscribeActual(MaybeObserver<? super T> s) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             source.subscribe(new RequestContextMaybeObserver<>(s, assemblyContext));
         }
     }
 
     @SuppressWarnings("unchecked")
     @Override
     public T call() throws Exception {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             return ((Callable<T>) source).call();
         }
     }

File: rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextCallableObservable.java
Patch:
@@ -38,15 +38,15 @@ final class RequestContextCallableObservable<T> extends Observable<T>
 
     @Override
     protected void subscribeActual(Observer<? super T> s) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             source.subscribe(new RequestContextObserver<>(s, assemblyContext));
         }
     }
 
     @SuppressWarnings("unchecked")
     @Override
     public T call() throws Exception {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             return ((Callable<T>) source).call();
         }
     }

File: rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextCallableSingle.java
Patch:
@@ -36,15 +36,15 @@ final class RequestContextCallableSingle<T> extends Single<T> implements Callabl
 
     @Override
     protected void subscribeActual(SingleObserver<? super T> s) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             source.subscribe(new RequestContextSingleObserver<>(s, assemblyContext));
         }
     }
 
     @SuppressWarnings("unchecked")
     @Override
     public T call() throws Exception {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             return ((Callable<T>) source).call();
         }
     }

File: rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextCompletable.java
Patch:
@@ -35,7 +35,7 @@ final class RequestContextCompletable extends Completable {
 
     @Override
     protected void subscribeActual(CompletableObserver s) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             source.subscribe(new RequestContextCompletableObserver(s, assemblyContext));
         }
     }

File: rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextCompletableObserver.java
Patch:
@@ -39,21 +39,21 @@ public void onSubscribe(Disposable d) {
             return;
         }
         disposable = d;
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             actual.onSubscribe(this);
         }
     }
 
     @Override
     public void onError(Throwable t) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             actual.onError(t);
         }
     }
 
     @Override
     public void onComplete() {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             actual.onComplete();
         }
     }

File: rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextConnectableFlowable.java
Patch:
@@ -38,7 +38,7 @@ final class RequestContextConnectableFlowable<T> extends ConnectableFlowable<T>
     @SuppressWarnings("unchecked")
     @Override
     protected void subscribeActual(Subscriber<? super T> s) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             if (s instanceof ConditionalSubscriber) {
                 source.subscribe(new RequestContextConditionalSubscriber<>(
                         (ConditionalSubscriber<? super T>) s, assemblyContext
@@ -51,7 +51,7 @@ protected void subscribeActual(Subscriber<? super T> s) {
 
     @Override
     public void connect(Consumer<? super Disposable> connection) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             source.connect(connection);
         }
     }

File: rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextConnectableObservable.java
Patch:
@@ -36,14 +36,14 @@ final class RequestContextConnectableObservable<T> extends ConnectableObservable
 
     @Override
     protected void subscribeActual(Observer<? super T> s) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             source.subscribe(new RequestContextObserver<>(s, assemblyContext));
         }
     }
 
     @Override
     public void connect(Consumer<? super Disposable> connection) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             source.connect(connection);
         }
     }

File: rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextFlowable.java
Patch:
@@ -37,7 +37,7 @@ final class RequestContextFlowable<T> extends Flowable<T> {
 
     @Override
     protected void subscribeActual(Subscriber<? super T> s) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             if (s instanceof ConditionalSubscriber) {
                 source.subscribe(new RequestContextConditionalSubscriber<>(
                         (ConditionalSubscriber<? super T>) s, assemblyContext

File: rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextMaybe.java
Patch:
@@ -35,7 +35,7 @@ final class RequestContextMaybe<T> extends Maybe<T> {
 
     @Override
     protected void subscribeActual(MaybeObserver<? super T> s) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             source.subscribe(new RequestContextMaybeObserver<>(s, assemblyContext));
         }
     }

File: rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextObservable.java
Patch:
@@ -35,7 +35,7 @@ final class RequestContextObservable<T> extends Observable<T> {
 
     @Override
     protected void subscribeActual(Observer<? super T> s) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             source.subscribe(new RequestContextObserver<>(s, assemblyContext));
         }
     }

File: rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextObserver.java
Patch:
@@ -33,21 +33,21 @@ final class RequestContextObserver<T> extends BasicFuseableObserver<T, T> {
 
     @Override
     public void onNext(T t) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             downstream.onNext(t);
         }
     }
 
     @Override
     public void onError(Throwable t) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             downstream.onError(t);
         }
     }
 
     @Override
     public void onComplete() {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             downstream.onComplete();
         }
     }

File: rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextParallelFlowable.java
Patch:
@@ -57,7 +57,7 @@ public void subscribe(Subscriber<? super T>[] s) {
                 parents[i] = new RequestContextSubscriber<>(z, assemblyContext);
             }
         }
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             source.subscribe(parents);
         }
     }

File: rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextScalarCallableCompletable.java
Patch:
@@ -37,15 +37,15 @@ final class RequestContextScalarCallableCompletable<T> extends Completable
 
     @Override
     protected void subscribeActual(CompletableObserver s) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             source.subscribe(new RequestContextCompletableObserver(s, assemblyContext));
         }
     }
 
     @SuppressWarnings("unchecked")
     @Override
     public T call() {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             return ((ScalarCallable<T>) source).call();
         }
     }

File: rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextScalarCallableFlowable.java
Patch:
@@ -39,7 +39,7 @@ final class RequestContextScalarCallableFlowable<T> extends Flowable<T>
     @SuppressWarnings("unchecked")
     @Override
     protected void subscribeActual(Subscriber<? super T> s) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             if (s instanceof ConditionalSubscriber) {
                 source.subscribe(new RequestContextConditionalSubscriber<>(
                         (ConditionalSubscriber<? super T>) s, assemblyContext
@@ -53,7 +53,7 @@ protected void subscribeActual(Subscriber<? super T> s) {
     @SuppressWarnings("unchecked")
     @Override
     public T call() {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             return ((ScalarCallable<T>) source).call();
         }
     }

File: rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextScalarCallableMaybe.java
Patch:
@@ -36,15 +36,15 @@ final class RequestContextScalarCallableMaybe<T> extends Maybe<T>
 
     @Override
     protected void subscribeActual(MaybeObserver<? super T> s) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             source.subscribe(new RequestContextMaybeObserver<>(s, assemblyContext));
         }
     }
 
     @SuppressWarnings("unchecked")
     @Override
     public T call() {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             return ((ScalarCallable<T>) source).call();
         }
     }

File: rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextScalarCallableObservable.java
Patch:
@@ -36,15 +36,15 @@ final class RequestContextScalarCallableObservable<T> extends Observable<T> impl
 
     @Override
     protected void subscribeActual(Observer<? super T> s) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             source.subscribe(new RequestContextObserver<>(s, assemblyContext));
         }
     }
 
     @SuppressWarnings("unchecked")
     @Override
     public T call() {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             return ((ScalarCallable<T>) source).call();
         }
     }

File: rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextScalarCallableSingle.java
Patch:
@@ -36,15 +36,15 @@ final class RequestContextScalarCallableSingle<T> extends Single<T>
 
     @Override
     protected void subscribeActual(SingleObserver<? super T> s) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             source.subscribe(new RequestContextSingleObserver<>(s, assemblyContext));
         }
     }
 
     @SuppressWarnings("unchecked")
     @Override
     public T call() {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             return ((ScalarCallable<T>) source).call();
         }
     }

File: rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextSingle.java
Patch:
@@ -35,7 +35,7 @@ final class RequestContextSingle<T> extends Single<T> {
 
     @Override
     protected void subscribeActual(SingleObserver<? super T> s) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             source.subscribe(new RequestContextSingleObserver<>(s, assemblyContext));
         }
     }

File: rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextSingleObserver.java
Patch:
@@ -39,21 +39,21 @@ public void onSubscribe(Disposable d) {
             return;
         }
         disposable = d;
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             actual.onSubscribe(this);
         }
     }
 
     @Override
     public void onError(Throwable t) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             actual.onError(t);
         }
     }
 
     @Override
     public void onSuccess(T value) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             actual.onSuccess(value);
         }
     }

File: rxjava/src/main/java/com/linecorp/armeria/common/rxjava/RequestContextSubscriber.java
Patch:
@@ -35,21 +35,21 @@ final class RequestContextSubscriber<T> extends BasicFuseableSubscriber<T, T> {
 
     @Override
     public void onNext(T t) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             downstream.onNext(t);
         }
     }
 
     @Override
     public void onError(Throwable t) {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             downstream.onError(t);
         }
     }
 
     @Override
     public void onComplete() {
-        try (SafeCloseable ignored = assemblyContext.pushIfAbsent()) {
+        try (SafeCloseable ignored = assemblyContext.push()) {
             downstream.onComplete();
         }
     }

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlMessageUtil.java
Patch:
@@ -60,8 +60,8 @@ final class SamlMessageUtil {
 
     private static final SignatureBuilder signatureBuilder = new SignatureBuilder();
 
-    private static final SAMLSignatureProfileValidator signatureProfileValidator
-            = new SAMLSignatureProfileValidator();
+    private static final SAMLSignatureProfileValidator signatureProfileValidator =
+            new SAMLSignatureProfileValidator();
 
     static {
         SamlInitializer.ensureAvailability();

File: core/src/main/java/com/linecorp/armeria/client/HttpClientFactory.java
Patch:
@@ -268,7 +268,7 @@ private <T> T newClient(URI uri, Scheme scheme, Endpoint endpoint, Class<T> clie
     private DefaultWebClient newWebClient(URI uri, Scheme scheme, Endpoint endpoint, ClientOptions options,
                                           HttpClient delegate) {
         return new DefaultWebClient(
-                new DefaultClientBuilderParams(this, uri, WebClient.class, options),
+                ClientBuilderParams.of(this, uri, WebClient.class, options),
                 delegate, meterRegistry, scheme.sessionProtocol(), endpoint);
     }
 

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java
Patch:
@@ -24,7 +24,6 @@
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.ResponseTimeoutException;
 import com.linecorp.armeria.client.RpcClient;
-import com.linecorp.armeria.common.DefaultRpcResponse;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;
@@ -125,7 +124,7 @@ private void doExecute0(ClientRequestContext ctx, RpcRequest req,
         }
 
         final RpcResponse res = executeWithFallback(delegate(), derivedCtx,
-                                                    (context, cause) -> new DefaultRpcResponse(cause));
+                                                    (context, cause) -> RpcResponse.ofFailure(cause));
 
         res.handle((unused1, unused2) -> {
             retryStrategyWithContent().shouldRetry(derivedCtx, res).handle((backoff, unused3) -> {

File: core/src/main/java/com/linecorp/armeria/common/DefaultHttpRequest.java
Patch:
@@ -34,7 +34,10 @@ public class DefaultHttpRequest extends DefaultStreamMessage<HttpObject> impleme
 
     /**
      * Creates a new instance with the specified headers.
+     *
+     * @deprecated Use {@link HttpRequest#streaming(RequestHeaders)}.
      */
+    @Deprecated
     public DefaultHttpRequest(RequestHeaders headers) {
         this.headers = requireNonNull(headers, "headers");
     }

File: core/src/main/java/com/linecorp/armeria/server/ServerPort.java
Patch:
@@ -120,6 +120,7 @@ public InetSocketAddress localAddress() {
      *
      * @deprecated Use {@link #protocols()}.
      */
+    @Nullable
     @Deprecated
     public SessionProtocol protocol() {
         return Iterables.getFirst(protocols, null);

File: core/src/main/java/com/linecorp/armeria/server/cors/CorsDecoratorFactoryFunction.java
Patch:
@@ -31,7 +31,7 @@ public final class CorsDecoratorFactoryFunction implements DecoratorFactoryFunct
     @Override
     public Function<? super HttpService, ? extends HttpService> newDecorator(CorsDecorator parameter) {
         requireNonNull(parameter, "parameter");
-        final CorsServiceBuilder cb = CorsServiceBuilder.forOrigins(parameter.origins());
+        final CorsServiceBuilder cb = CorsService.builder(parameter.origins());
         cb.firstPolicyBuilder.setConfig(parameter);
 
         final Function<? super HttpService, CorsService> decorator = cb.newDecorator();

File: core/src/main/java/com/linecorp/armeria/server/cors/CorsDecoratorsFactoryFunction.java
Patch:
@@ -36,7 +36,7 @@ public final class CorsDecoratorsFactoryFunction implements DecoratorFactoryFunc
         ensureValidConfig(parameter);
         final CorsDecorator[] policies = parameter.value();
         final CorsDecorator corsDecorator = policies[0];
-        final CorsServiceBuilder cb = CorsServiceBuilder.forOrigins(corsDecorator.origins());
+        final CorsServiceBuilder cb = CorsService.builder(corsDecorator.origins());
         if (parameter.shortCircuit()) {
             cb.shortCircuit();
         }

File: core/src/main/java/com/linecorp/armeria/server/file/ClassPathHttpVfs.java
Patch:
@@ -52,7 +52,7 @@ public HttpFile get(String path, Clock clock, @Nullable String contentEncoding,
                         HttpHeaders additionalHeaders) {
         RouteUtil.ensureAbsolutePath(path, "path");
         final String resourcePath = rootDir.isEmpty() ? path.substring(1) : rootDir + path;
-        final HttpFileBuilder builder = HttpFileBuilder.ofResource(classLoader, resourcePath);
+        final HttpFileBuilder builder = HttpFile.builder(classLoader, resourcePath);
         return FileSystemHttpVfs.build(builder, clock, path, contentEncoding, additionalHeaders);
     }
 

File: core/src/main/java/com/linecorp/armeria/server/file/FileSystemHttpVfs.java
Patch:
@@ -55,7 +55,7 @@ public HttpFile get(String path, Clock clock, @Nullable String contentEncoding,
                         HttpHeaders additionalHeaders) {
         path = normalizePath(path);
 
-        final HttpFileBuilder builder = HttpFileBuilder.of(Paths.get(rootDir + path));
+        final HttpFileBuilder builder = HttpFile.builder(Paths.get(rootDir + path));
         return build(builder, clock, path, contentEncoding, additionalHeaders);
     }
 

File: core/src/test/java/com/linecorp/armeria/client/DefaultWebClientTest.java
Patch:
@@ -87,9 +87,9 @@ void testWithoutRequestParamsUndefinedEndPoint() throws Exception {
         assertThat(concatPath).isEqualTo("/helloWorld/test");
     }
 
-    private DefaultWebClient createDefaultWebClient(String clientUriPath, HttpClient mockClientDelegate,
-                                                    String endpoint) throws URISyntaxException {
-        final ClientBuilderParams clientBuilderParams = new DefaultClientBuilderParams(
+    private static DefaultWebClient createDefaultWebClient(String clientUriPath, HttpClient mockClientDelegate,
+                                                           String endpoint) throws URISyntaxException {
+        final ClientBuilderParams clientBuilderParams = ClientBuilderParams.of(
                 ClientFactory.ofDefault(), new URI(clientUriPath), WebClient.class, ClientOptions.of());
         return new DefaultWebClient(
                 clientBuilderParams, mockClientDelegate, NoopMeterRegistry.get(),

File: core/src/test/java/com/linecorp/armeria/internal/metric/RequestMetricSupportTest.java
Patch:
@@ -29,11 +29,11 @@
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.client.ResponseTimeoutException;
 import com.linecorp.armeria.client.WriteTimeoutException;
-import com.linecorp.armeria.common.DefaultRpcRequest;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.ResponseHeaders;
+import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.metric.MeterIdPrefixFunction;
 import com.linecorp.armeria.common.metric.PrometheusMeterRegistries;
@@ -303,7 +303,7 @@ void rpc() {
 
         ctx.logBuilder().requestHeaders(RequestHeaders.of(HttpMethod.POST, "/bar"));
         ctx.logBuilder().requestFirstBytesTransferred();
-        ctx.logBuilder().requestContent(new DefaultRpcRequest(Object.class, "baz"), null);
+        ctx.logBuilder().requestContent(RpcRequest.of(Object.class, "baz"), null);
 
         assertThat(measureAll(registry)).containsEntry("bar.activeRequests#value{method=baz}", 1.0);
     }

File: core/src/test/java/com/linecorp/armeria/server/logging/AccessLogFormatsTest.java
Patch:
@@ -47,7 +47,6 @@
 
 import org.junit.jupiter.api.Test;
 
-import com.linecorp.armeria.common.DefaultRpcRequest;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
@@ -56,6 +55,7 @@
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.RequestId;
 import com.linecorp.armeria.common.ResponseHeaders;
+import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogAvailability;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
@@ -303,7 +303,7 @@ void requestLogAvailabilityException() {
         // RequestLogAvailabilityException will be raised inside AccessLogger#format before injecting each
         // component to RequestLog. So we cannot get the expected log message here.
         assertThat(AccessLogger.format(AccessLogFormats.COMMON, log)).doesNotEndWith(expectedLogMessage);
-        logBuilder.requestContent(new DefaultRpcRequest(Object.class, "rpcMethod"), null);
+        logBuilder.requestContent(RpcRequest.of(Object.class, "rpcMethod"), null);
         assertThat(AccessLogger.format(AccessLogFormats.COMMON, log)).doesNotEndWith(expectedLogMessage);
         logBuilder.endRequest();
         assertThat(AccessLogger.format(AccessLogFormats.COMMON, log)).doesNotEndWith(expectedLogMessage);

File: dropwizard/src/main/java/com/linecorp/armeria/dropwizard/ArmeriaServerFactory.java
Patch:
@@ -286,10 +286,9 @@ private ServerBuilder getArmeriaServerBuilder(Server server,
      * @param jettyServer An instance of a Jetty {@link Server}
      * @return Armeria {@link JettyService} for the provided jettyServer
      */
-    @JsonIgnore
-    private JettyService getJettyService(Server jettyServer) {
+    private static JettyService getJettyService(Server jettyServer) {
         Objects.requireNonNull(jettyServer, "Armeria cannot build a service from a null server");
-        return JettyService.forServer(jettyServer);
+        return JettyService.of(jettyServer);
     }
 
     /**

File: examples/server-sent-events/src/main/java/example/armeria/server/sse/Main.java
Patch:
@@ -75,7 +75,7 @@ public Publisher<ServerSentEvent> sendEvents() {
                                                                   .build());
                          }
                      })
-                     .service("/", HttpFile.ofResource(Main.class.getClassLoader(), "index.html").asService())
+                     .service("/", HttpFile.of(Main.class.getClassLoader(), "index.html").asService())
                      .decorator(LoggingService.newDecorator())
                      .disableServerHeader()
                      .disableDateHeader()

File: examples/spring-boot-tomcat/src/main/java/example/springframework/boot/tomcat/HelloConfiguration.java
Patch:
@@ -45,7 +45,7 @@ public HealthChecker tomcatConnectorHealthChecker(ServletWebServerApplicationCon
      */
     @Bean
     public TomcatService tomcatService(ServletWebServerApplicationContext applicationContext) {
-        return TomcatService.forConnector(getConnector(applicationContext));
+        return TomcatService.of(getConnector(applicationContext));
     }
 
     /**

File: it/spring/boot-tomcat/src/main/java/com/linecorp/armeria/spring/tomcat/demo/SpringTomcatApplication.java
Patch:
@@ -47,7 +47,7 @@ public ArmeriaServerConfigurator armeriaTomcat() {
             final Tomcat tomcat = ((TomcatWebServer) webServer).getTomcat();
 
             return serverBuilder -> serverBuilder.service("prefix:/tomcat/api/rest/v1",
-                                                          TomcatService.forTomcat(tomcat));
+                                                          TomcatService.of(tomcat));
         }
         return serverBuilder -> { };
     }

File: jetty/src/test/java/com/linecorp/armeria/server/jetty/UnmanagedJettyServiceTest.java
Patch:
@@ -42,7 +42,7 @@ protected void configure(ServerBuilder sb) throws Exception {
             jetty.start();
             sb.serviceUnder(
                     "/jsp/",
-                    JettyService.forServer(jetty).decorate(LoggingService.newDecorator()));
+                    JettyService.of(jetty).decorate(LoggingService.newDecorator()));
         }
     };
 

File: spring/boot-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfiguration.java
Patch:
@@ -62,6 +62,7 @@
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.Route;
+import com.linecorp.armeria.server.cors.CorsService;
 import com.linecorp.armeria.server.cors.CorsServiceBuilder;
 import com.linecorp.armeria.spring.ArmeriaServerConfigurator;
 
@@ -124,8 +125,7 @@ ArmeriaServerConfigurator actuatorServerConfigurator(
         return sb -> {
             final CorsServiceBuilder cors;
             if (!corsProperties.getAllowedOrigins().isEmpty()) {
-                cors = CorsServiceBuilder.forOrigins(
-                        corsProperties.getAllowedOrigins());
+                cors = CorsService.builder(corsProperties.getAllowedOrigins());
 
                 if (!corsProperties.getAllowedMethods().contains("*")) {
                     if (corsProperties.getAllowedMethods().isEmpty()) {

File: thrift/src/main/java/com/linecorp/armeria/client/thrift/DefaultTHttpClient.java
Patch:
@@ -25,7 +25,6 @@
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.client.RpcClient;
 import com.linecorp.armeria.client.UserClient;
-import com.linecorp.armeria.common.DefaultRpcResponse;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;
@@ -67,6 +66,6 @@ private RpcResponse execute0(
 
         final RpcRequest call = RpcRequest.of(serviceType, method, args);
         return execute(HttpMethod.POST, pathAndQuery.path(), null, serviceName, call,
-                       (ctx, cause) -> new DefaultRpcResponse(cause));
+                       (ctx, cause) -> RpcResponse.ofFailure(cause));
     }
 }

File: thrift/src/main/java/com/linecorp/armeria/server/thrift/ThriftCallService.java
Patch:
@@ -133,12 +133,12 @@ public RpcResponse serve(ServiceRequestContext ctx, RpcRequest call) throws Exce
                     return reply;
                 }
                 // Should never reach here because of the way ThriftServiceEntry is created
-                return new DefaultRpcResponse(new TApplicationException(
+                return RpcResponse.ofFailure(new TApplicationException(
                         TApplicationException.UNKNOWN, "null implementation: " + call.method()));
             }
         }
 
-        return new DefaultRpcResponse(new TApplicationException(
+        return RpcResponse.ofFailure(new TApplicationException(
                 TApplicationException.UNKNOWN_METHOD, "unknown method: " + call.method()));
     }
 

File: zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroup.java
Patch:
@@ -37,7 +37,7 @@
  * {@link Endpoint}s from a ZooKeeper using {@link NodeValueCodec} and updates it when the children of the
  * zNode changes.
  */
-public class ZooKeeperEndpointGroup extends DynamicEndpointGroup {
+public final class ZooKeeperEndpointGroup extends DynamicEndpointGroup {
 
     private static final Logger logger = LoggerFactory.getLogger(ZooKeeperEndpointGroup.class);
 
@@ -56,7 +56,7 @@ public class ZooKeeperEndpointGroup extends DynamicEndpointGroup {
      * @param sessionTimeout  ZooKeeper session timeout in milliseconds
      */
     public ZooKeeperEndpointGroup(String zkConnectionStr, String zNodePath, int sessionTimeout) {
-        this(zkConnectionStr, zNodePath, sessionTimeout, NodeValueCodec.DEFAULT);
+        this(zkConnectionStr, zNodePath, sessionTimeout, NodeValueCodec.ofDefault());
     }
 
     /**

File: zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListener.java
Patch:
@@ -107,7 +107,7 @@ public ZooKeeperUpdatingListener(String zkConnectionStr, String zNodePath, int s
                                         .sessionTimeoutMs(sessionTimeout)
                                         .build();
         this.zNodePath = requireNonNull(zNodePath, "zNodePath");
-        nodeValueCodec = NodeValueCodec.DEFAULT;
+        nodeValueCodec = NodeValueCodec.ofDefault();
         this.endpoint = endpoint;
         closeClientOnStop = true;
     }

File: zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListenerBuilder.java
Patch:
@@ -69,7 +69,7 @@ public final class ZooKeeperUpdatingListenerBuilder {
     private int sessionTimeoutMillis = ZooKeeperDefaults.DEFAULT_SESSION_TIMEOUT_MS;
     @Nullable
     private Endpoint endpoint;
-    private NodeValueCodec nodeValueCodec = NodeValueCodec.DEFAULT;
+    private NodeValueCodec nodeValueCodec = NodeValueCodec.ofDefault();
 
     /**
      * Creates a {@link ZooKeeperUpdatingListenerBuilder} with a {@link CuratorFramework} instance and a zNode

File: zookeeper/src/test/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroupTest.java
Patch:
@@ -98,7 +98,7 @@ private void setNodeChild(Set<Endpoint> children) throws Throwable {
             children.forEach(endpoint -> {
                 try {
                     zk.create(zNode + '/' + endpoint.host() + '_' + endpoint.port(),
-                              NodeValueCodec.DEFAULT.encode(endpoint),
+                              NodeValueCodec.ofDefault().encode(endpoint),
                               Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
                 } catch (Exception e) {
                     Exceptions.throwUnsafely(e);

File: zookeeper/src/test/java/com/linecorp/armeria/server/zookeeper/ZooKeeperRegistrationTest.java
Patch:
@@ -86,7 +86,7 @@ public void testServerNodeCreateAndDelete() {
             try {
                 sampleEndpoints.forEach(endpoint -> {
                     try {
-                        assertThat(NodeValueCodec.DEFAULT.decode(zk.getData(
+                        assertThat(NodeValueCodec.ofDefault().decode(zk.getData(
                                 zNode + '/' + endpoint.host() + '_' + endpoint.port()).get()))
                                 .isEqualTo(endpoint);
                     } catch (Throwable throwable) {

File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java
Patch:
@@ -207,6 +207,7 @@ static ClientRequestContextBuilder builder(RpcRequest request, URI uri) {
      *
      * @see #attr(AttributeKey)
      */
+    @Nullable
     <V> V ownAttr(AttributeKey<V> key);
 
     /**

File: core/src/test/java/com/linecorp/armeria/client/ClientRequestContextInitFailureTest.java
Patch:
@@ -62,6 +62,9 @@ void threadLocalCustomizerFailure() {
                 assertThat(actualCause).isSameAs(cause);
             });
         }
+
+        // Thread-local state must be cleaned up.
+        assertThat(ClientThreadLocalState.get()).isNull();
     }
 
     private static void assertFailure(String authority, Consumer<Throwable> requirements) {

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaChannel.java
Patch:
@@ -166,8 +166,8 @@ private DefaultClientRequestContext newContext(HttpMethod method, HttpRequest re
                 sessionProtocol,
                 options().requestIdGenerator().get(),
                 method,
-                uri().getRawPath(),
-                uri().getRawQuery(),
+                req.path(),
+                null,
                 null,
                 options(),
                 req,

File: core/src/main/java/com/linecorp/armeria/client/endpoint/EndpointGroup.java
Patch:
@@ -149,7 +149,7 @@ default void removeListener(Consumer<?> listener) {}
     @Override
     default void close() {}
 
-    /*
+    /**
      * Creates a new {@link EndpointGroup} that tries this {@link EndpointGroup} first and then the specified
      * {@link EndpointGroup} when this {@link EndpointGroup} does not have a requested resource.
      *

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java
Patch:
@@ -329,6 +329,9 @@ default MediaType negotiatedProduceType() {
      */
     boolean verboseResponses();
 
+    /**
+     * Returns the {@link AccessLogWriter}.
+     */
     AccessLogWriter accessLogWriter();
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/auth/OAuth2Token.java
Patch:
@@ -38,6 +38,9 @@ private OAuth2Token(String accessToken) {
         this.accessToken = requireNonNull(accessToken, "accessToken");
     }
 
+    /**
+     * Returns the access token.
+     */
     public String accessToken() {
         return accessToken;
     }

File: dropwizard/src/main/java/com/linecorp/armeria/dropwizard/logging/AccessLogWriterFactory.java
Patch:
@@ -29,5 +29,8 @@
         property = "type"
 )
 public interface AccessLogWriterFactory extends Discoverable {
+    /**
+     * Returns the {@link AccessLogWriter}.
+     */
     AccessLogWriter getWriter();
 }

File: dropwizard/src/test/java/com/linecorp/armeria/dropwizard/ArmeriaConnectorFactoryTest.java
Patch:
@@ -210,7 +210,7 @@ public void testFactoryDefaults() {
 
             assertThat(factory.getInitialConnectionWindowSize())
                     .isEqualTo(Flags.defaultHttp2InitialConnectionWindowSize());
-            assertThat(factory.getInitialStreamingWindowSize())
+            assertThat(factory.getInitialStreamWindowSize())
                     .isEqualTo(Flags.defaultHttp2InitialStreamWindowSize());
             assertThat(factory.getMaxStreamsPerConnection())
                     .isEqualTo(Flags.defaultHttp2MaxStreamsPerConnection());
@@ -240,8 +240,8 @@ public void testSetters() {
             factory.setInitialConnectionWindowSize(0);
             assertThat(factory.getInitialConnectionWindowSize()).isEqualTo(0);
 
-            factory.setInitialStreamingWindowSize(0);
-            assertThat(factory.getInitialStreamingWindowSize()).isEqualTo(0);
+            factory.setInitialStreamWindowSize(0);
+            assertThat(factory.getInitialStreamWindowSize()).isEqualTo(0);
 
             factory.setMaxStreamsPerConnection(0);
             assertThat(factory.getMaxStreamsPerConnection()).isEqualTo(0);

File: rxjava/src/main/java/com/linecorp/armeria/server/rxjava/ObservableResponseConverterFunctionProvider.java
Patch:
@@ -29,6 +29,9 @@
 import io.reactivex.Observable;
 import io.reactivex.Single;
 
+/**
+ * Provides an {@link ObservableResponseConverterFunction} to annotated services.
+ */
 public class ObservableResponseConverterFunctionProvider implements ResponseConverterFunctionProvider {
 
     @Nullable

File: spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaAutoConfiguration.java
Patch:
@@ -52,6 +52,9 @@
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.Metrics;
 
+/**
+ * Spring Boot {@link Configuration} that provides Armeria integration.
+ */
 @Configuration
 @EnableConfigurationProperties(ArmeriaSettings.class)
 @ConditionalOnMissingBean(Server.class)

File: benchmarks/src/jmh/java/com/linecorp/armeria/core/client/retry/WithDuplicator.java
Patch:
@@ -21,7 +21,7 @@
 
 import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.client.retry.RetryStrategyWithContent;
-import com.linecorp.armeria.client.retry.RetryingHttpClient;
+import com.linecorp.armeria.client.retry.RetryingClient;
 import com.linecorp.armeria.common.HttpResponse;
 
 @State(Scope.Benchmark)
@@ -33,8 +33,8 @@ protected WebClient newClient() {
                 (ctx, response) -> response.aggregate().handle((unused1, unused2) -> null);
 
         return WebClient.builder(baseUrl())
-                        .decorator(RetryingHttpClient.builder(retryStrategy)
-                                                     .newDecorator())
+                        .decorator(RetryingClient.builder(retryStrategy)
+                                                 .newDecorator())
                         .build();
     }
 }

File: benchmarks/src/jmh/java/com/linecorp/armeria/core/client/retry/WithoutDuplicator.java
Patch:
@@ -21,15 +21,15 @@
 
 import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.client.retry.RetryStrategy;
-import com.linecorp.armeria.client.retry.RetryingHttpClient;
+import com.linecorp.armeria.client.retry.RetryingClient;
 
 @State(Scope.Benchmark)
 public class WithoutDuplicator extends RetryingClientBase {
 
     @Override
     protected WebClient newClient() {
         return WebClient.builder(baseUrl())
-                        .decorator(RetryingHttpClient.newDecorator(RetryStrategy.never()))
+                        .decorator(RetryingClient.newDecorator(RetryStrategy.never()))
                         .build();
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/AbstractCircuitBreakerClientBuilder.java
Patch:
@@ -27,7 +27,8 @@
 import com.linecorp.armeria.common.Response;
 
 /**
- * A skeletal builder implementation that builds a new {@link CircuitBreakerClient} or its decorator function.
+ * A skeletal builder implementation that builds a new {@link AbstractCircuitBreakerClient} or
+ * its decorator function.
  *
  * @param <O> the type of incoming {@link Response} of the {@link Client}
  */

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRpcClient.java
Patch:
@@ -29,7 +29,7 @@
  * An {@link RpcClient} decorator that handles failures of RPC remote invocation based on
  * circuit breaker pattern.
  */
-public final class CircuitBreakerRpcClient extends CircuitBreakerClient<RpcRequest, RpcResponse>
+public final class CircuitBreakerRpcClient extends AbstractCircuitBreakerClient<RpcRequest, RpcResponse>
         implements RpcClient {
 
     /**

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * An {@link RpcClient} decorator that handles failures of an invocation and retries RPC requests.
  */
-public final class RetryingRpcClient extends RetryingClient<RpcRequest, RpcResponse>
+public final class RetryingRpcClient extends AbstractRetryingClient<RpcRequest, RpcResponse>
         implements RpcClient {
 
     /**

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClientBuilder.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Builds a new {@link RetryingRpcClient} or its decorator function.
  */
-public final class RetryingRpcClientBuilder extends RetryingClientBuilder<RpcResponse> {
+public final class RetryingRpcClientBuilder extends AbstractRetryingClientBuilder<RpcResponse> {
 
     /**
      * Creates a new builder with the specified {@link RetryStrategyWithContent}.

File: core/src/main/java/com/linecorp/armeria/common/Flags.java
Patch:
@@ -42,7 +42,7 @@
 
 import com.linecorp.armeria.client.ClientFactoryBuilder;
 import com.linecorp.armeria.client.retry.Backoff;
-import com.linecorp.armeria.client.retry.RetryingHttpClient;
+import com.linecorp.armeria.client.retry.RetryingClient;
 import com.linecorp.armeria.client.retry.RetryingRpcClient;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.common.util.Sampler;
@@ -727,7 +727,7 @@ public static String defaultBackoffSpec() {
 
     /**
      * Returns the default maximum number of total attempts. Note that this value has effect only if a user
-     * did not specify it when creating a {@link RetryingHttpClient} or a {@link RetryingRpcClient}.
+     * did not specify it when creating a {@link RetryingClient} or a {@link RetryingRpcClient}.
      *
      * <p>The default value of this flag is {@value #DEFAULT_DEFAULT_MAX_TOTAL_ATTEMPTS}. Specify the
      * {@code -Dcom.linecorp.armeria.defaultMaxTotalAttempts=<integer>} JVM option to

File: core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotatedServiceTypeUtil.java
Patch:
@@ -25,7 +25,7 @@
 
 import com.google.common.collect.ImmutableMap;
 
-final class AnnotatedHttpServiceTypeUtil {
+final class AnnotatedServiceTypeUtil {
 
     /**
      * Supported types and functions which convert a string to the desired type.
@@ -113,5 +113,5 @@ static <T> T stringToType(String str, Class<T> clazz) {
                 "Can't convert '" + str + "' to type '" + clazz.getSimpleName() + "'.");
     }
 
-    private AnnotatedHttpServiceTypeUtil() {}
+    private AnnotatedServiceTypeUtil() {}
 }

File: core/src/main/java/com/linecorp/armeria/server/Service.java
Patch:
@@ -62,10 +62,10 @@ default void serviceAdded(ServiceConfig cfg) throws Exception {}
      * Use this method instead of an explicit downcast. For example:
      * <pre>{@code
      * HttpService s = new MyService().decorate(LoggingService.newDecorator())
-     *                                .decorate(HttpAuthService.newDecorator());
+     *                                .decorate(AuthService.newDecorator());
      * MyService s1 = s.as(MyService.class);
      * LoggingService s2 = s.as(LoggingService.class);
-     * AuthService s3 = s.as(HttpAuthService.class);
+     * AuthService s3 = s.as(AuthService.class);
      * }</pre>
      *
      * @param type the type of the object to return

File: core/src/main/java/com/linecorp/armeria/server/auth/AuthFailureHandler.java
Patch:
@@ -32,7 +32,7 @@
  * @param <I> the type of incoming {@link Request}. Must be {@link HttpRequest} or {@link RpcRequest}.
  * @param <O> the type of outgoing {@link Response}. Must be {@link HttpResponse} or {@link RpcResponse}.
  *
- * @see HttpAuthServiceBuilder#onFailure(AuthFailureHandler)
+ * @see AuthServiceBuilder#onFailure(AuthFailureHandler)
  */
 @FunctionalInterface
 public interface AuthFailureHandler<I extends Request, O extends Response> {

File: core/src/main/java/com/linecorp/armeria/server/auth/AuthSuccessHandler.java
Patch:
@@ -30,7 +30,7 @@
  * @param <I> the type of incoming {@link Request}. Must be {@link HttpRequest} or {@link RpcRequest}.
  * @param <O> the type of outgoing {@link Response}. Must be {@link HttpResponse} or {@link RpcResponse}.
  *
- * @see HttpAuthServiceBuilder#onSuccess(AuthSuccessHandler)
+ * @see AuthServiceBuilder#onSuccess(AuthSuccessHandler)
  */
 @FunctionalInterface
 public interface AuthSuccessHandler<I extends Request, O extends Response> {

File: core/src/main/java/com/linecorp/armeria/server/auth/BasicTokenExtractor.java
Patch:
@@ -39,7 +39,7 @@
 
 /**
  * Extracts {@link BasicToken} from {@link RequestHeaders}, in order to be used by
- * {@link HttpAuthServiceBuilder}.
+ * {@link AuthServiceBuilder}.
  */
 final class BasicTokenExtractor implements Function<RequestHeaders, BasicToken> {
 

File: core/src/main/java/com/linecorp/armeria/server/auth/OAuth1aTokenExtractor.java
Patch:
@@ -37,7 +37,7 @@
 
 /**
  * Extracts {@link OAuth1aToken} from {@link RequestHeaders}, in order to be used by
- * {@link HttpAuthServiceBuilder}.
+ * {@link AuthServiceBuilder}.
  */
 final class OAuth1aTokenExtractor implements Function<RequestHeaders, OAuth1aToken> {
 

File: core/src/main/java/com/linecorp/armeria/server/auth/OAuth2TokenExtractor.java
Patch:
@@ -36,7 +36,7 @@
 
 /**
  * Extracts {@link OAuth2Token} from {@link RequestHeaders}, in order to be used by
- * {@link HttpAuthServiceBuilder}.
+ * {@link AuthServiceBuilder}.
  */
 final class OAuth2TokenExtractor implements Function<RequestHeaders, OAuth2Token> {
 

File: core/src/main/java/com/linecorp/armeria/server/encoding/HttpEncodedResponse.java
Patch:
@@ -65,7 +65,7 @@ class HttpEncodedResponse extends FilteredHttpResponse {
         this.encodingType = requireNonNull(encodingType, "encodingType");
         this.encodableContentTypePredicate = requireNonNull(encodableContentTypePredicate,
                                                             "encodableContentTypePredicate");
-        this.minBytesToForceChunkedAndEncoding = HttpEncodingService.validateMinBytesToForceChunkedAndEncoding(
+        this.minBytesToForceChunkedAndEncoding = EncodingService.validateMinBytesToForceChunkedAndEncoding(
                 minBytesToForceChunkedAndEncoding);
     }
 

File: core/src/main/java/com/linecorp/armeria/server/file/HttpVfs.java
Patch:
@@ -31,7 +31,7 @@
 import io.micrometer.core.instrument.Tag;
 
 /**
- * A virtual file system that provides the files requested by {@link HttpFileService}.
+ * A virtual file system that provides the files requested by {@link FileService}.
  */
 public interface HttpVfs {
 

File: core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceBuilder.java
Patch:
@@ -31,7 +31,7 @@
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.Service;
-import com.linecorp.armeria.server.auth.HttpAuthService;
+import com.linecorp.armeria.server.auth.AuthService;
 
 /**
  * Builds a {@link HealthCheckService}.
@@ -204,7 +204,7 @@ public HealthCheckServiceBuilder longPolling(long maxLongPollingTimeoutMillis,
      * {@code POST} or {@code PATCH} request to the {@link HealthCheckService}. This feature is disabled
      * by default. If enabled, a JSON object which has a boolean property named {@code "healthy"} can be
      * sent using a {@code PUT} or {@code POST} request. A JSON patch in a {@code PATCH} request is also
-     * accepted. It is recommended to employ some authorization mechanism such as {@link HttpAuthService}
+     * accepted. It is recommended to employ some authorization mechanism such as {@link AuthService}
      * when enabling this feature.
      *
      * @return {@code this}
@@ -222,7 +222,7 @@ public HealthCheckServiceBuilder updatable(boolean updatable) {
     /**
      * Specifies a {@link HealthCheckUpdateHandler} which handles other HTTP methods than {@code HEAD} and
      * {@code GET} which updates the healthiness of the {@link Server}. This feature is disabled by default.
-     * It is recommended to employ some authorization mechanism such as {@link HttpAuthService}
+     * It is recommended to employ some authorization mechanism such as {@link AuthService}
      * when enabling this feature.
      *
      * @param updateHandler The {@link HealthCheckUpdateHandler} which handles {@code PUT}, {@code POST} or

File: core/src/test/java/com/linecorp/armeria/client/ClientOptionsBuilderTest.java
Patch:
@@ -24,7 +24,7 @@
 
 import org.junit.jupiter.api.Test;
 
-import com.linecorp.armeria.client.encoding.HttpDecodingClient;
+import com.linecorp.armeria.client.encoding.DecodingClient;
 import com.linecorp.armeria.client.logging.LoggingClient;
 import com.linecorp.armeria.client.logging.LoggingRpcClient;
 import com.linecorp.armeria.common.HttpHeaderNames;
@@ -82,7 +82,7 @@ void testDecorators() {
 
         // Add another decorator to ensure that the builder does not replace the previous one.
         final Function<? super HttpClient, ? extends HttpClient> decorator2 =
-                HttpDecodingClient.newDecorator();
+                DecodingClient.newDecorator();
         b.option(ClientOption.DECORATION.newValue(ClientDecoration.builder()
                                                                   .add(decorator2)
                                                                   .build()));

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClientIntegrationTest.java
Patch:
@@ -37,7 +37,7 @@
 
 import io.netty.buffer.Unpooled;
 
-class CircuitBreakerHttpClientIntegrationTest {
+class CircuitBreakerClientIntegrationTest {
     @Test
     void abortOnFailFast() throws Exception {
         final AtomicLong tickerValue = new AtomicLong();
@@ -49,7 +49,7 @@ void abortOnFailFast() throws Exception {
 
         final WebClient client =
                 WebClient.builder()
-                         .decorator(CircuitBreakerHttpClient.newDecorator(
+                         .decorator(CircuitBreakerClient.newDecorator(
                                  circuitBreaker,
                                  (ctx, cause) -> CompletableFuture.completedFuture(false)))
                          .build();

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientAuthorityHeaderTest.java
Patch:
@@ -36,7 +36,7 @@
 import com.linecorp.armeria.server.logging.LoggingService;
 import com.linecorp.armeria.testing.junit4.server.ServerRule;
 
-public class RetryingHttpClientAuthorityHeaderTest {
+public class RetryingClientAuthorityHeaderTest {
 
     @ClassRule
     public static ServerRule backend1 = new ServerRule() {
@@ -83,7 +83,7 @@ private static WebClient newHttpClientWithEndpointGroup() {
         EndpointGroupRegistry.register("backends", endpointGroup, EndpointSelectionStrategy.ROUND_ROBIN);
 
         return WebClient.builder("h2c://group:backends")
-                        .decorator(RetryingHttpClient.newDecorator(RetryStrategy.onServerErrorStatus()))
+                        .decorator(RetryingClient.newDecorator(RetryStrategy.onServerErrorStatus()))
                         .build();
     }
 }

File: core/src/test/java/com/linecorp/armeria/common/HttpRequestDuplicatorTest.java
Patch:
@@ -30,7 +30,7 @@
 import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.client.retry.Backoff;
 import com.linecorp.armeria.client.retry.RetryStrategy;
-import com.linecorp.armeria.client.retry.RetryingHttpClient;
+import com.linecorp.armeria.client.retry.RetryingClient;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.testing.junit.common.EventLoopExtension;
 import com.linecorp.armeria.testing.junit.server.ServerExtension;
@@ -92,7 +92,7 @@ void aggregateTwice() {
     void longLivedRequest() {
         final WebClient client =
                 WebClient.builder(server.uri("/"))
-                         .decorator(RetryingHttpClient.newDecorator(
+                         .decorator(RetryingClient.newDecorator(
                                  RetryStrategy.onServerErrorStatus(Backoff.withoutDelay())))
                          .build();
 

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedServiceAnnotationAliasTest.java
Patch:
@@ -70,7 +70,7 @@
 import io.netty.util.Attribute;
 import io.netty.util.AttributeKey;
 
-public class AnnotatedHttpServiceAnnotationAliasTest {
+public class AnnotatedServiceAnnotationAliasTest {
 
     @RequestConverter(MyRequestConverter.class)
     @ResponseConverter(MyResponseConverter.class)
@@ -197,7 +197,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
     }
 
     static final AttributeKey<String> decoratedFlag =
-            AttributeKey.valueOf(AnnotatedHttpServiceAnnotationAliasTest.class, "decorated");
+            AttributeKey.valueOf(AnnotatedServiceAnnotationAliasTest.class, "decorated");
 
     private static void appendAttribute(ServiceRequestContext ctx, String value) {
         final Attribute<String> attr = ctx.attr(decoratedFlag);

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedServiceBlockingTest.java
Patch:
@@ -46,7 +46,7 @@
 import com.linecorp.armeria.server.logging.LoggingService;
 import com.linecorp.armeria.testing.junit.server.ServerExtension;
 
-class AnnotatedHttpServiceBlockingTest {
+class AnnotatedServiceBlockingTest {
     private static final AtomicInteger blockingCount = new AtomicInteger();
 
     private static final ScheduledExecutorService executor =

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedServiceBuilderTest.java
Patch:
@@ -45,7 +45,7 @@
 import com.linecorp.armeria.server.annotation.RequestObject;
 import com.linecorp.armeria.server.logging.LoggingService;
 
-class AnnotatedHttpServiceBuilderTest {
+class AnnotatedServiceBuilderTest {
 
     @Test
     void successfulOf() {
@@ -299,7 +299,7 @@ public void root() {}
 
         assertThatThrownBy(() -> Server.builder().annotatedService(new Object() {
             @Get("/{name}")
-            public void root(@Param("name") Optional<AnnotatedHttpServiceBuilderTest> name) {}
+            public void root(@Param("name") Optional<AnnotatedServiceBuilderTest> name) {}
         }).build()).isInstanceOf(IllegalArgumentException.class);
 
         assertThatThrownBy(() -> Server.builder().annotatedService(new Object() {
@@ -309,7 +309,7 @@ public void root(@Param("name") List<String> name) {}
 
         assertThatThrownBy(() -> Server.builder().annotatedService(new Object() {
             @Get("/test")
-            public void root(@Param("name") Optional<AnnotatedHttpServiceBuilderTest> name) {}
+            public void root(@Param("name") Optional<AnnotatedServiceBuilderTest> name) {}
         }).build()).isInstanceOf(IllegalArgumentException.class);
 
         assertThatThrownBy(() -> Server.builder().annotatedService(new Object() {

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedServiceDecorationTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.internal.annotation;
 
-import static com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.validateContextAndRequest;
+import static com.linecorp.armeria.internal.annotation.AnnotatedServiceTest.validateContextAndRequest;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import org.junit.ClassRule;
@@ -42,7 +42,7 @@
 import com.linecorp.armeria.server.annotation.decorator.LoggingDecorator;
 import com.linecorp.armeria.testing.junit4.server.ServerRule;
 
-public class AnnotatedHttpServiceDecorationTest {
+public class AnnotatedServiceDecorationTest {
 
     @ClassRule
     public static final ServerRule rule = new ServerRule() {

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedServiceExceptionHandlerTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.internal.annotation;
 
-import static com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.validateContextAndRequest;
+import static com.linecorp.armeria.internal.annotation.AnnotatedServiceTest.validateContextAndRequest;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import java.util.concurrent.CompletableFuture;
@@ -53,7 +53,7 @@
 import com.linecorp.armeria.testing.internal.AnticipatedException;
 import com.linecorp.armeria.testing.junit4.server.ServerRule;
 
-public class AnnotatedHttpServiceExceptionHandlerTest {
+public class AnnotatedServiceExceptionHandlerTest {
 
     @ClassRule
     public static final ServerRule rule = new ServerRule() {

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedServiceResponseConverterTest.java
Patch:
@@ -77,7 +77,7 @@
 import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
 
-public class AnnotatedHttpServiceResponseConverterTest {
+public class AnnotatedServiceResponseConverterTest {
 
     private static final ObjectMapper mapper = new ObjectMapper();
     private static final String STRING = "₩";
@@ -767,7 +767,7 @@ private static void testJsonTextSequences(String path) {
                     .assertNext(o -> ensureExpectedHttpData.accept(o, "bar"))
                     .assertNext(o -> ensureExpectedHttpData.accept(o, "baz"))
                     .assertNext(o -> ensureExpectedHttpData.accept(o, "qux"))
-                    .assertNext(AnnotatedHttpServiceResponseConverterTest::assertThatLastContent)
+                    .assertNext(AnnotatedServiceResponseConverterTest::assertThatLastContent)
                     .expectComplete()
                     .verify();
     }
@@ -790,7 +790,7 @@ private static void testEventStream(String path) {
                     .expectNext(HttpData.ofUtf8("data:bar\n\n"))
                     .expectNext(HttpData.ofUtf8("data:baz\n\n"))
                     .expectNext(HttpData.ofUtf8("data:qux\n\n"))
-                    .assertNext(AnnotatedHttpServiceResponseConverterTest::assertThatLastContent)
+                    .assertNext(AnnotatedServiceResponseConverterTest::assertThatLastContent)
                     .expectComplete()
                     .verify();
     }

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedServiceTest.java
Patch:
@@ -89,7 +89,7 @@
 import com.linecorp.armeria.testing.internal.AnticipatedException;
 import com.linecorp.armeria.testing.junit.server.ServerExtension;
 
-class AnnotatedHttpServiceTest {
+class AnnotatedServiceTest {
 
     @RegisterExtension
     static final ServerExtension server = new ServerExtension() {
@@ -735,7 +735,7 @@ public String getPostMapping(RequestContext ctx) {
     }
 
     @Test
-    void testAnnotatedHttpService() throws Exception {
+    void testAnnotatedService() throws Exception {
         try (CloseableHttpClient hc = HttpClients.createMinimal()) {
             testBody(hc, get("/1/int/42"), "Integer: 42");
             testBody(hc, get("/1/int-async/42"), "Integer: 43");
@@ -856,7 +856,7 @@ void testParam() throws Exception {
     }
 
     @Test
-    void testAdvancedAnnotatedHttpService() throws Exception {
+    void testAdvancedAnnotatedService() throws Exception {
         final WebClient client = WebClient.of(server.uri("/"));
         final String path = "/8/same/path";
 

File: core/src/test/java/com/linecorp/armeria/server/other/AnnotatedServiceAccessModifierTest.java
Patch:
@@ -30,7 +30,7 @@
 import com.linecorp.armeria.server.annotation.decorator.LoggingDecorator;
 import com.linecorp.armeria.testing.junit4.server.ServerRule;
 
-public class AnnotatedHttpServiceAccessModifierTest {
+public class AnnotatedServiceAccessModifierTest {
 
     @ClassRule
     public static final ServerRule rule = new ServerRule() {

File: examples/annotated-http-service/src/test/java/example/armeria/server/annotated/AnnotatedServiceTest.java
Patch:
@@ -19,7 +19,7 @@
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.server.Server;
 
-public class AnnotatedHttpServiceTest {
+public class AnnotatedServiceTest {
 
     private static Server server;
     private static WebClient client;

File: examples/spring-boot-webflux/src/main/java/example/springframework/boot/webflux/HelloConfiguration.java
Patch:
@@ -6,7 +6,7 @@
 import com.linecorp.armeria.client.ClientFactory;
 import com.linecorp.armeria.client.ClientFactoryBuilder;
 import com.linecorp.armeria.client.HttpClient;
-import com.linecorp.armeria.client.circuitbreaker.CircuitBreakerHttpClient;
+import com.linecorp.armeria.client.circuitbreaker.CircuitBreakerClient;
 import com.linecorp.armeria.client.circuitbreaker.CircuitBreakerStrategy;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.docs.DocService;
@@ -65,8 +65,8 @@ public ArmeriaClientConfigurator armeriaClientConfigurator(ClientFactory clientF
         return builder -> {
             // Use a circuit breaker for each remote host.
             final CircuitBreakerStrategy strategy = CircuitBreakerStrategy.onServerErrorStatus();
-            builder.decorator(CircuitBreakerHttpClient.builder(strategy)
-                                                      .newDecorator());
+            builder.decorator(CircuitBreakerClient.builder(strategy)
+                                                  .newDecorator());
 
             // Set a custom client factory.
             builder.factory(clientFactory);

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.java
Patch:
@@ -45,7 +45,7 @@
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.VirtualHost;
 import com.linecorp.armeria.server.VirtualHostBuilder;
-import com.linecorp.armeria.server.encoding.HttpEncodingService;
+import com.linecorp.armeria.server.encoding.EncodingService;
 import com.linecorp.armeria.unsafe.grpc.GrpcUnsafeBufferUtil;
 
 import io.grpc.BindableService;
@@ -222,7 +222,7 @@ public GrpcServiceBuilder setMaxOutboundMessageSizeBytes(int maxOutboundMessageS
      *     <li>Only unary methods (single request, single response) are supported.</li>
      *     <li>
      *         Message compression is not supported.
-     *         {@link HttpEncodingService} should be used instead for
+     *         {@link EncodingService} should be used instead for
      *         transport level encoding.
      *     </li>
      * </ul>

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/UnframedGrpcService.java
Patch:
@@ -48,7 +48,7 @@
 import com.linecorp.armeria.server.Route;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.SimpleDecoratingHttpService;
-import com.linecorp.armeria.server.encoding.HttpEncodingService;
+import com.linecorp.armeria.server.encoding.EncodingService;
 import com.linecorp.armeria.unsafe.ByteBufHttpData;
 
 import io.grpc.MethodDescriptor;
@@ -68,7 +68,7 @@
  *     <li>Only unary methods (single request, single response) are supported.</li>
  *     <li>
  *         Message compression is not supported.
- *         {@link HttpEncodingService} should be used instead for
+ *         {@link EncodingService} should be used instead for
  *         transport level encoding.
  *     </li>
  * </ul>

File: spring/boot-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfiguration.java
Patch:
@@ -164,7 +164,7 @@ ArmeriaServerConfigurator actuatorServerConfigurator(
                                                    path,
                                                    predicate.getConsumes(),
                                                    predicate.getProduces());
-                         sb.service(route, new WebOperationHttpService(operation, healthMapper));
+                         sb.service(route, new WebOperationService(operation, healthMapper));
                          if (cors != null) {
                              cors.route(path);
                          }

File: spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/HttpServiceRegistrationBean.java
Patch:
@@ -24,7 +24,7 @@
 import com.linecorp.armeria.server.Route;
 
 /**
- * A bean with information for registering a http service.
+ * A bean with information for registering an http service.
  * It enables Micrometer metric collection of the service automatically.
  * <pre>{@code
  * > @Bean

File: thrift/src/main/java/com/linecorp/armeria/server/thrift/ThriftDocServicePlugin.java
Patch:
@@ -419,7 +419,7 @@ private static FieldRequirement convertRequirement(byte value) {
             case TFieldRequirementType.OPTIONAL:
                 return FieldRequirement.OPTIONAL;
             case TFieldRequirementType.DEFAULT:
-                // Convert to unspecified for consistency with gRPC and AnnotatedHttpService.
+                // Convert to unspecified for consistency with gRPC and AnnotatedService.
                 return FieldRequirement.UNSPECIFIED;
             default:
                 throw new IllegalArgumentException("unknown requirement type: " + value);

File: thrift/src/test/java/com/linecorp/armeria/it/client/retry/RetryingRpcClientTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.linecorp.armeria.it.client.retry;
 
-import static com.linecorp.armeria.client.retry.RetryingClient.ARMERIA_RETRY_COUNT;
+import static com.linecorp.armeria.client.retry.AbstractRetryingClient.ARMERIA_RETRY_COUNT;
 import static com.linecorp.armeria.common.thrift.ThriftSerializationFormats.BINARY;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;

File: logback/src/test/java/com/linecorp/armeria/common/logback/RequestContextExportingAppenderTest.java
Patch:
@@ -56,6 +56,7 @@
 import com.linecorp.armeria.common.RpcResponse;
 import com.linecorp.armeria.common.logback.HelloService.hello_args;
 import com.linecorp.armeria.common.logback.HelloService.hello_result;
+import com.linecorp.armeria.common.logging.BuiltInProperty;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
 import com.linecorp.armeria.common.thrift.ThriftCall;
 import com.linecorp.armeria.common.thrift.ThriftReply;

File: core/src/main/java/com/linecorp/armeria/internal/dns/DefaultDnsNameResolver.java
Patch:
@@ -89,10 +89,10 @@ public void operationComplete(Future<List<DnsRecord>> future) throws Exception {
                     } else {
                         final Throwable aggregatedCause;
                         if (causes == null) {
-                            aggregatedCause =
-                                    new UnknownHostException("empty result returned by DNS server");
+                            aggregatedCause = new UnknownHostException("Failed to resolve: " + questions +
+                                                                       " (empty result)");
                         } else {
-                            aggregatedCause = new UnknownHostException("failed to receive DNS records");
+                            aggregatedCause = new UnknownHostException("Failed to resolve: " + questions);
                             for (Throwable c : causes) {
                                 aggregatedCause.addSuppressed(c);
                             }

File: core/src/main/java/com/linecorp/armeria/client/Endpoint.java
Patch:
@@ -268,7 +268,7 @@ public String ipAddr() {
     }
 
     /**
-     * Returns whether this endpoint has an IP address resolved. This method is a shortcut of
+     * Returns whether this endpoint has an IP address resolved. This method is a shortcut for
      * {@code ipAddr() != null}.
      *
      * @return {@code true} if and only if this endpoint has an IP address.

File: core/src/main/java/com/linecorp/armeria/common/Cookie.java
Patch:
@@ -530,7 +530,7 @@ default CookieBuilder toBuilder() {
 
     /**
      * Returns a new {@link Cookie} which is the result from the mutation by the specified {@link Consumer}.
-     * This method is a shortcut of:
+     * This method is a shortcut for:
      * <pre>{@code
      * builder = toBuilder();
      * mutator.accept(builder);

File: core/src/main/java/com/linecorp/armeria/common/DefaultHttpHeadersBuilder.java
Patch:
@@ -15,7 +15,9 @@
  */
 package com.linecorp.armeria.common;
 
-class DefaultHttpHeadersBuilder extends AbstractHttpHeadersBuilder<DefaultHttpHeadersBuilder, HttpHeaders> {
+class DefaultHttpHeadersBuilder
+        extends AbstractHttpHeadersBuilder<DefaultHttpHeadersBuilder>
+        implements HttpHeadersBuilder {
 
     DefaultHttpHeadersBuilder() {}
 

File: core/src/main/java/com/linecorp/armeria/common/DefaultRequestHeadersBuilder.java
Patch:
@@ -21,8 +21,7 @@
 
 import javax.annotation.Nullable;
 
-final class DefaultRequestHeadersBuilder
-        extends AbstractHttpHeadersBuilder<DefaultRequestHeadersBuilder, RequestHeaders>
+final class DefaultRequestHeadersBuilder extends AbstractHttpHeadersBuilder<RequestHeadersBuilder>
         implements RequestHeadersBuilder {
 
     DefaultRequestHeadersBuilder() {}
@@ -53,6 +52,8 @@ public RequestHeaders build() {
         throw new IllegalStateException("must set ':method' and ':path' headers");
     }
 
+    // Shortcuts
+
     @Override
     public URI uri() {
         final HttpHeadersBase getters = getters();

File: core/src/main/java/com/linecorp/armeria/common/DefaultRequestId.java
Patch:
@@ -19,7 +19,7 @@
 
 import javax.annotation.Nullable;
 
-import com.linecorp.armeria.internal.ThreadLocalByteArray;
+import com.linecorp.armeria.internal.TemporaryThreadLocals;
 
 /**
  * The default {@link RequestId} implementation.
@@ -98,7 +98,7 @@ private String newShortText() {
 
     @SuppressWarnings("deprecation")
     private static String newTextSlow(long value, int digits) {
-        final byte[] bytes = ThreadLocalByteArray.get(digits);
+        final byte[] bytes = TemporaryThreadLocals.get().byteArray(digits);
         for (int i = digits - 1; i >= 0; i--) {
             bytes[i] = HEXDIGITS[(int) value & 0x0F];
             value >>>= 4;

File: core/src/main/java/com/linecorp/armeria/common/DefaultResponseHeadersBuilder.java
Patch:
@@ -18,7 +18,7 @@
 import static com.google.common.base.Preconditions.checkState;
 
 final class DefaultResponseHeadersBuilder
-        extends AbstractHttpHeadersBuilder<DefaultResponseHeadersBuilder, ResponseHeaders>
+        extends AbstractHttpHeadersBuilder<ResponseHeadersBuilder>
         implements ResponseHeadersBuilder {
 
     private static final String STATUS_HEADER_MISSING = ":status header does not exist.";

File: core/src/main/java/com/linecorp/armeria/common/HttpHeaders.java
Patch:
@@ -54,7 +54,7 @@
  * a new {@link HttpHeaders} derived from an existing one:</p>
  *
  * <pre>{@code
- * HttpHeaders headers = HttpHeaders.of("name1", "value0")
+ * HttpHeaders headers = HttpHeaders.of("name1", "value0");
  *
  * // Using toBuilder()
  * HttpHeaders headersWithToBuilder = headers.toBuilder()
@@ -268,7 +268,7 @@ static HttpHeaders of(CharSequence name1, Object value1,
 
     /**
      * Returns a new headers which is the result from the mutation by the specified {@link Consumer}.
-     * This method is a shortcut of:
+     * This method is a shortcut for:
      * <pre>{@code
      * builder = toBuilder();
      * mutator.accept(builder);

File: core/src/main/java/com/linecorp/armeria/common/HttpParameters.java
Patch:
@@ -24,7 +24,10 @@
 
 /**
  * HTTP parameters map.
+ *
+ * @deprecated Use {@link QueryParams}.
  */
+@Deprecated
 public interface HttpParameters extends Headers<String, String, HttpParameters> {
 
     /**

File: core/src/main/java/com/linecorp/armeria/common/logging/LoggingDecoratorBuilder.java
Patch:
@@ -254,7 +254,7 @@ public T responseTrailersSanitizer(Function<? super HttpHeaders, ?> responseTrai
     /**
      * Sets the {@link Function} to use to sanitize request, response and trailers before logging.
      * It is common to have the {@link Function} that removes sensitive headers, like {@code "Cookie"} and
-     * {@code "Set-Cookie"}, before logging. This method is a shortcut of:
+     * {@code "Set-Cookie"}, before logging. This method is a shortcut for:
      * <pre>{@code
      * builder.requestHeadersSanitizer(headersSanitizer);
      * builder.requestTrailersSanitizer(headersSanitizer);
@@ -313,7 +313,8 @@ public T responseContentSanitizer(Function<Object, ?> responseContentSanitizer)
     /**
      * Sets the {@link Function} to use to sanitize request and response content before logging. It is common
      * to have the {@link Function} that removes sensitive content, such as an GPS location query and
-     * an address, before logging. If unset, will use {@link Function#identity()}. This method is a shortcut of:
+     * an address, before logging. If unset, will use {@link Function#identity()}.
+     * This method is a shortcut for:
      * <pre>{@code
      * builder.requestContentSanitizer(contentSanitizer);
      * builder.responseContentSanitizer(contentSanitizer);

File: core/src/main/java/com/linecorp/armeria/common/logging/RequestLog.java
Patch:
@@ -558,7 +558,7 @@ default int statusCode() {
     String toStringRequestOnly();
 
     /**
-     * Returns the string representation of the {@link Request}. This method is a shortcut of:
+     * Returns the string representation of the {@link Request}. This method is a shortcut for:
      * <pre>{@code
      * toStringRequestOnly(headersSanitizer, contentSanitizer, headersSanitizer);
      * }</pre>
@@ -591,7 +591,7 @@ String toStringRequestOnly(Function<? super RequestHeaders, ?> headersSanitizer,
     String toStringResponseOnly();
 
     /**
-     * Returns the string representation of the {@link Response}. This method is a shortcut of:
+     * Returns the string representation of the {@link Response}. This method is a shortcut for:
      * <pre>{@code
      * toStringResponseOnly(headersSanitizer, contentSanitizer, headersSanitizer);
      * }</pre>

File: core/src/main/java/com/linecorp/armeria/common/metric/MoreNamingConventions.java
Patch:
@@ -64,7 +64,7 @@ public static NamingConvention prometheus() {
      * Configures all the {@link MeterRegistry}s added to the {@link Metrics#globalRegistry} to use the
      * {@link NamingConvention}s provided by this class. {@link DropwizardMeterRegistry} and
      * {@link PrometheusMeterRegistry} will be configured to use {@link #dropwizard()} and
-     * {@link #prometheus()} respectively. This method is a shortcut of:
+     * {@link #prometheus()} respectively. This method is a shortcut for:
      *
      * <pre>{@code
      * configure(Metrics.globalRegistry);

File: core/src/main/java/com/linecorp/armeria/common/util/EventLoopThreadFactory.java
Patch:
@@ -21,6 +21,8 @@
 
 import javax.annotation.Nullable;
 
+import com.linecorp.armeria.internal.EventLoopThread;
+
 /**
  * {@link ThreadFactory} that creates event loop threads.
  *

File: core/src/main/java/com/linecorp/armeria/common/util/StartStopSupport.java
Patch:
@@ -96,7 +96,7 @@ public final boolean removeListener(L listener) {
      * neither {@link #doStart(Object)} nor {@link #doStop(Object)} is invoked concurrently. When the startup
      * fails, {@link #stop()} will be invoked automatically to roll back the side effect caused by this method
      * and any exceptions that occurred during the rollback will be reported to
-     * {@link #rollbackFailed(Throwable)}. This method is a shortcut of
+     * {@link #rollbackFailed(Throwable)}. This method is a shortcut for
      * {@code start(null, null, failIfStarted)}.
      *
      * @param failIfStarted whether to fail the returned {@link CompletableFuture} with
@@ -112,7 +112,7 @@ public final CompletableFuture<V> start(boolean failIfStarted) {
      * neither {@link #doStart(Object)} nor {@link #doStop(Object)} is invoked concurrently. When the startup
      * fails, {@link #stop()} will be invoked automatically to roll back the side effect caused by this method
      * and any exceptions that occurred during the rollback will be reported to
-     * {@link #rollbackFailed(Throwable)}. This method is a shortcut of
+     * {@link #rollbackFailed(Throwable)}. This method is a shortcut for
      * {@code start(arg, null, failIfStarted)}.
      *
      * @param arg           the argument to pass to {@link #doStart(Object)},

File: core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java
Patch:
@@ -305,7 +305,7 @@ public static String decodePath(String path) {
         // Decode percent-encoded characters.
         // An invalid character is replaced with 0xFF, which will be replaced into '�' by UTF-8 decoder.
         final int len = path.length();
-        final byte[] buf = ThreadLocalByteArray.get(len);
+        final byte[] buf = TemporaryThreadLocals.get().byteArray(len);
         int dstLen = 0;
         for (int i = 0; i < len; i++) {
             final char ch = path.charAt(i);

File: core/src/main/java/com/linecorp/armeria/internal/TransportType.java
Patch:
@@ -151,7 +151,7 @@ private static TransportType findOrNull(EventLoopGroup eventLoopGroup) {
 
     /**
      * Returns lowercase name of {@link TransportType}.
-     * This method is a shortcut of:
+     * This method is a shortcut for:
      * <pre>{@code
      * Ascii.toLowerCase(name());
      * }</pre>

File: core/src/main/java/com/linecorp/armeria/server/file/DefaultEntityTagFunction.java
Patch:
@@ -21,7 +21,7 @@
 
 import com.google.common.io.BaseEncoding;
 
-import com.linecorp.armeria.internal.ThreadLocalByteArray;
+import com.linecorp.armeria.internal.TemporaryThreadLocals;
 
 final class DefaultEntityTagFunction implements BiFunction<String, HttpFileAttributes, String> {
 
@@ -40,7 +40,7 @@ public String apply(String pathOrUri, HttpFileAttributes attrs) {
         requireNonNull(pathOrUri, "pathOrUri");
         requireNonNull(attrs, "attrs");
 
-        final byte[] data = ThreadLocalByteArray.get(4 + 8 + 8);
+        final byte[] data = TemporaryThreadLocals.get().byteArray(4 + 8 + 8);
         final long hashCode = pathOrUri.hashCode() & 0xFFFFFFFFL;
         final long length = attrs.length();
         final long lastModifiedMillis = attrs.lastModifiedMillis();

File: core/src/main/java/com/linecorp/armeria/server/file/HttpFile.java
Patch:
@@ -62,7 +62,7 @@ static HttpFile of(Path path) {
 
     /**
      * Creates a new {@link AggregatedHttpFile} which streams the specified {@link HttpData}. This method is
-     * a shortcut of {@code HttpFile.of(data, System.currentTimeMillis()}.
+     * a shortcut for {@code HttpFile.of(data, System.currentTimeMillis()}.
      */
     static AggregatedHttpFile of(HttpData data) {
         return (AggregatedHttpFile) HttpFileBuilder.of(data).build();
@@ -82,7 +82,7 @@ static AggregatedHttpFile of(HttpData data, long lastModifiedMillis) {
 
     /**
      * Creates a new {@link HttpFile} which streams the resource at the specified {@code path}. This method is
-     * a shortcut of {@code HttpFile.of(HttpFile.class.getClassLoader(), path)}.
+     * a shortcut for {@code HttpFile.of(HttpFile.class.getClassLoader(), path)}.
      */
     static HttpFile ofResource(String path) {
         return HttpFileBuilder.ofResource(path).build();

File: core/src/main/java/com/linecorp/armeria/server/file/HttpFileBuilder.java
Patch:
@@ -101,7 +101,7 @@ public static HttpFileBuilder of(HttpData data, long lastModifiedMillis) {
 
     /**
      * Returns a new {@link HttpFileBuilder} that builds an {@link HttpFile} from the classpath resource
-     * at the specified {@code path}. This method is a shortcut of
+     * at the specified {@code path}. This method is a shortcut for
      * {@code HttpFileBuilder.ofResource(HttpFile.class.getClassLoader(), path)}.
      */
     public static HttpFileBuilder ofResource(String path) {

File: core/src/main/java/com/linecorp/armeria/server/file/HttpFileServiceBuilder.java
Patch:
@@ -222,7 +222,7 @@ public HttpFileServiceBuilder setHeaders(Iterable<? extends Entry<? extends Char
     }
 
     /**
-     * Sets the {@code "cache-control"} header. This method is a shortcut of:
+     * Sets the {@code "cache-control"} header. This method is a shortcut for:
      * <pre>{@code
      * builder.setHeader(HttpHeaderNames.CACHE_CONTROL, cacheControl);
      * }</pre>
@@ -233,7 +233,7 @@ public HttpFileServiceBuilder cacheControl(CacheControl cacheControl) {
     }
 
     /**
-     * Sets the {@code "cache-control"} header. This method is a shortcut of:
+     * Sets the {@code "cache-control"} header. This method is a shortcut for:
      * <pre>{@code
      * builder.setHeader(HttpHeaderNames.CACHE_CONTROL, cacheControl);
      * }</pre>

File: core/src/test/java/com/linecorp/armeria/common/HttpParametersTest.java
Patch:
@@ -20,12 +20,12 @@
 
 import java.util.List;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-public class HttpParametersTest {
+class HttpParametersTest {
 
     @Test
-    public void caseSensitive() {
+    void caseSensitive() {
         final HttpParameters p = HttpParameters.of();
         p.add("abc", "abc1");
         p.add("abc", "abc2");

File: core/src/test/java/com/linecorp/armeria/common/util/ThreadFactoryTest.java
Patch:
@@ -21,6 +21,8 @@
 
 import org.junit.jupiter.api.Test;
 
+import com.linecorp.armeria.internal.EventLoopThread;
+
 import io.netty.util.concurrent.FastThreadLocalThread;
 
 public class ThreadFactoryTest {

File: core/src/test/java/com/linecorp/armeria/server/HttpServerHeaderValidationTest.java
Patch:
@@ -40,10 +40,10 @@
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
+import com.linecorp.armeria.common.QueryParams;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.testing.junit.server.ServerExtension;
 
-import io.netty.handler.codec.http.QueryStringDecoder;
 import io.netty.handler.ssl.util.InsecureTrustManagerFactory;
 
 @Timeout(10)
@@ -63,8 +63,7 @@ protected void configure(ServerBuilder sb) throws Exception {
 
             sb.route().get("/headers-custom")
               .build((ctx, req) -> {
-                  final String param = new QueryStringDecoder(req.path()).parameters()
-                                                                         .get("param").get(0);
+                  final String param = QueryParams.fromQueryString(ctx.query()).get("param", "<NULL>");
                   return HttpResponse.of(
                           ResponseHeaders.of(HttpStatus.OK, "server-header", param),
                           HttpData.ofUtf8("OK"));

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/StatusMessageEscaper.java
Patch:
@@ -49,7 +49,7 @@
 import java.nio.ByteBuffer;
 import java.nio.charset.StandardCharsets;
 
-import com.linecorp.armeria.internal.ThreadLocalByteArray;
+import com.linecorp.armeria.internal.TemporaryThreadLocals;
 
 /**
  * Utility to escape status messages (e.g., error messages) for saving to ascii headers.
@@ -86,7 +86,7 @@ private static boolean isEscapingChar(byte b) {
      * @param ri The reader index, pointed at the first byte that needs escaping.
      */
     private static String doEscape(byte[] valueBytes, int ri) {
-        final byte[] escapedBytes = ThreadLocalByteArray.get(ri + (valueBytes.length - ri) * 3);
+        final byte[] escapedBytes = TemporaryThreadLocals.get().byteArray(ri + (valueBytes.length - ri) * 3);
         // copy over the good bytes
         if (ri != 0) {
             System.arraycopy(valueBytes, 0, escapedBytes, 0, ri);

File: jetty/src/main/java/com/linecorp/armeria/server/jetty/JettyServiceBuilder.java
Patch:
@@ -154,7 +154,7 @@ public JettyServiceBuilder requestLog(RequestLog requestLog) {
     }
 
     /**
-     * Sets the {@link SessionIdManager} of the Jetty {@link Server}. This method is a shortcut of:
+     * Sets the {@link SessionIdManager} of the Jetty {@link Server}. This method is a shortcut for:
      * <pre>{@code
      * sessionIdManagerFactory(server -> sessionIdManager);
      * }</pre>

File: saml/src/main/java/com/linecorp/armeria/server/saml/JwtBasedSamlRequestIdManager.java
Patch:
@@ -33,7 +33,7 @@
 import com.auth0.jwt.algorithms.Algorithm;
 import com.google.common.base.MoreObjects;
 
-import com.linecorp.armeria.internal.ThreadLocalByteArray;
+import com.linecorp.armeria.internal.TemporaryThreadLocals;
 
 import io.netty.util.internal.ThreadLocalRandom;
 
@@ -114,7 +114,7 @@ public String toString() {
     private static String getUniquifierPrefix() {
         // To make a request ID globally unique, we will add MAC-based machine ID and a random number.
         // The random number tries to make this instance unique in the same machine and process.
-        final byte[] r = ThreadLocalByteArray.get(6);
+        final byte[] r = TemporaryThreadLocals.get().byteArray(6);
         ThreadLocalRandom.current().nextBytes(r);
         final Encoder encoder = Base64.getEncoder();
         return new StringBuilder().append(encoder.encodeToString(defaultMachineId()))

File: thrift/src/main/java/com/linecorp/armeria/common/thrift/text/TTextProtocol.java
Patch:
@@ -61,7 +61,7 @@
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
 
-import com.linecorp.armeria.internal.ThreadLocalByteArray;
+import com.linecorp.armeria.internal.TemporaryThreadLocals;
 
 /**
  * A simple text format for serializing/deserializing thrift
@@ -663,7 +663,7 @@ private void readRoot() throws IOException {
             return;
         }
         final ByteArrayOutputStream content = new ByteArrayOutputStream();
-        final byte[] buffer = ThreadLocalByteArray.get(READ_BUFFER_SIZE);
+        final byte[] buffer = TemporaryThreadLocals.get().byteArray(READ_BUFFER_SIZE);
         try {
             while (trans_.read(buffer, 0, READ_BUFFER_SIZE) > 0) {
                 content.write(buffer);

File: core/src/main/java/com/linecorp/armeria/common/util/AbstractUnwrappable.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Optional;
 
 /**
- * Skeletal {@link Unwrappable} imlementation.
+ * Skeletal {@link Unwrappable} implementation.
  *
  * @param <T> the type of the object being decorated
  */

File: brave/src/test/java/com/linecorp/armeria/it/brave/BraveIntegrationTest.java
Patch:
@@ -86,7 +86,7 @@
 import zipkin2.Span;
 import zipkin2.reporter.Reporter;
 
-@Timeout(10000)
+@Timeout(10)
 class BraveIntegrationTest {
 
     private static final ReporterImpl spanReporter = new ReporterImpl();

File: core/src/test/java/com/linecorp/armeria/server/HttpServerHeaderValidationTest.java
Patch:
@@ -46,7 +46,7 @@
 import io.netty.handler.codec.http.QueryStringDecoder;
 import io.netty.handler.ssl.util.InsecureTrustManagerFactory;
 
-@Timeout(10000)
+@Timeout(10)
 class HttpServerHeaderValidationTest {
 
     static final ClientFactory clientFactory = ClientFactory.builder().sslContextCustomizer(scb -> {

File: examples/annotated-http-service/src/main/java/example/armeria/server/annotated/InjectionService.java
Patch:
@@ -7,18 +7,17 @@
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
 
+import com.linecorp.armeria.common.Cookie;
+import com.linecorp.armeria.common.Cookies;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.logging.LogLevel;
-import com.linecorp.armeria.server.annotation.Cookies;
 import com.linecorp.armeria.server.annotation.Get;
 import com.linecorp.armeria.server.annotation.Header;
 import com.linecorp.armeria.server.annotation.Param;
 import com.linecorp.armeria.server.annotation.decorator.LoggingDecorator;
 
-import io.netty.handler.codec.http.cookie.Cookie;
-
 /**
  * Examples how to use {@link Param}, {@link Header} and {@link Cookies}.
  *

File: examples/saml-service-provider/src/main/java/example/armeria/server/saml/sp/MyService.java
Patch:
@@ -1,13 +1,12 @@
 package example.armeria.server.saml.sp;
 
+import com.linecorp.armeria.common.Cookie;
+import com.linecorp.armeria.common.Cookies;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
-import com.linecorp.armeria.server.annotation.Cookies;
 import com.linecorp.armeria.server.annotation.Get;
 
-import io.netty.handler.codec.http.cookie.Cookie;
-
 final class MyService {
     @Get("/welcome")
     public HttpResponse welcome(Cookies cookies) {

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java
Patch:
@@ -419,8 +419,7 @@ default MediaType negotiatedProduceType() {
     boolean removeAdditionalResponseTrailer(CharSequence name);
 
     /**
-     * Returns the proxied addresses if the current {@link Request} is received through a proxy.
+     * Returns the proxied addresses of the current {@link Request}.
      */
-    @Nullable
     ProxiedAddresses proxiedAddresses();
 }

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContextWrapper.java
Patch:
@@ -247,7 +247,6 @@ public boolean removeAdditionalResponseTrailer(CharSequence name) {
         return delegate().removeAdditionalResponseTrailer(name);
     }
 
-    @Nullable
     @Override
     public ProxiedAddresses proxiedAddresses() {
         return delegate().proxiedAddresses();

File: core/src/test/java/com/linecorp/armeria/server/ProxyProtocolEnabledServerTest.java
Patch:
@@ -29,6 +29,7 @@
 import java.net.Socket;
 import java.security.SecureRandom;
 import java.security.cert.X509Certificate;
+import java.util.List;
 
 import javax.net.ssl.SSLContext;
 import javax.net.ssl.TrustManager;
@@ -74,11 +75,11 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) {
                     final ProxiedAddresses proxyAddresses = ctx.proxiedAddresses();
                     assert proxyAddresses != null;
                     final InetSocketAddress src = proxyAddresses.sourceAddress();
-                    final InetSocketAddress dst = proxyAddresses.destinationAddress();
+                    final List<InetSocketAddress> dst = proxyAddresses.destinationAddresses();
                     return HttpResponse.of(HttpStatus.OK, MediaType.PLAIN_TEXT_UTF_8,
                                            String.format("%s:%d -> %s:%d\n",
                                                          src.getHostString(), src.getPort(),
-                                                         dst.getHostString(), dst.getPort()));
+                                                         dst.get(0).getHostString(), dst.get(0).getPort()));
                 }
             });
             sb.disableServerHeader();

File: logback/src/test/java/com/linecorp/armeria/common/logback/RequestContextExportingAppenderTest.java
Patch:
@@ -61,6 +61,7 @@
 import com.linecorp.armeria.common.thrift.ThriftReply;
 import com.linecorp.armeria.common.thrift.ThriftSerializationFormats;
 import com.linecorp.armeria.common.util.SafeCloseable;
+import com.linecorp.armeria.server.ProxiedAddresses;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 import ch.qos.logback.classic.Level;
@@ -405,7 +406,8 @@ private static ServiceRequestContext newServiceContext(
                                      .sslSession(newSslSession())
                                      .remoteAddress(remoteAddress)
                                      .localAddress(localAddress)
-                                     .clientAddress(InetAddress.getByName("9.10.11.12"))
+                                     .proxiedAddresses(
+                                             ProxiedAddresses.of(new InetSocketAddress("9.10.11.12", 0)))
                                      .build();
 
         ctx.attr(MY_ATTR).set(new CustomValue("some-attr"));

File: core/src/main/java/com/linecorp/armeria/server/Router.java
Patch:
@@ -17,7 +17,7 @@
 package com.linecorp.armeria.server;
 
 import java.io.OutputStream;
-import java.util.stream.Stream;
+import java.util.List;
 
 import com.linecorp.armeria.common.metric.MeterIdPrefix;
 
@@ -39,9 +39,9 @@ public interface Router<V> {
     /**
      * Finds all values of mapping that match the specified {@link RoutingContext}.
      *
-     * @return a stream of {@link Routed} that wraps the matching value.
+     * @return the {@link Routed} instances that wrap the matching value.
      */
-    Stream<Routed<V>> findAll(RoutingContext routingCtx);
+    List<Routed<V>> findAll(RoutingContext routingCtx);
 
     /**
      * Registers the stats of this {@link Router} to the specified {@link MeterRegistry}.

File: core/src/test/java/com/linecorp/armeria/server/VirtualHostAnnotatedServiceBindingBuilderTest.java
Patch:
@@ -49,7 +49,7 @@ protected void configure(ServerBuilder sb) throws Exception {
             sb.virtualHost(TEST_HOST)
               .annotatedService()
               .pathPrefix("/foo")
-              .exceptionHandler(handlerFunction)
+              .exceptionHandlers(handlerFunction)
               .build(new TestService());
         }
     };
@@ -67,7 +67,7 @@ void testAllConfigsAreSet() {
                 .annotatedService()
                 .requestTimeout(requestTimeoutDuration)
                 .maxRequestLength(maxRequestLength)
-                .exceptionHandler((ctx, request, cause) -> HttpResponse.of(400))
+                .exceptionHandlers((ctx, request, cause) -> HttpResponse.of(400))
                 .pathPrefix("/foo")
                 .accessLogWriter(accessLogWriter, shutdownOnStop)
                 .contentPreviewerFactory(factory)

File: benchmarks/src/jmh/java/com/linecorp/armeria/common/stream/StreamMessageBenchmark.java
Patch:
@@ -54,9 +54,9 @@ public void closeEventLoops() {
     }
 
     @State(Scope.Thread)
-    private static class StreamObjects {
+    public static class StreamObjects {
 
-        private enum StreamType {
+        public enum StreamType {
             DEFAULT_STREAM_MESSAGE,
             FIXED_STREAM_MESSAGE,
             DEFERRED_FIXED_STREAM_MESSAGE,

File: benchmarks/src/jmh/java/com/linecorp/armeria/core/HttpServerBenchmark.java
Patch:
@@ -43,7 +43,7 @@
 public class HttpServerBenchmark {
 
     // JMH bug prevents it from using enums that override toString() (it should use name() instead...).
-    private enum Protocol {
+    public enum Protocol {
         H2C(SessionProtocol.H2C),
         H1C(SessionProtocol.H1C);
 

File: core/src/main/java/com/linecorp/armeria/server/DefaultRoutingContext.java
Patch:
@@ -149,8 +149,8 @@ public int hashCode() {
 
     @Override
     public boolean equals(@Nullable Object obj) {
-        return obj instanceof DefaultRoutingContext &&
-               (this == obj || summary().equals(((DefaultRoutingContext) obj).summary()));
+        return obj instanceof RoutingContext &&
+               (this == obj || summary().equals(((RoutingContext) obj).summary()));
     }
 
     @Override

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java
Patch:
@@ -522,6 +522,7 @@ private HttpHeaders statusToTrailers(Status status, Metadata metadata, boolean h
         return statusToTrailers(ctx, status, metadata, headersSent);
     }
 
+    // Returns ResponseHeaders if headersSent == false or HttpHeaders otherwise.
     static HttpHeaders statusToTrailers(
             ServiceRequestContext ctx, Status status, Metadata metadata, boolean headersSent) {
         final HttpHeadersBuilder trailers = GrpcTrailersUtil.statusToTrailers(

File: core/src/main/java/com/linecorp/armeria/common/Flags.java
Patch:
@@ -77,7 +77,7 @@ public final class Flags {
 
     private static final int NUM_CPU_CORES = Runtime.getRuntime().availableProcessors();
 
-    private static final String DEFAULT_VERBOSE_EXCEPTION_SAMPLER_SPEC = "rate-limited=10";
+    private static final String DEFAULT_VERBOSE_EXCEPTION_SAMPLER_SPEC = "rate-limit=10";
     private static final String VERBOSE_EXCEPTION_SAMPLER_SPEC;
     private static final Sampler<Class<? extends Throwable>> VERBOSE_EXCEPTION_SAMPLER;
 

File: core/src/main/java/com/linecorp/armeria/common/util/Samplers.java
Patch:
@@ -84,8 +84,10 @@ static <T> Sampler<T> of(String specification) {
             switch (key) {
                 case "random":
                     return Sampler.random(Double.parseDouble(value));
+                case "rate-limit":
+                case "rate-limiting":
                 case "rate-limited":
-                    return Sampler.rateLimited(Integer.parseInt(value));
+                    return Sampler.rateLimiting(Integer.parseInt(value));
                 default:
             }
         } catch (Exception e) {

File: core/src/main/java/com/linecorp/armeria/client/logging/LoggingClientBuilder.java
Patch:
@@ -39,6 +39,7 @@ public LoggingClientBuilder() {}
      */
     public LoggingClient build(HttpClient delegate) {
         return new LoggingClient(delegate,
+                                 logger(),
                                  requestLogLevelMapper(),
                                  responseLogLevelMapper(),
                                  requestHeadersSanitizer(),

File: core/src/main/java/com/linecorp/armeria/client/logging/LoggingRpcClientBuilder.java
Patch:
@@ -36,6 +36,7 @@ public final class LoggingRpcClientBuilder extends AbstractLoggingClientBuilder<
      */
     public LoggingRpcClient build(RpcClient delegate) {
         return new LoggingRpcClient(delegate,
+                                    logger(),
                                     requestLogLevelMapper(),
                                     responseLogLevelMapper(),
                                     requestHeadersSanitizer(),

File: core/src/main/java/com/linecorp/armeria/server/logging/LoggingServiceBuilder.java
Patch:
@@ -57,6 +57,7 @@ public LoggingServiceBuilder samplingRate(float samplingRate) {
      */
     public LoggingService build(HttpService delegate) {
         return new LoggingService(delegate,
+                                  logger(),
                                   requestLogLevelMapper(),
                                   responseLogLevelMapper(),
                                   requestHeadersSanitizer(),

File: benchmarks/src/jmh/java/com/linecorp/armeria/core/client/endpoint/DnsEndpointGroupBenchmark.java
Patch:
@@ -26,7 +26,6 @@
 import com.linecorp.armeria.client.endpoint.dns.DnsAddressEndpointGroup;
 import com.linecorp.armeria.client.endpoint.healthcheck.HealthCheckedEndpointGroup;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
-import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.server.Server;
 
@@ -44,7 +43,7 @@ public class DnsEndpointGroupBenchmark {
     @Setup(Level.Trial)
     public void startServer() {
         server = Server.builder()
-                       .service("/health", (ctx, req) -> HttpResponse.of(OK))
+                       .service("/health", (ctx, req) -> OK.toHttpResponse())
                        .build();
         server.start().join();
     }

File: brave/src/main/java/com/linecorp/armeria/client/brave/BraveClient.java
Patch:
@@ -109,7 +109,7 @@ public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Ex
         final RequestHeadersBuilder newHeaders = req.headers().toBuilder();
         final HttpClientRequest request = ClientRequestContextAdapter.asHttpClientRequest(ctx, newHeaders);
         final Span span = handler.handleSend(request);
-        req = HttpRequest.of(req, newHeaders.build());
+        req = req.withHeaders(newHeaders);
         ctx.updateRequest(req);
 
         // Ensure the trace context propagates to children

File: core/src/main/java/com/linecorp/armeria/client/encoding/HttpDecodingClient.java
Patch:
@@ -84,9 +84,8 @@ public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Ex
             return delegate().execute(ctx, req);
         }
 
-        req = HttpRequest.of(req, req.headers().toBuilder()
-                                     .set(HttpHeaderNames.ACCEPT_ENCODING, acceptEncodingHeader)
-                                     .build());
+        req = req.withHeaders(req.headers().toBuilder()
+                                 .set(HttpHeaderNames.ACCEPT_ENCODING, acceptEncodingHeader));
         ctx.updateRequest(req);
 
         final HttpResponse res = delegate().execute(ctx, req);

File: core/src/main/java/com/linecorp/armeria/common/RequestContext.java
Patch:
@@ -134,7 +134,8 @@ static <T> T mapCurrent(
      * {@code ":path"}, {@code ":scheme"} and {@code ":authority"}) when replacing an {@link HttpRequest},
      * because the properties of this context, such as {@link #path()}, are unaffected by such an attempt.</p>
      *
-     * @see HttpRequest#of(HttpRequest, RequestHeaders)
+     * @see HttpRequest#withHeaders(RequestHeaders)
+     * @see HttpRequest#withHeaders(RequestHeadersBuilder)
      */
     void updateRequest(HttpRequest req);
 

File: core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpService.java
Patch:
@@ -314,7 +314,7 @@ private HttpResponse convertResponse(ServiceRequestContext ctx, HttpRequest req,
             return new ExceptionFilteredHttpResponse(ctx, req, (HttpResponse) result, exceptionHandler);
         }
         if (result instanceof AggregatedHttpResponse) {
-            return HttpResponse.of((AggregatedHttpResponse) result);
+            return ((AggregatedHttpResponse) result).toHttpResponse();
         }
         if (result instanceof CompletionStage) {
             return HttpResponse.from(

File: core/src/main/java/com/linecorp/armeria/server/HttpResponseException.java
Patch:
@@ -50,7 +50,7 @@ public static HttpResponseException of(HttpStatus httpStatus) {
      * Returns a new {@link HttpResponseException} instance with the specified {@link AggregatedHttpResponse}.
      */
     public static HttpResponseException of(AggregatedHttpResponse aggregatedResponse) {
-        return of(HttpResponse.of(requireNonNull(aggregatedResponse, "aggregatedResponse")));
+        return of(requireNonNull(aggregatedResponse, "aggregatedResponse").toHttpResponse());
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckService.java
Patch:
@@ -414,7 +414,7 @@ private HttpResponse newResponse(HttpMethod method, boolean isHealthy) {
         if (method == HttpMethod.HEAD) {
             return HttpResponse.of(aRes.headers());
         } else {
-            return HttpResponse.of(aRes);
+            return aRes.toHttpResponse();
         }
     }
 

File: core/src/main/java/com/linecorp/armeria/server/healthcheck/HttpHealthCheckService.java
Patch:
@@ -145,7 +145,7 @@ protected HttpResponse doHead(ServiceRequestContext ctx, HttpRequest req) {
 
     @Override
     protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) {
-        return HttpResponse.of(newResponse(ctx, req));
+        return newResponse(ctx, req).toHttpResponse();
     }
 
     private AggregatedHttpResponse newResponse(ServiceRequestContext ctx, HttpRequest req) {

File: core/src/main/java/com/linecorp/armeria/server/healthcheck/ManagedHttpHealthCheckService.java
Patch:
@@ -67,7 +67,7 @@ public class ManagedHttpHealthCheckService extends HttpHealthCheckService {
     @Override
     protected HttpResponse doPut(ServiceRequestContext ctx, HttpRequest req) throws Exception {
         return HttpResponse.from(
-                updateHealthStatus(ctx, req).thenApply(HttpResponse::of)
+                updateHealthStatus(ctx, req).thenApply(AggregatedHttpResponse::toHttpResponse)
                                             .exceptionally(HttpResponse::ofFailure));
     }
 

File: core/src/test/java/com/linecorp/armeria/client/HttpClientWithRequestLogTest.java
Patch:
@@ -75,8 +75,7 @@ void invalidPath() {
         final WebClient client =
                 WebClient.builder(LOCAL_HOST)
                          .decorator((delegate, ctx, req) -> {
-                             final HttpRequest badReq = HttpRequest.of(
-                                     req, req.headers().toBuilder().path("/%").build());
+                             final HttpRequest badReq = req.withHeaders(req.headers().toBuilder().path("/%"));
                              return delegate.execute(ctx, badReq);
                          })
                          .decorator(new ExceptionHoldingDecorator())

File: core/src/test/java/com/linecorp/armeria/common/DefaultAggregatedHttpRequestTest.java
Patch:
@@ -33,7 +33,7 @@ class DefaultAggregatedHttpRequestTest {
     void toHttpRequest() {
         final AggregatedHttpRequest aReq = AggregatedHttpRequest.of(
                 HttpMethod.POST, "/foo", PLAIN_TEXT_UTF_8, "bar");
-        final HttpRequest req = HttpRequest.of(aReq);
+        final HttpRequest req = aReq.toHttpRequest();
         final List<HttpObject> drained = req.drainAll().join();
 
         assertThat(req.headers()).isEqualTo(RequestHeaders.of(HttpMethod.POST, "/foo",
@@ -45,7 +45,7 @@ void toHttpRequest() {
     @Test
     void toHttpRequestWithoutContent() {
         final AggregatedHttpRequest aReq = AggregatedHttpRequest.of(HttpMethod.GET, "/bar");
-        final HttpRequest req = HttpRequest.of(aReq);
+        final HttpRequest req = aReq.toHttpRequest();
         final List<HttpObject> drained = req.drainAll().join();
 
         assertThat(req.headers()).isEqualTo(RequestHeaders.of(HttpMethod.GET, "/bar"));
@@ -57,7 +57,7 @@ void toHttpRequestWithTrailers() {
         final AggregatedHttpRequest aReq = AggregatedHttpRequest.of(
                 HttpMethod.PUT, "/baz", PLAIN_TEXT_UTF_8, HttpData.ofUtf8("bar"),
                 HttpHeaders.of(CONTENT_MD5, "37b51d194a7513e45b56f6524f2d51f2"));
-        final HttpRequest req = HttpRequest.of(aReq);
+        final HttpRequest req = aReq.toHttpRequest();
         final List<HttpObject> drained = req.drainAll().join();
 
         assertThat(req.headers()).isEqualTo(RequestHeaders.of(HttpMethod.PUT, "/baz",

File: core/src/test/java/com/linecorp/armeria/common/HttpRequestDuplicatorTest.java
Patch:
@@ -64,7 +64,7 @@ void aggregateTwice() {
                 HttpMethod.PUT, "/foo", PLAIN_TEXT_UTF_8, HttpData.ofUtf8("bar"),
                 HttpHeaders.of(CONTENT_MD5, "37b51d194a7513e45b56f6524f2d51f2"));
 
-        final HttpRequest publisher = HttpRequest.of(aReq);
+        final HttpRequest publisher = aReq.toHttpRequest();
         final HttpRequestDuplicator reqDuplicator = new HttpRequestDuplicator(publisher);
 
         final AggregatedHttpRequest req1 = reqDuplicator.duplicateStream().aggregate().join();

File: core/src/test/java/com/linecorp/armeria/server/encoding/HttpEncodedResponseTest.java
Patch:
@@ -39,10 +39,10 @@ void testLeak() {
         final ByteBuf buf = Unpooled.buffer();
         buf.writeCharSequence("foo", StandardCharsets.UTF_8);
 
-        final HttpResponse orig = HttpResponse.of(
+        final HttpResponse orig =
                 AggregatedHttpResponse.of(HttpStatus.OK,
                                           MediaType.PLAIN_TEXT_UTF_8,
-                                          new ByteBufHttpData(buf, true)));
+                                          new ByteBufHttpData(buf, true)).toHttpResponse();
         final HttpEncodedResponse encoded = new HttpEncodedResponse(
                 orig, HttpEncodingType.DEFLATE, mediaType -> true, 1);
 

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/UnaryGrpcClient.java
Patch:
@@ -159,7 +159,7 @@ public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) {
 
                            if (!status.equals(HttpStatus.OK) || msg.content().isEmpty()) {
                                // Nothing to deframe.
-                               return CompletableFuture.completedFuture(HttpResponse.of(msg));
+                               return CompletableFuture.completedFuture(msg.toHttpResponse());
                            }
 
                            final CompletableFuture<HttpResponse> responseFuture = new CompletableFuture<>();

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaClientCall.java
Patch:
@@ -362,7 +362,7 @@ private void prepareHeaders(Compressor compressor, Metadata metadata) {
 
         MetadataUtil.fillHeaders(metadata, newHeaders);
 
-        final HttpRequest newReq = HttpRequest.of(req, newHeaders.build());
+        final HttpRequest newReq = req.withHeaders(newHeaders);
         ctx.updateRequest(newReq);
     }
 

File: testing/junit/src/main/java/com/linecorp/armeria/testing/junit/server/mock/MockWebServerExtension.java
Patch:
@@ -94,7 +94,7 @@ public MockWebServerExtension enqueue(HttpResponse response) {
      */
     public MockWebServerExtension enqueue(AggregatedHttpResponse response) {
         requireNonNull(response, "response");
-        mockResponses.add(HttpResponse.of(response));
+        mockResponses.add(response.toHttpResponse());
         return this;
     }
 

File: testing/junit/src/test/java/com/linecorp/armeria/testing/junit/server/mock/MockWebServiceExtensionTest.java
Patch:
@@ -56,7 +56,7 @@ void normal() {
                                                .build();
 
         server.enqueue(AggregatedHttpResponse.of(HttpStatus.OK, MediaType.PLAIN_TEXT_UTF_8, "hello"));
-        server.enqueue(HttpResponse.of(AggregatedHttpResponse.of(HttpStatus.FORBIDDEN)));
+        server.enqueue(AggregatedHttpResponse.of(HttpStatus.FORBIDDEN).toHttpResponse());
         server.enqueue(AggregatedHttpResponse.of(HttpStatus.FOUND));
 
         assertThat(webClient.get("/").aggregate().join()).satisfies(response -> {
@@ -106,7 +106,7 @@ void normal() {
 
     @Test
     void delay() {
-        server.enqueue(HttpResponse.delayed(HttpResponse.of(AggregatedHttpResponse.of(HttpStatus.OK)),
+        server.enqueue(HttpResponse.delayed(AggregatedHttpResponse.of(HttpStatus.OK).toHttpResponse(),
                                             Duration.ofSeconds(1)));
         server.enqueue(HttpResponse.delayed(AggregatedHttpResponse.of(HttpStatus.OK), Duration.ofSeconds(1)));
 

File: core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptions.java
Patch:
@@ -52,7 +52,7 @@ public final class ClientFactoryOptions extends AbstractOptions {
 
     private static final Function<? super EventLoopGroup, ? extends EventLoopScheduler>
             DEFAULT_EVENT_LOOP_SCHEDULER_FACTORY =
-            eventLoopGroup -> new DefaultEventLoopScheduler(eventLoopGroup, 1, 0, ImmutableList.of());
+            eventLoopGroup -> new DefaultEventLoopScheduler(eventLoopGroup, 0, 0, ImmutableList.of());
 
     private static final Consumer<SslContextBuilder> DEFAULT_SSL_CONTEXT_CUSTOMIZER = b -> { /* no-op */ };
 

File: brave/src/test/java/com/linecorp/armeria/client/brave/BraveClientTest.java
Patch:
@@ -33,8 +33,8 @@
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Test;
 
-import com.linecorp.armeria.client.Client;
 import com.linecorp.armeria.client.ClientRequestContext;
+import com.linecorp.armeria.client.HttpClient;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
@@ -221,8 +221,7 @@ private static RequestLog testRemoteInvocation(Tracing tracing, @Nullable String
         ctx.logBuilder().endRequest();
 
         try (SafeCloseable ignored = ctx.push()) {
-            @SuppressWarnings("unchecked")
-            final Client<HttpRequest, HttpResponse> delegate = mock(Client.class);
+            final HttpClient delegate = mock(HttpClient.class);
             when(delegate.execute(any(), any())).thenReturn(res);
 
             final BraveClient stub = BraveClient.newDecorator(httpTracing).apply(delegate);

File: core/src/main/java/com/linecorp/armeria/client/Client.java
Patch:
@@ -55,9 +55,9 @@ public interface Client<I extends Request, O extends Response> extends Unwrappab
      * Unwraps this {@link Client} into the object of the specified {@code type}.
      * Use this method instead of an explicit downcast. For example:
      * <pre>{@code
-     * HttpClient client = new HttpClientBuilder()
-     *     .decorator(LoggingClient.newDecorator())
-     *     .build();
+     * WebClient client = WebClient.builder(...)
+     *                             .decorator(LoggingClient.newDecorator())
+     *                             .build();
      *
      * LoggingClient unwrapped = client.as(LoggingClient.class).get();
      *

File: core/src/main/java/com/linecorp/armeria/client/ClientBuilder.java
Patch:
@@ -28,8 +28,8 @@
 /**
  * Creates a new client that connects to the specified {@link URI} using the builder pattern. Use the factory
  * methods in {@link Clients} if you do not have many options to override. If you are creating an
- * {@link HttpClient}, it is recommended to use the {@link HttpClientBuilder} or
- * factory methods in {@link HttpClient}.
+ * {@link WebClient}, it is recommended to use the {@link WebClientBuilder} or
+ * factory methods in {@link WebClient}.
  *
  * <h3>How are decorators and HTTP headers configured?</h3>
  *

File: core/src/main/java/com/linecorp/armeria/client/DefaultClientFactory.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.client;
 
-import static com.linecorp.armeria.client.HttpClientBuilder.isUndefinedUri;
+import static com.linecorp.armeria.client.WebClientBuilder.isUndefinedUri;
 
 import java.net.InetSocketAddress;
 import java.net.URI;

File: core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java
Patch:
@@ -39,7 +39,7 @@
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.FutureListener;
 
-final class HttpClientDelegate implements Client<HttpRequest, HttpResponse> {
+final class HttpClientDelegate implements HttpClient {
 
     private static final Throwable CONTEXT_INITIALIZATION_FAILED = new Exception(
             ClientRequestContext.class.getSimpleName() + " initialization failed", null, false, false) {

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/AbstractHealthCheckedEndpointGroupBuilder.java
Patch:
@@ -129,7 +129,7 @@ public AbstractHealthCheckedEndpointGroupBuilder retryBackoff(Backoff retryBacko
      * This method can be useful if you already have an Armeria client and want to reuse its configuration,
      * such as using the same decorators.
      * <pre>{@code
-     * HttpClient myClient = ...;
+     * WebClient myClient = ...;
      * // Use the same settings and decorators with `myClient` when sending health check requests.
      * builder.clientOptions(myClient.options());
      * }</pre>

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java
Patch:
@@ -85,7 +85,8 @@ protected RetryingClient(Client<I, O> delegate, RetryStrategy retryStrategy,
     /**
      * Creates a new instance that decorates the specified {@link Client}.
      */
-    protected RetryingClient(Client<I, O> delegate, RetryStrategyWithContent<O> retryStrategyWithContent,
+    protected RetryingClient(Client<I, O> delegate,
+                             RetryStrategyWithContent<O> retryStrategyWithContent,
                              int maxTotalAttempts, long responseTimeoutMillisForEachAttempt) {
         this(delegate, null, requireNonNull(retryStrategyWithContent, "retryStrategyWithContent"),
              maxTotalAttempts, responseTimeoutMillisForEachAttempt);

File: core/src/test/java/com/linecorp/armeria/client/Http1ConnectionCloseHeaderTest.java
Patch:
@@ -45,7 +45,7 @@ public void connectionCloseHeaderInResponse() throws Exception {
         try (ServerSocket ss = new ServerSocket(0);) {
             final int port = ss.getLocalPort();
 
-            final HttpClient client = HttpClient.of("h1c://127.0.0.1:" + port);
+            final WebClient client = WebClient.of("h1c://127.0.0.1:" + port);
             client.get("/").aggregate();
 
             try (Socket s = ss.accept()) {

File: core/src/test/java/com/linecorp/armeria/client/Http1EmptyRequestTest.java
Patch:
@@ -44,7 +44,7 @@ void emptyRequest(HttpMethod method) throws Exception {
             try (ServerSocket ss = new ServerSocket(0);) {
                 final int port = ss.getLocalPort();
 
-                final HttpClient client = HttpClient.of("h1c://127.0.0.1:" + port);
+                final WebClient client = WebClient.of("h1c://127.0.0.1:" + port);
                 client.execute(HttpRequest.of(method, "/")).aggregate();
 
                 try (Socket s = ss.accept()) {

File: core/src/test/java/com/linecorp/armeria/client/Http2ClientSettingsTest.java
Patch:
@@ -77,7 +77,7 @@ public void initialConnectionAndStreamWindowSize() throws Exception {
 
             final int port = ss.getLocalPort();
 
-            final HttpClient client = HttpClient.of(clientFactory, "h2c://127.0.0.1:" + port);
+            final WebClient client = WebClient.of(clientFactory, "h2c://127.0.0.1:" + port);
             final CompletableFuture<AggregatedHttpResponse> future = client.get("/").aggregate();
 
             try (Socket s = ss.accept()) {
@@ -154,7 +154,7 @@ public void maxFrameSize() throws Exception {
                                   .build()) {
 
             final int port = ss.getLocalPort();
-            final HttpClient client = HttpClient.of(clientFactory, "http://127.0.0.1:" + port);
+            final WebClient client = WebClient.of(clientFactory, "http://127.0.0.1:" + port);
             client.get("/").aggregate();
 
             try (Socket s = ss.accept()) {

File: core/src/test/java/com/linecorp/armeria/client/Http2GoAwayTest.java
Patch:
@@ -63,7 +63,7 @@ public void streamEndsBeforeGoAway() throws Exception {
 
             final int port = ss.getLocalPort();
 
-            final HttpClient client = HttpClient.of(clientFactory, "h2c://127.0.0.1:" + port);
+            final WebClient client = WebClient.of(clientFactory, "h2c://127.0.0.1:" + port);
             final CompletableFuture<AggregatedHttpResponse> future = client.get("/").aggregate();
 
             try (Socket s = ss.accept()) {
@@ -109,7 +109,7 @@ public void streamEndsAfterGoAway() throws Exception {
 
             final int port = ss.getLocalPort();
 
-            final HttpClient client = HttpClient.of(clientFactory, "h2c://127.0.0.1:" + port);
+            final WebClient client = WebClient.of(clientFactory, "h2c://127.0.0.1:" + port);
             final CompletableFuture<AggregatedHttpResponse> future = client.get("/").aggregate();
 
             try (Socket s = ss.accept()) {
@@ -156,7 +156,7 @@ public void streamGreaterThanLastStreamId() throws Exception {
 
             final int port = ss.getLocalPort();
 
-            final HttpClient client = HttpClient.of(clientFactory, "h2c://127.0.0.1:" + port);
+            final WebClient client = WebClient.of(clientFactory, "h2c://127.0.0.1:" + port);
             final CompletableFuture<AggregatedHttpResponse> future1 = client.get("/").aggregate();
             try (Socket s = ss.accept()) {
 

File: core/src/test/java/com/linecorp/armeria/client/HttpClientMaxConcurrentStreamTest.java
Patch:
@@ -118,7 +118,7 @@ public void tearDown() {
 
     @Test
     public void shouldCreateConnectionWhenExceedsMaxConcurrentStreams() throws Exception {
-        final HttpClient client = HttpClient.of(clientFactory, server.uri(SessionProtocol.H2C, "/"));
+        final WebClient client = WebClient.of(clientFactory, server.uri(SessionProtocol.H2C, "/"));
         final AtomicInteger opens = new AtomicInteger();
         final AtomicInteger closes = new AtomicInteger();
         connectionPoolListener = new ConnectionPoolListener() {

File: core/src/test/java/com/linecorp/armeria/client/HttpClientPipeliningTest.java
Patch:
@@ -125,7 +125,7 @@ public void resetState() {
 
     @Test
     public void withoutPipelining() throws Exception {
-        final HttpClient client = HttpClient.of(
+        final WebClient client = WebClient.of(
                 factoryWithoutPipelining, "h1c://127.0.0.1:" + server.httpPort());
 
         final HttpResponse res1 = client.get("/");
@@ -146,7 +146,7 @@ public void withoutPipelining() throws Exception {
 
     @Test
     public void withPipelining() throws Exception {
-        final HttpClient client = HttpClient.of(
+        final WebClient client = WebClient.of(
                 factoryWithPipelining, "h1c://127.0.0.1:" + server.httpPort());
 
         final HttpResponse res1;

File: core/src/test/java/com/linecorp/armeria/client/HttpResponseDecoderTest.java
Patch:
@@ -65,7 +65,7 @@ void confirmResponseStartAndEndInTheSameThread(SessionProtocol protocol)
         final RetryStrategy strategy =
                 (ctx, cause) -> CompletableFuture.completedFuture(Backoff.withoutDelay());
 
-        final HttpClientBuilder builder = HttpClient.builder(server.uri(protocol, "/"));
+        final WebClientBuilder builder = WebClient.builder(server.uri(protocol, "/"));
         // This increases the execution duration of 'endResponse0' of the DefaultRequestLog,
         // which means that we have more chance to reproduce the bug if two threads are racing
         // for notifying RESPONSE_END to listeners.
@@ -91,7 +91,7 @@ void confirmResponseStartAndEndInTheSameThread(SessionProtocol protocol)
         });
 
         // Execute it as much as we can in order to confirm that there's no problem.
-        final HttpClient client = builder.build();
+        final WebClient client = builder.build();
         final int n = 1000;
         final CountDownLatch latch = new CountDownLatch(n);
         for (int i = 0; i < n; i++) {

File: core/src/test/java/com/linecorp/armeria/client/limit/ConcurrencyLimitingHttpClientTest.java
Patch:
@@ -30,8 +30,8 @@
 import org.junit.jupiter.api.extension.RegisterExtension;
 import org.mockito.Mock;
 
-import com.linecorp.armeria.client.Client;
 import com.linecorp.armeria.client.ClientRequestContext;
+import com.linecorp.armeria.client.HttpClient;
 import com.linecorp.armeria.client.UnprocessedRequestException;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
@@ -47,7 +47,7 @@ class ConcurrencyLimitingHttpClientTest {
     static final EventLoopExtension eventLoop = new EventLoopExtension();
 
     @Mock
-    private Client<HttpRequest, HttpResponse> delegate;
+    private HttpClient delegate;
 
     /**
      * Tests the request pattern  that does not exceed maxConcurrency.

File: core/src/test/java/com/linecorp/armeria/common/HttpRequestSubscriberTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.junit.jupiter.params.provider.ArgumentsProvider;
 import org.junit.jupiter.params.provider.ArgumentsSource;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.FixedHttpRequest.EmptyFixedHttpRequest;
 import com.linecorp.armeria.common.FixedHttpRequest.OneElementFixedHttpRequest;
 import com.linecorp.armeria.common.FixedHttpRequest.RegularFixedHttpRequest;
@@ -63,11 +63,11 @@ protected void configure(ServerBuilder sb) throws Exception {
         }
     };
 
-    static HttpClient client;
+    static WebClient client;
 
     @BeforeAll
     static void beforeClass() {
-        client = HttpClient.of(rule.httpUri("/"));
+        client = WebClient.of(rule.httpUri("/"));
     }
 
     @ParameterizedTest

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpDocServiceTest.java
Patch:
@@ -49,7 +49,7 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
@@ -139,7 +139,7 @@ public void jsonSpecification() throws InterruptedException {
                 serviceDescription, methodInfos));
         addExamples(expectedJson);
 
-        final HttpClient client = HttpClient.of(server.uri("/"));
+        final WebClient client = WebClient.of(server.uri("/"));
         final AggregatedHttpResponse res = client.get("/docs/specification.json").aggregate().join();
         assertThat(res.status()).isEqualTo(HttpStatus.OK);
         assertThat(res.headers().get(HttpHeaderNames.CACHE_CONTROL)).isEqualTo("no-cache, must-revalidate");
@@ -299,7 +299,7 @@ private static void addExamples(JsonNode json) {
 
     @Test
     public void excludeAllServices() throws IOException {
-        final HttpClient client = HttpClient.of(server.uri("/"));
+        final WebClient client = WebClient.of(server.uri("/"));
         final AggregatedHttpResponse res = client.get("/excludeAll/specification.json").aggregate().join();
         assertThat(res.status()).isEqualTo(HttpStatus.OK);
         final JsonNode actualJson = mapper.readTree(res.contentUtf8());

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceBlockingTest.java
Patch:
@@ -35,7 +35,7 @@
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.node.TextNode;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpResponse;
@@ -146,7 +146,7 @@ public CompletionStage<String> completionStage(RequestContext ctx) {
             "/myEvenLoop/completionStage, 0"
     })
     void testOnlyEventLoopWithoutBlockingAnnotation(String path, Integer count) throws Exception {
-        final HttpClient client = HttpClient.of(server.uri("/"));
+        final WebClient client = WebClient.of(server.uri("/"));
 
         final RequestHeaders headers = RequestHeaders.of(HttpMethod.GET, path);
         final AggregatedHttpResponse res = client.execute(headers).aggregate().join();
@@ -162,7 +162,7 @@ void testOnlyEventLoopWithoutBlockingAnnotation(String path, Integer count) thro
             "/myBlocking/completionStage, 1"
     })
     void testOnlyBlockingWithBlockingAnnotation(String path, Integer count) throws Exception {
-        final HttpClient client = HttpClient.of(server.uri("/"));
+        final WebClient client = WebClient.of(server.uri("/"));
 
         final RequestHeaders headers = RequestHeaders.of(HttpMethod.GET, path);
         final AggregatedHttpResponse res = client.execute(headers).aggregate().join();

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceDecorationTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.ClassRule;
 import org.junit.Test;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
@@ -160,7 +160,7 @@ public HttpResponse serve(
 
     @Test
     public void testDecoratingAnnotatedService() throws Exception {
-        final HttpClient client = HttpClient.of(rule.uri("/"));
+        final WebClient client = WebClient.of(rule.uri("/"));
 
         AggregatedHttpResponse response;
 

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceExceptionHandlerTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.junit.ClassRule;
 import org.junit.Test;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpRequest;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpMethod;
@@ -244,7 +244,7 @@ public HttpResponse handleException(ServiceRequestContext ctx, HttpRequest req,
 
     @Test
     public void testExceptionHandler() throws Exception {
-        final HttpClient client = HttpClient.of(rule.uri("/"));
+        final WebClient client = WebClient.of(rule.uri("/"));
 
         AggregatedHttpResponse response;
 

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceHandlersOrderTest.java
Patch:
@@ -27,7 +27,7 @@
 
 import com.fasterxml.jackson.databind.JsonNode;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpRequest;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpData;
@@ -266,7 +266,7 @@ public void exceptionHandlerOrder() throws Exception {
     }
 
     private static AggregatedHttpResponse executeRequest(AggregatedHttpRequest req) {
-        final HttpClient client = HttpClient.of(server.uri("/"));
+        final WebClient client = WebClient.of(server.uri("/"));
         return client.execute(req).aggregate().join();
     }
 }

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceTest.java
Patch:
@@ -49,7 +49,7 @@
 
 import com.google.common.collect.ImmutableList;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpRequest;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpHeaderNames;
@@ -839,7 +839,7 @@ void testParam() throws Exception {
 
     @Test
     void testAdvancedAnnotatedHttpService() throws Exception {
-        final HttpClient client = HttpClient.of(server.uri("/"));
+        final WebClient client = WebClient.of(server.uri("/"));
         final String path = "/8/same/path";
 
         RequestHeaders headers = RequestHeaders.of(HttpMethod.GET, path);

File: core/src/test/java/com/linecorp/armeria/server/AnnotatedServiceBindingBuilderTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.RegisterExtension;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
@@ -117,8 +117,8 @@ void testServiceDecoration_shouldCatchException() throws IOException {
     }
 
     private static AggregatedHttpResponse get(String path) {
-        final HttpClient httpClient = HttpClient.of(server.httpUri("/"));
-        return httpClient.get(path).aggregate().join();
+        final WebClient webClient = WebClient.of(server.httpUri("/"));
+        return webClient.get(path).aggregate().join();
     }
 
     private static class TestService {

File: core/src/test/java/com/linecorp/armeria/server/HttpServerAbortingInfiniteStreamTest.java
Patch:
@@ -33,7 +33,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpObject;
@@ -92,11 +92,11 @@ public void run() {
     };
 
     @ParameterizedTest
-    @EnumSource(value = SessionProtocol.class, names = { "H1C", "H2C"})
+    @EnumSource(value = SessionProtocol.class, names = { "H1C", "H2C" })
     void shouldCancelInfiniteStreamImmediately(SessionProtocol protocol) {
         expectedProtocol.set(protocol);
 
-        final HttpClient client = HttpClient.of(server.uri(protocol, "/"));
+        final WebClient client = WebClient.of(server.uri(protocol, "/"));
         final HttpResponse response = client.execute(RequestHeaders.of(HttpMethod.GET, "/infinity"));
 
         response.subscribe(new Subscriber<HttpObject>() {

File: core/src/test/java/com/linecorp/armeria/server/HttpServiceTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.junit.ClassRule;
 import org.junit.Test;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaderNames;
@@ -161,7 +161,7 @@ public void testContentLength() throws Exception {
 
     @Test
     public void contentLengthIsNotSetWhenTrailerExists() {
-        final HttpClient client = HttpClient.of(rule.uri("/"));
+        final WebClient client = WebClient.of(rule.uri("/"));
         AggregatedHttpResponse res = client.get("/trailersWithoutData").aggregate().join();
         assertThat(res.headers().get(HttpHeaderNames.CONTENT_LENGTH)).isNull();
         assertThat(res.trailers().get(HttpHeaderNames.of("foo"))).isEqualTo("bar");

File: core/src/test/java/com/linecorp/armeria/server/PortUnificationServerTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.junit.jupiter.params.provider.ArgumentsSource;
 
 import com.linecorp.armeria.client.ClientFactory;
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
@@ -70,7 +70,7 @@ void httpAndHttpsUsesSamePort() {
     @ParameterizedTest
     @ArgumentsSource(UniqueProtocolsProvider.class)
     void test(SessionProtocol protocol) throws Exception {
-        final HttpClient client = HttpClient.of(clientFactory, server.uri(protocol, "/"));
+        final WebClient client = WebClient.of(clientFactory, server.uri(protocol, "/"));
         final AggregatedHttpResponse response = client.execute(HttpRequest.of(HttpMethod.GET, "/"))
                                                       .aggregate().join();
         assertThat(response.contentUtf8()).isEqualTo(protocol.name());

File: core/src/test/java/com/linecorp/armeria/server/VirtualHostAnnotatedServiceBindingBuilderTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.jupiter.api.extension.RegisterExtension;
 
 import com.linecorp.armeria.client.Endpoint;
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
@@ -89,8 +89,8 @@ void testAllConfigsAreSet() {
     @Test
     void testServiceDecoration_shouldCatchException() throws Exception {
         final Endpoint endpoint = Endpoint.of(TEST_HOST, server.httpPort()).withIpAddr("127.0.0.1");
-        final HttpClient httpClientTest = HttpClient.of(SessionProtocol.HTTP, endpoint);
-        final AggregatedHttpResponse join = httpClientTest.get("/foo/bar").aggregate().join();
+        final WebClient webClientTest = WebClient.of(SessionProtocol.HTTP, endpoint);
+        final AggregatedHttpResponse join = webClientTest.get("/foo/bar").aggregate().join();
 
         assertThat(join.status()).isEqualTo(HttpStatus.NOT_IMPLEMENTED);
     }

File: core/src/test/java/com/linecorp/armeria/server/file/HttpFileServiceAdditionalHeadersTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.junit.ClassRule;
 import org.junit.Test;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpStatus;
@@ -47,7 +47,7 @@ protected void configure(ServerBuilder sb) throws Exception {
 
     @Test
     public void testAdditionalHeaders() {
-        final HttpClient client = HttpClient.of(server.uri("/"));
+        final WebClient client = WebClient.of(server.uri("/"));
         final AggregatedHttpResponse res = client.get("/java/lang/Object.class").aggregate().join();
         assertThat(res.status()).isEqualTo(HttpStatus.OK);
         assertThat(res.headers().getAll(HttpHeaderNames.of("foo"))).containsExactly("1", "2");

File: core/src/test/java/com/linecorp/armeria/server/other/AnnotatedHttpServiceAccessModifierTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.ClassRule;
 import org.junit.Test;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.TestConverters.UnformattedStringConverterFunction;
@@ -95,7 +95,7 @@ private static String privateStatic0() {
 
     @Test
     public void testAccessModifier() throws Exception {
-        final HttpClient client = HttpClient.of(rule.uri("/"));
+        final WebClient client = WebClient.of(rule.uri("/"));
 
         assertThat(client.get("/anonymous/public").aggregate().join().contentUtf8())
                 .isEqualTo("hello");

File: core/src/test/java/com/linecorp/armeria/server/streaming/JsonTextSequencesTest.java
Patch:
@@ -28,7 +28,7 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.util.concurrent.MoreExecutors;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpObject;
@@ -69,7 +69,7 @@ protected void configure(ServerBuilder sb) throws Exception {
 
     @Test
     public void fromPublisherOrStream() {
-        final HttpClient client = HttpClient.of(rule.uri("/seq"));
+        final WebClient client = WebClient.of(rule.uri("/seq"));
         for (final String path : ImmutableList.of("/publisher", "/stream", "/custom-mapper")) {
             final HttpResponse response = client.get(path);
             StepVerifier.create(response)
@@ -88,7 +88,7 @@ public void fromPublisherOrStream() {
     @Test
     public void singleSequence() {
         final AggregatedHttpResponse response =
-                HttpClient.of(rule.uri("/seq")).get("/single").aggregate().join();
+                WebClient.of(rule.uri("/seq")).get("/single").aggregate().join();
         assertThat(response.status()).isEqualTo(HttpStatus.OK);
         assertThat(response.headers().contentType()).isEqualTo(MediaType.JSON_SEQ);
         // Check whether the content is serialized as a JSON Text Sequence format.

File: core/src/test/java/com/linecorp/armeria/server/throttling/ThrottlingServiceTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
@@ -53,13 +53,13 @@ protected void configure(ServerBuilder sb) throws Exception {
 
     @Test
     public void serve() throws Exception {
-        final HttpClient client = HttpClient.of(serverRule.uri("/"));
+        final WebClient client = WebClient.of(serverRule.uri("/"));
         assertThat(client.get("/http-always").aggregate().get().status()).isEqualTo(HttpStatus.OK);
     }
 
     @Test
     public void throttle() throws Exception {
-        final HttpClient client = HttpClient.of(serverRule.uri("/"));
+        final WebClient client = WebClient.of(serverRule.uri("/"));
         assertThat(client.get("/http-never").aggregate().get().status())
                 .isEqualTo(HttpStatus.SERVICE_UNAVAILABLE);
     }

File: examples/annotated-http-service/src/test/java/example/armeria/server/annotated/AnnotatedHttpServiceTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpMethod;
@@ -22,13 +22,13 @@
 public class AnnotatedHttpServiceTest {
 
     private static Server server;
-    private static HttpClient client;
+    private static WebClient client;
 
     @BeforeClass
     public static void beforeClass() {
         server = newServer(0);
         server.start().join();
-        client = HttpClient.of("http://127.0.0.1:" + server.activeLocalPort());
+        client = WebClient.of("http://127.0.0.1:" + server.activeLocalPort());
     }
 
     @AfterClass

File: examples/server-sent-events/src/test/java/example/armeria/server/sse/MainTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpStatus;
@@ -23,7 +23,7 @@
 public class MainTest {
 
     private static Server server;
-    private static HttpClient client;
+    private static WebClient client;
 
     @BeforeClass
     public static void beforeClass() throws Exception {
@@ -33,7 +33,7 @@ public static void beforeClass() throws Exception {
         server = Main.newServer(0, 0,
                                 Duration.ofMillis(200), 5, () -> Long.toString(sequence.getAndIncrement()));
         server.start().join();
-        client = HttpClient.of("http://127.0.0.1:" + server.activeLocalPort());
+        client = WebClient.of("http://127.0.0.1:" + server.activeLocalPort());
     }
 
     @AfterClass

File: examples/spring-boot-minimal/src/test/java/example/springframework/boot/minimal/HelloApplicationIntegrationTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.context.junit4.SpringRunner;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.server.Server;
@@ -26,11 +26,11 @@ public class HelloApplicationIntegrationTest {
     @Inject
     private Server server;
 
-    private HttpClient client;
+    private WebClient client;
 
     @Before
     public void setup() {
-        client = HttpClient.of("http://localhost:" + server.activeLocalPort());
+        client = WebClient.of("http://localhost:" + server.activeLocalPort());
     }
 
     @Test

File: examples/spring-boot-tomcat/src/test/java/example/springframework/boot/tomcat/HelloIntegrationTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.context.junit4.SpringRunner;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.server.Server;
@@ -31,12 +31,12 @@ public class HelloIntegrationTest {
 
     @Inject
     private Server server;
-    private HttpClient client;
+    private WebClient client;
 
     @Before
     public void initClient() {
         if (client == null) {
-            client = HttpClient.of("http://127.0.0.1:" + server.activeLocalPort());
+            client = WebClient.of("http://127.0.0.1:" + server.activeLocalPort());
         }
     }
 

File: examples/spring-boot-webflux/src/main/java/example/springframework/boot/webflux/HelloConfiguration.java
Patch:
@@ -3,8 +3,8 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
-import com.linecorp.armeria.client.Client;
 import com.linecorp.armeria.client.ClientFactory;
+import com.linecorp.armeria.client.HttpClient;
 import com.linecorp.armeria.client.circuitbreaker.CircuitBreakerHttpClient;
 import com.linecorp.armeria.client.circuitbreaker.CircuitBreakerStrategy;
 import com.linecorp.armeria.server.Server;
@@ -59,11 +59,11 @@ public ClientFactory clientFactory() {
     }
 
     /**
-     * A user can configure a {@link Client} by providing an {@link ArmeriaClientConfigurator} bean.
+     * A user can configure an {@link HttpClient} by providing an {@link ArmeriaClientConfigurator} bean.
      */
     @Bean
     public ArmeriaClientConfigurator armeriaClientConfigurator(ClientFactory clientFactory) {
-        // Customize the client using the given HttpClientBuilder. For example:
+        // Customize the client using the given WebClientBuilder. For example:
         return builder -> {
             // Use a circuit breaker for each remote host.
             final CircuitBreakerStrategy strategy = CircuitBreakerStrategy.onServerErrorStatus();

File: examples/static-files/src/test/java/example/armeria/server/files/MainTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
@@ -15,13 +15,13 @@
 public class MainTest {
 
     private static Server server;
-    private static HttpClient client;
+    private static WebClient client;
 
     @BeforeClass
     public static void beforeClass() throws Exception {
         server = Main.newServer(0, 0);
         server.start().join();
-        client = HttpClient.of("http://127.0.0.1:" + server.activeLocalPort());
+        client = WebClient.of("http://127.0.0.1:" + server.activeLocalPort());
     }
 
     @AfterClass

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaClientCall.java
Patch:
@@ -32,9 +32,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.linecorp.armeria.client.Client;
 import com.linecorp.armeria.client.DefaultClientRequestContext;
 import com.linecorp.armeria.client.Endpoint;
+import com.linecorp.armeria.client.HttpClient;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpHeadersBuilder;
 import com.linecorp.armeria.common.HttpRequest;
@@ -93,7 +93,7 @@ class ArmeriaClientCall<I, O> extends ClientCall<I, O>
 
     private final DefaultClientRequestContext ctx;
     private final Endpoint endpoint;
-    private final Client<HttpRequest, HttpResponse> httpClient;
+    private final HttpClient httpClient;
     private final HttpRequestWriter req;
     private final MethodDescriptor<I, O> method;
     private final CallOptions callOptions;
@@ -120,7 +120,7 @@ class ArmeriaClientCall<I, O> extends ClientCall<I, O>
     ArmeriaClientCall(
             DefaultClientRequestContext ctx,
             Endpoint endpoint,
-            Client<HttpRequest, HttpResponse> httpClient,
+            HttpClient httpClient,
             HttpRequestWriter req,
             MethodDescriptor<I, O> method,
             int maxOutboundMessageSizeBytes,

File: grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java
Patch:
@@ -59,7 +59,7 @@
 import com.linecorp.armeria.client.ClientOption;
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.Clients;
-import com.linecorp.armeria.client.DecoratingClientFunction;
+import com.linecorp.armeria.client.DecoratingHttpClientFunction;
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.client.ResponseTimeoutException;
 import com.linecorp.armeria.client.logging.LoggingClient;
@@ -68,7 +68,6 @@
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpHeadersBuilder;
 import com.linecorp.armeria.common.HttpObject;
-import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;
@@ -201,7 +200,7 @@ protected HttpObject filter(HttpObject obj) {
     @Before
     public void setUp() {
         requestLogQueue.clear();
-        final DecoratingClientFunction<HttpRequest, HttpResponse> requestLogRecorder = (delegate, ctx, req) -> {
+        final DecoratingHttpClientFunction requestLogRecorder = (delegate, ctx, req) -> {
             ctx.log().addListener(requestLogQueue::add, RequestLogAvailability.COMPLETE);
             return delegate.execute(ctx, req);
         };

File: grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientUnwrapTest.java
Patch:
@@ -47,7 +47,7 @@ void test() {
         // The outermost decorator of the client must be returned,
         // because the search begins from outside to inside.
         // In the current setup, the outermost `Unwrappable` and `Client` are
-        // `ArmeriaChannel` and `RetryingHttpClient` respectively.
+        // `ArmeriaChannel` and `RetryingClient` respectively.
         assertThat(Clients.unwrap(client, Unwrappable.class)).containsInstanceOf(ArmeriaChannel.class);
         assertThat(Clients.unwrap(client, Client.class)).containsInstanceOf(RetryingHttpClient.class);
 

File: grpc/src/test/java/com/linecorp/armeria/common/grpc/protocol/AbstractUnaryGrpcServiceTest.java
Patch:
@@ -28,7 +28,7 @@
 import com.google.protobuf.InvalidProtocolBufferException;
 
 import com.linecorp.armeria.client.Clients;
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpStatus;
@@ -83,7 +83,7 @@ public void normal_downstream() {
                                                                           ByteString.copyFromUtf8("hello"))
                                                                   .build())
                                                .build()).getPayload().getBody().toStringUtf8())
-                  .isEqualTo("hello");
+                .isEqualTo("hello");
     }
 
     @Test
@@ -109,7 +109,7 @@ public void normal_upstream() {
 
     @Test
     public void invalidPayload() {
-        final HttpClient client = HttpClient.of(server.httpUri("/"));
+        final WebClient client = WebClient.of(server.httpUri("/"));
 
         final AggregatedHttpResponse message =
                 client.post("/armeria.grpc.testing.TestService/UnaryCall", "foobarbreak").aggregate().join();

File: grpc/src/test/java/com/linecorp/armeria/it/grpc/GrpcMetricsIntegrationTest.java
Patch:
@@ -36,7 +36,7 @@
 
 import com.linecorp.armeria.client.ClientBuilder;
 import com.linecorp.armeria.client.ClientFactory;
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.client.metric.MetricCollectingClient;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.MediaType;
@@ -210,10 +210,10 @@ private static void makeRequest(String name) throws Exception {
     }
 
     private static void makeUnframedRequest(String name) throws Exception {
-        final HttpClient client = new ClientBuilder(server.uri(SerializationFormat.NONE, "/"))
+        final WebClient client = new ClientBuilder(server.uri(SerializationFormat.NONE, "/"))
                 .factory(clientFactory)
                 .addHttpHeader(HttpHeaderNames.CONTENT_TYPE, MediaType.PROTOBUF.toString())
-                .build(HttpClient.class);
+                .build(WebClient.class);
 
         final SimpleRequest request =
                 SimpleRequest.newBuilder()

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcDocServiceTest.java
Patch:
@@ -39,7 +39,7 @@
 import com.google.protobuf.ByteString;
 import com.google.protobuf.Descriptors.ServiceDescriptor;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
@@ -165,7 +165,7 @@ entries, unifyFilter((plugin, service, method) -> true,
         // when building a DocService, so we add them manually here.
         addExamples(expectedJson);
 
-        final HttpClient client = HttpClient.of(server.uri("/"));
+        final WebClient client = WebClient.of(server.uri("/"));
         final AggregatedHttpResponse res = client.get("/docs/specification.json").aggregate().join();
         assertThat(res.status()).isSameAs(HttpStatus.OK);
 
@@ -186,7 +186,7 @@ entries, unifyFilter((plugin, service, method) -> true,
 
     @Test
     public void excludeAllServices() throws IOException {
-        final HttpClient client = HttpClient.of(server.uri("/"));
+        final WebClient client = WebClient.of(server.uri("/"));
         final AggregatedHttpResponse res = client.get("/excludeAll/specification.json").aggregate().join();
         assertThat(res.status()).isEqualTo(HttpStatus.OK);
         final JsonNode actualJson = mapper.readTree(res.contentUtf8());

File: saml/src/test/java/com/linecorp/armeria/server/saml/SamlServiceProviderTest.java
Patch:
@@ -89,7 +89,7 @@
 import com.google.common.collect.ImmutableMap;
 
 import com.linecorp.armeria.client.ClientOptions;
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpRequest;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpHeaderNames;
@@ -298,7 +298,7 @@ public boolean validateId(String id) {
         }
     }
 
-    final HttpClient client = HttpClient.of(rule.uri("/"), ClientOptions.of());
+    final WebClient client = WebClient.of(rule.uri("/"), ClientOptions.of());
 
     @Test
     public void shouldRespondAuthnRequest_HttpRedirect() throws Exception {

File: spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationWithConsumerTest.java
Patch:
@@ -34,7 +34,7 @@
 import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.context.junit4.SpringRunner;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
@@ -72,7 +72,7 @@ private String newUrl(String scheme) {
 
     @Test
     public void normal() throws Exception {
-        final HttpClient client = HttpClient.of(newUrl("h1c"));
+        final WebClient client = WebClient.of(newUrl("h1c"));
 
         final HttpResponse response = client.get("/customizer");
 

File: spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationWithoutMeterTest.java
Patch:
@@ -33,7 +33,7 @@
 import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.context.junit4.SpringRunner;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
@@ -67,7 +67,7 @@ private String newUrl(String scheme) {
 
     @Test
     public void testHttpServiceRegistrationBean() throws Exception {
-        final HttpClient client = HttpClient.of(newUrl("h1c"));
+        final WebClient client = WebClient.of(newUrl("h1c"));
 
         final HttpResponse response = client.get("/ok");
 

File: spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaCompressionConfigurationTest.java
Patch:
@@ -38,7 +38,7 @@
 
 import com.google.common.base.Strings;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpMethod;
@@ -111,15 +111,15 @@ public void compressionConfiguration() {
     @Test
     public void compressedResponse() {
         final AggregatedHttpResponse res =
-                HttpClient.of(newUrl()).execute(request(2048)).aggregate().join();
+                WebClient.of(newUrl()).execute(request(2048)).aggregate().join();
         assertThat(res.status()).isEqualTo(HttpStatus.OK);
         assertThat(res.headers().get(HttpHeaderNames.CONTENT_ENCODING)).isEqualTo("gzip");
     }
 
     @Test
     public void nonCompressedResponse() {
         final AggregatedHttpResponse res =
-                HttpClient.of(newUrl()).execute(request(1023)).aggregate().join();
+                WebClient.of(newUrl()).execute(request(1023)).aggregate().join();
         assertThat(res.status()).isEqualTo(HttpStatus.OK);
         assertThat(res.headers().get(HttpHeaderNames.CONTENT_ENCODING)).isNull();
     }

File: spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaSslConfigurationTest.java
Patch:
@@ -39,7 +39,7 @@
 import com.google.common.collect.ImmutableList;
 
 import com.linecorp.armeria.client.ClientFactory;
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
@@ -109,7 +109,7 @@ private String newUrl(SessionProtocol protocol) {
     }
 
     private void verify(SessionProtocol protocol) {
-        final HttpResponse response = HttpClient.of(clientFactory, newUrl(protocol)).get("/ok");
+        final HttpResponse response = WebClient.of(clientFactory, newUrl(protocol)).get("/ok");
 
         final AggregatedHttpResponse res = response.aggregate().join();
         assertThat(res.status()).isEqualTo(HttpStatus.OK);

File: spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaClientHttpRequest.java
Patch:
@@ -37,7 +37,7 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.MoreObjects;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeadersBuilder;
 import com.linecorp.armeria.common.HttpRequest;
@@ -53,7 +53,7 @@
  */
 final class ArmeriaClientHttpRequest extends AbstractClientHttpRequest {
 
-    private final HttpClient client;
+    private final WebClient client;
 
     private final RequestHeadersBuilder headers;
     private final DataBufferFactoryWrapper<?> factoryWrapper;
@@ -67,7 +67,7 @@ final class ArmeriaClientHttpRequest extends AbstractClientHttpRequest {
     @Nullable
     private HttpRequest request;
 
-    ArmeriaClientHttpRequest(HttpClient client, HttpMethod httpMethod, String pathAndQuery,
+    ArmeriaClientHttpRequest(WebClient client, HttpMethod httpMethod, String pathAndQuery,
                              URI uri, DataBufferFactoryWrapper<?> factoryWrapper) {
         this.client = requireNonNull(client, "client");
         this.httpMethod = requireNonNull(httpMethod, "httpMethod");

File: spring/boot-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/AbstractReactiveWebServerCustomKeyAliasTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.springframework.boot.web.server.LocalServerPort;
 
 import com.linecorp.armeria.client.ClientFactory;
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 
 import io.netty.handler.ssl.util.SimpleTrustManagerFactory;
 
@@ -65,7 +65,7 @@ void test() throws Exception {
                                   .build()) {
 
             // Send a request to make the TrustManager record the certificate.
-            final HttpClient client = HttpClient.of(clientFactory, "h2://127.0.0.1:" + port);
+            final WebClient client = WebClient.of(clientFactory, "h2://127.0.0.1:" + port);
             client.get("/").drainAll().join();
 
             assertThat(actualKeyName).hasValue(expectedKeyName);

File: spring/boot-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaClientConfiguratorTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.springframework.core.annotation.Order;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
-import com.linecorp.armeria.client.HttpClientBuilder;
+import com.linecorp.armeria.client.WebClientBuilder;
 
 @RunWith(SpringJUnit4ClassRunner.class)
 public class ArmeriaClientConfiguratorTest {
@@ -60,7 +60,7 @@ private static class TestArmeriaClientConfigurator implements ArmeriaClientConfi
             }
 
             @Override
-            public void configure(HttpClientBuilder builder) {}
+            public void configure(WebClientBuilder builder) {}
 
             @Override
             public String toString() {

File: spring/boot-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ByteBufLeakTest.java
Patch:
@@ -45,7 +45,7 @@
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RestController;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.logging.RequestLogAvailability;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
@@ -117,7 +117,7 @@ private static void addListenerForCountingCompletedRequests() {
     @Test
     public void confirmNoBufferLeak() throws Exception {
         assert allocatedBuffers.isEmpty();
-        final HttpClient client = HttpClient.of("http://127.0.0.1:" + port);
+        final WebClient client = WebClient.of("http://127.0.0.1:" + port);
         for (int i = 0; i < 2; i++) {
             assertThat(client.get("/mono").aggregate().join().contentUtf8())
                     .isEqualTo("hello, WebFlux!");

File: testing-internal/src/main/java/com/linecorp/armeria/testing/internal/webapp/WebAppContainerTest.java
Patch:
@@ -40,7 +40,7 @@
 import org.junit.Test;
 
 import com.linecorp.armeria.client.ClientFactory;
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.Service;
@@ -142,7 +142,7 @@ public void https() throws Exception {
                 ClientFactory.builder()
                              .sslContextCustomizer(b -> b.trustManager(InsecureTrustManagerFactory.INSTANCE))
                              .build();
-        final HttpClient client = HttpClient.of(clientFactory, server().httpsUri("/"));
+        final WebClient client = WebClient.of(clientFactory, server().httpsUri("/"));
         final AggregatedHttpResponse response = client.get("/jsp/index.jsp").aggregate().get();
         final String actualContent = CR_OR_LF.matcher(response.contentUtf8())
                                              .replaceAll("");

File: testing/junit/src/main/java/com/linecorp/armeria/testing/junit/server/mock/MockWebServerExtension.java
Patch:
@@ -59,7 +59,7 @@
  * >
  * >   @Test
  * >   void checkSomething() {
- * >       HttpClient client = HttpClient.of(server.httpUri("/"));
+ * >       WebClient client = WebClient.of(server.httpUri("/"));
  * >
  * >       server.enqueue(AggregatedHttpResponse.of(HttpStatus.OK));
  * >       server.enqueue(AggregatedHttpResponse.of(HttpStatus.FORBIDDEN));

File: thrift/src/main/java/com/linecorp/armeria/client/thrift/DefaultTHttpClient.java
Patch:
@@ -21,9 +21,9 @@
 
 import javax.annotation.Nullable;
 
-import com.linecorp.armeria.client.Client;
 import com.linecorp.armeria.client.ClientBuilderParams;
 import com.linecorp.armeria.client.Endpoint;
+import com.linecorp.armeria.client.RpcClient;
 import com.linecorp.armeria.client.UserClient;
 import com.linecorp.armeria.common.DefaultRpcResponse;
 import com.linecorp.armeria.common.HttpMethod;
@@ -36,7 +36,7 @@
 
 final class DefaultTHttpClient extends UserClient<RpcRequest, RpcResponse> implements THttpClient {
 
-    DefaultTHttpClient(ClientBuilderParams params, Client<RpcRequest, RpcResponse> delegate,
+    DefaultTHttpClient(ClientBuilderParams params, RpcClient delegate,
                        MeterRegistry meterRegistry, SessionProtocol sessionProtocol, Endpoint endpoint) {
         super(params, delegate, meterRegistry, sessionProtocol, endpoint);
     }

File: thrift/src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTest.java
Patch:
@@ -54,7 +54,7 @@
 import com.linecorp.armeria.client.ConnectionPoolListener;
 import com.linecorp.armeria.client.InvalidResponseHeadersException;
 import com.linecorp.armeria.client.logging.ConnectionPoolLoggingListener;
-import com.linecorp.armeria.client.logging.LoggingClient;
+import com.linecorp.armeria.client.logging.LoggingRpcClient;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpResponse;
@@ -235,7 +235,7 @@ static void init() throws Exception {
         });
 
         if (ENABLE_LOGGING_DECORATORS) {
-            decoBuilder.addRpc(LoggingClient.newDecorator());
+            decoBuilder.addRpc(LoggingRpcClient.newDecorator());
         }
 
         clientOptions = ClientOptions.of(ClientOption.DECORATION.newValue(decoBuilder.build()));

File: thrift/src/test/java/com/linecorp/armeria/it/metric/DropwizardMetricsIntegrationTest.java
Patch:
@@ -37,7 +37,7 @@
 
 import com.linecorp.armeria.client.ClientBuilder;
 import com.linecorp.armeria.client.ClientFactory;
-import com.linecorp.armeria.client.metric.MetricCollectingClient;
+import com.linecorp.armeria.client.metric.MetricCollectingRpcClient;
 import com.linecorp.armeria.common.metric.DropwizardMeterRegistries;
 import com.linecorp.armeria.common.metric.MeterIdPrefixFunction;
 import com.linecorp.armeria.server.ServerBuilder;
@@ -160,7 +160,7 @@ private static String clientMetricNameWithStatusAndResult(String prop, int statu
     private static void makeRequest(String name) {
         final Iface client = new ClientBuilder(server.uri(BINARY, "/helloservice"))
                 .factory(clientFactory)
-                .rpcDecorator(MetricCollectingClient.newDecorator(
+                .rpcDecorator(MetricCollectingRpcClient.newDecorator(
                         MeterIdPrefixFunction.ofDefault("armeria.client.HelloService")))
                 .build(Iface.class);
         try {

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftDocServiceTest.java
Patch:
@@ -40,7 +40,7 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 
-import com.linecorp.armeria.client.HttpClient;
+import com.linecorp.armeria.client.WebClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
@@ -172,7 +172,7 @@ public void testOk() throws Exception {
         // when building a DocService, so we add them manually here.
         addExamples(expectedJson);
 
-        final HttpClient client = HttpClient.of(server.uri("/"));
+        final WebClient client = WebClient.of(server.uri("/"));
         final AggregatedHttpResponse res = client.get("/docs/specification.json").aggregate().join();
         assertThat(res.status()).isSameAs(HttpStatus.OK);
 
@@ -230,7 +230,7 @@ private static void removeDocStrings(JsonNode json) {
 
     @Test
     public void excludeAllServices() throws IOException {
-        final HttpClient client = HttpClient.of(server.uri("/"));
+        final WebClient client = WebClient.of(server.uri("/"));
         final AggregatedHttpResponse res = client.get("/excludeAll/specification.json").aggregate().join();
         assertThat(res.status()).isEqualTo(HttpStatus.OK);
         final JsonNode actualJson = mapper.readTree(res.contentUtf8());

File: core/src/main/java/com/linecorp/armeria/client/logging/LoggingClientBuilder.java
Patch:
@@ -67,9 +67,8 @@ public LoggingClientBuilder samplingRate(float samplingRate) {
      */
     public <I extends Request, O extends Response> LoggingClient<I, O> build(Client<I, O> delegate) {
         return new LoggingClient<>(delegate,
-                                   requestLogLevel(),
-                                   successfulResponseLogLevel(),
-                                   failedResponseLogLevel(),
+                                   requestLogLevelMapper(),
+                                   responseLogLevelMapper(),
                                    requestHeadersSanitizer(),
                                    requestContentSanitizer(),
                                    requestTrailersSanitizer(),

File: core/src/main/java/com/linecorp/armeria/server/logging/LoggingServiceBuilder.java
Patch:
@@ -57,9 +57,8 @@ public LoggingServiceBuilder samplingRate(float samplingRate) {
      */
     public LoggingService build(HttpService delegate) {
         return new LoggingService(delegate,
-                                  requestLogLevel(),
-                                  successfulResponseLogLevel(),
-                                  failedResponseLogLevel(),
+                                  requestLogLevelMapper(),
+                                  responseLogLevelMapper(),
                                   requestHeadersSanitizer(),
                                   requestContentSanitizer(),
                                   requestTrailersSanitizer(),

File: core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java
Patch:
@@ -63,6 +63,7 @@ public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Ex
             // - `ClientRequestContext.endpoint()` returns `null` only when the context initialization failed.
             // - `ClientUtil.initContextAndExecuteWithFallback()` will use the fallback response rather than
             //   what we return here.
+            req.abort(CONTEXT_INITIALIZATION_FAILED);
             return HttpResponse.ofFailure(CONTEXT_INITIALIZATION_FAILED);
         }
 
@@ -202,7 +203,7 @@ private static boolean isValidPath(HttpRequest req) {
 
     private static void handleEarlyRequestException(ClientRequestContext ctx,
                                                     HttpRequest req, Throwable cause) {
-        req.abort();
+        req.abort(cause);
         final RequestLogBuilder logBuilder = ctx.logBuilder();
         logBuilder.endRequest(cause);
         logBuilder.endResponse(cause);

File: core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java
Patch:
@@ -45,7 +45,6 @@
 
 import com.linecorp.armeria.common.HttpObject;
 import com.linecorp.armeria.common.SessionProtocol;
-import com.linecorp.armeria.common.logging.RequestLogBuilder;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.internal.ChannelUtil;
 import com.linecorp.armeria.internal.Http1ClientCodec;
@@ -448,7 +447,7 @@ public void onComplete() {}
             }, ctx.channel().eventLoop());
 
             // NB: No need to set the response timeout because we have session creation timeout.
-            responseDecoder.addResponse(0, null, res, RequestLogBuilder.NOOP, 0, UPGRADE_RESPONSE_MAX_LENGTH);
+            responseDecoder.addResponse(0, res, null, 0, UPGRADE_RESPONSE_MAX_LENGTH);
             ctx.fireChannelActive();
         }
 

File: core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java
Patch:
@@ -34,6 +34,7 @@
 import com.linecorp.armeria.common.ClosedSessionException;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.stream.CancelledSubscriptionException;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.internal.Http1ObjectEncoder;
 import com.linecorp.armeria.internal.Http2ObjectEncoder;
@@ -156,7 +157,7 @@ public boolean invoke(ClientRequestContext ctx, HttpRequest req, DecodedHttpResp
 
         final int numRequestsSent = ++this.numRequestsSent;
         final HttpResponseWrapper wrappedRes =
-                responseDecoder.addResponse(numRequestsSent, req, res, ctx.logBuilder(),
+                responseDecoder.addResponse(numRequestsSent, res, ctx,
                                             responseTimeoutMillis, maxContentLength);
         req.subscribe(
                 new HttpRequestSubscriber(channel, remoteAddress, requestEncoder,
@@ -181,7 +182,7 @@ private boolean handleEarlyCancellation(ClientRequestContext ctx, HttpRequest re
         // The response has been closed even before its request is sent.
         assert protocol != null;
 
-        req.abort();
+        req.abort(CancelledSubscriptionException.get());
         ctx.logBuilder().startRequest(channel, protocol);
         ctx.logBuilder().requestHeaders(req.headers());
         req.completionFuture().handle((unused, cause) -> {

File: core/src/main/java/com/linecorp/armeria/common/logging/NoopRequestLogBuilder.java
Patch:
@@ -28,6 +28,7 @@
 
 import io.netty.channel.Channel;
 
+@Deprecated
 final class NoopRequestLogBuilder implements RequestLogBuilder {
 
     @Override

File: core/src/main/java/com/linecorp/armeria/common/logging/RequestLogBuilder.java
Patch:
@@ -42,7 +42,10 @@ public interface RequestLogBuilder {
 
     /**
      * A dummy {@link RequestLogBuilder} that discards everything it collected.
+     *
+     * @deprecated This field will be removed without a replacement. Use {@link DefaultRequestLog} or a mock.
      */
+    @Deprecated
     RequestLogBuilder NOOP = new NoopRequestLogBuilder();
 
     /**

File: core/src/main/java/com/linecorp/armeria/common/stream/StreamMessageUtil.java
Patch:
@@ -26,7 +26,7 @@ final class StreamMessageUtil {
 
     static Throwable abortedOrLate(Subscriber<?> oldSubscriber) {
         if (oldSubscriber instanceof AbortingSubscriber) {
-            return AbortedStreamException.get();
+            return ((AbortingSubscriber<?>) oldSubscriber).cause();
         }
 
         return new IllegalStateException("subscribed by other subscriber already");

File: core/src/main/java/com/linecorp/armeria/internal/ClientUtil.java
Patch:
@@ -100,7 +100,7 @@ private static <O extends Response> O failAndGetFallbackResponse(
 
             final HttpRequest req = ctx.request();
             if (req != null) {
-                req.abort();
+                req.abort(cause);
             }
         }
         logBuilder.endResponse(cause);

File: core/src/main/java/com/linecorp/armeria/internal/Http2GoAwayHandler.java
Patch:
@@ -44,7 +44,7 @@ public final class Http2GoAwayHandler {
     private static final long CODE_INTERNAL_ERROR = Http2Error.INTERNAL_ERROR.code();
 
     private boolean goAwaySent;
-    private long goAwayReceived; // -1 if not received, errorCode if received.
+    private long goAwayReceived = -1; // -1 if not received, errorCode if received.
 
     /**
      * Returns {@code true} if the connection has sent a GOAWAY frame.

File: core/src/main/java/com/linecorp/armeria/server/DecodedHttpRequest.java
Patch:
@@ -154,7 +154,7 @@ void abortResponse(Throwable cause) {
         // Try to close the request first, then abort the response if it is already closed.
         if (!tryClose(cause) &&
             response != null && !response.isComplete()) {
-            response.abort();
+            response.abort(cause);
         }
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java
Patch:
@@ -379,6 +379,7 @@ public void setRequestTimeout(Duration requestTimeout) {
     }
 
     @Nullable
+    @Override
     public Runnable requestTimeoutHandler() {
         return requestTimeoutHandler;
     }

File: core/src/test/java/com/linecorp/armeria/client/HttpResponseWrapperTest.java
Patch:
@@ -151,7 +151,7 @@ private static HttpResponseWrapper httpResponseWrapper(DecodedHttpResponse res)
                 new TestHttpResponseDecoder(cctx.log().channel(), controller);
 
         res.init(controller);
-        return decoder.addResponse(1, req, res, cctx.logBuilder(), cctx.responseTimeoutMillis(),
+        return decoder.addResponse(1, res, cctx, cctx.responseTimeoutMillis(),
                                    cctx.maxResponseLength());
     }
 

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageDeframer.java
Patch:
@@ -71,7 +71,8 @@
 
 /**
  * A deframer of messages transported in the gRPC wire format. See
- * <a href="https://grpc.io/docs/guides/wire.html">gRPC Wire Protocol</a> for more detail on the protocol.
+ * <a href="https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md">gRPC Wire Format</a>
+ * for more detail on the protocol.
  *
  * <p>The logic has been mostly copied from {@code io.grpc.internal.MessageDeframer}, while removing the buffer
  * abstraction in favor of using {@link ByteBuf} directly, and allowing the delivery of uncompressed frames as

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java
Patch:
@@ -65,7 +65,8 @@
 
 /**
  * A framer of messages for transport with the gRPC wire protocol. See
- * <a href="https://grpc.io/docs/guides/wire.html">gRPC Wire Protocol</a> for more detail on the protocol.
+ * <a href="https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md">gRPC Wire Format</a>
+ * for more detail on the protocol.
  *
  * <p>The logic has mostly been copied from {@code io.grpc.internal.MessageFramer}, while removing the buffer
  * abstraction in favor of using {@link ByteBuf} directly. The code has been vastly simplified due to the lack

File: core/src/test/java/com/linecorp/armeria/server/ServerTest.java
Patch:
@@ -66,6 +66,7 @@
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.common.util.ThreadFactories;
 import com.linecorp.armeria.internal.metric.MicrometerUtil;
+import com.linecorp.armeria.server.logging.AccessLogWriter;
 import com.linecorp.armeria.server.logging.LoggingService;
 import com.linecorp.armeria.testing.internal.AnticipatedException;
 import com.linecorp.armeria.testing.junit4.server.ServerRule;
@@ -149,6 +150,8 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
             sb.decorator(decorator);
 
             sb.idleTimeoutMillis(idleTimeoutMillis);
+            // Enable access logs to make sure AccessLogWriter does not fail on an invalid path.
+            sb.accessLogWriter(AccessLogWriter.common(), false);
         }
     };
 

File: core/src/main/java/com/linecorp/armeria/server/RouteBuilder.java
Patch:
@@ -46,6 +46,8 @@
  */
 public final class RouteBuilder {
 
+    static final Route CATCH_ALL_ROUTE = new RouteBuilder().catchAll().build();
+
     @Nullable
     private PathMapping pathMapping;
 

File: core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java
Patch:
@@ -1167,7 +1167,7 @@ public VirtualHostBuilder virtualHost(String defaultHostname, String hostnamePat
      * @param decorator the {@link Function} that decorates {@link HttpService}s
      */
     public ServerBuilder decorator(Function<? super HttpService, ? extends HttpService> decorator) {
-        return decorator(Route.builder().catchAll().build(), decorator);
+        return decorator(Route.ofCatchAll(), decorator);
     }
 
     /**
@@ -1178,7 +1178,7 @@ public ServerBuilder decorator(Function<? super HttpService, ? extends HttpServi
      */
     public ServerBuilder decorator(
             DecoratingHttpServiceFunction decoratingHttpServiceFunction) {
-        return decorator(Route.builder().catchAll().build(), decoratingHttpServiceFunction);
+        return decorator(Route.ofCatchAll(), decoratingHttpServiceFunction);
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/composition/CompositeServiceEntry.java
Patch:
@@ -73,10 +73,10 @@ public final class CompositeServiceEntry<T extends Service<?, ?>> {
 
     /**
      * Creates a new {@link CompositeServiceEntry} whose {@link Service} is bound at
-     * {@linkplain RouteBuilder#catchAll() the catch-all path mapping}.
+     * {@linkplain Route#ofCatchAll() the catch-all path mapping}.
      */
     public static <T extends Service<?, ?>> CompositeServiceEntry<T> ofCatchAll(T service) {
-        return new CompositeServiceEntry<>(Route.builder().catchAll().build(), service);
+        return new CompositeServiceEntry<>(Route.ofCatchAll(), service);
     }
 
     /**

File: core/src/test/java/com/linecorp/armeria/server/CatchAllPathMappingTest.java
Patch:
@@ -23,11 +23,11 @@
 class CatchAllPathMappingTest {
     @Test
     void testLoggerName() throws Exception {
-        assertThat(Route.builder().catchAll().build().loggerName()).isEqualTo("__ROOT__");
+        assertThat(Route.ofCatchAll().loggerName()).isEqualTo("__ROOT__");
     }
 
     @Test
     void testMetricName() throws Exception {
-        assertThat(Route.builder().catchAll().build().meterTag()).isEqualTo("catch-all");
+        assertThat(Route.ofCatchAll().meterTag()).isEqualTo("catch-all");
     }
 }

File: core/src/test/java/com/linecorp/armeria/server/RoutedTest.java
Patch:
@@ -27,9 +27,7 @@ class RoutedTest {
      */
     @Test
     void shouldNotAcceptEmptyResult() {
-        assertThatThrownBy(() -> Routed.of(Route.builder().catchAll().build(),
-                                           RoutingResult.empty(),
-                                           new Object()))
+        assertThatThrownBy(() -> Routed.of(Route.ofCatchAll(), RoutingResult.empty(), new Object()))
                 .isInstanceOf(IllegalArgumentException.class);
     }
 

File: core/src/test/java/com/linecorp/armeria/server/RouterTest.java
Patch:
@@ -132,7 +132,7 @@ void duplicateRoutes() {
         testDuplicateRoutes(Route.builder().path("exact:/a").build(),
                             Route.builder().path("/a").build());
         testDuplicateRoutes(Route.builder().path("prefix:/").build(),
-                            Route.builder().catchAll().build());
+                            Route.ofCatchAll());
     }
 
     /**

File: core/src/test/java/com/linecorp/armeria/server/ServiceTest.java
Patch:
@@ -67,7 +67,7 @@ private static void assertDecoration(FooService inner, HttpService outer) throws
 
         // Test if FooService.serviceAdded() is invoked.
         @SuppressWarnings({ "unchecked", "rawtypes" })
-        final ServiceConfig cfg = new ServiceConfig(Route.builder().catchAll().build(),
+        final ServiceConfig cfg = new ServiceConfig(Route.ofCatchAll(),
                                                     outer, "foo", 1, 1,
                                                     true, ContentPreviewerFactory.disabled(),
                                                     ContentPreviewerFactory.disabled(),

File: spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java
Patch:
@@ -205,7 +205,7 @@ private static ServerBuilder configureService(ServerBuilder sb, HttpHandler http
                                                   @Nullable String serverHeader) {
         final ArmeriaHttpHandlerAdapter handler =
                 new ArmeriaHttpHandlerAdapter(httpHandler, factoryWrapper);
-        return sb.service(Route.builder().catchAll().build(), (ctx, req) -> {
+        return sb.service(Route.ofCatchAll(), (ctx, req) -> {
             final CompletableFuture<HttpResponse> future = new CompletableFuture<>();
             final HttpResponse response = HttpResponse.from(future);
             final Disposable disposable = handler.handle(ctx, req, future, serverHeader).subscribe();

File: benchmarks/src/jmh/java/com/linecorp/armeria/grpc/GrpcServiceBenchmark.java
Patch:
@@ -34,7 +34,7 @@
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
 import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageFramer;
 import com.linecorp.armeria.grpc.shared.GithubApiService;
-import com.linecorp.armeria.server.Service;
+import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.grpc.GrpcService;
 import com.linecorp.armeria.unsafe.ByteBufHttpData;
@@ -47,7 +47,7 @@
 @State(Scope.Thread)
 public class GrpcServiceBenchmark {
 
-    private static final Service<HttpRequest, HttpResponse> SERVICE =
+    private static final HttpService SERVICE =
             GrpcService.builder()
                        .addService(new GithubApiService())
                        .build();

File: benchmarks/src/jmh/java/com/linecorp/armeria/server/RoutersBenchmark.java
Patch:
@@ -24,7 +24,6 @@
 import com.google.common.collect.ImmutableList;
 
 import com.linecorp.armeria.common.HttpMethod;
-import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.RequestHeaders;
@@ -33,7 +32,7 @@
 
 public class RoutersBenchmark {
 
-    private static final Service<HttpRequest, HttpResponse> SERVICE =
+    private static final HttpService SERVICE =
             (ctx, req) -> HttpResponse.of(HttpStatus.OK);
 
     private static final List<ServiceConfig> SERVICES;

File: brave/src/test/java/com/linecorp/armeria/it/brave/BraveIntegrationTest.java
Patch:
@@ -65,8 +65,8 @@
 import com.linecorp.armeria.common.thrift.ThriftCompletableFuture;
 import com.linecorp.armeria.common.util.ThreadFactories;
 import com.linecorp.armeria.server.AbstractHttpService;
+import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.ServerBuilder;
-import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.brave.BraveService;
 import com.linecorp.armeria.server.thrift.THttpService;
@@ -219,7 +219,7 @@ public void shouldHaveNoExtraSpans() {
         assertThat(spanReporter.spans).isEmpty();
     }
 
-    private static BraveService decorate(String name, Service<HttpRequest, HttpResponse> service) {
+    private static BraveService decorate(String name, HttpService service) {
         return BraveService.newDecorator(newTracing(name)).apply(service);
     }
 

File: brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceTest.java
Patch:
@@ -45,7 +45,7 @@
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
 import com.linecorp.armeria.common.util.SafeCloseable;
-import com.linecorp.armeria.server.Service;
+import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 import brave.Tracing;
@@ -177,8 +177,7 @@ private static RequestLog testServiceInvocation(Reporter<Span> reporter,
         logBuilder.endRequest();
 
         try (SafeCloseable ignored = ctx.push()) {
-            @SuppressWarnings("unchecked")
-            final Service<HttpRequest, HttpResponse> delegate = mock(Service.class);
+            final HttpService delegate = mock(HttpService.class);
             final BraveService service = BraveService.newDecorator(httpTracing).apply(delegate);
             when(delegate.serve(ctx, req)).thenReturn(res);
 

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerHttpClient.java
Patch:
@@ -62,7 +62,7 @@ public final class CircuitBreakerHttpClient extends CircuitBreakerClient<HttpReq
      * <p>Since {@link CircuitBreaker} is a unit of failure detection, don't reuse the same instance for
      * unrelated services.
      *
-     * @param factory a function that takes a {@link HttpMethod} and creates a new {@link CircuitBreaker}
+     * @param factory a function that takes an {@link HttpMethod} and creates a new {@link CircuitBreaker}
      */
     public static Function<Client<HttpRequest, HttpResponse>, CircuitBreakerHttpClient>
     newPerMethodDecorator(Function<String, CircuitBreaker> factory,

File: core/src/main/java/com/linecorp/armeria/client/encoding/HttpDecodingClient.java
Patch:
@@ -34,7 +34,7 @@
 
 /**
  * A {@link DecoratingClient} that requests and decodes HTTP encoding (e.g., gzip) that has been applied to the
- * content of a {@link HttpResponse}.
+ * content of an {@link HttpResponse}.
  */
 public final class HttpDecodingClient extends SimpleDecoratingHttpClient {
 

File: core/src/main/java/com/linecorp/armeria/client/logging/LoggingClient.java
Patch:
@@ -34,7 +34,6 @@
 import com.linecorp.armeria.common.logging.LogLevel;
 import com.linecorp.armeria.common.logging.RequestLogAvailability;
 import com.linecorp.armeria.common.util.Sampler;
-import com.linecorp.armeria.server.logging.LoggingService;
 
 /**
  * Decorates a {@link Client} to log {@link Request}s and {@link Response}s.
@@ -95,7 +94,7 @@ public static LoggingClientBuilder builder() {
     /**
      * Creates a new instance that logs {@link Request}s and {@link Response}s at {@link LogLevel#INFO}.
      *
-     * @deprecated Use {@link LoggingService#newDecorator()}.
+     * @deprecated Use {@link LoggingClient#newDecorator()}.
      */
     @Deprecated
     public LoggingClient(Client<I, O> delegate) {

File: core/src/main/java/com/linecorp/armeria/common/HttpData.java
Patch:
@@ -39,7 +39,7 @@
 
 /**
  * HTTP/2 data. Helpers in this class create {@link HttpData} objects that leave the stream open.
- * To create a {@link HttpData} that closes the stream, directly instantiate {@link DefaultHttpData}.
+ * To create an {@link HttpData} that closes the stream, directly instantiate {@link DefaultHttpData}.
  *
  * <p>Implementations should generally extend {@link AbstractHttpData} to interact with other {@link HttpData}
  * implementations.

File: core/src/main/java/com/linecorp/armeria/common/HttpRequest.java
Patch:
@@ -262,7 +262,7 @@ static HttpRequest of(RequestHeaders headers, Publisher<? extends HttpObject> pu
      * {@link RequestContext#updateRequest(HttpRequest)} if you are intercepting an {@link HttpRequest}
      * in a decorator. For example:
      * <pre>{@code
-     * > public class MyService extends SimpleDecoratingService<HttpRequest, HttpResponse> {
+     * > public class MyService extends SimpleDecoratingHttpService {
      * >     @Override
      * >     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) {
      * >         // Create a new request with an additional header.

File: core/src/main/java/com/linecorp/armeria/common/Request.java
Patch:
@@ -17,6 +17,6 @@
 package com.linecorp.armeria.common;
 
 /**
- * A request. It has to be a {@link HttpRequest} or a {@link RpcRequest}.
+ * A request. It has to be an {@link HttpRequest} or an {@link RpcRequest}.
  */
 public interface Request {}

File: core/src/main/java/com/linecorp/armeria/common/Response.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * A response stream or a holder of the future result value.
- * It has to be a {@link HttpResponse} or a {@link RpcResponse}.
+ * It has to be an {@link HttpResponse} or an {@link RpcResponse}.
  */
 public interface Response {
 

File: core/src/main/java/com/linecorp/armeria/server/AbstractPathMapping.java
Patch:
@@ -42,7 +42,7 @@ public final RoutingResultBuilder apply(RoutingContext routingCtx) {
      * Invoked by {@link #apply(RoutingContext)} to perform the actual path matching and path parameter
      * extraction.
      *
-     * @param routingCtx a context to find the {@link Service}
+     * @param routingCtx a context to find the {@link HttpService}
      *
      * @return a non-empty {@link RoutingResultBuilder} if the specified {@code path} matches this mapping.
      *         {@code null} otherwise.

File: core/src/main/java/com/linecorp/armeria/server/DecodedHttpRequest.java
Patch:
@@ -130,7 +130,8 @@ protected void onRemoval(HttpObject obj) {
 
     /**
      * Sets the specified {@link HttpResponse} which responds to this request. This is always called
-     * by the {@link HttpServerHandler} after the handler gets the {@link HttpResponse} from a {@link Service}.
+     * by the {@link HttpServerHandler} after the handler gets the {@link HttpResponse} from an
+     * {@link HttpService}.
      */
     void setResponse(HttpResponse response) {
         if (isResponseAborted) {

File: core/src/main/java/com/linecorp/armeria/server/DecoratingService.java
Patch:
@@ -23,9 +23,9 @@
 import com.linecorp.armeria.common.util.AbstractUnwrappable;
 
 /**
- * A {@link Service} that decorates another {@link Service}. Use {@link SimpleDecoratingService} or
- * {@link Service#decorate(DecoratingServiceFunction)} if your {@link Service} has the same {@link Request}
- * and {@link Response} type with the {@link Service} being decorated.
+ * A {@link Service} that decorates another {@link Service}. Use {@link SimpleDecoratingHttpService} or
+ * {@link SimpleDecoratingRpcService} if your {@link Service} has the same {@link Request} and {@link Response}
+ * type with the {@link Service} being decorated.
  *
  * @param <T_I> the {@link Request} type of the {@link Service} being decorated
  * @param <T_O> the {@link Response} type of the {@link Service} being decorated

File: core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java
Patch:
@@ -40,7 +40,6 @@
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpHeadersBuilder;
 import com.linecorp.armeria.common.HttpRequest;
-import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.NonWrappingRequestContext;
 import com.linecorp.armeria.common.Request;
@@ -305,7 +304,7 @@ public Map<String, String> pathParams() {
     }
 
     @Override
-    public <T extends Service<HttpRequest, HttpResponse>> T service() {
+    public HttpService service() {
         return cfg.service();
     }
 

File: core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java
Patch:
@@ -108,7 +108,7 @@ enum State {
         startTimeNanos = System.nanoTime();
     }
 
-    private Service<?, ?> service() {
+    private HttpService service() {
         return reqCtx.service();
     }
 

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -352,7 +352,7 @@ private void handleRequest(ChannelHandlerContext ctx, DecodedHttpRequest req) th
         // Decode the request and create a new invocation context from it to perform an invocation.
         final RoutingResult routingResult = routed.routingResult();
         final ServiceConfig serviceCfg = routed.value();
-        final Service<HttpRequest, HttpResponse> service = serviceCfg.service();
+        final HttpService service = serviceCfg.service();
         final Channel channel = ctx.channel();
         final InetAddress remoteAddress = ((InetSocketAddress) channel.remoteAddress()).getAddress();
 

File: core/src/main/java/com/linecorp/armeria/server/PathMapping.java
Patch:
@@ -31,7 +31,7 @@ interface PathMapping {
     /**
      * Matches the specified {@code path} and extracts the path parameters from it.
      *
-     * @param routingCtx a context to find the {@link Service}.
+     * @param routingCtx a context to find the {@link HttpService}.
      *
      * @return a non-empty {@link RoutingResultBuilder} if the specified {@code path} matches this mapping.
      *         {@code null} otherwise.

File: core/src/main/java/com/linecorp/armeria/server/RejectedRouteHandler.java
Patch:
@@ -19,7 +19,7 @@
 import org.slf4j.LoggerFactory;
 
 /**
- * A handler that is invoked when a {@link ServerBuilder} rejects to bind a {@link Service} at
+ * A handler that is invoked when a {@link ServerBuilder} rejects to bind an {@link HttpService} at
  * a certain {@link Route}. For example, the following code will trigger this handler:
  *
  * <pre>{@code
@@ -78,7 +78,7 @@ public interface RejectedRouteHandler {
     };
 
     /**
-     * Invoked when a user attempts to bind a {@link Service} at the {@link Route} that conflicts with
+     * Invoked when a user attempts to bind an {@link HttpService} at the {@link Route} that conflicts with
      * an existing {@link Route}.
      * @param virtualHost   the {@link VirtualHost} where the {@link Route} belongs to
      * @param route         the {@link Route} being added

File: core/src/main/java/com/linecorp/armeria/server/Route.java
Patch:
@@ -26,7 +26,7 @@
 import io.micrometer.core.instrument.Tag;
 
 /**
- * {@link Route} maps from an incoming HTTP request to a {@link Service} based on its path, method,
+ * {@link Route} maps from an incoming HTTP request to an {@link HttpService} based on its path, method,
  * content type and accepted types.
  */
 public interface Route {
@@ -41,7 +41,7 @@ static RouteBuilder builder() {
     /**
      * Matches the specified {@link RoutingContext} and extracts the path parameters from it if exists.
      *
-     * @param routingCtx a context to find the {@link Service}
+     * @param routingCtx a context to find the {@link HttpService}
      *
      * @return a non-empty {@link RoutingResult} if the {@linkplain RoutingContext#path() path},
      *         {@linkplain RoutingContext#method() method},

File: core/src/main/java/com/linecorp/armeria/server/RoutingContext.java
Patch:
@@ -93,7 +93,7 @@ public interface RoutingContext {
 
     /**
      * Returns a wrapped {@link RoutingContext} which holds the specified {@code path}.
-     * It is usually used to find a {@link Service} with a prefix-stripped path.
+     * It is usually used to find an {@link HttpService} with a prefix-stripped path.
      */
     default RoutingContext overridePath(String path) {
         requireNonNull(path, "path");

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java
Patch:
@@ -206,9 +206,9 @@ default String pathParam(String name) {
     }
 
     /**
-     * Returns the {@link Service} that is handling the current {@link Request}.
+     * Returns the {@link HttpService} that is handling the current {@link Request}.
      */
-    <T extends Service<HttpRequest, HttpResponse>> T service();
+    HttpService service();
 
     /**
      * Returns the {@link ExecutorService} that could be used for executing a potentially long-running task.

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContextBuilder.java
Patch:
@@ -71,7 +71,7 @@ public static ServiceRequestContextBuilder of(HttpRequest request) {
 
     private final List<Consumer<? super ServerBuilder>> serverConfigurators = new ArrayList<>(4);
 
-    private Service<HttpRequest, HttpResponse> service = fakeService;
+    private HttpService service = fakeService;
     @Nullable
     private RoutingResult routingResult;
     @Nullable
@@ -87,7 +87,7 @@ public static ServiceRequestContextBuilder of(HttpRequest request) {
      * Sets the {@link Service} that handles the request. If not set, a dummy {@link Service}, which always
      * returns a {@code "405 Method Not Allowed"} response, is used.
      */
-    public ServiceRequestContextBuilder service(Service<HttpRequest, HttpResponse> service) {
+    public ServiceRequestContextBuilder service(HttpService service) {
         this.service = requireNonNull(service, "service");
         return this;
     }
@@ -183,7 +183,7 @@ serviceCfg, fakeChannel(), meterRegistry(), sessionProtocol(), id(), routingCtx,
         }
     }
 
-    private static ServiceConfig findServiceConfig(Server server, String path, Service<?, ?> service) {
+    private static ServiceConfig findServiceConfig(Server server, String path, HttpService service) {
         for (ServiceConfig cfg : server.config().defaultVirtualHost().serviceConfigs()) {
             final Route route = cfg.route();
             if (route.pathType() != RoutePathType.EXACT) {

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContextWrapper.java
Patch:
@@ -30,7 +30,6 @@
 
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpRequest;
-import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.RequestContextWrapper;
 import com.linecorp.armeria.common.RequestId;
@@ -108,7 +107,7 @@ public Map<String, String> pathParams() {
     }
 
     @Override
-    public <T extends Service<HttpRequest, HttpResponse>> T service() {
+    public HttpService service() {
         return delegate().service();
     }
 

File: core/src/main/java/com/linecorp/armeria/server/ServiceWithRoutes.java
Patch:
@@ -29,7 +29,7 @@
  */
 public interface ServiceWithRoutes<I extends Request, O extends Response> extends Service<I, O> {
     /**
-     * Returns the set of {@link Route}s to which this {@link Service} is bound.
+     * Returns the set of {@link Route}s to which this {@link HttpService} is bound.
      */
     Set<Route> routes();
 }

File: core/src/main/java/com/linecorp/armeria/server/SimpleDecoratingRpcService.java
Patch:
@@ -22,14 +22,14 @@
 /**
  * An {@link RpcService} that decorates another {@link RpcService}.
  *
- * @see Service#decorate(DecoratingServiceFunction)
+ * @see RpcService#decorate(DecoratingRpcServiceFunction)
  */
 public abstract class SimpleDecoratingRpcService extends SimpleDecoratingService<RpcRequest, RpcResponse>
         implements RpcService {
     /**
      * Creates a new instance that decorates the specified {@link Service}.
      */
-    protected SimpleDecoratingRpcService(Service<RpcRequest, RpcResponse> delegate) {
+    protected SimpleDecoratingRpcService(RpcService delegate) {
         super(delegate);
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/SimpleDecoratingService.java
Patch:
@@ -27,7 +27,8 @@
  * @param <I> the {@link Request} type of the {@link Service} being decorated
  * @param <O> the {@link Response} type of the {@link Service} being decorated
  *
- * @see Service#decorate(DecoratingServiceFunction)
+ * @see HttpService#decorate(DecoratingHttpServiceFunction)
+ * @see RpcService#decorate(DecoratingRpcServiceFunction)
  */
 public abstract class SimpleDecoratingService<I extends Request, O extends Response>
         extends DecoratingService<I, O, I, O> {

File: core/src/main/java/com/linecorp/armeria/server/annotation/decorator/RateLimitingDecorator.java
Patch:
@@ -24,11 +24,11 @@
 import com.linecorp.armeria.internal.DefaultValues;
 import com.linecorp.armeria.server.annotation.Decorator;
 import com.linecorp.armeria.server.annotation.DecoratorFactory;
-import com.linecorp.armeria.server.throttling.ThrottlingHttpService;
+import com.linecorp.armeria.server.throttling.ThrottlingService;
 import com.linecorp.armeria.server.throttling.ThrottlingStrategy;
 
 /**
- * A {@link ThrottlingHttpService} decorator for annotated HTTP services.
+ * A {@link ThrottlingService} decorator for annotated HTTP services.
  */
 @DecoratorFactory(RateLimitingDecoratorFactoryFunction.class)
 @Repeatable(RateLimitingDecorators.class)

File: core/src/main/java/com/linecorp/armeria/server/auth/Authorizer.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Determines whether a given {@code data} is authorized for the service registered in.
  * {@code ctx} can be used for storing authorization information about the request for use in
- * business logic. {@code data} is usually a {@link HttpRequest}
+ * business logic. {@code data} is usually an {@link HttpRequest}
  * or token extracted from it.
  */
 @FunctionalInterface

File: core/src/main/java/com/linecorp/armeria/server/cors/CorsService.java
Patch:
@@ -33,12 +33,12 @@
 import com.linecorp.armeria.common.HttpStatusClass;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.ResponseHeadersBuilder;
-import com.linecorp.armeria.server.Service;
+import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.SimpleDecoratingHttpService;
 
 /**
- * Decorates an HTTP {@link Service} to add the
+ * Decorates an {@link HttpService} to add the
  * <a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing">Cross-Origin Resource Sharing
  * (CORS)</a> support.
  *
@@ -56,7 +56,7 @@ public final class CorsService extends SimpleDecoratingHttpService {
     /**
      * Creates a new {@link CorsService} that decorates the specified {@code delegate} to add CORS support.
      */
-    public CorsService(Service<HttpRequest, HttpResponse> delegate, CorsConfig config) {
+    public CorsService(HttpService delegate, CorsConfig config) {
         super(delegate);
         this.config = requireNonNull(config, "config");
     }

File: core/src/main/java/com/linecorp/armeria/server/docs/DocService.java
Patch:
@@ -78,7 +78,8 @@
  * @see DocServiceBuilder#include(DocServiceFilter)
  * @see DocServiceBuilder#exclude(DocServiceFilter)
  */
-public class DocService extends AbstractCompositeService<HttpRequest, HttpResponse> {
+public class DocService extends AbstractCompositeService<HttpService, HttpRequest, HttpResponse>
+        implements HttpService {
 
     private static final int SPECIFICATION_INDEX = 0;
     private static final int VERSIONS_INDEX = 1;

File: core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckService.java
Patch:
@@ -46,7 +46,7 @@
 import com.linecorp.armeria.server.ServerListenerAdapter;
 import com.linecorp.armeria.server.ServiceConfig;
 import com.linecorp.armeria.server.ServiceRequestContext;
-import com.linecorp.armeria.server.TransientService;
+import com.linecorp.armeria.server.TransientHttpService;
 
 import io.netty.util.AsciiString;
 import io.netty.util.concurrent.FutureListener;
@@ -95,7 +95,7 @@
  *
  * @see HealthCheckServiceBuilder
  */
-public final class HealthCheckService implements HttpService, TransientService<HttpRequest, HttpResponse> {
+public final class HealthCheckService implements TransientHttpService {
 
     private static final Logger logger = LoggerFactory.getLogger(HealthCheckService.class);
     private static final AsciiString ARMERIA_LPHC = HttpHeaderNames.of("armeria-lphc");

File: core/src/main/java/com/linecorp/armeria/server/healthcheck/HttpHealthCheckService.java
Patch:
@@ -37,7 +37,7 @@
 import com.linecorp.armeria.server.ServerListenerAdapter;
 import com.linecorp.armeria.server.ServiceConfig;
 import com.linecorp.armeria.server.ServiceRequestContext;
-import com.linecorp.armeria.server.TransientService;
+import com.linecorp.armeria.server.TransientHttpService;
 
 /**
  * An {@link HttpService} that responds with HTTP status {@code "200 OK"} if the server is healthy and can
@@ -72,8 +72,7 @@
  * @deprecated Use {@link HealthCheckService}.
  */
 @Deprecated
-public class HttpHealthCheckService extends AbstractHttpService
-        implements TransientService<HttpRequest, HttpResponse> {
+public class HttpHealthCheckService extends AbstractHttpService implements TransientHttpService {
 
     private static final HttpData RES_OK = HttpData.ofUtf8("ok");
     private static final HttpData RES_NOT_OK = HttpData.ofUtf8("not ok");

File: core/src/main/java/com/linecorp/armeria/server/healthcheck/ManagedHttpHealthCheckService.java
Patch:
@@ -31,7 +31,7 @@
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 /**
- * A {@link HttpHealthCheckService} which allows overriding its status via a PUT request.
+ * An {@link HttpHealthCheckService} which allows overriding its status via a PUT request.
  *
  * <h2>Example</h2>
  * <pre>{@code

File: core/src/main/java/com/linecorp/armeria/server/logging/structured/StructuredLog.java
Patch:
@@ -49,7 +49,6 @@ protected StructuredLog(long timestampMillis, long responseTimeNanos, long reque
 
     /**
      * Constructs {@link StructuredLog} from {@link RequestContext} and {@link RequestLog}.
-     * Can be used as {@link StructuredLogBuilder}.
      */
     protected StructuredLog(RequestLog reqLog) {
         timestampMillis = reqLog.requestStartTimeMillis();

File: core/src/main/java/com/linecorp/armeria/server/throttling/RateLimitingThrottlingStrategy.java
Patch:
@@ -31,8 +31,8 @@
 
 /**
  * A {@link ThrottlingStrategy} that provides a throttling strategy based on QPS.
- * The throttling works by examining the number of requests from the {@link ThrottlingService} from
- * the beginning, and throttling if the QPS is found exceed the specified tolerable maximum.
+ * The throttling works by examining the number of requests from the beginning, and
+ * throttling if the QPS is found exceed the specified tolerable maximum.
  */
 public final class RateLimitingThrottlingStrategy<T extends Request> extends ThrottlingStrategy<T> {
     private final RateLimiter rateLimiter;

File: core/src/main/java/com/linecorp/armeria/unsafe/ByteBufHttpData.java
Patch:
@@ -33,7 +33,7 @@
 import io.netty.buffer.Unpooled;
 
 /**
- * A {@link HttpData} that is backed by a {@link ByteBuf} for optimizing certain internal use cases. Not for
+ * An {@link HttpData} that is backed by a {@link ByteBuf} for optimizing certain internal use cases. Not for
  * general use.
  */
 public class ByteBufHttpData extends AbstractHttpData implements ByteBufHolder {

File: core/src/test/java/com/linecorp/armeria/server/DefaultServiceRequestContextTest.java
Patch:
@@ -24,7 +24,6 @@
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
-import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.RequestId;
 
 import io.netty.util.AttributeKey;
@@ -61,7 +60,7 @@ void deriveContext() {
 
         assertThat(derivedCtx.server()).isSameAs(originalCtx.server());
         assertThat(derivedCtx.sessionProtocol()).isSameAs(originalCtx.sessionProtocol());
-        assertThat(derivedCtx.<Service<HttpRequest, HttpResponse>>service()).isSameAs(originalCtx.service());
+        assertThat(derivedCtx.service()).isSameAs(originalCtx.service());
         assertThat(derivedCtx.route()).isSameAs(originalCtx.route());
         assertThat(derivedCtx.id()).isSameAs(newId);
         assertThat(derivedCtx.request()).isSameAs(newRequest);

File: core/src/test/java/com/linecorp/armeria/server/HttpServerStreamingTest.java
Patch:
@@ -114,8 +114,7 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) {
                 }
             });
 
-            final Function<Service<HttpRequest, HttpResponse>, Service<HttpRequest, HttpResponse>>
-                    decorator =
+            final Function<? super HttpService, ? extends HttpService> decorator =
                     s -> new SimpleDecoratingHttpService(s) {
                         @Override
                         public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {

File: core/src/test/java/com/linecorp/armeria/server/HttpServerTest.java
Patch:
@@ -401,7 +401,7 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)
 
             sb.serviceUnder("/not-cached-paths", (ctx, req) -> HttpResponse.of(HttpStatus.OK));
 
-            sb.serviceUnder("/cached-paths", new Service<HttpRequest, HttpResponse>() {
+            sb.serviceUnder("/cached-paths", new HttpService() {
                 @Override
                 public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
                     return HttpResponse.of(HttpStatus.OK);
@@ -415,7 +415,7 @@ public boolean shouldCachePath(String path, @Nullable String query, Route route)
 
             sb.service("/cached-exact-path", (ctx, req) -> HttpResponse.of(HttpStatus.OK));
 
-            final Function<Service<HttpRequest, HttpResponse>, Service<HttpRequest, HttpResponse>> decorator =
+            final Function<? super HttpService, ? extends HttpService> decorator =
                     s -> new SimpleDecoratingHttpService(s) {
                         @Override
                         public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {

File: core/src/test/java/com/linecorp/armeria/server/RouteDecoratingTest.java
Patch:
@@ -42,7 +42,6 @@
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpMethod;
-import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.RequestHeaders;
@@ -61,7 +60,7 @@ void init() {
         queue = new ArrayDeque<>();
     }
 
-    static DecoratingServiceFunction<HttpRequest, HttpResponse> newDecorator(int id) {
+    static DecoratingHttpServiceFunction newDecorator(int id) {
         return (delegate, ctx, req) -> {
             queue.add(id);
             return delegate.serve(ctx, req);

File: core/src/test/java/com/linecorp/armeria/server/ServerBuilderTest.java
Patch:
@@ -212,8 +212,8 @@ void buildIllegalExceptionTest() {
     }
 
     /**
-     * Makes sure that {@link ServerBuilder#decorator(DecoratingServiceFunction)} works at every service and
-     * virtual hosts and {@link VirtualHostBuilder#decorator(DecoratingServiceFunction)} works only at
+     * Makes sure that {@link ServerBuilder#decorator(DecoratingHttpServiceFunction)} works at every service and
+     * virtual hosts and {@link VirtualHostBuilder#decorator(DecoratingHttpServiceFunction)} works only at
      * its own services.
      */
     @Test

File: core/src/test/java/com/linecorp/armeria/server/composition/CompositeServiceTest.java
Patch:
@@ -37,6 +37,7 @@
 import com.linecorp.armeria.common.metric.PrometheusMeterRegistries;
 import com.linecorp.armeria.internal.metric.MicrometerUtil;
 import com.linecorp.armeria.server.AbstractHttpService;
+import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.Route;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerBuilder;
@@ -142,7 +143,7 @@ void failWhenThePathIsNotPrefix() {
     }
 
     private static final class TestCompositeService
-            extends AbstractCompositeService<HttpRequest, HttpResponse> {
+            extends AbstractCompositeService<HttpService, HttpRequest, HttpResponse> implements HttpService {
 
         TestCompositeService() {
             super(CompositeServiceEntry.ofPrefix("/foo/", serviceA),

File: core/src/test/java/com/linecorp/armeria/server/cors/HttpServerCorsTest.java
Patch:
@@ -40,7 +40,6 @@
 import com.linecorp.armeria.server.AbstractHttpService;
 import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.ServerBuilder;
-import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.annotation.AdditionalHeader;
 import com.linecorp.armeria.server.annotation.ConsumesJson;
@@ -344,7 +343,7 @@ public void testCorsBuilderException() {
 
         // Ensure double decoration is prohibited.
         assertThatThrownBy(() -> {
-            final Function<Service<HttpRequest, HttpResponse>, CorsService> decorator =
+            final Function<? super HttpService, CorsService> decorator =
                     CorsServiceBuilder.forAnyOrigin().newDecorator();
             final HttpService service = (ctx, req) -> HttpResponse.of("OK");
             service.decorate(decorator).decorate(decorator);

File: core/src/test/java/com/linecorp/armeria/server/throttling/ThrottlingServiceTest.java
Patch:
@@ -46,8 +46,8 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)
     public ServerRule serverRule = new ServerRule() {
         @Override
         protected void configure(ServerBuilder sb) throws Exception {
-            sb.service("/http-never", SERVICE.decorate(ThrottlingHttpService.newDecorator(never())));
-            sb.service("/http-always", SERVICE.decorate(ThrottlingHttpService.newDecorator(always())));
+            sb.service("/http-never", SERVICE.decorate(ThrottlingService.newDecorator(never())));
+            sb.service("/http-always", SERVICE.decorate(ThrottlingService.newDecorator(always())));
         }
     };
 

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcService.java
Patch:
@@ -57,10 +57,10 @@
 import com.linecorp.armeria.internal.grpc.MetadataUtil;
 import com.linecorp.armeria.internal.grpc.TimeoutHeaderUtil;
 import com.linecorp.armeria.server.AbstractHttpService;
+import com.linecorp.armeria.server.HttpServiceWithRoutes;
 import com.linecorp.armeria.server.Route;
 import com.linecorp.armeria.server.ServiceConfig;
 import com.linecorp.armeria.server.ServiceRequestContext;
-import com.linecorp.armeria.server.ServiceWithRoutes;
 
 import io.grpc.Codec.Identity;
 import io.grpc.CompressorRegistry;
@@ -87,8 +87,7 @@
  *     </li>
  * </ul>
  */
-public final class GrpcService extends AbstractHttpService
-        implements ServiceWithRoutes<HttpRequest, HttpResponse> {
+public final class GrpcService extends AbstractHttpService implements HttpServiceWithRoutes {
 
     private static final Logger logger = LoggerFactory.getLogger(GrpcService.class);
 

File: grpc/src/test/java/com/linecorp/armeria/internal/grpc/TestServiceImpl.java
Patch:
@@ -50,6 +50,7 @@
 import com.linecorp.armeria.grpc.testing.TestServiceGrpc;
 import com.linecorp.armeria.protobuf.EmptyProtos;
 import com.linecorp.armeria.protobuf.EmptyProtos.Empty;
+import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.SimpleDecoratingHttpService;
@@ -526,7 +527,7 @@ public static class EchoRequestHeadersInTrailers extends SimpleDecoratingHttpSer
         /**
          * Creates a new instance that decorates the specified {@link Service}.
          */
-        public EchoRequestHeadersInTrailers(Service<HttpRequest, HttpResponse> delegate) {
+        public EchoRequestHeadersInTrailers(HttpService delegate) {
             super(delegate);
         }
 

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlDecorator.java
Patch:
@@ -48,8 +48,8 @@
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.util.Exceptions;
+import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.Server;
-import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceConfig;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.SimpleDecoratingHttpService;
@@ -75,7 +75,7 @@ final class SamlDecorator extends SimpleDecoratingHttpService {
     @Nullable
     private Server server;
 
-    SamlDecorator(SamlServiceProvider sp, Service<HttpRequest, HttpResponse> delegate) {
+    SamlDecorator(SamlServiceProvider sp, HttpService delegate) {
         super(delegate);
         this.sp = sp;
         portConfigHolder = sp.portConfigAutoFiller();

File: thrift/src/main/java/com/linecorp/armeria/server/thrift/ThriftCallService.java
Patch:
@@ -41,11 +41,10 @@
 import com.linecorp.armeria.common.RpcResponse;
 import com.linecorp.armeria.internal.thrift.ThriftFunction;
 import com.linecorp.armeria.server.RpcService;
-import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 /**
- * A {@link Service} that handles a Thrift {@link RpcRequest}.
+ * An {@link RpcService} that handles a Thrift {@link RpcRequest}.
  *
  * @see THttpService
  */

File: thrift/src/main/java/com/linecorp/armeria/server/thrift/ThriftStructuredLog.java
Patch:
@@ -28,7 +28,6 @@
 import com.linecorp.armeria.common.thrift.ThriftReply;
 import com.linecorp.armeria.common.util.TextFormatter;
 import com.linecorp.armeria.server.logging.structured.StructuredLog;
-import com.linecorp.armeria.server.logging.structured.StructuredLogBuilder;
 
 /**
  * A representation and constructor of a service log which holds Apache Thrift based RPC invocation oriented
@@ -63,7 +62,6 @@ public class ThriftStructuredLog extends StructuredLog {
 
     /**
      * Constructs {@link ThriftStructuredLog} from {@link RequestContext} and {@link RequestLog}.
-     * Can be used as {@link StructuredLogBuilder}.
      */
     public ThriftStructuredLog(RequestLog reqLog) {
         super(reqLog);

File: thrift/src/test/java/com/linecorp/armeria/it/thrift/ThriftDynamicTimeoutTest.java
Patch:
@@ -39,8 +39,8 @@
 import com.linecorp.armeria.client.SimpleDecoratingRpcClient;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;
+import com.linecorp.armeria.server.RpcService;
 import com.linecorp.armeria.server.ServerBuilder;
-import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.SimpleDecoratingRpcService;
 import com.linecorp.armeria.server.thrift.THttpService;
@@ -129,7 +129,7 @@ public Stream<? extends Arguments> provideArguments(ExtensionContext context) th
 
     private static final class DynamicTimeoutService extends SimpleDecoratingRpcService {
 
-        DynamicTimeoutService(Service<RpcRequest, RpcResponse> delegate) {
+        DynamicTimeoutService(RpcService delegate) {
             super(delegate);
         }
 
@@ -143,7 +143,7 @@ public RpcResponse serve(ServiceRequestContext ctx, RpcRequest req) throws Excep
 
     private static final class TimeoutDisablingService extends SimpleDecoratingRpcService {
 
-        TimeoutDisablingService(Service<RpcRequest, RpcResponse> delegate) {
+        TimeoutDisablingService(RpcService delegate) {
             super(delegate);
         }
 

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/AbstractThriftOverHttpTest.java
Patch:
@@ -48,10 +48,10 @@
 import com.linecorp.armeria.common.thrift.ThriftCall;
 import com.linecorp.armeria.common.thrift.ThriftProtocolFactories;
 import com.linecorp.armeria.common.thrift.ThriftReply;
+import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.ServerPort;
-import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.SimpleDecoratingHttpService;
 import com.linecorp.armeria.server.logging.LoggingService;
@@ -136,8 +136,7 @@ protected String getResponse(String name) {
 
             sb.decorator(LoggingService.newDecorator());
 
-            final Function<Service<HttpRequest, HttpResponse>,
-                    Service<HttpRequest, HttpResponse>> logCollectingDecorator =
+            final Function<? super HttpService, ? extends HttpService> logCollectingDecorator =
                     s -> new SimpleDecoratingHttpService(s) {
                         @Override
                         public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {

File: core/src/main/java/com/linecorp/armeria/client/HttpClientBuilder.java
Patch:
@@ -38,7 +38,7 @@ public final class HttpClientBuilder extends AbstractClientOptionsBuilder<HttpCl
     /**
      * An undefined {@link URI} to create {@link HttpClient} without specifying {@link URI}.
      */
-    private static final URI UNDEFINED_URI = URI.create("none+http://undefined");
+    private static final URI UNDEFINED_URI = URI.create("http://undefined");
 
     /**
      * Returns {@code true} if the specified {@code uri} is an undefined {@link URI}.

File: core/src/test/java/com/linecorp/armeria/client/RefreshingAddressResolverTest.java
Patch:
@@ -214,7 +214,7 @@ void removedWhenExceedingBackoffMaxAttempts() throws Exception {
                 final Future<InetSocketAddress> future = resolver.resolve(
                         InetSocketAddress.createUnresolved("foo.com", 36462));
                 await().until(future::isDone);
-                assertThat(future.cause()).isExactlyInstanceOf(UnknownHostException.class);
+                assertThat(future.cause()).isInstanceOf(UnknownHostException.class);
             }
         }
     }
@@ -256,15 +256,15 @@ void negativeTtl() {
                 final Future<InetSocketAddress> future = resolver.resolve(
                         InetSocketAddress.createUnresolved("foo.com", 36462));
                 await().until(future::isDone);
-                assertThat(future.cause()).isExactlyInstanceOf(UnknownHostException.class);
+                assertThat(future.cause()).isInstanceOf(UnknownHostException.class);
 
                 final ConcurrentMap<String, CompletableFuture<CacheEntry>> cache = group.cache();
                 assertThat(cache.size()).isZero();
 
                 final Future<InetSocketAddress> future2 = resolver.resolve(
                         InetSocketAddress.createUnresolved("foo.com", 36462));
                 await().until(future2::isDone);
-                assertThat(future.cause()).isExactlyInstanceOf(UnknownHostException.class);
+                assertThat(future.cause()).isInstanceOf(UnknownHostException.class);
                 assertThat(cache.size()).isOne();
             }
         }

File: core/src/main/java/com/linecorp/armeria/server/DefaultServiceConfigSetters.java
Patch:
@@ -16,8 +16,8 @@
 
 package com.linecorp.armeria.server;
 
-import static com.linecorp.armeria.server.ServerConfig.validateMaxRequestLength;
-import static com.linecorp.armeria.server.ServerConfig.validateRequestTimeoutMillis;
+import static com.linecorp.armeria.server.ServiceConfig.validateMaxRequestLength;
+import static com.linecorp.armeria.server.ServiceConfig.validateRequestTimeoutMillis;
 import static java.util.Objects.requireNonNull;
 
 import java.nio.charset.Charset;

File: core/src/main/java/com/linecorp/armeria/server/Http1RequestDecoder.java
Patch:
@@ -174,7 +174,8 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                             ArmeriaHttpUtil.toArmeria(ctx, nettyReq, cfg),
                             HttpUtil.isKeepAlive(nettyReq),
                             inboundTrafficController,
-                            cfg.maxRequestLength());
+                            // FIXME(trustin): Use a different maxRequestLength for a different virtual host.
+                            cfg.defaultVirtualHost().maxRequestLength());
 
                     // Close the request early when it is sure that there will be
                     // neither content nor trailers.

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContextBuilder.java
Patch:
@@ -122,7 +122,7 @@ public ServiceRequestContextBuilder clientAddress(InetAddress clientAddress) {
      * Adds the {@link Consumer} that configures the given {@link ServerBuilder}. The {@link Consumer}s added
      * by this method will be invoked when this builder builds a dummy {@link Server}. This may be useful
      * when you need to update the default settings of the dummy {@link Server},
-     * such as {@link ServerConfig#maxRequestLength()}.
+     * such as {@link ServerBuilder#maxRequestLength(long)}.
      */
     public ServiceRequestContextBuilder serverConfigurator(Consumer<? super ServerBuilder> serverConfigurator) {
         serverConfigurators.add(requireNonNull(serverConfigurator, "serverConfigurator"));

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostAnnotatedServiceBindingBuilder.java
Patch:
@@ -211,7 +211,7 @@ public VirtualHostBuilder build(Object service) {
                     element.buildSafeDecoratedService(defaultServiceConfigSetters.getDecorator());
             final ServiceConfigBuilder serviceConfigBuilder =
                     defaultServiceConfigSetters.toServiceConfigBuilder(element.route(), decoratedService);
-            virtualHostBuilder.serviceConfigBuilder(serviceConfigBuilder);
+            virtualHostBuilder.addServiceConfigBuilder(serviceConfigBuilder);
         });
         return virtualHostBuilder;
     }

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostDecoratingServiceBindingBuilder.java
Patch:
@@ -167,7 +167,7 @@ VirtualHostBuilder build(Function<T, R> decorator) {
                 (Function<Service<HttpRequest, HttpResponse>, Service<HttpRequest, HttpResponse>>) decorator;
 
         buildRouteList().forEach(
-                route -> virtualHostBuilder.routeDecoratingService(
+                route -> virtualHostBuilder.addRouteDecoratingService(
                         new RouteDecoratingService(route, castDecorator)));
         return virtualHostBuilder;
     }

File: core/src/test/java/com/linecorp/armeria/server/VirtualHostAnnotatedServiceBindingBuilderTest.java
Patch:
@@ -38,6 +38,7 @@
 
 class VirtualHostAnnotatedServiceBindingBuilderTest {
 
+    private static final VirtualHostBuilder template = Server.builder().virtualHostTemplate;
     private static final ExceptionHandlerFunction handlerFunction = (ctx, req, cause) -> HttpResponse.of(501);
     private static final String TEST_HOST = "foo.com";
 
@@ -72,7 +73,7 @@ void testAllConfigsAreSet() {
                 .contentPreviewerFactory(factory)
                 .verboseResponses(verboseResponse)
                 .build(new TestService())
-                .build();
+                .build(template);
 
         assertThat(virtualHost.serviceConfigs()).hasSize(1);
         final ServiceConfig serviceConfig = virtualHost.serviceConfigs().get(0);

File: spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaAutoConfiguration.java
Patch:
@@ -73,14 +73,15 @@ public Server armeriaServer(
             Optional<List<ArmeriaServerConfigurator>> armeriaServerConfigurators,
             Optional<List<Consumer<ServerBuilder>>> armeriaServerBuilderConsumers,
             Optional<List<ThriftServiceRegistrationBean>> thriftServiceRegistrationBeans,
-            Optional<List<GrpcServiceRegistrationBean>> grpcServiceRegistrationBean,
+            Optional<List<GrpcServiceRegistrationBean>> grpcServiceRegistrationBeans,
             Optional<List<HttpServiceRegistrationBean>> httpServiceRegistrationBeans,
             Optional<List<AnnotatedServiceRegistrationBean>> annotatedServiceRegistrationBeans)
             throws InterruptedException {
 
         if (!armeriaServerConfigurators.isPresent() &&
             !armeriaServerBuilderConsumers.isPresent() &&
             !thriftServiceRegistrationBeans.isPresent() &&
+            !grpcServiceRegistrationBeans.isPresent() &&
             !httpServiceRegistrationBeans.isPresent() &&
             !annotatedServiceRegistrationBeans.isPresent()) {
             // No services to register, no need to start up armeria server.
@@ -109,7 +110,7 @@ public Server armeriaServer(
                                 docsPath);
         configureGrpcServices(server,
                               docServiceBuilder,
-                              grpcServiceRegistrationBean.orElseGet(Collections::emptyList),
+                              grpcServiceRegistrationBeans.orElseGet(Collections::emptyList),
                               meterIdPrefixFuncFactory,
                               docsPath);
         configureHttpServices(server,

File: brave/src/main/java/com/linecorp/armeria/common/brave/RequestContextCurrentTraceContext.java
Patch:
@@ -101,8 +101,7 @@ public static void setCurrentThreadNotRequestThread(boolean value) {
         }
     }
 
-    private static final RequestContextCurrentTraceContext DEFAULT =
-            new RequestContextCurrentTraceContextBuilder().build();
+    private static final RequestContextCurrentTraceContext DEFAULT = builder().build();
 
     private static final Logger logger = LoggerFactory.getLogger(RequestContextCurrentTraceContext.class);
 

File: brave/src/test/java/com/linecorp/armeria/client/brave/BraveClientTest.java
Patch:
@@ -35,7 +35,6 @@
 
 import com.linecorp.armeria.client.Client;
 import com.linecorp.armeria.client.ClientRequestContext;
-import com.linecorp.armeria.client.ClientRequestContextBuilder;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
@@ -213,7 +212,7 @@ private static RequestLog testRemoteInvocation(Tracing tracing, @Nullable String
         final RpcRequest rpcReq = RpcRequest.of(HelloService.Iface.class, "hello", "Armeria");
         final HttpResponse res = HttpResponse.of(HttpStatus.OK);
         final RpcResponse rpcRes = RpcResponse.of("Hello, Armeria!");
-        final ClientRequestContext ctx = ClientRequestContextBuilder.of(req).build();
+        final ClientRequestContext ctx = ClientRequestContext.builder(req).build();
         final HttpRequest actualReq = ctx.request();
         assertThat(actualReq).isNotNull();
 

File: brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceTest.java
Patch:
@@ -47,7 +47,6 @@
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
-import com.linecorp.armeria.server.ServiceRequestContextBuilder;
 
 import brave.Tracing;
 import brave.http.HttpTracing;
@@ -169,8 +168,7 @@ private static RequestLog testServiceInvocation(Reporter<Span> reporter,
         final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, "/hello/trustin",
                                                                  HttpHeaderNames.SCHEME, "http",
                                                                  HttpHeaderNames.AUTHORITY, "foo.com"));
-        final ServiceRequestContext ctx = ServiceRequestContextBuilder.of(req)
-                                                                      .build();
+        final ServiceRequestContext ctx = ServiceRequestContext.builder(req).build();
         final RpcRequest rpcReq = RpcRequest.of(HelloService.Iface.class, "hello", "trustin");
         final HttpResponse res = HttpResponse.of(HttpStatus.OK);
         final RpcResponse rpcRes = RpcResponse.of("Hello, trustin!");

File: core/src/main/java/com/linecorp/armeria/client/AbstractClientOptionsBuilder.java
Patch:
@@ -41,18 +41,18 @@
 class AbstractClientOptionsBuilder<B extends AbstractClientOptionsBuilder<B>> {
 
     private final Map<ClientOption<?>, ClientOptionValue<?>> options = new LinkedHashMap<>();
-    private final ClientDecorationBuilder decoration = new ClientDecorationBuilder();
+    private final ClientDecorationBuilder decoration = ClientDecoration.builder();
     private final HttpHeadersBuilder httpHeaders = HttpHeaders.builder();
 
     /**
      * Creates a new instance with the default options.
      */
-    protected AbstractClientOptionsBuilder() {}
+    AbstractClientOptionsBuilder() {}
 
     /**
      * Creates a new instance with the specified base options.
      */
-    protected AbstractClientOptionsBuilder(ClientOptions options) {
+    AbstractClientOptionsBuilder(ClientOptions options) {
         requireNonNull(options, "options");
         options(options);
     }

File: core/src/main/java/com/linecorp/armeria/client/ClientBuilder.java
Patch:
@@ -68,7 +68,7 @@ public final class ClientBuilder extends AbstractClientOptionsBuilder<ClientBuil
 
     private SerializationFormat format = SerializationFormat.NONE;
 
-    private ClientFactory factory = ClientFactory.DEFAULT;
+    private ClientFactory factory = ClientFactory.ofDefault();
 
     /**
      * Creates a new {@link ClientBuilder} that builds the client that connects to the specified {@code uri}.
@@ -117,7 +117,7 @@ private ClientBuilder(@Nullable URI uri, @Nullable Scheme scheme, @Nullable Sess
     }
 
     /**
-     * Sets the {@link ClientFactory} of the client. The default is {@link ClientFactory#DEFAULT}.
+     * Sets the {@link ClientFactory} of the client. The default is {@link ClientFactory#ofDefault()}.
      */
     public ClientBuilder factory(ClientFactory factory) {
         this.factory = requireNonNull(factory, "factory");

File: core/src/main/java/com/linecorp/armeria/client/ClientConnectionTimingsBuilder.java
Patch:
@@ -47,7 +47,10 @@ public final class ClientConnectionTimingsBuilder {
 
     /**
      * Creates a new instance.
+     *
+     * @deprecated Use {@link ClientConnectionTimings#builder()}.
      */
+    @Deprecated
     public ClientConnectionTimingsBuilder() {
         connectionAcquisitionStartTimeMicros = SystemInfo.currentTimeMicros();
         connectionAcquisitionStartNanos = System.nanoTime();

File: core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java
Patch:
@@ -118,7 +118,10 @@ public final class ClientFactoryBuilder {
 
     /**
      * Creates a new instance.
+     *
+     * @deprecated Use {@link ClientFactory#builder()}.
      */
+    @Deprecated
     public ClientFactoryBuilder() {
         connectTimeoutMillis(Flags.defaultConnectTimeoutMillis());
     }

File: core/src/main/java/com/linecorp/armeria/client/DefaultClientFactory.java
Patch:
@@ -159,7 +159,7 @@ public <T> Optional<T> unwrap(Object client, Class<T> type) {
     @Override
     public void close() {
         // The global default should never be closed.
-        if (this == ClientFactory.DEFAULT) {
+        if (this == ClientFactory.ofDefault()) {
             logger.debug("Refusing to close the default {}; must be closed via closeDefault()",
                          ClientFactory.class.getSimpleName());
             return;

File: core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java
Patch:
@@ -76,7 +76,7 @@ public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Ex
         final EventLoop eventLoop = ctx.eventLoop();
         final DecodedHttpResponse res = new DecodedHttpResponse(eventLoop);
 
-        final ClientConnectionTimingsBuilder timingsBuilder = new ClientConnectionTimingsBuilder();
+        final ClientConnectionTimingsBuilder timingsBuilder = ClientConnectionTimings.builder();
 
         if (endpointWithPort.hasIpAddr()) {
             // IP address has been resolved already.

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreaker.java
Patch:
@@ -44,14 +44,14 @@ static CircuitBreakerBuilder builder(String name) {
      * @param name the name of the circuit breaker
      */
     static CircuitBreaker of(String name) {
-        return new CircuitBreakerBuilder(name).build();
+        return builder(name).build();
     }
 
     /**
      * Creates a new {@link CircuitBreaker} that has a default name and the default configurations.
      */
     static CircuitBreaker ofDefaultName() {
-        return new CircuitBreakerBuilder().build();
+        return builder().build();
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/AbstractHealthCheckedEndpointGroupBuilder.java
Patch:
@@ -42,7 +42,7 @@ public abstract class AbstractHealthCheckedEndpointGroupBuilder {
 
     private SessionProtocol protocol = SessionProtocol.HTTP;
     private Backoff retryBackoff = DEFAULT_HEALTH_CHECK_RETRY_BACKOFF;
-    private ClientFactory clientFactory = ClientFactory.DEFAULT;
+    private ClientFactory clientFactory = ClientFactory.ofDefault();
     private Function<? super ClientOptionsBuilder, ClientOptionsBuilder> configurator = Function.identity();
     private int port;
 

File: core/src/main/java/com/linecorp/armeria/common/ClientCacheControlBuilder.java
Patch:
@@ -41,7 +41,10 @@ public final class ClientCacheControlBuilder extends CacheControlBuilder {
 
     /**
      * Creates a new builder with all directives disabled initially.
+     *
+     * @deprecated Use {@link ClientCacheControl#builder()}.
      */
+    @Deprecated
     public ClientCacheControlBuilder() {}
 
     ClientCacheControlBuilder(ClientCacheControl c) {

File: core/src/main/java/com/linecorp/armeria/common/ServerCacheControlBuilder.java
Patch:
@@ -46,7 +46,10 @@ public final class ServerCacheControlBuilder extends CacheControlBuilder {
 
     /**
      * Creates a new builder with all directives disabled initially.
+     *
+     * @deprecated Use {@link ServerCacheControl#builder()}.
      */
+    @Deprecated
     public ServerCacheControlBuilder() {}
 
     ServerCacheControlBuilder(ServerCacheControl c) {

File: core/src/main/java/com/linecorp/armeria/server/RouteBuilder.java
Patch:
@@ -44,7 +44,7 @@
 /**
  * Builds a new {@link Route}.
  */
-public class RouteBuilder {
+public final class RouteBuilder {
 
     @Nullable
     private PathMapping pathMapping;
@@ -55,6 +55,8 @@ public class RouteBuilder {
 
     private Set<MediaType> produces = ImmutableSet.of();
 
+    RouteBuilder() {}
+
     /**
      * Sets the {@link Route} to match the specified {@code pathPattern}. e.g.
      * <ul>

File: core/src/main/java/com/linecorp/armeria/server/docs/EndpointInfoBuilder.java
Patch:
@@ -53,7 +53,10 @@ public final class EndpointInfoBuilder {
     /**
      * Creates a new {@link EndpointInfoBuilder} that builds the {@link EndpointInfo} with the specified
      * {@code hostnamePattern} and {@code pathMapping}.
+     *
+     * @deprecated Use {@link EndpointInfo#builder(String, String)}.
      */
+    @Deprecated
     public EndpointInfoBuilder(String hostnamePattern, String pathMapping) {
         this.hostnamePattern = requireNonNull(hostnamePattern, "hostnamePattern");
         this.pathMapping = requireNonNull(pathMapping, "pathMapping");

File: core/src/test/java/com/linecorp/armeria/client/ClientOptionsTest.java
Patch:
@@ -31,7 +31,7 @@ public void testSetHttpHeader() {
         final ClientOptions options = ClientOptions.of(ClientOption.HTTP_HEADERS.newValue(httpHeader));
         assertThat(options.get(ClientOption.HTTP_HEADERS)).contains(httpHeader);
 
-        final ClientOptions options2 = ClientOptions.DEFAULT;
+        final ClientOptions options2 = ClientOptions.of();
         assertThat(options2.get(ClientOption.HTTP_HEADERS)).contains(HttpHeaders.of());
     }
 

File: core/src/test/java/com/linecorp/armeria/client/DefaultClientRequestContextTest.java
Patch:
@@ -41,7 +41,7 @@ void deriveContext() {
         final DefaultClientRequestContext originalCtx = new DefaultClientRequestContext(
                 mock(EventLoop.class), NoopMeterRegistry.get(), SessionProtocol.H2C,
                 UUID.randomUUID(), HttpMethod.POST, "/foo", null, null,
-                ClientOptions.DEFAULT,
+                ClientOptions.of(),
                 HttpRequest.of(RequestHeaders.of(
                         HttpMethod.POST, "/foo",
                         HttpHeaderNames.SCHEME, "http",

File: core/src/test/java/com/linecorp/armeria/client/HttpResponseWrapperTest.java
Patch:
@@ -145,7 +145,7 @@ void informationalHeadersHeadersDataAndTrailers() throws Exception {
 
     private static HttpResponseWrapper httpResponseWrapper(DecodedHttpResponse res) {
         final HttpRequest req = HttpRequest.of(HttpMethod.GET, "/");
-        final ClientRequestContext cctx = ClientRequestContextBuilder.of(req).build();
+        final ClientRequestContext cctx = ClientRequestContext.builder(req).build();
         final InboundTrafficController controller = InboundTrafficController.disabled();
         final TestHttpResponseDecoder decoder =
                 new TestHttpResponseDecoder(cctx.log().channel(), controller);

File: core/src/test/java/com/linecorp/armeria/internal/RequestContextAwareCompletableFutureTest.java
Patch:
@@ -26,19 +26,19 @@
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.RequestContext;
-import com.linecorp.armeria.server.ServiceRequestContextBuilder;
+import com.linecorp.armeria.server.ServiceRequestContext;
 
 class RequestContextAwareCompletableFutureTest {
 
     @Test
     void makeContextAwareCompletableFutureWithDifferentContext() {
         final RequestContext context1 =
-                ServiceRequestContextBuilder.of(HttpRequest.of(HttpMethod.GET, "/")).build();
+                ServiceRequestContext.builder(HttpRequest.of(HttpMethod.GET, "/")).build();
         final CompletableFuture<Void> originalFuture = CompletableFuture.completedFuture(null);
         final CompletableFuture<Void> future1 = context1.makeContextAware(originalFuture);
 
         final RequestContext context2 =
-                ServiceRequestContextBuilder.of(HttpRequest.of(HttpMethod.GET, "/")).build();
+                ServiceRequestContext.builder(HttpRequest.of(HttpMethod.GET, "/")).build();
         final CompletableFuture<Void> future2 = context2.makeContextAware(future1);
 
         assertThat(future2).isCompletedExceptionally();

File: core/src/test/java/com/linecorp/armeria/server/DecodedHttpRequestTest.java
Patch:
@@ -108,9 +108,9 @@ public void contentPreview() {
                                                          HttpHeaderNames.CONTENT_TYPE,
                                                          MediaType.PLAIN_TEXT_UTF_8);
         final ServiceRequestContext sctx =
-                ServiceRequestContextBuilder.of(HttpRequest.of(headers))
-                                            .serverConfigurator(sb -> sb.contentPreview(100))
-                                            .build();
+                ServiceRequestContext.builder(HttpRequest.of(headers))
+                                     .serverConfigurator(sb -> sb.contentPreview(100))
+                                     .build();
         final DecodedHttpRequest req = decodedHttpRequest(headers, sctx);
         req.completionFuture().handle((ret, cause) -> {
             sctx.logBuilder().endRequest();

File: core/src/test/java/com/linecorp/armeria/server/DefaultServiceRequestContextTest.java
Patch:
@@ -33,7 +33,7 @@ class DefaultServiceRequestContextTest {
     @Test
     void requestTimedOut() {
         final HttpRequest request = HttpRequest.of(HttpMethod.GET, "/hello");
-        final ServiceRequestContext ctx = ServiceRequestContextBuilder.of(request).build();
+        final ServiceRequestContext ctx = ServiceRequestContext.builder(request).build();
         assertThat(ctx.isTimedOut()).isFalse();
 
         assert ctx instanceof DefaultServiceRequestContext;
@@ -46,7 +46,7 @@ void requestTimedOut() {
     @Test
     void deriveContext() {
         final HttpRequest request = HttpRequest.of(HttpMethod.GET, "/hello");
-        final ServiceRequestContext originalCtx = ServiceRequestContextBuilder.of(request).build();
+        final ServiceRequestContext originalCtx = ServiceRequestContext.builder(request).build();
 
         setAdditionalHeaders(originalCtx);
         setAdditionalTrailers(originalCtx);

File: core/src/test/java/com/linecorp/armeria/server/PortUnificationServerTest.java
Patch:
@@ -27,7 +27,6 @@
 import org.junit.jupiter.params.provider.ArgumentsSource;
 
 import com.linecorp.armeria.client.ClientFactory;
-import com.linecorp.armeria.client.ClientFactoryBuilder;
 import com.linecorp.armeria.client.HttpClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpMethod;
@@ -44,7 +43,7 @@
 class PortUnificationServerTest {
 
     private static final ClientFactory clientFactory =
-            new ClientFactoryBuilder().sslContextCustomizer(
+            ClientFactory.builder().sslContextCustomizer(
                     b -> b.trustManager(InsecureTrustManagerFactory.INSTANCE)).build();
 
     @RegisterExtension

File: core/src/test/java/com/linecorp/armeria/server/cors/HttpServerCorsTest.java
Patch:
@@ -55,7 +55,7 @@
 
 public class HttpServerCorsTest {
 
-    private static final ClientFactory clientFactory = ClientFactory.DEFAULT;
+    private static final ClientFactory clientFactory = ClientFactory.ofDefault();
 
     @CorsDecorators(value = {
             @CorsDecorator(origins = "http://example.com", exposedHeaders = "expose_header_1")

File: core/src/test/java/com/linecorp/armeria/server/docs/ServiceInfoTest.java
Patch:
@@ -35,7 +35,7 @@ class ServiceInfoTest {
 
     private static MethodInfo createMethodInfo(String methodName, HttpMethod method,
                                                String endpointPathMapping) {
-        final EndpointInfo endpoint = new EndpointInfoBuilder("*", endpointPathMapping)
+        final EndpointInfo endpoint = EndpointInfo.builder("*", endpointPathMapping)
                 .availableMimeTypes(MediaType.JSON_UTF_8).build();
         return new MethodInfo(methodName, TypeSignature.ofBase("T"), ImmutableList.of(), ImmutableList.of(),
                               ImmutableList.of(endpoint), method, null);

File: examples/spring-boot-webflux/src/main/java/example/springframework/boot/webflux/HelloConfiguration.java
Patch:
@@ -5,7 +5,6 @@
 
 import com.linecorp.armeria.client.Client;
 import com.linecorp.armeria.client.ClientFactory;
-import com.linecorp.armeria.client.ClientFactoryBuilder;
 import com.linecorp.armeria.client.circuitbreaker.CircuitBreakerHttpClient;
 import com.linecorp.armeria.client.circuitbreaker.CircuitBreakerStrategy;
 import com.linecorp.armeria.server.Server;
@@ -55,7 +54,7 @@ public ArmeriaServerConfigurator armeriaServerConfigurator() {
      */
     @Bean
     public ClientFactory clientFactory() {
-        return new ClientFactoryBuilder().sslContextCustomizer(
+        return ClientFactory.builder().sslContextCustomizer(
                 b -> b.trustManager(InsecureTrustManagerFactory.INSTANCE)).build();
     }
 

File: grpc/src/test/java/com/linecorp/armeria/it/grpc/GrpcMetricsIntegrationTest.java
Patch:
@@ -36,7 +36,6 @@
 
 import com.linecorp.armeria.client.ClientBuilder;
 import com.linecorp.armeria.client.ClientFactory;
-import com.linecorp.armeria.client.ClientFactoryBuilder;
 import com.linecorp.armeria.client.HttpClient;
 import com.linecorp.armeria.client.metric.MetricCollectingClient;
 import com.linecorp.armeria.common.HttpHeaderNames;
@@ -103,7 +102,7 @@ protected void configure(ServerBuilder sb) throws Exception {
     };
 
     private static final ClientFactory clientFactory =
-            new ClientFactoryBuilder().meterRegistry(registry).build();
+            ClientFactory.builder().meterRegistry(registry).build();
 
     @AfterClass
     public static void closeClientFactory() {

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceServerTest.java
Patch:
@@ -56,7 +56,6 @@
 
 import com.linecorp.armeria.client.ClientBuilder;
 import com.linecorp.armeria.client.ClientFactory;
-import com.linecorp.armeria.client.ClientFactoryBuilder;
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.HttpClient;
 import com.linecorp.armeria.client.SimpleDecoratingHttpClient;
@@ -778,7 +777,7 @@ void clientSocketClosedBeforeHalfCloseHttp1() throws Exception {
     }
 
     private static void clientSocketClosedBeforeHalfClose(String protocol) throws Exception {
-        final ClientFactory factory = new ClientFactoryBuilder().build();
+        final ClientFactory factory = ClientFactory.builder().build();
         final UnitTestServiceStub stub =
                 new ClientBuilder("gproto+" + protocol + "://127.0.0.1:" + server.httpPort() + '/')
                         .factory(factory)
@@ -826,7 +825,7 @@ void clientSocketClosedAfterHalfCloseBeforeCloseCancelsHttp1() throws Exception
     private static void clientSocketClosedAfterHalfCloseBeforeCloseCancels(SessionProtocol protocol)
             throws Exception {
 
-        final ClientFactory factory = new ClientFactoryBuilder().build();
+        final ClientFactory factory = ClientFactory.builder().build();
         final UnitTestServiceStub stub =
                 new ClientBuilder(server.uri(protocol, GrpcSerializationFormats.PROTO, "/"))
                         .factory(factory)

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/UnframedGrpcServiceTest.java
Patch:
@@ -35,7 +35,6 @@
 import com.linecorp.armeria.grpc.testing.TestServiceGrpc.TestServiceImplBase;
 import com.linecorp.armeria.protobuf.EmptyProtos.Empty;
 import com.linecorp.armeria.server.ServiceRequestContext;
-import com.linecorp.armeria.server.ServiceRequestContextBuilder;
 import com.linecorp.armeria.testing.junit4.common.EventLoopRule;
 
 import io.grpc.BindableService;
@@ -67,7 +66,7 @@ public void setUp() {
         request = HttpRequest.of(HttpMethod.POST,
                                  "/armeria.grpc.testing.TestService/EmptyCall",
                                  MediaType.JSON_UTF_8, "{}");
-        ctx = ServiceRequestContextBuilder.of(request).eventLoop(eventLoop.get()).build();
+        ctx = ServiceRequestContext.builder(request).eventLoop(eventLoop.get()).build();
     }
 
     @Test

File: retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaCallFactory.java
Patch:
@@ -30,6 +30,7 @@
 import javax.annotation.Nullable;
 
 import com.linecorp.armeria.client.ClientFactory;
+import com.linecorp.armeria.client.ClientOptions;
 import com.linecorp.armeria.client.ClientOptionsBuilder;
 import com.linecorp.armeria.client.HttpClient;
 import com.linecorp.armeria.common.HttpHeaderNames;
@@ -97,7 +98,7 @@ private HttpClient getHttpClient(String authority, String sessionProtocol) {
                                           GROUP_PREFIX_MATCHER.matcher(key).replaceFirst("group:") : key;
             final String uriText = sessionProtocol + "://" + finalAuthority;
             return HttpClient.of(
-                    clientFactory, uriText, configurator.apply(uriText, new ClientOptionsBuilder()).build());
+                    clientFactory, uriText, configurator.apply(uriText, ClientOptions.builder()).build());
         });
     }
 

File: retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaRetrofitBuilder.java
Patch:
@@ -89,7 +89,7 @@ public final class ArmeriaRetrofitBuilder {
      * Creates a {@link ArmeriaRetrofitBuilder} with the default {@link ClientFactory}.
      */
     public ArmeriaRetrofitBuilder() {
-        this(ClientFactory.DEFAULT);
+        this(ClientFactory.ofDefault());
     }
 
     /**
@@ -235,7 +235,7 @@ public Retrofit build() {
         final URI uri = URI.create(baseUrl);
         final String fullUri = SessionProtocol.of(uri.getScheme()) + "://" + uri.getAuthority();
         final HttpClient baseHttpClient = HttpClient.of(
-                clientFactory, fullUri, configurator.apply(fullUri, new ClientOptionsBuilder()).build());
+                clientFactory, fullUri, configurator.apply(fullUri, ClientOptions.builder()).build());
         return retrofitBuilder.baseUrl(convertToOkHttpUrl(baseHttpClient, uri.getPath(), GROUP_PREFIX))
                               .callFactory(new ArmeriaCallFactory(
                                       baseHttpClient, clientFactory, configurator,

File: saml/src/test/java/com/linecorp/armeria/server/saml/SamlServiceProviderTest.java
Patch:
@@ -298,7 +298,7 @@ public boolean validateId(String id) {
         }
     }
 
-    final HttpClient client = HttpClient.of(rule.uri("/"), ClientOptions.DEFAULT);
+    final HttpClient client = HttpClient.of(rule.uri("/"), ClientOptions.of());
 
     @Test
     public void shouldRespondAuthnRequest_HttpRedirect() throws Exception {

File: spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaClientHttpConnector.java
Patch:
@@ -105,7 +105,7 @@ private ArmeriaClientHttpRequest createRequest(HttpMethod method, URI uri) {
         checkArgument(!Strings.isNullOrEmpty(path), "path is undefined: " + uri);
 
         final URI baseUri = URI.create(Strings.isNullOrEmpty(scheme) ? authority : scheme + "://" + authority);
-        final HttpClientBuilder builder = new HttpClientBuilder(baseUri);
+        final HttpClientBuilder builder = HttpClient.builder(baseUri);
         configurators.forEach(c -> c.configure(builder));
 
         final String pathAndQuery = Strings.isNullOrEmpty(query) ? path : path + '?' + query;

File: thrift/src/test/java/com/linecorp/armeria/it/client/retry/RetryingRpcClientTest.java
Patch:
@@ -44,7 +44,6 @@
 
 import com.linecorp.armeria.client.ClientBuilder;
 import com.linecorp.armeria.client.ClientFactory;
-import com.linecorp.armeria.client.ClientFactoryBuilder;
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.UnprocessedRequestException;
 import com.linecorp.armeria.client.retry.Backoff;
@@ -185,8 +184,8 @@ public void execute_void() throws Exception {
 
     @Test
     public void shouldGetExceptionWhenFactoryIsClosed() throws Exception {
-        final ClientFactory factory = new ClientFactoryBuilder()
-                .workerGroup(EventLoopGroups.newEventLoopGroup(2), true).build();
+        final ClientFactory factory =
+                ClientFactory.builder().workerGroup(EventLoopGroups.newEventLoopGroup(2), true).build();
 
         final RetryStrategyWithContent<RpcResponse> strategy =
                 (ctx, response) -> {

File: thrift/src/test/java/com/linecorp/armeria/it/metric/DropwizardMetricsIntegrationTest.java
Patch:
@@ -37,7 +37,6 @@
 
 import com.linecorp.armeria.client.ClientBuilder;
 import com.linecorp.armeria.client.ClientFactory;
-import com.linecorp.armeria.client.ClientFactoryBuilder;
 import com.linecorp.armeria.client.metric.MetricCollectingClient;
 import com.linecorp.armeria.common.metric.DropwizardMeterRegistries;
 import com.linecorp.armeria.common.metric.MeterIdPrefixFunction;
@@ -70,7 +69,7 @@ protected void configure(ServerBuilder sb) throws Exception {
     };
 
     private static final ClientFactory clientFactory =
-            new ClientFactoryBuilder().meterRegistry(registry).build();
+            ClientFactory.builder().meterRegistry(registry).build();
 
     @AfterClass
     public static void closeClientFactory() {

File: thrift/src/test/java/com/linecorp/armeria/it/metric/PrometheusMetricsIntegrationTest.java
Patch:
@@ -39,7 +39,6 @@
 
 import com.linecorp.armeria.client.ClientBuilder;
 import com.linecorp.armeria.client.ClientFactory;
-import com.linecorp.armeria.client.ClientFactoryBuilder;
 import com.linecorp.armeria.client.HttpClient;
 import com.linecorp.armeria.client.metric.MetricCollectingClient;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
@@ -93,7 +92,7 @@ protected void configure(ServerBuilder sb) throws Exception {
     };
 
     private static final ClientFactory clientFactory =
-            new ClientFactoryBuilder().meterRegistry(registry).build();
+            ClientFactory.builder().meterRegistry(registry).build();
 
     @AfterClass
     public static void closeClientFactory() {

File: core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java
Patch:
@@ -81,7 +81,6 @@
 import io.netty.channel.ChannelOption;
 import io.netty.channel.EventLoopGroup;
 import io.netty.channel.epoll.EpollChannelOption;
-import io.netty.handler.ssl.OpenSsl;
 import io.netty.handler.ssl.SslContext;
 import io.netty.handler.ssl.SslContextBuilder;
 import io.netty.util.DomainNameMapping;
@@ -1576,7 +1575,7 @@ public Server build() {
                 ports = ImmutableList.of(new ServerPort(0, HTTP));
             }
         } else {
-            if ((!OpenSsl.isAvailable() || !Flags.useOpenSsl()) && !SystemInfo.jettyAlpnOptionalOrAvailable()) {
+            if (!Flags.useOpenSsl() && !SystemInfo.jettyAlpnOptionalOrAvailable()) {
                 throw new IllegalStateException(
                         "TLS configured but this is Java 8 and neither OpenSSL nor Jetty ALPN could be " +
                         "detected. To use TLS with Armeria, you must either use Java 9+, enable OpenSSL, " +

File: brave/src/main/java/com/linecorp/armeria/client/brave/BraveClient.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.client.brave;
 
-import static com.linecorp.armeria.common.brave.RequestContextCurrentTraceContext.ensureScopeUsesRequestContext;
+import static com.linecorp.armeria.internal.brave.TraceContextUtil.ensureScopeUsesRequestContext;
 
 import java.util.function.Function;
 

File: brave/src/main/java/com/linecorp/armeria/server/brave/BraveService.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.server.brave;
 
-import static com.linecorp.armeria.common.brave.RequestContextCurrentTraceContext.ensureScopeUsesRequestContext;
+import static com.linecorp.armeria.internal.brave.TraceContextUtil.ensureScopeUsesRequestContext;
 
 import java.util.function.Function;
 

File: brave/src/test/java/com/linecorp/armeria/common/brave/RequestContextCurrentTraceContextTest.java
Patch:
@@ -32,10 +32,10 @@
 import org.mockito.stubbing.Answer;
 
 import com.linecorp.armeria.common.RequestContext;
-import com.linecorp.armeria.common.brave.RequestContextCurrentTraceContext.PingPongExtra;
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.internal.DefaultAttributeMap;
 import com.linecorp.armeria.internal.brave.TraceContextUtil;
+import com.linecorp.armeria.internal.brave.TraceContextUtil.PingPongExtra;
 
 import brave.propagation.CurrentTraceContext;
 import brave.propagation.CurrentTraceContext.Scope;
@@ -187,7 +187,7 @@ public void shouldSetPongIfOnlyExtra() {
         final TraceContext context = TraceContext.newBuilder().traceId(1).spanId(1)
                                                  .extra(Collections.singletonList(extra)).build();
 
-        PingPongExtra.maybeSetPong(context);
+        TraceContextUtil.PingPongExtra.maybeSetPong(context);
 
         assertThat(extra.isPong()).isTrue();
     }

File: core/src/main/java/com/linecorp/armeria/server/annotation/Path.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 LINE Corporation
+ * Copyright 2019 LINE Corporation
  *
  * LINE Corporation licenses this file to you under the Apache License,
  * version 2.0 (the "License"); you may not use this file except in compliance
@@ -17,6 +17,7 @@
 package com.linecorp.armeria.server.annotation;
 
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Repeatable;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -26,6 +27,7 @@
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)
+@Repeatable(value = Paths.class)
 public @interface Path {
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/cors/CorsPolicy.java
Patch:
@@ -40,9 +40,9 @@
 import com.linecorp.armeria.common.HttpHeadersBuilder;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.ResponseHeadersBuilder;
+import com.linecorp.armeria.internal.HttpTimestampSupplier;
 import com.linecorp.armeria.server.Route;
 import com.linecorp.armeria.server.cors.CorsConfig.ConstantValueSupplier;
-import com.linecorp.armeria.server.cors.CorsConfig.InstantValueSupplier;
 
 import io.netty.util.AsciiString;
 
@@ -87,7 +87,7 @@ public final class CorsPolicy {
             this.preflightResponseHeaders = Collections.emptyMap();
         } else if (preflightResponseHeaders.isEmpty()) {
             this.preflightResponseHeaders = ImmutableMap.of(
-                    HttpHeaderNames.DATE, InstantValueSupplier.INSTANCE,
+                    HttpHeaderNames.DATE, HttpTimestampSupplier::currentTime,
                     HttpHeaderNames.CONTENT_LENGTH, ConstantValueSupplier.ZERO);
         } else {
             this.preflightResponseHeaders = ImmutableMap.copyOf(preflightResponseHeaders);

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -439,7 +439,8 @@ protocol, routingCtx, routingResult, req, getSSLSession(channel),
 
             assert responseEncoder != null;
             final HttpResponseSubscriber resSubscriber =
-                    new HttpResponseSubscriber(ctx, responseEncoder, reqCtx, req);
+                    new HttpResponseSubscriber(ctx, responseEncoder, reqCtx, req,
+                                               config.isServerHeaderEnabled(), config.isDateHeaderEnabled());
             reqCtx.setRequestTimeoutChangeListener(resSubscriber);
             res.subscribe(resSubscriber, eventLoop, WITH_POOLED_OBJECTS);
         }

File: core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java
Patch:
@@ -340,6 +340,9 @@ public void onComplete() {
                     return HttpResponse.of(HttpStatus.OK);
                 }
             });
+
+            sb.disableServerHeader();
+            sb.disableDateHeader();
         }
     };
 

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceResponseConverterTest.java
Patch:
@@ -402,6 +402,9 @@ public Publisher<ServerSentEvent> publisher() {
                                      ServerSentEvent.ofData("qux"));
                 }
             });
+
+            sb.disableServerHeader();
+            sb.disableDateHeader();
         }
 
         private Publisher<String> exceptionRaisingPublisher() {

File: core/src/test/java/com/linecorp/armeria/server/HttpResponseSubscriberTest.java
Patch:
@@ -82,7 +82,8 @@ private static HttpResponseSubscriber responseSubscriber(RequestHeaders headers,
         req.init(sctx);
         return new HttpResponseSubscriber(mock(ChannelHandlerContext.class),
                                           new ImmediateWriteEmulator(sctx.channel()),
-                                          sctx, req);
+                                          sctx, req,
+                                          false, false);
     }
 
     private static ByteBuf newBuffer(String content) {

File: core/src/test/java/com/linecorp/armeria/server/HttpServerTest.java
Patch:
@@ -434,6 +434,9 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
 
             sb.maxRequestLength(MAX_CONTENT_LENGTH);
             sb.idleTimeout(Duration.ofSeconds(5));
+
+            sb.disableServerHeader();
+            sb.disableDateHeader();
         }
     };
 

File: core/src/test/java/com/linecorp/armeria/server/ProxyProtocolEnabledServerTest.java
Patch:
@@ -81,6 +81,8 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) {
                                                          dst.getHostString(), dst.getPort()));
                 }
             });
+            sb.disableServerHeader();
+            sb.disableDateHeader();
         }
     };
 

File: core/src/test/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceTest.java
Patch:
@@ -95,6 +95,8 @@ protected void configure(ServerBuilder sb) throws Exception {
                                          })
                                          .build());
             sb.gracefulShutdownTimeout(Duration.ofSeconds(10), Duration.ofSeconds(10));
+            sb.disableServerHeader();
+            sb.disableDateHeader();
         }
     };
 

File: core/src/test/java/com/linecorp/armeria/server/streaming/JsonTextSequencesTest.java
Patch:
@@ -62,6 +62,8 @@ protected void configure(ServerBuilder sb) throws Exception {
                                new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT)))
               .service("/seq/single",
                        (ctx, req) -> JsonTextSequences.fromObject("foo"));
+            sb.disableServerHeader();
+            sb.disableDateHeader();
         }
     };
 

File: examples/server-sent-events/src/main/java/example/armeria/server/sse/Main.java
Patch:
@@ -77,6 +77,8 @@ public Publisher<ServerSentEvent> sendEvents() {
                      })
                      .service("/", HttpFile.ofResource(Main.class.getClassLoader(), "index.html").asService())
                      .decorator(LoggingService.newDecorator())
+                     .disableServerHeader()
+                     .disableDateHeader()
                      .build();
     }
 

File: spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java
Patch:
@@ -131,6 +131,8 @@ private com.linecorp.armeria.spring.Ssl toArmeriaSslConfiguration(Ssl ssl) {
     @Override
     public WebServer getWebServer(HttpHandler httpHandler) {
         final ServerBuilder sb = Server.builder();
+        sb.disableServerHeader();
+        sb.disableDateHeader();
 
         final SessionProtocol protocol;
         final Ssl ssl = getSsl();

File: benchmarks/src/jmh/java/com/linecorp/armeria/core/client/endpoint/WeightedRoundRobinStrategyBenchmark.java
Patch:
@@ -56,7 +56,7 @@ interface EndpointGenerator {
     }
 
     private List<Endpoint> generateEndpoints(EndpointGenerator e) {
-        List<Endpoint> result = new ArrayList<>();
+        final List<Endpoint> result = new ArrayList<>();
         for (int i = 0; i < numEndpoints; i++) {
             result.add(e.generate(i));
         }
@@ -72,7 +72,7 @@ private EndpointSelector getEndpointSelector(List<Endpoint> endpoints, String gr
 
     @Setup
     public void setupCases() {
-        Random rand = new Random();
+        final Random rand = new Random();
 
         selectorSameWeight = getEndpointSelector(generateEndpoints(
                 id -> Endpoint.of("127.0.0.1", id + 1)

File: brave/src/test/java/com/linecorp/armeria/it/brave/BraveIntegrationTest.java
Patch:
@@ -141,7 +141,7 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)
                                             countDownLatch.countDown();
                                             countDownLatch.await();
                                         }
-                                        brave.Span span = Tracing.currentTracer().nextSpan().start();
+                                        final brave.Span span = Tracing.currentTracer().nextSpan().start();
                                         try (SpanInScope spanInScope =
                                                      Tracing.currentTracer().withSpanInScope(span)) {
                                             if (i == 1) {
@@ -162,8 +162,8 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)
                                    result -> allAsList(IntStream.range(1, 3).mapToObj(
                                            i -> executorService.submit(
                                                    RequestContext.current().makeContextAware(() -> {
-                                                       ScopedSpan span = Tracing.currentTracer()
-                                                                                .startScopedSpan("aloha");
+                                                       final ScopedSpan span = Tracing.currentTracer()
+                                                                                      .startScopedSpan("aloha");
                                                        try {
                                                            return null;
                                                        } finally {

File: core/src/test/java/com/linecorp/armeria/server/HttpServerTest.java
Patch:
@@ -386,15 +386,15 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)
 
             sb.service("/additional-trailers-no-other-trailers", (ctx, req) -> {
                 ctx.addAdditionalResponseTrailer(HttpHeaderNames.of("additional-trailer"), "value2");
-                String payload = "foobar";
+                final String payload = "foobar";
                 return HttpResponse.of(ResponseHeaders.of(HttpStatus.OK),
                                        new DefaultHttpData(payload.getBytes(StandardCharsets.UTF_8),
                                                            true));
             });
 
             sb.service("/additional-trailers-no-eos", (ctx, req) -> {
                 ctx.addAdditionalResponseTrailer(HttpHeaderNames.of("additional-trailer"), "value2");
-                String payload = "foobar";
+                final String payload = "foobar";
                 return HttpResponse.of(ResponseHeaders.of(HttpStatus.OK),
                                        new DefaultHttpData(payload.getBytes(StandardCharsets.UTF_8),
                                                            false));

File: core/src/test/java/com/linecorp/armeria/server/logging/LoggingServiceTest.java
Patch:
@@ -88,7 +88,7 @@ public void setUp() {
 
         when(ctx.log()).thenReturn(log);
         doAnswer(invocation -> {
-            RequestLogListener listener = invocation.getArgument(0);
+            final RequestLogListener listener = invocation.getArgument(0);
             listener.onRequestLog(log);
             return null;
         }).when(log).addListener(isA(RequestLogListener.class), isA(RequestLogAvailability.class));

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceServerTest.java
Patch:
@@ -1056,7 +1056,7 @@ protected HttpObject filter(HttpObject obj) {
                 assertThat(rpcRes.get()).isEqualTo(RESPONSE_MESSAGE);
             });
 
-            byte[] deframed = Arrays.copyOfRange(payload.get(), 5, payload.get().length);
+            final byte[] deframed = Arrays.copyOfRange(payload.get(), 5, payload.get().length);
             assertThat(new String(deframed, StandardCharsets.UTF_8)).contains("oauthScope");
         });
     }
@@ -1092,7 +1092,7 @@ protected HttpObject filter(HttpObject obj) {
             assertThat(requestHeaders.get().get(HttpHeaderNames.CONTENT_TYPE)).isEqualTo(
                     "application/grpc+json");
 
-            byte[] deframed = Arrays.copyOfRange(payload.get(), 5, payload.get().length);
+            final byte[] deframed = Arrays.copyOfRange(payload.get(), 5, payload.get().length);
             assertThat(new String(deframed, StandardCharsets.UTF_8)).contains("oauth_scope");
         });
     }

File: it/spring/boot-tomcat/src/main/java/com/linecorp/armeria/spring/tomcat/demo/SpringTomcatApplication.java
Patch:
@@ -42,9 +42,9 @@ public class SpringTomcatApplication {
      */
     @Bean
     public ArmeriaServerConfigurator armeriaTomcat() {
-        WebServer webServer = ((WebServerApplicationContext) applicationContext).getWebServer();
+        final WebServer webServer = ((WebServerApplicationContext) applicationContext).getWebServer();
         if (webServer instanceof TomcatWebServer) {
-            Tomcat tomcat = ((TomcatWebServer) webServer).getTomcat();
+            final Tomcat tomcat = ((TomcatWebServer) webServer).getTomcat();
 
             return serverBuilder -> serverBuilder.service("prefix:/tomcat/api/rest/v1",
                                                           TomcatService.forTomcat(tomcat));

File: it/spring/boot-tomcat/src/test/java/com/linecorp/armeria/spring/tomcat/demo/SpringTomcatApplicationItTest.java
Patch:
@@ -82,7 +82,7 @@ public void verifyTomcatVersion() {
     public void verifySingleConnector() {
         // Relevant to Tomcat 9.0
         assertThat(applicationContext).isInstanceOf(WebServerApplicationContext.class);
-        WebServer webServer = ((WebServerApplicationContext) applicationContext).getWebServer();
+        final WebServer webServer = ((WebServerApplicationContext) applicationContext).getWebServer();
         assertThat(webServer).isInstanceOf(TomcatWebServer.class);
         assertThat(((TomcatWebServer) webServer).getTomcat()
                                                 .getEngine()

File: thrift/src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTest.java
Patch:
@@ -126,7 +126,7 @@ class ThriftOverHttpClientTest {
     };
 
     private static final BinaryService.Iface binaryHandler = data -> {
-        ByteBuffer result = ByteBuffer.allocate(data.remaining());
+        final ByteBuffer result = ByteBuffer.allocate(data.remaining());
         for (int i = data.position(), j = 0; i < data.limit(); i++, j++) {
             result.put(j, (byte) (data.get(i) + 1));
         }

File: thrift/src/test/java/com/linecorp/armeria/it/thrift/ThriftDynamicTimeoutTest.java
Patch:
@@ -119,9 +119,9 @@ void testDisabledTimeout(Function<
     private static final class ClientDecoratorProvider implements ArgumentsProvider {
         @Override
         public Stream<? extends Arguments> provideArguments(ExtensionContext context) throws Exception {
-            Function<Client<RpcRequest, RpcResponse>,
+            final Function<Client<RpcRequest, RpcResponse>,
                     Client<RpcRequest, RpcResponse>> newDynamicTimeoutClient = DynamicTimeoutClient::new;
-            Function<Client<RpcRequest, RpcResponse>,
+            final Function<Client<RpcRequest, RpcResponse>,
                     Client<RpcRequest, RpcResponse>> newTimeoutDisablingClient = TimeoutDisablingClient::new;
             return Stream.of(newDynamicTimeoutClient, newTimeoutDisablingClient).map(Arguments::of);
         }

File: core/src/main/java/com/linecorp/armeria/server/GlobPathMapping.java
Patch:
@@ -89,7 +89,7 @@ RoutingResultBuilder doApply(RoutingContext routingCtx) {
             return null;
         }
 
-        final RoutingResultBuilder builder = RoutingResult.builder()
+        final RoutingResultBuilder builder = RoutingResult.builderWithExpectedNumParams(numParams)
                                                           .path(routingCtx.path())
                                                           .query(routingCtx.query());
         for (int i = 1; i <= numParams; i++) {

File: core/src/main/java/com/linecorp/armeria/server/ParameterizedPathMapping.java
Patch:
@@ -200,7 +200,7 @@ RoutingResultBuilder doApply(RoutingContext routingCtx) {
             return null;
         }
 
-        final RoutingResultBuilder builder = RoutingResult.builder()
+        final RoutingResultBuilder builder = RoutingResult.builderWithExpectedNumParams(paramNameArray.length)
                                                           .path(routingCtx.path())
                                                           .query(routingCtx.query());
 

File: core/src/main/java/com/linecorp/armeria/server/RegexPathMapping.java
Patch:
@@ -66,7 +66,7 @@ protected RoutingResultBuilder doApply(RoutingContext routingCtx) {
             return null;
         }
 
-        final RoutingResultBuilder builder = RoutingResult.builder()
+        final RoutingResultBuilder builder = RoutingResult.builderWithExpectedNumParams(paramNames.size())
                                                           .path(routingCtx.path())
                                                           .query(routingCtx.query());
         for (String name : paramNames) {

File: core/src/main/java/com/linecorp/armeria/client/endpoint/EndpointGroup.java
Patch:
@@ -61,7 +61,7 @@ static EndpointGroup of(EndpointGroup... endpointGroups) {
      * {@code endpointGroups} can be instances of {@link Endpoint} as well, any {@link EndpointGroup}s and
      * {@link Endpoint} will all be combined into a single {@link EndpointGroup} that contains the total set.
      */
-    static EndpointGroup of(Iterable<EndpointGroup> endpointGroups) {
+    static EndpointGroup of(Iterable<? extends EndpointGroup> endpointGroups) {
         requireNonNull(endpointGroups, "endpointGroups");
 
         final List<EndpointGroup> groups = new ArrayList<>();

File: core/src/test/java/com/linecorp/armeria/client/endpoint/EndpointGroupTest.java
Patch:
@@ -42,7 +42,9 @@ class EndpointGroupTest {
     void orElse() {
         final EndpointGroup emptyEndpointGroup = EndpointGroup.empty();
         final EndpointGroup endpointGroup1 = EndpointGroup.of(Endpoint.of("127.0.0.1", 1234));
-        final EndpointGroup endpointGroup2 = EndpointGroup.of(Endpoint.of("127.0.0.1", 2345));
+        // Make sure factory that takes an Iterable accepts a list of Endpoint (subclass).
+        final List<Endpoint> endpoint2Endpoints = ImmutableList.of(Endpoint.of("127.0.0.1", 2345));
+        final EndpointGroup endpointGroup2 = EndpointGroup.of(endpoint2Endpoints);
 
         assertThat(emptyEndpointGroup.orElse(endpointGroup2).endpoints())
                 .isEqualTo(endpointGroup2.endpoints());

File: core/src/main/java/com/linecorp/armeria/common/util/Version.java
Patch:
@@ -41,11 +41,11 @@
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.Enumeration;
-import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Properties;
 import java.util.Set;
+import java.util.TreeMap;
 
 import javax.annotation.Nullable;
 
@@ -134,7 +134,7 @@ public static Map<String, Version> identify(@Nullable ClassLoader classLoader) {
             artifactIds.add(artifactId);
         }
 
-        final Map<String, Version> versions = new HashMap<>();
+        final Map<String, Version> versions = new TreeMap<>();
         for (String artifactId: artifactIds) {
             versions.put(
                     artifactId,

File: brave/src/test/java/com/linecorp/armeria/client/brave/BraveClientTest.java
Patch:
@@ -215,6 +215,7 @@ private static RequestLog testRemoteInvocation(Tracing tracing, @Nullable String
         final RpcResponse rpcRes = RpcResponse.of("Hello, Armeria!");
         final ClientRequestContext ctx = ClientRequestContextBuilder.of(req).build();
         final HttpRequest actualReq = ctx.request();
+        assertThat(actualReq).isNotNull();
 
         ctx.logBuilder().requestFirstBytesTransferred();
         ctx.logBuilder().requestContent(rpcReq, actualReq);

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingHttpClient.java
Patch:
@@ -166,7 +166,8 @@ private void doExecute0(ClientRequestContext ctx, HttpRequestDuplicator rootReqD
             duplicateReq = rootReqDuplicator.duplicateStream(newHeaders.build());
         }
 
-        final ClientRequestContext derivedCtx = newDerivedContext(ctx, duplicateReq, initialAttempt);
+        final ClientRequestContext derivedCtx = newDerivedContext(ctx, duplicateReq, ctx.rpcRequest(),
+                                                                  initialAttempt);
         ctx.logBuilder().addChild(derivedCtx.log());
 
         final HttpResponse response = executeWithFallback(delegate(), derivedCtx,

File: core/src/main/java/com/linecorp/armeria/common/HttpRequest.java
Patch:
@@ -259,7 +259,7 @@ static HttpRequest of(RequestHeaders headers, Publisher<? extends HttpObject> pu
     /**
      * Creates a new instance from an existing {@link HttpRequest} replacing its {@link RequestHeaders}
      * with the specified {@code newHeaders}. Make sure to update {@link RequestContext#request()} with
-     * {@link RequestContext#updateRequest(Request)} if you are intercepting an {@link HttpRequest}
+     * {@link RequestContext#updateRequest(HttpRequest)} if you are intercepting an {@link HttpRequest}
      * in a decorator. For example:
      * <pre>{@code
      * > public class MyService extends SimpleDecoratingService<HttpRequest, HttpResponse> {

File: core/src/test/java/com/linecorp/armeria/client/endpoint/StickyEndpointSelectionStrategyTest.java
Patch:
@@ -36,9 +36,9 @@ public class StickyEndpointSelectionStrategyTest {
     private static final String STICKY_HEADER_NAME = "USER_COOKIE";
 
     final ToLongFunction<ClientRequestContext> hasher = (ClientRequestContext ctx) -> {
-        return ((HttpRequest) ctx.request()).headers()
-                                            .get(HttpHeaderNames.of(STICKY_HEADER_NAME))
-                                            .hashCode();
+        return ctx.request().headers()
+                  .get(HttpHeaderNames.of(STICKY_HEADER_NAME))
+                  .hashCode();
     };
 
     final StickyEndpointSelectionStrategy strategy = new StickyEndpointSelectionStrategy(hasher);

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaChannel.java
Patch:
@@ -170,6 +170,7 @@ private DefaultClientRequestContext newContext(HttpMethod method, HttpRequest re
                 uri().getRawQuery(),
                 null,
                 options(),
-                req);
+                req,
+                null);
     }
 }

File: thrift/src/main/java/com/linecorp/armeria/client/thrift/THttpClientDelegate.java
Patch:
@@ -140,6 +140,7 @@ public RpcResponse execute(ClientRequestContext ctx, RpcRequest call) throws Exc
                                   .build(),
                     new ByteBufHttpData(buf, true));
 
+            ctx.updateRequest(httpReq);
             ctx.logBuilder().deferResponseContent();
 
             final CompletableFuture<AggregatedHttpResponse> future =

File: brave/src/test/java/com/linecorp/armeria/server/brave/ServerRequestContextAdapterTest.java
Patch:
@@ -170,13 +170,13 @@ void route_prefix() {
 
     @Test
     void route_pathWithPrefix_glob() {
-        when(ctx.route()).thenReturn(Route.builder().pathWithPrefix("/foo/", "glob:bar").build());
+        when(ctx.route()).thenReturn(Route.builder().path("/foo/", "glob:bar").build());
         assertThat(response.route()).isEqualTo("/foo/**/bar");
     }
 
     @Test
     void route_pathWithPrefix_regex() {
-        when(ctx.route()).thenReturn(Route.builder().pathWithPrefix("/foo/", "regex:(bar|baz)").build());
+        when(ctx.route()).thenReturn(Route.builder().path("/foo/", "regex:(bar|baz)").build());
         assertThat(response.route()).isEqualTo("/foo/(bar|baz)");
     }
 }

File: core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceFactory.java
Patch:
@@ -279,7 +279,7 @@ static AnnotatedHttpServiceElement create(String pathPrefix, Object object, Meth
         final String computedPathPrefix = computePathPrefix(clazz, pathPrefix);
 
         final Route route = Route.builder()
-                                 .pathWithPrefix(computedPathPrefix, pattern)
+                                 .path(computedPathPrefix, pattern)
                                  .methods(methods)
                                  .consumes(consumableMediaTypes(method, clazz))
                                  .produces(producibleMediaTypes(method, clazz))

File: core/src/main/java/com/linecorp/armeria/server/RoutePathType.java
Patch:
@@ -48,7 +48,7 @@ public enum RoutePathType {
     /**
      * The path which has the prefix and the regex.
      *
-     * @see RouteBuilder#pathWithPrefix(String, String)
+     * @see RouteBuilder#path(String, String)
      */
     REGEX_WITH_PREFIX(false);
 

File: core/src/main/java/com/linecorp/armeria/server/composition/AbstractCompositeService.java
Patch:
@@ -155,8 +155,9 @@ public O serve(ServiceRequestContext ctx, I req) throws Exception {
 
         if (result.route().pathType() == RoutePathType.PREFIX) {
             assert ctx.route().pathType() == RoutePathType.PREFIX;
-            final Route newRoute = Route.builder().prefix(ctx.route().paths().get(0) +
-                                                          result.route().paths().get(0).substring(1)).build();
+            final Route newRoute = Route.builder()
+                                        .pathPrefix(ctx.route().paths().get(0) +
+                                                    result.route().paths().get(0).substring(1)).build();
 
             final ServiceRequestContext newCtx = new CompositeServiceRequestContext(
                     ctx, newRoute, result.routingResult().path());

File: core/src/main/java/com/linecorp/armeria/server/composition/CompositeServiceEntry.java
Patch:
@@ -60,11 +60,11 @@ CompositeServiceEntry<I, O> ofGlob(String glob, Service<I, O> service) {
      * Creates a new {@link CompositeServiceEntry} whose {@link Service} is bound under the specified
      * directory.
      *
-     * @see RouteBuilder#prefix(String)
+     * @see RouteBuilder#pathPrefix(String)
      */
     public static <I extends Request, O extends Response>
     CompositeServiceEntry<I, O> ofPrefix(String pathPrefix, Service<I, O> service) {
-        return new CompositeServiceEntry<>(Route.builder().prefix(pathPrefix).build(), service);
+        return new CompositeServiceEntry<>(Route.builder().pathPrefix(pathPrefix).build(), service);
     }
 
     /**

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpDocServicePluginTest.java
Patch:
@@ -192,15 +192,15 @@ public void testNewEndpointInfo() {
                         .availableMimeTypes(MediaType.PLAIN_TEXT_UTF_8, MediaType.JSON_UTF_8)
                         .build());
 
-        route = withMethodAndTypes(Route.builder().pathWithPrefix("/glob/", "glob:/home/*/files/**"));
+        route = withMethodAndTypes(Route.builder().path("/glob/", "glob:/home/*/files/**"));
         endpointInfo = endpointInfo(route, hostnamePattern);
         assertThat(endpointInfo).isEqualTo(
                 new EndpointInfoBuilder("*", "regex:^/glob/home/([^/]+)/files/(.*)$")
                         .availableMimeTypes(MediaType.PLAIN_TEXT_UTF_8, MediaType.JSON_UTF_8)
                         .build());
 
         route = withMethodAndTypes(Route.builder()
-                                        .pathWithPrefix("/prefix: regex:/", "regex:^/files/(?<filePath>.*)$"));
+                                        .path("/prefix: regex:/", "regex:^/files/(?<filePath>.*)$"));
         endpointInfo = endpointInfo(route, hostnamePattern);
         assertThat(endpointInfo).isEqualTo(
                 new EndpointInfoBuilder("*", "regex:^/files/(?<filePath>.*)$")

File: core/src/test/java/com/linecorp/armeria/server/ServiceBindingBuilderTest.java
Patch:
@@ -65,7 +65,7 @@ public void serviceBindingBuilder() {
         assertThat(route.paths()).containsExactly("/foo/bar", "/foo/bar");
         assertThat(route.consumes()).containsExactly(JSON, PLAIN_TEXT_UTF_8);
         assertThat(route.produces()).containsExactly(JSON_UTF_8,
-                                                               PLAIN_TEXT_UTF_8);
+                                                     PLAIN_TEXT_UTF_8);
         assertThat(serviceConfig.requestTimeoutMillis()).isEqualTo(10);
         assertThat(serviceConfig.maxRequestLength()).isEqualTo(8192);
         assertThat(serviceConfig.verboseResponses()).isEqualTo(true);
@@ -94,7 +94,7 @@ public void withRoute() {
         assertThat(route.paths()).containsExactly("/foo/bar", "/foo/bar");
         assertThat(route.consumes()).containsExactly(JSON, PLAIN_TEXT_UTF_8);
         assertThat(route.produces()).containsExactly(JSON_UTF_8,
-                                                               PLAIN_TEXT_UTF_8);
+                                                     PLAIN_TEXT_UTF_8);
         assertThat(serviceConfig.requestTimeoutMillis()).isEqualTo(10);
         assertThat(serviceConfig.maxRequestLength()).isEqualTo(8192);
         assertThat(serviceConfig.verboseResponses()).isEqualTo(true);

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcService.java
Patch:
@@ -236,7 +236,7 @@ public void serviceAdded(ServiceConfig cfg) {
         }
 
         if (protoReflectionService != null) {
-            Map<String, ServerServiceDefinition> grpcServices =
+            final Map<String, ServerServiceDefinition> grpcServices =
                     cfg.server().config().virtualHosts().stream()
                        .flatMap(host -> host.serviceConfigs().stream())
                        .map(serviceConfig -> serviceConfig.service().as(GrpcService.class))

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcDocServicePluginTest.java
Patch:
@@ -181,12 +181,12 @@ private static Map<String, ServiceInfo> services(DocServiceFilter include, DocSe
 
         // The case where a GrpcService is added to ServerBuilder with a prefix.
         serverBuilder.service(
-                Route.builder().prefix("/test").build(),
+                Route.builder().pathPrefix("/test").build(),
                 new GrpcServiceBuilder().addService(mock(UnitTestServiceImplBase.class)).build());
 
         // Another GrpcService with a different prefix.
         serverBuilder.service(
-                Route.builder().prefix("/reconnect").build(),
+                Route.builder().pathPrefix("/reconnect").build(),
                 new GrpcServiceBuilder().addService(mock(ReconnectServiceImplBase.class)).build());
 
         // Make sure all services and their endpoints exist in the specification.

File: core/src/main/java/com/linecorp/armeria/common/util/Samplers.java
Patch:
@@ -31,7 +31,8 @@ final class Samplers {
 
     private static final Splitter KEY_VALUE_SPLITTER = Splitter.on('=').trimResults();
     private static final String IAE_MSG_TEMPLATE =
-            "specification: %s (expected: always, never, random=<rate> or rate-limited=<samples_per_second>";
+            "specification: %s (expected: always, never, random=<probability> or " +
+            "rate-limited=<samples_per_second>";
 
     /**
      * A sampler that will always be sampled.

File: core/src/test/java/com/linecorp/armeria/common/util/SamplerTest.java
Patch:
@@ -34,7 +34,7 @@ void goodOf() {
         assertThat(Sampler.of("never")).isSameAs(Sampler.never());
         assertThat(Sampler.of(" never ")).isSameAs(Sampler.never());
 
-        // 'random=<rate>'
+        // 'random=<probability>'
         assertThat(Sampler.of("random=0")).isSameAs(Sampler.never());
         assertThat(Sampler.of("random=1")).isSameAs(Sampler.always());
         assertThat(Sampler.of("random=0.1")).isInstanceOfSatisfying(CountingSampler.class, sampler -> {

File: core/src/main/java/com/linecorp/armeria/client/UnprocessedRequestException.java
Patch:
@@ -56,7 +56,7 @@ public Throwable getCause() {
 
     @Override
     public Throwable fillInStackTrace() {
-        if (Flags.verboseExceptions()) {
+        if (Flags.verboseExceptionSampler().isSampled(getClass())) {
             super.fillInStackTrace();
         }
         return this;

File: core/src/main/java/com/linecorp/armeria/common/ClosedSessionException.java
Patch:
@@ -26,10 +26,11 @@ public final class ClosedSessionException extends RuntimeException {
 
     /**
      * Returns a {@link ClosedSessionException} which may be a singleton or a new instance, depending on
-     * whether {@linkplain Flags#verboseExceptions() the verbose exception mode} is enabled.
+     * {@link Flags#verboseExceptionSampler()}'s decision.
      */
     public static ClosedSessionException get() {
-        return Flags.verboseExceptions() ? new ClosedSessionException() : INSTANCE;
+        return Flags.verboseExceptionSampler().isSampled(ClosedSessionException.class) ?
+               new ClosedSessionException() : INSTANCE;
     }
 
     private ClosedSessionException() {}

File: core/src/main/java/com/linecorp/armeria/common/ContentTooLargeException.java
Patch:
@@ -27,10 +27,11 @@ public final class ContentTooLargeException extends RuntimeException {
 
     /**
      * Returns a {@link ContentTooLargeException} which may be a singleton or a new instance, depending on
-     * whether {@linkplain Flags#verboseExceptions() the verbose exception mode} is enabled.
+     * {@link Flags#verboseExceptionSampler()}'s decision.
      */
     public static ContentTooLargeException get() {
-        return Flags.verboseExceptions() ? new ContentTooLargeException() : INSTANCE;
+        return Flags.verboseExceptionSampler().isSampled(ContentTooLargeException.class) ?
+               new ContentTooLargeException() : INSTANCE;
     }
 
     private ContentTooLargeException() {}

File: core/src/main/java/com/linecorp/armeria/common/ProtocolViolationException.java
Patch:
@@ -61,7 +61,7 @@ protected ProtocolViolationException(@Nullable String message, @Nullable Throwab
 
     @Override
     public Throwable fillInStackTrace() {
-        if (Flags.verboseExceptions()) {
+        if (Flags.verboseExceptionSampler().isSampled(getClass())) {
             super.fillInStackTrace();
         }
         return this;

File: core/src/main/java/com/linecorp/armeria/common/stream/ClosedPublisherException.java
Patch:
@@ -30,10 +30,11 @@ public final class ClosedPublisherException extends RuntimeException {
 
     /**
      * Returns a {@link ClosedPublisherException} which may be a singleton or a new instance, depending on
-     * whether {@linkplain Flags#verboseExceptions() the verbose exception mode} is enabled.
+     * {@link Flags#verboseExceptionSampler()}'s decision.
      */
     public static ClosedPublisherException get() {
-        return Flags.verboseExceptions() ? new ClosedPublisherException() : INSTANCE;
+        return Flags.verboseExceptionSampler().isSampled(ClosedPublisherException.class) ?
+               new ClosedPublisherException() : INSTANCE;
     }
 
     private ClosedPublisherException() {}

File: core/src/main/java/com/linecorp/armeria/server/HttpResponseException.java
Patch:
@@ -81,7 +81,7 @@ public HttpResponse httpResponse() {
 
     @Override
     public Throwable fillInStackTrace() {
-        if (Flags.verboseExceptions()) {
+        if (Flags.verboseExceptionSampler().isSampled(getClass())) {
             return super.fillInStackTrace();
         }
         return this;

File: core/src/main/java/com/linecorp/armeria/server/HttpStatusException.java
Patch:
@@ -42,7 +42,7 @@ public final class HttpStatusException extends RuntimeException {
     public static HttpStatusException of(int statusCode) {
         if (statusCode < 0 || statusCode >= 1000) {
             final HttpStatus status = HttpStatus.valueOf(statusCode);
-            if (Flags.verboseExceptions()) {
+            if (Flags.verboseExceptionSampler().isSampled(HttpStatusException.class)) {
                 return new HttpStatusException(status);
             } else {
                 return new HttpStatusException(status, false);

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaStatusException.java
Patch:
@@ -23,7 +23,7 @@
  */
 public class ArmeriaStatusException extends RuntimeException {
 
-    public static final long serialVersionUID = -8370257107063108923L;
+    private static final long serialVersionUID = -8370257107063108923L;
 
     private final int code;
 

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlException.java
Patch:
@@ -63,7 +63,7 @@ protected SamlException(@Nullable String message, @Nullable Throwable cause,
 
     @Override
     public Throwable fillInStackTrace() {
-        if (Flags.verboseExceptions()) {
+        if (Flags.verboseExceptionSampler().isSampled(getClass())) {
             return super.fillInStackTrace();
         }
         return this;

File: core/src/test/java/com/linecorp/armeria/internal/ArmeriaHttpUtilTest.java
Patch:
@@ -71,6 +71,7 @@ void testConcatPaths() throws Exception {
 
         assertThat(concatPaths("/", "a")).isEqualTo("/a");
         assertThat(concatPaths("/", "/a")).isEqualTo("/a");
+        assertThat(concatPaths("/", "/")).isEqualTo("/");
 
         assertThat(concatPaths("/a", "b")).isEqualTo("/a/b");
         assertThat(concatPaths("/a", "/b")).isEqualTo("/a/b");

File: examples/spring-boot-tomcat/src/test/java/example/springframework/boot/tomcat/HelloIntegrationTest.java
Patch:
@@ -58,6 +58,6 @@ public void hello() throws Exception {
     public void healthCheck() throws Exception {
         final AggregatedHttpResponse res = client.get("/internal/healthcheck").aggregate().join();
         assertThat(res.status()).isEqualTo(HttpStatus.OK);
-        assertThat(res.contentUtf8()).isEqualTo("ok");
+        assertThat(res.contentUtf8()).isEqualTo("{\"healthy\":true}");
     }
 }

File: brave/src/test/java/com/linecorp/armeria/server/brave/BraveServiceTest.java
Patch:
@@ -167,6 +167,7 @@ private static RequestLog testServiceInvocation(Reporter<Span> reporter,
                                                    .build();
 
         final HttpRequest req = HttpRequest.of(RequestHeaders.of(HttpMethod.POST, "/hello/trustin",
+                                                                 HttpHeaderNames.SCHEME, "http",
                                                                  HttpHeaderNames.AUTHORITY, "foo.com"));
         final ServiceRequestContext ctx = ServiceRequestContextBuilder.of(req)
                                                                       .build();

File: core/src/main/java/com/linecorp/armeria/common/DefaultResponseHeaders.java
Patch:
@@ -17,7 +17,7 @@
 
 import javax.annotation.Nullable;
 
-@SuppressWarnings("checkstyle:EqualsHashCode")
+@SuppressWarnings({ "checkstyle:EqualsHashCode", "EqualsAndHashcode" })
 final class DefaultResponseHeaders extends DefaultHttpHeaders implements ResponseHeaders {
 
     @Nullable

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceResponseConverterTest.java
Patch:
@@ -359,11 +359,11 @@ public <T> HttpResult<T> generic() {
                 public void header() {}
 
                 @Get("/header-overwrite")
-                @AdditionalHeader(name = "header_name_1", value = "header_value_unchanged")
+                @AdditionalHeader(name = "header_name_1", value = "header_value_changed")
                 public HttpResponse headerOverwrite() {
                     return HttpResponse.of(ResponseHeaders.of(HttpStatus.OK,
                                                               HttpHeaderNames.of("header_name_1"),
-                                                              "header_value_changed"));
+                                                              "header_value_unchanged"));
                 }
             });
 

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaClientCall.java
Patch:
@@ -389,7 +389,7 @@ private void notifyExecutor() {
     }
 
     @Nullable
-    private HttpHeaders parseGrpcWebTrailers(ByteBuf buf) {
+    private static HttpHeaders parseGrpcWebTrailers(ByteBuf buf) {
         final HttpHeadersBuilder trailers = HttpHeaders.builder();
         while (buf.readableBytes() > 0) {
             int start = buf.forEachByte(ByteProcessor.FIND_NON_LINEAR_WHITESPACE);

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftSerializationFormatsTest.java
Patch:
@@ -134,7 +134,7 @@ public void notAllowed() throws Exception {
 
     @Test
     public void contentTypeNotThrift() throws Exception {
-        // Browser clients often send a non-thrift content type.
+        // Browser clients often send a non-Thrift content type.
         final HttpHeaders headers = HttpHeaders.of(HttpHeaderNames.CONTENT_TYPE,
                                                    "text/plain; charset=utf-8");
         final HelloService.Iface client =

File: benchmarks/src/jmh/java/com/linecorp/armeria/shared/EventLoopJmhExecutor.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.util.concurrent.Executor;
 
-import com.linecorp.armeria.common.util.EventLoopThreadFactory;
+import com.linecorp.armeria.common.util.ThreadFactories;
 
 import io.netty.channel.DefaultEventLoop;
 import io.netty.channel.DefaultEventLoopGroup;
@@ -53,8 +53,8 @@ public static EventLoop currentEventLoop() {
         return CURRENT_EVENT_LOOP.get();
     }
 
-    public EventLoopJmhExecutor(int numThreads, String threadPrefix) {
-        super(numThreads, new EventLoopThreadFactory(threadPrefix));
+    public EventLoopJmhExecutor(int numThreads, String threadNamePrefix) {
+        super(numThreads, ThreadFactories.builder(threadNamePrefix).eventLoop(true).build());
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/common/CommonPools.java
Patch:
@@ -23,7 +23,7 @@
 
 import com.linecorp.armeria.client.ClientFactoryBuilder;
 import com.linecorp.armeria.common.util.EventLoopGroups;
-import com.linecorp.armeria.common.util.EventLoopThreadFactory;
+import com.linecorp.armeria.common.util.ThreadFactories;
 import com.linecorp.armeria.server.ServerBuilder;
 
 import io.netty.channel.EventLoopGroup;
@@ -41,7 +41,7 @@ public final class CommonPools {
         final ThreadPoolExecutor blockingTaskExecutor = new ThreadPoolExecutor(
                 Flags.numCommonBlockingTaskThreads(), Flags.numCommonBlockingTaskThreads(),
                 60, TimeUnit.SECONDS, new LinkedTransferQueue<>(),
-                new EventLoopThreadFactory("armeria-common-blocking-tasks", true));
+                ThreadFactories.newThreadFactory("armeria-common-blocking-tasks", true));
 
         blockingTaskExecutor.allowCoreThreadTimeOut(true);
         BLOCKING_TASK_EXECUTOR = blockingTaskExecutor;

File: core/src/main/java/com/linecorp/armeria/common/util/EventLoopGroups.java
Patch:
@@ -89,7 +89,8 @@ public static EventLoopGroup newEventLoopGroup(int numThreads, String threadName
 
         final TransportType type = TransportType.detectTransportType();
         final String prefix = threadNamePrefix + '-' + type.lowerCasedName();
-        return newEventLoopGroup(numThreads, new EventLoopThreadFactory(prefix, useDaemonThreads));
+        return newEventLoopGroup(numThreads, ThreadFactories.newEventLoopThreadFactory(prefix,
+                                                                                       useDaemonThreads));
     }
 
     /**

File: core/src/test/java/com/linecorp/armeria/server/GracefulShutdownSupportTest.java
Patch:
@@ -40,7 +40,7 @@
 
 import com.google.common.base.Ticker;
 
-import com.linecorp.armeria.common.util.EventLoopThreadFactory;
+import com.linecorp.armeria.common.util.ThreadFactories;
 
 public class GracefulShutdownSupportTest {
 
@@ -59,7 +59,7 @@ public class GracefulShutdownSupportTest {
     public void setUp() {
         executor = new ThreadPoolExecutor(
                 0, 1, 1, TimeUnit.SECONDS, new LinkedTransferQueue<>(),
-                new EventLoopThreadFactory("graceful-shutdown-test", true));
+                ThreadFactories.newEventLoopThreadFactory("graceful-shutdown-test", true));
 
         support = GracefulShutdownSupport.create(Duration.ofNanos(QUIET_PERIOD_NANOS), executor, ticker);
     }

File: core/src/test/java/com/linecorp/armeria/server/ServerTest.java
Patch:
@@ -60,8 +60,8 @@
 import com.linecorp.armeria.common.metric.MeterIdPrefix;
 import com.linecorp.armeria.common.metric.PrometheusMeterRegistries;
 import com.linecorp.armeria.common.util.CompletionActions;
-import com.linecorp.armeria.common.util.EventLoopThreadFactory;
 import com.linecorp.armeria.common.util.Exceptions;
+import com.linecorp.armeria.common.util.ThreadFactories;
 import com.linecorp.armeria.internal.metric.MicrometerUtil;
 import com.linecorp.armeria.server.logging.LoggingService;
 import com.linecorp.armeria.testing.internal.AnticipatedException;
@@ -372,7 +372,8 @@ public void defaultStartStopExecutor() {
     public void customStartStopExecutor() {
         final Queue<Thread> threads = new LinkedTransferQueue<>();
         final String prefix = getClass().getName() + "#customStartStopExecutor";
-        final ExecutorService executor = Executors.newSingleThreadExecutor(new EventLoopThreadFactory(prefix));
+        final ExecutorService executor = Executors.newSingleThreadExecutor(
+                ThreadFactories.builder(prefix).eventLoop(true).build());
         final Server server = new ServerBuilder()
                 .startStopExecutor(executor)
                 .service("/", (ctx, req) -> HttpResponse.of(200))

File: brave/src/main/java/com/linecorp/armeria/internal/brave/SpanTags.java
Patch:
@@ -22,6 +22,7 @@
 
 import javax.annotation.Nullable;
 
+import com.linecorp.armeria.common.RequestContext;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.Scheme;
 import com.linecorp.armeria.common.SerializationFormat;
@@ -142,8 +143,8 @@ public static void logWireReceive(Span span, long wireSendTimeNanos, RequestLog
         span.annotate(SpanContextUtil.wallTimeMicros(requestLog, wireSendTimeNanos), WIRE_RECEIVE_ANNOTATION);
     }
 
-    public static boolean updateRemoteEndpoint(Span span, RequestLog log) {
-        final SocketAddress remoteAddress = log.context().remoteAddress();
+    public static boolean updateRemoteEndpoint(Span span, RequestContext ctx) {
+        final SocketAddress remoteAddress = ctx.remoteAddress();
         final InetAddress address;
         final int port;
         if (remoteAddress instanceof InetSocketAddress) {

File: spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaClientHttpConnector.java
Patch:
@@ -88,7 +88,7 @@ public Mono<ClientHttpResponse> connect(
             return requestCallback.apply(request)
                                   .then(Mono.fromFuture(request.future()))
                                   .map(ArmeriaHttpClientResponseSubscriber::new)
-                                  .flatMap(s -> Mono.fromFuture(s.httpHeadersFuture())
+                                  .flatMap(s -> Mono.fromFuture(s.headersFuture())
                                                     .map(headers -> createResponse(headers, s)));
         } catch (NullPointerException | IllegalArgumentException e) {
             return Mono.error(e);

File: spring/boot-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaClientHttpResponseTest.java
Patch:
@@ -122,9 +122,9 @@ public void cancel() {
 
     private static ArmeriaClientHttpResponse response(ArmeriaHttpClientResponseSubscriber subscriber,
                                                       HttpHeaders expectedHttpHeaders) {
-        await().until(() -> subscriber.httpHeadersFuture().isDone());
+        await().until(() -> subscriber.headersFuture().isDone());
 
-        final ResponseHeaders h = subscriber.httpHeadersFuture().join();
+        final ResponseHeaders h = subscriber.headersFuture().join();
         assertThat(h).isEqualTo(expectedHttpHeaders);
 
         return new ArmeriaClientHttpResponse(h, subscriber.toResponseBodyPublisher(),

File: core/src/main/java/com/linecorp/armeria/server/docs/DocService.java
Patch:
@@ -253,6 +253,7 @@ private static EnumInfo addEnumDocStrings(EnumInfo e, Map<String, String> docStr
     private static EnumValueInfo addEnumValueDocString(EnumInfo e, EnumValueInfo v,
                                                        Map<String, String> docStrings) {
         return new EnumValueInfo(v.name(),
+                                 v.intValue(),
                                  docString(e.name() + '/' + v.name(), v.docString(), docStrings));
     }
 

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcDocServicePlugin.java
Patch:
@@ -372,7 +372,7 @@ EnumInfo newEnumInfo(EnumDescriptor enumDescriptor) {
         return new EnumInfo(
                 enumDescriptor.getFullName(),
                 enumDescriptor.getValues().stream()
-                              .map(d -> new EnumValueInfo(d.getName()))
+                              .map(d -> new EnumValueInfo(d.getName(), d.getNumber()))
                               .collect(toImmutableList()));
     }
 

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcDocServicePluginTest.java
Patch:
@@ -211,9 +211,9 @@ public void newEnumInfo() throws Exception {
         final EnumInfo enumInfo = generator.newEnumInfo(CompressionType.getDescriptor());
         assertThat(enumInfo).isEqualTo(new EnumInfo(
                 "armeria.grpc.testing.CompressionType",
-                ImmutableList.of(new EnumValueInfo("NONE"),
-                                 new EnumValueInfo("GZIP"),
-                                 new EnumValueInfo("DEFLATE"))));
+                ImmutableList.of(new EnumValueInfo("NONE", 0),
+                                 new EnumValueInfo("GZIP", 1),
+                                 new EnumValueInfo("DEFLATE", 3))));
     }
 
     @Test

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java
Patch:
@@ -257,9 +257,9 @@ protected static int getTotalAttempts(ClientRequestContext ctx) {
      * If {@link ClientRequestContext#endpointSelector()} exists, a new {@link Endpoint} will be selected.
      */
     protected static ClientRequestContext newDerivedContext(ClientRequestContext ctx,
-                                                            Request req, int totalAttempts) {
+                                                            Request req, boolean initialAttempt) {
         final EndpointSelector endpointSelector = ctx.endpointSelector();
-        if (endpointSelector != null && totalAttempts > 1) {
+        if (endpointSelector != null && !initialAttempt) {
             return ctx.newDerivedContext(req, endpointSelector.select(ctx));
         } else {
             return ctx.newDerivedContext(req);

File: spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaAutoConfiguration.java
Patch:
@@ -115,8 +115,10 @@ public Server armeriaServer(
                               httpServiceRegistrationBeans.orElseGet(Collections::emptyList),
                               meterIdPrefixFuncFactory);
         configureAnnotatedHttpServices(server,
+                                       docServiceBuilder,
                                        annotatedServiceRegistrationBeans.orElseGet(Collections::emptyList),
-                                       meterIdPrefixFuncFactory);
+                                       meterIdPrefixFuncFactory,
+                                       docsPath);
         configureServerWithArmeriaSettings(server, armeriaSettings,
                                            meterRegistry.orElse(Metrics.globalRegistry),
                                            healthCheckers.orElseGet(Collections::emptyList));

File: spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java
Patch:
@@ -241,8 +241,10 @@ private void configureArmeriaService(ServerBuilder sb, ArmeriaSettings settings)
                               findBeans(HttpServiceRegistrationBean.class),
                               meterIdPrefixFunctionFactory);
         configureAnnotatedHttpServices(sb,
+                                       docServiceBuilder,
                                        findBeans(AnnotatedServiceRegistrationBean.class),
-                                       meterIdPrefixFunctionFactory);
+                                       meterIdPrefixFunctionFactory,
+                                       settings.getDocsPath());
         configureServerWithArmeriaSettings(sb, settings,
                                            findBean(MeterRegistry.class).orElse(Metrics.globalRegistry),
                                            findBeans(HealthChecker.class));

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaClientCall.java
Patch:
@@ -297,6 +297,8 @@ public void messageRead(ByteBufOrStream message) {
             req.close(GrpcStatus.fromThrowable(t).asException());
             throw t instanceof RuntimeException ? (RuntimeException) t : new RuntimeException(t);
         }
+
+        notifyExecutor();
     }
 
     @Override

File: spring/boot-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java
Patch:
@@ -110,6 +110,7 @@ private String newUrl(String scheme) {
     public void testHealth() throws Exception {
         final AggregatedHttpResponse res = client.get("/internal/actuator/health").aggregate().get();
         assertThat(res.status()).isEqualTo(HttpStatus.OK);
+        assertThat(res.contentType()).isEqualTo(ArmeriaSpringActuatorAutoConfiguration.ACTUATOR_MEDIA_TYPE);
 
         final Map<String, Object> values = OBJECT_MAPPER.readValue(res.content().array(), JSON_MAP);
         assertThat(values).containsEntry("status", "UP");
@@ -120,6 +121,7 @@ public void testLoggers() throws Exception {
         final String loggerPath = "/internal/actuator/loggers/" + TEST_LOGGER_NAME;
         AggregatedHttpResponse res = client.get(loggerPath).aggregate().get();
         assertThat(res.status()).isEqualTo(HttpStatus.OK);
+        assertThat(res.contentType()).isEqualTo(ArmeriaSpringActuatorAutoConfiguration.ACTUATOR_MEDIA_TYPE);
 
         Map<String, Object> values = OBJECT_MAPPER.readValue(res.content().array(), JSON_MAP);
         assertThat(values).containsEntry("effectiveLevel", "DEBUG");
@@ -183,6 +185,7 @@ public void testHeapdump() throws Exception {
     public void testLinks() throws Exception {
         final AggregatedHttpResponse res = client.get("/internal/actuator").aggregate().get();
         assertThat(res.status()).isEqualTo(HttpStatus.OK);
+        assertThat(res.contentType()).isEqualTo(ArmeriaSpringActuatorAutoConfiguration.ACTUATOR_MEDIA_TYPE);
         final Map<String, Object> values = OBJECT_MAPPER.readValue(res.content().array(), JSON_MAP);
         assertThat(values).containsKey("_links");
     }

File: core/src/main/java/com/linecorp/armeria/client/ClientFactory.java
Patch:
@@ -30,6 +30,7 @@
 import org.slf4j.LoggerFactory;
 
 import com.linecorp.armeria.common.Scheme;
+import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.util.ReleasableHolder;
 import com.linecorp.armeria.common.util.Unwrappable;
 
@@ -103,7 +104,7 @@ static void disableShutdownHook() {
      * The caller must release the returned {@link EventLoop} back by calling {@link ReleasableHolder#release()}
      * so that {@link ClientFactory} utilizes {@link EventLoop}s efficiently.
      */
-    ReleasableHolder<EventLoop> acquireEventLoop(Endpoint endpoint);
+    ReleasableHolder<EventLoop> acquireEventLoop(Endpoint endpoint, SessionProtocol sessionProtocol);
 
     /**
      * Returns the {@link MeterRegistry} that collects various stats.

File: core/src/main/java/com/linecorp/armeria/client/DecoratingClientFactory.java
Patch:
@@ -26,6 +26,7 @@
 import javax.annotation.Nullable;
 
 import com.linecorp.armeria.common.Scheme;
+import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.util.ReleasableHolder;
 
 import io.micrometer.core.instrument.MeterRegistry;
@@ -69,8 +70,8 @@ public Supplier<EventLoop> eventLoopSupplier() {
     }
 
     @Override
-    public ReleasableHolder<EventLoop> acquireEventLoop(Endpoint endpoint) {
-        return delegate().acquireEventLoop(endpoint);
+    public ReleasableHolder<EventLoop> acquireEventLoop(Endpoint endpoint, SessionProtocol sessionProtocol) {
+        return delegate().acquireEventLoop(endpoint, sessionProtocol);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/client/DefaultClientFactory.java
Patch:
@@ -35,6 +35,7 @@
 import com.google.common.collect.Streams;
 
 import com.linecorp.armeria.common.Scheme;
+import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.util.ReleasableHolder;
 
 import io.micrometer.core.instrument.MeterRegistry;
@@ -110,8 +111,8 @@ public Supplier<EventLoop> eventLoopSupplier() {
     }
 
     @Override
-    public ReleasableHolder<EventLoop> acquireEventLoop(Endpoint endpoint) {
-        return httpClientFactory.acquireEventLoop(endpoint);
+    public ReleasableHolder<EventLoop> acquireEventLoop(Endpoint endpoint, SessionProtocol sessionProtocol) {
+        return httpClientFactory.acquireEventLoop(endpoint, sessionProtocol);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/client/endpoint/OrElseEndpointGroup.java
Patch:
@@ -37,7 +37,7 @@ final class OrElseEndpointGroup extends AbstractListenable<List<Endpoint>> imple
         second.addListener(unused -> notifyListeners(endpoints()));
 
         initialEndpointsFuture = CompletableFuture
-                .allOf(first.initialEndpointsFuture(), second.initialEndpointsFuture())
+                .anyOf(first.initialEndpointsFuture(), second.initialEndpointsFuture())
                 .thenApply(unused -> endpoints());
     }
 

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerBuilder.java
Patch:
@@ -25,7 +25,8 @@
 import java.util.Optional;
 
 import com.google.common.annotations.VisibleForTesting;
-import com.google.common.base.Ticker;
+
+import com.linecorp.armeria.common.util.Ticker;
 
 /**
  * Builds a {@link CircuitBreaker} instance using builder pattern.

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/NonBlockingCircuitBreaker.java
Patch:
@@ -30,7 +30,8 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.MoreObjects;
-import com.google.common.base.Ticker;
+
+import com.linecorp.armeria.common.util.Ticker;
 
 /**
  * A non-blocking implementation of circuit breaker pattern.

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/SlidingWindowCounter.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.concurrent.atomic.LongAdder;
 
-import com.google.common.base.Ticker;
+import com.linecorp.armeria.common.util.Ticker;
 
 /**
  * An {@link EventCounter} that accumulates the count of events within a time window.

File: core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java
Patch:
@@ -259,7 +259,7 @@ public ClientFactoryBuilder http2InitialStreamWindowSize(int http2InitialStreamW
     public ClientFactoryBuilder http2MaxFrameSize(int http2MaxFrameSize) {
         checkArgument(http2MaxFrameSize >= MAX_FRAME_SIZE_LOWER_BOUND &&
                       http2MaxFrameSize <= MAX_FRAME_SIZE_UPPER_BOUND,
-                      "http2MaxFramSize: %s (expected: >= %s and <= %s)",
+                      "http2MaxFrameSize: %s (expected: >= %s and <= %s)",
                       http2MaxFrameSize, MAX_FRAME_SIZE_LOWER_BOUND, MAX_FRAME_SIZE_UPPER_BOUND);
         this.http2MaxFrameSize = http2MaxFrameSize;
         return this;

File: core/src/main/java/com/linecorp/armeria/common/logging/BinaryContentPreviewer.java
Patch:
@@ -96,7 +96,7 @@ private static ByteBuf duplicateData(HttpData httpData, int length) {
 
     @Override
     public void onData(HttpData data) {
-        assert maxAggregatedLength > 0 : "maxAggreagtedLength() should be called before onData().";
+        assert maxAggregatedLength > 0 : "maxAggregatedLength() should be called before onData().";
         if (data.isEmpty()) {
             return;
         }

File: core/src/main/java/com/linecorp/armeria/common/util/SystemInfo.java
Patch:
@@ -295,7 +295,7 @@ private static final class Pid {
                         logger.info("PID: {} (from VMManagement.getProcessId())", pid);
                     }
                 } catch (Throwable t) {
-                    logFailure("VMManagment.getProcessId()", false, t);
+                    logFailure("VMManagement.getProcessId()", false, t);
                 }
             }
 

File: core/src/main/java/com/linecorp/armeria/server/cors/AbstractCorsPolicyBuilder.java
Patch:
@@ -184,7 +184,7 @@ public B maxAge(long maxAge) {
      *
      * <p>The headers that are available by default are:
      * <ul>
-     *   <li>{@code Cahce-Control}</li>
+     *   <li>{@code Cache-Control}</li>
      *   <li>{@code Content-Language}</li>
      *   <li>{@code Content-Type}</li>
      *   <li>{@code Expires}</li>

File: core/src/main/java/com/linecorp/armeria/server/cors/CorsPolicy.java
Patch:
@@ -164,7 +164,7 @@ public long maxAge() {
      * }</pre>
      * The headers that are available by default are:
      * <ul>
-     *   <li>{@code Cahce-Control}</li>
+     *   <li>{@code Cache-Control}</li>
      *   <li>{@code Content-Language}</li>
      *   <li>{@code Content-Type}</li>
      *   <li>{@code Expires}</li>

File: core/src/main/java/com/linecorp/armeria/server/cors/CorsServiceBuilder.java
Patch:
@@ -220,7 +220,7 @@ public CorsServiceBuilder maxAge(long maxAge) {
      *
      * <p>The headers that are available by default are:
      * <ul>
-     *   <li>{@code Cahce-Control}</li>
+     *   <li>{@code Cache-Control}</li>
      *   <li>{@code Content-Language}</li>
      *   <li>{@code Content-Type}</li>
      *   <li>{@code Expires}</li>

File: core/src/test/java/com/linecorp/armeria/client/retry/FibonacciBackoffTest.java
Patch:
@@ -51,7 +51,7 @@ void testOverflow() {
     }
 
     @Test
-    void testContraintInitialDelay() {
+    void testConstraintInitialDelay() {
         assertThatThrownBy(() -> new FibonacciBackoff(-5, 120))
                 .isInstanceOf(IllegalArgumentException.class);
     }

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceResponseConverterTest.java
Patch:
@@ -359,7 +359,7 @@ public <T> HttpResult<T> generic() {
                 public void header() {}
 
                 @Get("/header-overwrite")
-                @AdditionalHeader(name = "header_name_1", value = "header_value_unchaged")
+                @AdditionalHeader(name = "header_name_1", value = "header_value_unchanged")
                 public HttpResponse headerOverwrite() {
                     return HttpResponse.of(ResponseHeaders.of(HttpStatus.OK,
                                                               HttpHeaderNames.of("header_name_1"),

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceTest.java
Patch:
@@ -689,7 +689,7 @@ public void testAnnotatedHttpService() throws Exception {
             testBody(hc, get("/1/path/req/sync/1"), "String[/1/path/req/sync/1]");
 
             // Illegal parameter.
-            testStatusCode(hc, get("/1/int/fourty-two"), 400);
+            testStatusCode(hc, get("/1/int/forty-two"), 400);
             // Without parameter (non-existing url).
             testStatusCode(hc, post("/1/long/"), 404);
             // Not-mapped HTTP method (Post).
@@ -705,7 +705,7 @@ public void testAnnotatedHttpService() throws Exception {
             testBody(hc, get("/2/boolean/true"), "String[true]");
 
             // Illegal parameter.
-            testStatusCode(hc, get("/2/int/fourty-two"), 400);
+            testStatusCode(hc, get("/2/int/forty-two"), 400);
             // Without parameter (non-existing url).
             testStatusCode(hc, post("/2/long/"), 404);
             // Not-mapped HTTP method (Post).

File: grpc/src/main/java/com/linecorp/armeria/internal/grpc/TransportStatusListener.java
Patch:
@@ -20,7 +20,7 @@
 import io.grpc.Status;
 
 /**
- * A listener of gRPC {@link Status}s. Any errors occuring within the armeria will be returned to gRPC business
+ * A listener of gRPC {@link Status}s. Any errors occurring within the armeria will be returned to gRPC business
  * logic through this listener, and for clients the final response {@link Status} is also returned.
  */
 public interface TransportStatusListener {

File: retrofit2/src/test/java/com/linecorp/armeria/client/retrofit2/StreamingCallSubscriberTest.java
Patch:
@@ -140,7 +140,7 @@ public void dataIsIgnoredAfterTrailers() throws Exception {
 
         await().untilAsserted(() -> assertThat(callback.callbackCallingCount).isEqualTo(1));
 
-        // TODO(minwoox) Remove after we can retreive trailers.
+        // TODO(minwoox) Remove after we can retrieve trailers.
         TimeUnit.SECONDS.sleep(2);
 
         assertThat(callback.response.header("foo")).isNull(); // Currently, there's no way to retrieve trailers.

File: saml/src/test/java/com/linecorp/armeria/server/saml/SamlServiceProviderTest.java
Patch:
@@ -528,8 +528,8 @@ private static LogoutRequest getLogoutRequest(String destination, String issuerI
     }
 
     private AggregatedHttpResponse sendViaHttpPostBindingProtocol(
-            String path, String paramName, SignableSAMLObject sinableObj) throws Exception {
-        final String encoded = toSignedBase64(sinableObj, idpCredential, signatureAlgorithm);
+            String path, String paramName, SignableSAMLObject signableObj) throws Exception {
+        final String encoded = toSignedBase64(signableObj, idpCredential, signatureAlgorithm);
         final QueryStringEncoder encoder = new QueryStringEncoder("/");
         encoder.addParam(paramName, encoded);
 

File: core/src/main/java/com/linecorp/armeria/client/HttpClient.java
Patch:
@@ -26,11 +26,12 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.util.Unwrappable;
 
 /**
  * An HTTP client.
  */
-public interface HttpClient extends ClientBuilderParams {
+public interface HttpClient extends ClientBuilderParams, Unwrappable {
 
     /**
      * Creates a new HTTP client using the {@link ClientFactory#DEFAULT} and the {@link ClientOptions#DEFAULT}.

File: thrift/src/main/java/com/linecorp/armeria/client/thrift/THttpClient.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.linecorp.armeria.client.ClientBuilderParams;
 import com.linecorp.armeria.common.RpcResponse;
+import com.linecorp.armeria.common.util.Unwrappable;
 
 /**
  * A generic Thrift-over-HTTP client.
@@ -36,7 +37,7 @@
  * client.execute("/foo", FooService.Iface.class, "foo", "arg1", "arg2", ...);
  * }</pre>
  */
-public interface THttpClient extends ClientBuilderParams {
+public interface THttpClient extends Unwrappable, ClientBuilderParams {
     /**
      * Executes the specified Thrift call.
      *

File: core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/HttpHealthCheckedEndpointGroupLongPollingTest.java
Patch:
@@ -41,6 +41,7 @@
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.logging.RequestLog;
+import com.linecorp.armeria.common.logging.RequestLogAvailability;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.healthcheck.HealthCheckService;
 import com.linecorp.armeria.server.healthcheck.SettableHealthChecker;
@@ -226,7 +227,7 @@ private HealthCheckedEndpointGroup build(HealthCheckedEndpointGroupBuilder build
                 // Record when health check requests were sent.
                 final Queue<RequestLog> healthCheckRequestLogs = this.healthCheckRequestLogs;
                 if (healthCheckRequestLogs != null) {
-                    healthCheckRequestLogs.add(ctx.log());
+                    ctx.log().addListener(healthCheckRequestLogs::add, RequestLogAvailability.COMPLETE);
                 }
                 return delegate.execute(ctx, req);
             });

File: benchmarks/src/jmh/java/com/linecorp/armeria/core/client/endpoint/DnsEndpointGroupBenchmark.java
Patch:
@@ -56,7 +56,7 @@ public void stopServer() {
     public void setUp() {
         endpointGroup = HealthCheckedEndpointGroup.of(
                 DnsAddressEndpointGroup.of("localhost",
-                                           server.activePort().get().localAddress().getPort()), "/health");
+                                           server.activeLocalPort()), "/health");
     }
 
     @TearDown(Level.Invocation)

File: core/src/test/java/com/linecorp/armeria/server/healthcheck/HttpHealthCheckServiceTest.java
Patch:
@@ -116,7 +116,7 @@ public void testGet() throws Exception {
         try {
             server.start().join();
 
-            final int port = server.activePort().get().localAddress().getPort();
+            final int port = server.activeLocalPort();
             try (Socket s = new Socket(NetUtil.LOCALHOST, port)) {
                 s.setSoTimeout(10000);
                 final InputStream in = s.getInputStream();
@@ -143,7 +143,7 @@ public void testHead() throws Exception {
         try {
             server.start().join();
 
-            final int port = server.activePort().get().localAddress().getPort();
+            final int port = server.activeLocalPort();
             try (Socket s = new Socket(NetUtil.LOCALHOST, port)) {
                 s.setSoTimeout(10000);
                 final InputStream in = s.getInputStream();

File: examples/annotated-http-service/src/test/java/example/armeria/server/annotated/AnnotatedHttpServiceTest.java
Patch:
@@ -28,7 +28,7 @@ public class AnnotatedHttpServiceTest {
     public static void beforeClass() {
         server = newServer(0);
         server.start().join();
-        client = HttpClient.of("http://127.0.0.1:" + server.activePort().get().localAddress().getPort());
+        client = HttpClient.of("http://127.0.0.1:" + server.activeLocalPort());
     }
 
     @AfterClass

File: examples/grpc-service/src/test/java/example/armeria/grpc/HelloServiceTest.java
Patch:
@@ -47,7 +47,7 @@ public static void afterClass() {
     }
 
     private static String uri() {
-        return "gproto+http://127.0.0.1:" + server.activePort().get().localAddress().getPort() + '/';
+        return "gproto+http://127.0.0.1:" + server.activeLocalPort() + '/';
     }
 
     @Test

File: examples/server-sent-events/src/test/java/example/armeria/server/sse/MainTest.java
Patch:
@@ -33,7 +33,7 @@ public static void beforeClass() throws Exception {
         server = Main.newServer(0, 0,
                                 Duration.ofMillis(200), 5, () -> Long.toString(sequence.getAndIncrement()));
         server.start().join();
-        client = HttpClient.of("http://127.0.0.1:" + server.activePort().get().localAddress().getPort());
+        client = HttpClient.of("http://127.0.0.1:" + server.activeLocalPort());
     }
 
     @AfterClass

File: examples/spring-boot-minimal/src/test/java/example/springframework/boot/minimal/HelloApplicationIntegrationTest.java
Patch:
@@ -30,7 +30,7 @@ public class HelloApplicationIntegrationTest {
 
     @Before
     public void setup() {
-        client = HttpClient.of("http://localhost:" + server.activePort().get().localAddress().getPort());
+        client = HttpClient.of("http://localhost:" + server.activeLocalPort());
     }
 
     @Test

File: examples/spring-boot-tomcat/src/test/java/example/springframework/boot/tomcat/HelloIntegrationTest.java
Patch:
@@ -36,7 +36,7 @@ public class HelloIntegrationTest {
     @Before
     public void initClient() {
         if (client == null) {
-            client = HttpClient.of("http://127.0.0.1:" + server.activePort().get().localAddress().getPort());
+            client = HttpClient.of("http://127.0.0.1:" + server.activeLocalPort());
         }
     }
 

File: examples/static-files/src/test/java/example/armeria/server/files/MainTest.java
Patch:
@@ -21,7 +21,7 @@ public class MainTest {
     public static void beforeClass() throws Exception {
         server = Main.newServer(0, 0);
         server.start().join();
-        client = HttpClient.of("http://127.0.0.1:" + server.activePort().get().localAddress().getPort());
+        client = HttpClient.of("http://127.0.0.1:" + server.activeLocalPort());
     }
 
     @AfterClass

File: spring/boot-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java
Patch:
@@ -102,7 +102,7 @@ public void setUp() {
     }
 
     private String newUrl(String scheme) {
-        final int port = server.activePort().get().localAddress().getPort();
+        final int port = server.activeLocalPort();
         return scheme + "://127.0.0.1:" + port;
     }
 

File: spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationTest.java
Patch:
@@ -189,7 +189,7 @@ public void hello(HelloRequest req, StreamObserver<HelloReply> responseObserver)
     private Server server;
 
     private String newUrl(String scheme) {
-        final int port = server.activePort().get().localAddress().getPort();
+        final int port = server.activeLocalPort();
         return scheme + "://127.0.0.1:" + port;
     }
 

File: spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationWithoutMeterTest.java
Patch:
@@ -61,7 +61,7 @@ public static class NoMeterTestConfiguration {
     private Server server;
 
     private String newUrl(String scheme) {
-        final int port = server.activePort().get().localAddress().getPort();
+        final int port = server.activeLocalPort();
         return scheme + "://127.0.0.1:" + port;
     }
 

File: core/src/main/java/com/linecorp/armeria/client/endpoint/DynamicEndpointGroup.java
Patch:
@@ -56,7 +56,7 @@ protected final void addEndpoint(Endpoint e) {
         final List<Endpoint> newEndpoints;
         endpointsLock.lock();
         try {
-            List<Endpoint> newEndpointsUnsorted = Lists.newArrayList(endpoints);
+            final List<Endpoint> newEndpointsUnsorted = Lists.newArrayList(endpoints);
             newEndpointsUnsorted.add(e);
             endpoints = newEndpoints = ImmutableList.sortedCopyOf(newEndpointsUnsorted);
         } finally {

File: core/src/main/java/com/linecorp/armeria/client/UserClient.java
Patch:
@@ -125,13 +125,14 @@ protected final Endpoint endpoint() {
      */
     protected final O execute(HttpMethod method, String path, @Nullable String query, @Nullable String fragment,
                               I req, BiFunction<ClientRequestContext, Throwable, O> fallback) {
-        return execute(null, method, path, query, fragment, req, fallback);
+        return execute(null, endpoint, method, path, query, fragment, req, fallback);
     }
 
     /**
      * Executes the specified {@link Request} via {@link #delegate()}.
      *
      * @param eventLoop the {@link EventLoop} to execute the {@link Request}
+     * @param endpoint the {@link Endpoint} of the {@link Request}
      * @param method the method of the {@link Request}
      * @param path the path part of the {@link Request} URI
      * @param query the query part of the {@link Request} URI
@@ -140,7 +141,7 @@ protected final O execute(HttpMethod method, String path, @Nullable String query
      * @param fallback the fallback response {@link BiFunction} to use when
      *                 {@link Client#execute(ClientRequestContext, Request)} of {@link #delegate()} throws
      */
-    protected final O execute(@Nullable EventLoop eventLoop,
+    protected final O execute(@Nullable EventLoop eventLoop, Endpoint endpoint,
                               HttpMethod method, String path, @Nullable String query, @Nullable String fragment,
                               I req, BiFunction<ClientRequestContext, Throwable, O> fallback) {
         final DefaultClientRequestContext ctx;

File: core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java
Patch:
@@ -89,7 +89,7 @@ HttpResponseWrapper addResponse(
 
     private void onWrapperCompleted(HttpResponseWrapper resWrapper, @Nullable Throwable cause) {
         // Cancel timeout future and abort the request if it exists.
-        resWrapper.onSubscriptionCancelled();
+        resWrapper.onSubscriptionCancelled(cause);
 
         if (cause != null) {
             // Disconnect when the response has been closed with an exception because there's no way

File: core/src/main/java/com/linecorp/armeria/client/Http2ResponseDecoder.java
Patch:
@@ -88,7 +88,7 @@ HttpResponseWrapper addResponse(
 
     private void onWrapperCompleted(HttpResponseWrapper resWrapper, int id, @Nullable Throwable cause) {
         // Cancel timeout future and abort the request if it exists.
-        resWrapper.onSubscriptionCancelled();
+        resWrapper.onSubscriptionCancelled(cause);
 
         if (cause != null) {
             // We are not closing the connection but just send a RST_STREAM,

File: core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/HttpHealthCheckedEndpointGroupTest.java
Patch:
@@ -58,7 +58,7 @@ protected void configure(ServerBuilder sb) throws Exception {
             sb.http(0);
             sb.https(0);
             sb.tlsSelfSigned();
-            sb.service(HEALTH_CHECK_PATH, HealthCheckService.of());
+            sb.service(HEALTH_CHECK_PATH, HealthCheckService.builder().longPolling(0).build());
         }
     }
 

File: brave/src/test/java/com/linecorp/armeria/common/brave/RequestContextCurrentTraceContextTest.java
Patch:
@@ -97,10 +97,10 @@ public void get_returnsNullWhenCurrentRequestContext_hasNoTraceAttribute() {
     }
 
     @Test
-    public void newScope_doesNothingWhenNoCurrentRequestContext() {
+    public void newScope_appliesWhenNoCurrentRequestContext() {
         try (Scope traceContextScope = currentTraceContext.newScope(traceContext)) {
-            assertThat(traceContextScope).hasToString("IncompleteConfigurationScope");
-            assertThat(currentTraceContext.get()).isNull();
+            assertThat(traceContextScope).hasToString("ThreadLocalScope");
+            assertThat(currentTraceContext.get()).isEqualTo(traceContext);
         }
     }
 

File: benchmarks/src/jmh/java/com/linecorp/armeria/core/client/endpoint/DnsEndpointGroupBenchmark.java
Patch:
@@ -24,7 +24,7 @@
 import org.openjdk.jmh.annotations.TearDown;
 
 import com.linecorp.armeria.client.endpoint.dns.DnsAddressEndpointGroup;
-import com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroup;
+import com.linecorp.armeria.client.endpoint.healthcheck.HealthCheckedEndpointGroup;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
@@ -37,7 +37,7 @@ public class DnsEndpointGroupBenchmark {
     private static final AggregatedHttpResponse OK = AggregatedHttpResponse.of(HttpStatus.OK);
 
     private Server server;
-    private HttpHealthCheckedEndpointGroup endpointGroup;
+    private HealthCheckedEndpointGroup endpointGroup;
 
     @Setup(Level.Trial)
     public void startServer() {
@@ -54,7 +54,7 @@ public void stopServer() {
 
     @Setup(Level.Invocation)
     public void setUp() {
-        endpointGroup = HttpHealthCheckedEndpointGroup.of(
+        endpointGroup = HealthCheckedEndpointGroup.of(
                 DnsAddressEndpointGroup.of("localhost",
                                            server.activePort().get().localAddress().getPort()), "/health");
     }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/package-info.java
Patch:
@@ -15,7 +15,8 @@
  */
 
 /**
- * {@link com.linecorp.armeria.client.endpoint.healthcheck.HealthCheckedEndpointGroup} groups.
+ * Filters out unhealthy {@link com.linecorp.armeria.client.Endpoint}s from an existing
+ * {@link com.linecorp.armeria.client.endpoint.EndpointGroup} by sending health check requests.
  */
 @NonNullByDefault
 package com.linecorp.armeria.client.endpoint.healthcheck;

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerHttpClientTest.java
Patch:
@@ -154,7 +154,7 @@ public void onEventCountUpdated(String circuitBreakerName, EventCount eventCount
 
         final CircuitBreakerMapping mapping = (ctx, req) -> circuitBreaker;
         final HttpClient client = new HttpClientBuilder(server.uri("/"))
-                .decorator(builder.circuitBreakerMapping(mapping).newDecorator())
+                .decorator(builder.mapping(mapping).newDecorator())
                 .build();
 
         ticker.advance(Duration.ofMillis(1).toNanos());

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java
Patch:
@@ -256,9 +256,10 @@ protected static int getTotalAttempts(ClientRequestContext ctx) {
      * Creates a new derived {@link ClientRequestContext}, replacing the {@link Request} with {@code req}.
      * If {@link ClientRequestContext#endpointSelector()} exists, a new {@link Endpoint} will be selected.
      */
-    protected static ClientRequestContext newDerivedContext(ClientRequestContext ctx, Request req) {
+    protected static ClientRequestContext newDerivedContext(ClientRequestContext ctx,
+                                                            Request req, int totalAttempts) {
         final EndpointSelector endpointSelector = ctx.endpointSelector();
-        if (endpointSelector != null) {
+        if (endpointSelector != null && totalAttempts > 1) {
             return ctx.newDerivedContext(req, endpointSelector.select(ctx));
         } else {
             return ctx.newDerivedContext(req);

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingHttpClient.java
Patch:
@@ -172,7 +172,7 @@ private void doExecute0(ClientRequestContext ctx, HttpRequestDuplicator rootReqD
             duplicateReq = rootReqDuplicator.duplicateStream(newHeaders.build());
         }
 
-        final ClientRequestContext derivedCtx = newDerivedContext(ctx, duplicateReq);
+        final ClientRequestContext derivedCtx = newDerivedContext(ctx, duplicateReq, totalAttempts);
         ctx.logBuilder().addChild(derivedCtx.log());
 
         final HttpResponse response = executeWithFallback(delegate(), derivedCtx,

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java
Patch:
@@ -101,10 +101,10 @@ private void doExecute0(ClientRequestContext ctx, RpcRequest req,
             return;
         }
 
-        final ClientRequestContext derivedCtx = newDerivedContext(ctx, req);
+        final int totalAttempts = getTotalAttempts(ctx);
+        final ClientRequestContext derivedCtx = newDerivedContext(ctx, req, totalAttempts);
         ctx.logBuilder().addChild(derivedCtx.log());
 
-        final int totalAttempts = getTotalAttempts(ctx);
         if (totalAttempts > 1) {
             derivedCtx.setAdditionalRequestHeader(ARMERIA_RETRY_COUNT, Integer.toString(totalAttempts - 1));
         }

File: core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java
Patch:
@@ -162,7 +162,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                         }
 
                         res.scheduleTimeout(channel().eventLoop());
-                        res.write(ArmeriaHttpUtil.toArmeria(nettyRes));
+                        res.tryWrite(ArmeriaHttpUtil.toArmeria(nettyRes));
                     } else {
                         failWithUnexpectedMessageType(ctx, msg);
                     }
@@ -192,7 +192,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                                 fail(ctx, ContentTooLargeException.get());
                                 return;
                             } else {
-                                res.write(HttpData.wrap(data.retain()));
+                                res.tryWrite(HttpData.wrap(data.retain()));
                             }
                         }
 
@@ -206,7 +206,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
 
                             final HttpHeaders trailingHeaders = ((LastHttpContent) msg).trailingHeaders();
                             if (!trailingHeaders.isEmpty()) {
-                                res.write(ArmeriaHttpUtil.toArmeria(trailingHeaders));
+                                res.tryWrite(ArmeriaHttpUtil.toArmeria(trailingHeaders));
                             }
 
                             res.close();

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/UnaryGrpcClient.java
Patch:
@@ -39,6 +39,7 @@
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufHolder;
 import io.netty.buffer.Unpooled;
+import io.netty.handler.codec.http.HttpHeaderValues;
 
 /**
  * A {@link UnaryGrpcClient} can be used to make requests to a gRPC server without depending on gRPC stubs.
@@ -79,7 +80,8 @@ public UnaryGrpcClient(HttpClient httpClient) {
     public CompletableFuture<byte[]> execute(String uri, byte[] payload) {
         final HttpRequest request = HttpRequest.of(
                 RequestHeaders.of(HttpMethod.POST, uri,
-                                  HttpHeaderNames.CONTENT_TYPE, "application/grpc+proto"),
+                                  HttpHeaderNames.CONTENT_TYPE, "application/grpc+proto",
+                                  HttpHeaderNames.TE, HttpHeaderValues.TRAILERS),
                 HttpData.wrap(payload));
         return httpClient.execute(request).aggregate()
                          .thenApply(msg -> {

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaChannel.java
Patch:
@@ -50,6 +50,7 @@
 import io.grpc.MethodDescriptor;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.netty.channel.EventLoop;
+import io.netty.handler.codec.http.HttpHeaderValues;
 
 /**
  * A {@link Channel} backed by an armeria {@link Client}. Stores the {@link ClientBuilderParams} and other
@@ -97,7 +98,8 @@ public <I, O> ClientCall<I, O> newCall(
             MethodDescriptor<I, O> method, CallOptions callOptions) {
         final HttpRequestWriter req = HttpRequest.streaming(
                 RequestHeaders.of(HttpMethod.POST, uri().getPath() + method.getFullMethodName(),
-                                  HttpHeaderNames.CONTENT_TYPE, serializationFormat.mediaType()));
+                                  HttpHeaderNames.CONTENT_TYPE, serializationFormat.mediaType(),
+                                  HttpHeaderNames.TE, HttpHeaderValues.TRAILERS));
         final DefaultClientRequestContext ctx = newContext(HttpMethod.POST, req);
         ctx.logBuilder().serializationFormat(serializationFormat);
         ctx.logBuilder().deferRequestContent();

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingHttpClient.java
Patch:
@@ -136,7 +136,7 @@ public final class RetryingHttpClient extends RetryingClient<HttpRequest, HttpRe
     protected HttpResponse doExecute(ClientRequestContext ctx, HttpRequest req) throws Exception {
         final boolean hasInitialAuthority = !isNullOrEmpty(req.headers().authority());
         final CompletableFuture<HttpResponse> responseFuture = new CompletableFuture<>();
-        final HttpResponse res = HttpResponse.from(responseFuture);
+        final HttpResponse res = HttpResponse.from(responseFuture, ctx.eventLoop());
         final HttpRequestDuplicator reqDuplicator = new HttpRequestDuplicator(req, 0, ctx.eventLoop());
         doExecute0(ctx, reqDuplicator, req, res, responseFuture, hasInitialAuthority);
         return res;

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/UnaryGrpcClient.java
Patch:
@@ -174,7 +174,7 @@ public void endOfStream() {
                                deframer.deframe(msg.content(), true);
                            }
                            return responseFuture;
-                       }));
+                       }), ctx.eventLoop());
         }
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroup.java
Patch:
@@ -91,6 +91,8 @@ protected HealthCheckedEndpointGroup(ClientFactory clientFactory,
     protected void init() {
         checkState(scheduledCheck == null, "init() must only be called once.");
 
+        delegate.initialEndpointsFuture().join();
+
         checkAndUpdateHealthyServers().join();
         scheduleCheckAndUpdateHealthyServers();
     }

File: brave/src/main/java/com/linecorp/armeria/client/brave/ArmeriaHttpClientParser.java
Patch:
@@ -28,7 +28,7 @@
 
 /**
  * Default implementation of {@link HttpClientParser}.
- * This parser add some custom tags and overwrite the name of span if {@link RequestLog#requestContent()}
+ * This parser adds some custom tags and overwrites the name of span if {@link RequestLog#requestContent()}
  * is {@link RpcRequest}.
  * The following tags become available:
  * <ul>
@@ -39,7 +39,6 @@
  *   <li>address.remote</li>
  *   <li>address.local</li>
  * </ul>
- * User can extend this class or implement own {@link HttpClientParser}.
  */
 final class ArmeriaHttpClientParser extends HttpClientParser {
 

File: brave/src/main/java/com/linecorp/armeria/server/brave/ArmeriaHttpServerParser.java
Patch:
@@ -28,7 +28,7 @@
 
 /**
  * Default implementation of {@link HttpServerParser}.
- * This parser add some custom tags and overwrite the name of span if {@link RequestLog#requestContent()}
+ * This parser adds some custom tags and overwrites the name of span if {@link RequestLog#requestContent()}
  * is {@link RpcRequest}.
  * The following tags become available:
  * <ul>
@@ -39,7 +39,6 @@
  *   <li>address.remote</li>
  *   <li>address.local</li>
  * </ul>
- * User can extend this class or implement own {@link HttpServerParser}.
  */
 final class ArmeriaHttpServerParser extends HttpServerParser {
 

File: brave/src/main/java/com/linecorp/armeria/internal/brave/SpanContextUtil.java
Patch:
@@ -40,7 +40,7 @@ public static void closeSpan(Span span, RequestLog log) {
         span.finish(wallTimeMicros(log, log.responseEndTimeNanos()));
     }
 
-    static long wallTimeMicros(RequestLog log, long timeNanos) {
+    public static long wallTimeMicros(RequestLog log, long timeNanos) {
         final long relativeTimeNanos = timeNanos - log.requestStartTimeNanos();
         return log.requestStartTimeMicros() + TimeUnit.NANOSECONDS.toMicros(relativeTimeNanos);
     }

File: core/src/main/java/com/linecorp/armeria/server/Route.java
Patch:
@@ -92,8 +92,8 @@ static RouteBuilder builder() {
      *
      * {@link RoutePathType#REGEX} has only one path that represents it. e.g, {@code [ "^/(?<foo>.*)$" ]}
      *
-     * <p>{@link RoutePathType#REGEX_WITH_PREFIX} has two paths. The first one is the prefix and the second
-     * one is the regex. e.g, {@code [ "/bar/", "^/(?<foo>.*)$" ]}
+     * <p>{@link RoutePathType#REGEX_WITH_PREFIX} has two paths. The first one is the regex and the second
+     * one is the path. e.g, {@code [ "^/(?<foo>.*)$", "/bar/" ]}
      */
     List<String> paths();
 

File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContextBuilder.java
Patch:
@@ -106,8 +106,9 @@ public ClientRequestContext build() {
         }
 
         final DefaultClientRequestContext ctx = new DefaultClientRequestContext(
-                eventLoop(), meterRegistry(), sessionProtocol(), endpoint,
+                eventLoop(), meterRegistry(), sessionProtocol(),
                 method(), path(), query(), fragment, options, request());
+        ctx.init(endpoint);
 
         if (isRequestStartTimeSet()) {
             ctx.logBuilder().startRequest(fakeChannel(), sessionProtocol(), sslSession(),

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/KeyedCircuitBreakerMapping.java
Patch:
@@ -85,7 +85,9 @@ public interface KeySelector<K> {
         KeySelector<String> HOST =
                 (ctx, req) -> {
                     final Endpoint endpoint = ctx.endpoint();
-                    if (endpoint.isGroup()) {
+                    if (endpoint == null) {
+                        return "UNKNOWN";
+                    } else if (endpoint.isGroup()) {
                         return endpoint.authority();
                     } else {
                         final String ipAddr = endpoint.ipAddr();

File: core/src/main/java/com/linecorp/armeria/common/HttpHeadersBase.java
Patch:
@@ -931,7 +931,9 @@ private static Long toTimeMillis(@Nullable String v) {
             @SuppressWarnings("UseOfObsoleteDateTimeApi")
             final Date date = DateFormatter.parseHttpDate(v);
             return date != null ? date.getTime() : null;
-        } catch (RuntimeException ignore) {
+        } catch (Exception ignore) {
+            // `parseHttpDate()` can raise an exception rather than returning `null`
+            // when the given value has more than 64 characters.
             return null;
         }
     }

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientAuthorityHeaderTest.java
Patch:
@@ -38,6 +38,7 @@
 import com.linecorp.armeria.server.AbstractHttpService;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.ServiceRequestContext;
+import com.linecorp.armeria.server.logging.LoggingService;
 import com.linecorp.armeria.testing.junit4.server.ServerRule;
 
 public class RetryingClientAuthorityHeaderTest {
@@ -53,6 +54,7 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) throws
                     return HttpResponse.of(SERVICE_UNAVAILABLE);
                 }
             });
+            sb.decorator(LoggingService.newDecorator());
         }
     };
 
@@ -67,6 +69,7 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) throws
                     return HttpResponse.of(req.headers().authority());
                 }
             });
+            sb.decorator(LoggingService.newDecorator());
         }
     };
 

File: grpc/src/main/java/com/linecorp/armeria/internal/grpc/GrpcStatus.java
Patch:
@@ -39,6 +39,7 @@
 
 import com.google.common.base.Strings;
 
+import com.linecorp.armeria.client.UnprocessedRequestException;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.TimeoutException;
 import com.linecorp.armeria.common.grpc.StackTraceElementProto;
@@ -88,7 +89,7 @@ public static Status fromThrowable(Throwable t) {
             // instead.
             return Status.UNKNOWN.withCause(t);
         }
-        if (t instanceof IOException) {
+        if (t instanceof UnprocessedRequestException || t instanceof IOException) {
             return Status.UNAVAILABLE.withCause(t);
         }
         if (t instanceof Http2Exception) {

File: logback/src/main/java/com/linecorp/armeria/common/logback/RequestContextExporter.java
Patch:
@@ -267,7 +267,9 @@ private static void exportAuthority(Map<String, String> out, RequestContext ctx,
         } else {
             final ClientRequestContext cCtx = (ClientRequestContext) ctx;
             final Endpoint endpoint = cCtx.endpoint();
-            if (endpoint.isGroup()) {
+            if (endpoint == null) {
+                authority = "UNKNOWN";
+            } else if (endpoint.isGroup()) {
                 authority = endpoint.authority();
             } else {
                 final int defaultPort = cCtx.sessionProtocol().defaultPort();

File: brave/src/main/java/com/linecorp/armeria/client/brave/BraveClient.java
Patch:
@@ -31,7 +31,7 @@
 
 import com.linecorp.armeria.client.Client;
 import com.linecorp.armeria.client.ClientRequestContext;
-import com.linecorp.armeria.client.SimpleDecoratingClient;
+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.RequestHeadersBuilder;
@@ -53,7 +53,7 @@
  * Decorates a {@link Client} to trace outbound {@link HttpRequest}s using
  * <a href="https://github.com/openzipkin/brave">Brave</a>.
  */
-public final class BraveClient extends SimpleDecoratingClient<HttpRequest, HttpResponse> {
+public final class BraveClient extends SimpleDecoratingHttpClient {
 
     private static final Logger logger = LoggerFactory.getLogger(BraveClient.class);
 

File: brave/src/main/java/com/linecorp/armeria/server/brave/BraveService.java
Patch:
@@ -30,7 +30,7 @@
 import com.linecorp.armeria.internal.brave.TraceContextUtil;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
-import com.linecorp.armeria.server.SimpleDecoratingService;
+import com.linecorp.armeria.server.SimpleDecoratingHttpService;
 
 import brave.Span;
 import brave.Span.Kind;
@@ -44,7 +44,7 @@
  * Decorates a {@link Service} to trace inbound {@link HttpRequest}s using
  * <a href="https://github.com/openzipkin/brave">Brave</a>.
  */
-public final class BraveService extends SimpleDecoratingService<HttpRequest, HttpResponse> {
+public final class BraveService extends SimpleDecoratingHttpService {
 
     // TODO(minwoox) Add the variant which takes HttpTracing.
 

File: core/src/main/java/com/linecorp/armeria/client/SimpleDecoratingClient.java
Patch:
@@ -18,10 +18,9 @@
 
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.Response;
-import com.linecorp.armeria.server.Service;
 
 /**
- * Decorates a {@link Client}. Use {@link DecoratingClient} if your {@link Service} has different
+ * Decorates a {@link Client}. Use {@link DecoratingClient} if your {@link Client} has different
  * {@link Request} or {@link Response} type from the {@link Client} being decorated.
  *
  * @param <I> the {@link Request} type of the {@link Client} being decorated

File: core/src/main/java/com/linecorp/armeria/client/encoding/HttpDecodingClient.java
Patch:
@@ -27,7 +27,7 @@
 import com.linecorp.armeria.client.Client;
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.DecoratingClient;
-import com.linecorp.armeria.client.SimpleDecoratingClient;
+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
@@ -36,7 +36,7 @@
  * A {@link DecoratingClient} that requests and decodes HTTP encoding (e.g., gzip) that has been applied to the
  * content of a {@link HttpResponse}.
  */
-public final class HttpDecodingClient extends SimpleDecoratingClient<HttpRequest, HttpResponse> {
+public final class HttpDecodingClient extends SimpleDecoratingHttpClient {
 
     /**
      * Creates a new {@link HttpDecodingClient} decorator with the default encodings of 'gzip' and 'deflate'.

File: core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpService.java
Patch:
@@ -67,7 +67,7 @@
 import com.linecorp.armeria.server.Route;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
-import com.linecorp.armeria.server.SimpleDecoratingService;
+import com.linecorp.armeria.server.SimpleDecoratingHttpService;
 import com.linecorp.armeria.server.annotation.ByteArrayResponseConverterFunction;
 import com.linecorp.armeria.server.annotation.ExceptionHandlerFunction;
 import com.linecorp.armeria.server.annotation.ExceptionVerbosity;
@@ -362,8 +362,7 @@ private static CompletionStage<?> toCompletionStage(Object obj) {
      * {@link Exception} to be handled by {@link ExceptionHandlerFunction}s even if the exception is raised
      * from a decorator.
      */
-    private class ExceptionFilteredHttpResponseDecorator
-            extends SimpleDecoratingService<HttpRequest, HttpResponse> {
+    private class ExceptionFilteredHttpResponseDecorator extends SimpleDecoratingHttpService {
 
         ExceptionFilteredHttpResponseDecorator(Service<HttpRequest, HttpResponse> delegate) {
             super(delegate);

File: core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceFactory.java
Patch:
@@ -86,7 +86,7 @@
 import com.linecorp.armeria.server.Route;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
-import com.linecorp.armeria.server.SimpleDecoratingService;
+import com.linecorp.armeria.server.SimpleDecoratingHttpService;
 import com.linecorp.armeria.server.annotation.AdditionalHeader;
 import com.linecorp.armeria.server.annotation.AdditionalTrailer;
 import com.linecorp.armeria.server.annotation.ConsumeType;
@@ -362,7 +362,7 @@ private static AnnotatedHttpServiceElement create(String pathPrefix, Object obje
         if (methods.contains(HttpMethod.OPTIONS)) {
             initialDecorator = Function.identity();
         } else {
-            initialDecorator = delegate -> new SimpleDecoratingService<HttpRequest, HttpResponse>(delegate) {
+            initialDecorator = delegate -> new SimpleDecoratingHttpService(delegate) {
                 @Override
                 public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
                     if (req.method() == HttpMethod.OPTIONS) {

File: core/src/main/java/com/linecorp/armeria/server/auth/HttpAuthService.java
Patch:
@@ -30,14 +30,14 @@
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
-import com.linecorp.armeria.server.SimpleDecoratingService;
+import com.linecorp.armeria.server.SimpleDecoratingHttpService;
 
 /**
  * Decorates a {@link Service} to provide HTTP authorization functionality.
  *
  * @see HttpAuthServiceBuilder
  */
-public final class HttpAuthService extends SimpleDecoratingService<HttpRequest, HttpResponse> {
+public final class HttpAuthService extends SimpleDecoratingHttpService {
 
     static final Logger logger = LoggerFactory.getLogger(HttpAuthService.class);
 

File: core/src/main/java/com/linecorp/armeria/server/cors/CorsService.java
Patch:
@@ -35,7 +35,7 @@
 import com.linecorp.armeria.common.ResponseHeadersBuilder;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
-import com.linecorp.armeria.server.SimpleDecoratingService;
+import com.linecorp.armeria.server.SimpleDecoratingHttpService;
 
 /**
  * Decorates an HTTP {@link Service} to add the
@@ -44,7 +44,7 @@
  *
  * @see CorsServiceBuilder
  */
-public final class CorsService extends SimpleDecoratingService<HttpRequest, HttpResponse> {
+public final class CorsService extends SimpleDecoratingHttpService {
 
     private static final Logger logger = LoggerFactory.getLogger(CorsService.class);
 

File: core/src/main/java/com/linecorp/armeria/server/encoding/HttpEncodingService.java
Patch:
@@ -29,7 +29,7 @@
 import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
-import com.linecorp.armeria.server.SimpleDecoratingService;
+import com.linecorp.armeria.server.SimpleDecoratingHttpService;
 
 /**
  * Decorates a {@link Service} to apply HTTP encoding (e.g., gzip) to an {@link HttpService}.
@@ -41,8 +41,7 @@
  *     <li>the response either has no fixed content length or the length is larger than 1KB</li>
  * </ul>
  */
-public class HttpEncodingService
-        extends SimpleDecoratingService<HttpRequest, HttpResponse> {
+public class HttpEncodingService extends SimpleDecoratingHttpService {
 
     private static final Predicate<MediaType> DEFAULT_ENCODABLE_CONTENT_TYPE_PREDICATE =
             contentType -> Stream.of(MediaType.ANY_TEXT_TYPE,

File: core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java
Patch:
@@ -72,6 +72,7 @@
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
+import com.linecorp.armeria.server.SimpleDecoratingHttpService;
 import com.linecorp.armeria.server.SimpleDecoratingService;
 import com.linecorp.armeria.server.encoding.HttpEncodingService;
 import com.linecorp.armeria.testing.junit.server.ServerExtension;
@@ -124,7 +125,7 @@ public void onComplete() {
         }
     }
 
-    private static final class PoolAwareDecorator extends SimpleDecoratingService<HttpRequest, HttpResponse> {
+    private static final class PoolAwareDecorator extends SimpleDecoratingHttpService {
 
         private PoolAwareDecorator(Service<HttpRequest, HttpResponse> delegate) {
             super(delegate);

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientWithLoggingTest.java
Patch:
@@ -33,7 +33,7 @@
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.HttpClient;
 import com.linecorp.armeria.client.HttpClientBuilder;
-import com.linecorp.armeria.client.SimpleDecoratingClient;
+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
@@ -136,7 +136,7 @@ public void loggingThenRetrying() throws Exception {
 
     private Function<Client<HttpRequest, HttpResponse>, Client<HttpRequest, HttpResponse>>
     loggingDecorator() {
-        return delegate -> new SimpleDecoratingClient<HttpRequest, HttpResponse>(delegate) {
+        return delegate -> new SimpleDecoratingHttpClient(delegate) {
             @Override
             public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {
                 ctx.log().addListener(listener, RequestLogAvailability.REQUEST_END);

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceAnnotationAliasTest.java
Patch:
@@ -45,7 +45,7 @@
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
-import com.linecorp.armeria.server.SimpleDecoratingService;
+import com.linecorp.armeria.server.SimpleDecoratingHttpService;
 import com.linecorp.armeria.server.annotation.AdditionalHeader;
 import com.linecorp.armeria.server.annotation.AdditionalTrailer;
 import com.linecorp.armeria.server.annotation.Consumes;
@@ -188,7 +188,7 @@ static class MyDecorator3Factory implements DecoratorFactoryFunction<MyDecorator
         @Override
         public Function<Service<HttpRequest, HttpResponse>,
                 ? extends Service<HttpRequest, HttpResponse>> newDecorator(MyDecorator3 parameter) {
-            return delegate -> new SimpleDecoratingService<HttpRequest, HttpResponse>(delegate) {
+            return delegate -> new SimpleDecoratingHttpService(delegate) {
                 @Override
                 public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
                     appendAttribute(ctx, " (decorated-3)");

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceFactoryTest.java
Patch:
@@ -36,7 +36,7 @@
 import com.linecorp.armeria.server.DecoratingServiceFunction;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
-import com.linecorp.armeria.server.SimpleDecoratingService;
+import com.linecorp.armeria.server.SimpleDecoratingHttpService;
 import com.linecorp.armeria.server.annotation.Decorator;
 import com.linecorp.armeria.server.annotation.DecoratorFactory;
 import com.linecorp.armeria.server.annotation.DecoratorFactoryFunction;
@@ -184,7 +184,7 @@ static class UserDefinedRepeatableDecoratorFactory
         public Function<Service<HttpRequest, HttpResponse>,
                 ? extends Service<HttpRequest, HttpResponse>> newDecorator(
                 UserDefinedRepeatableDecorator parameter) {
-            return service -> new SimpleDecoratingService<HttpRequest, HttpResponse>(service) {
+            return service -> new SimpleDecoratingHttpService(service) {
                 @Override
                 public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
                     return service.serve(ctx, req);

File: core/src/test/java/com/linecorp/armeria/server/HttpServerStreamingTest.java
Patch:
@@ -116,7 +116,7 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) {
 
             final Function<Service<HttpRequest, HttpResponse>, Service<HttpRequest, HttpResponse>>
                     decorator =
-                    s -> new SimpleDecoratingService<HttpRequest, HttpResponse>(s) {
+                    s -> new SimpleDecoratingHttpService(s) {
                         @Override
                         public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
                             ctx.setMaxRequestLength(serverMaxRequestLength);

File: core/src/test/java/com/linecorp/armeria/server/HttpServerTest.java
Patch:
@@ -417,7 +417,7 @@ public boolean shouldCachePath(String path, @Nullable String query, Route route)
             sb.service("/cached-exact-path", (ctx, req) -> HttpResponse.of(HttpStatus.OK));
 
             final Function<Service<HttpRequest, HttpResponse>, Service<HttpRequest, HttpResponse>> decorator =
-                    s -> new SimpleDecoratingService<HttpRequest, HttpResponse>(s) {
+                    s -> new SimpleDecoratingHttpService(s) {
                         @Override
                         public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
                             pendingRequestLogs.incrementAndGet();

File: core/src/test/java/com/linecorp/armeria/server/ServerTest.java
Patch:
@@ -132,7 +132,7 @@ protected HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req) {
 
             // Disable request timeout for '/timeout-not' only.
             final Function<Service<HttpRequest, HttpResponse>, Service<HttpRequest, HttpResponse>> decorator =
-                    s -> new SimpleDecoratingService<HttpRequest, HttpResponse>(s) {
+                    s -> new SimpleDecoratingHttpService(s) {
                         @Override
                         public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
                             ctx.setRequestTimeoutMillis(

File: core/src/test/java/com/linecorp/armeria/server/ServiceTest.java
Patch:
@@ -79,7 +79,7 @@ private static void assertDecoration(
         return (Class<Service<?, ?>>) service.getClass();
     }
 
-    private static final class FooService implements Service<RpcRequest, RpcResponse> {
+    private static final class FooService implements RpcService {
 
         ServiceConfig cfg;
 
@@ -95,7 +95,7 @@ public RpcResponse serve(ServiceRequestContext ctx, RpcRequest req) throws Excep
         }
     }
 
-    public static class FooServiceDecorator extends SimpleDecoratingService<RpcRequest, RpcResponse> {
+    public static class FooServiceDecorator extends SimpleDecoratingRpcService {
         public FooServiceDecorator(Service<RpcRequest, RpcResponse> delegate) {
             super(delegate);
         }

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/UnaryGrpcClient.java
Patch:
@@ -24,7 +24,7 @@
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.Clients;
 import com.linecorp.armeria.client.HttpClient;
-import com.linecorp.armeria.client.SimpleDecoratingClient;
+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpMethod;
@@ -104,7 +104,7 @@ public CompletableFuture<byte[]> execute(String uri, byte[] payload) {
                          });
     }
 
-    private static final class GrpcFramingDecorator extends SimpleDecoratingClient<HttpRequest, HttpResponse> {
+    private static final class GrpcFramingDecorator extends SimpleDecoratingHttpClient {
 
         private GrpcFramingDecorator(Client<HttpRequest, HttpResponse> delegate) {
             super(delegate);

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/UnframedGrpcService.java
Patch:
@@ -47,7 +47,7 @@
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.ServiceWithRoutes;
-import com.linecorp.armeria.server.SimpleDecoratingService;
+import com.linecorp.armeria.server.SimpleDecoratingHttpService;
 import com.linecorp.armeria.server.encoding.HttpEncodingService;
 import com.linecorp.armeria.unsafe.ByteBufHttpData;
 
@@ -59,7 +59,7 @@
 import io.netty.buffer.ByteBufHolder;
 
 /**
- * A {@link SimpleDecoratingService} which allows {@link GrpcService} to serve requests without the framing
+ * A {@link SimpleDecoratingHttpService} which allows {@link GrpcService} to serve requests without the framing
  * specified by the gRPC wire protocol. This can be useful for serving both legacy systems and gRPC clients with
  * the same business logic.
  *
@@ -73,7 +73,7 @@
  *     </li>
  * </ul>
  */
-class UnframedGrpcService extends SimpleDecoratingService<HttpRequest, HttpResponse>
+class UnframedGrpcService extends SimpleDecoratingHttpService
         implements ServiceWithRoutes<HttpRequest, HttpResponse> {
 
     private static final char LINE_SEPARATOR = '\n';

File: grpc/src/test/java/com/linecorp/armeria/internal/grpc/TestServiceImpl.java
Patch:
@@ -52,7 +52,7 @@
 import com.linecorp.armeria.protobuf.EmptyProtos.Empty;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
-import com.linecorp.armeria.server.SimpleDecoratingService;
+import com.linecorp.armeria.server.SimpleDecoratingHttpService;
 
 import io.grpc.Metadata;
 import io.grpc.Metadata.Key;
@@ -521,8 +521,7 @@ private static ByteString generatePayload(ByteString dataBuffer, int offset, int
         return payload;
     }
 
-    public static class EchoRequestHeadersInTrailers
-            extends SimpleDecoratingService<HttpRequest, HttpResponse> {
+    public static class EchoRequestHeadersInTrailers extends SimpleDecoratingHttpService {
 
         /**
          * Creates a new instance that decorates the specified {@link Service}.

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceServerTest.java
Patch:
@@ -59,7 +59,7 @@
 import com.linecorp.armeria.client.ClientFactoryBuilder;
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.HttpClient;
-import com.linecorp.armeria.client.SimpleDecoratingClient;
+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;
 import com.linecorp.armeria.client.grpc.GrpcClientOptions;
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.FilteredHttpResponse;
@@ -1026,7 +1026,7 @@ void json() throws Exception {
             final AtomicReference<byte[]> payload = new AtomicReference<>();
             final UnitTestServiceBlockingStub jsonStub =
                     new ClientBuilder(server.httpUri(GrpcSerializationFormats.JSON, "/"))
-                            .decorator(client -> new SimpleDecoratingClient<HttpRequest, HttpResponse>(client) {
+                            .decorator(client -> new SimpleDecoratingHttpClient(client) {
                                 @Override
                                 public HttpResponse execute(ClientRequestContext ctx, HttpRequest req)
                                         throws Exception {
@@ -1068,7 +1068,7 @@ void json_preservingFieldNames() throws Exception {
                     new ClientBuilder(server.httpUri(GrpcSerializationFormats.JSON, "/json-preserving/"))
                             .option(GrpcClientOptions.JSON_MARSHALLER_CUSTOMIZER.newValue(
                                     marshaller -> marshaller.preservingProtoFieldNames(true)))
-                            .decorator(client -> new SimpleDecoratingClient<HttpRequest, HttpResponse>(client) {
+                            .decorator(client -> new SimpleDecoratingHttpClient(client) {
                                 @Override
                                 public HttpResponse execute(ClientRequestContext ctx, HttpRequest req)
                                         throws Exception {

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlDecorator.java
Patch:
@@ -52,14 +52,14 @@
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceConfig;
 import com.linecorp.armeria.server.ServiceRequestContext;
-import com.linecorp.armeria.server.SimpleDecoratingService;
+import com.linecorp.armeria.server.SimpleDecoratingHttpService;
 import com.linecorp.armeria.server.auth.Authorizer;
 
 /**
  * A decorator which initiates an authentication request to the remote identity provider if the request is
  * not authenticated.
  */
-final class SamlDecorator extends SimpleDecoratingService<HttpRequest, HttpResponse> {
+final class SamlDecorator extends SimpleDecoratingHttpService {
     private static final Logger logger = LoggerFactory.getLogger(SamlDecorator.class);
 
     private final SamlServiceProvider sp;

File: thrift/src/main/java/com/linecorp/armeria/server/thrift/ThriftCallService.java
Patch:
@@ -40,6 +40,7 @@
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;
 import com.linecorp.armeria.internal.thrift.ThriftFunction;
+import com.linecorp.armeria.server.RpcService;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
@@ -48,7 +49,7 @@
  *
  * @see THttpService
  */
-public final class ThriftCallService implements Service<RpcRequest, RpcResponse> {
+public final class ThriftCallService implements RpcService {
 
     private static final Logger logger = LoggerFactory.getLogger(ThriftCallService.class);
 

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/AbstractThriftOverHttpTest.java
Patch:
@@ -53,7 +53,7 @@
 import com.linecorp.armeria.server.ServerPort;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
-import com.linecorp.armeria.server.SimpleDecoratingService;
+import com.linecorp.armeria.server.SimpleDecoratingHttpService;
 import com.linecorp.armeria.server.logging.LoggingService;
 import com.linecorp.armeria.service.test.thrift.main.HelloService;
 import com.linecorp.armeria.service.test.thrift.main.HelloService.AsyncIface;
@@ -138,7 +138,7 @@ protected String getResponse(String name) {
 
             final Function<Service<HttpRequest, HttpResponse>,
                     Service<HttpRequest, HttpResponse>> logCollectingDecorator =
-                    s -> new SimpleDecoratingService<HttpRequest, HttpResponse>(s) {
+                    s -> new SimpleDecoratingHttpService(s) {
                         @Override
                         public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
                             if (recordMessageLogs) {

File: zipkin/src/main/java/com/linecorp/armeria/client/tracing/HttpTracingClient.java
Patch:
@@ -32,7 +32,7 @@
 
 import com.linecorp.armeria.client.Client;
 import com.linecorp.armeria.client.ClientRequestContext;
-import com.linecorp.armeria.client.SimpleDecoratingClient;
+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;
 import com.linecorp.armeria.client.brave.BraveClient;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
@@ -61,7 +61,7 @@
  * @deprecated Use {@link BraveClient}.
  */
 @Deprecated
-public class HttpTracingClient extends SimpleDecoratingClient<HttpRequest, HttpResponse> {
+public class HttpTracingClient extends SimpleDecoratingHttpClient {
 
     private static final Logger logger = LoggerFactory.getLogger(HttpTracingClient.class);
 

File: zipkin/src/main/java/com/linecorp/armeria/server/tracing/HttpTracingService.java
Patch:
@@ -31,7 +31,7 @@
 import com.linecorp.armeria.internal.brave.SpanTags;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
-import com.linecorp.armeria.server.SimpleDecoratingService;
+import com.linecorp.armeria.server.SimpleDecoratingHttpService;
 import com.linecorp.armeria.server.brave.BraveService;
 
 import brave.Span;
@@ -52,7 +52,7 @@
  * @deprecated Use {@link BraveService}.
  */
 @Deprecated
-public class HttpTracingService extends SimpleDecoratingService<HttpRequest, HttpResponse> {
+public class HttpTracingService extends SimpleDecoratingHttpService {
 
     /**
      * Creates a new tracing {@link Service} decorator using the specified {@link Tracing} instance.

File: core/src/main/java/com/linecorp/armeria/server/annotation/ConsumesJson.java
Patch:
@@ -21,10 +21,10 @@
 import java.lang.annotation.Target;
 
 /**
- * An alias for {@code @Consumes("application/json; charset=utf-8")}.
+ * An alias for {@code @Consumes("application/json")}.
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ ElementType.TYPE, ElementType.METHOD })
-@Consumes("application/json; charset=utf-8")
+@Consumes("application/json")
 public @interface ConsumesJson {
 }

File: core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java
Patch:
@@ -394,12 +394,12 @@ private final class UpgradeRequestHandler extends ChannelInboundHandlerAdapter {
         }
 
         /**
-         * Sends the initial upgrade request, which is {@code "HEAD / HTTP/1.1"}.
+         * Sends the initial upgrade request, which is {@code "OPTIONS * HTTP/1.1"}.
          */
         @Override
         public void channelActive(ChannelHandlerContext ctx) throws Exception {
             final FullHttpRequest upgradeReq =
-                    new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.HEAD, "/");
+                    new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, "*");
 
             // Note: There's no need to fill Connection, Upgrade, and HTTP2-Settings headers here
             //       because they are filled by Http2ClientUpgradeCodec.

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java
Patch:
@@ -82,7 +82,8 @@ public class ArmeriaMessageFramer implements AutoCloseable {
     private final ByteBufAllocator alloc;
     private final int maxOutboundMessageSize;
 
-    private boolean messageCompression;
+    private boolean messageCompression = true;
+
     @Nullable
     private Compressor compressor;
     private boolean closed;

File: brave/src/main/java/com/linecorp/armeria/internal/brave/AsciiStringKeyFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 LINE Corporation
+ * Copyright 2019 LINE Corporation
  *
  * LINE Corporation licenses this file to you under the Apache License,
  * version 2.0 (the "License"); you may not use this file except in compliance
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.internal.tracing;
+package com.linecorp.armeria.internal.brave;
 
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;

File: brave/src/main/java/com/linecorp/armeria/internal/brave/SpanContextUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 LINE Corporation
+ * Copyright 2019 LINE Corporation
  *
  * LINE Corporation licenses this file to you under the Apache License,
  * version 2.0 (the "License"); you may not use this file except in compliance
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.internal.tracing;
+package com.linecorp.armeria.internal.brave;
 
 import java.util.concurrent.TimeUnit;
 
@@ -41,7 +41,7 @@ public static void closeSpan(Span span, RequestLog log) {
     }
 
     static long wallTimeMicros(RequestLog log, long timeNanos) {
-        long relativeTimeNanos = timeNanos - log.requestStartTimeNanos();
+        final long relativeTimeNanos = timeNanos - log.requestStartTimeNanos();
         return log.requestStartTimeMicros() + TimeUnit.NANOSECONDS.toMicros(relativeTimeNanos);
     }
 

File: brave/src/main/java/com/linecorp/armeria/internal/brave/SpanTags.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 LINE Corporation
+ * Copyright 2019 LINE Corporation
  *
  * LINE Corporation licenses this file to you under the Apache License,
  * version 2.0 (the "License"); you may not use this file except in compliance
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.internal.tracing;
+package com.linecorp.armeria.internal.brave;
 
 import java.net.SocketAddress;
 

File: brave/src/test/java/com/linecorp/armeria/internal/brave/SpanTagsTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.linecorp.armeria.internal.tracing;
+package com.linecorp.armeria.internal.brave;
 
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.eq;

File: core/src/main/java/com/linecorp/armeria/common/DefaultRpcRequest.java
Patch:
@@ -120,11 +120,11 @@ public boolean equals(Object obj) {
             return true;
         }
 
-        if (!(obj instanceof DefaultRpcRequest)) {
+        if (!(obj instanceof RpcRequest)) {
             return false;
         }
 
-        final DefaultRpcRequest that = (DefaultRpcRequest) obj;
+        final RpcRequest that = (RpcRequest) obj;
         return method().equals(that.method()) &&
                params().equals(that.params());
     }

File: zipkin/src/test/java/com/linecorp/armeria/it/tracing/HttpTracingIntegrationTest.java
Patch:
@@ -180,7 +180,8 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)
 
             sb.service("/timeout", decorate("service/timeout", THttpService.of(
                     // This service never calls the handler and will timeout.
-                    (AsyncIface) (name, resultHandler) -> {})));
+                    (AsyncIface) (name, resultHandler) -> {
+                    })));
         }
     };
 
@@ -227,7 +228,7 @@ private HelloService.AsyncIface newClient(String path) {
 
     private static Tracing newTracing(String name) {
         final CurrentTraceContext currentTraceContext =
-                RequestContextCurrentTraceContext.newBuilder()
+                RequestContextCurrentTraceContext.builder()
                                                  .addScopeDecorator(StrictScopeDecorator.create())
                                                  .build();
         return Tracing.newBuilder()

File: spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java
Patch:
@@ -66,11 +66,13 @@ public static class Port {
         /**
          * IP address to bind to. If not set, will bind to all addresses, e.g. {@code 0.0.0.0}.
          */
+        @Nullable
         private String ip;
 
         /**
          * Network interface to bind to. If not set, will bind to the first detected network interface.
          */
+        @Nullable
         private String iface;
 
         /**
@@ -81,6 +83,7 @@ public static class Port {
         /**
          * Protocol that will be used in this ip/iface and port.
          */
+        @Nullable
         private List<SessionProtocol> protocols;
 
         /**

File: core/src/main/java/com/linecorp/armeria/client/DefaultAddressResolverGroupFactory.java
Patch:
@@ -49,6 +49,7 @@ public AddressResolverGroup<InetSocketAddress> apply(EventLoopGroup eventLoopGro
         nameResolverBuilder.traceEnabled(true);
         customizers.forEach(customizer -> customizer.accept(nameResolverBuilder));
         nameResolverBuilder.channelType(TransportType.datagramChannelType(eventLoopGroup));
+        nameResolverBuilder.socketChannelType(TransportType.socketChannelType(eventLoopGroup));
         return new DnsAddressResolverGroup(nameResolverBuilder);
     }
 }

File: spring/boot-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java
Patch:
@@ -192,9 +192,9 @@ public void testMissingMediaType() throws Exception {
         final String loggerPath = "/internal/actuator/loggers/" + TEST_LOGGER_NAME;
         final AggregatedHttpResponse res =
                 client.execute(RequestHeaders.of(HttpMethod.POST, loggerPath),
-                               OBJECT_MAPPER.writeValueAsBytes(ImmutableMap.of("configuredLevel", "info")))
+                               OBJECT_MAPPER.writeValueAsBytes(ImmutableMap.of("configuredLevel", "debug")))
                       .aggregate().get();
-        assertThat(res.status()).isEqualTo(HttpStatus.UNSUPPORTED_MEDIA_TYPE);
+        assertThat(res.status()).isEqualTo(HttpStatus.NO_CONTENT);
     }
 
     @Test

File: core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotatedValueResolver.java
Patch:
@@ -1023,7 +1023,7 @@ private AnnotatedValueResolver build() {
                     }
 
                     shouldExist = false;
-                    defaultValue = getSpecifiedValue(aDefault.value()).get();
+                    defaultValue = getSpecifiedValue(aDefault.value()).orElse(null);
                 } else {
                     // Warn if @Default exists in an unsupported place.
                     final StringBuilder msg = new StringBuilder();

File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContextWrapper.java
Patch:
@@ -22,10 +22,9 @@
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.RequestContextWrapper;
-import com.linecorp.armeria.server.ServiceRequestContext;
 
 /**
- * Wraps an existing {@link ServiceRequestContext}.
+ * Wraps an existing {@link ClientRequestContext}.
  */
 public class ClientRequestContextWrapper
         extends RequestContextWrapper<ClientRequestContext> implements ClientRequestContext {

File: core/src/main/java/com/linecorp/armeria/client/Http2ResponseDecoder.java
Patch:
@@ -140,7 +140,7 @@ public void onStreamClosed(Http2Stream stream) {
 
         final int lastStreamId = conn.local().lastStreamKnownByPeer();
         if (stream.id() > lastStreamId) {
-            res.close(UnprocessedRequestException.get());
+            res.close(new UnprocessedRequestException(GoAwayReceivedException.get()));
         } else {
             res.close(ClosedSessionException.get());
         }

File: core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java
Patch:
@@ -202,11 +202,13 @@ private void doExecute(PooledChannel pooledChannel, ClientRequestContext ctx,
             final HttpSession session = HttpSession.get(channel);
             res.init(session.inboundTrafficController());
             final SessionProtocol sessionProtocol = session.protocol();
+
+            // Should never reach here.
             if (sessionProtocol == null) {
                 needsRelease = false;
                 try {
                     // TODO(minwoox): Make a test that handles this case
-                    final UnprocessedRequestException cause = UnprocessedRequestException.get();
+                    final NullPointerException cause = new NullPointerException("sessionProtocol");
                     handleEarlyRequestException(ctx, req, cause);
                     res.close(cause);
                 } finally {

File: core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java
Patch:
@@ -154,7 +154,7 @@ public void onSubscribe(Subscription subscription) {
     private void writeFirstHeader() {
         final HttpSession session = HttpSession.get(ch);
         if (!session.canSendRequest()) {
-            failAndRespond(UnprocessedRequestException.get());
+            failAndRespond(new UnprocessedRequestException(ClosedSessionException.get()));
             return;
         }
 

File: core/src/main/java/com/linecorp/armeria/internal/InboundTrafficController.java
Patch:
@@ -82,7 +82,7 @@ public void inc(int numProducedBytes) {
     public void dec(int numConsumedBytes) {
         final int oldValue = getAndAdd(-numConsumedBytes);
         if (oldValue > lowWatermark && oldValue - numConsumedBytes <= lowWatermark) {
-            // Just went below high watermark
+            // Just went below low watermark
             if (cfg != null) {
                 cfg.setAutoRead(true);
                 suspended = false;

File: core/src/test/java/com/linecorp/armeria/client/HttpClientWithRequestLogTest.java
Patch:
@@ -137,7 +137,8 @@ public void connectionError() {
                 .build();
         final HttpRequest req = HttpRequest.of(HttpMethod.GET, "/");
         assertThatThrownBy(() -> client.execute(req).aggregate().get())
-                .hasCauseInstanceOf(ConnectException.class);
+                .hasCauseInstanceOf(UnprocessedRequestException.class)
+                .hasRootCauseInstanceOf(ConnectException.class);
 
         await().untilAsserted(() -> assertThat(ref.get()).isNotNull());
         final ClientConnectionTimings timings = ref.get();

File: core/src/main/java/com/linecorp/armeria/server/RouteBuilder.java
Patch:
@@ -198,7 +198,7 @@ public RouteBuilder pathWithPrefix(String prefix, String pathPattern) {
             }
         }
 
-        return pathMapping(new PathMappingWithPrefix(prefix, getPathMapping(pathPattern)));
+        return pathMapping(new RegexPathMappingWithPrefix(prefix, getPathMapping(pathPattern)));
     }
 
     /**
@@ -329,7 +329,7 @@ private static PathMapping getPathMapping(String pathPattern) {
         if (!pathPattern.contains("{") && !pathPattern.contains(":")) {
             return new ExactPathMapping(pathPattern);
         }
-        return new DefaultPathMapping(pathPattern);
+        return new ParameterizedPathMapping(pathPattern);
     }
 
     private static PathMapping prefixPathMapping(String prefix, boolean stripPrefix) {

File: core/src/main/java/com/linecorp/armeria/server/Service.java
Patch:
@@ -138,6 +138,6 @@ default Service<I, O> decorate(DecoratingServiceFunction<I, O> function) {
      * successful. By default, exact path mappings with no input query are cached.
      */
     default boolean shouldCachePath(String path, @Nullable String query, Route route) {
-        return route.exactPath().isPresent() && query == null;
+        return route.pathType() == RoutePathType.EXACT && query == null;
     }
 }

File: core/src/test/java/com/linecorp/armeria/server/GlobPathMappingTest.java
Patch:
@@ -142,7 +142,8 @@ private static void pass(String glob, String... paths) {
         final Route route = glob(glob);
         for (String p : paths) {
             if (!route.apply(create(p)).isPresent()) {
-                Assertions.fail('\'' + p + "' does not match '" + glob + "' or '" + route.regex() + "'.");
+                Assertions.fail('\'' + p + "' does not match '" + glob + "' or '" +
+                                route.paths().get(0) + "'.");
             }
         }
     }
@@ -151,7 +152,7 @@ private static void fail(String glob, String... paths) {
         final Route route = glob(glob);
         for (String p : paths) {
             if (route.apply(create(p)).isPresent()) {
-                Assertions.fail('\'' + p + "' matches '" + glob + "' or '" + route.regex() + "'.");
+                Assertions.fail('\'' + p + "' matches '" + glob + "' or '" + route.paths().get(0) + "'.");
             }
         }
     }

File: core/src/main/java/com/linecorp/armeria/common/CacheControl.java
Patch:
@@ -37,7 +37,7 @@ public abstract class CacheControl {
      * @param noTransform whether the {@code "no-transform"} directive is enabled.
      * @param maxAgeSeconds the value of the {@code "max-age"} directive, or {@code -1} if disabled.
      */
-    protected CacheControl(boolean noCache, boolean noStore, boolean noTransform, long maxAgeSeconds) {
+    CacheControl(boolean noCache, boolean noStore, boolean noTransform, long maxAgeSeconds) {
         assert maxAgeSeconds >= -1 : maxAgeSeconds;
         this.noCache = noCache;
         this.noStore = noStore;
@@ -84,7 +84,7 @@ public final long maxAgeSeconds() {
      * Returns a newly created {@link CacheControlBuilder} which has the same initial directives with
      * this {@link CacheControl}.
      */
-    public abstract CacheControlBuilder<?> toBuilder();
+    public abstract CacheControlBuilder toBuilder();
 
     /**
      * Encodes the directives in this {@link CacheControl} into an HTTP {@code "cache-control"} header value.
@@ -97,7 +97,7 @@ public final long maxAgeSeconds() {
      * Returns a new {@link StringBuilder} with the common directives appended.
      * Note that the first two characters ({@code ", "} must be stripped.
      */
-    protected final StringBuilder newHeaderValueBuffer() {
+    final StringBuilder newHeaderValueBuffer() {
         final StringBuilder buf = new StringBuilder(40);
         if (noCache) {
             buf.append(", no-cache");

File: core/src/test/java/com/linecorp/armeria/common/CacheControlTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import java.time.Duration;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class CacheControlTest {
 
@@ -102,7 +102,7 @@ public void testToBuilder() {
                      .build().isEmpty()).isTrue();
     }
 
-    private static final class CacheControlImplBuilder extends CacheControlBuilder<CacheControlImplBuilder> {
+    private static final class CacheControlImplBuilder extends CacheControlBuilder {
 
         CacheControlImplBuilder() {}
 
@@ -124,7 +124,7 @@ private CacheControlImpl(boolean noCache, boolean noStore, boolean noTransform,
         }
 
         @Override
-        public CacheControlBuilder<?> toBuilder() {
+        public CacheControlBuilder toBuilder() {
             return new CacheControlImplBuilder(this);
         }
 

File: core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java
Patch:
@@ -19,6 +19,7 @@
 import static com.linecorp.armeria.common.SessionProtocol.H1C;
 import static com.linecorp.armeria.common.SessionProtocol.H2;
 import static com.linecorp.armeria.common.SessionProtocol.H2C;
+import static com.linecorp.armeria.common.stream.SubscriptionOption.WITH_POOLED_OBJECTS;
 import static java.util.Objects.requireNonNull;
 
 import java.util.concurrent.ScheduledFuture;
@@ -156,8 +157,7 @@ public boolean invoke(ClientRequestContext ctx, HttpRequest req, DecodedHttpResp
                 new HttpRequestSubscriber(channel, requestEncoder,
                                           numRequestsSent, req, wrappedRes, ctx,
                                           writeTimeoutMillis),
-                channel.eventLoop(),
-                true);
+                channel.eventLoop(), WITH_POOLED_OBJECTS);
 
         if (numRequestsSent >= MAX_NUM_REQUESTS_SENT) {
             responseDecoder.disconnectWhenFinished();

File: core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java
Patch:
@@ -137,7 +137,7 @@ public void abort() {
         }
 
         final SubscriptionImpl newSubscription = new SubscriptionImpl(
-                this, AbortingSubscriber.get(), ImmediateEventExecutor.INSTANCE, false);
+                this, AbortingSubscriber.get(), ImmediateEventExecutor.INSTANCE, false, false);
         if (subscriptionUpdater.compareAndSet(this, null, newSubscription)) {
             // We don't need to invoke onSubscribe() for AbortingSubscriber because it's just a placeholder.
             invokedOnSubscribe = true;

File: core/src/main/java/com/linecorp/armeria/common/stream/FixedStreamMessage.java
Patch:
@@ -144,7 +144,7 @@ public final void abort() {
         }
 
         final SubscriptionImpl newSubscription = new SubscriptionImpl(
-                this, AbortingSubscriber.get(), ImmediateEventExecutor.INSTANCE, false);
+                this, AbortingSubscriber.get(), ImmediateEventExecutor.INSTANCE, false, false);
         subscriptionUpdater.compareAndSet(this, null, newSubscription);
         cancelOrAbort(false);
     }

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -21,6 +21,7 @@
 import static com.linecorp.armeria.common.SessionProtocol.H1C;
 import static com.linecorp.armeria.common.SessionProtocol.H2;
 import static com.linecorp.armeria.common.SessionProtocol.H2C;
+import static com.linecorp.armeria.common.stream.SubscriptionOption.WITH_POOLED_OBJECTS;
 import static com.linecorp.armeria.internal.ArmeriaHttpUtil.isCorsPreflightRequest;
 import static com.linecorp.armeria.server.HttpHeaderUtil.determineClientAddress;
 import static io.netty.handler.codec.http2.Http2CodecUtil.DEFAULT_WINDOW_SIZE;
@@ -440,7 +441,7 @@ protocol, routingCtx, routingResult, req, getSSLSession(channel),
             final HttpResponseSubscriber resSubscriber =
                     new HttpResponseSubscriber(ctx, responseEncoder, reqCtx, req, accessLogWriter);
             reqCtx.setRequestTimeoutChangeListener(resSubscriber);
-            res.subscribe(resSubscriber, eventLoop, true);
+            res.subscribe(resSubscriber, eventLoop, WITH_POOLED_OBJECTS);
         }
     }
 

File: core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.linecorp.armeria.client;
 
+import static com.linecorp.armeria.common.stream.SubscriptionOption.WITH_POOLED_OBJECTS;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.awaitility.Awaitility.await;
@@ -160,7 +161,7 @@ public void onError(Throwable t) {
                 public void onComplete() {
                     decorated.close();
                 }
-            }, true);
+            }, WITH_POOLED_OBJECTS);
             return decorated;
         }
     }

File: core/src/test/java/com/linecorp/armeria/common/stream/DefaultStreamMessageTest.java
Patch:
@@ -47,7 +47,8 @@ class DefaultStreamMessageTest {
     /**
      * Makes sure {@link Subscriber#onComplete()} is always invoked after
      * {@link Subscriber#onSubscribe(Subscription)} even if
-     * {@link StreamMessage#subscribe(Subscriber, EventExecutor)} is called from non-{@link EventLoop}.
+     * {@link StreamMessage#subscribe(Subscriber, EventExecutor, SubscriptionOption...)}
+     * is called from non-{@link EventLoop}.
      */
     @Test
     void onSubscribeBeforeOnComplete() throws Exception {

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaClientCall.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.linecorp.armeria.client.grpc;
 
+import static com.linecorp.armeria.common.stream.SubscriptionOption.WITH_POOLED_OBJECTS;
 import static java.util.Objects.requireNonNull;
 
 import java.util.concurrent.CancellationException;
@@ -173,7 +174,7 @@ public void start(Listener<O> responseListener, Metadata metadata) {
             close(GrpcStatus.fromThrowable(e), new Metadata());
             return;
         }
-        res.subscribe(responseReader, ctx.eventLoop(), true);
+        res.subscribe(responseReader, ctx.eventLoop(), WITH_POOLED_OBJECTS);
         res.completionFuture().handleAsync(responseReader, ctx.eventLoop());
     }
 

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcService.java
Patch:
@@ -18,6 +18,7 @@
 
 import static com.google.common.collect.ImmutableList.toImmutableList;
 import static com.google.common.collect.ImmutableMap.toImmutableMap;
+import static com.linecorp.armeria.common.stream.SubscriptionOption.WITH_POOLED_OBJECTS;
 import static java.util.Objects.requireNonNull;
 
 import java.time.Duration;
@@ -179,7 +180,7 @@ protected HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req) throws
                 methodName, method, ctx, req.headers(), res, serializationFormat);
         if (call != null) {
             ctx.setRequestTimeoutHandler(() -> call.close(Status.DEADLINE_EXCEEDED, new Metadata()));
-            req.subscribe(call.messageReader(), ctx.eventLoop(), true);
+            req.subscribe(call.messageReader(), ctx.eventLoop(), WITH_POOLED_OBJECTS);
             req.completionFuture().handleAsync(call.messageReader(), ctx.eventLoop());
         }
         return res;

File: core/src/main/java/com/linecorp/armeria/common/CacheControl.java
Patch:
@@ -15,9 +15,6 @@
  */
 package com.linecorp.armeria.common;
 
-import com.linecorp.armeria.client.ClientCacheControl;
-import com.linecorp.armeria.server.ServerCacheControl;
-
 /**
  * Directives for HTTP caching mechanisms in requests or responses. Use {@link ServerCacheControl} for
  * response-side and {@link ClientCacheControl} for request-side.

File: core/src/main/java/com/linecorp/armeria/common/ClientCacheControl.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.linecorp.armeria.client;
+package com.linecorp.armeria.common;
 
 import static com.linecorp.armeria.internal.ArmeriaHttpUtil.parseCacheControl;
 import static com.linecorp.armeria.internal.ArmeriaHttpUtil.parseCacheControlSeconds;
@@ -27,8 +27,6 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 
-import com.linecorp.armeria.common.CacheControl;
-
 /**
  * Directives for HTTP caching mechanisms in requests.
  *

File: core/src/main/java/com/linecorp/armeria/common/ServerCacheControl.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.linecorp.armeria.server;
+package com.linecorp.armeria.common;
 
 import static com.linecorp.armeria.internal.ArmeriaHttpUtil.parseCacheControl;
 import static com.linecorp.armeria.internal.ArmeriaHttpUtil.parseCacheControlSeconds;
@@ -27,8 +27,6 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 
-import com.linecorp.armeria.common.CacheControl;
-
 /**
  * Directives for HTTP caching mechanisms in responses.
  *

File: core/src/main/java/com/linecorp/armeria/server/docs/DocService.java
Patch:
@@ -48,9 +48,9 @@
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.MediaType;
+import com.linecorp.armeria.common.ServerCacheControl;
 import com.linecorp.armeria.server.HttpService;
 import com.linecorp.armeria.server.Server;
-import com.linecorp.armeria.server.ServerCacheControl;
 import com.linecorp.armeria.server.ServerConfig;
 import com.linecorp.armeria.server.ServerListenerAdapter;
 import com.linecorp.armeria.server.Service;

File: core/src/test/java/com/linecorp/armeria/common/ClientCacheControlTest.java
Patch:
@@ -13,13 +13,13 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.linecorp.armeria.client;
+package com.linecorp.armeria.common;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
 import java.time.Duration;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class ClientCacheControlTest {
 

File: core/src/test/java/com/linecorp/armeria/common/HttpHeadersTest.java
Patch:
@@ -36,8 +36,6 @@
 
 import org.junit.Test;
 
-import com.linecorp.armeria.server.ServerCacheControl;
-
 public class HttpHeadersTest {
 
     @Test

File: core/src/test/java/com/linecorp/armeria/common/ServerCacheControlTest.java
Patch:
@@ -13,13 +13,13 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.linecorp.armeria.server;
+package com.linecorp.armeria.common;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
 import java.time.Duration;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class ServerCacheControlTest {
 

File: core/src/test/java/com/linecorp/armeria/server/file/HttpFileServiceAdditionalHeadersTest.java
Patch:
@@ -24,8 +24,8 @@
 import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpStatus;
+import com.linecorp.armeria.common.ServerCacheControl;
 import com.linecorp.armeria.server.ServerBuilder;
-import com.linecorp.armeria.server.ServerCacheControl;
 import com.linecorp.armeria.testing.junit4.server.ServerRule;
 
 public class HttpFileServiceAdditionalHeadersTest {

File: core/src/test/java/com/linecorp/armeria/server/file/HttpFileTest.java
Patch:
@@ -22,7 +22,7 @@
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.MediaType;
-import com.linecorp.armeria.server.ServerCacheControl;
+import com.linecorp.armeria.common.ServerCacheControl;
 
 public class HttpFileTest {
 

File: examples/proxy-server/src/main/java/example/armeria/proxy/Main.java
Patch:
@@ -5,9 +5,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.linecorp.armeria.common.ServerCacheControl;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerBuilder;
-import com.linecorp.armeria.server.ServerCacheControl;
 import com.linecorp.armeria.server.file.HttpFileBuilder;
 import com.linecorp.armeria.server.healthcheck.HttpHealthCheckService;
 import com.linecorp.armeria.server.logging.LoggingService;

File: core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java
Patch:
@@ -192,7 +192,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                                 fail(ctx, ContentTooLargeException.get());
                                 return;
                             } else {
-                                res.write(HttpData.of(data));
+                                res.write(HttpData.wrap(data.retain()));
                             }
                         }
 

File: core/src/main/java/com/linecorp/armeria/client/HttpClient.java
Patch:
@@ -220,7 +220,7 @@ default HttpResponse execute(RequestHeaders headers, HttpData content) {
      * Sends an HTTP request with the specified headers and content.
      */
     default HttpResponse execute(RequestHeaders headers, byte[] content) {
-        return execute(AggregatedHttpRequest.of(headers, HttpData.of(content)));
+        return execute(AggregatedHttpRequest.of(headers, HttpData.wrap(content)));
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/client/encoding/ZlibStreamDecoder.java
Patch:
@@ -45,7 +45,7 @@ public HttpData decode(HttpData obj) {
         if (obj instanceof ByteBufHolder) {
             decoder.writeInbound(((ByteBufHolder) obj).content());
         } else {
-            final ByteBuf compressed = Unpooled.wrappedBuffer(obj.array(), obj.offset(), obj.length());
+            final ByteBuf compressed = Unpooled.wrappedBuffer(obj.array());
             decoder.writeInbound(compressed);
         }
         return fetchDecoderOutput();

File: core/src/main/java/com/linecorp/armeria/common/AbstractHttpData.java
Patch:
@@ -23,8 +23,7 @@
 public abstract class AbstractHttpData implements HttpData {
 
     /**
-     * Gets the {@link byte} value at the given {@code index} relative to the {@link HttpData}'s
-     * {@link #offset()}.
+     * Gets the {@link byte} value at the given {@code index}.
      */
     protected abstract byte getByte(int index);
 

File: core/src/main/java/com/linecorp/armeria/common/HttpMessageAggregator.java
Patch:
@@ -132,7 +132,7 @@ public Void apply(Void unused, Throwable cause) {
                             byteBufData.release();
                         }
                     } else {
-                        merged.writeBytes(data.array(), data.offset(), data.length());
+                        merged.writeBytes(data.array());
                     }
                 }
                 content = new ByteBufHttpData(merged, true);
@@ -141,10 +141,10 @@ public Void apply(Void unused, Throwable cause) {
                 for (int i = 0, offset = 0; i < contentList.size(); i++) {
                     final HttpData data = contentList.set(i, null);
                     final int dataLength = data.length();
-                    System.arraycopy(data.array(), data.offset(), merged, offset, dataLength);
+                    System.arraycopy(data.array(), 0, merged, offset, dataLength);
                     offset += dataLength;
                 }
-                content = HttpData.of(merged);
+                content = HttpData.wrap(merged);
             }
         }
 

File: core/src/main/java/com/linecorp/armeria/common/logging/BinaryContentPreviewer.java
Patch:
@@ -90,7 +90,7 @@ private static ByteBuf duplicateData(HttpData httpData, int length) {
             }
             return content.retainedSlice(content.readerIndex(), length);
         } else {
-            return Unpooled.wrappedBuffer(httpData.array(), httpData.offset(), length);
+            return Unpooled.wrappedBuffer(httpData.array());
         }
     }
 

File: core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java
Patch:
@@ -363,7 +363,7 @@ private ChannelFuture doWriteUnsplitData(int id, HttpData data, boolean endStrea
 
     private ChannelFuture doWriteSplitData(int id, HttpData data, boolean endStream) {
         try {
-            int offset = data.offset();
+            int offset = 0;
             int remaining = data.length();
             ChannelFuture lastFuture;
             for (;;) {

File: core/src/main/java/com/linecorp/armeria/internal/HttpObjectEncoder.java
Patch:
@@ -119,7 +119,7 @@ protected final ByteBuf toByteBuf(HttpData data) {
             return ((ByteBufHolder) data).content();
         }
         final ByteBuf buf = channel().alloc().directBuffer(data.length(), data.length());
-        buf.writeBytes(data.array(), data.offset(), data.length());
+        buf.writeBytes(data.array());
         return buf;
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/annotation/ByteArrayResponseConverterFunction.java
Patch:
@@ -62,7 +62,7 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,
                     return HttpResponse.of(headers, (HttpData) result, trailers);
                 }
                 if (result instanceof byte[]) {
-                    return HttpResponse.of(headers, HttpData.of((byte[]) result), trailers);
+                    return HttpResponse.of(headers, HttpData.wrap((byte[]) result), trailers);
                 }
 
                 return ResponseConverterFunction.fallthrough();
@@ -72,7 +72,7 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,
                                    (HttpData) result, trailers);
         } else if (result instanceof byte[]) {
             return HttpResponse.of(headers.toBuilder().contentType(MediaType.OCTET_STREAM).build(),
-                                   HttpData.of((byte[]) result), trailers);
+                                   HttpData.wrap((byte[]) result), trailers);
         }
 
         return ResponseConverterFunction.fallthrough();
@@ -83,7 +83,7 @@ private static HttpData toHttpData(@Nullable Object value) {
             return (HttpData) value;
         }
         if (value instanceof byte[]) {
-            return HttpData.of((byte[]) value);
+            return HttpData.wrap((byte[]) value);
         }
         if (value == null) {
             return HttpData.EMPTY_DATA;

File: core/src/main/java/com/linecorp/armeria/server/annotation/JacksonResponseConverterFunction.java
Patch:
@@ -113,7 +113,7 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,
 
     private HttpData toJsonHttpData(@Nullable Object value) {
         try {
-            return HttpData.of(mapper.writeValueAsBytes(value));
+            return HttpData.wrap(mapper.writeValueAsBytes(value));
         } catch (Exception e) {
             return Exceptions.throwUnsafely(e);
         }

File: core/src/main/java/com/linecorp/armeria/server/annotation/StringResponseConverterFunction.java
Patch:
@@ -82,6 +82,6 @@ private static HttpData toHttpData(@Nullable Object value, Charset charset) {
         } else {
             target = value;
         }
-        return HttpData.of(String.valueOf(target).getBytes(charset));
+        return HttpData.wrap(String.valueOf(target).getBytes(charset));
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/docs/DocService.java
Patch:
@@ -348,7 +348,7 @@ void setContent(byte[] content) {
 
         void setContent(byte[] content, MediaType mediaType) {
             assert file == HttpFile.nonExistent();
-            file = HttpFileBuilder.of(HttpData.of(content))
+            file = HttpFileBuilder.of(HttpData.wrap(content))
                                   .contentType(mediaType)
                                   .cacheControl(ServerCacheControl.REVALIDATED)
                                   .build();

File: core/src/main/java/com/linecorp/armeria/server/encoding/HttpEncodedResponse.java
Patch:
@@ -126,9 +126,9 @@ protected HttpObject filter(HttpObject obj) {
         final HttpData data = (HttpData) obj;
         assert encodedStream != null;
         try {
-            encodingStream.write(data.array(), data.offset(), data.length());
+            encodingStream.write(data.array());
             encodingStream.flush();
-            return HttpData.of(encodedStream.toByteArray());
+            return HttpData.wrap(encodedStream.toByteArray());
         } catch (IOException e) {
             throw new IllegalStateException(
                     "Error encoding HttpData, this should not happen with byte arrays.",
@@ -142,7 +142,7 @@ protected HttpObject filter(HttpObject obj) {
     protected void beforeComplete(Subscriber<? super HttpObject> subscriber) {
         closeEncoder();
         if (encodedStream != null && encodedStream.size() > 0) {
-            subscriber.onNext(HttpData.of(encodedStream.toByteArray()));
+            subscriber.onNext(HttpData.wrap(encodedStream.toByteArray()));
         }
     }
 

File: core/src/main/java/com/linecorp/armeria/server/file/StreamingHttpFile.java
Patch:
@@ -221,7 +221,7 @@ private CompletableFuture<AggregatedHttpFile> doAggregate(Executor fileReadExecu
                     }
 
                     final HttpFileBuilder builder =
-                            HttpFileBuilder.of(array != null ? HttpData.of(array)
+                            HttpFileBuilder.of(array != null ? HttpData.wrap(array)
                                                              : new ByteBufHttpData(buf, true),
                                                attrs.lastModifiedMillis())
                                            .date(isDateEnabled())

File: core/src/main/java/com/linecorp/armeria/server/streaming/JsonTextSequences.java
Patch:
@@ -314,7 +314,7 @@ private static HttpData toHttpData(ObjectMapper mapper, @Nullable Object value)
             out.write(RECORD_SEPARATOR);
             mapper.writeValue(out, value);
             out.write(LINE_FEED);
-            return HttpData.of(out.toByteArray());
+            return HttpData.wrap(out.toByteArray());
         } catch (Exception e) {
             return Exceptions.throwUnsafely(e);
         }

File: core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java
Patch:
@@ -142,7 +142,7 @@ public void onSubscribe(Subscription s) {
                 public void onNext(HttpObject httpObject) {
                     if (httpObject instanceof ByteBufHolder) {
                         try {
-                            decorated.write(HttpData.of(((ByteBufHolder) httpObject).content()));
+                            decorated.write(HttpData.copyOf(((ByteBufHolder) httpObject).content()));
                         } finally {
                             ReferenceCountUtil.safeRelease(httpObject);
                         }

File: core/src/test/java/com/linecorp/armeria/client/encoding/HttpDecodedResponseTest.java
Patch:
@@ -62,7 +62,7 @@ public class HttpDecodedResponseTest {
 
     @Test
     public void unpooledPayload_unpooledDrain() {
-        final HttpData payload = HttpData.of(PAYLOAD);
+        final HttpData payload = HttpData.wrap(PAYLOAD);
         final HttpResponse delegate = HttpResponse.of(RESPONSE_HEADERS, payload);
         final HttpResponse decoded = new HttpDecodedResponse(delegate, DECODERS, ByteBufAllocator.DEFAULT);
         final ByteBuf buf = responseBuf(decoded, false);
@@ -85,7 +85,7 @@ public void pooledPayload_unpooledDrain() {
     // Users that request pooled objects still always need to be ok with unpooled ones.
     @Test
     public void unpooledPayload_pooledDrain() {
-        final HttpData payload = HttpData.of(PAYLOAD);
+        final HttpData payload = HttpData.wrap(PAYLOAD);
         final HttpResponse delegate = HttpResponse.of(RESPONSE_HEADERS, payload);
         final HttpResponse decoded = new HttpDecodedResponse(delegate, DECODERS, ByteBufAllocator.DEFAULT);
         final ByteBuf buf = responseBuf(decoded, true);

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceResponseConverterTest.java
Patch:
@@ -98,7 +98,7 @@ public byte[] byteArray() {
 
                 @Get("/httpData")
                 public HttpData httpData() {
-                    return HttpData.of("¥".getBytes());
+                    return HttpData.wrap("¥".getBytes());
                 }
 
                 @Get("/jsonNode")
@@ -123,7 +123,7 @@ public Publisher<byte[]> byteArray() {
                 @Get("/httpData")
                 @ProducesOctetStream
                 public Publisher<HttpData> httpData() {
-                    return new ObjectPublisher<>(HttpData.of("¥".getBytes()));
+                    return new ObjectPublisher<>(HttpData.wrap("¥".getBytes()));
                 }
 
                 @Get("/jsonNode")
@@ -196,7 +196,7 @@ public byte[] byteArray() {
                 @Get("/httpData")
                 @Produces("application/octet-stream")
                 public HttpData httpData() {
-                    return HttpData.of("¥".getBytes());
+                    return HttpData.wrap("¥".getBytes());
                 }
 
                 @Get("/jsonNode")

File: core/src/test/java/com/linecorp/armeria/server/HttpServerStreamingTest.java
Patch:
@@ -267,7 +267,7 @@ public void onComplete() {}
     }
 
     private static void stream(StreamWriter<HttpObject> writer, long size, int chunkSize) {
-        if (!writer.tryWrite(HttpData.of(new byte[chunkSize]))) {
+        if (!writer.tryWrite(HttpData.wrap(new byte[chunkSize]))) {
             return;
         }
 

File: core/src/test/java/com/linecorp/armeria/server/HttpServerTest.java
Patch:
@@ -393,15 +393,15 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)
                 String payload = "foobar";
                 return HttpResponse.of(ResponseHeaders.of(HttpStatus.OK),
                                        new DefaultHttpData(payload.getBytes(StandardCharsets.UTF_8),
-                                                           0, payload.length(), true));
+                                                           true));
             });
 
             sb.service("/additional-trailers-no-eos", (ctx, req) -> {
                 ctx.addAdditionalResponseTrailer(HttpHeaderNames.of("additional-trailer"), "value2");
                 String payload = "foobar";
                 return HttpResponse.of(ResponseHeaders.of(HttpStatus.OK),
                                        new DefaultHttpData(payload.getBytes(StandardCharsets.UTF_8),
-                                                           0, payload.length(), false));
+                                                           false));
             });
 
             sb.serviceUnder("/not-cached-paths", (ctx, req) -> HttpResponse.of(HttpStatus.OK));

File: core/src/test/java/com/linecorp/armeria/server/TestConverters.java
Patch:
@@ -91,7 +91,7 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,
                                             @Nullable Object result,
                                             HttpHeaders trailers) throws Exception {
             if (result instanceof byte[]) {
-                return httpResponse(HttpData.of((byte[]) result));
+                return httpResponse(HttpData.wrap((byte[]) result));
             }
             return ResponseConverterFunction.fallthrough();
         }
@@ -104,7 +104,7 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,
                                             @Nullable Object result,
                                             HttpHeaders trailers) throws Exception {
             if (result instanceof byte[]) {
-                return httpResponse(HttpData.of((byte[]) result));
+                return httpResponse(HttpData.wrap((byte[]) result));
             }
             throw new IllegalArgumentException("Cannot convert " +
                                                (result != null ? result.getClass().getName() : "null"));

File: core/src/test/java/com/linecorp/armeria/server/annotation/StringResponseConverterFunctionTest.java
Patch:
@@ -70,7 +70,7 @@ public void aggregatedText() throws Exception {
             StepVerifier.create(from(result))
                         .expectNext(result instanceof Iterable ? expectedHeadersWithContentLength
                                                                : expectedHeadersWithoutContentLength)
-                        .expectNext(HttpData.of("foo,bar,baz".getBytes()))
+                        .expectNext(HttpData.wrap("foo,bar,baz".getBytes()))
                         .expectComplete()
                         .verify();
         }

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageDeframer.java
Patch:
@@ -245,7 +245,7 @@ public void deframe(HttpData data, boolean endOfStream) {
             if (data instanceof ByteBufHolder) {
                 buf = ((ByteBufHolder) data).content();
             } else {
-                buf = Unpooled.wrappedBuffer(data.array(), data.offset(), dataLength);
+                buf = Unpooled.wrappedBuffer(data.array());
             }
             assert unprocessed != null;
             unprocessed.add(buf);

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/UnframedGrpcService.java
Patch:
@@ -181,7 +181,7 @@ private void frameAndServe(
                 message = ((ByteBufHolder) content).content();
             } else {
                 message = ctx.alloc().buffer(content.length());
-                message.writeBytes(content.array(), content.offset(), content.length());
+                message.writeBytes(content.array());
             }
             final HttpData frame;
             boolean success = false;

File: retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/BlockingCallSubscriber.java
Patch:
@@ -51,7 +51,7 @@ void onSubscribe0() {
 
     @Override
     void onHttpData(HttpData data) {
-        responseDataBuffer.write(data.array(), data.offset(), data.length());
+        responseDataBuffer.write(data.array());
     }
 
     @Override

File: retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/StreamingCallSubscriber.java
Patch:
@@ -68,7 +68,7 @@ public long read(Buffer sink, long byteCount) throws IOException {
             }));
             responseCalled = true;
         }
-        pipeBuffer.write(data.array(), data.offset(), data.length());
+        pipeBuffer.write(data.array(), 0, data.length());
     }
 
     @Override

File: retrofit2/src/test/java/com/linecorp/armeria/client/retrofit2/ArmeriaCallFactoryLargeStreamTest.java
Patch:
@@ -69,7 +69,7 @@ public void request(long n) {
                                 if (count == 0) {
                                     s.onNext(ResponseHeaders.of(HttpStatus.OK));
                                 } else {
-                                    s.onNext(HttpData.of(new byte[1024]));
+                                    s.onNext(HttpData.wrap(new byte[1024]));
                                 }
                             }
                             count += n;

File: spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/DataBufferFactoryWrapper.java
Patch:
@@ -79,8 +79,7 @@ HttpData toHttpData(DataBuffer dataBuffer) {
     DataBuffer toDataBuffer(HttpData httpData) {
         requireNonNull(httpData, "httpData");
         if (!(httpData instanceof ByteBufHttpData)) {
-            return delegate.wrap(
-                    ByteBuffer.wrap(httpData.array(), httpData.offset(), httpData.length()));
+            return delegate.wrap(ByteBuffer.wrap(httpData.array()));
         }
         return converter.apply((ByteBufHttpData) httpData);
     }

File: spring/boot-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactoryTest.java
Patch:
@@ -172,7 +172,7 @@ private static AggregatedHttpResponse sendPostRequest(HttpClient client) {
                 RequestHeaders.of(HttpMethod.POST, "/hello",
                                   HttpHeaderNames.USER_AGENT, "test-agent/1.0.0",
                                   HttpHeaderNames.ACCEPT_ENCODING, "gzip");
-        return client.execute(requestHeaders, HttpData.of(POST_BODY.getBytes())).aggregate().join();
+        return client.execute(requestHeaders, HttpData.wrap(POST_BODY.getBytes())).aggregate().join();
     }
 
     private static void validateEchoResponse(AggregatedHttpResponse res) {

File: spring/boot-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ReactiveWebServerAutoConfigurationTest.java
Patch:
@@ -156,7 +156,7 @@ public void shouldGetHelloFromRouter() throws Exception {
             final AggregatedHttpResponse res2 =
                     client.execute(RequestHeaders.of(HttpMethod.POST, "/route2",
                                                      HttpHeaderNames.CONTENT_TYPE, JSON_UTF_8),
-                                   HttpData.of("{\"a\":1}".getBytes())).aggregate().join();
+                                   HttpData.wrap("{\"a\":1}".getBytes())).aggregate().join();
             assertThatJson(res2.contentUtf8()).isArray()
                                               .ofLength(1)
                                               .thatContains("route");
@@ -172,7 +172,7 @@ public void shouldGetNotFound() {
             assertThat(client.execute(
                     RequestHeaders.of(HttpMethod.POST, "/route2",
                                       HttpHeaderNames.CONTENT_TYPE, PLAIN_TEXT_UTF_8),
-                    HttpData.of("text".getBytes())).aggregate().join().status())
+                    HttpData.wrap("text".getBytes())).aggregate().join().status())
                     .isEqualTo(HttpStatus.NOT_FOUND);
         });
     }

File: thrift/src/main/java/com/linecorp/armeria/client/thrift/THttpClientDelegate.java
Patch:
@@ -206,7 +206,7 @@ private void handle(ClientRequestContext ctx, int seqId, DefaultRpcResponse repl
         if (content instanceof ByteBufHolder) {
             inputTransport = new TByteBufTransport(((ByteBufHolder) content).content());
         } else {
-            inputTransport = new TMemoryInputTransport(content.array(), content.offset(), content.length());
+            inputTransport = new TMemoryInputTransport(content.array());
         }
 
         final TProtocol inputProtocol = protocolFactory.getProtocol(inputTransport);

File: thrift/src/main/java/com/linecorp/armeria/server/thrift/THttpService.java
Patch:
@@ -487,7 +487,7 @@ private void decodeAndInvoke(
             buf = ((ByteBufHolder) content).content();
         } else {
             buf = ctx.alloc().buffer(content.length());
-            buf.writeBytes(content.array(), content.offset(), content.length());
+            buf.writeBytes(content.array());
         }
 
         final TByteBufTransport inTransport = new TByteBufTransport(buf);

File: tomcat/src/main/java/com/linecorp/armeria/server/tomcat/Tomcat90InputBuffer.java
Patch:
@@ -42,7 +42,7 @@ public int doRead(ByteChunk chunk) {
         read = true;
 
         final int readableBytes = content.length();
-        chunk.setBytes(content.array(), content.offset(), readableBytes);
+        chunk.setBytes(content.array(), 0, readableBytes);
 
         return readableBytes;
     }

File: tomcat/src/main/java/com/linecorp/armeria/server/tomcat/Tomcat90OutputBuffer.java
Patch:
@@ -45,7 +45,7 @@ public int doWrite(ByteChunk chunk) {
         // NB: We make a copy because Tomcat reuses the underlying byte array of 'chunk'.
         final byte[] content = Arrays.copyOfRange(chunk.getBuffer(), start, end);
 
-        data.add(HttpData.of(content));
+        data.add(HttpData.wrap(content));
 
         bytesWritten += length;
         return length;
@@ -62,7 +62,7 @@ public int doWrite(ByteBuffer chunk) throws IOException {
         final byte[] content = new byte[chunk.remaining()];
         chunk.get(content);
 
-        data.add(HttpData.of(content));
+        data.add(HttpData.wrap(content));
 
         bytesWritten += length;
         return length;

File: tomcat8.0/src/main/java/com/linecorp/armeria/server/tomcat/Tomcat80InputBuffer.java
Patch:
@@ -41,7 +41,7 @@ public int doRead(ByteChunk chunk, Request request) throws IOException {
         read = true;
 
         final int readableBytes = content.length();
-        chunk.setBytes(content.array(), content.offset(), readableBytes);
+        chunk.setBytes(content.array(), 0, readableBytes);
 
         return readableBytes;
     }

File: tomcat8.0/src/main/java/com/linecorp/armeria/server/tomcat/Tomcat80OutputBuffer.java
Patch:
@@ -45,7 +45,7 @@ public int doWrite(ByteChunk chunk, Response response) throws IOException {
         // NB: We make a copy because Tomcat reuses the underlying byte array of 'chunk'.
         final byte[] content = Arrays.copyOfRange(chunk.getBuffer(), start, end);
 
-        data.add(HttpData.of(content));
+        data.add(HttpData.wrap(content));
 
         bytesWritten += length;
         return length;

File: core/src/main/java/com/linecorp/armeria/client/ClientDecoration.java
Patch:
@@ -117,7 +117,7 @@ public boolean equals(Object o) {
             if (this == o) {
                 return true;
             }
-            if (o == null || getClass() != o.getClass()) {
+            if (!(o instanceof Entry)) {
                 return false;
             }
 

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsQuestionWithoutTrailingDot.java
Patch:
@@ -60,7 +60,7 @@ public boolean equals(Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (!(o instanceof DnsQuestionWithoutTrailingDot)) {
             return false;
         }
         final DnsQuestionWithoutTrailingDot that = (DnsQuestionWithoutTrailingDot) o;

File: core/src/main/java/com/linecorp/armeria/common/CacheControl.java
Patch:
@@ -123,7 +123,7 @@ public boolean equals(Object o) {
             return true;
         }
 
-        if (o == null || getClass() != o.getClass()) {
+        if (!(o instanceof CacheControl)) {
             return false;
         }
 

File: core/src/main/java/com/linecorp/armeria/common/Flags.java
Patch:
@@ -46,7 +46,7 @@
 import com.linecorp.armeria.client.retry.RetryingRpcClient;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.internal.SslContextUtil;
-import com.linecorp.armeria.server.PathMappingContext;
+import com.linecorp.armeria.server.RoutingContext;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.ServiceConfig;
 import com.linecorp.armeria.server.annotation.ExceptionHandler;
@@ -664,7 +664,7 @@ public static int defaultMaxTotalAttempts() {
     /**
      * Returns the value of the {@code routeCache} parameter. It would be used to create a Caffeine
      * {@link Cache} instance using {@link Caffeine#from(String)} for routing a request. The {@link Cache}
-     * would hold the mappings of {@link PathMappingContext} and the designated {@link ServiceConfig}
+     * would hold the mappings of {@link RoutingContext} and the designated {@link ServiceConfig}
      * for a request to improve server performance.
      *
      * <p>The default value of this flag is {@value DEFAULT_ROUTE_CACHE_SPEC}. Specify the
@@ -715,7 +715,7 @@ public static List<String> cachedHeaders() {
     /**
      * Returns the value of the {@code compositeServiceCache} parameter. It would be used to create a
      * Caffeine {@link Cache} instance using {@link Caffeine#from(String)} for routing a request.
-     * The {@link Cache} would hold the mappings of {@link PathMappingContext} and the designated
+     * The {@link Cache} would hold the mappings of {@link RoutingContext} and the designated
      * {@link ServiceConfig} for a request to improve server performance.
      *
      * <p>The default value of this flag is {@value DEFAULT_COMPOSITE_SERVICE_CACHE_SPEC}. Specify the

File: core/src/main/java/com/linecorp/armeria/server/DecoratingService.java
Patch:
@@ -68,8 +68,8 @@ public final <T> Optional<T> as(Class<T> serviceType) {
     }
 
     @Override
-    public boolean shouldCachePath(String path, @Nullable String query, PathMapping pathMapping) {
-        return delegate.shouldCachePath(path, query, pathMapping);
+    public boolean shouldCachePath(String path, @Nullable String query, Route route) {
+        return delegate.shouldCachePath(path, query, route);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/server/RedirectService.java
Patch:
@@ -211,7 +211,7 @@ public RedirectService(HttpStatus redirectStatus, String locationPattern, boolea
 
         final Matcher m = PATTERN_PARAMS_START.matcher(locationPattern);
         if (m.find()) {
-            paramNames = PathMapping.of(locationPattern.substring(m.start())).paramNames();
+            paramNames = Route.builder().path(locationPattern.substring(m.start())).build().paramNames();
         }
     }
 
@@ -280,7 +280,7 @@ private static String appendQueryString(ServiceRequestContext ctx, String locati
     @Override
     public void serviceAdded(ServiceConfig cfg) throws Exception {
         if (paramNames != null) {
-            final Set<String> params = cfg.pathMapping().paramNames();
+            final Set<String> params = cfg.route().paramNames();
 
             // Find out if old path and new path are compatible
             for (String param : paramNames) {

File: core/src/main/java/com/linecorp/armeria/server/Service.java
Patch:
@@ -137,7 +137,7 @@ default Service<I, O> decorate(DecoratingServiceFunction<I, O> function) {
      * Returns whether the given {@code path} and {@code query} should be cached if the service's result is
      * successful. By default, exact path mappings with no input query are cached.
      */
-    default boolean shouldCachePath(String path, @Nullable String query, PathMapping pathMapping) {
-        return pathMapping.exactPath().isPresent() && query == null;
+    default boolean shouldCachePath(String path, @Nullable String query, Route route) {
+        return route.exactPath().isPresent() && query == null;
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/auth/BasicToken.java
Patch:
@@ -55,7 +55,7 @@ public boolean equals(Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (!(o instanceof BasicToken)) {
             return false;
         }
         final BasicToken that = (BasicToken) o;

File: core/src/main/java/com/linecorp/armeria/server/auth/OAuth1aToken.java
Patch:
@@ -189,7 +189,7 @@ public boolean equals(Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (!(o instanceof OAuth1aToken)) {
             return false;
         }
         final OAuth1aToken that = (OAuth1aToken) o;

File: core/src/main/java/com/linecorp/armeria/server/auth/OAuth2Token.java
Patch:
@@ -45,7 +45,7 @@ public boolean equals(Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (!(o instanceof OAuth2Token)) {
             return false;
         }
         final OAuth2Token that = (OAuth2Token) o;

File: core/src/main/java/com/linecorp/armeria/server/cors/CorsService.java
Patch:
@@ -77,7 +77,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
                 return handleCorsPreflight(ctx, req);
             }
             if (config.isShortCircuit() &&
-                config.getPolicy(req.headers().get(HttpHeaderNames.ORIGIN), ctx.pathMappingContext()) == null) {
+                config.getPolicy(req.headers().get(HttpHeaderNames.ORIGIN), ctx.routingContext()) == null) {
                 return forbidden();
             }
         }
@@ -161,7 +161,7 @@ private CorsPolicy setCorsOrigin(ServiceRequestContext ctx, HttpRequest request,
 
         final String origin = request.headers().get(HttpHeaderNames.ORIGIN);
         if (origin != null) {
-            final CorsPolicy policy = config.getPolicy(origin, ctx.pathMappingContext());
+            final CorsPolicy policy = config.getPolicy(origin, ctx.routingContext());
             if (policy == null) {
                 logger.debug(
                         "{} There is no CORS policy configured for the request origin '{}' and the path '{}'.",

File: core/src/main/java/com/linecorp/armeria/server/docs/EnumInfo.java
Patch:
@@ -107,7 +107,7 @@ public boolean equals(Object o) {
             return true;
         }
 
-        if (o == null || getClass() != o.getClass()) {
+        if (!(o instanceof EnumInfo)) {
             return false;
         }
 

File: core/src/main/java/com/linecorp/armeria/server/docs/EnumValueInfo.java
Patch:
@@ -81,7 +81,7 @@ public boolean equals(Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (!(o instanceof EnumValueInfo)) {
             return false;
         }
 

File: core/src/main/java/com/linecorp/armeria/server/docs/ExceptionInfo.java
Patch:
@@ -88,7 +88,7 @@ public boolean equals(Object o) {
             return true;
         }
 
-        if (o == null || getClass() != o.getClass()) {
+        if (!(o instanceof ExceptionInfo)) {
             return false;
         }
 

File: core/src/main/java/com/linecorp/armeria/server/docs/FieldInfo.java
Patch:
@@ -121,7 +121,7 @@ public boolean equals(Object o) {
             return true;
         }
 
-        if (o == null || getClass() != o.getClass()) {
+        if (!(o instanceof FieldInfo)) {
             return false;
         }
 

File: core/src/main/java/com/linecorp/armeria/server/docs/MethodInfo.java
Patch:
@@ -191,7 +191,7 @@ public boolean equals(Object o) {
             return true;
         }
 
-        if (o == null || getClass() != o.getClass()) {
+        if (!(o instanceof MethodInfo)) {
             return false;
         }
 

File: core/src/main/java/com/linecorp/armeria/server/docs/ServiceInfo.java
Patch:
@@ -148,7 +148,7 @@ public boolean equals(Object o) {
             return true;
         }
 
-        if (o == null || getClass() != o.getClass()) {
+        if (!(o instanceof ServiceInfo)) {
             return false;
         }
 

File: core/src/main/java/com/linecorp/armeria/server/docs/StructInfo.java
Patch:
@@ -88,7 +88,7 @@ public boolean equals(Object o) {
             return true;
         }
 
-        if (o == null || getClass() != o.getClass()) {
+        if (!(o instanceof StructInfo)) {
             return false;
         }
 

File: core/src/main/java/com/linecorp/armeria/server/docs/TypeSignature.java
Patch:
@@ -303,7 +303,7 @@ public boolean equals(Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (!(o instanceof TypeSignature)) {
             return false;
         }
 

File: core/src/main/java/com/linecorp/armeria/server/file/ClassPathHttpVfs.java
Patch:
@@ -22,7 +22,7 @@
 import javax.annotation.Nullable;
 
 import com.linecorp.armeria.common.HttpHeaders;
-import com.linecorp.armeria.internal.PathMappingUtil;
+import com.linecorp.armeria.internal.RouteUtil;
 
 final class ClassPathHttpVfs extends AbstractHttpVfs {
 
@@ -50,7 +50,7 @@ private static String normalizeRootDir(String rootDir) {
     @Override
     public HttpFile get(String path, Clock clock, @Nullable String contentEncoding,
                         HttpHeaders additionalHeaders) {
-        PathMappingUtil.ensureAbsolutePath(path, "path");
+        RouteUtil.ensureAbsolutePath(path, "path");
         final String resourcePath = rootDir.isEmpty() ? path.substring(1) : rootDir + path;
         final HttpFileBuilder builder = HttpFileBuilder.ofResource(classLoader, resourcePath);
         return FileSystemHttpVfs.build(builder, clock, path, contentEncoding, additionalHeaders);

File: core/src/main/java/com/linecorp/armeria/server/file/FileSystemHttpVfs.java
Patch:
@@ -35,7 +35,7 @@
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.MediaType;
-import com.linecorp.armeria.internal.PathMappingUtil;
+import com.linecorp.armeria.internal.RouteUtil;
 
 final class FileSystemHttpVfs extends AbstractHttpVfs {
 
@@ -84,7 +84,7 @@ public List<String> list(String path) {
     }
 
     private static String normalizePath(String path) {
-        PathMappingUtil.ensureAbsolutePath(path, "path");
+        RouteUtil.ensureAbsolutePath(path, "path");
         // Replace '/' with the platform dependent file separator if necessary.
         if (FILE_SEPARATOR_IS_NOT_SLASH) {
             path = path.replace(File.separatorChar, '/');

File: core/src/test/java/com/linecorp/armeria/server/DefaultServiceRequestContextTest.java
Patch:
@@ -59,7 +59,7 @@ public void deriveContext() {
         assertThat(derivedCtx.server()).isSameAs(originalCtx.server());
         assertThat(derivedCtx.sessionProtocol()).isSameAs(originalCtx.sessionProtocol());
         assertThat(derivedCtx.<Service<HttpRequest, HttpResponse>>service()).isSameAs(originalCtx.service());
-        assertThat(derivedCtx.pathMapping()).isSameAs(originalCtx.pathMapping());
+        assertThat(derivedCtx.route()).isSameAs(originalCtx.route());
         assertThat(derivedCtx.request()).isSameAs(newRequest);
 
         assertThat(derivedCtx.path()).isEqualTo(originalCtx.path());

File: core/src/test/java/com/linecorp/armeria/server/HttpServerTest.java
Patch:
@@ -413,7 +413,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
                 }
 
                 @Override
-                public boolean shouldCachePath(String path, @Nullable String query, PathMapping pathMapping) {
+                public boolean shouldCachePath(String path, @Nullable String query, Route route) {
                     return true;
                 }
             });

File: core/src/test/java/com/linecorp/armeria/server/ServiceTest.java
Patch:
@@ -64,7 +64,8 @@ private static void assertDecoration(
 
         // Test if FooService.serviceAdded() is invoked.
         @SuppressWarnings({ "unchecked", "rawtypes" })
-        final ServiceConfig cfg = new ServiceConfig(PathMapping.ofCatchAll(), (Service) outer, "foo", 1, 1,
+        final ServiceConfig cfg = new ServiceConfig(Route.builder().catchAll().build(),
+                                                    (Service) outer, "foo", 1, 1,
                                                     true, ContentPreviewerFactory.disabled(),
                                                     ContentPreviewerFactory.disabled());
         outer.serviceAdded(cfg);

File: core/src/test/java/com/linecorp/armeria/server/composition/CompositeServiceTest.java
Patch:
@@ -36,7 +36,7 @@
 import com.linecorp.armeria.common.metric.PrometheusMeterRegistries;
 import com.linecorp.armeria.internal.metric.MicrometerUtil;
 import com.linecorp.armeria.server.AbstractHttpService;
-import com.linecorp.armeria.server.PathMapping;
+import com.linecorp.armeria.server.Route;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.testing.junit4.server.ServerRule;
@@ -62,7 +62,7 @@ protected void configure(ServerBuilder sb) throws Exception {
             // Should not hit the following services
             sb.serviceUnder("/foo/", otherService);
             sb.serviceUnder("/bar/", otherService);
-            sb.service(PathMapping.ofGlob("/*"), otherService);
+            sb.service(Route.builder().glob("/*").build(), otherService);
         }
     };
 
@@ -72,7 +72,7 @@ public static void checkMetrics() {
         assertThat(MicrometerUtil.register(registry,
                                            new MeterIdPrefix("armeria.server.router.compositeServiceCache",
                                                              "hostnamePattern", "*",
-                                                             "pathMapping", "prefix:/qux/"),
+                                                             "route", "prefix:/qux/"),
                                            Object.class, (r, i) -> null)).isNotNull();
     }
 

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageDeframer.java
Patch:
@@ -126,7 +126,7 @@ public boolean equals(Object o) {
             if (this == o) {
                 return true;
             }
-            if (o == null || getClass() != o.getClass()) {
+            if (!(o instanceof ByteBufOrStream)) {
                 return false;
             }
 

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcDocServicePlugin.java
Patch:
@@ -168,8 +168,9 @@ public ServiceSpecification generateSpecification(Set<ServiceConfig> serviceConf
                        });
 
             final String pathPrefix;
-            if (serviceConfig.pathMapping().prefix().isPresent()) {
-                pathPrefix = serviceConfig.pathMapping().prefix().get();
+            final Optional<String> prefix = serviceConfig.route().prefix();
+            if (prefix.isPresent()) {
+                pathPrefix = prefix.get();
             } else {
                 pathPrefix = "/";
             }

File: grpc/src/test/java/com/linecorp/armeria/it/grpc/GrpcMetricsIntegrationTest.java
Patch:
@@ -175,7 +175,7 @@ private static Optional<Double> findServerMeter(
                 "server." + suffix + '#' + type.getTagValueRepresentation(),
                 "method", "armeria.grpc.testing.TestService/" + method,
                 "hostnamePattern", "*",
-                "pathMapping", "exact:/armeria.grpc.testing.TestService/" + method);
+                "route", "exact:/armeria.grpc.testing.TestService/" + method);
         final String meterIdStr = prefix.withTags(keyValues).toString();
         return Optional.ofNullable(MoreMeters.measureAll(registry).get(meterIdStr));
     }

File: logback/src/main/java/com/linecorp/armeria/common/logback/RequestContextExporter.java
Patch:
@@ -474,7 +474,7 @@ public boolean equals(Object o) {
                 return true;
             }
 
-            if (o == null || getClass() != o.getClass()) {
+            if (!(o instanceof ExportEntry)) {
                 return false;
             }
 

File: spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaOkServiceConfiguration.java
Patch:
@@ -24,7 +24,7 @@
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.server.AbstractHttpService;
-import com.linecorp.armeria.server.PathMapping;
+import com.linecorp.armeria.server.Route;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.logging.LoggingService;
 
@@ -35,7 +35,7 @@ public HttpServiceRegistrationBean okService() {
         return new HttpServiceRegistrationBean()
                 .setServiceName("okService")
                 .setService(new OkService())
-                .setPathMapping(PathMapping.ofExact("/ok"))
+                .setRoute(Route.builder().path("/ok").build())
                 .setDecorators(ImmutableList.of(LoggingService.newDecorator()));
     }
 

File: spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaSslConfigurationTest.java
Patch:
@@ -48,7 +48,7 @@
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.server.AbstractHttpService;
-import com.linecorp.armeria.server.PathMapping;
+import com.linecorp.armeria.server.Route;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.logging.LoggingService;
@@ -75,7 +75,7 @@ public HttpServiceRegistrationBean okService() {
             return new HttpServiceRegistrationBean()
                     .setServiceName("okService")
                     .setService(new OkService())
-                    .setPathMapping(PathMapping.ofExact("/ok"))
+                    .setRoute(Route.builder().path("/ok").build())
                     .setDecorators(ImmutableList.of(LoggingService.newDecorator()));
         }
     }

File: spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java
Patch:
@@ -59,7 +59,7 @@
 
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.SessionProtocol;
-import com.linecorp.armeria.server.PathMapping;
+import com.linecorp.armeria.server.Route;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.docs.DocServiceBuilder;
@@ -202,7 +202,7 @@ private static ServerBuilder configureService(ServerBuilder sb, HttpHandler http
                                                   @Nullable String serverHeader) {
         final ArmeriaHttpHandlerAdapter handler =
                 new ArmeriaHttpHandlerAdapter(httpHandler, factoryWrapper);
-        return sb.service(PathMapping.ofCatchAll(), (ctx, req) -> {
+        return sb.service(Route.builder().catchAll().build(), (ctx, req) -> {
             final CompletableFuture<HttpResponse> future = new CompletableFuture<>();
             final HttpResponse response = HttpResponse.from(future);
             final Disposable disposable = handler.handle(ctx, req, future, serverHeader).subscribe();

File: thrift/src/main/java/com/linecorp/armeria/common/thrift/ThriftCall.java
Patch:
@@ -63,7 +63,7 @@ public boolean equals(@Nullable Object o) {
             return true;
         }
 
-        if (o == null || getClass() != o.getClass()) {
+        if (!(o instanceof ThriftCall)) {
             return false;
         }
 

File: thrift/src/main/java/com/linecorp/armeria/common/thrift/ThriftMessage.java
Patch:
@@ -50,7 +50,7 @@ public boolean equals(Object o) {
             return true;
         }
 
-        if (o == null || getClass() != o.getClass()) {
+        if (!(o instanceof ThriftMessage)) {
             return false;
         }
 

File: thrift/src/main/java/com/linecorp/armeria/common/thrift/ThriftReply.java
Patch:
@@ -109,7 +109,7 @@ public boolean equals(@Nullable Object o) {
             return true;
         }
 
-        if (o == null || getClass() != o.getClass()) {
+        if (!(o instanceof ThriftReply)) {
             return false;
         }
 

File: thrift/src/main/java/com/linecorp/armeria/server/thrift/ThriftDocServicePlugin.java
Patch:
@@ -55,7 +55,7 @@
 import com.google.common.collect.ImmutableSet;
 
 import com.linecorp.armeria.common.thrift.ThriftProtocolFactories;
-import com.linecorp.armeria.server.PathMapping;
+import com.linecorp.armeria.server.Route;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceConfig;
 import com.linecorp.armeria.server.docs.DocServiceFilter;
@@ -123,8 +123,8 @@ public ServiceSpecification generateSpecification(Set<ServiceConfig> serviceConf
 
                     // Add all available endpoints. Accept only the services with exact and prefix path
                     // mappings, whose endpoint path can be determined.
-                    final PathMapping pathMapping = c.pathMapping();
-                    final String path = pathMapping.exactPath().orElse(pathMapping.prefix().orElse(null));
+                    final Route route = c.route();
+                    final String path = route.exactPath().orElse(route.prefix().orElse(null));
                     if (path != null) {
                         builder.endpoint(new EndpointInfoBuilder(c.virtualHost().hostnamePattern(), path)
                                                  .fragment(serviceName)

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftDocServicePluginTest.java
Patch:
@@ -43,7 +43,7 @@
 
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.thrift.ThriftSerializationFormats;
-import com.linecorp.armeria.server.PathMapping;
+import com.linecorp.armeria.server.Route;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.docs.DocServiceFilter;
@@ -161,8 +161,8 @@ public void include() {
 
     private static Map<String, ServiceInfo> services(DocServiceFilter include, DocServiceFilter exclude) {
         final Server server = new ServerBuilder()
-                .service(PathMapping.ofExact("/hello"), THttpService.of(mock(AsyncIface.class)))
-                .service(PathMapping.ofExact("/foo"),
+                .service(Route.builder().exact("/hello").build(), THttpService.of(mock(AsyncIface.class)))
+                .service(Route.builder().exact("/foo").build(),
                          THttpService.ofFormats(mock(FooService.AsyncIface.class),
                                                 ThriftSerializationFormats.COMPACT))
                 .build();

File: core/src/main/java/com/linecorp/armeria/client/DefaultHttpClient.java
Patch:
@@ -20,7 +20,7 @@
 
 import javax.annotation.Nullable;
 
-import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.AggregatedHttpRequest;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.SessionProtocol;
@@ -70,11 +70,11 @@ private HttpResponse execute(@Nullable EventLoop eventLoop, HttpRequest req) {
     }
 
     @Override
-    public HttpResponse execute(AggregatedHttpMessage aggregatedReq) {
+    public HttpResponse execute(AggregatedHttpRequest aggregatedReq) {
         return execute(null, aggregatedReq);
     }
 
-    HttpResponse execute(@Nullable EventLoop eventLoop, AggregatedHttpMessage aggregatedReq) {
+    HttpResponse execute(@Nullable EventLoop eventLoop, AggregatedHttpRequest aggregatedReq) {
         return execute(eventLoop, HttpRequest.of(aggregatedReq));
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java
Patch:
@@ -52,7 +52,7 @@ final class Http1ResponseDecoder extends HttpResponseDecoder implements ChannelI
     private enum State {
         NEED_HEADERS,
         NEED_INFORMATIONAL_DATA,
-        NEED_DATA_OR_TRAILING_HEADERS,
+        NEED_DATA_OR_TRAILERS,
         DISCARD
     }
 
@@ -158,7 +158,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                         if (nettyRes.status().codeClass() == HttpStatusClass.INFORMATIONAL) {
                             state = State.NEED_INFORMATIONAL_DATA;
                         } else {
-                            state = State.NEED_DATA_OR_TRAILING_HEADERS;
+                            state = State.NEED_DATA_OR_TRAILERS;
                         }
 
                         res.scheduleTimeout(channel().eventLoop());
@@ -174,7 +174,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                         failWithUnexpectedMessageType(ctx, msg);
                     }
                     break;
-                case NEED_DATA_OR_TRAILING_HEADERS:
+                case NEED_DATA_OR_TRAILERS:
                     if (msg instanceof HttpContent) {
                         final HttpContent content = (HttpContent) msg;
                         final DecoderResult decoderResult = content.decoderResult();

File: core/src/main/java/com/linecorp/armeria/client/encoding/HttpDecodedResponse.java
Patch:
@@ -65,7 +65,7 @@ protected HttpObject filter(HttpObject obj) {
             }
 
             if (headersReceived) {
-                // Trailing headers, no modification.
+                // Trailers, no modification.
                 return obj;
             }
 

File: core/src/main/java/com/linecorp/armeria/common/HttpRequestDuplicator.java
Patch:
@@ -43,7 +43,7 @@
  *     // Do something according to the first few elements of the request.
  * });
  *
- * final CompletableFuture<AggregatedHttpMessage> future2 = dupReq2.aggregate();
+ * final CompletableFuture<AggregatedHttpRequest> future2 = dupReq2.aggregate();
  * future2.handle((message, cause) -> {
  *     // Do something with message.
  * }

File: core/src/main/java/com/linecorp/armeria/common/logging/RequestLog.java
Patch:
@@ -485,7 +485,7 @@ default int statusCode() {
     Object rawRequestContent();
 
     /**
-     * Returns the trailing {@link HttpHeaders} of the {@link Request}.
+     * Returns the HTTP trailers of the {@link Request}.
      *
      * @throws RequestLogAvailabilityException if this property is not available yet
      */
@@ -538,7 +538,7 @@ default int statusCode() {
     String responseContentPreview();
 
     /**
-     * Returns the trailing {@link HttpHeaders} of the {@link Response}.
+     * Returns the HTTP trailers of the {@link Response}.
      *
      * @throws RequestLogAvailabilityException if this property is not available yet
      */

File: core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java
Patch:
@@ -134,7 +134,7 @@ private ChannelFuture writeServerHeaders(
         final HttpObject converted = convertServerHeaders(streamId, headers, endStream);
         final String status = headers.get(HttpHeaderNames.STATUS);
         if (status == null) {
-            // Trailing headers
+            // Trailers
             final ChannelFuture f = write(id, converted, endStream);
             ch.flush();
             return f;

File: core/src/main/java/com/linecorp/armeria/server/Http1RequestDecoder.java
Patch:
@@ -177,7 +177,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                             cfg.maxRequestLength());
 
                     // Close the request early when it is sure that there will be
-                    // neither content nor trailing headers.
+                    // neither content nor trailers.
                     if (contentEmpty && !HttpUtil.isTransferEncodingChunked(nettyReq)) {
                         req.close();
                     }

File: core/src/main/java/com/linecorp/armeria/server/Http2RequestDecoder.java
Patch:
@@ -137,7 +137,7 @@ public void onHeadersRead(ChannelHandlerContext ctx, int streamId, Http2Headers
                                          true, inboundTrafficController, cfg.maxRequestLength());
 
             // Close the request early when it is sure that there will be
-            // neither content nor trailing headers.
+            // neither content nor trailers.
             if (contentEmpty && endOfStream) {
                 req.close();
             }

File: core/src/main/java/com/linecorp/armeria/server/annotation/AdditionalTrailer.java
Patch:
@@ -22,20 +22,20 @@
 import java.lang.annotation.Target;
 
 /**
- * Annotation for an additional HTTP trailing header.
+ * Annotation for an additional HTTP trailer.
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Repeatable(AdditionalTrailers.class)
 @Target({ ElementType.TYPE, ElementType.METHOD})
 public @interface AdditionalTrailer {
 
     /**
-     * The name of the HTTP trailing header to set.
+     * The name of the HTTP trailer to set.
      */
     String name();
 
     /**
-     * The values of the HTTP trailing header to set.
+     * The values of the HTTP trailer to set.
      */
     String[] value();
 }

File: core/src/main/java/com/linecorp/armeria/server/annotation/NullToNoContentResponseConverterFunction.java
Patch:
@@ -33,7 +33,7 @@ public final class NullToNoContentResponseConverterFunction implements ResponseC
     public HttpResponse convertResponse(ServiceRequestContext ctx,
                                         ResponseHeaders headers,
                                         @Nullable Object result,
-                                        HttpHeaders trailingHeaders) throws Exception {
+                                        HttpHeaders trailers) throws Exception {
         if (result == null) {
             // Ignore the specified headers and return '204 No Content'.
             return HttpResponse.of(HttpStatus.NO_CONTENT);

File: core/src/main/java/com/linecorp/armeria/server/annotation/RequestConverter.java
Patch:
@@ -22,10 +22,10 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.AggregatedHttpRequest;
 
 /**
- * Specifies a {@link RequestConverterFunction} class which converts an {@link AggregatedHttpMessage} to
+ * Specifies a {@link RequestConverterFunction} class which converts an {@link AggregatedHttpRequest} to
  * an object.
  *
  * <p>It can be specified on a class, a method and a parameter in an annotated service.

File: core/src/main/java/com/linecorp/armeria/server/annotation/RequestConverterFunction.java
Patch:
@@ -18,12 +18,12 @@
 
 import javax.annotation.Nullable;
 
-import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.AggregatedHttpRequest;
 import com.linecorp.armeria.internal.FallthroughException;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 /**
- * Converts an {@link AggregatedHttpMessage} to an object. The class implementing this interface would
+ * Converts an {@link AggregatedHttpRequest} to an object. The class implementing this interface would
  * be specified as a value of a {@link RequestConverter} annotation.
  *
  * @see RequestConverter
@@ -38,7 +38,7 @@ public interface RequestConverterFunction {
      * this converter cannot convert the {@code request} to an object.
      */
     @Nullable
-    Object convertRequest(ServiceRequestContext ctx, AggregatedHttpMessage request,
+    Object convertRequest(ServiceRequestContext ctx, AggregatedHttpRequest request,
                           Class<?> expectedResultType) throws Exception;
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/encoding/HttpEncodedResponse.java
Patch:
@@ -81,7 +81,7 @@ protected HttpObject filter(HttpObject obj) {
             }
 
             if (headersSent) {
-                // Trailing headers, no modification.
+                // Trailers, no modification.
                 return obj;
             }
 

File: core/src/test/java/com/linecorp/armeria/client/Http2ClientSettingsTest.java
Patch:
@@ -39,7 +39,7 @@
 
 import com.google.common.io.ByteStreams;
 
-import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.testing.junit4.common.EventLoopRule;
 
 import io.netty.buffer.ByteBuf;
@@ -75,7 +75,7 @@ public void initialConnectionAndStreamWindowSize() throws Exception {
             final int port = ss.getLocalPort();
 
             final HttpClient client = HttpClient.of(clientFactory, "h2c://127.0.0.1:" + port);
-            final CompletableFuture<AggregatedHttpMessage> future = client.get("/").aggregate();
+            final CompletableFuture<AggregatedHttpResponse> future = client.get("/").aggregate();
 
             try (Socket s = ss.accept()) {
 

File: core/src/test/java/com/linecorp/armeria/client/HttpClientMaxConcurrentStreamTest.java
Patch:
@@ -33,7 +33,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 
-import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.util.EventLoopGroups;
@@ -136,7 +136,7 @@ public void connectionClosed(SessionProtocol protocol, InetSocketAddress remoteA
         };
 
         // Send (2 * MAX_CONCURRENT_STREAMS) requests to create 2 connections, never more and never less.
-        final List<CompletableFuture<AggregatedHttpMessage>> receivedResponses = new ArrayList<>();
+        final List<CompletableFuture<AggregatedHttpResponse>> receivedResponses = new ArrayList<>();
         final int NUM_CONNECTIONS = 2;
         for (int j = 0; j < NUM_CONNECTIONS; j++) {
             final int expectedOpens = j + 1;

File: core/src/test/java/com/linecorp/armeria/common/HttpRequestSubscriberTest.java
Patch:
@@ -100,7 +100,7 @@ public HttpRequestSubscriberTest(HttpRequest request) {
 
     @Test
     public void shouldCompleteFutureWithoutCause() throws Exception {
-        final AggregatedHttpMessage response = client.execute(request).aggregate().join();
+        final AggregatedHttpResponse response = client.execute(request).aggregate().join();
         assertThat(response.status()).isEqualTo(HttpStatus.OK);
 
         final CompletableFuture<Void> f = request.completionFuture();

File: core/src/test/java/com/linecorp/armeria/common/logging/DefaultRequestLogTest.java
Patch:
@@ -31,7 +31,7 @@
 
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.ClientRequestContextBuilder;
-import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.AggregatedHttpRequest;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
@@ -202,7 +202,7 @@ public void toStringRequestBuilderCapacity() {
                 RequestHeaders.of(HttpMethod.POST, "/armeria/awesome",
                                   HttpHeaderNames.CONTENT_LENGTH, VERY_LONG_STRING.length());
         final HttpRequest req = HttpRequest.of(
-                AggregatedHttpMessage.of(reqHeaders, HttpData.ofUtf8(VERY_LONG_STRING)));
+                AggregatedHttpRequest.of(reqHeaders, HttpData.ofUtf8(VERY_LONG_STRING)));
         final ClientRequestContext ctx = ClientRequestContextBuilder.of(req).build();
 
         final RequestLogBuilder logBuilder = ctx.logBuilder();
@@ -229,7 +229,7 @@ public void toStringResponseBuilderCapacity() {
                 RequestHeaders.of(HttpMethod.POST, "/armeria/awesome",
                                   HttpHeaderNames.CONTENT_LENGTH, VERY_LONG_STRING.length());
         final HttpRequest req = HttpRequest.of(
-                AggregatedHttpMessage.of(reqHeaders, HttpData.ofUtf8(VERY_LONG_STRING)));
+                AggregatedHttpRequest.of(reqHeaders, HttpData.ofUtf8(VERY_LONG_STRING)));
         final ClientRequestContext ctx = ClientRequestContextBuilder.of(req).build();
         final RequestLogBuilder logBuilder = ctx.logBuilder();
         logBuilder.endRequest();

File: core/src/test/java/com/linecorp/armeria/internal/ArmeriaHttpUtilTest.java
Patch:
@@ -371,7 +371,7 @@ public void excludeBlacklistHeadersWhileHttp2ToHttp1() throws Http2Exception {
     }
 
     @Test
-    public void excludeBlacklistInTrailingHeaders() throws Http2Exception {
+    public void excludeBlacklistInTrailers() throws Http2Exception {
         final HttpHeaders in = HttpHeaders.builder()
                                           .add(HttpHeaderNames.of("foo"), "bar")
                                           .add(HttpHeaderNames.TRANSFER_ENCODING, "dummy")

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceDecorationTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.Test;
 
 import com.linecorp.armeria.client.HttpClient;
-import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
@@ -168,7 +168,7 @@ public HttpResponse serve(Service<HttpRequest, HttpResponse> delegate,
     public void testDecoratingAnnotatedService() throws Exception {
         final HttpClient client = HttpClient.of(rule.uri("/"));
 
-        AggregatedHttpMessage response;
+        AggregatedHttpResponse response;
 
         response = client.execute(RequestHeaders.of(HttpMethod.GET, "/1/ok")).aggregate().get();
         assertThat(response.status()).isEqualTo(HttpStatus.OK);

File: core/src/test/java/com/linecorp/armeria/server/PortUnificationServerTest.java
Patch:
@@ -34,7 +34,7 @@
 import com.linecorp.armeria.client.ClientFactory;
 import com.linecorp.armeria.client.ClientFactoryBuilder;
 import com.linecorp.armeria.client.HttpClient;
-import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
@@ -87,8 +87,8 @@ public void httpAndHttpsUsesSamePort() {
     public void test() throws Exception {
         final HttpClient client = HttpClient.of(clientFactory,
                                                 scheme + "://127.0.0.1:" + server.httpsPort() + '/');
-        final AggregatedHttpMessage response = client.execute(HttpRequest.of(HttpMethod.GET, "/"))
-                                                     .aggregate().join();
+        final AggregatedHttpResponse response = client.execute(HttpRequest.of(HttpMethod.GET, "/"))
+                                                      .aggregate().join();
         assertThat(response.contentUtf8()).isEqualToIgnoringCase(scheme);
     }
 }

File: core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java
Patch:
@@ -28,7 +28,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 import com.linecorp.armeria.client.HttpClient;
-import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpResponse;
@@ -119,7 +119,7 @@ public String produce() {
     @Test
     void routeService() throws InterruptedException {
         final HttpClient client = HttpClient.of(server.uri("/"));
-        AggregatedHttpMessage res = client.get("/greet/armeria").aggregate().join();
+        AggregatedHttpResponse res = client.get("/greet/armeria").aggregate().join();
         propertyCheckLatch.await();
         assertThat(res.status()).isSameAs(HttpStatus.OK);
         assertThat(res.contentUtf8()).isEqualTo("armeria");
@@ -138,7 +138,7 @@ void routeService() throws InterruptedException {
     @Test
     void consumesAndProduces() throws IOException {
         final HttpClient client = HttpClient.of(server.uri("/"));
-        AggregatedHttpMessage res = client.execute(RequestHeaders.of(HttpMethod.POST, "/hello"), "armeria")
+        AggregatedHttpResponse res = client.execute(RequestHeaders.of(HttpMethod.POST, "/hello"), "armeria")
                                           .aggregate().join();
         assertThat(res.status()).isSameAs(HttpStatus.UNSUPPORTED_MEDIA_TYPE);
 

File: core/src/test/java/com/linecorp/armeria/server/annotation/JacksonRequestConverterFunctionTest.java
Patch:
@@ -24,7 +24,7 @@
 
 import org.junit.Test;
 
-import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.AggregatedHttpRequest;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.internal.FallthroughException;
@@ -34,7 +34,7 @@ public class JacksonRequestConverterFunctionTest {
 
     private static final RequestConverterFunction function = new JacksonRequestConverterFunction();
     private static final ServiceRequestContext ctx = mock(ServiceRequestContext.class);
-    private static final AggregatedHttpMessage req = mock(AggregatedHttpMessage.class);
+    private static final AggregatedHttpRequest req = mock(AggregatedHttpRequest.class);
 
     static final String JSON_TEXT = "{\"key\": \"value\"}";
 

File: core/src/test/java/com/linecorp/armeria/server/annotation/ServerSentEventResponseConverterFunctionTest.java
Patch:
@@ -50,7 +50,7 @@ public class ServerSentEventResponseConverterFunctionTest {
     private static final ResponseHeaders EVENT_STREAM_HEADER =
             ResponseHeaders.of(HttpStatus.OK,
                                HttpHeaderNames.CONTENT_TYPE, MediaType.EVENT_STREAM);
-    private static final HttpHeaders DEFAULT_TRAILING_HEADERS = HttpHeaders.of();
+    private static final HttpHeaders DEFAULT_TRAILERS = HttpHeaders.of();
 
     @Test
     public void dataStringUtf8() throws Exception {
@@ -175,6 +175,6 @@ public void singleEvent() throws Exception {
     }
 
     private static HttpResponse doConvert(Object result) throws Exception {
-        return function.convertResponse(ctx, EVENT_STREAM_HEADER, result, DEFAULT_TRAILING_HEADERS);
+        return function.convertResponse(ctx, EVENT_STREAM_HEADER, result, DEFAULT_TRAILERS);
     }
 }

File: core/src/test/java/com/linecorp/armeria/server/file/HttpFileServiceAdditionalHeadersTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.Test;
 
 import com.linecorp.armeria.client.HttpClient;
-import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.server.ServerBuilder;
@@ -48,7 +48,7 @@ protected void configure(ServerBuilder sb) throws Exception {
     @Test
     public void testAdditionalHeaders() {
         final HttpClient client = HttpClient.of(server.uri("/"));
-        final AggregatedHttpMessage res = client.get("/java/lang/Object.class").aggregate().join();
+        final AggregatedHttpResponse res = client.get("/java/lang/Object.class").aggregate().join();
         assertThat(res.status()).isEqualTo(HttpStatus.OK);
         assertThat(res.headers().getAll(HttpHeaderNames.of("foo"))).containsExactly("1", "2");
         assertThat(res.headers().getAll(HttpHeaderNames.of("bar"))).containsExactly("3");

File: core/src/test/java/com/linecorp/armeria/server/healthcheck/HttpHealthCheckServiceTest.java
Patch:
@@ -34,7 +34,7 @@
 
 import com.google.common.io.ByteStreams;
 
-import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpStatus;
@@ -74,7 +74,7 @@ public void healthy() throws Exception {
 
         final HttpRequest req = HttpRequest.of(HttpMethod.GET, "/");
         final ServiceRequestContext context = ServiceRequestContext.of(req);
-        final AggregatedHttpMessage res = service.serve(context, req).aggregate().get();
+        final AggregatedHttpResponse res = service.serve(context, req).aggregate().get();
 
         assertEquals(HttpStatus.OK, res.status());
         assertEquals("ok", res.contentUtf8());
@@ -102,7 +102,7 @@ public void notHealthyWhenServerIsStopping() throws Exception {
     private void assertNotOk() throws Exception {
         final HttpRequest req = HttpRequest.of(HttpMethod.GET, "/");
         final ServiceRequestContext context = ServiceRequestContext.of(req);
-        final AggregatedHttpMessage res = service.serve(context, req).aggregate().get();
+        final AggregatedHttpResponse res = service.serve(context, req).aggregate().get();
 
         assertEquals(HttpStatus.SERVICE_UNAVAILABLE, res.status());
         assertEquals("not ok", res.contentUtf8());

File: core/src/test/java/com/linecorp/armeria/server/streaming/JsonTextSequencesTest.java
Patch:
@@ -29,7 +29,7 @@
 import com.google.common.util.concurrent.MoreExecutors;
 
 import com.linecorp.armeria.client.HttpClient;
-import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpObject;
 import com.linecorp.armeria.common.HttpResponse;
@@ -85,7 +85,7 @@ public void fromPublisherOrStream() {
 
     @Test
     public void singleSequence() {
-        final AggregatedHttpMessage response =
+        final AggregatedHttpResponse response =
                 HttpClient.of(rule.uri("/seq")).get("/single").aggregate().join();
         assertThat(response.status()).isEqualTo(HttpStatus.OK);
         assertThat(response.headers().contentType()).isEqualTo(MediaType.JSON_SEQ);

File: examples/saml-service-provider/src/main/java/example/armeria/server/saml/sp/MyAuthHandler.java
Patch:
@@ -15,7 +15,7 @@
 
 import com.google.common.base.Strings;
 
-import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.AggregatedHttpRequest;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpRequest;
@@ -66,7 +66,7 @@ public CompletionStage<Boolean> authorize(ServiceRequestContext ctx, HttpRequest
      * browser via {@code Set-Cookie} header.
      */
     @Override
-    public HttpResponse loginSucceeded(ServiceRequestContext ctx, AggregatedHttpMessage req,
+    public HttpResponse loginSucceeded(ServiceRequestContext ctx, AggregatedHttpRequest req,
                                        MessageContext<Response> message, @Nullable String sessionIndex,
                                        @Nullable String relayState) {
         final String username =
@@ -95,7 +95,7 @@ public HttpResponse loginSucceeded(ServiceRequestContext ctx, AggregatedHttpMess
      * Invoked when a single sign-on request is rejected from the identity provider.
      */
     @Override
-    public HttpResponse loginFailed(ServiceRequestContext ctx, AggregatedHttpMessage req,
+    public HttpResponse loginFailed(ServiceRequestContext ctx, AggregatedHttpRequest req,
                                     @Nullable MessageContext<Response> message, Throwable cause) {
         return HttpResponse.of(HttpStatus.UNAUTHORIZED, MediaType.HTML_UTF_8,
                                "<html><body>Login failed.</body></html>");

File: examples/spring-boot-minimal/src/test/java/example/springframework/boot/minimal/HelloApplicationIntegrationTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.springframework.test.context.junit4.SpringRunner;
 
 import com.linecorp.armeria.client.HttpClient;
-import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.server.Server;
 
@@ -35,15 +35,15 @@ public void setup() {
 
     @Test
     public void success() {
-        final AggregatedHttpMessage response = client.get("/hello/Spring").aggregate().join();
+        final AggregatedHttpResponse response = client.get("/hello/Spring").aggregate().join();
         assertThat(response.status()).isEqualTo(HttpStatus.OK);
         assertThat(response.contentUtf8())
                 .isEqualTo("Hello, Spring! This message is from Armeria annotated service!");
     }
 
     @Test
     public void failure() {
-        final AggregatedHttpMessage response = client.get("/hello/a").aggregate().join();
+        final AggregatedHttpResponse response = client.get("/hello/a").aggregate().join();
         assertThat(response.status()).isEqualTo(HttpStatus.BAD_REQUEST);
         assertThatJson(response.contentUtf8())
                 .node("message")

File: examples/static-files/src/test/java/example/armeria/server/files/MainTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.Test;
 
 import com.linecorp.armeria.client.HttpClient;
-import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.server.Server;
@@ -37,15 +37,15 @@ public static void afterClass() {
     @Test
     public void testFavicon() {
         // Download the favicon.
-        final AggregatedHttpMessage res = client.get("/favicon.ico").aggregate().join();
+        final AggregatedHttpResponse res = client.get("/favicon.ico").aggregate().join();
         assertThat(res.status()).isEqualTo(HttpStatus.OK);
         assertThat(res.headers().contentType()).isEqualTo(MediaType.parse("image/x-icon"));
     }
 
     @Test
     public void testDirectoryListing() {
         // Download the directory listing.
-        final AggregatedHttpMessage res = client.get("/").aggregate().join();
+        final AggregatedHttpResponse res = client.get("/").aggregate().join();
         assertThat(res.status()).isEqualTo(HttpStatus.OK);
         assertThat(res.content().toStringUtf8()).contains("Directory listing: /");
     }

File: grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/UnaryGrpcClient.java
Patch:
@@ -160,15 +160,15 @@ public void messageRead(ByteBufOrStream unframed) {
                                    responseFuture.complete(HttpResponse.of(
                                            msg.headers(),
                                            new ByteBufHttpData(buf, true),
-                                           msg.trailingHeaders()));
+                                           msg.trailers()));
                                }
 
                                @Override
                                public void endOfStream() {
                                    if (!responseFuture.isDone()) {
                                        responseFuture.complete(HttpResponse.of(msg.headers(),
                                                                                HttpData.EMPTY_DATA,
-                                                                               msg.trailingHeaders()));
+                                                                               msg.trailers()));
                                    }
                                }
                            }, Integer.MAX_VALUE, ctx.alloc())) {

File: grpc/src/test/java/com/linecorp/armeria/common/grpc/protocol/AbstractUnaryGrpcServiceTest.java
Patch:
@@ -29,7 +29,7 @@
 
 import com.linecorp.armeria.client.Clients;
 import com.linecorp.armeria.client.HttpClient;
-import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
@@ -109,9 +109,9 @@ public void normal_upstream() {
 
     @Test
     public void invalidPayload() {
-        HttpClient client = HttpClient.of(server.httpUri("/"));
+        final HttpClient client = HttpClient.of(server.httpUri("/"));
 
-        AggregatedHttpMessage message =
+        final AggregatedHttpResponse message =
                 client.post("/armeria.grpc.testing.TestService/UnaryCall", "foobarbreak").aggregate().join();
 
         assertThat(message.headers().get(HttpHeaderNames.STATUS)).isEqualTo(HttpStatus.OK.codeAsText());

File: rxjava/src/test/java/com/linecorp/armeria/server/rxjava/ObservableResponseConverterFunctionProviderTest.java
Patch:
@@ -83,7 +83,7 @@ private static class DummyResponseConverter implements ResponseConverterFunction
         public HttpResponse convertResponse(ServiceRequestContext ctx,
                                             ResponseHeaders headers,
                                             @Nullable Object result,
-                                            HttpHeaders trailingHeaders) throws Exception {
+                                            HttpHeaders trailers) throws Exception {
             return HttpResponse.of(HttpStatus.OK);
         }
     }

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlMetadataServiceFunction.java
Patch:
@@ -49,7 +49,7 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.MapMaker;
 
-import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.AggregatedHttpRequest;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpResponse;
@@ -97,7 +97,7 @@ final class SamlMetadataServiceFunction implements SamlServiceFunction {
     }
 
     @Override
-    public HttpResponse serve(ServiceRequestContext ctx, AggregatedHttpMessage msg,
+    public HttpResponse serve(ServiceRequestContext ctx, AggregatedHttpRequest req,
                               String defaultHostname, SamlPortConfig portConfig) {
         final HttpData metadata = metadataMap.computeIfAbsent(defaultHostname, h -> {
             try {

File: spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationWithoutMeterTest.java
Patch:
@@ -34,7 +34,7 @@
 import org.springframework.test.context.junit4.SpringRunner;
 
 import com.linecorp.armeria.client.HttpClient;
-import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.server.Server;
@@ -71,7 +71,7 @@ public void testHttpServiceRegistrationBean() throws Exception {
 
         final HttpResponse response = client.get("/ok");
 
-        final AggregatedHttpMessage msg = response.aggregate().get();
+        final AggregatedHttpResponse msg = response.aggregate().get();
         assertThat(msg.status()).isEqualTo(HttpStatus.OK);
         assertThat(msg.contentUtf8()).isEqualTo("ok");
     }

File: spring/boot-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaClientAutoConfigurationTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.springframework.web.reactive.function.client.WebClient;
 
 import com.linecorp.armeria.client.HttpClient;
-import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.AggregatedHttpResponse;
 
 import reactor.core.publisher.Mono;
 
@@ -71,7 +71,7 @@ Mono<String> hello() {
     @Test
     public void shouldGetHelloFromRestController() throws Exception {
         final HttpClient client = HttpClient.of("http://127.0.0.1:" + port);
-        final AggregatedHttpMessage response = client.get("/proxy?port=" + port).aggregate().join();
+        final AggregatedHttpResponse response = client.get("/proxy?port=" + port).aggregate().join();
         assertThat(response.contentUtf8()).isEqualTo("hello");
     }
 }

File: testing-internal/src/main/java/com/linecorp/armeria/testing/internal/webapp/WebAppContainerTest.java
Patch:
@@ -42,7 +42,7 @@
 import com.linecorp.armeria.client.ClientFactory;
 import com.linecorp.armeria.client.ClientFactoryBuilder;
 import com.linecorp.armeria.client.HttpClient;
-import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.testing.junit4.server.ServerRule;
@@ -143,7 +143,7 @@ public void https() throws Exception {
                 .sslContextCustomizer(b -> b.trustManager(InsecureTrustManagerFactory.INSTANCE))
                 .build();
         final HttpClient client = HttpClient.of(clientFactory, server().httpsUri("/"));
-        final AggregatedHttpMessage response = client.get("/jsp/index.jsp").aggregate().get();
+        final AggregatedHttpResponse response = client.get("/jsp/index.jsp").aggregate().get();
         final String actualContent = CR_OR_LF.matcher(response.contentUtf8())
                                              .replaceAll("");
         assertThat(actualContent).isEqualTo(

File: thrift/src/main/java/com/linecorp/armeria/server/thrift/THttpService.java
Patch:
@@ -44,7 +44,7 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
 
-import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.AggregatedHttpRequest;
 import com.linecorp.armeria.common.DefaultRpcResponse;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaderNames;
@@ -479,7 +479,7 @@ private SerializationFormat findSerializationFormat(MediaType contentType) {
     }
 
     private void decodeAndInvoke(
-            ServiceRequestContext ctx, AggregatedHttpMessage req,
+            ServiceRequestContext ctx, AggregatedHttpRequest req,
             SerializationFormat serializationFormat, CompletableFuture<HttpResponse> httpRes) {
         final HttpData content = req.content();
         final ByteBuf buf;

File: thrift/src/test/java/com/linecorp/armeria/it/metric/PrometheusMetricsIntegrationTest.java
Patch:
@@ -42,7 +42,7 @@
 import com.linecorp.armeria.client.ClientFactoryBuilder;
 import com.linecorp.armeria.client.HttpClient;
 import com.linecorp.armeria.client.metric.MetricCollectingClient;
-import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.AggregatedHttpResponse;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.MediaType;
@@ -300,8 +300,8 @@ private static void makeRequest(String path, String serviceName, String name) th
         client.hello(name);
     }
 
-    private static AggregatedHttpMessage makeMetricsRequest() throws ExecutionException,
-                                                                     InterruptedException {
+    private static AggregatedHttpResponse makeMetricsRequest() throws ExecutionException,
+                                                                      InterruptedException {
         final HttpClient client = HttpClient.of("http://127.0.0.1:" + server.httpPort());
         return client.execute(RequestHeaders.of(HttpMethod.GET, "/internal/prometheus/metrics",
                                                 HttpHeaderNames.ACCEPT, MediaType.PLAIN_TEXT_UTF_8))

File: zookeeper/src/test/java/com/linecorp/armeria/server/zookeeper/ZooKeeperRegistrationTest.java
Patch:
@@ -30,7 +30,7 @@
 
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.client.zookeeper.ZooKeeperTestBase;
-import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.AggregatedHttpRequest;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
@@ -131,7 +131,7 @@ protected final HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req)
                                         .exceptionally(CompletionActions::log));
         }
 
-        protected HttpResponse echo(AggregatedHttpMessage aReq) {
+        protected HttpResponse echo(AggregatedHttpRequest aReq) {
             return HttpResponse.of(ResponseHeaders.of(HttpStatus.OK), aReq.content());
         }
     }

File: saml/src/main/java/com/linecorp/armeria/server/saml/HttpPostBindingUtil.java
Patch:
@@ -109,7 +109,8 @@ static <T extends SAMLObject> MessageContext<T> toSamlObject(AggregatedHttpMessa
         try {
             decoded = Base64.getMimeDecoder().decode(parameters.getFirstValue(name));
         } catch (IllegalArgumentException e) {
-            throw new SamlException("failed to decode a base64 string of the parameter: " + name, e);
+            throw new InvalidSamlRequestException(
+                    "failed to decode a base64 string of the parameter: " + name, e);
         }
 
         @SuppressWarnings("unchecked")

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlException.java
Patch:
@@ -20,7 +20,7 @@
 import com.linecorp.armeria.common.Flags;
 
 /**
- * A checked {@link Exception} which is raised from SAML services.
+ * Indicates that an error occurred while processing a SAML request.
  */
 public class SamlException extends RuntimeException {
 

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlService.java
Patch:
@@ -207,12 +207,12 @@ static final class SamlParameters {
         /**
          * Returns the first value of the parameter with the specified {@code name}.
          *
-         * @throws SamlException if a parameter with the specified {@code name} does not exist
+         * @throws InvalidSamlRequestException if a parameter with the specified {@code name} does not exist
          */
         String getFirstValue(String name) {
             final String value = getFirstValueOrNull(name);
             if (value == null) {
-                throw new SamlException("failed to get the value of a parameter: " + name);
+                throw new InvalidSamlRequestException("failed to get the value of a parameter: " + name);
             }
             return value;
         }

File: core/src/main/java/com/linecorp/armeria/server/Http1RequestDecoder.java
Patch:
@@ -171,7 +171,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                     this.req = req = new DecodedHttpRequest(
                             ctx.channel().eventLoop(),
                             id, 1,
-                            ArmeriaHttpUtil.toArmeria(nettyReq),
+                            ArmeriaHttpUtil.toArmeria(ctx, nettyReq, cfg),
                             HttpUtil.isKeepAlive(nettyReq),
                             inboundTrafficController,
                             cfg.maxRequestLength());

File: core/src/main/java/com/linecorp/armeria/server/Http2ServerConnectionHandler.java
Patch:
@@ -31,12 +31,12 @@ final class Http2ServerConnectionHandler extends AbstractHttp2ConnectionHandler
 
     Http2ServerConnectionHandler(Http2ConnectionDecoder decoder, Http2ConnectionEncoder encoder,
                                  Http2Settings initialSettings, Channel channel, ServerConfig config,
-                                 GracefulShutdownSupport gracefulShutdownSupport) {
+                                 GracefulShutdownSupport gracefulShutdownSupport, String scheme) {
 
         super(decoder, encoder, initialSettings);
 
         this.gracefulShutdownSupport = gracefulShutdownSupport;
-        requestDecoder = new Http2RequestDecoder(config, channel, encoder());
+        requestDecoder = new Http2RequestDecoder(config, channel, encoder(), scheme);
         connection().addListener(requestDecoder);
         decoder().frameListener(requestDecoder);
 

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostServiceBindingBuilder.java
Patch:
@@ -34,7 +34,7 @@
  * {@link VirtualHostBuilder#route()}. You can also configure a {@link Service} using
  * {@link VirtualHostBuilder#withRoute(Consumer)}.
  *
- * <p>Call {@link #service(Service)} to build the {@link Service} and return to the {@link VirtualHostBuilder}.
+ * <p>Call {@link #build(Service)} to build the {@link Service} and return to the {@link VirtualHostBuilder}.
  *
  * <pre>{@code
  * ServerBuilder sb = new ServerBuilder();
@@ -212,7 +212,7 @@ VirtualHostServiceBindingBuilder decorator(Function<T, R> decorator) {
      *
      * @throws IllegalStateException if the path that the {@link Service} will be bound to is not specified
      */
-    public VirtualHostBuilder service(Service<HttpRequest, HttpResponse> service) {
+    public VirtualHostBuilder build(Service<HttpRequest, HttpResponse> service) {
         build0(service);
         return virtualHostBuilder;
     }

File: core/src/test/java/com/linecorp/armeria/server/VirtualHostServiceBindingBuilderTest.java
Patch:
@@ -49,7 +49,7 @@ public void serviceBindingBuilder() {
           .verboseResponses(true)
           .requestContentPreviewerFactory(requestFactory)
           .responseContentPreviewerFactory(responseFactory)
-          .service((ctx, req) -> HttpResponse.of(OK));
+          .build((ctx, req) -> HttpResponse.of(OK));
 
         final List<ServiceConfig> serviceConfigs = sb.build().serviceConfigs();
         assertThat(serviceConfigs.size()).isOne();
@@ -79,7 +79,7 @@ public void withRoute() {
                    .requestTimeoutMillis(10)
                    .maxRequestLength(8192)
                    .verboseResponses(true)
-                   .service((ctx, req) -> HttpResponse.of(OK));
+                   .build((ctx, req) -> HttpResponse.of(OK));
         });
 
         final List<ServiceConfig> serviceConfigs = sb.build().serviceConfigs();

File: core/src/main/java/com/linecorp/armeria/server/HttpServerPipelineConfigurator.java
Patch:
@@ -34,8 +34,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.common.collect.Iterables;
-
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.internal.ChannelUtil;
@@ -137,7 +135,7 @@ protected void initChannel(Channel ch) throws Exception {
     private void configurePipeline(ChannelPipeline p, Set<SessionProtocol> protocols,
                                    @Nullable ProxiedAddresses proxiedAddresses) {
         if (protocols.size() == 1) {
-            switch (Iterables.getFirst(protocols, null)) {
+            switch (protocols.iterator().next()) {
                 case HTTP:
                     configureHttp(p, proxiedAddresses);
                     break;

File: core/src/test/java/com/linecorp/armeria/client/HttpClientSniTest.java
Patch:
@@ -59,11 +59,11 @@ public class HttpClientSniTest {
             sscA = new SelfSignedCertificate("a.com");
             sscB = new SelfSignedCertificate("b.com");
 
-            sb.withVirtualHost("a.com")
+            sb.virtualHost("a.com")
               .service("/", new SniTestService("a.com"))
               .tls(sscA.certificate(), sscA.privateKey())
               .and()
-              .withDefaultVirtualHost()
+              .defaultVirtualHost()
               .defaultHostname("b.com")
               .service("/", new SniTestService("b.com"))
               .tls(sscB.certificate(), sscB.privateKey());

File: core/src/test/java/com/linecorp/armeria/server/PathMappingContextTest.java
Patch:
@@ -120,7 +120,7 @@ static PathMappingContext create(String path, @Nullable String query) {
 
     static VirtualHost virtualHost() {
         final HttpService service = mock(HttpService.class);
-        final Server server = new ServerBuilder().withVirtualHost("example.com")
+        final Server server = new ServerBuilder().virtualHost("example.com")
                                                  .serviceUnder("/", service)
                                                  .and().build();
         return server.config().findVirtualHost("example.com");

File: core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java
Patch:
@@ -40,7 +40,7 @@
 import com.linecorp.armeria.common.logging.RequestLogAvailability;
 import com.linecorp.armeria.testing.junit.server.ServerExtension;
 
-class RouteServiceTest {
+class ServiceBindingTest {
 
     private static final CountDownLatch propertyCheckLatch = new CountDownLatch(1);
 
@@ -83,7 +83,7 @@ public String produce() {
                   }, RequestLogAvailability.COMPLETE);
                   return delegate.serve(ctx, req);
               })
-              .service((ctx, req) -> {
+              .build((ctx, req) -> {
                   if (req.method() == HttpMethod.GET) {
                       return HttpResponse.of(ctx.pathParam("name"));
                   }
@@ -99,7 +99,7 @@ public String produce() {
               .methods(HttpMethod.POST)
               .consumes(MediaType.JSON, MediaType.PLAIN_TEXT_UTF_8)
               .produces(MediaType.JSON, MediaType.PLAIN_TEXT_UTF_8)
-              .service((ctx, req) -> HttpResponse.from(
+              .build((ctx, req) -> HttpResponse.from(
                       req.aggregate().thenApply(request -> {
                           final String resContent;
                           final MediaType contentType = req.contentType();

File: core/src/test/java/com/linecorp/armeria/server/SniServerTest.java
Patch:
@@ -71,14 +71,14 @@ protected void configure(ServerBuilder sb) throws Exception {
             dnsResolver.add("mismatch.com", NetUtil.LOCALHOST4);
             dnsResolver.add("127.0.0.1", NetUtil.LOCALHOST4);
 
-            sb.withVirtualHost("a.com")
+            sb.virtualHost("a.com")
               .service("/", new SniTestService("a.com"))
               .tls(sscA.certificateFile(), sscA.privateKeyFile())
               .and()
-              .withVirtualHost("b.com")
+              .virtualHost("b.com")
               .service("/", new SniTestService("b.com"))
               .tls(sscB.certificateFile(), sscB.privateKeyFile());
-            sb.withDefaultVirtualHost()
+            sb.defaultVirtualHost()
               .defaultHostname("c.com")
               .service("/", new SniTestService("c.com"))
               .tls(sscC.certificateFile(), sscC.privateKeyFile());

File: grpc/src/test/java/com/linecorp/armeria/internal/grpc/GrpcTestUtil.java
Patch:
@@ -46,6 +46,7 @@ public final class GrpcTestUtil {
             SimpleResponse.newBuilder()
                           .setPayload(Payload.newBuilder()
                                              .setBody(ByteString.copyFromUtf8("grpc and armeria")))
+                          .setOauthScope("oauth-scope")
                           .build();
 
     public static byte[] uncompressedResponseBytes() {

File: core/src/main/java/com/linecorp/armeria/client/Http2ResponseDecoder.java
Patch:
@@ -194,7 +194,7 @@ public void onHeadersRead(ChannelHandlerContext ctx, int streamId, Http2Headers
 
         res.logResponseFirstBytesTransferred();
 
-        final HttpHeaders converted = ArmeriaHttpUtil.toArmeria(headers, endOfStream);
+        final HttpHeaders converted = ArmeriaHttpUtil.toArmeria(headers, false, endOfStream);
         try {
             // If this tryWrite() returns false, it means the response stream has been closed due to
             // disconnection or by the response consumer. We do not need to handle such cases here because

File: core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java
Patch:
@@ -26,6 +26,7 @@
 import com.google.common.base.Strings;
 
 import com.linecorp.armeria.client.HttpChannelPool.PoolKey;
+import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.SessionProtocol;
@@ -136,7 +137,7 @@ private void acquireConnectionAndExecute(ClientRequestContext ctx, Endpoint endp
 
     @VisibleForTesting
     static String extractHost(ClientRequestContext ctx, HttpRequest req, Endpoint endpoint) {
-        String host = extractHost(ctx.additionalRequestHeaders().authority());
+        String host = extractHost(ctx.additionalRequestHeaders().get(HttpHeaderNames.AUTHORITY));
         if (host != null) {
             return host;
         }

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerStrategy.java
Patch:
@@ -22,10 +22,10 @@
 import javax.annotation.Nullable;
 
 import com.linecorp.armeria.client.ClientRequestContext;
-import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.HttpStatusClass;
 import com.linecorp.armeria.common.Response;
+import com.linecorp.armeria.common.ResponseHeaders;
 
 /**
  * Determines whether a {@link Response} should be reported as a success or a failure to a
@@ -66,15 +66,15 @@ static CircuitBreakerStrategy onStatus(BiFunction<HttpStatus, Throwable, Boolean
      * {@link CircuitBreaker#onSuccess()} is called so that the {@link CircuitBreaker} increases its success
      * count and uses it to make a decision to close or open the circuit. If {@code false} is returned, it works
      * the other way around. If {@code null} is returned, the {@link CircuitBreaker} ignores it.
-     * To retrieve the response {@link HttpHeaders}, you can use the specified {@link ClientRequestContext}:
+     * To retrieve the {@link ResponseHeaders}, you can use the specified {@link ClientRequestContext}:
      *
      * <pre>{@code
      * CompletionStage<Backoff> shouldReportAsSuccess(ClientRequestContext ctx, @Nullable Throwable cause) {
      *     if (cause != null) {
      *         return CompletableFuture.completedFuture(false);
      *     }
      *
-     *     HttpHeaders responseHeaders = ctx.log().responseHeaders();
+     *     ResponseHeaders responseHeaders = ctx.log().responseHeaders();
      *     if (responseHeaders.status().codeClass() == HttpStatusClass.SERVER_ERROR) {
      *         return CompletableFuture.completedFuture(false);
      *     }

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerStrategyWithContent.java
Patch:
@@ -19,12 +19,11 @@
 import java.util.concurrent.CompletionStage;
 
 import com.linecorp.armeria.client.ClientRequestContext;
-import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.Response;
 
 /**
  * Determines whether a {@link Response} should be reported as a success or a failure to a
- * {@link CircuitBreaker} using the content of a {@link Response}. If you just need the {@link HttpHeaders}
+ * {@link CircuitBreaker} using the content of a {@link Response}. If you just need the HTTP headers
  * to make a decision, use {@link CircuitBreakerStrategy} for efficiency.
  *
  * @param <T> the response type

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategy.java
Patch:
@@ -25,10 +25,10 @@
 
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.UnprocessedRequestException;
-import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.HttpStatusClass;
 import com.linecorp.armeria.common.Response;
+import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.util.Exceptions;
 
 /**
@@ -115,14 +115,14 @@ static RetryStrategy onStatus(
      * Implement this method to return a {@link CompletionStage} and to complete it with a desired
      * {@link Backoff}. To stop trying further, complete it with {@code null}.
      *
-     * <p>To retrieve the response {@link HttpHeaders}, you can use the specified {@link ClientRequestContext}:
+     * <p>To retrieve the {@link ResponseHeaders}, you can use the specified {@link ClientRequestContext}:
      * <pre>{@code
      * CompletionStage<Backoff> shouldRetry(ClientRequestContext ctx, @Nullable Throwable cause) {
      *     if (cause != null) {
      *         return CompletableFuture.completedFuture(backoff);
      *     }
      *
-     *     HttpHeaders responseHeaders = ctx.log().responseHeaders();
+     *     ResponseHeaders responseHeaders = ctx.log().responseHeaders();
      *     if (responseHeaders.status().codeClass() == HttpStatusClass.SERVER_ERROR) {
      *         return CompletableFuture.completedFuture(backoff);
      *     }

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategyWithContent.java
Patch:
@@ -19,12 +19,11 @@
 import java.util.concurrent.CompletionStage;
 
 import com.linecorp.armeria.client.ClientRequestContext;
-import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.Response;
 
 /**
  * Determines whether a failed request should be retried using the content of a {@link Response}.
- * If you just need the {@link HttpHeaders} to make a decision, use {@link RetryStrategy} for efficiency.
+ * If you just need the headers to make a decision, use {@link RetryStrategy} for efficiency.
  *
  * @param <T> the response type
  */

File: core/src/main/java/com/linecorp/armeria/common/DefaultAggregatedHttpMessage.java
Patch:
@@ -23,12 +23,12 @@
 
 final class DefaultAggregatedHttpMessage implements AggregatedHttpMessage {
 
-    private final List<HttpHeaders> informationals;
+    private final List<ResponseHeaders> informationals;
     private final HttpHeaders headers;
     private final HttpData content;
     private final HttpHeaders trailingHeaders;
 
-    DefaultAggregatedHttpMessage(List<HttpHeaders> informationals, HttpHeaders headers,
+    DefaultAggregatedHttpMessage(List<ResponseHeaders> informationals, HttpHeaders headers,
                                  HttpData content, HttpHeaders trailingHeaders) {
         this.informationals = informationals;
         this.headers = headers;
@@ -37,7 +37,7 @@ final class DefaultAggregatedHttpMessage implements AggregatedHttpMessage {
     }
 
     @Override
-    public List<HttpHeaders> informationals() {
+    public List<ResponseHeaders> informationals() {
         return informationals;
     }
 

File: core/src/main/java/com/linecorp/armeria/common/HttpObject.java
Patch:
@@ -22,7 +22,7 @@
 public interface HttpObject {
 
     /**
-     * Gets whether the stream should be ended when writing this object. This can be useful for
+     * Tells whether the stream should be ended when writing this object. This can be useful for
      * {@link HttpHeaders}-only responses or to more efficiently close the stream along with the last piece of
      * {@link HttpData}. This only has meaning for {@link HttpObject} writers, not readers.
      */

File: core/src/main/java/com/linecorp/armeria/common/HttpRequestAggregator.java
Patch:
@@ -32,7 +32,7 @@ final class HttpRequestAggregator extends HttpMessageAggregator {
                           @Nullable ByteBufAllocator alloc) {
         super(future, alloc);
         this.request = request;
-        trailingHeaders = HttpHeaders.EMPTY_HEADERS;
+        trailingHeaders = HttpHeaders.of();
     }
 
     @Override
@@ -67,6 +67,6 @@ protected AggregatedHttpMessage onSuccess(HttpData content) {
 
     @Override
     protected void onFailure() {
-        trailingHeaders = HttpHeaders.EMPTY_HEADERS;
+        trailingHeaders = HttpHeaders.of();
     }
 }

File: core/src/main/java/com/linecorp/armeria/common/HttpRequestWriter.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * An {@link HttpRequest} that can have {@link HttpObject}s written to it.
- * Use {@link HttpRequest#streaming(HttpHeaders)} to construct.
+ * Use {@link HttpRequest#streaming(RequestHeaders)} to construct.
  */
 public interface HttpRequestWriter extends HttpRequest, StreamWriter<HttpObject> {
 }

File: core/src/main/java/com/linecorp/armeria/common/PublisherBasedHttpRequest.java
Patch:
@@ -22,15 +22,15 @@
 
 final class PublisherBasedHttpRequest extends PublisherBasedStreamMessage<HttpObject> implements HttpRequest {
 
-    private final HttpHeaders headers;
+    private final RequestHeaders headers;
 
-    PublisherBasedHttpRequest(HttpHeaders headers, Publisher<? extends HttpObject> publisher) {
+    PublisherBasedHttpRequest(RequestHeaders headers, Publisher<? extends HttpObject> publisher) {
         super(publisher);
         this.headers = headers;
     }
 
     @Override
-    public HttpHeaders headers() {
+    public RequestHeaders headers() {
         return headers;
     }
 }

File: core/src/main/java/com/linecorp/armeria/common/util/TextFormatter.java
Patch:
@@ -183,7 +183,7 @@ public static void appendEpochMillis(StringBuilder buf, long timeMillis) {
      *
      * @return the human readable string representation of the given epoch time
      */
-    public static StringBuilder epochMicro(long timeMicros) {
+    public static StringBuilder epochMicros(long timeMicros) {
         // 24 (human readable part) + 2 (parens) + 19 (max digits of a long integer)
         final StringBuilder buf = new StringBuilder(45);
         appendEpochMicros(buf, timeMicros);

File: core/src/main/java/com/linecorp/armeria/internal/HttpObjectEncoder.java
Patch:
@@ -56,8 +56,8 @@ public final ChannelFuture writeHeaders(int id, int streamId, HttpHeaders header
         return doWriteHeaders(id, streamId, headers, endStream);
     }
 
-    protected abstract ChannelFuture doWriteHeaders(
-            int id, int streamId, HttpHeaders headers, boolean endStream);
+    protected abstract ChannelFuture doWriteHeaders(int id, int streamId, HttpHeaders headers,
+                                                    boolean endStream);
 
     /**
      * Writes an {@link HttpData}.

File: core/src/main/java/com/linecorp/armeria/internal/logging/LoggingUtil.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.net.InetSocketAddress;
 
+import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
 
 import io.netty.channel.Channel;
@@ -35,7 +36,7 @@ public final class LoggingUtil {
     public static String remoteHost(HttpHeaders headers, Channel channel) {
         requireNonNull(headers, "headers");
         requireNonNull(channel, "channel");
-        String host = headers.authority();
+        String host = headers.get(HttpHeaderNames.AUTHORITY);
         if (host == null) {
             host = ((InetSocketAddress) channel.remoteAddress()).getHostString();
         } else {

File: core/src/main/java/com/linecorp/armeria/server/ClientAddressSource.java
Patch:
@@ -16,6 +16,7 @@
 package com.linecorp.armeria.server;
 
 import static com.google.common.base.Preconditions.checkArgument;
+import static java.util.Objects.requireNonNull;
 
 import java.util.List;
 
@@ -53,7 +54,7 @@ public final class ClientAddressSource {
      * in a request will be used to determine a client address.
      */
     public static ClientAddressSource ofHeader(CharSequence header) {
-        checkArgument(header != null && header.length() > 0, "empty header");
+        checkArgument(requireNonNull(header, "header").length() > 0, "empty header");
         return new ClientAddressSource(HttpHeaderNames.of(header));
     }
 

File: core/src/main/java/com/linecorp/armeria/server/DecodedHttpRequest.java
Patch:
@@ -23,6 +23,7 @@
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpObject;
 import com.linecorp.armeria.common.HttpResponse;
+import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.internal.InboundTrafficController;
 
 import io.netty.channel.ChannelHandlerContext;
@@ -44,7 +45,7 @@ final class DecodedHttpRequest extends DefaultHttpRequest {
     private HttpResponse response;
     private boolean isResponseAborted;
 
-    DecodedHttpRequest(EventLoop eventLoop, int id, int streamId, HttpHeaders headers, boolean keepAlive,
+    DecodedHttpRequest(EventLoop eventLoop, int id, int streamId, RequestHeaders headers, boolean keepAlive,
                        InboundTrafficController inboundTrafficController, long maxRequestLength) {
 
         super(headers);

File: core/src/main/java/com/linecorp/armeria/server/HttpHeaderUtil.java
Patch:
@@ -98,7 +98,7 @@ static InetAddress determineClientAddress(HttpHeaders headers,
 
     @VisibleForTesting
     @Nullable
-    static InetAddress getFirstValidAddress(String headerValue,
+    static InetAddress getFirstValidAddress(@Nullable String headerValue,
                                             Function<String, String> valueConverter,
                                             Predicate<InetAddress> filter) {
         if (Strings.isNullOrEmpty(headerValue)) {

File: core/src/main/java/com/linecorp/armeria/server/RedirectService.java
Patch:
@@ -28,10 +28,10 @@
 import javax.annotation.Nullable;
 
 import com.linecorp.armeria.common.HttpHeaderNames;
-import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
+import com.linecorp.armeria.common.ResponseHeaders;
 
 /**
  * An {@link HttpService} that sends a redirect response such as {@code "307 Temporary Redirect"}.
@@ -262,8 +262,8 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
             location = appendQueryString(ctx, location);
         }
 
-        return HttpResponse.of(HttpHeaders.of(httpStatus)
-                                          .set(HttpHeaderNames.LOCATION, location));
+        return HttpResponse.of(ResponseHeaders.of(httpStatus,
+                                                  HttpHeaderNames.LOCATION, location));
     }
 
     private static String appendQueryString(ServiceRequestContext ctx, String location) {

File: core/src/main/java/com/linecorp/armeria/server/annotation/DefaultHttpResult.java
Patch:
@@ -34,11 +34,11 @@ final class DefaultHttpResult<T> implements HttpResult<T> {
     private final HttpHeaders trailingHeaders;
 
     DefaultHttpResult(HttpHeaders headers) {
-        this(headers, null, HttpHeaders.EMPTY_HEADERS);
+        this(headers, null, HttpHeaders.of());
     }
 
     DefaultHttpResult(HttpHeaders headers, T content) {
-        this(headers, requireNonNull(content, "content"), HttpHeaders.EMPTY_HEADERS);
+        this(headers, requireNonNull(content, "content"), HttpHeaders.of());
     }
 
     DefaultHttpResult(HttpHeaders headers, @Nullable T content, HttpHeaders trailingHeaders) {

File: core/src/main/java/com/linecorp/armeria/server/annotation/JacksonResponseConverterFunction.java
Patch:
@@ -33,6 +33,7 @@
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.MediaType;
+import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.streaming.JsonTextSequences;
@@ -67,7 +68,7 @@ public JacksonResponseConverterFunction(ObjectMapper mapper) {
 
     @Override
     public HttpResponse convertResponse(ServiceRequestContext ctx,
-                                        HttpHeaders headers,
+                                        ResponseHeaders headers,
                                         @Nullable Object result,
                                         HttpHeaders trailingHeaders) throws Exception {
         final MediaType mediaType = headers.contentType();
@@ -105,7 +106,7 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,
             }
         } else if (result instanceof JsonNode) {
             // No media type is specified, but the result is a JsonNode type.
-            return HttpResponse.of(headers.toMutable().contentType(MediaType.JSON_UTF_8),
+            return HttpResponse.of(headers.toBuilder().contentType(MediaType.JSON_UTF_8).build(),
                                    toJsonHttpData(result), trailingHeaders);
         }
 

File: core/src/main/java/com/linecorp/armeria/server/annotation/NullToNoContentResponseConverterFunction.java
Patch:
@@ -20,6 +20,7 @@
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
+import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 /**
@@ -30,7 +31,7 @@ public final class NullToNoContentResponseConverterFunction implements ResponseC
 
     @Override
     public HttpResponse convertResponse(ServiceRequestContext ctx,
-                                        HttpHeaders headers,
+                                        ResponseHeaders headers,
                                         @Nullable Object result,
                                         HttpHeaders trailingHeaders) throws Exception {
         if (result == null) {

File: core/src/main/java/com/linecorp/armeria/server/annotation/ServerSentEventResponseConverterFunction.java
Patch:
@@ -28,6 +28,7 @@
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.MediaType;
+import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.sse.ServerSentEvent;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
@@ -41,7 +42,7 @@ public class ServerSentEventResponseConverterFunction implements ResponseConvert
 
     @Override
     public HttpResponse convertResponse(ServiceRequestContext ctx,
-                                        HttpHeaders headers,
+                                        ResponseHeaders headers,
                                         @Nullable Object result,
                                         HttpHeaders trailingHeaders) throws Exception {
         final MediaType contentType = headers.contentType();

File: core/src/main/java/com/linecorp/armeria/server/annotation/StringResponseConverterFunction.java
Patch:
@@ -29,6 +29,7 @@
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.MediaType;
+import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 /**
@@ -39,7 +40,7 @@ public class StringResponseConverterFunction implements ResponseConverterFunctio
 
     @Override
     public HttpResponse convertResponse(ServiceRequestContext ctx,
-                                        HttpHeaders headers,
+                                        ResponseHeaders headers,
                                         @Nullable Object result,
                                         HttpHeaders trailingHeaders) throws Exception {
         final MediaType mediaType = headers.contentType();
@@ -61,7 +62,7 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,
                 return HttpResponse.of(headers, toHttpData(result, charset), trailingHeaders);
             }
         } else if (result instanceof CharSequence) {
-            return HttpResponse.of(headers.toMutable().contentType(MediaType.PLAIN_TEXT_UTF_8),
+            return HttpResponse.of(headers.toBuilder().contentType(MediaType.PLAIN_TEXT_UTF_8).build(),
                                    HttpData.ofUtf8(((CharSequence) result).toString()),
                                    trailingHeaders);
         }

File: core/src/main/java/com/linecorp/armeria/server/docs/DocServiceBuilder.java
Patch:
@@ -171,7 +171,7 @@ private DocServiceBuilder exampleHttpHeaders0(String serviceName, String methodN
         for (HttpHeaders h : exampleHttpHeaders) {
             requireNonNull(h, "exampleHttpHeaders contains null.");
             this.exampleHttpHeaders.computeIfAbsent(serviceName, unused -> ArrayListMultimap.create())
-                                   .put(methodName, HttpHeaders.copyOf(h).asImmutable());
+                                   .put(methodName, h);
         }
         return this;
     }

File: core/src/main/java/com/linecorp/armeria/server/file/AggregatedHttpFile.java
Patch:
@@ -22,7 +22,7 @@
 import javax.annotation.Nullable;
 
 import com.linecorp.armeria.common.HttpData;
-import com.linecorp.armeria.common.HttpHeaders;
+import com.linecorp.armeria.common.ResponseHeaders;
 
 import io.netty.buffer.ByteBufAllocator;
 
@@ -51,14 +51,14 @@ public interface AggregatedHttpFile extends HttpFile {
     HttpFileAttributes readAttributes();
 
     /**
-     * Returns the attributes of this file as {@link HttpHeaders}, which could be useful for building
+     * Returns the attributes of this file as {@link ResponseHeaders}, which could be useful for building
      * a response for a {@code HEAD} request.
      *
      * @return the headers, or {@code null} if the file does not exist.
      */
     @Nullable
     @Override
-    HttpHeaders readHeaders();
+    ResponseHeaders readHeaders();
 
     /**
      * Returns the content of the file.

File: core/src/main/java/com/linecorp/armeria/server/file/CachingHttpFile.java
Patch:
@@ -28,8 +28,8 @@
 import com.google.common.util.concurrent.MoreExecutors;
 import com.spotify.futures.CompletableFutures;
 
-import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpResponse;
+import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.server.HttpService;
 
@@ -57,7 +57,7 @@ public HttpFileAttributes readAttributes() throws IOException {
 
     @Nullable
     @Override
-    public HttpHeaders readHeaders() throws IOException {
+    public ResponseHeaders readHeaders() throws IOException {
         return file.readHeaders();
     }
 

File: core/src/main/java/com/linecorp/armeria/server/file/HttpDataFile.java
Patch:
@@ -30,6 +30,7 @@
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.MediaType;
+import com.linecorp.armeria.common.ResponseHeaders;
 
 import io.netty.buffer.ByteBufAllocator;
 import io.netty.buffer.ByteBufHolder;
@@ -75,7 +76,7 @@ public HttpFileAttributes readAttributes() {
     }
 
     @Override
-    public HttpHeaders readHeaders() {
+    public ResponseHeaders readHeaders() {
         try {
             return super.readHeaders();
         } catch (IOException e) {
@@ -84,7 +85,7 @@ public HttpHeaders readHeaders() {
     }
 
     @Override
-    protected HttpResponse doRead(HttpHeaders headers, long length,
+    protected HttpResponse doRead(ResponseHeaders headers, long length,
                                   Executor fileReadExecutor, ByteBufAllocator alloc) {
         if (content instanceof ByteBufHolder) {
             final ByteBufHolder holder = (ByteBufHolder) content;

File: core/src/main/java/com/linecorp/armeria/server/file/HttpFileBuilder.java
Patch:
@@ -159,7 +159,7 @@ private static final class FileSystemHttpFileBuilder extends HttpFileBuilder {
         @Override
         public HttpFile build() {
             return new FileSystemHttpFile(path, isContentTypeAutoDetectionEnabled(), clock(), isDateEnabled(),
-                                          isLastModifiedEnabled(), entityTagFunction(), headers());
+                                          isLastModifiedEnabled(), entityTagFunction(), buildHeaders());
         }
     }
 
@@ -174,7 +174,7 @@ private static final class ClassPathHttpFileBuilder extends HttpFileBuilder {
         @Override
         public HttpFile build() {
             return new ClassPathHttpFile(url, isContentTypeAutoDetectionEnabled(), clock(), isDateEnabled(),
-                                         isLastModifiedEnabled(), entityTagFunction(), headers());
+                                         isLastModifiedEnabled(), entityTagFunction(), buildHeaders());
         }
     }
 
@@ -199,7 +199,7 @@ private static final class HttpDataFileBuilder extends HttpFileBuilder {
         public AggregatedHttpFile build() {
             return new HttpDataFile(content, clock(), lastModifiedMillis,
                                     isDateEnabled(), isLastModifiedEnabled(),
-                                    entityTagFunction(), headers());
+                                    entityTagFunction(), buildHeaders());
         }
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/file/HttpFileService.java
Patch:
@@ -37,11 +37,11 @@
 
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaderNames;
-import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
+import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.metric.MeterIdPrefix;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.internal.metric.CaffeineMetricSupport;
@@ -218,8 +218,8 @@ private HttpFile findFile(ServiceRequestContext ctx, HttpRequest req) throws IOE
             if (findFile(ctx, decodedMappedPath + "/index.html", supportedEncodings) != null ||
                 config.autoIndex() && config.vfs().canList(decodedMappedPath)) {
                 throw HttpResponseException.of(HttpResponse.of(
-                        HttpHeaders.of(HttpStatus.TEMPORARY_REDIRECT)
-                                   .set(HttpHeaderNames.LOCATION, ctx.path() + '/')));
+                        ResponseHeaders.of(HttpStatus.TEMPORARY_REDIRECT,
+                                           HttpHeaderNames.LOCATION, ctx.path() + '/')));
             }
         }
 

File: core/src/main/java/com/linecorp/armeria/server/file/NonExistentHttpFile.java
Patch:
@@ -20,9 +20,9 @@
 import javax.annotation.Nullable;
 
 import com.linecorp.armeria.common.HttpData;
-import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
+import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.server.HttpService;
 
 import io.netty.buffer.ByteBufAllocator;
@@ -33,14 +33,15 @@ final class NonExistentHttpFile implements AggregatedHttpFile {
 
     private NonExistentHttpFile() {}
 
+    @Nullable
     @Override
     public HttpFileAttributes readAttributes() {
         return null;
     }
 
     @Nullable
     @Override
-    public HttpHeaders readHeaders() {
+    public ResponseHeaders readHeaders() {
         return null;
     }
 

File: core/src/main/java/com/linecorp/armeria/server/file/StreamingHttpFile.java
Patch:
@@ -38,6 +38,7 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpResponseWriter;
 import com.linecorp.armeria.common.MediaType;
+import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.unsafe.ByteBufHttpData;
 
 import io.netty.buffer.ByteBuf;
@@ -76,7 +77,7 @@ protected StreamingHttpFile(@Nullable MediaType contentType,
     }
 
     @Override
-    protected final HttpResponse doRead(HttpHeaders headers, long length,
+    protected final HttpResponse doRead(ResponseHeaders headers, long length,
                                         Executor fileReadExecutor, ByteBufAllocator alloc) throws IOException {
         final T in = newStream();
         if (in == null) {

File: core/src/test/java/com/linecorp/armeria/client/ClientOptionsTest.java
Patch:
@@ -32,7 +32,7 @@ public void testSetHttpHeader() {
         assertThat(options.get(ClientOption.HTTP_HEADERS)).contains(httpHeader);
 
         final ClientOptions options2 = ClientOptions.DEFAULT;
-        assertThat(options2.get(ClientOption.HTTP_HEADERS)).contains(HttpHeaders.EMPTY_HEADERS);
+        assertThat(options2.get(ClientOption.HTTP_HEADERS)).contains(HttpHeaders.of());
     }
 
     @Test(expected = IllegalArgumentException.class)

File: core/src/test/java/com/linecorp/armeria/client/DefaultHttpClientTest.java
Patch:
@@ -25,10 +25,10 @@
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
 
-import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
+import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.metric.NoopMeterRegistry;
 
@@ -47,7 +47,7 @@ public void testConcatenateRequestPath() throws Exception {
                 clientBuilderParams, mockClientDelegate, NoopMeterRegistry.get(),
                 SessionProtocol.of("http"), Endpoint.of("127.0.0.1"));
 
-        defaultHttpClient.execute(HttpRequest.of(HttpHeaders.of(HttpMethod.GET, requestPath)));
+        defaultHttpClient.execute(HttpRequest.of(RequestHeaders.of(HttpMethod.GET, requestPath)));
 
         final ArgumentCaptor<HttpRequest> argCaptor = ArgumentCaptor.forClass(HttpRequest.class);
         verify(mockClientDelegate).execute(any(ClientRequestContext.class), argCaptor.capture());

File: core/src/test/java/com/linecorp/armeria/client/HttpClientSniTest.java
Patch:
@@ -27,12 +27,12 @@
 
 import com.linecorp.armeria.common.AggregatedHttpMessage;
 import com.linecorp.armeria.common.HttpHeaderNames;
-import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
+import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.common.util.SafeCloseable;
 import com.linecorp.armeria.server.AbstractHttpService;
 import com.linecorp.armeria.server.Server;
@@ -129,8 +129,8 @@ private static String get(String fqdn) throws Exception {
     public void testCustomAuthority() throws Exception {
         final HttpClient client = HttpClient.of(clientFactory, "https://127.0.0.1:" + httpsPort);
         final AggregatedHttpMessage response =
-                client.execute(HttpHeaders.of(HttpMethod.GET, "/")
-                                          .set(HttpHeaderNames.AUTHORITY, "a.com:" + httpsPort))
+                client.execute(RequestHeaders.of(HttpMethod.GET, "/",
+                                                 HttpHeaderNames.AUTHORITY, "a.com:" + httpsPort))
                       .aggregate().get();
 
         assertEquals(HttpStatus.OK, response.status());

File: core/src/test/java/com/linecorp/armeria/client/HttpClientWithRequestLogTest.java
Patch:
@@ -73,8 +73,9 @@ public void exceptionRaisedInDecorator() {
     public void invalidPath() {
         final HttpClient client = new HttpClientBuilder(LOCAL_HOST)
                 .decorator((delegate, ctx, req) -> {
-                    req.headers().path("/%");
-                    return delegate.execute(ctx, req);
+                    final HttpRequest badReq = HttpRequest.of(req, req.headers().toBuilder()
+                                                                      .path("/%").build());
+                    return delegate.execute(ctx, badReq);
                 })
                 .decorator(new ExceptionHoldingDecorator())
                 .build();

File: core/src/test/java/com/linecorp/armeria/client/endpoint/StickyEndpointSelectionStrategyTest.java
Patch:
@@ -27,9 +27,9 @@
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.common.HttpHeaderNames;
-import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
+import com.linecorp.armeria.common.RequestHeaders;
 
 public class StickyEndpointSelectionStrategyTest {
 
@@ -97,7 +97,7 @@ public void select() {
     }
 
     private static ClientRequestContext contextWithHeader(String k, String v) {
-        return ClientRequestContext.of(HttpRequest.of(HttpHeaders.of(HttpMethod.GET, "/")
-                                                                 .set(HttpHeaderNames.of(k), v)));
+        return ClientRequestContext.of(HttpRequest.of(RequestHeaders.of(HttpMethod.GET, "/",
+                                                                        HttpHeaderNames.of(k), v)));
     }
 }

File: core/src/test/java/com/linecorp/armeria/common/HttpHeadersJsonDeserializerTest.java
Patch:
@@ -21,7 +21,7 @@
 
 import java.io.IOException;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -42,8 +42,7 @@ public void singleString() throws IOException {
 
     @Test
     public void multipleValues() throws IOException {
-        final HttpHeaders expected = new DefaultHttpHeaders();
-        expected.set(NAME, "foo", "bar", "baz");
+        final HttpHeaders expected = HttpHeaders.builder().set(NAME, "foo", "bar", "baz").build();
         assertThat(mapper.readValue("{\"a\":[\"foo\",\"bar\",\"baz\"]}", HttpHeaders.class))
                 .isEqualTo(expected);
     }

File: core/src/test/java/com/linecorp/armeria/common/HttpRequestSubscriberTest.java
Patch:
@@ -44,7 +44,7 @@
 @RunWith(Parameterized.class)
 public class HttpRequestSubscriberTest {
 
-    private static final HttpHeaders headers = HttpHeaders.of(HttpMethod.POST, "/delayed_ok");
+    private static final RequestHeaders headers = RequestHeaders.of(HttpMethod.POST, "/delayed_ok");
 
     @ClassRule
     public static ServerRule rule = new ServerRule() {

File: core/src/test/java/com/linecorp/armeria/common/HttpResponseDuplicatorTest.java
Patch:
@@ -28,7 +28,8 @@ public void aggregateTwice() {
         final HttpResponseWriter publisher = HttpResponse.streaming();
         final HttpResponseDuplicator resDuplicator = new HttpResponseDuplicator(publisher);
 
-        publisher.write(HttpHeaders.of(HttpStatus.OK).contentType(MediaType.PLAIN_TEXT_UTF_8));
+        publisher.write(ResponseHeaders.of(HttpStatus.OK,
+                                           HttpHeaderNames.CONTENT_TYPE, MediaType.PLAIN_TEXT_UTF_8));
         publisher.write(HttpData.ofUtf8("Armeria "));
         publisher.write(HttpData.ofUtf8("is "));
         publisher.write(HttpData.ofUtf8("awesome!"));

File: core/src/test/java/com/linecorp/armeria/common/metric/MeterIdPrefixFunctionTest.java
Patch:
@@ -24,10 +24,10 @@
 
 import com.google.common.collect.ImmutableList;
 
-import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.RequestContext;
+import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.server.ServiceRequestContext;
@@ -105,7 +105,7 @@ public void defaultApply() {
         // HTTP response status.
         ctx = newContext(HttpMethod.GET, "/get", null);
         ctx.logBuilder().startResponse();
-        ctx.logBuilder().responseHeaders(HttpHeaders.of(200));
+        ctx.logBuilder().responseHeaders(ResponseHeaders.of(200));
         res = f.apply(registry, ctx.log());
         assertThat(res.name()).isEqualTo("foo");
         assertThat(res.tags()).containsExactly(Tag.of("hostnamePattern", "*"),
@@ -141,7 +141,7 @@ public void defaultActiveRequestPrefix() {
         // HTTP response status.
         ctx = newContext(HttpMethod.GET, "/get", null);
         ctx.logBuilder().startResponse();
-        ctx.logBuilder().responseHeaders(HttpHeaders.of(200));
+        ctx.logBuilder().responseHeaders(ResponseHeaders.of(200));
         res = f.activeRequestPrefix(registry, ctx.log());
         assertThat(res.name()).isEqualTo("foo");
         assertThat(res.tags()).containsExactly(Tag.of("hostnamePattern", "*"),

File: core/src/test/java/com/linecorp/armeria/common/util/TextFormatterTest.java
Patch:
@@ -51,7 +51,7 @@ public void elapsedAndSize() throws Exception {
     public void testFormatEpoch() throws Exception {
         assertThat(TextFormatter.epochMillis(1478601399123L).toString())
                 .isEqualTo("2016-11-08T10:36:39.123Z(1478601399123)");
-        assertThat(TextFormatter.epochMicro(1478601399123235L).toString())
+        assertThat(TextFormatter.epochMicros(1478601399123235L).toString())
                 .isEqualTo("2016-11-08T10:36:39.123Z(1478601399123235)");
     }
 }

File: core/src/test/java/com/linecorp/armeria/server/HttpServiceTest.java
Patch:
@@ -39,6 +39,7 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
+import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.server.logging.LoggingService;
 import com.linecorp.armeria.testing.junit4.server.ServerRule;
 
@@ -61,14 +62,14 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) {
             sb.service("/trailersWithoutData", new AbstractHttpService() {
                 @Override
                 protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) throws Exception {
-                    return HttpResponse.of(HttpHeaders.of(HttpStatus.OK),
+                    return HttpResponse.of(ResponseHeaders.of(HttpStatus.OK),
                                            HttpHeaders.of(HttpHeaderNames.of("foo"), "bar"));
                 }
             });
             sb.service("/dataAndTrailers", new AbstractHttpService() {
                 @Override
                 protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) throws Exception {
-                    return HttpResponse.of(HttpHeaders.of(HttpStatus.OK),
+                    return HttpResponse.of(ResponseHeaders.of(HttpStatus.OK),
                                            HttpData.ofUtf8("trailer"),
                                            HttpHeaders.of(HttpHeaderNames.of("foo"), "bar"));
                 }

File: core/src/test/java/com/linecorp/armeria/server/ServerTest.java
Patch:
@@ -51,11 +51,11 @@
 import com.google.common.util.concurrent.MoreExecutors;
 
 import com.linecorp.armeria.common.AggregatedHttpMessage;
-import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.Request;
+import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.metric.MeterIdPrefix;
 import com.linecorp.armeria.common.metric.PrometheusMeterRegistries;
 import com.linecorp.armeria.common.util.CompletionActions;
@@ -460,7 +460,7 @@ protected final HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req)
 
         protected HttpResponse echo(AggregatedHttpMessage aReq) {
             return HttpResponse.of(
-                    HttpHeaders.of(HttpStatus.OK),
+                    ResponseHeaders.of(HttpStatus.OK),
                     aReq.content());
         }
     }

File: core/src/test/java/com/linecorp/armeria/server/file/CachingHttpFileTest.java
Patch:
@@ -32,11 +32,11 @@
 import com.google.common.util.concurrent.MoreExecutors;
 
 import com.linecorp.armeria.common.HttpData;
-import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
+import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 import io.netty.buffer.ByteBufAllocator;
@@ -79,7 +79,7 @@ public void nonExistentFile() throws Exception {
     @Test
     public void existentFile() throws Exception {
         final HttpFileAttributes attrs = new HttpFileAttributes(3, 0);
-        final HttpHeaders headers = HttpHeaders.of(200);
+        final ResponseHeaders headers = ResponseHeaders.of(200);
         final HttpFile uncached = mock(HttpFile.class);
         when(uncached.readAttributes()).thenReturn(attrs);
         when(uncached.readHeaders()).thenReturn(headers);
@@ -150,7 +150,7 @@ public void existentFile() throws Exception {
     @Test
     public void largeFile() throws Exception {
         final HttpFileAttributes attrs = new HttpFileAttributes(5, 0);
-        final HttpHeaders headers = HttpHeaders.of(200);
+        final ResponseHeaders headers = ResponseHeaders.of(200);
         final HttpResponse res = HttpResponse.of("large");
         final CompletableFuture<AggregatedHttpFile> aggregated =
                 CompletableFuture.completedFuture(HttpFile.of(HttpData.ofUtf8("large"), 0));

File: examples/annotated-http-service/src/main/java/example/armeria/server/annotated/MessageConverterService.java
Patch:
@@ -15,6 +15,7 @@
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.MediaType;
+import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.common.logging.LogLevel;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.annotation.JacksonRequestConverterFunction;
@@ -167,7 +168,6 @@ public String from() {
     }
 
     public static final class CustomRequestConverter implements RequestConverterFunction {
-        @Nullable
         @Override
         public Object convertRequest(ServiceRequestContext ctx, AggregatedHttpMessage request,
                                      Class<?> expectedResultType) throws Exception {
@@ -182,7 +182,7 @@ public Object convertRequest(ServiceRequestContext ctx, AggregatedHttpMessage re
     public static final class CustomResponseConverter implements ResponseConverterFunction {
         @Override
         public HttpResponse convertResponse(ServiceRequestContext ctx,
-                                            HttpHeaders headers,
+                                            ResponseHeaders headers,
                                             @Nullable Object result,
                                             HttpHeaders trailingHeaders) throws Exception {
             if (result instanceof Response) {

File: grpc/src/test/java/com/linecorp/armeria/common/grpc/protocol/AbstractUnaryGrpcServiceTest.java
Patch:
@@ -30,6 +30,7 @@
 import com.linecorp.armeria.client.Clients;
 import com.linecorp.armeria.client.HttpClient;
 import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
 import com.linecorp.armeria.grpc.testing.Messages.Payload;
@@ -113,7 +114,7 @@ public void invalidPayload() {
         AggregatedHttpMessage message =
                 client.post("/armeria.grpc.testing.TestService/UnaryCall", "foobarbreak").aggregate().join();
 
-        assertThat(message.headers().status()).isEqualTo(HttpStatus.OK);
+        assertThat(message.headers().get(HttpHeaderNames.STATUS)).isEqualTo(HttpStatus.OK.codeAsText());
         assertThat(message.headers().get(GrpcHeaderNames.GRPC_STATUS))
                 .isEqualTo(Integer.toString(StatusCodes.INTERNAL));
         assertThat(message.headers().get(GrpcHeaderNames.GRPC_MESSAGE)).isNotBlank();

File: logback/src/main/java/com/linecorp/armeria/common/logback/RequestContextExporter.java
Patch:
@@ -55,6 +55,7 @@
 
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.Endpoint;
+import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.Request;
@@ -284,7 +285,7 @@ private static void exportAuthority(Map<String, String> out, RequestContext ctx,
 
     @Nullable
     private static String getAuthority(RequestContext ctx, HttpHeaders headers) {
-        String authority = headers.authority();
+        String authority = headers.get(HttpHeaderNames.AUTHORITY);
         if (authority != null) {
             final Pattern portPattern = ctx.sessionProtocol().isTls() ? PORT_443 : PORT_80;
             final Matcher m = portPattern.matcher(authority);

File: retrofit2/src/test/java/com/linecorp/armeria/client/retrofit2/ArmeriaCallFactoryLargeStreamTest.java
Patch:
@@ -29,10 +29,10 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 import com.linecorp.armeria.common.HttpData;
-import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
+import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.server.AbstractHttpService;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.ServiceRequestContext;
@@ -67,7 +67,7 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) throws
                         public void request(long n) {
                             for (int i = 0; i < n; i++) {
                                 if (count == 0) {
-                                    s.onNext(HttpHeaders.of(HttpStatus.OK));
+                                    s.onNext(ResponseHeaders.of(HttpStatus.OK));
                                 } else {
                                     s.onNext(HttpData.of(new byte[1024]));
                                 }

File: rxjava/src/main/java/com/linecorp/armeria/server/rxjava/ObservableResponseConverterFunction.java
Patch:
@@ -23,6 +23,7 @@
 
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpResponse;
+import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.annotation.ExceptionHandlerFunction;
 import com.linecorp.armeria.server.annotation.ResponseConverterFunction;
@@ -62,7 +63,7 @@ public ObservableResponseConverterFunction(ResponseConverterFunction responseCon
 
     @Override
     public HttpResponse convertResponse(ServiceRequestContext ctx,
-                                        HttpHeaders headers,
+                                        ResponseHeaders headers,
                                         @Nullable Object result,
                                         HttpHeaders trailingHeaders) throws Exception {
         if (result instanceof Observable) {
@@ -100,7 +101,7 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,
     }
 
     private HttpResponse onSuccess(ServiceRequestContext ctx,
-                                   HttpHeaders headers,
+                                   ResponseHeaders headers,
                                    @Nullable Object result,
                                    HttpHeaders trailingHeaders) {
         try {

File: rxjava/src/test/java/com/linecorp/armeria/server/rxjava/ObservableResponseConverterFunctionProviderTest.java
Patch:
@@ -31,6 +31,7 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.RequestContext;
+import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.annotation.ExceptionHandlerFunction;
 import com.linecorp.armeria.server.annotation.ResponseConverterFunction;
@@ -80,7 +81,7 @@ public Observable<Observable<Object>> unsupported() {
     private static class DummyResponseConverter implements ResponseConverterFunction {
         @Override
         public HttpResponse convertResponse(ServiceRequestContext ctx,
-                                            HttpHeaders headers,
+                                            ResponseHeaders headers,
                                             @Nullable Object result,
                                             HttpHeaders trailingHeaders) throws Exception {
             return HttpResponse.of(HttpStatus.OK);

File: rxjava/src/test/java/com/linecorp/armeria/server/rxjava/ObservableResponseConverterFunctionTest.java
Patch:
@@ -31,10 +31,10 @@
 import com.linecorp.armeria.client.HttpClient;
 import com.linecorp.armeria.common.AggregatedHttpMessage;
 import com.linecorp.armeria.common.HttpData;
-import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpObject;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
+import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.annotation.Get;
 import com.linecorp.armeria.server.annotation.ProducesJson;
@@ -265,7 +265,7 @@ public void onError(Throwable t) {
             @Override
             public void onComplete() {
                 final Iterator<HttpObject> it = received.build().iterator();
-                final HttpHeaders headers = (HttpHeaders) it.next();
+                final ResponseHeaders headers = (ResponseHeaders) it.next();
                 assertThat(headers.status()).isEqualTo(HttpStatus.OK);
                 assertThat(headers.contentType()).isEqualTo(MediaType.JSON_SEQ);
                 // JSON Text Sequences: *(Record Separator[0x1E] JSON-text Line Feed[0x0A])

File: spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationTest.java
Patch:
@@ -51,6 +51,7 @@
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.RequestContext;
+import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerPort;
 import com.linecorp.armeria.server.ServiceRequestContext;
@@ -116,7 +117,7 @@ public HttpResponse handleException(RequestContext ctx, HttpRequest req, Throwab
     public static class StringResponseConverter implements ResponseConverterFunction {
         @Override
         public HttpResponse convertResponse(ServiceRequestContext ctx,
-                                            HttpHeaders headers,
+                                            ResponseHeaders headers,
                                             @Nullable Object result,
                                             HttpHeaders trailingHeaders) throws Exception {
             if (result instanceof String) {

File: spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaCompressionConfigurationTest.java
Patch:
@@ -41,10 +41,10 @@
 import com.linecorp.armeria.client.HttpClient;
 import com.linecorp.armeria.common.AggregatedHttpMessage;
 import com.linecorp.armeria.common.HttpHeaderNames;
-import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpStatus;
+import com.linecorp.armeria.common.RequestHeaders;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.annotation.Get;
 import com.linecorp.armeria.server.annotation.Param;
@@ -92,8 +92,8 @@ private String newUrl() {
     }
 
     private static HttpRequest request(int sizeParam) {
-        return HttpRequest.of(HttpHeaders.of(HttpMethod.GET, "/hello?size=" + sizeParam)
-                                         .add(HttpHeaderNames.ACCEPT_ENCODING, "gzip"));
+        return HttpRequest.of(RequestHeaders.of(HttpMethod.GET, "/hello?size=" + sizeParam,
+                                                HttpHeaderNames.ACCEPT_ENCODING, "gzip"));
     }
 
     @Test

File: spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaClientHttpConnector.java
Patch:
@@ -33,7 +33,7 @@
 
 import com.linecorp.armeria.client.HttpClient;
 import com.linecorp.armeria.client.HttpClientBuilder;
-import com.linecorp.armeria.common.HttpHeaders;
+import com.linecorp.armeria.common.ResponseHeaders;
 
 import reactor.core.publisher.Mono;
 
@@ -113,7 +113,7 @@ private ArmeriaClientHttpRequest createRequest(HttpMethod method, URI uri) {
         return new ArmeriaClientHttpRequest(builder.build(), method, pathAndQuery, uri, factoryWrapper);
     }
 
-    private ArmeriaClientHttpResponse createResponse(HttpHeaders headers,
+    private ArmeriaClientHttpResponse createResponse(ResponseHeaders headers,
                                                      ArmeriaHttpClientResponseSubscriber s) {
         return new ArmeriaClientHttpResponse(headers, s.toResponseBodyPublisher(), factoryWrapper);
     }

File: spring/boot-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaClientHttpRequestTest.java
Patch:
@@ -32,10 +32,10 @@
 import com.linecorp.armeria.client.HttpClient;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaderNames;
-import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
+import com.linecorp.armeria.common.RequestHeaders;
 
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
@@ -100,7 +100,7 @@ public void writeWithPublisher() {
         assertThat(httpRequest).isNotNull();
 
         // Check the headers.
-        final HttpHeaders headers = httpRequest.headers();
+        final RequestHeaders headers = httpRequest.headers();
         assertThat(headers.method()).isEqualTo(com.linecorp.armeria.common.HttpMethod.GET);
         assertThat(headers.path()).isEqualTo(TEST_PATH_AND_QUERY);
         assertThat(headers.get(HttpHeaderNames.ACCEPT)).isEqualTo("*/*");
@@ -146,7 +146,7 @@ public void writeAndFlushWithMultiplePublisher() {
         assertThat(httpRequest).isNotNull();
 
         // Check the headers.
-        final HttpHeaders headers = httpRequest.headers();
+        final RequestHeaders headers = httpRequest.headers();
         assertThat(headers.method()).isEqualTo(com.linecorp.armeria.common.HttpMethod.GET);
         assertThat(headers.path()).isEqualTo(TEST_PATH_AND_QUERY);
         assertThat(headers.get(HttpHeaderNames.ACCEPT)).isEqualTo("*/*");

File: core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java
Patch:
@@ -116,7 +116,6 @@ public final class ClientFactoryBuilder {
      */
     public ClientFactoryBuilder() {
         connectTimeoutMillis(Flags.defaultConnectTimeoutMillis());
-        channelOption(ChannelOption.SO_KEEPALIVE, true);
     }
 
     /**

File: benchmarks/src/jmh/java/com/linecorp/armeria/core/HttpServerBenchmark.java
Patch:
@@ -66,7 +66,7 @@ String uriText() {
     public void startServer() throws Exception {
         server = new ServerBuilder()
                 .service("/empty", (ctx, req) -> HttpResponse.of(HttpStatus.OK))
-                .defaultRequestTimeout(Duration.ZERO)
+                .requestTimeout(Duration.ZERO)
                 .meterRegistry(NoopMeterRegistry.get())
                 .build();
         server.start().join();

File: benchmarks/src/jmh/java/com/linecorp/armeria/grpc/downstream/DownstreamSimpleBenchmark.java
Patch:
@@ -64,7 +64,7 @@ protected GithubServiceFutureStub normalFutureClient() {
     protected void setUp() throws Exception {
         server = new ServerBuilder()
                 .serviceUnder("/", new GrpcServiceBuilder().addService(new GithubApiService()).build())
-                .defaultRequestTimeout(Duration.ZERO)
+                .requestTimeout(Duration.ZERO)
                 .meterRegistry(NoopMeterRegistry.get())
                 .build();
         server.start().join();

File: core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java
Patch:
@@ -92,9 +92,9 @@ public DefaultClientRequestContext(
         log = new DefaultRequestLog(this, options.requestContentPreviewerFactory(),
                                     options.responseContentPreviewerFactory());
 
-        writeTimeoutMillis = options.defaultWriteTimeoutMillis();
-        responseTimeoutMillis = options.defaultResponseTimeoutMillis();
-        maxResponseLength = options.defaultMaxResponseLength();
+        writeTimeoutMillis = options.writeTimeoutMillis();
+        responseTimeoutMillis = options.responseTimeoutMillis();
+        maxResponseLength = options.maxResponseLength();
 
         final HttpHeaders headers = options.getOrElse(ClientOption.HTTP_HEADERS, HttpHeaders.EMPTY_HEADERS);
         if (!headers.isEmpty()) {

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HttpHealthCheckedEndpointGroupBuilder.java
Patch:
@@ -99,7 +99,7 @@ public HttpHealthCheckedEndpointGroupBuilder clientFactory(ClientFactory clientF
      * Sets the {@link Function} that customizes an {@link HttpClient} for health check.
      * <pre>{@code
      * new HttpHealthCheckedEndpointGroupBuilder(delegate, healthCheckPath)
-     *     .withClientOptions(op -> op.defaultResponseTimeout(Duration.ofSeconds(1)))
+     *     .withClientOptions(op -> op.responseTimeout(Duration.ofSeconds(1)))
      *     .build();
      * }</pre>
      */

File: core/src/main/java/com/linecorp/armeria/server/Http1RequestDecoder.java
Patch:
@@ -174,7 +174,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                             ArmeriaHttpUtil.toArmeria(nettyReq),
                             HttpUtil.isKeepAlive(nettyReq),
                             inboundTrafficController,
-                            cfg.defaultMaxRequestLength());
+                            cfg.maxRequestLength());
 
                     // Close the request early when it is sure that there will be
                     // neither content nor trailing headers.

File: core/src/main/java/com/linecorp/armeria/server/Http2RequestDecoder.java
Patch:
@@ -130,7 +130,7 @@ public void onHeadersRead(ChannelHandlerContext ctx, int streamId, Http2Headers
 
             req = new DecodedHttpRequest(ctx.channel().eventLoop(), ++nextId, streamId,
                                          ArmeriaHttpUtil.toArmeria(headers, endOfStream), true,
-                                         inboundTrafficController, cfg.defaultMaxRequestLength());
+                                         inboundTrafficController, cfg.maxRequestLength());
 
             // Close the request early when it is sure that there will be
             // neither content nor trailing headers.

File: core/src/test/java/com/linecorp/armeria/client/HttpClientTimeoutTest.java
Patch:
@@ -60,7 +60,7 @@ public static void destroy() {
     public void responseTimeoutH1C() throws Exception {
         try (ServerSocket ss = new ServerSocket(0)) {
             final HttpClient client = new HttpClientBuilder("h1c://127.0.0.1:" + ss.getLocalPort())
-                    .factory(factory).defaultResponseTimeout(Duration.ofSeconds(1)).build();
+                    .factory(factory).responseTimeout(Duration.ofSeconds(1)).build();
 
             final HttpResponse res = client.get("/");
             try (Socket s = ss.accept()) {
@@ -84,7 +84,7 @@ public void responseTimeoutH1C() throws Exception {
     public void responseTimeoutH2C() throws Exception {
         try (ServerSocket ss = new ServerSocket(0)) {
             final HttpClient client = new HttpClientBuilder("h2c://127.0.0.1:" + ss.getLocalPort())
-                    .factory(factory).defaultResponseTimeout(Duration.ofSeconds(1)).build();
+                    .factory(factory).responseTimeout(Duration.ofSeconds(1)).build();
 
             final HttpResponse res = client.get("/");
             try (Socket s = ss.accept()) {

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingHttpClientTest.java
Patch:
@@ -404,7 +404,7 @@ public void shouldGetExceptionWhenFactoryIsClosed() {
 
         final HttpClient client = new HttpClientBuilder(server.uri("/"))
                 .factory(factory)
-                .defaultResponseTimeoutMillis(10000)
+                .responseTimeoutMillis(10000)
                 .decorator(new RetryingHttpClientBuilder(
                         // Retry after 8000 which is slightly less than responseTimeoutMillis(10000).
                         RetryStrategy.onServerErrorStatus(Backoff.fixed(8000))).newDecorator())
@@ -493,7 +493,7 @@ private HttpClient client(RetryStrategy strategy) {
     private HttpClient client(RetryStrategy strategy, long responseTimeoutMillis,
                               long responseTimeoutForEach, int maxTotalAttempts) {
         return new HttpClientBuilder(server.uri("/"))
-                .factory(clientFactory).defaultResponseTimeoutMillis(responseTimeoutMillis)
+                .factory(clientFactory).responseTimeoutMillis(responseTimeoutMillis)
                 .decorator(new RetryingHttpClientBuilder(strategy)
                                    .responseTimeoutMillisForEachAttempt(responseTimeoutForEach)
                                    .useRetryAfter(true)

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceExceptionHandlerTest.java
Patch:
@@ -72,7 +72,7 @@ protected void configure(ServerBuilder sb) throws Exception {
 
             sb.annotatedService("/5", new MyService5());
 
-            sb.defaultRequestTimeoutMillis(500L);
+            sb.requestTimeoutMillis(500L);
         }
     };
 

File: core/src/test/java/com/linecorp/armeria/server/HttpResponseSubscriberTest.java
Patch:
@@ -63,7 +63,7 @@ private static DefaultServiceRequestContext serviceRequestContext(HttpHeaders he
                                             .eventLoop(EventLoopGroups.directEventLoop())
                                             .serverConfigurator(sb -> {
                                                 sb.contentPreview(100);
-                                                sb.defaultRequestTimeoutMillis(0);
+                                                sb.requestTimeoutMillis(0);
                                             })
                                             .build();
     }

File: core/src/test/java/com/linecorp/armeria/server/HttpServerTest.java
Patch:
@@ -431,7 +431,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
                     };
             sb.decorator(decorator);
 
-            sb.defaultMaxRequestLength(MAX_CONTENT_LENGTH);
+            sb.maxRequestLength(MAX_CONTENT_LENGTH);
             sb.idleTimeout(Duration.ofSeconds(5));
         }
     };

File: core/src/test/java/com/linecorp/armeria/server/ServerTest.java
Patch:
@@ -305,7 +305,7 @@ public void testBuggyService() throws Exception {
     @Test
     public void testOptions() throws Exception {
         testSimple("OPTIONS * HTTP/1.1", "HTTP/1.1 200 OK",
-                   "allow: OPTIONS,GET,HEAD,POST,PUT,PATCH,DELETE,TRACE");
+                   "allow: OPTIONS,GET,HEAD,POST,PUT,PATCH,DELETE,TRACE,CONNECT");
     }
 
     @Test

File: examples/proxy-server/src/main/java/example/armeria/proxy/Main.java
Patch:
@@ -55,7 +55,7 @@ static Server newBackendServer(int port, int frameIntervalMillis) throws Excepti
         return new ServerBuilder()
                 .http(port)
                 // Disable timeout to serve infinite streaming response.
-                .defaultRequestTimeoutMillis(0)
+                .requestTimeoutMillis(0)
                 // Serve /index.html file.
                 .service("/", HttpFileBuilder.ofResource(Main.class.getClassLoader(), "index.html")
                                              .cacheControl(ServerCacheControl.REVALIDATED)
@@ -73,7 +73,7 @@ static Server newProxyServer(int httpPort, int httpsPort) throws Exception {
                 .https(httpsPort)
                 .tlsSelfSigned()
                 // Disable timeout to serve infinite streaming response.
-                .defaultRequestTimeoutMillis(0)
+                .requestTimeoutMillis(0)
                 .serviceUnder("/", new ProxyService())
                 .decorator(LoggingService.newDecorator())
                 .build();

File: examples/proxy-server/src/main/java/example/armeria/proxy/ProxyService.java
Patch:
@@ -71,7 +71,7 @@ private static HttpClient newLoadBalancingClient() throws InterruptedException {
 
         return new HttpClientBuilder("http://group:animation_apis")
                 // Disable timeout to serve infinite streaming response.
-                .defaultResponseTimeoutMillis(0)
+                .responseTimeoutMillis(0)
                 .decorator(LoggingClient.newDecorator())
                 .build();
     }

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaChannel.java
Patch:
@@ -112,7 +112,7 @@ public <I, O> ClientCall<I, O> newCall(
                 options().getOrElse(
                         GrpcClientOptions.MAX_INBOUND_MESSAGE_SIZE_BYTES,
                         options().getOrElse(
-                                ClientOption.DEFAULT_MAX_RESPONSE_LENGTH,
+                                ClientOption.MAX_RESPONSE_LENGTH,
                                 (long) DEFAULT_MAX_INBOUND_MESSAGE_SIZE).intValue()),
                 callOptions,
                 CompressorRegistry.getDefaultInstance(),

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java
Patch:
@@ -519,7 +519,7 @@ static HttpHeaders statusToTrailers(ServiceRequestContext ctx, Status status, bo
         final HttpHeaders trailers = GrpcTrailersUtil.statusToTrailers(
                 status.getCode().value(), status.getDescription(), headersSent);
 
-        if (ctx.server().config().verboseResponses() && status.getCause() != null) {
+        if (ctx.verboseResponses() && status.getCause() != null) {
             final ThrowableProto proto = GrpcStatus.serializeThrowable(status.getCause());
             trailers.add(GrpcHeaderNames.ARMERIA_GRPC_THROWABLEPROTO_BIN,
                          Base64.getEncoder().encodeToString(proto.toByteArray()));

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcService.java
Patch:
@@ -232,8 +232,7 @@ private <I, O> ArmeriaServerCall<I, O> startCall(
     @Override
     public void serviceAdded(ServiceConfig cfg) {
         if (maxInboundMessageSizeBytes == NO_MAX_INBOUND_MESSAGE_SIZE) {
-            maxInboundMessageSizeBytes = (int) Math.min(cfg.server().config().defaultMaxRequestLength(),
-                                                        Integer.MAX_VALUE);
+            maxInboundMessageSizeBytes = (int) Math.min(cfg.maxRequestLength(), Integer.MAX_VALUE);
         }
 
         if (protoReflectionService != null) {

File: it/server/src/test/java/com/linecorp/armeria/server/grpc/interop/ArmeriaGrpcServerInteropTest.java
Patch:
@@ -94,7 +94,7 @@ public void serverStopped(Server server) {
 
             sb.https(new InetSocketAddress("127.0.0.1", 0));
             sb.tls(newSslContext());
-            sb.defaultMaxRequestLength(16 * 1024 * 1024);
+            sb.maxRequestLength(16 * 1024 * 1024);
             sb.serviceUnder("/", new GrpcServiceBuilder()
                     .addService(ServerInterceptors.intercept(
                             new TestServiceImpl(executor), TestServiceImpl.interceptors()))

File: logback/src/test/java/com/linecorp/armeria/common/logback/RequestContextExportingAppenderTest.java
Patch:
@@ -606,12 +606,12 @@ public String query() {
 
         @Nullable
         @Override
-        public MediaType consumeType() {
+        public MediaType contentType() {
             return null;
         }
 
         @Override
-        public List<MediaType> produceTypes() {
+        public List<MediaType> acceptTypes() {
             return ImmutableList.of();
         }
 

File: retrofit2/src/test/java/com/linecorp/armeria/client/retrofit2/ArmeriaCallFactoryLargeStreamTest.java
Patch:
@@ -85,7 +85,7 @@ public void cancel() {
                     }));
                 }
             });
-            sb.defaultRequestTimeout(Duration.of(30, ChronoUnit.SECONDS));
+            sb.requestTimeout(Duration.of(30, ChronoUnit.SECONDS));
         }
     };
 
@@ -95,8 +95,8 @@ public void largeStream() throws Exception {
                 .baseUrl(server.uri("/"))
                 .addConverterFactory(JacksonConverterFactory.create(OBJECT_MAPPER))
                 .withClientOptions((s, clientOptionsBuilder) -> {
-                    clientOptionsBuilder.defaultMaxResponseLength(Long.MAX_VALUE);
-                    clientOptionsBuilder.defaultResponseTimeout(Duration.of(30, ChronoUnit.SECONDS));
+                    clientOptionsBuilder.maxResponseLength(Long.MAX_VALUE);
+                    clientOptionsBuilder.responseTimeout(Duration.of(30, ChronoUnit.SECONDS));
                     return clientOptionsBuilder;
                 })
                 .build()

File: retrofit2/src/test/java/com/linecorp/armeria/client/retrofit2/ArmeriaCallFactoryTest.java
Patch:
@@ -287,7 +287,7 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) throws
                                              "{\"name\":\"Cony\", \"age\":26}");
                   }
               });
-            sb.defaultRequestTimeout(Duration.of(30, ChronoUnit.SECONDS));
+            sb.requestTimeout(Duration.of(30, ChronoUnit.SECONDS));
         }
     };
 

File: spring/boot-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java
Patch:
@@ -148,7 +148,7 @@ public void testPrometheus() throws Exception {
     @Test
     public void testHeapdump() throws Exception {
         final HttpClient client = Clients.newDerivedClient(this.client, options -> {
-            return new ClientOptionsBuilder(options).defaultMaxResponseLength(0).build();
+            return new ClientOptionsBuilder(options).maxResponseLength(0).build();
         });
 
         final HttpResponse res = client.get("/internal/actuator/heapdump");

File: thrift/src/main/java/com/linecorp/armeria/server/thrift/THttpService.java
Patch:
@@ -420,7 +420,7 @@ protected HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req) {
         req.aggregateWithPooledObjects(ctx.eventLoop(), ctx.alloc()).handle((aReq, cause) -> {
             if (cause != null) {
                 final HttpResponse errorRes;
-                if (ctx.server().config().verboseResponses()) {
+                if (ctx.verboseResponses()) {
                     errorRes = HttpResponse.of(HttpStatus.INTERNAL_SERVER_ERROR,
                                                MediaType.PLAIN_TEXT_UTF_8,
                                                Exceptions.traceText(cause));
@@ -506,7 +506,7 @@ private void decodeAndInvoke(
                 logger.debug("{} Failed to decode a {} header:", ctx, serializationFormat, e);
 
                 final HttpResponse errorRes;
-                if (ctx.server().config().verboseResponses()) {
+                if (ctx.verboseResponses()) {
                     errorRes = HttpResponse.of(HttpStatus.BAD_REQUEST, MediaType.PLAIN_TEXT_UTF_8,
                                                "Failed to decode a %s header: %s", serializationFormat,
                                                Exceptions.traceText(e));
@@ -742,7 +742,7 @@ private static HttpData encodeException(ServiceRequestContext ctx,
         if (cause instanceof TApplicationException) {
             appException = (TApplicationException) cause;
         } else {
-            if (ctx.server().config().verboseResponses()) {
+            if (ctx.verboseResponses()) {
                 appException = new TApplicationException(
                         TApplicationException.INTERNAL_ERROR,
                         "\n---- BEGIN server-side trace ----\n" +

File: thrift/src/test/java/com/linecorp/armeria/it/client/retry/RetryingRpcClientTest.java
Patch:
@@ -167,7 +167,7 @@ public void shouldGetExceptionWhenFactoryIsClosed() throws Exception {
                 };
 
         final HelloService.Iface client = new ClientBuilder(server.uri(BINARY, "/thrift"))
-                .defaultResponseTimeoutMillis(10000)
+                .responseTimeoutMillis(10000)
                 .factory(factory)
                 .rpcDecorator(new RetryingRpcClientBuilder(strategy).newDecorator())
                 .build(HelloService.Iface.class);

File: thrift/src/test/java/com/linecorp/armeria/it/server/GracefulShutdownIntegrationTest.java
Patch:
@@ -47,7 +47,7 @@ public class GracefulShutdownIntegrationTest {
         @Override
         protected void configure(ServerBuilder sb) throws Exception {
             sb.gracefulShutdownTimeout(1000L, 2000L);
-            sb.defaultRequestTimeoutMillis(0); // Disable RequestTimeoutException.
+            sb.requestTimeoutMillis(0); // Disable RequestTimeoutException.
 
             sb.service("/sleep", THttpService.of(
                     (AsyncIface) (milliseconds, resultHandler) ->

File: thrift/src/test/java/com/linecorp/armeria/it/thrift/ThriftDynamicTimeoutTest.java
Patch:
@@ -86,7 +86,7 @@ protected void configure(ServerBuilder sb) throws Exception {
             sb.service("/fakeSleep", ThriftCallService.of(fakeSleepService)
                                                       .decorate(TimeoutDisablingService::new)
                                                       .decorate(THttpService.newDecorator()));
-            sb.defaultRequestTimeout(Duration.ofSeconds(1));
+            sb.requestTimeout(Duration.ofSeconds(1));
         }
     };
 
@@ -102,7 +102,7 @@ public ThriftDynamicTimeoutTest(Function<Client<RpcRequest, RpcResponse>,
     public void testDynamicTimeout() throws Exception {
         final SleepService.Iface client = new ClientBuilder(server.uri(BINARY, "/sleep"))
                 .rpcDecorator(clientDecorator)
-                .defaultResponseTimeout(Duration.ofSeconds(1)).build(SleepService.Iface.class);
+                .responseTimeout(Duration.ofSeconds(1)).build(SleepService.Iface.class);
 
         final long delay = 1500;
         final Stopwatch sw = Stopwatch.createStarted();
@@ -114,7 +114,7 @@ public void testDynamicTimeout() throws Exception {
     public void testDisabledTimeout() throws Exception {
         final SleepService.Iface client = new ClientBuilder(server.uri(BINARY, "/fakeSleep"))
                 .rpcDecorator(clientDecorator)
-                .defaultResponseTimeout(Duration.ofSeconds(1)).build(SleepService.Iface.class);
+                .responseTimeout(Duration.ofSeconds(1)).build(SleepService.Iface.class);
 
         // This call should take very short amount of time because the fakeSleep service does not sleep.
         client.sleep(30000);

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftServiceTest.java
Patch:
@@ -636,7 +636,8 @@ private static void invoke0(THttpService service, HttpData content,
                 ServiceRequestContextBuilder.of(req)
                                             .eventLoop(eventLoop.get())
                                             .serverConfigurator(builder -> {
-                                                builder.blockingTaskExecutor(ImmediateEventExecutor.INSTANCE);
+                                                builder.blockingTaskExecutor(ImmediateEventExecutor.INSTANCE,
+                                                                             false);
                                                 builder.verboseResponses(true);
                                             })
                                             .build();

File: thrift/src/main/java/com/linecorp/armeria/internal/thrift/ThriftFunction.java
Patch:
@@ -102,7 +102,7 @@ private ThriftFunction(
                     continue;
                 }
 
-                final Class<?> fieldType = resultType.getField(fieldName).getType();
+                final Class<?> fieldType = resultType.getDeclaredField(fieldName).getType();
                 if (Throwable.class.isAssignableFrom(fieldType)) {
                     @SuppressWarnings("unchecked")
                     final Class<Throwable> exceptionFieldType = (Class<Throwable>) fieldType;

File: core/src/main/java/com/linecorp/armeria/server/healthcheck/HttpHealthCheckService.java
Patch:
@@ -103,7 +103,7 @@ public HttpHealthCheckService(HealthChecker... healthCheckers) {
      */
     public HttpHealthCheckService(Iterable<? extends HealthChecker> healthCheckers) {
         this.healthCheckers = ImmutableList.copyOf(requireNonNull(healthCheckers, "healthCheckers"));
-        serverHealth = new SettableHealthChecker();
+        serverHealth = new SettableHealthChecker(false);
         serverHealthUpdater = new ServerHealthUpdater();
     }
 

File: core/src/main/java/com/linecorp/armeria/server/logging/structured/StructuredLog.java
Patch:
@@ -102,7 +102,7 @@ public long responseSize() {
     @Override
     public String toString() {
         return MoreObjects.toStringHelper(this)
-                          .add("timestamp", TextFormatter.epoch(timestampMillis))
+                          .add("timestamp", TextFormatter.epochMillis(timestampMillis))
                           .add("responseTime", TextFormatter.elapsed(responseTimeNanos))
                           .add("requestSize", TextFormatter.size(requestSize))
                           .add("responseSize", TextFormatter.size(responseSize))

File: core/src/test/java/com/linecorp/armeria/common/util/TextFormatterTest.java
Patch:
@@ -49,7 +49,9 @@ public void elapsedAndSize() throws Exception {
 
     @Test
     public void testFormatEpoch() throws Exception {
-        assertThat(TextFormatter.epoch(1478601399123L).toString())
+        assertThat(TextFormatter.epochMillis(1478601399123L).toString())
                 .isEqualTo("2016-11-08T10:36:39.123Z(1478601399123)");
+        assertThat(TextFormatter.epochMicro(1478601399123235L).toString())
+                .isEqualTo("2016-11-08T10:36:39.123Z(1478601399123235)");
     }
 }

File: logback/src/main/java/com/linecorp/armeria/common/logback/RequestContextExportingAppender.java
Patch:
@@ -51,7 +51,7 @@
  * A <a href="https://logback.qos.ch/">Logback</a> {@link Appender} that exports the properties of the current
  * {@link RequestContext} to {@link MDC}.
  *
- * <p>Read '<a href="https://line.github.io/armeria/server-basics.html">Logging contextual information</a>'
+ * <p>Read '<a href="https://line.github.io/armeria/advanced-logging.html">Logging contextual information</a>'
  * for more information.
  */
 public class RequestContextExportingAppender extends UnsynchronizedAppenderBase<ILoggingEvent>

File: thrift/src/main/java/com/linecorp/armeria/server/thrift/ThriftStructuredLog.java
Patch:
@@ -142,7 +142,7 @@ public ThriftReply thriftReply() {
     @Override
     public String toString() {
         return MoreObjects.toStringHelper(this)
-                          .add("timestamp", TextFormatter.epoch(timestampMillis()))
+                          .add("timestamp", TextFormatter.epochMillis(timestampMillis()))
                           .add("responseTime", TextFormatter.elapsed(responseTimeNanos()))
                           .add("requestSize", TextFormatter.size(requestSize()))
                           .add("responseSize", TextFormatter.size(responseSize()))

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsAddressEndpointGroup.java
Patch:
@@ -32,7 +32,6 @@
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufHolder;
 import io.netty.channel.EventLoop;
-import io.netty.handler.codec.dns.DefaultDnsQuestion;
 import io.netty.handler.codec.dns.DnsQuestion;
 import io.netty.handler.codec.dns.DnsRawRecord;
 import io.netty.handler.codec.dns.DnsRecord;
@@ -107,14 +106,14 @@ private static List<DnsQuestion> newQuestions(
             case IPV4_ONLY:
             case IPV4_PREFERRED:
             case IPV6_PREFERRED:
-                builder.add(new DefaultDnsQuestion(hostname, DnsRecordType.A));
+                builder.add(new DnsQuestionWithoutTrailingDot(hostname, DnsRecordType.A));
                 break;
         }
         switch (resolvedAddressTypes) {
             case IPV6_ONLY:
             case IPV4_PREFERRED:
             case IPV6_PREFERRED:
-                builder.add(new DefaultDnsQuestion(hostname, DnsRecordType.AAAA));
+                builder.add(new DnsQuestionWithoutTrailingDot(hostname, DnsRecordType.AAAA));
                 break;
         }
         return builder.build();

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsEndpointGroup.java
Patch:
@@ -95,6 +95,7 @@ abstract class DnsEndpointGroup extends DynamicEndpointGroup {
         final DnsNameResolverBuilder resolverBuilder = new DnsNameResolverBuilder(eventLoop)
                 .channelType(TransportType.datagramChannelType(eventLoop.parent()))
                 .ttl(minTtl, maxTtl)
+                .traceEnabled(true)
                 .nameServerProvider(serverAddressStreamProvider);
 
         resolverConfigurator.accept(resolverBuilder);
@@ -133,7 +134,6 @@ private void sendQueries() {
         } else {
             // Multiple queries
             logger.debug("{} Sending DNS queries", logPrefix);
-            @SuppressWarnings("unchecked")
             final Promise<List<DnsRecord>> aggregatedPromise = eventLoop.newPromise();
             final FutureListener<List<DnsRecord>> listener = new FutureListener<List<DnsRecord>>() {
                 private final List<DnsRecord> records = new ArrayList<>();

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsServiceEndpointGroup.java
Patch:
@@ -30,7 +30,6 @@
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufHolder;
 import io.netty.channel.EventLoop;
-import io.netty.handler.codec.dns.DefaultDnsQuestion;
 import io.netty.handler.codec.dns.DefaultDnsRecordDecoder;
 import io.netty.handler.codec.dns.DnsRawRecord;
 import io.netty.handler.codec.dns.DnsRecord;
@@ -60,7 +59,7 @@ public static DnsServiceEndpointGroup of(String hostname) {
                             DnsServerAddressStreamProvider serverAddressStreamProvider,
                             Backoff backoff, String hostname) {
         super(eventLoop, minTtl, maxTtl, serverAddressStreamProvider, backoff,
-              ImmutableList.of(new DefaultDnsQuestion(hostname, DnsRecordType.SRV)),
+              ImmutableList.of(new DnsQuestionWithoutTrailingDot(hostname, DnsRecordType.SRV)),
               unused -> {});
         start();
     }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsTextEndpointGroup.java
Patch:
@@ -31,7 +31,6 @@
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufHolder;
 import io.netty.channel.EventLoop;
-import io.netty.handler.codec.dns.DefaultDnsQuestion;
 import io.netty.handler.codec.dns.DnsRawRecord;
 import io.netty.handler.codec.dns.DnsRecord;
 import io.netty.handler.codec.dns.DnsRecordType;
@@ -62,7 +61,7 @@ public static DnsTextEndpointGroup of(String hostname, Function<byte[], Endpoint
                          DnsServerAddressStreamProvider serverAddressStreamProvider,
                          Backoff backoff, String hostname, Function<byte[], Endpoint> mapping) {
         super(eventLoop, minTtl, maxTtl, serverAddressStreamProvider, backoff,
-              ImmutableList.of(new DefaultDnsQuestion(hostname, DnsRecordType.TXT)),
+              ImmutableList.of(new DnsQuestionWithoutTrailingDot(hostname, DnsRecordType.TXT)),
               unused -> {});
         this.mapping = mapping;
         start();

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpDocServiceTest.java
Patch:
@@ -336,7 +336,9 @@ public List<String>[] regex(@Param MyEnum myEnum) {
         }
 
         @Get("prefix:/prefix")
-        public String prefix(ServiceRequestContext ctx) {
+        public String prefix(ServiceRequestContext ctx) throws InterruptedException {
+            // Added to check delayed response in browser.
+            Thread.sleep(500);
             return "prefix";
         }
 

File: examples/spring-boot-webflux/src/test/java/example/springframework/boot/webflux/HelloApplicationIntegrationTest.java
Patch:
@@ -7,12 +7,14 @@
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
 import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.reactive.server.WebTestClient;
 
 import com.linecorp.armeria.spring.web.reactive.ArmeriaClientHttpConnector;
 
 @RunWith(SpringRunner.class)
+@ActiveProfiles("testbed")
 @SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT)
 public class HelloApplicationIntegrationTest {
 

File: benchmarks/src/jmh/java/com/linecorp/armeria/shared/EventLoopJmhExecutor.java
Patch:
@@ -18,11 +18,12 @@
 
 import java.util.concurrent.Executor;
 
+import com.linecorp.armeria.common.util.EventLoopThreadFactory;
+
 import io.netty.channel.DefaultEventLoop;
 import io.netty.channel.DefaultEventLoopGroup;
 import io.netty.channel.EventLoop;
 import io.netty.channel.MultithreadEventLoopGroup;
-import io.netty.util.concurrent.DefaultThreadFactory;
 import io.netty.util.concurrent.FastThreadLocal;
 
 /**
@@ -53,7 +54,7 @@ public static EventLoop currentEventLoop() {
     }
 
     public EventLoopJmhExecutor(int numThreads, String threadPrefix) {
-        super(numThreads, new DefaultThreadFactory(threadPrefix));
+        super(numThreads, new EventLoopThreadFactory(threadPrefix));
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/common/CommonPools.java
Patch:
@@ -23,10 +23,10 @@
 
 import com.linecorp.armeria.client.ClientFactoryBuilder;
 import com.linecorp.armeria.common.util.EventLoopGroups;
+import com.linecorp.armeria.common.util.EventLoopThreadFactory;
 import com.linecorp.armeria.server.ServerBuilder;
 
 import io.netty.channel.EventLoopGroup;
-import io.netty.util.concurrent.DefaultThreadFactory;
 
 /**
  * Provides the common shared thread pools and {@link EventLoopGroup}s which is used when not overridden.
@@ -41,7 +41,7 @@ public final class CommonPools {
         final ThreadPoolExecutor blockingTaskExecutor = new ThreadPoolExecutor(
                 Flags.numCommonBlockingTaskThreads(), Flags.numCommonBlockingTaskThreads(),
                 60, TimeUnit.SECONDS, new LinkedTransferQueue<>(),
-                new DefaultThreadFactory("armeria-common-blocking-tasks", true));
+                new EventLoopThreadFactory("armeria-common-blocking-tasks", true));
 
         blockingTaskExecutor.allowCoreThreadTimeOut(true);
         BLOCKING_TASK_EXECUTOR = blockingTaskExecutor;

File: core/src/main/java/com/linecorp/armeria/common/util/EventLoopGroups.java
Patch:
@@ -34,11 +34,12 @@
 import io.netty.channel.ServerChannel;
 import io.netty.channel.socket.DatagramChannel;
 import io.netty.channel.socket.SocketChannel;
-import io.netty.util.concurrent.DefaultThreadFactory;
 import io.netty.util.concurrent.Future;
 
 /**
  * Provides methods that are useful for creating an {@link EventLoopGroup}.
+ *
+ * @see EventLoopThreadFactory
  */
 public final class EventLoopGroups {
 
@@ -88,7 +89,7 @@ public static EventLoopGroup newEventLoopGroup(int numThreads, String threadName
 
         final TransportType type = TransportType.detectTransportType();
         final String prefix = threadNamePrefix + '-' + type.lowerCasedName();
-        return newEventLoopGroup(numThreads, new DefaultThreadFactory(prefix, useDaemonThreads));
+        return newEventLoopGroup(numThreads, new EventLoopThreadFactory(prefix, useDaemonThreads));
     }
 
     /**

File: core/src/test/java/com/linecorp/armeria/server/GracefulShutdownSupportTest.java
Patch:
@@ -40,7 +40,7 @@
 
 import com.google.common.base.Ticker;
 
-import io.netty.util.concurrent.DefaultThreadFactory;
+import com.linecorp.armeria.common.util.EventLoopThreadFactory;
 
 public class GracefulShutdownSupportTest {
 
@@ -59,7 +59,7 @@ public class GracefulShutdownSupportTest {
     public void setUp() {
         executor = new ThreadPoolExecutor(
                 0, 1, 1, TimeUnit.SECONDS, new LinkedTransferQueue<>(),
-                new DefaultThreadFactory(GracefulShutdownSupportTest.class, true));
+                new EventLoopThreadFactory("graceful-shutdown-test", true));
 
         support = GracefulShutdownSupport.create(Duration.ofNanos(QUIET_PERIOD_NANOS), executor, ticker);
     }

File: core/src/test/java/com/linecorp/armeria/server/ServerTest.java
Patch:
@@ -57,6 +57,7 @@
 import com.linecorp.armeria.common.metric.MeterIdPrefix;
 import com.linecorp.armeria.common.metric.PrometheusMeterRegistries;
 import com.linecorp.armeria.common.util.CompletionActions;
+import com.linecorp.armeria.common.util.EventLoopThreadFactory;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.internal.metric.MicrometerUtil;
 import com.linecorp.armeria.server.logging.LoggingService;
@@ -67,7 +68,6 @@
 import io.netty.channel.ChannelOption;
 import io.netty.handler.codec.http.HttpStatusClass;
 import io.netty.util.concurrent.DefaultEventExecutorGroup;
-import io.netty.util.concurrent.DefaultThreadFactory;
 import io.netty.util.concurrent.EventExecutorGroup;
 import io.netty.util.concurrent.Future;
 
@@ -345,7 +345,7 @@ public void defaultStartStopExecutor() {
     public void customStartStopExecutor() {
         final Queue<Thread> threads = new LinkedTransferQueue<>();
         final String prefix = getClass().getName() + "#customStartStopExecutor";
-        final ExecutorService executor = Executors.newSingleThreadExecutor(new DefaultThreadFactory(prefix));
+        final ExecutorService executor = Executors.newSingleThreadExecutor(new EventLoopThreadFactory(prefix));
         final Server server = new ServerBuilder()
                 .startStopExecutor(executor)
                 .service("/", (ctx, req) -> HttpResponse.of(200))

File: core/src/main/java/com/linecorp/armeria/client/logging/LoggingClient.java
Patch:
@@ -115,7 +115,7 @@ public LoggingClient(Client<I, O> delegate, LogLevel level) {
              Function.identity(),
              Function.identity(),
              Function.identity(),
-             Sampler.always());
+             Sampler.ALWAYS_SAMPLE);
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/common/HttpMethod.java
Patch:
@@ -37,7 +37,7 @@
  */
 public enum HttpMethod {
 
-    // Forked from Netty at 93b144b7b4872ea623a378c75b92d33bea28ab51
+    // Forked from Netty 4.1.34 at ff7484864b1785103cbc62845ff3a392c93822b7
 
     /**
      * The OPTIONS method which represents a request for information about the communication options

File: core/src/main/java/com/linecorp/armeria/common/HttpStatusClass.java
Patch:
@@ -37,7 +37,7 @@
  */
 public enum HttpStatusClass {
 
-    // Forked from Netty at 4875a2aad4c82204caedb2d121fb5ef03c09fe44
+    // Forked from Netty 4.1.34 at 4875a2aad4c82204caedb2d121fb5ef03c09fe44
 
     /**
      * The informational class (1xx).

File: core/src/main/java/com/linecorp/armeria/common/util/Version.java
Patch:
@@ -61,7 +61,7 @@
  */
 public final class Version {
 
-    // Forked from Netty at d0912f27091e4548466df81f545c017a25c9d256
+    // Forked from Netty 4.1.34 at d0912f27091e4548466df81f545c017a25c9d256
 
     private static final String PROP_RESOURCE_PATH = "META-INF/com.linecorp.armeria.versions.properties";
 

File: core/src/main/java/com/linecorp/armeria/internal/DefaultAttributeMap.java
Patch:
@@ -59,7 +59,7 @@
  */
 public class DefaultAttributeMap implements AttributeMap {
 
-    // Forked from Netty at d0912f27091e4548466df81f545c017a25c9d256
+    // Forked from Netty 4.1.34 at 506f0d8f8c10e1b24924f7d992a726d7bdd2e486
 
     @SuppressWarnings("rawtypes")
     private static final AtomicReferenceFieldUpdater<DefaultAttributeMap, AtomicReferenceArray> updater =

File: core/src/main/java/com/linecorp/armeria/internal/Http1ClientCodec.java
Patch:
@@ -71,7 +71,7 @@
 public class Http1ClientCodec extends CombinedChannelDuplexHandler<HttpResponseDecoder, HttpRequestEncoder>
         implements HttpClientUpgradeHandler.SourceCodec {
 
-    // Forked from Netty at e0bbff74f7097f000472785982ad86c0ce891567
+    // Forked from Netty 4.1.34 at e0bbff74f7097f000472785982ad86c0ce891567
     // - Made the class non-final so that we can intercept the close() request.
     // - Handle 1xx responses correctly, not just 100 and 101.
 

File: core/src/main/java/com/linecorp/armeria/server/logging/LoggingService.java
Patch:
@@ -107,7 +107,7 @@ public LoggingService(Service<I, O> delegate, LogLevel level) {
              Function.identity(),
              Function.identity(),
              Function.identity(),
-             Sampler.always());
+             Sampler.ALWAYS_SAMPLE);
     }
 
     /**

File: core/src/test/java/com/linecorp/armeria/common/MediaTypeTest.java
Patch:
@@ -79,7 +79,7 @@
  */
 public class MediaTypeTest {
 
-    // Forked from Guava at abd0906f6ed288671b75aa6f828a6ba904fe4477 (24.0)
+    // Forked from Guava 27.1 at 7da42d206b81c8fe184f73a9314fd8ffcf565560
 
     @Test // reflection
     public void testParse_useConstants() throws Exception {

File: core/src/test/java/com/linecorp/armeria/internal/DefaultAttributeMapTest.java
Patch:
@@ -53,7 +53,7 @@
 
 public class DefaultAttributeMapTest {
 
-    // Forked from Netty at 2993760e9261f046db88a0e8ccf9edf4e9b0acad
+    // Forked from Netty 4.1.34 at 2993760e9261f046db88a0e8ccf9edf4e9b0acad
 
     private DefaultAttributeMap map;
 

File: spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/DefaultSslInfo.java
Patch:
@@ -49,7 +49,7 @@
  */
 final class DefaultSslInfo implements SslInfo {
 
-    // Forked from spring-web-5.0.8.RELEASE
+    // Forked from spring-web-5.1.5.RELEASE at 1e4a3a2370b9ded44a62155aea59c0d81c36149f
 
     @Nullable
     private final String sessionId;
@@ -107,7 +107,7 @@ private static X509Certificate[] initCertificates(SSLSession session) {
         Certificate[] certificates;
         try {
             certificates = session.getPeerCertificates();
-        } catch (Exception ex) {
+        } catch (Throwable ex) {
             return null;
         }
 

File: spring/boot-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfiguration.java
Patch:
@@ -122,7 +122,8 @@ ArmeriaServerConfigurator actuatorServerConfigurator(
                         mediaTypes.getProduced()
                 );
                 sb.service(mapping, (ctx, req) -> {
-                    Map<String, Link> links = new EndpointLinksResolver(endpoints).resolveLinks(req.path());
+                    final Map<String, Link> links =
+                            new EndpointLinksResolver(endpoints).resolveLinks(req.path());
                     return HttpResponse.of(
                             HttpStatus.OK,
                             MediaType.JSON,

File: core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java
Patch:
@@ -279,8 +279,8 @@ private void write0(HttpObject o, boolean endOfStream, boolean flush) {
         final ChannelFuture future;
         if (o instanceof HttpData) {
             final HttpData data = (HttpData) o;
-            future = encoder.writeData(id, streamId(), data, endOfStream);
             logBuilder.increaseRequestLength(data);
+            future = encoder.writeData(id, streamId(), data, endOfStream);
         } else if (o instanceof HttpHeaders) {
             future = encoder.writeHeaders(id, streamId(), (HttpHeaders) o, endOfStream);
         } else {

File: core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java
Patch:
@@ -299,8 +299,8 @@ private void write(HttpObject o, boolean endOfStream) {
         if (o instanceof HttpData) {
             final HttpData data = (HttpData) o;
             wroteEmptyData = data.isEmpty();
-            future = responseEncoder.writeData(req.id(), req.streamId(), data, endOfStream);
             logBuilder().increaseResponseLength(data);
+            future = responseEncoder.writeData(req.id(), req.streamId(), data, endOfStream);
         } else if (o instanceof HttpHeaders) {
             wroteEmptyData = false;
             future = responseEncoder.writeHeaders(req.id(), req.streamId(), (HttpHeaders) o, endOfStream);

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -606,8 +606,8 @@ private ChannelFuture respond0(
                 req.id(), req.streamId(), mutableHeaders, !hasContent);
         logBuilder.responseHeaders(mutableHeaders);
         if (hasContent) {
-            future = responseEncoder.writeData(req.id(), req.streamId(), resContent, true);
             logBuilder.increaseResponseLength(resContent);
+            future = responseEncoder.writeData(req.id(), req.streamId(), resContent, true);
         }
 
         future.addListener(f -> {

File: core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java
Patch:
@@ -222,6 +222,9 @@ public void onNext(HttpObject o) {
                 break;
             }
             case DONE:
+                // Cancel the subscription if any message comes here after the state has been changed to DONE.
+                assert subscription != null;
+                subscription.cancel();
                 ReferenceCountUtil.safeRelease(o);
                 return;
         }

File: core/src/test/java/com/linecorp/armeria/server/HttpServiceTest.java
Patch:
@@ -111,7 +111,7 @@ public void testContentLength() throws Exception {
                 assertThat(res.getStatusLine().toString()).isEqualTo("HTTP/1.1 200 OK");
                 assertThat(res.containsHeader("Content-Length")).isTrue();
                 assertThat(res.getHeaders("Content-Length"))
-                          .extracting(Header::getValue).containsExactly("6");
+                        .extracting(Header::getValue).containsExactly("6");
                 assertThat(EntityUtils.toString(res.getEntity())).isEqualTo("200 OK");
             }
         }

File: core/src/main/java/com/linecorp/armeria/common/metric/DropwizardMeterRegistries.java
Patch:
@@ -44,7 +44,7 @@ public final class DropwizardMeterRegistries {
     @VisibleForTesting
     static final HierarchicalNameMapper DEFAULT_NAME_MAPPER = (id, convention) -> {
         final String name = id.getConventionName(convention);
-        if (!id.getTags().iterator().hasNext()) {
+        if (!id.getTagsAsIterable().iterator().hasNext()) {
             return name;
         }
 

File: core/src/main/java/com/linecorp/armeria/client/AbstractClientOptionsBuilder.java
Patch:
@@ -209,7 +209,7 @@ public B contentPreviewerFactory(ContentPreviewerFactory factory) {
      * </ul>
      * @param length the maximum length of the preview.
      * @param defaultCharset the default charset for a request/response with unspecified charset in
-     *                       {@code "Content-Type"} header.
+     *                       {@code "content-type"} header.
      */
     public B contentPreview(int length, Charset defaultCharset) {
         return contentPreviewerFactory(ContentPreviewerFactory.ofText(length, defaultCharset));

File: core/src/main/java/com/linecorp/armeria/common/StringValueConverter.java
Patch:
@@ -71,6 +71,9 @@ public String convertObject(@Nullable Object value) {
             return DateFormatter.format(new Date(((Instant) value).toEpochMilli()));
         }
 
+        if (value instanceof CacheControl) {
+            return ((CacheControl) value).asHeaderValue();
+        }
         return value.toString();
     }
 

File: core/src/main/java/com/linecorp/armeria/common/logging/ContentPreviewer.java
Patch:
@@ -60,7 +60,7 @@ static ContentPreviewer ofBinary(int length,
      * with the maximum {@code length} limit.
      * @param length the maximum length of the preview.
      * @param defaultCharset the default charset for a request/response with unspecified charset in
-     *                       {@code "Content-Type"} header.
+     *                       {@code "content-type"} header.
      */
     static ContentPreviewer ofText(int length, Charset defaultCharset) {
         checkArgument(length >= 0, "length : %d (expected: >= 0)", length);

File: core/src/main/java/com/linecorp/armeria/common/logging/ContentPreviewerFactory.java
Patch:
@@ -106,7 +106,7 @@ static ContentPreviewerFactory of(Iterable<? extends ContentPreviewerFactory> fa
 
     /**
      * Creates a new instance of {@link ContentPreviewerFactory} which creates a {@link ContentPreviewer}
-     * through the supplier that matches with {@code "Content-Type"} header.
+     * through the supplier that matches with {@code "content-type"} header.
      */
     @SuppressWarnings("unchecked")
     static ContentPreviewerFactory of(Map<MediaType, ? extends Supplier<? extends ContentPreviewer>> map) {
@@ -191,7 +191,7 @@ static ContentPreviewerFactory ofText(int length, Charset defaultCharset, String
      *
      * @param length the maximum length of the preview.
      * @param defaultCharset the default charset for a request/response with unspecified charset in
-     *                       {@code "Content-Type"} header.
+     *                       {@code "content-type"} header.
      */
     static ContentPreviewerFactory ofText(int length, Charset defaultCharset) {
         if (length == 0) {

File: core/src/main/java/com/linecorp/armeria/server/AbstractVirtualHostBuilder.java
Patch:
@@ -604,7 +604,7 @@ public B contentPreviewerFactory(ContentPreviewerFactory factory) {
      * </ul>
      * @param length the maximum length of the preview.
      * @param defaultCharset the default charset for a request/response with unspecified charset in
-     *                       {@code "Content-Type"} header.
+     *                       {@code "content-type"} header.
      */
     public B contentPreview(int length, Charset defaultCharset) {
         return contentPreviewerFactory(ContentPreviewerFactory.ofText(length, defaultCharset));

File: core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java
Patch:
@@ -1246,7 +1246,7 @@ public ServerBuilder contentPreviewerFactory(ContentPreviewerFactory factory) {
      * </ul>
      * @param length the maximum length of the preview.
      * @param defaultCharset the default charset for a request/response with unspecified charset in
-     *                       {@code "Content-Type"} header.
+     *                       {@code "content-type"} header.
      */
     public ServerBuilder contentPreview(int length, Charset defaultCharset) {
         return contentPreviewerFactory(ContentPreviewerFactory.ofText(length, defaultCharset));

File: core/src/main/java/com/linecorp/armeria/server/file/HttpFileService.java
Patch:
@@ -210,6 +210,7 @@ private HttpFile findFile(ServiceRequestContext ctx, HttpRequest req) throws IOE
                         AutoIndex.listingToHtml(ctx.decodedPath(), decodedMappedPath, listing);
                 return HttpFileBuilder.of(autoIndex)
                                       .addHeader(HttpHeaderNames.CONTENT_TYPE, MediaType.HTML_UTF_8)
+                                      .setHeaders(config.headers())
                                       .build();
             }
         } else {
@@ -242,7 +243,7 @@ private HttpFile findFile(ServiceRequestContext ctx, String path,
     @Nullable
     private HttpFile findFile(ServiceRequestContext ctx, String path,
                               @Nullable String contentEncoding) throws IOException {
-        final HttpFile uncachedFile = config.vfs().get(path, config.clock(), contentEncoding);
+        final HttpFile uncachedFile = config.vfs().get(path, config.clock(), contentEncoding, config.headers());
         final HttpFileAttributes uncachedAttrs = uncachedFile.readAttributes();
         if (cache == null) {
             return uncachedAttrs != null ? uncachedFile : null;

File: core/src/main/java/com/linecorp/armeria/server/file/StreamingHttpFile.java
Patch:
@@ -34,7 +34,6 @@
 import com.spotify.futures.CompletableFutures;
 
 import com.linecorp.armeria.common.HttpData;
-import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpResponseWriter;
@@ -228,7 +227,7 @@ private CompletableFuture<AggregatedHttpFile> doAggregate(Executor fileReadExecu
                                            .lastModified(isLastModifiedEnabled());
 
                     if (contentType() != null) {
-                        builder.setHeader(HttpHeaderNames.CONTENT_TYPE, contentType());
+                        builder.contentType(contentType());
                     }
 
                     final String etag = generateEntityTag(attrs);

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpDocServiceTest.java
Patch:
@@ -136,6 +136,7 @@ public void jsonSpecification() throws InterruptedException {
         final HttpClient client = HttpClient.of(server.uri("/"));
         final AggregatedHttpMessage msg = client.get("/docs/specification.json").aggregate().join();
         assertThat(msg.status()).isEqualTo(HttpStatus.OK);
+        assertThat(msg.headers().get(HttpHeaderNames.CACHE_CONTROL)).isEqualTo("no-cache, must-revalidate");
         assertThatJson(msg.contentUtf8()).when(IGNORING_ARRAY_ORDER).isEqualTo(expectedJson);
     }
 

File: core/src/main/java/com/linecorp/armeria/server/streaming/ServerSentEvents.java
Patch:
@@ -364,8 +364,8 @@ private static HttpData toHttpData(ServerSentEvent sse) {
             sb.append("retry:").append(retry.toMillis()).append(LINE_FEED);
         }
 
-        final String sseText = sb.toString();
-        return sseText.isEmpty() ? HttpData.EMPTY_DATA : HttpData.ofUtf8(sseText);
+        return sb.length() == 0 ? HttpData.EMPTY_DATA
+                                : HttpData.ofUtf8(sb.append(LINE_FEED).toString());
     }
 
     private static <T> HttpData toHttpData(

File: core/src/test/java/com/linecorp/armeria/server/streaming/ServerSentEventsTest.java
Patch:
@@ -64,7 +64,7 @@ public void fromPublisherOrStream() {
             final AggregatedHttpMessage response = client.get(path).aggregate().join();
             assertThat(response.status()).isEqualTo(HttpStatus.OK);
             assertThat(response.headers().contentType()).isEqualTo(MediaType.EVENT_STREAM);
-            assertThat(response.content().toStringUtf8()).isEqualTo("data:foo\ndata:bar\n");
+            assertThat(response.content().toStringUtf8()).isEqualTo("data:foo\n\ndata:bar\n\n");
         }
     }
 
@@ -75,7 +75,7 @@ public void withConverter() {
             final AggregatedHttpMessage response = client.get(path).aggregate().join();
             assertThat(response.status()).isEqualTo(HttpStatus.OK);
             assertThat(response.headers().contentType()).isEqualTo(MediaType.EVENT_STREAM);
-            assertThat(response.content().toStringUtf8()).isEqualTo(":foo\n:bar\n");
+            assertThat(response.content().toStringUtf8()).isEqualTo(":foo\n\n:bar\n\n");
         }
     }
 
@@ -85,6 +85,6 @@ public void singleEvent() {
                 HttpClient.of(rule.uri("/single")).get("/sse").aggregate().join();
         assertThat(response.status()).isEqualTo(HttpStatus.OK);
         assertThat(response.headers().contentType()).isEqualTo(MediaType.EVENT_STREAM);
-        assertThat(response.content().toStringUtf8()).isEqualTo("event:add\n");
+        assertThat(response.content().toStringUtf8()).isEqualTo("event:add\n\n");
     }
 }

File: examples/annotated-http-service/src/main/java/example/armeria/server/annotated/ServerFactory.java
Patch:
@@ -20,7 +20,6 @@ public static Server of(int port) {
                  .annotatedService("/injection", new InjectionService())
                  .annotatedService("/messageConverter", new MessageConverterService())
                  .annotatedService("/exception", new ExceptionHandlerService())
-                 .annotatedService("/sse", new ServerSentEventsService())
                  .build();
     }
 

File: core/src/main/java/com/linecorp/armeria/server/HttpServerPipelineConfigurator.java
Patch:
@@ -398,7 +398,9 @@ private void addHttpHandlers(ChannelHandlerContext ctx) {
 
         @Override
         protected void handshakeFailure(ChannelHandlerContext ctx, Throwable cause) throws Exception {
-            logger.warn("{} TLS handshake failed:", ctx.channel(), cause);
+            if (!Exceptions.isExpected(cause)) {
+                logger.warn("{} TLS handshake failed:", ctx.channel(), cause);
+            }
             ctx.close();
 
             // On handshake failure, ApplicationProtocolNegotiationHandler will remove itself,

File: grpc/src/main/java/com/linecorp/armeria/internal/grpc/HttpStreamReader.java
Patch:
@@ -214,7 +214,7 @@ public void cancel() {
     private void closeDeframer() {
         if (!deframer.isClosed()) {
             deframer.deframe(HttpData.EMPTY_DATA, true);
-            deframer.close();
+            deframer.closeWhenComplete();
         }
     }
 

File: grpc/src/test/java/com/linecorp/armeria/internal/grpc/ArmeriaMessageDeframerTest.java
Patch:
@@ -171,6 +171,7 @@ public void deframe_multipleMessagesAfterRequests() throws Exception {
     public void deframe_endOfStream() throws Exception {
         deframer.request(1);
         deframer.deframe(HttpData.EMPTY_DATA, true);
+        deframer.closeWhenComplete();
         verify(listener).endOfStream();
         verifyNoMoreInteractions(listener);
     }

File: grpc/src/test/java/com/linecorp/armeria/internal/grpc/HttpStreamReaderTest.java
Patch:
@@ -152,7 +152,7 @@ public void onMessage_deframeError_errorListenerThrows() {
     public void clientDone() {
         reader.apply(null, null);
         verify(deframer).deframe(HttpData.EMPTY_DATA, true);
-        verify(deframer).close();
+        verify(deframer).closeWhenComplete();
     }
 
     @Test

File: core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java
Patch:
@@ -280,7 +280,7 @@ private void write0(HttpObject o, boolean endOfStream, boolean flush) {
         if (o instanceof HttpData) {
             final HttpData data = (HttpData) o;
             future = encoder.writeData(id, streamId(), data, endOfStream);
-            logBuilder.increaseRequestLength(data.length());
+            logBuilder.increaseRequestLength(data);
         } else if (o instanceof HttpHeaders) {
             future = encoder.writeHeaders(id, streamId(), (HttpHeaders) o, endOfStream);
         } else {

File: core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java
Patch:
@@ -214,7 +214,7 @@ public boolean tryWrite(HttpObject o) {
                     logBuilder.responseHeaders(headers);
                 }
             } else if (o instanceof HttpData) {
-                logBuilder.increaseResponseLength(((HttpData) o).length());
+                logBuilder.increaseResponseLength((HttpData) o);
             }
             return delegate.tryWrite(o);
         }

File: core/src/main/java/com/linecorp/armeria/common/MediaType.java
Patch:
@@ -696,7 +696,7 @@ public MediaType withParameter(String attribute, String value) {
 
     /**
      * Returns a new instance with the same type and subtype as this instance, with the {@code
-     * charset} parameter set to the {@link Charset#name name} of the given charset. Only one {@code
+     * charset} parameter set to the {@linkplain Charset#name() name} of the given charset. Only one {@code
      * charset} parameter will be present on the new instance regardless of the number set on this
      * one.
      *

File: core/src/main/java/com/linecorp/armeria/server/DecodedHttpRequest.java
Patch:
@@ -104,7 +104,7 @@ public boolean tryWrite(HttpObject obj) {
             final int length = ((HttpData) obj).length();
             inboundTrafficController.inc(length);
             assert ctx != null : "uninitialized DecodedHttpRequest must be aborted.";
-            ctx.logBuilder().requestLength(transferredBytes);
+            ctx.logBuilder().increaseRequestLength((HttpData) obj);
         }
         return published;
     }

File: core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java
Patch:
@@ -171,7 +171,8 @@ private DefaultServiceRequestContext(
         this.proxiedAddresses = proxiedAddresses;
         this.clientAddress = requireNonNull(clientAddress, "clientAddress");
 
-        log = new DefaultRequestLog(this);
+        log = new DefaultRequestLog(this, virtualHost().requestContentPreviewerFactory(),
+                                    virtualHost().responseContentPreviewerFactory());
         if (requestStartTimeSet) {
             log.startRequest(ch, sessionProtocol, sslSession, requestStartTimeNanos, requestStartTimeMicros);
         } else {

File: core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java
Patch:
@@ -297,7 +297,7 @@ private void write(HttpObject o, boolean endOfStream) {
             final HttpData data = (HttpData) o;
             wroteEmptyData = data.isEmpty();
             future = responseEncoder.writeData(req.id(), req.streamId(), data, endOfStream);
-            logBuilder().increaseResponseLength(data.length());
+            logBuilder().increaseResponseLength(data);
         } else if (o instanceof HttpHeaders) {
             wroteEmptyData = false;
             future = responseEncoder.writeHeaders(req.id(), req.streamId(), (HttpHeaders) o, endOfStream);
@@ -364,7 +364,7 @@ private void failAndRespond(Throwable cause, AggregatedHttpMessage message, Http
         final HttpData content = message.content();
 
         logBuilder().responseHeaders(headers);
-        logBuilder().increaseResponseLength(content.length());
+        logBuilder().increaseResponseLength(content);
 
         final State oldState = setDone();
         subscription.cancel();

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -607,7 +607,7 @@ private ChannelFuture respond0(
         logBuilder.responseHeaders(mutableHeaders);
         if (hasContent) {
             future = responseEncoder.writeData(req.id(), req.streamId(), resContent, true);
-            logBuilder.increaseResponseLength(resContent.length());
+            logBuilder.increaseResponseLength(resContent);
         }
 
         future.addListener(f -> {

File: core/src/main/java/com/linecorp/armeria/common/HttpRequestDuplicator.java
Patch:
@@ -56,7 +56,7 @@ public class HttpRequestDuplicator extends AbstractStreamMessageDuplicator<HttpO
     /**
      * Creates a new instance wrapping a {@link HttpRequest} and publishing to multiple subscribers.
      * The length of request is limited by default with the server-side parameter which is
-     * {@link Flags#DEFAULT_MAX_REQUEST_LENGTH}. If you are at client-side, you need to use
+     * {@link Flags#defaultMaxResponseLength()}. If you are at client-side, you need to use
      * {@link #HttpRequestDuplicator(HttpRequest, long)} and the {@code long} value should be greater than
      * the length of request or {@code 0} which disables the limit.
      * @param req the request that will publish data to subscribers

File: core/src/main/java/com/linecorp/armeria/common/HttpResponseDuplicator.java
Patch:
@@ -57,7 +57,7 @@ public class HttpResponseDuplicator
     /**
      * Creates a new instance wrapping a {@link HttpResponse} and publishing to multiple subscribers.
      * The length of response is limited by default with the client-side parameter which is
-     * {@link Flags#DEFAULT_MAX_RESPONSE_LENGTH}. If you are at server-side, you need to use
+     * {@link Flags#defaultMaxResponseLength()}. If you are at server-side, you need to use
      * {@link #HttpResponseDuplicator(HttpResponse, long)} and the {@code long} value should be greater than
      * the length of response or {@code 0} which disables the limit.
      * @param res the response that will publish data to subscribers

File: core/src/main/java/com/linecorp/armeria/client/logging/LoggingClientBuilder.java
Patch:
@@ -42,6 +42,7 @@ public <I extends Request, O extends Response> LoggingClient<I, O> build(Client<
                                    requestContentSanitizer(),
                                    responseHeadersSanitizer(),
                                    responseContentSanitizer(),
+                                   responseCauseSanitizer(),
                                    Sampler.create(samplingRate()));
     }
 

File: core/src/main/java/com/linecorp/armeria/server/logging/LoggingServiceBuilder.java
Patch:
@@ -42,6 +42,7 @@ public <I extends Request, O extends Response> LoggingService<I, O> build(Servic
                                     requestContentSanitizer(),
                                     responseHeadersSanitizer(),
                                     responseContentSanitizer(),
+                                    responseCauseSanitizer(),
                                     Sampler.create(samplingRate()));
     }
 

File: core/src/main/java/com/linecorp/armeria/client/metric/MetricCollectingClient.java
Patch:
@@ -69,7 +69,7 @@ Function<Client<I, O>, MetricCollectingClient<I, O>> newDecorator(
 
     @Override
     public O execute(ClientRequestContext ctx, I req) throws Exception {
-        RequestMetricSupport.setup(ctx, meterIdPrefixFunction);
+        RequestMetricSupport.setup(ctx, meterIdPrefixFunction, false);
         return delegate().execute(ctx, req);
     }
 }

File: core/src/main/java/com/linecorp/armeria/common/RequestContext.java
Patch:
@@ -439,7 +439,10 @@ default <T> CompletableFuture<T> makeContextAware(CompletableFuture<T> future) {
     /**
      * Returns whether this {@link RequestContext} has been timed-out (e.g., when the corresponding request
      * passes a deadline).
+     *
+     * @deprecated Use {@link ServiceRequestContext#isTimedOut()}.
      */
+    @Deprecated
     boolean isTimedOut();
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/metric/MetricCollectingService.java
Patch:
@@ -71,7 +71,7 @@ Function<Service<I, O>, MetricCollectingService<I, O>> newDecorator(
 
     @Override
     public O serve(ServiceRequestContext ctx, I req) throws Exception {
-        RequestMetricSupport.setup(ctx, meterIdPrefixFunction);
+        RequestMetricSupport.setup(ctx, meterIdPrefixFunction, true);
         return delegate().serve(ctx, req);
     }
 }

File: core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotatedValueResolver.java
Patch:
@@ -1098,7 +1098,7 @@ static boolean aggregationRequired(AggregationStrategy strategy, HttpRequest req
                 case ALWAYS:
                     return true;
                 case FOR_FORM_DATA:
-                    return isFormData(req.headers().contentType());
+                    return isFormData(req.contentType());
             }
             return false;
         }
@@ -1162,7 +1162,7 @@ HttpParameters httpParameters() {
                     result = httpParameters;
                     if (result == null) {
                         httpParameters = result = httpParametersOf(context.query(),
-                                                                   request.headers().contentType(),
+                                                                   request.contentType(),
                                                                    message);
                     }
                 }
@@ -1202,7 +1202,7 @@ private static HttpParameters httpParametersOf(@Nullable String query,
 
                 if (message != null && isFormData(contentType)) {
                     // Respect 'charset' attribute of the 'content-type' header if it exists.
-                    final String body = message.content().toString(
+                    final String body = message.content(
                             contentType.charset().orElse(StandardCharsets.US_ASCII));
                     if (!body.isEmpty()) {
                         final Map<String, List<String>> p =

File: core/src/main/java/com/linecorp/armeria/server/annotation/ByteArrayRequestConverterFunction.java
Patch:
@@ -36,7 +36,7 @@ public class ByteArrayRequestConverterFunction implements RequestConverterFuncti
     @Override
     public Object convertRequest(ServiceRequestContext ctx, AggregatedHttpMessage request,
                                  Class<?> expectedResultType) throws Exception {
-        final MediaType mediaType = request.headers().contentType();
+        final MediaType mediaType = request.contentType();
         if (mediaType == null ||
             mediaType.is(MediaType.OCTET_STREAM) ||
             mediaType.is(MediaType.APPLICATION_BINARY)) {

File: core/src/main/java/com/linecorp/armeria/server/annotation/JacksonRequestConverterFunction.java
Patch:
@@ -65,13 +65,12 @@ public JacksonRequestConverterFunction(ObjectMapper mapper) {
     public Object convertRequest(ServiceRequestContext ctx, AggregatedHttpMessage request,
                                  Class<?> expectedResultType) throws Exception {
 
-        final MediaType contentType = request.headers().contentType();
+        final MediaType contentType = request.contentType();
         if (contentType != null && (contentType.is(MediaType.JSON) ||
                                     contentType.subtype().endsWith("+json"))) {
             final ObjectReader reader = readers.computeIfAbsent(expectedResultType, mapper::readerFor);
             if (reader != null) {
-                final String content = request.content().toString(
-                        contentType.charset().orElse(StandardCharsets.UTF_8));
+                final String content = request.content(contentType.charset().orElse(StandardCharsets.UTF_8));
                 try {
                     return reader.readValue(content);
                 } catch (JsonProcessingException e) {

File: core/src/main/java/com/linecorp/armeria/server/annotation/StringRequestConverterFunction.java
Patch:
@@ -35,11 +35,10 @@ public Object convertRequest(ServiceRequestContext ctx, AggregatedHttpMessage re
                                  Class<?> expectedResultType) throws Exception {
         if (expectedResultType == String.class ||
             expectedResultType == CharSequence.class) {
-            final MediaType contentType = request.headers().contentType();
+            final MediaType contentType = request.contentType();
             if (contentType != null && contentType.is(MediaType.ANY_TEXT_TYPE)) {
                 // See https://tools.ietf.org/html/rfc2616#section-3.7.1
-                return request.content().toString(
-                        contentType.charset().orElse(StandardCharsets.ISO_8859_1));
+                return request.content(contentType.charset().orElse(StandardCharsets.ISO_8859_1));
             }
         }
         return RequestConverterFunction.fallthrough();

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerHttpClientTest.java
Patch:
@@ -162,7 +162,7 @@ public void onEventCountUpdated(String circuitBreakerName, EventCount eventCount
         for (int i = 0; i < minimumRequestThreshold + 1; i++) {
             // Need to call execute() one more to change the state of the circuit breaker.
             final long currentTime = ticker.read();
-            assertThat(client.get("/unavailable").aggregate().join().headers().status())
+            assertThat(client.get("/unavailable").aggregate().join().status())
                     .isSameAs(HttpStatus.SERVICE_UNAVAILABLE);
             await().until(() -> currentTime != ticker.read());
         }

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientAuthorityHeaderTest.java
Patch:
@@ -74,7 +74,7 @@ public void authorityIsDifferentByBackendsWhenRetry() {
         final HttpClient client = newHttpClientWithEndpointGroup();
 
         final AggregatedHttpMessage msg = client.get("/").aggregate().join();
-        assertThat(msg.content().toStringUtf8()).contains("www.bar.com");
+        assertThat(msg.contentUtf8()).contains("www.bar.com");
     }
 
     @Test
@@ -83,7 +83,7 @@ public void authorityIsSameWhenSet() {
 
         final HttpHeaders headers = HttpHeaders.of(GET, "/").authority("www.armeria.com");
         final AggregatedHttpMessage msg = client.execute(headers).aggregate().join();
-        assertThat(msg.content().toStringUtf8()).contains("www.armeria.com");
+        assertThat(msg.contentUtf8()).contains("www.armeria.com");
     }
 
     private static HttpClient newHttpClientWithEndpointGroup() {

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientWithLoggingTest.java
Patch:
@@ -101,7 +101,7 @@ public void retryingThenLogging() {
                 .decorator(loggingDecorator())
                 .decorator(RetryingHttpClient.newDecorator(RetryStrategy.onServerErrorStatus()))
                 .build();
-        assertThat(client.get("/hello").aggregate().join().content().toStringUtf8()).isEqualTo("hello");
+        assertThat(client.get("/hello").aggregate().join().contentUtf8()).isEqualTo("hello");
 
         // wait until 6 logs(3 requests and 3 responses) are called back
         await().untilAsserted(() -> assertThat(logResult.size()).isEqualTo(successLogIndex + 1));
@@ -116,7 +116,7 @@ public void loggingThenRetrying() throws Exception {
                 .decorator(RetryingHttpClient.newDecorator(RetryStrategy.onServerErrorStatus()))
                 .decorator(loggingDecorator())
                 .build();
-        assertThat(client.get("/hello").aggregate().join().content().toStringUtf8()).isEqualTo("hello");
+        assertThat(client.get("/hello").aggregate().join().contentUtf8()).isEqualTo("hello");
 
         // wait until 2 logs are called back
         await().untilAsserted(() -> assertThat(logResult.size()).isEqualTo(successLogIndex + 1));

File: core/src/test/java/com/linecorp/armeria/internal/DefaultHttpRequestTest.java
Patch:
@@ -122,7 +122,7 @@ public void splitHeaders() {
                 HttpHeaders.of(HttpMethod.GET, "/foo")
                            .add(HttpHeaderNames.CONTENT_LENGTH, "3"));
         // Content
-        assertThat(aggregated.content().toStringUtf8()).isEqualTo("foo");
+        assertThat(aggregated.contentUtf8()).isEqualTo("foo");
         // Trailing headers
         assertThat(aggregated.trailingHeaders()).isEqualTo(
                 HttpHeaders.of(HttpHeaderNames.of("a"), "b", HttpHeaderNames.of("c"), "d"));

File: core/src/test/java/com/linecorp/armeria/internal/DefaultHttpResponseTest.java
Patch:
@@ -127,7 +127,7 @@ public void splitHeaders() {
                 HttpHeaders.of(200)
                            .add(HttpHeaderNames.of("c"), "d"));
         // Content
-        assertThat(aggregated.content().toStringUtf8()).isEqualTo("foo");
+        assertThat(aggregated.contentUtf8()).isEqualTo("foo");
         // Trailing headers
         assertThat(aggregated.trailingHeaders()).isEqualTo(
                 HttpHeaders.of(HttpHeaderNames.of("e"), "f", HttpHeaderNames.of("g"), "h"));

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpDocServiceTest.java
Patch:
@@ -136,7 +136,7 @@ public void jsonSpecification() throws InterruptedException {
         final HttpClient client = HttpClient.of(server.uri("/"));
         final AggregatedHttpMessage msg = client.get("/docs/specification.json").aggregate().join();
         assertThat(msg.status()).isEqualTo(HttpStatus.OK);
-        assertThatJson(msg.content().toStringUtf8()).when(IGNORING_ARRAY_ORDER).isEqualTo(expectedJson);
+        assertThatJson(msg.contentUtf8()).when(IGNORING_ARRAY_ORDER).isEqualTo(expectedJson);
     }
 
     private static void addFooMethodInfo(Map<Class<?>, Set<MethodInfo>> methodInfos) {

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceTest.java
Patch:
@@ -315,14 +315,14 @@ public static class MyAnnotatedService5 {
         @Path("/a/string")
         public String postString(AggregatedHttpMessage message, RequestContext ctx) {
             validateContext(ctx);
-            return message.content().toStringUtf8();
+            return message.contentUtf8();
         }
 
         @Post
         @Path("/a/string-async1")
         public CompletionStage<String> postStringAsync1(AggregatedHttpMessage message, RequestContext ctx) {
             validateContext(ctx);
-            return CompletableFuture.supplyAsync(() -> message.content().toStringUtf8());
+            return CompletableFuture.supplyAsync(message::contentUtf8);
         }
 
         @Post

File: core/src/test/java/com/linecorp/armeria/server/HttpResponseExceptionTest.java
Patch:
@@ -37,6 +37,6 @@ public void testHttpResponse() throws Exception {
 
         final AggregatedHttpMessage message = exception.httpResponse().aggregate().join();
         assertThat(message.status()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);
-        assertThat(message.headers().contentType()).isEqualTo(MediaType.PLAIN_TEXT_UTF_8);
+        assertThat(message.contentType()).isEqualTo(MediaType.PLAIN_TEXT_UTF_8);
     }
 }

File: core/src/test/java/com/linecorp/armeria/server/PortUnificationServerTest.java
Patch:
@@ -89,6 +89,6 @@ public void test() throws Exception {
                                                 scheme + "://127.0.0.1:" + server.httpsPort() + '/');
         final AggregatedHttpMessage response = client.execute(HttpRequest.of(HttpMethod.GET, "/"))
                                                      .aggregate().join();
-        assertThat(response.content().toStringUtf8()).isEqualToIgnoringCase(scheme);
+        assertThat(response.contentUtf8()).isEqualToIgnoringCase(scheme);
     }
 }

File: core/src/test/java/com/linecorp/armeria/server/RedirectServiceTest.java
Patch:
@@ -268,7 +268,7 @@ public void testRedirectOK() throws Exception {
             }
 
             assertThat(msg.status()).isEqualTo(HttpStatus.OK);
-            assertThat(msg.content().toStringUtf8()).isEqualTo(expectedResponse[i]);
+            assertThat(msg.contentUtf8()).isEqualTo(expectedResponse[i]);
         }
         serverRule1.stop();
     }

File: core/src/test/java/com/linecorp/armeria/server/file/CachingHttpFileTest.java
Patch:
@@ -114,7 +114,7 @@ public void existentFile() throws Exception {
         // First read() should trigger uncached.aggregate().
         HttpResponse res = cached.read(executor, alloc);
         assertThat(res).isNotNull();
-        assertThat(res.aggregate().join().content().toStringUtf8()).isEqualTo("foo");
+        assertThat(res.aggregate().join().contentUtf8()).isEqualTo("foo");
         verify(uncached, times(1)).readAttributes();
         verify(uncached, times(1)).aggregate(executor);
         verifyNoMoreInteractions(uncached);
@@ -123,7 +123,7 @@ public void existentFile() throws Exception {
         // Second read() should not trigger uncached.aggregate().
         res = cached.read(executor, alloc);
         assertThat(res).isNotNull();
-        assertThat(res.aggregate().join().content().toStringUtf8()).isEqualTo("foo");
+        assertThat(res.aggregate().join().contentUtf8()).isEqualTo("foo");
         verify(uncached, times(1)).readAttributes();
         verifyNoMoreInteractions(uncached);
         clearInvocations(uncached);
@@ -137,7 +137,7 @@ public void existentFile() throws Exception {
         // Make sure read() invalidates the cache and triggers uncached.aggregate().
         res = cached.read(executor, alloc);
         assertThat(res).isNotNull();
-        assertThat(res.aggregate().join().content().toStringUtf8()).isEqualTo("bar");
+        assertThat(res.aggregate().join().contentUtf8()).isEqualTo("bar");
         verify(uncached, times(1)).readAttributes();
         verify(uncached, times(1)).aggregate(executor);
         verifyNoMoreInteractions(uncached);

File: core/src/test/java/com/linecorp/armeria/server/healthcheck/HttpHealthCheckServiceTest.java
Patch:
@@ -77,7 +77,7 @@ public void healthy() throws Exception {
         final AggregatedHttpMessage res = service.serve(context, req).aggregate().get();
 
         assertEquals(HttpStatus.OK, res.status());
-        assertEquals("ok", res.content().toStringUtf8());
+        assertEquals("ok", res.contentUtf8());
     }
 
     @Test
@@ -105,7 +105,7 @@ private void assertNotOk() throws Exception {
         final AggregatedHttpMessage res = service.serve(context, req).aggregate().get();
 
         assertEquals(HttpStatus.SERVICE_UNAVAILABLE, res.status());
-        assertEquals("not ok", res.content().toStringUtf8());
+        assertEquals("not ok", res.contentUtf8());
     }
 
     @Test

File: core/src/test/java/com/linecorp/armeria/server/other/AnnotatedHttpServiceAccessModifierTest.java
Patch:
@@ -97,16 +97,16 @@ private static String privateStatic0() {
     public void testAccessModifier() throws Exception {
         final HttpClient client = HttpClient.of(rule.uri("/"));
 
-        assertThat(client.get("/anonymous/public").aggregate().join().content().toStringUtf8())
+        assertThat(client.get("/anonymous/public").aggregate().join().contentUtf8())
                 .isEqualTo("hello");
         assertThat(client.get("/anonymous/package").aggregate().join().status())
                 .isEqualTo(HttpStatus.NOT_FOUND);
         assertThat(client.get("/anonymous/private").aggregate().join().status())
                 .isEqualTo(HttpStatus.NOT_FOUND);
 
-        assertThat(client.get("/named/public").aggregate().join().content().toStringUtf8())
+        assertThat(client.get("/named/public").aggregate().join().contentUtf8())
                 .isEqualTo("hello");
-        assertThat(client.get("/named/public/static").aggregate().join().content().toStringUtf8())
+        assertThat(client.get("/named/public/static").aggregate().join().contentUtf8())
                 .isEqualTo("hello");
         assertThat(client.get("/named/package").aggregate().join().status())
                 .isEqualTo(HttpStatus.NOT_FOUND);

File: examples/annotated-http-service/src/main/java/example/armeria/server/annotated/MessageConverterService.java
Patch:
@@ -171,9 +171,9 @@ public static final class CustomRequestConverter implements RequestConverterFunc
         @Override
         public Object convertRequest(ServiceRequestContext ctx, AggregatedHttpMessage request,
                                      Class<?> expectedResultType) throws Exception {
-            final MediaType mediaType = request.headers().contentType();
+            final MediaType mediaType = request.contentType();
             if (mediaType != null && mediaType.is(MediaType.PLAIN_TEXT_UTF_8)) {
-                return new Request(request.content().toStringUtf8());
+                return new Request(request.contentUtf8());
             }
             return RequestConverterFunction.fallthrough();
         }

File: examples/spring-boot-minimal/src/test/java/example/springframework/boot/minimal/HelloApplicationIntegrationTest.java
Patch:
@@ -23,15 +23,15 @@ public class HelloApplicationIntegrationTest {
     public void success() {
         final AggregatedHttpMessage response = client.get("/hello/Spring").aggregate().join();
         assertThat(response.status()).isEqualTo(HttpStatus.OK);
-        assertThat(response.content().toStringUtf8())
+        assertThat(response.contentUtf8())
                 .isEqualTo("Hello, Spring! This message is from Armeria annotated service!");
     }
 
     @Test
     public void failure() {
         final AggregatedHttpMessage response = client.get("/hello/a").aggregate().join();
         assertThat(response.status()).isEqualTo(HttpStatus.BAD_REQUEST);
-        assertThatJson(response.content().toStringUtf8())
+        assertThatJson(response.contentUtf8())
                 .node("message")
                 .isEqualTo("hello.name: name should have between 3 and 10 characters");
     }

File: examples/spring-boot-tomcat/src/test/java/example/springframework/boot/tomcat/HelloIntegrationTest.java
Patch:
@@ -44,20 +44,20 @@ public void initClient() {
     public void index() {
         final AggregatedHttpMessage res = client.get("/").aggregate().join();
         assertThat(res.status()).isEqualTo(HttpStatus.OK);
-        assertThat(res.content().toStringUtf8()).isEqualTo("index");
+        assertThat(res.contentUtf8()).isEqualTo("index");
     }
 
     @Test
     public void hello() throws Exception {
         final AggregatedHttpMessage res = client.get("/hello").aggregate().join();
         assertThat(res.status()).isEqualTo(HttpStatus.OK);
-        assertThat(res.content().toStringUtf8()).isEqualTo("Hello, World");
+        assertThat(res.contentUtf8()).isEqualTo("Hello, World");
     }
 
     @Test
     public void healthCheck() throws Exception {
         final AggregatedHttpMessage res = client.get("/internal/healthcheck").aggregate().join();
         assertThat(res.status()).isEqualTo(HttpStatus.OK);
-        assertThat(res.content().toStringUtf8()).isEqualTo("ok");
+        assertThat(res.contentUtf8()).isEqualTo("ok");
     }
 }

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcService.java
Patch:
@@ -120,7 +120,7 @@ public final class GrpcService extends AbstractHttpService
 
     @Override
     protected HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req) throws Exception {
-        final MediaType contentType = req.headers().contentType();
+        final MediaType contentType = req.contentType();
         final SerializationFormat serializationFormat = findSerializationFormat(contentType);
         if (serializationFormat == null) {
             return HttpResponse.of(HttpStatus.UNSUPPORTED_MEDIA_TYPE,

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/UnframedGrpcService.java
Patch:
@@ -242,7 +242,7 @@ private static void deframeAndRespond(
             return;
         }
 
-        final MediaType grpcMediaType = grpcResponse.headers().contentType();
+        final MediaType grpcMediaType = grpcResponse.contentType();
         final HttpHeaders unframedHeaders = HttpHeaders.copyOf(grpcResponse.headers());
         if (grpcMediaType != null) {
             if (grpcMediaType.is(GrpcSerializationFormats.PROTO.mediaType())) {

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlService.java
Patch:
@@ -157,12 +157,11 @@ static final class SamlParameters {
          */
         SamlParameters(AggregatedHttpMessage msg) {
             requireNonNull(msg, "msg");
-            final MediaType contentType = msg.headers().contentType();
+            final MediaType contentType = msg.contentType();
 
             final QueryStringDecoder decoder;
             if (contentType != null && contentType.belongsTo(MediaType.FORM_DATA)) {
-                final String query = msg.content().toString(
-                        contentType.charset().orElse(StandardCharsets.UTF_8));
+                final String query = msg.content(contentType.charset().orElse(StandardCharsets.UTF_8));
                 decoder = new QueryStringDecoder(query, false);
             } else {
                 final String path = msg.path();

File: spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationWithoutMeterTest.java
Patch:
@@ -92,6 +92,6 @@ public void testHttpServiceRegistrationBean() throws Exception {
 
         final AggregatedHttpMessage msg = response.aggregate().get();
         assertThat(msg.status()).isEqualTo(HttpStatus.OK);
-        assertThat(msg.content().toStringUtf8()).isEqualTo("ok");
+        assertThat(msg.contentUtf8()).isEqualTo("ok");
     }
 }

File: spring/boot-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaClientAutoConfigurationTest.java
Patch:
@@ -72,6 +72,6 @@ Mono<String> hello() {
     public void shouldGetHelloFromRestController() throws Exception {
         final HttpClient client = HttpClient.of("http://127.0.0.1:" + port);
         final AggregatedHttpMessage response = client.get("/proxy?port=" + port).aggregate().join();
-        assertThat(response.content().toStringUtf8()).isEqualTo("hello");
+        assertThat(response.contentUtf8()).isEqualTo("hello");
     }
 }

File: spring/boot-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactoryTest.java
Patch:
@@ -100,7 +100,7 @@ public void shouldReturnEchoResponse() {
 
             final AggregatedHttpMessage res = client.get("/hello").aggregate().join();
             assertThat(res.status()).isEqualTo(com.linecorp.armeria.common.HttpStatus.OK);
-            assertThat(res.content().toStringUtf8()).isEmpty();
+            assertThat(res.contentUtf8()).isEmpty();
         });
     }
 
@@ -142,7 +142,7 @@ public void shouldReturnCompressedResponse() {
             final AggregatedHttpMessage res = sendPostRequest(httpClient(server));
             assertThat(res.status()).isEqualTo(com.linecorp.armeria.common.HttpStatus.OK);
             assertThat(res.headers().get(HttpHeaderNames.CONTENT_ENCODING)).isEqualTo("gzip");
-            assertThat(res.content().toStringUtf8()).isNotEqualTo("hello");
+            assertThat(res.contentUtf8()).isNotEqualTo("hello");
         });
     }
 
@@ -186,7 +186,7 @@ private AggregatedHttpMessage sendPostRequest(HttpClient client) {
 
     private void validateEchoResponse(AggregatedHttpMessage res) {
         assertThat(res.status()).isEqualTo(com.linecorp.armeria.common.HttpStatus.OK);
-        assertThat(res.content().toStringUtf8()).isEqualTo(POST_BODY);
+        assertThat(res.contentUtf8()).isEqualTo(POST_BODY);
     }
 
     private void runEchoServer(ReactiveWebServerFactory factory,

File: testing-internal/src/main/java/com/linecorp/armeria/testing/internal/webapp/WebAppContainerTest.java
Patch:
@@ -144,7 +144,7 @@ public void https() throws Exception {
                 .build();
         final HttpClient client = HttpClient.of(clientFactory, server().httpsUri("/"));
         final AggregatedHttpMessage response = client.get("/jsp/index.jsp").aggregate().get();
-        final String actualContent = CR_OR_LF.matcher(response.content().toStringUtf8())
+        final String actualContent = CR_OR_LF.matcher(response.contentUtf8())
                                              .replaceAll("");
         assertThat(actualContent).isEqualTo(
                 "<html><body>" +

File: thrift/src/main/java/com/linecorp/armeria/client/thrift/THttpClientDelegate.java
Patch:
@@ -131,7 +131,7 @@ public RpcResponse execute(ClientRequestContext ctx, RpcRequest call) throws Exc
                     return null;
                 }
 
-                final HttpStatus status = res.headers().status();
+                final HttpStatus status = res.status();
                 if (status.code() != HttpStatus.OK.code()) {
                     handlePreDecodeException(ctx, reply, func, new InvalidResponseException(status.toString()));
                     return null;

File: core/src/main/java/com/linecorp/armeria/common/util/Exceptions.java
Patch:
@@ -137,9 +137,11 @@ private static String protocolName(@Nullable SessionProtocol protocol) {
      *   <li>{@link Http2Exception} - 'Stream closed'</li>
      *   <li>{@link SSLException} - 'SSLEngine closed already'</li>
      * </ul>
+     *
+     * @see Flags#verboseSocketExceptions()
      */
     public static boolean isExpected(Throwable cause) {
-        if (Flags.verboseExceptions()) {
+        if (Flags.verboseSocketExceptions()) {
             return false;
         }
 

File: core/src/test/java/com/linecorp/armeria/common/util/ExceptionsTest.java
Patch:
@@ -80,7 +80,7 @@ public void testTraceText() {
 
     @Test
     public void testIsExpected() {
-        final boolean expected = !Flags.verboseExceptions();
+        final boolean expected = !Flags.verboseSocketExceptions();
 
         assertThat(Exceptions.isExpected(new Exception())).isFalse();
         assertThat(Exceptions.isExpected(new Exception("broken pipe"))).isFalse();

File: core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpService.java
Patch:
@@ -16,9 +16,9 @@
 
 package com.linecorp.armeria.internal.annotation;
 
+import static com.linecorp.armeria.internal.ObjectCollectingUtil.collectFrom;
 import static com.linecorp.armeria.internal.annotation.AnnotatedValueResolver.AggregationStrategy.aggregationRequired;
 import static com.linecorp.armeria.internal.annotation.AnnotatedValueResolver.toArguments;
-import static com.linecorp.armeria.internal.annotation.ObjectCollectingUtil.collectFrom;
 import static java.util.Objects.requireNonNull;
 
 import java.lang.reflect.Method;

File: core/src/main/java/com/linecorp/armeria/server/annotation/StringResponseConverterFunction.java
Patch:
@@ -15,8 +15,7 @@
  */
 package com.linecorp.armeria.server.annotation;
 
-import static com.linecorp.armeria.internal.annotation.ResponseConversionUtil.aggregateFrom;
-import static com.linecorp.armeria.internal.annotation.ResponseConversionUtil.toMutableHeaders;
+import static com.linecorp.armeria.internal.ResponseConversionUtil.aggregateFrom;
 
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
@@ -62,7 +61,7 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,
                 return HttpResponse.of(headers, toHttpData(result, charset), trailingHeaders);
             }
         } else if (result instanceof CharSequence) {
-            return HttpResponse.of(toMutableHeaders(headers).contentType(MediaType.PLAIN_TEXT_UTF_8),
+            return HttpResponse.of(headers.toMutable().contentType(MediaType.PLAIN_TEXT_UTF_8),
                                    HttpData.ofUtf8(((CharSequence) result).toString()),
                                    trailingHeaders);
         }

File: examples/annotated-http-service/src/main/java/example/armeria/server/annotated/ServerFactory.java
Patch:
@@ -20,6 +20,7 @@ public static Server of(int port) {
                  .annotatedService("/injection", new InjectionService())
                  .annotatedService("/messageConverter", new MessageConverterService())
                  .annotatedService("/exception", new ExceptionHandlerService())
+                 .annotatedService("/sse", new ServerSentEventsService())
                  .build();
     }
 

File: core/src/main/java/com/linecorp/armeria/server/annotation/Order.java
Patch:
@@ -25,7 +25,7 @@
  * Specifies an order which is used to sort the annotated service methods.
  */
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.METHOD)
+@Target({ ElementType.METHOD, ElementType.ANNOTATION_TYPE })
 public @interface Order {
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/annotation/StatusCode.java
Patch:
@@ -27,7 +27,7 @@
  * {@code @StatusCode(204)} would be applied. Otherwise, {@code @StatusCode(200)} would be applied.
  */
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.METHOD)
+@Target({ ElementType.METHOD, ElementType.ANNOTATION_TYPE })
 public @interface StatusCode {
     /**
      * A default HTTP status code of a response produced by an annotated HTTP service.

File: core/src/main/java/com/linecorp/armeria/server/docs/DocService.java
Patch:
@@ -223,6 +223,7 @@ private static FieldInfo addParameterDocString(ServiceInfo service, MethodInfo m
                              field.location(),
                              field.requirement(),
                              field.typeSignature(),
+                             field.childFieldInfos(),
                              docString(service.name() + '/' + method.name() + '/' + field.name(),
                                        field.docString(), docStrings));
     }
@@ -263,6 +264,7 @@ private static FieldInfo addFieldDocString(NamedTypeInfo parent, FieldInfo field
                              field.location(),
                              field.requirement(),
                              field.typeSignature(),
+                             field.childFieldInfos(),
                              docString(parent.name() + '/' + field.name(), field.docString(), docStrings));
     }
 

File: core/src/main/java/com/linecorp/armeria/server/docs/EndpointInfoBuilder.java
Patch:
@@ -151,7 +151,7 @@ public EndpointInfoBuilder availableMimeTypes(Iterable<MediaType> availableMimeT
      * Returns a newly-created {@link EndpointInfo} based on the properties of this builder.
      */
     public EndpointInfo build() {
-        checkState(availableMimeTypes != null && !Iterables.isEmpty(availableMimeTypes),
+        checkState(availableMimeTypes != null && !availableMimeTypes.isEmpty(),
                    "Should at least have an available media type.");
         return new EndpointInfo(hostnamePattern, pathMapping, regexPathPrefix,
                                 fragment, defaultMimeType, availableMimeTypes);

File: core/src/main/java/com/linecorp/armeria/server/docs/FieldRequirement.java
Patch:
@@ -33,5 +33,5 @@ public enum FieldRequirement {
     /**
      * The requirement level is unspecified and will be handled implicitly by the serialization layer.
      */
-    DEFAULT
+    UNSPECIFIED
 }

File: core/src/main/java/com/linecorp/armeria/common/ImmutableHttpHeaders.java
Patch:
@@ -103,7 +103,7 @@ public HttpHeaders contentType(MediaType mediaType) {
     }
 
     @Override
-    public HttpHeaders setAllIfAbsent(Headers<? extends AsciiString, ? extends String, ?> headers) {
+    public HttpHeaders setAllIfAbsent(Headers<AsciiString, String, ?> headers) {
         return unsupported();
     }
 

File: core/src/main/java/com/linecorp/armeria/server/cors/CorsService.java
Patch:
@@ -96,7 +96,7 @@ protected HttpObject filter(HttpObject obj) {
 
                 final HttpHeaders mutableHeaders = headers.toMutable();
                 setCorsResponseHeaders(ctx, req, mutableHeaders);
-                return mutableHeaders;
+                return mutableHeaders.asImmutable();
             }
         };
     }

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceResponseConverterTest.java
Patch:
@@ -365,7 +365,6 @@ public void cancel() {
 
     @Retention(RetentionPolicy.RUNTIME)
     @Target({ ElementType.TYPE, ElementType.METHOD })
-    @Produces("application/binary")
     @Produces("application/octet-stream")
     @interface UserProduceBinary {}
 

File: core/src/main/java/com/linecorp/armeria/client/DecoratingClient.java
Patch:
@@ -22,8 +22,9 @@
 import com.linecorp.armeria.common.Response;
 
 /**
- * Decorates a {@link Client}. Use {@link SimpleDecoratingClient} or
- * {@link ClientBuilder#decorator(Class, Class, DecoratingClientFunction)} if your {@link Client} has the same
+ * Decorates a {@link Client}. Use {@link SimpleDecoratingClient},
+ * {@link ClientBuilder#decorator(DecoratingClientFunction)} or
+ * {@link ClientBuilder#rpcDecorator(DecoratingClientFunction)} if your {@link Client} has the same
  * {@link Request} and {@link Response} type with the {@link Client} being decorated.
  *
  * @param <T_I> the {@link Request} type of the {@link Client} being decorated

File: core/src/main/java/com/linecorp/armeria/client/DecoratingClientFunction.java
Patch:
@@ -21,7 +21,8 @@
 
 /**
  * A functional interface that enables building a {@link SimpleDecoratingClient} with
- * {@link ClientBuilder#decorator(Class, Class, DecoratingClientFunction)}.
+ * {@link ClientBuilder#decorator(DecoratingClientFunction)} and
+ * {@link ClientBuilder#rpcDecorator(DecoratingClientFunction)}.
  *
  * @param <I> the {@link Request} type
  * @param <O> the {@link Response} type

File: core/src/main/java/com/linecorp/armeria/client/FunctionalDecoratingClient.java
Patch:
@@ -25,7 +25,8 @@
  * A decorating {@link Client} which implements its {@link #execute(ClientRequestContext, Request)} method
  * using a given function.
  *
- * @see ClientBuilder#decorator(Class, Class, DecoratingClientFunction)
+ * @see ClientBuilder#decorator(DecoratingClientFunction)
+ * @see ClientBuilder#rpcDecorator(DecoratingClientFunction)
  */
 final class FunctionalDecoratingClient<I extends Request, O extends Response>
         extends SimpleDecoratingClient<I, O> {

File: core/src/main/java/com/linecorp/armeria/common/logging/RequestLogAvailability.java
Patch:
@@ -27,7 +27,7 @@ public enum RequestLogAvailability {
      *   <li>{@link RequestLog#requestStartTimeMillis()}</li>
      *   <li>{@link RequestLog#channel()}</li>
      *   <li>{@link RequestLog#sessionProtocol()}</li>
-     *   <li>{@link RequestLog#host()}</li>
+     *   <li>{@link RequestLog#authority()}</li>
      * </ul>
      */
     REQUEST_START(1, 1),

File: core/src/main/java/com/linecorp/armeria/internal/crypto/BouncyCastleKeyFactoryProvider.java
Patch:
@@ -81,6 +81,7 @@ public static synchronized <T> T call(Callable<T> task) throws Exception {
         }
     }
 
+    @SuppressWarnings("deprecation") // Not deprecated in Java 8.
     private BouncyCastleKeyFactoryProvider() {
         super(PROVIDER_NAME, 1.0, "Armeria Bouncy Castle KeyFactory Collection");
         AccessController.doPrivileged((PrivilegedAction<?>) () -> {

File: thrift/src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTest.java
Patch:
@@ -269,15 +269,15 @@ public static void init() throws Exception {
                 .build();
 
         final ClientDecorationBuilder decoBuilder = new ClientDecorationBuilder();
-        decoBuilder.add(RpcRequest.class, RpcResponse.class, (delegate, ctx, req) -> {
+        decoBuilder.addRpc((delegate, ctx, req) -> {
             if (recordMessageLogs) {
                 ctx.log().addListener(requestLogs::add, RequestLogAvailability.COMPLETE);
             }
             return delegate.execute(ctx, req);
         });
 
         if (ENABLE_LOGGING_DECORATORS) {
-            decoBuilder.add(RpcRequest.class, RpcResponse.class, LoggingClient.newDecorator());
+            decoBuilder.addRpc(LoggingClient.newDecorator());
         }
 
         clientOptions = ClientOptions.of(ClientOption.DECORATION.newValue(decoBuilder.build()));

File: core/src/test/java/com/linecorp/armeria/internal/metric/RequestMetricSupportTest.java
Patch:
@@ -63,7 +63,6 @@ public void httpSuccess() {
         assertThat(measurements).containsEntry("foo.activeRequests#value{method=POST}", 1.0);
 
         ctx.logBuilder().responseHeaders(HttpHeaders.of(200));
-        ctx.logBuilder().responseFirstBytesTransferred();
         ctx.logBuilder().responseLength(456);
 
         ctx.logBuilder().endRequest();

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java
Patch:
@@ -148,7 +148,7 @@ class ArmeriaServerCall<I, O> extends ServerCall<I, O>
                       int maxOutboundMessageSizeBytes,
                       ServiceRequestContext ctx,
                       SerializationFormat serializationFormat,
-                      MessageMarshaller jsonMarshaller,
+                      @Nullable MessageMarshaller jsonMarshaller,
                       boolean unsafeWrapRequestBuffers,
                       boolean useBlockingTaskExecutor,
                       String advertisedEncodingsHeader) {

File: core/src/main/java/com/linecorp/armeria/server/cors/CorsService.java
Patch:
@@ -94,8 +94,9 @@ protected HttpObject filter(HttpObject obj) {
                     return headers;
                 }
 
-                setCorsResponseHeaders(ctx, req, headers);
-                return headers;
+                final HttpHeaders mutableHeaders = headers.toMutable();
+                setCorsResponseHeaders(ctx, req, mutableHeaders);
+                return mutableHeaders;
             }
         };
     }

File: grpc/src/main/java/com/linecorp/armeria/internal/grpc/ArmeriaMessageDeframer.java
Patch:
@@ -191,7 +191,7 @@ public ArmeriaMessageDeframer(Listener listener,
                                   int maxMessageSizeBytes,
                                   ByteBufAllocator alloc) {
         this.listener = requireNonNull(listener, "listener");
-        this.maxMessageSizeBytes = maxMessageSizeBytes;
+        this.maxMessageSizeBytes = maxMessageSizeBytes > 0 ? maxMessageSizeBytes : Integer.MAX_VALUE;
         this.alloc = requireNonNull(alloc, "alloc");
 
         unprocessed = new ArrayDeque<>();

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcService.java
Patch:
@@ -213,9 +213,10 @@ private <I, O> ArmeriaServerCall<I, O> startCall(
     }
 
     @Override
-    public void serviceAdded(ServiceConfig cfg) throws Exception {
+    public void serviceAdded(ServiceConfig cfg) {
         if (maxInboundMessageSizeBytes == NO_MAX_INBOUND_MESSAGE_SIZE) {
-            maxInboundMessageSizeBytes = (int) cfg.server().config().defaultMaxRequestLength();
+            maxInboundMessageSizeBytes = (int) Math.min(cfg.server().config().defaultMaxRequestLength(),
+                                                        Integer.MAX_VALUE);
         }
     }
 

File: core/src/main/java/com/linecorp/armeria/client/ResponseTimeoutException.java
Patch:
@@ -35,6 +35,6 @@ public static ResponseTimeoutException get() {
     }
 
     private ResponseTimeoutException() {
-        super((Throwable) null);
+        super(null, null, false, false);
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/WriteTimeoutException.java
Patch:
@@ -35,6 +35,6 @@ public static WriteTimeoutException get() {
     }
 
     private WriteTimeoutException() {
-        super((Throwable) null);
+        super(null, null, false, false);
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/RequestTimeoutException.java
Patch:
@@ -35,6 +35,6 @@ public static RequestTimeoutException get() {
     }
 
     private RequestTimeoutException() {
-        super((Throwable) null);
+        super(null, null, false, false);
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java
Patch:
@@ -160,7 +160,7 @@ public void onNext(HttpObject o) {
                             " (service: " + service() + ')');
                 }
 
-                HttpHeaders headers = (HttpHeaders) o;
+                final HttpHeaders headers = (HttpHeaders) o;
                 final HttpStatus status = headers.status();
                 if (status == null) {
                     throw newIllegalStateException("published an HttpHeaders without status: " + o +

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -22,6 +22,7 @@
 import static com.linecorp.armeria.common.SessionProtocol.H1C;
 import static com.linecorp.armeria.common.SessionProtocol.H2;
 import static com.linecorp.armeria.common.SessionProtocol.H2C;
+import static com.linecorp.armeria.internal.ArmeriaHttpUtil.isCorsPreflightRequest;
 import static com.linecorp.armeria.server.HttpHeaderUtil.determineClientAddress;
 import static io.netty.handler.codec.http2.Http2CodecUtil.DEFAULT_WINDOW_SIZE;
 import static java.util.Objects.requireNonNull;
@@ -351,7 +352,7 @@ private void handleRequest(ChannelHandlerContext ctx, DecodedHttpRequest req) th
 
         final PathMappingContext mappingCtx = DefaultPathMappingContext.of(
                 host, hostname, pathAndQuery.path(), pathAndQuery.query(), headers,
-                host.producibleMediaTypes());
+                host.producibleMediaTypes(), isCorsPreflightRequest(req));
         // Find the service that matches the path.
         final PathMapped<ServiceConfig> mapped;
         try {

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java
Patch:
@@ -51,7 +51,7 @@ public abstract class RetryingClient<I extends Request, O extends Response>
     private static final Logger logger = LoggerFactory.getLogger(RetryingClient.class);
 
     private static final IllegalStateException CLOSED_CHANNEL_FACTORY_EXCEPTION = Exceptions.clearTrace(
-            new IllegalStateException(ClientFactory.class.getSimpleName() + " has been closed."));
+            new IllegalStateException(ClientFactory.class.getSimpleName() + " has been closed.", null));
 
     private static final AttributeKey<State> STATE =
             AttributeKey.valueOf(RetryingClient.class, "STATE");

File: grpc/src/main/java/com/linecorp/armeria/common/grpc/StatusCauseException.java
Patch:
@@ -27,6 +27,8 @@
  */
 public final class StatusCauseException extends RuntimeException {
 
+    private static final long serialVersionUID = -1792808536714102039L;
+
     private final String originalClassName;
     private final String originalMessage;
 

File: saml/src/main/java/com/linecorp/armeria/server/saml/HttpPostBindingUtil.java
Patch:
@@ -93,7 +93,7 @@ static HttpData getSsoForm(String remoteEndpointUrl,
      */
     static String toSignedBase64(SignableSAMLObject signableObj,
                                  Credential signingCredential,
-                                 String signatureAlgorithm) throws SamlException {
+                                 String signatureAlgorithm) {
         sign(signableObj, signingCredential, signatureAlgorithm);
         final String messageStr = nodeToString(serialize(signableObj));
         return Base64.getEncoder().encodeToString(messageStr.getBytes(StandardCharsets.UTF_8));
@@ -103,8 +103,7 @@ static String toSignedBase64(SignableSAMLObject signableObj,
      * Converts an {@link AggregatedHttpMessage} which is received from the remote entity to
      * a {@link SAMLObject}.
      */
-    static <T extends SAMLObject> MessageContext<T> toSamlObject(AggregatedHttpMessage msg,
-                                                                 String name) throws SamlException {
+    static <T extends SAMLObject> MessageContext<T> toSamlObject(AggregatedHttpMessage msg, String name) {
         final SamlParameters parameters = new SamlParameters(msg);
         final byte[] decoded;
         try {

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlDecorator.java
Patch:
@@ -173,7 +173,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
     /**
      * Returns an {@link HttpResponse} for SAML authentication failure.
      */
-    private HttpResponse fail(ServiceRequestContext ctx, Throwable cause) {
+    private static HttpResponse fail(ServiceRequestContext ctx, Throwable cause) {
         logger.trace("{} Cannot initiate SAML authentication", ctx, cause);
         return HttpResponse.of(HttpStatus.UNAUTHORIZED);
     }

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlMetadataServiceFunction.java
Patch:
@@ -119,7 +119,7 @@ public HttpResponse serve(ServiceRequestContext ctx, AggregatedHttpMessage msg,
     }
 
     private EntityDescriptor buildMetadataEntityDescriptorElement(
-            String defaultHostname, SamlPortConfig portConfig) throws SamlException {
+            String defaultHostname, SamlPortConfig portConfig) {
         final EntityDescriptor entityDescriptor = build(EntityDescriptor.DEFAULT_ELEMENT_NAME);
         entityDescriptor.setEntityID(entityId);
 

File: saml/src/main/java/com/linecorp/armeria/server/saml/SamlService.java
Patch:
@@ -178,7 +178,7 @@ static final class SamlParameters {
          *
          * @throws SamlException if a parameter with the specified {@code name} does not exist
          */
-        String getFirstValue(String name) throws SamlException {
+        String getFirstValue(String name) {
             final String value = getFirstValueOrNull(name);
             if (value == null) {
                 throw new SamlException("failed to get the value of a parameter: " + name);

File: core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java
Patch:
@@ -320,7 +320,7 @@ public ClientFactoryBuilder useHttp2Preface(boolean useHttp2Preface) {
 
     /**
      * Sets whether to use <a href="https://en.wikipedia.org/wiki/HTTP_pipelining">HTTP pipelining</a> for
-     * HTTP/1 connections. This does not affect HTTP/2 connections. This option is enabled by default.
+     * HTTP/1 connections. This does not affect HTTP/2 connections. This option is disabled by default.
      */
     public ClientFactoryBuilder useHttp1Pipelining(boolean useHttp1Pipelining) {
         this.useHttp1Pipelining = useHttp1Pipelining;

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingHttpClientTest.java
Patch:
@@ -44,7 +44,6 @@
 import com.linecorp.armeria.client.ClientFactory;
 import com.linecorp.armeria.client.ClientFactoryBuilder;
 import com.linecorp.armeria.client.ClientRequestContext;
-import com.linecorp.armeria.client.ClosedClientFactoryException;
 import com.linecorp.armeria.client.HttpClient;
 import com.linecorp.armeria.client.HttpClientBuilder;
 import com.linecorp.armeria.client.ResponseTimeoutException;
@@ -410,7 +409,9 @@ public void shouldGetExceptionWhenFactoryIsClosed() {
         // The next retry will be after 8 seconds so closing the factory after 3 seconds should work.
         Executors.newSingleThreadScheduledExecutor().schedule(factory::close, 3, TimeUnit.SECONDS);
         assertThatThrownBy(() -> client.get("/service-unavailable").aggregate().join())
-                .hasCauseInstanceOf(ClosedClientFactoryException.class);
+                .hasCauseInstanceOf(IllegalStateException.class)
+                .satisfies(cause -> assertThat(cause.getCause().getMessage()).matches(
+                        "(?i).*(factory has been closed|not accepting a task).*"));
     }
 
     @Test

File: thrift/src/test/java/com/linecorp/armeria/it/client/retry/RetryingRpcClientTest.java
Patch:
@@ -40,7 +40,6 @@
 import com.linecorp.armeria.client.ClientBuilder;
 import com.linecorp.armeria.client.ClientFactory;
 import com.linecorp.armeria.client.ClientFactoryBuilder;
-import com.linecorp.armeria.client.ClosedClientFactoryException;
 import com.linecorp.armeria.client.retry.Backoff;
 import com.linecorp.armeria.client.retry.RetryStrategyWithContent;
 import com.linecorp.armeria.client.retry.RetryingRpcClient;
@@ -168,7 +167,9 @@ public void shouldGetExceptionWhenFactoryIsClosed() throws Exception {
         // The next retry will be after 8 seconds so closing the factory after 3 seconds should work.
         Executors.newSingleThreadScheduledExecutor().schedule(factory::close, 3, TimeUnit.SECONDS);
         assertThatThrownBy(() -> client.hello("hello"))
-                .isInstanceOf(ClosedClientFactoryException.class);
+                .isInstanceOf(IllegalStateException.class)
+                .satisfies(cause -> assertThat(cause.getMessage()).matches(
+                        "(?i).*(factory has been closed|not accepting a task).*"));
     }
 
     @Test

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/ArmeriaServerCallTest.java
Patch:
@@ -117,6 +117,7 @@ public void setUp() {
                 GrpcSerializationFormats.PROTO,
                 MessageMarshaller.builder().build(),
                 false,
+                false,
                 "gzip");
         call.setListener(listener);
         call.messageReader().onSubscribe(subscription);
@@ -172,6 +173,7 @@ public void messageRead_wrappedByteBuf() {
                 GrpcSerializationFormats.PROTO,
                 MessageMarshaller.builder().build(),
                 true,
+                false,
                 "gzip");
 
         final ByteBuf buf = GrpcTestUtil.requestByteBuf();

File: core/src/main/java/com/linecorp/armeria/common/HttpMessageAggregator.java
Patch:
@@ -57,14 +57,14 @@ public final void onSubscribe(Subscription s) {
     }
 
     /**
-     * Handled by {@link #accept(Void, Throwable)} instead,
+     * Handled by {@link #apply(Void, Throwable)} instead,
      * because this method is not invoked on cancellation and timeout.
      */
     @Override
     public final void onError(Throwable throwable) {}
 
     /**
-     * Handled by {@link #accept(Void, Throwable)} instead,
+     * Handled by {@link #apply(Void, Throwable)} instead,
      * because this method is not invoked on cancellation and timeout.
      */
     @Override

File: core/src/main/java/com/linecorp/armeria/common/HttpRequest.java
Patch:
@@ -368,7 +368,7 @@ default CompletableFuture<AggregatedHttpMessage> aggregate(EventExecutor executo
      * Aggregates this request. The returned {@link CompletableFuture} will be notified when the content and
      * the trailing headers of the request is received fully. {@link AggregatedHttpMessage#content()} will
      * return a pooled object, and the caller must ensure to release it. If you don't know what this means,
-     * use {@link HttpResponse#aggregate()}.
+     * use {@link #aggregate()}.
      */
     default CompletableFuture<AggregatedHttpMessage> aggregateWithPooledObjects(ByteBufAllocator alloc) {
         requireNonNull(alloc, "alloc");
@@ -383,7 +383,7 @@ default CompletableFuture<AggregatedHttpMessage> aggregateWithPooledObjects(Byte
      * Aggregates this request. The returned {@link CompletableFuture} will be notified when the content and
      * the trailing headers of the request is received fully. {@link AggregatedHttpMessage#content()} will
      * return a pooled object, and the caller must ensure to release it. If you don't know what this means,
-     * use {@link HttpResponse#aggregate()}.
+     * use {@link #aggregate()}.
      */
     default CompletableFuture<AggregatedHttpMessage> aggregateWithPooledObjects(
             EventExecutor executor, ByteBufAllocator alloc) {

File: core/src/main/java/com/linecorp/armeria/common/HttpResponse.java
Patch:
@@ -380,7 +380,7 @@ default CompletableFuture<AggregatedHttpMessage> aggregate(EventExecutor executo
      * Aggregates this response. The returned {@link CompletableFuture} will be notified when the content and
      * the trailing headers of the response are received fully. {@link AggregatedHttpMessage#content()} will
      * return a pooled object, and the caller must ensure to release it. If you don't know what this means,
-     * use {@link HttpResponse#aggregate()}.
+     * use {@link #aggregate()}.
      */
     default CompletableFuture<AggregatedHttpMessage> aggregateWithPooledObjects(ByteBufAllocator alloc) {
         requireNonNull(alloc, "alloc");
@@ -395,7 +395,7 @@ default CompletableFuture<AggregatedHttpMessage> aggregateWithPooledObjects(Byte
      * Aggregates this response. The returned {@link CompletableFuture} will be notified when the content and
      * the trailing headers of the request is received fully. {@link AggregatedHttpMessage#content()} will
      * return a pooled object, and the caller must ensure to release it. If you don't know what this means,
-     * use {@link HttpResponse#aggregate()}.
+     * use {@link #aggregate()}.
      */
     default CompletableFuture<AggregatedHttpMessage> aggregateWithPooledObjects(
             EventExecutor executor, ByteBufAllocator alloc) {

File: core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java
Patch:
@@ -202,8 +202,7 @@ private HttpObject convertServerHeaders(
             final io.netty.handler.codec.http.HttpHeaders outHeaders = res.headers();
             convert(streamId, headers, outHeaders, false);
 
-            if (informational) {
-                // 1xx responses does not have the 'content-length' header.
+            if (ArmeriaHttpUtil.isContentAlwaysEmpty(status)) {
                 outHeaders.remove(HttpHeaderNames.CONTENT_LENGTH);
             } else if (!headers.contains(HttpHeaderNames.CONTENT_LENGTH)) {
                 // NB: Set the 'content-length' only when not set rather than always setting to 0.

File: core/src/main/java/com/linecorp/armeria/client/ConnectionPoolListenerAdapter.java
Patch:
@@ -22,8 +22,8 @@
 import io.netty.util.AttributeMap;
 
 /**
- * A skeletal {@link ConnectionPoolListener} implementation to minimize the effort to implement this interface.
- * Extend this class to implement only a few of the provided handler methods.
+ * A skeletal {@link ConnectionPoolListener} implementation in order for a user to implement only the methods
+ * what he or she really needs.
  */
 public class ConnectionPoolListenerAdapter implements ConnectionPoolListener {
 

File: core/src/main/java/com/linecorp/armeria/server/ServerListenerAdapter.java
Patch:
@@ -17,8 +17,8 @@
 package com.linecorp.armeria.server;
 
 /**
- * A skeletal {@link ServerListener} implementation to minimize the effort to implement this interface.
- * Extend this class to implement only few of the provided listener methods.
+ * A skeletal {@link ServerListener} implementation in order for a user to implement only the methods
+ * what he or she really needs.
  */
 public class ServerListenerAdapter implements ServerListener {
     @Override

File: core/src/test/java/com/linecorp/armeria/server/ProxyProtocolEnabledServerTest.java
Patch:
@@ -144,7 +144,7 @@ public String get() {
     }
 
     private static void checkResponse(BufferedReader reader) throws IOException {
-        assertThat(reader.readLine()).isEqualToIgnoringCase("HTTP/1.1 200 Ok");
+        assertThat(reader.readLine()).isEqualToIgnoringCase("HTTP/1.1 200 OK");
 
         // Content-Length header, Content-Type header, an empty line
         reader.readLine();

File: spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponse.java
Patch:
@@ -114,7 +114,7 @@ protected void applyStatusCode() {
         if (httpStatus != null) {
             headers.status(httpStatus.value());
         } else {
-            // If there is no status code specified, set 200 Ok by default.
+            // If there is no status code specified, set 200 OK by default.
             headers.status(com.linecorp.armeria.common.HttpStatus.OK);
         }
     }

File: core/src/main/java/com/linecorp/armeria/client/HttpHeaderUtil.java
Patch:
@@ -24,7 +24,7 @@ final class HttpHeaderUtil {
 
     private static final String CLIENT_ARTIFACT_ID = "armeria";
 
-    static final AsciiString USER_AGENT = AsciiString.of(createUserAgentName());
+    static final AsciiString USER_AGENT = AsciiString.cached(createUserAgentName());
 
     static String hostHeader(String host, int port, int defaultPort) {
         if (port == defaultPort) {

File: core/src/main/java/com/linecorp/armeria/client/endpoint/StickyEndpointSelectionStrategy.java
Patch:
@@ -39,7 +39,7 @@
  *
  * <pre>{@code
  * ToLongFunction<ClientRequestContext> hasher = (ClientRequestContext ctx) -> {
- *     return ((HttpRequest) ctx.request()).headers().get(AsciiString.of("cookie")).hashCode();
+ *     return ((HttpRequest) ctx.request()).headers().get(HttpHeaderNames.COOKIE).hashCode();
  * };
  * final StickyEndpointSelectionStrategy strategy = new StickyEndpointSelectionStrategy(hasher);
  * }</pre>

File: core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java
Patch:
@@ -319,7 +319,7 @@ public static HttpHeaders toArmeria(Http2Headers headers, boolean endOfStream) {
         final HttpHeaders converted = new DefaultHttpHeaders(false, headers.size(), endOfStream);
         StringJoiner cookieJoiner = null;
         for (Entry<CharSequence, CharSequence> e : headers) {
-            final AsciiString name = AsciiString.of(e.getKey());
+            final AsciiString name = HttpHeaderNames.of(e.getKey());
             final CharSequence value = e.getValue();
 
             // Cookies must be concatenated into a single octet string.
@@ -409,7 +409,7 @@ public static void toArmeria(io.netty.handler.codec.http.HttpHeaders inHeaders,
         StringJoiner cookieJoiner = null;
         while (iter.hasNext()) {
             final Entry<CharSequence, CharSequence> entry = iter.next();
-            final AsciiString aName = AsciiString.of(entry.getKey()).toLowerCase();
+            final AsciiString aName = HttpHeaderNames.of(entry.getKey()).toLowerCase();
             if (HTTP_TO_HTTP2_HEADER_BLACKLIST.contains(aName) || connectionBlacklist.contains(aName)) {
                 continue;
             }
@@ -443,7 +443,7 @@ private static CharSequenceMap toLowercaseMap(Iterator<? extends CharSequence> v
         final CharSequenceMap result = new CharSequenceMap(arraySizeHint);
 
         while (valuesIter.hasNext()) {
-            final AsciiString lowerCased = AsciiString.of(valuesIter.next()).toLowerCase();
+            final AsciiString lowerCased = HttpHeaderNames.of(valuesIter.next()).toLowerCase();
             try {
                 int index = lowerCased.forEachByte(FIND_COMMA);
                 if (index != -1) {

File: core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotatedValueResolver.java
Patch:
@@ -88,7 +88,6 @@
 import io.netty.handler.codec.http.QueryStringDecoder;
 import io.netty.handler.codec.http.cookie.Cookie;
 import io.netty.handler.codec.http.cookie.ServerCookieDecoder;
-import io.netty.util.AsciiString;
 
 final class AnnotatedValueResolver {
     private static final Logger logger = LoggerFactory.getLogger(AnnotatedValueResolver.class);
@@ -457,7 +456,7 @@ private static AnnotatedValueResolver ofHeader(String name,
                 .supportContainer(true)
                 .description(description)
                 .resolver(resolver(
-                        ctx -> ctx.request().headers().getAll(AsciiString.of(name)),
+                        ctx -> ctx.request().headers().getAll(HttpHeaderNames.of(name)),
                         () -> "Cannot resolve a value from HTTP header: " + name))
                 .build();
     }

File: core/src/main/java/com/linecorp/armeria/server/ClientAddressSource.java
Patch:
@@ -38,7 +38,7 @@
 public final class ClientAddressSource {
 
     private static final ClientAddressSource PROXY_PROTOCOL =
-            new ClientAddressSource(AsciiString.of("PROXY_PROTOCOL"));
+            new ClientAddressSource(HttpHeaderNames.of("PROXY_PROTOCOL"));
 
     /**
      * A default list of {@link ClientAddressSource}s.
@@ -54,7 +54,7 @@ public final class ClientAddressSource {
      */
     public static ClientAddressSource ofHeader(CharSequence header) {
         checkArgument(header != null && header.length() > 0, "empty header");
-        return new ClientAddressSource(AsciiString.of(header));
+        return new ClientAddressSource(HttpHeaderNames.of(header));
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/HttpServerPipelineConfigurator.java
Patch:
@@ -90,8 +90,8 @@ final class HttpServerPipelineConfigurator extends ChannelInitializer<Channel> {
 
     private static final int SSL_RECORD_HEADER_LENGTH = 5;
 
-    private static final AsciiString SCHEME_HTTP = AsciiString.of("http");
-    private static final AsciiString SCHEME_HTTPS = AsciiString.of("https");
+    private static final AsciiString SCHEME_HTTP = AsciiString.cached("http");
+    private static final AsciiString SCHEME_HTTPS = AsciiString.cached("https");
 
     private static final int UPGRADE_REQUEST_MAX_LENGTH = 16384;
 

File: core/src/main/java/com/linecorp/armeria/server/logging/AccessLogFormats.java
Patch:
@@ -50,8 +50,6 @@
 import com.linecorp.armeria.server.logging.AccessLogComponent.TimestampComponent;
 import com.linecorp.armeria.server.logging.AccessLogType.VariableRequirement;
 
-import io.netty.util.AsciiString;
-
 /**
  * Pre-defined access log formats and the utility methods for {@link AccessLogComponent}.
  */
@@ -217,7 +215,7 @@ private static AccessLogComponent newAccessLogComponent(char token,
         }
         if (HttpHeaderComponent.isSupported(type)) {
             assert variable != null;
-            return new HttpHeaderComponent(type, AsciiString.of(variable), addQuote, condition);
+            return new HttpHeaderComponent(type, HttpHeaderNames.of(variable), addQuote, condition);
         }
         if (AttributeComponent.isSupported(type)) {
             assert variable != null;

File: core/src/test/java/com/linecorp/armeria/client/ClientOptionsTest.java
Patch:
@@ -22,13 +22,11 @@
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
 
-import io.netty.util.AsciiString;
-
 public class ClientOptionsTest {
 
     @Test
     public void testSetHttpHeader() {
-        final HttpHeaders httpHeader = HttpHeaders.of(AsciiString.of("x-user-defined"), "HEADER_VALUE");
+        final HttpHeaders httpHeader = HttpHeaders.of(HttpHeaderNames.of("x-user-defined"), "HEADER_VALUE");
 
         final ClientOptions options = ClientOptions.of(ClientOption.HTTP_HEADERS.newValue(httpHeader));
         assertThat(options.get(ClientOption.HTTP_HEADERS)).contains(httpHeader);

File: core/src/test/java/com/linecorp/armeria/common/HttpHeadersJsonDeserializerTest.java
Patch:
@@ -30,7 +30,7 @@
 
 public class HttpHeadersJsonDeserializerTest {
 
-    private static final AsciiString NAME = AsciiString.of("a");
+    private static final AsciiString NAME = HttpHeaderNames.of("a");
 
     private static final ObjectMapper mapper = new ObjectMapper();
 

File: core/src/test/java/com/linecorp/armeria/common/HttpHeadersJsonSerializerTest.java
Patch:
@@ -26,7 +26,7 @@
 
 public class HttpHeadersJsonSerializerTest {
 
-    private static final AsciiString NAME = AsciiString.of("a");
+    private static final AsciiString NAME = HttpHeaderNames.of("a");
 
     private static final ObjectMapper mapper = new ObjectMapper();
 

File: core/src/test/java/com/linecorp/armeria/common/HttpHeadersTest.java
Patch:
@@ -17,11 +17,11 @@
 package com.linecorp.armeria.common;
 
 import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_TYPE;
+import static com.linecorp.armeria.common.HttpHeaderNames.of;
 import static com.linecorp.armeria.common.MediaType.ANY_APPLICATION_TYPE;
 import static com.linecorp.armeria.common.MediaType.ANY_AUDIO_TYPE;
 import static com.linecorp.armeria.common.MediaType.ANY_TEXT_TYPE;
 import static com.linecorp.armeria.common.MediaType.ANY_TYPE;
-import static io.netty.util.AsciiString.of;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 

File: core/src/test/java/com/linecorp/armeria/common/logging/DefaultRequestLogTest.java
Patch:
@@ -27,6 +27,7 @@
 import org.mockito.junit.MockitoJUnit;
 import org.mockito.junit.MockitoRule;
 
+import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpStatus;
@@ -37,7 +38,6 @@
 import com.linecorp.armeria.testing.internal.AnticipatedException;
 
 import io.netty.channel.Channel;
-import io.netty.util.AsciiString;
 
 public class DefaultRequestLogTest {
 
@@ -134,7 +134,7 @@ public void addChild() {
         assertThat(log.requestFirstBytesTransferredTimeNanos())
                 .isEqualTo(child.requestFirstBytesTransferredTimeNanos());
 
-        final HttpHeaders foo = HttpHeaders.of(AsciiString.of("foo"), "foo");
+        final HttpHeaders foo = HttpHeaders.of(HttpHeaderNames.of("foo"), "foo");
         child.requestHeaders(foo);
         assertThat(log.requestHeaders()).isSameAs(foo);
 
@@ -157,7 +157,7 @@ public void addChild() {
         assertThatThrownBy(() -> log.responseFirstBytesTransferredTimeNanos())
                 .isExactlyInstanceOf(RequestLogAvailabilityException.class);
 
-        final HttpHeaders bar = HttpHeaders.of(AsciiString.of("bar"), "bar");
+        final HttpHeaders bar = HttpHeaders.of(HttpHeaderNames.of("bar"), "bar");
         child.responseHeaders(bar);
         assertThatThrownBy(() -> log.responseHeaders())
                 .isExactlyInstanceOf(RequestLogAvailabilityException.class);

File: core/src/test/java/com/linecorp/armeria/internal/ArmeriaHttpUtilTest.java
Patch:
@@ -36,7 +36,6 @@
 import io.netty.handler.codec.http2.DefaultHttp2Headers;
 import io.netty.handler.codec.http2.Http2Exception;
 import io.netty.handler.codec.http2.Http2Headers;
-import io.netty.util.AsciiString;
 
 public class ArmeriaHttpUtilTest {
     @Test
@@ -258,6 +257,6 @@ public void stripConnectionNomineesWithCsv() {
         final HttpHeaders out = new DefaultHttpHeaders();
         toArmeria(in, out);
         assertThat(out).hasSize(1);
-        assertThat(out.get(AsciiString.of("hello"))).isEqualTo("world");
+        assertThat(out.get(HttpHeaderNames.of("hello"))).isEqualTo("world");
     }
 }

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedValueResolverTest.java
Patch:
@@ -73,8 +73,8 @@ public class AnnotatedValueResolverTest {
                                                                       "sensitive");
 
     // 'headerValues' will be returned.
-    static final Set<AsciiString> existingHttpHeaders = ImmutableSet.of(AsciiString.of("header1"),
-                                                                        AsciiString.of("header2"));
+    static final Set<AsciiString> existingHttpHeaders = ImmutableSet.of(HttpHeaderNames.of("header1"),
+                                                                        HttpHeaderNames.of("header2"));
     static final List<String> headerValues = ImmutableList.of("value1",
                                                               "value3",
                                                               "value2");
@@ -118,7 +118,7 @@ public static void setUp() throws Exception {
 
     static boolean shouldHttpHeaderExist(AnnotatedValueResolver element) {
         return element.shouldExist() ||
-               existingHttpHeaders.contains(AsciiString.of(element.httpElementName()));
+               existingHttpHeaders.contains(HttpHeaderNames.of(element.httpElementName()));
     }
 
     static boolean shouldHttpParameterExist(AnnotatedValueResolver element) {

File: core/src/test/java/com/linecorp/armeria/server/HttpHeaderUtilTest.java
Patch:
@@ -34,8 +34,6 @@
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
 
-import io.netty.util.AsciiString;
-
 public class HttpHeaderUtilTest {
 
     private static final Predicate<InetAddress> ACCEPT_ANY = addr -> true;
@@ -193,7 +191,7 @@ public void testClientAddress() throws UnknownHostException {
         assertThat(HttpHeaderUtil.determineClientAddress(
                 HttpHeaders.of(HttpHeaderNames.FORWARDED, "for=10.0.0.1,for=10.0.0.2",
                                HttpHeaderNames.X_FORWARDED_FOR, "10.1.0.1,10.1.0.2",
-                               AsciiString.of("x-real-ip"), "10.2.0.1,10.2.0.2"),
+                               HttpHeaderNames.of("x-real-ip"), "10.2.0.1,10.2.0.2"),
                 ImmutableList.of(ofHeader("x-real-ip"),
                                  ofHeader(HttpHeaderNames.FORWARDED),
                                  ofHeader(HttpHeaderNames.X_FORWARDED_FOR)),

File: core/src/test/java/com/linecorp/armeria/server/cors/HttpServerCorsTest.java
Patch:
@@ -35,8 +35,6 @@
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.testing.server.ServerRule;
 
-import io.netty.util.AsciiString;
-
 public class HttpServerCorsTest {
 
     private static final ClientFactory clientFactory = ClientFactory.DEFAULT;
@@ -87,7 +85,7 @@ public void testCorsPreflight() throws Exception {
 
         assertEquals(HttpStatus.OK, response.status());
         assertEquals("http://example.com", response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_ORIGIN));
-        assertEquals("Hello CORS", response.headers().get(AsciiString.of("x-preflight-cors")));
+        assertEquals("Hello CORS", response.headers().get(HttpHeaderNames.of("x-preflight-cors")));
     }
 
     @Test

File: spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationTest.java
Patch:
@@ -43,6 +43,7 @@
 import com.linecorp.armeria.client.Clients;
 import com.linecorp.armeria.client.HttpClient;
 import com.linecorp.armeria.common.AggregatedHttpMessage;
+import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
@@ -64,8 +65,6 @@
 import com.linecorp.armeria.spring.test.thrift.main.HelloService;
 import com.linecorp.armeria.spring.test.thrift.main.HelloService.hello_args;
 
-import io.netty.util.AsciiString;
-
 /**
  * This uses {@link ArmeriaAutoConfiguration} for integration tests.
  * application-autoConfTest.yml will be loaded with minimal settings to make it work.
@@ -109,7 +108,7 @@ public ThriftServiceRegistrationBean helloThriftService() {
                     .setDecorators(ImmutableList.of(LoggingService.newDecorator()))
                     .setExampleRequests(Collections.singleton(new hello_args("nameVal")))
                     .setExampleHeaders(Collections.singleton(HttpHeaders.of(
-                            AsciiString.of("x-additional-header"), "headerVal")));
+                            HttpHeaderNames.of("x-additional-header"), "headerVal")));
         }
     }
 

File: spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaClientHttpRequest.java
Patch:
@@ -43,7 +43,6 @@
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 
-import io.netty.util.AsciiString;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 
@@ -79,7 +78,7 @@ final class ArmeriaClientHttpRequest extends AbstractClientHttpRequest {
     @Override
     protected void applyHeaders() {
         // Copy the HTTP headers which were specified by a user to the Armeria request.
-        getHeaders().forEach((name, values) -> headers.set(AsciiString.of(name), values));
+        getHeaders().forEach((name, values) -> headers.set(HttpHeaderNames.of(name), values));
         setDefaultRequestHeaders(headers);
     }
 

File: spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponse.java
Patch:
@@ -46,7 +46,6 @@
 import io.netty.handler.codec.http.cookie.Cookie;
 import io.netty.handler.codec.http.cookie.DefaultCookie;
 import io.netty.handler.codec.http.cookie.ServerCookieEncoder;
-import io.netty.util.AsciiString;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 import reactor.core.scheduler.Schedulers;
@@ -122,7 +121,7 @@ protected void applyStatusCode() {
 
     @Override
     protected void applyHeaders() {
-        getHeaders().forEach((name, values) -> headers.add(AsciiString.of(name), values));
+        getHeaders().forEach((name, values) -> headers.add(HttpHeaderNames.of(name), values));
     }
 
     @Override

File: spring/boot-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaClientHttpResponseTest.java
Patch:
@@ -33,7 +33,6 @@
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.stream.CancelledSubscriptionException;
 
-import io.netty.util.AsciiString;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
@@ -70,7 +69,7 @@ public void readBodyStream() {
     @Test
     public void getCookies() {
         final HttpHeaders httpHeaders = HttpHeaders.of(HttpStatus.OK)
-                                                   .add(AsciiString.of("blahblah"), "armeria")
+                                                   .add(HttpHeaderNames.of("blahblah"), "armeria")
                                                    .add(HttpHeaderNames.SET_COOKIE, "a=1; b=2");
         final HttpResponse httpResponse = HttpResponse.of(httpHeaders);
         final ArmeriaClientHttpResponse response =

File: spring/boot-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponseTest.java
Patch:
@@ -38,7 +38,6 @@
 
 import io.netty.handler.codec.http.cookie.ClientCookieDecoder;
 import io.netty.handler.codec.http.cookie.Cookie;
-import io.netty.util.AsciiString;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
@@ -128,7 +127,7 @@ public void returnHeadersAndBody() throws Exception {
                         final HttpHeaders headers = (HttpHeaders) o;
                         assertThat(headers.status())
                                 .isEqualTo(com.linecorp.armeria.common.HttpStatus.OK);
-                        assertThat(headers.get(AsciiString.of("Armeria"))).isEqualTo("awesome");
+                        assertThat(headers.get(HttpHeaderNames.of("Armeria"))).isEqualTo("awesome");
                         final Cookie setCookie =
                                 ClientCookieDecoder.LAX.decode(headers.get(HttpHeaderNames.SET_COOKIE));
                         assertThat(setCookie.name()).isEqualTo("a");

File: zipkin/src/main/java/com/linecorp/armeria/internal/tracing/AsciiStringKeyFactory.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.linecorp.armeria.internal.tracing;
 
+import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
 
 import brave.propagation.Propagation;
@@ -30,6 +31,6 @@ public enum AsciiStringKeyFactory implements Propagation.KeyFactory<AsciiString>
 
     @Override
     public AsciiString create(String name) {
-        return AsciiString.of(name);
+        return HttpHeaderNames.of(name);
     }
 }

File: core/src/main/java/com/linecorp/armeria/common/Flags.java
Patch:
@@ -285,7 +285,7 @@ public static boolean verboseExceptions() {
      * insecure. When disabled, the server responses will not expose such server-side details to the client.
      *
      * <p>This flag is disabled by default. Specify the {@code -Dcom.linecorp.armeria.verboseResponses=true}
-     * JVM option to enable it.
+     * JVM option or use {@link ServerBuilder#verboseResponses(boolean)} to enable it.
      */
     public static boolean verboseResponses() {
         return VERBOSE_RESPONSES;

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcService.java
Patch:
@@ -137,6 +137,7 @@ protected HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req) throws
         if (method == null) {
             return HttpResponse.of(
                     ArmeriaServerCall.statusToTrailers(
+                            ctx,
                             Status.UNIMPLEMENTED.withDescription("Method not found: " + methodName),
                             false));
         }
@@ -147,7 +148,7 @@ protected HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req) throws
                 final long timeout = TimeoutHeaderUtil.fromHeaderValue(timeoutHeader);
                 ctx.setRequestTimeout(Duration.ofNanos(timeout));
             } catch (IllegalArgumentException e) {
-                return HttpResponse.of(ArmeriaServerCall.statusToTrailers(Status.fromThrowable(e), false));
+                return HttpResponse.of(ArmeriaServerCall.statusToTrailers(ctx, Status.fromThrowable(e), false));
             }
         }
 

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/ArmeriaServerCallTest.java
Patch:
@@ -49,6 +49,7 @@
 import com.linecorp.armeria.grpc.testing.TestServiceGrpc;
 import com.linecorp.armeria.internal.grpc.ArmeriaMessageDeframer.ByteBufOrStream;
 import com.linecorp.armeria.internal.grpc.GrpcTestUtil;
+import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.testing.common.EventLoopRule;
 import com.linecorp.armeria.unsafe.grpc.GrpcUnsafeBufferUtil;
@@ -101,6 +102,7 @@ public void setUp() {
         when(res.completionFuture()).thenReturn(completionFuture);
         when(ctx.eventLoop()).thenReturn(eventLoop.get());
         when(ctx.contextAwareEventLoop()).thenReturn(eventLoop.get());
+        when(ctx.server()).thenReturn(new ServerBuilder().service("/", (ctx, req) -> null).build());
 
         when(ctx.alloc()).thenReturn(ByteBufAllocator.DEFAULT);
         call = new ArmeriaServerCall<>(

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/UnframedGrpcServiceTest.java
Patch:
@@ -43,6 +43,7 @@
 import com.linecorp.armeria.common.logging.DefaultRequestLog;
 import com.linecorp.armeria.grpc.testing.TestServiceGrpc.TestServiceImplBase;
 import com.linecorp.armeria.protobuf.EmptyProtos.Empty;
+import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.testing.common.EventLoopRule;
 
@@ -80,6 +81,7 @@ public void emptyCall(Empty request, StreamObserver<Empty> responseObserver) {
 
     @Before
     public void setUp() {
+        when(ctx.server()).thenReturn(new ServerBuilder().service("/", (ctx, req) -> null).build());
         when(ctx.mappedPath()).thenReturn("/armeria.grpc.testing.TestService/EmptyCall");
         when(ctx.eventLoop()).thenReturn(eventLoop.get());
         when(ctx.contextAwareEventLoop()).thenReturn(eventLoop.get());

File: spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/ArmeriaConfigurationUtil.java
Patch:
@@ -267,7 +267,8 @@ public static void configureAnnotatedHttpServices(
                 decorator = decorator.andThen(d);
             }
             if (meterIdPrefixFunctionFactory != null) {
-                decorator = metricCollectingServiceDecorator(bean, meterIdPrefixFunctionFactory);
+                decorator = decorator.andThen(
+                        metricCollectingServiceDecorator(bean, meterIdPrefixFunctionFactory));
             }
             final ImmutableList<Object> exceptionHandlersAndConverters =
                     ImmutableList.builder()

File: core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotatedElementNameUtil.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.linecorp.armeria.server;
+package com.linecorp.armeria.internal.annotation;
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static java.util.Objects.requireNonNull;

File: core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceTypeUtil.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.linecorp.armeria.server;
+package com.linecorp.armeria.internal.annotation;
 
 import java.util.ArrayList;
 import java.util.Collection;

File: core/src/main/java/com/linecorp/armeria/internal/annotation/DefaultExceptionHandler.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.server;
+package com.linecorp.armeria.internal.annotation;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -24,6 +24,8 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.RequestContext;
+import com.linecorp.armeria.server.HttpResponseException;
+import com.linecorp.armeria.server.HttpStatusException;
 import com.linecorp.armeria.server.annotation.ExceptionHandler;
 import com.linecorp.armeria.server.annotation.ExceptionHandlerFunction;
 import com.linecorp.armeria.server.annotation.ExceptionVerbosity;

File: core/src/main/java/com/linecorp/armeria/server/CatchAllPathMapping.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.linecorp.armeria.server;
 
+import static com.linecorp.armeria.internal.PathMappingUtil.ROOT_LOGGER_NAME;
+
 import java.util.Optional;
 import java.util.Set;
 
@@ -27,7 +29,6 @@ final class CatchAllPathMapping extends AbstractPathMapping {
 
     private static final Optional<String> PREFIX_PATH_OPT = Optional.of("/");
     private static final Optional<String> TRIE_PATH_OPT = Optional.of("/*");
-    private static final String LOGGER_NAME = loggerName("/"); // "__ROOT__"
 
     private CatchAllPathMapping() {}
 
@@ -43,7 +44,7 @@ public Set<String> paramNames() {
 
     @Override
     public String loggerName() {
-        return LOGGER_NAME;
+        return ROOT_LOGGER_NAME;
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/server/DefaultPathMapping.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.linecorp.armeria.server;
 
+import static com.linecorp.armeria.internal.PathMappingUtil.newLoggerName;
 import static java.util.Objects.requireNonNull;
 
 import java.util.ArrayList;
@@ -128,7 +129,7 @@ final class DefaultPathMapping extends AbstractPathMapping {
         paramNameArray = paramNames.toArray(EMPTY_NAMES);
         this.paramNames = ImmutableSet.copyOf(paramNames);
 
-        loggerName = loggerName(pathPattern);
+        loggerName = newLoggerName(pathPattern);
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/VirtualHost.java
Patch:
@@ -28,7 +28,6 @@
 
 import javax.annotation.Nullable;
 
-import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Ascii;
 
 import com.linecorp.armeria.common.HttpRequest;
@@ -259,8 +258,7 @@ public PathMapped<ServiceConfig> findServiceConfig(PathMappingContext mappingCtx
         return router.find(mappingCtx);
     }
 
-    @VisibleForTesting
-    Router<ServiceConfig> router() {
+    private Router<ServiceConfig> router() {
         return router;
     }
 

File: core/src/test/java/com/linecorp/armeria/common/logging/DefaultRequestLogTest.java
Patch:
@@ -139,7 +139,7 @@ public void addChild() {
         assertThat(log.requestHeaders()).isSameAs(foo);
 
         final String requestContent = "baz";
-        final String rawRequestContent = "bax";
+        final String rawRequestContent = "qux";
 
         child.requestContent(requestContent, rawRequestContent);
         assertThat(log.requestContent()).isSameAs(requestContent);
@@ -170,7 +170,7 @@ public void addChild() {
         assertThat(log.responseHeaders()).isSameAs(bar);
 
         final String responseContent = "baz1";
-        final String rawResponseContent = "bax1";
+        final String rawResponseContent = "qux1";
         child.responseContent(responseContent, rawResponseContent);
         assertThat(log.responseContent()).isSameAs(responseContent);
         assertThat(log.rawResponseContent()).isSameAs(rawResponseContent);

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedElementNameUtilTest.java
Patch:
@@ -13,9 +13,9 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.linecorp.armeria.server;
+package com.linecorp.armeria.internal.annotation;
 
-import static com.linecorp.armeria.server.AnnotatedElementNameUtil.toHeaderName;
+import static com.linecorp.armeria.internal.annotation.AnnotatedElementNameUtil.toHeaderName;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import org.junit.Test;

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceBuilderTest.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.server;
+package com.linecorp.armeria.internal.annotation;
 
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
@@ -32,6 +32,8 @@
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.RequestContext;
+import com.linecorp.armeria.server.ServerBuilder;
+import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.annotation.ByteArrayRequestConverterFunction;
 import com.linecorp.armeria.server.annotation.Default;
 import com.linecorp.armeria.server.annotation.ExceptionHandlerFunction;

File: core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceResponseConverterTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.linecorp.armeria.server;
+package com.linecorp.armeria.internal.annotation;
 
 import static net.javacrumbs.jsonunit.fluent.JsonFluentAssert.assertThatJson;
 import static org.assertj.core.api.Assertions.assertThat;
@@ -47,6 +47,7 @@
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.stream.CancelledSubscriptionException;
+import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.annotation.Get;
 import com.linecorp.armeria.server.annotation.Produces;
 import com.linecorp.armeria.server.annotation.ProducesJson;

File: core/src/test/java/com/linecorp/armeria/server/GlobPathMappingTest.java
Patch:
@@ -142,7 +142,7 @@ private static void pass(String glob, String... paths) {
         final GlobPathMapping pattern = compile(glob);
         for (String p: paths) {
             if (!pattern.apply(create(p)).isPresent()) {
-                Assert.fail('\'' + p + "' does not match '" + glob + "' or '" + pattern.asRegex() + "'.");
+                Assert.fail('\'' + p + "' does not match '" + glob + "' or '" + pattern.regex() + "'.");
             }
         }
     }
@@ -151,7 +151,7 @@ private static void fail(String glob, String... paths) {
         final GlobPathMapping pattern = compile(glob);
         for (String p: paths) {
             if (pattern.apply(create(p)).isPresent()) {
-                Assert.fail('\'' + p + "' matches '" + glob + "' or '" + pattern.asRegex() + "'.");
+                Assert.fail('\'' + p + "' matches '" + glob + "' or '" + pattern.regex() + "'.");
             }
         }
     }

File: core/src/test/java/com/linecorp/armeria/server/PathMappingTest.java
Patch:
@@ -56,15 +56,15 @@ public void successfulOf() {
 
         m = PathMapping.of("glob:/home/*/files/**");
         assertThat(m).isInstanceOf(GlobPathMapping.class);
-        assertThat(((GlobPathMapping) m).asRegex().pattern()).isEqualTo("^/home/([^/]+)/files/(.*)$");
+        assertThat(m.regex().get()).isEqualTo("^/home/([^/]+)/files/(.*)$");
 
         m = PathMapping.of("glob:foo");
         assertThat(m).isInstanceOf(GlobPathMapping.class);
-        assertThat(((GlobPathMapping) m).asRegex().pattern()).isEqualTo("^/(?:.+/)?foo$");
+        assertThat(m.regex().get()).isEqualTo("^/(?:.+/)?foo$");
 
         m = PathMapping.of("regex:^/files/(?<filePath>.*)$");
         assertThat(m).isInstanceOf(RegexPathMapping.class);
-        assertThat(((RegexPathMapping) m).asRegex().pattern()).isEqualTo("^/files/(?<filePath>.*)$");
+        assertThat(m.regex().get()).isEqualTo("^/files/(?<filePath>.*)$");
     }
 
     @Test

File: spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationTest.java
Patch:
@@ -208,7 +208,7 @@ public void testThriftServiceRegistrationBean() throws Exception {
         final AggregatedHttpMessage msg = response.aggregate().get();
         assertThat(msg.status()).isEqualTo(HttpStatus.OK);
         assertThatJson(msg.content().toStringUtf8())
-                .node("services[0].exampleHttpHeaders[0].x-additional-header").isStringEqualTo("headerVal");
+                .node("services[1].exampleHttpHeaders[0].x-additional-header").isStringEqualTo("headerVal");
     }
 
     @Test

File: core/src/main/java/com/linecorp/armeria/server/logging/AccessLogFormats.java
Patch:
@@ -213,7 +213,7 @@ private static AccessLogComponent newAccessLogComponent(char token,
             return new TimestampComponent(addQuote, variable);
         }
         if (CommonComponent.isSupported(type)) {
-            return new CommonComponent(type, addQuote, condition);
+            return new CommonComponent(type, addQuote, condition, variable);
         }
         if (HttpHeaderComponent.isSupported(type)) {
             assert variable != null;

File: core/src/test/java/com/linecorp/armeria/server/DefaultServiceRequestContextTest.java
Patch:
@@ -35,6 +35,7 @@
 import io.netty.channel.Channel;
 import io.netty.util.AsciiString;
 import io.netty.util.AttributeKey;
+import io.netty.util.NetUtil;
 
 public class DefaultServiceRequestContextTest {
 
@@ -49,7 +50,7 @@ public void deriveContext() {
                 virtualHost.serviceConfigs().get(0), mock(Channel.class), NoopMeterRegistry.get(),
                 SessionProtocol.H2,
                 mappingCtx, PathMappingResult.of("/foo"),
-                mock(Request.class), null, null);
+                mock(Request.class), null, null, NetUtil.LOCALHOST4);
 
         setAdditionalHeaders(originalCtx);
         setAdditionalTrailers(originalCtx);

File: logback/src/main/java/com/linecorp/armeria/common/logback/BuiltInProperties.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.linecorp.armeria.common.logback;
 
+import static com.linecorp.armeria.common.logback.BuiltInProperty.CLIENT_IP;
 import static com.linecorp.armeria.common.logback.BuiltInProperty.LOCAL_HOST;
 import static com.linecorp.armeria.common.logback.BuiltInProperty.LOCAL_IP;
 import static com.linecorp.armeria.common.logback.BuiltInProperty.LOCAL_PORT;
@@ -33,7 +34,7 @@ final class BuiltInProperties {
     private static final BuiltInProperty[] allValues = BuiltInProperty.values();
 
     private static final long MASK_ADDRESSES =
-            mask(REMOTE_HOST, REMOTE_IP, REMOTE_PORT, LOCAL_HOST, LOCAL_IP, LOCAL_PORT);
+            mask(REMOTE_HOST, REMOTE_IP, REMOTE_PORT, LOCAL_HOST, LOCAL_IP, LOCAL_PORT, CLIENT_IP);
     private static final long MASK_RPC = mask(REQ_RPC_METHOD, REQ_RPC_PARAMS, RES_RPC_RESULT);
     private static final long MASK_SSL = mask(TLS_SESSION_ID, TLS_CIPHER, TLS_PROTO);
 

File: core/src/main/java/com/linecorp/armeria/client/Clients.java
Patch:
@@ -204,7 +204,7 @@ public static <T> T newDerivedClient(T client, Iterable<ClientOptionValue<?>> ad
      * HttpClient derivedHttpClient = Clients.newDerivedClient(httpClient, options -> {
      *     ClientOptionsBuilder builder = new ClientOptionsBuilder(options);
      *     builder.decorator(...);  // Add a decorator.
-     *     builder.httpHeader(...); // Add an HTTP header.
+     *     builder.addHttpHeader(...); // Add an HTTP header.
      *     return builder.build();
      * });
      * }</pre>

File: core/src/main/java/com/linecorp/armeria/client/limit/ConcurrencyLimitingHttpClient.java
Patch:
@@ -31,7 +31,7 @@
  * <p>For example:
  * <pre>{@code
  * ClientBuilder builder = new ClientBuilder(...);
- * builder.decorator(HttpRequest.class, HttpResponse.class, ConcurrencyLimitingHttpClient.newDecorator(16));
+ * builder.decorator(ConcurrencyLimitingHttpClient.newDecorator(16));
  * client = builder.build(...);
  * }</pre>
  *

File: core/src/main/java/com/linecorp/armeria/client/metric/MetricCollectingClient.java
Patch:
@@ -35,9 +35,7 @@
  * <p>Example:
  * <pre>{@code
  * MyService.Iface client = new ClientBuilder(uri)
- *         .decorator(HttpRequest.class, HttpResponse.class,
- *                    MetricCollectingClient.newDecorator(
- *                            MeterIdPrefixFunction.ofDefault("myClient)))
+ *         .decorator(MetricCollectingClient.newDecorator(MeterIdPrefixFunction.ofDefault("myClient)))
  *         .build(MyService.Iface.class);
  * }
  * </pre>

File: retrofit2/src/test/java/com/linecorp/armeria/client/retrofit2/ArmeriaCallFactoryTest.java
Patch:
@@ -547,7 +547,7 @@ public void customNewClientFunction() throws Exception {
                 .baseUrl("h1c://127.0.0.1:" + server.httpPort())
                 .addConverterFactory(JacksonConverterFactory.create(OBJECT_MAPPER))
                 .withClientOptions((url, optionsBuilder) -> {
-                    optionsBuilder.decorator(HttpRequest.class, HttpResponse.class, (delegate, ctx, req) -> {
+                    optionsBuilder.decorator((delegate, ctx, req) -> {
                         counter.incrementAndGet();
                         return delegate.execute(ctx, req);
                     });

File: thrift/src/test/java/com/linecorp/armeria/it/thrift/ThriftDynamicTimeoutTest.java
Patch:
@@ -101,7 +101,7 @@ public ThriftDynamicTimeoutTest(Function<Client<RpcRequest, RpcResponse>,
     @Test
     public void testDynamicTimeout() throws Exception {
         final SleepService.Iface client = new ClientBuilder(server.uri(BINARY, "/sleep"))
-                .decorator(RpcRequest.class, RpcResponse.class, clientDecorator)
+                .rpcDecorator(clientDecorator)
                 .defaultResponseTimeout(Duration.ofSeconds(1)).build(SleepService.Iface.class);
 
         final long delay = 1500;
@@ -113,7 +113,7 @@ public void testDynamicTimeout() throws Exception {
     @Test(timeout = 10000)
     public void testDisabledTimeout() throws Exception {
         final SleepService.Iface client = new ClientBuilder(server.uri(BINARY, "/fakeSleep"))
-                .decorator(RpcRequest.class, RpcResponse.class, clientDecorator)
+                .rpcDecorator(clientDecorator)
                 .defaultResponseTimeout(Duration.ofSeconds(1)).build(SleepService.Iface.class);
 
         // This call should take very short amount of time because the fakeSleep service does not sleep.

File: core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java
Patch:
@@ -114,7 +114,7 @@ private void acquireConnectionAndExecute(ClientRequestContext ctx, Endpoint endp
         if (pooledChannel != null) {
             doExecute(pooledChannel, ctx, req, res);
         } else {
-            pool.acquire(protocol, key).handle((newPooledChannel, cause) -> {
+            pool.acquireLater(protocol, key).handle((newPooledChannel, cause) -> {
                 if (cause == null) {
                     doExecute(newPooledChannel, ctx, req, res);
                 } else {

File: core/src/test/java/com/linecorp/armeria/client/HttpClientIdleTimeoutHandlerTest.java
Patch:
@@ -124,8 +124,8 @@ public InboundTrafficController inboundTrafficController() {
         }
 
         @Override
-        public boolean hasUnfinishedResponses() {
-            return unfinishedResponses != 0;
+        public int unfinishedResponses() {
+            return unfinishedResponses;
         }
 
         @Override

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategy.java
Patch:
@@ -113,7 +113,8 @@ static RetryStrategy onStatus(
 
     /**
      * Returns a {@link CompletionStage} that contains {@link Backoff} which will be used for retry.
-     * If the condition does not match, this will return {@code null} to stop retry attempt.
+     * If the condition does not match, this will return a {@link CompletionStage} completed with
+     * {@code null} to stop retry attempt.
      * Note that {@link ResponseTimeoutException} is not retriable for the whole retry,
      * but only for each attempt.
      * To retrieve the response {@link HttpHeaders}, you can use the specified {@link ClientRequestContext}:

File: core/src/main/java/com/linecorp/armeria/server/Server.java
Patch:
@@ -332,7 +332,7 @@ private ChannelFuture doStart(ServerPort port) {
                 thread.setDaemon(false);
                 return thread;
             }), config.workerGroup());
-            b.channel(TransportType.detectTransportType().serverChannelClass());
+            b.channel(TransportType.detectTransportType().serverChannelType());
             b.handler(connectionLimitingHandler);
             b.childHandler(new HttpServerPipelineConfigurator(config, port, sslContexts,
                                                               gracefulShutdownSupport));

File: core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java
Patch:
@@ -567,7 +567,7 @@ public void startResponse() {
     }
 
     private void startResponse0(boolean updateAvailability) {
-        startResponse0(System.nanoTime(), System.currentTimeMillis(), updateAvailability);
+        startResponse0(System.nanoTime(), currentTimeMicros(), updateAvailability);
     }
 
     private void startResponse0(long responseStartTimeNanos, long responseStartTimeMicros,

File: grpc/src/main/java/com/linecorp/armeria/internal/grpc/HttpStreamReader.java
Patch:
@@ -130,7 +130,7 @@ public void onNext(HttpObject obj) {
                 }
                 final String grpcMessage = headers.get(GrpcHeaderNames.GRPC_MESSAGE);
                 if (grpcMessage != null) {
-                    status = status.withDescription(grpcMessage);
+                    status = status.withDescription(StatusMessageEscaper.unescape(grpcMessage));
                 }
                 transportStatusListener.transportReportStatus(status);
                 return;

File: examples/spring-boot-webflux/src/main/java/example/springframework/boot/webflux/HelloController.java
Patch:
@@ -8,8 +8,6 @@
 import org.springframework.web.reactive.function.client.WebClient;
 import org.springframework.web.reactive.function.client.WebClient.Builder;
 
-import com.google.common.annotations.VisibleForTesting;
-
 import com.linecorp.armeria.spring.web.reactive.ArmeriaClientHttpConnector;
 
 import reactor.core.publisher.Mono;
@@ -32,7 +30,6 @@ public HelloController(Builder builder,
         this(builder.baseUrl("https://127.0.0.1:" + port).build());
     }
 
-    @VisibleForTesting
     HelloController(WebClient webClient) {
         this.webClient = webClient;
     }

File: core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java
Patch:
@@ -143,6 +143,8 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                         assert res != null;
                         this.res = res;
 
+                        res.logResponseFirstBytesTransferred();
+
                         if (nettyRes.status().codeClass() == HttpStatusClass.INFORMATIONAL) {
                             state = State.NEED_INFORMATIONAL_DATA;
                         } else {

File: core/src/main/java/com/linecorp/armeria/client/Http2ResponseDecoder.java
Patch:
@@ -173,6 +173,8 @@ public void onHeadersRead(ChannelHandlerContext ctx, int streamId, Http2Headers
                                   streamId);
         }
 
+        res.logResponseFirstBytesTransferred();
+
         final HttpHeaders converted = ArmeriaHttpUtil.toArmeria(headers, endOfStream);
         try {
             // If this tryWrite() returns false, it means the response stream has been closed due to

File: zipkin/src/main/java/com/linecorp/armeria/internal/tracing/SpanContextUtil.java
Patch:
@@ -40,7 +40,7 @@ public static void closeSpan(Span span, RequestLog log) {
         span.finish(wallTimeMicros(log, log.responseEndTimeNanos()));
     }
 
-    private static long wallTimeMicros(RequestLog log, long timeNanos) {
+    static long wallTimeMicros(RequestLog log, long timeNanos) {
         long relativeTimeNanos = timeNanos - log.requestStartTimeNanos();
         return log.requestStartTimeMicros() + TimeUnit.NANOSECONDS.toMicros(relativeTimeNanos);
     }

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategy.java
Patch:
@@ -26,7 +26,6 @@
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.ResponseTimeoutException;
 import com.linecorp.armeria.client.UnprocessedRequestException;
-import com.linecorp.armeria.client.circuitbreaker.FailFastException;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.HttpStatusClass;
@@ -92,8 +91,7 @@ static RetryStrategy onServerErrorStatus() {
     static RetryStrategy onServerErrorStatus(Backoff backoff) {
         requireNonNull(backoff, "backoff");
         return onStatus((status, thrown) -> {
-            if ((thrown != null && !(Exceptions.peel(thrown) instanceof FailFastException)) ||
-                (status != null && status.codeClass() == HttpStatusClass.SERVER_ERROR)) {
+            if (thrown != null || (status != null && status.codeClass() == HttpStatusClass.SERVER_ERROR)) {
                 return backoff;
             }
             return null;

File: core/src/main/java/com/linecorp/armeria/client/Http2ResponseDecoder.java
Patch:
@@ -71,7 +71,7 @@ HttpResponseWrapper addResponse(
         final HttpResponseWrapper resWrapper =
                 super.addResponse(id, req, res, logBuilder, responseTimeoutMillis, maxContentLength);
 
-        resWrapper.completionFuture().whenCompleteAsync((unused, cause) -> {
+        resWrapper.completionFuture().handleAsync((unused, cause) -> {
             // Cancel timeout future and abort the request if it exists.
             resWrapper.onSubscriptionCancelled();
 
@@ -94,6 +94,8 @@ HttpResponseWrapper addResponse(
                     }
                 }
             }
+
+            return null;
         }, channel().eventLoop());
         return resWrapper;
     }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroup.java
Patch:
@@ -17,7 +17,6 @@
 
 import static com.google.common.collect.ImmutableList.toImmutableList;
 import static com.google.common.collect.ImmutableMap.toImmutableMap;
-import static com.linecorp.armeria.common.util.Functions.voidFunction;
 import static java.util.Objects.requireNonNull;
 
 import java.time.Duration;
@@ -92,15 +91,16 @@ private CompletableFuture<Void> checkAndUpdateHealthyServers() {
                               .map(connection -> connection.healthChecker.isHealthy(connection.endpoint()))
                               .collect(toImmutableList()),
                 t -> false);
-        return healthCheckResults.handle(voidFunction((result, thrown) -> {
+        return healthCheckResults.handle((result, thrown) -> {
             final ImmutableList.Builder<Endpoint> newHealthyEndpoints = ImmutableList.builder();
             for (int i = 0; i < result.size(); i++) {
                 if (result.get(i)) {
                     newHealthyEndpoints.add(checkedServers.get(i).endpoint());
                 }
             }
             setEndpoints(newHealthyEndpoints.build());
-        }));
+            return null;
+        });
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/client/limit/ConcurrencyLimitingClient.java
Patch:
@@ -239,9 +239,10 @@ public void run() {
             try (SafeCloseable ignored = ctx.push()) {
                 try {
                     final O actualRes = delegate().execute(ctx, req);
-                    actualRes.completionFuture().whenCompleteAsync((unused, cause) -> {
+                    actualRes.completionFuture().handleAsync((unused, cause) -> {
                         numActiveRequests.decrementAndGet();
                         drain();
+                        return null;
                     }, ctx.eventLoop());
                     deferred.delegate(actualRes);
                 } catch (Throwable t) {

File: core/src/main/java/com/linecorp/armeria/common/util/StartStopSupport.java
Patch:
@@ -233,7 +233,7 @@ private synchronized CompletableFuture<Void> stop(boolean rollback) {
         }
 
         final CompletableFuture<Void> future = stopFuture.whenCompleteAsync(
-                (unused1, unused2) -> enter(State.STOPPED, null), executor);
+                (unused1, cause) -> enter(State.STOPPED, null), executor);
         this.future = future;
         return future;
     }

File: core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java
Patch:
@@ -234,14 +234,15 @@ public void onError(Throwable cause) {
             // If timeout occurs, respond with 503 Service Unavailable.
             ((HttpResponseException) cause).httpResponse()
                                            .aggregate(ctx.executor())
-                                           .whenCompleteAsync((message, throwable) -> {
+                                           .handleAsync((message, throwable) -> {
                                                if (throwable != null) {
                                                    failAndRespond(throwable,
                                                                   INTERNAL_SERVER_ERROR_MESSAGE,
                                                                   Http2Error.CANCEL);
                                                } else {
                                                    failAndRespond(cause, message, Http2Error.CANCEL);
                                                }
+                                               return null;
                                            }, ctx.executor());
         } else if (cause instanceof HttpStatusException) {
             failAndRespond(cause,

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaClientCall.java
Patch:
@@ -171,7 +171,7 @@ public void start(Listener<O> responseListener, Metadata unused) {
             return;
         }
         res.subscribe(responseReader, ctx.eventLoop(), true);
-        res.completionFuture().whenCompleteAsync(responseReader, ctx.eventLoop());
+        res.completionFuture().handleAsync(responseReader, ctx.eventLoop());
     }
 
     @Override

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcService.java
Patch:
@@ -160,7 +160,7 @@ protected HttpResponse doPost(ServiceRequestContext ctx, HttpRequest req) throws
         if (call != null) {
             ctx.setRequestTimeoutHandler(() -> call.close(Status.DEADLINE_EXCEEDED, EMPTY_METADATA));
             req.subscribe(call.messageReader(), ctx.eventLoop(), true);
-            req.completionFuture().whenCompleteAsync(call.messageReader(), ctx.eventLoop());
+            req.completionFuture().handleAsync(call.messageReader(), ctx.eventLoop());
         }
         return res;
     }

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/UnframedGrpcService.java
Patch:
@@ -200,13 +200,14 @@ private void frameAndServe(
             return;
         }
 
-        grpcResponse.aggregate().whenCompleteAsync(
+        grpcResponse.aggregate().handleAsync(
                 (framedResponse, t) -> {
                     if (t != null) {
                         res.completeExceptionally(t);
                     } else {
                         deframeAndRespond(ctx, framedResponse, res);
                     }
+                    return null;
                 },
                 ctx.eventLoop());
     }

File: grpc/src/test/java/com/linecorp/armeria/internal/grpc/HttpStreamReaderTest.java
Patch:
@@ -150,7 +150,7 @@ public void onMessage_deframeError_errorListenerThrows() {
 
     @Test
     public void clientDone() {
-        reader.accept(null, null);
+        reader.apply(null, null);
         verify(deframer).deframe(HttpData.EMPTY_DATA, true);
         verify(deframer).close();
     }

File: core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java
Patch:
@@ -37,7 +37,7 @@
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.netty.buffer.ByteBufAllocator;
-import io.netty.buffer.UnpooledByteBufAllocator;
+import io.netty.buffer.PooledByteBufAllocator;
 import io.netty.channel.Channel;
 import io.netty.channel.EventLoop;
 import io.netty.handler.codec.Headers;
@@ -333,6 +333,6 @@ public String toString() {
     @Override
     public ByteBufAllocator alloc() {
         final Channel channel = channel();
-        return channel != null ? channel.alloc() : UnpooledByteBufAllocator.DEFAULT;
+        return channel != null ? channel.alloc() : PooledByteBufAllocator.DEFAULT;
     }
 }

File: benchmarks/src/jmh/java/com/linecorp/armeria/retrofit2/downstream/DownstreamSimpleBenchmark.java
Patch:
@@ -33,7 +33,7 @@
 public class DownstreamSimpleBenchmark extends SimpleBenchmarkBase {
 
     @Override
-    protected SimpleBenchmarkClient client() {
+    protected SimpleBenchmarkClient newClient() {
         ClientFactory factory =
                 new ClientFactoryBuilder()
                         .sslContextCustomizer(ssl -> ssl.trustManager(InsecureTrustManagerFactory.INSTANCE))

File: benchmarks/src/jmh/java/com/linecorp/armeria/retrofit2/shared/SimpleBenchmarkBase.java
Patch:
@@ -41,21 +41,21 @@ public void start() throws Exception {
                 .tlsSelfSigned()
                 .build();
         server.start().join();
-        client = client();
+        client = newClient();
     }
 
     @TearDown
     public void stop() {
         server.stop().join();
     }
 
-    protected abstract SimpleBenchmarkClient client() throws Exception;
+    protected abstract SimpleBenchmarkClient newClient() throws Exception;
 
     protected String baseUrl() {
         final ServerPort httpPort = server.activePorts().values().stream()
                                           .filter(ServerPort::hasHttps).findAny()
                                           .get();
-        return "https://localhost:" + httpPort.localAddress().getPort();
+        return "https://127.0.0.1:" + httpPort.localAddress().getPort();
     }
 
     @Benchmark

File: benchmarks/src/jmh/java/com/linecorp/armeria/retrofit2/upstream/UpstreamSimpleBenchmark.java
Patch:
@@ -35,7 +35,7 @@
 public class UpstreamSimpleBenchmark extends SimpleBenchmarkBase {
 
     @Override
-    protected SimpleBenchmarkClient client() throws Exception {
+    protected SimpleBenchmarkClient newClient() throws Exception {
         SSLContext context = SSLContext.getInstance("TLS");
         context.init(null, InsecureTrustManagerFactory.INSTANCE.getTrustManagers(), null);
         OkHttpClient client = new OkHttpClient.Builder()

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/KeyedCircuitBreakerMapping.java
Patch:
@@ -36,6 +36,9 @@
  */
 public class KeyedCircuitBreakerMapping<K> implements CircuitBreakerMapping {
 
+    static final CircuitBreakerMapping defaultMapping =
+            new KeyedCircuitBreakerMapping<>(KeySelector.HOST, CircuitBreaker::of);
+
     private final ConcurrentMap<K, CircuitBreaker> mapping = new ConcurrentHashMap<>();
 
     private final KeySelector<K> keySelector;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HttpHealthCheckedEndpointGroup.java
Patch:
@@ -48,7 +48,7 @@ public static HttpHealthCheckedEndpointGroup of(EndpointGroup delegate,
     /**
      * Creates a new {@link HttpHealthCheckedEndpointGroup} instance.
      *
-     * @deprecated use {@link HttpHealthCheckedEndpointGroupBuilder}
+     * @deprecated Use {@link HttpHealthCheckedEndpointGroupBuilder}.
      */
     @Deprecated
     public static HttpHealthCheckedEndpointGroup of(EndpointGroup delegate,
@@ -60,7 +60,7 @@ public static HttpHealthCheckedEndpointGroup of(EndpointGroup delegate,
     /**
      * Creates a new {@link HttpHealthCheckedEndpointGroup} instance.
      *
-     * @deprecated use {@link HttpHealthCheckedEndpointGroupBuilder}
+     * @deprecated Use {@link HttpHealthCheckedEndpointGroupBuilder}.
      */
     @Deprecated
     public static HttpHealthCheckedEndpointGroup of(ClientFactory clientFactory,

File: core/src/main/java/com/linecorp/armeria/common/HttpHeaderNames.java
Patch:
@@ -254,7 +254,7 @@ public final class HttpHeaderNames {
     /**
      * {@code "keep-alive"}.
      *
-     * @deprecated Use {@link #CONNECTION} instead.
+     * @deprecated Use {@link #CONNECTION}.
      */
     @Deprecated
     public static final AsciiString KEEP_ALIVE = AsciiString.cached("keep-alive");
@@ -297,7 +297,7 @@ public final class HttpHeaderNames {
     /**
      * {@code "proxy-connection"}.
      *
-     * @deprecated Use {@link #CONNECTION} instead.
+     * @deprecated Use {@link #CONNECTION}.
      */
     @Deprecated
     public static final AsciiString PROXY_CONNECTION = AsciiString.cached("proxy-connection");

File: core/src/main/java/com/linecorp/armeria/common/HttpResponse.java
Patch:
@@ -336,7 +336,7 @@ static HttpResponse ofFailure(Throwable cause) {
     /**
      * Creates a new failed HTTP response.
      *
-     * @deprecated Use {@link #ofFailure(Throwable)} instead.
+     * @deprecated Use {@link #ofFailure(Throwable)}.
      */
     @Deprecated
     static HttpResponse ofFailed(Throwable cause) {

File: core/src/main/java/com/linecorp/armeria/common/Response.java
Patch:
@@ -32,7 +32,7 @@ public interface Response {
      * 1) the response stream has been closed (the {@link StreamMessage} has been completed) or
      * 2) the result value is set (the {@link CompletionStage} has completed.)
      *
-     * @deprecated Use {@link #completionFuture()} instead.
+     * @deprecated Use {@link #completionFuture()}.
      */
     @Deprecated
     default CompletableFuture<?> closeFuture() {

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRpcClientTest.java
Patch:
@@ -297,7 +297,7 @@ private static void invoke(
      * Returns a {@link CircuitBreakerStrategy} which returns {@code true} when there's
      * no {@link Exception} raised.
      */
-    private static CircuitBreakerStrategy<RpcResponse> strategy() {
-        return response -> response.completionFuture().handle((res, cause) -> cause == null);
+    private static CircuitBreakerStrategyWithContent<RpcResponse> strategy() {
+        return (ctx, response) -> response.handle((unused, cause) -> cause == null);
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/Http2ResponseDecoder.java
Patch:
@@ -27,12 +27,12 @@
 
 import com.linecorp.armeria.common.ClosedSessionException;
 import com.linecorp.armeria.common.ContentTooLargeException;
-import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
 import com.linecorp.armeria.internal.ArmeriaHttpUtil;
 import com.linecorp.armeria.internal.Http2GoAwayHandler;
+import com.linecorp.armeria.unsafe.ByteBufHttpData;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.Channel;
@@ -230,7 +230,7 @@ public int onDataRead(
             // If this tryWrite() returns false, it means the response stream has been closed due to
             // disconnection or by the response consumer. We do not need to handle such cases here because
             // it will be notified to the response consumer anyway.
-            res.tryWrite(HttpData.of(data));
+            res.tryWrite(new ByteBufHttpData(data.retain(), endOfStream));
         } catch (Throwable t) {
             res.close(t);
             throw connectionError(INTERNAL_ERROR, t, "failed to consume a DATA frame");

File: grpc/src/main/java/com/linecorp/armeria/internal/grpc/GrpcMessageMarshaller.java
Patch:
@@ -170,15 +170,15 @@ public O deserializeResponse(ByteBufOrStream message) throws IOException {
 
     private ByteBuf serializeProto(Message message) throws IOException {
         if (GrpcSerializationFormats.isProto(serializationFormat)) {
-            int serializedSize = message.getSerializedSize();
+            final int serializedSize = message.getSerializedSize();
             if (serializedSize == 0) {
                 return Unpooled.EMPTY_BUFFER;
             }
             final ByteBuf buf = alloc.buffer(serializedSize);
             boolean success = false;
             try {
-                message.writeTo(CodedOutputStream.newInstance(buf.nioBuffer(0, buf.writableBytes())));
-                buf.writerIndex(buf.capacity());
+                message.writeTo(CodedOutputStream.newInstance(buf.nioBuffer(0, serializedSize)));
+                buf.writerIndex(serializedSize);
                 success = true;
             } finally {
                 if (!success) {

File: core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java
Patch:
@@ -469,7 +469,7 @@ public void onError(Throwable t) {
 
                 @Override
                 public void onComplete() {}
-            });
+            }, ctx.channel().eventLoop());
 
             // NB: No need to set the response timeout because we have session creation timeout.
             responseDecoder.addResponse(0, null, res, RequestLogBuilder.NOOP, 0, UPGRADE_RESPONSE_MAX_LENGTH);

File: core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java
Patch:
@@ -138,7 +138,7 @@ public void onSubscribe(Subscription subscription) {
         // NB: This must be invoked at the end of this method because otherwise the callback methods in this
         //     class can be called before the member fields (subscription and timeoutFuture) are initialized.
         //     It is because the successful write of the first headers will trigger subscription.request(1).
-        eventLoop.execute(this::writeFirstHeader);
+        writeFirstHeader();
     }
 
     private void writeFirstHeader() {
@@ -263,7 +263,7 @@ private void write(HttpObject o, boolean endOfStream, boolean flush) {
             state = State.DONE;
         }
 
-        ch.eventLoop().execute(() -> write0(o, endOfStream, flush));
+        write0(o, endOfStream, flush);
     }
 
     private void write0(HttpObject o, boolean endOfStream, boolean flush) {

File: core/src/test/java/com/linecorp/armeria/server/AnnotatedHttpServiceHandlersOrderTest.java
Patch:
@@ -71,7 +71,7 @@ private static class MyDecorationService1 {
         @Post("/requestConverterOrder")
         @RequestConverter(MethodLevelRequestConverter.class)
         public HttpResponse requestConverterOrder(
-                @RequestObject(ParameterLevelRequestConverter.class) JsonNode node) {
+                @RequestConverter(ParameterLevelRequestConverter.class) JsonNode node) {
             assertThat(node).isNotNull();
             return HttpResponse.of(HttpStatus.OK, MediaType.PLAIN_TEXT_UTF_8, HttpData.ofUtf8(node.toString()));
         }

File: core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java
Patch:
@@ -190,7 +190,6 @@ public boolean isOpen() {
         public boolean tryWrite(HttpObject o) {
             if (o instanceof HttpHeaders) {
                 // NB: It's safe to call logBuilder.start() multiple times.
-                //     See AbstractMessageLog.start() for more information.
                 logBuilder.startResponse();
                 final HttpHeaders headers = (HttpHeaders) o;
                 final HttpStatus status = headers.status();

File: thrift/src/main/java/com/linecorp/armeria/client/thrift/DefaultTHttpClient.java
Patch:
@@ -66,6 +66,7 @@ private RpcResponse execute0(
         pathAndQuery.storeInCache(path);
 
         final RpcRequest call = RpcRequest.of(serviceType, method, args);
-        return execute(HttpMethod.POST, pathAndQuery.path(), null, serviceName, call, DefaultRpcResponse::new);
+        return execute(HttpMethod.POST, pathAndQuery.path(), null, serviceName, call,
+                       (ctx, cause) -> new DefaultRpcResponse(cause));
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/AnnotatedValueResolver.java
Patch:
@@ -209,8 +209,8 @@ static List<AnnotatedValueResolver> of(Executable constructorOrMethod, Set<Strin
             throw new NoAnnotatedParameterException(constructorOrMethod.toGenericString());
         }
         if (list.size() != parameters.length) {
-            throw new IllegalArgumentException("Unsupported parameter exists: " +
-                                               constructorOrMethod.toGenericString());
+            throw new NoAnnotatedParameterException("Unsupported parameter exists: " +
+                                                    constructorOrMethod.toGenericString());
         }
         return list;
     }

File: core/src/main/java/com/linecorp/armeria/client/ClosedClientFactoryException.java
Patch:
@@ -32,7 +32,7 @@ public final class ClosedClientFactoryException extends RuntimeException {
 
     /**
      * Returns a {@link ClosedClientFactoryException} which may be a singleton or a new instance, depending on
-     * whether {@link Flags#verboseExceptions() the verbose exception mode} is enabled.
+     * whether {@linkplain Flags#verboseExceptions() the verbose exception mode} is enabled.
      */
     public static ClosedClientFactoryException get() {
         return Flags.verboseExceptions() ? new ClosedClientFactoryException() : INSTANCE;

File: core/src/main/java/com/linecorp/armeria/client/ResponseTimeoutException.java
Patch:
@@ -32,7 +32,7 @@ public final class ResponseTimeoutException extends TimeoutException {
 
     /**
      * Returns a {@link ResponseTimeoutException} which may be a singleton or a new instance, depending on
-     * whether {@link Flags#verboseExceptions() the verbose exception mode} is enabled.
+     * whether {@linkplain Flags#verboseExceptions() the verbose exception mode} is enabled.
      */
     public static ResponseTimeoutException get() {
         return Flags.verboseExceptions() ? new ResponseTimeoutException() : INSTANCE;

File: core/src/main/java/com/linecorp/armeria/client/WriteTimeoutException.java
Patch:
@@ -31,7 +31,7 @@ public final class WriteTimeoutException extends TimeoutException {
 
     /**
      * Returns a {@link WriteTimeoutException} which may be a singleton or a new instance, depending on
-     * whether {@link Flags#verboseExceptions() the verbose exception mode} is enabled.
+     * whether {@linkplain Flags#verboseExceptions() the verbose exception mode} is enabled.
      */
     public static WriteTimeoutException get() {
         return Flags.verboseExceptions() ? new WriteTimeoutException() : INSTANCE;

File: core/src/main/java/com/linecorp/armeria/common/ClosedSessionException.java
Patch:
@@ -28,7 +28,7 @@ public final class ClosedSessionException extends RuntimeException {
 
     /**
      * Returns a {@link ClosedSessionException} which may be a singleton or a new instance, depending on
-     * whether {@link Flags#verboseExceptions() the verbose exception mode} is enabled.
+     * whether {@linkplain Flags#verboseExceptions() the verbose exception mode} is enabled.
      */
     public static ClosedSessionException get() {
         return Flags.verboseExceptions() ? new ClosedSessionException() : INSTANCE;

File: core/src/main/java/com/linecorp/armeria/common/ContentTooLargeException.java
Patch:
@@ -30,7 +30,7 @@ public final class ContentTooLargeException extends RuntimeException {
 
     /**
      * Returns a {@link ContentTooLargeException} which may be a singleton or a new instance, depending on
-     * whether {@link Flags#verboseExceptions() the verbose exception mode} is enabled.
+     * whether {@linkplain Flags#verboseExceptions() the verbose exception mode} is enabled.
      */
     public static ContentTooLargeException get() {
         return Flags.verboseExceptions() ? new ContentTooLargeException() : INSTANCE;

File: core/src/main/java/com/linecorp/armeria/common/stream/AbortedStreamException.java
Patch:
@@ -34,7 +34,7 @@ public final class AbortedStreamException extends RuntimeException {
 
     /**
      * Returns a {@link AbortedStreamException} which may be a singleton or a new instance, depending on
-     * whether {@link Flags#verboseExceptions() the verbose exception mode} is enabled.
+     * whether {@linkplain Flags#verboseExceptions() the verbose exception mode} is enabled.
      */
     public static AbortedStreamException get() {
         return Flags.verboseExceptions() ? new AbortedStreamException() : INSTANCE;

File: core/src/main/java/com/linecorp/armeria/common/stream/CancelledSubscriptionException.java
Patch:
@@ -35,7 +35,7 @@ public final class CancelledSubscriptionException extends RuntimeException {
 
     /**
      * Returns a {@link CancelledSubscriptionException} which may be a singleton or a new instance, depending
-     * on whether {@link Flags#verboseExceptions() the verbose exception mode} is enabled.
+     * on whether {@linkplain Flags#verboseExceptions() the verbose exception mode} is enabled.
      */
     public static CancelledSubscriptionException get() {
         return Flags.verboseExceptions() ? new CancelledSubscriptionException() : INSTANCE;

File: core/src/main/java/com/linecorp/armeria/common/stream/ClosedPublisherException.java
Patch:
@@ -32,7 +32,7 @@ public final class ClosedPublisherException extends RuntimeException {
 
     /**
      * Returns a {@link ClosedPublisherException} which may be a singleton or a new instance, depending on
-     * whether {@link Flags#verboseExceptions() the verbose exception mode} is enabled.
+     * whether {@linkplain Flags#verboseExceptions() the verbose exception mode} is enabled.
      */
     public static ClosedPublisherException get() {
         return Flags.verboseExceptions() ? new ClosedPublisherException() : INSTANCE;

File: core/src/main/java/com/linecorp/armeria/server/RequestTimeoutException.java
Patch:
@@ -32,7 +32,7 @@ public final class RequestTimeoutException extends TimeoutException {
 
     /**
      * Returns a {@link RequestTimeoutException} which may be a singleton or a new instance, depending on
-     * whether {@link Flags#verboseExceptions() the verbose exception mode} is enabled.
+     * whether {@linkplain Flags#verboseExceptions() the verbose exception mode} is enabled.
      */
     public static RequestTimeoutException get() {
         return Flags.verboseExceptions() ? new RequestTimeoutException() : INSTANCE;

File: grpc/src/main/java/com/linecorp/armeria/internal/grpc/GrpcStatus.java
Patch:
@@ -37,8 +37,8 @@
 import java.net.HttpURLConnection;
 import java.nio.channels.ClosedChannelException;
 
-import com.linecorp.armeria.client.ResponseTimeoutException;
 import com.linecorp.armeria.common.HttpStatus;
+import com.linecorp.armeria.common.TimeoutException;
 
 import io.grpc.Status;
 import io.grpc.Status.Code;
@@ -78,7 +78,7 @@ public static Status fromThrowable(Throwable t) {
         if (t instanceof Http2Exception) {
             return Status.INTERNAL.withCause(t);
         }
-        if (t instanceof ResponseTimeoutException) {
+        if (t instanceof TimeoutException) {
             return Status.DEADLINE_EXCEEDED.withCause(t);
         }
         return s;

File: saml/src/main/java/com/linecorp/armeria/server/saml/HttpPostBindingUtil.java
Patch:
@@ -108,7 +108,7 @@ static <T extends SAMLObject> MessageContext<T> toSamlObject(AggregatedHttpMessa
         final SamlParameters parameters = new SamlParameters(msg);
         final byte[] decoded;
         try {
-            decoded = Base64.getDecoder().decode(parameters.getFirstValue(name));
+            decoded = Base64.getMimeDecoder().decode(parameters.getFirstValue(name));
         } catch (IllegalArgumentException e) {
             throw new SamlException("failed to decode a base64 string of the parameter: " + name, e);
         }

File: saml/src/main/java/com/linecorp/armeria/server/saml/HttpRedirectBindingUtil.java
Patch:
@@ -154,7 +154,7 @@ private static void validateSignature(Credential validationCredential,
         final byte[] input = encoder.toString().substring(1).getBytes(StandardCharsets.UTF_8);
 
         try {
-            final byte[] decodedSignature = Base64.getDecoder().decode(signature);
+            final byte[] decodedSignature = Base64.getMimeDecoder().decode(signature);
             if (!XMLSigningUtil.verifyWithURI(validationCredential, sigAlg, decodedSignature, input)) {
                 throw new SamlException("failed to validate a signature");
             }
@@ -213,7 +213,7 @@ static XMLObject fromDeflatedBase64(String base64Encoded) throws SamlException {
 
         final byte[] base64decoded;
         try {
-            base64decoded = Base64.getDecoder().decode(base64Encoded);
+            base64decoded = Base64.getMimeDecoder().decode(base64Encoded);
         } catch (IllegalArgumentException e) {
             throw new SamlException("failed to decode a deflated base64 string", e);
         }

File: core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java
Patch:
@@ -147,7 +147,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                             state = State.NEED_DATA_OR_TRAILING_HEADERS;
                         }
 
-                        res.scheduleTimeout(ctx);
+                        res.scheduleTimeout(channel().eventLoop());
                         res.write(ArmeriaHttpUtil.toArmeria(nettyRes));
                     } else {
                         failWithUnexpectedMessageType(ctx, msg);

File: core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java
Patch:
@@ -38,7 +38,7 @@
 import com.linecorp.armeria.internal.InboundTrafficController;
 
 import io.netty.channel.Channel;
-import io.netty.channel.ChannelHandlerContext;
+import io.netty.channel.EventLoop;
 import io.netty.util.collection.IntObjectHashMap;
 import io.netty.util.collection.IntObjectMap;
 import io.netty.util.concurrent.ScheduledFuture;
@@ -139,7 +139,7 @@ CompletableFuture<Void> completionFuture() {
             return delegate.completionFuture();
         }
 
-        void scheduleTimeout(ChannelHandlerContext ctx) {
+        void scheduleTimeout(EventLoop eventLoop) {
             if (responseTimeoutFuture != null || responseTimeoutMillis <= 0 || !isOpen()) {
                 // No need to schedule a response timeout if:
                 // - the timeout has been scheduled already,
@@ -148,7 +148,7 @@ void scheduleTimeout(ChannelHandlerContext ctx) {
                 return;
             }
 
-            responseTimeoutFuture = ctx.channel().eventLoop().schedule(
+            responseTimeoutFuture = eventLoop.schedule(
                     this, responseTimeoutMillis, TimeUnit.MILLISECONDS);
         }
 

File: core/src/main/java/com/linecorp/armeria/server/annotation/StringResponseConverterFunction.java
Patch:
@@ -42,7 +42,7 @@ public HttpResponse convertResponse(ServiceRequestContext ctx,
                 // Use 'utf-8' charset by default.
                 final Charset charset = mediaType.charset().orElse(StandardCharsets.UTF_8);
                 return HttpResponse.of(HttpStatus.OK, mediaType.withCharset(charset),
-                                       charset.encode(String.valueOf(result)).array());
+                                       String.valueOf(result).getBytes(charset));
             }
         } else if (result instanceof CharSequence) {
             return HttpResponse.of(((CharSequence) result).toString());

File: core/src/test/java/com/linecorp/armeria/server/AnnotatedHttpServiceTest.java
Patch:
@@ -674,6 +674,8 @@ public void testAnnotatedHttpService() throws Exception {
             testBody(hc, get("/1/int-async/42"), "Integer: 43");
             testBody(hc, post("/1/long/42"), "Number[42]");
             testBody(hc, get("/1/string/blah"), "String: blah");
+            testBody(hc, get("/1/string/%F0%90%8D%88"), "String: \uD800\uDF48", // 𐍈
+                     StandardCharsets.UTF_8);
 
             // Get a requested path as typed string from ServiceRequestContext or HttpRequest
             testBody(hc, get("/1/path/ctx/async/1"), "String[/1/path/ctx/async/1]");

File: core/src/test/java/com/linecorp/armeria/server/DefaultServiceRequestContextTest.java
Patch:
@@ -22,7 +22,6 @@
 import org.junit.Test;
 
 import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap;
 
 import com.linecorp.armeria.common.DefaultHttpHeaders;
 import com.linecorp.armeria.common.HttpMethod;
@@ -49,7 +48,7 @@ public void deriveContext() {
         final ServiceRequestContext originalCtx = new DefaultServiceRequestContext(
                 virtualHost.serviceConfigs().get(0), mock(Channel.class), NoopMeterRegistry.get(),
                 SessionProtocol.H2,
-                mappingCtx, PathMappingResult.of("/foo", null, ImmutableMap.of()),
+                mappingCtx, PathMappingResult.of("/foo"),
                 mock(Request.class), null, null);
 
         setAdditionalHeaders(originalCtx);

File: logback/src/test/java/com/linecorp/armeria/common/logback/RequestContextExportingAppenderTest.java
Patch:
@@ -46,7 +46,6 @@
 import org.slf4j.MDC;
 
 import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap;
 
 import com.linecorp.armeria.client.ClientOptions;
 import com.linecorp.armeria.client.ClientRequestContext;
@@ -425,7 +424,7 @@ private static ServiceRequestContext newServiceContext(
 
         final ServiceRequestContext ctx = new DefaultServiceRequestContext(
                 serviceConfig, ch, NoopMeterRegistry.get(), SessionProtocol.H2, mappingCtx,
-                PathMappingResult.of(path, query, ImmutableMap.of()), req, newSslSession(), null);
+                PathMappingResult.of(path, query), req, newSslSession(), null);
 
         ctx.attr(MY_ATTR).set(new CustomValue("some-attr"));
         return ctx;

File: tomcat/src/main/java/com/linecorp/armeria/server/tomcat/Tomcat90ProtocolHandler.java
Patch:
@@ -82,6 +82,9 @@ public void stop() throws Exception {}
     @Override
     public void destroy() {}
 
+    @Override
+    public void closeServerSocketGraceful() {}
+
     @Override
     public boolean isAprRequired() {
         return false;

File: core/src/main/java/com/linecorp/armeria/server/docs/DocStringExtractor.java
Patch:
@@ -65,7 +65,7 @@ public Map<String, String> getAllDocStrings(ClassLoader classLoader) {
     private Map<String, String> getAllDocStrings0(ClassLoader classLoader) {
         final Configuration configuration = new ConfigurationBuilder()
                 .filterInputsBy(new FilterBuilder().includePackage(path))
-                .setUrls(ClasspathHelper.forPackage(path))
+                .setUrls(ClasspathHelper.forPackage(path, classLoader))
                 .addClassLoader(classLoader)
                 .setScanners(new ResourcesScanner());
         if (configuration.getUrls() == null || configuration.getUrls().isEmpty()) {

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/AbstractThriftOverHttpTest.java
Patch:
@@ -154,7 +154,7 @@ public static void init() throws Exception {
 
     @AfterClass
     public static void destroy() throws Exception {
-        server.stop();
+        server.stop().get();
     }
 
     @Before

File: retrofit2/src/test/java/com/linecorp/armeria/client/retrofit2/ArmeriaCallFactoryTest.java
Patch:
@@ -516,8 +516,9 @@ public void baseUrlContainsPath() throws Exception {
     public void customPath() throws Exception {
         assertThat(service.customPath("Foo", 23).get()).isEqualTo(new Pojo("Foo", 23));
         assertThat(service.customPath("Foo+Bar", 24).get()).isEqualTo(new Pojo("Foo+Bar", 24));
-        assertThat(service.customPath("Foo+Bar/Hoge", 24).get()).isEqualTo(new Pojo("Foo+Bar%2FHoge", 24));
-        assertThat(service.customPath("Foo%2BBar", 24).get()).isEqualTo(new Pojo("Foo%252BBar", 24));
+        assertThat(service.customPath("Foo+Bar/Hoge", 24).get()).isEqualTo(new Pojo("Foo+Bar/Hoge", 24));
+        assertThat(service.customPath("Foo+Bar%2fHoge", 24).get()).isEqualTo(new Pojo("Foo+Bar%252fHoge", 24));
+        assertThat(service.customPath("Foo%2bBar", 24).get()).isEqualTo(new Pojo("Foo%252bBar", 24));
     }
 
     @Test

File: core/src/main/java/com/linecorp/armeria/internal/AbstractHttp2ConnectionHandler.java
Patch:
@@ -21,7 +21,8 @@
 import javax.annotation.Nullable;
 
 import com.google.common.base.MoreObjects;
-import com.google.common.base.Throwables;
+
+import com.linecorp.armeria.common.util.Exceptions;
 
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelPromise;
@@ -110,7 +111,7 @@ private static String goAwayDebugData(@Nullable Http2Exception http2Ex, @Nullabl
         buf.append(", message: ");
         buf.append(MoreObjects.firstNonNull(message, "n/a"));
         buf.append(", cause: ");
-        buf.append(cause != null ? Throwables.getStackTraceAsString(cause) : "n/a");
+        buf.append(cause != null ? Exceptions.traceText(cause) : "n/a");
 
         return buf.toString();
     }

File: core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java
Patch:
@@ -37,7 +37,6 @@
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 
-import com.google.common.base.Throwables;
 import com.google.common.io.ByteStreams;
 import com.google.common.io.Closeables;
 
@@ -60,6 +59,7 @@
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.util.CompletionActions;
+import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.server.AbstractHttpService;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.Service;
@@ -206,7 +206,7 @@ private HttpResponse doGetOrPost(HttpRequest req) {
                         if (cause != null) {
                             return HttpResponse.of(
                                     HttpStatus.INTERNAL_SERVER_ERROR,
-                                    MediaType.PLAIN_TEXT_UTF_8, Throwables.getStackTraceAsString(cause));
+                                    MediaType.PLAIN_TEXT_UTF_8, Exceptions.traceText(cause));
                         }
 
                         return HttpResponse.of(

File: core/src/test/java/com/linecorp/armeria/common/stream/DeferredStreamMessageTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 
-import com.google.common.base.Throwables;
+import com.linecorp.armeria.common.util.Exceptions;
 
 import io.netty.util.concurrent.ImmediateEventExecutor;
 
@@ -172,7 +172,7 @@ public void onNext(Object o) {
 
             @Override
             public void onError(Throwable t) {
-                streamed.add("onError: " + Throwables.getStackTraceAsString(t));
+                streamed.add("onError: " + Exceptions.traceText(t));
             }
 
             @Override

File: core/src/test/java/com/linecorp/armeria/server/HttpServerStreamingTest.java
Patch:
@@ -42,7 +42,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.common.base.Throwables;
 import com.google.common.collect.ImmutableList;
 
 import com.linecorp.armeria.client.ClientFactory;
@@ -64,6 +63,7 @@
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.stream.StreamWriter;
 import com.linecorp.armeria.common.util.EventLoopGroups;
+import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.internal.InboundTrafficController;
 import com.linecorp.armeria.testing.server.ServerRule;
 
@@ -322,7 +322,7 @@ public void onError(Throwable cause) {
                             HttpResponse.of(
                                     HttpStatus.INTERNAL_SERVER_ERROR,
                                     MediaType.PLAIN_TEXT_UTF_8,
-                                    Throwables.getStackTraceAsString(cause)));
+                                    Exceptions.traceText(cause)));
                 }
 
                 @Override

File: grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java
Patch:
@@ -49,7 +49,6 @@
 import org.junit.rules.Timeout;
 import org.mockito.ArgumentCaptor;
 
-import com.google.common.base.Throwables;
 import com.google.protobuf.ByteString;
 
 import com.linecorp.armeria.client.ClientBuilder;
@@ -69,6 +68,7 @@
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogAvailability;
 import com.linecorp.armeria.common.util.EventLoopGroups;
+import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.grpc.testing.Messages.EchoStatus;
 import com.linecorp.armeria.grpc.testing.Messages.Payload;
 import com.linecorp.armeria.grpc.testing.Messages.ResponseParameters;
@@ -931,7 +931,7 @@ public void maxInboundSize_tooBig() throws Exception {
         final Throwable t = catchThrowable(() -> stub.streamingOutputCall(request).next());
         assertThat(t).isInstanceOf(StatusRuntimeException.class);
         assertThat(((StatusRuntimeException) t).getStatus().getCode()).isEqualTo(Code.RESOURCE_EXHAUSTED);
-        assertThat(Throwables.getStackTraceAsString(t)).contains("exceeds maximum");
+        assertThat(Exceptions.traceText(t)).contains("exceeds maximum");
 
         checkRequestLog((rpcReq, rpcRes, grpcStatus) -> {
             assertThat(rpcReq.params()).containsExactly(request);
@@ -970,7 +970,7 @@ public void maxOutboundSize_tooBig() throws Exception {
         final Throwable t = catchThrowable(() -> stub.streamingOutputCall(request).next());
         assertThat(t).isInstanceOf(StatusRuntimeException.class);
         assertThat(((StatusRuntimeException) t).getStatus().getCode()).isEqualTo(Code.CANCELLED);
-        assertThat(Throwables.getStackTraceAsString(t)).contains("message too large");
+        assertThat(Exceptions.traceText(t)).contains("message too large");
 
         checkRequestLog((rpcReq, rpcRes, grpcStatus) -> {
             assertThat(rpcReq.params()).containsExactly(request);

File: core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java
Patch:
@@ -45,6 +45,7 @@
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
 import com.linecorp.armeria.common.util.Exceptions;
+import com.linecorp.armeria.internal.ChannelUtil;
 import com.linecorp.armeria.internal.Http1ClientCodec;
 import com.linecorp.armeria.internal.Http2GoAwayListener;
 import com.linecorp.armeria.internal.ReadSuppressingHandler;
@@ -209,7 +210,7 @@ private void configureAsHttps(Channel ch, InetSocketAddress remoteAddr) {
         final SslHandler sslHandler = sslCtx.newHandler(ch.alloc(),
                                                         remoteAddr.getHostString(),
                                                         remoteAddr.getPort());
-        p.addLast(sslHandler);
+        p.addLast(ChannelUtil.configureSslHandler(sslHandler));
         p.addLast(TrafficLoggingHandler.CLIENT);
         p.addLast(new ChannelInboundHandlerAdapter() {
             private boolean handshakeFailed;

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaChannel.java
Patch:
@@ -40,7 +40,6 @@
 import com.linecorp.armeria.common.logging.RequestLogAvailability;
 import com.linecorp.armeria.common.util.ReleasableHolder;
 import com.linecorp.armeria.internal.grpc.ArmeriaMessageFramer;
-import com.linecorp.armeria.internal.grpc.GrpcLogUtil;
 
 import io.grpc.CallOptions;
 import io.grpc.Channel;
@@ -101,7 +100,7 @@ public <I, O> ClientCall<I, O> newCall(
                            .contentType(serializationFormat.mediaType()));
         final ClientRequestContext ctx = newContext(HttpMethod.POST, req);
         ctx.logBuilder().serializationFormat(serializationFormat);
-        ctx.logBuilder().requestContent(GrpcLogUtil.rpcRequest(method), null);
+        ctx.logBuilder().deferRequestContent();
         ctx.logBuilder().deferResponseContent();
         return new ArmeriaClientCall<>(
                 ctx,

File: grpc/src/main/java/com/linecorp/armeria/internal/grpc/ArmeriaMessageDeframer.java
Patch:
@@ -530,7 +530,7 @@ private void reportCount() {
 
         private void verifySize() {
             if (count > maxMessageSize) {
-                throw Status.INTERNAL.withDescription(String.format(
+                throw Status.RESOURCE_EXHAUSTED.withDescription(String.format(
                         "%s: Compressed frame exceeds maximum frame size: %d. Bytes read: %d. ",
                         debugString, maxMessageSize, count)).asRuntimeException();
             }

File: grpc/src/test/java/com/linecorp/armeria/internal/grpc/HttpStreamReaderTest.java
Patch:
@@ -150,7 +150,7 @@ public void onMessage_deframeError_errorListenerThrows() {
 
     @Test
     public void clientDone() {
-        reader.onComplete();
+        reader.accept(null, null);
         verify(deframer).deframe(HttpData.EMPTY_DATA, true);
         verify(deframer).close();
     }

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/ArmeriaServerCallTest.java
Patch:
@@ -117,7 +117,9 @@ public void setUp() {
                 "gzip");
         call.setListener(listener);
         call.messageReader().onSubscribe(subscription);
-        when(ctx.logBuilder()).thenReturn(new DefaultRequestLog(ctx));
+        final DefaultRequestLog log = new DefaultRequestLog(ctx);
+        when(ctx.log()).thenReturn(log);
+        when(ctx.logBuilder()).thenReturn(log);
         when(ctx.alloc()).thenReturn(ByteBufAllocator.DEFAULT);
         when(ctx.attr(GrpcUnsafeBufferUtil.BUFFERS)).thenReturn(buffersAttr);
     }

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/UnframedGrpcServiceTest.java
Patch:
@@ -84,7 +84,9 @@ public void setUp() {
         when(ctx.eventLoop()).thenReturn(eventLoop.get());
         when(ctx.contextAwareEventLoop()).thenReturn(eventLoop.get());
         when(ctx.alloc()).thenReturn(ByteBufAllocator.DEFAULT);
-        when(ctx.logBuilder()).thenReturn(new DefaultRequestLog(ctx));
+        final DefaultRequestLog log = new DefaultRequestLog(ctx);
+        when(ctx.log()).thenReturn(log);
+        when(ctx.logBuilder()).thenReturn(log);
 
         when(request.headers())
                 .thenReturn(HttpHeaders.of(HttpMethod.POST, "/armeria.grpc.testing.TestService/EmptyCall")

File: grpc/src/test/java/com/linecorp/armeria/it/grpc/GrpcMetricsIntegrationTest.java
Patch:
@@ -168,7 +168,7 @@ public void unframed() throws Exception {
         assertThat(findServerMeter("UnaryCall2", "responseLength", COUNT, "httpStatus", "200")).contains(4.0);
         assertThat(findServerMeter("UnaryCall2", "responseLength", COUNT, "httpStatus", "500")).contains(3.0);
         assertThat(findServerMeter("UnaryCall2", "responseLength", TOTAL, "httpStatus", "200")).contains(0.0);
-        assertThat(findServerMeter("UnaryCall2", "responseLength", TOTAL, "httpStatus", "500")).contains(42.0);
+        assertThat(findServerMeter("UnaryCall2", "responseLength", TOTAL, "httpStatus", "500")).contains(225.0);
     }
 
     private static Optional<Double> findServerMeter(

File: core/src/test/java/com/linecorp/armeria/common/stream/AbstractStreamMessageAndWriterTest.java
Patch:
@@ -60,7 +60,7 @@ public void onSubscribeBeforeOnComplete() throws Exception {
         // Repeat to increase the chance of reproduction.
         for (int i = 0; i < 8192; i++) {
             final StreamMessageAndWriter<Integer> stream = newStreamWriter(TEN_INTEGERS);
-            eventLoop().execute(stream::close);
+            eventLoop.get().execute(stream::close);
             stream.subscribe(new Subscriber<Object>() {
                 @Override
                 public void onSubscribe(Subscription s) {
@@ -82,7 +82,7 @@ public void onError(Throwable t) {
                 public void onComplete() {
                     queue.add("onComplete");
                 }
-            }, eventLoop());
+            }, eventLoop.get());
 
             assertThat(queue.poll(5, TimeUnit.SECONDS)).isEqualTo("onSubscribe");
             assertThat(queue.poll(5, TimeUnit.SECONDS)).isEqualTo("onComplete");

File: core/src/test/java/com/linecorp/armeria/common/stream/EventLoopStreamMessageTest.java
Patch:
@@ -22,6 +22,6 @@ public class EventLoopStreamMessageTest extends AbstractStreamMessageAndWriterTe
 
     @Override
     <T> StreamMessageAndWriter<T> newStreamWriter(List<T> unused) {
-        return new EventLoopStreamMessage<>(eventLoop());
+        return new EventLoopStreamMessage<>(eventLoop.get());
     }
 }

File: thrift/src/test/java/com/linecorp/armeria/it/client/retry/RetryingRpcClientTest.java
Patch:
@@ -58,7 +58,7 @@ public class RetryingRpcClientTest {
     private static final RetryStrategy<RpcRequest, RpcResponse> retryAlways =
             (request, response) -> {
                 final CompletableFuture<Backoff> future = new CompletableFuture<>();
-                response.whenComplete((unused1, unused2) -> future.complete(Backoff.withoutDelay()));
+                response.whenComplete((unused1, unused2) -> future.complete(Backoff.fixed(500)));
                 return future;
             };
 

File: core/src/main/java/com/linecorp/armeria/client/Endpoint.java
Patch:
@@ -505,10 +505,11 @@ public int compareTo(Endpoint that) {
 
     @Override
     public String toString() {
-        final ToStringHelper helper = MoreObjects.toStringHelper(this).omitNullValues();
+        final ToStringHelper helper = MoreObjects.toStringHelper(this);
         helper.addValue(authority());
         if (!isGroup()) {
-            if (hostType == null) {
+            if (hostType == HostType.HOSTNAME_AND_IPv4 ||
+                hostType == HostType.HOSTNAME_AND_IPv6) {
                 helper.add("ipAddr", ipAddr);
             }
             helper.add("weight", weight);

File: core/src/main/java/com/linecorp/armeria/server/AnnotatedElementNameUtil.java
Patch:
@@ -76,7 +76,7 @@ private static String getName(Object element) {
                         "cannot obtain the name of the parameter or field automatically. " +
                         "Please make sure you compiled your code with '-parameters' option. " +
                         "If not, you need to specify parameter and header names with @" +
-                        Param.class.getName() + " and @" + Header.class.getName() + '.');
+                        Param.class.getSimpleName() + " and @" + Header.class.getSimpleName() + '.');
             }
             return parameter.getName();
         }

File: core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java
Patch:
@@ -1037,7 +1037,7 @@ public Server build() {
             if (!this.ports.isEmpty()) {
                 ports = ImmutableList.copyOf(this.ports);
             } else {
-                ports = ImmutableList.of(new ServerPort(0, HTTP, HTTPS));
+                ports = ImmutableList.of(new ServerPort(0, HTTPS));
             }
 
             final DomainNameMappingBuilder<SslContext>

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/MetricCollectingCircuitBreakerListener.java
Patch:
@@ -28,9 +28,10 @@
  * A {@link CircuitBreakerListener} which exports the status of {@link CircuitBreaker}s to
  * {@link MeterRegistry}.
  *
- * <p>This class will generate the following metrics.
+ * <p>This class will generate the following metrics:
  *
- * <table summary="metrics that will be generated by this class">
+ * <table>
+ * <caption>metrics that will be generated by this class</caption>
  * <tr><th>metric name</th><th>description</th></tr>
  *
  * <tr><td>{@code <name>.requests{name="<circuit breaker name>",result="success"}}</td>

File: tomcat/src/test/java/com/linecorp/armeria/server/tomcat/ManagedTomcatServiceTest.java
Patch:
@@ -39,7 +39,7 @@
 import io.netty.handler.codec.http.HttpHeaderNames;
 import io.netty.util.concurrent.Future;
 
-public class TomcatServiceTest extends WebAppContainerTest {
+public class ManagedTomcatServiceTest extends WebAppContainerTest {
 
     private static final String SERVICE_NAME = "TomcatServiceTest";
 

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/AbstractThriftOverHttpTest.java
Patch:
@@ -108,8 +108,6 @@ protected String getResponse(String name) {
                     (AsyncIface) (name, resultHandler) ->
                             resultHandler.onError(new AnticipatedException(name))));
 
-            sb.service("/hellochild", THttpService.of(new HelloServiceChild()));
-
             sb.service("/sleep", THttpService.of(
                     (SleepService.AsyncIface) (milliseconds, resultHandler) ->
                             RequestContext.current().eventLoop().schedule(

File: grpc/src/main/java/com/linecorp/armeria/common/grpc/GrpcSerializationFormatProvider.java
Patch:
@@ -32,7 +32,7 @@ public final class GrpcSerializationFormatProvider extends SerializationFormatPr
     @Override
     protected Set<Entry> entries() {
         return ImmutableSet.of(
-                new Entry("gproto", create("application", "grpc+proto"), create("application", "grpc")),
+                new Entry("gproto", create("application", "grpc"), create("application", "grpc+proto")),
                 new Entry("gjson", create("application", "grpc+json")),
                 new Entry("gproto-web", create("application", "grpc-web+proto"),
                           create("application", "grpc-web")),

File: core/src/main/java/com/linecorp/armeria/client/logging/LoggingClient.java
Patch:
@@ -145,7 +145,9 @@ public O execute(ClientRequestContext ctx, I req) throws Exception {
             ctx.log().addListener(log -> logRequest(logger, log, requestLogLevel,
                                                     requestHeadersSanitizer, requestContentSanitizer),
                                   RequestLogAvailability.REQUEST_END);
-            ctx.log().addListener(log -> logResponse(logger, log, successfulResponseLogLevel,
+            ctx.log().addListener(log -> logResponse(logger, log, requestLogLevel,
+                                                     requestHeadersSanitizer, requestContentSanitizer,
+                                                     successfulResponseLogLevel,
                                                      failedResponseLogLevel, responseHeadersSanitizer,
                                                      responseContentSanitizer),
                                   RequestLogAvailability.COMPLETE);

File: core/src/main/java/com/linecorp/armeria/common/logging/LoggingDecoratorBuilder.java
Patch:
@@ -76,7 +76,7 @@ protected LogLevel successfulResponseLogLevel() {
 
     /**
      * Sets the {@link LogLevel} to use when logging failure responses (e.g., failed with an exception).
-     * If unset, will use {@link LogLevel#WARN}.
+     * If unset, will use {@link LogLevel#WARN}. The request will be logged too if it was not otherwise.
      */
     public T failureResponseLogLevel(LogLevel failedResponseLogLevel) {
         this.failedResponseLogLevel = requireNonNull(failedResponseLogLevel, "failedResponseLogLevel");

File: core/src/main/java/com/linecorp/armeria/server/logging/LoggingService.java
Patch:
@@ -137,6 +137,8 @@ public O serve(ServiceRequestContext ctx, I req) throws Exception {
                                                     requestContentSanitizer),
                                   RequestLogAvailability.REQUEST_END);
             ctx.log().addListener(log -> logResponse(((ServiceRequestContext) log.context()).logger(), log,
+                                                     requestLogLevel, requestHeadersSanitizer,
+                                                     requestContentSanitizer,
                                                      successfulResponseLogLevel, failedResponseLogLevel,
                                                      responseHeadersSanitizer, responseContentSanitizer),
                                   RequestLogAvailability.COMPLETE);

File: core/src/test/java/com/linecorp/armeria/server/logging/LoggingServiceTest.java
Patch:
@@ -121,6 +121,8 @@ public void defaults_error() throws Exception {
         final IllegalStateException cause = new IllegalStateException("Failed");
         when(log.responseCause()).thenReturn(cause);
         service.serve(ctx, REQUEST);
+        verify(logger).warn(REQUEST_FORMAT,
+                            "headers: " + REQUEST_HEADERS + ", content: " + REQUEST_CONTENT);
         verify(logger).warn(RESPONSE_FORMAT,
                             "headers: " + RESPONSE_HEADERS + ", content: " + RESPONSE_CONTENT,
                             cause);

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRpcClient.java
Patch:
@@ -108,7 +108,9 @@ protected RpcResponse doExecute(ClientRequestContext ctx, RpcRequest req, Circui
             throw cause;
         }
 
-        reportSuccessOrFailure(circuitBreaker, strategy().shouldReportAsSuccess(response));
+        response.whenComplete((unused1, unused2) -> {
+            reportSuccessOrFailure(circuitBreaker, strategy().shouldReportAsSuccess(response));
+        });
         return response;
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java
Patch:
@@ -42,7 +42,6 @@
 import com.linecorp.armeria.common.stream.ClosedPublisherException;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.internal.HttpObjectEncoder;
-import com.linecorp.armeria.internal.logging.LoggingUtil;
 
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelFuture;
@@ -151,11 +150,10 @@ private void writeFirstHeader() {
         }
 
         final HttpHeaders firstHeaders = autoFillHeaders(ch);
-        final String host = LoggingUtil.remoteHost(firstHeaders, ch);
 
         final SessionProtocol protocol = session.protocol();
         assert protocol != null;
-        logBuilder.startRequest(ch, protocol, host);
+        logBuilder.startRequest(ch, protocol);
         logBuilder.requestHeaders(firstHeaders);
 
         if (request.isEmpty()) {

File: core/src/main/java/com/linecorp/armeria/common/HttpHeaders.java
Patch:
@@ -120,6 +120,8 @@ static HttpHeaders copyOf(HttpHeaders headers) {
 
     /**
      * Gets the {@link HttpHeaderNames#METHOD} header or {@code null} if there is no such header.
+     * {@link HttpMethod#UNKNOWN} is returned if the value of the {@link HttpHeaderNames#METHOD} header is
+     * not defined in {@link HttpMethod}.
      */
     @Nullable
     HttpMethod method();

File: core/src/main/java/com/linecorp/armeria/common/logging/NoopRequestLogBuilder.java
Patch:
@@ -33,7 +33,7 @@ public void addChild(RequestLog child) {}
     public void endResponseWithLastChild() {}
 
     @Override
-    public void startRequest(Channel ch, SessionProtocol sessionProtocol, String host) {}
+    public void startRequest(Channel ch, SessionProtocol sessionProtocol) {}
 
     @Override
     public void serializationFormat(SerializationFormat serializationFormat) {}

File: core/src/main/java/com/linecorp/armeria/common/metric/MeterIdPrefixFunction.java
Patch:
@@ -85,9 +85,8 @@ static MeterIdPrefixFunction ofDefault(String name) {
                 tags.add(Tag.of("pathMapping", sCtx.pathMapping().meterTag()));
             }
 
-            if (log.isAvailable(RequestLogAvailability.RESPONSE_HEADERS) &&
-                log.status() != null) {
-                tags.add(Tag.of("httpStatus", String.valueOf(log.statusCode())));
+            if (log.isAvailable(RequestLogAvailability.RESPONSE_HEADERS)) {
+                tags.add(Tag.of("httpStatus", log.status().codeAsText()));
             }
 
             return new MeterIdPrefix(name, tags);

File: core/src/test/java/com/linecorp/armeria/internal/metric/RequestMetricSupportTest.java
Patch:
@@ -52,7 +52,7 @@ public void httpSuccess() {
 
         final MeterIdPrefixFunction meterIdPrefixFunction = MeterIdPrefixFunction.ofDefault("foo");
 
-        ctx.logBuilder().startRequest(mock(Channel.class), SessionProtocol.H2C, "example.com");
+        ctx.logBuilder().startRequest(mock(Channel.class), SessionProtocol.H2C);
         RequestMetricSupport.setup(ctx, meterIdPrefixFunction);
 
         ctx.logBuilder().requestHeaders(HttpHeaders.of(HttpMethod.POST, "/foo"));
@@ -90,7 +90,7 @@ public void httpFailure() {
 
         final MeterIdPrefixFunction meterIdPrefixFunction = MeterIdPrefixFunction.ofDefault("foo");
 
-        ctx.logBuilder().startRequest(mock(Channel.class), SessionProtocol.H2C, "example.com");
+        ctx.logBuilder().startRequest(mock(Channel.class), SessionProtocol.H2C);
         RequestMetricSupport.setup(ctx, meterIdPrefixFunction);
 
         ctx.logBuilder().requestHeaders(HttpHeaders.of(HttpMethod.POST, "/foo"));
@@ -120,7 +120,7 @@ public void rpc() {
 
         final MeterIdPrefixFunction meterIdPrefixFunction = MeterIdPrefixFunction.ofDefault("bar");
 
-        ctx.logBuilder().startRequest(mock(Channel.class), SessionProtocol.H2C, "example.com");
+        ctx.logBuilder().startRequest(mock(Channel.class), SessionProtocol.H2C);
         RequestMetricSupport.setup(ctx, meterIdPrefixFunction);
 
         ctx.logBuilder().requestHeaders(HttpHeaders.of(HttpMethod.POST, "/bar"));

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerRpcClient.java
Patch:
@@ -56,7 +56,7 @@ public final class CircuitBreakerRpcClient extends CircuitBreakerClient<RpcReque
      * Creates a new decorator that binds one {@link CircuitBreaker} per RPC method name with the specified
      * {@link CircuitBreakerStrategy}.
      *
-     * @param factory A function that takes a RPC method name and creates a new {@link CircuitBreaker}.
+     * @param factory A function that takes an RPC method name and creates a new {@link CircuitBreaker}.
      */
     public static Function<Client<RpcRequest, RpcResponse>, CircuitBreakerRpcClient>
     newPerMethodDecorator(Function<String, CircuitBreaker> factory,

File: core/src/main/java/com/linecorp/armeria/server/auth/HttpAuthService.java
Patch:
@@ -32,13 +32,12 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.util.Exceptions;
-import com.linecorp.armeria.server.DecoratingService;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.SimpleDecoratingService;
 
 /**
- * A {@link DecoratingService} that provides HTTP authorization functionality.
+ * Decorates a {@link Service} to provide HTTP authorization functionality.
  */
 public abstract class HttpAuthService extends SimpleDecoratingService<HttpRequest, HttpResponse> {
 

File: core/src/main/java/com/linecorp/armeria/server/encoding/HttpEncodingService.java
Patch:
@@ -31,7 +31,7 @@
 import com.linecorp.armeria.server.SimpleDecoratingService;
 
 /**
- * A {@link DecoratingService} that applies HTTP encoding (e.g., gzip) to an {@link HttpService}.
+ * Decorates a {@link Service} to apply HTTP encoding (e.g., gzip) to an {@link HttpService}.
  * HTTP encoding will be applied if the client specifies it, the response content type is a reasonable
  * type to encode, and the response either has no fixed content length or the length is larger than 1KB.
  */

File: core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingRpcService.java
Patch:
@@ -29,7 +29,7 @@
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 /**
- * Decorates a RPC {@link Service} to throttle incoming requests.
+ * Decorates an RPC {@link Service} to throttle incoming requests.
  */
 public class ThrottlingRpcService extends ThrottlingService<RpcRequest, RpcResponse> {
     /**

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/AbstractThriftOverHttpTest.java
Patch:
@@ -74,6 +74,7 @@ public abstract class AbstractThriftOverHttpTest {
 
     abstract static class HelloServiceBase implements AsyncIface {
         @Override
+        @SuppressWarnings("unchecked")
         public void hello(String name, AsyncMethodCallback resultHandler) throws TException {
             resultHandler.onComplete(getResponse(name));
         }

File: core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java
Patch:
@@ -195,8 +195,8 @@ public String mappedPath() {
 
     @Nullable
     @Override
-    public MediaType negotiatedProduceType() {
-        return pathMappingResult.negotiatedProduceType();
+    public MediaType negotiatedResponseMediaType() {
+        return pathMappingResult.negotiatedResponseMediaType();
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/server/HttpHeaderPathMapping.java
Patch:
@@ -125,7 +125,7 @@ public PathMappingResult apply(PathMappingContext mappingCtx) {
                     // we set the score as the best score when the index is 0.
                     result.setScore(i == 0 ? PathMappingResult.HIGHEST_SCORE : -1 * i);
                     if (!produceTypes.isEmpty()) {
-                        result.setNegotiatedProduceType(produceType);
+                        result.setNegotiatedResponseMediaType(produceType);
                     }
                     return result;
                 }

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContextWrapper.java
Patch:
@@ -95,8 +95,8 @@ public String mappedPath() {
 
     @Nullable
     @Override
-    public MediaType negotiatedProduceType() {
-        return delegate().negotiatedProduceType();
+    public MediaType negotiatedResponseMediaType() {
+        return delegate().negotiatedResponseMediaType();
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/server/annotation/ConsumeType.java
Patch:
@@ -24,7 +24,10 @@
 
 /**
  * Specifies a media type which would be consumed by the service method or class.
+ *
+ * @deprecated Use {@link Consumes}.
  */
+@Deprecated
 @Repeatable(ConsumeTypes.class)
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ ElementType.TYPE, ElementType.METHOD })

File: core/src/main/java/com/linecorp/armeria/server/annotation/ConsumeTypes.java
Patch:
@@ -23,7 +23,10 @@
 
 /**
  * The containing annotation type for {@link ConsumeType}.
+ *
+ * @deprecated Use {@link ConsumesGroup}.
  */
+@Deprecated
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ ElementType.TYPE, ElementType.METHOD })
 public @interface ConsumeTypes {

File: core/src/main/java/com/linecorp/armeria/server/annotation/ProduceType.java
Patch:
@@ -24,7 +24,10 @@
 
 /**
  * Specifies a media type which would be produced by the service method or class.
+ *
+ * @deprecated Use {@link Produces}.
  */
+@Deprecated
 @Repeatable(ProduceTypes.class)
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ ElementType.TYPE, ElementType.METHOD })

File: core/src/main/java/com/linecorp/armeria/server/annotation/ProduceTypes.java
Patch:
@@ -23,7 +23,10 @@
 
 /**
  * The containing annotation type for {@link ProduceType}.
+ *
+ * @deprecated Use {@link ProducesGroup}.
  */
+@Deprecated
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ ElementType.TYPE, ElementType.METHOD })
 public @interface ProduceTypes {

File: core/src/test/java/com/linecorp/armeria/server/TestConverters.java
Patch:
@@ -107,7 +107,7 @@ private static HttpResponse httpResponse(HttpData data) {
                                                .setTimeMillis(HttpHeaderNames.DATE, current);
 
         final MediaType contentType =
-                ((ServiceRequestContext) RequestContext.current()).negotiatedProduceType();
+                ((ServiceRequestContext) RequestContext.current()).negotiatedResponseMediaType();
         if (contentType != null) {
             headers.contentType(contentType);
         }

File: core/src/main/java/com/linecorp/armeria/common/metric/MeterIdPrefixFunction.java
Patch:
@@ -87,7 +87,7 @@ static MeterIdPrefixFunction ofDefault(String name) {
 
             if (log.isAvailable(RequestLogAvailability.RESPONSE_HEADERS) &&
                 log.status() != null) {
-                tags.add(Tag.of("status", String.valueOf(log.statusCode())));
+                tags.add(Tag.of("httpStatus", String.valueOf(log.statusCode())));
             }
 
             return new MeterIdPrefix(name, tags);

File: core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/HttpHealthCheckedEndpointGroupTest.java
Patch:
@@ -106,7 +106,7 @@ public void endpoints() throws Exception {
         endpointGroup.newMeterBinder("foo").bindTo(registry);
 
         await().untilAsserted(() -> {
-            assertThat(endpointGroup.endpoints()).containsExactly(
+            assertThat(endpointGroup.endpoints()).containsExactlyInAnyOrder(
                     Endpoint.of("127.0.0.1", portOne),
                     Endpoint.of("127.0.0.1", portTwo));
 

File: core/src/main/java/com/linecorp/armeria/server/annotation/Default.java
Patch:
@@ -27,7 +27,7 @@
  * Specifies the default value of an optional parameter.
  */
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.PARAMETER)
+@Target({ ElementType.PARAMETER, ElementType.FIELD, ElementType.METHOD, ElementType.CONSTRUCTOR })
 public @interface Default {
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/annotation/RequestObject.java
Patch:
@@ -28,7 +28,7 @@
  * @see RequestConverter
  */
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.PARAMETER)
+@Target({ ElementType.PARAMETER, ElementType.FIELD, ElementType.METHOD, ElementType.CONSTRUCTOR })
 public @interface RequestObject {
 
     /**

File: core/src/test/java/com/linecorp/armeria/server/AnnotatedElementNameUtilTest.java
Patch:
@@ -13,14 +13,14 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.linecorp.armeria.internal;
+package com.linecorp.armeria.server;
 
-import static com.linecorp.armeria.internal.AnnotatedHttpServiceParamUtil.toHeaderName;
+import static com.linecorp.armeria.server.AnnotatedElementNameUtil.toHeaderName;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import org.junit.Test;
 
-public class AnnotatedHttpServiceParamUtilTest {
+public class AnnotatedElementNameUtilTest {
     @Test
     public void ofHeaderName() {
         assertThat(toHeaderName("camelCase")).isEqualTo("camel-case");

File: core/src/test/java/com/linecorp/armeria/server/AnnotatedHttpServiceFactoryTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.linecorp.armeria.server;
 
-import static com.linecorp.armeria.server.AnnotatedHttpServices.collectDecorators;
+import static com.linecorp.armeria.server.AnnotatedHttpServiceFactory.collectDecorators;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import java.lang.annotation.ElementType;
@@ -32,7 +32,7 @@
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.logging.LogLevel;
-import com.linecorp.armeria.server.AnnotatedHttpServices.DecoratorAndOrder;
+import com.linecorp.armeria.server.AnnotatedHttpServiceFactory.DecoratorAndOrder;
 import com.linecorp.armeria.server.annotation.Decorator;
 import com.linecorp.armeria.server.annotation.DecoratorFactory;
 import com.linecorp.armeria.server.annotation.DecoratorFactoryFunction;
@@ -41,7 +41,7 @@
 import com.linecorp.armeria.server.annotation.decorator.RateLimitingDecorator;
 import com.linecorp.armeria.server.annotation.decorator.RateLimitingDecoratorFactoryFunction;
 
-public class AnnotatedHttpServicesTest {
+public class AnnotatedHttpServiceFactoryTest {
 
     @Test
     public void ofNoOrdering() throws NoSuchMethodException {

File: core/src/test/java/com/linecorp/armeria/server/PrefixAddingPathMappingTest.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.junit.Test;
 
-import com.linecorp.armeria.server.AnnotatedHttpServices.PrefixAddingPathMapping;
+import com.linecorp.armeria.server.AnnotatedHttpServiceFactory.PrefixAddingPathMapping;
 
 public class PrefixAddingPathMappingTest {
 

File: core/src/test/java/com/linecorp/armeria/server/TestConverters.java
Patch:
@@ -28,7 +28,7 @@
 import com.linecorp.armeria.common.RequestContext;
 import com.linecorp.armeria.server.annotation.ResponseConverterFunction;
 
-final class TestConverters {
+public final class TestConverters {
 
     public static class NaiveIntConverterFunction implements ResponseConverterFunction {
         @Override

File: zipkin/src/main/java/com/linecorp/armeria/server/tracing/HttpTracingService.java
Patch:
@@ -73,7 +73,7 @@ public HttpTracingService(Service<HttpRequest, HttpResponse> delegate, Tracing t
     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
         final TraceContextOrSamplingFlags contextOrFlags = extractor.extract(req.headers());
         final Span span = contextOrFlags.context() != null ? tracer.joinSpan(contextOrFlags.context())
-                                                           : tracer.newTrace(contextOrFlags.samplingFlags());
+                                                           : tracer.nextSpan(contextOrFlags);
         // For no-op spans, nothing special to do.
         if (span.isNoop()) {
             return delegate().serve(ctx, req);

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaChannel.java
Patch:
@@ -115,7 +115,8 @@ public <I, O> ClientCall<I, O> newCall(
                 CompressorRegistry.getDefaultInstance(),
                 DecompressorRegistry.getDefaultInstance(),
                 serializationFormat,
-                jsonMarshaller);
+                jsonMarshaller,
+                options().getOrElse(GrpcClientOptions.UNSAFE_WRAP_RESPONSE_BUFFERS, false));
     }
 
     @Override

File: benchmarks/src/jmh/java/com/linecorp/armeria/common/HttpHeadersBenchmark.java
Patch:
@@ -25,14 +25,14 @@ public class HttpHeadersBenchmark {
 
     @Benchmark
     public MediaType parseKnown() {
-        HttpHeaders headers = new DefaultHttpHeaders()
+        final HttpHeaders headers = new DefaultHttpHeaders()
                 .set(HttpHeaderNames.CONTENT_TYPE, "application/grpc+proto");
         return headers.contentType();
     }
 
     @Benchmark
     public MediaType parseUnknown() {
-        HttpHeaders headers = new DefaultHttpHeaders()
+        final HttpHeaders headers = new DefaultHttpHeaders()
                 // Single letter change to keep theoretical parsing performance the same.
                 .set(HttpHeaderNames.CONTENT_TYPE, "application/grpc+oroto");
         return headers.contentType();

File: benchmarks/src/jmh/java/com/linecorp/armeria/grpc/shared/ClientType.java
Patch:
@@ -20,5 +20,5 @@ public enum ClientType {
     // The official client for the benchmark (armeria for downstream, grpc-netty for upstream).
     NORMAL,
     // The grpc-okhttp client.
-    OKHTTP;
+    OKHTTP
 }

File: benchmarks/src/jmh/java/com/linecorp/armeria/grpc/upstream/UpstreamSimpleBenchmark.java
Patch:
@@ -64,7 +64,7 @@ public void setUp() throws Exception {
         server.start();
         channel = ManagedChannelBuilder.forAddress("127.0.0.1", port())
                                        .directExecutor()
-                                       .usePlaintext(true)
+                                       .usePlaintext()
                                        .build();
         githubApiClient = GithubServiceGrpc.newBlockingStub(channel);
         githubApiFutureClient = GithubServiceGrpc.newFutureStub(channel);

File: benchmarks/src/jmh/java/com/linecorp/armeria/shared/AsyncCounters.java
Patch:
@@ -35,9 +35,9 @@
 @AuxCounters
 @State(Scope.Thread)
 public class AsyncCounters {
-    private AtomicLong numSuccesses = new AtomicLong();
-    private AtomicLong numFailures = new AtomicLong();
-    private AtomicLong currentRequests = new AtomicLong();
+    private final AtomicLong numSuccesses = new AtomicLong();
+    private final AtomicLong numFailures = new AtomicLong();
+    private final AtomicLong currentRequests = new AtomicLong();
 
     private volatile boolean waiting;
 

File: benchmarks/src/jmh/java/com/linecorp/armeria/shared/EventLoopJmhExecutor.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.concurrent.Executor;
 
 import io.netty.channel.DefaultEventLoop;
+import io.netty.channel.DefaultEventLoopGroup;
 import io.netty.channel.EventLoop;
 import io.netty.channel.MultithreadEventLoopGroup;
 import io.netty.util.concurrent.DefaultThreadFactory;
@@ -30,7 +31,7 @@
  * optimized for running inside an event loop. Without this, it would be necessary to switch between threads in
  * the benchmark which adds significant noise to the benchmark.
  *
- * <p>This class is essentially the same as {@link io.netty.channel.DefaultEventLoopGroup} except it stores
+ * <p>This class is essentially the same as {@link DefaultEventLoopGroup} except it stores
  * a reference to the {@link EventLoop} in a {@link FastThreadLocal} to allow benchmark code to reference it
  * using {@link EventLoopJmhExecutor#currentEventLoop()}.
  *
@@ -57,7 +58,7 @@ public EventLoopJmhExecutor(int numThreads, String threadPrefix) {
 
     @Override
     protected EventLoop newChild(Executor executor, Object... args) throws Exception {
-        EventLoop eventLoop = new DefaultEventLoop(this, executor);
+        final EventLoop eventLoop = new DefaultEventLoop(this, executor);
         eventLoop.submit(() -> CURRENT_EVENT_LOOP.set(eventLoop)).syncUninterruptibly();
         return eventLoop;
     }

File: core/src/main/java/com/linecorp/armeria/client/AbstractClientOptionsBuilder.java
Patch:
@@ -234,7 +234,7 @@ public B setHttpHeaders(Headers<AsciiString, String, ?> httpHeaders) {
     ClientOptions buildOptions() {
         final Collection<ClientOptionValue<?>> optVals = options.values();
         final int numOpts = optVals.size();
-        ClientOptionValue<?>[] optValArray = optVals.toArray(new ClientOptionValue[numOpts + 2]);
+        final ClientOptionValue<?>[] optValArray = optVals.toArray(new ClientOptionValue[numOpts + 2]);
         optValArray[numOpts] = ClientOption.DECORATION.newValue(decoration.build());
         optValArray[numOpts + 1] = ClientOption.HTTP_HEADERS.newValue(httpHeaders);
 

File: core/src/main/java/com/linecorp/armeria/client/ClientBuilder.java
Patch:
@@ -82,7 +82,6 @@ public ClientBuilder factory(ClientFactory factory) {
      *                                  {@link #ClientBuilder(String)} or the specified {@code clientType} is
      *                                  unsupported for the scheme
      */
-    @SuppressWarnings("unchecked")
     public <T> T build(Class<T> clientType) {
         requireNonNull(clientType, "clientType");
         return factory.newClient(uri, clientType, buildOptions());

File: core/src/main/java/com/linecorp/armeria/client/ClientDecoration.java
Patch:
@@ -95,7 +95,7 @@ static final class Entry<I extends Request, O extends Response> {
             this.responseType = responseType;
 
             @SuppressWarnings("unchecked")
-            Function<Client<I, O>, Client<I, O>> castDecorator =
+            final Function<Client<I, O>, Client<I, O>> castDecorator =
                     (Function<Client<I, O>, Client<I, O>>) decorator;
             this.decorator = castDecorator;
         }

File: core/src/main/java/com/linecorp/armeria/client/Clients.java
Patch:
@@ -254,7 +254,7 @@ private static ClientBuilderParams builderParams(Object client) {
             }
         }
 
-        Optional<ClientBuilderParams> params = ClientFactory.DEFAULT.clientBuilderParams(client);
+        final Optional<ClientBuilderParams> params = ClientFactory.DEFAULT.clientBuilderParams(client);
         if (params.isPresent()) {
             return params.get();
         }

File: core/src/main/java/com/linecorp/armeria/client/DefaultClientFactory.java
Patch:
@@ -121,7 +121,7 @@ public <T> T newClient(URI uri, Class<T> clientType, ClientOptions options) {
     @Override
     public <T> Optional<ClientBuilderParams> clientBuilderParams(T client) {
         for (ClientFactory factory : clientFactories.values()) {
-            Optional<ClientBuilderParams> params = factory.clientBuilderParams(client);
+            final Optional<ClientBuilderParams> params = factory.clientBuilderParams(client);
             if (params.isPresent()) {
                 return params;
             }

File: core/src/main/java/com/linecorp/armeria/client/EventLoopScheduler.java
Patch:
@@ -83,7 +83,7 @@ private void cleanup() {
             return;
         }
 
-        for (Iterator<State> i = map.values().iterator(); i.hasNext();) {
+        for (final Iterator<State> i = map.values().iterator(); i.hasNext();) {
             final State state = i.next();
             final boolean remove;
 

File: core/src/main/java/com/linecorp/armeria/client/SessionProtocolNegotiationCache.java
Patch:
@@ -49,7 +49,7 @@ public final class SessionProtocolNegotiationCache {
         protected boolean removeEldestEntry(Entry<String, CacheEntry> eldest) {
             final boolean remove = super.removeEldestEntry(eldest);
             if (remove) {
-                logger.debug("Evicted: '{}' does not support ", eldest.getKey(), eldest.getValue());
+                logger.debug("Evicted: '{}' does not support {}", eldest.getKey(), eldest.getValue());
             }
 
             return remove;
@@ -167,7 +167,7 @@ private static long convertToWriteLock(long stamp) {
     private static final class CacheEntry {
         private volatile Set<SessionProtocol> unsupported = ImmutableSet.of();
 
-        CacheEntry(String key) {
+        CacheEntry(@SuppressWarnings("unused") String key) {
             // Key is unused. It's just here to simplify the Map.computeIfAbsent() call in getOrCreate().
         }
 

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/EventCount.java
Patch:
@@ -106,7 +106,7 @@ public boolean equals(Object o) {
         if (!(o instanceof EventCount)) {
             return false;
         }
-        EventCount that = (EventCount) o;
+        final EventCount that = (EventCount) o;
         return success == that.success && failure == that.failure;
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/encoding/HttpDecodingClient.java
Patch:
@@ -84,7 +84,7 @@ public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Ex
             return delegate().execute(ctx, req);
         }
         req.headers().set(HttpHeaderNames.ACCEPT_ENCODING, acceptEncodingHeader);
-        HttpResponse res = delegate().execute(ctx, req);
+        final HttpResponse res = delegate().execute(ctx, req);
         return new HttpDecodedResponse(res, decoderFactories);
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/encoding/ZlibStreamDecoder.java
Patch:
@@ -61,9 +61,9 @@ public HttpData finish() {
 
     // Mostly copied from netty's HttpContentDecoder.
     private byte[] fetchDecoderOutput() {
-        CompositeByteBuf decoded = Unpooled.compositeBuffer();
+        final CompositeByteBuf decoded = Unpooled.compositeBuffer();
         for (;;) {
-            ByteBuf buf = decoder.readInbound();
+            final ByteBuf buf = decoder.readInbound();
             if (buf == null) {
                 break;
             }
@@ -73,7 +73,7 @@ private byte[] fetchDecoderOutput() {
             }
             decoded.addComponent(true, buf);
         }
-        byte[] ret = ByteBufUtil.getBytes(decoded);
+        final byte[] ret = ByteBufUtil.getBytes(decoded);
         decoded.release();
         return ret;
     }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/OrElseEndpointGroup.java
Patch:
@@ -36,7 +36,7 @@ final class OrElseEndpointGroup extends AbstractListenable<List<Endpoint>> imple
 
     @Override
     public List<Endpoint> endpoints() {
-        List<Endpoint> endpoints = first.endpoints();
+        final List<Endpoint> endpoints = first.endpoints();
         if (!endpoints.isEmpty()) {
             return endpoints;
         }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/RoundRobinStrategy.java
Patch:
@@ -27,7 +27,6 @@
 final class RoundRobinStrategy implements EndpointSelectionStrategy {
 
     @Override
-    @SuppressWarnings("unchecked")
     public EndpointSelector newSelector(EndpointGroup endpointGroup) {
         return new RoundRobinSelector(endpointGroup);
     }
@@ -59,8 +58,8 @@ public EndpointSelectionStrategy strategy() {
         @Override
         public Endpoint select(ClientRequestContext ctx) {
 
-            List<Endpoint> endpoints = endpointGroup.endpoints();
-            int currentSequence = sequence.getAndIncrement();
+            final List<Endpoint> endpoints = endpointGroup.endpoints();
+            final int currentSequence = sequence.getAndIncrement();
 
             if (endpoints.isEmpty()) {
                 throw new EndpointGroupException(endpointGroup + " is empty");

File: core/src/main/java/com/linecorp/armeria/client/endpoint/StaticEndpointGroup.java
Patch:
@@ -56,7 +56,7 @@ public List<Endpoint> endpoints() {
 
     @Override
     public String toString() {
-        StringBuilder buf = new StringBuilder();
+        final StringBuilder buf = new StringBuilder();
         buf.append("StaticEndpointGroup(");
         for (Endpoint endpoint : endpoints) {
             buf.append(endpoint).append(',');

File: core/src/main/java/com/linecorp/armeria/client/endpoint/StickyEndpointSelectionStrategy.java
Patch:
@@ -98,8 +98,8 @@ public Endpoint select(ClientRequestContext ctx) {
                 throw new EndpointGroupException(endpointGroup + " is empty");
             }
 
-            long key = requestContextHasher.applyAsLong(ctx);
-            int nearest = Hashing.consistentHash(key, endpoints.size());
+            final long key = requestContextHasher.applyAsLong(ctx);
+            final int nearest = Hashing.consistentHash(key, endpoints.size());
             return endpoints.get(nearest);
         }
     }

File: core/src/main/java/com/linecorp/armeria/client/limit/ConcurrencyLimitingClient.java
Patch:
@@ -228,7 +228,7 @@ boolean isRun() {
         public void run() {
             isRun = true;
 
-            ScheduledFuture<?> timeoutFuture = get();
+            final ScheduledFuture<?> timeoutFuture = get();
             if (timeoutFuture != null) {
                 if (timeoutFuture.isDone() || !timeoutFuture.cancel(false)) {
                     // Timeout task ran already or is determined to run.

File: core/src/main/java/com/linecorp/armeria/client/logging/KeyedChannelPoolLoggingHandler.java
Patch:
@@ -83,7 +83,7 @@ void collect(EventType eventType) {
 
         @SuppressWarnings("checkstyle:fallthrough")
         StringBuilder status(EventType eventType, StringBuilder buf) {
-            long currentNanos = ticker.read();
+            final long currentNanos = ticker.read();
             switch (eventType) {
             case ACQUIRED:
                 buf.append("was idle for ");

File: core/src/main/java/com/linecorp/armeria/client/metric/MetricCollectingClient.java
Patch:
@@ -64,7 +64,6 @@ Function<Client<I, O>, MetricCollectingClient<I, O>> newDecorator(
 
     private final MeterIdPrefixFunction meterIdPrefixFunction;
 
-    @SuppressWarnings("unchecked")
     MetricCollectingClient(Client<I, O> delegate, MeterIdPrefixFunction meterIdPrefixFunction) {
         super(delegate);
         this.meterIdPrefixFunction = requireNonNull(meterIdPrefixFunction, "meterIdPrefixFunction");

File: core/src/main/java/com/linecorp/armeria/client/retry/Backoff.java
Patch:
@@ -101,8 +101,7 @@ static Backoff random(long minDelayMillis, long maxDelayMillis, Supplier<Random>
      * @param specification the specification used to create the {@link Backoff}
      */
     static Backoff of(String specification) {
-        BackoffSpec backoffSpec = BackoffSpec.parse(specification);
-        return backoffSpec.build();
+        return BackoffSpec.parse(specification).build();
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/client/retry/ExponentialBackoff.java
Patch:
@@ -46,7 +46,7 @@ protected long doNextDelayMillis(int numAttemptsSoFar) {
     }
 
     private static long saturatedMultiply(long left, double right) {
-        double result = left * right;
+        final double result = left * right;
         return result >= Long.MAX_VALUE ? Long.MAX_VALUE : (long) result;
     }
 

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java
Patch:
@@ -106,6 +106,7 @@ protected RetryStrategy<I, O> retryStrategy() {
      *
      * @return {@code true} if the response timeout is set, {@code false} if it can't be set due to the timeout
      */
+    @SuppressWarnings("MethodMayBeStatic") // Intentionally left non-static for better user experience.
     protected final boolean setResponseTimeout(ClientRequestContext ctx) {
         requireNonNull(ctx, "ctx");
         final long responseTimeoutMillis = ctx.attr(STATE).get().responseTimeoutMillis();
@@ -141,6 +142,7 @@ protected final long getNextDelay(ClientRequestContext ctx, Backoff backoff) {
      *                              {@link Backoff#nextDelayMillis(int)} returns -1
      * @throws ResponseTimeoutException if the remaining response timeout is equal to or less than 0
      */
+    @SuppressWarnings("MethodMayBeStatic") // Intentionally left non-static for better user experience.
     protected final long getNextDelay(ClientRequestContext ctx, Backoff backoff, long millisAfterFromServer) {
         requireNonNull(ctx, "ctx");
         requireNonNull(backoff, "backoff");

File: core/src/main/java/com/linecorp/armeria/common/HttpMessageAggregator.java
Patch:
@@ -124,7 +124,7 @@ public void accept(Void unused, Throwable cause) {
                 for (int i = 0; i < contentList.size(); i++) {
                     final HttpData data = contentList.set(i, null);
                     if (data instanceof ByteBufHolder) {
-                        ByteBufHolder byteBufData = (ByteBufHolder) data;
+                        final ByteBufHolder byteBufData = (ByteBufHolder) data;
                         try {
                             merged.writeBytes(byteBufData.content());
                         } finally {

File: core/src/main/java/com/linecorp/armeria/common/HttpResponse.java
Patch:
@@ -90,7 +90,7 @@ static HttpResponse of(int statusCode) {
     static HttpResponse of(HttpStatus status) {
         requireNonNull(status, "status");
         if (status.codeClass() == HttpStatusClass.INFORMATIONAL) {
-            HttpResponseWriter res = streaming();
+            final HttpResponseWriter res = streaming();
             res.write(HttpHeaders.of(status));
             return res;
         } else if (isContentAlwaysEmpty(status)) {

File: core/src/main/java/com/linecorp/armeria/common/HttpStatus.java
Patch:
@@ -448,7 +448,7 @@ public boolean equals(@Nullable Object o) {
      */
     @Override
     public int compareTo(HttpStatus o) {
-        return code() - o.code();
+        return Integer.compare(code(), o.code());
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/common/MediaTypeSet.java
Patch:
@@ -55,6 +55,7 @@
 public final class MediaTypeSet extends AbstractSet<MediaType> {
 
     private static final String Q = "q";
+    private static final MediaType[] EMPTY_MEDIA_TYPES = new MediaType[0];
 
     private final MediaType[] mediaTypes;
 
@@ -83,7 +84,7 @@ public MediaTypeSet(Iterable<MediaType> mediaTypes) {
             mediaTypesCopy.add(mediaType);
         }
 
-        this.mediaTypes = mediaTypesCopy.toArray(new MediaType[mediaTypesCopy.size()]);
+        this.mediaTypes = mediaTypesCopy.toArray(EMPTY_MEDIA_TYPES);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/common/StringValueConverter.java
Patch:
@@ -53,6 +53,7 @@ private StringValueConverter() {}
 
     @Nullable
     @Override
+    @SuppressWarnings("UseOfObsoleteDateTimeApi")
     public String convertObject(@Nullable Object value) {
         if (value == null) {
             return null;
@@ -150,6 +151,7 @@ public String convertTimeMillis(long value) {
 
     @Override
     public long convertToTimeMillis(String value) {
+        @SuppressWarnings("UseOfObsoleteDateTimeApi")
         final Date date = DateFormatter.parseHttpDate(value);
         if (date == null) {
             throw new IllegalArgumentException("not a date: " + value);

File: core/src/main/java/com/linecorp/armeria/common/logging/RequestLogAvailabilityException.java
Patch:
@@ -26,9 +26,7 @@ public class RequestLogAvailabilityException extends RuntimeException {
     /**
      * Creates a new instance.
      */
-    public RequestLogAvailabilityException() {
-        super();
-    }
+    public RequestLogAvailabilityException() {}
 
     /**
      * Creates a new instance with the specified {@code message}.

File: core/src/main/java/com/linecorp/armeria/common/logging/RequestLogAvailabilitySet.java
Patch:
@@ -37,6 +37,8 @@
  */
 final class RequestLogAvailabilitySet extends AbstractSet<RequestLogAvailability> {
 
+    private static final RequestLogAvailability[] EMPTY_AVAILABILITIES = new RequestLogAvailability[0];
+
     private static final Int2ObjectMap<RequestLogAvailabilitySet> map = new Int2ObjectOpenHashMap<>();
 
     static {
@@ -77,7 +79,7 @@ private RequestLogAvailabilitySet(int flags) {
                 values.add(v);
             }
         }
-        this.values = values.toArray(new RequestLogAvailability[values.size()]);
+        this.values = values.toArray(EMPTY_AVAILABILITIES);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/common/metric/MeterIdPrefix.java
Patch:
@@ -78,7 +78,7 @@ private static ImmutableList<Tag> zipAndSort(String... tags) {
             return ImmutableList.of();
         }
 
-        List<Tag> result = new ArrayList<>(tags.length / 2);
+        final List<Tag> result = new ArrayList<>(tags.length / 2);
         zip(result, tags);
         return sort(result);
     }

File: core/src/main/java/com/linecorp/armeria/common/stream/DeferredStreamMessage.java
Patch:
@@ -44,12 +44,12 @@ public class DeferredStreamMessage<T> extends AbstractStreamMessage<T> {
             subscriptionUpdater = AtomicReferenceFieldUpdater.newUpdater(
             DeferredStreamMessage.class, SubscriptionImpl.class, "subscription");
 
-    @SuppressWarnings({ "AtomicFieldUpdaterIssues", "rawtypes" })
+    @SuppressWarnings("rawtypes")
     private static final AtomicReferenceFieldUpdater<DeferredStreamMessage, StreamMessage> delegateUpdater =
             AtomicReferenceFieldUpdater.newUpdater(
                     DeferredStreamMessage.class, StreamMessage.class, "delegate");
 
-    @SuppressWarnings({ "AtomicFieldUpdaterIssues", "rawtypes" })
+    @SuppressWarnings("rawtypes")
     private static final AtomicIntegerFieldUpdater<DeferredStreamMessage>
             subscribedToDelegateUpdater =
             AtomicIntegerFieldUpdater.newUpdater(
@@ -79,6 +79,7 @@ public class DeferredStreamMessage<T> extends AbstractStreamMessage<T> {
     // Only accessed from subscription's executor.
     private long pendingDemand;
 
+    @SuppressWarnings("unused")
     private volatile int abortPending; // 0 - false, 1 - true
 
     // Only accessed from subscription's executor.

File: core/src/main/java/com/linecorp/armeria/common/stream/RegularFixedStreamMessage.java
Patch:
@@ -40,7 +40,7 @@ protected RegularFixedStreamMessage(T[] objs) {
     @Override
     final void cleanupObjects() {
         while (fulfilled < objs.length) {
-            T obj = objs[fulfilled];
+            final T obj = objs[fulfilled];
             objs[fulfilled++] = null;
             try {
                 onRemoval(obj);

File: core/src/main/java/com/linecorp/armeria/common/util/AbstractOption.java
Patch:
@@ -25,7 +25,7 @@
  * @see AbstractOptionValue
  * @see AbstractOptions
  */
-@SuppressWarnings({ "rawtypes", "UnusedDeclaration" })
+@SuppressWarnings("rawtypes")
 public abstract class AbstractOption<T> extends AbstractConstant {
 
     /**

File: core/src/main/java/com/linecorp/armeria/common/util/AbstractOptions.java
Patch:
@@ -138,8 +138,8 @@ protected AbstractOptions(AbstractOptions baseOptions, AbstractOptions options)
     @SuppressWarnings("unchecked")
     protected final <O extends AbstractOption<V>, V> Optional<V> get0(AbstractOption<V> option) {
         @SuppressWarnings("rawtypes")
-        AbstractOptionValue<O, V> optionValue =
-                (AbstractOptionValue<O, V>) (AbstractOptionValue) valueMap.get(option);
+        final AbstractOptionValue<O, V> optionValue =
+                (AbstractOptionValue<O, V>) valueMap.get(option);
         return optionValue == null ? Optional.empty() : Optional.of(optionValue.value());
     }
 
@@ -150,7 +150,6 @@ protected final <O extends AbstractOption<V>, V> Optional<V> get0(AbstractOption
      * @param <V> the type of the value
      * @return the value of the specified {@code option}. {@code defaultValue} if there's no such option.
      */
-    @SuppressWarnings("unchecked")
     protected final <O extends AbstractOption<V>, V> V getOrElse0(O option, V defaultValue) {
         return get0(option).orElse(defaultValue);
     }

File: core/src/main/java/com/linecorp/armeria/internal/AnnotatedHttpServiceParamUtil.java
Patch:
@@ -100,7 +100,7 @@ public static HttpParameters httpParametersOf(ServiceRequestContext ctx,
         } catch (Exception e) {
             // If we failed to decode the query string, we ignore the exception raised here.
             // A missing parameter might be checked when invoking the annotated method.
-            logger.debug("Failed to decode query string: {}", e);
+            logger.debug("Failed to decode query string:", e);
             return EMPTY_PARAMETERS;
         }
     }

File: core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java
Patch:
@@ -614,7 +614,7 @@ private static String convertHeaderValue(AsciiString name, CharSequence value) {
             return value.toString();
         }
         if (HEADER_VALUE_CACHE != null && CACHED_HEADERS.contains(name)) {
-            String converted = HEADER_VALUE_CACHE.get((AsciiString) value);
+            final String converted = HEADER_VALUE_CACHE.get((AsciiString) value);
             assert converted != null; // loader does not return null.
             return converted;
         }

File: core/src/main/java/com/linecorp/armeria/internal/ConnectionLimitingHandler.java
Patch:
@@ -57,11 +57,10 @@ public ConnectionLimitingHandler(int maxNumConnections) {
     }
 
     @Override
-    @SuppressWarnings("unchecked")
     public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
         final Channel child = (Channel) msg;
 
-        int conn = numConnections.incrementAndGet();
+        final int conn = numConnections.incrementAndGet();
         if (conn > 0 && conn <= maxNumConnections) {
             childChannels.add(child);
             child.closeFuture().addListener(future -> {
@@ -87,7 +86,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
     private void writeNumDroppedConnectionsLog() {
         loggingScheduled.set(false);
 
-        long dropped = numDroppedConnections.sumThenReset();
+        final long dropped = numDroppedConnections.sumThenReset();
         if (dropped > 0) {
             logger.warn("Dropped {} connection(s) to limit the number of open connections to {}",
                         dropped, maxNumConnections);

File: core/src/main/java/com/linecorp/armeria/internal/DefaultAttributeMap.java
Patch:
@@ -72,7 +72,6 @@ public class DefaultAttributeMap implements AttributeMap {
 
     // Initialize lazily to reduce memory consumption; updated by AtomicReferenceFieldUpdater above.
     @VisibleForTesting
-    @SuppressWarnings("UnusedDeclaration")
     volatile AtomicReferenceArray<DefaultAttribute<?>> attributes;
 
     @SuppressWarnings("unchecked")

File: core/src/main/java/com/linecorp/armeria/internal/PathAndQuery.java
Patch:
@@ -202,6 +202,7 @@ private static PathAndQuery splitPathAndQuery(final String pathAndQuery) {
         return new PathAndQuery(CONSECUTIVE_SLASHES_PATTERN.matcher(path).replaceAll("/"), query);
     }
 
+    @SuppressWarnings("DuplicateBooleanBranch")
     private static boolean isValidEncoding(@Nullable String value) {
         if (value == null) {
             return true;

File: core/src/main/java/com/linecorp/armeria/internal/TransportType.java
Patch:
@@ -77,7 +77,7 @@ public Class<? extends ServerChannel> serverChannelClass() {
      */
     public EventLoopGroup newEventLoopGroup(int nThreads,
                                             Function<TransportType, ThreadFactory> threadFactoryFactory) {
-        ThreadFactory threadFactory = threadFactoryFactory.apply(this);
+        final ThreadFactory threadFactory = threadFactoryFactory.apply(this);
         return eventLoopGroupConstructor.apply(nThreads, threadFactory);
     }
 

File: core/src/main/java/com/linecorp/armeria/internal/metric/CaffeineMetricSupport.java
Patch:
@@ -141,7 +141,7 @@ private ToDoubleFunction<CaffeineMetrics> func(@Nullable Type type,
             return value -> {
                 double sum = 0;
                 synchronized (cacheRefs) {
-                    for (Iterator<CacheReference> i = cacheRefs.iterator(); i.hasNext();) {
+                    for (final Iterator<CacheReference> i = cacheRefs.iterator(); i.hasNext();) {
                         final CacheReference ref = i.next();
                         final boolean garbageCollected = ref.updateCacheStats();
                         if (!garbageCollected) {

File: core/src/main/java/com/linecorp/armeria/internal/metric/RequestMetricSupport.java
Patch:
@@ -62,7 +62,7 @@ private static void onRequest(RequestLog log, MeterIdPrefixFunction meterIdPrefi
         final MeterIdPrefix idPrefixActive = new MeterIdPrefix(idPrefix.name("activeRequests"),
                                                                idPrefix.tags());
 
-        ActiveRequestMetrics activeRequestMetrics = MicrometerUtil.register(
+        final ActiveRequestMetrics activeRequestMetrics = MicrometerUtil.register(
                 registry, idPrefixActive, ActiveRequestMetrics.class,
                 (reg, prefix) ->
                         reg.gauge(prefix.name(), prefix.tags(),

File: core/src/main/java/com/linecorp/armeria/server/AnnotatedHttpServices.java
Patch:
@@ -353,7 +353,6 @@ static List<DecoratorAndOrder> collectDecorators(Class<?> clazz, Method method)
      * Adds decorators to the specified {@code list}. Decorators which are annotated with {@link Decorator}
      * and user-defined decorators will be collected.
      */
-    @SuppressWarnings("unchecked")
     private static void collectDecorators(List<DecoratorAndOrder> list, Annotation[] annotations) {
         if (annotations.length == 0) {
             return;
@@ -419,7 +418,6 @@ private static DecoratorAndOrder userDefinedDecorator(Annotation annotation) {
         // In case of user-defined decorator, we need to create a new decorator from its factory.
         @SuppressWarnings("unchecked")
         final DecoratorFactoryFunction<Annotation> factory = getInstance(d, DecoratorFactoryFunction.class);
-        assert factory != null;
 
         // If the annotation has "order" attribute, we can use it when sorting decorators.
         int order = 0;

File: core/src/main/java/com/linecorp/armeria/server/DefaultPathMapping.java
Patch:
@@ -44,6 +44,8 @@ final class DefaultPathMapping extends AbstractPathMapping {
 
     private static final Pattern VALID_PATTERN = Pattern.compile("(/[^/{}:]+|/:[^/{}]+|/\\{[^/{}]+})+/?");
 
+    private static final String[] EMPTY_NAMES = new String[0];
+
     /**
      * The original path pattern specified in the constructor.
      */
@@ -124,7 +126,7 @@ final class DefaultPathMapping extends AbstractPathMapping {
         this.pathPattern = pathPattern;
         pattern = Pattern.compile(patternJoiner.toString());
         skeleton = Optional.of(skeletonJoiner.toString());
-        paramNameArray = paramNames.toArray(new String[paramNames.size()]);
+        paramNameArray = paramNames.toArray(EMPTY_NAMES);
         this.paramNames = ImmutableSet.copyOf(paramNames);
 
         loggerName = loggerName(pathPattern);

File: core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java
Patch:
@@ -335,8 +335,8 @@ private void write0(HttpObject o, boolean endOfStream) {
 
     private State setDone() {
         cancelTimeout();
-        final State oldState = this.state;
-        this.state = State.DONE;
+        final State oldState = state;
+        state = State.DONE;
         return oldState;
     }
 

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostBuilder.java
Patch:
@@ -35,9 +35,7 @@ public class VirtualHostBuilder extends AbstractVirtualHostBuilder<VirtualHostBu
     /**
      * Creates a new {@link VirtualHostBuilder} whose hostname pattern is {@code "*"} (match-all).
      */
-    public VirtualHostBuilder() {
-        super();
-    }
+    public VirtualHostBuilder() {}
 
     /**
      * Creates a new {@link VirtualHostBuilder} with the specified hostname pattern.

File: core/src/main/java/com/linecorp/armeria/server/annotation/DefaultExceptionHandler.java
Patch:
@@ -29,7 +29,7 @@
  * {@code 500 Internal Server Error} status code.
  */
 final class DefaultExceptionHandler implements ExceptionHandlerFunction {
-    private static Logger logger = LoggerFactory.getLogger(DefaultExceptionHandler.class);
+    private static final Logger logger = LoggerFactory.getLogger(DefaultExceptionHandler.class);
 
     @Override
     public HttpResponse handleException(RequestContext ctx, HttpRequest req, Throwable cause) {

File: core/src/main/java/com/linecorp/armeria/server/annotation/JacksonRequestConverterFunction.java
Patch:
@@ -22,6 +22,8 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
+import javax.annotation.Nullable;
+
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.ObjectReader;
@@ -59,6 +61,7 @@ public JacksonRequestConverterFunction(ObjectMapper mapper) {
      * Converts the specified {@link AggregatedHttpMessage} to an object of {@code expectedResultType}.
      */
     @Override
+    @Nullable
     public Object convertRequest(ServiceRequestContext ctx, AggregatedHttpMessage request,
                                  Class<?> expectedResultType) throws Exception {
 

File: core/src/main/java/com/linecorp/armeria/server/annotation/RequestConverterFunction.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.linecorp.armeria.server.annotation;
 
+import javax.annotation.Nullable;
+
 import com.linecorp.armeria.common.AggregatedHttpMessage;
 import com.linecorp.armeria.internal.FallthroughException;
 import com.linecorp.armeria.server.ServiceRequestContext;
@@ -35,6 +37,7 @@ public interface RequestConverterFunction {
      * Calls {@link RequestConverterFunction#fallthrough()} or throws a {@link FallthroughException} if
      * this converter cannot convert the {@code request} to an object.
      */
+    @Nullable
     Object convertRequest(ServiceRequestContext ctx, AggregatedHttpMessage request,
                           Class<?> expectedResultType) throws Exception;
 

File: core/src/main/java/com/linecorp/armeria/server/auth/BasicToken.java
Patch:
@@ -58,7 +58,7 @@ public boolean equals(Object o) {
         if (o == null || getClass() != o.getClass()) {
             return false;
         }
-        BasicToken that = (BasicToken) o;
+        final BasicToken that = (BasicToken) o;
         return username.equals(that.username()) && password.equals(that.password());
     }
 

File: core/src/main/java/com/linecorp/armeria/server/auth/HttpAuthServiceBuilder.java
Patch:
@@ -110,7 +110,7 @@ public <T> HttpAuthServiceBuilder addTokenAuthorizer(
         requireNonNull(tokenExtractor, "tokenExtractor");
         requireNonNull(authorizer, "authorizer");
         final Authorizer<HttpRequest> requestAuthorizer = (ctx, req) -> {
-            T token = tokenExtractor.apply(req.headers());
+            final T token = tokenExtractor.apply(req.headers());
             if (token == null) {
                 return CompletableFuture.completedFuture(false);
             }

File: core/src/main/java/com/linecorp/armeria/server/auth/OAuth2Token.java
Patch:
@@ -48,7 +48,7 @@ public boolean equals(Object o) {
         if (o == null || getClass() != o.getClass()) {
             return false;
         }
-        OAuth2Token that = (OAuth2Token) o;
+        final OAuth2Token that = (OAuth2Token) o;
         return accessToken.equals(that.accessToken);
     }
 

File: core/src/main/java/com/linecorp/armeria/server/cors/CorsService.java
Patch:
@@ -127,7 +127,7 @@ private static boolean isCorsPreflightRequest(final HttpRequest request) {
      * @param req the decoded HTTP request
      */
     private HttpResponse handleCorsPreflight(HttpRequest req) {
-        HttpHeaders headers = HttpHeaders.of(HttpStatus.OK);
+        final HttpHeaders headers = HttpHeaders.of(HttpStatus.OK);
         if (setCorsOrigin(req, headers)) {
             setCorsAllowMethods(headers);
             setCorsAllowHeaders(headers);
@@ -265,8 +265,8 @@ private void setCorsExposeHeaders(final HttpHeaders headers) {
     }
 
     private void setCorsAllowMethods(final HttpHeaders headers) {
-        String methods = config.allowedRequestMethods()
-                               .stream().map(HttpMethod::name).collect(Collectors.joining(DELIMITER));
+        final String methods = config.allowedRequestMethods()
+                                     .stream().map(HttpMethod::name).collect(Collectors.joining(DELIMITER));
         headers.set(HttpHeaderNames.ACCESS_CONTROL_ALLOW_METHODS, methods);
     }
 

File: core/src/main/java/com/linecorp/armeria/server/docs/DocServiceBuilder.java
Patch:
@@ -290,7 +290,7 @@ private static String[] guessAndSerializeExampleRequest(Object exampleRequest) {
             guessed = true;
             final String s = serviceName.get();
             final String f = methodName.get();
-            Optional<String> serialized = plugin.serializeExampleRequest(s, f, exampleRequest);
+            final Optional<String> serialized = plugin.serializeExampleRequest(s, f, exampleRequest);
             if (serialized.isPresent()) {
                 return new String[] { s, f, serialized.get() };
             }

File: core/src/main/java/com/linecorp/armeria/server/docs/DocStringExtractor.java
Patch:
@@ -71,7 +71,7 @@ private Map<String, String> getAllDocStrings0(ClassLoader classLoader) {
         if (configuration.getUrls() == null || configuration.getUrls().isEmpty()) {
             return Collections.emptyMap();
         }
-        Map<String, byte[]> files = new Reflections(configuration)
+        final Map<String, byte[]> files = new Reflections(configuration)
                 .getResources(this::acceptFile).stream()
                 .map(f -> {
                     try {

File: core/src/main/java/com/linecorp/armeria/server/encoding/HttpEncoders.java
Patch:
@@ -58,6 +58,7 @@ static DeflaterOutputStream getEncodingOutputStream(HttpEncodingType encodingTyp
 
     // Copied from netty's HttpContentCompressor.
     @Nullable
+    @SuppressWarnings("FloatingPointEquality")
     private static HttpEncodingType determineEncoding(String acceptEncoding) {
         float starQ = -1.0f;
         float gzipQ = -1.0f;

File: core/src/main/java/com/linecorp/armeria/server/encoding/HttpEncodingService.java
Patch:
@@ -78,8 +78,8 @@ public HttpEncodingService(Service<HttpRequest, HttpResponse> delegate,
 
     @Override
     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
-        HttpEncodingType encodingType = HttpEncoders.getWrapperForRequest(req);
-        HttpResponse delegateResponse = delegate().serve(ctx, req);
+        final HttpEncodingType encodingType = HttpEncoders.getWrapperForRequest(req);
+        final HttpResponse delegateResponse = delegate().serve(ctx, req);
         if (encodingType == null) {
             return delegateResponse;
         }

File: core/src/main/java/com/linecorp/armeria/server/encoding/HttpEncodingType.java
Patch:
@@ -21,5 +21,5 @@
  */
 enum HttpEncodingType {
     GZIP,
-    DEFLATE;
+    DEFLATE
 }

File: core/src/main/java/com/linecorp/armeria/server/logging/AccessLogType.java
Patch:
@@ -111,7 +111,7 @@ enum AccessLogType {
     private static final Map<Character, AccessLogType> tokenToEnum;
 
     static {
-        ImmutableMap.Builder<Character, AccessLogType> builder = ImmutableMap.builder();
+        final ImmutableMap.Builder<Character, AccessLogType> builder = ImmutableMap.builder();
         for (AccessLogType k : AccessLogType.values()) {
             builder.put(k.token, k);
         }

File: core/src/main/java/com/linecorp/armeria/server/metric/PrometheusExpositionService.java
Patch:
@@ -53,7 +53,7 @@ public PrometheusExpositionService(CollectorRegistry collectorRegistry) {
 
     @Override
     protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) throws Exception {
-        ByteArrayOutputStream stream = new ByteArrayOutputStream();
+        final ByteArrayOutputStream stream = new ByteArrayOutputStream();
         try (OutputStreamWriter writer = new OutputStreamWriter(stream)) {
             TextFormat.write004(writer, collectorRegistry.metricFamilySamples());
         }

File: core/src/test/java/com/linecorp/armeria/client/ClientOptionsTest.java
Patch:
@@ -28,12 +28,12 @@ public class ClientOptionsTest {
 
     @Test
     public void testSetHttpHeader() {
-        HttpHeaders httpHeader = HttpHeaders.of(AsciiString.of("x-user-defined"), "HEADER_VALUE");
+        final HttpHeaders httpHeader = HttpHeaders.of(AsciiString.of("x-user-defined"), "HEADER_VALUE");
 
-        ClientOptions options = ClientOptions.of(ClientOption.HTTP_HEADERS.newValue(httpHeader));
+        final ClientOptions options = ClientOptions.of(ClientOption.HTTP_HEADERS.newValue(httpHeader));
         assertThat(options.get(ClientOption.HTTP_HEADERS)).contains(httpHeader);
 
-        ClientOptions options2 = ClientOptions.DEFAULT;
+        final ClientOptions options2 = ClientOptions.DEFAULT;
         assertThat(options2.get(ClientOption.HTTP_HEADERS)).contains(HttpHeaders.EMPTY_HEADERS);
     }
 

File: core/src/test/java/com/linecorp/armeria/client/DefaultClientRequestContextTest.java
Patch:
@@ -41,7 +41,7 @@ public void deriveContext() {
         final AttributeKey<String> foo = AttributeKey.valueOf(DefaultClientRequestContextTest.class, "foo");
         originalCtx.attr(foo).set("foo");
 
-        Request newRequest = mock(Request.class);
+        final Request newRequest = mock(Request.class);
         final ClientRequestContext derivedCtx = originalCtx.newDerivedContext(newRequest);
         assertThat(derivedCtx.endpoint()).isSameAs(originalCtx.endpoint());
         assertThat(derivedCtx.sessionProtocol()).isSameAs(originalCtx.sessionProtocol());

File: core/src/test/java/com/linecorp/armeria/client/Http2ClientSettingsTest.java
Patch:
@@ -149,7 +149,7 @@ public void maxFrameSize() throws Exception {
                     .build();
 
             final HttpClient client = HttpClient.of(clientFactory, "http://127.0.0.1:" + port);
-            final CompletableFuture<AggregatedHttpMessage> future = client.get("/").aggregate();
+            client.get("/").aggregate();
 
             try (Socket s = ss.accept()) {
                 final InputStream in = s.getInputStream();
@@ -278,7 +278,7 @@ private static void send49151Bytes(BufferedOutputStream bos) throws IOException
     }
 
     private static int checkReadableForShortPeriod(InputStream in) throws Exception {
-        Future<Integer> future = EVENT_LOOP.schedule(in::available, 500, TimeUnit.MILLISECONDS);
+        final Future<Integer> future = EVENT_LOOP.schedule(in::available, 500, TimeUnit.MILLISECONDS);
         return future.get();
     }
 

File: core/src/test/java/com/linecorp/armeria/client/HttpClientSniTest.java
Patch:
@@ -130,7 +130,7 @@ private static void testMismatch(String fqdn) throws Exception {
     private static String get(String fqdn) throws Exception {
         final HttpClient client = HttpClient.of(clientFactory, "https://" + fqdn + ':' + httpsPort);
 
-        AggregatedHttpMessage response = client.get("/").aggregate().get();
+        final AggregatedHttpMessage response = client.get("/").aggregate().get();
 
         assertEquals(HttpStatus.OK, response.headers().status());
         return response.content().toString(StandardCharsets.UTF_8);

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerHttpClientTest.java
Patch:
@@ -108,12 +108,12 @@ public void testPerHostAndMethodDecorator() {
     @Test
     public void circuitBreakerIsOpenOnServerError() throws Exception {
         final FakeTicker ticker = new FakeTicker();
-        int minimumRequestThreshold = 2;
+        final int minimumRequestThreshold = 2;
         final Duration circuitOpenWindow = Duration.ofSeconds(60);
         final Duration counterSlidingWindow = Duration.ofSeconds(180);
         final Duration counterUpdateInterval = Duration.ofMillis(1);
 
-        CircuitBreaker circuitBreaker = new CircuitBreakerBuilder(remoteServiceName)
+        final CircuitBreaker circuitBreaker = new CircuitBreakerBuilder(remoteServiceName)
                 .minimumRequestThreshold(minimumRequestThreshold)
                 .circuitOpenWindow(circuitOpenWindow)
                 .counterSlidingWindow(counterSlidingWindow)

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/EventCountTest.java
Patch:
@@ -56,7 +56,7 @@ public void testInvalidArguments() {
 
     @Test
     public void testEquals() {
-        EventCount ec = new EventCount(1, 1);
+        final EventCount ec = new EventCount(1, 1);
         assertThat(ec).isEqualTo(ec);
         assertThat(new EventCount(0, 0)).isEqualTo(new EventCount(0, 0));
         assertThat(new EventCount(1, 0)).isNotEqualTo(new EventCount(0, 0));

File: core/src/test/java/com/linecorp/armeria/client/endpoint/DynamicEndpointGroupTest.java
Patch:
@@ -29,8 +29,8 @@ public class DynamicEndpointGroupTest {
 
     @Test
     public void updateEndpoints() {
-        DynamicEndpointGroup endpointGroup = new DynamicEndpointGroup();
-        AtomicInteger updateListenerCalled = new AtomicInteger(0);
+        final DynamicEndpointGroup endpointGroup = new DynamicEndpointGroup();
+        final AtomicInteger updateListenerCalled = new AtomicInteger(0);
         endpointGroup.addListener(l -> updateListenerCalled.incrementAndGet());
 
         assertThat(updateListenerCalled.get()).isEqualTo(0);

File: core/src/test/java/com/linecorp/armeria/client/endpoint/EndpointGroupTest.java
Patch:
@@ -25,9 +25,9 @@
 public class EndpointGroupTest {
     @Test
     public void orElse() throws Exception {
-        EndpointGroup emptyEndpointGroup = new StaticEndpointGroup();
-        EndpointGroup endpointGroup1 = new StaticEndpointGroup(Endpoint.of("127.0.0.1", 1234));
-        EndpointGroup endpointGroup2 = new StaticEndpointGroup(Endpoint.of("127.0.0.1", 2345));
+        final EndpointGroup emptyEndpointGroup = new StaticEndpointGroup();
+        final EndpointGroup endpointGroup1 = new StaticEndpointGroup(Endpoint.of("127.0.0.1", 1234));
+        final EndpointGroup endpointGroup2 = new StaticEndpointGroup(Endpoint.of("127.0.0.1", 2345));
 
         assertThat(emptyEndpointGroup.orElse(endpointGroup2).endpoints())
                 .isEqualTo(endpointGroup2.endpoints());

File: core/src/test/java/com/linecorp/armeria/client/retry/ExponentialBackoffTest.java
Patch:
@@ -23,7 +23,7 @@ public class ExponentialBackoffTest {
 
     @Test
     public void test() {
-        Backoff backoff = new ExponentialBackoff(10, 120, 3.0);
+        final Backoff backoff = new ExponentialBackoff(10, 120, 3.0);
         assertThat(backoff.nextDelayMillis(1)).isEqualTo(10);
         assertThat(backoff.nextDelayMillis(2)).isEqualTo(30);
         assertThat(backoff.nextDelayMillis(3)).isEqualTo(90);
@@ -32,7 +32,7 @@ public void test() {
 
     @Test
     public void testOverflow() {
-        Backoff backoff = new ExponentialBackoff(Long.MAX_VALUE / 3, Long.MAX_VALUE, 2.0);
+        final Backoff backoff = new ExponentialBackoff(Long.MAX_VALUE / 3, Long.MAX_VALUE, 2.0);
         assertThat(backoff.nextDelayMillis(1)).isEqualTo(Long.MAX_VALUE / 3);
         assertThat(backoff.nextDelayMillis(2)).isEqualTo((long) (Long.MAX_VALUE / 3 * 2.0));
         assertThat(backoff.nextDelayMillis(3)).isEqualTo(Long.MAX_VALUE);

File: core/src/test/java/com/linecorp/armeria/client/retry/RandomBackoffTest.java
Patch:
@@ -25,8 +25,8 @@
 public class RandomBackoffTest {
     @Test
     public void nextDelayMillis() throws Exception {
-        Random r = new Random(1);
-        Backoff backoff = new RandomBackoff(10, 100, () -> r);
+        final Random r = new Random(1);
+        final Backoff backoff = new RandomBackoff(10, 100, () -> r);
         assertThat(backoff.nextDelayMillis(1)).isEqualTo(18);
         assertThat(backoff.nextDelayMillis(1)).isEqualTo(93);
         assertThat(backoff.nextDelayMillis(1)).isEqualTo(12);

File: core/src/test/java/com/linecorp/armeria/common/HttpHeadersTest.java
Patch:
@@ -50,7 +50,7 @@ public void testInvalidHeaderName() throws Exception {
         assertThatThrownBy(() -> HttpHeaders.of((AsciiString) null, "value1"))
                 .isInstanceOf(IllegalArgumentException.class);
 
-        assertThatThrownBy(() -> HttpHeaders.of(AsciiString.of(""), "value1"))
+        assertThatThrownBy(() -> HttpHeaders.of(of(""), "value1"))
                 .isInstanceOf(IllegalArgumentException.class);
     }
 

File: core/src/test/java/com/linecorp/armeria/common/HttpParametersTest.java
Patch:
@@ -26,14 +26,14 @@ public class HttpParametersTest {
 
     @Test
     public void caseSensitive() {
-        HttpParameters p = HttpParameters.of();
+        final HttpParameters p = HttpParameters.of();
         p.add("abc", "abc1");
         p.add("abc", "abc2");
         p.add("ABC", "ABC");
 
         assertThat(p.size()).isEqualTo(3);
 
-        List<String> values = p.getAll("abc");
+        final List<String> values = p.getAll("abc");
         assertThat(values.size()).isEqualTo(2);
         assertThat(values.get(0)).isEqualTo("abc1");
         assertThat(values.get(1)).isEqualTo("abc2");

File: core/src/test/java/com/linecorp/armeria/common/MediaTypeSetTest.java
Patch:
@@ -128,7 +128,7 @@ public void parameterMatching() {
 
     @Test
     public void testAddRanges() {
-        List<MediaType> ranges = new ArrayList<>();
+        final List<MediaType> ranges = new ArrayList<>();
 
         // Single element without whitespaces
         MediaTypeSet.addRanges(ranges, "text/plain");

File: core/src/test/java/com/linecorp/armeria/common/RpcResponseTest.java
Patch:
@@ -53,8 +53,8 @@ public void failedFrom() {
 
     @Test
     public void successfulFromResponseFuture() {
-        CompletableFuture<RpcResponse> future = new CompletableFuture<>();
-        RpcResponse res = RpcResponse.from(future);
+        final CompletableFuture<RpcResponse> future = new CompletableFuture<>();
+        final RpcResponse res = RpcResponse.from(future);
         assertThat(res.isDone()).isFalse();
         future.complete(RpcResponse.of(RESULT));
         assertThat(res.isDone()).isTrue();

File: core/src/test/java/com/linecorp/armeria/common/stream/DefaultStreamMessageVerification.java
Patch:
@@ -68,7 +68,7 @@ private static void stream(long elements, boolean abort,
 
     @Override
     public StreamMessage<Long> createFailedPublisher() {
-        DefaultStreamMessage<Long> stream = new DefaultStreamMessage<>();
+        final DefaultStreamMessage<Long> stream = new DefaultStreamMessage<>();
         stream.subscribe(new NoopSubscriber<>());
         return stream;
     }

File: core/src/test/java/com/linecorp/armeria/common/stream/DeferredStreamMessageTest.java
Patch:
@@ -66,7 +66,7 @@ public void testEarlyAbort() {
     public void testEarlyAbortWithSubscriber() {
         final DeferredStreamMessage<Object> m = new DeferredStreamMessage<>();
         @SuppressWarnings("unchecked")
-        Subscriber<Object> subscriber = mock(Subscriber.class);
+        final Subscriber<Object> subscriber = mock(Subscriber.class);
         m.subscribe(subscriber, ImmediateEventExecutor.INSTANCE);
         m.abort();
         assertAborted(m);

File: core/src/test/java/com/linecorp/armeria/common/stream/DeferredStreamMessageVerification.java
Patch:
@@ -35,7 +35,7 @@ public StreamMessage<Long> createPublisher(long elements) {
     @Override
     public StreamMessage<Long> createFailedPublisher() {
         final DeferredStreamMessage<Long> stream = new DeferredStreamMessage<>();
-        DefaultStreamMessage<Long> delegate = new DefaultStreamMessage<>();
+        final DefaultStreamMessage<Long> delegate = new DefaultStreamMessage<>();
         delegate.subscribe(new NoopSubscriber<>());
         stream.delegate(delegate);
         return stream;

File: core/src/test/java/com/linecorp/armeria/common/stream/EventLoopStreamMessageVerification.java
Patch:
@@ -85,7 +85,7 @@ private static void stream(long elements, boolean abort,
 
     @Override
     public StreamMessage<Long> createFailedPublisher() {
-        EventLoopStreamMessage<Long> stream = new EventLoopStreamMessage<Long>(eventLoop);
+        final EventLoopStreamMessage<Long> stream = new EventLoopStreamMessage<>(eventLoop);
         stream.subscribe(new NoopSubscriber<>());
         return stream;
     }

File: core/src/test/java/com/linecorp/armeria/common/stream/FixedStreamMessageTest.java
Patch:
@@ -42,8 +42,8 @@ public FixedStreamMessageTest(int num) {
         this.num = num;
     }
 
-    @SuppressWarnings("unchecked")
     @Override
+    @SuppressWarnings({ "unchecked", "SuspiciousArrayCast" })
     <T> StreamMessage<T> newStream(List<T> inputs) {
         return StreamMessage.of((T[]) inputs.toArray());
     }

File: core/src/test/java/com/linecorp/armeria/common/stream/FixedStreamMessageVerification.java
Patch:
@@ -35,7 +35,7 @@ public StreamMessage<Long> createFailedPublisher() {
 
     @Override
     public StreamMessage<Long> createAbortedPublisher(long elements) {
-        StreamMessage<Long> stream = createPublisher(elements);
+        final StreamMessage<Long> stream = createPublisher(elements);
         stream.abort();
         return stream;
     }

File: core/src/test/java/com/linecorp/armeria/common/stream/StreamMessageDuplicatorTest.java
Patch:
@@ -272,7 +272,7 @@ public void circularQueueOddNumHeadWrapAround() {
         assertThat(queue.size()).isEqualTo(20);
     }
 
-    private void add(SignalQueue queue, int from, int to) {
+    private static void add(SignalQueue queue, int from, int to) {
         for (int i = from; i < to; i++) {
             queue.addAndRemoveIfRequested(i);
         }
@@ -392,6 +392,7 @@ public void onNext(String s) {
         }
 
         @Override
+        @SuppressWarnings("UnnecessaryCallToStringValueOf")
         public void onError(Throwable t) {
             logger.debug("{}: onError({})", this, String.valueOf(t), t);
         }
@@ -402,6 +403,7 @@ public void onComplete() {
         }
 
         @Override
+        @SuppressWarnings("UnnecessaryCallToStringValueOf")
         public void accept(Void aVoid, Throwable cause) {
             logger.debug("{}: completionFuture({})", this, String.valueOf(cause), cause);
             if (cause != null) {

File: core/src/test/java/com/linecorp/armeria/internal/ArmeriaHttpUtilTest.java
Patch:
@@ -122,15 +122,15 @@ public void inboundCookiesMustBeMergedForHttp2() {
 
     @Test
     public void setHttp2AuthorityWithoutUserInfo() {
-        HttpHeaders headers = new DefaultHttpHeaders();
+        final HttpHeaders headers = new DefaultHttpHeaders();
 
         setHttp2Authority("foo", headers);
         assertThat(headers.authority()).isEqualTo("foo");
     }
 
     @Test
     public void setHttp2AuthorityWithUserInfo() {
-        HttpHeaders headers = new DefaultHttpHeaders();
+        final HttpHeaders headers = new DefaultHttpHeaders();
 
         setHttp2Authority("info@foo", headers);
         assertThat(headers.authority()).isEqualTo("foo");
@@ -141,7 +141,7 @@ public void setHttp2AuthorityWithUserInfo() {
 
     @Test
     public void setHttp2AuthorityNullOrEmpty() {
-        HttpHeaders headers = new DefaultHttpHeaders();
+        final HttpHeaders headers = new DefaultHttpHeaders();
 
         setHttp2Authority(null, headers);
         assertThat(headers.authority()).isNull();

File: core/src/test/java/com/linecorp/armeria/internal/ConnectionLimitingHandlerIntegrationTest.java
Patch:
@@ -70,10 +70,10 @@ public void testExceedMaxNumConnections() throws Exception {
     }
 
     private static Socket newSocketAndTest() throws IOException {
-        Socket socket = new Socket(LOOPBACK, server.httpPort());
+        final Socket socket = new Socket(LOOPBACK, server.httpPort());
 
         // Test this socket is opened or not.
-        OutputStream os = socket.getOutputStream();
+        final OutputStream os = socket.getOutputStream();
         os.write("GET / HTTP/1.1\r\n\r\n".getBytes());
         os.flush();
 

File: core/src/test/java/com/linecorp/armeria/internal/metric/RequestMetricSupportTest.java
Patch:
@@ -97,7 +97,7 @@ public void httpFailure() {
         ctx.logBuilder().endRequest();
         ctx.logBuilder().endResponse();
 
-        Map<String, Double> measurements = measureAll(registry);
+        final Map<String, Double> measurements = measureAll(registry);
         assertThat(measurements).containsEntry("foo.activeRequests#value{method=POST}", 0.0)
                                 .containsEntry("foo.requests#count{method=POST,result=success,status=500}", 0.0)
                                 .containsEntry("foo.requests#count{method=POST,result=failure,status=500}", 1.0)

File: core/src/test/java/com/linecorp/armeria/server/DefaultServiceRequestContextTest.java
Patch:
@@ -53,7 +53,7 @@ public void deriveContext() {
         final AttributeKey<String> foo = AttributeKey.valueOf(DefaultServiceRequestContextTest.class, "foo");
         originalCtx.attr(foo).set("foo");
 
-        Request newRequest = mock(Request.class);
+        final Request newRequest = mock(Request.class);
         final ServiceRequestContext derivedCtx = originalCtx.newDerivedContext(newRequest);
         assertThat(derivedCtx.server()).isSameAs(originalCtx.server());
         assertThat(derivedCtx.sessionProtocol()).isSameAs(originalCtx.sessionProtocol());

File: core/src/test/java/com/linecorp/armeria/server/HttpServiceTest.java
Patch:
@@ -105,7 +105,7 @@ public void testContentLength() throws Exception {
         // Test if the server responds with the 'content-length' header
         // even if it is the last response of the connection.
         try (CloseableHttpClient hc = HttpClients.createMinimal()) {
-            HttpUriRequest req = new HttpGet(rule.httpUri("/200"));
+            final HttpUriRequest req = new HttpGet(rule.httpUri("/200"));
             req.setHeader("Connection", "Close");
             try (CloseableHttpResponse res = hc.execute(req)) {
                 assertThat(res.getStatusLine().toString()).isEqualTo("HTTP/1.1 200 OK");

File: core/src/test/java/com/linecorp/armeria/server/PrefixPathMappingTest.java
Patch:
@@ -38,7 +38,7 @@ public void testMetricName() throws Exception {
     @Test
     public void mappingResult() {
         final PathMapping a = ofPrefix("/foo");
-        PathMappingResult result = a.apply(create("/foo/bar/cat"));
+        final PathMappingResult result = a.apply(create("/foo/bar/cat"));
         assertThat(result.path()).isEqualTo("/bar/cat");
     }
 

File: core/src/test/java/com/linecorp/armeria/server/RouterTest.java
Patch:
@@ -36,7 +36,7 @@ public class RouterTest {
 
     @Test
     public void testRouters() {
-        List<PathMapping> mappings = Lists.newArrayList(
+        final List<PathMapping> mappings = Lists.newArrayList(
                 PathMapping.of("exact:/a"),         // router 1
                 PathMapping.of("/b/{var}"),
                 PathMapping.of("prefix:/c"),
@@ -47,11 +47,11 @@ public void testRouters() {
                 PathMapping.of("glob:/h/**/z"),     // router 4
                 PathMapping.of("prefix:/i")         // router 5
         );
-        List<Router<PathMapping>> routers = Routers.routers(mappings, Function.identity());
+        final List<Router<PathMapping>> routers = Routers.routers(mappings, Function.identity());
         assertThat(routers.size()).isEqualTo(5);
 
         // Map of a path string and a router index
-        List<Entry<String, Integer>> args = Lists.newArrayList(
+        final List<Entry<String, Integer>> args = Lists.newArrayList(
                 Maps.immutableEntry("/a", 0),
                 Maps.immutableEntry("/b/1", 0),
                 Maps.immutableEntry("/c/1", 0),

File: core/src/test/java/com/linecorp/armeria/server/ServiceTest.java
Patch:
@@ -33,7 +33,7 @@ public class ServiceTest {
     public void lambdaExpressionDecorator() throws Exception {
         final FooService inner = new FooService();
         final Service<RpcRequest, RpcResponse> outer = inner.decorate((delegate, ctx, req) -> {
-            RpcRequest newReq = RpcRequest.of(req.serviceType(), "new_" + req.method(), req.params());
+            final RpcRequest newReq = RpcRequest.of(req.serviceType(), "new_" + req.method(), req.params());
             return delegate.serve(ctx, newReq);
         });
 

File: core/src/test/java/com/linecorp/armeria/server/healthcheck/SettableHealthCheckerTest.java
Patch:
@@ -24,20 +24,20 @@ public class SettableHealthCheckerTest {
 
     @Test
     public void justCreated() {
-        SettableHealthChecker checker = new SettableHealthChecker();
+        final SettableHealthChecker checker = new SettableHealthChecker();
         assertFalse(checker.isHealthy());
     }
 
     @Test
     public void setHealthy() {
-        SettableHealthChecker checker = new SettableHealthChecker();
+        final SettableHealthChecker checker = new SettableHealthChecker();
         checker.setHealthy(true);
         assertTrue(checker.isHealthy());
     }
 
     @Test
     public void setUnHealthy() {
-        SettableHealthChecker checker = new SettableHealthChecker();
+        final SettableHealthChecker checker = new SettableHealthChecker();
         checker.setHealthy(false);
         assertFalse(checker.isHealthy());
     }

File: core/src/test/java/com/linecorp/armeria/server/logging/AccessLogFormatsTest.java
Patch:
@@ -147,7 +147,7 @@ public void parseSuccess() {
         assertThat(format.size()).isOne();
         entry = format.get(0);
         assertThat(entry).isInstanceOf(AttributeComponent.class);
-        AttributeComponent attrEntry = (AttributeComponent) entry;
+        final AttributeComponent attrEntry = (AttributeComponent) entry;
         assertThat(attrEntry.key().toString())
                 .isEqualTo("com.linecorp.armeria.server.logging.AccessLogFormatsTest$Attr#KEY");
 

File: core/src/test/java/com/linecorp/armeria/server/metrics/RequestLogListenerTest.java
Patch:
@@ -30,9 +30,9 @@ public void testComposition() throws Exception {
         // Given
         final int[] executeCounters = { 0 };
 
-        RequestLogListener consumer = log -> executeCounters[0]++;
+        final RequestLogListener consumer = log -> executeCounters[0]++;
 
-        RequestLogListener finalConsumer = consumer.andThen(consumer).andThen(consumer);
+        final RequestLogListener finalConsumer = consumer.andThen(consumer).andThen(consumer);
 
         // When
         finalConsumer.onRequestLog(mock(RequestLog.class));

File: core/src/test/java/com/linecorp/armeria/server/throttling/CircuitBreakerBasedThrottlingStrategyTest.java
Patch:
@@ -82,7 +82,7 @@ public boolean canRequest() {
 
     @Test
     public void serve() throws Exception {
-        HttpClient client = HttpClient.of(serverRule.uri("/"));
+        final HttpClient client = HttpClient.of(serverRule.uri("/"));
         assertThat(client.get("/never").aggregate().get().status()).isEqualTo(HttpStatus.SERVICE_UNAVAILABLE);
         assertThat(client.get("/always").aggregate().get().status()).isEqualTo(HttpStatus.OK);
     }

File: core/src/test/java/com/linecorp/armeria/server/throttling/RateLimitingThrottlingStrategyTest.java
Patch:
@@ -37,7 +37,8 @@ public class RateLimitingThrottlingStrategyTest {
 
     @Test
     public void rateLimit() throws Exception {
-        RateLimitingThrottlingStrategy<Request> strategy = new RateLimitingThrottlingStrategy<>(rateLimiter);
+        final RateLimitingThrottlingStrategy<Request> strategy =
+                new RateLimitingThrottlingStrategy<>(rateLimiter);
         when(rateLimiter.tryAcquire()).thenReturn(true)
                                       .thenReturn(false)
                                       .thenReturn(true);

File: core/src/test/java/com/linecorp/armeria/server/throttling/ThrottlingServiceTest.java
Patch:
@@ -53,13 +53,13 @@ protected void configure(ServerBuilder sb) throws Exception {
 
     @Test
     public void serve() throws Exception {
-        HttpClient client = HttpClient.of(serverRule.uri("/"));
+        final HttpClient client = HttpClient.of(serverRule.uri("/"));
         assertThat(client.get("/http-always").aggregate().get().status()).isEqualTo(HttpStatus.OK);
     }
 
     @Test
     public void throttle() throws Exception {
-        HttpClient client = HttpClient.of(serverRule.uri("/"));
+        final HttpClient client = HttpClient.of(serverRule.uri("/"));
         assertThat(client.get("/http-never").aggregate().get().status())
                 .isEqualTo(HttpStatus.SERVICE_UNAVAILABLE);
     }

File: grpc/src/main/java/com/linecorp/armeria/internal/grpc/ArmeriaMessageDeframer.java
Patch:
@@ -425,13 +425,13 @@ private ByteBuf readBytes(int length) {
             }
         } else {
             assert unprocessed != null;
-            ByteBuf buf = unprocessed.readBytes(length);
+            final ByteBuf buf = unprocessed.readBytes(length);
             unprocessed.discardReadComponents();
             return buf;
         }
     }
 
-    private ByteBufOrStream getUncompressedBody(ByteBuf buf) {
+    private static ByteBufOrStream getUncompressedBody(ByteBuf buf) {
         return new ByteBufOrStream(buf);
     }
 

File: grpc/src/main/java/com/linecorp/armeria/internal/grpc/GrpcStatus.java
Patch:
@@ -55,12 +55,12 @@ public final class GrpcStatus {
      */
     public static Status fromThrowable(Throwable t) {
         requireNonNull(t, "t");
-        Status s = Status.fromThrowable(t);
+        final Status s = Status.fromThrowable(t);
         if (s.getCode() != Code.UNKNOWN) {
             return s;
         }
         if (t instanceof StreamException) {
-            StreamException streamException = (StreamException) t;
+            final StreamException streamException = (StreamException) t;
             if (streamException.getMessage() != null && streamException.getMessage().contains("RST_STREAM")) {
                 return Status.CANCELLED;
             }

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcRequestUtil.java
Patch:
@@ -28,11 +28,11 @@ final class GrpcRequestUtil {
     @Nullable
     static String determineMethod(ServiceRequestContext ctx) {
         // Remove the leading slash of the path and get the fully qualified method name
-        String path = ctx.mappedPath();
+        final String path = ctx.mappedPath();
         if (path.charAt(0) != '/') {
             return null;
         }
-        return path.substring(1, path.length());
+        return path.substring(1);
     }
 
     private GrpcRequestUtil() {}

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/HandlerRegistry.java
Patch:
@@ -98,7 +98,7 @@ Builder addService(ServerServiceDefinition service) {
         }
 
         HandlerRegistry build() {
-            ImmutableMap.Builder<String, ServerMethodDefinition<?, ?>> mapBuilder =
+            final ImmutableMap.Builder<String, ServerMethodDefinition<?, ?>> mapBuilder =
                     ImmutableMap.builder();
             for (ServerServiceDefinition service : services.values()) {
                 for (ServerMethodDefinition<?, ?> method : service.getMethods()) {

File: grpc/src/main/java/com/linecorp/armeria/unsafe/grpc/GrpcUnsafeBufferUtil.java
Patch:
@@ -51,10 +51,10 @@ public static void storeBuffer(ByteBuf buf, Object message, RequestContext ctx)
      * Releases the {@link ByteBuf} backing the provided {@link Message}.
      */
     public static void releaseBuffer(Object message, RequestContext ctx) {
-        IdentityHashMap<Object, ByteBuf> buffers = ctx.attr(BUFFERS).get();
+        final IdentityHashMap<Object, ByteBuf> buffers = ctx.attr(BUFFERS).get();
         checkState(buffers != null,
                    "Releasing buffer even though storeBuffer has not been called.");
-        ByteBuf removed = buffers.remove(message);
+        final ByteBuf removed = buffers.remove(message);
         if (removed == null) {
             throw new IllegalArgumentException("The provided message does not have a stored buffer.");
         }

File: grpc/src/test/java/com/linecorp/armeria/internal/grpc/HttpStreamReaderTest.java
Patch:
@@ -171,6 +171,6 @@ public void httpNotOk() {
         verifyZeroInteractions(deframer);
 
         verify(transportStatusListener).transportReportStatus(
-                argThat(s -> s.getCode().equals(Status.UNAUTHENTICATED.getCode())));
+                argThat(s -> s.getCode() == Status.UNAUTHENTICATED.getCode()));
     }
 }

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/ArmeriaServerCallTest.java
Patch:
@@ -147,7 +147,7 @@ public void messageReadAfterClose_byteBuf() {
 
     @Test
     public void messageRead_notWrappedByteBuf() {
-        ByteBuf buf = GrpcTestUtil.requestByteBuf();
+        final ByteBuf buf = GrpcTestUtil.requestByteBuf();
         call.messageRead(new ByteBufOrStream(buf));
 
         verifyZeroInteractions(buffersAttr);
@@ -168,7 +168,7 @@ public void messageRead_wrappedByteBuf() {
                 MessageMarshaller.builder().build(),
                 true);
 
-        ByteBuf buf = GrpcTestUtil.requestByteBuf();
+        final ByteBuf buf = GrpcTestUtil.requestByteBuf();
         call.messageRead(new ByteBufOrStream(buf));
 
         verify(buffersAttr).set(argThat(map -> map.containsValue(buf)));

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcDocServiceTest.java
Patch:
@@ -71,7 +71,8 @@ private static class TestService extends TestServiceImplBase {
 
         @Override
         public void unaryCall(SimpleRequest request, StreamObserver<SimpleResponse> responseObserver) {
-            ByteString body = ByteString.copyFromUtf8("hello " + request.getPayload().getBody().toStringUtf8());
+            final ByteString body = ByteString.copyFromUtf8(
+                    "hello " + request.getPayload().getBody().toStringUtf8());
             responseObserver.onNext(
                     SimpleResponse.newBuilder()
                                   .setPayload(Payload.newBuilder().setBody(body))
@@ -110,7 +111,7 @@ protected void configure(ServerBuilder sb) throws Exception {
 
     @Test
     public void testOk() throws Exception {
-        List<ServiceEntry> entries = ImmutableList.of(
+        final List<ServiceEntry> entries = ImmutableList.of(
                 new ServiceEntry(
                         TEST_SERVICE_DESCRIPTOR,
                         ImmutableList.of(

File: it/src/test/java/com/linecorp/armeria/server/grpc/interop/ArmeriaGrpcServerInteropTest.java
Patch:
@@ -156,11 +156,11 @@ public void exchangeMetadataStreamingCall() {
 
     @Override
     public void sendsTimeoutHeader() {
-        long configuredTimeoutMinutes = 100;
-        TestServiceGrpc.TestServiceBlockingStub stub =
+        final long configuredTimeoutMinutes = 100;
+        final TestServiceGrpc.TestServiceBlockingStub stub =
                 blockingStub.withDeadlineAfter(configuredTimeoutMinutes, TimeUnit.MINUTES);
         stub.emptyCall(EMPTY);
-        long transferredTimeoutMinutes = TimeUnit.MILLISECONDS.toMinutes(
+        final long transferredTimeoutMinutes = TimeUnit.MILLISECONDS.toMinutes(
                 ctxCapture.get().requestTimeoutMillis());
         Assert.assertTrue(
                 "configuredTimeoutMinutes=" + configuredTimeoutMinutes +

File: logback/src/main/java/com/linecorp/armeria/common/logback/BuiltInProperty.java
Patch:
@@ -145,7 +145,7 @@ public enum BuiltInProperty {
     private static final Map<String, BuiltInProperty> mdcKeyToEnum;
 
     static {
-        ImmutableMap.Builder<String, BuiltInProperty> builder = ImmutableMap.builder();
+        final ImmutableMap.Builder<String, BuiltInProperty> builder = ImmutableMap.builder();
         for (BuiltInProperty k : BuiltInProperty.values()) {
             builder.put(k.mdcKey, k);
         }

File: spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaAutoConfiguration.java
Patch:
@@ -176,7 +176,7 @@ public Server armeriaServer(
                 decorator = decorator.andThen(MetricCollectingService.newDecorator(
                         meterIdPrefixFuncFactory.get(METER_TYPE, bean.getServiceName())));
             }
-            ImmutableList<Object> exceptionHandlersAndConverters =
+            final ImmutableList<Object> exceptionHandlersAndConverters =
                     ImmutableList.builder()
                                  .addAll(bean.getExceptionHandlers())
                                  .addAll(bean.getRequestConverters())

File: spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaMeterBindersConfigurationTest.java
Patch:
@@ -65,7 +65,7 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) {
                         }
                     })
                     .setPathMapping(PathMapping.ofExact("/ok"))
-                    .setDecorator(LoggingService.newDecorator());
+                    .setDecorators(LoggingService.newDecorator());
         }
     }
 

File: thrift/src/main/java/com/linecorp/armeria/client/thrift/THttpClientFactory.java
Patch:
@@ -94,7 +94,7 @@ public <T> T newClient(URI uri, Class<T> clientType, ClientOptions options) {
                     delegate, meterRegistry(), scheme.sessionProtocol(), newEndpoint(uri));
 
             @SuppressWarnings("unchecked")
-            T client = (T) Proxy.newProxyInstance(
+            final T client = (T) Proxy.newProxyInstance(
                     clientType.getClassLoader(),
                     new Class<?>[] { clientType },
                     new THttpClientInvocationHandler(
@@ -109,7 +109,7 @@ public <T> T newClient(URI uri, Class<T> clientType, ClientOptions options) {
     private Client<HttpRequest, HttpResponse> newHttpClient(URI uri, Scheme scheme, ClientOptions options) {
         try {
             @SuppressWarnings("unchecked")
-            Client<HttpRequest, HttpResponse> client = delegate().newClient(
+            final Client<HttpRequest, HttpResponse> client = delegate().newClient(
                     new URI(Scheme.of(SerializationFormat.NONE, scheme.sessionProtocol()).uriText(),
                             uri.getRawAuthority(), null, null, null),
                     Client.class, options);

File: thrift/src/main/java/com/linecorp/armeria/common/thrift/text/TypedParser.java
Patch:
@@ -220,7 +220,7 @@ Byte readFromJsonElement(JsonNode elem) {
 
         @Override
         void writeValue(JsonGenerator jw, Byte val) throws IOException {
-            String serialized;
+            final String serialized;
             switch (val.byteValue()) {
             case TMessageType.CALL:
                 serialized = "CALL";

File: thrift/src/main/java/com/linecorp/armeria/server/thrift/THttpService.java
Patch:
@@ -90,6 +90,8 @@ public final class THttpService extends AbstractHttpService {
             "Thrift protocol specified in Accept header must match " +
             "the one specified in the content-type header";
 
+    private static final SerializationFormat[] EMPTY_FORMATS = new SerializationFormat[0];
+
     /**
      * Creates a new {@link THttpService} with the specified service implementation, supporting all thrift
      * protocols and defaulting to {@link ThriftSerializationFormats#BINARY TBinary} protocol when the client
@@ -349,7 +351,7 @@ private static SerializationFormat[] newAllowedSerializationFormats(
         final Set<SerializationFormat> set = new LinkedHashSet<>();
         set.add(defaultSerializationFormat);
         Iterables.addAll(set, otherAllowedSerializationFormats);
-        return set.toArray(new SerializationFormat[set.size()]);
+        return set.toArray(EMPTY_FORMATS);
     }
 
     private final Service<RpcRequest, RpcResponse> delegate;

File: thrift/src/main/java/com/linecorp/armeria/server/thrift/ThriftStructuredLog.java
Patch:
@@ -19,6 +19,7 @@
 import javax.annotation.Nullable;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
+import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.MoreObjects;
 
 import com.linecorp.armeria.common.RequestContext;
@@ -44,14 +45,15 @@ public class ThriftStructuredLog extends StructuredLog {
     @Nullable
     private final ThriftReply thriftReply;
 
+    @VisibleForTesting
     ThriftStructuredLog(long timestampMillis,
                         long responseTimeNanos,
                         long requestSize,
                         long responseSize,
                         String thriftServiceName,
                         String thriftMethodName,
                         ThriftCall thriftCall,
-                        ThriftReply thriftReply) {
+                        @Nullable ThriftReply thriftReply) {
         super(timestampMillis, responseTimeNanos, requestSize, responseSize);
         this.thriftServiceName = thriftServiceName;
         this.thriftMethodName = thriftMethodName;

File: thrift/src/test/java/com/linecorp/armeria/it/thrift/ThrottlingRpcServiceTest.java
Patch:
@@ -71,7 +71,7 @@ public void setup() {
 
     @Test
     public void serve() throws Exception {
-        HelloService.Iface client = new ClientBuilder(server.uri(BINARY, "/thrift-always"))
+        final HelloService.Iface client = new ClientBuilder(server.uri(BINARY, "/thrift-always"))
                 .build(HelloService.Iface.class);
         when(serviceHandler.hello("foo")).thenReturn("bar");
 
@@ -80,7 +80,7 @@ public void serve() throws Exception {
 
     @Test
     public void throttle() throws Exception {
-        HelloService.Iface client = new ClientBuilder(server.uri(BINARY, "/thrift-never"))
+        final HelloService.Iface client = new ClientBuilder(server.uri(BINARY, "/thrift-never"))
                 .build(HelloService.Iface.class);
 
         assertThatThrownBy(() -> client.hello("foo")).isInstanceOf(TApplicationException.class);

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftOverHttp1Test.java
Patch:
@@ -92,7 +92,7 @@ public void testNonPostRequest() throws Exception {
     public void testPipelinedHttpInvocation() throws Exception {
         // FIXME: Enable this test once we have a working Thrift-over-HTTP/1 client with pipelining.
         try (TTransport transport = newTransport("http", "/sleep")) {
-            SleepService.Client client = new SleepService.Client.Factory().getClient(
+            final SleepService.Client client = new SleepService.Client.Factory().getClient(
                     ThriftProtocolFactories.BINARY.getProtocol(transport));
 
             client.send_sleep(1000);

File: tomcat/src/main/java/com/linecorp/armeria/server/tomcat/Tomcat90OutputBuffer.java
Patch:
@@ -53,7 +53,7 @@ public int doWrite(ByteChunk chunk) {
 
     @Override
     public int doWrite(ByteBuffer chunk) throws IOException {
-        int length = chunk.remaining();
+        final int length = chunk.remaining();
         if (length <= 0) {
             return 0;
         }

File: zipkin/src/main/java/com/linecorp/armeria/client/tracing/HttpTracingClient.java
Patch:
@@ -82,15 +82,15 @@ public static Function<Client<HttpRequest, HttpResponse>, HttpTracingClient> new
     protected HttpTracingClient(Client<HttpRequest, HttpResponse> delegate, Tracing tracing,
                                 @Nullable String remoteServiceName) {
         super(delegate);
-        this.tracer = tracing.tracer();
+        tracer = tracing.tracer();
         injector = tracing.propagationFactory().create(AsciiStringKeyFactory.INSTANCE)
                           .injector(HttpHeaders::set);
         this.remoteServiceName = remoteServiceName;
     }
 
     @Override
     public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {
-        Span span = tracer.nextSpan();
+        final Span span = tracer.nextSpan();
         injector.inject(span.context(), req.headers());
         // For no-op spans, we only need to inject into headers and don't set any other attributes.
         if (span.isNoop()) {
@@ -116,7 +116,7 @@ private void finishSpan(Span span, RequestLog log) {
 
     private void setRemoteEndpoint(Span span, RequestLog log) {
 
-        SocketAddress remoteAddress = log.context().remoteAddress();
+        final SocketAddress remoteAddress = log.context().remoteAddress();
         final InetAddress address;
         if (remoteAddress instanceof InetSocketAddress) {
             address = ((InetSocketAddress) remoteAddress).getAddress();

File: zipkin/src/main/java/com/linecorp/armeria/internal/tracing/AsciiStringKeyFactory.java
Patch:
@@ -16,12 +16,14 @@
 
 package com.linecorp.armeria.internal.tracing;
 
+import com.linecorp.armeria.common.HttpHeaders;
+
 import brave.propagation.Propagation;
 import io.netty.util.AsciiString;
 
 /**
  * Converter from {@link String} to {@link AsciiString} which is used by Brave to marshall trace information
- * into Armeria's {@link com.linecorp.armeria.common.HttpHeaders}.
+ * into Armeria's {@link HttpHeaders}.
  */
 public enum AsciiStringKeyFactory implements Propagation.KeyFactory<AsciiString> {
     INSTANCE;

File: zipkin/src/main/java/com/linecorp/armeria/internal/tracing/SpanContextUtil.java
Patch:
@@ -36,7 +36,7 @@ public static void setupContext(FastThreadLocal<SpanInScope> threadLocalSpan, Re
                                     Tracer tracer) {
         ctx.onEnter(unused -> threadLocalSpan.set(tracer.withSpanInScope(span)));
         ctx.onExit(unused -> {
-            SpanInScope spanInScope = threadLocalSpan.get();
+            final SpanInScope spanInScope = threadLocalSpan.get();
             if (spanInScope != null) {
                 spanInScope.close();
                 threadLocalSpan.remove();

File: zipkin/src/main/java/com/linecorp/armeria/server/tracing/HttpTracingService.java
Patch:
@@ -71,9 +71,9 @@ public HttpTracingService(Service<HttpRequest, HttpResponse> delegate, Tracing t
 
     @Override
     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
-        TraceContextOrSamplingFlags contextOrFlags = extractor.extract(req.headers());
-        Span span = contextOrFlags.context() != null ? tracer.joinSpan(contextOrFlags.context())
-                                                     : tracer.newTrace(contextOrFlags.samplingFlags());
+        final TraceContextOrSamplingFlags contextOrFlags = extractor.extract(req.headers());
+        final Span span = contextOrFlags.context() != null ? tracer.joinSpan(contextOrFlags.context())
+                                                           : tracer.newTrace(contextOrFlags.samplingFlags());
         // For no-op spans, nothing special to do.
         if (span.isNoop()) {
             return delegate().serve(ctx, req);

File: zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/DefaultNodeValueCodec.java
Patch:
@@ -69,7 +69,7 @@ public Endpoint decode(String segment) {
 
     @Override
     public Set<Endpoint> decodeAll(String valueString) {
-        Set<Endpoint> endpoints = new HashSet<>();
+        final Set<Endpoint> endpoints = new HashSet<>();
         try {
             for (String segment : SEGMENT_DELIMITER.split(valueString)) {
                 endpoints.add(decode(segment));
@@ -86,7 +86,7 @@ public Set<Endpoint> decodeAll(String valueString) {
     @Override
     public byte[] encodeAll(Iterable<Endpoint> endpoints) {
         requireNonNull(endpoints, "endpoints");
-        StringBuilder nodeValue = new StringBuilder();
+        final StringBuilder nodeValue = new StringBuilder();
         endpoints.forEach(endpoint -> nodeValue.append(endpoint.host()).append(fieldDelimiter).append(
                 endpoint.port()).append(fieldDelimiter).append(endpoint.weight()).append(segmentDelimiter));
         //delete the last unused segment delimiter

File: zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListener.java
Patch:
@@ -86,9 +86,9 @@ public ZooKeeperUpdatingListener(String zkConnectionStr, String zNodePath, int s
                                         .sessionTimeoutMs(sessionTimeout)
                                         .build();
         this.zNodePath = requireNonNull(zNodePath, "zNodePath");
-        this.nodeValueCodec = NodeValueCodec.DEFAULT;
+        nodeValueCodec = NodeValueCodec.DEFAULT;
         this.endpoint = endpoint;
-        this.closeClientOnStop = true;
+        closeClientOnStop = true;
     }
 
     /**

File: spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationTest.java
Patch:
@@ -80,7 +80,7 @@ public HttpServiceRegistrationBean okService() {
                     .setServiceName("okService")
                     .setService(new OkService())
                     .setPathMapping(PathMapping.ofExact("/ok"))
-                    .setDecorator(LoggingService.newDecorator());
+                    .setDecorators(ImmutableList.of(LoggingService.newDecorator()));
         }
 
         @Bean
@@ -101,7 +101,7 @@ public ThriftServiceRegistrationBean helloThriftService() {
                     .setServiceName("helloService")
                     .setService(THttpService.of((HelloService.Iface) name -> "hello " + name))
                     .setPath("/thrift")
-                    .setDecorator(LoggingService.newDecorator())
+                    .setDecorators(ImmutableList.of(LoggingService.newDecorator()))
                     .setExampleRequests(Collections.singleton(new hello_args("nameVal")))
                     .setExampleHeaders(Collections.singleton(HttpHeaders.of(
                             AsciiString.of("x-additional-header"), "headerVal")));

File: core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java
Patch:
@@ -259,6 +259,7 @@ private int streamId() {
     private void fail(Throwable cause) {
         setDone();
         logBuilder.endRequest(cause);
+        logBuilder.endResponse(cause);
         assert subscription != null;
         subscription.cancel();
     }

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -392,6 +392,7 @@ private void handleRequest(ChannelHandlerContext ctx, DecodedHttpRequest req) th
                     logBuilder.endRequest();
                 } else {
                     logBuilder.endRequest(cause);
+                    // NB: logBuilder.endResponse(cause) will be called by HttpResponseSubscriber below
                 }
             })).exceptionally(CompletionActions::log);
 

File: core/src/main/java/com/linecorp/armeria/internal/AnnotatedHttpServiceParamUtil.java
Patch:
@@ -143,9 +143,7 @@ public static Object convertParameter(@Nullable String value,
      * it is not supported.
      *
      * @param clazz parameter type to be validated and normalized
-     *
      * @return normalized parameter type
-     *
      * @throws IllegalArgumentException if {@code clazz} is not a supported data type.
      */
     public static Class<?> validateAndNormalizeSupportedType(Class<?> clazz) {

File: zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroup.java
Patch:
@@ -141,6 +141,8 @@ private PathChildrenCache pathChildrenCache(String zNodePath) {
 
     @Override
     public void close() {
+        super.close();
+
         try {
             pathChildrenCache.close();
         } catch (IOException e) {

File: tomcat/src/test/java/com/linecorp/armeria/server/tomcat/TomcatServiceTest.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.impl.client.CloseableHttpClient;
 import org.apache.http.impl.client.HttpClients;
+import org.apache.http.util.EntityUtils;
 import org.junit.ClassRule;
 import org.junit.Test;
 
@@ -97,6 +98,7 @@ public void jarBasedWebApp() throws Exception {
                         .startsWith("application/java");
                 assertThat(res.getFirstHeader(HttpHeaderNames.CONTENT_LENGTH.toString()).getValue())
                         .isEqualTo("1361");
+                EntityUtils.consume(res.getEntity());
             }
         }
     }
@@ -110,6 +112,7 @@ public void jarBasedWebAppWithAlternativeRoot() throws Exception {
                         .startsWith("application/java");
                 assertThat(res.getFirstHeader(HttpHeaderNames.CONTENT_LENGTH.toString()).getValue())
                         .isEqualTo("1361");
+                EntityUtils.consume(res.getEntity());
             }
         }
     }

File: core/src/main/java/com/linecorp/armeria/common/Flags.java
Patch:
@@ -135,7 +135,7 @@ public final class Flags {
                    DEFAULT_DEFAULT_MAX_HTTP1_CHUNK_SIZE,
                    value -> value >= 0);
 
-    private static final boolean DEFAULT_USE_HTTP2_PREFACE = getBoolean("defaultUseHttp2Preface", false);
+    private static final boolean DEFAULT_USE_HTTP2_PREFACE = getBoolean("defaultUseHttp2Preface", true);
     private static final boolean DEFAULT_USE_HTTP1_PIPELINING = getBoolean("defaultUseHttp1Pipelining", false);
 
     private static final String DEFAULT_DEFAULT_BACKOFF_SPEC =
@@ -372,8 +372,8 @@ public static int defaultMaxHttp1ChunkSize() {
      * Returns the default value of the {@link ClientFactoryBuilder#useHttp2Preface(boolean)} option.
      * Note that this value has effect only if a user did not specify it.
      *
-     * <p>This flag is disabled by default. Specify the
-     * {@code -Dcom.linecorp.armeria.defaultUseHttp2Preface=true} JVM option to enable it.
+     * <p>This flag is enabled by default. Specify the
+     * {@code -Dcom.linecorp.armeria.defaultUseHttp2Preface=false} JVM option to disable it.
      */
     public static boolean defaultUseHttp2Preface() {
         return DEFAULT_USE_HTTP2_PREFACE;

File: tomcat/src/main/java/com/linecorp/armeria/server/tomcat/Tomcat90InputBuffer.java
Patch:
@@ -24,15 +24,15 @@
 
 import com.linecorp.armeria.common.HttpData;
 
-class Tomcat85InputBuffer implements InputBuffer {
+class Tomcat90InputBuffer implements InputBuffer {
     private final HttpData content;
     private boolean read;
 
-    Tomcat85InputBuffer(HttpData content) {
+    Tomcat90InputBuffer(HttpData content) {
         this.content = content;
     }
 
-    @Override
+    // Required for 8.5.
     public int doRead(ByteChunk chunk) {
         if (!isNeedToRead()) {
             // Read only once.

File: tomcat/src/main/java/com/linecorp/armeria/server/tomcat/Tomcat90OutputBuffer.java
Patch:
@@ -25,15 +25,15 @@
 
 import com.linecorp.armeria.common.HttpData;
 
-class Tomcat85OutputBuffer implements OutputBuffer {
+class Tomcat90OutputBuffer implements OutputBuffer {
     private final Queue<HttpData> data;
     private long bytesWritten;
 
-    Tomcat85OutputBuffer(Queue<HttpData> data) {
+    Tomcat90OutputBuffer(Queue<HttpData> data) {
         this.data = data;
     }
 
-    @Override
+    // Required by Tomcat 8.5
     public int doWrite(ByteChunk chunk) {
         final int start = chunk.getStart();
         final int end = chunk.getEnd();

File: tomcat/src/main/java/com/linecorp/armeria/server/tomcat/Tomcat90ProtocolHandler.java
Patch:
@@ -31,7 +31,7 @@
  * A {@link ProtocolHandler} for Tomcat 8.5 and above.
  * Do not use; loaded and instantiated by Tomcat via reflection.
  */
-public final class Tomcat85ProtocolHandler implements ProtocolHandler {
+public final class Tomcat90ProtocolHandler implements ProtocolHandler {
 
     private static final AtomicInteger nextId = new AtomicInteger();
 

File: tomcat/src/test/java/com/linecorp/armeria/server/tomcat/UnmanagedTomcatServiceTest.java
Patch:
@@ -51,12 +51,13 @@ protected void configure(ServerBuilder sb) throws Exception {
                                         "tomcat-" + UnmanagedTomcatServiceTest.class.getSimpleName() + "-1");
 
             tomcatWithWebApp.addWebapp("", WebAppContainerTest.webAppRoot().getAbsolutePath());
-            TomcatUtil.engine(tomcatWithWebApp.getService()).setName("tomcatWithWebApp");
+            TomcatUtil.engine(tomcatWithWebApp.getService(), "foo").setName("tomcatWithWebApp");
 
             tomcatWithoutWebApp = new Tomcat();
             tomcatWithoutWebApp.setPort(0);
             tomcatWithoutWebApp.setBaseDir("build" + File.separatorChar +
                                            "tomcat-" + UnmanagedTomcatServiceTest.class.getSimpleName() + "-2");
+            assertThat(TomcatUtil.engine(tomcatWithoutWebApp.getService(), "bar")).isNotNull();
 
             // Start the Tomcats.
             tomcatWithWebApp.start();

File: core/src/main/java/com/linecorp/armeria/server/AnnotatedHttpServices.java
Patch:
@@ -56,6 +56,7 @@
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.RequestContext;
 import com.linecorp.armeria.internal.DefaultValues;
+import com.linecorp.armeria.server.annotation.BeanRequestConverterFunction;
 import com.linecorp.armeria.server.annotation.ByteArrayRequestConverterFunction;
 import com.linecorp.armeria.server.annotation.ConsumeType;
 import com.linecorp.armeria.server.annotation.ConsumeTypes;
@@ -102,7 +103,8 @@ final class AnnotatedHttpServices {
      * A default {@link RequestConverterFunction} list.
      */
     private static final List<RequestConverterFunction> defaultRequestConverters =
-            ImmutableList.of(new JacksonRequestConverterFunction(),
+            ImmutableList.of(new BeanRequestConverterFunction(),
+                             new JacksonRequestConverterFunction(),
                              new StringRequestConverterFunction(),
                              new ByteArrayRequestConverterFunction());
 

File: core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessageDuplicator.java
Patch:
@@ -390,7 +390,7 @@ void close() {
         }
 
         void doClose() {
-            if (state == State.DUPLICABLE) {
+            if (state != State.CLOSED) {
                 state = State.CLOSED;
                 upstream.abort();
                 doCleanup();
@@ -401,6 +401,7 @@ private void doCleanup() {
             final List<CompletableFuture<Void>> completionFutures =
                     new ArrayList<>(downstreamSubscriptions.size());
             downstreamSubscriptions.forEach(s -> {
+                s.abort();
                 final CompletableFuture<Void> future = s.completionFuture();
                 completionFutures.add(future);
             });

File: core/src/main/java/com/linecorp/armeria/common/HttpResponse.java
Patch:
@@ -35,6 +35,7 @@
 import com.linecorp.armeria.common.stream.StreamMessage;
 import com.linecorp.armeria.common.util.Exceptions;
 
+import io.netty.util.ReferenceCountUtil;
 import io.netty.util.concurrent.EventExecutor;
 
 /**
@@ -209,6 +210,7 @@ static HttpResponse of(HttpHeaders headers, HttpData content, HttpHeaders traili
         }
 
         if (isContentAlwaysEmptyWithValidation(status, content, trailingHeaders)) {
+            ReferenceCountUtil.safeRelease(content);
             return new OneElementFixedHttpResponse(headers);
         } else if (!content.isEmpty()) {
             if (trailingHeaders.isEmpty()) {

File: grpc/src/test/java/com/linecorp/armeria/internal/grpc/GrpcMessageMarshallerTest.java
Patch:
@@ -86,6 +86,7 @@ public void deserializeRequest_wrappedByteBuf() throws Exception {
         SimpleRequest request = marshaller.deserializeRequest(new ByteBufOrStream(buf));
         assertThat(request).isEqualTo(GrpcTestUtil.REQUEST_MESSAGE);
         assertThat(buf.refCnt()).isEqualTo(1);
+        buf.release();
     }
 
     @Test
@@ -130,6 +131,7 @@ public void deserializeResponse_wrappedByteBuf() throws Exception {
         SimpleResponse response = marshaller.deserializeResponse(new ByteBufOrStream(buf));
         assertThat(response).isEqualTo(GrpcTestUtil.RESPONSE_MESSAGE);
         assertThat(buf.refCnt()).isEqualTo(1);
+        buf.release();
     }
 
     @Test

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsServiceEndpointGroup.java
Patch:
@@ -231,6 +231,6 @@ private Endpoint decodeSrvEndpoint(DnsRecord record) {
         String target = DefaultDnsRecordDecoder.decodeName(recordContent);
         // Last character always a '.'
         target = target.substring(0, target.length() - 1);
-        return Endpoint.of(target, port, weight);
+        return Endpoint.of(target, port).withWeight(weight);
     }
 }

File: core/src/test/java/com/linecorp/armeria/client/endpoint/dns/DnsServiceEndpointGroupTest.java
Patch:
@@ -66,9 +66,9 @@ public class DnsServiceEndpointGroupTest {
 
     private static final List<Endpoint> ENDPOINTS =
             ImmutableList.of(
-                    Endpoint.of("1.armeria.com", 443, 1),
-                    Endpoint.of("2.armeria.com", 8080, 1),
-                    Endpoint.of("3.armeria.com", 9000, 5));
+                    Endpoint.of("1.armeria.com", 443).withWeight(1),
+                    Endpoint.of("2.armeria.com", 8080).withWeight(1),
+                    Endpoint.of("3.armeria.com", 9000).withWeight(5));
 
     private static EventLoop EVENT_LOOP;
 

File: thrift/src/test/java/com/linecorp/armeria/it/client/endpoint/StaticEndpointGroupIntegrationTest.java
Patch:
@@ -68,9 +68,9 @@ public void testRoundRobinServerGroup() throws Exception {
         assertThat(ipService.hello("ip")).isEqualTo("host:127.0.0.1:" + serverThree.httpPort());
 
         StaticEndpointGroup serverGroup2 = new StaticEndpointGroup(
-                Endpoint.of("127.0.0.1", serverOne.httpPort(), 2),
-                Endpoint.of("127.0.0.1", serverTwo.httpPort(), 4),
-                Endpoint.of("127.0.0.1", serverThree.httpPort(), 2));
+                Endpoint.of("127.0.0.1", serverOne.httpPort()).withWeight(2),
+                Endpoint.of("127.0.0.1", serverTwo.httpPort()).withWeight(4),
+                Endpoint.of("127.0.0.1", serverThree.httpPort()).withWeight(2));
 
         EndpointGroupRegistry.register(groupName, serverGroup2, WEIGHTED_ROUND_ROBIN);
 

File: zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/DefaultNodeValueCodec.java
Patch:
@@ -56,7 +56,7 @@ public Endpoint decode(String segment) {
                 if (port == 0) {
                     endpoint = Endpoint.of(host).withWeight(weight);
                 } else {
-                    endpoint = Endpoint.of(host, port, weight);
+                    endpoint = Endpoint.of(host, port).withWeight(weight);
                 }
                 break;
             }

File: zookeeper/src/test/java/com/linecorp/armeria/client/zookeeper/EndpointGroupTest.java
Patch:
@@ -81,8 +81,8 @@ public void testGetEndpointGroup() {
 
     @Test
     public void testUpdateEndpointGroup() throws Throwable {
-        Set<Endpoint> expected = ImmutableSet.of(Endpoint.of("127.0.0.1", 8001, 2),
-                                                 Endpoint.of("127.0.0.1", 8002, 3));
+        Set<Endpoint> expected = ImmutableSet.of(Endpoint.of("127.0.0.1", 8001).withWeight(2),
+                                                 Endpoint.of("127.0.0.1", 8002).withWeight(3));
         //add two more node
         setNodeChild(expected);
         //construct the final expected node list

File: zookeeper/src/test/java/com/linecorp/armeria/client/zookeeper/TestBase.java
Patch:
@@ -50,9 +50,9 @@ public class TestBase {
 
     static {
         final int[] ports = unusedPorts(3);
-        sampleEndpoints = ImmutableSet.of(Endpoint.of("127.0.0.1", ports[0], 2),
-                                          Endpoint.of("127.0.0.1", ports[1], 4),
-                                          Endpoint.of("127.0.0.1", ports[2], 2));
+        sampleEndpoints = ImmutableSet.of(Endpoint.of("127.0.0.1", ports[0]).withWeight(2),
+                                          Endpoint.of("127.0.0.1", ports[1]).withWeight(4),
+                                          Endpoint.of("127.0.0.1", ports[2]).withWeight(2));
     }
 
     private static final Duration duration = Duration.ofSeconds(10);

File: zookeeper/src/test/java/com/linecorp/armeria/common/zookeeper/NodeValueCodecTest.java
Patch:
@@ -31,7 +31,7 @@ public void convert() {
                 .containsExactlyInAnyOrder(Endpoint.of("foo.com"),
                                            Endpoint.of("bar.com", 8080),
                                            Endpoint.of("10.0.2.15").withWeight(500),
-                                           Endpoint.of("192.168.1.2", 8443, 700));
+                                           Endpoint.of("192.168.1.2", 8443).withWeight(700));
         assertThatThrownBy(() -> NodeValueCodec.DEFAULT
                 .decodeAll("http://foo.com:8001, bar.com:8002"))
                 .isInstanceOf(EndpointGroupException.class);

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java
Patch:
@@ -96,11 +96,11 @@ private void doExecute0(ClientRequestContext ctx, RpcRequest req, DefaultRpcResp
 
         final RpcResponse response = getResponse(ctx, req);
 
-        retryStrategy().shouldRetry(req, response).handle(voidFunction((backoffOpt, unused) -> {
-            if (backoffOpt.isPresent()) {
+        retryStrategy().shouldRetry(req, response).handle(voidFunction((backoff, unused) -> {
+            if (backoff != null) {
                 long nextDelay;
                 try {
-                    nextDelay = getNextDelay(ctx, backoffOpt.get());
+                    nextDelay = getNextDelay(ctx, backoff);
                 } catch (Exception e) {
                     completeOnException(ctx, responseFuture, e);
                     return;

File: core/src/main/java/com/linecorp/armeria/client/Endpoint.java
Patch:
@@ -92,7 +92,9 @@ public static Endpoint of(String host, int port, int weight) {
         return new Endpoint(host, port, weight);
     }
 
+    @Nullable
     private final String groupName;
+    @Nullable
     private final String host;
     private final int port;
     private final int weight;

File: core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java
Patch:
@@ -66,7 +66,7 @@ private enum State {
 
     @Override
     HttpResponseWrapper addResponse(
-            int id, HttpRequest req, DecodedHttpResponse res, RequestLogBuilder logBuilder,
+            int id, @Nullable HttpRequest req, DecodedHttpResponse res, RequestLogBuilder logBuilder,
             long responseTimeoutMillis, long maxContentLength) {
 
         final HttpResponseWrapper resWrapper =
@@ -177,6 +177,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                         final ByteBuf data = content.content();
                         final int dataLength = data.readableBytes();
                         if (dataLength > 0) {
+                            assert res != null;
                             final long maxContentLength = res.maxContentLength();
                             if (maxContentLength > 0 && res.writtenBytes() > maxContentLength - dataLength) {
                                 fail(ctx, ContentTooLargeException.get());
@@ -188,6 +189,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
 
                         if (msg instanceof LastHttpContent) {
                             final HttpResponseWrapper res = removeResponse(resId++);
+                            assert res != null;
                             assert this.res == res;
                             this.res = null;
 

File: core/src/main/java/com/linecorp/armeria/client/SessionProtocolNegotiationException.java
Patch:
@@ -32,6 +32,7 @@ public final class SessionProtocolNegotiationException extends RuntimeException
     private static final long serialVersionUID = 5788454584691399858L;
 
     private final SessionProtocol expected;
+    @Nullable
     private final SessionProtocol actual;
 
     /**

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/NonBlockingCircuitBreaker.java
Patch:
@@ -84,7 +84,7 @@ public void onSuccess() {
     }
 
     @Override
-    public void onFailure(Throwable cause) {
+    public void onFailure(@Nullable Throwable cause) {
         try {
             if (cause != null && !config.exceptionFilter().shouldDealWith(cause)) {
                 return;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/DynamicEndpointGroup.java
Patch:
@@ -44,7 +44,7 @@ public final List<Endpoint> endpoints() {
     protected final void addEndpoint(Endpoint e) {
         endpointsLock.lock();
         try {
-            ImmutableList.Builder<Endpoint> newEndpointsBuilder = ImmutableList.builder();
+            final ImmutableList.Builder<Endpoint> newEndpointsBuilder = ImmutableList.builder();
             newEndpointsBuilder.addAll(endpoints);
             newEndpointsBuilder.add(e);
             endpoints = newEndpointsBuilder.build();

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HttpHealthCheckedEndpointGroup.java
Patch:
@@ -107,7 +107,7 @@ private HttpEndpointHealthChecker(ClientFactory clientFactory,
         public CompletableFuture<Boolean> isHealthy(Endpoint endpoint) {
             return httpClient.get(healthCheckPath)
                              .aggregate()
-                             .thenApply(message -> message.status().equals(HttpStatus.OK));
+                             .thenApply(message -> HttpStatus.OK.equals(message.status()));
         }
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java
Patch:
@@ -20,6 +20,8 @@
 
 import java.util.concurrent.TimeUnit;
 
+import javax.annotation.Nullable;
+
 import com.linecorp.armeria.client.Client;
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.ResponseTimeoutException;
@@ -173,6 +175,7 @@ private static class State {
         private final long responseTimeoutMillis;
         private final long deadlineNanos;
 
+        @Nullable
         private Backoff lastBackoff;
         private int currentAttemptNoWithLastBackoff;
         private int totalAttemptNo;

File: core/src/main/java/com/linecorp/armeria/common/DefaultRpcResponse.java
Patch:
@@ -38,6 +38,7 @@ public class DefaultRpcResponse extends CompletableFuture<Object> implements Rpc
     private static final AtomicReferenceFieldUpdater<DefaultRpcResponse, Throwable> causeUpdater =
             AtomicReferenceFieldUpdater.newUpdater(DefaultRpcResponse.class, Throwable.class, "cause");
 
+    @Nullable
     private volatile Throwable cause;
 
     /**
@@ -64,6 +65,7 @@ public DefaultRpcResponse(Throwable cause) {
         completeExceptionally(cause);
     }
 
+    @Nullable
     @Override
     public final Throwable cause() {
         return cause;

File: core/src/main/java/com/linecorp/armeria/common/Flags.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.function.LongPredicate;
 import java.util.function.Predicate;
 
+import javax.annotation.Nullable;
 import javax.net.ssl.SSLEngine;
 
 import org.slf4j.Logger;
@@ -543,6 +544,7 @@ private static String getNormalized(String name, String defaultValue, Predicate<
         return defaultValue;
     }
 
+    @Nullable
     private static String getLowerCased(String fullName) {
         String value = System.getProperty(fullName);
         if (value != null) {

File: core/src/main/java/com/linecorp/armeria/common/MediaTypeJsonDeserializer.java
Patch:
@@ -17,6 +17,8 @@
 
 import java.io.IOException;
 
+import javax.annotation.Nullable;
+
 import com.fasterxml.jackson.core.JsonParser;
 import com.fasterxml.jackson.databind.DeserializationContext;
 import com.fasterxml.jackson.databind.JsonDeserializer;
@@ -37,6 +39,7 @@ public MediaTypeJsonDeserializer() {
         super(MediaType.class);
     }
 
+    @Nullable
     @Override
     public MediaType deserialize(JsonParser p, DeserializationContext ctx)
             throws IOException {

File: core/src/main/java/com/linecorp/armeria/common/RpcResponse.java
Patch:
@@ -95,6 +95,7 @@ static RpcResponse from(CompletionStage<?> stage) {
      * @return the cause, or
      *         {@code null} if this {@link RpcResponse} completed successfully or did not complete yet.
      */
+    @Nullable
     Throwable cause();
 
     /**

File: core/src/main/java/com/linecorp/armeria/common/Scheme.java
Patch:
@@ -21,6 +21,8 @@
 import java.util.Map;
 import java.util.Optional;
 
+import javax.annotation.Nullable;
+
 import com.google.common.base.Ascii;
 import com.google.common.collect.ImmutableMap;
 
@@ -72,7 +74,7 @@ public final class Scheme implements Comparable<Scheme> {
      * @return {@link Optional#empty()} if the specified {@link String} could not be parsed or
      *         there is no such {@link Scheme} available
      */
-    public static Optional<Scheme> tryParse(String scheme) {
+    public static Optional<Scheme> tryParse(@Nullable String scheme) {
         if (scheme == null) {
             return Optional.empty();
         }

File: core/src/main/java/com/linecorp/armeria/common/logging/LogLevel.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.linecorp.armeria.common.logging;
 
+import javax.annotation.Nullable;
+
 import org.slf4j.Logger;
 
 /**
@@ -118,7 +120,7 @@ public void log(Logger logger, String format, Object arg1) {
      * Logs a message at this level.
      */
     @SuppressWarnings("MethodParameterNamingConvention")
-    public void log(Logger logger, String format, Object arg1, Object arg2) {
+    public void log(Logger logger, String format, @Nullable Object arg1, @Nullable Object arg2) {
         switch (this) {
             case TRACE:
                 logger.trace(format, arg1, arg2);

File: core/src/main/java/com/linecorp/armeria/common/stream/FilteredStreamMessage.java
Patch:
@@ -20,6 +20,8 @@
 
 import java.util.concurrent.CompletableFuture;
 
+import javax.annotation.Nullable;
+
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 import org.slf4j.Logger;
@@ -91,6 +93,7 @@ protected void beforeComplete(Subscriber<? super U> subscriber) {}
      * subscription. This method may rewrite the {@code cause} and then return a new one so that the new
      * {@link Throwable} would be passed to {@link Subscriber#onError(Throwable)}.
      */
+    @Nullable
     protected Throwable beforeError(Subscriber<? super U> subscriber, Throwable cause) {
         return cause;
     }

File: core/src/main/java/com/linecorp/armeria/common/util/CompletionActions.java
Patch:
@@ -18,6 +18,8 @@
 
 import java.util.concurrent.CompletionStage;
 
+import javax.annotation.Nullable;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -37,6 +39,7 @@ public final class CompletionActions {
      *
      * @return {@code null}
      */
+    @Nullable
     public static <T> T log(Throwable cause) {
         logger.warn("Unexpected exception from a completion action:", cause);
         return null;

File: core/src/main/java/com/linecorp/armeria/internal/AbstractHttp2ConnectionHandler.java
Patch:
@@ -92,7 +92,7 @@ protected void onConnectionError(ChannelHandlerContext ctx, boolean outbound,
         super.onConnectionError(ctx, outbound, cause, http2Ex);
     }
 
-    private static String goAwayDebugData(@Nullable Http2Exception http2Ex, Throwable cause) {
+    private static String goAwayDebugData(@Nullable Http2Exception http2Ex, @Nullable Throwable cause) {
         final StringBuilder buf = new StringBuilder(256);
         final String type;
         final String message;

File: core/src/main/java/com/linecorp/armeria/internal/Http2ObjectEncoder.java
Patch:
@@ -18,6 +18,8 @@
 
 import static java.util.Objects.requireNonNull;
 
+import javax.annotation.Nullable;
+
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.stream.ClosedPublisherException;
@@ -73,6 +75,7 @@ protected ChannelFuture doWriteReset(ChannelHandlerContext ctx, int id, int stre
         return encoder.writeRstStream(ctx, streamId, error.code(), ctx.newPromise());
     }
 
+    @Nullable
     private ChannelFuture validateStream(ChannelHandlerContext ctx, int streamId) {
         final Http2Stream stream = encoder.connection().stream(streamId);
         if (stream != null) {

File: core/src/main/java/com/linecorp/armeria/internal/InboundTrafficController.java
Patch:
@@ -35,6 +35,7 @@ public static int numDeferredReads() {
         return numDeferredReads;
     }
 
+    @Nullable
     private final ChannelConfig cfg;
     private final int highWatermark;
     private final int lowWatermark;

File: core/src/main/java/com/linecorp/armeria/server/AbstractPathMapping.java
Patch:
@@ -20,6 +20,8 @@
 
 import java.util.Optional;
 
+import javax.annotation.Nullable;
+
 /**
  * A skeletal {@link PathMapping} implementation. Implement {@link #doApply(PathMappingContext)}.
  */
@@ -67,7 +69,7 @@ public String loggerName() {
         return "__UNKNOWN__";
     }
 
-    static String loggerName(String pathish) {
+    static String loggerName(@Nullable String pathish) {
         if (pathish == null) {
             return "__UNKNOWN__";
         }

File: core/src/main/java/com/linecorp/armeria/server/AbstractVirtualHostBuilder.java
Patch:
@@ -89,7 +89,7 @@ abstract class AbstractVirtualHostBuilder<B extends AbstractVirtualHostBuilder>
             final String line = new BufferedReader(new InputStreamReader(process.getInputStream())).readLine();
             if (line == null) {
                 logger.warn("The 'hostname' command returned nothing; " +
-                            "using InetAddress.getLocalHost() instead", line);
+                            "using InetAddress.getLocalHost() instead");
             } else {
                 hostname = normalizeDefaultHostname(line.trim());
                 logger.info("Hostname: {} (via 'hostname' command)", hostname);

File: core/src/main/java/com/linecorp/armeria/server/DecodedHttpRequest.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.linecorp.armeria.server;
 
+import javax.annotation.Nullable;
+
 import com.linecorp.armeria.common.DefaultHttpRequest;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaders;
@@ -32,6 +34,7 @@ final class DecodedHttpRequest extends DefaultHttpRequest {
     private final boolean keepAlive;
     private final InboundTrafficController inboundTrafficController;
     private final long defaultMaxRequestLength;
+    @Nullable
     private ServiceRequestContext ctx;
     private long transferredBytes;
 

File: core/src/main/java/com/linecorp/armeria/server/PathMappingContextWrapper.java
Patch:
@@ -34,6 +34,7 @@
 class PathMappingContextWrapper implements PathMappingContext {
 
     private final PathMappingContext delegate;
+    @Nullable
     private List<Object> summary;
 
     PathMappingContextWrapper(PathMappingContext delegate) {

File: core/src/main/java/com/linecorp/armeria/server/RouteCache.java
Patch:
@@ -21,6 +21,8 @@
 import java.io.OutputStream;
 import java.util.function.Function;
 
+import javax.annotation.Nullable;
+
 import com.github.benmanes.caffeine.cache.Cache;
 import com.github.benmanes.caffeine.cache.Caffeine;
 import com.google.common.base.MoreObjects;
@@ -39,6 +41,7 @@
  */
 final class RouteCache {
 
+    @Nullable
     private static final Cache<PathMappingContext, ServiceConfig> CACHE =
             Flags.routeCacheSpec().map(RouteCache::<ServiceConfig>buildCache)
                  .orElse(null);

File: core/src/main/java/com/linecorp/armeria/server/Server.java
Patch:
@@ -226,7 +226,6 @@ private void start(CompletableFuture<Void> future) {
         }
 
         if (!stateManager.enterStarting(future, this::stop0)) {
-            assert future.isCompletedExceptionally();
             return;
         }
 
@@ -465,6 +464,7 @@ static final class State {
         static final State STOPPED = new State(StateType.STOPPED, null);
 
         final StateType type;
+        @Nullable
         final CompletableFuture<Void> future;
 
         State(StateType type, @Nullable CompletableFuture<Void> future) {
@@ -534,7 +534,7 @@ CompletableFuture<Void> enterStopping(CompletableFuture<Void> future) {
             return future;
         }
 
-        boolean enterStopping(State expect, CompletableFuture<Void> future) {
+        boolean enterStopping(@Nullable State expect, CompletableFuture<Void> future) {
             final State update = new State(StateType.STOPPING, future);
             final State oldState;
             if (expect != null) {

File: core/src/main/java/com/linecorp/armeria/server/ServiceConfig.java
Patch:
@@ -41,9 +41,11 @@ public final class ServiceConfig {
     /**
      * Initialized later by {@link VirtualHost} via {@link #build(VirtualHost)}.
      */
+    @Nullable
     private VirtualHost virtualHost;
 
     private final PathMapping pathMapping;
+    @Nullable
     private final String loggerName;
     private final Service<HttpRequest, HttpResponse> service;
 

File: core/src/main/java/com/linecorp/armeria/server/annotation/ResponseConverterFunction.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.linecorp.armeria.server.annotation;
 
+import javax.annotation.Nullable;
+
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.internal.FallthroughException;
 import com.linecorp.armeria.server.ServiceRequestContext;
@@ -34,7 +36,7 @@ public interface ResponseConverterFunction {
      * Calls {@link ResponseConverterFunction#fallthrough()} or throws a {@link FallthroughException} if
      * this converter cannot convert the {@code result} to the {@link HttpResponse}.
      */
-    HttpResponse convertResponse(ServiceRequestContext ctx, Object result) throws Exception;
+    HttpResponse convertResponse(ServiceRequestContext ctx, @Nullable Object result) throws Exception;
 
     /**
      * Throws a {@link FallthroughException} in order to try to convert {@code result} to

File: core/src/main/java/com/linecorp/armeria/server/docs/DocService.java
Patch:
@@ -74,6 +74,7 @@ public class DocService extends AbstractCompositeService<HttpRequest, HttpRespon
     private final Map<String, ListMultimap<String, HttpHeaders>> exampleHttpHeaders;
     private final Map<String, ListMultimap<String, String>> exampleRequests;
 
+    @Nullable
     private Server server;
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/docs/EnumInfo.java
Patch:
@@ -36,6 +36,7 @@ public final class EnumInfo implements NamedTypeInfo {
 
     private final String name;
     private final List<EnumValueInfo> values;
+    @Nullable
     private final String docString;
 
     /**
@@ -111,8 +112,7 @@ public String toString() {
     }
 
     private static Iterable<EnumValueInfo> toEnumValues(Class<? extends Enum<?>> enumType) {
-        @SuppressWarnings("rawtypes")
-        final Class rawEnumType = requireNonNull(enumType, "enumType");
+        final Class<?> rawEnumType = requireNonNull(enumType, "enumType");
         @SuppressWarnings({ "unchecked", "rawtypes" })
         final Set<Enum> values = EnumSet.allOf((Class<Enum>) rawEnumType);
         return values.stream().map(e -> new EnumValueInfo(e.name()))::iterator;

File: core/src/main/java/com/linecorp/armeria/server/docs/EnumValueInfo.java
Patch:
@@ -30,6 +30,7 @@
 public final class EnumValueInfo {
 
     private final String name;
+    @Nullable
     private final String docString;
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/docs/ExceptionInfo.java
Patch:
@@ -38,6 +38,7 @@ public final class ExceptionInfo implements NamedTypeInfo {
 
     private final String name;
     private final List<FieldInfo> fields;
+    @Nullable
     private final String docString;
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/docs/FieldInfo.java
Patch:
@@ -36,6 +36,7 @@ public final class FieldInfo {
     private final String name;
     private final FieldRequirement requirement;
     private final TypeSignature typeSignature;
+    @Nullable
     private final String docString;
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/docs/MethodInfo.java
Patch:
@@ -52,6 +52,7 @@ public final class MethodInfo {
     private final Set<EndpointInfo> endpoints;
     private final List<HttpHeaders> exampleHttpHeaders;
     private final List<String> exampleRequests;
+    @Nullable
     private final String docString;
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/docs/ServiceInfo.java
Patch:
@@ -47,6 +47,7 @@ public final class ServiceInfo {
     private final String name;
     private final Set<MethodInfo> methods;
     private final List<HttpHeaders> exampleHttpHeaders;
+    @Nullable
     private final String docString;
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/docs/StructInfo.java
Patch:
@@ -38,6 +38,7 @@ public final class StructInfo implements NamedTypeInfo {
 
     private final String name;
     private final List<FieldInfo> fields;
+    @Nullable
     private final String docString;
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/docs/TypeSignature.java
Patch:
@@ -23,6 +23,8 @@
 import java.util.Optional;
 import java.util.regex.Pattern;
 
+import javax.annotation.Nullable;
+
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import com.google.common.base.Joiner;
 import com.google.common.collect.ImmutableList;
@@ -205,6 +207,7 @@ public static TypeSignature ofUnresolved(String unresolvedTypeName) {
     }
 
     private final String name;
+    @Nullable
     private final Object namedTypeDescriptor;
     private final List<TypeSignature> typeParameters;
 

File: core/src/main/java/com/linecorp/armeria/server/encoding/HttpEncoders.java
Patch:
@@ -33,7 +33,7 @@ final class HttpEncoders {
 
     @Nullable
     static HttpEncodingType getWrapperForRequest(HttpRequest request) {
-        String acceptEncoding = request.headers().get(HttpHeaderNames.ACCEPT_ENCODING);
+        final String acceptEncoding = request.headers().get(HttpHeaderNames.ACCEPT_ENCODING);
         if (acceptEncoding == null) {
             return null;
         }
@@ -57,13 +57,14 @@ static DeflaterOutputStream getEncodingOutputStream(HttpEncodingType encodingTyp
     }
 
     // Copied from netty's HttpContentCompressor.
+    @Nullable
     private static HttpEncodingType determineEncoding(String acceptEncoding) {
         float starQ = -1.0f;
         float gzipQ = -1.0f;
         float deflateQ = -1.0f;
         for (String encoding : acceptEncoding.split(",")) {
             float q = 1.0f;
-            int equalsPos = encoding.indexOf('=');
+            final int equalsPos = encoding.indexOf('=');
             if (equalsPos != -1) {
                 try {
                     q = Float.parseFloat(encoding.substring(equalsPos + 1));

File: core/src/main/java/com/linecorp/armeria/server/file/HttpVfs.java
Patch:
@@ -123,12 +123,13 @@ public String toString() {
          *
          * @return {@code null} if unknown
          */
+        @Nullable
         MediaType mediaType();
 
         /**
          * The content encoding of the entry. Will be set for precompressed files.
          *
-         * @return {code null} if not compressed
+         * @return {@code null} if not compressed
          */
         @Nullable
         String contentEncoding();
@@ -223,7 +224,7 @@ protected HttpData readContent(InputStream in, int length) throws IOException {
                 return HttpData.EMPTY_DATA;
             }
 
-            byte[] buf = new byte[length];
+            final byte[] buf = new byte[length];
             int endOffset = 0;
 
             for (;;) {

File: core/src/main/java/com/linecorp/armeria/server/healthcheck/HttpHealthCheckService.java
Patch:
@@ -20,6 +20,8 @@
 import java.util.Collections;
 import java.util.List;
 
+import javax.annotation.Nullable;
+
 import com.linecorp.armeria.common.AggregatedHttpMessage;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpRequest;
@@ -78,6 +80,7 @@ public class HttpHealthCheckService extends AbstractHttpService {
 
     final SettableHealthChecker serverHealth;
 
+    @Nullable
     private Server server;
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/logging/AccessLogFormats.java
Patch:
@@ -201,6 +201,7 @@ private static AccessLogComponent newAccessLogComponent(char token,
         }
 
         if (TextComponent.isSupported(type)) {
+            assert variable != null;
             return ofText(variable);
         }
 
@@ -212,9 +213,11 @@ private static AccessLogComponent newAccessLogComponent(char token,
             return new CommonComponent(type, addQuote, condition);
         }
         if (RequestHeaderComponent.isSupported(type)) {
+            assert variable != null;
             return new RequestHeaderComponent(AsciiString.of(variable), addQuote, condition);
         }
         if (AttributeComponent.isSupported(type)) {
+            assert variable != null;
             final Function<Object, String> stringifier;
             final String[] components = variable.split(":");
             if (components.length == 2) {

File: core/src/main/java/com/linecorp/armeria/server/throttling/CircuitBreakerThrottlingStrategy.java
Patch:
@@ -19,6 +19,8 @@
 
 import java.util.concurrent.CompletableFuture;
 
+import javax.annotation.Nullable;
+
 import com.linecorp.armeria.client.circuitbreaker.CircuitBreaker;
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.server.ServiceRequestContext;
@@ -41,7 +43,7 @@ public CircuitBreakerThrottlingStrategy(CircuitBreaker circuitBreaker) {
      * Creates a new named {@link ThrottlingStrategy} that determines whether a request should be throttled
      * or not using a given {@code circuitBreaker}.
      */
-    public CircuitBreakerThrottlingStrategy(CircuitBreaker circuitBreaker, String name) {
+    public CircuitBreakerThrottlingStrategy(CircuitBreaker circuitBreaker, @Nullable String name) {
         super(name);
         this.circuitBreaker = requireNonNull(circuitBreaker, "circuitBreaker");
     }

File: logback/src/main/java/com/linecorp/armeria/common/logback/UnionMap.java
Patch:
@@ -21,13 +21,16 @@
 import java.util.Map;
 import java.util.Set;
 
+import javax.annotation.Nullable;
+
 import com.google.common.collect.Sets;
 
 final class UnionMap<K, V> extends AbstractMap<K, V> {
 
     private final Map<K, V> first;
     private final Map<K, V> second;
     private int size = -1;
+    @Nullable
     private Set<Entry<K, V>> entrySet;
 
     UnionMap(Map<K, V> first, Map<K, V> second) {

File: spring-boot/autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java
Patch:
@@ -71,6 +71,7 @@ public static class Port {
         /**
          * Returns the IP address {@link Server} uses.
          */
+        @Nullable
         public String getIp() {
             return ip;
         }
@@ -86,6 +87,7 @@ public Port setIp(String ip) {
         /**
          * Returns the network interface {@link Server} use.
          */
+        @Nullable
         public String getIface() {
             return iface;
         }

File: testing/src/main/java/com/linecorp/armeria/testing/server/ServerRule.java
Patch:
@@ -24,6 +24,8 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.atomic.AtomicReference;
 
+import javax.annotation.Nullable;
+
 import org.junit.rules.ExternalResource;
 import org.junit.rules.TestRule;
 
@@ -134,7 +136,7 @@ public Server server() {
         return server;
     }
 
-    private static boolean isStopped(Server server) {
+    private static boolean isStopped(@Nullable Server server) {
         return server == null || server.activePorts().isEmpty();
     }
 

File: thrift/src/main/java/com/linecorp/armeria/common/thrift/ThriftCall.java
Patch:
@@ -18,6 +18,8 @@
 
 import static java.util.Objects.requireNonNull;
 
+import javax.annotation.Nullable;
+
 import org.apache.thrift.TBase;
 import org.apache.thrift.protocol.TMessage;
 import org.apache.thrift.protocol.TMessageType;
@@ -56,7 +58,7 @@ public ThriftCall(TMessage header, TBase<?, ?> args) {
     }
 
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(@Nullable Object o) {
         if (this == o) {
             return true;
         }

File: thrift/src/main/java/com/linecorp/armeria/common/thrift/text/MapContext.java
Patch:
@@ -30,6 +30,8 @@
 // =================================================================================================
 package com.linecorp.armeria.common.thrift.text;
 
+import javax.annotation.Nullable;
+
 import com.fasterxml.jackson.databind.JsonNode;
 
 /**
@@ -42,7 +44,7 @@
 class MapContext extends PairContext {
 
     // SUPPRESS CHECKSTYLE JavadocMethod
-    protected MapContext(JsonNode json) {
+    protected MapContext(@Nullable JsonNode json) {
         super(json);
     }
 

File: thrift/src/main/java/com/linecorp/armeria/server/thrift/ThriftDocServicePlugin.java
Patch:
@@ -242,7 +242,7 @@ private static MethodInfo newMethodInfo(String name,
     }
 
     private static NamedTypeInfo newNamedTypeInfo(TypeSignature typeSignature) {
-        Class<?> type = (Class<?>) typeSignature.namedTypeDescriptor().get();
+        final Class<?> type = (Class<?>) typeSignature.namedTypeDescriptor().get();
         if (type.isEnum()) {
             return newEnumInfo(type);
         }
@@ -491,6 +491,7 @@ public Optional<String> serializeExampleRequest(String serviceName, String metho
         }
     }
 
+    @Nullable
     private static TBase<?, ?> asTBase(Object exampleRequest) {
         final TBase<?, ?> exampleTBase = (TBase<?, ?>) exampleRequest;
         final Class<?> type = exampleTBase.getClass();

File: tomcat/src/main/java/com/linecorp/armeria/server/tomcat/ManagedConnectorFactory.java
Patch:
@@ -69,6 +69,7 @@ public Connector apply(String hostname) {
         // Retrieve the components configured by newServer(), so we can use it in checkConfiguration().
         final Service service = server.findServices()[0];
         final Engine engine = TomcatUtil.engine(service);
+        assert engine != null;
         final StandardHost host = (StandardHost) engine.findChildren()[0];
         final Context context = (Context) host.findChildren()[0];
 

File: benchmarks/src/jmh/java/com/linecorp/armeria/core/HttpServerBenchmark.java
Patch:
@@ -67,7 +67,6 @@ String uriText() {
     @Setup
     public void startServer() throws Exception {
         server = new ServerBuilder()
-                .port(0, HTTP)
                 .service("/empty", ((ctx, req) -> HttpResponse.of(HttpStatus.OK)))
                 .defaultRequestTimeout(Duration.ZERO)
                 .meterRegistry(NoopMeterRegistry.get())

File: benchmarks/src/jmh/java/com/linecorp/armeria/grpc/downstream/DownstreamSimpleBenchmark.java
Patch:
@@ -59,7 +59,6 @@ protected GithubServiceFutureStub normalFutureClient() {
     @Override
     protected void setUp() throws Exception {
         server = new ServerBuilder()
-                .port(0, HTTP)
                 .serviceUnder("/", new GrpcServiceBuilder().addService(new GithubApiService()).build())
                 .build();
         server.start().join();

File: benchmarks/src/jmh/java/com/linecorp/armeria/grpc/downstream/LargePayloadBenchmark.java
Patch:
@@ -67,7 +67,6 @@ public class LargePayloadBenchmark {
     @Setup
     public void setUp() {
         server = new ServerBuilder()
-                .port(0, HTTP)
                 .serviceUnder("/", new GrpcServiceBuilder().addService(
                         new BinaryProxyImplBase() {
                             @Override

File: benchmarks/src/jmh/java/com/linecorp/armeria/thrift/PooledResponseBufferBenchmark.java
Patch:
@@ -141,7 +141,6 @@ public void onComplete() {
     @Setup
     public void startServer() throws Exception {
         ServerBuilder sb = new ServerBuilder()
-                .port(0, HTTP)
                 .service("/a", THttpService.of(
                         (AsyncIface) (name, resultHandler) ->
                                 resultHandler.onComplete(RESPONSE))

File: core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.linecorp.armeria.client;
 
-import static com.linecorp.armeria.common.SessionProtocol.HTTP;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.awaitility.Awaitility.await;
@@ -172,8 +171,6 @@ protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)
     public static final ServerRule server = new ServerRule() {
         @Override
         protected void configure(ServerBuilder sb) throws Exception {
-            sb.port(0, HTTP);
-
             sb.service("/httptestbody", new AbstractHttpService() {
 
                 @Override

File: core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/HttpHealthCheckedEndpointGroupTest.java
Patch:
@@ -67,9 +67,9 @@ protected HealthCheckServerRule() {
 
         @Override
         protected void configure(ServerBuilder sb) throws Exception {
-            sb.port(0, HTTP);
-            sb.port(0, HTTPS);
-            sb.sslContext(HTTPS, certificate.certificateFile(), certificate.privateKeyFile());
+            sb.http(0);
+            sb.https(0);
+            sb.tls(certificate.certificateFile(), certificate.privateKeyFile());
             sb.service(HEALTH_CHECK_PATH, new HttpHealthCheckService());
         }
     }

File: core/src/test/java/com/linecorp/armeria/internal/ConnectionLimitingHandlerIntegrationTest.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.linecorp.armeria.internal;
 
-import static org.apache.http.HttpVersion.HTTP;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.awaitility.Awaitility.await;
@@ -43,7 +42,6 @@ public class ConnectionLimitingHandlerIntegrationTest {
         @Override
         protected void configure(ServerBuilder sb) throws Exception {
             sb.workerGroup(EventLoopGroups.newEventLoopGroup(1), true);
-            sb.port(0, HTTP);
             sb.maxNumConnections(2);
             sb.serviceUnder("/", new AbstractHttpService() {});
         }

File: core/src/test/java/com/linecorp/armeria/server/HttpServerPathTest.java
Patch:
@@ -32,7 +32,6 @@
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
-import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.testing.server.ServerRule;
 
 import io.netty.util.NetUtil;
@@ -43,7 +42,6 @@ public class HttpServerPathTest {
     public static final ServerRule server = new ServerRule() {
         @Override
         protected void configure(ServerBuilder sb) throws Exception {
-            sb.port(0, SessionProtocol.HTTP);
             sb.service("/service/foo", new AbstractHttpService() {
                 @Override
                 protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req) {

File: core/src/test/java/com/linecorp/armeria/server/RedirectServiceTest.java
Patch:
@@ -64,7 +64,7 @@ protected void configure(ServerBuilder sb) throws Exception {
             try (ServerSocket ss = new ServerSocket(0)) {
                 final int serverRule1Port = ss.getLocalPort();
 
-                sb.port(serverRule1Port, "HTTP");
+                sb.http(serverRule1Port);
                 sb.service("/new0/branch1", SERVICE_BRANCH_1);
                 sb.service("/new0/branch2", SERVICE_BRANCH_2);
 

File: core/src/test/java/com/linecorp/armeria/server/healthcheck/HttpHealthCheckServiceTest.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.linecorp.armeria.server.healthcheck;
 
-import static com.linecorp.armeria.common.SessionProtocol.HTTP;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.when;
@@ -115,7 +114,6 @@ private void assertNotOk() throws Exception {
     @Test
     public void testGet() throws Exception {
         final ServerBuilder builder = new ServerBuilder();
-        builder.port(0, HTTP);
         builder.service("/l7check", new HttpHealthCheckService());
         final Server server = builder.build();
         try {
@@ -143,7 +141,6 @@ public void testGet() throws Exception {
     @Test
     public void testHead() throws Exception {
         final ServerBuilder builder = new ServerBuilder();
-        builder.port(0, HTTP);
         builder.service("/l7check", new HttpHealthCheckService());
         final Server server = builder.build();
         try {

File: grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.linecorp.armeria.client.grpc;
 
-import static com.linecorp.armeria.common.SessionProtocol.HTTP;
 import static com.linecorp.armeria.grpc.testing.Messages.PayloadType.COMPRESSABLE;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.catchThrowable;
@@ -105,7 +104,6 @@ public class GrpcClientTest {
         @Override
         protected void configure(ServerBuilder sb) throws Exception {
             sb.workerGroup(EventLoopGroups.newEventLoopGroup(1), true);
-            sb.port(0, HTTP);
             sb.defaultMaxRequestLength(MAX_MESSAGE_SIZE);
             sb.idleTimeoutMillis(0);
 

File: grpc/src/test/java/com/linecorp/armeria/it/grpc/GrpcMetricsIntegrationTest.java
Patch:
@@ -44,7 +44,6 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.SerializationFormat;
-import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
 import com.linecorp.armeria.common.metric.MeterIdPrefix;
 import com.linecorp.armeria.common.metric.MeterIdPrefixFunction;
@@ -95,7 +94,6 @@ public void unaryCall2(SimpleRequest request, StreamObserver<SimpleResponse> res
         @Override
         protected void configure(ServerBuilder sb) throws Exception {
             sb.meterRegistry(registry);
-            sb.port(0, SessionProtocol.HTTP);
             sb.serviceUnder("/", new GrpcServiceBuilder()
                          .addService(new TestServiceImpl())
                          .enableUnframedRequests(true)

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceServerTest.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.linecorp.armeria.server.grpc;
 
-import static com.linecorp.armeria.common.SessionProtocol.HTTP;
 import static com.linecorp.armeria.internal.grpc.GrpcTestUtil.REQUEST_MESSAGE;
 import static com.linecorp.armeria.internal.grpc.GrpcTestUtil.RESPONSE_MESSAGE;
 import static org.assertj.core.api.Assertions.assertThat;
@@ -262,7 +261,6 @@ public void streamClientCancelsBeforeResponseClosedCancels(
         @Override
         protected void configure(ServerBuilder sb) throws Exception {
             sb.workerGroup(EventLoopGroups.newEventLoopGroup(1), true);
-            sb.port(0, HTTP);
             sb.defaultMaxRequestLength(0);
 
             sb.serviceUnder("/", new GrpcServiceBuilder()

File: it/src/test/java/com/linecorp/armeria/server/grpc/interop/ArmeriaGrpcServerInteropTest.java
Patch:
@@ -31,7 +31,6 @@
 import com.google.common.collect.ImmutableList;
 import com.squareup.okhttp.ConnectionSpec;
 
-import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.ServerListenerAdapter;
@@ -94,8 +93,8 @@ public void serverStopped(Server server) throws Exception {
                 }
             });
 
-            sb.port(new InetSocketAddress("127.0.0.1", 0), SessionProtocol.HTTPS);
-            sb.sslContext(newSslContext());
+            sb.https(new InetSocketAddress("127.0.0.1", 0));
+            sb.tls(newSslContext());
             sb.defaultMaxRequestLength(16 * 1024 * 1024);
             sb.serviceUnder("/", new GrpcServiceBuilder()
                     .addService(ServerInterceptors.intercept(

File: thrift/src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTest.java
Patch:
@@ -189,11 +189,11 @@ String path(SerializationFormat serializationFormat) {
         final ServerBuilder sb = new ServerBuilder();
 
         try {
-            sb.port(0, HTTP);
-            sb.port(0, HTTPS);
+            sb.http(0);
+            sb.https(0);
 
             ssc = new SelfSignedCertificate("127.0.0.1");
-            sb.sslContext(HTTPS, ssc.certificate(), ssc.privateKey());
+            sb.tls(ssc.certificate(), ssc.privateKey());
 
             for (Handlers h : Handlers.values()) {
                 for (SerializationFormat defaultSerializationFormat : ThriftSerializationFormats.values()) {

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/AbstractThriftOverHttpTest.java
Patch:
@@ -98,11 +98,11 @@ protected String getResponse(String name) {
         final ServerBuilder sb = new ServerBuilder();
 
         try {
-            sb.port(0, HTTP);
-            sb.port(0, HTTPS);
+            sb.http(0);
+            sb.https(0);
 
             ssc = new SelfSignedCertificate("127.0.0.1");
-            sb.sslContext(HTTPS, ssc.certificate(), ssc.privateKey());
+            sb.tls(ssc.certificate(), ssc.privateKey());
 
             sb.service("/hello", THttpService.of(
                     (AsyncIface) (name, resultHandler) -> resultHandler.onComplete("Hello, " + name + '!')));

File: zookeeper/src/test/java/com/linecorp/armeria/server/zookeeper/ZooKeeperRegistrationTest.java
Patch:
@@ -36,7 +36,6 @@
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
-import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.util.CompletionActions;
 import com.linecorp.armeria.common.zookeeper.NodeValueCodec;
 import com.linecorp.armeria.server.AbstractHttpService;
@@ -61,7 +60,7 @@ public void startServers() {
         listeners = new ArrayList<>();
 
         for (Endpoint endpoint : sampleEndpoints) {
-            Server server = new ServerBuilder().port(endpoint.port(), SessionProtocol.HTTP)
+            Server server = new ServerBuilder().http(endpoint.port())
                                                .service("/", new EchoService())
                                                .build();
             ZooKeeperUpdatingListener listener;

File: core/src/main/java/com/linecorp/armeria/client/DecodedHttpResponse.java
Patch:
@@ -48,8 +48,8 @@ protected EventExecutor defaultSubscriberExecutor() {
     }
 
     @Override
-    public boolean write(HttpObject obj) {
-        final boolean published = super.write(obj);
+    public boolean tryWrite(HttpObject obj) {
+        final boolean published = super.tryWrite(obj);
         if (published && obj instanceof HttpData) {
             final int length = ((HttpData) obj).length();
             inboundTrafficController.inc(length);

File: core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessageAndWriter.java
Patch:
@@ -54,7 +54,7 @@ enum State {
     }
 
     @Override
-    public boolean write(T obj) {
+    public boolean tryWrite(T obj) {
         requireNonNull(obj, "obj");
         if (obj instanceof ReferenceCounted) {
             ((ReferenceCounted) obj).touch();

File: core/src/main/java/com/linecorp/armeria/server/DecodedHttpRequest.java
Patch:
@@ -90,8 +90,8 @@ protected EventLoop defaultSubscriberExecutor() {
     }
 
     @Override
-    public boolean write(HttpObject obj) {
-        final boolean published = super.write(obj);
+    public boolean tryWrite(HttpObject obj) {
+        final boolean published = super.tryWrite(obj);
         if (published && obj instanceof HttpData) {
             final int length = ((HttpData) obj).length();
             inboundTrafficController.inc(length);

File: core/src/test/java/com/linecorp/armeria/common/stream/AbstractStreamMessageTest.java
Patch:
@@ -184,7 +184,7 @@ public void releaseOnConsumption_ByteBuf() throws Exception {
         StreamMessage<ByteBuf> stream = newStream(ImmutableList.of(buf));
 
         if (stream instanceof StreamWriter) {
-            assertThat(((StreamWriter<ByteBuf>) stream).write(buf)).isTrue();
+            ((StreamWriter<ByteBuf>) stream).write(buf);
             ((StreamWriter<?>) stream).close();
         }
         assertThat(buf.refCnt()).isEqualTo(1);
@@ -222,7 +222,7 @@ public void releaseOnConsumption_HttpData() throws Exception {
         StreamMessage<ByteBufHolder> stream = newStream(ImmutableList.of(data));
 
         if (stream instanceof StreamWriter) {
-            assertThat(((StreamWriter<ByteBufHolder>) stream).write(data)).isTrue();
+            ((StreamWriter<ByteBufHolder>) stream).write(data);
             ((StreamWriter<?>) stream).close();
         }
         assertThat(data.refCnt()).isEqualTo(1);

File: core/src/test/java/com/linecorp/armeria/common/stream/DefaultStreamMessageVerification.java
Patch:
@@ -48,7 +48,7 @@ private static void stream(long elements, boolean abort,
         stream.onDemand(() -> {
             for (;;) {
                 final long r = remaining.decrementAndGet();
-                final boolean written = stream.write(elements - r);
+                final boolean written = stream.tryWrite(elements - r);
                 if (r == 0) {
                     if (abort) {
                         stream.abort();

File: core/src/test/java/com/linecorp/armeria/common/stream/DeferredStreamMessageTest.java
Patch:
@@ -65,7 +65,9 @@ public void testEarlyAbort() {
     @Test
     public void testEarlyAbortWithSubscriber() {
         final DeferredStreamMessage<Object> m = new DeferredStreamMessage<>();
-        m.subscribe(mock(Subscriber.class), ImmediateEventExecutor.INSTANCE);
+        @SuppressWarnings("unchecked")
+        Subscriber<Object> subscriber = mock(Subscriber.class);
+        m.subscribe(subscriber, ImmediateEventExecutor.INSTANCE);
         m.abort();
         assertAborted(m);
 

File: core/src/test/java/com/linecorp/armeria/common/stream/EventLoopStreamMessageVerification.java
Patch:
@@ -65,7 +65,7 @@ private static void stream(long elements, boolean abort,
         stream.onDemand(() -> {
             for (;;) {
                 final long r = remaining.decrementAndGet();
-                final boolean written = stream.write(elements - r);
+                final boolean written = stream.tryWrite(elements - r);
                 if (r == 0) {
                     if (abort) {
                         stream.abort();

File: core/src/test/java/com/linecorp/armeria/common/stream/StreamMessageDuplicatorTest.java
Patch:
@@ -314,7 +314,7 @@ public void lastDuplicateStream() {
         for (int i = 0; i < 30; i++) {
             final ByteBuf buf = newUnpooledBuffer();
             bufs[i] = buf;
-            assertThat(publisher.write(buf)).isTrue();  // Removing internal caches happens when i = 25
+            publisher.write(buf);
             assertThat(buf.refCnt()).isOne();
         }
 

File: core/src/test/java/com/linecorp/armeria/server/HttpServerTest.java
Patch:
@@ -936,7 +936,7 @@ public void testPrefixPath_cacheForced() throws Exception {
     }
 
     private static void stream(StreamWriter<HttpObject> writer, long size, int chunkSize) {
-        if (!writer.write(HttpData.of(new byte[chunkSize]))) {
+        if (!writer.tryWrite(HttpData.of(new byte[chunkSize]))) {
             return;
         }
 

File: jetty/src/main/java/com/linecorp/armeria/server/jetty/JettyService.java
Patch:
@@ -282,7 +282,7 @@ private void invoke(ServiceRequestContext ctx, HttpResponseWriter res,
             res.write(headers);
             for (;;) {
                 final HttpData data = out.poll();
-                if (data == null || !res.write(data)) {
+                if (data == null || !res.tryWrite(data)) {
                     break;
                 }
             }

File: tomcat/src/main/java/com/linecorp/armeria/server/tomcat/TomcatService.java
Patch:
@@ -388,7 +388,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
                         res.write(headers);
                         for (;;) {
                             final HttpData d = data.poll();
-                            if (d == null || !res.write(d)) {
+                            if (d == null || !res.tryWrite(d)) {
                                 break;
                             }
                         }

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcDocServicePluginTest.java
Patch:
@@ -170,7 +170,7 @@ public void newServiceInfo() throws Exception {
                 .methods()
                 .stream()
                 .collect(toImmutableMap(MethodInfo::name, Function.identity()));
-        assertThat(functions).hasSize(7);
+        assertThat(functions).hasSize(8);
         MethodInfo emptyCall = functions.get("EmptyCall");
         assertThat(emptyCall.name()).isEqualTo("EmptyCall");
         assertThat(emptyCall.parameters())
@@ -185,6 +185,7 @@ public void newServiceInfo() throws Exception {
         // Just sanity check that all methods are present, function conversion is more thoroughly tested in
         // newMethodInfo()
         assertThat(functions.get("UnaryCall").name()).isEqualTo("UnaryCall");
+        assertThat(functions.get("UnaryCall2").name()).isEqualTo("UnaryCall2");
         assertThat(functions.get("StreamingOutputCall").name()).isEqualTo("StreamingOutputCall");
         assertThat(functions.get("StreamingInputCall").name()).isEqualTo("StreamingInputCall");
         assertThat(functions.get("FullDuplexCall").name()).isEqualTo("FullDuplexCall");

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceTest.java
Patch:
@@ -121,6 +121,7 @@ public void pathMappings() throws Exception {
                 .containsExactlyInAnyOrder(
                         PathMapping.ofExact("/armeria.grpc.testing.TestService/EmptyCall"),
                         PathMapping.ofExact("/armeria.grpc.testing.TestService/UnaryCall"),
+                        PathMapping.ofExact("/armeria.grpc.testing.TestService/UnaryCall2"),
                         PathMapping.ofExact("/armeria.grpc.testing.TestService/StreamingOutputCall"),
                         PathMapping.ofExact("/armeria.grpc.testing.TestService/StreamingInputCall"),
                         PathMapping.ofExact("/armeria.grpc.testing.TestService/FullDuplexCall"),

File: core/src/main/java/com/linecorp/armeria/client/ClientOptions.java
Patch:
@@ -51,7 +51,6 @@ public final class ClientOptions extends AbstractOptions {
     @SuppressWarnings("deprecation")
     private static final Collection<AsciiString> BLACKLISTED_HEADER_NAMES =
             Collections.unmodifiableCollection(Arrays.asList(
-                    HttpHeaderNames.AUTHORITY,
                     HttpHeaderNames.CONNECTION,
                     HttpHeaderNames.HOST,
                     HttpHeaderNames.KEEP_ALIVE,

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroupMetrics.java
Patch:
@@ -78,9 +78,7 @@ public void accept(List<Endpoint> endpoints) {
             healthMap.entrySet().forEach(e -> {
                 final String authority = e.getKey();
                 final Boolean healthy = endpointsToUpdate.remove(authority);
-                if (healthy != null) {
-                    e.setValue(healthy);
-                }
+                e.setValue(Boolean.TRUE.equals(healthy));
             });
 
             // Process the newly appeared endpoints.

File: zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListener.java
Patch:
@@ -45,7 +45,7 @@ public ZooKeeperUpdatingListener(String zkConnectionStr, String zNodePath, int s
                                      Endpoint endpoint) {
         this.zkConnectionStr = requireNonNull(zkConnectionStr, "zkConnectionStr");
         this.zNodePath = requireNonNull(zNodePath, "zNodePath");
-        this.endpoint = requireNonNull(endpoint, "endPoint");
+        this.endpoint = requireNonNull(endpoint, "endpoint");
         this.sessionTimeout = sessionTimeout;
     }
 

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftDocServiceTest.java
Patch:
@@ -95,6 +95,8 @@ protected void configure(ServerBuilder sb) throws Exception {
 
             sb.service("/", helloAndSleepService);
             sb.service("/foo", fooService);
+            // Add a service with serviceUnder() to test whether prefix mapping is detected.
+            sb.serviceUnder("/foo", fooService);
             sb.service("/cassandra", cassandraService);
             sb.service("/cassandra/debug", cassandraServiceDebug);
             sb.service("/hbase", hbaseService);
@@ -124,6 +126,7 @@ public void testOk() throws Exception {
                         .build(),
                 new EntryBuilder(FooService.class)
                         .endpoint(new EndpointInfo("*", "/foo", "", COMPACT, ImmutableSet.of(COMPACT)))
+                        .endpoint(new EndpointInfo("*", "/foo/", "", COMPACT, ImmutableSet.of(COMPACT)))
                         .build(),
                 new EntryBuilder(Cassandra.class)
                         .endpoint(new EndpointInfo("*", "/cassandra", "", BINARY, ImmutableSet.of(BINARY)))

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -331,7 +331,7 @@ private void handleRequest(ChannelHandlerContext ctx, DecodedHttpRequest req) th
             gracefulShutdownSupport.inc();
             unfinishedRequests++;
 
-            if (pathAndQuery.query() == null && mapped.mapping().paramNames().isEmpty()) {
+            if (service.shouldCachePath(pathAndQuery.path(), pathAndQuery.query(), mapped.mapping())) {
                 reqCtx.log().addListener(log -> {
                     HttpStatus status = log.responseHeaders().status();
                     if (status != null && status.code() >= 200 && status.code() < 400) {

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/package-info.java
Patch:
@@ -126,4 +126,7 @@
  * <h2>{@code exceptionFilter}</h2>
  * A filter that decides whether a circuit breaker should deal with a given error.
  */
+@NonNullByDefault
 package com.linecorp.armeria.client.circuitbreaker;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/client/encoding/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * HTTP content decoding client.
  */
+@NonNullByDefault
 package com.linecorp.armeria.client.encoding;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * DNS-based {@link com.linecorp.armeria.client.endpoint.EndpointGroup} implementation.
  */
+@NonNullByDefault
 package com.linecorp.armeria.client.endpoint.dns;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * {@link com.linecorp.armeria.client.endpoint.healthcheck.HealthCheckedEndpointGroup} groups.
  */
+@NonNullByDefault
 package com.linecorp.armeria.client.endpoint.healthcheck;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/client/endpoint/package-info.java
Patch:
@@ -23,4 +23,7 @@
  *   <li>{@link com.linecorp.armeria.client.endpoint.StaticEndpointGroup}</li>
  * </ul>
  */
+@NonNullByDefault
 package com.linecorp.armeria.client.endpoint;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/client/limit/package-info.java
Patch:
@@ -16,4 +16,7 @@
 /**
  * Limits the number of executed {@link com.linecorp.armeria.common.Request}s.
  */
+@NonNullByDefault
 package com.linecorp.armeria.client.limit;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/client/logging/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * Logging client decorators.
  */
+@NonNullByDefault
 package com.linecorp.armeria.client.logging;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/client/metric/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * Metric-collecting client decorators.
  */
+@NonNullByDefault
 package com.linecorp.armeria.client.metric;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/client/package-info.java
Patch:
@@ -23,4 +23,7 @@
  *   <li>{@link com.linecorp.armeria.client.ClientBuilder}</li>
  * </ul>
  */
+@NonNullByDefault
 package com.linecorp.armeria.client;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/client/pool/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * Asynchronous {@link io.netty.channel.Channel} pool.
  */
+@NonNullByDefault
 package com.linecorp.armeria.client.pool;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/client/retry/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * A {@link com.linecorp.armeria.client.Client} decorator that handles failures and retries requests.
  */
+@NonNullByDefault
 package com.linecorp.armeria.client.retry;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/common/logging/package-info.java
Patch:
@@ -24,4 +24,7 @@
  *   <li>{@link com.linecorp.armeria.common.logging.RequestLogBuilder}</li>
  * </ul>
  */
+@NonNullByDefault
 package com.linecorp.armeria.common.logging;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/common/metric/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * Common metric collection utilities.
  */
+@NonNullByDefault
 package com.linecorp.armeria.common.metric;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/common/package-info.java
Patch:
@@ -22,4 +22,7 @@
  *   <li>{@link com.linecorp.armeria.common.RequestContext}</li>
  * </ul>
  */
+@NonNullByDefault
 package com.linecorp.armeria.common;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/common/stream/package-info.java
Patch:
@@ -23,4 +23,7 @@
  *   <li>{@link com.linecorp.armeria.common.stream.StreamWriter}</li>
  * </ul>
  */
+@NonNullByDefault
 package com.linecorp.armeria.common.stream;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/common/util/package-info.java
Patch:
@@ -17,4 +17,5 @@
 /**
  * Generic utility classes.
  */
+@NonNullByDefault
 package com.linecorp.armeria.common.util;

File: core/src/main/java/com/linecorp/armeria/internal/metric/package-info.java
Patch:
@@ -18,4 +18,7 @@
  * Various metrics related classes used internally.
  * Anything in this package can be changed or removed at any time.
  */
+@NonNullByDefault
 package com.linecorp.armeria.internal.metric;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/internal/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * Various classes used internally. Anything in this package can be changed or removed at any time.
  */
+@NonNullByDefault
 package com.linecorp.armeria.internal;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/annotation/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * Annotations for building a RESTful service.
  */
+@NonNullByDefault
 package com.linecorp.armeria.server.annotation;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/auth/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * HTTP authorization service.
  */
+@NonNullByDefault
 package com.linecorp.armeria.server.auth;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/composition/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * Service composition.
  */
+@NonNullByDefault
 package com.linecorp.armeria.server.composition;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/cors/package-info.java
Patch:
@@ -18,4 +18,7 @@
  * <a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing">Cross-Origin Resource Sharing
  * (CORS)</a> support.
  */
+@NonNullByDefault
 package com.linecorp.armeria.server.cors;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/docs/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * Documentation service.
  */
+@NonNullByDefault
 package com.linecorp.armeria.server.docs;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/encoding/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * HTTP content encoding service.
  */
+@NonNullByDefault
 package com.linecorp.armeria.server.encoding;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/file/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * HTTP static file service.
  */
+@NonNullByDefault
 package com.linecorp.armeria.server.file;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/healthcheck/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * HTTP health check service for load balancers.
  */
+@NonNullByDefault
 package com.linecorp.armeria.server.healthcheck;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/logging/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * Logging and metric-collecting service decorators.
  */
+@NonNullByDefault
 package com.linecorp.armeria.server.logging;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/logging/structured/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * Structured logging support for full request and response.
  */
+@NonNullByDefault
 package com.linecorp.armeria.server.logging.structured;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/metric/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * Metric-collecting service decorators and exporters.
  */
+@NonNullByDefault
 package com.linecorp.armeria.server.metric;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/package-info.java
Patch:
@@ -24,4 +24,7 @@
  *   <li>{@link com.linecorp.armeria.server.Service}</li>
  * </ul>
  */
+@NonNullByDefault
 package com.linecorp.armeria.server;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/throttling/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * Request throttling service decorators and strategies.
  */
+@NonNullByDefault
 package com.linecorp.armeria.server.throttling;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * An armeria client that uses the gRPC wire protocol.
  */
+@NonNullByDefault
 package com.linecorp.armeria.client.grpc;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: grpc/src/main/java/com/linecorp/armeria/common/grpc/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * gRPC-related common classes.
  */
+@NonNullByDefault
 package com.linecorp.armeria.common.grpc;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: grpc/src/main/java/com/linecorp/armeria/internal/grpc/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * Various classes used internally. Anything in this package can be changed or removed at any time.
  */
+@NonNullByDefault
 package com.linecorp.armeria.internal.grpc;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * Allows an Armeria server to host a gRPC API using the gRPC wire protocol.
  */
+@NonNullByDefault
 package com.linecorp.armeria.server.grpc;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: grpc/src/main/java/com/linecorp/armeria/unsafe/grpc/package-info.java
Patch:
@@ -19,4 +19,7 @@
  * when dealing with large buffers but require careful memory management or there will be memory leaks. Only use
  * these methods if you really know what you're doing.
  */
+@NonNullByDefault
 package com.linecorp.armeria.unsafe.grpc;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: jetty/src/main/java/com/linecorp/armeria/server/jetty/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * Embedded <a href="https://www.eclipse.org/jetty/">Jetty</a> service.
  */
+@NonNullByDefault
 package com.linecorp.armeria.server.jetty;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: kafka/src/main/java/com/linecorp/armeria/server/logging/structured/kafka/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * Kafka backend integration support for structured request/response logging.
  */
+@NonNullByDefault
 package com.linecorp.armeria.server.logging.structured.kafka;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: logback/src/main/java/com/linecorp/armeria/common/logback/package-info.java
Patch:
@@ -20,4 +20,7 @@
  * <p>Read '<a href="https://line.github.io/armeria/server-basics.html">Logging contextual information</a>'
  * for more information.
  */
+@NonNullByDefault
 package com.linecorp.armeria.common.logback;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * <a href="https://square.github.io/retrofit/">Retrofit2</a> adapter for Armeria.
  */
+@NonNullByDefault
 package com.linecorp.armeria.client.retrofit2;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: spring-boot/autoconfigure/src/main/java/com/linecorp/armeria/spring/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * <a href="https://projects.spring.io/spring-boot/">Spring Boot</a> integration.
  */
+@NonNullByDefault
 package com.linecorp.armeria.spring;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: testing-internal/src/main/java/com/linecorp/armeria/testing/internal/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * Common testing utilities.
  */
+@NonNullByDefault
 package com.linecorp.armeria.testing.internal;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: testing-internal/src/main/java/com/linecorp/armeria/testing/internal/webapp/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * Web application service testing utilities.
  */
+@NonNullByDefault
 package com.linecorp.armeria.testing.internal.webapp;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: testing/src/main/java/com/linecorp/armeria/testing/server/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * Server-side testing utilities.
  */
+@NonNullByDefault
 package com.linecorp.armeria.testing.server;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: thrift/src/main/java/com/linecorp/armeria/client/thrift/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * Thrift client.
  */
+@NonNullByDefault
 package com.linecorp.armeria.client.thrift;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: thrift/src/main/java/com/linecorp/armeria/common/thrift/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * Thrift-related common classes.
  */
+@NonNullByDefault
 package com.linecorp.armeria.common.thrift;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: thrift/src/main/java/com/linecorp/armeria/common/thrift/text/package-info.java
Patch:
@@ -44,4 +44,7 @@
  *     <li>Miscellaneous style cleanups</li>
  * </ul>
  */
+@NonNullByDefault
 package com.linecorp.armeria.common.thrift.text;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: thrift/src/main/java/com/linecorp/armeria/internal/thrift/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * Various classes used internally. Anything in this package can be changed or removed at any time.
  */
+@NonNullByDefault
 package com.linecorp.armeria.internal.thrift;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: thrift/src/main/java/com/linecorp/armeria/server/thrift/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * Thrift service.
  */
+@NonNullByDefault
 package com.linecorp.armeria.server.thrift;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: tomcat/src/main/java/com/linecorp/armeria/server/tomcat/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * Embedded <a href="https://tomcat.apache.org/">Tomcat</a> service.
  */
+@NonNullByDefault
 package com.linecorp.armeria.server.tomcat;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: zipkin/src/main/java/com/linecorp/armeria/client/tracing/package-info.java
Patch:
@@ -18,4 +18,7 @@
  * Distributed tracing clients based on <a href="https://github.com/openzipkin/brave">Brave</a>,
  * a Java tracing library compatible with <a href="http://zipkin.io/">Zipkin</a>.
  */
+@NonNullByDefault
 package com.linecorp.armeria.client.tracing;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: zipkin/src/main/java/com/linecorp/armeria/internal/tracing/package-info.java
Patch:
@@ -17,4 +17,7 @@
 /**
  * Various classes used internally. Anything in this package can be changed or removed at any time.
  */
+@NonNullByDefault
 package com.linecorp.armeria.internal.tracing;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: zipkin/src/main/java/com/linecorp/armeria/server/tracing/package-info.java
Patch:
@@ -18,4 +18,7 @@
  * Distributed tracing services based on <a href="https://github.com/openzipkin/brave">Brave</a>,
  * a Java tracing library compatible with <a href="http://zipkin.io/">Zipkin</a>.
  */
+@NonNullByDefault
 package com.linecorp.armeria.server.tracing;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/package-info.java
Patch:
@@ -16,4 +16,7 @@
 /**
  * ZooKeeper-based {@link com.linecorp.armeria.client.endpoint.EndpointGroup} implementation.
  */
+@NonNullByDefault
 package com.linecorp.armeria.client.zookeeper;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/package-info.java
Patch:
@@ -16,4 +16,7 @@
 /**
  * Common classes will be used by Server and Client implementations.
  */
+@NonNullByDefault
 package com.linecorp.armeria.common.zookeeper;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/package-info.java
Patch:
@@ -23,4 +23,7 @@
  * servers.
  *
  */
+@NonNullByDefault
 package com.linecorp.armeria.server.zookeeper;
+
+import com.linecorp.armeria.common.util.NonNullByDefault;

File: core/src/main/java/com/linecorp/armeria/server/Http1RequestDecoder.java
Patch:
@@ -27,8 +27,8 @@
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.ProtocolViolationException;
 import com.linecorp.armeria.internal.ArmeriaHttpUtil;
-import com.linecorp.armeria.internal.ByteBufHttpData;
 import com.linecorp.armeria.internal.InboundTrafficController;
+import com.linecorp.armeria.unsafe.ByteBufHttpData;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;

File: core/src/main/java/com/linecorp/armeria/server/Http2RequestDecoder.java
Patch:
@@ -30,8 +30,8 @@
 import com.linecorp.armeria.common.HttpRequestWriter;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.internal.ArmeriaHttpUtil;
-import com.linecorp.armeria.internal.ByteBufHttpData;
 import com.linecorp.armeria.internal.InboundTrafficController;
+import com.linecorp.armeria.unsafe.ByteBufHttpData;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;

File: core/src/main/java/com/linecorp/armeria/unsafe/ByteBufHttpData.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.internal;
+package com.linecorp.armeria.unsafe;
 
 import static java.util.Objects.requireNonNull;
 

File: core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java
Patch:
@@ -57,14 +57,14 @@
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.util.CompletionActions;
-import com.linecorp.armeria.internal.ByteBufHttpData;
 import com.linecorp.armeria.server.AbstractHttpService;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.SimpleDecoratingService;
 import com.linecorp.armeria.server.encoding.HttpEncodingService;
 import com.linecorp.armeria.testing.server.ServerRule;
+import com.linecorp.armeria.unsafe.ByteBufHttpData;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufHolder;

File: core/src/test/java/com/linecorp/armeria/client/encoding/AbstractStreamDecoderTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.junit.Test;
 
-import com.linecorp.armeria.internal.ByteBufHttpData;
+import com.linecorp.armeria.unsafe.ByteBufHttpData;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;

File: core/src/test/java/com/linecorp/armeria/common/stream/AbstractStreamMessageAndWriterTest.java
Patch:
@@ -32,7 +32,7 @@
 
 import com.google.common.collect.ImmutableList;
 
-import com.linecorp.armeria.internal.ByteBufHttpData;
+import com.linecorp.armeria.unsafe.ByteBufHttpData;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.PooledByteBufAllocator;

File: core/src/test/java/com/linecorp/armeria/common/stream/AbstractStreamMessageTest.java
Patch:
@@ -35,7 +35,7 @@
 import com.google.common.collect.ImmutableList;
 
 import com.linecorp.armeria.common.util.Exceptions;
-import com.linecorp.armeria.internal.ByteBufHttpData;
+import com.linecorp.armeria.unsafe.ByteBufHttpData;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufHolder;

File: core/src/test/java/com/linecorp/armeria/server/HttpServerTest.java
Patch:
@@ -97,10 +97,10 @@
 import com.linecorp.armeria.common.stream.StreamWriter;
 import com.linecorp.armeria.common.util.EventLoopGroups;
 import com.linecorp.armeria.common.util.Exceptions;
-import com.linecorp.armeria.internal.ByteBufHttpData;
 import com.linecorp.armeria.internal.InboundTrafficController;
 import com.linecorp.armeria.server.encoding.HttpEncodingService;
 import com.linecorp.armeria.testing.server.ServerRule;
+import com.linecorp.armeria.unsafe.ByteBufHttpData;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.PooledByteBufAllocator;

File: core/src/test/java/com/linecorp/armeria/server/encoding/HttpEncodedResponseTest.java
Patch:
@@ -26,7 +26,7 @@
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.stream.NoopSubscriber;
-import com.linecorp.armeria.internal.ByteBufHttpData;
+import com.linecorp.armeria.unsafe.ByteBufHttpData;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;

File: grpc/src/main/java/com/linecorp/armeria/internal/grpc/ArmeriaMessageFramer.java
Patch:
@@ -52,7 +52,7 @@
 import java.io.IOException;
 import java.io.OutputStream;
 
-import com.linecorp.armeria.internal.ByteBufHttpData;
+import com.linecorp.armeria.unsafe.ByteBufHttpData;
 
 import io.grpc.Codec;
 import io.grpc.Compressor;

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/UnframedGrpcService.java
Patch:
@@ -33,7 +33,6 @@
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
-import com.linecorp.armeria.internal.ByteBufHttpData;
 import com.linecorp.armeria.internal.grpc.ArmeriaMessageDeframer;
 import com.linecorp.armeria.internal.grpc.ArmeriaMessageDeframer.ByteBufOrStream;
 import com.linecorp.armeria.internal.grpc.ArmeriaMessageDeframer.Listener;
@@ -45,6 +44,7 @@
 import com.linecorp.armeria.server.ServiceWithPathMappings;
 import com.linecorp.armeria.server.SimpleDecoratingService;
 import com.linecorp.armeria.server.encoding.HttpEncodingService;
+import com.linecorp.armeria.unsafe.ByteBufHttpData;
 
 import io.grpc.MethodDescriptor;
 import io.grpc.MethodDescriptor.MethodType;

File: grpc/src/test/java/com/linecorp/armeria/internal/grpc/ArmeriaMessageFramerTest.java
Patch:
@@ -30,7 +30,7 @@
 
 import com.linecorp.armeria.grpc.testing.Messages.Payload;
 import com.linecorp.armeria.grpc.testing.Messages.SimpleRequest;
-import com.linecorp.armeria.internal.ByteBufHttpData;
+import com.linecorp.armeria.unsafe.ByteBufHttpData;
 
 import io.grpc.Codec.Gzip;
 import io.grpc.StatusRuntimeException;

File: thrift/src/main/java/com/linecorp/armeria/server/thrift/THttpService.java
Patch:
@@ -68,12 +68,12 @@
 import com.linecorp.armeria.common.thrift.ThriftSerializationFormats;
 import com.linecorp.armeria.common.util.CompletionActions;
 import com.linecorp.armeria.common.util.SafeCloseable;
-import com.linecorp.armeria.internal.ByteBufHttpData;
 import com.linecorp.armeria.internal.thrift.ThriftFieldAccess;
 import com.linecorp.armeria.internal.thrift.ThriftFunction;
 import com.linecorp.armeria.server.AbstractHttpService;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
+import com.linecorp.armeria.unsafe.ByteBufHttpData;
 
 import io.netty.buffer.ByteBuf;
 

File: zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListener.java
Patch:
@@ -24,7 +24,7 @@
 import com.linecorp.armeria.server.ServerListenerAdapter;
 
 /**
- * A ZooKeeper Server Listener.When you add this listener, server will be automatically registered
+ * A ZooKeeper Server Listener. When you add this listener, server will be automatically registered
  * into the ZooKeeper.
  */
 public class ZooKeeperUpdatingListener extends ServerListenerAdapter {

File: core/src/test/java/com/linecorp/armeria/common/logging/DefaultRequestLogTest.java
Patch:
@@ -93,7 +93,7 @@ public void rpcFailure_endResponseDifferentCause() {
         log.responseContent(RpcResponse.ofFailure(error), null);
         log.endResponse(error2);
         assertThat(log.responseDurationNanos()).isZero();
-        assertThat(log.responseCause()).isSameAs(error2);
+        assertThat(log.responseCause()).isSameAs(error);
     }
 
     @Test

File: core/src/main/java/com/linecorp/armeria/server/annotation/ByteArrayRequestConverterFunction.java
Patch:
@@ -41,10 +41,10 @@ public Object convertRequest(ServiceRequestContext ctx, AggregatedHttpMessage re
             mediaType.is(MediaType.OCTET_STREAM) ||
             mediaType.is(MediaType.APPLICATION_BINARY)) {
 
-            if (expectedResultType.isAssignableFrom(byte[].class)) {
+            if (expectedResultType == byte[].class) {
                 return request.content().array();
             }
-            if (expectedResultType.isAssignableFrom(HttpData.class)) {
+            if (expectedResultType == HttpData.class) {
                 return request.content();
             }
         }

File: core/src/main/java/com/linecorp/armeria/server/annotation/StringRequestConverterFunction.java
Patch:
@@ -33,7 +33,8 @@ public class StringRequestConverterFunction implements RequestConverterFunction
     @Override
     public Object convertRequest(ServiceRequestContext ctx, AggregatedHttpMessage request,
                                  Class<?> expectedResultType) throws Exception {
-        if (expectedResultType.isAssignableFrom(String.class)) {
+        if (expectedResultType == String.class ||
+            expectedResultType == CharSequence.class) {
             final MediaType contentType = request.headers().contentType();
             if (contentType != null && contentType.is(MediaType.ANY_TEXT_TYPE)) {
                 // See https://tools.ietf.org/html/rfc2616#section-3.7.1

File: zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListener.java
Patch:
@@ -62,7 +62,7 @@ public ZooKeeperUpdatingListener(String zkConnectionStr, String zNodePath, int s
     }
 
     @Override
-    public void serverStarting(Server server) throws Exception {
+    public void serverStarted(Server server) throws Exception {
         if (endpoint == null) {
             assert server.activePort().isPresent();
             endpoint = Endpoint.of(server.defaultHostname(),

File: core/src/main/java/com/linecorp/armeria/common/HttpResponse.java
Patch:
@@ -29,12 +29,11 @@
 
 import org.reactivestreams.Publisher;
 
-import com.google.common.base.Throwables;
-
 import com.linecorp.armeria.common.FixedHttpResponse.OneElementFixedHttpResponse;
 import com.linecorp.armeria.common.FixedHttpResponse.RegularFixedHttpResponse;
 import com.linecorp.armeria.common.FixedHttpResponse.TwoElementFixedHttpResponse;
 import com.linecorp.armeria.common.stream.StreamMessage;
+import com.linecorp.armeria.common.util.Exceptions;
 
 import io.netty.util.concurrent.EventExecutor;
 
@@ -64,7 +63,7 @@ static HttpResponse from(CompletionStage<? extends HttpResponse> stage) {
         final DeferredHttpResponse res = new DeferredHttpResponse();
         stage.whenComplete((delegate, thrown) -> {
             if (thrown != null) {
-                res.close(Throwables.getRootCause(thrown));
+                res.close(Exceptions.peel(thrown));
             } else if (delegate == null) {
                 res.close(new NullPointerException("delegate stage produced a null response: " + stage));
             } else {

File: core/src/test/java/com/linecorp/armeria/server/HttpServerTest.java
Patch:
@@ -96,6 +96,7 @@
 import com.linecorp.armeria.common.logging.RequestLogAvailability;
 import com.linecorp.armeria.common.stream.StreamWriter;
 import com.linecorp.armeria.common.util.EventLoopGroups;
+import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.internal.ByteBufHttpData;
 import com.linecorp.armeria.internal.InboundTrafficController;
 import com.linecorp.armeria.server.encoding.HttpEncodingService;
@@ -561,7 +562,7 @@ public void testTimeoutAfterPartialContent() throws Exception {
             f.get();
             fail();
         } catch (ExecutionException e) {
-            assertThat(e.getCause(), is(instanceOf(ClosedSessionException.class)));
+            assertThat(Exceptions.peel(e), is(instanceOf(ClosedSessionException.class)));
         }
     }
 
@@ -580,7 +581,7 @@ public void testTimeoutAfterPartialContentWithPooling() throws Exception {
             f.get();
             fail();
         } catch (ExecutionException e) {
-            assertThat(e.getCause(), is(instanceOf(ClosedSessionException.class)));
+            assertThat(Exceptions.peel(e), is(instanceOf(ClosedSessionException.class)));
         }
     }
 

File: retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaCallFactory.java
Patch:
@@ -32,6 +32,7 @@
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpResponse;
+import com.linecorp.armeria.common.util.Exceptions;
 
 import okhttp3.Call;
 import okhttp3.Call.Factory;
@@ -190,7 +191,7 @@ public Response execute() throws IOException {
             } catch (CancellationException e) {
                 throw new IOException(e);
             } catch (CompletionException e) {
-                throw new IOException(e.getCause());
+                throw new IOException(Exceptions.peel(e));
             }
         }
 

File: thrift/src/main/java/com/linecorp/armeria/client/thrift/THttpClientDelegate.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.Map;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ExecutionException;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import org.apache.thrift.TApplicationException;
@@ -59,6 +58,7 @@
 import com.linecorp.armeria.common.thrift.ThriftProtocolFactories;
 import com.linecorp.armeria.common.thrift.ThriftReply;
 import com.linecorp.armeria.common.util.CompletionActions;
+import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.internal.thrift.TApplicationExceptions;
 import com.linecorp.armeria.internal.thrift.ThriftFieldAccess;
 import com.linecorp.armeria.internal.thrift.ThriftFunction;
@@ -127,8 +127,7 @@ public RpcResponse execute(ClientRequestContext ctx, RpcRequest call) throws Exc
 
             future.handle(voidFunction((res, cause) -> {
                 if (cause != null) {
-                    handlePreDecodeException(ctx, reply, func,
-                                             cause instanceof ExecutionException ? cause.getCause() : cause);
+                    handlePreDecodeException(ctx, reply, func, Exceptions.peel(cause));
                     return;
                 }
 

File: thrift/src/main/java/com/linecorp/armeria/client/thrift/THttpClientInvocationHandler.java
Patch:
@@ -32,6 +32,7 @@
 import com.linecorp.armeria.client.ClientOptions;
 import com.linecorp.armeria.common.RpcResponse;
 import com.linecorp.armeria.common.util.CompletionActions;
+import com.linecorp.armeria.common.util.Exceptions;
 
 final class THttpClientInvocationHandler implements InvocationHandler, ClientBuilderParams {
 
@@ -138,7 +139,7 @@ private Object invokeClientMethod(Method method, Object[] args) throws Throwable
                 try {
                     return reply.get();
                 } catch (ExecutionException e) {
-                    throw e.getCause();
+                    throw Exceptions.peel(e);
                 }
             }
         } catch (Throwable cause) {

File: thrift/src/test/java/com/linecorp/armeria/client/thrift/THttpClientBadSeqIdTest.java
Patch:
@@ -32,6 +32,7 @@
 
 import com.linecorp.armeria.client.Clients;
 import com.linecorp.armeria.common.RpcResponse;
+import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.service.test.thrift.main.HelloService;
 
 public class THttpClientBadSeqIdTest {
@@ -81,7 +82,7 @@ public void badSeqId() throws Exception {
             assertThatThrownBy(res::get)
                     .isInstanceOf(ExecutionException.class)
                     .hasCauseInstanceOf(TApplicationException.class)
-                    .satisfies(cause -> assertThat(((TApplicationException) cause.getCause()).getType())
+                    .satisfies(cause -> assertThat(((TApplicationException) Exceptions.peel(cause)).getType())
                             .isEqualTo(TApplicationException.BAD_SEQUENCE_ID));
         }
     }

File: core/src/main/java/com/linecorp/armeria/client/retry/Backoff.java
Patch:
@@ -92,7 +92,7 @@ static Backoff random(long minDelayMillis, long maxDelayMillis, Supplier<Random>
      * a base option, jitter and maxAttempts will be set by default values.
      * These are a few examples:
      * <ul>
-     *   <li>{@code exponential=200:10000:2.0,jitter=0.2,maxAttempts=10} (default)</li>
+     *   <li>{@code exponential=200:10000:2.0,jitter=0.2} (default)</li>
      *   <li>{@code exponential=200:10000,jitter=0.2,maxAttempts=50} (multiplier omitted)</li>
      *   <li>{@code fixed=100,jitter=-0.5:0.2,maxAttempts=10} (fixed backoff with jitter variation)</li>
      *   <li>{@code random=200:1000} (jitter and maxAttempts will be set by default values)</li>

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingHttpClientBuilder.java
Patch:
@@ -76,7 +76,7 @@ public RetryingHttpClientBuilder contentPreviewLength(int contentPreviewLength)
      */
     @Override
     public RetryingHttpClient build(Client<HttpRequest, HttpResponse> delegate) {
-        return new RetryingHttpClient(delegate, retryStrategy, defaultMaxAttempts,
+        return new RetryingHttpClient(delegate, retryStrategy, maxTotalAttempts,
                                       responseTimeoutMillisForEachAttempt, useRetryAfter, contentPreviewLength);
     }
 
@@ -87,7 +87,7 @@ public RetryingHttpClient build(Client<HttpRequest, HttpResponse> delegate) {
     @Override
     public Function<Client<HttpRequest, HttpResponse>, RetryingHttpClient> newDecorator() {
         return delegate -> new RetryingHttpClient(
-                delegate, retryStrategy, defaultMaxAttempts, responseTimeoutMillisForEachAttempt,
+                delegate, retryStrategy, maxTotalAttempts, responseTimeoutMillisForEachAttempt,
                 useRetryAfter, contentPreviewLength);
     }
 

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClientBuilder.java
Patch:
@@ -42,7 +42,7 @@ public RetryingRpcClientBuilder(
     @Override
     public RetryingRpcClient build(Client<RpcRequest, RpcResponse> delegate) {
         return new RetryingRpcClient(
-                delegate, retryStrategy, defaultMaxAttempts, responseTimeoutMillisForEachAttempt);
+                delegate, retryStrategy, maxTotalAttempts, responseTimeoutMillisForEachAttempt);
     }
 
     /**
@@ -53,6 +53,6 @@ public RetryingRpcClient build(Client<RpcRequest, RpcResponse> delegate) {
     public Function<Client<RpcRequest, RpcResponse>, RetryingRpcClient> newDecorator() {
         return delegate ->
                 new RetryingRpcClient(
-                        delegate, retryStrategy, defaultMaxAttempts, responseTimeoutMillisForEachAttempt);
+                        delegate, retryStrategy, maxTotalAttempts, responseTimeoutMillisForEachAttempt);
     }
 }

File: core/src/test/java/com/linecorp/armeria/client/retry/BackoffSpecTest.java
Patch:
@@ -33,7 +33,6 @@ public void defaultBackoffSpec() {
         assertThat(backoffSpec.multiplier).isEqualTo(2.0);
         assertThat(backoffSpec.minJitterRate).isEqualTo(-0.2);
         assertThat(backoffSpec.maxJitterRate).isEqualTo(0.2);
-        assertThat(backoffSpec.maxAttempts).isEqualTo(10);
     }
 
     @Test
@@ -79,7 +78,6 @@ public void backoffSpecWithOnlyBaseOption() {
         assertThat(backoffSpec1.multiplier).isEqualTo(2.0);
         assertThat(backoffSpec1.minJitterRate).isEqualTo(-0.2);
         assertThat(backoffSpec1.maxJitterRate).isEqualTo(0.2);
-        assertThat(backoffSpec1.maxAttempts).isEqualTo(10);
 
         assertThat(Backoff.of(spec1).as(RandomBackoff.class).isPresent()).isTrue();
 
@@ -92,7 +90,6 @@ public void backoffSpecWithOnlyBaseOption() {
         assertThat(backoffSpec2.multiplier).isEqualTo(2.0);
         assertThat(backoffSpec2.minJitterRate).isEqualTo(-0.2);
         assertThat(backoffSpec2.maxJitterRate).isEqualTo(0.2);
-        assertThat(backoffSpec2.maxAttempts).isEqualTo(10);
 
         assertThat(Backoff.of(spec2).as(FixedBackoff.class).isPresent()).isTrue();
     }

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingHttpClientTest.java
Patch:
@@ -326,7 +326,7 @@ private HttpClient retryingHttpClientOf(long responseTimeoutMillis,
         return new HttpClientBuilder(server.uri("/"))
                 .factory(clientFactory).defaultResponseTimeoutMillis(responseTimeoutMillis)
                 .decorator(new RetryingHttpClientBuilder(strategy).useRetryAfter(true)
-                                                                  .defaultMaxAttempts(100).newDecorator())
+                                                                  .maxTotalAttempts(100).newDecorator())
                 .build();
     }
 

File: thrift/src/test/java/com/linecorp/armeria/it/client/retry/RetryingRpcClientTest.java
Patch:
@@ -115,7 +115,7 @@ public void execute_retry() throws Exception {
     public void execute_reachedMaxAttempts() throws Exception {
         HelloService.Iface client = new ClientBuilder(server.uri(BINARY, "/thrift"))
                 .decorator(RpcRequest.class, RpcResponse.class,
-                           new RetryingRpcClientBuilder(ALWAYS).defaultMaxAttempts(1).newDecorator())
+                           new RetryingRpcClientBuilder(ALWAYS).maxTotalAttempts(1).newDecorator())
                 .build(HelloService.Iface.class);
         when(serviceHandler.hello(anyString()))
                 .thenThrow(new IllegalArgumentException());

File: core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java
Patch:
@@ -44,7 +44,6 @@
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
 import com.linecorp.armeria.common.util.Exceptions;
-import com.linecorp.armeria.internal.FlushConsolidationHandler;
 import com.linecorp.armeria.internal.Http1ClientCodec;
 import com.linecorp.armeria.internal.Http2GoAwayListener;
 import com.linecorp.armeria.internal.ReadSuppressingHandler;
@@ -86,6 +85,7 @@
 import io.netty.handler.codec.http2.Http2FrameWriter;
 import io.netty.handler.codec.http2.Http2SecurityUtil;
 import io.netty.handler.codec.http2.Http2Settings;
+import io.netty.handler.flush.FlushConsolidationHandler;
 import io.netty.handler.ssl.ApplicationProtocolConfig;
 import io.netty.handler.ssl.ApplicationProtocolNames;
 import io.netty.handler.ssl.SslContext;
@@ -638,7 +638,7 @@ public void close(ChannelHandlerContext ctx, ChannelPromise promise) throws Exce
      */
     private static final class WorkaroundHandler extends ChannelDuplexHandler {
 
-        private static final AsciiString CONNECTION_VALUE = new AsciiString("HTTP2-Settings,Upgrade");
+        private static final AsciiString CONNECTION_VALUE = AsciiString.cached("HTTP2-Settings,Upgrade");
 
         private boolean needsToFilterUpgradeResponse = true;
         private boolean needsToFilterUpgradeRequest = true;

File: core/src/main/java/com/linecorp/armeria/common/DefaultHttpHeaders.java
Patch:
@@ -172,7 +172,8 @@ public HttpHeaders status(int statusCode) {
     @Override
     public HttpHeaders status(HttpStatus status) {
         requireNonNull(status, "status");
-        return status(status.code());
+        set(HttpHeaderNames.STATUS, status.codeAsText());
+        return this;
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/common/HttpMethod.java
Patch:
@@ -37,6 +37,8 @@
  */
 public enum HttpMethod {
 
+    // Forked from Netty at 93b144b7b4872ea623a378c75b92d33bea28ab51
+
     /**
      * The OPTIONS method represents a request for information about the communication options
      * available on the request/response chain identified by the Request-URI. This method allows

File: core/src/main/java/com/linecorp/armeria/common/util/Version.java
Patch:
@@ -59,6 +59,8 @@
  */
 public final class Version {
 
+    // Forked from Netty at d0912f27091e4548466df81f545c017a25c9d256
+
     private static final String PROP_RESOURCE_PATH = "META-INF/com.linecorp.armeria.versions.properties";
 
     private static final String PROP_VERSION = ".version";

File: core/src/main/java/com/linecorp/armeria/server/HttpServerPipelineConfigurator.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.List;
 
 import com.linecorp.armeria.common.SessionProtocol;
-import com.linecorp.armeria.internal.FlushConsolidationHandler;
 import com.linecorp.armeria.internal.Http2GoAwayListener;
 import com.linecorp.armeria.internal.ReadSuppressingHandler;
 import com.linecorp.armeria.internal.TrafficLoggingHandler;
@@ -49,6 +48,7 @@
 import io.netty.handler.codec.http2.Http2FrameWriter;
 import io.netty.handler.codec.http2.Http2ServerUpgradeCodec;
 import io.netty.handler.codec.http2.Http2Settings;
+import io.netty.handler.flush.FlushConsolidationHandler;
 import io.netty.handler.ssl.ApplicationProtocolNames;
 import io.netty.handler.ssl.ApplicationProtocolNegotiationHandler;
 import io.netty.handler.ssl.SniHandler;

File: core/src/test/java/com/linecorp/armeria/internal/DefaultAttributeMapTest.java
Patch:
@@ -54,6 +54,8 @@
 
 public class DefaultAttributeMapTest {
 
+    // Forked from Netty at 2993760e9261f046db88a0e8ccf9edf4e9b0acad
+
     private DefaultAttributeMap map;
 
     @Before

File: tomcat/src/main/java/com/linecorp/armeria/server/tomcat/TomcatService.java
Patch:
@@ -529,7 +529,7 @@ private static AsciiString toHeaderName(MessageBytes value) {
                 return new AsciiString(chunk.getBuffer(), chunk.getOffset(), chunk.getLength());
             }
             case MessageBytes.T_STR: {
-                return new AsciiString(value.getString());
+                return HttpHeaderNames.of(value.getString());
             }
         }
         return null;

File: core/src/main/java/com/linecorp/armeria/common/SerializationFormat.java
Patch:
@@ -188,7 +188,7 @@ private static void checkMediaType(Multimap<MediaType, SerializationFormat> simp
     }
 
     /**
-     * Returns all available {@link SessionProtocol}s.
+     * Returns all available {@link SerializationFormat}s.
      */
     public static Set<SerializationFormat> values() {
         return values;

File: core/src/main/java/com/linecorp/armeria/internal/TrafficLoggingHandler.java
Patch:
@@ -31,7 +31,7 @@ public final class TrafficLoggingHandler extends LoggingHandler {
     public static final TrafficLoggingHandler CLIENT = new TrafficLoggingHandler(false);
 
     private TrafficLoggingHandler(boolean server) {
-        super("com.linecorp.armeria.traffic." + (server ? "server" : "client"), LogLevel.TRACE);
+        super("com.linecorp.armeria.logging.traffic." + (server ? "server" : "client"), LogLevel.TRACE);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/server/Http1RequestDecoder.java
Patch:
@@ -23,11 +23,11 @@
 import org.slf4j.LoggerFactory;
 
 import com.linecorp.armeria.common.ContentTooLargeException;
-import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.ProtocolViolationException;
 import com.linecorp.armeria.internal.ArmeriaHttpUtil;
+import com.linecorp.armeria.internal.ByteBufHttpData;
 import com.linecorp.armeria.internal.InboundTrafficController;
 
 import io.netty.buffer.ByteBuf;
@@ -179,7 +179,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                     }
 
                     if (req.isOpen()) {
-                        req.write(HttpData.of(data));
+                        req.write(new ByteBufHttpData(data.retain(), false));
                     }
                 }
 

File: core/src/main/java/com/linecorp/armeria/server/Http2RequestDecoder.java
Patch:
@@ -24,12 +24,12 @@
 import java.nio.charset.StandardCharsets;
 
 import com.linecorp.armeria.common.ContentTooLargeException;
-import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequestWriter;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.internal.ArmeriaHttpUtil;
+import com.linecorp.armeria.internal.ByteBufHttpData;
 import com.linecorp.armeria.internal.InboundTrafficController;
 
 import io.netty.buffer.ByteBuf;
@@ -173,7 +173,7 @@ public int onDataRead(
             }
         } else if (req.isOpen()) {
             try {
-                req.write(HttpData.of(data));
+                req.write(new ByteBufHttpData(data.retain(), endOfStream));
             } catch (Throwable t) {
                 req.close(t);
                 throw connectionError(INTERNAL_ERROR, t, "failed to consume a DATA frame");

File: core/src/main/java/com/linecorp/armeria/server/annotation/ByteArrayRequestConverterFunction.java
Patch:
@@ -33,7 +33,7 @@ public class ByteArrayRequestConverterFunction implements RequestConverterFuncti
      * {@code Content-Type: application/octet-stream} or {@code Content-Type: application/binary}.
      */
     @Override
-    public boolean accept(AggregatedHttpMessage request, Class<?> expectedResultType) {
+    public boolean canConvertRequest(AggregatedHttpMessage request, Class<?> expectedResultType) {
         if (!expectedResultType.isAssignableFrom(byte[].class) &&
             !expectedResultType.isAssignableFrom(HttpData.class)) {
             return false;
@@ -49,7 +49,7 @@ public boolean accept(AggregatedHttpMessage request, Class<?> expectedResultType
      * Converts the specified {@link AggregatedHttpMessage} to an object of {@code expectedResultType}.
      */
     @Override
-    public Object convert(AggregatedHttpMessage request, Class<?> expectedResultType) throws Exception {
+    public Object convertRequest(AggregatedHttpMessage request, Class<?> expectedResultType) throws Exception {
         if (expectedResultType.isAssignableFrom(byte[].class)) {
             return request.content().array();
         }

File: core/src/main/java/com/linecorp/armeria/server/annotation/JacksonRequestConverterFunction.java
Patch:
@@ -62,9 +62,8 @@ public JacksonRequestConverterFunction(ObjectMapper mapper) {
      * Returns whether the specified {@link AggregatedHttpMessage} is able to be consumed.
      */
     @Override
-    public boolean accept(AggregatedHttpMessage request, Class<?> expectedResultType) {
+    public boolean canConvertRequest(AggregatedHttpMessage request, Class<?> expectedResultType) {
         final MediaType contentType = request.headers().contentType();
-        // TODO(hyangtack) Do benchmark tests to decide whether we add a cache to MediaType#parse.
         if (contentType != null && contentType.is(MediaType.JSON)) {
             try {
                 return readers.computeIfAbsent(expectedResultType, mapper::readerFor) != null;
@@ -81,7 +80,7 @@ public boolean accept(AggregatedHttpMessage request, Class<?> expectedResultType
      * Converts the specified {@link AggregatedHttpMessage} to an object of {@code expectedResultType}.
      */
     @Override
-    public Object convert(AggregatedHttpMessage request, Class<?> expectedResultType) throws Exception {
+    public Object convertRequest(AggregatedHttpMessage request, Class<?> expectedResultType) throws Exception {
         final ObjectReader reader = readers.get(expectedResultType);
         assert reader != null;
         final String contentType = request.headers().get(HttpHeaderNames.CONTENT_TYPE);

File: core/src/main/java/com/linecorp/armeria/server/annotation/RequestConverterFunction.java
Patch:
@@ -32,12 +32,12 @@ public interface RequestConverterFunction {
      * Returns whether this converter is able to convert the specified {@code request} to
      * {@code expectedResultType}.
      */
-    default boolean accept(AggregatedHttpMessage request, Class<?> expectedResultType) {
+    default boolean canConvertRequest(AggregatedHttpMessage request, Class<?> expectedResultType) {
         return true;
     }
 
     /**
      * Converts the specified {@code request} to an object of {@code expectedResultType}.
      */
-    Object convert(AggregatedHttpMessage request, Class<?> expectedResultType) throws Exception;
+    Object convertRequest(AggregatedHttpMessage request, Class<?> expectedResultType) throws Exception;
 }

File: core/src/main/java/com/linecorp/armeria/server/annotation/StringRequestConverterFunction.java
Patch:
@@ -32,7 +32,7 @@ public class StringRequestConverterFunction implements RequestConverterFunction
      * Returns whether the specified {@link AggregatedHttpMessage} is able to be converted to a {@link String}.
      */
     @Override
-    public boolean accept(AggregatedHttpMessage request, Class<?> expectedResultType) {
+    public boolean canConvertRequest(AggregatedHttpMessage request, Class<?> expectedResultType) {
         if (!expectedResultType.isAssignableFrom(String.class)) {
             return false;
         }
@@ -45,7 +45,7 @@ public boolean accept(AggregatedHttpMessage request, Class<?> expectedResultType
      * Converts the specified {@link AggregatedHttpMessage} to a {@link String}.
      */
     @Override
-    public Object convert(AggregatedHttpMessage request, Class<?> expectedResultType) throws Exception {
+    public Object convertRequest(AggregatedHttpMessage request, Class<?> expectedResultType) throws Exception {
         assert expectedResultType.isAssignableFrom(String.class);
 
         final MediaType contentType = request.headers().contentType();

File: benchmarks/src/jmh/java/com/linecorp/armeria/thrift/PooledResponseBufferBenchmark.java
Patch:
@@ -28,10 +28,10 @@
 import org.reactivestreams.Subscription;
 
 import com.linecorp.armeria.client.Clients;
-import com.linecorp.armeria.common.DefaultHttpResponse;
 import com.linecorp.armeria.common.HttpObject;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
+import com.linecorp.armeria.common.HttpResponseWriter;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.ServerPort;
@@ -72,7 +72,7 @@ private PooledDecoratingService(Service<HttpRequest, HttpResponse> delegate) {
         @Override
         public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
             HttpResponse res = delegate().serve(ctx, req);
-            DefaultHttpResponse decorated = new DefaultHttpResponse();
+            HttpResponseWriter decorated = HttpResponse.streaming();
             res.subscribe(new Subscriber<HttpObject>() {
                 @Override
                 public void onSubscribe(Subscription s) {
@@ -108,7 +108,7 @@ private UnpooledDecoratingService(Service<HttpRequest, HttpResponse> delegate) {
         @Override
         public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
             HttpResponse res = delegate().serve(ctx, req);
-            DefaultHttpResponse decorated = new DefaultHttpResponse();
+            HttpResponseWriter decorated = HttpResponse.streaming();
             res.subscribe(new Subscriber<HttpObject>() {
                 @Override
                 public void onSubscribe(Subscription s) {

File: core/src/main/java/com/linecorp/armeria/client/DefaultHttpClient.java
Patch:
@@ -21,9 +21,9 @@
 import javax.annotation.Nullable;
 
 import com.linecorp.armeria.common.AggregatedHttpMessage;
-import com.linecorp.armeria.common.DefaultHttpResponse;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
+import com.linecorp.armeria.common.HttpResponseWriter;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.internal.PathAndQuery;
 
@@ -53,7 +53,7 @@ private HttpResponse execute(@Nullable EventLoop eventLoop, HttpRequest req) {
         }
 
         return execute(eventLoop, req.method(), pathAndQuery.path(), pathAndQuery.query(), null, req, cause -> {
-            final DefaultHttpResponse res = new DefaultHttpResponse();
+            final HttpResponseWriter res = HttpResponse.streaming();
             res.close(cause);
             return res;
         });

File: core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java
Patch:
@@ -25,7 +25,6 @@
 import com.linecorp.armeria.common.ContentTooLargeException;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpRequest;
-import com.linecorp.armeria.common.HttpResponseWriter;
 import com.linecorp.armeria.common.ProtocolViolationException;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
 import com.linecorp.armeria.internal.ArmeriaHttpUtil;
@@ -188,7 +187,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                         }
 
                         if (msg instanceof LastHttpContent) {
-                            final HttpResponseWriter res = removeResponse(resId++);
+                            final HttpResponseWrapper res = removeResponse(resId++);
                             assert this.res == res;
                             this.res = null;
 
@@ -225,7 +224,7 @@ private void failWithUnexpectedMessageType(ChannelHandlerContext ctx, Object msg
     private void fail(ChannelHandlerContext ctx, Throwable cause) {
         state = State.DISCARD;
 
-        final HttpResponseWriter res = this.res;
+        final HttpResponseWrapper res = this.res;
         this.res = null;
 
         if (res != null) {

File: core/src/main/java/com/linecorp/armeria/server/Http2RequestDecoder.java
Patch:
@@ -24,10 +24,10 @@
 import java.nio.charset.StandardCharsets;
 
 import com.linecorp.armeria.common.ContentTooLargeException;
-import com.linecorp.armeria.common.DefaultHttpRequest;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpMethod;
+import com.linecorp.armeria.common.HttpRequestWriter;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.internal.ArmeriaHttpUtil;
 import com.linecorp.armeria.internal.InboundTrafficController;
@@ -215,7 +215,7 @@ private void writeErrorResponse(ChannelHandlerContext ctx, int streamId, HttpRes
 
     @Override
     public void onRstStreamRead(ChannelHandlerContext ctx, int streamId, long errorCode) throws Http2Exception {
-        final DefaultHttpRequest req = requests.get(streamId);
+        final HttpRequestWriter req = requests.get(streamId);
         if (req == null) {
             throw connectionError(PROTOCOL_ERROR,
                                   "received a RST_STREAM frame for an unknown stream: %d", streamId);

File: core/src/test/java/com/linecorp/armeria/client/ClientDecorationBuilderTest.java
Patch:
@@ -21,12 +21,12 @@
 
 import org.junit.Test;
 
-import com.linecorp.armeria.common.DefaultHttpRequest;
-import com.linecorp.armeria.common.DefaultHttpResponse;
 import com.linecorp.armeria.common.DefaultRpcRequest;
 import com.linecorp.armeria.common.DefaultRpcResponse;
 import com.linecorp.armeria.common.HttpRequest;
+import com.linecorp.armeria.common.HttpRequestWriter;
 import com.linecorp.armeria.common.HttpResponse;
+import com.linecorp.armeria.common.HttpResponseWriter;
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.Response;
 import com.linecorp.armeria.common.RpcRequest;
@@ -47,7 +47,7 @@ public void typeConstraints() {
                 .isInstanceOf(IllegalArgumentException.class);
         assertThatThrownBy(() -> cdb.add(RpcRequest.class, HttpResponse.class, identity()))
                 .isInstanceOf(IllegalArgumentException.class);
-        assertThatThrownBy(() -> cdb.add(DefaultHttpRequest.class, DefaultHttpResponse.class, identity()))
+        assertThatThrownBy(() -> cdb.add(HttpRequestWriter.class, HttpResponseWriter.class, identity()))
                 .isInstanceOf(IllegalArgumentException.class);
         assertThatThrownBy(() -> cdb.add(DefaultRpcRequest.class, DefaultRpcResponse.class, identity()))
                 .isInstanceOf(IllegalArgumentException.class);

File: core/src/test/java/com/linecorp/armeria/common/HttpResponseDuplicatorTest.java
Patch:
@@ -25,7 +25,7 @@ public class HttpResponseDuplicatorTest {
 
     @Test
     public void aggregateTwice() {
-        final DefaultHttpResponse publisher = new DefaultHttpResponse();
+        final HttpResponseWriter publisher = HttpResponse.streaming();
         final HttpResponseDuplicator resDuplicator = new HttpResponseDuplicator(publisher);
 
         publisher.write(HttpHeaders.of(HttpStatus.OK).contentType(MediaType.PLAIN_TEXT_UTF_8));

File: core/src/test/java/com/linecorp/armeria/common/RequestContextTest.java
Patch:
@@ -408,7 +408,7 @@ private NonWrappingRequestContext createContext(boolean addContextAwareHandler)
     private class DummyRequestContext extends NonWrappingRequestContext {
         DummyRequestContext() {
             super(NoopMeterRegistry.get(), SessionProtocol.HTTP,
-                  HttpMethod.GET, "/", null, new DefaultHttpRequest());
+                  HttpMethod.GET, "/", null, HttpRequest.streaming());
         }
 
         @Override

File: core/src/test/java/com/linecorp/armeria/server/AnnotatedHttpServiceExceptionHandlerTest.java
Patch:
@@ -28,11 +28,11 @@
 
 import com.linecorp.armeria.client.HttpClient;
 import com.linecorp.armeria.common.AggregatedHttpMessage;
-import com.linecorp.armeria.common.DefaultHttpResponse;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
+import com.linecorp.armeria.common.HttpResponseWriter;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.RequestContext;
@@ -198,7 +198,7 @@ public HttpResponse handle(RequestContext ctx, HttpRequest req, Throwable cause)
     static class BadExceptionHandler1 implements ExceptionHandlerFunction {
         @Override
         public HttpResponse handle(RequestContext ctx, HttpRequest req, Throwable cause) {
-            final DefaultHttpResponse response = new DefaultHttpResponse();
+            final HttpResponseWriter response = HttpResponse.streaming();
             response.write(HttpHeaders.of(HttpStatus.OK));
             // Timeout may occur before responding.
             ctx.eventLoop().schedule((Runnable) response::close, 10, TimeUnit.SECONDS);
@@ -209,7 +209,7 @@ public HttpResponse handle(RequestContext ctx, HttpRequest req, Throwable cause)
     static class BadExceptionHandler2 implements ExceptionHandlerFunction {
         @Override
         public HttpResponse handle(RequestContext ctx, HttpRequest req, Throwable cause) {
-            final DefaultHttpResponse response = new DefaultHttpResponse();
+            final HttpResponseWriter response = HttpResponse.streaming();
             // Make invalid response.
             response.write(HttpStatus.OK.toHttpData());
             response.close();

File: core/src/test/java/com/linecorp/armeria/server/AnnotatedHttpServiceTest.java
Patch:
@@ -50,12 +50,12 @@
 import com.google.common.collect.ImmutableMap;
 
 import com.linecorp.armeria.common.AggregatedHttpMessage;
-import com.linecorp.armeria.common.DefaultHttpResponse;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpParameters;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
+import com.linecorp.armeria.common.HttpResponseWriter;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.Request;
@@ -312,7 +312,7 @@ public CompletionStage<String> postStringAsync1(AggregatedHttpMessage message, R
         @Path("/a/string-async2")
         public HttpResponse postStringAsync2(AggregatedHttpMessage message, RequestContext ctx) {
             validateContext(ctx);
-            DefaultHttpResponse response = new DefaultHttpResponse();
+            HttpResponseWriter response = HttpResponse.streaming();
             response.write(HttpHeaders.of(HttpStatus.OK));
             response.write(message.content());
             response.close();

File: core/src/test/java/com/linecorp/armeria/server/HttpResponseExceptionTest.java
Patch:
@@ -20,15 +20,16 @@
 import org.junit.Test;
 
 import com.linecorp.armeria.common.AggregatedHttpMessage;
-import com.linecorp.armeria.common.DefaultHttpResponse;
 import com.linecorp.armeria.common.HttpHeaders;
+import com.linecorp.armeria.common.HttpResponse;
+import com.linecorp.armeria.common.HttpResponseWriter;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
 
 public class HttpResponseExceptionTest {
     @Test
     public void testHttpResponse() throws Exception {
-        final DefaultHttpResponse response = new DefaultHttpResponse();
+        final HttpResponseWriter response = HttpResponse.streaming();
         final HttpResponseException exception = HttpResponseException.of(response);
         response.write(HttpHeaders.of(HttpStatus.INTERNAL_SERVER_ERROR)
                                   .contentType(MediaType.PLAIN_TEXT_UTF_8));

File: core/src/test/java/com/linecorp/armeria/server/TestConverters.java
Patch:
@@ -16,11 +16,11 @@
 
 package com.linecorp.armeria.server;
 
-import com.linecorp.armeria.common.DefaultHttpResponse;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpResponse;
+import com.linecorp.armeria.common.HttpResponseWriter;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.RequestContext;
@@ -83,7 +83,7 @@ public HttpResponse convert(Object resObj) throws Exception {
 
     private static HttpResponse httpResponse(HttpData data) {
         assert RequestContext.current() != null;
-        final DefaultHttpResponse res = new DefaultHttpResponse();
+        final HttpResponseWriter res = HttpResponse.streaming();
         final long current = System.currentTimeMillis();
         HttpHeaders headers = HttpHeaders.of(HttpStatus.OK)
                                          .setInt(HttpHeaderNames.CONTENT_LENGTH,

File: core/src/test/java/com/linecorp/armeria/server/throttling/ThrottlingServiceTest.java
Patch:
@@ -24,7 +24,7 @@
 
 import com.linecorp.armeria.client.HttpClient;
 import com.linecorp.armeria.common.HttpRequest;
-import com.linecorp.armeria.common.HttpResponseWriter;
+import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.server.AbstractHttpService;
 import com.linecorp.armeria.server.HttpService;
@@ -36,9 +36,9 @@ public class ThrottlingServiceTest {
 
     static final HttpService SERVICE = new AbstractHttpService() {
         @Override
-        protected void doGet(ServiceRequestContext ctx, HttpRequest req, HttpResponseWriter res)
+        protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)
                 throws Exception {
-            res.respond(HttpStatus.OK);
+            return HttpResponse.of(HttpStatus.OK);
         }
     };
 

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaChannel.java
Patch:
@@ -30,10 +30,10 @@
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.DefaultClientRequestContext;
 import com.linecorp.armeria.client.Endpoint;
-import com.linecorp.armeria.common.DefaultHttpRequest;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
+import com.linecorp.armeria.common.HttpRequestWriter;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.SessionProtocol;
@@ -91,7 +91,7 @@ class ArmeriaChannel extends Channel implements ClientBuilderParams {
     @Override
     public <I, O> ClientCall<I, O> newCall(
             MethodDescriptor<I, O> method, CallOptions callOptions) {
-        DefaultHttpRequest req = new DefaultHttpRequest(
+        HttpRequestWriter req = HttpRequest.streaming(
                 HttpHeaders
                         .of(HttpMethod.POST, uri().getPath() + method.getFullMethodName())
                         .contentType(serializationFormat.mediaType()));

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaClientCall.java
Patch:
@@ -31,10 +31,10 @@
 
 import com.linecorp.armeria.client.Client;
 import com.linecorp.armeria.client.ClientRequestContext;
-import com.linecorp.armeria.common.DefaultHttpRequest;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpRequest;
+import com.linecorp.armeria.common.HttpRequestWriter;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.RequestContext;
 import com.linecorp.armeria.common.SerializationFormat;
@@ -75,7 +75,7 @@ class ArmeriaClientCall<I, O> extends ClientCall<I, O>
 
     private final ClientRequestContext ctx;
     private final Client<HttpRequest, HttpResponse> httpClient;
-    private final DefaultHttpRequest req;
+    private final HttpRequestWriter req;
     private final CallOptions callOptions;
     private final ArmeriaMessageFramer messageFramer;
     private final GrpcMessageMarshaller<I, O> marshaller;
@@ -93,7 +93,7 @@ class ArmeriaClientCall<I, O> extends ClientCall<I, O>
     ArmeriaClientCall(
             ClientRequestContext ctx,
             Client<HttpRequest, HttpResponse> httpClient,
-            DefaultHttpRequest req,
+            HttpRequestWriter req,
             MethodDescriptor<I, O> method,
             int maxOutboundMessageSizeBytes,
             int maxInboundMessageSizeBytes,

File: jetty/src/main/java/com/linecorp/armeria/server/jetty/JettyService.java
Patch:
@@ -51,7 +51,6 @@
 import com.google.common.base.Splitter;
 
 import com.linecorp.armeria.common.AggregatedHttpMessage;
-import com.linecorp.armeria.common.DefaultHttpResponse;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
@@ -233,12 +232,12 @@ void stop() throws Exception {
     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
         final ArmeriaConnector connector = this.connector;
 
-        final DefaultHttpResponse res = new DefaultHttpResponse();
+        final HttpResponseWriter res = HttpResponse.streaming();
 
         req.aggregate().handle(voidFunction((aReq, cause) -> {
             if (cause != null) {
                 logger.warn("{} Failed to aggregate a request:", ctx, cause);
-                res.respond(HttpStatus.INTERNAL_SERVER_ERROR);
+                res.close(HttpHeaders.of(HttpStatus.INTERNAL_SERVER_ERROR));
                 return;
             }
 

File: spring-boot/autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationWithoutMeterTest.java
Patch:
@@ -31,7 +31,6 @@
 import com.linecorp.armeria.common.AggregatedHttpMessage;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
-import com.linecorp.armeria.common.HttpResponseWriter;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.server.AbstractHttpService;
@@ -58,9 +57,9 @@ public HttpServiceRegistrationBean okService() {
                     .setServiceName("okService")
                     .setService(new AbstractHttpService() {
                         @Override
-                        protected void doGet(ServiceRequestContext ctx, HttpRequest req, HttpResponseWriter res)
+                        protected HttpResponse doGet(ServiceRequestContext ctx, HttpRequest req)
                                 throws Exception {
-                            res.respond(HttpStatus.OK, MediaType.PLAIN_TEXT_UTF_8, "ok");
+                            return HttpResponse.of(HttpStatus.OK, MediaType.PLAIN_TEXT_UTF_8, "ok");
                         }
                     })
                     .setPathMapping(PathMapping.ofExact("/ok"))

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftServiceTest.java
Patch:
@@ -50,10 +50,11 @@
 import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameters;
 
-import com.linecorp.armeria.common.DefaultHttpRequest;
 import com.linecorp.armeria.common.HttpData;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpMethod;
+import com.linecorp.armeria.common.HttpRequest;
+import com.linecorp.armeria.common.HttpRequestWriter;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.logging.DefaultRequestLog;
@@ -638,8 +639,7 @@ private static void invoke0(THttpService service, HttpData content,
         doNothing().when(ctx).invokeOnEnterCallbacks();
         doNothing().when(ctx).invokeOnExitCallbacks();
 
-        final DefaultHttpRequest req = new DefaultHttpRequest(
-                HttpHeaders.of(HttpMethod.POST, "/"), false);
+        final HttpRequestWriter req = HttpRequest.streaming(HttpHeaders.of(HttpMethod.POST, "/"), false);
 
         req.write(content);
         req.close();

File: core/src/main/java/com/linecorp/armeria/internal/metric/CaffeineMetricSupport.java
Patch:
@@ -58,6 +58,7 @@ public static void setup(MeterRegistry registry, MeterIdPrefix idPrefix, Cache<?
     }
 
     public static void setup(MeterRegistry registry, MeterIdPrefix idPrefix, Cache<?, ?> cache, Ticker ticker) {
+        requireNonNull(cache, "cache");
         if (!cache.policy().isRecordingStats()) {
             return;
         }

File: core/src/main/java/com/linecorp/armeria/common/AggregatedHttpMessage.java
Patch:
@@ -17,7 +17,6 @@
 package com.linecorp.armeria.common;
 
 import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;
-import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_TYPE;
 import static com.linecorp.armeria.internal.ArmeriaHttpUtil.isContentAlwaysEmpty;
 import static com.linecorp.armeria.internal.ArmeriaHttpUtil.isContentAlwaysEmptyWithValidation;
 import static java.util.Objects.requireNonNull;
@@ -160,7 +159,7 @@ static AggregatedHttpMessage of(HttpMethod method, String path, MediaType mediaT
         requireNonNull(mediaType, "mediaType");
         requireNonNull(content, "content");
         requireNonNull(trailingHeaders, "trailingHeaders");
-        return of(HttpHeaders.of(method, path).setObject(CONTENT_TYPE, mediaType), content, trailingHeaders);
+        return of(HttpHeaders.of(method, path).contentType(mediaType), content, trailingHeaders);
     }
 
     // Note: Ensure we provide the same set of `of()` methods with the `of()` and `respond()` methods of
@@ -281,7 +280,7 @@ static AggregatedHttpMessage of(HttpStatus status, MediaType mediaType, HttpData
 
         final HttpHeaders headers =
                 HttpHeaders.of(status)
-                           .setObject(CONTENT_TYPE, mediaType)
+                           .contentType(mediaType)
                            .setInt(CONTENT_LENGTH, content.length());
 
         return of(headers, content, trailingHeaders);

File: core/src/main/java/com/linecorp/armeria/common/HttpRequest.java
Patch:
@@ -17,7 +17,6 @@
 package com.linecorp.armeria.common;
 
 import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;
-import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_TYPE;
 import static java.util.Objects.requireNonNull;
 
 import java.nio.charset.StandardCharsets;
@@ -150,7 +149,7 @@ static HttpRequest of(HttpMethod method, String path, MediaType mediaType, HttpD
         requireNonNull(method, "method");
         requireNonNull(path, "path");
         requireNonNull(mediaType, "mediaType");
-        return of(HttpHeaders.of(method, path).setObject(CONTENT_TYPE, mediaType), content, trailingHeaders);
+        return of(HttpHeaders.of(method, path).contentType(mediaType), content, trailingHeaders);
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/common/HttpResponse.java
Patch:
@@ -144,7 +144,7 @@ static HttpResponse of(HttpStatus status, MediaType mediaType, HttpData content,
 
         final HttpHeaders headers =
                 HttpHeaders.of(status)
-                           .setObject(HttpHeaderNames.CONTENT_TYPE, mediaType)
+                           .contentType(mediaType)
                            .setInt(HttpHeaderNames.CONTENT_LENGTH, content.length());
         return of(headers, content, trailingHeaders);
     }

File: core/src/main/java/com/linecorp/armeria/common/HttpResponseWriter.java
Patch:
@@ -150,7 +150,7 @@ default void respond(HttpStatus status, MediaType mediaType, HttpData content,
 
         final HttpHeaders headers =
                 HttpHeaders.of(status)
-                           .setObject(HttpHeaderNames.CONTENT_TYPE, mediaType)
+                           .contentType(mediaType)
                            .setInt(HttpHeaderNames.CONTENT_LENGTH, content.length());
 
         if (isContentAlwaysEmptyWithValidation(status, content, trailingHeaders)) {

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -75,7 +75,7 @@ final class HttpServerHandler extends ChannelInboundHandlerAdapter implements Ht
 
     private static final Logger logger = LoggerFactory.getLogger(HttpServerHandler.class);
 
-    private static final String ERROR_CONTENT_TYPE = MediaType.PLAIN_TEXT_UTF_8.toString();
+    private static final MediaType ERROR_CONTENT_TYPE = MediaType.PLAIN_TEXT_UTF_8;
 
     private static final Set<HttpMethod> ALLOWED_METHODS =
             Sets.immutableEnumSet(HttpMethod.DELETE, HttpMethod.GET, HttpMethod.HEAD, HttpMethod.OPTIONS,
@@ -418,7 +418,7 @@ private void respond(ChannelHandlerContext ctx, DecodedHttpRequest req, HttpStat
         respond(ctx, req,
                 AggregatedHttpMessage.of(
                         HttpHeaders.of(status)
-                                   .set(HttpHeaderNames.CONTENT_TYPE, ERROR_CONTENT_TYPE),
+                                   .contentType(ERROR_CONTENT_TYPE),
                         content));
     }
 

File: core/src/main/java/com/linecorp/armeria/server/annotation/JacksonRequestConverterFunction.java
Patch:
@@ -63,10 +63,9 @@ public JacksonRequestConverterFunction(ObjectMapper mapper) {
      */
     @Override
     public boolean accept(AggregatedHttpMessage request, Class<?> expectedResultType) {
-        final String contentType = request.headers().get(HttpHeaderNames.CONTENT_TYPE);
+        final MediaType contentType = request.headers().contentType();
         // TODO(hyangtack) Do benchmark tests to decide whether we add a cache to MediaType#parse.
-        if (contentType != null &&
-            MediaType.parse(contentType).is(MediaType.JSON)) {
+        if (contentType != null && contentType.is(MediaType.JSON)) {
             try {
                 return readers.computeIfAbsent(expectedResultType, mapper::readerFor) != null;
             } catch (Throwable cause) {

File: core/src/main/java/com/linecorp/armeria/server/encoding/HttpEncodedResponse.java
Patch:
@@ -155,10 +155,10 @@ private boolean shouldEncodeResponse(HttpHeaders headers) {
             // Content-Encoding.
             return false;
         }
-        if (headers.contains(HttpHeaderNames.CONTENT_TYPE)) {
+        if (headers.contentType() != null) {
             // Make sure the content type is worth encoding.
             try {
-                MediaType contentType = MediaType.parse(headers.get(HttpHeaderNames.CONTENT_TYPE));
+                MediaType contentType = headers.contentType();
                 if (!encodableContentTypePredicate.test(contentType)) {
                     return false;
                 }

File: core/src/main/java/com/linecorp/armeria/server/file/HttpFileService.java
Patch:
@@ -193,7 +193,7 @@ protected void doGet(ServiceRequestContext ctx, HttpRequest req, HttpResponseWri
                                          .setTimeMillis(HttpHeaderNames.DATE, config().clock().millis())
                                          .setTimeMillis(HttpHeaderNames.LAST_MODIFIED, lastModifiedMillis);
         if (entry.mediaType() != null) {
-            headers.set(HttpHeaderNames.CONTENT_TYPE, entry.mediaType().toString());
+            headers.contentType(entry.mediaType());
         }
         if (entry.contentEncoding() != null) {
             headers.set(HttpHeaderNames.CONTENT_ENCODING, entry.contentEncoding());

File: core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java
Patch:
@@ -188,7 +188,7 @@ protected void doPost(ServiceRequestContext ctx, HttpRequest req,
                 }
 
                 private void doGetOrPost(HttpRequest req, HttpResponseWriter res) {
-                    final CharSequence contentType = req.headers().get(HttpHeaderNames.CONTENT_TYPE);
+                    final MediaType contentType = req.headers().contentType();
                     if (contentType != null) {
                         throw new IllegalArgumentException(
                                 "Serialization format is none, so content type should not be set: " +

File: core/src/test/java/com/linecorp/armeria/common/HttpRequestDuplicatorTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_LENGTH;
 import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_MD5;
-import static com.linecorp.armeria.common.HttpHeaderNames.CONTENT_TYPE;
 import static com.linecorp.armeria.common.MediaType.PLAIN_TEXT_UTF_8;
 import static org.assertj.core.api.Assertions.assertThat;
 
@@ -42,15 +41,15 @@ public void aggregateTwice() {
 
         assertThat(req1.headers()).isEqualTo(
                 HttpHeaders.of(HttpMethod.PUT, "/foo")
-                           .setObject(CONTENT_TYPE, PLAIN_TEXT_UTF_8)
+                           .contentType(PLAIN_TEXT_UTF_8)
                            .setInt(CONTENT_LENGTH, 3));
         assertThat(req1.content()).isEqualTo(HttpData.of(StandardCharsets.UTF_8, "bar"));
         assertThat(req1.trailingHeaders()).isEqualTo(
                 HttpHeaders.of(CONTENT_MD5, "37b51d194a7513e45b56f6524f2d51f2"));
 
         assertThat(req2.headers()).isEqualTo(
                 HttpHeaders.of(HttpMethod.PUT, "/foo")
-                           .setObject(CONTENT_TYPE, PLAIN_TEXT_UTF_8)
+                           .contentType(PLAIN_TEXT_UTF_8)
                            .setInt(CONTENT_LENGTH, 3));
         assertThat(req2.content()).isEqualTo(HttpData.of(StandardCharsets.UTF_8, "bar"));
         assertThat(req2.trailingHeaders()).isEqualTo(

File: core/src/test/java/com/linecorp/armeria/server/AnnotatedHttpServiceTest.java
Patch:
@@ -843,7 +843,7 @@ static void checkResult(org.apache.http.HttpResponse res,
 
         final org.apache.http.Header header = res.getFirstHeader(org.apache.http.HttpHeaders.CONTENT_TYPE);
         if (contentType != null) {
-            assertThat(header.getValue(), is(contentType));
+            assertThat(MediaType.parse(header.getValue()), is(MediaType.parse(contentType)));
         } else if (statusCode >= 400) {
             assertThat(header.getValue(), is(MediaType.PLAIN_TEXT_UTF_8.toString()));
         } else {

File: core/src/test/java/com/linecorp/armeria/server/HttpHeaderPathMappingTest.java
Patch:
@@ -141,13 +141,13 @@ public void testProduceType() {
     }
 
     private static PathMappingContext method(HttpMethod method) {
-        return DefaultPathMappingContext.of(virtualHost(),"example.com",
+        return DefaultPathMappingContext.of(virtualHost(), "example.com",
                                             PATH, null, HttpHeaders.of(method, PATH), null);
     }
 
     private static PathMappingContext consumeType(HttpMethod method, MediaType contentType) {
         HttpHeaders headers = HttpHeaders.of(method, PATH);
-        headers.add(HttpHeaderNames.CONTENT_TYPE, contentType.toString());
+        headers.contentType(contentType);
         return DefaultPathMappingContext.of(virtualHost(), "example.com",
                                             PATH, null, headers, null);
     }

File: core/src/test/java/com/linecorp/armeria/server/TestConverters.java
Patch:
@@ -93,7 +93,7 @@ private static HttpResponse httpResponse(HttpData data) {
         final MediaType contentType =
                 ((ServiceRequestContext) RequestContext.current()).negotiatedProduceType();
         if (contentType != null) {
-            headers.set(HttpHeaderNames.CONTENT_TYPE, contentType.toString());
+            headers.contentType(contentType);
         }
 
         res.write(headers);

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaChannel.java
Patch:
@@ -31,7 +31,6 @@
 import com.linecorp.armeria.client.DefaultClientRequestContext;
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.common.DefaultHttpRequest;
-import com.linecorp.armeria.common.HttpHeaderNames;
 import com.linecorp.armeria.common.HttpHeaders;
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.HttpRequest;
@@ -95,7 +94,7 @@ public <I, O> ClientCall<I, O> newCall(
         DefaultHttpRequest req = new DefaultHttpRequest(
                 HttpHeaders
                         .of(HttpMethod.POST, uri().getPath() + method.getFullMethodName())
-                        .set(HttpHeaderNames.CONTENT_TYPE, serializationFormat.mediaType().toString()));
+                        .contentType(serializationFormat.mediaType()));
         ClientRequestContext ctx = newContext(HttpMethod.POST, req);
         ctx.logBuilder().serializationFormat(serializationFormat);
         ctx.logBuilder().requestContent(GrpcLogUtil.rpcRequest(method), null);

File: core/src/main/java/com/linecorp/armeria/common/MediaType.java
Patch:
@@ -364,6 +364,7 @@ private static MediaType addKnownType(MediaType mediaType) {
     public static final MediaType JAVASCRIPT_UTF_8 =
             createConstantUtf8(APPLICATION_TYPE, "javascript");
     public static final MediaType JSON_UTF_8 = createConstantUtf8(APPLICATION_TYPE, "json");
+    public static final MediaType JSON = createConstant(APPLICATION_TYPE, "json");
     /**
      * Media type for the <a href="https://www.w3.org/TR/appmanifest/">Manifest for a web
      * application</a>.

File: core/src/main/java/com/linecorp/armeria/common/Flags.java
Patch:
@@ -132,7 +132,7 @@ public final class Flags {
                    value -> value >= 0);
 
     private static final boolean DEFAULT_USE_HTTP2_PREFACE = getBoolean("defaultUseHttp2Preface", false);
-    private static final boolean DEFAULT_USE_HTTP1_PIPELINING = getBoolean("defaultUseHttp1Pipelining", true);
+    private static final boolean DEFAULT_USE_HTTP1_PIPELINING = getBoolean("defaultUseHttp1Pipelining", false);
 
     private static final String DEFAULT_DEFAULT_BACKOFF_SPEC =
             "exponential=200:10000,jitter=0.2,maxAttempts=10";
@@ -373,8 +373,8 @@ public static boolean defaultUseHttp2Preface() {
      * Returns the default value of the {@link ClientFactoryBuilder#useHttp1Pipelining(boolean)} option.
      * Note that this value has effect only if a user did not specify it.
      *
-     * <p>This flag is enabled by default. Specify the
-     * {@code -Dcom.linecorp.armeria.defaultUseHttp1Pipelining=false} JVM option to disable it.
+     * <p>This flag is disabled by default. Specify the
+     * {@code -Dcom.linecorp.armeria.defaultUseHttp1Pipelining=true} JVM option to enable it.
      */
     public static boolean defaultUseHttp1Pipelining() {
         return DEFAULT_USE_HTTP1_PIPELINING;

File: core/src/main/java/com/linecorp/armeria/client/DefaultHttpClient.java
Patch:
@@ -65,6 +65,6 @@ public HttpResponse execute(AggregatedHttpMessage aggregatedReq) {
     }
 
     HttpResponse execute(@Nullable EventLoop eventLoop, AggregatedHttpMessage aggregatedReq) {
-        return execute(eventLoop, aggregatedReq.toHttpRequest());
+        return execute(eventLoop, HttpRequest.of(aggregatedReq));
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/AnnotatedHttpServiceMethod.java
Patch:
@@ -483,7 +483,7 @@ private static HttpResponse convertResponse(Object object, Map<Class<?>, Respons
         if (object instanceof HttpResponse) {
             return (HttpResponse) object;
         } else if (object instanceof AggregatedHttpMessage) {
-            return ((AggregatedHttpMessage) object).toHttpResponse();
+            return HttpResponse.of(((AggregatedHttpMessage) object));
         } else {
             final Class<?> clazz = object != null ? object.getClass() : Object.class;
             final ResponseConverter converter = findResponseConverter(clazz, converters);
@@ -504,7 +504,7 @@ private static HttpResponse convertResponse(Object object, ResponseConverter con
         if (object instanceof HttpResponse) {
             return (HttpResponse) object;
         } else if (object instanceof AggregatedHttpMessage) {
-            return ((AggregatedHttpMessage) object).toHttpResponse();
+            return HttpResponse.of(((AggregatedHttpMessage) object));
         } else {
             try {
                 return converter.convert(object);

File: core/src/main/java/com/linecorp/armeria/server/HttpResponseException.java
Patch:
@@ -50,7 +50,7 @@ public static HttpResponseException of(HttpStatus httpStatus) {
      * Returns a new {@link HttpResponseException} instance with the specified {@link AggregatedHttpMessage}.
      */
     public static HttpResponseException of(AggregatedHttpMessage httpMessage) {
-        return of(requireNonNull(httpMessage, "httpMessage").toHttpResponse());
+        return of(HttpResponse.of(requireNonNull(httpMessage, "httpMessage")));
     }
 
     /**

File: core/src/test/java/com/linecorp/armeria/common/HttpRequestDuplicatorTest.java
Patch:
@@ -34,7 +34,7 @@ public void aggregateTwice() {
                 HttpMethod.PUT, "/foo", PLAIN_TEXT_UTF_8, HttpData.ofUtf8("bar"),
                 HttpHeaders.of(CONTENT_MD5, "37b51d194a7513e45b56f6524f2d51f2"));
 
-        final HttpRequest publisher = aReq.toHttpRequest();
+        final HttpRequest publisher = HttpRequest.of(aReq);
         final HttpRequestDuplicator reqDuplicator = new HttpRequestDuplicator(publisher);
 
         final AggregatedHttpMessage req1 = reqDuplicator.duplicateStream().aggregate().join();

File: core/src/test/java/com/linecorp/armeria/common/stream/FixedStreamMessageVerification.java
Patch:
@@ -23,7 +23,7 @@
 public class FixedStreamMessageVerification extends StreamMessageVerification<Long> {
     @Override
     public StreamMessage<Long> createPublisher(long elements) {
-        return FixedStreamMessage.of(LongStream.range(0, elements).boxed().toArray(Long[]::new));
+        return StreamMessage.of(LongStream.range(0, elements).boxed().toArray(Long[]::new));
     }
 
     // A fixed stream cannot fail.

File: core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java
Patch:
@@ -34,6 +34,9 @@
  */
 public interface ClientRequestContext extends RequestContext {
 
+    @Override
+    ClientRequestContext newDerivedContext();
+
     /**
      * The {@link AttributeKey} of the {@link HttpHeaders} to include when a {@link Client} sends an
      * {@link HttpRequest}. This {@link Attribute} is initially populated from

File: core/src/main/java/com/linecorp/armeria/common/AbstractRequestContext.java
Patch:
@@ -153,7 +153,7 @@ public boolean isTimedOut() {
 
     /**
      * Marks this {@link RequestContext} as having been timed out. Any callbacks created with
-     * {code makeContextAware} that are run after this will be failed with {@link CancellationException}.
+     * {@code makeContextAware} that are run after this will be failed with {@link CancellationException}.
      */
     public void setTimedOut() {
         timedOut = true;

File: core/src/main/java/com/linecorp/armeria/internal/DefaultAttributeMap.java
Patch:
@@ -240,8 +240,8 @@ private void remove0() {
                 // We only update the linked-list structure if prev != null because if it is null this
                 // DefaultAttribute acts also as head. The head must never be removed completely and just be
                 // marked as removed as all synchronization is done on the head itself for each bucket.
-                // The head itself will be GC'ed once the DefaultAttributeMap is GC'ed. So at most 5 heads will
-                // be removed lazy as the array size is 5.
+                // The head itself will be GC'ed once the DefaultAttributeMap is GC'ed. So at most 4 heads will
+                // be removed lazy as the array size is 4.
                 if (prev != null) {
                     prev.next = next;
 

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java
Patch:
@@ -39,6 +39,9 @@
  */
 public interface ServiceRequestContext extends RequestContext {
 
+    @Override
+    ServiceRequestContext newDerivedContext();
+
     /**
      * Returns the {@link Server} that is handling the current {@link Request}.
      */

File: core/src/main/java/com/linecorp/armeria/server/file/ClassPathHttpVfs.java
Patch:
@@ -28,7 +28,7 @@
 
 import com.linecorp.armeria.common.HttpData;
 
-final class ClassPathHttpVfs implements HttpVfs {
+final class ClassPathHttpVfs extends AbstractHttpVfs {
 
     private final ClassLoader classLoader;
     private final String rootDir;
@@ -78,7 +78,7 @@ public Entry get(String path, @Nullable String contentEncoding) {
     }
 
     @Override
-    public String toString() {
+    public String meterTag() {
         return "classpath:" + rootDir;
     }
 

File: core/src/main/java/com/linecorp/armeria/server/file/FileSystemHttpVfs.java
Patch:
@@ -29,7 +29,7 @@
 
 import com.linecorp.armeria.common.HttpData;
 
-final class FileSystemHttpVfs implements HttpVfs {
+final class FileSystemHttpVfs extends AbstractHttpVfs {
 
     private static final boolean FILE_SEPARATOR_IS_NOT_SLASH = File.separatorChar != '/';
 
@@ -58,7 +58,7 @@ public Entry get(String path, @Nullable String contentEncoding) {
     }
 
     @Override
-    public String toString() {
+    public String meterTag() {
         return "file:" + rootDir;
     }
 

File: core/src/main/java/com/linecorp/armeria/server/file/HttpFileService.java
Patch:
@@ -127,7 +127,7 @@ public void serviceAdded(ServiceConfig cfg) throws Exception {
                     new MeterIdPrefix("armeria.server.file.vfsCache",
                                       "hostnamePattern", cfg.virtualHost().hostnamePattern(),
                                       "pathMapping", cfg.pathMapping().meterTag(),
-                                      "rootDir", config.vfs().toString()),
+                                      "vfs", config.vfs().meterTag()),
                     cache);
         }
     }

File: core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessage.java
Patch:
@@ -36,6 +36,7 @@
 
 abstract class AbstractStreamMessage<T> implements StreamMessage<T> {
 
+    static final CloseEvent SUCCESSFUL_CLOSE = new CloseEvent(null);
     static final CloseEvent CANCELLED_CLOSE = new CloseEvent(
             Exceptions.clearTrace(CancelledSubscriptionException.get()));
     static final CloseEvent ABORTED_CLOSE = new CloseEvent(

File: core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessageAndWriter.java
Patch:
@@ -28,8 +28,6 @@
 abstract class AbstractStreamMessageAndWriter<T> extends AbstractStreamMessage<T>
         implements StreamMessageAndWriter<T> {
 
-    static final CloseEvent SUCCESSFUL_CLOSE = new CloseEvent(null);
-
     enum State {
         /**
          * The initial state. Will enter {@link #CLOSED} or {@link #CLEANUP}.

File: core/src/test/java/com/linecorp/armeria/common/stream/DefaultStreamMessageTest.java
Patch:
@@ -18,10 +18,10 @@
 
 import java.util.List;
 
-public class DefaultStreamMessageTest extends AbstractStreamMessageTest {
+public class DefaultStreamMessageTest extends AbstractStreamMessageAndWriterTest {
 
     @Override
-    <T> StreamMessageAndWriter<T> newStream(List<T> unused) {
+    <T> StreamMessageAndWriter<T> newStreamWriter(List<T> unused) {
         return new DefaultStreamMessage<>();
     }
 }

File: core/src/test/java/com/linecorp/armeria/common/stream/EventLoopStreamMessageTest.java
Patch:
@@ -18,10 +18,10 @@
 
 import java.util.List;
 
-public class EventLoopStreamMessageTest extends AbstractStreamMessageTest {
+public class EventLoopStreamMessageTest extends AbstractStreamMessageAndWriterTest {
 
     @Override
-    <T> StreamMessageAndWriter<T> newStream(List<T> unused) {
+    <T> StreamMessageAndWriter<T> newStreamWriter(List<T> unused) {
         return new EventLoopStreamMessage<>(eventLoop());
     }
 }

File: grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java
Patch:
@@ -103,6 +103,7 @@ protected void configure(ServerBuilder sb) throws Exception {
             sb.workerGroup(EventLoopGroups.newEventLoopGroup(1), true);
             sb.port(0, HTTP);
             sb.defaultMaxRequestLength(MAX_MESSAGE_SIZE);
+            sb.idleTimeoutMillis(0);
 
             sb.serviceUnder("/", new GrpcServiceBuilder()
                     .addService(new TestServiceImpl(Executors.newSingleThreadScheduledExecutor()))

File: core/src/main/java/com/linecorp/armeria/common/stream/StreamWriter.java
Patch:
@@ -56,7 +56,7 @@ default boolean write(Supplier<? extends T> o) {
     }
 
     /**
-     * Performs the specified {@code task} when there's enough demans from the {@link Subscriber}.
+     * Performs the specified {@code task} when there are enough demands from the {@link Subscriber}.
      *
      * @return the future that completes successfully when the {@code task} finishes or
      *         exceptionally when the {@link StreamMessage} is closed unexpectedly.

File: core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java
Patch:
@@ -443,7 +443,7 @@ private ChannelFuture respond0(ChannelHandlerContext ctx,
                                    DecodedHttpRequest req, AggregatedHttpMessage res) {
 
         // No need to consume further since the response is ready.
-        req.abort();
+        req.close();
 
         final boolean trailingHeadersEmpty = res.trailingHeaders().isEmpty();
         final boolean contentAndTrailingHeadersEmpty = res.content().isEmpty() && trailingHeadersEmpty;

File: core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java
Patch:
@@ -521,7 +521,7 @@ public boolean isResponseContentDeferred() {
 
     @Override
     public void endResponse() {
-        endResponse0(null);
+        endResponse0(responseContent instanceof RpcResponse ? ((RpcResponse) responseContent).cause() : null);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/common/logging/RequestLogBuilder.java
Patch:
@@ -141,7 +141,9 @@ public interface RequestLogBuilder {
     boolean isResponseContentDeferred();
 
     /**
-     * Sets {@link RequestLog#responseDurationNanos()} and finishes the collection of the information.
+     * Sets {@link RequestLog#responseDurationNanos()} and finishes the collection of the information. If a
+     * {@link Throwable} cause has been set with {@link #responseContent(Object, Object)}, it will be treated
+     * as the {@code responseCause} for this log.
      */
     void endResponse();
 

File: core/src/main/java/com/linecorp/armeria/client/DefaultHttpClient.java
Patch:
@@ -17,7 +17,6 @@
 package com.linecorp.armeria.client;
 
 import static com.linecorp.armeria.internal.ArmeriaHttpUtil.concatPaths;
-import static com.linecorp.armeria.internal.ArmeriaHttpUtil.splitPathAndQuery;
 
 import javax.annotation.Nullable;
 
@@ -26,6 +25,7 @@
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.internal.PathAndQuery;
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.netty.channel.EventLoop;
@@ -46,13 +46,13 @@ private HttpResponse execute(@Nullable EventLoop eventLoop, HttpRequest req) {
         final String concatPaths = concatPaths(uri().getRawPath(), req.path());
         req.path(concatPaths);
 
-        final String[] pathAndQuery = splitPathAndQuery(concatPaths);
+        final PathAndQuery pathAndQuery = PathAndQuery.parse(concatPaths);
         if (pathAndQuery == null) {
             req.abort();
             return HttpResponse.ofFailure(new IllegalArgumentException("invalid path: " + concatPaths));
         }
 
-        return execute(eventLoop, req.method(), pathAndQuery[0], pathAndQuery[1], null, req, cause -> {
+        return execute(eventLoop, req.method(), pathAndQuery.path(), pathAndQuery.query(), null, req, cause -> {
             final DefaultHttpResponse res = new DefaultHttpResponse();
             res.close(cause);
             return res;

File: core/src/main/java/com/linecorp/armeria/internal/metric/CaffeineMetricSupport.java
Patch:
@@ -58,6 +58,9 @@ public static void setup(MeterRegistry registry, MeterIdPrefix idPrefix, Cache<?
     }
 
     public static void setup(MeterRegistry registry, MeterIdPrefix idPrefix, Cache<?, ?> cache, Ticker ticker) {
+        if (!cache.policy().isRecordingStats()) {
+            return;
+        }
         final CaffeineMetrics metrics = MicrometerUtil.register(
                 registry, idPrefix, CaffeineMetrics.class, CaffeineMetrics::new);
         metrics.add(cache, ticker);

File: retrofit2/src/test/java/com/linecorp/armeria/client/retrofit2/ArmeriaCallFactoryTest.java
Patch:
@@ -44,7 +44,7 @@
 import com.linecorp.armeria.common.HttpResponseWriter;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.MediaType;
-import com.linecorp.armeria.internal.ArmeriaHttpUtil;
+import com.linecorp.armeria.internal.PathAndQuery;
 import com.linecorp.armeria.server.AbstractHttpService;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.ServiceRequestContext;
@@ -177,7 +177,7 @@ protected void doGet(ServiceRequestContext ctx,
                       req.aggregate().handle(voidFunction((aReq, cause) -> {
                           Map<String, List<String>> params = new QueryStringDecoder(aReq.path())
                                   .parameters();
-                          String fullPath = ArmeriaHttpUtil.splitPathAndQuery(req.path())[0];
+                          String fullPath = PathAndQuery.parse(req.path()).path();
                           res.respond(HttpStatus.OK, MediaType.JSON_UTF_8,
                                       "{\"name\":\"" + fullPath.replace("/pathWithName/", "") + "\", " +
                                       "\"age\":" + params.get("age").get(0) + '}');

File: core/src/test/java/com/linecorp/armeria/common/stream/StreamMessageVerification.java
Patch:
@@ -40,7 +40,7 @@ public abstract class StreamMessageVerification<T> extends PublisherVerification
     private final TestEnvironment env;
 
     protected StreamMessageVerification() {
-        this(new TestEnvironment());
+        this(new TestEnvironment(10000));
     }
 
     protected StreamMessageVerification(TestEnvironment env) {

File: core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessage.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.util.Queue;
 import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.Executor;
 
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
@@ -233,7 +232,7 @@ void clearSubscriber() {
             }
         }
 
-        Executor executor() {
+        EventExecutor executor() {
             return executor;
         }
 

File: core/src/main/java/com/linecorp/armeria/common/HttpRequest.java
Patch:
@@ -24,13 +24,14 @@
 import java.util.Formatter;
 import java.util.Locale;
 import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.Executor;
 
 import org.reactivestreams.Publisher;
 import org.reactivestreams.Subscriber;
 
 import com.linecorp.armeria.common.stream.StreamMessage;
 
+import io.netty.util.concurrent.EventExecutor;
+
 /**
  * A streamed HTTP/2 {@link Request}.
  *
@@ -309,7 +310,7 @@ default CompletableFuture<AggregatedHttpMessage> aggregate() {
      * Aggregates this request. The returned {@link CompletableFuture} will be notified when the content and
      * the trailing headers of the request is received fully.
      */
-    default CompletableFuture<AggregatedHttpMessage> aggregate(Executor executor) {
+    default CompletableFuture<AggregatedHttpMessage> aggregate(EventExecutor executor) {
         final CompletableFuture<AggregatedHttpMessage> future = new CompletableFuture<>();
         final HttpRequestAggregator aggregator = new HttpRequestAggregator(this, future);
         completionFuture().whenCompleteAsync(aggregator, executor);

File: core/src/main/java/com/linecorp/armeria/common/HttpRequestDuplicator.java
Patch:
@@ -18,8 +18,6 @@
 
 import static java.util.Objects.requireNonNull;
 
-import java.util.concurrent.Executor;
-
 import javax.annotation.Nullable;
 
 import com.google.common.base.MoreObjects;
@@ -28,6 +26,8 @@
 import com.linecorp.armeria.common.stream.StreamMessage;
 import com.linecorp.armeria.common.stream.StreamMessageWrapper;
 
+import io.netty.util.concurrent.EventExecutor;
+
 /**
  * Allows subscribing to a {@link HttpRequest} multiple times by duplicating the stream.
  *
@@ -82,7 +82,7 @@ public HttpRequestDuplicator(HttpRequest req, long maxSignalLength) {
      * @param maxSignalLength the maximum length of signals. {@code 0} disables the length limit
      * @param executor the executor to use for upstream signals.
      */
-    public HttpRequestDuplicator(HttpRequest req, long maxSignalLength, @Nullable Executor executor) {
+    public HttpRequestDuplicator(HttpRequest req, long maxSignalLength, @Nullable EventExecutor executor) {
         super(requireNonNull(req, "req"), obj -> {
             if (obj instanceof HttpData) {
                 return ((HttpData) obj).length();

File: core/src/main/java/com/linecorp/armeria/common/HttpResponse.java
Patch:
@@ -22,14 +22,15 @@
 import java.util.Locale;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
-import java.util.concurrent.Executor;
 
 import org.reactivestreams.Publisher;
 
 import com.google.common.base.Throwables;
 
 import com.linecorp.armeria.common.stream.StreamMessage;
 
+import io.netty.util.concurrent.EventExecutor;
+
 /**
  * A streamed HTTP/2 {@link Response}.
  */
@@ -207,7 +208,7 @@ default CompletableFuture<AggregatedHttpMessage> aggregate() {
      * Aggregates this response. The returned {@link CompletableFuture} will be notified when the content and
      * the trailing headers of the response are received fully.
      */
-    default CompletableFuture<AggregatedHttpMessage> aggregate(Executor executor) {
+    default CompletableFuture<AggregatedHttpMessage> aggregate(EventExecutor executor) {
         final CompletableFuture<AggregatedHttpMessage> future = new CompletableFuture<>();
         final HttpResponseAggregator aggregator = new HttpResponseAggregator(future);
         completionFuture().whenCompleteAsync(aggregator, executor);

File: core/src/main/java/com/linecorp/armeria/common/HttpResponseAggregator.java
Patch:
@@ -17,6 +17,7 @@
 package com.linecorp.armeria.common;
 
 import static com.google.common.base.MoreObjects.firstNonNull;
+import static com.google.common.base.Preconditions.checkState;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -51,6 +52,7 @@ protected void onHeaders(HttpHeaders headers) {
 
     @Override
     protected AggregatedHttpMessage onSuccess(HttpData content) {
+        checkState(headers != null, "An aggregated message does not have headers.");
         return AggregatedHttpMessage.of(firstNonNull(informationals, Collections.emptyList()),
                                         headers, content, trailingHeaders);
     }

File: core/src/main/java/com/linecorp/armeria/common/HttpResponseDuplicator.java
Patch:
@@ -18,8 +18,6 @@
 
 import static java.util.Objects.requireNonNull;
 
-import java.util.concurrent.Executor;
-
 import javax.annotation.Nullable;
 
 import com.google.common.base.MoreObjects;
@@ -28,6 +26,8 @@
 import com.linecorp.armeria.common.stream.StreamMessage;
 import com.linecorp.armeria.common.stream.StreamMessageWrapper;
 
+import io.netty.util.concurrent.EventExecutor;
+
 /**
  * Allows subscribing to a {@link HttpResponse} multiple times by duplicating the stream.
  *
@@ -81,7 +81,7 @@ public HttpResponseDuplicator(HttpResponse res, long maxSignalLength) {
      * @param maxSignalLength the maximum length of signals. {@code 0} disables the length limit
      * @param executor the executor to use for upstream signals.
      */
-    public HttpResponseDuplicator(HttpResponse res, long maxSignalLength, @Nullable Executor executor) {
+    public HttpResponseDuplicator(HttpResponse res, long maxSignalLength, @Nullable EventExecutor executor) {
         super(requireNonNull(res, "res"), obj -> {
             if (obj instanceof HttpData) {
                 return ((HttpData) obj).length();

File: benchmarks/src/jmh/java/com/linecorp/armeria/common/stream/StreamMessageBenchmark.java
Patch:
@@ -282,7 +282,7 @@ private SummingSubscriber(CountDownLatch completedLatch, boolean flowControl) {
             this.flowControl = flowControl;
         }
 
-        private long sum() {
+        private synchronized long sum() {
             if (!complete) {
                 logger.warn("Stream not completed");
                 return -1;

File: benchmarks/src/jmh/java/com/linecorp/armeria/shared/EventLoopJmhExecutor.java
Patch:
@@ -43,7 +43,7 @@ public class EventLoopJmhExecutor extends MultithreadEventLoopGroup {
 
     public static final String JVM_ARG_1 = "-Djmh.executor=CUSTOM";
     public static final String JVM_ARG_2 =
-            "-Djmh.executor.class=com.linecorp.armeria.benchmarks.shared.EventLoopJmhExecutor";
+            "-Djmh.executor.class=com.linecorp.armeria.shared.EventLoopJmhExecutor";
 
     private static final FastThreadLocal<EventLoop> CURRENT_EVENT_LOOP = new FastThreadLocal<>();
 

File: benchmarks/src/jmh/java/com/linecorp/armeria/core/HttpServerBenchmark.java
Patch:
@@ -5,7 +5,7 @@
  * version 2.0 (the "License"); you may not use this file except in compliance
  * with the License. You may obtain a copy of the License at:
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.benchmarks.core;
+package com.linecorp.armeria.core;
 
 import static com.linecorp.armeria.common.SessionProtocol.HTTP;
 

File: benchmarks/src/jmh/java/com/linecorp/armeria/grpc/shared/ClientType.java
Patch:
@@ -5,7 +5,7 @@
  * version 2.0 (the "License"); you may not use this file except in compliance
  * with the License. You may obtain a copy of the License at:
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.benchmarks.grpc.shared;
+package com.linecorp.armeria.grpc.shared;
 
 public enum ClientType {
     // The official client for the benchmark (armeria for downstream, grpc-netty for upstream).

File: benchmarks/src/jmh/java/com/linecorp/armeria/shared/EventLoopJmhExecutor.java
Patch:
@@ -5,7 +5,7 @@
  * version 2.0 (the "License"); you may not use this file except in compliance
  * with the License. You may obtain a copy of the License at:
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *   https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.benchmarks.shared;
+package com.linecorp.armeria.shared;
 
 import java.util.concurrent.Executor;
 

File: benchmarks/src/jmh/java/com/linecorp/armeria/thrift/PooledResponseBufferBenchmark.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.benchmarks.thrift;
+package com.linecorp.armeria.thrift;
 
 import static com.linecorp.armeria.common.SessionProtocol.HTTP;
 
@@ -27,8 +27,6 @@
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 
-import com.linecorp.armeria.benchmarks.thrift.services.HelloService;
-import com.linecorp.armeria.benchmarks.thrift.services.HelloService.AsyncIface;
 import com.linecorp.armeria.client.Clients;
 import com.linecorp.armeria.common.DefaultHttpResponse;
 import com.linecorp.armeria.common.HttpObject;
@@ -41,6 +39,8 @@
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.SimpleDecoratingService;
 import com.linecorp.armeria.server.thrift.THttpService;
+import com.linecorp.armeria.thrift.services.HelloService;
+import com.linecorp.armeria.thrift.services.HelloService.AsyncIface;
 
 import joptsimple.internal.Strings;
 

File: core/src/main/java/com/linecorp/armeria/common/stream/StreamWriter.java
Patch:
@@ -51,7 +51,9 @@ public interface StreamWriter<T> {
      * @return {@code true} if the specified object has been scheduled for publication. {@code false} if the
      *         stream has been closed already.
      */
-    boolean write(Supplier<? extends T> o);
+    default boolean write(Supplier<? extends T> o) {
+        return write(o.get());
+    }
 
     /**
      * Performs the specified {@code task} when there's enough demans from the {@link Subscriber}.

File: core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessageDuplicator.java
Patch:
@@ -217,6 +217,9 @@ public void onComplete() {
         }
 
         private void pushSignal(Object obj) {
+            if (state == State.CLOSED) {
+                return;
+            }
             if (!(obj instanceof CloseEvent)) {
                 final int dataLength = signalLengthGetter.length(obj);
                 if (dataLength > 0) {

File: core/src/main/java/com/linecorp/armeria/common/metric/MoreNamingConventions.java
Patch:
@@ -22,8 +22,8 @@
 import com.google.common.base.Splitter;
 
 import io.micrometer.core.instrument.Meter.Type;
-import io.micrometer.core.instrument.NamingConvention;
-import io.micrometer.core.instrument.prometheus.PrometheusNamingConvention;
+import io.micrometer.core.instrument.config.NamingConvention;
+import io.micrometer.prometheus.PrometheusNamingConvention;
 
 /**
  * Provides commonly-used {@link NamingConvention}s.

File: core/src/main/java/com/linecorp/armeria/server/RouteCache.java
Patch:
@@ -28,7 +28,7 @@
 import com.linecorp.armeria.common.Flags;
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.Response;
-import com.linecorp.armeria.common.metric.MeterId;
+import com.linecorp.armeria.common.metric.MeterIdPrefix;
 import com.linecorp.armeria.internal.metric.CaffeineMetricSupport;
 import com.linecorp.armeria.server.composition.CompositeServiceEntry;
 
@@ -111,8 +111,8 @@ public PathMapped<V> find(PathMappingContext mappingCtx) {
         }
 
         @Override
-        public boolean registerMetrics(MeterRegistry registry, MeterId id) {
-            CaffeineMetricSupport.setup(registry, id, cache);
+        public boolean registerMetrics(MeterRegistry registry, MeterIdPrefix idPrefix) {
+            CaffeineMetricSupport.setup(registry, idPrefix, cache);
             return true;
         }
 

File: core/src/main/java/com/linecorp/armeria/server/Router.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.io.OutputStream;
 
-import com.linecorp.armeria.common.metric.MeterId;
+import com.linecorp.armeria.common.metric.MeterIdPrefix;
 
 import io.micrometer.core.instrument.MeterRegistry;
 
@@ -40,7 +40,7 @@ public interface Router<V> {
      *
      * @return whether the stats of this {@link Router} has been registered
      */
-    default boolean registerMetrics(MeterRegistry registry, MeterId id) {
+    default boolean registerMetrics(MeterRegistry registry, MeterIdPrefix idPrefix) {
         return false;
     }
 

File: core/src/test/java/com/linecorp/armeria/server/ServerTest.java
Patch:
@@ -47,7 +47,7 @@
 import com.linecorp.armeria.common.HttpResponseWriter;
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.Request;
-import com.linecorp.armeria.common.metric.MeterId;
+import com.linecorp.armeria.common.metric.MeterIdPrefix;
 import com.linecorp.armeria.common.metric.PrometheusMeterRegistries;
 import com.linecorp.armeria.common.util.CompletionActions;
 import com.linecorp.armeria.common.util.Exceptions;
@@ -135,8 +135,8 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
     public static void checkMetrics() {
         final MeterRegistry registry = server.server().meterRegistry();
         assertThat(MicrometerUtil.register(registry,
-                                           new MeterId("armeria.server.router.virtualHostCache",
-                                                       "hostnamePattern", "*"),
+                                           new MeterIdPrefix("armeria.server.router.virtualHostCache",
+                                                             "hostnamePattern", "*"),
                                            Object.class, (r, i) -> null)).isNotNull();
     }
 

File: grpc/src/test/java/com/linecorp/armeria/it/grpc/GrpcMetricsIntegrationTest.java
Patch:
@@ -39,7 +39,7 @@
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
-import com.linecorp.armeria.common.metric.MeterIdFunction;
+import com.linecorp.armeria.common.metric.MeterIdPrefixFunction;
 import com.linecorp.armeria.common.metric.PrometheusMeterRegistries;
 import com.linecorp.armeria.grpc.testing.Messages.Payload;
 import com.linecorp.armeria.grpc.testing.Messages.SimpleRequest;
@@ -83,7 +83,7 @@ protected void configure(ServerBuilder sb) throws Exception {
                          .enableUnframedRequests(true)
                          .build()
                          .decorate(MetricCollectingService.newDecorator(
-                                 MeterIdFunction.ofDefault("server"))));
+                                 MeterIdPrefixFunction.ofDefault("server"))));
         }
     };
 
@@ -158,7 +158,7 @@ private static void makeRequest(String name) throws Exception {
                 .factory(clientFactory)
                 .decorator(HttpRequest.class, HttpResponse.class,
                            MetricCollectingClient.newDecorator(
-                                   MeterIdFunction.ofDefault("client")))
+                                   MeterIdPrefixFunction.ofDefault("client")))
                 .build(TestServiceBlockingStub.class);
 
         SimpleRequest request =

File: spring-boot/autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationTest.java
Patch:
@@ -56,7 +56,6 @@
 import com.linecorp.armeria.spring.test.thrift.main.HelloService;
 import com.linecorp.armeria.spring.test.thrift.main.HelloService.hello_args;
 
-import io.micrometer.spring.export.prometheus.EnablePrometheusMetrics;
 import io.netty.util.AsciiString;
 
 /**
@@ -67,7 +66,6 @@
 @SpringBootTest(classes = TestConfiguration.class)
 @ActiveProfiles({ "local", "autoConfTest" })
 @DirtiesContext
-@EnablePrometheusMetrics
 public class ArmeriaAutoConfigurationTest {
 
     @SpringBootApplication
@@ -180,6 +178,6 @@ public void testMetrics() throws Exception {
                                               .get("/internal/metrics")
                                               .aggregate().join()
                                               .content().toStringUtf8();
-        assertThat(metricReport).contains("# TYPE jvm_gc_live_data_size gauge");
+        assertThat(metricReport).contains("# TYPE jvm_gc_live_data_size_bytes gauge");
     }
 }

File: thrift/src/test/java/com/linecorp/armeria/it/metric/DropwizardMetricsIntegrationTest.java
Patch:
@@ -38,7 +38,7 @@
 import com.linecorp.armeria.common.RpcResponse;
 import com.linecorp.armeria.common.logging.RequestLogAvailability;
 import com.linecorp.armeria.common.metric.DropwizardMeterRegistries;
-import com.linecorp.armeria.common.metric.MeterIdFunction;
+import com.linecorp.armeria.common.metric.MeterIdPrefixFunction;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.metric.MetricCollectingService;
 import com.linecorp.armeria.server.thrift.THttpService;
@@ -69,7 +69,7 @@ protected void configure(ServerBuilder sb) throws Exception {
                                       RequestLogAvailability.COMPLETE);
                 return delegate.serve(ctx, req);
             }).decorate(MetricCollectingService.newDecorator(
-                    MeterIdFunction.ofDefault("armeria.server.HelloService"))));
+                    MeterIdPrefixFunction.ofDefault("armeria.server.HelloService"))));
         }
     };
 
@@ -153,7 +153,7 @@ private static void makeRequest(String name) {
                            })
                 .decorator(RpcRequest.class, RpcResponse.class,
                            MetricCollectingClient.newDecorator(
-                                   MeterIdFunction.ofDefault("armeria.client.HelloService")))
+                                   MeterIdPrefixFunction.ofDefault("armeria.client.HelloService")))
                 .build(Iface.class);
         try {
             client.hello(name);

File: benchmarks/src/jmh/java/com/linecorp/armeria/benchmarks/core/HttpServerBenchmark.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.benchmarks;
+package com.linecorp.armeria.benchmarks.core;
 
 import static com.linecorp.armeria.common.SessionProtocol.HTTP;
 

File: benchmarks/src/jmh/java/com/linecorp/armeria/benchmarks/grpc/shared/ClientType.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.grpc.shared;
+package com.linecorp.armeria.benchmarks.grpc.shared;
 
 public enum ClientType {
     // The official client for the benchmark (armeria for downstream, grpc-netty for upstream).

File: benchmarks/src/jmh/java/com/linecorp/armeria/benchmarks/grpc/shared/GithubApiService.java
Patch:
@@ -14,15 +14,15 @@
  * under the License.
  */
 
-package com.linecorp.armeria.grpc.shared;
+package com.linecorp.armeria.benchmarks.grpc.shared;
 
 import java.io.IOException;
 
 import com.google.common.io.Resources;
 import com.google.protobuf.Empty;
 
-import com.linecorp.armeria.benchmarks.GithubApi.SearchResponse;
-import com.linecorp.armeria.benchmarks.GithubServiceGrpc.GithubServiceImplBase;
+import com.linecorp.armeria.benchmarks.grpc.GithubApi.SearchResponse;
+import com.linecorp.armeria.benchmarks.grpc.GithubServiceGrpc.GithubServiceImplBase;
 
 import io.grpc.stub.StreamObserver;
 

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsEndpointGroupUtil.java
Patch:
@@ -26,7 +26,7 @@
 import io.netty.resolver.dns.DnsNameResolverBuilder;
 import io.netty.resolver.dns.DnsServerAddressStreamProviders;
 
-/** Utiltities for DNS endpoint resolvers. */
+/** Utilities for DNS endpoint resolvers. */
 final class DnsEndpointGroupUtil {
 
     /**

File: core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessageDuplicator.java
Patch:
@@ -300,7 +300,7 @@ void unsubscribe(DownstreamSubscription<T> subscription, Throwable cause) {
         }
 
         private void cleanupIfLastSubscription() {
-            if (isLastDownstreamAdded() && downstreamSubscriptions.size() == 0) {
+            if (isLastDownstreamAdded() && downstreamSubscriptions.isEmpty()) {
                 if (setState(State.LAST_DOWNSTREAM_ADDED, State.CLOSED)) {
                     upstream.abort();
                     signals().clear();

File: core/src/main/java/com/linecorp/armeria/server/docs/MethodInfo.java
Patch:
@@ -20,7 +20,6 @@
 import static java.util.Comparator.comparing;
 import static java.util.Objects.requireNonNull;
 
-import java.util.Comparator;
 import java.util.List;
 import java.util.Objects;
 import java.util.Set;
@@ -88,7 +87,7 @@ public MethodInfo(String name,
                         comparing(TypeSignature::signature),
                         requireNonNull(exceptionTypeSignatures, "exceptionTypeSignatures"));
         this.endpoints = ImmutableSortedSet.copyOf(
-                Comparator.comparing(e -> e.hostnamePattern() + ':' + e.path()),
+                comparing(e -> e.hostnamePattern() + ':' + e.path()),
                 requireNonNull(endpoints, "endpoints"));
         this.exampleHttpHeaders = Streams.stream(requireNonNull(exampleHttpHeaders, "exampleHttpHeaders"))
                                          .map(HttpHeaders::copyOf)

File: grpc/src/main/java/com/linecorp/armeria/internal/grpc/HttpStreamReader.java
Patch:
@@ -89,7 +89,7 @@ public void onNext(HttpObject obj) {
             String grpcStatus = headers.get(GrpcHeaderNames.GRPC_STATUS);
             if (grpcStatus != null) {
                 Status status = Status.fromCodeValue(Integer.valueOf(grpcStatus));
-                if (status.getCode().equals(Status.OK.getCode())) {
+                if (status.getCode() == Status.OK.getCode()) {
                    // Successful response, finish delivering messages before returning the status.
                    closeDeframer();
                 }

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/UnframedGrpcService.java
Patch:
@@ -206,7 +206,7 @@ private void deframeAndRespond(
         String grpcStatusCode = trailers.get(GrpcHeaderNames.GRPC_STATUS);
         Status grpcStatus = Status.fromCodeValue(Integer.parseInt(grpcStatusCode));
 
-        if (!grpcStatus.getCode().equals(Status.OK.getCode())) {
+        if (grpcStatus.getCode() != Status.OK.getCode()) {
             StringBuilder message = new StringBuilder("grpc-status: " + grpcStatusCode);
             String grpcMessage = trailers.get(GrpcHeaderNames.GRPC_MESSAGE);
             if (grpcMessage != null) {

File: thrift/src/main/java/com/linecorp/armeria/server/thrift/ThriftDocServicePlugin.java
Patch:
@@ -88,7 +88,7 @@ public class ThriftDocServicePlugin implements DocServicePlugin {
     private static final TypeSignature STRING = TypeSignature.ofBase("string");
     private static final TypeSignature BINARY = TypeSignature.ofBase("binary");
 
-    private ThriftDocStringExtractor docstringExtractor = new ThriftDocStringExtractor();
+    private final ThriftDocStringExtractor docstringExtractor = new ThriftDocStringExtractor();
 
     // Methods related with generating a service specification.
 

File: core/src/test/java/com/linecorp/armeria/client/endpoint/RoundRobinStrategyTest.java
Patch:
@@ -49,7 +49,7 @@ public void setup() {
     }
 
     @Test
-    public void select_empty() {
+    public void select() {
         assertThat(EndpointGroupRegistry.selectNode(ctx, "endpoint"))
                 .isEqualTo(ENDPOINT_GROUP.endpoints().get(0));
         assertThat(EndpointGroupRegistry.selectNode(ctx, "endpoint"))
@@ -61,7 +61,7 @@ public void select_empty() {
     }
 
     @Test
-    public void select() {
+    public void select_empty() {
         assertThat(EndpointGroupRegistry.selectNode(ctx, "endpoint")).isNotNull();
 
         assertThat(catchThrowable(() -> EndpointGroupRegistry.selectNode(ctx, "empty")))

File: core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java
Patch:
@@ -49,7 +49,8 @@ final class HttpClientDelegate implements Client<HttpRequest, HttpResponse> {
 
     @Override
     public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {
-        final Endpoint endpoint = ctx.endpoint().resolve().withDefaultPort(ctx.sessionProtocol().defaultPort());
+        final Endpoint endpoint = ctx.endpoint().resolve(ctx)
+                                     .withDefaultPort(ctx.sessionProtocol().defaultPort());
         autoFillHeaders(ctx, endpoint, req);
         if (!sanitizePath(req)) {
             req.abort();

File: core/src/main/java/com/linecorp/armeria/client/endpoint/RoundRobinStrategy.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
 
+import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.Endpoint;
 
 final class RoundRobinStrategy implements EndpointSelectionStrategy {
@@ -56,7 +57,8 @@ public EndpointSelectionStrategy strategy() {
         }
 
         @Override
-        public Endpoint select() {
+        public Endpoint select(ClientRequestContext ctx) {
+
             List<Endpoint> endpoints = endpointGroup.endpoints();
             int currentSequence = sequence.getAndIncrement();
 

File: core/src/main/java/com/linecorp/armeria/client/endpoint/WeightedRoundRobinStrategy.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.Endpoint;
 
 final class WeightedRoundRobinStrategy implements EndpointSelectionStrategy {
@@ -66,7 +67,7 @@ public EndpointSelectionStrategy strategy() {
         }
 
         @Override
-        public Endpoint select() {
+        public Endpoint select(ClientRequestContext ctx) {
             int currentSequence = sequence.getAndIncrement();
             return endpointsAndWeights.selectEndpoint(currentSequence);
         }

File: core/src/test/java/com/linecorp/armeria/client/Http2ClientSettingsTest.java
Patch:
@@ -200,6 +200,7 @@ public void onGoAwayRead(ChannelHandlerContext ctx, int lastStreamId, long error
                     }
                 });
                 latch.await();
+                buffer.release();
             }
         }
     }

File: core/src/test/java/com/linecorp/armeria/common/stream/StreamMessageDuplicatorTest.java
Patch:
@@ -327,6 +327,7 @@ public void lastDuplicateStream() {
         }
         for (int i = 25; i < 30; i++) {  // rest of them are still in the queue.
             assertThat(bufs[i].refCnt()).isOne();
+            bufs[i].release();
         }
     }
 

File: grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java
Patch:
@@ -513,6 +513,7 @@ public void onClose(Status status, Metadata trailers) {
         assertThat(queue.poll(operationTimeoutMillis(), TimeUnit.MILLISECONDS)).isEqualTo(
                 goldenResponses.get(1));
         assertThat(queue.poll(operationTimeoutMillis(), TimeUnit.MILLISECONDS)).isEqualTo(Status.OK);
+        call.cancel("Cancelled after all of the requests are done", null);
     }
 
     @Test(timeout = 30000)

File: core/src/main/java/com/linecorp/armeria/server/composition/AbstractCompositeService.java
Patch:
@@ -96,7 +96,7 @@ public void serviceAdded(ServiceConfig cfg) throws Exception {
         final MeterRegistry registry = server.meterRegistry();
         final MeterId meterId = new MeterId("armeria.server.router.compositeServiceCache",
                                             "hostnamePattern", cfg.virtualHost().hostnamePattern(),
-                                            "pathMapping", String.join(",", cfg.pathMapping().meterTag()));
+                                            "pathMapping", cfg.pathMapping().meterTag());
 
         router.registerMetrics(registry, meterId);
         for (CompositeServiceEntry<I, O> e : services()) {

File: thrift/src/test/java/com/linecorp/armeria/it/metric/DropwizardMetricsIntegrationTest.java
Patch:
@@ -134,7 +134,7 @@ private static void assertSummary(Map<String, ?> map, String property, int expec
 
     private static String serverMetricName(String property) {
         return MetricRegistry.name("armeria", "server", "HelloService", property,
-                                   "method:hello", "pathMapping:exact:/helloservice");
+                                   "hostnamePattern:*", "method:hello", "pathMapping:exact:/helloservice");
     }
 
     private static String clientMetricName(String property) {

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java
Patch:
@@ -114,9 +114,11 @@ private void doExecute0(ClientRequestContext ctx, RpcRequest req, DefaultRpcResp
                 }
             } else {
                 response.handle(voidFunction((result, thrown) -> {
-                    if (result != null) {
+                    if (thrown == null) {
+                        // normal response
                         responseFuture.complete(result);
                     } else {
+                        // failed
                         responseFuture.completeExceptionally(thrown);
                     }
                 }));

File: spring-boot/autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaAutoConfiguration.java
Patch:
@@ -68,6 +68,7 @@
 import com.linecorp.armeria.spring.ArmeriaSettings.Port;
 
 import io.micrometer.core.instrument.MeterRegistry;
+import io.micrometer.core.instrument.Metrics;
 import io.micrometer.core.instrument.dropwizard.DropwizardMeterRegistry;
 import io.micrometer.core.instrument.prometheus.PrometheusMeterRegistry;
 import io.netty.util.NetUtil;
@@ -181,7 +182,7 @@ public Server armeriaServer(
         }
 
         if (metricsEnabled && !Strings.isNullOrEmpty(armeriaSettings.getMetricsPath())) {
-            final MeterRegistry registry = meterRegistry.get();
+            final MeterRegistry registry = meterRegistry.orElse(Metrics.globalRegistry);
             if (registry instanceof PrometheusMeterRegistry) {
                 final CollectorRegistry prometheusRegistry =
                         ((PrometheusMeterRegistry) registry).getPrometheusRegistry();

File: spring-boot/autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaMeterBindersTest.java
Patch:
@@ -37,7 +37,7 @@
 import com.linecorp.armeria.server.PathMapping;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.logging.LoggingService;
-import com.linecorp.armeria.spring.ArmeriaAutoConfigurationTest.TestConfiguration;
+import com.linecorp.armeria.spring.ArmeriaMeterBindersTest.TestConfiguration;
 
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.spring.export.prometheus.EnablePrometheusMetrics;

File: core/src/main/java/com/linecorp/armeria/common/metric/MoreMeters.java
Patch:
@@ -47,7 +47,9 @@
  */
 public final class MoreMeters {
 
-    private static final double[] DEFAULT_QUANTILES = { 0.5, 0.75, 0.95, 0.98, 0.99, 0.999, 1.0 };
+    // TODO(trustin): Re-enable 1.0 if micrometer fixes IndexOutOfBoundsException.
+    //                https://github.com/micrometer-metrics/micrometer/issues/139
+    private static final double[] DEFAULT_QUANTILES = { 0.5, 0.75, 0.95, 0.98, 0.99, 0.999 /* , 1.0 */ };
     private static final Logger logger = LoggerFactory.getLogger(MoreMeters.class);
 
     private static final String METER_ID_FQCN = "io.micrometer.core.instrument.AbstractMeterRegistry$MeterId";

File: core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsServiceEndpointGroup.java
Patch:
@@ -78,7 +78,7 @@ public class DnsServiceEndpointGroup extends DynamicEndpointGroup implements Aut
      * @param hostname the hostname to query DNS queries for.
      */
     public static DnsServiceEndpointGroup of(String hostname) {
-        return DnsServiceEndpointGroup.of(hostname);
+        return DnsServiceEndpointGroup.of(hostname, CommonPools.workerGroup().next());
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java
Patch:
@@ -196,7 +196,7 @@ public void connect(ChannelHandlerContext ctx, SocketAddress remoteAddress, Sock
     }
 
     /**
-     * @see <a href="https://http2.github.io/http2-spec/#discover-https">HTTP/2 specification</a>
+     * See <a href="https://http2.github.io/http2-spec/#discover-https">HTTP/2 specification</a>.
      */
     private void configureAsHttps(Channel ch, InetSocketAddress remoteAddr) {
         final ChannelPipeline p = ch.pipeline();
@@ -375,7 +375,7 @@ private final class UpgradeRequestHandler extends ChannelInboundHandlerAdapter {
         }
 
         /**
-         * Sends the initial upgrade request, which is {@code "HEAD / HTTP/1.1"}
+         * Sends the initial upgrade request, which is {@code "HEAD / HTTP/1.1"}.
          */
         @Override
         public void channelActive(ChannelHandlerContext ctx) throws Exception {

File: core/src/main/java/com/linecorp/armeria/common/HttpHeaderNames.java
Patch:
@@ -250,7 +250,7 @@ public final class HttpHeaderNames {
      */
     public static final AsciiString IF_UNMODIFIED_SINCE = new AsciiString("if-unmodified-since");
     /**
-     * {@code "keep-alive"}
+     * {@code "keep-alive"}.
      *
      * @deprecated Use {@link #CONNECTION} instead.
      */
@@ -285,7 +285,7 @@ public final class HttpHeaderNames {
      */
     public static final AsciiString PROXY_AUTHORIZATION = new AsciiString("proxy-authorization");
     /**
-     * {@code "proxy-connection"}
+     * {@code "proxy-connection"}.
      *
      * @deprecated Use {@link #CONNECTION} instead.
      */

File: core/src/main/java/com/linecorp/armeria/common/HttpResponse.java
Patch:
@@ -152,6 +152,8 @@ static HttpResponse ofFailure(Throwable cause) {
     }
 
     /**
+     * Creates a new failed HTTP response.
+     *
      * @deprecated Use {@link #ofFailure(Throwable)} instead.
      */
     @Deprecated

File: core/src/main/java/com/linecorp/armeria/common/MediaType.java
Patch:
@@ -422,7 +422,7 @@ private static MediaType addKnownType(MediaType mediaType) {
     public static final MediaType PDF = createConstant(APPLICATION_TYPE, "pdf");
     public static final MediaType POSTSCRIPT = createConstant(APPLICATION_TYPE, "postscript");
     /**
-     * <a href="http://tools.ietf.org/html/draft-rfernando-protocol-buffers-00">Protocol buffers</a>
+     * <a href="http://tools.ietf.org/html/draft-rfernando-protocol-buffers-00">Protocol buffers</a>.
      */
     public static final MediaType PROTOBUF = createConstant(APPLICATION_TYPE, "protobuf");
 

File: core/src/main/java/com/linecorp/armeria/server/ServiceConfig.java
Patch:
@@ -121,6 +121,8 @@ public <T extends Service<HttpRequest, HttpResponse>> T service() {
     }
 
     /**
+     * Returns the logger name for the {@link Service}.
+     *
      * @deprecated Use a logging framework integration such as {@code RequestContextExportingAppender} in
      *             {@code armeria-logback}.
      */

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java
Patch:
@@ -102,6 +102,8 @@ default String pathParam(String name) {
     MediaType negotiatedProduceType();
 
     /**
+     * Returns the {@link Logger} of the {@link Service}.
+     *
      * @deprecated Use a logging framework integration such as {@code RequestContextExportingAppender} in
      *             {@code armeria-logback}.
      */

File: core/src/main/java/com/linecorp/armeria/server/VirtualHost.java
Patch:
@@ -202,7 +202,7 @@ public String defaultHostname() {
 
     /**
      * Returns the hostname pattern of this virtual host, as defined in
-     * <a href="http://tools.ietf.org/html/rfc2818#section-3.1">the section 3.1 of RFC2818</a>
+     * <a href="http://tools.ietf.org/html/rfc2818#section-3.1">the section 3.1 of RFC2818</a>.
      */
     public String hostnamePattern() {
         return hostnamePattern;

File: core/src/main/java/com/linecorp/armeria/server/composition/AbstractCompositeServiceBuilder.java
Patch:
@@ -100,6 +100,8 @@ protected final List<CompositeServiceEntry<I, O>> services() {
     }
 
     /**
+     * Binds the specified {@link Service} at the specified path pattern.
+     *
      * @deprecated Use {@link #service(String, Service)} instead.
      */
     @Deprecated

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaChannel.java
Patch:
@@ -48,6 +48,7 @@
 import io.grpc.ClientCall;
 import io.grpc.CompressorRegistry;
 import io.grpc.DecompressorRegistry;
+import io.grpc.ManagedChannelBuilder;
 import io.grpc.MethodDescriptor;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.netty.channel.EventLoop;
@@ -59,7 +60,7 @@
 class ArmeriaChannel extends Channel implements ClientBuilderParams {
 
     /**
-     * @see io.grpc.ManagedChannelBuilder for default setting
+     * See {@link ManagedChannelBuilder} for default setting.
      */
     private static final int DEFAULT_MAX_INBOUND_MESSAGE_SIZE = 4 * 1024 * 1024;
 

File: grpc/src/main/java/com/linecorp/armeria/internal/grpc/StatusMessageEscaper.java
Patch:
@@ -78,6 +78,8 @@ private static boolean isEscapingChar(byte b) {
     }
 
     /**
+     * Escapes the given byte array.
+     *
      * @param valueBytes the UTF-8 bytes
      * @param ri The reader index, pointed at the first byte that needs escaping.
      */

File: core/src/test/java/com/linecorp/armeria/client/DefaultHttpClientTest.java
Patch:
@@ -30,8 +30,7 @@
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.SessionProtocol;
-
-import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
+import com.linecorp.armeria.common.metric.NoopMeterRegistry;
 
 public class DefaultHttpClientTest {
 
@@ -48,7 +47,7 @@ public void testConcatenateRequestPath() throws Exception {
                                                                                  ClientOptions.DEFAULT);
         DefaultHttpClient defaultHttpClient = new DefaultHttpClient(clientBuilderParams,
                                                                     mockClientDelegate,
-                                                                    new SimpleMeterRegistry(),
+                                                                    NoopMeterRegistry.get(),
                                                                     SessionProtocol.of("http"),
                                                                     Endpoint.of("127.0.0.1"));
 

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClientTest.java
Patch:
@@ -48,10 +48,10 @@
 import com.linecorp.armeria.common.HttpMethod;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;
+import com.linecorp.armeria.common.metric.NoopMeterRegistry;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.testing.internal.AnticipatedException;
 
-import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import io.netty.channel.DefaultEventLoop;
 
 public class CircuitBreakerClientTest {
@@ -60,13 +60,13 @@ public class CircuitBreakerClientTest {
 
     // Remote invocation parameters
     private static final ClientRequestContext ctx = new DefaultClientRequestContext(
-            new DefaultEventLoop(), new SimpleMeterRegistry(), H2C,
+            new DefaultEventLoop(), NoopMeterRegistry.get(), H2C,
             Endpoint.of("dummyhost", 8080),
             HttpMethod.POST, "/", null, null, ClientOptions.DEFAULT,
             RpcRequest.of(Object.class, "methodA", "a", "b"));
 
     private static final ClientRequestContext ctxB = new DefaultClientRequestContext(
-            new DefaultEventLoop(), new SimpleMeterRegistry(), H2C,
+            new DefaultEventLoop(), NoopMeterRegistry.get(), H2C,
             Endpoint.of("dummyhost", 8080),
             HttpMethod.POST, "/", null, null, ClientOptions.DEFAULT,
             RpcRequest.of(Object.class, "methodB", "c", "d"));

File: core/src/test/java/com/linecorp/armeria/common/RequestContextTest.java
Patch:
@@ -50,9 +50,9 @@
 
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
+import com.linecorp.armeria.common.metric.NoopMeterRegistry;
 import com.linecorp.armeria.common.util.SafeCloseable;
 
-import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelFutureListener;
 import io.netty.channel.ChannelPromise;
@@ -407,7 +407,7 @@ private NonWrappingRequestContext createContext(boolean addContextAwareHandler)
 
     private class DummyRequestContext extends NonWrappingRequestContext {
         DummyRequestContext() {
-            super(new SimpleMeterRegistry(), SessionProtocol.HTTP,
+            super(NoopMeterRegistry.get(), SessionProtocol.HTTP,
                   HttpMethod.GET, "/", null, new DefaultHttpRequest());
         }
 

File: logback/src/test/java/com/linecorp/armeria/common/logback/RequestContextExportingAppenderTest.java
Patch:
@@ -66,6 +66,7 @@
 import com.linecorp.armeria.common.logback.HelloService.hello_args;
 import com.linecorp.armeria.common.logback.HelloService.hello_result;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
+import com.linecorp.armeria.common.metric.NoopMeterRegistry;
 import com.linecorp.armeria.common.thrift.ThriftCall;
 import com.linecorp.armeria.common.thrift.ThriftReply;
 import com.linecorp.armeria.common.thrift.ThriftSerializationFormats;
@@ -88,7 +89,6 @@
 import ch.qos.logback.core.read.ListAppender;
 import ch.qos.logback.core.status.Status;
 import ch.qos.logback.core.status.StatusManager;
-import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import io.netty.channel.Channel;
 import io.netty.channel.EventLoop;
 import io.netty.util.AttributeKey;
@@ -423,7 +423,7 @@ private static ServiceRequestContext newServiceContext(String path, String query
                 new DummyPathMappingContext(virtualHost, "server.com", path, query, req.headers());
 
         final ServiceRequestContext ctx = new DefaultServiceRequestContext(
-                serviceConfig, ch, new SimpleMeterRegistry(), SessionProtocol.H2, mappingCtx,
+                serviceConfig, ch, NoopMeterRegistry.get(), SessionProtocol.H2, mappingCtx,
                 PathMappingResult.of(path, query, ImmutableMap.of()), req, newSslSession());
 
         ctx.attr(MY_ATTR).set(new CustomValue("some-attr"));
@@ -533,7 +533,7 @@ private static ClientRequestContext newClientContext(String path, String query)
                                                           .authority("server.com:8080"));
 
         final DefaultClientRequestContext ctx = new DefaultClientRequestContext(
-                mock(EventLoop.class), new SimpleMeterRegistry(), SessionProtocol.H2,
+                mock(EventLoop.class), NoopMeterRegistry.get(), SessionProtocol.H2,
                 Endpoint.of("server.com", 8080), req.method(), path, query, null,
                 ClientOptions.DEFAULT, req) {
 

File: zipkin/src/test/java/com/linecorp/armeria/client/tracing/HttpTracingClientTest.java
Patch:
@@ -41,12 +41,12 @@
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;
+import com.linecorp.armeria.common.metric.NoopMeterRegistry;
 import com.linecorp.armeria.common.tracing.HelloService;
 import com.linecorp.armeria.common.tracing.SpanCollectingReporter;
 
 import brave.Tracing;
 import brave.sampler.Sampler;
-import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import io.netty.channel.Channel;
 import io.netty.channel.DefaultEventLoop;
 import zipkin.Annotation;
@@ -108,7 +108,7 @@ private static SpanCollectingReporter testRemoteInvocationWithSamplingRate(
         final HttpResponse res = HttpResponse.of(HttpStatus.OK);
         final RpcResponse rpcRes = RpcResponse.of("Hello, Armeria!");
         final ClientRequestContext ctx = new DefaultClientRequestContext(
-                new DefaultEventLoop(), new SimpleMeterRegistry(), H2C, Endpoint.of("localhost", 8080),
+                new DefaultEventLoop(), NoopMeterRegistry.get(), H2C, Endpoint.of("localhost", 8080),
                 HttpMethod.POST, "/", null, null, ClientOptions.DEFAULT, req);
 
         ctx.logBuilder().startRequest(mock(Channel.class), H2C, "localhost");

File: core/src/main/java/com/linecorp/armeria/common/metric/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * Common metric collection API.
+ * Common metric collection utilities.
  */
 package com.linecorp.armeria.common.metric;

File: core/src/main/java/com/linecorp/armeria/internal/metric/MicrometerUtil.java
Patch:
@@ -24,9 +24,10 @@
 
 import com.google.common.collect.MapMaker;
 
+import com.linecorp.armeria.common.metric.MeterId;
+
 import io.micrometer.core.instrument.Meter;
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.instrument.util.MeterId;
 
 /**
  * A utility that prevents double instantiation of an object for a certain {@link MeterId}. This can be useful
@@ -67,7 +68,7 @@ public static <T> T register(MeterRegistry registry, MeterId id, Class<T> type,
             throw new IllegalStateException(
                     "An object of different type has been registered already for id: " + id +
                     " (expected: " + type.getName() +
-                    ", actual: " + object.getClass().getName() + ')');
+                    ", actual: " + (object != null ? object.getClass().getName() : "null") + ')');
         }
 
         @SuppressWarnings("unchecked")

File: core/src/main/java/com/linecorp/armeria/server/CompositeRouter.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.linecorp.armeria.server;
 
-import static com.linecorp.armeria.common.metric.MeterRegistryUtil.tags;
 import static java.util.Objects.requireNonNull;
 
 import java.io.OutputStream;
@@ -25,10 +24,10 @@
 
 import com.google.common.collect.ImmutableList;
 
+import com.linecorp.armeria.common.metric.MeterId;
 import com.linecorp.armeria.common.util.Exceptions;
 
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.instrument.util.MeterId;
 
 /**
  * A {@link Router} implementation that enables composing multiple {@link Router}s into one.
@@ -70,7 +69,7 @@ public boolean registerMetrics(MeterRegistry registry, MeterId id) {
             default:
                 boolean registered = false;
                 for (int i = 0; i < numDelegates; i++) {
-                    final MeterId delegateId = new MeterId(id.getName(), tags(id, "index", String.valueOf(i)));
+                    final MeterId delegateId = id.withTags("index", String.valueOf(i));
                     if (delegates.get(i).registerMetrics(registry, delegateId)) {
                         registered = true;
                     }

File: core/src/main/java/com/linecorp/armeria/server/RouteCache.java
Patch:
@@ -28,11 +28,11 @@
 import com.linecorp.armeria.common.Flags;
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.Response;
+import com.linecorp.armeria.common.metric.MeterId;
 import com.linecorp.armeria.internal.metric.CaffeineMetricSupport;
 import com.linecorp.armeria.server.composition.CompositeServiceEntry;
 
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.instrument.util.MeterId;
 
 /**
  * See {@link Flags#routeCacheSpec()} to configure this {@link RouteCache}.

File: core/src/main/java/com/linecorp/armeria/server/Router.java
Patch:
@@ -18,8 +18,9 @@
 
 import java.io.OutputStream;
 
+import com.linecorp.armeria.common.metric.MeterId;
+
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.instrument.util.MeterId;
 
 /**
  * Finds a mapping that matches a given {@link PathMappingContext}.

File: core/src/main/java/com/linecorp/armeria/server/Routers.java
Patch:
@@ -140,7 +140,7 @@ private static <V> Router<V> router(boolean isTrie, List<V> values,
                          values.size(), router.getClass().getSimpleName());
             values.forEach(c -> {
                 final PathMapping mapping = pathMappingResolver.apply(c);
-                logger.debug("metricName: {}, complexity: {}", mapping.metricName(), mapping.complexity());
+                logger.debug("meterTag: {}, complexity: {}", mapping.meterTag(), mapping.complexity());
             });
         }
         values.clear();

File: core/src/test/java/com/linecorp/armeria/server/CatchAllPathMappingTest.java
Patch:
@@ -29,6 +29,6 @@ public void testLoggerName() throws Exception {
 
     @Test
     public void testMetricName() throws Exception {
-        assertThat(ofCatchAll().metricName()).containsExactly("catch-all");
+        assertThat(ofCatchAll().meterTag()).isEqualTo("catch-all");
     }
 }

File: core/src/test/java/com/linecorp/armeria/server/DefaultPathMappingTest.java
Patch:
@@ -137,6 +137,6 @@ public void testLoggerName() {
 
     @Test
     public void testMetricName() {
-        assertThat(of("/service/{value}").metricName()).containsExactly("/service/{value}");
+        assertThat(of("/service/{value}").meterTag()).isEqualTo("/service/{value}");
     }
 }

File: core/src/test/java/com/linecorp/armeria/server/ExactPathMappingTest.java
Patch:
@@ -53,6 +53,6 @@ public void testLoggerName() throws Exception {
 
     @Test
     public void testMetricName() throws Exception {
-        assertThat(ofExact("/foo/bar").metricName()).containsExactly("exact:/foo/bar");
+        assertThat(ofExact("/foo/bar").meterTag()).isEqualTo("exact:/foo/bar");
     }
 }

File: core/src/test/java/com/linecorp/armeria/server/GlobPathMappingTest.java
Patch:
@@ -88,8 +88,8 @@ public void testLoggerName() throws Exception {
 
     @Test
     public void testMetricName() throws Exception {
-        assertThat(ofGlob("/foo/bar/**").metricName()).containsExactly("glob:/foo/bar/**");
-        assertThat(ofGlob("foo").metricName()).containsExactly("glob:/**/foo");
+        assertThat(ofGlob("/foo/bar/**").meterTag()).isEqualTo("glob:/foo/bar/**");
+        assertThat(ofGlob("foo").meterTag()).isEqualTo("glob:/**/foo");
     }
 
     @Test

File: core/src/test/java/com/linecorp/armeria/server/PrefixPathMappingTest.java
Patch:
@@ -32,7 +32,7 @@ public void testLoggerName() throws Exception {
 
     @Test
     public void testMetricName() throws Exception {
-        assertThat(ofPrefix("/foo/bar").metricName()).containsExactly("prefix:/foo/bar/");
+        assertThat(ofPrefix("/foo/bar").meterTag()).isEqualTo("prefix:/foo/bar/");
     }
 
     @Test

File: core/src/test/java/com/linecorp/armeria/server/RegexPathMappingTest.java
Patch:
@@ -30,7 +30,7 @@ public void testLoggerName() throws Exception {
 
     @Test
     public void testMetricName() throws Exception {
-        assertThat(ofRegex("foo/bar").metricName()).containsExactly("regex:foo/bar");
+        assertThat(ofRegex("foo/bar").meterTag()).isEqualTo("regex:foo/bar");
     }
 
     @Test

File: spring-boot/autoconfigure/src/main/java/com/linecorp/armeria/spring/MeterIdFunctionFactory.java
Patch:
@@ -28,12 +28,12 @@ public interface MeterIdFunctionFactory {
     /**
      * The default {@link MeterIdFunctionFactory} instance.
      */
-    MeterIdFunctionFactory DEFAULT = serviceName ->
-            MeterIdFunction.ofDefault("armeria", "server")
+    MeterIdFunctionFactory DEFAULT = (type, serviceName) ->
+            MeterIdFunction.ofDefault("armeria." + requireNonNull(type, "type"))
                            .withTags("service", requireNonNull(serviceName, "serviceName"));
 
     /**
      * Returns the {@link MeterIdFunction} for the specified service name.
      */
-    MeterIdFunction get(String serviceName);
+    MeterIdFunction get(String type, String serviceName);
 }

File: core/src/main/java/com/linecorp/armeria/internal/FlushConsolidationHandler.java
Patch:
@@ -41,17 +41,17 @@
 import io.netty.util.internal.ObjectUtil;
 
 /**
- * {@link ChannelDuplexHandler} which consolidate {@link ChannelOutboundInvoker#flush()} operations (which also
+ * {@link ChannelDuplexHandler} which consolidates {@link ChannelOutboundInvoker#flush()} operations (which also
  * includes {@link ChannelOutboundInvoker#writeAndFlush(Object)} and
  * {@link ChannelOutboundInvoker#writeAndFlush(Object, ChannelPromise)}).
  *
- * <p>Flush operations are general speaking expensive as these may trigger a syscall on the transport level.
+ * <p>Flush operations are, generally speaking, expensive as these may trigger a syscall on the transport level.
  * Thus it is in most cases (where write latency can be traded with throughput) a good idea to try to minimize
  * flush operations as much as possible.
  *
  * <p>When {@link #flush(ChannelHandlerContext)} is called it will only pass it on to the next
  * {@link ChannelOutboundHandler} in the {@link ChannelPipeline} if no read loop is currently ongoing
- * as it will pick up any pending flushes when {@link #channelReadComplete(ChannelHandlerContext)} is trigged.
+ * as it will pick up any pending flushes when {@link #channelReadComplete(ChannelHandlerContext)} is triggered.
  * If {@code explicitFlushAfterFlushes} is reached the flush will also be forwarded as well.
  *
  * <p>If the {@link Channel} becomes non-writable it will also try to execute any pending flush operations.

File: core/src/main/java/com/linecorp/armeria/server/ServerConfig.java
Patch:
@@ -81,8 +81,8 @@ public final class ServerConfig {
             Executor blockingTaskExecutor, MeterRegistry meterRegistry, String serviceLoggerPrefix) {
 
         requireNonNull(ports, "ports");
-        requireNonNull(virtualHosts, "virtualHosts");
         requireNonNull(defaultVirtualHost, "defaultVirtualHost");
+        requireNonNull(virtualHosts, "virtualHosts");
 
         // Set the primitive properties.
         this.workerGroup = requireNonNull(workerGroup, "workerGroup");

File: spring-boot/autoconfigure/src/main/java/com/linecorp/armeria/spring/MeterIdFunctionFactory.java
Patch:
@@ -29,7 +29,8 @@ public interface MeterIdFunctionFactory {
      * The default {@link MeterIdFunctionFactory} instance.
      */
     MeterIdFunctionFactory DEFAULT = serviceName ->
-            MeterIdFunction.ofDefault("armeria", "server", requireNonNull(serviceName, "serviceName"));
+            MeterIdFunction.ofDefault("armeria", "server")
+                           .withTags("service", requireNonNull(serviceName, "serviceName"));
 
     /**
      * Returns the {@link MeterIdFunction} for the specified service name.

File: core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java
Patch:
@@ -76,10 +76,12 @@ public final class ArmeriaHttpUtil {
 
     /**
      * According to RFC 3986 section 3.3, path can contain a colon, except the first segment.
+     *
+     * <p>Should allow the asterisk character in the path, query, or fragment components of a URL(RFC2396).
      * @see <a href="https://tools.ietf.org/html/rfc3986#section-3.3">RFC 3986, section 3.3</a>
      */
     private static final Pattern PROHIBITED_PATH_PATTERN =
-            Pattern.compile("^/[^/]*:[^/]*/|[|<>*\\\\]|/\\.\\.|\\.\\.$|\\.\\./");
+            Pattern.compile("^/[^/]*:[^/]*/|[|<>\\\\]|/\\.\\.|\\.\\.$|\\.\\./");
 
     private static final Pattern CONSECUTIVE_SLASHES_PATTERN = Pattern.compile("/{2,}");
 

File: core/src/test/java/com/linecorp/armeria/server/HttpServerPathTest.java
Patch:
@@ -82,6 +82,8 @@ protected void doGet(ServiceRequestContext ctx, HttpRequest req, HttpResponseWri
                 "erp..4.14.1387...0j35i39k1j0i131k1j0i19k1j0i30i19k1j0i8i30i19k1j0i5i30i19k1j0i8i10" +
                 "i30i19k1.Z6SsEq-rZDw",
                 HttpStatus.OK);
+        // Should allow the asterisk character in the path
+        TEST_URLS.put("/service/foo*bar4", HttpStatus.OK);
 
         // 400 test
         TEST_URLS.put("..", HttpStatus.BAD_REQUEST);
@@ -98,7 +100,6 @@ protected void doGet(ServiceRequestContext ctx, HttpRequest req, HttpResponseWri
         TEST_URLS.put("/service../foobar2", HttpStatus.NOT_FOUND);
         TEST_URLS.put("/service/foobar3..", HttpStatus.NOT_FOUND);
         TEST_URLS.put("/gwturl#user:45/comments", HttpStatus.NOT_FOUND);
-        TEST_URLS.put("/service/foo*bar4", HttpStatus.NOT_FOUND);
         TEST_URLS.put("/service:name/hello", HttpStatus.NOT_FOUND);
         TEST_URLS.put("/service::::name/hello", HttpStatus.NOT_FOUND);
     }

File: core/src/main/java/com/linecorp/armeria/server/PathMapped.java
Patch:
@@ -23,7 +23,7 @@
 import com.google.common.base.MoreObjects;
 
 /**
- * A value mapped by {@link PathMappings}.
+ * A value mapped by {@link Router}.
  *
  * @param <T> the type of the mapped value
  */
@@ -42,7 +42,7 @@ public static <T> PathMapped<T> empty() {
     /**
      * Creates a new {@link PathMapped} with the specified {@code mappedPath} and {@code value}.
      *
-     * @param mappingResult the result of {@link PathMapping#apply(String, String)}
+     * @param mappingResult the result of {@link PathMapping#apply(PathMappingContext)}
      * @param value  the value
      */
     static <T> PathMapped<T> of(PathMapping mapping, PathMappingResult mappingResult, T value) {
@@ -72,7 +72,7 @@ private PathMapped(@Nullable PathMapping mapping, PathMappingResult mappingResul
     }
 
     /**
-     * Returns {@code true} if and only if {@link PathMappings} found a matching value.
+     * Returns {@code true} if and only if {@link Router} found a matching value.
      */
     public boolean isPresent() {
         return mapping != null;

File: core/src/main/java/com/linecorp/armeria/server/ServerConfig.java
Patch:
@@ -207,7 +207,7 @@ private static VirtualHost normalizeDefaultVirtualHost(VirtualHost h, List<Serve
                 h.defaultHostname(), "*", sslCtx,
                 h.serviceConfigs().stream().map(
                         e -> new ServiceConfig(e.pathMapping(), e.service(), e.loggerName().orElse(null)))
-                 .collect(Collectors.toList()));
+                 .collect(Collectors.toList()), h.producibleMediaTypes());
     }
 
     /**

File: core/src/test/java/com/linecorp/armeria/server/ExactPathMappingTest.java
Patch:
@@ -17,6 +17,7 @@
 package com.linecorp.armeria.server;
 
 import static com.linecorp.armeria.server.PathMapping.ofExact;
+import static com.linecorp.armeria.server.PathMappingContextTest.create;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import org.junit.Test;
@@ -25,13 +26,13 @@ public class ExactPathMappingTest {
 
     @Test
     public void shouldReturnEmptyOnMismatch() {
-        final PathMappingResult result = new ExactPathMapping("/find/me").apply("/find/me/not", null);
+        final PathMappingResult result = new ExactPathMapping("/find/me").apply(create("/find/me/not"));
         assertThat(result.isPresent()).isFalse();
     }
 
     @Test
     public void shouldReturnNonEmptyOnMatch() {
-        final PathMappingResult result = new ExactPathMapping("/find/me").apply("/find/me", null);
+        final PathMappingResult result = new ExactPathMapping("/find/me").apply(create("/find/me"));
         assertThat(result.isPresent()).isTrue();
         assertThat(result.path()).isEqualTo("/find/me");
         assertThat(result.query()).isNull();

File: core/src/test/java/com/linecorp/armeria/server/PathMappingTest.java
Patch:
@@ -33,11 +33,11 @@ public void successfulOf() {
 
         m = PathMapping.of("/foo/{bar}");
         assertThat(m).isInstanceOf(DefaultPathMapping.class);
-        assertThat(((DefaultPathMapping) m).skeleton()).isEqualTo("/foo/{}");
+        assertThat(((DefaultPathMapping) m).skeleton()).isEqualTo("/foo/:");
 
         m = PathMapping.of("/bar/:baz");
         assertThat(m).isInstanceOf(DefaultPathMapping.class);
-        assertThat(((DefaultPathMapping) m).skeleton()).isEqualTo("/bar/{}");
+        assertThat(((DefaultPathMapping) m).skeleton()).isEqualTo("/bar/:");
 
         m = PathMapping.of("exact:/:foo/bar");
         assertThat(m).isInstanceOf(ExactPathMapping.class);

File: core/src/test/java/com/linecorp/armeria/server/PrefixPathMappingTest.java
Patch:
@@ -17,6 +17,7 @@
 package com.linecorp.armeria.server;
 
 import static com.linecorp.armeria.server.PathMapping.ofPrefix;
+import static com.linecorp.armeria.server.PathMappingContextTest.create;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assume.assumeTrue;
 
@@ -37,7 +38,7 @@ public void testMetricName() throws Exception {
     @Test
     public void mappingResult() {
         final PathMapping a = ofPrefix("/foo");
-        PathMappingResult result = a.apply("/foo/bar/cat", "");
+        PathMappingResult result = a.apply(create("/foo/bar/cat"));
         assertThat(result.path()).isEqualTo("/bar/cat");
     }
 

File: core/src/test/java/com/linecorp/armeria/server/RegexPathMappingTest.java
Patch:
@@ -17,6 +17,7 @@
 package com.linecorp.armeria.server;
 
 import static com.linecorp.armeria.server.PathMapping.ofRegex;
+import static com.linecorp.armeria.server.PathMappingContextTest.create;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import org.junit.Test;
@@ -35,7 +36,7 @@ public void testMetricName() throws Exception {
     @Test
     public void basic() {
         final PathMapping mapping = ofRegex("foo");
-        final PathMappingResult result = mapping.apply("/barfoobar", null);
+        final PathMappingResult result = mapping.apply(create("/barfoobar"));
         assertThat(result.isPresent()).isTrue();
         assertThat(result.path()).isEqualTo("/barfoobar");
         assertThat(result.query()).isNull();
@@ -47,7 +48,7 @@ public void pathParams() {
         final PathMapping mapping = ofRegex("^/files/(?<fileName>.*)$");
         assertThat(mapping.paramNames()).containsExactly("fileName");
 
-        final PathMappingResult result = mapping.apply("/files/images/avatar.jpg", "size=512");
+        final PathMappingResult result = mapping.apply(create("/files/images/avatar.jpg", "size=512"));
         assertThat(result.isPresent()).isTrue();
         assertThat(result.path()).isEqualTo("/files/images/avatar.jpg");
         assertThat(result.query()).isEqualTo("size=512");

File: spring-boot/autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaAutoConfiguration.java
Patch:
@@ -99,7 +99,8 @@ public Server armeriaServer(
             throws InterruptedException {
         if (!armeriaServiceInitializers.isPresent() &&
             !thriftServiceRegistrationBeans.isPresent() &&
-            !httpServiceRegistrationBeans.isPresent()) {
+            !httpServiceRegistrationBeans.isPresent() &&
+            !annotatedServiceRegistrationBeans.isPresent()) {
             // No services to register, no need to start up armeria server.
             return null;
         }

File: core/src/main/java/com/linecorp/armeria/client/ClientBuilder.java
Patch:
@@ -21,7 +21,9 @@
 
 /**
  * Creates a new client that connects to the specified {@link URI} using the builder pattern. Use the factory
- * methods in {@link Clients} if you do not have many options to override.
+ * methods in {@link Clients} if you do not have many options to override. If you are creating an
+ * {@link HttpClient}, it is recommended to use the {@link HttpClientBuilder} or
+ * factory methods in {@link HttpClient}.
  *
  * <h3>How are decorators and HTTP headers configured?</h3>
  *

File: core/src/test/java/com/linecorp/armeria/client/HttpClientSniTest.java
Patch:
@@ -130,9 +130,7 @@ private static void testMismatch(String fqdn) throws Exception {
     }
 
     private static String get(String fqdn) throws Exception {
-        HttpClient client = Clients.newClient(
-                clientFactory, "none+https://" + fqdn + ':' + httpsPort,
-                HttpClient.class);
+        final HttpClient client = HttpClient.of(clientFactory, "https://" + fqdn + ':' + httpsPort);
 
         AggregatedHttpMessage response = client.get("/").aggregate().get();
 

File: spring-boot/autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationTest.java
Patch:
@@ -127,7 +127,7 @@ private String newUrl(String scheme) {
 
     @Test
     public void testHttpServiceRegistrationBean() throws Exception {
-        HttpClient client = Clients.newClient(newUrl("none+h1c"), HttpClient.class);
+        HttpClient client = HttpClient.of(newUrl("h1c"));
 
         HttpResponse response = client.get("/ok");
 
@@ -138,7 +138,7 @@ public void testHttpServiceRegistrationBean() throws Exception {
 
     @Test
     public void testAnnotatedServiceRegistrationBean() throws Exception {
-        HttpClient client = Clients.newClient(newUrl("none+h1c"), HttpClient.class);
+        HttpClient client = HttpClient.of(newUrl("h1c"));
 
         HttpResponse response = client.get("/annotated/get");
 
@@ -154,7 +154,7 @@ public void testThriftServiceRegistrationBean() throws Exception {
 
         assertThat(client.hello("world")).isEqualTo("hello world");
 
-        HttpClient httpClient = Clients.newClient(newUrl("none+h1c"), HttpClient.class);
+        HttpClient httpClient = HttpClient.of(newUrl("h1c"));
         HttpResponse response = httpClient.get("/internal/docs/specification.json");
 
         AggregatedHttpMessage msg = response.aggregate().get();

File: testing/src/main/java/com/linecorp/armeria/testing/server/webapp/WebAppContainerTest.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.linecorp.armeria.testing.server.webapp;
 
-import static com.linecorp.armeria.common.SerializationFormat.NONE;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import java.io.File;
@@ -148,7 +147,7 @@ public void https() throws Exception {
         ClientFactory clientFactory = new ClientFactoryBuilder()
                 .sslContextCustomizer(b -> b.trustManager(InsecureTrustManagerFactory.INSTANCE))
                 .build();
-        HttpClient client = clientFactory.newClient(server().httpsUri(NONE, "/"), HttpClient.class);
+        HttpClient client = HttpClient.of(clientFactory, server().httpsUri("/"));
         AggregatedHttpMessage response = client.get("/jsp/index.jsp").aggregate().get();
         final String actualContent = CR_OR_LF.matcher(response.content().toStringUtf8())
                                              .replaceAll("");

File: core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java
Patch:
@@ -33,6 +33,7 @@
 import com.linecorp.armeria.common.HttpObject;
 import com.linecorp.armeria.common.HttpRequest;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
+import com.linecorp.armeria.common.stream.AbortedStreamException;
 import com.linecorp.armeria.common.stream.ClosedPublisherException;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.internal.HttpObjectEncoder;
@@ -271,7 +272,7 @@ private void failAndRespond(Throwable cause) {
         if (response.isOpen()) {
             response.close(cause);
             error = Http2Error.INTERNAL_ERROR;
-        } else if (cause instanceof WriteTimeoutException) {
+        } else if (cause instanceof WriteTimeoutException || cause instanceof AbortedStreamException) {
             error = Http2Error.CANCEL;
         } else {
             Exceptions.logIfUnexpected(logger, ch,

File: core/src/test/java/com/linecorp/armeria/common/DefaultHttpRequestTest.java
Patch:
@@ -32,7 +32,7 @@
 import org.junit.rules.TestRule;
 import org.junit.rules.Timeout;
 
-import com.linecorp.armeria.common.stream.CancelledSubscriptionException;
+import com.linecorp.armeria.common.stream.AbortedStreamException;
 
 public class DefaultHttpRequestTest {
 
@@ -51,7 +51,7 @@ public void abortedAggregationWithoutExecutor() {
 
         future.whenComplete((unused, cause) -> {
             callbackThread.set(Thread.currentThread());
-            assertThat(cause).isInstanceOf(CancelledSubscriptionException.class);
+            assertThat(cause).isInstanceOf(AbortedStreamException.class);
         });
 
         req.abort();
@@ -81,7 +81,7 @@ public void abortedAggregationWithExecutor() {
             await().until(() -> callbackThread.get() != null);
 
             assertThat(callbackThread.get()).isNotSameAs(mainThread);
-            assertThat(callbackCause.get()).isInstanceOf(CancelledSubscriptionException.class);
+            assertThat(callbackCause.get()).isInstanceOf(AbortedStreamException.class);
             assertThat(future).isCompletedExceptionally();
         } finally {
             executor.shutdownNow();

File: core/src/test/java/com/linecorp/armeria/common/DefaultHttpResponseTest.java
Patch:
@@ -32,7 +32,7 @@
 import org.junit.rules.TestRule;
 import org.junit.rules.Timeout;
 
-import com.linecorp.armeria.common.stream.CancelledSubscriptionException;
+import com.linecorp.armeria.common.stream.AbortedStreamException;
 
 public class DefaultHttpResponseTest {
 
@@ -51,7 +51,7 @@ public void abortedAggregationWithoutExecutor() {
 
         future.whenComplete((unused, cause) -> {
             callbackThread.set(Thread.currentThread());
-            assertThat(cause).isInstanceOf(CancelledSubscriptionException.class);
+            assertThat(cause).isInstanceOf(AbortedStreamException.class);
         });
 
         res.abort();
@@ -81,7 +81,7 @@ public void abortedAggregationWithExecutor() {
             await().until(() -> callbackThread.get() != null);
 
             assertThat(callbackThread.get()).isNotSameAs(mainThread);
-            assertThat(callbackCause.get()).isInstanceOf(CancelledSubscriptionException.class);
+            assertThat(callbackCause.get()).isInstanceOf(AbortedStreamException.class);
             assertThat(future).isCompletedExceptionally();
         } finally {
             executor.shutdownNow();

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/AbstractThriftOverHttpTest.java
Patch:
@@ -125,7 +125,7 @@ protected String getResponse(String name) {
             sb.service("/large", THttpService.of(
                     (AsyncIface) (name, resultHandler) -> resultHandler.onComplete(LARGER_THAN_TLS)));
 
-            sb.decorator(LoggingService::new);
+            sb.decorator(LoggingService.newDecorator());
 
             final Function<Service<HttpRequest, HttpResponse>,
                            Service<HttpRequest, HttpResponse>> logCollectingDecorator =

File: core/src/test/java/com/linecorp/armeria/server/ServerTest.java
Patch:
@@ -201,7 +201,7 @@ public void testIdleTimeoutByNoContentSent() throws Exception {
             }
             long elapsedTimeMillis = TimeUnit.MILLISECONDS.convert(
                     System.nanoTime() - connectedNanos, TimeUnit.NANOSECONDS);
-            assertThat(elapsedTimeMillis).isGreaterThanOrEqualTo(idleTimeoutMillis);
+            assertThat(elapsedTimeMillis).isGreaterThan((long) (idleTimeoutMillis * 0.9));
         }
     }
 

File: core/src/main/java/com/linecorp/armeria/client/HttpSessionChannelFactory.java
Patch:
@@ -57,7 +57,7 @@ class HttpSessionChannelFactory implements Function<PoolKey, Future<Channel>> {
 
     @Override
     public Future<Channel> apply(PoolKey key) {
-        final InetSocketAddress remoteAddress = key.remoteAddress();
+        final InetSocketAddress remoteAddress = InetSocketAddress.createUnresolved(key.host(), key.port());
         final SessionProtocol protocol = key.sessionProtocol();
 
         if (SessionProtocolNegotiationCache.isUnsupported(remoteAddress, protocol)) {

File: core/src/main/java/com/linecorp/armeria/client/HttpClientFactory.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.concurrent.ConcurrentMap;
 import java.util.function.Consumer;
 import java.util.function.Function;
+import java.util.function.Predicate;
 import java.util.function.Supplier;
 
 import com.google.common.collect.MapMaker;
@@ -50,7 +51,6 @@
 import io.netty.channel.ChannelOption;
 import io.netty.channel.EventLoop;
 import io.netty.channel.EventLoopGroup;
-import io.netty.channel.pool.ChannelHealthChecker;
 import io.netty.handler.ssl.SslContextBuilder;
 import io.netty.resolver.AddressResolverGroup;
 import io.netty.util.concurrent.Future;
@@ -65,8 +65,8 @@ final class HttpClientFactory extends AbstractClientFactory {
                   .map(p -> Scheme.of(SerializationFormat.NONE, p))
                   .collect(toImmutableSet());
 
-    private static final ChannelHealthChecker POOL_HEALTH_CHECKER =
-            ch -> ch.eventLoop().newSucceededFuture(ch.isActive() && HttpSession.get(ch).isActive());
+    private static final Predicate<Channel> POOL_HEALTH_CHECKER =
+            ch -> ch.isActive() && HttpSession.get(ch).isActive();
 
     private final EventLoopGroup workerGroup;
     private final boolean shutdownWorkerGroupOnClose;

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcService.java
Patch:
@@ -151,6 +151,9 @@ protected void doPost(ServiceRequestContext ctx, HttpRequest req, HttpResponseWr
         ArmeriaServerCall<?, ?> call = startCall(
                 methodName, method, ctx, req.headers(), res, serializationFormat);
         if (call != null) {
+            ctx.setRequestTimeoutHandler(() -> {
+                call.close(Status.DEADLINE_EXCEEDED, EMPTY_METADATA);
+            });
             req.subscribe(call.messageReader());
         }
     }

File: core/src/main/java/com/linecorp/armeria/server/auth/HttpAuthService.java
Patch:
@@ -96,7 +96,9 @@ protected HttpResponse onSuccess(ServiceRequestContext ctx, HttpRequest req) thr
      */
     protected HttpResponse onFailure(ServiceRequestContext ctx, HttpRequest req, @Nullable Throwable cause)
             throws Exception {
-        logger.warn("Unexpected exception during authorization:", cause);
+        if (cause != null) {
+            logger.warn("Unexpected exception during authorization.", cause);
+        }
         final DefaultHttpResponse res = new DefaultHttpResponse();
         res.respond(HttpStatus.UNAUTHORIZED);
         return res;

File: core/src/test/java/com/linecorp/armeria/server/HttpServerTest.java
Patch:
@@ -733,9 +733,7 @@ private void runStreamingResponseTest(boolean slowClient) throws InterruptedExce
         clientMaxResponseLength = 0;
         serverRequestTimeoutMillis = 0;
 
-        final DefaultHttpRequest req = new DefaultHttpRequest(HttpMethod.GET,
-                                                              "/zeroes/" + STREAMING_CONTENT_LENGTH);
-        final HttpResponse res = client().execute(req);
+        final HttpResponse res = client().get("/zeroes/" + STREAMING_CONTENT_LENGTH);
         final AtomicReference<HttpStatus> status = new AtomicReference<>();
 
         final StreamConsumer consumer = new StreamConsumer(GlobalEventExecutor.INSTANCE, slowClient) {

File: core/src/main/java/com/linecorp/armeria/server/RegexPathMapping.java
Patch:
@@ -38,12 +38,14 @@ final class RegexPathMapping extends AbstractPathMapping {
     private final Pattern regex;
     private final Set<String> paramNames;
     private final String loggerName;
+    private final String metricName;
     private final String strVal;
 
     RegexPathMapping(Pattern regex) {
         this.regex = requireNonNull(regex, "regex");
         paramNames = findParamNames(regex);
         loggerName = toLoggerName(regex);
+        metricName = '/' + PREFIX + regex.pattern();
         strVal = PREFIX + regex.pattern();
     }
 
@@ -109,7 +111,7 @@ private static String toLoggerName(Pattern regex) {
 
     @Override
     public String metricName() {
-        return strVal;
+        return metricName;
     }
 
     @VisibleForTesting

File: core/src/main/java/com/linecorp/armeria/client/ClientFactory.java
Patch:
@@ -51,7 +51,7 @@ public interface ClientFactory extends AutoCloseable {
     /**
      * The default {@link ClientFactory} implementation.
      */
-    ClientFactory DEFAULT = new ClientFactoryBuilder().useDaemonThreads(true).build();
+    ClientFactory DEFAULT = new ClientFactoryBuilder().build();
 
     /**
      * Closes the default {@link ClientFactory}.

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingHttpClient.java
Patch:
@@ -84,7 +84,7 @@ public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Ex
         final DefaultHttpResponse res = new DefaultHttpResponse();
         final Backoff backoff = newBackoff();
         final HttpRequestDuplicator reqDuplicator = new HttpRequestDuplicator(req);
-        retry(1, backoff, ctx, reqDuplicator, (newReq) -> {
+        retry(1, backoff, ctx, reqDuplicator, newReq -> {
             try {
                 return delegate().execute(ctx, newReq);
             } catch (Exception e) {
@@ -132,7 +132,7 @@ private void retry(int currentAttemptNo, Backoff backoff, ClientRequestContext c
                        }));
     }
 
-    private long getRetryAfterMillis(HttpResponse res) {
+    private static long getRetryAfterMillis(HttpResponse res) {
         final HttpHeaders headers = getHttpHeaders(res);
         long millisAfter = -1;
         String value = headers.get(HttpHeaderNames.RETRY_AFTER);
@@ -153,7 +153,7 @@ private long getRetryAfterMillis(HttpResponse res) {
         return millisAfter;
     }
 
-    private HttpHeaders getHttpHeaders(HttpResponse res) {
+    private static HttpHeaders getHttpHeaders(HttpResponse res) {
         final CompletableFuture<AggregatedHttpMessage> future = new CompletableFuture<>();
         final HttpHeaderSubscriber subscriber = new HttpHeaderSubscriber(future);
         res.closeFuture().whenComplete(subscriber);

File: core/src/main/java/com/linecorp/armeria/common/util/Exceptions.java
Patch:
@@ -39,7 +39,7 @@
 import io.netty.handler.codec.http2.Http2Exception;
 
 /**
- * Provides the methods that are useful for handling exceptions.
+ * Provides methods that are useful for handling exceptions.
  */
 public final class Exceptions {
 

File: core/src/test/java/com/linecorp/armeria/client/HttpClientPipeliningTest.java
Patch:
@@ -99,12 +99,12 @@ public static void initClientFactory() {
         // Note: Each event loop has its own connection pool.
         eventLoopGroup = new NioEventLoopGroup(1);
         factoryWithPipelining = new ClientFactoryBuilder()
-                .eventLoopGroup(eventLoopGroup)
+                .workerGroup(eventLoopGroup, false)
                 .useHttp1Pipelining(true)
                 .build();
 
         factoryWithoutPipelining = new ClientFactoryBuilder()
-                .eventLoopGroup(eventLoopGroup)
+                .workerGroup(eventLoopGroup, false)
                 .useHttp1Pipelining(false)
                 .build();
     }

File: core/src/test/java/com/linecorp/armeria/client/retry/RetryingHttpClientTest.java
Patch:
@@ -226,8 +226,7 @@ public void retryAfterOneYear() throws Exception {
                 RetryStrategy.onStatus(HttpStatus.SERVICE_UNAVAILABLE);
 
         final HttpClient client = new ClientBuilder(server.uri(SerializationFormat.NONE, "/"))
-                .factory(new ClientFactoryBuilder().useDaemonThreads(true)
-                                                   .idleTimeout(Duration.ofSeconds(5))
+                .factory(new ClientFactoryBuilder().idleTimeout(Duration.ofSeconds(5))
                                                    .build())
                 .defaultResponseTimeout(Duration.ofSeconds(5))
                 .decorator(HttpRequest.class, HttpResponse.class,

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceServerTest.java
Patch:
@@ -55,6 +55,7 @@
 import com.linecorp.armeria.common.HttpStatus;
 import com.linecorp.armeria.common.RequestContext;
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
+import com.linecorp.armeria.common.util.EventLoopGroups;
 import com.linecorp.armeria.grpc.testing.Messages.EchoStatus;
 import com.linecorp.armeria.grpc.testing.Messages.Payload;
 import com.linecorp.armeria.grpc.testing.Messages.SimpleRequest;
@@ -207,7 +208,7 @@ public void onCompleted() {
     public static ServerRule server = new ServerRule() {
         @Override
         protected void configure(ServerBuilder sb) throws Exception {
-            sb.numWorkers(1);
+            sb.workerGroup(EventLoopGroups.newEventLoopGroup(1), true);
             sb.port(0, HTTP);
             sb.defaultMaxRequestLength(0);
 

File: thrift/src/main/java/com/linecorp/armeria/internal/thrift/ThriftFieldAccess.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.thrift.TFieldIdEnum;
 
 /**
- * Provides the access to a Thrift field.
+ * Provides access to a Thrift field.
  */
 public final class ThriftFieldAccess {
 

File: core/src/main/java/com/linecorp/armeria/client/ClientBuilder.java
Patch:
@@ -73,7 +73,8 @@ public ClientBuilder factory(ClientFactory factory) {
     }
 
     /**
-     * Creates a new client which implements the specified {@code clientType}.
+     * Returns a newly-created client which implements the specified {@code clientType}, based on the
+     * properties of this builder.
      *
      * @throws IllegalArgumentException if the scheme of the {@code uri} specified in
      *                                  {@link #ClientBuilder(String)} or the specified {@code clientType} is

File: core/src/main/java/com/linecorp/armeria/client/ClientDecorationBuilder.java
Patch:
@@ -88,8 +88,7 @@ public <I extends Request, O extends Response> ClientDecorationBuilder add(
     }
 
     /**
-     * Creates a new {@link ClientDecoration} with the decorators added so far via
-     * {@link #add(Class, Class, Function)}.
+     * Returns a newly-created {@link ClientDecoration} based on the decorators added to this builder.
      */
     public ClientDecoration build() {
         return new ClientDecoration(entries);

File: core/src/main/java/com/linecorp/armeria/client/ClientOptionsBuilder.java
Patch:
@@ -35,7 +35,7 @@ public ClientOptionsBuilder(ClientOptions options) {
     }
 
     /**
-     * Creates a new {@link ClientOptions}.
+     * Returns a newly-created {@link ClientOptions} based on the {@link ClientOptionValue}s of this builder.
      */
     public ClientOptions build() {
         return buildOptions();

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerBuilder.java
Patch:
@@ -228,7 +228,7 @@ CircuitBreakerBuilder ticker(Ticker ticker) {
     }
 
     /**
-     * Builds a {@link CircuitBreaker} instance.
+     * Returns a newly-created {@link CircuitBreaker} based on the properties of this builder.
      */
     public CircuitBreaker build() {
         if (counterSlidingWindow.compareTo(counterUpdateInterval) <= 0) {

File: core/src/main/java/com/linecorp/armeria/server/AbstractVirtualHostBuilder.java
Patch:
@@ -359,7 +359,8 @@ final B self() {
     }
 
     /**
-     * Creates a new {@link VirtualHost}.
+     * Returns a newly-created {@link VirtualHost} based on the properties of this builder and the services
+     * added to this builder.
      */
     protected VirtualHost build() {
         final VirtualHost virtualHost = new VirtualHost(defaultHostname, hostnamePattern, sslContext, services);

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostBuilder.java
Patch:
@@ -54,9 +54,6 @@ public VirtualHostBuilder(String defaultHostname, String hostnamePattern) {
         super(defaultHostname, hostnamePattern);
     }
 
-    /**
-     * Creates a new {@link VirtualHost}.
-     */
     @Override
     public VirtualHost build() {
         return super.build();

File: core/src/main/java/com/linecorp/armeria/server/composition/SimpleCompositeServiceBuilder.java
Patch:
@@ -56,8 +56,8 @@ public SimpleCompositeServiceBuilder<I, O> service(
     }
 
     /**
-     * Creates a new {@link SimpleCompositeService} with the {@link Service}s added by the {@code service*()}
-     * methods.
+     * Returns a newly-created {@link SimpleCompositeService} based on the {@link Service}s adde to this
+     * builder.
      */
     public SimpleCompositeService<I, O> build() {
         return new SimpleCompositeService<>(services());

File: core/src/main/java/com/linecorp/armeria/server/docs/DocServiceBuilder.java
Patch:
@@ -308,7 +308,7 @@ private static String[] guessAndSerializeExampleRequest(Object exampleRequest) {
     }
 
     /**
-     * Creates a new {@link DocService}.
+     * Returns a newly-created {@link DocService} based on the properties of this builder.
      */
     public DocService build() {
         return new DocService(exampleHttpHeaders, exampleRequests);

File: core/src/main/java/com/linecorp/armeria/server/file/HttpFileServiceBuilder.java
Patch:
@@ -116,7 +116,7 @@ public HttpFileServiceBuilder maxCacheEntrySizeBytes(int maxCacheEntrySizeBytes)
     }
 
     /**
-     * Creates a new {@link HttpFileService}.
+     * Returns a newly-created {@link HttpFileService} based on the properties of this builder.
      */
     public HttpFileService build() {
         return new HttpFileService(new HttpFileServiceConfig(

File: core/src/test/java/com/linecorp/armeria/client/DefaultHttpClientTest.java
Patch:
@@ -40,7 +40,7 @@ public void testConcatenateRequestPath() throws Exception {
         String requestPath = "world/test?q1=foo";
 
         Client<HttpRequest, HttpResponse> mockClientDelegate = mock(Client.class);
-        ClientBuilderParams clientBuilderParams = new DefaultClientBuilderParams(new HttpClientFactory(),
+        ClientBuilderParams clientBuilderParams = new DefaultClientBuilderParams(ClientFactory.DEFAULT,
                                                                                  new URI(clientUriPath),
                                                                                  HttpClient.class,
                                                                                  ClientOptions.DEFAULT);

File: core/src/test/java/com/linecorp/armeria/client/HttpClientTimeoutTest.java
Patch:
@@ -45,7 +45,7 @@ public class HttpClientTimeoutTest {
 
     @BeforeClass
     public static void init() {
-        factory = new HttpClientFactory(SessionOptions.of(SessionOption.USE_HTTP2_PREFACE.newValue(true)));
+        factory = new ClientFactoryBuilder().useHttp2Preface(true).build();
     }
 
     @AfterClass

File: jetty/src/main/java/com/linecorp/armeria/server/jetty/JettyServiceBuilder.java
Patch:
@@ -205,7 +205,7 @@ public JettyServiceBuilder configurator(Consumer<? super Server> configurator) {
     }
 
     /**
-     * Creates a new {@link JettyService}.
+     * Returns a newly-created {@link JettyService} based on the properties of this builder.
      */
     public JettyService build() {
         return JettyService.forConfig(new JettyServiceConfig(

File: retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaRetrofitBuilder.java
Patch:
@@ -169,7 +169,7 @@ public ArmeriaRetrofitBuilder validateEagerly(boolean validateEagerly) {
     }
 
     /**
-     * Creates a new {@link Retrofit} instance using the configured values.
+     * Returns a newly-created {@link Retrofit} based on the properties of this builder.
      */
     public Retrofit build() {
         checkState(baseUrl != null, "baseUrl not set");

File: tomcat/src/main/java/com/linecorp/armeria/server/tomcat/TomcatServiceBuilder.java
Patch:
@@ -297,7 +297,7 @@ public TomcatServiceBuilder configurator(Consumer<? super StandardServer> config
     }
 
     /**
-     * Creates a new {@link TomcatService}.
+     * Returns a newly-created {@link TomcatService} based on the properties of this builder.
      */
     public TomcatService build() {
         // Create a temporary directory and use it if baseDir is not set.

File: core/src/main/java/com/linecorp/armeria/common/RequestContext.java
Patch:
@@ -100,7 +100,7 @@ static <T> T mapCurrent(
 
     /**
      * Pushes the specified context to the thread-local stack. To pop the context from the stack, call
-     * {@link SafeCloseable#close()}, which can be done using a {@code try-finally} block:
+     * {@link SafeCloseable#close()}, which can be done using a {@code try-with-resources} block:
      * <pre>{@code
      * try (SafeCloseable ignored = RequestContext.push(ctx)) {
      *     ...
@@ -118,7 +118,7 @@ static SafeCloseable push(RequestContext ctx) {
 
     /**
      * Pushes the specified context to the thread-local stack. To pop the context from the stack, call
-     * {@link SafeCloseable#close()}, which can be done using a {@code try-finally} block:
+     * {@link SafeCloseable#close()}, which can be done using a {@code try-with-resources} block:
      * <pre>{@code
      * try (PushHandle ignored = RequestContext.push(ctx, true)) {
      *     ...

File: core/src/main/java/com/linecorp/armeria/server/docs/DocStringExtractor.java
Patch:
@@ -51,7 +51,7 @@ public abstract class DocStringExtractor {
     private final String path;
 
     protected DocStringExtractor(String defaultPath, String pathPropertyName) {
-        this.path = computePath(defaultPath, pathPropertyName);
+        path = computePath(defaultPath, pathPropertyName);
     }
 
     /**
@@ -67,7 +67,7 @@ private Map<String, String> getAllDocStrings0(ClassLoader classLoader) {
                 .filterInputsBy(new FilterBuilder().includePackage(path))
                 .setUrls(ClasspathHelper.forPackage(path))
                 .addClassLoader(classLoader)
-                .addScanners(new ResourcesScanner());
+                .setScanners(new ResourcesScanner());
         if (configuration.getUrls() == null || configuration.getUrls().isEmpty()) {
             return Collections.emptyMap();
         }

File: core/src/main/java/com/linecorp/armeria/client/http/HttpClientPipelineConfigurator.java
Patch:
@@ -321,7 +321,7 @@ void finishSuccessfully(ChannelPipeline pipeline, SessionProtocol protocol) {
 
         final long idleTimeoutMillis = options.idleTimeoutMillis();
         if (idleTimeoutMillis > 0) {
-            pipeline.addFirst(new HttpClientIdleTimeoutHandler(idleTimeoutMillis));
+            addBeforeSessionHandler(pipeline, new HttpClientIdleTimeoutHandler(idleTimeoutMillis));
         }
 
         pipeline.channel().eventLoop().execute(() -> pipeline.fireUserEventTriggered(protocol));

File: core/src/main/java/com/linecorp/armeria/server/http/HttpServerPipelineConfigurator.java
Patch:
@@ -112,7 +112,7 @@ private void configureHttp(ChannelPipeline p) {
 
     private void configureRequestCountingHandlers(ChannelPipeline p) {
         if (config.idleTimeoutMillis() > 0) {
-            p.addFirst(new HttpServerIdleTimeoutHandler(config.idleTimeoutMillis()));
+            p.addLast(new HttpServerIdleTimeoutHandler(config.idleTimeoutMillis()));
         }
     }
 

File: core/src/main/java/com/linecorp/armeria/client/http/HttpClientPipelineConfigurator.java
Patch:
@@ -577,7 +577,7 @@ private Http2ClientConnectionHandler newHttp2ConnectionHandler(Channel ch) {
         Http2ConnectionEncoder encoder = new DefaultHttp2ConnectionEncoder(conn, writer);
         Http2ConnectionDecoder decoder = new DefaultHttp2ConnectionDecoder(conn, encoder, reader);
 
-        final Http2ResponseDecoder listener = new Http2ResponseDecoder(conn, ch);
+        final Http2ResponseDecoder listener = new Http2ResponseDecoder(conn, ch, encoder);
 
         final Http2ClientConnectionHandler handler =
                 new Http2ClientConnectionHandler(decoder, encoder, new Http2Settings(), listener);

File: core/src/main/java/com/linecorp/armeria/client/DecoratingClient.java
Patch:
@@ -34,20 +34,20 @@
 public abstract class DecoratingClient<T_I extends Request, T_O extends Response,
                                        R_I extends Request, R_O extends Response> implements Client<R_I, R_O> {
 
-    private final Client<? super T_I, ? extends T_O> delegate;
+    private final Client<T_I, T_O> delegate;
 
     /**
      * Creates a new instance that decorates the specified {@link Client}.
      */
-    protected DecoratingClient(Client<? super T_I, ? extends T_O> delegate) {
+    protected DecoratingClient(Client<T_I, T_O> delegate) {
         this.delegate = requireNonNull(delegate, "delegate");
     }
 
     /**
      * Returns the {@link Client} being decorated.
      */
     @SuppressWarnings("unchecked")
-    protected final <T extends Client<? super T_I, ? extends T_O>> T delegate() {
+    protected final <T extends Client<T_I, T_O>> T delegate() {
         return (T) delegate;
     }
 

File: core/src/main/java/com/linecorp/armeria/client/FunctionalDecoratingClient.java
Patch:
@@ -30,13 +30,13 @@
 final class FunctionalDecoratingClient<I extends Request, O extends Response>
         extends SimpleDecoratingClient<I, O> {
 
-    private final DecoratingClientFunction<? super I, ? extends O> function;
+    private final DecoratingClientFunction<I, O> function;
 
     /**
      * Creates a new instance with the specified function.
      */
-    FunctionalDecoratingClient(Client<? super I, ? extends O> delegate,
-                               DecoratingClientFunction<? super I, ? extends O> function) {
+    FunctionalDecoratingClient(Client<I, O> delegate,
+                               DecoratingClientFunction<I, O> function) {
         super(delegate);
         this.function = requireNonNull(function, "function");
     }

File: core/src/main/java/com/linecorp/armeria/client/SimpleDecoratingClient.java
Patch:
@@ -33,7 +33,7 @@ public abstract class SimpleDecoratingClient<I extends Request, O extends Respon
     /**
      * Creates a new instance that decorates the specified {@link Client}.
      */
-    protected SimpleDecoratingClient(Client<? super I, ? extends O> delegate) {
+    protected SimpleDecoratingClient(Client<I, O> delegate) {
         super(delegate);
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.java
Patch:
@@ -101,7 +101,7 @@ public final class CircuitBreakerClient<I extends Request, O extends Response>
 
     private final CircuitBreakerMapping mapping;
 
-    CircuitBreakerClient(Client<? super I, ? extends O> delegate, CircuitBreakerMapping mapping) {
+    CircuitBreakerClient(Client<I, O> delegate, CircuitBreakerMapping mapping) {
         super(delegate);
         this.mapping = requireNonNull(mapping, "mapping");
     }

File: core/src/main/java/com/linecorp/armeria/client/http/HttpResponseDecoder.java
Patch:
@@ -165,8 +165,7 @@ public boolean write(HttpObject o) {
                 final HttpHeaders headers = (HttpHeaders) o;
                 final HttpStatus status = headers.status();
                 if (status != null && status.codeClass() != HttpStatusClass.INFORMATIONAL) {
-                    logBuilder.statusCode(status.code());
-                    logBuilder.responseEnvelope(headers);
+                    logBuilder.responseHeaders(headers);
                 }
             } else if (o instanceof HttpData) {
                 logBuilder.increaseResponseLength(((HttpData) o).length());

File: core/src/main/java/com/linecorp/armeria/client/limit/ConcurrencyLimitingClient.java
Patch:
@@ -65,7 +65,7 @@ public abstract class ConcurrencyLimitingClient<I extends Request, O extends Res
      * @param delegate the delegate {@link Client}
      * @param maxConcurrency the maximum number of concurrent active requests. {@code 0} to disable the limit.
      */
-    protected ConcurrencyLimitingClient(Client<? super I, ? extends O> delegate, int maxConcurrency) {
+    protected ConcurrencyLimitingClient(Client<I, O> delegate, int maxConcurrency) {
         this(delegate, maxConcurrency, DEFAULT_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);
     }
 
@@ -78,7 +78,7 @@ protected ConcurrencyLimitingClient(Client<? super I, ? extends O> delegate, int
      * @param timeout the amount of time until this decorator fails the request if the request was not
      *                delegated to the {@code delegate} before then
      */
-    protected ConcurrencyLimitingClient(Client<? super I, ? extends O> delegate,
+    protected ConcurrencyLimitingClient(Client<I, O> delegate,
                                         int maxConcurrency, long timeout, TimeUnit unit) {
         super(delegate);
 

File: core/src/main/java/com/linecorp/armeria/client/logging/LoggingClient.java
Patch:
@@ -69,15 +69,15 @@ Function<Client<I, O>, LoggingClient<I, O>> newDecorator(LogLevel level) {
     /**
      * Creates a new instance that logs {@link Request}s and {@link Response}s at {@link LogLevel#INFO}.
      */
-    public LoggingClient(Client<? super I, ? extends O> delegate) {
+    public LoggingClient(Client<I, O> delegate) {
         this(delegate, LogLevel.INFO);
     }
 
     /**
      * Creates a new instance that logs {@link Request}s and {@link Response}s at the specified
      * {@link LogLevel}.
      */
-    public LoggingClient(Client<? super I, ? extends O> delegate, LogLevel level) {
+    public LoggingClient(Client<I, O> delegate, LogLevel level) {
         super(delegate);
         this.level = requireNonNull(level, "level");
     }

File: core/src/main/java/com/linecorp/armeria/client/metric/DropwizardMetricCollectingClient.java
Patch:
@@ -91,7 +91,7 @@ Function<Client<I, O>, DropwizardMetricCollectingClient<I, O>> newDecorator(
     private static String defaultMetricName(RequestLog log, String metricNamePrefix) {
         String methodName = null;
 
-        final Object envelope = log.requestEnvelope();
+        final Object envelope = log.requestHeaders();
         final Object content = log.requestContent();
         if (envelope instanceof HttpHeaders) {
             methodName = ((HttpHeaders) envelope).method().name();
@@ -112,7 +112,7 @@ private static String defaultMetricName(RequestLog log, String metricNamePrefix)
 
     @SuppressWarnings("unchecked")
     DropwizardMetricCollectingClient(
-            Client<? super I, ? extends O> delegate,
+            Client<I, O> delegate,
             MetricRegistry metricRegistry,
             Function<? super RequestLog, String> metricNameFunc) {
         super(delegate);
@@ -123,7 +123,7 @@ private static String defaultMetricName(RequestLog log, String metricNamePrefix)
     @Override
     public O execute(ClientRequestContext ctx, I req) throws Exception {
         ctx.log().addListener(collector::onRequestStart,
-                              RequestLogAvailability.REQUEST_ENVELOPE,
+                              RequestLogAvailability.REQUEST_HEADERS,
                               RequestLogAvailability.REQUEST_CONTENT);
         ctx.log().addListener(collector::onRequestEnd,
                               RequestLogAvailability.REQUEST_END);

File: core/src/main/java/com/linecorp/armeria/client/metric/PrometheusMetricCollectingClient.java
Patch:
@@ -87,7 +87,7 @@ public final class PrometheusMetricCollectingClient<T extends MetricLabel<T>,
     private final PrometheusMetricRequestDecorator<T, I, O> requestDecorator;
 
     private PrometheusMetricCollectingClient(
-            Client<? super I, ? extends O> delegate,
+            Client<I, O> delegate,
             PrometheusMetricRequestDecorator<T, I, O> requestDecorator) {
         super(delegate);
         this.requestDecorator = requestDecorator;

File: core/src/main/java/com/linecorp/armeria/server/ChainedVirtualHostBuilder.java
Patch:
@@ -40,8 +40,6 @@ public final class ChainedVirtualHostBuilder extends AbstractVirtualHostBuilder<
      * @param serverBuilder the parent {@link ServerBuilder} to be returned by {@link #and()}.
      */
     ChainedVirtualHostBuilder(ServerBuilder serverBuilder) {
-        super();
-
         requireNonNull(serverBuilder, "serverBuilder");
         this.serverBuilder = serverBuilder;
     }

File: core/src/main/java/com/linecorp/armeria/server/DecoratingService.java
Patch:
@@ -37,20 +37,20 @@ public abstract class DecoratingService<T_I extends Request, T_O extends Respons
                                         R_I extends Request, R_O extends Response>
         implements Service<R_I, R_O> {
 
-    private final Service<? super T_I, ? extends T_O> delegate;
+    private final Service<T_I, T_O> delegate;
 
     /**
      * Creates a new instance that decorates the specified {@link Service}.
      */
-    protected DecoratingService(Service<? super T_I, ? extends T_O> delegate) {
+    protected DecoratingService(Service<T_I, T_O> delegate) {
         this.delegate = requireNonNull(delegate, "delegate");
     }
 
     /**
      * Returns the {@link Service} being decorated.
      */
     @SuppressWarnings("unchecked")
-    protected final <T extends Service<? super T_I, ? extends T_O>> T delegate() {
+    protected final <T extends Service<T_I, T_O>> T delegate() {
         return (T) delegate;
     }
 

File: core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java
Patch:
@@ -87,8 +87,7 @@ public DefaultServiceRequestContext(
         this.sslSession = sslSession;
 
         log = new DefaultRequestLog(this);
-        log.startRequest(ch, sessionProtocol, cfg.virtualHost().defaultHostname(), method,
-                         pathMappingResult.path(), pathMappingResult.query());
+        log.startRequest(ch, sessionProtocol, cfg.virtualHost().defaultHostname());
         logger = newLogger(cfg);
 
         final ServerConfig serverCfg = cfg.server().config();
@@ -132,7 +131,7 @@ public Map<String, String> pathParams() {
     }
 
     @Override
-    public <T extends Service<? super HttpRequest, ? extends HttpResponse>> T service() {
+    public <T extends Service<HttpRequest, HttpResponse>> T service() {
         return cfg.service();
     }
 

File: core/src/main/java/com/linecorp/armeria/server/FunctionalDecoratingService.java
Patch:
@@ -30,13 +30,13 @@
 final class FunctionalDecoratingService<I extends Request, O extends Response>
         extends SimpleDecoratingService<I, O> {
 
-    private final DecoratingServiceFunction<? super I, ? extends O> function;
+    private final DecoratingServiceFunction<I, O> function;
 
     /**
      * Creates a new instance with the specified function.
      */
-    FunctionalDecoratingService(Service<? super I, ? extends O> delegate,
-                                DecoratingServiceFunction<? super I, ? extends O> function) {
+    FunctionalDecoratingService(Service<I, O> delegate,
+                                DecoratingServiceFunction<I, O> function) {
         super(delegate);
         this.function = requireNonNull(function, "function");
     }

File: core/src/main/java/com/linecorp/armeria/server/ServerPort.java
Patch:
@@ -17,8 +17,8 @@
 package com.linecorp.armeria.server;
 
 import static com.google.common.base.Preconditions.checkArgument;
-import static com.linecorp.armeria.common.http.HttpSessionProtocols.HTTP;
-import static com.linecorp.armeria.common.http.HttpSessionProtocols.HTTPS;
+import static com.linecorp.armeria.common.SessionProtocol.HTTP;
+import static com.linecorp.armeria.common.SessionProtocol.HTTPS;
 import static java.util.Objects.requireNonNull;
 
 import java.net.InetAddress;

File: core/src/main/java/com/linecorp/armeria/server/Service.java
Patch:
@@ -127,7 +127,7 @@ R decorate(Function<T, R> decorator) {
      * Creates a new {@link Service} that decorates this {@link Service} with the specified
      * {@link DecoratingServiceFunction}.
      */
-    default Service<I, O> decorate(DecoratingServiceFunction<? super I, ? extends O> function) {
+    default Service<I, O> decorate(DecoratingServiceFunction<I, O> function) {
         return new FunctionalDecoratingService<>(this, function);
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java
Patch:
@@ -66,7 +66,7 @@ default String pathParam(String name) {
     /**
      * Returns the {@link Service} that is handling the current {@link Request}.
      */
-    <T extends Service<? super HttpRequest, ? extends HttpResponse>> T service();
+    <T extends Service<HttpRequest, HttpResponse>> T service();
 
     /**
      * Returns the {@link ExecutorService} that could be used for executing a potentially long-running task.

File: core/src/main/java/com/linecorp/armeria/server/ServiceRequestContextWrapper.java
Patch:
@@ -60,7 +60,7 @@ public Map<String, String> pathParams() {
     }
 
     @Override
-    public <T extends Service<? super HttpRequest, ? extends HttpResponse>> T service() {
+    public <T extends Service<HttpRequest, HttpResponse>> T service() {
         return delegate().service();
     }
 

File: core/src/main/java/com/linecorp/armeria/server/SimpleDecoratingService.java
Patch:
@@ -35,7 +35,7 @@ public abstract class SimpleDecoratingService<I extends Request, O extends Respo
     /**
      * Creates a new instance that decorates the specified {@link Service}.
      */
-    protected SimpleDecoratingService(Service<? super I, ? extends O> delegate) {
+    protected SimpleDecoratingService(Service<I, O> delegate) {
         super(delegate);
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostBuilder.java
Patch:
@@ -57,6 +57,7 @@ public VirtualHostBuilder(String defaultHostname, String hostnamePattern) {
     /**
      * Creates a new {@link VirtualHost}.
      */
+    @Override
     public VirtualHost build() {
         return super.build();
     }

File: core/src/main/java/com/linecorp/armeria/server/http/DecodedHttpRequest.java
Patch:
@@ -51,7 +51,7 @@ final class DecodedHttpRequest extends DefaultHttpRequest {
 
     void init(ServiceRequestContext ctx) {
         this.ctx = ctx;
-        ctx.logBuilder().requestEnvelope(headers());
+        ctx.logBuilder().requestHeaders(headers());
     }
 
     int id() {

File: core/src/main/java/com/linecorp/armeria/server/http/cors/CorsServiceBuilder.java
Patch:
@@ -428,8 +428,7 @@ public CorsService build(Service<HttpRequest, HttpResponse> delegate) {
     /**
      * Creates a new decorator that decorates a {@link Service} with a new {@link CorsService}.
      */
-    public <I extends HttpRequest, O extends HttpResponse>
-    Function<Service<HttpRequest, HttpResponse>, CorsService> newDecorator() {
+    public Function<Service<HttpRequest, HttpResponse>, CorsService> newDecorator() {
         final CorsConfig config = new CorsConfig(this);
         return s -> new CorsService(s, config);
     }

File: core/src/main/java/com/linecorp/armeria/server/http/encoding/HttpEncodingService.java
Patch:
@@ -55,7 +55,7 @@ public class HttpEncodingService
      * Encoding will be applied when the client supports it, the response content type is a common web
      * text format, and the response either has variable content length or a length greater than 1024.
      */
-    public HttpEncodingService(Service<? super HttpRequest, ? extends HttpResponse> delegate) {
+    public HttpEncodingService(Service<HttpRequest, HttpResponse> delegate) {
         this(delegate, DEFAULT_ENCODABLE_CONTENT_TYPE_PREDICATE,
              DEFAULT_MIN_BYTES_TO_FORCE_CHUNKED_AND_ENCODING);
     }
@@ -66,7 +66,7 @@ public HttpEncodingService(Service<? super HttpRequest, ? extends HttpResponse>
      * {@code encodableContentTypePredicate} and the response either has variable content length or a length
      * greater than {@code minBytesToForceChunkedAndEncoding}.
      */
-    public HttpEncodingService(Service<? super HttpRequest, ? extends HttpResponse> delegate,
+    public HttpEncodingService(Service<HttpRequest, HttpResponse> delegate,
                                Predicate<MediaType> encodableContentTypePredicate,
                                int minBytesToForceChunkedAndEncoding) {
         super(delegate);

File: core/src/main/java/com/linecorp/armeria/server/logging/LoggingService.java
Patch:
@@ -66,15 +66,15 @@ Function<Service<I, O>, LoggingService<I, O>> newDecorator(LogLevel level) {
     /**
      * Creates a new instance that logs {@link Request}s and {@link Response}s at {@link LogLevel#INFO}.
      */
-    public LoggingService(Service<? super I, ? extends O> delegate) {
+    public LoggingService(Service<I, O> delegate) {
         this(delegate, LogLevel.INFO);
     }
 
     /**
      * Creates a new instance that logs {@link Request}s and {@link Response}s at the specified
      * {@link LogLevel}.
      */
-    public LoggingService(Service<? super I, ? extends O> delegate, LogLevel level) {
+    public LoggingService(Service<I, O> delegate, LogLevel level) {
         super(delegate);
         this.level = requireNonNull(level, "level");
     }

File: core/src/main/java/com/linecorp/armeria/server/logging/SampledLoggingService.java
Patch:
@@ -59,7 +59,7 @@ public class SampledLoggingService<I extends Request, O extends Response> extend
      * Creates a new instance that logs {@link Request}s and {@link Response}s at the specified
      * {@link LogLevel}.
      */
-    public SampledLoggingService(Service<? super I, ? extends O> delegate, LogLevel level,
+    public SampledLoggingService(Service<I, O> delegate, LogLevel level,
                                  boolean logRequest, boolean logResponse, float logSamplingRate) {
         super(delegate, level);
         this.logRequest = logRequest;

File: core/src/main/java/com/linecorp/armeria/server/logging/structured/StructuredLoggingService.java
Patch:
@@ -50,8 +50,7 @@ public abstract class StructuredLoggingService<I extends Request, O extends Resp
      * @param logBuilder an instance of {@link StructuredLogBuilder} which is used to construct an entry of
      *        structured log
      */
-    protected StructuredLoggingService(Service<? super I, ? extends O> delegate,
-                                       StructuredLogBuilder<L> logBuilder) {
+    protected StructuredLoggingService(Service<I, O> delegate, StructuredLogBuilder<L> logBuilder) {
         super(delegate);
         this.logBuilder = requireNonNull(logBuilder, "logBuilder");
     }

File: core/src/main/java/com/linecorp/armeria/server/metric/DropwizardMetricCollectingService.java
Patch:
@@ -94,7 +94,7 @@ Function<Service<I, O>, DropwizardMetricCollectingService<I, O>> newDecorator(
     private static String defaultMetricName(RequestLog log, String metricNamePrefix) {
 
         final ServiceRequestContext ctx = (ServiceRequestContext) log.context();
-        final Object requestEnvelope = log.requestEnvelope();
+        final Object requestEnvelope = log.requestHeaders();
         final Object requestContent = log.requestContent();
 
         String pathAsMetricName = null;
@@ -122,7 +122,7 @@ private static String defaultMetricName(RequestLog log, String metricNamePrefix)
 
     @SuppressWarnings("unchecked")
     DropwizardMetricCollectingService(
-            Service<? super I, ? extends O> delegate,
+            Service<I, O> delegate,
             MetricRegistry metricRegistry,
             Function<? super RequestLog, String> metricNameFunc) {
 
@@ -135,7 +135,7 @@ private static String defaultMetricName(RequestLog log, String metricNamePrefix)
     @Override
     public O serve(ServiceRequestContext ctx, I req) throws Exception {
         ctx.log().addListener(collector::onRequestStart,
-                              RequestLogAvailability.REQUEST_ENVELOPE,
+                              RequestLogAvailability.REQUEST_HEADERS,
                               RequestLogAvailability.REQUEST_CONTENT);
         ctx.log().addListener(collector::onRequestEnd,
                               RequestLogAvailability.REQUEST_END);

File: core/src/main/java/com/linecorp/armeria/server/metric/PrometheusMetricCollectingService.java
Patch:
@@ -84,7 +84,7 @@ public final class PrometheusMetricCollectingService
 
     private final PrometheusMetricRequestDecorator<T, I, O> requestDecorator;
 
-    private PrometheusMetricCollectingService(Service<? super I, ? extends O> delegate,
+    private PrometheusMetricCollectingService(Service<I, O> delegate,
                                               PrometheusMetricRequestDecorator<T, I, O> requestDecorator) {
         super(delegate);
         this.requestDecorator = requestDecorator;

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClientTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.client.circuitbreaker;
 
-import static com.linecorp.armeria.common.http.HttpSessionProtocols.H2C;
+import static com.linecorp.armeria.common.SessionProtocol.H2C;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.greaterThan;
 import static org.hamcrest.Matchers.instanceOf;

File: core/src/test/java/com/linecorp/armeria/client/http/HttpClientIdleTimeoutHandlerTest.java
Patch:
@@ -27,7 +27,6 @@
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.http.HttpRequest;
-import com.linecorp.armeria.common.http.HttpSessionProtocols;
 import com.linecorp.armeria.internal.InboundTrafficController;
 
 import io.netty.channel.ChannelInboundHandlerAdapter;
@@ -113,7 +112,7 @@ private static final class MockHttpSessionHandler
 
         @Override
         public SessionProtocol protocol() {
-            return HttpSessionProtocols.H2C;
+            return SessionProtocol.H2C;
         }
 
         @Override

File: core/src/test/java/com/linecorp/armeria/client/http/HttpClientSniTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.client.http;
 
-import static com.linecorp.armeria.common.http.HttpSessionProtocols.HTTPS;
+import static com.linecorp.armeria.common.SessionProtocol.HTTPS;
 import static org.junit.Assert.assertEquals;
 
 import java.net.InetAddress;

File: core/src/test/java/com/linecorp/armeria/common/RequestContextTest.java
Patch:
@@ -50,7 +50,6 @@
 
 import com.linecorp.armeria.common.http.DefaultHttpRequest;
 import com.linecorp.armeria.common.http.HttpMethod;
-import com.linecorp.armeria.common.http.HttpSessionProtocols;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
 import com.linecorp.armeria.common.util.SafeCloseable;
@@ -409,7 +408,7 @@ private NonWrappingRequestContext createContext(boolean addContextAwareHandler)
 
     private class DummyRequestContext extends NonWrappingRequestContext {
         DummyRequestContext() {
-            super(HttpSessionProtocols.HTTP, HttpMethod.GET, "/", null, new DefaultHttpRequest());
+            super(SessionProtocol.HTTP, HttpMethod.GET, "/", null, new DefaultHttpRequest());
         }
 
         @Override

File: core/src/test/java/com/linecorp/armeria/internal/metric/DropwizardMetricCollectorTest.java
Patch:
@@ -30,8 +30,8 @@
 import com.codahale.metrics.Timer;
 
 import com.linecorp.armeria.common.SerializationFormat;
+import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.http.HttpMethod;
-import com.linecorp.armeria.common.http.HttpSessionProtocols;
 import com.linecorp.armeria.common.logging.RequestLog;
 
 public class DropwizardMetricCollectorTest {
@@ -47,7 +47,7 @@ public void testMetricsForHttp() {
 
         final RequestLog requestLog = mock(RequestLog.class);
 
-        when(requestLog.sessionProtocol()).thenReturn(HttpSessionProtocols.HTTP);
+        when(requestLog.sessionProtocol()).thenReturn(SessionProtocol.HTTP);
         when(requestLog.serializationFormat()).thenReturn(SerializationFormat.NONE);
         when(requestLog.path()).thenReturn("/bar");
         when(requestLog.method()).thenReturn(HttpMethod.GET);

File: core/src/test/java/com/linecorp/armeria/server/ServiceTest.java
Patch:
@@ -90,7 +90,7 @@ public RpcResponse serve(ServiceRequestContext ctx, RpcRequest req) throws Excep
     }
 
     public static class FooServiceDecorator extends SimpleDecoratingService<RpcRequest, RpcResponse> {
-        public FooServiceDecorator(Service<? super RpcRequest, ? extends RpcResponse> delegate) {
+        public FooServiceDecorator(Service<RpcRequest, RpcResponse> delegate) {
             super(delegate);
         }
 
@@ -101,7 +101,7 @@ public RpcResponse serve(ServiceRequestContext ctx, RpcRequest req) throws Excep
     }
 
     public static class BadFooServiceDecorator extends FooServiceDecorator {
-        public BadFooServiceDecorator(Service<? super RpcRequest, ? extends RpcResponse> delegate,
+        public BadFooServiceDecorator(Service<RpcRequest, RpcResponse> delegate,
                                       @SuppressWarnings("unused") Object unused) {
             super(delegate);
         }

File: core/src/test/java/com/linecorp/armeria/server/SniServerTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.server;
 
-import static com.linecorp.armeria.common.http.HttpSessionProtocols.HTTPS;
+import static com.linecorp.armeria.common.SessionProtocol.HTTPS;
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
 

File: core/src/test/java/com/linecorp/armeria/server/http/HttpServerIdleTimeoutHandlerTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.junit.Test;
 
 import com.linecorp.armeria.common.SessionProtocol;
-import com.linecorp.armeria.common.http.HttpSessionProtocols;
 
 import io.netty.channel.ChannelInboundHandlerAdapter;
 import io.netty.channel.embedded.EmbeddedChannel;
@@ -111,7 +110,7 @@ private static final class MockHttpServerHandler
 
         @Override
         public SessionProtocol protocol() {
-            return HttpSessionProtocols.H2C;
+            return SessionProtocol.H2C;
         }
 
         @Override

File: core/src/test/java/com/linecorp/armeria/server/http/HttpServerPathTest.java
Patch:
@@ -29,9 +29,9 @@
 
 import com.google.common.io.ByteStreams;
 
+import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.http.HttpRequest;
 import com.linecorp.armeria.common.http.HttpResponseWriter;
-import com.linecorp.armeria.common.http.HttpSessionProtocols;
 import com.linecorp.armeria.common.http.HttpStatus;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.ServiceRequestContext;
@@ -45,7 +45,7 @@ public class HttpServerPathTest {
     public static final ServerRule server = new ServerRule() {
         @Override
         protected void configure(ServerBuilder sb) throws Exception {
-            sb.port(0, HttpSessionProtocols.HTTP);
+            sb.port(0, SessionProtocol.HTTP);
             sb.service("/service/foo", new AbstractHttpService() {
                 @Override
                 protected void doGet(ServiceRequestContext ctx, HttpRequest req, HttpResponseWriter res) {

File: core/src/test/java/com/linecorp/armeria/server/http/file/HttpFileServiceTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.linecorp.armeria.server.http.file;
 
-import static com.linecorp.armeria.common.http.HttpSessionProtocols.HTTP;
+import static com.linecorp.armeria.common.SessionProtocol.HTTP;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.not;
 import static org.hamcrest.Matchers.nullValue;

File: core/src/test/java/com/linecorp/armeria/server/http/healthcheck/HttpHealthCheckServiceTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.server.http.healthcheck;
 
-import static com.linecorp.armeria.common.http.HttpSessionProtocols.HTTP;
+import static com.linecorp.armeria.common.SessionProtocol.HTTP;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.when;

File: grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.client.grpc;
 
-import static com.linecorp.armeria.common.http.HttpSessionProtocols.HTTP;
+import static com.linecorp.armeria.common.SessionProtocol.HTTP;
 import static com.linecorp.armeria.grpc.testing.Messages.PayloadType.COMPRESSABLE;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.catchThrowable;

File: grpc/src/test/java/com/linecorp/armeria/it/grpc/DropwizardMetricsIntegrationTest.java
Patch:
@@ -33,10 +33,10 @@
 
 import com.linecorp.armeria.client.ClientBuilder;
 import com.linecorp.armeria.client.metric.DropwizardMetricCollectingClient;
+import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;
 import com.linecorp.armeria.common.http.HttpRequest;
 import com.linecorp.armeria.common.http.HttpResponse;
-import com.linecorp.armeria.common.http.HttpSessionProtocols;
 import com.linecorp.armeria.grpc.testing.Messages.Payload;
 import com.linecorp.armeria.grpc.testing.Messages.SimpleRequest;
 import com.linecorp.armeria.grpc.testing.Messages.SimpleResponse;
@@ -70,7 +70,7 @@ public void unaryCall(SimpleRequest request, StreamObserver<SimpleResponse> resp
     public static final ServerRule server = new ServerRule() {
         @Override
         protected void configure(ServerBuilder sb) throws Exception {
-            sb.port(0, HttpSessionProtocols.HTTP);
+            sb.port(0, SessionProtocol.HTTP);
             sb.serviceUnder("/", new GrpcServiceBuilder()
                          .addService(new TestServiceImpl())
                          .enableUnframedRequests(true)

File: it/src/test/java/com/linecorp/armeria/server/grpc/interop/ArmeriaGrpcServerBuilder.java
Patch:
@@ -27,7 +27,7 @@
 
 import com.google.instrumentation.stats.StatsContextFactory;
 
-import com.linecorp.armeria.common.http.HttpSessionProtocols;
+import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.grpc.GrpcServiceBuilder;
@@ -54,7 +54,7 @@ public ArmeriaGrpcServerBuilder(ServerBuilder armeriaServerBuilder,
     @Override
     public ArmeriaGrpcServerBuilder useTransportSecurity(File certChain, File privateKey) {
         try {
-            armeriaServerBuilder.sslContext(HttpSessionProtocols.HTTPS, certChain, privateKey);
+            armeriaServerBuilder.sslContext(SessionProtocol.HTTPS, certChain, privateKey);
         } catch (SSLException e) {
             throw new IllegalArgumentException(e);
         }

File: it/src/test/java/com/linecorp/armeria/server/grpc/interop/ArmeriaGrpcServerInteropTest.java
Patch:
@@ -32,7 +32,7 @@
 import com.google.common.collect.ImmutableList;
 import com.squareup.okhttp.ConnectionSpec;
 
-import com.linecorp.armeria.common.http.HttpSessionProtocols;
+import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.grpc.GrpcServiceBuilder;
@@ -78,7 +78,7 @@ public static void startServer() {
         try {
             ssc = new SelfSignedCertificate("example.com");
             ServerBuilder sb = new ServerBuilder()
-                    .port(0, HttpSessionProtocols.HTTPS)
+                    .port(0, SessionProtocol.HTTPS)
                     .defaultMaxRequestLength(16 * 1024 * 1024)
                     .sslContext(
                             SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey())

File: kafka/src/main/java/com/linecorp/armeria/server/logging/structured/kafka/KafkaStructuredLoggingService.java
Patch:
@@ -171,7 +171,7 @@ private static Properties newDefaultConfig(String bootstrapServers) {
     private final KeySelector<L> keySelector;
     private final boolean needToCloseProducer;
 
-    KafkaStructuredLoggingService(Service<? super I, ? extends O> delegate,
+    KafkaStructuredLoggingService(Service<I, O> delegate,
                                   StructuredLogBuilder<L> logBuilder,
                                   Producer<byte[], L> producer,
                                   String topic,

File: retrofit2/src/main/java/com/linecorp/armeria/client/http/retrofit2/ArmeriaRetrofitBuilder.java
Patch:
@@ -32,7 +32,6 @@
 import com.linecorp.armeria.common.Scheme;
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.SessionProtocol;
-import com.linecorp.armeria.common.http.HttpSessionProtocols;
 
 import okhttp3.HttpUrl;
 import retrofit2.Call;
@@ -103,7 +102,7 @@ public ArmeriaRetrofitBuilder(ClientFactory clientFactory) {
     public ArmeriaRetrofitBuilder baseUrl(String baseUrl) {
         requireNonNull(baseUrl, "baseUrl");
         URI uri = URI.create(baseUrl);
-        checkArgument(HttpSessionProtocols.isHttp(SessionProtocol.of(uri.getScheme())),
+        checkArgument(SessionProtocol.find(uri.getScheme()).isPresent(),
                       "baseUrl must have an HTTP scheme: %s", baseUrl);
         String path = uri.getPath();
         if (!path.isEmpty() && !SLASH.equals(path.substring(path.length() - 1))) {

File: spring-boot/autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaAutoConfiguration.java
Patch:
@@ -55,7 +55,6 @@
 import com.linecorp.armeria.common.http.HttpRequest;
 import com.linecorp.armeria.common.http.HttpResponse;
 import com.linecorp.armeria.common.http.HttpResponseWriter;
-import com.linecorp.armeria.common.http.HttpSessionProtocols;
 import com.linecorp.armeria.common.http.HttpStatus;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerBuilder;
@@ -82,7 +81,7 @@ public class ArmeriaAutoConfiguration {
     private static final HealthChecker[] EMPTY_HEALTH_CHECKERS = new HealthChecker[0];
 
     private static final Port DEFAULT_PORT = new Port().setPort(8080)
-                                                       .setProtocol(HttpSessionProtocols.HTTP);
+                                                       .setProtocol(SessionProtocol.HTTP);
 
     /**
      * Create a {@link Server} bean.

File: spring-boot/autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationTest.java
Patch:
@@ -37,13 +37,13 @@
 import com.linecorp.armeria.client.Clients;
 import com.linecorp.armeria.client.http.HttpClient;
 import com.linecorp.armeria.common.MediaType;
+import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.http.AggregatedHttpMessage;
 import com.linecorp.armeria.common.http.HttpHeaders;
 import com.linecorp.armeria.common.http.HttpMethod;
 import com.linecorp.armeria.common.http.HttpRequest;
 import com.linecorp.armeria.common.http.HttpResponse;
 import com.linecorp.armeria.common.http.HttpResponseWriter;
-import com.linecorp.armeria.common.http.HttpSessionProtocols;
 import com.linecorp.armeria.common.http.HttpStatus;
 import com.linecorp.armeria.server.PathMapping;
 import com.linecorp.armeria.server.Server;
@@ -140,7 +140,7 @@ public void testThriftServiceRegistrationBean() throws Exception {
     @Test
     public void testPortConfiguration() throws Exception {
         final Collection<ServerPort> ports = server.activePorts().values();
-        assertThat(ports.stream().filter(p -> p.protocol() == HttpSessionProtocols.HTTP)).hasSize(3);
+        assertThat(ports.stream().filter(p -> p.protocol() == SessionProtocol.HTTP)).hasSize(3);
         assertThat(ports.stream().filter(p -> p.localAddress().getAddress().isAnyLocalAddress())).hasSize(2);
         assertThat(ports.stream().filter(p -> p.localAddress().getAddress().isLoopbackAddress())).hasSize(1);
     }

File: testing/src/main/java/com/linecorp/armeria/testing/server/ServerRule.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.linecorp.armeria.testing.server;
 
-import static com.linecorp.armeria.common.http.HttpSessionProtocols.HTTP;
-import static com.linecorp.armeria.common.http.HttpSessionProtocols.HTTPS;
+import static com.linecorp.armeria.common.SessionProtocol.HTTP;
+import static com.linecorp.armeria.common.SessionProtocol.HTTPS;
 import static java.util.Objects.requireNonNull;
 
 import java.net.InetSocketAddress;

File: thrift/src/main/java/com/linecorp/armeria/client/thrift/THttpClientFactory.java
Patch:
@@ -39,7 +39,6 @@
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.http.HttpRequest;
 import com.linecorp.armeria.common.http.HttpResponse;
-import com.linecorp.armeria.common.http.HttpSessionProtocols;
 import com.linecorp.armeria.common.thrift.ThriftSerializationFormats;
 
 /**
@@ -51,7 +50,7 @@ public class THttpClientFactory extends DecoratingClientFactory {
 
     static {
         final ImmutableSet.Builder<Scheme> builder = ImmutableSet.builder();
-        for (SessionProtocol p : HttpSessionProtocols.values()) {
+        for (SessionProtocol p : SessionProtocol.values()) {
             for (SerializationFormat f : ThriftSerializationFormats.values()) {
                 builder.add(Scheme.of(f, p));
             }
@@ -72,7 +71,7 @@ public THttpClientFactory(ClientFactory httpClientFactory) {
     private static ClientFactory validate(ClientFactory httpClientFactory) {
         requireNonNull(httpClientFactory, "httpClientFactory");
 
-        for (SessionProtocol p : HttpSessionProtocols.values()) {
+        for (SessionProtocol p : SessionProtocol.values()) {
             if (!httpClientFactory.supportedSchemes().contains(Scheme.of(SerializationFormat.NONE, p))) {
                 throw new IllegalArgumentException(p.uriText() + " not supported by: " + httpClientFactory);
             }

File: thrift/src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTServletIntegrationTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package com.linecorp.armeria.client.thrift;
 
-import static com.linecorp.armeria.common.http.HttpSessionProtocols.H1C;
-import static com.linecorp.armeria.common.http.HttpSessionProtocols.H2C;
-import static com.linecorp.armeria.common.http.HttpSessionProtocols.HTTP;
+import static com.linecorp.armeria.common.SessionProtocol.H1C;
+import static com.linecorp.armeria.common.SessionProtocol.H2C;
+import static com.linecorp.armeria.common.SessionProtocol.HTTP;
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;

File: thrift/src/test/java/com/linecorp/armeria/it/metric/PrometheusMetricsIntegrationTest.java
Patch:
@@ -250,7 +250,7 @@ private static AggregatedHttpMessage makeMetricsRequest() throws ExecutionExcept
 
     private static SortedMap<MyMetricLabel, String> defaultMetricName(RequestLog log, String serviceName) {
         final RequestContext ctx = log.context();
-        final Object requestEnvelope = log.requestEnvelope();
+        final Object requestEnvelope = log.requestHeaders();
         final Object requestContent = log.requestContent();
 
         final String path;

File: thrift/src/test/java/com/linecorp/armeria/it/thrift/ThriftStructuredLoggingTest.java
Patch:
@@ -72,7 +72,7 @@ protected void close() {
         }
     }
 
-    private static MockedStructuredLoggingService<? super HttpRequest, ? extends HttpResponse> loggingService;
+    private static MockedStructuredLoggingService<HttpRequest, HttpResponse> loggingService;
 
     @ClassRule
     public static final ServerRule server = new ServerRule() {

File: zipkin/src/main/java/com/linecorp/armeria/client/tracing/AbstractTracingClient.java
Patch:
@@ -58,7 +58,7 @@ public abstract class AbstractTracingClient<I extends Request, O extends Respons
     /**
      * Creates a new instance.
      */
-    protected AbstractTracingClient(Client<? super I, ? extends O> delegate, Brave brave) {
+    protected AbstractTracingClient(Client<I, O> delegate, Brave brave) {
         super(delegate);
         clientInterceptor = new ClientTracingInterceptor(brave);
     }

File: zipkin/src/main/java/com/linecorp/armeria/server/tracing/AbstractTracingService.java
Patch:
@@ -55,7 +55,7 @@ public abstract class AbstractTracingService<I extends Request, O extends Respon
     /**
      * Creates a new instance.
      */
-    protected AbstractTracingService(Service<? super I, ? extends O> delegate, Brave brave) {
+    protected AbstractTracingService(Service<I, O> delegate, Brave brave) {
         super(delegate);
         serverInterceptor = new ServerTracingInterceptor(brave);
     }

File: zipkin/src/test/java/com/linecorp/armeria/client/tracing/HttpTracingClientTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.client.tracing;
 
-import static com.linecorp.armeria.common.http.HttpSessionProtocols.H2C;
+import static com.linecorp.armeria.common.SessionProtocol.H2C;
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.mock;

File: zipkin/src/test/java/com/linecorp/armeria/client/tracing/TracingClientTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.client.tracing;
 
-import static com.linecorp.armeria.common.http.HttpSessionProtocols.H2C;
+import static com.linecorp.armeria.common.SessionProtocol.H2C;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
@@ -108,7 +108,7 @@ private static SpanCollectingReporter testRemoteInvocationWithSamplingRate(
                 new DefaultEventLoop(), H2C, Endpoint.of("localhost", 8080),
                 HttpMethod.POST, "/", null, null, ClientOptions.DEFAULT, req);
 
-        ctx.logBuilder().startRequest(mock(Channel.class), H2C, "localhost", HttpMethod.POST, "/", null);
+        ctx.logBuilder().startRequest(mock(Channel.class), H2C, "localhost");
         ctx.logBuilder().endRequest();
 
         @SuppressWarnings("unchecked")

File: zipkin/src/test/java/com/linecorp/armeria/server/tracing/TracingServiceTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.server.tracing;
 
-import static com.linecorp.armeria.common.http.HttpSessionProtocols.H2C;
+import static com.linecorp.armeria.common.SessionProtocol.H2C;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.ArgumentMatchers.isA;
@@ -116,7 +116,7 @@ private static SpanCollectingReporter testServiceInvocation(boolean sampled) thr
         final ServiceRequestContext ctx = mock(ServiceRequestContext.class);
         final RpcRequest req = RpcRequest.of(HelloService.Iface.class, "hello", "trustin");
         final DefaultRequestLog log = new DefaultRequestLog(ctx);
-        log.startRequest(mock(Channel.class), H2C, "localhost", HttpMethod.POST, "/", null);
+        log.startRequest(mock(Channel.class), H2C, "localhost");
         log.endRequest();
 
         // AbstractTracingService prefers RpcRequest.method() to ctx.method(), so "POST" should be ignored.

File: zookeeper/src/test/java/com/linecorp/armeria/server/zookeeper/ZooKeeperRegistrationTest.java
Patch:
@@ -32,11 +32,11 @@
 
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.client.zookeeper.TestBase;
+import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.http.AggregatedHttpMessage;
 import com.linecorp.armeria.common.http.HttpHeaders;
 import com.linecorp.armeria.common.http.HttpRequest;
 import com.linecorp.armeria.common.http.HttpResponseWriter;
-import com.linecorp.armeria.common.http.HttpSessionProtocols;
 import com.linecorp.armeria.common.http.HttpStatus;
 import com.linecorp.armeria.common.util.CompletionActions;
 import com.linecorp.armeria.common.zookeeper.NodeValueCodec;
@@ -67,7 +67,7 @@ public void startServer() {
             for (Endpoint endpoint : sampleEndpoints) {
                 ServerBuilder sb = new ServerBuilder();
                 Server server = sb.service("/", new EchoService()).port(endpoint.port(),
-                                                                        HttpSessionProtocols.HTTP).build();
+                                                                        SessionProtocol.HTTP).build();
                 ZooKeeperUpdatingListener listener;
                 listener = new ZooKeeperUpdatingListener(instance().connectString().get(), zNode,
                                                          sessionTimeout,

File: core/src/main/java/com/linecorp/armeria/client/http/HttpClientPipelineConfigurator.java
Patch:
@@ -138,6 +138,7 @@ private enum HttpPreference {
 
                 builder.sslProvider(
                         Flags.useOpenSsl() ? SslProvider.OPENSSL : SslProvider.JDK);
+                options.sslContextCustomizer().ifPresent(c -> c.accept(builder));
                 options.trustManagerFactory().ifPresent(builder::trustManager);
 
                 if (httpPreference == HttpPreference.HTTP2_REQUIRED ||

File: core/src/test/java/com/linecorp/armeria/client/SessionOptionsTest.java
Patch:
@@ -18,7 +18,7 @@
 import static com.linecorp.armeria.client.SessionOption.CONNECT_TIMEOUT;
 import static com.linecorp.armeria.client.SessionOption.EVENT_LOOP_GROUP;
 import static com.linecorp.armeria.client.SessionOption.IDLE_TIMEOUT;
-import static com.linecorp.armeria.client.SessionOption.TRUST_MANAGER_FACTORY;
+import static com.linecorp.armeria.client.SessionOption.SSL_CONTEXT_CUSTOMIZER;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.notNullValue;
@@ -55,7 +55,7 @@ public void valueOverrideTest() {
                 CONNECT_TIMEOUT.newValue(connectionTimeout),
                 IDLE_TIMEOUT.newValue(idleTimeout),
                 EVENT_LOOP_GROUP.newValue(eventLoop),
-                TRUST_MANAGER_FACTORY.newValue(trustManagerFactory)
+                SSL_CONTEXT_CUSTOMIZER.newValue(b -> b.trustManager(trustManagerFactory))
         );
 
         assertThat(options.get(CONNECT_TIMEOUT),is(Optional.of(connectionTimeout)));

File: core/src/test/java/com/linecorp/armeria/client/http/HttpClientSniTest.java
Patch:
@@ -98,7 +98,8 @@ public static void init() throws Exception {
                           .filter(p -> p.protocol() == HTTPS).findAny().get().localAddress()
                           .getPort();
         clientFactory = new HttpClientFactory(SessionOptions.of(
-                SessionOption.TRUST_MANAGER_FACTORY.newValue(InsecureTrustManagerFactory.INSTANCE),
+                SessionOption.SSL_CONTEXT_CUSTOMIZER.newValue(
+                        b -> b.trustManager(InsecureTrustManagerFactory.INSTANCE)),
                 SessionOption.ADDRESS_RESOLVER_GROUP.newValue(new DummyAddressResolverGroup())));
     }
 

File: core/src/test/java/com/linecorp/armeria/server/http/HttpServerTest.java
Patch:
@@ -122,7 +122,8 @@ public class HttpServerTest {
     // TODO(trustin): Add SessionOption.NUM_WORKER_THREADS
     private static final ClientFactory clientFactory =
             new HttpClientFactory(SessionOptions.of(
-                    SessionOption.TRUST_MANAGER_FACTORY.newValue(InsecureTrustManagerFactory.INSTANCE),
+                    SessionOption.SSL_CONTEXT_CUSTOMIZER.newValue(
+                            b -> b.trustManager(InsecureTrustManagerFactory.INSTANCE)),
                     SessionOption.IDLE_TIMEOUT.newValue(Duration.ofSeconds(3)),
                     SessionOption.EVENT_LOOP_GROUP.newValue(
                             TransportType.detectTransportType().newEventLoopGroup(

File: testing/src/main/java/com/linecorp/armeria/testing/server/webapp/WebAppContainerTest.java
Patch:
@@ -149,7 +149,8 @@ public void japanesePath() throws Exception {
     public void https() throws Exception {
         ClientFactory clientFactory =
                 new HttpClientFactory(SessionOptions.of(
-                        SessionOption.TRUST_MANAGER_FACTORY.newValue(InsecureTrustManagerFactory.INSTANCE)));
+                        SessionOption.SSL_CONTEXT_CUSTOMIZER.newValue(
+                                b -> b.trustManager(InsecureTrustManagerFactory.INSTANCE))));
         HttpClient client = clientFactory.newClient(server().httpsUri(NONE, "/"), HttpClient.class);
         AggregatedHttpMessage response = client.get("/jsp/index.jsp").aggregate().get();
         final String actualContent = CR_OR_LF.matcher(response.content().toStringUtf8())

File: core/src/main/java/com/linecorp/armeria/server/http/HttpServerHandler.java
Patch:
@@ -281,7 +281,7 @@ private void handleRequest(ChannelHandlerContext ctx, DecodedHttpRequest req) th
         final Channel channel = ctx.channel();
         final DefaultServiceRequestContext reqCtx = new DefaultServiceRequestContext(
                 serviceCfg, channel, protocol, req.method(),
-                mappingResult, req, getSSLSession(channel));
+                path, mappingResult, req, getSSLSession(channel));
 
         try (SafeCloseable ignored = RequestContext.push(reqCtx)) {
             final RequestLogBuilder logBuilder = reqCtx.logBuilder();

File: core/src/test/java/com/linecorp/armeria/server/AnnotatedHttpServiceTest.java
Patch:
@@ -301,7 +301,7 @@ public String exact(ServiceRequestContext ctx) {
         @Get
         @Path("prefix:/prefix")
         public String prefix(ServiceRequestContext ctx) {
-            return "prefix:" + ctx.path() + ':' + ctx.pathWithoutPrefix();
+            return "prefix:" + ctx.path() + ':' + ctx.mappedPath();
         }
 
         @Get

File: core/src/test/java/com/linecorp/armeria/server/composition/CompositeServiceTest.java
Patch:
@@ -132,7 +132,7 @@ private static final class TestService extends AbstractHttpService {
         @Override
         protected void doGet(ServiceRequestContext ctx, HttpRequest req, HttpResponseWriter res) {
             res.respond(HttpStatus.OK, MediaType.PLAIN_TEXT_UTF_8,
-                        "%s:%s:%s", name, ctx.path(), ctx.pathWithoutPrefix());
+                        "%s:%s:%s", name, ctx.path(), ctx.mappedPath());
         }
     }
 }

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcRequestUtil.java
Patch:
@@ -28,7 +28,7 @@ final class GrpcRequestUtil {
     @Nullable
     static String determineMethod(ServiceRequestContext ctx) {
         // Remove the leading slash of the path and get the fully qualified method name
-        String path = ctx.pathWithoutPrefix();
+        String path = ctx.mappedPath();
         if (path.charAt(0) != '/') {
             return null;
         }

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceTest.java
Patch:
@@ -90,7 +90,7 @@ public void badContentType() throws Exception {
 
     @Test
     public void pathMissingSlash() throws Exception {
-        when(ctx.pathWithoutPrefix()).thenReturn("grpc.testing.TestService.UnaryCall");
+        when(ctx.mappedPath()).thenReturn("grpc.testing.TestService.UnaryCall");
         grpcService.doPost(
                 ctx,
                 HttpRequest.of(HttpHeaders.of(HttpMethod.POST, "grpc.testing.TestService.UnaryCall")
@@ -104,7 +104,7 @@ public void pathMissingSlash() throws Exception {
 
     @Test
     public void missingMethod() throws Exception {
-        when(ctx.pathWithoutPrefix()).thenReturn("/grpc.testing.TestService/FooCall");
+        when(ctx.mappedPath()).thenReturn("/grpc.testing.TestService/FooCall");
         grpcService.doPost(
                 ctx,
                 HttpRequest.of(HttpHeaders.of(HttpMethod.POST, "/grpc.testing.TestService/FooCall")

File: jetty/src/main/java/com/linecorp/armeria/server/http/jetty/JettyService.java
Patch:
@@ -322,7 +322,7 @@ private static MetaData.Request toRequestMetadata(ServiceRequestContext ctx, Agg
         uriBuf.append(aHeaders.path());
 
         final HttpURI uri = new HttpURI(uriBuf.toString());
-        uri.setPath(ctx.pathWithoutPrefix());
+        uri.setPath(ctx.mappedPath());
 
         // Convert HttpHeaders to HttpFields
         final HttpFields jHeaders = new HttpFields(aHeaders.size());

File: logback/src/test/java/com/linecorp/armeria/common/logback/RequestContextExportingAppenderTest.java
Patch:
@@ -416,6 +416,7 @@ private static ServiceRequestContext newServiceContext(String path, String query
         final ServiceRequestContext ctx = new DefaultServiceRequestContext(
                 serviceConfig,
                 ch, HttpSessionProtocols.H2, req.method(),
+                path,
                 PathMappingResult.of(path, query, ImmutableMap.of()),
                 req, newSslSession());
 

File: tomcat/src/main/java/com/linecorp/armeria/server/http/tomcat/TomcatService.java
Patch:
@@ -411,7 +411,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
 
     @Nullable
     private Request convertRequest(ServiceRequestContext ctx, AggregatedHttpMessage req) {
-        final String mappedPath = ctx.pathWithoutPrefix();
+        final String mappedPath = ctx.mappedPath();
         final Request coyoteReq = new Request();
 
         coyoteReq.scheme().setString(req.scheme());

File: core/src/main/java/com/linecorp/armeria/server/AbstractVirtualHostBuilder.java
Patch:
@@ -42,7 +42,7 @@
 import com.linecorp.armeria.common.http.HttpResponse;
 import com.linecorp.armeria.common.http.HttpSessionProtocols;
 import com.linecorp.armeria.common.util.NativeLibraries;
-import com.linecorp.armeria.server.http.dynamic.ResponseConverter;
+import com.linecorp.armeria.server.http.annotation.ResponseConverter;
 
 import io.netty.handler.codec.http2.Http2SecurityUtil;
 import io.netty.handler.ssl.ApplicationProtocolConfig;

File: core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java
Patch:
@@ -43,7 +43,7 @@
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.http.HttpRequest;
 import com.linecorp.armeria.common.http.HttpResponse;
-import com.linecorp.armeria.server.http.dynamic.ResponseConverter;
+import com.linecorp.armeria.server.http.annotation.ResponseConverter;
 
 import io.netty.handler.ssl.SslContext;
 import io.netty.util.concurrent.DefaultThreadFactory;

File: core/src/main/java/com/linecorp/armeria/server/http/annotation/Converter.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.server.http.dynamic;
+package com.linecorp.armeria.server.http.annotation;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Repeatable;

File: core/src/main/java/com/linecorp/armeria/server/http/annotation/Converters.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.server.http.dynamic;
+package com.linecorp.armeria.server.http.annotation;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: core/src/main/java/com/linecorp/armeria/server/http/annotation/Path.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.server.http.dynamic;
+package com.linecorp.armeria.server.http.annotation;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -29,7 +29,7 @@
 public @interface Path {
 
     /**
-     * Template of dynamic url.
+     * A path pattern for the annotated method.
      */
     String value();
 }

File: core/src/main/java/com/linecorp/armeria/server/http/annotation/ResponseConverter.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.server.http.dynamic;
+package com.linecorp.armeria.server.http.annotation;
 
 import com.linecorp.armeria.common.http.HttpResponse;
 

File: core/src/main/java/com/linecorp/armeria/server/http/annotation/package-info.java
Patch:
@@ -17,4 +17,4 @@
 /**
  * Dynamic HTTP service.
  */
-package com.linecorp.armeria.server.http.dynamic;
+package com.linecorp.armeria.server.http.annotation;

File: core/src/test/java/com/linecorp/armeria/server/TestConverters.java
Patch:
@@ -22,7 +22,7 @@
 import com.linecorp.armeria.common.http.HttpHeaders;
 import com.linecorp.armeria.common.http.HttpResponse;
 import com.linecorp.armeria.common.http.HttpStatus;
-import com.linecorp.armeria.server.http.dynamic.ResponseConverter;
+import com.linecorp.armeria.server.http.annotation.ResponseConverter;
 
 final class TestConverters {
 

File: core/src/main/java/com/linecorp/armeria/server/http/healthcheck/HttpHealthCheckService.java
Patch:
@@ -47,7 +47,7 @@
  * <pre>{@code
  * Server server = new ServerBuilder()
  *         .defaultVirtualHost(new VirtualHostBuilder()
- *                 .service("/rpc", new ThriftService(myHandler))
+ *                 .service("/rpc", new THttpService(myHandler))
  *                 .service("/health", new HttpHealthCheckService())
  *                 .build())
  *         .build();
@@ -62,7 +62,7 @@
  * SettableHealthChecker healthChecker = new SettableHealthChecker();
  * Server server = new ServerBuilder()
  *         .defaultVirtualHost(new VirtualHostBuilder()
- *                 .service("/rpc", new ThriftService(myHandler))
+ *                 .service("/rpc", new THttpService(myHandler))
  *                 .service("/health", new HttpHealthCheckService(healthChecker))
  *                 .build())
  *         .build();

File: core/src/main/java/com/linecorp/armeria/server/metric/DropwizardMetricCollectingService.java
Patch:
@@ -43,7 +43,7 @@
  * MetricRegistry metricRegistry = new MetricRegistry();
  * serverBuilder.service(
  *         "/service",
- *         ThriftService.of(handler).decorate(
+ *         THttpService.of(handler).decorate(
  *                 DropwizardMetricCollectingService.newDecorator(metricRegistry, "services")));
  * }
  * </pre>

File: core/src/main/java/com/linecorp/armeria/client/AbstractClientOptionsBuilder.java
Patch:
@@ -172,8 +172,7 @@ public B defaultMaxResponseLength(long defaultMaxResponseLength) {
      * @param <I> the {@link Request} type of the {@link Client} being decorated
      * @param <O> the {@link Response} type of the {@link Client} being decorated
      */
-    public <T extends Client<? super I, ? extends O>, R extends Client<I, O>,
-            I extends Request, O extends Response>
+    public <T extends Client<I, O>, R extends Client<I, O>, I extends Request, O extends Response>
     B decorator(Class<I> requestType, Class<O> responseType, Function<T, R> decorator) {
         decoration.add(requestType, responseType, decorator);
         return self();

File: core/src/main/java/com/linecorp/armeria/client/ClientDecoration.java
Patch:
@@ -42,8 +42,7 @@ public final class ClientDecoration {
      * @param <T> the type of the {@link Client} being decorated
      * @param <R> the type of the {@link Client} produced by the {@code decorator}
      */
-    public static <T extends Client<? super I, ? extends O>, R extends Client<I, O>,
-                   I extends Request, O extends Response>
+    public static <T extends Client<I, O>, R extends Client<I, O>, I extends Request, O extends Response>
     ClientDecoration of(Class<I> requestType, Class<O> responseType, Function<T, R> decorator) {
         return new ClientDecorationBuilder().add(requestType, responseType, decorator).build();
     }

File: core/src/main/java/com/linecorp/armeria/client/metric/DropwizardMetricCollectingClient.java
Patch:
@@ -64,7 +64,7 @@ public final class DropwizardMetricCollectingClient<I extends Request, O extends
      * @param metricNameFunc the function that transforms a {@link RequestLog} into a metric name
      */
     public static <I extends Request, O extends Response>
-    Function<Client<? super I, ? extends O>, DropwizardMetricCollectingClient<I, O>> newDecorator(
+    Function<Client<I, O>, DropwizardMetricCollectingClient<I, O>> newDecorator(
             MetricRegistry metricRegistry,
             Function<? super RequestLog, String> metricNameFunc) {
 
@@ -81,7 +81,7 @@ public final class DropwizardMetricCollectingClient<I extends Request, O extends
      * @param metricNamePrefix the prefix of the names of the metrics created by the returned decorator.
      */
     public static <I extends Request, O extends Response>
-    Function<Client<? super I, ? extends O>, DropwizardMetricCollectingClient<I, O>> newDecorator(
+    Function<Client<I, O>, DropwizardMetricCollectingClient<I, O>> newDecorator(
             MetricRegistry metricRegistry, String metricNamePrefix) {
 
         requireNonNull(metricNamePrefix, "metricNamePrefix");

File: core/src/main/java/com/linecorp/armeria/client/metric/PrometheusMetricCollectingClient.java
Patch:
@@ -51,7 +51,7 @@ public final class PrometheusMetricCollectingClient<T extends MetricLabel<T>,
      * @return A client decorator function
      */
     public static <T extends MetricLabel<T>, I extends Request, O extends Response>
-    Function<Client<? super I, ? extends O>, PrometheusMetricCollectingClient<T, I, O>>
+    Function<Client<I, O>, PrometheusMetricCollectingClient<T, I, O>>
     newDecorator(CollectorRegistry collectorRegistry,
                  T[] metricLabels,
                  Function<RequestLog, Map<T, String>> labelingFunction) {
@@ -73,7 +73,7 @@ public final class PrometheusMetricCollectingClient<T extends MetricLabel<T>,
      * @return A client decorator function
      */
     public static <T extends MetricLabel<T>, I extends Request, O extends Response>
-    Function<Client<? super I, ? extends O>, PrometheusMetricCollectingClient<T, I, O>>
+    Function<Client<I, O>, PrometheusMetricCollectingClient<T, I, O>>
     newDecorator(CollectorRegistry collectorRegistry,
                  Iterable<T> metricLabels,
                  Function<RequestLog, Map<T, String>> labelingFunction) {

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java
Patch:
@@ -39,7 +39,7 @@ public class RetryingRpcClient extends RetryingClient<RpcRequest, RpcResponse> {
     /**
      * Creates a new {@link Client} decorator that handles failures of an invocation and retries RPC requests.
      */
-    public static Function<Client<? super RpcRequest, ? extends RpcResponse>, RetryingRpcClient>
+    public static Function<Client<RpcRequest, RpcResponse>, RetryingRpcClient>
     newDecorator(RetryRequestStrategy<RpcRequest, RpcResponse> retryRequestStrategy) {
         return delegate -> new RetryingRpcClient(delegate, retryRequestStrategy,
                                                  Backoff::withoutDelay);
@@ -48,7 +48,7 @@ public class RetryingRpcClient extends RetryingClient<RpcRequest, RpcResponse> {
     /**
      * Creates a new {@link Client} decorator that handles failures of an invocation and retries RPC requests.
      */
-    public static Function<Client<? super RpcRequest, ? extends RpcResponse>, RetryingRpcClient>
+    public static Function<Client<RpcRequest, RpcResponse>, RetryingRpcClient>
     newDecorator(RetryRequestStrategy<RpcRequest, RpcResponse> retryRequestStrategy,
                  Supplier<? extends Backoff> backoffSupplier) {
         return delegate -> new RetryingRpcClient(delegate, retryRequestStrategy, backoffSupplier);
@@ -57,7 +57,7 @@ public class RetryingRpcClient extends RetryingClient<RpcRequest, RpcResponse> {
     /**
      * Creates a new instance that decorates the specified {@link Client}.
      */
-    public RetryingRpcClient(Client<? super RpcRequest, ? extends RpcResponse> delegate,
+    public RetryingRpcClient(Client<RpcRequest, RpcResponse> delegate,
                              RetryRequestStrategy<RpcRequest, RpcResponse> retryStrategy,
                              Supplier<? extends Backoff> backoffSupplier) {
         super(delegate, retryStrategy, backoffSupplier);

File: core/src/main/java/com/linecorp/armeria/common/Response.java
Patch:
@@ -19,11 +19,12 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
 
+import com.linecorp.armeria.common.http.HttpResponse;
 import com.linecorp.armeria.common.stream.StreamMessage;
 
 /**
  * A response stream or a holder of the future result value.
- * It must implement {@link StreamMessage} or {@link CompletionStage}, but not both.
+ * It has to be a {@link HttpResponse} or a {@link RpcResponse}.
  */
 public interface Response {
 

File: core/src/main/java/com/linecorp/armeria/server/http/auth/HttpAuthServiceImpl.java
Patch:
@@ -40,14 +40,14 @@ final class HttpAuthServiceImpl extends HttpAuthService {
 
     private final List<? extends Authorizer<HttpRequest>> authorizers;
 
-    HttpAuthServiceImpl(Service<? super HttpRequest, ? extends HttpResponse> delegate,
+    HttpAuthServiceImpl(Service<HttpRequest, HttpResponse> delegate,
                         Iterable<? extends Authorizer<HttpRequest>> authorizers) {
         super(delegate);
         this.authorizers = ImmutableList.copyOf(authorizers);
     }
 
     @Override
-    public CompletionStage<Boolean> authorize(HttpRequest req, ServiceRequestContext ctx) {
+    protected CompletionStage<Boolean> authorize(HttpRequest req, ServiceRequestContext ctx) {
         CompletableFuture<Boolean> result = CompletableFuture.completedFuture(false);
         for (Authorizer<HttpRequest> authorizer : authorizers) {
             result = result.exceptionally(t -> {

File: core/src/main/java/com/linecorp/armeria/server/metric/DropwizardMetricCollectingService.java
Patch:
@@ -65,7 +65,7 @@ public final class DropwizardMetricCollectingService<I extends Request, O extend
      * @param metricNameFunc the function that transforms a {@link RequestLog} into a metric name
      */
     public static <I extends Request, O extends Response>
-    Function<Service<? super I, ? extends O>, DropwizardMetricCollectingService<I, O>> newDecorator(
+    Function<Service<I, O>, DropwizardMetricCollectingService<I, O>> newDecorator(
             MetricRegistry metricRegistry,
             Function<? super RequestLog, String> metricNameFunc) {
 
@@ -84,7 +84,7 @@ public final class DropwizardMetricCollectingService<I extends Request, O extend
      * @param metricNamePrefix the prefix of the names of the metrics created by the returned decorator.
      */
     public static <I extends Request, O extends Response>
-    Function<Service<? super I, ? extends O>, DropwizardMetricCollectingService<I, O>> newDecorator(
+    Function<Service<I, O>, DropwizardMetricCollectingService<I, O>> newDecorator(
             MetricRegistry metricRegistry, String metricNamePrefix) {
 
         requireNonNull(metricNamePrefix, "metricNamePrefix");

File: core/src/main/java/com/linecorp/armeria/server/metric/PrometheusMetricCollectingService.java
Patch:
@@ -51,7 +51,7 @@ public final class PrometheusMetricCollectingService
      * @return A service decorator function
      */
     public static <T extends MetricLabel<T>, I extends Request, O extends Response>
-    Function<Service<? super I, ? extends O>, PrometheusMetricCollectingService<T, I, O>>
+    Function<Service<I, O>, PrometheusMetricCollectingService<T, I, O>>
     newDecorator(CollectorRegistry collectorRegistry,
                  T[] metricLabels,
                  Function<RequestLog, Map<T, String>> labelingFunction) {
@@ -72,7 +72,7 @@ public final class PrometheusMetricCollectingService
      * @return A service decorator function
      */
     public static <T extends MetricLabel<T>, I extends Request, O extends Response>
-    Function<Service<? super I, ? extends O>, PrometheusMetricCollectingService<T, I, O>>
+    Function<Service<I, O>, PrometheusMetricCollectingService<T, I, O>>
     newDecorator(CollectorRegistry collectorRegistry,
                  Iterable<T> metricLabels,
                  Function<RequestLog, Map<T, String>> labelingFunction) {

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClientTest.java
Patch:
@@ -365,7 +365,7 @@ public void testExceptionFilter() throws Exception {
         assertThat(future1.cause(), is(not(instanceOf(FailFastException.class))));
     }
 
-    private static void invoke(Function<Client<? super RpcRequest, ? extends RpcResponse>,
+    private static void invoke(Function<Client<RpcRequest, RpcResponse>,
                                         ? extends Client<RpcRequest, RpcResponse>> decorator) throws Exception {
 
         @SuppressWarnings("unchecked")
@@ -377,7 +377,7 @@ private static void invoke(Function<Client<? super RpcRequest, ? extends RpcResp
 
     private static void failFastInvocation(
             CircuitBreaker circuitBreaker,
-            Function<Client<? super RpcRequest, ? extends RpcResponse>,
+            Function<Client<RpcRequest, RpcResponse>,
                      ? extends Client<RpcRequest, RpcResponse>> decorator, int count) throws Exception {
 
         for (int i = 0; i < count; i++) {

File: zipkin/src/main/java/com/linecorp/armeria/client/tracing/HttpTracingClient.java
Patch:
@@ -48,12 +48,11 @@ public class HttpTracingClient extends AbstractTracingClient<HttpRequest, HttpRe
     /**
      * Creates a new tracing {@link Client} decorator using the specified {@link Brave} instance.
      */
-    public static Function<Client<? super HttpRequest, ? extends HttpResponse>, HttpTracingClient>
-    newDecorator(Brave brave) {
+    public static Function<Client<HttpRequest, HttpResponse>, HttpTracingClient> newDecorator(Brave brave) {
         return delegate -> new HttpTracingClient(delegate, brave);
     }
 
-    HttpTracingClient(Client<? super HttpRequest, ? extends HttpResponse> delegate, Brave brave) {
+    HttpTracingClient(Client<HttpRequest, HttpResponse> delegate, Brave brave) {
         super(delegate, brave);
     }
 

File: zipkin/src/main/java/com/linecorp/armeria/server/tracing/HttpTracingService.java
Patch:
@@ -46,12 +46,11 @@ public class HttpTracingService extends AbstractTracingService<HttpRequest, Http
     /**
      * Creates a new tracing {@link Service} decorator using the specified {@link Brave} instance.
      */
-    public static Function<Service<? super HttpRequest, ? extends HttpResponse>,
-                           HttpTracingService> newDecorator(Brave brave) {
+    public static Function<Service<HttpRequest, HttpResponse>, HttpTracingService> newDecorator(Brave brave) {
         return service -> new HttpTracingService(service, brave);
     }
 
-    HttpTracingService(Service<? super HttpRequest, ? extends HttpResponse> delegate, Brave brave) {
+    HttpTracingService(Service<HttpRequest, HttpResponse> delegate, Brave brave) {
         super(delegate, brave);
     }
 

File: core/src/main/java/com/linecorp/armeria/server/http/HttpResponseSubscriber.java
Patch:
@@ -49,6 +49,7 @@
 import io.netty.channel.ChannelFutureListener;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.http2.Http2Error;
+import io.netty.util.ReferenceCountUtil;
 
 final class HttpResponseSubscriber implements Subscriber<HttpObject>, RequestTimeoutChangeListener,
                                               ChannelFutureListener {
@@ -208,6 +209,7 @@ public void onNext(HttpObject o) {
                 break;
             }
             case DONE:
+                ReferenceCountUtil.safeRelease(o);
                 return;
         }
 

File: core/src/main/java/com/linecorp/armeria/common/http/HttpMessageAggregator.java
Patch:
@@ -24,7 +24,7 @@
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 
-import com.linecorp.armeria.internal.http.ByteBufHttpData;
+import io.netty.util.ReferenceCountUtil;
 
 abstract class HttpMessageAggregator implements Subscriber<HttpObject>, BiConsumer<Void, Throwable> {
 
@@ -89,8 +89,8 @@ private void onData(HttpData data) {
                 added = true;
             }
         } finally {
-            if (!added && data instanceof ByteBufHttpData) {
-                ((ByteBufHttpData) data).buf().release();
+            if (!added) {
+                ReferenceCountUtil.safeRelease(data);
             }
         }
     }

File: core/src/main/java/com/linecorp/armeria/common/stream/PublisherBasedStreamMessage.java
Patch:
@@ -80,7 +80,7 @@ public void subscribe(Subscriber<? super T> subscriber) {
     @Override
     public void subscribe(Subscriber<? super T> subscriber, boolean withPooledObjects) {
         requireNonNull(subscriber, "subscriber");
-        subscribe0(subscriber, null, withPooledObjects);
+        subscribe0(subscriber, null);
     }
 
     @Override
@@ -92,10 +92,10 @@ public void subscribe(Subscriber<? super T> subscriber, Executor executor) {
     public void subscribe(Subscriber<? super T> subscriber, Executor executor, boolean withPooledObjects) {
         requireNonNull(subscriber, "subscriber");
         requireNonNull(executor, "executor");
-        subscribe0(subscriber, executor, withPooledObjects);
+        subscribe0(subscriber, executor);
     }
 
-    private void subscribe0(Subscriber<? super T> subscriber, Executor executor, boolean withPooledObjects) {
+    private void subscribe0(Subscriber<? super T> subscriber, Executor executor) {
         final SubscriberWrapper s = new SubscriberWrapper(this, subscriber, executor);
         if (!subscriberUpdater.compareAndSet(this, null, s)) {
             if (this.subscriber == ABORTED_SUBSCRIBER) {

File: core/src/main/java/com/linecorp/armeria/internal/http/Http2ObjectEncoder.java
Patch:
@@ -27,6 +27,7 @@
 import io.netty.handler.codec.http2.Http2ConnectionEncoder;
 import io.netty.handler.codec.http2.Http2Error;
 import io.netty.handler.codec.http2.Http2Stream;
+import io.netty.util.ReferenceCountUtil;
 
 public final class Http2ObjectEncoder extends HttpObjectEncoder {
 
@@ -55,6 +56,7 @@ protected ChannelFuture doWriteData(
 
         final ChannelFuture future = validateStream(ctx, streamId);
         if (future != null) {
+            ReferenceCountUtil.safeRelease(data);
             return future;
         }
 

File: core/src/test/java/com/linecorp/armeria/server/PathMappingTest.java
Patch:
@@ -56,7 +56,7 @@ public void successfulOf() {
 
         m = PathMapping.of("glob:/home/*/files/**");
         assertThat(m).isInstanceOf(GlobPathMapping.class);
-        assertThat(((GlobPathMapping) m).asRegex().pattern()).isEqualTo("^/home/[^/]+/files/.*$");
+        assertThat(((GlobPathMapping) m).asRegex().pattern()).isEqualTo("^/home/([^/]+)/files/(.*)$");
 
         m = PathMapping.of("glob:foo");
         assertThat(m).isInstanceOf(GlobPathMapping.class);

File: core/src/main/java/com/linecorp/armeria/server/PathMappings.java
Patch:
@@ -101,9 +101,9 @@ public PathMappings<T> freeze() {
     public PathMapped<T> apply(String path, @Nullable String query) {
         freeze();
 
-        // Look up the cache if the cache is available.
+        // Look up the cache if the cache is available and query string does not exist.
         final Map<String, PathMapped<T>> cache =
-                threadLocalCache != null ? threadLocalCache.get() : null;
+                query == null && threadLocalCache != null ? threadLocalCache.get() : null;
 
         if (cache != null) {
             final PathMapped<T> value = cache.get(path);

File: core/src/main/java/com/linecorp/armeria/server/VirtualHostBuilder.java
Patch:
@@ -21,7 +21,7 @@
  * <h2>Example</h2>
  * <pre>{@code
  * VirtualHostBuilder vhb = new VirtualHostBuilder("*.example.com");
- * vhb.serviceAt("/foo", new FooService())
+ * vhb.service("/foo", new FooService())
  *    .serviceUnder("/bar/", new BarService())
  *    .service(PathMapping.ofRegex("^/baz/.*", new BazService());
  *

File: core/src/main/java/com/linecorp/armeria/server/metric/DropwizardMetricCollectingService.java
Patch:
@@ -41,7 +41,7 @@
  * <p>Example:
  * <pre>{@code
  * MetricRegistry metricRegistry = new MetricRegistry();
- * serverBuilder.serviceAt(
+ * serverBuilder.service(
  *         "/service",
  *         ThriftService.of(handler).decorate(
  *                 DropwizardMetricCollectingService.newDecorator(metricRegistry, "services")));

File: core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/HttpHealthCheckedEndpointGroupTest.java
Patch:
@@ -43,7 +43,7 @@ protected HealthCheckServerRule() {
 
         @Override
         protected void configure(ServerBuilder sb) throws Exception {
-            sb.serviceAt(HEALTH_CHECK_PATH, new HttpHealthCheckService());
+            sb.service(HEALTH_CHECK_PATH, new HttpHealthCheckService());
         }
     }
 

File: core/src/test/java/com/linecorp/armeria/client/http/HttpClientPipeliningTest.java
Patch:
@@ -63,7 +63,7 @@ public class HttpClientPipeliningTest {
         protected void configure(ServerBuilder sb) throws Exception {
             // Bind a service that returns the remote address of the connection to determine
             // if the same connection was used to handle more than one request.
-            sb.serviceAt("/", new AbstractHttpService() {
+            sb.service("/", new AbstractHttpService() {
                 @Override
                 protected void doGet(ServiceRequestContext ctx,
                                      HttpRequest req, HttpResponseWriter res) throws Exception {

File: core/src/test/java/com/linecorp/armeria/client/http/HttpClientSniTest.java
Patch:
@@ -77,8 +77,8 @@ public class HttpClientSniTest {
             final VirtualHostBuilder a = new VirtualHostBuilder("a.com");
             final VirtualHostBuilder b = new VirtualHostBuilder("b.com");
 
-            a.serviceAt("/", new SniTestService("a.com"));
-            b.serviceAt("/", new SniTestService("b.com"));
+            a.service("/", new SniTestService("a.com"));
+            b.service("/", new SniTestService("b.com"));
 
             a.sslContext(HTTPS, sscA.certificate(), sscA.privateKey());
             b.sslContext(HTTPS, sscB.certificate(), sscB.privateKey());

File: core/src/test/java/com/linecorp/armeria/server/SniServerTest.java
Patch:
@@ -73,9 +73,9 @@ protected void configure(ServerBuilder sb) throws Exception {
             final VirtualHostBuilder b = new VirtualHostBuilder("b.com");
             final VirtualHostBuilder c = new VirtualHostBuilder("c.com");
 
-            a.serviceAt("/", new SniTestService("a.com"));
-            b.serviceAt("/", new SniTestService("b.com"));
-            c.serviceAt("/", new SniTestService("c.com"));
+            a.service("/", new SniTestService("a.com"));
+            b.service("/", new SniTestService("b.com"));
+            c.service("/", new SniTestService("c.com"));
 
             a.sslContext(HTTPS, sscA.certificateFile(), sscA.privateKeyFile());
             b.sslContext(HTTPS, sscB.certificateFile(), sscB.privateKeyFile());

File: core/src/test/java/com/linecorp/armeria/server/http/HttpServerCorsTest.java
Patch:
@@ -47,7 +47,7 @@ public class HttpServerCorsTest {
     public static final ServerRule server = new ServerRule() {
         @Override
         protected void configure(ServerBuilder sb) throws Exception {
-            sb.serviceAt("/cors", new AbstractHttpService() {
+            sb.service("/cors", new AbstractHttpService() {
                 @Override
                 protected void doGet(ServiceRequestContext ctx, HttpRequest req, HttpResponseWriter res) {
                     res.respond(HttpStatus.OK);

File: core/src/test/java/com/linecorp/armeria/server/http/HttpServerPathTest.java
Patch:
@@ -46,7 +46,7 @@ public class HttpServerPathTest {
         @Override
         protected void configure(ServerBuilder sb) throws Exception {
             sb.port(0, HttpSessionProtocols.HTTP);
-            sb.serviceAt("/service/foo", new AbstractHttpService() {
+            sb.service("/service/foo", new AbstractHttpService() {
                 @Override
                 protected void doGet(ServiceRequestContext ctx, HttpRequest req, HttpResponseWriter res) {
                     res.respond(HttpStatus.OK);

File: core/src/test/java/com/linecorp/armeria/server/http/HttpServiceTest.java
Patch:
@@ -46,7 +46,7 @@ public class HttpServiceTest {
     public static final ServerRule rule = new ServerRule() {
         @Override
         protected void configure(ServerBuilder sb) throws Exception {
-            sb.serviceAt(
+            sb.service(
                     "/hello/{name}",
                     new AbstractHttpService() {
                         @Override
@@ -58,7 +58,7 @@ protected void doGet(
                         }
                     }.decorate(LoggingService.newDecorator()));
 
-            sb.serviceAt(
+            sb.service(
                     "/200",
                     new AbstractHttpService() {
                         @Override
@@ -76,7 +76,7 @@ protected void doGet(
                         }
                     }.decorate(LoggingService.newDecorator()));
 
-            sb.serviceAt(
+            sb.service(
                     "/204",
                     new AbstractHttpService() {
                         @Override

File: core/src/test/java/com/linecorp/armeria/server/http/healthcheck/HttpHealthCheckServiceTest.java
Patch:
@@ -119,7 +119,7 @@ private void assertNotOk() throws Exception {
     public void testGet() throws Exception {
         final ServerBuilder builder = new ServerBuilder();
         builder.port(0, HTTP);
-        builder.serviceAt("/l7check", new HttpHealthCheckService());
+        builder.service("/l7check", new HttpHealthCheckService());
         final Server server = builder.build();
         try {
             server.start().join();
@@ -144,7 +144,7 @@ public void testGet() throws Exception {
     public void testHead() throws Exception {
         final ServerBuilder builder = new ServerBuilder();
         builder.port(0, HTTP);
-        builder.serviceAt("/l7check", new HttpHealthCheckService());
+        builder.service("/l7check", new HttpHealthCheckService());
         final Server server = builder.build();
         try {
             server.start().join();

File: thrift/src/jmh/java/com/linecorp/armeria/server/thrift/PooledResponseBufferBenchmark.java
Patch:
@@ -144,12 +144,12 @@ public void onComplete() {
     @Setup
     public void startServer() throws Exception {
         ServerBuilder sb = new ServerBuilder()
-                .port(0, HttpSessionProtocols.HTTP)
-                .serviceAt("/a", THttpService.of(
+                .port(0, HTTP)
+                .service("/a", THttpService.of(
                         (AsyncIface) (name, resultHandler) ->
                                 resultHandler.onComplete(RESPONSE))
                                                   .decorate(PooledDecoratingService::new))
-                .serviceAt("/b", THttpService.of(
+                .service("/b", THttpService.of(
                         (AsyncIface) (name, resultHandler) ->
                                 resultHandler.onComplete(RESPONSE))
                                              .decorate(UnpooledDecoratingService::new));

File: thrift/src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTest.java
Patch:
@@ -199,7 +199,7 @@ String path(SerializationFormat serializationFormat) {
                     if (ENABLE_LOGGING_DECORATORS) {
                         service = service.decorate(LoggingService.newDecorator());
                     }
-                    sb.serviceAt(h.path(defaultSerializationFormat), service);
+                    sb.service(h.path(defaultSerializationFormat), service);
                 }
             }
         } catch (Exception e) {

File: thrift/src/test/java/com/linecorp/armeria/it/client/endpoint/StaticEndpointGroupIntegrationTest.java
Patch:
@@ -111,7 +111,7 @@ protected IpServerRule() {
 
         @Override
         protected void configure(ServerBuilder sb) throws Exception {
-            sb.serviceAt("/serverIp", THttpService.of(handler));
+            sb.service("/serverIp", THttpService.of(handler));
         }
     }
 }

File: thrift/src/test/java/com/linecorp/armeria/it/client/retry/RetryingRpcClientTest.java
Patch:
@@ -52,7 +52,7 @@ public class RetryingRpcClientTest {
     public final ServerRule server = new ServerRule() {
         @Override
         protected void configure(ServerBuilder sb) throws Exception {
-            sb.serviceAt("/thrift", THttpService.of(serviceHandler));
+            sb.service("/thrift", THttpService.of(serviceHandler));
         }
     };
 

File: thrift/src/test/java/com/linecorp/armeria/it/metric/DropwizardMetricsIntegrationTest.java
Patch:
@@ -48,7 +48,7 @@ public class DropwizardMetricsIntegrationTest {
     public static final ServerRule server = new ServerRule() {
         @Override
         protected void configure(ServerBuilder sb) throws Exception {
-            sb.serviceAt("/helloservice", THttpService.of((Iface) name -> {
+            sb.service("/helloservice", THttpService.of((Iface) name -> {
                 if ("world".equals(name)) {
                     return "success";
                 }

File: thrift/src/test/java/com/linecorp/armeria/it/metric/PrometheusMetricsIntegrationTest.java
Patch:
@@ -72,17 +72,17 @@ protected void configure(ServerBuilder sb) throws Exception {
                 throw new IllegalArgumentException("bad argument");
             });
 
-            sb.serviceAt("/thrift1", helloService.decorate(
+            sb.service("/thrift1", helloService.decorate(
                     PrometheusMetricCollectingService
                             .newDecorator(registry, MyMetricLabel.values(),
                                           log -> defaultMetricName(log, "HelloService1"))));
 
-            sb.serviceAt("/thrift2", helloService.decorate(
+            sb.service("/thrift2", helloService.decorate(
                     PrometheusMetricCollectingService
                             .newDecorator(registry, EnumSet.allOf(MyMetricLabel.class),
                                           log -> defaultMetricName(log, "HelloService2"))));
 
-            sb.serviceAt("/internal/prometheus/metrics",
+            sb.service("/internal/prometheus/metrics",
                          new PrometheusExporterHttpService(registry));
         }
     };

File: thrift/src/test/java/com/linecorp/armeria/it/server/GracefulShutdownIntegrationTest.java
Patch:
@@ -49,7 +49,7 @@ protected void configure(ServerBuilder sb) throws Exception {
             sb.gracefulShutdownTimeout(1000L, 2000L);
             sb.defaultRequestTimeoutMillis(0); // Disable RequestTimeoutException.
 
-            sb.serviceAt("/sleep", THttpService.of(
+            sb.service("/sleep", THttpService.of(
                     (AsyncIface) (milliseconds, resultHandler) ->
                             RequestContext.current().eventLoop().schedule(
                                     () -> resultHandler.onComplete(milliseconds), milliseconds, MILLISECONDS)));

File: thrift/src/test/java/com/linecorp/armeria/it/thrift/TMultiplexedProtocolIntegrationTest.java
Patch:
@@ -49,7 +49,7 @@ public class TMultiplexedProtocolIntegrationTest {
     public static final ServerRule server = new ServerRule() {
         @Override
         protected void configure(ServerBuilder sb) throws Exception {
-            sb.serviceAt(
+            sb.service(
                     "/",
                     THttpService.of(ImmutableMap.of("", (Iface) name -> "none:" + name,
                                                     "foo", name -> "foo:" + name,

File: thrift/src/test/java/com/linecorp/armeria/it/thrift/ThriftStructuredLoggingTest.java
Patch:
@@ -80,7 +80,7 @@ protected void close() {
         protected void configure(ServerBuilder sb) throws Exception {
             loggingService = new MockedStructuredLoggingService<>(
                     THttpService.of((HelloService.Iface) name -> "Hello " + name));
-            sb.serviceAt("/hello", loggingService);
+            sb.service("/hello", loggingService);
         }
     };
 

File: thrift/src/test/java/com/linecorp/armeria/it/thrift/ThriftThreadLocalHttpHeaderTest.java
Patch:
@@ -67,7 +67,7 @@ public class ThriftThreadLocalHttpHeaderTest {
     public static final ServerRule server = new ServerRule() {
         @Override
         protected void configure(ServerBuilder sb) throws Exception {
-            sb.serviceAt("/hello", THttpService.of(helloService));
+            sb.service("/hello", THttpService.of(helloService));
         }
     };
 

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftSerializationFormatsTest.java
Patch:
@@ -41,9 +41,9 @@ public class ThriftSerializationFormatsTest {
     public static final ServerRule server = new ServerRule() {
         @Override
         protected void configure(ServerBuilder sb) throws Exception {
-            sb.serviceAt("/hello", THttpService.of(HELLO_SERVICE))
-              .serviceAt("/hellobinaryonly", THttpService.ofFormats(HELLO_SERVICE, BINARY))
-              .serviceAt("/hellotextonly", THttpService.ofFormats(HELLO_SERVICE, TEXT));
+            sb.service("/hello", THttpService.of(HELLO_SERVICE))
+              .service("/hellobinaryonly", THttpService.ofFormats(HELLO_SERVICE, BINARY))
+              .service("/hellotextonly", THttpService.ofFormats(HELLO_SERVICE, TEXT));
         }
     };
 

File: zipkin/src/test/java/com/linecorp/armeria/it/tracing/HttpTracingIntegrationTest.java
Patch:
@@ -63,19 +63,19 @@ public class HttpTracingIntegrationTest {
     public final ServerRule server = new ServerRule() {
         @Override
         protected void configure(ServerBuilder sb) throws Exception {
-            sb.serviceAt("/foo", decorate("service/foo", THttpService.of(
+            sb.service("/foo", decorate("service/foo", THttpService.of(
                     (AsyncIface) (name, resultHandler) ->
                             barClient.hello("Miss. " + name, new DelegatingCallback(resultHandler)))));
 
-            sb.serviceAt("/bar", decorate("service/bar", THttpService.of(
+            sb.service("/bar", decorate("service/bar", THttpService.of(
                     (AsyncIface) (name, resultHandler) -> {
                         if (name.startsWith("Miss. ")) {
                             name = "Ms. " + name.substring(6);
                         }
                         quxClient.hello(name, new DelegatingCallback(resultHandler));
                     })));
 
-            sb.serviceAt("/qux", decorate("service/qux", THttpService.of(
+            sb.service("/qux", decorate("service/qux", THttpService.of(
                     (AsyncIface) (name, resultHandler) -> resultHandler.onComplete("Hello, " + name + '!'))));
         }
     };

File: zookeeper/src/test/java/com/linecorp/armeria/server/zookeeper/ZooKeeperRegistrationTest.java
Patch:
@@ -66,8 +66,8 @@ public void startServer() {
         try {
             for (Endpoint endpoint : sampleEndpoints) {
                 ServerBuilder sb = new ServerBuilder();
-                Server server = sb.serviceAt("/", new EchoService()).port(endpoint.port(),
-                                                                          HttpSessionProtocols.HTTP).build();
+                Server server = sb.service("/", new EchoService()).port(endpoint.port(),
+                                                                        HttpSessionProtocols.HTTP).build();
                 ZooKeeperUpdatingListener listener;
                 listener = new ZooKeeperUpdatingListener(instance().connectString().get(), zNode,
                                                          sessionTimeout,

File: core/src/main/java/com/linecorp/armeria/common/http/HttpResponseWriter.java
Patch:
@@ -32,6 +32,9 @@
 public interface HttpResponseWriter extends StreamWriter<HttpObject> {
     // TODO(trustin): Add lots of convenience methods for easier response construction.
 
+    // Note: Ensure we provide the same set of `respond()` methods with the `of()` methods of
+    //       HttpResponse for consistency.
+
     /**
      * Writes the HTTP response of the specified {@code statusCode} and closes the stream if the
      * {@link HttpStatusClass} is not {@linkplain HttpStatusClass#INFORMATIONAL informational} (1xx).

File: core/src/main/java/com/linecorp/armeria/server/http/cors/CorsService.java
Patch:
@@ -178,9 +178,7 @@ private void setCorsResponseHeaders(final HttpRequest req, HttpHeaders headers)
      * Return a "forbidden" response.
      */
     private static HttpResponse forbidden() {
-        final DefaultHttpResponse res = new DefaultHttpResponse();
-        res.respond(HttpStatus.FORBIDDEN);
-        return res;
+        return HttpResponse.of(HttpStatus.FORBIDDEN);
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/metric/PrometheusMetricCollectingService.java
Patch:
@@ -62,7 +62,7 @@ public final class PrometheusMetricCollectingService
     }
 
     /**
-     * Returns a new {@link Service} decorator that tracks request stats using the Prometheus metrics  library.
+     * Returns a new {@link Service} decorator that tracks request stats using the Prometheus metrics library.
      *
      * @param <I> Request type
      * @param <O> Response type

File: core/src/test/java/com/linecorp/armeria/server/TestConverters.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 LINE Corporation
+ * Copyright 2017 LINE Corporation
  *
  * LINE Corporation licenses this file to you under the Apache License,
  * version 2.0 (the "License"); you may not use this file except in compliance
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.server.http;
+package com.linecorp.armeria.server;
 
 import com.linecorp.armeria.common.http.DefaultHttpResponse;
 import com.linecorp.armeria.common.http.HttpData;

File: core/src/main/java/com/linecorp/armeria/common/http/HttpRequest.java
Patch:
@@ -41,7 +41,7 @@ static HttpRequest of(HttpHeaders headers, Publisher<? extends HttpObject> publi
     }
 
     /**
-     * Returns a new {@link HttpRequest} with empty content.
+     * Creates a new {@link HttpRequest} with empty content.
      */
     static HttpRequest of(HttpHeaders headers) {
         // TODO(trustin): Use no-op Queue implementation for QueueBasedPublisher?

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/UnframedGrpcService.java
Patch:
@@ -237,7 +237,9 @@ public void messageRead(ByteBufOrStream message) {
                         // We also know that we don't support compression, so this is always a ByteBuffer.
                         HttpData unframedContent = new ByteBufHttpData(message.buf(), true);
                         unframedHeaders.setInt(HttpHeaderNames.CONTENT_LENGTH, unframedContent.length());
-                        res.respond(AggregatedHttpMessage.of(unframedHeaders, unframedContent));
+                        res.write(unframedHeaders);
+                        res.write(unframedContent);
+                        res.close();
                     }
 
                     @Override

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClientTest.java
Patch:
@@ -49,6 +49,7 @@
 import com.linecorp.armeria.common.RpcResponse;
 import com.linecorp.armeria.common.http.HttpMethod;
 import com.linecorp.armeria.common.util.Exceptions;
+import com.linecorp.armeria.testing.common.AnticipatedException;
 
 import io.netty.channel.DefaultEventLoop;
 
@@ -152,7 +153,7 @@ public void testDelegateIfFailToGetCircuitBreaker() throws Exception {
         when(delegate.execute(any(), any())).thenReturn(successRes);
 
         CircuitBreakerMapping mapping = (ctx, req) -> {
-            throw Exceptions.clearTrace(new IllegalArgumentException("bug!"));
+            throw Exceptions.clearTrace(new AnticipatedException("bug!"));
         };
         CircuitBreakerClient<RpcRequest, RpcResponse> stub = new CircuitBreakerClient<>(delegate, mapping);
 

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/NonBlockingCircuitBreakerTest.java
Patch:
@@ -30,6 +30,7 @@
 import com.google.common.testing.FakeTicker;
 
 import com.linecorp.armeria.common.util.Exceptions;
+import com.linecorp.armeria.testing.common.AnticipatedException;
 
 public class NonBlockingCircuitBreakerTest {
 
@@ -192,7 +193,7 @@ public void testHalfOpenRetryRequest() {
     public void testFailureOfExceptionFilter() {
         NonBlockingCircuitBreaker cb = (NonBlockingCircuitBreaker) new CircuitBreakerBuilder()
                 .exceptionFilter(cause -> {
-                    throw Exceptions.clearTrace(new Exception("exception filter failed"));
+                    throw Exceptions.clearTrace(new AnticipatedException("exception filter failed"));
                 })
                 .ticker(ticker)
                 .build();

File: core/src/test/java/com/linecorp/armeria/server/ServerTest.java
Patch:
@@ -53,6 +53,7 @@
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.server.http.AbstractHttpService;
 import com.linecorp.armeria.server.logging.LoggingService;
+import com.linecorp.armeria.testing.common.AnticipatedException;
 import com.linecorp.armeria.testing.server.ServerRule;
 
 import io.netty.handler.codec.http.HttpStatusClass;
@@ -100,7 +101,7 @@ protected void echo(AggregatedHttpMessage aReq, HttpResponseWriter res) {
                 protected void doPost(ServiceRequestContext ctx,
                                       HttpRequest req, HttpResponseWriter res) throws Exception {
 
-                    throw Exceptions.clearTrace(new Exception("bug!"));
+                    throw Exceptions.clearTrace(new AnticipatedException("bug!"));
                 }
             }.decorate(LoggingService.newDecorator());
 

File: core/src/test/java/com/linecorp/armeria/server/http/HttpServiceTest.java
Patch:
@@ -62,6 +62,7 @@
 import com.linecorp.armeria.server.http.dynamic.PathParam;
 import com.linecorp.armeria.server.http.dynamic.Post;
 import com.linecorp.armeria.server.logging.LoggingService;
+import com.linecorp.armeria.testing.common.AnticipatedException;
 
 public class HttpServiceTest {
 
@@ -244,15 +245,15 @@ private static void validateContextAndRequest(RequestContext ctx, Request req) {
         @Get
         @Path("/exception/:var")
         public int exception(@PathParam("var") int var) {
-            throw new IllegalArgumentException("bad var!");
+            throw new AnticipatedException("bad var!");
         }
 
         // Throws an exception asynchronously
         @Get
         @Path("/exception-async/:var")
         public CompletableFuture<Integer> exceptionAsync(@PathParam("var") int var) {
             CompletableFuture<Integer> future = new CompletableFuture<>();
-            future.completeExceptionally(new IllegalArgumentException("bad var!"));
+            future.completeExceptionally(new AnticipatedException("bad var!"));
             return future;
         }
     }

File: core/src/test/java/com/linecorp/armeria/server/http/auth/HttpAuthServiceTest.java
Patch:
@@ -49,6 +49,7 @@
 import com.linecorp.armeria.server.http.AbstractHttpService;
 import com.linecorp.armeria.server.http.HttpService;
 import com.linecorp.armeria.server.logging.LoggingService;
+import com.linecorp.armeria.testing.common.AnticipatedException;
 import com.linecorp.armeria.testing.server.ServerRule;
 
 public class HttpAuthServiceTest {
@@ -118,7 +119,7 @@ protected void doGet(
             sb.serviceAt(
                     "/authorizer_exception",
                     ok.decorate(new HttpAuthServiceBuilder().add((ctx, data) -> {
-                        throw new RuntimeException("bug!");
+                        throw new AnticipatedException("bug!");
                     }).newDecorator())
                       .decorate(LoggingService.newDecorator()));
 
@@ -134,7 +135,7 @@ protected CompletionStage<Boolean> authorize(HttpRequest request,
 
                         @Override
                         protected HttpResponse onSuccess(ServiceRequestContext ctx, HttpRequest req) {
-                            throw new RuntimeException("bug!");
+                            throw new AnticipatedException("bug!");
                         }
                     }).decorate(LoggingService.newDecorator()));
         }

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/AbstractThriftOverHttpTest.java
Patch:
@@ -50,7 +50,6 @@
 import com.linecorp.armeria.common.thrift.ThriftCall;
 import com.linecorp.armeria.common.thrift.ThriftProtocolFactories;
 import com.linecorp.armeria.common.thrift.ThriftReply;
-import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.Service;
@@ -60,6 +59,7 @@
 import com.linecorp.armeria.service.test.thrift.main.HelloService;
 import com.linecorp.armeria.service.test.thrift.main.HelloService.AsyncIface;
 import com.linecorp.armeria.service.test.thrift.main.SleepService;
+import com.linecorp.armeria.testing.common.AnticipatedException;
 
 import io.netty.handler.ssl.util.SelfSignedCertificate;
 
@@ -111,7 +111,7 @@ protected String getResponse(String name) {
 
             sb.serviceAt("/exception", THttpService.of(
                     (AsyncIface) (name, resultHandler) ->
-                            resultHandler.onError(Exceptions.clearTrace(new Exception(name)))));
+                            resultHandler.onError(new AnticipatedException(name))));
 
             sb.serviceAt("/hellochild", THttpService.of(new HelloServiceChild()));
 

File: core/src/test/java/com/linecorp/armeria/internal/ConnectionLimitingHandlerIntegrationTest.java
Patch:
@@ -25,7 +25,6 @@
 import java.io.OutputStream;
 import java.net.Socket;
 import java.net.SocketException;
-import java.util.concurrent.TimeUnit;
 
 import org.junit.ClassRule;
 import org.junit.Test;
@@ -63,7 +62,7 @@ public void testExceedMaxNumConnections() throws Exception {
                 assertThat(server.server().numConnections()).isEqualTo(2);
             }
 
-            await().atMost(10, TimeUnit.SECONDS).until(() -> server.server().numConnections() == 1);
+            await().until(() -> server.server().numConnections() == 1);
 
             try (Socket s2 = newSocketAndTest()) {
                 assertThat(server.server().numConnections()).isEqualTo(2);

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/KeyedCircuitBreakerMapping.java
Patch:
@@ -73,7 +73,7 @@ public interface KeySelector<K> {
          * A {@link KeySelector} that returns remote method name as a key.
          */
         KeySelector<String> METHOD =
-                (ctx, req) -> req instanceof RpcRequest ? ((RpcRequest) req).method() : ctx.method();
+                (ctx, req) -> req instanceof RpcRequest ? ((RpcRequest) req).method() : ctx.method().name();
 
         /**
          * A {@link KeySelector} that returns a key consisted of remote host name and port number.

File: core/src/main/java/com/linecorp/armeria/client/metric/DropwizardMetricCollectingClient.java
Patch:
@@ -102,7 +102,7 @@ private static String defaultMetricName(RequestLog log, String metricNamePrefix)
         }
 
         if (methodName == null) {
-            methodName = MoreObjects.firstNonNull(log.method(), "__UNKNOWN_METHOD__");
+            methodName = MoreObjects.firstNonNull(log.method().name(), "__UNKNOWN_METHOD__");
         }
 
         return MetricRegistry.name(metricNamePrefix, methodName);

File: core/src/main/java/com/linecorp/armeria/server/Service.java
Patch:
@@ -56,7 +56,8 @@ default void serviceAdded(ServiceConfig cfg) throws Exception {}
      * {@code serviceType}. Use this method instead of an explicit downcast since most {@link Service}s are
      * decorated via {@link #decorate(Function)} and thus cannot be downcast. For example:
      * <pre>{@code
-     * Service s = new MyService().decorate(LoggingService::new).decorate(AuthService::new);
+     * Service s = new MyService().decorate(LoggingService.newDecorator())
+     *                            .decorate(AuthService.newDecorator());
      * MyService s1 = s.as(MyService.class);
      * LoggingService s2 = s.as(LoggingService.class);
      * AuthService s3 = s.as(AuthService.class);

File: core/src/main/java/com/linecorp/armeria/server/http/dynamic/DynamicHttpFunctions.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 LINE Corporation
+ * Copyright 2017 LINE Corporation
  *
  * LINE Corporation licenses this file to you under the Apache License,
  * version 2.0 (the "License"); you may not use this file except in compliance
@@ -49,8 +49,8 @@ private static ResponseConverter converter(Class<?> type, Map<Class<?>, Response
         }
 
         // Search for the converter mapped to one of its interface.
-        for (Class<?> itfc : Types.getAllInterfaces(type)) {
-            ResponseConverter converter = converters.get(itfc);
+        for (Class<?> iface : Types.getAllInterfaces(type)) {
+            ResponseConverter converter = converters.get(iface);
             if (converter != null) {
                 return converter;
             }

File: core/src/main/java/com/linecorp/armeria/server/logging/SampledLoggingService.java
Patch:
@@ -41,8 +41,8 @@ public class SampledLoggingService<I extends Request, O extends Response> extend
      * Creates a new instance that logs {@link Request}s and {@link Response}s at {@link LogLevel#INFO}.
      */
     public static <I extends Request, O extends Response> Function<Service<I, O>, SampledLoggingService<I, O>>
-    newDecorator() {
-        return newDecorator(true, true, 1.0f);
+    newDecorator(float logSamplingRate) {
+        return newDecorator(true, true, logSamplingRate);
     }
 
     /**

File: core/src/main/java/com/linecorp/armeria/server/metric/DropwizardMetricCollectingService.java
Patch:
@@ -112,7 +112,7 @@ private static String defaultMetricName(RequestLog log, String metricNamePrefix)
         pathAsMetricName = MoreObjects.firstNonNull(pathAsMetricName, "__UNKNOWN_PATH__");
 
         if (methodName == null) {
-            methodName = MoreObjects.firstNonNull(log.method(), "__UNKNOWN_METHOD__");
+            methodName = MoreObjects.firstNonNull(log.method().name(), "__UNKNOWN_METHOD__");
         }
 
         return MetricRegistry.name(metricNamePrefix, pathAsMetricName, methodName);

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClientTest.java
Patch:
@@ -47,6 +47,7 @@
 import com.linecorp.armeria.client.circuitbreaker.KeyedCircuitBreakerMapping.KeySelector;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;
+import com.linecorp.armeria.common.http.HttpMethod;
 import com.linecorp.armeria.common.util.Exceptions;
 
 import io.netty.channel.DefaultEventLoop;
@@ -59,13 +60,13 @@ public class CircuitBreakerClientTest {
     private static final ClientRequestContext ctx = new DefaultClientRequestContext(
             new DefaultEventLoop(), H2C,
             Endpoint.of("dummyhost", 8080),
-            "POST", "/", "", ClientOptions.DEFAULT,
+            HttpMethod.POST, "/", null, null, ClientOptions.DEFAULT,
             RpcRequest.of(Object.class, "methodA", "a", "b"));
 
     private static final ClientRequestContext ctxB = new DefaultClientRequestContext(
             new DefaultEventLoop(), H2C,
             Endpoint.of("dummyhost", 8080),
-            "POST", "/", "", ClientOptions.DEFAULT,
+            HttpMethod.POST, "/", null, null, ClientOptions.DEFAULT,
             RpcRequest.of(Object.class, "methodB", "c", "d"));
 
     private static final RpcRequest req = ctx.request();

File: core/src/test/java/com/linecorp/armeria/common/RequestContextTest.java
Patch:
@@ -51,6 +51,7 @@
 import com.google.common.util.concurrent.MoreExecutors;
 
 import com.linecorp.armeria.common.http.DefaultHttpRequest;
+import com.linecorp.armeria.common.http.HttpMethod;
 import com.linecorp.armeria.common.http.HttpSessionProtocols;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
@@ -475,7 +476,7 @@ private NonWrappingRequestContext createContext(boolean addContextAwareHandler)
 
     private class DummyRequestContext extends NonWrappingRequestContext {
         DummyRequestContext() {
-            super(HttpSessionProtocols.HTTP, "GET", "/", new DefaultHttpRequest());
+            super(HttpSessionProtocols.HTTP, HttpMethod.GET, "/", null, new DefaultHttpRequest());
         }
 
         @Override

File: core/src/test/java/com/linecorp/armeria/internal/metric/DropwizardMetricCollectorTest.java
Patch:
@@ -30,6 +30,7 @@
 import com.codahale.metrics.Timer;
 
 import com.linecorp.armeria.common.SerializationFormat;
+import com.linecorp.armeria.common.http.HttpMethod;
 import com.linecorp.armeria.common.http.HttpSessionProtocols;
 import com.linecorp.armeria.common.logging.RequestLog;
 
@@ -49,7 +50,7 @@ public void testMetricsForHttp() {
         when(requestLog.sessionProtocol()).thenReturn(HttpSessionProtocols.HTTP);
         when(requestLog.serializationFormat()).thenReturn(SerializationFormat.NONE);
         when(requestLog.path()).thenReturn("/bar");
-        when(requestLog.method()).thenReturn("GET");
+        when(requestLog.method()).thenReturn(HttpMethod.GET);
 
         collector.onRequestStart(requestLog);
         assertThat(counter(registry, "foo./bar#GET.activeRequests").getCount()).isEqualTo(1);

File: core/src/test/java/com/linecorp/armeria/server/ServiceTest.java
Patch:
@@ -62,7 +62,8 @@ private static void assertDecoration(
         assertThat(outer.as(String.class)).isNotPresent();
 
         // Test if FooService.serviceAdded() is invoked.
-        final ServiceConfig cfg = new ServiceConfig(PathMapping.ofCatchAll(), outer, "foo");
+        @SuppressWarnings({ "unchecked", "rawtypes" })
+        final ServiceConfig cfg = new ServiceConfig(PathMapping.ofCatchAll(), (Service) outer, "foo");
         outer.serviceAdded(cfg);
         assertThat(inner.cfg).isSameAs(cfg);
     }

File: core/src/test/java/com/linecorp/armeria/server/composition/CompositeServiceTest.java
Patch:
@@ -132,7 +132,7 @@ private static final class TestService extends AbstractHttpService {
         @Override
         protected void doGet(ServiceRequestContext ctx, HttpRequest req, HttpResponseWriter res) {
             res.respond(HttpStatus.OK, MediaType.PLAIN_TEXT_UTF_8,
-                        "%s:%s:%s", name, ctx.path(), ctx.mappedPath());
+                        "%s:%s:%s", name, ctx.path(), ctx.pathWithoutPrefix());
         }
     }
 }

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcRequestUtil.java
Patch:
@@ -28,7 +28,7 @@ final class GrpcRequestUtil {
     @Nullable
     static String determineMethod(ServiceRequestContext ctx) {
         // Remove the leading slash of the path and get the fully qualified method name
-        String path = ctx.mappedPath();
+        String path = ctx.pathWithoutPrefix();
         if (path.charAt(0) != '/') {
             return null;
         }

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcDocServiceTest.java
Patch:
@@ -101,7 +101,7 @@ protected void configure(ServerBuilder sb) throws Exception {
                                                                 .setBody(ByteString.copyFromUtf8("world")))
                                                  .build())
                             .build()
-                            .decorate(LoggingService::new));
+                            .decorate(LoggingService.newDecorator()));
             sb.serviceUnder("/", new GrpcServiceBuilder()
                     .addService(mock(ReconnectServiceImplBase.class))
                     .build());

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceTest.java
Patch:
@@ -90,7 +90,7 @@ public void badContentType() throws Exception {
 
     @Test
     public void pathMissingSlash() throws Exception {
-        when(ctx.mappedPath()).thenReturn("grpc.testing.TestService.UnaryCall");
+        when(ctx.pathWithoutPrefix()).thenReturn("grpc.testing.TestService.UnaryCall");
         grpcService.doPost(
                 ctx,
                 HttpRequest.of(HttpHeaders.of(HttpMethod.POST, "grpc.testing.TestService.UnaryCall")
@@ -104,7 +104,7 @@ public void pathMissingSlash() throws Exception {
 
     @Test
     public void missingMethod() throws Exception {
-        when(ctx.mappedPath()).thenReturn("/grpc.testing.TestService/FooCall");
+        when(ctx.pathWithoutPrefix()).thenReturn("/grpc.testing.TestService/FooCall");
         grpcService.doPost(
                 ctx,
                 HttpRequest.of(HttpHeaders.of(HttpMethod.POST, "/grpc.testing.TestService/FooCall")

File: jetty/src/test/java/com/linecorp/armeria/server/http/jetty/JettyServiceTest.java
Patch:
@@ -74,7 +74,7 @@ protected void configure(ServerBuilder sb) throws Exception {
                             .handler(newWebAppContext())
                             .configurator(s -> jettyBeans.addAll(s.getBeans()))
                             .build()
-                            .decorate(LoggingService::new));
+                            .decorate(LoggingService.newDecorator()));
 
             sb.serviceUnder(
                     "/default/",

File: jetty/src/test/java/com/linecorp/armeria/server/http/jetty/UnmanagedJettyServiceTest.java
Patch:
@@ -45,7 +45,7 @@ protected void configure(ServerBuilder sb) throws Exception {
             jetty.start();
             sb.serviceUnder(
                     "/jsp/",
-                    JettyService.forServer(jetty).decorate(LoggingService::new));
+                    JettyService.forServer(jetty).decorate(LoggingService.newDecorator()));
         }
     };
 

File: testing/src/main/java/com/linecorp/armeria/testing/server/webapp/WebAppContainerTest.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.File;
 import java.net.URISyntaxException;
 import java.net.URL;
+import java.net.URLEncoder;
 import java.nio.charset.StandardCharsets;
 import java.util.Collections;
 import java.util.regex.Pattern;
@@ -125,7 +126,8 @@ public void jsp() throws Exception {
     @Test
     public void japanesePath() throws Exception {
         try (CloseableHttpClient hc = HttpClients.createMinimal()) {
-            try (CloseableHttpResponse res = hc.execute(new HttpGet(server().uri("/jsp/日本語/index.jsp")))) {
+            try (CloseableHttpResponse res = hc.execute(new HttpGet(
+                    server().uri("/jsp/" + URLEncoder.encode("日本語", "UTF-8") + "/index.jsp")))) {
                 assertThat(res.getStatusLine().toString()).isEqualTo("HTTP/1.1 200 OK");
                 assertThat(res.getFirstHeader(HttpHeaderNames.CONTENT_TYPE.toString()).getValue())
                         .startsWith("text/html");

File: thrift/src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTest.java
Patch:
@@ -197,7 +197,7 @@ String path(SerializationFormat serializationFormat) {
                     Service<HttpRequest, HttpResponse> service =
                             THttpService.of(h.handler(), defaultSerializationFormat);
                     if (ENABLE_LOGGING_DECORATORS) {
-                        service = service.decorate(LoggingService::new);
+                        service = service.decorate(LoggingService.newDecorator());
                     }
                     sb.serviceAt(h.path(defaultSerializationFormat), service);
                 }
@@ -282,7 +282,7 @@ public static void init() throws Exception {
         });
 
         if (ENABLE_LOGGING_DECORATORS) {
-            decoBuilder.add(RpcRequest.class, RpcResponse.class, LoggingClient::new);
+            decoBuilder.add(RpcRequest.class, RpcResponse.class, LoggingClient.newDecorator());
         }
 
         clientOptions = ClientOptions.of(ClientOption.DECORATION.newValue(decoBuilder.build()));

File: thrift/src/test/java/com/linecorp/armeria/it/metric/PrometheusMetricsIntegrationTest.java
Patch:
@@ -264,7 +264,7 @@ private static SortedMap<MyMetricLabel, String> defaultMetricName(RequestLog log
         } else if (requestEnvelope instanceof HttpHeaders) {
             methodName = ((HttpHeaders) requestEnvelope).method().name();
         } else {
-            methodName = log.method();
+            methodName = log.method().name();
         }
 
         if (requestEnvelope instanceof HttpHeaders) {

File: thrift/src/test/java/com/linecorp/armeria/it/thrift/ThriftStructuredLoggingTest.java
Patch:
@@ -32,6 +32,8 @@
 import com.linecorp.armeria.client.Clients;
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.Response;
+import com.linecorp.armeria.common.http.HttpRequest;
+import com.linecorp.armeria.common.http.HttpResponse;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.thrift.ThriftCall;
 import com.linecorp.armeria.common.thrift.ThriftReply;
@@ -70,7 +72,7 @@ protected void close() {
         }
     }
 
-    private static MockedStructuredLoggingService<?, ?> loggingService;
+    private static MockedStructuredLoggingService<? super HttpRequest, ? extends HttpResponse> loggingService;
 
     @ClassRule
     public static final ServerRule server = new ServerRule() {

File: tomcat/src/test/java/com/linecorp/armeria/server/http/tomcat/TomcatServiceTest.java
Patch:
@@ -64,21 +64,21 @@ protected void configure(ServerBuilder sb) throws Exception {
                                         .serviceName(SERVICE_NAME)
                                         .configurator(s -> Collections.addAll(tomcatServices, s.findServices()))
                                         .build()
-                                        .decorate(LoggingService::new));
+                                        .decorate(LoggingService.newDecorator()));
 
             sb.serviceUnder(
                     "/jar/",
                     TomcatServiceBuilder.forClassPath(Future.class)
                                         .serviceName("TomcatServiceTest-JAR")
                                         .build()
-                                        .decorate(LoggingService::new));
+                                        .decorate(LoggingService.newDecorator()));
 
             sb.serviceUnder(
                     "/jar_altroot/",
                     TomcatServiceBuilder.forClassPath(Future.class, "/io/netty/util/concurrent")
                                         .serviceName("TomcatServiceTest-JAR-AltRoot")
                                         .build()
-                                        .decorate(LoggingService::new));
+                                        .decorate(LoggingService.newDecorator()));
         }
     };
 

File: zipkin/src/main/java/com/linecorp/armeria/client/tracing/AbstractTracingClient.java
Patch:
@@ -66,7 +66,7 @@ protected AbstractTracingClient(Client<? super I, ? extends O> delegate, Brave b
     @Override
     public O execute(ClientRequestContext ctx, I req) throws Exception {
         // create new request adapter to catch generated spanId
-        final String method = req instanceof RpcRequest ? ((RpcRequest) req).method() : ctx.method();
+        final String method = req instanceof RpcRequest ? ((RpcRequest) req).method() : ctx.method().name();
         final InternalClientRequestAdapter requestAdapter =
                 new InternalClientRequestAdapter(
                         Endpoint.builder()

File: zipkin/src/main/java/com/linecorp/armeria/server/tracing/AbstractTracingService.java
Patch:
@@ -63,7 +63,7 @@ protected AbstractTracingService(Service<? super I, ? extends O> delegate, Brave
     @Override
     public O serve(ServiceRequestContext ctx, I req) throws Exception {
         final TraceData traceData = getTraceData(ctx, req);
-        final String method = req instanceof RpcRequest ? ((RpcRequest) req).method() : ctx.method();
+        final String method = req instanceof RpcRequest ? ((RpcRequest) req).method() : ctx.method().name();
         final ServerRequestAdapter requestAdapter = new InternalServerRequestAdapter(method, traceData);
 
         final ServerSpan serverSpan = serverInterceptor.openSpan(requestAdapter);

File: zipkin/src/test/java/com/linecorp/armeria/client/tracing/HttpTracingClientTest.java
Patch:
@@ -77,6 +77,6 @@ private static HttpRequest newRequest() {
     private static ClientRequestContext newClientContext(HttpRequest req) {
         return new DefaultClientRequestContext(
                 new DefaultEventLoop(), H2C, Endpoint.of("localhost", 8080),
-                req.method().toString(), req.path(), "", ClientOptions.DEFAULT, req);
+                req.method(), req.path(), null, null, ClientOptions.DEFAULT, req);
     }
 }

File: zipkin/src/test/java/com/linecorp/armeria/client/tracing/TracingClientTest.java
Patch:
@@ -43,6 +43,7 @@
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;
+import com.linecorp.armeria.common.http.HttpMethod;
 import com.linecorp.armeria.common.tracing.HelloService;
 import com.linecorp.armeria.common.tracing.SpanCollectingReporter;
 
@@ -105,9 +106,9 @@ private static SpanCollectingReporter testRemoteInvocationWithSamplingRate(
         final RpcResponse res = RpcResponse.of("Hello, Armeria!");
         final ClientRequestContext ctx = new DefaultClientRequestContext(
                 new DefaultEventLoop(), H2C, Endpoint.of("localhost", 8080),
-                "POST", "/", "", ClientOptions.DEFAULT, req);
+                HttpMethod.POST, "/", null, null, ClientOptions.DEFAULT, req);
 
-        ctx.logBuilder().startRequest(mock(Channel.class), H2C, "localhost", "POST", "/");
+        ctx.logBuilder().startRequest(mock(Channel.class), H2C, "localhost", HttpMethod.POST, "/", null);
         ctx.logBuilder().endRequest();
 
         @SuppressWarnings("unchecked")

File: zipkin/src/test/java/com/linecorp/armeria/server/tracing/TracingServiceTest.java
Patch:
@@ -41,6 +41,7 @@
 
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;
+import com.linecorp.armeria.common.http.HttpMethod;
 import com.linecorp.armeria.common.logging.DefaultRequestLog;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.tracing.HelloService;
@@ -115,11 +116,11 @@ private static SpanCollectingReporter testServiceInvocation(boolean sampled) thr
         final ServiceRequestContext ctx = mock(ServiceRequestContext.class);
         final RpcRequest req = RpcRequest.of(HelloService.Iface.class, "hello", "trustin");
         final DefaultRequestLog log = new DefaultRequestLog(ctx);
-        log.startRequest(mock(Channel.class), H2C, "localhost", TEST_METHOD, "/");
+        log.startRequest(mock(Channel.class), H2C, "localhost", HttpMethod.POST, "/", null);
         log.endRequest();
 
         // AbstractTracingService prefers RpcRequest.method() to ctx.method(), so "POST" should be ignored.
-        when(ctx.method()).thenReturn("POST");
+        when(ctx.method()).thenReturn(HttpMethod.POST);
         when(ctx.log()).thenReturn(log);
         when(ctx.logBuilder()).thenReturn(log);
         ctx.onEnter(isA(Consumer.class));

File: retrofit2/src/main/java/com/linecorp/armeria/client/http/retrofit2/ArmeriaCallFactory.java
Patch:
@@ -61,8 +61,7 @@ final class ArmeriaCallFactory implements Factory {
 
     ArmeriaCallFactory(HttpClient baseHttpClient,
                        ClientFactory clientFactory,
-                       BiFunction<String, ? super ClientOptionsBuilder, ClientOptionsBuilder> configurator,
-                       String groupPrefix) {
+                       BiFunction<String, ? super ClientOptionsBuilder, ClientOptionsBuilder> configurator) {
         this.baseHttpClient = baseHttpClient;
         this.clientFactory = clientFactory;
         this.configurator = configurator;
@@ -109,6 +108,7 @@ private enum ExecutionState {
 
         private volatile HttpResponse httpResponse;
 
+        @SuppressWarnings("FieldMayBeFinal")
         private volatile ExecutionState executionState = ExecutionState.IDLE;
 
         ArmeriaCall(ArmeriaCallFactory callFactory, Request request) {

File: thrift/src/test/java/com/linecorp/armeria/it/metric/DropwizardMetricsIntegrationTest.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.it.metrics;
+package com.linecorp.armeria.it.metric;
 
 import static com.linecorp.armeria.common.thrift.ThriftSerializationFormats.BINARY;
 import static org.assertj.core.api.Assertions.assertThat;

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaClientCall.java
Patch:
@@ -42,6 +42,7 @@
 import com.linecorp.armeria.internal.grpc.ArmeriaMessageDeframer.ByteBufOrStream;
 import com.linecorp.armeria.internal.grpc.ArmeriaMessageFramer;
 import com.linecorp.armeria.internal.grpc.GrpcHeaderNames;
+import com.linecorp.armeria.internal.grpc.GrpcLogUtil;
 import com.linecorp.armeria.internal.grpc.GrpcMessageMarshaller;
 import com.linecorp.armeria.internal.grpc.HttpStreamReader;
 import com.linecorp.armeria.internal.grpc.TimeoutHeaderUtil;
@@ -235,6 +236,7 @@ public void transportReportStatus(Status status) {
         try (SafeCloseable ignored = RequestContext.push(ctx)) {
             listener.onClose(status, EMPTY_METADATA);
         }
+        ctx.logBuilder().responseContent(GrpcLogUtil.rpcResponse(status), null);
         notifyExecutor();
     }
 

File: grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java
Patch:
@@ -20,6 +20,7 @@
 import static com.linecorp.armeria.grpc.testing.Messages.PayloadType.COMPRESSABLE;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.catchThrowable;
+import static org.awaitility.Awaitility.await;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.timeout;
 import static org.mockito.Mockito.verify;
@@ -370,7 +371,7 @@ public void cancelAfterFirstResponse() throws Exception {
         StreamObserver<StreamingOutputCallRequest> requestObserver
                 = asyncStub.fullDuplexCall(responseObserver);
         requestObserver.onNext(request);
-        assertThat(responseObserver.firstValue().get()).isEqualTo(goldenResponse);
+        await().untilAsserted(() -> assertThat(responseObserver.firstValue().get()).isEqualTo(goldenResponse));
         requestObserver.onError(new RuntimeException());
         responseObserver.awaitCompletion(operationTimeoutMillis(), TimeUnit.MILLISECONDS);
         assertThat(responseObserver.getValues()).hasSize(1);

File: core/src/main/java/com/linecorp/armeria/server/ResourceNotFoundException.java
Patch:
@@ -24,7 +24,6 @@ public final class ResourceNotFoundException extends RuntimeException {
 
     private static final long serialVersionUID = 1268757990666737813L;
 
-
     private static final ResourceNotFoundException INSTANCE =
             Exceptions.clearTrace(new ResourceNotFoundException());
 

File: thrift/src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTServletIntegrationTest.java
Patch:
@@ -60,6 +60,7 @@
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.BeforeClass;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -198,6 +199,7 @@ public void setup() {
     }
 
     @Test
+    @Ignore("flaky") // FIXME(trustin): Flaky test
     public void sendHelloViaHttp1() throws Exception {
         final AtomicReference<SessionProtocol> sessionProtocol = new AtomicReference<>();
         final HelloService.Iface client = newSchemeCapturingClient(http1uri(HTTP), sessionProtocol);

File: grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaClientCall.java
Patch:
@@ -44,8 +44,8 @@
 import com.linecorp.armeria.internal.grpc.GrpcHeaderNames;
 import com.linecorp.armeria.internal.grpc.GrpcMessageMarshaller;
 import com.linecorp.armeria.internal.grpc.HttpStreamReader;
-import com.linecorp.armeria.internal.grpc.StatusListener;
 import com.linecorp.armeria.internal.grpc.TimeoutHeaderUtil;
+import com.linecorp.armeria.internal.grpc.TransportStatusListener;
 
 import io.grpc.CallOptions;
 import io.grpc.ClientCall;
@@ -63,7 +63,7 @@
  * from the server, passing to business logic via {@link ClientCall.Listener}.
  */
 class ArmeriaClientCall<I, O> extends ClientCall<I, O>
-        implements ArmeriaMessageDeframer.Listener, StatusListener {
+        implements ArmeriaMessageDeframer.Listener, TransportStatusListener {
 
     private static final Runnable NO_OP = () -> { };
 
@@ -230,7 +230,7 @@ public void endOfStream() {
     }
 
     @Override
-    public void onError(Status status) {
+    public void transportReportStatus(Status status) {
         responseReader.cancel();
         try (SafeCloseable ignored = RequestContext.push(ctx)) {
             listener.onClose(status, EMPTY_METADATA);

File: grpc/src/main/java/com/linecorp/armeria/internal/grpc/TransportStatusListener.java
Patch:
@@ -22,6 +22,6 @@
  * A listener of GRPC {@link Status}s. Any errors occuring within the armeria will be returned to GRPC business
  * logic through this listener, and for clients the final response {@link Status} is also returned.
  */
-public interface StatusListener {
-    void onError(Status status);
+public interface TransportStatusListener {
+    void transportReportStatus(Status status);
 }

File: grpc/src/main/java/com/linecorp/armeria/common/grpc/GrpcSerializationFormatProvider.java
Patch:
@@ -32,9 +32,10 @@ public final class GrpcSerializationFormatProvider extends SerializationFormatPr
     @Override
     protected Set<Entry> entries() {
         return ImmutableSet.of(
-                new Entry("gproto", create("application", "grpc+proto")),
+                new Entry("gproto", create("application", "grpc+proto"), create("application", "grpc")),
                 new Entry("gjson", create("application", "grpc+json")),
-                new Entry("gproto-web", create("application", "grpc-web+proto")),
+                new Entry("gproto-web", create("application", "grpc-web+proto"),
+                          create("application", "grpc-web")),
                 new Entry("gjson-web", create("application", "grpc-web+json")));
     }
 }

File: grpc/src/main/java/com/linecorp/armeria/internal/grpc/HttpStreamReader.java
Patch:
@@ -133,6 +133,9 @@ public void cancel() {
         if (subscription != null) {
             subscription.cancel();
         }
+        if (!deframer.isClosed()) {
+            deframer.close();
+        }
     }
 
     private void closeDeframer() {

File: grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java
Patch:
@@ -105,7 +105,6 @@ protected void configure(ServerBuilder sb) throws Exception {
                     .addService(new TestServiceImpl(Executors.newSingleThreadScheduledExecutor()))
                     .setMaxInboundMessageSizeBytes(MAX_MESSAGE_SIZE)
                     .setMaxOutboundMessageSizeBytes(MAX_MESSAGE_SIZE)
-                    .enableUnframedRequests(true)
                     .build()
                     .decorate(TestServiceImpl.EchoRequestHeadersInTrailers::new)
                     .decorate((client, ctx, req) -> {

File: grpc/src/test/java/com/linecorp/armeria/internal/grpc/GrpcMessageMarshallerTest.java
Patch:
@@ -51,6 +51,7 @@ public void serializeRequest() throws Exception {
         ByteBuf serialized = marshaller.serializeRequest(GrpcTestUtil.REQUEST_MESSAGE);
         assertThat(ByteBufUtil.getBytes(serialized))
                 .containsExactly(GrpcTestUtil.REQUEST_MESSAGE.toByteArray());
+        serialized.release();
     }
 
     @Test
@@ -72,6 +73,7 @@ public void serializeResponse() throws Exception {
         ByteBuf serialized = marshaller.serializeResponse(GrpcTestUtil.RESPONSE_MESSAGE);
         assertThat(ByteBufUtil.getBytes(serialized))
                 .containsExactly(GrpcTestUtil.RESPONSE_MESSAGE.toByteArray());
+        serialized.release();
     }
 
     @Test

File: core/src/main/java/com/linecorp/armeria/server/http/HttpServerHandler.java
Patch:
@@ -337,7 +337,7 @@ private void handleRequest(ChannelHandlerContext ctx, DecodedHttpRequest req) th
             final HttpResponseSubscriber resSubscriber =
                     new HttpResponseSubscriber(ctx, responseEncoder, reqCtx, req);
             reqCtx.setRequestTimeoutChangeListener(resSubscriber);
-            res.subscribe(resSubscriber, eventLoop);
+            res.subscribe(resSubscriber, eventLoop, true);
         }
     }
 

File: core/src/main/java/com/linecorp/armeria/common/http/HttpSessionProtocols.java
Patch:
@@ -55,7 +55,7 @@ public final class HttpSessionProtocols {
     public static final SessionProtocol H2 = SessionProtocol.of("h2");
 
     /**
-     * HTTP/2 - over TLS.
+     * HTTP/2 - cleartext.
      */
     public static final SessionProtocol H2C = SessionProtocol.of("h2c");
 

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/SlidingWindowCounterTest.java
Patch:
@@ -132,7 +132,7 @@ public void testConcurrentAccess() throws InterruptedException {
             thread.join();
         }
 
-        await().until(() -> assertThat(counter.onFailure()).isPresent());
+        await().untilAsserted(() -> assertThat(counter.onFailure()).isPresent());
         assertThat(counter.count()).isEqualTo(new EventCount(success.get(), failure.get()));
     }
 

File: grpc/src/test/java/com/linecorp/armeria/internal/grpc/ArmeriaMessageDeframerTest.java
Patch:
@@ -41,10 +41,10 @@
 import com.google.protobuf.ByteString;
 
 import com.linecorp.armeria.common.http.HttpData;
+import com.linecorp.armeria.grpc.testing.Messages.Payload;
+import com.linecorp.armeria.grpc.testing.Messages.SimpleRequest;
 import com.linecorp.armeria.internal.grpc.ArmeriaMessageDeframer.ByteBufOrStream;
 
-import come.linecorp.armeria.grpc.testing.Messages.Payload;
-import come.linecorp.armeria.grpc.testing.Messages.SimpleRequest;
 import io.grpc.Codec.Gzip;
 import io.grpc.StatusRuntimeException;
 import io.netty.buffer.Unpooled;

File: grpc/src/test/java/com/linecorp/armeria/internal/grpc/ArmeriaMessageFramerTest.java
Patch:
@@ -29,9 +29,9 @@
 import com.google.protobuf.ByteString;
 
 import com.linecorp.armeria.common.http.HttpData;
+import com.linecorp.armeria.grpc.testing.Messages.Payload;
+import com.linecorp.armeria.grpc.testing.Messages.SimpleRequest;
 
-import come.linecorp.armeria.grpc.testing.Messages.Payload;
-import come.linecorp.armeria.grpc.testing.Messages.SimpleRequest;
 import io.grpc.Codec.Gzip;
 import io.grpc.StatusRuntimeException;
 import io.netty.buffer.ByteBuf;

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/ArmeriaServerCallTest.java
Patch:
@@ -45,15 +45,15 @@
 import com.linecorp.armeria.common.http.HttpHeaders;
 import com.linecorp.armeria.common.http.HttpResponseWriter;
 import com.linecorp.armeria.common.http.HttpStatus;
+import com.linecorp.armeria.grpc.testing.Messages.Payload;
+import com.linecorp.armeria.grpc.testing.Messages.SimpleRequest;
+import com.linecorp.armeria.grpc.testing.Messages.SimpleResponse;
 import com.linecorp.armeria.grpc.testing.TestServiceGrpc;
 import com.linecorp.armeria.internal.grpc.ArmeriaMessageDeframer.ByteBufOrStream;
 import com.linecorp.armeria.internal.grpc.GrpcHeaderNames;
 import com.linecorp.armeria.internal.grpc.GrpcTestUtil;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
-import come.linecorp.armeria.grpc.testing.Messages.Payload;
-import come.linecorp.armeria.grpc.testing.Messages.SimpleRequest;
-import come.linecorp.armeria.grpc.testing.Messages.SimpleResponse;
 import io.grpc.CompressorRegistry;
 import io.grpc.DecompressorRegistry;
 import io.grpc.Metadata;

File: it/src/test/java/com/linecorp/armeria/server/grpc/interop/ArmeriaGrpcServerInteropTest.java
Patch:
@@ -79,7 +79,7 @@
  * Interop test based on grpc-interop-testing. Should provide reasonable confidence in armeria's
  * handling of the grpc protocol.
  */
-@Ignore // TODO(trustin): Unignore once GRPC upgrades to Netty 4.1.9
+@Ignore // TODO(trustin): Unignore once GRPC upgrades to Netty 4.1.10
 public class ArmeriaGrpcServerInteropTest extends AbstractInteropTest {
 
     private static final ApplicationProtocolConfig ALPN = new ApplicationProtocolConfig(
@@ -134,7 +134,7 @@ protected ManagedChannel createChannel() {
             return NettyChannelBuilder
                     .forAddress("localhost", (int) getPort.invoke(this))
                     .flowControlWindow(65 * 1024)
-                    .maxMessageSize(16 * 1024 * 1024)
+                    .maxInboundMessageSize(16 * 1024 * 1024)
                     .sslContext(GrpcSslContexts
                                         .forClient()
                                         .keyManager(TestUtils.loadCert("client.pem"),

File: core/src/main/java/com/linecorp/armeria/client/retry/AttemptLimitingBackoff.java
Patch:
@@ -16,6 +16,7 @@
 package com.linecorp.armeria.client.retry;
 
 import static com.google.common.base.Preconditions.checkArgument;
+import static com.linecorp.armeria.client.retry.AbstractBackoff.validateNumAttemptsSoFar;
 
 import com.google.common.base.MoreObjects;
 
@@ -30,6 +31,7 @@ final class AttemptLimitingBackoff extends BackoffWrapper {
 
     @Override
     public long nextIntervalMillis(int numAttemptsSoFar) {
+        validateNumAttemptsSoFar(numAttemptsSoFar);
         if (numAttemptsSoFar >= maxAttempts) {
             return -1;
         }

File: core/src/main/java/com/linecorp/armeria/client/retry/ExponentialBackoff.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.common.base.MoreObjects;
 
-final class ExponentialBackoff implements Backoff {
+final class ExponentialBackoff extends AbstractBackoff {
     private long currentIntervalMillis;
     private final long maxIntervalMillis;
     private final double multiplier;
@@ -35,7 +35,7 @@ final class ExponentialBackoff implements Backoff {
     }
 
     @Override
-    public long nextIntervalMillis(int numAttemptsSoFar) {
+    protected long doNextIntervalMillis(int numAttemptsSoFar) {
         if (currentIntervalMillis >= maxIntervalMillis) {
             return maxIntervalMillis;
         }

File: core/src/main/java/com/linecorp/armeria/client/retry/FixedBackoff.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.common.base.MoreObjects;
 
-final class FixedBackoff implements Backoff {
+final class FixedBackoff extends AbstractBackoff {
     static final Backoff NO_DELAY = new FixedBackoff(0);
 
     private final long intervalMillis;
@@ -30,7 +30,7 @@ final class FixedBackoff implements Backoff {
     }
 
     @Override
-    public long nextIntervalMillis(int numAttemptsSoFar) {
+    protected long doNextIntervalMillis(int numAttemptsSoFar) {
         return intervalMillis;
     }
 

File: core/src/main/java/com/linecorp/armeria/client/limit/ConcurrencyLimitingHttpClient.java
Patch:
@@ -70,8 +70,9 @@ private ConcurrencyLimitingHttpClient(Client<? super HttpRequest, ? extends Http
 
     @Override
     protected Deferred<HttpResponse> defer(ClientRequestContext ctx, HttpRequest req) throws Exception {
-        final DeferredHttpResponse res = new DeferredHttpResponse();
         return new Deferred<HttpResponse>() {
+            private final DeferredHttpResponse res = new DeferredHttpResponse();
+
             @Override
             public HttpResponse response() {
                 return res;

File: core/src/main/java/com/linecorp/armeria/common/DefaultRpcResponse.java
Patch:
@@ -22,6 +22,8 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
 
+import javax.annotation.Nullable;
+
 import com.google.common.base.MoreObjects;
 
 import com.linecorp.armeria.common.util.Exceptions;
@@ -48,7 +50,7 @@ public DefaultRpcResponse() {}
      *
      * @param result the result or an RPC call
      */
-    public DefaultRpcResponse(Object result) {
+    public DefaultRpcResponse(@Nullable Object result) {
         complete(result);
     }
 

File: core/src/main/java/com/linecorp/armeria/common/http/DeferredHttpResponse.java
Patch:
@@ -31,7 +31,7 @@
  *         // Delay all requests by 3 seconds.
  *         DeferredHttpResponse res = new DeferredHttpResponse();
  *         ctx.eventLoop().schedule(() -> {
- *             res.setDelegate(delegate().serve(ctx, req));
+ *             res.delegate(delegate().serve(ctx, req));
  *         }, 3, TimeUnit.SECONDS);
  *         return res;
  *     }

File: core/src/main/java/com/linecorp/armeria/server/http/dynamic/Deserializers.java
Patch:
@@ -37,6 +37,8 @@ static <T> T deserialize(String str, Class<T> clazz) {
                 return (T) Byte.valueOf(str);
             } else if (clazz == Short.TYPE) {
                 return (T) Short.valueOf(str);
+            } else if (clazz == Boolean.TYPE) {
+                return (T) Boolean.valueOf(str);
             } else if (clazz == Integer.TYPE) {
                 return (T) Integer.valueOf(str);
             } else if (clazz == Long.TYPE) {

File: core/src/main/java/com/linecorp/armeria/common/http/HttpHeaders.java
Patch:
@@ -21,6 +21,8 @@
 import java.util.Iterator;
 import java.util.Map.Entry;
 
+import javax.annotation.Nullable;
+
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 
@@ -159,6 +161,7 @@ static HttpHeaders copyOf(HttpHeaders headers) {
     /**
      * Gets the {@link HttpHeaderNames#STATUS} header or {@code null} if there is no such header.
      */
+    @Nullable
     HttpStatus status();
 
     /**

File: core/src/main/java/com/linecorp/armeria/common/http/HttpResponseAggregator.java
Patch:
@@ -38,7 +38,8 @@ final class HttpResponseAggregator extends HttpMessageAggregator {
     public void onNext(HttpObject o) {
         if (o instanceof HttpHeaders) {
             final HttpHeaders headers = (HttpHeaders) o;
-            if (headers.status().codeClass() == HttpStatusClass.INFORMATIONAL) {
+            final HttpStatus status = headers.status();
+            if (status != null && status.codeClass() == HttpStatusClass.INFORMATIONAL) {
                 if (informationals == null) {
                     informationals = new ArrayList<>(2);
                 }

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/EndpointHealthStateGaugeSet.java
Patch:
@@ -49,9 +49,9 @@ class EndpointHealthStateGaugeSet implements MetricSet {
     public Map<String, Metric> getMetrics() {
         return ImmutableMap.of(
                 METRIC_NAME_PREFIX + metricName + ".all.count",
-                (Gauge<Integer>) endpointGroup.allServers::size,
+                (Gauge<Integer>) () -> endpointGroup.allServers.size(),
                 METRIC_NAME_PREFIX + metricName + ".healthy.count",
-                (Gauge<Integer>) endpointGroup.endpoints()::size,
+                (Gauge<Integer>) () -> endpointGroup.endpoints().size(),
                 METRIC_NAME_PREFIX + metricName + ".healthy.endpoints",
                 (Gauge<Set<String>>) () -> ImmutableSet.copyOf(endpointGroup.endpoints())
                                                        .stream()

File: core/src/main/java/com/linecorp/armeria/common/http/HttpData.java
Patch:
@@ -29,6 +29,9 @@
 /**
  * HTTP/2 data. Helpers in this class create {@link HttpData} objects that leave the stream open.
  * To create a {@link HttpData} that closes the stream, directly instantiate {@link DefaultHttpData}.
+ *
+ * <p>Implementations should generally extend {@link AbstractHttpData} to interact with other {@link HttpData}
+ * implementations.
  */
 public interface HttpData extends HttpObject {
 

File: core/src/main/java/com/linecorp/armeria/internal/http/HttpObjectEncoder.java
Patch:
@@ -106,6 +106,9 @@ private static ChannelFuture newFailedFuture(ChannelHandlerContext ctx) {
     }
 
     protected static ByteBuf toByteBuf(ChannelHandlerContext ctx, HttpData data) {
+        if (data instanceof ByteBufHttpData) {
+            return ((ByteBufHttpData) data).buf();
+        }
         final ByteBuf buf = ctx.alloc().directBuffer(data.length(), data.length());
         buf.writeBytes(data.array(), data.offset(), data.length());
         return buf;

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftServiceTest.java
Patch:
@@ -72,6 +72,7 @@
 import com.linecorp.armeria.service.test.thrift.main.NameSortService;
 import com.linecorp.armeria.service.test.thrift.main.OnewayHelloService;
 
+import io.netty.buffer.ByteBufAllocator;
 import io.netty.util.concurrent.ImmediateEventExecutor;
 
 /**
@@ -628,6 +629,7 @@ private static void invoke0(THttpService service, HttpData content,
                                 CompletableFuture<HttpData> promise) throws Exception {
 
         final ServiceRequestContext ctx = mock(ServiceRequestContext.class);
+        when(ctx.alloc()).thenReturn(ByteBufAllocator.DEFAULT);
         final DefaultRequestLog reqLogBuilder = new DefaultRequestLog(ctx);
 
         when(ctx.blockingTaskExecutor()).thenReturn(ImmediateEventExecutor.INSTANCE);

File: core/src/main/java/com/linecorp/armeria/common/logging/RequestLogAvailabilitySet.java
Patch:
@@ -47,7 +47,7 @@ final class RequestLogAvailabilitySet extends AbstractSet<RequestLogAvailability
             int flags = 0;
             for (RequestLogAvailability v : values) {
                 if ((i & 1 << v.ordinal()) != 0) {
-                    flags |= v.getterFlags();
+                    flags |= v.setterFlags();
                 }
             }
 
@@ -73,7 +73,7 @@ private RequestLogAvailabilitySet(int flags) {
 
         final List<RequestLogAvailability> values = new ArrayList<>();
         for (RequestLogAvailability v : RequestLogAvailability.values()) {
-            if ((flags & v.getterFlags()) == flags) {
+            if ((flags & v.getterFlags()) == v.getterFlags()) {
                 values.add(v);
             }
         }

File: it/src/test/java/com/linecorp/armeria/server/grpc/interop/ArmeriaGrpcServerInteropTest.java
Patch:
@@ -79,6 +79,7 @@
  * Interop test based on grpc-interop-testing. Should provide reasonable confidence in armeria's
  * handling of the grpc protocol.
  */
+@Ignore // TODO(trustin): Unignore once GRPC upgrades to Netty 4.1.9
 public class ArmeriaGrpcServerInteropTest extends AbstractInteropTest {
 
     private static final ApplicationProtocolConfig ALPN = new ApplicationProtocolConfig(

File: tomcat/src/test/java/com/linecorp/armeria/server/http/tomcat/UnmanagedTomcatServiceTest.java
Patch:
@@ -54,7 +54,7 @@ public static void createTomcat() throws Exception {
 
         tomcatWithWebApp.addWebapp(
                 "", (docBaseB.exists() ? docBaseB : docBaseA).getAbsolutePath());
-        tomcatWithWebApp.getService().getContainer().setName("tomcatWithWebApp");
+        TomcatUtil.engine(tomcatWithWebApp.getService()).setName("tomcatWithWebApp");
 
         tomcatWithoutWebApp = new Tomcat();
         tomcatWithoutWebApp.setPort(0);

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftDocServiceTest.java
Patch:
@@ -191,7 +191,9 @@ private static void addExamples(JsonNode json) {
                 final ArrayNode exampleRequests = (ArrayNode) method.get("exampleRequests");
                 if (HelloService.class.getName().equals(serviceName) &&
                     "hello".equals(methodName)) {
-                    exampleRequests.add("{\n  \"name\" : \"sample user\"\n}");
+                    exampleRequests.add('{' + System.lineSeparator() +
+                                        "  \"name\" : \"sample user\"" + System.lineSeparator() +
+                                        '}');
                 }
             });
         });

File: core/src/main/java/com/linecorp/armeria/client/DecoratingClient.java
Patch:
@@ -22,7 +22,9 @@
 import com.linecorp.armeria.common.Response;
 
 /**
- * Decorates a {@link Client}.
+ * Decorates a {@link Client}. Use {@link SimpleDecoratingClient} or
+ * {@link ClientBuilder#decorator(Class, Class, DecoratingClientFunction)} if your {@link Client} has the same
+ * {@link Request} and {@link Response} type with the {@link Client} being decorated.
  *
  * @param <T_I> the {@link Request} type of the {@link Client} being decorated
  * @param <T_O> the {@link Response} type of the {@link Client} being decorated

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.java
Patch:
@@ -26,7 +26,7 @@
 
 import com.linecorp.armeria.client.Client;
 import com.linecorp.armeria.client.ClientRequestContext;
-import com.linecorp.armeria.client.DecoratingClient;
+import com.linecorp.armeria.client.SimpleDecoratingClient;
 import com.linecorp.armeria.client.circuitbreaker.KeyedCircuitBreakerMapping.KeySelector;
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.Response;
@@ -39,7 +39,7 @@
  * @param <O> the {@link Response} type
  */
 public final class CircuitBreakerClient<I extends Request, O extends Response>
-        extends DecoratingClient<I, O, I, O> {
+        extends SimpleDecoratingClient<I, O> {
 
     private static final Logger logger = LoggerFactory.getLogger(CircuitBreakerClient.class);
 

File: core/src/main/java/com/linecorp/armeria/client/limit/ConcurrencyLimitingClient.java
Patch:
@@ -26,8 +26,8 @@
 
 import com.linecorp.armeria.client.Client;
 import com.linecorp.armeria.client.ClientRequestContext;
-import com.linecorp.armeria.client.DecoratingClient;
 import com.linecorp.armeria.client.ResponseTimeoutException;
+import com.linecorp.armeria.client.SimpleDecoratingClient;
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.RequestContext;
 import com.linecorp.armeria.common.Response;
@@ -48,7 +48,7 @@
  * @param <O> the {@link Response} type
  */
 public abstract class ConcurrencyLimitingClient<I extends Request, O extends Response>
-        extends DecoratingClient<I, O, I, O> {
+        extends SimpleDecoratingClient<I, O> {
 
     private static final long DEFAULT_TIMEOUT_MILLIS = 10000L;
 

File: core/src/main/java/com/linecorp/armeria/client/logging/DropwizardMetricCollectingClient.java
Patch:
@@ -25,7 +25,7 @@
 
 import com.linecorp.armeria.client.Client;
 import com.linecorp.armeria.client.ClientRequestContext;
-import com.linecorp.armeria.client.DecoratingClient;
+import com.linecorp.armeria.client.SimpleDecoratingClient;
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.Response;
 import com.linecorp.armeria.common.RpcRequest;
@@ -55,7 +55,7 @@
  * @param <O> the response type
  */
 public final class DropwizardMetricCollectingClient<I extends Request, O extends Response>
-        extends DecoratingClient<I, O, I, O> {
+        extends SimpleDecoratingClient<I, O> {
 
     /**
      * Returns a {@link Client} decorator that tracks request stats using the Dropwizard metrics library.

File: core/src/main/java/com/linecorp/armeria/client/logging/LoggingClient.java
Patch:
@@ -23,7 +23,7 @@
 
 import com.linecorp.armeria.client.Client;
 import com.linecorp.armeria.client.ClientRequestContext;
-import com.linecorp.armeria.client.DecoratingClient;
+import com.linecorp.armeria.client.SimpleDecoratingClient;
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.Response;
 import com.linecorp.armeria.common.logging.LogLevel;
@@ -36,7 +36,7 @@
  * @param <I> the {@link Request} type
  * @param <O> the {@link Response} type
  */
-public final class LoggingClient<I extends Request, O extends Response> extends DecoratingClient<I, O, I, O> {
+public final class LoggingClient<I extends Request, O extends Response> extends SimpleDecoratingClient<I, O> {
 
     private static final Logger logger = LoggerFactory.getLogger(LoggingClient.class);
 

File: core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.function.Supplier;
 
 import com.linecorp.armeria.client.Client;
-import com.linecorp.armeria.client.DecoratingClient;
+import com.linecorp.armeria.client.SimpleDecoratingClient;
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.Response;
 
@@ -31,7 +31,7 @@
  * @param <O> the {@link Response} type
  */
 public abstract class RetryingClient<I extends Request, O extends Response>
-        extends DecoratingClient<I, O, I, O> {
+        extends SimpleDecoratingClient<I, O> {
     private final Supplier<? extends Backoff> backoffSupplier;
     private final RetryRequestStrategy<I, O> retryStrategy;
 

File: core/src/main/java/com/linecorp/armeria/server/DecoratingService.java
Patch:
@@ -19,14 +19,14 @@
 import static java.util.Objects.requireNonNull;
 
 import java.util.Optional;
-import java.util.function.Function;
 
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.Response;
 
 /**
- * A {@link Service} that decorates another {@link Service}. Do not use this class unless you want to define
- * a new dedicated {@link Service} type by extending this class; prefer {@link Service#decorate(Function)}.
+ * A {@link Service} that decorates another {@link Service}. Use {@link SimpleDecoratingService} or
+ * {@link Service#decorate(DecoratingServiceFunction)} if your {@link Service} has the same {@link Request}
+ * and {@link Response} type with the {@link Service} being decorated.
  *
  * @param <T_I> the {@link Request} type of the {@link Service} being decorated
  * @param <T_O> the {@link Response} type of the {@link Service} being decorated

File: core/src/main/java/com/linecorp/armeria/server/DecoratingServiceFunction.java
Patch:
@@ -20,7 +20,7 @@
 import com.linecorp.armeria.common.Response;
 
 /**
- * A functional interface that enables building a {@link DecoratingService} with
+ * A functional interface that enables building a {@link SimpleDecoratingService} with
  * {@link Service#decorate(DecoratingServiceFunction)}.
  *
  * @param <I> the {@link Request} type

File: core/src/main/java/com/linecorp/armeria/server/FunctionalDecoratingService.java
Patch:
@@ -28,7 +28,7 @@
  * @see Service#decorate(DecoratingServiceFunction)
  */
 final class FunctionalDecoratingService<I extends Request, O extends Response>
-        extends DecoratingService<I, O, I, O> {
+        extends SimpleDecoratingService<I, O> {
 
     private final DecoratingServiceFunction<? super I, ? extends O> function;
 

File: core/src/main/java/com/linecorp/armeria/server/http/auth/HttpAuthService.java
Patch:
@@ -34,12 +34,12 @@
 import com.linecorp.armeria.server.DecoratingService;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
+import com.linecorp.armeria.server.SimpleDecoratingService;
 
 /**
  * A {@link DecoratingService} that provides HTTP authorization functionality.
  */
-public abstract class HttpAuthService
-        extends DecoratingService<HttpRequest, HttpResponse, HttpRequest, HttpResponse> {
+public abstract class HttpAuthService extends SimpleDecoratingService<HttpRequest, HttpResponse> {
 
     private static final Logger logger = LoggerFactory.getLogger(HttpAuthService.class);
 

File: core/src/main/java/com/linecorp/armeria/server/http/encoding/HttpEncodingService.java
Patch:
@@ -27,6 +27,7 @@
 import com.linecorp.armeria.server.DecoratingService;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
+import com.linecorp.armeria.server.SimpleDecoratingService;
 import com.linecorp.armeria.server.http.HttpService;
 
 /**
@@ -35,7 +36,7 @@
  * type to encode, and the response either has no fixed content length or the length is larger than 1KB.
  */
 public class HttpEncodingService
-        extends DecoratingService<HttpRequest, HttpResponse, HttpRequest, HttpResponse> {
+        extends SimpleDecoratingService<HttpRequest, HttpResponse> {
 
     private static final Predicate<MediaType> DEFAULT_ENCODABLE_CONTENT_TYPE_PREDICATE =
             contentType -> Stream.of(MediaType.ANY_TEXT_TYPE,

File: core/src/main/java/com/linecorp/armeria/server/logging/DropwizardMetricCollectingService.java
Patch:
@@ -30,9 +30,9 @@
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogAvailability;
 import com.linecorp.armeria.internal.logging.DropwizardMetricCollector;
-import com.linecorp.armeria.server.DecoratingService;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
+import com.linecorp.armeria.server.SimpleDecoratingService;
 
 /**
  * Decorates a {@link Service} to collect metrics into Dropwizard {@link MetricRegistry}.
@@ -55,7 +55,7 @@
  * @param <O> the {@link Response} type
  */
 public final class DropwizardMetricCollectingService<I extends Request, O extends Response>
-        extends DecoratingService<I, O, I, O> {
+        extends SimpleDecoratingService<I, O> {
 
     /**
      * Returns a new {@link Service} decorator that tracks request stats using the Dropwizard metrics

File: core/src/main/java/com/linecorp/armeria/server/logging/LoggingService.java
Patch:
@@ -25,17 +25,17 @@
 import com.linecorp.armeria.common.logging.LogLevel;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogAvailability;
-import com.linecorp.armeria.server.DecoratingService;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
+import com.linecorp.armeria.server.SimpleDecoratingService;
 
 /**
  * Decorates a {@link Service} to log {@link Request}s and {@link Response}s.
  *
  * @param <I> the {@link Request} type
  * @param <O> the {@link Response} type
  */
-public class LoggingService<I extends Request, O extends Response> extends DecoratingService<I, O, I, O> {
+public class LoggingService<I extends Request, O extends Response> extends SimpleDecoratingService<I, O> {
 
     private static final String REQUEST_FORMAT = "Request: {}";
     private static final String RESPONSE_FORMAT = "Response: {}";

File: core/src/main/java/com/linecorp/armeria/server/logging/structured/StructuredLoggingService.java
Patch:
@@ -22,12 +22,12 @@
 import com.linecorp.armeria.common.Response;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogAvailability;
-import com.linecorp.armeria.server.DecoratingService;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerListenerAdapter;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceConfig;
 import com.linecorp.armeria.server.ServiceRequestContext;
+import com.linecorp.armeria.server.SimpleDecoratingService;
 
 /**
  * A decorating service which provides support of structured and optionally externalized request/response
@@ -38,7 +38,7 @@
  * @param <L> the type of the structured log representation
  */
 public abstract class StructuredLoggingService<I extends Request, O extends Response, L>
-        extends DecoratingService<I, O, I, O> {
+        extends SimpleDecoratingService<I, O> {
 
     private final StructuredLogBuilder<L> logBuilder;
     private Server associatedServer;

File: core/src/test/java/com/linecorp/armeria/server/ServerTest.java
Patch:
@@ -108,7 +108,7 @@ protected void doPost(ServiceRequestContext ctx,
 
         // Disable request timeout for '/timeout-not' only.
         final Function<Service<HttpRequest, HttpResponse>, Service<HttpRequest, HttpResponse>> decorator =
-                s -> new DecoratingService<HttpRequest, HttpResponse, HttpRequest, HttpResponse>(s) {
+                s -> new SimpleDecoratingService<HttpRequest, HttpResponse>(s) {
                     @Override
                     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
                         ctx.setRequestTimeoutMillis(

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/AbstractThriftOverHttpTest.java
Patch:
@@ -49,11 +49,11 @@
 import com.linecorp.armeria.common.thrift.ThriftProtocolFactories;
 import com.linecorp.armeria.common.thrift.ThriftReply;
 import com.linecorp.armeria.common.util.Exceptions;
-import com.linecorp.armeria.server.DecoratingService;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
+import com.linecorp.armeria.server.SimpleDecoratingService;
 import com.linecorp.armeria.server.logging.LoggingService;
 import com.linecorp.armeria.service.test.thrift.main.HelloService;
 import com.linecorp.armeria.service.test.thrift.main.HelloService.AsyncIface;
@@ -121,7 +121,7 @@ protected String getResponse(String name) {
 
             final Function<Service<HttpRequest, HttpResponse>,
                            Service<HttpRequest, HttpResponse>> logCollectingDecorator =
-                    s -> new DecoratingService<HttpRequest, HttpResponse, HttpRequest, HttpResponse>(s) {
+                    s -> new SimpleDecoratingService<HttpRequest, HttpResponse>(s) {
                         @Override
                         public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
                             if (recordMessageLogs) {

File: zipkin/src/main/java/com/linecorp/armeria/client/tracing/AbstractTracingClient.java
Patch:
@@ -34,6 +34,7 @@
 import com.linecorp.armeria.client.Client;
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.DecoratingClient;
+import com.linecorp.armeria.client.SimpleDecoratingClient;
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.Response;
 import com.linecorp.armeria.common.RpcRequest;
@@ -50,7 +51,7 @@
  * @param <O> the {@link Response} type
  */
 public abstract class AbstractTracingClient<I extends Request, O extends Response>
-        extends DecoratingClient<I, O, I, O> {
+        extends SimpleDecoratingClient<I, O> {
 
     private final ClientTracingInterceptor clientInterceptor;
 

File: zipkin/src/main/java/com/linecorp/armeria/server/tracing/AbstractTracingService.java
Patch:
@@ -36,6 +36,7 @@
 import com.linecorp.armeria.server.DecoratingService;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
+import com.linecorp.armeria.server.SimpleDecoratingService;
 
 /**
  * An abstract {@link DecoratingService} that traces incoming {@link Request}s.
@@ -47,7 +48,7 @@
  * @param <O> the {@link Response} type
  */
 public abstract class AbstractTracingService<I extends Request, O extends Response>
-        extends DecoratingService<I, O, I, O> {
+        extends SimpleDecoratingService<I, O> {
 
     private final ServerTracingInterceptor serverInterceptor;
 

File: zipkin/src/main/java/com/linecorp/armeria/server/tracing/AbstractTracingService.java
Patch:
@@ -68,8 +68,8 @@ public O serve(ServiceRequestContext ctx, I req) throws Exception {
         final ServerSpan serverSpan = serverInterceptor.openSpan(requestAdapter);
         try {
             if (serverSpan != null) {
-                ctx.onEnter(() -> serverInterceptor.setSpan(serverSpan));
-                ctx.onExit(serverInterceptor::clearSpan);
+                ctx.onEnter(unused -> serverInterceptor.setSpan(serverSpan));
+                ctx.onExit(unused -> serverInterceptor.clearSpan());
                 if (serverSpan.getSample()) {
                     ctx.log().addListener(log -> closeSpan(ctx, serverSpan, log),
                                           RequestLogAvailability.COMPLETE);

File: zipkin/src/test/java/com/linecorp/armeria/server/tracing/TracingServiceTest.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
+import java.util.function.Consumer;
 import java.util.stream.Collectors;
 
 import org.junit.Test;
@@ -119,8 +120,8 @@ private static SpanCollectingReporter testServiceInvocation(boolean sampled) thr
         when(ctx.method()).thenReturn("POST");
         when(ctx.log()).thenReturn(log);
         when(ctx.logBuilder()).thenReturn(log);
-        ctx.onEnter(isA(Runnable.class));
-        ctx.onExit(isA(Runnable.class));
+        ctx.onEnter(isA(Consumer.class));
+        ctx.onExit(isA(Consumer.class));
 
         RpcResponse res = RpcResponse.of("Hello, trustin!");
         when(delegate.serve(ctx, req)).thenReturn(res);

File: core/src/main/java/com/linecorp/armeria/client/http/HttpSessionChannelFactory.java
Patch:
@@ -48,7 +48,7 @@ class HttpSessionChannelFactory implements Function<PoolKey, Future<Channel>> {
     private final Map<SessionProtocol, Bootstrap> bootstrapMap;
     private final SessionOptions options;
 
-    HttpSessionChannelFactory(Bootstrap bootstrap,SessionOptions options) {
+    HttpSessionChannelFactory(Bootstrap bootstrap, SessionOptions options) {
         baseBootstrap = requireNonNull(bootstrap);
         eventLoop = (EventLoop) bootstrap.config().group();
 

File: core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java
Patch:
@@ -450,6 +450,9 @@ public void cancel() {
                                                : CANCELLED_CLOSE;
 
                 publisher.pushObject(closeEvent);
+            } else {
+                // Ensure the closeFuture is notified if not notified yet.
+                publisher.notifySubscriber();
             }
         }
 

File: core/src/main/java/com/linecorp/armeria/server/docs/ExceptionInfo.java
Patch:
@@ -75,10 +75,10 @@ public String docString() {
     }
 
     @Override
-    public Set<Class<?>> findNamedTypes() {
-        final Set<Class<?>> collectedNamedTypes = new HashSet<>();
+    public Set<TypeSignature> findNamedTypes() {
+        final Set<TypeSignature> collectedNamedTypes = new HashSet<>();
         fields().forEach(f -> ServiceInfo.findNamedTypes(collectedNamedTypes, f.typeSignature()));
-        return ImmutableSortedSet.copyOf(comparing(Class::getName), collectedNamedTypes);
+        return ImmutableSortedSet.copyOf(comparing(TypeSignature::name), collectedNamedTypes);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/server/docs/NamedTypeInfo.java
Patch:
@@ -46,7 +46,7 @@ public interface NamedTypeInfo {
     /**
      * Returns all enum, struct and exception types referred by this type.
      */
-    default Set<Class<?>> findNamedTypes() {
+    default Set<TypeSignature> findNamedTypes() {
         return ImmutableSet.of();
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/docs/StructInfo.java
Patch:
@@ -75,10 +75,10 @@ public String docString() {
     }
 
     @Override
-    public Set<Class<?>> findNamedTypes() {
-        final Set<Class<?>> collectedNamedTypes = new HashSet<>();
+    public Set<TypeSignature> findNamedTypes() {
+        final Set<TypeSignature> collectedNamedTypes = new HashSet<>();
         fields().forEach(f -> ServiceInfo.findNamedTypes(collectedNamedTypes, f.typeSignature()));
-        return ImmutableSortedSet.copyOf(comparing(Class::getName), collectedNamedTypes);
+        return ImmutableSortedSet.copyOf(comparing(TypeSignature::name), collectedNamedTypes);
     }
 
     @Override

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftSerializationFormatsTest.java
Patch:
@@ -44,7 +44,7 @@ public void findByMediaType() {
         assertThat(find(parse("application/x-thrift; protocol=tbinary"))).containsSame(BINARY);
         assertThat(find(parse("application/x-thrift;protocol=TCompact"))).containsSame(COMPACT);
         assertThat(find(parse("application/x-thrift ; protocol=\"TjSoN\""))).containsSame(JSON);
-        assertThat(find(parse("application/x-thrift ; version=3;protocol=ttext"))).containsSame(TEXT);
+        assertThat(find(parse("application/x-thrift ; version=3;protocol=ttext"))).isEmpty();
     }
 
     @Test

File: thrift/src/main/java/com/linecorp/armeria/server/thrift/ThriftDocString.java
Patch:
@@ -42,6 +42,8 @@
 import com.google.common.base.Strings;
 import com.google.common.collect.ImmutableMap;
 
+import com.linecorp.armeria.server.docs.DocService;
+
 /**
  * {@link ThriftDocString} is a DocString extractor for Thrift IDL JSON.
  *
@@ -62,7 +64,7 @@ final class ThriftDocString {
 
     private static final String FQCN_DELIM = ".";
 
-    private static final String DELIM = "#";
+    private static final String DELIM = "/";
 
     private static final Map<ClassLoader, Map<String, String>> cached = new ConcurrentHashMap<>();
 

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftDocStringTest.java
Patch:
@@ -35,7 +35,7 @@ public void testThriftTestJson() {
                 getClass().getClassLoader(),
                 "META-INF/armeria/thrift/ThriftTest.json");
         assertThat(docStrings.get("thrift.test.Numberz"), is("Docstring!"));
-        assertThat(docStrings.get("thrift.test.ThriftTest#testVoid"),
+        assertThat(docStrings.get("thrift.test.ThriftTest/testVoid"),
                    is("Prints \"testVoid()\" and returns nothing."));
     }
 

File: thrift/src/test/java/com/linecorp/armeria/common/thrift/text/TTextProtocolTest.java
Patch:
@@ -42,6 +42,7 @@
 
 import com.linecorp.armeria.common.thrift.text.RpcDebugService.doDebug_args;
 import com.linecorp.armeria.common.thrift.text.RpcDebugService.doDebug_result;
+import com.linecorp.armeria.internal.thrift.TApplicationExceptions;
 
 /**
  * Tests the TTextProtocol.
@@ -350,7 +351,7 @@ public void rpcTApplicationException() throws Exception {
         TTextProtocol prot = new TTextProtocol(
                 new TIOStreamTransport(new ByteArrayInputStream(request.getBytes())));
         TMessage header = prot.readMessageBegin();
-        TApplicationException result = TApplicationException.read(prot);
+        TApplicationException result = TApplicationExceptions.read(prot);
         prot.readMessageEnd();
 
         assertEquals("doDebug", header.name);

File: thrift/src/test/java/com/linecorp/armeria/it/thrift/ThriftThreadLocalHttpHeaderTest.java
Patch:
@@ -143,7 +143,7 @@ private static void assertAuthorizationFailure(Iface client, String expectedSecr
                 .hasMessageContaining(expectedMessage);
     }
 
-    private static final class Callback implements AsyncMethodCallback<Object> {
+    private static final class Callback implements AsyncMethodCallback<String> {
 
         private final BlockingQueue<Object> result;
 
@@ -152,7 +152,7 @@ private static final class Callback implements AsyncMethodCallback<Object> {
         }
 
         @Override
-        public void onComplete(Object response) {
+        public void onComplete(String response) {
             result.add(response);
         }
 

File: jetty/src/main/java/com/linecorp/armeria/server/http/jetty/JettyService.java
Patch:
@@ -113,7 +113,8 @@ static JettyService forConfig(JettyServiceConfig config) {
 
             config.handler().ifPresent(server::setHandler);
             config.requestLog().ifPresent(server::setRequestLog);
-            config.sessionIdManager().ifPresent(server::setSessionIdManager);
+            config.sessionIdManagerFactory().ifPresent(
+                    factory -> server.setSessionIdManager(factory.apply(server)));
 
             config.handlerWrappers().forEach(server::insertHandler);
             config.attrs().forEach(server::setAttribute);

File: zookeeper/src/test/java/com/linecorp/armeria/server/zookeeper/ZooKeeperRegistrationTest.java
Patch:
@@ -45,6 +45,7 @@
 import com.linecorp.armeria.server.http.AbstractHttpService;
 
 import junitextensions.OptionAssert;
+import zookeeperjunit.CloseableZooKeeper;
 import zookeeperjunit.ZooKeeperAssert;
 
 public class ZooKeeperRegistrationTest extends TestBase implements ZooKeeperAssert, OptionAssert {
@@ -86,7 +87,7 @@ public void testServerNodeCreateAndDelete() {
         //all servers start and with zNode created
         sampleEndpoints.forEach(
                 endpoint -> assertExists(zNode + '/' + endpoint.host() + '_' + endpoint.port()));
-        instance().connect().forEach(zkClient -> {
+        try (CloseableZooKeeper zkClient = connection()) {
             try {
                 sampleEndpoints.forEach(endpoint -> {
                     try {
@@ -113,7 +114,7 @@ public void testServerNodeCreateAndDelete() {
             } catch (Throwable throwable) {
                 fail(throwable.getMessage());
             }
-        });
+        }
     }
 
     @Test

File: zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/package-info.java
Patch:
@@ -13,8 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-
 /**
  * ZooKeeper-based {@link com.linecorp.armeria.client.endpoint.EndpointGroup} implementation.
  */
-package com.linecorp.armeria.client.endpoint.zookeeper;
+package com.linecorp.armeria.client.zookeeper;

File: core/src/test/java-shared/com/linecorp/armeria/test/AbstractServiceServer.java
Patch:
@@ -23,7 +23,7 @@
 
 import io.netty.util.internal.PlatformDependent;
 
-public abstract class AbstractServiceServer {
+public abstract class AbstractServiceServer implements AutoCloseable {
     private Server server;
 
     protected abstract void configureServer(ServerBuilder sb) throws Exception;
@@ -48,7 +48,8 @@ public int port() {
         return port.localAddress().getPort();
     }
 
-    public void stop() {
+    @Override
+    public void close() {
         server.stop();
     }
 }

File: core/src/main/java/com/linecorp/armeria/server/docs/StructInfo.java
Patch:
@@ -87,8 +87,7 @@ public boolean equals(Object o) {
         }
 
         final StructInfo that = (StructInfo) o;
-        return Objects.equals(name, that.name) &&
-               Objects.equals(fields, that.fields);
+        return name.equals(that.name) && fields.equals(that.fields);
     }
 
     @Override

File: core/src/main/java/com/linecorp/armeria/client/Endpoint.java
Patch:
@@ -48,7 +48,7 @@ public static Endpoint parse(String authority) {
         }
 
         final HostAndPort parsed = HostAndPort.fromString(authority).withDefaultPort(0);
-        return new Endpoint(parsed.getHostText(), parsed.getPort(), 1000);
+        return new Endpoint(parsed.getHost(), parsed.getPort(), 1000);
     }
 
     /**

File: core/src/test/java/com/linecorp/armeria/server/http/file/HttpFileServiceTest.java
Patch:
@@ -51,7 +51,7 @@
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.logging.LoggingService;
 
-import io.netty.handler.codec.http.HttpHeaderDateFormat;
+import io.netty.handler.codec.DateFormatter;
 
 public class HttpFileServiceTest {
 
@@ -292,7 +292,7 @@ private static String assert200Ok(
         final String lastModified;
         assertThat(res.containsHeader(HttpHeaders.LAST_MODIFIED), is(true));
         lastModified = res.getFirstHeader(HttpHeaders.LAST_MODIFIED).getValue();
-        HttpHeaderDateFormat.get().parse(lastModified);
+        DateFormatter.parseHttpDate(lastModified);
 
         // Ensure the content and its type are correct.
         assertThat(EntityUtils.toString(res.getEntity()), is(expectedContent));
@@ -331,7 +331,7 @@ private static void assertStatusLine(CloseableHttpResponse res, String expectedS
     }
 
     private static String currentHttpDate() {
-        return HttpHeaderDateFormat.get().format(new Date());
+        return DateFormatter.format(new Date());
     }
 
     private static String newUri(String path) {

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/interop/ArmeriaGrpcServerInteropTest.java
Patch:
@@ -65,6 +65,7 @@
  * Interop test based on grpc-interop-testing. Should provide reasonable confidence in armeria's
  * handling of the grpc protocol.
  */
+@Ignore // TODO(trustin): Re-enable after upgrading to GRPC 1.1.2.
 public class ArmeriaGrpcServerInteropTest extends AbstractInteropTest {
 
     /** Starts the server with HTTPS. */

File: core/src/main/java/com/linecorp/armeria/client/http/HttpClientFactoryProvider.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.client.http;
 
-import com.google.common.collect.ClassToInstanceMap;
+import java.util.Map;
 
 import com.linecorp.armeria.client.ClientFactory;
 import com.linecorp.armeria.client.ClientFactoryProvider;
@@ -27,8 +27,7 @@
  */
 public final class HttpClientFactoryProvider implements ClientFactoryProvider {
     @Override
-    public ClientFactory newFactory(SessionOptions options,
-                                    ClassToInstanceMap<ClientFactory> dependencies) {
+    public ClientFactory newFactory(SessionOptions options, Map<Class<?>, ClientFactory> dependencies) {
         return new HttpClientFactory(options);
     }
 }

File: core/src/main/java/com/linecorp/armeria/client/http/HttpResponseDecoder.java
Patch:
@@ -23,9 +23,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.common.net.MediaType;
-
 import com.linecorp.armeria.client.ResponseTimeoutException;
+import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.http.HttpData;
 import com.linecorp.armeria.common.http.HttpHeaders;
 import com.linecorp.armeria.common.http.HttpObject;

File: core/src/main/java/com/linecorp/armeria/common/SerializationFormatProvider.java
Patch:
@@ -23,7 +23,6 @@
 import com.google.common.base.Ascii;
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.ImmutableSet;
-import com.google.common.net.MediaType;
 
 /**
  * Registers the {@link SerializationFormat}s dynamically via Java SPI (Service Provider Interface).

File: core/src/main/java/com/linecorp/armeria/server/http/Http1RequestDecoder.java
Patch:
@@ -22,9 +22,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.common.net.MediaType;
-
 import com.linecorp.armeria.common.ContentTooLargeException;
+import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.ProtocolViolationException;
 import com.linecorp.armeria.common.http.HttpData;
 import com.linecorp.armeria.internal.InboundTrafficController;

File: core/src/main/java/com/linecorp/armeria/server/http/Http2RequestDecoder.java
Patch:
@@ -23,9 +23,8 @@
 
 import java.nio.charset.StandardCharsets;
 
-import com.google.common.net.MediaType;
-
 import com.linecorp.armeria.common.ContentTooLargeException;
+import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.http.DefaultHttpRequest;
 import com.linecorp.armeria.common.http.HttpData;
 import com.linecorp.armeria.common.http.HttpHeaderNames;

File: core/src/main/java/com/linecorp/armeria/server/http/HttpResponseSubscriber.java
Patch:
@@ -26,9 +26,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.common.net.MediaType;
-
 import com.linecorp.armeria.common.ClosedSessionException;
+import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.http.HttpData;
 import com.linecorp.armeria.common.http.HttpHeaderNames;
 import com.linecorp.armeria.common.http.HttpHeaders;

File: core/src/main/java/com/linecorp/armeria/server/http/HttpServerHandler.java
Patch:
@@ -36,8 +36,8 @@
 import org.slf4j.LoggerFactory;
 
 import com.google.common.collect.Sets;
-import com.google.common.net.MediaType;
 
+import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.RequestContext;
 import com.linecorp.armeria.common.SessionProtocol;

File: core/src/main/java/com/linecorp/armeria/server/http/encoding/HttpEncodedResponse.java
Patch:
@@ -27,8 +27,7 @@
 
 import org.reactivestreams.Subscriber;
 
-import com.google.common.net.MediaType;
-
+import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.http.FilteredHttpResponse;
 import com.linecorp.armeria.common.http.HttpData;
 import com.linecorp.armeria.common.http.HttpHeaderNames;

File: core/src/main/java/com/linecorp/armeria/server/http/encoding/HttpEncodingService.java
Patch:
@@ -21,8 +21,7 @@
 import java.util.function.Predicate;
 import java.util.stream.Stream;
 
-import com.google.common.net.MediaType;
-
+import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.http.HttpRequest;
 import com.linecorp.armeria.common.http.HttpResponse;
 import com.linecorp.armeria.server.DecoratingService;

File: core/src/main/java/com/linecorp/armeria/server/http/file/HttpFileService.java
Patch:
@@ -32,8 +32,8 @@
 import org.slf4j.LoggerFactory;
 
 import com.google.common.base.Splitter;
-import com.google.common.net.MediaType;
 
+import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.http.HttpData;
 import com.linecorp.armeria.common.http.HttpHeaderNames;

File: core/src/main/java/com/linecorp/armeria/server/http/file/HttpVfs.java
Patch:
@@ -27,8 +27,7 @@
 
 import javax.annotation.Nullable;
 
-import com.google.common.net.MediaType;
-
+import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.http.HttpData;
 
 /**

File: core/src/main/java/com/linecorp/armeria/server/http/file/MimeTypeUtil.java
Patch:
@@ -26,7 +26,8 @@
 import javax.annotation.Nullable;
 
 import com.google.common.base.Ascii;
-import com.google.common.net.MediaType;
+
+import com.linecorp.armeria.common.MediaType;
 
 final class MimeTypeUtil {
 

File: core/src/test/java/com/linecorp/armeria/client/http/HttpClientIntegrationTest.java
Patch:
@@ -39,12 +39,12 @@
 import com.google.common.base.Throwables;
 import com.google.common.io.ByteStreams;
 import com.google.common.io.Closeables;
-import com.google.common.net.MediaType;
 
 import com.linecorp.armeria.client.ClientFactory;
 import com.linecorp.armeria.client.ClientOption;
 import com.linecorp.armeria.client.ClientOptions;
 import com.linecorp.armeria.client.Clients;
+import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.http.AggregatedHttpMessage;
 import com.linecorp.armeria.common.http.HttpData;
 import com.linecorp.armeria.common.http.HttpHeaderNames;

File: core/src/test/java/com/linecorp/armeria/client/http/HttpClientSniTest.java
Patch:
@@ -30,12 +30,11 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import com.google.common.net.MediaType;
-
 import com.linecorp.armeria.client.ClientFactory;
 import com.linecorp.armeria.client.Clients;
 import com.linecorp.armeria.client.SessionOption;
 import com.linecorp.armeria.client.SessionOptions;
+import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.http.AggregatedHttpMessage;
 import com.linecorp.armeria.common.http.HttpRequest;
 import com.linecorp.armeria.common.http.HttpResponseWriter;

File: core/src/test/java/com/linecorp/armeria/server/SniServerTest.java
Patch:
@@ -33,8 +33,7 @@
 import org.junit.AfterClass;
 import org.junit.Test;
 
-import com.google.common.net.MediaType;
-
+import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.http.HttpRequest;
 import com.linecorp.armeria.common.http.HttpResponseWriter;
 import com.linecorp.armeria.common.http.HttpStatus;

File: core/src/test/java/com/linecorp/armeria/server/composition/CompositeServiceTest.java
Patch:
@@ -28,8 +28,7 @@
 import org.apache.http.util.EntityUtils;
 import org.junit.Test;
 
-import com.google.common.net.MediaType;
-
+import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.http.HttpRequest;
 import com.linecorp.armeria.common.http.HttpResponse;
 import com.linecorp.armeria.common.http.HttpResponseWriter;

File: core/src/test/java/com/linecorp/armeria/server/http/HttpServerTest.java
Patch:
@@ -63,7 +63,6 @@
 import com.google.common.base.Throwables;
 import com.google.common.collect.ImmutableList;
 import com.google.common.io.ByteStreams;
-import com.google.common.net.MediaType;
 
 import com.linecorp.armeria.client.ClientBuilder;
 import com.linecorp.armeria.client.ClientFactory;
@@ -74,6 +73,7 @@
 import com.linecorp.armeria.client.http.HttpClient;
 import com.linecorp.armeria.client.http.HttpClientFactory;
 import com.linecorp.armeria.common.ClosedSessionException;
+import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.http.AggregatedHttpMessage;
 import com.linecorp.armeria.common.http.DefaultHttpRequest;

File: core/src/test/java/com/linecorp/armeria/server/http/HttpServiceTest.java
Patch:
@@ -37,8 +37,7 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import com.google.common.net.MediaType;
-
+import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.http.HttpMethod;
 import com.linecorp.armeria.common.http.HttpRequest;
 import com.linecorp.armeria.common.http.HttpResponseWriter;

File: core/src/test/java/com/linecorp/armeria/server/http/file/MimeTypeUtilTest.java
Patch:
@@ -4,7 +4,7 @@
 
 import org.junit.Test;
 
-import com.google.common.net.MediaType;
+import com.linecorp.armeria.common.MediaType;
 
 public class MimeTypeUtilTest {
 

File: grpc/src/main/java/com/linecorp/armeria/common/grpc/GrpcSerializationFormatProvider.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.common.grpc;
 
-import static com.google.common.net.MediaType.create;
+import static com.linecorp.armeria.common.MediaType.create;
 
 import java.util.Set;
 

File: grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcService.java
Patch:
@@ -23,8 +23,7 @@
 
 import javax.annotation.Nullable;
 
-import com.google.common.net.MediaType;
-
+import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.http.HttpHeaderNames;
 import com.linecorp.armeria.common.http.HttpHeaders;
 import com.linecorp.armeria.common.http.HttpRequest;

File: thrift/src/main/java/com/linecorp/armeria/common/thrift/ThriftSerializationFormatProvider.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.common.thrift;
 
-import static com.google.common.net.MediaType.create;
+import static com.linecorp.armeria.common.MediaType.create;
 
 import java.util.Set;
 

File: thrift/src/main/java/com/linecorp/armeria/server/thrift/THttpService.java
Patch:
@@ -45,9 +45,9 @@
 
 import com.google.common.base.Throwables;
 import com.google.common.collect.ImmutableSet;
-import com.google.common.net.MediaType;
 
 import com.linecorp.armeria.common.DefaultRpcResponse;
+import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.RequestContext;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftDocServiceTest.java
Patch:
@@ -92,7 +92,7 @@ protected void configureServer(ServerBuilder sb) {
         sb.serviceAt("/hbase", hbaseService);
         sb.serviceAt("/oneway", onewayHelloService);
 
-        sb.serviceUnder("/docs/", new DocService(EXAMPLE_HTTP_HEADERS).decorate(LoggingService::new));
+        sb.serviceUnder("/docs/", new DocService(EXAMPLE_HTTP_HEADERS.asMap()).decorate(LoggingService::new));
         // FIXME(trustin): Bring the example requests back.
     }
 

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftSerializationFormatsTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.linecorp.armeria.server.thrift;
 
-import static com.google.common.net.MediaType.parse;
+import static com.linecorp.armeria.common.MediaType.parse;
 import static com.linecorp.armeria.common.SerializationFormat.find;
 import static com.linecorp.armeria.common.thrift.ThriftSerializationFormats.BINARY;
 import static com.linecorp.armeria.common.thrift.ThriftSerializationFormats.COMPACT;

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftServiceSpecificationGeneratorTest.java
Patch:
@@ -46,7 +46,6 @@
 import org.junit.Test;
 
 import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableListMultimap;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 
@@ -102,8 +101,8 @@ public void servicesTest() throws Exception {
 
         final ServiceSpecification specification = generator.generate(
                 ImmutableSet.of(helloService, fooService),
-                ImmutableListMultimap.of(HelloService.class, helloExampleHeaders,
-                                         FooService.class, fooExampleHeaders));
+                ImmutableMap.of(HelloService.class, ImmutableList.of(helloExampleHeaders),
+                                FooService.class,   ImmutableList.of(fooExampleHeaders)));
 
         final Map<String, ServiceInfo> services = specification.services();
         assertThat(services).containsOnlyKeys(HelloService.class.getName(), FooService.class.getName());

File: core/src/main/java/com/linecorp/armeria/client/endpoint/EndpointGroupRegistry.java
Patch:
@@ -18,11 +18,12 @@
 
 import static java.util.Objects.requireNonNull;
 
-import java.util.Locale;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.regex.Pattern;
 
+import com.google.common.base.Ascii;
+
 import com.linecorp.armeria.client.Endpoint;
 
 /**
@@ -115,7 +116,7 @@ public static Endpoint selectNode(String groupName) {
     }
 
     private static String normalizeGroupName(String groupName) {
-        return requireNonNull(groupName, "groupName").toLowerCase(Locale.ENGLISH);
+        return Ascii.toLowerCase(requireNonNull(groupName, "groupName"));
     }
 
     private EndpointGroupRegistry() {}

File: core/src/main/java/com/linecorp/armeria/common/http/HttpHeaderNames.java
Patch:
@@ -35,9 +35,9 @@
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
-import java.util.Locale;
 import java.util.Map;
 
+import com.google.common.base.Ascii;
 import com.google.common.collect.ImmutableMap;
 
 import io.netty.util.AsciiString;
@@ -423,8 +423,7 @@ public final class HttpHeaderNames {
      * the allocation rate of {@link AsciiString}.
      */
     public static AsciiString of(String name) {
-        requireNonNull(name, "name");
-        name = name.toLowerCase(Locale.US);
+        name = Ascii.toLowerCase(requireNonNull(name, "name"));
         final AsciiString asciiName = map.get(name);
         return asciiName != null ? asciiName : new AsciiString(name);
     }

File: core/src/main/java/com/linecorp/armeria/server/http/auth/OAuth1aToken.java
Patch:
@@ -16,11 +16,11 @@
 
 package com.linecorp.armeria.server.http.auth;
 
-import java.util.Locale;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
 
+import com.google.common.base.Ascii;
 import com.google.common.base.MoreObjects;
 import com.google.common.base.Strings;
 import com.google.common.collect.ImmutableMap;
@@ -110,7 +110,7 @@ private OAuth1aToken(Map<String, String> params) {
 
             // Empty values are ignored.
             if (!Strings.isNullOrEmpty(value)) {
-                String lowerCased = key.toLowerCase(Locale.US);
+                final String lowerCased = Ascii.toLowerCase(key);
                 if (DEFINED_PARAM_KEYS.contains(lowerCased)) {
                     // If given parameter is defined by Oauth1a protocol, add with lower-cased key.
                     builder.put(lowerCased, value);

File: core/src/main/java/com/linecorp/armeria/server/http/cors/CorsServiceBuilder.java
Patch:
@@ -24,12 +24,13 @@
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.LinkedHashSet;
-import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.function.Function;
 import java.util.function.Supplier;
 
+import com.google.common.base.Ascii;
+
 import com.linecorp.armeria.common.http.HttpHeaderNames;
 import com.linecorp.armeria.common.http.HttpMethod;
 import com.linecorp.armeria.common.http.HttpRequest;
@@ -97,7 +98,7 @@ public static CorsServiceBuilder forOrigins(final String... origins) {
     CorsServiceBuilder(final String... origins) {
         final Set<String> originsCopy = new LinkedHashSet<>();
         for (String o : origins) {
-            originsCopy.add(o.toLowerCase(Locale.ENGLISH));
+            originsCopy.add(Ascii.toLowerCase(o));
         }
         this.origins = Collections.unmodifiableSet(originsCopy);
         anyOriginSupported = false;

File: core/src/main/java/com/linecorp/armeria/server/http/file/MimeTypeUtil.java
Patch:
@@ -21,11 +21,11 @@
 import java.net.URLConnection;
 import java.util.Collections;
 import java.util.HashMap;
-import java.util.Locale;
 import java.util.Map;
 
 import javax.annotation.Nullable;
 
+import com.google.common.base.Ascii;
 import com.google.common.net.MediaType;
 
 final class MimeTypeUtil {
@@ -74,7 +74,7 @@ private static void add(Map<String, MediaType> extensionToMediaType,
                             MediaType mediaType, String... extensions) {
 
         for (String e : extensions) {
-            assert e.toLowerCase(Locale.US).equals(e);
+            assert Ascii.toLowerCase(e).equals(e);
             extensionToMediaType.put(e, mediaType);
         }
     }
@@ -94,7 +94,7 @@ static MediaType guessFromPath(String path, boolean preCompressed) {
             return null;
         }
 
-        final String extension = path.substring(dotIdx + 1).toLowerCase(Locale.US);
+        final String extension = Ascii.toLowerCase(path.substring(dotIdx + 1));
         final MediaType mediaType = EXTENSION_TO_MEDIA_TYPE.get(extension);
         if (mediaType != null) {
             return mediaType;

File: core/src/main/java/com/linecorp/armeria/client/ClientFactoryProvider.java
Patch:
@@ -33,7 +33,7 @@ public interface ClientFactoryProvider {
     ClientFactory newFactory(SessionOptions options, ClassToInstanceMap<ClientFactory> dependencies);
 
     /**
-     * Returns the type of the {@link ClientFactory} required for this provide to create a new
+     * Returns the type of the {@link ClientFactory} required for this provider to create a new
      * {@link ClientFactory}. The {@link Map} which is given when
      * {@link #newFactory(SessionOptions, ClassToInstanceMap)} is invoked will contain the entries
      * for the classes returned by this method and their respective instances.

File: core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java
Patch:
@@ -24,6 +24,7 @@
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.http.DefaultHttpHeaders;
 import com.linecorp.armeria.common.http.HttpHeaders;
+import com.linecorp.armeria.common.http.HttpSessionProtocols;
 import com.linecorp.armeria.common.logging.DefaultRequestLog;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogAvailability;
@@ -73,7 +74,7 @@ public DefaultClientRequestContext(
         responseTimeoutMillis = options.defaultResponseTimeoutMillis();
         maxResponseLength = options.defaultMaxResponseLength();
 
-        if (SessionProtocol.ofHttp().contains(sessionProtocol)) {
+        if (HttpSessionProtocols.isHttp(sessionProtocol)) {
             final HttpHeaders headers = options.getOrElse(ClientOption.HTTP_HEADERS, HttpHeaders.EMPTY_HEADERS);
             if (!headers.isEmpty()) {
                 final HttpHeaders headersCopy = new DefaultHttpHeaders(true, headers.size());

File: core/src/main/java/com/linecorp/armeria/client/http/HttpClientFactoryProvider.java
Patch:
@@ -23,9 +23,9 @@
 import com.linecorp.armeria.client.SessionOptions;
 
 /**
- * A {@link ClientFactoryProvider} that creates a {@link HttpClientFactory}.
+ * {@link ClientFactoryProvider} that creates a {@link HttpClientFactory}.
  */
-public class HttpClientFactoryProvider implements ClientFactoryProvider {
+public final class HttpClientFactoryProvider implements ClientFactoryProvider {
     @Override
     public ClientFactory newFactory(SessionOptions options,
                                     ClassToInstanceMap<ClientFactory> dependencies) {

File: core/src/main/java/com/linecorp/armeria/client/http/HttpSessionChannelFactory.java
Patch:
@@ -21,7 +21,7 @@
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.util.Collections;
-import java.util.EnumMap;
+import java.util.IdentityHashMap;
 import java.util.Map;
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
@@ -52,7 +52,7 @@ class HttpSessionChannelFactory implements Function<PoolKey, Future<Channel>> {
         baseBootstrap = requireNonNull(bootstrap);
         eventLoop = (EventLoop) bootstrap.config().group();
 
-        bootstrapMap = Collections.synchronizedMap(new EnumMap<>(SessionProtocol.class));
+        bootstrapMap = Collections.synchronizedMap(new IdentityHashMap<>());
         this.options = options;
     }
 

File: core/src/main/java/com/linecorp/armeria/internal/logging/DropwizardMetricCollector.java
Patch:
@@ -25,7 +25,7 @@
 import com.codahale.metrics.MetricRegistry;
 
 import com.linecorp.armeria.common.RpcResponse;
-import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.http.HttpSessionProtocols;
 import com.linecorp.armeria.common.logging.RequestLog;
 
 /**
@@ -85,7 +85,7 @@ private static boolean isSuccess(RequestLog log) {
             return false;
         }
 
-        if (SessionProtocol.ofHttp().contains(log.sessionProtocol())) {
+        if (HttpSessionProtocols.isHttp(log.sessionProtocol())) {
             if (log.statusCode() >= 400) {
                 return false;
             }

File: core/src/main/java/com/linecorp/armeria/server/AbstractVirtualHostBuilder.java
Patch:
@@ -37,6 +37,7 @@
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.Response;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.http.HttpSessionProtocols;
 import com.linecorp.armeria.common.util.NativeLibraries;
 
 import io.netty.handler.codec.http2.Http2SecurityUtil;
@@ -180,7 +181,7 @@ public B sslContext(
             SessionProtocol protocol,
             File keyCertChainFile, File keyFile, String keyPassword) throws SSLException {
 
-        if (requireNonNull(protocol, "protocol") != SessionProtocol.HTTPS) {
+        if (requireNonNull(protocol, "protocol") != HttpSessionProtocols.HTTPS) {
             throw new IllegalArgumentException("unsupported protocol: " + protocol);
         }
 

File: core/src/test/java-shared/com/linecorp/armeria/test/AbstractServiceServer.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.test;
 
-import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.http.HttpSessionProtocols;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.ServerPort;
@@ -30,7 +30,7 @@ public abstract class AbstractServiceServer {
 
     @SuppressWarnings("unchecked")
     public <T extends AbstractServiceServer> T start() throws Exception {
-        ServerBuilder sb = new ServerBuilder().port(0, SessionProtocol.HTTP);
+        ServerBuilder sb = new ServerBuilder().port(0, HttpSessionProtocols.HTTP);
         configureServer(sb);
         server = sb.build();
 

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClientTest.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.linecorp.armeria.client.circuitbreaker;
 
+import static com.linecorp.armeria.common.http.HttpSessionProtocols.H2C;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.greaterThan;
 import static org.hamcrest.Matchers.instanceOf;
@@ -46,7 +47,6 @@
 import com.linecorp.armeria.client.circuitbreaker.KeyedCircuitBreakerMapping.KeySelector;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;
-import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.util.Exceptions;
 
 import io.netty.channel.DefaultEventLoop;
@@ -57,13 +57,13 @@ public class CircuitBreakerClientTest {
 
     // Remote invocation parameters
     private static final ClientRequestContext ctx = new DefaultClientRequestContext(
-            new DefaultEventLoop(), SessionProtocol.H2C,
+            new DefaultEventLoop(), H2C,
             Endpoint.of("dummyhost", 8080),
             "POST", "/", "", ClientOptions.DEFAULT,
             RpcRequest.of(Object.class, "methodA", "a", "b"));
 
     private static final ClientRequestContext ctxB = new DefaultClientRequestContext(
-            new DefaultEventLoop(), SessionProtocol.H2C,
+            new DefaultEventLoop(), H2C,
             Endpoint.of("dummyhost", 8080),
             "POST", "/", "", ClientOptions.DEFAULT,
             RpcRequest.of(Object.class, "methodB", "c", "d"));

File: core/src/test/java/com/linecorp/armeria/client/http/HttpClientIdleTimeoutHandlerTest.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.linecorp.armeria.client.http;
 
-import static junit.framework.TestCase.assertFalse;
 import static org.hamcrest.Matchers.is;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 
@@ -27,6 +27,7 @@
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.http.HttpRequest;
+import com.linecorp.armeria.common.http.HttpSessionProtocols;
 import com.linecorp.armeria.internal.InboundTrafficController;
 
 import io.netty.channel.ChannelInboundHandlerAdapter;
@@ -112,7 +113,7 @@ private static final class MockHttpSessionHandler
 
         @Override
         public SessionProtocol protocol() {
-            return SessionProtocol.H2C;
+            return HttpSessionProtocols.H2C;
         }
 
         @Override

File: core/src/test/java/com/linecorp/armeria/common/RequestContextTest.java
Patch:
@@ -51,6 +51,7 @@
 import com.google.common.util.concurrent.MoreExecutors;
 
 import com.linecorp.armeria.common.http.DefaultHttpRequest;
+import com.linecorp.armeria.common.http.HttpSessionProtocols;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
 import com.linecorp.armeria.common.util.SafeCloseable;
@@ -351,7 +352,7 @@ private RequestContext createContext(boolean addContextAwareHandler) {
 
     private class DummyRequestContext extends NonWrappingRequestContext {
         DummyRequestContext() {
-            super(SessionProtocol.HTTP, "GET", "/", new DefaultHttpRequest());
+            super(HttpSessionProtocols.HTTP, "GET", "/", new DefaultHttpRequest());
         }
 
         @Override

File: core/src/test/java/com/linecorp/armeria/internal/logging/DropwizardMetricCollectorTest.java
Patch:
@@ -30,7 +30,7 @@
 import com.codahale.metrics.Timer;
 
 import com.linecorp.armeria.common.SerializationFormat;
-import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.http.HttpSessionProtocols;
 import com.linecorp.armeria.common.logging.RequestLog;
 
 public class DropwizardMetricCollectorTest {
@@ -46,7 +46,7 @@ public void testMetricsForHttp() {
 
         final RequestLog requestLog = mock(RequestLog.class);
 
-        when(requestLog.sessionProtocol()).thenReturn(SessionProtocol.HTTP);
+        when(requestLog.sessionProtocol()).thenReturn(HttpSessionProtocols.HTTP);
         when(requestLog.serializationFormat()).thenReturn(SerializationFormat.NONE);
         when(requestLog.path()).thenReturn("/bar");
         when(requestLog.method()).thenReturn("GET");

File: core/src/test/java/com/linecorp/armeria/server/http/HttpServerPathTest.java
Patch:
@@ -28,9 +28,9 @@
 
 import com.google.common.io.ByteStreams;
 
-import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.http.HttpRequest;
 import com.linecorp.armeria.common.http.HttpResponseWriter;
+import com.linecorp.armeria.common.http.HttpSessionProtocols;
 import com.linecorp.armeria.common.http.HttpStatus;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.ServiceRequestContext;
@@ -42,7 +42,7 @@ public class HttpServerPathTest extends AbstractServerTest {
 
     @Override
     protected void configureServer(ServerBuilder sb) throws Exception {
-        sb.port(0, SessionProtocol.HTTP);
+        sb.port(0, HttpSessionProtocols.HTTP);
         sb.serviceAt("/service/foo", new AbstractHttpService() {
             @Override
             protected void doGet(ServiceRequestContext ctx, HttpRequest req, HttpResponseWriter res)

File: core/src/test/java/com/linecorp/armeria/server/http/HttpServiceTest.java
Patch:
@@ -39,10 +39,10 @@
 
 import com.google.common.net.MediaType;
 
-import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.http.HttpMethod;
 import com.linecorp.armeria.common.http.HttpRequest;
 import com.linecorp.armeria.common.http.HttpResponseWriter;
+import com.linecorp.armeria.common.http.HttpSessionProtocols;
 import com.linecorp.armeria.common.http.HttpStatus;
 import com.linecorp.armeria.server.PathMapping;
 import com.linecorp.armeria.server.Server;
@@ -233,7 +233,7 @@ public static void init() throws Exception {
         server.start().get();
 
         httpPort = server.activePorts().values().stream()
-                         .filter(p -> p.protocol() == SessionProtocol.HTTP).findAny().get().localAddress()
+                         .filter(p -> p.protocol() == HttpSessionProtocols.HTTP).findAny().get().localAddress()
                          .getPort();
     }
 

File: core/src/test/java/com/linecorp/armeria/server/http/file/HttpFileServiceTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.linecorp.armeria.server.http.file;
 
+import static com.linecorp.armeria.common.http.HttpSessionProtocols.HTTP;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.not;
 import static org.hamcrest.Matchers.nullValue;
@@ -46,7 +47,6 @@
 import com.google.common.io.ByteStreams;
 import com.google.common.io.Resources;
 
-import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.logging.LoggingService;
@@ -98,7 +98,7 @@ public static void init() throws Exception {
         server.start().get();
 
         httpPort = server.activePorts().values().stream()
-                .filter(p -> p.protocol() == SessionProtocol.HTTP).findAny().get().localAddress().getPort();
+                         .filter(p -> p.protocol() == HTTP).findAny().get().localAddress().getPort();
     }
 
     @AfterClass

File: core/src/test/java/com/linecorp/armeria/server/http/healthcheck/HttpHealthCheckServiceTest.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.linecorp.armeria.server.http.healthcheck;
 
+import static com.linecorp.armeria.common.http.HttpSessionProtocols.HTTP;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.when;
@@ -34,7 +35,6 @@
 
 import com.google.common.io.ByteStreams;
 
-import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.http.AggregatedHttpMessage;
 import com.linecorp.armeria.common.http.DefaultHttpRequest;
 import com.linecorp.armeria.common.http.HttpHeaders;
@@ -118,7 +118,7 @@ private void assertNotOk() throws Exception {
     @Test
     public void testGet() throws Exception {
         final ServerBuilder builder = new ServerBuilder();
-        builder.port(0, SessionProtocol.HTTP);
+        builder.port(0, HTTP);
         builder.serviceAt("/l7check", new HttpHealthCheckService());
         final Server server = builder.build();
         try {
@@ -143,7 +143,7 @@ public void testGet() throws Exception {
     @Test
     public void testHead() throws Exception {
         final ServerBuilder builder = new ServerBuilder();
-        builder.port(0, SessionProtocol.HTTP);
+        builder.port(0, HTTP);
         builder.serviceAt("/l7check", new HttpHealthCheckService());
         final Server server = builder.build();
         try {

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/interop/ArmeriaGrpcServerBuilder.java
Patch:
@@ -24,7 +24,7 @@
 import javax.annotation.Nullable;
 import javax.net.ssl.SSLException;
 
-import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.http.HttpSessionProtocols;
 import com.linecorp.armeria.server.grpc.GrpcServiceBuilder;
 
 import io.grpc.BindableService;
@@ -77,7 +77,7 @@ public ArmeriaGrpcServerBuilder fallbackHandlerRegistry(@Nullable HandlerRegistr
     @Override
     public ArmeriaGrpcServerBuilder useTransportSecurity(File certChain, File privateKey) {
         try {
-            armeriaServerBuilder.sslContext(SessionProtocol.HTTPS, certChain, privateKey);
+            armeriaServerBuilder.sslContext(HttpSessionProtocols.HTTPS, certChain, privateKey);
         } catch (SSLException e) {
             throw new IllegalArgumentException(e);
         }

File: grpc/src/test/java/com/linecorp/armeria/server/grpc/interop/ArmeriaGrpcServerInteropTest.java
Patch:
@@ -38,7 +38,7 @@
 
 import com.google.protobuf.ByteString;
 
-import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.http.HttpSessionProtocols;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.grpc.GrpcServiceBuilder;
 
@@ -76,7 +76,7 @@ public static void startServer() {
         try {
             SelfSignedCertificate ssc = new SelfSignedCertificate();
             ServerBuilder sb = new ServerBuilder()
-                    .port(0, SessionProtocol.HTTPS)
+                    .port(0, HttpSessionProtocols.HTTPS)
                     .defaultMaxRequestLength(16 * 1024 * 1024)
                     .sslContext(
                             GrpcSslContexts.forServer(ssc.certificate(), ssc.privateKey())

File: retrofit2/src/main/java/com/linecorp/armeria/client/http/retrofit2/ArmeriaRetrofit.java
Patch:
@@ -74,7 +74,7 @@ static HttpUrl convertToOkHttpUrl(URI uri) {
         SessionProtocol sessionProtocol =
                 Scheme.tryParse(uri.getScheme())
                       .map(Scheme::sessionProtocol)
-                      .orElseGet(() -> SessionProtocol.valueOf(uri.getScheme().toUpperCase()));
+                      .orElseGet(() -> SessionProtocol.of(uri.getScheme()));
 
         String protocol = sessionProtocol.isTls() ? "https" : "http";
         String authority = uri.getAuthority();

File: retrofit2/src/test/java/com/linecorp/armeria/client/http/retrofit2/ArmeriaCallFactoryTest.java
Patch:
@@ -33,9 +33,9 @@
 import com.linecorp.armeria.client.endpoint.EndpointGroupRegistry;
 import com.linecorp.armeria.client.endpoint.StaticEndpointGroup;
 import com.linecorp.armeria.client.http.HttpClient;
-import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.http.HttpRequest;
 import com.linecorp.armeria.common.http.HttpResponseWriter;
+import com.linecorp.armeria.common.http.HttpSessionProtocols;
 import com.linecorp.armeria.common.http.HttpStatus;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.ServiceRequestContext;
@@ -127,7 +127,7 @@ ListenableFuture<Response<Void>> postForm(@Field("name") String name,
 
     @Override
     protected void configureServer(ServerBuilder sb) throws Exception {
-        sb.port(0, SessionProtocol.HTTP)
+        sb.port(0, HttpSessionProtocols.HTTP)
           .serviceAt("/pojo", new AbstractHttpService() {
               @Override
               protected void doGet(ServiceRequestContext ctx,

File: thrift/src/main/java/com/linecorp/armeria/client/thrift/THttpClientFactoryProvider.java
Patch:
@@ -27,9 +27,9 @@
 import com.linecorp.armeria.client.http.HttpClientFactory;
 
 /**
- * A {@link ClientFactoryProvider} that creates a {@link THttpClientFactory}.
+ * {@link ClientFactoryProvider} that creates a {@link THttpClientFactory}.
  */
-public class THttpClientFactoryProvider implements ClientFactoryProvider {
+public final class THttpClientFactoryProvider implements ClientFactoryProvider {
     @Override
     public ClientFactory newFactory(SessionOptions options,
                                     ClassToInstanceMap<ClientFactory> dependencies) {

File: thrift/src/main/java/com/linecorp/armeria/common/thrift/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * Thrift-related utility classes.
+ * Thrift-related common classes.
  */
 package com.linecorp.armeria.common.thrift;

File: thrift/src/main/java/com/linecorp/armeria/common/thrift/text/TTextProtocol.java
Patch:
@@ -366,6 +366,7 @@ private <T> void writeNameOrValue(TypedParser<T> helper, T val)
     /////////////////////////////////////////
     @Override
     public TMessage readMessageBegin() throws TException {
+        root = null;
         try {
             readRoot();
         } catch (IOException e) {
@@ -403,6 +404,7 @@ public TMessage readMessageBegin() throws TException {
     public void readMessageEnd() throws TException {
         // We've already finished parsing the top level struct in
         // readMessageBegin, so nothing to do here.
+        root = null;
     }
 
     @Override

File: thrift/src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTServletIntegrationTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package com.linecorp.armeria.client.thrift;
 
-import static com.linecorp.armeria.common.SessionProtocol.H1C;
-import static com.linecorp.armeria.common.SessionProtocol.H2C;
-import static com.linecorp.armeria.common.SessionProtocol.HTTP;
+import static com.linecorp.armeria.common.http.HttpSessionProtocols.H1C;
+import static com.linecorp.armeria.common.http.HttpSessionProtocols.H2C;
+import static com.linecorp.armeria.common.http.HttpSessionProtocols.HTTP;
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;

File: thrift/src/test/java/com/linecorp/armeria/it/thrift/TMultiplexedProtocolIntegrationTest.java
Patch:
@@ -30,7 +30,7 @@
 
 import com.linecorp.armeria.client.Clients;
 import com.linecorp.armeria.common.RpcRequest;
-import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.http.HttpSessionProtocols;
 import com.linecorp.armeria.common.logging.RequestLogAvailability;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.thrift.THttpService;
@@ -46,7 +46,7 @@ public class TMultiplexedProtocolIntegrationTest extends AbstractServerTest {
 
     @Override
     protected void configureServer(ServerBuilder sb) throws Exception {
-        sb.port(0, SessionProtocol.HTTP);
+        sb.port(0, HttpSessionProtocols.HTTP);
         sb.serviceAt(
                 "/", THttpService.of(ImmutableMap.of("", (Iface) name -> "none:" + name,
                                                      "foo", name -> "foo:" + name,

File: zipkin/src/test/java/com/linecorp/armeria/client/tracing/HttpTracingClientTest.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.linecorp.armeria.client.tracing;
 
+import static com.linecorp.armeria.common.http.HttpSessionProtocols.H2C;
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.mock;
@@ -29,7 +30,6 @@
 import com.linecorp.armeria.client.ClientRequestContext;
 import com.linecorp.armeria.client.DefaultClientRequestContext;
 import com.linecorp.armeria.client.Endpoint;
-import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.http.DefaultHttpRequest;
 import com.linecorp.armeria.common.http.HttpHeaders;
 import com.linecorp.armeria.common.http.HttpMethod;
@@ -76,7 +76,7 @@ private static HttpRequest newRequest() {
 
     private static ClientRequestContext newClientContext(HttpRequest req) {
         return new DefaultClientRequestContext(
-                new DefaultEventLoop(), SessionProtocol.H2C, Endpoint.of("localhost", 8080),
+                new DefaultEventLoop(), H2C, Endpoint.of("localhost", 8080),
                 req.method().toString(), req.path(), "", ClientOptions.DEFAULT, req);
     }
 }

File: zipkin/src/test/java/com/linecorp/armeria/client/tracing/TracingClientTest.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.linecorp.armeria.client.tracing;
 
+import static com.linecorp.armeria.common.http.HttpSessionProtocols.H2C;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
@@ -42,7 +43,6 @@
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;
-import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.tracing.HelloService;
 import com.linecorp.armeria.common.tracing.SpanCollectingReporter;
 
@@ -104,10 +104,10 @@ private static SpanCollectingReporter testRemoteInvocationWithSamplingRate(
         final RpcRequest req = RpcRequest.of(HelloService.Iface.class, "hello", "Armeria");
         final RpcResponse res = RpcResponse.of("Hello, Armeria!");
         final ClientRequestContext ctx = new DefaultClientRequestContext(
-                new DefaultEventLoop(), SessionProtocol.H2C, Endpoint.of("localhost", 8080),
+                new DefaultEventLoop(), H2C, Endpoint.of("localhost", 8080),
                 "POST", "/", "", ClientOptions.DEFAULT, req);
 
-        ctx.logBuilder().startRequest(mock(Channel.class), SessionProtocol.H2C, "localhost", "POST", "/");
+        ctx.logBuilder().startRequest(mock(Channel.class), H2C, "localhost", "POST", "/");
         ctx.logBuilder().endRequest();
 
         @SuppressWarnings("unchecked")

File: zipkin/src/test/java/com/linecorp/armeria/it/tracing/HttpTracingIntegrationTest.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.linecorp.armeria.it.tracing;
 
+import static com.linecorp.armeria.common.http.HttpSessionProtocols.HTTP;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import java.util.ArrayList;
@@ -35,7 +36,6 @@
 import com.linecorp.armeria.client.ClientBuilder;
 import com.linecorp.armeria.client.Clients;
 import com.linecorp.armeria.client.tracing.HttpTracingClient;
-import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.http.HttpRequest;
 import com.linecorp.armeria.common.http.HttpResponse;
 import com.linecorp.armeria.common.tracing.HelloService;
@@ -60,7 +60,7 @@ public class HttpTracingIntegrationTest extends AbstractServerTest {
 
     @Override
     protected void configureServer(ServerBuilder sb) throws Exception {
-        sb.port(0, SessionProtocol.HTTP);
+        sb.port(0, HTTP);
 
         sb.serviceAt("/foo", decorate("service/foo", THttpService.of(
                 (AsyncIface) (name, resultHandler) ->

File: zipkin/src/test/java/com/linecorp/armeria/server/tracing/TracingServiceTest.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.linecorp.armeria.server.tracing;
 
+import static com.linecorp.armeria.common.http.HttpSessionProtocols.H2C;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.ArgumentMatchers.isA;
@@ -39,7 +40,6 @@
 
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;
-import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.logging.DefaultRequestLog;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.tracing.HelloService;
@@ -112,7 +112,7 @@ private static SpanCollectingReporter testServiceInvocation(boolean sampled) thr
         final ServiceRequestContext ctx = mock(ServiceRequestContext.class);
         final RpcRequest req = RpcRequest.of(HelloService.Iface.class, "hello", "trustin");
         final DefaultRequestLog log = new DefaultRequestLog(ctx);
-        log.startRequest(mock(Channel.class), SessionProtocol.H2C, "localhost", TEST_METHOD, "/");
+        log.startRequest(mock(Channel.class), H2C, "localhost", TEST_METHOD, "/");
         log.endRequest();
 
         // AbstractTracingService prefers RpcRequest.method() to ctx.method(), so "POST" should be ignored.

File: core/src/main/java/com/linecorp/armeria/common/SerializationFormat.java
Patch:
@@ -34,6 +34,7 @@
  * Serialization format of a remote procedure call and its reply.
  */
 public enum SerializationFormat {
+    // FIXME(trustin): Make serialization formats registered via SPI instead of using non-extensible enum.
 
     /**
      * No serialization format. Used when no serialization/deserialization is desired.

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClientTest.java
Patch:
@@ -48,7 +48,6 @@
 import com.linecorp.armeria.common.RpcResponse;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.util.Exceptions;
-import com.linecorp.armeria.service.test.thrift.main.HelloService;
 
 import io.netty.channel.DefaultEventLoop;
 
@@ -61,13 +60,13 @@ public class CircuitBreakerClientTest {
             new DefaultEventLoop(), SessionProtocol.H2C,
             Endpoint.of("dummyhost", 8080),
             "POST", "/", "", ClientOptions.DEFAULT,
-            RpcRequest.of(HelloService.Iface.class, "methodA", "a", "b"));
+            RpcRequest.of(Object.class, "methodA", "a", "b"));
 
     private static final ClientRequestContext ctxB = new DefaultClientRequestContext(
             new DefaultEventLoop(), SessionProtocol.H2C,
             Endpoint.of("dummyhost", 8080),
             "POST", "/", "", ClientOptions.DEFAULT,
-            RpcRequest.of(HelloService.Iface.class, "methodB", "c", "d"));
+            RpcRequest.of(Object.class, "methodB", "c", "d"));
 
     private static final RpcRequest req = ctx.request();
     private static final RpcRequest reqB = ctxB.request();

File: core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/HttpHealthCheckedEndpointGroupTest.java
Patch:
@@ -24,16 +24,14 @@
 import com.google.common.collect.ImmutableSet;
 
 import com.linecorp.armeria.client.Endpoint;
-import com.linecorp.armeria.client.endpoint.AbstractServiceServer;
 import com.linecorp.armeria.client.endpoint.StaticEndpointGroup;
-import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.http.healthcheck.HttpHealthCheckService;
+import com.linecorp.armeria.test.AbstractServiceServer;
 
 public class HttpHealthCheckedEndpointGroupTest {
 
     private static class ServiceServer extends AbstractServiceServer {
-        private Server server;
         private final String healthCheckPath;
 
         ServiceServer(String healthCheckPath) {

File: core/src/test/java/com/linecorp/armeria/common/RequestContextTest.java
Patch:
@@ -23,10 +23,12 @@
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.when;
 
+import java.util.Collections;
 import java.util.List;
 import java.util.Set;
 import java.util.concurrent.Callable;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.Executor;
 import java.util.concurrent.ExecutorService;
@@ -38,7 +40,6 @@
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
-import org.eclipse.jetty.util.ConcurrentHashSet;
 import org.junit.Assert;
 import org.junit.Rule;
 import org.junit.Test;
@@ -85,7 +86,7 @@ public void contextAwareEventExecutor() throws Exception {
         EventLoop eventLoop = new DefaultEventLoop();
         when(channel.eventLoop()).thenReturn(eventLoop);
         RequestContext context = createContext();
-        Set<Integer> callbacksCalled = new ConcurrentHashSet<>();
+        Set<Integer> callbacksCalled = Collections.newSetFromMap(new ConcurrentHashMap<>());
         EventExecutor executor = context.contextAwareEventLoop();
         CountDownLatch latch = new CountDownLatch(18);
         executor.execute(() -> checkCallback(1, context, callbacksCalled, latch));

File: logback/src/test/java/com/linecorp/armeria/common/logback/RequestContextExportingAppenderTest.java
Patch:
@@ -57,6 +57,8 @@
 import com.linecorp.armeria.common.http.HttpHeaders;
 import com.linecorp.armeria.common.http.HttpMethod;
 import com.linecorp.armeria.common.http.HttpRequest;
+import com.linecorp.armeria.common.logback.HelloService.hello_args;
+import com.linecorp.armeria.common.logback.HelloService.hello_result;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
 import com.linecorp.armeria.common.thrift.ThriftCall;
 import com.linecorp.armeria.common.thrift.ThriftReply;
@@ -67,8 +69,6 @@
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceConfig;
 import com.linecorp.armeria.server.ServiceRequestContext;
-import com.linecorp.armeria.service.core.thrift.v1.ArmeriaService.hello_args;
-import com.linecorp.armeria.service.core.thrift.v1.ArmeriaService.hello_result;
 
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.classic.Logger;

File: thrift/src/main/java/com/linecorp/armeria/server/thrift/ThriftDocString.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.server.docs;
+package com.linecorp.armeria.server.thrift;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -42,6 +42,7 @@
 import com.linecorp.armeria.internal.reflections.util.ClasspathHelper;
 import com.linecorp.armeria.internal.reflections.util.ConfigurationBuilder;
 import com.linecorp.armeria.internal.reflections.util.FilterBuilder;
+import com.linecorp.armeria.server.docs.DocService;
 
 /**
  * {@link ThriftDocString} is a DocString extractor for Thrift IDL JSON.

File: thrift/src/test/java/com/linecorp/armeria/it/metrics/DropwizardMetricsIntegrationTest.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.server.metrics;
+package com.linecorp.armeria.it.metrics;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;

File: thrift/src/test/java/com/linecorp/armeria/it/server/GracefulShutdownIntegrationTest.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.server;
+package com.linecorp.armeria.it.server;
 
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static org.assertj.core.api.Assertions.assertThat;
@@ -31,6 +31,7 @@
 import com.linecorp.armeria.client.Clients;
 import com.linecorp.armeria.common.ClosedSessionException;
 import com.linecorp.armeria.common.RequestContext;
+import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.thrift.THttpService;
 import com.linecorp.armeria.service.test.thrift.main.SleepService;
 import com.linecorp.armeria.service.test.thrift.main.SleepService.AsyncIface;

File: thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftDocStringTest.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.server.docs;
+package com.linecorp.armeria.server.thrift;
 
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.nullValue;

File: core/src/main/java/com/linecorp/armeria/client/logging/DropwizardMetricCollectingClient.java
Patch:
@@ -28,10 +28,10 @@
 import com.linecorp.armeria.client.DecoratingClient;
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.Response;
+import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.http.HttpHeaders;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogAvailability;
-import com.linecorp.armeria.common.thrift.ThriftCall;
 import com.linecorp.armeria.internal.logging.DropwizardMetricCollector;
 
 /**
@@ -97,8 +97,8 @@ private static String defaultMetricName(RequestLog log, String metricNamePrefix)
             methodName = ((HttpHeaders) envelope).method().name();
         }
 
-        if (content instanceof ThriftCall) {
-            methodName = ((ThriftCall) content).header().name;
+        if (content instanceof RpcRequest) {
+            methodName = ((RpcRequest) content).method();
         }
 
         if (methodName == null) {

File: core/src/main/java/com/linecorp/armeria/common/logging/NoopRequestLogBuilder.java
Patch:
@@ -39,7 +39,7 @@ public void requestLength(long requestLength) {}
     public void requestEnvelope(Object requestEnvelope) {}
 
     @Override
-    public void requestContent(Object requestContent) {}
+    public void requestContent(Object requestContent, Object rawRequestContent) {}
 
     @Override
     public void deferRequestContent() {}
@@ -71,7 +71,7 @@ public void responseLength(long responseLength) {}
     public void responseEnvelope(Object responseEnvelope) {}
 
     @Override
-    public void responseContent(Object responseContent) {}
+    public void responseContent(Object responseContent, Object rawResponseContent) {}
 
     @Override
     public void deferResponseContent() {}

File: core/src/main/java/com/linecorp/armeria/common/logging/RequestLogListenerInvoker.java
Patch:
@@ -38,7 +38,7 @@ public static void invokeOnRequestLog(RequestLogListener listener, RequestLog lo
         try (SafeCloseable ignored = RequestContext.push(log.context())) {
             listener.onRequestLog(log);
         } catch (Throwable e) {
-            logger.warn("onRequestLog() failed with an exception: {}", e);
+            logger.warn("onRequestLog() failed with an exception:", e);
         }
     }
 

File: core/src/main/java/com/linecorp/armeria/server/http/AbstractHttpService.java
Patch:
@@ -104,7 +104,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
                 // Set the requestContent to null by default.
                 // An implementation can override this behavior by setting the requestContent in do*()
                 // implementation or by calling deferRequestContent().
-                logBuilder.requestContent(null);
+                logBuilder.requestContent(null, null);
             }
 
             // do*() methods are expected to set the serialization format before returning.

File: core/src/main/java/com/linecorp/armeria/server/logging/DropwizardMetricCollectingService.java
Patch:
@@ -25,10 +25,10 @@
 
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.Response;
+import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.http.HttpHeaders;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogAvailability;
-import com.linecorp.armeria.common.thrift.ThriftCall;
 import com.linecorp.armeria.internal.logging.DropwizardMetricCollector;
 import com.linecorp.armeria.server.DecoratingService;
 import com.linecorp.armeria.server.Service;
@@ -105,8 +105,8 @@ private static String defaultMetricName(RequestLog log, String metricNamePrefix)
             methodName = ((HttpHeaders) requestEnvelope).method().name();
         }
 
-        if (requestContent instanceof ThriftCall) {
-            methodName = ((ThriftCall) requestContent).header().name;
+        if (requestContent instanceof RpcRequest) {
+            methodName = ((RpcRequest) requestContent).method();
         }
 
         pathAsMetricName = MoreObjects.firstNonNull(pathAsMetricName, "__UNKNOWN_PATH__");

File: core/src/main/java/com/linecorp/armeria/server/logging/structured/ApacheThriftStructuredLog.java
Patch:
@@ -58,7 +58,7 @@ public class ApacheThriftStructuredLog extends StructuredLog {
     public ApacheThriftStructuredLog(RequestLog reqLog) {
         super(reqLog);
 
-        Object requestContent = reqLog.requestContent();
+        Object requestContent = reqLog.rawRequestContent();
         if (requestContent == null) {
             // Request might be responded as error before reading arguments.
             thriftServiceName = null;
@@ -82,7 +82,7 @@ public ApacheThriftStructuredLog(RequestLog reqLog) {
 
         thriftMethodName = thriftCall.header().name;
         this.thriftCall = thriftCall;
-        thriftReply = (ThriftReply) reqLog.responseContent();
+        thriftReply = (ThriftReply) reqLog.rawResponseContent();
     }
 
     /**

File: core/src/test/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClientTest.java
Patch:
@@ -24,8 +24,8 @@
 import static org.hamcrest.Matchers.not;
 import static org.hamcrest.Matchers.nullValue;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: core/src/test/java/com/linecorp/armeria/it/thrift/TMultiplexedProtocolIntegrationTest.java
Patch:
@@ -29,9 +29,9 @@
 import com.google.common.collect.ImmutableMap;
 
 import com.linecorp.armeria.client.Clients;
+import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.logging.RequestLogAvailability;
-import com.linecorp.armeria.common.thrift.ThriftMessage;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.thrift.THttpService;
 import com.linecorp.armeria.service.test.thrift.main.HelloService.Iface;
@@ -53,9 +53,9 @@ protected void configureServer(ServerBuilder sb) throws Exception {
                                                      "bar", name -> "bar:" + name)).decorate(
                         (delegate, ctx, req) -> {
                             ctx.log().addListener(log -> {
-                                final ThriftMessage call = (ThriftMessage) log.requestContent();
+                                final RpcRequest call = (RpcRequest) log.requestContent();
                                 if (call != null) {
-                                    methodNames.add(call.header().name);
+                                    methodNames.add(call.method());
                                 }
                             }, RequestLogAvailability.REQUEST_CONTENT);
                             return delegate.serve(ctx, req);

File: core/src/test/java/com/linecorp/armeria/server/logging/structured/StructuredLoggingServiceTest.java
Patch:
@@ -84,7 +84,7 @@ protected void configureServer(ServerBuilder sb) {
         sb.serviceAt("/hello", loggingService);
     }
 
-    @Test
+    @Test(timeout = 10000)
     public void testStructuredLogging() throws Exception {
         HelloService.Iface client = newClient();
         client.hello("kawamuray");

File: zipkin/src/main/java/com/linecorp/armeria/client/tracing/AbstractTracingClient.java
Patch:
@@ -39,7 +39,6 @@
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogAvailability;
-import com.linecorp.armeria.common.thrift.ThriftCall;
 
 /**
  * An abstract {@link DecoratingClient} that traces outgoing {@link Request}s.
@@ -121,8 +120,8 @@ protected List<KeyValueAnnotation> annotations(ClientRequestContext ctx, Request
 
     private void closeSpan(ClientRequestContext ctx, Span span, RequestLog log) {
         final Object requestContent = log.requestContent();
-        if (requestContent instanceof ThriftCall) {
-            span.setName(((ThriftCall) requestContent).header().name);
+        if (requestContent instanceof RpcRequest) {
+            span.setName(((RpcRequest) requestContent).method());
         }
         clientInterceptor.closeSpan(span, createResponseAdapter(ctx, log));
     }

File: zipkin/src/main/java/com/linecorp/armeria/server/tracing/AbstractTracingService.java
Patch:
@@ -33,7 +33,6 @@
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogAvailability;
-import com.linecorp.armeria.common.thrift.ThriftCall;
 import com.linecorp.armeria.server.DecoratingService;
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceRequestContext;
@@ -128,8 +127,8 @@ protected List<KeyValueAnnotation> annotations(ServiceRequestContext ctx, Reques
 
     private void closeSpan(ServiceRequestContext ctx, ServerSpan serverSpan, RequestLog log) {
         final Object requestContent = log.requestContent();
-        if (requestContent instanceof ThriftCall) {
-            serverSpan.getSpan().setName(((ThriftCall) requestContent).header().name);
+        if (requestContent instanceof RpcRequest) {
+            serverSpan.getSpan().setName(((RpcRequest) requestContent).method());
         }
         serverInterceptor.closeSpan(serverSpan, createResponseAdapter(ctx, log));
     }

File: zipkin/src/test/java/com/linecorp/armeria/client/tracing/TracingClientTest.java
Patch:
@@ -17,7 +17,7 @@
 package com.linecorp.armeria.client.tracing;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: core/src/test/java/com/linecorp/armeria/client/endpoint/EndpointGroupRegistryTest.java
Patch:
@@ -32,8 +32,8 @@ public class EndpointGroupRegistryTest {
     @Before
     @After
     public void setUp() {
-        // Just in case the group 'foo' was registered somewhere else.
-        EndpointGroupRegistry.unregister("foo");
+        // Just in case the group 'foo3' was registered somewhere else.
+        EndpointGroupRegistry.unregister("foo3");
     }
 
     @Test

File: core/src/main/java/com/linecorp/armeria/client/endpoint/EndpointGroupRegistry.java
Patch:
@@ -30,15 +30,15 @@
  */
 public final class EndpointGroupRegistry {
 
-    private static final Pattern GROUP_NAME_PATTERN = Pattern.compile("^[-_.a-z]+$");
+    private static final Pattern GROUP_NAME_PATTERN = Pattern.compile("^[-_.0-9a-z]+$");
     private static final Map<String, EndpointSelector> serverGroups = new ConcurrentHashMap<>();
 
     /**
      * Registers the specified {@link EndpointGroup}. If there's already an {@link EndpointGroup} with the
      * specified {@code groupName}, this method will replace it with the new one.
      *
      * @param groupName the case-insensitive name of the {@link EndpointGroup} that matches
-     *                  the regular expression {@code /^[-_.a-zA-Z]+$/}
+     *                  the regular expression {@code /^[-_.0-9a-zA-Z]+$/}
      * @param endpointGroup the {@link EndpointGroup} to register
      * @param endpointSelectionStrategy the {@link EndpointSelectionStrategy} of the registered group
      *

File: retrofit2/src/test/java/com/linecorp/armeria/client/http/retrofit2/ArmeriaCallSubscriberTest.java
Patch:
@@ -47,7 +47,7 @@ private static class ManualMockCallback implements Callback {
         @Override
         public void onFailure(Call call, IOException e) {
             callbackCallingCount++;
-            this.exception = e;
+            exception = e;
         }
 
         @Override

File: retrofit2/src/main/java/com/linecorp/armeria/client/http/retrofit2/ArmeriaCallFactory.java
Patch:
@@ -114,14 +114,14 @@ private static HttpResponse doCall(HttpClient httpClient, Request request) {
                     (key, values) -> headers.add(HttpHeaderNames.of(key), values));
             if (request.body() != null) {
                 headers.set(HttpHeaderNames.CONTENT_TYPE, request.body().contentType().toString());
-                Buffer contentBuffer = new Buffer();
-                try {
+                try (Buffer contentBuffer = new Buffer()) {
                     request.body().writeTo(contentBuffer);
+
+                    return httpClient.execute(headers, contentBuffer.readByteArray());
                 } catch (IOException e) {
                     throw new IllegalArgumentException(
                             "Failed to convert RequestBody to HttpData. " + request.method(), e);
                 }
-                return httpClient.execute(headers, contentBuffer.readByteArray());
             }
             return httpClient.execute(headers);
         }

File: core/src/main/java/com/linecorp/armeria/client/http/HttpRequestSubscriber.java
Patch:
@@ -285,6 +285,7 @@ private boolean cancelTimeout() {
             return true;
         }
 
+        this.timeoutFuture = null;
         return timeoutFuture.cancel(false);
     }
 

File: core/src/main/java/com/linecorp/armeria/client/http/HttpResponseDecoder.java
Patch:
@@ -218,6 +218,8 @@ private boolean cancelTimeout() {
             if (responseTimeoutFuture == null) {
                 return true;
             }
+
+            this.responseTimeoutFuture = null;
             return responseTimeoutFuture.cancel(false);
         }
 

File: core/src/main/java/com/linecorp/armeria/server/http/HttpResponseSubscriber.java
Patch:
@@ -333,6 +333,7 @@ private boolean cancelTimeout() {
             return true;
         }
 
+        this.timeoutFuture = null;
         return timeoutFuture.cancel(false);
     }
 

File: core/src/main/java/com/linecorp/armeria/common/stream/DeferredStreamMessage.java
Patch:
@@ -152,7 +152,7 @@ public void subscribe(Subscriber<? super T> subscriber) {
     }
 
     @Override
-    public void subscribe(Subscriber<? super T> s, Executor executor) {
+    public void subscribe(Subscriber<? super T> subscriber, Executor executor) {
         requireNonNull(subscriber, "subscriber");
         requireNonNull(executor, "executor");
         subscribe0(subscriber, executor);

File: core/src/main/java/com/linecorp/armeria/server/http/encoding/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * Applies HTTP encoding (e.g. GZIP compression) to responses.
+ * HTTP content encoding service.
  */
 package com.linecorp.armeria.server.http.encoding;

File: core/src/main/java/com/linecorp/armeria/server/http/healthcheck/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * Health check service for load balancers.
+ * HTTP health check service for load balancers.
  */
 package com.linecorp.armeria.server.http.healthcheck;

File: core/src/main/java/com/linecorp/armeria/server/Server.java
Patch:
@@ -234,14 +234,14 @@ private void start(CompletableFuture<Void> future) {
                         new DefaultThreadFactory("armeria-server-boss-epoll", false);
                 final ThreadFactory workerThreadFactory =
                         new DefaultThreadFactory("armeria-server-epoll", false);
-                bossGroup = new EpollEventLoopGroup(1, bossThreadFactory);
+                bossGroup = new EpollEventLoopGroup(config.numBosses(), bossThreadFactory);
                 workerGroup = new EpollEventLoopGroup(config.numWorkers(), workerThreadFactory);
             } else {
                 final ThreadFactory bossThreadFactory =
                         new DefaultThreadFactory("armeria-server-boss-nio", false);
                 final ThreadFactory workerThreadFactory =
                         new DefaultThreadFactory("armeria-server-nio", false);
-                bossGroup = new NioEventLoopGroup(1, bossThreadFactory);
+                bossGroup = new NioEventLoopGroup(config.numBosses(), bossThreadFactory);
                 workerGroup = new NioEventLoopGroup(config.numWorkers(), workerThreadFactory);
             }
 

File: core/src/main/java/com/linecorp/armeria/client/thrift/DefaultTHttpClient.java
Patch:
@@ -22,7 +22,6 @@
 import com.linecorp.armeria.client.ClientBuilderParams;
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.client.UserClient;
-import com.linecorp.armeria.common.DefaultRpcRequest;
 import com.linecorp.armeria.common.DefaultRpcResponse;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;
@@ -45,7 +44,7 @@ public RpcResponse execute(String path, Class<?> serviceType, String method, Obj
     public RpcResponse executeMultiplexed(
             String path, Class<?> serviceType, String serviceName, String method, Object... args) {
         requireNonNull(serviceName, "serviceName");
-        final RpcRequest call = new DefaultRpcRequest(serviceType, method, args);
+        final RpcRequest call = RpcRequest.of(serviceType, method, args);
         return execute(call.method(), path, serviceName, call, DefaultRpcResponse::new);
     }
 }

File: core/src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTest.java
Patch:
@@ -324,6 +324,7 @@ public void testHelloServiceSync() throws Exception {
         HelloService.Iface client = Clients.newClient(clientFactory(), getURI(Handlers.HELLO),
                                                       Handlers.HELLO.iface(), clientOptions);
         assertThat(client.hello("kukuman")).isEqualTo("Hello, kukuman!");
+        assertThat(client.hello(null)).isEqualTo("Hello, null!");
 
         for (int i = 0; i < 10; i++) {
             assertThat(client.hello("kukuman" + i)).isEqualTo("Hello, kukuman" + i + '!');

File: core/src/test/java/com/linecorp/armeria/server/ServiceTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import org.junit.Test;
 
-import com.linecorp.armeria.common.DefaultRpcRequest;
 import com.linecorp.armeria.common.RpcRequest;
 import com.linecorp.armeria.common.RpcResponse;
 
@@ -33,8 +32,7 @@ public class ServiceTest {
     public void testLambdaExpressionDecorator() throws Exception {
         final FooService inner = new FooService();
         final Service<RpcRequest, RpcResponse> outer = inner.decorate((delegate, ctx, req) -> {
-            RpcRequest newReq = new DefaultRpcRequest(
-                    req.serviceType(), "new_" + req.method(), req.params());
+            RpcRequest newReq = RpcRequest.of(req.serviceType(), "new_" + req.method(), req.params());
             return delegate.serve(ctx, newReq);
         });
 

File: core/src/main/java/com/linecorp/armeria/client/UserClient.java
Patch:
@@ -153,7 +153,7 @@ protected final O execute(
             runThreadLocalHeaderManipulator(ctx);
             return delegate().execute(ctx, req);
         } catch (Throwable cause) {
-            ctx.responseLogBuilder().end(cause);
+            ctx.logBuilder().endResponse(cause);
             return fallback.apply(cause);
         }
     }

File: core/src/main/java/com/linecorp/armeria/client/http/HttpClientPipelineConfigurator.java
Patch:
@@ -39,7 +39,7 @@
 import com.linecorp.armeria.client.SessionProtocolNegotiationException;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.http.HttpObject;
-import com.linecorp.armeria.common.logging.ResponseLogBuilder;
+import com.linecorp.armeria.common.logging.RequestLogBuilder;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.common.util.NativeLibraries;
 import com.linecorp.armeria.internal.FlushConsolidationHandler;
@@ -413,7 +413,7 @@ public void onComplete() {}
             });
 
             // NB: No need to set the response timeout because we have session creation timeout.
-            responseDecoder.addResponse(0, null, res, ResponseLogBuilder.NOOP, 0, UPGRADE_RESPONSE_MAX_LENGTH);
+            responseDecoder.addResponse(0, null, res, RequestLogBuilder.NOOP, 0, UPGRADE_RESPONSE_MAX_LENGTH);
             ctx.fireChannelActive();
         }
 

File: core/src/main/java/com/linecorp/armeria/client/http/HttpSessionHandler.java
Patch:
@@ -125,11 +125,11 @@ public boolean invoke(ClientRequestContext ctx, HttpRequest req, DecodedHttpResp
 
         final int numRequestsSent = ++this.numRequestsSent;
         final HttpResponseWrapper wrappedRes =
-                responseDecoder.addResponse(numRequestsSent, req, res, ctx.responseLogBuilder(),
+                responseDecoder.addResponse(numRequestsSent, req, res, ctx.logBuilder(),
                                             responseTimeoutMillis, maxContentLength);
         req.subscribe(
                 new HttpRequestSubscriber(channel, requestEncoder,
-                                          numRequestsSent, req, wrappedRes, ctx.requestLogBuilder(),
+                                          numRequestsSent, req, wrappedRes, ctx.logBuilder(),
                                           writeTimeoutMillis),
                 channel.eventLoop());
 

File: core/src/main/java/com/linecorp/armeria/client/thrift/THttpClient.java
Patch:
@@ -17,7 +17,7 @@
 package com.linecorp.armeria.client.thrift;
 
 import com.linecorp.armeria.client.ClientBuilderParams;
-import com.linecorp.armeria.common.thrift.ThriftReply;
+import com.linecorp.armeria.common.RpcResponse;
 
 /**
  * A generic Thrift-over-HTTP client.
@@ -45,7 +45,7 @@ public interface THttpClient extends ClientBuilderParams {
      * @param method the method name
      * @param args the arguments of the call
      */
-    ThriftReply execute(String path, Class<?> serviceType, String method, Object... args);
+    RpcResponse execute(String path, Class<?> serviceType, String method, Object... args);
 
     /**
      * Executes the specified multiplexed Thrift call.
@@ -56,6 +56,6 @@ public interface THttpClient extends ClientBuilderParams {
      * @param method the method name
      * @param args the arguments of the call
      */
-    ThriftReply executeMultiplexed(
+    RpcResponse executeMultiplexed(
             String path, Class<?> serviceType, String serviceName, String method, Object... args);
 }

File: core/src/main/java/com/linecorp/armeria/client/thrift/THttpClientInvocationHandler.java
Patch:
@@ -30,7 +30,7 @@
 import com.linecorp.armeria.client.ClientBuilderParams;
 import com.linecorp.armeria.client.ClientFactory;
 import com.linecorp.armeria.client.ClientOptions;
-import com.linecorp.armeria.common.thrift.ThriftReply;
+import com.linecorp.armeria.common.RpcResponse;
 import com.linecorp.armeria.common.util.CompletionActions;
 
 final class THttpClientInvocationHandler implements InvocationHandler, ClientBuilderParams {
@@ -116,7 +116,7 @@ private Object invokeClientMethod(Method method, Object[] args) throws Throwable
         }
 
         try {
-            final ThriftReply reply = thriftClient.executeMultiplexed(
+            final RpcResponse reply = thriftClient.executeMultiplexed(
                     path, params.clientType(), fragment, method.getName(), args);
 
             if (callback != null) {

File: core/src/main/java/com/linecorp/armeria/common/Request.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.linecorp.armeria.common.http.HttpRequest;
 import com.linecorp.armeria.common.stream.StreamMessage;
-import com.linecorp.armeria.common.thrift.ThriftCall;
 
 /**
  * A request. It is usually one of the following:
@@ -28,7 +27,7 @@
  *       <li>e.g. {@link HttpRequest} whose initial information is its initial HTTP headers</li>
  *     </ul>
  *   </li>
- *   <li>A simple object whose content is readily available. e.g. {@link ThriftCall}</li>
+ *   <li>A simple object whose content is readily available. e.g. {@link RpcRequest}</li>
  * </ul>
  */
 public interface Request {}

File: core/src/main/java/com/linecorp/armeria/common/logging/package-info.java
Patch:
@@ -22,8 +22,6 @@
  * <ul>
  *   <li>{@link com.linecorp.armeria.common.logging.RequestLog}</li>
  *   <li>{@link com.linecorp.armeria.common.logging.RequestLogBuilder}</li>
- *   <li>{@link com.linecorp.armeria.common.logging.ResponseLog}</li>
- *   <li>{@link com.linecorp.armeria.common.logging.ResponseLogBuilder}</li>
  * </ul>
  */
 package com.linecorp.armeria.common.logging;

File: core/src/main/java/com/linecorp/armeria/common/thrift/ThriftMessage.java
Patch:
@@ -24,11 +24,11 @@
 /**
  * A container of a Thrift message produced by Apache Thrift.
  */
-public abstract class ApacheThriftMessage {
+public abstract class ThriftMessage {
 
     private final TMessage header;
 
-    ApacheThriftMessage(TMessage header) {
+    ThriftMessage(TMessage header) {
         this.header = requireNonNull(header, "header");
     }
 
@@ -54,7 +54,7 @@ public boolean equals(Object o) {
             return false;
         }
 
-        return header.equals(((ApacheThriftMessage) o).header);
+        return header.equals(((ThriftMessage) o).header);
     }
 
     final String typeStr() {

File: core/src/main/java/com/linecorp/armeria/server/PathMapping.java
Patch:
@@ -143,7 +143,7 @@ static PathMapping ofCatchAll() {
     /**
      * Returns the metric name.
      *
-     * @return the metric name whose components are separated by the specified {@code separator}.
+     * @return the metric name whose components are separated by a dot (.)
      */
     String metricName();
 

File: core/src/main/java/com/linecorp/armeria/server/http/DecodedHttpRequest.java
Patch:
@@ -22,7 +22,6 @@
 import com.linecorp.armeria.common.http.HttpData;
 import com.linecorp.armeria.common.http.HttpHeaders;
 import com.linecorp.armeria.common.http.HttpObject;
-import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.internal.InboundTrafficController;
 import com.linecorp.armeria.server.ServiceRequestContext;
 
@@ -52,7 +51,7 @@ final class DecodedHttpRequest extends DefaultHttpRequest {
 
     void init(ServiceRequestContext ctx) {
         this.ctx = ctx;
-        ctx.requestLogBuilder().attr(RequestLog.HTTP_HEADERS).set(headers());
+        ctx.logBuilder().requestEnvelope(headers());
     }
 
     int id() {
@@ -91,7 +90,7 @@ public boolean write(HttpObject obj) {
             final int length = ((HttpData) obj).length();
             inboundTrafficController.inc(length);
             assert ctx != null : "uninitialized DecodedHttpRequest must be aborted.";
-            ctx.requestLogBuilder().contentLength(transferredBytes);
+            ctx.logBuilder().requestLength(transferredBytes);
         }
         return published;
     }

File: core/src/main/java/com/linecorp/armeria/server/thrift/ThriftService.java
Patch:
@@ -22,9 +22,9 @@
 import java.util.EnumSet;
 import java.util.Set;
 
+import com.linecorp.armeria.common.RpcRequest;
+import com.linecorp.armeria.common.RpcResponse;
 import com.linecorp.armeria.common.SerializationFormat;
-import com.linecorp.armeria.common.thrift.ThriftCall;
-import com.linecorp.armeria.common.thrift.ThriftReply;
 import com.linecorp.armeria.server.Service;
 
 /**
@@ -87,7 +87,7 @@ public static ThriftService ofFormats(
                                  defaultSerializationFormat, allowedSerializationFormatsSet);
     }
 
-    private ThriftService(Service<ThriftCall, ThriftReply> delegate,
+    private ThriftService(Service<RpcRequest, RpcResponse> delegate,
                           SerializationFormat defaultSerializationFormat,
                           Set<SerializationFormat> allowedSerializationFormats) {
         super(delegate, defaultSerializationFormat, allowedSerializationFormats);

File: core/src/test/java/com/linecorp/armeria/common/util/TextFormatterTest.java
Patch:
@@ -23,6 +23,7 @@
 public class TextFormatterTest {
     @Test
     public void testFormatEpoch() throws Exception {
-        assertThat(TextFormatter.epoch(1478601399123L)).isEqualTo("2016-11-08T10:36:39.123Z");
+        assertThat(TextFormatter.epoch(1478601399123L).toString())
+                .isEqualTo("2016-11-08T10:36:39.123Z(1478601399123)");
     }
 }

File: core/src/test/java/com/linecorp/armeria/server/http/healthcheck/HttpHealthCheckServiceTest.java
Patch:
@@ -40,6 +40,7 @@
 import com.linecorp.armeria.common.http.HttpHeaders;
 import com.linecorp.armeria.common.http.HttpMethod;
 import com.linecorp.armeria.common.http.HttpStatus;
+import com.linecorp.armeria.common.logging.DefaultRequestLog;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.ServiceRequestContext;
@@ -67,6 +68,7 @@ public class HttpHealthCheckServiceTest {
 
     @Before
     public void setUp() {
+        when(context.logBuilder()).thenReturn(new DefaultRequestLog(context));
         service = new HttpHealthCheckService(health1, health2, health3);
         service.serverHealth.setHealthy(true);
     }

File: core/src/test/java/com/linecorp/armeria/server/metrics/DropwizardMetricsIntegrationTest.java
Patch:
@@ -25,8 +25,8 @@
 
 import com.linecorp.armeria.client.ClientBuilder;
 import com.linecorp.armeria.client.logging.DropwizardMetricCollectingClient;
-import com.linecorp.armeria.common.thrift.ThriftCall;
-import com.linecorp.armeria.common.thrift.ThriftReply;
+import com.linecorp.armeria.common.RpcRequest;
+import com.linecorp.armeria.common.RpcResponse;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.logging.DropwizardMetricCollectingService;
 import com.linecorp.armeria.server.thrift.THttpService;
@@ -102,7 +102,7 @@ private static String clientMetricName(String method, String property) {
 
     private void makeRequest(String name) {
         Iface client = new ClientBuilder("tbinary+" + uri("/helloservice"))
-                .decorator(ThriftCall.class, ThriftReply.class,
+                .decorator(RpcRequest.class, RpcResponse.class,
                            DropwizardMetricCollectingClient.newDecorator(
                                    metricRegistry, MetricRegistry.name("clients", "HelloService")))
                 .build(Iface.class);

File: core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroup.java
Patch:
@@ -27,13 +27,12 @@
 import java.util.stream.IntStream;
 
 import com.google.common.collect.ImmutableList;
-import com.spotify.futures.CompletableFutures;
 
 import com.linecorp.armeria.client.ClientFactory;
 import com.linecorp.armeria.client.Endpoint;
 import com.linecorp.armeria.client.endpoint.EndpointGroup;
-
-import jp.skypencil.guava.stream.GuavaCollectors;
+import com.linecorp.armeria.internal.futures.CompletableFutures;
+import com.linecorp.armeria.internal.guava.stream.GuavaCollectors;
 
 /**
  * An {@link EndpointGroup} decorator that only provides healthy {@link Endpoint}s.

File: logback/src/main/java/com/linecorp/armeria/common/logback/RequestContextExportingAppender.java
Patch:
@@ -31,6 +31,7 @@
 import com.linecorp.armeria.common.RequestContext;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.ResponseLog;
+import com.linecorp.armeria.internal.fastutil.objects.Object2ObjectOpenHashMap;
 
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.classic.spi.ILoggingEvent;
@@ -45,7 +46,6 @@
 import io.netty.util.AttributeKey;
 import io.netty.util.internal.logging.InternalLoggerFactory;
 import io.netty.util.internal.logging.Slf4JLoggerFactory;
-import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
 
 /**
  * A <a href="http://logback.qos.ch/">Logback</a> {@link Appender} that exports the properties of the current

File: core/src/main/java/com/linecorp/armeria/client/routing/WeightedRoundRobinStrategy.java
Patch:
@@ -102,6 +102,9 @@ public Endpoint select() {
                     }
                 }
             }
+            if (endpoints.isEmpty()) {
+                throw new EndpointGroupException(endpointGroup + " is empty");
+            }
             //endpoints weight equal
             return endpoints.get((int) (currentSequence % endpoints.size()));
         }

File: core/src/main/java/com/linecorp/armeria/client/logging/KeyedChannelPoolLoggingHandler.java
Patch:
@@ -25,7 +25,7 @@
 import com.linecorp.armeria.client.pool.DecoratingKeyedChannelPoolHandler;
 import com.linecorp.armeria.client.pool.KeyedChannelPoolHandler;
 import com.linecorp.armeria.client.pool.PoolKey;
-import com.linecorp.armeria.common.util.UnitFormatter;
+import com.linecorp.armeria.common.util.TextFormatter;
 
 import io.netty.channel.Channel;
 import io.netty.util.AttributeKey;
@@ -91,12 +91,12 @@ StringBuilder status(EventType eventType, StringBuilder buf) {
             switch (eventType) {
             case ACQUIRED:
                 buf.append("was idle for ");
-                UnitFormatter.appendElapsed(buf, lastUsedNanos, currentNanos);
+                TextFormatter.appendElapsed(buf, lastUsedNanos, currentNanos);
                 buf.append(", ");
             case RELEASED:
             case CLOSED:
                 buf.append("used ").append(get()).append(" time(s), ");
-                UnitFormatter.appendElapsed(buf, createdNanos, currentNanos);
+                TextFormatter.appendElapsed(buf, createdNanos, currentNanos);
                 buf.append(" old");
             }
             return buf;

File: zookeeper/src/main/java/com/linecorp/armeria/client/endpoint/zookeeper/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * A ZooKeeper based {@link com.linecorp.armeria.client.routing.EndpointGroup} implementation.
+ * ZooKeeper-based {@link com.linecorp.armeria.client.routing.EndpointGroup} implementation.
  */
 package com.linecorp.armeria.client.endpoint.zookeeper;

File: core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreaker.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * A <a href="http://martinfowler.com/bliki/CircuitBreaker.html">circuit breaker</a>, which tracks the number of
- * succcess/failure requests and detects a remote service failure.
+ * success/failure requests and detects a remote service failure.
  */
 public interface CircuitBreaker {
 

File: core/src/main/java/com/linecorp/armeria/client/routing/StaticEndpointGroup.java
Patch:
@@ -31,7 +31,7 @@ public final class StaticEndpointGroup implements EndpointGroup {
     private final List<Endpoint> endpoints;
 
     /**
-     * Creates a new instace.
+     * Creates a new instance.
      */
     public StaticEndpointGroup(Endpoint... endpoints) {
         requireNonNull(endpoints, "endpoints");
@@ -40,7 +40,7 @@ public StaticEndpointGroup(Endpoint... endpoints) {
     }
 
     /**
-     * Creates a new instace.
+     * Creates a new instance.
      */
     public StaticEndpointGroup(Iterable<Endpoint> endpoints) {
         requireNonNull(endpoints, "endpoints");

File: core/src/main/java/com/linecorp/armeria/server/ChainedVirtualHostBuilder.java
Patch:
@@ -76,8 +76,8 @@ public final class ChainedVirtualHostBuilder extends AbstractVirtualHostBuilder<
 
     /**
      * Returns the parent {@link ServerBuilder}.
-     * 
-     * @return serverBuiler the parent {@link ServerBuilder}.
+     *
+     * @return serverBuilder the parent {@link ServerBuilder}.
      */
     public ServerBuilder and() {
         return serverBuilder;

File: core/src/test/java/com/linecorp/armeria/client/http/HttpClientIntegrationTest.java
Patch:
@@ -259,7 +259,7 @@ public void testNot200WithSimpleClient() throws Exception {
     }
 
     /**
-     * When the request path contains double slashes, they should be replaced with sigle slashes.
+     * When the request path contains double slashes, they should be replaced with single slashes.
      */
     @Test
     public void testDoubleSlashSuppression() throws Exception {

File: jetty/src/main/java/com/linecorp/armeria/server/http/jetty/JettyService.java
Patch:
@@ -373,7 +373,7 @@ public void send(MetaData.Response info, boolean head,
             }
 
             if (content.hasArray()) {
-                final int from = content.arrayOffset();
+                final int from = content.arrayOffset() + content.position();
                 out.add(HttpData.of(Arrays.copyOfRange(content.array(), from, from + length)));
                 content.position(content.position() + length);
             } else {

File: core/src/main/java/com/linecorp/armeria/client/http/HttpClient.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.nio.charset.Charset;
 
-import com.linecorp.armeria.client.ClientOptionDerivable;
+import com.linecorp.armeria.client.ClientBuilderParams;
 import com.linecorp.armeria.common.http.AggregatedHttpMessage;
 import com.linecorp.armeria.common.http.HttpData;
 import com.linecorp.armeria.common.http.HttpHeaders;
@@ -29,7 +29,7 @@
 /**
  * An HTTP client.
  */
-public interface HttpClient extends ClientOptionDerivable<HttpClient> {
+public interface HttpClient extends ClientBuilderParams {
 
     /**
      * Sends the specified HTTP request.

File: core/src/main/java/com/linecorp/armeria/client/http/SimpleHttpClient.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.client.http;
 
-import com.linecorp.armeria.client.ClientOptionDerivable;
+import com.linecorp.armeria.client.ClientBuilderParams;
 import com.linecorp.armeria.common.http.AggregatedHttpMessage;
 
 import io.netty.util.concurrent.Future;
@@ -28,7 +28,7 @@
  * @see SimpleHttpRequestBuilder
  */
 @Deprecated
-public interface SimpleHttpClient extends ClientOptionDerivable<SimpleHttpClient> {
+public interface SimpleHttpClient extends ClientBuilderParams {
     /**
      * Sends the specified {@code request} to the HTTP server asynchronously.
      *

File: core/src/main/java/com/linecorp/armeria/client/thrift/THttpClient.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.linecorp.armeria.client.thrift;
 
-import com.linecorp.armeria.client.ClientOptionDerivable;
+import com.linecorp.armeria.client.ClientBuilderParams;
 import com.linecorp.armeria.common.thrift.ThriftReply;
 
 /**
@@ -36,7 +36,7 @@
  * client.execute("/foo", FooService.Iface.class, "foo", "arg1", "arg2", ...);
  * }</pre>
  */
-public interface THttpClient extends ClientOptionDerivable<THttpClient> {
+public interface THttpClient extends ClientBuilderParams {
     /**
      * Executes the specified Thrift call.
      *

File: core/src/main/java/com/linecorp/armeria/common/http/DefaultHttpData.java
Patch:
@@ -18,6 +18,9 @@
 
 import com.google.common.base.MoreObjects;
 
+/**
+ * Default {@link HttpData} implementation.
+ */
 public final class DefaultHttpData implements HttpData {
 
     private final byte[] data;

File: retrofit2/src/main/java/com/linecorp/armeria/client/http/retrofit2/ArmeriaCallFactory.java
Patch:
@@ -36,6 +36,7 @@
 import okhttp3.Request;
 import okhttp3.Response;
 import okhttp3.ResponseBody;
+import okio.Buffer;
 
 /**
  * A {@link Call.Factory} that creates a {@link Call} instance for {@link HttpClient}.
@@ -111,15 +112,14 @@ private static HttpResponse doCall(HttpClient httpClient, Request request) {
                     (key, values) -> headers.add(HttpHeaderNames.of(key), values));
             if (request.body() != null) {
                 headers.set(HttpHeaderNames.CONTENT_TYPE, request.body().contentType().toString());
-                final BufferSinkHttpData contentBuffer;
+                Buffer contentBuffer = new Buffer();
                 try {
-                    contentBuffer = new BufferSinkHttpData((int) request.body().contentLength());
                     request.body().writeTo(contentBuffer);
                 } catch (IOException e) {
                     throw new IllegalArgumentException(
                             "Failed to convert RequestBody to HttpData. " + request.method(), e);
                 }
-                return httpClient.execute(headers, contentBuffer);
+                return httpClient.execute(headers, contentBuffer.readByteArray());
             }
             return httpClient.execute(headers);
         }

File: core/src/main/java/com/linecorp/armeria/server/ServerConfig.java
Patch:
@@ -381,6 +381,9 @@ public Duration gracefulShutdownTimeout() {
 
     /**
      * Returns the {@link ExecutorService} dedicated to the execution of blocking tasks or invocations.
+     * Note that the {@link ExecutorService} returned by this method does not set the
+     * {@link ServiceRequestContext} when executing a submitted task.
+     * Use {@link ServiceRequestContext#blockingTaskExecutor()} if possible.
      */
     public ExecutorService blockingTaskExecutor() {
         return blockingTaskExecutor;

File: core/src/main/java/com/linecorp/armeria/server/thrift/ThriftCallService.java
Patch:
@@ -33,8 +33,6 @@
 
 import com.google.common.collect.ImmutableMap;
 
-import com.linecorp.armeria.common.RequestContext;
-import com.linecorp.armeria.common.RequestContext.PushHandle;
 import com.linecorp.armeria.common.thrift.ThriftCall;
 import com.linecorp.armeria.common.thrift.ThriftReply;
 import com.linecorp.armeria.internal.thrift.ThriftFunction;
@@ -169,7 +167,7 @@ private static void invokeSynchronously(
                 return;
             }
 
-            try (PushHandle ignored = RequestContext.push(ctx)) {
+            try {
                 @SuppressWarnings("unchecked")
                 TBase<TBase<?, ?>, TFieldIdEnum> result = f.getResult(impl, args);
                 if (func.isOneWay()) {

File: tomcat/src/main/java/com/linecorp/armeria/server/http/tomcat/TomcatService.java
Patch:
@@ -56,8 +56,6 @@
 
 import com.google.common.collect.Sets;
 
-import com.linecorp.armeria.common.RequestContext;
-import com.linecorp.armeria.common.RequestContext.PushHandle;
 import com.linecorp.armeria.common.http.AggregatedHttpMessage;
 import com.linecorp.armeria.common.http.DefaultHttpResponse;
 import com.linecorp.armeria.common.http.HttpData;
@@ -405,7 +403,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
                         return;
                     }
 
-                    try (PushHandle ignored = RequestContext.push(ctx)) {
+                    try {
                         coyoteAdapter.service(coyoteReq, coyoteRes);
                         final HttpHeaders headers = convertResponse(coyoteRes);
                         res.write(headers);

File: src/main/java/com/linecorp/armeria/server/ServerConfig.java
Patch:
@@ -222,7 +222,7 @@ private static VirtualHost normalizeDefaultVirtualHost(VirtualHost h, List<Serve
         return new VirtualHost(
                 h.defaultHostname(), "*", sslCtx,
                 h.serviceConfigs().stream().map(
-                        e -> new ServiceConfig(e.pathMapping(), e.service(), e.loggerNameWithoutPrefix()))
+                        e -> new ServiceConfig(e.pathMapping(), e.service(), e.loggerName().orElse(null)))
                  .collect(Collectors.toList()));
     }
 

File: src/main/java/com/linecorp/armeria/server/VirtualHost.java
Patch:
@@ -229,7 +229,7 @@ VirtualHost decorate(@Nullable Function<Service<Request, Response>, Service<Requ
                 this.services.stream().map(cfg -> {
                     final PathMapping pathMapping = cfg.pathMapping();
                     final Service<Request, Response> service = decorator.apply(cfg.service());
-                    final String loggerName = cfg.loggerNameWithoutPrefix();
+                    final String loggerName = cfg.loggerName().orElse(null);
                     return new ServiceConfig(pathMapping, service, loggerName);
                 }).collect(Collectors.toList());
 

File: src/main/java/com/linecorp/armeria/server/http/HttpServerHandler.java
Patch:
@@ -268,8 +268,7 @@ private void handleRequest(ChannelHandlerContext ctx, DecodedHttpRequest req) th
         final ServiceRequestContext reqCtx = new DefaultServiceRequestContext(
                 serviceCfg, channel,
                 protocol,
-                req.method().name(), path, mappedPath,
-                LoggerFactory.getLogger(serviceCfg.loggerName()), req, getSSLSession(channel));
+                req.method().name(), path, mappedPath, req, getSSLSession(channel));
 
         final RequestLogBuilder reqLogBuilder = reqCtx.requestLogBuilder();
         final HttpResponse res;

File: src/test/java/com/linecorp/armeria/client/http/HttpClientIntegrationTest.java
Patch:
@@ -173,7 +173,7 @@ public void testRequestNoBodyWithoutExtraHeaders() throws Exception {
                 "/foo",
                 port -> "GET /foo HTTP/1.1\r\n" +
                         "host: 127.0.0.1:" + port + "\r\n" +
-                        "user-agent: Armeria\r\n\r\n");
+                        "user-agent: " + HttpHeaderUtil.USER_AGENT + "\r\n\r\n");
     }
 
     @Test
@@ -273,7 +273,7 @@ private static void testDoubleSlashSuppression(String path, String normalizedPat
                 path,
                 port -> "GET " + normalizedPath + " HTTP/1.1\r\n" +
                         "host: 127.0.0.1:" + port + "\r\n" +
-                        "user-agent: Armeria\r\n\r\n"
+                        "user-agent: " + HttpHeaderUtil.USER_AGENT + "\r\n\r\n"
         );
     }
 

File: src/main/java/com/linecorp/armeria/client/ClientOptions.java
Patch:
@@ -62,7 +62,6 @@ public final class ClientOptions extends AbstractOptions {
                     HttpHeaderNames.STATUS,
                     HttpHeaderNames.TRANSFER_ENCODING,
                     HttpHeaderNames.UPGRADE,
-                    HttpHeaderNames.USER_AGENT,
                     ExtensionHeaderNames.PATH.text(),
                     ExtensionHeaderNames.SCHEME.text(),
                     ExtensionHeaderNames.STREAM_DEPENDENCY_ID.text(),

File: src/main/java/com/linecorp/armeria/client/thrift/THttpClientDelegate.java
Patch:
@@ -56,6 +56,7 @@
 import com.linecorp.armeria.common.thrift.ThriftProtocolFactories;
 import com.linecorp.armeria.common.thrift.ThriftReply;
 import com.linecorp.armeria.common.util.CompletionActions;
+import com.linecorp.armeria.internal.thrift.ThriftFieldAccess;
 import com.linecorp.armeria.internal.thrift.ThriftFunction;
 import com.linecorp.armeria.internal.thrift.ThriftServiceMetadata;
 
@@ -192,7 +193,7 @@ private Object decodeResponse(ThriftFunction method, HttpData content) throws TE
 
         for (TFieldIdEnum fieldIdEnum : method.exceptionFields()) {
             if (result.isSet(fieldIdEnum)) {
-                throw (TException) result.getFieldValue(fieldIdEnum);
+                throw (TException) ThriftFieldAccess.get(result, fieldIdEnum);
             }
         }
 
@@ -201,7 +202,7 @@ private Object decodeResponse(ThriftFunction method, HttpData content) throws TE
             return null;
         }
         if (result.isSet(successField)) {
-            return result.getFieldValue(successField);
+            return ThriftFieldAccess.get(result, successField);
         }
 
         throw new TApplicationException(TApplicationException.MISSING_RESULT,

File: src/main/java/com/linecorp/armeria/common/thrift/ThriftCall.java
Patch:
@@ -33,6 +33,7 @@
 
 import com.linecorp.armeria.common.AbstractRpcRequest;
 import com.linecorp.armeria.common.RpcRequest;
+import com.linecorp.armeria.internal.thrift.ThriftFieldAccess;
 
 /**
  * A Thrift {@link RpcRequest}.
@@ -70,7 +71,8 @@ private static List<Object> toList(TBase<?, ?> thriftArgs) {
         final TBase<TBase<?, ?>, TFieldIdEnum> castThriftArgs = (TBase<TBase<?, ?>, TFieldIdEnum>) thriftArgs;
         return Collections.unmodifiableList(
                 FieldMetaData.getStructMetaDataMap(castThriftArgs.getClass()).keySet().stream()
-                             .map(castThriftArgs::getFieldValue).collect(Collectors.toList()));
+                             .map(field -> ThriftFieldAccess.get(castThriftArgs, field))
+                             .collect(Collectors.toList()));
     }
 
     private ThriftCall(int seqId, Class<?> serviceType, String method, List<Object> args) {

File: src/main/java/com/linecorp/armeria/internal/thrift/ThriftFunction.java
Patch:
@@ -236,15 +236,15 @@ public void setSuccess(TBase<?, TFieldIdEnum> result, Object value) {
     public Object getResult(TBase<TBase<?, ?>, TFieldIdEnum> result) throws TException {
         for (TFieldIdEnum fieldIdEnum : exceptionFields()) {
             if (result.isSet(fieldIdEnum)) {
-                throw (TException) result.getFieldValue(fieldIdEnum);
+                throw (TException) ThriftFieldAccess.get(result, fieldIdEnum);
             }
         }
 
         final TFieldIdEnum successField = successField();
         if (successField == null) { //void method
             return null;
         } else if (result.isSet(successField)) {
-            return result.getFieldValue(successField);
+            return ThriftFieldAccess.get(result, successField);
         } else {
             throw new TApplicationException(
                     TApplicationException.MISSING_RESULT,

File: src/main/java/com/linecorp/armeria/client/thrift/THttpClientDelegate.java
Patch:
@@ -56,6 +56,7 @@
 import com.linecorp.armeria.common.thrift.ThriftProtocolFactories;
 import com.linecorp.armeria.common.thrift.ThriftReply;
 import com.linecorp.armeria.common.util.CompletionActions;
+import com.linecorp.armeria.internal.thrift.ThriftFieldAccess;
 import com.linecorp.armeria.internal.thrift.ThriftFunction;
 import com.linecorp.armeria.internal.thrift.ThriftServiceMetadata;
 
@@ -192,7 +193,7 @@ private Object decodeResponse(ThriftFunction method, HttpData content) throws TE
 
         for (TFieldIdEnum fieldIdEnum : method.exceptionFields()) {
             if (result.isSet(fieldIdEnum)) {
-                throw (TException) result.getFieldValue(fieldIdEnum);
+                throw (TException) ThriftFieldAccess.get(result, fieldIdEnum);
             }
         }
 
@@ -201,7 +202,7 @@ private Object decodeResponse(ThriftFunction method, HttpData content) throws TE
             return null;
         }
         if (result.isSet(successField)) {
-            return result.getFieldValue(successField);
+            return ThriftFieldAccess.get(result, successField);
         }
 
         throw new TApplicationException(TApplicationException.MISSING_RESULT,

File: src/main/java/com/linecorp/armeria/common/thrift/ThriftCall.java
Patch:
@@ -33,6 +33,7 @@
 
 import com.linecorp.armeria.common.AbstractRpcRequest;
 import com.linecorp.armeria.common.RpcRequest;
+import com.linecorp.armeria.internal.thrift.ThriftFieldAccess;
 
 /**
  * A Thrift {@link RpcRequest}.
@@ -70,7 +71,8 @@ private static List<Object> toList(TBase<?, ?> thriftArgs) {
         final TBase<TBase<?, ?>, TFieldIdEnum> castThriftArgs = (TBase<TBase<?, ?>, TFieldIdEnum>) thriftArgs;
         return Collections.unmodifiableList(
                 FieldMetaData.getStructMetaDataMap(castThriftArgs.getClass()).keySet().stream()
-                             .map(castThriftArgs::getFieldValue).collect(Collectors.toList()));
+                             .map(field -> ThriftFieldAccess.get(castThriftArgs, field))
+                             .collect(Collectors.toList()));
     }
 
     private ThriftCall(int seqId, Class<?> serviceType, String method, List<Object> args) {

File: src/main/java/com/linecorp/armeria/internal/thrift/ThriftFunction.java
Patch:
@@ -236,15 +236,15 @@ public void setSuccess(TBase<?, TFieldIdEnum> result, Object value) {
     public Object getResult(TBase<TBase<?, ?>, TFieldIdEnum> result) throws TException {
         for (TFieldIdEnum fieldIdEnum : exceptionFields()) {
             if (result.isSet(fieldIdEnum)) {
-                throw (TException) result.getFieldValue(fieldIdEnum);
+                throw (TException) ThriftFieldAccess.get(result, fieldIdEnum);
             }
         }
 
         final TFieldIdEnum successField = successField();
         if (successField == null) { //void method
             return null;
         } else if (result.isSet(successField)) {
-            return result.getFieldValue(successField);
+            return ThriftFieldAccess.get(result, successField);
         } else {
             throw new TApplicationException(
                     TApplicationException.MISSING_RESULT,

File: src/test/java/com/linecorp/armeria/server/http/file/HttpFileServiceTest.java
Patch:
@@ -153,7 +153,7 @@ public void testClassPathOrElseGet() throws Exception {
     public void testUnknownMediaType() throws Exception {
         try (CloseableHttpClient hc = HttpClients.createMinimal();
              CloseableHttpResponse res = hc.execute(new HttpGet(newUri("/bar.unknown")))) {
-            assert200Ok(res, null, "Unknown Media Type\n");
+            assert200Ok(res, null, "Unknown Media Type");
         }
     }
 

File: src/test/java/com/linecorp/armeria/server/http/file/HttpFileServiceTest.java
Patch:
@@ -153,7 +153,7 @@ public void testClassPathOrElseGet() throws Exception {
     public void testUnknownMediaType() throws Exception {
         try (CloseableHttpClient hc = HttpClients.createMinimal();
              CloseableHttpResponse res = hc.execute(new HttpGet(newUri("/bar.unknown")))) {
-            assert200Ok(res, null, "Unknown Media Type\n");
+            assert200Ok(res, null, "Unknown Media Type");
         }
     }
 

File: src/main/java/com/linecorp/armeria/internal/http/ArmeriaHttpUtil.java
Patch:
@@ -276,6 +276,7 @@ private static void setHttp2Scheme(io.netty.handler.codec.http.HttpHeaders in, U
     public static Http2Headers toNettyHttp2(HttpHeaders inputHeaders) {
         final Http2Headers outputHeaders = new DefaultHttp2Headers(false, inputHeaders.size());
         outputHeaders.set(inputHeaders);
+        outputHeaders.remove(HttpHeaderNames.CONNECTION);
         outputHeaders.remove(HttpHeaderNames.TRANSFER_ENCODING);
         outputHeaders.remove(HttpHeaderNames.TRAILER);
         return outputHeaders;

File: src/main/java/com/linecorp/armeria/client/ClientFactory.java
Patch:
@@ -50,7 +50,7 @@ public interface ClientFactory extends AutoCloseable {
     /**
      * The default {@link ClientFactory} implementation.
      */
-    ClientFactory DEFAULT = new AllInOneClientFactory();
+    ClientFactory DEFAULT = new AllInOneClientFactory(true);
 
     /**
      * Closes the default {@link ClientFactory}.

File: src/main/java/com/linecorp/armeria/server/http/file/HttpFileService.java
Patch:
@@ -170,10 +170,12 @@ protected void doGet(ServiceRequestContext ctx, HttpRequest req, HttpResponseWri
         }
 
         HttpHeaders headers = HttpHeaders.of(HttpStatus.OK)
-                   .set(HttpHeaderNames.CONTENT_TYPE, entry.mediaType().toString())
                    .setInt(HttpHeaderNames.CONTENT_LENGTH, data.length())
                    .setTimeMillis(HttpHeaderNames.DATE, config().clock().millis())
                    .setTimeMillis(HttpHeaderNames.LAST_MODIFIED, lastModifiedMillis);
+        if (entry.mediaType() != null) {
+            headers.set(HttpHeaderNames.CONTENT_TYPE, entry.mediaType().toString());
+        }
         if (entry.contentEncoding() != null) {
             headers.set(HttpHeaderNames.CONTENT_ENCODING, entry.contentEncoding());
         }

File: src/main/java/com/linecorp/armeria/server/http/file/HttpVfs.java
Patch:
@@ -146,6 +146,7 @@ public String toString() {
     abstract class AbstractEntry implements Entry {
 
         private final String path;
+        @Nullable
         private final MediaType mediaType;
         @Nullable
         private final String contentEncoding;
@@ -167,6 +168,7 @@ protected AbstractEntry(String path, @Nullable MediaType mediaType, @Nullable St
         }
 
         @Override
+        @Nullable
         public MediaType mediaType() {
             return mediaType;
         }

File: src/main/java/com/linecorp/armeria/server/http/file/MimeTypeUtil.java
Patch:
@@ -24,6 +24,8 @@
 import java.util.Locale;
 import java.util.Map;
 
+import javax.annotation.Nullable;
+
 import com.google.common.net.MediaType;
 
 final class MimeTypeUtil {
@@ -77,6 +79,7 @@ private static void add(Map<String, MediaType> extensionToMediaType,
         }
     }
 
+    @Nullable
     static MediaType guessFromPath(String path, boolean preCompressed) {
         requireNonNull(path, "path");
         // If the path is for a precompressed file, it will have an additional extension indicating the

File: src/main/java/com/linecorp/armeria/server/http/file/HttpFileService.java
Patch:
@@ -170,10 +170,12 @@ protected void doGet(ServiceRequestContext ctx, HttpRequest req, HttpResponseWri
         }
 
         HttpHeaders headers = HttpHeaders.of(HttpStatus.OK)
-                   .set(HttpHeaderNames.CONTENT_TYPE, entry.mediaType().toString())
                    .setInt(HttpHeaderNames.CONTENT_LENGTH, data.length())
                    .setTimeMillis(HttpHeaderNames.DATE, config().clock().millis())
                    .setTimeMillis(HttpHeaderNames.LAST_MODIFIED, lastModifiedMillis);
+        if (entry.mediaType() != null) {
+            headers.set(HttpHeaderNames.CONTENT_TYPE, entry.mediaType().toString());
+        }
         if (entry.contentEncoding() != null) {
             headers.set(HttpHeaderNames.CONTENT_ENCODING, entry.contentEncoding());
         }

File: src/main/java/com/linecorp/armeria/server/http/file/HttpVfs.java
Patch:
@@ -146,6 +146,7 @@ public String toString() {
     abstract class AbstractEntry implements Entry {
 
         private final String path;
+        @Nullable
         private final MediaType mediaType;
         @Nullable
         private final String contentEncoding;
@@ -167,6 +168,7 @@ protected AbstractEntry(String path, @Nullable MediaType mediaType, @Nullable St
         }
 
         @Override
+        @Nullable
         public MediaType mediaType() {
             return mediaType;
         }

File: src/main/java/com/linecorp/armeria/server/http/file/MimeTypeUtil.java
Patch:
@@ -24,6 +24,8 @@
 import java.util.Locale;
 import java.util.Map;
 
+import javax.annotation.Nullable;
+
 import com.google.common.net.MediaType;
 
 final class MimeTypeUtil {
@@ -77,6 +79,7 @@ private static void add(Map<String, MediaType> extensionToMediaType,
         }
     }
 
+    @Nullable
     static MediaType guessFromPath(String path, boolean preCompressed) {
         requireNonNull(path, "path");
         // If the path is for a precompressed file, it will have an additional extension indicating the

File: src/main/java/com/linecorp/armeria/client/ClientFactory.java
Patch:
@@ -50,7 +50,7 @@ public interface ClientFactory extends AutoCloseable {
     /**
      * The default {@link ClientFactory} implementation.
      */
-    ClientFactory DEFAULT = new AllInOneClientFactory();
+    ClientFactory DEFAULT = new AllInOneClientFactory(true);
 
     /**
      * Closes the default {@link ClientFactory}.

File: src/main/java/com/linecorp/armeria/server/grpc/ArmeriaMessageReader.java
Patch:
@@ -33,15 +33,15 @@
  * A {@link Subscriber} to read request data and pass it to a GRPC {@link TransportState}
  * for processing. GRPC code will then handle deframing, decompressing, etc.
  */
-public class ArmeriaMessageReader implements Subscriber<HttpObject> {
+class ArmeriaMessageReader implements Subscriber<HttpObject> {
 
     private static final Logger logger = LoggerFactory.getLogger(ArmeriaMessageReader.class);
 
     private final ArmeriaGrpcServerStream.TransportState transportState;
 
     private Subscription subscription;
 
-    public ArmeriaMessageReader(TransportState transportState) {
+    ArmeriaMessageReader(TransportState transportState) {
         this.transportState = transportState;
     }
 

File: src/main/java/com/linecorp/armeria/server/grpc/GrpcService.java
Patch:
@@ -50,7 +50,7 @@
 /**
  * A {@link AbstractHttpService} that implements the GRPC wire protocol.
  */
-final class GrpcService extends AbstractHttpService {
+public final class GrpcService extends AbstractHttpService {
 
     private static final Metadata EMPTY_METADATA = new Metadata();
 

File: src/main/java/com/linecorp/armeria/server/grpc/ArmeriaMessageReader.java
Patch:
@@ -33,15 +33,15 @@
  * A {@link Subscriber} to read request data and pass it to a GRPC {@link TransportState}
  * for processing. GRPC code will then handle deframing, decompressing, etc.
  */
-public class ArmeriaMessageReader implements Subscriber<HttpObject> {
+class ArmeriaMessageReader implements Subscriber<HttpObject> {
 
     private static final Logger logger = LoggerFactory.getLogger(ArmeriaMessageReader.class);
 
     private final ArmeriaGrpcServerStream.TransportState transportState;
 
     private Subscription subscription;
 
-    public ArmeriaMessageReader(TransportState transportState) {
+    ArmeriaMessageReader(TransportState transportState) {
         this.transportState = transportState;
     }
 

File: src/main/java/com/linecorp/armeria/server/grpc/GrpcService.java
Patch:
@@ -50,7 +50,7 @@
 /**
  * A {@link AbstractHttpService} that implements the GRPC wire protocol.
  */
-final class GrpcService extends AbstractHttpService {
+public final class GrpcService extends AbstractHttpService {
 
     private static final Metadata EMPTY_METADATA = new Metadata();
 

File: src/main/java/com/linecorp/armeria/client/http/HttpClientPipelineConfigurator.java
Patch:
@@ -441,7 +441,8 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                 assert upgradeEvt == UPGRADE_REJECTED;
                 onUpgradeResponse(
                         ctx, false,
-                        "close".equals(((FullHttpResponse) msg).headers().get(HttpHeaderNames.CONNECTION)));
+                        "close".equalsIgnoreCase(
+                                ((FullHttpResponse) msg).headers().get(HttpHeaderNames.CONNECTION)));
                 return;
             }
 

File: src/main/java/com/linecorp/armeria/client/http/HttpClientPipelineConfigurator.java
Patch:
@@ -441,7 +441,8 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                 assert upgradeEvt == UPGRADE_REJECTED;
                 onUpgradeResponse(
                         ctx, false,
-                        "close".equals(((FullHttpResponse) msg).headers().get(HttpHeaderNames.CONNECTION)));
+                        "close".equalsIgnoreCase(
+                                ((FullHttpResponse) msg).headers().get(HttpHeaderNames.CONNECTION)));
                 return;
             }
 

File: src/main/java/com/linecorp/armeria/client/ClientDecoration.java
Patch:
@@ -74,7 +74,8 @@ public <I extends Request, O extends Response> Client<I, O> decorate(
             }
 
             @SuppressWarnings("unchecked")
-            final Function<Client<? super I, ? extends O>, Client<I, O>> decorator = ((Entry<I, O>) e).decorator();
+            final Function<Client<? super I, ? extends O>, Client<I, O>> decorator =
+                    ((Entry<I, O>) e).decorator();
             client = decorator.apply(client);
         }
 

File: src/main/java/com/linecorp/armeria/client/ClientOption.java
Patch:
@@ -41,7 +41,7 @@ protected ClientOption<Object> newConstant(int id, String name) {
     };
 
     /**
-     * The default timeout of a socket write
+     * The default timeout of a socket write.
      */
     public static final ClientOption<Long> DEFAULT_WRITE_TIMEOUT_MILLIS =
             valueOf("DEFAULT_WRITE_TIMEOUT_MILLIS");

File: src/main/java/com/linecorp/armeria/client/ClientRequestContext.java
Patch:
@@ -24,7 +24,6 @@
 import com.linecorp.armeria.common.Response;
 import com.linecorp.armeria.common.http.HttpHeaders;
 import com.linecorp.armeria.common.http.HttpRequest;
-import com.linecorp.armeria.server.ServerConfig;
 
 import io.netty.util.Attribute;
 import io.netty.util.AttributeKey;

File: src/main/java/com/linecorp/armeria/client/SessionOption.java
Patch:
@@ -37,7 +37,7 @@
  *
  * @param <T> the type of the option value
  */
-public class SessionOption<T> extends AbstractOption<T> {
+public final class SessionOption<T> extends AbstractOption<T> {
 
     @SuppressWarnings("rawtypes")
     private static final ConstantPool pool = new ConstantPool() {

File: src/main/java/com/linecorp/armeria/client/SessionOptions.java
Patch:
@@ -45,7 +45,7 @@
 /**
  * A set of {@link SessionOption}s and their respective values.
  */
-public class SessionOptions extends AbstractOptions {
+public final class SessionOptions extends AbstractOptions {
 
     private static final Logger logger = LoggerFactory.getLogger(SessionOptions.class);
 

File: src/main/java/com/linecorp/armeria/client/circuitbreaker/metrics/DropwizardMetricsCircuitBreakerListener.java
Patch:
@@ -31,8 +31,8 @@
 /**
  * A {@link CircuitBreakerListener} which monitors the status of {@link CircuitBreaker}s using
  * <a href="https://dropwizard.github.io/metrics/">dropwizard metrics</a>.
- * <p>
- * This class will generate the following metrics.
+ *
+ * <p>This class will generate the following metrics.
  *
  * <table summary="metrics that will generated by this class">
  * <tr><th>metric name</th><th>description</th></tr>

File: src/main/java/com/linecorp/armeria/client/http/HttpRequestSubscriber.java
Patch:
@@ -150,7 +150,8 @@ private void writeFirstHeader() {
     @Override
     public void onNext(HttpObject o) {
         if (!(o instanceof HttpData) && !(o instanceof HttpHeaders)) {
-            throw newIllegalStateException("published an HttpObject that's neither Http2Headers nor Http2Data: " + o);
+            throw newIllegalStateException(
+                    "published an HttpObject that's neither Http2Headers nor Http2Data: " + o);
         }
 
         boolean endOfStream = false;

File: src/main/java/com/linecorp/armeria/client/http/HttpResponseDecoder.java
Patch:
@@ -68,8 +68,8 @@ final HttpResponseWrapper addResponse(
                 new HttpResponseWrapper(req, res, logBuilder, responseTimeoutMillis, maxContentLength);
         final HttpResponseWriter oldRes = responses.put(id, newRes);
 
-        assert oldRes == null :
-               "addResponse(" + id + ", " + res + ", " + responseTimeoutMillis + "): " + oldRes;
+        assert oldRes == null : "addResponse(" + id + ", " + res + ", " + responseTimeoutMillis + "): " +
+                                oldRes;
 
         return newRes;
     }

File: src/main/java/com/linecorp/armeria/client/http/SimpleHttpRequestBuilder.java
Patch:
@@ -23,7 +23,6 @@
 import java.nio.charset.Charset;
 
 import com.linecorp.armeria.common.http.AggregatedHttpMessage;
-import com.linecorp.armeria.common.http.HttpRequest;
 
 import io.netty.handler.codec.http.DefaultHttpHeaders;
 import io.netty.handler.codec.http.EmptyHttpHeaders;
@@ -36,7 +35,7 @@
  * @deprecated Use {@link AggregatedHttpMessage} instead.
  */
 @Deprecated
-public class SimpleHttpRequestBuilder {
+public final class SimpleHttpRequestBuilder {
 
     private static final byte[] EMPTY = new byte[0];
 

File: src/main/java/com/linecorp/armeria/client/http/SimpleHttpResponse.java
Patch:
@@ -17,7 +17,6 @@
 package com.linecorp.armeria.client.http;
 
 import com.linecorp.armeria.common.http.AggregatedHttpMessage;
-import com.linecorp.armeria.common.http.HttpResponse;
 
 import io.netty.handler.codec.http.FullHttpResponse;
 import io.netty.handler.codec.http.HttpHeaders;

File: src/main/java/com/linecorp/armeria/client/limit/ConcurrencyLimitingHttpClient.java
Patch:
@@ -28,15 +28,15 @@
 /**
  * A {@link Client} decorator that limits the concurrent number of active HTTP requests.
  *
- * For example:
+ * <p>For example:
  * <pre>{@code
  * ClientBuilder builder = new ClientBuilder(...);
  * builder.decorator(HttpRequest.class, HttpResponse.class, ConcurrencyLimitingHttpClient.newDecorator(16));
  * client = builder.build(...);
  * }</pre>
  *
  */
-public class ConcurrencyLimitingHttpClient
+public final class ConcurrencyLimitingHttpClient
         extends ConcurrencyLimitingClient<HttpRequest, HttpResponse> {
 
     /**

File: src/main/java/com/linecorp/armeria/client/logging/KeyedChannelPoolLoggingHandler.java
Patch:
@@ -71,20 +71,21 @@ private static class ChannelStat extends AtomicInteger {
             this.ticker = ticker;
         }
 
+        @SuppressWarnings("checkstyle:fallthrough")
         void collect(EventType eventType) {
             switch (eventType) {
             case ACQUIRED:
                 incrementAndGet();
             case RELEASED:
                 lastUsedNanos = System.nanoTime();
             }
-
         }
 
         StringBuilder status(EventType eventType) {
             return status(eventType, new StringBuilder(16));
         }
 
+        @SuppressWarnings("checkstyle:fallthrough")
         StringBuilder status(EventType eventType, StringBuilder buf) {
             long currentNanos = ticker.read();
             switch (eventType) {
@@ -197,6 +198,7 @@ private StringBuilder status(Channel ch, EventType event) {
         return buf;
     }
 
+    @SuppressWarnings("checkstyle:fallthrough")
     private void activeChannelStatus(EventType event, StringBuilder buf) {
         switch (event) {
         case CREATED:

File: src/main/java/com/linecorp/armeria/client/pool/DefaultKeyedChannelPool.java
Patch:
@@ -43,7 +43,8 @@ public class DefaultKeyedChannelPool<K> implements KeyedChannelPool<K> {
             Exceptions.clearTrace(new IllegalStateException("ChannelPool full"));
 
     private static final IllegalStateException UNHEALTHY_NON_OFFERED_TO_POOL =
-            Exceptions.clearTrace(new IllegalStateException("Channel is unhealthy; not offering it back to pool"));
+            Exceptions.clearTrace(new IllegalStateException(
+                    "Channel is unhealthy; not offering it back to pool"));
 
     private final EventLoop eventLoop;
     private final Function<K, Future<Channel>> channelFactory;

File: src/main/java/com/linecorp/armeria/client/tracing/AbstractTracingClient.java
Patch:
@@ -45,8 +45,9 @@
 
 /**
  * An abstract {@link DecoratingClient} that traces outgoing {@link Request}s.
- * <p>
- * This class depends on <a href="https://github.com/openzipkin/brave">Brave</a>, a distributed tracing library.
+ *
+ * <p>This class depends on <a href="https://github.com/openzipkin/brave">Brave</a>, a distributed tracing
+ * library.
  *
  * @param <I> the {@link Request} type
  * @param <O> the {@link Response} type

File: src/main/java/com/linecorp/armeria/client/tracing/HttpTracingClient.java
Patch:
@@ -39,8 +39,8 @@
 /**
  * Decorates a {@link Client} to trace outbound {@link HttpRequest}s using
  * <a href="http://zipkin.io/">Zipkin</a>.
- * <p>
- * This decorator puts trace data into HTTP headers. The specifications of header names and its values
+ *
+ * <p>This decorator puts trace data into HTTP headers. The specifications of header names and its values
  * correspond to <a href="http://zipkin.io/">Zipkin</a>.
  */
 public class HttpTracingClient extends AbstractTracingClient<HttpRequest, HttpResponse> {

File: src/main/java/com/linecorp/armeria/common/MimeTypeParams.java
Patch:
@@ -48,7 +48,7 @@ private static String unquote(String value) {
         final StringBuilder buf = new StringBuilder(length);
 
         boolean escaped = false;
-        for(int i = 0; i < length; i++) {
+        for (int i = 0; i < length; i++) {
             final char c = value.charAt(i);
             if (escaped) {
                 buf.append(c);

File: src/main/java/com/linecorp/armeria/common/SerializationFormat.java
Patch:
@@ -47,17 +47,17 @@ public enum SerializationFormat {
     UNKNOWN("unknown", create("application", "x-unknown")),
 
     /**
-     * Thrift TBinary serialization format
+     * Thrift TBinary serialization format.
      */
     THRIFT_BINARY("tbinary", create("application", "x-thrift").withParameter("protocol", "TBINARY")),
 
     /**
-     * Thrift TCompact serialization format
+     * Thrift TCompact serialization format.
      */
     THRIFT_COMPACT("tcompact", create("application", "x-thrift").withParameter("protocol", "TCOMPACT")),
 
     /**
-     * Thrift TJSON serialization format
+     * Thrift TJSON serialization format.
      */
     THRIFT_JSON("tjson", create("application", "x-thrift").withParameter("protocol", "TJSON")),
 

File: src/main/java/com/linecorp/armeria/common/http/DefaultHttpData.java
Patch:
@@ -16,8 +16,6 @@
 
 package com.linecorp.armeria.common.http;
 
-import java.util.Arrays;
-
 import com.google.common.base.MoreObjects;
 
 final class DefaultHttpData implements HttpData {

File: src/main/java/com/linecorp/armeria/common/http/HttpMessageAggregator.java
Patch:
@@ -26,8 +26,8 @@
 abstract class HttpMessageAggregator implements Subscriber<HttpObject> {
 
     private final CompletableFuture<AggregatedHttpMessage> future;
-    protected final List<HttpData> contentList = new ArrayList<>();
-    protected int contentLength;
+    private final List<HttpData> contentList = new ArrayList<>();
+    private int contentLength;
     private Subscription subscription;
 
     protected HttpMessageAggregator(CompletableFuture<AggregatedHttpMessage> future) {

File: src/main/java/com/linecorp/armeria/common/http/HttpMethod.java
Patch:
@@ -89,8 +89,7 @@ public enum HttpMethod {
     TRACE,
 
     /**
-     * This specification reserves the method name CONNECT for use with a proxy that can dynamically
-     * switch to being a tunnel
+     * The CONNECT method is used for a proxy that can dynamically switch to being a tunnel.
      */
     CONNECT;
 }

File: src/main/java/com/linecorp/armeria/common/http/HttpRequestAggregator.java
Patch:
@@ -47,7 +47,6 @@ public void onError(Throwable t) {
     @Override
     protected void doClear() {
         trailingHeaders.clear();
-        contentList.clear();
     }
 
     @Override

File: src/main/java/com/linecorp/armeria/common/http/HttpResponse.java
Patch:
@@ -36,6 +36,9 @@ static HttpResponse of(Publisher<? extends HttpObject> publisher) {
         return new PublisherBasedHttpResponse(publisher);
     }
 
+    @Override
+    CompletableFuture<Void> closeFuture();
+
     /**
      * Aggregates this response. The returned {@link CompletableFuture} will be notified when the content and
      * the trailing headers of the response are received fully.
@@ -46,9 +49,6 @@ default CompletableFuture<AggregatedHttpMessage> aggregate() {
         return future;
     }
 
-    @Override
-    CompletableFuture<Void> closeFuture();
-
     /**
      * Aggregates this response. The returned {@link CompletableFuture} will be notified when the content and
      * the trailing headers of the response are received fully.

File: src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java
Patch:
@@ -40,7 +40,9 @@ public final class DefaultRequestLog
     private String path;
 
     @Override
-    public void start(Channel channel, SessionProtocol sessionProtocol, String host, String method, String path) {
+    public void start(Channel channel, SessionProtocol sessionProtocol,
+                      String host, String method, String path) {
+
         requireNonNull(channel, "channel");
         requireNonNull(sessionProtocol, "sessionProtocol");
         requireNonNull(host, "host");

File: src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java
Patch:
@@ -35,6 +35,7 @@
  * </ul>
  *
  * <h3>When is a {@link StreamMessage} open?</h3>
+ *
  * <p>A {@link StreamMessage} is open since its instantiation until:
  * <ul>
  *   <li>the {@link Subscriber} consumes all elements and {@link Subscriber#onComplete()} is invoked,</li>
@@ -44,6 +45,7 @@
  * </ul>
  *
  * <h3>Getting notified when a {@link StreamMessage} is closed</h3>
+ *
  * <p>Use {@link #closeFuture()}
  *
  * @param <T> the type of element signaled

File: src/main/java/com/linecorp/armeria/common/thrift/text/BaseContext.java
Patch:
@@ -39,7 +39,7 @@ private static <T> T unsupportedOperation() {
     }
 
     /**
-     * Called before we write an item
+     * Called before we write an item.
      */
     protected void write() {
     }
@@ -84,7 +84,7 @@ protected JsonNode getCurrentChild() {
     }
 
     /**
-     * Are there more child elements to process?
+     * Returns whether there are more child elements to process.
      */
     protected boolean hasMoreChildren() {
         return (Boolean) unsupportedOperation();

File: src/main/java/com/linecorp/armeria/common/thrift/text/PairContext.java
Patch:
@@ -44,7 +44,7 @@ class PairContext extends BaseContext {
     private Map.Entry<String, JsonNode> currentChild;
 
     /**
-     * Create an iterator over this object's children
+     * Creates an iterator over this object's children.
      */
     protected PairContext(JsonNode json) {
         children = null != json ? json.fields() : null;

File: src/main/java/com/linecorp/armeria/common/util/NativeLibraries.java
Patch:
@@ -25,7 +25,7 @@
 import io.netty.handler.ssl.OpenSsl;
 
 /**
- * Reports the availability of the native libraries used by Armeria
+ * Reports the availability of the native libraries used by Armeria.
  */
 public final class NativeLibraries {
 

File: src/main/java/com/linecorp/armeria/common/util/UnitFormatter.java
Patch:
@@ -45,7 +45,7 @@ public static void appendElapsed(StringBuilder buf, long startTimeNanos, long en
         } else if (elapsedNanos >= 100000000L) { // >= 100 ms
             buf.append(elapsedNanos / 1000000L).append("ms");
         } else if (elapsedNanos >= 100000L) { // >= 100 us
-            buf.append(elapsedNanos / 1000L).append("\u00B5s");
+            buf.append(elapsedNanos / 1000L).append("\u00B5s"); // microseconds
         } else {
             buf.append(elapsedNanos).append("ns");
         }

File: src/main/java/com/linecorp/armeria/internal/http/Http1ClientCodec.java
Patch:
@@ -46,7 +46,7 @@
  * to be done for <tt>HEAD</tt> and <tt>CONNECT</tt> and why
  * {@link HttpResponseDecoder} can not handle it by itself.
  *
- * If the {@link Channel} is closed and there are missing responses,
+ * <p>If the {@link Channel} is closed and there are missing responses,
  * a {@link PrematureChannelClosureException} is thrown.
  *
  * @see HttpServerCodec

File: src/main/java/com/linecorp/armeria/internal/http/Http2GoAwayListener.java
Patch:
@@ -23,13 +23,12 @@
 
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.Channel;
-import io.netty.handler.codec.http2.Http2Connection;
 import io.netty.handler.codec.http2.Http2ConnectionAdapter;
 import io.netty.handler.codec.http2.Http2Error;
 import io.netty.handler.codec.http2.Http2Stream;
 
 /**
- * A {@link Http2Connection.Listener} that logs the received GOAWAY frames and makes sure disconnection.
+ * A {@link Http2ConnectionAdapter} that logs the received GOAWAY frames and makes sure disconnection.
  */
 public class Http2GoAwayListener extends Http2ConnectionAdapter {
 

File: src/main/java/com/linecorp/armeria/server/GlobPathMapping.java
Patch:
@@ -80,7 +80,7 @@ static Pattern globToRegex(String glob) {
             switch (asterisks) {
             case 1:
                 // Handle '/*/' specially.
-                if (beforeAsterisk == '/' && c =='/') {
+                if (beforeAsterisk == '/' && c == '/') {
                     buf.append("[^/]+");
                 } else {
                     buf.append("[^/]*");

File: src/main/java/com/linecorp/armeria/server/PathMappings.java
Patch:
@@ -117,7 +117,7 @@ public PathMapped<T> apply(String path) {
         // Cache miss or disabled cache
         PathMapped<T> result = PathMapped.empty();
         final int size = patterns.size();
-        for (int i = 0; i < size; i ++) {
+        for (int i = 0; i < size; i++) {
             final Entry<PathMapping, T> e = patterns.get(i);
             final String mappedPath = e.getKey().apply(path);
             if (mappedPath != null) {

File: src/main/java/com/linecorp/armeria/server/PrefixPathMapping.java
Patch:
@@ -26,7 +26,7 @@ final class PrefixPathMapping extends AbstractPathMapping {
     private final String strVal;
 
     PrefixPathMapping(String prefix, boolean stripPrefix) {
-        prefix = ExactPathMapping.ensureAbsolutePath(prefix, "prefix");
+        prefix = ensureAbsolutePath(prefix, "prefix");
         if (!prefix.endsWith("/")) {
             prefix += '/';
         }

File: src/main/java/com/linecorp/armeria/server/ServiceConfig.java
Patch:
@@ -35,7 +35,9 @@ public final class ServiceConfig {
             Pattern.compile("^\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*" +
                             "(?:\\.\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)*$");
 
-    /** Initialized later by {@link VirtualHost} via {@link #build(VirtualHost)}. */
+    /**
+     * Initialized later by {@link VirtualHost} via {@link #build(VirtualHost)}.
+     */
     private VirtualHost virtualHost;
 
     private final PathMapping pathMapping;

File: src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java
Patch:
@@ -22,7 +22,6 @@
 
 import org.slf4j.Logger;
 
-import com.linecorp.armeria.client.ClientOption;
 import com.linecorp.armeria.common.ContentTooLargeException;
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.RequestContext;

File: src/main/java/com/linecorp/armeria/server/docs/Specification.java
Patch:
@@ -35,7 +35,7 @@
 import com.linecorp.armeria.server.ServiceConfig;
 import com.linecorp.armeria.server.thrift.THttpService;
 
-class Specification {
+final class Specification {
 
     static Specification forServiceConfigs(Iterable<ServiceConfig> serviceConfigs,
                                            Map<Class<?>, ? extends TBase<?, ?>> sampleRequests,

File: src/main/java/com/linecorp/armeria/server/http/AbstractHttpService.java
Patch:
@@ -26,8 +26,8 @@
 
 /**
  * A skeletal {@link HttpService} for easier HTTP service implementation.
- * <p>
- * This class provides the methods that handles the HTTP requests of the methods their names signify.
+ *
+ * <p>This class provides the methods that handles the HTTP requests of the methods their names signify.
  * For example, {@link #doGet(ServiceRequestContext, HttpRequest, HttpResponseWriter) doGet()} method handles a
  * {@code GET} request.
  * <ul>

File: src/main/java/com/linecorp/armeria/server/http/HttpServer.java
Patch:
@@ -17,7 +17,6 @@
 package com.linecorp.armeria.server.http;
 
 import com.linecorp.armeria.common.SessionProtocol;
-import com.linecorp.armeria.server.ServerConfig;
 
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelHandler;
@@ -47,5 +46,6 @@ static HttpServer get(ChannelHandlerContext ctx) {
     }
 
     SessionProtocol protocol();
+
     int unfinishedRequests();
 }

File: src/main/java/com/linecorp/armeria/server/http/jetty/JettyService.java
Patch:
@@ -75,7 +75,7 @@
  *
  * @see JettyServiceBuilder
  */
-public class JettyService implements HttpService {
+public final class JettyService implements HttpService {
 
     private static final Logger logger = LoggerFactory.getLogger(JettyService.class);
 
@@ -157,7 +157,7 @@ static JettyService forConfig(JettyServiceConfig config) {
     private boolean startedServer;
 
     private JettyService(String hostname, Function<ExecutorService, Server> serverSupplier) {
-        this(hostname, serverSupplier, unused -> {});
+        this(hostname, serverSupplier, unused -> { /* unused */ });
     }
 
     private JettyService(String hostname,

File: src/main/java/com/linecorp/armeria/server/http/tomcat/TomcatService.java
Patch:
@@ -270,7 +270,7 @@ static String toString(org.apache.catalina.Server server) {
     private boolean started;
 
     private TomcatService(String hostname, Function<String, Connector> connectorFactory) {
-        this(hostname, connectorFactory, unused -> {});
+        this(hostname, connectorFactory, unused -> { /* unused */ });
     }
 
     private TomcatService(String hostname,
@@ -301,7 +301,7 @@ public void serviceAdded(ServiceConfig cfg) throws Exception {
     }
 
     /**
-     * Returns Tomcat {@link Connector}
+     * Returns Tomcat {@link Connector}.
      */
     public Connector connector() {
         final Connector connector = this.connector;

File: src/main/java/com/linecorp/armeria/server/thrift/ThriftCallService.java
Patch:
@@ -43,7 +43,7 @@
  *
  * @see THttpService
  */
-public class ThriftCallService implements Service<ThriftCall, ThriftReply> {
+public final class ThriftCallService implements Service<ThriftCall, ThriftReply> {
 
     /**
      * Creates a new instance with the specified service implementation.

File: src/main/java/com/linecorp/armeria/server/thrift/ThriftService.java
Patch:
@@ -33,7 +33,7 @@
  * @deprecated Use {@link THttpService} instead.
  */
 @Deprecated
-public class ThriftService extends THttpService {
+public final class ThriftService extends THttpService {
 
     /**
      * @deprecated Use {@link THttpService#of(Object)} instead.

File: src/main/java/com/linecorp/armeria/server/tracing/AbstractTracingService.java
Patch:
@@ -42,8 +42,9 @@
 
 /**
  * An abstract {@link DecoratingService} that traces incoming {@link Request}s.
- * <p>
- * This class depends on <a href="https://github.com/openzipkin/brave">Brave</a>, a distributed tracing library.
+ *
+ * <p>This class depends on <a href="https://github.com/openzipkin/brave">Brave</a>, a distributed tracing
+ * library.
  *
  * @param <I> the {@link Request} type
  * @param <O> the {@link Response} type

File: src/main/java/com/linecorp/armeria/server/tracing/HttpTracingService.java
Patch:
@@ -37,8 +37,8 @@
 /**
  * Decorates a {@link Service} to trace inbound {@link HttpRequest}s using
  * <a href="http://zipkin.io/">Zipkin</a>.
- * <p>
- * This decorator retrieves trace data from HTTP headers. The specifications of header names and its values
+ *
+ * <p>This decorator retrieves trace data from HTTP headers. The specifications of header names and its values
  * correspond to <a href="http://zipkin.io/">Zipkin</a>.
  */
 public class HttpTracingService extends AbstractTracingService<HttpRequest, HttpResponse> {

File: src/test/java/com/linecorp/armeria/client/ClientOptionsTest.java
Patch:
@@ -16,8 +16,6 @@
 package com.linecorp.armeria.client;
 
 import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.not;
-import static org.hamcrest.Matchers.nullValue;
 import static org.junit.Assert.assertThat;
 
 import java.util.Optional;

File: src/test/java/com/linecorp/armeria/client/SessionOptionsTest.java
Patch:
@@ -44,7 +44,7 @@ public void defaultTest() {
     }
 
     @Test
-    public void valueOverrideTest(){
+    public void valueOverrideTest() {
         Duration connectionTimeout = Duration.ofMillis(10);
         Duration idleTimeout = Duration.ofMillis(200);
         EventLoop eventLoop = mock(EventLoop.class);
@@ -64,12 +64,12 @@ public void valueOverrideTest(){
     }
 
     @Test(expected = IllegalArgumentException.class)
-    public void testValidateFailConnectTimeout(){
+    public void testValidateFailConnectTimeout() {
         SessionOptions.of(CONNECT_TIMEOUT.newValue(Duration.ZERO));
     }
 
     @Test(expected = IllegalArgumentException.class)
-    public void testValidateFailIdleTimeout(){
+    public void testValidateFailIdleTimeout() {
         SessionOptions.of(IDLE_TIMEOUT.newValue(Duration.ofMillis(-1)));
     }
 }

File: src/test/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClientTest.java
Patch:
@@ -72,7 +72,8 @@ public class CircuitBreakerClientTest {
     private static final ThriftCall req = ctx.request();
     private static final ThriftCall reqB = ctxB.request();
     private static final ThriftReply successRes = new ThriftReply(0, (Object) null);
-    private static final ThriftReply failureRes = new ThriftReply(0, Exceptions.clearTrace(new Exception("bug")));
+    private static final ThriftReply failureRes =
+            new ThriftReply(0, Exceptions.clearTrace(new Exception("bug")));
 
     @Test
     public void testSingletonDecorator() throws Exception {

File: src/test/java/com/linecorp/armeria/client/http/HttpClientSniTest.java
Patch:
@@ -40,9 +40,9 @@
 import com.linecorp.armeria.common.http.HttpRequest;
 import com.linecorp.armeria.common.http.HttpResponseWriter;
 import com.linecorp.armeria.common.http.HttpStatus;
-import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerBuilder;
+import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.VirtualHostBuilder;
 import com.linecorp.armeria.server.http.AbstractHttpService;
 

File: src/test/java/com/linecorp/armeria/client/limit/ConcurrencyLimitingHttpClientTest.java
Patch:
@@ -254,6 +254,6 @@ private static void closeAndDrain(DefaultHttpResponse actualRes, HttpResponse de
     }
 
     private static void waitForEventLoop() {
-        eventLoop.submit(() -> {}).syncUninterruptibly();
+        eventLoop.submit(() -> { /* no-op */ }).syncUninterruptibly();
     }
 }

File: src/test/java/com/linecorp/armeria/client/tracing/HttpTracingClientTest.java
Patch:
@@ -34,9 +34,7 @@
 import com.linecorp.armeria.common.http.HttpHeaders;
 import com.linecorp.armeria.common.http.HttpMethod;
 import com.linecorp.armeria.common.http.HttpRequest;
-import com.linecorp.armeria.common.thrift.ThriftCall;
 import com.linecorp.armeria.common.tracing.HttpTracingTestBase;
-import com.linecorp.armeria.service.test.thrift.main.HelloService;
 
 import io.netty.channel.DefaultEventLoop;
 

File: src/test/java/com/linecorp/armeria/common/RequestContextTest.java
Patch:
@@ -34,7 +34,6 @@
 
 import org.eclipse.jetty.util.ConcurrentHashSet;
 import org.junit.Assert;
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;

File: src/test/java/com/linecorp/armeria/server/GracefulShutdownHandlerTest.java
Patch:
@@ -226,7 +226,9 @@ private void submitLongTask() {
         executor.execute(() -> {
             try {
                 Thread.sleep(10000);
-            } catch (InterruptedException ignored) {}
+            } catch (InterruptedException ignored) {
+                // Ignored
+            }
         });
     }
 }

File: src/test/java/com/linecorp/armeria/server/ServerTest.java
Patch:
@@ -67,7 +67,8 @@ public class ServerTest extends AbstractServerTest {
     @Override
     protected void configureServer(ServerBuilder sb) {
 
-        final Service<HttpRequest, HttpResponse> immediateResponseOnIoThread = new EchoService().decorate(LoggingService::new);
+        final Service<HttpRequest, HttpResponse> immediateResponseOnIoThread =
+                new EchoService().decorate(LoggingService::new);
 
         final Service<HttpRequest, HttpResponse> delayedResponseOnIoThread = new EchoService() {
             @Override
@@ -106,7 +107,7 @@ protected void doPost(ServiceRequestContext ctx,
 
         // Disable request timeout for '/timeout-not' only.
         final Function<Service<HttpRequest, HttpResponse>, Service<HttpRequest, HttpResponse>> decorator =
-                delegate -> new DecoratingService<HttpRequest, HttpResponse, HttpRequest, HttpResponse>(delegate) {
+                s -> new DecoratingService<HttpRequest, HttpResponse, HttpRequest, HttpResponse>(s) {
                     @Override
                     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
                         ctx.setRequestTimeoutMillis(

File: src/test/java/com/linecorp/armeria/server/composition/CompositeServiceTest.java
Patch:
@@ -108,7 +108,9 @@ public void testServiceGetters() throws Exception {
         }
     }
 
-    private static final class TestCompositeService extends AbstractCompositeService<HttpRequest, HttpResponse> {
+    private static final class TestCompositeService
+            extends AbstractCompositeService<HttpRequest, HttpResponse> {
+
         TestCompositeService() {
             super(CompositeServiceEntry.ofPrefix("/foo/", serviceA),
                   CompositeServiceEntry.ofPrefix("/bar/", serviceB),

File: src/test/java/com/linecorp/armeria/server/http/HttpServerIdleTimeoutHandlerTest.java
Patch:
@@ -104,7 +104,8 @@ private void writeResponse() {
         server.unfinishedRequests--;
     }
 
-    private static final class MockHttpServerHandler extends ChannelInboundHandlerAdapter implements HttpServer {
+    private static final class MockHttpServerHandler
+            extends ChannelInboundHandlerAdapter implements HttpServer {
 
         int unfinishedRequests;
 

File: src/test/java/com/linecorp/armeria/server/metrics/MessageLogConsumerTest.java
Patch:
@@ -22,9 +22,9 @@
 import org.junit.Test;
 
 import com.linecorp.armeria.common.RequestContext;
+import com.linecorp.armeria.common.logging.MessageLogConsumer;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.ResponseLog;
-import com.linecorp.armeria.common.logging.MessageLogConsumer;
 
 public class MessageLogConsumerTest {
     @Test

File: src/test/java/com/linecorp/armeria/server/thrift/AbstractThriftOverHttpTest.java
Patch:
@@ -145,6 +145,8 @@ protected final TTransport newTransport(String scheme, String path) throws TTran
         return newTransport(newUri(scheme, path));
     }
 
+    protected abstract TTransport newTransport(String uri) throws TTransportException;
+
     protected static String newUri(String scheme, String path) {
         switch (scheme) {
         case "http":
@@ -155,6 +157,4 @@ protected static String newUri(String scheme, String path) {
 
         throw new Error();
     }
-
-    protected abstract TTransport newTransport(String uri) throws TTransportException;
 }

File: src/test/java/com/linecorp/armeria/server/thrift/ThriftOverHttp1Test.java
Patch:
@@ -83,8 +83,8 @@ public void testNonPostRequest() throws Exception {
     public void testPipelinedHttpInvocation() throws Exception {
         // FIXME: Enable this test once we have a working Thrift-over-HTTP/1 client with pipelining.
         try (TTransport transport = newTransport("http", "/sleep")) {
-            SleepService.Client client =
-                    new SleepService.Client.Factory().getClient(ThriftProtocolFactories.BINARY.getProtocol(transport));
+            SleepService.Client client = new SleepService.Client.Factory().getClient(
+                    ThriftProtocolFactories.BINARY.getProtocol(transport));
 
             client.send_sleep(1000);
             client.send_sleep(500);

File: src/test/java/com/linecorp/armeria/server/tracing/TracingServiceTest.java
Patch:
@@ -65,10 +65,10 @@ public void shouldSubmitSpanWhenRequestIsSampled() throws Exception {
         StubCollector spanCollector = testServiceInvocation(true /* sampled */);
 
         // only one span should be submitted
-        assertThat(spanCollector.spans, hasSize(1));
+        assertThat(spanCollector.spans(), hasSize(1));
 
         // check span name
-        Span span = spanCollector.spans.get(0);
+        Span span = spanCollector.spans().get(0);
         assertThat(span.getName(), is(TEST_METHOD));
 
         // check # of annotations
@@ -91,7 +91,7 @@ public void shouldNotSubmitSpanWhenRequestIsNotSampled() throws Exception {
         StubCollector spanCollector = testServiceInvocation(false /* not sampled */);
 
         // don't submit any spans
-        assertThat(spanCollector.spans, hasSize(0));
+        assertThat(spanCollector.spans(), hasSize(0));
     }
 
     private static StubCollector testServiceInvocation(boolean sampled) throws Exception {

File: src/main/java/com/linecorp/armeria/client/ClientDecoration.java
Patch:
@@ -74,7 +74,8 @@ public <I extends Request, O extends Response> Client<I, O> decorate(
             }
 
             @SuppressWarnings("unchecked")
-            final Function<Client<? super I, ? extends O>, Client<I, O>> decorator = ((Entry<I, O>) e).decorator();
+            final Function<Client<? super I, ? extends O>, Client<I, O>> decorator =
+                    ((Entry<I, O>) e).decorator();
             client = decorator.apply(client);
         }
 

File: src/main/java/com/linecorp/armeria/client/ClientOption.java
Patch:
@@ -41,7 +41,7 @@ protected ClientOption<Object> newConstant(int id, String name) {
     };
 
     /**
-     * The default timeout of a socket write
+     * The default timeout of a socket write.
      */
     public static final ClientOption<Long> DEFAULT_WRITE_TIMEOUT_MILLIS =
             valueOf("DEFAULT_WRITE_TIMEOUT_MILLIS");

File: src/main/java/com/linecorp/armeria/client/ClientRequestContext.java
Patch:
@@ -24,7 +24,6 @@
 import com.linecorp.armeria.common.Response;
 import com.linecorp.armeria.common.http.HttpHeaders;
 import com.linecorp.armeria.common.http.HttpRequest;
-import com.linecorp.armeria.server.ServerConfig;
 
 import io.netty.util.Attribute;
 import io.netty.util.AttributeKey;

File: src/main/java/com/linecorp/armeria/client/SessionOption.java
Patch:
@@ -37,7 +37,7 @@
  *
  * @param <T> the type of the option value
  */
-public class SessionOption<T> extends AbstractOption<T> {
+public final class SessionOption<T> extends AbstractOption<T> {
 
     @SuppressWarnings("rawtypes")
     private static final ConstantPool pool = new ConstantPool() {

File: src/main/java/com/linecorp/armeria/client/SessionOptions.java
Patch:
@@ -45,7 +45,7 @@
 /**
  * A set of {@link SessionOption}s and their respective values.
  */
-public class SessionOptions extends AbstractOptions {
+public final class SessionOptions extends AbstractOptions {
 
     private static final Logger logger = LoggerFactory.getLogger(SessionOptions.class);
 

File: src/main/java/com/linecorp/armeria/client/circuitbreaker/metrics/DropwizardMetricsCircuitBreakerListener.java
Patch:
@@ -31,8 +31,8 @@
 /**
  * A {@link CircuitBreakerListener} which monitors the status of {@link CircuitBreaker}s using
  * <a href="https://dropwizard.github.io/metrics/">dropwizard metrics</a>.
- * <p>
- * This class will generate the following metrics.
+ *
+ * <p>This class will generate the following metrics.
  *
  * <table summary="metrics that will generated by this class">
  * <tr><th>metric name</th><th>description</th></tr>

File: src/main/java/com/linecorp/armeria/client/http/HttpRequestSubscriber.java
Patch:
@@ -150,7 +150,8 @@ private void writeFirstHeader() {
     @Override
     public void onNext(HttpObject o) {
         if (!(o instanceof HttpData) && !(o instanceof HttpHeaders)) {
-            throw newIllegalStateException("published an HttpObject that's neither Http2Headers nor Http2Data: " + o);
+            throw newIllegalStateException(
+                    "published an HttpObject that's neither Http2Headers nor Http2Data: " + o);
         }
 
         boolean endOfStream = false;

File: src/main/java/com/linecorp/armeria/client/http/HttpResponseDecoder.java
Patch:
@@ -68,8 +68,8 @@ final HttpResponseWrapper addResponse(
                 new HttpResponseWrapper(req, res, logBuilder, responseTimeoutMillis, maxContentLength);
         final HttpResponseWriter oldRes = responses.put(id, newRes);
 
-        assert oldRes == null :
-               "addResponse(" + id + ", " + res + ", " + responseTimeoutMillis + "): " + oldRes;
+        assert oldRes == null : "addResponse(" + id + ", " + res + ", " + responseTimeoutMillis + "): " +
+                                oldRes;
 
         return newRes;
     }

File: src/main/java/com/linecorp/armeria/client/http/SimpleHttpRequestBuilder.java
Patch:
@@ -23,7 +23,6 @@
 import java.nio.charset.Charset;
 
 import com.linecorp.armeria.common.http.AggregatedHttpMessage;
-import com.linecorp.armeria.common.http.HttpRequest;
 
 import io.netty.handler.codec.http.DefaultHttpHeaders;
 import io.netty.handler.codec.http.EmptyHttpHeaders;
@@ -36,7 +35,7 @@
  * @deprecated Use {@link AggregatedHttpMessage} instead.
  */
 @Deprecated
-public class SimpleHttpRequestBuilder {
+public final class SimpleHttpRequestBuilder {
 
     private static final byte[] EMPTY = new byte[0];
 

File: src/main/java/com/linecorp/armeria/client/http/SimpleHttpResponse.java
Patch:
@@ -17,7 +17,6 @@
 package com.linecorp.armeria.client.http;
 
 import com.linecorp.armeria.common.http.AggregatedHttpMessage;
-import com.linecorp.armeria.common.http.HttpResponse;
 
 import io.netty.handler.codec.http.FullHttpResponse;
 import io.netty.handler.codec.http.HttpHeaders;

File: src/main/java/com/linecorp/armeria/client/limit/ConcurrencyLimitingHttpClient.java
Patch:
@@ -28,15 +28,15 @@
 /**
  * A {@link Client} decorator that limits the concurrent number of active HTTP requests.
  *
- * For example:
+ * <p>For example:
  * <pre>{@code
  * ClientBuilder builder = new ClientBuilder(...);
  * builder.decorator(HttpRequest.class, HttpResponse.class, ConcurrencyLimitingHttpClient.newDecorator(16));
  * client = builder.build(...);
  * }</pre>
  *
  */
-public class ConcurrencyLimitingHttpClient
+public final class ConcurrencyLimitingHttpClient
         extends ConcurrencyLimitingClient<HttpRequest, HttpResponse> {
 
     /**

File: src/main/java/com/linecorp/armeria/client/logging/KeyedChannelPoolLoggingHandler.java
Patch:
@@ -71,20 +71,21 @@ private static class ChannelStat extends AtomicInteger {
             this.ticker = ticker;
         }
 
+        @SuppressWarnings("checkstyle:fallthrough")
         void collect(EventType eventType) {
             switch (eventType) {
             case ACQUIRED:
                 incrementAndGet();
             case RELEASED:
                 lastUsedNanos = System.nanoTime();
             }
-
         }
 
         StringBuilder status(EventType eventType) {
             return status(eventType, new StringBuilder(16));
         }
 
+        @SuppressWarnings("checkstyle:fallthrough")
         StringBuilder status(EventType eventType, StringBuilder buf) {
             long currentNanos = ticker.read();
             switch (eventType) {
@@ -197,6 +198,7 @@ private StringBuilder status(Channel ch, EventType event) {
         return buf;
     }
 
+    @SuppressWarnings("checkstyle:fallthrough")
     private void activeChannelStatus(EventType event, StringBuilder buf) {
         switch (event) {
         case CREATED:

File: src/main/java/com/linecorp/armeria/client/pool/DefaultKeyedChannelPool.java
Patch:
@@ -43,7 +43,8 @@ public class DefaultKeyedChannelPool<K> implements KeyedChannelPool<K> {
             Exceptions.clearTrace(new IllegalStateException("ChannelPool full"));
 
     private static final IllegalStateException UNHEALTHY_NON_OFFERED_TO_POOL =
-            Exceptions.clearTrace(new IllegalStateException("Channel is unhealthy; not offering it back to pool"));
+            Exceptions.clearTrace(new IllegalStateException(
+                    "Channel is unhealthy; not offering it back to pool"));
 
     private final EventLoop eventLoop;
     private final Function<K, Future<Channel>> channelFactory;

File: src/main/java/com/linecorp/armeria/client/tracing/AbstractTracingClient.java
Patch:
@@ -45,8 +45,9 @@
 
 /**
  * An abstract {@link DecoratingClient} that traces outgoing {@link Request}s.
- * <p>
- * This class depends on <a href="https://github.com/openzipkin/brave">Brave</a>, a distributed tracing library.
+ *
+ * <p>This class depends on <a href="https://github.com/openzipkin/brave">Brave</a>, a distributed tracing
+ * library.
  *
  * @param <I> the {@link Request} type
  * @param <O> the {@link Response} type

File: src/main/java/com/linecorp/armeria/client/tracing/HttpTracingClient.java
Patch:
@@ -39,8 +39,8 @@
 /**
  * Decorates a {@link Client} to trace outbound {@link HttpRequest}s using
  * <a href="http://zipkin.io/">Zipkin</a>.
- * <p>
- * This decorator puts trace data into HTTP headers. The specifications of header names and its values
+ *
+ * <p>This decorator puts trace data into HTTP headers. The specifications of header names and its values
  * correspond to <a href="http://zipkin.io/">Zipkin</a>.
  */
 public class HttpTracingClient extends AbstractTracingClient<HttpRequest, HttpResponse> {

File: src/main/java/com/linecorp/armeria/common/MimeTypeParams.java
Patch:
@@ -48,7 +48,7 @@ private static String unquote(String value) {
         final StringBuilder buf = new StringBuilder(length);
 
         boolean escaped = false;
-        for(int i = 0; i < length; i++) {
+        for (int i = 0; i < length; i++) {
             final char c = value.charAt(i);
             if (escaped) {
                 buf.append(c);

File: src/main/java/com/linecorp/armeria/common/SerializationFormat.java
Patch:
@@ -47,17 +47,17 @@ public enum SerializationFormat {
     UNKNOWN("unknown", create("application", "x-unknown")),
 
     /**
-     * Thrift TBinary serialization format
+     * Thrift TBinary serialization format.
      */
     THRIFT_BINARY("tbinary", create("application", "x-thrift").withParameter("protocol", "TBINARY")),
 
     /**
-     * Thrift TCompact serialization format
+     * Thrift TCompact serialization format.
      */
     THRIFT_COMPACT("tcompact", create("application", "x-thrift").withParameter("protocol", "TCOMPACT")),
 
     /**
-     * Thrift TJSON serialization format
+     * Thrift TJSON serialization format.
      */
     THRIFT_JSON("tjson", create("application", "x-thrift").withParameter("protocol", "TJSON")),
 

File: src/main/java/com/linecorp/armeria/common/http/DefaultHttpData.java
Patch:
@@ -16,8 +16,6 @@
 
 package com.linecorp.armeria.common.http;
 
-import java.util.Arrays;
-
 import com.google.common.base.MoreObjects;
 
 final class DefaultHttpData implements HttpData {

File: src/main/java/com/linecorp/armeria/common/http/HttpMessageAggregator.java
Patch:
@@ -26,8 +26,8 @@
 abstract class HttpMessageAggregator implements Subscriber<HttpObject> {
 
     private final CompletableFuture<AggregatedHttpMessage> future;
-    protected final List<HttpData> contentList = new ArrayList<>();
-    protected int contentLength;
+    private final List<HttpData> contentList = new ArrayList<>();
+    private int contentLength;
     private Subscription subscription;
 
     protected HttpMessageAggregator(CompletableFuture<AggregatedHttpMessage> future) {

File: src/main/java/com/linecorp/armeria/common/http/HttpMethod.java
Patch:
@@ -89,8 +89,7 @@ public enum HttpMethod {
     TRACE,
 
     /**
-     * This specification reserves the method name CONNECT for use with a proxy that can dynamically
-     * switch to being a tunnel
+     * The CONNECT method is used for a proxy that can dynamically switch to being a tunnel.
      */
     CONNECT;
 }

File: src/main/java/com/linecorp/armeria/common/http/HttpRequestAggregator.java
Patch:
@@ -47,7 +47,6 @@ public void onError(Throwable t) {
     @Override
     protected void doClear() {
         trailingHeaders.clear();
-        contentList.clear();
     }
 
     @Override

File: src/main/java/com/linecorp/armeria/common/http/HttpResponse.java
Patch:
@@ -36,6 +36,9 @@ static HttpResponse of(Publisher<? extends HttpObject> publisher) {
         return new PublisherBasedHttpResponse(publisher);
     }
 
+    @Override
+    CompletableFuture<Void> closeFuture();
+
     /**
      * Aggregates this response. The returned {@link CompletableFuture} will be notified when the content and
      * the trailing headers of the response are received fully.
@@ -46,9 +49,6 @@ default CompletableFuture<AggregatedHttpMessage> aggregate() {
         return future;
     }
 
-    @Override
-    CompletableFuture<Void> closeFuture();
-
     /**
      * Aggregates this response. The returned {@link CompletableFuture} will be notified when the content and
      * the trailing headers of the response are received fully.

File: src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java
Patch:
@@ -40,7 +40,9 @@ public final class DefaultRequestLog
     private String path;
 
     @Override
-    public void start(Channel channel, SessionProtocol sessionProtocol, String host, String method, String path) {
+    public void start(Channel channel, SessionProtocol sessionProtocol,
+                      String host, String method, String path) {
+
         requireNonNull(channel, "channel");
         requireNonNull(sessionProtocol, "sessionProtocol");
         requireNonNull(host, "host");

File: src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java
Patch:
@@ -35,6 +35,7 @@
  * </ul>
  *
  * <h3>When is a {@link StreamMessage} open?</h3>
+ *
  * <p>A {@link StreamMessage} is open since its instantiation until:
  * <ul>
  *   <li>the {@link Subscriber} consumes all elements and {@link Subscriber#onComplete()} is invoked,</li>
@@ -44,6 +45,7 @@
  * </ul>
  *
  * <h3>Getting notified when a {@link StreamMessage} is closed</h3>
+ *
  * <p>Use {@link #closeFuture()}
  *
  * @param <T> the type of element signaled

File: src/main/java/com/linecorp/armeria/common/thrift/text/BaseContext.java
Patch:
@@ -39,7 +39,7 @@ private static <T> T unsupportedOperation() {
     }
 
     /**
-     * Called before we write an item
+     * Called before we write an item.
      */
     protected void write() {
     }
@@ -84,7 +84,7 @@ protected JsonNode getCurrentChild() {
     }
 
     /**
-     * Are there more child elements to process?
+     * Returns whether there are more child elements to process.
      */
     protected boolean hasMoreChildren() {
         return (Boolean) unsupportedOperation();

File: src/main/java/com/linecorp/armeria/common/thrift/text/PairContext.java
Patch:
@@ -44,7 +44,7 @@ class PairContext extends BaseContext {
     private Map.Entry<String, JsonNode> currentChild;
 
     /**
-     * Create an iterator over this object's children
+     * Creates an iterator over this object's children.
      */
     protected PairContext(JsonNode json) {
         children = null != json ? json.fields() : null;

File: src/main/java/com/linecorp/armeria/common/util/NativeLibraries.java
Patch:
@@ -25,7 +25,7 @@
 import io.netty.handler.ssl.OpenSsl;
 
 /**
- * Reports the availability of the native libraries used by Armeria
+ * Reports the availability of the native libraries used by Armeria.
  */
 public final class NativeLibraries {
 

File: src/main/java/com/linecorp/armeria/common/util/UnitFormatter.java
Patch:
@@ -45,7 +45,7 @@ public static void appendElapsed(StringBuilder buf, long startTimeNanos, long en
         } else if (elapsedNanos >= 100000000L) { // >= 100 ms
             buf.append(elapsedNanos / 1000000L).append("ms");
         } else if (elapsedNanos >= 100000L) { // >= 100 us
-            buf.append(elapsedNanos / 1000L).append("\u00B5s");
+            buf.append(elapsedNanos / 1000L).append("\u00B5s"); // microseconds
         } else {
             buf.append(elapsedNanos).append("ns");
         }

File: src/main/java/com/linecorp/armeria/internal/http/Http1ClientCodec.java
Patch:
@@ -46,7 +46,7 @@
  * to be done for <tt>HEAD</tt> and <tt>CONNECT</tt> and why
  * {@link HttpResponseDecoder} can not handle it by itself.
  *
- * If the {@link Channel} is closed and there are missing responses,
+ * <p>If the {@link Channel} is closed and there are missing responses,
  * a {@link PrematureChannelClosureException} is thrown.
  *
  * @see HttpServerCodec

File: src/main/java/com/linecorp/armeria/internal/http/Http2GoAwayListener.java
Patch:
@@ -23,13 +23,12 @@
 
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.Channel;
-import io.netty.handler.codec.http2.Http2Connection;
 import io.netty.handler.codec.http2.Http2ConnectionAdapter;
 import io.netty.handler.codec.http2.Http2Error;
 import io.netty.handler.codec.http2.Http2Stream;
 
 /**
- * A {@link Http2Connection.Listener} that logs the received GOAWAY frames and makes sure disconnection.
+ * A {@link Http2ConnectionAdapter} that logs the received GOAWAY frames and makes sure disconnection.
  */
 public class Http2GoAwayListener extends Http2ConnectionAdapter {
 

File: src/main/java/com/linecorp/armeria/server/GlobPathMapping.java
Patch:
@@ -80,7 +80,7 @@ static Pattern globToRegex(String glob) {
             switch (asterisks) {
             case 1:
                 // Handle '/*/' specially.
-                if (beforeAsterisk == '/' && c =='/') {
+                if (beforeAsterisk == '/' && c == '/') {
                     buf.append("[^/]+");
                 } else {
                     buf.append("[^/]*");

File: src/main/java/com/linecorp/armeria/server/PathMappings.java
Patch:
@@ -117,7 +117,7 @@ public PathMapped<T> apply(String path) {
         // Cache miss or disabled cache
         PathMapped<T> result = PathMapped.empty();
         final int size = patterns.size();
-        for (int i = 0; i < size; i ++) {
+        for (int i = 0; i < size; i++) {
             final Entry<PathMapping, T> e = patterns.get(i);
             final String mappedPath = e.getKey().apply(path);
             if (mappedPath != null) {

File: src/main/java/com/linecorp/armeria/server/PrefixPathMapping.java
Patch:
@@ -26,7 +26,7 @@ final class PrefixPathMapping extends AbstractPathMapping {
     private final String strVal;
 
     PrefixPathMapping(String prefix, boolean stripPrefix) {
-        prefix = ExactPathMapping.ensureAbsolutePath(prefix, "prefix");
+        prefix = ensureAbsolutePath(prefix, "prefix");
         if (!prefix.endsWith("/")) {
             prefix += '/';
         }

File: src/main/java/com/linecorp/armeria/server/ServiceConfig.java
Patch:
@@ -35,7 +35,9 @@ public final class ServiceConfig {
             Pattern.compile("^\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*" +
                             "(?:\\.\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)*$");
 
-    /** Initialized later by {@link VirtualHost} via {@link #build(VirtualHost)}. */
+    /**
+     * Initialized later by {@link VirtualHost} via {@link #build(VirtualHost)}.
+     */
     private VirtualHost virtualHost;
 
     private final PathMapping pathMapping;

File: src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java
Patch:
@@ -22,7 +22,6 @@
 
 import org.slf4j.Logger;
 
-import com.linecorp.armeria.client.ClientOption;
 import com.linecorp.armeria.common.ContentTooLargeException;
 import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.RequestContext;

File: src/main/java/com/linecorp/armeria/server/docs/Specification.java
Patch:
@@ -35,7 +35,7 @@
 import com.linecorp.armeria.server.ServiceConfig;
 import com.linecorp.armeria.server.thrift.THttpService;
 
-class Specification {
+final class Specification {
 
     static Specification forServiceConfigs(Iterable<ServiceConfig> serviceConfigs,
                                            Map<Class<?>, ? extends TBase<?, ?>> sampleRequests,

File: src/main/java/com/linecorp/armeria/server/http/AbstractHttpService.java
Patch:
@@ -26,8 +26,8 @@
 
 /**
  * A skeletal {@link HttpService} for easier HTTP service implementation.
- * <p>
- * This class provides the methods that handles the HTTP requests of the methods their names signify.
+ *
+ * <p>This class provides the methods that handles the HTTP requests of the methods their names signify.
  * For example, {@link #doGet(ServiceRequestContext, HttpRequest, HttpResponseWriter) doGet()} method handles a
  * {@code GET} request.
  * <ul>

File: src/main/java/com/linecorp/armeria/server/http/HttpServer.java
Patch:
@@ -17,7 +17,6 @@
 package com.linecorp.armeria.server.http;
 
 import com.linecorp.armeria.common.SessionProtocol;
-import com.linecorp.armeria.server.ServerConfig;
 
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelHandler;
@@ -47,5 +46,6 @@ static HttpServer get(ChannelHandlerContext ctx) {
     }
 
     SessionProtocol protocol();
+
     int unfinishedRequests();
 }

File: src/main/java/com/linecorp/armeria/server/http/jetty/JettyService.java
Patch:
@@ -75,7 +75,7 @@
  *
  * @see JettyServiceBuilder
  */
-public class JettyService implements HttpService {
+public final class JettyService implements HttpService {
 
     private static final Logger logger = LoggerFactory.getLogger(JettyService.class);
 
@@ -157,7 +157,7 @@ static JettyService forConfig(JettyServiceConfig config) {
     private boolean startedServer;
 
     private JettyService(String hostname, Function<ExecutorService, Server> serverSupplier) {
-        this(hostname, serverSupplier, unused -> {});
+        this(hostname, serverSupplier, unused -> { /* unused */ });
     }
 
     private JettyService(String hostname,

File: src/main/java/com/linecorp/armeria/server/http/tomcat/TomcatService.java
Patch:
@@ -270,7 +270,7 @@ static String toString(org.apache.catalina.Server server) {
     private boolean started;
 
     private TomcatService(String hostname, Function<String, Connector> connectorFactory) {
-        this(hostname, connectorFactory, unused -> {});
+        this(hostname, connectorFactory, unused -> { /* unused */ });
     }
 
     private TomcatService(String hostname,
@@ -301,7 +301,7 @@ public void serviceAdded(ServiceConfig cfg) throws Exception {
     }
 
     /**
-     * Returns Tomcat {@link Connector}
+     * Returns Tomcat {@link Connector}.
      */
     public Connector connector() {
         final Connector connector = this.connector;

File: src/main/java/com/linecorp/armeria/server/thrift/ThriftCallService.java
Patch:
@@ -43,7 +43,7 @@
  *
  * @see THttpService
  */
-public class ThriftCallService implements Service<ThriftCall, ThriftReply> {
+public final class ThriftCallService implements Service<ThriftCall, ThriftReply> {
 
     /**
      * Creates a new instance with the specified service implementation.

File: src/main/java/com/linecorp/armeria/server/thrift/ThriftService.java
Patch:
@@ -33,7 +33,7 @@
  * @deprecated Use {@link THttpService} instead.
  */
 @Deprecated
-public class ThriftService extends THttpService {
+public final class ThriftService extends THttpService {
 
     /**
      * @deprecated Use {@link THttpService#of(Object)} instead.

File: src/main/java/com/linecorp/armeria/server/tracing/AbstractTracingService.java
Patch:
@@ -42,8 +42,9 @@
 
 /**
  * An abstract {@link DecoratingService} that traces incoming {@link Request}s.
- * <p>
- * This class depends on <a href="https://github.com/openzipkin/brave">Brave</a>, a distributed tracing library.
+ *
+ * <p>This class depends on <a href="https://github.com/openzipkin/brave">Brave</a>, a distributed tracing
+ * library.
  *
  * @param <I> the {@link Request} type
  * @param <O> the {@link Response} type

File: src/main/java/com/linecorp/armeria/server/tracing/HttpTracingService.java
Patch:
@@ -37,8 +37,8 @@
 /**
  * Decorates a {@link Service} to trace inbound {@link HttpRequest}s using
  * <a href="http://zipkin.io/">Zipkin</a>.
- * <p>
- * This decorator retrieves trace data from HTTP headers. The specifications of header names and its values
+ *
+ * <p>This decorator retrieves trace data from HTTP headers. The specifications of header names and its values
  * correspond to <a href="http://zipkin.io/">Zipkin</a>.
  */
 public class HttpTracingService extends AbstractTracingService<HttpRequest, HttpResponse> {

File: src/test/java/com/linecorp/armeria/client/ClientOptionsTest.java
Patch:
@@ -16,8 +16,6 @@
 package com.linecorp.armeria.client;
 
 import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.not;
-import static org.hamcrest.Matchers.nullValue;
 import static org.junit.Assert.assertThat;
 
 import java.util.Optional;

File: src/test/java/com/linecorp/armeria/client/SessionOptionsTest.java
Patch:
@@ -44,7 +44,7 @@ public void defaultTest() {
     }
 
     @Test
-    public void valueOverrideTest(){
+    public void valueOverrideTest() {
         Duration connectionTimeout = Duration.ofMillis(10);
         Duration idleTimeout = Duration.ofMillis(200);
         EventLoop eventLoop = mock(EventLoop.class);
@@ -64,12 +64,12 @@ public void valueOverrideTest(){
     }
 
     @Test(expected = IllegalArgumentException.class)
-    public void testValidateFailConnectTimeout(){
+    public void testValidateFailConnectTimeout() {
         SessionOptions.of(CONNECT_TIMEOUT.newValue(Duration.ZERO));
     }
 
     @Test(expected = IllegalArgumentException.class)
-    public void testValidateFailIdleTimeout(){
+    public void testValidateFailIdleTimeout() {
         SessionOptions.of(IDLE_TIMEOUT.newValue(Duration.ofMillis(-1)));
     }
 }

File: src/test/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClientTest.java
Patch:
@@ -72,7 +72,8 @@ public class CircuitBreakerClientTest {
     private static final ThriftCall req = ctx.request();
     private static final ThriftCall reqB = ctxB.request();
     private static final ThriftReply successRes = new ThriftReply(0, (Object) null);
-    private static final ThriftReply failureRes = new ThriftReply(0, Exceptions.clearTrace(new Exception("bug")));
+    private static final ThriftReply failureRes =
+            new ThriftReply(0, Exceptions.clearTrace(new Exception("bug")));
 
     @Test
     public void testSingletonDecorator() throws Exception {

File: src/test/java/com/linecorp/armeria/client/http/HttpClientSniTest.java
Patch:
@@ -40,9 +40,9 @@
 import com.linecorp.armeria.common.http.HttpRequest;
 import com.linecorp.armeria.common.http.HttpResponseWriter;
 import com.linecorp.armeria.common.http.HttpStatus;
-import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.ServerBuilder;
+import com.linecorp.armeria.server.ServiceRequestContext;
 import com.linecorp.armeria.server.VirtualHostBuilder;
 import com.linecorp.armeria.server.http.AbstractHttpService;
 

File: src/test/java/com/linecorp/armeria/client/limit/ConcurrencyLimitingHttpClientTest.java
Patch:
@@ -254,6 +254,6 @@ private static void closeAndDrain(DefaultHttpResponse actualRes, HttpResponse de
     }
 
     private static void waitForEventLoop() {
-        eventLoop.submit(() -> {}).syncUninterruptibly();
+        eventLoop.submit(() -> { /* no-op */ }).syncUninterruptibly();
     }
 }

File: src/test/java/com/linecorp/armeria/client/tracing/HttpTracingClientTest.java
Patch:
@@ -34,9 +34,7 @@
 import com.linecorp.armeria.common.http.HttpHeaders;
 import com.linecorp.armeria.common.http.HttpMethod;
 import com.linecorp.armeria.common.http.HttpRequest;
-import com.linecorp.armeria.common.thrift.ThriftCall;
 import com.linecorp.armeria.common.tracing.HttpTracingTestBase;
-import com.linecorp.armeria.service.test.thrift.main.HelloService;
 
 import io.netty.channel.DefaultEventLoop;
 

File: src/test/java/com/linecorp/armeria/common/RequestContextTest.java
Patch:
@@ -34,7 +34,6 @@
 
 import org.eclipse.jetty.util.ConcurrentHashSet;
 import org.junit.Assert;
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;

File: src/test/java/com/linecorp/armeria/server/GracefulShutdownHandlerTest.java
Patch:
@@ -226,7 +226,9 @@ private void submitLongTask() {
         executor.execute(() -> {
             try {
                 Thread.sleep(10000);
-            } catch (InterruptedException ignored) {}
+            } catch (InterruptedException ignored) {
+                // Ignored
+            }
         });
     }
 }

File: src/test/java/com/linecorp/armeria/server/ServerTest.java
Patch:
@@ -67,7 +67,8 @@ public class ServerTest extends AbstractServerTest {
     @Override
     protected void configureServer(ServerBuilder sb) {
 
-        final Service<HttpRequest, HttpResponse> immediateResponseOnIoThread = new EchoService().decorate(LoggingService::new);
+        final Service<HttpRequest, HttpResponse> immediateResponseOnIoThread =
+                new EchoService().decorate(LoggingService::new);
 
         final Service<HttpRequest, HttpResponse> delayedResponseOnIoThread = new EchoService() {
             @Override
@@ -106,7 +107,7 @@ protected void doPost(ServiceRequestContext ctx,
 
         // Disable request timeout for '/timeout-not' only.
         final Function<Service<HttpRequest, HttpResponse>, Service<HttpRequest, HttpResponse>> decorator =
-                delegate -> new DecoratingService<HttpRequest, HttpResponse, HttpRequest, HttpResponse>(delegate) {
+                s -> new DecoratingService<HttpRequest, HttpResponse, HttpRequest, HttpResponse>(s) {
                     @Override
                     public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {
                         ctx.setRequestTimeoutMillis(

File: src/test/java/com/linecorp/armeria/server/composition/CompositeServiceTest.java
Patch:
@@ -108,7 +108,9 @@ public void testServiceGetters() throws Exception {
         }
     }
 
-    private static final class TestCompositeService extends AbstractCompositeService<HttpRequest, HttpResponse> {
+    private static final class TestCompositeService
+            extends AbstractCompositeService<HttpRequest, HttpResponse> {
+
         TestCompositeService() {
             super(CompositeServiceEntry.ofPrefix("/foo/", serviceA),
                   CompositeServiceEntry.ofPrefix("/bar/", serviceB),

File: src/test/java/com/linecorp/armeria/server/http/HttpServerIdleTimeoutHandlerTest.java
Patch:
@@ -104,7 +104,8 @@ private void writeResponse() {
         server.unfinishedRequests--;
     }
 
-    private static final class MockHttpServerHandler extends ChannelInboundHandlerAdapter implements HttpServer {
+    private static final class MockHttpServerHandler
+            extends ChannelInboundHandlerAdapter implements HttpServer {
 
         int unfinishedRequests;
 

File: src/test/java/com/linecorp/armeria/server/metrics/MessageLogConsumerTest.java
Patch:
@@ -22,9 +22,9 @@
 import org.junit.Test;
 
 import com.linecorp.armeria.common.RequestContext;
+import com.linecorp.armeria.common.logging.MessageLogConsumer;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.ResponseLog;
-import com.linecorp.armeria.common.logging.MessageLogConsumer;
 
 public class MessageLogConsumerTest {
     @Test

File: src/test/java/com/linecorp/armeria/server/thrift/AbstractThriftOverHttpTest.java
Patch:
@@ -145,6 +145,8 @@ protected final TTransport newTransport(String scheme, String path) throws TTran
         return newTransport(newUri(scheme, path));
     }
 
+    protected abstract TTransport newTransport(String uri) throws TTransportException;
+
     protected static String newUri(String scheme, String path) {
         switch (scheme) {
         case "http":
@@ -155,6 +157,4 @@ protected static String newUri(String scheme, String path) {
 
         throw new Error();
     }
-
-    protected abstract TTransport newTransport(String uri) throws TTransportException;
 }

File: src/test/java/com/linecorp/armeria/server/thrift/ThriftOverHttp1Test.java
Patch:
@@ -83,8 +83,8 @@ public void testNonPostRequest() throws Exception {
     public void testPipelinedHttpInvocation() throws Exception {
         // FIXME: Enable this test once we have a working Thrift-over-HTTP/1 client with pipelining.
         try (TTransport transport = newTransport("http", "/sleep")) {
-            SleepService.Client client =
-                    new SleepService.Client.Factory().getClient(ThriftProtocolFactories.BINARY.getProtocol(transport));
+            SleepService.Client client = new SleepService.Client.Factory().getClient(
+                    ThriftProtocolFactories.BINARY.getProtocol(transport));
 
             client.send_sleep(1000);
             client.send_sleep(500);

File: src/test/java/com/linecorp/armeria/server/tracing/TracingServiceTest.java
Patch:
@@ -65,10 +65,10 @@ public void shouldSubmitSpanWhenRequestIsSampled() throws Exception {
         StubCollector spanCollector = testServiceInvocation(true /* sampled */);
 
         // only one span should be submitted
-        assertThat(spanCollector.spans, hasSize(1));
+        assertThat(spanCollector.spans(), hasSize(1));
 
         // check span name
-        Span span = spanCollector.spans.get(0);
+        Span span = spanCollector.spans().get(0);
         assertThat(span.getName(), is(TEST_METHOD));
 
         // check # of annotations
@@ -91,7 +91,7 @@ public void shouldNotSubmitSpanWhenRequestIsNotSampled() throws Exception {
         StubCollector spanCollector = testServiceInvocation(false /* not sampled */);
 
         // don't submit any spans
-        assertThat(spanCollector.spans, hasSize(0));
+        assertThat(spanCollector.spans(), hasSize(0));
     }
 
     private static StubCollector testServiceInvocation(boolean sampled) throws Exception {

File: src/main/java/com/linecorp/armeria/server/DecoratingService.java
Patch:
@@ -60,7 +60,7 @@ public void serviceAdded(ServiceConfig cfg) throws Exception {
     }
 
     @Override
-    public final <T extends Service<?, ?>> Optional<T> as(Class<T> serviceType) {
+    public final <T> Optional<T> as(Class<T> serviceType) {
         final Optional<T> result = Service.super.as(serviceType);
         return result.isPresent() ? result : delegate.as(serviceType);
     }

File: src/main/java/com/linecorp/armeria/server/Service.java
Patch:
@@ -66,7 +66,7 @@ default void serviceAdded(ServiceConfig cfg) throws Exception {}
      * @return the {@link Service} which is an instance of {@code serviceType} if this {@link Service}
      *         decorated such a {@link Service}. {@link Optional#empty()} otherwise.
      */
-    default <T extends Service<?, ?>> Optional<T> as(Class<T> serviceType) {
+    default <T> Optional<T> as(Class<T> serviceType) {
         requireNonNull(serviceType, "serviceType");
         return serviceType.isInstance(this) ? Optional.of(serviceType.cast(this))
                                             : Optional.empty();

File: src/test/java/com/linecorp/armeria/server/ServiceTest.java
Patch:
@@ -40,7 +40,7 @@ public void testLambdaExpressionDecorator() throws Exception {
         // Test if Service.as() works as expected.
         assertThat(outer.as(serviceType(inner))).containsSame(inner);
         assertThat(outer.as(serviceType(outer))).containsSame(outer);
-        //assertThat(outer.as(String.class)).isNotPresent();
+        assertThat(outer.as(String.class)).isNotPresent();
 
         // Test if FooService.serviceAdded() is invoked.
         final ServiceConfig cfg = new ServiceConfig(PathMapping.ofCatchAll(), outer, "foo");

File: src/test/java/com/linecorp/armeria/server/tracing/TracingServiceTest.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.stream.Collectors;
 
 import org.junit.Test;
-import org.mockito.Matchers;
+import org.mockito.ArgumentMatchers;
 
 import com.github.kristofa.brave.Brave;
 import com.github.kristofa.brave.KeyValueAnnotation;
@@ -121,8 +121,8 @@ private static StubCollector testServiceInvocation(boolean sampled) throws Excep
         // AbstractTracingService prefers RpcRequest.method() to ctx.method(), so "POST" should be ignored.
         when(ctx.method()).thenReturn("POST");
         when(ctx.requestLogFuture()).thenReturn(reqLog);
-        ctx.onEnter(Matchers.isA(Runnable.class));
-        ctx.onExit(Matchers.isA(Runnable.class));
+        ctx.onEnter(ArgumentMatchers.isA(Runnable.class));
+        ctx.onExit(ArgumentMatchers.isA(Runnable.class));
 
         ThriftReply res = new ThriftReply(0, "Hello, trustin!");
         when(delegate.serve(ctx, req)).thenReturn(res);

File: src/test/java/com/linecorp/armeria/client/http/HttpClientIntegrationTest.java
Patch:
@@ -176,12 +176,12 @@ public void testRequestNoBodyWithoutExtraHeaders() throws Exception {
             s.setSoTimeout(10000);
             ByteStreams.readFully(in, buf);
 
+            // Ensure that the encoded request matches.
+            assertThat(new String(buf, StandardCharsets.US_ASCII)).isEqualTo(expected);
+
             // Should not send anything more.
             s.setSoTimeout(1000);
             assertThatThrownBy(in::read).isInstanceOf(SocketTimeoutException.class);
-
-            // Ensure that the encoded request matches.
-            assertThat(new String(buf, StandardCharsets.US_ASCII)).isEqualTo(expected);
         } finally {
             Closeables.close(s, true);
             Closeables.close(ss, true);

File: src/main/java/com/linecorp/armeria/client/http/HttpClientPipelineConfigurator.java
Patch:
@@ -410,7 +410,7 @@ public void onComplete() {}
             });
 
             // NB: No need to set the response timeout because we have session creation timeout.
-            responseDecoder.addResponse(0, res, ResponseLogBuilder.NOOP, 0, UPGRADE_RESPONSE_MAX_LENGTH);
+            responseDecoder.addResponse(0, null, res, ResponseLogBuilder.NOOP, 0, UPGRADE_RESPONSE_MAX_LENGTH);
             ctx.fireChannelActive();
         }
 
@@ -560,8 +560,7 @@ private Http2ClientConnectionHandler newHttp2ConnectionHandler(Channel ch) {
         Http2ConnectionEncoder encoder = new DefaultHttp2ConnectionEncoder(conn, writer);
         Http2ConnectionDecoder decoder = new DefaultHttp2ConnectionDecoder(conn, encoder, reader);
 
-        final Http2ResponseDecoder listener = new Http2ResponseDecoder(
-                ch);
+        final Http2ResponseDecoder listener = new Http2ResponseDecoder(conn, ch);
 
         final Http2ClientConnectionHandler handler =
                 new Http2ClientConnectionHandler(decoder, encoder, new Http2Settings(), listener);

File: src/main/java/com/linecorp/armeria/client/http/HttpSessionHandler.java
Patch:
@@ -119,7 +119,7 @@ public boolean invoke(ClientRequestContext ctx, HttpRequest req, DecodedHttpResp
 
         final int numRequestsSent = ++this.numRequestsSent;
         final HttpResponseWrapper wrappedRes =
-                responseDecoder.addResponse(numRequestsSent, res, ctx.responseLogBuilder(),
+                responseDecoder.addResponse(numRequestsSent, req, res, ctx.responseLogBuilder(),
                                             responseTimeoutMillis, maxContentLength);
         req.subscribe(
                 new HttpRequestSubscriber(channel, requestEncoder,

File: src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java
Patch:
@@ -385,9 +385,7 @@ private void cleanup() {
             }
 
             if (e instanceof CompletableFuture) {
-                @SuppressWarnings("unchecked")
-                final CompletableFuture<Void> f = (CompletableFuture<Void>) e;
-                f.completeExceptionally(cause);
+                ((CompletableFuture<?>) e).completeExceptionally(cause);
             }
 
             @SuppressWarnings("unchecked")

File: src/main/java/com/linecorp/armeria/client/http/HttpClientPipelineConfigurator.java
Patch:
@@ -410,7 +410,7 @@ public void onComplete() {}
             });
 
             // NB: No need to set the response timeout because we have session creation timeout.
-            responseDecoder.addResponse(0, res, ResponseLogBuilder.NOOP, 0, UPGRADE_RESPONSE_MAX_LENGTH);
+            responseDecoder.addResponse(0, null, res, ResponseLogBuilder.NOOP, 0, UPGRADE_RESPONSE_MAX_LENGTH);
             ctx.fireChannelActive();
         }
 
@@ -560,8 +560,7 @@ private Http2ClientConnectionHandler newHttp2ConnectionHandler(Channel ch) {
         Http2ConnectionEncoder encoder = new DefaultHttp2ConnectionEncoder(conn, writer);
         Http2ConnectionDecoder decoder = new DefaultHttp2ConnectionDecoder(conn, encoder, reader);
 
-        final Http2ResponseDecoder listener = new Http2ResponseDecoder(
-                ch);
+        final Http2ResponseDecoder listener = new Http2ResponseDecoder(conn, ch);
 
         final Http2ClientConnectionHandler handler =
                 new Http2ClientConnectionHandler(decoder, encoder, new Http2Settings(), listener);

File: src/main/java/com/linecorp/armeria/client/http/HttpSessionHandler.java
Patch:
@@ -119,7 +119,7 @@ public boolean invoke(ClientRequestContext ctx, HttpRequest req, DecodedHttpResp
 
         final int numRequestsSent = ++this.numRequestsSent;
         final HttpResponseWrapper wrappedRes =
-                responseDecoder.addResponse(numRequestsSent, res, ctx.responseLogBuilder(),
+                responseDecoder.addResponse(numRequestsSent, req, res, ctx.responseLogBuilder(),
                                             responseTimeoutMillis, maxContentLength);
         req.subscribe(
                 new HttpRequestSubscriber(channel, requestEncoder,

File: src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java
Patch:
@@ -379,9 +379,7 @@ private void cleanup() {
             }
 
             if (e instanceof CompletableFuture) {
-                @SuppressWarnings("unchecked")
-                final CompletableFuture<Void> f = (CompletableFuture<Void>) e;
-                f.completeExceptionally(cause);
+                ((CompletableFuture<?>) e).completeExceptionally(cause);
             }
 
             @SuppressWarnings("unchecked")

File: src/main/java/com/linecorp/armeria/client/http/HttpRequestSubscriber.java
Patch:
@@ -34,7 +34,7 @@
 import com.linecorp.armeria.common.http.HttpRequest;
 import com.linecorp.armeria.common.logging.RequestLog;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
-import com.linecorp.armeria.common.reactivestreams.ClosedPublisherException;
+import com.linecorp.armeria.common.stream.ClosedPublisherException;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.internal.http.HttpObjectEncoder;
 

File: src/main/java/com/linecorp/armeria/common/Request.java
Patch:
@@ -17,13 +17,13 @@
 package com.linecorp.armeria.common;
 
 import com.linecorp.armeria.common.http.HttpRequest;
-import com.linecorp.armeria.common.reactivestreams.RichPublisher;
+import com.linecorp.armeria.common.stream.StreamMessage;
 import com.linecorp.armeria.common.thrift.ThriftCall;
 
 /**
  * A request. It is usually one of the following:
  * <ul>
- *   <li>A {@link RichPublisher} with some initial information (if necessary)
+ *   <li>A {@link StreamMessage} with some initial information (if necessary)
  *     <ul>
  *       <li>e.g. {@link HttpRequest} whose initial information is its initial HTTP headers</li>
  *     </ul>

File: src/main/java/com/linecorp/armeria/common/http/DefaultHttpRequest.java
Patch:
@@ -20,13 +20,13 @@
 
 import com.google.common.base.MoreObjects;
 
-import com.linecorp.armeria.common.reactivestreams.QueueBasedPublisher;
+import com.linecorp.armeria.common.stream.DefaultStreamMessage;
 
 /**
  * Default {@link HttpRequest} implementation.
  */
 public class DefaultHttpRequest
-        extends QueueBasedPublisher<HttpObject> implements HttpRequest, HttpRequestWriter {
+        extends DefaultStreamMessage<HttpObject> implements HttpRequest, HttpRequestWriter {
 
     private final HttpHeaders headers;
     private final boolean keepAlive;

File: src/main/java/com/linecorp/armeria/common/http/DefaultHttpResponse.java
Patch:
@@ -18,13 +18,13 @@
 
 import com.google.common.base.MoreObjects;
 
-import com.linecorp.armeria.common.reactivestreams.QueueBasedPublisher;
+import com.linecorp.armeria.common.stream.DefaultStreamMessage;
 
 /**
  * Default {@link HttpResponse} instance.
  */
 public class DefaultHttpResponse
-        extends QueueBasedPublisher<HttpObject> implements HttpResponse, HttpResponseWriter {
+        extends DefaultStreamMessage<HttpObject> implements HttpResponse, HttpResponseWriter {
 
     @Override
     public String toString() {

File: src/main/java/com/linecorp/armeria/common/http/HttpRequest.java
Patch:
@@ -23,15 +23,15 @@
 import org.reactivestreams.Subscriber;
 
 import com.linecorp.armeria.common.Request;
-import com.linecorp.armeria.common.reactivestreams.RichPublisher;
+import com.linecorp.armeria.common.stream.StreamMessage;
 
 /**
  * A streamed HTTP/2 {@link Request}.
  *
  * <p>Note: The initial {@link HttpHeaders} is not signaled to {@link Subscriber}s. It is readily available
  * via {@link #headers()}.
  */
-public interface HttpRequest extends Request, RichPublisher<HttpObject> {
+public interface HttpRequest extends Request, StreamMessage<HttpObject> {
 
     /**
      * Creates a new instance from an existing {@link HttpHeaders} and {@link Publisher}.

File: src/main/java/com/linecorp/armeria/common/http/HttpRequestWriter.java
Patch:
@@ -16,11 +16,11 @@
 
 package com.linecorp.armeria.common.http;
 
-import com.linecorp.armeria.common.reactivestreams.Writer;
+import com.linecorp.armeria.common.stream.StreamWriter;
 
 /**
- * A {@link Writer} of an {@link HttpRequest}.
+ * A {@link StreamWriter} of an {@link HttpRequest}.
  */
-public interface HttpRequestWriter extends Writer<HttpObject> {
+public interface HttpRequestWriter extends StreamWriter<HttpObject> {
     // TODO(trustin): Add lots of convenience methods for easier response construction.
 }

File: src/main/java/com/linecorp/armeria/common/http/HttpResponse.java
Patch:
@@ -22,12 +22,12 @@
 import org.reactivestreams.Publisher;
 
 import com.linecorp.armeria.common.Response;
-import com.linecorp.armeria.common.reactivestreams.RichPublisher;
+import com.linecorp.armeria.common.stream.StreamMessage;
 
 /**
  * A streamed HTTP/2 {@link Response}.
  */
-public interface HttpResponse extends Response, RichPublisher<HttpObject> {
+public interface HttpResponse extends Response, StreamMessage<HttpObject> {
 
     /**
      * Creates a new instance from an existing {@link Publisher}.

File: src/main/java/com/linecorp/armeria/common/http/HttpResponseWriter.java
Patch:
@@ -25,12 +25,12 @@
 
 import com.google.common.net.MediaType;
 
-import com.linecorp.armeria.common.reactivestreams.Writer;
+import com.linecorp.armeria.common.stream.StreamWriter;
 
 /**
- * A {@link Writer} of an {@link HttpResponse}.
+ * A {@link StreamWriter} of an {@link HttpResponse}.
  */
-public interface HttpResponseWriter extends Writer<HttpObject> {
+public interface HttpResponseWriter extends StreamWriter<HttpObject> {
     // TODO(trustin): Add lots of convenience methods for easier response construction.
 
     /**

File: src/main/java/com/linecorp/armeria/common/http/PublisherBasedHttpRequest.java
Patch:
@@ -18,9 +18,9 @@
 
 import org.reactivestreams.Publisher;
 
-import com.linecorp.armeria.common.reactivestreams.PublisherWithCloseFuture;
+import com.linecorp.armeria.common.stream.PublisherBasedStreamMessage;
 
-final class PublisherBasedHttpRequest extends PublisherWithCloseFuture<HttpObject> implements HttpRequest {
+final class PublisherBasedHttpRequest extends PublisherBasedStreamMessage<HttpObject> implements HttpRequest {
 
     private final HttpHeaders headers;
     private final boolean keepAlive;

File: src/main/java/com/linecorp/armeria/common/http/PublisherBasedHttpResponse.java
Patch:
@@ -18,9 +18,9 @@
 
 import org.reactivestreams.Publisher;
 
-import com.linecorp.armeria.common.reactivestreams.PublisherWithCloseFuture;
+import com.linecorp.armeria.common.stream.PublisherBasedStreamMessage;
 
-final class PublisherBasedHttpResponse extends PublisherWithCloseFuture<HttpObject> implements HttpResponse {
+final class PublisherBasedHttpResponse extends PublisherBasedStreamMessage<HttpObject> implements HttpResponse {
     PublisherBasedHttpResponse(Publisher<? extends HttpObject> publisher) {
         super(publisher);
     }

File: src/main/java/com/linecorp/armeria/common/stream/AbortingSubscriber.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.common.reactivestreams;
+package com.linecorp.armeria.common.stream;
 
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;

File: src/main/java/com/linecorp/armeria/common/stream/CancelledSubscriptionException.java
Patch:
@@ -14,15 +14,15 @@
  * under the License.
  */
 
-package com.linecorp.armeria.common.reactivestreams;
+package com.linecorp.armeria.common.stream;
 
 import org.reactivestreams.Subscriber;
 import org.reactivestreams.Subscription;
 
 import com.linecorp.armeria.common.util.Exceptions;
 
 /**
- * A {@link RuntimeException} that is raised to notify {@link RichPublisher#closeFuture()} when a
+ * A {@link RuntimeException} that is raised to notify {@link StreamMessage#closeFuture()} when a
  * {@link Subscriber} has cancelled its {@link Subscription}.
  */
 public final class CancelledSubscriptionException extends RuntimeException {

File: src/main/java/com/linecorp/armeria/common/stream/ClosedPublisherException.java
Patch:
@@ -14,13 +14,13 @@
  * under the License.
  */
 
-package com.linecorp.armeria.common.reactivestreams;
+package com.linecorp.armeria.common.stream;
 
 import com.linecorp.armeria.common.util.Exceptions;
 
 /**
- * A {@link RuntimeException} that is raised when a {@link Writer} attempts to write an object to a terminated
- * {@link RichPublisher}.
+ * A {@link RuntimeException} that is raised when a {@link StreamWriter} attempts to write an object to a
+ * closed {@link StreamMessage}.
  */
 public final class ClosedPublisherException extends RuntimeException {
 

File: src/main/java/com/linecorp/armeria/internal/http/Http1ObjectEncoder.java
Patch:
@@ -27,7 +27,7 @@
 import com.linecorp.armeria.common.http.HttpMethod;
 import com.linecorp.armeria.common.http.HttpStatus;
 import com.linecorp.armeria.common.http.HttpStatusClass;
-import com.linecorp.armeria.common.reactivestreams.ClosedPublisherException;
+import com.linecorp.armeria.common.stream.ClosedPublisherException;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;

File: src/main/java/com/linecorp/armeria/internal/http/Http2ObjectEncoder.java
Patch:
@@ -20,7 +20,7 @@
 
 import com.linecorp.armeria.common.http.HttpData;
 import com.linecorp.armeria.common.http.HttpHeaders;
-import com.linecorp.armeria.common.reactivestreams.ClosedPublisherException;
+import com.linecorp.armeria.common.stream.ClosedPublisherException;
 
 import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelHandlerContext;

File: src/main/java/com/linecorp/armeria/server/http/HttpServerHandler.java
Patch:
@@ -44,7 +44,7 @@
 import com.linecorp.armeria.common.http.HttpResponse;
 import com.linecorp.armeria.common.http.HttpStatus;
 import com.linecorp.armeria.common.logging.RequestLogBuilder;
-import com.linecorp.armeria.common.reactivestreams.ClosedPublisherException;
+import com.linecorp.armeria.common.stream.ClosedPublisherException;
 import com.linecorp.armeria.common.util.CompletionActions;
 import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.internal.http.AbstractHttp2ConnectionHandler;

File: src/test/java/com/linecorp/armeria/server/http/HttpServerTest.java
Patch:
@@ -70,7 +70,7 @@
 import com.linecorp.armeria.common.http.HttpResponse;
 import com.linecorp.armeria.common.http.HttpResponseWriter;
 import com.linecorp.armeria.common.http.HttpStatus;
-import com.linecorp.armeria.common.reactivestreams.Writer;
+import com.linecorp.armeria.common.stream.StreamWriter;
 import com.linecorp.armeria.common.util.NativeLibraries;
 import com.linecorp.armeria.internal.InboundTrafficController;
 import com.linecorp.armeria.server.AbstractServerTest;
@@ -447,7 +447,7 @@ public void onComplete() {}
         assertThat(consumer.numReceivedBytes(), is(STREAMING_CONTENT_LENGTH));
     }
 
-    private static void stream(Writer<HttpObject> writer, long size, int chunkSize) {
+    private static void stream(StreamWriter<HttpObject> writer, long size, int chunkSize) {
         if (!writer.write(HttpData.of(new byte[chunkSize]))) {
             return;
         }

File: src/main/java/com/linecorp/armeria/client/http/Http1ResponseDecoder.java
Patch:
@@ -115,9 +115,9 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                             state = State.NEED_INFORMATIONAL_DATA;
                         } else {
                             state = State.NEED_DATA_OR_TRAILING_HEADERS;
-                            res.scheduleTimeout(ctx);
                         }
 
+                        res.scheduleTimeout(ctx);
                         res.write(ArmeriaHttpUtil.toArmeria(nettyRes));
                     } else {
                         failWithUnexpectedMessageType(ctx, msg);

File: src/main/java/com/linecorp/armeria/client/http/Http1ResponseDecoder.java
Patch:
@@ -115,9 +115,9 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                             state = State.NEED_INFORMATIONAL_DATA;
                         } else {
                             state = State.NEED_DATA_OR_TRAILING_HEADERS;
-                            res.scheduleTimeout(ctx);
                         }
 
+                        res.scheduleTimeout(ctx);
                         res.write(ArmeriaHttpUtil.toArmeria(nettyRes));
                     } else {
                         failWithUnexpectedMessageType(ctx, msg);

File: src/main/java/com/linecorp/armeria/client/ClientOption.java
Patch:
@@ -27,6 +27,8 @@
 
 /**
  * A client option.
+ *
+ * @param <T> the type of the option value
  */
 public final class ClientOption<T> extends AbstractOption<T> {
 

File: src/main/java/com/linecorp/armeria/client/ClientOptionValue.java
Patch:
@@ -19,6 +19,8 @@
 
 /**
  * A value of a {@link ClientOption}.
+ *
+ * @param <T> the type of the option value
  */
 public final class ClientOptionValue<T> extends AbstractOptionValue<ClientOption<T>, T> {
 

File: src/main/java/com/linecorp/armeria/client/SessionOption.java
Patch:
@@ -34,6 +34,8 @@
 
 /**
  * An option that affects the session management of a {@link ClientFactory}.
+ *
+ * @param <T> the type of the option value
  */
 public class SessionOption<T> extends AbstractOption<T> {
 

File: src/main/java/com/linecorp/armeria/client/SessionOptionValue.java
Patch:
@@ -19,8 +19,10 @@
 
 /**
  * A value of a {@link SessionOption}.
+ *
+ * @param <T> the type of the option value
  */
-public class SessionOptionValue<T> extends AbstractOptionValue<SessionOption<T>, T> {
+public final class SessionOptionValue<T> extends AbstractOptionValue<SessionOption<T>, T> {
 
     SessionOptionValue(SessionOption<T> constant, T value) {
         super(constant, value);

File: src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.java
Patch:
@@ -34,6 +34,9 @@
 
 /**
  * A {@link Client} decorator that handles failures of remote invocation based on circuit breaker pattern.
+ *
+ * @param <I> the {@link Request} type
+ * @param <O> the {@link Response} type
  */
 public final class CircuitBreakerClient<I extends Request, O extends Response>
         extends DecoratingClient<I, O, I, O> {

File: src/main/java/com/linecorp/armeria/client/http/SimpleHttpClient.java
Patch:
@@ -17,13 +17,14 @@
 package com.linecorp.armeria.client.http;
 
 import com.linecorp.armeria.client.ClientOptionDerivable;
+import com.linecorp.armeria.common.http.AggregatedHttpMessage;
 
 import io.netty.util.concurrent.Future;
 
 /**
  * A simple HTTP client that can send a {@link SimpleHttpRequest} to an HTTP/1 or 2 server.
  *
- * @deprecated Use {@link HttpClient} instead.
+ * @deprecated Use {@link HttpClient#execute(AggregatedHttpMessage)} instead.
  * @see SimpleHttpRequestBuilder
  */
 @Deprecated

File: src/main/java/com/linecorp/armeria/client/http/SimpleHttpRequest.java
Patch:
@@ -33,7 +33,7 @@
  * A container for information to send in an HTTP request. This is a simpler version of {@link FullHttpRequest}
  * which only uses a byte array to avoid callers having to worry about memory management.
  *
- * @deprecated Use {@link HttpRequest} or {@link AggregatedHttpMessage} instead.
+ * @deprecated Use {@link AggregatedHttpMessage} instead.
  */
 @Deprecated
 public class SimpleHttpRequest {

File: src/main/java/com/linecorp/armeria/client/http/SimpleHttpRequestBuilder.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * Creates a new {@link SimpleHttpRequest}.
  *
- * @deprecated Use {@link HttpRequest} or {@link AggregatedHttpMessage} instead.
+ * @deprecated Use {@link AggregatedHttpMessage} instead.
  */
 @Deprecated
 public class SimpleHttpRequestBuilder {

File: src/main/java/com/linecorp/armeria/client/http/SimpleHttpResponse.java
Patch:
@@ -28,7 +28,7 @@
  * {@link FullHttpResponse} which only uses a byte array to avoid callers having to worry about memory
  * management.
  *
- * @deprecated Use {@link HttpResponse} or {@link AggregatedHttpMessage} instead.
+ * @deprecated Use {@link AggregatedHttpMessage} instead.
  */
 @Deprecated
 public class SimpleHttpResponse {

File: src/main/java/com/linecorp/armeria/client/logging/KeyedChannelPoolLoggingHandler.java
Patch:
@@ -20,10 +20,11 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.common.base.Ticker;
+
 import com.linecorp.armeria.client.pool.DecoratingKeyedChannelPoolHandler;
 import com.linecorp.armeria.client.pool.KeyedChannelPoolHandler;
 import com.linecorp.armeria.client.pool.PoolKey;
-import com.linecorp.armeria.common.util.Ticker;
 import com.linecorp.armeria.common.util.UnitFormatter;
 
 import io.netty.channel.Channel;

File: src/main/java/com/linecorp/armeria/client/pool/DecoratingKeyedChannelPoolHandler.java
Patch:
@@ -22,6 +22,8 @@
 
 /**
  * A {@link KeyedChannelPoolHandler} that decorates an existing {@link KeyedChannelPoolHandler}.
+ *
+ * @param <K> the key type
  */
 public class DecoratingKeyedChannelPoolHandler<K> implements KeyedChannelPoolHandler<K> {
 

File: src/main/java/com/linecorp/armeria/client/pool/KeyedChannelPoolHandler.java
Patch:
@@ -19,6 +19,8 @@
 
 /**
  * Handles the events produced by {@link KeyedChannelPool}.
+ *
+ * @param <K> the key type
  */
 public interface KeyedChannelPoolHandler<K> {
 

File: src/main/java/com/linecorp/armeria/client/pool/KeyedChannelPoolHandlerAdapter.java
Patch:
@@ -21,6 +21,8 @@
 /**
  * A skeletal {@link KeyedChannelPoolHandler} implementation to minimize the effort to implement this interface.
  * Extend this class to implement only few of the provided handler methods.
+ *
+ * @param <K> the key type
  */
 public class KeyedChannelPoolHandlerAdapter<K> implements KeyedChannelPoolHandler<K> {
 

File: src/main/java/com/linecorp/armeria/client/routing/EndpointGroup.java
Patch:
@@ -19,6 +19,9 @@
 
 import com.linecorp.armeria.client.Endpoint;
 
+/**
+ * A list of {@link Endpoint}s.
+ */
 @FunctionalInterface
 public interface EndpointGroup {
     /**

File: src/main/java/com/linecorp/armeria/client/tracing/HttpTracingClient.java
Patch:
@@ -31,14 +31,14 @@
 
 import com.linecorp.armeria.client.Client;
 import com.linecorp.armeria.client.ClientRequestContext;
-import com.linecorp.armeria.common.Request;
 import com.linecorp.armeria.common.http.DefaultHttpHeaders;
 import com.linecorp.armeria.common.http.HttpHeaders;
 import com.linecorp.armeria.common.http.HttpRequest;
 import com.linecorp.armeria.common.http.HttpResponse;
 
 /**
- * A {@link Client} decorator that traces HTTP-based remote service invocations.
+ * Decorates a {@link Client} to trace outbound {@link HttpRequest}s using
+ * <a href="http://zipkin.io/">Zipkin</a>.
  * <p>
  * This decorator puts trace data into HTTP headers. The specifications of header names and its values
  * correspond to <a href="http://zipkin.io/">Zipkin</a>.
@@ -58,7 +58,7 @@ public class HttpTracingClient extends AbstractTracingClient<HttpRequest, HttpRe
     }
 
     @Override
-    protected void putTraceData(ClientRequestContext ctx, Request req, @Nullable SpanId spanId) {
+    protected void putTraceData(ClientRequestContext ctx, HttpRequest req, @Nullable SpanId spanId) {
         final HttpHeaders headers;
         if (ctx.hasAttr(ClientRequestContext.HTTP_HEADERS)) {
             headers = ctx.attr(ClientRequestContext.HTTP_HEADERS).get();

File: src/main/java/com/linecorp/armeria/client/tracing/package-info.java
Patch:
@@ -15,7 +15,7 @@
  */
 
 /**
- * Distributed tracing client decorators based on <a href="https://github.com/openzipkin/brave">Brave</a>,
+ * Distributed tracing clients based on <a href="https://github.com/openzipkin/brave">Brave</a>,
  * a Java tracing library compatible with <a href="http://zipkin.io/">Zipkin</a>.
  */
 package com.linecorp.armeria.client.tracing;

File: src/main/java/com/linecorp/armeria/common/AbstractRequestContext.java
Patch:
@@ -27,7 +27,7 @@
 import io.netty.util.concurrent.Promise;
 
 /**
- * Default {@link RequestContext} implementation.
+ * A skeletal {@link RequestContext} implementation.
  */
 public abstract class AbstractRequestContext implements RequestContext {
 

File: src/main/java/com/linecorp/armeria/common/SerializationFormat.java
Patch:
@@ -140,6 +140,9 @@ public String uriText() {
         return uriText;
     }
 
+    /**
+     * Returns the {@link MediaType} of this format.
+     */
     public MediaType mediaType() {
         return mediaType;
     }

File: src/main/java/com/linecorp/armeria/common/http/DefaultHttpResponse.java
Patch:
@@ -20,6 +20,9 @@
 
 import com.linecorp.armeria.common.reactivestreams.QueueBasedPublisher;
 
+/**
+ * Default {@link HttpResponse} instance.
+ */
 public class DefaultHttpResponse
         extends QueueBasedPublisher<HttpObject> implements HttpResponse, HttpResponseWriter {
 

File: src/main/java/com/linecorp/armeria/common/http/HttpObject.java
Patch:
@@ -16,4 +16,7 @@
 
 package com.linecorp.armeria.common.http;
 
+/**
+ * The common interface for HTTP/2 message objects, {@link HttpHeaders} and {@link HttpData}.
+ */
 public interface HttpObject {}

File: src/main/java/com/linecorp/armeria/common/http/HttpRequestWriter.java
Patch:
@@ -18,6 +18,9 @@
 
 import com.linecorp.armeria.common.reactivestreams.Writer;
 
+/**
+ * A {@link Writer} of an {@link HttpRequest}.
+ */
 public interface HttpRequestWriter extends Writer<HttpObject> {
     // TODO(trustin): Add lots of convenience methods for easier response construction.
 }

File: src/main/java/com/linecorp/armeria/common/logging/AbstractMessageLog.java
Patch:
@@ -190,5 +190,5 @@ public final String toString() {
                      .add("attrs", attrs).toString();
     }
 
-    protected abstract void append(MoreObjects.ToStringHelper helper);
+    abstract void append(MoreObjects.ToStringHelper helper);
 }

File: src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java
Patch:
@@ -26,6 +26,9 @@
 
 import io.netty.channel.Channel;
 
+/**
+ * Default {@link RequestLog} implementation.
+ */
 public final class DefaultRequestLog
         extends AbstractMessageLog<RequestLog> implements RequestLog, RequestLogBuilder {
 

File: src/main/java/com/linecorp/armeria/common/logging/NoopAttribute.java
Patch:
@@ -14,18 +14,18 @@
  * under the License.
  */
 
-package com.linecorp.armeria.internal;
+package com.linecorp.armeria.common.logging;
 
 import static java.util.Objects.requireNonNull;
 
 import io.netty.util.Attribute;
 import io.netty.util.AttributeKey;
 
-public final class NoopAttribute<T> implements Attribute<T> {
+final class NoopAttribute<T> implements Attribute<T> {
 
     private final AttributeKey<T> key;
 
-    public NoopAttribute(AttributeKey<T> key) {
+    NoopAttribute(AttributeKey<T> key) {
         this.key = requireNonNull(key, "key");
     }
 

File: src/main/java/com/linecorp/armeria/common/util/LruMap.java
Patch:
@@ -21,6 +21,9 @@
 
 /**
  * LRU (Least Recently Used) cache {@link Map}.
+ *
+ * @param <T> the key type
+ * @param <U> the value type
  */
 public class LruMap<T, U> extends LinkedHashMap<T, U> {
     private static final long serialVersionUID = 5358379908010214089L;

File: src/main/java/com/linecorp/armeria/internal/DefaultAttributeMap.java
Patch:
@@ -152,6 +152,9 @@ public <T> boolean hasAttr(AttributeKey<T> key) {
         }
     }
 
+    /**
+     * Returns all {@link Attribute}s this map contains.
+     */
     public Iterator<Attribute<?>> attrs() {
         final AtomicReferenceArray<DefaultAttribute<?>> attributes = this.attributes;
         if (attributes == null) {

File: src/main/java/com/linecorp/armeria/internal/logging/DropwizardRequestMetrics.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  */
 
-package com.linecorp.armeria.common.logging;
+package com.linecorp.armeria.internal.logging;
 
 import java.util.concurrent.TimeUnit;
 

File: src/main/java/com/linecorp/armeria/server/PathMapped.java
Patch:
@@ -22,6 +22,8 @@
 
 /**
  * A value mapped by {@link PathMappings}.
+ *
+ * @param <T> the type of the mapped value
  */
 public final class PathMapped<T> {
 

File: src/main/java/com/linecorp/armeria/server/PathMappings.java
Patch:
@@ -31,6 +31,8 @@
 /**
  * Maps a request path to a value associated with a matching {@link PathMapping}. Useful when building a
  * service that delegates some or all of its requests to other services. e.g. {@link SimpleCompositeService}.
+ *
+ * @param <T> the type of the mapped value
  */
 public class PathMappings<T> implements Function<String, PathMapped<T>> {
 

File: src/main/java/com/linecorp/armeria/server/composition/AbstractCompositeServiceBuilder.java
Patch:
@@ -65,6 +65,8 @@
  * }</pre>
  *
  * @param <T> the self type
+ * @param <I> the {@link Request} type
+ * @param <O> the {@link Response} type
  *
  * @see CompositeServiceEntry
  */

File: src/main/java/com/linecorp/armeria/server/composition/CompositeServiceEntry.java
Patch:
@@ -27,6 +27,9 @@
 
 /**
  * A pair of a {@link PathMapping} and a {@link Service} bound to it.
+ *
+ * @param <I> the {@link Request} type
+ * @param <O> the {@link Response} type
  */
 public final class CompositeServiceEntry<I extends Request, O extends Response> {
 

File: src/main/java/com/linecorp/armeria/server/composition/SimpleCompositeServiceBuilder.java
Patch:
@@ -24,6 +24,9 @@
 /**
  * A general purpose {@link AbstractCompositeServiceBuilder} implementation. Useful when you do not want to
  * define a new dedicated {@link Service} builder type.
+ *
+ * @param <I> the {@link Request} type
+ * @param <O> the {@link Response} type
  */
 public final class SimpleCompositeServiceBuilder<I extends Request, O extends Response>
         extends AbstractCompositeServiceBuilder<SimpleCompositeServiceBuilder<I, O>, I, O> {

File: src/main/java/com/linecorp/armeria/server/http/file/HttpFileServiceBuilder.java
Patch:
@@ -99,6 +99,9 @@ public HttpFileServiceBuilder maxCacheEntrySizeBytes(int maxCacheEntrySizeBytes)
         return this;
     }
 
+    /**
+     * Creates a new {@link HttpFileService}.
+     */
     public HttpFileService build() {
         return new HttpFileService(new HttpFileServiceConfig(
                 vfs, clock, maxCacheEntries, maxCacheEntrySizeBytes));

File: src/main/java/com/linecorp/armeria/server/thrift/THttpService.java
Patch:
@@ -472,7 +472,7 @@ private void invoke(
                 return;
             }
 
-            if (func.isOneway()) {
+            if (func.isOneWay()) {
                 respond(serializationFormat, HttpData.EMPTY_DATA, res);
                 return;
             }

File: src/main/java/com/linecorp/armeria/server/thrift/ThriftCallService.java
Patch:
@@ -120,7 +120,7 @@ private void invokeAsynchronously(
         f.start(implementation, args, new AsyncMethodCallback<Object>() {
             @Override
             public void onComplete(Object response) {
-                if (func.isOneway()) {
+                if (func.isOneWay()) {
                     reply.complete(null);
                 } else {
                     reply.complete(response);
@@ -148,7 +148,7 @@ private void invokeSynchronously(
             try (PushHandle ignored = RequestContext.push(ctx)) {
                 @SuppressWarnings("unchecked")
                 TBase<TBase<?, ?>, TFieldIdEnum> result = f.getResult(implementation, args);
-                if (func.isOneway()) {
+                if (func.isOneWay()) {
                     reply.complete(null);
                 } else {
                     reply.complete(func.getResult(result));

File: src/main/java/com/linecorp/armeria/server/tracing/HttpTracingService.java
Patch:
@@ -35,7 +35,8 @@
 import com.linecorp.armeria.server.ServiceRequestContext;
 
 /**
- * A {@link Service} decorator that traces HTTP-based service invocations.
+ * Decorates a {@link Service} to trace inbound {@link HttpRequest}s using
+ * <a href="http://zipkin.io/">Zipkin</a>.
  * <p>
  * This decorator retrieves trace data from HTTP headers. The specifications of header names and its values
  * correspond to <a href="http://zipkin.io/">Zipkin</a>.

File: src/main/java/com/linecorp/armeria/server/tracing/package-info.java
Patch:
@@ -15,7 +15,7 @@
  */
 
 /**
- * Distributed tracing service decorators based on <a href="https://github.com/openzipkin/brave">Brave</a>,
+ * Distributed tracing services based on <a href="https://github.com/openzipkin/brave">Brave</a>,
  * a Java tracing library compatible with <a href="http://zipkin.io/">Zipkin</a>.
  */
 package com.linecorp.armeria.server.tracing;

File: src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTest.java
Patch:
@@ -240,13 +240,13 @@ public static void init() throws Exception {
                         ENABLE_LOGGING_DECORATORS ? KeyedChannelPoolLoggingHandler::new
                                                   : Function.identity());
 
-        clientFactoryWithUseHttp2Preface = new ThriftClientFactory(
+        clientFactoryWithUseHttp2Preface = new THttpClientFactory(
                 new HttpClientFactory(SessionOptions.of(
                         trustManagerFactoryOptVal,
                         poolHandlerDecoratorOptVal,
                         SessionOption.USE_HTTP2_PREFACE.newValue(true))));
 
-        clientFactoryWithoutUseHttp2Preface = new ThriftClientFactory(
+        clientFactoryWithoutUseHttp2Preface = new THttpClientFactory(
                 new HttpClientFactory(SessionOptions.of(
                         trustManagerFactoryOptVal,
                         poolHandlerDecoratorOptVal,

File: src/test/java/com/linecorp/armeria/client/tracing/TracingClientTest.java
Patch:
@@ -135,6 +135,6 @@ private static class TracingClientImpl extends AbstractTracingClient<ThriftCall,
         }
 
         @Override
-        protected void putTraceData(ClientRequestContext ctx, Request req, @Nullable SpanId spanId) {}
+        protected void putTraceData(ClientRequestContext ctx, ThriftCall req, @Nullable SpanId spanId) {}
     }
 }

File: src/test/java/com/linecorp/armeria/server/GracefulShutdownHandlerTest.java
Patch:
@@ -37,7 +37,7 @@
 import org.mockito.junit.MockitoJUnit;
 import org.mockito.junit.MockitoRule;
 
-import com.linecorp.armeria.common.util.Ticker;
+import com.google.common.base.Ticker;
 
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelPromise;

File: src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java
Patch:
@@ -21,7 +21,7 @@
 import java.time.Duration;
 import java.util.concurrent.CompletableFuture;
 
-import com.linecorp.armeria.common.AbstractRequestContext;
+import com.linecorp.armeria.common.NonWrappingRequestContext;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.http.DefaultHttpHeaders;
 import com.linecorp.armeria.common.http.HttpHeaders;
@@ -38,7 +38,8 @@
 /**
  * Default {@link ClientRequestContext} implementation.
  */
-public final class DefaultClientRequestContext extends AbstractRequestContext implements ClientRequestContext {
+public final class DefaultClientRequestContext extends NonWrappingRequestContext
+        implements ClientRequestContext {
 
     private final EventLoop eventLoop;
     private final ClientOptions options;

File: src/main/java/com/linecorp/armeria/client/UserClient.java
Patch:
@@ -20,6 +20,8 @@
 import java.util.function.Supplier;
 
 import com.linecorp.armeria.common.Request;
+import com.linecorp.armeria.common.RequestContext;
+import com.linecorp.armeria.common.RequestContext.PushHandle;
 import com.linecorp.armeria.common.Response;
 import com.linecorp.armeria.common.SessionProtocol;
 
@@ -74,7 +76,7 @@ protected final O execute(
 
         final ClientRequestContext ctx = new DefaultClientRequestContext(
                 eventLoop, sessionProtocol, endpoint, method, path, options, req);
-        try {
+        try (PushHandle ignored = RequestContext.push(ctx)) {
             return delegate().execute(ctx, req);
         } catch (Throwable cause) {
             ctx.responseLogBuilder().end(cause);

File: src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java
Patch:
@@ -26,7 +26,7 @@
 
 import org.slf4j.Logger;
 
-import com.linecorp.armeria.common.AbstractRequestContext;
+import com.linecorp.armeria.common.NonWrappingRequestContext;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.logging.DefaultRequestLog;
 import com.linecorp.armeria.common.logging.DefaultResponseLog;
@@ -41,7 +41,8 @@
 /**
  * Default {@link ServiceRequestContext} implementation.
  */
-public final class DefaultServiceRequestContext extends AbstractRequestContext implements ServiceRequestContext {
+public final class DefaultServiceRequestContext extends NonWrappingRequestContext
+        implements ServiceRequestContext {
 
     private final Channel ch;
     private final ServiceConfig cfg;

File: src/main/java/com/linecorp/armeria/server/thrift/THttpService.java
Patch:
@@ -46,6 +46,8 @@
 import com.google.common.collect.Sets;
 import com.google.common.net.MediaType;
 
+import com.linecorp.armeria.common.RequestContext;
+import com.linecorp.armeria.common.RequestContext.PushHandle;
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.http.AggregatedHttpMessage;
 import com.linecorp.armeria.common.http.HttpData;
@@ -456,7 +458,7 @@ private void invoke(
         final ThriftReply reply;
         ctx.requestLogBuilder().attr(RequestLog.RPC_REQUEST).set(call);
 
-        try {
+        try (PushHandle ignored = RequestContext.push(ctx)) {
             reply = delegate.serve(ctx, call);
             ctx.responseLogBuilder().attr(ResponseLog.RPC_RESPONSE).set(reply);
         } catch (Throwable cause) {

File: src/main/java/com/linecorp/armeria/server/tracing/AbstractTracingService.java
Patch:
@@ -74,7 +74,6 @@ public O serve(ServiceRequestContext ctx, I req) throws Exception {
         try {
             final O res = delegate().serve(ctx, req);
             if (sampled) {
-
                 ctx.requestLogFuture().thenAcceptBoth(
                         res.closeFuture(),
                         (log, unused) -> serverInterceptor.closeSpan(serverSpan, createResponseAdapter(ctx, log, res)))

File: src/test/java/com/linecorp/armeria/common/RequestContextTest.java
Patch:
@@ -78,7 +78,6 @@ public class RequestContextTest {
     private final AtomicBoolean entered = new AtomicBoolean();
 
     @Test
-    @Ignore("Ignore until https://github.com/netty/netty/issues/5507 is fixed.")
     public void contextAwareEventExecutor() throws Exception {
         EventLoop eventLoop = new DefaultEventLoop();
         when(channel.eventLoop()).thenReturn(eventLoop);
@@ -183,7 +182,7 @@ public void makeContextAwareChannelFutureListener() {
     @Test
     public void contextPropagationSameContextAlreadySet() {
         final RequestContext context = createContext();
-        try (PushHandle ignored = RequestContext.push(context)) {
+        try (PushHandle ignored = RequestContext.push(context, false)) {
             context.makeContextAware(() -> {
                 assertEquals(context, RequestContext.current());
                 // Context was already correct, so handlers were not run (in real code they would already be
@@ -247,7 +246,7 @@ private RequestContext createContext(boolean addContextAwareHandler) {
         return ctx;
     }
 
-    private class DummyRequestContext extends AbstractRequestContext {
+    private class DummyRequestContext extends NonWrappingRequestContext {
         DummyRequestContext() {
             super(SessionProtocol.HTTP, "GET", "/", new DefaultHttpRequest());
         }

File: src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java
Patch:
@@ -21,7 +21,7 @@
 import java.time.Duration;
 import java.util.concurrent.CompletableFuture;
 
-import com.linecorp.armeria.common.AbstractRequestContext;
+import com.linecorp.armeria.common.NonWrappingRequestContext;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.http.DefaultHttpHeaders;
 import com.linecorp.armeria.common.http.HttpHeaders;
@@ -38,7 +38,8 @@
 /**
  * Default {@link ClientRequestContext} implementation.
  */
-public final class DefaultClientRequestContext extends AbstractRequestContext implements ClientRequestContext {
+public final class DefaultClientRequestContext extends NonWrappingRequestContext
+        implements ClientRequestContext {
 
     private final EventLoop eventLoop;
     private final ClientOptions options;

File: src/main/java/com/linecorp/armeria/client/UserClient.java
Patch:
@@ -20,6 +20,8 @@
 import java.util.function.Supplier;
 
 import com.linecorp.armeria.common.Request;
+import com.linecorp.armeria.common.RequestContext;
+import com.linecorp.armeria.common.RequestContext.PushHandle;
 import com.linecorp.armeria.common.Response;
 import com.linecorp.armeria.common.SessionProtocol;
 
@@ -74,7 +76,7 @@ protected final O execute(
 
         final ClientRequestContext ctx = new DefaultClientRequestContext(
                 eventLoop, sessionProtocol, endpoint, method, path, options, req);
-        try {
+        try (PushHandle ignored = RequestContext.push(ctx)) {
             return delegate().execute(ctx, req);
         } catch (Throwable cause) {
             ctx.responseLogBuilder().end(cause);

File: src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java
Patch:
@@ -26,7 +26,7 @@
 
 import org.slf4j.Logger;
 
-import com.linecorp.armeria.common.AbstractRequestContext;
+import com.linecorp.armeria.common.NonWrappingRequestContext;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.common.logging.DefaultRequestLog;
 import com.linecorp.armeria.common.logging.DefaultResponseLog;
@@ -41,7 +41,8 @@
 /**
  * Default {@link ServiceRequestContext} implementation.
  */
-public final class DefaultServiceRequestContext extends AbstractRequestContext implements ServiceRequestContext {
+public final class DefaultServiceRequestContext extends NonWrappingRequestContext
+        implements ServiceRequestContext {
 
     private final Channel ch;
     private final ServiceConfig cfg;

File: src/main/java/com/linecorp/armeria/server/thrift/THttpService.java
Patch:
@@ -46,6 +46,8 @@
 import com.google.common.collect.Sets;
 import com.google.common.net.MediaType;
 
+import com.linecorp.armeria.common.RequestContext;
+import com.linecorp.armeria.common.RequestContext.PushHandle;
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.http.AggregatedHttpMessage;
 import com.linecorp.armeria.common.http.HttpData;
@@ -456,7 +458,7 @@ private void invoke(
         final ThriftReply reply;
         ctx.requestLogBuilder().attr(RequestLog.RPC_REQUEST).set(call);
 
-        try {
+        try (PushHandle ignored = RequestContext.push(ctx)) {
             reply = delegate.serve(ctx, call);
             ctx.responseLogBuilder().attr(ResponseLog.RPC_RESPONSE).set(reply);
         } catch (Throwable cause) {

File: src/main/java/com/linecorp/armeria/server/tracing/AbstractTracingService.java
Patch:
@@ -74,7 +74,6 @@ public O serve(ServiceRequestContext ctx, I req) throws Exception {
         try {
             final O res = delegate().serve(ctx, req);
             if (sampled) {
-
                 ctx.requestLogFuture().thenAcceptBoth(
                         res.closeFuture(),
                         (log, unused) -> serverInterceptor.closeSpan(serverSpan, createResponseAdapter(ctx, log, res)))

File: src/test/java/com/linecorp/armeria/common/RequestContextTest.java
Patch:
@@ -78,7 +78,6 @@ public class RequestContextTest {
     private final AtomicBoolean entered = new AtomicBoolean();
 
     @Test
-    @Ignore("Ignore until https://github.com/netty/netty/issues/5507 is fixed.")
     public void contextAwareEventExecutor() throws Exception {
         EventLoop eventLoop = new DefaultEventLoop();
         when(channel.eventLoop()).thenReturn(eventLoop);
@@ -183,7 +182,7 @@ public void makeContextAwareChannelFutureListener() {
     @Test
     public void contextPropagationSameContextAlreadySet() {
         final RequestContext context = createContext();
-        try (PushHandle ignored = RequestContext.push(context)) {
+        try (PushHandle ignored = RequestContext.push(context, false)) {
             context.makeContextAware(() -> {
                 assertEquals(context, RequestContext.current());
                 // Context was already correct, so handlers were not run (in real code they would already be
@@ -247,7 +246,7 @@ private RequestContext createContext(boolean addContextAwareHandler) {
         return ctx;
     }
 
-    private class DummyRequestContext extends AbstractRequestContext {
+    private class DummyRequestContext extends NonWrappingRequestContext {
         DummyRequestContext() {
             super(SessionProtocol.HTTP, "GET", "/", new DefaultHttpRequest());
         }

File: src/main/java/com/linecorp/armeria/server/http/tomcat/TomcatService.java
Patch:
@@ -41,6 +41,7 @@
 import org.apache.catalina.connector.Connector;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.util.ServerInfo;
+import org.apache.catalina.util.URLEncoder;
 import org.apache.coyote.Adapter;
 import org.apache.coyote.InputBuffer;
 import org.apache.coyote.OutputBuffer;
@@ -456,7 +457,8 @@ private Request convertRequest(ServiceRequestContext ctx, AggregatedHttpMessage
         coyoteReq.method().setString(method.name());
 
         // Set the request URI.
-        final byte[] uriBytes = mappedPath.getBytes(StandardCharsets.US_ASCII);
+        final byte[] uriBytes = URLEncoder.DEFAULT.encode(mappedPath)
+                                                  .getBytes(StandardCharsets.US_ASCII);
         coyoteReq.requestURI().setBytes(uriBytes, 0, uriBytes.length);
 
         // Set the query string if any.

File: src/main/java/com/linecorp/armeria/server/http/tomcat/TomcatService.java
Patch:
@@ -39,6 +39,7 @@
 import org.apache.catalina.connector.Connector;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.util.ServerInfo;
+import org.apache.catalina.util.URLEncoder;
 import org.apache.coyote.Adapter;
 import org.apache.coyote.InputBuffer;
 import org.apache.coyote.OutputBuffer;
@@ -437,7 +438,8 @@ private Request convertRequest(ServiceRequestContext ctx, AggregatedHttpMessage
         coyoteReq.method().setString(method.name());
 
         // Set the request URI.
-        final byte[] uriBytes = mappedPath.getBytes(StandardCharsets.US_ASCII);
+        final byte[] uriBytes = URLEncoder.DEFAULT.encode(mappedPath)
+                                                  .getBytes(StandardCharsets.US_ASCII);
         coyoteReq.requestURI().setBytes(uriBytes, 0, uriBytes.length);
 
         // Set the query string if any.

File: src/main/java/com/linecorp/armeria/common/http/HttpHeaders.java
Patch:
@@ -81,7 +81,7 @@ static HttpHeaders of(AsciiString name1, String value1, AsciiString name2, Strin
     HttpHeaders scheme(String scheme);
 
     /**
-     * Sets the {@link HttpHeaderNames##AUTHORITY} header.
+     * Sets the {@link HttpHeaderNames#AUTHORITY} header.
      */
     HttpHeaders authority(String authority);
 

File: src/main/java/com/linecorp/armeria/common/http/HttpHeaders.java
Patch:
@@ -81,7 +81,7 @@ static HttpHeaders of(AsciiString name1, String value1, AsciiString name2, Strin
     HttpHeaders scheme(String scheme);
 
     /**
-     * Sets the {@link HttpHeaderNames##AUTHORITY} header.
+     * Sets the {@link HttpHeaderNames#AUTHORITY} header.
      */
     HttpHeaders authority(String authority);
 

File: src/main/java/com/linecorp/armeria/client/SessionOptionValue.java
Patch:
@@ -18,11 +18,11 @@
 import com.linecorp.armeria.common.util.AbstractOptionValue;
 
 /**
- * A value of a {@link RemoteInvokerOption}.
+ * A value of a {@link SessionOption}.
  */
-public class RemoteInvokerOptionValue<T> extends AbstractOptionValue<RemoteInvokerOption<T>, T> {
+public class SessionOptionValue<T> extends AbstractOptionValue<SessionOption<T>, T> {
 
-    RemoteInvokerOptionValue(RemoteInvokerOption<T> constant, T value) {
+    SessionOptionValue(SessionOption<T> constant, T value) {
         super(constant, value);
     }
 }

File: src/main/java/com/linecorp/armeria/client/circuitbreaker/FailFastException.java
Patch:
@@ -5,7 +5,7 @@
  * version 2.0 (the "License"); you may not use this file except in compliance
  * with the License. You may obtain a copy of the License at:
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT

File: src/main/java/com/linecorp/armeria/client/logging/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * Logging decorators.
+ * Logging and metric-collecting decorator clients.
  */
 package com.linecorp.armeria.client.logging;

File: src/main/java/com/linecorp/armeria/client/pool/DefaultKeyedChannelPool.java
Patch:
@@ -282,7 +282,7 @@ protected boolean offerChannel(K key, Channel channel) {
     @Override
     public void close() {
         pool.forEach((k, v) -> {
-            for (; ; ) {
+            for (;;) {
                 Channel channel = pollChannel(k);
                 if (channel == null) {
                     break;

File: src/main/java/com/linecorp/armeria/client/routing/EndpointGroupRegistry.java
Patch:
@@ -20,6 +20,8 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
+import com.linecorp.armeria.client.Endpoint;
+
 /**
  * An in-memory registry of server groups.
  */
@@ -84,7 +86,7 @@ public static EndpointGroup get(String groupName) {
      * Select a endpoint from the target endpoint group.
      */
     public static Endpoint selectNode(String groupName) {
-        EndpointSelector endpointSelector = EndpointGroupRegistry.getNodeSelector(groupName);
+        EndpointSelector endpointSelector = getNodeSelector(groupName);
         if (endpointSelector == null) {
             throw new EndpointGroupException("non-existent EndpointGroup: " + groupName);
         }

File: src/main/java/com/linecorp/armeria/client/thrift/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * Thrift {@link com.linecorp.armeria.client.ClientCodec}.
+ * Thrift client.
  */
 package com.linecorp.armeria.client.thrift;

File: src/main/java/com/linecorp/armeria/common/Scheme.java
Patch:
@@ -153,6 +153,6 @@ public int compareTo(Scheme o) {
 
     @Override
     public String toString() {
-        return "Scheme(" + uriText() + ')';
+        return uriText();
     }
 }

File: src/main/java/com/linecorp/armeria/common/http/package-info.java
Patch:
@@ -15,6 +15,6 @@
  */
 
 /**
- * HTTP1/2-related classes used internally.
+ * HTTP-related classes.
  */
 package com.linecorp.armeria.common.http;

File: src/main/java/com/linecorp/armeria/common/package-info.java
Patch:
@@ -19,8 +19,7 @@
  *
  * <h2>Starting points</h2>
  * <ul>
- *   <li>{@link com.linecorp.armeria.common.ServiceInvocationContext}</li>
- *   <li>{@link com.linecorp.armeria.common.TimeoutPolicy}</li>
+ *   <li>{@link com.linecorp.armeria.common.RequestContext}</li>
  * </ul>
  */
 package com.linecorp.armeria.common;

File: src/main/java/com/linecorp/armeria/common/util/LruMap.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015 LINE Corporation
+ * Copyright 2016 LINE Corporation
  *
  * LINE Corporation licenses this file to you under the Apache License,
  * version 2.0 (the "License"); you may not use this file except in compliance

File: src/main/java/com/linecorp/armeria/internal/http/Http1ClientCodec.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.linecorp.armeria.common.http;
+package com.linecorp.armeria.internal.http;
 
 import java.util.ArrayDeque;
 import java.util.List;
@@ -191,8 +191,8 @@ private void decrement(Object msg) {
         @Override
         protected boolean isContentAlwaysEmpty(HttpMessage msg) {
             final int statusCode = ((HttpResponse) msg).status().code();
-            if (statusCode == 100) {
-                // 100-continue response should be excluded from paired comparison.
+            if (statusCode >= 100 && statusCode < 200) {
+                // An informational response should be excluded from paired comparison.
                 return true;
             }
 

File: src/main/java/com/linecorp/armeria/server/http/tomcat/ArmeriaWebResourceRoot.java
Patch:
@@ -41,10 +41,10 @@ final class ArmeriaWebResourceRoot extends StandardRoot {
     @Override
     protected WebResourceSet createMainResourceSet() {
         final Path docBase = config.docBase();
-        final String docBaseStr = docBase.toString();
-
         assert docBase.isAbsolute();
-        assert docBaseStr.equals(getContext().getDocBase());
+
+        final String docBaseStr = docBase.toString();
+        getContext().setDocBase(docBaseStr);
 
         if (Files.isDirectory(docBase)) {
             return new DirResourceSet(this, "/", docBaseStr, "/");

File: src/main/java/com/linecorp/armeria/server/docs/FieldInfo.java
Patch:
@@ -40,7 +40,7 @@ static FieldInfo of(FieldMetaData fieldMetaData, @Nullable String namespace,
         final String docStringKey = ThriftDocString.key(namespace, fieldMetaData.fieldName);
         return new FieldInfo(fieldMetaData.fieldName,
                              RequirementType.of(fieldMetaData.requirementType),
-                             TypeInfo.of(fieldMetaData.valueMetaData, namespace, docStrings),
+                             TypeInfo.of(fieldMetaData.valueMetaData, docStrings),
                              docStrings.get(docStringKey));
     }
 

File: src/main/java/com/linecorp/armeria/server/docs/ListInfo.java
Patch:
@@ -30,16 +30,16 @@
 class ListInfo extends TypeInfo implements CollectionInfo {
 
     static ListInfo of(ListMetaData listMetaData) {
-        return of(listMetaData, null, Collections.emptyMap());
+        return of(listMetaData, Collections.emptyMap());
     }
 
-    static ListInfo of(ListMetaData listMetaData, @Nullable String namespace, Map<String, String> docStrings) {
+    static ListInfo of(ListMetaData listMetaData, Map<String, String> docStrings) {
         requireNonNull(listMetaData, "listMetaData");
 
         assert listMetaData.type == TType.LIST;
         assert !listMetaData.isBinary();
 
-        return new ListInfo(of(listMetaData.elemMetaData, namespace, docStrings));
+        return new ListInfo(of(listMetaData.elemMetaData, docStrings));
     }
 
     static ListInfo of(TypeInfo elementType) {

File: src/main/java/com/linecorp/armeria/server/docs/SetInfo.java
Patch:
@@ -30,16 +30,16 @@
 class SetInfo extends TypeInfo implements CollectionInfo {
 
     static SetInfo of(SetMetaData setMetaData) {
-        return of(setMetaData, null, Collections.emptyMap());
+        return of(setMetaData, Collections.emptyMap());
     }
 
-    static SetInfo of(SetMetaData setMetaData, @Nullable String namespace, Map<String, String> docStrings) {
+    static SetInfo of(SetMetaData setMetaData, Map<String, String> docStrings) {
         requireNonNull(setMetaData, "setMetaData");
 
         assert setMetaData.type == TType.SET;
         assert !setMetaData.isBinary();
 
-        return new SetInfo(of(setMetaData.elemMetaData, namespace, docStrings));
+        return new SetInfo(of(setMetaData.elemMetaData, docStrings));
     }
 
     static SetInfo of(TypeInfo elementType) {

File: src/main/java/com/linecorp/armeria/server/docs/ThriftDocString.java
Patch:
@@ -158,7 +158,7 @@ private static void traverseChildren(ImmutableMap.Builder<String, String> docStr
             if (name != null) {
                 childPrefix = (prefix != null ? prefix : "") + delimiter + name;
                 if (doc != null) {
-                    docStrings.put(childPrefix, doc);
+                    docStrings.put(childPrefix, doc.trim());
                 }
             } else {
                 childPrefix = prefix;

File: src/test/java/com/linecorp/armeria/server/docs/ThriftDocStringTest.java
Patch:
@@ -34,9 +34,9 @@ public void testThriftTestJson() {
         Map<String, String> docStrings = ThriftDocString.getDocStringsFromJsonResource(
                 getClass().getClassLoader(),
                 "META-INF/armeria/thrift/ThriftTest.json");
-        assertThat(docStrings.get("thrift.test.Numberz"), is("Docstring!\n"));
+        assertThat(docStrings.get("thrift.test.Numberz"), is("Docstring!"));
         assertThat(docStrings.get("thrift.test.ThriftTest#testVoid"),
-                   is("Prints \"testVoid()\" and returns nothing.\n"));
+                   is("Prints \"testVoid()\" and returns nothing."));
     }
 
     @Test
@@ -45,7 +45,7 @@ public void testCassandraJson() {
                 getClass().getClassLoader(),
                 "META-INF/armeria/thrift/cassandra.json");
         assertThat(docStrings.get("com.linecorp.armeria.service.test.thrift.cassandra.Compression"),
-                   is("CQL query compression\n"));
+                   is("CQL query compression"));
         assertThat(docStrings.get("com.linecorp.armeria.service.test.thrift.cassandra.CqlResultType"),
                    is(nullValue()));
     }

File: src/main/java/com/linecorp/armeria/server/docs/FieldInfo.java
Patch:
@@ -40,7 +40,7 @@ static FieldInfo of(FieldMetaData fieldMetaData, @Nullable String namespace,
         final String docStringKey = ThriftDocString.key(namespace, fieldMetaData.fieldName);
         return new FieldInfo(fieldMetaData.fieldName,
                              RequirementType.of(fieldMetaData.requirementType),
-                             TypeInfo.of(fieldMetaData.valueMetaData, namespace, docStrings),
+                             TypeInfo.of(fieldMetaData.valueMetaData, docStrings),
                              docStrings.get(docStringKey));
     }
 

File: src/main/java/com/linecorp/armeria/server/docs/ListInfo.java
Patch:
@@ -30,16 +30,16 @@
 class ListInfo extends TypeInfo implements CollectionInfo {
 
     static ListInfo of(ListMetaData listMetaData) {
-        return of(listMetaData, null, Collections.emptyMap());
+        return of(listMetaData, Collections.emptyMap());
     }
 
-    static ListInfo of(ListMetaData listMetaData, @Nullable String namespace, Map<String, String> docStrings) {
+    static ListInfo of(ListMetaData listMetaData, Map<String, String> docStrings) {
         requireNonNull(listMetaData, "listMetaData");
 
         assert listMetaData.type == TType.LIST;
         assert !listMetaData.isBinary();
 
-        return new ListInfo(of(listMetaData.elemMetaData, namespace, docStrings));
+        return new ListInfo(of(listMetaData.elemMetaData, docStrings));
     }
 
     static ListInfo of(TypeInfo elementType) {

File: src/main/java/com/linecorp/armeria/server/docs/SetInfo.java
Patch:
@@ -30,16 +30,16 @@
 class SetInfo extends TypeInfo implements CollectionInfo {
 
     static SetInfo of(SetMetaData setMetaData) {
-        return of(setMetaData, null, Collections.emptyMap());
+        return of(setMetaData, Collections.emptyMap());
     }
 
-    static SetInfo of(SetMetaData setMetaData, @Nullable String namespace, Map<String, String> docStrings) {
+    static SetInfo of(SetMetaData setMetaData, Map<String, String> docStrings) {
         requireNonNull(setMetaData, "setMetaData");
 
         assert setMetaData.type == TType.SET;
         assert !setMetaData.isBinary();
 
-        return new SetInfo(of(setMetaData.elemMetaData, namespace, docStrings));
+        return new SetInfo(of(setMetaData.elemMetaData, docStrings));
     }
 
     static SetInfo of(TypeInfo elementType) {

File: src/main/java/com/linecorp/armeria/server/docs/ThriftDocString.java
Patch:
@@ -158,7 +158,7 @@ private static void traverseChildren(ImmutableMap.Builder<String, String> docStr
             if (name != null) {
                 childPrefix = (prefix != null ? prefix : "") + delimiter + name;
                 if (doc != null) {
-                    docStrings.put(childPrefix, doc);
+                    docStrings.put(childPrefix, doc.trim());
                 }
             } else {
                 childPrefix = prefix;

File: src/test/java/com/linecorp/armeria/server/docs/ThriftDocStringTest.java
Patch:
@@ -34,9 +34,9 @@ public void testThriftTestJson() {
         Map<String, String> docStrings = ThriftDocString.getDocStringsFromJsonResource(
                 getClass().getClassLoader(),
                 "META-INF/armeria/thrift/ThriftTest.json");
-        assertThat(docStrings.get("thrift.test.Numberz"), is("Docstring!\n"));
+        assertThat(docStrings.get("thrift.test.Numberz"), is("Docstring!"));
         assertThat(docStrings.get("thrift.test.ThriftTest#testVoid"),
-                   is("Prints \"testVoid()\" and returns nothing.\n"));
+                   is("Prints \"testVoid()\" and returns nothing."));
     }
 
     @Test
@@ -45,7 +45,7 @@ public void testCassandraJson() {
                 getClass().getClassLoader(),
                 "META-INF/armeria/thrift/cassandra.json");
         assertThat(docStrings.get("com.linecorp.armeria.service.test.thrift.cassandra.Compression"),
-                   is("CQL query compression\n"));
+                   is("CQL query compression"));
         assertThat(docStrings.get("com.linecorp.armeria.service.test.thrift.cassandra.CqlResultType"),
                    is(nullValue()));
     }

File: src/main/java/com/linecorp/armeria/common/thrift/text/StructContext.java
Patch:
@@ -199,7 +199,7 @@ private Map<String, TField> computeFieldNameMap(Class<?> clazz) {
                     elementMetaData = metaData.valueMetaData;
                 }
 
-                if (TType.ENUM == elementMetaData.type) {
+                if (elementMetaData instanceof EnumMetaData) {
                     classMap.put(fieldName, ((EnumMetaData) elementMetaData).enumClass);
                 } else if (elementMetaData instanceof StructMetaData) {
                     classMap.put(fieldName, ((StructMetaData) elementMetaData).structClass);

File: src/main/java/com/linecorp/armeria/common/thrift/text/TTextProtocol.java
Patch:
@@ -92,6 +92,7 @@
  * TODO(Alex Roetter): Also add a new TEXT_PROTOCOL field to ThriftCodec
  * <p>
  * TODO: Support map enum keys specified as strings.
+ * TODO: Support string values for enums that have been typedef'd.
  */
 public class TTextProtocol extends TProtocol {
 

File: src/test/java/com/linecorp/armeria/common/thrift/text/TTextProtocolTest.java
Patch:
@@ -145,6 +145,7 @@ private TTextProtocolTestMsg testMsg() {
                 .setV(Letter.BETA)
                 .setW(TestUnion.f2(4))
                 .setX(ImmutableList.of(TestUnion.f2(5), TestUnion.f1(base64Encoder.decode("SGVsbG8gV29ybGQ="))))
+                .setY(Letter.ALPHA)
                 ;
 
     }

File: src/main/java/com/linecorp/armeria/common/thrift/text/StructContext.java
Patch:
@@ -199,7 +199,7 @@ private Map<String, TField> computeFieldNameMap(Class<?> clazz) {
                     elementMetaData = metaData.valueMetaData;
                 }
 
-                if (TType.ENUM == elementMetaData.type) {
+                if (elementMetaData instanceof EnumMetaData) {
                     classMap.put(fieldName, ((EnumMetaData) elementMetaData).enumClass);
                 } else if (elementMetaData instanceof StructMetaData) {
                     classMap.put(fieldName, ((StructMetaData) elementMetaData).structClass);

File: src/main/java/com/linecorp/armeria/common/thrift/text/TTextProtocol.java
Patch:
@@ -92,6 +92,7 @@
  * TODO(Alex Roetter): Also add a new TEXT_PROTOCOL field to ThriftCodec
  * <p>
  * TODO: Support map enum keys specified as strings.
+ * TODO: Support string values for enums that have been typedef'd.
  */
 public class TTextProtocol extends TProtocol {
 

File: src/test/java/com/linecorp/armeria/common/thrift/text/TTextProtocolTest.java
Patch:
@@ -145,6 +145,7 @@ private TTextProtocolTestMsg testMsg() {
                 .setV(Letter.BETA)
                 .setW(TestUnion.f2(4))
                 .setX(ImmutableList.of(TestUnion.f2(5), TestUnion.f1(base64Encoder.decode("SGVsbG8gV29ybGQ="))))
+                .setY(Letter.ALPHA)
                 ;
 
     }

File: src/main/java/com/linecorp/armeria/server/http/tomcat/TomcatServiceConfig.java
Patch:
@@ -126,7 +126,7 @@ static String toString(Object holder, String serviceName, String engineName,
                "(serviceName: " + serviceName +
                ", engineName: " + engineName +
                ", baseDir: " + baseDir +
-               ", realm: " + realm.getClass().getSimpleName() +
+               ", realm: " + (realm != null ? realm.getClass().getSimpleName() : "null") +
                ", hostname: " + hostname +
                ", docBase: " + docBase +
                (jarRoot != null ? ", jarRoot: " + jarRoot : "") +

File: src/main/java/com/linecorp/armeria/server/http/tomcat/TomcatServiceConfig.java
Patch:
@@ -126,7 +126,7 @@ static String toString(Object holder, String serviceName, String engineName,
                "(serviceName: " + serviceName +
                ", engineName: " + engineName +
                ", baseDir: " + baseDir +
-               ", realm: " + realm.getClass().getSimpleName() +
+               ", realm: " + (realm != null ? realm.getClass().getSimpleName() : "null") +
                ", hostname: " + hostname +
                ", docBase: " + docBase +
                (jarRoot != null ? ", jarRoot: " + jarRoot : "") +

File: src/test/java/com/linecorp/armeria/server/http/WebAppContainerTest.java
Patch:
@@ -121,7 +121,7 @@ public void testAddressesAndPorts() throws Exception {
                         "<p>RemoteHost: 127\\.0\\.0\\.1</p>" +
                         "<p>RemotePort: [1-9][0-9]+</p>" +
                         "<p>LocalAddr: (?!null)[^<]+</p>" +
-                        "<p>LocalName: localhost</p>" +
+                        "<p>LocalName: " + server().defaultHostname() + "</p>" +
                         "<p>LocalPort: " + server().activePort().get().localAddress().getPort() + "</p>" +
                         "</body></html>"));
             }

File: src/test/java/com/linecorp/armeria/server/http/jetty/UnmanagedJettyServiceTest.java
Patch:
@@ -36,14 +36,14 @@ protected void configureServer(ServerBuilder sb) throws Exception {
         jetty = new Server(0);
         jetty.setHandler(JettyServiceTest.newWebAppContext());
         jetty.start();
-
         sb.serviceUnder(
                 "/jsp/",
-                JettyService.forServer("localhost", jetty).decorate(LoggingService::new));
+                JettyService.forServer(jetty).decorate(LoggingService::new));
     }
 
     @AfterClass
     public static void stopJetty() throws Exception {
         jetty.stop();
+        jetty.destroy();
     }
 }

File: src/test/java/com/linecorp/armeria/server/http/WebAppContainerTest.java
Patch:
@@ -121,7 +121,7 @@ public void testAddressesAndPorts() throws Exception {
                         "<p>RemoteHost: 127\\.0\\.0\\.1</p>" +
                         "<p>RemotePort: [1-9][0-9]+</p>" +
                         "<p>LocalAddr: (?!null)[^<]+</p>" +
-                        "<p>LocalName: localhost</p>" +
+                        "<p>LocalName: " + server().defaultHostname() + "</p>" +
                         "<p>LocalPort: " + server().activePort().get().localAddress().getPort() + "</p>" +
                         "</body></html>"));
             }

File: src/test/java/com/linecorp/armeria/server/http/jetty/UnmanagedJettyServiceTest.java
Patch:
@@ -36,14 +36,14 @@ protected void configureServer(ServerBuilder sb) throws Exception {
         jetty = new Server(0);
         jetty.setHandler(JettyServiceTest.newWebAppContext());
         jetty.start();
-
         sb.serviceUnder(
                 "/jsp/",
-                JettyService.forServer("localhost", jetty).decorate(LoggingService::new));
+                JettyService.forServer(jetty).decorate(LoggingService::new));
     }
 
     @AfterClass
     public static void stopJetty() throws Exception {
         jetty.stop();
+        jetty.destroy();
     }
 }

File: src/main/java/com/linecorp/armeria/client/RemoteInvokerOptions.java
Patch:
@@ -56,7 +56,7 @@ public class RemoteInvokerOptions extends AbstractOptions {
     private static final int DEFAULT_MAX_FRAME_LENGTH = 10 * 1024 * 1024; // 10 MB
     private static final Integer DEFAULT_MAX_CONCURRENCY = Integer.MAX_VALUE;
     private static final Boolean DEFAULT_USE_HTTP2_PREFACE =
-            !"false".equals(System.getProperty("com.linecorp.armeria.defaultUseHttp2Preface", "true"));
+            "true".equals(System.getProperty("com.linecorp.armeria.defaultUseHttp2Preface", "false"));
 
     static {
         logger.info("defaultUseHttp2Preface: {}", DEFAULT_USE_HTTP2_PREFACE);

File: src/main/java/com/linecorp/armeria/client/RemoteInvokerOptions.java
Patch:
@@ -56,7 +56,7 @@ public class RemoteInvokerOptions extends AbstractOptions {
     private static final int DEFAULT_MAX_FRAME_LENGTH = 10 * 1024 * 1024; // 10 MB
     private static final Integer DEFAULT_MAX_CONCURRENCY = Integer.MAX_VALUE;
     private static final Boolean DEFAULT_USE_HTTP2_PREFACE =
-            !"false".equals(System.getProperty("com.linecorp.armeria.defaultUseHttp2Preface", "true"));
+            "true".equals(System.getProperty("com.linecorp.armeria.defaultUseHttp2Preface", "false"));
 
     static {
         logger.info("defaultUseHttp2Preface: {}", DEFAULT_USE_HTTP2_PREFACE);

File: src/main/java/com/linecorp/armeria/server/Server.java
Patch:
@@ -47,7 +47,6 @@
 import io.netty.channel.epoll.EpollServerSocketChannel;
 import io.netty.channel.nio.NioEventLoopGroup;
 import io.netty.channel.socket.nio.NioServerSocketChannel;
-import io.netty.handler.ssl.OpenSsl;
 import io.netty.handler.ssl.SslContext;
 import io.netty.util.DomainMappingBuilder;
 import io.netty.util.DomainNameMapping;

File: src/main/java/com/linecorp/armeria/common/http/Http2GoAwayListener.java
Patch:
@@ -70,7 +70,7 @@ ch, sentOrReceived, lastStreamId, errorStr(errorCode),
                             ByteBufUtil.hexDump(debugData));
             }
         } else {
-            if (logger.isInfoEnabled()) {
+            if (logger.isDebugEnabled()) {
                 logger.debug("{} {} a GOAWAY frame: lastStreamId={}, errorCode=NO_ERROR",
                              ch, sentOrReceived, lastStreamId);
             }

File: src/main/java/com/linecorp/armeria/common/http/Http2GoAwayListener.java
Patch:
@@ -70,7 +70,7 @@ ch, sentOrReceived, lastStreamId, errorStr(errorCode),
                             ByteBufUtil.hexDump(debugData));
             }
         } else {
-            if (logger.isInfoEnabled()) {
+            if (logger.isDebugEnabled()) {
                 logger.debug("{} {} a GOAWAY frame: lastStreamId={}, errorCode=NO_ERROR",
                              ch, sentOrReceived, lastStreamId);
             }

File: src/main/java/com/linecorp/armeria/server/ServiceConfig.java
Patch:
@@ -115,6 +115,9 @@ private static String convertPathToLoggerName(Optional<String> servicePathOpt) {
                         buf.append(ch);
                     } else {
                         buf.append('_');
+                        if (Character.isJavaIdentifierPart(ch)) {
+                            buf.append(ch);
+                        }
                     }
                 } else {
                     if (Character.isJavaIdentifierPart(ch)) {

File: src/main/java/com/linecorp/armeria/client/HttpClientIdleTimeoutHandler.java
Patch:
@@ -74,6 +74,7 @@ protected void channelIdle(ChannelHandlerContext ctx, IdleStateEvent evt) throws
         if (pendingResCount == 0 && evt.isFirst()) {
             logger.debug("{} Closing due to idleness", ctx.channel());
             ctx.close();
+            return;
         }
 
         ctx.fireUserEventTriggered(evt);

File: src/main/java/com/linecorp/armeria/server/HttpServerIdleTimeoutHandler.java
Patch:
@@ -80,6 +80,7 @@ protected void channelIdle(ChannelHandlerContext ctx, IdleStateEvent evt) throws
         if (pendingResCount == 0 && evt.isFirst()) {
             logger.debug("{} Closing due to idleness", ctx.channel());
             ctx.close();
+            return;
         }
 
         ctx.fireUserEventTriggered(evt);

File: src/main/java/com/linecorp/armeria/client/HttpClientIdleTimeoutHandler.java
Patch:
@@ -74,6 +74,7 @@ protected void channelIdle(ChannelHandlerContext ctx, IdleStateEvent evt) throws
         if (pendingResCount == 0 && evt.isFirst()) {
             logger.debug("{} Closing due to idleness", ctx.channel());
             ctx.close();
+            return;
         }
 
         ctx.fireUserEventTriggered(evt);

File: src/main/java/com/linecorp/armeria/server/HttpServerIdleTimeoutHandler.java
Patch:
@@ -80,6 +80,7 @@ protected void channelIdle(ChannelHandlerContext ctx, IdleStateEvent evt) throws
         if (pendingResCount == 0 && evt.isFirst()) {
             logger.debug("{} Closing due to idleness", ctx.channel());
             ctx.close();
+            return;
         }
 
         ctx.fireUserEventTriggered(evt);

File: src/test/java/com/linecorp/armeria/client/tracing/TracingRemoteInvokerTest.java
Patch:
@@ -66,10 +66,10 @@ public void shouldSubmitSpanWhenSampled() throws Exception {
 
         // check span name
         Span span = spanCollector.spans.get(0);
-        assertThat(span.name, is(TEST_SPAN));
+        assertThat(span.getName(), is(TEST_SPAN));
 
         // check # of annotations
-        List<Annotation> annotations = span.annotations;
+        List<Annotation> annotations = span.getAnnotations();
         assertThat(annotations, hasSize(2));
 
         // check annotation values
@@ -78,7 +78,7 @@ public void shouldSubmitSpanWhenSampled() throws Exception {
 
         // check service name
         List<String> serviceNames = annotations.stream()
-                                               .map(anno -> anno.getHost().getService_name())
+                                               .map(anno -> anno.host.service_name)
                                                .collect(Collectors.toList());
         assertThat(serviceNames, is(contains(TEST_SERVICE, TEST_SERVICE)));
     }

File: src/main/java/com/linecorp/armeria/common/ServiceInvocationContextAwareFuture.java
Patch:
@@ -54,7 +54,8 @@ public Future<T> removeListener(
     }
 
     @Override
-    public Future<T> removeListeners(
+    @SafeVarargs
+    public final Future<T> removeListeners(
             GenericFutureListener<? extends Future<? super T>>... listeners) {
         return delegate.removeListeners(listeners);
     }

File: src/main/java/com/linecorp/armeria/client/HttpConfigurator.java
Patch:
@@ -465,7 +465,7 @@ private static Http1ClientCodec newHttp1Codec() {
         return new Http1ClientCodec() {
             @Override
             public void close(ChannelHandlerContext ctx, ChannelPromise promise) throws Exception {
-                HttpSessionHandler.deactivate(ctx.channel());
+                HttpSessionHandler.get(ctx.channel()).deactivate();
                 super.close(ctx, promise);
             }
         };
@@ -480,7 +480,7 @@ private static final class HttpToHttp2ClientConnectionHandler extends AbstractHt
 
         @Override
         protected void onCloseRequest(ChannelHandlerContext ctx) throws Exception {
-            HttpSessionHandler.deactivate(ctx.channel());
+            HttpSessionHandler.get(ctx.channel()).deactivate();
         }
     }
 

File: src/main/java/com/linecorp/armeria/client/HttpSessionChannelFactory.java
Patch:
@@ -48,7 +48,7 @@ class HttpSessionChannelFactory implements Function<PoolKey, Future<Channel>> {
     static final Object RETRY_WITH_H1C = new Object();
 
     static final ChannelHealthChecker HEALTH_CHECKER =
-            ch -> ch.eventLoop().newSucceededFuture(HttpSessionHandler.isActive(ch));
+            ch -> ch.eventLoop().newSucceededFuture(HttpSessionHandler.get(ch).isActive());
 
     private final Bootstrap baseBootstrap;
     private final EventLoop eventLoop;
@@ -137,7 +137,7 @@ public void run() {
     private void watchSessionActive0(final Channel ch, Promise<Channel> sessionPromise) {
         assert ch.eventLoop().inEventLoop();
 
-        if (HttpSessionHandler.isActive(ch)) {
+        if (HttpSessionHandler.get(ch).isActive()) {
             sessionPromise.setSuccess(ch);
             return;
         }

File: src/main/java/com/linecorp/armeria/client/RemoteInvokerOptions.java
Patch:
@@ -44,7 +44,7 @@ public class RemoteInvokerOptions extends AbstractOptions {
 
     private static final Duration DEFAULT_CONNECTION_TIMEOUT = Duration.ofMillis(3200);
     private static final Duration DEFAULT_IDLE_TIMEOUT = Duration.ofSeconds(10);
-    private static final int DEFAULT_MAX_FRAME_LENGTH = 10485760; //10 MB
+    private static final int DEFAULT_MAX_FRAME_LENGTH = 10 * 1024 * 1024; // 10 MB
     private static final Integer DEFAULT_MAX_CONCURRENCY = Integer.MAX_VALUE;
 
     private static final RemoteInvokerOptionValue<?>[] DEFAULT_OPTION_VALUES = {

File: src/main/java/com/linecorp/armeria/server/ServerBuilder.java
Patch:
@@ -65,7 +65,7 @@ public final class ServerBuilder {
     private static final TimeoutPolicy DEFAULT_REQUEST_TIMEOUT_POLICY =
             TimeoutPolicy.ofFixed(Duration.ofSeconds(10));
     private static final long DEFAULT_IDLE_TIMEOUT_MILLIS = Duration.ofSeconds(10).toMillis();
-    private static final int DEFAULT_MAX_FRAME_LENGTH = 1048576;
+    private static final int DEFAULT_MAX_FRAME_LENGTH = 10 * 1024 * 1024; // 10 MB
     // Defaults to no graceful shutdown.
     private static final Duration DEFAULT_GRACEFUL_SHUTDOWN_QUIET_PERIOD = Duration.ZERO;
     private static final Duration DEFAULT_GRACEFUL_SHUTDOWN_TIMEOUT = Duration.ZERO;

File: src/main/java/com/linecorp/armeria/client/RemoteInvokerOptions.java
Patch:
@@ -44,7 +44,7 @@ public class RemoteInvokerOptions extends AbstractOptions {
 
     private static final Duration DEFAULT_CONNECTION_TIMEOUT = Duration.ofMillis(3200);
     private static final Duration DEFAULT_IDLE_TIMEOUT = Duration.ofSeconds(10);
-    private static final int DEFAULT_MAX_FRAME_LENGTH = 10485760; //10 MB
+    private static final int DEFAULT_MAX_FRAME_LENGTH = 10 * 1024 * 1024; // 10 MB
     private static final Integer DEFAULT_MAX_CONCURRENCY = Integer.MAX_VALUE;
 
     private static final RemoteInvokerOptionValue<?>[] DEFAULT_OPTION_VALUES = {

File: src/main/java/com/linecorp/armeria/server/ServerBuilder.java
Patch:
@@ -65,7 +65,7 @@ public final class ServerBuilder {
     private static final TimeoutPolicy DEFAULT_REQUEST_TIMEOUT_POLICY =
             TimeoutPolicy.ofFixed(Duration.ofSeconds(10));
     private static final long DEFAULT_IDLE_TIMEOUT_MILLIS = Duration.ofSeconds(10).toMillis();
-    private static final int DEFAULT_MAX_FRAME_LENGTH = 1048576;
+    private static final int DEFAULT_MAX_FRAME_LENGTH = 10 * 1024 * 1024; // 10 MB
     // Defaults to no graceful shutdown.
     private static final Duration DEFAULT_GRACEFUL_SHUTDOWN_QUIET_PERIOD = Duration.ZERO;
     private static final Duration DEFAULT_GRACEFUL_SHUTDOWN_TIMEOUT = Duration.ZERO;

File: src/main/java/com/linecorp/armeria/common/util/Exceptions.java
Patch:
@@ -46,7 +46,7 @@ public final class Exceptions {
      * Logs the specified exception if it is {@linkplain #isExpected(Throwable)} unexpected}.
      */
     public static void logIfUnexpected(Logger logger, Channel ch, Throwable cause) {
-        if (!logger.isWarnEnabled() || !isExpected(cause)) {
+        if (!logger.isWarnEnabled() || isExpected(cause)) {
             return;
         }
 
@@ -57,7 +57,7 @@ public static void logIfUnexpected(Logger logger, Channel ch, Throwable cause) {
      * Logs the specified exception if it is {@linkplain #isExpected(Throwable)} unexpected}.
      */
     public static void logIfUnexpected(Logger logger, Channel ch, String debugData, Throwable cause) {
-        if (!logger.isWarnEnabled() || !isExpected(cause)) {
+        if (!logger.isWarnEnabled() || isExpected(cause)) {
             return;
         }
 

File: src/main/java/com/linecorp/armeria/common/util/Exceptions.java
Patch:
@@ -46,7 +46,7 @@ public final class Exceptions {
      * Logs the specified exception if it is {@linkplain #isExpected(Throwable)} unexpected}.
      */
     public static void logIfUnexpected(Logger logger, Channel ch, Throwable cause) {
-        if (!logger.isWarnEnabled() || !isExpected(cause)) {
+        if (!logger.isWarnEnabled() || isExpected(cause)) {
             return;
         }
 
@@ -57,7 +57,7 @@ public static void logIfUnexpected(Logger logger, Channel ch, Throwable cause) {
      * Logs the specified exception if it is {@linkplain #isExpected(Throwable)} unexpected}.
      */
     public static void logIfUnexpected(Logger logger, Channel ch, String debugData, Throwable cause) {
-        if (!logger.isWarnEnabled() || !isExpected(cause)) {
+        if (!logger.isWarnEnabled() || isExpected(cause)) {
             return;
         }
 

File: src/test/java/com/linecorp/armeria/server/ServerTest.java
Patch:
@@ -41,6 +41,7 @@
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.ServiceInvocationContext;
 import com.linecorp.armeria.common.SessionProtocol;
+import com.linecorp.armeria.common.util.Exceptions;
 import com.linecorp.armeria.server.logging.LoggingService;
 
 import io.netty.buffer.ByteBuf;
@@ -81,7 +82,7 @@ protected void configureServer(ServerBuilder sb) {
         }).decorate(LoggingService::new);
 
         final Service buggy = new ByteBufService((ctx, exec, promise) -> {
-            throw new Exception("bug!");
+            throw Exceptions.clearTrace(new Exception("bug!"));
         }).decorate(LoggingService::new);
 
         sb.serviceAt("/", immediateResponseOnIoThread)

File: src/main/java/com/linecorp/armeria/server/http/tomcat/TomcatService.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * An {@link HttpService} that dispatches its requests to a web application running in an embedded Tomcat.
  */
-public class TomcatService extends HttpService {
+public final class TomcatService extends HttpService {
 
     /**
      * Creates a new {@link TomcatService} with the web application at the root directory inside the

File: src/main/java/com/linecorp/armeria/client/DecoratingClientCodec.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * A {@link ClientCodec} that decorates another {@link ClientCodec}.
  *
- * @see ClientOption#CLIENT_CODEC_DECORATOR
+ * @see ClientOption#DECORATOR
  */
 public abstract class DecoratingClientCodec implements ClientCodec {
 

File: src/main/java/com/linecorp/armeria/client/DecoratingRemoteInvoker.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * A {@link RemoteInvoker} that decorates another {@link RemoteInvoker}.
  *
- * @see ClientOption#REMOTE_INVOKER_DECORATOR
+ * @see ClientOption#DECORATOR
  */
 public abstract class DecoratingRemoteInvoker implements RemoteInvoker {
 

File: src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTest.java
Patch:
@@ -46,7 +46,7 @@
 import com.linecorp.armeria.client.RemoteInvokerOption;
 import com.linecorp.armeria.client.RemoteInvokerOptions;
 import com.linecorp.armeria.client.logging.KeyedChannelPoolLoggingHandler;
-import com.linecorp.armeria.client.logging.LoggingClientCodec;
+import com.linecorp.armeria.client.logging.LoggingClient;
 import com.linecorp.armeria.common.SerializationFormat;
 import com.linecorp.armeria.common.SessionProtocol;
 import com.linecorp.armeria.server.Server;
@@ -195,7 +195,7 @@ public static void init() throws Exception {
                 RemoteInvokerOption.POOL_HANDLER_DECORATOR.newValue(KeyedChannelPoolLoggingHandler::new));
         remoteInvokerFactory = new RemoteInvokerFactory(options);
 
-        clientOptions = ClientOptions.of(ClientOption.CLIENT_CODEC_DECORATOR.newValue(LoggingClientCodec::new));
+        clientOptions = ClientOptions.of(ClientOption.DECORATOR.newValue(LoggingClient::new));
     }
 
     @AfterClass

File: src/main/java/com/linecorp/armeria/server/http/healthcheck/HttpHealthCheckService.java
Patch:
@@ -160,7 +160,8 @@ public void invoke(ServiceInvocationContext ctx,
             } else {
                 response = newUnhealthyResponse(ctx);
             }
-            promise.setSuccess(response);
+
+            ctx.resolvePromise(promise, response);
         }
 
         private boolean isHealthy() {

File: src/main/java/com/linecorp/armeria/server/http/tomcat/TomcatService.java
Patch:
@@ -30,15 +30,15 @@ public class TomcatService extends HttpService {
      * JAR/WAR/directory where the caller class is located at.
      */
     public static TomcatService forCurrentClassPath() {
-        return TomcatServiceBuilder.forCurrentClassPath(2).build();
+        return TomcatServiceBuilder.forCurrentClassPath(3).build();
     }
 
     /**
      * Creates a new {@link TomcatService} with the web application at the specified document base directory
      * inside the JAR/WAR/directory where the caller class is located at.
      */
     public static TomcatService forCurrentClassPath(String docBase) {
-        return TomcatServiceBuilder.forCurrentClassPath(docBase, 2).build();
+        return TomcatServiceBuilder.forCurrentClassPath(docBase, 3).build();
     }
 
     /**

File: src/main/java/com/linecorp/armeria/server/http/tomcat/TomcatService.java
Patch:
@@ -30,15 +30,15 @@ public class TomcatService extends HttpService {
      * JAR/WAR/directory where the caller class is located at.
      */
     public static TomcatService forCurrentClassPath() {
-        return TomcatServiceBuilder.forCurrentClassPath(2).build();
+        return TomcatServiceBuilder.forCurrentClassPath(3).build();
     }
 
     /**
      * Creates a new {@link TomcatService} with the web application at the specified document base directory
      * inside the JAR/WAR/directory where the caller class is located at.
      */
     public static TomcatService forCurrentClassPath(String docBase) {
-        return TomcatServiceBuilder.forCurrentClassPath(docBase, 2).build();
+        return TomcatServiceBuilder.forCurrentClassPath(docBase, 3).build();
     }
 
     /**

File: src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java
Patch:
@@ -17,8 +17,8 @@
 
 import static java.util.Objects.requireNonNull;
 
+import java.util.ArrayDeque;
 import java.util.Collection;
-import java.util.LinkedList;
 import java.util.Queue;
 
 import com.linecorp.armeria.common.SerializationFormat;
@@ -180,7 +180,7 @@ private static class SequentialWaitsHolder implements WaitsHolder {
         private final Queue<Promise<FullHttpResponse>> requestExpectQueue;
 
         SequentialWaitsHolder() {
-            requestExpectQueue = new LinkedList<>();
+            requestExpectQueue = new ArrayDeque<>();
         }
 
         @Override
@@ -216,7 +216,7 @@ private static class MultiplexWaitsHolder implements WaitsHolder {
         @Override
         public Promise<FullHttpResponse> poll(FullHttpResponse response) {
             int streamID = response.headers().getInt(ExtensionHeaderNames.STREAM_ID.text(), 0);
-            return resultExpectMap.get(streamID);
+            return resultExpectMap.remove(streamID);
         }
 
         @Override

File: src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java
Patch:
@@ -17,8 +17,8 @@
 
 import static java.util.Objects.requireNonNull;
 
+import java.util.ArrayDeque;
 import java.util.Collection;
-import java.util.LinkedList;
 import java.util.Queue;
 
 import com.linecorp.armeria.common.SerializationFormat;
@@ -180,7 +180,7 @@ private static class SequentialWaitsHolder implements WaitsHolder {
         private final Queue<Promise<FullHttpResponse>> requestExpectQueue;
 
         SequentialWaitsHolder() {
-            requestExpectQueue = new LinkedList<>();
+            requestExpectQueue = new ArrayDeque<>();
         }
 
         @Override
@@ -216,7 +216,7 @@ private static class MultiplexWaitsHolder implements WaitsHolder {
         @Override
         public Promise<FullHttpResponse> poll(FullHttpResponse response) {
             int streamID = response.headers().getInt(ExtensionHeaderNames.STREAM_ID.text(), 0);
-            return resultExpectMap.get(streamID);
+            return resultExpectMap.remove(streamID);
         }
 
         @Override

File: src/main/java/com/linecorp/armeria/server/Server.java
Patch:
@@ -355,6 +355,9 @@ private Future<Void> stop0(Promise<Void> promise) {
     }
 
     private Future<Void> stop1(Promise<Void> promise, EventLoopGroup bossGroup) {
+        // FIXME(trustin): Shutdown and terminate the blockingTaskExecutor.
+        //                 Could be fixed while fixing https://github.com/line/armeria/issues/46
+
         final Future<?> bossShutdownFuture;
         if (bossGroup != null) {
             bossShutdownFuture = bossGroup.shutdownGracefully();

File: src/main/java/com/linecorp/armeria/server/Server.java
Patch:
@@ -355,6 +355,9 @@ private Future<Void> stop0(Promise<Void> promise) {
     }
 
     private Future<Void> stop1(Promise<Void> promise, EventLoopGroup bossGroup) {
+        // FIXME(trustin): Shutdown and terminate the blockingTaskExecutor.
+        //                 Could be fixed while fixing https://github.com/line/armeria/issues/46
+
         final Future<?> bossShutdownFuture;
         if (bossGroup != null) {
             bossShutdownFuture = bossGroup.shutdownGracefully();

File: src/main/java/com/linecorp/armeria/server/DecoratingService.java
Patch:
@@ -86,8 +86,8 @@ protected final <T extends Service> T delegate() {
     }
 
     @Override
-    public void serviceAdded(Server server) throws Exception {
-        ServiceCallbackInvoker.invokeServiceAdded(server, delegate());
+    public void serviceAdded(ServiceConfig cfg) throws Exception {
+        ServiceCallbackInvoker.invokeServiceAdded(cfg, delegate());
     }
 
     @Override

File: src/main/java/com/linecorp/armeria/server/RequestDecodeException.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * A {@link RuntimeException} raised when
- * {@link ServiceCodec#decodeRequest(Channel, SessionProtocol, String, String, String, ByteBuf, Object, Promise)
+ * {@link ServiceCodec#decodeRequest(ServiceConfig, Channel, SessionProtocol, String, String, String, ByteBuf, Object, Promise)
  * ServiceCodec.decodeRequest()} failed to decode an invocation request.
  */
 public class RequestDecodeException extends RuntimeException {

File: src/main/java/com/linecorp/armeria/server/composition/SimpleCompositeService.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.util.List;
 
-import com.linecorp.armeria.server.MappedService;
+import com.linecorp.armeria.server.PathMapped;
 import com.linecorp.armeria.server.Service;
 
 /**
@@ -46,7 +46,7 @@ public <T extends Service> T serviceAt(int index) {
     }
 
     @Override
-    public MappedService findService(String path) {
+    public PathMapped<Service> findService(String path) {
         return super.findService(path);
     }
 }

File: src/test/java/com/linecorp/armeria/server/AbstractServerTest.java
Patch:
@@ -40,7 +40,6 @@ public void startServer() throws Exception {
             }
 
             final ServerBuilder sb = new ServerBuilder();
-            sb.port(0, SessionProtocol.HTTP);
             configureServer(sb);
             server = sb.build();
 
@@ -56,7 +55,7 @@ public void startServer() throws Exception {
         }
     }
 
-    protected abstract void configureServer(ServerBuilder sb);
+    protected abstract void configureServer(ServerBuilder sb) throws Exception;
 
     @AfterClass
     public static void stopServer() throws Exception {

File: src/test/java/com/linecorp/armeria/server/docs/StructInfoTest.java
Patch:
@@ -48,7 +48,6 @@ public void testOf() throws Exception {
         fields.add(FieldInfo.of("doubleVal", RequirementType.DEFAULT, TypeInfo.of(ValueType.DOUBLE, false)));
         fields.add(FieldInfo.of("stringVal", RequirementType.DEFAULT, string));
         fields.add(FieldInfo.of("binaryVal", RequirementType.DEFAULT, TypeInfo.of(ValueType.STRING, true)));
-        fields.add(FieldInfo.of("slistVal", RequirementType.DEFAULT, string));
         fields.add(FieldInfo.of("enumVal", RequirementType.DEFAULT, fooEnum));
         fields.add(FieldInfo.of("unionVal", RequirementType.DEFAULT, union));
         fields.add(FieldInfo.of("mapVal", RequirementType.DEFAULT, MapInfo.of(string, fooEnum)));

File: src/main/java/com/linecorp/armeria/client/HttpConfigurator.java
Patch:
@@ -313,7 +313,7 @@ protected void onCloseRequest(ChannelHandlerContext ctx) throws Exception {
 
     /**
      * Workaround handler for interoperability with Jetty.
-     * - Jetty performs case-sensitive comparision for the Connection header value. (upgrade vs Upgrade)
+     * - Jetty performs case-sensitive comparison for the Connection header value. (upgrade vs Upgrade)
      * - Jetty does not send 'Upgrade: h2c' header in its 101 Switching Protocol response.
      */
     private static final class WorkaroundHandler extends ChannelDuplexHandler {

File: src/test/java/com/linecorp/armeria/client/HttpClientIdleTimeoutHandlerTest.java
Patch:
@@ -77,7 +77,7 @@ public void testPendingRequestExists() throws Exception {
     }
 
     @Test
-    public void testIdleTimeoutOccuredTwice() throws Exception {
+    public void testIdleTimeoutOccurredTwice() throws Exception {
         writeRequest();
         waitUntilTimeout();
         //pending request count is 1

File: src/test/java/com/linecorp/armeria/server/HttpServerIdleTimeoutHandlerTest.java
Patch:
@@ -78,7 +78,7 @@ public void testPendingRequestExists() throws Exception {
     }
 
     @Test
-    public void testIdleTimeoutOccuredTwice() throws Exception {
+    public void testIdleTimeoutOccurredTwice() throws Exception {
         readRequest();
         waitUntilTimeout();
         //pending request count is 2

File: src/main/java/com/linecorp/armeria/client/HttpConfigurator.java
Patch:
@@ -313,7 +313,7 @@ protected void onCloseRequest(ChannelHandlerContext ctx) throws Exception {
 
     /**
      * Workaround handler for interoperability with Jetty.
-     * - Jetty performs case-sensitive comparision for the Connection header value. (upgrade vs Upgrade)
+     * - Jetty performs case-sensitive comparison for the Connection header value. (upgrade vs Upgrade)
      * - Jetty does not send 'Upgrade: h2c' header in its 101 Switching Protocol response.
      */
     private static final class WorkaroundHandler extends ChannelDuplexHandler {

File: src/test/java/com/linecorp/armeria/client/HttpClientIdleTimeoutHandlerTest.java
Patch:
@@ -77,7 +77,7 @@ public void testPendingRequestExists() throws Exception {
     }
 
     @Test
-    public void testIdleTimeoutOccuredTwice() throws Exception {
+    public void testIdleTimeoutOccurredTwice() throws Exception {
         writeRequest();
         waitUntilTimeout();
         //pending request count is 1

File: src/test/java/com/linecorp/armeria/server/HttpServerIdleTimeoutHandlerTest.java
Patch:
@@ -78,7 +78,7 @@ public void testPendingRequestExists() throws Exception {
     }
 
     @Test
-    public void testIdleTimeoutOccuredTwice() throws Exception {
+    public void testIdleTimeoutOccurredTwice() throws Exception {
         readRequest();
         waitUntilTimeout();
         //pending request count is 2

File: src/main/java/com/linecorp/armeria/client/http/SimpleHttpRequest.java
Patch:
@@ -95,7 +95,7 @@ static String toString(URI uri, HttpMethod method, HttpHeaders headers,
         buf.append(", method: ").append(method);
         buf.append(", headers: ").append(headers);
         buf.append(", content: ");
-        if (content.length > 0) {
+        if (content != null && content.length > 0) {
             buf.append("<length: ").append(content.length).append('>');
         } else {
             buf.append("<none>");

File: src/main/java/com/linecorp/armeria/client/http/SimpleHttpClientCodec.java
Patch:
@@ -89,10 +89,10 @@ private static FullHttpRequest convertToFullHttpRequest(SimpleHttpRequest reques
         if (request.content().length > 0) {
             ByteBuf content = channel.alloc().ioBuffer().writeBytes(request.content());
             fullHttpRequest = new DefaultFullHttpRequest(
-                    HttpVersion.HTTP_1_1, request.method(), request.uri().getPath(), content);
+                    HttpVersion.HTTP_1_1, request.method(), request.uri().toASCIIString(), content);
         } else {
             fullHttpRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, request.method(),
-                                                         request.uri().getPath());
+                                                         request.uri().toASCIIString());
         }
         fullHttpRequest.headers().set(request.headers());
         return fullHttpRequest;

File: src/main/java/com/linecorp/armeria/client/http/SimpleHttpClientCodec.java
Patch:
@@ -89,10 +89,10 @@ private static FullHttpRequest convertToFullHttpRequest(SimpleHttpRequest reques
         if (request.content().length > 0) {
             ByteBuf content = channel.alloc().ioBuffer().writeBytes(request.content());
             fullHttpRequest = new DefaultFullHttpRequest(
-                    HttpVersion.HTTP_1_1, request.method(), request.uri().getPath(), content);
+                    HttpVersion.HTTP_1_1, request.method(), request.uri().toASCIIString(), content);
         } else {
             fullHttpRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, request.method(),
-                                                         request.uri().getPath());
+                                                         request.uri().toASCIIString());
         }
         fullHttpRequest.headers().set(request.headers());
         return fullHttpRequest;

File: src/main/java/com/linecorp/armeria/server/docs/DocService.java
Patch:
@@ -91,7 +91,7 @@ public Entry get(String path) {
 
         void setSpecification(byte[] content) {
             assert entry == Entry.NONE;
-            entry = new ByteArrayEntry("/", content);
+            entry = new ByteArrayEntry("/", "application/json", content);
         }
     }
 }

File: src/main/java/com/linecorp/armeria/server/docs/DocService.java
Patch:
@@ -91,7 +91,7 @@ public Entry get(String path) {
 
         void setSpecification(byte[] content) {
             assert entry == Entry.NONE;
-            entry = new ByteArrayEntry("/", content);
+            entry = new ByteArrayEntry("/", "application/json", content);
         }
     }
 }

File: src/main/java/com/linecorp/armeria/server/thrift/ThriftService.java
Patch:
@@ -100,7 +100,7 @@ public static ThriftService ofFormats(Object thriftService, SerializationFormat
      */
     public static ThriftService ofFormats(Object thriftService, SerializationFormat defaultSerializationFormat,
                                           Iterable<SerializationFormat> otherAllowedSerializationFormats) {
-        requireNonNull(otherAllowedSerializationFormats, "allowedSerializationFormats");
+        requireNonNull(otherAllowedSerializationFormats, "otherAllowedSerializationFormats");
         EnumSet<SerializationFormat> allowedSerializationFormatsSet = EnumSet.of(defaultSerializationFormat);
         otherAllowedSerializationFormats.forEach(allowedSerializationFormatsSet::add);
         return new ThriftService(

File: src/test/java/com/linecorp/armeria/server/thrift/ThriftSerializationFormatsTest.java
Patch:
@@ -86,7 +86,7 @@ public void acceptNotThrift() throws Exception {
                                   HelloService.Iface.class,
                                   ClientOption.HTTP_HEADERS.newValue(headers));
         thrown.expect(InvalidResponseException.class);
-        thrown.expectMessage("HTTP Response code: 415 Unsupported Media Type");
+        thrown.expectMessage("HTTP Response code: 406 Not Acceptable");
         client.hello("Trustin");
     }
 

File: src/main/java/com/linecorp/armeria/client/ClientBuilder.java
Patch:
@@ -152,7 +152,6 @@ private static ClientCodec createCodec(URI uri, Scheme scheme, Class<?> interfac
         if (SerializationFormat.ofThrift().contains(serializationFormat)) {
             TProtocolFactory protocolFactory = ThriftProtocolFactories.get(serializationFormat);
             return new ThriftClientCodec(uri, interfaceClass, protocolFactory);
-
         }
 
         if (SessionProtocol.ofHttp().contains(sessionProtocol) &&

File: src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java
Patch:
@@ -272,6 +272,7 @@ private FullHttpRequest convertToHttpRequest(Invocation invocation) {
             headers.set(HttpHeaderNames.CONTENT_LENGTH, contentBuf.readableBytes());
         }
 
+        invocation.options().get(ClientOption.HTTP_HEADERS).ifPresent(headers::add);
         //we allow a user can set content type and accept headers
         String mimeType = ctx.scheme().serializationFormat().mimeType();
         if (!headers.contains(HttpHeaderNames.CONTENT_TYPE)) {
@@ -280,7 +281,6 @@ private FullHttpRequest convertToHttpRequest(Invocation invocation) {
         if (!headers.contains(HttpHeaderNames.ACCEPT)) {
             headers.set(HttpHeaderNames.ACCEPT, mimeType);
         }
-        invocation.options().get(ClientOption.HTTP_HEADERS).ifPresent(headers::add);
 
         return request;
     }

File: src/main/java/com/linecorp/armeria/common/thrift/text/TTextProtocol.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
-import java.io.InputStream;
 import java.nio.ByteBuffer;
 import java.util.Stack;
 
@@ -134,6 +133,7 @@ public Class<? extends IScheme> getScheme() {
 
     @Override
     public final void reset() {
+        root = null;
     }
 
     /**
@@ -613,7 +613,7 @@ private void readRoot() throws IOException {
         ByteArrayOutputStream content = new ByteArrayOutputStream();
         byte[] buffer = new byte[READ_BUFFER_SIZE];
         try {
-            while (trans_.read(buffer, 0, READ_BUFFER_SIZE) != 0) {
+            while (trans_.read(buffer, 0, READ_BUFFER_SIZE) > 0) {
                 content.write(buffer);
             }
         } catch (TTransportException e) {

File: src/main/java/com/linecorp/armeria/server/PathMapping.java
Patch:
@@ -131,7 +131,6 @@ static PathMapping ofCatchAll() {
      * otherwise. This can be useful for services which provide logic after scanning the server's mapped
      * services, e.g., {@link com.linecorp.armeria.server.docs.DocService}.
      */
-    @Deprecated  // TODO(#35): Remove this after switching to header-based detection of thrift formats.
     default Optional<String> exactPath() {
         return Optional.empty();
     }

File: src/main/java/com/linecorp/armeria/server/docs/Specification.java
Patch:
@@ -50,7 +50,7 @@ static Specification forServiceEntries(List<ServiceEntry> services) {
 
             final ThriftService thriftService = thriftServiceOptional.get();
             final Optional<String> debugPath =
-                    thriftService.serializationFormat() == SerializationFormat.THRIFT_TEXT ?
+                    thriftService.allowedSerializationFormats().contains(SerializationFormat.THRIFT_TEXT) ?
                     serviceEntry.pathMapping().exactPath() : Optional.empty();
 
             final Class<?>[] ifaces = thriftService.thriftService().getClass().getInterfaces();

File: src/test/java/com/linecorp/armeria/server/GracefulShutdownIntegrationTest.java
Patch:
@@ -41,7 +41,7 @@ protected void configureServer(ServerBuilder sb) {
         sb.gracefulShutdownTimeout(1000L, 2000L);
         final VirtualHostBuilder defaultVirtualHost = new VirtualHostBuilder();
 
-        defaultVirtualHost.serviceAt("/sleep", new ThriftService(
+        defaultVirtualHost.serviceAt("/sleep", ThriftService.of(
                 (AsyncIface) (milliseconds, resultHandler) ->
                         ServiceInvocationContext.current().eventLoop().schedule(
                                 () -> resultHandler.onComplete(milliseconds),

File: src/test/java/com/linecorp/armeria/server/thrift/AbstractThriftOverHttpTest.java
Patch:
@@ -59,11 +59,11 @@ public abstract class AbstractThriftOverHttpTest {
             final VirtualHostBuilder defaultVirtualHost =
                     new VirtualHostBuilder().sslContext(SessionProtocol.HTTPS, ssc.certificate(), ssc.privateKey());
 
-            defaultVirtualHost.serviceAt("/hello", new ThriftService(
+            defaultVirtualHost.serviceAt("/hello", ThriftService.of(
                     (AsyncIface) (name, resultHandler) ->
                             resultHandler.onComplete("Hello, " + name + '!')).decorate(LoggingService::new));
 
-            defaultVirtualHost.serviceAt("/sleep", new ThriftService(
+            defaultVirtualHost.serviceAt("/sleep", ThriftService.of(
                     (SleepService.AsyncIface) (milliseconds, resultHandler) -> {
                         // FIXME: Provide a way to access the current executor.
                         GlobalEventExecutor.INSTANCE.schedule(

File: src/main/java/com/linecorp/armeria/client/ClientBuilder.java
Patch:
@@ -152,7 +152,6 @@ private static ClientCodec createCodec(URI uri, Scheme scheme, Class<?> interfac
         if (SerializationFormat.ofThrift().contains(serializationFormat)) {
             TProtocolFactory protocolFactory = ThriftProtocolFactories.get(serializationFormat);
             return new ThriftClientCodec(uri, interfaceClass, protocolFactory);
-
         }
 
         if (SessionProtocol.ofHttp().contains(sessionProtocol) &&

File: src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java
Patch:
@@ -272,6 +272,7 @@ private FullHttpRequest convertToHttpRequest(Invocation invocation) {
             headers.set(HttpHeaderNames.CONTENT_LENGTH, contentBuf.readableBytes());
         }
 
+        invocation.options().get(ClientOption.HTTP_HEADERS).ifPresent(headers::add);
         //we allow a user can set content type and accept headers
         String mimeType = ctx.scheme().serializationFormat().mimeType();
         if (!headers.contains(HttpHeaderNames.CONTENT_TYPE)) {
@@ -280,7 +281,6 @@ private FullHttpRequest convertToHttpRequest(Invocation invocation) {
         if (!headers.contains(HttpHeaderNames.ACCEPT)) {
             headers.set(HttpHeaderNames.ACCEPT, mimeType);
         }
-        invocation.options().get(ClientOption.HTTP_HEADERS).ifPresent(headers::add);
 
         return request;
     }

File: src/main/java/com/linecorp/armeria/common/thrift/text/TTextProtocol.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
-import java.io.InputStream;
 import java.nio.ByteBuffer;
 import java.util.Stack;
 
@@ -134,6 +133,7 @@ public Class<? extends IScheme> getScheme() {
 
     @Override
     public final void reset() {
+        root = null;
     }
 
     /**
@@ -613,7 +613,7 @@ private void readRoot() throws IOException {
         ByteArrayOutputStream content = new ByteArrayOutputStream();
         byte[] buffer = new byte[READ_BUFFER_SIZE];
         try {
-            while (trans_.read(buffer, 0, READ_BUFFER_SIZE) != 0) {
+            while (trans_.read(buffer, 0, READ_BUFFER_SIZE) > 0) {
                 content.write(buffer);
             }
         } catch (TTransportException e) {

File: src/main/java/com/linecorp/armeria/server/PathMapping.java
Patch:
@@ -131,7 +131,6 @@ static PathMapping ofCatchAll() {
      * otherwise. This can be useful for services which provide logic after scanning the server's mapped
      * services, e.g., {@link com.linecorp.armeria.server.docs.DocService}.
      */
-    @Deprecated  // TODO(#35): Remove this after switching to header-based detection of thrift formats.
     default Optional<String> exactPath() {
         return Optional.empty();
     }

File: src/main/java/com/linecorp/armeria/server/docs/Specification.java
Patch:
@@ -50,7 +50,7 @@ static Specification forServiceEntries(List<ServiceEntry> services) {
 
             final ThriftService thriftService = thriftServiceOptional.get();
             final Optional<String> debugPath =
-                    thriftService.serializationFormat() == SerializationFormat.THRIFT_TEXT ?
+                    thriftService.allowedSerializationFormats().contains(SerializationFormat.THRIFT_TEXT) ?
                     serviceEntry.pathMapping().exactPath() : Optional.empty();
 
             final Class<?>[] ifaces = thriftService.thriftService().getClass().getInterfaces();

File: src/test/java/com/linecorp/armeria/server/GracefulShutdownIntegrationTest.java
Patch:
@@ -41,7 +41,7 @@ protected void configureServer(ServerBuilder sb) {
         sb.gracefulShutdownTimeout(1000L, 2000L);
         final VirtualHostBuilder defaultVirtualHost = new VirtualHostBuilder();
 
-        defaultVirtualHost.serviceAt("/sleep", new ThriftService(
+        defaultVirtualHost.serviceAt("/sleep", ThriftService.of(
                 (AsyncIface) (milliseconds, resultHandler) ->
                         ServiceInvocationContext.current().eventLoop().schedule(
                                 () -> resultHandler.onComplete(milliseconds),

File: src/test/java/com/linecorp/armeria/server/thrift/AbstractThriftOverHttpTest.java
Patch:
@@ -59,11 +59,11 @@ public abstract class AbstractThriftOverHttpTest {
             final VirtualHostBuilder defaultVirtualHost =
                     new VirtualHostBuilder().sslContext(SessionProtocol.HTTPS, ssc.certificate(), ssc.privateKey());
 
-            defaultVirtualHost.serviceAt("/hello", new ThriftService(
+            defaultVirtualHost.serviceAt("/hello", ThriftService.of(
                     (AsyncIface) (name, resultHandler) ->
                             resultHandler.onComplete("Hello, " + name + '!')).decorate(LoggingService::new));
 
-            defaultVirtualHost.serviceAt("/sleep", new ThriftService(
+            defaultVirtualHost.serviceAt("/sleep", ThriftService.of(
                     (SleepService.AsyncIface) (milliseconds, resultHandler) -> {
                         // FIXME: Provide a way to access the current executor.
                         GlobalEventExecutor.INSTANCE.schedule(

File: src/main/java/com/linecorp/armeria/client/http/SimpleHttpRequest.java
Patch:
@@ -18,6 +18,8 @@
 
 import java.net.URI;
 
+import com.linecorp.armeria.common.http.ImmutableHttpHeaders;
+
 import io.netty.handler.codec.http.FullHttpRequest;
 import io.netty.handler.codec.http.HttpHeaders;
 import io.netty.handler.codec.http.HttpMethod;

File: src/main/java/com/linecorp/armeria/client/http/SimpleHttpRequest.java
Patch:
@@ -18,6 +18,8 @@
 
 import java.net.URI;
 
+import com.linecorp.armeria.common.http.ImmutableHttpHeaders;
+
 import io.netty.handler.codec.http.FullHttpRequest;
 import io.netty.handler.codec.http.HttpHeaders;
 import io.netty.handler.codec.http.HttpMethod;

File: src/main/java/com/linecorp/armeria/client/ClientCodec.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.linecorp.armeria.common.Scheme;
 import com.linecorp.armeria.common.ServiceInvocationContext;
+import com.linecorp.armeria.common.SessionProtocol;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.Channel;
@@ -38,7 +39,7 @@ public interface ClientCodec {
     /**
      * Encodes a Java method invocation into a {@link ServiceInvocationContext}.
      */
-    EncodeResult encodeRequest(Channel channel, Method method, Object[] args);
+    EncodeResult encodeRequest(Channel channel, SessionProtocol sessionProtocol, Method method, Object[] args);
 
     /**
      * Decodes the response bytes into a Java object.
@@ -52,7 +53,7 @@ <T> T decodeResponse(ServiceInvocationContext ctx, ByteBuf content, Object origi
     boolean isAsyncClient();
 
     /**
-     * The result of {@link #encodeRequest(Channel, Method, Object[]) ClientCodec.encodeRequest()}.
+     * The result of {@link #encodeRequest(Channel, SessionProtocol, Method, Object[]) ClientCodec.encodeRequest()}.
      */
     interface EncodeResult {
         /**

File: src/main/java/com/linecorp/armeria/client/DecoratingRemoteInvoker.java
Patch:
@@ -32,6 +32,9 @@ public abstract class DecoratingRemoteInvoker implements RemoteInvoker {
 
     private final RemoteInvoker delegate;
 
+    /**
+     * Creates a new instance that decorates the specified {@link RemoteInvoker}.
+     */
     protected DecoratingRemoteInvoker(RemoteInvoker delegate) {
         this.delegate = requireNonNull(delegate, "delegate");
     }

File: src/test/java/com/linecorp/armeria/client/HttpClientIdleTimeoutHandlerTest.java
Patch:
@@ -80,12 +80,12 @@ public void testPendingRequestExists() throws Exception {
     public void testIdleTimeoutOccuredTwice() throws Exception {
         writeRequest();
         waitUntilTimeout();
-        //padding request count is 1
+        //pending request count is 1
         assertTrue(ch.isOpen());
 
         readResponse();
         waitUntilTimeout();
-        //padding request count turns to 0
+        //pending request count turns to 0
         assertFalse(ch.isOpen());
     }
 

File: src/test/java/com/linecorp/armeria/client/http/SimpleHttpClientCodecTest.java
Patch:
@@ -72,7 +72,7 @@ public class SimpleHttpClientCodecTest {
 
     @Before
     public void setUp() {
-        codec = new SimpleHttpClientCodec(SCHEME, "www.github.com");
+        codec = new SimpleHttpClientCodec("www.github.com");
         when(channel.alloc()).thenReturn(ByteBufAllocator.DEFAULT);
     }
 
@@ -81,7 +81,7 @@ public void encodeRequestNoBody() {
         SimpleHttpRequest request = SimpleHttpRequestBuilder.forGet("/foo")
                 .header(HttpHeaderNames.ORIGIN, "localhost")
                 .build();
-        EncodeResult result = codec.encodeRequest(channel, EXECUTE_METHOD, new Object[]{ request });
+        EncodeResult result = codec.encodeRequest(channel, SCHEME.sessionProtocol(), EXECUTE_METHOD, new Object[]{ request });
         assertTrue(result.isSuccess());
         assertEquals(SCHEME, result.encodedScheme().get());
         assertEquals("/foo", result.encodedPath().get());
@@ -99,7 +99,7 @@ public void encodeRequestWithBody() {
                 .content("lorem ipsum foo bar", StandardCharsets.UTF_8)
                 .header(HttpHeaderNames.ORIGIN, "localhost")
                 .build();
-        EncodeResult result = codec.encodeRequest(channel, EXECUTE_METHOD, new Object[]{ request });
+        EncodeResult result = codec.encodeRequest(channel, SCHEME.sessionProtocol(), EXECUTE_METHOD, new Object[]{ request });
         assertTrue(result.isSuccess());
         assertEquals(SCHEME, result.encodedScheme().get());
         assertEquals("/foo", result.encodedPath().get());

File: src/test/java/com/linecorp/armeria/server/HttpServerIdleTimeoutHandlerTest.java
Patch:
@@ -81,11 +81,11 @@ public void testPendingRequestExists() throws Exception {
     public void testIdleTimeoutOccuredTwice() throws Exception {
         readRequest();
         waitUntilTimeout();
-        //padding request count is 2
+        //pending request count is 2
         Assert.assertTrue(ch.isOpen());
 
         writeResponse();
-        //padding request count turns to 0
+        //pending request count turns to 0
         waitUntilTimeout();
         assertFalse(ch.isOpen());
 

File: src/test/java/com/linecorp/armeria/server/thrift/ThriftOverHttp1Test.java
Patch:
@@ -50,11 +50,12 @@ public ThriftOverHttp1Test() {
             SSLContext sslCtx =
                     SSLContextBuilder.create().loadTrustMaterial(TrustSelfSignedStrategy.INSTANCE).build();
 
-            httpClient = HttpClientBuilder.create().setSslcontext(sslCtx).build();
+            httpClient = HttpClientBuilder.create().setSSLContext(sslCtx).build();
         } catch (Exception e) {
             throw new Error(e);
         }
     }
+
     @Override
     protected TTransport newTransport(String uri) throws TTransportException {
         return new THttpClient(uri, httpClient);

File: src/test/java/com/linecorp/armeria/server/AbstractServerTest.java
Patch:
@@ -40,7 +40,7 @@ public void startServer() throws Exception {
             }
 
             final ServerBuilder sb = new ServerBuilder();
-            sb.port(9000, SessionProtocol.HTTP);
+            sb.port(0, SessionProtocol.HTTP);
             configureServer(sb);
             server = sb.build();
 

File: src/main/java/com/linecorp/armeria/client/pool/SafeKeyedChannelPoolHandler.java
Patch:
@@ -67,7 +67,7 @@ public void channelCreated(K key, Channel ch) {
     @Override
     public void channelClosed(K key, Channel ch) {
         try {
-            handler.channelCreated(key, ch);
+            handler.channelClosed(key, ch);
         } catch (Exception e) {
             logFailure("channelClosed", e);
         }

File: src/main/java/com/linecorp/armeria/client/pool/SafeKeyedChannelPoolHandler.java
Patch:
@@ -67,7 +67,7 @@ public void channelCreated(K key, Channel ch) {
     @Override
     public void channelClosed(K key, Channel ch) {
         try {
-            handler.channelCreated(key, ch);
+            handler.channelClosed(key, ch);
         } catch (Exception e) {
             logFailure("channelClosed", e);
         }

File: src/test/java/com/linecorp/armeria/client/HttpClientIdleTimeoutHandlerTest.java
Patch:
@@ -96,7 +96,7 @@ private void waitUntilTimeout() throws InterruptedException {
 
     private void readResponse() {
         ch.writeInbound(httpResponse);
-        assertThat(ch.readInbound(), equalTo(httpRequest));
+        assertThat(ch.readInbound(), equalTo(httpResponse));
     }
 
     private void writeRequest() {

File: src/test/java/com/linecorp/armeria/client/HttpClientIdleTimeoutHandlerTest.java
Patch:
@@ -96,7 +96,7 @@ private void waitUntilTimeout() throws InterruptedException {
 
     private void readResponse() {
         ch.writeInbound(httpResponse);
-        assertThat(ch.readInbound(), equalTo(httpRequest));
+        assertThat(ch.readInbound(), equalTo(httpResponse));
     }
 
     private void writeRequest() {

File: src/main/java/com/linecorp/armeria/client/ClientOption.java
Patch:
@@ -36,14 +36,14 @@ public final class ClientOption<T> extends AbstractOption<T> {
     private static final ConstantPool pool = new ConstantPool() {
         @Override
         protected ClientOption<Object> newConstant(int id, String name) {
-            return new ClientOption<Object>(id, name);
+            return new ClientOption<>(id, name);
         }
     };
 
     /**
      * The {@link TimeoutPolicy} for a socket write
      */
-    public static final ClientOption<TimeoutPolicy> WRITE_TIMEOUT_POLICY = valueOf("WRITE_TIMEOUT_POLICYS");
+    public static final ClientOption<TimeoutPolicy> WRITE_TIMEOUT_POLICY = valueOf("WRITE_TIMEOUT_POLICY");
 
     /**
      * The {@link TimeoutPolicy} for a server reply to a client call.
@@ -95,6 +95,6 @@ private ClientOption(int id, String name) {
      */
     public ClientOptionValue<T> newValue(T value) {
         requireNonNull(value, "value");
-        return new ClientOptionValue<T>(this, value);
+        return new ClientOptionValue<>(this, value);
     }
 }

File: src/main/java/com/linecorp/armeria/client/HttpRemoteInvoker.java
Patch:
@@ -271,8 +271,6 @@ private static SessionProtocol validateSessionProtocol(SessionProtocol sessionPr
 
     @Override
     public void close() {
-        for (KeyedChannelPool<PoolKey> p : map.values()) {
-            p.close();
-        }
+        map.values().forEach(KeyedChannelPool::close);
     }
 }

File: src/main/java/com/linecorp/armeria/client/HttpSessionChannelFactory.java
Patch:
@@ -73,15 +73,15 @@ public Future<Channel> apply(PoolKey key) {
         final Promise<Channel> channelPromise = channelFuture.channel().eventLoop().newPromise();
 
         if (channelFuture.isDone()) {
-            notifyConnnect(channelFuture, ch, channelPromise);
+            notifyConnect(channelFuture, ch, channelPromise);
         } else {
-            channelFuture.addListener((Future<Void> future) -> notifyConnnect(future, ch, channelPromise));
+            channelFuture.addListener((Future<Void> future) -> notifyConnect(future, ch, channelPromise));
         }
 
         return channelPromise;
     }
 
-    private void notifyConnnect(Future<Void> fut, Channel ch, Promise<Channel> channelPromise) {
+    private void notifyConnect(Future<Void> fut, Channel ch, Promise<Channel> channelPromise) {
         assert fut.isDone();
         if (fut.isSuccess()) {
             watchSessionActive(ch, channelPromise);

File: src/main/java/com/linecorp/armeria/client/logging/LoggingClientCodec.java
Patch:
@@ -119,13 +119,13 @@ public <T> T decodeResponse(ServiceInvocationContext ctx, ByteBuf content, Objec
         }
     }
 
-    private <T> T logAndDecodeResponse(ServiceInvocationContext ctx, Logger logger, Object originalReponse,
+    private <T> T logAndDecodeResponse(ServiceInvocationContext ctx, Logger logger, Object originalResponse,
                                        ByteBuf content) throws Exception {
         final long endTimeNanos = ticker.read();
         final long startTimeNanos = ctx.attr(START_TIME_NANOS).get();
 
         try {
-            T result = c.decodeResponse(ctx, content, originalReponse);
+            T result = c.decodeResponse(ctx, content, originalResponse);
             logger.info("Response: {} ({})", result, elapsed(startTimeNanos, endTimeNanos));
             return result;
         } catch (Throwable cause) {

File: src/main/java/com/linecorp/armeria/client/pool/DefaultKeyedChannelPool.java
Patch:
@@ -82,8 +82,8 @@ public DefaultKeyedChannelPool(EventLoop eventLoop, Function<K, Future<Channel>>
         this.eventLoop = requireNonNull(eventLoop, "eventLoop");
         this.channelFactory = requireNonNull(channelFactory, "channelFactory");
         this.healthCheck = requireNonNull(healthCheck, "healthCheck");
-        this.channelPoolHandler = new SafeKeyedChannelPoolHandler<K>(requireNonNull(channelPoolHandler,
-                                                                                    "channelPoolHandler"));
+        this.channelPoolHandler = new SafeKeyedChannelPoolHandler<>(requireNonNull(channelPoolHandler,
+                                                                                   "channelPoolHandler"));
         this.releaseHealthCheck = releaseHealthCheck;
 
         pool = PlatformDependent.newConcurrentHashMap();

File: src/main/java/com/linecorp/armeria/client/pool/KeyedChannelPool.java
Patch:
@@ -21,7 +21,7 @@
 import io.netty.util.concurrent.Promise;
 
 /**
- * An asynchronous {@link Channel} pool that provides key-based acqusition and release.
+ * An asynchronous {@link Channel} pool that provides key-based acquisition and release.
  *
  * @param <K> the type of the key, usually {@link PoolKey}
  */

File: src/main/java/com/linecorp/armeria/client/pool/SafeKeyedChannelPoolHandler.java
Patch:
@@ -21,8 +21,8 @@
 import io.netty.channel.Channel;
 
 /**
- * Halper Handler deledate event to decoreated  {@link KeyedChannelPoolHandler}.
- * Ignore Exception when coreated {@link KeyedChannelPoolHandler} throw Exception.s
+ * Helper Handler delegate event to decorated  {@link KeyedChannelPoolHandler}.
+ * Ignore Exception when created {@link KeyedChannelPoolHandler} throw Exception.s
  */
 class SafeKeyedChannelPoolHandler<K> implements KeyedChannelPoolHandler<K> {
     private static final Logger logger = LoggerFactory.getLogger(SafeKeyedChannelPoolHandler.class);

File: src/main/java/com/linecorp/armeria/server/RequestTimeoutException.java
Patch:
@@ -19,7 +19,7 @@
 import com.linecorp.armeria.common.TimeoutException;
 
 /**
- * A {@link TimeoutException} raised when a received request has not beed processed within timeout.
+ * A {@link TimeoutException} raised when a received request has not been processed within timeout.
  */
 public class RequestTimeoutException extends TimeoutException {
 

File: src/main/java/com/linecorp/armeria/server/ServiceCallbackInvoker.java
Patch:
@@ -136,7 +136,7 @@ private V put(K key, V value) {
             requireNonNull(key, "key");
             requireNonNull(value, "value");
 
-            return map.put(new KeyRef<K>(key, refQueue), value);
+            return map.put(new KeyRef<>(key, refQueue), value);
         }
 
         private void expunge() {

File: src/main/java/com/linecorp/armeria/server/http/HttpService.java
Patch:
@@ -23,7 +23,6 @@
 import com.linecorp.armeria.server.Service;
 import com.linecorp.armeria.server.ServiceCodec;
 import com.linecorp.armeria.server.ServiceInvocationHandler;
-import com.linecorp.armeria.server.SimpleService;
 
 /**
  * A {@link Service} that handles an HTTP request. This {@link Service} must run on a {@link ServerPort}

File: src/test/java/com/linecorp/armeria/client/ClientOptionsTest.java
Patch:
@@ -60,10 +60,9 @@ public void testSetBlackListHeader() {
         ClientOptions.of(ClientOption.HTTP_HEADERS.newValue(httpHeader));
     }
 
-    @Test(expected = RuntimeException.class)
-    public void testInvalideOption() {
+    @Test(expected = NullPointerException.class)
+    public void testInvalidOption() {
         ClientOptions.of(ClientOption.RESPONSE_TIMEOUT_POLICY.newValue(null));
-        fail("exception should ocurred");
     }
 
 }

File: src/test/java/com/linecorp/armeria/client/HttpClientIdleTimeoutHandlerTest.java
Patch:
@@ -55,7 +55,7 @@ public void after() {
     }
 
     @Test
-    public void testIdleTimeoutWhitoutRequest() throws Exception {
+    public void testIdleTimeoutWithoutRequest() throws Exception {
         Thread.sleep(idleTimeoutMillis * 3 / 2);
         ch.runPendingTasks();
         assertFalse(ch.isOpen());

File: src/test/java/com/linecorp/armeria/client/thrift/ThriftClientCodecTest.java
Patch:
@@ -109,6 +109,5 @@ public void testEncodeRequestFailed() throws NoSuchMethodException {
         assertThat(result.isSuccess(), is(false));
         assertThat(result.cause(), is(notNullValue()));
         result.invocationContext();
-        fail("should exception ocuured when getting invocation Context");
     }
 }

File: src/main/java/com/linecorp/armeria/server/ServiceEntry.java
Patch:
@@ -62,6 +62,6 @@ public Service service() {
 
     @Override
     public String toString() {
-        return "{ " + virtualHost + ", " + pathMapping + ", " + service + " }";
+        return "{ " + virtualHost.hostnamePattern() + ", " + pathMapping + ", " + service + " }";
     }
 }

File: src/main/java/com/linecorp/armeria/server/ServiceEntry.java
Patch:
@@ -62,6 +62,6 @@ public Service service() {
 
     @Override
     public String toString() {
-        return "{ " + virtualHost + ", " + pathMapping + ", " + service + " }";
+        return "{ " + virtualHost.hostnamePattern() + ", " + pathMapping + ", " + service + " }";
     }
 }

File: src/main/java/com/linecorp/armeria/client/ClientOption.java
Patch:
@@ -43,7 +43,7 @@ protected ClientOption<Object> newConstant(int id, String name) {
     /**
      * The {@link TimeoutPolicy} for a socket write
      */
-    public static final ClientOption<TimeoutPolicy> WRITE_TIMEOUT_POLICY = valueOf("WRITE_TIMEOUT_POLICYS");
+    public static final ClientOption<TimeoutPolicy> WRITE_TIMEOUT_POLICY = valueOf("WRITE_TIMEOUT_POLICY");
 
     /**
      * The {@link TimeoutPolicy} for a server reply to a client call.

File: src/main/java/com/linecorp/armeria/client/HttpSessionChannelFactory.java
Patch:
@@ -73,15 +73,15 @@ public Future<Channel> apply(PoolKey key) {
         final Promise<Channel> channelPromise = channelFuture.channel().eventLoop().newPromise();
 
         if (channelFuture.isDone()) {
-            notifyConnnect(channelFuture, ch, channelPromise);
+            notifyConnect(channelFuture, ch, channelPromise);
         } else {
-            channelFuture.addListener((Future<Void> future) -> notifyConnnect(future, ch, channelPromise));
+            channelFuture.addListener((Future<Void> future) -> notifyConnect(future, ch, channelPromise));
         }
 
         return channelPromise;
     }
 
-    private void notifyConnnect(Future<Void> fut, Channel ch, Promise<Channel> channelPromise) {
+    private void notifyConnect(Future<Void> fut, Channel ch, Promise<Channel> channelPromise) {
         assert fut.isDone();
         if (fut.isSuccess()) {
             watchSessionActive(ch, channelPromise);

File: src/main/java/com/linecorp/armeria/client/logging/LoggingClientCodec.java
Patch:
@@ -119,13 +119,13 @@ public <T> T decodeResponse(ServiceInvocationContext ctx, ByteBuf content, Objec
         }
     }
 
-    private <T> T logAndDecodeResponse(ServiceInvocationContext ctx, Logger logger, Object originalReponse,
+    private <T> T logAndDecodeResponse(ServiceInvocationContext ctx, Logger logger, Object originalResponse,
                                        ByteBuf content) throws Exception {
         final long endTimeNanos = ticker.read();
         final long startTimeNanos = ctx.attr(START_TIME_NANOS).get();
 
         try {
-            T result = c.decodeResponse(ctx, content, originalReponse);
+            T result = c.decodeResponse(ctx, content, originalResponse);
             logger.info("Response: {} ({})", result, elapsed(startTimeNanos, endTimeNanos));
             return result;
         } catch (Throwable cause) {

File: src/main/java/com/linecorp/armeria/client/pool/KeyedChannelPool.java
Patch:
@@ -21,7 +21,7 @@
 import io.netty.util.concurrent.Promise;
 
 /**
- * An asynchronous {@link Channel} pool that provides key-based acqusition and release.
+ * An asynchronous {@link Channel} pool that provides key-based acquisition and release.
  *
  * @param <K> the type of the key, usually {@link PoolKey}
  */

File: src/main/java/com/linecorp/armeria/client/pool/SafeKeyedChannelPoolHandler.java
Patch:
@@ -21,8 +21,8 @@
 import io.netty.channel.Channel;
 
 /**
- * Halper Handler deledate event to decoreated  {@link KeyedChannelPoolHandler}.
- * Ignore Exception when coreated {@link KeyedChannelPoolHandler} throw Exception.s
+ * Helper Handler delegate event to decorated  {@link KeyedChannelPoolHandler}.
+ * Ignore Exception when created {@link KeyedChannelPoolHandler} throw Exception.s
  */
 class SafeKeyedChannelPoolHandler<K> implements KeyedChannelPoolHandler<K> {
     private static final Logger logger = LoggerFactory.getLogger(SafeKeyedChannelPoolHandler.class);

File: src/main/java/com/linecorp/armeria/server/RequestTimeoutException.java
Patch:
@@ -19,7 +19,7 @@
 import com.linecorp.armeria.common.TimeoutException;
 
 /**
- * A {@link TimeoutException} raised when a received request has not beed processed within timeout.
+ * A {@link TimeoutException} raised when a received request has not been processed within timeout.
  */
 public class RequestTimeoutException extends TimeoutException {
 

File: src/test/java/com/linecorp/armeria/client/ClientOptionsTest.java
Patch:
@@ -60,10 +60,9 @@ public void testSetBlackListHeader() {
         ClientOptions.of(ClientOption.HTTP_HEADERS.newValue(httpHeader));
     }
 
-    @Test(expected = RuntimeException.class)
-    public void testInvalideOption() {
+    @Test(expected = NullPointerException.class)
+    public void testInvalidOption() {
         ClientOptions.of(ClientOption.RESPONSE_TIMEOUT_POLICY.newValue(null));
-        fail("exception should ocurred");
     }
 
 }

File: src/test/java/com/linecorp/armeria/client/HttpClientIdleTimeoutHandlerTest.java
Patch:
@@ -55,7 +55,7 @@ public void after() {
     }
 
     @Test
-    public void testIdleTimeoutWhitoutRequest() throws Exception {
+    public void testIdleTimeoutWithoutRequest() throws Exception {
         Thread.sleep(idleTimeoutMillis * 3 / 2);
         ch.runPendingTasks();
         assertFalse(ch.isOpen());

File: src/test/java/com/linecorp/armeria/client/thrift/ThriftClientCodecTest.java
Patch:
@@ -109,6 +109,5 @@ public void testEncodeRequestFailed() throws NoSuchMethodException {
         assertThat(result.isSuccess(), is(false));
         assertThat(result.cause(), is(notNullValue()));
         result.invocationContext();
-        fail("should exception ocuured when getting invocation Context");
     }
 }

File: src/main/java/com/linecorp/armeria/client/HttpConfigurator.java
Patch:
@@ -68,7 +68,7 @@ class HttpConfigurator extends ChannelInitializer<Channel> {
 
     private static final Logger logger = LoggerFactory.getLogger(HttpConfigurator.class);
 
-    private static final Set<SessionProtocol> http2preferedProtocols = EnumSet.of(SessionProtocol.H2,
+    private static final Set<SessionProtocol> http2preferredProtocols = EnumSet.of(SessionProtocol.H2,
                                                                                   SessionProtocol.H2C,
                                                                                   SessionProtocol.HTTP,
                                                                                   SessionProtocol.HTTPS);
@@ -79,7 +79,7 @@ class HttpConfigurator extends ChannelInitializer<Channel> {
 
     HttpConfigurator(SessionProtocol sessionProtocol,
                      RemoteInvokerOptions options, SessionListener sessionListener) {
-        isHttp2Preferred = http2preferedProtocols.contains(sessionProtocol);
+        isHttp2Preferred = http2preferredProtocols.contains(sessionProtocol);
         this.options = requireNonNull(options, "options");
         this.sessionListener = requireNonNull(sessionListener, "sessionListener");
 

File: src/main/java/com/linecorp/armeria/client/HttpConfigurator.java
Patch:
@@ -68,7 +68,7 @@ class HttpConfigurator extends ChannelInitializer<Channel> {
 
     private static final Logger logger = LoggerFactory.getLogger(HttpConfigurator.class);
 
-    private static final Set<SessionProtocol> http2preferedProtocols = EnumSet.of(SessionProtocol.H2,
+    private static final Set<SessionProtocol> http2preferredProtocols = EnumSet.of(SessionProtocol.H2,
                                                                                   SessionProtocol.H2C,
                                                                                   SessionProtocol.HTTP,
                                                                                   SessionProtocol.HTTPS);
@@ -79,7 +79,7 @@ class HttpConfigurator extends ChannelInitializer<Channel> {
 
     HttpConfigurator(SessionProtocol sessionProtocol,
                      RemoteInvokerOptions options, SessionListener sessionListener) {
-        isHttp2Preferred = http2preferedProtocols.contains(sessionProtocol);
+        isHttp2Preferred = http2preferredProtocols.contains(sessionProtocol);
         this.options = requireNonNull(options, "options");
         this.sessionListener = requireNonNull(sessionListener, "sessionListener");
 

