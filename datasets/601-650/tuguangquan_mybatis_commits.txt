File: src/main/java/org/apache/ibatis/annotations/CacheNamespace.java
Patch:
@@ -39,4 +39,6 @@
 
   boolean readWrite() default true;
   
+  boolean blocking() default false;
+  
 }

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -126,6 +126,7 @@ public Cache useNewCache(Class<? extends Cache> typeClass,
       Long flushInterval,
       Integer size,
       boolean readWrite,
+      boolean blocking,
       Properties props) {
     typeClass = valueOrDefault(typeClass, PerpetualCache.class);
     evictionClass = valueOrDefault(evictionClass, LruCache.class);
@@ -135,6 +136,7 @@ public Cache useNewCache(Class<? extends Cache> typeClass,
         .clearInterval(flushInterval)
         .size(size)
         .readWrite(readWrite)
+        .blocking(blocking)
         .properties(props)
         .build();
     configuration.addCache(cache);

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -174,7 +174,7 @@ private void parseCache() {
     if (cacheDomain != null) {
       Integer size = cacheDomain.size() == 0 ? null : cacheDomain.size();
       Long flushInterval = cacheDomain.flushInterval() == 0 ? null : cacheDomain.flushInterval();
-      assistant.useNewCache(cacheDomain.implementation(), cacheDomain.eviction(), flushInterval, size, cacheDomain.readWrite(), null);
+      assistant.useNewCache(cacheDomain.implementation(), cacheDomain.eviction(), flushInterval, size, cacheDomain.readWrite(), cacheDomain.blocking(), null);
     }
   }
 

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -205,8 +205,9 @@ private void cacheElement(XNode context) throws Exception {
       Long flushInterval = context.getLongAttribute("flushInterval");
       Integer size = context.getIntAttribute("size");
       boolean readWrite = !context.getBooleanAttribute("readOnly", false);
+      boolean blocking = context.getBooleanAttribute("blocking", false);
       Properties props = context.getChildrenAsProperties();
-      builderAssistant.useNewCache(typeClass, evictionClass, flushInterval, size, readWrite, props);
+      builderAssistant.useNewCache(typeClass, evictionClass, flushInterval, size, readWrite, blocking, props);
     }
   }
 

File: src/main/java/org/apache/ibatis/annotations/CacheNamespace.java
Patch:
@@ -37,5 +37,6 @@
 
   int size() default 1024;
 
-  boolean readWrite() default false;
+  boolean readWrite() default true;
+  
 }

File: src/main/java/org/apache/ibatis/annotations/CacheNamespace.java
Patch:
@@ -33,9 +33,9 @@
 
   Class<? extends org.apache.ibatis.cache.Cache> eviction() default LruCache.class;
 
-  long flushInterval() default 3600000;
+  long flushInterval() default 0;
 
-  int size() default 1000;
+  int size() default 1024;
 
-  boolean readWrite() default true;
+  boolean readWrite() default false;
 }

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -172,7 +172,9 @@ private void loadXmlResource() {
   private void parseCache() {
     CacheNamespace cacheDomain = type.getAnnotation(CacheNamespace.class);
     if (cacheDomain != null) {
-      assistant.useNewCache(cacheDomain.implementation(), cacheDomain.eviction(), cacheDomain.flushInterval(), cacheDomain.size(), cacheDomain.readWrite(), null);
+      Integer size = cacheDomain.size() == 0 ? null : cacheDomain.size();
+      Long flushInterval = cacheDomain.flushInterval() == 0 ? null : cacheDomain.flushInterval();
+      assistant.useNewCache(cacheDomain.implementation(), cacheDomain.eviction(), flushInterval, size, cacheDomain.readWrite(), null);
     }
   }
 

File: src/main/java/org/apache/ibatis/jdbc/Null.java
Patch:
@@ -69,15 +69,15 @@ public enum Null {
   SQLDATE(new SqlDateTypeHandler(), JdbcType.DATE),
   SQLTIME(new SqlTimeTypeHandler(), JdbcType.TIME);
 
-  private TypeHandler typeHandler;
+  private TypeHandler<?> typeHandler;
   private JdbcType jdbcType;
 
-  private Null(TypeHandler typeHandler, JdbcType jdbcType) {
+  private Null(TypeHandler<?> typeHandler, JdbcType jdbcType) {
     this.typeHandler = typeHandler;
     this.jdbcType = jdbcType;
   }
 
-  public TypeHandler getTypeHandler() {
+  public TypeHandler<?> getTypeHandler() {
     return typeHandler;
   }
 

File: src/main/java/org/apache/ibatis/scripting/xmltags/DynamicContext.java
Patch:
@@ -110,6 +110,7 @@ public Object get(Object key) {
 
   static class ContextAccessor implements PropertyAccessor {
 
+    @Override
     public Object getProperty(Map context, Object target, Object name)
         throws OgnlException {
       Map map = (Map) target;
@@ -127,9 +128,10 @@ public Object getProperty(Map context, Object target, Object name)
       return null;
     }
 
+    @Override
     public void setProperty(Map context, Object target, Object name, Object value)
         throws OgnlException {
-      Map map = (Map) target;
+      Map<Object, Object> map = (Map<Object, Object>) target;
       map.put(name, value);
     }
 

File: src/main/java/org/apache/ibatis/cache/decorators/SoftCache.java
Patch:
@@ -116,7 +116,7 @@ private void removeGarbageCollectedItems() {
   private static class SoftEntry extends SoftReference<Object> {
     private final Object key;
 
-    private SoftEntry(Object key, Object value, ReferenceQueue<Object> garbageCollectionQueue) {
+    SoftEntry(Object key, Object value, ReferenceQueue<Object> garbageCollectionQueue) {
       super(value, garbageCollectionQueue);
       this.key = key;
     }

File: src/main/java/org/apache/ibatis/mapping/Discriminator.java
Patch:
@@ -28,7 +28,7 @@ public class Discriminator {
   private ResultMapping resultMapping;
   private Map<String, String> discriminatorMap;
 
-  private Discriminator() {
+  Discriminator() {
   }
 
   public static class Builder {

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java
Patch:
@@ -255,11 +255,10 @@ public Object run() throws Exception {
       }
 
       if (!(configurationObject instanceof Configuration)) {
-        final boolean isNull = (configurationObject == null);
         throw new ExecutorException("Cannot get Configuration as factory method ["
                 + this.configurationFactory + "]#["
                 + FACTORY_METHOD + "] didn't return [" + Configuration.class + "] but ["
-                + (isNull ? "null" : configurationObject.getClass()) + "].");
+                + (configurationObject == null ? "null" : configurationObject.getClass()) + "].");
       }
 
       return Configuration.class.cast(configurationObject);

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -504,7 +504,7 @@ private String nestedSelectId(Result result) {
   }
 
   private boolean isLazy(Result result) {
-    Boolean isLazy = configuration.isLazyLoadingEnabled();
+    boolean isLazy = configuration.isLazyLoadingEnabled();
     if (result.one().select().length() > 0 && FetchType.DEFAULT != result.one().fetchType()) {
       isLazy = (result.one().fetchType() == FetchType.LAZY);
     } else if (result.many().select().length() > 0 && FetchType.DEFAULT != result.many().fetchType()) {

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -188,8 +188,8 @@ public CacheKey createCacheKey(MappedStatement ms, Object parameterObject, RowBo
     }
     CacheKey cacheKey = new CacheKey();
     cacheKey.update(ms.getId());
-    cacheKey.update(rowBounds.getOffset());
-    cacheKey.update(rowBounds.getLimit());
+    cacheKey.update(Integer.valueOf(rowBounds.getOffset()));
+    cacheKey.update(Integer.valueOf(rowBounds.getLimit()));
     cacheKey.update(boundSql.getSql());
     List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();
     TypeHandlerRegistry typeHandlerRegistry = ms.getConfiguration().getTypeHandlerRegistry();

File: src/main/java/org/apache/ibatis/binding/MapperRegistry.java
Patch:
@@ -43,8 +43,9 @@ public MapperRegistry(Configuration config) {
   @SuppressWarnings("unchecked")
   public <T> T getMapper(Class<T> type, SqlSession sqlSession) {
     final MapperProxyFactory<T> mapperProxyFactory = (MapperProxyFactory<T>) knownMappers.get(type);
-    if (mapperProxyFactory == null)
+    if (mapperProxyFactory == null) {
       throw new BindingException("Type " + type + " is not known to the MapperRegistry.");
+    }
     try {
       return mapperProxyFactory.newInstance(sqlSession);
     } catch (Exception e) {

File: src/main/java/org/apache/ibatis/mapping/CacheBuilder.java
Patch:
@@ -85,7 +85,8 @@ public Cache build() {
     setDefaultImplementations();
     Cache cache = newBaseCacheInstance(implementation, id);
     setCacheProperties(cache);
-    if (PerpetualCache.class.equals(cache.getClass())) { // issue #352, do not apply decorators to custom caches
+    // issue #352, do not apply decorators to custom caches
+    if (PerpetualCache.class.equals(cache.getClass())) {
       for (Class<? extends Cache> decorator : decorators) {
         cache = newCacheDecoratorInstance(decorator, cache);
         setCacheProperties(cache);
@@ -100,7 +101,7 @@ public Cache build() {
   private void setDefaultImplementations() {
     if (implementation == null) {
       implementation = PerpetualCache.class;
-      if (decorators.size() == 0) {
+      if (decorators.isEmpty()) {
         decorators.add(LruCache.class);
       }
     }

File: src/main/java/org/apache/ibatis/mapping/Discriminator.java
Patch:
@@ -42,7 +42,7 @@ public Builder(Configuration configuration, ResultMapping resultMapping, Map<Str
     public Discriminator build() {
       assert discriminator.resultMapping != null;
       assert discriminator.discriminatorMap != null;
-      assert discriminator.discriminatorMap.size() > 0;
+      assert !discriminator.discriminatorMap.isEmpty();
       //lock down map
       discriminator.discriminatorMap = Collections.unmodifiableMap(discriminator.discriminatorMap);
       return discriminator;

File: src/main/java/org/apache/ibatis/mapping/MappedStatement.java
Patch:
@@ -279,7 +279,7 @@ public String[] getResulSets() {
   public BoundSql getBoundSql(Object parameterObject) {
     BoundSql boundSql = sqlSource.getBoundSql(parameterObject);
     List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();
-    if (parameterMappings == null || parameterMappings.size() <= 0) {
+    if (parameterMappings == null || parameterMappings.isEmpty()) {
       boundSql = new BoundSql(configuration, boundSql.getSql(), parameterMap.getParameterMappings(), parameterObject);
     }
 

File: src/main/java/org/apache/ibatis/mapping/ResultMapping.java
Patch:
@@ -46,7 +46,7 @@ public class ResultMapping {
   private String foreignColumn;
   private boolean lazy;
 
-  private ResultMapping() {
+  ResultMapping() {
   }
 
   public static class Builder {
@@ -151,7 +151,7 @@ private void validate() {
         throw new IllegalStateException("No typehandler found for property " + resultMapping.property);
       }
       // Issue #4 and GH #39: column is optional only in nested resultmaps but not in the rest
-      if (resultMapping.nestedResultMapId == null && resultMapping.column == null && resultMapping.composites.size() == 0) {
+      if (resultMapping.nestedResultMapId == null && resultMapping.column == null && resultMapping.composites.isEmpty()) {
         throw new IllegalStateException("Mapping is missing column attribute for property " + resultMapping.property);
       }
       if (resultMapping.getResultSet() != null) {

File: src/main/java/org/apache/ibatis/parsing/XNode.java
Patch:
@@ -326,7 +326,7 @@ public String toString() {
       builder.append("\"");
     }
     List<XNode> children = getChildren();
-    if (children.size() > 0) {
+    if (!children.isEmpty()) {
       builder.append(">\n");
       for (XNode node : children) {
         builder.append(node.toString());

File: src/main/java/org/apache/ibatis/binding/MapperProxy.java
Patch:
@@ -40,6 +40,7 @@ public MapperProxy(SqlSession sqlSession, Class<T> mapperInterface, Map<Method,
     this.methodCache = methodCache;
   }
 
+  @Override
   public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
     if (Object.class.equals(method.getDeclaringClass())) {
       try {

File: src/main/java/org/apache/ibatis/scripting/xmltags/XMLLanguageDriver.java
Patch:
@@ -15,8 +15,6 @@
  */
 package org.apache.ibatis.scripting.xmltags;
 
-import java.util.regex.Pattern;
-
 import org.apache.ibatis.builder.xml.XMLMapperEntityResolver;
 import org.apache.ibatis.executor.parameter.ParameterHandler;
 import org.apache.ibatis.mapping.BoundSql;
@@ -35,15 +33,18 @@
  */
 public class XMLLanguageDriver implements LanguageDriver {
 
+  @Override
   public ParameterHandler createParameterHandler(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql) {
     return new DefaultParameterHandler(mappedStatement, parameterObject, boundSql);
   }
 
+  @Override
   public SqlSource createSqlSource(Configuration configuration, XNode script, Class<?> parameterType) {
     XMLScriptBuilder builder = new XMLScriptBuilder(configuration, script, parameterType);
     return builder.parseScriptNode();
   }
 
+  @Override
   public SqlSource createSqlSource(Configuration configuration, String script, Class<?> parameterType) {
     if (script.startsWith("<script>")) { // issue #3
       XPathParser parser = new XPathParser(script, false, configuration.getVariables(), new XMLMapperEntityResolver());

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -217,8 +217,6 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setLogPrefix(props.getProperty("logPrefix"));
       configuration.setLogImpl(resolveClass(props.getProperty("logImpl")));
       configuration.setConfigurationFactory(resolveClass(props.getProperty("configurationFactory")));
-      configuration.setInjectionFilterEnabled(booleanValueOf(props.getProperty("injectionFilterEnabled"), false));
-      configuration.setInjectionFilter(parseExpression(props.getProperty("injectionFilter"), "^[a-zA-Z0-9._]*$"));
     }
   }
   

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.Set;
 
 import org.apache.ibatis.cache.CacheKey;
+import org.apache.ibatis.executor.ErrorContext;
 import org.apache.ibatis.executor.Executor;
 import org.apache.ibatis.executor.ExecutorException;
 import org.apache.ibatis.executor.loader.ResultLoader;
@@ -138,6 +139,8 @@ private void handleRefCursorOutputParameter(ResultSet rs, ParameterMapping param
   //
 
   public List<Object> handleResultSets(Statement stmt) throws SQLException {
+    ErrorContext.instance().activity("handling results").object(mappedStatement.getId());
+    
     final List<Object> multipleResults = new ArrayList<Object>();
 
     int resultSetCount = 0;

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -217,9 +217,11 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setLogPrefix(props.getProperty("logPrefix"));
       configuration.setLogImpl(resolveClass(props.getProperty("logImpl")));
       configuration.setConfigurationFactory(resolveClass(props.getProperty("configurationFactory")));
+      configuration.setInjectionFilterEnabled(booleanValueOf(props.getProperty("injectionFilterEnabled"), false));
+      configuration.setInjectionFilter(parseExpression(props.getProperty("injectionFilter"), "^[a-zA-Z0-9._]*$"));
     }
   }
-
+  
   private void environmentsElement(XNode context) throws Exception {
     if (context != null) {
       if (environment == null) {

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -123,7 +123,9 @@ public void parse() {
       Method[] methods = type.getMethods();
       for (Method method : methods) {
         try {
-          parseStatement(method);
+          if (!method.isBridge()) { // issue #237
+            parseStatement(method);
+          }
         } catch (IncompleteElementException e) {
           configuration.addIncompleteMethod(new MethodResolver(this, method));
         }

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -299,6 +299,9 @@ public ProxyFactory getProxyFactory() {
   }
 
   public void setProxyFactory(ProxyFactory proxyFactory) {
+    if (proxyFactory == null) {
+      proxyFactory = new JavassistProxyFactory();
+    }
     this.proxyFactory = proxyFactory;
   }
 

File: src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java
Patch:
@@ -24,9 +24,9 @@
 import java.util.List;
 import java.util.Map;
 
-import javax.sql.DataSource;
+import javassist.util.proxy.Proxy;
 
-import net.sf.cglib.proxy.Factory;
+import javax.sql.DataSource;
 
 import org.apache.ibatis.BaseDataTest;
 import org.apache.ibatis.mapping.MappedStatement;
@@ -341,7 +341,7 @@ public void shouldFetchPostsForBlog() throws Exception {
       List<Post> posts = executor.query(selectPosts, 1, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);
       executor.flushStatements();
       assertEquals(2, posts.size());
-      assertTrue(posts.get(1) instanceof Factory);
+      assertTrue(posts.get(1) instanceof Proxy);
       assertNotNull(posts.get(1).getBlog());
       assertEquals(1, posts.get(1).getBlog().getId());
       executor.rollback(true);

File: src/test/java/org/apache/ibatis/session/SqlSessionTest.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.List;
 import java.util.Map;
 
-import net.sf.cglib.proxy.Factory;
+import javassist.util.proxy.Proxy;
 
 import org.apache.ibatis.BaseDataTest;
 import org.apache.ibatis.binding.BindingException;
@@ -394,7 +394,7 @@ public void shouldSelectBlogWithPostsAndAuthorUsingSubSelectsLazily() throws Exc
     SqlSession session = sqlMapper.openSession();
     try {
       Blog blog = session.selectOne("domain.blog.mappers.BlogMapper.selectBlogWithPostsUsingSubSelectLazily", 1);
-      Assert.assertTrue(blog instanceof Factory);
+      Assert.assertTrue(blog instanceof Proxy);
       assertEquals("Jim Business", blog.getTitle());
       assertEquals(2, blog.getPosts().size());
       assertEquals("Corn nuts", blog.getPosts().get(0).getSubject());

File: src/main/java/org/apache/ibatis/scripting/xmltags/ForEachSqlNode.java
Patch:
@@ -52,6 +52,9 @@ public ForEachSqlNode(Configuration configuration, SqlNode contents, String coll
   public boolean apply(DynamicContext context) {
     Map<String, Object> bindings = context.getBindings();
     final Iterable<?> iterable = evaluator.evaluateIterable(collectionExpression, bindings);
+    if (!iterable.iterator().hasNext()) {
+      return true;
+    }
     boolean first = true;
     applyOpen(context);
     int i = 0;

File: src/main/java/org/apache/ibatis/parsing/GenericTokenParser.java
Patch:
@@ -39,7 +39,7 @@ public String parse(String text) {
       while (start > -1) {
         if (start > 0 && src[start - 1] == '\\') {
           // the variable is escaped. remove the backslash.
-          builder.append(src, offset, start - 1).append(openToken);
+          builder.append(src, offset, start - offset - 1).append(openToken);
           offset = start + openToken.length();
         } else {
           int end = text.indexOf(closeToken, start);

File: src/test/java/org/apache/ibatis/parsing/GenericTokenParserTest.java
Patch:
@@ -73,6 +73,8 @@ public void shallNotInterpolateSkippedVaiables() {
 
     assertEquals("${skipped} variable", parser.parse("\\${skipped} variable"));
     assertEquals("This is a ${skipped} variable", parser.parse("This is a \\${skipped} variable"));
+    assertEquals("null ${skipped} variable", parser.parse("${skipped} \\${skipped} variable"));
+    assertEquals("The null is ${skipped} variable", parser.parse("The ${skipped} is \\${skipped} variable"));
   }
 
   @Test(timeout = 1000)

File: src/main/java/org/apache/ibatis/scripting/xmltags/OgnlCache.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2012 the original author or authors.
+ *    Copyright 2009-2014 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -31,11 +31,11 @@
 import org.apache.ibatis.builder.BuilderException;
 
 /**
- *  * Caches OGNL parsed expressions.
+ * Caches OGNL parsed expressions.
  *  
  * @see http://code.google.com/p/mybatis/issues/detail?id=342
  *
- * @author Clinton Begin
+ * @author Eduardo Macarron
  */
 public class OgnlCache {
 

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -188,6 +188,7 @@ public CacheKey createCacheKey(MappedStatement ms, Object parameterObject, RowBo
         cacheKey.update(value);
       }
     }
+    if (configuration.getEnvironment() != null) cacheKey.update(configuration.getEnvironment().getId()); //issue #176
     return cacheKey;
   }    
 

File: src/test/java/org/apache/ibatis/type/TypeHandlerRegistryTest.java
Patch:
@@ -122,7 +122,6 @@ public List<URI> getNullableResult( CallableStatement cs, int columnIndex )
     assertSame(fakeHandler, typeHandlerRegistry.getTypeHandler(new TypeReference<List<URI>>(){}));
   }
 
-  @Ignore("see https://github.com/mybatis/mybatis-3/issues/165")
   @Test
   public void shouldBindHandlersToWrapersAndPrimitivesIndividually() {
     typeHandlerRegistry.register(Integer.class, DateTypeHandler.class);

File: src/main/java/org/apache/ibatis/mapping/CacheBuilder.java
Patch:
@@ -91,6 +91,8 @@ public Cache build() {
         setCacheProperties(cache);
       }
       cache = setStandardDecorators(cache);
+    } else if (!LoggingCache.class.isAssignableFrom(cache.getClass())) {
+      cache = new LoggingCache(cache);
     }
     return cache;
   }

File: src/main/java/org/apache/ibatis/annotations/Many.java
Patch:
@@ -30,6 +30,6 @@
 public @interface Many {
   String select() default "";
   
-  FetchType lazy() default FetchType.DEFAULT;
+  FetchType fetchType() default FetchType.DEFAULT;
   
 }

File: src/main/java/org/apache/ibatis/annotations/One.java
Patch:
@@ -30,6 +30,6 @@
 public @interface One {
   String select() default "";
   
-  FetchType lazy() default FetchType.DEFAULT;
+  FetchType fetchType() default FetchType.DEFAULT;
 
 }

File: src/main/java/org/apache/ibatis/mapping/CacheBuilder.java
Patch:
@@ -23,8 +23,8 @@
 
 import org.apache.ibatis.cache.Cache;
 import org.apache.ibatis.cache.CacheException;
-import org.apache.ibatis.cache.decorators.FifoCache;
 import org.apache.ibatis.cache.decorators.LoggingCache;
+import org.apache.ibatis.cache.decorators.LruCache;
 import org.apache.ibatis.cache.decorators.ScheduledCache;
 import org.apache.ibatis.cache.decorators.SerializedCache;
 import org.apache.ibatis.cache.decorators.SynchronizedCache;
@@ -99,7 +99,7 @@ private void setDefaultImplementations() {
     if (implementation == null) {
       implementation = PerpetualCache.class;
       if (decorators.size() == 0) {
-        decorators.add(FifoCache.class);
+        decorators.add(LruCache.class);
       }
     }
   }

File: src/main/java/org/apache/ibatis/annotations/SelectKey.java
Patch:
@@ -29,6 +29,8 @@
 
   String keyProperty();
 
+  String keyColumn() default "";
+
   boolean before();
 
   Class<?> resultType();

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -257,7 +257,7 @@ void parseStatement(Method method) {
       KeyGenerator keyGenerator;
       String keyProperty = "id";
       String keyColumn = null;
-      if (SqlCommandType.INSERT.equals(sqlCommandType)) {
+      if (SqlCommandType.INSERT.equals(sqlCommandType) || SqlCommandType.UPDATE.equals(sqlCommandType)) {
         // first check for SelectKey annotation - that overrides everything else
         SelectKey selectKey = method.getAnnotation(SelectKey.class);
         if (selectKey != null) {
@@ -564,6 +564,7 @@ private KeyGenerator handleSelectKeyAnnotation(SelectKey selectKeyAnnotation, St
     Class<?> resultTypeClass = selectKeyAnnotation.resultType();
     StatementType statementType = selectKeyAnnotation.statementType();
     String keyProperty = selectKeyAnnotation.keyProperty();
+    String keyColumn = selectKeyAnnotation.keyColumn();
     boolean executeBefore = selectKeyAnnotation.before();
 
     // defaults
@@ -581,7 +582,7 @@ private KeyGenerator handleSelectKeyAnnotation(SelectKey selectKeyAnnotation, St
 
     assistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType, fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass, resultSetTypeEnum,
         flushCache, useCache, false,
-        keyGenerator, keyProperty, null, null, languageDriver, null);
+        keyGenerator, keyProperty, keyColumn, null, languageDriver, null);
 
     id = assistant.applyCurrentNamespace(id, false);
 

File: src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java
Patch:
@@ -131,6 +131,7 @@ private void parseSelectKeyNode(String id, XNode nodeToHandle, Class<?> paramete
     Class<?> resultTypeClass = resolveClass(resultType);
     StatementType statementType = StatementType.valueOf(nodeToHandle.getStringAttribute("statementType", StatementType.PREPARED.toString()));
     String keyProperty = nodeToHandle.getStringAttribute("keyProperty");
+    String keyColumn = nodeToHandle.getStringAttribute("keyColumn");
     boolean executeBefore = "BEFORE".equals(nodeToHandle.getStringAttribute("order", "AFTER"));
 
     //defaults
@@ -150,7 +151,7 @@ private void parseSelectKeyNode(String id, XNode nodeToHandle, Class<?> paramete
     builderAssistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,
         fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,
         resultSetTypeEnum, flushCache, useCache, resultOrdered,
-        keyGenerator, keyProperty, null, databaseId, langDriver, null);
+        keyGenerator, keyProperty, keyColumn, databaseId, langDriver, null);
 
     id = builderAssistant.applyCurrentNamespace(id, false);
 

File: src/main/java/org/apache/ibatis/scripting/defaults/DefaultParameterHandler.java
Patch:
@@ -56,7 +56,6 @@ public void setParameters(PreparedStatement ps) throws SQLException {
     ErrorContext.instance().activity("setting parameters").object(mappedStatement.getParameterMap().getId());
     List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();
     if (parameterMappings != null) {
-      MetaObject metaObject = parameterObject == null ? null : configuration.newMetaObject(parameterObject);
       for (int i = 0; i < parameterMappings.size(); i++) {
         ParameterMapping parameterMapping = parameterMappings.get(i);
         if (parameterMapping.getMode() != ParameterMode.OUT) {
@@ -69,7 +68,8 @@ public void setParameters(PreparedStatement ps) throws SQLException {
           } else if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {
             value = parameterObject;
           } else {
-            value = metaObject == null ? null : metaObject.getValue(propertyName);
+            MetaObject metaObject = configuration.newMetaObject(parameterObject);
+            value = metaObject.getValue(propertyName);
           }
           TypeHandler typeHandler = parameterMapping.getTypeHandler();
           JdbcType jdbcType = parameterMapping.getJdbcType();

File: src/main/java/org/apache/ibatis/cache/decorators/LoggingCache.java
Patch:
@@ -23,14 +23,14 @@
 
 public class LoggingCache implements Cache {
 
-  private static final Log log = LogFactory.getLog(LoggingCache.class); 
-
+  private Log log;  
   private Cache delegate;
   protected int requests = 0;
   protected int hits = 0;
 
   public LoggingCache(Cache delegate) {
     this.delegate = delegate;
+    this.log = LogFactory.getLog(getId());
   }
 
   @Override

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -364,14 +364,14 @@ private ResultMapping buildResultMappingFromContext(XNode context, Class<?> resu
     String typeHandler = context.getStringAttribute("typeHandler");
     String resulSet = context.getStringAttribute("resultSet");
     String foreignColumn = context.getStringAttribute("foreignColumn");
-    boolean lazy = context.getBooleanAttribute("lazy", configuration.isLazyLoadingEnabled());
+    boolean lazy = "lazy".equals(context.getStringAttribute("fetchType", configuration.isLazyLoadingEnabled() ? "lazy" : "eager"));
     Class<?> javaTypeClass = resolveClass(javaType);
     @SuppressWarnings("unchecked")
     Class<? extends TypeHandler<?>> typeHandlerClass = (Class<? extends TypeHandler<?>>) resolveClass(typeHandler);
     JdbcType jdbcTypeEnum = resolveJdbcType(jdbcType);
     return builderAssistant.buildResultMapping(resultType, property, column, javaTypeClass, jdbcTypeEnum, nestedSelect, nestedResultMap, notNullColumn, columnPrefix, typeHandlerClass, flags, resulSet, foreignColumn, lazy);
   }
-
+  
   private String processNestedResultMappings(XNode context, List<ResultMapping> resultMappings) throws Exception {
     if ("association".equals(context.getName())
         || "collection".equals(context.getName())

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.ibatis.executor.loader.ProxyFactory;
 import org.apache.ibatis.executor.loader.ResultLoader;
 import org.apache.ibatis.executor.loader.ResultLoaderMap;
+import org.apache.ibatis.executor.loader.cglib.CglibProxyFactory;
 import org.apache.ibatis.executor.parameter.ParameterHandler;
 import org.apache.ibatis.executor.result.DefaultResultContext;
 import org.apache.ibatis.executor.result.DefaultResultHandler;
@@ -94,7 +95,7 @@ public DefaultResultSetHandler(Executor executor, MappedStatement mappedStatemen
     this.typeHandlerRegistry = configuration.getTypeHandlerRegistry();
     this.objectFactory = configuration.getObjectFactory();
     this.resultHandler = resultHandler;
-    this.proxyFactory = configuration.getProxyFactory();
+    this.proxyFactory = configuration.getProxyFactory() == null ? new CglibProxyFactory() : configuration.getProxyFactory();
   }
 
   //

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -292,9 +292,6 @@ public void setLazyLoadingEnabled(boolean lazyLoadingEnabled) {
   }
 
   public ProxyFactory getProxyFactory() {
-    if (proxyFactory == null) {
-      proxyFactory = new CglibProxyFactory();
-    }
     return proxyFactory;
   }
 

File: src/main/java/org/apache/ibatis/annotations/Many.java
Patch:
@@ -20,13 +20,13 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apache.ibatis.mapping.Loading;
+import org.apache.ibatis.mapping.FetchType;
 
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)
 public @interface Many {
   String select() default "";
   
-  Loading lazy() default Loading.DEFAULT;
+  FetchType lazy() default FetchType.DEFAULT;
   
 }

File: src/main/java/org/apache/ibatis/annotations/One.java
Patch:
@@ -20,13 +20,13 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.apache.ibatis.mapping.Loading;
+import org.apache.ibatis.mapping.FetchType;
 
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)
 public @interface One {
   String select() default "";
   
-  Loading lazy() default Loading.DEFAULT;
+  FetchType lazy() default FetchType.DEFAULT;
 
 }

File: src/main/java/org/apache/ibatis/mapping/FetchType.java
Patch:
@@ -15,6 +15,6 @@
  */
 package org.apache.ibatis.mapping;
 
-public enum Loading {
+public enum FetchType {
   LAZY, EAGER, DEFAULT
 }

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -364,11 +364,12 @@ private ResultMapping buildResultMappingFromContext(XNode context, Class<?> resu
     String typeHandler = context.getStringAttribute("typeHandler");
     String resulSet = context.getStringAttribute("resultSet");
     String foreignColumn = context.getStringAttribute("foreignColumn");
+    boolean lazy = context.getBooleanAttribute("lazy", configuration.isLazyLoadingEnabled());
     Class<?> javaTypeClass = resolveClass(javaType);
     @SuppressWarnings("unchecked")
     Class<? extends TypeHandler<?>> typeHandlerClass = (Class<? extends TypeHandler<?>>) resolveClass(typeHandler);
     JdbcType jdbcTypeEnum = resolveJdbcType(jdbcType);
-    return builderAssistant.buildResultMapping(resultType, property, column, javaTypeClass, jdbcTypeEnum, nestedSelect, nestedResultMap, notNullColumn, columnPrefix, typeHandlerClass, flags, resulSet, foreignColumn);
+    return builderAssistant.buildResultMapping(resultType, property, column, javaTypeClass, jdbcTypeEnum, nestedSelect, nestedResultMap, notNullColumn, columnPrefix, typeHandlerClass, flags, resulSet, foreignColumn, lazy);
   }
 
   private String processNestedResultMappings(XNode context, List<ResultMapping> resultMappings) throws Exception {

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -272,7 +272,7 @@ private <E> List<E> queryFromDatabase(MappedStatement ms, Object parameter, RowB
   protected Connection getConnection(Log statementLog) throws SQLException {
     Connection connection = transaction.getConnection();
     if (statementLog.isDebugEnabled()) {
-      return ConnectionLogger.newInstance(connection, statementLog);
+      return ConnectionLogger.newInstance(connection, statementLog, queryStack);
     } else {
       return connection;
     }

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -288,13 +288,13 @@ public boolean isLazyLoadingEnabled() {
   }
 
   public void setLazyLoadingEnabled(boolean lazyLoadingEnabled) {
-    if (lazyLoadingEnabled && this.proxyFactory == null) {
-      this.proxyFactory = new CglibProxyFactory();
-    }
     this.lazyLoadingEnabled = lazyLoadingEnabled;
   }
 
   public ProxyFactory getProxyFactory() {
+    if (proxyFactory == null) {
+      proxyFactory = new CglibProxyFactory();
+    }
     return proxyFactory;
   }
 

File: src/test/java/org/apache/ibatis/submitted/batch_keys/BatchKeysTest.java
Patch:
@@ -28,7 +28,7 @@
 import java.sql.Statement;
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import org.apache.ibatis.io.Resources;
 import org.apache.ibatis.jdbc.ScriptRunner;

File: src/test/java/org/apache/ibatis/submitted/blobtest/BlobTest.java
Patch:
@@ -15,8 +15,8 @@
  */
 package org.apache.ibatis.submitted.blobtest;
 
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 import java.io.Reader;
 import java.sql.Connection;

File: src/test/java/org/apache/ibatis/submitted/complex_column/ComplexColumnTest.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.Connection;
 import java.sql.DriverManager;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import org.apache.ibatis.io.Resources;
 import org.apache.ibatis.jdbc.ScriptRunner;

File: src/test/java/org/apache/ibatis/submitted/dml_return_types/DmlMapperReturnTypesTest.java
Patch:
@@ -28,7 +28,7 @@
 import java.io.Reader;
 import java.sql.Connection;
 
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 public class DmlMapperReturnTypesTest {
 

File: src/test/java/org/apache/ibatis/submitted/duplicate_resource_loaded/DuplicateResourceTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.apache.ibatis.submitted.duplicate_resource_loaded;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import org.apache.ibatis.BaseDataTest;
 import org.apache.ibatis.io.Resources;
 import org.apache.ibatis.session.SqlSession;

File: src/test/java/org/apache/ibatis/submitted/generictypes/GenericTypesTest.java
Patch:
@@ -21,7 +21,7 @@
 import java.sql.Connection;
 import java.sql.DriverManager;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import org.apache.ibatis.io.Resources;
 import org.apache.ibatis.jdbc.ScriptRunner;

File: src/test/java/org/apache/ibatis/submitted/parametrizedlist/ParametrizedListTest.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.List;
 import java.util.Map;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import org.apache.ibatis.io.Resources;
 import org.apache.ibatis.jdbc.ScriptRunner;

File: src/main/java/org/apache/ibatis/executor/BatchExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2012 the original author or authors.
+ *    Copyright 2009-2014 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -77,7 +77,7 @@ public <E> List<E> doQuery(MappedStatement ms, Object parameterObject, RowBounds
     try {
       flushStatements();
       Configuration configuration = ms.getConfiguration();
-      StatementHandler handler = configuration.newStatementHandler(this, ms, parameterObject, rowBounds, resultHandler, boundSql);
+      StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameterObject, rowBounds, resultHandler, boundSql);
       Connection connection = getConnection(ms.getStatementLog());
       stmt = handler.prepare(connection);
       handler.parameterize(stmt);

File: src/main/java/org/apache/ibatis/executor/Executor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2012 the original author or authors.
+ *    Copyright 2009-2014 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -55,5 +55,7 @@ public interface Executor {
   void close(boolean forceRollback);
 
   boolean isClosed();
+  
+  void setExecutorWrapper(Executor executor);
 
 }

File: src/main/java/org/apache/ibatis/executor/ReuseExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2012 the original author or authors.
+ *    Copyright 2009-2014 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -49,7 +49,7 @@ public int doUpdate(MappedStatement ms, Object parameter) throws SQLException {
 
   public <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException {
     Configuration configuration = ms.getConfiguration();
-    StatementHandler handler = configuration.newStatementHandler(this, ms, parameter, rowBounds, resultHandler, boundSql);
+    StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);
     Statement stmt = prepareStatement(handler, ms.getStatementLog());
     return handler.<E>query(stmt, resultHandler);
   }

File: src/main/java/org/apache/ibatis/executor/SimpleExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2012 the original author or authors.
+ *    Copyright 2009-2014 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -52,7 +52,7 @@ public <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBo
     Statement stmt = null;
     try {
       Configuration configuration = ms.getConfiguration();
-      StatementHandler handler = configuration.newStatementHandler(this, ms, parameter, rowBounds, resultHandler, boundSql);
+      StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);
       stmt = prepareStatement(handler, ms.getStatementLog());
       return handler.<E>query(stmt, resultHandler);
     } finally {

File: src/test/java/org/apache/ibatis/submitted/cache/CacheTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2012 the original author or authors.
+ *    Copyright 2009-2014 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -18,13 +18,12 @@
 import java.io.Reader;
 import java.sql.Connection;
 
-import junit.framework.Assert;
-
 import org.apache.ibatis.io.Resources;
 import org.apache.ibatis.jdbc.ScriptRunner;
 import org.apache.ibatis.session.SqlSession;
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 

File: src/main/java/org/apache/ibatis/executor/BatchExecutor.java
Patch:
@@ -25,6 +25,7 @@
 
 import org.apache.ibatis.executor.keygen.Jdbc3KeyGenerator;
 import org.apache.ibatis.executor.keygen.KeyGenerator;
+import org.apache.ibatis.executor.keygen.NoKeyGenerator;
 import org.apache.ibatis.executor.statement.StatementHandler;
 import org.apache.ibatis.mapping.BoundSql;
 import org.apache.ibatis.mapping.MappedStatement;
@@ -100,10 +101,10 @@ public List<BatchResult> doFlushStatements(boolean isRollback) throws SQLExcepti
             MappedStatement ms = batchResult.getMappedStatement();
             List<Object> parameterObjects = batchResult.getParameterObjects();
             KeyGenerator keyGenerator = ms.getKeyGenerator();
-            if (keyGenerator instanceof Jdbc3KeyGenerator) {
+            if (Jdbc3KeyGenerator.class.equals(keyGenerator.getClass())) {
               Jdbc3KeyGenerator jdbc3KeyGenerator = (Jdbc3KeyGenerator) keyGenerator;
               jdbc3KeyGenerator.processBatch(ms, stmt, parameterObjects);
-            } else {
+            } else if (!NoKeyGenerator.class.equals(keyGenerator.getClass())) { //issue #141
               for (Object parameter : parameterObjects) {
                 keyGenerator.processAfter(this, ms, stmt, parameter);
               }

File: src/main/java/org/apache/ibatis/cache/decorators/FifoCache.java
Patch:
@@ -26,7 +26,7 @@
 public class FifoCache implements Cache {
 
   private final Cache delegate;
-  private final LinkedList<Object> keyList;
+  private LinkedList<Object> keyList;
   private int size;
 
   public FifoCache(Cache delegate) {
@@ -62,7 +62,7 @@ public Object removeObject(Object key) {
 
   public void clear() {
     delegate.clear();
-    keyList.clear();
+    keyList = new LinkedList<Object>(); // see #138
   }
 
   public ReadWriteLock getReadWriteLock() {

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -56,6 +56,7 @@
 import org.apache.ibatis.annotations.Update;
 import org.apache.ibatis.annotations.UpdateProvider;
 import org.apache.ibatis.binding.BindingException;
+import org.apache.ibatis.binding.MapperMethod.ParamMap;
 import org.apache.ibatis.builder.BuilderException;
 import org.apache.ibatis.builder.IncompleteElementException;
 import org.apache.ibatis.builder.MapperBuilderAssistant;
@@ -338,7 +339,7 @@ private Class<?> getParameterType(Method method) {
         if (parameterType == null) {
           parameterType = parameterTypes[i];
         } else {
-          parameterType = Map.class;
+          parameterType = ParamMap.class; // issue #135
         }
       }
     }

File: src/main/java/org/apache/ibatis/scripting/xmltags/XMLLanguageDriver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2013 the original author or authors.
+ *    Copyright 2009-2014 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -19,6 +19,7 @@
 import org.apache.ibatis.mapping.BoundSql;
 import org.apache.ibatis.mapping.MappedStatement;
 import org.apache.ibatis.mapping.SqlSource;
+import org.apache.ibatis.parsing.PropertyParser;
 import org.apache.ibatis.parsing.XNode;
 import org.apache.ibatis.scripting.LanguageDriver;
 import org.apache.ibatis.scripting.defaults.DefaultParameterHandler;
@@ -41,6 +42,7 @@ public SqlSource createSqlSource(Configuration configuration, String script, Cla
       XMLScriptBuilder builder = new XMLScriptBuilder(configuration, script, parameterType);
       return builder.parseScriptNode();
     } else {
+      script = PropertyParser.parse(script, configuration.getVariables()); // issue #127
       TextSqlNode textSqlNode = new TextSqlNode(script);
       if (textSqlNode.isDynamic()) {
         return new DynamicSqlSource(configuration, textSqlNode);

File: src/main/java/org/apache/ibatis/scripting/xmltags/XMLScriptBuilder.java
Patch:
@@ -65,7 +65,7 @@ public SqlSource parseScriptNode() {
     if (isDynamic) {
       sqlSource = new DynamicSqlSource(configuration, rootSqlNode);
     } else {
-      sqlSource = new RawSqlSource(configuration, context, parameterType);
+      sqlSource = new RawSqlSource(configuration, rootSqlNode, parameterType);
     }
     return sqlSource;
   }

File: src/test/java/org/apache/ibatis/submitted/raw_sql_source/RawSqlSourceTest.java
Patch:
@@ -71,6 +71,8 @@ private void test(String statement, Class<? extends SqlSource> sqlSource) {
     SqlSession sqlSession = sqlSessionFactory.openSession();
     try {
       Assert.assertEquals(sqlSource, sqlSession.getConfiguration().getMappedStatement(statement).getSqlSource().getClass());
+      String sql = sqlSession.getConfiguration().getMappedStatement(statement).getSqlSource().getBoundSql('?').getSql();
+      Assert.assertEquals("select * from users where id = ?", sql);
       User user = sqlSession.selectOne(statement, 1);
       Assert.assertEquals("User1", user.getName());
     } finally {

File: src/main/java/org/apache/ibatis/scripting/defaults/RawSqlSource.java
Patch:
@@ -47,6 +47,7 @@ private static String getString(XNode script) {
       if (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) {
         String data = child.getStringBody("");
         contents.append(data);
+        contents.append(" "); // issue #128
       }
     }
     return contents.toString();

File: src/test/java/org/apache/ibatis/submitted/parent_reference_3level/BlogTest.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.junit.Assert;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 
 public class BlogTest {
@@ -99,7 +98,6 @@ public void testSelectBlogWithoutPosts() {
     }
   }
 
-  @Ignore
   @Test
   public void testSelectBlogWithPostsColumnPrefix() {
     SqlSession session = sqlSessionFactory.openSession();
@@ -120,7 +118,6 @@ public void testSelectBlogWithPostsColumnPrefix() {
     }
   }
 
-  @Ignore
   @Test
   public void testSelectBlogWithoutPostsColumnPrefix() {
     SqlSession session = sqlSessionFactory.openSession();

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -402,7 +402,7 @@ private boolean applyAutomaticMappings(ResultSetWrapper rsw, ResultMap resultMap
       if (columnPrefix != null && columnPrefix.length() > 0) {
         // When columnPrefix is specified,
         // ignore columns without the prefix.
-        if (columnName.startsWith(columnPrefix)) {
+        if (columnName.toUpperCase(Locale.ENGLISH).startsWith(columnPrefix)) {
           propertyName = columnName.substring(columnPrefix.length());
         } else {
           continue;
@@ -913,7 +913,7 @@ private void createRowKeyForUnmappedProperties(ResultMap resultMap, ResultSetWra
       if (columnPrefix != null && columnPrefix.length() > 0) {
         // When columnPrefix is specified,
         // ignore columns without the prefix.
-        if (column.startsWith(columnPrefix)) {
+        if (column.toUpperCase(Locale.ENGLISH).startsWith(columnPrefix)) {
           property = column.substring(columnPrefix.length());
         } else {
           continue;

File: src/test/java/org/apache/ibatis/binding/BoundBlogMapper.java
Patch:
@@ -111,6 +111,8 @@ public interface BoundBlogMapper {
 
   Blog selectBlogUsingConstructorWithResultMap(int i);
 
+  Blog selectBlogUsingConstructorWithResultMapAndProperties(int i);
+  
   Blog selectBlogUsingConstructorWithResultMapCollection(int i);
   
   Blog selectBlogByIdUsingConstructor(int id);

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -79,7 +79,7 @@ public void close(boolean forceRollback) {
       }
     } catch (SQLException e) {
       // Ignore.  There's nothing that can be done at this point.
-      log.debug("Unexpected exception on closing transaction.  Cause: " + e);
+      log.warn("Unexpected exception on closing transaction.  Cause: " + e);
     } finally {
       transaction = null;
       deferredLoads = null;

File: src/test/java/org/apache/ibatis/submitted/automapping/Mapper.java
Patch:
@@ -21,6 +21,8 @@ public interface Mapper {
 
   User getUser(Integer id);
 
+  User getUserWithPets(Integer id);
+
   List<Book> getBooks();
   
   Article getArticle();

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoader.java
Patch:
@@ -45,6 +45,7 @@ public class ResultLoader {
   protected final CacheKey cacheKey;
   protected final BoundSql boundSql;
   protected final ResultExtractor resultExtractor;
+  protected final Thread creatorThread;
   
   protected boolean loaded;
   protected Object resultObject;
@@ -59,6 +60,7 @@ public ResultLoader(Configuration config, Executor executor, MappedStatement map
     this.cacheKey = cacheKey;
     this.boundSql = boundSql;
     this.resultExtractor = new ResultExtractor(configuration, objectFactory);
+    this.creatorThread = Thread.currentThread();
   }
 
   public Object loadResult() throws SQLException {
@@ -69,7 +71,7 @@ public Object loadResult() throws SQLException {
 
   private <E> List<E> selectList() throws SQLException {
     Executor localExecutor = executor;
-    if (localExecutor.isClosed()) {
+    if (Thread.currentThread() != this.creatorThread || localExecutor.isClosed()) {
       localExecutor = newExecutor();
     }
     try {

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -160,6 +160,7 @@ public Configuration(Environment environment) {
   public Configuration() {
     typeAliasRegistry.registerAlias("JDBC", JdbcTransactionFactory.class);
     typeAliasRegistry.registerAlias("MANAGED", ManagedTransactionFactory.class);
+
     typeAliasRegistry.registerAlias("JNDI", JndiDataSourceFactory.class);
     typeAliasRegistry.registerAlias("POOLED", PooledDataSourceFactory.class);
     typeAliasRegistry.registerAlias("UNPOOLED", UnpooledDataSourceFactory.class);
@@ -170,7 +171,7 @@ public Configuration() {
     typeAliasRegistry.registerAlias("SOFT", SoftCache.class);
     typeAliasRegistry.registerAlias("WEAK", WeakCache.class);
 
-    typeAliasRegistry.registerAlias("VENDOR", VendorDatabaseIdProvider.class);
+    typeAliasRegistry.registerAlias("DB_VENDOR", VendorDatabaseIdProvider.class);
 
     typeAliasRegistry.registerAlias("XML", XMLLanguageDriver.class);
     typeAliasRegistry.registerAlias("RAW", RawLanguageDriver.class);

File: src/test/java/org/apache/ibatis/submitted/includes/IncludeTest.java
Patch:
@@ -37,8 +37,8 @@ public void testIncludes() throws Exception {
 
     final SqlSession sqlSession = sqlMapper.openSession();
     try {
-      final int result = sqlSession.selectOne("org.apache.ibatis.submitted.includes.mapper.selectWithProperty");
-      Assert.assertEquals(1, result);
+      final Integer result = sqlSession.selectOne("org.apache.ibatis.submitted.includes.mapper.selectWithProperty");
+      Assert.assertEquals(Integer.valueOf(1), result);
     } finally {
       sqlSession.close();
     }

File: src/main/java/org/apache/ibatis/executor/resultset/DefaultResultSetHandler.java
Patch:
@@ -369,7 +369,7 @@ private boolean applyPropertyMappings(ResultSetWrapper rsw, ResultMap resultMap,
           if (value != null || !metaObject.getSetterType(property).isPrimitive()) {
             metaObject.setValue(property, value);
           }
-          foundValues = (value != null) || foundValues;
+          foundValues = true;
         }
       }
     }

File: src/test/java/org/apache/ibatis/submitted/call_setters_on_nulls/Mapper.java
Patch:
@@ -24,5 +24,6 @@ public interface Mapper {
   User getUserUnmapped(Integer id);
   Map getUserInMap(Integer id);
   List<Map<String,Object>> getNameOnly();
+  List<Map<String,Object>> getNameOnlyMapped();
 
 }

File: src/test/java/org/apache/ibatis/submitted/call_setters_on_nulls/CallSettersOnNullsTest.java
Patch:
@@ -95,7 +95,7 @@ public void shouldCallNullOnMapForSingleColumn() {
     try {
       Mapper mapper = sqlSession.getMapper(Mapper.class);
       List<Map<String, Object>> oneColumns = mapper.getNameOnly();
-      Assert.assertNull(oneColumns.get(1));
+      Assert.assertNotNull(oneColumns.get(1));
     } finally {
       sqlSession.close();
     }

File: src/test/java/org/apache/ibatis/submitted/call_setters_on_nulls/Mapper.java
Patch:
@@ -15,12 +15,14 @@
  */
 package org.apache.ibatis.submitted.call_setters_on_nulls;
 
+import java.util.List;
 import java.util.Map;
 
 public interface Mapper {
 
   User getUserMapped(Integer id);
   User getUserUnmapped(Integer id);
   Map getUserInMap(Integer id);
+  List<Map<String,Object>> getNameOnly();
 
 }

File: src/main/java/org/apache/ibatis/reflection/wrapper/MapWrapper.java
Patch:
@@ -109,7 +109,7 @@ public boolean hasGetter(String name) {
       if (map.containsKey(prop.getIndexedName())) {
         MetaObject metaValue = metaObject.metaObjectForProperty(prop.getIndexedName());
         if (metaValue == SystemMetaObject.NULL_META_OBJECT) {
-          return map.containsKey(name);
+          return true;
         } else {
           return metaValue.hasGetter(prop.getChildren());
         }

File: src/test/java/org/apache/ibatis/submitted/foreach/Mapper.java
Patch:
@@ -23,4 +23,6 @@ public interface Mapper {
 
   int countByUserList(List<User> users);
 
+  int countByBestFriend(List<User> users);
+
 }

File: src/main/java/org/apache/ibatis/scripting/xmltags/WhereSqlNode.java
Patch:
@@ -20,7 +20,7 @@
 public class WhereSqlNode extends TrimSqlNode {
 
   public WhereSqlNode(Configuration configuration, SqlNode contents) {
-    super(configuration, contents, "WHERE", "AND |OR |AND\n|OR\n|AND\r|OR\r", null, null);
+    super(configuration, contents, "WHERE", "AND |OR |AND\n|OR\n|AND\r|OR\r|AND\t|OR\t", null, null);
   }
 
 

File: src/main/java/org/apache/ibatis/scripting/xmltags/ForEachSqlNode.java
Patch:
@@ -145,9 +145,9 @@ public String getSql() {
     public void appendSql(String sql) {
       GenericTokenParser parser = new GenericTokenParser("#{", "}", new TokenHandler() {
         public String handleToken(String content) {
-          String newContent = content.replaceFirst(item, itemizeItem(item, index));
+          String newContent = content.replaceFirst("^\\s*" + item + "(?![^.,:\\s])", itemizeItem(item, index));
           if (itemIndex != null && newContent.equals(content)) {
-            newContent = content.replaceFirst(itemIndex, itemizeItem(itemIndex, index));
+            newContent = content.replaceFirst("^\\s*" + itemIndex + "(?![^.,:\\s])", itemizeItem(itemIndex, index));
           }
           return new StringBuilder("#{").append(newContent).append("}").toString();
         }

File: src/test/java/org/apache/ibatis/submitted/ognlstatic/OgnlStaticTest.java
Patch:
@@ -63,14 +63,14 @@ public void shouldGetAUserStatic() {
     try {
       Mapper mapper = sqlSession.getMapper(Mapper.class);
       User user = mapper.getUserStatic(1);
+      Assert.assertNotNull(user);
       Assert.assertEquals("User1", user.getName());
     } finally {
       sqlSession.close();
     }
   }
 
-  @Ignore
-  @Test // see issue #61
+  @Test // see issue #61 (gh)
   public void shouldGetAUserWithIfNode() {
     SqlSession sqlSession = sqlSessionFactory.openSession();
     try {

File: src/test/java/org/apache/ibatis/submitted/ognlstatic/Mapper.java
Patch:
@@ -17,6 +17,7 @@
 
 public interface Mapper {
 
-  User getUser(Integer id);
+  User getUserStatic(Integer id);
+  User getUserIfNode(String id);
 
 }

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -103,6 +103,9 @@ public XNode getSqlFragment(String refid) {
   private void configurationElement(XNode context) {
     try {
       String namespace = context.getStringAttribute("namespace");
+      if (namespace.equals("")) {
+    	  throw new BuilderException("Mapper's namespace cannot be empty");
+      }
       builderAssistant.setCurrentNamespace(namespace);
       cacheRefElement(context.evalNode("cache-ref"));
       cacheElement(context.evalNode("cache"));

File: src/main/java/org/apache/ibatis/annotations/ResultMap.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2011 The MyBatis Team
+ *    Copyright 2009-2013 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,5 +23,5 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)
 public @interface ResultMap {
-  String value();
+  String[] value();
 }

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoaderMap.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2012 The MyBatis Team
+ *    Copyright 2009-2013 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -162,8 +162,8 @@ private LoadPair(final String property, MetaObject metaResultObject, ResultLoade
     public void load() throws SQLException {
       /* These field should not be null unless the loadpair was serialized.
        * Yet in that case this method should not be called. */
-      assert this.metaResultObject != null : "metaResultObject is null";
-      assert this.resultLoader != null : "resultLoader is null";
+      if (this.metaResultObject == null) throw new IllegalArgumentException("metaResultObject is null");
+      if (this.resultLoader == null) throw new IllegalArgumentException("resultLoader is null");
 
       this.load(null);
     }

File: src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2012 The MyBatis Team
+ *    Copyright 2009-2013 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -17,7 +17,6 @@
 
 import java.lang.reflect.Method;
 import java.util.List;
-import java.util.Locale;
 import java.util.Map;
 import java.util.Properties;
 import java.util.Set;
@@ -27,7 +26,6 @@
 import net.sf.cglib.proxy.MethodInterceptor;
 import net.sf.cglib.proxy.MethodProxy;
 
-import org.apache.ibatis.executor.ExecutorException;
 import org.apache.ibatis.executor.loader.AbstractEnhancedDeserializationProxy;
 import org.apache.ibatis.executor.loader.AbstractSerialStateHolder;
 import org.apache.ibatis.executor.loader.ProxyFactory;

File: src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistSerialStateHolder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2012 The MyBatis Team
+ *    Copyright 2009-2013 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -17,7 +17,6 @@
 
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 
 import org.apache.ibatis.executor.loader.AbstractSerialStateHolder;
 import org.apache.ibatis.executor.loader.ResultLoaderMap;

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -45,9 +45,9 @@
 import org.apache.ibatis.executor.ReuseExecutor;
 import org.apache.ibatis.executor.SimpleExecutor;
 import org.apache.ibatis.executor.keygen.KeyGenerator;
-import org.apache.ibatis.executor.loader.CglibProxyFactory;
-import org.apache.ibatis.executor.loader.JavassistProxyFactory;
 import org.apache.ibatis.executor.loader.ProxyFactory;
+import org.apache.ibatis.executor.loader.cglib.CglibProxyFactory;
+import org.apache.ibatis.executor.loader.javassist.JavassistProxyFactory;
 import org.apache.ibatis.executor.parameter.ParameterHandler;
 import org.apache.ibatis.executor.resultset.FastResultSetHandler;
 import org.apache.ibatis.executor.resultset.NestedResultSetHandler;

File: src/main/java/org/apache/ibatis/executor/statement/CallableStatementHandler.java
Patch:
@@ -86,7 +86,7 @@ private void registerOutputParameters(CallableStatement cs) throws SQLException
       ParameterMapping parameterMapping = parameterMappings.get(i);
       if (parameterMapping.getMode() == ParameterMode.OUT || parameterMapping.getMode() == ParameterMode.INOUT) {
         if (null == parameterMapping.getJdbcType()) {
-          throw new ExecutorException("The JDBC Type must be specified for output parameterArray.  Paramter: " + parameterMapping.getProperty());
+          throw new ExecutorException("The JDBC Type must be specified for output parameter.  Parameter: " + parameterMapping.getProperty());
         } else {
           if (parameterMapping.getNumericScale() != null && (parameterMapping.getJdbcType() == JdbcType.NUMERIC || parameterMapping.getJdbcType() == JdbcType.DECIMAL)) {
             cs.registerOutParameter(i + 1, parameterMapping.getJdbcType().TYPE_CODE, parameterMapping.getNumericScale());

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -59,6 +59,7 @@
 import org.apache.ibatis.logging.commons.JakartaCommonsLoggingImpl;
 import org.apache.ibatis.logging.jdk14.Jdk14LoggingImpl;
 import org.apache.ibatis.logging.log4j.Log4jImpl;
+import org.apache.ibatis.logging.log4j2.Log4j2Impl;
 import org.apache.ibatis.logging.nologging.NoLoggingImpl;
 import org.apache.ibatis.logging.slf4j.Slf4jImpl;
 import org.apache.ibatis.logging.stdout.StdOutImpl;
@@ -171,6 +172,7 @@ public Configuration() {
     typeAliasRegistry.registerAlias("SLF4J", Slf4jImpl.class);
     typeAliasRegistry.registerAlias("COMMONS_LOGGING", JakartaCommonsLoggingImpl.class);
     typeAliasRegistry.registerAlias("LOG4J", Log4jImpl.class);
+    typeAliasRegistry.registerAlias("LOG4J2", Log4j2Impl.class);
     typeAliasRegistry.registerAlias("JDK_LOGGING", Jdk14LoggingImpl.class);
     typeAliasRegistry.registerAlias("STDOUT_LOGGING", StdOutImpl.class);
     typeAliasRegistry.registerAlias("NO_LOGGING", NoLoggingImpl.class);

File: src/main/java/org/apache/ibatis/transaction/jdbc/JdbcTransaction.java
Patch:
@@ -126,7 +126,7 @@ protected void resetAutoCommit() {
 
   protected void openConnection() throws SQLException {
     if (log.isDebugEnabled()) {
-      log.debug("Openning JDBC Connection");
+      log.debug("Opening JDBC Connection");
     }
     connection = dataSource.getConnection();
     if (level != null) {

File: src/main/java/org/apache/ibatis/transaction/managed/ManagedTransaction.java
Patch:
@@ -79,7 +79,7 @@ public void close() throws SQLException {
 
   protected void openConnection() throws SQLException {
     if (log.isDebugEnabled()) {
-      log.debug("Openning JDBC Connection");
+      log.debug("Opening JDBC Connection");
     }
     this.connection = this.dataSource.getConnection();
     if (this.level != null) {

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -541,7 +541,7 @@ private KeyGenerator handleSelectKeyAnnotation(SelectKey selectKeyAnnotation, St
     SqlCommandType sqlCommandType = SqlCommandType.SELECT;
 
     assistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType, fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass, resultSetTypeEnum,
-        flushCache, useCache, false, // TODO issue #577
+        flushCache, useCache, false,
         keyGenerator, keyProperty, null, null, languageDriver);
 
     id = assistant.applyCurrentNamespace(id, false);

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2012 The MyBatis Team
+ *    Copyright 2009-2013 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -75,6 +75,7 @@
 import org.apache.ibatis.mapping.StatementType;
 import org.apache.ibatis.scripting.LanguageDriver;
 import org.apache.ibatis.session.Configuration;
+import org.apache.ibatis.session.ResultHandler;
 import org.apache.ibatis.session.RowBounds;
 import org.apache.ibatis.type.JdbcType;
 import org.apache.ibatis.type.TypeHandler;
@@ -326,7 +327,7 @@ private Class<?> getParameterType(Method method) {
     Class<?> parameterType = null;
     Class<?>[] parameterTypes = method.getParameterTypes();
     for (int i = 0; i < parameterTypes.length; i++) {
-      if (!RowBounds.class.isAssignableFrom(parameterTypes[i])) {
+      if (!RowBounds.class.isAssignableFrom(parameterTypes[i]) && !ResultHandler.class.isAssignableFrom(parameterTypes[i])) {
         if (parameterType == null) {
           parameterType = parameterTypes[i];
         } else {

File: src/main/java/org/apache/ibatis/scripting/LanguageDriver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 MyBatis.org.
+ * Copyright 2012-2013 MyBatis.org.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -39,7 +39,7 @@ public interface LanguageDriver {
    * 
    * @param configuration The MyBatis configuration
    * @param script XNode parsed from a XML file
-   * @param parameterType input parameter type
+   * @param parameterType input parameter type got from a mapper method or specified in the parameterType xml attribute. Can be null.
    * @return
    */
   public SqlSource createSqlSource(Configuration configuration, XNode script, Class<?> parameterType);
@@ -49,7 +49,7 @@ public interface LanguageDriver {
    * 
    * @param configuration The MyBatis configuration
    * @param script The content of the annotation
-   * @param parameterType input parameter type
+   * @param parameterType input parameter type got from a mapper method or specified in the parameterType xml attribute. Can be null.
    * @return 
    */
   public SqlSource createSqlSource(Configuration configuration, String script, Class<?> parameterType);

File: src/test/java/org/apache/ibatis/submitted/foreach_map/ForEachMapTest.java
Patch:
@@ -103,8 +103,8 @@ public void shouldSubstituteIndexWithKey() throws Exception {
     MapParam mapParam = new MapParam();
     mapParam.getMap().put("col_a", 22);
     mapParam.getMap().put("col_b", 222);
-    int count = sqlSession.selectOne("sel_key_cols", mapParam);
-    Assert.assertEquals(1, count);
+    Integer count = sqlSession.selectOne("sel_key_cols", mapParam);
+    Assert.assertEquals(Integer.valueOf(1), count);
   }
 
   private SqlSession sqlSession;

File: src/main/java/org/apache/ibatis/scripting/xmltags/ForEachSqlNode.java
Patch:
@@ -70,7 +70,7 @@ public boolean apply(DynamicContext context) {
         applyIndex(context, mapEntry.getKey(), uniqueNumber);
         applyItem(context, mapEntry.getValue(), uniqueNumber);
       } else {
-        applyIndex(context, uniqueNumber, i);
+        applyIndex(context, i, uniqueNumber);
         applyItem(context, o, uniqueNumber);
       }
       contents.apply(new FilteredDynamicContext(configuration, context, index, item, uniqueNumber));
@@ -84,7 +84,7 @@ public boolean apply(DynamicContext context) {
 
   private void applyIndex(DynamicContext context, Object o, int i) {
     if (index != null) {
-      context.bind(index, i);
+      context.bind(index, o);
       context.bind(itemizeItem(index, i), o);
     }
   }

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -83,7 +83,7 @@ private XMLConfigBuilder(XPathParser parser, String environment, Properties prop
 
   public Configuration parse() {
     if (parsed) {
-      throw new BuilderException("Each MapperConfigParser can only be used once.");
+      throw new BuilderException("Each XMLConfigBuilder can only be used once.");
     }
     parsed = true;
     parseConfiguration(parser.evalNode("/configuration"));
@@ -208,6 +208,7 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setLocalCacheScope(LocalCacheScope.valueOf(props.getProperty("localCacheScope", "SESSION")));
       configuration.setJdbcTypeForNull(JdbcType.valueOf(props.getProperty("jdbcTypeForNull", "OTHER")));
       configuration.setLazyLoadTriggerMethods(stringSetValueOf(props.getProperty("lazyLoadTriggerMethods"), "equals,clone,hashCode,toString"));
+      configuration.setSafeResultHandlerEnabled(booleanValueOf(props.getProperty("safeResultHandlerEnabled"), true));
       configuration.setDefaultScriptingLanguage(resolveClass(props.getProperty("defaultScriptingLanguage")));
       configuration.setCallSettersOnNulls(booleanValueOf(props.getProperty("callSettersOnNulls"), false));
       configuration.setLogPrefix(props.getProperty("logPrefix"));

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -218,12 +218,10 @@ public void setDatabaseId(String databaseId) {
     this.databaseId = databaseId;
   }
 
-  @Deprecated
   public boolean isSafeResultHandlerEnabled() {
     return safeResultHandlerEnabled;
   }
 
-  @Deprecated // "Not needed as of the fix for issue #542"
   public void setSafeResultHandlerEnabled(boolean safeResultHandlerEnabled) {
     this.safeResultHandlerEnabled = safeResultHandlerEnabled;
   }

File: src/main/java/org/apache/ibatis/scripting/defaults/RawLanguageDriver.java
Patch:
@@ -30,11 +30,11 @@ public ParameterHandler createParameterHandler(MappedStatement mappedStatement,
   }
 
   public SqlSource createSqlSource(Configuration configuration, XNode script, Class<?> parameterType) {
-    return new RawSqlSource(configuration, script.getStringBody(""));
+    return new RawSqlSource(configuration, script.getStringBody(""), parameterType);
   }
 
   public SqlSource createSqlSource(Configuration configuration, String script, Class<?> parameterType) {
-    return new RawSqlSource(configuration, script);
+    return new RawSqlSource(configuration, script, parameterType);
   }
 
 }

File: src/main/java/org/apache/ibatis/type/TypeAliasRegistry.java
Patch:
@@ -123,8 +123,9 @@ public void registerAliases(String packageName, Class<?> superType){
     resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
     Set<Class<? extends Class<?>>> typeSet = resolverUtil.getClasses();
     for(Class<?> type : typeSet){
-      //Ignore inner classes and interfaces (including package-info.java)
-      if (!type.isAnonymousClass() && !type.isInterface()) {
+      // Ignore inner classes and interfaces (including package-info.java)
+      // Skip also inner classes. See issue #6
+      if (!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()) {
         registerAlias(type);
       }
     }

File: src/main/java/org/apache/ibatis/scripting/xmltags/ForEachSqlNode.java
Patch:
@@ -70,7 +70,7 @@ public boolean apply(DynamicContext context) {
         applyIndex(context, mapEntry.getKey(), uniqueNumber);
         applyItem(context, mapEntry.getValue(), uniqueNumber);
       } else {
-        applyIndex(context, i, uniqueNumber);
+        applyIndex(context, uniqueNumber, i);
         applyItem(context, o, uniqueNumber);
       }
       contents.apply(new FilteredDynamicContext(configuration, context, index, item, uniqueNumber));

File: src/main/java/org/apache/ibatis/executor/CachingExecutor.java
Patch:
@@ -144,7 +144,7 @@ public boolean isCached(MappedStatement ms, CacheKey key) {
     throw new UnsupportedOperationException("The CachingExecutor should not be used by result loaders and thus isCached() should never be called.");
   }
 
-  public void deferLoad(MappedStatement ms, MetaObject resultObject, String property, CacheKey key) {
+  public void deferLoad(MappedStatement ms, MetaObject resultObject, String property, CacheKey key, Class<?> targetType) {
     throw new UnsupportedOperationException("The CachingExecutor should not be used by result loaders and thus deferLoad() should never be called.");
   }
 

File: src/main/java/org/apache/ibatis/executor/Executor.java
Patch:
@@ -48,7 +48,7 @@ public interface Executor {
 
   void clearLocalCache();
 
-  void deferLoad(MappedStatement ms, MetaObject resultObject, String property, CacheKey key);
+  void deferLoad(MappedStatement ms, MetaObject resultObject, String property, CacheKey key, Class<?> targetType);
 
   Transaction getTransaction();
 

File: src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java
Patch:
@@ -476,7 +476,7 @@ protected Object getNestedQueryMappingValue(ResultSet rs, MetaObject metaResultO
       if (nestedQueryCacheObject != null && nestedQueryCacheObject instanceof List) {
         value = resultExtractor.extractObjectFromList((List<Object>)nestedQueryCacheObject, targetType);
       } else if (executor.isCached(nestedQuery, key)) {
-        executor.deferLoad(nestedQuery, metaResultObject, property, key);
+        executor.deferLoad(nestedQuery, metaResultObject, property, key, targetType);
       } else {
         final ResultLoader resultLoader = new ResultLoader(configuration, executor, nestedQuery, nestedQueryParameterObject, targetType, key, nestedBoundSql);
         if (configuration.isLazyLoadingEnabled()) {

File: src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java
Patch:
@@ -169,7 +169,7 @@ private boolean databaseIdMatchesCurrent(String id, String databaseId, String re
       // skip this statement if there is a previous one with a not null databaseId
       id = builderAssistant.applyCurrentNamespace(id, false);
       if (this.configuration.hasStatement(id, false)) {
-        MappedStatement previous = this.configuration.getMappedStatement(id);
+        MappedStatement previous = this.configuration.getMappedStatement(id, false); // issue #2
         if (previous.getDatabaseId() != null) {
           return false;
         }

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -220,6 +220,7 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setLazyLoadTriggerMethods(stringSetValueOf(props.getProperty("lazyLoadTriggerMethods"), "equals,clone,hashCode,toString"));
       configuration.setDefaultScriptingLanguage(resolveClass(props.getProperty("defaultScriptingLanguage")));
       configuration.setLogPrefix(props.getProperty("logPrefix"));
+      configuration.setLogImpl(resolveClass(props.getProperty("logImpl")));
       configuration.setCallSettersOnNulls(booleanValueOf(props.getProperty("callSettersOnNulls"), false));
     }
   }

File: src/test/java/org/apache/ibatis/submitted/associationtest/Mapper.java
Patch:
@@ -20,6 +20,7 @@
 public interface Mapper {
 
   List<Car> getCars();
-  List<Car> getCarsNonUnique();
+  List<Car> getCars2();
+  List<Car> getCars3();
 
 }

File: src/main/java/org/apache/ibatis/executor/resultset/NestedResultSetHandler.java
Patch:
@@ -157,8 +157,8 @@ private boolean applyNestedResultMappings(ResultSet rs, ResultMap resultMap, Met
           final boolean knownValue = objectCache.containsKey(combinedKey);
           final boolean isAncestor = ancestorCache.containsKey(absoluteKey);
           Object rowValue = getRowValue(rs, nestedResultMap, combinedKey, absoluteKey, columnPrefix, resultColumnCache);          
+          final Object collectionProperty = instantiateCollectionPropertyIfAppropriate(resultMapping, metaObject); // even if there is no data an empty collection is set
           if (!knownValue && rowValue != null && anyNotNullColumnHasValue(resultMapping, columnPrefix, rs)) {
-            final Object collectionProperty = instantiateCollectionPropertyIfAppropriate(resultMapping, metaObject);
             if (collectionProperty != null) {
               final MetaObject targetMetaObject = configuration.newMetaObject(collectionProperty);
               targetMetaObject.add(rowValue);

File: src/main/java/org/apache/ibatis/mapping/ResultFlag.java
Patch:
@@ -16,5 +16,5 @@
 package org.apache.ibatis.mapping;
 
 public enum ResultFlag {
-  ID, CONSTRUCTOR
+  ID, CONSTRUCTOR, COLLECTION, ASSOCIATION
 }

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -90,7 +90,7 @@ private Object rowCountResult(int rowCount) {
 
   private void executeWithResultHandler(SqlSession sqlSession, Object[] args) {
     MappedStatement ms = sqlSession.getConfiguration().getMappedStatement(command.getName());
-    if (Void.TYPE.equals(ms.getResultMaps().get(0).getType())) {
+    if (void.class.equals(ms.getResultMaps().get(0).getType())) {
       throw new BindingException("method " + command.getName() 
           + " needs either a @ResultMap annotation, a @ResultType annotation," 
           + " or a resultType attribute in XML so a ResultHandler can be used as a parameter.");
@@ -206,7 +206,7 @@ public static class MethodSignature {
 
     public MethodSignature(Configuration configuration, Method method) throws BindingException {
       this.returnType = method.getReturnType();
-      this.returnsVoid = this.returnType.equals(Void.TYPE);
+      this.returnsVoid = void.class.equals(this.returnType);
       this.returnsMany = (configuration.getObjectFactory().isCollection(this.returnType) || this.returnType.isArray());
       this.mapKey = getMapKey(method);
       this.returnsMap = (this.mapKey != null);

File: src/test/java/org/apache/ibatis/logging/jdbc/ResultSetLoggerTest.java
Patch:
@@ -47,7 +47,7 @@ public void setup(int type) throws SQLException {
     when(rs.getMetaData()).thenReturn(metaData);
     when(metaData.getColumnCount()).thenReturn(1);
     when(metaData.getColumnType(1)).thenReturn(type);
-    when(metaData.getColumnName(1)).thenReturn("ColumnName");
+    when(metaData.getColumnLabel(1)).thenReturn("ColumnName");
     when(rs.getString(1)).thenReturn("value");
     when(log.isTraceEnabled()).thenReturn(true);
     ResultSet resultSet = ResultSetLogger.newInstance(rs, log);

File: src/main/java/org/apache/ibatis/logging/jdbc/ResultSetLogger.java
Patch:
@@ -84,7 +84,7 @@ private void printColumnHeaders(ResultSetMetaData rsmd, int columnCount) throws
       if (BLOB_TYPES.contains(rsmd.getColumnType(i))) {
         blobColumns.add(i);
       }
-      String colname = rsmd.getColumnName(i);
+      String colname = rsmd.getColumnLabel(i);
       row.append(colname);
       if (i != columnCount) row.append(", ");
     }

File: src/main/java/org/apache/ibatis/logging/jdbc/ResultSetLogger.java
Patch:
@@ -37,7 +37,7 @@ public final class ResultSetLogger extends BaseJdbcLogger implements InvocationH
   private ResultSet rs;
   
   private static Set<Integer> BLOB_TYPES;
-  private static Set<Integer> BLOB_COLUMNS;
+  private Set<Integer> BLOB_COLUMNS;
   
   static {
     BLOB_TYPES = new HashSet<Integer>();
@@ -49,14 +49,14 @@ public final class ResultSetLogger extends BaseJdbcLogger implements InvocationH
     BLOB_TYPES.add(Types.LONGVARCHAR);
     BLOB_TYPES.add(Types.NCLOB);
     BLOB_TYPES.add(Types.VARBINARY);
-
-    BLOB_COLUMNS = new HashSet<Integer>();
 }
     
 
   private ResultSetLogger(ResultSet rs, Log statementLog) {
     super(statementLog);
     this.rs = rs;
+
+    BLOB_COLUMNS = new HashSet<Integer>();
   }
 
   public Object invoke(Object proxy, Method method, Object[] params) throws Throwable {

File: src/main/java/org/apache/ibatis/type/TypeAliasRegistry.java
Patch:
@@ -16,6 +16,7 @@
 package org.apache.ibatis.type;
 
 import java.math.BigDecimal;
+import java.math.BigInteger;
 import java.sql.ResultSet;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -76,11 +77,13 @@ public TypeAliasRegistry() {
     registerAlias("date", Date.class);
     registerAlias("decimal", BigDecimal.class);
     registerAlias("bigdecimal", BigDecimal.class);
+    registerAlias("biginteger", BigInteger.class);
     registerAlias("object", Object.class);
 
     registerAlias("date[]", Date[].class);
     registerAlias("decimal[]", BigDecimal[].class);
     registerAlias("bigdecimal[]", BigDecimal[].class);
+    registerAlias("biginteger[]", BigInteger[].class);
     registerAlias("object[]", Object[].class);
 
     registerAlias("map", Map.class);

File: src/main/java/org/apache/ibatis/type/TypeAliasRegistry.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 
@@ -97,7 +98,7 @@ public TypeAliasRegistry() {
   public <T> Class<T> resolveAlias(String string) {
     try {
       if (string == null) return null;
-      String key = string.toLowerCase();
+      String key = string.toLowerCase(Locale.ENGLISH); // issue #748
       Class<T> value;
       if (TYPE_ALIASES.containsKey(key)) {
         value = (Class<T>) TYPE_ALIASES.get(key);
@@ -137,7 +138,7 @@ public void registerAlias(Class<?> type) {
 
   public void registerAlias(String alias, Class<?> value) {
     if (alias == null) throw new TypeException("The parameter alias cannot be null");
-    String key = alias.toLowerCase();
+    String key = alias.toLowerCase(Locale.ENGLISH); // issue #748
     if (TYPE_ALIASES.containsKey(key) && TYPE_ALIASES.get(key) != null && !TYPE_ALIASES.get(key).equals(value)) {
       throw new TypeException("The alias '" + alias + "' is already mapped to the value '" + TYPE_ALIASES.get(key).getName() + "'.");
     }

File: src/main/java/org/apache/ibatis/builder/BaseBuilder.java
Patch:
@@ -108,9 +108,10 @@ protected TypeHandler<?> resolveTypeHandler(Class<?> javaType, String typeHandle
 
   protected TypeHandler<?> resolveTypeHandler(Class<?> javaType, Class<? extends TypeHandler<?>> typeHandlerType) {
     if (typeHandlerType == null) return null;
-    TypeHandler<?> handler = typeHandlerRegistry.getReverseTypeHandler(javaType, typeHandlerType);
+    // javaType ignored for injected handlers see issue #746 for full detail
+    TypeHandler<?> handler = typeHandlerRegistry.getMappingTypeHandler(typeHandlerType);
     if (handler == null) {
-      // Issue #746 not in registry, create a new one
+      // not in registry, create a new one
       handler = typeHandlerRegistry.getInstance(javaType, typeHandlerType);
     }
     return handler;

File: src/test/java/org/apache/ibatis/submitted/typehandlerinjection/UserStateTypeHandler.java
Patch:
@@ -23,11 +23,9 @@
 import java.util.Map;
 import java.util.Map.Entry;
 
-import org.apache.ibatis.type.Alias;
 import org.apache.ibatis.type.JdbcType;
 import org.apache.ibatis.type.TypeHandler;
 
-@Alias("userStateTypeHandler")
 public class UserStateTypeHandler<E> implements TypeHandler<Object> {
 
   private static Map<String, String> lookup;

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -153,12 +153,12 @@ public static class SqlCommand {
 
     public SqlCommand(Configuration configuration, Class<?> declaringInterface, Method method) throws BindingException {
       name = declaringInterface.getName() + "." + method.getName();
+      final MappedStatement ms;
       try {
-        configuration.getMappedStatement(name);
+        ms = configuration.getMappedStatement(name);
       } catch (Exception e) {
         throw new BindingException("Invalid bound statement (not found): " + name, e);
       }
-      final MappedStatement ms = configuration.getMappedStatement(name);
       type = ms.getSqlCommandType();
       if (type == SqlCommandType.UNKNOWN) {
         throw new BindingException("Unknown execution method for: " + name);

File: src/main/java/org/apache/ibatis/binding/MapperProxy.java
Patch:
@@ -30,7 +30,7 @@ public class MapperProxy implements InvocationHandler, Serializable {
   private final Class<?>[] interfaces;
   private final Map<Method, MapperMethod> methodCache;
 
-  protected MapperProxy(SqlSession sqlSession, Class<?>[] interfaces, Map<Method, MapperMethod> methodCache) {
+  private MapperProxy(SqlSession sqlSession, Class<?>[] interfaces, Map<Method, MapperMethod> methodCache) {
     this.sqlSession = sqlSession;
     this.interfaces = interfaces;
     this.methodCache = methodCache;

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -426,7 +426,7 @@ private Set<String> parseMultipleColumnNames(String columnName) {
 
   private List<ResultMapping> parseCompositeColumnName(String columnName) {
     List<ResultMapping> composites = new ArrayList<ResultMapping>();
-    if (columnName != null && columnName.indexOf('=') > -1 || columnName.indexOf(',') > -1) {
+    if (columnName != null && (columnName.indexOf('=') > -1 || columnName.indexOf(',') > -1)) {
       StringTokenizer parser = new StringTokenizer(columnName, "{}=, ", false);
       while (parser.hasMoreTokens()) {
         String property = parser.nextToken();

File: src/main/java/org/apache/ibatis/type/EnumOrdinalTypeHandler.java
Patch:
@@ -26,11 +26,10 @@ public class EnumOrdinalTypeHandler<E extends Enum<E>> extends BaseTypeHandler<E
   private final E[] enums;
 
   public EnumOrdinalTypeHandler(Class<E> type) {
+    if (type == null) throw new IllegalArgumentException("Type argument cannot be null");
     this.type = type;
     this.enums = type.getEnumConstants();
-    if (this.enums == null) {
-      throw new IllegalArgumentException(type.getSimpleName() + " does not represent an enum type.");
-    }
+    if (this.enums == null) throw new IllegalArgumentException(type.getSimpleName() + " does not represent an enum type.");
   }
 
   @Override

File: src/main/java/org/apache/ibatis/type/EnumTypeHandler.java
Patch:
@@ -25,15 +25,16 @@ public class EnumTypeHandler<E extends Enum<E>> extends BaseTypeHandler<E> {
   private Class<E> type;
 
   public EnumTypeHandler(Class<E> type) {
+    if (type == null) throw new IllegalArgumentException("Type argument cannot be null");
     this.type = type;
   }
 
   @Override
   public void setNonNullParameter(PreparedStatement ps, int i, E parameter, JdbcType jdbcType) throws SQLException {
     if (jdbcType == null) {
-        ps.setString(i, parameter.name());
+      ps.setString(i, parameter.name());
     } else {
-        ps.setObject(i, parameter.name(), jdbcType.TYPE_CODE);
+      ps.setObject(i, parameter.name(), jdbcType.TYPE_CODE); // see r3589
     }
   }
 

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -408,7 +408,7 @@ public Executor newExecutor(Transaction transaction) {
   }
 
   public Executor newExecutor(Transaction transaction, ExecutorType executorType) {
-    return newExecutor(transaction, defaultExecutorType, false);
+    return newExecutor(transaction, executorType, false);
   }
 
   public Executor newExecutor(Transaction transaction, ExecutorType executorType, boolean autoCommit) {

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -103,7 +103,7 @@ public Object execute(Object[] args) {
   private void executeWithResultHandler(Object[] args) {
     MappedStatement ms = config.getMappedStatement(commandName);
     if (Void.TYPE.equals(ms.getResultMaps().get(0).getType())) {
-      throw new BindingException("method " + method.getName() + " needs either a @ResultMap annotation or a resultType attribute in XML so a ResultHandler can be used as a parameter.");
+      throw new BindingException("method " + method.getName() + " needs either a @ResultMap annotation, a @ResultType annotation, or a resultType attribute in XML so a ResultHandler can be used as a parameter.");
     }
     Object param = getParam(args);
     if (rowBoundsIndex != null) {

File: src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/AbstractLazyTest.java
Patch:
@@ -26,7 +26,6 @@
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 
 public abstract class AbstractLazyTest {
@@ -92,6 +91,6 @@ public void lazyLoadUserWithNothingWithInterface() throws Exception {
   
   @Test
   public void lazyLoadUserWithNothingWithoutInterface() throws Exception {
-	  Assert.assertNotNull(mapper.getUserWithNothingWithInterface(1).getOwner());
+	  Assert.assertNotNull(mapper.getUserWithNothingWithoutInterface(1).getOwner());
   }
 }

File: src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/JavassistLazyTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.junit.Ignore;
 
-//@Ignore("See Issue 664: Javassist ProxyFactory does not handle interfaces with generics correctly.")
+@Ignore("See Issue 664: Javassist ProxyFactory does not handle interfaces with generics correctly.")
 public class JavassistLazyTest 
 extends AbstractLazyTest {
 	@Override

File: src/test/java/org/apache/ibatis/submitted/lazyload_proxyfactory_comparison/JavassistLazyTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.junit.Ignore;
 
-@Ignore("See Issue 664: Javassist ProxyFactory does not handle interfaces with generics correctly.")
+//@Ignore("See Issue 664: Javassist ProxyFactory does not handle interfaces with generics correctly.")
 public class JavassistLazyTest 
 extends AbstractLazyTest {
 	@Override

File: src/test/java/org/apache/ibatis/submitted/multidb/MultiDbMapper.java
Patch:
@@ -19,6 +19,7 @@ public interface MultiDbMapper {
   String select1(int id);
   String select2(int id);
   String select3(int id);
+  String select4(int id);
   void insert(User user);
   void insert2(User user);
 }
\ No newline at end of file

File: src/main/java/org/apache/ibatis/reflection/wrapper/MapWrapper.java
Patch:
@@ -117,7 +117,7 @@ public boolean hasGetter(String name) {
         return false;
       }
     } else {
-      return map.containsKey(name);
+      return map.containsKey(prop.getName());
     }
   }
 

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -272,7 +272,7 @@ public MappedStatement addMappedStatement(
       ResultSetType resultSetType,
       boolean flushCache,
       boolean useCache,
-      boolean nestedResultOrdered,
+      boolean resultOrdered,
       KeyGenerator keyGenerator,
       String keyProperty,
       String keyColumn,
@@ -290,7 +290,7 @@ public MappedStatement addMappedStatement(
     statementBuilder.keyColumn(keyColumn);
     statementBuilder.databaseId(databaseId);
     statementBuilder.lang(lang);
-    statementBuilder.nestedResultOrdered(nestedResultOrdered);
+    statementBuilder.resultOrdered(resultOrdered);
     setStatementTimeout(timeout, statementBuilder);
 
     setStatementParameterMap(parameterMap, parameterType, statementBuilder);

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -218,7 +218,6 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setLocalCacheScope(LocalCacheScope.valueOf(stringValueOf(props.getProperty("localCacheScope"), "SESSION")));
       configuration.setJdbcTypeForNull(JdbcType.valueOf(stringValueOf(props.getProperty("jdbcTypeForNull"), "OTHER")));
       configuration.setLazyLoadTriggerMethods(stringSetValueOf(props.getProperty("lazyLoadTriggerMethods"), "equals,clone,hashCode,toString"));
-      configuration.setSafeResultHandlerEnabled(booleanValueOf(props.getProperty("safeResultHandlerEnabled"), true));
       configuration.setDefaultScriptingLanguage(resolveClass(props.getProperty("defaultScriptingLanguage")));
       configuration.setLogPrefix(props.getProperty("logPrefix"));
       configuration.setCallSettersOnNulls(booleanValueOf(props.getProperty("callSettersOnNulls"), false));

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -183,10 +183,12 @@ public void setDatabaseId(String databaseId) {
     this.databaseId = databaseId;
   }
 
+  @Deprecated
   public boolean isSafeResultHandlerEnabled() {
     return safeResultHandlerEnabled;
   }
 
+  @Deprecated // "Not needed as of the fix for issue #542")
   public void setSafeResultHandlerEnabled(boolean safeResultHandlerEnabled) {
     this.safeResultHandlerEnabled = safeResultHandlerEnabled;
   }

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -272,6 +272,7 @@ public MappedStatement addMappedStatement(
       ResultSetType resultSetType,
       boolean flushCache,
       boolean useCache,
+      boolean nestedResultOrdered,
       KeyGenerator keyGenerator,
       String keyProperty,
       String keyColumn,
@@ -289,6 +290,7 @@ public MappedStatement addMappedStatement(
     statementBuilder.keyColumn(keyColumn);
     statementBuilder.databaseId(databaseId);
     statementBuilder.lang(lang);
+    statementBuilder.nestedResultOrdered(nestedResultOrdered);
     setStatementTimeout(timeout, statementBuilder);
 
     setStatementParameterMap(parameterMap, parameterType, statementBuilder);

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -284,6 +284,7 @@ private void parseStatement(Method method) {
           resultSetType,
           flushCache,
           useCache,
+          false, // TODO issue #577
           keyGenerator,
           keyProperty,
           keyColumn,
@@ -514,7 +515,8 @@ private KeyGenerator handleSelectKeyAnnotation(SelectKey selectKeyAnnotation, St
     SqlCommandType sqlCommandType = SqlCommandType.SELECT;
 
     assistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType, fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass, resultSetTypeEnum,
-        flushCache, useCache, keyGenerator, keyProperty, null, null, languageDriver);
+        flushCache, useCache, false, // TODO issue #577
+        keyGenerator, keyProperty, null, null, languageDriver);
 
     id = assistant.applyCurrentNamespace(id, false);
 

File: src/test/java/org/apache/ibatis/submitted/nestedresulthandler/Mapper.java
Patch:
@@ -15,6 +15,8 @@
  */
 package org.apache.ibatis.submitted.nestedresulthandler;
 
+import java.util.List;
+
 public interface Mapper {
-  Person getPerson(Integer id);
+  List<Person> getPersons();
 }

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -221,6 +221,7 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setSafeResultHandlerEnabled(booleanValueOf(props.getProperty("safeResultHandlerEnabled"), true));
       configuration.setDefaultScriptingLanguage(resolveClass(props.getProperty("defaultScriptingLanguage")));
       configuration.setLogPrefix(props.getProperty("logPrefix"));
+      configuration.setCallSettersOnNulls(booleanValueOf(props.getProperty("callSettersOnNulls"), false));
     }
   }
 

File: src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java
Patch:
@@ -224,7 +224,7 @@ protected void handleRowValues(ResultSet rs, ResultMap resultMap, ResultHandler
   }
 
   protected boolean shouldProcessMoreRows(ResultSet rs, ResultContext context, RowBounds rowBounds) throws SQLException {
-    return rs.next() && context.getResultCount() < rowBounds.getLimit() && !context.isStopped();
+    return !context.isStopped() && rs.next() && context.getResultCount() < rowBounds.getLimit();
   }
 
   protected void skipRows(ResultSet rs, RowBounds rowBounds) throws SQLException {

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -220,6 +220,7 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setLazyLoadTriggerMethods(stringSetValueOf(props.getProperty("lazyLoadTriggerMethods"), "equals,clone,hashCode,toString"));
       configuration.setSafeResultHandlerEnabled(booleanValueOf(props.getProperty("safeResultHandlerEnabled"), true));
       configuration.setDefaultScriptingLanguage(resolveClass(props.getProperty("defaultScriptingLanguage")));
+      configuration.setLogPrefix(props.getProperty("logPrefix"));
     }
   }
 

File: src/main/java/org/apache/ibatis/mapping/MappedStatement.java
Patch:
@@ -69,7 +69,9 @@ public Builder(Configuration configuration, String id, SqlSource sqlSource, SqlC
       mappedStatement.timeout = configuration.getDefaultStatementTimeout();
       mappedStatement.sqlCommandType = sqlCommandType;
       mappedStatement.keyGenerator = configuration.isUseGeneratedKeys() && SqlCommandType.INSERT.equals(sqlCommandType) ? new Jdbc3KeyGenerator() : new NoKeyGenerator();
-      mappedStatement.statementLog = LogFactory.getLog(id);
+      String logId = id;
+      if (configuration.getLogPrefix() != null) logId = configuration.getLogPrefix() + id;
+      mappedStatement.statementLog = LogFactory.getLog(logId);
       mappedStatement.lang = configuration.getDefaultScriptingLanuageInstance();
     }
 

File: src/main/java/org/apache/ibatis/mapping/CacheBuilder.java
Patch:
@@ -148,6 +148,9 @@ private void setCacheProperties(Cache cache) {
           } else if (float.class == type
               || Float.class == type) {
             metaCache.setValue(name, Float.valueOf(value));
+          } else if (boolean.class == type
+              || Boolean.class == type) {
+            metaCache.setValue(name, Boolean.valueOf(value));
           } else if (double.class == type
               || Double.class == type) {
             metaCache.setValue(name, Double.valueOf(value));

File: src/main/java/org/apache/ibatis/executor/resultset/NestedResultSetHandler.java
Patch:
@@ -311,7 +311,7 @@ private void createRowKeyForUnmappedProperties(ResultMap resultMap, ResultSet rs
           continue;
         }
       }
-      if (metaType.findProperty(property) != null) {
+      if (metaType.findProperty(property, configuration.isMapUnderscoreToCamelCase()) != null) {
         String value = rs.getString(column);
         if (value != null) {
           cacheKey.update(column);

File: src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java
Patch:
@@ -105,6 +105,9 @@ public TypeHandlerRegistry() {
     register(JdbcType.DECIMAL, new BigDecimalTypeHandler());
     register(JdbcType.NUMERIC, new BigDecimalTypeHandler());
 
+    register(Byte[].class, new ByteObjectArrayTypeHandler());
+    register(Byte[].class, JdbcType.BLOB, new BlobByteObjectArrayTypeHandler());
+    register(Byte[].class, JdbcType.LONGVARBINARY, new BlobByteObjectArrayTypeHandler());
     register(byte[].class, new ByteArrayTypeHandler());
     register(byte[].class, JdbcType.BLOB, new BlobTypeHandler());
     register(byte[].class, JdbcType.LONGVARBINARY, new BlobTypeHandler());

File: src/test/java/org/apache/ibatis/submitted/blobtest/BlobMapper.java
Patch:
@@ -20,4 +20,5 @@
 public interface BlobMapper {
     int insert(BlobRecord blobRecord);
     List<BlobRecord> selectAll();
+    List<BlobRecord> selectAllWithBlobObjects();
 }

File: src/main/java/org/apache/ibatis/session/SqlSession.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.apache.ibatis.session;
 
+import java.io.Closeable;
 import java.sql.Connection;
 import java.util.List;
 import java.util.Map;
@@ -26,7 +27,7 @@
  * Through this interface you can execute commands, get mappers and manage transactions.
  *
  */
-public interface SqlSession {
+public interface SqlSession extends Closeable {
 
   /**
    * Retrieve a single row mapped from the statement key

File: src/main/java/org/apache/ibatis/type/MappedJdbcTypes.java
Patch:
@@ -24,4 +24,5 @@
 @Target(ElementType.TYPE)
 public @interface MappedJdbcTypes {
 	public JdbcType[] value();
+	boolean includeNullJdbcType() default false;
 }

File: src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java
Patch:
@@ -240,6 +240,9 @@ private <T> void register(Type javaType, TypeHandler<? extends T> typeHandler) {
       for (JdbcType handledJdbcType : mappedJdbcTypes.value()) {
         register(javaType, handledJdbcType, typeHandler);
       }
+      if (mappedJdbcTypes.includeNullJdbcType()) {
+        register(javaType, null, typeHandler);
+      }
     } else {
       register(javaType, null, typeHandler);
     }

File: src/main/java/org/apache/ibatis/scripting/xmltags/XMLScriptBuilder.java
Patch:
@@ -66,7 +66,7 @@ private List<SqlNode> parseDynamicTags(XNode node) {
           || child.getNode().getNodeType() == Node.TEXT_NODE) {
         String data = child.getStringBody("");
         contents.add(new TextSqlNode(data));
-      } else if (!"selectKey".equals(nodeName)) {
+      } else if (child.getNode().getNodeType() == Node.ELEMENT_NODE && !"selectKey".equals(nodeName)) { // issue #628
         NodeHandler handler = nodeHandlers.get(nodeName);
         if (handler == null) {
           throw new BuilderException("Unknown element <" + nodeName + "> in SQL statement.");

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -99,7 +99,7 @@ private void parseConfiguration(XNode root) {
       objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));
       proxyFactoryElement(root.evalNode("proxyFactory")); // read it before reading settings
       settingsElement(root.evalNode("settings"));
-      environmentsElement(root.evalNode("environments"));
+      environmentsElement(root.evalNode("environments")); // read it after objectFactory and objectWrapperFactory issue #631
       databaseIdProviderElement(root.evalNode("databaseIdProvider"));
       typeHandlerElement(root.evalNode("typeHandlers"));
       mapperElement(root.evalNode("mappers"));

File: src/main/java/org/apache/ibatis/datasource/DataSourceFactory.java
Patch:
@@ -16,7 +16,6 @@
 package org.apache.ibatis.datasource;
 
 import java.util.Properties;
-
 import javax.sql.DataSource;
 
 public interface DataSourceFactory {

File: src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSourceFactory.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.ibatis.datasource.DataSourceException;
 import org.apache.ibatis.datasource.DataSourceFactory;
 import org.apache.ibatis.reflection.MetaObject;
+import org.apache.ibatis.reflection.SystemMetaObject;
 
 public class UnpooledDataSourceFactory implements DataSourceFactory {
 
@@ -36,7 +37,7 @@ public UnpooledDataSourceFactory() {
 
   public void setProperties(Properties properties) {
     Properties driverProperties = new Properties();
-    MetaObject metaDataSource = MetaObject.forObject(dataSource);
+    MetaObject metaDataSource = SystemMetaObject.forObject(dataSource);
     for (Object key : properties.keySet()) {
       String propertyName = (String) key;
       if (propertyName.startsWith(DRIVER_PROPERTY_PREFIX)) {

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -245,8 +245,8 @@ private void handleLocallyCachedOutputParameters(MappedStatement ms, CacheKey ke
     if (ms.getStatementType() == StatementType.CALLABLE) {
       final Object cachedParameter = localOutputParameterCache.getObject(key);
       if (cachedParameter != null && parameter != null) {
-        final MetaObject metaCachedParameter = MetaObject.forObject(cachedParameter);
-        final MetaObject metaParameter = MetaObject.forObject(parameter);
+        final MetaObject metaCachedParameter = configuration.newMetaObject(cachedParameter);
+        final MetaObject metaParameter = configuration.newMetaObject(parameter);
         for (ParameterMapping parameterMapping : boundSql.getParameterMappings()) {
           if (parameterMapping.getMode() != ParameterMode.IN) {
             final String parameterName = parameterMapping.getProperty();

File: src/main/java/org/apache/ibatis/mapping/CacheBuilder.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.ibatis.cache.decorators.SynchronizedCache;
 import org.apache.ibatis.cache.impl.PerpetualCache;
 import org.apache.ibatis.reflection.MetaObject;
+import org.apache.ibatis.reflection.SystemMetaObject;
 
 public class CacheBuilder {
   private String id;
@@ -103,7 +104,7 @@ private void setDefaultImplementations() {
 
   private Cache setStandardDecorators(Cache cache) {
     try {
-      MetaObject metaCache = MetaObject.forObject(cache);
+      MetaObject metaCache = SystemMetaObject.forObject(cache);
       if (size != null && metaCache.hasSetter("size")) {
         metaCache.setValue("size", size);
       }
@@ -124,7 +125,7 @@ private Cache setStandardDecorators(Cache cache) {
 
   private void setCacheProperties(Cache cache) {
     if (properties != null) {
-      MetaObject metaCache = MetaObject.forObject(cache);
+      MetaObject metaCache = SystemMetaObject.forObject(cache);
       for (Map.Entry<Object, Object> entry : properties.entrySet()) {
         String name = (String) entry.getKey();
         String value = (String) entry.getValue();

File: src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSession.java
Patch:
@@ -80,7 +80,7 @@ public <K, V> Map<K, V> selectMap(String statement, Object parameter, String map
   public <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {
     final List<?> list = selectList(statement, parameter, rowBounds);
     final DefaultMapResultHandler<K, V> mapResultHandler = new DefaultMapResultHandler<K, V>(mapKey,
-        configuration.getObjectFactory());
+        configuration.getObjectFactory(), configuration.getObjectWrapperFactory());
     final DefaultResultContext context = new DefaultResultContext();
     for (Object o : list) {
       context.nextResultObject(o);

File: src/test/java/com/ibatis/common/jdbc/DbcpConfiguration.java
Patch:
@@ -21,6 +21,7 @@
 import javax.sql.DataSource;
 import java.util.Iterator;
 import java.util.Map;
+import org.apache.ibatis.reflection.SystemMetaObject;
 
 /*
  * Wrapper class to simplify use of DBCP
@@ -61,7 +62,7 @@ public DataSource getDataSource() {
   private BasicDataSource newDbcpConfiguration(Map map) {
     BasicDataSource basicDataSource = new BasicDataSource();
     Iterator props = map.keySet().iterator();
-    MetaObject metaDataSource = MetaObject.forObject(basicDataSource);
+    MetaObject metaDataSource = SystemMetaObject.forObject(basicDataSource);
     while (props.hasNext()) {
       String propertyName = (String) props.next();
       if (propertyName.startsWith(ADD_DRIVER_PROPS_PREFIX)) {
@@ -78,7 +79,7 @@ private BasicDataSource newDbcpConfiguration(Map map) {
 
   private Object convertValue(Object object, String propertyName, String value) {
     Object convertedValue = value;
-    MetaObject metaObject = MetaObject.forObject(object);
+    MetaObject metaObject = SystemMetaObject.forObject(object);
     Class targetType = metaObject.getSetterType(propertyName);
     if (targetType == Integer.class || targetType == int.class) {
       convertedValue = Integer.valueOf(value);

File: src/test/java/com/ibatis/sqlmap/engine/mapping/sql/dynamic/elements/ConditionalTagHandler.java
Patch:
@@ -23,6 +23,7 @@
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.Date;
+import org.apache.ibatis.reflection.SystemMetaObject;
 
 public abstract class ConditionalTagHandler extends BaseTagHandler {
 
@@ -69,7 +70,7 @@ protected long compare(SqlTagContext ctx, SqlTag tag, Object parameterObject) {
     Object value1;
     Class type;
 
-    MetaObject metaObject = MetaObject.forObject(parameterObject);
+    MetaObject metaObject = SystemMetaObject.forObject(parameterObject);
     if (prop != null) {
       value1 = metaObject.getValue(prop);
       type = metaObject.getGetterType(prop);

File: src/test/java/com/ibatis/sqlmap/engine/mapping/sql/dynamic/elements/IsEmptyTagHandler.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.lang.reflect.Array;
 import java.util.Collection;
+import org.apache.ibatis.reflection.SystemMetaObject;
 
 public class IsEmptyTagHandler extends ConditionalTagHandler {
 
@@ -29,7 +30,7 @@ public boolean isCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject
       String prop = getResolvedProperty(ctx, tag);
       Object value;
       if (prop != null) {
-        value = MetaObject.forObject(parameterObject).getValue(prop);
+        value = SystemMetaObject.forObject(parameterObject).getValue(prop);
       } else {
         value = parameterObject;
       }

File: src/test/java/com/ibatis/sqlmap/engine/mapping/sql/dynamic/elements/IsNullTagHandler.java
Patch:
@@ -16,6 +16,7 @@
 package com.ibatis.sqlmap.engine.mapping.sql.dynamic.elements;
 
 import org.apache.ibatis.reflection.MetaObject;
+import org.apache.ibatis.reflection.SystemMetaObject;
 
 public class IsNullTagHandler extends ConditionalTagHandler {
 
@@ -26,7 +27,7 @@ public boolean isCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject
       String prop = getResolvedProperty(ctx, tag);
       Object value;
       if (prop != null) {
-        value = MetaObject.forObject(parameterObject).getValue(prop);
+        value = SystemMetaObject.forObject(parameterObject).getValue(prop);
       } else {
         value = parameterObject;
       }

File: src/test/java/com/ibatis/sqlmap/engine/mapping/sql/dynamic/elements/IsPropertyAvailableTagHandler.java
Patch:
@@ -18,6 +18,7 @@
 import org.apache.ibatis.reflection.MetaObject;
 
 import java.util.Map;
+import org.apache.ibatis.reflection.SystemMetaObject;
 
 public class IsPropertyAvailableTagHandler extends ConditionalTagHandler {
 
@@ -35,7 +36,7 @@ public boolean isCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject
       if (lastIndex != -1) {
         String firstPart = property.substring(0, lastIndex);
         String lastPart = property.substring(lastIndex + 1);
-        parameterObject = MetaObject.forObject(parameterObject).getValue(firstPart);
+        parameterObject = SystemMetaObject.forObject(parameterObject).getValue(firstPart);
         property = lastPart;
       }
 
@@ -44,7 +45,7 @@ public boolean isCondition(SqlTagContext ctx, SqlTag tag, Object parameterObject
         // properties in Maps and that's not the behavior we want here
         return ((Map) parameterObject).containsKey(property);
       } else {
-        return MetaObject.forObject(parameterObject).hasGetter(property);
+        return SystemMetaObject.forObject(parameterObject).hasGetter(property);
       }
     }
   }

File: src/test/java/com/ibatis/sqlmap/engine/mapping/sql/dynamic/elements/IterateTagHandler.java
Patch:
@@ -16,6 +16,7 @@
 package com.ibatis.sqlmap.engine.mapping.sql.dynamic.elements;
 
 import org.apache.ibatis.reflection.MetaObject;
+import org.apache.ibatis.reflection.SystemMetaObject;
 
 public class IterateTagHandler extends BaseTagHandler {
 
@@ -41,7 +42,7 @@ public int doStartFragment(SqlTagContext ctx, SqlTag tag, Object parameterObject
           prop = parentIterate.addIndexToTagProperty(prop);
         }
 
-        collection = MetaObject.forObject(parameterObject).getValue(prop);
+        collection = SystemMetaObject.forObject(parameterObject).getValue(prop);
       } else {
         collection = parameterObject;
       }

File: src/test/java/com/ibatis/sqlmap/engine/mapping/sql/simple/SimpleDynamicSql.java
Patch:
@@ -23,6 +23,7 @@
 
 import java.util.List;
 import java.util.StringTokenizer;
+import org.apache.ibatis.reflection.SystemMetaObject;
 
 public class SimpleDynamicSql implements Sql {
 
@@ -70,7 +71,7 @@ private String processDynamicElements(String sql, Object parameterObject) {
             if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {
               value = parameterObject;
             } else {
-              value = MetaObject.forObject(parameterObject).getValue(token);
+              value = SystemMetaObject.forObject(parameterObject).getValue(token);
             }
           }
           if (value != null) {

File: src/test/java/org/apache/ibatis/submitted/serializecircular/SerializeCircularTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.junit.Ignore;
 import org.junit.Test;
 
-@Ignore("see issue #614")
+//@Ignore("see issue #614")
 public class SerializeCircularTest {
 
 	@Test

File: src/main/java/org/apache/ibatis/executor/loader/JavassistProxyFactory.java
Patch:
@@ -50,7 +50,6 @@ public JavassistProxyFactory() {
     }
   }
 
-  @Override
   public Object createProxy(Object target, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
     return EnhancedResultObjectProxyImpl.createProxy(target, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);
   }
@@ -59,7 +58,6 @@ public Object createDeserializationProxy(Object target, Set<String> unloadedProp
     return EnhancedDeserializationProxyImpl.createProxy(target, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);
   }
 
-  @Override
   public void setProperties(Properties properties) {
   }
   

File: src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java
Patch:
@@ -81,7 +81,7 @@ public FastResultSetHandler(Executor executor, MappedStatement mappedStatement,
     this.typeHandlerRegistry = configuration.getTypeHandlerRegistry();
     this.objectFactory = configuration.getObjectFactory();
     this.resultHandler = resultHandler;
-    this.proxyFactory = configuration.newProxyFactory();
+    this.proxyFactory = configuration.getProxyFactory();
   }
 
   //

File: src/main/java/org/apache/ibatis/io/Resources.java
Patch:
@@ -67,7 +67,7 @@ public static void setDefaultClassLoader(ClassLoader defaultClassLoader) {
    * @throws java.io.IOException If the resource cannot be found or read
    */
   public static URL getResourceURL(String resource) throws IOException {
-    return classLoaderWrapper.getResourceAsURL(resource);
+    return getResourceURL(null, resource); // issue #625
   }
 
   /*

File: src/test/java/org/apache/ibatis/submitted/multidb/MultiDbMapper.java
Patch:
@@ -20,4 +20,5 @@ public interface MultiDbMapper {
   String select2(int id);
   String select3(int id);
   void insert(User user);
+  void insert2(User user);
 }
\ No newline at end of file

File: src/test/java/org/apache/ibatis/submitted/serializecircular/SerializeCircularTest.java
Patch:
@@ -28,9 +28,9 @@
 import org.junit.Ignore;
 import org.junit.Test;
 
+@Ignore("see issue #614")
 public class SerializeCircularTest {
 
-  @Ignore("see issue #614")
 	@Test
 	public void serializeAndDeserializeObjectsWithAggressiveLazyLoadingWithoutPreloadingAttribute() 
 	throws Exception {

File: src/test/java/org/apache/ibatis/submitted/serializecircular/UtilityTester.java
Patch:
@@ -21,11 +21,13 @@
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 
+import org.junit.Ignore;
 import org.junit.Test;
 
+@Ignore("see issue #614")
 public class UtilityTester {
 	
-	@Test
+  @Test
 	public static void serializeAndDeserializeObject(Object myObject){
 
 		try {

File: src/test/java/org/apache/ibatis/jdbc/ScriptRunnerTest.java
Patch:
@@ -108,6 +108,7 @@ public void commentAferStatementDelimiterShouldNotCauseRunnerFail() throws Excep
     ScriptRunner runner = new ScriptRunner(conn);
     runner.setAutoCommit(true);
     runner.setStopOnError(true);
+    runJPetStoreScripts(runner);
 
     String resource = "org/apache/ibatis/jdbc/ScriptCommentAfterEOLTerminator.sql";
     Reader reader = Resources.getResourceAsReader(resource);

File: src/test/java/org/apache/ibatis/submitted/automapping/AutomappingTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-public class BaseTest {
+public class AutomappingTest {
 
   private static SqlSessionFactory sqlSessionFactory;
 

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -43,6 +43,7 @@
 import org.apache.ibatis.mapping.SqlSource;
 import org.apache.ibatis.mapping.StatementType;
 import org.apache.ibatis.reflection.MetaClass;
+import org.apache.ibatis.scripting.LanguageDriver;
 import org.apache.ibatis.session.Configuration;
 import org.apache.ibatis.type.JdbcType;
 import org.apache.ibatis.type.TypeHandler;
@@ -274,7 +275,7 @@ public MappedStatement addMappedStatement(
       String keyProperty,
       String keyColumn,
       String databaseId,
-      Class<?> langTypeClass) {
+      LanguageDriver lang) {
     id = applyCurrentNamespace(id, false);
     boolean isSelect = sqlCommandType == SqlCommandType.SELECT;
 
@@ -286,7 +287,7 @@ public MappedStatement addMappedStatement(
     statementBuilder.keyProperty(keyProperty);
     statementBuilder.keyColumn(keyColumn);
     statementBuilder.databaseId(databaseId);
-    statementBuilder.lang(langTypeClass);
+    statementBuilder.lang(lang);
     setStatementTimeout(timeout, statementBuilder);
 
     setStatementParameterMap(parameterMap, parameterType, statementBuilder);

File: src/main/java/org/apache/ibatis/mapping/MappedStatement.java
Patch:
@@ -149,8 +149,8 @@ public Builder databaseId(String databaseId) {
       return this;
     }
 
-    public Builder lang(Class<?> lang) {
-      mappedStatement.lang = mappedStatement.configuration.getLanguageRegistry().getDriver(lang);
+    public Builder lang(LanguageDriver driver) {
+      mappedStatement.lang = driver;
       return this;
     }
 

File: src/main/java/org/apache/ibatis/scripting/defaults/RawLanguageDriver.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.ibatis.scripting.LanguageDriver;
 import org.apache.ibatis.session.Configuration;
 
-public class RawSqlLanguageDriver implements LanguageDriver {
+public class RawLanguageDriver implements LanguageDriver {
 
   public ParameterHandler createParameterHandler(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql) {
     return new DefaultParameterHandler(mappedStatement, parameterObject, boundSql);

File: src/main/java/org/apache/ibatis/scripting/xmltags/XMLLanguageDriver.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.ibatis.scripting.defaults.DefaultParameterHandler;
 import org.apache.ibatis.session.Configuration;
 
-public class XMLDynamicLanguageDriver implements LanguageDriver {
+public class XMLLanguageDriver implements LanguageDriver {
 
   public ParameterHandler createParameterHandler(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql) {
     return new DefaultParameterHandler(mappedStatement, parameterObject, boundSql);
@@ -37,6 +37,7 @@ public SqlSource createSqlSource(Configuration configuration, XNode script, Clas
   }
 
   public SqlSource createSqlSource(Configuration configuration, String script, Class<?> parameterType) {
+    // TODO, should we parse the string to let the user use XML in annotated methods?
     ArrayList<SqlNode> contents = new ArrayList<SqlNode>();
     contents.add(new TextSqlNode(script.toString()));
     MixedSqlNode rootSqlNode = new MixedSqlNode(contents);

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -145,6 +145,7 @@ public <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBoun
       for (DeferredLoad deferredLoad : deferredLoads) {
         deferredLoad.load();
       }
+      deferredLoads.clear(); // issue #601
       if (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) {
         clearLocalCache(); // issue #482
       }

File: src/main/java/org/apache/ibatis/logging/log4j/Log4jImpl.java
Patch:
@@ -50,7 +50,7 @@ public void debug(String s) {
   }
 
   public void trace(String s) {
-    log.log(FQCN, Level.DEBUG, s, null);
+    log.log(FQCN, Level.TRACE, s, null);
   }
 
   public void warn(String s) {

File: src/test/java/org/apache/ibatis/submitted/inheritance/InheritanceTest.java
Patch:
@@ -25,11 +25,10 @@
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.junit.Assert;
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 import org.junit.Test;
 
-@Ignore // see issue #289
-public class BaseTest {
+// see issue #289
+public class InheritanceTest {
 
   private static SqlSessionFactory sqlSessionFactory;
 

File: src/main/java/org/apache/ibatis/logging/jdbc/ResultSetLogger.java
Patch:
@@ -48,7 +48,7 @@ public Object invoke(Object proxy, Method method, Object[] params) throws Throwa
         if (((Boolean) o)) {
           ResultSetMetaData rsmd = rs.getMetaData();
           final int columnCount = rsmd.getColumnCount();
-          if (isDebugEnabled()) {
+          if (isTraceEnabled()) {
             if (first) {
               first = false;
               printColumnHeaders(rsmd, columnCount);

File: src/main/java/org/apache/ibatis/builder/SqlSourceBuilder.java
Patch:
@@ -86,7 +86,7 @@ private ParameterMapping buildParameterMapping(String content) {
         propertyType = Object.class;
       }
       ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);
-      Class<?> javaType = null;
+      Class<?> javaType = propertyType;
       String typeHandlerAlias = null;
       for (Map.Entry<String, String> entry : propertiesMap.entrySet()) {
         String name = entry.getKey();

File: src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java
Patch:
@@ -51,8 +51,7 @@ public PooledConnection(Connection connection, PooledDataSource dataSource) {
     this.createdTimestamp = System.currentTimeMillis();
     this.lastUsedTimestamp = System.currentTimeMillis();
     this.valid = true;
-
-    proxyConnection = (Connection) Proxy.newProxyInstance(Connection.class.getClassLoader(), IFACES, this);
+    this.proxyConnection = (Connection) Proxy.newProxyInstance(Connection.class.getClassLoader(), IFACES, this);
   }
 
   /*

File: src/main/java/org/apache/ibatis/type/TypeReference.java
Patch:
@@ -31,7 +31,7 @@ public abstract class TypeReference<T> {
   protected TypeReference() {
     Type superclass = getClass().getGenericSuperclass();
     if (superclass instanceof Class) {
-      throw new TypeException("TypeHandler '" + getClass() + "' extends TypeReference but misses the type parameter. "
+      throw new TypeException("'" + getClass() + "' extends TypeReference but misses the type parameter. "
         + "Remove the extension or add a type parameter to it.");
     }
     rawType = ((ParameterizedType) superclass).getActualTypeArguments()[0];

File: src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java
Patch:
@@ -73,7 +73,7 @@ public void parseStatementNode() {
     ResultSetType resultSetTypeEnum = resolveResultSetType(resultSetType);
 
     LanguageDriver langDriver = configuration.getLanguageRegistry().getDriver(langTypeClass);
-    SqlSource sqlSource = langDriver.createSqlSource(configuration, builderAssistant, context, databaseId);
+    SqlSource sqlSource = langDriver.createSqlSource(configuration, builderAssistant, context, parameterTypeClass, databaseId);
 
     String nodeName = context.getNode().getNodeName();
     SqlCommandType sqlCommandType = SqlCommandType.valueOf(nodeName.toUpperCase(Locale.ENGLISH));

File: src/main/java/org/apache/ibatis/scripting/LanguageDriver.java
Patch:
@@ -26,6 +26,6 @@ public interface LanguageDriver {
 
   public ParameterHandler createParameterHandler(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql);
 
-  public SqlSource createSqlSource(Configuration configuration, MapperBuilderAssistant builderAssistant, Object script, String databaseId);
+  public SqlSource createSqlSource(Configuration configuration, MapperBuilderAssistant builderAssistant, Object script, Class<?> parameterType, String databaseId);
 
 }

File: src/main/java/org/apache/ibatis/scripting/defaults/StaticSqlLanguageDriver.java
Patch:
@@ -30,7 +30,7 @@ public ParameterHandler createParameterHandler(MappedStatement mappedStatement,
     return new DefaultParameterHandler(mappedStatement, parameterObject, boundSql);
   }
 
-  public SqlSource createSqlSource(Configuration configuration, MapperBuilderAssistant builderAssistant, Object script, String databaseId) {
+  public SqlSource createSqlSource(Configuration configuration, MapperBuilderAssistant builderAssistant, Object script, Class<?> parameterType, String databaseId) {
     if (script instanceof XNode) {
       return new RawSqlSource(configuration, ((XNode)script).getStringBody(""));
     }

File: src/main/java/org/apache/ibatis/scripting/xmltags/XMLDynamicLanguageDriver.java
Patch:
@@ -32,7 +32,7 @@ public ParameterHandler createParameterHandler(MappedStatement mappedStatement,
     return new DefaultParameterHandler(mappedStatement, parameterObject, boundSql);
   }
 
-  public SqlSource createSqlSource(Configuration configuration, MapperBuilderAssistant builderAssistant, Object script, String databaseId) {
+  public SqlSource createSqlSource(Configuration configuration, MapperBuilderAssistant builderAssistant, Object script, Class<?> parameterType, String databaseId) {
     XNode context;
     if (script instanceof XNode) {
       context = (XNode) script;

File: src/test/java/org/apache/ibatis/submitted/velocity/VelocityLanguageDriver.java
Patch:
@@ -34,7 +34,7 @@ public ParameterHandler createParameterHandler(MappedStatement mappedStatement,
     return new DefaultParameterHandler(mappedStatement, parameterObject, boundSql);
   }
 
-  public SqlSource createSqlSource(Configuration configuration, MapperBuilderAssistant builderAssistant, Object script, String databaseId) {
+  public SqlSource createSqlSource(Configuration configuration, MapperBuilderAssistant builderAssistant, Object script, Class<?> parameterTypeClass, String databaseId) {
     if (script instanceof XNode) {
       return new VelocitySqlSource(configuration, builderAssistant, ((XNode)script).getStringBody(""), databaseId);
     }

File: src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.ibatis.session.Configuration;
 
 import java.lang.reflect.Method;
+import java.util.HashMap;
 
 public class ProviderSqlSource implements SqlSource {
 
@@ -69,7 +70,7 @@ private SqlSource createSqlSource(Object parameterObject) {
         sql = (String) providerMethod.invoke(providerType.newInstance());
       }
       Class<?> parameterType = parameterObject == null ? Object.class : parameterObject.getClass();
-      return sqlSourceParser.parse(sql, parameterType);
+      return sqlSourceParser.parse(sql, parameterType, new HashMap<String, Object>());
     } catch (Exception e) {
       throw new BuilderException("Error invoking SqlProvider method ("
           + providerType.getName() + "." + providerMethod.getName()

File: src/main/java/org/apache/ibatis/scripting/xmltags/DynamicSqlSource.java
Patch:
@@ -36,7 +36,7 @@ public BoundSql getBoundSql(Object parameterObject) {
     rootSqlNode.apply(context);
     SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration);
     Class<?> parameterType = parameterObject == null ? Object.class : parameterObject.getClass();
-    SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType);
+    SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings());
     BoundSql boundSql = sqlSource.getBoundSql(parameterObject);
     for (Map.Entry<String, Object> entry : context.getBindings().entrySet()) {
       boundSql.setAdditionalParameter(entry.getKey(), entry.getValue());

File: src/test/java/org/apache/ibatis/submitted/ognlstatic/OgnlStaticTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.junit.Assert;
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 import org.junit.Test;
 
 public class OgnlStaticTest {
@@ -57,8 +56,7 @@ public static void setUp() throws Exception {
    * DEBUG [main] - ==> Parameters: 1(Integer), 1(Integer)
    * There are two parameter mappings but DefaulParameterHandler maps them both to input paremeter (integer)
    */
-  @Ignore // TODO see issue #448
-  @Test
+  @Test // see issue #448
   public void shouldGetAUser() {
     SqlSession sqlSession = sqlSessionFactory.openSession();
     try {

File: src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java
Patch:
@@ -203,7 +203,8 @@ private boolean lineIsComment(String trimmedLine) {
   }
 
   private boolean commandReadyToExecute(String trimmedLine) {
-    return !fullLineDelimiter && trimmedLine.endsWith(delimiter) || fullLineDelimiter && trimmedLine.equals(delimiter);
+    // issue #561 remove anything after the delimiter
+    return !fullLineDelimiter && trimmedLine.contains(delimiter) || fullLineDelimiter && trimmedLine.equals(delimiter);
   }
 
   private void executeStatement(String command) throws SQLException, UnsupportedEncodingException {

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -44,7 +44,6 @@
 import org.apache.ibatis.mapping.SqlSource;
 import org.apache.ibatis.mapping.StatementType;
 import org.apache.ibatis.reflection.MetaClass;
-import org.apache.ibatis.session.AutoMappingBehavior;
 import org.apache.ibatis.session.Configuration;
 import org.apache.ibatis.type.JdbcType;
 import org.apache.ibatis.type.TypeHandler;
@@ -166,11 +165,11 @@ public ResultMap addResultMap(
       String extend,
       Discriminator discriminator,
       List<ResultMapping> resultMappings,
-      AutoMappingBehavior autoMappingBehavior) {
+      Boolean autoMapping) {
     id = applyCurrentNamespace(id, false);
     extend = applyCurrentNamespace(extend, true);
 
-    ResultMap.Builder resultMapBuilder = new ResultMap.Builder(configuration, id, type, resultMappings, autoMappingBehavior);
+    ResultMap.Builder resultMapBuilder = new ResultMap.Builder(configuration, id, type, resultMappings, autoMapping);
     if (extend != null) {
       if (!configuration.hasResultMap(extend)) {
         throw new IncompleteElementException("Could not find a parent resultmap with id '" + extend + "'");

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -42,7 +42,6 @@
 import org.apache.ibatis.mapping.ResultMapping;
 import org.apache.ibatis.parsing.XNode;
 import org.apache.ibatis.parsing.XPathParser;
-import org.apache.ibatis.session.AutoMappingBehavior;
 import org.apache.ibatis.session.Configuration;
 import org.apache.ibatis.type.JdbcType;
 import org.apache.ibatis.type.TypeHandler;
@@ -253,7 +252,7 @@ private ResultMap resultMapElement(XNode resultMapNode, List<ResultMapping> addi
             resultMapNode.getStringAttribute("resultType",
                 resultMapNode.getStringAttribute("javaType"))));
     String extend = resultMapNode.getStringAttribute("extends");
-    AutoMappingBehavior autoMappingBehavior = resultMapNode.getEnumAttribute(AutoMappingBehavior.class, "autoMappingBehavior");
+    Boolean autoMapping = resultMapNode.getBooleanAttribute("autoMapping", null);
     Class<?> typeClass = resolveClass(type);
     Discriminator discriminator = null;
     List<ResultMapping> resultMappings = new ArrayList<ResultMapping>();
@@ -272,7 +271,7 @@ private ResultMap resultMapElement(XNode resultMapNode, List<ResultMapping> addi
         resultMappings.add(buildResultMappingFromContext(resultChild, typeClass, flags));
       }
     }
-    ResultMapResolver resultMapResolver = new ResultMapResolver(builderAssistant, id, typeClass, extend, discriminator, resultMappings, autoMappingBehavior);
+    ResultMapResolver resultMapResolver = new ResultMapResolver(builderAssistant, id, typeClass, extend, discriminator, resultMappings, autoMapping);
     try {
       return resultMapResolver.resolve();
     } catch (IncompleteElementException  e) {

File: src/main/java/org/apache/ibatis/executor/resultset/NestedResultSetHandler.java
Patch:
@@ -140,7 +140,7 @@ protected Object getRowValue(ResultSet rs, ResultMap resultMap, CacheKey combine
         if (rowKey != CacheKey.NULL_CACHE_KEY) ancestorCache.put(rowKey, resultObject);
         final MetaObject metaObject = configuration.newMetaObject(resultObject);
         boolean foundValues = resultMap.getConstructorResultMappings().size() > 0;
-        if (AutoMappingBehavior.FULL.equals(getAutoMappingBehavior(resultMap))) {
+        if (shouldApplyAutomaticMappings(resultMap, AutoMappingBehavior.FULL.equals(configuration.getAutoMappingBehavior()))) {
           final List<String> unmappedColumnNames = resultColumnCache.getUnmappedColumnNames(resultMap, columnPrefix);
           foundValues = applyAutomaticMappings(rs, unmappedColumnNames, metaObject, columnPrefix, resultColumnCache) || foundValues;
         }

File: src/test/java/org/apache/ibatis/submitted/simplelistparameter/Car.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.List;
 
 public class Car {
-  // the result class doesn't need id for further processing
   private String name;
   private List<String> doors;
 
@@ -30,11 +29,11 @@ public void setName(String name) {
     this.name = name;
   }
 
-  public List<String> getCarParts() {
+  public List<String> getDoors() {
     return doors;
   }
 
-  public void setCarParts(List<String> doors) {
+  public void setDoors(List<String> doors) {
     this.doors = doors;
   }
 }

File: src/test/java/org/apache/ibatis/submitted/simplelistparameter/CarMapper.java
Patch:
@@ -21,6 +21,6 @@
 
 public interface CarMapper {
 
-  @Select({ "select id, name from car where doors = #{doors[1]}" })
+  @Select({ "select name from car where doors = #{doors[1]}" })
   List<Car> getCar(Car car);
 }

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -182,7 +182,7 @@ private void applyResultMap(String resultMapId, Class<?> returnType, Arg[] args,
     applyConstructorArgs(args, returnType, resultMappings);
     applyResults(results, returnType, resultMappings);
     Discriminator disc = applyDiscriminator(resultMapId, returnType, discriminator);
-    assistant.addResultMap(resultMapId, returnType, null, disc, resultMappings);
+    assistant.addResultMap(resultMapId, returnType, null, disc, resultMappings, null); // TODO add AutoMappingBehaviour
     createDiscriminatorResultMaps(resultMapId, returnType, discriminator);
   }
 
@@ -193,7 +193,7 @@ private void createDiscriminatorResultMaps(String resultMapId, Class<?> resultTy
         List<ResultMapping> resultMappings = new ArrayList<ResultMapping>();
         applyConstructorArgs(c.constructArgs(), resultType, resultMappings); // issue #136
         applyResults(c.results(), resultType, resultMappings);
-        assistant.addResultMap(caseResultMapId, c.type(), resultMapId, null, resultMappings);
+        assistant.addResultMap(caseResultMapId, c.type(), resultMapId, null, resultMappings, null); // TODO add AutoMappingBehaviour
       }
     }
   }

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -42,6 +42,7 @@
 import org.apache.ibatis.mapping.ResultMapping;
 import org.apache.ibatis.parsing.XNode;
 import org.apache.ibatis.parsing.XPathParser;
+import org.apache.ibatis.session.AutoMappingBehavior;
 import org.apache.ibatis.session.Configuration;
 import org.apache.ibatis.type.JdbcType;
 import org.apache.ibatis.type.TypeHandler;
@@ -252,6 +253,7 @@ private ResultMap resultMapElement(XNode resultMapNode, List<ResultMapping> addi
             resultMapNode.getStringAttribute("resultType",
                 resultMapNode.getStringAttribute("javaType"))));
     String extend = resultMapNode.getStringAttribute("extends");
+    AutoMappingBehavior autoMappingBehavior = resultMapNode.getEnumAttribute(AutoMappingBehavior.class, "autoMappingBehavior");
     Class<?> typeClass = resolveClass(type);
     Discriminator discriminator = null;
     List<ResultMapping> resultMappings = new ArrayList<ResultMapping>();
@@ -270,7 +272,7 @@ private ResultMap resultMapElement(XNode resultMapNode, List<ResultMapping> addi
         resultMappings.add(buildResultMappingFromContext(resultChild, typeClass, flags));
       }
     }
-    ResultMapResolver resultMapResolver = new ResultMapResolver(builderAssistant, id, typeClass, extend, discriminator, resultMappings);
+    ResultMapResolver resultMapResolver = new ResultMapResolver(builderAssistant, id, typeClass, extend, discriminator, resultMappings, autoMappingBehavior);
     try {
       return resultMapResolver.resolve();
     } catch (IncompleteElementException  e) {

File: src/main/java/org/apache/ibatis/executor/resultset/NestedResultSetHandler.java
Patch:
@@ -140,7 +140,7 @@ protected Object getRowValue(ResultSet rs, ResultMap resultMap, CacheKey combine
         if (rowKey != CacheKey.NULL_CACHE_KEY) ancestorCache.put(rowKey, resultObject);
         final MetaObject metaObject = configuration.newMetaObject(resultObject);
         boolean foundValues = resultMap.getConstructorResultMappings().size() > 0;
-        if (AutoMappingBehavior.FULL.equals(configuration.getAutoMappingBehavior())) {
+        if (AutoMappingBehavior.FULL.equals(getAutoMappingBehavior(resultMap))) {
           final List<String> unmappedColumnNames = resultColumnCache.getUnmappedColumnNames(resultMap, columnPrefix);
           foundValues = applyAutomaticMappings(rs, unmappedColumnNames, metaObject, columnPrefix, resultColumnCache) || foundValues;
         }

File: src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java
Patch:
@@ -490,7 +490,7 @@ protected Object prepareCompositeKeyParameter(ResultSet rs, ResultMapping result
       final Class<?> propType = metaObject.getSetterType(innerResultMapping.getProperty());
       final TypeHandler<?> typeHandler = typeHandlerRegistry.getTypeHandler(propType);
       final Object propValue = typeHandler.getResult(rs, prependPrefix(innerResultMapping.getColumn(), columnPrefix));
-      if (propType != null) { // issue #353 do not execute nested query if key is null
+      if (propValue != null) { // issue #353 & #560 do not execute nested query if key is null
         metaObject.setValue(innerResultMapping.getProperty(), propValue);
         foundValues = true;
       }

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -148,7 +148,7 @@ public ParameterMapping buildParameterMapping(
 
     // Class parameterType = parameterMapBuilder.type();
     Class<?> javaTypeClass = resolveParameterJavaType(parameterType, property, javaType, jdbcType);
-    TypeHandler<?> typeHandlerInstance = resolveInstance(typeHandler);
+    TypeHandler<?> typeHandlerInstance = resolveTypeHandler(javaTypeClass, typeHandler);
 
     ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, javaTypeClass);
     builder.jdbcType(jdbcType);
@@ -385,10 +385,9 @@ private ResultMapping assembleResultMapping(
       String columnPrefix,
       Class<? extends TypeHandler<?>> typeHandler,
       List<ResultFlag> flags) {
-    // Class resultType = resultMapBuilder.type();
     nestedResultMap = applyCurrentNamespace(nestedResultMap, true);
     Class<?> javaTypeClass = resolveResultJavaType(resultType, property, javaType);
-    TypeHandler<?> typeHandlerInstance = (TypeHandler<?>) resolveInstance(typeHandler);
+    TypeHandler<?> typeHandlerInstance = (TypeHandler<?>) resolveTypeHandler(javaTypeClass, typeHandler);
 
     List<ResultMapping> composites = parseCompositeColumnName(column);
     if (composites.size() > 0) {

File: src/main/java/org/apache/ibatis/builder/xml/dynamic/WhereSqlNode.java
Patch:
@@ -20,7 +20,7 @@
 public class WhereSqlNode extends TrimSqlNode {
 
   public WhereSqlNode(Configuration configuration, SqlNode contents) {
-    super(configuration, contents, "WHERE", "AND |OR ", null, null);
+    super(configuration, contents, "WHERE", "AND |OR |AND\n|OR\n|AND\r|OR\r", null, null);
   }
 
 

File: src/main/java/org/apache/ibatis/logging/jdbc/ResultSetLogger.java
Patch:
@@ -72,7 +72,7 @@ private void printColumnHeaders(ResultSetMetaData rsmd, int columnCount) throws
       row.append(colname);
       if (i != columnCount) row.append(", ");
     }
-    debug(row.toString());
+    trace(row.toString());
   }
 
   private void printColumnValues(int columnCount) throws SQLException {
@@ -89,7 +89,7 @@ private void printColumnValues(int columnCount) throws SQLException {
       row.append(colname);
       if (i != columnCount) row.append(", ");
     }
-    debug(row.toString());
+    trace(row.toString());
   }
 
   /*

File: src/main/java/org/apache/ibatis/logging/jdbc/BaseJdbcLogger.java
Patch:
@@ -73,7 +73,7 @@ public BaseJdbcLogger(Log log) {
     EXECUTE_METHODS.add("execute");
     EXECUTE_METHODS.add("executeUpdate");
     EXECUTE_METHODS.add("executeQuery");
-
+    EXECUTE_METHODS.add("executeBatch");
   }
 
   protected void setColumn(Object key, Object value) {

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -103,7 +103,7 @@ public Object execute(Object[] args) {
   private void executeWithResultHandler(Object[] args) {
     MappedStatement ms = config.getMappedStatement(commandName);
     if (Void.TYPE.equals(ms.getResultMaps().get(0).getType())) {
-      throw new BindingException(method.getName() + ", annotated methods do not support ResultHandlers, use XML instead.");
+      throw new BindingException("method " + method.getName() + " needs either a @ResultMap annotation or a resultType attribute in XML so a ResultHandler can be used as a parameter.");
     }
     Object param = getParam(args);
     if (rowBoundsIndex != null) {

File: src/test/java/org/apache/ibatis/binding/BindingTest.java
Patch:
@@ -600,7 +600,6 @@ public void shouldSelectBlogWithDefault31ParamNames() {
     }
   }
 
-  @Ignore // TODO see issue #165 (using "value" fails if there is a dynamic variable)
   @Test
   public void shouldSelectBlogWithAParamNamedValue() {
     SqlSession session = sqlSessionFactory.openSession();

File: src/main/java/org/apache/ibatis/executor/keygen/Jdbc3KeyGenerator.java
Patch:
@@ -32,7 +32,7 @@
 
 public class Jdbc3KeyGenerator implements KeyGenerator {
 
-  public void processBefore(Executor executor, MappedStatement ms, Statement stmt, Object parameter) {
+  public void processBefore(Executor executor, MappedStatement ms, Object parameter) {
     // do nothing
   }
 

File: src/main/java/org/apache/ibatis/executor/keygen/KeyGenerator.java
Patch:
@@ -22,7 +22,7 @@
 
 public interface KeyGenerator {
 
-  void processBefore(Executor executor, MappedStatement ms, Statement stmt, Object parameter);
+  void processBefore(Executor executor, MappedStatement ms, Object parameter);
 
   void processAfter(Executor executor, MappedStatement ms, Statement stmt, Object parameter);
 

File: src/main/java/org/apache/ibatis/executor/keygen/NoKeyGenerator.java
Patch:
@@ -22,7 +22,7 @@
 
 public class NoKeyGenerator implements KeyGenerator {
 
-  public void processBefore(Executor executor, MappedStatement ms, Statement stmt, Object parameter) {
+  public void processBefore(Executor executor, MappedStatement ms, Object parameter) {
   }
 
   public void processAfter(Executor executor, MappedStatement ms, Statement stmt, Object parameter) {

File: src/test/java/org/apache/ibatis/binding/BoundAuthorMapper.java
Patch:
@@ -38,6 +38,8 @@ public interface BoundAuthorMapper {
 
   int insertAuthor(Author author);
 
+  int insertAuthorDynamic(Author author);
+
   //======================================================
 
   @ConstructorArgs({

File: src/main/java/org/apache/ibatis/executor/resultset/NestedResultSetHandler.java
Patch:
@@ -123,6 +123,7 @@ protected Object getRowValue(ResultSet rs, ResultMap resultMap, CacheKey combine
         final List<String> mappedColumnNames = resultColumnCache.getMappedColumnNames(resultMap, columnPrefix);
         foundValues = applyPropertyMappings(rs, resultMap, mappedColumnNames, metaObject, lazyLoader, columnPrefix) || foundValues;
         foundValues = applyNestedResultMappings(rs, resultMap, metaObject, columnPrefix, resultColumnCache, combinedKey) || foundValues;
+        foundValues = (lazyLoader != null && lazyLoader.size() > 0) || foundValues;
         resultObject = foundValues ? resultObject : null;
         ancestorCache.remove(rowKey);
       }

File: src/main/java/org/apache/ibatis/type/TypeReference.java
Patch:
@@ -31,7 +31,8 @@ public abstract class TypeReference<T> {
   protected TypeReference() {
     Type superclass = getClass().getGenericSuperclass();
     if (superclass instanceof Class) {
-      throw new RuntimeException("Missing type parameter.");
+      throw new TypeException("TypeHandler '" + getClass() + "' extends TypeReference but misses the type parameter. "
+        + "Remove the extension or add a type parameter to it.");
     }
     rawType = ((ParameterizedType) superclass).getActualTypeArguments()[0];
     // TODO remove this when Reflector is fixed to return Types

File: src/test/java/org/apache/ibatis/metadata/MetadataTest.java
Patch:
@@ -31,6 +31,7 @@ public class MetadataTest extends BaseDataTest {
   @Before
   public void setup() throws Exception {
     dataSource = createUnpooledDataSource(BaseDataTest.BLOG_PROPERTIES);
+    runScript(dataSource, BLOG_DDL);
   }
 
   @Test

File: src/test/java/org/apache/ibatis/submitted/parent_child_circular/ParentChildCircularTest.java
Patch:
@@ -22,11 +22,13 @@
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;
+import org.junit.Ignore;
 import org.junit.Test;
 import static org.junit.Assert.*;
 
 import javax.sql.DataSource;
 
+@Ignore // see issue #509
 public class ParentChildCircularTest extends BaseDataTest {
 
   @Test

File: src/test/java/org/apache/ibatis/submitted/cache/CacheTest.java
Patch:
@@ -26,10 +26,9 @@
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 
-@Ignore // TODO see issue #524
+// issue #524
 public class CacheTest {
 
   private static SqlSessionFactory sqlSessionFactory;

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -238,13 +238,14 @@ private void parseStatement(Method method) {
     if (sqlSource != null) {
       Options options = method.getAnnotation(Options.class);
       final String mappedStatementId = type.getName() + "." + method.getName();
-      boolean flushCache = false;
-      boolean useCache = true;
       Integer fetchSize = null;
       Integer timeout = null;
       StatementType statementType = StatementType.PREPARED;
       ResultSetType resultSetType = ResultSetType.FORWARD_ONLY;
       SqlCommandType sqlCommandType = getSqlCommandType(method);
+      boolean isSelect = sqlCommandType == SqlCommandType.SELECT;
+      boolean flushCache = !isSelect;
+      boolean useCache = isSelect;
 
       KeyGenerator keyGenerator;
       String keyProperty = "id";

File: src/main/java/org/apache/ibatis/cache/decorators/TransactionalCache.java
Patch:
@@ -63,6 +63,7 @@ public Object removeObject(Object key) {
   }
 
   public void clear() {
+    delegate.clear(); // issue #524 delegate should be cleared
     reset();
     clearOnCommit = true;
   }

File: src/main/java/org/apache/ibatis/builder/xml/dynamic/ForEachSqlNode.java
Patch:
@@ -55,7 +55,6 @@ public boolean apply(DynamicContext context) {
     for (Object o : iterable) {
       DynamicContext oldContext = context;
       if (first) {
-        first = false;
         context = new PrefixedContext(context, "");
       } else {
         if (separator != null) {
@@ -68,7 +67,7 @@ public boolean apply(DynamicContext context) {
       applyItem(context, o, uniqueNumber);
       applyIndex(context, i);
       contents.apply(new FilteredDynamicContext(configuration, context, item, uniqueNumber));
-      first = !((PrefixedContext) context).isPrefixApplied();
+      if (first) first = !((PrefixedContext) context).isPrefixApplied();
       context = oldContext;
       i++;
     }

File: src/test/java/org/apache/ibatis/submitted/custom_collection_handling/CustomObjectWrapper.java
Patch:
@@ -74,7 +74,7 @@ public void add(Object element) {
   }
 
   public <E> void addAll(List<E> element) {
-    ((CustomCollection<Object>) collection).add(element);
+    ((CustomCollection<Object>) collection).addAll(element);
   }
 
 }

File: src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java
Patch:
@@ -309,7 +309,7 @@ public void shouldSelectTwoSetsOfAuthorsViaProc() throws Exception {
     }
   }
 
-  @Test
+  @Test(expected=ExecutorException.class) // TODO see issue #464
   public void shouldSelectAuthorViaOutParams() throws Exception {
     DataSource ds = createBlogDataSource();
     Connection connection = ds.getConnection();

File: src/main/java/org/apache/ibatis/reflection/factory/DefaultObjectFactory.java
Patch:
@@ -84,7 +84,7 @@ private <T> T instantiateClass(Class<T> type, List<Class<?>> constructorArgTypes
     }
   }
 
-  private Class<?> resolveInterface(Class<?> type) {
+  protected Class<?> resolveInterface(Class<?> type) {
     Class<?> classToCreate;
     if (type == List.class || type == Collection.class) {
       classToCreate = ArrayList.class;

File: src/test/java/org/apache/ibatis/submitted/result_handler_type/PersonMapper.java
Patch:
@@ -24,7 +24,7 @@
 
 public interface PersonMapper {
   List<Person> doSelect();
-  
+
   @Select("select * from person")
   @MapKey("id")
   Map<Integer, Person> selectAsMap();

File: src/main/java/org/apache/ibatis/builder/SqlSourceBuilder.java
Patch:
@@ -132,7 +132,7 @@ private Map<String, String> parseParameterMapping(String content) {
           if (parameterProperties.contains(name)) {
             map.put(name, value);
           } else {
-            throw new BuilderException("An invalid property '" + name + "' was found in mapping " + content + ".  Valid properties are " + parameterProperties);
+            throw new BuilderException("An invalid property '" + name + "' was found in mapping #{" + content + "}.  Valid properties are " + parameterProperties);
           }
         } else {
           throw new BuilderException("Improper inline parameter map format.  Should be: #{propName,attr1=val1,attr2=val2}");

File: src/main/java/org/apache/ibatis/builder/SqlSourceBuilder.java
Patch:
@@ -122,7 +122,7 @@ private Map<String, String> parseParameterMapping(String content) {
       String property = extractPropertyName(propertyWithJdbcType);
       map.put("property", property);
       String jdbcType = extractJdbcType(propertyWithJdbcType);
-      map.put("jdbcType", jdbcType); // support old style #{property:TYPE} format
+      if (jdbcType != null) map.put("jdbcType", jdbcType); // support old style #{property:TYPE} format
       while (parameterMappingParts.hasMoreTokens()) {
         String attribute = parameterMappingParts.nextToken();
         StringTokenizer attributeParts = new StringTokenizer(attribute, "=");

File: src/test/java/com/ibatis/sqlmap/ResultObjectFactoryImpl.java
Patch:
@@ -64,7 +64,7 @@ public <T> T create(Class<T> type, List<Class<?>> constructorArgTypes, List<Obje
   public void setProperties(Properties properties) {
   }
 
-  public boolean isCollection(Class<?> type) {
+  public <T> boolean isCollection(Class<T> type) {
     return Collection.class.isAssignableFrom(type);
   }
 

File: src/test/java/org/apache/ibatis/submitted/result_handler_type/ObjectFactory.java
Patch:
@@ -87,7 +87,7 @@ private Class<?> resolveInterface(Class<?> type) {
   }
 
 
-  public boolean isCollection(Class<?> type) {
+  public <T> boolean isCollection(Class<T> type) {
     return Collection.class.isAssignableFrom(type);
   }
 

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -192,9 +192,7 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setDefaultExecutorType(ExecutorType.valueOf(stringValueOf(props.getProperty("defaultExecutorType"), "SIMPLE")));
       configuration.setDefaultStatementTimeout(integerValueOf(props.getProperty("defaultStatementTimeout"), null));
       configuration.setMapUnderscoreToCamelCase(booleanValueOf(props.getProperty("mapUnderscoreToCamelCase"), false));
-      configuration.setSafeRowBoundsEnabled(booleanValueOf(props.getProperty("safeRowBoundsEnabled"), true));
-      configuration.setDefaultListResultHandlerType(resolveClass(props.getProperty("defaultListResultHandlerType")));
-      configuration.setDefaultMapResultHandlerType(resolveClass(props.getProperty("defaultMapResultHandlerType")));
+      configuration.setSafeRowBoundsEnabled(booleanValueOf(props.getProperty("safeRowBoundsEnabled"), false));
       configuration.setClearLocalCacheAfterEachStatement(booleanValueOf(props.getProperty("flushLocalCacheAfterEachStatement"), false));
       configuration.setJdbcTypeForNull(JdbcType.valueOf(stringValueOf(props.getProperty("jdbcTypeForNull"), "OTHER")));
       configuration.setLazyLoadTriggerMethods(stringSetValueOf(props.getProperty("lazyLoadTriggerMethods"), "equals,clone,hashCode,toString"));

File: src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSession.java
Patch:
@@ -76,7 +76,7 @@ public <K, V> Map<K, V> selectMap(String statement, Object parameter, String map
   public <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {
     final List<?> list = selectList(statement, parameter, rowBounds);
     final DefaultMapResultHandler<K, V> mapResultHandler = new DefaultMapResultHandler<K, V>(mapKey,
-        configuration.getDefaultMapResultHandlerType());
+        configuration.getObjectFactory());
     final DefaultResultContext context = new DefaultResultContext();
     for (Object o : list) {
       context.nextResultObject(o);

File: src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java
Patch:
@@ -113,7 +113,7 @@ protected void handleRefCursorOutputParameter(CallableStatement cs, ParameterMap
     if (resultMapId != null) {
       final ResultMap resultMap = configuration.getResultMap(resultMapId);
       final DefaultResultHandler resultHandler = new DefaultResultHandler(configuration.getDefaultListResultHandlerType());
-      ResultColumnCache resultColumnCache = new ResultColumnCache(cs.getMetaData(), configuration);
+      ResultColumnCache resultColumnCache = new ResultColumnCache(rs.getMetaData(), configuration);
       handleRowValues(rs, resultMap, resultHandler, new RowBounds(), resultColumnCache);
       metaParam.setValue(parameterMapping.getProperty(), resultHandler.getResultList());
     } else {

File: src/test/java/org/apache/ibatis/binding/BoundBlogMapper.java
Patch:
@@ -111,6 +111,8 @@ public interface BoundBlogMapper {
 
   Blog selectBlogUsingConstructorWithResultMap(int i);
 
+  Blog selectBlogUsingConstructorWithResultMapCollection(int i);
+  
   Blog selectBlogByIdUsingConstructor(int id);
 
   //======================================================

File: src/main/java/org/apache/ibatis/builder/xml/dynamic/TextSqlNode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2011 The MyBatis Team
+ *    Copyright 2009-2012 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -52,7 +52,7 @@ public String handleToken(String content) {
           context.getBindings().put("value", parameter);
         }
         Object value = OgnlCache.getValue(content, context.getBindings());
-        return String.valueOf(value);
+        return (value == null ? "" : String.valueOf(value)); // issue #274 return "" instead of "null"
       } catch (OgnlException e) {
         throw new BuilderException("Error evaluating expression '" + content + "'. Cause: " + e, e);
       }

File: src/test/java/org/apache/ibatis/submitted/permissions/PermissionsTest.java
Patch:
@@ -53,8 +53,7 @@ public static void setUp() throws Exception {
     reader.close();
   }
 
-  @Ignore // see issue #168
-  @Test
+  @Test // see issue #168
   public void shouldGet4Permissions() {
     SqlSession sqlSession = sqlSessionFactory.openSession();
     try {

File: src/test/java/domain/blog/mappers/AuthorMapper.java
Patch:
@@ -34,6 +34,8 @@ public interface AuthorMapper {
 
   LinkedList<Author> selectAllAuthorsLinkedList();
 
+  Author[] selectAllAuthorsArray();
+
   void selectAllAuthors(ResultHandler handler);
 
   Author selectAuthor(int id);

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -116,7 +116,7 @@ private <E> Collection<E> executeForCollection(Object[] args) throws Exception {
       result = sqlSession.<E>selectList(commandName, param);
     }
     // issue #510 Collections support
-    if (!List.class.isAssignableFrom(method.getReturnType())) {
+    if (!method.getReturnType().isAssignableFrom(result.getClass())) {
       return convertToDeclaredCollection(result);
     }
     return result;

File: src/main/java/org/apache/ibatis/reflection/factory/DefaultObjectFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2011 The MyBatis Team
+ *    Copyright 2009-2012 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -81,6 +81,8 @@ private Class<?> resolveCollectionInterface(Class<?> type) {
       classToCreate = ArrayList.class;
     } else if (type == Map.class) {
       classToCreate = HashMap.class;
+    } else if (type == SortedSet.class) { // issue #510 Collections Support
+      classToCreate = TreeSet.class;
     } else if (type == Set.class) {
       classToCreate = HashSet.class;
     } else {

File: src/test/java/org/apache/ibatis/submitted/parametrizedlist/ParametrizedListTest.java
Patch:
@@ -111,5 +111,5 @@ public void testShouldGetAListOfMaps() throws Exception {
       sqlSession.close();
     }
   }
-  
+
 }

File: src/test/java/org/apache/ibatis/submitted/generictypes/Mapper.java
Patch:
@@ -4,7 +4,7 @@
 
 public interface Mapper {
 
-  @Select("select id, owner from groups where id=1")
+  @Select("select id, owner, members from groups where id=1")
   Group getGroup();
 
 }

File: src/test/java/org/apache/ibatis/submitted/generictypes/UserTypeHandler.java
Patch:
@@ -8,7 +8,7 @@
 import org.apache.ibatis.type.BaseTypeHandler;
 import org.apache.ibatis.type.JdbcType;
 
-public class UserTypeHandler<T> extends BaseTypeHandler<User<String>> {
+public class UserTypeHandler extends BaseTypeHandler<User<String>> {
 
   @Override
   public void setNonNullParameter(PreparedStatement ps, int i, User<String> parameter, JdbcType jdbcType) throws SQLException {

File: src/test/java/org/apache/ibatis/submitted/generictypes/GenericTypesTest.java
Patch:
@@ -23,13 +23,13 @@
 
 import junit.framework.Assert;
 
+import org.apache.ibatis.exceptions.PersistenceException;
 import org.apache.ibatis.io.Resources;
 import org.apache.ibatis.jdbc.ScriptRunner;
 import org.apache.ibatis.session.SqlSession;
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 
 public class GenericTypesTest {
@@ -63,7 +63,6 @@ public void setUp() throws Exception {
     }
   }
 
-  @Ignore
   @Test
   public void testShouldGetAListOfMaps() throws Exception {
     SqlSession sqlSession = sqlSessionFactory.openSession();

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -337,7 +337,7 @@ private Class<?> getReturnType(Method method) {
         }
       }
     } else if (method.isAnnotationPresent(MapKey.class) && Map.class.isAssignableFrom(returnType)) {
-      // (issue 503) Do not look into Maps if there is not MapKey annotation 
+      // (issue 504) Do not look into Maps if there is not MapKey annotation 
       Type returnTypeParameter = method.getGenericReturnType();
       if (returnTypeParameter instanceof ParameterizedType) {
         Type[] actualTypeArguments = ((ParameterizedType) returnTypeParameter).getActualTypeArguments();

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -337,7 +337,7 @@ private Class<?> getReturnType(Method method) {
         }
       }
     } else if (method.isAnnotationPresent(MapKey.class) && Map.class.isAssignableFrom(returnType)) {
-      // (issue 195) Do not look into Maps if there is not MapKey annotation 
+      // (issue 503) Do not look into Maps if there is not MapKey annotation 
       Type returnTypeParameter = method.getGenericReturnType();
       if (returnTypeParameter instanceof ParameterizedType) {
         Type[] actualTypeArguments = ((ParameterizedType) returnTypeParameter).getActualTypeArguments();

File: src/test/java/org/apache/ibatis/submitted/parametrizedlist/Mapper.java
Patch:
@@ -16,9 +16,9 @@ public interface Mapper {
   Map<Integer, User<String>> getAMapOfUsers();
 
   @Select("select id, name from users where id=1")
-  Map<Integer, Object> getUserAsAMap();
+  Map<String, Object> getUserAsAMap();
 
   @Select("select id, name from users")
-  List<Map<Integer, Object>> getAListOfMaps();
+  List<Map<String, Object>> getAListOfMaps();
   
 }

File: src/test/java/org/apache/ibatis/submitted/parametrizedlist/ParametrizedListTest.java
Patch:
@@ -93,7 +93,7 @@ public void testShouldGetAUserAsAMap() throws Exception {
     SqlSession sqlSession = sqlSessionFactory.openSession();
     try {
       Mapper mapper = sqlSession.getMapper(Mapper.class);
-      Map<Integer, Object> map = mapper.getUserAsAMap();
+      Map<String, Object> map = mapper.getUserAsAMap();
       Assert.assertEquals(1, map.get("ID"));
     } finally {
       sqlSession.close();
@@ -105,7 +105,7 @@ public void testShouldGetAListOfMaps() throws Exception {
     SqlSession sqlSession = sqlSessionFactory.openSession();
     try {
       Mapper mapper = sqlSession.getMapper(Mapper.class);
-      List<Map<Integer, Object>> map = mapper.getAListOfMaps();
+      List<Map<String, Object>> map = mapper.getAListOfMaps();
       Assert.assertEquals(1, map.get(0).get("ID"));
     } finally {
       sqlSession.close();

File: src/test/java/org/apache/ibatis/submitted/parametrizedlist/Mapper.java
Patch:
@@ -15,4 +15,7 @@ public interface Mapper {
   @MapKey("id")
   Map<Integer, User<String>> getUsersMap();
 
+  @Select("select id, name from users where id=1")
+  Map<Integer, Object> getUsersMap2();
+
 }

File: src/main/java/org/apache/ibatis/executor/BatchExecutor.java
Patch:
@@ -58,7 +58,7 @@ public int doUpdate(MappedStatement ms, Object parameterObject) throws SQLExcept
       BatchResult batchResult = batchResultList.get(last);
       batchResult.addParameterObject(parameterObject);
     } else {
-      final Connection connection = getConnection();
+      Connection connection = getConnection(ms.getId());
       stmt = handler.prepare(connection);
       currentSql = sql;
       currentStatement = ms;
@@ -77,7 +77,7 @@ public <E> List<E> doQuery(MappedStatement ms, Object parameterObject, RowBounds
       flushStatements();
       Configuration configuration = ms.getConfiguration();
       StatementHandler handler = configuration.newStatementHandler(this, ms, parameterObject, rowBounds, resultHandler, boundSql);
-      Connection connection = getConnection();
+      Connection connection = getConnection(ms.getId());
       stmt = handler.prepare(connection);
       handler.parameterize(stmt);
       return handler.<E>query(stmt, resultHandler);

File: src/main/java/org/apache/ibatis/logging/Log.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2011 The MyBatis Team
+ *    Copyright 2009-2012 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,8 +23,8 @@ public interface Log {
 
   void error(String s);
 
-  public void debug(String s);
+  void debug(String s);
 
-  public void warn(String s);
+  void warn(String s);
 
 }

File: src/main/java/org/apache/ibatis/logging/commons/JakartaCommonsLoggingImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2011 The MyBatis Team
+ *    Copyright 2009-2012 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -22,7 +22,7 @@ public class JakartaCommonsLoggingImpl implements org.apache.ibatis.logging.Log
 
   private Log log;
 
-  public JakartaCommonsLoggingImpl(Class<?> clazz) {
+  public JakartaCommonsLoggingImpl(String clazz) {
     log = LogFactory.getLog(clazz);
   }
 

File: src/main/java/org/apache/ibatis/logging/log4j/Log4jImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2011 The MyBatis Team
+ *    Copyright 2009-2012 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -22,7 +22,7 @@ public class Log4jImpl implements Log {
 
   private Logger log;
 
-  public Log4jImpl(Class<?> clazz) {
+  public Log4jImpl(String clazz) {
     log = Logger.getLogger(clazz);
   }
 
@@ -46,5 +46,4 @@ public void warn(String s) {
     log.warn(s);
   }
 
-
 }

File: src/main/java/org/apache/ibatis/logging/nologging/NoLoggingImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2011 The MyBatis Team
+ *    Copyright 2009-2012 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -19,7 +19,7 @@
 
 public class NoLoggingImpl implements Log {
 
-  public NoLoggingImpl(Class<?> clazz) {
+  public NoLoggingImpl(String clazz) {
   }
 
   public boolean isDebugEnabled() {

File: src/main/java/org/apache/ibatis/logging/slf4j/Slf4jImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2011 The MyBatis Team
+ *    Copyright 2009-2012 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@ public class Slf4jImpl implements Log {
 
   private Logger log;
 
-  public Slf4jImpl(Class<?> clazz) {
+  public Slf4jImpl(String clazz) {
     log = LoggerFactory.getLogger(clazz);
   }
 

File: src/main/java/org/apache/ibatis/logging/stdout/StdOutImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2009-2011 The MyBatis Team
+ *    Copyright 2009-2012 The MyBatis Team
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -19,7 +19,7 @@
 
 public class StdOutImpl implements Log {
 
-  public StdOutImpl(Class<?> clazz) {
+  public StdOutImpl(String clazz) {
   }
 
   public boolean isDebugEnabled() {

File: src/test/java/com/ibatis/dao/engine/transaction/jdbc/JdbcDaoTransaction.java
Patch:
@@ -41,14 +41,13 @@ public JdbcDaoTransaction(DataSource dataSource) {
         connection.setAutoCommit(false);
       }
       if (connectionLog.isDebugEnabled()) {
-        connection = ConnectionLogger.newInstance(connection);
+//        connection = ConnectionLogger.newInstance(connection);
       }
     } catch (SQLException e) {
       throw new DaoException("Error starting JDBC transaction.  Cause: " + e);
     }
   }
 
-
   public void commit() {
     try {
       try {

File: src/test/java/com/ibatis/sqlmap/engine/transaction/jdbc/JdbcTransaction.java
Patch:
@@ -46,7 +46,7 @@ public JdbcTransaction(Configuration configuration, DataSource ds, int isolation
   private void init() throws SQLException, TransactionException {
     // Open JDBC Transaction
     Connection connection = dataSource.getConnection();
-    connection = ConnectionLogger.newInstance(connection);        
+//    connection = ConnectionLogger.newInstance(connection);        
     if (connection == null) {
       throw new TransactionException("JdbcTransaction could not start transaction.  Cause: The DataSource returned a null connection.");
     }

File: src/test/java/org/apache/ibatis/executor/BaseExecutorTest.java
Patch:
@@ -335,7 +335,7 @@ public void shouldSelectAuthorViaOutParams() throws Exception {
   public void shouldFetchPostsForBlog() throws Exception {
     DataSource ds = createBlogDataSource();
     Connection connection = ds.getConnection();
-    connection = ConnectionLogger.newInstance(connection);
+//    connection = ConnectionLogger.newInstance(connection);
     Executor executor = createExecutor(new JdbcTransaction(connection));
     try {
       MappedStatement selectBlog = ExecutorTestHelper.prepareComplexSelectBlogMappedStatement(config);

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -268,7 +268,7 @@ private void parseStatement(Method method) {
       if (options != null) {
         flushCache = options.flushCache();
         useCache = options.useCache();
-        fetchSize = options.fetchSize() > -1 ? options.fetchSize() : null;
+        fetchSize = options.fetchSize() > -1 || options.fetchSize() == Integer.MIN_VALUE ? options.fetchSize() : null; //issue #348
         timeout = options.timeout() > -1 ? options.timeout() : null;
         statementType = options.statementType();
         resultSetType = options.resultSetType();

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -197,6 +197,7 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setDefaultMapResultHandlerType(resolveClass(props.getProperty("defaultMapResultHandlerType")));
       configuration.setClearLocalCacheAfterEachStatement(booleanValueOf(props.getProperty("flushLocalCacheAfterEachStatement"), false));
       configuration.setJdbcTypeForNull(JdbcType.valueOf(stringValueOf(props.getProperty("jdbcTypeForNull"), "OTHER")));
+      configuration.setLazyLoadTriggerMethods(stringSetValueOf(props.getProperty("lazyLoadTriggerMethods"), "equals,clone,hashCode,toString"));
     }
   }
 

File: src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java
Patch:
@@ -350,11 +350,11 @@ protected Object createResultObject(ResultSet rs, ResultMap resultMap, ResultLoa
     final List<Class<?>> constructorArgTypes = new ArrayList<Class<?>>();
     final List<Object> constructorArgs = new ArrayList<Object>();
     final Object resultObject = createResultObject(rs, resultMap, constructorArgTypes, constructorArgs, columnPrefix, resultColumnCache);
-    if (resultObject != null && configuration.isLazyLoadingEnabled()) {
+    if (resultObject != null && configuration.isLazyLoadingEnabled() && !typeHandlerRegistry.hasTypeHandler(resultMap.getType())) {
       final List<ResultMapping> propertyMappings = resultMap.getPropertyResultMappings();
       for (ResultMapping propertyMapping : propertyMappings) {
         if (propertyMapping.getNestedQueryId() != null) { // issue #109 (avoid creating proxies for leaf objects)
-          return ResultObjectProxy.createProxy(resultObject, lazyLoader, configuration.isAggressiveLazyLoading(), objectFactory, constructorArgTypes, constructorArgs);
+          return ResultObjectProxy.createProxy(resultObject, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);
         }
       }
     }

File: src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java
Patch:
@@ -448,7 +448,8 @@ protected Object getNestedQueryMappingValue(ResultSet rs, MetaObject metaResultO
     final Object nestedQueryParameterObject = prepareParameterForNestedQuery(rs, propertyMapping, nestedQueryParameterType, columnPrefix);
     Object value = null;
     if (nestedQueryParameterObject != null) {
-      final CacheKey key = executor.createCacheKey(nestedQuery, nestedQueryParameterObject, RowBounds.DEFAULT);
+      final BoundSql nestedBoundSql = nestedQuery.getBoundSql(nestedQueryParameterObject);
+      final CacheKey key = executor.createCacheKey(nestedQuery, nestedQueryParameterObject, RowBounds.DEFAULT, nestedBoundSql);
       if (executor.isCached(nestedQuery, key)) {
         executor.deferLoad(nestedQuery, metaResultObject, property, key);
       } else {

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -354,8 +354,8 @@ public ResultSetHandler newResultSetHandler(Executor executor, MappedStatement m
     return resultSetHandler;
   }
 
-  public StatementHandler newStatementHandler(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler) {
-    StatementHandler statementHandler = new RoutingStatementHandler(executor, mappedStatement, parameterObject, rowBounds, resultHandler);
+  public StatementHandler newStatementHandler(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) {
+    StatementHandler statementHandler = new RoutingStatementHandler(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql);
     statementHandler = (StatementHandler) interceptorChain.pluginAll(statementHandler);
     return statementHandler;
   }

File: src/main/java/org/apache/ibatis/mapping/ResultMap.java
Patch:
@@ -53,6 +53,9 @@ public Class<?> type() {
     }
 
     public ResultMap build() {
+      if (resultMap.id == null) {
+        throw new IllegalArgumentException("ResultMaps must have an id");
+      }
       resultMap.mappedColumns = new HashSet<String>();
       resultMap.idResultMappings = new ArrayList<ResultMapping>();
       resultMap.constructorResultMappings = new ArrayList<ResultMapping>();

File: src/main/java/org/apache/ibatis/type/JdbcType.java
Patch:
@@ -68,7 +68,7 @@ public enum JdbcType {
     this.TYPE_CODE = code;
   }
 
-  static JdbcType forCode(int code)  {
+  public static JdbcType forCode(int code)  {
     return codeLookup.get(code);
   }
 

File: src/main/java/org/apache/ibatis/type/UnknownTypeHandler.java
Patch:
@@ -66,7 +66,8 @@ private TypeHandler<?> resolveTypeHandler(Object parameter, JdbcType jdbcType) {
       handler = OBJECT_TYPE_HANDLER;
     } else {
       handler = typeHandlerRegistry.getTypeHandler(parameter.getClass(), jdbcType);
-      if (handler instanceof UnknownTypeHandler) {
+      // check if handler is null (issue #270)
+      if (handler == null || handler instanceof UnknownTypeHandler) {
         handler = OBJECT_TYPE_HANDLER;
       }
     }

File: src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java
Patch:
@@ -39,6 +39,7 @@ public final class TypeHandlerRegistry {
       put(Float.class, float.class);
       put(Double.class, double.class);
       put(Boolean.class, boolean.class);
+      put(Character.class, char.class);
     }
   };
 
@@ -124,7 +125,9 @@ public TypeHandlerRegistry() {
     register(java.sql.Time.class, new SqlTimeTypeHandler());
     register(java.sql.Timestamp.class, new SqlTimestampTypeHandler());
     
+    // issue #273
     register(Character.class, new CharacterTypeHandler());
+    register(char.class, new CharacterTypeHandler());
   }
 
   public boolean hasTypeHandler(Class<?> javaType) {

File: src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java
Patch:
@@ -123,6 +123,8 @@ public TypeHandlerRegistry() {
     register(java.sql.Date.class, new SqlDateTypeHandler());
     register(java.sql.Time.class, new SqlTimeTypeHandler());
     register(java.sql.Timestamp.class, new SqlTimestampTypeHandler());
+    
+    register(Character.class, new CharacterTypeHandler());
   }
 
   public boolean hasTypeHandler(Class<?> javaType) {

File: src/main/java/org/apache/ibatis/mapping/MappedStatement.java
Patch:
@@ -62,7 +62,7 @@ public Builder(Configuration configuration, String id, SqlSource sqlSource, SqlC
       mappedStatement.databaseId = databaseId;
       mappedStatement.sqlSource = sqlSource;
       mappedStatement.statementType = StatementType.PREPARED;
-      mappedStatement.parameterMap = new ParameterMap.Builder(configuration, "defaultParameterMap", Object.class, new ArrayList<ParameterMapping>()).build();
+      mappedStatement.parameterMap = new ParameterMap.Builder(configuration, "defaultParameterMap", null, new ArrayList<ParameterMapping>()).build();
       mappedStatement.resultMaps = new ArrayList<ResultMap>();
       mappedStatement.timeout = configuration.getDefaultStatementTimeout();
       mappedStatement.sqlCommandType = sqlCommandType;

File: src/test/java/org/apache/ibatis/submitted/complex_column/PersonMapper.java
Patch:
@@ -22,6 +22,7 @@ public interface PersonMapper {
     
     public Person getWithoutComplex(Long id);
     public Person getWithComplex(Long id);
+    public Person getParentWithComplex(Person person);
     
     @Select({
       "SELECT id, firstName, lastName, parent_id, parent_firstName, parent_lastName",

File: src/test/java/org/apache/ibatis/binding/BoundBlogMapper.java
Patch:
@@ -143,6 +143,9 @@ List<Post> selectPostsLikeSubjectAndBody(RowBounds bounds,
           "WHERE id = #{id} AND title = #{params.nonExistentParam,jdbcType=VARCHAR}")
   Blog selectBlogByNonExistentNestedParam(@Param("id") int id, @Param("params") Map<String, Object> params);
 
+  @Select("SELECT * FROM blog WHERE id = #{id}")
+  Blog selectBlogByNullParam(Integer id);
+
   //======================================================
 
   @Select("SELECT * FROM blog " +

File: src/main/java/org/apache/ibatis/session/Configuration.java
Patch:
@@ -503,7 +503,7 @@ public void addIncompleteResultMap(ResultMapResolver resultMapResolver) {
   }
 
   public MappedStatement getMappedStatement(String id) {
-    return this.getMappedStatement(id, false);
+    return this.getMappedStatement(id, true);
   }
 
   public MappedStatement getMappedStatement(String id, boolean validateIncompleteStatements) {
@@ -547,7 +547,7 @@ public boolean hasMapper(Class<?> type) {
   }
 
   public boolean hasStatement(String statementName) {
-    return hasStatement(statementName, false);
+    return hasStatement(statementName, true);
   }
   
   public boolean hasStatement(String statementName, boolean validateIncompleteStatements) {

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -269,7 +269,7 @@ public MappedStatement addMappedStatement(
     setStatementCache(isSelect, flushCache, useCache, currentCache, statementBuilder);
 
     MappedStatement statement = statementBuilder.build();
-    configuration.addMappedStatement(statement, databaseId);
+    configuration.addMappedStatement(statement);
     return statement;
   }
 

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -139,6 +139,7 @@ private Object getParam(Object[] args) {
       Map<String, Object> param = new HashMap<String, Object>();
       for (int i = 0; i < paramCount; i++) {
         param.put(paramNames.get(i), args[paramPositions.get(i)]);
+        param.put(String.valueOf(i), args[paramPositions.get(i)]); // compatibility with 3.0.x (issue #71)
       }
       return param;
     }
@@ -180,7 +181,7 @@ private void setupMethodSignature() {
           throw new BindingException(method.getName() + " cannot have multiple ResultHandler parameters");
         }
       } else {
-        String paramName = String.valueOf(paramPositions.size());
+        String paramName = "param" + String.valueOf(paramPositions.size() + 1);
         paramName = getParamNameFromAnnotation(i, paramName);
         paramNames.add(paramName);
         paramPositions.add(i);

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -204,6 +204,7 @@ private void createDiscriminatorResultMaps(String resultMapId, Class<?> resultTy
               hasNestedSelect(result) ? nestedSelectId(result) : null,
               null,
               null,
+              null,
               result.typeHandler() == UnknownTypeHandler.class ? null : result.typeHandler(),
               flags);
           resultMappings.add(resultMapping);
@@ -436,6 +437,7 @@ private void applyResults(Result[] results, Class<?> resultType, List<ResultMapp
             hasNestedSelect(result) ? nestedSelectId(result) : null,
             null,
             null,
+            null,
             result.typeHandler() == UnknownTypeHandler.class ? null : result.typeHandler(),
             flags);
         resultMappings.add(resultMapping);
@@ -474,6 +476,7 @@ private void applyConstructorArgs(Arg[] args, Class<?> resultType, List<ResultMa
             nullOrEmpty(arg.select()),
             nullOrEmpty(arg.resultMap()),
             null,
+            null,
             arg.typeHandler() == UnknownTypeHandler.class ? null : arg.typeHandler(),
             flags);
         resultMappings.add(resultMapping);

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -321,11 +321,12 @@ private ResultMapping buildResultMappingFromContext(XNode context, Class<?> resu
     String nestedResultMap = context.getStringAttribute("resultMap",
         processNestedResultMappings(context, Collections.EMPTY_LIST));
     String notNullColumn = context.getStringAttribute("notNullColumn");
+    String columnPrefix = context.getStringAttribute("columnPrefix");
     String typeHandler = context.getStringAttribute("typeHandler");
     Class<?> javaTypeClass = resolveClass(javaType);
     Class<? extends TypeHandler<?>> typeHandlerClass = (Class<? extends TypeHandler<?>>) resolveClass(typeHandler);
     JdbcType jdbcTypeEnum = resolveJdbcType(jdbcType);
-    return builderAssistant.buildResultMapping(resultType, property, column, javaTypeClass, jdbcTypeEnum, nestedSelect, nestedResultMap, notNullColumn, typeHandlerClass, flags);
+    return builderAssistant.buildResultMapping(resultType, property, column, javaTypeClass, jdbcTypeEnum, nestedSelect, nestedResultMap, notNullColumn, columnPrefix, typeHandlerClass, flags);
   }
 
   private String processNestedResultMappings(XNode context, List<ResultMapping> resultMappings) throws Exception {

File: src/test/java/org/apache/ibatis/submitted/valueinmap/ValueInMapTest.java
Patch:
@@ -76,7 +76,7 @@ public void testEncoding2() {
       map.put("column", "id");
       map.put("value", "1");
       
-      int count = sqlSession.selectOne("count", map);
+      Integer count = sqlSession.selectOne("count", map);
       assertTrue(count == 1);
       
     } finally {

File: src/test/java/org/apache/ibatis/submitted/null_with_no_jdbctype/NullWithNoJdbcTypeTest.java
Patch:
@@ -83,7 +83,7 @@ public void shouldFailAddingRowWithNullValueWithDerby() throws Exception {
         n = mapper.insertAuthor(new Author(99999, "barney", "******", "barney@iloveyou.com", null, Section.NEWS));
         fail("Expected exception.");
       } catch (Exception e) {
-        assertTrue(e.getMessage().contains("Error setting null parameter"));
+        assertTrue(e.getMessage().contains("Error setting null"));
       }
       session.rollback();
     } finally {

File: src/main/java/org/apache/ibatis/type/BaseTypeHandler.java
Patch:
@@ -39,7 +39,7 @@ public void setParameter(PreparedStatement ps, int i, T parameter, JdbcType jdbc
         ps.setNull(i, jdbcType.TYPE_CODE);
       } catch (SQLException e) {
         throw new TypeException("Error setting null for parameter #" + i + " with JdbcType " + jdbcType + " . " +
-        		"Try setting a different jdbcTypeForNull configuration propertiy or provide an explicit JdbcType for this parameter. " +
+        		"Try setting a different JdbcType for this parameter or a different jdbcTypeForNull configuration property. " +
         		"Cause: " + e, e);
       }
     } else {

File: src/main/java/org/apache/ibatis/type/BaseTypeHandler.java
Patch:
@@ -38,7 +38,9 @@ public void setParameter(PreparedStatement ps, int i, T parameter, JdbcType jdbc
       try {
         ps.setNull(i, jdbcType.TYPE_CODE);
       } catch (SQLException e) {
-        throw new TypeException("Error setting null parameter with jdbc type " + jdbcType + ". Try setting a different jdbcTypeForNull configuration propertiy or provide an explicit JdbcType for this parameter. Cause: " + e, e);
+        throw new TypeException("Error setting null for parameter #" + i + " with JdbcType " + jdbcType + " . " +
+        		"Try setting a different jdbcTypeForNull configuration propertiy or provide an explicit JdbcType for this parameter. " +
+        		"Cause: " + e, e);
       }
     } else {
       setNonNullParameter(ps, i, parameter, jdbcType);

File: src/main/java/org/apache/ibatis/parsing/PropertyParser.java
Patch:
@@ -34,7 +34,7 @@ public VariableTokenHandler(Properties variables) {
 
     public String handleToken(String content) {
       if (variables != null && variables.containsKey(content)) {
-        return variables == null ? content : variables.getProperty(content);
+        return variables.getProperty(content);
       } else {
         return "${" + content + "}";
       }

File: src/test/java/org/apache/ibatis/submitted/null_with_no_jdbctype/NullWithNoJdbcTypeTest.java
Patch:
@@ -85,7 +85,6 @@ public void shouldFailAddingRowWithNullValueWithDerby() throws Exception {
       } catch (Exception e) {
         assertTrue(e.getMessage().contains("Error setting null parameter"));
       }
-      n = mapper.insertAuthor(new Author(99999, "barney", "******", "barney@iloveyou.com", null, Section.NEWS));
       session.rollback();
     } finally {
       if (session != null)

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.ibatis.session.Configuration;
 import org.apache.ibatis.session.ExecutorType;
 import org.apache.ibatis.transaction.TransactionFactory;
+import org.apache.ibatis.type.JdbcType;
 import org.apache.ibatis.type.TypeHandler;
 
 public class XMLConfigBuilder extends BaseBuilder {
@@ -205,6 +206,7 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setDefaultListResultHandlerType(resolveClass(props.getProperty("defaultListResultHandlerType")));
       configuration.setDefaultMapResultHandlerType(resolveClass(props.getProperty("defaultMapResultHandlerType")));
       configuration.setClearLocalCacheAfterEachStatement(booleanValueOf(props.getProperty("flushLocalCacheAfterEachStatement"), false));
+      configuration.setJdbcTypeForNull(JdbcType.valueOf(stringValueOf(props.getProperty("jdbcTypeForNull"), "OTHER")));
     }
   }
 

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -204,6 +204,7 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setSafeRowBoundsEnabled(booleanValueOf(props.getProperty("safeRowBoundsEnabled"), true));
       configuration.setDefaultListResultHandlerType(resolveClass(props.getProperty("defaultListResultHandlerType")));
       configuration.setDefaultMapResultHandlerType(resolveClass(props.getProperty("defaultMapResultHandlerType")));
+      configuration.setClearLocalCacheAfterEachStatement(booleanValueOf(props.getProperty("flushLocalCacheAfterEachStatement"), false));
     }
   }
 

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -202,6 +202,8 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setDefaultStatementTimeout(integerValueOf(props.getProperty("defaultStatementTimeout"), null));
       configuration.setMapUnderscoreToCamelCase(booleanValueOf(props.getProperty("mapUnderscoreToCamelCase"), false));
       configuration.setSafeRowBoundsEnabled(booleanValueOf(props.getProperty("safeRowBoundsEnabled"), true));
+      configuration.setDefaultListResultHandlerType(resolveClass(props.getProperty("defaultListResultHandlerType")));
+      configuration.setDefaultMapResultHandlerType(resolveClass(props.getProperty("defaultMapResultHandlerType")));
     }
   }
 

File: src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSession.java
Patch:
@@ -75,7 +75,8 @@ public <K, V> Map<K, V> selectMap(String statement, Object parameter, String map
 
   public <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {
     final List<?> list = selectList(statement, parameter, rowBounds);
-    final DefaultMapResultHandler<K, V> mapResultHandler = new DefaultMapResultHandler<K, V>(mapKey);
+    final DefaultMapResultHandler<K, V> mapResultHandler = new DefaultMapResultHandler<K, V>(mapKey,
+        configuration.getDefaultMapResultHandlerType());
     final DefaultResultContext context = new DefaultResultContext();
     for (Object o : list) {
       context.nextResultObject(o);

File: src/main/java/org/apache/ibatis/builder/xml/dynamic/ExpressionEvaluator.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import ognl.Ognl;
 import ognl.OgnlException;
 
 import org.apache.ibatis.builder.BuilderException;
@@ -30,7 +29,7 @@ public class ExpressionEvaluator {
 
   public boolean evaluateBoolean(String expression, Object parameterObject) {
     try {
-      Object value = Ognl.getValue(expression, parameterObject);
+      Object value = OgnlCache.getValue(expression, parameterObject);
       if (value instanceof Boolean) return (Boolean) value;
       if (value instanceof Number) return !new BigDecimal(String.valueOf(value)).equals(BigDecimal.ZERO);
       return value != null;
@@ -41,7 +40,7 @@ public boolean evaluateBoolean(String expression, Object parameterObject) {
 
   public Iterable<?> evaluateIterable(String expression, Object parameterObject) {
     try {
-      Object value = Ognl.getValue(expression, parameterObject);
+      Object value = OgnlCache.getValue(expression, parameterObject);
       if (value == null) throw new SqlMapperException("The expression '" + expression + "' evaluated to a null value.");
       if (value instanceof Iterable) return (Iterable<?>) value;
       if (value.getClass().isArray()) {

File: src/test/java/org/apache/ibatis/submitted/force_flush_on_select/PersonMapper.java
Patch:
@@ -22,4 +22,5 @@ public interface PersonMapper {
     public Person selectByIdNoFlush(int id);
     public List<Person> selectAllFlush();
     public List<Person> selectAllNoFlush();
+    int update(Person p);
 }

File: src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSession.java
Patch:
@@ -75,13 +75,12 @@ public <K, V> Map<K, V> selectMap(String statement, Object parameter, String map
 
   public <K, V> Map<K, V> selectMap(String statement, Object parameter, String mapKey, RowBounds rowBounds) {
     final List<?> list = selectList(statement, parameter, rowBounds);
-    final DefaultMapResultHandler mapResultHandler = new DefaultMapResultHandler(mapKey);
+    final DefaultMapResultHandler<K, V> mapResultHandler = new DefaultMapResultHandler<K, V>(mapKey);
     final DefaultResultContext context = new DefaultResultContext();
     for (Object o : list) {
       context.nextResultObject(o);
       mapResultHandler.handleResult(context);
     }
-    @SuppressWarnings( "unchecked" ) // it would throw CCE in any case
     Map<K, V> selectedMap = mapResultHandler.getMappedResults();
     return selectedMap;
   }

File: src/main/java/org/apache/ibatis/mapping/SqlMapperException.java
Patch:
@@ -19,6 +19,8 @@
 
 public class SqlMapperException extends PersistenceException {
 
+  private static final long serialVersionUID = 4428144475952469726L;
+
   public SqlMapperException() {
     super();
   }

File: src/main/java/org/apache/ibatis/parsing/ParsingException.java
Patch:
@@ -18,6 +18,8 @@
 import org.apache.ibatis.exceptions.PersistenceException;
 
 public class ParsingException extends PersistenceException {
+  private static final long serialVersionUID = -176685891441325943L;
+
   public ParsingException() {
     super();
   }

File: src/main/java/org/apache/ibatis/plugin/PluginException.java
Patch:
@@ -19,6 +19,8 @@
 
 public class PluginException extends PersistenceException {
 
+  private static final long serialVersionUID = 8548771664564998595L;
+
   public PluginException() {
     super();
   }

File: src/main/java/org/apache/ibatis/reflection/ReflectionException.java
Patch:
@@ -19,6 +19,8 @@
 
 public class ReflectionException extends PersistenceException {
 
+  private static final long serialVersionUID = 7642570221267566591L;
+
   public ReflectionException() {
     super();
   }

File: src/main/java/org/apache/ibatis/session/SqlSessionException.java
Patch:
@@ -19,6 +19,8 @@
 
 public class SqlSessionException extends PersistenceException {
 
+  private static final long serialVersionUID = 3833184690240265047L;
+
   public SqlSessionException() {
     super();
   }

File: src/main/java/org/apache/ibatis/transaction/TransactionException.java
Patch:
@@ -19,6 +19,8 @@
 
 public class TransactionException extends PersistenceException {
 
+  private static final long serialVersionUID = -433589569461084605L;
+
   public TransactionException() {
     super();
   }

File: src/main/java/org/apache/ibatis/type/TypeException.java
Patch:
@@ -19,6 +19,8 @@
 
 public class TypeException extends PersistenceException {
 
+  private static final long serialVersionUID = 8614420898975117130L;
+
   public TypeException() {
     super();
   }

File: src/main/java/org/apache/ibatis/reflection/property/PropertyCopier.java
Patch:
@@ -19,8 +19,8 @@
 
 public class PropertyCopier {
 
-  public static void copyBeanProperties(Class type, Object sourceBean, Object destinationBean) {
-    Class parent = type;
+  public static void copyBeanProperties(Class<?> type, Object sourceBean, Object destinationBean) {
+    Class<?> parent = type;
     while (parent != null) {
       final Field[] fields = parent.getDeclaredFields();
       for(Field field : fields) {

File: src/main/java/org/apache/ibatis/reflection/wrapper/BeanWrapper.java
Patch:
@@ -67,7 +67,7 @@ public String[] getSetterNames() {
     return metaClass.getSetterNames();
   }
 
-  public Class getSetterType(String name) {
+  public Class<?> getSetterType(String name) {
     PropertyTokenizer prop = new PropertyTokenizer(name);
     if (prop.hasNext()) {
       MetaObject metaValue = metaObject.metaObjectForProperty(prop.getIndexedName());
@@ -81,7 +81,7 @@ public Class getSetterType(String name) {
     }
   }
 
-  public Class getGetterType(String name) {
+  public Class<?> getGetterType(String name) {
     PropertyTokenizer prop = new PropertyTokenizer(name);
     if (prop.hasNext()) {
       MetaObject metaValue = metaObject.metaObjectForProperty(prop.getIndexedName());
@@ -133,7 +133,7 @@ public boolean hasGetter(String name) {
 
   public MetaObject instantiatePropertyValue(String name, PropertyTokenizer prop, ObjectFactory objectFactory) {
     MetaObject metaValue;
-    Class type = getSetterType(prop.getName());
+    Class<?> type = getSetterType(prop.getName());
     try {
       Object newObject = objectFactory.create(type);
       metaValue = MetaObject.forObject(newObject, metaObject.getObjectFactory(), metaObject.getObjectWrapperFactory());

File: src/main/java/org/apache/ibatis/reflection/invoker/GetFieldInvoker.java
Patch:
@@ -29,7 +29,7 @@ public Object invoke(Object target, Object[] args) throws IllegalAccessException
     return field.get(target);
   }
 
-  public Class getType() {
+  public Class<?> getType() {
     return field.getType();
   }
 }

File: src/main/java/org/apache/ibatis/reflection/invoker/Invoker.java
Patch:
@@ -20,5 +20,5 @@
 public interface Invoker {
   Object invoke(Object target, Object[] args) throws IllegalAccessException, InvocationTargetException;
 
-  Class getType();
+  Class<?> getType();
 }

File: src/main/java/org/apache/ibatis/reflection/invoker/MethodInvoker.java
Patch:
@@ -20,7 +20,7 @@
 
 public class MethodInvoker implements Invoker {
 
-  private Class type;
+  private Class<?> type;
   private Method method;
 
   public MethodInvoker(Method method) {
@@ -37,7 +37,7 @@ public Object invoke(Object target, Object[] args) throws IllegalAccessException
     return method.invoke(target, args);
   }
 
-  public Class getType() {
+  public Class<?> getType() {
     return type;
   }
 }

File: src/main/java/org/apache/ibatis/reflection/invoker/SetFieldInvoker.java
Patch:
@@ -30,7 +30,7 @@ public Object invoke(Object target, Object[] args) throws IllegalAccessException
     return null;
   }
 
-  public Class getType() {
+  public Class<?> getType() {
     return field.getType();
   }
 }

File: src/main/java/org/apache/ibatis/mapping/CacheBuilder.java
Patch:
@@ -120,11 +120,11 @@ private Cache setStandardDecorators(Cache cache) {
   private void setCacheProperties(Cache cache) {
     if (properties != null) {
       MetaObject metaCache = MetaObject.forObject(cache);
-      for (Map.Entry entry : properties.entrySet()) {
+      for (Map.Entry<Object, Object> entry : properties.entrySet()) {
         String name = (String) entry.getKey();
         String value = (String) entry.getValue();
         if (metaCache.hasSetter(name)) {
-          Class type = metaCache.getSetterType(name);
+          Class<?> type = metaCache.getSetterType(name);
           if (String.class == type) {
             metaCache.setValue(name, value);
           } else if (int.class == type

File: src/main/java/org/apache/ibatis/executor/statement/PreparedStatementHandler.java
Patch:
@@ -48,11 +48,11 @@ public void batch(Statement statement)
     ps.addBatch();
   }
 
-  public List query(Statement statement, ResultHandler resultHandler)
+  public <E> List<E> query(Statement statement, ResultHandler resultHandler)
       throws SQLException {
     PreparedStatement ps = (PreparedStatement) statement;
     ps.execute();
-    return resultSetHandler.handleResultSets(ps);
+    return resultSetHandler.<E>handleResultSets(ps);
   }
 
   protected Statement instantiateStatement(Connection connection) throws SQLException {

File: src/main/java/org/apache/ibatis/executor/statement/SimpleStatementHandler.java
Patch:
@@ -62,11 +62,11 @@ public void batch(Statement statement)
     statement.addBatch(sql);
   }
 
-  public List query(Statement statement, ResultHandler resultHandler)
+  public <E> List<E> query(Statement statement, ResultHandler resultHandler)
       throws SQLException {
     String sql = boundSql.getSql();
     statement.execute(sql);
-    return resultSetHandler.handleResultSets(statement);
+    return resultSetHandler.<E>handleResultSets(statement);
   }
 
   protected Statement instantiateStatement(Connection connection) throws SQLException {

File: src/main/java/org/apache/ibatis/executor/result/DefaultResultHandler.java
Patch:
@@ -23,13 +23,13 @@
 
 public class DefaultResultHandler implements ResultHandler {
 
-  private final List list = new ArrayList();
+  private final List<Object> list = new ArrayList<Object>();
 
   public void handleResult(ResultContext context) {
     list.add(context.getResultObject());
   }
 
-  public List getResultList() {
+  public List<Object> getResultList() {
     return list;
   }
 

File: src/main/java/org/apache/ibatis/reflection/factory/ObjectFactory.java
Patch:
@@ -20,9 +20,9 @@
 
 public interface ObjectFactory {
 
-  Object create(Class type);
+  <T> T create(Class<T> type);
 
-  Object create(Class type, List<Class> constructorArgTypes, List<Object> constructorArgs);
+  <T> T create(Class<T> type, List<Class<?>> constructorArgTypes, List<Object> constructorArgs);
 
   void setProperties(Properties properties);
 

File: src/main/java/org/apache/ibatis/datasource/pooled/PoolState.java
Patch:
@@ -22,8 +22,8 @@ public class PoolState {
 
   protected PooledDataSource dataSource;
 
-  protected List idleConnections = new ArrayList();
-  protected List activeConnections = new ArrayList();
+  protected List<PooledConnection> idleConnections = new ArrayList<PooledConnection>();
+  protected List<PooledConnection> activeConnections = new ArrayList<PooledConnection>();
   protected long requestCount = 0;
   protected long accumulatedRequestTime = 0;
   protected long accumulatedCheckoutTime = 0;

File: src/main/java/org/apache/ibatis/datasource/pooled/PooledConnection.java
Patch:
@@ -26,7 +26,7 @@
 class PooledConnection implements InvocationHandler {
 
   private static final String CLOSE = "close";
-  private static final Class[] IFACES = new Class[]{Connection.class};
+  private static final Class<?>[] IFACES = new Class<?>[]{Connection.class};
 
   private int hashCode = 0;
   private PooledDataSource dataSource;

File: src/main/java/org/apache/ibatis/datasource/pooled/PooledDataSource.java
Patch:
@@ -362,6 +362,7 @@ private PooledConnection popConnection(String username, String password)
           if (state.activeConnections.size() < poolMaximumActiveConnections) {
             // Can create new connection
             conn = new PooledConnection(dataSource.getConnection(), this);
+            @SuppressWarnings("unused") //used in logging, if enabled
             Connection realConn = conn.getRealConnection();
             if (log.isDebugEnabled()) {
               log.debug("Created connection " + conn.getRealHashCode() + ".");

File: src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSource.java
Patch:
@@ -182,7 +182,7 @@ private void configureConnection(Connection conn) throws SQLException {
   private synchronized void initializeDriver() {
     if (!driverInitialized) {
       driverInitialized = true;
-      Class driverType;
+      Class<?> driverType;
       try {
         if (driverClassLoader != null) {
           driverType = Class.forName(driver, true, driverClassLoader);

File: src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSourceFactory.java
Patch:
@@ -60,7 +60,7 @@ public DataSource getDataSource() {
 
   private Object convertValue(MetaObject metaDataSource, String propertyName, String value) {
     Object convertedValue = value;
-    Class targetType = metaDataSource.getSetterType(propertyName);
+    Class<?> targetType = metaDataSource.getSetterType(propertyName);
     if (targetType == Integer.class || targetType == int.class) {
       convertedValue = Integer.valueOf(value);
     } else if (targetType == Long.class || targetType == long.class) {

File: src/main/java/org/apache/ibatis/executor/keygen/SelectKeyGenerator.java
Patch:
@@ -62,7 +62,7 @@ private void processGeneratedKeys(Executor executor, MappedStatement ms, Stateme
               // Do not close keyExecutor.
               // The transaction will be closed by parent executor.
               Executor keyExecutor = configuration.newExecutor(executor.getTransaction(), ExecutorType.SIMPLE);
-              List values = keyExecutor.query(keyStatement, parameter, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);
+              List<Object> values = keyExecutor.query(keyStatement, parameter, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);
               if (values.size() > 1) {
                 throw new ExecutorException("Select statement for SelectKeyGenerator returned more than one value.");
               }

File: src/main/java/org/apache/ibatis/executor/resultset/ResultSetHandler.java
Patch:
@@ -22,7 +22,7 @@
 
 public interface ResultSetHandler {
 
-  List handleResultSets(Statement stmt) throws SQLException;
+  <E> List<E> handleResultSets(Statement stmt) throws SQLException;
 
   void handleOutputParameters(CallableStatement cs) throws SQLException;
 

File: src/main/java/org/apache/ibatis/executor/statement/CallableStatementHandler.java
Patch:
@@ -51,11 +51,11 @@ public void batch(Statement statement)
     cs.addBatch();
   }
 
-  public List query(Statement statement, ResultHandler resultHandler)
+  public <E> List<E> query(Statement statement, ResultHandler resultHandler)
       throws SQLException {
     CallableStatement cs = (CallableStatement) statement;
     cs.execute();
-    List resultList = resultSetHandler.handleResultSets(cs);
+    List<E> resultList = resultSetHandler.<E>handleResultSets(cs);
     resultSetHandler.handleOutputParameters(cs);
     return resultList;
   }

File: src/main/java/org/apache/ibatis/executor/statement/RoutingStatementHandler.java
Patch:
@@ -66,8 +66,8 @@ public int update(Statement statement) throws SQLException {
     return delegate.update(statement);
   }
 
-  public List query(Statement statement, ResultHandler resultHandler) throws SQLException {
-    return delegate.query(statement, resultHandler);
+  public <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {
+    return delegate.<E>query(statement, resultHandler);
   }
 
   public BoundSql getBoundSql() {

File: src/main/java/org/apache/ibatis/executor/statement/StatementHandler.java
Patch:
@@ -38,7 +38,7 @@ void batch(Statement statement)
   int update(Statement statement)
       throws SQLException;
 
-  List query(Statement statement, ResultHandler resultHandler)
+  <E> List<E> query(Statement statement, ResultHandler resultHandler)
       throws SQLException;
 
   BoundSql getBoundSql();

File: src/main/java/org/apache/ibatis/builder/SqlSourceBuilder.java
Patch:
@@ -96,7 +96,7 @@ private ParameterMapping buildParameterMapping(String content) {
           } else if ("resultMap".equals(name)) {
             builder.resultMapId(value);
           } else if ("typeHandler".equals(name)) {
-            builder.typeHandler((TypeHandler) resolveInstance(value));
+            builder.typeHandler((TypeHandler<?>) resolveInstance(value));
           } else if ("jdbcTypeName".equals(name)) {
             builder.jdbcTypeName(value);
           }

File: src/main/java/org/apache/ibatis/type/BaseTypeHandler.java
Patch:
@@ -20,7 +20,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-public abstract class BaseTypeHandler<T> implements TypeHandler<T> {
+public abstract class BaseTypeHandler<T> extends TypeReference<T> implements TypeHandler<T> {
 
   public void setParameter(PreparedStatement ps, int i, T parameter, JdbcType jdbcType)
       throws SQLException {
@@ -58,7 +58,7 @@ public T getResult(ResultSet rs, int columnIndex)
       return result;
     }
   }
-  
+
   public T getResult(CallableStatement cs, int columnIndex)
       throws SQLException {
     T result = getNullableResult(cs, columnIndex);
@@ -77,7 +77,7 @@ public abstract T getNullableResult(ResultSet rs, String columnName)
 
   public abstract T getNullableResult(ResultSet rs, int columnIndex)
       throws SQLException;
-  
+
   public abstract T getNullableResult(CallableStatement cs, int columnIndex)
       throws SQLException;
 

File: src/main/java/org/apache/ibatis/parsing/XNode.java
Patch:
@@ -62,6 +62,7 @@ public String getValueBasedIdentifier() {
           current.getStringAttribute("value",
               current.getStringAttribute("property", null)));
       if (value != null) {
+        value = value.replace('.', '_');
         builder.insert(0, "]");
         builder.insert(0,
             value);

File: src/main/java/org/apache/ibatis/executor/BatchExecutor.java
Patch:
@@ -42,6 +42,7 @@ public int doUpdate(MappedStatement ms, Object parameterObject)
       stmt = statementList.get(last);
     } else {
       Connection connection = transaction.getConnection();
+      connection = wrapConnection(connection);
       stmt = handler.prepare(connection);
       currentSql = sql;
       statementList.add(stmt);
@@ -60,6 +61,7 @@ public List doQuery(MappedStatement ms, Object parameterObject, RowBounds rowBou
       Configuration configuration = ms.getConfiguration();
       StatementHandler handler = configuration.newStatementHandler(this, ms, parameterObject, rowBounds, resultHandler);
       Connection connection = transaction.getConnection();
+      connection = wrapConnection(connection);
       stmt = handler.prepare(connection);
       handler.parameterize(stmt);
       return handler.query(stmt, resultHandler);

File: src/main/java/org/apache/ibatis/executor/ReuseExecutor.java
Patch:
@@ -57,6 +57,7 @@ private Statement prepareStatement(StatementHandler handler)
       stmt = getStatement(sql);
     } else {
       Connection connection = transaction.getConnection();
+      connection = wrapConnection(connection);
       stmt = handler.prepare(connection);
       putStatement(sql, stmt);
     }

File: src/main/java/org/apache/ibatis/executor/SimpleExecutor.java
Patch:
@@ -52,6 +52,7 @@ public List doFlushStatements(boolean isRollback)
   private Statement prepareStatement(StatementHandler handler) throws SQLException {
     Statement stmt;
     Connection connection = transaction.getConnection();
+    connection = wrapConnection(connection);
     stmt = handler.prepare(connection);
     handler.parameterize(stmt);
     return stmt;

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoader.java
Patch:
@@ -83,10 +83,8 @@ private Executor newExecutor() throws SQLException {
       throw new ExecutorException("ResultLoader could not load lazily.  Environment was not configured.");
     DataSource ds = environment.getDataSource();
     if (ds == null) throw new ExecutorException("ResultLoader could not load lazily.  DataSource was not configured.");
-    Connection conn = ds.getConnection();
-    conn = wrapConnection(conn);
     final TransactionFactory transactionFactory = environment.getTransactionFactory();
-    Transaction tx = transactionFactory.newTransaction(conn, false);
+    Transaction tx = transactionFactory.newTransaction(ds, null, false);
     return configuration.newExecutor(tx, ExecutorType.SIMPLE);
   }
 

File: src/main/java/org/apache/ibatis/transaction/Transaction.java
Patch:
@@ -5,7 +5,7 @@
 
 public interface Transaction {
 
-  Connection getConnection();
+  Connection getConnection() throws SQLException;
 
   void commit() throws SQLException;
 

File: src/test/java/com/ibatis/sqlmap/engine/transaction/external/ExternalTransaction.java
Patch:
@@ -47,7 +47,7 @@ private void init() throws SQLException, TransactionException {
         connection.setAutoCommit(defaultAutoCommit);
       }
     }
-    executor = configuration.newExecutor(new JdbcTransaction(connection, false));
+    executor = configuration.newExecutor(new JdbcTransaction(connection));
   }
 
   public void commit(boolean required) throws SQLException, TransactionException {

File: src/test/java/com/ibatis/sqlmap/engine/transaction/jdbc/JdbcTransaction.java
Patch:
@@ -41,7 +41,7 @@ private void init() throws SQLException, TransactionException {
     if (connection.getAutoCommit()) {
       connection.setAutoCommit(false);
     }
-    executor = configuration.newExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(connection, false));
+    executor = configuration.newExecutor(new org.apache.ibatis.transaction.jdbc.JdbcTransaction(connection));
   }
 
   public void commit(boolean required) throws SQLException, TransactionException {

File: src/test/java/com/ibatis/sqlmap/engine/transaction/jta/JtaTransaction.java
Patch:
@@ -60,7 +60,7 @@ private void init() throws TransactionException, SQLException {
     if (connection.getAutoCommit()) {
       connection.setAutoCommit(false);
     }
-    executor = configuration.newExecutor(new JdbcTransaction(connection, false));
+    executor = configuration.newExecutor(new JdbcTransaction(connection));
   }
 
   public void commit(boolean required) throws SQLException, TransactionException {

File: src/test/java/com/ibatis/sqlmap/engine/transaction/user/UserProvidedTransaction.java
Patch:
@@ -14,7 +14,7 @@ public class UserProvidedTransaction extends BaseTransaction {
   private Executor executor;
 
   public UserProvidedTransaction(Configuration configuration, Connection connection) {
-    this.executor = configuration.newExecutor(new JdbcTransaction(connection, false));
+    this.executor = configuration.newExecutor(new JdbcTransaction(connection));
   }
 
   public void commit(boolean required) throws SQLException, TransactionException {

File: src/test/java/org/apache/ibatis/submitted/selectkey/AnnotatedMapper.java
Patch:
@@ -12,7 +12,7 @@ public interface AnnotatedMapper {
     int insertTable2(Name name);
     
     @Insert("insert into table2 (name) values(#{name})")
-    @Options(useGeneratedKeys=true, keyProperty="nameId")
+    @Options(useGeneratedKeys=true, keyProperty="nameId,generatedName", keyColumn="ID,NAME_FRED")
     int insertTable2WithOptions(Name name);
     
     @Insert("insert into table3 (id, name) values(#{nameId}, #{name})")

File: src/test/java/org/apache/ibatis/submitted/selectkey/SelectKeyTest.java
Patch:
@@ -120,6 +120,7 @@ public void testAnnotatedInsertTable2WithOptions() {
         int rows = mapper.insertTable2WithOptions(name);
         assertEquals(1, rows);
         assertEquals(22, name.getNameId());
+        assertEquals("barney_fred", name.getGeneratedName());
       } finally {
         sqlSession.close();
       }

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -281,7 +281,8 @@ private void parseStatement(Method method) {
           flushCache,
           useCache,
           keyGenerator,
-          keyProperty);
+          keyProperty,
+          null);
     }
   }
 
@@ -498,7 +499,7 @@ private KeyGenerator handleSelectKeyAnnotation(SelectKey selectKeyAnnotation, St
 
     assistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,
           fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,
-          resultSetTypeEnum, flushCache, useCache, keyGenerator, keyProperty);
+          resultSetTypeEnum, flushCache, useCache, keyGenerator, keyProperty, null);
 
     id = assistant.applyCurrentNamespace(id, false);
 

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -190,11 +190,13 @@ private void environmentsElement(XNode context) throws Exception {
       for (XNode child : context.getChildren()) {
         String id = child.getStringAttribute("id");
         if (isSpecifiedEnvironment(id)) {
+          String databaseId = child.getStringAttribute("databaseId");
           TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));
           DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));
           Environment.Builder environmentBuilder = new Environment.Builder(id)
               .transactionFactory(txFactory)
-              .dataSource(dsFactory.getDataSource());
+              .dataSource(dsFactory.getDataSource())
+              .databaseId(databaseId);
           configuration.setEnvironment(environmentBuilder.build());
         }
       }

File: src/main/java/org/apache/ibatis/type/TypeHandler.java
Patch:
@@ -13,6 +13,9 @@ public void setParameter(PreparedStatement ps, int i, T parameter, JdbcType jdbc
   public T getResult(ResultSet rs, String columnName)
       throws SQLException;
 
+  public T getResult(ResultSet rs, int columnIndex)
+          throws SQLException;
+  
   public T getResult(CallableStatement cs, int columnIndex)
       throws SQLException;
 

File: src/main/java/org/apache/ibatis/type/EnumTypeHandler.java
Patch:
@@ -15,9 +15,9 @@ public EnumTypeHandler(Class<E> type) {
 
   public void setNonNullParameter(PreparedStatement ps, int i, E parameter, JdbcType jdbcType) throws SQLException {
     if (jdbcType == null) {
-        ps.setString(i, parameter.toString());
+        ps.setString(i, parameter.name());
     } else {
-        ps.setObject(i, parameter.toString(), jdbcType.TYPE_CODE);
+        ps.setObject(i, parameter.name(), jdbcType.TYPE_CODE);
     }
   }
 

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -500,7 +500,7 @@ private KeyGenerator handleSelectKeyAnnotation(SelectKey selectKeyAnnotation, St
           fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,
           resultSetTypeEnum, flushCache, useCache, keyGenerator, keyProperty);
 
-    id = assistant.applyCurrentNamespace(id);
+    id = assistant.applyCurrentNamespace(id, false);
 
     MappedStatement keyStatement = configuration.getMappedStatement(id, false);
     SelectKeyGenerator answer = new SelectKeyGenerator(keyStatement, executeBefore);

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -12,7 +12,6 @@
 import java.util.Properties;
 
 import org.apache.ibatis.builder.BaseBuilder;
-import org.apache.ibatis.builder.BuilderException;
 import org.apache.ibatis.builder.CacheRefResolver;
 import org.apache.ibatis.builder.IncompleteCacheException;
 import org.apache.ibatis.builder.IncompleteResultMapException;
@@ -292,7 +291,7 @@ private Discriminator processDiscriminatorElement(XNode context, Class<?> result
   private void sqlElement(List<XNode> list) throws Exception {
     for (XNode context : list) {
       String id = context.getStringAttribute("id");
-      id = builderAssistant.applyCurrentNamespace(id);
+      id = builderAssistant.applyCurrentNamespace(id, false);
       sqlFragments.put(id, context);
     }
   }

File: src/main/java/org/apache/ibatis/builder/xml/dynamic/TrimSqlNode.java
Patch:
@@ -93,7 +93,7 @@ private void applyPrefix(StringBuilder sql, String trimmedUppercaseSql) {
       if (!prefixApplied) {
         prefixApplied = true;
         for (String toRemove : prefixesToOverride) {
-          if (trimmedUppercaseSql.startsWith(toRemove) || trimmedUppercaseSql.startsWith(toRemove.trim())) {
+          if (trimmedUppercaseSql.startsWith(toRemove)) {
             sql.delete(0, toRemove.trim().length());
             break;
           }

File: src/main/java/org/apache/ibatis/type/ArrayTypeHandler.java
Patch:
@@ -6,7 +6,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-public class ArrayTypeHandler extends BaseTypeHandler {
+public class ArrayTypeHandler extends BaseTypeHandler<Object> {
 
     public ArrayTypeHandler() {
         super();

File: src/main/java/org/apache/ibatis/type/MappedTypes.java
Patch:
@@ -8,5 +8,5 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)
 public @interface MappedTypes {
-	public Class[] value();
+	public Class<?>[] value();
 }

File: src/main/java/org/apache/ibatis/type/ObjectTypeHandler.java
Patch:
@@ -5,7 +5,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-public class ObjectTypeHandler extends BaseTypeHandler {
+public class ObjectTypeHandler extends BaseTypeHandler<Object> {
 
   public void setNonNullParameter(PreparedStatement ps, int i, Object parameter, JdbcType jdbcType)
       throws SQLException {

File: src/main/java/org/apache/ibatis/type/SimpleTypeRegistry.java
Patch:
@@ -6,7 +6,7 @@
 
 public class SimpleTypeRegistry {
 
-  private static final Set SIMPLE_TYPE_SET = new HashSet();
+  private static final Set<Class<?>> SIMPLE_TYPE_SET = new HashSet<Class<?>>();
 
   static {
     SIMPLE_TYPE_SET.add(String.class);
@@ -44,7 +44,7 @@ public class SimpleTypeRegistry {
    * @param clazz The class to check
    * @return True if the class is known
    */
-  public static boolean isSimpleType(Class clazz) {
+  public static boolean isSimpleType(Class<?> clazz) {
     if (SIMPLE_TYPE_SET.contains(clazz)) {
       return true;
     } else if (Collection.class.isAssignableFrom(clazz)) {

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -178,6 +178,7 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setDefaultExecutorType(ExecutorType.valueOf(stringValueOf(props.getProperty("defaultExecutorType"), "SIMPLE")));
       configuration.setDefaultStatementTimeout(integerValueOf(props.getProperty("defaultStatementTimeout"), null));
       configuration.setMapUnderscoreToCamelCase(booleanValueOf(props.getProperty("mapUnderscoreToCamelCase"), false));
+      configuration.setSafeRowBoundsEnabled(booleanValueOf(props.getProperty("safeRowBoundsEnabled"), true));      
     }
   }
 

File: src/main/java/org/apache/ibatis/executor/resultset/NestedResultSetHandler.java
Patch:
@@ -31,7 +31,9 @@ public NestedResultSetHandler(Executor executor, MappedStatement mappedStatement
     super(executor, mappedStatement, parameterHandler, resultHandler, boundSql, rowBounds);
     localRowValueCaches = new HashMap<CacheKey, Set<CacheKey>>();
     globalRowValueCache = new HashMap<CacheKey, Object>();
-    ensureNoRowBounds(rowBounds);
+    if (configuration.isSafeRowBoundsEnabled()) {
+      ensureNoRowBounds(rowBounds);
+    }
   }
 
   private void ensureNoRowBounds(RowBounds rowBounds) {

File: src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java
Patch:
@@ -269,11 +269,10 @@ protected Object getPropertyMappingValue(ResultSet rs, MetaObject metaResultObje
     return null;
   }
 
-  protected boolean applyAutomaticMappings(ResultSet rs, List<String> unmappedColumnNames, MetaObject metaObject, boolean useCamelCaseMapping) throws SQLException {
+  protected boolean applyAutomaticMappings(ResultSet rs, List<String> unmappedColumnNames, MetaObject metaObject, boolean mapUnderscoreToCamelCase ) throws SQLException {
     boolean foundValues = false;
     for (String columnName : unmappedColumnNames) {
-      final String propertyName = useCamelCaseMapping ? columnName.replace("_", "") : columnName;
-      final String property = metaObject.findProperty(propertyName);
+      final String property = metaObject.findProperty(columnName, mapUnderscoreToCamelCase );
       if (property != null) {
         final Class propertyType = metaObject.getSetterType(property);
         if (typeHandlerRegistry.hasTypeHandler(propertyType)) {

File: src/main/java/org/apache/ibatis/reflection/MetaObject.java
Patch:
@@ -62,8 +62,8 @@ public Object getOriginalObject() {
     return originalObject;
   }
 
-  public String findProperty(String propName) {
-    return objectWrapper.findProperty(propName);
+  public String findProperty(String propName, boolean useCamelCaseMapping) {    
+    return objectWrapper.findProperty(propName, useCamelCaseMapping);
   }
 
   public String[] getGetterNames() {

File: src/main/java/org/apache/ibatis/reflection/wrapper/MapWrapper.java
Patch:
@@ -34,7 +34,7 @@ public void set(PropertyTokenizer prop, Object value) {
     }
   }
 
-  public String findProperty(String name) {
+  public String findProperty(String name, boolean useCamelCaseMapping) {
     return name;
   }
 

File: src/main/java/org/apache/ibatis/reflection/wrapper/ObjectWrapper.java
Patch:
@@ -10,7 +10,7 @@ public interface ObjectWrapper {
 
   void set(PropertyTokenizer prop, Object value);
 
-  String findProperty(String name);
+  String findProperty(String name, boolean useCamelCaseMapping);
 
   String[] getGetterNames();
 

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -177,6 +177,7 @@ private void settingsElement(XNode context) throws Exception {
       configuration.setUseGeneratedKeys(booleanValueOf(props.getProperty("useGeneratedKeys"), false));
       configuration.setDefaultExecutorType(ExecutorType.valueOf(stringValueOf(props.getProperty("defaultExecutorType"), "SIMPLE")));
       configuration.setDefaultStatementTimeout(integerValueOf(props.getProperty("defaultStatementTimeout"), null));
+      configuration.setMapUnderscoreToCamelCase(booleanValueOf(props.getProperty("mapUnderscoreToCamelCase"), false));
     }
   }
 

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -281,8 +281,7 @@ private void parseStatement(Method method) {
           flushCache,
           useCache,
           keyGenerator,
-          keyProperty,
-          null);
+          keyProperty);
     }
   }
 
@@ -499,7 +498,7 @@ private KeyGenerator handleSelectKeyAnnotation(SelectKey selectKeyAnnotation, St
 
     assistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,
           fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,
-          resultSetTypeEnum, flushCache, useCache, keyGenerator, keyProperty, null);
+          resultSetTypeEnum, flushCache, useCache, keyGenerator, keyProperty);
 
     id = assistant.applyCurrentNamespace(id);
 

File: src/main/java/org/apache/ibatis/builder/xml/dynamic/DynamicContext.java
Patch:
@@ -3,6 +3,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import ognl.OgnlContext;
 import ognl.OgnlException;
 import ognl.OgnlRuntime;
 import ognl.PropertyAccessor;
@@ -13,7 +14,6 @@
 public class DynamicContext {
 
   public static final String PARAMETER_OBJECT_KEY = "_parameter";
-  public static final String ENVIRONMENT_KEY = "_environment";
 
   static {
     OgnlRuntime.setPropertyAccessor(ContextMap.class, new ContextAccessor());
@@ -31,7 +31,6 @@ public DynamicContext(Configuration configuration, Object parameterObject) {
       bindings = new ContextMap(null);
     }
     bindings.put(PARAMETER_OBJECT_KEY, parameterObject);
-    bindings.put(ENVIRONMENT_KEY, configuration.getEnvironment());
   }
 
   public Map<String, Object> getBindings() {

File: src/test/java/com/ibatis/sqlmap/engine/builder/XmlSqlMapConfigParser.java
Patch:
@@ -36,6 +36,7 @@ public XmlSqlMapConfigParser(Reader reader) {
     this.reader = reader;
     this.parser.addNodeletHandler(this);
     this.useStatementNamespaces = false;
+    this.parser.setEntityResolver(new SqlMapEntityResolver());
   }
 
   public XmlSqlMapConfigParser(Reader reader, Properties props) {

File: src/test/java/org/apache/ibatis/submitted/sptests/SPTest.java
Patch:
@@ -18,7 +18,6 @@
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.session.SqlSessionFactoryBuilder;
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 import org.junit.Test;
 
 public class SPTest {

File: src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java
Patch:
@@ -298,10 +298,8 @@ protected void loadMappedAndUnmappedColumnNames(ResultSet rs, ResultMap resultMa
       final String columnName = configuration.isUseColumnLabel() ? rsmd.getColumnLabel(i) : rsmd.getColumnName(i);
       final String upperColumnName = columnName.toUpperCase(Locale.ENGLISH);
       if (mappedColumns.contains(upperColumnName)) {
-        mappedColumnNames.add(upperColumnName);
         mappedColumnNames.add(columnName);
       } else {
-        unmappedColumnNames.add(upperColumnName);
         unmappedColumnNames.add(columnName);
       }
     }

File: src/main/java/org/apache/ibatis/migration/commands/BootstrapCommand.java
Patch:
@@ -5,7 +5,6 @@
 import org.apache.ibatis.migration.MigrationReader;
 
 import java.io.File;
-import java.io.FileReader;
 
 public class BootstrapCommand extends BaseCommand {
 
@@ -23,7 +22,7 @@ public void execute(String... params) {
           printStream.println(horizontalLine("Applying: bootstrap.sql", 80));
           ScriptRunner runner = getScriptRunner();
           try {
-            runner.runScript(new MigrationReader(new FileReader(bootstrap), false, environmentProperties()));
+            runner.runScript(new MigrationReader(scriptFileReader(bootstrap), false, environmentProperties()));
           } finally {
             runner.closeConnection();
           }

File: src/main/java/org/apache/ibatis/migration/commands/DownCommand.java
Patch:
@@ -1,7 +1,6 @@
 package org.apache.ibatis.migration.commands;
 
 import java.io.File;
-import java.io.FileReader;
 import java.sql.SQLException;
 import java.util.Collections;
 import java.util.List;
@@ -29,7 +28,7 @@ public void execute(String... params) {
           printStream.println(horizontalLine("Undoing: " + change.getFilename(), 80));
           ScriptRunner runner = getScriptRunner();
           try {
-            runner.runScript(new MigrationReader(new FileReader(scriptFile(change.getFilename())), true, environmentProperties()));
+            runner.runScript(new MigrationReader(scriptFileReader(scriptFile(change.getFilename())), true, environmentProperties()));
           } finally {
             runner.closeConnection();
           }

File: src/main/java/org/apache/ibatis/migration/commands/PendingCommand.java
Patch:
@@ -6,7 +6,6 @@
 import org.apache.ibatis.migration.MigrationReader;
 
 import java.io.File;
-import java.io.FileReader;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -28,7 +27,7 @@ public void execute(String... params) {
         printStream.println(horizontalLine("Applying: " + change.getFilename(), 80));
         ScriptRunner runner = getScriptRunner();
         try {
-          runner.runScript(new MigrationReader(new FileReader(scriptFile(change.getFilename())), false, environmentProperties()));
+          runner.runScript(new MigrationReader(scriptFileReader(scriptFile(change.getFilename())), false, environmentProperties()));
         } finally {
           runner.closeConnection();
         }

File: src/main/java/org/apache/ibatis/migration/commands/ScriptCommand.java
Patch:
@@ -5,7 +5,6 @@
 import org.apache.ibatis.migration.MigrationReader;
 
 import java.io.File;
-import java.io.FileReader;
 import java.io.IOException;
 import java.math.BigDecimal;
 import java.util.Collections;
@@ -41,8 +40,7 @@ public void execute(String... sparams) {
         if (shouldRun(change, v1, v2)) {
           printStream.println("-- " + change.getFilename());
           File file = scriptFile(change.getFilename());
-          FileReader fileReader = new FileReader(file);
-          MigrationReader migrationReader = new MigrationReader(fileReader, undo, variables);
+          MigrationReader migrationReader = new MigrationReader(scriptFileReader(file), undo, variables);
           char[] cbuf = new char[1024];
           int l;
           while ((l = migrationReader.read(cbuf)) == cbuf.length) {

File: src/main/java/org/apache/ibatis/migration/commands/UpCommand.java
Patch:
@@ -6,7 +6,6 @@
 import org.apache.ibatis.migration.MigrationReader;
 
 import java.io.File;
-import java.io.FileReader;
 import java.util.List;
 
 public class UpCommand extends BaseCommand {
@@ -35,7 +34,7 @@ public void execute(String... params) {
           printStream.println(horizontalLine("Applying: " + change.getFilename(), 80));
           ScriptRunner runner = getScriptRunner();
           try {
-            runner.runScript(new MigrationReader(new FileReader(scriptFile(change.getFilename())), false, environmentProperties()));
+            runner.runScript(new MigrationReader(scriptFileReader(scriptFile(change.getFilename())), false, environmentProperties()));
           } finally {
             runner.closeConnection();
           }

File: src/test/java/org/apache/ibatis/submitted/multidb/MultiDbTest.java
Patch:
@@ -3,6 +3,7 @@
 import static org.junit.Assert.assertEquals;
 
 import java.io.Reader;
+import java.nio.charset.Charset;
 import java.sql.Connection;
 import java.sql.DriverManager;
 
@@ -30,8 +31,6 @@ public static void setUp() throws Exception {
       Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/multidb/CreateDB.sql");
 
       ScriptRunner runner = new ScriptRunner(conn);
-      // make sure that the SQL file has been saved in UTF-8!
-      runner.setCharacterSetName("UTF-8");
       runner.setLogWriter(null);
       runner.setErrorLogWriter(null);
       runner.runScript(reader);

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -231,7 +231,6 @@ private ResultMap resultMapElement(XNode resultMapNode, List<ResultMapping> addi
         resultMapNode.getStringAttribute("ofType",
             resultMapNode.getStringAttribute("resultType",
                 resultMapNode.getStringAttribute("javaType"))));
-    String notNullColumn = resultMapNode.getStringAttribute("notNullColumn");
     String extend = resultMapNode.getStringAttribute("extends");
     Class<?> typeClass = resolveClass(type);
     Discriminator discriminator = null;
@@ -251,7 +250,7 @@ private ResultMap resultMapElement(XNode resultMapNode, List<ResultMapping> addi
         resultMappings.add(buildResultMappingFromContext(resultChild, typeClass, flags));
       }
     }
-    ResultMapResolver resultMapResolver = new ResultMapResolver(builderAssistant, id, typeClass, extend, discriminator, notNullColumn, resultMappings);
+    ResultMapResolver resultMapResolver = new ResultMapResolver(builderAssistant, id, typeClass, extend, discriminator, resultMappings);
     try {
       return resultMapResolver.resolve();
     } catch (IncompleteResultMapException e) {
@@ -306,11 +305,12 @@ private ResultMapping buildResultMappingFromContext(XNode context, Class<?> resu
     String nestedSelect = context.getStringAttribute("select");
     String nestedResultMap = context.getStringAttribute("resultMap",
         processNestedResultMappings(context, Collections.EMPTY_LIST));
+    String notNullColumn = context.getStringAttribute("notNullColumn");
     String typeHandler = context.getStringAttribute("typeHandler");
     Class<?> javaTypeClass = resolveClass(javaType);
     Class<? extends TypeHandler> typeHandlerClass = (Class<? extends TypeHandler>) resolveClass(typeHandler);
     JdbcType jdbcTypeEnum = resolveJdbcType(jdbcType);
-    return builderAssistant.buildResultMapping(resultType, property, column, javaTypeClass, jdbcTypeEnum, nestedSelect, nestedResultMap, typeHandlerClass, flags);
+    return builderAssistant.buildResultMapping(resultType, property, column, javaTypeClass, jdbcTypeEnum, nestedSelect, nestedResultMap, notNullColumn, typeHandlerClass, flags);
   }
 
   private String processNestedResultMappings(XNode context, List<ResultMapping> resultMappings) throws Exception {

File: src/main/java/org/apache/ibatis/executor/resultset/NestedResultSetHandler.java
Patch:
@@ -123,7 +123,7 @@ private boolean applyNestedResultMappings(ResultSet rs, ResultMap resultMap, Met
           final boolean knownValue = localRowValueCache.contains(rowKey);
           localRowValueCache.add(rowKey);
           Object rowValue = getRowValue(rs, nestedResultMap, rowKey);
-          Set<String> notNullColumns = nestedResultMap.getNotNullColumns();
+          Set<String> notNullColumns = resultMapping.getNotNullColumns();
           boolean anyNotNullColumnIsNotNull = true;
           if (notNullColumns != null && !notNullColumns.isEmpty()) {
         	  anyNotNullColumnIsNotNull = false;

File: src/test/java/org/apache/ibatis/submitted/not_null_column/Child.java
Patch:
@@ -1,6 +1,6 @@
 package org.apache.ibatis.submitted.not_null_column;
 
-public class Child {
+public class Child extends Base {
     private Integer id;
     private Integer fatherId;
     private String name;

File: src/test/java/org/apache/ibatis/submitted/not_null_column/Father.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.List;
 
-public class Father {
+public class Father extends Base {
     private Integer id;
     private String name;
     private List<Child> children;

File: src/test/java/org/apache/ibatis/submitted/not_null_column/FatherMapper.java
Patch:
@@ -4,6 +4,8 @@ public interface FatherMapper
 {
 	public Father selectByIdNoFid(Integer id);
     public Father selectByIdFid(Integer id);
+    public Father selectByIdWithInternalResultMap(Integer id);
+    public Father selectByIdWithRefResultMap(Integer id);
     public Father selectByIdFidMultipleNullColumns(Integer id);
     public Father selectByIdFidMultipleNullColumnsAndBrackets(Integer id);
     public Father selectByIdFidWorkaround(Integer id);

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -131,6 +131,9 @@ public ResultMap addResultMap(
 
     ResultMap.Builder resultMapBuilder = new ResultMap.Builder(configuration, id, type, resultMappings);
     if (extend != null) {
+      if (!configuration.hasResultMap(extend)) {
+        throw new IncompleteResultMapException("Could not find a parent resultmap with id '" + extend + "'");
+      }
       ResultMap resultMap = configuration.getResultMap(extend);
       List<ResultMapping> extendedResultMappings = new ArrayList<ResultMapping>(resultMap.getResultMappings());
       extendedResultMappings.removeAll(resultMappings);

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -216,6 +216,8 @@ private void databaseElement(XNode context, Environment.Builder builder) throws
         builder.databaseId(id);
       } else if (type != null) {
         DatabaseIdProvider databaseIdProvider = (DatabaseIdProvider) resolveClass(type).newInstance();
+        Properties props = context.getChildrenAsProperties();
+        databaseIdProvider.setProperties(props);
         builder.databaseIdProvider(databaseIdProvider);
       }
     }

File: src/main/java/org/apache/ibatis/mapping/DefaultDatabaseIdProvider.java
Patch:
@@ -36,11 +36,10 @@ public void setProperties(Properties p) {
   
   private String getDatabaseName(DataSource dataSource) throws SQLException {
     String productName = getDatabaseProductName(dataSource);
-    String databaseName = null;
     if (this.properties != null) {
       return this.properties.getProperty(productName);
     }
-    return databaseName;
+    return productName;
   }
 
   private String getDatabaseProductName(DataSource dataSource) throws SQLException {

File: src/test/java/org/apache/ibatis/submitted/multidb/ProviderTest.java
Patch:
@@ -33,6 +33,6 @@ public void shouldUseProvider() throws Exception {
     Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/multidb/ProviderConfig.xml");
     DefaultSqlSessionFactory sqlSessionFactory = (DefaultSqlSessionFactory) new SqlSessionFactoryBuilder().build(reader);
     Configuration c = sqlSessionFactory.getConfiguration();
-    assertEquals("discovered", c.getEnvironment().getDatabaseId());
+    assertEquals("translated", c.getEnvironment().getDatabaseId());
   }
 }

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -280,7 +280,8 @@ private void parseStatement(Method method) {
           flushCache,
           useCache,
           keyGenerator,
-          keyProperty);
+          keyProperty,
+          null);
     }
   }
 
@@ -491,7 +492,7 @@ private KeyGenerator handleSelectKeyAnnotation(SelectKey selectKeyAnnotation, St
 
     assistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,
           fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,
-          resultSetTypeEnum, flushCache, useCache, keyGenerator, keyProperty);
+          resultSetTypeEnum, flushCache, useCache, keyGenerator, keyProperty, null);
 
     id = assistant.applyCurrentNamespace(id);
 

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -188,11 +188,13 @@ private void environmentsElement(XNode context) throws Exception {
       for (XNode child : context.getChildren()) {
         String id = child.getStringAttribute("id");
         if (isSpecifiedEnvironment(id)) {
+          String databaseId = child.getStringAttribute("databaseId");
           TransactionFactory txFactory = transactionManagerElement(child.evalNode("transactionManager"));
           DataSourceFactory dsFactory = dataSourceElement(child.evalNode("dataSource"));
           Environment.Builder environmentBuilder = new Environment.Builder(id)
               .transactionFactory(txFactory)
-              .dataSource(dsFactory.getDataSource());
+              .dataSource(dsFactory.getDataSource())
+              .databaseId(databaseId);
           configuration.setEnvironment(environmentBuilder.build());
         }
       }

File: src/main/java/org/apache/ibatis/builder/xml/dynamic/DynamicContext.java
Patch:
@@ -3,7 +3,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import ognl.OgnlContext;
 import ognl.OgnlException;
 import ognl.OgnlRuntime;
 import ognl.PropertyAccessor;
@@ -14,6 +13,7 @@
 public class DynamicContext {
 
   public static final String PARAMETER_OBJECT_KEY = "_parameter";
+  public static final String ENVIRONMENT_KEY = "_environment";
 
   static {
     OgnlRuntime.setPropertyAccessor(ContextMap.class, new ContextAccessor());
@@ -31,6 +31,7 @@ public DynamicContext(Configuration configuration, Object parameterObject) {
       bindings = new ContextMap(null);
     }
     bindings.put(PARAMETER_OBJECT_KEY, parameterObject);
+    bindings.put(ENVIRONMENT_KEY, configuration.getEnvironment());
   }
 
   public Map<String, Object> getBindings() {

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -163,7 +163,7 @@ private void applyResultMap(String resultMapId, Class<?> returnType, Arg[] args,
     applyConstructorArgs(args, returnType, resultMappings);
     applyResults(results, returnType, resultMappings);
     Discriminator disc = applyDiscriminator(resultMapId, returnType, discriminator);
-    assistant.addResultMap(resultMapId, returnType, null, disc, resultMappings);
+    assistant.addResultMap(resultMapId, returnType, null, disc, null, resultMappings);
     createDiscriminatorResultMaps(resultMapId, returnType, discriminator);
   }
 
@@ -191,7 +191,7 @@ private void createDiscriminatorResultMaps(String resultMapId, Class<?> resultTy
               flags);
           resultMappings.add(resultMapping);
         }
-        assistant.addResultMap(caseResultMapId, type, resultMapId, null, resultMappings);
+        assistant.addResultMap(caseResultMapId, type, resultMapId, null, null, resultMappings);
       }
     }
   }

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -209,6 +209,7 @@ private ResultMap resultMapElement(XNode resultMapNode, List<ResultMapping> addi
         resultMapNode.getStringAttribute("ofType",
             resultMapNode.getStringAttribute("resultType",
                 resultMapNode.getStringAttribute("javaType"))));
+    String notNullColumn = resultMapNode.getStringAttribute("notNullColumn");
     String extend = resultMapNode.getStringAttribute("extends");
     Class<?> typeClass = resolveClass(type);
     Discriminator discriminator = null;
@@ -228,7 +229,7 @@ private ResultMap resultMapElement(XNode resultMapNode, List<ResultMapping> addi
         resultMappings.add(buildResultMappingFromContext(resultChild, typeClass, flags));
       }
     }
-    return builderAssistant.addResultMap(id, typeClass, extend, discriminator, resultMappings);
+    return builderAssistant.addResultMap(id, typeClass, extend, discriminator, notNullColumn, resultMappings);
   }
 
   private void processConstructorElement(XNode resultChild, Class<?> resultType, List<ResultMapping> resultMappings) throws Exception {

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -131,7 +131,9 @@ public ResultMap addResultMap(
     ResultMap.Builder resultMapBuilder = new ResultMap.Builder(configuration, id, type, resultMappings);
     if (extend != null) {
       ResultMap resultMap = configuration.getResultMap(extend);
-      resultMappings.addAll(resultMap.getResultMappings());
+      List<ResultMapping> extendedResultMappings = new ArrayList<ResultMapping>(resultMap.getResultMappings());
+      extendedResultMappings.removeAll(resultMappings);
+      resultMappings.addAll(extendedResultMappings);
     }
     resultMapBuilder.discriminator(discriminator);
     ResultMap resultMap = resultMapBuilder.build();

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -179,7 +179,7 @@ public void rollback(boolean required) throws SQLException {
     if (!closed) {
       try {
         clearLocalCache();
-        flushStatements(false);
+        flushStatements(true);
       } finally {
         if (required) {
           transaction.rollback();

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -105,7 +105,7 @@ public List query(MappedStatement ms, Object parameter, RowBounds rowBounds, Res
     try {
       queryStack++;
       CacheKey key = createCacheKey(ms, parameter, rowBounds);
-      list = (List) localCache.getObject(key);
+      list = resultHandler == null ? (List) localCache.getObject(key) : null;
       if (list != null) {
         handleLocallyCachedOutputParameters(ms, key, parameter);
       } else {

File: src/main/java/org/apache/ibatis/executor/CachingExecutor.java
Patch:
@@ -51,7 +51,7 @@ public List query(MappedStatement ms, Object parameterObject, RowBounds rowBound
         flushCacheIfRequired(ms);
         cache.getReadWriteLock().readLock().lock();
         try {
-          if (ms.isUseCache()) {
+          if (ms.isUseCache() && resultHandler == null) {
             CacheKey key = createCacheKey(ms, parameterObject, rowBounds);
             final List cachedList = (List) cache.getObject(key);
             if (cachedList != null) {

File: src/test/java/org/apache/ibatis/submitted/encoding/EncodingTest.java
Patch:
@@ -24,7 +24,7 @@ public static void setUp() throws Exception {
 
     try {
       Class.forName("org.hsqldb.jdbcDriver");
-      conn = DriverManager.getConnection("jdbc:hsqldb:mem:gname", "sa", "");
+      conn = DriverManager.getConnection("jdbc:hsqldb:mem:encoding", "sa", "");
 
       Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/encoding/CreateDB.sql");
 

File: src/main/java/org/apache/ibatis/jdbc/SelectBuilder.java
Patch:
@@ -87,7 +87,7 @@ public static String SQL() {
       }
       
       selectClause(builder, "FROM", sql().from, "", "", ", ");
-      selectClause(builder, "JOIN", sql().join, "", "", "JOIN");
+      selectClause(builder, "JOIN", sql().join, "", "", "\nJOIN ");
       selectClause(builder, "INNER JOIN", sql().innerJoin, "", "", "\nINNER JOIN ");
       selectClause(builder, "OUTER JOIN", sql().outerJoin, "", "", "\nOUTER JOIN ");
       selectClause(builder, "LEFT OUTER JOIN", sql().leftOuterJoin, "", "", "\nLEFT OUTER JOIN ");

File: src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java
Patch:
@@ -172,7 +172,7 @@ private String selectSQL() {
       }
 
       sqlClause(builder, "FROM", tables, "", "", ", ");
-      sqlClause(builder, "JOIN", join, "", "", "JOIN");
+      sqlClause(builder, "JOIN", join, "", "", "\nJOIN ");
       sqlClause(builder, "INNER JOIN", innerJoin, "", "", "\nINNER JOIN ");
       sqlClause(builder, "OUTER JOIN", outerJoin, "", "", "\nOUTER JOIN ");
       sqlClause(builder, "LEFT OUTER JOIN", leftOuterJoin, "", "", "\nLEFT OUTER JOIN ");

File: src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java
Patch:
@@ -222,6 +222,7 @@ protected Object getRowValue(ResultSet rs, ResultMap resultMap, CacheKey rowKey)
         foundValues = applyAutomaticMappings(rs, unmappedColumnNames, metaObject) || foundValues;
       }
       foundValues = applyPropertyMappings(rs, resultMap, mappedColumnNames, metaObject, lazyLoader) || foundValues;
+      foundValues = (lazyLoader != null && lazyLoader.size() > 0) || foundValues;
       resultObject = foundValues ? resultObject : null;
       return resultObject;
     }

File: src/test/java/org/apache/ibatis/binding/WrongNamespacesTest.java
Patch:
@@ -1,18 +1,17 @@
 package org.apache.ibatis.binding;
 
-import org.apache.ibatis.builder.BuilderException;
 import org.apache.ibatis.session.Configuration;
 import org.junit.Test;
 
 public class WrongNamespacesTest {
 
-  @Test(expected=BuilderException.class)
+  @Test(expected=RuntimeException.class)
   public void shouldFailForWrongNamespace() throws Exception {
     Configuration configuration = new Configuration();
     configuration.addMapper(WrongNamespaceMapper.class);
   }
 
-  @Test(expected=BuilderException.class)
+  @Test(expected=RuntimeException.class)
   public void shouldFailForMissingNamespace() throws Exception {
     Configuration configuration = new Configuration();
     configuration.addMapper(MissingNamespaceMapper.class);

File: src/main/java/org/apache/ibatis/executor/loader/ResultObjectProxy.java
Patch:
@@ -122,9 +122,9 @@ public Object intercept(Object enhanced, Method method, Object[] args, MethodPro
                 }
               }
             }
-            return methodProxy.invokeSuper(enhanced, args);
           }
         }
+        return methodProxy.invokeSuper(enhanced, args);
       } catch (Throwable t) {
         throw ExceptionUtil.unwrapThrowable(t);
       }

File: src/main/java/org/apache/ibatis/reflection/ExceptionUtil.java
Patch:
@@ -9,9 +9,9 @@ public static Throwable unwrapThrowable(Throwable wrapped) {
     Throwable unwrapped = wrapped;
     while (true) {
       if (unwrapped instanceof InvocationTargetException) {
-        unwrapped = ((InvocationTargetException) wrapped).getTargetException();
+        unwrapped = ((InvocationTargetException) unwrapped).getTargetException();
       } else if (unwrapped instanceof UndeclaredThrowableException) {
-        unwrapped = ((UndeclaredThrowableException) wrapped).getUndeclaredThrowable();
+        unwrapped = ((UndeclaredThrowableException) unwrapped).getUndeclaredThrowable();
       } else {
         return unwrapped;
       }

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -32,13 +32,12 @@ public String getCurrentNamespace() {
 
   public void setCurrentNamespace(String currentNamespace) {
     if (currentNamespace == null) {
-      throw new BuilderException(
-          "The mapper element requires a namespace attribute to be specified.");
+      throw new BuilderException("The mapper element requires a namespace attribute to be specified.");
     }
 
     if (this.currentNamespace != null && !this.currentNamespace.equals(currentNamespace)) {
       throw new BuilderException("Wrong namespace. Expected '"
-          + this.currentNamespace + "' but found '" + currentNamespace + "'");
+          + this.currentNamespace + "' but found '" + currentNamespace + "'.");
     }
 
     this.currentNamespace = currentNamespace;

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoader.java
Patch:
@@ -12,7 +12,6 @@
 import org.apache.ibatis.session.RowBounds;
 import org.apache.ibatis.transaction.Transaction;
 import org.apache.ibatis.transaction.TransactionFactory;
-import org.apache.ibatis.transaction.jdbc.JdbcTransaction;
 
 import javax.sql.DataSource;
 import java.sql.Connection;

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/ShortNameTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.junit.Test;
 
 public class ShortNameTest {
-    @Test
+    @Test(expected = IllegalArgumentException.class)
     public void getStatementByShortName() throws Exception {
         Configuration configuration = getConfiguration();
         // statement can be referenced by its short name.

File: src/main/java/org/apache/ibatis/executor/loader/ResultLoader.java
Patch:
@@ -11,6 +11,7 @@
 import org.apache.ibatis.session.ExecutorType;
 import org.apache.ibatis.session.RowBounds;
 import org.apache.ibatis.transaction.Transaction;
+import org.apache.ibatis.transaction.TransactionFactory;
 import org.apache.ibatis.transaction.jdbc.JdbcTransaction;
 
 import javax.sql.DataSource;
@@ -85,7 +86,8 @@ private Executor newExecutor() throws SQLException {
     if (ds == null) throw new ExecutorException("ResultLoader could not load lazily.  DataSource was not configured.");
     Connection conn = ds.getConnection();
     conn = wrapConnection(conn);
-    Transaction tx = new JdbcTransaction(conn, false);
+    final TransactionFactory transactionFactory = environment.getTransactionFactory();
+    Transaction tx = transactionFactory.newTransaction(conn, false);
     return configuration.newExecutor(tx, ExecutorType.SIMPLE);
   }
 

File: src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSessionFactory.java
Patch:
@@ -78,7 +78,7 @@ private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionI
       Transaction tx = transactionFactory.newTransaction(connection, autoCommit);
       Executor executor = configuration.newExecutor(tx, execType);
       return new DefaultSqlSession(configuration, executor, autoCommit);
-    } catch (SQLException e) {
+    } catch (Exception e) {
       closeConnection(connection);
       throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);
     } finally {

File: src/main/java/org/apache/ibatis/session/defaults/DefaultSqlSession.java
Patch:
@@ -165,8 +165,6 @@ public void close() {
     try {
       executor.close(isCommitOrRollbackRequired(false));
       dirty = false;
-    } catch (Exception e) {
-      throw ExceptionFactory.wrapException("Error closing transaction.  Cause: " + e, e);
     } finally {
       ErrorContext.instance().reset();
     }

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -89,7 +89,9 @@ public MapperAnnotationBuilder(Configuration configuration, Class<?> type) {
   public void parse() {
     String namespace = type.getName();
     assistant.setCurrentNamespace(namespace);
-    loadXmlResource(); // will load if not already loaded
+    if (!configuration.isResourceLoaded(namespace)) {
+      loadXmlResource();
+    }
     parseCache();
     parseCacheRef();
     Method[] methods = type.getMethods();

File: src/main/java/org/apache/ibatis/binding/MapperMethod.java
Patch:
@@ -70,7 +70,7 @@ public Object execute(Object[] args) {
         result = sqlSession.selectOne(commandName, param);
       }
     } else {
-      throw new BindingException("Unkown execution method for: " + commandName);
+      throw new BindingException("Unknown execution method for: " + commandName);
     }
     return result;
   }

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -330,7 +330,7 @@ private List<ResultMapping> parseCompositeColumnName(String columnName) {
         while (parser.hasMoreTokens()) {
           String property = parser.nextToken();
           String column = parser.nextToken();
-          ResultMapping.Builder complexBuilder = new ResultMapping.Builder(configuration, property, column, configuration.getTypeHandlerRegistry().getUnkownTypeHandler());
+          ResultMapping.Builder complexBuilder = new ResultMapping.Builder(configuration, property, column, configuration.getTypeHandlerRegistry().getUnknownTypeHandler());
           composites.add(complexBuilder.build());
         }
       }

File: src/main/java/org/apache/ibatis/datasource/unpooled/UnpooledDataSourceFactory.java
Patch:
@@ -31,7 +31,7 @@ public void setProperties(Properties properties) {
         Object convertedValue = convertValue(metaDataSource, propertyName, value);
         metaDataSource.setValue(propertyName, convertedValue);
       } else {
-        throw new DataSourceException("Unkown DataSource property: " + propertyName);
+        throw new DataSourceException("Unknown DataSource property: " + propertyName);
       }
     }
     if (driverProperties.size() > 0) {

File: src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java
Patch:
@@ -389,7 +389,7 @@ protected Object prepareSimpleKeyParameter(ResultSet rs, ResultMapping resultMap
     if (typeHandlerRegistry.hasTypeHandler(parameterType)) {
       typeHandler = typeHandlerRegistry.getTypeHandler(parameterType);
     } else {
-      typeHandler = typeHandlerRegistry.getUnkownTypeHandler();
+      typeHandler = typeHandlerRegistry.getUnknownTypeHandler();
     }
     return typeHandler.getResult(rs, resultMapping.getColumn());
   }

File: src/main/java/org/apache/ibatis/migration/CommandLine.java
Patch:
@@ -122,7 +122,7 @@ private void runCommand() {
         command = match;
         runCommand();
       } else {
-        throw new MigrationException("Attempt to execute unkown command: " + command);
+        throw new MigrationException("Attempt to execute unknown command: " + command);
       }
     }
   }

File: src/main/java/org/apache/ibatis/type/TypeHandlerRegistry.java
Patch:
@@ -135,7 +135,7 @@ public TypeHandler getTypeHandler(Class<?> type, JdbcType jdbcType) {
     return handler;
   }
 
-  public TypeHandler getUnkownTypeHandler() {
+  public TypeHandler getUnknownTypeHandler() {
     return UNKNOWN_TYPE_HANDLER;
   }
 

File: src/test/java/com/ibatis/sqlmap/engine/builder/XmlSqlMapParser.java
Patch:
@@ -328,7 +328,7 @@ public void sqlMapresultMapresult(XNode context) throws Exception {
           typeHandler = config.getTypeHandlerRegistry().getTypeHandler(resultType);
         }
       } else {
-        typeHandler = config.getTypeHandlerRegistry().getUnkownTypeHandler();
+        typeHandler = config.getTypeHandlerRegistry().getUnknownTypeHandler();
       }
     }
 
@@ -360,7 +360,7 @@ private List<ResultMapping> parseCompositeColumnName(String columnName) {
         while (parser.hasMoreTokens()) {
           String property = parser.nextToken();
           String column = parser.nextToken();
-          ResultMapping.Builder complexBuilder = new ResultMapping.Builder(config, property, column, config.getTypeHandlerRegistry().getUnkownTypeHandler());
+          ResultMapping.Builder complexBuilder = new ResultMapping.Builder(config, property, column, config.getTypeHandlerRegistry().getUnknownTypeHandler());
           composites.add(complexBuilder.build());
         }
       }
@@ -438,7 +438,7 @@ public void sqlMapparameterMapparameter(XNode context) throws Exception {
           typeHandler = config.getTypeHandlerRegistry().getTypeHandler(paramType);
         }
       } else {
-        typeHandler = config.getTypeHandlerRegistry().getUnkownTypeHandler();
+        typeHandler = config.getTypeHandlerRegistry().getUnknownTypeHandler();
       }
     }
 

File: src/test/java/com/ibatis/sqlmap/engine/builder/XmlSqlStatementParser.java
Patch:
@@ -205,7 +205,7 @@ private void buildSelectKeyStatement(String parentId, XNode context, boolean run
 
     final boolean runStatementFirst = "post".equalsIgnoreCase(context.getStringAttribute("type", runStatementFirstParam ? "post" : "pre"));
     final String keyStatementId = SqlMapSessionImpl.selectKeyIdFor(parentId);
-    TypeHandler typeHandler = configuration.getTypeHandlerRegistry().getUnkownTypeHandler();
+    TypeHandler typeHandler = configuration.getTypeHandlerRegistry().getUnknownTypeHandler();
     if (resultClassName != null) {
       final Class resultClass = configuration.getTypeAliasRegistry().resolveAlias(resultClassName);
       typeHandler = configuration.getTypeHandlerRegistry().getTypeHandler(resultClass);

File: src/test/java/org/apache/ibatis/type/TypeHandlerRegistryTest.java
Patch:
@@ -18,7 +18,7 @@ public void shouldRegisterAndRetrieveTypeHandler() {
     assertFalse(typeHandlerRegistry.hasTypeHandler(RichType.class));
     assertTrue(typeHandlerRegistry.hasTypeHandler(String.class, JdbcType.LONGVARCHAR));
     assertTrue(typeHandlerRegistry.hasTypeHandler(String.class, JdbcType.INTEGER));
-    assertTrue(typeHandlerRegistry.getUnkownTypeHandler() instanceof UnknownTypeHandler);
+    assertTrue(typeHandlerRegistry.getUnknownTypeHandler() instanceof UnknownTypeHandler);
   }
 
 }

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleCrossIncludeTest.java
Patch:
@@ -41,7 +41,7 @@ public void testMappedStatementCache() throws Exception {
     configReader.close();
 
     Configuration configuration = sqlSessionFactory.getConfiguration();
-    configuration.buildAllStatements();
+    configuration.getMappedStatementNames();
     
     MappedStatement selectPetStatement = configuration.getMappedStatement("org.apache.ibatis.submitted.xml_external_ref.MultipleCrossIncludePetMapper.select");
     MappedStatement selectPersonStatement = configuration.getMappedStatement("org.apache.ibatis.submitted.xml_external_ref.MultipleCrossIncludePersonMapper.select");

File: src/main/java/org/apache/ibatis/annotations/Options.java
Patch:
@@ -26,4 +26,6 @@
   public abstract boolean useGeneratedKeys() default false;
 
   public abstract String keyProperty() default "id";
+  
+  public abstract String keyColumn() default ""; 
 }

File: src/main/java/org/apache/ibatis/builder/annotation/MapperAnnotationBuilder.java
Patch:
@@ -233,9 +233,9 @@ private void parseStatement(Method method) {
             keyProperty = selectKey.keyProperty();
         } else {
           if (options == null) {
-              keyGenerator = configuration.isUseGeneratedKeys() ? new Jdbc3KeyGenerator() : new NoKeyGenerator();
+              keyGenerator = configuration.isUseGeneratedKeys() ? new Jdbc3KeyGenerator(null) : new NoKeyGenerator();
           } else {
-              keyGenerator = options.useGeneratedKeys() ? new Jdbc3KeyGenerator() : new NoKeyGenerator();
+              keyGenerator = options.useGeneratedKeys() ? new Jdbc3KeyGenerator(options.keyColumn()) : new NoKeyGenerator();
               keyProperty = options.keyProperty();
           }
         }

File: src/main/java/org/apache/ibatis/builder/xml/XMLStatementBuilder.java
Patch:
@@ -58,7 +58,7 @@ public void parseStatementNode(XNode context) {
     } else {
       keyGenerator = context.getBooleanAttribute("useGeneratedKeys",
           configuration.isUseGeneratedKeys() && SqlCommandType.INSERT.equals(sqlCommandType))
-          ? new Jdbc3KeyGenerator() : new NoKeyGenerator();
+          ? new Jdbc3KeyGenerator(context.getStringAttribute("keyColumn", null)) : new NoKeyGenerator();
     }
 
     builderAssistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,

File: src/main/java/org/apache/ibatis/mapping/MappedStatement.java
Patch:
@@ -46,7 +46,7 @@ public Builder(Configuration configuration, String id, SqlSource sqlSource, SqlC
       mappedStatement.timeout = configuration.getDefaultStatementTimeout();
       mappedStatement.sqlCommandType = sqlCommandType;
       mappedStatement.keyGenerator = configuration.isUseGeneratedKeys()
-          && SqlCommandType.INSERT.equals(sqlCommandType) ? new Jdbc3KeyGenerator() : new NoKeyGenerator();
+          && SqlCommandType.INSERT.equals(sqlCommandType) ? new Jdbc3KeyGenerator(null) : new NoKeyGenerator();
     }
 
     public Builder resource(String resource) {

File: src/test/java/org/apache/ibatis/executor/ExecutorTestHelper.java
Patch:
@@ -67,7 +67,7 @@ public static MappedStatement prepareInsertAuthorMappedStatementWithAutoKey(fina
               }
             }).build())
         .cache(authorCache)
-        .keyGenerator(new Jdbc3KeyGenerator())
+        .keyGenerator(new Jdbc3KeyGenerator(null))
         .keyProperty("id")
         .build();
     return ms;

File: src/main/java/org/apache/ibatis/builder/BaseBuilder.java
Patch:
@@ -13,6 +13,9 @@ public abstract class BaseBuilder {
   protected final TypeHandlerRegistry typeHandlerRegistry;
 
   public BaseBuilder(Configuration configuration) {
+    if (configuration == null) {
+      throw new BuilderException("Configuration parameter cannot be null");
+    }
     this.configuration = configuration;
     this.typeAliasRegistry = this.configuration.getTypeAliasRegistry();
     this.typeHandlerRegistry = this.configuration.getTypeHandlerRegistry();

File: src/main/java/org/apache/ibatis/executor/ReuseExecutor.java
Patch:
@@ -39,7 +39,7 @@ public List doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, R
     return handler.query(stmt, resultHandler);
   }
 
-  public List doFlushStatements()
+  public List doFlushStatements(boolean isRollback)
       throws SQLException {
     for (Statement stmt : statementMap.values()) {
       closeStatement(stmt);

File: src/main/java/org/apache/ibatis/executor/SimpleExecutor.java
Patch:
@@ -44,7 +44,7 @@ public List doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, R
     }
   }
 
-  public List doFlushStatements()
+  public List doFlushStatements(boolean isRollback)
       throws SQLException {
     return Collections.EMPTY_LIST;
   }

File: src/main/java/org/apache/ibatis/executor/BatchExecutor.java
Patch:
@@ -53,16 +53,17 @@ public int doUpdate(MappedStatement ms, Object parameterObject)
 
   public List doQuery(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler)
       throws SQLException {
+    Statement stmt = null;
     try {
       flushStatements();
       Configuration configuration = ms.getConfiguration();
       StatementHandler handler = configuration.newStatementHandler(this, ms, parameterObject, rowBounds, resultHandler);
       Connection connection = transaction.getConnection();
-      Statement stmt = handler.prepare(connection);
+      stmt = handler.prepare(connection);
       handler.parameterize(stmt);
       return handler.query(stmt, resultHandler);
     } finally {
-      flushStatements();
+      closeStatement(stmt);
     }
   }
 

File: src/main/java/org/apache/ibatis/io/ClassLoaderWrapper.java
Patch:
@@ -14,7 +14,7 @@ public class ClassLoaderWrapper {
   ClassLoaderWrapper() {
     try {
       systemClassLoader = ClassLoader.getSystemClassLoader();
-    } catch (Exception ignored) {
+    } catch (SecurityException ignored) {
       // AccessControlException on Google App Engine   
     }
   }

File: src/main/java/org/apache/ibatis/reflection/wrapper/ObjectWrapper.java
Patch:
@@ -16,9 +16,9 @@ public interface ObjectWrapper {
 
   String[] getSetterNames();
 
-  Class getSetterType(String name);
+  Class<?> getSetterType(String name);
 
-  Class getGetterType(String name);
+  Class<?> getGetterType(String name);
 
   boolean hasSetter(String name);
 

File: src/main/java/org/apache/ibatis/builder/MapperBuilderAssistant.java
Patch:
@@ -353,6 +353,8 @@ private Class<?> resolveParameterJavaType(Class<?> resultType, String property,
     if (javaType == null) {
       if (JdbcType.CURSOR.equals(jdbcType)) {
         javaType = java.sql.ResultSet.class;
+      } else if (Map.class.isAssignableFrom(resultType)) {
+        javaType = Object.class;
       } else {
         MetaClass metaResultType = MetaClass.forClass(resultType);
         javaType = metaResultType.getGetterType(property);

File: src/test/java/org/apache/ibatis/submitted/sptests/SPMapper.java
Patch:
@@ -6,6 +6,7 @@
 public interface SPMapper {
     Object adder(Parameter parameter);
     void adder2(Parameter parameter);
+    void adder3(Map<String, Object> parameter);
     Name getName(Integer id);
     List<Name> getNames(Map<String, Object> parms);
     List<Name> getNamesWithArray(Map<String, Object> parms);

File: src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java
Patch:
@@ -285,7 +285,7 @@ protected void loadMappedAndUnmappedColumnNames(ResultSet rs, ResultMap resultMa
   protected Object createResultObject(ResultSet rs, ResultMap resultMap, ResultLoaderMap lazyLoader) throws SQLException {
     final Object resultObject = createResultObject(rs, resultMap);
     if (resultObject != null && configuration.isLazyLoadingEnabled()) {
-      return ResultObjectProxy.createProxy(resultObject, lazyLoader, configuration.isAggressiveLazyLoading());
+      return ResultObjectProxy.createProxy(resultObject, lazyLoader, configuration.isAggressiveLazyLoading(), objectFactory);
     }
     return resultObject;
   }

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -209,6 +209,7 @@ private void sqlElement(List<XNode> list) throws Exception {
   private void bufferStatementNodes(List<XNode> list) {
     String currentNamespace = builderAssistant.getCurrentNamespace();
     configuration.addStatementNodes(currentNamespace, list);
+    configuration.addResource(currentNamespace, resource);
   }
 
   private ResultMapping buildResultMappingFromContext(XNode context, Class<?> resultType, ArrayList<ResultFlag> flags) throws Exception {

File: src/test/java/com/ibatis/common/util/NodeletParserTest.java
Patch:
@@ -28,9 +28,9 @@ public void shouldParseAttribute() throws Exception {
     assertEquals("Jim", emp.getFirstName());
     assertEquals("Smith", emp.getLastName());
     assertEquals(new Date(1970 - 1900, 6 - 1, 15), emp.getBirthDate());
-    assertEquals(5.8, emp.getHeight());
+    assertEquals(5.8, emp.getHeight(), 0.0001);
     assertEquals("ft", emp.getHeightUnits());
-    assertEquals(200, emp.getWeight());
+    assertEquals(200, emp.getWeight(), 0.0001);
     assertEquals("lbs", emp.getWeightUnits());
   }
 

File: src/test/java/org/apache/ibatis/jdbc/ScriptRunnerTest.java
Patch:
@@ -5,6 +5,8 @@
 import org.apache.ibatis.datasource.unpooled.UnpooledDataSource;
 import org.apache.ibatis.io.Resources;
 import static org.junit.Assert.*;
+
+import org.junit.Ignore;
 import org.junit.Test;
 
 import javax.sql.DataSource;
@@ -19,6 +21,7 @@
 public class ScriptRunnerTest extends BaseDataTest {
 
   @Test
+  @Ignore("This fails with HSQLDB 2.0 due to the create index statements in the schema script")
   public void shouldRunScriptsBySendingFullScriptAtOnce() throws Exception {
     DataSource ds = createUnpooledDataSource(JPETSTORE_PROPERTIES);
     Connection conn = ds.getConnection();

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleIncludeTest.java
Patch:
@@ -36,7 +36,7 @@ private void testMultipleIncludes(SqlSessionFactory sqlSessionFactory) throws Ex
     try {
       MultipleIncludePersonMapper personMapper = sqlSession.getMapper(MultipleIncludePersonMapper.class);
       Person person = personMapper.select(1);
-      assertEquals(1, person.getId());
+      assertEquals((Integer)1, person.getId());
       assertEquals("John", person.getName());
 
     } finally {

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/MultipleReverseIncludeTest.java
Patch:
@@ -36,7 +36,7 @@ private void testMultipleReverseIncludes(SqlSessionFactory sqlSessionFactory) th
     try {
       MultipleReverseIncludePersonMapper personMapper = sqlSession.getMapper(MultipleReverseIncludePersonMapper.class);
       Person person = personMapper.select(1);
-      assertEquals(1, person.getId());
+      assertEquals((Integer)1, person.getId());
       assertEquals("John", person.getName());
 
     } finally {

File: src/test/java/org/apache/ibatis/submitted/xml_external_ref/ReverseIncludeTest.java
Patch:
@@ -36,7 +36,7 @@ private void testReverseIncludes(SqlSessionFactory sqlSessionFactory) throws Exc
     try {
       ReverseIncludePersonMapper personMapper = sqlSession.getMapper(ReverseIncludePersonMapper.class);
       Person person = personMapper.select(1);
-      assertEquals(1, person.getId());
+      assertEquals((Integer)1, person.getId());
       assertEquals("John", person.getName());
 
     } finally {

File: src/test/java/org/apache/ibatis/submitted/sptests/SPMapper.java
Patch:
@@ -8,4 +8,5 @@ public interface SPMapper {
     void adder2(Parameter parameter);
     Name getName(Integer id);
     List<Name> getNames(Map<String, Object> parms);
+    List<Name> getNamesWithArray(Map<String, Object> parms);
 }

File: src/main/java/org/apache/ibatis/cache/CacheKey.java
Patch:
@@ -5,7 +5,7 @@
 
 public class CacheKey {
 
-  public static final CacheKey NULL_CACHE_KEY = new CacheKey();
+  public static final CacheKey NULL_CACHE_KEY = new NullCacheKey();
 
   private static final int DEFAULT_MULTIPLYER = 37;
   private static final int DEFAULT_HASHCODE = 17;

File: src/main/java/org/apache/ibatis/type/TypeAliasRegistry.java
Patch:
@@ -95,7 +95,9 @@ public void registerAliases(String packageName, Class superType){
     resolverUtil.find(new ResolverUtil.IsA(superType), packageName);
     Set<Class<? extends Class>> typeSet = resolverUtil.getClasses();
     for(Class type : typeSet){
-      registerAlias(type.getSimpleName(), type);
+      //Ignore inner classes
+      if (!type.isAnonymousClass())
+        registerAlias(type.getSimpleName(), type);
     }
   }
 

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -160,6 +160,7 @@ public void commit(boolean required) throws SQLException {
   public void rollback(boolean required) throws SQLException {
     if (!closed) {
       clearLocalCache();
+      flushStatements();
       if (required) {
         transaction.rollback();
       }

File: src/test/java/com/ibatis/sqlmap/RepeatingGroupMappingTest.java
Patch:
@@ -13,9 +13,9 @@ protected void setUp() throws Exception {
     initScript("com/scripts/jpetstore-hsqldb-dataload.sql");
   }
 
-  public void testShouldRetrieveTwoPeerLists() throws Exception {
+  public void testShouldRetrieveFiveCategories() throws Exception {
     List categories = sqlMap.queryForList("getAllCategoriesMap");
-    System.out.println(categories);
+    assertEquals(5,categories.size());
   }
 
   public void testGroupBy() throws Exception {

File: src/test/java/com/submitted/resultmap/PeerListResultTest.java
Patch:
@@ -100,8 +100,6 @@ public void test01() {
     try {
       List list = sqlMapClient.queryForList("TestSqlMap.test01", null);
 
-      System.out.println(list);
-
       assertEquals(2, list.size());
       Person person = (Person) list.get(0);
       assertEquals("Fred", person.getName());

File: src/test/java/org/apache/ibatis/BaseDataTest.java
Patch:
@@ -50,6 +50,7 @@ public static void runScript(DataSource ds, String resource) throws IOException,
       runner.setAutoCommit(true);
       runner.setStopOnError(false);
       runner.setLogWriter(null);
+      runner.setErrorLogWriter(null);
       runScript(runner, resource);
     } finally {
       connection.close();

File: src/test/java/org/apache/ibatis/cache/SoftCacheTest.java
Patch:
@@ -18,7 +18,7 @@ public void shouldDemonstrateObjectsBeingCollectedAsNeeded() throws Exception {
       cache.putObject(i, array);
       Object value = cache.getObject(i);
       if (cache.getSize() < i + 1) {
-        System.out.println("Cache exceeded with " + (i + 1) + " entries.");
+        //System.out.println("Cache exceeded with " + (i + 1) + " entries.");
         break;
       }
     }

File: src/test/java/org/apache/ibatis/cache/WeakCacheTest.java
Patch:
@@ -16,7 +16,7 @@ public void shouldDemonstrateObjectsBeingCollectedAsNeeded() {
     for (int i = 0; i < N; i++) {
       cache.putObject(i, i);
       if (cache.getSize() < i + 1) {
-        System.out.println("Cache exceeded with " + (i + 1) + " entries.");
+        //System.out.println("Cache exceeded with " + (i + 1) + " entries.");
         break;
       }
     }

File: src/test/java/org/apache/ibatis/submitted/cglib_lazy_error/CglibNPELazyTest.java
Patch:
@@ -31,7 +31,7 @@ public static void initDatabase() throws Exception {
 
       ScriptRunner runner = new ScriptRunner(conn);
       runner.setLogWriter(null);
-      runner.setErrorLogWriter(new PrintWriter(System.err));
+      runner.setErrorLogWriter(null);
       runner.runScript(reader);
       conn.commit();
       reader.close();

File: src/test/java/org/apache/ibatis/submitted/cglib_lazy_error/CglibNPETest.java
Patch:
@@ -31,7 +31,7 @@ public static void initDatabase() throws Exception {
 
       ScriptRunner runner = new ScriptRunner(conn);
       runner.setLogWriter(null);
-      runner.setErrorLogWriter(new PrintWriter(System.err));
+      runner.setErrorLogWriter(null);
       runner.runScript(reader);
       conn.commit();
       reader.close();

File: src/test/java/org/apache/ibatis/submitted/complex_column/ComplexColumnTest.java
Patch:
@@ -32,7 +32,7 @@ public static void initDatabase() throws Exception {
 
             ScriptRunner runner = new ScriptRunner(conn);
             runner.setLogWriter(null);
-            runner.setErrorLogWriter(new PrintWriter(System.err));
+            runner.setErrorLogWriter(null);
             runner.runScript(reader);
             conn.commit();
             reader.close();

File: src/test/java/org/apache/ibatis/submitted/complex_property/ComponentTest.java
Patch:
@@ -52,6 +52,8 @@ public void shouldInsertNestedPasswordFieldOfComplexType() throws Exception {
   private static void runDBScript() throws SQLException, IOException {
     Connection conn = sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
     ScriptRunner runner = new ScriptRunner(conn);
+    runner.setLogWriter(null);
+    runner.setErrorLogWriter(null);
     String resource = "org/apache/ibatis/submitted/complex_property/db/db.sql";
     Reader reader = Resources.getResourceAsReader(resource);
     runner.runScript(reader);

File: src/test/java/org/apache/ibatis/submitted/count/CountTest.java
Patch:
@@ -31,7 +31,7 @@ public static void setUp() throws Exception {
 
       ScriptRunner runner = new ScriptRunner(conn);
       runner.setLogWriter(null);
-      runner.setErrorLogWriter(new PrintWriter(System.err));
+      runner.setErrorLogWriter(null);
       runner.runScript(reader);
       conn.commit();
       reader.close();

File: src/test/java/org/apache/ibatis/submitted/criterion/CriterionTest.java
Patch:
@@ -33,7 +33,7 @@ public static void setUp() throws Exception {
 
       ScriptRunner runner = new ScriptRunner(conn);
       runner.setLogWriter(null);
-      runner.setErrorLogWriter(new PrintWriter(System.err));
+      runner.setErrorLogWriter(null);
       runner.runScript(reader);
       conn.commit();
       reader.close();

File: src/test/java/org/apache/ibatis/submitted/dynsql/DynSqlTest.java
Patch:
@@ -30,8 +30,8 @@ public static void setUp() throws Exception {
 
       Reader scriptReader = Resources.getResourceAsReader("org/apache/ibatis/submitted/dynsql/CreateDB.sql");
       ScriptRunner runner = new ScriptRunner(conn);
-//      runner.setLogWriter(null);
-//      runner.setErrorLogWriter(null);
+      runner.setLogWriter(null);
+      runner.setErrorLogWriter(null);
       runner.runScript(scriptReader);
       conn.commit();
       scriptReader.close();

File: src/test/java/org/apache/ibatis/submitted/dynsql2/DynSqlTest.java
Patch:
@@ -36,7 +36,7 @@ public static void setUp() throws Exception {
 
       ScriptRunner runner = new ScriptRunner(conn);
       runner.setLogWriter(null);
-      runner.setErrorLogWriter(new PrintWriter(System.err));
+      runner.setErrorLogWriter(null);
       runner.runScript(reader);
       conn.commit();
       reader.close();

File: src/test/java/org/apache/ibatis/submitted/enumtypehandler_on_map/EnumTypeHandlerTest.java
Patch:
@@ -34,7 +34,7 @@ public static void initDatabase() throws Exception {
 
             ScriptRunner runner = new ScriptRunner(conn);
             runner.setLogWriter(null);
-            runner.setErrorLogWriter(new PrintWriter(System.err));
+            runner.setErrorLogWriter(null);
             runner.runScript(reader);
             conn.commit();
             reader.close();

File: src/test/java/org/apache/ibatis/submitted/flush_statement_npe/FlushStatementNpeTest.java
Patch:
@@ -31,7 +31,7 @@ public static void initDatabase() throws Exception {
 
             ScriptRunner runner = new ScriptRunner(conn);
             runner.setLogWriter(null);
-            runner.setErrorLogWriter(new PrintWriter(System.err));
+            runner.setErrorLogWriter(null);
             runner.runScript(reader);
             conn.commit();
             reader.close();

File: src/test/java/org/apache/ibatis/submitted/initialized_collection_property/AuthorDAOTest.java
Patch:
@@ -27,6 +27,8 @@ public void testGetMessageForEmptyDatabase() throws Exception {
 
     Connection conn = session.getConnection();
     ScriptRunner runner = new ScriptRunner(conn);
+    runner.setLogWriter(null);
+    runner.setErrorLogWriter(null);
     reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/initialized_collection_property/db/create.sql");
     runner.runScript(reader);
     session.close();

File: src/test/java/org/apache/ibatis/submitted/lazyload_common_property/CommonPropertyLazyLoadError.java
Patch:
@@ -30,7 +30,7 @@ public static void initDatabase() throws Exception {
 
             ScriptRunner runner = new ScriptRunner(conn);
             runner.setLogWriter(null);
-            runner.setErrorLogWriter(new PrintWriter(System.err));
+            runner.setErrorLogWriter(null);
             runner.runScript(reader);
             conn.commit();
             reader.close();

File: src/test/java/org/apache/ibatis/submitted/multiple_discriminator/MultipleDiscriminatorTest.java
Patch:
@@ -31,7 +31,7 @@ public static void initDatabase() throws Exception {
 
             ScriptRunner runner = new ScriptRunner(conn);
             runner.setLogWriter(null);
-            runner.setErrorLogWriter(new PrintWriter(System.err));
+            runner.setErrorLogWriter(null);
             runner.runScript(reader);
             conn.commit();
             reader.close();

File: src/test/java/org/apache/ibatis/submitted/nested/NestedForEachTest.java
Patch:
@@ -33,7 +33,7 @@ public static void setUp() throws Exception {
 
       ScriptRunner runner = new ScriptRunner(conn);
       runner.setLogWriter(null);
-      runner.setErrorLogWriter(new PrintWriter(System.err));
+      runner.setErrorLogWriter(null);
       runner.runScript(reader);
       conn.commit();
       reader.close();

File: src/test/java/org/apache/ibatis/submitted/null_associations/FooMapperTest.java
Patch:
@@ -22,6 +22,8 @@ public static void setUpBeforeClass() {
       session = factory.openSession();
       Connection conn = session.getConnection();
       ScriptRunner runner = new ScriptRunner(conn);
+      runner.setLogWriter(null);
+      runner.setErrorLogWriter(null);
       Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/null_associations/create-schema-mysql.sql");
       runner.runScript(reader);
     } catch (Exception ex) {

File: src/test/java/org/apache/ibatis/submitted/ognl_enum/EnumWithOgnlTest.java
Patch:
@@ -34,7 +34,7 @@ public static void initDatabase() throws Exception {
 
             ScriptRunner runner = new ScriptRunner(conn);
             runner.setLogWriter(null);
-            runner.setErrorLogWriter(new PrintWriter(System.err));
+            runner.setErrorLogWriter(null);
             runner.runScript(reader);
             conn.commit();
             reader.close();

File: src/test/java/org/apache/ibatis/submitted/overwritingproperties/FooMapperTest.java
Patch:
@@ -23,6 +23,8 @@ public static void setUpBeforeClass() {
       session = factory.openSession();
       Connection conn = session.getConnection();
       ScriptRunner runner = new ScriptRunner(conn);
+      runner.setLogWriter(null);
+      runner.setErrorLogWriter(null);
       Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/overwritingproperties/create-schema-mysql.sql");
       runner.runScript(reader);
     } catch (Exception ex) {

File: src/test/java/org/apache/ibatis/submitted/quotedcolumnnames/QuotedColumnNamesTest.java
Patch:
@@ -30,7 +30,7 @@ public static void setUp() throws Exception {
 			Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/quotedcolumnnames/CreateDB.sql");
 			ScriptRunner runner = new ScriptRunner(conn);
 			runner.setLogWriter(null);
-			runner.setErrorLogWriter(new PrintWriter(System.err));
+			runner.setErrorLogWriter(null);
 			runner.runScript(reader);
 			conn.commit();
 			reader.close();
@@ -84,7 +84,7 @@ private void assertColumnNames(List<Map<String, Object>> list) {
 
 	private void printList(List<Map<String, Object>> list) {
 		for (Map<String, Object> map : list) {
-			System.out.println(map);
+			Assert.assertNotNull(map);
 		}
 	}
 }

File: src/test/java/org/apache/ibatis/submitted/selectkey/SelectKeyTest.java
Patch:
@@ -34,7 +34,7 @@ public static void setUp() throws Exception {
 
       ScriptRunner runner = new ScriptRunner(conn);
       runner.setLogWriter(null);
-      runner.setErrorLogWriter(new PrintWriter(System.err));
+      runner.setErrorLogWriter(null);
       runner.runScript(reader);
       conn.commit();
       reader.close();

File: src/test/java/org/apache/ibatis/submitted/substitution_in_annots/SubstitutionInAnnotsTest.java
Patch:
@@ -31,7 +31,7 @@ public static void setUp() throws Exception {
    	Reader reader = Resources.getResourceAsReader("org/apache/ibatis/submitted/substitution_in_annots/CreateDB.sql");
     ScriptRunner runner = new ScriptRunner(c);
     runner.setLogWriter(null);
-    runner.setErrorLogWriter(new PrintWriter(System.err));
+    runner.setErrorLogWriter(null);
     runner.runScript(reader);
     c.commit();
     reader.close();

File: src/main/java/org/apache/ibatis/parsing/XNode.java
Patch:
@@ -281,7 +281,7 @@ public String toString() {
     StringBuilder builder = new StringBuilder();
     builder.append("<");
     builder.append(name);
-    for (Map.Entry entry : attributes.entrySet()) {
+    for (Map.Entry<Object, Object> entry : attributes.entrySet()) {
       builder.append(" ");
       builder.append(entry.getKey());
       builder.append("=\"");

File: src/main/java/org/apache/ibatis/plugin/Signature.java
Patch:
@@ -8,9 +8,9 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)
 public @interface Signature {
-  Class type();
+  Class<?> type();
 
   String method();
 
-  Class[] args();
+  Class<?>[] args();
 }
\ No newline at end of file

File: src/main/java/org/apache/ibatis/cache/CacheException.java
Patch:
@@ -4,6 +4,8 @@
 
 public class CacheException extends PersistenceException {
 
+  private static final long serialVersionUID = -193202262468464650L;
+
   public CacheException() {
     super();
   }

File: src/main/java/org/apache/ibatis/cache/CacheKey.java
Patch:
@@ -14,13 +14,13 @@ public class CacheKey {
   private int hashcode;
   private long checksum;
   private int count;
-  private List updateList;
+  private List<Object> updateList;
 
   public CacheKey() {
     this.hashcode = DEFAULT_HASHCODE;
     this.multiplier = DEFAULT_MULTIPLYER;
     this.count = 0;
-    this.updateList = new ArrayList();
+    this.updateList = new ArrayList<Object>();
   }
 
   public CacheKey(Object[] objects) {

File: src/main/java/org/apache/ibatis/cache/decorators/FifoCache.java
Patch:
@@ -11,12 +11,12 @@
 public class FifoCache implements Cache {
 
   private final Cache delegate;
-  private final LinkedList keyList;
+  private final LinkedList<Object> keyList;
   private int size;
 
   public FifoCache(Cache delegate) {
     this.delegate = delegate;
-    this.keyList = new LinkedList();
+    this.keyList = new LinkedList<Object>();
     this.size = 1024;
   }
 

File: src/main/java/org/apache/ibatis/cache/impl/PerpetualCache.java
Patch:
@@ -13,7 +13,7 @@ public class PerpetualCache implements Cache {
 
   private String id;
 
-  private Map cache = new HashMap();
+  private Map<Object, Object> cache = new HashMap<Object, Object>();
 
   private ReadWriteLock readWriteLock = new ReentrantReadWriteLock();
 

File: src/main/java/org/apache/ibatis/builder/BuilderException.java
Patch:
@@ -4,6 +4,8 @@
 
 public class BuilderException extends PersistenceException {
 
+  private static final long serialVersionUID = -3885164021020443281L;
+
   public BuilderException() {
     super();
   }

File: src/main/java/org/apache/ibatis/builder/xml/dynamic/DynamicSqlSource.java
Patch:
@@ -21,7 +21,7 @@ public BoundSql getBoundSql(Object parameterObject) {
     DynamicContext context = new DynamicContext(configuration, parameterObject);
     rootSqlNode.apply(context);
     SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration);
-    Class parameterType = parameterObject == null ? Object.class : parameterObject.getClass();
+    Class<?> parameterType = parameterObject == null ? Object.class : parameterObject.getClass();
     SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType);
     BoundSql boundSql = sqlSource.getBoundSql(parameterObject);
     for (Map.Entry<String, Object> entry : context.getBindings().entrySet()) {

File: src/main/java/org/apache/ibatis/builder/xml/dynamic/TrimSqlNode.java
Patch:
@@ -33,6 +33,8 @@ private List<String> parseOverrides(String overrides) {
     if (overrides != null) {
       final StringTokenizer parser = new StringTokenizer(overrides, "|", false);
       return new ArrayList<String>() {
+        private static final long serialVersionUID = -2504816393625384165L;
+
         {
           while (parser.hasMoreTokens()) {
             add(parser.nextToken().toUpperCase(Locale.ENGLISH));

File: src/main/java/org/apache/ibatis/binding/BindingException.java
Patch:
@@ -4,6 +4,8 @@
 
 public class BindingException extends PersistenceException {
 
+  private static final long serialVersionUID = 4300802238789381562L;
+
   public BindingException() {
     super();
   }

File: src/main/java/org/apache/ibatis/binding/MapperRegistry.java
Patch:
@@ -10,7 +10,7 @@
 public class MapperRegistry {
 
   private Configuration config;
-  private Set<Class> knownMappers = new HashSet<Class>();
+  private Set<Class<?>> knownMappers = new HashSet<Class<?>>();
 
   public MapperRegistry(Configuration config) {
     this.config = config;
@@ -26,11 +26,11 @@ public <T> T getMapper(Class<T> type, SqlSession sqlSession) {
     }
   }
 
-  public boolean hasMapper(Class type) {
+  public boolean hasMapper(Class<?> type) {
     return knownMappers.contains(type);
   }
 
-  public void addMapper(Class type) {
+  public void addMapper(Class<?> type) {
     if (type.isInterface()) {
       if (knownMappers.contains(type)) {
         throw new BindingException("Type " + type + " is already known to the MapperRegistry.");

File: src/main/java/org/apache/ibatis/annotations/CacheNamespaceRef.java
Patch:
@@ -8,5 +8,5 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)
 public @interface CacheNamespaceRef {
-  public abstract Class value();
+  public abstract Class<?> value();
 }

File: src/main/java/org/apache/ibatis/annotations/Case.java
Patch:
@@ -10,7 +10,7 @@
 public @interface Case {
   public abstract String value();
 
-  public abstract Class type();
+  public abstract Class<?> type();
 
   public abstract Result[] results() default {};
 }

File: src/main/java/org/apache/ibatis/annotations/DeleteProvider.java
Patch:
@@ -8,7 +8,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)
 public @interface DeleteProvider {
-  public abstract Class type();
+  public abstract Class<?> type();
 
   public abstract String method();
 }

File: src/main/java/org/apache/ibatis/annotations/InsertProvider.java
Patch:
@@ -8,7 +8,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)
 public @interface InsertProvider {
-  public abstract Class type();
+  public abstract Class<?> type();
 
   public abstract String method();
 }

File: src/main/java/org/apache/ibatis/annotations/Result.java
Patch:
@@ -1,6 +1,7 @@
 package org.apache.ibatis.annotations;
 
 import org.apache.ibatis.type.JdbcType;
+import org.apache.ibatis.type.TypeHandler;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -16,11 +17,11 @@
 
   public abstract String property() default "";
 
-  public abstract Class javaType() default void.class;
+  public abstract Class<?> javaType() default void.class;
 
   public abstract JdbcType jdbcType() default JdbcType.UNDEFINED;
 
-  public abstract Class typeHandler() default void.class;
+  public abstract Class<? extends TypeHandler> typeHandler() default TypeHandler.class;
 
   public abstract One one() default @One;
 

File: src/main/java/org/apache/ibatis/annotations/SelectProvider.java
Patch:
@@ -8,7 +8,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)
 public @interface SelectProvider {
-  public abstract Class type();
+  public abstract Class<?> type();
 
   public abstract String method();
 }

File: src/main/java/org/apache/ibatis/annotations/TypeDiscriminator.java
Patch:
@@ -1,6 +1,7 @@
 package org.apache.ibatis.annotations;
 
 import org.apache.ibatis.type.JdbcType;
+import org.apache.ibatis.type.TypeHandler;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -12,11 +13,11 @@
 public @interface TypeDiscriminator {
   public abstract String column();
 
-  public abstract Class javaType() default void.class;
+  public abstract Class<?> javaType() default void.class;
 
   public abstract JdbcType jdbcType() default JdbcType.UNDEFINED;
 
-  public abstract Class typeHandler() default void.class;
+  public abstract Class<? extends TypeHandler> typeHandler() default TypeHandler.class;
 
   public abstract Case[] cases();
 }

File: src/main/java/org/apache/ibatis/annotations/UpdateProvider.java
Patch:
@@ -8,7 +8,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)
 public @interface UpdateProvider {
-  public abstract Class type();
+  public abstract Class<?> type();
 
   public abstract String method();
 }

File: src/main/java/org/apache/ibatis/builder/annotation/ProviderSqlSource.java
Patch:
@@ -11,14 +11,14 @@
 public class ProviderSqlSource implements SqlSource {
 
   private SqlSourceBuilder sqlSourceParser;
-  private Class providerType;
+  private Class<?> providerType;
   private Method providerMethod;
   private boolean providerTakesParameterObject;
 
   public ProviderSqlSource(Configuration config, Object provider) {
     try {
       this.sqlSourceParser = new SqlSourceBuilder(config);
-      this.providerType = (Class) provider.getClass().getMethod("type").invoke(provider);
+      this.providerType = (Class<?>) provider.getClass().getMethod("type").invoke(provider);
       String providerMethod = (String) provider.getClass().getMethod("method").invoke(provider);
 
       for (Method m : providerType.getMethods()) {
@@ -48,7 +48,7 @@ private SqlSource createSqlSource(Object parameterObject) {
       } else {
         sql = (String) providerMethod.invoke(providerType.newInstance());
       }
-      Class parameterType = parameterObject == null ? Object.class : parameterObject.getClass();
+      Class<?> parameterType = parameterObject == null ? Object.class : parameterObject.getClass();
       return sqlSourceParser.parse(sql, parameterType);
     } catch (Exception e) {
       throw new BuilderException("Error invoking SqlProvider method ("

File: src/main/java/org/apache/ibatis/jdbc/RuntimeSqlException.java
Patch:
@@ -2,6 +2,8 @@
 
 public class RuntimeSqlException extends RuntimeException {
 
+  private static final long serialVersionUID = 5224696788505678598L;
+
   public RuntimeSqlException() {
     super();
   }

File: src/main/java/org/apache/ibatis/jdbc/SqlRunner.java
Patch:
@@ -86,7 +86,7 @@ public int insert(String sql, Object... args) throws SQLException {
         List<Map<String, Object>> keys = getResults(ps.getGeneratedKeys());
         if (keys.size() == 1) {
           Map<String, Object> key = keys.get(0);
-          Iterator i = key.values().iterator();
+          Iterator<Object> i = key.values().iterator();
           if (i.hasNext()) {
             Object genkey = i.next();
             if (genkey != null) {
@@ -197,7 +197,7 @@ private List<Map<String, Object>> getResults(ResultSet rs) throws SQLException {
       for (int i = 0, n = rsmd.getColumnCount(); i < n; i++) {
         columns.add(rsmd.getColumnLabel(i + 1));
         try {
-          Class type = Resources.classForName(rsmd.getColumnClassName(i + 1));
+          Class<?> type = Resources.classForName(rsmd.getColumnClassName(i + 1));
           TypeHandler typeHandler = typeHandlerRegistry.getTypeHandler(type);
           if (typeHandler == null) {
             typeHandler = typeHandlerRegistry.getTypeHandler(Object.class);

File: src/main/java/org/apache/ibatis/logging/LogException.java
Patch:
@@ -4,6 +4,8 @@
 
 public class LogException extends PersistenceException {
 
+  private static final long serialVersionUID = 1022924004852350942L;
+
   public LogException() {
     super();
   }

File: src/main/java/org/apache/ibatis/logging/commons/JakartaCommonsLoggingImpl.java
Patch:
@@ -7,7 +7,7 @@ public class JakartaCommonsLoggingImpl implements org.apache.ibatis.logging.Log
 
   private Log log;
 
-  public JakartaCommonsLoggingImpl(Class clazz) {
+  public JakartaCommonsLoggingImpl(Class<?> clazz) {
     log = LogFactory.getLog(clazz);
   }
 

File: src/main/java/org/apache/ibatis/logging/jdk14/Jdk14LoggingImpl.java
Patch:
@@ -9,7 +9,7 @@ public class Jdk14LoggingImpl implements Log {
 
   private Logger log;
 
-  public Jdk14LoggingImpl(Class clazz) {
+  public Jdk14LoggingImpl(Class<?> clazz) {
     log = Logger.getLogger(clazz.getName());
   }
 

File: src/main/java/org/apache/ibatis/logging/log4j/Log4jImpl.java
Patch:
@@ -7,7 +7,7 @@ public class Log4jImpl implements Log {
 
   private Logger log;
 
-  public Log4jImpl(Class clazz) {
+  public Log4jImpl(Class<?> clazz) {
     log = Logger.getLogger(clazz);
   }
 

File: src/main/java/org/apache/ibatis/logging/nologging/NoLoggingImpl.java
Patch:
@@ -4,7 +4,7 @@
 
 public class NoLoggingImpl implements Log {
 
-  public NoLoggingImpl(Class clazz) {
+  public NoLoggingImpl(Class<?> clazz) {
   }
 
   public boolean isDebugEnabled() {

File: src/main/java/org/apache/ibatis/logging/slf4j/Slf4jImpl.java
Patch:
@@ -8,7 +8,7 @@ public class Slf4jImpl implements Log {
 
   private Logger log;
 
-  public Slf4jImpl(Class clazz) {
+  public Slf4jImpl(Class<?> clazz) {
     log = LoggerFactory.getLogger(clazz);
   }
 

File: src/main/java/org/apache/ibatis/logging/stdout/StdOutImpl.java
Patch:
@@ -4,7 +4,7 @@
 
 public class StdOutImpl implements Log {
 
-  public StdOutImpl(Class clazz) {
+  public StdOutImpl(Class<?> clazz) {
   }
 
   public boolean isDebugEnabled() {

File: src/main/java/org/apache/ibatis/io/Resources.java
Patch:
@@ -225,7 +225,7 @@ public static Properties getUrlAsProperties(String urlString) throws IOException
    * @return The loaded class
    * @throws ClassNotFoundException If the class cannot be found (duh!)
    */
-  public static Class classForName(String className) throws ClassNotFoundException {
+  public static Class<?> classForName(String className) throws ClassNotFoundException {
     return classLoaderWrapper.classForName(className);
   }
 

File: src/main/java/org/apache/ibatis/executor/BaseExecutor.java
Patch:
@@ -16,12 +16,13 @@
 import java.sql.SQLException;
 import java.sql.Statement;
 import java.util.*;
+import java.util.concurrent.ConcurrentLinkedQueue;
 
 public abstract class BaseExecutor implements Executor {
 
   protected Transaction transaction;
 
-  protected List<DeferredLoad> deferredLoads;
+  protected ConcurrentLinkedQueue<DeferredLoad> deferredLoads;
   protected PerpetualCache localCache;
   protected Configuration configuration;
 
@@ -32,7 +33,7 @@ public abstract class BaseExecutor implements Executor {
 
   protected BaseExecutor(Configuration configuration, Transaction transaction) {
     this.transaction = transaction;
-    this.deferredLoads = new ArrayList<DeferredLoad>();
+    this.deferredLoads = new ConcurrentLinkedQueue<DeferredLoad>();
     this.localCache = new PerpetualCache("LocalCache");
     this.closed = false;
     this.configuration = configuration;

File: src/test/java/org/apache/ibatis/migration/MigratorTest.java
Patch:
@@ -194,6 +194,7 @@ public void write(int b) throws IOException {
 //      out.write(b);
     }
 
+    @Override
     public String toString() {
       return builder.toString();
     }

File: src/main/java/org/apache/ibatis/builder/xml/XMLConfigBuilder.java
Patch:
@@ -44,7 +44,7 @@ public XMLConfigBuilder(Reader reader, String environment, Properties props) {
     this.configuration.setVariables(props);
     this.parsed = false;
     this.environment = environment;
-    this.parser = new XPathParser(reader, true, new XMLMapperEntityResolver(), props);
+    this.parser = new XPathParser(reader, true, props, new XMLMapperEntityResolver());
   }
 
   public Configuration parse() {

File: src/main/java/org/apache/ibatis/builder/xml/XMLMapperBuilder.java
Patch:
@@ -28,7 +28,7 @@ public XMLMapperBuilder(Reader reader, Configuration configuration, String resou
   public XMLMapperBuilder(Reader reader, Configuration configuration, String resource, Map<String, XNode> sqlFragments) {
     super(configuration);
     this.builderAssistant = new MapperBuilderAssistant(configuration, resource);
-    this.parser = new XPathParser(reader, true, new XMLMapperEntityResolver(), configuration.getVariables());
+    this.parser = new XPathParser(reader, true, configuration.getVariables(), new XMLMapperEntityResolver());
     this.sqlFragments = sqlFragments;
     this.resource = resource;
   }

File: src/test/java/com/ibatis/common/util/NodeEventParser.java
Patch:
@@ -51,7 +51,7 @@ public void addNodeletHandler(Object handler) {
   public void parse(Reader reader) throws ParsingException {
     try {
       Document doc = createDocument(reader);
-      xpathParser = new XPathParser(doc,validation,entityResolver,variables);
+      xpathParser = new XPathParser(doc,validation, variables, entityResolver);
       parse(doc.getLastChild());
     } catch (Exception e) {
       throw new ParsingException("Error parsing XML.  Cause: " + e, e);

File: src/main/java/org/apache/ibatis/session/SqlSession.java
Patch:
@@ -17,6 +17,8 @@ public interface SqlSession {
 
   void select(String statement, Object parameter, ResultHandler handler);
 
+  void select(String statement, ResultHandler handler);
+
   void select(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler);
 
   int insert(String statement);

File: src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java
Patch:
@@ -202,7 +202,6 @@ private void executeStatement(String command) throws SQLException, UnsupportedEn
     } catch (Exception e) {
       // Ignore to workaround a bug in some connection pools
     }
-    commitConnection(); //TODO:  Bug... this should not be here. 
   }
 
   private void printResults(Statement statement, boolean hasResults) {

File: src/main/java/org/apache/ibatis/jdbc/ScriptRunner.java
Patch:
@@ -202,7 +202,7 @@ private void executeStatement(String command) throws SQLException, UnsupportedEn
     } catch (Exception e) {
       // Ignore to workaround a bug in some connection pools
     }
-    commitConnection();
+    commitConnection(); //TODO:  Bug... this should not be here. 
   }
 
   private void printResults(Statement statement, boolean hasResults) {

