File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/MetaDataExporter.java
Patch:
@@ -305,9 +305,9 @@ private void handleColumn(EntityType classModel, String tableName, ResultSet col
         String typeName = columns.getString("TYPE_NAME");
         Number columnSize = (Number) columns.getObject("COLUMN_SIZE");
         Number columnDigits = (Number) columns.getObject("DECIMAL_DIGITS");
+        String columnDefaultValue = columns.getString("COLUMN_DEF");
         int columnIndex = columns.getInt("ORDINAL_POSITION");
         int nullable = columns.getInt("NULLABLE");
-        String columnDefaultValue = columns.getString("COLUMN_DEF");
 
         String propertyName = namingStrategy.getPropertyName(normalizedColumnName, classModel);
         Class<?> clazz = configuration.getJavaType(columnType,

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/MetaDataExporter.java
Patch:
@@ -305,9 +305,9 @@ private void handleColumn(EntityType classModel, String tableName, ResultSet col
         String typeName = columns.getString("TYPE_NAME");
         Number columnSize = (Number) columns.getObject("COLUMN_SIZE");
         Number columnDigits = (Number) columns.getObject("DECIMAL_DIGITS");
+        String columnDefaultValue = columns.getString("COLUMN_DEF");
         int columnIndex = columns.getInt("ORDINAL_POSITION");
         int nullable = columns.getInt("NULLABLE");
-        String columnDefaultValue = columns.getString("COLUMN_DEF");
 
         String propertyName = namingStrategy.getPropertyName(normalizedColumnName, classModel);
         Class<?> clazz = configuration.getJavaType(columnType,

File: querydsl-sql/src/main/java/com/querydsl/sql/FirebirdTemplates.java
Patch:
@@ -124,6 +124,8 @@ public FirebirdTemplates(char escape, boolean quote) {
         add(SQLOps.GROUP_CONCAT, "list({0},',')");
         add(SQLOps.GROUP_CONCAT2, "list({0},{1})");
 
+        addTypeNameToCode("time with time zone", Types.TIME_WITH_TIMEZONE, true);
+        addTypeNameToCode("timestamp with time zone", Types.TIMESTAMP_WITH_TIMEZONE, true);
         addTypeNameToCode("smallint", Types.BOOLEAN, true);
         addTypeNameToCode("smallint", Types.BIT, true);
         addTypeNameToCode("smallint", Types.TINYINT, true);

File: querydsl-sql/src/test/java/com/querydsl/sql/SelectBase.java
Patch:
@@ -479,7 +479,6 @@ private void dates(boolean literals) throws SQLException {
             case H2:
             case HSQLDB:
             case ORACLE:
-            case POSTGRESQL:
             case SQLSERVER:
                 supportsTimeZones = true;
                 break;

File: querydsl-sql/src/main/java/com/querydsl/sql/FirebirdTemplates.java
Patch:
@@ -124,6 +124,8 @@ public FirebirdTemplates(char escape, boolean quote) {
         add(SQLOps.GROUP_CONCAT, "list({0},',')");
         add(SQLOps.GROUP_CONCAT2, "list({0},{1})");
 
+        addTypeNameToCode("time with time zone", Types.TIME_WITH_TIMEZONE, true);
+        addTypeNameToCode("timestamp with time zone", Types.TIMESTAMP_WITH_TIMEZONE, true);
         addTypeNameToCode("smallint", Types.BOOLEAN, true);
         addTypeNameToCode("smallint", Types.BIT, true);
         addTypeNameToCode("smallint", Types.TINYINT, true);

File: querydsl-sql/src/main/java/com/querydsl/sql/types/UtilDateType.java
Patch:
@@ -17,8 +17,6 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Types;
-import java.time.LocalDateTime;
-import java.time.ZoneOffset;
 import java.util.Date;
 
 /**
@@ -39,7 +37,7 @@ public UtilDateType(int type) {
 
     @Override
     public String getLiteral(Date value) {
-        return dateTimeFormatter.format(LocalDateTime.ofInstant(value.toInstant(), ZoneOffset.UTC));
+        return dateTimeFormatter.format(new java.sql.Timestamp(value.getTime()).toLocalDateTime());
     }
 
     @Override

File: querydsl-maven-plugin/src/main/java/com/querydsl/maven/AbstractMetaDataExportMojo.java
Patch:
@@ -142,6 +142,7 @@ public class AbstractMetaDataExportMojo extends AbstractMojo {
      *      is stored in the database; "" retrieves those without a catalog;
      *      <code>null</code> means that the catalog name should not be used to narrow
      *      the search
+     * @parameter
      */
     private String catalogPattern;
 

File: querydsl-maven-plugin/src/main/java/com/querydsl/maven/AbstractMetaDataExportMojo.java
Patch:
@@ -142,6 +142,7 @@ public class AbstractMetaDataExportMojo extends AbstractMojo {
      *      is stored in the database; "" retrieves those without a catalog;
      *      <code>null</code> means that the catalog name should not be used to narrow
      *      the search
+     * @parameter
      */
     private String catalogPattern;
 

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLExpressions.java
Patch:
@@ -665,10 +665,11 @@ public static <T> WindowOver<T> lag(Expression<T> expr) {
      * @param delimiter delimiter
      * @return listagg(expr, delimiter)
      */
-    public static WithinGroup<Object> listagg(Expression<?> expr, String delimiter) {
-        return new WithinGroup<Object>(Object.class, SQLOps.LISTAGG, expr, ConstantImpl.create(delimiter));
+    public static WithinGroup<String> listagg(Expression<?> expr, String delimiter) {
+        return new WithinGroup<String>(String.class, SQLOps.LISTAGG, expr, ConstantImpl.create(delimiter));
     }
 
+
     /**
      * NTH_VALUE returns the expr value of the nth row in the window defined by the analytic clause.
      * The returned value has the data type of the expr.

File: querydsl-mongodb/src/main/java/com/querydsl/mongodb/document/AbstractMongodbQuery.java
Patch:
@@ -219,15 +219,15 @@ public void setReadPreference(ReadPreference readPreference) {
         this.readPreference = readPreference;
     }
 
-    QueryMixin<Q> getQueryMixin() {
+    protected QueryMixin<Q> getQueryMixin() {
         return queryMixin;
     }
 
-    MongodbDocumentSerializer getSerializer() {
+    protected MongodbDocumentSerializer getSerializer() {
         return serializer;
     }
 
-    ReadPreference getReadPreference() {
+    protected ReadPreference getReadPreference() {
         return readPreference;
     }
 

File: querydsl-mongodb/src/main/java/com/querydsl/mongodb/document/AbstractMongodbQuery.java
Patch:
@@ -219,15 +219,15 @@ public void setReadPreference(ReadPreference readPreference) {
         this.readPreference = readPreference;
     }
 
-    QueryMixin<Q> getQueryMixin() {
+    protected QueryMixin<Q> getQueryMixin() {
         return queryMixin;
     }
 
-    MongodbDocumentSerializer getSerializer() {
+    protected MongodbDocumentSerializer getSerializer() {
         return serializer;
     }
 
-    ReadPreference getReadPreference() {
+    protected ReadPreference getReadPreference() {
         return readPreference;
     }
 

File: querydsl-jdo/src/main/java/com/querydsl/jdo/AbstractJDOQuery.java
Patch:
@@ -135,7 +135,7 @@ private Query createQuery(boolean forCount) {
         JDOQLSerializer serializer = new JDOQLSerializer(getTemplates(), source);
         serializer.serialize(queryMixin.getMetadata(), forCount, false);
 
-        logQuery(serializer.toString(), serializer.getConstantToAllLabels());
+        logQuery(serializer.toString(), serializer.getConstantToLabel());
 
         // create Query
         Query query = persistenceManager.newQuery(serializer.toString());

File: querydsl-jdo/src/main/java/com/querydsl/jdo/dml/JDODeleteClause.java
Patch:
@@ -64,7 +64,7 @@ public long execute() {
             JDOQLSerializer serializer = new JDOQLSerializer(templates, entity);
             serializer.handle(metadata.getWhere());
             query.setFilter(serializer.toString());
-            Map<Object,String> constToLabel = serializer.getConstantToAllLabels();
+            Map<Object,String> constToLabel = serializer.getConstantToLabel();
 
             try {
                 if (!constToLabel.isEmpty()) {

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/AbstractHibernateQuery.java
Patch:
@@ -100,9 +100,9 @@ public Query createQuery() {
     private Query createQuery(@Nullable QueryModifiers modifiers, boolean forCount) {
         JPQLSerializer serializer = serialize(forCount);
         String queryString = serializer.toString();
-        logQuery(queryString, serializer.getConstantToAllLabels());
+        logQuery(queryString);
         Query query = session.createQuery(queryString);
-        HibernateUtil.setConstants(query, serializer.getConstantToNamedLabel(), serializer.getConstantToNumberedLabel(),
+        HibernateUtil.setConstants(query, serializer.getConstants(),
                 getMetadata().getParams());
         if (fetchSize > 0) {
             query.setFetchSize(fetchSize);
@@ -208,7 +208,7 @@ public QueryResults<T> fetchResults() {
         }
     }
 
-    protected void logQuery(String queryString, Map<Object, String> parameters) {
+    protected void logQuery(String queryString) {
         if (logger.isLoggable(Level.FINE)) {
             String normalizedQuery = queryString.replace('\n', ' ');
             logger.fine(normalizedQuery);

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/HibernateInsertClause.java
Patch:
@@ -86,13 +86,12 @@ public HibernateInsertClause(SessionHolder session, EntityPath<?> entity,
     public long execute() {
         JPQLSerializer serializer = new JPQLSerializer(templates, null);
         serializer.serializeForInsert(queryMixin.getMetadata(), inserts.isEmpty() ? columns : inserts.keySet(), values, subQuery, inserts);
-        Map<Object, String> constants = serializer.getConstantToLabel();
 
         Query query = session.createQuery(serializer.toString());
         for (Map.Entry<Path<?>, LockMode> entry : lockModes.entrySet()) {
             query.setLockMode(entry.getKey().toString(), entry.getValue());
         }
-        HibernateUtil.setConstants(query, constants, queryMixin.getMetadata().getParams());
+        HibernateUtil.setConstants(query, serializer.getConstants(), queryMixin.getMetadata().getParams());
         return query.executeUpdate();
     }
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/AbstractJPAQuery.java
Patch:
@@ -128,9 +128,9 @@ public Query createQuery() {
     protected Query createQuery(@Nullable QueryModifiers modifiers, boolean forCount) {
         JPQLSerializer serializer = serialize(forCount);
         String queryString = serializer.toString();
-        logQuery(queryString, serializer.getConstantToAllLabels());
+        logQuery(queryString);
         Query query = entityManager.createQuery(queryString);
-        JPAUtil.setConstants(query, serializer.getConstantToAllLabels(), getMetadata().getParams());
+        JPAUtil.setConstants(query, serializer.getConstants(), getMetadata().getParams());
         if (modifiers != null && modifiers.isRestricting()) {
             Integer limit = modifiers.getLimitAsInteger();
             Integer offset = modifiers.getOffsetAsInteger();
@@ -306,7 +306,7 @@ public QueryResults<T> fetchResults() {
 
     }
 
-    protected void logQuery(String queryString, Map<Object, String> parameters) {
+    protected void logQuery(String queryString) {
         if (logger.isLoggable(Level.FINEST)) {
             String normalizedQuery = queryString.replace('\n', ' ');
             logger.finest(normalizedQuery);

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/JPAInsertClause.java
Patch:
@@ -75,13 +75,12 @@ public JPAInsertClause(EntityManager em, EntityPath<?> entity, JPQLTemplates tem
     public long execute() {
         JPQLSerializer serializer = new JPQLSerializer(templates, entityManager);
         serializer.serializeForInsert(queryMixin.getMetadata(), inserts.isEmpty() ? columns : inserts.keySet(), values, subQuery, inserts);
-        Map<Object,String> constants = serializer.getConstantToLabel();
 
         Query query = entityManager.createQuery(serializer.toString());
         if (lockMode != null) {
             query.setLockMode(lockMode);
         }
-        JPAUtil.setConstants(query, constants, queryMixin.getMetadata().getParams());
+        JPAUtil.setConstants(query, serializer.getConstants(), queryMixin.getMetadata().getParams());
         return query.executeUpdate();
     }
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/JPAUpdateClause.java
Patch:
@@ -67,13 +67,12 @@ public JPAUpdateClause(EntityManager em, EntityPath<?> entity, JPQLTemplates tem
     public long execute() {
         JPQLSerializer serializer = new JPQLSerializer(templates, entityManager);
         serializer.serializeForUpdate(queryMixin.getMetadata(), updates);
-        Map<Object,String> constants = serializer.getConstantToAllLabels();
 
         Query query = entityManager.createQuery(serializer.toString());
         if (lockMode != null) {
             query.setLockMode(lockMode);
         }
-        JPAUtil.setConstants(query, constants, queryMixin.getMetadata().getParams());
+        JPAUtil.setConstants(query, serializer.getConstants(), queryMixin.getMetadata().getParams());
         return query.executeUpdate();
     }
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/sql/AbstractJPASQLQuery.java
Patch:
@@ -94,7 +94,7 @@ public Query createQuery() {
     private Query createQuery(boolean forCount) {
         NativeSQLSerializer serializer = (NativeSQLSerializer) serialize(forCount);
         String queryString = serializer.toString();
-        logQuery(queryString, serializer.getConstantToAllLabels());
+        logQuery(queryString);
         Expression<?> projection = queryMixin.getMetadata().getProjection();
         Query query;
 
@@ -152,7 +152,7 @@ private Query createQuery(boolean forCount) {
 
 
         // set constants
-        JPAUtil.setConstants(query, serializer.getConstantToAllLabels(), queryMixin.getMetadata().getParams());
+        JPAUtil.setConstants(query, serializer.getConstants(), queryMixin.getMetadata().getParams());
         this.projection = null; // necessary when query is reused
 
         if (!forCount && projection instanceof FactoryExpression) {
@@ -280,7 +280,7 @@ public QueryResults<T> fetchResults() {
 
     }
 
-    protected void logQuery(String queryString, Map<Object, String> parameters) {
+    protected void logQuery(String queryString) {
         if (logger.isLoggable(Level.FINE)) {
             String normalizedQuery = queryString.replace('\n', ' ');
             logger.fine(normalizedQuery);

File: querydsl-jpa/src/test/java/com/querydsl/jpa/FeaturesTest.java
Patch:
@@ -57,7 +57,7 @@ public void basicStructure3() {
     public void argumentHandling() {
         // Kitty is reused, so it should be used via one named parameter
         assertToString(
-                "cat.name = ?1 or cust.name.firstName = ?2 or kitten.name = ?1",
+                "cat.name = ?1 or cust.name.firstName = ?2 or kitten.name = ?3",
                 cat.name.eq("Kitty").or(cust.name.firstName.eq("Hans")).or(kitten.name.eq("Kitty")));
     }
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/IntegrationBase.java
Patch:
@@ -55,8 +55,7 @@ public void parse() throws RecognitionException, TokenStreamException {
                     JPQLSerializer serializer = new JPQLSerializer(HQLTemplates.DEFAULT);
                     serializer.serialize(getMetadata(), false, null);
                     Query query = session.createQuery(serializer.toString());
-                    HibernateUtil.setConstants(query, serializer.getConstantToNamedLabel(),
-                            serializer.getConstantToNumberedLabel(), getMetadata().getParams());
+                    HibernateUtil.setConstants(query, serializer.getConstants(), getMetadata().getParams());
                     query.list();
                 } catch (Exception e) {
                     e.printStackTrace();

File: querydsl-jpa/src/test/java/com/querydsl/jpa/JPAIntegrationBase.java
Patch:
@@ -51,7 +51,7 @@ public void parse() throws RecognitionException, TokenStreamException {
                 JPQLSerializer serializer = new JPQLSerializer(templates);
                 serializer.serialize(getMetadata(), false, null);
                 Query query = em.createQuery(serializer.toString());
-                JPAUtil.setConstants(query, serializer.getConstantToAllLabels(), getMetadata().getParams());
+                JPAUtil.setConstants(query, serializer.getConstants(), getMetadata().getParams());
                 try {
                     query.getResultList();
                 } catch (Exception e) {

File: querydsl-jpa/src/test/java/com/querydsl/jpa/MathTest.java
Patch:
@@ -50,17 +50,17 @@ public void divide() {
 
     @Test
     public void add_and_compare() {
-        assertToString("cat.bodyWeight + ?1 < ?1", cat.bodyWeight.add(10.0).lt(10.0));
+        assertToString("cat.bodyWeight + ?1 < ?2", cat.bodyWeight.add(10.0).lt(10.0));
     }
 
     @Test
     public void subtract_and_compare() {
-        assertToString("cat.bodyWeight - ?1 < ?1", cat.bodyWeight.subtract(10.0).lt(10.0));
+        assertToString("cat.bodyWeight - ?1 < ?2", cat.bodyWeight.subtract(10.0).lt(10.0));
     }
 
     @Test
     public void multiply_and_compare() {
-        assertToString("cat.bodyWeight * ?1 < ?1", cat.bodyWeight.multiply(10.0).lt(10.0));
+        assertToString("cat.bodyWeight * ?1 < ?2", cat.bodyWeight.multiply(10.0).lt(10.0));
     }
 
     @Test

File: querydsl-jdo/src/main/java/com/querydsl/jdo/AbstractJDOQuery.java
Patch:
@@ -135,7 +135,7 @@ private Query createQuery(boolean forCount) {
         JDOQLSerializer serializer = new JDOQLSerializer(getTemplates(), source);
         serializer.serialize(queryMixin.getMetadata(), forCount, false);
 
-        logQuery(serializer.toString(), serializer.getConstantToAllLabels());
+        logQuery(serializer.toString(), serializer.getConstantToLabel());
 
         // create Query
         Query query = persistenceManager.newQuery(serializer.toString());

File: querydsl-jdo/src/main/java/com/querydsl/jdo/dml/JDODeleteClause.java
Patch:
@@ -64,7 +64,7 @@ public long execute() {
             JDOQLSerializer serializer = new JDOQLSerializer(templates, entity);
             serializer.handle(metadata.getWhere());
             query.setFilter(serializer.toString());
-            Map<Object,String> constToLabel = serializer.getConstantToAllLabels();
+            Map<Object,String> constToLabel = serializer.getConstantToLabel();
 
             try {
                 if (!constToLabel.isEmpty()) {

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/AbstractHibernateQuery.java
Patch:
@@ -100,9 +100,9 @@ public Query createQuery() {
     private Query createQuery(@Nullable QueryModifiers modifiers, boolean forCount) {
         JPQLSerializer serializer = serialize(forCount);
         String queryString = serializer.toString();
-        logQuery(queryString, serializer.getConstantToAllLabels());
+        logQuery(queryString);
         Query query = session.createQuery(queryString);
-        HibernateUtil.setConstants(query, serializer.getConstantToNamedLabel(), serializer.getConstantToNumberedLabel(),
+        HibernateUtil.setConstants(query, serializer.getConstants(),
                 getMetadata().getParams());
         if (fetchSize > 0) {
             query.setFetchSize(fetchSize);
@@ -208,7 +208,7 @@ public QueryResults<T> fetchResults() {
         }
     }
 
-    protected void logQuery(String queryString, Map<Object, String> parameters) {
+    protected void logQuery(String queryString) {
         if (logger.isLoggable(Level.FINE)) {
             String normalizedQuery = queryString.replace('\n', ' ');
             logger.fine(normalizedQuery);

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/HibernateInsertClause.java
Patch:
@@ -86,13 +86,12 @@ public HibernateInsertClause(SessionHolder session, EntityPath<?> entity,
     public long execute() {
         JPQLSerializer serializer = new JPQLSerializer(templates, null);
         serializer.serializeForInsert(queryMixin.getMetadata(), inserts.isEmpty() ? columns : inserts.keySet(), values, subQuery, inserts);
-        Map<Object, String> constants = serializer.getConstantToLabel();
 
         Query query = session.createQuery(serializer.toString());
         for (Map.Entry<Path<?>, LockMode> entry : lockModes.entrySet()) {
             query.setLockMode(entry.getKey().toString(), entry.getValue());
         }
-        HibernateUtil.setConstants(query, constants, queryMixin.getMetadata().getParams());
+        HibernateUtil.setConstants(query, serializer.getConstants(), queryMixin.getMetadata().getParams());
         return query.executeUpdate();
     }
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/AbstractJPAQuery.java
Patch:
@@ -128,9 +128,9 @@ public Query createQuery() {
     protected Query createQuery(@Nullable QueryModifiers modifiers, boolean forCount) {
         JPQLSerializer serializer = serialize(forCount);
         String queryString = serializer.toString();
-        logQuery(queryString, serializer.getConstantToAllLabels());
+        logQuery(queryString);
         Query query = entityManager.createQuery(queryString);
-        JPAUtil.setConstants(query, serializer.getConstantToAllLabels(), getMetadata().getParams());
+        JPAUtil.setConstants(query, serializer.getConstants(), getMetadata().getParams());
         if (modifiers != null && modifiers.isRestricting()) {
             Integer limit = modifiers.getLimitAsInteger();
             Integer offset = modifiers.getOffsetAsInteger();
@@ -306,7 +306,7 @@ public QueryResults<T> fetchResults() {
 
     }
 
-    protected void logQuery(String queryString, Map<Object, String> parameters) {
+    protected void logQuery(String queryString) {
         if (logger.isLoggable(Level.FINEST)) {
             String normalizedQuery = queryString.replace('\n', ' ');
             logger.finest(normalizedQuery);

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/JPAInsertClause.java
Patch:
@@ -75,13 +75,12 @@ public JPAInsertClause(EntityManager em, EntityPath<?> entity, JPQLTemplates tem
     public long execute() {
         JPQLSerializer serializer = new JPQLSerializer(templates, entityManager);
         serializer.serializeForInsert(queryMixin.getMetadata(), inserts.isEmpty() ? columns : inserts.keySet(), values, subQuery, inserts);
-        Map<Object,String> constants = serializer.getConstantToLabel();
 
         Query query = entityManager.createQuery(serializer.toString());
         if (lockMode != null) {
             query.setLockMode(lockMode);
         }
-        JPAUtil.setConstants(query, constants, queryMixin.getMetadata().getParams());
+        JPAUtil.setConstants(query, serializer.getConstants(), queryMixin.getMetadata().getParams());
         return query.executeUpdate();
     }
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/JPAUpdateClause.java
Patch:
@@ -67,13 +67,12 @@ public JPAUpdateClause(EntityManager em, EntityPath<?> entity, JPQLTemplates tem
     public long execute() {
         JPQLSerializer serializer = new JPQLSerializer(templates, entityManager);
         serializer.serializeForUpdate(queryMixin.getMetadata(), updates);
-        Map<Object,String> constants = serializer.getConstantToAllLabels();
 
         Query query = entityManager.createQuery(serializer.toString());
         if (lockMode != null) {
             query.setLockMode(lockMode);
         }
-        JPAUtil.setConstants(query, constants, queryMixin.getMetadata().getParams());
+        JPAUtil.setConstants(query, serializer.getConstants(), queryMixin.getMetadata().getParams());
         return query.executeUpdate();
     }
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/sql/AbstractJPASQLQuery.java
Patch:
@@ -94,7 +94,7 @@ public Query createQuery() {
     private Query createQuery(boolean forCount) {
         NativeSQLSerializer serializer = (NativeSQLSerializer) serialize(forCount);
         String queryString = serializer.toString();
-        logQuery(queryString, serializer.getConstantToAllLabels());
+        logQuery(queryString);
         Expression<?> projection = queryMixin.getMetadata().getProjection();
         Query query;
 
@@ -152,7 +152,7 @@ private Query createQuery(boolean forCount) {
 
 
         // set constants
-        JPAUtil.setConstants(query, serializer.getConstantToAllLabels(), queryMixin.getMetadata().getParams());
+        JPAUtil.setConstants(query, serializer.getConstants(), queryMixin.getMetadata().getParams());
         this.projection = null; // necessary when query is reused
 
         if (!forCount && projection instanceof FactoryExpression) {
@@ -280,7 +280,7 @@ public QueryResults<T> fetchResults() {
 
     }
 
-    protected void logQuery(String queryString, Map<Object, String> parameters) {
+    protected void logQuery(String queryString) {
         if (logger.isLoggable(Level.FINE)) {
             String normalizedQuery = queryString.replace('\n', ' ');
             logger.fine(normalizedQuery);

File: querydsl-jpa/src/test/java/com/querydsl/jpa/FeaturesTest.java
Patch:
@@ -57,7 +57,7 @@ public void basicStructure3() {
     public void argumentHandling() {
         // Kitty is reused, so it should be used via one named parameter
         assertToString(
-                "cat.name = ?1 or cust.name.firstName = ?2 or kitten.name = ?1",
+                "cat.name = ?1 or cust.name.firstName = ?2 or kitten.name = ?3",
                 cat.name.eq("Kitty").or(cust.name.firstName.eq("Hans")).or(kitten.name.eq("Kitty")));
     }
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/IntegrationBase.java
Patch:
@@ -55,8 +55,7 @@ public void parse() throws RecognitionException, TokenStreamException {
                     JPQLSerializer serializer = new JPQLSerializer(HQLTemplates.DEFAULT);
                     serializer.serialize(getMetadata(), false, null);
                     Query query = session.createQuery(serializer.toString());
-                    HibernateUtil.setConstants(query, serializer.getConstantToNamedLabel(),
-                            serializer.getConstantToNumberedLabel(), getMetadata().getParams());
+                    HibernateUtil.setConstants(query, serializer.getConstants(), getMetadata().getParams());
                     query.list();
                 } catch (Exception e) {
                     e.printStackTrace();

File: querydsl-jpa/src/test/java/com/querydsl/jpa/JPAIntegrationBase.java
Patch:
@@ -51,7 +51,7 @@ public void parse() throws RecognitionException, TokenStreamException {
                 JPQLSerializer serializer = new JPQLSerializer(templates);
                 serializer.serialize(getMetadata(), false, null);
                 Query query = em.createQuery(serializer.toString());
-                JPAUtil.setConstants(query, serializer.getConstantToAllLabels(), getMetadata().getParams());
+                JPAUtil.setConstants(query, serializer.getConstants(), getMetadata().getParams());
                 try {
                     query.getResultList();
                 } catch (Exception e) {

File: querydsl-jpa/src/test/java/com/querydsl/jpa/MathTest.java
Patch:
@@ -50,17 +50,17 @@ public void divide() {
 
     @Test
     public void add_and_compare() {
-        assertToString("cat.bodyWeight + ?1 < ?1", cat.bodyWeight.add(10.0).lt(10.0));
+        assertToString("cat.bodyWeight + ?1 < ?2", cat.bodyWeight.add(10.0).lt(10.0));
     }
 
     @Test
     public void subtract_and_compare() {
-        assertToString("cat.bodyWeight - ?1 < ?1", cat.bodyWeight.subtract(10.0).lt(10.0));
+        assertToString("cat.bodyWeight - ?1 < ?2", cat.bodyWeight.subtract(10.0).lt(10.0));
     }
 
     @Test
     public void multiply_and_compare() {
-        assertToString("cat.bodyWeight * ?1 < ?1", cat.bodyWeight.multiply(10.0).lt(10.0));
+        assertToString("cat.bodyWeight * ?1 < ?2", cat.bodyWeight.multiply(10.0).lt(10.0));
     }
 
     @Test

File: querydsl-jpa/src/main/java/com/querydsl/jpa/HibernateHandler.java
Patch:
@@ -56,7 +56,7 @@ public boolean createNativeQueryTyped() {
     @Override
     public <T> CloseableIterator<T> iterate(Query query, FactoryExpression<?> projection) {
         try {
-            org.hibernate.query.Query unwrappedQuery = query.unwrap(org.hibernate.query.Query.class);
+            org.hibernate.query.Query<?> unwrappedQuery = query.unwrap(org.hibernate.query.Query.class);
             ScrollableResults results = unwrappedQuery.scroll(ScrollMode.FORWARD_ONLY);
             CloseableIterator<T> iterator = new ScrollableResultsIterator<T>(results);
             if (projection != null) {
@@ -74,6 +74,7 @@ public <T> CloseableIterator<T> iterate(Query query, FactoryExpression<?> projec
     }
 
     @Override
+    @SuppressWarnings({"unchecked", "rawtypes"})
     public <T> Stream<T> stream(Query query, @Nullable FactoryExpression<?> projection) {
         final Stream resultStream = query.getResultStream();
         if (projection != null) {
@@ -82,7 +83,6 @@ public <T> Stream<T> stream(Query query, @Nullable FactoryExpression<?> projecti
         return resultStream;
     }
 
-    @SuppressWarnings("deprecation")
     @Override
     public boolean transform(Query query, FactoryExpression<?> projection) {
         try {

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/AbstractHibernateQuery.java
Patch:
@@ -23,7 +23,7 @@
 import org.jetbrains.annotations.Nullable;
 
 import org.hibernate.*;
-import org.hibernate.Query;
+import org.hibernate.query.Query;
 
 import com.mysema.commons.lang.CloseableIterator;
 import com.querydsl.core.*;

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/HibernateDeleteClause.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.Map;
 
 import org.hibernate.LockMode;
-import org.hibernate.Query;
+import org.hibernate.query.Query;
 import org.hibernate.Session;
 import org.hibernate.StatelessSession;
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/HibernateInsertClause.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Map;
 
 import org.hibernate.LockMode;
-import org.hibernate.Query;
+import org.hibernate.query.Query;
 import org.hibernate.Session;
 import org.hibernate.StatelessSession;
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/HibernateUpdateClause.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Map;
 
 import org.hibernate.LockMode;
-import org.hibernate.Query;
+import org.hibernate.query.Query;
 import org.hibernate.Session;
 import org.hibernate.StatelessSession;
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/sql/AbstractHibernateSQLQuery.java
Patch:
@@ -23,7 +23,7 @@
 
 import org.jetbrains.annotations.Nullable;
 
-import org.hibernate.Query;
+import org.hibernate.query.Query;
 import org.hibernate.*;
 
 import com.mysema.commons.lang.CloseableIterator;
@@ -85,7 +85,7 @@ private Query createQuery(boolean forCount) {
         NativeSQLSerializer serializer = (NativeSQLSerializer) serialize(forCount);
         String queryString = serializer.toString();
         logQuery(queryString, serializer.getConstantToAllLabels());
-        org.hibernate.SQLQuery query = session.createSQLQuery(queryString);
+        org.hibernate.query.NativeQuery query = session.createSQLQuery(queryString);
         // set constants
         HibernateUtil.setConstants(query, serializer.getConstantToNamedLabel(), serializer.getConstantToNumberedLabel(),
                 queryMixin.getMetadata().getParams());

File: querydsl-jpa/src/test/java/com/querydsl/jpa/HibernateSQLBase.java
Patch:
@@ -15,7 +15,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-import org.hibernate.Query;
+import org.hibernate.query.Query;
 import org.hibernate.Session;
 import org.junit.Before;
 import org.junit.ClassRule;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/IntegrationBase.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Arrays;
 import java.util.List;
 
-import org.hibernate.Query;
+import org.hibernate.query.Query;
 import org.hibernate.ScrollMode;
 import org.hibernate.ScrollableResults;
 import org.hibernate.Session;

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/ComparableExpression.java
Patch:
@@ -429,10 +429,10 @@ public ComparableExpression<T> coalesce(Expression<T> expr) {
      * @return coalesce
      */
     @Override
-    @SuppressWarnings("unchecked")
-    public ComparableExpression<T> coalesce(Expression<T>... exprs) {
+    @SuppressWarnings({"unchecked", "rawtypes"})
+    public ComparableExpression<T> coalesce(Expression<?>... exprs) {
         Coalesce<T> coalesce = new Coalesce<T>(getType(), mixin);
-        for (Expression<T> expr : exprs) {
+        for (Expression expr : exprs) {
             coalesce.add(expr);
         }
         return coalesce.getValue();

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/ComparableExpressionBase.java
Patch:
@@ -70,10 +70,10 @@ public ComparableExpressionBase<T> coalesce(Expression<T> expr) {
      * @param exprs additional arguments
      * @return coalesce
      */
-    @SuppressWarnings("unchecked")
-    public ComparableExpressionBase<T> coalesce(Expression<T>...exprs) {
+    @SuppressWarnings({"unchecked", "rawtypes"})
+    public ComparableExpressionBase<T> coalesce(Expression<?>...exprs) {
         Coalesce<T> coalesce = new Coalesce<T>(getType(), mixin);
-        for (Expression<T> expr : exprs) {
+        for (Expression expr : exprs) {
             coalesce.add(expr);
         }
         return coalesce.getValue();

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/DateExpression.java
Patch:
@@ -248,10 +248,10 @@ public DateExpression<T> coalesce(Expression<T> expr) {
      * @return coalesce
      */
     @Override
-    @SuppressWarnings("unchecked")
-    public DateExpression<T> coalesce(Expression<T>... exprs) {
+    @SuppressWarnings({"unchecked", "rawtypes"})
+    public DateExpression<T> coalesce(Expression<?>... exprs) {
         Coalesce<T> coalesce = new Coalesce<T>(getType(), mixin);
-        for (Expression<T> expr : exprs) {
+        for (Expression expr : exprs) {
             coalesce.add(expr);
         }
         return coalesce.asDate();

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/DateTimeExpression.java
Patch:
@@ -318,10 +318,10 @@ public DateTimeExpression<T> coalesce(Expression<T> expr) {
      * @return coalesce
      */
     @Override
-    @SuppressWarnings("unchecked")
-    public DateTimeExpression<T> coalesce(Expression<T>... exprs) {
+    @SuppressWarnings({"unchecked", "rawtypes"})
+    public DateTimeExpression<T> coalesce(Expression<?>... exprs) {
         Coalesce<T> coalesce = new Coalesce<T>(getType(), mixin);
-        for (Expression<T> expr : exprs) {
+        for (Expression expr : exprs) {
             coalesce.add(expr);
         }
         return coalesce.asDateTime();

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/EnumExpression.java
Patch:
@@ -101,10 +101,10 @@ public EnumExpression<T> coalesce(Expression<T> expr) {
      * @return coalesce
      */
     @Override
-    @SuppressWarnings({"unchecked"})
-    public EnumExpression<T> coalesce(Expression<T>... exprs) {
+    @SuppressWarnings({"unchecked", "rawtypes"})
+    public EnumExpression<T> coalesce(Expression<?>... exprs) {
         Coalesce<T> coalesce = new Coalesce<T>(getType(), mixin);
-        for (Expression<T> expr : exprs) {
+        for (Expression expr : exprs) {
             coalesce.add(expr);
         }
         return (EnumExpression<T>) coalesce.asEnum();

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/NumberExpression.java
Patch:
@@ -825,10 +825,10 @@ public NumberExpression<T> coalesce(Expression<T> expr) {
      * @return coalesce
      */
     @Override
-    @SuppressWarnings({"unchecked"})
-    public NumberExpression<T> coalesce(Expression<T>... exprs) {
+    @SuppressWarnings({"unchecked", "rawtypes"})
+    public NumberExpression<T> coalesce(Expression<?>... exprs) {
         Coalesce<T> coalesce = new Coalesce<T>(getType(), mixin);
-        for (Expression<T> expr : exprs) {
+        for (Expression expr : exprs) {
             coalesce.add(expr);
         }
         return (NumberExpression<T>) coalesce.asNumber();

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/StringExpression.java
Patch:
@@ -883,10 +883,10 @@ public StringExpression coalesce(Expression<String> expr) {
      * @return coalesce
      */
     @Override
-    @SuppressWarnings("unchecked")
-    public StringExpression coalesce(Expression<String>... exprs) {
+    @SuppressWarnings({"unchecked", "rawtypes"})
+    public StringExpression coalesce(Expression<?>... exprs) {
         Coalesce<String> coalesce = new Coalesce<String>(getType(), mixin);
-        for (Expression<String> expr : exprs) {
+        for (Expression expr : exprs) {
             coalesce.add(expr);
         }
         return coalesce.asString();

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/TimeExpression.java
Patch:
@@ -164,10 +164,10 @@ public TimeExpression<T> coalesce(Expression<T> expr) {
      * @return coalesce
      */
     @Override
-    @SuppressWarnings("unchecked")
-    public TimeExpression<T> coalesce(Expression<T>... exprs) {
+    @SuppressWarnings({"unchecked", "rawtypes"})
+    public TimeExpression<T> coalesce(Expression<?>... exprs) {
         Coalesce<T> coalesce = new Coalesce<T>(getType(), mixin);
-        for (Expression<T> expr : exprs) {
+        for (Expression expr : exprs) {
             coalesce.add(expr);
         }
         return coalesce.asTime();

File: querydsl-core/src/test/java/com/querydsl/core/types/dsl/CoalesceTest.java
Patch:
@@ -67,7 +67,7 @@ public void dsl() {
 
     @Test
     public void dsl2() {
-        assertEquals("coalesce(firstname, lastname, xxx)", firstname.coalesce(lastname).add("xxx").toString());
+        assertEquals("coalesce(firstname, lastname, xxx)", new Coalesce<String>().add(firstname).add(lastname).add("xxx").toString());
     }
 
     @Test

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/BooleanExpression.java
Patch:
@@ -184,9 +184,9 @@ public BooleanExpression nullif(Boolean other) {
      * @return coalesce
      */
     @Override
-    public BooleanExpression coalesce(Expression<?>... exprs) {
+    public BooleanExpression coalesce(Expression<Boolean>... exprs) {
         Coalesce<Boolean> coalesce = new Coalesce<Boolean>(getType(), mixin);
-        for (Expression expr : exprs) {
+        for (Expression<Boolean> expr : exprs) {
             coalesce.add(expr);
         }
         return coalesce.asBoolean();

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/ComparableExpression.java
Patch:
@@ -416,10 +416,9 @@ public ComparableExpression<T> nullif(T other) {
      * @return coalesce
      */
     @Override
-    @SuppressWarnings({"unchecked", "rawtypes"})
-    public ComparableExpression<T> coalesce(Expression<?>... exprs) {
+    public ComparableExpression<T> coalesce(Expression<T>... exprs) {
         Coalesce<T> coalesce = new Coalesce<T>(getType(), mixin);
-        for (Expression expr : exprs) {
+        for (Expression<T> expr : exprs) {
             coalesce.add(expr);
         }
         return coalesce.getValue();

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/ComparableExpressionBase.java
Patch:
@@ -58,10 +58,9 @@ public OrderSpecifier<T> asc() {
      * @param exprs additional arguments
      * @return coalesce
      */
-    @SuppressWarnings("unchecked")
-    public ComparableExpressionBase<T> coalesce(Expression<?>...exprs) {
+    public ComparableExpressionBase<T> coalesce(Expression<T>...exprs) {
         Coalesce<T> coalesce = new Coalesce<T>(getType(), mixin);
-        for (Expression expr : exprs) {
+        for (Expression<T> expr : exprs) {
             coalesce.add(expr);
         }
         return coalesce.getValue();

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/DateExpression.java
Patch:
@@ -235,9 +235,9 @@ public DateExpression<T> nullif(T other) {
      * @return coalesce
      */
     @Override
-    public DateExpression<T> coalesce(Expression<?>... exprs) {
+    public DateExpression<T> coalesce(Expression<T>... exprs) {
         Coalesce<T> coalesce = new Coalesce<T>(getType(), mixin);
-        for (Expression expr : exprs) {
+        for (Expression<T> expr : exprs) {
             coalesce.add(expr);
         }
         return coalesce.asDate();

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/DateTimeExpression.java
Patch:
@@ -305,9 +305,9 @@ public DateTimeExpression<T> nullif(T other) {
      * @return coalesce
      */
     @Override
-    public DateTimeExpression<T> coalesce(Expression<?>... exprs) {
+    public DateTimeExpression<T> coalesce(Expression<T>... exprs) {
         Coalesce<T> coalesce = new Coalesce<T>(getType(), mixin);
-        for (Expression expr : exprs) {
+        for (Expression<T> expr : exprs) {
             coalesce.add(expr);
         }
         return coalesce.asDateTime();

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/NumberExpression.java
Patch:
@@ -811,10 +811,10 @@ public NumberExpression<T> nullif(T other) {
      * @return coalesce
      */
     @Override
-    @SuppressWarnings({"unchecked", "rawtypes"})
-    public NumberExpression<T> coalesce(Expression<?>... exprs) {
+    @SuppressWarnings({"unchecked"})
+    public NumberExpression<T> coalesce(Expression<T>... exprs) {
         Coalesce<T> coalesce = new Coalesce<T>(getType(), mixin);
-        for (Expression expr : exprs) {
+        for (Expression<T> expr : exprs) {
             coalesce.add(expr);
         }
         return (NumberExpression<T>) coalesce.asNumber();

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/StringExpression.java
Patch:
@@ -870,10 +870,9 @@ public StringExpression nullif(String other) {
      * @return coalesce
      */
     @Override
-    @SuppressWarnings({"unchecked", "rawtypes"})
-    public StringExpression coalesce(Expression<?>... exprs) {
+    public StringExpression coalesce(Expression<String>... exprs) {
         Coalesce<String> coalesce = new Coalesce<String>(getType(), mixin);
-        for (Expression expr : exprs) {
+        for (Expression<String> expr : exprs) {
             coalesce.add(expr);
         }
         return coalesce.asString();

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/TimeExpression.java
Patch:
@@ -151,10 +151,9 @@ public TimeExpression<T> nullif(T other) {
      * @return coalesce
      */
     @Override
-    @SuppressWarnings({"unchecked", "rawtypes"})
-    public TimeExpression<T> coalesce(Expression<?>... exprs) {
+    public TimeExpression<T> coalesce(Expression<T>... exprs) {
         Coalesce<T> coalesce = new Coalesce<T>(getType(), mixin);
-        for (Expression expr : exprs) {
+        for (Expression<T> expr : exprs) {
             coalesce.add(expr);
         }
         return coalesce.asTime();

File: querydsl-spatial/src/main/java/com/querydsl/spatial/MultiPointExpression.java
Patch:
@@ -26,7 +26,7 @@
  *
  * @param <T>
  */
-public abstract class MultiPointExpression<T extends MultiPoint> extends GeometryCollectionExpression<T> {
+public abstract class MultiPointExpression<T extends MultiPoint> extends AbstractGeometryCollectionExpression<T> {
 
     private static final long serialVersionUID = 7221702165705045865L;
 

File: querydsl-jdo/src/test/java/com/querydsl/jdo/JDOQueryFactoryTest.java
Patch:
@@ -31,7 +31,7 @@ public class JDOQueryFactoryTest {
 
     @Before
     public void setUp() {
-        Supplier<PersistenceManager> provider = () -> EasyMock.createNiceMock(PersistenceManager.class);
+        Supplier<PersistenceManager> provider = () -> EasyMock.<PersistenceManager> createNiceMock(PersistenceManager.class);
         queryFactory = new JDOQueryFactory(provider);
     }
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/HibernateQueryFactoryTest.java
Patch:
@@ -31,7 +31,7 @@ public class HibernateQueryFactoryTest {
 
     @Before
     public void setUp() {
-        Supplier<Session> provider = () -> EasyMock.createNiceMock(Session.class);
+        Supplier<Session> provider = () -> EasyMock.<Session> createNiceMock(Session.class);
         queryFactory = new HibernateQueryFactory(JPQLTemplates.DEFAULT, provider);
     }
 

File: querydsl-sql/src/test/java/com/querydsl/sql/ConfigurationTest.java
Patch:
@@ -64,7 +64,7 @@ public void set_null() throws SQLException {
         Configuration configuration = new Configuration(new H2Templates());
 //        configuration.register(new UntypedNullType());
         configuration.register("SURVEY", "NAME",  new EncryptedString());
-        PreparedStatement stmt = EasyMock.createNiceMock(PreparedStatement.class);
+        PreparedStatement stmt = EasyMock.<PreparedStatement> createNiceMock(PreparedStatement.class);
         configuration.set(stmt, QSurvey.survey.name, 0, Null.DEFAULT);
     }
 

File: querydsl-sql/src/test/java/com/querydsl/sql/SQLQueryFactoryTest.java
Patch:
@@ -30,7 +30,7 @@ public class SQLQueryFactoryTest {
 
     @Before
     public void setUp() {
-        Supplier<Connection> provider = () -> EasyMock.createNiceMock(Connection.class);
+        Supplier<Connection> provider = () -> EasyMock.<Connection> createNiceMock(Connection.class);
         queryFactory = new SQLQueryFactory(SQLTemplates.DEFAULT, provider);
     }
 

File: querydsl-sql/src/test/java/com/querydsl/sql/SQLSerializerTest.java
Patch:
@@ -430,7 +430,7 @@ public void noSchemaInWhere() {
         defaultWithPrintSchema.getTemplates().setPrintSchema(true);
 
         QEmployee e = QEmployee.employee;
-        SQLDeleteClause delete = new SQLDeleteClause(EasyMock.createNiceMock(Connection.class), defaultWithPrintSchema, e);
+        SQLDeleteClause delete = new SQLDeleteClause(EasyMock.<Connection> createNiceMock(Connection.class), defaultWithPrintSchema, e);
         delete.where(e.id.gt(100));
 
         assertEquals("delete from PUBLIC.EMPLOYEE\n" +
@@ -442,7 +442,7 @@ public void schemaInWhere() {
         Configuration derbyWithPrintSchema = new Configuration(DerbyTemplates.builder().printSchema().build());
 
         QEmployee e = QEmployee.employee;
-        SQLDeleteClause delete = new SQLDeleteClause(EasyMock.createNiceMock(Connection.class), derbyWithPrintSchema, e);
+        SQLDeleteClause delete = new SQLDeleteClause(EasyMock.<Connection> createNiceMock(Connection.class), derbyWithPrintSchema, e);
         delete.where(e.id.gt(100));
 
         assertEquals("delete from \"PUBLIC\".EMPLOYEE\n" +

File: querydsl-sql/src/test/java/com/querydsl/sql/mysql/MySQLQueryFactoryTest.java
Patch:
@@ -34,7 +34,7 @@ public class MySQLQueryFactoryTest {
 
     @Before
     public void setUp() {
-        Supplier<Connection> provider = () -> EasyMock.createNiceMock(Connection.class);
+        Supplier<Connection> provider = () -> EasyMock.<Connection> createNiceMock(Connection.class);
         queryFactory = new MySQLQueryFactory(SQLTemplates.DEFAULT, provider);
     }
 

File: querydsl-sql/src/test/java/com/querydsl/sql/oracle/OracleQueryFactoryTest.java
Patch:
@@ -31,7 +31,7 @@ public class OracleQueryFactoryTest {
 
     @Before
     public void setUp() {
-        Supplier<Connection> provider = () -> EasyMock.createNiceMock(Connection.class);
+        Supplier<Connection> provider = () -> EasyMock.<Connection> createNiceMock(Connection.class);
         queryFactory = new OracleQueryFactory(SQLTemplates.DEFAULT, provider);
     }
 

File: querydsl-sql/src/test/java/com/querydsl/sql/postgresql/PostgreSQLQueryFactoryTest.java
Patch:
@@ -31,7 +31,7 @@ public class PostgreSQLQueryFactoryTest {
 
     @Before
     public void setUp() {
-        Supplier<Connection> provider = () -> EasyMock.createNiceMock(Connection.class);
+        Supplier<Connection> provider = () -> EasyMock.<Connection> createNiceMock(Connection.class);
         queryFactory = new PostgreSQLQueryFactory(SQLTemplates.DEFAULT, provider);
     }
 

File: querydsl-sql/src/main/java/com/querydsl/sql/MySQLTemplates.java
Patch:
@@ -121,7 +121,7 @@ public MySQLTemplates(char escape, boolean quote) {
 
         add(Ops.DateTimeOps.TRUNC_YEAR,   "str_to_date(concat(date_format({0},'%Y'),'-1-1'),'%Y-%m-%d')");
         add(Ops.DateTimeOps.TRUNC_MONTH,  "str_to_date(concat(date_format({0},'%Y-%m'),'-1'),'%Y-%m-%d')");
-        add(Ops.DateTimeOps.TRUNC_WEEK,   "str_to_date(concat(date_format({0},'%Y-%u'),'-2'),'%Y-%u-%w')");
+        add(Ops.DateTimeOps.TRUNC_WEEK,   "str_to_date(concat(date_format({0},'%Y-%u'),'-1'),'%Y-%u-%w')");
         add(Ops.DateTimeOps.TRUNC_DAY,    "str_to_date(date_format({0},'%Y-%m-%d'),'%Y-%m-%d')");
         add(Ops.DateTimeOps.TRUNC_HOUR,   "str_to_date(date_format({0},'%Y-%m-%d %k'),'%Y-%m-%d %k')");
         add(Ops.DateTimeOps.TRUNC_MINUTE, "str_to_date(date_format({0},'%Y-%m-%d %k:%i'),'%Y-%m-%d %k:%i')");

File: querydsl-sql/src/main/java/com/querydsl/sql/OracleTemplates.java
Patch:
@@ -135,7 +135,7 @@ public OracleTemplates(char escape, boolean quote) {
 
         add(Ops.DateTimeOps.TRUNC_YEAR, "trunc({0}, 'year')");
         add(Ops.DateTimeOps.TRUNC_MONTH, "trunc({0}, 'month')");
-        add(Ops.DateTimeOps.TRUNC_WEEK, "trunc({0}, 'w')");
+        add(Ops.DateTimeOps.TRUNC_WEEK, "trunc({0}, 'iw')");
         add(Ops.DateTimeOps.TRUNC_DAY, "trunc({0}, 'dd')");
         add(Ops.DateTimeOps.TRUNC_HOUR, "trunc({0}, 'hh')");
         add(Ops.DateTimeOps.TRUNC_MINUTE, "trunc({0}, 'mi')");

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLServerTemplates.java
Patch:
@@ -151,7 +151,7 @@ protected SQLServerTemplates(Set<String> keywords, char escape, boolean quote) {
         // truncates timestamps by replacing suffix
         add(Ops.DateTimeOps.TRUNC_YEAR,   "CONVERT(DATETIME, CONVERT(VARCHAR(4), {0}, 120) + '-01-01')");
         add(Ops.DateTimeOps.TRUNC_MONTH,  "CONVERT(DATETIME, CONVERT(VARCHAR(7), {0}, 120) + '-01')");
-        // TODO week
+        add(Ops.DateTimeOps.TRUNC_WEEK, "DATEADD(WEEK, DATEDIFF(WEEK, 0, {0} - 1), 0)");
         add(Ops.DateTimeOps.TRUNC_DAY,    "CONVERT(DATETIME, CONVERT(VARCHAR(10), {0}, 120))");
         add(Ops.DateTimeOps.TRUNC_HOUR,   "CONVERT(DATETIME, CONVERT(VARCHAR(13), {0}, 120) + ':00:00')");
         add(Ops.DateTimeOps.TRUNC_MINUTE, "CONVERT(DATETIME, CONVERT(VARCHAR(16), {0}, 120) + ':00')");

File: querydsl-codegen-utils/src/main/java/com/querydsl/codegen/utils/AbstractCodeWriter.java
Patch:
@@ -93,7 +93,7 @@ public T line(String... segments) throws IOException {
 
     @Override
     public T nl() throws IOException {
-        return append("\n");
+        return append(System.lineSeparator());
     }
 
 }

File: querydsl-codegen-utils/src/test/java/com/querydsl/codegen/utils/JavaWriterTest.java
Patch:
@@ -55,7 +55,7 @@ private static void match(String resource, String text) throws IOException {
                 textBuilder.append((char) c);
             }
         }
-        String expected = textBuilder.toString().replace("\r\n", "\n").trim();
+        String expected = textBuilder.toString().replace("\r\n", System.lineSeparator()).trim();
         String actual = text.trim();
         assertEquals(expected, actual);
     }

File: querydsl-apt/src/main/java/com/querydsl/apt/TypeExtractor.java
Patch:
@@ -26,7 +26,7 @@ class TypeExtractor extends SimpleTypeVisitorAdapter<TypeElement, Void> {
 
     private final boolean skipEnum;
 
-    public TypeExtractor(boolean skipEnum) {
+    TypeExtractor(boolean skipEnum) {
         this.skipEnum = skipEnum;
     }
 

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/Enum4Test.java
Patch:
@@ -40,7 +40,7 @@ public enum ExportUnit {
         private final int code;
         private final Integer factor; // to minutes
 
-        private ExportUnit(int code, Integer factor) {
+        ExportUnit(int code, Integer factor) {
             this.code = code;
             this.factor = factor;
         }

File: querydsl-codegen-utils/src/main/java/com/querydsl/codegen/utils/EvaluatorFactory.java
Patch:
@@ -32,7 +32,7 @@ public interface EvaluatorFactory {
      * @param constants
      * @return
      */
-    <T> Evaluator<T> createEvaluator(String source, Class<? extends T> projectionType, 
+    <T> Evaluator<T> createEvaluator(String source, Class<? extends T> projectionType,
             String[] names, Class<?>[] classes, Map<String, Object> constants);
 
     /**

File: querydsl-codegen-utils/src/main/java/com/querydsl/codegen/utils/JavaWriter.java
Patch:
@@ -293,7 +293,7 @@ private JavaWriter field(String modifier, Type type, String name, String value)
             throws IOException {
         return line(
                 modifier, type.getGenericName(true, packages, classes), Symbols.SPACE, name,
-                Symbols.ASSIGN , value, Symbols.SEMICOLON).nl();
+                Symbols.ASSIGN, value, Symbols.SEMICOLON).nl();
     }
 
 

File: querydsl-codegen-utils/src/main/java/com/querydsl/codegen/utils/MultiSuppressWarnings.java
Patch:
@@ -23,7 +23,7 @@ class MultiSuppressWarnings implements SuppressWarnings {
 
     private final String[] values;
 
-    public MultiSuppressWarnings(String... values) {
+    MultiSuppressWarnings(String... values) {
         this.values = Arrays.copyOf(values, values.length);
     }
 

File: querydsl-codegen-utils/src/main/java/com/querydsl/codegen/utils/ScalaWriter.java
Patch:
@@ -404,7 +404,7 @@ public String getRawName(Type type) {
         }
         String packageName = type.getPackageName();
         if (packageName != null && packageName.length() > 0) {
-            fullName = packageName + "." + fullName.substring(packageName.length()+1).replace('.', '$');
+            fullName = packageName + "." + fullName.substring(packageName.length() + 1).replace('.', '$');
         } else {
             fullName = fullName.replace('.', '$');
         }

File: querydsl-codegen-utils/src/main/java/com/querydsl/codegen/utils/SimpleCompiler.java
Patch:
@@ -64,7 +64,7 @@ public static String getClassPath(URLClassLoader cl) {
             } else {
                 ClassLoader c = cl;
                 while (c instanceof URLClassLoader) {
-                    for (URL url : ((URLClassLoader)c).getURLs()) {
+                    for (URL url : ((URLClassLoader) c).getURLs()) {
                         String decodedPath = URLDecoder.decode(url.getPath(), "UTF-8");
                         paths.add(new File(decodedPath).getAbsolutePath());
                     }

File: querydsl-codegen-utils/src/main/java/com/querydsl/codegen/utils/StringUtils.java
Patch:
@@ -25,7 +25,7 @@ public static String uncapitalize(String str) {
         return str.substring(0, 1).toLowerCase() + str.substring(1);
     }
 
-    public static String escapeJava(String str) {        
+    public static String escapeJava(String str) {
         str = str.replace("\\", "\\\\");
         str = str.replace("\"", "\\\"");
         str = str.replace("\r", "\\\r");
@@ -40,6 +40,6 @@ public static String repeat(char value, int times) {
         return new String(chars);
     }
     
-    private StringUtils() {}
+    private StringUtils() { }
 
 }

File: querydsl-codegen-utils/src/main/java/com/querydsl/codegen/utils/model/TypeSuper.java
Patch:
@@ -53,8 +53,8 @@ public String getGenericName(boolean asArgType, Set<String> packages, Set<String
             if (superType instanceof TypeExtends) {
                 return "?";
             } else {
-                return "? super " + superType.getGenericName(true, packages, classes);    
-            }            
+                return "? super " + superType.getGenericName(true, packages, classes);
+            }
             
         } else {
             return super.getGenericName(asArgType, packages, classes);

File: querydsl-codegen-utils/src/main/java/com/querydsl/codegen/utils/support/ClassUtils.java
Patch:
@@ -46,7 +46,7 @@ public static String getPackageName(Class<?> cl) {
         final String name = cl.getName();
         final int i = name.lastIndexOf('.');
         if (i > 0) {
-            return name.substring(0, i); 
+            return name.substring(0, i);
         } else {
             return "";
         }

File: querydsl-codegen-utils/src/main/java/com/querydsl/codegen/utils/support/ScalaSyntaxUtils.java
Patch:
@@ -23,7 +23,7 @@
  */
 public final class ScalaSyntaxUtils {
 
-    private ScalaSyntaxUtils() {}
+    private ScalaSyntaxUtils() { }
 
     private static final Set<String> reserved = new HashSet<String>(Arrays.asList("abstract", "do",
             "finally", "import", "object", "return", "trait", "var", "_", ":", "case", "else",

File: querydsl-codegen-utils/src/test/java/com/querydsl/codegen/utils/ScalaWriterTest.java
Patch:
@@ -217,7 +217,7 @@ public void Javadoc() throws IOException {
 
     @Test
     public void AnnotationConstant() throws IOException {
-        Max annotation = new MaxImpl(0l) {
+        Max annotation = new MaxImpl(0L) {
             @Override
             public Class<?>[] groups() {
                 return new Class<?>[] { Object.class, String.class, int.class };

File: querydsl-codegen-utils/src/test/java/com/querydsl/codegen/utils/SimpleCompilerTest.java
Patch:
@@ -36,7 +36,7 @@ public void tearDown() {
     public void Run() throws UnsupportedEncodingException {
         new File("target/out").mkdir();
         JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
-        URLClassLoader classLoader = (URLClassLoader)Thread.currentThread().getContextClassLoader();
+        URLClassLoader classLoader = (URLClassLoader) Thread.currentThread().getContextClassLoader();
         
         // create classpath
         StringBuilder path = new StringBuilder();
@@ -51,7 +51,7 @@ public void Run() throws UnsupportedEncodingException {
         
         // compile
         List<String> options = Arrays.asList(
-          "-classpath", path.toString(),      
+          "-classpath", path.toString(),
           "-s", "target/out",
           "src/test/java/com/querydsl/codegen/utils/SimpleCompilerTest.java");
         int compilationResult = compiler.run(null, null, null,

File: querydsl-codegen-utils/src/test/java/com/querydsl/codegen/utils/SurefireBooterTest.java
Patch:
@@ -14,11 +14,11 @@ public void test() throws IOException {
         ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
         if (classLoader instanceof URLClassLoader) {
             URLClassLoader cl = (URLClassLoader) classLoader;
-            if (cl.getURLs().length == 1 && cl.getURLs()[0].getPath().contains("surefirebooter")) {                
+            if (cl.getURLs().length == 1 && cl.getURLs()[0].getPath().contains("surefirebooter")) {
                 URL url = cl.findResource("META-INF/MANIFEST.MF");
                 Manifest manifest = new Manifest(url.openStream());
-                System.out.println(manifest.getMainAttributes().getValue("Class-Path"));    
-            }            
+                System.out.println(manifest.getMainAttributes().getValue("Class-Path"));
+            }
         }
     }
 

File: querydsl-codegen-utils/src/test/java/com/querydsl/codegen/utils/model/TypeSuperTest.java
Patch:
@@ -25,7 +25,7 @@ public void GetGenericName_As_ArgType() {
     public void Comparable() {
         // T extends Comparable<? super T>
         Type comparable = new ClassType(Comparable.class);
-        Type type = new TypeExtends("T", 
+        Type type = new TypeExtends("T",
                 new SimpleType(comparable, new TypeSuper(new TypeExtends("T", comparable))));
         assertEquals("? extends java.lang.Comparable<?>", type.getGenericName(false));
     }

File: querydsl-codegen-utils/src/test/java/com/querydsl/codegen/utils/model/TypeTest.java
Patch:
@@ -7,7 +7,6 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 
 import java.util.Collections;

File: querydsl-codegen-utils/src/test/java/com/querydsl/codegen/utils/support/Cat.java
Patch:
@@ -63,7 +63,7 @@ public Cat(String name) {
         this.name = name;
     }
     
-    public Cat(String name, String kittenName){
+    public Cat(String name, String kittenName) {
         this(name);
         kittens.get(0).setName(kittenName);
     }

File: querydsl-codegen-utils/src/test/java/com/querydsl/codegen/utils/support/ClassUtilsTest.java
Patch:
@@ -28,9 +28,9 @@ public void GetName() {
     
     @Test
     public void GetName_Packge() {
-        assertEquals("Locale", ClassUtils.getName(Locale.class, 
+        assertEquals("Locale", ClassUtils.getName(Locale.class,
                 Collections.singleton("java.util"), Collections.<String>emptySet()));
-        assertEquals("java.util.Locale", ClassUtils.getName(Locale.class, 
+        assertEquals("java.util.Locale", ClassUtils.getName(Locale.class,
                 Collections.singleton("java.util.gen"), Collections.<String>emptySet()));
     }
 

File: querydsl-collections/src/test/java/com/querydsl/collections/AbstractQueryTest.java
Patch:
@@ -77,7 +77,7 @@ static class TestQuery<T> extends AbstractCollQuery<T, TestQuery<T>> {
 
         List<Object> res = new ArrayList<Object>();
 
-        public TestQuery() {
+        TestQuery() {
             super(new DefaultQueryMetadata(), DefaultQueryEngine.getDefault());
         }
 

File: querydsl-core/src/main/java/com/querydsl/core/JoinType.java
Patch:
@@ -46,7 +46,7 @@ public enum JoinType {
 
     private final boolean inner, outer;
 
-    private JoinType(boolean inner, boolean outer) {
+    JoinType(boolean inner, boolean outer) {
         this.inner = inner;
         this.outer = outer;
     }

File: querydsl-core/src/main/java/com/querydsl/core/alias/AliasFactory.java
Patch:
@@ -41,7 +41,7 @@ class AliasFactory {
 
     private final ConcurrentHashMap<Class<?>, Map<Expression<?>, ManagedObject>> proxyCache = new ConcurrentHashMap<>();
 
-    public AliasFactory(final PathFactory pathFactory, TypeSystem typeSystem) {
+    AliasFactory(final PathFactory pathFactory, TypeSystem typeSystem) {
         this.pathFactory = pathFactory;
         this.typeSystem = typeSystem;
     }

File: querydsl-core/src/main/java/com/querydsl/core/alias/MethodType.java
Patch:
@@ -79,7 +79,7 @@ public enum MethodType {
 
     private final Class<?>[] paramTypes;
 
-    private MethodType(String namePattern, Class<?> returnType, Class<?> ownerType, Class<?>... paramTypes) {
+    MethodType(String namePattern, Class<?> returnType, Class<?> ownerType, Class<?>... paramTypes) {
         this.pattern = Pattern.compile(namePattern);
         this.returnType = returnType;
         this.ownerType = ownerType;

File: querydsl-core/src/main/java/com/querydsl/core/alias/PropertyAccessInvocationHandler.java
Patch:
@@ -56,7 +56,7 @@ class PropertyAccessInvocationHandler implements MethodInterceptor {
 
     private final TypeSystem typeSystem;
 
-    public PropertyAccessInvocationHandler(Expression<?> host, AliasFactory aliasFactory,
+    PropertyAccessInvocationHandler(Expression<?> host, AliasFactory aliasFactory,
             PathFactory pathFactory, TypeSystem typeSystem) {
         this.hostExpression = host;
         this.aliasFactory = aliasFactory;

File: querydsl-core/src/main/java/com/querydsl/core/group/GAvg.java
Patch:
@@ -23,7 +23,7 @@ class GAvg<T extends Number> extends AbstractGroupExpression<T, T> {
 
     private static final long serialVersionUID = 3518868612387641383L;
 
-    public GAvg(Expression<T> expr) {
+    GAvg(Expression<T> expr) {
         super((Class) expr.getType(), expr);
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/group/GList.java
Patch:
@@ -22,7 +22,7 @@ class GList<T> extends AbstractGroupExpression<T, List<T>> {
 
     private static final long serialVersionUID = -5613861506383727078L;
 
-    public GList(Expression<T> expr) {
+    GList(Expression<T> expr) {
         super(List.class, expr);
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/group/GMap.java
Patch:
@@ -21,7 +21,7 @@ abstract class GMap<K, V, M extends Map<K,V>> extends AbstractGroupExpression<Pa
 
     private static final long serialVersionUID = 7106389414200843920L;
 
-    public GMap(QPair<K,V> qpair) {
+    GMap(QPair<K,V> qpair) {
         super(Map.class, qpair);
     }
 
@@ -85,7 +85,7 @@ private class GroupCollectorImpl implements GroupCollector<Pair<K, V>, R> {
 
             private final Map<GroupCollector<K, T>, GroupCollector<V, U>> valueCollectors = new HashMap<GroupCollector<K, T>, GroupCollector<V, U>>();
 
-            public GroupCollectorImpl() {
+            GroupCollectorImpl() {
                 this.groupCollector = mixin.createGroupCollector();
             }
 
@@ -127,7 +127,7 @@ public R get() {
         private final GroupExpression<V, U> valueExpression;
 
         @SuppressWarnings({ "rawtypes", "unchecked" })
-        public Mixin(GroupExpression<K, T> keyExpression, GroupExpression<V, U> valueExpression, AbstractGroupExpression<Pair<T, U>, R> mixin) {
+        Mixin(GroupExpression<K, T> keyExpression, GroupExpression<V, U> valueExpression, AbstractGroupExpression<Pair<T, U>, R> mixin) {
             super((Class) mixin.getType(), QPair.create(keyExpression.getExpression(), valueExpression.getExpression()));
             this.keyExpression = keyExpression;
             this.valueExpression = valueExpression;

File: querydsl-core/src/main/java/com/querydsl/core/group/GMax.java
Patch:
@@ -20,7 +20,7 @@ class GMax<T extends Comparable<? super T>> extends AbstractGroupExpression<T, T
     private static final long serialVersionUID = 3815394663181131511L;
 
     @SuppressWarnings("unchecked")
-    public GMax(Expression<T> expr) {
+    GMax(Expression<T> expr) {
         super((Class) expr.getType(), expr);
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/group/GMin.java
Patch:
@@ -20,7 +20,7 @@ class GMin<T extends Comparable<? super T>> extends AbstractGroupExpression<T, T
     private static final long serialVersionUID = 8312168556148122576L;
 
     @SuppressWarnings("unchecked")
-    public GMin(Expression<T> expr) {
+    GMin(Expression<T> expr) {
         super((Class) expr.getType(), expr);
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/group/GOne.java
Patch:
@@ -20,7 +20,7 @@ class GOne<T> extends AbstractGroupExpression<T, T> {
     private static final long serialVersionUID = 3518868612387641383L;
 
     @SuppressWarnings("unchecked")
-    public GOne(Expression<T> expr) {
+    GOne(Expression<T> expr) {
         super((Class) expr.getType(), expr);
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/group/GSet.java
Patch:
@@ -48,7 +48,7 @@ protected SortedSet<U> createSet() {
         };
     }
 
-    public GSet(Expression<T> expr) {
+    GSet(Expression<T> expr) {
         super(Set.class, expr);
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/group/GSum.java
Patch:
@@ -23,7 +23,7 @@ class GSum<T extends Number> extends AbstractGroupExpression<T, T> {
     private static final long serialVersionUID = 3518868612387641383L;
 
     @SuppressWarnings("unchecked")
-    public GSum(Expression<T> expr) {
+    GSum(Expression<T> expr) {
         super((Class) expr.getType(), expr);
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/group/GroupByBuilder.java
Patch:
@@ -127,7 +127,7 @@ protected Map<K, V> transform(Map<K, Group> groups) {
      * @param expression projection
      * @return new result transformer
      */
-    public <V, RES extends Map<K ,V>> ResultTransformer<RES> as(final Supplier<RES> mapFactory, Expression<V> expression) {
+    public <V, RES extends Map<K, V>> ResultTransformer<RES> as(final Supplier<RES> mapFactory, Expression<V> expression) {
         final Expression<V> lookup = getLookup(expression);
         return new GroupByGenericMap<K, V, RES>(mapFactory, key, expression) {
             @Override

File: querydsl-core/src/main/java/com/querydsl/core/group/MixinGroupExpression.java
Patch:
@@ -30,7 +30,7 @@ private class GroupCollectorImpl implements GroupCollector<E, R> {
 
         private GroupCollector<E, F> groupCollector;
 
-        public GroupCollectorImpl() {
+        GroupCollectorImpl() {
             mixinGroupCollector = mixin.createGroupCollector();
         }
 

File: querydsl-core/src/main/java/com/querydsl/core/types/FactoryExpressionBase.java
Patch:
@@ -27,7 +27,7 @@ public abstract class FactoryExpressionBase<T> extends ExpressionBase<T> impleme
     private static class FactoryExpressionWrapper<T> extends ExpressionBase<T> implements FactoryExpression<T> {
         private final FactoryExpression<T> expr;
 
-        public FactoryExpressionWrapper(FactoryExpression<T> expr) {
+        FactoryExpressionWrapper(FactoryExpression<T> expr) {
             super(expr.getType());
             this.expr = expr;
         }

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/CaseBuilder.java
Patch:
@@ -47,7 +47,7 @@ private static class CaseElement<A> {
 
         private final Expression<A> target;
 
-        public CaseElement(@Nullable Predicate condition, Expression<A> target) {
+        CaseElement(@Nullable Predicate condition, Expression<A> target) {
             this.condition = condition;
             this.target = target;
         }
@@ -68,6 +68,7 @@ public Expression<A> getTarget() {
      * @author tiwe
      *
      * @param <A>
+     * @param <Q>
      */
     public abstract static class Cases<A, Q extends Expression<A>> {
 
@@ -128,6 +129,7 @@ public CaseWhen<A,Q> when(Predicate b) {
      * @author tiwe
      *
      * @param <A>
+     * @param <Q>
      */
     public static class CaseWhen<A,Q extends Expression<A>> {
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/CaseForEqBuilder.java
Patch:
@@ -49,7 +49,7 @@ private static class CaseElement<D> {
 
         private final Expression<?> target;
 
-        public CaseElement(@Nullable Expression<? extends D> eq, Expression<?> target) {
+        CaseElement(@Nullable Expression<? extends D> eq, Expression<?> target) {
             this.eq = eq;
             this.target = target;
         }

File: querydsl-core/src/main/java/com/querydsl/core/util/ConstructorUtils.java
Patch:
@@ -170,7 +170,7 @@ private static class VarArgsTransformer extends ArgumentTransformer {
 
         protected final Class<?> componentType;
 
-        public VarArgsTransformer(Constructor<?> constructor) {
+        VarArgsTransformer(Constructor<?> constructor) {
             super(constructor);
 
             if (paramTypes.length > 0) {
@@ -218,7 +218,7 @@ private static class PrimitiveTransformer extends ArgumentTransformer {
 
         private final Set<Integer> primitiveLocations;
 
-        public PrimitiveTransformer(Constructor<?> constructor) {
+        PrimitiveTransformer(Constructor<?> constructor) {
             super(constructor);
             Set<Integer> builder = new TreeSet<>();
             Class<?>[] parameterTypes = constructor.getParameterTypes();
@@ -257,7 +257,7 @@ private static class PrimitiveAwareVarArgsTransformer extends VarArgsTransformer
 
         private final Object defaultInstance;
 
-        public PrimitiveAwareVarArgsTransformer(Constructor<?> constructor) {
+        PrimitiveAwareVarArgsTransformer(Constructor<?> constructor) {
             super(constructor);
             defaultInstance = (componentType != null) ? defaultPrimitives.get(componentType) : null;
         }

File: querydsl-core/src/test/java/com/querydsl/core/CycleClassInitDependencyTest.java
Patch:
@@ -41,7 +41,7 @@ private static class LoadClassRunnable implements Runnable {
 
         private final String classToLoad;
 
-        public LoadClassRunnable(String classToLoad) {
+        LoadClassRunnable(String classToLoad) {
             this.classToLoad = classToLoad;
         }
 

File: querydsl-core/src/test/java/com/querydsl/core/NumberConstant.java
Patch:
@@ -46,7 +46,7 @@ public static <T extends Number & Comparable<?>> NumberExpression<T> create(T va
 
     private final D constant;
 
-    public NumberConstant(Class<? extends D> type, D constant) {
+    NumberConstant(Class<? extends D> type, D constant) {
         super(ConstantImpl.create(constant));
         this.constant = constant;
     }

File: querydsl-core/src/test/java/com/querydsl/core/serialization/DummySerializer.java
Patch:
@@ -21,7 +21,7 @@
 
 class DummySerializer extends SerializerBase<DummySerializer> {
 
-    public DummySerializer(Templates templates) {
+    DummySerializer(Templates templates) {
         super(templates);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/testutil/Parallelized.java
Patch:
@@ -17,7 +17,7 @@ public Parallelized(Class<?> klass) throws Throwable {
     private static class ThreadPoolScheduler implements RunnerScheduler {
         private ExecutorService executor;
 
-        public ThreadPoolScheduler() {
+        ThreadPoolScheduler() {
             int numThreads = Runtime.getRuntime().availableProcessors();
             executor = Executors.newFixedThreadPool(numThreads);
         }

File: querydsl-guava/src/main/java/com/querydsl/core/group/guava/GMultimap.java
Patch:
@@ -32,7 +32,7 @@ abstract class GMultimap<K, V, M extends Multimap<K,V>> extends AbstractGroupExp
 
     private static final long serialVersionUID = 7106389414200843920L;
 
-    public GMultimap(QPair<K,V> qpair) {
+    GMultimap(QPair<K,V> qpair) {
         super(Multimap.class, qpair);
     }
 
@@ -96,7 +96,7 @@ private class GroupCollectorImpl implements GroupCollector<Pair<K, V>, R> {
 
             private final Map<GroupCollector<K, T>, GroupCollector<V, U>> valueCollectors = new HashMap<GroupCollector<K, T>, GroupCollector<V, U>>();
 
-            public GroupCollectorImpl() {
+            GroupCollectorImpl() {
                 this.groupCollector = mixin.createGroupCollector();
             }
 
@@ -138,7 +138,7 @@ public R get() {
         private final GroupExpression<V, U> valueExpression;
 
         @SuppressWarnings({ "rawtypes", "unchecked" })
-        public Mixin(GroupExpression<K, T> keyExpression, GroupExpression<V, U> valueExpression, AbstractGroupExpression<Pair<T, U>, R> mixin) {
+        Mixin(GroupExpression<K, T> keyExpression, GroupExpression<V, U> valueExpression, AbstractGroupExpression<Pair<T, U>, R> mixin) {
             super((Class) mixin.getType(), QPair.create(keyExpression.getExpression(), valueExpression.getExpression()));
             this.keyExpression = keyExpression;
             this.valueExpression = valueExpression;

File: querydsl-guava/src/main/java/com/querydsl/core/group/guava/GOne.java
Patch:
@@ -22,7 +22,7 @@ class GOne<T> extends AbstractGroupExpression<T, T> {
     private static final long serialVersionUID = 3518868612387641383L;
 
     @SuppressWarnings("unchecked")
-    public GOne(Expression<T> expr) {
+    GOne(Expression<T> expr) {
         super((Class) expr.getType(), expr);
     }
 

File: querydsl-guava/src/main/java/com/querydsl/core/group/guava/GTable.java
Patch:
@@ -30,7 +30,7 @@ abstract class GTable<R, C, V, M extends Table<R, C, V>> extends AbstractGroupEx
 
     private static final long serialVersionUID = 7106389414200843920L;
 
-    public GTable(QPair<Pair<R,C>, V> qpair) {
+    GTable(QPair<Pair<R,C>, V> qpair) {
         super(Table.class, qpair);
     }
 
@@ -94,7 +94,7 @@ private class GroupCollectorImpl implements GroupCollector<Pair<Pair<R, C>, V>,
             private final Map<GroupCollector<R, T>, GroupCollector<C, U>> columnCollectors = new HashMap<GroupCollector<R, T>, GroupCollector<C, U>>();
             private final Map<GroupCollector<C, U>, GroupCollector<V, W>> valueCollectors = new HashMap<GroupCollector<C, U>, GroupCollector<V, W>>();
 
-            public GroupCollectorImpl() {
+            GroupCollectorImpl() {
                 this.groupCollector = mixin.createGroupCollector();
             }
 
@@ -148,7 +148,7 @@ public RES get() {
         private final GroupExpression<V, W> valueExpression;
 
         @SuppressWarnings({ "rawtypes", "unchecked" })
-        public Mixin(GroupExpression<R, T> rowExpression, GroupExpression<C, U> columnExpression, GroupExpression<V, W> valueExpression, AbstractGroupExpression<Pair<Pair<T, U>, W>, RES> mixin) {
+        Mixin(GroupExpression<R, T> rowExpression, GroupExpression<C, U> columnExpression, GroupExpression<V, W> valueExpression, AbstractGroupExpression<Pair<Pair<T, U>, W>, RES> mixin) {
             super((Class) mixin.getType(), QPair.create(QPair.create(rowExpression.getExpression(), columnExpression.getExpression()), valueExpression.getExpression()));
             this.rowExpression = rowExpression;
             this.columnExpression = columnExpression;

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPAListAccessVisitor.java
Patch:
@@ -32,7 +32,7 @@ class JPAListAccessVisitor extends ReplaceVisitor<Void> {
 
     private final Map<Path<?>, Path<?>> replacements = new HashMap<>();
 
-    public JPAListAccessVisitor(QueryMetadata metadata, Map<Expression<?>, Path<?>> aliases) {
+    JPAListAccessVisitor(QueryMetadata metadata, Map<Expression<?>, Path<?>> aliases) {
         this.metadata = metadata;
         this.aliases = aliases;
     }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPAMapAccessVisitor.java
Patch:
@@ -32,7 +32,7 @@ class JPAMapAccessVisitor extends ReplaceVisitor<Void> {
 
     private final Map<Path<?>, Path<?>> replacements = new HashMap<>();
 
-    public JPAMapAccessVisitor(QueryMetadata metadata, Map<Expression<?>, Path<?>> aliases) {
+    JPAMapAccessVisitor(QueryMetadata metadata, Map<Expression<?>, Path<?>> aliases) {
         this.metadata = metadata;
         this.aliases = aliases;
     }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPQLOps.java
Patch:
@@ -33,7 +33,7 @@ public enum JPQLOps implements Operator {
 
     private final Class<?> type;
 
-    private JPQLOps(Class<?> type) {
+    JPQLOps(Class<?> type) {
         this.type = type;
     }
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/QueryHelper.java
Patch:
@@ -39,11 +39,11 @@ class QueryHelper<T> extends JPAQueryBase<T, QueryHelper<T>> {
 
     private static final Logger logger = Logger.getLogger(QueryHelper.class.getName());
 
-    public QueryHelper(JPQLTemplates templates) {
+    QueryHelper(JPQLTemplates templates) {
         this(new DefaultQueryMetadata(), templates);
     }
 
-    public QueryHelper(QueryMetadata metadata, JPQLTemplates templates) {
+    QueryHelper(QueryMetadata metadata, JPQLTemplates templates) {
         super(metadata, templates);
     }
 

File: querydsl-lucene3/src/main/java/com/querydsl/lucene3/LuceneOps.java
Patch:
@@ -28,7 +28,7 @@ public enum LuceneOps implements Operator {
 
     private final Class<?> type;
 
-    private LuceneOps(Class<?> type) {
+    LuceneOps(Class<?> type) {
         this.type = type;
     }
 

File: querydsl-lucene4/src/main/java/com/querydsl/lucene4/LuceneOps.java
Patch:
@@ -28,7 +28,7 @@ public enum LuceneOps implements Operator {
 
     private final Class<?> type;
 
-    private LuceneOps(Class<?> type) {
+    LuceneOps(Class<?> type) {
         this.type = type;
     }
 

File: querydsl-lucene5/src/main/java/com/querydsl/lucene5/LuceneOps.java
Patch:
@@ -26,7 +26,7 @@ public enum LuceneOps implements Operator {
 
     private final Class<?> type;
 
-    private LuceneOps(Class<?> type) {
+    LuceneOps(Class<?> type) {
         this.type = type;
     }
 

File: querydsl-maven-plugin/src/test/java/com/querydsl/maven/MetadataExportMojoTest.java
Patch:
@@ -175,7 +175,7 @@ public void executeWithBeans3() throws Exception {
     @Test
     public void executeWithImport1() throws Exception {
         mojo.setTargetFolder("target/export11");
-        mojo.setImports(new String[]{"com.pck1" , "com.pck2" , "com.Q1" , "com.Q2"});
+        mojo.setImports(new String[]{"com.pck1", "com.pck2", "com.Q1", "com.Q2"});
         mojo.execute();
 
         assertTrue(new File("target/export11").exists());
@@ -184,7 +184,7 @@ public void executeWithImport1() throws Exception {
     @Test
     public void executeWithImportAndBeans1() throws Exception {
         mojo.setTargetFolder("target/export12");
-        mojo.setImports(new String[]{"com.pck1" , "com.pck2" , "com.Q1" , "com.Q2"});
+        mojo.setImports(new String[]{"com.pck1", "com.pck2", "com.Q1", "com.Q2"});
         mojo.setExportBeans(true);
         mojo.execute();
 

File: querydsl-mongodb/src/main/java/com/querydsl/mongodb/MongodbOps.java
Patch:
@@ -30,7 +30,7 @@ public enum MongodbOps implements Operator {
 
     private final Class<?> type;
 
-    private MongodbOps(Class<?> type) {
+    MongodbOps(Class<?> type) {
         this.type = type;
     }
 

File: querydsl-mongodb/src/test/java/com/querydsl/mongodb/JoinTest.java
Patch:
@@ -149,7 +149,7 @@ private MorphiaQuery<User> query() {
         return new MorphiaQuery<User>(morphia, ds, user);
     }
 
-    private MorphiaQuery<User> where(Predicate ... e) {
+    private MorphiaQuery<User> where(Predicate... e) {
         return query().where(e);
     }
 }

File: querydsl-mongodb/src/test/java/com/querydsl/mongodb/MongodbSerializerTest.java
Patch:
@@ -275,7 +275,7 @@ public void path() {
     }
 
 
-    private List<OrderSpecifier<?>> sortList(OrderSpecifier<?> ... order) {
+    private List<OrderSpecifier<?>> sortList(OrderSpecifier<?>... order) {
         return Arrays.asList(order);
     }
 

File: querydsl-mongodb/src/test/java/com/querydsl/mongodb/document/MongodbDocumentSerializerTest.java
Patch:
@@ -284,7 +284,7 @@ public void path() {
     }
 
 
-    private List<OrderSpecifier<?>> sortList(OrderSpecifier<?> ... order) {
+    private List<OrderSpecifier<?>> sortList(OrderSpecifier<?>... order) {
         return Arrays.asList(order);
     }
 

File: querydsl-spatial/src/main/java/com/querydsl/spatial/SpatialOps.java
Patch:
@@ -122,7 +122,7 @@ public enum SpatialOps implements Operator {
 
     private final Class<?> type;
 
-    private SpatialOps(Class<?> type) {
+    SpatialOps(Class<?> type) {
         this.type = type;
     }
 

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/DefaultNamingStrategyTest.java
Patch:
@@ -67,8 +67,8 @@ public void getPropertyName() {
 
     @Test
     public void getPropertyName_with_dashes() {
-        assertEquals("aFoobar", namingStrategy.getPropertyName("A-FOOBAR" , entityModel));
-        assertEquals("aFoobar", namingStrategy.getPropertyName("A_FOOBAR" , entityModel));
+        assertEquals("aFoobar", namingStrategy.getPropertyName("A-FOOBAR", entityModel));
+        assertEquals("aFoobar", namingStrategy.getPropertyName("A_FOOBAR", entityModel));
     }
 
     @Test

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/ExtendedBeanSerializerTest.java
Patch:
@@ -97,7 +97,7 @@ public void equals_hashcode_tostring() throws Exception {
     private static class ReflectionHelper {
         private final Map<String, Method> methodByName = new HashMap<String, Method>();
 
-        public ReflectionHelper(Class<?> cls) {
+        ReflectionHelper(Class<?> cls) {
             for (Method m : cls.getDeclaredMethods()) {
                 methodByName.put(m.getName(), m);
             }

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/OriginalNamingStrategyTest.java
Patch:
@@ -62,8 +62,8 @@ public void getPropertyName() {
 
     @Test
     public void getPropertyName_with_dashes() {
-        assertEquals("A_FOOBAR", namingStrategy.getPropertyName("A-FOOBAR" , entityModel));
-        assertEquals("A_FOOBAR", namingStrategy.getPropertyName("A_FOOBAR" , entityModel));
+        assertEquals("A_FOOBAR", namingStrategy.getPropertyName("A-FOOBAR", entityModel));
+        assertEquals("A_FOOBAR", namingStrategy.getPropertyName("A_FOOBAR", entityModel));
     }
 
     @Test

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/ant/AntMetaDataExporterTest.java
Patch:
@@ -88,7 +88,7 @@ public void execute_with_import() {
         exporter.setNameSuffix("");
         exporter.setBeanPrefix("");
         exporter.setBeanSuffix("Bean");
-        exporter.setImports(new String[]{"com.pck1" , "com.pck2" , "com.Q1" , "com.Q2"});
+        exporter.setImports(new String[]{"com.pck1", "com.pck2", "com.Q1", "com.Q2"});
         exporter.execute();
 
         assertTrue(new File("target/AntMetaDataExporterTest3").exists());

File: querydsl-sql-spatial/src/main/java/com/querydsl/sql/spatial/GeoDBWkbType.java
Patch:
@@ -36,7 +36,7 @@ class GeoDBWkbType extends AbstractType<Geometry> {
 
     private final ByteOrder byteOrder = ByteOrder.NDR;
 
-    public GeoDBWkbType() {
+    GeoDBWkbType() {
         super(Types.BLOB);
     }
 

File: querydsl-sql-spatial/src/main/java/com/querydsl/sql/spatial/GeometryWkbType.java
Patch:
@@ -38,7 +38,7 @@ class GeometryWkbType extends AbstractType<Geometry> {
 
     private final ByteOrder byteOrder;
 
-    public GeometryWkbType(ByteOrder byteOrder) {
+    GeometryWkbType(ByteOrder byteOrder) {
         super(Types.OTHER);
         this.byteOrder = byteOrder;
     }

File: querydsl-sql-spatial/src/main/java/com/querydsl/sql/spatial/GeometryWktClobType.java
Patch:
@@ -26,7 +26,7 @@ class GeometryWktClobType extends AbstractType<Geometry> {
 
     public static final GeometryWktClobType DEFAULT = new GeometryWktClobType();
 
-    public GeometryWktClobType() {
+    GeometryWktClobType() {
         super(Types.CLOB);
     }
 

File: querydsl-sql-spatial/src/main/java/com/querydsl/sql/spatial/GeometryWktType.java
Patch:
@@ -29,7 +29,7 @@ class GeometryWktType extends AbstractType<Geometry> {
 
     public static final GeometryWktType DEFAULT = new GeometryWktType();
 
-    public GeometryWktType() {
+    GeometryWktType() {
         super(Types.VARCHAR);
     }
 

File: querydsl-sql-spatial/src/main/java/com/querydsl/sql/spatial/H2GISWkbType.java
Patch:
@@ -34,7 +34,7 @@ class H2GISWkbType extends AbstractType<Geometry> {
 
     private final ByteOrder byteOrder = ByteOrder.NDR;
 
-    public H2GISWkbType() {
+    H2GISWkbType() {
         super(Types.BLOB);
     }
 

File: querydsl-sql-spatial/src/main/java/com/querydsl/sql/spatial/MySQLWkbType.java
Patch:
@@ -36,7 +36,7 @@ class MySQLWkbType extends AbstractType<Geometry> {
 
     private final ByteOrder byteOrder = ByteOrder.NDR;
 
-    public MySQLWkbType() {
+    MySQLWkbType() {
         super(Types.BLOB);
     }
 

File: querydsl-sql-spatial/src/main/java/com/querydsl/sql/spatial/PGgeometryType.java
Patch:
@@ -30,7 +30,7 @@ class PGgeometryType extends AbstractType<Geometry> {
 
     public static final PGgeometryType DEFAULT = new PGgeometryType();
 
-    public PGgeometryType() {
+    PGgeometryType() {
         super(Types.STRUCT);
     }
 

File: querydsl-sql-spatial/src/main/java/com/querydsl/sql/spatial/SDOGeometryType.java
Patch:
@@ -31,7 +31,7 @@ class SDOGeometryType extends AbstractType<Geometry> {
 
     public static final SDOGeometryType DEFAULT = new SDOGeometryType();
 
-    public SDOGeometryType() {
+    SDOGeometryType() {
         super(Types.OTHER);
     }
 

File: querydsl-sql-spatial/src/main/java/com/querydsl/sql/spatial/SQLServerGeometryType.java
Patch:
@@ -33,7 +33,7 @@ class SQLServerGeometryType extends AbstractType<Geometry> {
 
     private static final int DEFAULT_SRID = 4326;
 
-    public SQLServerGeometryType() {
+    SQLServerGeometryType() {
         super(Types.BLOB);
     }
 

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLOps.java
Patch:
@@ -85,7 +85,7 @@ public enum SQLOps implements Operator {
 
     private final Class<?> type;
 
-    private SQLOps(Class<?> type) {
+    SQLOps(Class<?> type) {
         this.type = type;
     }
 

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLQueryFactory.java
Patch:
@@ -35,7 +35,7 @@ static class DataSourceProvider implements Supplier<Connection> {
 
         private final DataSource ds;
 
-        public DataSourceProvider(DataSource ds) {
+        DataSourceProvider(DataSource ds) {
             this.ds = ds;
         }
 

File: querydsl-sql/src/test/java/com/querydsl/sql/InsertBase.java
Patch:
@@ -366,7 +366,7 @@ public void insert_with_subQuery2() {
                 .select(Expressions.constant("MyModule")).fetchFirst())
             .execute());
 
-        assertEquals(1L , query().from(survey).where(survey.name.eq("MyModule")).fetchCount());
+        assertEquals(1L, query().from(survey).where(survey.name.eq("MyModule")).fetchCount());
     }
 
     @Test
@@ -383,7 +383,7 @@ public void insert_with_subQuery3() {
                 .select(Expressions.constant("MyModule2")))
             .execute());
 
-        assertEquals(1L , query().from(survey).where(survey.name.eq("MyModule2")).fetchCount());
+        assertEquals(1L, query().from(survey).where(survey.name.eq("MyModule2")).fetchCount());
     }
 
     @Test

File: querydsl-sql/src/test/java/com/querydsl/sql/KeywordQuotingBase.java
Patch:
@@ -43,7 +43,7 @@ private Quoting(String path) {
             addMetadata();
         }
 
-        public Quoting(PathMetadata metadata) {
+        Quoting(PathMetadata metadata) {
             super(Quoting.class, metadata, "PUBLIC", "quoting");
             addMetadata();
         }

File: querydsl-sql/src/test/java/com/querydsl/sql/RelationalFunctionCallTest.java
Patch:
@@ -39,7 +39,7 @@ private static class TokenizeFunction extends RelationalFunctionCall<String> {
         final PathBuilder<String> alias;
         final StringPath token;
 
-        public TokenizeFunction(String alias, String... tokens) {
+        TokenizeFunction(String alias, String... tokens) {
            super(String.class, "tokenize", serializeCollection(tokens));
            this.alias = new PathBuilder<String>(String.class, alias);
            this.token = Expressions.stringPath(this.alias, "token");

File: querydsl-sql/src/test/java/com/querydsl/sql/SQLSubQueryTest.java
Patch:
@@ -56,7 +56,7 @@ public void list() {
         SubQueryExpression<?> subQuery = select(employee.id, Expressions.constant("XXX"), employee.firstname).from(employee);
         List<? extends Expression<?>> exprs = ((FactoryExpression) subQuery.getMetadata().getProjection()).getArgs();
         assertEquals(employee.id, exprs.get(0));
-        assertEquals(ConstantImpl.create("XXX") , exprs.get(1));
+        assertEquals(ConstantImpl.create("XXX"), exprs.get(1));
         assertEquals(employee.firstname, exprs.get(2));
     }
 
@@ -103,7 +103,7 @@ public void unique() {
         SubQueryExpression<?> subQuery = select(employee.id, Expressions.constant("XXX"), employee.firstname).from(employee);
         List<? extends Expression<?>> exprs = ((FactoryExpression) subQuery.getMetadata().getProjection()).getArgs();
         assertEquals(employee.id, exprs.get(0));
-        assertEquals(ConstantImpl.create("XXX") , exprs.get(1));
+        assertEquals(ConstantImpl.create("XXX"), exprs.get(1));
         assertEquals(employee.firstname, exprs.get(2));
     }
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPQLSerializer.java
Patch:
@@ -112,7 +112,7 @@ private String getEntityName(Class<?> clazz) {
         final Entity entityAnnotation = clazz.getAnnotation(Entity.class);
         if (entityAnnotation != null && entityAnnotation.name().length() > 0) {
             return entityAnnotation.name();
-        } else if (clazz.getPackage() != null) {
+        } else if (clazz.getPackage() != null && clazz.getPackage().getName().length() > 0) {
             String pn = clazz.getPackage().getName();
             return clazz.getName().substring(pn.length() + 1);
         } else {

File: querydsl-codegen/src/test/java/com/querydsl/codegen/CompileUtils.java
Patch:
@@ -9,7 +9,6 @@
 import javax.tools.JavaCompiler;
 import javax.tools.SimpleJavaFileObject;
 
-import io.github.classgraph.ClassGraph;
 import org.junit.Assert;
 
 import com.querydsl.codegen.utils.MemFileManager;
@@ -24,7 +23,7 @@ public static void assertCompiles(String name, String source) {
         ClassLoader parent = CompileUtils.class.getClassLoader();
         SimpleCompiler compiler = new SimpleCompiler();
         MemFileManager fileManager = new MemFileManager(parent, compiler.getStandardFileManager(null, null, null));
-        String classpath = new ClassGraph().overrideClassLoaders(parent).getClasspath();
+        String classpath = SimpleCompiler.getClassPath(parent);
         List<String> compilationOptions = Arrays.asList("-classpath", classpath, "-g:none");
 
         // compile

File: querydsl-codegen/src/test/java/com/querydsl/codegen/CodegenModuleTest.java
Patch:
@@ -16,8 +16,6 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 
-import javax.annotation.Generated;
-
 import org.junit.Test;
 
 import java.lang.annotation.Annotation;

File: querydsl-codegen/src/test/java/com/querydsl/codegen/CompileUtils.java
Patch:
@@ -2,14 +2,14 @@
 
 import java.io.StringWriter;
 import java.io.Writer;
-import java.net.URLClassLoader;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 
 import javax.tools.JavaCompiler;
 import javax.tools.SimpleJavaFileObject;
 
+import io.github.classgraph.ClassGraph;
 import org.junit.Assert;
 
 import com.querydsl.codegen.utils.MemFileManager;
@@ -21,10 +21,10 @@ public final class CompileUtils {
     private CompileUtils() { }
 
     public static void assertCompiles(String name, String source) {
-        URLClassLoader parent = (URLClassLoader) CompileUtils.class.getClassLoader();
+        ClassLoader parent = CompileUtils.class.getClassLoader();
         SimpleCompiler compiler = new SimpleCompiler();
         MemFileManager fileManager = new MemFileManager(parent, compiler.getStandardFileManager(null, null, null));
-        String classpath = SimpleCompiler.getClassPath(parent);
+        String classpath = new ClassGraph().overrideClassLoaders(parent).getClasspath();
         List<String> compilationOptions = Arrays.asList("-classpath", classpath, "-g:none");
 
         // compile

File: querydsl-apt/src/main/java/com/querydsl/apt/AbstractQuerydslProcessor.java
Patch:
@@ -30,7 +30,6 @@
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.ElementFilter;
 import javax.tools.Diagnostic.Kind;
-import javax.tools.JavaFileObject;
 
 import com.querydsl.codegen.utils.JavaWriter;
 import com.querydsl.codegen.utils.model.Parameter;

File: querydsl-codegen/src/test/java/com/querydsl/codegen/EmbeddableSerializerTest.java
Patch:
@@ -186,7 +186,7 @@ public void defaultGeneratedAnnotation() throws IOException {
         serializer.serialize(entityType, SimpleSerializerConfig.DEFAULT, new JavaWriter(writer));
         final String generatedSource = writer.toString();
         assertThat(generatedSource, containsString("import javax.annotation.Generated;"));
-        assertThat(generatedSource, containsString("@Generated(\"com.querydsl.codegen.EmbeddableSerializer\")\npublic class"));
+        assertThat(generatedSource, containsString("@Generated(\"com.querydsl.codegen.DefaultEmbeddableSerializer\")\npublic class"));
         CompileUtils.assertCompiles("QEntity", generatedSource);
     }
 
@@ -198,7 +198,7 @@ public void customGeneratedAnnotation() throws IOException {
 
         new DefaultEmbeddableSerializer(typeMappings, Collections.<String>emptySet(), com.querydsl.core.annotations.Generated.class).serialize(entityType, SimpleSerializerConfig.DEFAULT, new JavaWriter(writer));
         String generatedSourceCode = writer.toString();
-        assertThat(generatedSourceCode, containsString("@Generated(\"com.querydsl.codegen.EmbeddableSerializer\")\npublic class"));
+        assertThat(generatedSourceCode, containsString("@Generated(\"com.querydsl.codegen.DefaultEmbeddableSerializer\")\npublic class"));
         CompileUtils.assertCompiles("QEntity", generatedSourceCode);
     }
 }

File: querydsl-codegen/src/test/java/com/querydsl/codegen/EntitySerializerTest.java
Patch:
@@ -198,7 +198,7 @@ public void defaultGeneratedAnnotation() throws IOException {
         serializer.serialize(entityType, SimpleSerializerConfig.DEFAULT, new JavaWriter(writer));
         String generatedSourceCode = writer.toString();
         assertTrue(generatedSourceCode.contains("import javax.annotation.Generated;"));
-        assertTrue(generatedSourceCode.contains("@Generated(\"com.querydsl.codegen.EntitySerializer\")\npublic class"));
+        assertTrue(generatedSourceCode.contains("@Generated(\"com.querydsl.codegen.DefaultEntitySerializer\")\npublic class"));
         CompileUtils.assertCompiles("QEntitySerializerTest_Entity", generatedSourceCode);
     }
 
@@ -210,7 +210,7 @@ public void customGeneratedAnnotation() throws IOException {
         new DefaultEntitySerializer(typeMappings, Collections.<String>emptySet(), com.querydsl.core.annotations.Generated.class).serialize(entityType, SimpleSerializerConfig.DEFAULT, new JavaWriter(writer));
         String generatedSourceCode = writer.toString();
         assertTrue(generatedSourceCode.contains("import " + com.querydsl.core.annotations.Generated.class.getName() + ";"));
-        assertTrue(generatedSourceCode.contains("@" + com.querydsl.core.annotations.Generated.class.getSimpleName() + "(\"com.querydsl.codegen.EntitySerializer\")\npublic class"));
+        assertTrue(generatedSourceCode.contains("@" + com.querydsl.core.annotations.Generated.class.getSimpleName() + "(\"com.querydsl.codegen.DefaultEntitySerializer\")\npublic class"));
         CompileUtils.assertCompiles("QEntitySerializerTest_Entity", generatedSourceCode);
     }
 

File: querydsl-codegen/src/test/java/com/querydsl/codegen/ProjectionSerializerTest.java
Patch:
@@ -63,7 +63,7 @@ public void defaultGeneratedAnnotation() throws IOException {
         serializer.serialize(type, SimpleSerializerConfig.DEFAULT, new JavaWriter(writer));
         String generatedSource = writer.toString();
         assertThat(generatedSource, containsString("import javax.annotation.Generated"));
-        assertThat(generatedSource, containsString("@Generated(\"com.querydsl.codegen.ProjectionSerializer\")\npublic class"));
+        assertThat(generatedSource, containsString("@Generated(\"com.querydsl.codegen.DefaultProjectionSerializer\")\npublic class"));
     }
 
     @Test
@@ -76,7 +76,7 @@ public void customGeneratedAnnotation() throws IOException {
         serializer.serialize(type, SimpleSerializerConfig.DEFAULT, new JavaWriter(writer));
         String generatedSource = writer.toString();
         assertThat(generatedSource, containsString("import com.querydsl.core.annotations.Generated"));
-        assertThat(generatedSource, containsString("@Generated(\"com.querydsl.codegen.ProjectionSerializer\")\npublic class"));
+        assertThat(generatedSource, containsString("@Generated(\"com.querydsl.codegen.DefaultProjectionSerializer\")\npublic class"));
     }
 
 }

File: querydsl-jpa-codegen/src/main/java/com/querydsl/jpa/codegen/AbstractDomainExporter.java
Patch:
@@ -109,9 +109,9 @@ public AbstractDomainExporter(String namePrefix, String nameSuffix, File targetF
         module.loadExtensions();
         this.queryTypeFactory = module.get(QueryTypeFactory.class);
         this.typeMappings = module.get(TypeMappings.class);
-        this.embeddableSerializer = module.get(DefaultEmbeddableSerializer.class);
-        this.entitySerializer = module.get(DefaultEntitySerializer.class);
-        this.supertypeSerializer = module.get(DefaultSupertypeSerializer.class);
+        this.embeddableSerializer = module.get(EmbeddableSerializer.class);
+        this.entitySerializer = module.get(EntitySerializer.class);
+        this.supertypeSerializer = module.get(SupertypeSerializer.class);
         this.variableNameFunction = module.get(Function.class, CodegenModule.VARIABLE_NAME_FUNCTION_CLASS);
     }
 

File: querydsl-codegen-utils/src/main/java/com/querydsl/codegen/utils/AbstractCodeWriter.java
Patch:
@@ -93,7 +93,7 @@ public T line(String... segments) throws IOException {
 
     @Override
     public T nl() throws IOException {
-        return append("\n");
+        return append(System.lineSeparator());
     }
 
 }

File: querydsl-codegen-utils/src/test/java/com/querydsl/codegen/utils/JavaWriterTest.java
Patch:
@@ -55,7 +55,7 @@ private static void match(String resource, String text) throws IOException {
                 textBuilder.append((char) c);
             }
         }
-        String expected = textBuilder.toString().replace("\r\n", "\n").trim();
+        String expected = textBuilder.toString().replace("\r\n", System.lineSeparator()).trim();
         String actual = text.trim();
         assertEquals(expected, actual);
     }

File: querydsl-sql/src/main/java/com/querydsl/sql/MySQLTemplates.java
Patch:
@@ -121,7 +121,7 @@ public MySQLTemplates(char escape, boolean quote) {
 
         add(Ops.DateTimeOps.TRUNC_YEAR,   "str_to_date(concat(date_format({0},'%Y'),'-1-1'),'%Y-%m-%d')");
         add(Ops.DateTimeOps.TRUNC_MONTH,  "str_to_date(concat(date_format({0},'%Y-%m'),'-1'),'%Y-%m-%d')");
-        add(Ops.DateTimeOps.TRUNC_WEEK,   "str_to_date(concat(date_format({0},'%Y-%u'),'-2'),'%Y-%u-%w')");
+        add(Ops.DateTimeOps.TRUNC_WEEK,   "str_to_date(concat(date_format({0},'%Y-%u'),'-1'),'%Y-%u-%w')");
         add(Ops.DateTimeOps.TRUNC_DAY,    "str_to_date(date_format({0},'%Y-%m-%d'),'%Y-%m-%d')");
         add(Ops.DateTimeOps.TRUNC_HOUR,   "str_to_date(date_format({0},'%Y-%m-%d %k'),'%Y-%m-%d %k')");
         add(Ops.DateTimeOps.TRUNC_MINUTE, "str_to_date(date_format({0},'%Y-%m-%d %k:%i'),'%Y-%m-%d %k:%i')");

File: querydsl-sql/src/main/java/com/querydsl/sql/OracleTemplates.java
Patch:
@@ -135,7 +135,7 @@ public OracleTemplates(char escape, boolean quote) {
 
         add(Ops.DateTimeOps.TRUNC_YEAR, "trunc({0}, 'year')");
         add(Ops.DateTimeOps.TRUNC_MONTH, "trunc({0}, 'month')");
-        add(Ops.DateTimeOps.TRUNC_WEEK, "trunc({0}, 'w')");
+        add(Ops.DateTimeOps.TRUNC_WEEK, "trunc({0}, 'day')");
         add(Ops.DateTimeOps.TRUNC_DAY, "trunc({0}, 'dd')");
         add(Ops.DateTimeOps.TRUNC_HOUR, "trunc({0}, 'hh')");
         add(Ops.DateTimeOps.TRUNC_MINUTE, "trunc({0}, 'mi')");

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLServerTemplates.java
Patch:
@@ -151,7 +151,7 @@ protected SQLServerTemplates(Set<String> keywords, char escape, boolean quote) {
         // truncates timestamps by replacing suffix
         add(Ops.DateTimeOps.TRUNC_YEAR,   "CONVERT(DATETIME, CONVERT(VARCHAR(4), {0}, 120) + '-01-01')");
         add(Ops.DateTimeOps.TRUNC_MONTH,  "CONVERT(DATETIME, CONVERT(VARCHAR(7), {0}, 120) + '-01')");
-        // TODO week
+        add(Ops.DateTimeOps.TRUNC_WEEK, "cast(floor(cast(dateadd(dd, 2 - datepart(dw, {0}), {0}) as float)) as datetime");
         add(Ops.DateTimeOps.TRUNC_DAY,    "CONVERT(DATETIME, CONVERT(VARCHAR(10), {0}, 120))");
         add(Ops.DateTimeOps.TRUNC_HOUR,   "CONVERT(DATETIME, CONVERT(VARCHAR(13), {0}, 120) + ':00:00')");
         add(Ops.DateTimeOps.TRUNC_MINUTE, "CONVERT(DATETIME, CONVERT(VARCHAR(16), {0}, 120) + ':00')");

File: querydsl-core/src/test/java/com/querydsl/core/types/dsl/CoalesceTest.java
Patch:
@@ -67,7 +67,7 @@ public void dsl() {
 
     @Test
     public void dsl2() {
-        assertEquals("coalesce(firstname, lastname, xxx)", firstname.coalesce(lastname).add("xxx").toString());
+        assertEquals("coalesce(firstname, lastname, xxx)", new Coalesce<String>().add(firstname).add(lastname).add("xxx").toString());
     }
 
     @Test

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/ComparableExpressionBase.java
Patch:
@@ -88,8 +88,8 @@ public Coalesce<T> coalesce(T... args) {
      * @return nullif(this, other)
      */
     @Override
-    public ComparableExpression<T> nullif(Expression<T> other) {
-        return Expressions.comparableOperation(this.getType(), Ops.NULLIF, this, other);
+    public ComparableExpressionBase<T> nullif(Expression<T> other) {
+        return Expressions.comparableOperation(this.getType(), Ops.NULLIF, mixin, other);
     }
 
     /**
@@ -99,7 +99,7 @@ public ComparableExpression<T> nullif(Expression<T> other) {
      * @return nullif(this, other)
      */
     @Override
-    public ComparableExpression<T> nullif(T other) {
+    public ComparableExpressionBase<T> nullif(T other) {
         return nullif(ConstantImpl.create(other));
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/StringExpression.java
Patch:
@@ -849,7 +849,7 @@ public StringExpression upper() {
      */
     @Override
     public StringExpression nullif(Expression<String> other) {
-        return Expressions.stringOperation(Ops.NULLIF, this, other);
+        return Expressions.stringOperation(Ops.NULLIF, mixin, other);
     }
 
     /**

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/DateExpression.java
Patch:
@@ -124,6 +124,7 @@ public NumberExpression<Integer> dayOfYear() {
      *
      * @return max(this)
      */
+    @Override
     public DateExpression<T> max() {
         if (max == null) {
             max = Expressions.dateOperation(getType(), Ops.AggOps.MAX_AGG, mixin);
@@ -136,6 +137,7 @@ public DateExpression<T> max() {
      *
      * @return min(this)
      */
+    @Override
     public DateExpression<T> min() {
         if (min == null) {
             min = Expressions.dateOperation(getType(), Ops.AggOps.MIN_AGG, mixin);

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/DateTimeExpression.java
Patch:
@@ -157,6 +157,7 @@ public NumberExpression<Integer> hour() {
      *
      * @return max(this)
      */
+    @Override
     public DateTimeExpression<T> max() {
         if (max == null) {
             max = Expressions.dateTimeOperation(getType(), Ops.AggOps.MAX_AGG, mixin);
@@ -182,6 +183,7 @@ public NumberExpression<Integer> milliSecond() {
      *
      * @return min(this)
      */
+    @Override
     public DateTimeExpression<T> min() {
         if (min == null) {
             min = Expressions.dateTimeOperation(getType(), Ops.AggOps.MIN_AGG, mixin);

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/StringExpression.java
Patch:
@@ -563,6 +563,7 @@ public StringExpression max() {
      *
      * @return min(this)
      */
+    @Override
     public StringExpression min() {
         if (min == null) {
             min = Expressions.stringOperation(Ops.AggOps.MIN_AGG, mixin);

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/SQLCodegenModule.java
Patch:
@@ -48,6 +48,8 @@ public class SQLCodegenModule extends CodegenModule {
 
     public static final String COLUMN_COMPARATOR = "columnComparator";
 
+    static final String JAVADOC_SUFFIX = CodegenModule.JAVADOC_SUFFIX;
+
     @Override
     protected void configure() {
         super.configure();

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/SQLCodegenModule.java
Patch:
@@ -48,6 +48,8 @@ public class SQLCodegenModule extends CodegenModule {
 
     public static final String COLUMN_COMPARATOR = "columnComparator";
 
+    static final String JAVADOC_SUFFIX = CodegenModule.JAVADOC_SUFFIX;
+
     @Override
     protected void configure() {
         super.configure();

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLTemplatesRegistry.java
Patch:
@@ -78,15 +78,15 @@ protected SQLTemplates build(char escape, boolean quote) {
     private SQLTemplates.Builder getMssqlSqlTemplates(DatabaseMetaData md) throws SQLException {
         int databaseMajorVersion = md.getDatabaseMajorVersion();
 
-        if(databaseMajorVersion < 9) {
+        if (databaseMajorVersion < 9) {
             return SQLServerTemplates.builder();
         }
 
-        if(databaseMajorVersion == 9) {
+        if (databaseMajorVersion == 9) {
             return SQLServer2005Templates.builder();
         }
 
-        if(databaseMajorVersion == 10) {
+        if (databaseMajorVersion == 10) {
             return SQLServer2008Templates.builder();
         }
 

File: querydsl-core/src/main/java/com/querydsl/core/group/AbstractGroupByTransformer.java
Patch:
@@ -28,7 +28,7 @@
  * @param <K>
  * @param <T>
  */
-abstract class AbstractGroupByTransformer<K, T> implements ResultTransformer<T> {
+public abstract class AbstractGroupByTransformer<K, T> implements ResultTransformer<T> {
 
     private static final class FactoryExpressionAdapter<T> extends ExpressionBase<T> implements FactoryExpression<T> {
         private final FactoryExpression<T> expr;
@@ -64,7 +64,7 @@ public T newInstance(Object... args) {
     protected final Expression<?>[] expressions;
 
     @SuppressWarnings("unchecked")
-    AbstractGroupByTransformer(Expression<K> key, Expression<?>... expressions) {
+    protected AbstractGroupByTransformer(Expression<K> key, Expression<?>... expressions) {
         List<Expression<?>> projection = new ArrayList<Expression<?>>(expressions.length);
         groupExpressions.add(new GOne<K>(key));
         projection.add(key);

File: querydsl-core/src/main/java/com/querydsl/core/group/GroupBy.java
Patch:
@@ -36,7 +36,7 @@
  * @author tiwe
  *
  */
-public final class GroupBy {
+public class GroupBy {
 
     /**
      * Create a new GroupByBuilder for the given key expression
@@ -340,6 +340,6 @@ public static <K, V, T, U> AbstractGroupExpression<Pair<K, V>, SortedMap<T, U>>
         return new GMap.Mixin<K, V, T, U, SortedMap<T, U>>(key, value, GMap.createSorted(QPair.create(key, value), comparator));
     }
 
-    private GroupBy() { }
+    protected GroupBy() { }
 
 }

File: querydsl-core/src/main/java/com/querydsl/core/group/GroupImpl.java
Patch:
@@ -26,7 +26,7 @@
  * @author tiwe
  *
  */
-class GroupImpl implements Group {
+public class GroupImpl implements Group {
 
     private final Map<Expression<?>, GroupCollector<?,?>> groupCollectorMap = new LinkedHashMap<Expression<?>, GroupCollector<?,?>>();
 
@@ -54,7 +54,7 @@ public GroupImpl(List<GroupExpression<?, ?>> columnDefinitions,  List<QPair<?, ?
     }
 
     @SuppressWarnings("unchecked")
-    void add(Object[] row) {
+    public void add(Object[] row) {
         int i = 0;
         for (GroupCollector groupCollector : groupCollectors) {
             groupCollector.add(row[i]);

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/Expressions.java
Patch:
@@ -46,6 +46,7 @@
  * @author tiwe
  *
  */
+@SuppressWarnings("FileLength")
 public final class Expressions {
 
     public static final NumberExpression<Integer> ONE = numberTemplate(Integer.class, "1");

File: querydsl-sql-spatial/src/main/java/com/querydsl/sql/spatial/OracleSpatialTemplates.java
Patch:
@@ -46,7 +46,7 @@ public OracleSpatialTemplates(boolean quote) {
 
     public OracleSpatialTemplates(char escape, boolean quote) {
         super(escape, quote);
-        addCustomType(JGeometryType.DEFAULT);
+        addCustomType(SDOGeometryType.DEFAULT);
         // TODO
     }
 

File: querydsl-sql-spatial/src/test/java/com/querydsl/sql/spatial/suites/H2LiteralsSuiteTest.java
Patch:
@@ -1,11 +1,11 @@
 package com.querydsl.sql.spatial.suites;
 
+import com.querydsl.sql.spatial.H2GISTemplates;
 import org.junit.BeforeClass;
 import org.junit.experimental.categories.Category;
 
 import com.querydsl.core.testutil.H2;
 import com.querydsl.sql.Connections;
-import com.querydsl.sql.spatial.GeoDBTemplates;
 import com.querydsl.sql.spatial.SpatialBase;
 import com.querydsl.sql.suites.AbstractSuite;
 
@@ -17,7 +17,7 @@ public static class Spatial extends SpatialBase { }
     @BeforeClass
     public static void setUp() throws Exception {
         Connections.initH2();
-        Connections.initConfiguration(GeoDBTemplates.builder().newLineToSingleSpace().build());
+        Connections.initConfiguration(H2GISTemplates.builder().newLineToSingleSpace().build());
         Connections.getConfiguration().setUseLiterals(true);
     }
 

File: querydsl-sql-spatial/src/test/java/com/querydsl/sql/spatial/suites/H2SuiteTest.java
Patch:
@@ -1,11 +1,11 @@
 package com.querydsl.sql.spatial.suites;
 
+import com.querydsl.sql.spatial.H2GISTemplates;
 import org.junit.BeforeClass;
 import org.junit.experimental.categories.Category;
 
 import com.querydsl.core.testutil.H2;
 import com.querydsl.sql.Connections;
-import com.querydsl.sql.spatial.GeoDBTemplates;
 import com.querydsl.sql.spatial.SpatialBase;
 import com.querydsl.sql.suites.AbstractSuite;
 
@@ -17,7 +17,7 @@ public static class Spatial extends SpatialBase { }
     @BeforeClass
     public static void setUp() throws Exception {
         Connections.initH2();
-        Connections.initConfiguration(GeoDBTemplates.builder().newLineToSingleSpace().build());
+        Connections.initConfiguration(H2GISTemplates.builder().newLineToSingleSpace().build());
     }
 
 }

File: querydsl-codegen/src/main/java/com/querydsl/codegen/Extension.java
Patch:
@@ -11,9 +11,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.querydsl.apt;
-
-import com.querydsl.codegen.AbstractModule;
+package com.querydsl.codegen;
 
 /**
  * {@code Extension} allows for custom code generation extensions to be registered as service provider

File: querydsl-jpa-codegen/src/main/java/com/querydsl/jpa/codegen/AbstractDomainExporter.java
Patch:
@@ -118,6 +118,7 @@ public AbstractDomainExporter(String namePrefix, String nameSuffix, File targetF
         module.bind(CodegenModule.PREFIX, namePrefix);
         module.bind(CodegenModule.SUFFIX, nameSuffix);
         module.bind(CodegenModule.KEYWORDS, Constants.keywords);
+        module.loadExtensions();
         this.queryTypeFactory = module.get(QueryTypeFactory.class);
         this.typeMappings = module.get(TypeMappings.class);
         this.embeddableSerializer = module.get(EmbeddableSerializer.class);

File: querydsl-apt/src/main/java/com/querydsl/apt/SpatialSupport.java
Patch:
@@ -37,7 +37,6 @@ private static void registerTypes(TypeMappings typeMappings) {
         additions.put("MultiPolygon", "MultiPolygonPath");
         additions.put("Point", "PointPath");
         additions.put("Polygon", "PolygonPath");
-        additions.put("PolyHedralSurface", "PolyhedralSurfacePath");
         for (Map.Entry<String, String> entry : additions.entrySet()) {
             typeMappings.register(
                     new SimpleType("org.geolatte.geom." + entry.getKey()),

File: querydsl-spatial/src/main/java/com/querydsl/spatial/GeometryPaths.java
Patch:
@@ -41,6 +41,4 @@ public interface GeometryPaths {
 
     <A extends Polygon> PolygonPath<A> createPolygon(String property, Class<? extends A> type);
 
-    <A extends PolyHedralSurface> PolyhedralSurfacePath<A> createPolyhedralSurface(String property, Class<? extends A> type);
-
 }

File: querydsl-spatial/src/test/java/com/querydsl/spatial/GeometryEntity.java
Patch:
@@ -25,5 +25,4 @@ public class GeometryEntity {
 
     Polygon polygon;
 
-    PolyHedralSurface polyHedralSurface;
 }

File: querydsl-spatial/src/test/java/com/querydsl/spatial/GeometryPathTest.java
Patch:
@@ -18,6 +18,5 @@ public void convert() {
         assertEquals(new MultiPolygonPath<MultiPolygon>("geometry"), geometry.asMultiPolygon());
         assertEquals(new PointPath<Point>("geometry"), geometry.asPoint());
         assertEquals(new PolygonPath<Polygon>("geometry"), geometry.asPolygon());
-        assertEquals(new PolyhedralSurfacePath<PolyHedralSurface>("geometry"), geometry.asPolyHedralSurface());
     }
 }

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/SpatialSupport.java
Patch:
@@ -63,7 +63,6 @@ private static void registerTypes(TypeMappings typeMappings) {
         mappings.put(MultiPolygon.class, MultiPolygonPath.class);
         mappings.put(Point.class, PointPath.class);
         mappings.put(Polygon.class, PolygonPath.class);
-        mappings.put(PolyHedralSurface.class, PolyhedralSurfacePath.class);
         for (Map.Entry<Class<?>, Class<?>> entry : mappings.entrySet()) {
             Type type = new ClassType(entry.getKey());
             typeMappings.register(type, new ClassType(entry.getValue(), type));

File: querydsl-collections/src/main/java/com/querydsl/collections/CollQuerySerializer.java
Patch:
@@ -210,8 +210,9 @@ private static boolean isPrimitiveOrWrapperType(Class<?> type) {
     public Void visit(FactoryExpression<?> expr, Void context) {
         visitConstant(expr);
         append(".newInstance(");
+        append("new Object[] {");
         handle(", ", expr.getArgs());
-        append(")");
+        append("})");
         return null;
     }
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/AbstractJPAQuery.java
Patch:
@@ -185,7 +185,7 @@ private List<?> getResultList(Query query) {
                     }
                     rv.add(projection.newInstance((Object[]) o));
                 } else {
-                    rv.add(null);
+                    rv.add(projection.newInstance(new Object[] {null}));
                 }
             }
             return rv;

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/AbstractJPAQuery.java
Patch:
@@ -185,7 +185,7 @@ private List<?> getResultList(Query query) {
                     }
                     rv.add(projection.newInstance((Object[]) o));
                 } else {
-                    rv.add(projection.newInstance(new Object[] { null }));
+                    rv.add(projection.newInstance(new Object[] {null}));
                 }
             }
             return rv;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/JPABase.java
Patch:
@@ -286,7 +286,7 @@ public void createQuery3() {
 
     @Test
     public void createQuery4() {
-        List<Tuple> rows = query().from(cat).select(new Expression<?>[] { Expressions.nullExpression() }).fetch();
+        List<Tuple> rows = query().from(cat).select(new Expression<?>[] {Expressions.nullExpression()}).fetch();
         for (Tuple row : rows) {
             assertNotNull(row);
             assertEquals(1, row.size());

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/AbstractJPAQuery.java
Patch:
@@ -185,7 +185,7 @@ private List<?> getResultList(Query query) {
                     }
                     rv.add(projection.newInstance((Object[]) o));
                 } else {
-                    rv.add(null);
+                    rv.add(projection.newInstance(new Object[] { null }));
                 }
             }
             return rv;

File: querydsl-collections/src/main/java/com/querydsl/collections/CollQuerySerializer.java
Patch:
@@ -210,8 +210,9 @@ private static boolean isPrimitiveOrWrapperType(Class<?> type) {
     public Void visit(FactoryExpression<?> expr, Void context) {
         visitConstant(expr);
         append(".newInstance(");
+        append("new Object[] {");
         handle(", ", expr.getArgs());
-        append(")");
+        append("})");
         return null;
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/SimpleExpression.java
Patch:
@@ -318,7 +318,7 @@ public BooleanExpression notIn(T... right) {
      * @param right rhs of the comparison
      * @return this not in right
      */
-    public final BooleanExpression notIn(CollectionExpression<?,? extends T> right) {
+    public BooleanExpression notIn(CollectionExpression<?,? extends T> right) {
         return Expressions.booleanOperation(Ops.NOT_IN, mixin, right);
     }
 
@@ -328,7 +328,7 @@ public final BooleanExpression notIn(CollectionExpression<?,? extends T> right)
      * @param right rhs of the comparison
      * @return this not in right
      */
-    public final BooleanExpression notIn(SubQueryExpression<? extends T> right) {
+    public BooleanExpression notIn(SubQueryExpression<? extends T> right) {
         return Expressions.booleanOperation(Ops.NOT_IN, mixin, right);
     }
 
@@ -338,7 +338,7 @@ public final BooleanExpression notIn(SubQueryExpression<? extends T> right) {
      * @param right rhs of the comparison
      * @return this not in right
      */
-    public final BooleanExpression notIn(Expression<? extends T>... right) {
+    public BooleanExpression notIn(Expression<? extends T>... right) {
         return Expressions.booleanOperation(Ops.NOT_IN, mixin, Expressions.list(right));
     }
 

File: querydsl-collections/src/main/java/com/querydsl/collections/DefaultQueryEngine.java
Patch:
@@ -214,13 +214,15 @@ private void order(QueryMetadata metadata, List<Expression<?>> sources, List<?>
         List<OrderSpecifier<?>> orderBy = metadata.getOrderBy();
         Expression<Object>[] orderByExpr = new Expression[orderBy.size()];
         boolean[] directions = new boolean[orderBy.size()];
+        boolean[] nullsLast = new boolean[orderBy.size()];
         for (int i = 0; i < orderBy.size(); i++) {
             orderByExpr[i] = (Expression) orderBy.get(i).getTarget();
             directions[i] = orderBy.get(i).getOrder() == Order.ASC;
+            nullsLast[i] = orderBy.get(i).getNullHandling() == OrderSpecifier.NullHandling.NullsLast;
         }
         Expression<?> expr = new ArrayConstructorExpression<Object>(Object[].class, orderByExpr);
         Evaluator orderEvaluator = evaluatorFactory.create(metadata, sources, expr);
-        list.sort(new MultiComparator(orderEvaluator, directions));
+        list.sort(new MultiComparator(orderEvaluator, directions, nullsLast));
     }
 
     private List<?> project(QueryMetadata metadata, List<Expression<?>> sources, List<?> list) {

File: querydsl-collections/src/test/java/com/querydsl/collections/MultiComparatorTest.java
Patch:
@@ -34,7 +34,8 @@ public Class<? extends Object[]> getType() {
 
     @Test
     public void test() {
-        MultiComparator<Object[]> comparator = new MultiComparator<Object[]>(evaluator, new boolean[]{true, true});
+        MultiComparator<Object[]> comparator = new MultiComparator<Object[]>(evaluator, new boolean[]{true, true},
+                new boolean[]{true, true});
         assertTrue(comparator.compare(new Object[]{"a", "b"}, new Object[]{"a","c"}) < 0);
         assertTrue(comparator.compare(new Object[]{"b", "a"}, new Object[]{"a","b"}) > 0);
         assertTrue(comparator.compare(new Object[]{"b", "b"}, new Object[]{"b","b"}) == 0);

File: querydsl-collections/src/main/java/com/querydsl/collections/DefaultQueryEngine.java
Patch:
@@ -214,13 +214,15 @@ private void order(QueryMetadata metadata, List<Expression<?>> sources, List<?>
         List<OrderSpecifier<?>> orderBy = metadata.getOrderBy();
         Expression<Object>[] orderByExpr = new Expression[orderBy.size()];
         boolean[] directions = new boolean[orderBy.size()];
+        boolean[] nullsLast = new boolean[orderBy.size()];
         for (int i = 0; i < orderBy.size(); i++) {
             orderByExpr[i] = (Expression) orderBy.get(i).getTarget();
             directions[i] = orderBy.get(i).getOrder() == Order.ASC;
+            nullsLast[i] = orderBy.get(i).getNullHandling() == OrderSpecifier.NullHandling.NullsLast;
         }
         Expression<?> expr = new ArrayConstructorExpression<Object>(Object[].class, orderByExpr);
         Evaluator orderEvaluator = evaluatorFactory.create(metadata, sources, expr);
-        list.sort(new MultiComparator(orderEvaluator, directions));
+        list.sort(new MultiComparator(orderEvaluator, directions, nullsLast));
     }
 
     private List<?> project(QueryMetadata metadata, List<Expression<?>> sources, List<?> list) {

File: querydsl-collections/src/test/java/com/querydsl/collections/MultiComparatorTest.java
Patch:
@@ -34,7 +34,8 @@ public Class<? extends Object[]> getType() {
 
     @Test
     public void test() {
-        MultiComparator<Object[]> comparator = new MultiComparator<Object[]>(evaluator, new boolean[]{true, true});
+        MultiComparator<Object[]> comparator = new MultiComparator<Object[]>(evaluator, new boolean[]{true, true},
+                new boolean[]{true, true});
         assertTrue(comparator.compare(new Object[]{"a", "b"}, new Object[]{"a","c"}) < 0);
         assertTrue(comparator.compare(new Object[]{"b", "a"}, new Object[]{"a","b"}) > 0);
         assertTrue(comparator.compare(new Object[]{"b", "b"}, new Object[]{"b","b"}) == 0);

File: querydsl-core/src/main/java/com/querydsl/core/support/SerializerBase.java
Patch:
@@ -308,7 +308,7 @@ protected void visitOperation(Class<?> type, Operator operator, final List<? ext
                 }
             }
         } else if (strict) {
-            throw new IllegalArgumentException("No pattern found for " + operator);
+            throw new IllegalArgumentException(String.format("No pattern found for %s. Make sure to register any custom functions with %s.", operator, templates.getClass()));
         } else {
             append(operator.toString());
             append("(");

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/JPAInsertClause.java
Patch:
@@ -74,7 +74,7 @@ public JPAInsertClause(EntityManager em, EntityPath<?> entity, JPQLTemplates tem
     @Override
     public long execute() {
         JPQLSerializer serializer = new JPQLSerializer(templates, entityManager);
-        serializer.serializeForInsert(queryMixin.getMetadata(), columns, values, subQuery, inserts);
+        serializer.serializeForInsert(queryMixin.getMetadata(), inserts.isEmpty() ? columns : inserts.keySet(), values, subQuery, inserts);
         Map<Object,String> constants = serializer.getConstantToLabel();
 
         Query query = entityManager.createQuery(serializer.toString());
@@ -93,7 +93,7 @@ public JPAInsertClause setLockMode(LockModeType lockMode) {
     @Override
     public String toString() {
         JPQLSerializer serializer = new JPQLSerializer(templates, entityManager);
-        serializer.serializeForInsert(queryMixin.getMetadata(), columns, values, subQuery, inserts);
+        serializer.serializeForInsert(queryMixin.getMetadata(), inserts.isEmpty() ? columns : inserts.keySet(), values, subQuery, inserts);
         return serializer.toString();
     }
 

File: querydsl-apt/src/main/java/com/querydsl/apt/Configuration.java
Patch:
@@ -20,7 +20,7 @@
 import com.querydsl.codegen.TypeMappings;
 import com.querydsl.core.util.Annotations;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;

File: querydsl-apt/src/main/java/com/querydsl/apt/ExtendedTypeFactory.java
Patch:
@@ -26,7 +26,7 @@
 import com.querydsl.codegen.TypeMappings;
 import com.querydsl.core.annotations.QueryExclude;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.lang.model.element.ElementKind;
 import javax.lang.model.element.Modifier;

File: querydsl-codegen/src/main/java/com/querydsl/codegen/EntityType.java
Patch:
@@ -19,7 +19,6 @@
 import com.querydsl.codegen.utils.model.TypeAdapter;
 import com.querydsl.codegen.utils.model.TypeCategory;
 
-import javax.annotation.Nullable;
 import java.lang.annotation.Annotation;
 import java.util.Collection;
 import java.util.HashMap;
@@ -29,7 +28,7 @@
 import java.util.Set;
 import java.util.TreeSet;
 import java.util.function.Function;
-
+import org.jetbrains.annotations.Nullable;
 /**
  * {@code EntityType} represents a model of a query domain type with properties
  *

File: querydsl-codegen/src/main/java/com/querydsl/codegen/Supertype.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.codegen;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.codegen.utils.model.Type;
 

File: querydsl-codegen/src/main/java/com/querydsl/codegen/TypeMappings.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.codegen.utils.model.*;
 import com.querydsl.core.types.Expression;

File: querydsl-collections/src/main/java/com/querydsl/collections/CollQueryFunctions.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.*;
 import java.util.regex.Pattern;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.Expression;
 import com.querydsl.core.types.Operator;

File: querydsl-collections/src/main/java/com/querydsl/collections/DefaultEvaluatorFactory.java
Patch:
@@ -35,8 +35,8 @@
 import com.querydsl.core.types.ParamNotSetException;
 import com.querydsl.core.types.Predicate;
 import com.querydsl.core.util.PrimitiveUtils;
+import org.jetbrains.annotations.Nullable;
 
-import javax.annotation.Nullable;
 import javax.tools.JavaCompiler;
 import javax.tools.ToolProvider;
 import java.net.URLClassLoader;

File: querydsl-core/src/main/java/com/querydsl/core/BooleanBuilder.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.core;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.Expression;
 import com.querydsl.core.types.ExpressionUtils;

File: querydsl-core/src/main/java/com/querydsl/core/DefaultQueryMetadata.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Objects;
 import java.util.Set;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.*;
 import com.querydsl.core.util.CollectionUtils;

File: querydsl-core/src/main/java/com/querydsl/core/JoinExpression.java
Patch:
@@ -18,8 +18,8 @@
 import java.util.Objects;
 import java.util.Set;
 
-import javax.annotation.Nullable;
-import javax.annotation.concurrent.Immutable;
+import org.jetbrains.annotations.Nullable;
+import com.querydsl.core.annotations.Immutable;
 
 import com.querydsl.core.types.Expression;
 import com.querydsl.core.types.Predicate;

File: querydsl-core/src/main/java/com/querydsl/core/JoinFlag.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.io.Serializable;
 
-import javax.annotation.concurrent.Immutable;
+import com.querydsl.core.annotations.Immutable;
 
 import com.querydsl.core.types.Expression;
 import com.querydsl.core.types.ExpressionUtils;

File: querydsl-core/src/main/java/com/querydsl/core/QueryResults.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * {@code QueryResults} bundles data for paged query results

File: querydsl-core/src/main/java/com/querydsl/core/SimpleQuery.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.core;
 
-import javax.annotation.Nonnegative;
+import org.jetbrains.annotations.Range;
 
 import com.querydsl.core.types.OrderSpecifier;
 import com.querydsl.core.types.ParamExpression;
@@ -34,15 +34,15 @@ public interface SimpleQuery<Q extends SimpleQuery<Q>> extends FilteredClause<Q>
      * @param limit max rows
      * @return the current object
      */
-    Q limit(@Nonnegative long limit);
+    Q limit(@Range(from = 0, to = Integer.MAX_VALUE) long limit);
 
     /**
      * Set the offset for the query results
      *
      * @param offset row offset
      * @return the current object
      */
-    Q offset(@Nonnegative long offset);
+    Q offset(@Range(from = 0, to = Integer.MAX_VALUE) long offset);
 
     /**
      * Set both limit and offset of the query results

File: querydsl-core/src/main/java/com/querydsl/core/Tuple.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.core;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.Expression;
 

File: querydsl-core/src/main/java/com/querydsl/core/alias/Alias.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.EntityPath;
 import com.querydsl.core.types.Expression;

File: querydsl-core/src/main/java/com/querydsl/core/alias/AliasFactory.java
Patch:
@@ -19,8 +19,8 @@
 import com.querydsl.core.types.PathMetadataFactory;
 import net.sf.cglib.proxy.Enhancer;
 import net.sf.cglib.proxy.MethodInterceptor;
+import org.jetbrains.annotations.Nullable;
 
-import javax.annotation.Nullable;
 import java.util.Collections;
 import java.util.Map;
 import java.util.WeakHashMap;

File: querydsl-core/src/main/java/com/querydsl/core/alias/MethodType.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Map;
 import java.util.regex.Pattern;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.Path;
 

File: querydsl-core/src/main/java/com/querydsl/core/alias/PropertyAccessInvocationHandler.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.*;
 import com.querydsl.core.util.BeanUtils;

File: querydsl-core/src/main/java/com/querydsl/core/dml/StoreClause.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.core.dml;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.Expression;
 import com.querydsl.core.types.Path;

File: querydsl-core/src/main/java/com/querydsl/core/support/ConstantHidingExpression.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.*;
 import com.querydsl.core.types.dsl.Expressions;

File: querydsl-core/src/main/java/com/querydsl/core/support/FetchableQueryBase.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.util.List;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.mysema.commons.lang.CloseableIterator;
 import com.mysema.commons.lang.IteratorAdapter;

File: querydsl-core/src/main/java/com/querydsl/core/support/QueryBase.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.core.support;
 
-import javax.annotation.Nonnegative;
+import org.jetbrains.annotations.Range;
 
 import com.querydsl.core.QueryModifiers;
 import com.querydsl.core.types.Expression;
@@ -139,7 +139,7 @@ public Q where(Predicate... o) {
      * @param limit max rows
      * @return the current object
      */
-    public Q limit(@Nonnegative long limit) {
+    public Q limit(@Range(from = 0, to = Integer.MAX_VALUE) long limit) {
         return queryMixin.limit(limit);
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/support/QueryMixin.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.core.support;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.*;
 import com.querydsl.core.types.*;

File: querydsl-core/src/main/java/com/querydsl/core/types/ConstantImpl.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.core.types;
 
-import javax.annotation.concurrent.Immutable;
+import com.querydsl.core.annotations.Immutable;
 
 /**
  * {@code ConstantImpl} is the default implementation of the {@link Constant} interface

File: querydsl-core/src/main/java/com/querydsl/core/types/Expression.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.io.Serializable;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * {@code Expression} defines a general typed expression in a Query instance. The generic type parameter

File: querydsl-core/src/main/java/com/querydsl/core/types/ExpressionBase.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.core.types;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * {@code ExpressionBase} is the base class for immutable {@link Expression} implementations

File: querydsl-core/src/main/java/com/querydsl/core/types/ExpressionUtils.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.util.*;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.BooleanBuilder;
 import com.querydsl.core.QueryException;

File: querydsl-core/src/main/java/com/querydsl/core/types/FactoryExpression.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.util.List;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * {@code FactoryExpression} represents factory expressions such as JavaBean or

File: querydsl-core/src/main/java/com/querydsl/core/types/FactoryExpressionBase.java
Patch:
@@ -13,9 +13,9 @@
  */
 package com.querydsl.core.types;
 
-import java.util.List;
+import org.jetbrains.annotations.Nullable;
 
-import javax.annotation.Nullable;
+import java.util.List;
 
 /**
  * Common superclass for {@link FactoryExpression} implementations

File: querydsl-core/src/main/java/com/querydsl/core/types/MappingProjection.java
Patch:
@@ -15,8 +15,8 @@
 
 import java.util.List;
 
-import javax.annotation.Nullable;
-import javax.annotation.concurrent.Immutable;
+import org.jetbrains.annotations.Nullable;
+import com.querydsl.core.annotations.Immutable;
 
 import com.querydsl.core.Tuple;
 

File: querydsl-core/src/main/java/com/querydsl/core/types/Operation.java
Patch:
@@ -13,6 +13,8 @@
  */
 package com.querydsl.core.types;
 
+import org.jetbrains.annotations.Unmodifiable;
+
 import java.util.List;
 
 /**
@@ -36,6 +38,7 @@ public interface Operation<T> extends Expression<T> {
      *
      * @return arguments
      */
+    @Unmodifiable
     List<Expression<?>> getArgs();
 
     /**

File: querydsl-core/src/main/java/com/querydsl/core/types/OrderSpecifier.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.io.Serializable;
 
-import javax.annotation.concurrent.Immutable;
+import com.querydsl.core.annotations.Immutable;
 
 /**
  * {@code OrderSpecifier} represents an order-by-element in a Query instance

File: querydsl-core/src/main/java/com/querydsl/core/types/ParamExpressionImpl.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.util.UUID;
 
-import javax.annotation.concurrent.Immutable;
+import com.querydsl.core.annotations.Immutable;
 
 /**
  * {@code ParamExpressionImpl} defines a parameter in a query with an optional name

File: querydsl-core/src/main/java/com/querydsl/core/types/PathImpl.java
Patch:
@@ -15,8 +15,8 @@
 
 import java.lang.reflect.AnnotatedElement;
 
-import javax.annotation.Nullable;
-import javax.annotation.concurrent.Immutable;
+import org.jetbrains.annotations.Nullable;
+import com.querydsl.core.annotations.Immutable;
 
 import com.querydsl.core.util.ReflectionUtils;
 

File: querydsl-core/src/main/java/com/querydsl/core/types/PathMetadata.java
Patch:
@@ -16,8 +16,8 @@
 import java.io.Serializable;
 import java.util.Objects;
 
-import javax.annotation.Nullable;
-import javax.annotation.concurrent.Immutable;
+import org.jetbrains.annotations.Nullable;
+import com.querydsl.core.annotations.Immutable;
 
 /**
  * {@code PathMetadata} provides metadata for {@link Path} expressions.

File: querydsl-core/src/main/java/com/querydsl/core/types/PathMetadataFactory.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.core.types;
 
-import javax.annotation.Nonnegative;
+import org.jetbrains.annotations.Range;
 
 /**
  * {@code PathMetadataFactory} is a factory class for {@link Path} construction
@@ -41,7 +41,7 @@ public static PathMetadata forArrayAccess(Path<?> parent, Expression<Integer> in
      * @param index index of element
      * @return array access path
      */
-    public static PathMetadata forArrayAccess(Path<?> parent, @Nonnegative int index) {
+    public static PathMetadata forArrayAccess(Path<?> parent, @Range(from = 0, to = Integer.MAX_VALUE) int index) {
         return new PathMetadata(parent, index, PathType.ARRAYVALUE_CONSTANT);
     }
 
@@ -83,7 +83,7 @@ public static PathMetadata forListAccess(Path<?> parent, Expression<Integer> ind
      * @param index index of element
      * @return list access path
      */
-    public static PathMetadata forListAccess(Path<?> parent, @Nonnegative int index) {
+    public static PathMetadata forListAccess(Path<?> parent, @Range(from = 0, to = Integer.MAX_VALUE) int index) {
         return new PathMetadata(parent, index, PathType.LISTVALUE_CONSTANT);
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/types/PredicateOperation.java
Patch:
@@ -13,8 +13,8 @@
  */
 package com.querydsl.core.types;
 
-import javax.annotation.Nullable;
-import javax.annotation.concurrent.Immutable;
+import org.jetbrains.annotations.Nullable;
+import com.querydsl.core.annotations.Immutable;
 
 import java.util.List;
 

File: querydsl-core/src/main/java/com/querydsl/core/types/PredicateTemplate.java
Patch:
@@ -13,8 +13,8 @@
  */
 package com.querydsl.core.types;
 
-import javax.annotation.Nullable;
-import javax.annotation.concurrent.Immutable;
+import org.jetbrains.annotations.Nullable;
+import com.querydsl.core.annotations.Immutable;
 
 import java.util.List;
 

File: querydsl-core/src/main/java/com/querydsl/core/types/SubQueryExpressionImpl.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.core.types;
 
-import javax.annotation.concurrent.Immutable;
+import com.querydsl.core.annotations.Immutable;
 
 import com.querydsl.core.QueryMetadata;
 

File: querydsl-core/src/main/java/com/querydsl/core/types/Template.java
Patch:
@@ -17,7 +17,6 @@
 import com.querydsl.core.util.CollectionUtils;
 import com.querydsl.core.util.MathUtils;
 
-import javax.annotation.concurrent.Immutable;
 import java.io.Serializable;
 import java.math.BigDecimal;
 import java.util.Collections;
@@ -26,6 +25,8 @@
 import java.util.Set;
 import java.util.function.Function;
 
+import com.querydsl.core.annotations.Immutable;
+
 /**
  * {@code Template} provides serialization templates for {@link Operation},
  * {@link TemplateExpression} and {@link Path} serialization

File: querydsl-core/src/main/java/com/querydsl/core/types/Templates.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.IdentityHashMap;
 import java.util.Map;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * {@code Templates} provides operator patterns for query expression serialization

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/ArrayExpression.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.core.types.dsl;
 
-import javax.annotation.Nonnegative;
+import org.jetbrains.annotations.Range;
 
 import com.querydsl.core.types.Expression;
 
@@ -54,6 +54,6 @@ public interface ArrayExpression<A, T> extends Expression<A> {
      * @param index zero based index
      * @return element at index
      */
-    SimpleExpression<T> get(@Nonnegative int index);
+    SimpleExpression<T> get(@Range(from = 0, to = Integer.MAX_VALUE) int index);
 
 }

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/BeanPath.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.*;
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/BooleanExpression.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.core.types.dsl;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.*;
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/CaseBuilder.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.*;
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/CaseForEqBuilder.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Date;
 import java.util.List;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.*;
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/CollectionExpressionBase.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.util.Collection;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.*;
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/CollectionOperation.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.Collection;
 import java.util.List;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.*;
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/CollectionPath.java
Patch:
@@ -16,7 +16,7 @@
 import java.lang.reflect.AnnotatedElement;
 import java.util.Collection;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.*;
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/CollectionPathBase.java
Patch:
@@ -17,7 +17,7 @@
 import java.lang.reflect.InvocationTargetException;
 import java.util.Collection;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.ExpressionException;
 import com.querydsl.core.types.Path;

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/ComparableExpression.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.core.types.dsl;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.*;
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/ComparableExpressionBase.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.core.types.dsl;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.Expression;
 import com.querydsl.core.types.Order;

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/DateExpression.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.util.Date;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.Expression;
 import com.querydsl.core.types.ExpressionUtils;

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/DateTimeExpression.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.util.Date;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.Expression;
 import com.querydsl.core.types.ExpressionUtils;

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/EntityPathBase.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.core.types.dsl;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.EntityPath;
 import com.querydsl.core.types.Path;

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/ListExpression.java
Patch:
@@ -15,10 +15,9 @@
 
 import java.util.List;
 
-import javax.annotation.Nonnegative;
-
 import com.querydsl.core.types.CollectionExpression;
 import com.querydsl.core.types.Expression;
+import org.jetbrains.annotations.Range;
 
 /**
  * {@code ListExpression} represents {@link java.util.List} typed expressions
@@ -47,5 +46,5 @@ public interface ListExpression<E, Q extends SimpleExpression<? super E>> extend
      * @return this.get(index)
      * @see java.util.List#get(int)
      */
-    Q get(@Nonnegative int index);
+    Q get(@Range(from = 0, to = Integer.MAX_VALUE) int index);
 }

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/ListPath.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.List;
 import java.util.Map;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.*;
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/LiteralExpression.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.core.types.dsl;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.ConstantImpl;
 import com.querydsl.core.types.Expression;

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/MapExpressionBase.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.util.Map;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.ConstantImpl;
 import com.querydsl.core.types.Expression;

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/MapPath.java
Patch:
@@ -18,7 +18,7 @@
 import java.lang.reflect.InvocationTargetException;
 import java.util.Map;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.*;
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/NumberExpression.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.*;
 import com.querydsl.core.types.Ops.MathOps;

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/SetPath.java
Patch:
@@ -16,7 +16,7 @@
 import java.lang.reflect.AnnotatedElement;
 import java.util.Set;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.*;
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/SimpleExpression.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.Arrays;
 import java.util.Collection;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.*;
 import com.querydsl.core.util.CollectionUtils;

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/StringExpression.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.core.types.dsl;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.*;
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/TimeExpression.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.sql.Time;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.Expression;
 import com.querydsl.core.types.ExpressionUtils;

File: querydsl-core/src/main/java/com/querydsl/core/util/Annotations.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Annotations is a merging adapter for the {@link AnnotatedElement} interface

File: querydsl-core/src/main/java/com/querydsl/core/util/ConstructorUtils.java
Patch:
@@ -15,7 +15,6 @@
 
 import com.querydsl.core.types.ExpressionException;
 
-import javax.annotation.Nullable;
 import java.lang.reflect.Array;
 import java.lang.reflect.Constructor;
 import java.util.Arrays;
@@ -29,6 +28,7 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
+import org.jetbrains.annotations.Nullable;
 import static com.querydsl.core.util.ArrayUtils.isEmpty;
 
 /**

File: querydsl-core/src/main/java/com/querydsl/core/util/MultiIterator.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.List;
 import java.util.NoSuchElementException;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * MultiIterator provides a cartesian view on the given iterators

File: querydsl-core/src/main/java/com/querydsl/core/util/ReflectionUtils.java
Patch:
@@ -16,7 +16,7 @@
 import java.lang.reflect.*;
 import java.util.*;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 
 /**

File: querydsl-core/src/test/java/com/querydsl/core/StringConstant.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.core;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.Constant;
 import com.querydsl.core.types.ConstantImpl;

File: querydsl-core/src/test/java/com/querydsl/core/support/DummyFetchable.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.List;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.mysema.commons.lang.CloseableIterator;
 import com.mysema.commons.lang.IteratorAdapter;

File: querydsl-core/src/test/java/com/querydsl/core/support/DummyFetchableQuery.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.List;
 
-import javax.annotation.Nonnegative;
+import org.jetbrains.annotations.Range;
 
 import com.querydsl.core.FetchableQuery;
 import com.querydsl.core.QueryModifiers;
@@ -37,12 +37,12 @@ public <T1> T1 transform(ResultTransformer<T1> transformer) {
     }
 
     @Override
-    public DummyFetchableQuery<T> limit(@Nonnegative long limit) {
+    public DummyFetchableQuery<T> limit(@Range(from = 0, to = Integer.MAX_VALUE) long limit) {
         return this;
     }
 
     @Override
-    public DummyFetchableQuery<T> offset(@Nonnegative long offset) {
+    public DummyFetchableQuery<T> offset(@Range(from = 0, to = Integer.MAX_VALUE) long offset) {
         return this;
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/support/ReplaceVisitorTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.junit.Test;
 

File: querydsl-core/src/test/java/com/querydsl/core/types/dsl/BeanPathTest.java
Patch:
@@ -15,7 +15,7 @@
 
 import static org.junit.Assert.*;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.junit.Ignore;
 import org.junit.Test;

File: querydsl-jdo/src/main/java/com/querydsl/jdo/AbstractJDOQuery.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.*;
 import java.util.stream.Stream;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 import javax.jdo.JDOUserException;
 import javax.jdo.PersistenceManager;
 import javax.jdo.Query;

File: querydsl-jdo/src/main/java/com/querydsl/jdo/JDOQLSerializer.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.*;
 import java.util.Map.Entry;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.JoinExpression;
 import com.querydsl.core.QueryMetadata;

File: querydsl-jdo/src/main/java/com/querydsl/jdo/sql/AbstractSQLQuery.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 import javax.jdo.PersistenceManager;
 import javax.jdo.Query;
 

File: querydsl-jdo/src/main/java/com/querydsl/jdo/sql/JDOSQLQuery.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.jdo.sql;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 import javax.jdo.PersistenceManager;
 
 import com.querydsl.core.DefaultQueryMetadata;

File: querydsl-jpa/src/main/java/com/querydsl/jpa/DefaultQueryHandler.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.Iterator;
 import java.util.stream.Stream;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 import javax.persistence.Query;
 
 import com.mysema.commons.lang.CloseableIterator;

File: querydsl-jpa/src/main/java/com/querydsl/jpa/EclipseLinkHandler.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.Iterator;
 import java.util.stream.Stream;
 
-import javax.annotation.Nullable;
 import javax.persistence.PersistenceException;
 import javax.persistence.Query;
 
@@ -30,6 +29,7 @@
 import com.mysema.commons.lang.CloseableIterator;
 import com.mysema.commons.lang.IteratorAdapter;
 import com.querydsl.core.types.FactoryExpression;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * {@code EclipseLinkHandler} is the {@link QueryHandler} implementation for EclipseLink

File: querydsl-jpa/src/main/java/com/querydsl/jpa/HibernateHandler.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.Iterator;
 import java.util.stream.Stream;
 
-import javax.annotation.Nullable;
 import javax.persistence.PersistenceException;
 import javax.persistence.Query;
 
@@ -28,6 +27,7 @@
 import com.mysema.commons.lang.CloseableIterator;
 import com.mysema.commons.lang.IteratorAdapter;
 import com.querydsl.core.types.FactoryExpression;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * {@code HibernateHandler} is the {@link QueryHandler} implementation for Hibernate

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPAListAccessVisitor.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.JoinType;
 import com.querydsl.core.QueryMetadata;

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPAMapAccessVisitor.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.JoinType;
 import com.querydsl.core.QueryMetadata;

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPAQueryMixin.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 import javax.persistence.Entity;
 
 import com.querydsl.core.DefaultQueryMetadata;

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPQLSerializer.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.util.*;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 import javax.persistence.*;
 import javax.persistence.metamodel.EntityType;
 import javax.persistence.metamodel.Metamodel;

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPQLTemplates.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.EnumSet;
 import java.util.Set;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.Operator;
 import com.querydsl.core.types.Ops;

File: querydsl-jpa/src/main/java/com/querydsl/jpa/QueryHandler.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.jpa;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 import javax.persistence.Query;
 
 import com.mysema.commons.lang.CloseableIterator;

File: querydsl-jpa/src/main/java/com/querydsl/jpa/ScrollableResultsIterator.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.util.NoSuchElementException;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.hibernate.ScrollableResults;
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/AbstractHibernateQuery.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Map;
 import java.util.stream.Stream;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.hibernate.*;
 import org.hibernate.Query;

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/sql/AbstractHibernateSQLQuery.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Set;
 import java.util.stream.Stream;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.hibernate.Query;
 import org.hibernate.*;

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/AbstractJPAQuery.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Map;
 import java.util.stream.Stream;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 import javax.persistence.EntityManager;
 import javax.persistence.FlushModeType;
 import javax.persistence.LockModeType;

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/JPADeleteClause.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.util.Map;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 import javax.persistence.EntityManager;
 import javax.persistence.LockModeType;
 import javax.persistence.Query;

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/JPAInsertClause.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.List;
 import java.util.Map;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 import javax.persistence.EntityManager;
 import javax.persistence.LockModeType;
 import javax.persistence.Query;

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/JPAQueryFactory.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.jpa.impl;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 import javax.inject.Provider;
 import javax.persistence.EntityManager;
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/JPAUpdateClause.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.List;
 import java.util.Map;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 import javax.persistence.EntityManager;
 import javax.persistence.LockModeType;
 import javax.persistence.Query;

File: querydsl-jpa/src/main/java/com/querydsl/jpa/sql/AbstractJPASQLQuery.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Set;
 import java.util.stream.Stream;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 import javax.persistence.EntityManager;
 import javax.persistence.FlushModeType;
 import javax.persistence.LockModeType;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/QueryHelper.java
Patch:
@@ -18,7 +18,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.PrintStream;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.hibernate.hql.internal.ast.HqlParser;
 import org.slf4j.Logger;

File: querydsl-lucene3/src/main/java/com/querydsl/lucene3/AbstractLuceneQuery.java
Patch:
@@ -42,8 +42,8 @@
 import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.search.Sort;
 import org.apache.lucene.search.TotalHitCountCollector;
+import org.jetbrains.annotations.Nullable;
 
-import javax.annotation.Nullable;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;

File: querydsl-lucene3/src/main/java/com/querydsl/lucene3/LuceneSerializer.java
Patch:
@@ -17,7 +17,7 @@
 import java.math.BigInteger;
 import java.util.*;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.apache.lucene.index.Term;
 import org.apache.lucene.queryParser.QueryParser;

File: querydsl-lucene3/src/main/java/com/querydsl/lucene3/ResultIterator.java
Patch:
@@ -19,8 +19,8 @@
 import org.apache.lucene.document.FieldSelector;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.ScoreDoc;
+import org.jetbrains.annotations.Nullable;
 
-import javax.annotation.Nullable;
 import java.io.IOException;
 import java.util.function.Function;
 

File: querydsl-lucene4/src/main/java/com/querydsl/lucene4/AbstractLuceneQuery.java
Patch:
@@ -40,8 +40,8 @@
 import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.search.Sort;
 import org.apache.lucene.search.TotalHitCountCollector;
+import org.jetbrains.annotations.Nullable;
 
-import javax.annotation.Nullable;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;

File: querydsl-lucene4/src/main/java/com/querydsl/lucene4/LuceneSerializer.java
Patch:
@@ -17,7 +17,7 @@
 import java.math.BigInteger;
 import java.util.*;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.apache.lucene.index.Term;
 import org.apache.lucene.queryparser.classic.QueryParser;

File: querydsl-lucene4/src/main/java/com/querydsl/lucene4/ResultIterator.java
Patch:
@@ -18,8 +18,8 @@
 import org.apache.lucene.document.Document;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.ScoreDoc;
+import org.jetbrains.annotations.Nullable;
 
-import javax.annotation.Nullable;
 import java.io.IOException;
 import java.util.Set;
 import java.util.function.Function;

File: querydsl-lucene5/src/main/java/com/querydsl/lucene5/AbstractLuceneQuery.java
Patch:
@@ -41,8 +41,8 @@
 import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.search.Sort;
 import org.apache.lucene.search.TotalHitCountCollector;
+import org.jetbrains.annotations.Nullable;
 
-import javax.annotation.Nullable;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;

File: querydsl-lucene5/src/main/java/com/querydsl/lucene5/LuceneSerializer.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Locale;
 import java.util.Map;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.apache.lucene.index.Term;
 import org.apache.lucene.queryparser.classic.QueryParser;

File: querydsl-lucene5/src/main/java/com/querydsl/lucene5/ResultIterator.java
Patch:
@@ -18,8 +18,8 @@
 import org.apache.lucene.document.Document;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.ScoreDoc;
+import org.jetbrains.annotations.Nullable;
 
-import javax.annotation.Nullable;
 import java.io.IOException;
 import java.util.Set;
 import java.util.function.Function;

File: querydsl-mongodb/src/main/java/com/querydsl/mongodb/AbstractMongodbQuery.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.HashMap;
 import java.util.List;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.Map;
 import java.util.function.Function;

File: querydsl-mongodb/src/main/java/com/querydsl/mongodb/document/AbstractFetchableMongodbQuery.java
Patch:
@@ -26,8 +26,8 @@
 import com.querydsl.core.types.Path;
 import com.querydsl.core.types.Predicate;
 import org.bson.Document;
+import org.jetbrains.annotations.Nullable;
 
-import javax.annotation.Nullable;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;

File: querydsl-mongodb/src/main/java/com/querydsl/mongodb/document/AbstractMongodbQuery.java
Patch:
@@ -20,8 +20,6 @@
 import java.util.List;
 import java.util.Map;
 
-import javax.annotation.Nullable;
-
 import org.bson.Document;
 
 import com.mongodb.ReadPreference;
@@ -40,6 +38,7 @@
 import com.querydsl.core.types.Path;
 import com.querydsl.core.types.Predicate;
 import com.querydsl.core.types.dsl.CollectionPathBase;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * {@code AbstractMongodbQuery} provides a base class for general Querydsl query implementation.

File: querydsl-spatial/src/main/java/com/querydsl/spatial/CurveExpression.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.spatial;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.geolatte.geom.Geometry;
 import org.geolatte.geom.Point;

File: querydsl-spatial/src/main/java/com/querydsl/spatial/GeometryCollectionExpression.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.spatial;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.geolatte.geom.Geometry;
 import org.geolatte.geom.GeometryCollection;

File: querydsl-spatial/src/main/java/com/querydsl/spatial/GeometryExpression.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.spatial;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.geolatte.geom.Geometry;
 

File: querydsl-spatial/src/main/java/com/querydsl/spatial/LineStringExpression.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.spatial;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.geolatte.geom.LineString;
 import org.geolatte.geom.Point;

File: querydsl-spatial/src/main/java/com/querydsl/spatial/MultiCurveExpression.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.spatial;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.geolatte.geom.GeometryCollection;
 

File: querydsl-spatial/src/main/java/com/querydsl/spatial/MultiSurfaceExpression.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.spatial;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.geolatte.geom.GeometryCollection;
 import org.geolatte.geom.Point;

File: querydsl-spatial/src/main/java/com/querydsl/spatial/PointExpression.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.spatial;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.geolatte.geom.Point;
 

File: querydsl-spatial/src/main/java/com/querydsl/spatial/PolygonExpression.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.spatial;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.geolatte.geom.LineString;
 import org.geolatte.geom.Polygon;

File: querydsl-spatial/src/main/java/com/querydsl/spatial/PolyhedralSurfaceExpression.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.spatial;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.geolatte.geom.PolyHedralSurface;
 

File: querydsl-spatial/src/main/java/com/querydsl/spatial/SurfaceExpression.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.spatial;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.geolatte.geom.Geometry;
 import org.geolatte.geom.Point;

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/JTSCurveExpression.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.spatial.jts;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.Expression;
 import com.querydsl.core.types.dsl.BooleanExpression;

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/JTSGeometryCollectionExpression.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.spatial.jts;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.ConstantImpl;
 import com.querydsl.core.types.Expression;

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/JTSGeometryExpression.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.spatial.jts;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.ConstantImpl;
 import com.querydsl.core.types.Expression;

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/JTSLineStringExpression.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.spatial.jts;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.ConstantImpl;
 import com.querydsl.core.types.Expression;

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/JTSMultiCurveExpression.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.spatial.jts;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.Expression;
 import com.querydsl.core.types.dsl.BooleanExpression;

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/JTSMultiSurfaceExpression.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.spatial.jts;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.Expression;
 import com.querydsl.core.types.dsl.Expressions;

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/JTSPointExpression.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.spatial.jts;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.Expression;
 import com.querydsl.core.types.dsl.Expressions;

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/JTSPolygonExpression.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.spatial.jts;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.ConstantImpl;
 import com.querydsl.core.types.Expression;

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/JTSSurfaceExpression.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.spatial.jts;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.Expression;
 import com.querydsl.core.types.dsl.Expressions;

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/KeyDataFactory.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Map;
 import java.util.TreeMap;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.codegen.utils.model.SimpleType;
 import com.querydsl.codegen.utils.model.Type;

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/support/ForeignKeyData.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.codegen.utils.model.Type;
 

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/support/InverseForeignKeyData.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.codegen.utils.model.Type;
 

File: querydsl-sql-spatial/src/main/java/com/querydsl/sql/spatial/GeoDBWkbType.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.SQLException;
 import java.sql.Types;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.geolatte.geom.ByteBuffer;
 import org.geolatte.geom.ByteOrder;

File: querydsl-sql-spatial/src/main/java/com/querydsl/sql/spatial/GeometryWkbType.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.SQLException;
 import java.sql.Types;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.geolatte.geom.ByteBuffer;
 import org.geolatte.geom.ByteOrder;

File: querydsl-sql-spatial/src/main/java/com/querydsl/sql/spatial/GeometryWktClobType.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.sql.*;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.geolatte.geom.Geometry;
 import org.geolatte.geom.codec.Wkt;

File: querydsl-sql-spatial/src/main/java/com/querydsl/sql/spatial/GeometryWktType.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.SQLException;
 import java.sql.Types;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.geolatte.geom.Geometry;
 import org.geolatte.geom.codec.Wkt;

File: querydsl-sql-spatial/src/main/java/com/querydsl/sql/spatial/JGeometryType.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.SQLException;
 import java.sql.Types;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.geolatte.geom.Geometry;
 

File: querydsl-sql-spatial/src/main/java/com/querydsl/sql/spatial/MySQLWkbType.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.SQLException;
 import java.sql.Types;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.geolatte.geom.ByteBuffer;
 import org.geolatte.geom.ByteOrder;

File: querydsl-sql-spatial/src/main/java/com/querydsl/sql/spatial/PGgeometryType.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.SQLException;
 import java.sql.Types;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.geolatte.geom.Geometry;
 import org.geolatte.geom.codec.Wkt;

File: querydsl-sql-spatial/src/main/java/com/querydsl/sql/spatial/SQLServerGeometryType.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.SQLException;
 import java.sql.Types;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.geolatte.geom.Geometry;
 import org.geolatte.geom.codec.Wkt;

File: querydsl-sql/src/main/java/com/querydsl/sql/AbstractSQLQuery.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.List;
 import java.util.Map;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 import javax.inject.Provider;
 
 import org.slf4j.Logger;

File: querydsl-sql/src/main/java/com/querydsl/sql/Configuration.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.List;
 import java.util.Map;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.util.PrimitiveUtils;
 import org.slf4j.Logger;

File: querydsl-sql/src/main/java/com/querydsl/sql/ForeignKey.java
Patch:
@@ -17,8 +17,8 @@
 import java.util.Collections;
 import java.util.List;
 
-import javax.annotation.Nullable;
-import javax.annotation.concurrent.Immutable;
+import org.jetbrains.annotations.Nullable;
+import com.querydsl.core.annotations.Immutable;
 
 import com.querydsl.core.BooleanBuilder;
 import com.querydsl.core.Tuple;

File: querydsl-sql/src/main/java/com/querydsl/sql/JDBCTypeMapping.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.mysema.commons.lang.Pair;
 import com.querydsl.sql.types.Null;

File: querydsl-sql/src/main/java/com/querydsl/sql/JavaTypeMapping.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.util.PrimitiveUtils;
 import com.querydsl.core.util.ReflectionUtils;

File: querydsl-sql/src/main/java/com/querydsl/sql/PrimaryKey.java
Patch:
@@ -17,8 +17,8 @@
 import java.util.Arrays;
 import java.util.List;
 
-import javax.annotation.Nullable;
-import javax.annotation.concurrent.Immutable;
+import org.jetbrains.annotations.Nullable;
+import com.querydsl.core.annotations.Immutable;
 
 import com.querydsl.core.Tuple;
 import com.querydsl.core.types.*;

File: querydsl-sql/src/main/java/com/querydsl/sql/ProjectableSQLQuery.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.mysema.commons.lang.CloseableIterator;
 import com.querydsl.core.FetchableQuery;

File: querydsl-sql/src/main/java/com/querydsl/sql/RelationalPath.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.Collection;
 import java.util.List;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.EntityPath;
 import com.querydsl.core.types.Path;

File: querydsl-sql/src/main/java/com/querydsl/sql/RelationalPathBase.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.List;
 import java.util.Map;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.*;
 import com.querydsl.core.types.dsl.BeanPath;

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLListeners.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.QueryMetadata;
 import com.querydsl.core.types.Expression;

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLResultIterator.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.Statement;
 import java.util.NoSuchElementException;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.mysema.commons.lang.CloseableIterator;
 import com.querydsl.core.QueryException;

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLSerializer.java
Patch:
@@ -16,7 +16,7 @@
 import java.sql.Types;
 import java.util.*;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.JoinExpression;
 import com.querydsl.core.JoinFlag;

File: querydsl-sql/src/main/java/com/querydsl/sql/StatementOptions.java
Patch:
@@ -16,7 +16,7 @@
 
 import java.sql.Statement;
 
-import javax.annotation.concurrent.Immutable;
+import com.querydsl.core.annotations.Immutable;
 
 /**
  * {@code StatementOptions} holds parameters that should be applied to {@link Statement}s.

File: querydsl-sql/src/main/java/com/querydsl/sql/UnionImpl.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.List;
 import java.util.stream.Stream;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.mysema.commons.lang.CloseableIterator;
 import com.querydsl.core.NonUniqueResultException;

File: querydsl-sql/src/main/java/com/querydsl/sql/WindowFirstLast.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.*;
 import com.querydsl.core.types.dsl.ComparableExpressionBase;

File: querydsl-sql/src/main/java/com/querydsl/sql/WindowFunction.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.*;
 import com.querydsl.core.types.dsl.BooleanExpression;

File: querydsl-sql/src/main/java/com/querydsl/sql/WithinGroup.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.*;
 import com.querydsl.core.types.dsl.ComparableExpressionBase;

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/AbstractSQLClause.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.List;
 import java.util.Map;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 import javax.inject.Provider;
 
 import org.slf4j.Logger;

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/AbstractSQLDeleteClause.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.SQLException;
 import java.util.*;
 
-import javax.annotation.Nonnegative;
+import org.jetbrains.annotations.Range;
 import javax.inject.Provider;
 
 import org.slf4j.Logger;
@@ -257,7 +257,7 @@ public C where(Predicate... o) {
         return (C) this;
     }
 
-    public C limit(@Nonnegative long limit) {
+    public C limit(@Range(from = 0, to = Integer.MAX_VALUE) long limit) {
         metadata.setModifiers(QueryModifiers.limit(limit));
         return (C) this;
     }

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/AbstractSQLInsertClause.java
Patch:
@@ -16,7 +16,7 @@
 import java.sql.*;
 import java.util.*;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 import javax.inject.Provider;
 
 import com.querydsl.core.util.CollectionUtils;

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/AbstractSQLUpdateClause.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.SQLException;
 import java.util.*;
 
-import javax.annotation.Nonnegative;
+import org.jetbrains.annotations.Range;
 import javax.inject.Provider;
 
 import org.slf4j.Logger;
@@ -297,7 +297,7 @@ public C where(Predicate... o) {
         return (C) this;
     }
 
-    public C limit(@Nonnegative long limit) {
+    public C limit(@Range(from = 0, to = Integer.MAX_VALUE) long limit) {
         metadata.setModifiers(QueryModifiers.limit(limit));
         return (C) this;
     }

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/SQLInsertBatch.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.Expression;
 import com.querydsl.core.types.Path;

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/SQLMergeBatch.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.Expression;
 import com.querydsl.core.types.Path;

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/SQLMergeClause.java
Patch:
@@ -16,7 +16,7 @@
 import java.sql.*;
 import java.util.*;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 import javax.inject.Provider;
 
 import com.querydsl.core.util.CollectionUtils;

File: querydsl-sql/src/main/java/com/querydsl/sql/types/ArrayType.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.sql.*;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.util.PrimitiveUtils;
 

File: querydsl-sql/src/main/java/com/querydsl/sql/types/CurrencyType.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.Types;
 import java.util.Currency;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * {@code CurrencyType} maps Currency to String on the JDBC level

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310InstantType.java
Patch:
@@ -5,7 +5,7 @@
 import java.time.LocalDateTime;
 import java.time.ZoneId;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * JSR310InstantType maps {@linkplain java.time.Instant} to

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310LocalDateTimeType.java
Patch:
@@ -1,6 +1,6 @@
 package com.querydsl.sql.types;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310LocalDateType.java
Patch:
@@ -6,7 +6,7 @@
 import java.time.LocalDateTime;
 import java.time.ZoneOffset;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * JSR310LocalDateType maps {@linkplain java.time.LocalDate}

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310LocalTimeType.java
Patch:
@@ -4,7 +4,7 @@
 import java.time.LocalTime;
 import java.time.temporal.ChronoField;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * JSR310LocalTimeType maps {@linkplain java.time.LocalTime}

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310OffsetDateTimeType.java
Patch:
@@ -1,6 +1,6 @@
 package com.querydsl.sql.types;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310OffsetTimeType.java
Patch:
@@ -6,7 +6,7 @@
 import java.time.ZoneOffset;
 import java.time.temporal.ChronoField;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * JSR310OffsetTimeType maps {@linkplain java.time.OffsetTime}

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310ZonedDateTimeType.java
Patch:
@@ -1,6 +1,6 @@
 package com.querydsl.sql.types;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;

File: querydsl-sql/src/main/java/com/querydsl/sql/types/LocaleType.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Locale;
 import java.util.regex.Pattern;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * {@code LocaleType} maps Locale to String on the JDBC level

File: querydsl-sql/src/main/java/com/querydsl/sql/types/NumericBooleanType.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.SQLException;
 import java.sql.Types;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * {@code NumericBooleanType} maps Boolean to 1/0 (Integer) on the JDBC level

File: querydsl-sql/src/main/java/com/querydsl/sql/types/TrueFalseType.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.SQLException;
 import java.sql.Types;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * {@code TrueFalseType} maps Boolean to 'T'/'F' on the JDBC level

File: querydsl-sql/src/main/java/com/querydsl/sql/types/Type.java
Patch:
@@ -17,7 +17,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Defines the de/serialization of a typed Java object from a ResultSet or to a PreparedStatement

File: querydsl-sql/src/main/java/com/querydsl/sql/types/YesNoType.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.SQLException;
 import java.sql.Types;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * {@code YesNoType} maps Boolean to 'Y'/'N' on the JDBC level

File: querydsl-sql/src/test/java/com/querydsl/sql/AbstractBaseTest.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.Connection;
 import java.util.List;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import org.junit.ClassRule;
 import org.junit.Rule;

File: querydsl-sql/src/test/java/com/querydsl/sql/Projection.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.sql;
 
-import javax.annotation.Nullable;
+import org.jetbrains.annotations.Nullable;
 
 import com.querydsl.core.types.Expression;
 

File: querydsl-sql/src/test/java/com/querydsl/sql/QProjection.java
Patch:
@@ -21,11 +21,13 @@
 import com.querydsl.core.types.ExpressionBase;
 import com.querydsl.core.types.FactoryExpression;
 import com.querydsl.core.types.Visitor;
+import org.jetbrains.annotations.Unmodifiable;
 
 public class QProjection extends ExpressionBase<Projection> implements FactoryExpression<Projection> {
 
     private static final long serialVersionUID = -7330905848558102164L;
 
+    @Unmodifiable
     private final List<Expression<?>> args;
 
     public QProjection(Expression<?>... args) {
@@ -70,6 +72,7 @@ public Object[] toArray() {
     }
 
     @Override
+    @Unmodifiable
     public List<Expression<?>> getArgs() {
         return args;
     }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPQLTemplates.java
Patch:
@@ -144,6 +144,7 @@ protected JPQLTemplates(char escape, QueryHandler queryHandler) {
         // path types
         add(PathType.PROPERTY, "{0}.{1s}");
         add(PathType.VARIABLE, "{0s}");
+        add(PathType.TREATED_PATH, "treat({0} as {1s})");
 
         // case for eq
         add(Ops.CASE_EQ, "case {1} end");

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/SimpleExpression.java
Patch:
@@ -318,7 +318,7 @@ public BooleanExpression notIn(T... right) {
      * @param right rhs of the comparison
      * @return this not in right
      */
-    public final BooleanExpression notIn(CollectionExpression<?,? extends T> right) {
+    public BooleanExpression notIn(CollectionExpression<?,? extends T> right) {
         return Expressions.booleanOperation(Ops.NOT_IN, mixin, right);
     }
 
@@ -328,7 +328,7 @@ public final BooleanExpression notIn(CollectionExpression<?,? extends T> right)
      * @param right rhs of the comparison
      * @return this not in right
      */
-    public final BooleanExpression notIn(SubQueryExpression<? extends T> right) {
+    public BooleanExpression notIn(SubQueryExpression<? extends T> right) {
         return Expressions.booleanOperation(Ops.NOT_IN, mixin, right);
     }
 
@@ -338,7 +338,7 @@ public final BooleanExpression notIn(SubQueryExpression<? extends T> right) {
      * @param right rhs of the comparison
      * @return this not in right
      */
-    public final BooleanExpression notIn(Expression<? extends T>... right) {
+    public BooleanExpression notIn(Expression<? extends T>... right) {
         return Expressions.booleanOperation(Ops.NOT_IN, mixin, Expressions.list(right));
     }
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/JPAInsertClause.java
Patch:
@@ -74,7 +74,7 @@ public JPAInsertClause(EntityManager em, EntityPath<?> entity, JPQLTemplates tem
     @Override
     public long execute() {
         JPQLSerializer serializer = new JPQLSerializer(templates, entityManager);
-        serializer.serializeForInsert(queryMixin.getMetadata(), columns, values, subQuery, inserts);
+        serializer.serializeForInsert(queryMixin.getMetadata(), inserts.isEmpty() ? columns : inserts.keySet(), values, subQuery, inserts);
         Map<Object,String> constants = serializer.getConstantToLabel();
 
         Query query = entityManager.createQuery(serializer.toString());
@@ -93,7 +93,7 @@ public JPAInsertClause setLockMode(LockModeType lockMode) {
     @Override
     public String toString() {
         JPQLSerializer serializer = new JPQLSerializer(templates, entityManager);
-        serializer.serializeForInsert(queryMixin.getMetadata(), columns, values, subQuery, inserts);
+        serializer.serializeForInsert(queryMixin.getMetadata(), inserts.isEmpty() ? columns : inserts.keySet(), values, subQuery, inserts);
         return serializer.toString();
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/types/TemplateFactory.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
+import java.util.WeakHashMap;
 import java.util.function.Function;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -58,7 +58,7 @@ public class TemplateFactory {
             + "([slu%]?%?)"
             + "\\}");
 
-    private final Map<String,Template> cache = new ConcurrentHashMap<String,Template>();
+    private final Map<String, Template> cache = Collections.synchronizedMap(new WeakHashMap<>());;
 
     private final char escape;
 

File: querydsl-sql/src/main/java/com/querydsl/sql/types/DateTimeType.java
Patch:
@@ -18,12 +18,13 @@
 import org.joda.time.DateTime;
 
 /**
- * {@code DateTimeType} maps DateTime to Timestamp on the JDBC level
+ * {@code DateTimeType} maps {@linkplain org.joda.time.DateTime}
+ * to {@linkplain java.sql.Timestamp} on the JDBC level
  *
  * @author tiwe
  *
  */
-public class DateTimeType extends AbstractDateTimeType<DateTime> {
+public class DateTimeType extends AbstractJodaTimeDateTimeType<DateTime> {
 
     public DateTimeType() {
         super(Types.TIMESTAMP);

File: querydsl-sql/src/main/java/com/querydsl/sql/types/LocalDateTimeType.java
Patch:
@@ -20,12 +20,13 @@
 import org.joda.time.LocalDateTime;
 
 /**
- * {@code LocalDateTimeType} maps LocalDateTime to Timestamp on the JDBC level
+ * {@code LocalDateTimeType} maps {@linkplain org.joda.time.LocalDateTime}
+ * to {@linkplain java.sql.Timestamp} on the JDBC level
  *
  * @author tiwe
  *
  */
-public class LocalDateTimeType extends AbstractDateTimeType<LocalDateTime> {
+public class LocalDateTimeType extends AbstractJodaTimeDateTimeType<LocalDateTime> {
 
     public LocalDateTimeType() {
         super(Types.TIMESTAMP);

File: querydsl-sql/src/main/java/com/querydsl/sql/types/LocalDateType.java
Patch:
@@ -19,12 +19,13 @@
 import org.joda.time.LocalDate;
 
 /**
- * {@code LocalDateType} maps LocalDate to Date on the JDBC level
+ * {@code LocalDateType} maps {@linkplain org.joda.time.LocalDate}
+ * to {@linkplain java.sql.Date} on the JDBC level
  *
  * @author tiwe
  *
  */
-public class LocalDateType extends AbstractDateTimeType<LocalDate> {
+public class LocalDateType extends AbstractJodaTimeDateTimeType<LocalDate> {
 
     public LocalDateType() {
         super(Types.DATE);

File: querydsl-sql/src/main/java/com/querydsl/sql/types/LocalTimeType.java
Patch:
@@ -19,12 +19,13 @@
 import org.joda.time.LocalTime;
 
 /**
- * {@code LocalTimeType} maps LocalTime to Time on the JDBC level
+ * {@code LocalTimeType} maps {@linkplain org.joda.time.LocalTime}
+ * to {@linkplain java.sql.Time} on the JDBC level
  *
  * @author tiwe
  *
  */
-public class LocalTimeType extends AbstractDateTimeType<LocalTime> {
+public class LocalTimeType extends AbstractJodaTimeDateTimeType<LocalTime> {
 
     public LocalTimeType() {
         super(Types.TIME);

File: querydsl-mongodb/src/main/java/com/querydsl/mongodb/MongodbOps.java
Patch:
@@ -25,6 +25,7 @@ public enum MongodbOps implements Operator {
     NEAR(Boolean.class),
     GEO_WITHIN_BOX(Boolean.class),
     ELEM_MATCH(Boolean.class),
+    NO_MATCH(Boolean.class),
     NEAR_SPHERE(Boolean.class);
 
     private final Class<?> type;

File: querydsl-sql/src/main/java/com/querydsl/sql/types/AbstractJSR310DateTimeType.java
Patch:
@@ -5,14 +5,11 @@
 import java.util.Calendar;
 import java.util.TimeZone;
 
-import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
-
 /**
  * Common abstract superclass for Type implementations for Java Time API (JSR310)
  *
  * @param <T>
  */
-@IgnoreJRERequirement //conditionally included
 public abstract class AbstractJSR310DateTimeType<T extends Temporal> extends AbstractType<T> {
 
     private static final Calendar UTC = Calendar.getInstance(TimeZone.getTimeZone("UTC"));

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310InstantType.java
Patch:
@@ -7,14 +7,11 @@
 
 import javax.annotation.Nullable;
 
-import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
-
 /**
  * JSR310InstantType maps {@linkplain java.time.Instant} to
  * {@linkplain java.sql.Timestamp} on the JDBC level
  *
  */
-@IgnoreJRERequirement //conditionally included
 public class JSR310InstantType extends AbstractJSR310DateTimeType<Instant>  {
 
     public JSR310InstantType() {

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310LocalDateTimeType.java
Patch:
@@ -1,7 +1,5 @@
 package com.querydsl.sql.types;
 
-import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
-
 import javax.annotation.Nullable;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
@@ -16,7 +14,6 @@
  * to {@linkplain java.sql.Timestamp} on the JDBC level
  *
  */
-@IgnoreJRERequirement //conditionally included
 public class JSR310LocalDateTimeType extends AbstractJSR310DateTimeType<LocalDateTime> {
 
     public JSR310LocalDateTimeType() {

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310LocalDateType.java
Patch:
@@ -8,14 +8,11 @@
 
 import javax.annotation.Nullable;
 
-import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
-
 /**
  * JSR310LocalDateType maps {@linkplain java.time.LocalDate}
  * to {@linkplain java.sql.Date} on the JDBC level
  *
  */
-@IgnoreJRERequirement //conditionally included
 public class JSR310LocalDateType extends AbstractJSR310DateTimeType<LocalDate> {
 
     public JSR310LocalDateType() {

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310LocalTimeType.java
Patch:
@@ -6,14 +6,11 @@
 
 import javax.annotation.Nullable;
 
-import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
-
 /**
  * JSR310LocalTimeType maps {@linkplain java.time.LocalTime}
  * to {@linkplain java.sql.Time} on the JDBC level
  *
  */
-@IgnoreJRERequirement //conditionally included
 public class JSR310LocalTimeType extends AbstractJSR310DateTimeType<LocalTime> {
 
     public JSR310LocalTimeType() {

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310OffsetDateTimeType.java
Patch:
@@ -1,7 +1,5 @@
 package com.querydsl.sql.types;
 
-import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
-
 import javax.annotation.Nullable;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
@@ -16,7 +14,6 @@
  * to {@linkplain java.sql.Timestamp} on the JDBC level
  *
  */
-@IgnoreJRERequirement //conditionally included
 public class JSR310OffsetDateTimeType extends AbstractJSR310DateTimeType<OffsetDateTime> {
 
 

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310OffsetTimeType.java
Patch:
@@ -8,14 +8,11 @@
 
 import javax.annotation.Nullable;
 
-import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
-
 /**
  * JSR310OffsetTimeType maps {@linkplain java.time.OffsetTime}
  * to {@linkplain java.sql.Time} on the JDBC level
  *
  */
-@IgnoreJRERequirement //conditionally included
 public class JSR310OffsetTimeType extends AbstractJSR310DateTimeType<OffsetTime> {
 
     public JSR310OffsetTimeType() {

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310ZonedDateTimeType.java
Patch:
@@ -1,7 +1,5 @@
 package com.querydsl.sql.types;
 
-import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
-
 import javax.annotation.Nullable;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
@@ -16,7 +14,6 @@
  * to {@linkplain java.sql.Timestamp} on the JDBC level
  *
  */
-@IgnoreJRERequirement //conditionally included
 public class JSR310ZonedDateTimeType extends AbstractJSR310DateTimeType<ZonedDateTime> {
 
     public JSR310ZonedDateTimeType() {

File: querydsl-core/src/main/java/com/querydsl/core/alias/MethodType.java
Patch:
@@ -21,7 +21,7 @@
 
 import javax.annotation.Nullable;
 
-import com.querydsl.core.types.EntityPath;
+import com.querydsl.core.types.Path;
 
 /**
  * {@code MethodType} defines the supported method types used in the Alias functionality
@@ -33,7 +33,7 @@ public enum MethodType {
     /**
      * __mappedPath invocation
      */
-    GET_MAPPED_PATH("__mappedPath", EntityPath.class, ManagedObject.class),
+    GET_MAPPED_PATH("__mappedPath", Path.class, ManagedObject.class),
     /**
      * getter invocation
      */

File: querydsl-lucene3/src/main/java/com/querydsl/lucene3/AbstractLuceneQuery.java
Patch:
@@ -353,7 +353,7 @@ public Q where(Predicate... e) {
 
     @Override
     public String toString() {
-        return createQuery().toString().replaceAll(JAVA_ISO_CONTROL, "");
+        return createQuery().toString().replaceAll(JAVA_ISO_CONTROL, "_");
     }
 
     private int maxDoc() throws IOException {

File: querydsl-lucene4/src/main/java/com/querydsl/lucene4/AbstractLuceneQuery.java
Patch:
@@ -353,8 +353,7 @@ public Q where(Predicate... e) {
 
     @Override
     public String toString() {
-        String str = createQuery().toString();
-        return createQuery().toString().replaceAll(JAVA_ISO_CONTROL, "");
+        return createQuery().toString().replaceAll(JAVA_ISO_CONTROL, "_");
     }
 
     private int maxDoc() throws IOException {

File: querydsl-lucene5/src/main/java/com/querydsl/lucene5/AbstractLuceneQuery.java
Patch:
@@ -394,7 +394,7 @@ public Q where(Predicate... e) {
 
     @Override
     public String toString() {
-        return createQuery().toString().replaceAll(JAVA_ISO_CONTROL, "");
+        return createQuery().toString().replaceAll(JAVA_ISO_CONTROL, "_");
     }
 
     private int maxDoc() throws IOException {

File: querydsl-hibernate-search/src/test/java/com/querydsl/hibernate/search/AbstractQueryTest.java
Patch:
@@ -38,7 +38,7 @@ public abstract class AbstractQueryTest {
     @BeforeClass
     public static void setUpClass() throws IOException {
         FileUtils.delete(new File("target/derbydb"));
-        FileUtils.delete(new File("target/lucene"));
+        FileUtils.delete(new File("target/lucene3"));
         AnnotationConfiguration cfg = new AnnotationConfiguration();
         cfg.addAnnotatedClass(User.class);
         Properties props = new Properties();

File: querydsl-hibernate-search/src/test/java/com/querydsl/hibernate/search/AbstractQueryTest.java
Patch:
@@ -38,7 +38,7 @@ public abstract class AbstractQueryTest {
     @BeforeClass
     public static void setUpClass() throws IOException {
         FileUtils.delete(new File("target/derbydb"));
-        FileUtils.delete(new File("target/lucene3"));
+        FileUtils.delete(new File("target/lucene"));
         AnnotationConfiguration cfg = new AnnotationConfiguration();
         cfg.addAnnotatedClass(User.class);
         Properties props = new Properties();

File: querydsl-jpa/src/main/java/com/querydsl/jpa/HQLTemplates.java
Patch:
@@ -28,9 +28,7 @@
  * HQLTemplates extends {@link JPQLTemplates} with Hibernate specific extensions
  *
  * @author tiwe
- * @deprecated Most likely you want to use {@link Hibernate5Templates} instead
  */
-@Deprecated
 public class HQLTemplates extends JPQLTemplates {
 
     private static final QueryHandler QUERY_HANDLER;

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/SignatureTest.java
Patch:
@@ -17,10 +17,10 @@
 
 import java.io.Serializable;
 
+import com.querydsl.core.types.dsl.EntityPathBase;
 import org.junit.Test;
 
 import com.querydsl.core.annotations.QuerySupertype;
-import com.querydsl.core.types.dsl.ComparablePath;
 
 public class SignatureTest {
 
@@ -36,12 +36,12 @@ public abstract static class AValueObject extends APropertyChangeSupported imple
 
     @Test
     public void aPropertyChangeSupported() {
-        assertEquals(ComparablePath.class, QSignatureTest_APropertyChangeSupported.class.getSuperclass());
+        assertEquals(EntityPathBase.class, QSignatureTest_APropertyChangeSupported.class.getSuperclass());
     }
 
     @Test
     public void aValueObject() {
-        assertEquals(ComparablePath.class, QSignatureTest_AValueObject.class.getSuperclass());
+        assertEquals(EntityPathBase.class, QSignatureTest_AValueObject.class.getSuperclass());
     }
 
 }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/sql/AbstractJPASQLQuery.java
Patch:
@@ -158,7 +158,7 @@ private Query createQuery(boolean forCount) {
         JPAUtil.setConstants(query, serializer.getConstantToAllLabels(), queryMixin.getMetadata().getParams());
         this.projection = null; // necessary when query is reused
 
-        if (projection instanceof FactoryExpression) {
+        if (!forCount && projection instanceof FactoryExpression) {
             if (!queryHandler.transform(query, (FactoryExpression<?>) projection)) {
                 this.projection = (FactoryExpression<?>) projection;
             }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/EclipseLinkHandler.java
Patch:
@@ -58,7 +58,7 @@ public <T> CloseableIterator<T> iterate(Query query, FactoryExpression<?> projec
         boolean canUseCursor = false;
         try {
             canUseCursor = query.unwrap(Query.class) instanceof JpaQuery;
-        } catch (PersistenceException e) {} // can't unwrap, just ignore the exception
+        } catch (PersistenceException e) { } // can't unwrap, just ignore the exception
 
         Iterator<T> iterator = null;
         Closeable closeable = null;
@@ -74,7 +74,7 @@ public void close() throws IOException {
             };
             iterator = new Iterator<T>() {
                 private int rowsSinceLastClear = 0;
-                
+
                 @Override
                 public boolean hasNext() {
                     return cursor.hasNext();

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/MetaDataExporter.java
Patch:
@@ -277,6 +277,7 @@ private void handleColumn(EntityType classModel, String tableName, ResultSet col
         Number columnDigits = (Number) columns.getObject("DECIMAL_DIGITS");
         int columnIndex = columns.getInt("ORDINAL_POSITION");
         int nullable = columns.getInt("NULLABLE");
+        String columnDefaultValue = columns.getString("COLUMN_DEF");
 
         String propertyName = namingStrategy.getPropertyName(normalizedColumnName, classModel);
         Class<?> clazz = configuration.getJavaType(columnType,
@@ -311,7 +312,7 @@ private void handleColumn(EntityType classModel, String tableName, ResultSet col
             property.addAnnotation(new ColumnImpl(normalizedColumnName));
         }
         if (validationAnnotations) {
-            if (nullable == DatabaseMetaData.columnNoNulls) {
+            if (nullable == DatabaseMetaData.columnNoNulls && columnDefaultValue == null) {
                 property.addAnnotation(new NotNullImpl());
             }
             int size = columns.getInt("COLUMN_SIZE");

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/MetaDataExporter.java
Patch:
@@ -277,6 +277,7 @@ private void handleColumn(EntityType classModel, String tableName, ResultSet col
         Number columnDigits = (Number) columns.getObject("DECIMAL_DIGITS");
         int columnIndex = columns.getInt("ORDINAL_POSITION");
         int nullable = columns.getInt("NULLABLE");
+        String columnDefaultValue = columns.getString("COLUMN_DEF");
 
         String propertyName = namingStrategy.getPropertyName(normalizedColumnName, classModel);
         Class<?> clazz = configuration.getJavaType(columnType,
@@ -311,7 +312,7 @@ private void handleColumn(EntityType classModel, String tableName, ResultSet col
             property.addAnnotation(new ColumnImpl(normalizedColumnName));
         }
         if (validationAnnotations) {
-            if (nullable == DatabaseMetaData.columnNoNulls) {
+            if (nullable == DatabaseMetaData.columnNoNulls && columnDefaultValue == null) {
                 property.addAnnotation(new NotNullImpl());
             }
             int size = columns.getInt("COLUMN_SIZE");

File: querydsl-core/src/main/java/com/querydsl/core/types/NullExpression.java
Patch:
@@ -33,7 +33,7 @@ public final class NullExpression<T> extends TemplateExpressionImpl<T> {
      */
     public static final NullExpression<Object> DEFAULT = new NullExpression<Object>(Object.class);
 
-    private NullExpression(Class<? extends T> type) {
+    public NullExpression(Class<? extends T> type) {
         super(type, NULL_TEMPLATE, ImmutableList.of());
     }
 

File: querydsl-sql/src/main/java/com/querydsl/sql/mssql/AbstractSQLServerQuery.java
Patch:
@@ -50,7 +50,7 @@ public AbstractSQLServerQuery(Provider<Connection> connProvider, Configuration c
     public C tableHints(SQLServerTableHints... tableHints) {
         if (tableHints.length > 0) {
             String hints = SQLServerGrammar.tableHints(tableHints);
-            addJoinFlag(hints, JoinFlag.Position.END);
+            addJoinFlag(hints, JoinFlag.Position.BEFORE_CONDITION);
         }
         return (C) this;
     }

File: querydsl-sql/src/main/java/com/querydsl/sql/mssql/AbstractSQLServerQuery.java
Patch:
@@ -50,7 +50,7 @@ public AbstractSQLServerQuery(Provider<Connection> connProvider, Configuration c
     public C tableHints(SQLServerTableHints... tableHints) {
         if (tableHints.length > 0) {
             String hints = SQLServerGrammar.tableHints(tableHints);
-            addJoinFlag(hints, JoinFlag.Position.END);
+            addJoinFlag(hints, JoinFlag.Position.BEFORE_CONDITION);
         }
         return (C) this;
     }

File: querydsl-codegen/src/main/java/com/querydsl/codegen/EntityType.java
Patch:
@@ -34,7 +34,7 @@ public class EntityType extends TypeAdapter implements Comparable<EntityType> {
 
     private final Map<Class<?>,Annotation> annotations = new HashMap<Class<?>,Annotation>();
 
-    private final Set<Constructor> constructors = new HashSet<Constructor>();
+    private final Set<Constructor> constructors = new LinkedHashSet<Constructor>();
 
     private int escapeSuffix = 1;
 

File: querydsl-codegen/src/main/java/com/querydsl/codegen/ClassPathUtils.java
Patch:
@@ -21,6 +21,7 @@
 import org.reflections.scanners.SubTypesScanner;
 import org.reflections.util.ClasspathHelper;
 import org.reflections.util.ConfigurationBuilder;
+import org.reflections.util.FilterBuilder;
 
 /**
  * {@code ClassPathUtils} provides classpath scanning functionality
@@ -53,6 +54,7 @@ public static Set<Class<?>> scanPackage(ClassLoader classLoader, String pkg) thr
         Reflections reflections = new Reflections(new ConfigurationBuilder()
                 .addUrls(ClasspathHelper.forPackage(pkg, classLoader))
                 .addClassLoader(classLoader)
+                .filterInputsBy(new FilterBuilder().includePackage(pkg))
                 .setScanners(new SubTypesScanner(false)));
         Set<Class<?>> classes = new HashSet<Class<?>>();
         for (String typeNames : reflections.getStore().get(SubTypesScanner.class.getSimpleName()).values()) {

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/SignatureTest.java
Patch:
@@ -17,10 +17,10 @@
 
 import java.io.Serializable;
 
+import com.querydsl.core.types.dsl.EntityPathBase;
 import org.junit.Test;
 
 import com.querydsl.core.annotations.QuerySupertype;
-import com.querydsl.core.types.dsl.ComparablePath;
 
 public class SignatureTest {
 
@@ -36,12 +36,12 @@ public abstract static class AValueObject extends APropertyChangeSupported imple
 
     @Test
     public void aPropertyChangeSupported() {
-        assertEquals(ComparablePath.class, QSignatureTest_APropertyChangeSupported.class.getSuperclass());
+        assertEquals(EntityPathBase.class, QSignatureTest_APropertyChangeSupported.class.getSuperclass());
     }
 
     @Test
     public void aValueObject() {
-        assertEquals(ComparablePath.class, QSignatureTest_AValueObject.class.getSuperclass());
+        assertEquals(EntityPathBase.class, QSignatureTest_AValueObject.class.getSuperclass());
     }
 
 }

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/AbstractSQLInsertClause.java
Patch:
@@ -325,6 +325,7 @@ protected PreparedStatement prepareStatementAndSetParameters(SQLSerializer seria
                 for (int i = 0; i < target.length; i++) {
                     Path<?> path = entity.getPrimaryKey().getLocalColumns().get(i);
                     String column = ColumnMetadata.getName(path);
+                    column = configuration.getColumnOverride(entity.getSchemaAndTable(), column);
                     target[i] = column;
                 }
                 stmt = connection().prepareStatement(queryString, target);

File: querydsl-jdo/src/main/java/com/querydsl/jdo/AbstractJDOQuery.java
Patch:
@@ -137,7 +137,7 @@ private Query createQuery(boolean forCount) {
         JDOQLSerializer serializer = new JDOQLSerializer(getTemplates(), source);
         serializer.serialize(queryMixin.getMetadata(), forCount, false);
 
-        logQuery(serializer.toString(), serializer.getConstantToLabel());
+        logQuery(serializer.toString(), serializer.getConstantToAllLabels());
 
         // create Query
         Query query = persistenceManager.newQuery(serializer.toString());

File: querydsl-jdo/src/main/java/com/querydsl/jdo/dml/JDODeleteClause.java
Patch:
@@ -64,7 +64,7 @@ public long execute() {
             JDOQLSerializer serializer = new JDOQLSerializer(templates, entity);
             serializer.handle(metadata.getWhere());
             query.setFilter(serializer.toString());
-            Map<Object,String> constToLabel = serializer.getConstantToLabel();
+            Map<Object,String> constToLabel = serializer.getConstantToAllLabels();
 
             try {
                 if (!constToLabel.isEmpty()) {

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/AbstractHibernateQuery.java
Patch:
@@ -100,9 +100,10 @@ public Query createQuery() {
     private Query createQuery(@Nullable QueryModifiers modifiers, boolean forCount) {
         JPQLSerializer serializer = serialize(forCount);
         String queryString = serializer.toString();
-        logQuery(queryString, serializer.getConstantToLabel());
+        logQuery(queryString, serializer.getConstantToAllLabels());
         Query query = session.createQuery(queryString);
-        HibernateUtil.setConstants(query, serializer.getConstantToLabel(), getMetadata().getParams());
+        HibernateUtil.setConstants(query, serializer.getConstantToNamedLabel(), serializer.getConstantToNumberedLabel(),
+                getMetadata().getParams());
         if (fetchSize > 0) {
             query.setFetchSize(fetchSize);
         }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/HibernateDeleteClause.java
Patch:
@@ -70,13 +70,13 @@ public HibernateDeleteClause(SessionHolder session, EntityPath<?> entity, JPQLTe
     public long execute() {
         JPQLSerializer serializer = new JPQLSerializer(templates, null);
         serializer.serializeForDelete(queryMixin.getMetadata());
-        Map<Object,String> constants = serializer.getConstantToLabel();
 
         Query query = session.createQuery(serializer.toString());
         for (Map.Entry<Path<?>, LockMode> entry : lockModes.entrySet()) {
             query.setLockMode(entry.getKey().toString(), entry.getValue());
         }
-        HibernateUtil.setConstants(query, constants, queryMixin.getMetadata().getParams());
+        HibernateUtil.setConstants(query, serializer.getConstantToNamedLabel(), serializer.getConstantToNumberedLabel(),
+                queryMixin.getMetadata().getParams());
         return query.executeUpdate();
     }
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/HibernateUpdateClause.java
Patch:
@@ -78,13 +78,13 @@ public HibernateUpdateClause(SessionHolder session, EntityPath<?> entity,
     public long execute() {
         JPQLSerializer serializer = new JPQLSerializer(templates, null);
         serializer.serializeForUpdate(queryMixin.getMetadata(), updates);
-        Map<Object, String> constants = serializer.getConstantToLabel();
 
         Query query = session.createQuery(serializer.toString());
         for (Map.Entry<Path<?>, LockMode> entry : lockModes.entrySet()) {
             query.setLockMode(entry.getKey().toString(), entry.getValue());
         }
-        HibernateUtil.setConstants(query, constants, queryMixin.getMetadata().getParams());
+        HibernateUtil.setConstants(query, serializer.getConstantToNamedLabel(), serializer.getConstantToNumberedLabel(),
+                queryMixin.getMetadata().getParams());
         return query.executeUpdate();
     }
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/sql/AbstractHibernateSQLQuery.java
Patch:
@@ -85,10 +85,11 @@ public Query createQuery() {
     private Query createQuery(boolean forCount) {
         NativeSQLSerializer serializer = (NativeSQLSerializer) serialize(forCount);
         String queryString = serializer.toString();
-        logQuery(queryString, serializer.getConstantToLabel());
+        logQuery(queryString, serializer.getConstantToAllLabels());
         org.hibernate.SQLQuery query = session.createSQLQuery(queryString);
         // set constants
-        HibernateUtil.setConstants(query, serializer.getConstantToLabel(), queryMixin.getMetadata().getParams());
+        HibernateUtil.setConstants(query, serializer.getConstantToNamedLabel(), serializer.getConstantToNumberedLabel(),
+                queryMixin.getMetadata().getParams());
 
         if (!forCount) {
             ListMultimap<Expression<?>, String> aliases = serializer.getAliases();

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/AbstractJPAQuery.java
Patch:
@@ -97,9 +97,9 @@ public Query createQuery() {
     protected Query createQuery(@Nullable QueryModifiers modifiers, boolean forCount) {
         JPQLSerializer serializer = serialize(forCount);
         String queryString = serializer.toString();
-        logQuery(queryString, serializer.getConstantToLabel());
+        logQuery(queryString, serializer.getConstantToAllLabels());
         Query query = entityManager.createQuery(queryString);
-        JPAUtil.setConstants(query, serializer.getConstantToLabel(), getMetadata().getParams());
+        JPAUtil.setConstants(query, serializer.getConstantToAllLabels(), getMetadata().getParams());
         if (modifiers != null && modifiers.isRestricting()) {
             Integer limit = modifiers.getLimitAsInteger();
             Integer offset = modifiers.getOffsetAsInteger();

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/JPADeleteClause.java
Patch:
@@ -60,7 +60,7 @@ public JPADeleteClause(EntityManager entityManager, EntityPath<?> entity, JPQLTe
     public long execute() {
         JPQLSerializer serializer = new JPQLSerializer(templates, entityManager);
         serializer.serializeForDelete(queryMixin.getMetadata());
-        Map<Object,String> constants = serializer.getConstantToLabel();
+        Map<Object,String> constants = serializer.getConstantToAllLabels();
 
         Query query = entityManager.createQuery(serializer.toString());
         if (lockMode != null) {

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/JPAUpdateClause.java
Patch:
@@ -67,7 +67,7 @@ public JPAUpdateClause(EntityManager em, EntityPath<?> entity, JPQLTemplates tem
     public long execute() {
         JPQLSerializer serializer = new JPQLSerializer(templates, entityManager);
         serializer.serializeForUpdate(queryMixin.getMetadata(), updates);
-        Map<Object,String> constants = serializer.getConstantToLabel();
+        Map<Object,String> constants = serializer.getConstantToAllLabels();
 
         Query query = entityManager.createQuery(serializer.toString());
         if (lockMode != null) {

File: querydsl-jpa/src/main/java/com/querydsl/jpa/sql/AbstractJPASQLQuery.java
Patch:
@@ -97,7 +97,7 @@ public Query createQuery() {
     private Query createQuery(boolean forCount) {
         NativeSQLSerializer serializer = (NativeSQLSerializer) serialize(forCount);
         String queryString = serializer.toString();
-        logQuery(queryString, serializer.getConstantToLabel());
+        logQuery(queryString, serializer.getConstantToAllLabels());
         Expression<?> projection = queryMixin.getMetadata().getProjection();
         Query query;
 
@@ -155,7 +155,7 @@ private Query createQuery(boolean forCount) {
 
 
         // set constants
-        JPAUtil.setConstants(query, serializer.getConstantToLabel(), queryMixin.getMetadata().getParams());
+        JPAUtil.setConstants(query, serializer.getConstantToAllLabels(), queryMixin.getMetadata().getParams());
         this.projection = null; // necessary when query is reused
 
         if (projection instanceof FactoryExpression) {

File: querydsl-jpa/src/test/java/com/querydsl/jpa/IntegrationBase.java
Patch:
@@ -54,7 +54,8 @@ public void parse() throws RecognitionException, TokenStreamException {
                     JPQLSerializer serializer = new JPQLSerializer(HQLTemplates.DEFAULT);
                     serializer.serialize(getMetadata(), false, null);
                     Query query = session.createQuery(serializer.toString());
-                    HibernateUtil.setConstants(query, serializer.getConstantToLabel(), getMetadata().getParams());
+                    HibernateUtil.setConstants(query, serializer.getConstantToNamedLabel(),
+                            serializer.getConstantToNumberedLabel(), getMetadata().getParams());
                     query.list();
                 } catch (Exception e) {
                     e.printStackTrace();

File: querydsl-jpa/src/test/java/com/querydsl/jpa/JPAIntegrationBase.java
Patch:
@@ -51,7 +51,7 @@ public void parse() throws RecognitionException, TokenStreamException {
                 JPQLSerializer serializer = new JPQLSerializer(templates);
                 serializer.serialize(getMetadata(), false, null);
                 Query query = em.createQuery(serializer.toString());
-                JPAUtil.setConstants(query, serializer.getConstantToLabel(), getMetadata().getParams());
+                JPAUtil.setConstants(query, serializer.getConstantToAllLabels(), getMetadata().getParams());
                 try {
                     query.getResultList();
                 } catch (Exception e) {

File: querydsl-jpa/src/test/java/com/querydsl/jpa/JPQLSerializerTest.java
Patch:
@@ -139,7 +139,7 @@ public void normalizeNumericArgs() {
         serializer.handle(doublePath.add(1));
         serializer.handle(doublePath.between((float) 1.0, 1L));
         serializer.handle(doublePath.lt((byte) 1));
-        for (Object constant : serializer.getConstantToLabel().keySet()) {
+        for (Object constant : serializer.getConstantToAllLabels().keySet()) {
             assertEquals(Double.class, constant.getClass());
         }
     }
@@ -193,15 +193,15 @@ public void like() {
         JPQLSerializer serializer = new JPQLSerializer(HQLTemplates.DEFAULT);
         serializer.handle(Expressions.stringPath("str").contains("abc!"));
         assertEquals("str like ?1 escape '!'", serializer.toString());
-        assertEquals("%abc!!%", serializer.getConstantToLabel().keySet().iterator().next().toString());
+        assertEquals("%abc!!%", serializer.getConstantToAllLabels().keySet().iterator().next().toString());
     }
 
     @Test
     public void stringContainsIc() {
         JPQLSerializer serializer = new JPQLSerializer(HQLTemplates.DEFAULT);
         serializer.handle(Expressions.stringPath("str").containsIgnoreCase("ABc!"));
         assertEquals("lower(str) like ?1 escape '!'", serializer.toString());
-        assertEquals("%abc!!%", serializer.getConstantToLabel().keySet().iterator().next().toString());
+        assertEquals("%abc!!%", serializer.getConstantToAllLabels().keySet().iterator().next().toString());
     }
 
     @Test

File: querydsl-apt/src/main/java/com/querydsl/apt/AbstractQuerydslProcessor.java
Patch:
@@ -620,7 +620,7 @@ private void serialize(Serializer serializer, Collection<EntityType> models) {
     protected String getClassName(EntityType model) {
         Type type = conf.getTypeMappings().getPathType(model, model, true);
         String packageName = type.getPackageName();
-        return packageName.isEmpty() ? type.getSimpleName(): (packageName + "." + type.getSimpleName());
+        return packageName.isEmpty() ? type.getSimpleName() : (packageName + "." + type.getSimpleName());
     }
 
     protected abstract Configuration createConfiguration(RoundEnvironment roundEnv);

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/AbstractJPAQuery.java
Patch:
@@ -94,7 +94,7 @@ public Query createQuery() {
         return createQuery(getMetadata().getModifiers(), false);
     }
 
-    private Query createQuery(@Nullable QueryModifiers modifiers, boolean forCount) {
+    protected Query createQuery(@Nullable QueryModifiers modifiers, boolean forCount) {
         JPQLSerializer serializer = serialize(forCount);
         String queryString = serializer.toString();
         logQuery(queryString, serializer.getConstantToLabel());

File: querydsl-core/src/main/java/com/querydsl/core/types/NullExpression.java
Patch:
@@ -33,7 +33,7 @@ public final class NullExpression<T> extends TemplateExpressionImpl<T> {
      */
     public static final NullExpression<Object> DEFAULT = new NullExpression<Object>(Object.class);
 
-    private NullExpression(Class<? extends T> type) {
+    public NullExpression(Class<? extends T> type) {
         super(type, NULL_TEMPLATE, ImmutableList.of());
     }
 

File: querydsl-sql/src/main/java/com/querydsl/sql/mssql/AbstractSQLServerQuery.java
Patch:
@@ -46,7 +46,7 @@ public AbstractSQLServerQuery(Provider<Connection> connProvider, Configuration c
      * @param tableHints table hints
      * @return the current object
      */
-    @WithBridgeMethods(SQLServerQuery.class)
+    @WithBridgeMethods(value = SQLServerQuery.class, castRequired = true)
     public C tableHints(SQLServerTableHints... tableHints) {
         if (tableHints.length > 0) {
             String hints = SQLServerGrammar.tableHints(tableHints);

File: querydsl-collections/src/main/java/com/querydsl/collections/AbstractCollQuery.java
Patch:
@@ -196,7 +196,7 @@ public QueryResults<T> fetchResults() {
     }
 
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         queryMixin.setUnique(true);
         if (queryMixin.getMetadata().getModifiers().getLimit() == null) {
             limit(2L);

File: querydsl-core/src/main/java/com/querydsl/core/Fetchable.java
Patch:
@@ -46,7 +46,7 @@ public interface Fetchable<T> {
      * @throws NonUniqueResultException if there is more than one matching result
      * @return first result or null
      */
-    T fetchOne();
+    T fetchOne() throws NonUniqueResultException;
 
     /**
      * Get the projection as a typed closeable Iterator

File: querydsl-core/src/test/java/com/querydsl/core/support/DummyFetchable.java
Patch:
@@ -37,7 +37,7 @@ public T fetchFirst() {
 
     @Nullable
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         if (results.size() > 1) {
             throw new NonUniqueResultException();
         } else if (results.isEmpty()) {

File: querydsl-hibernate-search/src/main/java/com/querydsl/hibernate/search/AbstractSearchQuery.java
Patch:
@@ -152,11 +152,11 @@ public T fetchFirst() {
 
     @SuppressWarnings("unchecked")
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         try {
             return (T) createQuery(false).uniqueResult();
         } catch (org.hibernate.NonUniqueResultException e) {
-            throw new NonUniqueResultException();
+            throw new NonUniqueResultException(e);
         }
     }
 

File: querydsl-jdo/src/main/java/com/querydsl/jdo/AbstractJDOQuery.java
Patch:
@@ -307,7 +307,7 @@ public String toString() {
 
     @Nullable
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         if (getMetadata().getModifiers().getLimit() == null) {
             limit(2);
         }

File: querydsl-jdo/src/main/java/com/querydsl/jdo/sql/AbstractSQLQuery.java
Patch:
@@ -222,7 +222,7 @@ public String toString() {
     @SuppressWarnings("unchecked")
     @Override
     @Nullable
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         if (getMetadata().getModifiers().getLimit() == null) {
             limit(2);
         }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPASubQuery.java
Patch:
@@ -15,6 +15,7 @@
 
 import com.mysema.commons.lang.CloseableIterator;
 import com.querydsl.core.DefaultQueryMetadata;
+import com.querydsl.core.NonUniqueResultException;
 import com.querydsl.core.QueryMetadata;
 import com.querydsl.core.QueryResults;
 import com.querydsl.core.Tuple;
@@ -62,7 +63,7 @@ public JPASubQuery<Tuple> select(Expression<?>... exprs) {
     }
 
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         throw new UnsupportedOperationException();
     }
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/AbstractHibernateQuery.java
Patch:
@@ -322,14 +322,14 @@ public Q setTimeout(int timeout) {
 
     @SuppressWarnings("unchecked")
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         try {
             QueryModifiers modifiers = getMetadata().getModifiers();
             Query query = createQuery(modifiers, false);
             try {
                 return (T) query.uniqueResult();
             } catch (org.hibernate.NonUniqueResultException e) {
-                throw new NonUniqueResultException();
+                throw new NonUniqueResultException(e);
             }
         } finally {
             reset();

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/sql/AbstractHibernateSQLQuery.java
Patch:
@@ -211,7 +211,7 @@ protected void reset() {
 
     @SuppressWarnings("unchecked")
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         try {
             Query query = createQuery();
             return (T) uniqueResult(query);
@@ -225,7 +225,7 @@ private Object uniqueResult(Query query) {
         try {
             return query.uniqueResult();
         } catch (org.hibernate.NonUniqueResultException e) {
-            throw new NonUniqueResultException();
+            throw new NonUniqueResultException(e);
         }
     }
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/AbstractJPAQuery.java
Patch:
@@ -247,15 +247,15 @@ protected void reset() {
     @Nullable
     @SuppressWarnings("unchecked")
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         try {
             Query query = createQuery(getMetadata().getModifiers(), false);
             return (T) getSingleResult(query);
         } catch (javax.persistence.NoResultException e) {
             logger.trace(e.getMessage(),e);
             return null;
         } catch (javax.persistence.NonUniqueResultException e) {
-            throw new NonUniqueResultException();
+            throw new NonUniqueResultException(e);
         } finally {
             reset();
         }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/sql/AbstractJPASQLQuery.java
Patch:
@@ -292,7 +292,7 @@ protected void reset() {
 
     @Override
     @SuppressWarnings("unchecked")
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         Query query = createQuery();
         return (T) uniqueResult(query);
     }
@@ -305,7 +305,7 @@ private Object uniqueResult(Query query) {
             logger.trace(e.getMessage(),e);
             return null;
         } catch (javax.persistence.NonUniqueResultException e) {
-            throw new NonUniqueResultException();
+            throw new NonUniqueResultException(e);
         } finally {
             reset();
         }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/QueryHelper.java
Patch:
@@ -26,6 +26,7 @@
 
 import com.mysema.commons.lang.CloseableIterator;
 import com.querydsl.core.DefaultQueryMetadata;
+import com.querydsl.core.NonUniqueResultException;
 import com.querydsl.core.QueryMetadata;
 import com.querydsl.core.QueryResults;
 import com.querydsl.core.Tuple;
@@ -86,7 +87,7 @@ public void parse() throws RecognitionException, TokenStreamException {
     }
 
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         throw new UnsupportedOperationException();
     }
 

File: querydsl-lucene3/src/main/java/com/querydsl/lucene3/AbstractLuceneQuery.java
Patch:
@@ -330,7 +330,7 @@ public T fetchFirst() {
     }
 
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         return oneResult(true);
     }
 

File: querydsl-lucene4/src/main/java/com/querydsl/lucene4/AbstractLuceneQuery.java
Patch:
@@ -332,7 +332,7 @@ public T fetchFirst() {
     }
 
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         return oneResult(true);
     }
 

File: querydsl-lucene5/src/main/java/com/querydsl/lucene5/AbstractLuceneQuery.java
Patch:
@@ -372,7 +372,7 @@ public T fetchFirst() {
     }
 
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         return oneResult(true);
     }
 

File: querydsl-mongodb/src/main/java/com/querydsl/mongodb/AbstractMongodbQuery.java
Patch:
@@ -338,7 +338,7 @@ public K fetchOne(Path<?>... paths) {
     }
 
     @Override
-    public K fetchOne() {
+    public K fetchOne() throws NonUniqueResultException {
         try {
             Long limit = queryMixin.getMetadata().getModifiers().getLimit();
             if (limit == null) {

File: querydsl-sql/src/main/java/com/querydsl/sql/ProjectableSQLQuery.java
Patch:
@@ -25,6 +25,7 @@
 import com.mysema.commons.lang.CloseableIterator;
 import com.querydsl.core.FetchableQuery;
 import com.querydsl.core.JoinFlag;
+import com.querydsl.core.NonUniqueResultException;
 import com.querydsl.core.Query;
 import com.querydsl.core.QueryFlag;
 import com.querydsl.core.QueryFlag.Position;
@@ -391,7 +392,7 @@ public <RT> Q unionAll(Path<?> alias, SubQueryExpression<RT>... sq) {
     }
 
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         if (getMetadata().getModifiers().getLimit() == null
             && !queryMixin.getMetadata().getProjection().toString().contains("count(")) {
             limit(2);

File: querydsl-sql/src/main/java/com/querydsl/sql/UnionImpl.java
Patch:
@@ -18,6 +18,7 @@
 import javax.annotation.Nullable;
 
 import com.mysema.commons.lang.CloseableIterator;
+import com.querydsl.core.NonUniqueResultException;
 import com.querydsl.core.Query;
 import com.querydsl.core.QueryMetadata;
 import com.querydsl.core.QueryResults;
@@ -55,7 +56,7 @@ public T fetchFirst() {
     }
 
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         return query.fetchOne();
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/support/FetchableSubQueryBase.java
Patch:
@@ -76,7 +76,7 @@ public BooleanExpression ne(Expression<? extends T> expr) {
 
     @Override
     public BooleanExpression ne(T constant) {
-        return eq(Expressions.constant(constant));
+        return ne(Expressions.constant(constant));
     }
 
 

File: querydsl-core/src/main/java/com/querydsl/core/support/FetchableSubQueryBase.java
Patch:
@@ -76,7 +76,7 @@ public BooleanExpression ne(Expression<? extends T> expr) {
 
     @Override
     public BooleanExpression ne(T constant) {
-        return eq(Expressions.constant(constant));
+        return ne(Expressions.constant(constant));
     }
 
 

File: querydsl-sql/src/main/java/com/querydsl/sql/mysql/MySQLReplaceClause.java
Patch:
@@ -32,7 +32,7 @@
  */
 public class MySQLReplaceClause extends SQLInsertClause {
 
-    private static final String REPLACE_INTO = "replace into ";
+    protected static final String REPLACE_INTO = "replace into ";
 
     public MySQLReplaceClause(Connection connection, SQLTemplates templates, RelationalPath<?> entity) {
         super(connection, templates, entity);

File: querydsl-collections/src/main/java/com/querydsl/collections/AbstractCollQuery.java
Patch:
@@ -196,7 +196,7 @@ public QueryResults<T> fetchResults() {
     }
 
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         queryMixin.setUnique(true);
         if (queryMixin.getMetadata().getModifiers().getLimit() == null) {
             limit(2L);

File: querydsl-core/src/main/java/com/querydsl/core/Fetchable.java
Patch:
@@ -46,7 +46,7 @@ public interface Fetchable<T> {
      * @throws NonUniqueResultException if there is more than one matching result
      * @return first result or null
      */
-    T fetchOne();
+    T fetchOne() throws NonUniqueResultException;
 
     /**
      * Get the projection as a typed closeable Iterator

File: querydsl-core/src/test/java/com/querydsl/core/support/DummyFetchable.java
Patch:
@@ -37,7 +37,7 @@ public T fetchFirst() {
 
     @Nullable
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         if (results.size() > 1) {
             throw new NonUniqueResultException();
         } else if (results.isEmpty()) {

File: querydsl-hibernate-search/src/main/java/com/querydsl/hibernate/search/AbstractSearchQuery.java
Patch:
@@ -152,11 +152,11 @@ public T fetchFirst() {
 
     @SuppressWarnings("unchecked")
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         try {
             return (T) createQuery(false).uniqueResult();
         } catch (org.hibernate.NonUniqueResultException e) {
-            throw new NonUniqueResultException();
+            throw new NonUniqueResultException(e);
         }
     }
 

File: querydsl-jdo/src/main/java/com/querydsl/jdo/AbstractJDOQuery.java
Patch:
@@ -307,7 +307,7 @@ public String toString() {
 
     @Nullable
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         if (getMetadata().getModifiers().getLimit() == null) {
             limit(2);
         }

File: querydsl-jdo/src/main/java/com/querydsl/jdo/sql/AbstractSQLQuery.java
Patch:
@@ -222,7 +222,7 @@ public String toString() {
     @SuppressWarnings("unchecked")
     @Override
     @Nullable
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         if (getMetadata().getModifiers().getLimit() == null) {
             limit(2);
         }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPASubQuery.java
Patch:
@@ -15,6 +15,7 @@
 
 import com.mysema.commons.lang.CloseableIterator;
 import com.querydsl.core.DefaultQueryMetadata;
+import com.querydsl.core.NonUniqueResultException;
 import com.querydsl.core.QueryMetadata;
 import com.querydsl.core.QueryResults;
 import com.querydsl.core.Tuple;
@@ -62,7 +63,7 @@ public JPASubQuery<Tuple> select(Expression<?>... exprs) {
     }
 
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         throw new UnsupportedOperationException();
     }
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/AbstractHibernateQuery.java
Patch:
@@ -322,14 +322,14 @@ public Q setTimeout(int timeout) {
 
     @SuppressWarnings("unchecked")
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         try {
             QueryModifiers modifiers = getMetadata().getModifiers();
             Query query = createQuery(modifiers, false);
             try {
                 return (T) query.uniqueResult();
             } catch (org.hibernate.NonUniqueResultException e) {
-                throw new NonUniqueResultException();
+                throw new NonUniqueResultException(e);
             }
         } finally {
             reset();

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/sql/AbstractHibernateSQLQuery.java
Patch:
@@ -211,7 +211,7 @@ protected void reset() {
 
     @SuppressWarnings("unchecked")
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         try {
             Query query = createQuery();
             return (T) uniqueResult(query);
@@ -225,7 +225,7 @@ private Object uniqueResult(Query query) {
         try {
             return query.uniqueResult();
         } catch (org.hibernate.NonUniqueResultException e) {
-            throw new NonUniqueResultException();
+            throw new NonUniqueResultException(e);
         }
     }
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/AbstractJPAQuery.java
Patch:
@@ -247,15 +247,15 @@ protected void reset() {
     @Nullable
     @SuppressWarnings("unchecked")
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         try {
             Query query = createQuery(getMetadata().getModifiers(), false);
             return (T) getSingleResult(query);
         } catch (javax.persistence.NoResultException e) {
             logger.trace(e.getMessage(),e);
             return null;
         } catch (javax.persistence.NonUniqueResultException e) {
-            throw new NonUniqueResultException();
+            throw new NonUniqueResultException(e);
         } finally {
             reset();
         }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/sql/AbstractJPASQLQuery.java
Patch:
@@ -292,7 +292,7 @@ protected void reset() {
 
     @Override
     @SuppressWarnings("unchecked")
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         Query query = createQuery();
         return (T) uniqueResult(query);
     }
@@ -305,7 +305,7 @@ private Object uniqueResult(Query query) {
             logger.trace(e.getMessage(),e);
             return null;
         } catch (javax.persistence.NonUniqueResultException e) {
-            throw new NonUniqueResultException();
+            throw new NonUniqueResultException(e);
         } finally {
             reset();
         }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/QueryHelper.java
Patch:
@@ -26,6 +26,7 @@
 
 import com.mysema.commons.lang.CloseableIterator;
 import com.querydsl.core.DefaultQueryMetadata;
+import com.querydsl.core.NonUniqueResultException;
 import com.querydsl.core.QueryMetadata;
 import com.querydsl.core.QueryResults;
 import com.querydsl.core.Tuple;
@@ -86,7 +87,7 @@ public void parse() throws RecognitionException, TokenStreamException {
     }
 
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         throw new UnsupportedOperationException();
     }
 

File: querydsl-lucene3/src/main/java/com/querydsl/lucene3/AbstractLuceneQuery.java
Patch:
@@ -330,7 +330,7 @@ public T fetchFirst() {
     }
 
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         return oneResult(true);
     }
 

File: querydsl-lucene4/src/main/java/com/querydsl/lucene4/AbstractLuceneQuery.java
Patch:
@@ -332,7 +332,7 @@ public T fetchFirst() {
     }
 
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         return oneResult(true);
     }
 

File: querydsl-lucene5/src/main/java/com/querydsl/lucene5/AbstractLuceneQuery.java
Patch:
@@ -372,7 +372,7 @@ public T fetchFirst() {
     }
 
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         return oneResult(true);
     }
 

File: querydsl-mongodb/src/main/java/com/querydsl/mongodb/AbstractMongodbQuery.java
Patch:
@@ -338,7 +338,7 @@ public K fetchOne(Path<?>... paths) {
     }
 
     @Override
-    public K fetchOne() {
+    public K fetchOne() throws NonUniqueResultException {
         try {
             Long limit = queryMixin.getMetadata().getModifiers().getLimit();
             if (limit == null) {

File: querydsl-sql/src/main/java/com/querydsl/sql/ProjectableSQLQuery.java
Patch:
@@ -25,6 +25,7 @@
 import com.mysema.commons.lang.CloseableIterator;
 import com.querydsl.core.FetchableQuery;
 import com.querydsl.core.JoinFlag;
+import com.querydsl.core.NonUniqueResultException;
 import com.querydsl.core.Query;
 import com.querydsl.core.QueryFlag;
 import com.querydsl.core.QueryFlag.Position;
@@ -391,7 +392,7 @@ public <RT> Q unionAll(Path<?> alias, SubQueryExpression<RT>... sq) {
     }
 
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         if (getMetadata().getModifiers().getLimit() == null
             && !queryMixin.getMetadata().getProjection().toString().contains("count(")) {
             limit(2);

File: querydsl-sql/src/main/java/com/querydsl/sql/UnionImpl.java
Patch:
@@ -18,6 +18,7 @@
 import javax.annotation.Nullable;
 
 import com.mysema.commons.lang.CloseableIterator;
+import com.querydsl.core.NonUniqueResultException;
 import com.querydsl.core.Query;
 import com.querydsl.core.QueryMetadata;
 import com.querydsl.core.QueryResults;
@@ -55,7 +56,7 @@ public T fetchFirst() {
     }
 
     @Override
-    public T fetchOne() {
+    public T fetchOne() throws NonUniqueResultException {
         return query.fetchOne();
     }
 

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLServer2012Templates.java
Patch:
@@ -64,6 +64,7 @@ public SQLServer2012Templates(char escape, boolean quote) {
 
     protected SQLServer2012Templates(Set<String> keywords, char escape, boolean quote) {
         super(keywords, escape, quote);
+        add(SQLOps.NEXTVAL, "next value for {0s}");
     }
 
     @Override

File: querydsl-sql/src/test/java/com/querydsl/sql/SQLServer2012TemplatesTest.java
Patch:
@@ -106,7 +106,7 @@ public void modifiers() {
     @Test
     public void nextVal() {
         Operation<String> nextval = ExpressionUtils.operation(String.class, SQLOps.NEXTVAL, ConstantImpl.create("myseq"));
-        assertEquals("myseq.nextval", new SQLSerializer(new Configuration(new SQLServerTemplates())).handle(nextval).toString());
+        assertSerialized(nextval, "next value for myseq");
     }
 
 }

File: querydsl-sql/src/test/java/com/querydsl/sql/SQLServer2012TemplatesTest.java
Patch:
@@ -105,7 +105,7 @@ public void modifiers() {
 
     @Test
     public void nextVal() {
-        Operation<String> nextval = ExpressionUtils.operation(String.class, SQLOps.NEXTVAL, ConstantImpl.create("myseq"));       
+        Operation<String> nextval = ExpressionUtils.operation(String.class, SQLOps.NEXTVAL, ConstantImpl.create("myseq"));
         assertSerialized(nextval, "next value for myseq");
     }
 

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLServer2012Templates.java
Patch:
@@ -64,6 +64,7 @@ public SQLServer2012Templates(char escape, boolean quote) {
 
     protected SQLServer2012Templates(Set<String> keywords, char escape, boolean quote) {
         super(keywords, escape, quote);
+        add(SQLOps.NEXTVAL, "next value for {0s}");
     }
 
     @Override

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLServer2012Templates.java
Patch:
@@ -64,6 +64,7 @@ public SQLServer2012Templates(char escape, boolean quote) {
 
     protected SQLServer2012Templates(Set<String> keywords, char escape, boolean quote) {
         super(keywords, escape, quote);
+        add(SQLOps.NEXTVAL, "next value for {0s}");
     }
 
     @Override

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/SQLDeleteClause.java
Patch:
@@ -131,7 +131,7 @@ private PreparedStatement createStatement() throws SQLException {
         queryString = serializer.toString();
         constants = serializer.getConstants();
         logQuery(logger, queryString, constants);
-        context.addSQL(queryString);
+        context.addSQL(createBindings(metadata, serializer));
         listeners.rendered(context);
 
         listeners.prePrepare(context);
@@ -152,7 +152,7 @@ private Collection<PreparedStatement> createStatements() throws SQLException {
         queryString = serializer.toString();
         constants = serializer.getConstants();
         logQuery(logger, queryString, constants);
-        context.addSQL(queryString);
+        context.addSQL(createBindings(metadata, serializer));
         listeners.rendered(context);
 
         Map<String, PreparedStatement> stmts = Maps.newHashMap();
@@ -174,7 +174,7 @@ private Collection<PreparedStatement> createStatements() throws SQLException {
             listeners.preRender(context);
             serializer = createSerializer();
             serializer.serializeDelete(batches.get(i), entity);
-            context.addSQL(serializer.toString());
+            context.addSQL(createBindings(metadata, serializer));
             listeners.rendered(context);
 
             stmt = stmts.get(serializer.toString());

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/SQLInsertClause.java
Patch:
@@ -265,7 +265,7 @@ private PreparedStatement createStatement(boolean withKeys) throws SQLException
         } else {
             serializer.serializeInsert(metadata, entity, columns, values, subQuery);
         }
-        context.addSQL(serializer.toString());
+        context.addSQL(createBindings(metadata, serializer));
         listeners.rendered(context);
         return prepareStatementAndSetParameters(serializer, withKeys);
     }
@@ -290,7 +290,7 @@ private Collection<PreparedStatement> createStatements(boolean withKeys) throws
             stmt.addBatch();
         }
         stmts.put(serializer.toString(), stmt);
-        context.addSQL(serializer.toString());
+        context.addSQL(createBindings(metadata, serializer));
         listeners.rendered(context);
 
         // add other batches
@@ -301,7 +301,7 @@ private Collection<PreparedStatement> createStatements(boolean withKeys) throws
             serializer = createSerializer();
             serializer.serializeInsert(metadata, entity, batch.getColumns(),
                     batch.getValues(), batch.getSubQuery());
-            context.addSQL(serializer.toString());
+            context.addSQL(createBindings(metadata, serializer));
             listeners.rendered(context);
 
             stmt = stmts.get(serializer.toString());

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/SQLUpdateClause.java
Patch:
@@ -126,7 +126,7 @@ private PreparedStatement createStatement() throws SQLException {
         queryString = serializer.toString();
         constants = serializer.getConstants();
         logQuery(logger, queryString, constants);
-        context.addSQL(queryString);
+        context.addSQL(createBindings(metadata, serializer));
         listeners.prepared(context);
 
         listeners.prePrepare(context);
@@ -146,7 +146,7 @@ private Collection<PreparedStatement> createStatements() throws SQLException {
         queryString = serializer.toString();
         constants = serializer.getConstants();
         logQuery(logger, queryString, constants);
-        context.addSQL(queryString);
+        context.addSQL(createBindings(metadata, serializer));
         listeners.rendered(context);
 
         Map<String, PreparedStatement> stmts = Maps.newHashMap();
@@ -168,7 +168,7 @@ private Collection<PreparedStatement> createStatements() throws SQLException {
             listeners.preRender(context);
             serializer = createSerializer();
             serializer.serializeUpdate(batches.get(i).getMetadata(), entity, batches.get(i).getUpdates());
-            context.addSQL(serializer.toString());
+            context.addSQL(createBindings(metadata, serializer));
             listeners.rendered(context);
 
             stmt = stmts.get(serializer.toString());

File: querydsl-sql/src/main/java/com/querydsl/sql/CUBRIDTemplates.java
Patch:
@@ -53,7 +53,7 @@ public CUBRIDTemplates(boolean quote) {
     }
 
     public CUBRIDTemplates(char escape, boolean quote) {
-        super(Keywords.CUBRID, "\"", escape, quote);
+        super(Keywords.CUBRID, "\"", escape, quote, false);
         setDummyTable(null);
         addCustomType(NumericBooleanType.DEFAULT);
         setParameterMetadataAvailable(false);

File: querydsl-sql/src/main/java/com/querydsl/sql/DB2Templates.java
Patch:
@@ -61,7 +61,7 @@ public DB2Templates(boolean quote) {
     }
 
     public DB2Templates(char escape, boolean quote) {
-        super(Keywords.DB2, "\"", escape, quote);
+        super(Keywords.DB2, "\"", escape, quote, false);
         setDummyTable("sysibm.sysdummy1");
         setAutoIncrement(" generated always as identity");
         setFunctionJoinsWrapped(true);

File: querydsl-sql/src/main/java/com/querydsl/sql/DerbyTemplates.java
Patch:
@@ -54,7 +54,7 @@ public DerbyTemplates(boolean quote) {
     }
 
     public DerbyTemplates(char escape, boolean quote) {
-        super(Keywords.DERBY, "\"", escape, quote);
+        super(Keywords.DERBY, "\"", escape, quote, true);
         setDummyTable("sysibm.sysdummy1");
         setAutoIncrement(" generated always as identity");
         setFunctionJoinsWrapped(true);

File: querydsl-sql/src/main/java/com/querydsl/sql/FirebirdTemplates.java
Patch:
@@ -51,7 +51,7 @@ public FirebirdTemplates(boolean quote) {
     }
 
     public FirebirdTemplates(char escape, boolean quote) {
-        super(Keywords.FIREBIRD, "\"", escape, quote);
+        super(Keywords.FIREBIRD, "\"", escape, quote, false);
         setDummyTable("RDB$DATABASE");
         setUnionsWrapped(false);
         setWrapSelectParameters(true);

File: querydsl-sql/src/main/java/com/querydsl/sql/H2Templates.java
Patch:
@@ -46,7 +46,7 @@ public H2Templates(boolean quote) {
     }
 
     public H2Templates(char escape, boolean quote) {
-        super(Keywords.H2, "\"", escape, quote);
+        super(Keywords.H2, "\"", escape, quote, false);
         setNativeMerge(true);
         setMaxLimit(2 ^ 31);
         setLimitRequired(true);

File: querydsl-sql/src/main/java/com/querydsl/sql/HSQLDBTemplates.java
Patch:
@@ -46,7 +46,7 @@ public HSQLDBTemplates(boolean quote) {
     }
 
     public HSQLDBTemplates(char escape, boolean quote) {
-        super(Keywords.HSQLDB, "\"", escape, quote);
+        super(Keywords.HSQLDB, "\"", escape, quote, false);
         setLimitRequired(true);
         setAutoIncrement(" identity");
         setDefaultValues("\ndefault values");

File: querydsl-sql/src/main/java/com/querydsl/sql/MySQLTemplates.java
Patch:
@@ -56,7 +56,7 @@ public MySQLTemplates(boolean quote) {
     }
 
     public MySQLTemplates(char escape, boolean quote) {
-        super(Keywords.MYSQL, "`", escape, quote);
+        super(Keywords.MYSQL, "`", escape, quote, false);
         setArraysSupported(false);
         setParameterMetadataAvailable(false);
         setLimitRequired(true);

File: querydsl-sql/src/main/java/com/querydsl/sql/OracleTemplates.java
Patch:
@@ -72,7 +72,7 @@ public OracleTemplates(boolean quote) {
     }
 
     public OracleTemplates(char escape, boolean quote) {
-        super(Keywords.ORACLE, "\"", escape, quote);
+        super(Keywords.ORACLE, "\"", escape, quote, false);
         setParameterMetadataAvailable(false);
         setBatchCountViaGetUpdateCount(true);
         setWithRecursive("with ");

File: querydsl-sql/src/main/java/com/querydsl/sql/PostgreSQLTemplates.java
Patch:
@@ -48,7 +48,7 @@ public PostgreSQLTemplates(boolean quote) {
     }
 
     public PostgreSQLTemplates(char escape, boolean quote) {
-        super(Keywords.POSTGRESQL, "\"", escape, quote);
+        super(Keywords.POSTGRESQL, "\"", escape, quote, false);
         setDummyTable(null);
         setCountDistinctMultipleColumns(true);
         setCountViaAnalytics(true);

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLServerTemplates.java
Patch:
@@ -64,7 +64,7 @@ public SQLServerTemplates(char escape, boolean quote) {
     }
 
     protected SQLServerTemplates(Set<String> keywords, char escape, boolean quote) {
-        super(keywords, "\"", escape, quote);
+        super(keywords, "\"", escape, quote, false);
         setDummyTable("");
         setNullsFirst(null);
         setNullsLast(null);

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLTemplatesRegistry.java
Patch:
@@ -75,7 +75,7 @@ public SQLTemplates.Builder getBuilder(DatabaseMetaData md) throws SQLException
             return new SQLTemplates.Builder() {
                 @Override
                 protected SQLTemplates build(char escape, boolean quote) {
-                    return new SQLTemplates(Keywords.DEFAULT, "\"", escape, quote);
+                    return new SQLTemplates(Keywords.DEFAULT, "\"", escape, quote, false);
                 }
             };
         }

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLiteTemplates.java
Patch:
@@ -57,7 +57,7 @@ public SQLiteTemplates(boolean quote) {
     }
 
     public SQLiteTemplates(char escape, boolean quote) {
-        super(Keywords.SQLITE, "\"", escape, quote);
+        super(Keywords.SQLITE, "\"", escape, quote, false);
         setDummyTable(null);
         addCustomType(BigDecimalAsDoubleType.DEFAULT);
         addCustomType(BigIntegerAsLongType.DEFAULT);

File: querydsl-sql/src/main/java/com/querydsl/sql/Configuration.java
Patch:
@@ -362,7 +362,7 @@ public String registerTableOverride(String schema, String oldTable, String newTa
      * @param newSchema override schema
      * @param newTable override table
      * @return previous override value
-     * 
+     *
      * @deprecated Use {@link #setDynamicNameMapping(NameMapping)} instead.
      */
     @Deprecated
@@ -393,7 +393,7 @@ public SchemaAndTable registerTableOverride(SchemaAndTable from, SchemaAndTable
      * @param newColumn override
      * @return previous override
      *
-     * @deprecated Use {@link #setDynamicNameMapping(NameMapping)} instead. 
+     * @deprecated Use {@link #setDynamicNameMapping(NameMapping)} instead.
      */
     @Deprecated
     public String registerColumnOverride(String schema, String table, String oldColumn, String newColumn) {

File: querydsl-sql/src/test/java/com/querydsl/sql/ConfigurationTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.Locale;
 
 import org.easymock.EasyMock;
-import org.junit.Assert;
 import org.junit.Test;
 
 import com.querydsl.core.alias.Gender;

File: querydsl-sql/src/main/java/com/querydsl/sql/Configuration.java
Patch:
@@ -234,7 +234,7 @@ public void setDynamicNameMapping(NameMapping nameMapping) {
         if (nameMapping == null) {
             this.nameMapping = this.internalNameMapping;
         } else {
-            this.nameMapping = new ChainedNameMapping(this.nameMapping, nameMapping);
+            this.nameMapping = new ChainedNameMapping(this.internalNameMapping, nameMapping);
         }
     }
 

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLSerializer.java
Patch:
@@ -986,7 +986,9 @@ protected void visitOperation(Class<?> type, Operator operator, List<? extends E
                     } else {
                         result = ExpressionUtils.notInAny(path, partitioned);
                     }
+                    append("(");
                     result.accept(this, null);
+                    append(")");
                 }
             }
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/AbstractJPAQuery.java
Patch:
@@ -27,7 +27,7 @@
 import org.slf4j.LoggerFactory;
 import org.slf4j.MDC;
 
-import com.google.common.collect.HashMultimap;
+import com.google.common.collect.LinkedHashMultimap;
 import com.google.common.collect.Multimap;
 import com.mysema.commons.lang.CloseableIterator;
 import com.querydsl.core.*;
@@ -50,7 +50,7 @@ public abstract class AbstractJPAQuery<T, Q extends AbstractJPAQuery<T, Q>> exte
 
     private static final Logger logger = LoggerFactory.getLogger(JPAQuery.class);
 
-    protected final Multimap<String,Object> hints = HashMultimap.create();
+    protected final Multimap<String,Object> hints = LinkedHashMultimap.create();
 
     protected final EntityManager entityManager;
 

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLSerializer.java
Patch:
@@ -986,7 +986,9 @@ protected void visitOperation(Class<?> type, Operator operator, List<? extends E
                     } else {
                         result = ExpressionUtils.notInAny(path, partitioned);
                     }
+                    append("(");
                     result.accept(this, null);
+                    append(")");
                 }
             }
 

File: querydsl-core/src/main/java/com/querydsl/core/support/QueryMixin.java
Patch:
@@ -204,13 +204,14 @@ public final T getSelf() {
     }
 
     public final T groupBy(Expression<?> e) {
+        e = convert(e, Role.GROUP_BY);
         metadata.addGroupBy(e);
         return self;
     }
 
     public final T groupBy(Expression<?>... o) {
         for (Expression<?> e : o) {
-            metadata.addGroupBy(e);
+            groupBy(e);
         }
         return self;
     }

File: querydsl-collections/src/main/java/com/querydsl/collections/CollQueryFunctions.java
Patch:
@@ -195,7 +195,7 @@ public static int getYearWeek(Date date) {
     }
 
     public static <T> Collection<T> leftJoin(Collection<T> coll) {
-        if (coll.isEmpty()) {
+        if (coll == null || coll.isEmpty()) {
             @SuppressWarnings("unchecked") // List only contains null
             Collection<T> rv = (Collection<T>) nullList;
             return rv;

File: querydsl-core/src/main/java/com/querydsl/core/support/QueryMixin.java
Patch:
@@ -204,13 +204,14 @@ public final T getSelf() {
     }
 
     public final T groupBy(Expression<?> e) {
+        e = convert(e, Role.GROUP_BY);
         metadata.addGroupBy(e);
         return self;
     }
 
     public final T groupBy(Expression<?>... o) {
         for (Expression<?> e : o) {
-            metadata.addGroupBy(e);
+            groupBy(e);
         }
         return self;
     }

File: querydsl-collections/src/main/java/com/querydsl/collections/CollQueryFunctions.java
Patch:
@@ -195,7 +195,7 @@ public static int getYearWeek(Date date) {
     }
 
     public static <T> Collection<T> leftJoin(Collection<T> coll) {
-        if (coll.isEmpty()) {
+        if (coll == null || coll.isEmpty()) {
             @SuppressWarnings("unchecked") // List only contains null
             Collection<T> rv = (Collection<T>) nullList;
             return rv;

File: querydsl-core/src/main/java/com/querydsl/core/types/ExpressionUtils.java
Patch:
@@ -900,7 +900,7 @@ public static Expression<?> toExpression(Object o) {
     public static Expression<String> toLower(Expression<String> stringExpression) {
         if (stringExpression instanceof Constant) {
             Constant<String> constantExpression = (Constant<String>) stringExpression;
-            return ConstantImpl.create(constantExpression.getConstant().toLowerCase(Locale.ENGLISH));
+            return ConstantImpl.create(constantExpression.getConstant().toLowerCase());
         } else {
             return operation(String.class, Ops.LOWER, stringExpression);
         }

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLSerializer.java
Patch:
@@ -177,7 +177,7 @@ public final SQLSerializer handleSelect(final String sep, final List<? extends E
             for (Expression<?> expr : expressions) {
                 if (expr instanceof Path) {
                     String name = ColumnMetadata.getName((Path<?>) expr);
-                    if (!names.add(name.toLowerCase(Locale.ENGLISH))) {
+                    if (!names.add(name.toLowerCase())) {
                         expr = ExpressionUtils.as(expr, "col__" + name + replacements.size());
                     }
                 }

File: querydsl-core/src/main/java/com/querydsl/core/types/ExpressionUtils.java
Patch:
@@ -900,7 +900,7 @@ public static Expression<?> toExpression(Object o) {
     public static Expression<String> toLower(Expression<String> stringExpression) {
         if (stringExpression instanceof Constant) {
             Constant<String> constantExpression = (Constant<String>) stringExpression;
-            return ConstantImpl.create(constantExpression.getConstant().toLowerCase(Locale.ENGLISH));
+            return ConstantImpl.create(constantExpression.getConstant().toLowerCase());
         } else {
             return operation(String.class, Ops.LOWER, stringExpression);
         }

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLSerializer.java
Patch:
@@ -177,7 +177,7 @@ public final SQLSerializer handleSelect(final String sep, final List<? extends E
             for (Expression<?> expr : expressions) {
                 if (expr instanceof Path) {
                     String name = ColumnMetadata.getName((Path<?>) expr);
-                    if (!names.add(name.toLowerCase(Locale.ENGLISH))) {
+                    if (!names.add(name.toLowerCase())) {
                         expr = ExpressionUtils.as(expr, "col__" + name + replacements.size());
                     }
                 }

File: querydsl-core/src/main/java/com/querydsl/core/types/Ops.java
Patch:
@@ -34,6 +34,7 @@ public enum Ops implements Operator {
     STRING_CAST(String.class),
     ALIAS(Object.class),
     LIST(Object.class),
+    SET(Object.class),
     SINGLETON(Object.class),
     ORDINAL(Integer.class),
     WRAPPED(Object.class),

File: querydsl-core/src/main/java/com/querydsl/core/types/Templates.java
Patch:
@@ -70,6 +70,7 @@ public String escapeForLike(String str) {
         //CHECKSTYLE:OFF
 
         add(Ops.LIST, "{0}, {1}", Precedence.LIST);
+        add(Ops.SET, "{0}, {1}", Precedence.LIST);
         add(Ops.SINGLETON, "{0}", Precedence.LIST);
         add(Ops.WRAPPED, "({0})");
         add(Ops.ORDER, "order()");

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/SimpleExpression.java
Patch:
@@ -236,7 +236,7 @@ public BooleanExpression in(SubQueryExpression<? extends T> right) {
      * @return this in right
      */
     public BooleanExpression in(Expression<? extends T>... right) {
-        return Expressions.booleanOperation(Ops.IN, mixin, Expressions.list(right));
+        return Expressions.booleanOperation(Ops.IN, mixin, Expressions.set(right));
     }
 
     /**

File: querydsl-core/src/test/java/com/querydsl/core/CoverageTest.java
Patch:
@@ -115,6 +115,7 @@ public void test() throws IllegalArgumentException, IllegalAccessException {
             Ops.CASE_EQ_ELSE,
 
             Ops.LIST,
+            Ops.SET,
             Ops.SINGLETON,
             Ops.COALESCE,
             Ops.ORDINAL, // TODO: add support

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLSerializer.java
Patch:
@@ -912,7 +912,7 @@ protected void visitOperation(Class<?> type, Operator operator, List<? extends E
             }
         }
 
-        if (operator == Ops.LIST && args.get(0) instanceof SubQueryExpression) {
+        if (operator == Ops.SET && args.get(0) instanceof SubQueryExpression) {
             boolean oldUnion = inUnion;
             inUnion = true;
             super.visitOperation(type, SQLOps.UNION, args);

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLServerTemplates.java
Patch:
@@ -79,7 +79,7 @@ protected SQLServerTemplates(Set<String> keywords, char escape, boolean quote) {
         setPrecedence(Precedence.COMPARISON, Ops.EQ, Ops.EQ_IGNORE_CASE, Ops.NE);
         setPrecedence(Precedence.OR, Ops.BETWEEN, Ops.IN, Ops.NOT_IN, Ops.LIKE, Ops.LIKE_ESCAPE);
         setPrecedence(Precedence.OR, OTHER_LIKE_CASES);
-        setPrecedence(Precedence.OR + 1, Ops.LIST, Ops.SINGLETON);
+        setPrecedence(Precedence.OR + 1, Ops.LIST, Ops.SET, Ops.SINGLETON);
 
         add(SQLOps.WITH_REPEATABLE_READ, "\nwith (repeatableread)");
 

File: querydsl-codegen/src/main/java/com/querydsl/codegen/EntitySerializer.java
Patch:
@@ -108,14 +108,14 @@ protected void constructors(EntityType model, SerializerConfig config,
             }
             constructorContent(writer, model);
         } else {
-            writer.line("this(", classCast, "path.getType(), path.getMetadata(), path.getMetadata().isRoot() ? INITS : PathInits.DEFAULT);");
+            writer.line("this(", classCast, "path.getType(), path.getMetadata(), PathInits.getFor(path.getMetadata(), INITS));");
         }
         writer.end();
 
         // PathMetadata
         if (hasEntityFields) {
             writer.beginConstructor(PATH_METADATA);
-            writer.line("this(metadata, metadata.isRoot() ? INITS : PathInits.DEFAULT);");
+            writer.line("this(metadata, PathInits.getFor(metadata, INITS));");
             writer.end();
         } else {
             if (!localName.equals(genericName)) {

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Domain.java
Patch:
@@ -55,6 +55,7 @@ private Domain() { }
             Family.class,
             Foo.class,
             Formula.class,
+            Group.class,
             Human.class,
             InheritedProperties.class,
             Item.class,

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPAQueryMixin.java
Patch:
@@ -159,6 +159,9 @@ private <T> Path<T> convertPathForOrder(Path<T> path) {
             Set<Expression<?>> exprs = Sets.newHashSet();
             QueryMetadata md = getMetadata();
             exprs.addAll(md.getGroupBy());
+            if (md.getProjection() != null) {
+                exprs.add(md.getProjection());
+            }
             if (md.getWhere() != null) {
                 exprs.add(md.getWhere());
             }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPAQueryMixin.java
Patch:
@@ -159,6 +159,9 @@ private <T> Path<T> convertPathForOrder(Path<T> path) {
             Set<Expression<?>> exprs = Sets.newHashSet();
             QueryMetadata md = getMetadata();
             exprs.addAll(md.getGroupBy());
+            if (md.getProjection() != null) {
+                exprs.add(md.getProjection());
+            }
             if (md.getWhere() != null) {
                 exprs.add(md.getWhere());
             }

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLServerTemplates.java
Patch:
@@ -78,8 +78,8 @@ protected SQLServerTemplates(Set<String> keywords, char escape, boolean quote) {
         setPrecedence(Precedence.ARITH_LOW, Ops.NEGATE);
         setPrecedence(Precedence.COMPARISON, Ops.EQ, Ops.EQ_IGNORE_CASE, Ops.NE);
         setPrecedence(Precedence.OR, Ops.BETWEEN, Ops.IN, Ops.NOT_IN, Ops.LIKE, Ops.LIKE_ESCAPE);
-
         setPrecedence(Precedence.OR, OTHER_LIKE_CASES);
+        setPrecedence(Precedence.OR + 1, Ops.LIST, Ops.SINGLETON);
 
         add(SQLOps.WITH_REPEATABLE_READ, "\nwith (repeatableread)");
 

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLServerTemplates.java
Patch:
@@ -78,8 +78,8 @@ protected SQLServerTemplates(Set<String> keywords, char escape, boolean quote) {
         setPrecedence(Precedence.ARITH_LOW, Ops.NEGATE);
         setPrecedence(Precedence.COMPARISON, Ops.EQ, Ops.EQ_IGNORE_CASE, Ops.NE);
         setPrecedence(Precedence.OR, Ops.BETWEEN, Ops.IN, Ops.NOT_IN, Ops.LIKE, Ops.LIKE_ESCAPE);
-
         setPrecedence(Precedence.OR, OTHER_LIKE_CASES);
+        setPrecedence(Precedence.OR + 1, Ops.LIST, Ops.SINGLETON);
 
         add(SQLOps.WITH_REPEATABLE_READ, "\nwith (repeatableread)");
 

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLTemplatesRegistry.java
Patch:
@@ -81,7 +81,7 @@ public SQLTemplates getTemplates(DatabaseMetaData md) throws SQLException {
         }
 
         // sqlserver
-        if (name.equals("microsft sql server")) {
+        if (name.equals("microsoft sql server")) {
             switch (md.getDatabaseMajorVersion()) {
                 case 12:
                 case 11: return sqlserver2012;

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLTemplatesRegistry.java
Patch:
@@ -81,7 +81,7 @@ public SQLTemplates getTemplates(DatabaseMetaData md) throws SQLException {
         }
 
         // sqlserver
-        if (name.equals("microsft sql server")) {
+        if (name.equals("microsoft sql server")) {
             switch (md.getDatabaseMajorVersion()) {
                 case 12:
                 case 11: return sqlserver2012;

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/SQLMergeClause.java
Patch:
@@ -563,7 +563,7 @@ public SQLMergeClause values(Object... v) {
 
     @Override
     public boolean isEmpty() {
-        return values.isEmpty();
+        return values.isEmpty() && batches.isEmpty();
     }
 
     @Override

File: querydsl-sql/src/test/java/com/querydsl/sql/MergeBase.java
Patch:
@@ -156,6 +156,7 @@ public void mergeBatch() {
             .set(survey.name, "5")
             .addBatch();
         assertEquals(1, merge.getBatchCount());
+        assertFalse(merge.isEmpty());
 
         merge
             .keys(survey.id)

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/SQLMergeClause.java
Patch:
@@ -563,7 +563,7 @@ public SQLMergeClause values(Object... v) {
 
     @Override
     public boolean isEmpty() {
-        return values.isEmpty();
+        return values.isEmpty() && batches.isEmpty();
     }
 
     @Override

File: querydsl-sql/src/test/java/com/querydsl/sql/MergeBase.java
Patch:
@@ -156,6 +156,7 @@ public void mergeBatch() {
             .set(survey.name, "5")
             .addBatch();
         assertEquals(1, merge.getBatchCount());
+        assertFalse(merge.isEmpty());
 
         merge
             .keys(survey.id)

File: querydsl-apt/src/main/java/com/querydsl/apt/VisitorConfig.java
Patch:
@@ -51,9 +51,9 @@ public static VisitorConfig get(boolean fields, boolean methods) {
     public static VisitorConfig get(boolean fields, boolean methods, VisitorConfig defaultConfig) {
         if (fields && methods) {
             return VisitorConfig.ALL;
-        } else if (fields && !methods) {
+        } else if (fields) {
             return VisitorConfig.FIELDS_ONLY;
-        } else if (methods && !fields) {
+        } else if (methods) {
             return VisitorConfig.METHODS_ONLY;
         } else {
             return defaultConfig;

File: querydsl-sql/src/main/java/com/querydsl/sql/teradata/SetQueryBandClause.java
Patch:
@@ -124,7 +124,7 @@ public String toString() {
                         + (forSession ? "' for session" : "' for transaction");
                 parameter = null;
             } else {
-                queryString = "set query_band=?" + (forSession ? " for session" : " for transaction");
+                queryString = "set query_band=? for transaction";
                 parameter = builder.toString();
             }
 

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/MetaDataExporterAllTest.java
Patch:
@@ -77,7 +77,7 @@ public static List<Object[]> parameters() {
                                             for (boolean exportColumns : booleans) {
                                                 for (boolean schemaToPackage : booleans) {
                                                     if (withBeans) {
-                                                        if (!beanPrefix.isEmpty() | !beanSuffix.isEmpty() |
+                                                        if (!beanPrefix.isEmpty() || !beanSuffix.isEmpty() ||
                                                             beanPackageName != null) {
                                                             continue;
                                                         }

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/MetaDataExporterAllTest.java
Patch:
@@ -77,7 +77,7 @@ public static List<Object[]> parameters() {
                                             for (boolean exportColumns : booleans) {
                                                 for (boolean schemaToPackage : booleans) {
                                                     if (withBeans) {
-                                                        if (!beanPrefix.isEmpty() | !beanSuffix.isEmpty() |
+                                                        if (!beanPrefix.isEmpty() || !beanSuffix.isEmpty() ||
                                                             beanPackageName != null) {
                                                             continue;
                                                         }

File: querydsl-apt/src/main/java/com/querydsl/apt/VisitorConfig.java
Patch:
@@ -51,9 +51,9 @@ public static VisitorConfig get(boolean fields, boolean methods) {
     public static VisitorConfig get(boolean fields, boolean methods, VisitorConfig defaultConfig) {
         if (fields && methods) {
             return VisitorConfig.ALL;
-        } else if (fields && !methods) {
+        } else if (fields) {
             return VisitorConfig.FIELDS_ONLY;
-        } else if (methods && !fields) {
+        } else if (methods) {
             return VisitorConfig.METHODS_ONLY;
         } else {
             return defaultConfig;

File: querydsl-sql/src/main/java/com/querydsl/sql/teradata/SetQueryBandClause.java
Patch:
@@ -124,7 +124,7 @@ public String toString() {
                         + (forSession ? "' for session" : "' for transaction");
                 parameter = null;
             } else {
-                queryString = "set query_band=?" + (forSession ? " for session" : " for transaction");
+                queryString = "set query_band=? for transaction";
                 parameter = builder.toString();
             }
 

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/SQLInsertClause.java
Patch:
@@ -356,15 +356,16 @@ public void close() throws SQLException {
                         super.close();
                     } finally {
                         stmt2.close();
+                        reset();
+                        endContext(context);
                     }
                 }
             };
         } catch (SQLException e) {
             onException(context, e);
-            throw configuration.translate(queryString, constants, e);
-        } finally {
             reset();
             endContext(context);
+            throw configuration.translate(queryString, constants, e);
         }
     }
 

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/SQLInsertClause.java
Patch:
@@ -356,15 +356,16 @@ public void close() throws SQLException {
                         super.close();
                     } finally {
                         stmt2.close();
+                        reset();
+                        endContext(context);
                     }
                 }
             };
         } catch (SQLException e) {
             onException(context, e);
-            throw configuration.translate(queryString, constants, e);
-        } finally {
             reset();
             endContext(context);
+            throw configuration.translate(queryString, constants, e);
         }
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/types/JavaTemplates.java
Patch:
@@ -101,8 +101,6 @@ public JavaTemplates() {
         for (Operator op : Ops.MathOps.values()) {
             add(op, "Math." + getTemplate(op));
         }
-        add(Ops.MOD, "{0} % {0}");
-
     }
 
 }

File: querydsl-core/src/main/java/com/querydsl/core/types/JavaTemplates.java
Patch:
@@ -101,8 +101,6 @@ public JavaTemplates() {
         for (Operator op : Ops.MathOps.values()) {
             add(op, "Math." + getTemplate(op));
         }
-        add(Ops.MOD, "{0} % {0}");
-
     }
 
 }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Show.java
Patch:
@@ -31,6 +31,9 @@ public class Show {
     @MapKeyColumn(name = "acts_key")
     public Map<String, String> acts;
 
+    @ManyToOne
+    public Show parent;
+
     public Show() { }
 
     public Show(int id) {

File: querydsl-jdo/src/main/java/com/querydsl/jdo/AbstractJDOQuery.java
Patch:
@@ -177,7 +177,7 @@ protected void cleanupMDC() {
     @SuppressWarnings("unchecked")
     private <T> T detach(T results) {
         if (results instanceof Collection) {
-            return (T) persistenceManager.detachCopyAll(results);
+            return (T) persistenceManager.detachCopyAll((Collection<?>) results);
         } else {
             return persistenceManager.detachCopy(results);
         }

File: querydsl-jdo/src/main/java/com/querydsl/jdo/AbstractJDOQuery.java
Patch:
@@ -177,7 +177,7 @@ protected void cleanupMDC() {
     @SuppressWarnings("unchecked")
     private <T> T detach(T results) {
         if (results instanceof Collection) {
-            return (T) persistenceManager.detachCopyAll(results);
+            return (T) persistenceManager.detachCopyAll((Collection<?>) results);
         } else {
             return persistenceManager.detachCopy(results);
         }

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLServer2005Templates.java
Patch:
@@ -86,8 +86,8 @@ public void serialize(QueryMetadata metadata, boolean forCountRow, SQLSerializer
                 for (OrderSpecifier<?> os : metadata.getOrderBy()) {
                     rn.orderBy(os);
                 }
-                Expression<?> pr = Projections.appending(metadata.getProjection(), rn.as("rn"));
-                metadata.setProjection(pr);
+                FactoryExpression<?> pr = Projections.appending(metadata.getProjection(), rn.as("rn"));
+                metadata.setProjection(FactoryExpressionUtils.wrap(pr));
                 metadata.clearOrderBy();
                 context.serializeForQuery(metadata, forCountRow);
                 context.append(outerQueryEnd);

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPACollectionAnyVisitor.java
Patch:
@@ -42,7 +42,7 @@ protected Predicate exists(Context c, Predicate condition) {
             Path<?> child = c.paths.get(i).getMetadata().getParent();
             EntityPath<Object> replacement = (EntityPath<Object>) c.replacements.get(i);
             if (c.paths.get(i).getType().isAnnotationPresent(Entity.class)) {
-                query.from(Expressions.as(
+                query.addJoin(i == 0 ? JoinType.DEFAULT : JoinType.INNERJOIN, Expressions.as(
                         Expressions.listPath((Class) c.paths.get(i).getType(), SimplePath.class,
                                 child.getMetadata()), replacement));
             } else {

File: querydsl-apt/src/main/java/com/querydsl/apt/SpatialSupport.java
Patch:
@@ -63,8 +63,8 @@ private static void registerJTSTypes(TypeMappings typeMappings) {
         }
     }
 
-    @SuppressWarnings("unchecked")
     private static void addImports(AbstractModule module, String packageName) {
+        @SuppressWarnings("unchecked")
         Set<String> imports = module.get(Set.class, CodegenModule.IMPORTS);
         if (imports.isEmpty()) {
             imports = ImmutableSet.of(packageName);

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/AbstractClasses2Test.java
Patch:
@@ -26,7 +26,7 @@
 
 import com.querydsl.core.types.dsl.NumberPath;
 
-@SuppressWarnings("serial")
+@SuppressWarnings({"rawtypes", "serial", "unchecked"})
 public class AbstractClasses2Test {
 
     public interface Archetype<PK extends Serializable, DO extends Serializable> extends Serializable, Comparable<DO>  {

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/AbstractClassesTest.java
Patch:
@@ -27,7 +27,7 @@
 
 import com.querydsl.core.types.dsl.NumberPath;
 
-@SuppressWarnings("serial")
+@SuppressWarnings({"rawtypes", "serial", "unchecked"})
 public class AbstractClassesTest {
 
     public interface Archetype<PK extends Serializable, DO extends Serializable> extends Serializable, Comparable<DO>  {

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/EntityTest.java
Patch:
@@ -97,7 +97,7 @@ public void SupertypePaths() {
 
     @Test
     public void Constructors() throws SecurityException, NoSuchMethodException {
-        Class[] types = new Class[]{Class.class, PathMetadata.class, PathInits.class};
+        Class<?>[] types = new Class<?>[]{Class.class, PathMetadata.class, PathInits.class};
         QEntityTest_Entity1.class.getConstructor(types);
         QEntityTest_Entity2.class.getConstructor(types);
         QEntityTest_Entity3.class.getConstructor(types);
@@ -108,7 +108,7 @@ public void Constructors() throws SecurityException, NoSuchMethodException {
 
     @Test(expected = NoSuchMethodException.class)
     public void Constructors2() throws SecurityException, NoSuchMethodException {
-        Class[] types = new Class[]{Class.class, PathMetadata.class, PathInits.class};
+        Class<?>[] types = new Class<?>[]{Class.class, PathMetadata.class, PathInits.class};
         QEntityTest_EntityNoReferences.class.getConstructor(types);
     }
 

File: querydsl-codegen/src/main/java/com/querydsl/codegen/ProjectionSerializer.java
Patch:
@@ -115,7 +115,7 @@ public Parameter apply(Parameter p) {
             // body
             writer.beginLine("super(" + writer.getClassConstant(localName));
             // TODO: Fix for Scala (Array[Class])
-            writer.append(", new Class[]{");
+            writer.append(", new Class<?>[]{");
             boolean first = true;
 
             for (Parameter p : c.getParameters()) {

File: querydsl-codegen/src/test/java/com/querydsl/codegen/TypeFactoryTest.java
Patch:
@@ -206,10 +206,9 @@ public void Boolean() {
         assertEquals("java.lang", bo.getPackageName());
     }
 
-    @SuppressWarnings("unchecked")
     @Test
     public void SimpleType() {
-        for (Class<?> cl : Arrays.asList(Blob.class, Clob.class, Locale.class, Class.class, Serializable.class)) {
+        for (Class<?> cl : Arrays.<Class<?>>asList(Blob.class, Clob.class, Locale.class, Class.class, Serializable.class)) {
             assertEquals("wrong type for " + cl.getName(), TypeCategory.SIMPLE, factory.get(cl).getCategory());
         }
     }

File: querydsl-core/src/main/java/com/querydsl/core/alias/AliasFactory.java
Patch:
@@ -128,10 +128,10 @@ protected <A> A createProxy(Class<A> cl, Expression<?> path) {
         Enhancer enhancer = new Enhancer();
         enhancer.setClassLoader(AliasFactory.class.getClassLoader());
         if (cl.isInterface()) {
-            enhancer.setInterfaces(new Class[] {cl, ManagedObject.class});
+            enhancer.setInterfaces(new Class<?>[] {cl, ManagedObject.class});
         } else {
             enhancer.setSuperclass(cl);
-            enhancer.setInterfaces(new Class[] {ManagedObject.class});
+            enhancer.setInterfaces(new Class<?>[] {ManagedObject.class});
         }
         // creates one handler per proxy
         MethodInterceptor handler = new PropertyAccessInvocationHandler(path, this, pathFactory, typeSystem);

File: querydsl-core/src/main/java/com/querydsl/core/group/GroupByMap.java
Patch:
@@ -38,7 +38,6 @@ public class GroupByMap<K,V> extends AbstractGroupByTransformer<K, Map<K,V>> {
         super(key, expressions);
     }
 
-    @SuppressWarnings("unchecked")
     @Override
     public Map<K, V> transform(FetchableQuery<?,?> query) {
         Map<K, Group> groups = new LinkedHashMap<K, Group>();
@@ -55,8 +54,9 @@ public Map<K, V> transform(FetchableQuery<?,?> query) {
         CloseableIterator<Tuple> iter = query.select(expr).iterate();
         try {
             while (iter.hasNext()) {
-                Object[] row = iter.next().toArray();
-                K groupId = (K) row[0];
+                @SuppressWarnings("unchecked") //This type is mandated by the key type
+                K[] row = (K[]) iter.next().toArray();
+                K groupId = row[0];
                 GroupImpl group = (GroupImpl) groups.get(groupId);
                 if (group == null) {
                     group = new GroupImpl(groupExpressions, maps);

File: querydsl-core/src/main/java/com/querydsl/core/group/QPair.java
Patch:
@@ -34,7 +34,7 @@ public static <K, V> QPair<K, V> create(Expression<K> key, Expression<V> value)
 
     @SuppressWarnings({"unchecked" })
     public QPair(Expression<K> key, Expression<V> value) {
-        super((Class) Pair.class, new Class[]{Object.class, Object.class}, key, value);
+        super((Class) Pair.class, new Class<?>[]{Object.class, Object.class}, key, value);
     }
 
     public boolean equals(Expression<?> keyExpr, Expression<?> valueExpr) {

File: querydsl-core/src/main/java/com/querydsl/core/support/NumberConversion.java
Patch:
@@ -50,7 +50,6 @@ public List<Expression<?>> getArgs() {
         return exprs;
     }
 
-    @SuppressWarnings("unchecked")
     @Override
     public T newInstance(Object... args) {
         if (args[0] != null) {

File: querydsl-core/src/main/java/com/querydsl/core/types/FactoryExpressionUtils.java
Patch:
@@ -81,15 +81,14 @@ public boolean equals(Object o) {
 
     }
 
-    @SuppressWarnings("unchecked")
     public static FactoryExpression<?> wrap(List<? extends Expression<?>> projection) {
         boolean usesFactoryExpressions = false;
         for (Expression<?> e : projection) {
             usesFactoryExpressions |= e instanceof FactoryExpression;
         }
         if (usesFactoryExpressions) {
-            return wrap(new ArrayConstructorExpression(
-                    projection.toArray(new Expression[projection.size()])));
+            return wrap(new ArrayConstructorExpression<Object>(
+                    projection.toArray(new Expression<?>[projection.size()])));
         } else {
             return null;
         }

File: querydsl-core/src/test/java/com/querydsl/core/types/ConstructorExpressionTest.java
Patch:
@@ -34,7 +34,7 @@ public void Constructor() {
         Expression<Long> longVal = ConstantImpl.create(1L);
         Expression<String> stringVal = ConstantImpl.create("");
         ProjectionExample instance = new ConstructorExpression<ProjectionExample>(ProjectionExample.class,
-                new Class[]{long.class, String.class}, longVal, stringVal).newInstance(0L, "");
+                new Class<?>[]{long.class, String.class}, longVal, stringVal).newInstance(0L, "");
         assertNotNull(instance);
         assertEquals((Long) 0L, instance.id);
         assertTrue(instance.text.isEmpty());

File: querydsl-core/src/test/java/com/querydsl/core/types/SerializationTest.java
Patch:
@@ -30,7 +30,7 @@ public void Expressions() throws Exception {
         args.put(Object.class, "obj");
         args.put(BeanPath.class, new EntityPathBase<Object>(Object.class, "obj"));
         args.put(Class.class, Integer.class);
-        args.put(Class[].class, new Class[]{Object.class, Object.class});
+        args.put(Class[].class, new Class<?>[]{Object.class, Object.class});
         args.put(java.util.Date.class, new java.util.Date(0));
         args.put(java.sql.Date.class, new java.sql.Date(0));
         args.put(java.sql.Time.class, new java.sql.Time(0));

File: querydsl-core/src/test/java/com/querydsl/core/types/StringTest.java
Patch:
@@ -78,7 +78,7 @@ public void ToString() {
         assertEquals("lower(alias.name)", $(alias.getName()).lower().toString());
 
         // ConstructorExpression
-        ConstructorExpression<SomeType> someType = new ConstructorExpression<SomeType>(SomeType.class, new Class[]{SomeType.class}, $(alias));
+        ConstructorExpression<SomeType> someType = new ConstructorExpression<SomeType>(SomeType.class, new Class<?>[]{SomeType.class}, $(alias));
         assertEquals("new SomeType(alias)", someType.toString());
 
         // ArrayConstructorExpression

File: querydsl-examples/querydsl-example-sql-guice/src/main/java/com/querydsl/example/sql/repository/UserRepository.java
Patch:
@@ -34,13 +34,11 @@ public List<UserInfo> allWithTweetCount() {
                 .fetch();
     }
 
-    @SuppressWarnings("unchecked")
     @Transactional
     public List<User> findAll(Predicate expr) {
         return selectFrom(user).where(expr).fetch();
     }
 
-    @SuppressWarnings("unchecked")
     @Transactional
     public List<User> all() {
         return selectFrom(user).fetch();

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/HibernateUtil.java
Patch:
@@ -36,8 +36,7 @@
  */
 public final class HibernateUtil {
 
-    @SuppressWarnings("unchecked")
-    private static final Set<Class<?>> BUILT_IN = ImmutableSet.of(Boolean.class, Byte.class,
+    private static final Set<Class<?>> BUILT_IN = ImmutableSet.<Class<?>>of(Boolean.class, Byte.class,
             Character.class, Double.class, Float.class, Integer.class, Long.class, Short.class,
             String.class, BigDecimal.class, byte[].class, Byte[].class, java.util.Date.class,
             java.util.Calendar.class, java.sql.Date.class, java.sql.Time.class, java.sql.Timestamp.class,

File: querydsl-jpa/src/test/java/com/querydsl/jpa/ConstructorsTest.java
Patch:
@@ -33,7 +33,7 @@ public static final class QBookmarkDTO extends ConstructorExpression<BookmarkDTO
         private static final long serialVersionUID = 2664671413344744578L;
 
         public QBookmarkDTO(Expression<java.lang.String> address) {
-            super(BookmarkDTO.class, new Class[] {String.class}, address);
+            super(BookmarkDTO.class, new Class<?>[] {String.class}, address);
         }
     }
 
@@ -43,7 +43,7 @@ public void Constructors() {
         ConstructorExpression<com.querydsl.jpa.domain.Cat> c =
                 Projections.constructor(
                         com.querydsl.jpa.domain.Cat.class,
-                        new Class[]{String.class},
+                        new Class<?>[]{String.class},
                         cat.name);
         assertToString("new " + com.querydsl.jpa.domain.Cat.class.getName() + "(cat.name)", c);
         assertToString("new " + getClass().getName() + "$BookmarkDTO(cat.name)",new QBookmarkDTO(cat.name));

File: querydsl-jpa/src/test/java/com/querydsl/jpa/JPAProviderTest.java
Patch:
@@ -53,7 +53,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
         };
         EntityManager proxy = (EntityManager) Proxy.newProxyInstance(
                 Thread.currentThread().getContextClassLoader(),
-                new Class[]{EntityManager.class},
+                new Class<?>[]{EntityManager.class},
                 handler);
         assertEquals(HQLTemplates.DEFAULT, JPAProvider.getTemplates(proxy));
     }
@@ -79,7 +79,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
         };
         EntityManager proxy = (EntityManager) Proxy.newProxyInstance(
                 Thread.currentThread().getContextClassLoader(),
-                new Class[]{EntityManager.class},
+                new Class<?>[]{EntityManager.class},
                 handler);
         assertEquals(EclipseLinkTemplates.DEFAULT, JPAProvider.getTemplates(proxy));
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/QProjection.java
Patch:
@@ -12,7 +12,7 @@ public class QProjection extends ConstructorExpression<Projection> {
 
     public QProjection(StringExpression str, QCat cat) {
         super(Projection.class,
-                new Class[]{String.class, Cat.class}, new Expression[]{str, cat});
+                new Class<?>[]{String.class, Cat.class}, new Expression[]{str, cat});
     }
 
 }
\ No newline at end of file

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Domain.java
Patch:
@@ -25,8 +25,7 @@ public final class Domain {
 
     private Domain() { }
 
-    @SuppressWarnings("unchecked")
-    public static final List<Class<?>> classes = Arrays.asList(
+    public static final List<Class<?>> classes = Arrays.<Class<?>>asList(
             Account.class,
             Animal.class,
             Author.class,

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain2/Domain2.java
Patch:
@@ -20,8 +20,7 @@ public final class Domain2 {
 
     private Domain2() { }
 
-    @SuppressWarnings("unchecked")
-    public static final List<Class<?>> classes = Arrays.asList(
+    public static final List<Class<?>> classes = Arrays.<Class<?>>asList(
             Category.class,
             CategoryProp.class,
             Contact.class,

File: querydsl-sql/src/test/java/com/querydsl/sql/domain/QIdName.java
Patch:
@@ -21,7 +21,7 @@ public class QIdName extends ConstructorExpression<IdName> {
     private static final long serialVersionUID = 5770565824515003611L;
 
     public QIdName(Expression<java.lang.Integer> id, Expression<java.lang.String> name) {
-        super(IdName.class, new Class[]{int.class, String.class}, id, name);
+        super(IdName.class, new Class<?>[]{int.class, String.class}, id, name);
     }
 
 }

File: querydsl-sql/src/test/java/com/querydsl/sql/types/TypeTest.java
Patch:
@@ -75,9 +75,9 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
         }
     }
 
-    private final ResultSet resultSet = (ResultSet) Proxy.newProxyInstance(getClass().getClassLoader(), new Class[]{ResultSet.class}, this);
+    private final ResultSet resultSet = (ResultSet) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[]{ResultSet.class}, this);
 
-    private final PreparedStatement statement = (PreparedStatement) Proxy.newProxyInstance(getClass().getClassLoader(), new Class[]{PreparedStatement.class}, this);
+    private final PreparedStatement statement = (PreparedStatement) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[]{PreparedStatement.class}, this);
 
     @SuppressWarnings("unchecked")
     @Test

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPACollectionAnyVisitor.java
Patch:
@@ -42,7 +42,7 @@ protected Predicate exists(Context c, Predicate condition) {
             Path<?> child = c.paths.get(i).getMetadata().getParent();
             EntityPath<Object> replacement = (EntityPath<Object>) c.replacements.get(i);
             if (c.paths.get(i).getType().isAnnotationPresent(Entity.class)) {
-                query.from(Expressions.as(
+                query.addJoin(i == 0 ? JoinType.DEFAULT : JoinType.INNERJOIN, Expressions.as(
                         Expressions.listPath((Class) c.paths.get(i).getType(), SimplePath.class,
                                 child.getMetadata()), replacement));
             } else {

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLServer2005Templates.java
Patch:
@@ -86,8 +86,8 @@ public void serialize(QueryMetadata metadata, boolean forCountRow, SQLSerializer
                 for (OrderSpecifier<?> os : metadata.getOrderBy()) {
                     rn.orderBy(os);
                 }
-                Expression<?> pr = Projections.appending(metadata.getProjection(), rn.as("rn"));
-                metadata.setProjection(pr);
+                FactoryExpression<?> pr = Projections.appending(metadata.getProjection(), rn.as("rn"));
+                metadata.setProjection(FactoryExpressionUtils.wrap(pr));
                 metadata.clearOrderBy();
                 context.serializeForQuery(metadata, forCountRow);
                 context.append(outerQueryEnd);

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/AbstractMapper.java
Patch:
@@ -29,7 +29,7 @@
 public abstract class AbstractMapper<T> implements Mapper<T> {
 
     protected Map<String, Path<?>> getColumns(RelationalPath<?> path) {
-        Map<String, Path<?>> columns = Maps.newHashMap();
+        Map<String, Path<?>> columns = Maps.newLinkedHashMap();
         for (Path<?> column : path.getColumns()) {
             columns.put(column.getMetadata().getName(), column);
         }

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/DefaultMapper.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 import com.querydsl.core.QueryException;
@@ -51,7 +51,7 @@ public DefaultMapper(boolean withNullBindings) {
     @Override
     public Map<Path<?>, Object> createMap(RelationalPath<?> entity, Object bean) {
         try {
-            Map<Path<?>, Object> values = new HashMap<Path<?>, Object>();
+            Map<Path<?>, Object> values = new LinkedHashMap<Path<?>, Object>();
             Class<?> beanClass = bean.getClass();
             Map<String, Path<?>> columns = getColumns(entity);
             for (Field beanField : ReflectionUtils.getFields(beanClass)) {

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/AbstractMapper.java
Patch:
@@ -29,7 +29,7 @@
 public abstract class AbstractMapper<T> implements Mapper<T> {
 
     protected Map<String, Path<?>> getColumns(RelationalPath<?> path) {
-        Map<String, Path<?>> columns = Maps.newHashMap();
+        Map<String, Path<?>> columns = Maps.newLinkedHashMap();
         for (Path<?> column : path.getColumns()) {
             columns.put(column.getMetadata().getName(), column);
         }

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/DefaultMapper.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 import com.querydsl.core.QueryException;
@@ -51,7 +51,7 @@ public DefaultMapper(boolean withNullBindings) {
     @Override
     public Map<Path<?>, Object> createMap(RelationalPath<?> entity, Object bean) {
         try {
-            Map<Path<?>, Object> values = new HashMap<Path<?>, Object>();
+            Map<Path<?>, Object> values = new LinkedHashMap<Path<?>, Object>();
             Class<?> beanClass = bean.getClass();
             Map<String, Path<?>> columns = getColumns(entity);
             for (Field beanField : ReflectionUtils.getFields(beanClass)) {

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPQLTemplates.java
Patch:
@@ -160,6 +160,7 @@ public String getTypeForCast(Class<?> cl) {
         return cl.getSimpleName().toLowerCase();
     }
 
+    @Deprecated // kept for backwards compatibility
     public boolean isEnumInPathSupported() {
         return true;
     }

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLQueryFactory.java
Patch:
@@ -135,7 +135,7 @@ public SQLQuery<Integer> selectOne() {
     }
 
     /**
-     * Create a new detached SQLQuery instance with the given projection and source
+     * Create a new SQLQuery instance with the given projection and source
      *
      * @param expr query source and projection
      * @param <T>

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLQueryFactory.java
Patch:
@@ -135,7 +135,7 @@ public SQLQuery<Integer> selectOne() {
     }
 
     /**
-     * Create a new detached SQLQuery instance with the given projection and source
+     * Create a new SQLQuery instance with the given projection and source
      *
      * @param expr query source and projection
      * @param <T>

File: src/test/java/com/mysema/codegen/support/ClassUtilsTest.java
Patch:
@@ -19,9 +19,7 @@ public class ClassUtilsTest {
     @Test
     public void GetName() {
         assertEquals("int", ClassUtils.getName(int.class));
-        assertEquals(
-                "int",
-                ClassUtils.getName(int.class, Collections.<String> emptySet(),
+        assertEquals("int", ClassUtils.getName(int.class, Collections.<String> emptySet(),
                         Collections.<String> emptySet()));
         assertEquals("Object", ClassUtils.getName(Object.class));
         assertEquals("Object[]", ClassUtils.getName(Object[].class));

File: querydsl-jdo/src/main/java/com/querydsl/jdo/AbstractJDOQuery.java
Patch:
@@ -162,10 +162,10 @@ private Query createQuery(boolean forCount) {
     }
 
     protected void logQuery(String queryString, Map<Object, String> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(MDC_QUERY, normalizedQuery);
-        MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(MDC_QUERY, normalizedQuery);
+            MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/AbstractHibernateQuery.java
Patch:
@@ -198,10 +198,10 @@ public QueryResults<T> fetchResults() {
     }
 
     protected void logQuery(String queryString, Map<Object, String> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(MDC_QUERY, normalizedQuery);
-        MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(MDC_QUERY, normalizedQuery);
+            MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/sql/AbstractHibernateSQLQuery.java
Patch:
@@ -192,10 +192,10 @@ public QueryResults<T> fetchResults() {
     }
 
     protected void logQuery(String queryString, Map<Object, String> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(MDC_QUERY, normalizedQuery);
-        MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(MDC_QUERY, normalizedQuery);
+            MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/AbstractJPAQuery.java
Patch:
@@ -226,10 +226,10 @@ public QueryResults<T> fetchResults() {
     }
 
     protected void logQuery(String queryString, Map<Object, String> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(MDC_QUERY, normalizedQuery);
-        MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(MDC_QUERY, normalizedQuery);
+            MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/sql/AbstractJPASQLQuery.java
Patch:
@@ -273,10 +273,10 @@ public QueryResults<T> fetchResults() {
     }
 
     protected void logQuery(String queryString, Map<Object, String> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(MDC_QUERY, normalizedQuery);
-        MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(MDC_QUERY, normalizedQuery);
+            MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-sql/src/main/java/com/querydsl/sql/AbstractSQLQuery.java
Patch:
@@ -609,10 +609,10 @@ private long unsafeCount() throws SQLException {
     }
 
     protected void logQuery(String queryString, Collection<Object> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(MDC_QUERY, normalizedQuery);
-        MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(MDC_QUERY, normalizedQuery);
+            MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/AbstractSQLClause.java
Patch:
@@ -203,10 +203,10 @@ protected void close(ResultSet rs) {
     }
 
     protected void logQuery(Logger logger, String queryString, Collection<Object> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(QueryBase.MDC_QUERY, normalizedQuery);
-        MDC.put(QueryBase.MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(QueryBase.MDC_QUERY, normalizedQuery);
+            MDC.put(QueryBase.MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-jdo/src/main/java/com/querydsl/jdo/AbstractJDOQuery.java
Patch:
@@ -162,10 +162,10 @@ private Query createQuery(boolean forCount) {
     }
 
     protected void logQuery(String queryString, Map<Object, String> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(MDC_QUERY, normalizedQuery);
-        MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(MDC_QUERY, normalizedQuery);
+            MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/AbstractHibernateQuery.java
Patch:
@@ -198,10 +198,10 @@ public QueryResults<T> fetchResults() {
     }
 
     protected void logQuery(String queryString, Map<Object, String> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(MDC_QUERY, normalizedQuery);
-        MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(MDC_QUERY, normalizedQuery);
+            MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/sql/AbstractHibernateSQLQuery.java
Patch:
@@ -192,10 +192,10 @@ public QueryResults<T> fetchResults() {
     }
 
     protected void logQuery(String queryString, Map<Object, String> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(MDC_QUERY, normalizedQuery);
-        MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(MDC_QUERY, normalizedQuery);
+            MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/AbstractJPAQuery.java
Patch:
@@ -226,10 +226,10 @@ public QueryResults<T> fetchResults() {
     }
 
     protected void logQuery(String queryString, Map<Object, String> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(MDC_QUERY, normalizedQuery);
-        MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(MDC_QUERY, normalizedQuery);
+            MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/sql/AbstractJPASQLQuery.java
Patch:
@@ -273,10 +273,10 @@ public QueryResults<T> fetchResults() {
     }
 
     protected void logQuery(String queryString, Map<Object, String> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(MDC_QUERY, normalizedQuery);
-        MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(MDC_QUERY, normalizedQuery);
+            MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-sql/src/main/java/com/querydsl/sql/AbstractSQLQuery.java
Patch:
@@ -609,10 +609,10 @@ private long unsafeCount() throws SQLException {
     }
 
     protected void logQuery(String queryString, Collection<Object> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(MDC_QUERY, normalizedQuery);
-        MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(MDC_QUERY, normalizedQuery);
+            MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/AbstractSQLClause.java
Patch:
@@ -203,10 +203,10 @@ protected void close(ResultSet rs) {
     }
 
     protected void logQuery(Logger logger, String queryString, Collection<Object> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(QueryBase.MDC_QUERY, normalizedQuery);
-        MDC.put(QueryBase.MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(QueryBase.MDC_QUERY, normalizedQuery);
+            MDC.put(QueryBase.MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: src/main/java/com/mysema/codegen/model/Type.java
Patch:
@@ -27,6 +27,8 @@ public interface Type {
 
     Type getComponentType();
 
+    Type getEnclosingType();
+
     TypeCategory getCategory();
 
     String getFullName();

File: querydsl-jdo/src/main/java/com/querydsl/jdo/AbstractJDOQuery.java
Patch:
@@ -162,10 +162,10 @@ private Query createQuery(boolean forCount) {
     }
 
     protected void logQuery(String queryString, Map<Object, String> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(MDC_QUERY, normalizedQuery);
-        MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(MDC_QUERY, normalizedQuery);
+            MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/AbstractHibernateQuery.java
Patch:
@@ -198,10 +198,10 @@ public QueryResults<T> fetchResults() {
     }
 
     protected void logQuery(String queryString, Map<Object, String> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(MDC_QUERY, normalizedQuery);
-        MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(MDC_QUERY, normalizedQuery);
+            MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/sql/AbstractHibernateSQLQuery.java
Patch:
@@ -192,10 +192,10 @@ public QueryResults<T> fetchResults() {
     }
 
     protected void logQuery(String queryString, Map<Object, String> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(MDC_QUERY, normalizedQuery);
-        MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(MDC_QUERY, normalizedQuery);
+            MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/AbstractJPAQuery.java
Patch:
@@ -226,10 +226,10 @@ public QueryResults<T> fetchResults() {
     }
 
     protected void logQuery(String queryString, Map<Object, String> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(MDC_QUERY, normalizedQuery);
-        MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(MDC_QUERY, normalizedQuery);
+            MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/sql/AbstractJPASQLQuery.java
Patch:
@@ -273,10 +273,10 @@ public QueryResults<T> fetchResults() {
     }
 
     protected void logQuery(String queryString, Map<Object, String> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(MDC_QUERY, normalizedQuery);
-        MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(MDC_QUERY, normalizedQuery);
+            MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-sql/src/main/java/com/querydsl/sql/AbstractSQLQuery.java
Patch:
@@ -609,10 +609,10 @@ private long unsafeCount() throws SQLException {
     }
 
     protected void logQuery(String queryString, Collection<Object> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(MDC_QUERY, normalizedQuery);
-        MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(MDC_QUERY, normalizedQuery);
+            MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/AbstractSQLClause.java
Patch:
@@ -203,10 +203,10 @@ protected void close(ResultSet rs) {
     }
 
     protected void logQuery(Logger logger, String queryString, Collection<Object> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(QueryBase.MDC_QUERY, normalizedQuery);
-        MDC.put(QueryBase.MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(QueryBase.MDC_QUERY, normalizedQuery);
+            MDC.put(QueryBase.MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-jdo/src/main/java/com/querydsl/jdo/AbstractJDOQuery.java
Patch:
@@ -162,10 +162,10 @@ private Query createQuery(boolean forCount) {
     }
 
     protected void logQuery(String queryString, Map<Object, String> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(MDC_QUERY, normalizedQuery);
-        MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(MDC_QUERY, normalizedQuery);
+            MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/AbstractHibernateQuery.java
Patch:
@@ -198,10 +198,10 @@ public QueryResults<T> fetchResults() {
     }
 
     protected void logQuery(String queryString, Map<Object, String> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(MDC_QUERY, normalizedQuery);
-        MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(MDC_QUERY, normalizedQuery);
+            MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/sql/AbstractHibernateSQLQuery.java
Patch:
@@ -192,10 +192,10 @@ public QueryResults<T> fetchResults() {
     }
 
     protected void logQuery(String queryString, Map<Object, String> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(MDC_QUERY, normalizedQuery);
-        MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(MDC_QUERY, normalizedQuery);
+            MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/AbstractJPAQuery.java
Patch:
@@ -226,10 +226,10 @@ public QueryResults<T> fetchResults() {
     }
 
     protected void logQuery(String queryString, Map<Object, String> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(MDC_QUERY, normalizedQuery);
-        MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(MDC_QUERY, normalizedQuery);
+            MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/sql/AbstractJPASQLQuery.java
Patch:
@@ -273,10 +273,10 @@ public QueryResults<T> fetchResults() {
     }
 
     protected void logQuery(String queryString, Map<Object, String> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(MDC_QUERY, normalizedQuery);
-        MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(MDC_QUERY, normalizedQuery);
+            MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-sql/src/main/java/com/querydsl/sql/AbstractSQLQuery.java
Patch:
@@ -609,10 +609,10 @@ private long unsafeCount() throws SQLException {
     }
 
     protected void logQuery(String queryString, Collection<Object> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(MDC_QUERY, normalizedQuery);
-        MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(MDC_QUERY, normalizedQuery);
+            MDC.put(MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/AbstractSQLClause.java
Patch:
@@ -203,10 +203,10 @@ protected void close(ResultSet rs) {
     }
 
     protected void logQuery(Logger logger, String queryString, Collection<Object> parameters) {
-        String normalizedQuery = queryString.replace('\n', ' ');
-        MDC.put(QueryBase.MDC_QUERY, normalizedQuery);
-        MDC.put(QueryBase.MDC_PARAMETERS, String.valueOf(parameters));
         if (logger.isDebugEnabled()) {
+            String normalizedQuery = queryString.replace('\n', ' ');
+            MDC.put(QueryBase.MDC_QUERY, normalizedQuery);
+            MDC.put(QueryBase.MDC_PARAMETERS, String.valueOf(parameters));
             logger.debug(normalizedQuery);
         }
     }

File: querydsl-apt/src/test/java/com/querydsl/apt/GenericExporterTest.java
Patch:
@@ -78,6 +78,7 @@ public void Execute2() throws IOException {
         List<String> expected = new ArrayList<String>();
         // GenericExporter doesn't include field/method selection
         expected.add("QFileAttachment.java");
+        expected.add("QHierarchyTest_A2.java");
         expected.add("QJodaTest_BaseEntity.java");
         expected.add("QEnum3Test_Entity1.java");
         expected.add("QCustomCollection_MyCustomCollection.java");

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLTemplates.java
Patch:
@@ -1036,8 +1036,8 @@ protected void setDummyTable(String dummyTable) {
         this.dummyTable = dummyTable;
     }
 
-    public void setForShareSupported(boolean forShareSupported) {
-      this.forShareSupported = forShareSupported;
+    protected void setForShareSupported(boolean forShareSupported) {
+        this.forShareSupported = forShareSupported;
     }
 
     protected void setFrom(String from) {

File: querydsl-codegen/src/main/java/com/querydsl/codegen/GenericExporter.java
Patch:
@@ -703,7 +703,7 @@ public void setHandleFields(boolean b) {
     }
 
     /**
-     * Set whether fields are handled (default true)
+     * Set whether methods are handled (default true)
      *
      * @param b
      */

File: src/main/java/com/mysema/codegen/ScalaWriter.java
Patch:
@@ -295,7 +295,7 @@ private ScalaWriter beginMethod(String modifiers, Type returnType, String method
             beginLine(modifiers, escape(methodName)).params(args).append(" {").nl();
         } else {
             beginLine(modifiers, escape(methodName)).params(args)
-                    .append(": ").append(getGenericName(true, returnType)).append(" {").nl();
+                    .append(": ").append(getGenericName(true, returnType)).append(" = {").nl();
         }
 
         return goIn();

File: querydsl-apt/src/main/java/com/querydsl/apt/AbstractQuerydslProcessor.java
Patch:
@@ -80,7 +80,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
         Set<Class<? extends Annotation>> entityAnnotations = conf.getEntityAnnotations();
         TypeMappings typeMappings = conf.getTypeMappings();
         QueryTypeFactory queryTypeFactory = conf.getQueryTypeFactory();
-        this.typeFactory = new ExtendedTypeFactory(processingEnv, entityAnnotations, typeMappings, queryTypeFactory);
+        this.typeFactory = new ExtendedTypeFactory(processingEnv, entityAnnotations, typeMappings, queryTypeFactory, conf.getVariableNameFunction());
         elementHandler = new TypeElementHandler(conf, typeFactory, typeMappings, queryTypeFactory);
         this.roundEnv = roundEnv;
 

File: querydsl-apt/src/main/java/com/querydsl/apt/Configuration.java
Patch:
@@ -25,6 +25,7 @@
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.TypeMirror;
 
+import com.google.common.base.Function;
 import com.querydsl.codegen.*;
 import com.querydsl.core.util.Annotations;
 
@@ -111,4 +112,6 @@ public interface Configuration {
 
     boolean isStrictMode();
 
+    Function<EntityType, String> getVariableNameFunction();
+
 }

File: querydsl-apt/src/main/java/com/querydsl/apt/TypeElementHandler.java
Patch:
@@ -170,7 +170,7 @@ private Property toProperty(EntityType entityType, String name, TypeMirror type,
 
     public EntityType handleProjectionType(TypeElement e) {
         Type c = typeFactory.getType(e.asType(), true);
-        EntityType entityType = new EntityType(c.as(TypeCategory.ENTITY));
+        EntityType entityType = new EntityType(c.as(TypeCategory.ENTITY), configuration.getVariableNameFunction());
         typeMappings.register(entityType, queryTypeFactory.create(entityType));
         List<? extends Element> elements = e.getEnclosedElements();
         handleConstructors(entityType, elements);

File: querydsl-codegen/src/main/java/com/querydsl/codegen/EntitySerializer.java
Patch:
@@ -324,7 +324,7 @@ protected void introClassHeader(CodeWriter writer, EntityType model) throws IOEx
     }
 
     protected void introDefaultInstance(CodeWriter writer, EntityType model, String defaultName) throws IOException {
-        String simpleName = !defaultName.isEmpty() ? defaultName : model.getUncapSimpleName();
+        String simpleName = !defaultName.isEmpty() ? defaultName : model.getModifiedSimpleName();
         Type queryType = typeMappings.getPathType(model, model, true);
         String alias = simpleName;
         if (keywords.contains(simpleName.toUpperCase())) {

File: querydsl-codegen/src/main/java/com/querydsl/codegen/GenericExporter.java
Patch:
@@ -21,6 +21,7 @@
 
 import javax.annotation.Nullable;
 
+import com.google.common.base.Function;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
@@ -204,7 +205,7 @@ public void export(Class<?>...classes) {
     private void innerExport() {
         typeMappings = codegenModule.get(TypeMappings.class);
         queryTypeFactory = codegenModule.get(QueryTypeFactory.class);
-        typeFactory = new TypeFactory(ImmutableList.of(entityAnnotation, supertypeAnnotation, embeddableAnnotation));
+        typeFactory = new TypeFactory(ImmutableList.of(entityAnnotation, supertypeAnnotation, embeddableAnnotation), codegenModule.get(Function.class, CodegenModule.VARIABLE_NAME_FUNCTION_CLASS));
 
         // copy annotations helpers to typeFactory
         for (AnnotationHelper helper : annotationHelpers) {

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/MetaDataExporter.java
Patch:
@@ -27,6 +27,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.common.base.Function;
 import com.google.common.io.Files;
 import com.mysema.codegen.CodeWriter;
 import com.mysema.codegen.JavaWriter;
@@ -126,15 +127,15 @@ protected EntityType createEntityType(@Nullable String schemaName, String tableN
             String simpleName = module.getPrefix() + className + module.getSuffix();
             Type classTypeModel = new SimpleType(TypeCategory.ENTITY,
                     packageName + "." + simpleName,  packageName, simpleName, false, false);
-            classModel = new EntityType(classTypeModel);
+            classModel = new EntityType(classTypeModel, module.get(Function.class, CodegenModule.VARIABLE_NAME_FUNCTION_CLASS));
             typeMappings.register(classModel, classModel);
 
         } else {
             String beanPackage = normalizePackage(beanPackageName, schemaName);
             String simpleName = module.getBeanPrefix() + className + module.getBeanSuffix();
             Type classTypeModel = new SimpleType(TypeCategory.ENTITY,
                     beanPackage + "." + simpleName, beanPackage, simpleName, false, false);
-            classModel = new EntityType(classTypeModel);
+            classModel = new EntityType(classTypeModel, module.get(Function.class, CodegenModule.VARIABLE_NAME_FUNCTION_CLASS));
 
             Type mappedType = queryTypeFactory.create(classModel);
             entityToWrapped.put(classModel, mappedType);

File: querydsl-codegen/src/main/java/com/querydsl/codegen/GenericExporter.java
Patch:
@@ -702,7 +702,7 @@ public void setHandleFields(boolean b) {
     }
 
     /**
-     * Set whether fields are handled (default true)
+     * Set whether methods are handled (default true)
      *
      * @param b
      */

File: querydsl-apt/src/main/java/com/querydsl/apt/AbstractQuerydslProcessor.java
Patch:
@@ -80,7 +80,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
         Set<Class<? extends Annotation>> entityAnnotations = conf.getEntityAnnotations();
         TypeMappings typeMappings = conf.getTypeMappings();
         QueryTypeFactory queryTypeFactory = conf.getQueryTypeFactory();
-        this.typeFactory = new ExtendedTypeFactory(processingEnv, entityAnnotations, typeMappings, queryTypeFactory);
+        this.typeFactory = new ExtendedTypeFactory(processingEnv, entityAnnotations, typeMappings, queryTypeFactory, conf.getVariableNameFunction());
         elementHandler = new TypeElementHandler(conf, typeFactory, typeMappings, queryTypeFactory);
         this.roundEnv = roundEnv;
 

File: querydsl-apt/src/main/java/com/querydsl/apt/Configuration.java
Patch:
@@ -25,6 +25,7 @@
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.TypeMirror;
 
+import com.google.common.base.Function;
 import com.querydsl.codegen.*;
 import com.querydsl.core.util.Annotations;
 
@@ -111,4 +112,6 @@ public interface Configuration {
 
     boolean isStrictMode();
 
+    Function<EntityType, String> getVariableNameFunction();
+
 }

File: querydsl-apt/src/main/java/com/querydsl/apt/TypeElementHandler.java
Patch:
@@ -170,7 +170,7 @@ private Property toProperty(EntityType entityType, String name, TypeMirror type,
 
     public EntityType handleProjectionType(TypeElement e) {
         Type c = typeFactory.getType(e.asType(), true);
-        EntityType entityType = new EntityType(c.as(TypeCategory.ENTITY));
+        EntityType entityType = new EntityType(c.as(TypeCategory.ENTITY), configuration.getVariableNameFunction());
         typeMappings.register(entityType, queryTypeFactory.create(entityType));
         List<? extends Element> elements = e.getEnclosedElements();
         handleConstructors(entityType, elements);

File: querydsl-codegen/src/main/java/com/querydsl/codegen/EntitySerializer.java
Patch:
@@ -324,7 +324,7 @@ protected void introClassHeader(CodeWriter writer, EntityType model) throws IOEx
     }
 
     protected void introDefaultInstance(CodeWriter writer, EntityType model, String defaultName) throws IOException {
-        String simpleName = !defaultName.isEmpty() ? defaultName : model.getUncapSimpleName();
+        String simpleName = !defaultName.isEmpty() ? defaultName : model.getModifiedSimpleName();
         Type queryType = typeMappings.getPathType(model, model, true);
         String alias = simpleName;
         if (keywords.contains(simpleName.toUpperCase())) {

File: querydsl-codegen/src/main/java/com/querydsl/codegen/GenericExporter.java
Patch:
@@ -21,6 +21,7 @@
 
 import javax.annotation.Nullable;
 
+import com.google.common.base.Function;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
@@ -204,7 +205,7 @@ public void export(Class<?>...classes) {
     private void innerExport() {
         typeMappings = codegenModule.get(TypeMappings.class);
         queryTypeFactory = codegenModule.get(QueryTypeFactory.class);
-        typeFactory = new TypeFactory(ImmutableList.of(entityAnnotation, supertypeAnnotation, embeddableAnnotation));
+        typeFactory = new TypeFactory(ImmutableList.of(entityAnnotation, supertypeAnnotation, embeddableAnnotation), codegenModule.get(Function.class, CodegenModule.VARIABLE_NAME_FUNCTION_CLASS));
 
         // copy annotations helpers to typeFactory
         for (AnnotationHelper helper : annotationHelpers) {

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/MetaDataExporter.java
Patch:
@@ -27,6 +27,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.common.base.Function;
 import com.google.common.io.Files;
 import com.mysema.codegen.CodeWriter;
 import com.mysema.codegen.JavaWriter;
@@ -126,15 +127,15 @@ protected EntityType createEntityType(@Nullable String schemaName, String tableN
             String simpleName = module.getPrefix() + className + module.getSuffix();
             Type classTypeModel = new SimpleType(TypeCategory.ENTITY,
                     packageName + "." + simpleName,  packageName, simpleName, false, false);
-            classModel = new EntityType(classTypeModel);
+            classModel = new EntityType(classTypeModel, module.get(Function.class, CodegenModule.VARIABLE_NAME_FUNCTION_CLASS));
             typeMappings.register(classModel, classModel);
 
         } else {
             String beanPackage = normalizePackage(beanPackageName, schemaName);
             String simpleName = module.getBeanPrefix() + className + module.getBeanSuffix();
             Type classTypeModel = new SimpleType(TypeCategory.ENTITY,
                     beanPackage + "." + simpleName, beanPackage, simpleName, false, false);
-            classModel = new EntityType(classTypeModel);
+            classModel = new EntityType(classTypeModel, module.get(Function.class, CodegenModule.VARIABLE_NAME_FUNCTION_CLASS));
 
             Type mappedType = queryTypeFactory.create(classModel);
             entityToWrapped.put(classModel, mappedType);

File: src/main/java/com/mysema/codegen/ScalaWriter.java
Patch:
@@ -295,7 +295,7 @@ private ScalaWriter beginMethod(String modifiers, Type returnType, String method
             beginLine(modifiers, escape(methodName)).params(args).append(" {").nl();
         } else {
             beginLine(modifiers, escape(methodName)).params(args)
-                    .append(": ").append(getGenericName(true, returnType)).append(" {").nl();
+                    .append(": ").append(getGenericName(true, returnType)).append(" = {").nl();
         }
 
         return goIn();

File: querydsl-core/src/main/java/com/querydsl/core/types/FactoryExpressionUtils.java
Patch:
@@ -49,7 +49,7 @@ public static class FactoryExpressionAdapter<T> extends ExpressionBase<T> implem
         FactoryExpressionAdapter(FactoryExpression<T> inner, List<Expression<?>> args) {
             super(inner.getType());
             this.inner = inner;
-            this.args = args;
+            this.args = expand(args);
         }
 
         @Override

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/SQLInsertClause.java
Patch:
@@ -333,7 +333,7 @@ public ResultSet executeWithKeys() {
 
                 listeners.preExecute(context);
                 stmt.executeUpdate();
-                listeners.preExecute(context);
+                listeners.executed(context);
             } else {
                 Collection<PreparedStatement> stmts = createStatements(true);
                 if (stmts != null && stmts.size() > 1) {

File: querydsl-core/src/main/java/com/querydsl/core/support/QueryMixin.java
Patch:
@@ -339,7 +339,7 @@ public final T on(Predicate... conditions) {
     public final T orderBy(OrderSpecifier<?> spec) {
         Expression<?> e = convert(spec.getTarget(), Role.ORDER_BY);
         if (!spec.getTarget().equals(e)) {
-            metadata.addOrderBy(new OrderSpecifier(spec.getOrder(), e));
+            metadata.addOrderBy(new OrderSpecifier(spec.getOrder(), e, spec.getNullHandling()));
         } else {
             metadata.addOrderBy(spec);
         }

File: querydsl-core/src/main/java/com/querydsl/core/support/QueryMixin.java
Patch:
@@ -339,7 +339,7 @@ public final T on(Predicate... conditions) {
     public final T orderBy(OrderSpecifier<?> spec) {
         Expression<?> e = convert(spec.getTarget(), Role.ORDER_BY);
         if (!spec.getTarget().equals(e)) {
-            metadata.addOrderBy(new OrderSpecifier(spec.getOrder(), e));
+            metadata.addOrderBy(new OrderSpecifier(spec.getOrder(), e, spec.getNullHandling()));
         } else {
             metadata.addOrderBy(spec);
         }

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/MetaDataExporterTest.java
Patch:
@@ -26,10 +26,12 @@
 import javax.tools.JavaCompiler;
 
 import org.junit.*;
+import org.junit.experimental.categories.Category;
 
 import com.mysema.codegen.SimpleCompiler;
 import com.querydsl.codegen.BeanSerializer;
 import com.querydsl.codegen.Serializer;
+import com.querydsl.core.testutil.SlowTest;
 import com.querydsl.core.util.FileUtils;
 
 public class MetaDataExporterTest {
@@ -160,6 +162,7 @@ public void NormalSettings_Repetition() throws SQLException {
     }
 
     @Test
+    @Category(SlowTest.class)
     public void Multiple() throws SQLException {
         // TODO : refactor this to use new JUnit constructs
         List<String> emptyString = Collections.singletonList("");

File: src/main/java/com/mysema/codegen/JavaWriter.java
Patch:
@@ -158,7 +158,7 @@ private void annotationConstant(Object value) throws IOException {
         } else if (value instanceof Number || value instanceof Boolean) {
             append(value.toString());
         } else if (value instanceof Enum) {
-            Enum enumValue = (Enum) value;
+            Enum<?> enumValue = (Enum<?>) value;
             if (classes.contains(enumValue.getClass().getName())
                     || packages.contains(enumValue.getClass().getPackage().getName())) {
                 append(enumValue.name());

File: src/main/java/com/mysema/codegen/ScalaWriter.java
Patch:
@@ -174,7 +174,7 @@ private void annotationConstant(Object value) throws IOException {
         } else if (value instanceof Number || value instanceof Boolean) {
             append(value.toString());
         } else if (value instanceof Enum) {
-            Enum enumValue = (Enum) value;
+            Enum<?> enumValue = (Enum<?>) value;
             if (classes.contains(enumValue.getClass().getName())
                     || packages.contains(enumValue.getClass().getPackage().getName())) {
                 append(enumValue.name());

File: src/test/java/com/mysema/codegen/ECJEvaluatorFactoryTest.java
Patch:
@@ -115,7 +115,7 @@ private void test(String source, Class<?> projectionType, List<String> names,
     private Object evaluate(String source, Class<?> projectionType, List<String> names,
             List<Class<?>> types, List<?> args, Map<String, Object> constants) {
         Evaluator<?> evaluator = factory.createEvaluator("return " + source + ";", projectionType,
-                names.toArray(new String[names.size()]), types.toArray(new Class[types.size()]),
+                names.toArray(new String[names.size()]), types.toArray(new Class<?>[types.size()]),
                 constants);
         return evaluator.evaluate(args.toArray());
     }

File: src/test/java/com/mysema/codegen/JDKEvaluatorFactoryTest.java
Patch:
@@ -116,7 +116,7 @@ private void test(String source, Class<?> projectionType, List<String> names,
     private Object evaluate(String source, Class<?> projectionType, List<String> names,
             List<Class<?>> types, List<?> args, Map<String, Object> constants) {
         Evaluator<?> evaluator = factory.createEvaluator("return " + source + ";", projectionType,
-                names.toArray(new String[names.size()]), types.toArray(new Class[types.size()]),
+                names.toArray(new String[names.size()]), types.toArray(new Class<?>[types.size()]),
                 constants);
         return evaluator.evaluate(args.toArray());
     }

File: src/test/java/com/mysema/codegen/MaxImpl.java
Patch:
@@ -20,7 +20,7 @@ public MaxImpl(long value) {
 
     @Override
     public Class<?>[] groups() {
-        return new Class[0];
+        return new Class<?>[0];
     }
 
     @Override
@@ -29,8 +29,9 @@ public String message() {
     }
 
     @Override
+    @SuppressWarnings("unchecked") // Empty array
     public Class<? extends ConstraintPayload>[] payload() {
-        return new Class[0];
+        return (Class<? extends ConstraintPayload>[]) new Class<?>[0];
     }
 
     @Override

File: src/test/java/com/mysema/codegen/MinImpl.java
Patch:
@@ -20,7 +20,7 @@ public MinImpl(long value) {
 
     @Override
     public Class<?>[] groups() {
-        return new Class[0];
+        return new Class<?>[0];
     }
 
     @Override
@@ -29,8 +29,9 @@ public String message() {
     }
 
     @Override
+    @SuppressWarnings("unchecked") // Empty array
     public Class<? extends ConstraintPayload>[] payload() {
-        return new Class[0];
+        return (Class<? extends ConstraintPayload>[]) new Class<?>[0];
     }
 
     @Override

File: src/test/java/com/mysema/codegen/NotNullImpl.java
Patch:
@@ -14,7 +14,7 @@ public class NotNullImpl implements NotNull {
 
     @Override
     public Class<?>[] groups() {
-        return new Class[0];
+        return new Class<?>[0];
     }
 
     @Override
@@ -23,8 +23,9 @@ public String message() {
     }
 
     @Override
+    @SuppressWarnings("unchecked") // Empty array
     public Class<? extends ConstraintPayload>[] payload() {
-        return new Class[0];
+        return (Class<? extends ConstraintPayload>[]) new Class<?>[0];
     }
 
     @Override

File: src/test/java/com/mysema/codegen/ScalaWriterTest.java
Patch:
@@ -221,7 +221,7 @@ public void AnnotationConstant() throws IOException {
         Max annotation = new MaxImpl(0l) {
             @Override
             public Class<?>[] groups() {
-                return new Class[] { Object.class, String.class, int.class };
+                return new Class<?>[] { Object.class, String.class, int.class };
             }
         };
         writer.annotation(annotation);

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/MetaDataExporterTest.java
Patch:
@@ -26,10 +26,12 @@
 import javax.tools.JavaCompiler;
 
 import org.junit.*;
+import org.junit.experimental.categories.Category;
 
 import com.mysema.codegen.SimpleCompiler;
 import com.querydsl.codegen.BeanSerializer;
 import com.querydsl.codegen.Serializer;
+import com.querydsl.core.testutil.SlowTest;
 import com.querydsl.core.util.FileUtils;
 
 public class MetaDataExporterTest {
@@ -160,6 +162,7 @@ public void NormalSettings_Repetition() throws SQLException {
     }
 
     @Test
+    @Category(SlowTest.class)
     public void Multiple() throws SQLException {
         // TODO : refactor this to use new JUnit constructs
         List<String> emptyString = Collections.singletonList("");

File: querydsl-sql/src/test/java/com/querydsl/sql/postgresql/PostgreSQLQueryTest.java
Patch:
@@ -26,7 +26,7 @@ public void setUp() {
     public void Syntax() {
 //        [ WITH [ RECURSIVE ] with_query [, ...] ]
 //        SELECT [ ALL | DISTINCT [ ON ( expression [, ...] ) ] ]
-        query.distinct(survey.name);
+        query.distinctOn(survey.name);
 //            * | expression [ [ AS ] output_name ] [, ...]
 //            [ FROM from_item [, ...] ]
         query.from(survey);
@@ -92,7 +92,7 @@ public void ForUpdate_Of() {
     @Test
     public void Distinct_On() {
         query.from(employee)
-            .distinct(employee.datefield, employee.timefield)
+            .distinctOn(employee.datefield, employee.timefield)
             .orderBy(employee.datefield.asc(), employee.timefield.asc(), employee.salary.asc())
             .select(employee.id);
 

File: querydsl-examples/querydsl-example-jpa-guice/src/main/java/com/querydsl/example/jpa/repository/TweetRepository.java
Patch:
@@ -21,6 +21,6 @@ public Tweet findById(Long id) {
     }
 
     public List<Tweet> findAll(Predicate expr) {
-        return queryFactory().selectFrom(tweet).where(expr).fetch();
+        return selectFrom(tweet).where(expr).fetch();
     }
 }

File: querydsl-examples/querydsl-example-jpa-guice/src/main/java/com/querydsl/example/jpa/repository/UserRepository.java
Patch:
@@ -21,10 +21,10 @@ public User save(User user) {
     }
 
     public List<User> findAll(Predicate expr) {
-        return queryFactory().selectFrom(user).where(expr).fetch();
+        return selectFrom(user).where(expr).fetch();
     }
 
     public List<User> all() {
-        return queryFactory().selectFrom(user).fetch();
+        return selectFrom(user).fetch();
     }
 }

File: querydsl-examples/querydsl-example-jpa-guice/src/main/java/com/querydsl/example/jpa/repository/TweetRepository.java
Patch:
@@ -21,6 +21,6 @@ public Tweet findById(Long id) {
     }
 
     public List<Tweet> findAll(Predicate expr) {
-        return queryFactory().selectFrom(tweet).where(expr).fetch();
+        return selectFrom(tweet).where(expr).fetch();
     }
 }

File: querydsl-examples/querydsl-example-jpa-guice/src/main/java/com/querydsl/example/jpa/repository/UserRepository.java
Patch:
@@ -21,10 +21,10 @@ public User save(User user) {
     }
 
     public List<User> findAll(Predicate expr) {
-        return queryFactory().selectFrom(user).where(expr).fetch();
+        return selectFrom(user).where(expr).fetch();
     }
 
     public List<User> all() {
-        return queryFactory().selectFrom(user).fetch();
+        return selectFrom(user).fetch();
     }
 }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/JPAQueryFactory.java
Patch:
@@ -118,7 +118,7 @@ public JPAQuery<?> from(EntityPath<?> from) {
     }
 
     @Override
-    public JPQLQuery<?> from(EntityPath<?>... from) {
+    public JPAQuery<?> from(EntityPath<?>... from) {
         return query().from(from);
     }
 

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/SQLInsertClause.java
Patch:
@@ -333,7 +333,7 @@ public ResultSet executeWithKeys() {
 
                 listeners.preExecute(context);
                 stmt.executeUpdate();
-                listeners.preExecute(context);
+                listeners.executed(context);
             } else {
                 Collection<PreparedStatement> stmts = createStatements(true);
                 if (stmts != null && stmts.size() > 1) {

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/SimpleTypes.java
Patch:
@@ -64,4 +64,6 @@ public class SimpleTypes {
 
 //    @Temporal(TemporalType.TIMESTAMP)
     java.sql.Timestamp timestamp;
+
+    byte[] byteArray;
 }

File: querydsl-sql/src/test/java/com/querydsl/sql/SQLSubQueryTest.java
Patch:
@@ -68,7 +68,7 @@ public void List_Entity() {
         SQLSerializer serializer = new SQLSerializer(new Configuration(SQLTemplates.DEFAULT));
         serializer.handle(expr);
 
-        assertEquals("(select EMPLOYEE.ID, EMPLOYEE.FIRSTNAME, EMPLOYEE.LASTNAME, EMPLOYEE.SALARY, EMPLOYEE.DATEFIELD, EMPLOYEE.TIMEFIELD, EMPLOYEE.SUPERIOR_ID, employee2.ID\n" +
+        assertEquals("(select EMPLOYEE.ID, EMPLOYEE.FIRSTNAME, EMPLOYEE.LASTNAME, EMPLOYEE.SALARY, EMPLOYEE.DATEFIELD, EMPLOYEE.TIMEFIELD, EMPLOYEE.SUPERIOR_ID, employee2.ID as col__ID7\n" +
                 "from EMPLOYEE EMPLOYEE\n" +
                 "inner join EMPLOYEE employee2\n" +
                 "on EMPLOYEE.SUPERIOR_ID = employee2.ID)", serializer.toString());

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLTemplates.java
Patch:
@@ -466,8 +466,10 @@ protected SQLTemplates(Set<String> reservedKeywords, String quoteStr, char escap
         addTypeNameToCode("nvarchar", Types.NVARCHAR);
         addTypeNameToCode("rowid", Types.ROWID);
         addTypeNameToCode("timestamp", Types.TIMESTAMP);
+        addTypeNameToCode("timestamp", TIMESTAMP_WITH_TIMEZONE);
         addTypeNameToCode("bit", Types.BIT);
         addTypeNameToCode("time", Types.TIME);
+        addTypeNameToCode("time", TIME_WITH_TIMEZONE);
         addTypeNameToCode("tinyint", Types.TINYINT);
         addTypeNameToCode("other", Types.OTHER);
         addTypeNameToCode("bigint", Types.BIGINT);

File: querydsl-sql/src/test/java/com/querydsl/sql/types/JSR310LocalDateTypeTest.java
Patch:
@@ -24,7 +24,7 @@ public void Set() throws SQLException {
         Date date = Date.valueOf(value);
 
         PreparedStatement stmt = EasyMock.createNiceMock(PreparedStatement.class);
-        stmt.setDate(1, date, UTC);
+        stmt.setDate(1, date);
         EasyMock.replay(stmt);
 
         type.setValue(stmt, 1, value);
@@ -34,7 +34,7 @@ public void Set() throws SQLException {
     @Test
     public void Get() throws SQLException {
         ResultSet resultSet = EasyMock.createNiceMock(ResultSet.class);
-        EasyMock.expect(resultSet.getDate(1, UTC)).andReturn(new Date(UTC.getTimeInMillis()));
+        EasyMock.expect(resultSet.getDate(1)).andReturn(new Date(UTC.getTimeInMillis()));
         EasyMock.replay(resultSet);
 
         LocalDate result = type.getValue(resultSet, 1);

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310OffsetDateTimeType.java
Patch:
@@ -44,6 +44,7 @@ public OffsetDateTime getValue(ResultSet rs, int startIndex) throws SQLException
 
     @Override
     public void setValue(PreparedStatement st, int startIndex, OffsetDateTime value) throws SQLException {
-        st.setTimestamp(startIndex, Timestamp.valueOf(value.toLocalDateTime()), utc());
+        OffsetDateTime normalized = value.withOffsetSameInstant(ZoneOffset.UTC);
+        st.setTimestamp(startIndex, Timestamp.valueOf(normalized.toLocalDateTime()), utc());
     }
 }

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310OffsetTimeType.java
Patch:
@@ -37,12 +37,13 @@ public Class<OffsetTime> getReturnedClass() {
     @Nullable
     @Override
     public OffsetTime getValue(ResultSet rs, int startIndex) throws SQLException {
-        Time time = rs.getTime(startIndex);
+        Time time = rs.getTime(startIndex, utc());
         return time != null ? OffsetTime.of(time.toLocalTime(), ZoneOffset.UTC) : null;
     }
 
     @Override
     public void setValue(PreparedStatement st, int startIndex, OffsetTime value) throws SQLException {
-        st.setTime(startIndex, Time.valueOf(value.toLocalTime()));
+        OffsetTime normalized = value.withOffsetSameInstant(ZoneOffset.UTC);
+        st.setTime(startIndex, Time.valueOf(normalized.toLocalTime()), utc());
     }
 }

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310ZonedDateTimeType.java
Patch:
@@ -38,11 +38,12 @@ public Class<ZonedDateTime> getReturnedClass() {
     @Override
     public ZonedDateTime getValue(ResultSet rs, int startIndex) throws SQLException {
         Timestamp timestamp = rs.getTimestamp(startIndex, utc());
-        return timestamp != null ? ZonedDateTime.ofInstant(timestamp.toInstant(), ZoneOffset.UTC) : null;
+        return timestamp != null ? ZonedDateTime.of(timestamp.toLocalDateTime(), ZoneOffset.UTC) : null;
     }
 
     @Override
     public void setValue(PreparedStatement st, int startIndex, ZonedDateTime value) throws SQLException {
-        st.setTimestamp(startIndex, Timestamp.from(value.toInstant()), utc());
+        ZonedDateTime normalized = value.withZoneSameInstant(ZoneOffset.UTC);
+        st.setTimestamp(startIndex, Timestamp.valueOf(normalized.toLocalDateTime()), utc());
     }
 }

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310LocalDateTimeType.java
Patch:
@@ -15,7 +15,6 @@
 @IgnoreJRERequirement //conditionally included
 public class JSR310LocalDateTimeType extends AbstractJSR310DateTimeType<LocalDateTime> {
 
-
     public JSR310LocalDateTimeType() {
         super(Types.TIMESTAMP);
     }
@@ -43,6 +42,6 @@ public LocalDateTime getValue(ResultSet rs, int startIndex) throws SQLException
 
     @Override
     public void setValue(PreparedStatement st, int startIndex, LocalDateTime value) throws SQLException {
-        st.setTimestamp(startIndex, Timestamp.from(value.toInstant(ZoneOffset.UTC)), utc());
+        st.setTimestamp(startIndex, Timestamp.valueOf(value), utc());
     }
 }

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310LocalDateType.java
Patch:
@@ -36,12 +36,12 @@ public Class<LocalDate> getReturnedClass() {
     @Nullable
     @Override
     public LocalDate getValue(ResultSet rs, int startIndex) throws SQLException {
-        Date date = rs.getDate(startIndex, utc());
+        Date date = rs.getDate(startIndex);
         return date != null ? date.toLocalDate() : null;
     }
 
     @Override
     public void setValue(PreparedStatement st, int startIndex, LocalDate value) throws SQLException {
-        st.setDate(startIndex, Date.valueOf(value), utc());
+        st.setDate(startIndex, Date.valueOf(value));
     }
 }

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310LocalTimeType.java
Patch:
@@ -15,7 +15,6 @@
 @IgnoreJRERequirement //conditionally included
 public class JSR310LocalTimeType extends AbstractJSR310DateTimeType<LocalTime> {
 
-
     public JSR310LocalTimeType() {
         super(Types.TIME);
     }

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310OffsetDateTimeType.java
Patch:
@@ -39,11 +39,11 @@ public Class<OffsetDateTime> getReturnedClass() {
     @Override
     public OffsetDateTime getValue(ResultSet rs, int startIndex) throws SQLException {
         Timestamp timestamp = rs.getTimestamp(startIndex, utc());
-        return timestamp != null ? OffsetDateTime.ofInstant(timestamp.toInstant(), ZoneOffset.UTC) : null;
+        return timestamp != null ? OffsetDateTime.of(timestamp.toLocalDateTime(), ZoneOffset.UTC) : null;
     }
 
     @Override
     public void setValue(PreparedStatement st, int startIndex, OffsetDateTime value) throws SQLException {
-        st.setTimestamp(startIndex, Timestamp.from(value.toInstant()), utc());
+        st.setTimestamp(startIndex, Timestamp.valueOf(value.toLocalDateTime()), utc());
     }
 }

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310OffsetTimeType.java
Patch:
@@ -37,12 +37,12 @@ public Class<OffsetTime> getReturnedClass() {
     @Nullable
     @Override
     public OffsetTime getValue(ResultSet rs, int startIndex) throws SQLException {
-        Time time = rs.getTime(startIndex, utc());
+        Time time = rs.getTime(startIndex);
         return time != null ? OffsetTime.of(time.toLocalTime(), ZoneOffset.UTC) : null;
     }
 
     @Override
     public void setValue(PreparedStatement st, int startIndex, OffsetTime value) throws SQLException {
-        st.setTime(startIndex, Time.valueOf(value.toLocalTime()), utc());
+        st.setTime(startIndex, Time.valueOf(value.toLocalTime()));
     }
 }

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310ZonedDateTimeType.java
Patch:
@@ -16,9 +16,8 @@
 @IgnoreJRERequirement //conditionally included
 public class JSR310ZonedDateTimeType extends AbstractJSR310DateTimeType<ZonedDateTime> {
 
-
     public JSR310ZonedDateTimeType() {
-        super(Types.TIMESTAMP);
+        super(Types.TIMESTAMP_WITH_TIMEZONE);
     }
 
     public JSR310ZonedDateTimeType(int type) {

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310InstantType.java
Patch:
@@ -2,6 +2,8 @@
 
 import java.sql.*;
 import java.time.Instant;
+import java.time.LocalDateTime;
+import java.time.ZoneId;
 
 import javax.annotation.Nullable;
 
@@ -25,7 +27,7 @@ public JSR310InstantType(int type) {
 
     @Override
     public String getLiteral(Instant value) {
-        return dateTimeFormatter.format(value);
+        return dateTimeFormatter.format(LocalDateTime.ofInstant(value, ZoneId.of("Z")));
     }
 
     @Override

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310LocalDateTimeType.java
Patch:
@@ -38,7 +38,7 @@ public Class<LocalDateTime> getReturnedClass() {
     @Override
     public LocalDateTime getValue(ResultSet rs, int startIndex) throws SQLException {
         Timestamp timestamp = rs.getTimestamp(startIndex, utc());
-        return timestamp != null ? LocalDateTime.from(timestamp.toInstant()) : null;
+        return timestamp != null ? timestamp.toLocalDateTime() : null;
     }
 
     @Override

File: querydsl-sql/src/test/java/com/querydsl/sql/types/JSR310LocalTimeTypeTest.java
Patch:
@@ -41,6 +41,6 @@ public void Get() throws SQLException {
         EasyMock.verify(resultSet);
 
         assertNotNull(result);
-        assertTrue(result.toSecondOfDay() == 0);
+        assertTrue(result.getSecond() == 0);
     }
 }

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310InstantType.java
Patch:
@@ -42,6 +42,6 @@ public Instant getValue(ResultSet rs, int startIndex) throws SQLException {
 
     @Override
     public void setValue(PreparedStatement st, int startIndex, Instant value) throws SQLException {
-        st.setTimestamp(startIndex, new Timestamp(value.toEpochMilli()), utc());
+        st.setTimestamp(startIndex, Timestamp.from(value), utc());
     }
 }

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310LocalDateTimeType.java
Patch:
@@ -43,6 +43,6 @@ public LocalDateTime getValue(ResultSet rs, int startIndex) throws SQLException
 
     @Override
     public void setValue(PreparedStatement st, int startIndex, LocalDateTime value) throws SQLException {
-        st.setTimestamp(startIndex, new Timestamp(value.toInstant(ZoneOffset.UTC).toEpochMilli()), utc());
+        st.setTimestamp(startIndex, Timestamp.from(value.toInstant(ZoneOffset.UTC)), utc());
     }
 }

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310LocalTimeType.java
Patch:
@@ -38,7 +38,7 @@ public Class<LocalTime> getReturnedClass() {
     @Override
     public LocalTime getValue(ResultSet rs, int startIndex) throws SQLException {
         Time time = rs.getTime(startIndex, utc());
-        return time != null ? LocalTime.from(time.toInstant()) : null;
+        return time != null ? time.toLocalTime() : null;
     }
 
     @Override

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310OffsetDateTimeType.java
Patch:
@@ -44,6 +44,6 @@ public OffsetDateTime getValue(ResultSet rs, int startIndex) throws SQLException
 
     @Override
     public void setValue(PreparedStatement st, int startIndex, OffsetDateTime value) throws SQLException {
-        st.setTimestamp(startIndex, new Timestamp(value.toInstant().toEpochMilli()), utc());
+        st.setTimestamp(startIndex, Timestamp.from(value.toInstant()), utc());
     }
 }

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310OffsetTimeType.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.sql.*;
 import java.time.OffsetTime;
+import java.time.ZoneOffset;
 
 import javax.annotation.Nullable;
 
@@ -37,7 +38,7 @@ public Class<OffsetTime> getReturnedClass() {
     @Override
     public OffsetTime getValue(ResultSet rs, int startIndex) throws SQLException {
         Time time = rs.getTime(startIndex, utc());
-        return time != null ? OffsetTime.from(time.toInstant()) : null;
+        return time != null ? OffsetTime.of(time.toLocalTime(), ZoneOffset.UTC) : null;
     }
 
     @Override

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310ZonedDateTimeType.java
Patch:
@@ -44,6 +44,6 @@ public ZonedDateTime getValue(ResultSet rs, int startIndex) throws SQLException
 
     @Override
     public void setValue(PreparedStatement st, int startIndex, ZonedDateTime value) throws SQLException {
-        st.setTimestamp(startIndex, new Timestamp(value.toInstant().toEpochMilli()), utc());
+        st.setTimestamp(startIndex, Timestamp.from(value.toInstant()), utc());
     }
 }

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310InstantType.java
Patch:
@@ -8,7 +8,8 @@
 import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
 
 /**
- * JSR310InstantType maps java.time.Instant to Date on the JDBC level
+ * JSR310InstantType maps {@linkplain java.time.Instant} to
+ * {@linkplain java.sql.Timestamp} on the JDBC level
  *
  */
 @IgnoreJRERequirement //conditionally included

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310LocalDateTimeType.java
Patch:
@@ -8,7 +8,8 @@
 import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
 
 /**
- * JSR310LocalDateTimeType maps java.time.LocalDateTime to Date on the JDBC level
+ * JSR310LocalDateTimeType maps {@linkplain java.time.LocalDateTime}
+ * to {@linkplain java.sql.Timestamp} on the JDBC level
  *
  */
 @IgnoreJRERequirement //conditionally included

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310LocalDateType.java
Patch:
@@ -8,7 +8,8 @@
 import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
 
 /**
- * JSR310LocalDateType maps java.time.LocalDate to Date on the JDBC level
+ * JSR310LocalDateType maps {@linkplain java.time.LocalDate}
+ * to {@linkplain java.sql.Date} on the JDBC level
  *
  */
 @IgnoreJRERequirement //conditionally included

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310LocalTimeType.java
Patch:
@@ -8,7 +8,8 @@
 import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
 
 /**
- * JSR310LocalTimeType maps java.time.LocalTime to Date on the JDBC level
+ * JSR310LocalTimeType maps {@linkplain java.time.LocalTime}
+ * to {@linkplain java.sql.Time} on the JDBC level
  *
  */
 @IgnoreJRERequirement //conditionally included

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310OffsetDateTimeType.java
Patch:
@@ -9,7 +9,8 @@
 import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
 
 /**
- * JSR310OffsetDateTimeType maps java.time.OffsetDateTime to Date on the JDBC level
+ * JSR310OffsetDateTimeType maps {@linkplain java.time.OffsetDateTime}
+ * to {@linkplain java.sql.Timestamp} on the JDBC level
  *
  */
 @IgnoreJRERequirement //conditionally included

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310OffsetTimeType.java
Patch:
@@ -8,7 +8,8 @@
 import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
 
 /**
- * JSR310OffsetTimeType maps java.time.OffsetTime to Date on the JDBC level
+ * JSR310OffsetTimeType maps {@linkplain java.time.OffsetTime}
+ * to {@linkplain java.sql.Time} on the JDBC level
  *
  */
 @IgnoreJRERequirement //conditionally included

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310ZonedDateTimeType.java
Patch:
@@ -9,7 +9,8 @@
 import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
 
 /**
- * JSR310ZonedDateTimeType maps java.time.ZonedDateTime to Date on the JDBC level
+ * JSR310ZonedDateTimeType maps {@linkplain java.time.ZonedDateTime}
+ * to {@linkplain java.sql.Timestamp} on the JDBC level
  *
  */
 @IgnoreJRERequirement //conditionally included

File: querydsl-sql/src/main/java/com/querydsl/sql/types/AbstractJSR310DateTimeType.java
Patch:
@@ -1,6 +1,7 @@
 package com.querydsl.sql.types;
 
 import java.time.format.DateTimeFormatter;
+import java.time.temporal.Temporal;
 import java.util.Calendar;
 import java.util.TimeZone;
 
@@ -12,7 +13,7 @@
  * @param <T>
  */
 @IgnoreJRERequirement //conditionally included
-public abstract  class AbstractJSR310DateTimeType<T> extends AbstractType<T> {
+public abstract class AbstractJSR310DateTimeType<T extends Temporal> extends AbstractType<T> {
 
     private static final Calendar UTC = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
 

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310LocalTimeType.java
Patch:
@@ -42,6 +42,6 @@ public LocalTime getValue(ResultSet rs, int startIndex) throws SQLException {
 
     @Override
     public void setValue(PreparedStatement st, int startIndex, LocalTime value) throws SQLException {
-        st.setTime(startIndex, new Time(value.toNanoOfDay() / 1000000), utc());
+        st.setTime(startIndex, Time.valueOf(value), utc());
     }
 }

File: querydsl-sql/src/main/java/com/querydsl/sql/types/AbstractJSR310DateTimeType.java
Patch:
@@ -1,15 +1,17 @@
 package com.querydsl.sql.types;
 
-
 import java.time.format.DateTimeFormatter;
 import java.util.Calendar;
 import java.util.TimeZone;
 
+import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
+
 /**
  * Common abstract superclass for Type implementations for Java Time API (JSR310)
  *
  * @param <T>
  */
+@IgnoreJRERequirement //conditionally included
 public abstract  class AbstractJSR310DateTimeType<T> extends AbstractType<T> {
 
     private static final Calendar UTC = Calendar.getInstance(TimeZone.getTimeZone("UTC"));

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310InstantType.java
Patch:
@@ -20,7 +20,7 @@ public JSR310InstantType(int type) {
 
     @Override
     public String getLiteral(Instant value) {
-        return dateFormatter.format(value);
+        return dateTimeFormatter.format(value);
     }
 
     @Override

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310LocalDateTimeType.java
Patch:
@@ -21,7 +21,7 @@ public JSR310LocalDateTimeType(int type) {
 
     @Override
     public String getLiteral(LocalDateTime value) {
-        return dateFormatter.format(value);
+        return dateTimeFormatter.format(value);
     }
 
     @Override

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310LocalTimeType.java
Patch:
@@ -21,7 +21,7 @@ public JSR310LocalTimeType(int type) {
 
     @Override
     public String getLiteral(LocalTime value) {
-        return dateFormatter.format(value);
+        return timeFormatter.format(value);
     }
 
     @Override

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310OffsetDateTimeType.java
Patch:
@@ -21,7 +21,7 @@ public JSR310OffsetDateTimeType(int type) {
 
     @Override
     public String getLiteral(OffsetDateTime value) {
-        return dateFormatter.format(value);
+        return dateTimeFormatter.format(value);
     }
 
     @Override

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310OffsetTimeType.java
Patch:
@@ -20,7 +20,7 @@ public JSR310OffsetTimeType(int type) {
 
     @Override
     public String getLiteral(OffsetTime value) {
-        return dateFormatter.format(value);
+        return timeFormatter.format(value);
     }
 
     @Override

File: querydsl-sql/src/main/java/com/querydsl/sql/types/JSR310ZonedDateTimeType.java
Patch:
@@ -21,7 +21,7 @@ public JSR310ZonedDateTimeType(int type) {
 
     @Override
     public String getLiteral(ZonedDateTime value) {
-        return dateFormatter.format(value);
+        return dateTimeFormatter.format(value);
     }
 
     @Override

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/SimpleTypes.java
Patch:
@@ -64,4 +64,6 @@ public class SimpleTypes {
 
 //    @Temporal(TemporalType.TIMESTAMP)
     java.sql.Timestamp timestamp;
+
+    byte[] byteArray;
 }

File: querydsl-sql/src/test/java/com/querydsl/sql/SelectBase.java
Patch:
@@ -367,7 +367,7 @@ public void Count_All() {
     public void Count_All_Oracle() {
         expectedQuery = "select count(*) rc from EMPLOYEE e";
         NumberPath<Long> rowCount = Expressions.numberPath(Long.class, "rc");
-        assertEquals(0, query().from(employee).select(Wildcard.count.as(rowCount)).fetchOne().intValue());
+        assertEquals(10, query().from(employee).select(Wildcard.count.as(rowCount)).fetchOne().intValue());
     }
 
     @Test

File: querydsl-sql/src/test/java/com/querydsl/sql/SelectOracleBase.java
Patch:
@@ -130,8 +130,8 @@ public void SumOver() throws SQLException {
 //        9  from emp
 //       10  order by deptno, sal;
         expectedQuery = "select e.LASTNAME, e.SALARY, " +
-            "sum(e.SALARY) over (partition by e.SUPERIOR_ID order by e.LASTNAME, e.SALARY), " +
-            "sum(e.SALARY) over (order by e.SUPERIOR_ID, e.SALARY), " +
+            "sum(e.SALARY) over (partition by e.SUPERIOR_ID order by e.LASTNAME asc, e.SALARY asc), " +
+            "sum(e.SALARY) over (order by e.SUPERIOR_ID asc, e.SALARY asc), " +
             "sum(e.SALARY) over () from EMPLOYEE e order by e.SALARY asc, e.SUPERIOR_ID asc";
 
         oracleQuery().from(employee)

File: querydsl-sql/src/test/java/com/querydsl/sql/SelectBase.java
Patch:
@@ -367,7 +367,7 @@ public void Count_All() {
     public void Count_All_Oracle() {
         expectedQuery = "select count(*) rc from EMPLOYEE e";
         NumberPath<Long> rowCount = Expressions.numberPath(Long.class, "rc");
-        assertEquals(0, query().from(employee).select(Wildcard.count.as(rowCount)).fetchOne().intValue());
+        assertEquals(10, query().from(employee).select(Wildcard.count.as(rowCount)).fetchOne().intValue());
     }
 
     @Test

File: querydsl-sql/src/test/java/com/querydsl/sql/SelectOracleBase.java
Patch:
@@ -130,8 +130,8 @@ public void SumOver() throws SQLException {
 //        9  from emp
 //       10  order by deptno, sal;
         expectedQuery = "select e.LASTNAME, e.SALARY, " +
-            "sum(e.SALARY) over (partition by e.SUPERIOR_ID order by e.LASTNAME, e.SALARY), " +
-            "sum(e.SALARY) over (order by e.SUPERIOR_ID, e.SALARY), " +
+            "sum(e.SALARY) over (partition by e.SUPERIOR_ID order by e.LASTNAME asc, e.SALARY asc), " +
+            "sum(e.SALARY) over (order by e.SUPERIOR_ID asc, e.SALARY asc), " +
             "sum(e.SALARY) over () from EMPLOYEE e order by e.SALARY asc, e.SUPERIOR_ID asc";
 
         oracleQuery().from(employee)

File: querydsl-core/src/main/java/com/querydsl/core/QueryMetadata.java
Patch:
@@ -147,7 +147,7 @@ public interface QueryMetadata extends Serializable {
     /**
      * Get the parameter bindings
      *
-     * @return parameteter bindings
+     * @return parameter bindings
      */
     Map<ParamExpression<?>,Object> getParams();
 
@@ -187,7 +187,7 @@ public interface QueryMetadata extends Serializable {
     void setDistinct(boolean distinct);
 
     /**
-     * Set the maxmium amount of rows
+     * Set the maximum number of rows
      *
      * @param limit limit
      */
@@ -201,7 +201,7 @@ public interface QueryMetadata extends Serializable {
     void setModifiers(QueryModifiers restriction);
 
     /**
-     * Set the amount of skipped rows
+     * Set the number of skipped rows
      *
      * @param offset offset
      */

File: querydsl-core/src/main/java/com/querydsl/core/alias/Alias.java
Patch:
@@ -36,7 +36,7 @@
  * <p>Example:</p>
  *
  * <pre>{@code
- * Empoyee e = alias(Employee.class, "e");
+ * Employee e = alias(Employee.class, "e");
  * for (String name : query.from($(e),employees)
  *     .where($(e.getDepartment().getId()).eq(1001))
  *     .list($(e.getName()))) {
@@ -422,7 +422,7 @@ public static <D extends Number & Comparable<D>> NumberPath<D> var(D arg) {
     }
 
     /**
-     * Create a new varibale path
+     * Create a new variable path
      *
      * @param arg alias
      * @param <D>

File: querydsl-core/src/main/java/com/querydsl/core/alias/AliasFactory.java
Patch:
@@ -102,7 +102,7 @@ public <A> A createAliasForProperty(Class<A> cl, Expression<?> path) {
      *
      * @param <A>
      * @param cl type for alias
-     * @param var variable name for the underyling expression
+     * @param var variable name for the underlying expression
      * @return alias instance
      */
     @SuppressWarnings("unchecked")

File: querydsl-core/src/main/java/com/querydsl/core/alias/MethodType.java
Patch:
@@ -59,7 +59,7 @@ public enum MethodType {
      */
     TO_STRING("toString",String.class, Object.class),
     /**
-     * Scala getter inovication
+     * Scala getter invocation
      */
     SCALA_GETTER(".+", Object.class, Object.class),
     /**

File: querydsl-core/src/main/java/com/querydsl/core/group/GroupBy.java
Patch:
@@ -51,7 +51,7 @@ public static <K> GroupByBuilder<K> groupBy(Expression<K> key) {
     /**
      * Create a new GroupByBuilder for the given key expressions
      *
-     * @param keys keys for aggreation
+     * @param keys keys for aggregation
      * @return builder for further specification
      */
     public static GroupByBuilder<List<?>> groupBy(Expression<?>... keys) {

File: querydsl-core/src/main/java/com/querydsl/core/types/QBean.java
Patch:
@@ -40,7 +40,7 @@
  * List<EmployeeInfo> result = query.from(employee)
  *      .where(employee.valid.eq(true))
  *      .select(Projections.bean(EmployeeInfo.class, employee.firstName, employee.lastName))
- *      .fech();
+ *      .fetch();
  * }
  * </pre>
  *

File: querydsl-core/src/main/java/com/querydsl/core/types/Visitor.java
Patch:
@@ -24,7 +24,7 @@
 public interface Visitor<R, C> {
 
     /**
-     * Visit a Contant instance with the given context
+     * Visit a Constant instance with the given context
      *
      * @param expr expression to visit
      * @param context context of the visit or null, if not used
@@ -42,7 +42,7 @@ public interface Visitor<R, C> {
     R visit(FactoryExpression<?> expr, C context);
 
     /**
-     * Vist a Operation instance with the given context
+     * Visit an Operation instance with the given context
      *
      * @param expr expression to visit
      * @param context context of the visit or null, if not used

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/BeanPath.java
Patch:
@@ -262,7 +262,7 @@ protected <A, E extends SimpleExpression<? super A>> SetPath<A, E> createSet(Str
     }
 
     /**
-     * Create a new Simpe path
+     * Create a new Simple path
      *
      * @param <A>
      * @param property property name

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/CaseForEqBuilder.java
Patch:
@@ -182,7 +182,7 @@ public Q otherwise(T otherwise) {
      * Intermediate step
      *
      * @param <T> Result type
-     * @param <Q> Parent expreession type
+     * @param <Q> Parent expression type
      */
     public class CaseWhen<T, Q extends Expression<T>> {
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/CollectionExpressionBase.java
Patch:
@@ -104,7 +104,7 @@ public final BooleanExpression isNotEmpty() {
     /**
      * Create a {@code this.size()} expression
      *
-     * <p>Gets the amounnt of elements in this collection</p>
+     * <p>Gets the number of elements in this collection</p>
      *
      * @return this.size()
      */

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/ComparableExpressionBase.java
Patch:
@@ -67,7 +67,7 @@ public final Coalesce<T> coalesce(Expression<?>...exprs) {
     /**
      * Create a {@code coalesce(this, args...)} expression
      *
-     * @param args additonal arguments
+     * @param args additional arguments
      * @return coalesce
      */
     public final Coalesce<T> coalesce(T... args) {

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/SimpleExpression.java
Patch:
@@ -161,7 +161,7 @@ public BooleanExpression eqAny(CollectionExpression<?, ? super T> right) {
     }
 
     /**
-     * Create a {@code this == all right} expresion
+     * Create a {@code this == all right} expression
      *
      * @param right
      * @return this == all right

File: querydsl-jpa/src/main/java/com/querydsl/jpa/Conversions.java
Patch:
@@ -63,16 +63,16 @@ private static boolean isEntityPathAndNeedsWrapping(Expression<?> expr) {
         return false;
     }
 
-    private static <RT> FactoryExpression<RT> createEntityPathConversions(FactoryExpression<RT> factorye) {
+    private static <RT> FactoryExpression<RT> createEntityPathConversions(FactoryExpression<RT> factoryExpr) {
         List<Expression<?>> conversions = Lists.newArrayList();
-        for (Expression<?> e : factorye.getArgs()) {
+        for (Expression<?> e : factoryExpr.getArgs()) {
             if (isEntityPathAndNeedsWrapping(e)) {
                 conversions.add(ExpressionUtils.operation(e.getType(), SQLOps.ALL, e));
             } else {
                 conversions.add(e);
             }
         }
-        return FactoryExpressionUtils.wrap(factorye, conversions);
+        return FactoryExpressionUtils.wrap(factoryExpr, conversions);
     }
 
     public static <RT> Expression<RT> convertForNativeQuery(Expression<RT> expr) {

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPAExpressions.java
Patch:
@@ -74,7 +74,7 @@ public static JPQLQuery<Tuple> selectDistinct(Expression<?>... exprs) {
     }
 
     /**
-     * Create a new detached JPQLQuery instacne with the projection zero
+     * Create a new detached JPQLQuery instance with the projection zero
      *
      * @return select(0)
      */
@@ -83,7 +83,7 @@ public static JPQLQuery<Integer> selectZero() {
     }
 
     /**
-     * Create a new detached JPQLQuery instacne with the projection one
+     * Create a new detached JPQLQuery instance with the projection one
      *
      * @return select(1)
      */

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPQLQuery.java
Patch:
@@ -233,7 +233,7 @@ public interface JPQLQuery<T> extends FetchableQuery<T, JPQLQuery<T>>, Query<JPQ
      * Use fetchJoin() to add the fetchJoin parameter to this join.
      *
      * @param <P>
-     * @param target targt
+     * @param target target
      * @return the current object
      */
     <P> JPQLQuery<T> rightJoin(EntityPath<P> target);

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/JPAQuery.java
Patch:
@@ -72,7 +72,7 @@ public JPAQuery(EntityManager em, JPQLTemplates templates) {
      * Creates a new query
      *
      * @param em entity manager
-     * @param templates temoplates
+     * @param templates templates
      * @param metadata query metadata
      */
     public JPAQuery(EntityManager em, JPQLTemplates templates, QueryMetadata metadata) {

File: querydsl-spatial/src/main/java/com/querydsl/spatial/GeometryExpression.java
Patch:
@@ -274,7 +274,7 @@ public BooleanExpression crosses(Expression<? extends Geometry> geometry) {
     /**
      * Returns 1 (TRUE) if this geometric object is “spatially within” anotherGeometry.
      *
-     * @param geometry other goemetry
+     * @param geometry other geometry
      * @return true, if within
      */
     public BooleanExpression within(Geometry geometry) {
@@ -496,7 +496,7 @@ public GeometryExpression<Geometry> difference(Expression<? extends Geometry> ge
      * Point set symmetric difference of this geometric object with anotherGeometry.
      *
      * @param geometry other geometry
-     * @return symmetric difference between this and the other goemetry
+     * @return symmetric difference between this and the other geometry
      */
     public GeometryExpression<Geometry> symDifference(Geometry geometry) {
         return symDifference(ConstantImpl.create(geometry));

File: querydsl-spatial/src/main/java/com/querydsl/spatial/LineStringExpression.java
Patch:
@@ -57,7 +57,7 @@ public NumberExpression<Integer> numPoints() {
     /**
      * Returns the specified Point N in this LineString.
      *
-     * @param idx one basedindex of element
+     * @param idx one-based index of element
      * @return matched element
      */
     public PointExpression<Point> pointN(int idx) {

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/ant/AntMetaDataExporter.java
Patch:
@@ -126,7 +126,7 @@ public class AntMetaDataExporter extends Task {
     private boolean exportBeans;
 
     /**
-     * additional bean inerfaces
+     * additional bean interfaces
      */
     private String[] beanInterfaces;
 

File: querydsl-sql/src/main/java/com/querydsl/sql/Configuration.java
Patch:
@@ -202,7 +202,7 @@ public SchemaAndTable getOverride(SchemaAndTable key) {
      *
      * @param key schema and table
      * @param column column
-     * @return overriden column
+     * @return overridden column
      */
     public String getColumnOverride(SchemaAndTable key, String column) {
         return nameMapping.getColumnOverride(key, column);

File: querydsl-sql/src/main/java/com/querydsl/sql/ProjectableSQLQuery.java
Patch:
@@ -316,7 +316,7 @@ public <RT> Union<RT> union(List<SubQueryExpression<RT>> sq) {
      *
      * @param <RT>
      * @param alias alias for union
-     * @param sq subqueryies
+     * @param sq subqueries
      * @return the current object
      */
     public <RT> Q union(Path<?> alias, SubQueryExpression<RT>... sq) {

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLQueryFactory.java
Patch:
@@ -70,7 +70,7 @@ public SQLQuery<?> query() {
     /**
      * Create a new SQLQuery instance with the given projection
      *
-     * @param expr projetion
+     * @param expr projection
      * @param <T>
      * @return select(expr)
      */
@@ -130,7 +130,7 @@ public SQLQuery<Integer> selectOne() {
     /**
      * Create a new detached SQLQuery instance with the given projection and source
      *
-     * @param expr query source andd projection
+     * @param expr query source and projection
      * @param <T>
      * @return select(expr).from(expr)
      */

File: querydsl-sql/src/main/java/com/querydsl/sql/WithinGroup.java
Patch:
@@ -26,7 +26,7 @@
 import com.querydsl.core.types.dsl.SimpleOperation;
 
 /**
- * {@code WithinGroup} is a builder for {@code WIHIN GROUP} constructs
+ * {@code WithinGroup} is a builder for {@code WITHIN GROUP} constructs
  *
  * @param <T> expression type
  *

File: querydsl-core/src/main/java/com/querydsl/core/QueryMetadata.java
Patch:
@@ -147,7 +147,7 @@ public interface QueryMetadata extends Serializable {
     /**
      * Get the parameter bindings
      *
-     * @return parameteter bindings
+     * @return parameter bindings
      */
     Map<ParamExpression<?>,Object> getParams();
 
@@ -187,7 +187,7 @@ public interface QueryMetadata extends Serializable {
     void setDistinct(boolean distinct);
 
     /**
-     * Set the maxmium amount of rows
+     * Set the maximum number of rows
      *
      * @param limit limit
      */
@@ -201,7 +201,7 @@ public interface QueryMetadata extends Serializable {
     void setModifiers(QueryModifiers restriction);
 
     /**
-     * Set the amount of skipped rows
+     * Set the number of skipped rows
      *
      * @param offset offset
      */

File: querydsl-core/src/main/java/com/querydsl/core/alias/Alias.java
Patch:
@@ -36,7 +36,7 @@
  * <p>Example:</p>
  *
  * <pre>{@code
- * Empoyee e = alias(Employee.class, "e");
+ * Employee e = alias(Employee.class, "e");
  * for (String name : query.from($(e),employees)
  *     .where($(e.getDepartment().getId()).eq(1001))
  *     .list($(e.getName()))) {
@@ -422,7 +422,7 @@ public static <D extends Number & Comparable<D>> NumberPath<D> var(D arg) {
     }
 
     /**
-     * Create a new varibale path
+     * Create a new variable path
      *
      * @param arg alias
      * @param <D>

File: querydsl-core/src/main/java/com/querydsl/core/alias/AliasFactory.java
Patch:
@@ -102,7 +102,7 @@ public <A> A createAliasForProperty(Class<A> cl, Expression<?> path) {
      *
      * @param <A>
      * @param cl type for alias
-     * @param var variable name for the underyling expression
+     * @param var variable name for the underlying expression
      * @return alias instance
      */
     @SuppressWarnings("unchecked")

File: querydsl-core/src/main/java/com/querydsl/core/alias/MethodType.java
Patch:
@@ -59,7 +59,7 @@ public enum MethodType {
      */
     TO_STRING("toString",String.class, Object.class),
     /**
-     * Scala getter inovication
+     * Scala getter invocation
      */
     SCALA_GETTER(".+", Object.class, Object.class),
     /**

File: querydsl-core/src/main/java/com/querydsl/core/group/GroupBy.java
Patch:
@@ -51,7 +51,7 @@ public static <K> GroupByBuilder<K> groupBy(Expression<K> key) {
     /**
      * Create a new GroupByBuilder for the given key expressions
      *
-     * @param keys keys for aggreation
+     * @param keys keys for aggregation
      * @return builder for further specification
      */
     public static GroupByBuilder<List<?>> groupBy(Expression<?>... keys) {

File: querydsl-core/src/main/java/com/querydsl/core/types/QBean.java
Patch:
@@ -40,7 +40,7 @@
  * List<EmployeeInfo> result = query.from(employee)
  *      .where(employee.valid.eq(true))
  *      .select(Projections.bean(EmployeeInfo.class, employee.firstName, employee.lastName))
- *      .fech();
+ *      .fetch();
  * }
  * </pre>
  *

File: querydsl-core/src/main/java/com/querydsl/core/types/Visitor.java
Patch:
@@ -24,7 +24,7 @@
 public interface Visitor<R, C> {
 
     /**
-     * Visit a Contant instance with the given context
+     * Visit a Constant instance with the given context
      *
      * @param expr expression to visit
      * @param context context of the visit or null, if not used
@@ -42,7 +42,7 @@ public interface Visitor<R, C> {
     R visit(FactoryExpression<?> expr, C context);
 
     /**
-     * Vist a Operation instance with the given context
+     * Visit an Operation instance with the given context
      *
      * @param expr expression to visit
      * @param context context of the visit or null, if not used

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/BeanPath.java
Patch:
@@ -262,7 +262,7 @@ protected <A, E extends SimpleExpression<? super A>> SetPath<A, E> createSet(Str
     }
 
     /**
-     * Create a new Simpe path
+     * Create a new Simple path
      *
      * @param <A>
      * @param property property name

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/CaseForEqBuilder.java
Patch:
@@ -182,7 +182,7 @@ public Q otherwise(T otherwise) {
      * Intermediate step
      *
      * @param <T> Result type
-     * @param <Q> Parent expreession type
+     * @param <Q> Parent expression type
      */
     public class CaseWhen<T, Q extends Expression<T>> {
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/CollectionExpressionBase.java
Patch:
@@ -104,7 +104,7 @@ public final BooleanExpression isNotEmpty() {
     /**
      * Create a {@code this.size()} expression
      *
-     * <p>Gets the amounnt of elements in this collection</p>
+     * <p>Gets the number of elements in this collection</p>
      *
      * @return this.size()
      */

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/ComparableExpressionBase.java
Patch:
@@ -67,7 +67,7 @@ public final Coalesce<T> coalesce(Expression<?>...exprs) {
     /**
      * Create a {@code coalesce(this, args...)} expression
      *
-     * @param args additonal arguments
+     * @param args additional arguments
      * @return coalesce
      */
     public final Coalesce<T> coalesce(T... args) {

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/SimpleExpression.java
Patch:
@@ -161,7 +161,7 @@ public BooleanExpression eqAny(CollectionExpression<?, ? super T> right) {
     }
 
     /**
-     * Create a {@code this == all right} expresion
+     * Create a {@code this == all right} expression
      *
      * @param right
      * @return this == all right

File: querydsl-jpa/src/main/java/com/querydsl/jpa/Conversions.java
Patch:
@@ -63,16 +63,16 @@ private static boolean isEntityPathAndNeedsWrapping(Expression<?> expr) {
         return false;
     }
 
-    private static <RT> FactoryExpression<RT> createEntityPathConversions(FactoryExpression<RT> factorye) {
+    private static <RT> FactoryExpression<RT> createEntityPathConversions(FactoryExpression<RT> factoryExpr) {
         List<Expression<?>> conversions = Lists.newArrayList();
-        for (Expression<?> e : factorye.getArgs()) {
+        for (Expression<?> e : factoryExpr.getArgs()) {
             if (isEntityPathAndNeedsWrapping(e)) {
                 conversions.add(ExpressionUtils.operation(e.getType(), SQLOps.ALL, e));
             } else {
                 conversions.add(e);
             }
         }
-        return FactoryExpressionUtils.wrap(factorye, conversions);
+        return FactoryExpressionUtils.wrap(factoryExpr, conversions);
     }
 
     public static <RT> Expression<RT> convertForNativeQuery(Expression<RT> expr) {

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPAExpressions.java
Patch:
@@ -74,7 +74,7 @@ public static JPQLQuery<Tuple> selectDistinct(Expression<?>... exprs) {
     }
 
     /**
-     * Create a new detached JPQLQuery instacne with the projection zero
+     * Create a new detached JPQLQuery instance with the projection zero
      *
      * @return select(0)
      */
@@ -83,7 +83,7 @@ public static JPQLQuery<Integer> selectZero() {
     }
 
     /**
-     * Create a new detached JPQLQuery instacne with the projection one
+     * Create a new detached JPQLQuery instance with the projection one
      *
      * @return select(1)
      */

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPQLQuery.java
Patch:
@@ -233,7 +233,7 @@ public interface JPQLQuery<T> extends FetchableQuery<T, JPQLQuery<T>>, Query<JPQ
      * Use fetchJoin() to add the fetchJoin parameter to this join.
      *
      * @param <P>
-     * @param target targt
+     * @param target target
      * @return the current object
      */
     <P> JPQLQuery<T> rightJoin(EntityPath<P> target);

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/JPAQuery.java
Patch:
@@ -72,7 +72,7 @@ public JPAQuery(EntityManager em, JPQLTemplates templates) {
      * Creates a new query
      *
      * @param em entity manager
-     * @param templates temoplates
+     * @param templates templates
      * @param metadata query metadata
      */
     public JPAQuery(EntityManager em, JPQLTemplates templates, QueryMetadata metadata) {

File: querydsl-spatial/src/main/java/com/querydsl/spatial/GeometryExpression.java
Patch:
@@ -274,7 +274,7 @@ public BooleanExpression crosses(Expression<? extends Geometry> geometry) {
     /**
      * Returns 1 (TRUE) if this geometric object is “spatially within” anotherGeometry.
      *
-     * @param geometry other goemetry
+     * @param geometry other geometry
      * @return true, if within
      */
     public BooleanExpression within(Geometry geometry) {
@@ -496,7 +496,7 @@ public GeometryExpression<Geometry> difference(Expression<? extends Geometry> ge
      * Point set symmetric difference of this geometric object with anotherGeometry.
      *
      * @param geometry other geometry
-     * @return symmetric difference between this and the other goemetry
+     * @return symmetric difference between this and the other geometry
      */
     public GeometryExpression<Geometry> symDifference(Geometry geometry) {
         return symDifference(ConstantImpl.create(geometry));

File: querydsl-spatial/src/main/java/com/querydsl/spatial/LineStringExpression.java
Patch:
@@ -57,7 +57,7 @@ public NumberExpression<Integer> numPoints() {
     /**
      * Returns the specified Point N in this LineString.
      *
-     * @param idx one basedindex of element
+     * @param idx one-based index of element
      * @return matched element
      */
     public PointExpression<Point> pointN(int idx) {

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/ant/AntMetaDataExporter.java
Patch:
@@ -126,7 +126,7 @@ public class AntMetaDataExporter extends Task {
     private boolean exportBeans;
 
     /**
-     * additional bean inerfaces
+     * additional bean interfaces
      */
     private String[] beanInterfaces;
 

File: querydsl-sql/src/main/java/com/querydsl/sql/Configuration.java
Patch:
@@ -202,7 +202,7 @@ public SchemaAndTable getOverride(SchemaAndTable key) {
      *
      * @param key schema and table
      * @param column column
-     * @return overriden column
+     * @return overridden column
      */
     public String getColumnOverride(SchemaAndTable key, String column) {
         return nameMapping.getColumnOverride(key, column);

File: querydsl-sql/src/main/java/com/querydsl/sql/ProjectableSQLQuery.java
Patch:
@@ -316,7 +316,7 @@ public <RT> Union<RT> union(List<SubQueryExpression<RT>> sq) {
      *
      * @param <RT>
      * @param alias alias for union
-     * @param sq subqueryies
+     * @param sq subqueries
      * @return the current object
      */
     public <RT> Q union(Path<?> alias, SubQueryExpression<RT>... sq) {

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLQueryFactory.java
Patch:
@@ -70,7 +70,7 @@ public SQLQuery<?> query() {
     /**
      * Create a new SQLQuery instance with the given projection
      *
-     * @param expr projetion
+     * @param expr projection
      * @param <T>
      * @return select(expr)
      */
@@ -130,7 +130,7 @@ public SQLQuery<Integer> selectOne() {
     /**
      * Create a new detached SQLQuery instance with the given projection and source
      *
-     * @param expr query source andd projection
+     * @param expr query source and projection
      * @param <T>
      * @return select(expr).from(expr)
      */

File: querydsl-sql/src/main/java/com/querydsl/sql/WithinGroup.java
Patch:
@@ -26,7 +26,7 @@
 import com.querydsl.core.types.dsl.SimpleOperation;
 
 /**
- * {@code WithinGroup} is a builder for {@code WIHIN GROUP} constructs
+ * {@code WithinGroup} is a builder for {@code WITHIN GROUP} constructs
  *
  * @param <T> expression type
  *

File: querydsl-mongodb/src/main/java/com/querydsl/mongodb/MongodbSerializer.java
Patch:
@@ -326,7 +326,8 @@ public String visit(Path<?> expr, Void context) {
         if (metadata.getParent() != null) {
             if (metadata.getPathType() == PathType.COLLECTION_ANY) {
                 return visit(metadata.getParent(), context);
-            } else if (metadata.getParent().getMetadata().getPathType() != PathType.VARIABLE) {
+            } else if (metadata.getParent().getMetadata().getPathType() != PathType.VARIABLE
+                    && metadata.getParent().getMetadata().getPathType() != PathType.DELEGATE) {
                 String rv = getKeyForPath(expr, metadata);
                 return visit(metadata.getParent(), context) + "." + rv;
             }

File: querydsl-mongodb/src/main/java/com/querydsl/mongodb/MongodbSerializer.java
Patch:
@@ -326,7 +326,8 @@ public String visit(Path<?> expr, Void context) {
         if (metadata.getParent() != null) {
             if (metadata.getPathType() == PathType.COLLECTION_ANY) {
                 return visit(metadata.getParent(), context);
-            } else if (metadata.getParent().getMetadata().getPathType() != PathType.VARIABLE) {
+            } else if (metadata.getParent().getMetadata().getPathType() != PathType.VARIABLE
+                    && metadata.getParent().getMetadata().getPathType() != PathType.DELEGATE) {
                 String rv = getKeyForPath(expr, metadata);
                 return visit(metadata.getParent(), context) + "." + rv;
             }

File: querydsl-lucene5/src/main/java/com/querydsl/lucene5/TypedQuery.java
Patch:
@@ -26,6 +26,8 @@
  * transformer
  * </p>
  *
+ * @param <T> result type
+ *
  * @author laim
  * @author tiwe
  */

File: querydsl-apt/src/main/java/com/querydsl/apt/AbstractQuerydslProcessor.java
Patch:
@@ -173,12 +173,12 @@ private void addExternalParents(EntityType entityType) {
             Type superType = superTypes.pop();
             if (!context.allTypes.containsKey(superType.getFullName())) {
                 TypeElement typeElement = processingEnv.getElementUtils().getTypeElement(superType.getFullName());
-                if (conf.isStrictMode() && !TypeUtils.hasAnnotationOfType(typeElement, conf.getEntityAnnotations())) {
-                    continue;
-                }
                 if (typeElement == null) {
                     throw new IllegalStateException("Found no type for " + superType.getFullName());
                 }
+                if (conf.isStrictMode() && !TypeUtils.hasAnnotationOfType(typeElement, conf.getEntityAnnotations())) {
+                    continue;
+                }
                 EntityType superEntityType = elementHandler.handleEntityType(typeElement);
                 if (superEntityType.getSuperType() != null) {
                     superTypes.push(superEntityType.getSuperType().getType());

File: querydsl-apt/src/main/java/com/querydsl/apt/AbstractQuerydslProcessor.java
Patch:
@@ -173,12 +173,12 @@ private void addExternalParents(EntityType entityType) {
             Type superType = superTypes.pop();
             if (!context.allTypes.containsKey(superType.getFullName())) {
                 TypeElement typeElement = processingEnv.getElementUtils().getTypeElement(superType.getFullName());
-                if (conf.isStrictMode() && !TypeUtils.hasAnnotationOfType(typeElement, conf.getEntityAnnotations())) {
-                    continue;
-                }
                 if (typeElement == null) {
                     throw new IllegalStateException("Found no type for " + superType.getFullName());
                 }
+                if (conf.isStrictMode() && !TypeUtils.hasAnnotationOfType(typeElement, conf.getEntityAnnotations())) {
+                    continue;
+                }
                 EntityType superEntityType = elementHandler.handleEntityType(typeElement);
                 if (superEntityType.getSuperType() != null) {
                     superTypes.push(superEntityType.getSuperType().getType());

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/PathBuilderValidator.java
Patch:
@@ -13,6 +13,7 @@
  */
 package com.querydsl.core.types.dsl;
 
+import java.io.Serializable;
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.util.Collection;
@@ -25,7 +26,7 @@
 /**
  * {@code PathBuilderValidator} validates {@link PathBuilder} properties at creation time
  */
-public interface PathBuilderValidator {
+public interface PathBuilderValidator extends Serializable {
 
     /**
      * Validates the given property of given class

File: querydsl-core/src/test/java/com/querydsl/core/types/Concatenation.java
Patch:
@@ -20,7 +20,7 @@
  * @author tiwe
  *
  */
-public class Concatenation extends ExpressionBase<String> implements FactoryExpression<String> {
+public class Concatenation extends FactoryExpressionBase<String> {
 
     private static final long serialVersionUID = -355693583588722395L;
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/PathBuilderValidator.java
Patch:
@@ -13,6 +13,7 @@
  */
 package com.querydsl.core.types.dsl;
 
+import java.io.Serializable;
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.util.Collection;
@@ -25,7 +26,7 @@
 /**
  * {@code PathBuilderValidator} validates {@link PathBuilder} properties at creation time
  */
-public interface PathBuilderValidator {
+public interface PathBuilderValidator extends Serializable {
 
     /**
      * Validates the given property of given class

File: querydsl-core/src/test/java/com/querydsl/core/types/Concatenation.java
Patch:
@@ -20,7 +20,7 @@
  * @author tiwe
  *
  */
-public class Concatenation extends ExpressionBase<String> implements FactoryExpression<String> {
+public class Concatenation extends FactoryExpressionBase<String> {
 
     private static final long serialVersionUID = -355693583588722395L;
 

File: querydsl-collections/src/main/java/com/querydsl/collections/AbstractCollQuery.java
Patch:
@@ -27,8 +27,10 @@
 /**
  * {@code AbstractCollQuery} provides a base class for {@link Collection} query implementations.
  *
- * @see CollQuery
+ * @param <T> result type
+ * @param <Q> concrete subtype
  *
+ * @see CollQuery
  * @author tiwe
  */
 public abstract class AbstractCollQuery<T, Q extends AbstractCollQuery<T, Q>> extends FetchableQueryBase<T, Q>

File: querydsl-collections/src/main/java/com/querydsl/collections/CollQuery.java
Patch:
@@ -22,8 +22,9 @@
 /**
  * {@code CollQuery} is the default implementation of the {@link FetchableQuery} interface for collections
  *
- * @author tiwe
+ * @param <T> result type
  *
+ * @author tiwe
  */
 public class CollQuery<T> extends AbstractCollQuery<T, CollQuery<T>> implements Cloneable {
 

File: querydsl-collections/src/main/java/com/querydsl/collections/EvaluatorFunction.java
Patch:
@@ -19,6 +19,9 @@
 /**
  * Function implementation which uses an {@link Evaluator} for transformation
  *
+ * @param <S> source type
+ * @param <T> target type
+ *
  * @author tiwe
  */
 public class EvaluatorFunction<S, T> implements Function<S, T> {

File: querydsl-collections/src/main/java/com/querydsl/collections/MultiComparator.java
Patch:
@@ -22,9 +22,10 @@
 /**
  * {@code MultiComparator} compares arrays
  *
+ * @param <T> element type
+ *
  * @author tiwe
  */
-
 public class MultiComparator<T> implements Comparator<T>, Serializable {
 
     @SuppressWarnings("unchecked")

File: querydsl-core/src/main/java/com/querydsl/core/Fetchable.java
Patch:
@@ -21,6 +21,8 @@
  * {@code Fetchable} defines default projection methods for {@link Query} implementations.
  * All Querydsl query implementations should implement this interface.
  *
+ * @param <T> result type
+ *
  * @author tiwe
  */
 public interface Fetchable<T> {

File: querydsl-core/src/main/java/com/querydsl/core/JoinFlag.java
Patch:
@@ -26,11 +26,13 @@
  * <p>{@code JoinFlag} instances can be used in Querydsl modules which serialize queries to String form.</p>
  *
  * @author tiwe
- *
  */
 @Immutable
 public class JoinFlag implements Serializable {
 
+    /**
+     * The different {@code JoinFlag} positions
+     */
     public enum Position {
 
         /**

File: querydsl-core/src/main/java/com/querydsl/core/Query.java
Patch:
@@ -24,6 +24,8 @@
  *
  * @author tiwe
  * @see SimpleQuery
+ *
+ * @param <Q> concrete subtype
  */
 public interface Query<Q extends Query<Q>> extends SimpleQuery<Q> {
 

File: querydsl-core/src/main/java/com/querydsl/core/QueryFlag.java
Patch:
@@ -29,6 +29,9 @@ public class QueryFlag implements Serializable {
 
     private static final long serialVersionUID = -7131081607441961628L;
 
+    /**
+     * The different {@code QueryFlag} positions
+     */
     public enum Position {
 
         /**

File: querydsl-core/src/main/java/com/querydsl/core/QueryResults.java
Patch:
@@ -23,6 +23,8 @@
 /**
  * {@code QueryResults} bundles data for paged query results
  *
+ * @param <T> type of result elements
+ *
  * @author tiwe
  */
 public final class QueryResults<T> implements Serializable {

File: querydsl-core/src/main/java/com/querydsl/core/group/GroupCollector.java
Patch:
@@ -16,8 +16,10 @@
 /**
  * A stateful collector of column values for a group.
  *
- * @author sasa
+ * @param <T> Element type
  * @param <R> Target type (e.g. List, Set)
+ *
+ * @author sasa
  */
 public interface GroupCollector<T, R> {
 

File: querydsl-core/src/main/java/com/querydsl/core/support/FetchableQueryBase.java
Patch:
@@ -29,6 +29,9 @@
  * {@code FetchableQueryBase} extends the {@link QueryBase} class to provide default
  * implementations of the methods of the {@link com.querydsl.core.Fetchable} interface
  *
+ * @param <T> result type
+ * @param <Q> concrete subtype
+ *
  * @author tiwe
  */
 public abstract class FetchableQueryBase<T, Q extends FetchableQueryBase<T, Q>>

File: querydsl-core/src/main/java/com/querydsl/core/support/QueryBase.java
Patch:
@@ -24,6 +24,8 @@
 /**
  * {@code QueryBase} provides a stub for Query implementations
  *
+ * @param <Q> concrete subtype
+ *
  * @author tiwe
  */
 public abstract class QueryBase<Q extends QueryBase<Q>> {

File: querydsl-core/src/main/java/com/querydsl/core/support/ReplaceVisitor.java
Patch:
@@ -25,6 +25,8 @@
 /**
  * {@code ReplaceVisitor} is a deep visitor that can be customized to replace segments of
  * expression trees
+ *
+ * @param <C> context type
  */
 public class ReplaceVisitor<C> implements Visitor<Expression<?>, C> {
 

File: querydsl-core/src/main/java/com/querydsl/core/support/SerializerBase.java
Patch:
@@ -24,6 +24,8 @@
 /**
  * {@code SerializerBase} is a stub for Serializer implementations which serialize query metadata to Strings
  *
+ * @param <S> concrete subtype
+ *
  * @author tiwe
  */
 public abstract class SerializerBase<S extends SerializerBase<S>> implements Visitor<Void,Void> {

File: querydsl-core/src/main/java/com/querydsl/core/types/ConstantImpl.java
Patch:
@@ -19,6 +19,7 @@
  * {@code ConstantImpl} is the default implementation of the {@link Constant} interface
  *
  * @author tiwe
+ * @param <T> expression type
  */
 @Immutable
 public final class ConstantImpl<T> extends ExpressionBase<T> implements Constant<T> {

File: querydsl-core/src/main/java/com/querydsl/core/types/Operation.java
Patch:
@@ -19,6 +19,7 @@
  * {@code Operation} represents an operation with operator and arguments
  *
  * @author tiwe
+ * @param <T> expression type
  */
 public interface Operation<T> extends Expression<T> {
 

File: querydsl-core/src/main/java/com/querydsl/core/types/OrderSpecifier.java
Patch:
@@ -28,6 +28,9 @@ public class OrderSpecifier<T extends Comparable> implements Serializable {
 
     private static final long serialVersionUID = 3427652988262514678L;
 
+    /**
+     * Behaviour for order of null values
+     */
     public enum NullHandling { Default, NullsFirst, NullsLast }
 
     private final Order order;

File: querydsl-core/src/main/java/com/querydsl/core/types/Path.java
Patch:
@@ -19,6 +19,7 @@
  * {@code Path} represents a path expression. Paths refer to variables, properties and collection members access.
  *
  * @author tiwe
+ * @param <T> expression type
  */
 public interface Path<T> extends Expression<T> {
 

File: querydsl-core/src/main/java/com/querydsl/core/types/ProjectionRole.java
Patch:
@@ -20,7 +20,7 @@
  * <p>Usually FactoryExpression instances are used as the custom projection.</p>
  *
  * @author tiwe
- *
+ * @param <T> expression type
  */
 public interface ProjectionRole<T> {
 

File: querydsl-core/src/main/java/com/querydsl/core/types/SubQueryExpressionImpl.java
Patch:
@@ -21,7 +21,7 @@
  * {@code SubQueryExpressionImpl} is the default implementation of the {@link SubQueryExpression} interface
  *
  * @author tiwe
- *
+ * @param <T> Result type
  */
 @Immutable
 public class SubQueryExpressionImpl<T> extends ExpressionBase<T> implements SubQueryExpression<T> {

File: querydsl-core/src/main/java/com/querydsl/core/types/TemplateExpression.java
Patch:
@@ -20,6 +20,7 @@
  * serialization templates
  *
  * @author tiwe
+ * @param <T> expression type
  */
 public interface TemplateExpression<T> extends Expression<T> {
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/CollectionOperation.java
Patch:
@@ -24,7 +24,7 @@
  * {@code CollectionOperation} is a collection typed operation
  *
  * @author tiwe
- *
+ * @param <E> element type
  */
 public class CollectionOperation<E> extends CollectionExpressionBase<Collection<E>, E> {
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/CollectionPathBase.java
Patch:
@@ -29,8 +29,9 @@
  *
  * @author tiwe
  *
+ * @param <C> collection type
  * @param <E> component type
- * @param <Q> component query type
+ * @param <Q> expression type for {@code any()} results
  */
 public abstract class CollectionPathBase<C extends Collection<E>, E, Q extends SimpleExpression<? super E>>
     extends CollectionExpressionBase<C, E> implements Path<C> {

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/DslExpression.java
Patch:
@@ -23,7 +23,7 @@
  * for scalar Expressions
  *
  * @author tiwe
- *
+ * @param <T> expression type
  */
 public abstract class DslExpression<T> implements Expression<T> {
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/ListExpression.java
Patch:
@@ -26,6 +26,7 @@
  * @author tiwe
  *
  * @param <E> component type
+ * @param <Q> result type for {@code any()} and {@code get(int)} results
  * @see java.util.List
  */
 public interface ListExpression<E, Q extends SimpleExpression<? super E>> extends CollectionExpression<List<E>, E> {

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/ListPath.java
Patch:
@@ -28,7 +28,7 @@
  * @author tiwe
  *
  * @param <E> component type
- * @param <Q> component query type
+ * @param <Q> result type for {@code get(int)} and {@code any()} results
  */
 public class ListPath<E, Q extends SimpleExpression<? super E>> extends CollectionPathBase<List<E>, E, Q> implements ListExpression<E, Q> {
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/MapExpressionBase.java
Patch:
@@ -29,6 +29,7 @@
  *
  * @param <K> key type
  * @param <V> value type
+ * @param <Q> result type for {@code get(K)} invocations
  */
 public abstract class MapExpressionBase<K, V, Q extends SimpleExpression<? super V>> extends DslExpression<Map<K,V>> implements MapExpression<K,V> {
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/MapPath.java
Patch:
@@ -29,6 +29,7 @@
  *
  * @param <K> key type
  * @param <V> value type
+ * @param <E> result type for {@code get(K)} results
  */
 public class MapPath<K, V, E extends SimpleExpression<? super V>> extends MapExpressionBase<K, V, E> implements Path<Map<K, V>> {
 

File: querydsl-core/src/main/java/com/querydsl/core/util/MultiIterator.java
Patch:
@@ -29,6 +29,7 @@
  * </pre>
  *
  * @author tiwe
+ * @param <T> element type
  */
 public class MultiIterator<T> implements Iterator<Object[]> {
 

File: querydsl-hibernate-search/src/main/java/com/querydsl/hibernate/search/AbstractSearchQuery.java
Patch:
@@ -33,6 +33,9 @@
 
 /**
  * Abstract base class for Hibernate Search query classes
+ *
+ * @param <T> result type
+ * @param <Q> concrete subtype
  */
 public abstract class AbstractSearchQuery<T, Q extends AbstractSearchQuery<T,Q>> implements SimpleQuery<Q>, Fetchable<T> {
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/AbstractSQLQuery.java
Patch:
@@ -27,9 +27,10 @@
 /**
  * Abstract super class for SQLQuery implementation for JPA and Hibernate
  *
- * @author tiwe
- *
+ * @param <T> result type
  * @param <Q> concrete subtype
+ *
+ * @author tiwe
  */
 public abstract class AbstractSQLQuery<T, Q extends AbstractSQLQuery<T, Q>> extends ProjectableSQLQuery<T, Q> {
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPAQueryBase.java
Patch:
@@ -21,6 +21,9 @@
 /**
  * {@code JPAQueryBase} is a base Query class for JPA queries
  *
+ * @param <T> result type
+ * @param <Q> concrete subtype
+ *
  * @author tiwe
  */
 public abstract class JPAQueryBase<T, Q extends JPAQueryBase<T, Q>> extends FetchableSubQueryBase<T, Q> implements JPQLQuery<T> {

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPQLQuery.java
Patch:
@@ -22,6 +22,8 @@
 /**
  * Query interface for JPQL queries
  *
+ * @param <T> result type
+ *
  * @author tiwe
  *
  */

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/AbstractHibernateQuery.java
Patch:
@@ -37,9 +37,10 @@
 /**
  * Abstract base class for Hibernate API based implementations of the JPQL interface
  *
- * @author tiwe
+ * @param <T> result type
+ * @param <Q> concrete subtype
  *
- * @param <Q>
+ * @author tiwe
  */
 public abstract class AbstractHibernateQuery<T, Q extends AbstractHibernateQuery<T, Q>> extends JPAQueryBase<T, Q> {
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/HibernateQuery.java
Patch:
@@ -27,8 +27,9 @@
 /**
  * {@code HibernateQuery} is the default implementation of the JPQLQuery interface for Hibernate
  *
- * @author tiwe
+ * @param <T> result type
  *
+ * @author tiwe
  */
 public class HibernateQuery<T> extends AbstractHibernateQuery<T, HibernateQuery<T>> implements JPQLQuery<T> {
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/sql/AbstractHibernateSQLQuery.java
Patch:
@@ -46,9 +46,10 @@
 /**
  * {@code AbstractHibernateSQLQuery} is the base class for Hibernate Native SQL queries
  *
- * @author tiwe
+ * @param <T> result type
+ * @param <Q> concrete subtype
  *
- * @param <Q>
+ * @author tiwe
  */
 public abstract class AbstractHibernateSQLQuery<T, Q extends AbstractHibernateSQLQuery<T, Q>> extends AbstractSQLQuery<T, Q> {
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/sql/HibernateSQLQuery.java
Patch:
@@ -27,6 +27,8 @@
  * {@code HibernateSQLQuery} is an SQLQuery implementation that uses Hibernate's Native SQL functionality
  * to execute queries
  *
+ * @param <T> result type
+ *
  * @author tiwe
  *
  */

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/AbstractJPAQuery.java
Patch:
@@ -41,9 +41,10 @@
 /**
  * Abstract base class for JPA API based implementations of the JPQLQuery interface
  *
- * @author tiwe
+ * @param <T> result type
+ * @param <Q> concrete subtype
  *
- * @param <Q>
+ * @author tiwe
  */
 public abstract class AbstractJPAQuery<T, Q extends AbstractJPAQuery<T, Q>> extends JPAQueryBase<T, Q> {
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/JPAQuery.java
Patch:
@@ -25,8 +25,9 @@
 /**
  * {@code JPAQuery} is the default implementation of the {@link JPQLQuery} interface for JPA
  *
- * @author tiwe
+ * @param <T> result type
  *
+ * @author tiwe
  */
 public class JPAQuery<T> extends AbstractJPAQuery<T, JPAQuery<T>> {
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/sql/AbstractJPASQLQuery.java
Patch:
@@ -47,9 +47,10 @@
 /**
  * {@code AbstractJPASQLQuery} is the base class for JPA Native SQL queries
  *
- * @author tiwe
+ * @param <T> result type
+ * @param <Q> concrete subtype
  *
- * @param <Q>
+ * @author tiwe*
  */
 public abstract class AbstractJPASQLQuery<T, Q extends AbstractJPASQLQuery<T, Q>> extends AbstractSQLQuery<T, Q> {
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/sql/JPASQLQuery.java
Patch:
@@ -26,6 +26,8 @@
  * {@code JPASQLQuery} is an SQLQuery implementation that uses JPA Native SQL functionality
  * to execute queries
  *
+ * @param <T> result type
+ *
  * @author tiwe
  *
  */

File: querydsl-lucene3/src/main/java/com/querydsl/lucene3/TypedQuery.java
Patch:
@@ -23,6 +23,8 @@
  *
  * <p>Converts Lucene documents to typed results via a constructor supplied transformer</p>
  *
+ * @param <T> result type
+ *
  * @author laim
  * @author tiwe
  */

File: querydsl-lucene4/src/main/java/com/querydsl/lucene4/TypedQuery.java
Patch:
@@ -23,6 +23,8 @@
  *
  * <p>Converts Lucene documents to typed results via a constructor supplied transformer</p>
  *
+ * @param <T> result type
+ *
  * @author laim
  * @author tiwe
  */

File: querydsl-mongodb/src/main/java/com/querydsl/mongodb/AbstractMongodbQuery.java
Patch:
@@ -36,8 +36,8 @@
  *
  * @author laimw
  *
- * @param <K>
- * @param <Q>
+ * @param <K> result type
+ * @param <Q> concrete subtype
  */
 public abstract class AbstractMongodbQuery<K, Q extends AbstractMongodbQuery<K, Q>> implements SimpleQuery<Q>, Fetchable<K> {
 

File: querydsl-mongodb/src/main/java/com/querydsl/mongodb/AnyEmbeddedBuilder.java
Patch:
@@ -23,9 +23,10 @@
 /**
  * {@code AnyEmbeddedBuilder} is a builder for constraints on embedded objects
  *
- * @author tiwe
+ * @param <Q> query type
+ * @param <K> result type
  *
- * @param <K>
+ * @author tiwe
  */
 public class AnyEmbeddedBuilder<Q extends AbstractMongodbQuery<K, Q>, K> {
 

File: querydsl-mongodb/src/main/java/com/querydsl/mongodb/morphia/MorphiaQuery.java
Patch:
@@ -38,6 +38,8 @@
  *     .fetch();
  * }</pre>
  *
+ * @param <K> result type
+ *
  * @author laimw
  * @author tiwe
  *

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/OrdinalPositionComparator.java
Patch:
@@ -20,6 +20,9 @@
 import com.querydsl.codegen.Property;
 import com.querydsl.sql.ColumnMetadata;
 
+/**
+ * Compares {@link Property} instances based on their ordinal position in the table
+ */
 public class OrdinalPositionComparator implements Comparator<Property> {
 
     public OrdinalPositionComparator() {

File: querydsl-sql/src/main/java/com/querydsl/sql/AbstractSQLQuery.java
Patch:
@@ -42,9 +42,10 @@
 /**
  * {@code AbstractSQLQuery} is the base type for SQL query implementations
  *
- * @author tiwe
- *
+ * @param <T> result type
  * @param <Q> concrete subtype
+ *
+ * @author tiwe
  */
 public abstract class AbstractSQLQuery<T, Q extends AbstractSQLQuery<T, Q>> extends ProjectableSQLQuery<T, Q> {
 

File: querydsl-sql/src/main/java/com/querydsl/sql/AbstractSQLQueryFactory.java
Patch:
@@ -28,8 +28,9 @@
 /**
  * {@code AbstractSQLQueryFactory} is the base class for {@link SQLCommonQueryFactory} implementations
  *
- * @author tiwe
+ * @param <Q> query type
  *
+ * @author tiwe
  */
 public abstract class AbstractSQLQueryFactory<Q extends SQLCommonQuery<?>> implements SQLCommonQueryFactory<Q,
     SQLDeleteClause, SQLUpdateClause, SQLInsertClause, SQLMergeClause> {

File: querydsl-sql/src/main/java/com/querydsl/sql/PrimaryKey.java
Patch:
@@ -28,6 +28,8 @@
 /**
  * {@code PrimaryKey} defines a primary key on table
  *
+ * @param <E> expression type
+ *
  * @author tiwe
  */
 @Immutable

File: querydsl-sql/src/main/java/com/querydsl/sql/ProjectableSQLQuery.java
Patch:
@@ -37,6 +37,7 @@
 /**
  * {@code ProjectableSQLQuery} is the base type for SQL query implementations
  *
+ * @param <T> result type
  * @param <Q> concrete subtype
  */
 public abstract class ProjectableSQLQuery<T, Q extends ProjectableSQLQuery<T, Q> & Query<Q>> extends FetchableSubQueryBase<T, Q>

File: querydsl-sql/src/main/java/com/querydsl/sql/RelationalPath.java
Patch:
@@ -26,8 +26,9 @@
  * RelationalPath extends {@link EntityPath} to provide access to relational
  * metadata
  *
- * @author tiwe
+ * @param <T> expression type
  *
+ * @author tiwe
  */
 public interface RelationalPath<T> extends EntityPath<T>, ProjectionRole<T> {
 

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLTemplates.java
Patch:
@@ -124,6 +124,9 @@ public class SQLTemplates extends Templates {
 
     private final Set<String> reservedWords;
 
+    /**
+     * Fluent builder for {@code SQLTemplates} instances     *
+     */
     public abstract static class Builder {
 
         protected boolean printSchema, quote, newLineToSingleSpace;

File: querydsl-sql/src/main/java/com/querydsl/sql/UnionImpl.java
Patch:
@@ -25,9 +25,10 @@
 /**
  * Default implementation of the Union interface
  *
- * @author tiwe
+ * @param <T> result type
+ * @param <Q> concrete query type
  *
- * @param <T>
+ * @author tiwe
  */
 public class UnionImpl<T, Q extends ProjectableSQLQuery<T, Q> & Query<Q>>  implements Union<T> {
 

File: querydsl-sql/src/main/java/com/querydsl/sql/WindowFunction.java
Patch:
@@ -29,6 +29,8 @@
 /**
  * {@code WindowFunction} is a builder for window function expressions
  *
+ * @param <A> expression type
+ *
  * @author tiwe
  */
 public class WindowFunction<A> extends MutableExpressionBase<A> {

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/AbstractSQLClause.java
Patch:
@@ -33,6 +33,8 @@
 /**
  * {@code AbstractSQLClause} is a superclass for SQL based DMLClause implementations
  *
+ * @param <C> concrete subtype
+ *
  * @author tiwe
  */
 public abstract class AbstractSQLClause<C extends AbstractSQLClause<C>> implements DMLClause<C> {

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/Mapper.java
Patch:
@@ -21,8 +21,9 @@
 /**
  * Create a Map of updates for a given domain object
  *
- * @author tiwe
+ * @param <T> object type
  *
+ * @author tiwe
  */
 public interface Mapper<T> {
 

File: querydsl-sql/src/main/java/com/querydsl/sql/mssql/SQLServerQuery.java
Patch:
@@ -28,8 +28,9 @@
 /**
  * {@code SQLServerQuery} provides SQL Server related extensions to SQLQuery
  *
- * @author tiwe
+ * @param <T> result type
  *
+ * @author tiwe
  */
 public class SQLServerQuery<T> extends AbstractSQLQuery<T, SQLServerQuery<T>> {
 

File: querydsl-sql/src/main/java/com/querydsl/sql/mysql/MySQLQuery.java
Patch:
@@ -30,7 +30,7 @@
  *
  * @author tiwe
  * @see SQLQuery
- *
+ * @param <T> result type
  */
 public class MySQLQuery<T> extends AbstractSQLQuery<T, MySQLQuery<T>> {
 

File: querydsl-sql/src/main/java/com/querydsl/sql/oracle/OracleQuery.java
Patch:
@@ -30,6 +30,7 @@
  * {@code OracleQuery} provides Oracle specific extensions to the base SQL query type
  *
  * @author tiwe
+ * @param <T> result type
  */
 public class OracleQuery<T> extends AbstractSQLQuery<T, OracleQuery<T>> {
 

File: querydsl-sql/src/main/java/com/querydsl/sql/postgresql/PostgreSQLQuery.java
Patch:
@@ -25,9 +25,10 @@
 /**
  * {@code PostgreSQLQuery} provides PostgreSQL related extensions to SQLQuery
  *
- * @author tiwe
- * @see SQLQuery
+ * @param <T> result type
  *
+ * @see SQLQuery
+ * @author tiwe
  */
 public class PostgreSQLQuery<T> extends AbstractSQLQuery<T, PostgreSQLQuery<T>> {
 

File: querydsl-sql/src/main/java/com/querydsl/sql/teradata/TeradataQuery.java
Patch:
@@ -27,8 +27,9 @@
 /**
  * {@code TeradataQuery} provides Teradata related extensions to SQLQuery
  *
- * @author tiwe
+ * @param <T> result type
  *
+ * @author tiwe
  */
 public class TeradataQuery<T> extends AbstractSQLQuery<T, TeradataQuery<T>> {
 

File: querydsl-sql/src/main/java/com/querydsl/sql/types/EnumByOrdinalType.java
Patch:
@@ -45,8 +45,8 @@ public Class<T> getReturnedClass() {
 
     @Override
     public T getValue(ResultSet rs, int startIndex) throws SQLException {
-        Integer ordinal = (Integer) rs.getObject(startIndex);
-        return ordinal != null ? type.getEnumConstants()[ordinal] : null;
+        int ordinal = rs.getInt(startIndex);
+        return rs.wasNull() ? null : type.getEnumConstants()[ordinal];
     }
 
     @Override

File: querydsl-codegen/src/main/java/com/querydsl/codegen/GenericExporter.java
Patch:
@@ -271,13 +271,13 @@ private void innerExport() {
             // serialize super types
             serialize(supertypeSerializer, superTypes);
 
-            // serialze entity types
+            // serialize entity types
             serialize(entitySerializer, entityTypes);
 
-            // serialize embeddables
+            // serialize embeddable types
             serialize(embeddableSerializer, embeddableTypes);
 
-            // serialize projections
+            // serialize projection types
             serialize(projectionSerializer, projectionTypes);
 
         } catch (IOException e) {

File: querydsl-core/src/main/java/com/querydsl/core/alias/TypeSystem.java
Patch:
@@ -14,7 +14,7 @@
 package com.querydsl.core.alias;
 
 /**
- * {@code TypeSystem} defines an interface for detecting whether a given class confirms to certain Collection
+ * {@code TypeSystem} defines an interface for detecting whether a given class conforms to a certain Collection
  * contract
  *
  * @author tiwe

File: querydsl-core/src/main/java/com/querydsl/core/support/EnumConversion.java
Patch:
@@ -22,7 +22,7 @@
 import com.querydsl.core.types.Visitor;
 
 /**
- * {@code EnumConversion} ensures that the results of an enum projection confirm to the type of the
+ * {@code EnumConversion} ensures that the results of an enum projection conform to the type of the
  * projection expression
  *
  * @author tiwe

File: querydsl-core/src/main/java/com/querydsl/core/support/NumberConversion.java
Patch:
@@ -22,7 +22,7 @@
 import com.querydsl.core.util.MathUtils;
 
 /**
- * {@code NumberConversion} ensures that the results of a numeric projection confirm to the type of the
+ * {@code NumberConversion} ensures that the results of a numeric projection conform to the type of the
  * projection expression
  *
  * @author tiwe

File: querydsl-core/src/main/java/com/querydsl/core/support/NumberConversions.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * {@code NumberConversions} ensures that the results of a projection involving numeric expressions
- * confirm to the types of the numeric expressions
+ * conform to the types of the numeric expressions
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/Expressions.java
Patch:
@@ -1051,7 +1051,7 @@ public static <T extends Comparable<?>> DatePath<T> datePath(Class<? extends T>
      * @param type type of expression
      * @param metadata path metadata
      * @param <T> type of expression
-     * @return new path instane
+     * @return new path instance
      */
     public static <T extends Comparable<?>> DatePath<T> datePath(Class<? extends T> type, PathMetadata metadata) {
         return new DatePath<T>(type, metadata);

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLExpressions.java
Patch:
@@ -152,7 +152,7 @@ public static SQLQuery<Integer> selectZero() {
     }
 
     /**
-     * Create a new detached SQLQuery isntance with one as the projection
+     * Create a new detached SQLQuery instance with one as the projection
      *
      * @return select(1)
      */
@@ -469,7 +469,7 @@ public static <D extends Comparable> DateTimeExpression<D> addHours(DateTimeExpr
      * Add the given amount of minutes to the date
      *
      * @param date datetime
-     * @param minutes minues to add
+     * @param minutes minutes to add
      * @return converted datetime
      */
     public static <D extends Comparable> DateTimeExpression<D> addMinutes(DateTimeExpression<D> date, int minutes) {

File: querydsl-codegen/src/main/java/com/querydsl/codegen/GenericExporter.java
Patch:
@@ -271,13 +271,13 @@ private void innerExport() {
             // serialize super types
             serialize(supertypeSerializer, superTypes);
 
-            // serialze entity types
+            // serialize entity types
             serialize(entitySerializer, entityTypes);
 
-            // serialize embeddables
+            // serialize embeddable types
             serialize(embeddableSerializer, embeddableTypes);
 
-            // serialize projections
+            // serialize projection types
             serialize(projectionSerializer, projectionTypes);
 
         } catch (IOException e) {

File: querydsl-core/src/main/java/com/querydsl/core/alias/TypeSystem.java
Patch:
@@ -14,7 +14,7 @@
 package com.querydsl.core.alias;
 
 /**
- * {@code TypeSystem} defines an interface for detecting whether a given class confirms to certain Collection
+ * {@code TypeSystem} defines an interface for detecting whether a given class conforms to a certain Collection
  * contract
  *
  * @author tiwe

File: querydsl-core/src/main/java/com/querydsl/core/support/EnumConversion.java
Patch:
@@ -22,7 +22,7 @@
 import com.querydsl.core.types.Visitor;
 
 /**
- * {@code EnumConversion} ensures that the results of an enum projection confirm to the type of the
+ * {@code EnumConversion} ensures that the results of an enum projection conform to the type of the
  * projection expression
  *
  * @author tiwe

File: querydsl-core/src/main/java/com/querydsl/core/support/NumberConversion.java
Patch:
@@ -22,7 +22,7 @@
 import com.querydsl.core.util.MathUtils;
 
 /**
- * {@code NumberConversion} ensures that the results of a numeric projection confirm to the type of the
+ * {@code NumberConversion} ensures that the results of a numeric projection conform to the type of the
  * projection expression
  *
  * @author tiwe

File: querydsl-core/src/main/java/com/querydsl/core/support/NumberConversions.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * {@code NumberConversions} ensures that the results of a projection involving numeric expressions
- * confirm to the types of the numeric expressions
+ * conform to the types of the numeric expressions
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/Expressions.java
Patch:
@@ -1051,7 +1051,7 @@ public static <T extends Comparable<?>> DatePath<T> datePath(Class<? extends T>
      * @param type type of expression
      * @param metadata path metadata
      * @param <T> type of expression
-     * @return new path instane
+     * @return new path instance
      */
     public static <T extends Comparable<?>> DatePath<T> datePath(Class<? extends T> type, PathMetadata metadata) {
         return new DatePath<T>(type, metadata);

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLExpressions.java
Patch:
@@ -152,7 +152,7 @@ public static SQLQuery<Integer> selectZero() {
     }
 
     /**
-     * Create a new detached SQLQuery isntance with one as the projection
+     * Create a new detached SQLQuery instance with one as the projection
      *
      * @return select(1)
      */
@@ -469,7 +469,7 @@ public static <D extends Comparable> DateTimeExpression<D> addHours(DateTimeExpr
      * Add the given amount of minutes to the date
      *
      * @param date datetime
-     * @param minutes minues to add
+     * @param minutes minutes to add
      * @return converted datetime
      */
     public static <D extends Comparable> DateTimeExpression<D> addMinutes(DateTimeExpression<D> date, int minutes) {

File: querydsl-sql/src/main/java/com/querydsl/sql/types/EnumByOrdinalType.java
Patch:
@@ -45,8 +45,8 @@ public Class<T> getReturnedClass() {
 
     @Override
     public T getValue(ResultSet rs, int startIndex) throws SQLException {
-        Integer ordinal = (Integer) rs.getObject(startIndex);
-        return ordinal != null ? type.getEnumConstants()[ordinal] : null;
+        int ordinal = rs.getInt(startIndex);
+        return rs.wasNull() ? null : type.getEnumConstants()[ordinal];
     }
 
     @Override

File: querydsl-scala/src/main/scala/PlaceHolder.java
Patch:
@@ -12,4 +12,4 @@
  * limitations under the License.
  */
 //hack to generate package javadoc
-public class PlaceHolder {}
+public class PlaceHolder { }

File: querydsl-spatial/src/main/java/com/querydsl/spatial/GeometryCollectionPath.java
Patch:
@@ -47,7 +47,7 @@ public GeometryCollectionPath(PathMetadata metadata) {
 
     public GeometryCollectionPath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     public GeometryCollectionPath(String var) {

File: querydsl-spatial/src/main/java/com/querydsl/spatial/GeometryExpressions.java
Patch:
@@ -254,5 +254,5 @@ public static PolygonExpression<Polygon> polygonOperation(Operator op, Expressio
         return new PolygonOperation<Polygon>(Polygon.class, op, args);
     }
 
-    private GeometryExpressions() {}
+    private GeometryExpressions() { }
 }

File: querydsl-spatial/src/main/java/com/querydsl/spatial/GeometryOperation.java
Patch:
@@ -40,7 +40,7 @@ protected GeometryOperation(Class<? extends T> type, Operator op, Expression<?>.
 
     protected GeometryOperation(Class<? extends T> type, Operator op, ImmutableList<Expression<?>> args) {
         super(ExpressionUtils.operation(type, op, args));
-        this.opMixin = (OperationImpl<T>)mixin;
+        this.opMixin = (OperationImpl<T>) mixin;
     }
 
     @Override

File: querydsl-spatial/src/main/java/com/querydsl/spatial/GeometryPath.java
Patch:
@@ -65,7 +65,7 @@ public GeometryPath(PathMetadata metadata) {
 
     public GeometryPath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     public GeometryPath(String var) {

File: querydsl-spatial/src/main/java/com/querydsl/spatial/LineStringOperation.java
Patch:
@@ -40,7 +40,7 @@ protected LineStringOperation(Class<? extends T> type, Operator op, Expression<?
 
     protected LineStringOperation(Class<? extends T> type, Operator op, ImmutableList<Expression<?>> args) {
         super(ExpressionUtils.operation(type, op, args));
-        this.opMixin = (OperationImpl<T>)mixin;
+        this.opMixin = (OperationImpl<T>) mixin;
     }
 
     @Override

File: querydsl-spatial/src/main/java/com/querydsl/spatial/LineStringPath.java
Patch:
@@ -47,7 +47,7 @@ public LineStringPath(PathMetadata metadata) {
 
     public LineStringPath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     public LineStringPath(String var) {

File: querydsl-spatial/src/main/java/com/querydsl/spatial/LinearRingPath.java
Patch:
@@ -47,7 +47,7 @@ public LinearRingPath(PathMetadata metadata) {
 
     public LinearRingPath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     public LinearRingPath(String var) {

File: querydsl-spatial/src/main/java/com/querydsl/spatial/MultiLineStringPath.java
Patch:
@@ -47,7 +47,7 @@ public MultiLineStringPath(PathMetadata metadata) {
 
     public MultiLineStringPath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     public MultiLineStringPath(String var) {

File: querydsl-spatial/src/main/java/com/querydsl/spatial/MultiPointPath.java
Patch:
@@ -47,7 +47,7 @@ public MultiPointPath(PathMetadata metadata) {
 
     public MultiPointPath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     public MultiPointPath(String var) {

File: querydsl-spatial/src/main/java/com/querydsl/spatial/MultiPolygonPath.java
Patch:
@@ -47,7 +47,7 @@ public MultiPolygonPath(PathMetadata metadata) {
 
     public MultiPolygonPath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     public MultiPolygonPath(String var) {

File: querydsl-spatial/src/main/java/com/querydsl/spatial/PointOperation.java
Patch:
@@ -40,7 +40,7 @@ protected PointOperation(Class<T> type, Operator op, Expression<?>... args) {
 
     protected PointOperation(Class<T> type, Operator op, ImmutableList<Expression<?>> args) {
         super(ExpressionUtils.operation(type, op, args));
-        this.opMixin = (OperationImpl<T>)mixin;
+        this.opMixin = (OperationImpl<T>) mixin;
     }
 
     @Override

File: querydsl-spatial/src/main/java/com/querydsl/spatial/PointPath.java
Patch:
@@ -47,7 +47,7 @@ public PointPath(PathMetadata metadata) {
 
     public PointPath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     public PointPath(String var) {

File: querydsl-spatial/src/main/java/com/querydsl/spatial/PolygonOperation.java
Patch:
@@ -40,7 +40,7 @@ protected PolygonOperation(Class<? extends T> type, Operator op, Expression<?>..
 
     protected PolygonOperation(Class<? extends T> type, Operator op, ImmutableList<Expression<?>> args) {
         super(ExpressionUtils.operation(type, op, args));
-        this.opMixin = (OperationImpl<T>)mixin;
+        this.opMixin = (OperationImpl<T>) mixin;
     }
 
     @Override

File: querydsl-spatial/src/main/java/com/querydsl/spatial/PolygonPath.java
Patch:
@@ -47,7 +47,7 @@ public PolygonPath(PathMetadata metadata) {
 
     public PolygonPath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     public PolygonPath(String var) {

File: querydsl-spatial/src/main/java/com/querydsl/spatial/PolyhedralSurfacePath.java
Patch:
@@ -47,7 +47,7 @@ public PolyhedralSurfacePath(PathMetadata metadata) {
 
     public PolyhedralSurfacePath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     public PolyhedralSurfacePath(String var) {

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/JTSGeometryCollectionPath.java
Patch:
@@ -46,7 +46,7 @@ public JTSGeometryCollectionPath(PathMetadata metadata) {
 
     public JTSGeometryCollectionPath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     public JTSGeometryCollectionPath(String var) {

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/JTSGeometryExpressions.java
Patch:
@@ -255,5 +255,5 @@ public static JTSPolygonExpression<Polygon> polygonOperation(Operator op, Expres
         return new JTSPolygonOperation<Polygon>(Polygon.class, op, args);
     }
 
-    private JTSGeometryExpressions() {}
+    private JTSGeometryExpressions() { }
 }

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/JTSGeometryOperation.java
Patch:
@@ -39,7 +39,7 @@ protected JTSGeometryOperation(Class<? extends T> type, Operator op, Expression<
 
     protected JTSGeometryOperation(Class<? extends T> type, Operator op, ImmutableList<Expression<?>> args) {
         super(ExpressionUtils.operation(type, op, args));
-        this.opMixin = (OperationImpl<T>)mixin;
+        this.opMixin = (OperationImpl<T>) mixin;
     }
 
     @Override

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/JTSGeometryPath.java
Patch:
@@ -62,7 +62,7 @@ public JTSGeometryPath(PathMetadata metadata) {
 
     public JTSGeometryPath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     public JTSGeometryPath(String var) {

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/JTSLineStringOperation.java
Patch:
@@ -39,7 +39,7 @@ protected JTSLineStringOperation(Class<? extends T> type, Operator op, Expressio
 
     protected JTSLineStringOperation(Class<? extends T> type, Operator op, ImmutableList<Expression<?>> args) {
         super(ExpressionUtils.operation(type, op, args));
-        this.opMixin = (OperationImpl<T>)mixin;
+        this.opMixin = (OperationImpl<T>) mixin;
     }
 
     @Override

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/JTSLineStringPath.java
Patch:
@@ -46,7 +46,7 @@ public JTSLineStringPath(PathMetadata metadata) {
 
     public JTSLineStringPath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     public JTSLineStringPath(String var) {

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/JTSLinearRingPath.java
Patch:
@@ -46,7 +46,7 @@ public JTSLinearRingPath(PathMetadata metadata) {
 
     public JTSLinearRingPath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     public JTSLinearRingPath(String var) {

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/JTSMultiLineStringPath.java
Patch:
@@ -46,7 +46,7 @@ public JTSMultiLineStringPath(PathMetadata metadata) {
 
     public JTSMultiLineStringPath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     public JTSMultiLineStringPath(String var) {

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/JTSMultiPointPath.java
Patch:
@@ -46,7 +46,7 @@ public JTSMultiPointPath(PathMetadata metadata) {
 
     public JTSMultiPointPath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     public JTSMultiPointPath(String var) {

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/JTSMultiPolygonPath.java
Patch:
@@ -46,7 +46,7 @@ public JTSMultiPolygonPath(PathMetadata metadata) {
 
     public JTSMultiPolygonPath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     public JTSMultiPolygonPath(String var) {

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/JTSPointOperation.java
Patch:
@@ -39,7 +39,7 @@ protected JTSPointOperation(Class<T> type, Operator op, Expression<?>... args) {
 
     protected JTSPointOperation(Class<T> type, Operator op, ImmutableList<Expression<?>> args) {
         super(ExpressionUtils.operation(type, op, args));
-        this.opMixin = (OperationImpl<T>)mixin;
+        this.opMixin = (OperationImpl<T>) mixin;
     }
 
     @Override

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/JTSPointPath.java
Patch:
@@ -46,7 +46,7 @@ public JTSPointPath(PathMetadata metadata) {
 
     public JTSPointPath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     public JTSPointPath(String var) {

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/JTSPolygonOperation.java
Patch:
@@ -39,7 +39,7 @@ protected JTSPolygonOperation(Class<? extends T> type, Operator op, Expression<?
 
     protected JTSPolygonOperation(Class<? extends T> type, Operator op, ImmutableList<Expression<?>> args) {
         super(ExpressionUtils.operation(type, op, args));
-        this.opMixin = (OperationImpl<T>)mixin;
+        this.opMixin = (OperationImpl<T>) mixin;
     }
 
     @Override

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/JTSPolygonPath.java
Patch:
@@ -46,7 +46,7 @@ public JTSPolygonPath(PathMetadata metadata) {
 
     public JTSPolygonPath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     public JTSPolygonPath(String var) {

File: querydsl-sql-spatial/src/main/java/com/querydsl/sql/spatial/SpatialTemplatesSupport.java
Patch:
@@ -27,7 +27,7 @@
  */
 public final class SpatialTemplatesSupport {
 
-    private SpatialTemplatesSupport() {}
+    private SpatialTemplatesSupport() { }
 
     private static String createSpatial(String name, int args, boolean asFunction) {
         StringBuilder result = new StringBuilder();

File: querydsl-sql-spatial/src/test/java/com/querydsl/sql/spatial/SpatialBase.java
Patch:
@@ -244,7 +244,7 @@ public void Point_Methods2() {
 
         List<Expression<?>> expressions = Lists.newArrayList();
         expressions.addAll(createExpressions(shapes1.geometry.asPoint(), shapes2.geometry.asPoint()));
-        expressions.addAll(createExpressions(shapes1.geometry.asPoint(), ConstantImpl.create((Point)Wkt.fromWkt("Point(2 2)"))));
+        expressions.addAll(createExpressions(shapes1.geometry.asPoint(), ConstantImpl.create((Point) Wkt.fromWkt("Point(2 2)"))));
 
         for (Expression<?> expr : expressions) {
             boolean logged = false;

File: querydsl-sql-spatial/src/test/java/com/querydsl/sql/spatial/suites/H2LiteralsSuiteTest.java
Patch:
@@ -9,7 +9,7 @@
 
 public class H2LiteralsSuiteTest extends AbstractSuite {
 
-    public static class Spatial extends SpatialBase {}
+    public static class Spatial extends SpatialBase { }
 
     @BeforeClass
     public static void setUp() throws Exception {

File: querydsl-sql-spatial/src/test/java/com/querydsl/sql/spatial/suites/H2SuiteTest.java
Patch:
@@ -9,7 +9,7 @@
 
 public class H2SuiteTest extends AbstractSuite {
 
-    public static class Spatial extends SpatialBase {}
+    public static class Spatial extends SpatialBase { }
 
     @BeforeClass
     public static void setUp() throws Exception {

File: querydsl-sql-spatial/src/test/java/com/querydsl/sql/spatial/suites/MSSQLLiteralsSuiteTest.java
Patch:
@@ -12,7 +12,7 @@
 @Category(ExternalDB.class)
 public class MSSQLLiteralsSuiteTest extends AbstractSuite {
 
-    public static class Spatial extends SpatialBase {}
+    public static class Spatial extends SpatialBase { }
 
     @BeforeClass
     public static void setUp() throws Exception {

File: querydsl-sql-spatial/src/test/java/com/querydsl/sql/spatial/suites/MSSQLSuiteTest.java
Patch:
@@ -12,7 +12,7 @@
 @Category(ExternalDB.class)
 public class MSSQLSuiteTest extends AbstractSuite {
 
-    public static class Spatial extends SpatialBase {}
+    public static class Spatial extends SpatialBase { }
 
     @BeforeClass
     public static void setUp() throws Exception {

File: querydsl-sql-spatial/src/test/java/com/querydsl/sql/spatial/suites/MySQLLiteralsSuiteTest.java
Patch:
@@ -12,7 +12,7 @@
 @Category(ExternalDB.class)
 public class MySQLLiteralsSuiteTest extends AbstractSuite {
 
-    public static class Spatial extends SpatialBase {}
+    public static class Spatial extends SpatialBase { }
 
     @BeforeClass
     public static void setUp() throws Exception {

File: querydsl-sql-spatial/src/test/java/com/querydsl/sql/spatial/suites/MySQLSuiteTest.java
Patch:
@@ -12,7 +12,7 @@
 @Category(ExternalDB.class)
 public class MySQLSuiteTest extends AbstractSuite {
 
-    public static class Spatial extends SpatialBase {}
+    public static class Spatial extends SpatialBase { }
 
     @BeforeClass
     public static void setUp() throws Exception {

File: querydsl-sql-spatial/src/test/java/com/querydsl/sql/spatial/suites/PostgreSQLLiteralsSuiteTest.java
Patch:
@@ -12,7 +12,7 @@
 @Category(ExternalDB.class)
 public class PostgreSQLLiteralsSuiteTest extends AbstractSuite {
 
-    public static class Spatial extends SpatialBase {}
+    public static class Spatial extends SpatialBase { }
 
     @BeforeClass
     public static void setUp() throws Exception {

File: querydsl-sql-spatial/src/test/java/com/querydsl/sql/spatial/suites/PostgreSQLSuiteTest.java
Patch:
@@ -12,7 +12,7 @@
 @Category(ExternalDB.class)
 public class PostgreSQLSuiteTest extends AbstractSuite {
 
-    public static class Spatial extends SpatialBase {}
+    public static class Spatial extends SpatialBase { }
 
     @BeforeClass
     public static void setUp() throws Exception {

File: querydsl-sql-spatial/src/test/java/com/querydsl/sql/spatial/suites/TeradataLiteralsSuiteTest.java
Patch:
@@ -12,7 +12,7 @@
 @Category(ExternalDB.class)
 public class TeradataLiteralsSuiteTest extends AbstractSuite {
 
-    public static class Spatial extends SpatialBase {}
+    public static class Spatial extends SpatialBase { }
 
     @BeforeClass
     public static void setUp() throws Exception {

File: querydsl-sql-spatial/src/test/java/com/querydsl/sql/spatial/suites/TeradataSuiteTest.java
Patch:
@@ -12,7 +12,7 @@
 @Category(ExternalDB.class)
 public class TeradataSuiteTest extends AbstractSuite {
 
-    public static class Spatial extends SpatialBase {}
+    public static class Spatial extends SpatialBase { }
 
     @BeforeClass
     public static void setUp() throws Exception {

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/ExtendedBeanSerializer.java
Patch:
@@ -81,7 +81,7 @@ protected void bodyEnd(EntityType model, CodeWriter writer) throws IOException {
         writer.line("if (!(o instanceof ", model.getSimpleName(), ")) {");
         writer.line("    return false;");
         writer.line("}");
-        writer.line(model.getSimpleName(), " obj = (", model.getSimpleName(), ")o;");
+        writer.line(model.getSimpleName(), " obj = (", model.getSimpleName(), ") o;");
         writer.line("return ", columnEquals + ";");
         writer.end();
 

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/ExtendedNamingStrategy.java
Patch:
@@ -35,7 +35,7 @@ public class ExtendedNamingStrategy extends DefaultNamingStrategy {
     public String getPropertyNameForForeignKey(String fkName, EntityType entityType) {
         String[] split = SPLIT.split(fkName);
         if (split.length > 2) {
-            return getPropertyName(split[split.length-2], entityType);
+            return getPropertyName(split[split.length - 2], entityType);
         } else {
             return super.getPropertyNameForForeignKey(fkName, entityType);
         }
@@ -45,7 +45,7 @@ public String getPropertyNameForForeignKey(String fkName, EntityType entityType)
     public String getPropertyNameForInverseForeignKey(String fkName, EntityType entityType) {
         String[] split = SPLIT.split(fkName);
         if (split.length > 2) {
-            return getPropertyName(split[split.length-1], entityType);
+            return getPropertyName(split[split.length - 1], entityType);
         } else {
             return super.getPropertyNameForInverseForeignKey(fkName, entityType);
         }

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/MetaDataExporter.java
Patch:
@@ -115,7 +115,7 @@ public class MetaDataExporter {
     @Nullable
     private String tableTypesToExport;
 
-    public MetaDataExporter() {}
+    public MetaDataExporter() { }
 
     protected EntityType createEntityType(@Nullable String schemaName, String tableName,
             final String className) {
@@ -368,14 +368,14 @@ private void serialize(EntityType type) {
             String fileSuffix = createScalaSources ? ".scala" : ".java";
 
             if (beanSerializer != null) {
-                String packageName = normalizePackage(beanPackageName, (String)type.getData().get("schema"));
+                String packageName = normalizePackage(beanPackageName, (String) type.getData().get("schema"));
                 String path = packageName.replace('.', '/') + "/" + type.getSimpleName() + fileSuffix;
                 write(beanSerializer, path, type);
 
                 String otherPath = entityToWrapped.get(type).getFullName().replace('.', '/') + fileSuffix;
                 write(serializer, otherPath, type);
             } else {
-                String packageName = normalizePackage(module.getPackageName(), (String)type.getData().get("schema"));
+                String packageName = normalizePackage(module.getPackageName(), (String) type.getData().get("schema"));
                 String path =  packageName.replace('.', '/') + "/" + type.getSimpleName() + fileSuffix;
                 write(serializer, path, type);
             }

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/Naming.java
Patch:
@@ -29,7 +29,7 @@ public static String normalize(String s, String reservedSuffix) {
         } else {
             StringBuilder sb = new StringBuilder(s.length() + 1);
             for (char c : s.toCharArray()) {
-                if(!Character.isJavaIdentifierPart(c)) {
+                if (!Character.isJavaIdentifierPart(c)) {
                     sb.append("_");
                 } else if (sb.length() == 0 && !Character.isJavaIdentifierStart(c)) {
                     sb.append("_").append(c);
@@ -41,6 +41,6 @@ public static String normalize(String s, String reservedSuffix) {
         }
     }
 
-    private Naming() {}
+    private Naming() { }
 
 }

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/SQLCodegenModule.java
Patch:
@@ -55,14 +55,14 @@ protected void configure() {
         bind(Configuration.class, new Configuration(SQLTemplates.DEFAULT));
         bind(Serializer.class, MetaDataSerializer.class);
         bind(QueryTypeFactory.class, SQLQueryTypeFactory.class);
-        bind(BEAN_SERIALIZER, (Class<?>)null);
+        bind(BEAN_SERIALIZER, (Class<?>) null);
 
         bind(INNER_CLASSES_FOR_KEYS, false);
         bind(BEAN_PREFIX, "");
         bind(BEAN_SUFFIX, "");
         bind(BEAN_PACKAGE_NAME, "com.example");
         bind(PACKAGE_NAME, "com.example");
-        bind(BEAN_SERIALIZER, (Class<?>)null);
+        bind(BEAN_SERIALIZER, (Class<?>) null);
         bind(SCHEMA_TO_PACKAGE, false);
         bindInstance(ENTITYPATH_TYPE, RelationalPathBase.class);
         bind(COLUMN_COMPARATOR, null);

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/SQLQueryTypeFactory.java
Patch:
@@ -61,7 +61,7 @@ public Type create(Type type) {
             packageName = this.packageName + packageName.substring(beanPackageName.length());
         }
         String simpleName = type.getSimpleName();
-        simpleName = prefix + simpleName.substring(stripStart, simpleName.length()-stripEnd) + suffix;
+        simpleName = prefix + simpleName.substring(stripStart, simpleName.length() - stripEnd) + suffix;
         return new SimpleType(packageName + "." + simpleName, packageName, simpleName);
     }
 

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/SpatialSupport.java
Patch:
@@ -96,6 +96,6 @@ public static void addSupport(AbstractModule module) {
         addImports(module);
     }
 
-    private SpatialSupport() {}
+    private SpatialSupport() { }
 
 }

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/Export.java
Patch:
@@ -6,7 +6,7 @@
 
 public final class Export {
 
-    private Export() {}
+    private Export() { }
 
     public static void main(String[] args) throws Exception {
         Class.forName("com.mysql.jdbc.Driver");

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/MetaDataExporterTest.java
Patch:
@@ -183,8 +183,8 @@ public void Multiple() throws SQLException {
             this.exportColumns = exportColumns;
             this.beanSerializer = beanSerializer;
             test(namePrefix, nameSuffix, beanPrefix, beanSuffix,
-                 ns, "target/multiple_"+counter, withBeans, withInnerClasses, withOriginalPositioning);
-        }}}}}}}}}}}}
+                 ns, "target/multiple_" + counter, withBeans, withInnerClasses, withOriginalPositioning);
+        } } } } } } } } } } } }
     }
 
     @Test

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/MetaDataSerializerTest.java
Patch:
@@ -88,7 +88,7 @@ private void compile(MetaDataExporter exporter) {
         JavaCompiler compiler = new SimpleCompiler();
         Set<String> classes = exporter.getClasses();
         int compilationResult = compiler.run(null, null, null, classes.toArray(new String[classes.size()]));
-        if(compilationResult == 0) {
+        if (compilationResult == 0) {
             System.out.println("Compilation is successful");
         } else {
             Assert.fail("Compilation Failed");

File: querydsl-sql/src/main/java/com/querydsl/sql/ColumnMetadata.java
Patch:
@@ -35,7 +35,7 @@ public static ColumnMetadata getColumnMetadata(Path<?> path) {
         if (parent instanceof EntityPath) {
             Object columnMetadata = ((EntityPath<?>) parent).getMetadata(path);
             if (columnMetadata instanceof ColumnMetadata) {
-                return (ColumnMetadata)columnMetadata;
+                return (ColumnMetadata) columnMetadata;
             }
         }
         return ColumnMetadata.named(path.getMetadata().getName());
@@ -52,7 +52,7 @@ public static String getName(Path<?> path) {
         if (parent instanceof EntityPath) {
             Object columnMetadata = ((EntityPath<?>) parent).getMetadata(path);
             if (columnMetadata instanceof ColumnMetadata) {
-                return ((ColumnMetadata)columnMetadata).getName();
+                return ((ColumnMetadata) columnMetadata).getName();
             }
         }
         return path.getMetadata().getName();
@@ -165,7 +165,7 @@ public boolean equals(Object o) {
         if (o == this) {
             return true;
         } else if (o instanceof ColumnMetadata) {
-            ColumnMetadata md = (ColumnMetadata)o;
+            ColumnMetadata md = (ColumnMetadata) o;
             return name.equals(md.name)
                 && Objects.equal(jdbcType, md.jdbcType)
                 && nullable == md.nullable

File: querydsl-sql/src/main/java/com/querydsl/sql/Configuration.java
Patch:
@@ -228,17 +228,17 @@ public <T> void set(PreparedStatement stmt, Path<?> path, int i, T value) throws
                 stmt.setNull(i, Types.NULL);
             }
         } else {
-            getType(path, (Class)value.getClass()).setValue(stmt, i, value);
+            getType(path, (Class) value.getClass()).setValue(stmt, i, value);
         }
     }
 
     @SuppressWarnings({ "unchecked", "rawtypes" })
     private <T> Type<T> getType(@Nullable Path<?> path, Class<T> clazz) {
         if (hasTableColumnTypes && path != null && !clazz.equals(Null.class)
                 && path.getMetadata().getParent() instanceof RelationalPath) {
-            String table = ((RelationalPath)path.getMetadata().getParent()).getTableName();
+            String table = ((RelationalPath) path.getMetadata().getParent()).getTableName();
             String column = ColumnMetadata.getName(path);
-            Type<T> type = (Type)javaTypeMapping.getType(table, column);
+            Type<T> type = (Type) javaTypeMapping.getType(table, column);
             if (type != null) {
                 return type;
             }

File: querydsl-sql/src/main/java/com/querydsl/sql/DefaultSQLExceptionTranslator.java
Patch:
@@ -55,5 +55,5 @@ private static boolean containsAdditionalExceptions(SQLException e) {
         return e.getNextException() != null;
     }
 
-    private DefaultSQLExceptionTranslator() {}
+    private DefaultSQLExceptionTranslator() { }
 }

File: querydsl-sql/src/main/java/com/querydsl/sql/ForeignKey.java
Patch:
@@ -74,7 +74,7 @@ public List<String> getForeignColumns() {
     public Predicate on(RelationalPath<E> entity) {
         BooleanBuilder builder = new BooleanBuilder();
         for (int i = 0; i < localColumns.size(); i++) {
-            Expression<Object> local = (Expression<Object>)localColumns.get(i);
+            Expression<Object> local = (Expression<Object>) localColumns.get(i);
             Expression<?> foreign = ExpressionUtils.path(local.getType(), entity, foreignColumns.get(i));
             builder.and(ExpressionUtils.eq(local,foreign));
         }

File: querydsl-sql/src/main/java/com/querydsl/sql/JavaTypeMapping.java
Patch:
@@ -100,7 +100,7 @@ public <T> Type<T> getType(Class<T> clazz) {
             if (resolvedType != null) {
                 resolvedTypesByClass.put(clazz, resolvedType);
             } else {
-                return (Type)DEFAULT;
+                return (Type) DEFAULT;
             }
         }
         return (Type<T>) resolvedType;
@@ -117,7 +117,7 @@ private Type<?> findType(Class<?> clazz) {
                 return defaultTypes.get(cl);
             }
             cl = cl.getSuperclass();
-        } while(!cl.equals(Object.class));
+        } while (!cl.equals(Object.class));
 
         //Look for a registered type in any implemented interfaces
         Set<Class<?>> interfaces = ReflectionUtils.getImplementedInterfaces(clazz);

File: querydsl-sql/src/main/java/com/querydsl/sql/OracleTemplates.java
Patch:
@@ -100,8 +100,8 @@ public OracleTemplates(char escape, boolean quote) {
         add(Ops.MathOps.LOG, "log({1},{0})");
         add(Ops.MathOps.COT, "(cos({0}) / sin({0}))");
         add(Ops.MathOps.COTH, "(exp({0} * 2) + 1) / (exp({0} * 2) - 1)");
-        add(Ops.MathOps.DEG, "({0} * 180 / "+Math.PI+")");
-        add(Ops.MathOps.RAD, "({0} * "+Math.PI+" / 180)");
+        add(Ops.MathOps.DEG, "({0} * 180 / " + Math.PI + ")");
+        add(Ops.MathOps.RAD, "({0} * " + Math.PI + " / 180)");
 
         // Date / time
         add(Ops.DateTimeOps.DATE, "trunc({0})");

File: querydsl-sql/src/main/java/com/querydsl/sql/PostgreSQLTemplates.java
Patch:
@@ -140,7 +140,7 @@ public PostgreSQLTemplates(char escape, boolean quote) {
         String monthsDiff = "(" + yearsDiff + " * 12 + date_part('month', age({1}, {0})))";
         String weeksDiff =  "trunc((cast({1} as date) - cast({0} as date))/7)";
         String daysDiff = "(cast({1} as date) - cast({0} as date))";
-        String hoursDiff = "("+ daysDiff + " * 24 + date_part('hour', age({1}, {0})))";
+        String hoursDiff = "(" + daysDiff + " * 24 + date_part('hour', age({1}, {0})))";
         String minutesDiff = "(" + hoursDiff + " * 60 + date_part('minute', age({1}, {0})))";
         String secondsDiff =  "(" +  minutesDiff + " * 60 + date_part('second', age({1}, {0})))";
 

File: querydsl-sql/src/main/java/com/querydsl/sql/ProjectableSQLQuery.java
Patch:
@@ -92,7 +92,7 @@ public Q addJoinFlag(String flag) {
     @SuppressWarnings("unchecked")
     public Q addJoinFlag(String flag, JoinFlag.Position position) {
         queryMixin.addJoinFlag(new JoinFlag(flag, position));
-        return (Q)this;
+        return (Q) this;
     }
 
     /**
@@ -430,7 +430,7 @@ private Set<Path<?>> getRootPaths(Collection<? extends Expression<?>> exprs) {
 
     private Collection<? extends Expression<?>> expandProjection(Expression<?> expr) {
         if (expr instanceof FactoryExpression) {
-            return ((FactoryExpression)expr).getArgs();
+            return ((FactoryExpression) expr).getArgs();
         } else {
             return ImmutableList.of(expr);
         }

File: querydsl-sql/src/main/java/com/querydsl/sql/QBeans.java
Patch:
@@ -48,7 +48,7 @@ public QBeans(RelationalPath<?>... beanPaths) {
                     bindings.put(column.getMetadata().getName(), column);
                     listBuilder.add(column);
                 }
-                mapBuilder.put(path, Projections.bean((Class)path.getType(), bindings));
+                mapBuilder.put(path, Projections.bean((Class) path.getType(), bindings));
             }
             expressions = listBuilder.build();
             qBeans = mapBuilder.build();

File: querydsl-sql/src/main/java/com/querydsl/sql/RelationalFunctionCall.java
Patch:
@@ -37,7 +37,7 @@ private static Template createTemplate(String function, int argCount) {
             if (i > 0) {
                 builder.append(", ");
             }
-            builder.append("{"+ i + "}");
+            builder.append("{" + i + "}");
         }
         builder.append(")");
         return TemplateFactory.DEFAULT.create(builder.toString());
@@ -47,7 +47,7 @@ private static Template createTemplate(String function, int argCount) {
 
     protected RelationalFunctionCall(Class<? extends T> type, String function, Object... args) {
         super(ExpressionUtils.template(type, createTemplate(function, args.length), args));
-        templateMixin = (TemplateExpression<T>)mixin;
+        templateMixin = (TemplateExpression<T>) mixin;
     }
 
     @Override

File: querydsl-sql/src/main/java/com/querydsl/sql/RelationalPathExtractor.java
Patch:
@@ -87,7 +87,7 @@ public Set<RelationalPath<?>> visit(ParamExpression<?> expr, Set<RelationalPath<
     public Set<RelationalPath<?>> visit(Path<?> expr, Set<RelationalPath<?>> known) {
         if (expr.getMetadata().isRoot()) {
             if (expr instanceof RelationalPath) {
-                known = add(known, (RelationalPath<?>)expr);
+                known = add(known, (RelationalPath<?>) expr);
             }
         } else {
             known = expr.getMetadata().getParent().accept(this, known);
@@ -123,7 +123,7 @@ public Set<RelationalPath<?>> visit(SubQueryExpression<?> expr, Set<RelationalPa
     public Set<RelationalPath<?>> visit(TemplateExpression<?> expr, Set<RelationalPath<?>> known) {
         for (Object arg : expr.getArgs()) {
             if (arg instanceof Expression<?>) {
-                known = ((Expression<?>)arg).accept(this, known);
+                known = ((Expression<?>) arg).accept(this, known);
             }
         }
         return known;
@@ -139,6 +139,6 @@ private Set<RelationalPath<?>> visitJoins(Iterable<JoinExpression> joins, Set<Re
         return known;
     }
 
-    private RelationalPathExtractor() {}
+    private RelationalPathExtractor() { }
 
 }

File: querydsl-sql/src/main/java/com/querydsl/sql/RelationalPathUtils.java
Patch:
@@ -46,7 +46,7 @@ public static <T> FactoryExpression<T> createProjection(RelationalPath<T> path)
 
     private static <T> FactoryExpression<T> createConstructorProjection(RelationalPath<T> path) {
         Expression<?>[] exprs = path.getColumns().toArray(new Expression[path.getColumns().size()]);
-        return Projections.<T>constructor((Class)path.getType(), exprs);
+        return Projections.<T>constructor((Class) path.getType(), exprs);
     }
 
     private static <T> FactoryExpression<T> createBeanProjection(RelationalPath<T> path) {
@@ -57,9 +57,9 @@ private static <T> FactoryExpression<T> createBeanProjection(RelationalPath<T> p
         if (bindings.isEmpty()) {
             throw new IllegalArgumentException("No bindings could be derived from " + path);
         }
-        return Projections.<T>fields((Class)path.getType(), bindings);
+        return Projections.<T>fields((Class) path.getType(), bindings);
     }
 
-    private RelationalPathUtils() {}
+    private RelationalPathUtils() { }
 
 }

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLExpressions.java
Patch:
@@ -82,7 +82,7 @@ private static Expression[] convertToExpressions(Object... args) {
         Expression<?>[] exprs = new Expression<?>[args.length];
         for (int i = 0; i < args.length; i++) {
             if (args[i] instanceof Expression) {
-                exprs[i] = (Expression)args[i];
+                exprs[i] = (Expression) args[i];
             } else {
                 exprs[i] = ConstantImpl.create(args[i]);
             }
@@ -664,7 +664,7 @@ public static <T> WindowOver<T> nthValue(Expression<T> expr, Expression<? extend
      * @return ntile(num)
      */
     public static <T extends Number & Comparable> WindowOver<T> ntile(T num) {
-        return new WindowOver<T>((Class<T>)num.getClass(), SQLOps.NTILE, ConstantImpl.create(num));
+        return new WindowOver<T>((Class<T>) num.getClass(), SQLOps.NTILE, ConstantImpl.create(num));
     }
 
     /**
@@ -1182,6 +1182,6 @@ public static StringExpression right(Expression<String> lhs, Expression<Integer>
         return Expressions.stringOperation(Ops.StringOps.RIGHT, lhs, rhs);
     }
 
-    private SQLExpressions() {}
+    private SQLExpressions() { }
 
 }

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLResultIterator.java
Patch:
@@ -59,7 +59,7 @@ public void close() {
                     stmt.close();
                 }
             }
-        } catch(SQLException e) {
+        } catch (SQLException e) {
             throw configuration.translate(e);
         }
     }

File: querydsl-sql/src/main/java/com/querydsl/sql/SchemaAndTable.java
Patch:
@@ -42,7 +42,7 @@ public boolean equals(Object o) {
         if (o == this) {
             return true;
         } else if (o instanceof SchemaAndTable) {
-            SchemaAndTable st = (SchemaAndTable)o;
+            SchemaAndTable st = (SchemaAndTable) o;
             return Objects.equal(st.schema, schema) && Objects.equal(st.table, table);
         } else {
             return false;

File: querydsl-sql/src/main/java/com/querydsl/sql/UnionUtils.java
Patch:
@@ -40,6 +40,6 @@ public static <T> Expression<T> union(List<SubQueryExpression<T>> union, Path<T>
         return ExpressionUtils.as(rv, alias);
     }
 
-    private UnionUtils() {}
+    private UnionUtils() { }
 
 }

File: querydsl-sql/src/main/java/com/querydsl/sql/WindowFunction.java
Patch:
@@ -118,7 +118,7 @@ public boolean equals(Object o) {
         if (o == this) {
             return true;
         } else if (o instanceof WindowFunction) {
-            WindowFunction<?> so = (WindowFunction<?>)o;
+            WindowFunction<?> so = (WindowFunction<?>) o;
             return so.target.equals(target)
                 && so.partitionBy.equals(partitionBy)
                 && so.orderBy.equals(orderBy);

File: querydsl-sql/src/main/java/com/querydsl/sql/WithinGroup.java
Patch:
@@ -73,7 +73,7 @@ public SimpleExpression<T> getValue() {
                     args.add(ExpressionUtils.orderBy(orderBy));
                 }
                 builder.append(")");
-                value = Expressions.template((Class)WithinGroup.this.getType(), builder.toString(), args.build());
+                value = Expressions.template((Class) WithinGroup.this.getType(), builder.toString(), args.build());
             }
             return value;
         }

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/AbstractSQLClause.java
Patch:
@@ -148,7 +148,7 @@ protected void setParameters(PreparedStatement stmt, List<?> objects,
                     }
                     o = params.get(o);
                 }
-                configuration.set(stmt, constantPaths.get(i), i+1, o);
+                configuration.set(stmt, constantPaths.get(i), i + 1, o);
             } catch (SQLException e) {
                 throw configuration.translate(e);
             }

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/EmptyResultSet.java
Patch:
@@ -31,7 +31,7 @@ public final class EmptyResultSet implements ResultSet {
 
     public static final ResultSet DEFAULT = new EmptyResultSet();
 
-    private EmptyResultSet() {}
+    private EmptyResultSet() { }
 
     @Override
     public <T> T unwrap(Class<T> iface) throws SQLException {

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/SQLUpdateClause.java
Patch:
@@ -235,7 +235,7 @@ public List<SQLBindings> getSQL() {
     @Override
     public <T> SQLUpdateClause set(Path<T> path, T value) {
         if (value instanceof Expression<?>) {
-            updates.put(path, (Expression<?>)value);
+            updates.put(path, (Expression<?>) value);
         } else if (value != null) {
             updates.put(path, ConstantImpl.create(value));
         } else {
@@ -327,7 +327,7 @@ public <T> SQLUpdateClause populate(T obj, Mapper<T> mapper) {
         Map<Path<?>, Object> values = mapper.createMap(entity, obj);
         for (Map.Entry<Path<?>, Object> entry : values.entrySet()) {
             if (!primaryKeyColumns.contains(entry.getKey())) {
-                set((Path)entry.getKey(), entry.getValue());
+                set((Path) entry.getKey(), entry.getValue());
             }
         }
         return this;

File: querydsl-sql/src/main/java/com/querydsl/sql/mssql/SQLServerGrammar.java
Patch:
@@ -22,7 +22,7 @@
  */
 final class SQLServerGrammar {
 
-    private SQLServerGrammar() {}
+    private SQLServerGrammar() { }
 
     static String tableHints(SQLServerTableHints... tableHints) {
         StringBuilder hints = new StringBuilder(" with ").append("(");

File: querydsl-sql/src/main/java/com/querydsl/sql/oracle/OracleGrammar.java
Patch:
@@ -26,7 +26,7 @@
  */
 public final class OracleGrammar {
 
-    private OracleGrammar() {}
+    private OracleGrammar() { }
 
     public static final NumberExpression<Integer> level = Expressions.numberTemplate(Integer.class, "level");
 

File: querydsl-sql/src/main/java/com/querydsl/sql/teradata/SetQueryBandClause.java
Patch:
@@ -59,7 +59,7 @@ public SetQueryBandClause forSession() {
         return this;
     }
 
-    public SetQueryBandClause forTransaction(){
+    public SetQueryBandClause forTransaction() {
         queryString = null;
         forSession = false;
         return this;

File: querydsl-sql/src/main/java/com/querydsl/sql/types/ArrayType.java
Patch:
@@ -57,7 +57,7 @@ public Class<T> getReturnedClass() {
     public T getValue(ResultSet rs, int startIndex) throws SQLException {
         Array arr = rs.getArray(startIndex);
         if (arr != null) {
-            Object[] rv = (Object[])arr.getArray();
+            Object[] rv = (Object[]) arr.getArray();
             if (convertPrimitives) {
                 // primitives out
                 Object rv2 = java.lang.reflect.Array.newInstance(type.getComponentType(), rv.length);
@@ -78,9 +78,9 @@ public void setValue(PreparedStatement st, int startIndex, T value) throws SQLEx
             int length = java.lang.reflect.Array.getLength(value);
             Object value2 = java.lang.reflect.Array.newInstance(Primitives.wrap(type.getComponentType()), length);
             copy(value, value2, length);
-            value = (T)value2;
+            value = (T) value2;
         }
-        Array arr = st.getConnection().createArrayOf(typeName, (Object[])value);
+        Array arr = st.getConnection().createArrayOf(typeName, (Object[]) value);
         st.setArray(startIndex, arr);
     }
 }

File: querydsl-sql/src/main/java/com/querydsl/sql/types/EnumByOrdinalType.java
Patch:
@@ -45,7 +45,7 @@ public Class<T> getReturnedClass() {
 
     @Override
     public T getValue(ResultSet rs, int startIndex) throws SQLException {
-        Integer ordinal = (Integer)rs.getObject(startIndex);
+        Integer ordinal = (Integer) rs.getObject(startIndex);
         return ordinal != null ? type.getEnumConstants()[ordinal] : null;
     }
 

File: querydsl-sql/src/main/java/com/querydsl/sql/types/Null.java
Patch:
@@ -28,6 +28,6 @@ public final class Null {
 
     public static final Constant<Null> CONSTANT = ConstantImpl.create(DEFAULT);
 
-    private Null() {}
+    private Null() { }
 
 }

File: querydsl-sql/src/main/java/com/querydsl/sql/types/StringAsObjectType.java
Patch:
@@ -37,9 +37,9 @@ public StringAsObjectType(int type) {
     public String getValue(ResultSet rs, int startIndex) throws SQLException {
         Object o = rs.getObject(startIndex);
         if (o instanceof String) {
-            return (String)o;
+            return (String) o;
         } else if (o instanceof Clob) {
-            Clob clob = (Clob)o;
+            Clob clob = (Clob) o;
             return clob.getSubString(1, (int) clob.length());
         } else if (o != null) {
             return o.toString();

File: querydsl-sql/src/test/java/com/querydsl/sql/AbstractSQLTemplatesTest.java
Patch:
@@ -78,11 +78,11 @@ public void Union() {
         } else {
             String dummyTable = templates.getDummyTable();
             assertEquals(
-                    "(select 1 as col1 from "+dummyTable+")\n" +
+                    "(select 1 as col1 from " + dummyTable + ")\n" +
                     "union\n" +
-                    "(select 2 from "+dummyTable+")\n" +
+                    "(select 2 from " + dummyTable + ")\n" +
                     "union\n" +
-                    "(select 3 from "+dummyTable+")", union.toString());
+                    "(select 3 from " + dummyTable + ")", union.toString());
         }
     }
 

File: querydsl-sql/src/test/java/com/querydsl/sql/Constants.java
Patch:
@@ -22,7 +22,7 @@
 
 public final class Constants {
 
-    private Constants() {}
+    private Constants() { }
 
     public static final java.sql.Date date;
 

File: querydsl-sql/src/test/java/com/querydsl/sql/JoinUsageTest.java
Patch:
@@ -22,7 +22,7 @@
 
 public class JoinUsageTest {
 
-    @Test(expected=IllegalStateException.class)
+    @Test(expected = IllegalStateException.class)
     @Ignore
     public void Join_Already_Declared() {
         QSurvey survey = QSurvey.survey;

File: querydsl-sql/src/test/java/com/querydsl/sql/KeyTest.java
Patch:
@@ -24,7 +24,7 @@
 public class KeyTest {
 
 //    @Table("USER")
-    public static class QUser extends RelationalPathBase<QUser>{
+    public static class QUser extends RelationalPathBase<QUser> {
 
         public final NumberPath<Integer> id = createNumber("id", Integer.class);
 

File: querydsl-sql/src/test/java/com/querydsl/sql/MergeBase.java
Patch:
@@ -93,7 +93,7 @@ public void Merge_with_Keys_Columns_and_Values_using_null() {
         // keys + columns + values
         assertEquals(1, merge(survey).keys(survey.id)
             .set(survey.id, 5)
-            .set(survey.name, (String)null).execute());
+            .set(survey.name, (String) null).execute());
     }
 
     @Test

File: querydsl-sql/src/test/java/com/querydsl/sql/Multikey.java
Patch:
@@ -68,7 +68,7 @@ public boolean equals(Object o) {
         if (!(o instanceof Multikey)) {
             return false;
         }
-        Multikey obj = (Multikey)o;
+        Multikey obj = (Multikey) o;
         return id.equals(obj.id) && id2.equals(obj.id2) && id3.equals(obj.id3);
     }
 
@@ -87,7 +87,7 @@ public int hashCode() {
 
     @Override
     public String toString() {
-        return "Multikey#" + id+ ";" + id2+ ";" + id3;
+        return "Multikey#" + id + ";" + id2 + ";" + id3;
     }
 
 }

File: querydsl-sql/src/test/java/com/querydsl/sql/QGeneratedKeysEntity.java
Patch:
@@ -18,7 +18,7 @@
 import com.querydsl.core.types.dsl.StringPath;
 
 //@Table("GENERATED_KEYS")
-public class QGeneratedKeysEntity extends RelationalPathBase<QGeneratedKeysEntity>{
+public class QGeneratedKeysEntity extends RelationalPathBase<QGeneratedKeysEntity> {
 
     private static final long serialVersionUID = 2002306246819687158L;
 

File: querydsl-sql/src/test/java/com/querydsl/sql/QProjection.java
Patch:
@@ -22,7 +22,7 @@
 import com.querydsl.core.types.FactoryExpression;
 import com.querydsl.core.types.Visitor;
 
-public class QProjection extends ExpressionBase<Projection> implements FactoryExpression<Projection>{
+public class QProjection extends ExpressionBase<Projection> implements FactoryExpression<Projection> {
 
     private static final long serialVersionUID = -7330905848558102164L;
 
@@ -57,7 +57,7 @@ public <T> Expression<T> getExpr(Expression<T> expr) {
 
             @Override
             public <T> Expression<T> getExpr(int index, Class<T> type) {
-                T val = (T)args[index];
+                T val = (T) args[index];
                 return val != null ? SimpleConstant.create(val) : null;
             }
 

File: querydsl-sql/src/test/java/com/querydsl/sql/SQLSerializerTest.java
Patch:
@@ -226,7 +226,7 @@ public void Complex_SubQuery() {
         // create sub queries
         List<SubQueryExpression<Tuple>> sq = new ArrayList<SubQueryExpression<Tuple>>();
         String[] strs = new String[]{"a","b","c"};
-        for(String str : strs) {
+        for (String str : strs) {
             Expression<Boolean> alias = Expressions.cases().when(survey.name.eq(str)).then(true).otherwise(false);
             sq.add(select(survey.name, alias).from(survey).distinct());
         }

File: querydsl-sql/src/test/java/com/querydsl/sql/SQLSubQueryTest.java
Patch:
@@ -53,7 +53,7 @@ public Class<?> getType() {
     @Test
     public void List() {
         SubQueryExpression<?> subQuery = select(employee.id, Expressions.constant("XXX"), employee.firstname).from(employee);
-        List<? extends Expression<?>> exprs = ((FactoryExpression)subQuery.getMetadata().getProjection()).getArgs();
+        List<? extends Expression<?>> exprs = ((FactoryExpression) subQuery.getMetadata().getProjection()).getArgs();
         assertEquals(employee.id, exprs.get(0));
         assertEquals(ConstantImpl.create("XXX") , exprs.get(1));
         assertEquals(employee.firstname, exprs.get(2));
@@ -97,7 +97,7 @@ public void In_Union2() {
     @Test
     public void Unique() {
         SubQueryExpression<?> subQuery = select(employee.id, Expressions.constant("XXX"), employee.firstname).from(employee);
-        List<? extends Expression<?>> exprs = ((FactoryExpression)subQuery.getMetadata().getProjection()).getArgs();
+        List<? extends Expression<?>> exprs = ((FactoryExpression) subQuery.getMetadata().getProjection()).getArgs();
         assertEquals(employee.id, exprs.get(0));
         assertEquals(ConstantImpl.create("XXX") , exprs.get(1));
         assertEquals(employee.firstname, exprs.get(2));

File: querydsl-sql/src/test/java/com/querydsl/sql/SQLTemplatesRegistryDump.java
Patch:
@@ -5,7 +5,7 @@
 
 public final class SQLTemplatesRegistryDump {
 
-    private SQLTemplatesRegistryDump() {}
+    private SQLTemplatesRegistryDump() { }
 
     public static void main(String[] args) throws SQLException, ClassNotFoundException {
         Connections.initCubrid();

File: querydsl-sql/src/test/java/com/querydsl/sql/StoredProcedures.java
Patch:
@@ -17,7 +17,7 @@
 
 public final class StoredProcedures {
 
-    private StoredProcedures() {}
+    private StoredProcedures() { }
 
     public static void main(String[] args) throws ClassNotFoundException, SQLException {
         Class.forName("org.apache.derby.jdbc.EmbeddedDriver");

File: querydsl-sql/src/test/java/com/querydsl/sql/TypesBase.java
Patch:
@@ -47,7 +47,7 @@ public void CreateTables() {
             c.execute();
             RelationalPath<Object> entityPath = new RelationalPathBase<Object>(Object.class, tableName, "PUBLIC", tableName);
             Path<?> columnPath = Expressions.path(entry.getKey(), entityPath, "col");
-            insert(entityPath).set((Path)columnPath, entry.getValue()).execute();
+            insert(entityPath).set((Path) columnPath, entry.getValue()).execute();
             new DropTableClause(connection, configuration, tableName).execute();
         }
 
@@ -70,7 +70,7 @@ public void DumpTypes() throws SQLException {
                 String classname = rs.getString(4);
                 String datatype = rs.getString(5);
                 String remarks = rs.getString(6);
-                String baseType= rs.getString(7);
+                String baseType = rs.getString(7);
                 System.out.println(name + " " + classname + " " + datatype + " " +
                                    remarks + " " + baseType);
 

File: querydsl-sql/src/test/java/com/querydsl/sql/TypesDump.java
Patch:
@@ -10,7 +10,7 @@
 
 public final class TypesDump {
 
-    private TypesDump() {}
+    private TypesDump() { }
 
     public static void main(String[] args) throws Exception {
         Map<Integer, String> typeConstants = Maps.newHashMap();

File: querydsl-sql/src/test/java/com/querydsl/sql/UpdateBase.java
Patch:
@@ -123,7 +123,7 @@ public void SetNull() {
     @Test
     public void SetNull2() {
         long count = query().from(survey).fetchCount();
-        assertEquals(count, update(survey).set(survey.name, (String)null).execute());
+        assertEquals(count, update(survey).set(survey.name, (String) null).execute());
     }
 
     @Test

File: querydsl-sql/src/test/java/com/querydsl/sql/dml/SQLDeleteClauseTest.java
Patch:
@@ -12,7 +12,7 @@
 
 public class SQLDeleteClauseTest {
 
-    @Test(expected=IllegalArgumentException.class)
+    @Test(expected = IllegalArgumentException.class)
     @Ignore
     public void Error() {
         QEmployee emp1 = new QEmployee("emp1");

File: querydsl-sql/src/test/java/com/querydsl/sql/domain/Employee.java
Patch:
@@ -42,7 +42,7 @@ public class Employee {
     //@Column("SUPERIOR_ID")
     private Integer superiorId;
 
-    public Employee() {}
+    public Employee() { }
 
     public Employee(int id) {
         this.id = id;

File: querydsl-sql/src/test/java/com/querydsl/sql/domain/QSurvey.java
Patch:
@@ -25,7 +25,7 @@
 
 //@Schema("PUBLIC")
 //@Table("SURVEY")
-public class QSurvey extends RelationalPathBase<QSurvey>{
+public class QSurvey extends RelationalPathBase<QSurvey> {
 
     private static final long serialVersionUID = -7427577079709192842L;
 

File: querydsl-sql/src/test/java/com/querydsl/sql/domain/QSurveyNoPK.java
Patch:
@@ -22,7 +22,7 @@
 
 //@Schema("PUBLIC")
 //@Table("SURVEY")
-public class QSurveyNoPK extends RelationalPathBase<QSurveyNoPK>{
+public class QSurveyNoPK extends RelationalPathBase<QSurveyNoPK> {
 
     private static final long serialVersionUID = -7427577079709192842L;
 

File: querydsl-sql/src/test/java/com/querydsl/sql/postgresql/PostgreSQLQueryTest.java
Patch:
@@ -16,9 +16,7 @@ public class PostgreSQLQueryTest {
 
     @Before
     public void setUp() {
-        query = new PostgreSQLQuery<Void>(null, new PostgreSQLTemplates() {{
-            newLineToSingleSpace();
-        }});
+        query = new PostgreSQLQuery<Void>(null, PostgreSQLTemplates.builder().newLineToSingleSpace().build());
     }
 
     @Test

File: querydsl-mongodb/src/main/java/com/querydsl/mongodb/JoinBuilder.java
Patch:
@@ -43,7 +43,7 @@ public JoinBuilder(QueryMixin<Q> queryMixin, Path<?> ref, Path<T> target) {
     }
 
     public Q on(Predicate... conditions) {
-        queryMixin.addJoin(JoinType.JOIN, ExpressionUtils.as((Path)ref, target));
+        queryMixin.addJoin(JoinType.JOIN, ExpressionUtils.as((Path) ref, target));
         queryMixin.on(conditions);
         return queryMixin.getSelf();
     }

File: querydsl-mongodb/src/main/java/com/querydsl/mongodb/MongodbExpressions.java
Patch:
@@ -26,7 +26,7 @@
  */
 public final class MongodbExpressions {
 
-    private MongodbExpressions() {}
+    private MongodbExpressions() { }
 
     /**
      * Finds the closest points relative to the given location and orders the results with decreasing proximity

File: querydsl-mongodb/src/test/java/com/querydsl/mongodb/MongodbQueryTest.java
Patch:
@@ -73,7 +73,7 @@ public void before() throws UnknownHostException, MongoException {
         ds.delete(ds.createQuery(MapEntity.class));
 
         tampere = new City("Tampere", 61.30, 23.50);
-        helsinki= new City("Helsinki", 60.15, 20.03);
+        helsinki = new City("Helsinki", 60.15, 20.03);
 
         u1 = addUser("Jaakko", "Jantunen", 20, new Address("Aakatu", "00100", helsinki),
                 new Address("Aakatu1", "00100", helsinki),
@@ -221,7 +221,7 @@ public void UniqueResult() {
         assertEquals("Jantunen", where(user.firstName.eq("Jaakko")).fetchOne().getLastName());
     }
 
-    @Test(expected=NonUniqueResultException.class)
+    @Test(expected = NonUniqueResultException.class)
     public void UniqueResultContract() {
         where(user.firstName.isNotNull()).fetchOne();
     }

File: querydsl-mongodb/src/test/java/com/querydsl/mongodb/MongodbSerializerTest.java
Patch:
@@ -123,8 +123,8 @@ public void Equals() {
         assertQuery(year.eq(1), dbo("year",1));
         assertQuery(gross.eq(1.0D), dbo("gross", 1.0D));
         assertQuery(longField.eq(1L), dbo("longField", 1L));
-        assertQuery(shortField.eq((short)1), dbo("shortField", 1));
-        assertQuery(byteField.eq((byte)1), dbo("byteField", 1L));
+        assertQuery(shortField.eq((short) 1), dbo("shortField", 1));
+        assertQuery(byteField.eq((byte) 1), dbo("byteField", 1L));
         assertQuery(floatField.eq(1.0F), dbo("floatField", 1.0F));
 
         assertQuery(date.eq(dateVal), dbo("date", dateVal));

File: querydsl-mongodb/src/test/java/com/querydsl/mongodb/PackageVerification.java
Patch:
@@ -35,7 +35,7 @@ public class PackageVerification {
     @Test
     public void Verify_Package() throws Exception {
         String version = System.getProperty("version");
-        verify(new File("target/querydsl-mongodb-"+version+"-apt-one-jar.jar"));
+        verify(new File("target/querydsl-mongodb-" + version + "-apt-one-jar.jar"));
     }
 
     private void verify(File oneJar) throws Exception {

File: querydsl-mongodb/src/test/java/com/querydsl/mongodb/domain/City.java
Patch:
@@ -16,7 +16,7 @@
 
 public final class City {
 
-    public City() {}
+    public City() { }
 
     public City(String name, Double latitude, Double longitude) {
         this.name = name;

File: querydsl-mongodb/src/test/java/com/querydsl/mongodb/domain/GeoEntity.java
Patch:
@@ -24,7 +24,7 @@ public GeoEntity(double l1, double l2) {
         location = new Double[]{l1, l2};
     }
 
-    public GeoEntity() {}
+    public GeoEntity() { }
 
     public Double[] getLocation() {
         return location;

File: querydsl-mongodb/src/test/java/com/querydsl/mongodb/domain/package-info.java
Patch:
@@ -1,4 +1,4 @@
-@Config(entityAccessors=true)
+@Config(entityAccessors = true)
 package com.querydsl.mongodb.domain;
 
 import com.querydsl.core.annotations.Config;

File: querydsl-maven-plugin/src/main/java/com/querydsl/maven/AbstractMetaDataExportMojo.java
Patch:
@@ -397,15 +397,15 @@ public void execute() throws MojoExecutionException, MojoFailureException {
 
             if (serializerClass != null) {
                 try {
-                    exporter.setSerializerClass((Class)Class.forName(serializerClass));
+                    exporter.setSerializerClass((Class) Class.forName(serializerClass));
                 } catch (ClassNotFoundException e) {
                     getLog().error(e);
                     throw new MojoExecutionException(e.getMessage(), e);
                 }
             }
             if (exportBeans) {
                 if (beanSerializerClass != null) {
-                    exporter.setBeanSerializerClass((Class)Class.forName(beanSerializerClass));
+                    exporter.setBeanSerializerClass((Class) Class.forName(beanSerializerClass));
                 } else {
                     BeanSerializer serializer = new BeanSerializer();
                     if (beanInterfaces != null) {
@@ -427,7 +427,7 @@ public void execute() throws MojoExecutionException, MojoFailureException {
                 }
 
             }
-            String sourceEncoding = (String)project.getProperties().get("project.build.sourceEncoding");
+            String sourceEncoding = (String) project.getProperties().get("project.build.sourceEncoding");
             if (sourceEncoding != null) {
                 exporter.setSourceEncoding(sourceEncoding);
             }

File: querydsl-maven-plugin/src/main/java/com/querydsl/maven/TypeMapping.java
Patch:
@@ -35,7 +35,7 @@ public void apply(Configuration configuration) {
         try {
             Class<?> typeClass = Class.forName(type);
             if (Type.class.isAssignableFrom(typeClass)) {
-                configuration.register(table, column, (Type<?>)typeClass.newInstance());
+                configuration.register(table, column, (Type<?>) typeClass.newInstance());
             } else {
                 configuration.register(table, column, typeClass);
             }

File: querydsl-lucene4/src/main/java/com/querydsl/lucene4/LuceneExpressions.java
Patch:
@@ -69,6 +69,6 @@ public static BooleanExpression fuzzyLike(Path<String> path, String value,
         return new QueryElement(new FuzzyQuery(term, maxEdits, prefixLength));
     }
 
-    private LuceneExpressions() {}
+    private LuceneExpressions() { }
 
 }

File: querydsl-lucene4/src/test/java/com/querydsl/lucene4/LuceneSerializerNotTokenizedTest.java
Patch:
@@ -107,7 +107,7 @@ public void Equals_By_Name_Matches() throws Exception {
         testQuery(person.name.eq("George Clooney"), "name:George Clooney", 1);
     }
 
-    @Test(expected=UnsupportedOperationException.class)
+    @Test(expected = UnsupportedOperationException.class)
     public void Equals_By_Name_Ignoring_Case_Does_Not_Match() throws Exception {
         testQuery(person.name.equalsIgnoreCase("george clooney"), "name:george clooney", 0);
     }

File: querydsl-lucene3/src/main/java/com/querydsl/lucene3/LuceneExpressions.java
Patch:
@@ -68,6 +68,6 @@ public static BooleanExpression fuzzyLike(Path<String> path, String value,
         return new QueryElement(new FuzzyQuery(term, minimumSimilarity, prefixLength));
     }
 
-    private LuceneExpressions() {}
+    private LuceneExpressions() { }
 
 }

File: querydsl-lucene3/src/test/java/com/querydsl/lucene3/LuceneSerializerNotTokenizedTest.java
Patch:
@@ -107,7 +107,7 @@ public void Equals_By_Name_Matches() throws Exception {
         testQuery(person.name.eq("George Clooney"), "name:George Clooney", 1);
     }
 
-    @Test(expected=UnsupportedOperationException.class)
+    @Test(expected = UnsupportedOperationException.class)
     public void Equals_By_Name_Ignoring_Case_Does_Not_Match() throws Exception {
         testQuery(person.name.equalsIgnoreCase("george clooney"), "name:george clooney", 0);
     }

File: querydsl-jpa-codegen/src/main/java/com/querydsl/jpa/codegen/Constants.java
Patch:
@@ -42,6 +42,6 @@ final class Constants {
             "TRAILING","TRIM","TRUE","TYPE","UNKNOWN","UPDATE","UPPER",
             "VALUE","WHEN","WHERE");
 
-    private Constants() {}
+    private Constants() { }
 
 }

File: querydsl-jpa-codegen/src/main/java/com/querydsl/jpa/codegen/JPADomainExporter.java
Patch:
@@ -182,15 +182,15 @@ private void handleProperty(EntityType entityType, Class<?> cl, Attribute<?,?> p
 
         if (p.isCollection()) {
             if (p instanceof MapAttribute) {
-                MapAttribute<?,?,?> map = (MapAttribute<?,?,?>)p;
+                MapAttribute<?,?,?> map = (MapAttribute<?,?,?>) p;
                 Type keyType = typeFactory.get(map.getKeyJavaType());
                 Type valueType = typeFactory.get(map.getElementType().getJavaType());
                 valueType = getPropertyType(p, valueType);
                 propertyType = new SimpleType(propertyType,
                         normalize(propertyType.getParameters().get(0), keyType),
                         normalize(propertyType.getParameters().get(1), valueType));
             } else {
-                Type valueType = typeFactory.get(((PluralAttribute<?,?,?>)p).getElementType().getJavaType());
+                Type valueType = typeFactory.get(((PluralAttribute<?,?,?>) p).getElementType().getJavaType());
                 valueType = getPropertyType(p, valueType);
                 propertyType = new SimpleType(propertyType,
                         normalize(propertyType.getParameters().get(0), valueType));
@@ -204,7 +204,7 @@ private void handleProperty(EntityType entityType, Class<?> cl, Attribute<?,?> p
     }
 
     private Type getPropertyType(Attribute<?, ?> p, Type propertyType) {
-        Temporal temporal = ((AnnotatedElement)p.getJavaMember()).getAnnotation(Temporal.class);
+        Temporal temporal = ((AnnotatedElement) p.getJavaMember()).getAnnotation(Temporal.class);
         if (temporal != null) {
             switch (temporal.value()) {
             case DATE: propertyType = propertyType.as(TypeCategory.DATE); break;

File: querydsl-jpa-codegen/src/test/java/com/querydsl/jpa/codegen/CompileUtils.java
Patch:
@@ -11,7 +11,7 @@
 
 public final class CompileUtils {
 
-    private CompileUtils() {}
+    private CompileUtils() { }
 
     private static final SimpleCompiler compiler = new SimpleCompiler();
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/AbstractSQLQuery.java
Patch:
@@ -56,9 +56,9 @@ protected boolean isEntityExpression(Expression<?> expr) {
 
     protected Expression<?> extractEntityExpression(Expression<?> expr) {
         if (expr instanceof Operation) {
-            return ((Operation<?>)expr).getArg(0);
+            return ((Operation<?>) expr).getArg(0);
         } else if (expr instanceof TemplateExpression) {
-            return (Expression<?>) ((TemplateExpression<?>)expr).getArg(0);
+            return (Expression<?>) ((TemplateExpression<?>) expr).getArg(0);
         } else {
             return expr;
         }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/Conversions.java
Patch:
@@ -55,7 +55,7 @@ private static boolean needsNumberConversion(Expression<?> expr) {
     private static boolean isEntityPathAndNeedsWrapping(Expression<?> expr) {
         if ((expr instanceof Path && expr.getType().isAnnotationPresent(Entity.class)) ||
             (expr instanceof EntityPath && !RelationalPath.class.isInstance(expr))) {
-            Path<?> path = (Path<?>)expr;
+            Path<?> path = (Path<?>) expr;
             if (path.getMetadata().getParent() == null) {
                 return true;
             }
@@ -83,7 +83,7 @@ public static <RT> Expression<RT> convertForNativeQuery(Expression<RT> expr) {
         } else if (Enum.class.isAssignableFrom(expr.getType())) {
             return new EnumConversion<RT>(expr);
         } else if (expr instanceof FactoryExpression) {
-            FactoryExpression<RT> factoryExpr = (FactoryExpression<RT>)expr;
+            FactoryExpression<RT> factoryExpr = (FactoryExpression<RT>) expr;
             boolean numberConversions = false;
             boolean hasEntityPath = false;
             for (Expression<?> e : factoryExpr.getArgs()) {
@@ -106,6 +106,6 @@ public static <RT> Expression<RT> convertForNativeQuery(Expression<RT> expr) {
         return expr;
     }
 
-    private Conversions() {}
+    private Conversions() { }
 
 }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/DefaultQueryHandler.java
Patch:
@@ -67,7 +67,7 @@ public boolean wrapEntityProjections() {
         return false;
     }
 
-    private DefaultQueryHandler() {}
+    private DefaultQueryHandler() { }
 
 
 }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/HQLTemplates.java
Patch:
@@ -77,7 +77,7 @@ public HQLTemplates(char escape) {
         // add Hibernate Spatial mappings, if on classpath
         try {
             Class cl = Class.forName("com.querydsl.spatial.hibernate.HibernateSpatialSupport");
-            add((Map)cl.getMethod("getSpatialOps").invoke(null));
+            add((Map) cl.getMethod("getSpatialOps").invoke(null));
         } catch (Exception e) {
             // do nothing
         }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPACollectionAnyVisitor.java
Patch:
@@ -43,7 +43,7 @@ protected Predicate exists(Context c, Predicate condition) {
             EntityPath<Object> replacement = (EntityPath<Object>) c.replacements.get(i);
             if (c.paths.get(i).getType().isAnnotationPresent(Entity.class)) {
                 query.from(Expressions.as(
-                        Expressions.listPath((Class)c.paths.get(i).getType(), SimplePath.class,
+                        Expressions.listPath((Class) c.paths.get(i).getType(), SimplePath.class,
                                 child.getMetadata()), replacement));
             } else {
                 // join via parent

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPAExpressions.java
Patch:
@@ -142,6 +142,6 @@ public static StringExpression type(EntityPath<?> path) {
         return Expressions.stringOperation(JPQLOps.TYPE, path);
     }
 
-    private JPAExpressions() {}
+    private JPAExpressions() { }
 
 }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPAListAccessVisitor.java
Patch:
@@ -48,7 +48,7 @@ public Expression<?> visit(Path<?> expr, @Nullable Void context) {
                         ExpressionUtils.createRootVariable(parent, replacements.size()));
                 metadata.addJoin(JoinType.LEFTJOIN, ExpressionUtils.as(parent, replacement));
                 metadata.addJoinCondition(ExpressionUtils.eq(
-                        (Expression)Expressions.operation(Integer.class, JPQLOps.INDEX, replacement),
+                        (Expression) Expressions.operation(Integer.class, JPQLOps.INDEX, replacement),
                         ExpressionUtils.toExpression(pathMetadata.getElement())));
                 replacements.put(expr, replacement);
             }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPAMapAccessVisitor.java
Patch:
@@ -40,7 +40,7 @@ public Expression<?> visit(Operation<?> expr, @Nullable Void context) {
             ParameterizedExpression map = (ParameterizedExpression<?>) expr.getArg(0);
             Expression key = expr.getArg(1);
             Path replacement = ExpressionUtils.path(map.getParameter(1),
-                    ExpressionUtils.createRootVariable((Path<?>)map, Math.abs(expr.hashCode())));
+                    ExpressionUtils.createRootVariable((Path<?>) map, Math.abs(expr.hashCode())));
             metadata.addJoin(JoinType.LEFTJOIN, ExpressionUtils.as(map, replacement));
             metadata.addJoinCondition(ExpressionUtils.eq(
                     Expressions.operation(map.getParameter(0), JPQLOps.KEY, replacement),

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPAQueryBase.java
Patch:
@@ -77,7 +77,7 @@ public Q from(EntityPath<?>... args) {
 
     @Override
     public <P> Q from(CollectionExpression<?,P> target, Path<P> alias) {
-        return queryMixin.from(Expressions.as((Path)target, alias));
+        return queryMixin.from(Expressions.as((Path) target, alias));
     }
 
     @Override

File: querydsl-jpa/src/main/java/com/querydsl/jpa/TransformingIterator.java
Patch:
@@ -38,7 +38,7 @@ public class TransformingIterator<T> implements CloseableIterator<T> {
     public TransformingIterator(Iterator<T> iterator, FactoryExpression<?> projection) {
         this.iterator = iterator;
         this.projection = projection;
-        this.closeable = iterator instanceof Closeable ? (Closeable)iterator : null;
+        this.closeable = iterator instanceof Closeable ? (Closeable) iterator : null;
     }
 
     public TransformingIterator(Iterator<T> iterator, Closeable closeable, FactoryExpression<?> projection) {
@@ -59,7 +59,7 @@ public T next() {
             if (!result.getClass().isArray()) {
                 result = new Object[]{result};
             }
-            return (T)projection.newInstance((Object[])result);
+            return (T) projection.newInstance((Object[]) result);
         } else {
             return null;
         }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/HibernateUtil.java
Patch:
@@ -47,7 +47,7 @@ public final class HibernateUtil {
         TYPES.put(BigDecimal.class, new BigDecimalType());
     }
 
-    private HibernateUtil() {}
+    private HibernateUtil() { }
 
     public static void setConstants(Query query, Map<Object,String> constants,
             Map<ParamExpression<?>, Object> params) {

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/NoSessionHolder.java
Patch:
@@ -26,7 +26,7 @@ public final class NoSessionHolder implements SessionHolder {
 
     public static final SessionHolder DEFAULT = new NoSessionHolder();
 
-    private NoSessionHolder() {}
+    private NoSessionHolder() { }
 
     @Override
     public Query createQuery(String queryString) {

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/JPAProvider.java
Patch:
@@ -35,7 +35,7 @@ public final class JPAProvider {
     private static void addMapping(String className, JPQLTemplates templates) {
         try {
             mappings.put(Class.forName(className), templates);
-        } catch (Exception e) {}
+        } catch (Exception e) { }
     }
 
     static {
@@ -74,6 +74,6 @@ public static JPQLTemplates getTemplates(EntityManager em) {
         return JPQLTemplates.DEFAULT;
     }
 
-    private JPAProvider() {}
+    private JPAProvider() { }
 
 }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/JPAUtil.java
Patch:
@@ -31,7 +31,7 @@
  */
 public final class JPAUtil {
 
-    private JPAUtil() {}
+    private JPAUtil() { }
 
     public static void setConstants(Query query, Map<Object,String> constants, Map<ParamExpression<?>, Object> params) {
         boolean hasParameters = !query.getParameters().isEmpty();

File: querydsl-jpa/src/main/java/com/querydsl/jpa/support/JPAPathBuilderValidator.java
Patch:
@@ -43,7 +43,7 @@ public Class<?> validate(Class<?> parent, String property, Class<?> propertyType
             ManagedType managedType = metamodel.managedType(parent);
             Attribute attribute = managedType.getAttribute(property);
             if (attribute instanceof PluralAttribute) {
-                return ((PluralAttribute)attribute).getElementType().getJavaType();
+                return ((PluralAttribute) attribute).getElementType().getJavaType();
             } else {
                 return Primitives.wrap(attribute.getJavaType());
             }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/Constants.java
Patch:
@@ -18,7 +18,7 @@
 
 public final class Constants {
 
-    private Constants() {}
+    private Constants() { }
 
     static final QAccount account = new QAccount("account");
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/ConstructorsTest.java
Patch:
@@ -45,7 +45,7 @@ public void Constructors() {
                         com.querydsl.jpa.domain.Cat.class,
                         new Class[]{String.class},
                         cat.name);
-        assertToString("new " + com.querydsl.jpa.domain.Cat.class.getName()+ "(cat.name)", c);
+        assertToString("new " + com.querydsl.jpa.domain.Cat.class.getName() + "(cat.name)", c);
         assertToString("new " + getClass().getName() + "$BookmarkDTO(cat.name)",new QBookmarkDTO(cat.name));
     }
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/CustomFinder.java
Patch:
@@ -32,13 +32,13 @@
  */
 public final class CustomFinder {
 
-    private CustomFinder() {}
+    private CustomFinder() { }
 
     public static <T> List<T> findCustom(EntityManager em, Class<T> entityClass,Map<String,?> filters, String sort) {
         EntityPath<T> entityPath = new EntityPathBase<T>(entityClass, "entity");
         BooleanBuilder builder = new BooleanBuilder();
         for (Map.Entry<String, ?> entry : filters.entrySet()) {
-            SimplePath<Object> property = Expressions.path((Class)entry.getValue().getClass(), entityPath, entry.getKey());
+            SimplePath<Object> property = Expressions.path((Class) entry.getValue().getClass(), entityPath, entry.getKey());
             builder.and(property.eq(entry.getValue()));
         }
         ComparablePath<?> sortProperty = Expressions.comparablePath(Comparable.class, entityPath, sort);

File: querydsl-jpa/src/test/java/com/querydsl/jpa/IntegrationBase.java
Patch:
@@ -133,7 +133,7 @@ public void Update_with_null() {
 
         QCat cat = QCat.cat;
         long amount = update(cat).where(cat.name.eq("Bob"))
-            .set(cat.name, (String)null)
+            .set(cat.name, (String) null)
             .set(cat.alive, false)
             .execute();
         assertEquals(1, amount);

File: querydsl-jpa/src/test/java/com/querydsl/jpa/JPAQueryMixinTest.java
Patch:
@@ -24,7 +24,7 @@ public class JPAQueryMixinTest {
 
     @Test
     public void Where_Null() {
-        mixin.where((Predicate)null);
+        mixin.where((Predicate) null);
     }
 
     @Test

File: querydsl-jpa/src/test/java/com/querydsl/jpa/JPQLSerializerTest.java
Patch:
@@ -120,8 +120,8 @@ public void NormalizeNumericArgs() {
         JPQLSerializer serializer = new JPQLSerializer(HQLTemplates.DEFAULT);
         NumberPath<Double> doublePath = Expressions.numberPath(Double.class, "doublePath");
         serializer.handle(doublePath.add(1));
-        serializer.handle(doublePath.between((float)1.0, 1L));
-        serializer.handle(doublePath.lt((byte)1));
+        serializer.handle(doublePath.between((float) 1.0, 1L));
+        serializer.handle(doublePath.lt((byte) 1));
         for (Object constant : serializer.getConstantToLabel().keySet()) {
             assertEquals(Double.class, constant.getClass());
         }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/NativeSQLSerializerTest.java
Patch:
@@ -33,7 +33,7 @@ public static class Entity {
         @Column
         private String name;
 
-        @Column(name="first_name")
+        @Column(name = "first_name")
         private String firstName;
     }
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/OrderHelper.java
Patch:
@@ -12,7 +12,7 @@
 
 public final class OrderHelper {
 
-    private OrderHelper() {}
+    private OrderHelper() { }
 
     private static final Pattern DOT = Pattern.compile("\\.");
 
@@ -26,10 +26,10 @@ public static PathBuilder<?> join(JPQLQuery<?> query, PathBuilder<?> builder, Ma
                 String parentKey = StringUtils.join(parent, ".");
                 builder = join(query, builder, joins, parentKey);
                 rv = new PathBuilder(Object.class, StringUtils.join(tokens, "_"));
-                query.leftJoin((EntityPath)builder.get(tokens[tokens.length - 1]), rv);
+                query.leftJoin((EntityPath) builder.get(tokens[tokens.length - 1]), rv);
             } else {
                 rv = new PathBuilder(Object.class, path);
-                query.leftJoin((EntityPath)builder.get(path), rv);
+                query.leftJoin((EntityPath) builder.get(path), rv);
             }
             joins.put(path, rv);
         }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/PackageVerification.java
Patch:
@@ -37,8 +37,8 @@ public class PackageVerification {
     @Test
     public void Verify_Package() throws Exception {
         String version = System.getProperty("version");
-        verify(new File("target/querydsl-jpa-"+version+"-apt-hibernate-one-jar.jar"), true);
-        verify(new File("target/querydsl-jpa-"+version+"-apt-one-jar.jar"), false);
+        verify(new File("target/querydsl-jpa-" + version + "-apt-hibernate-one-jar.jar"), true);
+        verify(new File("target/querydsl-jpa-" + version + "-apt-one-jar.jar"), false);
     }
 
     private void verify(File oneJar, boolean hibernateDeps) throws Exception {

File: querydsl-jpa/src/test/java/com/querydsl/jpa/Projection.java
Patch:
@@ -4,6 +4,6 @@
 
 public class Projection {
 
-    public Projection(String str, Cat cat) {}
+    public Projection(String str, Cat cat) { }
 
 }
\ No newline at end of file

File: querydsl-jpa/src/test/java/com/querydsl/jpa/QProjection.java
Patch:
@@ -6,7 +6,7 @@
 import com.querydsl.jpa.domain.Cat;
 import com.querydsl.jpa.domain.QCat;
 
-public class QProjection extends ConstructorExpression<Projection>{
+public class QProjection extends ConstructorExpression<Projection> {
 
     private static final long serialVersionUID = -5866362075090550839L;
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/RelationalFunctionCallTest.java
Patch:
@@ -28,7 +28,7 @@ public class RelationalFunctionCallTest {
 
 //    @Schema("PUBLIC")
 //    @Table("SURVEY")
-    public class QSurvey extends RelationalPathBase<QSurvey>{
+    public class QSurvey extends RelationalPathBase<QSurvey> {
 
         private static final long serialVersionUID = -7427577079709192842L;
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/SignatureTest.java
Patch:
@@ -23,9 +23,9 @@ public class SignatureTest {
 
     @Test
     public void test() {
-        meet((JPAQuery)null);
-        meet((HibernateQuery)null);
-        meet((JPQLQuery)null);
+        meet((JPAQuery) null);
+        meet((HibernateQuery) null);
+        meet((JPQLQuery) null);
     }
 
     public static <T extends FilteredClause<? super T>> T meet(T query) {

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Account.java
Patch:
@@ -28,7 +28,7 @@
  */
 @SuppressWarnings("serial")
 @Entity
-@Table(name="account_")
+@Table(name = "account_")
 public class Account implements Serializable {
 
     @Transient

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Animal.java
Patch:
@@ -23,7 +23,7 @@
  * The Class Animal.
  */
 @Entity
-@Table(name="animal_")
+@Table(name = "animal_")
 @DiscriminatorValue("A")
 public class Animal {
     private boolean alive;
@@ -34,7 +34,7 @@ public class Animal {
     private int weight, toes;
 
     // needed for JPA tests
-    @Type(type="com.querydsl.jpa.ExtDoubleType")
+    @Type(type = "com.querydsl.jpa.ExtDoubleType")
     private double bodyWeight;
 
     private float floatProperty;
@@ -51,7 +51,7 @@ public class Animal {
 
     private java.sql.Time timeField;
 
-    public Animal() {}
+    public Animal() { }
 
     public Animal(int id) {
         setId(id);

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/AuditLog.java
Patch:
@@ -22,7 +22,7 @@
  * The Class AuditLog.
  */
 @Entity
-@Table(name="auditlog_")
+@Table(name = "auditlog_")
 public class AuditLog {
     @Id
     int id;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Author.java
Patch:
@@ -6,7 +6,7 @@
 import javax.persistence.*;
 
 @Entity
-@Table(name="author_")
+@Table(name = "author_")
 public class Author implements Serializable {
 
     private static final long serialVersionUID = -1893968697250846661L;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Bar.java
Patch:
@@ -19,7 +19,7 @@
  * The Class Bar.
  */
 @Entity
-@Table(name="bar_")
+@Table(name = "bar_")
 public class Bar {
     @Temporal(TemporalType.DATE)
     java.util.Date date;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Book.java
Patch:
@@ -5,7 +5,7 @@
 import javax.persistence.*;
 
 @Entity
-@Table(name="book_")
+@Table(name = "book_")
 public class Book implements Serializable {
 
     private static final long serialVersionUID = -9029792723035681319L;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Calendar.java
Patch:
@@ -25,11 +25,11 @@
  */
 @SuppressWarnings("serial")
 @Entity
-@Table(name="calendar_")
+@Table(name = "calendar_")
 public class Calendar implements Serializable {
     @ElementCollection
     @Temporal(TemporalType.DATE)
-    @MapKeyColumn(name="holidays_key")
+    @MapKeyColumn(name = "holidays_key")
     Map<String, java.util.Date> holidays;
 
     @Id

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Cat.java
Patch:
@@ -47,7 +47,7 @@ public class Cat extends Animal {
     @ManyToOne
     private Cat mate;
 
-    public Cat() {}
+    public Cat() { }
 
     public Cat(int id) {
         setId(id);
@@ -73,7 +73,7 @@ public Cat(String name, int id, List<Cat> k) {
     public Cat(String name, int id, double bodyWeight) {
         this(name, id);
         setBodyWeight(bodyWeight);
-        setFloatProperty((float)bodyWeight);
+        setFloatProperty((float) bodyWeight);
     }
 
     public int getBreed() {

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Catalog.java
Patch:
@@ -22,7 +22,7 @@
  * The Class Catalog.
  */
 @Entity
-@Table(name="catalog_")
+@Table(name = "catalog_")
 public class Catalog {
     @Temporal(TemporalType.DATE)
     Date effectiveDate;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Child.java
Patch:
@@ -4,7 +4,7 @@
 import javax.persistence.Id;
 import javax.persistence.ManyToOne;
 
-@Entity(name="Child2")
+@Entity(name = "Child2")
 public class Child {
 
     @Id

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Company.java
Patch:
@@ -23,7 +23,7 @@
  * The Class Company.
  */
 @Entity
-@Table(name="company_")
+@Table(name = "company_")
 public class Company {
 
     public enum Rating { A, AA, AAA }
@@ -46,6 +46,6 @@ public enum Rating { A, AA, AAA }
 
     public String name;
 
-    @Column(name="official_name")
+    @Column(name = "official_name")
     public String officialName;
 }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Customer.java
Patch:
@@ -22,7 +22,7 @@
  * The Class Customer.
  */
 @Entity
-@Table(name="customer_")
+@Table(name = "customer_")
 public class Customer {
     @ManyToOne
     Order currentOrder;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Department.java
Patch:
@@ -23,7 +23,7 @@
  * The Class Department.
  */
 @Entity
-@Table(name="department_")
+@Table(name = "department_")
 public class Department {
     @ManyToOne
     Company company;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Document.java
Patch:
@@ -21,7 +21,7 @@
  * The Class Document.
  */
 @Entity
-@Table(name="document_")
+@Table(name = "document_")
 public class Document {
     @Id
     int id;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Domain.java
Patch:
@@ -23,7 +23,7 @@
 
 public final class Domain {
 
-    private Domain() {}
+    private Domain() { }
 
     public static final List<Class<?>> classes = Arrays.asList(
             Account.class,

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Employee.java
Patch:
@@ -22,7 +22,7 @@
  * The Class Employee.
  */
 @Entity
-@Table(name="employee_")
+@Table(name = "employee_")
 public class Employee {
     @ManyToOne
     public Company company;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Entity1.java
Patch:
@@ -6,7 +6,7 @@
 @Entity
 public class Entity1 {
 
-    public Entity1() {}
+    public Entity1() { }
 
     public Entity1(int id) {
         this.id = id;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Entity2.java
Patch:
@@ -5,7 +5,7 @@
 @Entity
 public class Entity2 extends Entity1 {
 
-    public Entity2() {}
+    public Entity2() { }
 
     public Entity2(int id) {
         this.id = id;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/EvilType.java
Patch:
@@ -19,7 +19,7 @@
  * The Class EvilType.
  */
 @Entity
-@Table(name="eviltype_")
+@Table(name = "eviltype_")
 public class EvilType {
     @ManyToOne
     @JoinColumn(name = "_asc")

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Foo.java
Patch:
@@ -21,7 +21,7 @@
  * The Class Foo.
  */
 @Entity
-@Table(name="foo_")
+@Table(name = "foo_")
 public class Foo {
     public String bar;
 
@@ -30,7 +30,7 @@ public class Foo {
     public int id;
 
     @ElementCollection
-    @CollectionTable(name = "foo_names", joinColumns = {@JoinColumn(name="foo_id")})
+    @CollectionTable(name = "foo_names", joinColumns = {@JoinColumn(name = "foo_id")})
     public List<String> names;
 
     @Temporal(TemporalType.DATE)

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Formula.java
Patch:
@@ -22,7 +22,7 @@
  * The Class Formula.
  */
 @Entity
-@Table(name="formula_")
+@Table(name = "formula_")
 public class Formula {
     @Id
     int id;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/InheritedProperties.java
Patch:
@@ -18,7 +18,7 @@
 import javax.persistence.Table;
 
 @Entity
-@Table(name="inheritedproperties_")
+@Table(name = "inheritedproperties_")
 public class InheritedProperties extends Superclass {
     @Id
     long id;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Item.java
Patch:
@@ -22,7 +22,7 @@
  * The Class Item.
  */
 @Entity
-@Table(name="item_")
+@Table(name = "item_")
 public class Item {
     @Id
     long id;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Location.java
Patch:
@@ -20,8 +20,8 @@
 /**
  * The Class Location.
  */
-@Entity(name="Location2")
-@Table(name="location_")
+@Entity(name = "Location2")
+@Table(name = "location_")
 public class Location {
     @Id
     long id;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Name.java
Patch:
@@ -21,7 +21,7 @@
  * The Class Name.
  */
 @Entity
-@Table(name="name_")
+@Table(name = "name_")
 public class Name {
     String firstName, lastName, nickName;
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/NameList.java
Patch:
@@ -24,7 +24,7 @@
  * The Class NameList.
  */
 @Entity
-@Table(name="namelist_")
+@Table(name = "namelist_")
 public class NameList {
     @Id
     long id;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Named.java
Patch:
@@ -21,7 +21,7 @@
  * The Class Named.
  */
 @Entity
-@Table(name="named_")
+@Table(name = "named_")
 public class Named {
     @Id
     long id;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Nationality.java
Patch:
@@ -25,7 +25,7 @@
  */
 @SuppressWarnings("serial")
 @Entity
-@Table(name="nationality_")
+@Table(name = "nationality_")
 public class Nationality implements Serializable {
     @ManyToOne
     Calendar calendar;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Numeric.java
Patch:
@@ -9,7 +9,7 @@
 import javax.persistence.Table;
 
 @Entity
-@Table(name="numeric_")
+@Table(name = "numeric_")
 public class Numeric implements Serializable {
 
     private static final long serialVersionUID = 1L;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Order.java
Patch:
@@ -21,7 +21,7 @@
  * The Class Order.
  */
 @Entity
-@Table(name="order_")
+@Table(name = "order_")
 public class Order {
     @ManyToOne
     Customer customer;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Parameter.java
Patch:
@@ -21,7 +21,7 @@
  * The Class Parameter.
  */
 @Entity
-@Table(name="parameter_")
+@Table(name = "parameter_")
 public class Parameter {
     @Id
     long id;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Parent.java
Patch:
@@ -6,7 +6,7 @@
 import javax.persistence.Id;
 import javax.persistence.OneToMany;
 
-@Entity(name="Parent2")
+@Entity(name = "Parent2")
 public class Parent {
 
     @Id

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Person.java
Patch:
@@ -24,7 +24,7 @@
  */
 @SuppressWarnings("serial")
 @Entity
-@Table(name="person_")
+@Table(name = "person_")
 public class Person implements Serializable {
     @Temporal(TemporalType.DATE)
     java.util.Date birthDay;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/PersonId.java
Patch:
@@ -24,7 +24,7 @@
  */
 @SuppressWarnings("serial")
 @Entity
-@Table(name="personid_")
+@Table(name = "personid_")
 public class PersonId implements Serializable {
     String country;
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Player.java
Patch:
@@ -24,7 +24,7 @@
  * The Class Player.
  */
 @Entity
-@Table(name="player_")
+@Table(name = "player_")
 public class Player {
     @Id
     long id;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Price.java
Patch:
@@ -22,7 +22,7 @@
  * The Class Price.
  */
 @Entity
-@Table(name="price_")
+@Table(name = "price_")
 public class Price {
     long amount;
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Show.java
Patch:
@@ -21,17 +21,17 @@
  * The Class Show.
  */
 @Entity
-@Table(name="show_")
+@Table(name = "show_")
 public class Show {
 
     @Id
     long id;
 
     @ElementCollection
-    @MapKeyColumn(name="acts_key")
+    @MapKeyColumn(name = "acts_key")
     public Map<String, String> acts;
 
-    public Show() {}
+    public Show() { }
 
     public Show(int id) {
         this.id = id;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/SimpleTypes.java
Patch:
@@ -20,7 +20,7 @@
 import javax.persistence.*;
 
 @Entity
-@Table(name="simpletypes_")
+@Table(name = "simpletypes_")
 public class SimpleTypes {
     transient int test;
     @Id

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Status.java
Patch:
@@ -21,7 +21,7 @@
  * The Class Status.
  */
 @Entity
-@Table(name="status_")
+@Table(name = "status_")
 public class Status {
     @Id
     long id;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/StatusChange.java
Patch:
@@ -19,7 +19,7 @@
  * The Class StatusChange.
  */
 @Entity
-@Table(name="statuschange_")
+@Table(name = "statuschange_")
 public class StatusChange {
     @Id
     long id;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Store.java
Patch:
@@ -21,7 +21,7 @@
  * The Class Store.
  */
 @Entity
-@Table(name="store_")
+@Table(name = "store_")
 public class Store {
     @OneToMany
     List<Customer> customers;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/User.java
Patch:
@@ -22,7 +22,7 @@
  * The Class User.
  */
 @Entity
-@Table(name="user_")
+@Table(name = "user_")
 public class User {
     @ManyToOne
     Company company;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain2/Category.java
Patch:
@@ -19,7 +19,7 @@
 import javax.persistence.*;
 
 @Entity
-@Table(name="category_")
+@Table(name = "category_")
 public class Category {
 
     @Id

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain2/CategoryProp.java
Patch:
@@ -18,7 +18,7 @@
 import javax.persistence.Table;
 
 @Entity
-@Table(name="categoryprop_")
+@Table(name = "categoryprop_")
 public class CategoryProp {
 
     @Id

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain2/Document2.java
Patch:
@@ -18,7 +18,7 @@
 import javax.persistence.*;
 
 @Entity
-@Table(name="document2_")
+@Table(name = "document2_")
 public class Document2 {
 
     @Id

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain2/DocumentProp.java
Patch:
@@ -18,7 +18,7 @@
 import javax.persistence.Table;
 
 @Entity
-@Table(name="documentprop_")
+@Table(name = "documentprop_")
 public class DocumentProp {
 
     @Id

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain2/Domain2.java
Patch:
@@ -18,7 +18,7 @@
 
 public final class Domain2 {
 
-    private Domain2() {}
+    private Domain2() { }
 
     public static final List<Class<?>> classes = Arrays.asList(
             Category.class,

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain2/Parent.java
Patch:
@@ -19,7 +19,7 @@
 import javax.persistence.Table;
 
 @Entity
-@Table(name="parent_")
+@Table(name = "parent_")
 public class Parent {
 
     @Id

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain2/User2.java
Patch:
@@ -19,7 +19,7 @@
 import javax.persistence.*;
 
 @Entity
-@Table(name="user2_")
+@Table(name = "user2_")
 public class User2 {
 
     @Id

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain2/UserProp.java
Patch:
@@ -19,7 +19,7 @@
 import javax.persistence.*;
 
 @Entity
-@Table(name="userprop_")
+@Table(name = "userprop_")
 public class UserProp {
 
     @Id

File: querydsl-jpa/src/test/java/com/querydsl/jpa/suites/DerbyEclipseLinkTest.java
Patch:
@@ -25,9 +25,9 @@ public void Order_StringValue_ToBigInteger() {
             // not supported in MySQL/EclipseLink
         }
     }
-    public static class JPASQL extends JPASQLBase {}
-    public static class JPAIntegration extends JPAIntegrationBase {}
-    public static class Serialization extends SerializationBase {}
+    public static class JPASQL extends JPASQLBase { }
+    public static class JPAIntegration extends JPAIntegrationBase { }
+    public static class Serialization extends SerializationBase { }
 
     @BeforeClass
     public static void setUp() throws Exception {

File: querydsl-jpa/src/test/java/com/querydsl/jpa/suites/MySQLEclipseLinkTest.java
Patch:
@@ -45,9 +45,9 @@ public void Order_NullsLast() {
         }
     }
 
-    public static class JPASQL extends JPASQLBase {}
-    public static class JPAIntegration extends JPAIntegrationBase {}
-    public static class Serialization extends SerializationBase {}
+    public static class JPASQL extends JPASQLBase { }
+    public static class JPAIntegration extends JPAIntegrationBase { }
+    public static class Serialization extends SerializationBase { }
 
     @BeforeClass
     public static void setUp() throws Exception {

File: querydsl-jpa/src/test/java/com/querydsl/jpa/suites/Teradata.java
Patch:
@@ -6,7 +6,7 @@
 
 public final class Teradata {
 
-    private Teradata() {}
+    private Teradata() { }
 
     public static void main(String[] args) {
         EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("teradata");

File: querydsl-jpa/src/test/java/com/querydsl/jpa/support/ExtendedDerbyDialect.java
Patch:
@@ -33,7 +33,7 @@ public class ExtendedDerbyDialect extends DerbyDialect {
         @Override
         public String render(Type columnType, List args, SessionFactoryImplementor factory) {
             if (args.get(1).equals("string")) {
-                return super.render(columnType, Arrays.asList("char("+args.get(0)+")",args.get(1)), factory);
+                return super.render(columnType, Arrays.asList("char(" + args.get(0) + ")", args.get(1)), factory);
             } else {
                 return super.render(columnType, args, factory);
             }

File: querydsl-jdo/src/main/java/com/querydsl/jdo/JDOExpressions.java
Patch:
@@ -95,6 +95,6 @@ public static <T> JDOQuery<T> selectFrom(EntityPath<T> expr) {
         return select(expr).from(expr);
     }
 
-    private JDOExpressions() {}
+    private JDOExpressions() { }
 
 }

File: querydsl-jdo/src/main/java/com/querydsl/jdo/JDOQueryMixin.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class JDOQueryMixin<T> extends QueryMixin<T> {
 
-    public JDOQueryMixin() {}
+    public JDOQueryMixin() { }
 
     public JDOQueryMixin(QueryMetadata metadata) {
         super(metadata);
@@ -39,7 +39,7 @@ public JDOQueryMixin(T self, QueryMetadata metadata) {
 
     @Override
     protected Predicate convert(Predicate predicate, Role role) {
-        predicate = (Predicate)ExpressionUtils.extract(predicate);
+        predicate = (Predicate) ExpressionUtils.extract(predicate);
         if (predicate != null) {
             Context context = new Context();
             Predicate transformed = (Predicate) predicate.accept(collectionAnyVisitor, context);

File: querydsl-jdo/src/test/java/com/querydsl/jdo/BasicsTest.java
Patch:
@@ -107,7 +107,7 @@ public void FactoryExpression_In_GroupBy() {
         assertFalse(query().from(product).groupBy(productBean).select(productBean).fetch().isEmpty());
     }
 
-    @Test(expected=NonUniqueResultException.class)
+    @Test(expected = NonUniqueResultException.class)
     public void Unique_Result_Throws_Exception_On_Multiple_Results() {
         query().from(product).select(product).fetchOne();
     }

File: querydsl-jdo/src/test/java/com/querydsl/jdo/FetchPlanTest.java
Patch:
@@ -59,7 +59,7 @@ public void ListProducts() throws Exception {
 
         Field queriesField = AbstractJDOQuery.class.getDeclaredField("queries");
         queriesField.setAccessible(true);
-        List<Query> queries = (List<Query>)queriesField.get(query);
+        List<Query> queries = (List<Query>) queriesField.get(query);
         Query jdoQuery = queries.get(0);
         assertEquals(new HashSet<String>(Arrays.asList("myfetchgroup1","myfetchgroup2")),
                 jdoQuery.getFetchPlan().getGroups());
@@ -77,7 +77,7 @@ public void ListStores() throws Exception {
 
         Field queriesField = AbstractJDOQuery.class.getDeclaredField("queries");
         queriesField.setAccessible(true);
-        List<Query> queries = (List<Query>)queriesField.get(query);
+        List<Query> queries = (List<Query>) queriesField.get(query);
         Query jdoQuery = queries.get(0);
         assertEquals(new HashSet<String>(Arrays.asList("products")),
                 jdoQuery.getFetchPlan().getGroups());

File: querydsl-jdo/src/test/java/com/querydsl/jdo/JDOQueryStandardTest.java
Patch:
@@ -41,7 +41,7 @@ public class JDOQueryStandardTest extends AbstractJDOTest {
 
     public static class Projection {
 
-        public Projection(String str) {}
+        public Projection(String str) { }
 
     }
 
@@ -192,7 +192,7 @@ public void Params_anon() {
                 .select(product.name).fetchFirst());
     }
 
-    @Test(expected=ParamNotSetException.class)
+    @Test(expected = ParamNotSetException.class)
     public void Params_not_set() {
         Param<String> name = new Param<String>(String.class,"name");
         assertEquals("ABC0",query().from(product).where(product.name.eq(name))

File: querydsl-jdo/src/test/java/com/querydsl/jdo/PackageVerification.java
Patch:
@@ -36,7 +36,7 @@ public class PackageVerification {
     @Test
     public void Verify_Package() throws Exception {
         String version = System.getProperty("version");
-        verify(new File("target/querydsl-jdo-"+version+"-apt-one-jar.jar"));
+        verify(new File("target/querydsl-jdo-" + version + "-apt-one-jar.jar"));
     }
 
     private void verify(File oneJar) throws Exception {

File: querydsl-jdo/src/test/java/com/querydsl/jdo/serialization/GroupByTest.java
Patch:
@@ -13,9 +13,9 @@ public class GroupByTest extends AbstractTest {
     public void GroupBy() {
         QEmployee employee = QEmployee.employee;
         assertEquals(
-                "SELECT FROM com.querydsl.jdo.models.company.Employee "+
-                "PARAMETERS java.lang.String a1 "+
-                "GROUP BY this.emailAddress "+
+                "SELECT FROM com.querydsl.jdo.models.company.Employee " +
+                "PARAMETERS java.lang.String a1 " +
+                "GROUP BY this.emailAddress " +
                 "HAVING this.emailAddress != a1",
 
                 serialize(selectFrom(employee)

File: querydsl-jdo/src/test/java/com/querydsl/jdo/test/domain/QBook.java
Patch:
@@ -25,7 +25,7 @@
  *
  */
 @SuppressWarnings("serial")
-public class QBook extends EntityPathBase<com.querydsl.jdo.test.domain.Book>{
+public class QBook extends EntityPathBase<com.querydsl.jdo.test.domain.Book> {
 
     public static final QBook book = new QBook("book");
 

File: querydsl-jdo/src/test/java/com/querydsl/jdo/test/domain/QProduct.java
Patch:
@@ -22,7 +22,7 @@
  *
  */
 @SuppressWarnings("serial")
-public class QProduct extends EntityPathBase<com.querydsl.jdo.test.domain.Product>{
+public class QProduct extends EntityPathBase<com.querydsl.jdo.test.domain.Product> {
 
     public static final QProduct product = new QProduct("product");
 

File: querydsl-jdo/src/test/java/com/querydsl/jdo/test/domain/QStore.java
Patch:
@@ -22,7 +22,7 @@
  *
  */
 @SuppressWarnings("serial")
-public class QStore extends EntityPathBase<com.querydsl.jdo.test.domain.Store>{
+public class QStore extends EntityPathBase<com.querydsl.jdo.test.domain.Store> {
 
     public static final QStore store = new QStore("store");
 

File: querydsl-hibernate-search/src/main/java/com/querydsl/hibernate/search/AbstractSearchQuery.java
Patch:
@@ -45,7 +45,7 @@ public abstract class AbstractSearchQuery<T, Q extends AbstractSearchQuery<T,Q>>
     private final FullTextSession session;
 
     public AbstractSearchQuery(FullTextSession session, EntityPath<T> path) {
-        this.queryMixin = new QueryMixin<Q>((Q)this);
+        this.queryMixin = new QueryMixin<Q>((Q) this);
         this.session = session;
         this.path = path;
         this.serializer = SearchSerializer.DEFAULT;

File: querydsl-hibernate-search/src/test/java/com/querydsl/hibernate/search/User.java
Patch:
@@ -46,7 +46,7 @@ public class User implements Serializable {
     private String middleName;
 
     @NaturalId
-    @Field(analyze = Analyze.NO, name="email", index = Index.YES, store = Store.YES)
+    @Field(analyze = Analyze.NO, name = "email", index = Index.YES, store = Store.YES)
     private String emailAddress;
 
     public Long getId() {

File: querydsl-collections/src/main/java/com/querydsl/collections/CollQuery.java
Patch:
@@ -83,12 +83,12 @@ public CollQuery<T> clone() {
     @Override
     public <E> CollQuery<E> select(Expression<E> expr) {
         queryMixin.setProjection(expr);
-        return (CollQuery<E>)this;
+        return (CollQuery<E>) this;
     }
 
     @Override
     public CollQuery<Tuple> select(Expression<?>... exprs) {
         queryMixin.setProjection(exprs);
-        return (CollQuery<Tuple>)this;
+        return (CollQuery<Tuple>) this;
     }
 }

File: querydsl-collections/src/main/java/com/querydsl/collections/CollQueryFactory.java
Patch:
@@ -82,6 +82,6 @@ public static <A> CollUpdateClause<A> update(Path<A> path, Iterable<A> col) {
         return new CollUpdateClause<A>(path, col);
     }
 
-    private CollQueryFactory() {}
+    private CollQueryFactory() { }
 
 }

File: querydsl-collections/src/main/java/com/querydsl/collections/MultiComparator.java
Patch:
@@ -44,7 +44,7 @@ public MultiComparator(Evaluator<Object[]> ev, boolean[] directions) {
     @Override
     public int compare(T o1, T o2) {
         if (o1.getClass().isArray()) {
-            return innerCompare(ev.evaluate((Object[])o1), ev.evaluate((Object[])o2));
+            return innerCompare(ev.evaluate((Object[]) o1), ev.evaluate((Object[]) o2));
         } else {
             return innerCompare(ev.evaluate(o1), ev.evaluate(o2));
         }

File: querydsl-collections/src/main/java/com/querydsl/collections/PathComparator.java
Patch:
@@ -45,7 +45,7 @@ public static <T, V extends Comparable<V>> PathComparator<T, V> pathComparator(P
 
     @Override
     public int compare(T leftBean, T rightBean) {
-        if(leftBean == rightBean) {
+        if (leftBean == rightBean) {
             return 0; // Reference to the same object should always result in '0'
         } else if (leftBean == null) {
             return -1; // Whenever the reference varies and left is null, right is not null

File: querydsl-collections/src/test/java/com/querydsl/collections/AggregationTest.java
Patch:
@@ -52,7 +52,7 @@ public void Min() {
         assertEquals(2, query.select(cat.weight.min()).fetchOne());
     }
 
-    @Test(expected=UnsupportedOperationException.class)
+    @Test(expected = UnsupportedOperationException.class)
     public void Min_And_Max() {
         query.select(cat.weight.min(), cat.weight.max()).fetchOne();
     }

File: querydsl-collections/src/test/java/com/querydsl/collections/CatTest.java
Patch:
@@ -21,7 +21,7 @@
 
 public class CatTest {
 
-    @Test(expected=NoSuchFieldException.class)
+    @Test(expected = NoSuchFieldException.class)
     public void SkippedField() throws SecurityException, NoSuchFieldException {
         QCat.class.getField("skippedField");
     }

File: querydsl-collections/src/test/java/com/querydsl/collections/CollQueryStandardTest.java
Patch:
@@ -134,7 +134,7 @@ public void Params_anon() {
         assertEquals("Bob", CollQueryFactory.from(cat, data).where(cat.name.eq(name)).set(name,"Bob").select(cat.name).fetchOne());
     }
 
-    @Test(expected=ParamNotSetException.class)
+    @Test(expected = ParamNotSetException.class)
     public void Params_not_set() {
         Param<String> name = new Param<String>(String.class,"name");
         assertEquals("Bob", CollQueryFactory.from(cat, data).where(cat.name.eq(name)).select(cat.name).fetchOne());

File: querydsl-collections/src/test/java/com/querydsl/collections/Comment.java
Patch:
@@ -27,7 +27,7 @@ public class Comment {
 
     private Post post;
 
-    public Comment() {}
+    public Comment() { }
 
     @QueryProjection
     public Comment(int id, String text) {

File: querydsl-collections/src/test/java/com/querydsl/collections/GroupByTest.java
Patch:
@@ -151,7 +151,7 @@ public void Group_By_Null() {
 //        group.getSet(qComment);
 //    }
 
-    @Test(expected=ClassCastException.class)
+    @Test(expected = ClassCastException.class)
     public void ClassCastException() {
         Map<Integer, Group> results = CollQueryFactory.from(post, posts).from(comment, comments)
             .where(comment.post.id.eq(post.id))

File: querydsl-collections/src/test/java/com/querydsl/collections/JacocoTest.java
Patch:
@@ -13,7 +13,7 @@
 
 public class JacocoTest {
 
-    public static class CloneableVO {}
+    public static class CloneableVO { }
 
     public static class CloneableKlasse implements Cloneable {
         private CloneableVO value;

File: querydsl-collections/src/test/java/com/querydsl/collections/Post.java
Patch:
@@ -29,7 +29,7 @@ public class Post {
 
     private Set<Comment> comments;
 
-    public Post() {}
+    public Post() { }
 
     @QueryProjection
     public Post(int id, String name, User user) {

File: querydsl-collections/src/test/java/com/querydsl/collections/TypeCastTest.java
Patch:
@@ -22,7 +22,7 @@
 
 public class TypeCastTest {
 
-    @Test(expected=IllegalStateException.class)
+    @Test(expected = IllegalStateException.class)
     @Ignore
     public void Cast() {
         QAnimal animal = QAnimal.animal;

File: querydsl-collections/src/test/java/com/querydsl/collections/UniqueResultContractTest.java
Patch:
@@ -20,7 +20,7 @@
 
 public class UniqueResultContractTest extends AbstractQueryTest {
 
-    @Test(expected=NonUniqueResultException.class)
+    @Test(expected = NonUniqueResultException.class)
     public void Unique_Result_Throws_Exception_On_Multiple_Results() {
         CollQueryFactory.from(cat, cats).where(cat.name.isNotNull()).fetchOne();
     }

File: querydsl-collections/src/test/java/com/querydsl/collections/User.java
Patch:
@@ -24,7 +24,7 @@ public class User {
 
     private Post latestPost;
 
-    public User() {}
+    public User() { }
 
     @QueryProjection
     public User(String name) {

File: querydsl-apt/src/main/java/com/querydsl/apt/APTOptions.java
Patch:
@@ -81,6 +81,6 @@ public final class APTOptions {
      */
     public static final String QUERYDSL_UNKNOWN_AS_EMBEDDABLE = "querydsl.unknownAsEmbeddable";
 
-    private APTOptions() {}
+    private APTOptions() { }
 
 }

File: querydsl-apt/src/main/java/com/querydsl/apt/DefaultConfiguration.java
Patch:
@@ -108,10 +108,10 @@ public DefaultConfiguration(
             Config querydslConfig = element.getAnnotation(Config.class);
             SerializerConfig config = SimpleSerializerConfig.getConfig(querydslConfig);
             if (element instanceof PackageElement) {
-                PackageElement packageElement = (PackageElement)element;
+                PackageElement packageElement = (PackageElement) element;
                 packageToConfig.put(packageElement.getQualifiedName().toString(), config);
             } else if (element instanceof TypeElement) {
-                TypeElement typeElement = (TypeElement)element;
+                TypeElement typeElement = (TypeElement) element;
                 typeToConfig.put(typeElement.getQualifiedName().toString(), config);
             }
         }

File: querydsl-apt/src/main/java/com/querydsl/apt/SpatialSupport.java
Patch:
@@ -40,7 +40,7 @@ private static void registerTypes(TypeMappings typeMappings) {
         additions.put("PolyHedralSurface", "PolyhedralSurfacePath");
         for (Map.Entry<String, String> entry : additions.entrySet()) {
             typeMappings.register(
-                    new SimpleType("org.geolatte.geom."+ entry.getKey()),
+                    new SimpleType("org.geolatte.geom." + entry.getKey()),
                     new SimpleType("com.querydsl.spatial." + entry.getValue()));
         }
     }
@@ -58,7 +58,7 @@ private static void registerJTSTypes(TypeMappings typeMappings) {
         additions.put("Polygon", "JTSPolygonPath");
         for (Map.Entry<String, String> entry : additions.entrySet()) {
             typeMappings.register(
-                    new SimpleType("com.vividsolutions.jts.geom."+ entry.getKey()),
+                    new SimpleType("com.vividsolutions.jts.geom." + entry.getKey()),
                     new SimpleType("com.querydsl.spatial.jts." + entry.getValue()));
         }
     }
@@ -83,5 +83,5 @@ public static void addSupport(AbstractModule module) {
         addImports(module,"com.querydsl.spatial.jts.path");
     }
 
-    private SpatialSupport() {}
+    private SpatialSupport() { }
 }

File: querydsl-apt/src/main/java/com/querydsl/apt/TypeExtractor.java
Patch:
@@ -48,7 +48,7 @@ public TypeElement visitArray(ArrayType t, Void p) {
     @Override
     public TypeElement visitDeclared(DeclaredType t, Void p) {
         if (t.asElement() instanceof TypeElement) {
-            TypeElement typeElement = (TypeElement)t.asElement();
+            TypeElement typeElement = (TypeElement) t.asElement();
             switch (typeElement.getKind()) {
                 case ENUM:      return skipEnum ? null : typeElement;
                 case CLASS:     return typeElement;
@@ -62,13 +62,13 @@ public TypeElement visitDeclared(DeclaredType t, Void p) {
 
     private TypeElement visitInterface(DeclaredType t) {
         if (t.getTypeArguments().isEmpty()) {
-            return (TypeElement)t.asElement();
+            return (TypeElement) t.asElement();
         } else {
             int count = t.getTypeArguments().size();
             if (t.asElement().toString().startsWith("java.util")) {
                 return t.getTypeArguments().get(count - 1).accept(this, null);
             } else {
-                return (TypeElement)t.asElement();
+                return (TypeElement) t.asElement();
             }
         }
     }

File: querydsl-apt/src/main/java/com/querydsl/apt/TypeUtils.java
Patch:
@@ -85,6 +85,6 @@ public static TypeMirror getAnnotationValueAsTypeMirror(AnnotationMirror mirror,
         return null;
     }
 
-    private TypeUtils() {}
+    private TypeUtils() { }
 
 }

File: querydsl-apt/src/main/java/com/querydsl/apt/hibernate/HibernateConfiguration.java
Patch:
@@ -52,7 +52,7 @@ protected List<Class<? extends Annotation>> getAnnotations() {
             List<Class<? extends Annotation>> annotations = new ArrayList<Class<? extends Annotation>>();
             annotations.addAll(super.getAnnotations());
             for (String simpleName : Arrays.asList("Type", "Cascade", "LazyCollection", "OnDelete")) {
-                annotations.add((Class<? extends Annotation>) Class.forName("org.hibernate.annotations."+simpleName));
+                annotations.add((Class<? extends Annotation>) Class.forName("org.hibernate.annotations." + simpleName));
             }
             return annotations;
         } catch (ClassNotFoundException e) {

File: querydsl-apt/src/main/java/com/querydsl/apt/jpa/JPAConfiguration.java
Patch:
@@ -123,7 +123,7 @@ private TypeMirror getRealElementType(Element element) {
                     return types.getDeclaredType(typeElement, typeArg);
                 } else if (typeElement.getTypeParameters().size() == 2) {
                     if (element.asType() instanceof DeclaredType) {
-                        TypeMirror first = ((DeclaredType)element.asType()).getTypeArguments().get(0);
+                        TypeMirror first = ((DeclaredType) element.asType()).getTypeArguments().get(0);
                         return types.getDeclaredType(typeElement, first, typeArg);
                     }
                 }

File: querydsl-apt/src/test/java/Entity.java
Patch:
@@ -16,7 +16,7 @@
 @QueryEntity
 public final class Entity {
 
-    private Entity() {}
+    private Entity() { }
 
     static final QEntity entity = QEntity.entity;
 

File: querydsl-apt/src/test/java/com/querydsl/apt/DateExtensions.java
Patch:
@@ -22,7 +22,7 @@
 
 public final class DateExtensions {
 
-    private DateExtensions() {}
+    private DateExtensions() { }
 
     @QueryDelegate(Date.class)
     public static Predicate extension(DateExpression<Date> date) {

File: querydsl-apt/src/test/java/com/querydsl/apt/EntityExtensions.java
Patch:
@@ -19,7 +19,7 @@
 
 public final class EntityExtensions {
 
-    private EntityExtensions() {}
+    private EntityExtensions() { }
 
     @QueryDelegate(EntityWithExtensions.class)
     public static Predicate extension(QEntityWithExtensions entity) {

File: querydsl-apt/src/test/java/com/querydsl/apt/GenericExporterTest.java
Patch:
@@ -140,8 +140,8 @@ public void Execute4() throws IOException {
     private void execute(List<String> expected, String genericExporterFolder, String aptFolder) throws IOException {
         List<String> failures = new ArrayList<String>();
         int successes = 0;
-        for (File file : new File("target/"+genericExporterFolder+"/com/querydsl/apt/domain").listFiles()) {
-            File other = new File("target/"+aptFolder+"/com/querydsl/apt/domain", file.getName());
+        for (File file : new File("target/" + genericExporterFolder + "/com/querydsl/apt/domain").listFiles()) {
+            File other = new File("target/" + aptFolder + "/com/querydsl/apt/domain", file.getName());
             if (!other.exists() || !other.isFile()) {
                 continue;
             }

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/AbstractClasses2Test.java
Patch:
@@ -42,7 +42,7 @@ public abstract static class BaseArchetype<PK extends Serializable, DO extends S
         String name;
         String description;
 
-        public BaseArchetype() {}
+        public BaseArchetype() { }
 
 
         public int compareTo(BaseArchetype o) {
@@ -87,7 +87,7 @@ public static class PartyRole<P extends Party> extends BaseArchetype<Long, Party
         @ManyToOne()
         P party;
 
-        public PartyRole() {}
+        public PartyRole() { }
 
         public int compareTo(PartyRole o) {
             return 0;

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/AbstractClassesTest.java
Patch:
@@ -44,7 +44,7 @@ public abstract static class BaseArchetype<PK extends Serializable, DO extends S
         String name;
         String description;
 
-        public BaseArchetype() {}
+        public BaseArchetype() { }
 
         public int compareTo(BaseArchetype o) {
             return 0;

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/AbstractTest.java
Patch:
@@ -29,12 +29,12 @@ protected <T extends com.querydsl.core.types.Expression<?>> void start(Class<T>
     }
 
     protected void match(Class<?> expectedType, String name) throws SecurityException, NoSuchFieldException {
-        assertTrue(cl.getSimpleName()+"."+name + " failed", expectedType.isAssignableFrom(cl.getField(name).getType()));
+        assertTrue(cl.getSimpleName() + "." + name + " failed", expectedType.isAssignableFrom(cl.getField(name).getType()));
     }
 
     protected void matchType(Class<?> expectedType, String name) throws NoSuchFieldException, IllegalAccessException {
-        Class<?> type = ((com.querydsl.core.types.Expression)cl.getField(name).get(standardVariable)).getType();
-        assertTrue(cl.getSimpleName()+"."+name + " failed", expectedType.isAssignableFrom(type));
+        Class<?> type = ((com.querydsl.core.types.Expression) cl.getField(name).get(standardVariable)).getType();
+        assertTrue(cl.getSimpleName() + "." + name + " failed", expectedType.isAssignableFrom(type));
     }
 
     protected void assertPresent(String name) {

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/City.java
Patch:
@@ -16,7 +16,7 @@
 
 public final class City {
 
-    public City() {}
+    public City() { }
 
     public City(String name, Double latitude, Double longitude) {
         this.name = name;

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/ConstructorTest.java
Patch:
@@ -31,14 +31,14 @@ public static class CategorySuperclass {
     @QueryEntity
     public static class Category<T extends Category<T>> extends CategorySuperclass {
 
-        public Category(int i) {}
+        public Category(int i) { }
 
     }
 
     @QueryEntity
     public static class ClassWithConstructor {
 
-        public ClassWithConstructor() {}
+        public ClassWithConstructor() { }
 
     }
 

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/DeepInitializationTest.java
Patch:
@@ -15,7 +15,7 @@ public abstract static class AbstractEntity implements Cloneable {
 
         @Id
         @Column(name = "ID")
-        @GeneratedValue(generator="SEQUENCE")
+        @GeneratedValue(generator = "SEQUENCE")
         private long id;
 
         public long getId() {

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/EmbeddableInterfaceTest.java
Patch:
@@ -29,7 +29,7 @@ public class EmbeddableInterfaceTest {
     @Entity
     public static class EntityClass {
 
-        @ElementCollection(targetClass=EmbeddableClass.class)
+        @ElementCollection(targetClass = EmbeddableClass.class)
         Collection<EmbeddableInterface> children;
 
     }

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/EntityTest.java
Patch:
@@ -106,7 +106,7 @@ public void Constructors() throws SecurityException, NoSuchMethodException {
         QEntityTest_Supertype2.class.getConstructor(types);
     }
 
-    @Test(expected=NoSuchMethodException.class)
+    @Test(expected = NoSuchMethodException.class)
     public void Constructors2() throws SecurityException, NoSuchMethodException {
         Class[] types = new Class[]{Class.class, PathMetadata.class, PathInits.class};
         QEntityTest_EntityNoReferences.class.getConstructor(types);

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/ExcludedClassTest.java
Patch:
@@ -28,12 +28,12 @@ public static class InnerClass {
 
     }
 
-    @Test(expected=ClassNotFoundException.class)
+    @Test(expected = ClassNotFoundException.class)
     public void OuterClass() throws ClassNotFoundException {
         Class.forName(getClass().getPackage().getName() + ".Q" + getClass().getSimpleName());
     }
 
-    @Test(expected=ClassNotFoundException.class)
+    @Test(expected = ClassNotFoundException.class)
     public void InnerClass() throws ClassNotFoundException {
         Class.forName(getClass().getPackage().getName() + ".QExcludedClassTest_InnerClass");
     }

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/GenericTest.java
Patch:
@@ -115,7 +115,7 @@ public static class ItemType {
         SimpleType2<?> prop4;
     }
 
-    public static class Amount<T>{
+    public static class Amount<T> {
 
     }
 

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/JodaMoneyHelpers.java
Patch:
@@ -12,7 +12,7 @@
 
 public final class JodaMoneyHelpers {
 
-    private JodaMoneyHelpers() {}
+    private JodaMoneyHelpers() { }
 
     @QueryDelegate(Money.class)
     public static NumberExpression<BigDecimal> sum(QMoney money) {

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/ManyToManyTest.java
Patch:
@@ -22,7 +22,7 @@ public static class PhoneNumberImpl {
     @Entity
     public static class Person {
 
-        @ManyToMany(targetEntity=PhoneNumberImpl.class)
+        @ManyToMany(targetEntity = PhoneNumberImpl.class)
         Set<PhoneNumber> phones;
     }
 

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/OneToOneTest.java
Patch:
@@ -20,7 +20,7 @@ public static class PhoneNumberImpl {
     @Entity
     public static class Person {
 
-        @OneToOne(targetEntity=PhoneNumberImpl.class)
+        @OneToOne(targetEntity = PhoneNumberImpl.class)
         PhoneNumber phone;
     }
 

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/Properties2Test.java
Patch:
@@ -31,7 +31,7 @@ public String getId() {
         }
     }
 
-    @Test(expected=NoSuchFieldException.class)
+    @Test(expected = NoSuchFieldException.class)
     public void test() throws NoSuchFieldException {
         QProperties2Test_ConcreteX.class.getDeclaredField("id");
     }

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/QuerydslConfigTest.java
Patch:
@@ -25,14 +25,14 @@
 
 public class QuerydslConfigTest {
 
-    @Config(entityAccessors=true)
+    @Config(entityAccessors = true)
     @QueryEntity
     public static class Superclass {
 
         Entity prop3;
     }
 
-    @Config(entityAccessors=true, listAccessors = true, mapAccessors= true)
+    @Config(entityAccessors = true, listAccessors = true, mapAccessors = true)
     @QueryEntity
     public static class Entity extends Superclass {
 

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/RelationTest.java
Patch:
@@ -54,7 +54,7 @@ public static class GenericRelations {
     }
 
     @QueryEntity
-    @Config(listAccessors=true, mapAccessors=true)
+    @Config(listAccessors = true, mapAccessors = true)
     public static class RelationType {
 
         MyEnum enumProperty;

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/SimpleTypesTest.java
Patch:
@@ -122,7 +122,7 @@ public boolean equals(Object o) {
     }
 
     @QueryEntity
-    @Config(listAccessors=true)
+    @Config(listAccessors = true)
     public static class SimpleTypes {
         transient int test;
         List<Integer> testList;

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/Temporal2Test.java
Patch:
@@ -22,7 +22,7 @@ public static class Cheque {
         @Temporal(TemporalType.DATE)
         private Date dataVencimento;
 
-        @Column(precision=15, scale=2)
+        @Column(precision = 15, scale = 2)
         private BigDecimal valor;
 
         @QueryProjection

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/TemporalTest.java
Patch:
@@ -18,10 +18,10 @@ public class TemporalTest {
     @Entity
     public static class MyEntity {
 
-        @Temporal(value=TemporalType.DATE)
+        @Temporal(value = TemporalType.DATE)
         private Date date;
 
-        @Temporal(value=TemporalType.TIME)
+        @Temporal(value = TemporalType.TIME)
         private Date time;
     }
 

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/UserUtils.java
Patch:
@@ -18,7 +18,7 @@
 
 public final class UserUtils {
 
-    private UserUtils() {}
+    private UserUtils() { }
 
     @QueryDelegate(DelegateTest.User.class)
     public static StringPath getName(QDelegateTest_User user) {

File: querydsl-apt/src/test/java/com/querydsl/apt/inheritance/Inheritance7Test.java
Patch:
@@ -35,7 +35,7 @@ public static class SubCategory extends Category<SubCategory> {
     }
 
     @QueryEntity
-    public static class Category<T extends Category<T>> implements Comparable<T>{
+    public static class Category<T extends Category<T>> implements Comparable<T> {
 
         private User owner;
 

File: querydsl-apt/src/test/java/com/querydsl/apt/inheritance/InheritanceTest.java
Patch:
@@ -22,7 +22,7 @@
 public class InheritanceTest {
 
     @QueryEntity
-    public abstract class BobbinGenOperation<M extends FlexPlasticFilm> extends Operation<M>{
+    public abstract class BobbinGenOperation<M extends FlexPlasticFilm> extends Operation<M> {
 
     }
 

File: querydsl-codegen/src/main/java/com/querydsl/codegen/BeanSerializer.java
Patch:
@@ -164,12 +164,12 @@ public void serialize(EntityType model, SerializerConfig serializerConfig,
         for (Property property : model.getProperties()) {
             String propertyName = property.getEscapedName();
             // getter
-            writer.beginPublicMethod(property.getType(), "get"+BeanUtils.capitalize(propertyName));
+            writer.beginPublicMethod(property.getType(), "get" + BeanUtils.capitalize(propertyName));
             writer.line("return ", propertyName, ";");
             writer.end();
             // setter
             Parameter parameter = new Parameter(propertyName, property.getType());
-            writer.beginPublicMethod(Types.VOID, "set"+BeanUtils.capitalize(propertyName), parameter);
+            writer.beginPublicMethod(Types.VOID, "set" + BeanUtils.capitalize(propertyName), parameter);
             writer.line("this.", propertyName, " = ", propertyName, ";");
             writer.end();
         }

File: querydsl-codegen/src/main/java/com/querydsl/codegen/ClassPathUtils.java
Patch:
@@ -85,5 +85,5 @@ public static Class<?> safeClassForName(ClassLoader classLoader, String classNam
         }
     }
 
-    private ClassPathUtils() {}
+    private ClassPathUtils() { }
 }

File: querydsl-codegen/src/main/java/com/querydsl/codegen/Delegate.java
Patch:
@@ -51,7 +51,7 @@ public boolean equals(Object o) {
         if (o == this) {
             return true;
         } else if (o instanceof Delegate) {
-            Delegate m = (Delegate)o;
+            Delegate m = (Delegate) o;
             return m.name.equals(name) && m.parameters.equals(parameters);
         } else {
             return false;

File: querydsl-codegen/src/main/java/com/querydsl/codegen/EmbeddableSerializer.java
Patch:
@@ -57,7 +57,7 @@ protected void introClassHeader(CodeWriter writer, EntityType model) throws IOEx
         TypeCategory category = model.getOriginalCategory();
         Class<? extends Path> pathType;
         if (model.getProperties().isEmpty()) {
-            switch(category) {
+            switch (category) {
                 case COMPARABLE : pathType = ComparablePath.class; break;
                 case ENUM: pathType = EnumPath.class; break;
                 case DATE: pathType = DatePath.class; break;

File: querydsl-codegen/src/main/java/com/querydsl/codegen/EntityType.java
Patch:
@@ -110,7 +110,7 @@ public boolean equals(Object o) {
         if (o == this) {
             return true;
         } else if (o instanceof Type) {
-            return getFullName().equals(((Type)o).getFullName());
+            return getFullName().equals(((Type) o).getFullName());
         } else {
             return false;
         }

File: querydsl-codegen/src/main/java/com/querydsl/codegen/Keywords.java
Patch:
@@ -26,7 +26,7 @@
  */
 public final class Keywords {
 
-    private Keywords() {}
+    private Keywords() { }
 
     public static final Collection<String> JPA = ImmutableList.of(
             "ABS","ALL","AND","ANY","AS","ASC","AVG","BETWEEN",

File: querydsl-codegen/src/main/java/com/querydsl/codegen/ParameterizedTypeImpl.java
Patch:
@@ -54,7 +54,7 @@ public boolean equals(Object o) {
         if (o == this) {
             return true;
         } else if (o instanceof ParameterizedTypeImpl) {
-            ParameterizedTypeImpl other = (ParameterizedTypeImpl)o;
+            ParameterizedTypeImpl other = (ParameterizedTypeImpl) o;
             return other.rawType.equals(rawType)
                     && Arrays.equals(other.arguments, arguments);
         } else {

File: querydsl-codegen/src/main/java/com/querydsl/codegen/Property.java
Patch:
@@ -111,7 +111,7 @@ public boolean equals(Object o) {
         if (o == this) {
             return true;
         } else if (o instanceof Property) {
-            Property p = (Property)o;
+            Property p = (Property) o;
             return p.name.equals(name) && p.type.equals(type);
         } else {
             return false;

File: querydsl-codegen/src/main/java/com/querydsl/codegen/QueryTypeFactoryImpl.java
Patch:
@@ -51,10 +51,10 @@ public Type create(Type type) {
     private Type createWithPackage(Type type) {
         String packageName = type.getPackageName();
         String simpleName = prefix + normalizeName(type.getFullName()
-                .substring(packageName.length()+1)) + suffix;
+                .substring(packageName.length() + 1)) + suffix;
         packageName = (packageName.startsWith("java") ? "ext." : "")
                 + packageName + packageSuffix;
-        return new SimpleType(type.getCategory(), packageName+"."+simpleName,
+        return new SimpleType(type.getCategory(), packageName + "." + simpleName,
                 packageName, simpleName, false, false);
     }
 

File: querydsl-codegen/src/main/java/com/querydsl/codegen/Supertype.java
Patch:
@@ -63,7 +63,7 @@ public boolean equals(Object o) {
         if (o == this) {
             return true;
         } else if (o instanceof Supertype) {
-            return ((Supertype)o).type.equals(type);
+            return ((Supertype) o).type.equals(type);
         } else {
             return false;
         }

File: querydsl-codegen/src/test/java/com/querydsl/codegen/CodegenModuleTest.java
Patch:
@@ -32,7 +32,7 @@ public void TypeMappings() {
         assertNotNull(module.get(TypeMappings.class));
     }
 
-    @Test(expected=IllegalArgumentException.class)
+    @Test(expected = IllegalArgumentException.class)
     public void Get_With_Unknown_Key() {
         module.get(String.class, "XXX");
     }

File: querydsl-codegen/src/test/java/com/querydsl/codegen/EmbeddableSerializerTest.java
Patch:
@@ -76,7 +76,7 @@ public void OriginalCategory() throws IOException {
             typeMappings.register(entityType, queryTypeFactory.create(entityType));
 
             serializer.serialize(entityType, SimpleSerializerConfig.DEFAULT, new JavaWriter(writer));
-            assertTrue(entry.toString(), writer.toString().contains("public class QEntity extends "+entry.getValue()+" {"));
+            assertTrue(entry.toString(), writer.toString().contains("public class QEntity extends " + entry.getValue() + " {"));
         }
 
     }

File: querydsl-codegen/src/test/java/com/querydsl/codegen/EntitySerializerTest.java
Patch:
@@ -94,7 +94,7 @@ public void OriginalCategory() throws IOException {
             typeMappings.register(entityType, queryTypeFactory.create(entityType));
 
             serializer.serialize(entityType, SimpleSerializerConfig.DEFAULT, new JavaWriter(writer));
-            assertTrue(entry.toString(), writer.toString().contains("public class QEntity extends "+entry.getValue()+" {"));
+            assertTrue(entry.toString(), writer.toString().contains("public class QEntity extends " + entry.getValue() + " {"));
         }
 
     }

File: querydsl-codegen/src/test/java/com/querydsl/codegen/Inheritance2Test.java
Patch:
@@ -59,8 +59,8 @@ public void Base_base2() throws SecurityException, NoSuchFieldException {
         Field field = Base.class.getDeclaredField("base2");
         Type type = typeFactory.get(field.getType(), field.getGenericType());
         assertEquals(2, type.getParameters().size());
-        assertNull(((TypeExtends)type.getParameters().get(0)).getVarName());
-        assertNull(((TypeExtends)type.getParameters().get(1)).getVarName());
+        assertNull(((TypeExtends) type.getParameters().get(0)).getVarName());
+        assertNull(((TypeExtends) type.getParameters().get(1)).getVarName());
     }
 
     @Test

File: querydsl-codegen/src/test/java/com/querydsl/codegen/Point.java
Patch:
@@ -18,7 +18,7 @@
 import com.querydsl.core.types.dsl.ArrayPath;
 
 
-public class Point extends ArrayPath<Double[], Double>{
+public class Point extends ArrayPath<Double[], Double> {
 
     private static final long serialVersionUID = 1776628530121566388L;
 

File: querydsl-codegen/src/test/java/com/querydsl/codegen/ScalaTypeDump.java
Patch:
@@ -57,10 +57,10 @@ public void test() throws IOException {
             for (Method m : cl.getDeclaredMethods()) {
                 List<Parameter> params = new ArrayList<Parameter>();
                 for (Class<?> paramType : m.getParameterTypes()) {
-                    params.add(new Parameter("arg"+params.size(), new ClassType(paramType)));
+                    params.add(new Parameter("arg" + params.size(), new ClassType(paramType)));
                 }
                 Type returnType = new ClassType(m.getReturnType());
-                writer.beginPublicMethod(returnType, ":"+m.getName(), params.toArray(new Parameter[params.size()]));
+                writer.beginPublicMethod(returnType, ":" + m.getName(), params.toArray(new Parameter[params.size()]));
                 writer.end();
             }
             writer.end();

File: querydsl-codegen/src/test/java/com/querydsl/codegen/SomeOtherClass2.java
Patch:
@@ -2,7 +2,7 @@
 
 public final class SomeOtherClass2 {
 
-    private SomeOtherClass2() {}
+    private SomeOtherClass2() { }
 
     public static String property;
 

File: querydsl-core/src/main/java/com/querydsl/core/BooleanBuilder.java
Patch:
@@ -55,7 +55,7 @@ public BooleanBuilder() {  }
      * @param initial initial value
      */
     public BooleanBuilder(Predicate initial) {
-        predicate = (Predicate)ExpressionUtils.extract(initial);
+        predicate = (Predicate) ExpressionUtils.extract(initial);
     }
 
     @Override
@@ -118,7 +118,7 @@ public boolean equals(Object o) {
         if (o == this) {
             return true;
         } else if (o instanceof BooleanBuilder) {
-            return Objects.equal(((BooleanBuilder)o).getValue(), predicate);
+            return Objects.equal(((BooleanBuilder) o).getValue(), predicate);
         } else {
             return false;
         }

File: querydsl-core/src/main/java/com/querydsl/core/JoinFlag.java
Patch:
@@ -117,7 +117,7 @@ public boolean equals(Object obj) {
         if (obj == this) {
             return true;
         } else if (obj instanceof JoinFlag) {
-            return ((JoinFlag)obj).flag.equals(flag);
+            return ((JoinFlag) obj).flag.equals(flag);
         } else {
             return false;
         }

File: querydsl-core/src/main/java/com/querydsl/core/QueryFlag.java
Patch:
@@ -134,7 +134,7 @@ public boolean equals(Object obj) {
         if (obj == this) {
             return true;
         } else if (obj instanceof QueryFlag) {
-            QueryFlag other = (QueryFlag)obj;
+            QueryFlag other = (QueryFlag) obj;
             return other.position.equals(position) && other.flag.equals(flag);
         } else {
             return false;

File: querydsl-core/src/main/java/com/querydsl/core/QueryModifiers.java
Patch:
@@ -126,7 +126,7 @@ public boolean equals(Object o) {
         if (o == this) {
             return true;
         } else if (o instanceof QueryModifiers) {
-            QueryModifiers qm = (QueryModifiers)o;
+            QueryModifiers qm = (QueryModifiers) o;
             return Objects.equal(qm.getLimit(), limit) && Objects.equal(qm.getOffset(), offset);
         } else {
             return false;

File: querydsl-core/src/main/java/com/querydsl/core/QueryResults.java
Patch:
@@ -34,7 +34,7 @@ public final class QueryResults<T> implements Serializable {
 
     @SuppressWarnings("unchecked")
     public static <T> QueryResults<T> emptyResults() {
-        return (QueryResults<T>)EMPTY;
+        return (QueryResults<T>) EMPTY;
     };
 
     private final long limit, offset, total;

File: querydsl-core/src/main/java/com/querydsl/core/alias/AliasFactory.java
Patch:
@@ -61,7 +61,7 @@ public AliasFactory(final PathFactory pathFactory, TypeSystem typeSystem) {
             new CacheLoader<Pair<Class<?>, String>, EntityPath<?>>() {
                 @Override
                 public EntityPath<?> load(Pair<Class<?>, String> input) {
-                    return (EntityPath<?>)pathFactory.createEntityPath(
+                    return (EntityPath<?>) pathFactory.createEntityPath(
                             input.getFirst(),
                             PathMetadataFactory.forVariable(input.getSecond()));
                 }

File: querydsl-core/src/main/java/com/querydsl/core/alias/DefaultPathFactory.java
Patch:
@@ -64,7 +64,7 @@ public <T extends Comparable<?>> Path<T> createDateTimePath(Class<T> type, PathM
     @Override
     public <T> Path<T> createEntityPath(Class<T> type, PathMetadata metadata) {
         if (Comparable.class.isAssignableFrom(type)) {
-            return Expressions.comparableEntityPath((Class)type, metadata);
+            return Expressions.comparableEntityPath((Class) type, metadata);
         } else {
             return new EntityPathBase<T>(type, metadata);
         }

File: querydsl-core/src/main/java/com/querydsl/core/group/AbstractGroupExpression.java
Patch:
@@ -34,7 +34,7 @@ public abstract class AbstractGroupExpression<T, R> implements GroupExpression<T
 
     @SuppressWarnings("unchecked")
     public AbstractGroupExpression(Class<? super R> type, Expression<T> expr) {
-        this.type = (Class)type;
+        this.type = (Class) type;
         this.expr = expr;
     }
 
@@ -69,7 +69,7 @@ public <R, C> R accept(Visitor<R, C> v, C context) {
     @Override
     public boolean equals(Object o) {
         if (o != null && getClass().equals(o.getClass())) {
-            return ((GroupExpression<?,?>)o).getExpression().equals(expr);
+            return ((GroupExpression<?,?>) o).getExpression().equals(expr);
         } else {
             return false;
         }

File: querydsl-core/src/main/java/com/querydsl/core/group/GMax.java
Patch:
@@ -21,7 +21,7 @@ class GMax<T extends Comparable<? super T>> extends AbstractGroupExpression<T, T
 
     @SuppressWarnings("unchecked")
     public GMax(Expression<T> expr) {
-        super((Class)expr.getType(), expr);
+        super((Class) expr.getType(), expr);
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/group/GOne.java
Patch:
@@ -21,7 +21,7 @@ class GOne<T> extends AbstractGroupExpression<T, T> {
 
     @SuppressWarnings("unchecked")
     public GOne(Expression<T> expr) {
-        super((Class)expr.getType(), expr);
+        super((Class) expr.getType(), expr);
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/group/GroupBy.java
Patch:
@@ -332,6 +332,6 @@ public static <K, V, T, U> AbstractGroupExpression<Pair<K, V>, SortedMap<T, U>>
         return new GMap.Mixin<K, V, T, U, SortedMap<T, U>>(key, value, GMap.createSorted(QPair.create(key, value), comparator));
     }
 
-    private GroupBy() {}
+    private GroupBy() { }
 
 }

File: querydsl-core/src/main/java/com/querydsl/core/group/GroupByIterate.java
Patch:
@@ -109,6 +109,6 @@ public void close() {
     }
 
     protected V transform(Group group) {
-        return (V)group;
+        return (V) group;
     }
 }

File: querydsl-core/src/main/java/com/querydsl/core/group/GroupByList.java
Patch:
@@ -75,6 +75,6 @@ public List<V> transform(FetchableQuery<?,?> query) {
     }
 
     protected V transform(Group group) {
-        return (V)group;
+        return (V) group;
     }
 }

File: querydsl-core/src/main/java/com/querydsl/core/group/GroupByMap.java
Patch:
@@ -56,7 +56,7 @@ public Map<K, V> transform(FetchableQuery<?,?> query) {
             while (iter.hasNext()) {
                 Object[] row = iter.next().toArray();
                 K groupId = (K) row[0];
-                GroupImpl group = (GroupImpl)groups.get(groupId);
+                GroupImpl group = (GroupImpl) groups.get(groupId);
                 if (group == null) {
                     group = new GroupImpl(groupExpressions, maps);
                     groups.put(groupId, group);
@@ -73,7 +73,7 @@ public Map<K, V> transform(FetchableQuery<?,?> query) {
     }
 
     protected Map<K, V> transform(Map<K, Group> groups) {
-        return (Map<K,V>)groups;
+        return (Map<K,V>) groups;
     }
 
 }

File: querydsl-core/src/main/java/com/querydsl/core/group/GroupByProjection.java
Patch:
@@ -34,7 +34,7 @@ public GroupByProjection(Expression<K> key, Expression<?>... expressions) {
 
     @Override
     protected Map<K, V> transform(Map<K, Group> groups) {
-        Map<K, V> results = new LinkedHashMap<K, V>((int) Math.ceil(groups.size()/0.75), 0.75f);
+        Map<K, V> results = new LinkedHashMap<K, V>((int) Math.ceil(groups.size() / 0.75), 0.75f);
         for (Map.Entry<K, Group> entry : groups.entrySet()) {
             results.put(entry.getKey(), transform(entry.getValue()));
         }

File: querydsl-core/src/main/java/com/querydsl/core/support/CollectionAnyVisitor.java
Patch:
@@ -36,8 +36,8 @@ private static <T> Path<T> replaceParent(Path<T> path, Path<?> parent) {
         PathMetadata metadata = new PathMetadata(parent, path.getMetadata().getElement(),
                 path.getMetadata().getPathType());
         if (path instanceof CollectionExpression) {
-            CollectionExpression<?,?> col = (CollectionExpression<?,?>)path;
-            return (Path<T>)Expressions.listPath(col.getParameter(0), SimplePath.class, metadata);
+            CollectionExpression<?,?> col = (CollectionExpression<?,?>) path;
+            return (Path<T>) Expressions.listPath(col.getParameter(0), SimplePath.class, metadata);
         } else {
             return ExpressionUtils.path(path.getType(), metadata);
         }
@@ -54,7 +54,7 @@ public Expression<?> visit(TemplateExpression<?> expr, Context context) {
         for (int i = 0; i < args.length; i++) {
             Context c = new Context();
             if (expr.getArg(i) instanceof Expression) {
-                args[i] = ((Expression<?>)expr.getArg(i)).accept(this, c);
+                args[i] = ((Expression<?>) expr.getArg(i)).accept(this, c);
             } else {
                 args[i] = expr.getArg(i);
             }

File: querydsl-core/src/main/java/com/querydsl/core/support/EnumConversion.java
Patch:
@@ -60,13 +60,13 @@ public T newInstance(Object... args) {
         if (args[0] != null) {
             if (args[0] instanceof String) {
                 @SuppressWarnings("unchecked") //The expression type is an enum
-                T rv = (T) Enum.valueOf(getType().asSubclass(Enum.class), (String)args[0]);
+                T rv = (T) Enum.valueOf(getType().asSubclass(Enum.class), (String) args[0]);
                 return rv;
             } else if (args[0] instanceof Number) {
-                return values[((Number)args[0]).intValue()];
+                return values[((Number) args[0]).intValue()];
             } else {
                 @SuppressWarnings("unchecked")
-                T rv = (T)args[0];
+                T rv = (T) args[0];
                 return rv;
             }
         } else {

File: querydsl-core/src/main/java/com/querydsl/core/support/FetchableQueryBase.java
Patch:
@@ -49,7 +49,7 @@ public final T fetchFirst() {
     }
 
     public <T> T transform(ResultTransformer<T> transformer) {
-        return transformer.transform((FetchableQuery<?,?>)this);
+        return transformer.transform((FetchableQuery<?,?>) this);
     }
 
     @Nullable
@@ -74,7 +74,7 @@ public final boolean equals(Object o) {
         if (o == this) {
             return true;
         } else if (o instanceof SubQueryExpression) {
-            SubQueryExpression<?> s = (SubQueryExpression<?>)o;
+            SubQueryExpression<?> s = (SubQueryExpression<?>) o;
             return s.getMetadata().equals(queryMixin.getMetadata());
         } else {
             return false;

File: querydsl-core/src/main/java/com/querydsl/core/support/FetchableSubQueryBase.java
Patch:
@@ -32,7 +32,7 @@ public abstract class FetchableSubQueryBase<T, Q extends FetchableSubQueryBase<T
 
     public FetchableSubQueryBase(QueryMixin<Q> queryMixin) {
         super(queryMixin);
-        mixin = new SubQueryExpressionImpl<T>((Class)Object.class, queryMixin.getMetadata());
+        mixin = new SubQueryExpressionImpl<T>((Class) Object.class, queryMixin.getMetadata());
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/support/Normalization.java
Patch:
@@ -93,6 +93,6 @@ private static boolean hasOperators(String queryString) {
         return false;
     }
 
-    private Normalization() {}
+    private Normalization() { }
 
 }

File: querydsl-core/src/main/java/com/querydsl/core/support/NumberConversion.java
Patch:
@@ -54,9 +54,9 @@ public List<Expression<?>> getArgs() {
     public T newInstance(Object... args) {
         if (args[0] != null) {
             if (getType().equals(Boolean.class)) {
-                return (T)Boolean.valueOf(((Number)args[0]).intValue() > 0);
+                return (T) Boolean.valueOf(((Number) args[0]).intValue() > 0);
             } else {
-                return (T)MathUtils.cast((Number)args[0], (Class)getType());
+                return (T) MathUtils.cast((Number) args[0], (Class) getType());
             }
         } else {
             return null;

File: querydsl-core/src/main/java/com/querydsl/core/support/PathsExtractor.java
Patch:
@@ -28,7 +28,7 @@ public final class PathsExtractor implements Visitor<Void, List<Path<?>>> {
 
     public static final PathsExtractor DEFAULT = new PathsExtractor();
 
-    private PathsExtractor() {}
+    private PathsExtractor() { }
 
     @Override
     public Void visit(Constant<?> expr, List<Path<?>> paths) {

File: querydsl-core/src/main/java/com/querydsl/core/support/QueryBase.java
Patch:
@@ -179,7 +179,7 @@ public boolean equals(Object o) {
         if (o == this) {
             return true;
         } else if (o instanceof QueryBase) {
-            QueryBase q = (QueryBase)o;
+            QueryBase q = (QueryBase) o;
             return q.queryMixin.equals(queryMixin);
         } else {
             return false;

File: querydsl-core/src/main/java/com/querydsl/core/support/SerializerBase.java
Patch:
@@ -95,7 +95,7 @@ public final S handle(Expression<?> expr) {
 
     public final S handle(Object arg) {
         if (arg instanceof Expression) {
-            ((Expression<?>)arg).accept(this, null);
+            ((Expression<?>) arg).accept(this, null);
         } else {
             visitConstant(arg);
         }
@@ -125,7 +125,7 @@ protected void handleTemplate(final Template template, final List<?> args) {
         for (final Template.Element element : template.getElements()) {
             final Object rv = element.convert(args);
             if (rv instanceof Expression) {
-                ((Expression<?>)rv).accept(this, null);
+                ((Expression<?>) rv).accept(this, null);
             } else if (element.isString()) {
                 builder.append(rv.toString());
             } else {

File: querydsl-core/src/main/java/com/querydsl/core/types/ConstantImpl.java
Patch:
@@ -86,7 +86,7 @@ public static Constant<Integer> create(int i) {
 
     public static Constant<Long> create(long i) {
         if (i >= 0 && i < CACHE_SIZE) {
-            return LONGS[(int)i];
+            return LONGS[(int) i];
         } else {
             return new ConstantImpl<Long>(Long.class, i);
         }
@@ -117,7 +117,7 @@ public static <T> Constant<T> create(Class<T> type, T constant) {
      */
     @SuppressWarnings("unchecked") //The class of the constant will mandate the type
     private ConstantImpl(T constant) {
-        this((Class)constant.getClass(), constant);
+        this((Class) constant.getClass(), constant);
     }
 
     /**
@@ -141,7 +141,7 @@ public boolean equals(Object o) {
         if (o == this) {
             return true;
         } else if (o instanceof Constant<?>) {
-            return ((Constant<?>)o).getConstant().equals(constant);
+            return ((Constant<?>) o).getConstant().equals(constant);
         } else {
             return false;
         }

File: querydsl-core/src/main/java/com/querydsl/core/types/ExtractorVisitor.java
Patch:
@@ -24,7 +24,7 @@ final class ExtractorVisitor implements Visitor<Expression<?>,Void> {
 
     public static final ExtractorVisitor DEFAULT = new ExtractorVisitor();
 
-    private ExtractorVisitor() {}
+    private ExtractorVisitor() { }
 
     @Override
     public Expression<?> visit(Constant<?> expr, Void context) {

File: querydsl-core/src/main/java/com/querydsl/core/types/FactoryExpressionBase.java
Patch:
@@ -61,7 +61,7 @@ public boolean equals(Object o) {
             if (o == this) {
                 return true;
             } else if (o instanceof FactoryExpressionWrapper) {
-                return expr.equals(((FactoryExpressionWrapper)o).expr);
+                return expr.equals(((FactoryExpressionWrapper) o).expr);
             } else {
                 return false;
             }

File: querydsl-core/src/main/java/com/querydsl/core/types/HashCodeVisitor.java
Patch:
@@ -23,7 +23,7 @@ public final class HashCodeVisitor implements Visitor<Integer,Void> {
 
     public static final HashCodeVisitor DEFAULT = new HashCodeVisitor();
 
-    private HashCodeVisitor() {}
+    private HashCodeVisitor() { }
 
     @Override
     public Integer visit(Constant<?> expr, Void context) {

File: querydsl-core/src/main/java/com/querydsl/core/types/MappingProjection.java
Patch:
@@ -51,7 +51,7 @@ public abstract class MappingProjection<T> extends FactoryExpressionBase<T> {
      */
     @SuppressWarnings("unchecked")
     public MappingProjection(Class<? super T> type, Expression<?>... args) {
-        super((Class)type);
+        super((Class) type);
         qTuple = new QTuple(ExpressionUtils.distinctList(args));
     }
 
@@ -63,7 +63,7 @@ public MappingProjection(Class<? super T> type, Expression<?>... args) {
      */
     @SuppressWarnings("unchecked")
     public MappingProjection(Class<? super T> type, Expression<?>[]... args) {
-        super((Class)type);
+        super((Class) type);
         qTuple = new QTuple(ExpressionUtils.distinctList(args));
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/types/OperationImpl.java
Patch:
@@ -69,7 +69,7 @@ public final boolean equals(Object o) {
         if (o == this) {
             return true;
         } else if (o instanceof Operation<?>) {
-            Operation<?> op = (Operation<?>)o;
+            Operation<?> op = (Operation<?>) o;
             return op.getOperator() == operator
                 && op.getArgs().equals(args)
                 && op.getType().equals(getType());

File: querydsl-core/src/main/java/com/querydsl/core/types/OrderSpecifier.java
Patch:
@@ -110,7 +110,7 @@ public boolean equals(Object o) {
         if (o == this) {
             return true;
         } else if (o instanceof OrderSpecifier) {
-            OrderSpecifier<?> os = (OrderSpecifier)o;
+            OrderSpecifier<?> os = (OrderSpecifier) o;
             return os.order.equals(order) && os.target.equals(target)
                     && os.nullHandling.equals(nullHandling);
         } else {

File: querydsl-core/src/main/java/com/querydsl/core/types/ParamExpressionImpl.java
Patch:
@@ -55,7 +55,7 @@ public final boolean equals(Object o) {
         if (o == this) {
             return true;
         } else if (o instanceof ParamExpression<?>) {
-            ParamExpression<?> other = (ParamExpression<?>)o;
+            ParamExpression<?> other = (ParamExpression<?>) o;
             return other.getType().equals(getType())
                 && other.getName().equals(name)
                 && other.isAnon() == anon;

File: querydsl-core/src/main/java/com/querydsl/core/types/ParamsVisitor.java
Patch:
@@ -29,7 +29,7 @@ public final class ParamsVisitor implements Visitor<Void, QueryMetadata> {
 
     public static final ParamsVisitor DEFAULT = new ParamsVisitor();
 
-    private ParamsVisitor() {}
+    private ParamsVisitor() { }
 
     @Override
     public Void visit(Constant<?> expr, QueryMetadata context) {
@@ -62,7 +62,7 @@ public Void visit(Path<?> expr, QueryMetadata context) {
     public Void visit(SubQueryExpression<?> expr, QueryMetadata context) {
         QueryMetadata md = expr.getMetadata();
         for (Map.Entry<ParamExpression<?>, Object> entry : md.getParams().entrySet()) {
-            context.setParam((ParamExpression)entry.getKey(), entry.getValue());
+            context.setParam((ParamExpression) entry.getKey(), entry.getValue());
         }
         visit(md.getGroupBy(), context);
         visit(md.getHaving(), context);
@@ -80,7 +80,7 @@ public Void visit(SubQueryExpression<?> expr, QueryMetadata context) {
     public Void visit(TemplateExpression<?> expr, QueryMetadata context) {
         for (Object arg : expr.getArgs()) {
             if (arg instanceof Expression<?>) {
-                ((Expression<?>)arg).accept(this, context);
+                ((Expression<?>) arg).accept(this, context);
             }
         }
         return null;

File: querydsl-core/src/main/java/com/querydsl/core/types/PathExtractor.java
Patch:
@@ -25,7 +25,7 @@ public final class PathExtractor implements Visitor<Path<?>,Void> {
 
     public static final PathExtractor DEFAULT = new PathExtractor();
 
-    private PathExtractor() {}
+    private PathExtractor() { }
 
     @Override
     public Path<?> visit(Constant<?> expr, Void context) {
@@ -65,7 +65,7 @@ public Path<?> visit(TemplateExpression<?> expr, Void context) {
     private Path<?> visit(List<?> exprs) {
         for (Object e : exprs) {
             if (e instanceof Expression) {
-                Path<?> path = ((Expression<?>)e).accept(this, null);
+                Path<?> path = ((Expression<?>) e).accept(this, null);
                 if (path != null) {
                     return path;
                 }

File: querydsl-core/src/main/java/com/querydsl/core/types/PathMetadata.java
Patch:
@@ -68,7 +68,7 @@ public Object getElement() {
 
     public String getName() {
         if (pathType == PathType.VARIABLE || pathType == PathType.PROPERTY) {
-            return (String)element;
+            return (String) element;
         } else {
             throw new IllegalStateException("name property not available for path of type " + pathType +
                     ". Use getElement() to access the generic path element.");

File: querydsl-core/src/main/java/com/querydsl/core/types/PathMetadataFactory.java
Patch:
@@ -130,6 +130,6 @@ public static PathMetadata forVariable(String variable) {
         return new PathMetadata(null, variable, PathType.VARIABLE);
     }
 
-    private PathMetadataFactory() {}
+    private PathMetadataFactory() { }
 
 }

File: querydsl-core/src/main/java/com/querydsl/core/types/Projections.java
Patch:
@@ -278,5 +278,5 @@ public static QTuple tuple(Expression<?>[]... exprs) {
         return new QTuple(exprs);
     }
 
-    private Projections() {}
+    private Projections() { }
 }

File: querydsl-core/src/main/java/com/querydsl/core/types/QTuple.java
Patch:
@@ -59,8 +59,8 @@ private static ImmutableMap<Expression<?>, Integer> createBindings(List<Expressi
         Map<Expression<?>, Integer> map = Maps.newHashMap();
         for (int i = 0; i < exprs.size(); i++) {
             Expression<?> e = exprs.get(i);
-            if (e instanceof Operation && ((Operation<?>)e).getOperator() == Ops.ALIAS) {
-                map.put(((Operation<?>)e).getArg(1), i);
+            if (e instanceof Operation && ((Operation<?>) e).getOperator() == Ops.ALIAS) {
+                map.put(((Operation<?>) e).getArg(1), i);
             }
             map.put(e, i);
         }
@@ -182,7 +182,7 @@ public boolean equals(Object obj) {
         if (obj == this) {
             return true;
         } else if (obj instanceof FactoryExpression) {
-            FactoryExpression<?> c = (FactoryExpression<?>)obj;
+            FactoryExpression<?> c = (FactoryExpression<?>) obj;
             return args.equals(c.getArgs()) && getType().equals(c.getType());
         } else {
             return false;

File: querydsl-core/src/main/java/com/querydsl/core/types/SubQueryExpressionImpl.java
Patch:
@@ -40,7 +40,7 @@ public final boolean equals(Object o) {
         if (o == this) {
             return true;
         } else if (o instanceof SubQueryExpression) {
-            SubQueryExpression<T> s = (SubQueryExpression<T>)o;
+            SubQueryExpression<T> s = (SubQueryExpression<T>) o;
             return s.getMetadata().equals(metadata);
         } else {
             return false;

File: querydsl-core/src/main/java/com/querydsl/core/types/Template.java
Patch:
@@ -200,7 +200,7 @@ public boolean equals(Object o) {
         if (o == this) {
             return true;
         } else if (o instanceof Template) {
-            return ((Template)o).template.equals(template);
+            return ((Template) o).template.equals(template);
         } else {
             return false;
         }

File: querydsl-core/src/main/java/com/querydsl/core/types/TemplateExpressionImpl.java
Patch:
@@ -65,7 +65,7 @@ public final boolean equals(Object o) {
        if (o == this) {
            return true;
        } else if (o instanceof TemplateExpression) {
-           TemplateExpression<?> c = (TemplateExpression<?>)o;
+           TemplateExpression<?> c = (TemplateExpression<?>) o;
            return c.getTemplate().equals(template)
                && c.getType().equals(getType())
                && c.getArgs().equals(args);

File: querydsl-core/src/main/java/com/querydsl/core/types/ValidatingVisitor.java
Patch:
@@ -108,7 +108,7 @@ public Set<Expression<?>> visit(SubQueryExpression<?> expr, Set<Expression<?>> k
     public Set<Expression<?>> visit(TemplateExpression<?> expr, Set<Expression<?>> known) {
         for (Object arg : expr.getArgs()) {
             if (arg instanceof Expression<?>) {
-                known = ((Expression<?>)arg).accept(this, known);
+                known = ((Expression<?>) arg).accept(this, known);
             }
         }
         return known;
@@ -117,7 +117,7 @@ public Set<Expression<?>> visit(TemplateExpression<?> expr, Set<Expression<?>> k
     private Set<Expression<?>> visitJoins(Iterable<JoinExpression> joins, Set<Expression<?>> known) {
         for (JoinExpression j : joins) {
             final Expression<?> expr = j.getTarget();
-            if (expr instanceof Path && ((Path)expr).getMetadata().isRoot()) {
+            if (expr instanceof Path && ((Path) expr).getMetadata().isRoot()) {
                 known = add(known, expr);
             } else {
                 known = expr.accept(this, known);

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/ArrayPath.java
Patch:
@@ -50,9 +50,9 @@ protected ArrayPath(Class<? super A> type, Path<?> parent, String property) {
 
     @SuppressWarnings("unchecked")
     protected ArrayPath(Class<? super A> type, PathMetadata metadata) {
-        super(ExpressionUtils.path((Class)type, metadata));
-        this.pathMixin = (PathImpl<A>)mixin;
-        this.componentType = Primitives.wrap((Class<E>)type.getComponentType());
+        super(ExpressionUtils.path((Class) type, metadata));
+        this.pathMixin = (PathImpl<A>) mixin;
+        this.componentType = Primitives.wrap((Class<E>) type.getComponentType());
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/BeanPath.java
Patch:
@@ -54,7 +54,7 @@ public BeanPath(Class<? extends T> type, PathMetadata metadata) {
 
     public BeanPath(Class<? extends T> type, PathMetadata metadata, @Nullable PathInits inits) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
         this.inits = inits;
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/BooleanOperation.java
Patch:
@@ -36,7 +36,7 @@ protected BooleanOperation(Operator op, Expression<?>... args) {
 
     protected BooleanOperation(Operator op, ImmutableList<Expression<?>> args) {
         super(ExpressionUtils.predicate(op, args));
-        opMixin = (PredicateOperation)mixin;
+        opMixin = (PredicateOperation) mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/BooleanPath.java
Patch:
@@ -36,7 +36,7 @@ protected BooleanPath(Path<?> parent, String property) {
 
     protected BooleanPath(PathMetadata metadata) {
         super(ExpressionUtils.path(Boolean.class, metadata));
-        this.pathMixin = (PathImpl<Boolean>)mixin;
+        this.pathMixin = (PathImpl<Boolean>) mixin;
     }
 
     protected BooleanPath(String var) {

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/BooleanTemplate.java
Patch:
@@ -32,7 +32,7 @@ public class BooleanTemplate extends BooleanExpression implements TemplateExpres
 
     protected BooleanTemplate(Template template, ImmutableList<?> args) {
         super(ExpressionUtils.predicateTemplate(template, args));
-        this.templateMixin = (PredicateTemplate)mixin;
+        this.templateMixin = (PredicateTemplate) mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/CaseBuilder.java
Patch:
@@ -90,13 +90,13 @@ public Q otherwise(A constant) {
             if (constant != null) {
                 return otherwise(ConstantImpl.create(constant));
             } else {
-                return otherwise((Q)NullExpression.DEFAULT);
+                return otherwise((Q) NullExpression.DEFAULT);
             }
         }
 
         public Q otherwise(Expression<A> expr) {
             if (expr == null) {
-                expr = (Expression)NullExpression.DEFAULT;
+                expr = (Expression) NullExpression.DEFAULT;
             }
             cases.add(0, new CaseElement<A>(null, expr));
             Expression<A> last = null;

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/Coalesce.java
Patch:
@@ -113,11 +113,11 @@ public DateTimeExpression<T> asDateTime() {
     }
 
     public EnumExpression<?> asEnum() {
-        return Expressions.enumOperation((Class)getType(), Ops.COALESCE, getExpressionList());
+        return Expressions.enumOperation((Class) getType(), Ops.COALESCE, getExpressionList());
     }
 
     public NumberExpression<?> asNumber() {
-        return Expressions.numberOperation((Class)getType(), Ops.COALESCE, getExpressionList());
+        return Expressions.numberOperation((Class) getType(), Ops.COALESCE, getExpressionList());
     }
 
     public StringExpression asString() {
@@ -137,7 +137,7 @@ public boolean equals(Object o) {
         if (o == this) {
             return true;
         } else if (o instanceof Coalesce<?>) {
-            Coalesce<?> c = (Coalesce<?>)o;
+            Coalesce<?> c = (Coalesce<?>) o;
             return c.exprs.equals(exprs);
         } else {
             return false;

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/CollectionOperation.java
Patch:
@@ -39,9 +39,9 @@ protected CollectionOperation(Class<? super E> type, Operator op, Expression<?>.
     }
 
     protected CollectionOperation(Class<? super E> type, Operator op, ImmutableList<Expression<?>> args) {
-        super(ExpressionUtils.operation((Class)Collection.class, op, args));
-        this.opMixin = (OperationImpl)super.mixin;
-        this.elementType = (Class<E>)type;
+        super(ExpressionUtils.operation((Class) Collection.class, op, args));
+        this.opMixin = (OperationImpl) super.mixin;
+        this.elementType = (Class<E>) type;
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/CollectionPath.java
Patch:
@@ -55,10 +55,10 @@ protected CollectionPath(Class<? super E> type, Class<Q> queryType, PathMetadata
 
     @SuppressWarnings("unchecked")
     protected CollectionPath(Class<? super E> type, Class<Q> queryType, PathMetadata metadata, PathInits inits) {
-        super(new ParameterizedPathImpl<Collection<E>>((Class)Collection.class, metadata, type), inits);
-        this.elementType = (Class<E>)type;
+        super(new ParameterizedPathImpl<Collection<E>>((Class) Collection.class, metadata, type), inits);
+        this.elementType = (Class<E>) type;
         this.queryType = queryType;
-        this.pathMixin = (PathImpl<Collection<E>>)mixin;
+        this.pathMixin = (PathImpl<Collection<E>>) mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/ComparableOperation.java
Patch:
@@ -38,7 +38,7 @@ protected ComparableOperation(Class<? extends T> type, Operator op, Expression<?
 
     protected ComparableOperation(Class<? extends T> type, Operator op, ImmutableList<Expression<?>> args) {
         super(ExpressionUtils.operation(type, op, args));
-        this.opMixin = (OperationImpl<T>)mixin;
+        this.opMixin = (OperationImpl<T>) mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/ComparablePath.java
Patch:
@@ -38,7 +38,7 @@ protected ComparablePath(Class<? extends T> type, Path<?> parent, String propert
 
     protected ComparablePath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     protected ComparablePath(Class<? extends T> type, String var) {

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/ComparableTemplate.java
Patch:
@@ -33,7 +33,7 @@ public class ComparableTemplate<T extends Comparable<?>> extends ComparableExpre
 
     protected ComparableTemplate(Class<? extends T> type, Template template, ImmutableList<?> args) {
         super(ExpressionUtils.template(type, template, args));
-        templateMixin = (TemplateExpressionImpl<T>)mixin;
+        templateMixin = (TemplateExpressionImpl<T>) mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/Constants.java
Patch:
@@ -37,6 +37,6 @@ public static boolean isTyped(Class<?> cl) {
         return typedClasses.contains(cl);
     }
 
-    private Constants() {}
+    private Constants() { }
 
 }

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/DateOperation.java
Patch:
@@ -38,7 +38,7 @@ protected DateOperation(Class<? extends T> type, Operator op, Expression<?>... a
 
     protected DateOperation(Class<? extends T> type, Operator op, ImmutableList<Expression<?>> args) {
         super(ExpressionUtils.operation(type, op, args));
-        this.opMixin = (OperationImpl<T>)mixin;
+        this.opMixin = (OperationImpl<T>) mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/DatePath.java
Patch:
@@ -37,7 +37,7 @@ protected DatePath(Class<? extends T> type, Path<?> parent, String property) {
 
     protected DatePath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     protected DatePath(Class<? extends T> type, String var) {

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/DateTemplate.java
Patch:
@@ -33,7 +33,7 @@ public class DateTemplate<T extends Comparable<?>> extends DateExpression<T> imp
 
     protected DateTemplate(Class<? extends T> type, Template template, ImmutableList<?> args) {
         super(ExpressionUtils.template(type, template, args));
-        templateMixin = (TemplateExpressionImpl<T>)mixin;
+        templateMixin = (TemplateExpressionImpl<T>) mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/DateTimeOperation.java
Patch:
@@ -37,7 +37,7 @@ protected DateTimeOperation(Class<? extends T> type, Operator op, Expression<?>.
 
     protected DateTimeOperation(Class<? extends T> type, Operator op, ImmutableList<Expression<?>> args) {
         super(ExpressionUtils.operation(type, op, args));
-        this.opMixin = (OperationImpl<T>)mixin;
+        this.opMixin = (OperationImpl<T>) mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/DateTimePath.java
Patch:
@@ -36,7 +36,7 @@ protected DateTimePath(Class<? extends T> type, Path<?> parent, String property)
 
     protected DateTimePath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     protected DateTimePath(Class<? extends T> type, String var) {

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/DateTimeTemplate.java
Patch:
@@ -33,7 +33,7 @@ public class DateTimeTemplate<T extends Comparable<?>> extends DateTimeExpressio
 
     protected DateTimeTemplate(Class<? extends T> type, Template template, ImmutableList<?> args) {
         super(ExpressionUtils.template(type, template, args));
-        templateMixin = (TemplateExpressionImpl<T>)mixin;
+        templateMixin = (TemplateExpressionImpl<T>) mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/DslOperation.java
Patch:
@@ -37,7 +37,7 @@ protected DslOperation(Class<? extends T> type, Operator op, Expression<?>... ar
 
     protected DslOperation(Class<? extends T> type, Operator op, ImmutableList<Expression<?>> args) {
         super(ExpressionUtils.operation(type, op, args));
-        this.opMixin = (OperationImpl<T>)mixin;
+        this.opMixin = (OperationImpl<T>) mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/DslPath.java
Patch:
@@ -36,7 +36,7 @@ protected DslPath(Class<? extends T> type, Path<?> parent, String property) {
 
     protected DslPath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     protected DslPath(Class<? extends T> type, String var) {

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/DslTemplate.java
Patch:
@@ -33,7 +33,7 @@ public class DslTemplate<T> extends DslExpression<T> implements TemplateExpressi
 
     protected DslTemplate(Class<? extends T> type, Template template, ImmutableList<?> args) {
         super(ExpressionUtils.template(type, template, args));
-        templateMixin = (TemplateExpressionImpl<T>)mixin;
+        templateMixin = (TemplateExpressionImpl<T>) mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/EnumOperation.java
Patch:
@@ -37,7 +37,7 @@ protected EnumOperation(Class<? extends T> type, Operator op, Expression<?>... a
 
     protected EnumOperation(Class<? extends T> type, Operator op, ImmutableList<Expression<?>> args) {
         super(ExpressionUtils.operation(type, op, args));
-        this.opMixin = (OperationImpl<T>)mixin;
+        this.opMixin = (OperationImpl<T>) mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/EnumPath.java
Patch:
@@ -36,7 +36,7 @@ protected EnumPath(Class<? extends T> type, Path<?> parent, String property) {
 
     protected EnumPath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     protected EnumPath(Class<? extends T> type, String var) {

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/EnumTemplate.java
Patch:
@@ -33,7 +33,7 @@ public class EnumTemplate<T extends Enum<T>> extends EnumExpression<T> implement
 
     protected EnumTemplate(Class<? extends T> type, Template template, ImmutableList<?> args) {
         super(ExpressionUtils.template(type, template, args));
-        templateMixin = (TemplateExpressionImpl<T>)mixin;
+        templateMixin = (TemplateExpressionImpl<T>) mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/Expressions.java
Patch:
@@ -43,7 +43,7 @@ public final class Expressions {
 
     public static final BooleanExpression FALSE = booleanTemplate("false");
 
-    private Expressions() {}
+    private Expressions() { }
 
     /**
      * Create a {@code source as alias} expression
@@ -147,7 +147,7 @@ public static <T> Expression<T> constant(T value) {
     @SuppressWarnings({ "unchecked", "rawtypes" })
     public static <D> SimpleExpression<D> constantAs(D source, Path<D> alias) {
         if (source == null) {
-            return as((Expression)nullExpression(), alias);
+            return as((Expression) nullExpression(), alias);
         } else {
             return as(ConstantImpl.create(source), alias);
         }
@@ -1255,7 +1255,7 @@ public static SimpleExpression<Tuple> list(SimpleExpression<?>... exprs) {
      * @return list expression
      */
     public static <T> SimpleExpression<T> list(Class<T> clazz, SimpleExpression<?>... exprs) {
-        SimpleExpression<T> rv = (SimpleExpression<T>)exprs[0];
+        SimpleExpression<T> rv = (SimpleExpression<T>) exprs[0];
         for (int i = 1; i < exprs.length; i++) {
             rv = new SimpleOperation<T>(clazz, Ops.LIST, rv, exprs[i]);
         }

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/ListPath.java
Patch:
@@ -59,10 +59,10 @@ protected ListPath(Class<? super E> elementType, Class<Q> queryType, PathMetadat
 
     @SuppressWarnings("unchecked")
     protected ListPath(Class<? super E> elementType, Class<Q> queryType, PathMetadata metadata, PathInits inits) {
-        super(new ParameterizedPathImpl<List<E>>((Class)List.class, metadata, elementType), inits);
-        this.elementType = (Class<E>)elementType;
+        super(new ParameterizedPathImpl<List<E>>((Class) List.class, metadata, elementType), inits);
+        this.elementType = (Class<E>) elementType;
         this.queryType = queryType;
-        this.pathMixin = (PathImpl<List<E>>)mixin;
+        this.pathMixin = (PathImpl<List<E>>) mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/MapExpressionBase.java
Patch:
@@ -64,7 +64,7 @@ public final BooleanExpression contains(K key, V value) {
      */
     @SuppressWarnings("unchecked")
     public final BooleanExpression contains(Expression<K> key, Expression<V> value) {
-        return get(key).eq((Expression)value);
+        return get(key).eq((Expression) value);
     }
 
     /**

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/MapPath.java
Patch:
@@ -55,11 +55,11 @@ protected MapPath(Class<? super K> keyType, Class<? super V> valueType, Class<E>
 
     @SuppressWarnings("unchecked")
     protected MapPath(Class<? super K> keyType, Class<? super V> valueType, Class<E> queryType, PathMetadata metadata) {
-        super(new ParameterizedPathImpl<Map<K,V>>((Class)Map.class, metadata, keyType, valueType));
+        super(new ParameterizedPathImpl<Map<K,V>>((Class) Map.class, metadata, keyType, valueType));
         this.keyType = (Class<K>) keyType;
         this.valueType = (Class<V>) valueType;
         this.queryType = queryType;
-        this.pathMixin = (PathImpl<Map<K,V>>)mixin;
+        this.pathMixin = (PathImpl<Map<K,V>>) mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/MathExpressions.java
Patch:
@@ -304,5 +304,5 @@ public static <A extends Number & Comparable<?>> NumberExpression<Double> tanh(E
         return Expressions.numberOperation(Double.class, Ops.MathOps.TANH, num);
     }
 
-    private MathExpressions() {}
+    private MathExpressions() { }
 }

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/NumberOperation.java
Patch:
@@ -38,7 +38,7 @@ protected NumberOperation(Class<? extends T> type, Operator op, Expression<?>...
 
     protected NumberOperation(Class<? extends T> type, Operator op, ImmutableList<Expression<?>> args) {
         super(ExpressionUtils.operation(type, op, args));
-        this.opMixin = (OperationImpl<T>)mixin;
+        this.opMixin = (OperationImpl<T>) mixin;
     }
 
     @SuppressWarnings("unchecked")

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/NumberPath.java
Patch:
@@ -36,7 +36,7 @@ protected NumberPath(Class<? extends T> type, Path<?> parent, String property) {
 
     protected NumberPath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     protected NumberPath(Class<? extends T> type, String var) {

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/NumberTemplate.java
Patch:
@@ -33,7 +33,7 @@ public class NumberTemplate<T extends Number & Comparable<?>> extends NumberExpr
 
     protected NumberTemplate(Class<? extends T> type, Template template, ImmutableList<?> args) {
         super(ExpressionUtils.template(type, template, args));
-        templateMixin = (TemplateExpressionImpl<T>)mixin;
+        templateMixin = (TemplateExpressionImpl<T>) mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/Param.java
Patch:
@@ -32,12 +32,12 @@ public class Param<T> extends SimpleExpression<T> implements ParamExpression<T>
 
     public Param(Class<? extends T> type, String name) {
         super(new ParamExpressionImpl<T>(type, name));
-        this.paramMixin = (ParamExpression<T>)mixin;
+        this.paramMixin = (ParamExpression<T>) mixin;
     }
 
     public Param(Class<? extends T> type) {
         super(new ParamExpressionImpl<T>(type));
-        this.paramMixin = (ParamExpression<T>)mixin;
+        this.paramMixin = (ParamExpression<T>) mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/PathInits.java
Patch:
@@ -59,7 +59,7 @@ public PathInits(String... initStrs) {
                 List<String> inits = Collections.emptyList();
                 if (initStr.contains(".")) {
                     key = initStr.substring(0, initStr.indexOf('.'));
-                    inits = ImmutableList.of(initStr.substring(key.length()+1));
+                    inits = ImmutableList.of(initStr.substring(key.length() + 1));
                 }
                 Collection<String> values = properties.get(key);
                 if (values == null) {

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/SetPath.java
Patch:
@@ -55,10 +55,10 @@ protected SetPath(Class<? super E> type, Class<Q> queryType, PathMetadata metada
 
     @SuppressWarnings("unchecked")
     protected SetPath(Class<? super E> type, Class<Q> queryType, PathMetadata metadata, PathInits inits) {
-        super(new ParameterizedPathImpl<Set<E>>((Class)Set.class, metadata, type), inits);
-        this.elementType = (Class<E>)type;
+        super(new ParameterizedPathImpl<Set<E>>((Class) Set.class, metadata, type), inits);
+        this.elementType = (Class<E>) type;
         this.queryType = queryType;
-        this.pathMixin = (PathImpl<Set<E>>)mixin;
+        this.pathMixin = (PathImpl<Set<E>>) mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/SimpleOperation.java
Patch:
@@ -37,7 +37,7 @@ protected SimpleOperation(Class<? extends T> type, Operator op, Expression<?>...
 
     protected SimpleOperation(Class<? extends T> type, Operator op, ImmutableList<Expression<?>> args) {
         super(ExpressionUtils.operation(type, op, args));
-        this.opMixin = (OperationImpl<T>)mixin;
+        this.opMixin = (OperationImpl<T>) mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/SimplePath.java
Patch:
@@ -36,7 +36,7 @@ protected SimplePath(Class<? extends T> type, Path<?> parent, String property) {
 
     protected SimplePath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     protected SimplePath(Class<? extends T> type, String var) {

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/SimpleTemplate.java
Patch:
@@ -33,7 +33,7 @@ public class SimpleTemplate<T> extends SimpleExpression<T> implements TemplateEx
 
     protected SimpleTemplate(Class<? extends T> type, Template template, ImmutableList<?> args) {
         super(ExpressionUtils.template(type, template, args));
-        templateMixin = (TemplateExpressionImpl<T>)mixin;
+        templateMixin = (TemplateExpressionImpl<T>) mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/StringExpressions.java
Patch:
@@ -157,6 +157,6 @@ public static StringExpression rpad(Expression<String> in, int length, char c) {
         return Expressions.stringOperation(Ops.StringOps.RPAD2, in, ConstantImpl.create(length), ConstantImpl.create(c));
     }
 
-    private StringExpressions() {}
+    private StringExpressions() { }
 
 }

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/StringOperation.java
Patch:
@@ -36,7 +36,7 @@ protected StringOperation(Operator op, Expression<?>... args) {
 
     protected StringOperation(Operator op, ImmutableList<Expression<?>> args) {
         super(ExpressionUtils.operation(String.class, op, args));
-        this.opMixin = (OperationImpl<String>)mixin;
+        this.opMixin = (OperationImpl<String>) mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/StringPath.java
Patch:
@@ -35,7 +35,7 @@ protected StringPath(Path<?> parent, String property) {
 
     protected StringPath(PathMetadata metadata) {
         super(ExpressionUtils.path(String.class, metadata));
-        this.pathMixin = (PathImpl<String>)mixin;
+        this.pathMixin = (PathImpl<String>) mixin;
     }
 
     protected StringPath(String var) {

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/StringTemplate.java
Patch:
@@ -32,7 +32,7 @@ public class StringTemplate extends StringExpression implements TemplateExpressi
 
     protected StringTemplate(Template template, ImmutableList<?> args) {
         super(ExpressionUtils.template(String.class, template, args));
-        this.templateMixin = (TemplateExpressionImpl<String>)mixin;
+        this.templateMixin = (TemplateExpressionImpl<String>) mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/TimeOperation.java
Patch:
@@ -37,7 +37,7 @@ protected TimeOperation(Class<? extends T> type, Operator op, Expression<?>... a
 
     protected TimeOperation(Class<? extends T> type, Operator op, ImmutableList<Expression<?>> args) {
         super(ExpressionUtils.operation(type, op, args));
-        this.opMixin = (OperationImpl<T>)mixin;
+        this.opMixin = (OperationImpl<T>) mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/TimePath.java
Patch:
@@ -36,7 +36,7 @@ protected TimePath(Class<? extends T> type, Path<?> parent, String property) {
 
     protected TimePath(Class<? extends T> type, PathMetadata metadata) {
         super(ExpressionUtils.path(type, metadata));
-        this.pathMixin = (PathImpl<T>)mixin;
+        this.pathMixin = (PathImpl<T>) mixin;
     }
 
     protected TimePath(Class<? extends T> type, String var) {

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/TimeTemplate.java
Patch:
@@ -33,7 +33,7 @@ public class TimeTemplate<T extends Comparable<?>> extends TimeExpression<T> imp
 
     protected TimeTemplate(Class<? extends T> type, Template template, ImmutableList<?> args) {
         super(ExpressionUtils.template(type, template, args));
-        templateMixin = (TemplateExpressionImpl<T>)mixin;
+        templateMixin = (TemplateExpressionImpl<T>) mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/Wildcard.java
Patch:
@@ -45,6 +45,6 @@ public final class Wildcard {
      */
     public static final NumberExpression<Integer> countAsInt = Expressions.numberOperation(Integer.class, Ops.AggOps.COUNT_ALL_AGG);
 
-    private Wildcard() {}
+    private Wildcard() { }
 
 }

File: querydsl-core/src/main/java/com/querydsl/core/util/ArrayUtils.java
Patch:
@@ -58,6 +58,6 @@ public static boolean isEmpty(Object[] array) {
         return array == null || array.length == 0;
     }
 
-    private ArrayUtils() {}
+    private ArrayUtils() { }
 
 }

File: querydsl-core/src/main/java/com/querydsl/core/util/BeanUtils.java
Patch:
@@ -55,5 +55,5 @@ public static Method getAccessor(String prefix, String property, Class<?> bean)
         }
     }
 
-    private BeanUtils() {}
+    private BeanUtils() { }
 }

File: querydsl-core/src/main/java/com/querydsl/core/util/CollectionUtils.java
Patch:
@@ -132,6 +132,6 @@ public static <K,V> Map<K,V> copyOf(Map<K,V> map) {
         }
     }
 
-    private CollectionUtils() {}
+    private CollectionUtils() { }
 
 }

File: querydsl-core/src/main/java/com/querydsl/core/util/ConstructorUtils.java
Patch:
@@ -37,7 +37,7 @@
  */
 public final class ConstructorUtils {
 
-    private ConstructorUtils() {}
+    private ConstructorUtils() { }
 
     /**
      * The parameter list for the default constructor;

File: querydsl-core/src/main/java/com/querydsl/core/util/FileUtils.java
Patch:
@@ -37,6 +37,6 @@ public static void delete(File file) throws IOException {
         }
     }
 
-    private FileUtils() {}
+    private FileUtils() { }
 
 }

File: querydsl-core/src/main/java/com/querydsl/core/util/JavaSyntaxUtils.java
Patch:
@@ -25,7 +25,7 @@
  */
 public final class JavaSyntaxUtils {
 
-    private JavaSyntaxUtils() {}
+    private JavaSyntaxUtils() { }
 
     private static final Set<String> reserved = ImmutableSet.of(
     "abstract",

File: querydsl-core/src/main/java/com/querydsl/core/util/MathUtils.java
Patch:
@@ -24,18 +24,18 @@
  */
 public final class MathUtils {
 
-    private MathUtils() {}
+    private MathUtils() { }
 
     @SuppressWarnings("unchecked")
     public static <D extends Number> D sum(D num1, Number num2) {
         BigDecimal res = new BigDecimal(num1.toString()).add(new BigDecimal(num2.toString()));
-        return MathUtils.cast(res, (Class<D>)num1.getClass());
+        return MathUtils.cast(res, (Class<D>) num1.getClass());
     }
 
     @SuppressWarnings("unchecked")
     public static <D extends Number> D difference(D num1, Number num2) {
         BigDecimal res = new BigDecimal(num1.toString()).subtract(new BigDecimal(num2.toString()));
-        return MathUtils.cast(res, (Class<D>)num1.getClass());
+        return MathUtils.cast(res, (Class<D>) num1.getClass());
     }
 
     public static <D extends Number> D cast(Number num, Class<D> type) {

File: querydsl-core/src/main/java/com/querydsl/core/util/ReflectionUtils.java
Patch:
@@ -29,7 +29,7 @@ public final class ReflectionUtils {
 
     private static final AnnotatedElement EMPTY = new Annotations();
 
-    private ReflectionUtils() {}
+    private ReflectionUtils() { }
 
     public static AnnotatedElement getAnnotatedElement(Class<?> beanClass, String propertyName, Class<?> propertyClass) {
         Field field = getFieldOrNull(beanClass, propertyName);
@@ -124,11 +124,11 @@ private static Class<?> asClass(Type type) {
                 return Object.class;
             }
         } else if (type instanceof TypeVariable) {
-            return asClass(((TypeVariable)type).getBounds()[0]);
+            return asClass(((TypeVariable) type).getBounds()[0]);
         } else if (type instanceof ParameterizedType) {
             return (Class<?>) ((ParameterizedType) type).getRawType();
         } else if (type instanceof GenericArrayType) {
-            Type component = ((GenericArrayType)type).getGenericComponentType();
+            Type component = ((GenericArrayType) type).getGenericComponentType();
             return Array.newInstance(asClass(component), 0).getClass();
         } else if (type instanceof Class) {
             return (Class<?>) type;

File: querydsl-core/src/main/java/com/querydsl/core/util/ResultSetAdapter.java
Patch:
@@ -326,7 +326,7 @@ public Object getObject(int columnIndex) throws SQLException {
     @Override
     public <T> T getObject(int columnIndex, Class<T> type) throws SQLException {
         // this getObject(int, Class) is available in JDK 7
-        return (T)rs.getObject(columnIndex);
+        return (T) rs.getObject(columnIndex);
     }
 
     @Override
@@ -343,7 +343,7 @@ public Object getObject(String columnLabel) throws SQLException {
     @Override
     public <T> T getObject(String columnLabel, Class<T> type) throws SQLException {
         // this getObject(String, Class) is available in JDK 7
-        return (T)rs.getObject(columnLabel);
+        return (T) rs.getObject(columnLabel);
     }
 
     @Override

File: querydsl-core/src/test/java/com/querydsl/core/BooleanBuilderTest.java
Patch:
@@ -71,7 +71,7 @@ public void OrAllOf2() {
         assertEquals(first, builder.getValue());
     }
 
-    @Test(expected=QueryException.class)
+    @Test(expected = QueryException.class)
     @Ignore
     public void WrappedBooleanBuilder() {
         new BooleanBuilder(new BooleanBuilder());

File: querydsl-core/src/test/java/com/querydsl/core/CoverageTest.java
Patch:
@@ -83,11 +83,11 @@ public void test() throws IllegalArgumentException, IllegalAccessException {
 
         for (Expression<?> e : exprs) {
             if (e instanceof Operation) {
-                Operation<?> op = (Operation<?>)e;
+                Operation<?> op = (Operation<?>) e;
                 if (op.getArg(0) instanceof Operation) {
-                    usedOperators.add(((Operation<?>)op.getArg(0)).getOperator());
+                    usedOperators.add(((Operation<?>) op.getArg(0)).getOperator());
                 } else if (op.getArgs().size() > 1 && op.getArg(1) instanceof Operation) {
-                    usedOperators.add(((Operation<?>)op.getArg(1)).getOperator());
+                    usedOperators.add(((Operation<?>) op.getArg(1)).getOperator());
                 }
                 usedOperators.add(op.getOperator());
             }

File: querydsl-core/src/test/java/com/querydsl/core/DateConstant.java
Patch:
@@ -25,7 +25,7 @@
  * @author tiwe
  *
  */
-public final class DateConstant<D extends java.util.Date> extends DateExpression<D> implements Constant<D>{
+public final class DateConstant<D extends java.util.Date> extends DateExpression<D> implements Constant<D> {
 
     private static final long serialVersionUID = -5745611667058255826L;
 

File: querydsl-core/src/test/java/com/querydsl/core/DateTimeConstant.java
Patch:
@@ -23,7 +23,7 @@
  * @author tiwe
  *
  */
-public final class DateTimeConstant<D extends java.util.Date> extends DateTimeExpression<D> implements Constant<D>{
+public final class DateTimeConstant<D extends java.util.Date> extends DateTimeExpression<D> implements Constant<D> {
 
     private static final long serialVersionUID = 4578416585568476532L;
 

File: querydsl-core/src/test/java/com/querydsl/core/DefaultQueryMetadataTest.java
Patch:
@@ -58,7 +58,7 @@ public void AddHaving_With_BooleanBuilder() {
     }
 
 
-    @Test(expected=IllegalArgumentException.class)
+    @Test(expected = IllegalArgumentException.class)
     public void Validation() {
         metadata.addWhere(str.isNull());
     }

File: querydsl-core/src/test/java/com/querydsl/core/QueryModifiersTest.java
Patch:
@@ -65,12 +65,12 @@ public void HashCode() {
         assertEquals(modifiers3.hashCode(), QueryModifiers.offset(1L).hashCode());
     }
 
-    @Test(expected=IllegalArgumentException.class)
+    @Test(expected = IllegalArgumentException.class)
     public void illegalLimit() {
         QueryModifiers.limit(-1);
     }
 
-    @Test(expected=IllegalArgumentException.class)
+    @Test(expected = IllegalArgumentException.class)
     public void illegalOffset() {
         QueryModifiers.offset(-1);
     }

File: querydsl-core/src/test/java/com/querydsl/core/SimpleConstant.java
Patch:
@@ -40,7 +40,7 @@ public final class SimpleConstant<D> extends SimpleExpression<D> implements Cons
     @SuppressWarnings("unchecked")
     public static <T> SimpleExpression<T> create(T val) {
         if (val instanceof Boolean) {
-            return (SimpleExpression<T>)BooleanConstant.create((Boolean)val);
+            return (SimpleExpression<T>) BooleanConstant.create((Boolean) val);
         } else {
             return new SimpleConstant<T>(val);
         }

File: querydsl-core/src/test/java/com/querydsl/core/StringConstant.java
Patch:
@@ -32,7 +32,7 @@
  * @author tiwe
  *
  */
-public final class StringConstant extends StringExpression implements Constant<String>{
+public final class StringConstant extends StringExpression implements Constant<String> {
 
     private static final long serialVersionUID = 5182804405789674556L;
 
@@ -61,7 +61,7 @@ public <R,C> R accept(Visitor<R,C> v, C context) {
     @Override
     public StringExpression append(Expression<String> s) {
         if (s instanceof Constant<?>) {
-            return append(((Constant<String>)s).getConstant());
+            return append(((Constant<String>) s).getConstant());
         } else {
             return super.append(s);
         }
@@ -136,7 +136,7 @@ public BooleanExpression ne(String s) {
     @Override
     public StringExpression prepend(Expression<String> s) {
         if (s instanceof Constant<?>) {
-            return prepend(((Constant<String>)s).getConstant());
+            return prepend(((Constant<String>) s).getConstant());
         } else {
             return super.prepend(s);
         }

File: querydsl-core/src/test/java/com/querydsl/core/TimeConstant.java
Patch:
@@ -25,7 +25,7 @@
  * @author tiwe
  *
  */
-public final class TimeConstant<D extends java.util.Date> extends TimeExpression<D> implements Constant<D>{
+public final class TimeConstant<D extends java.util.Date> extends TimeExpression<D> implements Constant<D> {
 
     private static final long serialVersionUID = -7835941761930555480L;
 

File: querydsl-core/src/test/java/com/querydsl/core/alias/ComparableEntity.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.core.alias;
 
-public class ComparableEntity implements Comparable<ComparableEntity>{
+public class ComparableEntity implements Comparable<ComparableEntity> {
 
     @Override
     public int compareTo(ComparableEntity o) {

File: querydsl-core/src/test/java/com/querydsl/core/alias/ComparablePropertyTest.java
Patch:
@@ -31,7 +31,7 @@ public void setProperty(ComparableType property) {
 
     }
 
-    public static class ComparableType implements Comparable<ComparableType>{
+    public static class ComparableType implements Comparable<ComparableType> {
 
         @Override
         public int compareTo(ComparableType o) {

File: querydsl-core/src/test/java/com/querydsl/core/domain/AbstractEntity.java
Patch:
@@ -16,6 +16,6 @@
 import com.querydsl.core.annotations.QueryEntity;
 
 @QueryEntity
-public class AbstractEntity<T> extends GenericEntity<Integer, T>{
+public class AbstractEntity<T> extends GenericEntity<Integer, T> {
 
 }

File: querydsl-core/src/test/java/com/querydsl/core/domain/Cat.java
Patch:
@@ -30,7 +30,7 @@ public class Cat extends Animal {
 
     private Cat mate;
 
-    public Cat() {}
+    public Cat() { }
 
     public Cat(String name, int id) {
         this.setId(id);

File: querydsl-core/src/test/java/com/querydsl/core/domain/QCommonIdentifiable.java
Patch:
@@ -42,7 +42,7 @@ public class QCommonIdentifiable extends EntityPathBase<CommonIdentifiable<? ext
 
     @SuppressWarnings("unchecked")
     public QCommonIdentifiable(String variable) {
-        super((Class)CommonIdentifiable.class, forVariable(variable));
+        super((Class) CommonIdentifiable.class, forVariable(variable));
     }
 
     public QCommonIdentifiable(BeanPath<? extends CommonIdentifiable<? extends Serializable>> entity) {
@@ -51,7 +51,7 @@ public QCommonIdentifiable(BeanPath<? extends CommonIdentifiable<? extends Seria
 
     @SuppressWarnings("unchecked")
     public QCommonIdentifiable(PathMetadata metadata) {
-        super((Class)CommonIdentifiable.class, metadata);
+        super((Class) CommonIdentifiable.class, metadata);
     }
 
 }

File: querydsl-core/src/test/java/com/querydsl/core/domain/QIdNamePair.java
Patch:
@@ -27,7 +27,7 @@ public class QIdNamePair extends BeanPath<IdNamePair<?>> {
 
     @SuppressWarnings("unchecked")
     public QIdNamePair(String variable) {
-        super((Class)IdNamePair.class, forVariable(variable));
+        super((Class) IdNamePair.class, forVariable(variable));
     }
 
     public QIdNamePair(Path<? extends IdNamePair<?>> entity) {
@@ -36,7 +36,7 @@ public QIdNamePair(Path<? extends IdNamePair<?>> entity) {
 
     @SuppressWarnings("unchecked")
     public QIdNamePair(PathMetadata metadata) {
-        super((Class)IdNamePair.class, metadata);
+        super((Class) IdNamePair.class, metadata);
     }
 
 }

File: querydsl-core/src/test/java/com/querydsl/core/domain/query/QCommonIdentifiable.java
Patch:
@@ -43,7 +43,7 @@ public class QCommonIdentifiable extends EntityPathBase<CommonIdentifiable<? ext
 
     @SuppressWarnings("unchecked")
     public QCommonIdentifiable(String variable) {
-        super((Class)CommonIdentifiable.class, forVariable(variable));
+        super((Class) CommonIdentifiable.class, forVariable(variable));
     }
 
     public QCommonIdentifiable(BeanPath<? extends CommonIdentifiable<? extends Serializable>> entity) {
@@ -52,7 +52,7 @@ public QCommonIdentifiable(BeanPath<? extends CommonIdentifiable<? extends Seria
 
     @SuppressWarnings("unchecked")
     public QCommonIdentifiable(PathMetadata metadata) {
-        super((Class)CommonIdentifiable.class, metadata);
+        super((Class) CommonIdentifiable.class, metadata);
     }
 
 }

File: querydsl-core/src/test/java/com/querydsl/core/domain/query/QIdNamePair.java
Patch:
@@ -28,7 +28,7 @@ public class QIdNamePair extends BeanPath<IdNamePair<?>> {
 
     @SuppressWarnings("unchecked")
     public QIdNamePair(String variable) {
-        super((Class)IdNamePair.class, forVariable(variable));
+        super((Class) IdNamePair.class, forVariable(variable));
     }
 
     public QIdNamePair(Path<? extends IdNamePair<?>> entity) {
@@ -37,7 +37,7 @@ public QIdNamePair(Path<? extends IdNamePair<?>> entity) {
 
     @SuppressWarnings("unchecked")
     public QIdNamePair(PathMetadata metadata) {
-        super((Class)IdNamePair.class, metadata);
+        super((Class) IdNamePair.class, metadata);
     }
 
 }

File: querydsl-core/src/test/java/com/querydsl/core/domain/query2/QCommonIdentifiableType.java
Patch:
@@ -43,7 +43,7 @@ public class QCommonIdentifiableType extends EntityPathBase<CommonIdentifiable<?
 
     @SuppressWarnings("unchecked")
     public QCommonIdentifiableType(String variable) {
-        super((Class)CommonIdentifiable.class, forVariable(variable));
+        super((Class) CommonIdentifiable.class, forVariable(variable));
     }
 
     public QCommonIdentifiableType(BeanPath<? extends CommonIdentifiable<? extends java.io.Serializable>> entity) {
@@ -52,7 +52,7 @@ public QCommonIdentifiableType(BeanPath<? extends CommonIdentifiable<? extends j
 
     @SuppressWarnings("unchecked")
     public QCommonIdentifiableType(PathMetadata metadata) {
-        super((Class)CommonIdentifiable.class, metadata);
+        super((Class) CommonIdentifiable.class, metadata);
     }
 
 }

File: querydsl-core/src/test/java/com/querydsl/core/domain/query2/QIdNamePairType.java
Patch:
@@ -28,7 +28,7 @@ public class QIdNamePairType extends BeanPath<IdNamePair<?>> {
 
     @SuppressWarnings("unchecked")
     public QIdNamePairType(String variable) {
-        super((Class)IdNamePair.class, forVariable(variable));
+        super((Class) IdNamePair.class, forVariable(variable));
     }
 
     public QIdNamePairType(Path<? extends IdNamePair<?>> entity) {
@@ -37,7 +37,7 @@ public QIdNamePairType(Path<? extends IdNamePair<?>> entity) {
 
     @SuppressWarnings("unchecked")
     public QIdNamePairType(PathMetadata metadata) {
-        super((Class)IdNamePair.class, metadata);
+        super((Class) IdNamePair.class, metadata);
     }
 
 }

File: querydsl-core/src/test/java/com/querydsl/core/domain/query3/QTCommonIdentifiable.java
Patch:
@@ -43,7 +43,7 @@ public class QTCommonIdentifiable extends EntityPathBase<CommonIdentifiable<? ex
 
     @SuppressWarnings("unchecked")
     public QTCommonIdentifiable(String variable) {
-        super((Class)CommonIdentifiable.class, forVariable(variable));
+        super((Class) CommonIdentifiable.class, forVariable(variable));
     }
 
     public QTCommonIdentifiable(BeanPath<? extends CommonIdentifiable<? extends java.io.Serializable>> entity) {
@@ -52,7 +52,7 @@ public QTCommonIdentifiable(BeanPath<? extends CommonIdentifiable<? extends java
 
     @SuppressWarnings("unchecked")
     public QTCommonIdentifiable(PathMetadata metadata) {
-        super((Class)CommonIdentifiable.class, metadata);
+        super((Class) CommonIdentifiable.class, metadata);
     }
 
 }

File: querydsl-core/src/test/java/com/querydsl/core/domain/query3/QTIdNamePair.java
Patch:
@@ -28,7 +28,7 @@ public class QTIdNamePair extends BeanPath<IdNamePair<?>> {
 
     @SuppressWarnings("unchecked")
     public QTIdNamePair(String variable) {
-        super((Class)IdNamePair.class, forVariable(variable));
+        super((Class) IdNamePair.class, forVariable(variable));
     }
 
     public QTIdNamePair(Path<? extends IdNamePair<?>> entity) {
@@ -37,7 +37,7 @@ public QTIdNamePair(Path<? extends IdNamePair<?>> entity) {
 
     @SuppressWarnings("unchecked")
     public QTIdNamePair(PathMetadata metadata) {
-        super((Class)IdNamePair.class, metadata);
+        super((Class) IdNamePair.class, metadata);
     }
 
 }

File: querydsl-core/src/test/java/com/querydsl/core/group/Comment.java
Patch:
@@ -19,7 +19,7 @@ public class Comment {
 
     private String text;
 
-    public Comment() {}
+    public Comment() { }
 
     public Comment(Integer id, String text) {
         this.id = id;

File: querydsl-core/src/test/java/com/querydsl/core/group/GroupByIterateTest.java
Patch:
@@ -68,7 +68,7 @@ public void Group_By_Null() {
 
     }
 
-    @Test(expected=NoSuchElementException.class)
+    @Test(expected = NoSuchElementException.class)
     public void NoSuchElementException() {
         CloseableIterator<Group> resultsIt = BASIC_RESULTS.transform(
             groupBy(postId).iterate(postName, set(commentId), list(commentText)));
@@ -80,7 +80,7 @@ public void NoSuchElementException() {
         group.getSet(qComment);
     }
 
-    @Test(expected=ClassCastException.class)
+    @Test(expected = ClassCastException.class)
     public void ClassCastException() {
         CloseableIterator<Group> resultsIt = BASIC_RESULTS.transform(
             groupBy(postId).iterate(postName, set(commentId), list(commentText)));

File: querydsl-core/src/test/java/com/querydsl/core/group/GroupByListTest.java
Patch:
@@ -65,7 +65,7 @@ public void Group_By_Null() {
 
     }
 
-    @Test(expected=NoSuchElementException.class)
+    @Test(expected = NoSuchElementException.class)
     public void NoSuchElementException() {
         List<Group> results = BASIC_RESULTS.transform(
             groupBy(postId).list(postName, set(commentId), list(commentText)));
@@ -76,7 +76,7 @@ public void NoSuchElementException() {
         group.getSet(qComment);
     }
 
-    @Test(expected=ClassCastException.class)
+    @Test(expected = ClassCastException.class)
     public void ClassCastException() {
         List<Group> results = BASIC_RESULTS.transform(
             groupBy(postId).list(postName, set(commentId), list(commentText)));

File: querydsl-core/src/test/java/com/querydsl/core/group/GroupByMapTest.java
Patch:
@@ -93,7 +93,7 @@ public void Group_By_Null() {
 
     }
 
-    @Test(expected=NoSuchElementException.class)
+    @Test(expected = NoSuchElementException.class)
     public void NoSuchElementException() {
         Map<Integer, Group> results = BASIC_RESULTS.transform(
             groupBy(postId).as(postName, set(commentId), list(commentText)));
@@ -102,7 +102,7 @@ public void NoSuchElementException() {
         group.getSet(qComment);
     }
 
-    @Test(expected=ClassCastException.class)
+    @Test(expected = ClassCastException.class)
     public void ClassCastException() {
         Map<Integer, Group> results = BASIC_RESULTS.transform(
             groupBy(postId).as(postName, set(commentId), list(commentText)));

File: querydsl-core/src/test/java/com/querydsl/core/serialization/DummySerializer.java
Patch:
@@ -19,7 +19,7 @@
 import com.querydsl.core.types.SubQueryExpression;
 import com.querydsl.core.types.Templates;
 
-class DummySerializer extends SerializerBase<DummySerializer>{
+class DummySerializer extends SerializerBase<DummySerializer> {
 
     public DummySerializer(Templates templates) {
         super(templates);

File: querydsl-core/src/test/java/com/querydsl/core/support/DummyFetchableQuery.java
Patch:
@@ -21,12 +21,12 @@ public DummyFetchableQuery(List<T> results) {
 
     @Override
     public <U> DummyFetchableQuery<U> select(Expression<U> expr) {
-        return (DummyFetchableQuery<U>)this;
+        return (DummyFetchableQuery<U>) this;
     }
 
     @Override
     public DummyFetchableQuery<Tuple> select(Expression<?>... exprs) {
-        return (DummyFetchableQuery<Tuple>)this;
+        return (DummyFetchableQuery<Tuple>) this;
     }
 
     @Override

File: querydsl-core/src/test/java/com/querydsl/core/support/DummyQuery.java
Patch:
@@ -15,7 +15,7 @@
 
 import com.querydsl.core.Query;
 
-public class DummyQuery extends QueryBase<DummyQuery> implements Query<DummyQuery>{
+public class DummyQuery extends QueryBase<DummyQuery> implements Query<DummyQuery> {
 
     public DummyQuery() {
         super(new QueryMixin<DummyQuery>());

File: querydsl-core/src/test/java/com/querydsl/core/support/EnumConversionTest.java
Patch:
@@ -11,7 +11,7 @@
 
 public class EnumConversionTest {
 
-    public enum Color {GREEN, BLUE, RED, YELLOW, BLACK, WHITE}
+    public enum Color { GREEN, BLUE, RED, YELLOW, BLACK, WHITE }
 
     @Test
     public void Name() {

File: querydsl-core/src/test/java/com/querydsl/core/support/NumberConversionsTest.java
Patch:
@@ -15,8 +15,7 @@
 
 public class NumberConversionsTest {
 
-
-    public enum Color {GREEN, BLUE, RED, YELLOW, BLACK, WHITE}
+    public enum Color { GREEN, BLUE, RED, YELLOW, BLACK, WHITE }
 
     @Test
     public void Name() {

File: querydsl-core/src/test/java/com/querydsl/core/support/QueryMixinTest.java
Patch:
@@ -34,7 +34,7 @@ public class QueryMixinTest {
 
     @Test
     public void Where_Null() {
-        mixin.where((Predicate)null);
+        mixin.where((Predicate) null);
     }
 
     @Test

File: querydsl-core/src/test/java/com/querydsl/core/testutil/EmptyStatement.java
Patch:
@@ -19,7 +19,7 @@ public final class EmptyStatement extends Statement {
 
     public static final Statement DEFAULT = new EmptyStatement();
 
-    private EmptyStatement() {}
+    private EmptyStatement() { }
 
     @Override
     public void evaluate() throws Throwable {

File: querydsl-core/src/test/java/com/querydsl/core/testutil/Runner.java
Patch:
@@ -35,6 +35,6 @@ public static void run(String label, Benchmark benchmark) throws Exception {
         System.err.println(label + " " + stopwatch.stop().toString());
     }
 
-    private Runner() {}
+    private Runner() { }
 
 }

File: querydsl-core/src/test/java/com/querydsl/core/types/Concatenation.java
Patch:
@@ -20,7 +20,7 @@
  * @author tiwe
  *
  */
-public class Concatenation extends ExpressionBase<String> implements FactoryExpression<String>{
+public class Concatenation extends ExpressionBase<String> implements FactoryExpression<String> {
 
     private static final long serialVersionUID = -355693583588722395L;
 

File: querydsl-core/src/test/java/com/querydsl/core/types/ConstantImplTest.java
Patch:
@@ -22,11 +22,11 @@ public class ConstantImplTest {
     @Test
     public void Create() {
         assertNotNull(ConstantImpl.create(true));
-        assertNotNull(ConstantImpl.create((byte)1));
+        assertNotNull(ConstantImpl.create((byte) 1));
         assertNotNull(ConstantImpl.create(ConstantImplTest.class));
         assertNotNull(ConstantImpl.create(1));
         assertNotNull(ConstantImpl.create(1L));
-        assertNotNull(ConstantImpl.create((short)1));
+        assertNotNull(ConstantImpl.create((short) 1));
         assertNotNull(ConstantImpl.create("x"));
 //        assertNotNull(ConstantImpl.create("x",true));
     }

File: querydsl-core/src/test/java/com/querydsl/core/types/ExpressionUtilsTest.java
Patch:
@@ -85,17 +85,17 @@ public void RegexToLike() {
         assertEquals("_ + path", like(path.prepend(".")));
     }
 
-    @Test(expected=QueryException.class)
+    @Test(expected = QueryException.class)
     public void RegexToLike_Fail() {
         like(ConstantImpl.create("a*"));
     }
 
-    @Test(expected=QueryException.class)
+    @Test(expected = QueryException.class)
     public void RegexToLike_Fail2() {
         like(ConstantImpl.create("\\d"));
     }
 
-    @Test(expected=QueryException.class)
+    @Test(expected = QueryException.class)
     public void RegexToLike_Fail3() {
         like(ConstantImpl.create("[ab]"));
     }

File: querydsl-core/src/test/java/com/querydsl/core/types/SignatureTest.java
Patch:
@@ -38,7 +38,7 @@ public void setUp() throws ClassNotFoundException {
         for (String folder : Arrays.asList("com/querydsl/core/types/dsl")) {
             for (String file : new File("src/main/java",folder).list()) {
                 if (file.endsWith(".java") && !file.equals("package-info.java")) {
-                    String className = (folder+"."+file.substring(0, file.length()-5)).replace('/', '.');
+                    String className = (folder + "." + file.substring(0, file.length() - 5)).replace('/', '.');
                     classes.add(Class.forName(className));
                 }
             }
@@ -61,15 +61,15 @@ public void ReturnType_extends_SimpleExpression() {
                  && !Coalesce.class.isAssignableFrom(m.getReturnType())
                  && !DslExpression.class.isAssignableFrom(m.getReturnType())
                  && !SimpleExpression.class.isAssignableFrom(m.getReturnType())) {
-                    errors.add(cl.getSimpleName()+"."+m.getName() + " has illegal return type");
+                    errors.add(cl.getSimpleName() + "." + m.getName() + " has illegal return type");
                 }
             }
         }
         for (String error : errors) {
             System.err.println(error);
         }
         if (!errors.isEmpty()) {
-            Assert.fail("Got " + errors.size() +" errors");
+            Assert.fail("Got " + errors.size() + " errors");
         }
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/types/TemplateInfiniteLoop.java
Patch:
@@ -5,7 +5,7 @@
 
 public final class TemplateInfiniteLoop {
 
-    private TemplateInfiniteLoop() {}
+    private TemplateInfiniteLoop() { }
 
     static String[] templates = createTemplates();
 

File: querydsl-core/src/test/java/com/querydsl/core/types/TemplatesTestUtils.java
Patch:
@@ -31,6 +31,6 @@ public static void testPrecedence(Templates templates) {
         }
     }
 
-    private TemplatesTestUtils() {}
+    private TemplatesTestUtils() { }
 
 }

File: querydsl-core/src/test/java/com/querydsl/core/types/ToStringVisitorTest.java
Patch:
@@ -28,7 +28,8 @@ public class ToStringVisitorTest {
         {
             add(PathType.PROPERTY, "{0}_{1}");
             add(PathType.COLLECTION_ANY, "{0}");
-        }};
+        }
+    };
 
     @Test
     public void Operation() {

File: querydsl-core/src/test/java/com/querydsl/core/types/ValidatingVisitorTest.java
Patch:
@@ -67,7 +67,7 @@ public void VisitSubQueryExpressionOfQVoid() {
 
     @Test
     public void VisitTemplateExpressionOfQVoid() {
-        validator.visit((TemplateExpression)Expressions.template(Object.class, "XXX"), known);
+        validator.visit((TemplateExpression) Expressions.template(Object.class, "XXX"), known);
     }
 
 }

File: querydsl-core/src/test/java/com/querydsl/core/types/dsl/ArrayConstructorExpressionTest.java
Patch:
@@ -27,7 +27,7 @@ public void NewInstanceObjectArray() {
         ArrayConstructorExpression<String> constructor = new ArrayConstructorExpression<String>(
                 String[].class,  new StringPath("test"), new StringPath("test2"));
 
-        String[] strings = constructor.newInstance((Object[])new String[]{"1", "2"});
+        String[] strings = constructor.newInstance((Object[]) new String[]{"1", "2"});
         assertEquals("1", strings[0]);
         assertEquals("2", strings[1]);
 

File: querydsl-core/src/test/java/com/querydsl/core/types/dsl/BeanPathTest.java
Patch:
@@ -30,7 +30,7 @@ public static class SubClass extends BeanPathTest {
 
     }
 
-    public static class MyBeanPath extends BeanPath<BeanPathTest>{
+    public static class MyBeanPath extends BeanPath<BeanPathTest> {
 
         private static final long serialVersionUID = 6225684967115368814L;
 

File: querydsl-core/src/test/java/com/querydsl/core/types/dsl/OperationTest.java
Patch:
@@ -28,7 +28,7 @@
 
 public class OperationTest {
 
-    enum ExampleEnum {A,B}
+    enum ExampleEnum { A, B }
 
     @SuppressWarnings("unchecked")
     @Test

File: querydsl-core/src/test/java/com/querydsl/core/types/dsl/PathBuilderTest.java
Patch:
@@ -68,7 +68,7 @@ public void getMap() {
 
     @SuppressWarnings("unchecked")
     private <T> BooleanBuilder getByExample(T entity) {
-        PathBuilder<T> entityPath = new PathBuilder<T>((Class<T>)entity.getClass(), "entity");
+        PathBuilder<T> entityPath = new PathBuilder<T>((Class<T>) entity.getClass(), "entity");
         BooleanBuilder conditions = new BooleanBuilder();
         Map<String, Object> beanMap = new BeanMap(entity);
         for (Map.Entry<String,Object> entry : beanMap.entrySet()) {

File: querydsl-core/src/test/java/com/querydsl/core/types/dsl/PathBuilderValidatorTest.java
Patch:
@@ -16,7 +16,7 @@ public static class Customer {
         Map<String, Integer> map;
     }
 
-    public static class ExtendedCustomer extends Customer {}
+    public static class ExtendedCustomer extends Customer { }
 
     public static class Project {
         public String getName() {

File: querydsl-core/src/test/java/com/querydsl/core/types/dsl/PathTest.java
Patch:
@@ -37,7 +37,7 @@
 
 public class PathTest {
 
-    enum ExampleEnum {A,B}
+    enum ExampleEnum { A, B }
 
     public static class Superclass {
 

File: querydsl-core/src/test/java/com/querydsl/core/types/dsl/SimpleExpressionTest.java
Patch:
@@ -30,7 +30,7 @@
 
 public class SimpleExpressionTest {
 
-    enum ExampleEnum {A,B}
+    enum ExampleEnum { A, B }
 
     @Test
     public void As_usage() {
@@ -96,8 +96,8 @@ public void Various() {
         }
     }
 
-    @Test(expected=IllegalArgumentException.class)
+    @Test(expected = IllegalArgumentException.class)
     public void Eq_Null() {
-        new SimplePath<Object>(Object.class, "path").eq((Object)null);
+        new SimplePath<Object>(Object.class, "path").eq((Object) null);
     }
 }

File: querydsl-core/src/test/java/com/querydsl/core/util/BeanMapTest.java
Patch:
@@ -32,7 +32,7 @@ public void Clear() {
     @Test
     public void Primitives() {
         beanMap.put("id", 5);
-        assertEquals(5, ((Entity)beanMap.getBean()).getId());
+        assertEquals(5, ((Entity) beanMap.getBean()).getId());
     }
 
     @Test

File: querydsl-apt/src/test/java/com/querydsl/apt/inheritance/Inheritance4Test.java
Patch:
@@ -44,7 +44,7 @@ public Long getField() {
     }
 
     @QueryEntity
-    public class EntityWithString extends EntityWithComparable{
+    public class EntityWithString extends EntityWithComparable {
         private String field;
 
         public String getField() {
@@ -54,7 +54,7 @@ public String getField() {
     }
 
     @Test
-    public void test() throws IllegalAccessException, NoSuchFieldException{
+    public void test() throws IllegalAccessException, NoSuchFieldException {
         start(QInheritance4Test_EntityWithComparable.class, QInheritance4Test_EntityWithComparable.entityWithComparable);
         match(SimplePath.class, "field");
         matchType(Comparable.class, "field");

File: querydsl-codegen/src/main/java/com/querydsl/codegen/BeanSerializer.java
Patch:
@@ -32,7 +32,7 @@
  * @author tiwe
  *
  */
-public class BeanSerializer implements Serializer{
+public class BeanSerializer implements Serializer {
 
     private static final Function<Property, Parameter> propertyToParameter = new Function<Property, Parameter>() {
         @Override

File: querydsl-codegen/src/main/java/com/querydsl/codegen/EntitySerializer.java
Patch:
@@ -581,7 +581,7 @@ protected void outro(EntityType model, CodeWriter writer) throws IOException {
 
     @Override
     public void serialize(EntityType model, SerializerConfig config,
-            CodeWriter writer) throws IOException{
+            CodeWriter writer) throws IOException {
         intro(model, config, writer);
 
         // properties

File: querydsl-codegen/src/main/java/com/querydsl/codegen/ProjectionSerializer.java
Patch:
@@ -33,7 +33,7 @@
  * @author tiwe
  *
  */
-public final class ProjectionSerializer implements Serializer{
+public final class ProjectionSerializer implements Serializer {
 
     private final TypeMappings typeMappings;
 
@@ -86,7 +86,7 @@ protected void outro(EntityType model, CodeWriter writer) throws IOException {
 
     @Override
     public void serialize(final EntityType model, SerializerConfig serializerConfig,
-            CodeWriter writer) throws IOException{
+            CodeWriter writer) throws IOException {
         // intro
         intro(model, writer);
 

File: querydsl-codegen/src/main/java/com/querydsl/codegen/SimpleSerializerConfig.java
Patch:
@@ -21,7 +21,7 @@
  * @author tiwe
  *
  */
-public final class SimpleSerializerConfig implements SerializerConfig{
+public final class SimpleSerializerConfig implements SerializerConfig {
 
     public static final SerializerConfig DEFAULT = new SimpleSerializerConfig(false, false, false, true, "");
 

File: querydsl-codegen/src/main/java/com/querydsl/codegen/SupertypeSerializer.java
Patch:
@@ -24,7 +24,7 @@
  * @author tiwe
  *
  */
-public final class SupertypeSerializer extends EntitySerializer{
+public final class SupertypeSerializer extends EntitySerializer {
 
     /**
      * Create a new SupertypeSerializer instance

File: querydsl-codegen/src/test/java/com/querydsl/codegen/CustomTypeTest.java
Patch:
@@ -37,7 +37,7 @@ public class CustomTypeTest {
     private final StringWriter writer = new StringWriter();
 
     @Test
-    public void CustomType() throws IOException{
+    public void CustomType() throws IOException {
         SimpleType type = new SimpleType(TypeCategory.ENTITY, "Entity", "", "Entity",false,false);
         EntityType entityType = new EntityType(type);
         entityType.addProperty(new Property(entityType, "property", new ClassType(Double[].class)));

File: querydsl-codegen/src/test/java/com/querydsl/codegen/Examples.java
Patch:
@@ -16,7 +16,7 @@ public static class Supertype {
     }
 
     @QueryEntity
-    public static class SimpleEntity extends Supertype{
+    public static class SimpleEntity extends Supertype {
 
     }
 
@@ -76,7 +76,7 @@ public static class Reference {
     }
 
     @QueryEntity
-    public static class GenericRelations{
+    public static class GenericRelations {
         public Collection<Collection<Reference>> col1;
         public Collection<List<Reference>> col2;
         public Collection<Collection<? extends Reference>> col3;
@@ -94,7 +94,7 @@ public static class GenericRelations{
     }
 
     @QueryEntity
-    public static class Subtype extends DefaultQueryMetadata{
+    public static class Subtype extends DefaultQueryMetadata {
 
         private static final long serialVersionUID = -218949941713252847L;
 

File: querydsl-codegen/src/test/java/com/querydsl/codegen/GroovyBeanSerializerTest.java
Patch:
@@ -43,7 +43,7 @@ public void setUp() {
     }
 
     @Test
-    public void Properties() throws IOException{
+    public void Properties() throws IOException {
         // property
         type.addProperty(new Property(type, "entityField", type));
         type.addProperty(new Property(type, "collection", new SimpleType(Types.COLLECTION, typeModel)));

File: querydsl-codegen/src/test/java/com/querydsl/codegen/ProjectionSerializerTest.java
Patch:
@@ -29,7 +29,7 @@
 public class ProjectionSerializerTest {
 
     @Test
-    public void Constructors() throws IOException{
+    public void Constructors() throws IOException {
         Type typeModel = new SimpleType(TypeCategory.ENTITY, "com.querydsl.DomainClass", "com.querydsl", "DomainClass", false,false);
         EntityType type = new EntityType(typeModel);
 

File: querydsl-codegen/src/test/java/com/querydsl/codegen/QueryEntityImpl.java
Patch:
@@ -18,7 +18,7 @@
 import com.querydsl.core.annotations.QueryEntity;
 
 @SuppressWarnings("all")
-public class QueryEntityImpl implements QueryEntity{
+public class QueryEntityImpl implements QueryEntity {
 
     @Override
     public Class<? extends Annotation> annotationType() {

File: querydsl-codegen/src/test/java/com/querydsl/codegen/ScalaTypeDump.java
Patch:
@@ -33,7 +33,7 @@ public class ScalaTypeDump {
 
     @Test
     @Ignore
-    public void test() throws IOException{
+    public void test() throws IOException {
         List<Class<?>> classes = new ArrayList<Class<?>>();
         classes.add(SimpleExpression.class);
         classes.add(ComparableExpression.class);

File: querydsl-codegen/src/test/java/com/querydsl/codegen/SerializerTest.java
Patch:
@@ -80,13 +80,13 @@ public void EmbeddableSerializer() throws Exception {
     }
 
     @Test
-    public void SupertypeSerializer() throws IOException{
+    public void SupertypeSerializer() throws IOException {
         new SupertypeSerializer(typeMappings,Collections.<String>emptyList())
             .serialize(type, SimpleSerializerConfig.DEFAULT, new JavaWriter(writer));
     }
 
     @Test
-    public void DTOSerializer() throws IOException{
+    public void DTOSerializer() throws IOException {
         new ProjectionSerializer(typeMappings)
             .serialize(type, SimpleSerializerConfig.DEFAULT, new JavaWriter(writer));
     }

File: querydsl-collections/src/test/java/com/querydsl/collections/CatTest.java
Patch:
@@ -22,7 +22,7 @@
 public class CatTest {
 
     @Test(expected=NoSuchFieldException.class)
-    public void SkippedField() throws SecurityException, NoSuchFieldException{
+    public void SkippedField() throws SecurityException, NoSuchFieldException {
         QCat.class.getField("skippedField");
     }
 

File: querydsl-collections/src/test/java/com/querydsl/collections/FirstResultContractTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.junit.Test;
 
-public class FirstResultContractTest extends AbstractQueryTest{
+public class FirstResultContractTest extends AbstractQueryTest {
 
     @Test
     public void SingleResult() {

File: querydsl-collections/src/test/java/com/querydsl/collections/InnerJoinTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-public class InnerJoinTest extends AbstractQueryTest{
+public class InnerJoinTest extends AbstractQueryTest {
 
     private QCat cat, kitten;
 

File: querydsl-collections/src/test/java/com/querydsl/collections/SerializationTest.java
Patch:
@@ -23,7 +23,7 @@
 import com.querydsl.core.types.Projections;
 import com.querydsl.core.types.QTuple;
 
-public class SerializationTest extends AbstractQueryTest{
+public class SerializationTest extends AbstractQueryTest {
 
     // TODO : order
 

File: querydsl-collections/src/test/java/com/querydsl/collections/UniqueResultContractTest.java
Patch:
@@ -18,7 +18,7 @@
 import com.querydsl.core.NonUniqueResultException;
 import com.querydsl.core.types.Expression;
 
-public class UniqueResultContractTest extends AbstractQueryTest{
+public class UniqueResultContractTest extends AbstractQueryTest {
 
     @Test(expected=NonUniqueResultException.class)
     public void Unique_Result_Throws_Exception_On_Multiple_Results() {

File: querydsl-core/src/main/java/com/querydsl/core/BooleanBuilder.java
Patch:
@@ -109,7 +109,7 @@ public BooleanBuilder andNot(Predicate right) {
     }
 
     @Override
-    public BooleanBuilder clone() throws CloneNotSupportedException{
+    public BooleanBuilder clone() throws CloneNotSupportedException {
         return (BooleanBuilder) super.clone();
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/JoinFlag.java
Patch:
@@ -29,7 +29,7 @@
  *
  */
 @Immutable
-public class JoinFlag implements Serializable{
+public class JoinFlag implements Serializable {
 
     public enum Position {
 

File: querydsl-core/src/main/java/com/querydsl/core/NonUniqueResultException.java
Patch:
@@ -20,7 +20,7 @@
  * @author tiwe
  *
  */
-public class NonUniqueResultException extends QueryException{
+public class NonUniqueResultException extends QueryException {
 
     private static final long serialVersionUID = -1757423191400510323L;
 

File: querydsl-core/src/main/java/com/querydsl/core/QueryException.java
Patch:
@@ -19,7 +19,7 @@
  * @author tiwe
  *
  */
-public class QueryException extends RuntimeException{
+public class QueryException extends RuntimeException {
 
     private static final long serialVersionUID = 2345665389612058703L;
 

File: querydsl-core/src/main/java/com/querydsl/core/QueryFlag.java
Patch:
@@ -25,7 +25,7 @@
  * @author tiwe
  *
  */
-public class QueryFlag implements Serializable{
+public class QueryFlag implements Serializable {
 
     private static final long serialVersionUID = -7131081607441961628L;
 

File: querydsl-core/src/main/java/com/querydsl/core/QueryModifiers.java
Patch:
@@ -26,7 +26,7 @@
  *
  * @author tiwe
  */
-public final class QueryModifiers implements Serializable{
+public final class QueryModifiers implements Serializable {
 
     private static final long serialVersionUID = 2934344588433680339L;
 

File: querydsl-core/src/main/java/com/querydsl/core/alias/DefaultTypeSystem.java
Patch:
@@ -24,7 +24,7 @@
  * @author tiwe
  *
  */
-public class DefaultTypeSystem implements TypeSystem{
+public class DefaultTypeSystem implements TypeSystem {
 
     @Override
     public boolean isCollectionType(Class<?> cl) {

File: querydsl-core/src/main/java/com/querydsl/core/alias/MethodType.java
Patch:
@@ -29,7 +29,7 @@
  * @author tiwe
  *
  */
-public enum MethodType{
+public enum MethodType {
     /**
      * __mappedPath invocation
      */

File: querydsl-core/src/main/java/com/querydsl/core/support/FetchableQueryBase.java
Patch:
@@ -54,7 +54,7 @@ public <T> T transform(ResultTransformer<T> transformer) {
 
     @Nullable
     protected <T> T uniqueResult(CloseableIterator<T> it) {
-        try{
+        try {
             if (it.hasNext()) {
                 T rv = it.next();
                 if (it.hasNext()) {
@@ -64,7 +64,7 @@ protected <T> T uniqueResult(CloseableIterator<T> it) {
             } else {
                 return null;
             }
-        }finally{
+        } finally {
             it.close();
         }
     }

File: querydsl-core/src/main/java/com/querydsl/core/types/ExpressionException.java
Patch:
@@ -19,7 +19,7 @@
  * @author tiwe
  *
  */
-public class ExpressionException extends RuntimeException{
+public class ExpressionException extends RuntimeException {
 
     private static final long serialVersionUID = 6031724386976562965L;
 

File: querydsl-core/src/main/java/com/querydsl/core/types/Operator.java
Patch:
@@ -21,7 +21,7 @@
  *
  * @author tiwe
  */
-public interface Operator extends Serializable{
+public interface Operator extends Serializable {
 
     /**
      * Get the unique id for this Operator

File: querydsl-core/src/main/java/com/querydsl/core/types/ParamNotSetException.java
Patch:
@@ -19,7 +19,7 @@
  * @author tiwe
  *
  */
-public class ParamNotSetException extends RuntimeException{
+public class ParamNotSetException extends RuntimeException {
 
     private static final long serialVersionUID = 2019016965590576490L;
 

File: querydsl-core/src/main/java/com/querydsl/core/types/PathMetadata.java
Patch:
@@ -26,7 +26,7 @@
  * @author tiwe
  */
 @Immutable
-public final class PathMetadata implements Serializable{
+public final class PathMetadata implements Serializable {
 
     private static final long serialVersionUID = -1055994185028970065L;
 

File: querydsl-core/src/main/java/com/querydsl/core/types/PredicateOperation.java
Patch:
@@ -25,7 +25,7 @@
  *
  */
 @Immutable
-public final class PredicateOperation extends OperationImpl<Boolean> implements Predicate{
+public final class PredicateOperation extends OperationImpl<Boolean> implements Predicate {
 
     private static final long serialVersionUID = -5371430939203772072L;
 

File: querydsl-core/src/main/java/com/querydsl/core/types/PredicateTemplate.java
Patch:
@@ -25,7 +25,7 @@
  *
  */
 @Immutable
-public class PredicateTemplate extends TemplateExpressionImpl<Boolean> implements Predicate{
+public class PredicateTemplate extends TemplateExpressionImpl<Boolean> implements Predicate {
 
     private static final long serialVersionUID = -5371430939203772072L;
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/BooleanExpression.java
Patch:
@@ -24,7 +24,7 @@
  * @see java.lang.Boolean
  *
  */
-public abstract class BooleanExpression extends LiteralExpression<Boolean> implements Predicate{
+public abstract class BooleanExpression extends LiteralExpression<Boolean> implements Predicate {
 
     private static final long serialVersionUID = 3797956062512074164L;
 

File: querydsl-core/src/main/java/com/querydsl/core/types/dsl/CollectionPathBase.java
Patch:
@@ -58,7 +58,7 @@ public CollectionPathBase(PathImpl<C> mixin, PathInits inits) {
 
     @SuppressWarnings("unchecked")
     protected Q newInstance(Class<Q> queryType, PathMetadata pm) {
-        try{
+        try {
             if (constructor == null) {
                 if (Constants.isTyped(queryType)) {
                     try {

File: querydsl-core/src/main/java/com/querydsl/core/util/NullSafeComparableComparator.java
Patch:
@@ -23,7 +23,7 @@
  *
  * @param <T>
  */
-public class NullSafeComparableComparator<T extends Comparable<T>> implements Comparator<T>, Serializable{
+public class NullSafeComparableComparator<T extends Comparable<T>> implements Comparator<T>, Serializable {
 
     private static final long serialVersionUID = 5681808684776488757L;
 

File: querydsl-core/src/main/java/com/querydsl/core/util/ResultSetAdapter.java
Patch:
@@ -27,7 +27,7 @@
  * @author tiwe
  *
  */
-public class ResultSetAdapter implements ResultSet{
+public class ResultSetAdapter implements ResultSet {
 
     private final ResultSet rs;
 

File: querydsl-core/src/test/java/com/querydsl/core/CoverageTest.java
Patch:
@@ -40,7 +40,7 @@ public class CoverageTest {
 
     @SuppressWarnings("unchecked")
     @Test
-    public void test() throws IllegalArgumentException, IllegalAccessException{
+    public void test() throws IllegalArgumentException, IllegalAccessException {
         // make sure all Operators are covered in expression factory methods
         Set<Operator> usedOperators = new HashSet<Operator>();
         List<Expression<?>> exprs = new ArrayList<Expression<?>>();

File: querydsl-core/src/test/java/com/querydsl/core/DependenciesTest.java
Patch:
@@ -26,7 +26,7 @@ public class DependenciesTest {
 
     @Test
     @Ignore
-    public void test() throws IOException{
+    public void test() throws IOException {
         // FIXME
         JDepend jdepend = new JDepend();
         jdepend.addDirectory("target/classes/com/querydsl/alias");

File: querydsl-core/src/test/java/com/querydsl/core/Entity.java
Patch:
@@ -4,7 +4,7 @@
 import java.util.Map;
 import java.util.Set;
 
-public interface Entity{
+public interface Entity {
 
     int getNum();
 

File: querydsl-core/src/test/java/com/querydsl/core/Module.java
Patch:
@@ -17,7 +17,7 @@
  * @author tiwe
  *
  */
-public enum Module{
+public enum Module {
     /**
      *
      */

File: querydsl-core/src/test/java/com/querydsl/core/QueryMetadaSerializationTest.java
Patch:
@@ -34,7 +34,7 @@ public class QueryMetadaSerializationTest {
     private QueryMetadata metadata = new DefaultQueryMetadata();
 
     @Test
-    public void Serialization() throws IOException, ClassNotFoundException{
+    public void Serialization() throws IOException, ClassNotFoundException {
         StringPath expr = Expressions.stringPath("str");
         metadata.addJoin(JoinType.DEFAULT, expr);
         metadata.addFlag(new QueryFlag(Position.AFTER_FILTERS, ""));

File: querydsl-core/src/test/java/com/querydsl/core/Target.java
Patch:
@@ -17,7 +17,7 @@
  * @author tiwe
  *
  */
-public enum Target{
+public enum Target {
     /**
      * CUBRID
      */

File: querydsl-core/src/test/java/com/querydsl/core/alias/ComparablePropertyTest.java
Patch:
@@ -17,7 +17,7 @@
 
 public class ComparablePropertyTest {
 
-    public static class Entity{
+    public static class Entity {
 
         private ComparableType property;
 

File: querydsl-core/src/test/java/com/querydsl/core/alias/DomainType.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Map;
 import java.util.Set;
 
-public interface DomainType{
+public interface DomainType {
 
     String getFirstName();
 

File: querydsl-core/src/test/java/com/querydsl/core/alias/FinalPropertyTest.java
Patch:
@@ -17,7 +17,7 @@
 
 public class FinalPropertyTest {
 
-    public static class Entity{
+    public static class Entity {
 
         private Entity2 property;
 
@@ -31,7 +31,7 @@ public void setProperty(Entity2 property) {
 
     }
 
-    public static final class Entity2{
+    public static final class Entity2 {
 
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/alias/Gender.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.core.alias;
 
-public enum Gender{
+public enum Gender {
     MALE,
     FEMALE
 }
\ No newline at end of file

File: querydsl-core/src/test/java/com/querydsl/core/group/MockTuple.java
Patch:
@@ -5,7 +5,7 @@
 import com.querydsl.core.Tuple;
 import com.querydsl.core.types.Expression;
 
-public class MockTuple implements Tuple{
+public class MockTuple implements Tuple {
 
     private final Object[] a;
 

File: querydsl-core/src/test/java/com/querydsl/core/testutil/EmptyStatement.java
Patch:
@@ -15,7 +15,7 @@
 
 import org.junit.runners.model.Statement;
 
-public final class EmptyStatement extends Statement{
+public final class EmptyStatement extends Statement {
 
     public static final Statement DEFAULT = new EmptyStatement();
 

File: querydsl-core/src/test/java/com/querydsl/core/testutil/LabelRule.java
Patch:
@@ -22,7 +22,7 @@
 
 import com.querydsl.core.Target;
 
-public class LabelRule implements MethodRule{
+public class LabelRule implements MethodRule {
 
     @Override
     public Statement apply(Statement base, FrameworkMethod method, Object target) {

File: querydsl-core/src/test/java/com/querydsl/core/types/CaseBuilderTest.java
Patch:
@@ -28,7 +28,7 @@ public enum Gender {
         MALE, FEMALE
     }
 
-    public static class Customer{
+    public static class Customer {
         private long annualSpending;
         public long getAnnualSpending() {
             return annualSpending;

File: querydsl-core/src/test/java/com/querydsl/core/types/CaseForEqBuilderTest.java
Patch:
@@ -25,7 +25,7 @@
 
 public class CaseForEqBuilderTest {
 
-    public static class Customer{
+    public static class Customer {
         private long annualSpending;
         public long getAnnualSpending() {
             return annualSpending;

File: querydsl-core/src/test/java/com/querydsl/core/types/ExpressionSerializationTest.java
Patch:
@@ -16,7 +16,7 @@ public void Serialize() throws ClassNotFoundException, IOException {
         serialize(e.newInstance("a",1));
     }
 
-    private void serialize(Object obj) throws IOException, ClassNotFoundException{
+    private void serialize(Object obj) throws IOException, ClassNotFoundException {
         Object obj2 = Serialization.serialize(obj);
         obj2.hashCode();
     }

File: querydsl-core/src/test/java/com/querydsl/core/types/QBeanTest.java
Patch:
@@ -70,7 +70,7 @@ public void setName2(String name2) {
 
     }
 
-    public static class SubEntity extends Entity{
+    public static class SubEntity extends Entity {
 
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/types/SignatureTest.java
Patch:
@@ -34,7 +34,7 @@ public class SignatureTest {
     private List<Class<?>> classes = new ArrayList<Class<?>>();
 
     @Before
-    public void setUp() throws ClassNotFoundException{
+    public void setUp() throws ClassNotFoundException {
         for (String folder : Arrays.asList("com/querydsl/core/types/dsl")) {
             for (String file : new File("src/main/java",folder).list()) {
                 if (file.endsWith(".java") && !file.equals("package-info.java")) {

File: querydsl-core/src/test/java/com/querydsl/core/types/StringTest.java
Patch:
@@ -34,7 +34,7 @@ private static class DummyTemplates extends Templates {
 
     @SuppressWarnings("unchecked")
     @Test
-    public void PatternAvailability() throws IllegalArgumentException, IllegalAccessException{
+    public void PatternAvailability() throws IllegalArgumentException, IllegalAccessException {
         Templates ops = new DummyTemplates();
         Set<Field> missing = new HashSet<Field>();
         for (Field field : Ops.class.getFields()) {
@@ -87,7 +87,7 @@ public void ToString() {
     }
 
 
-    public static class SomeType{
+    public static class SomeType {
 
         public SomeType() {}
 

File: querydsl-core/src/test/java/com/querydsl/core/types/VisitorTest.java
Patch:
@@ -22,7 +22,7 @@
 public class VisitorTest {
 
     @Test
-    public void Iteration() throws SecurityException, NoSuchMethodException{
+    public void Iteration() throws SecurityException, NoSuchMethodException {
         List<Class<?>> types = new ArrayList<Class<?>>();
 //        types.addAll(Arrays.<Class<?>>asList(Alias.class.getClasses()));
         types.addAll(Arrays.asList(Operation.class.getClasses()));

File: querydsl-core/src/test/java/com/querydsl/core/types/dsl/PathTest.java
Patch:
@@ -48,7 +48,7 @@ public String getProperty4() {
     }
 
     @QueryEntity
-    public static class Entity extends Superclass{
+    public static class Entity extends Superclass {
 
         @Nullable
         private String property1;

File: querydsl-core/src/test/java/com/querydsl/core/types/dsl/SimpleExpressionTest.java
Patch:
@@ -47,7 +47,7 @@ public void Case() {
     }
 
     @Test
-    public void Subclasses_Override_As() throws SecurityException, NoSuchMethodException{
+    public void Subclasses_Override_As() throws SecurityException, NoSuchMethodException {
         List<Class<?>> classes = Arrays.<Class<?>>asList(
                 BooleanExpression.class,
                 ComparableExpression.class,

File: querydsl-hibernate-search/src/main/java/com/querydsl/hibernate/search/SearchSerializer.java
Patch:
@@ -24,7 +24,7 @@
  * @author tiwe
  *
  */
-public class SearchSerializer extends LuceneSerializer{
+public class SearchSerializer extends LuceneSerializer {
 
     public static final SearchSerializer DEFAULT = new SearchSerializer(false,true);
 

File: querydsl-hibernate-search/src/test/java/com/querydsl/hibernate/search/AbstractQueryTest.java
Patch:
@@ -36,7 +36,7 @@ public abstract class AbstractQueryTest {
     private static SessionFactory sessionFactory;
 
     @BeforeClass
-    public static void setUpClass() throws IOException{
+    public static void setUpClass() throws IOException {
         FileUtils.delete(new File("target/derbydb"));
         FileUtils.delete(new File("target/lucene3"));
         AnnotationConfiguration cfg = new AnnotationConfiguration();
@@ -79,7 +79,7 @@ public void setUp() {
     }
 
     @After
-    public void tearDown() throws HibernateException, SQLException{
+    public void tearDown() throws HibernateException, SQLException {
         if (!session.getTransaction().wasRolledBack()) {
             session.getTransaction().commit();
         }

File: querydsl-jdo/src/test/java/com/querydsl/jdo/AggregateTest.java
Patch:
@@ -24,7 +24,7 @@
 import com.querydsl.jdo.test.domain.Product;
 import com.querydsl.jdo.test.domain.QProduct;
 
-public class AggregateTest extends AbstractJDOTest{
+public class AggregateTest extends AbstractJDOTest {
 
     private final QProduct product = QProduct.product;
 

File: querydsl-jdo/src/test/java/com/querydsl/jdo/BasicsTest.java
Patch:
@@ -46,7 +46,7 @@ public class BasicsTest extends AbstractJDOTest {
     private final QProduct product2 = new QProduct("product2");
 
     @Test
-    public void Serialization() throws IOException{
+    public void Serialization() throws IOException {
         JDOQuery<?> query = query();
 
         assertEquals("FROM com.querydsl.jdo.test.domain.Product", query.from(product).toString());
@@ -59,7 +59,7 @@ public void Serialization() throws IOException{
     }
 
     @Test
-    public void SubQuerySerialization() throws IOException{
+    public void SubQuerySerialization() throws IOException {
         JDOQuery<?> query = query();
 
         assertEquals("FROM com.querydsl.jdo.test.domain.Product", query.from(product).toString());
@@ -113,7 +113,7 @@ public void Unique_Result_Throws_Exception_On_Multiple_Results() {
     }
 
     @Test
-    public void SimpleTest() throws IOException{
+    public void SimpleTest() throws IOException {
         JDOQuery<?> query = new JDOQuery<Void>(pm, templates, false);
         assertEquals("Sony Discman", query.from(product).where(product.name.eq("Sony Discman"))
                 .select(product.name).fetchOne());

File: querydsl-jdo/src/test/java/com/querydsl/jdo/DependenciesTest.java
Patch:
@@ -26,7 +26,7 @@ public class DependenciesTest {
 
     @Test
     @Ignore
-    public void test() throws IOException{
+    public void test() throws IOException {
         JDepend jdepend = new JDepend();
         jdepend.addDirectory("target/classes/com/querydsl/jdo");
         jdepend.addDirectory("target/classes/com/querydsl/jdo/dml");

File: querydsl-jdo/src/test/java/com/querydsl/jdo/FetchPlanTest.java
Patch:
@@ -32,7 +32,7 @@
 import com.querydsl.jdo.test.domain.QProduct;
 import com.querydsl.jdo.test.domain.QStore;
 
-public class FetchPlanTest extends AbstractJDOTest{
+public class FetchPlanTest extends AbstractJDOTest {
 
     private JDOQuery<?> query;
 
@@ -46,7 +46,7 @@ public void tearDown() {
 
     @SuppressWarnings("unchecked")
     @Test
-    public void ListProducts() throws Exception{
+    public void ListProducts() throws Exception {
         QProduct product = QProduct.product;
         query = query();
         query.from(product)
@@ -68,7 +68,7 @@ public void ListProducts() throws Exception{
 
     @SuppressWarnings("unchecked")
     @Test
-    public void ListStores() throws Exception{
+    public void ListStores() throws Exception {
         QStore store = QStore.store;
         query = query();
         query.from(store)

File: querydsl-jdo/src/test/java/com/querydsl/jdo/JDOQueryStandardTest.java
Patch:
@@ -51,7 +51,7 @@ public Projection(String str) {}
 
     private static final java.sql.Time time;
 
-    static{
+    static {
         Calendar cal = Calendar.getInstance();
         cal.set(2000, 1, 2, 3, 4);
         cal.set(Calendar.MILLISECOND, 0);

File: querydsl-jdo/src/test/java/com/querydsl/jdo/JDOSQLQueryTest.java
Patch:
@@ -38,7 +38,7 @@
 import com.querydsl.sql.HSQLDBTemplates;
 import com.querydsl.sql.SQLTemplates;
 
-public class JDOSQLQueryTest extends AbstractJDOTest{
+public class JDOSQLQueryTest extends AbstractJDOTest {
 
     private final SQLTemplates sqlTemplates = new HSQLDBTemplates();
 

File: querydsl-jdo/src/test/java/com/querydsl/jdo/PackageVerification.java
Patch:
@@ -34,7 +34,7 @@
 public class PackageVerification {
 
     @Test
-    public void Verify_Package() throws Exception{
+    public void Verify_Package() throws Exception {
         String version = System.getProperty("version");
         verify(new File("target/querydsl-jdo-"+version+"-apt-one-jar.jar"));
     }

File: querydsl-jdo/src/test/java/com/querydsl/jdo/QueryMutabilityTest.java
Patch:
@@ -23,7 +23,7 @@
 import com.querydsl.core.QueryMutability;
 import com.querydsl.jdo.test.domain.QProduct;
 
-public class QueryMutabilityTest extends AbstractJDOTest{
+public class QueryMutabilityTest extends AbstractJDOTest {
 
     @Test
     public void QueryMutability() throws IOException, SecurityException,

File: querydsl-jdo/src/test/java/com/querydsl/jdo/serialization/ContainerTest.java
Patch:
@@ -22,7 +22,7 @@
 import com.querydsl.jdo.models.fitness.QGym;
 import com.querydsl.jdo.models.fitness.Wardrobe;
 
-public class ContainerTest extends AbstractTest{
+public class ContainerTest extends AbstractTest {
 
     private QGym gym = QGym.gym1;
 

File: querydsl-jdo/src/test/java/com/querydsl/jdo/serialization/QuerySerializationTest.java
Patch:
@@ -21,7 +21,7 @@
 import com.querydsl.jdo.test.domain.Book;
 import com.querydsl.jdo.test.domain.QProduct;
 
-public class QuerySerializationTest extends AbstractTest{
+public class QuerySerializationTest extends AbstractTest {
 
     private QProduct product = QProduct.product;
 

File: querydsl-jdo/src/test/java/com/querydsl/jdo/serialization/SubqueriesTest.java
Patch:
@@ -21,7 +21,7 @@
 import com.querydsl.jdo.models.company.QDepartment;
 import com.querydsl.jdo.models.company.QEmployee;
 
-public class SubqueriesTest extends AbstractTest{
+public class SubqueriesTest extends AbstractTest {
 
     private QDepartment department = QDepartment.department;
 

File: querydsl-jpa-codegen/src/main/java/com/querydsl/jpa/codegen/AbstractDomainExporter.java
Patch:
@@ -291,10 +291,10 @@ private void write(Serializer serializer, String path, EntityType type) throws I
         File targetFile = new File(targetFolder, path);
         generatedFiles.add(targetFile);
         Writer w = writerFor(targetFile);
-        try{
+        try {
             CodeWriter writer = new JavaWriter(w);
             serializer.serialize(type, serializerConfig, writer);
-        }finally{
+        } finally {
             w.close();
         }
     }

File: querydsl-jpa-codegen/src/main/java/com/querydsl/jpa/codegen/HibernateDomainExporter.java
Patch:
@@ -41,7 +41,7 @@
  * @author tiwe
  *
  */
-public class HibernateDomainExporter extends AbstractDomainExporter{
+public class HibernateDomainExporter extends AbstractDomainExporter {
 
     private static final Logger logger = LoggerFactory.getLogger(HibernateDomainExporter.class);
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPQLSerializer.java
Patch:
@@ -85,7 +85,7 @@ public class JPQLSerializer extends SerializerBase<JPQLSerializer> {
 
     private boolean inCaseOperation = false;
 
-    static{
+    static {
         joinTypes.put(JoinType.DEFAULT, COMMA);
         joinTypes.put(JoinType.FULLJOIN, "\n  full join ");
         joinTypes.put(JoinType.INNERJOIN, "\n  inner join ");

File: querydsl-jpa/src/main/java/com/querydsl/jpa/OpenJPATemplates.java
Patch:
@@ -22,7 +22,7 @@
  * @author tiwe
  *
  */
-public class OpenJPATemplates extends JPQLTemplates{
+public class OpenJPATemplates extends JPQLTemplates {
 
     public static final OpenJPATemplates DEFAULT = new OpenJPATemplates();
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/AbstractHibernateQuery.java
Patch:
@@ -178,7 +178,7 @@ public List<T> fetch() {
 
     @Override
     public QueryResults<T> fetchResults() {
-        try{
+        try {
             Query countQuery = createQuery(null, true);
             long total = (Long) countQuery.uniqueResult();
 
@@ -191,7 +191,7 @@ public QueryResults<T> fetchResults() {
             } else {
                 return QueryResults.emptyResults();
             }
-        }finally{
+        } finally {
             reset();
         }
     }
@@ -325,7 +325,7 @@ public T fetchOne() {
         try {
             QueryModifiers modifiers = getMetadata().getModifiers();
             Query query = createQuery(modifiers, false);
-            try{
+            try {
                 return (T) query.uniqueResult();
             } catch (org.hibernate.NonUniqueResultException e) {
                 throw new NonUniqueResultException();

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/DefaultSessionHolder.java
Patch:
@@ -23,7 +23,7 @@
  * @author tiwe
  *
  */
-public class DefaultSessionHolder implements SessionHolder{
+public class DefaultSessionHolder implements SessionHolder {
 
     private final Session session;
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/HibernateUtil.java
Patch:
@@ -36,7 +36,7 @@ public final class HibernateUtil {
 
     private static final Map<Class<?>,Type> TYPES = new HashMap<Class<?>,Type>();
 
-    static{
+    static {
         TYPES.put(Byte.class, new ByteType());
         TYPES.put(Short.class, new ShortType());
         TYPES.put(Integer.class, new IntegerType());

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/StatelessSessionHolder.java
Patch:
@@ -23,7 +23,7 @@
  * @author tiwe
  *
  */
-public class StatelessSessionHolder implements SessionHolder{
+public class StatelessSessionHolder implements SessionHolder {
 
     private final StatelessSession session;
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/sql/AbstractHibernateSQLQuery.java
Patch:
@@ -221,9 +221,9 @@ public T fetchOne() {
 
     @Nullable
     private Object uniqueResult(Query query) {
-        try{
+        try {
             return query.uniqueResult();
-        }catch (org.hibernate.NonUniqueResultException e) {
+        } catch (org.hibernate.NonUniqueResultException e) {
             throw new NonUniqueResultException();
         }
     }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/AbstractJPAQuery.java
Patch:
@@ -248,7 +248,7 @@ protected void reset() {
     @SuppressWarnings("unchecked")
     @Override
     public T fetchOne() {
-        try{
+        try {
             Query query = createQuery(getMetadata().getModifiers(), false);
             return (T) getSingleResult(query);
         } catch(javax.persistence.NoResultException e) {

File: querydsl-jpa/src/main/java/com/querydsl/jpa/sql/AbstractJPASQLQuery.java
Patch:
@@ -299,7 +299,7 @@ public T fetchOne() {
 
     @Nullable
     private Object uniqueResult(Query query) {
-        try{
+        try {
             return getSingleResult(query);
         } catch(javax.persistence.NoResultException e) {
             logger.trace(e.getMessage(),e);

File: querydsl-jpa/src/test/java/com/querydsl/jpa/AggregationTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.junit.Test;
 
-public class AggregationTest extends AbstractQueryTest{
+public class AggregationTest extends AbstractQueryTest {
 
     @Test
     public void Max() {

File: querydsl-jpa/src/test/java/com/querydsl/jpa/CollectionTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.querydsl.jpa.domain.Cat;
 
-public class CollectionTest extends AbstractQueryTest{
+public class CollectionTest extends AbstractQueryTest {
 
     @Test
     public void Constant_InElements_Set() {

File: querydsl-jpa/src/test/java/com/querydsl/jpa/ConstructorsTest.java
Patch:
@@ -22,7 +22,7 @@
 import com.querydsl.core.types.Expression;
 import com.querydsl.core.types.Projections;
 
-public class ConstructorsTest extends AbstractQueryTest{
+public class ConstructorsTest extends AbstractQueryTest {
 
     public static final class BookmarkDTO {
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/CustomExpressionsTest.java
Patch:
@@ -22,7 +22,7 @@
 import com.querydsl.core.types.TemplateFactory;
 import com.querydsl.core.types.dsl.StringTemplate;
 
-public class CustomExpressionsTest extends AbstractQueryTest{
+public class CustomExpressionsTest extends AbstractQueryTest {
 
     public static class MyCustomExpr extends StringTemplate {
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/DependenciesTest.java
Patch:
@@ -24,7 +24,7 @@
 public class DependenciesTest {
 
     @Test
-    public void test() throws IOException{
+    public void test() throws IOException {
         JDepend jdepend = new JDepend();
         jdepend.addDirectory("target/classes/com/querydsl/jpa");
         jdepend.addDirectory("target/classes/com/querydsl/jpa/hibernate");

File: querydsl-jpa/src/test/java/com/querydsl/jpa/DummySessionHolder.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.querydsl.jpa.hibernate.SessionHolder;
 
-public class DummySessionHolder implements SessionHolder{
+public class DummySessionHolder implements SessionHolder {
 
     @Override
     public Query createQuery(String queryString) {

File: querydsl-jpa/src/test/java/com/querydsl/jpa/EJBQLTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.junit.Test;
 
-public class EJBQLTest extends AbstractQueryTest{
+public class EJBQLTest extends AbstractQueryTest {
 
     // Any function or operator defined by EJB-QL 3.0: substring(), trim(),
     // lower(), upper(), length(), locate(), abs(), sqrt(), bit_length(),

File: querydsl-jpa/src/test/java/com/querydsl/jpa/ExtDoubleType.java
Patch:
@@ -16,7 +16,7 @@
 import org.hibernate.type.DoubleType;
 
 @SuppressWarnings("serial")
-public class ExtDoubleType extends DoubleType{
+public class ExtDoubleType extends DoubleType {
 
 //    @Override
 //    public void set(PreparedStatement st, Object value, int index) throws SQLException {

File: querydsl-jpa/src/test/java/com/querydsl/jpa/IntegrationBase.java
Patch:
@@ -151,7 +151,7 @@ public void Delete() {
     }
 
     @Test
-    public void Collection() throws Exception{
+    public void Collection() throws Exception {
         List<Cat> cats = Arrays.asList(new Cat("Bob",10), new Cat("Steve",11));
         for (Cat cat : cats) {
             session.save(cat);

File: querydsl-jpa/src/test/java/com/querydsl/jpa/JoinFlagsTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.junit.Test;
 
-public class JoinFlagsTest extends AbstractQueryTest{
+public class JoinFlagsTest extends AbstractQueryTest {
 
     @Test
     public void FetchAll() {

File: querydsl-jpa/src/test/java/com/querydsl/jpa/JoinTest.java
Patch:
@@ -27,7 +27,7 @@
 
 public class JoinTest {
 
-    public interface Entity{
+    public interface Entity {
 
         List<String> getNames();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/MathTest.java
Patch:
@@ -20,7 +20,7 @@
 import com.querydsl.core.types.dsl.NumberPath;
 import com.querydsl.jpa.domain.QCat;
 
-public class MathTest extends AbstractQueryTest{
+public class MathTest extends AbstractQueryTest {
 
     @Test
     public void test() {

File: querydsl-jpa/src/test/java/com/querydsl/jpa/PackageVerification.java
Patch:
@@ -35,7 +35,7 @@
 public class PackageVerification {
 
     @Test
-    public void Verify_Package() throws Exception{
+    public void Verify_Package() throws Exception {
         String version = System.getProperty("version");
         verify(new File("target/querydsl-jpa-"+version+"-apt-hibernate-one-jar.jar"), true);
         verify(new File("target/querydsl-jpa-"+version+"-apt-one-jar.jar"), false);

File: querydsl-jpa/src/test/java/com/querydsl/jpa/QueryMutabilityTest.java
Patch:
@@ -28,7 +28,7 @@
 import com.querydsl.sql.DerbyTemplates;
 import com.querydsl.sql.SQLTemplates;
 
-public class QueryMutabilityTest{
+public class QueryMutabilityTest {
 
     private static final SQLTemplates derbyTemplates = new DerbyTemplates();
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/SerializationBase.java
Patch:
@@ -37,7 +37,7 @@ public class SerializationBase implements JPATest {
     private EntityManager entityManager;
 
     @Test
-    public void test() throws IOException, ClassNotFoundException{
+    public void test() throws IOException, ClassNotFoundException {
         // create query
         JPAQuery<?> query = query();
         query.from(cat).where(cat.name.eq("Kate")).select(cat).fetch();

File: querydsl-jpa/src/test/java/com/querydsl/jpa/StringOperationsTest.java
Patch:
@@ -24,7 +24,7 @@
 import com.querydsl.core.types.dsl.Expressions;
 import com.querydsl.core.types.dsl.StringPath;
 
-public class StringOperationsTest extends AbstractQueryTest{
+public class StringOperationsTest extends AbstractQueryTest {
 
     @Test
     public void StringConcatenations() {

File: querydsl-jpa/src/test/java/com/querydsl/jpa/SubQueryTest.java
Patch:
@@ -23,7 +23,7 @@
 import com.querydsl.jpa.domain.QEmployee;
 import com.querydsl.jpa.domain.QUser;
 
-public class SubQueryTest extends AbstractQueryTest{
+public class SubQueryTest extends AbstractQueryTest {
 
     @Test
     public void Single_Source() {

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Account.java
Patch:
@@ -29,7 +29,7 @@
 @SuppressWarnings("serial")
 @Entity
 @Table(name="account_")
-public class Account implements Serializable{
+public class Account implements Serializable {
 
     @Transient
     public int transientField;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Calendar.java
Patch:
@@ -26,7 +26,7 @@
 @SuppressWarnings("serial")
 @Entity
 @Table(name="calendar_")
-public class Calendar implements Serializable{
+public class Calendar implements Serializable {
     @ElementCollection
     @Temporal(TemporalType.DATE)
     @MapKeyColumn(name="holidays_key")

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/EmbeddedType.java
Patch:
@@ -19,7 +19,7 @@
 
 @SuppressWarnings("serial")
 @Embeddable
-public class EmbeddedType implements Serializable{
+public class EmbeddedType implements Serializable {
 
     String someData;
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Nationality.java
Patch:
@@ -26,7 +26,7 @@
 @SuppressWarnings("serial")
 @Entity
 @Table(name="nationality_")
-public class Nationality implements Serializable{
+public class Nationality implements Serializable {
     @ManyToOne
     Calendar calendar;
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Person.java
Patch:
@@ -25,7 +25,7 @@
 @SuppressWarnings("serial")
 @Entity
 @Table(name="person_")
-public class Person implements Serializable{
+public class Person implements Serializable {
     @Temporal(TemporalType.DATE)
     java.util.Date birthDay;
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/PersonId.java
Patch:
@@ -25,7 +25,7 @@
 @SuppressWarnings("serial")
 @Entity
 @Table(name="personid_")
-public class PersonId implements Serializable{
+public class PersonId implements Serializable {
     String country;
 
     @Id

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/Price.java
Patch:
@@ -23,7 +23,7 @@
  */
 @Entity
 @Table(name="price_")
-public class Price{
+public class Price {
     long amount;
 
     @Id

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain3/HardwareStore.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.jpa.domain3;
 
-public class HardwareStore extends Store{
+public class HardwareStore extends Store {
 
     private static final long serialVersionUID = 2725944536560445206L;
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/support/ExtendedDerbyDialect.java
Patch:
@@ -27,7 +27,7 @@
  * @author tiwe
  *
  */
-public class ExtendedDerbyDialect extends DerbyDialect{
+public class ExtendedDerbyDialect extends DerbyDialect {
 
     private static final CastFunction castFunction = new CastFunction() {
         @Override

File: querydsl-jpa/src/test/java/com/querydsl/jpa/support/ExtendedHSQLDialect.java
Patch:
@@ -21,7 +21,7 @@
  * @author tiwe
  *
  */
-public class ExtendedHSQLDialect extends HSQLDialect{
+public class ExtendedHSQLDialect extends HSQLDialect {
 
     public ExtendedHSQLDialect() {
         registerFunction("trim", new SQLFunctionTemplate(StandardBasicTypes.STRING, "trim(both from ?1)"));

File: querydsl-lucene3/src/main/java/com/querydsl/lucene3/IgnoreCaseUnsupportedException.java
Patch:
@@ -19,7 +19,7 @@
  * @author tiwe
  *
  */
-public class IgnoreCaseUnsupportedException extends UnsupportedOperationException{
+public class IgnoreCaseUnsupportedException extends UnsupportedOperationException {
 
     private static final long serialVersionUID = 412913389929530788L;
 

File: querydsl-lucene4/src/main/java/com/querydsl/lucene4/IgnoreCaseUnsupportedException.java
Patch:
@@ -19,7 +19,7 @@
  * @author tiwe
  *
  */
-public class IgnoreCaseUnsupportedException extends UnsupportedOperationException{
+public class IgnoreCaseUnsupportedException extends UnsupportedOperationException {
 
     private static final long serialVersionUID = 412913389929530788L;
 

File: querydsl-maven-plugin/src/main/java/com/querydsl/maven/AbstractMetaDataExportMojo.java
Patch:
@@ -38,7 +38,7 @@
  *
  * @author tiwe
  */
-public class AbstractMetaDataExportMojo extends AbstractMojo{
+public class AbstractMetaDataExportMojo extends AbstractMojo {
 
     /**
      * maven project
@@ -466,7 +466,7 @@ public void execute() throws MojoExecutionException, MojoFailureException {
 
             Class.forName(jdbcDriver);
             Connection conn = DriverManager.getConnection(jdbcUrl, jdbcUser, jdbcPassword);
-            try{
+            try {
                 exporter.export(conn.getMetaData());
             } finally {
                 if (conn != null) {

File: querydsl-maven-plugin/src/main/java/com/querydsl/maven/MetadataExportMojo.java
Patch:
@@ -23,7 +23,7 @@
  * @goal export
  *
  */
-public class MetadataExportMojo extends AbstractMetaDataExportMojo{
+public class MetadataExportMojo extends AbstractMetaDataExportMojo {
 
     @Override
     protected boolean isForTest() {

File: querydsl-maven-plugin/src/main/java/com/querydsl/maven/TestMetadataExportMojo.java
Patch:
@@ -22,7 +22,7 @@
  * @goal test-export
  *
  */
-public class TestMetadataExportMojo extends AbstractMetaDataExportMojo{
+public class TestMetadataExportMojo extends AbstractMetaDataExportMojo {
 
     @Override
     protected boolean isForTest() {

File: querydsl-mongodb/src/test/java/com/querydsl/mongodb/PackageVerification.java
Patch:
@@ -33,7 +33,7 @@
 public class PackageVerification {
 
     @Test
-    public void Verify_Package() throws Exception{
+    public void Verify_Package() throws Exception {
         String version = System.getProperty("version");
         verify(new File("target/querydsl-mongodb-"+version+"-apt-one-jar.jar"));
     }

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/MetaDataSerializer.java
Patch:
@@ -200,7 +200,7 @@ protected void writeUserImports(CodeWriter writer) throws IOException {
             boolean isClass = Character.isUpperCase(javaImport.charAt(javaImport.lastIndexOf(".") + 1));
             if (isClass){
                 classes.add(javaImport);
-            }else{
+            } else {
                 packages.add(javaImport);
             }
         }

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/SQLCodegenModule.java
Patch:
@@ -28,7 +28,7 @@
  * @author tiwe
  *
  */
-public class SQLCodegenModule extends CodegenModule{
+public class SQLCodegenModule extends CodegenModule {
 
     public static final String BEAN_SERIALIZER = "beanSerializer";
 

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/SQLQueryTypeFactory.java
Patch:
@@ -27,7 +27,7 @@
  * @author tiwe
  *
  */
-public final class SQLQueryTypeFactory implements QueryTypeFactory{
+public final class SQLQueryTypeFactory implements QueryTypeFactory {
 
     private final String packageName, beanPackageName;
 

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/support/InverseForeignKeyData.java
Patch:
@@ -26,7 +26,7 @@
  * @author tiwe
  *
  */
-public class InverseForeignKeyData implements KeyData{
+public class InverseForeignKeyData implements KeyData {
 
     private final String name;
 

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/CustomTypesTest.java
Patch:
@@ -33,13 +33,13 @@
 import com.querydsl.sql.types.StringType;
 import com.querydsl.sql.types.UtilDateType;
 
-public class CustomTypesTest extends AbstractJDBCTest{
+public class CustomTypesTest extends AbstractJDBCTest {
 
     private Configuration configuration;
 
     @Override
     @Before
-    public void setUp() throws ClassNotFoundException, SQLException{
+    public void setUp() throws ClassNotFoundException, SQLException {
         super.setUp();
         // create schema
         statement.execute("drop table person if exists");
@@ -62,7 +62,7 @@ public void setUp() throws ClassNotFoundException, SQLException{
     }
 
     @Test
-    public void Export() throws SQLException, IOException{
+    public void Export() throws SQLException, IOException {
         // create exporter
         String namePrefix = "Q";
         NamingStrategy namingStrategy = new DefaultNamingStrategy();

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/ExportBaseTest.java
Patch:
@@ -24,7 +24,7 @@
 public abstract class ExportBaseTest {
 
     @Test
-    public void Export() throws SQLException{
+    public void Export() throws SQLException {
         File folder = new File("target", getClass().getSimpleName());
         folder.mkdirs();
         NamingStrategy namingStrategy = new DefaultNamingStrategy();

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/ExportDerbyTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.querydsl.sql.Connections;
 
-public class ExportDerbyTest extends ExportBaseTest{
+public class ExportDerbyTest extends ExportBaseTest {
 
     @BeforeClass
     public static void setUpClass() throws Exception {

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/ExportH2Test.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.querydsl.sql.Connections;
 
-public class ExportH2Test extends ExportBaseTest{
+public class ExportH2Test extends ExportBaseTest {
 
     @BeforeClass
     public static void setUpClass() throws Exception {

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/ExportHsqldbTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.querydsl.sql.Connections;
 
-public class ExportHsqldbTest extends ExportBaseTest{
+public class ExportHsqldbTest extends ExportBaseTest {
 
     @BeforeClass
     public static void setUpClass() throws Exception {

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/ExportMSSQLTest.java
Patch:
@@ -20,7 +20,7 @@
 import com.querydsl.sql.Connections;
 
 @Category(ExternalDB.class)
-public class ExportMSSQLTest extends ExportBaseTest{
+public class ExportMSSQLTest extends ExportBaseTest {
 
     @BeforeClass
     public static void setUpClass() throws Exception {

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/ExportMySQLTest.java
Patch:
@@ -20,7 +20,7 @@
 import com.querydsl.sql.Connections;
 
 @Category(ExternalDB.class)
-public class ExportMySQLTest extends ExportBaseTest{
+public class ExportMySQLTest extends ExportBaseTest {
 
     @BeforeClass
     public static void setUpClass() throws Exception {

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/ExportOracleTest.java
Patch:
@@ -20,7 +20,7 @@
 import com.querydsl.sql.Connections;
 
 @Category(ExternalDB.class)
-public class ExportOracleTest extends ExportBaseTest{
+public class ExportOracleTest extends ExportBaseTest {
 
     @BeforeClass
     public static void setUpClass() throws Exception {

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/ExportPostgreSQLTest.java
Patch:
@@ -20,7 +20,7 @@
 import com.querydsl.sql.Connections;
 
 @Category(ExternalDB.class)
-public class ExportPostgreSQLTest extends ExportBaseTest{
+public class ExportPostgreSQLTest extends ExportBaseTest {
 
     @BeforeClass
     public static void setUpClass() throws Exception {

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/ExportSQLiteTest.java
Patch:
@@ -4,7 +4,7 @@
 
 import com.querydsl.sql.Connections;
 
-public class ExportSQLiteTest extends ExportBaseTest{
+public class ExportSQLiteTest extends ExportBaseTest {
 
     @BeforeClass
     public static void setUpClass() throws Exception {

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/KeyDataFactoryTest.java
Patch:
@@ -28,10 +28,10 @@
 import com.querydsl.sql.codegen.support.PrimaryKeyData;
 
 
-public class KeyDataFactoryTest extends AbstractJDBCTest{
+public class KeyDataFactoryTest extends AbstractJDBCTest {
 
     @Test
-    public void test() throws SQLException{
+    public void test() throws SQLException {
         statement.execute("drop table employee if exists");
         statement.execute("drop table survey if exists");
         statement.execute("drop table date_test if exists");

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/MetaDataSerializerTest.java
Patch:
@@ -27,11 +27,11 @@
 import com.querydsl.codegen.BeanSerializer;
 import com.querydsl.sql.AbstractJDBCTest;
 
-public class MetaDataSerializerTest extends AbstractJDBCTest{
+public class MetaDataSerializerTest extends AbstractJDBCTest {
 
     @Override
     @Before
-    public void setUp() throws SQLException, ClassNotFoundException{
+    public void setUp() throws SQLException, ClassNotFoundException {
         super.setUp();
         statement.execute("drop table employee if exists");
         statement.execute("drop table survey if exists");
@@ -69,7 +69,7 @@ public void setUp() throws SQLException, ClassNotFoundException{
     }
 
     @Test
-    public void Normal_serialization() throws SQLException{
+    public void Normal_serialization() throws SQLException {
         String namePrefix = "Q";
         NamingStrategy namingStrategy = new DefaultNamingStrategy();
         // customization of serialization

File: querydsl-sql/src/main/java/com/querydsl/sql/AbstractSQLQuery.java
Patch:
@@ -446,7 +446,7 @@ public QueryResults<T> fetchResults() {
     }
 
     private <RT> RT newInstance(FactoryExpression<RT> c, ResultSet rs, int offset)
-        throws InstantiationException, IllegalAccessException, InvocationTargetException, SQLException{
+        throws InstantiationException, IllegalAccessException, InvocationTargetException, SQLException {
         Object[] args = new Object[c.getArgs().size()];
         for (int i = 0; i < args.length; i++) {
             args[i] = get(rs, c.getArgs().get(i), offset + i + 1, c.getArgs().get(i).getType());

File: querydsl-sql/src/main/java/com/querydsl/sql/JavaTypeMapping.java
Patch:
@@ -35,7 +35,7 @@ class JavaTypeMapping {
 
     private static final Map<Class<?>,Type<?>> defaultTypes = new HashMap<Class<?>,Type<?>>();
 
-    static{
+    static {
         registerDefault(new BigIntegerType());
         registerDefault(new BigDecimalType());
         registerDefault(new BlobType());
@@ -110,7 +110,7 @@ public <T> Type<T> getType(Class<T> clazz) {
     private Type<?> findType(Class<?> clazz) {
         //Look for a registered type in the class hierarchy
         Class<?> cl = clazz;
-        do{
+        do {
             if (typeByClass.containsKey(cl)) {
                 return typeByClass.get(cl);
             } else if (defaultTypes.containsKey(cl)) {

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLResultIterator.java
Patch:
@@ -49,7 +49,7 @@ public SQLResultIterator(Configuration conf, Statement stmt, ResultSet rs) {
 
     @Override
     public void close() {
-        try{
+        try {
             try {
                 if (rs != null) {
                     rs.close();
@@ -59,7 +59,7 @@ public void close() {
                     stmt.close();
                 }
             }
-        }catch(SQLException e) {
+        } catch(SQLException e) {
             throw configuration.translate(e);
         }
     }

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/SQLDeleteClause.java
Patch:
@@ -111,7 +111,7 @@ public SQLDeleteClause addBatch() {
         return this;
     }
 
-    private PreparedStatement createStatement() throws SQLException{
+    private PreparedStatement createStatement() throws SQLException {
         listeners.preRender(context);
         SQLSerializer serializer = createSerializer();
         serializer.serializeDelete(metadata, entity);

File: querydsl-sql/src/main/java/com/querydsl/sql/dml/SQLUpdateClause.java
Patch:
@@ -107,7 +107,7 @@ public SQLUpdateClause addBatch() {
         return this;
     }
 
-    private PreparedStatement createStatement() throws SQLException{
+    private PreparedStatement createStatement() throws SQLException {
         listeners.preRender(context);
         SQLSerializer serializer = createSerializer();
         serializer.serializeUpdate(metadata, entity, updates);

File: querydsl-sql/src/main/java/com/querydsl/sql/mysql/MySQLReplaceClause.java
Patch:
@@ -30,7 +30,7 @@
  * @author tiwe
  *
  */
-public class MySQLReplaceClause extends SQLInsertClause{
+public class MySQLReplaceClause extends SQLInsertClause {
 
     private static final String REPLACE_INTO = "replace into ";
 

File: querydsl-sql/src/test/java/com/querydsl/sql/AbstractJDBCTest.java
Patch:
@@ -36,10 +36,10 @@ public void setUp() throws ClassNotFoundException, SQLException {
     }
 
     @After
-    public void tearDown() throws SQLException{
-        try{
+    public void tearDown() throws SQLException {
+        try {
             statement.close();
-        }finally{
+        } finally {
             connection.close();
         }
     }

File: querydsl-sql/src/test/java/com/querydsl/sql/CUBRIDTemplatesTest.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.querydsl.sql;
 
-public class CUBRIDTemplatesTest extends AbstractSQLTemplatesTest{
+public class CUBRIDTemplatesTest extends AbstractSQLTemplatesTest {
 
     @Override
     protected SQLTemplates createTemplates() {

File: querydsl-sql/src/test/java/com/querydsl/sql/Constants.java
Patch:
@@ -36,7 +36,7 @@ private Constants() {}
 
     public static final QSurvey survey2 = new QSurvey("s2");
 
-    static{
+    static {
         LocalDate localDate = new LocalDate(2000, 2, 10);
         date = new java.sql.Date(localDate.toDateMidnight().getMillis());
 

File: querydsl-sql/src/test/java/com/querydsl/sql/DB2TemplatesTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.querydsl.core.types.Ops;
 
-public class DB2TemplatesTest extends AbstractSQLTemplatesTest{
+public class DB2TemplatesTest extends AbstractSQLTemplatesTest {
 
     @Override
     protected SQLTemplates createTemplates() {

File: querydsl-sql/src/test/java/com/querydsl/sql/DependenciesTest.java
Patch:
@@ -26,7 +26,7 @@ public class DependenciesTest {
 
     @Test
     @Ignore
-    public void test() throws IOException{
+    public void test() throws IOException {
         JDepend jdepend = new JDepend();
         jdepend.addDirectory("target/classes/com/querydsl/sql");
         jdepend.addDirectory("target/classes/com/querydsl/sql/ddl");

File: querydsl-sql/src/test/java/com/querydsl/sql/DerbyTemplatesTest.java
Patch:
@@ -23,7 +23,7 @@
 import com.querydsl.core.types.Operation;
 import com.querydsl.core.types.Ops;
 
-public class DerbyTemplatesTest extends AbstractSQLTemplatesTest{
+public class DerbyTemplatesTest extends AbstractSQLTemplatesTest {
 
     @Override
     protected SQLTemplates createTemplates() {

File: querydsl-sql/src/test/java/com/querydsl/sql/DummyBlob.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.Blob;
 import java.sql.SQLException;
 
-public class DummyBlob implements Blob{
+public class DummyBlob implements Blob {
 
     @Override
     public void free() throws SQLException {

File: querydsl-sql/src/test/java/com/querydsl/sql/EncryptedString.java
Patch:
@@ -15,6 +15,6 @@
 
 import com.querydsl.sql.types.StringType;
 
-public class EncryptedString extends StringType{
+public class EncryptedString extends StringType {
 
 }
\ No newline at end of file

File: querydsl-sql/src/test/java/com/querydsl/sql/FirebirdTemplatesTest.java
Patch:
@@ -24,7 +24,7 @@
 import com.querydsl.core.types.dsl.Expressions;
 import com.querydsl.core.types.dsl.NumberExpression;
 
-public class FirebirdTemplatesTest extends AbstractSQLTemplatesTest{
+public class FirebirdTemplatesTest extends AbstractSQLTemplatesTest {
 
     @Override
     protected SQLTemplates createTemplates() {

File: querydsl-sql/src/test/java/com/querydsl/sql/H2TemplatesTest.java
Patch:
@@ -20,7 +20,7 @@
 
 import com.querydsl.core.types.Ops;
 
-public class H2TemplatesTest extends AbstractSQLTemplatesTest{
+public class H2TemplatesTest extends AbstractSQLTemplatesTest {
 
     @Override
     protected SQLTemplates createTemplates() {

File: querydsl-sql/src/test/java/com/querydsl/sql/HSQLDBTemplatesTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.querydsl.core.types.Ops;
 
-public class HSQLDBTemplatesTest extends AbstractSQLTemplatesTest{
+public class HSQLDBTemplatesTest extends AbstractSQLTemplatesTest {
 
     @Override
     protected SQLTemplates createTemplates() {

File: querydsl-sql/src/test/java/com/querydsl/sql/LikeEscapeBase.java
Patch:
@@ -25,10 +25,10 @@
 
 import com.querydsl.sql.dml.SQLInsertClause;
 
-public class LikeEscapeBase extends AbstractBaseTest{
+public class LikeEscapeBase extends AbstractBaseTest {
 
     @Before
-    public void setUp() throws SQLException{
+    public void setUp() throws SQLException {
         delete(survey).execute();
         SQLInsertClause insert = insert(survey);
         insert.set(survey.id, 5).set(survey.name, "aaa").addBatch();
@@ -38,7 +38,7 @@ public void setUp() throws SQLException{
     }
 
     @After
-    public void tearDown() throws SQLException{
+    public void tearDown() throws SQLException {
         delete(survey).execute();
         insert(survey).values(1, "Hello World", "Hello").execute();
     }

File: querydsl-sql/src/test/java/com/querydsl/sql/OracleTemplatesTest.java
Patch:
@@ -28,7 +28,7 @@
 import com.querydsl.core.types.dsl.NumberPath;
 import com.querydsl.core.types.dsl.SimpleExpression;
 
-public class OracleTemplatesTest extends AbstractSQLTemplatesTest{
+public class OracleTemplatesTest extends AbstractSQLTemplatesTest {
 
     @Override
     protected SQLTemplates createTemplates() {

File: querydsl-sql/src/test/java/com/querydsl/sql/PostgreSQLTemplatesTest.java
Patch:
@@ -25,7 +25,7 @@
 import com.querydsl.core.types.dsl.NumberExpression;
 
 
-public class PostgreSQLTemplatesTest extends AbstractSQLTemplatesTest{
+public class PostgreSQLTemplatesTest extends AbstractSQLTemplatesTest {
 
     @Override
     protected SQLTemplates createTemplates() {

File: querydsl-sql/src/test/java/com/querydsl/sql/QueryMutabilityTest.java
Patch:
@@ -27,20 +27,20 @@
 import com.querydsl.core.QueryMutability;
 import com.querydsl.sql.domain.QSurvey;
 
-public class QueryMutabilityTest{
+public class QueryMutabilityTest {
 
     private static final QSurvey survey = new QSurvey("survey");
 
     private Connection connection;
 
     @Before
-    public void setUp() throws Exception{
+    public void setUp() throws Exception {
         Connections.initDerby();
         connection = Connections.getConnection();
     }
 
     @After
-    public void tearDown() throws SQLException{
+    public void tearDown() throws SQLException {
         Connections.close();
     }
 

File: querydsl-sql/src/test/java/com/querydsl/sql/SQLServer2005TemplatesTest.java
Patch:
@@ -23,7 +23,7 @@
 import com.querydsl.core.types.dsl.Expressions;
 import com.querydsl.core.types.dsl.NumberExpression;
 
-public class SQLServer2005TemplatesTest extends AbstractSQLTemplatesTest{
+public class SQLServer2005TemplatesTest extends AbstractSQLTemplatesTest {
 
     @Override
     @Test

File: querydsl-sql/src/test/java/com/querydsl/sql/SQLServerTemplatesTest.java
Patch:
@@ -26,7 +26,7 @@
 import com.querydsl.core.types.dsl.NumberExpression;
 
 
-public class SQLServerTemplatesTest extends AbstractSQLTemplatesTest{
+public class SQLServerTemplatesTest extends AbstractSQLTemplatesTest {
 
     @Override
     @Test

File: querydsl-sql/src/test/java/com/querydsl/sql/SQLiteTemplatesTest.java
Patch:
@@ -24,7 +24,7 @@
 import com.querydsl.core.types.dsl.Expressions;
 import com.querydsl.core.types.dsl.NumberExpression;
 
-public class SQLiteTemplatesTest extends AbstractSQLTemplatesTest{
+public class SQLiteTemplatesTest extends AbstractSQLTemplatesTest {
 
     @Override
     protected SQLTemplates createTemplates() {

File: querydsl-sql/src/test/java/com/querydsl/sql/SelectOracleBase.java
Patch:
@@ -118,7 +118,7 @@ public void ConnectByPrior4() throws SQLException {
     @Test
     @IncludeIn(ORACLE)
     @SkipForQuoted
-    public void SumOver() throws SQLException{
+    public void SumOver() throws SQLException {
 //        SQL> select deptno,
 //        2  ename,
 //        3  sal,

File: querydsl-sql/src/test/java/com/querydsl/sql/ddl/CreateTableClause.java
Patch:
@@ -195,7 +195,7 @@ public void execute() {
         logger.info(builder.toString());
 
         Statement stmt = null;
-        try{
+        try {
             stmt = connection.createStatement();
             stmt.execute(builder.toString());
 
@@ -213,7 +213,7 @@ public void execute() {
         } catch (SQLException e) {
             System.err.println(builder.toString());
             throw new QueryException(e.getMessage(), e);
-        }finally{
+        } finally {
             if (stmt != null) {
                 try {
                     stmt.close();

File: querydsl-sql/src/test/java/com/querydsl/sql/ddl/DropTableClause.java
Patch:
@@ -32,12 +32,12 @@ public DropTableClause(Connection conn, Configuration c, String table) {
     @SuppressWarnings("SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE")
     public void execute() {
         Statement stmt = null;
-        try{
+        try {
             stmt = connection.createStatement();
             stmt.execute("DROP TABLE " + table);
         } catch (SQLException e) {
             // do not rethrow
-        }finally{
+        } finally {
             if (stmt != null) {
                 try {
                     stmt.close();

File: querydsl-sql/src/test/java/com/querydsl/sql/types/TypeTest.java
Patch:
@@ -35,7 +35,7 @@
 
 import com.mysema.commons.lang.Pair;
 
-public class TypeTest implements InvocationHandler{
+public class TypeTest implements InvocationHandler {
 
     public enum Gender {
         MALE, FEMALE
@@ -81,7 +81,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
 
     @SuppressWarnings("unchecked")
     @Test
-    public void test() throws MalformedURLException, SQLException{
+    public void test() throws MalformedURLException, SQLException {
         List<Pair<?,?>> valueAndType = new ArrayList<Pair<?,?>>();
         valueAndType.add(Pair.of(new BigDecimal("1"), new BigDecimalType()));
         valueAndType.add(Pair.of(new BigInteger("2"), new BigIntegerType()));

File: querydsl-core/src/main/java/com/querydsl/core/group/GroupBy.java
Patch:
@@ -304,7 +304,7 @@ public static <K, V> AbstractGroupExpression<Pair<K, V>, SortedMap<K, V>> sorted
      * @param comparator comparator for the created TreeMap instances
      * @return wrapper expression
      */
-    public static <K, V, T> AbstractGroupExpression<Pair<K, V>, SortedMap<T, V>> sortedMap(GroupExpression<K, T> key, Expression<V> value, Comparator<? super K> comparator) {
+    public static <K, V, T> AbstractGroupExpression<Pair<K, V>, SortedMap<T, V>> sortedMap(GroupExpression<K, T> key, Expression<V> value, Comparator<? super T> comparator) {
         return sortedMap(key, new GOne<V>(value), comparator);
     }
 
@@ -316,7 +316,7 @@ public static <K, V, T> AbstractGroupExpression<Pair<K, V>, SortedMap<T, V>> sor
      * @param comparator comparator for the created TreeMap instances
      * @return wrapper expression
      */
-    public static <K, V, U> AbstractGroupExpression<Pair<K, V>, SortedMap<K, U>> sortedMap(Expression<K> key, GroupExpression<V, U> value, Comparator<? super U> comparator) {
+    public static <K, V, U> AbstractGroupExpression<Pair<K, V>, SortedMap<K, U>> sortedMap(Expression<K> key, GroupExpression<V, U> value, Comparator<? super K> comparator) {
         return sortedMap(new GOne<K>(key), value, comparator);
     }
 

File: querydsl-apt/src/main/java/com/querydsl/apt/hibernate/HibernateAnnotationProcessor.java
Patch:
@@ -40,7 +40,7 @@ protected Configuration createConfiguration(RoundEnvironment roundEnv) {
             Class<? extends Annotation> embeddable = Embeddable.class;
             Class<? extends Annotation> embedded = Embedded.class;
             Class<? extends Annotation> skip = Transient.class;
-            return new HibernateConfiguration(roundEnv, processingEnv.getOptions(), entity, superType,
+            return new HibernateConfiguration(roundEnv, processingEnv, processingEnv.getOptions(), entity, superType,
                     embeddable, embedded, skip);
         } catch (ClassNotFoundException e) {
             throw new RuntimeException(e);

File: querydsl-apt/src/main/java/com/querydsl/apt/hibernate/HibernateConfiguration.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.List;
 import java.util.Map;
 
+import javax.annotation.processing.ProcessingEnvironment;
 import javax.annotation.processing.RoundEnvironment;
 
 import com.querydsl.apt.jpa.JPAConfiguration;
@@ -34,13 +35,14 @@ public class HibernateConfiguration extends JPAConfiguration {
 
     public HibernateConfiguration(
             RoundEnvironment roundEnv,
+            ProcessingEnvironment processingEnv,
             Map<String,String> options,
             Class<? extends Annotation> entityAnn,
             Class<? extends Annotation> superTypeAnn,
             Class<? extends Annotation> embeddableAnn,
             Class<? extends Annotation> embeddedAnn,
             Class<? extends Annotation> skipAnn) throws ClassNotFoundException {
-        super(roundEnv, options, entityAnn, superTypeAnn, embeddableAnn, embeddedAnn, skipAnn);
+        super(roundEnv, processingEnv, options, entityAnn, superTypeAnn, embeddableAnn, embeddedAnn, skipAnn);
     }
 
     @SuppressWarnings("unchecked")

File: querydsl-apt/src/main/java/com/querydsl/apt/jpa/JPAAnnotationProcessor.java
Patch:
@@ -39,7 +39,7 @@ protected Configuration createConfiguration(RoundEnvironment roundEnv) {
         Class<? extends Annotation> embeddable = Embeddable.class;
         Class<? extends Annotation> embedded = Embedded.class;
         Class<? extends Annotation> skip = Transient.class;
-        return new JPAConfiguration(roundEnv, processingEnv.getOptions(),
+        return new JPAConfiguration(roundEnv, processingEnv, processingEnv.getOptions(),
                 entity, superType, embeddable, embedded, skip);
     }
 

File: querydsl-apt/src/main/java/com/querydsl/apt/jpa/JPAConfiguration.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.List;
 import java.util.Map;
 
+import javax.annotation.processing.ProcessingEnvironment;
 import javax.annotation.processing.RoundEnvironment;
 import javax.lang.model.element.*;
 import javax.lang.model.type.DeclaredType;
@@ -46,6 +47,7 @@ public class JPAConfiguration extends DefaultConfiguration {
     private final Types types;
 
     public JPAConfiguration(RoundEnvironment roundEnv,
+            ProcessingEnvironment processingEnv,
             Map<String,String> options,
             Class<? extends Annotation> entityAnn,
             Class<? extends Annotation> superTypeAnn,
@@ -55,8 +57,7 @@ public JPAConfiguration(RoundEnvironment roundEnv,
         super(roundEnv, options, Keywords.JPA, QueryEntities.class, entityAnn, superTypeAnn,
             embeddableAnn, embeddedAnn, skipAnn);
         this.annotations = getAnnotations();
-        // TODO replace with proper injection in Querydsl 4.0.0
-        this.types = AbstractQuerydslProcessor.types;
+        this.types = processingEnv.getTypeUtils();
         setStrictMode(true);
     }
 

File: querydsl-apt/src/main/java/com/querydsl/apt/roo/RooAnnotationProcessor.java
Patch:
@@ -47,7 +47,7 @@ protected Configuration createConfiguration(RoundEnvironment roundEnv) {
         Class<? extends Annotation> embeddable = Embeddable.class;
         Class<? extends Annotation> embedded = Embedded.class;
         Class<? extends Annotation> skip = Transient.class;
-        DefaultConfiguration conf = new JPAConfiguration(roundEnv, processingEnv.getOptions(),
+        DefaultConfiguration conf = new JPAConfiguration(roundEnv, processingEnv, processingEnv.getOptions(),
                 entity, superType, embeddable, embedded, skip);
         conf.setAlternativeEntityAnnotation(RooJpaActiveRecord.class);
         return conf;

File: querydsl-core/src/main/java/com/querydsl/core/group/GroupBy.java
Patch:
@@ -304,7 +304,7 @@ public static <K, V> AbstractGroupExpression<Pair<K, V>, SortedMap<K, V>> sorted
      * @param comparator comparator for the created TreeMap instances
      * @return wrapper expression
      */
-    public static <K, V, T> AbstractGroupExpression<Pair<K, V>, SortedMap<T, V>> sortedMap(GroupExpression<K, T> key, Expression<V> value, Comparator<? super K> comparator) {
+    public static <K, V, T> AbstractGroupExpression<Pair<K, V>, SortedMap<T, V>> sortedMap(GroupExpression<K, T> key, Expression<V> value, Comparator<? super T> comparator) {
         return sortedMap(key, new GOne<V>(value), comparator);
     }
 
@@ -316,7 +316,7 @@ public static <K, V, T> AbstractGroupExpression<Pair<K, V>, SortedMap<T, V>> sor
      * @param comparator comparator for the created TreeMap instances
      * @return wrapper expression
      */
-    public static <K, V, U> AbstractGroupExpression<Pair<K, V>, SortedMap<K, U>> sortedMap(Expression<K> key, GroupExpression<V, U> value, Comparator<? super U> comparator) {
+    public static <K, V, U> AbstractGroupExpression<Pair<K, V>, SortedMap<K, U>> sortedMap(Expression<K> key, GroupExpression<V, U> value, Comparator<? super K> comparator) {
         return sortedMap(new GOne<K>(key), value, comparator);
     }
 

File: querydsl-apt/src/main/java/com/querydsl/apt/hibernate/HibernateAnnotationProcessor.java
Patch:
@@ -40,7 +40,7 @@ protected Configuration createConfiguration(RoundEnvironment roundEnv) {
             Class<? extends Annotation> embeddable = Embeddable.class;
             Class<? extends Annotation> embedded = Embedded.class;
             Class<? extends Annotation> skip = Transient.class;
-            return new HibernateConfiguration(roundEnv, processingEnv.getOptions(), entity, superType,
+            return new HibernateConfiguration(roundEnv, processingEnv, processingEnv.getOptions(), entity, superType,
                     embeddable, embedded, skip);
         } catch (ClassNotFoundException e) {
             throw new RuntimeException(e);

File: querydsl-apt/src/main/java/com/querydsl/apt/hibernate/HibernateConfiguration.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.List;
 import java.util.Map;
 
+import javax.annotation.processing.ProcessingEnvironment;
 import javax.annotation.processing.RoundEnvironment;
 
 import com.querydsl.apt.jpa.JPAConfiguration;
@@ -34,13 +35,14 @@ public class HibernateConfiguration extends JPAConfiguration {
 
     public HibernateConfiguration(
             RoundEnvironment roundEnv,
+            ProcessingEnvironment processingEnv,
             Map<String,String> options,
             Class<? extends Annotation> entityAnn,
             Class<? extends Annotation> superTypeAnn,
             Class<? extends Annotation> embeddableAnn,
             Class<? extends Annotation> embeddedAnn,
             Class<? extends Annotation> skipAnn) throws ClassNotFoundException {
-        super(roundEnv, options, entityAnn, superTypeAnn, embeddableAnn, embeddedAnn, skipAnn);
+        super(roundEnv, processingEnv, options, entityAnn, superTypeAnn, embeddableAnn, embeddedAnn, skipAnn);
     }
 
     @SuppressWarnings("unchecked")

File: querydsl-apt/src/main/java/com/querydsl/apt/jpa/JPAAnnotationProcessor.java
Patch:
@@ -39,7 +39,7 @@ protected Configuration createConfiguration(RoundEnvironment roundEnv) {
         Class<? extends Annotation> embeddable = Embeddable.class;
         Class<? extends Annotation> embedded = Embedded.class;
         Class<? extends Annotation> skip = Transient.class;
-        return new JPAConfiguration(roundEnv, processingEnv.getOptions(),
+        return new JPAConfiguration(roundEnv, processingEnv, processingEnv.getOptions(),
                 entity, superType, embeddable, embedded, skip);
     }
 

File: querydsl-apt/src/main/java/com/querydsl/apt/jpa/JPAConfiguration.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.List;
 import java.util.Map;
 
+import javax.annotation.processing.ProcessingEnvironment;
 import javax.annotation.processing.RoundEnvironment;
 import javax.lang.model.element.*;
 import javax.lang.model.type.DeclaredType;
@@ -46,6 +47,7 @@ public class JPAConfiguration extends DefaultConfiguration {
     private final Types types;
 
     public JPAConfiguration(RoundEnvironment roundEnv,
+            ProcessingEnvironment processingEnv,
             Map<String,String> options,
             Class<? extends Annotation> entityAnn,
             Class<? extends Annotation> superTypeAnn,
@@ -55,8 +57,7 @@ public JPAConfiguration(RoundEnvironment roundEnv,
         super(roundEnv, options, Keywords.JPA, QueryEntities.class, entityAnn, superTypeAnn,
             embeddableAnn, embeddedAnn, skipAnn);
         this.annotations = getAnnotations();
-        // TODO replace with proper injection in Querydsl 4.0.0
-        this.types = AbstractQuerydslProcessor.types;
+        this.types = processingEnv.getTypeUtils();
         setStrictMode(true);
     }
 

File: querydsl-apt/src/main/java/com/querydsl/apt/roo/RooAnnotationProcessor.java
Patch:
@@ -47,7 +47,7 @@ protected Configuration createConfiguration(RoundEnvironment roundEnv) {
         Class<? extends Annotation> embeddable = Embeddable.class;
         Class<? extends Annotation> embedded = Embedded.class;
         Class<? extends Annotation> skip = Transient.class;
-        DefaultConfiguration conf = new JPAConfiguration(roundEnv, processingEnv.getOptions(),
+        DefaultConfiguration conf = new JPAConfiguration(roundEnv, processingEnv, processingEnv.getOptions(),
                 entity, superType, embeddable, embedded, skip);
         conf.setAlternativeEntityAnnotation(RooJpaActiveRecord.class);
         return conf;

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/DefaultNamingStrategyTest.java
Patch:
@@ -48,6 +48,7 @@ public void GetClassName() {
 
     @Test
     public void GetPropertyName() {
+        assertEquals("a", namingStrategy.getPropertyName("a", entityModel));
         assertEquals("whileCol", namingStrategy.getPropertyName("while", entityModel));
         assertEquals("name", namingStrategy.getPropertyName("name", entityModel));
         assertEquals("userId", namingStrategy.getPropertyName("user_id", entityModel));

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/MetaDataExporterTest.java
Patch:
@@ -65,6 +65,8 @@ public static void setUpClass() throws ClassNotFoundException, SQLException{
             // reserved words
             stmt.execute("create table reserved (id int, while int)");
 
+            stmt.execute("create table class (id int)");
+
             // underscore
             stmt.execute("create table underscore (e_id int, c_id int)");
 

File: querydsl-jdo/src/main/java/com/querydsl/jdo/AbstractJDOQuery.java
Patch:
@@ -34,7 +34,7 @@
 import com.querydsl.core.types.*;
 
 /**
- * Abstract base class for custom implementations of the JDOCommonQuery interface.
+ * Abstract base class for custom implementations of the {@link JDOQLQuery} interface.
  *
  * @author tiwe
  *

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/MetaDataExporterTest.java
Patch:
@@ -65,6 +65,8 @@ public static void setUpClass() throws ClassNotFoundException, SQLException{
             // reserved words
             stmt.execute("create table reserved (id int, while int)");
 
+            stmt.execute("create table class (id int)");
+
             // underscore
             stmt.execute("create table underscore (e_id int, c_id int)");
 

File: querydsl-maven-plugin/src/main/java/com/querydsl/maven/CompileMojo.java
Patch:
@@ -36,7 +36,7 @@
 import org.sonatype.plexus.build.incremental.BuildContext;
 
 /**
- * {@code CompileMojo} compiles the sources generated in the other tasks
+ * {@code CompileMojo} compiles the sources generated by other tasks
  *
  * @goal compile
  * @requiresDependencyResolution test

File: querydsl-maven-plugin/src/main/java/com/querydsl/maven/GenericExporterMojo.java
Patch:
@@ -16,7 +16,7 @@
 import com.querydsl.codegen.GenericExporter;
 
 /**
- * {@code GenericExporterMojo} calls the {@link GenericExporter} tool using the classpath of the module
+ * {@code GenericExporterMojo} calls {@link GenericExporter} using the classpath of the module
  * 
  * @goal generic-export
  * @requiresDependencyResolution test

File: querydsl-maven-plugin/src/main/java/com/querydsl/maven/JDOExporterMojo.java
Patch:
@@ -21,7 +21,7 @@
 import com.querydsl.codegen.GenericExporter;
 
 /**
- * {@code JDOExporterMojo} calls the {@link GenericExporter} tool using the classpath of the module
+ * {@code JDOExporterMojo} calls {@link GenericExporter} using the classpath of the module
  * 
  * @goal jdo-export
  * @requiresDependencyResolution test

File: querydsl-maven-plugin/src/main/java/com/querydsl/maven/JPAExporterMojo.java
Patch:
@@ -22,8 +22,7 @@
 import com.querydsl.codegen.GenericExporter;
 
 /**
- * {@code JPAExporterMojo} calls the {@link GenericExporter} tool using the classpath of the
- * module
+ * {@code JPAExporterMojo} calls {@link GenericExporter} using the classpath of the module
  *
  * @goal jpa-export
  * @requiresDependencyResolution test

File: querydsl-maven-plugin/src/main/java/com/querydsl/maven/JPATemporalAnnotationHelper.java
Patch:
@@ -19,7 +19,7 @@
 import javax.persistence.Temporal;
 
 /**
- * A {@link AnnotationHelper} that handles JPA {@link Temporal} annotation.
+ * An {@link AnnotationHelper} that handles JPA {@link Temporal} annotation.
  * 
  * @author dyorgio
  */

File: querydsl-maven-plugin/src/main/java/com/querydsl/maven/NumericMapping.java
Patch:
@@ -16,7 +16,7 @@
 import com.querydsl.sql.Configuration;
 
 /**
- * {@linkplain NumericMapping} is used to customize mappings of various numeric precisions to data types.
+ * {@code NumericMapping} customizes mappings of various numeric precisions to data types.
  *
  * @author tiwe
  *

File: querydsl-maven-plugin/src/main/java/com/querydsl/maven/RenameMapping.java
Patch:
@@ -17,7 +17,7 @@
 import com.querydsl.sql.Configuration;
 
 /**
- * {@linkplain RenameMapping} is used to override schemas, tables, columns and combinations of the three.
+ * {@code RenameMapping} overrides schemas, tables, columns and combinations of the three.
  *
  * @author tiwe
  */

File: querydsl-maven-plugin/src/main/java/com/querydsl/maven/TypeMapping.java
Patch:
@@ -17,7 +17,7 @@
 import com.querydsl.sql.types.Type;
 
 /**
- * {@linkplain TypeMapping} is used to customize the mapping from table + column to a type.
+ * {@code TypeMapping} customizes the mapping from table + column to a type.
  *
  * @author tiwe
  *

File: querydsl-collections/src/test/java/com/querydsl/collections/AbstractQueryTest.java
Patch:
@@ -50,7 +50,7 @@ public abstract class AbstractQueryTest {
 
     protected List<Integer> myInts = new ArrayList<Integer>();
 
-    protected TestQuery<Void> last;
+    protected TestQuery<?> last;
 
     
     @Before
@@ -68,7 +68,7 @@ protected List<Cat> cats(int size) {
         return cats;
     }
 
-    protected TestQuery<Void> query() {
+    protected TestQuery<?> query() {
         last = new TestQuery<Void>();
         return last;
     }

File: querydsl-collections/src/test/java/com/querydsl/collections/ECJEvaluatorFactoryTest.java
Patch:
@@ -12,7 +12,7 @@ public void Evaluator_Factory() {
                 CollQueryTemplates.DEFAULT,
                 new ECJEvaluatorFactory(getClass().getClassLoader()));
         QueryEngine queryEngine = new DefaultQueryEngine(evaluatorFactory);
-        CollQuery<Void> query = new CollQuery<Void>(queryEngine);
+        CollQuery<?> query = new CollQuery<Void>(queryEngine);
         query.from(cat, cats).select(cat.name).fetch();
     }
 

File: querydsl-collections/src/test/java/com/querydsl/collections/JacocoTest.java
Patch:
@@ -54,7 +54,7 @@ public void WithSimpleClass() {
         }
         CloneableKlasse vo = Alias.alias(CloneableKlasse.class, "vo");
         assertNotNull(vo);
-        CollQuery<Void> query = new CollQuery<Void>();
+        CollQuery<?> query = new CollQuery<Void>();
         final EntityPathBase<CloneableKlasse> fromVo = Alias.$(vo);
         assertNotNull(fromVo);
         query.from(fromVo, vos);

File: querydsl-collections/src/test/java/com/querydsl/collections/JodaTimeTemplatesTest.java
Patch:
@@ -14,7 +14,7 @@
 
 public class JodaTimeTemplatesTest {
     
-    private CollQuery<Void> query = new CollQuery<Void>(JodaTimeTemplates.DEFAULT);
+    private CollQuery<?> query = new CollQuery<Void>(JodaTimeTemplates.DEFAULT);
     
     @Test
     public void DateTime() {

File: querydsl-collections/src/test/java/com/querydsl/collections/OrderTest.java
Patch:
@@ -49,7 +49,7 @@ public void test2() {
     
     @Test
     public void With_count() {
-        CollQuery<Void> q = new CollQuery<Void>();
+        CollQuery<?> q = new CollQuery<Void>();
         q.from(cat, cats);
         long size = q.distinct().fetchCount();
         assertTrue(size > 0);

File: querydsl-collections/src/test/java/com/querydsl/collections/PagingTest.java
Patch:
@@ -60,8 +60,8 @@ private void assertResultSize(int total, int size, QueryModifiers modifiers) {
         assertEquals(size, IteratorAdapter.asList(createQuery(modifiers).select(var).iterate()).size());
     }
 
-    private CollQuery<Void> createQuery(QueryModifiers modifiers) {
-        CollQuery<Void> query = new CollQuery<Void>().from(var, ints);
+    private CollQuery<?> createQuery(QueryModifiers modifiers) {
+        CollQuery<?> query = new CollQuery<Void>().from(var, ints);
         if (modifiers != null) {
             query.restrict(modifiers);
         }

File: querydsl-collections/src/test/java/com/querydsl/collections/QueryMutabilityTest.java
Patch:
@@ -28,7 +28,7 @@ public void test() throws SecurityException, IllegalArgumentException,
             NoSuchMethodException, IllegalAccessException,
             InvocationTargetException, IOException {
         QCat cat = QCat.cat;
-        CollQuery<Void> query = new CollQuery<Void>();
+        CollQuery<?> query = new CollQuery<Void>();
         query.from(cat, Collections.<Cat> emptyList());
         new QueryMutability(query).test(cat.id, cat.name);
 

File: querydsl-jdo/src/main/java/com/querydsl/jdo/JDOQueryFactory.java
Patch:
@@ -26,7 +26,7 @@
  * @author tiwe
  *
  */
-public class JDOQueryFactory implements QueryFactory<JDOQuery<Void>> {
+public class JDOQueryFactory implements QueryFactory<JDOQuery<?>> {
 
     private final Provider<PersistenceManager> persistenceManager;
 
@@ -38,11 +38,11 @@ public JDODeleteClause delete(EntityPath<?> path) {
         return new JDODeleteClause(persistenceManager.get(), path);
     }
 
-    public JDOQuery<Void> from(EntityPath<?> from) {
+    public JDOQuery<?> from(EntityPath<?> from) {
         return query().from(from);
     }
 
-    public JDOQuery<Void> query() {
+    public JDOQuery<?> query() {
         return new JDOQuery<Void>(persistenceManager.get());
     }
 

File: querydsl-jdo/src/test/java/com/querydsl/jdo/BasicsTest.java
Patch:
@@ -47,7 +47,7 @@ public class BasicsTest extends AbstractJDOTest {
 
     @Test
     public void Serialization() throws IOException{
-        JDOQuery<Void> query = query();
+        JDOQuery<?> query = query();
 
         assertEquals("FROM com.querydsl.jdo.test.domain.Product", query.from(product).toString());
         assertEquals("FROM com.querydsl.jdo.test.domain.Product" +
@@ -60,7 +60,7 @@ public void Serialization() throws IOException{
 
     @Test
     public void SubQuerySerialization() throws IOException{
-        JDOQuery<Void> query = query();
+        JDOQuery<?> query = query();
 
         assertEquals("FROM com.querydsl.jdo.test.domain.Product", query.from(product).toString());
         assertEquals("FROM com.querydsl.jdo.test.domain.Product" +
@@ -114,7 +114,7 @@ public void Unique_Result_Throws_Exception_On_Multiple_Results() {
 
     @Test
     public void SimpleTest() throws IOException{
-        JDOQuery<Void> query = new JDOQuery<Void>(pm, templates, false);
+        JDOQuery<?> query = new JDOQuery<Void>(pm, templates, false);
         assertEquals("Sony Discman", query.from(product).where(product.name.eq("Sony Discman"))
                 .select(product.name).fetchOne());
         query.close();

File: querydsl-jdo/src/test/java/com/querydsl/jdo/FetchPlanTest.java
Patch:
@@ -34,7 +34,7 @@
 
 public class FetchPlanTest extends AbstractJDOTest{
     
-    private JDOQuery<Void> query;
+    private JDOQuery<?> query;
     
     @After
     public void tearDown() {

File: querydsl-jdo/src/test/java/com/querydsl/jdo/JDOSQLQueryTest.java
Patch:
@@ -44,7 +44,7 @@ public class JDOSQLQueryTest extends AbstractJDOTest{
     
     private final SProduct product = SProduct.product;
     
-    protected JDOSQLQuery<Void> sql() {
+    protected JDOSQLQuery<?> sql() {
         return new JDOSQLQuery<Void>(pm, sqlTemplates);
     }
 

File: querydsl-jdo/src/test/java/com/querydsl/jdo/QueryMutabilityTest.java
Patch:
@@ -30,15 +30,15 @@ public void QueryMutability() throws IOException, SecurityException,
             IllegalArgumentException, NoSuchMethodException,
             IllegalAccessException, InvocationTargetException {
         QProduct product = QProduct.product;
-        JDOQuery<Void> query = query().from(product);
+        JDOQuery<?> query = query().from(product);
         new QueryMutability(query).test(product.name, product.description);
     }
 
     @Test
     public void Clone() {
         QProduct product = QProduct.product;
-        JDOQuery<Void> query = new JDOQuery<Void>().from(product).where(product.name.isNotNull());
-        JDOQuery<Void> query2 = query.clone(pm);
+        JDOQuery<?> query = new JDOQuery<Void>().from(product).where(product.name.isNotNull());
+        JDOQuery<?> query2 = query.clone(pm);
         assertEquals(query.getMetadata().getJoins(), query2.getMetadata().getJoins());
         assertEquals(query.getMetadata().getWhere(), query2.getMetadata().getWhere());
         query2.select(product).fetch();

File: querydsl-jdo/src/test/java/com/querydsl/jdo/serialization/AbstractTest.java
Patch:
@@ -21,7 +21,7 @@
 
 public abstract class AbstractTest {
 
-    protected JDOQuery<Void> query() {
+    protected JDOQuery<?> query() {
         return new JDOQuery<Void>();
     }
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPQLQueryFactory.java
Patch:
@@ -26,7 +26,7 @@
  * @author tiwe
  *
  */
-public interface JPQLQueryFactory extends QueryFactory<JPQLQuery<Void>> {
+public interface JPQLQueryFactory extends QueryFactory<JPQLQuery<?>> {
 
     /**
      * Create a new DELETE clause
@@ -57,7 +57,7 @@ public interface JPQLQueryFactory extends QueryFactory<JPQLQuery<Void>> {
      * @param from
      * @return
      */
-    JPQLQuery<Void> from(EntityPath<?> from);
+    JPQLQuery<?> from(EntityPath<?> from);
     
     /**
      * Create a new UPDATE clause

File: querydsl-jpa/src/main/java/com/querydsl/jpa/hibernate/HibernateQueryFactory.java
Patch:
@@ -59,15 +59,15 @@ public HibernateQuery<Tuple> select(Expression<?>... exprs) {
         return query().select(exprs);
     }
 
-    public HibernateQuery<Void> from(EntityPath<?> from) {
+    public HibernateQuery<?> from(EntityPath<?> from) {
         return query().from(from);
     }
 
     public HibernateUpdateClause update(EntityPath<?> path) {
         return new HibernateUpdateClause(session.get(), path, templates);
     }
 
-    public HibernateQuery<Void> query() {
+    public HibernateQuery<?> query() {
         return new HibernateQuery<Void>(session.get(), templates);
     }
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/JPAQueryFactory.java
Patch:
@@ -66,7 +66,7 @@ public JPAQuery<Tuple> select(Expression<?>... exprs) {
     }
 
     @Override
-    public JPAQuery<Void> from(EntityPath<?> from) {
+    public JPAQuery<?> from(EntityPath<?> from) {
         return query().from(from);
     }
 
@@ -80,7 +80,7 @@ public JPAUpdateClause update(EntityPath<?> path) {
     }
 
     @Override
-    public JPAQuery<Void> query() {
+    public JPAQuery<?> query() {
         if (templates != null) {
             return new JPAQuery<Void>(entityManager.get(), templates);
         } else {

File: querydsl-jpa/src/test/java/PackagelessEntityTest.java
Patch:
@@ -25,8 +25,8 @@ public class PackagelessEntityTest {
     @SuppressWarnings("unchecked")
     @Test
     public void PackageLess_Path() {
-        JPAQuery<Void> query = new JPAQuery<Void>();
-        PathBuilder builder = new PathBuilder(PackagelessEntityTest.class,"entity");
+        JPAQuery<?> query = new JPAQuery<Void>();
+        PathBuilder<PackagelessEntityTest> builder = new PathBuilder(PackagelessEntityTest.class,"entity");
         query.from(builder);
         assertEquals("select entity\nfrom PackagelessEntityTest entity", query.toString());
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/AbstractQueryTest.java
Patch:
@@ -21,11 +21,11 @@
 
 public abstract class AbstractQueryTest implements Constants {
 
-    protected QueryHelper<Void> query() {
+    protected QueryHelper<?> query() {
         return new QueryHelper<Void>(HQLTemplates.DEFAULT);
     }
 
-    protected JPAQuery<Void> sub() {
+    protected JPAQuery<?> sub() {
         return new JPAQuery<Void>();
     }
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/AbstractSQLTest.java
Patch:
@@ -42,7 +42,7 @@ public CatDTO(Cat cat) {
 
     }
 
-    protected SQLQuery<Void> sq() {
+    protected SQLQuery<?> sq() {
         return new SQLQuery<Void>();
     }
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/HibernateBase.java
Patch:
@@ -53,12 +53,12 @@ public class HibernateBase extends AbstractJPATest implements HibernateTest {
     private Session session;
 
     @Override
-    protected HibernateQuery<Void> query() {
+    protected HibernateQuery<?> query() {
         return new HibernateQuery<Void>(session, getTemplates());
     }
 
     @Override
-    protected HibernateQuery<Void> testQuery() {
+    protected HibernateQuery<?> testQuery() {
         return new HibernateQuery<Void>(new DefaultSessionHolder(session),
                 getTemplates(), new DefaultQueryMetadata());
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/HibernateSQLBase.java
Patch:
@@ -46,7 +46,7 @@ public class HibernateSQLBase extends AbstractSQLTest implements HibernateTest {
     private Session session;
 
     @Override
-    protected HibernateSQLQuery<Void> query() {
+    protected HibernateSQLQuery<?> query() {
         return new HibernateSQLQuery<Void>(session, templates);
     }
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/IntegrationBase.java
Patch:
@@ -43,7 +43,7 @@ public class IntegrationBase extends ParsingTest implements HibernateTest {
     private Session session;
 
     @Override
-    protected QueryHelper<Void> query() {
+    protected QueryHelper<?> query() {
         return new QueryHelper<Void>(HQLTemplates.DEFAULT) {
             @Override
             public void parse() throws RecognitionException, TokenStreamException {
@@ -102,7 +102,7 @@ public void Scroll() {
         session.save(new Cat("Steve",11));
 
         QCat cat = QCat.cat;
-        HibernateQuery<Void> query = new HibernateQuery<Void>(session);
+        HibernateQuery<?> query = new HibernateQuery<Void>(session);
         ScrollableResults results = query.from(cat).select(cat).scroll(ScrollMode.SCROLL_INSENSITIVE);
         while (results.next()) {
             System.out.println(results.get(0));

File: querydsl-jpa/src/test/java/com/querydsl/jpa/JPABase.java
Patch:
@@ -61,7 +61,7 @@ public class JPABase extends AbstractJPATest implements JPATest {
     private EntityManager entityManager;
 
     @Override
-    protected JPAQuery<Void> query() {
+    protected JPAQuery<?> query() {
         return new JPAQuery<Void>(entityManager);
     }
 
@@ -70,7 +70,7 @@ protected JPADeleteClause delete(EntityPath<?> path) {
     }
 
     @Override
-    protected JPAQuery<Void> testQuery() {
+    protected JPAQuery<?> testQuery() {
         return new JPAQuery<Void>(entityManager, new DefaultQueryMetadata());
     }
 
@@ -131,7 +131,7 @@ public void Delete_Where_SubQuery2() {
         QChild child = QChild.child;
         QParent parent = QParent.parent;
 
-        JPAQuery<Void> subQuery = new JPAQuery<Void>()
+        JPAQuery<?> subQuery = new JPAQuery<Void>()
             .from(parent)
             .where(parent.id.eq(2),
                     child.parent.eq(parent));

File: querydsl-jpa/src/test/java/com/querydsl/jpa/JPAIntegrationBase.java
Patch:
@@ -41,7 +41,7 @@ public class JPAIntegrationBase extends ParsingTest implements JPATest {
     private JPQLTemplates templates;
     
     @Override
-    protected QueryHelper<Void> query() {
+    protected QueryHelper<?> query() {
         return new QueryHelper<Void>(templates) {
             @Override
             public void parse() throws RecognitionException, TokenStreamException {

File: querydsl-jpa/src/test/java/com/querydsl/jpa/JPASQLBase.java
Patch:
@@ -48,7 +48,7 @@ public class JPASQLBase extends AbstractSQLTest implements JPATest {
     private EntityManager entityManager;
 
     @Override
-    protected JPASQLQuery<Void> query() {
+    protected JPASQLQuery<?> query() {
         return new JPASQLQuery<Void>(entityManager, templates);
     }
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/JoinTest.java
Patch:
@@ -35,8 +35,8 @@ public interface Entity{
     private final Entity alias = Alias.alias(Entity.class);
 
     private final StringPath path = Expressions.stringPath("path");
-    private final JPAQuery<Void> subQuery = new JPAQuery<Void>();
-    private final HibernateQuery<Void> query = new HibernateQuery<Void>(new DummySessionHolder(), HQLTemplates.DEFAULT);
+    private final JPAQuery<?> subQuery = new JPAQuery<Void>();
+    private final HibernateQuery<?> query = new HibernateQuery<Void>(new DummySessionHolder(), HQLTemplates.DEFAULT);
 
     @Test
     public void SubQuery_InnerJoin() {

File: querydsl-jpa/src/test/java/com/querydsl/jpa/OrderHelperTest.java
Patch:
@@ -22,7 +22,7 @@ public void Order() {
         order.add("previousProject.customer.company.name");
         order.add("department.name");
 
-        JPAQuery<Void> query = new JPAQuery<Void>();
+        JPAQuery<?> query = new JPAQuery<Void>();
         query.from(entity);
         OrderHelper.orderBy(query, entity, order);
         assertEquals("select project\n" +

File: querydsl-jpa/src/test/java/com/querydsl/jpa/QueryPerformanceTest.java
Patch:
@@ -41,7 +41,7 @@ public static void tearDownClass() {
         Mode.target.remove();
     }
 
-    private JPAQuery<Void> query() {
+    private JPAQuery<?> query() {
         return new JPAQuery<Void>(entityManager);
     }
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/RelationalFunctionCallTest.java
Patch:
@@ -46,7 +46,7 @@ public void FunctionCall() {
         QSurvey table = new QSurvey("SURVEY");
         RelationalFunctionCall<String> func = SQLExpressions.relationalFunctionCall(String.class, "TableValuedFunction", "parameter");
         PathBuilder<String> funcAlias = new PathBuilder<String>(String.class, "tokFunc");
-        SQLQuery<Void> sq = new SQLQuery<Void>();
+        SQLQuery<?> sq = new SQLQuery<Void>();
         SubQueryExpression<?> expr = sq.from(table)
             .join(func, funcAlias).on(table.name.like(funcAlias.getString("prop")).not()).select(table.name);
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/SerializationBase.java
Patch:
@@ -39,7 +39,7 @@ public class SerializationBase implements JPATest {
     @Test
     public void test() throws IOException, ClassNotFoundException{
         // create query
-        JPAQuery<Void> query = query();
+        JPAQuery<?> query = query();
         query.from(cat).where(cat.name.eq("Kate")).select(cat).fetch();
         
         QueryMetadata metadata = query.getMetadata();
@@ -54,7 +54,7 @@ public void test() throws IOException, ClassNotFoundException{
         assertEquals(metadata.getProjection(), metadata2.getProjection());
         
         // create new query
-        JPAQuery<Void> query2 = new JPAQuery<Void>(entityManager, metadata2);
+        JPAQuery<?> query2 = new JPAQuery<Void>(entityManager, metadata2);
         assertEquals("select cat\nfrom Cat cat\nwhere cat.name = ?1", query2.toString());
         query2.select(cat).fetch();
     }
@@ -90,7 +90,7 @@ public void Any_Serialized2() throws Exception {
         }
     }
 
-    private JPAQuery<Void> query() {
+    private JPAQuery<?> query() {
         return new JPAQuery<Void>(entityManager);
     }
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/SubQueryTest.java
Patch:
@@ -26,14 +26,14 @@ public class SubQueryTest extends AbstractQueryTest{
 
     @Test
     public void Single_Source() {
-        JPAQuery<Void> query = sub();
+        JPAQuery<?> query = sub();
         query.from(cat);
         assertEquals("select cat\nfrom Cat cat", query.toString());
     }
     
     @Test
     public void Multiple_Sources() {
-        JPAQuery<Void> query = sub();
+        JPAQuery<?> query = sub();
         query.from(cat);
         query.from(fatcat);
         assertEquals("select cat\nfrom Cat cat, Cat fatcat", 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/TupleTest.java
Patch:
@@ -42,7 +42,7 @@ public void test() {
                     "(select cat.mate, max(cat.birthdate) from Cat cat group by cat.mate))", subQuery);
     }
 
-    private HibernateQuery<Void> subQuery() {
+    private HibernateQuery<?> subQuery() {
         return new HibernateQuery<Void>();
     }
     

File: querydsl-jpa/src/test/java/com/querydsl/jpa/UniqueResultsTest.java
Patch:
@@ -44,7 +44,7 @@ public void test() {
         assertEquals(Long.valueOf(3), query().from(cat).select(cat.count()).fetchOne());
     }
 
-    private HibernateQuery<Void> query() {
+    private HibernateQuery<?> query() {
         return new HibernateQuery<Void>(session);
     }
 

File: querydsl-sql-codegen/src/test/java/com/querydsl/sql/codegen/CustomTypesTest.java
Patch:
@@ -92,7 +92,7 @@ public void Insert_Query_Update() {
         assertEquals(1l, insert.execute());
 
         // query
-        SQLQuery<Void> query = new SQLQuery<Void>(connection, configuration);
+        SQLQuery<?> query = new SQLQuery<Void>(connection, configuration);
         assertEquals(Gender.MALE, query.from(person).where(person.id.eq(10)).select(person.gender).fetchOne());
 
         // update

File: querydsl-sql/src/main/java/com/querydsl/sql/AbstractSQLQueryFactory.java
Patch:
@@ -31,7 +31,7 @@
  * @author tiwe
  *
  */
-public abstract class AbstractSQLQueryFactory<Q extends SQLCommonQuery<Q>> implements SQLCommonQueryFactory<Q,
+public abstract class AbstractSQLQueryFactory<Q extends SQLCommonQuery<?>> implements SQLCommonQueryFactory<Q,
     SQLDeleteClause, SQLUpdateClause, SQLInsertClause, SQLMergeClause> {
 
     protected final Configuration configuration;

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLQueryFactory.java
Patch:
@@ -25,7 +25,7 @@
  * @author tiwe
  *
  */
-public class SQLQueryFactory extends AbstractSQLQueryFactory<SQLQuery<Void>> {
+public class SQLQueryFactory extends AbstractSQLQueryFactory<SQLQuery<?>> {
 
     static class DataSourceProvider implements Provider<Connection> {
 
@@ -59,7 +59,7 @@ public SQLQueryFactory(Configuration configuration, DataSource dataSource) {
     }
 
     @Override
-    public SQLQuery<Void> query() {
+    public SQLQuery<?> query() {
         return new SQLQuery<Void>(connection.get(), configuration);
     }
 

File: querydsl-sql/src/main/java/com/querydsl/sql/mssql/SQLServerQueryFactory.java
Patch:
@@ -28,7 +28,7 @@
  * @author tiwe
  *
  */
-public class SQLServerQueryFactory extends AbstractSQLQueryFactory<SQLServerQuery<Void>> {
+public class SQLServerQueryFactory extends AbstractSQLQueryFactory<SQLServerQuery<?>> {
 
     public SQLServerQueryFactory(Configuration configuration, Provider<Connection> connection) {
         super(configuration, connection);
@@ -42,7 +42,7 @@ public SQLServerQueryFactory(SQLTemplates templates, Provider<Connection> connec
         this(new Configuration(templates), connection);
     }
 
-    public SQLServerQuery<Void> query() {
+    public SQLServerQuery<?> query() {
         return new SQLServerQuery<Void>(connection.get(), configuration);
     }
 

File: querydsl-sql/src/main/java/com/querydsl/sql/mysql/MySQLQueryFactory.java
Patch:
@@ -29,7 +29,7 @@
  * @author tiwe
  *
  */
-public class MySQLQueryFactory extends AbstractSQLQueryFactory<MySQLQuery<Void>> {
+public class MySQLQueryFactory extends AbstractSQLQueryFactory<MySQLQuery<?>> {
 
     public MySQLQueryFactory(Configuration configuration, Provider<Connection> connection) {
         super(configuration, connection);
@@ -61,7 +61,7 @@ public SQLInsertClause insertOnDuplicateKeyUpdate(RelationalPath<?> entity, Expr
         return insert;
     }
     
-    public MySQLQuery<Void> query() {
+    public MySQLQuery<?> query() {
         return new MySQLQuery<Void>(connection.get(), configuration);
     }
 

File: querydsl-sql/src/main/java/com/querydsl/sql/oracle/OracleQueryFactory.java
Patch:
@@ -28,7 +28,7 @@
  * @author tiwe
  *
  */
-public class OracleQueryFactory extends AbstractSQLQueryFactory<OracleQuery<Void>> {
+public class OracleQueryFactory extends AbstractSQLQueryFactory<OracleQuery<?>> {
 
     public OracleQueryFactory(Configuration configuration, Provider<Connection> connection) {
         super(configuration, connection);
@@ -42,7 +42,7 @@ public OracleQueryFactory(SQLTemplates templates, Provider<Connection> connectio
         this(new Configuration(templates), connection);
     }
 
-    public OracleQuery<Void> query() {
+    public OracleQuery<?> query() {
         return new OracleQuery<Void>(connection.get(), configuration);
     }
 

File: querydsl-sql/src/main/java/com/querydsl/sql/postgresql/PostgreSQLQueryFactory.java
Patch:
@@ -25,7 +25,7 @@
  * @author tiwe
  *
  */
-public class PostgreSQLQueryFactory extends AbstractSQLQueryFactory<PostgreSQLQuery<Void>> {
+public class PostgreSQLQueryFactory extends AbstractSQLQueryFactory<PostgreSQLQuery<?>> {
 
     public PostgreSQLQueryFactory(Configuration configuration, Provider<Connection> connection) {
         super(configuration, connection);
@@ -39,7 +39,7 @@ public PostgreSQLQueryFactory(SQLTemplates templates, Provider<Connection> conne
         this(new Configuration(templates), connection);
     }
 
-    public PostgreSQLQuery<Void> query() {
+    public PostgreSQLQuery<?> query() {
         return new PostgreSQLQuery<Void>(connection.get(), configuration);
     }
 

File: querydsl-sql/src/main/java/com/querydsl/sql/teradata/TeradataQueryFactory.java
Patch:
@@ -28,7 +28,7 @@
  * @author tiwe
  *
  */
-public class TeradataQueryFactory extends AbstractSQLQueryFactory<TeradataQuery<Void>> {
+public class TeradataQueryFactory extends AbstractSQLQueryFactory<TeradataQuery<?>> {
 
     public TeradataQueryFactory(Configuration configuration, Provider<Connection> connection) {
         super(configuration, connection);
@@ -43,7 +43,7 @@ public TeradataQueryFactory(SQLTemplates templates, Provider<Connection> connect
     }
 
     @Override
-    public TeradataQuery<Void> query() {
+    public TeradataQuery<?> query() {
         return new TeradataQuery<Void>(connection.get(), configuration);
     }
 

File: querydsl-sql/src/test/java/com/querydsl/sql/AbstractSQLTemplatesTest.java
Patch:
@@ -34,7 +34,7 @@ public abstract class AbstractSQLTemplatesTest {
 
     private SQLTemplates templates;
 
-    protected SQLQuery<Void> query;
+    protected SQLQuery<?> query;
 
     protected abstract SQLTemplates createTemplates();
 
@@ -91,7 +91,7 @@ public void InnerJoin() {
         assertEquals("from SURVEY survey1 inner join SURVEY survey2", query.toString());
     }
 
-    protected SQLQuery<Void> sq() {
+    protected SQLQuery<?> sq() {
         return new SQLQuery<Void>();
     }
 

File: querydsl-sql/src/test/java/com/querydsl/sql/DeleteBase.java
Patch:
@@ -105,7 +105,7 @@ public void Delete_with_SubQuery_exists_Params() {
         QEmployee employee = new QEmployee("e");
 
         Param<Integer> param = new Param<Integer>(Integer.class, "param");
-        SQLQuery<Void> sq = query().from(employee).where(employee.id.eq(param));
+        SQLQuery<?> sq = query().from(employee).where(employee.id.eq(param));
         sq.set(param, -12478923);
 
         SQLDeleteClause delete = delete(survey1);

File: querydsl-sql/src/test/java/com/querydsl/sql/ExtendedSQLTest.java
Patch:
@@ -83,7 +83,7 @@ public void test() {
 
         QAuthor author = QAuthor.author;
         QBook book = QBook.book;
-        MySQLQuery<Void> query = new MySQLQuery<Void>(null);
+        MySQLQuery<?> query = new MySQLQuery<Void>(null);
         query.from(author)
            .join(book).on(author.id.eq(book.authorId))
            .where(book.language.eq("DE"), book.published.eq(new Date()))

File: querydsl-sql/src/test/java/com/querydsl/sql/InsertBase.java
Patch:
@@ -325,7 +325,7 @@ public void Insert_With_SubQuery3() {
     @ExcludeIn(FIREBIRD) // too slow
     public void Insert_With_SubQuery_Params() {
         Param<Integer> param = new Param<Integer>(Integer.class, "param");
-        SQLQuery<Void> sq = query().from(survey2);
+        SQLQuery<?> sq = query().from(survey2);
         sq.set(param, 20);
 
         int count = (int)query().from(survey).fetchCount();

File: querydsl-sql/src/test/java/com/querydsl/sql/JoinUsageTest.java
Patch:
@@ -24,7 +24,7 @@ public class JoinUsageTest {
     @Ignore
     public void Join_Already_Declared() {
         QSurvey survey = QSurvey.survey;
-        SQLQuery<Void> subQuery = new SQLQuery<Void>();
+        SQLQuery<?> subQuery = new SQLQuery<Void>();
         subQuery.from(survey).fullJoin(survey);
     }
 

File: querydsl-sql/src/test/java/com/querydsl/sql/QueryMutabilityTest.java
Patch:
@@ -48,16 +48,16 @@ public void tearDown() throws SQLException{
     public void test() throws IOException, SecurityException,
             IllegalArgumentException, NoSuchMethodException,
             IllegalAccessException, InvocationTargetException {
-        SQLQuery<Void> query = new SQLQuery<Void>(connection, new DerbyTemplates());
+        SQLQuery<?> query = new SQLQuery<Void>(connection, new DerbyTemplates());
         query.from(survey);
         query.addListener(new TestLoggingListener());
         new QueryMutability(query).test(survey.id, survey.name);
     }
 
     @Test
     public void Clone() {
-        SQLQuery<Void> query = new SQLQuery<Void>(new DerbyTemplates()).from(survey);
-        SQLQuery<Void> query2 = query.clone(connection);
+        SQLQuery<?> query = new SQLQuery<Void>(new DerbyTemplates()).from(survey);
+        SQLQuery<?> query2 = query.clone(connection);
         assertEquals(query.getMetadata().getJoins(), query2.getMetadata().getJoins());
         assertEquals(query.getMetadata().getWhere(), query2.getMetadata().getWhere());
         query2.select(survey.id).fetch();

File: querydsl-sql/src/test/java/com/querydsl/sql/RelationalFunctionCallTest.java
Patch:
@@ -50,7 +50,7 @@ public TokenizeFunction(String alias, String... tokens) {
     public void Validation() {
         QSurvey survey = QSurvey.survey;
         TokenizeFunction func = new TokenizeFunction("func", "a", "b");
-        SQLQuery<Void> sub = new SQLQuery<Void>().from(func.as(func.alias)).where(survey.name.like(func.token));
+        SQLQuery<?> sub = new SQLQuery<Void>().from(func.as(func.alias)).where(survey.name.like(func.token));
         System.out.println(sub);
         
     }

File: querydsl-sql/src/test/java/com/querydsl/sql/SQLBindingsTest.java
Patch:
@@ -14,7 +14,7 @@ public class SQLBindingsTest {
 
     private QSurvey survey = QSurvey.survey;
 
-    private SQLQuery<Void> query = new SQLQuery<Void>(SQLTemplates.DEFAULT);
+    private SQLQuery<?> query = new SQLQuery<Void>(SQLTemplates.DEFAULT);
 
     @Test
     public void Empty() {

File: querydsl-sql/src/test/java/com/querydsl/sql/SelectMySQLBase.java
Patch:
@@ -11,7 +11,7 @@
 
 public class SelectMySQLBase extends AbstractBaseTest {
 
-    protected MySQLQuery<Void> mysqlQuery() {
+    protected MySQLQuery<?> mysqlQuery() {
         return new MySQLQuery<Void>(connection, configuration);
     }
 

File: querydsl-sql/src/test/java/com/querydsl/sql/SelectOracleBase.java
Patch:
@@ -20,7 +20,7 @@ public class SelectOracleBase extends AbstractBaseTest {
 
     private static final Logger logger = LoggerFactory.getLogger(AbstractSQLQuery.class);
 
-    protected OracleQuery<Void> oracleQuery() {
+    protected OracleQuery<?> oracleQuery() {
         return new OracleQuery<Void>(connection, configuration) {
             @Override
             protected SQLSerializer serialize(boolean forCountRow) {

File: querydsl-sql/src/test/java/com/querydsl/sql/SubqueriesBase.java
Patch:
@@ -99,7 +99,7 @@ public void SubQuery_LeftJoin() {
     @ExcludeIn({MYSQL, POSTGRESQL, DERBY, SQLSERVER, TERADATA})
     public void SubQuery_Params() {
         Param<String> aParam = new Param<String>(String.class, "param");
-        SQLQuery<Void> subQuery = new SQLQuery<Void>().from(employee).where(employee.firstname.eq(aParam));
+        SQLQuery<?> subQuery = new SQLQuery<Void>().from(employee).where(employee.firstname.eq(aParam));
         subQuery.set(aParam, "Mike");
 
         assertEquals(1, query().from(subQuery.select(Wildcard.all)).fetchCount());
@@ -130,7 +130,7 @@ public void SubQuery_with_Alias2() {
     @Test
     @SkipForQuoted
     public void SubQuerySerialization() {
-        SQLQuery<Void> query = query();
+        SQLQuery<?> query = query();
         query.from(survey);
         assertEquals("from SURVEY s", query.toString());
 

File: querydsl-sql/src/test/java/com/querydsl/sql/UnionBase.java
Patch:
@@ -71,7 +71,7 @@ public void Union_Multiple_Columns() throws SQLException {
     public void Union_Multiple_Columns2() throws SQLException {
         SubQueryExpression<Tuple> sq1 = query().from(employee).select(employee.firstname, employee.lastname);
         SubQueryExpression<Tuple> sq2 = query().from(employee).select(employee.firstname, employee.lastname);
-        SQLQuery<Void> query = query();
+        SQLQuery<?> query = query();
         query.union(sq1, sq2);
         List<String> list = query.select(employee.firstname).fetch();
         assertFalse(list.isEmpty());
@@ -86,7 +86,7 @@ public void Union_Multiple_Columns2() throws SQLException {
     public void Union_Multiple_Columns3() throws SQLException {
         SubQueryExpression<Tuple> sq1 = query().from(employee).select(employee.firstname, employee.lastname);
         SubQueryExpression<Tuple> sq2 = query().from(employee).select(employee.firstname, employee.lastname);
-        SQLQuery<Void> query = query();
+        SQLQuery<?> query = query();
         query.union(sq1, sq2);
         List<Tuple> list = query.select(employee.lastname, employee.firstname).fetch();
         assertFalse(list.isEmpty());
@@ -247,7 +247,7 @@ public void Union_Clone() {
         SubQueryExpression<Employee> sq2 = query().from(employee)
                 .select(Projections.constructor(Employee.class, employee.id.as(idAlias)));
 
-        SQLQuery<Void> query = query();
+        SQLQuery<?> query = query();
         query.union(sq1, sq2);
         query.clone().select(idAlias).fetch();
     }

File: querydsl-sql/src/test/java/com/querydsl/sql/UnionSubQueryTest.java
Patch:
@@ -85,7 +85,7 @@ public void UnionAll_SubQuery() {
                 "(select 3 from dual)", serializer.toString());
     }
 
-    private SQLQuery<Void> query() {
+    private SQLQuery<?> query() {
         return new SQLQuery<Void>();
     }
 

File: querydsl-sql/src/test/java/com/querydsl/sql/UpdateBase.java
Patch:
@@ -163,7 +163,7 @@ public void Update_with_SubQuery_exists_Params() {
         QEmployee employee = new QEmployee("e");
 
         Param<Integer> param = new Param<Integer>(Integer.class, "param");
-        SQLQuery<Void> sq = query().from(employee).where(employee.id.eq(param));
+        SQLQuery<?> sq = query().from(employee).where(employee.id.eq(param));
         sq.set(param, -12478923);
 
         SQLUpdateClause update = update(survey1);

File: querydsl-sql/src/test/java/com/querydsl/sql/mssql/SQLServerQueryTest.java
Patch:
@@ -26,22 +26,22 @@ public class SQLServerQueryTest {
     
     @Test
     public void TableHints_Single() {        
-        SQLServerQuery<Void> query = new SQLServerQuery<Void>(null, new SQLServerTemplates());
+        SQLServerQuery<?> query = new SQLServerQuery<Void>(null, new SQLServerTemplates());
         query.from(survey).tableHints(SQLServerTableHints.NOWAIT).where(survey.name.isNull());
         assertEquals("from SURVEY SURVEY with (NOWAIT)\nwhere SURVEY.NAME is null", query.toString());
     }
     
     @Test
     public void TableHints_Multiple() {
-        SQLServerQuery<Void> query = new SQLServerQuery<Void>(null, new SQLServerTemplates());
+        SQLServerQuery<?> query = new SQLServerQuery<Void>(null, new SQLServerTemplates());
         query.from(survey).tableHints(SQLServerTableHints.NOWAIT, SQLServerTableHints.NOLOCK).where(survey.name.isNull());
         assertEquals("from SURVEY SURVEY with (NOWAIT, NOLOCK)\nwhere SURVEY.NAME is null", query.toString());
     }
     
     @Test
     public void TableHints_Multiple2() {
         QSurvey survey2 = new QSurvey("survey2");
-        SQLServerQuery<Void> query = new SQLServerQuery<Void>(null, new SQLServerTemplates());
+        SQLServerQuery<?> query = new SQLServerQuery<Void>(null, new SQLServerTemplates());
         query.from(survey).tableHints(SQLServerTableHints.NOWAIT)
              .from(survey2).tableHints(SQLServerTableHints.NOLOCK)
              .where(survey.name.isNull());

File: querydsl-sql/src/test/java/com/querydsl/sql/postgresql/PostgreSQLQueryTest.java
Patch:
@@ -10,7 +10,7 @@
 
 public class PostgreSQLQueryTest {
     
-    private PostgreSQLQuery<Void> query;
+    private PostgreSQLQuery<?> query;
     
     private QSurvey survey = new QSurvey("survey");
     

File: querydsl-core/src/main/java/com/querydsl/core/types/ConstructorExpression.java
Patch:
@@ -66,15 +66,15 @@ private static Class<?>[] getParameterTypes(Expression<?>... args) {
 
     private transient Iterable<Function<Object[], Object[]>> transformers;
 
-    protected ConstructorExpression(Class<T> type, Expression<?>... args) {
+    protected ConstructorExpression(Class<? extends T> type, Expression<?>... args) {
         this(type, getParameterTypes(args), ImmutableList.copyOf(args));
     }
 
-    protected ConstructorExpression(Class<T> type, Class<?>[] paramTypes, Expression<?>... args) {
+    protected ConstructorExpression(Class<? extends T> type, Class<?>[] paramTypes, Expression<?>... args) {
         this(type, paramTypes, ImmutableList.copyOf(args));
     }
 
-    protected ConstructorExpression(Class<T> type, Class<?>[] paramTypes, ImmutableList<Expression<?>> args) {
+    protected ConstructorExpression(Class<? extends T> type, Class<?>[] paramTypes, ImmutableList<Expression<?>> args) {
         super(type);
         this.parameterTypes = getConstructorParameters(type, paramTypes).clone();
         this.args = args;

File: querydsl-core/src/test/java/com/querydsl/core/types/QBeanFieldAccessTest.java
Patch:
@@ -66,7 +66,7 @@ public void with_Class_and_Exprs_using_fields() {
 
     @Test
     public void with_Path_and_Exprs_using_fields() {
-        QBean<Entity> beanProjection = new QBean<Entity>(entity, true, name, age, married);
+        QBean<Entity> beanProjection = Projections.fields(entity, name, age, married);
         Entity bean = beanProjection.newInstance("Fritz", 30, true);
         assertEquals("Fritz", bean.name);
         assertEquals(30, bean.age);

File: querydsl-core/src/test/java/com/querydsl/core/types/QBeanTest.java
Patch:
@@ -102,7 +102,7 @@ public void with_Class_and_Exprs() {
 
     @Test
     public void with_Path_and_Exprs() {
-        QBean<Entity> beanProjection = new QBean<Entity>(entity, name, age, married);
+        QBean<Entity> beanProjection = Projections.bean(entity, name, age, married);
         Entity bean = beanProjection.newInstance("Fritz", 30, true);
         assertEquals("Fritz", bean.getName());
         assertEquals(30, bean.getAge());
@@ -111,7 +111,7 @@ public void with_Path_and_Exprs() {
 
     @Test
     public void with_unknown_properties() {
-        QBean<Entity> beanProjection = new QBean<Entity>(entity, name, age, Expressions.booleanPath("unknown"));
+        QBean<Entity> beanProjection = Projections.bean(entity, name, age, Expressions.booleanPath("unknown"));
         Entity bean = beanProjection.newInstance("Fritz", 30, true);
         assertEquals("Fritz", bean.getName());
         assertEquals(30, bean.getAge());

File: querydsl-core/src/main/java/com/querydsl/core/types/ConstructorExpression.java
Patch:
@@ -66,15 +66,15 @@ private static Class<?>[] getParameterTypes(Expression<?>... args) {
 
     private transient Iterable<Function<Object[], Object[]>> transformers;
 
-    protected ConstructorExpression(Class<T> type, Expression<?>... args) {
+    protected ConstructorExpression(Class<? extends T> type, Expression<?>... args) {
         this(type, getParameterTypes(args), ImmutableList.copyOf(args));
     }
 
-    protected ConstructorExpression(Class<T> type, Class<?>[] paramTypes, Expression<?>... args) {
+    protected ConstructorExpression(Class<? extends T> type, Class<?>[] paramTypes, Expression<?>... args) {
         this(type, paramTypes, ImmutableList.copyOf(args));
     }
 
-    protected ConstructorExpression(Class<T> type, Class<?>[] paramTypes, ImmutableList<Expression<?>> args) {
+    protected ConstructorExpression(Class<? extends T> type, Class<?>[] paramTypes, ImmutableList<Expression<?>> args) {
         super(type);
         this.parameterTypes = getConstructorParameters(type, paramTypes).clone();
         this.args = args;

File: querydsl-core/src/test/java/com/querydsl/core/types/QBeanFieldAccessTest.java
Patch:
@@ -66,7 +66,7 @@ public void with_Class_and_Exprs_using_fields() {
 
     @Test
     public void with_Path_and_Exprs_using_fields() {
-        QBean<Entity> beanProjection = new QBean<Entity>(entity, true, name, age, married);
+        QBean<Entity> beanProjection = Projections.fields(entity, name, age, married);
         Entity bean = beanProjection.newInstance("Fritz", 30, true);
         assertEquals("Fritz", bean.name);
         assertEquals(30, bean.age);

File: querydsl-core/src/test/java/com/querydsl/core/types/QBeanTest.java
Patch:
@@ -102,7 +102,7 @@ public void with_Class_and_Exprs() {
 
     @Test
     public void with_Path_and_Exprs() {
-        QBean<Entity> beanProjection = new QBean<Entity>(entity, name, age, married);
+        QBean<Entity> beanProjection = Projections.bean(entity, name, age, married);
         Entity bean = beanProjection.newInstance("Fritz", 30, true);
         assertEquals("Fritz", bean.getName());
         assertEquals(30, bean.getAge());
@@ -111,7 +111,7 @@ public void with_Path_and_Exprs() {
 
     @Test
     public void with_unknown_properties() {
-        QBean<Entity> beanProjection = new QBean<Entity>(entity, name, age, Expressions.booleanPath("unknown"));
+        QBean<Entity> beanProjection = Projections.bean(entity, name, age, Expressions.booleanPath("unknown"));
         Entity bean = beanProjection.newInstance("Fritz", 30, true);
         assertEquals("Fritz", bean.getName());
         assertEquals(30, bean.getAge());

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPQLTemplates.java
Patch:
@@ -138,8 +138,8 @@ protected JPQLTemplates(char escape, QueryHandler queryHandler) {
 
         // case for eq
         add(Ops.CASE_EQ, "case {1} end");
-        add(Ops.CASE_EQ_WHEN,  "when {0} = {1} then {2} {3}");
-        add(Ops.CASE_EQ_ELSE,  "else {0}");
+        add(Ops.CASE_EQ_WHEN,  "when {0} = {1} then {2} {3}", 0);
+        add(Ops.CASE_EQ_ELSE,  "else {0}", 0);
 
         add(Ops.INSTANCE_OF, "type({0}) = {1}");
         add(JPQLOps.TYPE, "type({0})");

File: querydsl-jpa/src/main/java/com/querydsl/jpa/impl/AbstractJPAQuery.java
Patch:
@@ -150,9 +150,9 @@ private Query createQuery(@Nullable QueryModifiers modifiers, boolean forCount)
 
         // set transformer, if necessary and possible
         Expression<?> projection = getMetadata().getProjection();
+        this.projection = null; // necessary when query is reused
 
         if (!forCount && projection instanceof FactoryExpression) {
-
             if (!queryHandler.transform(query, (FactoryExpression<?>) projection)) {
                 this.projection = (FactoryExpression) projection;
             }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/sql/AbstractJPASQLQuery.java
Patch:
@@ -163,6 +163,7 @@ private Query createQuery(boolean forCount) {
 
         // set constants
         JPAUtil.setConstants(query, serializer.getConstantToLabel(), queryMixin.getMetadata().getParams());
+        this.projection = null; // necessary when query is reused
 
         if (projection instanceof FactoryExpression) {
             if (!queryHandler.transform(query, (FactoryExpression<?>)projection)) {

File: querydsl-sql/src/test/java/com/querydsl/sql/SelectBase.java
Patch:
@@ -233,7 +233,7 @@ public void Boolean_Any() {
 
     @Test
     public void Case() {
-        NumberExpression<Float> numExpression = employee.salary.floatValue().divide(employee2.salary.floatValue()).multiply(100);
+        NumberExpression<Float> numExpression = employee.salary.floatValue().divide(employee2.salary.floatValue()).multiply(100.1);
         NumberExpression<Float> numExpression2 = employee.id.when(0).then(0.0F).otherwise(numExpression);
         assertEquals(ImmutableList.of(87, 90, 88, 87, 83, 80, 75),
                 query().from(employee, employee2)

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPQLTemplates.java
Patch:
@@ -138,8 +138,8 @@ protected JPQLTemplates(char escape, QueryHandler queryHandler) {
 
         // case for eq
         add(Ops.CASE_EQ, "case {1} end");
-        add(Ops.CASE_EQ_WHEN,  "when {0} = {1} then {2} {3}");
-        add(Ops.CASE_EQ_ELSE,  "else {0}");
+        add(Ops.CASE_EQ_WHEN,  "when {0} = {1} then {2} {3}", 0);
+        add(Ops.CASE_EQ_ELSE,  "else {0}", 0);
 
         add(Ops.INSTANCE_OF, "type({0}) = {1}");
         add(JPQLOps.TYPE, "type({0})");

File: querydsl-codegen/src/main/java/com/querydsl/codegen/EntitySerializer.java
Patch:
@@ -645,7 +645,8 @@ protected void customField(EntityType model, Property field, SerializerConfig co
             writer.line("// inherited");
             Supertype superType = model.getSuperType();
             if (!superType.getEntityType().hasEntityFields()) {
-                writer.publicFinal(queryType, field.getEscapedName(),"_super." + field.getEscapedName());
+                String value = NEW + writer.getRawName(queryType) + "(_super." + field.getEscapedName() + ")";
+                writer.publicFinal(queryType, field.getEscapedName(), value);
             } else {
                 writer.publicFinal(queryType, field.getEscapedName());
             }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPAQueryMixin.java
Patch:
@@ -137,15 +137,16 @@ private <T> Path<T> shorten(Path<T> path, List<Path<?>> paths) {
             }
         } else if (metadata.getParent().getMetadata().isRoot()) {
             Class<T> type = getElementTypeOrType(path);
-            Path<T> newPath = new PathImpl<T>(type, path.toString().replace('.', '_'));
+            Path<T> newPath = new PathImpl<T>(type, ExpressionUtils.createRootVariable(path));
             leftJoin(path, newPath);
             return newPath;
         } else {
             Class<T> type = getElementTypeOrType(path);
             Path<?> parent = shorten(metadata.getParent(), paths);
             Path<T> oldPath = new PathImpl<T>(path.getType(),
                     new PathMetadata(parent, metadata.getElement(), metadata.getPathType()));
-            Path<T> newPath = new PathImpl<T>(type, oldPath.toString().replace('.', '_'));
+            Path<T> newPath = new PathImpl<T>(type, ExpressionUtils.createRootVariable(oldPath));
+            aliases.put(path, newPath);
             leftJoin(oldPath, newPath);
             return newPath;
         }

File: querydsl-sql-spatial/src/main/java/com/querydsl/sql/spatial/SQLServerGeometryType.java
Patch:
@@ -34,6 +34,8 @@ public class SQLServerGeometryType extends AbstractType<Geometry> {
 
     public static final SQLServerGeometryType DEFAULT = new SQLServerGeometryType();
 
+    private static final int DEFAULT_SRID = 4326;
+
     public SQLServerGeometryType() {
         super(Types.BLOB);
     }
@@ -74,7 +76,7 @@ public String getLiteral(Geometry geometry) {
         if (geometry.getSRID() > -1) {
             return "geometry::STGeomFromText('" + str + "', " + geometry.getSRID() + ")";
         } else {
-            return "geometry::STGeomFromText('" + str + "', 4326)";
+            return "geometry::STGeomFromText('" + str + "', " + DEFAULT_SRID + ")";
         }
     }
 

File: querydsl-sql/src/main/java/com/querydsl/sql/types/BigDecimalAsDoubleType.java
Patch:
@@ -39,8 +39,8 @@ public BigDecimalAsDoubleType(int type) {
 
     @Override
     public BigDecimal getValue(ResultSet rs, int startIndex) throws SQLException {
-        Number num = (Number)rs.getObject(startIndex);
-        return num != null ? BigDecimal.valueOf(num.doubleValue()) : null;
+        double val = rs.getDouble(startIndex);
+        return rs.wasNull() ? null : BigDecimal.valueOf(val);
     }
 
     @Override

File: querydsl-sql/src/main/java/com/querydsl/sql/types/BigIntegerAsLongType.java
Patch:
@@ -39,8 +39,8 @@ public BigIntegerAsLongType(int type) {
 
     @Override
     public BigInteger getValue(ResultSet rs, int startIndex) throws SQLException {
-        Number num = (Number) rs.getObject(startIndex);
-        return num != null ? BigInteger.valueOf(num.longValue()) : null;
+        long val = rs.getLong(startIndex);
+        return rs.wasNull() ? null : BigInteger.valueOf(val);
     }
 
     @Override

File: querydsl-sql/src/main/java/com/querydsl/sql/types/BooleanType.java
Patch:
@@ -36,8 +36,8 @@ public BooleanType(int type) {
 
     @Override
     public Boolean getValue(ResultSet rs, int startIndex) throws SQLException {
-        final boolean value = rs.getBoolean(startIndex);
-        return rs.wasNull() ? null : value;
+        boolean val = rs.getBoolean(startIndex);
+        return rs.wasNull() ? null : val;
     }
 
     @Override

File: querydsl-sql/src/test/java/com/querydsl/sql/Connections.java
Patch:
@@ -89,7 +89,7 @@ public static void initConfiguration(SQLTemplates templates) {
 
     private static Connection getDB2() throws SQLException, ClassNotFoundException {
         Class.forName("com.ibm.db2.jcc.DB2Driver");
-        String url = "jdbc:db2://192.168.0.24:50001/SAMPLE";
+        String url = "jdbc:db2://db2host:50001/SAMPLE";
         return DriverManager.getConnection(url, "db2inst1", "a3sd!fDj");
     }
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPAQueryMixin.java
Patch:
@@ -146,6 +146,7 @@ private <T> Path<T> shorten(Path<T> path, List<Path<?>> paths) {
             Path<T> oldPath = new PathImpl<T>(path.getType(),
                     new PathMetadata(parent, metadata.getElement(), metadata.getPathType()));
             Path<T> newPath = new PathImpl<T>(type, oldPath.toString().replace('.', '_'));
+            aliases.put(path, newPath);
             leftJoin(oldPath, newPath);
             return newPath;
         }

File: querydsl-codegen/src/main/java/com/querydsl/codegen/EntitySerializer.java
Patch:
@@ -645,7 +645,8 @@ protected void customField(EntityType model, Property field, SerializerConfig co
             writer.line("// inherited");
             Supertype superType = model.getSuperType();
             if (!superType.getEntityType().hasEntityFields()) {
-                writer.publicFinal(queryType, field.getEscapedName(),"_super." + field.getEscapedName());
+                String value = NEW + writer.getRawName(queryType) + "(_super." + field.getEscapedName() + ")";
+                writer.publicFinal(queryType, field.getEscapedName(), value);
             } else {
                 writer.publicFinal(queryType, field.getEscapedName());
             }

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/CollectionTest.java
Patch:
@@ -46,7 +46,7 @@ public static class Person {
         
         Collection collection2;
         
-        Collection<Collection<Person>> collectionOfCOllection;
+        Collection<Collection<Person>> collectionOfCollection;
         
         Collection<Set<String>> collectionOfSet;
         

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/SecurableEntity.java
Patch:
@@ -8,8 +8,8 @@
 import javax.persistence.TableGenerator;
 
 /**
- * This is an example of using system ACL function. Note, field id is must,
- * abstract function getId must also implemented.
+ * This is an example of using system ACL function. Note, field id is required,
+ * abstract function getId must also be implemented.
  */
 @Entity
 public class SecurableEntity extends AbstractSecurable<Long, Long> {
@@ -28,4 +28,4 @@ public class SecurableEntity extends AbstractSecurable<Long, Long> {
     // return getSecurableEntityId();
     // }
 
-}
\ No newline at end of file
+}

File: querydsl-collections/src/main/java/com/querydsl/collections/PathComparator.java
Patch:
@@ -46,7 +46,7 @@ public static <T, V extends Comparable<V>> PathComparator<T, V> pathComparator(P
     @Override
     public int compare(T leftBean, T rightBean) {
         if(leftBean == rightBean) {
-            return 0; // Reference to the seme object should always result in '0'
+            return 0; // Reference to the same object should always result in '0'
         } else if (leftBean == null) {
             return -1; // Whenever the reference varies and left is null, right is not null
         } else if (rightBean == null) {

File: querydsl-core/src/main/java/com/querydsl/core/EmptyMetadata.java
Patch:
@@ -24,7 +24,7 @@
 import com.querydsl.core.types.Predicate;
 
 /**
- * EmptyMetadata provides a immutable empty QueryMetadata instace
+ * EmptyMetadata provides an immutable empty QueryMetadata instance
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/querydsl/core/alias/AliasFactory.java
Patch:
@@ -140,7 +140,7 @@ protected <A> A createProxy(Class<A> cl, Expression<?> path) {
     }
 
     /**
-     * Get the current thread bound expression without reseting it
+     * Get the current thread bound expression without resetting it
      * 
      * @param <A>
      * @return

File: querydsl-core/src/main/java/com/querydsl/core/alias/ManagedObject.java
Patch:
@@ -16,7 +16,7 @@
 import com.querydsl.core.types.EntityPath;
 
 /**
- * MagagedObject is a tagging interface for CGLIB alias proxies
+ * ManagedObject is a tagging interface for CGLIB alias proxies
  *
  */
 public interface ManagedObject {

File: querydsl-core/src/main/java/com/querydsl/core/support/DetachableAdapter.java
Patch:
@@ -37,7 +37,7 @@
 import com.querydsl.core.types.query.TimeSubQuery;
 
 /**
- * DetachableAdapter is an apadater implementation for the Detachable interface
+ * DetachableAdapter is an adapter implementation for the Detachable interface
  * 
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/querydsl/core/types/expr/Wildcard.java
Patch:
@@ -26,7 +26,7 @@
 public final class Wildcard {
     
     /**
-     * Wilcard expression (*) for all columns
+     * Wildcard expression (*) for all columns
      */
     public static final Expression<Object[]> all = TemplateExpressionImpl.create(Object[].class, "*");
 
@@ -36,12 +36,12 @@ public final class Wildcard {
     public static final NumberExpression<Long> count = NumberOperation.create(Long.class, Ops.AggOps.COUNT_ALL_AGG);
     
     /**
-     * Wilcard count distinct expression ((count(distinct *))
+     * Wildcard count distinct expression (count(distinct *))
      */
     public static final NumberExpression<Long> countDistinct = NumberOperation.create(Long.class, Ops.AggOps.COUNT_DISTINCT_ALL_AGG);
 
     /**
-     * Wilcard count distinct expression ((count(distinct *))
+     * Wildcard count expression (count(*))
      */
     public static final NumberExpression<Integer> countAsInt = NumberOperation.create(Integer.class, Ops.AggOps.COUNT_ALL_AGG);
 

File: querydsl-core/src/test/java/com/querydsl/core/QueryMetadaSerializationTest.java
Patch:
@@ -65,7 +65,7 @@ public void Serialization() throws IOException, ClassNotFoundException{
     }
     
     @Test
-    public void FullySerizable() {
+    public void FullySerializable() {
         Set<Class<?>> checked = new HashSet<Class<?>>();
         checked.addAll(Arrays.<Class<?>>asList(Collection.class, List.class, Set.class, Map.class, 
                 Object.class, String.class, Class.class));

File: querydsl-core/src/test/java/com/querydsl/core/types/TemplateInfiniteLoop.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 
-public class TermplateInfiniteLoop {
+public class TemplateInfiniteLoop {
 
     static String templates[] = createTemplates();
 

File: querydsl-core/src/test/java/com/querydsl/core/types/path/MapPathTest.java
Patch:
@@ -31,7 +31,7 @@ public void Get() {
     }
     
     @Test
-    public void GetKeytType() {
+    public void GetKeyType() {
         assertEquals(String.class, mapPath.getKeyType());
     }
 

File: querydsl-jdo/src/test/java/com/querydsl/jdo/models/company/Office.java
Patch:
@@ -55,7 +55,7 @@ public void setDate(Date date) {
     }
 
     /**
-     * Accessor for the roomt name
+     * Accessor for the room name
      *
      * @return Returns the room name.
      */

File: querydsl-jdo/src/test/java/com/querydsl/jdo/models/fitness/Gym.java
Patch:
@@ -29,7 +29,7 @@ public class Gym {
     private String location;
     private String name;
 
-    // this must be initialized in the constructor. dont change it
+    // this must be initialized in the constructor. don't change it
     private Map<String, Wardrobe> wardrobes; // store Wardrobe in values
     private Map<Wardrobe, String> wardrobes2; // store Wardrobe in keys
     private Map<String, Wardrobe> wardrobesInverse; // store Wardrobe in values
@@ -53,7 +53,7 @@ public class Gym {
     private String stringValue;
 
     public Gym() {
-        // this must be initialized in the constructor. dont change it
+        // this must be initialized in the constructor. don't change it
         wardrobes = new HashMap<String, Wardrobe>();
         equipments = new HashMap<String, GymEquipment>();
         partners = new HashMap<String, Gym>();

File: querydsl-jdo/src/test/java/com/querydsl/jdo/models/fitness/Wardrobe.java
Patch:
@@ -25,15 +25,15 @@
  */
 @QueryEntity
 public class Wardrobe {
-    // this must be initialized in the constructor. dont change it
+    // this must be initialized in the constructor. don't change it
     private List<Cloth> clothes;
     private String model;
     private Gym gym;
     private String stringKey;
     private String stringValue;
 
     public Wardrobe() {
-        // this must be initialized in the constructor. dont change it
+        // this must be initialized in the constructor. don't change it
         clothes = new ArrayList<Cloth>();
     }
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/ExpressionSerializationTest.java
Patch:
@@ -15,7 +15,6 @@ public class ExpressionSerializationTest {
 
     @Test
     public void Serialize() throws Exception {
-        //QAdress.adress.name.eq("test"
         Expression<?> expr = QCat.cat.name.eq("test");
         Expression<?> expr2 = serialize(expr);
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/JPAQueryMixinTest.java
Patch:
@@ -180,7 +180,7 @@ public void OrderBy_Embeddable2() {
     }
 
     @Test
-    public void OrderBy_Embeddable_Colllection() {
+    public void OrderBy_Embeddable_Collection() {
         QBookVersion bookVersion = QBookVersion.bookVersion;
         QBookMark bookMark = new QBookMark("bookVersion_definition_bookMarks");
         mixin.from(bookVersion);

File: querydsl-mongodb/src/main/java/com/querydsl/mongodb/MongodbExpressions.java
Patch:
@@ -29,7 +29,7 @@ public final class MongodbExpressions {
     private MongodbExpressions() {}
 
     /**
-     * Finds the closest points relative to the given location and orders the results with decreasing promimity
+     * Finds the closest points relative to the given location and orders the results with decreasing proximity
      *
      * @param expr
      * @param latVal latitude

File: querydsl-mongodb/src/main/java/com/querydsl/mongodb/Point.java
Patch:
@@ -41,7 +41,7 @@ public Point(PathMetadata metadata) {
     }
 
     /**
-     * Finds the closest points relative to the given location and orders the results with decreasing promimity
+     * Finds the closest points relative to the given location and orders the results with decreasing proximity
      *
      * @param latVal latitude
      * @param longVal longitude

File: querydsl-mongodb/src/test/java/com/querydsl/mongodb/GeoSpatialQueryTest.java
Patch:
@@ -50,7 +50,7 @@ public GeoSpatialQueryTest() throws UnknownHostException, MongoException {
     @Before
     public void before() {
         ds.delete(ds.createQuery(GeoEntity.class));
-        ds.getCollection(GeoEntity.class).ensureIndex(new BasicDBObject("location","2d"));;
+        ds.getCollection(GeoEntity.class).ensureIndex(new BasicDBObject("location","2d"));
     }
 
     @Test

File: querydsl-spatial/src/main/java/com/querydsl/spatial/path/GeometryPath.java
Patch:
@@ -139,7 +139,7 @@ public PolygonPath<Polygon> asPolygon() {
         return polygon;
     }
 
-    public PolyhedralSurfacePath<PolyHedralSurface> asPolygHedralSurface() {
+    public PolyhedralSurfacePath<PolyHedralSurface> asPolyHedralSurface() {
         if (polyhedralSurface == null) {
             polyhedralSurface = new PolyhedralSurfacePath<PolyHedralSurface>(pathMixin.getMetadata());
         }

File: querydsl-spatial/src/test/java/com/querydsl/spatial/path/GeometryPathTest.java
Patch:
@@ -27,6 +27,6 @@ public void Convert() {
         assertEquals(new MultiPolygonPath<MultiPolygon>("geometry"), geometry.asMultiPolygon());
         assertEquals(new PointPath<Point>("geometry"), geometry.asPoint());
         assertEquals(new PolygonPath<Polygon>("geometry"), geometry.asPolygon());
-        assertEquals(new PolyhedralSurfacePath<PolyHedralSurface>("geometry"), geometry.asPolygHedralSurface());
+        assertEquals(new PolyhedralSurfacePath<PolyHedralSurface>("geometry"), geometry.asPolyHedralSurface());
     }
 }

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/ExtendedBeanSerializer.java
Patch:
@@ -30,7 +30,7 @@
 import com.querydsl.sql.codegen.support.PrimaryKeyData;
 
 /**
- * ExtendedBeanSerialzier outputs primary key based equals, hashCode and toString implementations
+ * ExtendedBeanSerializer outputs primary key based equals, hashCode and toString implementations
  * 
  * @author tiwe
  *

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/MetaDataExporter.java
Patch:
@@ -517,7 +517,7 @@ public void setBeanSuffix(String beanSuffix) {
     /**
      * Override the NamingStrategy (default: new DefaultNamingStrategy())
      *
-     * @param namingStrategy namingstrategy to override (default: new DefaultNamingStrategy())
+     * @param namingStrategy naming strategy to override (default: new DefaultNamingStrategy())
      */
     public void setNamingStrategy(NamingStrategy namingStrategy) {
         module.bind(NamingStrategy.class, namingStrategy);

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/ant/AntMetaDataExporter.java
Patch:
@@ -106,7 +106,7 @@ public class AntMetaDataExporter extends Task {
     private String targetFolder;
 
     /**
-     * namingstrategy class to override (default: DefaultNamingStrategy)
+     * naming strategy class to override (default: DefaultNamingStrategy)
      */
     private String namingStrategyClass;
 
@@ -638,4 +638,4 @@ public String getSourceEncoding() {
     public void setSourceEncoding(String sourceEncoding) {
         this.sourceEncoding = sourceEncoding;
     }
-}
\ No newline at end of file
+}

File: querydsl-sql-spatial/src/test/java/com/querydsl/sql/spatial/AbstractConverterTest.java
Patch:
@@ -48,7 +48,7 @@ protected List<Geometry> getGeometries() {
             data.add(new LineString(createSequence(crs, (Point)data.get(i), (Point)data.get(i))));
         }
 
-        // polgyon
+        // polygon
         // TODO
 
         // multipoint

File: querydsl-sql/src/main/java/com/querydsl/sql/RelationalPathExtractor.java
Patch:
@@ -32,7 +32,7 @@
 import com.querydsl.core.types.Visitor;
 
 /**
- * RelationalPathExtractor extracts RelationlPath instances from expressions and queries
+ * RelationalPathExtractor extracts RelationalPath instances from expressions and queries
  *
  * @author tiwe
  *

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLExpressions.java
Patch:
@@ -109,7 +109,7 @@ private static Expression[] convertToExpressions(Object... args) {
     public static final Expression<Object[]> all = Wildcard.all;
 
     /**
-     * Wilcard count expression
+     * Wildcard count expression
      */
     public static final Expression<Long> countAll = Wildcard.count;
 

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLTemplates.java
Patch:
@@ -214,7 +214,7 @@ public SQLTemplates build() {
 
     private String leftJoin = "\nleft join ";
 
-    private String rightJoin = "\nright join ";;
+    private String rightJoin = "\nright join ";
 
     private String limitTemplate = "\nlimit {0}";
 

File: querydsl-sql/src/test/java/com/querydsl/sql/Connections.java
Patch:
@@ -966,7 +966,7 @@ public static void initSQLite() throws SQLException, ClassNotFoundException{
         stmt.execute("create table SURVEY(ID int auto_increment, " +
                 "NAME varchar(30)," +
                 "NAME2 varchar(30)," +
-                "constraint suryey_pk primary key(ID))");
+                "constraint survey_pk primary key(ID))");
         stmt.execute("insert into SURVEY values (1,'Hello World','Hello');");
 
         // test
@@ -1195,4 +1195,4 @@ private static String quote(String sql, String... identifiers) {
     }
 
     private Connections() {}
-}
\ No newline at end of file
+}

File: querydsl-sql/src/test/java/com/querydsl/sql/MergeBase.java
Patch:
@@ -190,7 +190,7 @@ public void MergeBatch_with_subquery() {
 
     @Test
     @IncludeIn(H2)
-    public void Merge_With_TempateExpression_In_Batch() {
+    public void Merge_With_TemplateExpression_In_Batch() {
         SQLMergeClause merge = merge(survey)
                 .keys(survey.id)
                 .set(survey.id, 5)

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/CollectionTest.java
Patch:
@@ -46,7 +46,7 @@ public static class Person {
         
         Collection collection2;
         
-        Collection<Collection<Person>> collectionOfCOllection;
+        Collection<Collection<Person>> collectionOfCollection;
         
         Collection<Set<String>> collectionOfSet;
         

File: querydsl-apt/src/test/java/com/querydsl/apt/domain/SecurableEntity.java
Patch:
@@ -8,8 +8,8 @@
 import javax.persistence.TableGenerator;
 
 /**
- * This is an example of using system ACL function. Note, field id is must,
- * abstract function getId must also implemented.
+ * This is an example of using system ACL function. Note, field id is required,
+ * abstract function getId must also be implemented.
  */
 @Entity
 public class SecurableEntity extends AbstractSecurable<Long, Long> {
@@ -28,4 +28,4 @@ public class SecurableEntity extends AbstractSecurable<Long, Long> {
     // return getSecurableEntityId();
     // }
 
-}
\ No newline at end of file
+}

File: querydsl-collections/src/main/java/com/querydsl/collections/PathComparator.java
Patch:
@@ -46,7 +46,7 @@ public static <T, V extends Comparable<V>> PathComparator<T, V> pathComparator(P
     @Override
     public int compare(T leftBean, T rightBean) {
         if(leftBean == rightBean) {
-            return 0; // Reference to the seme object should always result in '0'
+            return 0; // Reference to the same object should always result in '0'
         } else if (leftBean == null) {
             return -1; // Whenever the reference varies and left is null, right is not null
         } else if (rightBean == null) {

File: querydsl-core/src/main/java/com/querydsl/core/EmptyMetadata.java
Patch:
@@ -24,7 +24,7 @@
 import com.querydsl.core.types.Predicate;
 
 /**
- * EmptyMetadata provides a immutable empty QueryMetadata instace
+ * EmptyMetadata provides an immutable empty QueryMetadata instance
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/querydsl/core/alias/AliasFactory.java
Patch:
@@ -140,7 +140,7 @@ protected <A> A createProxy(Class<A> cl, Expression<?> path) {
     }
 
     /**
-     * Get the current thread bound expression without reseting it
+     * Get the current thread bound expression without resetting it
      * 
      * @param <A>
      * @return

File: querydsl-core/src/main/java/com/querydsl/core/alias/ManagedObject.java
Patch:
@@ -16,7 +16,7 @@
 import com.querydsl.core.types.EntityPath;
 
 /**
- * MagagedObject is a tagging interface for CGLIB alias proxies
+ * ManagedObject is a tagging interface for CGLIB alias proxies
  *
  */
 public interface ManagedObject {

File: querydsl-core/src/main/java/com/querydsl/core/support/DetachableAdapter.java
Patch:
@@ -37,7 +37,7 @@
 import com.querydsl.core.types.query.TimeSubQuery;
 
 /**
- * DetachableAdapter is an apadater implementation for the Detachable interface
+ * DetachableAdapter is an adapter implementation for the Detachable interface
  * 
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/querydsl/core/types/expr/Wildcard.java
Patch:
@@ -26,7 +26,7 @@
 public final class Wildcard {
     
     /**
-     * Wilcard expression (*) for all columns
+     * Wildcard expression (*) for all columns
      */
     public static final Expression<Object[]> all = TemplateExpressionImpl.create(Object[].class, "*");
 
@@ -36,12 +36,12 @@ public final class Wildcard {
     public static final NumberExpression<Long> count = NumberOperation.create(Long.class, Ops.AggOps.COUNT_ALL_AGG);
     
     /**
-     * Wilcard count distinct expression ((count(distinct *))
+     * Wildcard count distinct expression (count(distinct *))
      */
     public static final NumberExpression<Long> countDistinct = NumberOperation.create(Long.class, Ops.AggOps.COUNT_DISTINCT_ALL_AGG);
 
     /**
-     * Wilcard count distinct expression ((count(distinct *))
+     * Wildcard count expression (count(*))
      */
     public static final NumberExpression<Integer> countAsInt = NumberOperation.create(Integer.class, Ops.AggOps.COUNT_ALL_AGG);
 

File: querydsl-core/src/test/java/com/querydsl/core/QueryMetadaSerializationTest.java
Patch:
@@ -65,7 +65,7 @@ public void Serialization() throws IOException, ClassNotFoundException{
     }
     
     @Test
-    public void FullySerizable() {
+    public void FullySerializable() {
         Set<Class<?>> checked = new HashSet<Class<?>>();
         checked.addAll(Arrays.<Class<?>>asList(Collection.class, List.class, Set.class, Map.class, 
                 Object.class, String.class, Class.class));

File: querydsl-core/src/test/java/com/querydsl/core/types/TemplateInfiniteLoop.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 
-public class TermplateInfiniteLoop {
+public class TemplateInfiniteLoop {
 
     static String templates[] = createTemplates();
 

File: querydsl-core/src/test/java/com/querydsl/core/types/path/MapPathTest.java
Patch:
@@ -31,7 +31,7 @@ public void Get() {
     }
     
     @Test
-    public void GetKeytType() {
+    public void GetKeyType() {
         assertEquals(String.class, mapPath.getKeyType());
     }
 

File: querydsl-jdo/src/test/java/com/querydsl/jdo/models/company/Office.java
Patch:
@@ -55,7 +55,7 @@ public void setDate(Date date) {
     }
 
     /**
-     * Accessor for the roomt name
+     * Accessor for the room name
      *
      * @return Returns the room name.
      */

File: querydsl-jdo/src/test/java/com/querydsl/jdo/models/fitness/Gym.java
Patch:
@@ -29,7 +29,7 @@ public class Gym {
     private String location;
     private String name;
 
-    // this must be initialized in the constructor. dont change it
+    // this must be initialized in the constructor. don't change it
     private Map<String, Wardrobe> wardrobes; // store Wardrobe in values
     private Map<Wardrobe, String> wardrobes2; // store Wardrobe in keys
     private Map<String, Wardrobe> wardrobesInverse; // store Wardrobe in values
@@ -53,7 +53,7 @@ public class Gym {
     private String stringValue;
 
     public Gym() {
-        // this must be initialized in the constructor. dont change it
+        // this must be initialized in the constructor. don't change it
         wardrobes = new HashMap<String, Wardrobe>();
         equipments = new HashMap<String, GymEquipment>();
         partners = new HashMap<String, Gym>();

File: querydsl-jdo/src/test/java/com/querydsl/jdo/models/fitness/Wardrobe.java
Patch:
@@ -25,15 +25,15 @@
  */
 @QueryEntity
 public class Wardrobe {
-    // this must be initialized in the constructor. dont change it
+    // this must be initialized in the constructor. don't change it
     private List<Cloth> clothes;
     private String model;
     private Gym gym;
     private String stringKey;
     private String stringValue;
 
     public Wardrobe() {
-        // this must be initialized in the constructor. dont change it
+        // this must be initialized in the constructor. don't change it
         clothes = new ArrayList<Cloth>();
     }
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/ExpressionSerializationTest.java
Patch:
@@ -15,7 +15,6 @@ public class ExpressionSerializationTest {
 
     @Test
     public void Serialize() throws Exception {
-        //QAdress.adress.name.eq("test"
         Expression<?> expr = QCat.cat.name.eq("test");
         Expression<?> expr2 = serialize(expr);
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/JPAQueryMixinTest.java
Patch:
@@ -180,7 +180,7 @@ public void OrderBy_Embeddable2() {
     }
 
     @Test
-    public void OrderBy_Embeddable_Colllection() {
+    public void OrderBy_Embeddable_Collection() {
         QBookVersion bookVersion = QBookVersion.bookVersion;
         QBookMark bookMark = new QBookMark("bookVersion_definition_bookMarks");
         mixin.from(bookVersion);

File: querydsl-mongodb/src/main/java/com/querydsl/mongodb/MongodbExpressions.java
Patch:
@@ -29,7 +29,7 @@ public final class MongodbExpressions {
     private MongodbExpressions() {}
 
     /**
-     * Finds the closest points relative to the given location and orders the results with decreasing promimity
+     * Finds the closest points relative to the given location and orders the results with decreasing proximity
      *
      * @param expr
      * @param latVal latitude

File: querydsl-mongodb/src/main/java/com/querydsl/mongodb/Point.java
Patch:
@@ -41,7 +41,7 @@ public Point(PathMetadata metadata) {
     }
 
     /**
-     * Finds the closest points relative to the given location and orders the results with decreasing promimity
+     * Finds the closest points relative to the given location and orders the results with decreasing proximity
      *
      * @param latVal latitude
      * @param longVal longitude

File: querydsl-mongodb/src/test/java/com/querydsl/mongodb/GeoSpatialQueryTest.java
Patch:
@@ -50,7 +50,7 @@ public GeoSpatialQueryTest() throws UnknownHostException, MongoException {
     @Before
     public void before() {
         ds.delete(ds.createQuery(GeoEntity.class));
-        ds.getCollection(GeoEntity.class).ensureIndex(new BasicDBObject("location","2d"));;
+        ds.getCollection(GeoEntity.class).ensureIndex(new BasicDBObject("location","2d"));
     }
 
     @Test

File: querydsl-spatial/src/main/java/com/querydsl/spatial/path/GeometryPath.java
Patch:
@@ -139,7 +139,7 @@ public PolygonPath<Polygon> asPolygon() {
         return polygon;
     }
 
-    public PolyhedralSurfacePath<PolyHedralSurface> asPolygHedralSurface() {
+    public PolyhedralSurfacePath<PolyHedralSurface> asPolyHedralSurface() {
         if (polyhedralSurface == null) {
             polyhedralSurface = new PolyhedralSurfacePath<PolyHedralSurface>(pathMixin.getMetadata());
         }

File: querydsl-spatial/src/test/java/com/querydsl/spatial/path/GeometryPathTest.java
Patch:
@@ -27,6 +27,6 @@ public void Convert() {
         assertEquals(new MultiPolygonPath<MultiPolygon>("geometry"), geometry.asMultiPolygon());
         assertEquals(new PointPath<Point>("geometry"), geometry.asPoint());
         assertEquals(new PolygonPath<Polygon>("geometry"), geometry.asPolygon());
-        assertEquals(new PolyhedralSurfacePath<PolyHedralSurface>("geometry"), geometry.asPolygHedralSurface());
+        assertEquals(new PolyhedralSurfacePath<PolyHedralSurface>("geometry"), geometry.asPolyHedralSurface());
     }
 }

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/ExtendedBeanSerializer.java
Patch:
@@ -30,7 +30,7 @@
 import com.querydsl.sql.codegen.support.PrimaryKeyData;
 
 /**
- * ExtendedBeanSerialzier outputs primary key based equals, hashCode and toString implementations
+ * ExtendedBeanSerializer outputs primary key based equals, hashCode and toString implementations
  * 
  * @author tiwe
  *

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/MetaDataExporter.java
Patch:
@@ -517,7 +517,7 @@ public void setBeanSuffix(String beanSuffix) {
     /**
      * Override the NamingStrategy (default: new DefaultNamingStrategy())
      *
-     * @param namingStrategy namingstrategy to override (default: new DefaultNamingStrategy())
+     * @param namingStrategy naming strategy to override (default: new DefaultNamingStrategy())
      */
     public void setNamingStrategy(NamingStrategy namingStrategy) {
         module.bind(NamingStrategy.class, namingStrategy);

File: querydsl-sql-codegen/src/main/java/com/querydsl/sql/codegen/ant/AntMetaDataExporter.java
Patch:
@@ -106,7 +106,7 @@ public class AntMetaDataExporter extends Task {
     private String targetFolder;
 
     /**
-     * namingstrategy class to override (default: DefaultNamingStrategy)
+     * naming strategy class to override (default: DefaultNamingStrategy)
      */
     private String namingStrategyClass;
 
@@ -638,4 +638,4 @@ public String getSourceEncoding() {
     public void setSourceEncoding(String sourceEncoding) {
         this.sourceEncoding = sourceEncoding;
     }
-}
\ No newline at end of file
+}

File: querydsl-sql-spatial/src/test/java/com/querydsl/sql/spatial/AbstractConverterTest.java
Patch:
@@ -48,7 +48,7 @@ protected List<Geometry> getGeometries() {
             data.add(new LineString(createSequence(crs, (Point)data.get(i), (Point)data.get(i))));
         }
 
-        // polgyon
+        // polygon
         // TODO
 
         // multipoint

File: querydsl-sql/src/main/java/com/querydsl/sql/RelationalPathExtractor.java
Patch:
@@ -32,7 +32,7 @@
 import com.querydsl.core.types.Visitor;
 
 /**
- * RelationalPathExtractor extracts RelationlPath instances from expressions and queries
+ * RelationalPathExtractor extracts RelationalPath instances from expressions and queries
  *
  * @author tiwe
  *

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLExpressions.java
Patch:
@@ -109,7 +109,7 @@ private static Expression[] convertToExpressions(Object... args) {
     public static final Expression<Object[]> all = Wildcard.all;
 
     /**
-     * Wilcard count expression
+     * Wildcard count expression
      */
     public static final Expression<Long> countAll = Wildcard.count;
 

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLTemplates.java
Patch:
@@ -214,7 +214,7 @@ public SQLTemplates build() {
 
     private String leftJoin = "\nleft join ";
 
-    private String rightJoin = "\nright join ";;
+    private String rightJoin = "\nright join ";
 
     private String limitTemplate = "\nlimit {0}";
 

File: querydsl-sql/src/test/java/com/querydsl/sql/Connections.java
Patch:
@@ -966,7 +966,7 @@ public static void initSQLite() throws SQLException, ClassNotFoundException{
         stmt.execute("create table SURVEY(ID int auto_increment, " +
                 "NAME varchar(30)," +
                 "NAME2 varchar(30)," +
-                "constraint suryey_pk primary key(ID))");
+                "constraint survey_pk primary key(ID))");
         stmt.execute("insert into SURVEY values (1,'Hello World','Hello');");
 
         // test
@@ -1195,4 +1195,4 @@ private static String quote(String sql, String... identifiers) {
     }
 
     private Connections() {}
-}
\ No newline at end of file
+}

File: querydsl-sql/src/test/java/com/querydsl/sql/MergeBase.java
Patch:
@@ -190,7 +190,7 @@ public void MergeBatch_with_subquery() {
 
     @Test
     @IncludeIn(H2)
-    public void Merge_With_TempateExpression_In_Batch() {
+    public void Merge_With_TemplateExpression_In_Batch() {
         SQLMergeClause merge = merge(survey)
                 .keys(survey.id)
                 .set(survey.id, 5)

File: querydsl-apt/src/test/java/com/querydsl/apt/GenericExporterTest.java
Patch:
@@ -102,6 +102,7 @@ public void Execute2() throws IOException {
         expected.add("QGeneric16Test_HidaBez.java");
         expected.add("QGeneric16Test_HidaBezGruppe.java");
         expected.add("QProperties2Test_ConcreteX.java");
+        expected.add("QProperties3Test_Order.java");
 
         execute(expected, "GenericExporterTest2", "HibernateAnnotationProcessor");
     }

File: querydsl-apt/src/test/java/com/querydsl/apt/GenericExporterTest.java
Patch:
@@ -102,6 +102,7 @@ public void Execute2() throws IOException {
         expected.add("QGeneric16Test_HidaBez.java");
         expected.add("QGeneric16Test_HidaBezGruppe.java");
         expected.add("QProperties2Test_ConcreteX.java");
+        expected.add("QProperties3Test_Order.java");
 
         execute(expected, "GenericExporterTest2", "HibernateAnnotationProcessor");
     }

File: querydsl-core/src/main/java/com/querydsl/core/group/GroupBy.java
Patch:
@@ -103,7 +103,7 @@ public static <E, F> AbstractGroupExpression<E, List<F>> list(GroupExpression<E,
     }
 
     /**
-     * Create a new aggregating set expression using a backing LinkedHashMap
+     * Create a new aggregating set expression using a backing LinkedHashSet
      *
      * @param expression
      * @return

File: querydsl-sql/src/test/java/com/querydsl/sql/UpdateBase.java
Patch:
@@ -190,7 +190,7 @@ public void Update_with_SubQuery_notExists() {
     }
 
     @Test
-    public void Update_With_TempateExpression_In_Batch() {
+    public void Update_With_TemplateExpression_In_Batch() {
         update(survey)
             .set(survey.id, 3)
             .set(survey.name, Expressions.stringTemplate("'Hello'"))

File: querydsl-core/src/main/java/com/querydsl/core/group/GroupBy.java
Patch:
@@ -103,7 +103,7 @@ public static <E, F> AbstractGroupExpression<E, List<F>> list(GroupExpression<E,
     }
 
     /**
-     * Create a new aggregating set expression using a backing LinkedHashMap
+     * Create a new aggregating set expression using a backing LinkedHashSet
      *
      * @param expression
      * @return

File: querydsl-core/src/main/java/com/querydsl/core/alias/PropertyAccessInvocationHandler.java
Patch:
@@ -32,7 +32,7 @@
 
 import com.google.common.collect.ImmutableList;
 import com.querydsl.core.types.Expression;
-import com.querydsl.core.types.ParametrizedExpression;
+import com.querydsl.core.types.ParameterizedExpression;
 import com.querydsl.core.types.Path;
 import com.querydsl.core.types.PathMetadata;
 import com.querydsl.core.types.PathMetadataFactory;
@@ -109,7 +109,7 @@ public Object intercept(Object proxy, Method method, Object[] args, MethodProxy
                 rv = propToObj.get(propKey);
             } else {
                 PathMetadata pm = createListAccessPath((Path<?>) hostExpression, (Integer) args[0]);
-                Class<?> elementType = ((ParametrizedExpression<?>) hostExpression).getParameter(0);
+                Class<?> elementType = ((ParameterizedExpression<?>) hostExpression).getParameter(0);
                 rv = newInstance(elementType, elementType, proxy, propKey, pm);
             }
             aliasFactory.setCurrent(propToExpr.get(propKey));
@@ -120,7 +120,7 @@ public Object intercept(Object proxy, Method method, Object[] args, MethodProxy
                 rv = propToObj.get(propKey);
             } else {
                 PathMetadata pm = createMapAccessPath((Path<?>)hostExpression, args[0]);
-                Class<?> valueType = ((ParametrizedExpression<?>) hostExpression).getParameter(1);
+                Class<?> valueType = ((ParameterizedExpression<?>) hostExpression).getParameter(1);
                 rv = newInstance(valueType, valueType, proxy, propKey, pm);
             }
             aliasFactory.setCurrent(propToExpr.get(propKey));

File: querydsl-core/src/main/java/com/querydsl/core/types/CollectionExpression.java
Patch:
@@ -24,6 +24,6 @@
  * @param <E> element type
  * @see java.util.Collection
  */
-public interface CollectionExpression<T extends Collection<E>, E> extends ParametrizedExpression<T> {
+public interface CollectionExpression<T extends Collection<E>, E> extends ParameterizedExpression<T> {
 
 }

File: querydsl-core/src/main/java/com/querydsl/core/types/MapExpression.java
Patch:
@@ -24,6 +24,6 @@
  * @param <V> value type
  * @see java.util.Map
  */
-public interface MapExpression<K, V> extends ParametrizedExpression<Map<K,V>> {
+public interface MapExpression<K, V> extends ParameterizedExpression<Map<K,V>> {
 
 }

File: querydsl-core/src/main/java/com/querydsl/core/types/Operator.java
Patch:
@@ -17,7 +17,7 @@
 
 /**
  * Operator represents operator symbols.
- * <p>Implementations should enums for automatic instance management.</p>
+ * <p>Implementations should be enums for automatic instance management.</p>
  *
  * @author tiwe
  */

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPAMapAccessVisitor.java
Patch:
@@ -30,7 +30,7 @@ public Expression<?> visit(Path<?> expr, @Nullable Void context) {
             if (replacement == null) {
                 // join parent as path123 on key(path123) = ...
                 Path parent = pathMetadata.getParent();
-                ParametrizedExpression parExpr = (ParametrizedExpression) parent;
+                ParameterizedExpression parExpr = (ParameterizedExpression) parent;
                 replacement = new PathImpl(parExpr.getParameter(1),
                         ExpressionUtils.createRootVariable(parent));
                 metadata.addJoin(JoinType.JOIN, ExpressionUtils.as(parent, replacement));

File: querydsl-core/src/main/java/com/querydsl/core/types/Operator.java
Patch:
@@ -17,7 +17,7 @@
 
 /**
  * Operator represents operator symbols.
- * <p>Implementations should enums for automatic instance management.</p>
+ * <p>Implementations should be enums for automatic instance management.</p>
  *
  * @author tiwe
  */

File: querydsl-core/src/main/java/com/querydsl/core/alias/PropertyAccessInvocationHandler.java
Patch:
@@ -32,7 +32,7 @@
 
 import com.google.common.collect.ImmutableList;
 import com.querydsl.core.types.Expression;
-import com.querydsl.core.types.ParametrizedExpression;
+import com.querydsl.core.types.ParameterizedExpression;
 import com.querydsl.core.types.Path;
 import com.querydsl.core.types.PathMetadata;
 import com.querydsl.core.types.PathMetadataFactory;
@@ -109,7 +109,7 @@ public Object intercept(Object proxy, Method method, Object[] args, MethodProxy
                 rv = propToObj.get(propKey);
             } else {
                 PathMetadata pm = createListAccessPath((Path<?>) hostExpression, (Integer) args[0]);
-                Class<?> elementType = ((ParametrizedExpression<?>) hostExpression).getParameter(0);
+                Class<?> elementType = ((ParameterizedExpression<?>) hostExpression).getParameter(0);
                 rv = newInstance(elementType, elementType, proxy, propKey, pm);
             }
             aliasFactory.setCurrent(propToExpr.get(propKey));
@@ -120,7 +120,7 @@ public Object intercept(Object proxy, Method method, Object[] args, MethodProxy
                 rv = propToObj.get(propKey);
             } else {
                 PathMetadata pm = createMapAccessPath((Path<?>)hostExpression, args[0]);
-                Class<?> valueType = ((ParametrizedExpression<?>) hostExpression).getParameter(1);
+                Class<?> valueType = ((ParameterizedExpression<?>) hostExpression).getParameter(1);
                 rv = newInstance(valueType, valueType, proxy, propKey, pm);
             }
             aliasFactory.setCurrent(propToExpr.get(propKey));

File: querydsl-core/src/main/java/com/querydsl/core/types/CollectionExpression.java
Patch:
@@ -24,6 +24,6 @@
  * @param <E> element type
  * @see java.util.Collection
  */
-public interface CollectionExpression<T extends Collection<E>, E> extends ParametrizedExpression<T> {
+public interface CollectionExpression<T extends Collection<E>, E> extends ParameterizedExpression<T> {
 
 }

File: querydsl-core/src/main/java/com/querydsl/core/types/MapExpression.java
Patch:
@@ -24,6 +24,6 @@
  * @param <V> value type
  * @see java.util.Map
  */
-public interface MapExpression<K, V> extends ParametrizedExpression<Map<K,V>> {
+public interface MapExpression<K, V> extends ParameterizedExpression<Map<K,V>> {
 
 }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPAMapAccessVisitor.java
Patch:
@@ -30,7 +30,7 @@ public Expression<?> visit(Path<?> expr, @Nullable Void context) {
             if (replacement == null) {
                 // join parent as path123 on key(path123) = ...
                 Path parent = pathMetadata.getParent();
-                ParametrizedExpression parExpr = (ParametrizedExpression) parent;
+                ParameterizedExpression parExpr = (ParameterizedExpression) parent;
                 replacement = new PathImpl(parExpr.getParameter(1),
                         ExpressionUtils.createRootVariable(parent));
                 metadata.addJoin(JoinType.JOIN, ExpressionUtils.as(parent, replacement));

File: querydsl-jpa/src/main/java/com/querydsl/jpa/EclipseLinkTemplates.java
Patch:
@@ -66,7 +66,7 @@ public EclipseLinkTemplates(char escape) {
 
         add(Ops.CHAR_AT, "substring({0},{1}+1,1)");
         add(JPQLOps.CAST, "cast({0} {1s})");
-        add(Ops.STRING_CAST, "cast({0} varchar(255))");
+        add(Ops.STRING_CAST, "trim(cast({0} char(128)))");
         add(Ops.NUMCAST, "cast({0} {1s})");
 
         // datetime

File: querydsl-sql/src/main/java/com/querydsl/sql/OracleTemplates.java
Patch:
@@ -121,7 +121,7 @@ public OracleTemplates(char escape, boolean quote) {
         add(Ops.DateTimeOps.TRUNC_YEAR, "trunc({0}, 'year')");
         add(Ops.DateTimeOps.TRUNC_MONTH, "trunc({0}, 'month')");
         add(Ops.DateTimeOps.TRUNC_WEEK, "trunc({0}, 'w')");
-        add(Ops.DateTimeOps.TRUNC_DAY, "trunc({0}, 'day')");
+        add(Ops.DateTimeOps.TRUNC_DAY, "trunc({0}, 'dd')");
         add(Ops.DateTimeOps.TRUNC_HOUR, "trunc({0}, 'hh')");
         add(Ops.DateTimeOps.TRUNC_MINUTE, "trunc({0}, 'mi')");
         add(Ops.DateTimeOps.TRUNC_SECOND, "{0}"); // not truncated

File: querydsl-sql/src/main/java/com/querydsl/sql/TeradataTemplates.java
Patch:
@@ -102,8 +102,8 @@ public TeradataTemplates(char escape, boolean quote) {
         add(Ops.DateTimeOps.TRUNC_YEAR, "trunc({0}, 'year')");
         add(Ops.DateTimeOps.TRUNC_MONTH, "trunc({0}, 'month')");
         add(Ops.DateTimeOps.TRUNC_WEEK, "trunc({0}, 'w')");
-        add(Ops.DateTimeOps.TRUNC_DAY, "trunc({0}, 'day')");
-        add(Ops.DateTimeOps.TRUNC_HOUR, "trunc({0}, 'hh')");
+        add(Ops.DateTimeOps.TRUNC_DAY, "trunc({0}, 'dd')");
+        add(Ops.DateTimeOps.TRUNC_HOUR, "trunc({0}, 'hh24')");
         add(Ops.DateTimeOps.TRUNC_MINUTE, "trunc({0}, 'mi')");
         add(Ops.DateTimeOps.TRUNC_SECOND, "{0}"); // not truncated
     }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/EclipseLinkTemplates.java
Patch:
@@ -66,7 +66,7 @@ public EclipseLinkTemplates(char escape) {
 
         add(Ops.CHAR_AT, "substring({0},{1}+1,1)");
         add(JPQLOps.CAST, "cast({0} {1s})");
-        add(Ops.STRING_CAST, "cast({0} varchar(255))");
+        add(Ops.STRING_CAST, "trim(cast({0} char(128)))");
         add(Ops.NUMCAST, "cast({0} {1s})");
 
         // datetime

File: querydsl-sql/src/test/java/com/querydsl/sql/JDBCTypeMappingTest.java
Patch:
@@ -66,8 +66,7 @@ public void NumericTypes() {
 //        10-18,0    -> Long
 //        5-9,0      -> Integer
 //        3-4,0      -> Short
-//        2,0        -> Byte
-//        0-1,0      -> Boolean
+//        1-2,0      -> Byte
 
 //        ?,?   -> BigDecimal
         assertEquals(typeMapping.get(Types.NUMERIC, 20, 0), BigInteger.class);

File: querydsl-collections/src/main/java/com/querydsl/collections/CollQueryMixin.java
Patch:
@@ -44,7 +44,7 @@ public CollQueryMixin(T self, QueryMetadata metadata) {
     }
 
     @Override
-    protected Predicate normalize(Predicate predicate, boolean where) {
+    protected Predicate convert(Predicate predicate, Role role) {
         predicate = (Predicate)ExpressionUtils.extract(predicate);
         if (predicate != null) {
             Context context = new Context();

File: querydsl-core/src/main/java/com/querydsl/core/support/DetachableMixin.java
Patch:
@@ -107,7 +107,7 @@ private QueryMetadata projection(Expression<?>... projection) {
         QueryMetadata metadata = queryMixin.getMetadata().clone();
         Expression<?>[] copy = new Expression<?>[projection.length];
         for (int i = 0; i < copy.length; i++) {
-            Expression<?> expr = queryMixin.convert(projection[i], false);
+            Expression<?> expr = queryMixin.convert(projection[i], QueryMixin.Role.SELECT);
             copy[i] = nullAsTemplate(expr);
         }
         metadata.setProjection(Projections.tuple(copy));
@@ -116,7 +116,7 @@ private QueryMetadata projection(Expression<?>... projection) {
 
     private QueryMetadata projection(Expression<?> projection) {
         QueryMetadata metadata = queryMixin.getMetadata().clone();
-        Expression<?> expr = queryMixin.convert(projection, false);
+        Expression<?> expr = queryMixin.convert(projection, QueryMixin.Role.SELECT);
         expr = nullAsTemplate(expr);
         metadata.setProjection(expr);
         return metadata;

File: querydsl-core/src/main/java/com/querydsl/core/types/expr/StringExpression.java
Patch:
@@ -396,7 +396,7 @@ public StringExpression lower() {
     /**
      * Return true if this String matches the given regular expression
      * 
-     * <p>Some implementations such as Querydsl JPA will try to convert a regex expression into like 
+     * <p>Some implementations such as Querydsl JPA will try to convert a regex expression into like
      * form and will throw an Exception when this fails</p>
      *
      * @param regex
@@ -410,7 +410,7 @@ public BooleanExpression matches(Expression<String> regex) {
     /**
      * Return true if this String matches the given regular expression
      * 
-     * <p>Some implementations such as Querydsl JPA will try to convert a regex expression into like 
+     * <p>Some implementations such as Querydsl JPA will try to convert a regex expression into like
      * form and will throw an Exception when this fails</p>
      *
      * @param regex

File: querydsl-sql/src/main/java/com/querydsl/sql/DetachableSQLQuery.java
Patch:
@@ -42,11 +42,11 @@
 public abstract class DetachableSQLQuery<Q extends DetachableSQLQuery<Q>> extends DetachableQuery<Q> implements SQLCommonQuery<Q> {
 
     protected final Configuration configuration;
-    
+
     public DetachableSQLQuery() {
         this(new DefaultQueryMetadata().noValidate());
     }
-    
+
     public DetachableSQLQuery(QueryMetadata metadata) {
         this(Configuration.DEFAULT, metadata);
     }

File: querydsl-sql/src/main/java/com/querydsl/sql/JDBCTypeMapping.java
Patch:
@@ -35,7 +35,7 @@
  * @author tiwe
  *
  */
-public final class JDBCTypeMapping {
+final class JDBCTypeMapping {
 
     private static final Set<Integer> NUMERIC_TYPES;
 

File: querydsl-core/src/test/java/com/querydsl/core/types/expr/OperationTest.java
Patch:
@@ -45,9 +45,9 @@ public void Various() {
         operations.add(new ComparableOperation(String.class, Ops.SUBSTR_1ARG, args));
         operations.add(new DateOperation(Date.class, Ops.DateTimeOps.CURRENT_DATE, args));
         operations.add(new DateTimeOperation(Date.class,Ops.DateTimeOps.CURRENT_TIMESTAMP, args));
-        operations.add(new EnumOperation(ExampleEnum.class,Ops.IS_NOT_NULL, args));
+        operations.add(new EnumOperation(ExampleEnum.class,Ops.ALIAS, args));
         operations.add(new NumberOperation(Integer.class,Ops.ADD, args));
-        operations.add(new SimpleOperation(String.class,Ops.EQ, args));
+        operations.add(new SimpleOperation(String.class,Ops.TRIM, args));
         operations.add(new StringOperation(Ops.CONCAT, args));
         operations.add(new TimeOperation(Time.class,Ops.DateTimeOps.CURRENT_TIME, args));
         

File: querydsl-jpa/src/test/java/com/querydsl/jpa/JPAQueryMutability2Test.java
Patch:
@@ -34,6 +34,7 @@ public class JPAQueryMutability2Test implements JPATest {
     private final Operator customOperator = new Operator() {
         public String name() { return "custom"; }
         public String toString() { return name(); }
+        public Class<?> getType() { return Object.class; }
     };
 
     private final JPQLTemplates customTemplates = new HQLTemplates() {{

File: querydsl-sql/src/test/java/com/querydsl/sql/SQLSubQueryTest.java
Patch:
@@ -38,6 +38,7 @@ public void UnknownOperator() {
         Operator op = new Operator() {
             public String name() { return "unknownfn"; }
             public String toString() { return name(); }
+            public Class<?> getType() { return Object.class; }
         };
         SQLSubQuery query = new SQLSubQuery();
         query.from(employee)

File: querydsl-sql/src/main/java/com/querydsl/sql/DB2Templates.java
Patch:
@@ -184,7 +184,7 @@ public DB2Templates(char escape, boolean quote) {
         add(Ops.DateTimeOps.TRUNC_YEAR, "trunc_timestamp({0}, 'year')");
         add(Ops.DateTimeOps.TRUNC_MONTH, "trunc_timestamp({0}, 'month')");
         add(Ops.DateTimeOps.TRUNC_WEEK, "trunc_timestamp({0}, 'week')");
-        add(Ops.DateTimeOps.TRUNC_DAY, "trunc_timestamp({0}, 'day')");
+        add(Ops.DateTimeOps.TRUNC_DAY, "trunc_timestamp({0}, 'dd')");
         add(Ops.DateTimeOps.TRUNC_HOUR, "trunc_timestamp({0}, 'hour')");
         add(Ops.DateTimeOps.TRUNC_MINUTE, "trunc_timestamp({0}, 'minute')");
         add(Ops.DateTimeOps.TRUNC_SECOND, "trunc_timestamp({0}, 'second')");

File: querydsl-sql/src/main/java/com/querydsl/sql/OracleTemplates.java
Patch:
@@ -121,7 +121,7 @@ public OracleTemplates(char escape, boolean quote) {
         add(Ops.DateTimeOps.TRUNC_YEAR, "trunc({0}, 'year')");
         add(Ops.DateTimeOps.TRUNC_MONTH, "trunc({0}, 'month')");
         add(Ops.DateTimeOps.TRUNC_WEEK, "trunc({0}, 'w')");
-        add(Ops.DateTimeOps.TRUNC_DAY, "trunc({0}, 'day')");
+        add(Ops.DateTimeOps.TRUNC_DAY, "trunc({0}, 'dd')");
         add(Ops.DateTimeOps.TRUNC_HOUR, "trunc({0}, 'hh')");
         add(Ops.DateTimeOps.TRUNC_MINUTE, "trunc({0}, 'mi')");
         add(Ops.DateTimeOps.TRUNC_SECOND, "{0}"); // not truncated

File: querydsl-sql/src/main/java/com/querydsl/sql/TeradataTemplates.java
Patch:
@@ -102,7 +102,7 @@ public TeradataTemplates(char escape, boolean quote) {
         add(Ops.DateTimeOps.TRUNC_YEAR, "trunc({0}, 'year')");
         add(Ops.DateTimeOps.TRUNC_MONTH, "trunc({0}, 'month')");
         add(Ops.DateTimeOps.TRUNC_WEEK, "trunc({0}, 'w')");
-        add(Ops.DateTimeOps.TRUNC_DAY, "trunc({0}, 'day')");
+        add(Ops.DateTimeOps.TRUNC_DAY, "trunc({0}, 'dd')");
         add(Ops.DateTimeOps.TRUNC_HOUR, "trunc({0}, 'hh')");
         add(Ops.DateTimeOps.TRUNC_MINUTE, "trunc({0}, 'mi')");
         add(Ops.DateTimeOps.TRUNC_SECOND, "{0}"); // not truncated

File: querydsl-core/src/main/java/com/querydsl/core/support/ReplaceVisitor.java
Patch:
@@ -15,8 +15,8 @@
 
 import java.util.List;
 import java.util.Map;
-import java.util.Objects;
 
+import com.google.common.base.Objects;
 import com.google.common.collect.ImmutableList;
 import com.querydsl.core.*;
 import com.querydsl.core.types.*;
@@ -71,7 +71,7 @@ public Expression<?> visit(Path<?> expr, C context) {
             if (element instanceof Expression<?>) {
                 element = ((Expression) element).accept(this, context);
             }
-            if (parent.equals(metadata.getParent()) && Objects.equals(element, metadata.getElement())) {
+            if (parent.equals(metadata.getParent()) && Objects.equal(element, metadata.getElement())) {
                 return expr;
             } else {
                 metadata = new PathMetadata(parent, element, metadata.getPathType());

File: querydsl-mongodb/src/main/java/com/querydsl/mongodb/morphia/MorphiaQuery.java
Patch:
@@ -32,7 +32,7 @@
  * @author tiwe
  *
  */
-public class MorphiaQuery<K> extends MongodbQuery<K> {
+public class MorphiaQuery<K> extends MongodbQuery<MorphiaQuery<K>, K> {
 
     private final EntityCache cache;
 

File: querydsl-mongodb/src/test/java/com/querydsl/mongodb/JoinTest.java
Patch:
@@ -145,11 +145,11 @@ public void Deep() {
                 .singleResult().getFirstName());
     }
 
-    private MongodbQuery<User> query() {
+    private MorphiaQuery<User> query() {
         return new MorphiaQuery<User>(morphia, ds, user);
     }
 
-    private MongodbQuery<User> where(Predicate ... e) {
+    private MorphiaQuery<User> where(Predicate ... e) {
         return query().where(e);
     }
 }

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPAListAccessVisitor.java
Patch:
@@ -11,7 +11,7 @@
 import com.querydsl.core.support.ReplaceVisitor;
 import com.querydsl.core.types.*;
 
-class JPAListAccessVisitor extends ReplaceVisitor {
+class JPAListAccessVisitor extends ReplaceVisitor<Void> {
 
     private final QueryMetadata metadata;
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPAMapAccessVisitor.java
Patch:
@@ -11,7 +11,7 @@
 import com.querydsl.core.support.ReplaceVisitor;
 import com.querydsl.core.types.*;
 
-class JPAMapAccessVisitor extends ReplaceVisitor {
+class JPAMapAccessVisitor extends ReplaceVisitor<Void> {
 
     private final QueryMetadata metadata;
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPAListAccessVisitor.java
Patch:
@@ -11,7 +11,7 @@
 import com.querydsl.core.support.ReplaceVisitor;
 import com.querydsl.core.types.*;
 
-class JPAListAccessVisitor extends ReplaceVisitor {
+class JPAListAccessVisitor extends ReplaceVisitor<Void> {
 
     private final QueryMetadata metadata;
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPAMapAccessVisitor.java
Patch:
@@ -11,7 +11,7 @@
 import com.querydsl.core.support.ReplaceVisitor;
 import com.querydsl.core.types.*;
 
-class JPAMapAccessVisitor extends ReplaceVisitor {
+class JPAMapAccessVisitor extends ReplaceVisitor<Void> {
 
     private final QueryMetadata metadata;
 

File: querydsl-codegen/src/test/java/com/querydsl/codegen/Point.java
Patch:
@@ -30,7 +30,7 @@ public Point(Path<?> parent, String property) {
         super(Double[].class, parent, property);
     }
 
-    public Point(PathMetadata<?> metadata) {
+    public Point(PathMetadata metadata) {
         super(Double[].class, metadata);
     }
 

File: querydsl-collections/src/test/java/com/querydsl/collections/QCar.java
Patch:
@@ -19,7 +19,7 @@ public QCar(BeanPath<? extends Car> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QCar(PathMetadata<?> metadata) {
+    public QCar(PathMetadata metadata) {
         super(Car.class, metadata);
     }
 

File: querydsl-collections/src/test/java/com/querydsl/collections/QPerson.java
Patch:
@@ -14,7 +14,7 @@ public QPerson(BeanPath<? extends Person> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QPerson(PathMetadata<?> metadata) {
+    public QPerson(PathMetadata metadata) {
         super(Person.class, metadata);
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/support/CollectionAnyVisitor.java
Patch:
@@ -41,7 +41,7 @@ public class CollectionAnyVisitor implements Visitor<Expression<?>,Context> {
 
     @SuppressWarnings("rawtypes")
     private static <T> Path<T> replaceParent(Path<T> path, Path<?> parent) {
-        PathMetadata<?> metadata = new PathMetadata<Object>(parent, path.getMetadata().getElement(),
+        PathMetadata metadata = new PathMetadata(parent, path.getMetadata().getElement(),
                 path.getMetadata().getPathType());
         if (path instanceof CollectionExpression) {
             CollectionExpression<?,?> col = (CollectionExpression<?,?>)path;

File: querydsl-core/src/main/java/com/querydsl/core/support/ListAccessVisitor.java
Patch:
@@ -61,7 +61,7 @@ private static final class UnderscoreTemplates extends Templates {
         
     @SuppressWarnings("unchecked")
     private static <T> Path<T> replaceParent(Path<T> path, Path<?> parent) {
-        PathMetadata<?> metadata = new PathMetadata(parent, path.getMetadata().getElement(), 
+        PathMetadata metadata = new PathMetadata(parent, path.getMetadata().getElement(),
                 path.getMetadata().getPathType());
         return new PathImpl<T>(path.getType(), metadata);
     }

File: querydsl-core/src/main/java/com/querydsl/core/types/Path.java
Patch:
@@ -27,7 +27,7 @@ public interface Path<T> extends Expression<T> {
      *
      * @return
      */
-    PathMetadata<?> getMetadata();
+    PathMetadata getMetadata();
 
     /**
      * Get the root for this path

File: querydsl-core/src/main/java/com/querydsl/core/types/PathImpl.java
Patch:
@@ -32,7 +32,7 @@ public class PathImpl<T> extends ExpressionBase<T> implements Path<T> {
 
     private static final long serialVersionUID = -2498447742798348162L;
 
-    private final PathMetadata<?> metadata;
+    private final PathMetadata metadata;
 
     private final Path<?> root;
 
@@ -43,7 +43,7 @@ public PathImpl(Class<? extends T> type, String variable) {
         this(type, PathMetadataFactory.forVariable(variable));
     }
 
-    public PathImpl(Class<? extends T> type, PathMetadata<?> metadata) {
+    public PathImpl(Class<? extends T> type, PathMetadata metadata) {
         super(type);
         this.metadata = metadata;
         this.root = metadata.getRootPath() != null ? metadata.getRootPath() : this;
@@ -65,7 +65,7 @@ public final boolean equals(Object o) {
     }
 
     @Override
-    public final PathMetadata<?> getMetadata() {
+    public final PathMetadata getMetadata() {
         return metadata;
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/types/PathMetadata.java
Patch:
@@ -26,7 +26,7 @@
  * @author tiwe
  */
 @Immutable
-public final class PathMetadata<T> implements Serializable{
+public final class PathMetadata implements Serializable{
 
     private static final long serialVersionUID = -1055994185028970065L;
 
@@ -51,8 +51,8 @@ public PathMetadata(@Nullable Path<?> parent, Object element, PathType type) {
     public boolean equals(Object obj) {
         if (obj == this) {
             return true;
-        } else if (obj instanceof PathMetadata<?>) {
-            PathMetadata<?> p = (PathMetadata<?>) obj;
+        } else if (obj instanceof PathMetadata) {
+            PathMetadata p = (PathMetadata) obj;
             return element.equals(p.element) &&
                     pathType == p.pathType &&
                     Objects.equal(parent, p.parent);

File: querydsl-core/src/main/java/com/querydsl/core/types/path/BooleanPath.java
Patch:
@@ -39,7 +39,7 @@ public BooleanPath(Path<?> parent, String property) {
         this(PathMetadataFactory.forProperty(parent, property));
     }
 
-    public BooleanPath(PathMetadata<?> metadata) {
+    public BooleanPath(PathMetadata metadata) {
         super(new PathImpl<Boolean>(Boolean.class, metadata));
         this.pathMixin = (PathImpl<Boolean>)mixin;
     }
@@ -54,7 +54,7 @@ public final <R,C> R accept(Visitor<R,C> v, C context) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/types/path/CollectionPath.java
Patch:
@@ -54,12 +54,12 @@ public CollectionPath(Class<? super E> type, Class<Q> queryType, Path<?> parent,
         this(type, queryType, PathMetadataFactory.forProperty(parent, property));
     }
     
-    public CollectionPath(Class<? super E> type, Class<Q> queryType, PathMetadata<?> metadata) {
+    public CollectionPath(Class<? super E> type, Class<Q> queryType, PathMetadata metadata) {
         this(type, queryType, metadata, PathInits.DIRECT);
     }
     
     @SuppressWarnings("unchecked")
-    public CollectionPath(Class<? super E> type, Class<Q> queryType, PathMetadata<?> metadata, PathInits inits) {
+    public CollectionPath(Class<? super E> type, Class<Q> queryType, PathMetadata metadata, PathInits inits) {
         super(new PathImpl<Collection<E>>((Class)Collection.class, metadata), inits);
         this.elementType = (Class<E>)type;
         this.queryType = queryType;
@@ -84,7 +84,7 @@ public Class<E> getElementType() {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/types/path/CollectionPathBase.java
Patch:
@@ -54,7 +54,7 @@ public CollectionPathBase(PathImpl<C> mixin, PathInits inits) {
     public abstract Q any();
     
     @SuppressWarnings("unchecked")
-    protected Q newInstance(Class<Q> queryType, PathMetadata<?> pm) {
+    protected Q newInstance(Class<Q> queryType, PathMetadata pm) {
         try{
             if (constructor == null) {
                 if (Constants.isTyped(queryType)) {

File: querydsl-core/src/main/java/com/querydsl/core/types/path/ComparableEntityPath.java
Patch:
@@ -33,7 +33,7 @@ public ComparableEntityPath(Class<? extends T> type, Path<?> parent, String prop
         super(type, parent, property);
     }
 
-    public ComparableEntityPath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public ComparableEntityPath(Class<? extends T> type, PathMetadata metadata) {
         super(type, metadata);
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/types/path/ComparablePath.java
Patch:
@@ -41,7 +41,7 @@ public ComparablePath(Class<? extends T> type, Path<?> parent, String property)
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public ComparablePath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public ComparablePath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -56,7 +56,7 @@ public final <R,C> R accept(Visitor<R,C> v, C context) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/types/path/DatePath.java
Patch:
@@ -40,7 +40,7 @@ public DatePath(Class<? extends T> type, Path<?> parent, String property) {
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public DatePath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public DatePath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -55,7 +55,7 @@ public final <R,C> R accept(Visitor<R,C> v, C context) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/types/path/DateTimePath.java
Patch:
@@ -39,7 +39,7 @@ public DateTimePath(Class<? extends T> type, Path<?> parent, String property) {
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public DateTimePath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public DateTimePath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -54,7 +54,7 @@ public final <R,C> R accept(Visitor<R,C> v, C context) {
     }
     
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/types/path/DslPath.java
Patch:
@@ -39,7 +39,7 @@ public DslPath(Class<? extends T> type, Path<?> parent, String property) {
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public DslPath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public DslPath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -54,7 +54,7 @@ public final <R,C> R accept(Visitor<R,C> v, C context) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/types/path/EntityPathBase.java
Patch:
@@ -34,11 +34,11 @@ public EntityPathBase(Class<? extends T> type, String variable) {
         super(type, variable);
     }
 
-    public EntityPathBase(Class<? extends T> type, PathMetadata<?> metadata) {
+    public EntityPathBase(Class<? extends T> type, PathMetadata metadata) {
         super(type, metadata);
     }
 
-    public EntityPathBase(Class<? extends T> type, PathMetadata<?> metadata, @Nullable PathInits inits) {
+    public EntityPathBase(Class<? extends T> type, PathMetadata metadata, @Nullable PathInits inits) {
         super(type, metadata, inits);
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/types/path/EnumPath.java
Patch:
@@ -39,7 +39,7 @@ public EnumPath(Class<? extends T> type, Path<?> parent, String property) {
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public EnumPath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public EnumPath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -54,7 +54,7 @@ public final <R,C> R accept(Visitor<R,C> v, C context) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/types/path/NumberPath.java
Patch:
@@ -39,7 +39,7 @@ public NumberPath(Class<? extends T> type, Path<?> parent, String property) {
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public NumberPath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public NumberPath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -54,7 +54,7 @@ public final <R,C> R accept(Visitor<R,C> v, C context) {
     }
     
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/types/path/PathBuilder.java
Patch:
@@ -57,7 +57,7 @@ public class PathBuilder<T> extends EntityPathBase<T> {
      * @param pathMetadata
      * @param validator
      */
-    public PathBuilder(Class<? extends T> type, PathMetadata<?> pathMetadata, PathBuilderValidator validator) {
+    public PathBuilder(Class<? extends T> type, PathMetadata pathMetadata, PathBuilderValidator validator) {
         super(type, pathMetadata);
         this.validator = validator;
     }
@@ -68,7 +68,7 @@ public PathBuilder(Class<? extends T> type, PathMetadata<?> pathMetadata, PathBu
      * @param type
      * @param pathMetadata
      */
-    public PathBuilder(Class<? extends T> type, PathMetadata<?> pathMetadata) {
+    public PathBuilder(Class<? extends T> type, PathMetadata pathMetadata) {
         this(type, pathMetadata, PathBuilderValidator.DEFAULT);
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/types/path/SetPath.java
Patch:
@@ -54,12 +54,12 @@ public SetPath(Class<? super E> type, Class<Q> queryType, Path<?> parent, String
         this(type, queryType, PathMetadataFactory.forProperty(parent, property));
     }
     
-    public SetPath(Class<? super E> type, Class<Q> queryType, PathMetadata<?> metadata) {
+    public SetPath(Class<? super E> type, Class<Q> queryType, PathMetadata metadata) {
         this(type, queryType, metadata, PathInits.DIRECT);
     }
     
     @SuppressWarnings("unchecked")
-    public SetPath(Class<? super E> type, Class<Q> queryType, PathMetadata<?> metadata, PathInits inits) {
+    public SetPath(Class<? super E> type, Class<Q> queryType, PathMetadata metadata, PathInits inits) {
         super(new PathImpl<Set<E>>((Class)Set.class, metadata), inits);
         this.elementType = (Class<E>)type;
         this.queryType = queryType;
@@ -84,7 +84,7 @@ public Class<E> getElementType() {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/types/path/SimplePath.java
Patch:
@@ -39,7 +39,7 @@ public SimplePath(Class<? extends T> type, Path<?> parent, String property) {
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public SimplePath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public SimplePath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -54,7 +54,7 @@ public SimplePath(Class<? extends T> type, String var) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/types/path/StringPath.java
Patch:
@@ -38,7 +38,7 @@ public StringPath(Path<?> parent, String property) {
         this(PathMetadataFactory.forProperty(parent, property));
     }
 
-    public StringPath(PathMetadata<?> metadata) {
+    public StringPath(PathMetadata metadata) {
         super(new PathImpl<String>(String.class, metadata));
         this.pathMixin = (PathImpl<String>)mixin;
     }
@@ -53,7 +53,7 @@ public final <R,C> R accept(Visitor<R,C> v, C context) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-core/src/main/java/com/querydsl/core/types/path/TimePath.java
Patch:
@@ -39,7 +39,7 @@ public TimePath(Class<? extends T> type, Path<?> parent, String property) {
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public TimePath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public TimePath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -54,7 +54,7 @@ public final <R,C> R accept(Visitor<R,C> v, C context) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/QDefaultQueryMetadata.java
Patch:
@@ -76,7 +76,7 @@ public QDefaultQueryMetadata(BeanPath<? extends DefaultQueryMetadata> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QDefaultQueryMetadata(PathMetadata<?> metadata) {
+    public QDefaultQueryMetadata(PathMetadata metadata) {
         super(DefaultQueryMetadata.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/alias/PathFactoryTest.java
Patch:
@@ -34,7 +34,7 @@ public class PathFactoryTest {
 
     private PathFactory pathFactory = new DefaultPathFactory();
     
-    private PathMetadata<?> metadata = PathMetadataFactory.forVariable("var");
+    private PathMetadata metadata = PathMetadataFactory.forVariable("var");
     
     @Test
     public void CreateArrayPath() {

File: querydsl-core/src/test/java/com/querydsl/core/domain/QAbstractEntity.java
Patch:
@@ -41,7 +41,7 @@ public QAbstractEntity(BeanPath<? extends AbstractEntity<?>> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QAbstractEntity(PathMetadata<?> metadata) {
+    public QAbstractEntity(PathMetadata metadata) {
         super(AbstractEntity.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/QAnimal.java
Patch:
@@ -54,7 +54,7 @@ public QAnimal(BeanPath<? extends Animal> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QAnimal(PathMetadata<?> metadata) {
+    public QAnimal(PathMetadata metadata) {
         super(Animal.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/QCat.java
Patch:
@@ -71,15 +71,15 @@ public QCat(String variable) {
         this(Cat.class, forVariable(variable), INITS);
     }
 
-    public QCat(PathMetadata<?> metadata) {
+    public QCat(PathMetadata metadata) {
         this(metadata, metadata.isRoot() ? INITS : PathInits.DEFAULT);
     }
 
-    public QCat(PathMetadata<?> metadata, PathInits inits) {
+    public QCat(PathMetadata metadata, PathInits inits) {
         this(Cat.class, metadata, inits);
     }
 
-    public QCat(Class<? extends Cat> type, PathMetadata<?> metadata, PathInits inits) {
+    public QCat(Class<? extends Cat> type, PathMetadata metadata, PathInits inits) {
         super(type, metadata, inits);
         this.mate = inits.isInitialized("mate") ? new QCat(forProperty("mate"), inits.get("mate")) : null;
     }

File: querydsl-core/src/test/java/com/querydsl/core/domain/QCommonIdentifiable.java
Patch:
@@ -45,7 +45,7 @@ public QCommonIdentifiable(BeanPath<? extends CommonIdentifiable<? extends java.
     }
 
     @SuppressWarnings("unchecked")
-    public QCommonIdentifiable(PathMetadata<?> metadata) {
+    public QCommonIdentifiable(PathMetadata metadata) {
         super((Class)CommonIdentifiable.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/QCommonPersistence.java
Patch:
@@ -32,7 +32,7 @@ public QCommonPersistence(BeanPath<? extends CommonPersistence> entity) {
         super(entity.getType(),entity.getMetadata());
     }
 
-    public QCommonPersistence(PathMetadata<?> metadata) {
+    public QCommonPersistence(PathMetadata metadata) {
         super(CommonPersistence.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/QCompany.java
Patch:
@@ -26,15 +26,15 @@ public QCompany(String variable) {
         this(Company.class, forVariable(variable), INITS);
     }
 
-    public QCompany(PathMetadata<?> metadata) {
+    public QCompany(PathMetadata metadata) {
         this(metadata, metadata.isRoot() ? INITS : PathInits.DEFAULT);
     }
 
-    public QCompany(PathMetadata<?> metadata, PathInits inits) {
+    public QCompany(PathMetadata metadata, PathInits inits) {
         this(Company.class, metadata, inits);
     }
 
-    public QCompany(Class<? extends Company> type, PathMetadata<?> metadata, PathInits inits) {
+    public QCompany(Class<? extends Company> type, PathMetadata metadata, PathInits inits) {
         super(type, metadata, inits);
         this.key = inits.isInitialized("key") ? new QCompanyPK(forProperty("key")) : null;
     }

File: querydsl-core/src/test/java/com/querydsl/core/domain/QCompanyGroup.java
Patch:
@@ -28,15 +28,15 @@ public QCompanyGroup(String variable) {
         this(CompanyGroup.class, forVariable(variable), INITS);
     }
 
-    public QCompanyGroup(PathMetadata<?> metadata) {
+    public QCompanyGroup(PathMetadata metadata) {
         this(metadata, metadata.isRoot() ? INITS : PathInits.DEFAULT);
     }
 
-    public QCompanyGroup(PathMetadata<?> metadata, PathInits inits) {
+    public QCompanyGroup(PathMetadata metadata, PathInits inits) {
         this(CompanyGroup.class, metadata, inits);
     }
 
-    public QCompanyGroup(Class<? extends CompanyGroup> type, PathMetadata<?> metadata, PathInits inits) {
+    public QCompanyGroup(Class<? extends CompanyGroup> type, PathMetadata metadata, PathInits inits) {
         super(type, metadata, inits);
         this.key = inits.isInitialized("key") ? new QCompanyGroupPK(forProperty("key")) : null;
         this.mainCompany = inits.isInitialized("mainCompany") ? new QCompany(forProperty("mainCompany"), inits.get("mainCompany")) : null;

File: querydsl-core/src/test/java/com/querydsl/core/domain/QCompanyGroupPK.java
Patch:
@@ -30,7 +30,7 @@ public QCompanyGroupPK(Path<? extends CompanyGroupPK> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QCompanyGroupPK(PathMetadata<?> metadata) {
+    public QCompanyGroupPK(PathMetadata metadata) {
         super(CompanyGroupPK.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/QCompanyPK.java
Patch:
@@ -28,7 +28,7 @@ public QCompanyPK(Path<? extends CompanyPK> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QCompanyPK(PathMetadata<?> metadata) {
+    public QCompanyPK(PathMetadata metadata) {
         super(CompanyPK.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/QIdNamePair.java
Patch:
@@ -32,7 +32,7 @@ public QIdNamePair(Path<? extends IdNamePair<?>> entity) {
     }
 
     @SuppressWarnings("unchecked")
-    public QIdNamePair(PathMetadata<?> metadata) {
+    public QIdNamePair(PathMetadata metadata) {
         super((Class)IdNamePair.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/QMyEmbeddable.java
Patch:
@@ -41,7 +41,7 @@ public QMyEmbeddable(BeanPath<? extends MyEmbeddable> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QMyEmbeddable(PathMetadata<?> metadata) {
+    public QMyEmbeddable(PathMetadata metadata) {
         super(MyEmbeddable.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/QSuperSupertype.java
Patch:
@@ -40,7 +40,7 @@ public QSuperSupertype(BeanPath<? extends SuperSupertype> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QSuperSupertype(PathMetadata<?> metadata) {
+    public QSuperSupertype(PathMetadata metadata) {
         super(SuperSupertype.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/QSuperclass.java
Patch:
@@ -28,7 +28,7 @@ public QSuperclass(Path<? extends Superclass> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QSuperclass(PathMetadata<?> metadata) {
+    public QSuperclass(PathMetadata metadata) {
         super(Superclass.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query/QAbstractEntity.java
Patch:
@@ -42,7 +42,7 @@ public QAbstractEntity(BeanPath<? extends AbstractEntity<?>> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QAbstractEntity(PathMetadata<?> metadata) {
+    public QAbstractEntity(PathMetadata metadata) {
         super(AbstractEntity.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query/QAnimal.java
Patch:
@@ -55,7 +55,7 @@ public QAnimal(BeanPath<? extends Animal> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QAnimal(PathMetadata<?> metadata) {
+    public QAnimal(PathMetadata metadata) {
         super(Animal.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query/QCat.java
Patch:
@@ -72,15 +72,15 @@ public QCat(String variable) {
         this(Cat.class, forVariable(variable), INITS);
     }
 
-    public QCat(PathMetadata<?> metadata) {
+    public QCat(PathMetadata metadata) {
         this(metadata, metadata.isRoot() ? INITS : PathInits.DEFAULT);
     }
 
-    public QCat(PathMetadata<?> metadata, PathInits inits) {
+    public QCat(PathMetadata metadata, PathInits inits) {
         this(Cat.class, metadata, inits);
     }
 
-    public QCat(Class<? extends Cat> type, PathMetadata<?> metadata, PathInits inits) {
+    public QCat(Class<? extends Cat> type, PathMetadata metadata, PathInits inits) {
         super(type, metadata, inits);
         this.mate = inits.isInitialized("mate") ? new QCat(forProperty("mate"), inits.get("mate")) : null;
     }

File: querydsl-core/src/test/java/com/querydsl/core/domain/query/QCommonIdentifiable.java
Patch:
@@ -48,7 +48,7 @@ public QCommonIdentifiable(BeanPath<? extends CommonIdentifiable<? extends java.
     }
 
     @SuppressWarnings("unchecked")
-    public QCommonIdentifiable(PathMetadata<?> metadata) {
+    public QCommonIdentifiable(PathMetadata metadata) {
         super((Class)CommonIdentifiable.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query/QCommonPersistence.java
Patch:
@@ -33,7 +33,7 @@ public QCommonPersistence(BeanPath<? extends CommonPersistence> entity) {
         super(entity.getType(),entity.getMetadata());
     }
 
-    public QCommonPersistence(PathMetadata<?> metadata) {
+    public QCommonPersistence(PathMetadata metadata) {
         super(CommonPersistence.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query/QCompany.java
Patch:
@@ -27,15 +27,15 @@ public QCompany(String variable) {
         this(Company.class, forVariable(variable), INITS);
     }
 
-    public QCompany(PathMetadata<?> metadata) {
+    public QCompany(PathMetadata metadata) {
         this(metadata, metadata.isRoot() ? INITS : PathInits.DEFAULT);
     }
 
-    public QCompany(PathMetadata<?> metadata, PathInits inits) {
+    public QCompany(PathMetadata metadata, PathInits inits) {
         this(Company.class, metadata, inits);
     }
 
-    public QCompany(Class<? extends Company> type, PathMetadata<?> metadata, PathInits inits) {
+    public QCompany(Class<? extends Company> type, PathMetadata metadata, PathInits inits) {
         super(type, metadata, inits);
         this.key = inits.isInitialized("key") ? new QCompanyPK(forProperty("key")) : null;
     }

File: querydsl-core/src/test/java/com/querydsl/core/domain/query/QCompanyGroup.java
Patch:
@@ -29,15 +29,15 @@ public QCompanyGroup(String variable) {
         this(CompanyGroup.class, forVariable(variable), INITS);
     }
 
-    public QCompanyGroup(PathMetadata<?> metadata) {
+    public QCompanyGroup(PathMetadata metadata) {
         this(metadata, metadata.isRoot() ? INITS : PathInits.DEFAULT);
     }
 
-    public QCompanyGroup(PathMetadata<?> metadata, PathInits inits) {
+    public QCompanyGroup(PathMetadata metadata, PathInits inits) {
         this(CompanyGroup.class, metadata, inits);
     }
 
-    public QCompanyGroup(Class<? extends CompanyGroup> type, PathMetadata<?> metadata, PathInits inits) {
+    public QCompanyGroup(Class<? extends CompanyGroup> type, PathMetadata metadata, PathInits inits) {
         super(type, metadata, inits);
         this.key = inits.isInitialized("key") ? new QCompanyGroupPK(forProperty("key")) : null;
         this.mainCompany = inits.isInitialized("mainCompany") ? new QCompany(forProperty("mainCompany"), inits.get("mainCompany")) : null;

File: querydsl-core/src/test/java/com/querydsl/core/domain/query/QCompanyGroupPK.java
Patch:
@@ -31,7 +31,7 @@ public QCompanyGroupPK(Path<? extends CompanyGroupPK> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QCompanyGroupPK(PathMetadata<?> metadata) {
+    public QCompanyGroupPK(PathMetadata metadata) {
         super(CompanyGroupPK.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query/QCompanyPK.java
Patch:
@@ -29,7 +29,7 @@ public QCompanyPK(Path<? extends CompanyPK> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QCompanyPK(PathMetadata<?> metadata) {
+    public QCompanyPK(PathMetadata metadata) {
         super(CompanyPK.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query/QIdNamePair.java
Patch:
@@ -36,7 +36,7 @@ public QIdNamePair(Path<? extends IdNamePair<?>> entity) {
     }
 
     @SuppressWarnings("unchecked")
-    public QIdNamePair(PathMetadata<?> metadata) {
+    public QIdNamePair(PathMetadata metadata) {
         super((Class)IdNamePair.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query/QMyEmbeddable.java
Patch:
@@ -43,7 +43,7 @@ public QMyEmbeddable(BeanPath<? extends MyEmbeddable> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QMyEmbeddable(PathMetadata<?> metadata) {
+    public QMyEmbeddable(PathMetadata metadata) {
         super(MyEmbeddable.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query/QSuperSupertype.java
Patch:
@@ -41,7 +41,7 @@ public QSuperSupertype(BeanPath<? extends SuperSupertype> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QSuperSupertype(PathMetadata<?> metadata) {
+    public QSuperSupertype(PathMetadata metadata) {
         super(SuperSupertype.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query/QSuperclass.java
Patch:
@@ -30,7 +30,7 @@ public QSuperclass(Path<? extends Superclass> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QSuperclass(PathMetadata<?> metadata) {
+    public QSuperclass(PathMetadata metadata) {
         super(Superclass.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query2/QAbstractEntityType.java
Patch:
@@ -42,7 +42,7 @@ public QAbstractEntityType(BeanPath<? extends AbstractEntity<?>> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QAbstractEntityType(PathMetadata<?> metadata) {
+    public QAbstractEntityType(PathMetadata metadata) {
         super(AbstractEntity.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query2/QAnimalType.java
Patch:
@@ -55,7 +55,7 @@ public QAnimalType(BeanPath<? extends Animal> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QAnimalType(PathMetadata<?> metadata) {
+    public QAnimalType(PathMetadata metadata) {
         super(Animal.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query2/QCatType.java
Patch:
@@ -74,15 +74,15 @@ public QCatType(String variable) {
         this(Cat.class, forVariable(variable), INITS);
     }
 
-    public QCatType(PathMetadata<?> metadata) {
+    public QCatType(PathMetadata metadata) {
         this(metadata, metadata.isRoot() ? INITS : PathInits.DEFAULT);
     }
 
-    public QCatType(PathMetadata<?> metadata, PathInits inits) {
+    public QCatType(PathMetadata metadata, PathInits inits) {
         this(Cat.class, metadata, inits);
     }
 
-    public QCatType(Class<? extends Cat> type, PathMetadata<?> metadata, PathInits inits) {
+    public QCatType(Class<? extends Cat> type, PathMetadata metadata, PathInits inits) {
         super(type, metadata, inits);
         this.mate = inits.isInitialized("mate") ? new QCatType(forProperty("mate"), inits.get("mate")) : null;
     }

File: querydsl-core/src/test/java/com/querydsl/core/domain/query2/QCommonIdentifiableType.java
Patch:
@@ -51,7 +51,7 @@ public QCommonIdentifiableType(BeanPath<? extends CommonIdentifiable<? extends j
     }
 
     @SuppressWarnings("unchecked")
-    public QCommonIdentifiableType(PathMetadata<?> metadata) {
+    public QCommonIdentifiableType(PathMetadata metadata) {
         super((Class)CommonIdentifiable.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query2/QCommonPersistenceType.java
Patch:
@@ -33,7 +33,7 @@ public QCommonPersistenceType(BeanPath<? extends CommonPersistence> entity) {
         super(entity.getType(),entity.getMetadata());
     }
 
-    public QCommonPersistenceType(PathMetadata<?> metadata) {
+    public QCommonPersistenceType(PathMetadata metadata) {
         super(CommonPersistence.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query2/QCompanyGroupPKType.java
Patch:
@@ -34,7 +34,7 @@ public QCompanyGroupPKType(Path<? extends CompanyGroupPK> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QCompanyGroupPKType(PathMetadata<?> metadata) {
+    public QCompanyGroupPKType(PathMetadata metadata) {
         super(CompanyGroupPK.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query2/QCompanyGroupType.java
Patch:
@@ -32,15 +32,15 @@ public QCompanyGroupType(String variable) {
         this(CompanyGroup.class, forVariable(variable), INITS);
     }
 
-    public QCompanyGroupType(PathMetadata<?> metadata) {
+    public QCompanyGroupType(PathMetadata metadata) {
         this(metadata, metadata.isRoot() ? INITS : PathInits.DEFAULT);
     }
 
-    public QCompanyGroupType(PathMetadata<?> metadata, PathInits inits) {
+    public QCompanyGroupType(PathMetadata metadata, PathInits inits) {
         this(CompanyGroup.class, metadata, inits);
     }
 
-    public QCompanyGroupType(Class<? extends CompanyGroup> type, PathMetadata<?> metadata, PathInits inits) {
+    public QCompanyGroupType(Class<? extends CompanyGroup> type, PathMetadata metadata, PathInits inits) {
         super(type, metadata, inits);
         this.key = inits.isInitialized("key") ? new QCompanyGroupPK(forProperty("key")) : null;
         this.mainCompany = inits.isInitialized("mainCompany") ? new QCompany(forProperty("mainCompany"), inits.get("mainCompany")) : null;

File: querydsl-core/src/test/java/com/querydsl/core/domain/query2/QCompanyPKType.java
Patch:
@@ -31,7 +31,7 @@ public QCompanyPKType(Path<? extends CompanyPK> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QCompanyPKType(PathMetadata<?> metadata) {
+    public QCompanyPKType(PathMetadata metadata) {
         super(CompanyPK.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query2/QCompanyType.java
Patch:
@@ -29,15 +29,15 @@ public QCompanyType(String variable) {
         this(Company.class, forVariable(variable), INITS);
     }
 
-    public QCompanyType(PathMetadata<?> metadata) {
+    public QCompanyType(PathMetadata metadata) {
         this(metadata, metadata.isRoot() ? INITS : PathInits.DEFAULT);
     }
 
-    public QCompanyType(PathMetadata<?> metadata, PathInits inits) {
+    public QCompanyType(PathMetadata metadata, PathInits inits) {
         this(Company.class, metadata, inits);
     }
 
-    public QCompanyType(Class<? extends Company> type, PathMetadata<?> metadata, PathInits inits) {
+    public QCompanyType(Class<? extends Company> type, PathMetadata metadata, PathInits inits) {
         super(type, metadata, inits);
         this.key = inits.isInitialized("key") ? new QCompanyPK(forProperty("key")) : null;
     }

File: querydsl-core/src/test/java/com/querydsl/core/domain/query2/QIdNamePairType.java
Patch:
@@ -36,7 +36,7 @@ public QIdNamePairType(Path<? extends IdNamePair<?>> entity) {
     }
 
     @SuppressWarnings("unchecked")
-    public QIdNamePairType(PathMetadata<?> metadata) {
+    public QIdNamePairType(PathMetadata metadata) {
         super((Class)IdNamePair.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query2/QMyEmbeddableType.java
Patch:
@@ -43,7 +43,7 @@ public QMyEmbeddableType(BeanPath<? extends MyEmbeddable> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QMyEmbeddableType(PathMetadata<?> metadata) {
+    public QMyEmbeddableType(PathMetadata metadata) {
         super(MyEmbeddable.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query2/QSuperSupertypeType.java
Patch:
@@ -43,7 +43,7 @@ public QSuperSupertypeType(BeanPath<? extends SuperSupertype> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QSuperSupertypeType(PathMetadata<?> metadata) {
+    public QSuperSupertypeType(PathMetadata metadata) {
         super(SuperSupertype.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query2/QSuperclassType.java
Patch:
@@ -34,7 +34,7 @@ public QSuperclassType(Path<? extends Superclass> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QSuperclassType(PathMetadata<?> metadata) {
+    public QSuperclassType(PathMetadata metadata) {
         super(Superclass.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query3/QTAbstractEntity.java
Patch:
@@ -42,7 +42,7 @@ public QTAbstractEntity(BeanPath<? extends AbstractEntity<?>> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QTAbstractEntity(PathMetadata<?> metadata) {
+    public QTAbstractEntity(PathMetadata metadata) {
         super(AbstractEntity.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query3/QTAnimal.java
Patch:
@@ -55,7 +55,7 @@ public QTAnimal(BeanPath<? extends Animal> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QTAnimal(PathMetadata<?> metadata) {
+    public QTAnimal(PathMetadata metadata) {
         super(Animal.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query3/QTCat.java
Patch:
@@ -73,15 +73,15 @@ public QTCat(String variable) {
         this(Cat.class, forVariable(variable), INITS);
     }
 
-    public QTCat(PathMetadata<?> metadata) {
+    public QTCat(PathMetadata metadata) {
         this(metadata, metadata.isRoot() ? INITS : PathInits.DEFAULT);
     }
 
-    public QTCat(PathMetadata<?> metadata, PathInits inits) {
+    public QTCat(PathMetadata metadata, PathInits inits) {
         this(Cat.class, metadata, inits);
     }
 
-    public QTCat(Class<? extends Cat> type, PathMetadata<?> metadata, PathInits inits) {
+    public QTCat(Class<? extends Cat> type, PathMetadata metadata, PathInits inits) {
         super(type, metadata, inits);
         this.mate = inits.isInitialized("mate") ? new QTCat(forProperty("mate"), inits.get("mate")) : null;
     }

File: querydsl-core/src/test/java/com/querydsl/core/domain/query3/QTCommonIdentifiable.java
Patch:
@@ -51,7 +51,7 @@ public QTCommonIdentifiable(BeanPath<? extends CommonIdentifiable<? extends java
     }
 
     @SuppressWarnings("unchecked")
-    public QTCommonIdentifiable(PathMetadata<?> metadata) {
+    public QTCommonIdentifiable(PathMetadata metadata) {
         super((Class)CommonIdentifiable.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query3/QTCommonPersistence.java
Patch:
@@ -33,7 +33,7 @@ public QTCommonPersistence(BeanPath<? extends CommonPersistence> entity) {
         super(entity.getType(),entity.getMetadata());
     }
 
-    public QTCommonPersistence(PathMetadata<?> metadata) {
+    public QTCommonPersistence(PathMetadata metadata) {
         super(CommonPersistence.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query3/QTCompany.java
Patch:
@@ -28,15 +28,15 @@ public QTCompany(String variable) {
         this(Company.class, forVariable(variable), INITS);
     }
 
-    public QTCompany(PathMetadata<?> metadata) {
+    public QTCompany(PathMetadata metadata) {
         this(metadata, metadata.isRoot() ? INITS : PathInits.DEFAULT);
     }
 
-    public QTCompany(PathMetadata<?> metadata, PathInits inits) {
+    public QTCompany(PathMetadata metadata, PathInits inits) {
         this(Company.class, metadata, inits);
     }
 
-    public QTCompany(Class<? extends Company> type, PathMetadata<?> metadata, PathInits inits) {
+    public QTCompany(Class<? extends Company> type, PathMetadata metadata, PathInits inits) {
         super(type, metadata, inits);
         this.key = inits.isInitialized("key") ? new QTCompanyPK(forProperty("key")) : null;
     }

File: querydsl-core/src/test/java/com/querydsl/core/domain/query3/QTCompanyGroup.java
Patch:
@@ -30,15 +30,15 @@ public QTCompanyGroup(String variable) {
         this(CompanyGroup.class, forVariable(variable), INITS);
     }
 
-    public QTCompanyGroup(PathMetadata<?> metadata) {
+    public QTCompanyGroup(PathMetadata metadata) {
         this(metadata, metadata.isRoot() ? INITS : PathInits.DEFAULT);
     }
 
-    public QTCompanyGroup(PathMetadata<?> metadata, PathInits inits) {
+    public QTCompanyGroup(PathMetadata metadata, PathInits inits) {
         this(CompanyGroup.class, metadata, inits);
     }
 
-    public QTCompanyGroup(Class<? extends CompanyGroup> type, PathMetadata<?> metadata, PathInits inits) {
+    public QTCompanyGroup(Class<? extends CompanyGroup> type, PathMetadata metadata, PathInits inits) {
         super(type, metadata, inits);
         this.key = inits.isInitialized("key") ? new QTCompanyGroupPK(forProperty("key")) : null;
         this.mainCompany = inits.isInitialized("mainCompany") ? new QTCompany(forProperty("mainCompany"), inits.get("mainCompany")) : null;

File: querydsl-core/src/test/java/com/querydsl/core/domain/query3/QTCompanyGroupPK.java
Patch:
@@ -34,7 +34,7 @@ public QTCompanyGroupPK(Path<? extends CompanyGroupPK> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QTCompanyGroupPK(PathMetadata<?> metadata) {
+    public QTCompanyGroupPK(PathMetadata metadata) {
         super(CompanyGroupPK.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query3/QTCompanyPK.java
Patch:
@@ -31,7 +31,7 @@ public QTCompanyPK(Path<? extends CompanyPK> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QTCompanyPK(PathMetadata<?> metadata) {
+    public QTCompanyPK(PathMetadata metadata) {
         super(CompanyPK.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query3/QTIdNamePair.java
Patch:
@@ -36,7 +36,7 @@ public QTIdNamePair(Path<? extends IdNamePair<?>> entity) {
     }
 
     @SuppressWarnings("unchecked")
-    public QTIdNamePair(PathMetadata<?> metadata) {
+    public QTIdNamePair(PathMetadata metadata) {
         super((Class)IdNamePair.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query3/QTMyEmbeddable.java
Patch:
@@ -43,7 +43,7 @@ public QTMyEmbeddable(BeanPath<? extends MyEmbeddable> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QTMyEmbeddable(PathMetadata<?> metadata) {
+    public QTMyEmbeddable(PathMetadata metadata) {
         super(MyEmbeddable.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query3/QTSuperSupertype.java
Patch:
@@ -43,7 +43,7 @@ public QTSuperSupertype(BeanPath<? extends SuperSupertype> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QTSuperSupertype(PathMetadata<?> metadata) {
+    public QTSuperSupertype(PathMetadata metadata) {
         super(SuperSupertype.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain/query3/QTSuperclass.java
Patch:
@@ -33,7 +33,7 @@ public QTSuperclass(Path<? extends Superclass> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QTSuperclass(PathMetadata<?> metadata) {
+    public QTSuperclass(PathMetadata metadata) {
         super(Superclass.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/domain2/QABase.java
Patch:
@@ -28,15 +28,15 @@ public QABase(String variable) {
         this(ABase.class, forVariable(variable), INITS);
     }
 
-    public QABase(PathMetadata<?> metadata) {
+    public QABase(PathMetadata metadata) {
         this(metadata, metadata.isRoot() ? INITS : PathInits.DEFAULT);
     }
 
-    public QABase(PathMetadata<?> metadata, PathInits inits) {
+    public QABase(PathMetadata metadata, PathInits inits) {
         this(ABase.class, metadata, inits);
     }
 
-    public QABase(Class<? extends ABase> type, PathMetadata<?> metadata, PathInits inits) {
+    public QABase(Class<? extends ABase> type, PathMetadata metadata, PathInits inits) {
         super(type, metadata, inits);
         this.tenant = inits.isInitialized("tenant") ? new QTenantImpl(forProperty("tenant")) : null;
     }

File: querydsl-core/src/test/java/com/querydsl/core/domain2/QAImpl.java
Patch:
@@ -36,15 +36,15 @@ public QAImpl(Path<? extends AImpl> entity) {
         this(entity.getType(), entity.getMetadata(), INITS);
     }
     
-    public QAImpl(PathMetadata<?> metadata) {
+    public QAImpl(PathMetadata metadata) {
         this(metadata, metadata.isRoot() ? INITS : PathInits.DEFAULT);
     }
 
-    public QAImpl(PathMetadata<?> metadata, PathInits inits) {
+    public QAImpl(PathMetadata metadata, PathInits inits) {
         this(AImpl.class, metadata, inits);
     }
 
-    public QAImpl(Class<? extends AImpl> type, PathMetadata<?> metadata, PathInits inits) {
+    public QAImpl(Class<? extends AImpl> type, PathMetadata metadata, PathInits inits) {
         super(type, metadata, inits);
         this._super = new QABase(type, metadata, inits);
         this.id = _super.id;

File: querydsl-core/src/test/java/com/querydsl/core/domain2/QTenantImpl.java
Patch:
@@ -26,7 +26,7 @@ public QTenantImpl(Path<? extends TenantImpl> entity) {
         super(entity.getType(), entity.getMetadata());
     }
 
-    public QTenantImpl(PathMetadata<?> metadata) {
+    public QTenantImpl(PathMetadata metadata) {
         super(TenantImpl.class, metadata);
     }
 

File: querydsl-core/src/test/java/com/querydsl/core/types/path/BeanPathTest.java
Patch:
@@ -37,11 +37,11 @@ public static class MyBeanPath extends BeanPath<BeanPathTest>{
 
         private static final long serialVersionUID = 6225684967115368814L;
 
-        public MyBeanPath(PathMetadata<?> metadata) {
+        public MyBeanPath(PathMetadata metadata) {
             super(BeanPathTest.class, metadata);
         }
         
-        public MyBeanPath(PathMetadata<?> metadata, @Nullable PathInits inits) {
+        public MyBeanPath(PathMetadata metadata, @Nullable PathInits inits) {
             super(BeanPathTest.class, metadata);
         }
         

File: querydsl-jdo/src/test/java/com/querydsl/jdo/test/domain/QBook.java
Patch:
@@ -53,7 +53,7 @@ public QBook(Class<? extends com.querydsl.jdo.test.domain.Book> cl, String path)
           super(cl, PathMetadataFactory.forVariable(path));
     }
     
-    public QBook(PathMetadata<?> metadata) {
+    public QBook(PathMetadata metadata) {
          super(com.querydsl.jdo.test.domain.Book.class, metadata);
     }
     

File: querydsl-jdo/src/test/java/com/querydsl/jdo/test/domain/QProduct.java
Patch:
@@ -53,7 +53,7 @@ public QProduct(Class<? extends com.querydsl.jdo.test.domain.Product> cl, String
           super(cl, PathMetadataFactory.forVariable(path));
     }
     
-    public QProduct(PathMetadata<?> metadata) {
+    public QProduct(PathMetadata metadata) {
          super(com.querydsl.jdo.test.domain.Product.class, metadata);
     }
     

File: querydsl-jdo/src/test/java/com/querydsl/jdo/test/domain/QStore.java
Patch:
@@ -52,7 +52,7 @@ public QStore(Class<? extends Store> cl, String path) {
           super(cl, PathMetadataFactory.forVariable(path));
     }
     
-    public QStore(PathMetadata<?> metadata) {
+    public QStore(PathMetadata metadata) {
          super(Store.class, metadata);
     }
     

File: querydsl-jdo/src/test/java/com/querydsl/jdo/test/domain/sql/SBook.java
Patch:
@@ -53,7 +53,7 @@ public SBook(BeanPath<? extends SBook> entity) {
         super(entity.getType(),entity.getMetadata(), "", "BOOK");
     }
 
-    public SBook(PathMetadata<?> metadata) {
+    public SBook(PathMetadata metadata) {
         super(SBook.class, metadata, "", "BOOK");
     }
 

File: querydsl-jdo/src/test/java/com/querydsl/jdo/test/domain/sql/SProduct.java
Patch:
@@ -66,7 +66,7 @@ public SProduct(BeanPath<? extends SProduct> entity) {
         addMetadata();
     }
 
-    public SProduct(PathMetadata<?> metadata) {
+    public SProduct(PathMetadata metadata) {
         super(SProduct.class, metadata, "", "PRODUCT");
         addMetadata();
     }

File: querydsl-jdo/src/test/java/com/querydsl/jdo/test/domain/sql/SStore.java
Patch:
@@ -51,7 +51,7 @@ public SStore(BeanPath<? extends SStore> entity) {
         super(entity.getType(),entity.getMetadata(), "", "STORE");
     }
 
-    public SStore(PathMetadata<?> metadata) {
+    public SStore(PathMetadata metadata) {
         super(SStore.class, metadata, "", "STORE");
     }
 

File: querydsl-jdo/src/test/java/com/querydsl/jdo/test/domain/sql/SStoreProducts.java
Patch:
@@ -52,7 +52,7 @@ public SStoreProducts(BeanPath<? extends SStoreProducts> entity) {
         super(entity.getType(),entity.getMetadata(), "", "STORE_PRODUCTS");
     }
 
-    public SStoreProducts(PathMetadata<?> metadata) {
+    public SStoreProducts(PathMetadata metadata) {
         super(SStoreProducts.class, metadata, "", "STORE_PRODUCTS");
     }
 

File: querydsl-jdo/src/test/java/com/querydsl/jdo/test/domain/sql/SStoreProductsbyname.java
Patch:
@@ -53,7 +53,7 @@ public SStoreProductsbyname(BeanPath<? extends SStoreProductsbyname> entity) {
         super(entity.getType(),entity.getMetadata(), "", "STORE_PRODUCTSBYNAME");
     }
 
-    public SStoreProductsbyname(PathMetadata<?> metadata) {
+    public SStoreProductsbyname(PathMetadata metadata) {
         super(SStoreProductsbyname.class, metadata, "", "STORE_PRODUCTSBYNAME");
     }
 

File: querydsl-jpa/src/main/java/com/querydsl/jpa/JPAQueryMixin.java
Patch:
@@ -106,7 +106,7 @@ private <T> Class<T> getElementTypeOrType(Path<T> path) {
     }
 
     private <T> Path<T> shorten(Path<T> path, List<Path<?>> paths) {
-        PathMetadata<?> metadata = path.getMetadata();
+        PathMetadata metadata = path.getMetadata();
         if (metadata.isRoot() || paths.contains(path)) {
             return path;
         } else if (aliases.containsKey(path)) {
@@ -138,7 +138,7 @@ private <T> Path<T> shorten(Path<T> path, List<Path<?>> paths) {
     }
 
     private <T> Path<T> convertPathForOrder(Path<T> path) {
-        PathMetadata<?> metadata = path.getMetadata();
+        PathMetadata metadata = path.getMetadata();
         // at least three levels
         if (metadata.getParent() != null && !metadata.getParent().getMetadata().isRoot()) {
             Set<Expression<?>> exprs = Sets.newHashSet();

File: querydsl-jpa/src/test/java/com/querydsl/jpa/QArticle.java
Patch:
@@ -36,15 +36,15 @@ public QArticle(Path<? extends Article> path) {
         this(path.getType(), path.getMetadata(), path.getMetadata().isRoot() ? INITS : PathInits.DEFAULT);
     }
 
-    public QArticle(PathMetadata<?> metadata) {
+    public QArticle(PathMetadata metadata) {
         this(metadata, metadata.isRoot() ? INITS : PathInits.DEFAULT);
     }
 
-    public QArticle(PathMetadata<?> metadata, PathInits inits) {
+    public QArticle(PathMetadata metadata, PathInits inits) {
         this(Article.class, metadata, inits);
     }
 
-    public QArticle(Class<? extends Article> type, PathMetadata<?> metadata, PathInits inits) {
+    public QArticle(Class<? extends Article> type, PathMetadata metadata, PathInits inits) {
         super(type, metadata, inits);
         this.author = inits.isInitialized("author") ? new QPerson(forProperty("author")) : null;
         this.content = inits.isInitialized("content") ? new QContent(forProperty("content"), inits.get("content")) : null;

File: querydsl-jpa/src/test/java/com/querydsl/jpa/QContent.java
Patch:
@@ -32,15 +32,15 @@ public QContent(Path<? extends Content> path) {
         this(path.getType(), path.getMetadata(), path.getMetadata().isRoot() ? INITS : PathInits.DEFAULT);
     }
 
-    public QContent(PathMetadata<?> metadata) {
+    public QContent(PathMetadata metadata) {
         this(metadata, metadata.isRoot() ? INITS : PathInits.DEFAULT);
     }
 
-    public QContent(PathMetadata<?> metadata, PathInits inits) {
+    public QContent(PathMetadata metadata, PathInits inits) {
         this(Content.class, metadata, inits);
     }
 
-    public QContent(Class<? extends Content> type, PathMetadata<?> metadata, PathInits inits) {
+    public QContent(Class<? extends Content> type, PathMetadata metadata, PathInits inits) {
         super(type, metadata, inits);
         this.article = inits.isInitialized("article") ? new QArticle(forProperty("article"), inits.get("article")) : null;
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/QPerson.java
Patch:
@@ -31,7 +31,7 @@ public QPerson(Path<? extends Person> path) {
         super(path.getType(), path.getMetadata());
     }
 
-    public QPerson(PathMetadata<?> metadata) {
+    public QPerson(PathMetadata metadata) {
         super(Person.class, metadata);
     }
 

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SAccount.java
Patch:
@@ -45,7 +45,7 @@ public SAccount(Path<? extends SAccount> path) {
         addMetadata();
     }
 
-    public SAccount(PathMetadata<?> metadata) {
+    public SAccount(PathMetadata metadata) {
         super(SAccount.class, metadata, "", "account_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SAnimal.java
Patch:
@@ -78,7 +78,7 @@ public SAnimal(Path<? extends SAnimal> path) {
         addMetadata();
     }
 
-    public SAnimal(PathMetadata<?> metadata) {
+    public SAnimal(PathMetadata metadata) {
         super(SAnimal.class, metadata, "", "animal_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SAuditlog.java
Patch:
@@ -42,7 +42,7 @@ public SAuditlog(Path<? extends SAuditlog> path) {
         addMetadata();
     }
 
-    public SAuditlog(PathMetadata<?> metadata) {
+    public SAuditlog(PathMetadata metadata) {
         super(SAuditlog.class, metadata, "", "auditlog_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SAuthor.java
Patch:
@@ -43,7 +43,7 @@ public SAuthor(Path<? extends SAuthor> path) {
         addMetadata();
     }
 
-    public SAuthor(PathMetadata<?> metadata) {
+    public SAuthor(PathMetadata metadata) {
         super(SAuthor.class, metadata, "", "author_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SBar.java
Patch:
@@ -41,7 +41,7 @@ public SBar(Path<? extends SBar> path) {
         addMetadata();
     }
 
-    public SBar(PathMetadata<?> metadata) {
+    public SBar(PathMetadata metadata) {
         super(SBar.class, metadata, "", "bar_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SBook.java
Patch:
@@ -47,7 +47,7 @@ public SBook(Path<? extends SBook> path) {
         addMetadata();
     }
 
-    public SBook(PathMetadata<?> metadata) {
+    public SBook(PathMetadata metadata) {
         super(SBook.class, metadata, "", "book_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SBookBookmarks.java
Patch:
@@ -50,7 +50,7 @@ public SBookBookmarks(Path<? extends SBookBookmarks> path) {
         addMetadata();
     }
 
-    public SBookBookmarks(PathMetadata<?> metadata) {
+    public SBookBookmarks(PathMetadata metadata) {
         super(SBookBookmarks.class, metadata, "", "book_bookmarks");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SBookid.java
Patch:
@@ -40,7 +40,7 @@ public SBookid(Path<? extends SBookid> path) {
         addMetadata();
     }
 
-    public SBookid(PathMetadata<?> metadata) {
+    public SBookid(PathMetadata metadata) {
         super(SBookid.class, metadata, "", "bookid_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SBookversion.java
Patch:
@@ -52,7 +52,7 @@ public SBookversion(Path<? extends SBookversion> path) {
         addMetadata();
     }
 
-    public SBookversion(PathMetadata<?> metadata) {
+    public SBookversion(PathMetadata metadata) {
         super(SBookversion.class, metadata, "", "bookversion_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SCalendar.java
Patch:
@@ -42,7 +42,7 @@ public SCalendar(Path<? extends SCalendar> path) {
         addMetadata();
     }
 
-    public SCalendar(PathMetadata<?> metadata) {
+    public SCalendar(PathMetadata metadata) {
         super(SCalendar.class, metadata, "", "calendar_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SCalendarHolidays.java
Patch:
@@ -46,7 +46,7 @@ public SCalendarHolidays(Path<? extends SCalendarHolidays> path) {
         addMetadata();
     }
 
-    public SCalendarHolidays(PathMetadata<?> metadata) {
+    public SCalendarHolidays(PathMetadata metadata) {
         super(SCalendarHolidays.class, metadata, "", "Calendar_holidays");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SCatalog.java
Patch:
@@ -43,7 +43,7 @@ public SCatalog(Path<? extends SCatalog> path) {
         addMetadata();
     }
 
-    public SCatalog(PathMetadata<?> metadata) {
+    public SCatalog(PathMetadata metadata) {
         super(SCatalog.class, metadata, "", "catalog_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SCatalog_price.java
Patch:
@@ -44,7 +44,7 @@ public SCatalog_price(Path<? extends SCatalog_price> path) {
         addMetadata();
     }
 
-    public SCatalog_price(PathMetadata<?> metadata) {
+    public SCatalog_price(PathMetadata metadata) {
         super(SCatalog_price.class, metadata, "", "catalog__price_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SCategory.java
Patch:
@@ -64,7 +64,7 @@ public SCategory(Path<? extends SCategory> path) {
         addMetadata();
     }
 
-    public SCategory(PathMetadata<?> metadata) {
+    public SCategory(PathMetadata metadata) {
         super(SCategory.class, metadata, "", "category_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SCategory_category.java
Patch:
@@ -44,7 +44,7 @@ public SCategory_category(Path<? extends SCategory_category> path) {
         addMetadata();
     }
 
-    public SCategory_category(PathMetadata<?> metadata) {
+    public SCategory_category(PathMetadata metadata) {
         super(SCategory_category.class, metadata, "", "category__category_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SCategory_categoryprop.java
Patch:
@@ -44,7 +44,7 @@ public SCategory_categoryprop(Path<? extends SCategory_categoryprop> path) {
         addMetadata();
     }
 
-    public SCategory_categoryprop(PathMetadata<?> metadata) {
+    public SCategory_categoryprop(PathMetadata metadata) {
         super(SCategory_categoryprop.class, metadata, "", "category__categoryprop_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SCategoryprop.java
Patch:
@@ -49,7 +49,7 @@ public SCategoryprop(Path<? extends SCategoryprop> path) {
         addMetadata();
     }
 
-    public SCategoryprop(PathMetadata<?> metadata) {
+    public SCategoryprop(PathMetadata metadata) {
         super(SCategoryprop.class, metadata, "", "categoryprop_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SChild2.java
Patch:
@@ -42,7 +42,7 @@ public SChild2(Path<? extends SChild2> path) {
         addMetadata();
     }
 
-    public SChild2(PathMetadata<?> metadata) {
+    public SChild2(PathMetadata metadata) {
         super(SChild2.class, metadata, "", "Child2");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SCompany.java
Patch:
@@ -57,7 +57,7 @@ public SCompany(Path<? extends SCompany> path) {
         addMetadata();
     }
 
-    public SCompany(PathMetadata<?> metadata) {
+    public SCompany(PathMetadata metadata) {
         super(SCompany.class, metadata, "", "company_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SCompany_department.java
Patch:
@@ -42,7 +42,7 @@ public SCompany_department(Path<? extends SCompany_department> path) {
         addMetadata();
     }
 
-    public SCompany_department(PathMetadata<?> metadata) {
+    public SCompany_department(PathMetadata metadata) {
         super(SCompany_department.class, metadata, "", "company__department_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SCustomer.java
Patch:
@@ -50,7 +50,7 @@ public SCustomer(Path<? extends SCustomer> path) {
         addMetadata();
     }
 
-    public SCustomer(PathMetadata<?> metadata) {
+    public SCustomer(PathMetadata metadata) {
         super(SCustomer.class, metadata, "", "customer_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SDateTest.java
Patch:
@@ -36,7 +36,7 @@ public SDateTest(Path<? extends SDateTest> path) {
         addMetadata();
     }
 
-    public SDateTest(PathMetadata<?> metadata) {
+    public SDateTest(PathMetadata metadata) {
         super(SDateTest.class, metadata, "", "DATE_TEST");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SDepartment.java
Patch:
@@ -49,7 +49,7 @@ public SDepartment(Path<? extends SDepartment> path) {
         addMetadata();
     }
 
-    public SDepartment(PathMetadata<?> metadata) {
+    public SDepartment(PathMetadata metadata) {
         super(SDepartment.class, metadata, "", "department_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SDepartment_employee.java
Patch:
@@ -42,7 +42,7 @@ public SDepartment_employee(Path<? extends SDepartment_employee> path) {
         addMetadata();
     }
 
-    public SDepartment_employee(PathMetadata<?> metadata) {
+    public SDepartment_employee(PathMetadata metadata) {
         super(SDepartment_employee.class, metadata, "", "department__employee_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SDocument.java
Patch:
@@ -44,7 +44,7 @@ public SDocument(Path<? extends SDocument> path) {
         addMetadata();
     }
 
-    public SDocument(PathMetadata<?> metadata) {
+    public SDocument(PathMetadata metadata) {
         super(SDocument.class, metadata, "", "document_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SDocument2.java
Patch:
@@ -64,7 +64,7 @@ public SDocument2(Path<? extends SDocument2> path) {
         addMetadata();
     }
 
-    public SDocument2(PathMetadata<?> metadata) {
+    public SDocument2(PathMetadata metadata) {
         super(SDocument2.class, metadata, "", "document2_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SDocumentprop.java
Patch:
@@ -47,7 +47,7 @@ public SDocumentprop(Path<? extends SDocumentprop> path) {
         addMetadata();
     }
 
-    public SDocumentprop(PathMetadata<?> metadata) {
+    public SDocumentprop(PathMetadata metadata) {
         super(SDocumentprop.class, metadata, "", "documentprop_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SEmployee.java
Patch:
@@ -57,7 +57,7 @@ public SEmployee(Path<? extends SEmployee> path) {
         addMetadata();
     }
 
-    public SEmployee(PathMetadata<?> metadata) {
+    public SEmployee(PathMetadata metadata) {
         super(SEmployee.class, metadata, "", "employee_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SEmployeeJobFunctions.java
Patch:
@@ -41,7 +41,7 @@ public SEmployeeJobFunctions(Path<? extends SEmployeeJobFunctions> path) {
         addMetadata();
     }
 
-    public SEmployeeJobFunctions(PathMetadata<?> metadata) {
+    public SEmployeeJobFunctions(PathMetadata metadata) {
         super(SEmployeeJobFunctions.class, metadata, "", "Employee_jobFunctions");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SEntity1.java
Patch:
@@ -45,7 +45,7 @@ public SEntity1(Path<? extends SEntity1> path) {
         addMetadata();
     }
 
-    public SEntity1(PathMetadata<?> metadata) {
+    public SEntity1(PathMetadata metadata) {
         super(SEntity1.class, metadata, "", "Entity1");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SEviltype.java
Patch:
@@ -116,7 +116,7 @@ public SEviltype(Path<? extends SEviltype> path) {
         addMetadata();
     }
 
-    public SEviltype(PathMetadata<?> metadata) {
+    public SEviltype(PathMetadata metadata) {
         super(SEviltype.class, metadata, "", "eviltype_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SFoo.java
Patch:
@@ -46,7 +46,7 @@ public SFoo(Path<? extends SFoo> path) {
         addMetadata();
     }
 
-    public SFoo(PathMetadata<?> metadata) {
+    public SFoo(PathMetadata metadata) {
         super(SFoo.class, metadata, "", "foo_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SFooNames.java
Patch:
@@ -41,7 +41,7 @@ public SFooNames(Path<? extends SFooNames> path) {
         addMetadata();
     }
 
-    public SFooNames(PathMetadata<?> metadata) {
+    public SFooNames(PathMetadata metadata) {
         super(SFooNames.class, metadata, "", "foo_names");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SFormula.java
Patch:
@@ -42,7 +42,7 @@ public SFormula(Path<? extends SFormula> path) {
         addMetadata();
     }
 
-    public SFormula(PathMetadata<?> metadata) {
+    public SFormula(PathMetadata metadata) {
         super(SFormula.class, metadata, "", "formula_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SGeneratedKeys.java
Patch:
@@ -41,7 +41,7 @@ public SGeneratedKeys(Path<? extends SGeneratedKeys> path) {
         addMetadata();
     }
 
-    public SGeneratedKeys(PathMetadata<?> metadata) {
+    public SGeneratedKeys(PathMetadata metadata) {
         super(SGeneratedKeys.class, metadata, "", "GENERATED_KEYS");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SHumanHairs.java
Patch:
@@ -40,7 +40,7 @@ public SHumanHairs(Path<? extends SHumanHairs> path) {
         addMetadata();
     }
 
-    public SHumanHairs(PathMetadata<?> metadata) {
+    public SHumanHairs(PathMetadata metadata) {
         super(SHumanHairs.class, metadata, "", "Human_hairs");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SInheritedproperties.java
Patch:
@@ -45,7 +45,7 @@ public SInheritedproperties(Path<? extends SInheritedproperties> path) {
         addMetadata();
     }
 
-    public SInheritedproperties(PathMetadata<?> metadata) {
+    public SInheritedproperties(PathMetadata metadata) {
         super(SInheritedproperties.class, metadata, "", "inheritedproperties_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SItem.java
Patch:
@@ -69,7 +69,7 @@ public SItem(Path<? extends SItem> path) {
         addMetadata();
     }
 
-    public SItem(PathMetadata<?> metadata) {
+    public SItem(PathMetadata metadata) {
         super(SItem.class, metadata, "", "item_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SItem_statuschange.java
Patch:
@@ -42,7 +42,7 @@ public SItem_statuschange(Path<? extends SItem_statuschange> path) {
         addMetadata();
     }
 
-    public SItem_statuschange(PathMetadata<?> metadata) {
+    public SItem_statuschange(PathMetadata metadata) {
         super(SItem_statuschange.class, metadata, "", "item__statuschange_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SKittens.java
Patch:
@@ -46,7 +46,7 @@ public SKittens(Path<? extends SKittens> path) {
         addMetadata();
     }
 
-    public SKittens(PathMetadata<?> metadata) {
+    public SKittens(PathMetadata metadata) {
         super(SKittens.class, metadata, "", "kittens");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SKittensSet.java
Patch:
@@ -44,7 +44,7 @@ public SKittensSet(Path<? extends SKittensSet> path) {
         addMetadata();
     }
 
-    public SKittensSet(PathMetadata<?> metadata) {
+    public SKittensSet(PathMetadata metadata) {
         super(SKittensSet.class, metadata, "", "kittens_set");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SLibrary.java
Patch:
@@ -40,7 +40,7 @@ public SLibrary(Path<? extends SLibrary> path) {
         addMetadata();
     }
 
-    public SLibrary(PathMetadata<?> metadata) {
+    public SLibrary(PathMetadata metadata) {
         super(SLibrary.class, metadata, "", "library_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SLineItems.java
Patch:
@@ -46,7 +46,7 @@ public SLineItems(Path<? extends SLineItems> path) {
         addMetadata();
     }
 
-    public SLineItems(PathMetadata<?> metadata) {
+    public SLineItems(PathMetadata metadata) {
         super(SLineItems.class, metadata, "", "LineItems");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SLocation.java
Patch:
@@ -43,7 +43,7 @@ public SLocation(Path<? extends SLocation> path) {
         addMetadata();
     }
 
-    public SLocation(PathMetadata<?> metadata) {
+    public SLocation(PathMetadata metadata) {
         super(SLocation.class, metadata, "", "location_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SMammal.java
Patch:
@@ -45,7 +45,7 @@ public SMammal(Path<? extends SMammal> path) {
         addMetadata();
     }
 
-    public SMammal(PathMetadata<?> metadata) {
+    public SMammal(PathMetadata metadata) {
         super(SMammal.class, metadata, "", "Mammal");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SName.java
Patch:
@@ -47,7 +47,7 @@ public SName(Path<? extends SName> path) {
         addMetadata();
     }
 
-    public SName(PathMetadata<?> metadata) {
+    public SName(PathMetadata metadata) {
         super(SName.class, metadata, "", "name_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SNameListNames.java
Patch:
@@ -41,7 +41,7 @@ public SNameListNames(Path<? extends SNameListNames> path) {
         addMetadata();
     }
 
-    public SNameListNames(PathMetadata<?> metadata) {
+    public SNameListNames(PathMetadata metadata) {
         super(SNameListNames.class, metadata, "", "NameList_names");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SNamed.java
Patch:
@@ -41,7 +41,7 @@ public SNamed(Path<? extends SNamed> path) {
         addMetadata();
     }
 
-    public SNamed(PathMetadata<?> metadata) {
+    public SNamed(PathMetadata metadata) {
         super(SNamed.class, metadata, "", "named_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SNamelist.java
Patch:
@@ -40,7 +40,7 @@ public SNamelist(Path<? extends SNamelist> path) {
         addMetadata();
     }
 
-    public SNamelist(PathMetadata<?> metadata) {
+    public SNamelist(PathMetadata metadata) {
         super(SNamelist.class, metadata, "", "namelist_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SNationality.java
Patch:
@@ -44,7 +44,7 @@ public SNationality(Path<? extends SNationality> path) {
         addMetadata();
     }
 
-    public SNationality(PathMetadata<?> metadata) {
+    public SNationality(PathMetadata metadata) {
         super(SNationality.class, metadata, "", "nationality_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SNumeric.java
Patch:
@@ -42,7 +42,7 @@ public SNumeric(Path<? extends SNumeric> path) {
         addMetadata();
     }
 
-    public SNumeric(PathMetadata<?> metadata) {
+    public SNumeric(PathMetadata metadata) {
         super(SNumeric.class, metadata, "", "numeric_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SOrder.java
Patch:
@@ -53,7 +53,7 @@ public SOrder(Path<? extends SOrder> path) {
         addMetadata();
     }
 
-    public SOrder(PathMetadata<?> metadata) {
+    public SOrder(PathMetadata metadata) {
         super(SOrder.class, metadata, "", "order_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SOrderDeliveredItemIndices.java
Patch:
@@ -44,7 +44,7 @@ public SOrderDeliveredItemIndices(Path<? extends SOrderDeliveredItemIndices> pat
         addMetadata();
     }
 
-    public SOrderDeliveredItemIndices(PathMetadata<?> metadata) {
+    public SOrderDeliveredItemIndices(PathMetadata metadata) {
         super(SOrderDeliveredItemIndices.class, metadata, "", "Order_deliveredItemIndices");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SOrder_item.java
Patch:
@@ -46,7 +46,7 @@ public SOrder_item(Path<? extends SOrder_item> path) {
         addMetadata();
     }
 
-    public SOrder_item(PathMetadata<?> metadata) {
+    public SOrder_item(PathMetadata metadata) {
         super(SOrder_item.class, metadata, "", "order__item_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SParameter.java
Patch:
@@ -40,7 +40,7 @@ public SParameter(Path<? extends SParameter> path) {
         addMetadata();
     }
 
-    public SParameter(PathMetadata<?> metadata) {
+    public SParameter(PathMetadata metadata) {
         super(SParameter.class, metadata, "", "parameter_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SParent.java
Patch:
@@ -43,7 +43,7 @@ public SParent(Path<? extends SParent> path) {
         addMetadata();
     }
 
-    public SParent(PathMetadata<?> metadata) {
+    public SParent(PathMetadata metadata) {
         super(SParent.class, metadata, "", "parent_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SParent2.java
Patch:
@@ -40,7 +40,7 @@ public SParent2(Path<? extends SParent2> path) {
         addMetadata();
     }
 
-    public SParent2(PathMetadata<?> metadata) {
+    public SParent2(PathMetadata metadata) {
         super(SParent2.class, metadata, "", "Parent2");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SPerson.java
Patch:
@@ -54,7 +54,7 @@ public SPerson(Path<? extends SPerson> path) {
         addMetadata();
     }
 
-    public SPerson(PathMetadata<?> metadata) {
+    public SPerson(PathMetadata metadata) {
         super(SPerson.class, metadata, "", "person_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SPersonid.java
Patch:
@@ -45,7 +45,7 @@ public SPersonid(Path<? extends SPersonid> path) {
         addMetadata();
     }
 
-    public SPersonid(PathMetadata<?> metadata) {
+    public SPersonid(PathMetadata metadata) {
         super(SPersonid.class, metadata, "", "personid_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SPlayer.java
Patch:
@@ -40,7 +40,7 @@ public SPlayer(Path<? extends SPlayer> path) {
         addMetadata();
     }
 
-    public SPlayer(PathMetadata<?> metadata) {
+    public SPlayer(PathMetadata metadata) {
         super(SPlayer.class, metadata, "", "player_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SPlayerScores.java
Patch:
@@ -40,7 +40,7 @@ public SPlayerScores(Path<? extends SPlayerScores> path) {
         addMetadata();
     }
 
-    public SPlayerScores(PathMetadata<?> metadata) {
+    public SPlayerScores(PathMetadata metadata) {
         super(SPlayerScores.class, metadata, "", "Player_scores");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SPrice.java
Patch:
@@ -46,7 +46,7 @@ public SPrice(Path<? extends SPrice> path) {
         addMetadata();
     }
 
-    public SPrice(PathMetadata<?> metadata) {
+    public SPrice(PathMetadata metadata) {
         super(SPrice.class, metadata, "", "price_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SShapes.java
Patch:
@@ -41,7 +41,7 @@ public SShapes(Path<? extends SShapes> path) {
         addMetadata();
     }
 
-    public SShapes(PathMetadata<?> metadata) {
+    public SShapes(PathMetadata metadata) {
         super(SShapes.class, metadata, "", "SHAPES");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SShow.java
Patch:
@@ -40,7 +40,7 @@ public SShow(Path<? extends SShow> path) {
         addMetadata();
     }
 
-    public SShow(PathMetadata<?> metadata) {
+    public SShow(PathMetadata metadata) {
         super(SShow.class, metadata, "", "show_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SShowActs.java
Patch:
@@ -45,7 +45,7 @@ public SShowActs(Path<? extends SShowActs> path) {
         addMetadata();
     }
 
-    public SShowActs(PathMetadata<?> metadata) {
+    public SShowActs(PathMetadata metadata) {
         super(SShowActs.class, metadata, "", "Show_acts");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SSimpletypes.java
Patch:
@@ -74,7 +74,7 @@ public SSimpletypes(Path<? extends SSimpletypes> path) {
         addMetadata();
     }
 
-    public SSimpletypes(PathMetadata<?> metadata) {
+    public SSimpletypes(PathMetadata metadata) {
         super(SSimpletypes.class, metadata, "", "simpletypes_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SStatus.java
Patch:
@@ -45,7 +45,7 @@ public SStatus(Path<? extends SStatus> path) {
         addMetadata();
     }
 
-    public SStatus(PathMetadata<?> metadata) {
+    public SStatus(PathMetadata metadata) {
         super(SStatus.class, metadata, "", "status_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SStatuschange.java
Patch:
@@ -43,7 +43,7 @@ public SStatuschange(Path<? extends SStatuschange> path) {
         addMetadata();
     }
 
-    public SStatuschange(PathMetadata<?> metadata) {
+    public SStatuschange(PathMetadata metadata) {
         super(SStatuschange.class, metadata, "", "statuschange_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SStore.java
Patch:
@@ -44,7 +44,7 @@ public SStore(Path<? extends SStore> path) {
         addMetadata();
     }
 
-    public SStore(PathMetadata<?> metadata) {
+    public SStore(PathMetadata metadata) {
         super(SStore.class, metadata, "", "store_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SStore_customer.java
Patch:
@@ -42,7 +42,7 @@ public SStore_customer(Path<? extends SStore_customer> path) {
         addMetadata();
     }
 
-    public SStore_customer(PathMetadata<?> metadata) {
+    public SStore_customer(PathMetadata metadata) {
         super(SStore_customer.class, metadata, "", "store__customer_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SSurvey.java
Patch:
@@ -43,7 +43,7 @@ public SSurvey(Path<? extends SSurvey> path) {
         addMetadata();
     }
 
-    public SSurvey(PathMetadata<?> metadata) {
+    public SSurvey(PathMetadata metadata) {
         super(SSurvey.class, metadata, "", "SURVEY");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/STest.java
Patch:
@@ -36,7 +36,7 @@ public STest(Path<? extends STest> path) {
         addMetadata();
     }
 
-    public STest(PathMetadata<?> metadata) {
+    public STest(PathMetadata metadata) {
         super(STest.class, metadata, "", "TEST");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/STimeTest.java
Patch:
@@ -36,7 +36,7 @@ public STimeTest(Path<? extends STimeTest> path) {
         addMetadata();
     }
 
-    public STimeTest(PathMetadata<?> metadata) {
+    public STimeTest(PathMetadata metadata) {
         super(STimeTest.class, metadata, "", "TIME_TEST");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SUser.java
Patch:
@@ -51,7 +51,7 @@ public SUser(Path<? extends SUser> path) {
         addMetadata();
     }
 
-    public SUser(PathMetadata<?> metadata) {
+    public SUser(PathMetadata metadata) {
         super(SUser.class, metadata, "", "user_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SUser2.java
Patch:
@@ -64,7 +64,7 @@ public SUser2(Path<? extends SUser2> path) {
         addMetadata();
     }
 
-    public SUser2(PathMetadata<?> metadata) {
+    public SUser2(PathMetadata metadata) {
         super(SUser2.class, metadata, "", "user2_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SUser2_userprop.java
Patch:
@@ -44,7 +44,7 @@ public SUser2_userprop(Path<? extends SUser2_userprop> path) {
         addMetadata();
     }
 
-    public SUser2_userprop(PathMetadata<?> metadata) {
+    public SUser2_userprop(PathMetadata metadata) {
         super(SUser2_userprop.class, metadata, "", "user2__userprop_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SUserprop.java
Patch:
@@ -62,7 +62,7 @@ public SUserprop(Path<? extends SUserprop> path) {
         addMetadata();
     }
 
-    public SUserprop(PathMetadata<?> metadata) {
+    public SUserprop(PathMetadata metadata) {
         super(SUserprop.class, metadata, "", "userprop_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SUserprop_category.java
Patch:
@@ -44,7 +44,7 @@ public SUserprop_category(Path<? extends SUserprop_category> path) {
         addMetadata();
     }
 
-    public SUserprop_category(PathMetadata<?> metadata) {
+    public SUserprop_category(PathMetadata metadata) {
         super(SUserprop_category.class, metadata, "", "userprop__category_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SUserprop_categoryprop.java
Patch:
@@ -44,7 +44,7 @@ public SUserprop_categoryprop(Path<? extends SUserprop_categoryprop> path) {
         addMetadata();
     }
 
-    public SUserprop_categoryprop(PathMetadata<?> metadata) {
+    public SUserprop_categoryprop(PathMetadata metadata) {
         super(SUserprop_categoryprop.class, metadata, "", "userprop__categoryprop_");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SWorld.java
Patch:
@@ -40,7 +40,7 @@ public SWorld(Path<? extends SWorld> path) {
         addMetadata();
     }
 
-    public SWorld(PathMetadata<?> metadata) {
+    public SWorld(PathMetadata metadata) {
         super(SWorld.class, metadata, "", "World");
         addMetadata();
     }

File: querydsl-jpa/src/test/java/com/querydsl/jpa/domain/sql/SWorldMammal.java
Patch:
@@ -44,7 +44,7 @@ public SWorldMammal(Path<? extends SWorldMammal> path) {
         addMetadata();
     }
 
-    public SWorldMammal(PathMetadata<?> metadata) {
+    public SWorldMammal(PathMetadata metadata) {
         super(SWorldMammal.class, metadata, "", "World_Mammal");
         addMetadata();
     }

File: querydsl-mongodb/src/main/java/com/querydsl/mongodb/MongodbSerializer.java
Patch:
@@ -307,7 +307,7 @@ protected boolean isReference(Path<?> arg) {
 
     @Override
     public String visit(Path<?> expr, Void context) {
-        PathMetadata<?> metadata = expr.getMetadata();
+        PathMetadata metadata = expr.getMetadata();
         if (metadata.getParent() != null) {
             if (metadata.getPathType() == PathType.COLLECTION_ANY) {
                 return visit(metadata.getParent(), context);
@@ -319,7 +319,7 @@ public String visit(Path<?> expr, Void context) {
         return getKeyForPath(expr, metadata);
     }
 
-    protected String getKeyForPath(Path<?> expr, PathMetadata<?> metadata) {
+    protected String getKeyForPath(Path<?> expr, PathMetadata metadata) {
         if (expr.getType().equals(ObjectId.class)) {
             return "_id";
         } else {

File: querydsl-mongodb/src/main/java/com/querydsl/mongodb/Point.java
Patch:
@@ -36,7 +36,7 @@ public Point(Path<?> parent, String property) {
         super(Double[].class, parent, property);
     }
 
-    public Point(PathMetadata<?> metadata) {
+    public Point(PathMetadata metadata) {
         super(Double[].class, metadata);
     }
 

File: querydsl-mongodb/src/main/java/com/querydsl/mongodb/morphia/MorphiaSerializer.java
Patch:
@@ -39,7 +39,7 @@ public MorphiaSerializer(Morphia morphia) {
     }
 
     @Override
-    protected String getKeyForPath(Path<?> expr, PathMetadata<?> metadata) {
+    protected String getKeyForPath(Path<?> expr, PathMetadata metadata) {
         if (metadata.getPathType() == PathType.PROPERTY && expr.getAnnotatedElement().isAnnotationPresent(Property.class)) {
             return expr.getAnnotatedElement().getAnnotation(Property.class).value();
         } else {

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/path/JTSGeometryCollectionPath.java
Patch:
@@ -43,11 +43,11 @@ public JTSGeometryCollectionPath(Class<? extends T> type, Path<?> parent, String
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public JTSGeometryCollectionPath(PathMetadata<?> metadata) {
+    public JTSGeometryCollectionPath(PathMetadata metadata) {
         this((Class<? extends T>) GeometryCollection.class, metadata);
     }
 
-    public JTSGeometryCollectionPath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public JTSGeometryCollectionPath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -66,7 +66,7 @@ public JTSGeometryCollectionPath(Class<? extends T> type, String var) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/path/JTSGeometryPath.java
Patch:
@@ -67,11 +67,11 @@ public JTSGeometryPath(Class<? extends T> type, Path<?> parent, String property)
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public JTSGeometryPath(PathMetadata<?> metadata) {
+    public JTSGeometryPath(PathMetadata metadata) {
         this((Class<? extends T>) Geometry.class, metadata);
     }
 
-    public JTSGeometryPath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public JTSGeometryPath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -146,7 +146,7 @@ public JTSGeometryPath(Class<? extends T> type, String var) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/path/JTSLineStringPath.java
Patch:
@@ -43,11 +43,11 @@ public JTSLineStringPath(Class<? extends T> type, Path<?> parent, String propert
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public JTSLineStringPath(PathMetadata<?> metadata) {
+    public JTSLineStringPath(PathMetadata metadata) {
         this((Class<? extends T>) LineString.class, metadata);
     }
 
-    public JTSLineStringPath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public JTSLineStringPath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -66,7 +66,7 @@ public JTSLineStringPath(Class<? extends T> type, String var) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/path/JTSLinearRingPath.java
Patch:
@@ -43,11 +43,11 @@ public JTSLinearRingPath(Class<? extends T> type, Path<?> parent, String propert
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public JTSLinearRingPath(PathMetadata<?> metadata) {
+    public JTSLinearRingPath(PathMetadata metadata) {
         this((Class<? extends T>) LinearRing.class, metadata);
     }
 
-    public JTSLinearRingPath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public JTSLinearRingPath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -66,7 +66,7 @@ public JTSLinearRingPath(Class<? extends T> type, String var) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/path/JTSMultiLineStringPath.java
Patch:
@@ -43,11 +43,11 @@ public JTSMultiLineStringPath(Class<? extends T> type, Path<?> parent, String pr
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public JTSMultiLineStringPath(PathMetadata<?> metadata) {
+    public JTSMultiLineStringPath(PathMetadata metadata) {
         this((Class<? extends T>) MultiLineString.class, metadata);
     }
 
-    public JTSMultiLineStringPath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public JTSMultiLineStringPath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -66,7 +66,7 @@ public JTSMultiLineStringPath(Class<? extends T> type, String var) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/path/JTSMultiPointPath.java
Patch:
@@ -43,11 +43,11 @@ public JTSMultiPointPath(Class<? extends T> type, Path<?> parent, String propert
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public JTSMultiPointPath(PathMetadata<?> metadata) {
+    public JTSMultiPointPath(PathMetadata metadata) {
         this((Class<? extends T>) MultiPoint.class, metadata);
     }
 
-    public JTSMultiPointPath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public JTSMultiPointPath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -66,7 +66,7 @@ public JTSMultiPointPath(Class<? extends T> type, String var) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/path/JTSMultiPolygonPath.java
Patch:
@@ -43,11 +43,11 @@ public JTSMultiPolygonPath(Class<? extends T> type, Path<?> parent, String prope
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public JTSMultiPolygonPath(PathMetadata<?> metadata) {
+    public JTSMultiPolygonPath(PathMetadata metadata) {
         this((Class<? extends T>) MultiPolygon.class, metadata);
     }
 
-    public JTSMultiPolygonPath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public JTSMultiPolygonPath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -66,7 +66,7 @@ public JTSMultiPolygonPath(Class<? extends T> type, String var) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/path/JTSPointPath.java
Patch:
@@ -43,11 +43,11 @@ public JTSPointPath(Class<? extends T> type, Path<?> parent, String property) {
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public JTSPointPath(PathMetadata<?> metadata) {
+    public JTSPointPath(PathMetadata metadata) {
         this((Class<? extends T>) Point.class, metadata);
     }
 
-    public JTSPointPath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public JTSPointPath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -66,7 +66,7 @@ public JTSPointPath(Class<? extends T> type, String var) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-spatial/src/main/java/com/querydsl/spatial/jts/path/JTSPolygonPath.java
Patch:
@@ -43,11 +43,11 @@ public JTSPolygonPath(Class<? extends T> type, Path<?> parent, String property)
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public JTSPolygonPath(PathMetadata<?> metadata) {
+    public JTSPolygonPath(PathMetadata metadata) {
         this((Class<? extends T>) Polygon.class, metadata);
     }
 
-    public JTSPolygonPath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public JTSPolygonPath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -66,7 +66,7 @@ public JTSPolygonPath(Class<? extends T> type, String var) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-spatial/src/main/java/com/querydsl/spatial/path/GeometryCollectionPath.java
Patch:
@@ -43,11 +43,11 @@ public GeometryCollectionPath(Class<? extends T> type, Path<?> parent, String pr
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public GeometryCollectionPath(PathMetadata<?> metadata) {
+    public GeometryCollectionPath(PathMetadata metadata) {
         this((Class<? extends T>) GeometryCollection.class, metadata);
     }
 
-    public GeometryCollectionPath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public GeometryCollectionPath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -66,7 +66,7 @@ public GeometryCollectionPath(Class<? extends T> type, String var) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-spatial/src/main/java/com/querydsl/spatial/path/GeometryPath.java
Patch:
@@ -70,11 +70,11 @@ public GeometryPath(Class<? extends T> type, Path<?> parent, String property) {
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public GeometryPath(PathMetadata<?> metadata) {
+    public GeometryPath(PathMetadata metadata) {
         this((Class<? extends T>) Geometry.class, metadata);
     }
 
-    public GeometryPath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public GeometryPath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -156,7 +156,7 @@ public GeometryPath(Class<? extends T> type, String var) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-spatial/src/main/java/com/querydsl/spatial/path/LineStringPath.java
Patch:
@@ -43,11 +43,11 @@ public LineStringPath(Class<? extends T> type, Path<?> parent, String property)
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public LineStringPath(PathMetadata<?> metadata) {
+    public LineStringPath(PathMetadata metadata) {
         this((Class<? extends T>) LineString.class, metadata);
     }
 
-    public LineStringPath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public LineStringPath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -66,7 +66,7 @@ public LineStringPath(Class<? extends T> type, String var) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-spatial/src/main/java/com/querydsl/spatial/path/LinearRingPath.java
Patch:
@@ -43,11 +43,11 @@ public LinearRingPath(Class<? extends T> type, Path<?> parent, String property)
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public LinearRingPath(PathMetadata<?> metadata) {
+    public LinearRingPath(PathMetadata metadata) {
         this((Class<? extends T>) LinearRing.class, metadata);
     }
 
-    public LinearRingPath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public LinearRingPath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -66,7 +66,7 @@ public LinearRingPath(Class<? extends T> type, String var) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-spatial/src/main/java/com/querydsl/spatial/path/MultiLineStringPath.java
Patch:
@@ -43,11 +43,11 @@ public MultiLineStringPath(Class<? extends T> type, Path<?> parent, String prope
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public MultiLineStringPath(PathMetadata<?> metadata) {
+    public MultiLineStringPath(PathMetadata metadata) {
         this((Class<? extends T>) MultiLineString.class, metadata);
     }
 
-    public MultiLineStringPath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public MultiLineStringPath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -66,7 +66,7 @@ public MultiLineStringPath(Class<? extends T> type, String var) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-spatial/src/main/java/com/querydsl/spatial/path/MultiPointPath.java
Patch:
@@ -43,11 +43,11 @@ public MultiPointPath(Class<? extends T> type, Path<?> parent, String property)
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public MultiPointPath(PathMetadata<?> metadata) {
+    public MultiPointPath(PathMetadata metadata) {
         this((Class<? extends T>) MultiPoint.class, metadata);
     }
 
-    public MultiPointPath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public MultiPointPath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -66,7 +66,7 @@ public MultiPointPath(Class<? extends T> type, String var) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-spatial/src/main/java/com/querydsl/spatial/path/MultiPolygonPath.java
Patch:
@@ -43,11 +43,11 @@ public MultiPolygonPath(Class<? extends T> type, Path<?> parent, String property
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public MultiPolygonPath(PathMetadata<?> metadata) {
+    public MultiPolygonPath(PathMetadata metadata) {
         this((Class<? extends T>) MultiPolygon.class, metadata);
     }
 
-    public MultiPolygonPath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public MultiPolygonPath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -66,7 +66,7 @@ public MultiPolygonPath(Class<? extends T> type, String var) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-spatial/src/main/java/com/querydsl/spatial/path/PointPath.java
Patch:
@@ -43,11 +43,11 @@ public PointPath(Class<? extends T> type, Path<?> parent, String property) {
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public PointPath(PathMetadata<?> metadata) {
+    public PointPath(PathMetadata metadata) {
         this((Class<? extends T>) Point.class, metadata);
     }
 
-    public PointPath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public PointPath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -66,7 +66,7 @@ public PointPath(Class<? extends T> type, String var) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-spatial/src/main/java/com/querydsl/spatial/path/PolygonPath.java
Patch:
@@ -43,11 +43,11 @@ public PolygonPath(Class<? extends T> type, Path<?> parent, String property) {
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public PolygonPath(PathMetadata<?> metadata) {
+    public PolygonPath(PathMetadata metadata) {
         this((Class<? extends T>) Polygon.class, metadata);
     }
 
-    public PolygonPath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public PolygonPath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -66,7 +66,7 @@ public PolygonPath(Class<? extends T> type, String var) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-spatial/src/main/java/com/querydsl/spatial/path/PolyhedralSurfacePath.java
Patch:
@@ -43,11 +43,11 @@ public PolyhedralSurfacePath(Class<? extends T> type, Path<?> parent, String pro
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
-    public PolyhedralSurfacePath(PathMetadata<?> metadata) {
+    public PolyhedralSurfacePath(PathMetadata metadata) {
         this((Class<? extends T>) PolyHedralSurface.class, metadata);
     }
 
-    public PolyhedralSurfacePath(Class<? extends T> type, PathMetadata<?> metadata) {
+    public PolyhedralSurfacePath(Class<? extends T> type, PathMetadata metadata) {
         super(new PathImpl<T>(type, metadata));
         this.pathMixin = (PathImpl<T>)mixin;
     }
@@ -66,7 +66,7 @@ public PolyhedralSurfacePath(Class<? extends T> type, String var) {
     }
 
     @Override
-    public PathMetadata<?> getMetadata() {
+    public PathMetadata getMetadata() {
         return pathMixin.getMetadata();
     }
 

File: querydsl-sql-spatial/src/main/java/com/querydsl/sql/spatial/QSpatialRefSys.java
Patch:
@@ -60,7 +60,7 @@ public QSpatialRefSys(Path<? extends SpatialRefSys> path) {
         addMetadata();
     }
 
-    public QSpatialRefSys(PathMetadata<?> metadata) {
+    public QSpatialRefSys(PathMetadata metadata) {
         super(SpatialRefSys.class, metadata, "public", "spatial_ref_sys");
         addMetadata();
     }

File: querydsl-sql-spatial/src/main/java/com/querydsl/sql/spatial/RelationalPathSpatial.java
Patch:
@@ -52,7 +52,7 @@ public RelationalPathSpatial(Class<? extends T> type, String variable, String sc
         this(type, PathMetadataFactory.forVariable(variable), schema, table);
     }
 
-    public RelationalPathSpatial(Class<? extends T> type, PathMetadata<?> metadata, String schema, String table) {
+    public RelationalPathSpatial(Class<? extends T> type, PathMetadata metadata, String schema, String table) {
         super(type, metadata, schema, table);
     }
 

File: querydsl-sql-spatial/src/test/java/com/querydsl/sql/spatial/QShapes.java
Patch:
@@ -43,7 +43,7 @@ public QShapes(Path<? extends Shapes> path) {
         addMetadata();
     }
 
-    public QShapes(PathMetadata<?> metadata) {
+    public QShapes(PathMetadata metadata) {
         super(Shapes.class, metadata, "PUBLIC", "SHAPES");
         addMetadata();
     }

File: querydsl-sql/src/main/java/com/querydsl/sql/RelationalPathBase.java
Patch:
@@ -61,7 +61,7 @@ public RelationalPathBase(Class<? extends T> type, String variable, String schem
         this(type, PathMetadataFactory.forVariable(variable), schema, table);
     }
 
-    public RelationalPathBase(Class<? extends T> type, PathMetadata<?> metadata, String schema,
+    public RelationalPathBase(Class<? extends T> type, PathMetadata metadata, String schema,
             String table) {
         super(type, metadata);
         this.schema = schema;

File: querydsl-sql/src/main/java/com/querydsl/sql/SQLSerializer.java
Patch:
@@ -808,7 +808,7 @@ public Void visit(Path<?> path, Void context) {
                 return null;
             }
         }
-        final PathMetadata<?> metadata = path.getMetadata();
+        final PathMetadata metadata = path.getMetadata();
         boolean precededByDot;
         if (metadata.getParent() != null && (!skipParent || dml)) {
             visit(metadata.getParent(), context);

File: querydsl-sql/src/test/java/com/querydsl/sql/KeywordQuotingBase.java
Patch:
@@ -41,7 +41,7 @@ private Quoting(String path) {
             addMetadata();
         }
 
-        public Quoting(PathMetadata<?> metadata) {
+        public Quoting(PathMetadata metadata) {
             super(Quoting.class, metadata, "PUBLIC", "quoting");
             addMetadata();
         }

File: querydsl-sql/src/test/java/com/querydsl/sql/QBean2Test.java
Patch:
@@ -44,7 +44,7 @@ public QPerson(BeanPath<? extends QPerson> entity) {
             addMetadata();
         }
 
-        public QPerson(PathMetadata<?> metadata) {
+        public QPerson(PathMetadata metadata) {
             super(QPerson.class, metadata, "", "PERSON");
             addMetadata();
         }

File: querydsl-sql/src/test/java/com/querydsl/sql/QCompanies.java
Patch:
@@ -36,7 +36,7 @@ public QCompanies(Path<? extends QCompanies> path) {
         addMetadata();
     }
 
-    public QCompanies(PathMetadata<?> metadata) {
+    public QCompanies(PathMetadata metadata) {
         super(QCompanies.class, metadata, "PUBLIC", "COMPANIES");
         addMetadata();
     }

File: querydsl-sql/src/test/java/com/querydsl/sql/QPerson.java
Patch:
@@ -47,7 +47,7 @@ public QPerson(BeanPath<? extends QPerson> entity) {
         addMetadata();
     }
 
-    public QPerson(PathMetadata<?> metadata) {
+    public QPerson(PathMetadata metadata) {
         super(QPerson.class, metadata, "", "PERSON");
         addMetadata();
     }

File: querydsl-sql/src/test/java/com/querydsl/sql/domain/QDateTest.java
Patch:
@@ -21,7 +21,7 @@ public QDateTest(String path) {
         addMetadata();
     }
 
-    public QDateTest(PathMetadata<?> metadata) {
+    public QDateTest(PathMetadata metadata) {
         super(QDateTest.class, metadata, "PUBLIC", "DATE_TEST");
         addMetadata();
     }

File: querydsl-sql/src/test/java/com/querydsl/sql/domain/QEmployee.java
Patch:
@@ -60,7 +60,7 @@ public QEmployee(String path) {
         addMetadata();
     }
 
-    public QEmployee(PathMetadata<?> metadata) {
+    public QEmployee(PathMetadata metadata) {
         super(Employee.class, metadata, "PUBLIC", "EMPLOYEE");
         addMetadata();
     }

File: querydsl-sql/src/test/java/com/querydsl/sql/domain/QEmployeeNoPK.java
Patch:
@@ -56,7 +56,7 @@ public QEmployeeNoPK(String path) {
         addMetadata();
     }
 
-    public QEmployeeNoPK(PathMetadata<?> metadata) {
+    public QEmployeeNoPK(PathMetadata metadata) {
         super(Employee.class, metadata, "PUBLIC", "EMPLOYEE");
         addMetadata();
     }

File: querydsl-sql/src/test/java/com/querydsl/sql/domain/QNumberTest.java
Patch:
@@ -44,7 +44,7 @@ public QNumberTest(Path<? extends QNumberTest> path) {
         addMetadata();
     }
 
-    public QNumberTest(PathMetadata<?> metadata) {
+    public QNumberTest(PathMetadata metadata) {
         super(QNumberTest.class, metadata, "PUBLIC", "NUMBER_TEST");
         addMetadata();
     }

File: querydsl-sql/src/test/java/com/querydsl/sql/domain/QSurvey.java
Patch:
@@ -44,7 +44,7 @@ public QSurvey(String path) {
         addMetadata();
     }
 
-    public QSurvey(PathMetadata<?> metadata) {
+    public QSurvey(PathMetadata metadata) {
         super(QSurvey.class, metadata, "PUBLIC", "SURVEY");
         addMetadata();
     }

File: querydsl-sql/src/test/java/com/querydsl/sql/domain/QSurveyNoPK.java
Patch:
@@ -39,7 +39,7 @@ public QSurveyNoPK(String path) {
         addMetadata();
     }
 
-    public QSurveyNoPK(PathMetadata<?> metadata) {
+    public QSurveyNoPK(PathMetadata metadata) {
         super(QSurveyNoPK.class, metadata, "PUBLIC", "SURVEY");
         addMetadata();
     }

File: querydsl-sql/src/test/java/com/querydsl/sql/domain/QTest_.java
Patch:
@@ -29,7 +29,7 @@ public QTest_(String path) {
         super(Object.class, PathMetadataFactory.forVariable(path));
     }
 
-    public QTest_(PathMetadata<?> metadata) {
+    public QTest_(PathMetadata metadata) {
         super(Object.class, metadata);
     }
 

File: querydsl-sql/src/test/java/com/querydsl/sql/domain/QUuids.java
Patch:
@@ -42,7 +42,7 @@ public QUuids(Path<? extends QUuids> path) {
         addMetadata();
     }
 
-    public QUuids(PathMetadata<?> metadata) {
+    public QUuids(PathMetadata metadata) {
         super(QUuids.class, metadata, "public", "UUIDS");
         addMetadata();
     }

File: querydsl-sql/src/test/java/com/querydsl/sql/domain/QXmlTest.java
Patch:
@@ -41,7 +41,7 @@ public QXmlTest(Path<? extends QXmlTest> path) {
         addMetadata();
     }
 
-    public QXmlTest(PathMetadata<?> metadata) {
+    public QXmlTest(PathMetadata metadata) {
         super(QXmlTest.class, metadata, "PUBLIC", "XML_TEST");
         addMetadata();
     }

File: querydsl-mongodb/src/main/java/com/querydsl/mongodb/morphia/MorphiaQuery.java
Patch:
@@ -32,7 +32,7 @@
  * @author tiwe
  *
  */
-public class MorphiaQuery<K> extends MongodbQuery<K> {
+public class MorphiaQuery<K> extends MongodbQuery<MorphiaQuery<K>, K> {
 
     private final EntityCache cache;
 

File: querydsl-mongodb/src/test/java/com/querydsl/mongodb/JoinTest.java
Patch:
@@ -145,11 +145,11 @@ public void Deep() {
                 .singleResult().getFirstName());
     }
 
-    private MongodbQuery<User> query() {
+    private MorphiaQuery<User> query() {
         return new MorphiaQuery<User>(morphia, ds, user);
     }
 
-    private MongodbQuery<User> where(Predicate ... e) {
+    private MorphiaQuery<User> where(Predicate ... e) {
         return query().where(e);
     }
 }

File: querydsl-sql/src/main/java/com/mysema/query/sql/CUBRIDTemplates.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.QueryModifiers;
+import com.mysema.query.sql.types.NumericBooleanType;
 import com.mysema.query.types.Ops;
 
 /**
@@ -54,6 +55,7 @@ public CUBRIDTemplates(boolean quote) {
     public CUBRIDTemplates(char escape, boolean quote) {
         super("\"", escape, quote);
         setDummyTable(null);
+        addCustomType(NumericBooleanType.DEFAULT);
         setParameterMetadataAvailable(false);
         setNullsFirst(null);
         setNullsLast(null);

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/BigDecimalAsDoubleType.java
Patch:
@@ -39,7 +39,8 @@ public BigDecimalAsDoubleType(int type) {
 
     @Override
     public BigDecimal getValue(ResultSet rs, int startIndex) throws SQLException {
-        return BigDecimal.valueOf(rs.getDouble(startIndex));
+        Number num = (Number)rs.getObject(startIndex);
+        return num != null ? BigDecimal.valueOf(num.doubleValue()) : null;
     }
 
     @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/BigIntegerAsLongType.java
Patch:
@@ -39,7 +39,8 @@ public BigIntegerAsLongType(int type) {
 
     @Override
     public BigInteger getValue(ResultSet rs, int startIndex) throws SQLException {
-        return BigInteger.valueOf(rs.getLong(startIndex));
+        Number num = (Number) rs.getObject(startIndex);
+        return num != null ? BigInteger.valueOf(num.longValue()) : null;
     }
 
     @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/NumericBooleanType.java
Patch:
@@ -28,6 +28,8 @@
  */
 public class NumericBooleanType extends AbstractType<Boolean> {
 
+    public static NumericBooleanType DEFAULT = new NumericBooleanType();
+
     public NumericBooleanType() {
         super(Types.INTEGER);
     }

File: querydsl-sql/src/main/java/com/mysema/query/sql/DB2Templates.java
Patch:
@@ -187,6 +187,7 @@ public DB2Templates(char escape, boolean quote) {
         add(Ops.DateTimeOps.TRUNC_MINUTE, "trunc_timestamp({0}, 'minute')");
         add(Ops.DateTimeOps.TRUNC_SECOND, "trunc_timestamp({0}, 'second')");
 
+        addTypeNameToCode("smallint", Types.BOOLEAN, true);
         addTypeNameToCode("smallint", Types.TINYINT, true);
         addTypeNameToCode("long varchar for bit data", Types.LONGVARBINARY);
         addTypeNameToCode("varchar () for bit data", Types.VARBINARY);

File: querydsl-sql/src/test/java/com/mysema/query/Connections.java
Patch:
@@ -356,7 +356,7 @@ public static void initDB2() throws SQLException, ClassNotFoundException {
 
         // numbers
         dropTable(templates, "NUMBER_TEST");
-        stmt.execute("create table NUMBER_TEST(col1 int)");
+        stmt.execute("create table NUMBER_TEST(col1 smallint)");
 
         // xml
         dropTable(templates, "XML_TEST");

File: querydsl-sql/src/test/java/com/mysema/query/suites/DB2SuiteTest.java
Patch:
@@ -13,6 +13,7 @@ public class DB2SuiteTest extends AbstractSuite {
     public static class BeanPopulation extends BeanPopulationBase {}
     public static class Delete extends DeleteBase {}
     public static class Insert extends InsertBase {}
+    public static class KeywordQuoting extends KeywordQuotingBase {}
     public static class LikeEscape extends LikeEscapeBase {}
     public static class Merge extends MergeBase {}
     public static class Select extends SelectBase {}

File: querydsl-sql/src/test/java/com/mysema/query/suites/DerbyLiteralsSuiteTest.java
Patch:
@@ -10,6 +10,7 @@ public class DerbyLiteralsSuiteTest extends AbstractSuite {
     public static class BeanPopulation extends BeanPopulationBase {}
     public static class Delete extends DeleteBase {}
     public static class Insert extends InsertBase {}
+    public static class KeywordQuoting extends KeywordQuotingBase {}
     public static class LikeEscape extends LikeEscapeBase {}
     public static class Merge extends MergeBase {}
     public static class Select extends SelectBase {}

File: querydsl-sql/src/main/java/com/mysema/query/sql/ProjectableSQLQuery.java
Patch:
@@ -48,7 +48,7 @@ public abstract class ProjectableSQLQuery<Q extends ProjectableSQLQuery<Q> & Que
     @Nullable
     protected Expression<?> union;
 
-    private SubQueryExpression<?> firstUnionSubQuery;
+    protected SubQueryExpression<?> firstUnionSubQuery;
 
     protected boolean unionAll;
 
@@ -482,6 +482,7 @@ public WithBuilder<Q> with(Path<?> alias, Path<?>... columns) {
     protected void clone(Q query) {
         this.union = query.union;
         this.unionAll = query.unionAll;
+        this.firstUnionSubQuery = query.firstUnionSubQuery;
     }
 
     @Override

File: querydsl-sql/src/test/java/com/mysema/query/suites/H2ExceptionSuiteTest.java
Patch:
@@ -25,7 +25,7 @@ public class H2ExceptionSuiteTest extends AbstractBaseTest {
     @BeforeClass
     public static void setUp() throws Exception {
         Connections.initH2();
-        Connections.setTemplates(H2Templates.builder().build());
+        Connections.initConfiguration(H2Templates.builder().build());
 
         Connections.getConnection().createStatement()
                 .execute("ALTER TABLE SURVEY ADD CONSTRAINT UNIQUE_ID UNIQUE(ID)");

File: querydsl-sql/src/main/java/com/mysema/query/sql/spatial/GeometryWkbType.java
Patch:
@@ -73,7 +73,7 @@ public void setValue(PreparedStatement st, int startIndex, Geometry value) throw
 
     @Override
     public String getLiteral(Geometry geometry) {
-        return Wkt.newEncoder(Wkt.Dialect.POSTGIS_EWKT_1).encode(geometry);
+        return "'" + Wkt.newEncoder(Wkt.Dialect.POSTGIS_EWKT_1).encode(geometry) + "'";
     }
 
 }

File: querydsl-sql/src/main/java/com/mysema/query/sql/spatial/GeometryWktClobType.java
Patch:
@@ -59,7 +59,7 @@ public void setValue(PreparedStatement st, int startIndex, Geometry value) throw
 
     @Override
     public String getLiteral(Geometry geometry) {
-        return Wkt.newEncoder(Wkt.Dialect.POSTGIS_EWKT_1).encode(geometry);
+        return "'" + Wkt.newEncoder(Wkt.Dialect.POSTGIS_EWKT_1).encode(geometry) + "'";
     }
 
 }

File: querydsl-sql/src/main/java/com/mysema/query/sql/spatial/GeometryWktType.java
Patch:
@@ -61,6 +61,6 @@ public void setValue(PreparedStatement st, int startIndex, Geometry value) throw
 
     @Override
     public String getLiteral(Geometry geometry) {
-        return Wkt.newEncoder(Wkt.Dialect.POSTGIS_EWKT_1).encode(geometry);
+        return "'" + Wkt.newEncoder(Wkt.Dialect.POSTGIS_EWKT_1).encode(geometry) + "'";
     }
 }

File: querydsl-sql/src/main/java/com/mysema/query/sql/spatial/PGgeometryType.java
Patch:
@@ -58,7 +58,7 @@ public void setValue(PreparedStatement st, int startIndex, Geometry value) throw
 
     @Override
     public String getLiteral(Geometry geometry) {
-        return Wkt.newEncoder(Wkt.Dialect.POSTGIS_EWKT_1).encode(geometry);
+        return "'" + Wkt.newEncoder(Wkt.Dialect.POSTGIS_EWKT_1).encode(geometry) + "'";
     }
 
 }

File: querydsl-sql/src/main/java/com/mysema/query/sql/ProjectableSQLQuery.java
Patch:
@@ -48,7 +48,7 @@ public abstract class ProjectableSQLQuery<Q extends ProjectableSQLQuery<Q> & Que
     @Nullable
     protected Expression<?> union;
 
-    private SubQueryExpression<?> firstUnionSubQuery;
+    protected SubQueryExpression<?> firstUnionSubQuery;
 
     protected boolean unionAll;
 
@@ -482,6 +482,7 @@ public WithBuilder<Q> with(Path<?> alias, Path<?>... columns) {
     protected void clone(Q query) {
         this.union = query.union;
         this.unionAll = query.unionAll;
+        this.firstUnionSubQuery = query.firstUnionSubQuery;
     }
 
     @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/DB2Templates.java
Patch:
@@ -29,6 +29,9 @@
  */
 public class DB2Templates extends SQLTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final DB2Templates DEFAULT = new DB2Templates();
+
     private String limitTemplate = "\nfetch first {0s} rows only";
 
     private String outerQueryStart = "select * from (\n  ";

File: querydsl-apt/src/test/java/com/mysema/query/apt/DateExtensionsTest.java
Patch:
@@ -13,8 +13,8 @@
  */
 package com.mysema.query.apt;
 
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 import java.io.File;
 import java.io.IOException;

File: querydsl-apt/src/test/java/com/mysema/query/apt/EclipseCompilationTest.java
Patch:
@@ -23,9 +23,8 @@
 
 import javax.tools.JavaCompiler;
 
-import junit.framework.Assert;
-
 import org.eclipse.jdt.internal.compiler.tool.EclipseCompiler;
+import org.junit.Assert;
 import org.junit.Ignore;
 import org.junit.Test;
 

File: querydsl-apt/src/test/java/com/mysema/query/apt/EntityExtensionsTest.java
Patch:
@@ -13,8 +13,8 @@
  */
 package com.mysema.query.apt;
 
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 import java.io.File;
 import java.io.IOException;

File: querydsl-apt/src/test/java/com/mysema/query/apt/IncrementalCompilationTest.java
Patch:
@@ -13,8 +13,8 @@
  */
 package com.mysema.query.apt;
 
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertTrue;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 import java.io.File;
 import java.io.IOException;

File: querydsl-collections/src/test/java/com/mysema/query/collections/GroupByTest.java
Patch:
@@ -22,7 +22,7 @@
 import static com.mysema.query.group.GroupBy.min;
 import static com.mysema.query.group.GroupBy.set;
 import static com.mysema.query.group.GroupBy.sum;
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 

File: querydsl-core/src/test/java/com/mysema/query/QueryExecution.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Collection;
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.mysema.commons.lang.Pair;
 import com.mysema.query.support.QueryBase;

File: querydsl-core/src/test/java/com/mysema/query/group/GroupByIterateTest.java
Patch:
@@ -18,7 +18,7 @@
 import static com.mysema.query.group.GroupBy.list;
 import static com.mysema.query.group.GroupBy.map;
 import static com.mysema.query.group.GroupBy.set;
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 

File: querydsl-core/src/test/java/com/mysema/query/group/GroupByListTest.java
Patch:
@@ -18,7 +18,7 @@
 import static com.mysema.query.group.GroupBy.list;
 import static com.mysema.query.group.GroupBy.map;
 import static com.mysema.query.group.GroupBy.set;
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 

File: querydsl-core/src/test/java/com/mysema/query/group/GroupByMapTest.java
Patch:
@@ -18,7 +18,7 @@
 import static com.mysema.query.group.GroupBy.list;
 import static com.mysema.query.group.GroupBy.map;
 import static com.mysema.query.group.GroupBy.set;
-import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 

File: querydsl-jpa-codegen/src/test/java/com/mysema/query/jpa/codegen/CompileUtils.java
Patch:
@@ -5,8 +5,9 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import org.junit.Assert;
+
 import com.mysema.codegen.SimpleCompiler;
-import junit.framework.Assert;
 
 public class CompileUtils {
 

File: querydsl-sql-codegen/src/test/java/com/mysema/query/sql/codegen/MetaDataSerializerTest.java
Patch:
@@ -19,8 +19,7 @@
 
 import javax.tools.JavaCompiler;
 
-import junit.framework.Assert;
-
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 

File: querydsl-collections/src/main/java/com/mysema/query/collections/CollQueryTemplates.java
Patch:
@@ -25,6 +25,7 @@
  */
 public class CollQueryTemplates extends JavaTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //intentional
     public static final CollQueryTemplates DEFAULT = new CollQueryTemplates();
 
     protected CollQueryTemplates() {

File: querydsl-collections/src/main/java/com/mysema/query/collections/JodaTimeTemplates.java
Patch:
@@ -24,7 +24,8 @@
  */
 public class JodaTimeTemplates extends CollQueryTemplates {
 
-    public static final CollQueryTemplates DEFAULT = new JodaTimeTemplates();
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final JodaTimeTemplates DEFAULT = new JodaTimeTemplates();
 
     protected JodaTimeTemplates() {
         add(Ops.DateTimeOps.YEAR,         "{0}.getYear()");

File: querydsl-core/src/main/java/com/mysema/query/types/JavaTemplates.java
Patch:
@@ -25,6 +25,9 @@
  */
 public class JavaTemplates extends Templates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final JavaTemplates DEFAULT = new JavaTemplates();
+
     public JavaTemplates() {
         add(Ops.EQ, "{0} == {1}");
         add(Ops.IS_NULL, "{0} == null");

File: querydsl-jdo/src/main/java/com/mysema/query/jdo/JDOQLTemplates.java
Patch:
@@ -24,6 +24,7 @@
  */
 public final class JDOQLTemplates extends JavaTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
     public static final JDOQLTemplates DEFAULT = new JDOQLTemplates();
 
     protected JDOQLTemplates() {

File: querydsl-sql/src/main/java/com/mysema/query/sql/CUBRIDTemplates.java
Patch:
@@ -27,6 +27,9 @@
  */
 public class CUBRIDTemplates extends SQLTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final CUBRIDTemplates DEFAULT = new CUBRIDTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/DerbyTemplates.java
Patch:
@@ -27,6 +27,9 @@
  */
 public class DerbyTemplates extends SQLTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final DerbyTemplates DEFAULT = new DerbyTemplates();
+
     private String limitOffsetTemplate = "\noffset {1s} rows fetch next {0s} rows only";
 
     private String limitTemplate = "\nfetch first {0s} rows only";

File: querydsl-sql/src/main/java/com/mysema/query/sql/FirebirdTemplates.java
Patch:
@@ -8,6 +8,9 @@
 
 public class FirebirdTemplates extends SQLTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final FirebirdTemplates DEFAULT = new FirebirdTemplates();
+
     private String limitOffsetTemplate = "\nrows {0} to {1}";
 
     private String limitTemplate = "\nrows {0}";

File: querydsl-sql/src/main/java/com/mysema/query/sql/H2Templates.java
Patch:
@@ -25,6 +25,9 @@
  */
 public class H2Templates extends SQLTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final H2Templates DEFAULT = new H2Templates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/HSQLDBTemplates.java
Patch:
@@ -25,6 +25,9 @@
  */
 public class HSQLDBTemplates extends SQLTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final HSQLDBTemplates DEFAULT = new HSQLDBTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/MySQLTemplates.java
Patch:
@@ -74,6 +74,9 @@ public class MySQLTemplates extends SQLTemplates {
                     "VARCHAR", "VARCHARACTER", "VARYING", "WHEN", "WHERE", "WHILE",
                     "WITH", "WRITE", "XOR", "YEAR_MONTH", "ZEROFILL");
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final MySQLTemplates DEFAULT = new MySQLTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/OracleTemplates.java
Patch:
@@ -33,6 +33,9 @@
  */
 public class OracleTemplates extends SQLTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final OracleTemplates DEFAULT = new OracleTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/PostgresTemplates.java
Patch:
@@ -50,6 +50,9 @@ public class PostgresTemplates extends SQLTemplates {
                     "TRAILING", "TRUE", "UNION", "UNIQUE", "USER", "USING",
                     "VARIADIC", "VERBOSE", "WHEN", "WHERE", "WINDOW", "WITH");
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final PostgresTemplates DEFAULT = new PostgresTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLServer2005Templates.java
Patch:
@@ -34,6 +34,9 @@
  */
 public class SQLServer2005Templates extends SQLServerTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final SQLServer2005Templates DEFAULT = new SQLServer2005Templates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLServer2008Templates.java
Patch:
@@ -22,6 +22,9 @@
  */
 public class SQLServer2008Templates extends SQLServer2005Templates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final SQLServer2008Templates DEFAULT = new SQLServer2008Templates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLServer2012Templates.java
Patch:
@@ -27,6 +27,9 @@
  */
 public class SQLServer2012Templates extends SQLServerTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final SQLServer2012Templates DEFAULT = new SQLServer2012Templates();
+
     private String topTemplate = "top {0s} ";
 
     private String limitOffsetTemplate = "\noffset {1} rows fetch next {0} rows only";

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLServerTemplates.java
Patch:
@@ -30,6 +30,9 @@
  */
 public class SQLServerTemplates extends SQLTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final SQLServerTemplates DEFAULT = new SQLServerTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLTemplates.java
Patch:
@@ -112,6 +112,7 @@ public class SQLTemplates extends Templates {
 
     public static final Expression<?> RECURSIVE = TemplateExpressionImpl.create(Object.class, "");
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
     public static final SQLTemplates DEFAULT = new SQLTemplates("\"",'\\',false);
 
     private static final CharMatcher NON_UNDERSCORE_ALPHA_NUMERIC =

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLiteTemplates.java
Patch:
@@ -34,6 +34,9 @@ public class SQLiteTemplates extends SQLTemplates {
 
     private static final DateTimeFormatter timeFormatter = DateTimeFormat.forPattern("HH:mm:ss");
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final SQLiteTemplates DEFAULT = new SQLiteTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/TeradataTemplates.java
Patch:
@@ -26,6 +26,9 @@
  */
 public class TeradataTemplates extends SQLTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final TeradataTemplates DEFAULT = new TeradataTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/spatial/GeoDBTemplates.java
Patch:
@@ -24,6 +24,9 @@
  */
 public class GeoDBTemplates extends H2Templates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final GeoDBTemplates DEFAULT = new GeoDBTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/spatial/MySQLSpatialTemplates.java
Patch:
@@ -25,6 +25,9 @@
  */
 public class MySQLSpatialTemplates extends MySQLTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final MySQLSpatialTemplates DEFAULT = new MySQLSpatialTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/spatial/OracleSpatialTemplates.java
Patch:
@@ -22,6 +22,9 @@
  */
 public class OracleSpatialTemplates extends OracleTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final OracleSpatialTemplates DEFAULT = new OracleSpatialTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/spatial/PostGISTemplates.java
Patch:
@@ -25,6 +25,9 @@
  */
 public class PostGISTemplates extends PostgresTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final PostGISTemplates DEFAULT = new PostGISTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/spatial/SQLServer2008SpatialTemplates.java
Patch:
@@ -25,6 +25,9 @@
  */
 public class SQLServer2008SpatialTemplates extends SQLServer2008Templates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final SQLServer2008SpatialTemplates DEFAULT = new SQLServer2008SpatialTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/spatial/TeradataSpatialTemplates.java
Patch:
@@ -27,6 +27,9 @@
  */
 public class TeradataSpatialTemplates extends TeradataTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final TeradataSpatialTemplates DEFAULT = new TeradataSpatialTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/test/java/com/mysema/query/sql/TemplatesTest.java
Patch:
@@ -15,7 +15,9 @@
 
 import org.junit.Test;
 
-public class TemplatesTest {
+import com.mysema.query.TemplatesTestBase;
+
+public class TemplatesTest extends TemplatesTestBase {
 
     @Test
     public void test() {

File: querydsl-sql/src/test/java/com/mysema/query/Connections.java
Patch:
@@ -869,7 +869,7 @@ public static void initPostgres() throws SQLException, ClassNotFoundException{
 
         // numbers
         dropTable(templates, "NUMBER_TEST");
-        stmt.execute("create table NUMBER_TEST(col1 boolean)");
+        stmt.execute("create table \"NUMBER_TEST\"(\"COL1\" boolean)");
 
         // xml
         dropTable(templates, "XML_TEST");

File: querydsl-sql/src/test/java/com/mysema/query/SelectBase.java
Patch:
@@ -997,6 +997,7 @@ public void Num_Cast2() {
     }
 
     @Test
+    @ExcludeIn({CUBRID, DERBY, POSTGRES})
     public void Number_As_Boolean() {
         QNumberTest numberTest = QNumberTest.numberTest;
         delete(numberTest).execute();

File: querydsl-collections/src/main/java/com/mysema/query/collections/CollQueryTemplates.java
Patch:
@@ -25,6 +25,7 @@
  */
 public class CollQueryTemplates extends JavaTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //intentional
     public static final CollQueryTemplates DEFAULT = new CollQueryTemplates();
 
     protected CollQueryTemplates() {

File: querydsl-collections/src/main/java/com/mysema/query/collections/JodaTimeTemplates.java
Patch:
@@ -24,7 +24,8 @@
  */
 public class JodaTimeTemplates extends CollQueryTemplates {
 
-    public static final CollQueryTemplates DEFAULT = new JodaTimeTemplates();
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final JodaTimeTemplates DEFAULT = new JodaTimeTemplates();
 
     protected JodaTimeTemplates() {
         add(Ops.DateTimeOps.YEAR,         "{0}.getYear()");

File: querydsl-core/src/main/java/com/mysema/query/types/JavaTemplates.java
Patch:
@@ -25,6 +25,9 @@
  */
 public class JavaTemplates extends Templates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final JavaTemplates DEFAULT = new JavaTemplates();
+
     public JavaTemplates() {
         add(Ops.EQ, "{0} == {1}");
         add(Ops.IS_NULL, "{0} == null");

File: querydsl-jdo/src/main/java/com/mysema/query/jdo/JDOQLTemplates.java
Patch:
@@ -24,6 +24,7 @@
  */
 public final class JDOQLTemplates extends JavaTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
     public static final JDOQLTemplates DEFAULT = new JDOQLTemplates();
 
     protected JDOQLTemplates() {

File: querydsl-sql/src/main/java/com/mysema/query/sql/CUBRIDTemplates.java
Patch:
@@ -27,6 +27,9 @@
  */
 public class CUBRIDTemplates extends SQLTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final CUBRIDTemplates DEFAULT = new CUBRIDTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/DerbyTemplates.java
Patch:
@@ -27,6 +27,9 @@
  */
 public class DerbyTemplates extends SQLTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final DerbyTemplates DEFAULT = new DerbyTemplates();
+
     private String limitOffsetTemplate = "\noffset {1s} rows fetch next {0s} rows only";
 
     private String limitTemplate = "\nfetch first {0s} rows only";

File: querydsl-sql/src/main/java/com/mysema/query/sql/FirebirdTemplates.java
Patch:
@@ -8,6 +8,9 @@
 
 public class FirebirdTemplates extends SQLTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final FirebirdTemplates DEFAULT = new FirebirdTemplates();
+
     private String limitOffsetTemplate = "\nrows {0} to {1}";
 
     private String limitTemplate = "\nrows {0}";

File: querydsl-sql/src/main/java/com/mysema/query/sql/H2Templates.java
Patch:
@@ -25,6 +25,9 @@
  */
 public class H2Templates extends SQLTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final H2Templates DEFAULT = new H2Templates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/HSQLDBTemplates.java
Patch:
@@ -25,6 +25,9 @@
  */
 public class HSQLDBTemplates extends SQLTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final HSQLDBTemplates DEFAULT = new HSQLDBTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/MySQLTemplates.java
Patch:
@@ -74,6 +74,9 @@ public class MySQLTemplates extends SQLTemplates {
                     "VARCHAR", "VARCHARACTER", "VARYING", "WHEN", "WHERE", "WHILE",
                     "WITH", "WRITE", "XOR", "YEAR_MONTH", "ZEROFILL");
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final MySQLTemplates DEFAULT = new MySQLTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/OracleTemplates.java
Patch:
@@ -33,6 +33,9 @@
  */
 public class OracleTemplates extends SQLTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final OracleTemplates DEFAULT = new OracleTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/PostgresTemplates.java
Patch:
@@ -50,6 +50,9 @@ public class PostgresTemplates extends SQLTemplates {
                     "TRAILING", "TRUE", "UNION", "UNIQUE", "USER", "USING",
                     "VARIADIC", "VERBOSE", "WHEN", "WHERE", "WINDOW", "WITH");
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final PostgresTemplates DEFAULT = new PostgresTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLServer2005Templates.java
Patch:
@@ -34,6 +34,9 @@
  */
 public class SQLServer2005Templates extends SQLServerTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final SQLServer2005Templates DEFAULT = new SQLServer2005Templates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLServer2008Templates.java
Patch:
@@ -22,6 +22,9 @@
  */
 public class SQLServer2008Templates extends SQLServer2005Templates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final SQLServer2008Templates DEFAULT = new SQLServer2008Templates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLServer2012Templates.java
Patch:
@@ -27,6 +27,9 @@
  */
 public class SQLServer2012Templates extends SQLServerTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final SQLServer2012Templates DEFAULT = new SQLServer2012Templates();
+
     private String topTemplate = "top {0s} ";
 
     private String limitOffsetTemplate = "\noffset {1} rows fetch next {0} rows only";

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLServerTemplates.java
Patch:
@@ -30,6 +30,9 @@
  */
 public class SQLServerTemplates extends SQLTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final SQLServerTemplates DEFAULT = new SQLServerTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLTemplates.java
Patch:
@@ -112,6 +112,7 @@ public class SQLTemplates extends Templates {
 
     public static final Expression<?> RECURSIVE = TemplateExpressionImpl.create(Object.class, "");
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
     public static final SQLTemplates DEFAULT = new SQLTemplates("\"",'\\',false);
 
     private static final CharMatcher NON_UNDERSCORE_ALPHA_NUMERIC =

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLiteTemplates.java
Patch:
@@ -34,6 +34,9 @@ public class SQLiteTemplates extends SQLTemplates {
 
     private static final DateTimeFormatter timeFormatter = DateTimeFormat.forPattern("HH:mm:ss");
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final SQLiteTemplates DEFAULT = new SQLiteTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/TeradataTemplates.java
Patch:
@@ -26,6 +26,9 @@
  */
 public class TeradataTemplates extends SQLTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final TeradataTemplates DEFAULT = new TeradataTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/spatial/GeoDBTemplates.java
Patch:
@@ -24,6 +24,9 @@
  */
 public class GeoDBTemplates extends H2Templates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final GeoDBTemplates DEFAULT = new GeoDBTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/spatial/MySQLSpatialTemplates.java
Patch:
@@ -25,6 +25,9 @@
  */
 public class MySQLSpatialTemplates extends MySQLTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final MySQLSpatialTemplates DEFAULT = new MySQLSpatialTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/spatial/OracleSpatialTemplates.java
Patch:
@@ -22,6 +22,9 @@
  */
 public class OracleSpatialTemplates extends OracleTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final OracleSpatialTemplates DEFAULT = new OracleSpatialTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/spatial/PostGISTemplates.java
Patch:
@@ -25,6 +25,9 @@
  */
 public class PostGISTemplates extends PostgresTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final PostGISTemplates DEFAULT = new PostGISTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/spatial/SQLServer2008SpatialTemplates.java
Patch:
@@ -25,6 +25,9 @@
  */
 public class SQLServer2008SpatialTemplates extends SQLServer2008Templates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final SQLServer2008SpatialTemplates DEFAULT = new SQLServer2008SpatialTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/spatial/TeradataSpatialTemplates.java
Patch:
@@ -27,6 +27,9 @@
  */
 public class TeradataSpatialTemplates extends TeradataTemplates {
 
+    @SuppressWarnings("FieldNameHidesFieldInSuperclass") //Intentional
+    public static final TeradataSpatialTemplates DEFAULT = new TeradataSpatialTemplates();
+
     public static Builder builder() {
         return new Builder() {
             @Override

File: querydsl-sql/src/test/java/com/mysema/query/sql/TemplatesTest.java
Patch:
@@ -15,7 +15,9 @@
 
 import org.junit.Test;
 
-public class TemplatesTest {
+import com.mysema.query.TemplatesTestBase;
+
+public class TemplatesTest extends TemplatesTestBase {
 
     @Test
     public void test() {

File: querydsl-sql/src/test/java/com/mysema/query/sql/domain/QNumberTest.java
Patch:
@@ -25,7 +25,7 @@ public class QNumberTest extends RelationalPathSpatial<QNumberTest> {
 
     public final BooleanPath col1Boolean = createBoolean("col1");
 
-    public final NumberPath col1Number = createNumber("col2", Byte.class);
+    public final NumberPath<Byte> col1Number = createNumber("col2", Byte.class);
 
     public QNumberTest(String variable) {
         super(QNumberTest.class, forVariable(variable), "null", "NUMBER_TEST");

File: querydsl-core/src/main/java/com/mysema/query/types/ExpressionUtils.java
Patch:
@@ -541,7 +541,7 @@ public static <T> Expression<T> extract(Expression<T> expr) {
     public static String createRootVariable(Path<?> path) {
         String variable = path.accept(ToStringVisitor.DEFAULT, TEMPLATES).replace('.', '_');
         String suffix = UUID.randomUUID().toString().replace("-", "").substring(0, 5);
-        return variable + suffix;
+        return variable + "_" + suffix;
     }
 
     /**

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/JPAListAccessVisitor.java
Patch:
@@ -31,7 +31,7 @@ public Expression<?> visit(Path<?> expr, @Nullable Void context) {
                 Path parent = pathMetadata.getParent();
                 replacement = new PathImpl(expr.getType(),
                         ExpressionUtils.createRootVariable(parent));
-                metadata.addJoin(JoinType.JOIN, ExpressionUtils.as(parent, replacement));
+                metadata.addJoin(JoinType.LEFTJOIN, ExpressionUtils.as(parent, replacement));
                 metadata.addJoinCondition(ExpressionUtils.eq(
                         (Expression)Expressions.operation(Integer.class, JPQLOps.INDEX, replacement),
                         ExpressionUtils.toExpression(pathMetadata.getElement())));

File: querydsl-core/src/main/java/com/mysema/query/types/PathMetadata.java
Patch:
@@ -106,7 +106,9 @@ private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IO
             Field field = PathMetadata.class.getDeclaredField("hashCode");
             field.setAccessible(true);
             field.set(this, 31 * element.hashCode() + pathType.hashCode());
-        } catch (Exception e) {
+        } catch (NoSuchFieldException e) {
+            throw new RuntimeException(e);
+        } catch (IllegalAccessException e) {
             throw new RuntimeException(e);
         }
     }

File: querydsl-core/src/main/java/com/mysema/query/types/ExpressionBase.java
Patch:
@@ -29,10 +29,10 @@ public abstract class ExpressionBase<T> implements Expression<T> {
     private final Class<? extends T> type;
     
     @Nullable
-    private volatile String toString;
+    private transient volatile String toString;
 
     @Nullable
-    private volatile Integer hashCode;
+    private transient volatile Integer hashCode;
     
     public ExpressionBase(Class<? extends T> type) {
         this.type = type;

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -379,7 +379,8 @@ public <RT> List<RT> list(Expression<RT> expr) {
     public <RT> SearchResults<RT> listResults(Expression<RT> expr) {
         QueryModifiers originalModifiers = queryMixin.getMetadata().getModifiers();
         try {
-            if (configuration.getTemplates().isCountViaAnalytics()) {
+            if (configuration.getTemplates().isCountViaAnalytics()
+                && queryMixin.getMetadata().getGroupBy().isEmpty()) {
                 List<RT> results;
                 try {
                     queryMixin.addFlag(rowCountFlag);

File: querydsl-jpa/src/test/java/com/mysema/query/AbstractJPATest.java
Patch:
@@ -24,9 +24,6 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.mysema.commons.lang.Pair;
-import com.mysema.query.domain.QAnimal;
-import com.mysema.query.domain.QCat;
-import com.mysema.query.domain.QCompany;
 import com.mysema.query.group.Group;
 import com.mysema.query.group.GroupBy;
 import com.mysema.query.group.QPair;

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -373,7 +373,8 @@ public <RT> List<RT> list(Expression<RT> expr) {
     public <RT> SearchResults<RT> listResults(Expression<RT> expr) {
         QueryModifiers originalModifiers = queryMixin.getMetadata().getModifiers();
         try {
-            if (configuration.getTemplates().isCountViaAnalytics()) {
+            if (configuration.getTemplates().isCountViaAnalytics()
+                && queryMixin.getMetadata().getGroupBy().isEmpty()) {
                 List<RT> results;
                 try {
                     queryMixin.addFlag(rowCountFlag);

File: querydsl-sql/src/test/java/com/mysema/query/SelectBase.java
Patch:
@@ -611,6 +611,7 @@ public void GroupBy_Validate() {
     }
 
     @Test
+    @ExcludeIn({FIREBIRD})
     public void GroupBy_Count() {
         List<Integer> ids = query().from(employee).groupBy(employee.id).list(employee.id);
         long count = query().from(employee).groupBy(employee.id).count();
@@ -624,6 +625,7 @@ public void GroupBy_Count() {
     }
 
     @Test
+    @ExcludeIn({FIREBIRD})
     public void GroupBy_Distinct_Count() {
         List<Integer> ids = query().from(employee).groupBy(employee.id).distinct().list(NumberTemplate.ONE);
         SearchResults<Integer> results = query().from(employee).groupBy(employee.id)

File: querydsl-core/src/main/java/com/mysema/query/types/expr/NumberExpression.java
Patch:
@@ -151,7 +151,7 @@ public NumberExpression<Byte> byteValue() {
     @SuppressWarnings("unchecked")
     private T cast(Number number) {
         Class<T> type = (Class<T>) getType();
-        if (type.equals(number.getClass())) {
+        if (type.isAssignableFrom(number.getClass())) {
             return (T) number;
         } else if (Byte.class.equals(type)) {
             return (T) Byte.valueOf(number.byteValue());

File: querydsl-apt/src/test/java/com/mysema/query/domain/JDOTest.java
Patch:
@@ -49,12 +49,12 @@ public String getStringField2() {
 
     @Test
     public void test() throws SecurityException, NoSuchFieldException {
-        cl = QJDOTest_JDOEntity.class;
+        start(QJDOTest_JDOEntity.class, QJDOTest_JDOEntity.jDOEntity);
         match(StringPath.class, "prop");
         assertMissing("skipped");
         assertMissing("skippedEntity");
 
-        cl = QJDOTest_JDOEntity2.class;
+        start(QJDOTest_JDOEntity2.class, QJDOTest_JDOEntity2.jDOEntity2);
         match(StringPath.class, "stringField1");
         match(StringPath.class, "stringField2");
     }

File: querydsl-apt/src/test/java/com/mysema/query/domain/JPATest.java
Patch:
@@ -37,7 +37,7 @@ public static class JPAEntity {
 
     @Test
     public void test() throws SecurityException, NoSuchFieldException {
-        cl = QJPATest_JPAEntity.class;
+        start(QJPATest_JPAEntity.class, QJPATest_JPAEntity.jPAEntity);
         match(StringPath.class, "prop");
         assertMissing("skipped");
         assertMissing("skippedEntity");

File: querydsl-apt/src/test/java/com/mysema/query/domain/JodaTimeSupportTest.java
Patch:
@@ -51,7 +51,7 @@ public static class JodaTimeSupport {
 
     @Test
     public void test() throws SecurityException, NoSuchFieldException {
-        cl = QJodaTimeSupportTest_JodaTimeSupport.class;
+        start(QJodaTimeSupportTest_JodaTimeSupport.class, QJodaTimeSupportTest_JodaTimeSupport.jodaTimeSupport);
         match(DateTimePath.class, "dateMidnight");
         match(DateTimePath.class, "dateTime");
         match(DateTimePath.class, "instant");

File: querydsl-apt/src/test/java/com/mysema/query/domain/QueryTypeTest.java
Patch:
@@ -50,11 +50,12 @@ public static class QueryTypeEntity {
 
     @Test
     public void test() throws SecurityException, NoSuchFieldException{
-        cl = QQueryTypeTest_QueryTypeEntity.class;
+        start(QQueryTypeTest_QueryTypeEntity.class, QQueryTypeTest_QueryTypeEntity.queryTypeEntity);
         match(SimplePath.class, "stringAsSimple");
         match(ComparablePath.class, "stringAsComparable");
         match(DatePath.class, "stringAsDate");
         match(DateTimePath.class, "stringAsDateTime");
         match(TimePath.class, "stringAsTime");
+        assertMissing("stringNotInQuerydsl");
     }
 }

File: querydsl-apt/src/test/java/com/mysema/query/domain/RelationTest.java
Patch:
@@ -115,7 +115,7 @@ public static class RelationType {
 
     @Test
     public void test() throws SecurityException, NoSuchFieldException {
-        cl = QRelationTest_RelationType.class;
+        start(QRelationTest_RelationType.class, QRelationTest_RelationType.relationType);
         match(EnumPath.class, "enumProperty");
         match(ListPath.class, "enumList");
         match(MapPath.class, "enumMap1");

File: querydsl-core/src/main/java/com/mysema/query/types/expr/NumberExpression.java
Patch:
@@ -151,7 +151,7 @@ public NumberExpression<Byte> byteValue() {
     @SuppressWarnings("unchecked")
     private T cast(Number number) {
         Class<T> type = (Class<T>) getType();
-        if (type.equals(number.getClass())) {
+        if (type.isAssignableFrom(number.getClass())) {
             return (T) number;
         } else if (Byte.class.equals(type)) {
             return (T) Byte.valueOf(number.byteValue());

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLSerializer.java
Patch:
@@ -886,7 +886,7 @@ protected void visitOperation(Class<?> type, Operator<?> operator, List<? extend
                 if (templates.getListMaxSize() == 0 || coll.size() <= templates.getListMaxSize()) {
                     super.visitOperation(type, operator, args);
                 } else {
-                    if (!constantPaths.isEmpty()) {
+                    if (pathAdded) {
                         constantPaths.removeLast();
                     }
                     BooleanBuilder b = new BooleanBuilder();

File: querydsl-apt/src/main/java/com/mysema/query/apt/ExtendedTypeFactory.java
Patch:
@@ -558,7 +558,7 @@ private Set<Type> getSupertypes(TypeMirror typeMirror, Type type, boolean deep)
                 }
             // interface
             } else {
-                superTypes = new HashSet<Type>(e.getInterfaces().size());
+                superTypes = new LinkedHashSet<Type>(e.getInterfaces().size());
                 for (TypeMirror mirror : e.getInterfaces()) {
                     Type iface = getType(mirror, deep);
                     if (!iface.getFullName().startsWith("java")) {

File: querydsl-apt/src/main/java/com/mysema/query/apt/jpa/JPAConfiguration.java
Patch:
@@ -86,7 +86,7 @@ public VisitorConfig getConfig(TypeElement e, List<? extends Element> elements)
                 methods |= element.getKind().equals(ElementKind.METHOD);
             }
         }
-        return VisitorConfig.get(fields, methods);
+        return VisitorConfig.get(fields, methods, VisitorConfig.ALL);
     }
 
     @Override

File: querydsl-apt/src/main/java/com/mysema/query/apt/SpatialSupport.java
Patch:
@@ -66,9 +66,6 @@ private static void addImports(AbstractModule module, String packageName) {
     public static void addSupport(AbstractModule module) {
         registerTypes(module.get(TypeMappings.class));
         addImports(module,"com.mysema.query.spatial.path");
-    }
-    
-    public static void addJTSSupport(AbstractModule module) {
     	registerJTSTypes(module.get(TypeMappings.class));
     	addImports(module,"com.mysema.query.spatial.jts.path");
     }

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathBuilder.java
Patch:
@@ -108,7 +108,7 @@ private <P extends Path<?>> P  addMetadataOf(P newPath, Path<?> path) {
     }
 
     protected <T> Class<? extends T> validate(String property, Class<T> propertyType) {
-        Class<?  extends T> validatedType = validator.validate(getType(), property, propertyType);
+        Class<T> validatedType = (Class)validator.validate(getType(), property, propertyType);
         if (validatedType != null) {
             return validatedType;
         } else {

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/support/JPAPathBuilderValidator.java
Patch:
@@ -38,7 +38,7 @@ public JPAPathBuilderValidator(Metamodel metamodel) {
     }
 
     @Override
-    public <T> Class<? extends T> validate(Class<?> parent, String property, Class<T> propertyType) {
+    public Class<?> validate(Class<?> parent, String property, Class<?> propertyType) {
         try {
             ManagedType managedType = metamodel.managedType(parent);
             Attribute attribute = managedType.getAttribute(property);

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/support/JPAPathBuilderValidator.java
Patch:
@@ -34,11 +34,11 @@ public JPAPathBuilderValidator(Metamodel metamodel) {
     }
 
     @Override
-    public boolean validate(Class<?> parent, String property, Class<?> propertyType) {
+    public <T> Class<? extends T> validate(Class<?> parent, String property, Class<T> propertyType) {
         try {
-            return metamodel.managedType(parent).getAttribute(property) != null;
+            return (Class)metamodel.managedType(parent).getAttribute(property).getJavaType();
         } catch (IllegalArgumentException e) {
-            return false;
+            return null;
         }
     }
 }

File: querydsl-sql/src/main/java/com/mysema/query/sql/FirebirdTemplates.java
Patch:
@@ -58,7 +58,7 @@ public FirebirdTemplates(char escape, boolean quote) {
         add(Ops.MathOps.SINH, "(exp({0}) - exp({0} * -1)) / 2");
         add(Ops.MathOps.TANH, "(exp({0} * 2) - 1) / (exp({0} * 2) + 1)");
         add(Ops.MathOps.DEG, "({0} / pi() * 180.0)");
-        add(Ops.MathOps.RAD, "({0} / 180.0 * pi())");
+        add(Ops.MathOps.RAD, "(({0} / 180.0) * pi())");
 
         //
         add(Ops.DateTimeOps.DATE, "cast({0} as date)");

File: querydsl-sql/src/test/java/com/mysema/query/SelectBase.java
Patch:
@@ -818,7 +818,6 @@ protected Pair<String, String> map(Tuple row) {
     }
 
     @Test
-    @ExcludeIn({FIREBIRD, SQLSERVER}) // FIXME
     public void Math() {
         Expression<Double> expr = Expressions.numberTemplate(Double.class, "0.5");
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/FirebirdTemplates.java
Patch:
@@ -58,7 +58,7 @@ public FirebirdTemplates(char escape, boolean quote) {
         add(Ops.MathOps.SINH, "(exp({0}) - exp({0} * -1)) / 2");
         add(Ops.MathOps.TANH, "(exp({0} * 2) - 1) / (exp({0} * 2) + 1)");
         add(Ops.MathOps.DEG, "({0} / pi() * 180.0)");
-        add(Ops.MathOps.RAD, "({0} / 180.0 * pi())");
+        add(Ops.MathOps.RAD, "(({0} / 180.0) * pi())");
 
         //
         add(Ops.DateTimeOps.DATE, "cast({0} as date)");

File: querydsl-sql/src/test/java/com/mysema/query/SelectBase.java
Patch:
@@ -818,7 +818,6 @@ protected Pair<String, String> map(Tuple row) {
     }
 
     @Test
-    @ExcludeIn({FIREBIRD, SQLSERVER}) // FIXME
     public void Math() {
         Expression<Double> expr = Expressions.numberTemplate(Double.class, "0.5");
 

File: querydsl-sql/src/test/java/com/mysema/query/SelectBase.java
Patch:
@@ -818,9 +818,9 @@ protected Pair<String, String> map(Tuple row) {
     }
 
     @Test
-    @ExcludeIn({FIREBIRD, SQLSERVER}) // FIXME
+    @ExcludeIn({FIREBIRD}) // FIXME
     public void Math() {
-        Expression<Double> expr = Expressions.numberTemplate(Double.class, "0.5");
+        Expression<Double> expr = Expressions.numberTemplate(Double.class, "0.50");
 
         assertEquals(Math.acos(0.5), singleResult(MathExpressions.acos(expr)), 0.001);
         assertEquals(Math.asin(0.5), singleResult(MathExpressions.asin(expr)), 0.001);

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLServerTemplates.java
Patch:
@@ -77,6 +77,9 @@ public SQLServerTemplates(char escape, boolean quote) {
         add(Ops.MOD, "{0} % {1}", 10);
         add(Ops.MathOps.COSH, "(exp({0}) + exp({0} * -1)) / 2");
         add(Ops.MathOps.COTH, "(exp({0} * 2) + 1) / (exp({0} * 2) - 1)");
+        add(Ops.MathOps.LN, "LOG({0})");
+        add(Ops.MathOps.LOG, "LOG({0}, {1})");
+        add(Ops.MathOps.POWER, "POWER({0}, {1})");
         add(Ops.MathOps.SINH, "(exp({0}) - exp({0} * -1)) / 2");
         add(Ops.MathOps.TANH, "(exp({0} * 2) - 1) / (exp({0} * 2) + 1)");
 

File: querydsl-core/src/main/java/com/mysema/query/DefaultQueryMetadata.java
Patch:
@@ -212,6 +212,7 @@ public void clearWhere() {
     @Override
     public QueryMetadata clone() {
         try {
+            addLastJoin();
             DefaultQueryMetadata clone = (DefaultQueryMetadata) super.clone();
             clone.exprInJoins = copyOf(exprInJoins);
             clone.groupBy = copyOf(groupBy);
@@ -362,6 +363,7 @@ public void setValidatingVisitor(ValidatingVisitor visitor) {
     @Override
     public boolean equals(Object o) {
         if (o instanceof QueryMetadata) {
+            addLastJoin();
             QueryMetadata q = (QueryMetadata)o;
             return q.getFlags().equals(flags)
                 && q.getGroupBy().equals(groupBy)
@@ -382,6 +384,7 @@ public boolean equals(Object o) {
 
     @Override
     public int hashCode() {
+        addLastJoin();
         return Objects.hashCode(flags, groupBy, having, joins, modifiers,
                 orderBy, params, projection, unique, where);
     }

File: querydsl-core/src/main/java/com/mysema/query/DefaultQueryMetadata.java
Patch:
@@ -212,6 +212,7 @@ public void clearWhere() {
     @Override
     public QueryMetadata clone() {
         try {
+            addLastJoin();
             DefaultQueryMetadata clone = (DefaultQueryMetadata) super.clone();
             clone.exprInJoins = copyOf(exprInJoins);
             clone.groupBy = copyOf(groupBy);
@@ -362,6 +363,7 @@ public void setValidatingVisitor(ValidatingVisitor visitor) {
     @Override
     public boolean equals(Object o) {
         if (o instanceof QueryMetadata) {
+            addLastJoin();
             QueryMetadata q = (QueryMetadata)o;
             return q.getFlags().equals(flags)
                 && q.getGroupBy().equals(groupBy)
@@ -382,6 +384,7 @@ public boolean equals(Object o) {
 
     @Override
     public int hashCode() {
+        addLastJoin();
         return Objects.hashCode(flags, groupBy, having, joins, modifiers,
                 orderBy, params, projection, unique, where);
     }

File: querydsl-core/src/test/java/com/mysema/query/DefaultQueryMetadataTest.java
Patch:
@@ -43,12 +43,12 @@ public void AddWhere_With_BooleanBuilder() {
     
     @Test
     public void AddHaving_With_Null() {
-        metadata.addWhere((Predicate)null);
+        metadata.addHaving((Predicate)null);
     }
     
     @Test
     public void AddHaving_With_BooleanBuilder() {
-        metadata.addWhere(new BooleanBuilder());
+        metadata.addHaving(new BooleanBuilder());
     }
     
     

File: querydsl-core/src/main/java/com/mysema/query/types/Ops.java
Patch:
@@ -39,7 +39,7 @@ public final class Ops {
 
     public static final Operator<Number>  NUMCAST = new OperatorImpl<Number>(NS, "NUMCAST");
 
-    public static final Operator<String>  STRING_CAST = new OperatorImpl<String>(NS, "STING_CAST");
+    public static final Operator<String>  STRING_CAST = new OperatorImpl<String>(NS, "STRING_CAST");
 
     public static final Operator<Object>  ALIAS = new OperatorImpl<Object>(NS, "ALIAS");
 

File: querydsl-core/src/main/java/com/mysema/query/types/Ops.java
Patch:
@@ -39,7 +39,7 @@ public final class Ops {
 
     public static final Operator<Number>  NUMCAST = new OperatorImpl<Number>(NS, "NUMCAST");
 
-    public static final Operator<String>  STRING_CAST = new OperatorImpl<String>(NS, "STING_CAST");
+    public static final Operator<String>  STRING_CAST = new OperatorImpl<String>(NS, "STRING_CAST");
 
     public static final Operator<Object>  ALIAS = new OperatorImpl<Object>(NS, "ALIAS");
 

File: querydsl-jdo/src/main/java/com/mysema/query/jdo/JDOQLQuery.java
Patch:
@@ -13,9 +13,8 @@
  */
 package com.mysema.query.jdo;
 
-import java.io.Closeable;
-
 import javax.jdo.PersistenceManager;
+import java.io.Closeable;
 
 import com.mysema.query.Projectable;
 
@@ -38,7 +37,7 @@ public interface JDOQLQuery extends JDOCommonQuery<JDOQLQuery>, Projectable, Clo
     /**
      * Add the fetch group to the set of active fetch groups.
      * 
-     * @param string
+     * @param fetchGroupName
      * @return
      */
     JDOQLQuery addFetchGroup(String fetchGroupName);

File: querydsl-jdo/src/main/java/com/mysema/query/jdo/JDOQuery.java
Patch:
@@ -23,15 +23,13 @@
  *
  * @author tiwe
  *
- * @param <A>
  */
 public class JDOQuery extends AbstractJDOQuery<JDOQuery> {
 
     /**
      * Create a detached JDOQuery instance
      * The query can be attached via the clone method
      *
-     * @param persistenceManager
      */
     public JDOQuery() {
         super(null, JDOQLTemplates.DEFAULT, new DefaultQueryMetadata(), false);

File: querydsl-jdo/src/main/java/com/mysema/query/jdo/JDOQLQuery.java
Patch:
@@ -13,9 +13,8 @@
  */
 package com.mysema.query.jdo;
 
-import java.io.Closeable;
-
 import javax.jdo.PersistenceManager;
+import java.io.Closeable;
 
 import com.mysema.query.Projectable;
 
@@ -38,7 +37,7 @@ public interface JDOQLQuery extends JDOCommonQuery<JDOQLQuery>, Projectable, Clo
     /**
      * Add the fetch group to the set of active fetch groups.
      * 
-     * @param string
+     * @param fetchGroupName
      * @return
      */
     JDOQLQuery addFetchGroup(String fetchGroupName);

File: querydsl-jdo/src/main/java/com/mysema/query/jdo/JDOQuery.java
Patch:
@@ -23,15 +23,13 @@
  *
  * @author tiwe
  *
- * @param <A>
  */
 public class JDOQuery extends AbstractJDOQuery<JDOQuery> {
 
     /**
      * Create a detached JDOQuery instance
      * The query can be attached via the clone method
      *
-     * @param persistenceManager
      */
     public JDOQuery() {
         super(null, JDOQLTemplates.DEFAULT, new DefaultQueryMetadata(), false);

File: querydsl-collections/src/main/java/com/mysema/query/collections/CollQuery.java
Patch:
@@ -44,7 +44,7 @@ public CollQuery(CollQueryTemplates templates) {
     /**
      * Create a new CollQuery instance
      *
-     * @param evaluatorFactory
+     * @param queryEngine
      */
     public CollQuery(QueryEngine queryEngine) {
         super(new DefaultQueryMetadata(), queryEngine);
@@ -55,7 +55,6 @@ public CollQuery(QueryEngine queryEngine) {
      * Create a new CollQuery instance
      *
      * @param metadata
-     * @param evaluatorFactory
      */
     public CollQuery(QueryMetadata metadata) {
         super(metadata, DefaultQueryEngine.getDefault());
@@ -65,7 +64,7 @@ public CollQuery(QueryMetadata metadata) {
      * Create a new CollQuery instance
      *
      * @param metadata
-     * @param evaluatorFactory
+     * @param queryEngine
      */
     public CollQuery(QueryMetadata metadata, QueryEngine queryEngine) {
         super(metadata, queryEngine);

File: querydsl-core/src/main/java/com/mysema/query/BooleanBuilder.java
Patch:
@@ -84,7 +84,7 @@ public BooleanBuilder and(@Nullable Predicate right) {
 
     /**
      * Create the intersection of this and the union of the given args
-     * <p>(this && (arg1 || arg2 ... || argN))</p>
+     * {@code (this && (arg1 || arg2 ... || argN))}
      *
      * @param args
      * @return
@@ -168,7 +168,7 @@ public BooleanBuilder or(@Nullable Predicate right) {
 
     /**
      * Create the union of this and the intersection of the given args
-     * <p>(this || (arg1 && arg2 ... && argN))</p>
+     * {@code (this || (arg1 && arg2 ... && argN))}
      *
      * @param args
      * @return

File: querydsl-core/src/main/java/com/mysema/query/group/Group.java
Patch:
@@ -36,8 +36,8 @@ public interface Group {
     /**
      * Returns the value of the given group. 
      * 
-     * @param <T> Type of element in a single ResultSet row, i.e. type of Expression&lt;T>
-     * @param <R> Target type of this group, e.g. List&lt;T>
+     * @param <T> Type of element in a single ResultSet row, i.e. type of {@code Expression<T>}
+     * @param <R> Target type of this group, e.g. {@code List<T>}
      * @param coldef 
      * @throws NoSuchElementException if group is undefined.
      * @throws ClassCastException if group is of different type  

File: querydsl-core/src/main/java/com/mysema/query/support/QueryBase.java
Patch:
@@ -46,7 +46,7 @@ public Q distinct() {
     /**
      * Add a single grouping expression
      *
-     * @param o
+     * @param e
      * @return
      */
     public Q groupBy(Expression<?> e) {
@@ -66,7 +66,7 @@ public Q groupBy(Expression<?>... o) {
     /**
      * Add a single filter for aggregation
      *
-     * @param o
+     * @param e
      * @return
      */
     public Q having(Predicate e) {
@@ -160,7 +160,7 @@ public Q restrict(QueryModifiers modifiers) {
     /**
      * Set the given parameter to the given value
      *
-     * @param <T>
+     * @param <P>
      * @param param
      * @param value
      * @return

File: querydsl-core/src/main/java/com/mysema/query/types/CollectionExpression.java
Patch:
@@ -20,7 +20,7 @@
  *
  * @author tiwe
  *
- * @param <C> expression type
+ * @param <T> expression type
  * @param <E> element type
  * @see java.util.Collection
  */

File: querydsl-core/src/main/java/com/mysema/query/types/FactoryExpressionUtils.java
Patch:
@@ -78,7 +78,7 @@ public boolean equals(Object o) {
     }
 
     /**
-     * @param exprs
+     * @param projection
      * @return
      */
     public static FactoryExpression<?> wrap(List<? extends Expression<?>> projection) {

File: querydsl-core/src/main/java/com/mysema/query/types/expr/BooleanExpression.java
Patch:
@@ -87,7 +87,7 @@ public BooleanExpression as(String alias) {
      * Get an intersection of this and the given expression
      *
      * @param right right hand side of the union
-     * @return this && right
+     * @return {@code this && right}
      */
     public BooleanExpression and(@Nullable Predicate right) {
         right = (Predicate) ExpressionUtils.extract(right);

File: querydsl-core/src/main/java/com/mysema/query/types/expr/MathExpressions.java
Patch:
@@ -182,7 +182,7 @@ public static <A extends Number & Comparable<?>> NumberExpression<A> round(Expre
      * Round to s decimal places
      *
      * @param num
-     * @params s
+     * @param s
      * @return
      */
     public static <A extends Number & Comparable<?>> NumberExpression<A> round(Expression<A> num, int s) {

File: querydsl-core/src/main/java/com/mysema/query/types/expr/SimpleExpression.java
Patch:
@@ -284,7 +284,6 @@ public final BooleanExpression notIn(CollectionExpression<?,? extends T> right)
     /**
      * Get a <code>nullif(this, other)</code> expression
      *
-     * @param expr
      * @param other
      * @return
      */
@@ -296,7 +295,6 @@ public SimpleExpression<T> nullif(Expression<T> other) {
     /**
      * Get a <code>nullif(this, other)</code> expression
      *
-     * @param expr
      * @param other
      * @return
      */

File: querydsl-core/src/main/java/com/mysema/query/types/path/BeanPath.java
Patch:
@@ -78,7 +78,7 @@ public final <R,C> R accept(Visitor<R,C> v, C context) {
     /**
      * Cast the path to a subtype querytype
      *
-     * @param <T>
+     * @param <U>
      * @param clazz
      * @return
      */

File: querydsl-core/src/main/java/com/mysema/query/types/path/ComparablePath.java
Patch:
@@ -28,7 +28,7 @@
  * @author tiwe
  *
  * @param <T> expression type
- * @see java.util.ComparableType
+ * @see Comparable
  */
 @SuppressWarnings({"unchecked"})
 public class ComparablePath<T extends Comparable> extends ComparableExpression<T> implements Path<T> {

File: querydsl-sql-spring/src/main/java/com/mysema/query/sql/spring/SpringExceptionTranslator.java
Patch:
@@ -23,7 +23,7 @@
  * SpringExceptionTranslator is an SQLExceptionTranslator implementation which uses Spring's
  * exception translation functionality internally
  *
- * <p>>Usage example</p>
+ * <p>Usage example</p>
  * <pre>
  * {@code
  * Configuration configuration = new Configuration(templates);

File: querydsl-sql/src/main/java/com/mysema/query/sql/Configuration.java
Patch:
@@ -270,7 +270,6 @@ public String getColumnOverride(SchemaAndTable key, String column) {
      * @param path
      * @param i
      * @param value
-     * @return
      * @throws SQLException
      */
     @SuppressWarnings({ "unchecked", "rawtypes" })

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLCommonQueryFactory.java
Patch:
@@ -71,7 +71,8 @@ public interface SQLCommonQueryFactory<Q extends SQLCommonQuery<?>, // extends A
     /**
      * Create a new SELECT query
      *
-     * @param from
+     * @param subQuery
+     * @param alias
      * @return
      */
     Q from(SubQueryExpression<?> subQuery, Path<?> alias);

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContext.java
Patch:
@@ -14,7 +14,7 @@ public interface SQLListenerContext {
     /**
      * The context getData is a general purpose place that listeners can place objects.  It allows listeners to pass
      * context between themselves during callbacks.
-     * <p/>
+     * <p>
      *
      * @param dataKey the key to look up
      * @return the context object under that key
@@ -24,7 +24,7 @@ public interface SQLListenerContext {
     /**
      * The context setData is a general purpose place that listeners can place objects.  It allows listeners to pass
      * context between themselves during callbacks.
-     * <p/>
+     * <p>
      * A good time to place objects into the context is during {@link com.mysema.query.sql.SQLDetailedListener#start(SQLListenerContext)}
      * and then access if after that.
      *

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContextImpl.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * A mutable implementation of SQL listener context.
- * <p/>
+ * <p>
  * INTERNAL USE ONLY - {@link com.mysema.query.sql.SQLDetailedListener} implementations are not expected to use this
  * class directly
  */

File: querydsl-sql-spring/src/main/java/com/mysema/query/sql/spring/SpringExceptionTranslator.java
Patch:
@@ -23,7 +23,7 @@
  * SpringExceptionTranslator is an SQLExceptionTranslator implementation which uses Spring's
  * exception translation functionality internally
  *
- * <p>>Usage example</p>
+ * <p>Usage example</p>
  * <pre>
  * {@code
  * Configuration configuration = new Configuration(templates);

File: querydsl-sql/src/main/java/com/mysema/query/sql/Configuration.java
Patch:
@@ -270,7 +270,6 @@ public String getColumnOverride(SchemaAndTable key, String column) {
      * @param path
      * @param i
      * @param value
-     * @return
      * @throws SQLException
      */
     @SuppressWarnings({ "unchecked", "rawtypes" })

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLCommonQueryFactory.java
Patch:
@@ -71,7 +71,8 @@ public interface SQLCommonQueryFactory<Q extends SQLCommonQuery<?>, // extends A
     /**
      * Create a new SELECT query
      *
-     * @param from
+     * @param subQuery
+     * @param alias
      * @return
      */
     Q from(SubQueryExpression<?> subQuery, Path<?> alias);

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContext.java
Patch:
@@ -14,7 +14,7 @@ public interface SQLListenerContext {
     /**
      * The context getData is a general purpose place that listeners can place objects.  It allows listeners to pass
      * context between themselves during callbacks.
-     * <p/>
+     * <p>
      *
      * @param dataKey the key to look up
      * @return the context object under that key
@@ -24,7 +24,7 @@ public interface SQLListenerContext {
     /**
      * The context setData is a general purpose place that listeners can place objects.  It allows listeners to pass
      * context between themselves during callbacks.
-     * <p/>
+     * <p>
      * A good time to place objects into the context is during {@link com.mysema.query.sql.SQLDetailedListener#start(SQLListenerContext)}
      * and then access if after that.
      *

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContextImpl.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * A mutable implementation of SQL listener context.
- * <p/>
+ * <p>
  * INTERNAL USE ONLY - {@link com.mysema.query.sql.SQLDetailedListener} implementations are not expected to use this
  * class directly
  */

File: querydsl-collections/src/main/java/com/mysema/query/collections/CollQuery.java
Patch:
@@ -44,7 +44,7 @@ public CollQuery(CollQueryTemplates templates) {
     /**
      * Create a new CollQuery instance
      *
-     * @param evaluatorFactory
+     * @param queryEngine
      */
     public CollQuery(QueryEngine queryEngine) {
         super(new DefaultQueryMetadata(), queryEngine);
@@ -55,7 +55,6 @@ public CollQuery(QueryEngine queryEngine) {
      * Create a new CollQuery instance
      *
      * @param metadata
-     * @param evaluatorFactory
      */
     public CollQuery(QueryMetadata metadata) {
         super(metadata, DefaultQueryEngine.getDefault());
@@ -65,7 +64,7 @@ public CollQuery(QueryMetadata metadata) {
      * Create a new CollQuery instance
      *
      * @param metadata
-     * @param evaluatorFactory
+     * @param queryEngine
      */
     public CollQuery(QueryMetadata metadata, QueryEngine queryEngine) {
         super(metadata, queryEngine);

File: querydsl-core/src/main/java/com/mysema/query/BooleanBuilder.java
Patch:
@@ -84,7 +84,7 @@ public BooleanBuilder and(@Nullable Predicate right) {
 
     /**
      * Create the intersection of this and the union of the given args
-     * <p>(this && (arg1 || arg2 ... || argN))</p>
+     * {@code (this && (arg1 || arg2 ... || argN))}
      *
      * @param args
      * @return
@@ -168,7 +168,7 @@ public BooleanBuilder or(@Nullable Predicate right) {
 
     /**
      * Create the union of this and the intersection of the given args
-     * <p>(this || (arg1 && arg2 ... && argN))</p>
+     * {@code (this || (arg1 && arg2 ... && argN))}
      *
      * @param args
      * @return

File: querydsl-core/src/main/java/com/mysema/query/group/Group.java
Patch:
@@ -36,8 +36,8 @@ public interface Group {
     /**
      * Returns the value of the given group. 
      * 
-     * @param <T> Type of element in a single ResultSet row, i.e. type of Expression&lt;T>
-     * @param <R> Target type of this group, e.g. List&lt;T>
+     * @param <T> Type of element in a single ResultSet row, i.e. type of {@code Expression<T>}
+     * @param <R> Target type of this group, e.g. {@code List<T>}
      * @param coldef 
      * @throws NoSuchElementException if group is undefined.
      * @throws ClassCastException if group is of different type  

File: querydsl-core/src/main/java/com/mysema/query/support/QueryBase.java
Patch:
@@ -46,7 +46,7 @@ public Q distinct() {
     /**
      * Add a single grouping expression
      *
-     * @param o
+     * @param e
      * @return
      */
     public Q groupBy(Expression<?> e) {
@@ -66,7 +66,7 @@ public Q groupBy(Expression<?>... o) {
     /**
      * Add a single filter for aggregation
      *
-     * @param o
+     * @param e
      * @return
      */
     public Q having(Predicate e) {
@@ -160,7 +160,7 @@ public Q restrict(QueryModifiers modifiers) {
     /**
      * Set the given parameter to the given value
      *
-     * @param <T>
+     * @param <P>
      * @param param
      * @param value
      * @return

File: querydsl-core/src/main/java/com/mysema/query/types/CollectionExpression.java
Patch:
@@ -20,7 +20,7 @@
  *
  * @author tiwe
  *
- * @param <C> expression type
+ * @param <T> expression type
  * @param <E> element type
  * @see java.util.Collection
  */

File: querydsl-core/src/main/java/com/mysema/query/types/FactoryExpressionUtils.java
Patch:
@@ -78,7 +78,7 @@ public boolean equals(Object o) {
     }
 
     /**
-     * @param exprs
+     * @param projection
      * @return
      */
     public static FactoryExpression<?> wrap(List<? extends Expression<?>> projection) {

File: querydsl-core/src/main/java/com/mysema/query/types/expr/BooleanExpression.java
Patch:
@@ -87,7 +87,7 @@ public BooleanExpression as(String alias) {
      * Get an intersection of this and the given expression
      *
      * @param right right hand side of the union
-     * @return this && right
+     * @return {@code this && right}
      */
     public BooleanExpression and(@Nullable Predicate right) {
         right = (Predicate) ExpressionUtils.extract(right);

File: querydsl-core/src/main/java/com/mysema/query/types/expr/MathExpressions.java
Patch:
@@ -182,7 +182,7 @@ public static <A extends Number & Comparable<?>> NumberExpression<A> round(Expre
      * Round to s decimal places
      *
      * @param num
-     * @params s
+     * @param s
      * @return
      */
     public static <A extends Number & Comparable<?>> NumberExpression<A> round(Expression<A> num, int s) {

File: querydsl-core/src/main/java/com/mysema/query/types/expr/SimpleExpression.java
Patch:
@@ -284,7 +284,6 @@ public final BooleanExpression notIn(CollectionExpression<?,? extends T> right)
     /**
      * Get a <code>nullif(this, other)</code> expression
      *
-     * @param expr
      * @param other
      * @return
      */
@@ -296,7 +295,6 @@ public SimpleExpression<T> nullif(Expression<T> other) {
     /**
      * Get a <code>nullif(this, other)</code> expression
      *
-     * @param expr
      * @param other
      * @return
      */

File: querydsl-core/src/main/java/com/mysema/query/types/path/BeanPath.java
Patch:
@@ -78,7 +78,7 @@ public final <R,C> R accept(Visitor<R,C> v, C context) {
     /**
      * Cast the path to a subtype querytype
      *
-     * @param <T>
+     * @param <U>
      * @param clazz
      * @return
      */

File: querydsl-core/src/main/java/com/mysema/query/types/path/ComparablePath.java
Patch:
@@ -28,7 +28,7 @@
  * @author tiwe
  *
  * @param <T> expression type
- * @see java.util.ComparableType
+ * @see Comparable
  */
 @SuppressWarnings({"unchecked"})
 public class ComparablePath<T extends Comparable> extends ComparableExpression<T> implements Path<T> {

File: querydsl-core/src/main/java/com/mysema/util/Annotations.java
Patch:
@@ -21,7 +21,7 @@
 import javax.annotation.Nullable;
 
 /**
- * Annotations is a merging apapter for the {@link AnnotatedElement} interface
+ * Annotations is a merging adapter for the {@link AnnotatedElement} interface
  * 
  * @author tiwe
  *

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLMergeClause.java
Patch:
@@ -104,7 +104,7 @@ private List<? extends Path<?>> getKeys() {
         } else if (entity.getPrimaryKey() != null) {
             return entity.getPrimaryKey().getLocalColumns();
         } else {
-            throw new IllegalStateException("No keys where defined, invoke keys(..) to add keys");
+            throw new IllegalStateException("No keys were defined, invoke keys(..) to add keys");
         }
     }
 

File: querydsl-core/src/main/java/com/mysema/util/Annotations.java
Patch:
@@ -21,7 +21,7 @@
 import javax.annotation.Nullable;
 
 /**
- * Annotations is a merging apapter for the {@link AnnotatedElement} interface
+ * Annotations is a merging adapter for the {@link AnnotatedElement} interface
  * 
  * @author tiwe
  *

File: querydsl-sql/src/test/java/com/mysema/query/sql/spatial/AbstractConverterTest.java
Patch:
@@ -45,7 +45,7 @@ protected List<Geometry> getGeometries() {
         // linestring
         data.add(LineString.createEmpty());
         for (int i = 0; i < 6; i++) {
-            data.add(new LineString(createSequence(crs, (Point)data.get(i))));
+            data.add(new LineString(createSequence(crs, (Point)data.get(i), (Point)data.get(i))));
         }
 
         // polgyon

File: querydsl-sql-codegen/src/main/java/com/mysema/query/sql/codegen/SpatialSupport.java
Patch:
@@ -13,7 +13,6 @@
  */
 package com.mysema.query.sql.codegen;
 
-import java.awt.Polygon;
 import java.util.Map;
 import java.util.Set;
 
@@ -25,6 +24,7 @@
 import org.geolatte.geom.MultiPoint;
 import org.geolatte.geom.MultiPolygon;
 import org.geolatte.geom.Point;
+import org.geolatte.geom.Polygon;
 import org.geolatte.geom.PolyHedralSurface;
 
 import com.google.common.collect.ImmutableSet;

File: querydsl-sql-codegen/src/main/java/com/mysema/query/sql/codegen/SpatialSupport.java
Patch:
@@ -13,7 +13,6 @@
  */
 package com.mysema.query.sql.codegen;
 
-import java.awt.Polygon;
 import java.util.Map;
 import java.util.Set;
 
@@ -25,6 +24,7 @@
 import org.geolatte.geom.MultiPoint;
 import org.geolatte.geom.MultiPolygon;
 import org.geolatte.geom.Point;
+import org.geolatte.geom.Polygon;
 import org.geolatte.geom.PolyHedralSurface;
 
 import com.google.common.collect.ImmutableSet;

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/impl/JPAUtil.java
Patch:
@@ -44,7 +44,7 @@ public static void setConstants(Query query, Map<Object,String> constants, Map<P
                 }
             }
             if (hasParameters) {
-                Parameter parameter = query.getParameter(Integer.valueOf(key));
+                Parameter parameter = query.getParameter(Integer.parseInt(key));
                 Class parameterType = parameter != null ? parameter.getParameterType() : null;
                 if (parameterType != null && !parameterType.isInstance(val)) {
                     if (val instanceof Number && Number.class.isAssignableFrom(parameterType)) {

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/impl/JPAUtil.java
Patch:
@@ -44,7 +44,7 @@ public static void setConstants(Query query, Map<Object,String> constants, Map<P
                 }
             }
             if (hasParameters) {
-                Parameter parameter = query.getParameter(Integer.valueOf(key));
+                Parameter parameter = query.getParameter(Integer.parseInt(key));
                 Class parameterType = parameter != null ? parameter.getParameterType() : null;
                 if (parameterType != null && !parameterType.isInstance(val)) {
                     if (val instanceof Number && Number.class.isAssignableFrom(parameterType)) {

File: querydsl-sql-codegen/src/main/java/com/mysema/query/sql/codegen/SQLCodegenModule.java
Patch:
@@ -20,6 +20,7 @@
 import com.mysema.query.codegen.Serializer;
 import com.mysema.query.sql.Configuration;
 import com.mysema.query.sql.RelationalPathBase;
+import com.mysema.query.sql.SQLTemplates;
 
 /**
  * SQLCodegenModule is a dependency injection module with codegen configuration
@@ -51,7 +52,7 @@ public class SQLCodegenModule extends CodegenModule{
     protected void configure() {
         super.configure();
         bind(NamingStrategy.class, DefaultNamingStrategy.class);
-        bind(Configuration.class, Configuration.DEFAULT);
+        bind(Configuration.class, new Configuration(SQLTemplates.DEFAULT));
         bind(Serializer.class, MetaDataSerializer.class);
         bind(QueryTypeFactory.class, SQLQueryTypeFactory.class);
         bind(BEAN_SERIALIZER, (Class<?>)null);

File: querydsl-sql/src/main/java/com/mysema/query/sql/FirebirdTemplates.java
Patch:
@@ -86,6 +86,7 @@ public FirebirdTemplates(char escape, boolean quote) {
         add(Ops.DateTimeOps.DIFF_MINUTES, "datediff(minute,{0},{1})");
         add(Ops.DateTimeOps.DIFF_SECONDS, "datediff(second,{0},{1})");
 
+        addTypeNameToCode("smallint", Types.BOOLEAN, true);
         addTypeNameToCode("smallint", Types.BIT, true);
         addTypeNameToCode("smallint", Types.TINYINT, true);
         addTypeNameToCode("decimal", Types.DOUBLE, true);

File: querydsl-sql/src/main/java/com/mysema/query/sql/JavaTypeMapping.java
Patch:
@@ -56,7 +56,7 @@ public class JavaTypeMapping {
         registerDefault(new TimeType());
         registerDefault(new URLType());
         registerDefault(new UtilDateType());
-        registerDefault(new UtilUUIDType(true));
+        registerDefault(new UtilUUIDType(false));
 
         // initialize joda time converters only if joda time is available
         try {

File: querydsl-apt/src/test/java/com/mysema/query/apt/GenericExporterTest.java
Patch:
@@ -44,6 +44,7 @@ public void Execute() throws IOException {
 
         expected.add("QQueryProjectionTest_DTOWithProjection.java");
         expected.add("QQueryProjectionTest_EntityWithProjection.java");
+        expected.add("QEmbeddable3Test_EmbeddableClass.java");
 
         // FIXME
         expected.add("QExternalEntityTest_MyEntity.java");
@@ -82,6 +83,7 @@ public void Execute2() throws IOException {
         expected.add("QTemporal2Test_Cheque.java");
         expected.add("QQueryProjectionTest_DTOWithProjection.java");
         expected.add("QQueryProjectionTest_EntityWithProjection.java");
+        expected.add("QEmbeddable3Test_EmbeddableClass.java");
 
         // FIXME
         expected.add("QGeneric4Test_HidaBez.java");

File: querydsl-apt/src/test/java/com/mysema/query/apt/GenericExporterTest.java
Patch:
@@ -44,6 +44,7 @@ public void Execute() throws IOException {
 
         expected.add("QQueryProjectionTest_DTOWithProjection.java");
         expected.add("QQueryProjectionTest_EntityWithProjection.java");
+        expected.add("QEmbeddable3Test_EmbeddableClass.java");
 
         // FIXME
         expected.add("QExternalEntityTest_MyEntity.java");
@@ -82,6 +83,7 @@ public void Execute2() throws IOException {
         expected.add("QTemporal2Test_Cheque.java");
         expected.add("QQueryProjectionTest_DTOWithProjection.java");
         expected.add("QQueryProjectionTest_EntityWithProjection.java");
+        expected.add("QEmbeddable3Test_EmbeddableClass.java");
 
         // FIXME
         expected.add("QGeneric4Test_HidaBez.java");

File: querydsl-sql/src/main/java/com/mysema/query/sql/FirebirdTemplates.java
Patch:
@@ -86,6 +86,8 @@ public FirebirdTemplates(char escape, boolean quote) {
         add(Ops.DateTimeOps.DIFF_MINUTES, "datediff(minute,{0},{1})");
         add(Ops.DateTimeOps.DIFF_SECONDS, "datediff(second,{0},{1})");
 
+        addTypeNameToCode("smallint", Types.TINYINT, true);
+        addTypeNameToCode("decimal", Types.DOUBLE, true);
         addTypeNameToCode("blob sub_type 0", Types.LONGVARBINARY);
         addTypeNameToCode("blob sub_type 1", Types.LONGVARCHAR);
         addTypeNameToCode("double precision", Types.DOUBLE);

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLSerializer.java
Patch:
@@ -753,7 +753,7 @@ public void visitConstant(Object constant) {
             if (stage == Stage.SELECT
                 && !Null.class.isInstance(constant)
                 && configuration.getTemplates().isWrapSelectParameters()) {
-                String typeName = templates.getTypeForCast(constant.getClass());
+                String typeName = configuration.getTypeNameForCast(constant.getClass());
                 Expression type = Expressions.constant(typeName);
                 super.visitOperation(constant.getClass(), SQLOps.CAST, ImmutableList.<Expression<?>>of(Q, type));
             } else {

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLSerializer.java
Patch:
@@ -853,13 +853,13 @@ protected void visitOperation(Class<?> type, Operator<?> operator, List<? extend
                     ImmutableList.of(args.get(0), ConstantImpl.create(escaped)));
 
         } else if (operator == Ops.STRING_CAST) {
-            final String typeName = templates.getTypeForCast(String.class);
+            final String typeName = configuration.getTypeNameForCast(String.class);
             super.visitOperation(String.class, SQLOps.CAST,
                     ImmutableList.of(args.get(0), ConstantImpl.create(typeName)));
 
         } else if (operator == Ops.NUMCAST) {
             final Class<?> targetType = (Class<?>) ((Constant<?>) args.get(1)).getConstant();
-            final String typeName = templates.getTypeForCast(targetType);
+            final String typeName = configuration.getTypeNameForCast(targetType);
             super.visitOperation(targetType, SQLOps.CAST,
                     ImmutableList.of(args.get(0), ConstantImpl.create(typeName)));
 

File: querydsl-sql/src/test/java/com/mysema/query/Connections.java
Patch:
@@ -157,11 +157,11 @@ private static Connection getTeradata() throws SQLException, ClassNotFoundExcept
     }
 
     private static CreateTableClause createTable(SQLTemplates templates, String table) {
-        return new CreateTableClause(connHolder.get(), templates, table);
+        return new CreateTableClause(connHolder.get(), new Configuration(templates), table);
     }
 
     public static void dropTable(SQLTemplates templates, String table) throws SQLException{
-        new DropTableClause(connHolder.get(), templates, table).execute();
+        new DropTableClause(connHolder.get(), new Configuration(templates), table).execute();
     }
 
     public static void dropType(Statement stmt, String type) throws SQLException {

File: querydsl-sql/src/test/java/com/mysema/query/ddl/DropTableClause.java
Patch:
@@ -10,7 +10,7 @@
 import java.sql.Statement;
 
 import com.mysema.query.QueryException;
-import com.mysema.query.sql.SQLTemplates;
+import com.mysema.query.sql.Configuration;
 
 /**
  * DropTableClause defines a DROP TABLE clause
@@ -24,9 +24,9 @@ public class DropTableClause {
     
     private final String table;
     
-    public DropTableClause(Connection conn, SQLTemplates templates, String table) {
+    public DropTableClause(Connection conn, Configuration c, String table) {
         this.connection = conn;
-        this.table = templates.quoteIdentifier(table);
+        this.table = c.getTemplates().quoteIdentifier(table);
     }
     
     @SuppressWarnings("SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE")

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLDetailedListener.java
Patch:
@@ -3,8 +3,7 @@
 /**
  * An extended listener interface that details much more about the preparation and execution of queries
  */
-public interface SQLDetailedListener extends SQLListener
-{
+public interface SQLDetailedListener extends SQLListener {
     /**
      * Called at the start of a query.  Most context parameters are empty at this stage
      *

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLListenerContext.java
Patch:
@@ -10,8 +10,7 @@
  * A context object that is progressively filled out during query execution and is passed to each {@link
  * SQLDetailedListener} callback method
  */
-public interface SQLListenerContext
-{
+public interface SQLListenerContext {
     /**
      * The context getData is a general purpose place that listeners can place objects.  It allows listeners to pass
      * context between themselves during callbacks.
@@ -30,7 +29,7 @@ public interface SQLListenerContext
      * and then access if after that.
      *
      * @param dataKey the key to use
-     * @param value the value to place under that key
+     * @param value   the value to place under that key
      */
     void setData(String dataKey, Object value);
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/teradata/SetQueryBandClause.java
Patch:
@@ -38,7 +38,7 @@ public class SetQueryBandClause extends AbstractSQLClause<SetQueryBandClause> {
 
     private boolean forSession = true;
 
-    private final Map<String, String> values = Maps.newHashMap();
+    private final Map<String, String> values = Maps.newLinkedHashMap();
 
     private transient String queryString;
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/SQLTypeMappingTest.java
Patch:
@@ -13,11 +13,10 @@
  */
 package com.mysema.query.sql;
 
-import static org.junit.Assert.fail;
-
 import java.lang.reflect.Field;
 
 import org.junit.Test;
+import static org.junit.Assert.fail;
 
 public class SQLTypeMappingTest {
 
@@ -28,7 +27,7 @@ public void Get() throws IllegalArgumentException, IllegalAccessException {
             if (field.getType().equals(int.class)) {
                 int val = field.getInt(null);
                 if (mapping.get(val,0,0) == null) {
-                    fail("Got no value for " + field.getName());
+                    fail("Got no value for " + field.getName() + " (" + val + ")");
                 }
             }
         }

File: querydsl-apt/src/test/java/com/mysema/query/apt/GenericExporterTest.java
Patch:
@@ -90,7 +90,7 @@ public void Execute2() throws IOException {
         expected.add("QGeneric12Test_ChannelRole.java");
         expected.add("QManyToManyTest_Person.java");
         expected.add("QOneToOneTest_Person.java");
-        //expected.add("QGeneric16Test_HidaBez.java");
+        expected.add("QGeneric16Test_HidaBez.java");
         expected.add("QGeneric16Test_HidaBezGruppe.java");
 
         execute(expected, "GenericExporterTest2", "HibernateAnnotationProcessor");

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -128,7 +128,7 @@ private void set(PreparedStatement stmt, Path<?> path, int i, Object value) thro
      * @param exprs the expression arguments to retrieve
      * @return
      */
-    public ResultSet getResultsgetResults(Expression<?>... exprs) {
+    public ResultSet getResults(Expression<?>... exprs) {
         queryMixin.addProjection(exprs);
         SQLSerializer serializer = serialize(false);
         String queryString = serializer.toString();

File: querydsl-sql/src/main/java/com/mysema/query/sql/ProjectableSQLQuery.java
Patch:
@@ -511,8 +511,9 @@ private Collection<Expression<?>> expandProjection(Collection<Expression<?>> exp
     protected SQLSerializer serialize(boolean forCountRow) {
         SQLSerializer serializer = createSerializer();
         if (union != null) {
-            if (expandProjection(queryMixin.getMetadata().getProjection()).equals(
-                    expandProjection(firstUnionSubQuery.getMetadata().getProjection()))) {
+            if (queryMixin.getMetadata().getProjection().isEmpty() ||
+                expandProjection(queryMixin.getMetadata().getProjection()).equals(
+                expandProjection(firstUnionSubQuery.getMetadata().getProjection()))) {
                 serializer.serializeUnion(union, queryMixin.getMetadata(), unionAll);
             } else {
                 QueryMixin mixin2 = new QueryMixin(queryMixin.getMetadata().clone());

File: querydsl-sql/src/test/java/com/mysema/query/UnionBase.java
Patch:
@@ -65,6 +65,7 @@ public void Union_Multiple_Columns() throws SQLException {
 
     @SuppressWarnings("unchecked")
     @Test
+    @ExcludeIn(DERBY)
     public void Union_Multiple_Columns2() throws SQLException {
         SubQueryExpression<Tuple> sq1 = sq().from(employee).unique(employee.firstname, employee.lastname);
         SubQueryExpression<Tuple> sq2 = sq().from(employee).unique(employee.firstname, employee.lastname);
@@ -79,6 +80,7 @@ public void Union_Multiple_Columns2() throws SQLException {
 
     @SuppressWarnings("unchecked")
     @Test
+    @ExcludeIn(DERBY)
     public void Union_Multiple_Columns3() throws SQLException {
         SubQueryExpression<Tuple> sq1 = sq().from(employee).unique(employee.firstname, employee.lastname);
         SubQueryExpression<Tuple> sq2 = sq().from(employee).unique(employee.firstname, employee.lastname);

File: querydsl-apt/src/test/java/com/mysema/query/domain/Generic15Test.java
Patch:
@@ -4,6 +4,7 @@
 import javax.persistence.MappedSuperclass;
 
 import org.junit.Test;
+import static org.junit.Assert.assertEquals;
 
 public class Generic15Test {
 
@@ -30,6 +31,6 @@ public static class MyContainable extends Containable<MyCompound> {
     @Test
     public void test() {
         // QMyContainable
-        QGeneric15Test_MyContainable.myContainable.compound
+        assertEquals(MyCompound.class, QGeneric15Test_MyContainable.myContainable.compound.getType());
     }
 }

File: querydsl-sql/src/test/java/com/mysema/query/InsertBase.java
Patch:
@@ -163,7 +163,7 @@ public void Insert_Null_Without_Columns() {
     }
 
     @Test
-    @ExcludeIn({HSQLDB, DERBY})
+    @ExcludeIn({HSQLDB, DERBY, ORACLE})
     public void Insert_Without_Values() {
         assertEquals(1, insert(survey).execute());
     }

File: querydsl-sql-codegen/src/main/java/com/mysema/query/sql/codegen/MetaDataExporter.java
Patch:
@@ -269,7 +269,7 @@ private void handleColumn(EntityType classModel, String tableName, ResultSet col
                 columnDigits != null ? columnDigits.intValue() : 0,
                 tableName, columnName);
         if (clazz == null) {
-            throw new IllegalStateException("Found no mapping for " + columnType + " (" + tableName + "." + columnName + ")");
+            throw new IllegalStateException("Found no mapping for " + columnType + " (" + tableName + "." + columnName + " " + typeName + ")");
         }
         TypeCategory fieldType = TypeCategory.get(clazz.getName());
         if (Number.class.isAssignableFrom(clazz)) {

File: querydsl-sql/src/main/java/com/mysema/query/sql/JDBCTypeMapping.java
Patch:
@@ -38,6 +38,7 @@ public final class JDBCTypeMapping {
 
     static{
         registerDefault(-101, Object.class);
+        registerDefault(-102, java.sql.Timestamp.class); // Oracle: TIMESTAMP(6) WITH LOCAL TIME ZONE
 
         // BOOLEAN
         registerDefault(Types.BIT, Boolean.class);
@@ -88,7 +89,6 @@ public final class JDBCTypeMapping {
         registerDefault(Types.REF, Object.class);
         registerDefault(Types.ROWID, Object.class);
         registerDefault(Types.STRUCT, Object.class);
-
     }
 
     private static void registerDefault(int sqlType, Class<?> javaType) {

File: querydsl-sql-codegen/src/main/java/com/mysema/query/sql/codegen/MetaDataExporter.java
Patch:
@@ -269,7 +269,7 @@ private void handleColumn(EntityType classModel, String tableName, ResultSet col
                 columnDigits != null ? columnDigits.intValue() : 0,
                 tableName, columnName);
         if (clazz == null) {
-            throw new IllegalStateException("Found no mapping for " + columnType + " (" + tableName + "." + columnName + ")");
+            throw new IllegalStateException("Found no mapping for " + columnType + " (" + tableName + "." + columnName + " " + typeName + ")");
         }
         TypeCategory fieldType = TypeCategory.get(clazz.getName());
         if (Number.class.isAssignableFrom(clazz)) {

File: querydsl-sql/src/main/java/com/mysema/query/sql/JDBCTypeMapping.java
Patch:
@@ -38,6 +38,7 @@ public final class JDBCTypeMapping {
 
     static{
         registerDefault(-101, Object.class);
+        registerDefault(-102, java.sql.Timestamp.class); // Oracle: TIMESTAMP(6) WITH LOCAL TIME ZONE
 
         // BOOLEAN
         registerDefault(Types.BIT, Boolean.class);
@@ -88,7 +89,6 @@ public final class JDBCTypeMapping {
         registerDefault(Types.REF, Object.class);
         registerDefault(Types.ROWID, Object.class);
         registerDefault(Types.STRUCT, Object.class);
-
     }
 
     private static void registerDefault(int sqlType, Class<?> javaType) {

File: querydsl-sql/src/test/java/com/mysema/query/InsertBase.java
Patch:
@@ -163,7 +163,7 @@ public void Insert_Null_Without_Columns() {
     }
 
     @Test
-    @ExcludeIn({HSQLDB, DERBY})
+    @ExcludeIn({HSQLDB, DERBY, ORACLE})
     public void Insert_Without_Values() {
         assertEquals(1, insert(survey).execute());
     }

File: querydsl-core/src/main/java/com/mysema/query/types/Converters.java
Patch:
@@ -23,6 +23,7 @@
  * @author tiwe
  *
  */
+@Deprecated
 public final class Converters {
 
     private static final Constant<String> PERCENT = ConstantImpl.create("%");

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLSerializer.java
Patch:
@@ -847,7 +847,6 @@ public void setUseLiterals(boolean useLiterals) {
         this.useLiterals = useLiterals;
     }
 
-
     protected void setSkipParent(boolean b) {
         skipParent = b;
     }

File: querydsl-jpa/src/test/java/com/mysema/query/AbstractJPATest.java
Patch:
@@ -1248,16 +1248,19 @@ public void Sum_5() {
     }
 
     @Test
+    @NoBatooJPA @NoEclipseLink
     public void Sum_of_Integer_in_where() {
         query().from(cat).where(cat.mate.breed.sum().gt(1)).count();
     }
 
     @Test
+    @NoBatooJPA @NoEclipseLink
     public void Sum_of_Float_in_where() {
         query().from(cat).where(cat.mate.floatProperty.sum().gt(0.0f)).count();
     }
 
     @Test
+    @NoBatooJPA @NoEclipseLink
     public void Sum_of_Double_in_where() {
         query().from(cat).where(cat.mate.bodyWeight.sum().gt(0.0)).count();
     }

File: querydsl-sql-codegen/src/test/java/com/mysema/query/sql/ant/AntMetaDataExporterTest.java
Patch:
@@ -13,8 +13,6 @@
  */
 package com.mysema.query.sql.ant;
 
-import static org.junit.Assert.assertTrue;
-
 import java.io.File;
 import java.sql.Connection;
 import java.sql.DriverManager;
@@ -23,11 +21,12 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import static org.junit.Assert.assertTrue;
 
 public class AntMetaDataExporterTest {
 
 //    private final String url = "jdbc:h2:mem:testdb" + System.currentTimeMillis();
-    private final String url = "jdbc:h2:target/h2" + System.currentTimeMillis();
+    private final String url = "jdbc:h2:~/dbs/h2" + System.currentTimeMillis();
 
     @Before
     public void setUp() throws SQLException {

File: querydsl-core/src/main/java/com/mysema/query/util/ConstructorUtils.java
Patch:
@@ -266,7 +266,7 @@ private static class PrimitiveAwareVarArgsTransformer extends VarArgsTransformer
 
         public PrimitiveAwareVarArgsTransformer(Constructor<?> constructor) {
             super(constructor);
-            defaultInstance = defaultPrimitives.getInstance(componentType);
+            defaultInstance = (componentType != null) ? defaultPrimitives.getInstance(componentType) : null;
         }
 
         @Override

File: querydsl-sql/src/test/java/com/mysema/query/QGeneratedKeysEntity.java
Patch:
@@ -29,7 +29,7 @@ public class QGeneratedKeysEntity extends RelationalPathBase<QGeneratedKeysEntit
     public final StringPath name = createString("name");
 
     public QGeneratedKeysEntity(String name) {
-        super(QGeneratedKeysEntity.class, PathMetadataFactory.forVariable(name), null, "GENERATED_KEYS");
+        super(QGeneratedKeysEntity.class, PathMetadataFactory.forVariable(name), "", "GENERATED_KEYS");
     }
 
     protected void addMetadata() {

File: querydsl-sql/src/test/java/com/mysema/query/sql/KeyAccessorsTest.java
Patch:
@@ -56,7 +56,7 @@ public class ForeignKeys implements Serializable {
         public final ForeignKeys fk = new ForeignKeys();
 
         public QEmployee(String variable) {
-            super(QEmployee.class, forVariable(variable), null, "EMPLOYEE");
+            super(QEmployee.class, forVariable(variable), "", "EMPLOYEE");
             addMetadata();
         }
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/KeyTest.java
Patch:
@@ -37,7 +37,7 @@ public static class QUser extends RelationalPathBase<QUser>{
         public final ForeignKey<QUser> superiorIdKey = createForeignKey(superiorId, "ID");
 
         public QUser(String path) {
-            super(QUser.class, PathMetadataFactory.forVariable(path), null, "USER");
+            super(QUser.class, PathMetadataFactory.forVariable(path), "", "USER");
             addMetadata();
         }
 
@@ -61,7 +61,7 @@ public static class QDepartment extends RelationalPathBase<QDepartment> {
         public final ForeignKey<QCompany> companyKey = createForeignKey(company, "ID");
 
         public QDepartment(String path) {
-            super(QDepartment.class, PathMetadataFactory.forVariable(path), null, "DEPARTMENT");
+            super(QDepartment.class, PathMetadataFactory.forVariable(path), "", "DEPARTMENT");
             addMetadata();
         }
 
@@ -80,7 +80,7 @@ public static class QCompany extends RelationalPathBase<QCompany> {
         public final PrimaryKey<QCompany> idKey = createPrimaryKey(id);
 
         public QCompany(String path) {
-            super(QCompany.class, PathMetadataFactory.forVariable(path), null, "COMPANY");
+            super(QCompany.class, PathMetadataFactory.forVariable(path), "", "COMPANY");
             addMetadata();
         }
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/QPerson.java
Patch:
@@ -43,12 +43,12 @@ public QPerson(String variable) {
     }
 
     public QPerson(BeanPath<? extends QPerson> entity) {
-        super(entity.getType(), entity.getMetadata(), null, "PERSON");
+        super(entity.getType(), entity.getMetadata(), "", "PERSON");
         addMetadata();
     }
 
     public QPerson(PathMetadata<?> metadata) {
-        super(QPerson.class, metadata, null, "PERSON");
+        super(QPerson.class, metadata, "", "PERSON");
         addMetadata();
     }
 

File: querydsl-core/src/test/java/com/mysema/testutil/Runner.java
Patch:
@@ -30,7 +30,7 @@ public static void run(String label, Benchmark benchmark) throws Exception {
         System.err.print("- ");
 
         // perform timing
-        Stopwatch stopwatch = new Stopwatch().start();
+        Stopwatch stopwatch = Stopwatch.createStarted();
         benchmark.run(BENCHMARK);
         System.err.println(label + " " + stopwatch.stop().toString());
     }

File: querydsl-sql/src/main/java/com/mysema/query/sql/Configuration.java
Patch:
@@ -268,7 +268,8 @@ public String registerTableOverride(String oldTable, String newTable) {
      * @return
      */
     public String registerTableOverride(String schema, String oldTable, String newTable) {
-        return registerTableOverride(schema, oldTable, schema, newTable).getTable();
+        SchemaAndTable st = registerTableOverride(schema, oldTable, schema, newTable);
+        return st != null ? st.getTable() : null;
     }
 
     /**

File: querydsl-core/src/test/java/com/mysema/query/support/NormalizationTest.java
Patch:
@@ -42,7 +42,7 @@ public void Normalize_Multiplication() {
         assertEquals("where 10 = 10", Normalization.normalize("where 5*2 = 10"));
         assertEquals("where 11 = 11", Normalization.normalize("where 5.5*2 = 11"));
         assertEquals("where 10.8 = 10.8", Normalization.normalize("where 5.4 * 2 = 10.8"));
-        assertEquals("where 9 = 0 and 13 = 13", Normalization.normalize("where 2 * 3 + 3 = 9 and 5 + 4 * 2 = 13"));
+        assertEquals("where 9 = 9 and 13 = 13", Normalization.normalize("where 2 * 3 + 3 = 9 and 5 + 4 * 2 = 13"));
     }
 
     @Test

File: querydsl-apt/src/test/java/com/mysema/query/apt/AbstractProcessorTest.java
Patch:
@@ -71,7 +71,7 @@ protected void compile(Class<? extends AbstractProcessor> processorClass, List<S
 //        Processor.elementCache.clear();
         if (compilationResult != 0) {
             System.err.println(compiler.getClass().getName());
-            Assert.fail("Compilation Failed");
+            Assert.fail("Compilation Failed:\n " + new String(err.toByteArray(), "UTF-8"));
         }
     }
     

File: querydsl-sql/src/test/java/com/mysema/query/SelectBase.java
Patch:
@@ -320,7 +320,7 @@ public void Custom_Projection() {
     }
 
     @Test
-    @IncludeIn({H2, SQLSERVER, MYSQL, ORACLE, SQLITE, TERADATA}) // TODO fix postgres
+    @IncludeIn({H2, SQLSERVER, MYSQL, ORACLE, TERADATA}) // TODO fix postgres
     public void Dates() {
         long ts = ((long)Math.floor(System.currentTimeMillis() / 1000)) * 1000;
         long tsDate = new org.joda.time.LocalDate(ts).toDateMidnight().getMillis();

File: querydsl-sql/src/test/java/com/mysema/query/SelectBase.java
Patch:
@@ -320,7 +320,7 @@ public void Custom_Projection() {
     }
 
     @Test
-    @IncludeIn({H2, SQLSERVER, MYSQL, ORACLE, SQLITE, TERADATA}) // TODO fix postgres
+    @IncludeIn({H2, SQLSERVER, MYSQL, ORACLE, TERADATA}) // TODO fix postgres
     public void Dates() {
         long ts = ((long)Math.floor(System.currentTimeMillis() / 1000)) * 1000;
         long tsDate = new org.joda.time.LocalDate(ts).toDateMidnight().getMillis();

File: querydsl-apt/src/test/java/com/mysema/query/domain/Examples.java
Patch:
@@ -50,11 +50,9 @@ public static class ComplexCollections {
         
         @QueryEmbedded
         Map<?, Complex<String>> map3;
-                
-                
+
     }
     
-    
     public static class Complex<T extends Comparable<T>> implements Comparable<Complex<T>> {
 
         T a;

File: querydsl-apt/src/test/java/com/mysema/query/domain/Generic11Test.java
Patch:
@@ -26,8 +26,7 @@ public static class A2<T extends WhatEver2> { }
 
     @Entity
     public static class B2 extends A2 { } // note the missing type parameter
-    
-    
+
     @Test
     public void test() {
         

File: querydsl-apt/src/test/java/com/mysema/query/domain/Hierarchy2Test.java
Patch:
@@ -33,7 +33,7 @@ public static abstract class SomeMappedSuperClassHavingMyEmbeddable {
     }
 
     @Entity
-    static class A {
+    public static class A {
 
         @OneToOne
         SomeEntity entry;
@@ -43,7 +43,7 @@ static class A {
     }
 
     @Entity
-    static class SomeEntity extends SomeMappedSuperClassHavingMyEmbeddable {
+    public static class SomeEntity extends SomeMappedSuperClassHavingMyEmbeddable {
     }
 
     @Embeddable

File: querydsl-apt/src/test/java/com/mysema/query/domain/SignatureTest.java
Patch:
@@ -28,8 +28,7 @@ public class SignatureTest {
     public static abstract class APropertyChangeSupported implements Comparable<Object>, Cloneable, Serializable {
         
     }
-   
-   
+
     @QuerySupertype
     public static abstract class AValueObject extends APropertyChangeSupported implements Comparable<Object>, Cloneable, Serializable {
         

File: querydsl-codegen/src/test/java/com/mysema/query/codegen/GenericTest.java
Patch:
@@ -24,13 +24,13 @@ public static abstract class HidaBezGruppe<G extends HidaBezGruppe<G, B>, B exte
     @Test
     public void HidaBez() {
         Type type = typeFactory.getEntityType(HidaBez.class);
-        System.out.println(type.getGenericName(true));
+        //System.out.println(type.getGenericName(true));
     }
     
     @Test
     public void HidaBezGruppe() {
         Type type = typeFactory.getEntityType(HidaBezGruppe.class);
-        System.out.println(type.getGenericName(true));
+        //System.out.println(type.getGenericName(true));
     }
 
 }

File: querydsl-collections/src/test/java/com/mysema/query/collections/AbstractQueryTest.java
Patch:
@@ -91,10 +91,10 @@ public <RT> List<RT> list(Expression<RT> projection) {
             boolean array = projection.getType().isArray();
             List<RT> rv = super.list(projection);
             for (Object o : rv) {
-                System.out.println(array ? Arrays.toString((Object[])o) : o);
+                //System.out.println(array ? Arrays.toString((Object[])o) : o);
                 res.add(o);
             }
-            System.out.println();
+            //System.out.println();
             return rv;
         }
 

File: querydsl-core/src/test/java/com/mysema/query/QueryMutability.java
Patch:
@@ -13,14 +13,13 @@
  */
 package com.mysema.query;
 
-import static org.junit.Assert.assertTrue;
-
 import java.io.Closeable;
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 
 import com.mysema.query.support.QueryBase;
 import com.mysema.query.types.Expression;
+import static org.junit.Assert.assertTrue;
 
 public final class QueryMutability<T extends QueryBase<T> & Projectable> {
 
@@ -97,7 +96,6 @@ private void assertProjectionEmpty() throws IOException{
         if (query instanceof Closeable) {
             ((Closeable)query).close();
         }
-        System.err.println();
     }
 
 }

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/OpenJPATemplates.java
Patch:
@@ -14,6 +14,7 @@
 package com.mysema.query.jpa;
 
 import com.mysema.query.types.Ops;
+import com.mysema.query.types.PathType;
 
 /**
  * OpenJPATemplates extends JPQLTemplates with OpenJPA specific extensions
@@ -27,6 +28,7 @@ public class OpenJPATemplates extends JPQLTemplates{
 
     public OpenJPATemplates() {
         this(DEFAULT_ESCAPE);
+        add(PathType.VARIABLE, "{0s}_");
         add(Ops.ALIAS, "{0} {1}");
         add(Ops.NEGATE, "-1 * {0}", 7);
     }

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/TupleTest.java
Patch:
@@ -13,16 +13,17 @@
  */
 package com.mysema.query.jpa;
 
-import org.junit.Test;
-
 import com.mysema.query.jpa.domain.QCat;
 import com.mysema.query.jpa.hibernate.HibernateSubQuery;
 import com.mysema.query.types.QTuple;
 import com.mysema.query.types.SubQueryExpression;
+import org.junit.Ignore;
+import org.junit.Test;
 
 public class TupleTest extends AbstractQueryTest {
         
     @Test
+    @Ignore // FIXME
     public void test() {
         QCat cat = QCat.cat;
         

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLQueryFactory.java
Patch:
@@ -25,7 +25,7 @@
  * @author tiwe
  *
  */
-public class SQLQueryFactory extends AbstractSQLQueryFactory<SQLQuery> {
+public class SQLQueryFactory extends AbstractSQLQueryFactory<SQLQuery, SQLSubQuery> {
 
     static class DataSourceProvider implements Provider<Connection> {
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLQueryFactoryImpl.java
Patch:
@@ -26,7 +26,7 @@
  *
  */
 @Deprecated
-public class SQLQueryFactoryImpl extends AbstractSQLQueryFactory<SQLQuery> {
+public class SQLQueryFactoryImpl extends AbstractSQLQueryFactory<SQLQuery, SQLSubQuery> {
 
     static class DataSourceProvider implements Provider<Connection> {
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/mysql/MySQLQueryFactory.java
Patch:
@@ -22,6 +22,7 @@
 import com.mysema.query.sql.Configuration;
 import com.mysema.query.sql.MySQLTemplates;
 import com.mysema.query.sql.RelationalPath;
+import com.mysema.query.sql.SQLSubQuery;
 import com.mysema.query.sql.SQLTemplates;
 import com.mysema.query.sql.dml.SQLInsertClause;
 import com.mysema.query.types.Expression;
@@ -33,7 +34,7 @@
  * @author tiwe
  *
  */
-public class MySQLQueryFactory extends AbstractSQLQueryFactory<MySQLQuery> {
+public class MySQLQueryFactory extends AbstractSQLQueryFactory<MySQLQuery, SQLSubQuery> {
 
     public MySQLQueryFactory(Configuration configuration, Provider<Connection> connection) {
         super(configuration, connection);

File: querydsl-sql/src/main/java/com/mysema/query/sql/oracle/OracleQueryFactory.java
Patch:
@@ -20,6 +20,7 @@
 import com.mysema.query.sql.AbstractSQLQueryFactory;
 import com.mysema.query.sql.Configuration;
 import com.mysema.query.sql.OracleTemplates;
+import com.mysema.query.sql.SQLSubQuery;
 import com.mysema.query.sql.SQLTemplates;
 
 /**
@@ -28,7 +29,7 @@
  * @author tiwe
  *
  */
-public class OracleQueryFactory extends AbstractSQLQueryFactory<OracleQuery> {
+public class OracleQueryFactory extends AbstractSQLQueryFactory<OracleQuery, SQLSubQuery> {
 
     public OracleQueryFactory(Configuration configuration, Provider<Connection> connection) {
         super(configuration, connection);

File: querydsl-sql/src/main/java/com/mysema/query/sql/postgres/PostgresQueryFactory.java
Patch:
@@ -20,6 +20,7 @@
 import com.mysema.query.sql.AbstractSQLQueryFactory;
 import com.mysema.query.sql.Configuration;
 import com.mysema.query.sql.PostgresTemplates;
+import com.mysema.query.sql.SQLSubQuery;
 import com.mysema.query.sql.SQLTemplates;
 
 /**
@@ -28,7 +29,7 @@
  * @author tiwe
  *
  */
-public class PostgresQueryFactory extends AbstractSQLQueryFactory<PostgresQuery> {
+public class PostgresQueryFactory extends AbstractSQLQueryFactory<PostgresQuery, SQLSubQuery> {
 
     public PostgresQueryFactory(Configuration configuration, Provider<Connection> connection) {
         super(configuration, connection);

File: querydsl-sql/src/main/java/com/mysema/query/sql/teradata/TeradataQueryFactory.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.mysema.query.sql.AbstractSQLQueryFactory;
 import com.mysema.query.sql.Configuration;
+import com.mysema.query.sql.SQLSubQuery;
 import com.mysema.query.sql.SQLTemplates;
 import com.mysema.query.sql.TeradataTemplates;
 
@@ -28,7 +29,7 @@
  * @author tiwe
  *
  */
-public class TeradataQueryFactory extends AbstractSQLQueryFactory<TeradataQuery> {
+public class TeradataQueryFactory extends AbstractSQLQueryFactory<TeradataQuery, SQLSubQuery> {
 
     public TeradataQueryFactory(Configuration configuration, Provider<Connection> connection) {
         super(configuration, connection);

File: querydsl-sql/src/test/java/com/mysema/query/sql/SQLSerializerTest.java
Patch:
@@ -56,7 +56,7 @@ public void CountDistinct() {
         SQLSubQuery query = new SQLSubQuery();
         query.from(QEmployeeNoPK.employee);
         query.distinct();
-        serializer.serializeForQuery(query.queryMixin.getMetadata(), true);
+        serializer.serializeForQuery(query.getMetadata(), true);
         assertEquals("select count(*)\n" +
         "from (select distinct EMPLOYEE.ID, EMPLOYEE.FIRSTNAME, EMPLOYEE.LASTNAME, EMPLOYEE.SALARY, " +
             "EMPLOYEE.DATEFIELD, EMPLOYEE.TIMEFIELD, EMPLOYEE.SUPERIOR_ID\n" +
@@ -70,7 +70,7 @@ public void CountDistinct_PostgreSQL() {
         SQLSubQuery query = new SQLSubQuery();
         query.from(QEmployeeNoPK.employee);
         query.distinct();
-        serializer.serializeForQuery(query.queryMixin.getMetadata(), true);
+        serializer.serializeForQuery(query.getMetadata(), true);
         assertEquals("select count(" +
             "distinct (EMPLOYEE.ID, EMPLOYEE.FIRSTNAME, EMPLOYEE.LASTNAME, EMPLOYEE.SALARY, " +
             "EMPLOYEE.DATEFIELD, EMPLOYEE.TIMEFIELD, EMPLOYEE.SUPERIOR_ID))\n" +

File: querydsl-sql/src/test/java/com/mysema/query/sql/postgres/PostgresTypesTest.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import com.mysema.testutil.ExternalDB;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -16,7 +17,9 @@
 import com.mysema.query.sql.JDBCTypeMapping;
 import com.mysema.query.sql.PostgresTemplates;
 import com.mysema.query.sql.SQLTemplates;
+import org.junit.experimental.categories.Category;
 
+@Category(ExternalDB.class)
 public class PostgresTypesTest {
     
     @Before

File: querydsl-apt/src/test/java/com/mysema/query/domain/Examples.java
Patch:
@@ -50,11 +50,9 @@ public static class ComplexCollections {
         
         @QueryEmbedded
         Map<?, Complex<String>> map3;
-                
-                
+
     }
     
-    
     public static class Complex<T extends Comparable<T>> implements Comparable<Complex<T>> {
 
         T a;

File: querydsl-apt/src/test/java/com/mysema/query/domain/Generic11Test.java
Patch:
@@ -26,8 +26,7 @@ public static class A2<T extends WhatEver2> { }
 
     @Entity
     public static class B2 extends A2 { } // note the missing type parameter
-    
-    
+
     @Test
     public void test() {
         

File: querydsl-apt/src/test/java/com/mysema/query/domain/Hierarchy2Test.java
Patch:
@@ -33,7 +33,7 @@ public static abstract class SomeMappedSuperClassHavingMyEmbeddable {
     }
 
     @Entity
-    static class A {
+    public static class A {
 
         @OneToOne
         SomeEntity entry;
@@ -43,7 +43,7 @@ static class A {
     }
 
     @Entity
-    static class SomeEntity extends SomeMappedSuperClassHavingMyEmbeddable {
+    public static class SomeEntity extends SomeMappedSuperClassHavingMyEmbeddable {
     }
 
     @Embeddable

File: querydsl-apt/src/test/java/com/mysema/query/domain/SignatureTest.java
Patch:
@@ -28,8 +28,7 @@ public class SignatureTest {
     public static abstract class APropertyChangeSupported implements Comparable<Object>, Cloneable, Serializable {
         
     }
-   
-   
+
     @QuerySupertype
     public static abstract class AValueObject extends APropertyChangeSupported implements Comparable<Object>, Cloneable, Serializable {
         

File: querydsl-codegen/src/test/java/com/mysema/query/codegen/GenericTest.java
Patch:
@@ -24,13 +24,13 @@ public static abstract class HidaBezGruppe<G extends HidaBezGruppe<G, B>, B exte
     @Test
     public void HidaBez() {
         Type type = typeFactory.getEntityType(HidaBez.class);
-        System.out.println(type.getGenericName(true));
+        //System.out.println(type.getGenericName(true));
     }
     
     @Test
     public void HidaBezGruppe() {
         Type type = typeFactory.getEntityType(HidaBezGruppe.class);
-        System.out.println(type.getGenericName(true));
+        //System.out.println(type.getGenericName(true));
     }
 
 }

File: querydsl-collections/src/test/java/com/mysema/query/collections/AbstractQueryTest.java
Patch:
@@ -91,10 +91,10 @@ public <RT> List<RT> list(Expression<RT> projection) {
             boolean array = projection.getType().isArray();
             List<RT> rv = super.list(projection);
             for (Object o : rv) {
-                System.out.println(array ? Arrays.toString((Object[])o) : o);
+                //System.out.println(array ? Arrays.toString((Object[])o) : o);
                 res.add(o);
             }
-            System.out.println();
+            //System.out.println();
             return rv;
         }
 

File: querydsl-core/src/test/java/com/mysema/query/QueryMutability.java
Patch:
@@ -13,14 +13,13 @@
  */
 package com.mysema.query;
 
-import static org.junit.Assert.assertTrue;
-
 import java.io.Closeable;
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 
 import com.mysema.query.support.QueryBase;
 import com.mysema.query.types.Expression;
+import static org.junit.Assert.assertTrue;
 
 public final class QueryMutability<T extends QueryBase<T> & Projectable> {
 
@@ -97,7 +96,6 @@ private void assertProjectionEmpty() throws IOException{
         if (query instanceof Closeable) {
             ((Closeable)query).close();
         }
-        System.err.println();
     }
 
 }

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/OpenJPATemplates.java
Patch:
@@ -14,6 +14,7 @@
 package com.mysema.query.jpa;
 
 import com.mysema.query.types.Ops;
+import com.mysema.query.types.PathType;
 
 /**
  * OpenJPATemplates extends JPQLTemplates with OpenJPA specific extensions
@@ -27,6 +28,7 @@ public class OpenJPATemplates extends JPQLTemplates{
 
     public OpenJPATemplates() {
         this(DEFAULT_ESCAPE);
+        add(PathType.VARIABLE, "{0s}_");
         add(Ops.ALIAS, "{0} {1}");
         add(Ops.NEGATE, "-1 * {0}", 7);
     }

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/TupleTest.java
Patch:
@@ -13,16 +13,17 @@
  */
 package com.mysema.query.jpa;
 
-import org.junit.Test;
-
 import com.mysema.query.jpa.domain.QCat;
 import com.mysema.query.jpa.hibernate.HibernateSubQuery;
 import com.mysema.query.types.QTuple;
 import com.mysema.query.types.SubQueryExpression;
+import org.junit.Ignore;
+import org.junit.Test;
 
 public class TupleTest extends AbstractQueryTest {
         
     @Test
+    @Ignore // FIXME
     public void test() {
         QCat cat = QCat.cat;
         

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLQueryFactory.java
Patch:
@@ -25,7 +25,7 @@
  * @author tiwe
  *
  */
-public class SQLQueryFactory extends AbstractSQLQueryFactory<SQLQuery> {
+public class SQLQueryFactory extends AbstractSQLQueryFactory<SQLQuery, SQLSubQuery> {
 
     static class DataSourceProvider implements Provider<Connection> {
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLQueryFactoryImpl.java
Patch:
@@ -26,7 +26,7 @@
  *
  */
 @Deprecated
-public class SQLQueryFactoryImpl extends AbstractSQLQueryFactory<SQLQuery> {
+public class SQLQueryFactoryImpl extends AbstractSQLQueryFactory<SQLQuery, SQLSubQuery> {
 
     static class DataSourceProvider implements Provider<Connection> {
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/mysql/MySQLQueryFactory.java
Patch:
@@ -22,6 +22,7 @@
 import com.mysema.query.sql.Configuration;
 import com.mysema.query.sql.MySQLTemplates;
 import com.mysema.query.sql.RelationalPath;
+import com.mysema.query.sql.SQLSubQuery;
 import com.mysema.query.sql.SQLTemplates;
 import com.mysema.query.sql.dml.SQLInsertClause;
 import com.mysema.query.types.Expression;
@@ -33,7 +34,7 @@
  * @author tiwe
  *
  */
-public class MySQLQueryFactory extends AbstractSQLQueryFactory<MySQLQuery> {
+public class MySQLQueryFactory extends AbstractSQLQueryFactory<MySQLQuery, SQLSubQuery> {
 
     public MySQLQueryFactory(Configuration configuration, Provider<Connection> connection) {
         super(configuration, connection);

File: querydsl-sql/src/main/java/com/mysema/query/sql/oracle/OracleQueryFactory.java
Patch:
@@ -20,6 +20,7 @@
 import com.mysema.query.sql.AbstractSQLQueryFactory;
 import com.mysema.query.sql.Configuration;
 import com.mysema.query.sql.OracleTemplates;
+import com.mysema.query.sql.SQLSubQuery;
 import com.mysema.query.sql.SQLTemplates;
 
 /**
@@ -28,7 +29,7 @@
  * @author tiwe
  *
  */
-public class OracleQueryFactory extends AbstractSQLQueryFactory<OracleQuery> {
+public class OracleQueryFactory extends AbstractSQLQueryFactory<OracleQuery, SQLSubQuery> {
 
     public OracleQueryFactory(Configuration configuration, Provider<Connection> connection) {
         super(configuration, connection);

File: querydsl-sql/src/main/java/com/mysema/query/sql/postgres/PostgresQueryFactory.java
Patch:
@@ -20,6 +20,7 @@
 import com.mysema.query.sql.AbstractSQLQueryFactory;
 import com.mysema.query.sql.Configuration;
 import com.mysema.query.sql.PostgresTemplates;
+import com.mysema.query.sql.SQLSubQuery;
 import com.mysema.query.sql.SQLTemplates;
 
 /**
@@ -28,7 +29,7 @@
  * @author tiwe
  *
  */
-public class PostgresQueryFactory extends AbstractSQLQueryFactory<PostgresQuery> {
+public class PostgresQueryFactory extends AbstractSQLQueryFactory<PostgresQuery, SQLSubQuery> {
 
     public PostgresQueryFactory(Configuration configuration, Provider<Connection> connection) {
         super(configuration, connection);

File: querydsl-sql/src/main/java/com/mysema/query/sql/teradata/TeradataQueryFactory.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.mysema.query.sql.AbstractSQLQueryFactory;
 import com.mysema.query.sql.Configuration;
+import com.mysema.query.sql.SQLSubQuery;
 import com.mysema.query.sql.SQLTemplates;
 import com.mysema.query.sql.TeradataTemplates;
 
@@ -28,7 +29,7 @@
  * @author tiwe
  *
  */
-public class TeradataQueryFactory extends AbstractSQLQueryFactory<TeradataQuery> {
+public class TeradataQueryFactory extends AbstractSQLQueryFactory<TeradataQuery, SQLSubQuery> {
 
     public TeradataQueryFactory(Configuration configuration, Provider<Connection> connection) {
         super(configuration, connection);

File: querydsl-sql/src/test/java/com/mysema/query/sql/SQLSerializerTest.java
Patch:
@@ -56,7 +56,7 @@ public void CountDistinct() {
         SQLSubQuery query = new SQLSubQuery();
         query.from(QEmployeeNoPK.employee);
         query.distinct();
-        serializer.serializeForQuery(query.queryMixin.getMetadata(), true);
+        serializer.serializeForQuery(query.getMetadata(), true);
         assertEquals("select count(*)\n" +
         "from (select distinct EMPLOYEE.ID, EMPLOYEE.FIRSTNAME, EMPLOYEE.LASTNAME, EMPLOYEE.SALARY, " +
             "EMPLOYEE.DATEFIELD, EMPLOYEE.TIMEFIELD, EMPLOYEE.SUPERIOR_ID\n" +
@@ -70,7 +70,7 @@ public void CountDistinct_PostgreSQL() {
         SQLSubQuery query = new SQLSubQuery();
         query.from(QEmployeeNoPK.employee);
         query.distinct();
-        serializer.serializeForQuery(query.queryMixin.getMetadata(), true);
+        serializer.serializeForQuery(query.getMetadata(), true);
         assertEquals("select count(" +
             "distinct (EMPLOYEE.ID, EMPLOYEE.FIRSTNAME, EMPLOYEE.LASTNAME, EMPLOYEE.SALARY, " +
             "EMPLOYEE.DATEFIELD, EMPLOYEE.TIMEFIELD, EMPLOYEE.SUPERIOR_ID))\n" +

File: querydsl-sql/src/test/java/com/mysema/query/sql/postgres/PostgresTypesTest.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import com.mysema.testutil.ExternalDB;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -16,7 +17,9 @@
 import com.mysema.query.sql.JDBCTypeMapping;
 import com.mysema.query.sql.PostgresTemplates;
 import com.mysema.query.sql.SQLTemplates;
+import org.junit.experimental.categories.Category;
 
+@Category(ExternalDB.class)
 public class PostgresTypesTest {
     
     @Before

File: querydsl-apt/src/main/java/com/mysema/query/apt/AbstractQuerydslProcessor.java
Patch:
@@ -558,7 +558,7 @@ private Set<? extends Element> getElements(Class<? extends Annotation> a) {
 
     @Override
     public SourceVersion getSupportedSourceVersion() {
-        return SourceVersion.latest();
+        return SourceVersion.latestSupported();
     }
 
     private void serialize(Serializer serializer, Collection<EntityType> models) {

File: querydsl-apt/src/test/java/com/mysema/query/domain/Examples.java
Patch:
@@ -50,11 +50,9 @@ public static class ComplexCollections {
         
         @QueryEmbedded
         Map<?, Complex<String>> map3;
-                
-                
+
     }
     
-    
     public static class Complex<T extends Comparable<T>> implements Comparable<Complex<T>> {
 
         T a;

File: querydsl-apt/src/test/java/com/mysema/query/domain/Generic11Test.java
Patch:
@@ -26,8 +26,7 @@ public static class A2<T extends WhatEver2> { }
 
     @Entity
     public static class B2 extends A2 { } // note the missing type parameter
-    
-    
+
     @Test
     public void test() {
         

File: querydsl-apt/src/test/java/com/mysema/query/domain/Hierarchy2Test.java
Patch:
@@ -33,7 +33,7 @@ public static abstract class SomeMappedSuperClassHavingMyEmbeddable {
     }
 
     @Entity
-    static class A {
+    public static class A {
 
         @OneToOne
         SomeEntity entry;
@@ -43,7 +43,7 @@ static class A {
     }
 
     @Entity
-    static class SomeEntity extends SomeMappedSuperClassHavingMyEmbeddable {
+    public static class SomeEntity extends SomeMappedSuperClassHavingMyEmbeddable {
     }
 
     @Embeddable

File: querydsl-apt/src/test/java/com/mysema/query/domain/SignatureTest.java
Patch:
@@ -28,8 +28,7 @@ public class SignatureTest {
     public static abstract class APropertyChangeSupported implements Comparable<Object>, Cloneable, Serializable {
         
     }
-   
-   
+
     @QuerySupertype
     public static abstract class AValueObject extends APropertyChangeSupported implements Comparable<Object>, Cloneable, Serializable {
         

File: src/main/java/com/mysema/codegen/model/ClassType.java
Patch:
@@ -23,8 +23,7 @@
 
 /**
  * @author tiwe
- * 
- * @param <T>
+ *
  */
 public class ClassType implements Type {
 

File: querydsl-sql/src/test/java/com/mysema/query/SelectBase.java
Patch:
@@ -320,7 +320,7 @@ public void Custom_Projection() {
     }
 
     @Test
-    @IncludeIn({H2, SQLSERVER, MYSQL, ORACLE, SQLITE, TERADATA}) // TODO fix postgres
+    @IncludeIn({H2, SQLSERVER, MYSQL, ORACLE, TERADATA}) // TODO fix postgres
     public void Dates() {
         long ts = ((long)Math.floor(System.currentTimeMillis() / 1000)) * 1000;
         long tsDate = new org.joda.time.LocalDate(ts).toDateMidnight().getMillis();

File: querydsl-core/src/test/java/com/mysema/query/types/ProjectionExample.java
Patch:
@@ -43,9 +43,9 @@ public ProjectionExample(boolean booleanArg, byte byteArg,
 
     }
 
-    public ProjectionExample(Long id, char... characters) {
+    public ProjectionExample(long id, char... characters) {
         this.id = id;
-        this.text = String.copyValueOf(characters);
+        this.text = String.valueOf(characters);
     }
 
 }

File: querydsl-apt/src/test/java/com/mysema/query/apt/GenericExporterTest.java
Patch:
@@ -93,6 +93,9 @@ public void Execute2() throws IOException {
         expected.add("QGeneric4Test_HidaBezGruppe.java");
         expected.add("QInterfaceType2Test_UserImpl.java");
         expected.add("QOrderTest_Order.java");
+        expected.add("QManagedEmailTest_ManagedEmails.java");
+        expected.add("QGeneric12Test_ChannelRole.java");
+        expected.add("QManyToManyTest_Person.java");
 
         execute(expected, "GenericExporterTest2", "HibernateAnnotationProcessor");
     }

File: querydsl-sql-codegen/src/main/java/com/mysema/query/sql/codegen/SQLCodegenModule.java
Patch:
@@ -42,6 +42,8 @@ public class SQLCodegenModule extends CodegenModule{
     
     public static final String SCHEMA_TO_PACKAGE = "schemaToPackage";
     
+    public static final String COLUMN_COMPARATOR = "columnComparator";
+    
     @Override
     protected void configure() {
         super.configure();
@@ -57,6 +59,7 @@ protected void configure() {
         bind(PACKAGE_NAME, "com.example");
         bind(BEAN_SERIALIZER, (Class<?>)null);
         bind(SCHEMA_TO_PACKAGE, false);
+        bind(COLUMN_COMPARATOR, null);
     }
     
     public String getPrefix() {

File: querydsl-sql/src/main/java/com/mysema/query/sql/CUBRIDTemplates.java
Patch:
@@ -52,6 +52,7 @@ public CUBRIDTemplates(char escape, boolean quote) {
         setParameterMetadataAvailable(false);
         setNullsFirst(null);
         setNullsLast(null);
+        setDefaultValues("\ndefault values");
 
         add(Ops.DateTimeOps.DAY_OF_YEAR, "dayofyear({0})");
         add(Ops.DateTimeOps.DAY_OF_WEEK, "dayofweek({0})");

File: querydsl-sql/src/main/java/com/mysema/query/sql/DerbyTemplates.java
Patch:
@@ -54,6 +54,7 @@ public DerbyTemplates(char escape, boolean quote) {
         addClass2TypeMappings("smallint", Byte.class);
         setAutoIncrement(" generated always as identity");
         setFunctionJoinsWrapped(true);
+        setDefaultValues("\nvalues (default)");
 
         add(Ops.CONCAT, "varchar({0} || {1})");
         add(Ops.DateTimeOps.DAY_OF_MONTH, "day({0})");

File: querydsl-sql/src/main/java/com/mysema/query/sql/HSQLDBTemplates.java
Patch:
@@ -44,6 +44,7 @@ public HSQLDBTemplates(char escape, boolean quote) {
         super("\"", escape, quote);
         setLimitRequired(true);
         setAutoIncrement(" identity");
+        setDefaultValues("\ndefault values");
         add(Ops.TRIM, "trim(both from {0})");
         add(Ops.NEGATE, "{0} * -1", 7);
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/PostgresTemplates.java
Patch:
@@ -47,6 +47,7 @@ public PostgresTemplates(char escape, boolean quote) {
         setDummyTable(null);
         setCountDistinctMultipleColumns(true);
         setCountViaAnalytics(true);
+        setDefaultValues("\ndefault values");
 
         // type mappings
         addClass2TypeMappings("numeric(3,0)", Byte.class);

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLServerTemplates.java
Patch:
@@ -53,6 +53,7 @@ public SQLServerTemplates(char escape, boolean quote) {
         setDummyTable("");
         setNullsFirst(null);
         setNullsLast(null);
+        setDefaultValues("\ndefault values");
 
         // String
         add(Ops.CONCAT, "{0} + {1}", 13);

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLiteTemplates.java
Patch:
@@ -50,6 +50,7 @@ public SQLiteTemplates(char escape, boolean quote) {
         setLimitRequired(true);
         setNullsFirst(null);
         setNullsLast(null);
+        setDefaultValues("\ndefault values");
         add(Ops.MOD, "{0} % {1}");
 
         add(Ops.INDEX_OF, "charindex({1},{0},1)-1");

File: querydsl-sql/src/main/java/com/mysema/query/sql/TeradataTemplates.java
Patch:
@@ -57,6 +57,7 @@ public TeradataTemplates(char escape, boolean quote) {
         setNullsLast(null);
         setDummyTable(null);
         setCountViaAnalytics(true);
+        setDefaultValues("\ndefault values");
 
         addClass2TypeMappings("byteint", Byte.class);
         addClass2TypeMappings("double precision", Double.class);

File: querydsl-sql/src/test/java/com/mysema/query/sql/types/LocalDateTimeTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.mysema.query.types;
+package com.mysema.query.sql.types;
 
 import java.sql.PreparedStatement;
 import java.sql.SQLException;

File: querydsl-sql/src/test/java/com/mysema/query/sql/types/LocaleTypeTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.mysema.query.types;
+package com.mysema.query.sql.types;
 
 import static org.junit.Assert.assertEquals;
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/types/TypeTest.java
Patch:
@@ -11,7 +11,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.mysema.query.types;
+package com.mysema.query.sql.types;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;

File: querydsl-sql/src/main/java/com/mysema/query/sql/CUBRIDTemplates.java
Patch:
@@ -52,6 +52,7 @@ public CUBRIDTemplates(char escape, boolean quote) {
         setParameterMetadataAvailable(false);
         setNullsFirst(null);
         setNullsLast(null);
+        setDefaultValues("\ndefault values");
 
         add(Ops.DateTimeOps.DAY_OF_YEAR, "dayofyear({0})");
         add(Ops.DateTimeOps.DAY_OF_WEEK, "dayofweek({0})");

File: querydsl-sql/src/main/java/com/mysema/query/sql/DerbyTemplates.java
Patch:
@@ -54,6 +54,7 @@ public DerbyTemplates(char escape, boolean quote) {
         addClass2TypeMappings("smallint", Byte.class);
         setAutoIncrement(" generated always as identity");
         setFunctionJoinsWrapped(true);
+        setDefaultValues("\nvalues (default)");
 
         add(Ops.CONCAT, "varchar({0} || {1})");
         add(Ops.DateTimeOps.DAY_OF_MONTH, "day({0})");

File: querydsl-sql/src/main/java/com/mysema/query/sql/HSQLDBTemplates.java
Patch:
@@ -44,6 +44,7 @@ public HSQLDBTemplates(char escape, boolean quote) {
         super("\"", escape, quote);
         setLimitRequired(true);
         setAutoIncrement(" identity");
+        setDefaultValues("\ndefault values");
         add(Ops.TRIM, "trim(both from {0})");
         add(Ops.NEGATE, "{0} * -1", 7);
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/PostgresTemplates.java
Patch:
@@ -47,6 +47,7 @@ public PostgresTemplates(char escape, boolean quote) {
         setDummyTable(null);
         setCountDistinctMultipleColumns(true);
         setCountViaAnalytics(true);
+        setDefaultValues("\ndefault values");
 
         // type mappings
         addClass2TypeMappings("numeric(3,0)", Byte.class);

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLServerTemplates.java
Patch:
@@ -53,6 +53,7 @@ public SQLServerTemplates(char escape, boolean quote) {
         setDummyTable("");
         setNullsFirst(null);
         setNullsLast(null);
+        setDefaultValues("\ndefault values");
 
         // String
         add(Ops.CONCAT, "{0} + {1}", 13);

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLiteTemplates.java
Patch:
@@ -50,6 +50,7 @@ public SQLiteTemplates(char escape, boolean quote) {
         setLimitRequired(true);
         setNullsFirst(null);
         setNullsLast(null);
+        setDefaultValues("\ndefault values");
         add(Ops.MOD, "{0} % {1}");
 
         add(Ops.INDEX_OF, "charindex({1},{0},1)-1");

File: querydsl-sql/src/main/java/com/mysema/query/sql/TeradataTemplates.java
Patch:
@@ -57,6 +57,7 @@ public TeradataTemplates(char escape, boolean quote) {
         setNullsLast(null);
         setDummyTable(null);
         setCountViaAnalytics(true);
+        setDefaultValues("\ndefault values");
 
         addClass2TypeMappings("byteint", Byte.class);
         addClass2TypeMappings("double precision", Double.class);

File: querydsl-sql/src/main/java/com/mysema/query/sql/HSQLDBTemplates.java
Patch:
@@ -44,6 +44,7 @@ public HSQLDBTemplates(char escape, boolean quote) {
         super("\"", escape, quote);
         setLimitRequired(true);
         setAutoIncrement(" identity");
+        setDefaultValues("\ndefault values");
         add(Ops.TRIM, "trim(both from {0})");
         add(Ops.NEGATE, "{0} * -1", 7);
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/CUBRIDTemplates.java
Patch:
@@ -52,6 +52,7 @@ public CUBRIDTemplates(char escape, boolean quote) {
         setParameterMetadataAvailable(false);
         setNullsFirst(null);
         setNullsLast(null);
+        setDefaultValues("\ndefault values");
 
         add(Ops.DateTimeOps.DAY_OF_YEAR, "dayofyear({0})");
         add(Ops.DateTimeOps.DAY_OF_WEEK, "dayofweek({0})");

File: querydsl-sql/src/main/java/com/mysema/query/sql/DerbyTemplates.java
Patch:
@@ -54,6 +54,7 @@ public DerbyTemplates(char escape, boolean quote) {
         addClass2TypeMappings("smallint", Byte.class);
         setAutoIncrement(" generated always as identity");
         setFunctionJoinsWrapped(true);
+        setDefaultValues("\nvalues (default)");
 
         add(Ops.CONCAT, "varchar({0} || {1})");
         add(Ops.DateTimeOps.DAY_OF_MONTH, "day({0})");

File: querydsl-sql/src/main/java/com/mysema/query/sql/PostgresTemplates.java
Patch:
@@ -47,6 +47,7 @@ public PostgresTemplates(char escape, boolean quote) {
         setDummyTable(null);
         setCountDistinctMultipleColumns(true);
         setCountViaAnalytics(true);
+        setDefaultValues("\ndefault values");
 
         // type mappings
         addClass2TypeMappings("numeric(3,0)", Byte.class);

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLServerTemplates.java
Patch:
@@ -53,6 +53,7 @@ public SQLServerTemplates(char escape, boolean quote) {
         setDummyTable("");
         setNullsFirst(null);
         setNullsLast(null);
+        setDefaultValues("\ndefault values");
 
         // String
         add(Ops.CONCAT, "{0} + {1}", 13);

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLTemplates.java
Patch:
@@ -176,7 +176,7 @@ public SQLTemplates build() {
 
     private String values = "\nvalues ";
 
-    private String defaultValues = "\ndefault values";
+    private String defaultValues = "\nvalues ()";
 
     private String where = "\nwhere ";
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLiteTemplates.java
Patch:
@@ -50,6 +50,7 @@ public SQLiteTemplates(char escape, boolean quote) {
         setLimitRequired(true);
         setNullsFirst(null);
         setNullsLast(null);
+        setDefaultValues("\ndefault values");
         add(Ops.MOD, "{0} % {1}");
 
         add(Ops.INDEX_OF, "charindex({1},{0},1)-1");

File: querydsl-sql/src/main/java/com/mysema/query/sql/TeradataTemplates.java
Patch:
@@ -57,6 +57,7 @@ public TeradataTemplates(char escape, boolean quote) {
         setNullsLast(null);
         setDummyTable(null);
         setCountViaAnalytics(true);
+        setDefaultValues("\ndefault values");
 
         addClass2TypeMappings("byteint", Byte.class);
         addClass2TypeMappings("double precision", Double.class);

File: querydsl-sql/src/test/java/com/mysema/query/sql/types/LocalDateTimeTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.mysema.query.types;
+package com.mysema.query.sql.types;
 
 import java.sql.PreparedStatement;
 import java.sql.SQLException;

File: querydsl-sql/src/test/java/com/mysema/query/sql/types/LocaleTypeTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.mysema.query.types;
+package com.mysema.query.sql.types;
 
 import static org.junit.Assert.assertEquals;
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/types/TypeTest.java
Patch:
@@ -11,7 +11,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.mysema.query.types;
+package com.mysema.query.sql.types;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/Type.java
Patch:
@@ -22,6 +22,9 @@
 /**
  * Defines the de/serialization of a typed Java object from a ResultSet or to a PreparedStatement
  *
+ * <p>getValue(ResultSet, int) is used for extraction and setValue(PreparedStatement, int, T) is
+ * used for population</p>
+ *
  * @author tiwe
  *
  * @param <T>

File: querydsl-spatial/src/main/java/com/mysema/query/spatial/path/MultiLineStringPath.java
Patch:
@@ -15,7 +15,6 @@
 
 import java.lang.reflect.AnnotatedElement;
 
-import org.geolatte.geom.LineString;
 import org.geolatte.geom.MultiLineString;
 
 import com.mysema.query.spatial.MultiLineStringExpression;
@@ -54,7 +53,7 @@ public MultiLineStringPath(Class<? extends T> type, PathMetadata<?> metadata) {
     }
 
     public MultiLineStringPath(String var) {
-        this((Class<? extends T>) LineString.class, PathMetadataFactory.forVariable(var));
+        this((Class<? extends T>) MultiLineString.class, PathMetadataFactory.forVariable(var));
     }
 
     @Override

File: querydsl-apt/src/main/java/com/mysema/query/apt/DefaultConfiguration.java
Patch:
@@ -463,7 +463,6 @@ public boolean isExcludedClass(@Nonnull String className) {
         }
     }
 
-
     @Override
     public TypeMirror getRealType(ExecutableElement method) {
         return null;

File: querydsl-apt/src/main/java/com/mysema/query/apt/TypeElementHandler.java
Patch:
@@ -67,7 +67,6 @@ public TypeElementHandler(Configuration configuration, ExtendedTypeFactory typeF
         this.queryTypeFactory = queryTypeFactory;
     }
 
-
     public EntityType handleEntityType(TypeElement element) {
         EntityType entityType = typeFactory.getEntityType(element.asType(), true);
         List<? extends Element> elements = element.getEnclosedElements();

File: querydsl-apt/src/test/java/com/mysema/query/apt/GenericExporterTest.java
Patch:
@@ -92,6 +92,7 @@ public void Execute2() throws IOException {
         expected.add("QGeneric4Test_HidaBez.java");
         expected.add("QGeneric4Test_HidaBezGruppe.java");
         expected.add("QInterfaceType2Test_UserImpl.java");
+        expected.add("QOrderTest_Order.java");
 
         execute(expected, "GenericExporterTest2", "HibernateAnnotationProcessor");
     }

File: querydsl-mongodb/src/main/java/com/mysema/query/mongodb/MongodbQuery.java
Patch:
@@ -78,7 +78,7 @@ private static class NoResults extends RuntimeException {}
      * @param serializer
      */
     public MongodbQuery(DBCollection collection, Function<DBObject, K> transformer, MongodbSerializer serializer) {
-        this.queryMixin = new QueryMixin<MongodbQuery<K>>(this, new DefaultQueryMetadata().noValidate());
+        this.queryMixin = new QueryMixin<MongodbQuery<K>>(this, new DefaultQueryMetadata().noValidate(), false);
         this.transformer = transformer;
         this.collection = collection;
         this.serializer = serializer;

File: querydsl-sql/src/main/java/com/mysema/query/sql/spatial/SQLServer2008SpatialTemplates.java
Patch:
@@ -56,7 +56,6 @@ public SQLServer2008SpatialTemplates(char escape, boolean quote) {
         add(SpatialOps.SRID, "{0}.STSrid");
     }
 
-
     @Override
     public String asLiteral(Object o) {
         if (o instanceof Geometry) {

File: querydsl-sql/src/main/java/com/mysema/query/sql/PostgresTemplates.java
Patch:
@@ -101,7 +101,7 @@ public PostgresTemplates(char escape, boolean quote) {
         String daysDiff = "(cast({1} as date) - cast({0} as date))";
         String hoursDiff = "("+ daysDiff + " * 24 + date_part('hour', age({1}, {0})))";
         String minutesDiff = "(" + hoursDiff + " * 60 + date_part('minute', age({1}, {0})))";
-        String secondsDiff =  "(" +  minutesDiff + " * 60 + date_part('minute', age({1}, {0})))";
+        String secondsDiff =  "(" +  minutesDiff + " * 60 + date_part('second', age({1}, {0})))";
 
         add(Ops.DateTimeOps.DIFF_YEARS,   yearsDiff);
         add(Ops.DateTimeOps.DIFF_MONTHS,  monthsDiff);

File: querydsl-sql/src/test/java/com/mysema/query/SelectBase.java
Patch:
@@ -443,9 +443,9 @@ public void Date_Diff2() {
         assertEquals(30,        years);
         assertEquals(361,       months);
         assertEquals(10989,     days);
-        assertEquals(263737,    hours);
-        assertEquals(15824220,  minutes);
-        assertEquals(949453200, seconds);
+        assertEquals(263736,    hours);
+        assertEquals(15824160,  minutes);
+        assertEquals(949449600, seconds);
 
     }
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLiteTemplates.java
Patch:
@@ -15,6 +15,7 @@
 
 import org.joda.time.ReadableInstant;
 
+import com.mysema.query.sql.types.BigDecimalAsDoubleType;
 import com.mysema.query.types.Ops;
 
 /**
@@ -45,7 +46,7 @@ public SQLiteTemplates(boolean quote) {
     public SQLiteTemplates(char escape, boolean quote) {
         super("\"", escape, quote);
         setDummyTable(null);
-        setBigDecimalSupported(false);
+        addCustomType(BigDecimalAsDoubleType.DEFAULT);
         setUnionsWrapped(false);
         setLimitRequired(true);
         setNullsFirst(null);

File: querydsl-sql/src/main/java/com/mysema/query/sql/spatial/TeradataSpatialTemplates.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.mysema.query.sql.SQLTemplates;
 import com.mysema.query.sql.TeradataTemplates;
+import com.mysema.query.sql.types.StringAsObjectType;
 
 /**
  * TeradataSpatialTemplates is a spatial enabled SQL dialect for Teradata
@@ -47,6 +48,7 @@ public TeradataSpatialTemplates(boolean quote) {
     public TeradataSpatialTemplates(char escape, boolean quote) {
         super(escape, quote);
         addCustomType(GeometryWktClobType.DEFAULT);
+        addCustomType(StringAsObjectType.DEFAULT);
         add(SpatialTemplatesSupport.getSpatialOps(false));
     }
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/BigDecimalAsDoubleType.java
Patch:
@@ -27,6 +27,8 @@
  */
 public class BigDecimalAsDoubleType extends AbstractType<BigDecimal> {
 
+    public static final BigDecimalAsDoubleType DEFAULT = new BigDecimalAsDoubleType();
+
     public BigDecimalAsDoubleType() {
         super(Types.DOUBLE);
     }

File: querydsl-sql/src/test/java/com/mysema/query/Connections.java
Patch:
@@ -212,7 +212,7 @@ public static Map<Integer, String> getSpatialData() {
         m.put(6, "LINESTRING (30 10, 10 30)");
         m.put(7, "LINESTRING (30 10, 10 30, 40 40)");
         // polygon
-        m.put(8, "POLYGON ((30 10, 40 40, 20 40, 10 20, 30 10))");
+        m.put(8, "POLYGON ((30 10, 40 40, 20 40, 10 20, 30 10), (20 30, 35 35, 30 20, 20 30))");
         m.put(9, "POLYGON ((35 10, 45 45, 15 40, 10 20, 35 10), (20 30, 35 35, 30 20, 20 30))");
         // multipoint
         m.put(11, "MULTIPOINT (10 40, 40 30)");

File: querydsl-jpa-codegen/src/test/java/com/mysema/query/jpa/domain16/DomainExporterTest.java
Patch:
@@ -26,6 +26,7 @@ public void Execute() throws IOException {
         assertTrue(new File(gen, "com/mysema/query/jpa/domain16/QEntity.java").exists());
         assertFalse(new File(gen, "com/mysema/query/jpa/domain16/QCustom.java").exists());
         assertTrue(new File(gen, "com/mysema/query/jpa/domain16/QCustom2.java").exists());
+        assertFalse(new File(gen, "com/mysema/query/jpa/domain16/QCustom3.java").exists());
 
     }
 

File: querydsl-jpa-codegen/src/test/java/com/mysema/query/jpa/domain16/DomainExporterTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.mysema.query.jpa.domain16;
 
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
 import java.io.File;
@@ -23,6 +24,8 @@ public void Execute() throws IOException {
         exporter.execute();
 
         assertTrue(new File(gen, "com/mysema/query/jpa/domain16/QEntity.java").exists());
+        assertFalse(new File(gen, "com/mysema/query/jpa/domain16/QCustom.java").exists());
+        assertTrue(new File(gen, "com/mysema/query/jpa/domain16/QCustom2.java").exists());
 
     }
 

File: querydsl-sql/src/test/java/com/mysema/query/SelectBase.java
Patch:
@@ -443,7 +443,7 @@ public void Custom_Projection() {
     }
 
     @Test
-    @ExcludeIn({CUBRID, SQLITE})
+    @ExcludeIn({SQLITE})
     public void Date_Add() {
         TestQuery query = query().from(employee);
         Date date1 = query.singleResult(employee.datefield);

File: querydsl-sql/src/main/java/com/mysema/query/sql/ColumnMetadata.java
Patch:
@@ -59,7 +59,7 @@ public static ColumnMetadata named(String name) {
         return new ColumnMetadata(name, null, true, UNDEFINED, UNDEFINED);
     }
 
-    private static int UNDEFINED = -1;
+    private static final int UNDEFINED = -1;
 
     private final String name;
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/RelationalPathExtractor.java
Patch:
@@ -122,7 +122,7 @@ public Set<RelationalPath<?>> visit(SubQueryExpression<?> expr, Set<RelationalPa
             known = md.getHaving().accept(this, known);
         }
         if (md.getWhere() != null) {
-            known = md.getWhere().accept(this, known);
+            md.getWhere().accept(this, known);
         }
         return old;
     }

File: querydsl-jpa-codegen/src/main/java/com/mysema/query/jpa/codegen/AbstractDomainExporter.java
Patch:
@@ -146,7 +146,7 @@ public void execute() throws IOException {
         Set<Supertype> additions = Sets.newHashSet();
         for (Map.Entry<Class<?>, EntityType> entry : allTypes.entrySet()) {
             EntityType entityType = entry.getValue();
-            if (entityType.getSuperType() != null && !allTypes.containsKey(entityType.getSuperType().getType())) {
+            if (entityType.getSuperType() != null && !allTypes.containsKey(entityType.getSuperType().getType().getJavaClass())) {
                 additions.add(entityType.getSuperType());
             }
         }

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLSerializer.java
Patch:
@@ -432,7 +432,7 @@ void serializeForDelete(QueryMetadata metadata, RelationalPath<?> entity) {
             append(templates.getDelete());
         }
         serialize(Position.AFTER_SELECT, metadata.getFlags());
-        append(templates.getFrom());
+        append("from ");
 
         dmlWithSchema = true;
         handle(entity);

File: querydsl-sql/src/test/java/com/mysema/query/sql/SQLServer2005TemplatesTest.java
Patch:
@@ -71,9 +71,9 @@ public void Limit() {
     public void Modifiers() {
         query.from(survey1).limit(5).offset(3);
         query.getMetadata().addProjection(survey1.id);
-        assertEquals("with inner_query as  (   " +
-        		"select survey1.ID, row_number() over () as row_number from SURVEY survey1 ) " +
-        		"select *  from inner_query where row_number > ? and row_number <= ?", query.toString());
+        assertEquals("select * from (" +
+      		"   select survey1.ID, row_number() over () as rn from SURVEY survey1) a " +
+      		"where rn > ? and rn <= ? order by rn", query.toString());
     }
 
     @Test

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ComparableExpression.java
Patch:
@@ -243,7 +243,7 @@ public final BooleanExpression loe(T right) {
     }
 
     /**
-     * Get a <code>this &lt; right</code> expression
+     * Get a <code>this &lt;= right</code> expression
      *
      * @param right rhs of the comparison
      * @return

File: querydsl-sql-codegen/src/main/java/com/mysema/query/sql/codegen/KeyDataFactory.java
Patch:
@@ -77,7 +77,7 @@ public Map<String, InverseForeignKeyData> getExportedKeys(DatabaseMetaData md,
                 String foreignSchemaName = foreignKeys.getString(FK_FOREIGN_SCHEMA_NAME);
                 String foreignTableName = foreignKeys.getString(FK_FOREIGN_TABLE_NAME);
                 String foreignColumn = foreignKeys.getString(FK_FOREIGN_COLUMN_NAME);
-                if (name == null) {
+                if (name == null || name.isEmpty()) {
                     name = tableName + "_" + foreignTableName + "_IFK";
                 }
 
@@ -106,7 +106,7 @@ public Map<String, ForeignKeyData> getImportedKeys(DatabaseMetaData md,
                 String parentTableName = foreignKeys.getString(FK_PARENT_TABLE_NAME);
                 String parentColumnName = foreignKeys.getString(FK_PARENT_COLUMN_NAME);
                 String foreignColumn = foreignKeys.getString(FK_FOREIGN_COLUMN_NAME);
-                if (name == null) {
+                if (name == null || name.isEmpty()) {
                     name = tableName + "_" + parentTableName + "_FK";
                 }
 
@@ -132,7 +132,7 @@ public Map<String, PrimaryKeyData> getPrimaryKeys(DatabaseMetaData md,
             while (primaryKeys.next()) {
                 String name = primaryKeys.getString(PK_NAME);
                 String columnName = primaryKeys.getString(PK_COLUMN_NAME);
-                if (name == null) {
+                if (name == null || name.isEmpty()) {
                     name = tableName + "_PK";
                 }
 

File: querydsl-sql-codegen/src/main/java/com/mysema/query/sql/codegen/KeyDataFactory.java
Patch:
@@ -77,7 +77,7 @@ public Map<String, InverseForeignKeyData> getExportedKeys(DatabaseMetaData md,
                 String foreignSchemaName = foreignKeys.getString(FK_FOREIGN_SCHEMA_NAME);
                 String foreignTableName = foreignKeys.getString(FK_FOREIGN_TABLE_NAME);
                 String foreignColumn = foreignKeys.getString(FK_FOREIGN_COLUMN_NAME);
-                if (name == null) {
+                if (name == null || name.isEmpty()) {
                     name = tableName + "_" + foreignTableName + "_IFK";
                 }
 
@@ -106,7 +106,7 @@ public Map<String, ForeignKeyData> getImportedKeys(DatabaseMetaData md,
                 String parentTableName = foreignKeys.getString(FK_PARENT_TABLE_NAME);
                 String parentColumnName = foreignKeys.getString(FK_PARENT_COLUMN_NAME);
                 String foreignColumn = foreignKeys.getString(FK_FOREIGN_COLUMN_NAME);
-                if (name == null) {
+                if (name == null || name.isEmpty()) {
                     name = tableName + "_" + parentTableName + "_FK";
                 }
 
@@ -132,7 +132,7 @@ public Map<String, PrimaryKeyData> getPrimaryKeys(DatabaseMetaData md,
             while (primaryKeys.next()) {
                 String name = primaryKeys.getString(PK_NAME);
                 String columnName = primaryKeys.getString(PK_COLUMN_NAME);
-                if (name == null) {
+                if (name == null || name.isEmpty()) {
                     name = tableName + "_PK";
                 }
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/CUBRIDTemplates.java
Patch:
@@ -70,6 +70,8 @@ protected void serializeModifiers(QueryMetadata metadata, SQLSerializer context)
             } else {
                 context.handle(limitTemplate, mod.getLimit());
             }
+        } else if (mod.getOffset() != null) {
+            context.handle(offsetLimitTemplate, mod.getOffset(), Integer.MAX_VALUE);
         }
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/Templates.java
Patch:
@@ -139,8 +139,9 @@ protected Templates(char escape) {
         add(Ops.DateTimeOps.CURRENT_TIME, "current_time()");
         add(Ops.DateTimeOps.CURRENT_TIMESTAMP, "current_timestamp()");
         add(Ops.DateTimeOps.DATE, "date({0})");
-        add(Ops.DateTimeOps.SECOND, "second({0})");
+
         add(Ops.DateTimeOps.MILLISECOND, "millisecond({0})");
+        add(Ops.DateTimeOps.SECOND, "second({0})");
         add(Ops.DateTimeOps.MINUTE, "minute({0})");
         add(Ops.DateTimeOps.HOUR, "hour({0})");
         add(Ops.DateTimeOps.WEEK, "week({0})");

File: querydsl-sql/src/main/java/com/mysema/query/sql/H2Templates.java
Patch:
@@ -48,6 +48,8 @@ public H2Templates(char escape, boolean quote) {
         add(Ops.MathOps.ROUND, "round({0},0)");
         add(Ops.TRIM, "trim(both from {0})");
 
+        add(Ops.DateTimeOps.DAY_OF_WEEK, "day_of_week({0})");
+
         add(Ops.MathOps.LN, "log({0})");
         add(Ops.MathOps.LOG, "(log({0}) / log({1}))");
         add(Ops.MathOps.COTH, "(cosh({0}) / sinh({0}))");

File: querydsl-sql/src/main/java/com/mysema/query/sql/HSQLDBTemplates.java
Patch:
@@ -57,6 +57,9 @@ public HSQLDBTemplates(char escape, boolean quote) {
         add(Ops.MathOps.SINH, "(exp({0}) - exp({0} * -1)) / 2");
         add(Ops.MathOps.TANH, "(exp({0} * 2) - 1) / (exp({0} * 2) + 1)");
 
+        add(Ops.DateTimeOps.WEEK, "extract(week_of_year from {0})");
+        add(Ops.DateTimeOps.YEAR_WEEK, "(extract(year from {0}) * 100 + extract(week_of_year from {0}))");
+
         add(Ops.DateTimeOps.ADD_YEARS, "dateadd('yy', {1s}, {0})");
         add(Ops.DateTimeOps.ADD_MONTHS, "dateadd('mm', {1s}, {0})");
         add(Ops.DateTimeOps.ADD_WEEKS, "dateadd('week', {1s}, {0})");

File: querydsl-sql/src/main/java/com/mysema/query/sql/MySQLTemplates.java
Patch:
@@ -85,6 +85,8 @@ public MySQLTemplates(char escape, boolean quote) {
         add(Ops.AggOps.BOOLEAN_ANY, "bit_or({0})", 0);
         add(Ops.AggOps.BOOLEAN_ALL, "bit_and({0})", 0);
 
+        add(Ops.DateTimeOps.DAY_OF_WEEK, "dayofweek({0})");
+        add(Ops.DateTimeOps.DAY_OF_YEAR, "dayofyear({0})");
         add(Ops.DateTimeOps.YEAR_MONTH, "extract(year_month from {0})");
         add(Ops.DateTimeOps.YEAR_WEEK, "yearweek({0})");
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLServerTemplates.java
Patch:
@@ -108,7 +108,6 @@ public SQLServerTemplates(char escape, boolean quote) {
         add(Ops.DateTimeOps.DIFF_SECONDS, "datediff(second,{0},{1})");
 
         add(Ops.DateTimeOps.DATE, "cast({0} as date)");
-
     }
 
     @Override

File: querydsl-sql/src/test/java/com/mysema/query/suites/TeradataSuiteTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.mysema.query.suites;
 
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 import org.junit.experimental.categories.Category;
 
 import com.mysema.query.BeanPopulationBase;
@@ -19,7 +18,6 @@
 import com.mysema.query.sql.TeradataTemplates;
 import com.mysema.testutil.ExternalDB;
 
-@Ignore
 @Category(ExternalDB.class)
 public class TeradataSuiteTest extends AbstractSuite {
 

File: querydsl-jpa-codegen/src/main/java/com/mysema/query/jpa/codegen/AbstractDomainExporter.java
Patch:
@@ -146,7 +146,7 @@ public void execute() throws IOException {
         Set<Supertype> additions = Sets.newHashSet();
         for (Map.Entry<Class<?>, EntityType> entry : allTypes.entrySet()) {
             EntityType entityType = entry.getValue();
-            if (entityType.getSuperType() != null && !allTypes.containsKey(entityType.getSuperType().getType().getFullName())) {
+            if (entityType.getSuperType() != null && !allTypes.containsKey(entityType.getSuperType().getType())) {
                 additions.add(entityType.getSuperType());
             }
         }

File: querydsl-collections/src/main/java/com/mysema/query/collections/MultiComparator.java
Patch:
@@ -34,7 +34,7 @@ public class MultiComparator<T> implements Comparator<T>, Serializable {
 
     private final boolean[] asc;
 
-    private transient final Evaluator<Object[]> ev;
+    private final transient Evaluator<Object[]> ev;
 
     public MultiComparator(Evaluator<Object[]> ev, boolean[] directions) {
         this.ev = ev;

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLTemplates.java
Patch:
@@ -42,7 +42,7 @@ public class SQLTemplates extends Templates {
 
     public static final SQLTemplates DEFAULT = new SQLTemplates("\"",'\\',false);
 
-    public static abstract class Builder {
+    public abstract static class Builder {
 
         protected boolean printSchema, quote, newLineToSingleSpace;
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/JavaTypeMapping.java
Patch:
@@ -127,6 +127,8 @@ public <T> Type<T> getType(Class<T> clazz) {
             resolvedType = findType(clazz);
             if (resolvedType != null) {
                 resolvedTypesByClass.put(clazz, resolvedType);
+            } else {
+                throw new IllegalArgumentException("Found no type for " + clazz.getName());
             }
         }
         return (Type<T>) resolvedType;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/UniqueResultsTest.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Copyright 2011, Mysema Ltd
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
@@ -17,13 +17,15 @@
 import static org.junit.Assert.assertEquals;
 
 import org.hibernate.Session;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import com.mysema.query.jpa.domain.Cat;
 import com.mysema.query.jpa.hibernate.HibernateQuery;
 import com.mysema.testutil.HibernateTestRunner;
 
+@Ignore
 @RunWith(HibernateTestRunner.class)
 public class UniqueResultsTest {
 

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/BatooTemplates.java
Patch:
@@ -18,7 +18,7 @@
 
 public class BatooTemplates extends JPQLTemplates {
 
-    public static final JPQLTemplates DEFAULT = new BatooTemplates();
+    public static final BatooTemplates DEFAULT = new BatooTemplates();
 
     public BatooTemplates() {
         this(DEFAULT_ESCAPE);

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/EclipseLinkTemplates.java
Patch:
@@ -43,7 +43,7 @@ public class EclipseLinkTemplates extends JPQLTemplates {
     }
 
 
-    public static final JPQLTemplates DEFAULT = new EclipseLinkTemplates();
+    public static final EclipseLinkTemplates DEFAULT = new EclipseLinkTemplates();
 
     private final Map<Class<?>, String> typeNames;
 

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/HQLTemplates.java
Patch:
@@ -53,7 +53,7 @@ public class HQLTemplates extends JPQLTemplates {
             Ops.QuantOps.AVG_IN_COL,
             Ops.EXISTS);
 
-    public static final JPQLTemplates DEFAULT = new HQLTemplates();
+    public static final HQLTemplates DEFAULT = new HQLTemplates();
 
     private final Map<Class<?>, String> typeNames;
 

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Show.java
Patch:
@@ -18,6 +18,7 @@
 import javax.persistence.ElementCollection;
 import javax.persistence.Entity;
 import javax.persistence.Id;
+import javax.persistence.MapKeyColumn;
 import javax.persistence.Table;
 
 /**
@@ -31,6 +32,7 @@ public class Show {
     long id;
 
     @ElementCollection
+    @MapKeyColumn(name="acts_key")
     public Map<String, String> acts;
 
     public Show() {}

File: querydsl-sql/src/test/java/com/mysema/query/sql/SQLSerializerTest.java
Patch:
@@ -228,7 +228,7 @@ public void UseLiterals() {
 
         Expression<?> expr = SQLExpressions.datediff(DatePart.year, employee.datefield, new java.sql.Date(0));
         serializer.handle(expr);
-        assertEquals("datediff('year',EMPLOYEE.DATEFIELD,'1968')", serializer.toString());
+        assertEquals("datediff('year',EMPLOYEE.DATEFIELD,(date '1970-01-01'))", serializer.toString());
     }
 
 }

File: querydsl-sql/src/test/java/com/mysema/query/sql/WithinGroupTest.java
Patch:
@@ -22,7 +22,7 @@ public void All() {
         assertEquals("cume_dist(path)", toString(SQLExpressions.cumeDist(path)));
         assertEquals("cume_dist(path, path2)", toString(SQLExpressions.cumeDist(path, path2)));
         assertEquals("dense_rank(path, path2)", toString(SQLExpressions.denseRank(path, path2)));
-        assertEquals("list_agg(path,',')", toString(SQLExpressions.listagg(path, ",")));
+        assertEquals("listagg(path,',')", toString(SQLExpressions.listagg(path, ",")));
         assertEquals("percent_rank(path, path2)", toString(SQLExpressions.percentRank(path, path2)));
         assertEquals("percentile_cont(path)", toString(SQLExpressions.percentileCont(path)));
         assertEquals("percentile_disc(path)", toString(SQLExpressions.percentileDisc(path)));

File: querydsl-sql-codegen/src/main/java/com/mysema/query/sql/codegen/DefaultNamingStrategy.java
Patch:
@@ -113,7 +113,7 @@ protected String normalizePropertyName(String name) {
     }
 
     protected String toCamelCase(String str) {
-        boolean toLower = str.equalsIgnoreCase(str);
+        boolean toLower = str.toUpperCase().equals(str);
         StringBuilder builder = new StringBuilder(str.length());
         for (int i = 0; i < str.length(); i++) {
             if (i < str.length() - 1 && (str.charAt(i) == '_' || str.charAt(i) == ' ')) {

File: querydsl-sql/src/test/java/com/mysema/query/Connections.java
Patch:
@@ -146,7 +146,7 @@ private static Connection getCubrid() throws ClassNotFoundException, SQLExceptio
 
     private static Connection getSQLite() throws SQLException, ClassNotFoundException {
         //System.setProperty("sqlite.purejava", "true");
-        Class.forName("org.sqlite.JDBC");
+//        Class.forName("org.sqlite.JDBC");
         return DriverManager.getConnection("jdbc:sqlite:target/sample.db");
     }
 

File: querydsl-apt/src/main/java/com/mysema/query/apt/Configuration.java
Patch:
@@ -191,12 +191,12 @@ public interface Configuration {
     /**
      * @param packageName
      */
-    public void addExcludedPackage(String packageName);
+    void addExcludedPackage(String packageName);
 
     /**
      * @param className
      */
-    public void addExcludedClass(String className);
+    void addExcludedClass(String className);
 
     /**
      * @param method

File: querydsl-codegen/src/main/java/com/mysema/query/codegen/QueryTypeFactory.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Copyright 2011, Mysema Ltd
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
@@ -17,7 +17,7 @@
 
 /**
  * QueryTypeFactory defines an interface for mapping domain types to Querydsl expression types
- * 
+ *
  * @author tiwe
  *
  */
@@ -27,6 +27,6 @@ public interface QueryTypeFactory {
      * @param type
      * @return
      */
-    public Type create(Type type);
+    Type create(Type type);
 
 }
\ No newline at end of file

File: querydsl-core/src/main/java/com/mysema/query/types/QTuple.java
Patch:
@@ -51,7 +51,7 @@
 @Immutable
 public class QTuple extends ExpressionBase<Tuple> implements FactoryExpression<Tuple> {
 
-    private static final ImmutableList<Expression<?>> createBindings(List<Expression<?>> exprs) {
+    private static ImmutableList<Expression<?>> createBindings(List<Expression<?>> exprs) {
         ImmutableList.Builder<Expression<?>> builder = ImmutableList.builder();
         for (Expression<?> e : exprs) {
             if (e instanceof Operation && ((Operation<?>)e).getOperator() == Ops.ALIAS) {

File: querydsl-core/src/main/java/com/mysema/query/types/Template.java
Patch:
@@ -33,7 +33,7 @@ public final class Template implements Serializable {
     private static final long serialVersionUID = -1697705745769542204L;
 
     @Immutable
-    public static abstract class Element implements Serializable {
+    public abstract static class Element implements Serializable {
 
         private static final long serialVersionUID = 3396877288101929387L;
 

File: querydsl-core/src/main/java/com/mysema/util/BeanMap.java
Patch:
@@ -671,8 +671,7 @@ protected Object[] createWriteMethodArguments(Method method, Object value) throw
                     }
                 }
             }
-            Object[] answer = {value};
-            return answer;
+            return new Object[]{value};
         } catch (InvocationTargetException e) {
             throw new IllegalArgumentException(e.getMessage());
         } catch (InstantiationException e) {

File: querydsl-sql-codegen/src/main/java/com/mysema/query/sql/codegen/DefaultNamingStrategy.java
Patch:
@@ -113,7 +113,7 @@ protected String normalizePropertyName(String name) {
     }
 
     protected String toCamelCase(String str) {
-        boolean toLower = str.toUpperCase().equals(str);
+        boolean toLower = str.equalsIgnoreCase(str);
         StringBuilder builder = new StringBuilder(str.length());
         for (int i = 0; i < str.length(); i++) {
             if (i < str.length() - 1 && (str.charAt(i) == '_' || str.charAt(i) == ' ')) {

File: querydsl-sql/src/main/java/com/mysema/query/sql/RelationalPathExtractor.java
Patch:
@@ -37,7 +37,7 @@
  * @author tiwe
  *
  */
-public class RelationalPathExtractor implements Visitor<Set<RelationalPath<?>>, Set<RelationalPath<?>>> {
+public final class RelationalPathExtractor implements Visitor<Set<RelationalPath<?>>, Set<RelationalPath<?>>> {
 
     public static final RelationalPathExtractor DEFAULT = new RelationalPathExtractor();
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLExpressions.java
Patch:
@@ -114,7 +114,7 @@ public static BooleanExpression all(BooleanExpression expr) {
      * @param sequence
      * @return
      */
-    public static final SimpleExpression<Long> nextval(String sequence) {
+    public static SimpleExpression<Long> nextval(String sequence) {
         return nextval(Long.class, sequence);
     }
 
@@ -125,7 +125,7 @@ public static final SimpleExpression<Long> nextval(String sequence) {
      * @param sequence
      * @return
      */
-    public static final <T extends Number> SimpleExpression<T> nextval(Class<T> type, String sequence) {
+    public static <T extends Number> SimpleExpression<T> nextval(Class<T> type, String sequence) {
         return SimpleOperation.create(type, SQLOps.NEXTVAL, ConstantImpl.create(sequence));
     }
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLMergeClause.java
Patch:
@@ -294,8 +294,7 @@ private List<?> getIds() {
                 query.where(ExpressionUtils.eq(columns.get(i),(Expression)values.get(i)));
             }
         }
-        List<?> ids = query.list(keys.get(0));
-        return ids;
+        return query.list(keys.get(0));
     }
 
     @SuppressWarnings("unchecked")

File: querydsl-sql/src/main/java/com/mysema/query/sql/WindowOver.java
Patch:
@@ -41,6 +41,9 @@ public WindowOver(Class<T> type, Operator<? super T> op, Expression<?> arg1, Exp
         super(type, op, ImmutableList.<Expression<?>>of(arg1, arg2));
     }
 
+    /**
+     * @return
+     */
     public WindowFunction<T> over() {
         return new WindowFunction<T>(this);
     }

File: querydsl-sql/src/test/java/com/mysema/query/sql/WindowFunctionTest.java
Patch:
@@ -45,11 +45,11 @@ public void Rows_Between() {
         NumberPath<Integer> intPath = Expressions.numberPath(Integer.class, "intPath");
         WindowFunction<Long> wf = SQLExpressions.sum(path).over().orderBy(path);
 
-        assertEquals("sum(path) over (order by path rows current row and unbounded following)",
+        assertEquals("sum(path) over (order by path rows between current row and unbounded following)",
                 toString(wf.rows().between().currentRow().unboundedFollowing()));
-        assertEquals("sum(path) over (order by path rows preceding intPath and following intPath)",
+        assertEquals("sum(path) over (order by path rows between preceding intPath and following intPath)",
                 toString(wf.rows().between().preceding(intPath).following(intPath)));
-        assertEquals("sum(path) over (order by path rows preceding ? and following ?)",
+        assertEquals("sum(path) over (order by path rows between preceding ? and following ?)",
                 toString(wf.rows().between().preceding(1).following(3)));
     }
 

File: querydsl-apt/src/main/java/com/mysema/query/apt/roo/RooAnnotationProcessor.java
Patch:
@@ -47,8 +47,8 @@ protected Configuration createConfiguration(RoundEnvironment roundEnv) {
         Class<? extends Annotation> embeddable = Embeddable.class;
         Class<? extends Annotation> embedded = Embedded.class;
         Class<? extends Annotation> skip = Transient.class;
-        DefaultConfiguration conf = new JPAConfiguration(roundEnv, processingEnv.getOptions(), entity, superType,
-                embeddable, embedded, skip);
+        DefaultConfiguration conf = new JPAConfiguration(roundEnv, processingEnv.getOptions(),
+                entity, superType, embeddable, embedded, skip);
         conf.setAlternativeEntityAnnotation(RooJpaActiveRecord.class);
         return conf;
     }

File: querydsl-sql/src/test/java/com/mysema/query/SelectBase.java
Patch:
@@ -1340,7 +1340,7 @@ public void SumOver() throws SQLException{
             .list(e.lastname, e.salary,
                SQLExpressions.sum(e.salary).over().partitionBy(e.superiorId).orderBy(e.lastname, e.salary),
                SQLExpressions.sum(e.salary).over().orderBy(e.superiorId, e.salary),
-               SQLExpressions.sum(e.salary));
+               SQLExpressions.sum(e.salary).over());
     }
 
 

File: querydsl-sql/src/test/java/com/mysema/query/SelectBase.java
Patch:
@@ -1362,7 +1362,7 @@ public void SumOver() throws SQLException{
             .list(e.lastname, e.salary,
                SQLExpressions.sum(e.salary).over().partitionBy(e.superiorId).orderBy(e.lastname, e.salary),
                SQLExpressions.sum(e.salary).over().orderBy(e.superiorId, e.salary),
-               SQLExpressions.sum(e.salary));
+               SQLExpressions.sum(e.salary).over());
     }
 
 

File: querydsl-lucene3/src/main/java/com/mysema/query/lucene/LuceneOps.java
Patch:
@@ -24,11 +24,11 @@ public final class LuceneOps {
 
     private static final String NS = LuceneOps.class.getName();
 
-    static final Operator<Object> LUCENE_QUERY = new OperatorImpl<Object>(NS, "LUCENE_QUERY");
+    static final Operator<Object> LUCENE_QUERY = new OperatorImpl<Object>(NS, "QUERY");
 
-    static final Operator<String> PHRASE = new OperatorImpl<String>(NS, "LUCENE_PHRASE");
+    static final Operator<String> PHRASE = new OperatorImpl<String>(NS, "PHRASE");
 
-    static final Operator<String> TERM = new OperatorImpl<String>(NS, "LUCENE_TERM");
+    static final Operator<String> TERM = new OperatorImpl<String>(NS, "TERM");
 
     private LuceneOps() {}
 

File: querydsl-lucene4/src/main/java/com/mysema/query/lucene/LuceneOps.java
Patch:
@@ -24,11 +24,11 @@ public final class LuceneOps {
 
     private static final String NS = LuceneOps.class.getName();
 
-    static final Operator<Object> LUCENE_QUERY = new OperatorImpl<Object>(NS, "LUCENE_QUERY");
+    static final Operator<Object> LUCENE_QUERY = new OperatorImpl<Object>(NS, "QUERY");
 
-    static final Operator<String> PHRASE = new OperatorImpl<String>(NS, "LUCENE_PHRASE");
+    static final Operator<String> PHRASE = new OperatorImpl<String>(NS, "PHRASE");
 
-    static final Operator<String> TERM = new OperatorImpl<String>(NS, "LUCENE_TERM");
+    static final Operator<String> TERM = new OperatorImpl<String>(NS, "TERM");
 
     private LuceneOps() {}
 

File: querydsl-mongodb/src/main/java/com/mysema/query/mongodb/MongodbOps.java
Patch:
@@ -24,9 +24,9 @@ public final class MongodbOps {
 
     private static final String NS = MongodbOps.class.getName();
 
-    public static final Operator<Boolean> NEAR = new OperatorImpl<Boolean>(NS, "MONGODB_NEAR");
+    public static final Operator<Boolean> NEAR = new OperatorImpl<Boolean>(NS, "NEAR");
 
-    public static final Operator<Boolean> ELEM_MATCH = new OperatorImpl<Boolean>(NS, "MONGODB_ELEM_MATCH");
+    public static final Operator<Boolean> ELEM_MATCH = new OperatorImpl<Boolean>(NS, "ELEM_MATCH");
 
     private MongodbOps() {}
 

File: querydsl-core/src/main/java/com/mysema/query/types/Ops.java
Patch:
@@ -45,6 +45,8 @@ public final class Ops {
 
     public static final Operator<Object>  LIST = new OperatorImpl<Object>(NS, "LIST");
 
+    public static final Operator<Object>  SINGLETON = new OperatorImpl<Object>(NS, "SINGLETON");
+
     public static final Operator<Integer> ORDINAL = new OperatorImpl<Integer>(NS, "ORDINAL");
 
     public static final Operator<Object>  WRAPPED = new OperatorImpl<Object>(NS, "WRAPPED");

File: querydsl-core/src/main/java/com/mysema/query/types/Templates.java
Patch:
@@ -45,6 +45,7 @@ protected Templates(char escape) {
         //CHECKSTYLE:OFF
 
         add(Ops.LIST, "{0}, {1}", 40);
+        add(Ops.SINGLETON, "{0}", 40);
         add(Ops.WRAPPED, "({0})");
 
         // boolean

File: querydsl-sql/src/test/java/com/mysema/query/SelectBase.java
Patch:
@@ -577,7 +577,7 @@ public void Full_Join() throws SQLException {
     }
 
     @Test
-    public void getResultSet() throws IOException, SQLException{
+    public void GetResultSet() throws IOException, SQLException{
         ResultSet results = query().from(survey).getResults(survey.id, survey.name);
         while(results.next()) {
             System.out.println(results.getInt(1) +","+results.getString(2));

File: querydsl-sql/src/main/java/com/mysema/query/sql/JDBCTypeMapping.java
Patch:
@@ -115,8 +115,8 @@ private Class<?> getNumericClass(int size, int digits) {
         Pair<Integer,Integer> key = Pair.of(size, digits);
         if (numericTypes.containsKey(key)) {
             return numericTypes.get(key);
-        } else if (digits == 0) {
-            if (size > 18) {
+        } else if (digits <= 0) {
+            if (size > 18 || size == 0) {
                 return Long.class;
             } else if (size > 5) {
                 return Integer.class;

File: querydsl-sql/src/test/java/com/mysema/query/sql/JDBCTypeMappingTest.java
Patch:
@@ -75,7 +75,7 @@ public void NumericTypes() {
         assertEquals(typeMapping.get(Types.NUMERIC, 3, 0),  Short.class);
         assertEquals(typeMapping.get(Types.NUMERIC, 2, 0),  Byte.class);
         assertEquals(typeMapping.get(Types.NUMERIC, 1, 0),  Boolean.class);
-        assertEquals(typeMapping.get(Types.NUMERIC, 0, 0),  Boolean.class);
+        assertEquals(typeMapping.get(Types.NUMERIC, 0, 0),  Long.class);
 
         assertEquals(typeMapping.get(Types.NUMERIC, 17, 2), BigDecimal.class);
         assertEquals(typeMapping.get(Types.NUMERIC, 5, 2),  Double.class);

File: querydsl-codegen/src/main/java/com/mysema/query/codegen/EmbeddableSerializer.java
Patch:
@@ -93,7 +93,7 @@ protected void introClassHeader(CodeWriter writer, EntityType model) throws IOEx
         }
 
         // TODO : generate proper serialVersionUID here
-        writer.privateStaticFinal(Types.LONG_P, "serialVersionUID", String.valueOf(model.hashCode()));
+        writer.privateStaticFinal(Types.LONG_P, "serialVersionUID", String.valueOf(model.hashCode()) + "L");
     }
 
     @Override

File: querydsl-codegen/src/main/java/com/mysema/query/codegen/EmbeddableSerializer.java
Patch:
@@ -93,7 +93,7 @@ protected void introClassHeader(CodeWriter writer, EntityType model) throws IOEx
         }
 
         // TODO : generate proper serialVersionUID here
-        writer.privateStaticFinal(Types.LONG_P, "serialVersionUID", String.valueOf(model.hashCode()));
+        writer.privateStaticFinal(Types.LONG_P, "serialVersionUID", String.valueOf(model.hashCode()) + "L");
     }
 
     @Override

File: querydsl-codegen/src/main/java/com/mysema/query/codegen/EntitySerializer.java
Patch:
@@ -342,7 +342,7 @@ protected void introClassHeader(CodeWriter writer, EntityType model) throws IOEx
 
         // TODO : generate proper serialVersionUID here
         long serialVersionUID = model.getFullName().hashCode();
-        writer.privateStaticFinal(Types.LONG_P, "serialVersionUID", String.valueOf(serialVersionUID));
+        writer.privateStaticFinal(Types.LONG_P, "serialVersionUID", String.valueOf(serialVersionUID) + "L");
     }
 
     protected void introDefaultInstance(CodeWriter writer, EntityType model, String defaultName) throws IOException {

File: querydsl-codegen/src/main/java/com/mysema/query/codegen/ProjectionSerializer.java
Patch:
@@ -71,7 +71,7 @@ protected void intro(EntityType model, CodeWriter writer) throws IOException {
 //        writer.suppressWarnings("serial");
         Type superType = new ClassType(TypeCategory.SIMPLE, ConstructorExpression.class, model);
         writer.beginClass(queryType, superType);
-        writer.privateStaticFinal(Types.LONG_P, "serialVersionUID", String.valueOf(model.hashCode()));
+        writer.privateStaticFinal(Types.LONG_P, "serialVersionUID", String.valueOf(model.hashCode()) + "L");
     }
 
     protected void outro(EntityType model, CodeWriter writer) throws IOException {

File: src/test/java/com/mysema/codegen/ScalaWriterTest.java
Patch:
@@ -377,7 +377,7 @@ public void Primitive() throws IOException {
 
         System.out.println(w);
 
-        assertTrue(w.toString().contains("public JavaWriterTest(a: Int) {"));
+        assertTrue(w.toString().contains("def this(a: Int) {"));
     }
 
     @Test

File: src/test/java/com/mysema/codegen/ScalaWriterTest.java
Patch:
@@ -377,7 +377,7 @@ public void Primitive() throws IOException {
 
         System.out.println(w);
 
-        assertTrue(w.toString().contains("public JavaWriterTest(a: Int) {"));
+        assertTrue(w.toString().contains("def this(a: Int) {"));
     }
 
     @Test

File: querydsl-jpa/src/test/java/com/mysema/query/AbstractJPATest.java
Patch:
@@ -1141,6 +1141,7 @@ public void Substring() {
 
     @Test
     @NoBatooJPA
+    @ExcludeIn(ORACLE)
     public void Substring2() {
         QCompany company = QCompany.company;
         StringExpression name = company.name;

File: querydsl-sql/src/main/java/com/mysema/query/sql/OracleTemplates.java
Patch:
@@ -81,6 +81,8 @@ public OracleTemplates(char escape, boolean quote) {
         add(Ops.MATCHES, "regexp_like({0},{1})");
         add(Ops.StringOps.LOCATE, "instr({1},{0})");
         add(Ops.StringOps.LOCATE2, "instr({1},{0},{2s})");
+        add(Ops.StringOps.LEFT, "substr({0},1,{1})");
+        add(Ops.StringOps.RIGHT, "substr({0},-{1s},length({0}))");
 
         // Number
         add(Ops.MathOps.CEIL, "ceil({0})");

File: querydsl-sql/src/test/java/com/mysema/query/SelectBase.java
Patch:
@@ -748,7 +748,7 @@ public void Limit_and_Offset_In_Oracle() throws SQLException {
         query().from(employee).offset(3).list(employee.id);
 
         // limit offset
-        expectedQuery =  "select * from (  select a.*, rownum rn from (   select e.ID from EMPLOYEE e  ) a) where rn > 3 and rn <= 7";
+        expectedQuery =  "select * from (  select a.*, rownum rn from (   select e.ID from EMPLOYEE e  ) a) where rn > 3 and rownum <= 4";
         query().from(employee).limit(4).offset(3).list(employee.id);
     }
 

File: querydsl-jpa/src/test/java/com/mysema/query/AbstractJPATest.java
Patch:
@@ -1140,6 +1140,7 @@ public void Substring() {
     }
 
     @Test
+    @NoBatooJPA
     public void Substring2() {
         QCompany company = QCompany.company;
         StringExpression name = company.name;

File: querydsl-sql/src/test/java/com/mysema/query/InsertBase.java
Patch:
@@ -116,6 +116,7 @@ public void Insert_Null_With_Columns() {
     }
 
     @Test
+    @ExcludeIn(DERBY)
     public void Insert_Null_Without_Columns() {
         assertEquals(1, insert(survey)
                 .values(4, null, null).execute());

File: querydsl-sql/src/test/java/com/mysema/query/MergeBase.java
Patch:
@@ -16,6 +16,7 @@
 import static com.mysema.query.Constants.survey;
 import static com.mysema.query.Constants.survey2;
 import static com.mysema.query.Target.CUBRID;
+import static com.mysema.query.Target.DERBY;
 import static com.mysema.query.Target.H2;
 import static com.mysema.query.Target.POSTGRES;
 import static org.junit.Assert.assertEquals;
@@ -101,7 +102,7 @@ public void Merge_with_Keys_Columns_and_Values_using_null() {
     }
 
     @Test
-    @ExcludeIn({CUBRID, POSTGRES})
+    @ExcludeIn({CUBRID, DERBY, POSTGRES})
     public void Merge_With_Keys_Null_Id() throws SQLException{
         ResultSet rs = merge(survey).keys(survey.id)
                 .setNull(survey.id)

File: querydsl-sql/src/test/java/com/mysema/query/SelectBase.java
Patch:
@@ -468,7 +468,7 @@ public void Date_Diff2() {
         Date date = new Date(0);
         int years = query.singleResult(SQLExpressions.datediff(DatePart.year, date, employee.datefield));
         int months = query.singleResult(SQLExpressions.datediff(DatePart.month, date, employee.datefield));
-        // weeeks
+        // weeks
         int days = query.singleResult(SQLExpressions.datediff(DatePart.day, date, employee.datefield));
         int hours = query.singleResult(SQLExpressions.datediff(DatePart.hour, date, employee.datefield));
         int minutes = query.singleResult(SQLExpressions.datediff(DatePart.minute, date, employee.datefield));
@@ -1374,6 +1374,7 @@ public void Tuple_Projection() {
     }
 
     @Test
+    @ExcludeIn(DERBY)
     public void Tuple2() {
         query().from(employee)
             .list(Expressions.as(ConstantImpl.create("1"),"code"),

File: querydsl-core/src/main/java/com/mysema/query/types/QTuple.java
Patch:
@@ -54,8 +54,8 @@ public class QTuple extends ExpressionBase<Tuple> implements FactoryExpression<T
     private static final ImmutableList<Expression<?>> createBindings(List<Expression<?>> exprs) {
         ImmutableList.Builder<Expression<?>> builder = ImmutableList.builder();
         for (Expression<?> e : exprs) {
-            if (e instanceof Operation && ((Operation)e).getOperator() == Ops.ALIAS) {
-                builder.add(((Operation)e).getArg(1));
+            if (e instanceof Operation && ((Operation<?>)e).getOperator() == Ops.ALIAS) {
+                builder.add(((Operation<?>)e).getArg(1));
             } else {
                 builder.add(e);
             }

File: querydsl-sql/src/main/java/com/mysema/query/sql/OracleTemplates.java
Patch:
@@ -46,7 +46,7 @@ protected SQLTemplates build(char escape, boolean quote) {
 
     private String limitQueryEnd = "\n) where rownum <= {0}";
 
-    private String limitOffsetTemplate = "rn > {0s} and rn <= {1s}";
+    private String limitOffsetTemplate = "rn > {0s} and rownum <= {1s}";
 
     private String offsetTemplate = "rn > {0}";
 
@@ -149,7 +149,7 @@ public void serialize(QueryMetadata metadata, boolean forCountRow, SQLSerializer
                 if (mod.getLimit() == null) {
                     context.handle(offsetTemplate, mod.getOffset());
                 } else {
-                    context.handle(limitOffsetTemplate, mod.getOffset(), mod.getLimit() + mod.getOffset());
+                    context.handle(limitOffsetTemplate, mod.getOffset(), mod.getLimit());
                 }
             }
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/OracleTemplates.java
Patch:
@@ -46,7 +46,7 @@ protected SQLTemplates build(char escape, boolean quote) {
 
     private String limitQueryEnd = "\n) where rownum <= {0}";
 
-    private String limitOffsetTemplate = "rn > {0s} and rn <= {1s}";
+    private String limitOffsetTemplate = "rn > {0s} and rownum <= {1s}";
 
     private String offsetTemplate = "rn > {0}";
 
@@ -149,7 +149,7 @@ public void serialize(QueryMetadata metadata, boolean forCountRow, SQLSerializer
                 if (mod.getLimit() == null) {
                     context.handle(offsetTemplate, mod.getOffset());
                 } else {
-                    context.handle(limitOffsetTemplate, mod.getOffset(), mod.getLimit() + mod.getOffset());
+                    context.handle(limitOffsetTemplate, mod.getOffset(), mod.getLimit());
                 }
             }
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/JDBCTypeMapping.java
Patch:
@@ -122,7 +122,7 @@ private Class<?> getNumericClass(int size, int digits) {
                 return Integer.class;
             } else if (size > 2) {
                 return Short.class;
-            } else if (size > 0) {
+            } else if (size > 1) {
                 return Byte.class;
             } else {
                 return Boolean.class;

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/hibernate/sql/AbstractHibernateSQLQuery.java
Patch:
@@ -57,7 +57,7 @@
  * @param <Q>
  */
 @SuppressWarnings("rawtypes")
-public abstract class AbstractHibernateSQLQuery<Q extends AbstractHibernateSQLQuery<Q> & com.mysema.query.Query> extends AbstractSQLQuery<Q> {
+public abstract class AbstractHibernateSQLQuery<Q extends AbstractHibernateSQLQuery<Q> & com.mysema.query.Query<Q>> extends AbstractSQLQuery<Q> {
 
     private static final Logger logger = LoggerFactory.getLogger(AbstractHibernateSQLQuery.class);
 

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/sql/AbstractJPASQLQuery.java
Patch:
@@ -55,7 +55,7 @@
  *
  * @param <Q>
  */
-public abstract class AbstractJPASQLQuery<Q extends AbstractJPASQLQuery<Q> & com.mysema.query.Query> extends AbstractSQLQuery<Q> {
+public abstract class AbstractJPASQLQuery<Q extends AbstractJPASQLQuery<Q> & com.mysema.query.Query<Q>> extends AbstractSQLQuery<Q> {
 
     private static final Logger logger = LoggerFactory.getLogger(AbstractJPASQLQuery.class);
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/BlobType.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Copyright 2011, Mysema Ltd
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
@@ -20,6 +20,8 @@
 import java.sql.Types;
 
 /**
+ * BlobType maps Blob to Blob on the JDBC level
+ *
  * @author tiwe
  *
  */

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/EnumAsObjectType.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Copyright 2012, Mysema Ltd
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
@@ -19,6 +19,8 @@
 import java.sql.Types;
 
 /**
+ * EnumAsObjectType maps Enum types to Object on the JDBC level
+ *
  * @author tiwe
  *
  * @param <T>

File: querydsl-jpa/src/test/java/com/mysema/query/AbstractJPATest.java
Patch:
@@ -1221,6 +1221,7 @@ public void TupleProjection_As_SearchResults() {
     }
 
     @Test
+    @ExcludeIn(Target.DERBY)
     public void Transform_GroupBy() {
         QCat kitten = new QCat("kitten");
         query().from(cat).innerJoin(cat.kittens, kitten)

File: querydsl-collections/src/main/java/com/mysema/query/collections/DefaultQueryEngine.java
Patch:
@@ -96,7 +96,7 @@ public <T> List<T> list(QueryMetadata metadata, Map<Expression<?>, Iterable<?>>
 
     private <T> List<T> distinct(List<T> list) {
         List<T> rv = new ArrayList<T>(list.size());
-        if (!list.isEmpty() && list.get(0).getClass().isArray()) {
+        if (!list.isEmpty() && list.get(0) != null && list.get(0).getClass().isArray()) {
             Set set = new HashSet(list.size());
             for (T o : list) {
                 if (set.add(ImmutableList.copyOf((Object[])o))) {

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/JPQLSerializerTest.java
Patch:
@@ -150,7 +150,7 @@ public void NullsFirst() {
         serializer.serialize(md, false, null);
         assertEquals("select cat\n" +
         	     "from Cat cat\n" +
-        	     "order by cat.name is not null, cat.name asc", serializer.toString());
+        	     "order by cat.name asc nulls first", serializer.toString());
     }
 
     @Test
@@ -163,6 +163,6 @@ public void NullsLast() {
         serializer.serialize(md, false, null);
         assertEquals("select cat\n" +
                      "from Cat cat\n" +
-                     "order by cat.name is null, cat.name asc", serializer.toString());
+                     "order by cat.name asc nulls last", serializer.toString());
     }
 }

File: querydsl-jpa/src/test/java/com/mysema/query/AbstractStandardTest.java
Patch:
@@ -418,6 +418,7 @@ public void Constant() {
     }
 
     @Test
+    @NoHibernate
     public void Constant2() {
         query().from(cat).map(cat.id,  Expressions.constant("name"));
     }

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/QueryMutabilityTest.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Copyright 2011, Mysema Ltd
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
@@ -39,6 +39,7 @@ public class QueryMutabilityTest{
     protected HibernateSQLQuery query() {
         return new HibernateSQLQuery(session, derbyTemplates);
     }
+
     public void setSession(Session session) {
         this.session = session;
     }

File: querydsl-sql/src/test/java/com/mysema/query/sql/SQLServer2005TemplatesTest.java
Patch:
@@ -64,7 +64,7 @@ public void Union() {
     public void Limit() {
         query.from(survey1).limit(5);
         query.getMetadata().addProjection(survey1.id);
-        assertEquals("select top 5 survey1.ID from SURVEY survey1", query.toString());
+        assertEquals("select top (?) survey1.ID from SURVEY survey1", query.toString());
     }
 
     @Test

File: querydsl-sql/src/test/java/com/mysema/query/InsertBase.java
Patch:
@@ -45,7 +45,7 @@
 import com.mysema.testutil.ExcludeIn;
 import com.mysema.testutil.IncludeIn;
 
-public class InsertBase extends AbstractBaseTest{
+public class InsertBase extends AbstractBaseTest {
 
     private void reset() throws SQLException{
         delete(survey).execute();
@@ -178,8 +178,8 @@ public void Like_with_Escape() {
         insert.set(survey.id, 7).set(survey.name, "a%").addBatch();
         assertEquals(3, insert.execute());
 
-        assertEquals(1l, query().from(survey).where(survey.name.like("a\\%", '\\')).count());
-        assertEquals(1l, query().from(survey).where(survey.name.like("a\\_", '\\')).count());
+        assertEquals(1l, query().from(survey).where(survey.name.like("a|%", '|')).count());
+        assertEquals(1l, query().from(survey).where(survey.name.like("a|_", '|')).count());
         assertEquals(3l, query().from(survey).where(survey.name.like("a%")).count());
         assertEquals(2l, query().from(survey).where(survey.name.like("a_")).count());
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/OracleTemplates.java
Patch:
@@ -38,14 +38,14 @@ protected SQLTemplates build(char escape, boolean quote) {
         };
     }
 
-    private String outerQueryEnd = "\n ) a) where ";
-
     private String outerQueryStart = "select * from (\n select a.*, rownum rn from (\n  ";
 
-    private String limitQueryEnd = "\n) where rownum <= {0}";
+    private String outerQueryEnd = "\n ) a) where ";
 
     private String limitQueryStart = "select * from (\n  ";
 
+    private String limitQueryEnd = "\n) where rownum <= {0}";
+
     private String limitOffsetTemplate = "rn > {0s} and rn <= {1s}";
 
     private String offsetTemplate = "rn > {0}";

File: querydsl-sql-codegen/src/main/java/com/mysema/query/sql/codegen/DefaultNamingStrategy.java
Patch:
@@ -95,17 +95,17 @@ public String getPropertyNameForPrimaryKey(String pkName, EntityType entityType)
 
     @Override
     public String normalizeColumnName(String columnName) {
-        return columnName;
+        return columnName.replaceAll("\r", "").replaceAll("\n", " ");
     }
 
     @Override
     public String normalizeTableName(String tableName) {
-        return tableName;
+        return tableName.replaceAll("\r", "").replaceAll("\n", " ");
     }
 
     @Override
     public String normalizeSchemaName(String schemaName) {
-        return schemaName;
+        return schemaName.replaceAll("\r", "").replaceAll("\n", " ");
     }
     
     protected String normalizePropertyName(String name) {

File: querydsl-maven-plugin/src/main/java/com/mysema/query/maven/AbstractMetaDataExportMojo.java
Patch:
@@ -158,7 +158,7 @@ public class AbstractMetaDataExportMojo extends AbstractMojo{
     private boolean innerClassesForKeys;
 
     /**
-     * export validation annotations (default: true)
+     * export validation annotations (default: false)
      *
      * @parameter default-value=false
      */

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLTemplates.java
Patch:
@@ -56,9 +56,9 @@ public class SQLTemplates extends Templates {
     
     public static final Operator<Object> LASTVALUE = new OperatorImpl<Object>("LASTVALUE");
     
-    public static final Operator<Object> LEAD = new OperatorImpl<Object>("LAST");
+    public static final Operator<Object> LEAD = new OperatorImpl<Object>("LEAD");
     
-    public static final Operator<Object> LAG = new OperatorImpl<Object>("LAST");
+    public static final Operator<Object> LAG = new OperatorImpl<Object>("LAG");
     
     public static final SQLTemplates DEFAULT = new SQLTemplates("\"",'\\',false);
     

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLServerTemplates.java
Patch:
@@ -26,7 +26,7 @@
  * @author tiwe
  *
  */
-public class SQLServerTemplates extends SQLTemplates{
+public class SQLServerTemplates extends SQLTemplates {
     
     public static Builder builder() {
         return new Builder() {
@@ -53,6 +53,7 @@ public SQLServerTemplates(char escape, boolean quote) {
         setDummyTable("");
 
         // String
+        add(Ops.CONCAT, "{0} + {1}", 13);
         add(Ops.CHAR_AT, "cast(substring({0},{1}+1,1) as char)");
         add(Ops.INDEX_OF, "charindex({1},{0})-1");
         add(Ops.INDEX_OF_2ARGS, "charindex({1},{0},{2})-1");

File: querydsl-mongodb/src/main/java/com/mysema/query/mongodb/Point.java
Patch:
@@ -24,7 +24,7 @@
  * @author tiwe
  *
  */
-public class Point extends ArrayPath<Double> {
+public class Point extends ArrayPath<Double[], Double> {
 
     private static final long serialVersionUID = 1776628530121566388L;
 

File: querydsl-apt/src/test/java/com/mysema/query/domain/Array2Test.java
Patch:
@@ -3,10 +3,11 @@
 import org.junit.Test;
 
 import com.mysema.query.annotations.QueryProjection;
+import com.mysema.query.types.path.SimplePath;
 
 public class Array2Test {
     
-    public class Example {
+    public static class Example {
     
         byte[] imageData;
 
@@ -18,7 +19,7 @@ public Example(byte[] imageData) {
 
     @Test
     public void test() {
-        
+        new QArray2Test_Example(new SimplePath<byte[]>(byte[].class, "bytes")).newInstance(new byte[0]);
     }
 
 }

File: querydsl-codegen/src/main/java/com/mysema/query/codegen/JavaTypeMappings.java
Patch:
@@ -63,7 +63,7 @@ public JavaTypeMappings() {
         register(TypeCategory.NUMERIC,    NumberExpression.class,     NumberPath.class,     NumberTemplate.class);
         register(TypeCategory.SIMPLE,     Expression.class,           SimplePath.class,     SimpleTemplate.class);
 
-        register(TypeCategory.ARRAY,      Expression.class,           ArrayPath.class,      SimpleTemplate.class);
+        register(TypeCategory.ARRAY,      Expression.class,           SimplePath.class,     SimpleTemplate.class);
         register(TypeCategory.COLLECTION, Expression.class,           SimplePath.class,     SimpleTemplate.class);
         register(TypeCategory.SET,        Expression.class,           SimplePath.class,     SimpleTemplate.class);
         register(TypeCategory.LIST,       Expression.class,           SimplePath.class,     SimpleTemplate.class);

File: querydsl-codegen/src/test/java/com/mysema/query/codegen/Point.java
Patch:
@@ -18,7 +18,7 @@
 import com.mysema.query.types.path.ArrayPath;
 
 
-public class Point extends ArrayPath<Double>{
+public class Point extends ArrayPath<Double[], Double>{
 
     private static final long serialVersionUID = 1776628530121566388L;
 

File: querydsl-core/src/main/java/com/mysema/query/alias/Alias.java
Patch:
@@ -71,8 +71,8 @@ public final class Alias {
         return aliasFactory.<D>getCurrentAndReset();
     }
 
-    public static <D> ArrayPath<D> $(D[] arg) {
-    return aliasFactory.<ArrayPath<D>> getCurrentAndReset();
+    public static <D> ArrayPath<D[], D> $(D[] arg) {
+        return aliasFactory.<ArrayPath<D[], D>> getCurrentAndReset();
     }
 
     public static NumberPath<BigDecimal> $(BigDecimal arg) {

File: querydsl-core/src/main/java/com/mysema/query/alias/DefaultPathFactory.java
Patch:
@@ -47,7 +47,7 @@ public class DefaultPathFactory implements PathFactory {
 
     @Override
     public <T> Path<T[]> createArrayPath(Class<T[]> arrayType, PathMetadata<?> metadata) {
-        return new ArrayPath<T>(arrayType, metadata);
+        return new ArrayPath<T[], T>(arrayType, metadata);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ArrayExpression.java
Patch:
@@ -22,9 +22,10 @@
  *
  * @author tiwe
  *
+ * @param <A> array type
  * @param <T> array element type
  */
-public interface ArrayExpression<T> extends Expression<T[]> {
+public interface ArrayExpression<A, T> extends Expression<A> {
 
     /**
      * Get the size of the array

File: querydsl-core/src/main/java/com/mysema/query/types/path/BeanPath.java
Patch:
@@ -135,8 +135,8 @@ protected <P extends Path<?>> P add(P path) {
      * @param type
      * @return
      */
-    protected <A> ArrayPath<A> createArray(String property, Class<? super A[]> type) {
-        return add(new ArrayPath<A>(type, forProperty(property)));
+    protected <A, E> ArrayPath<A, E> createArray(String property, Class<? super A> type) {
+        return add(new ArrayPath<A, E>(type, forProperty(property)));
     }
 
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathBuilder.java
Patch:
@@ -110,11 +110,12 @@ public <A> PathBuilder<A> get(String property, Class<A> type) {
      * Get a PArray instance for the given property and the given array type
      *
      * @param <A>
+     * @param <E>
      * @param property property name
      * @param type
      * @return
      */
-    public <A> ArrayPath<A> getArray(String property, Class<A[]> type) {
+    public <A, E> ArrayPath<A, E> getArray(String property, Class<A> type) {
         validate(property);
         return super.createArray(property, type);
     }

File: querydsl-core/src/test/java/com/mysema/query/FilterFactory.java
Patch:
@@ -80,7 +80,7 @@ public <A> Collection<Predicate> collection(CollectionExpressionBase<?,A> expr,
         return ImmutableList.copyOf(rv);
     }
 
-    public <A> Collection<Predicate> array(ArrayExpression<A> expr, ArrayExpression<A> other, 
+    public <A> Collection<Predicate> array(ArrayExpression<A[], A> expr, ArrayExpression<A[], A> other, 
             A knownElement) {
         HashSet<Predicate> rv = new HashSet<Predicate>();
         if (!module.equals(Module.RDFBEAN)) {

File: querydsl-core/src/test/java/com/mysema/query/MatchingFiltersFactory.java
Patch:
@@ -51,8 +51,8 @@ public MatchingFiltersFactory(Module module, Target target) {
         this.target = target;
     }
 
-    public <A> Collection<Predicate> array(ArrayExpression<A> expr,  
-            ArrayExpression<A> other, A knownElement, A missingElement) {
+    public <A> Collection<Predicate> array(ArrayExpression<A[], A> expr,  
+            ArrayExpression<A[], A> other, A knownElement, A missingElement) {
         HashSet<Predicate> rv = new HashSet<Predicate>();
 //        rv.add(expr.isEmpty().not());
         if (!module.equals(Module.RDFBEAN)) {

File: querydsl-core/src/test/java/com/mysema/query/ProjectionsFactory.java
Patch:
@@ -50,7 +50,7 @@ public ProjectionsFactory(Module module, Target target) {
         this.target = target;
     }
 
-    public <A> Collection<Expression<?>> array(ArrayExpression<A> expr, ArrayExpression<A> other, A knownElement) {
+    public <A> Collection<Expression<?>> array(ArrayExpression<A[], A> expr, ArrayExpression<A[], A> other, A knownElement) {
         HashSet<Expression<?>> rv = new HashSet<Expression<?>>();
         if (!module.equals(Module.RDFBEAN)) {
             rv.add(expr.size());

File: querydsl-core/src/test/java/com/mysema/query/QueryExecution.java
Patch:
@@ -286,7 +286,7 @@ public final QueryExecution noCounts() {
         return this;
     }
 
-    public final <A> void runArrayTests(ArrayExpression<A> expr, ArrayExpression<A> other, A knownElement, A missingElement) {
+    public final <A> void runArrayTests(ArrayExpression<A[], A> expr, ArrayExpression<A[], A> other, A knownElement, A missingElement) {
         runFilterQueries(matchers.array(expr, other, knownElement, missingElement), true);
         runFilterQueries(filters.array(expr, other, knownElement), false);
         runProjectionQueries(projections.array(expr, other, knownElement));

File: querydsl-core/src/test/java/com/mysema/query/types/path/ArrayPathTest.java
Patch:
@@ -24,7 +24,7 @@ public class ArrayPathTest {
 
     @Test
     public void Get() {
-        ArrayPath<String> arrayPath = new ArrayPath<String>(String[].class, "p");
+        ArrayPath<String[], String> arrayPath = new ArrayPath<String[], String>(String[].class, "p");
         assertNotNull(arrayPath.get(ConstantImpl.create(0)));
         
     }

File: querydsl-core/src/test/java/com/mysema/query/types/path/PathBuilderTest.java
Patch:
@@ -47,7 +47,7 @@ public void getByExample() {
     @Test
     public void getArray() {
         PathBuilder<User> entityPath = new PathBuilder<User>(User.class, "entity");
-        ArrayPath<String> array = entityPath.getArray("array", String[].class);
+        ArrayPath<String[], String> array = entityPath.getArray("array", String[].class);
         assertEquals(String[].class, array.getType());
         assertEquals(String.class, array.getElementType());
     }

File: querydsl-lucene4/src/test/java/com/mysema/query/LuceneSerializerTest.java
Patch:
@@ -35,7 +35,6 @@
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.store.RAMDirectory;
-import org.apache.lucene.util.NumericUtils;
 import org.apache.lucene.util.Version;
 import org.junit.After;
 import org.junit.Before;

File: querydsl-sql/src/test/java/com/mysema/query/SelectBase.java
Patch:
@@ -82,7 +82,6 @@
 import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.Coalesce;
-import com.mysema.query.types.expr.DateExpression;
 import com.mysema.query.types.expr.DateTimeExpression;
 import com.mysema.query.types.expr.MathExpressions;
 import com.mysema.query.types.expr.NumberExpression;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/DateTimeTest.java
Patch:
@@ -57,9 +57,9 @@ public void DayOfMonth2() {
     
     @Test
     public void DateOperations2() {
-        catalog.effectiveDate.second();
-        catalog.effectiveDate.minute();
-        catalog.effectiveDate.hour();
+//        catalog.effectiveDate.second();
+//        catalog.effectiveDate.minute();
+//        catalog.effectiveDate.hour();
         catalog.effectiveDate.dayOfMonth();
         catalog.effectiveDate.month();
         catalog.effectiveDate.year();

File: querydsl-sql-codegen/src/main/java/com/mysema/query/sql/codegen/MetaDataSerializer.java
Patch:
@@ -257,8 +257,8 @@ protected void serializeForeignKeys(EntityType model, CodeWriter writer,
                         local.append(", ");
                         foreign.append(", ");
                     }
-                    local.append(namingStrategy.getPropertyName(foreignKey.getForeignColumns().get(0), model));
-                    foreign.append("\"" +foreignKey.getParentColumns().get(0) + "\"");
+                    local.append(namingStrategy.getPropertyName(foreignKey.getForeignColumns().get(i), model));
+                    foreign.append("\"" +foreignKey.getParentColumns().get(i) + "\"");
                 }
                 value.append("Arrays.asList("+local+"), Arrays.asList("+foreign+")");
             }

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLServerTemplates.java
Patch:
@@ -37,7 +37,7 @@ protected SQLTemplates build(char escape, boolean quote) {
         };
     }
     
-    private String topTemplate = "top {0} "; 
+    private String topTemplate = "top {0s} "; 
 
     public SQLServerTemplates() {
         this('\\',false);

File: querydsl-collections/src/main/java/com/mysema/query/collections/CollQuerySerializer.java
Patch:
@@ -67,6 +67,7 @@ public final class CollQuerySerializer extends SerializerBase<CollQuerySerialize
         OPERATOR_SYMBOLS.put(Ops.MULT, " * ");
         OPERATOR_SYMBOLS.put(Ops.DIV, " / ");
         
+        CAST_SUFFIXES.put(Boolean.class, ".booleanValue()");
         CAST_SUFFIXES.put(Byte.class, ".byteValue()");
         CAST_SUFFIXES.put(Character.class, ".charValue()");
         CAST_SUFFIXES.put(Double.class, ".doubleValue()");

File: querydsl-maven-plugin/src/main/java/com/mysema/query/maven/AbstractExporterMojo.java
Patch:
@@ -50,7 +50,7 @@ public abstract class AbstractExporterMojo extends AbstractMojo {
     private boolean scala;
 
     /**
-     * @parameter
+     * @parameter required=true
      */
     private String[] packages;
 

File: querydsl-maven-plugin/src/main/java/com/mysema/query/maven/AbstractExporterMojo.java
Patch:
@@ -50,7 +50,7 @@ public abstract class AbstractExporterMojo extends AbstractMojo {
     private boolean scala;
 
     /**
-     * @parameter
+     * @parameter required=true
      */
     private String[] packages;
 

File: querydsl-apt/src/main/java/com/mysema/query/apt/roo/RooAnnotationProcessor.java
Patch:
@@ -35,7 +35,7 @@
  * @author tiwe
  *
  */
-@SupportedAnnotationTypes({"com.mysema.query.annotations.*","javax.persistence.*"})
+@SupportedAnnotationTypes({"com.mysema.query.annotations.*","javax.persistence.*","org.springframework.roo.addon.jpa.entity.*"})
 public class RooAnnotationProcessor extends AbstractQuerydslProcessor {
         
     @Override

File: querydsl-apt/src/main/java/com/mysema/query/apt/roo/RooAnnotationProcessor.java
Patch:
@@ -29,7 +29,7 @@
 import com.mysema.query.apt.jpa.JPAConfiguration;
 
 /**
- * AnnotationProcessor for Spring Roo which takes {@link RooEntity}, {@link MappedSuperclass}, 
+ * AnnotationProcessor for Spring Roo which takes {@link RooJpaEntity}, {@link MappedSuperclass}, 
  * {@link Embeddable} and {@link Transient} into account
  * 
  * @author tiwe

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/JPAQueryMixin.java
Patch:
@@ -71,7 +71,9 @@ public <RT> Expression<RT> convert(Expression<RT> expr) {
     
     @Override    
     protected Predicate normalize(Predicate predicate, boolean where) {
-        predicate = (Predicate) ExpressionUtils.extract(predicate);
+        if (predicate != null) {
+            predicate = (Predicate) ExpressionUtils.extract(predicate);    
+        }        
         if (predicate != null) {
             // transform any usage
             predicate = (Predicate) predicate.accept(JPACollectionAnyVisitor.DEFAULT, new Context());

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/EclipseLinkTemplates.java
Patch:
@@ -29,6 +29,8 @@ public class EclipseLinkTemplates extends JPQLTemplates {
         QueryHandler instance;
         try {
             instance = (QueryHandler) Class.forName("com.mysema.query.jpa.EclipseLinkHandler").newInstance();
+        } catch (NoClassDefFoundError e) {
+            instance = DefaultQueryHandler.DEFAULT;
         } catch (Exception e) {
             instance = DefaultQueryHandler.DEFAULT;
         }

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/HQLTemplates.java
Patch:
@@ -35,6 +35,8 @@ public class HQLTemplates extends JPQLTemplates {
         QueryHandler instance;
         try {
             instance = (QueryHandler) Class.forName("com.mysema.query.jpa.HibernateHandler").newInstance();
+        } catch (NoClassDefFoundError e) {
+            instance = DefaultQueryHandler.DEFAULT;
         } catch (Exception e) {
             instance = DefaultQueryHandler.DEFAULT;
         }

File: querydsl-apt/src/test/java/com/mysema/query/domain/Generic10Test.java
Patch:
@@ -11,21 +11,23 @@ public class Generic10Test {
     
     public interface Tradable {}
 
-    public interface Market<T> {}
+    public interface Market<T extends Tradable> {}
     
     @Entity
     public static class FutureTrade implements Tradable {}
 
     @MappedSuperclass
     public static abstract class AbstractTradingMarket<T extends Tradable> implements Market<T>{
 
+        // XXX
         @OneToOne
         private TradingMarketLedger<AbstractTradingMarket<T>> ledger;
     }
 
     @Entity
     public static abstract class AbstractFuturesMarket extends AbstractTradingMarket<FutureTrade> {}
 
+    // XXX
     @Entity
     public static class CommonFuturesMarket extends AbstractFuturesMarket {}
 

File: querydsl-codegen/src/main/java/com/mysema/query/codegen/EntityType.java
Patch:
@@ -53,7 +53,7 @@ public class EntityType extends TypeAdapter implements Comparable<EntityType> {
 
     private final Set<Supertype> superTypes;
 
-    private final Map<Object,Object> data = new HashMap<Object,Object>();
+    private final Map<Object, Object> data = new HashMap<Object,Object>();
 
     private String uncapSimpleName;
     

File: querydsl-codegen/src/main/java/com/mysema/query/codegen/TypeResolver.java
Patch:
@@ -42,7 +42,7 @@ public static Type resolve(Type type, Type declaringType, EntityType context) {
         String varName = getVarName(resolved);        
         if (varName != null) {
             resolved = resolveVar(varName, declaringType, context);
-        } else if(!resolved.getParameters().isEmpty()) {
+        } else if (!resolved.getParameters().isEmpty()) {
             resolved = resolveWithParameters(resolved, declaringType, context);
         }
         

File: querydsl-collections/src/test/java/com/mysema/query/QueryPerformanceTest.java
Patch:
@@ -7,14 +7,17 @@
 import org.junit.BeforeClass;
 import org.junit.Ignore;
 import org.junit.Test;
+import org.junit.experimental.categories.Category;
 
 import com.mysema.query.collections.Cat;
 import com.mysema.query.collections.CollQueryFactory;
 import com.mysema.query.collections.QCat;
 import com.mysema.testutil.Benchmark;
+import com.mysema.testutil.Performance;
 import com.mysema.testutil.Runner;
 
 @Ignore
+@Category(Performance.class)
 public class QueryPerformanceTest {
     
     private static final int size = 1000;

File: querydsl-core/src/test/java/com/mysema/testutil/ExternalDB.java
Patch:
@@ -1,5 +1,8 @@
 package com.mysema.testutil;
 
+/**
+ * ExternalDB is used as a test category
+ */
 public interface ExternalDB {
 
 }

File: querydsl-jpa/src/test/java/com/mysema/query/QueryPerformanceTest.java
Patch:
@@ -8,15 +8,18 @@
 import org.junit.BeforeClass;
 import org.junit.Ignore;
 import org.junit.Test;
+import org.junit.experimental.categories.Category;
 import org.junit.runner.RunWith;
 
 import com.mysema.query.jpa.domain.Cat;
 import com.mysema.query.jpa.domain.QCat;
 import com.mysema.query.jpa.impl.JPAQuery;
 import com.mysema.testutil.JPATestRunner;
+import com.mysema.testutil.Performance;
 
 @RunWith(JPATestRunner.class)
 @Ignore
+@Category(Performance.class)
 public class QueryPerformanceTest {
 
     private static final int iterations = 1000;

File: querydsl-mongodb/src/test/java/com/mysema/query/mongodb/GeoSpatialQueryTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.experimental.categories.Category;
 
 import com.google.code.morphia.Datastore;
 import com.google.code.morphia.Morphia;
@@ -28,7 +29,9 @@
 import com.mysema.query.mongodb.domain.QGeoEntity;
 import com.mysema.query.mongodb.domain.User;
 import com.mysema.query.mongodb.morphia.MorphiaQuery;
+import com.mysema.testutil.ExternalDB;
 
+@Category(ExternalDB.class)
 public class GeoSpatialQueryTest {
 
     private final String dbname = "geodb";

File: querydsl-sql/src/test/java/com/mysema/query/QueryPerformanceTest.java
Patch:
@@ -11,6 +11,7 @@
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
+import org.junit.experimental.categories.Category;
 
 import com.mysema.commons.lang.CloseableIterator;
 import com.mysema.query.sql.Configuration;
@@ -19,8 +20,10 @@
 import com.mysema.query.sql.SQLSerializer;
 import com.mysema.query.sql.SQLTemplates;
 import com.mysema.testutil.Benchmark;
+import com.mysema.testutil.Performance;
 import com.mysema.testutil.Runner;
 
+@Category(Performance.class)
 public class QueryPerformanceTest {
     
     private static final String QUERY = "select COMPANIES.NAME\n" +

File: querydsl-sql/src/test/java/com/mysema/query/sql/PerformanceTest.java
Patch:
@@ -4,12 +4,15 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.experimental.categories.Category;
 
 import com.mysema.query.DefaultQueryMetadata;
 import com.mysema.query.JoinType;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.sql.domain.QSurvey;
+import com.mysema.testutil.Performance;
 
+@Category(Performance.class)
 public class PerformanceTest {
     
     private QueryMetadata md;

File: querydsl-jpa/src/test/java/com/mysema/query/AbstractStandardTest.java
Patch:
@@ -13,6 +13,7 @@
  */
 package com.mysema.query;
 
+import static com.mysema.query.Target.DERBY;
 import static com.mysema.query.Target.MYSQL;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -1127,7 +1128,7 @@ public void List_ElementCollection_Of_String() {
     }
         
     @Test
-    @ExcludeIn(MYSQL)
+    @ExcludeIn({MYSQL, DERBY})
     @NoBatooJPA
     public void GroupBy() {
         QAuthor author = QAuthor.author;

File: querydsl-jpa/src/test/java/com/mysema/query/JPABase.java
Patch:
@@ -94,6 +94,7 @@ public void Finder() {
     }
 
     @Test
+    @ExcludeIn(Target.DERBY)
     public void Iterate() {
         CloseableIterator<Cat> cats = query().from(QCat.cat).iterate(QCat.cat);
         while (cats.hasNext()) {
@@ -129,7 +130,7 @@ public void Hint2(){
                 .list(QCat.cat).isEmpty());
     }
     
-    @Test
+    @Test @Ignore
     @NoHibernate @NoOpenJPA @NoBatooJPA
     public void Hint3() {
         javax.persistence.Query query = query().from(QCat.cat)

File: querydsl-core/src/main/java/com/mysema/query/QueryFactory.java
Patch:
@@ -13,7 +13,6 @@
  */
 package com.mysema.query;
 
-import com.mysema.query.types.query.Detachable;
 
 /**
  * Common interface for QueryFactory implementations

File: querydsl-core/src/main/java/com/mysema/query/support/DetachableAdapter.java
Patch:
@@ -15,6 +15,7 @@
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.Detachable;
 import com.mysema.query.Tuple;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Predicate;
@@ -29,7 +30,6 @@
 import com.mysema.query.types.query.ComparableSubQuery;
 import com.mysema.query.types.query.DateSubQuery;
 import com.mysema.query.types.query.DateTimeSubQuery;
-import com.mysema.query.types.query.Detachable;
 import com.mysema.query.types.query.ListSubQuery;
 import com.mysema.query.types.query.NumberSubQuery;
 import com.mysema.query.types.query.SimpleSubQuery;

File: querydsl-core/src/main/java/com/mysema/query/support/DetachableMixin.java
Patch:
@@ -15,6 +15,7 @@
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.Detachable;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.Tuple;
 import com.mysema.query.types.ConstantImpl;
@@ -34,7 +35,6 @@
 import com.mysema.query.types.query.ComparableSubQuery;
 import com.mysema.query.types.query.DateSubQuery;
 import com.mysema.query.types.query.DateTimeSubQuery;
-import com.mysema.query.types.query.Detachable;
 import com.mysema.query.types.query.ListSubQuery;
 import com.mysema.query.types.query.NumberSubQuery;
 import com.mysema.query.types.query.SimpleSubQuery;

File: querydsl-core/src/main/java/com/mysema/query/support/DetachableQuery.java
Patch:
@@ -13,6 +13,7 @@
  */
 package com.mysema.query.support;
 
+import com.mysema.query.Detachable;
 import com.mysema.query.Tuple;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Predicate;
@@ -27,7 +28,6 @@
 import com.mysema.query.types.query.ComparableSubQuery;
 import com.mysema.query.types.query.DateSubQuery;
 import com.mysema.query.types.query.DateTimeSubQuery;
-import com.mysema.query.types.query.Detachable;
 import com.mysema.query.types.query.ListSubQuery;
 import com.mysema.query.types.query.NumberSubQuery;
 import com.mysema.query.types.query.SimpleSubQuery;

File: querydsl-core/src/main/java/com/mysema/query/types/SubQueryExpression.java
Patch:
@@ -13,8 +13,8 @@
  */
 package com.mysema.query.types;
 
+import com.mysema.query.Detachable;
 import com.mysema.query.QueryMetadata;
-import com.mysema.query.types.query.Detachable;
 
 /**
  *

File: querydsl-core/src/test/java/com/mysema/query/support/DetachableAdapterTest.java
Patch:
@@ -19,9 +19,9 @@
 import org.junit.Before;
 import org.junit.Test;
 
+import com.mysema.query.Detachable;
 import com.mysema.query.alias.Alias;
 import com.mysema.query.types.EntityPath;
-import com.mysema.query.types.query.Detachable;
 
 
 @SuppressWarnings("unchecked")

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/JPQLSubQuery.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.mysema.query.jpa;
 
-import com.mysema.query.types.query.Detachable;
+import com.mysema.query.Detachable;
 
 /**
  * @author tiwe

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/FactoryExpressionTransformer.java
Patch:
@@ -11,7 +11,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.mysema.query.jpa.hibernate;
+package com.mysema.query.jpa;
 
 import java.util.List;
 
@@ -20,7 +20,7 @@
 import com.mysema.query.types.FactoryExpression;
 
 /**
- * FactoryExpressionTransformer is a ResultTransformer implementation using the EConstructor for transformation
+ * FactoryExpressionTransformer is a ResultTransformer implementation using JavaPackages for transformation
  * 
  * @author tiwe
  *

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/HibernateHandler.java
Patch:
@@ -24,8 +24,6 @@
 
 import com.mysema.commons.lang.CloseableIterator;
 import com.mysema.commons.lang.IteratorAdapter;
-import com.mysema.query.jpa.hibernate.FactoryExpressionTransformer;
-import com.mysema.query.jpa.hibernate.ScrollableResultsIterator;
 import com.mysema.query.types.FactoryExpression;
 
 /**

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/ScrollableResultsIterator.java
Patch:
@@ -11,7 +11,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.mysema.query.jpa.hibernate;
+package com.mysema.query.jpa;
 
 import java.util.NoSuchElementException;
 

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/hibernate/AbstractHibernateQuery.java
Patch:
@@ -37,9 +37,11 @@
 import com.mysema.query.QueryModifiers;
 import com.mysema.query.SearchResults;
 import com.mysema.query.Tuple;
+import com.mysema.query.jpa.FactoryExpressionTransformer;
 import com.mysema.query.jpa.HQLTemplates;
 import com.mysema.query.jpa.JPAQueryBase;
 import com.mysema.query.jpa.JPQLTemplates;
+import com.mysema.query.jpa.ScrollableResultsIterator;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.FactoryExpression;
 import com.mysema.query.types.FactoryExpressionUtils;

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/hibernate/sql/AbstractHibernateSQLQuery.java
Patch:
@@ -33,9 +33,9 @@
 import com.mysema.query.SearchResults;
 import com.mysema.query.Tuple;
 import com.mysema.query.jpa.AbstractSQLQuery;
+import com.mysema.query.jpa.FactoryExpressionTransformer;
 import com.mysema.query.jpa.NativeSQLSerializer;
 import com.mysema.query.jpa.hibernate.DefaultSessionHolder;
-import com.mysema.query.jpa.hibernate.FactoryExpressionTransformer;
 import com.mysema.query.jpa.hibernate.HibernateUtil;
 import com.mysema.query.jpa.hibernate.SessionHolder;
 import com.mysema.query.jpa.hibernate.StatelessSessionHolder;

File: querydsl-jpa/src/test/java/com/mysema/query/DependenciesTest.java
Patch:
@@ -32,7 +32,7 @@ public void test() throws IOException{
         jdepend.addDirectory("target/classes/com/mysema/query/jpa/impl");
         jdepend.addDirectory("target/classes/com/mysema/query/jpa/sql");
 
-        jdepend.analyze();    
+        jdepend.analyze();        
         assertFalse(jdepend.containsCycles());
 
     }

File: querydsl-jpa/src/test/java/com/mysema/query/HibernateBase.java
Patch:
@@ -31,11 +31,11 @@
 import com.mysema.commons.lang.CloseableIterator;
 import com.mysema.query.jpa.HQLTemplates;
 import com.mysema.query.jpa.JPQLTemplates;
+import com.mysema.query.jpa.ScrollableResultsIterator;
 import com.mysema.query.jpa.domain.Cat;
 import com.mysema.query.jpa.domain.QCat;
 import com.mysema.query.jpa.hibernate.DefaultSessionHolder;
 import com.mysema.query.jpa.hibernate.HibernateQuery;
-import com.mysema.query.jpa.hibernate.ScrollableResultsIterator;
 import com.mysema.testutil.HibernateTestRunner;
 
 /**

File: querydsl-jpa/src/test/java/com/mysema/query/JPABase.java
Patch:
@@ -82,7 +82,7 @@ public void setEntityManager(EntityManager entityManager) {
     protected void save(Object entity) {
         entityManager.persist(entity);
     }
-    
+        
     @Test
     public void Finder() {
         Map<String,Object> conditions = new HashMap<String,Object>();

File: querydsl-collections/src/main/java/com/mysema/query/collections/CollDeleteClause.java
Patch:
@@ -42,7 +42,7 @@ public CollDeleteClause(QueryEngine qe, Path<T> expr, Collection<? extends T> co
     }
 
     public CollDeleteClause(Path<T> expr, Collection<? extends T> col){
-        this(DefaultQueryEngine.DEFAULT, expr, col);
+        this(DefaultQueryEngine.getDefault(), expr, col);
     }
 
     @Override

File: querydsl-collections/src/main/java/com/mysema/query/collections/CollQuery.java
Patch:
@@ -29,7 +29,7 @@ public final class CollQuery extends AbstractCollQuery<CollQuery> implements Sim
      * Create a new CollQuery instance
      */
     public CollQuery() {
-        super(new DefaultQueryMetadata(), DefaultQueryEngine.DEFAULT);
+        super(new DefaultQueryMetadata(), DefaultQueryEngine.getDefault());
     }
 
     /**
@@ -58,7 +58,7 @@ public CollQuery(QueryEngine queryEngine) {
      * @param evaluatorFactory
      */
     public CollQuery(QueryMetadata metadata) {
-        super(metadata, DefaultQueryEngine.DEFAULT);
+        super(metadata, DefaultQueryEngine.getDefault());
     }
 
     /**

File: querydsl-collections/src/main/java/com/mysema/query/collections/CollUpdateClause.java
Patch:
@@ -44,7 +44,7 @@ public CollUpdateClause(QueryEngine qe, Path<T> expr, Iterable<? extends T> col)
     }
 
     public CollUpdateClause(Path<T> expr, Iterable<? extends T> col){
-        this(DefaultQueryEngine.DEFAULT, expr, col);
+        this(DefaultQueryEngine.getDefault(), expr, col);
     }
 
     @Override

File: querydsl-collections/src/test/java/com/mysema/query/collections/AbstractQueryTest.java
Patch:
@@ -78,7 +78,7 @@ static class TestQuery extends AbstractCollQuery<TestQuery> {
         List<Object> res = new ArrayList<Object>();
 
         public TestQuery() {
-            super(new DefaultQueryMetadata(), DefaultQueryEngine.DEFAULT);
+            super(new DefaultQueryMetadata(), DefaultQueryEngine.getDefault());
         }
         
         @Override

File: querydsl-codegen/src/main/java/com/mysema/query/codegen/EntitySerializer.java
Patch:
@@ -345,7 +345,7 @@ protected void introClassHeader(CodeWriter writer, EntityType model) throws IOEx
     }
 
     protected void introDefaultInstance(CodeWriter writer, EntityType model, String defaultName) throws IOException {
-        String simpleName = (!defaultName.isEmpty() ? defaultName : model.getUncapSimpleName());
+        String simpleName = !defaultName.isEmpty() ? defaultName : model.getUncapSimpleName();
         Type queryType = typeMappings.getPathType(model, model, true);
         String alias = simpleName;
         if (keywords.contains(simpleName.toUpperCase())) {

File: querydsl-core/src/main/java/com/mysema/query/annotations/Config.java
Patch:
@@ -60,7 +60,6 @@
      */
     boolean createDefaultVariable() default true;
 
-
     /**
      * The name of the default variable in query type
      *

File: querydsl-sql-codegen/src/main/java/com/mysema/query/sql/codegen/MetaDataSerializer.java
Patch:
@@ -102,8 +102,8 @@ protected String getAdditionalConstructorParameter(EntityType model) {
     }
     
     @Override
-    protected void introDefaultInstance(CodeWriter writer, EntityType entityType) throws IOException {
-        String variableName = namingStrategy.getDefaultVariableName(entityType);
+    protected void introDefaultInstance(CodeWriter writer, EntityType entityType, String defaultName) throws IOException {
+        String variableName = !defaultName.isEmpty() ? defaultName : namingStrategy.getDefaultVariableName(entityType);
         String alias = namingStrategy.getDefaultAlias(entityType);
         Type queryType = typeMappings.getPathType(entityType, entityType, true);
         writer.publicStaticFinal(queryType, variableName, NEW + queryType.getSimpleName() + "(\"" + alias + "\")");

File: querydsl-apt/src/main/java/com/mysema/query/apt/DefaultConfiguration.java
Patch:
@@ -183,7 +183,7 @@ public DefaultConfiguration(
         }
 
         defaultSerializerConfig = new SimpleSerializerConfig(entityAccessors, listAccessors, 
-                mapAccessors, createDefaultVariable);
+                mapAccessors, createDefaultVariable, "");
 
     }
 

File: querydsl-codegen/src/main/java/com/mysema/query/codegen/EntitySerializer.java
Patch:
@@ -297,7 +297,7 @@ protected void intro(EntityType model, SerializerConfig config,
         introFactoryMethods(writer, model);
         introInits(writer, model);
         if (config.createDefaultVariable()) {
-            introDefaultInstance(writer, model);
+            introDefaultInstance(writer, model, config.defaultVariableName());
         }
         if (model.getSuperType() != null && model.getSuperType().getEntityType() != null) {
             introSuper(writer, model);
@@ -344,8 +344,8 @@ protected void introClassHeader(CodeWriter writer, EntityType model) throws IOEx
         writer.privateStaticFinal(Types.LONG_P, "serialVersionUID", String.valueOf(serialVersionUID));
     }
 
-    protected void introDefaultInstance(CodeWriter writer, EntityType model) throws IOException {
-        String simpleName = model.getUncapSimpleName();
+    protected void introDefaultInstance(CodeWriter writer, EntityType model, String defaultName) throws IOException {
+        String simpleName = (!defaultName.isEmpty() ? defaultName : model.getUncapSimpleName());
         Type queryType = typeMappings.getPathType(model, model, true);
         String alias = simpleName;
         if (keywords.contains(simpleName.toUpperCase())) {

File: querydsl-codegen/src/test/java/com/mysema/query/codegen/SerializerTest.java
Patch:
@@ -82,7 +82,7 @@ public void EntitySerializer() throws Exception {
     @Test
     public void EntitySerializer2() throws Exception {
         new EntitySerializer(typeMappings,Collections.<String>emptyList())
-            .serialize(type, new SimpleSerializerConfig(true,true,true,true), new JavaWriter(writer));
+            .serialize(type, new SimpleSerializerConfig(true,true,true,true,""), new JavaWriter(writer));
     }
 
     @Test

File: querydsl-core/src/main/java/com/mysema/query/types/TemplateFactory.java
Patch:
@@ -13,9 +13,9 @@
  */
 package com.mysema.query.types;
 
-import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -38,7 +38,7 @@ public class TemplateFactory {
      */
     public static final TemplateFactory DEFAULT = new TemplateFactory('\\');
 
-    private final Map<String,Template> cache = new HashMap<String,Template>();
+    private final Map<String,Template> cache = new ConcurrentHashMap<String,Template>();
 
     private final Converters converters;
     

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/JPAExpressions.java
Patch:
@@ -23,7 +23,7 @@
 import com.mysema.query.types.expr.StringOperation;
 
 /**
- * JPAGrammar provides factory methods for JPQL specific operations
+ * JPAExpressions provides factory methods for JPQL specific operations
  * elements.
  *
  * @author tiwe

File: querydsl-apt/src/main/java/com/mysema/query/apt/DefaultConfiguration.java
Patch:
@@ -183,7 +183,7 @@ public DefaultConfiguration(
         }
 
         defaultSerializerConfig = new SimpleSerializerConfig(entityAccessors, listAccessors, 
-                mapAccessors, createDefaultVariable);
+                mapAccessors, createDefaultVariable, "");
 
     }
 

File: querydsl-codegen/src/main/java/com/mysema/query/codegen/EntitySerializer.java
Patch:
@@ -297,7 +297,7 @@ protected void intro(EntityType model, SerializerConfig config,
         introFactoryMethods(writer, model);
         introInits(writer, model);
         if (config.createDefaultVariable()) {
-            introDefaultInstance(writer, model);
+            introDefaultInstance(writer, model, config.defaultVariableName());
         }
         if (model.getSuperType() != null && model.getSuperType().getEntityType() != null) {
             introSuper(writer, model);
@@ -344,8 +344,8 @@ protected void introClassHeader(CodeWriter writer, EntityType model) throws IOEx
         writer.privateStaticFinal(Types.LONG_P, "serialVersionUID", String.valueOf(serialVersionUID));
     }
 
-    protected void introDefaultInstance(CodeWriter writer, EntityType model) throws IOException {
-        String simpleName = model.getUncapSimpleName();
+    protected void introDefaultInstance(CodeWriter writer, EntityType model, String defaultName) throws IOException {
+        String simpleName = (!defaultName.isEmpty() ? defaultName : model.getUncapSimpleName());
         Type queryType = typeMappings.getPathType(model, model, true);
         String alias = simpleName;
         if (keywords.contains(simpleName.toUpperCase())) {

File: querydsl-codegen/src/test/java/com/mysema/query/codegen/SerializerTest.java
Patch:
@@ -82,7 +82,7 @@ public void EntitySerializer() throws Exception {
     @Test
     public void EntitySerializer2() throws Exception {
         new EntitySerializer(typeMappings,Collections.<String>emptyList())
-            .serialize(type, new SimpleSerializerConfig(true,true,true,true), new JavaWriter(writer));
+            .serialize(type, new SimpleSerializerConfig(true,true,true,true,""), new JavaWriter(writer));
     }
 
     @Test

File: querydsl-sql-codegen/src/main/java/com/mysema/query/sql/codegen/MetaDataExporter.java
Patch:
@@ -220,7 +220,7 @@ public void export(DatabaseMetaData md) throws SQLException {
             types.add("VIEW");
         }
         
-        ResultSet tables = md.getTables(null, schemaPattern, tableNamePattern, types.toArray(new String[0]));
+        ResultSet tables = md.getTables(null, schemaPattern, tableNamePattern, types.toArray(new String[types.size()]));
         try{
             while (tables.next()) {
                 handleTable(md, tables);

File: querydsl-sql-codegen/src/test/java/com/mysema/query/sql/codegen/DefaultNamingStrategyTest.java
Patch:
@@ -51,6 +51,9 @@ public void GetPropertyName() {
         assertEquals("name", namingStrategy.getPropertyName("name", entityModel));
         assertEquals("userId", namingStrategy.getPropertyName("user_id", entityModel));
         assertEquals("accountEventId", namingStrategy.getPropertyName("accountEvent_id", entityModel));
+        
+        assertEquals("_123abc", namingStrategy.getPropertyName("123abc", entityModel));
+        assertEquals("_123Abc", namingStrategy.getPropertyName("123 abc", entityModel));
     }
     
     @Test

File: querydsl-sql-codegen/src/test/java/com/mysema/query/sql/codegen/ExtendedNamingStrategyTest.java
Patch:
@@ -51,6 +51,9 @@ public void GetPropertyName() {
         assertEquals("name", namingStrategy.getPropertyName("name", entityModel));
         assertEquals("userId", namingStrategy.getPropertyName("user_id", entityModel));
         assertEquals("accountEventId", namingStrategy.getPropertyName("accountEvent_id", entityModel));
+        
+        assertEquals("_123abc", namingStrategy.getPropertyName("123abc", entityModel));
+        assertEquals("_123Abc", namingStrategy.getPropertyName("123 abc", entityModel));
     }
     
     @Test

File: querydsl-sql-codegen/src/test/java/com/mysema/query/sql/codegen/MetaDataSerializerTest.java
Patch:
@@ -61,6 +61,7 @@ public void setUp() throws SQLException, ClassNotFoundException{
                 + "timefield TIME, "
                 + "superior_id int, "
                 + "survey_id int, "
+                + "\"123abc\" int,"
                 + "survey_name varchar(30), "
                 + "CONSTRAINT PK_employee PRIMARY KEY (id), "
                 + "CONSTRAINT FK_survey FOREIGN KEY (survey_id, survey_name) REFERENCES survey(id,name), "

File: querydsl-sql-codegen/src/test/java/com/mysema/query/sql/codegen/OriginalNamingStrategyTest.java
Patch:
@@ -43,6 +43,9 @@ public void GetPropertyName() {
         assertEquals("name", namingStrategy.getPropertyName("name", entityModel));
         assertEquals("user_id", namingStrategy.getPropertyName("user_id", entityModel));
         assertEquals("accountEvent_id", namingStrategy.getPropertyName("accountEvent_id", entityModel));
+        
+        assertEquals("_123abc", namingStrategy.getPropertyName("123abc", entityModel));
+        assertEquals("_123_abc", namingStrategy.getPropertyName("123 abc", entityModel));
     }
 
     @Test

File: querydsl-core/src/main/java/com/mysema/query/support/SerializerBase.java
Patch:
@@ -147,7 +147,7 @@ protected void handleTemplate(final Template template, final List<?> args){
         }
     }
 
-    protected final boolean serialize(final QueryFlag.Position position, final Set<QueryFlag> flags) {
+    public final boolean serialize(final QueryFlag.Position position, final Set<QueryFlag> flags) {
         boolean handled = false;
         for (final QueryFlag flag : flags) {
             if (flag.getPosition() == position) {
@@ -158,7 +158,7 @@ protected final boolean serialize(final QueryFlag.Position position, final Set<Q
         return handled;
     }
     
-    protected final boolean serialize(final JoinFlag.Position position, final Set<JoinFlag> flags){
+    public final boolean serialize(final JoinFlag.Position position, final Set<JoinFlag> flags){
         boolean handled = false;
         for (final JoinFlag flag : flags) {
             if (flag.getPosition() == position) {

File: querydsl-apt/src/test/java/com/mysema/query/domain/RooEntities.java
Patch:
@@ -3,11 +3,11 @@
 import javax.persistence.Id;
 import javax.persistence.ManyToOne;
 
-import org.springframework.roo.addon.entity.RooEntity;
+import org.springframework.roo.addon.jpa.entity.RooJpaEntity;
 
 public class RooEntities {
     
-    @RooEntity
+    @RooJpaEntity
     public static class MyEntity {
         
         @Id 

File: querydsl-sql/src/main/java/com/mysema/query/sql/OracleTemplates.java
Patch:
@@ -105,11 +105,11 @@ public void serialize(QueryMetadata metadata, boolean forCountRow, SQLSerializer
 
             if (mod.getOffset() == null) {
                 context.append(limitQueryStart);
-                context.serialize(metadata, forCountRow);
+                context.serializeForQuery(metadata, forCountRow);
                 context.handle(limitQueryEnd, mod.getLimit());
             } else {
                 context.append(outerQueryStart);
-                context.serialize(metadata, forCountRow);
+                context.serializeForQuery(metadata, forCountRow);
                 context.append(outerQueryEnd);
 
                 if (mod.getLimit() == null) {
@@ -120,7 +120,7 @@ public void serialize(QueryMetadata metadata, boolean forCountRow, SQLSerializer
             }
 
         } else {
-            context.serialize(metadata, forCountRow);
+            context.serializeForQuery(metadata, forCountRow);
         }
     }
     

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLServerTemplates.java
Patch:
@@ -94,7 +94,7 @@ public void serialize(QueryMetadata metadata, boolean forCountRow, SQLSerializer
             }
             metadata.addProjection(rn.as(SQLServerGrammar.rowNumber));
             metadata.clearOrderBy();
-            context.serialize(metadata, forCountRow);
+            context.serializeForQuery(metadata, forCountRow);
             context.append(outerQueryEnd);
             QueryModifiers mod = metadata.getModifiers();
             if (mod.getLimit() == null) {
@@ -106,7 +106,7 @@ public void serialize(QueryMetadata metadata, boolean forCountRow, SQLSerializer
             }
 
         } else {
-            context.serialize(metadata, forCountRow);
+            context.serializeForQuery(metadata, forCountRow);
         }
     }
     

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLTemplates.java
Patch:
@@ -20,12 +20,10 @@
 import java.util.Map;
 
 import com.google.common.primitives.Primitives;
-import com.mysema.query.JoinExpression;
 import com.mysema.query.JoinType;
 import com.mysema.query.QueryException;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.QueryModifiers;
-import com.mysema.query.types.Expression;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.OperatorImpl;
 import com.mysema.query.types.Ops;

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLSerializer.java
Patch:
@@ -52,7 +52,7 @@
  */
 public class SQLSerializer extends SerializerBase<SQLSerializer> {
     
-    protected enum Stage {SELECT, FROM, WHERE, GROUP_BY, HAVING, ORDER_BY}
+    protected enum Stage {SELECT, FROM, WHERE, GROUP_BY, HAVING, ORDER_BY, MODIFIERS, END}
     
     private static final String COMMA = ", ";
 
@@ -282,11 +282,13 @@ void serializeForQuery(QueryMetadata metadata, boolean forCountRow) {
         
         // modifiers
         if (!forCountRow && metadata.getModifiers().isRestricting() && !joins.isEmpty()) {
+            stage = Stage.MODIFIERS;
             templates.serializeModifiers(metadata, this);
         }
         
         // end
         if (hasFlags) {
+            stage = Stage.END;
             serialize(Position.END, flags);    
         }        
         

File: querydsl-codegen/src/test/java/com/mysema/query/codegen/EntitySerializerTest.java
Patch:
@@ -66,7 +66,7 @@ public void Different_Package() throws IOException {
         serializer.serialize(entityType, SimpleSerializerConfig.DEFAULT, new JavaWriter(writer));        
 //        System.err.println(writer.toString());
         assertTrue(writer.toString().contains("public class QEntitySerializerTest_Entity " +
-        		"extends EntityPathBase<com.mysema.query.codegen.EntitySerializerTest.Entity>"));
+        		"extends EntityPathBase<EntitySerializerTest.Entity>"));
     }
     
 

File: querydsl-collections/src/main/java/com/mysema/query/collections/CollQuery.java
Patch:
@@ -76,7 +76,7 @@ public CollQuery(QueryMetadata metadata, QueryEngine queryEngine) {
      */
     @Override
     public CollQuery clone() {
-        return new CollQuery(queryMixin.getMetadata(), getQueryEngine());
+        return new CollQuery(queryMixin.getMetadata().clone(), getQueryEngine());
     }
 
     /**

File: querydsl-sql/src/test/java/com/mysema/query/sql/JoinUsageTest.java
Patch:
@@ -15,13 +15,14 @@
 
 import org.junit.Test;
 
+import com.mysema.query.DefaultQueryMetadata;
 import com.mysema.query.sql.domain.QSurvey;
 
 public class JoinUsageTest {
     
     @Test(expected=IllegalStateException.class)
     public void Join_Already_Declared(){
-        SQLSubQuery subQuery = new SQLSubQuery();
+        SQLSubQuery subQuery = new SQLSubQuery(new DefaultQueryMetadata());
         subQuery.from(QSurvey.survey).fullJoin(QSurvey.survey);
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/ExpressionUtils.java
Patch:
@@ -323,7 +323,7 @@ public static Expression<?> merge(List<? extends Expression<?>> expressions) {
         return new TemplateExpressionImpl<Object>(
                 Object.class, 
                 TemplateFactory.DEFAULT.create(builder.toString()), 
-                expressions);
+                ImmutableList.copyOf(expressions));
     }
     
     @SuppressWarnings("unchecked")

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLSerializer.java
Patch:
@@ -286,11 +286,11 @@ private void serializeForQuery(QueryMetadata metadata, boolean forCountRow) {
         }
         
         // order by        
+        if (hasFlags) {
+            serialize(Position.BEFORE_ORDER, flags);    
+        }        
         if (!orderBy.isEmpty() && !forCountRow) {
             stage = Stage.ORDER_BY;
-            if (hasFlags) {
-                serialize(Position.BEFORE_ORDER, flags);    
-            }        
             append(templates.getOrderBy());                       
             boolean first = true;
             for (final OrderSpecifier<?> os : orderBy) {

File: querydsl-sql/src/test/java/com/mysema/query/sql/RelationalFunctionCallTest.java
Patch:
@@ -65,7 +65,7 @@ public void TwoArgs() {
         StringPath str = new StringPath("str");
         RelationalFunctionCall<String> functionCall = RelationalFunctionCall.create(String.class, "getElements", "a", str);
         assertEquals("getElements({0}, {1})", functionCall.getTemplate().toString());
-        assertEquals(ConstantImpl.create("a"), functionCall.getArg(0));
+        assertEquals("a", functionCall.getArg(0));
         assertEquals(str, functionCall.getArg(1));        
     }
     

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLSubQuery.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.Expression;
-import com.mysema.query.types.Ops;
 import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.SimpleExpression;

File: querydsl-core/src/main/java/com/mysema/query/types/OperationImpl.java
Patch:
@@ -32,7 +32,7 @@
  */
 @Immutable
 public class OperationImpl<T> extends ExpressionBase<T> implements Operation<T> {
-
+    
     private static final long serialVersionUID = 4796432056083507588L;
 
     private final ImmutableList<Expression<?>> args;

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/JPQLTemplates.java
Patch:
@@ -33,11 +33,11 @@ public class JPQLTemplates extends Templates {
 
     public static final char DEFAULT_ESCAPE = '!';
     
-    public static final Operator<String> TYPE = new OperatorImpl<String>("TYPE", Object.class);
+    public static final Operator<String> TYPE = new OperatorImpl<String>("TYPE");
     
-    public static final Operator<Object> CAST = new OperatorImpl<Object>("CAST",Object.class, Object.class);
+    public static final Operator<Object> CAST = new OperatorImpl<Object>("CAST");
 
-    public static final Operator<Boolean> MEMBER_OF = new OperatorImpl<Boolean>("MEMBER_OF",Object.class, Object.class);
+    public static final Operator<Boolean> MEMBER_OF = new OperatorImpl<Boolean>("MEMBER_OF");
 
     public static final JPQLTemplates DEFAULT = new JPQLTemplates();
     

File: querydsl-mongodb/src/main/java/com/mysema/query/mongodb/MongodbExpressions.java
Patch:
@@ -28,9 +28,9 @@
  */
 public final class MongodbExpressions {
     
-    public static final Operator<Boolean> NEAR = new OperatorImpl<Boolean>("NEAR", Number.class, Number.class);
+    public static final Operator<Boolean> NEAR = new OperatorImpl<Boolean>("NEAR");
     
-    public static final Operator<Boolean> ELEM_MATCH = new OperatorImpl<Boolean>("ELEM_MATCH", Object.class, Object.class);
+    public static final Operator<Boolean> ELEM_MATCH = new OperatorImpl<Boolean>("ELEM_MATCH");
 
     private MongodbExpressions(){}
     

File: querydsl-core/src/main/java/com/mysema/query/JoinExpression.java
Patch:
@@ -35,7 +35,7 @@ public final class JoinExpression implements Serializable {
     @Nullable
     private final Predicate condition;
 
-    private final Set<JoinFlag> flags;
+    private final ImmutableSet<JoinFlag> flags;
 
     private final Expression<?> target;
 
@@ -65,7 +65,7 @@ public JoinExpression(JoinType type, Expression<?> target, @Nullable Predicate c
         this.type = type;
         this.target = target;
         this.condition = condition;
-        this.flags = flags;
+        this.flags = ImmutableSet.copyOf(flags);
     }
 
     @Nullable

File: querydsl-core/src/main/java/com/mysema/query/SearchResults.java
Patch:
@@ -26,9 +26,10 @@
  */
 public final class SearchResults<T> {
 
-    private static final SearchResults EMPTY = new SearchResults(
+    private static final SearchResults<Object> EMPTY = new SearchResults<Object>(
             ImmutableList.of(), Long.MAX_VALUE, 0l, 0l); 
     
+    @SuppressWarnings("unchecked")
     public static <T> SearchResults<T> emptyResults() {
         return (SearchResults<T>)EMPTY;
     };

File: querydsl-core/src/main/java/com/mysema/query/types/OperatorImpl.java
Patch:
@@ -33,7 +33,7 @@ public OperatorImpl(String id, Class<?>... types) {
     }
 
     public OperatorImpl(String id, ImmutableList<Class<?>> types) {
-        this.id = id.intern();
+        this.id = id;
         this.types = types;
     }
 
@@ -52,8 +52,7 @@ public boolean equals(Object o){
         if (o == this) {
             return true;
         } else if (o instanceof Operator<?>) {
-            // Strings are interned, so this is safe
-            return ((Operator<?>)o).getId() == id;
+            return ((Operator<?>)o).getId().equals(id);
         } else {
             return false;
         }

File: querydsl-core/src/main/java/com/mysema/query/types/PathType.java
Patch:
@@ -70,16 +70,14 @@ public enum PathType implements Operator<Path<?>> {
      */
     VARIABLE;
 
-    private final String id = name().intern();
-    
     @Override
     public List<Class<?>> getTypes() {
         return Collections.emptyList();
     }
 
     @Override
     public String getId() {
-        return id;
+        return name();
     }
     
 }

File: querydsl-core/src/main/java/com/mysema/query/types/QTuple.java
Patch:
@@ -120,8 +120,8 @@ public QTuple(ImmutableList<Expression<?>> args) {
     public QTuple(Expression<?>[]... args) {
         super(Tuple.class);
         ImmutableList.Builder<Expression<?>> builder = ImmutableList.builder();
-        for (Expression<?>[] exprs: args){
-            builder.addAll(Arrays.asList(exprs));
+        for (Expression<?>[] exprs: args) {
+            builder.add(exprs);
         }
         this.args = builder.build();
     }

File: querydsl-core/src/main/java/com/mysema/query/types/Templates.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.mysema.query.types;
 
-import java.util.IdentityHashMap;
+import java.util.HashMap;
 import java.util.Map;
 
 import javax.annotation.Nullable;
@@ -27,9 +27,9 @@ public class Templates {
 
     public static final Templates DEFAULT = new Templates();
 
-    private final Map<String, Template> templates = new IdentityHashMap<String, Template>();
+    private final Map<String, Template> templates = new HashMap<String, Template>();
     
-    private final Map<String, Integer> precedence = new IdentityHashMap<String, Integer>();
+    private final Map<String, Integer> precedence = new HashMap<String, Integer>();
 
     private final TemplateFactory templateFactory;
     

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/AbstractJPASubQuery.java
Patch:
@@ -13,8 +13,6 @@
  */
 package com.mysema.query.jpa;
 
-import java.util.Collection;
-
 import com.mysema.query.DefaultQueryMetadata;
 import com.mysema.query.JoinExpression;
 import com.mysema.query.JoinType;

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/JPACommonQuery.java
Patch:
@@ -13,8 +13,6 @@
  */
 package com.mysema.query.jpa;
 
-import java.util.Collection;
-
 import com.mysema.query.Query;
 import com.mysema.query.types.CollectionExpression;
 import com.mysema.query.types.EntityPath;

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/JPAQueryMixin.java
Patch:
@@ -28,7 +28,6 @@
 import com.mysema.query.types.Path;
 import com.mysema.query.types.Predicate;
 import com.mysema.query.types.TemplateExpressionImpl;
-import com.mysema.query.types.path.ListPath;
 
 /**
  * JPAQueryMixin extends {@link QueryMixin} to support JPQL join construction

File: querydsl-core/src/main/java/com/mysema/query/types/Templates.java
Patch:
@@ -13,7 +13,7 @@
  */
 package com.mysema.query.types;
 
-import java.util.IdentityHashMap;
+import java.util.HashMap;
 import java.util.Map;
 
 import javax.annotation.Nullable;
@@ -27,9 +27,9 @@ public class Templates {
 
     public static final Templates DEFAULT = new Templates();
 
-    private final Map<Operator<?>, Template> templates = new IdentityHashMap<Operator<?>, Template>();
+    private final Map<Operator<?>, Template> templates = new HashMap<Operator<?>, Template>();
 
-    private final Map<Operator<?>, Integer> precedence = new IdentityHashMap<Operator<?>, Integer>();
+    private final Map<Operator<?>, Integer> precedence = new HashMap<Operator<?>, Integer>();
 
     private final TemplateFactory templateFactory;
     

File: querydsl-sql/src/test/java/com/mysema/query/sql/SQLSerializerTest.java
Patch:
@@ -100,7 +100,7 @@ public void Complex_SubQuery() {
         serializer.serialize(master.getMetadata(), false);
         System.err.println(serializer);
     }
-    
+        
     private SQLQuery query() {
         return new SQLQuery(SQLTemplates.DEFAULT);
     }

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLInsertClause.java
Patch:
@@ -401,7 +401,7 @@ public <T> SQLInsertClause populate(T obj, Mapper<T> mapper) {
 
     @Override
     public boolean isEmpty() {
-        return values.isEmpty();
+        return values.isEmpty() && batches.isEmpty();
     }
 
 }

File: querydsl-jdo/src/main/java/com/mysema/query/jdo/JDOCommonQuery.java
Patch:
@@ -17,7 +17,7 @@
 import com.mysema.query.types.EntityPath;
 
 /**
- * JDOCommonQuery is a parent interface for JDOQuery and JDOSubQuery
+ * JDOCommonQuery is a parent interface for JDOQLQuery and JDOSubQuery
  * 
  * @author tiwe
  *

File: querydsl-jdo/src/main/java/com/mysema/query/jdo/JDOQuery.java
Patch:
@@ -25,7 +25,7 @@
  *
  * @param <A>
  */
-public final class JDOQuery extends AbstractJDOQuery<JDOQuery> implements JDOCommonQuery<JDOQuery> {
+public final class JDOQuery extends AbstractJDOQuery<JDOQuery> implements JDOQLQuery {
 
     /**
      * Create a detached JDOQuery instance

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/Conversions.java
Patch:
@@ -38,8 +38,7 @@ public static <RT> Expression<RT> convert(Expression<RT> expr) {
                 if (isAggSumWithConversion(e) || isCountAggConversion(expr)) {
                     return new NumberConversions<RT>(factorye);
                 }
-            }
-            
+            }            
         } 
         return expr;
     }

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/JPACommonQuery.java
Patch:
@@ -22,13 +22,13 @@
 import com.mysema.query.types.Predicate;
 
 /**
- * JPQLCommonQuery is a common interface for queries and subqueries of this module
+ * JPACommonQuery is a common interface for queries and subqueries of this module
  * 
  * @author tiwe
  *
  * @param <Q>
  */
-public interface JPQLCommonQuery<Q extends JPQLCommonQuery<Q>>  extends Query<Q> {
+public interface JPACommonQuery<Q extends JPACommonQuery<Q>>  extends Query<Q> {
    
     /**
      * Set the sources of this query

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/JPAGrammar.java
Patch:
@@ -23,13 +23,13 @@
 import com.mysema.query.types.expr.StringOperation;
 
 /**
- * JPQLGrammar provides factory methods for JPQL specific operations
+ * JPAGrammar provides factory methods for JPQL specific operations
  * elements.
  *
  * @author tiwe
  */
 @SuppressWarnings("unchecked")
-public final class JPQLGrammar {
+public final class JPAGrammar {
   
     /**
      * @param col
@@ -63,6 +63,6 @@ public static StringExpression type(EntityPath<?> path) {
         return StringOperation.create(JPQLTemplates.TYPE, path);
     }
     
-    private JPQLGrammar() {}
+    private JPAGrammar() {}
 
 }

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/JPQLQuery.java
Patch:
@@ -21,7 +21,7 @@
  * @author tiwe
  *
  */
-public interface JPQLQuery extends JPQLCommonQuery<JPQLQuery>, Projectable {
+public interface JPQLQuery extends JPACommonQuery<JPQLQuery>, Projectable {
 
     /**
      * Add the "fetch" flag to the last defined join

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/hibernate/AbstractHibernateQuery.java
Patch:
@@ -38,7 +38,7 @@
 import com.mysema.query.SearchResults;
 import com.mysema.query.Tuple;
 import com.mysema.query.jpa.HQLTemplates;
-import com.mysema.query.jpa.JPQLQueryBase;
+import com.mysema.query.jpa.JPAQueryBase;
 import com.mysema.query.jpa.JPQLTemplates;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.FactoryExpression;
@@ -53,7 +53,7 @@
  *
  * @param <Q>
  */
-public abstract class AbstractHibernateQuery<Q extends AbstractHibernateQuery<Q>> extends JPQLQueryBase<Q> {
+public abstract class AbstractHibernateQuery<Q extends AbstractHibernateQuery<Q>> extends JPAQueryBase<Q> {
 
     private static final Logger logger = LoggerFactory.getLogger(HibernateQuery.class);
 

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/hibernate/HibernateQuery.java
Patch:
@@ -18,8 +18,8 @@
 
 import com.mysema.query.DefaultQueryMetadata;
 import com.mysema.query.QueryMetadata;
-import com.mysema.query.jpa.JPQLQuery;
 import com.mysema.query.jpa.HQLTemplates;
+import com.mysema.query.jpa.JPQLQuery;
 import com.mysema.query.jpa.JPQLTemplates;
 
 /**

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/hibernate/HibernateSubQuery.java
Patch:
@@ -14,16 +14,16 @@
 package com.mysema.query.jpa.hibernate;
 
 import com.mysema.query.QueryMetadata;
-import com.mysema.query.jpa.AbstractJPQLSubQuery;
-import com.mysema.query.jpa.JPQLCommonQuery;
+import com.mysema.query.jpa.AbstractJPASubQuery;
+import com.mysema.query.jpa.JPACommonQuery;
 
 /**
  * HibernateSubQuery is a subquery class for Hibernate
  *
  * @author tiwe
  *
  */
-public final class HibernateSubQuery extends AbstractJPQLSubQuery<HibernateSubQuery> implements JPQLCommonQuery<HibernateSubQuery> {
+public final class HibernateSubQuery extends AbstractJPASubQuery<HibernateSubQuery> implements JPACommonQuery<HibernateSubQuery> {
 
     public HibernateSubQuery() {
         super();

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/impl/AbstractJPAQuery.java
Patch:
@@ -38,7 +38,7 @@
 import com.mysema.query.QueryModifiers;
 import com.mysema.query.SearchResults;
 import com.mysema.query.Tuple;
-import com.mysema.query.jpa.JPQLQueryBase;
+import com.mysema.query.jpa.JPAQueryBase;
 import com.mysema.query.jpa.JPQLTemplates;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.FactoryExpression;
@@ -52,7 +52,7 @@
  *
  * @param <Q>
  */
-public abstract class AbstractJPAQuery<Q extends AbstractJPAQuery<Q>> extends JPQLQueryBase<Q> {
+public abstract class AbstractJPAQuery<Q extends AbstractJPAQuery<Q>> extends JPAQueryBase<Q> {
 
     private static final Logger logger = LoggerFactory.getLogger(JPAQuery.class);
 

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/impl/JPAQueryFactory.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.mysema.query.QueryFactory;
 import com.mysema.query.jpa.HQLTemplates;
+import com.mysema.query.jpa.JPASubQuery;
 import com.mysema.query.jpa.JPQLTemplates;
 import com.mysema.query.types.EntityPath;
 

File: querydsl-jpa/src/test/java/PackagelessEntityTest.java
Patch:
@@ -15,7 +15,7 @@
 
 import org.junit.Test;
 
-import com.mysema.query.jpa.JPQLSubQuery;
+import com.mysema.query.jpa.JPASubQuery;
 import com.mysema.query.types.path.PathBuilder;
 
 
@@ -24,7 +24,7 @@ public class PackagelessEntityTest {
     @SuppressWarnings("unchecked")
     @Test
     public void PackageLess_Path(){
-        JPQLSubQuery query = new JPQLSubQuery();
+        JPASubQuery query = new JPASubQuery();
         PathBuilder builder = new PathBuilder(PackagelessEntityTest.class,"entity");
         query.from(builder);
         assertEquals("select entity\nfrom PackagelessEntityTest entity", query.toString());

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/AbstractQueryTest.java
Patch:
@@ -23,8 +23,8 @@ protected QueryHelper query() {
         return new QueryHelper(HQLTemplates.DEFAULT);
     }
 
-    protected JPQLSubQuery sub(){
-        return new JPQLSubQuery();
+    protected JPASubQuery sub(){
+        return new JPASubQuery();
     }
 
     protected static void assertToString(String expected, Expression<?> expr) {

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/HibernateQueryTest.java
Patch:
@@ -25,7 +25,7 @@ public class HibernateQueryTest {
 
     @Test
     public void InnerJoin(){
-        JPQLQuery hqlQuery = new HibernateQuery();
+        HibernateQuery hqlQuery = new HibernateQuery();
         QEmployee employee = QEmployee.employee;
         hqlQuery.from(employee);
         hqlQuery.innerJoin(employee.user, QUser.user);

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/JPACollectionAnyVisitorTest.java
Patch:
@@ -25,7 +25,7 @@
 import com.mysema.query.types.TemplateExpressionImpl;
 
 
-public class JPQLCollectionAnyVisitorTest {
+public class JPACollectionAnyVisitorTest {
 
     private QCat cat = QCat.cat;
     
@@ -75,7 +75,7 @@ public void Template(){
     }
     
     private String serialize(Expression<?> expression){
-        Expression<?> transformed = expression.accept(JPQLCollectionAnyVisitor.DEFAULT, new Context());
+        Expression<?> transformed = expression.accept(JPACollectionAnyVisitor.DEFAULT, new Context());
         JPQLSerializer serializer = new JPQLSerializer(HQLTemplates.DEFAULT, null);
         serializer.handle(transformed);
         return serializer.toString();

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/JPASubQueryTest.java
Patch:
@@ -19,11 +19,11 @@
 
 import com.mysema.query.jpa.domain.QCat;
 
-public class JPQLSubQueryTest {
+public class JPASubQueryTest {
     
     @Test
     public void Multiple_Projections(){
-        JPQLSubQuery query = new JPQLSubQuery();
+        JPASubQuery query = new JPASubQuery();
         query.from(QCat.cat);
         assertEquals(1, query.list(QCat.cat).getMetadata().getProjection().size());
         assertEquals(1, query.list(QCat.cat).getMetadata().getProjection().size());

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/JPQLQueryTest.java
Patch:
@@ -23,7 +23,7 @@ public class JPQLQueryTest {
 
     private QCat cat = QCat.cat;
     
-    private JPQLQuery query = new HibernateQuery();
+    private HibernateQuery query = new HibernateQuery();
     
     @Before
     public void setUp(){

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/JoinTest.java
Patch:
@@ -33,8 +33,8 @@ public interface Entity{
     private final Entity alias = Alias.alias(Entity.class);
 
     private final StringPath path = new StringPath("path");
-    private final JPQLSubQuery subQuery = new JPQLSubQuery();
-    private final JPQLQuery query = new HibernateQuery(new DummySessionHolder(), HQLTemplates.DEFAULT);
+    private final JPASubQuery subQuery = new JPASubQuery();
+    private final HibernateQuery query = new HibernateQuery(new DummySessionHolder(), HQLTemplates.DEFAULT);
 
     
     @Test

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/QueryHelper.java
Patch:
@@ -32,7 +32,7 @@
 import com.mysema.query.Tuple;
 import com.mysema.query.types.Expression;
 
-class QueryHelper extends JPQLQueryBase<QueryHelper> {
+class QueryHelper extends JPAQueryBase<QueryHelper> {
 
     public QueryHelper(JPQLTemplates templates) {
         super(new DefaultQueryMetadata(), templates, null);

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/SubQueryTest.java
Patch:
@@ -30,14 +30,14 @@ public void WrongUsage(){
 
     @Test
     public void Single_Source(){
-        JPQLSubQuery query = sub();
+        JPASubQuery query = sub();
         query.from(cat);
         assertEquals("select cat\nfrom Cat cat", query.toString());
     }
     
     @Test
     public void Multiple_Sources(){
-        JPQLSubQuery query = sub();
+        JPASubQuery query = sub();
         query.from(cat);
         query.from(fatcat);
         assertEquals("select cat\nfrom Cat cat, Cat fatcat", 

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/UniqueResultsTest.java
Patch:
@@ -42,7 +42,7 @@ public void test(){
         assertEquals(Long.valueOf(3), query().from(cat).uniqueResult(cat.count()));
     }
 
-    private JPQLQuery query(){
+    private HibernateQuery query(){
         return new HibernateQuery(session);
     }
 

File: querydsl-core/src/main/java/com/mysema/query/support/QueryMixin.java
Patch:
@@ -23,6 +23,7 @@
 import com.mysema.query.types.EntityPath;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.ExpressionUtils;
+import com.mysema.query.types.ExtractorVisitor;
 import com.mysema.query.types.FactoryExpression;
 import com.mysema.query.types.FactoryExpressionUtils;
 import com.mysema.query.types.FactoryExpressionUtils.FactoryExpressionAdapter;

File: querydsl-core/src/main/java/com/mysema/query/types/PredicateTemplate.java
Patch:
@@ -45,7 +45,7 @@ public PredicateTemplate(Template template, List<?> args){
     @Override
     public Predicate not() {
         if (not == null) {
-            not = new PredicateOperation(Ops.NOT, this);
+            not = PredicateOperation.create(Ops.NOT, this);
         }
         return not;
     }

File: querydsl-core/src/main/java/com/mysema/query/types/expr/SimpleExpression.java
Patch:
@@ -142,7 +142,7 @@ public BooleanExpression eq(T right) {
      * @return
      */
     public BooleanExpression eq(Expression<? super T> right) {
-        return BooleanOperation.create(Ops.EQ, this, right);
+        return BooleanOperation.create(Ops.EQ, mixin, right);
     }
     
     /**

File: querydsl-core/src/test/java/com/mysema/query/types/PredicateOperationTest.java
Patch:
@@ -24,7 +24,7 @@ public class PredicateOperationTest {
     public void Not() {
         Path o1 = new PathImpl(Object.class, "o1");
         Path o2 = new PathImpl(Object.class, "o2");
-        PredicateOperation template = new PredicateOperation(Ops.EQ, o1, o2);
+        PredicateOperation template = PredicateOperation.create(Ops.EQ, o1, o2);
         assertEquals("!o1 = o2", template.not().toString());
     }
 

File: querydsl-jdo/src/main/java/com/mysema/query/jdo/JDOQLQueryMixin.java
Patch:
@@ -63,7 +63,7 @@ protected Predicate normalize(Predicate predicate, boolean where) {
     private void addCondition(Context context, int i, Path<?> path, boolean where) {
         EntityPath<?> alias = context.replacements.get(i);                 
         from(alias);
-        Predicate condition = new PredicateOperation(Ops.IN, alias, path.getMetadata().getParent());
+        Predicate condition = PredicateOperation.create(Ops.IN, alias, path.getMetadata().getParent());
         if (where) {
             super.where(condition);
         } else {

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/JPQLCollectionAnyVisitor.java
Patch:
@@ -49,7 +49,7 @@ protected Predicate exists(Context c, Predicate condition) {
             EntityPath<?> replacement = c.replacements.get(i);
             if (c.paths.get(i).getType().isAnnotationPresent(Entity.class)) {
                 query.from(replacement);
-                query.where(new PredicateOperation(Ops.IN, replacement, child));    
+                query.where(PredicateOperation.create(Ops.IN, replacement, child));    
             } else {
                 // join via parent
                 Path<?> parent = child.getMetadata().getParent();

File: querydsl-mongodb/src/main/java/com/mysema/query/mongodb/AnyEmbeddedBuilder.java
Patch:
@@ -42,7 +42,7 @@ public AnyEmbeddedBuilder(QueryMixin<MongodbQuery<K>> queryMixin,
     }
 
     public MongodbQuery<K> on(Predicate... conditions) {
-        return queryMixin.where(new PredicateOperation(
+        return queryMixin.where(PredicateOperation.create(
                 MongodbOps.ELEM_MATCH, collection, ExpressionUtils.allOf(conditions)));
     }
     

File: querydsl-sql/src/test/java/com/mysema/query/sql/DerbyTemplatesTest.java
Patch:
@@ -25,7 +25,7 @@ public class DerbyTemplatesTest {
     
     @Test
     public void NextVal() {
-        Operation<String> nextval = new OperationImpl<String>(String.class, SQLTemplates.NEXTVAL, ConstantImpl.create("myseq"));
+        Operation<String> nextval = OperationImpl.create(String.class, SQLTemplates.NEXTVAL, ConstantImpl.create("myseq"));
         assertEquals("next value for myseq", new SQLSerializer(new DerbyTemplates()).handle(nextval).toString());        
     }
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/OracleTemplatesTest.java
Patch:
@@ -65,7 +65,7 @@ public void Modifiers(){
     
     @Test
     public void NextVal() {
-        Operation<String> nextval = new OperationImpl<String>(String.class, SQLTemplates.NEXTVAL, ConstantImpl.create("myseq"));
+        Operation<String> nextval = OperationImpl.create(String.class, SQLTemplates.NEXTVAL, ConstantImpl.create("myseq"));
         assertEquals("myseq.nextval", new SQLSerializer(new OracleTemplates()).handle(nextval).toString());        
     }
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/SQLServerTemplatesTest.java
Patch:
@@ -71,7 +71,7 @@ public void Modifiers(){
     
     @Test
     public void NextVal() {
-        Operation<String> nextval = new OperationImpl<String>(String.class, SQLTemplates.NEXTVAL, ConstantImpl.create("myseq"));
+        Operation<String> nextval = OperationImpl.create(String.class, SQLTemplates.NEXTVAL, ConstantImpl.create("myseq"));
         assertEquals("myseq.nextval", new SQLSerializer(new SQLServerTemplates()).handle(nextval).toString());        
     }
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/SQLTemplatesTest.java
Patch:
@@ -60,7 +60,7 @@ public void Quoting_Performance() {
     
     @Test
     public void NextVal() {
-        Operation<String> nextval = new OperationImpl<String>(String.class, SQLTemplates.NEXTVAL, ConstantImpl.create("myseq"));
+        Operation<String> nextval = OperationImpl.create(String.class, SQLTemplates.NEXTVAL, ConstantImpl.create("myseq"));
         assertEquals("nextval('myseq')", new SQLSerializer(SQLTemplates.DEFAULT).handle(nextval).toString());
         // Derby OK
         // H2 OK

File: querydsl-jdo/src/main/java/com/mysema/query/jdo/JDOQLQueryMixin.java
Patch:
@@ -21,8 +21,10 @@
 import com.mysema.query.types.CollectionExpression;
 import com.mysema.query.types.EntityPath;
 import com.mysema.query.types.ExpressionUtils;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.Predicate;
+import com.mysema.query.types.PredicateOperation;
 
 /**
  * JDOQLQueryMixin extends {@link QueryMixin} to provide module specific extensions 
@@ -62,7 +64,7 @@ protected Predicate normalize(Predicate predicate, boolean where) {
     private void addCondition(Context context, int i, Path<?> path, boolean where) {
         EntityPath<?> alias = context.replacements.get(i);                 
         from(alias);
-        Predicate condition = ExpressionUtils.in(alias, (CollectionExpression)path.getMetadata().getParent());
+        Predicate condition = new PredicateOperation(Ops.IN, alias, path.getMetadata().getParent());
         if (where) {
             super.where(condition);
         } else {

File: querydsl-lucene/src/test/java/com/mysema/query/lucene/QueryElementTest.java
Patch:
@@ -13,15 +13,17 @@
  */
 package com.mysema.query.lucene;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.TermQuery;
+import org.junit.Ignore;
 import org.junit.Test;
 
 public class QueryElementTest {
 
     @Test
+    @Ignore
     public void test(){
         QueryElement element = new QueryElement(new TermQuery(new Term("str","text")));
         assertEquals("str:text",element.toString());

File: querydsl-core/src/main/java/com/mysema/query/types/expr/BooleanOperation.java
Patch:
@@ -50,7 +50,7 @@ protected BooleanOperation(Operator<? super Boolean> op, List<Expression<?>> arg
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(opMixin, context);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ComparableExpression.java
Patch:
@@ -250,7 +250,7 @@ public final BooleanExpression loe(T right) {
      * @see java.lang.Comparable#compareTo(Object)
      */
     public final BooleanExpression loe(Expression<T> right) {
-        return BooleanOperation.create(Ops.LOE, this, right);
+        return BooleanOperation.create(Ops.LOE, mixin, right);
     }
     
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ComparableOperation.java
Patch:
@@ -60,7 +60,7 @@ protected ComparableOperation(Class<T> type, Operator<? super T> op, List<Expres
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(opMixin, context);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/DateOperation.java
Patch:
@@ -60,7 +60,7 @@ protected DateOperation(Class<T> type, Operator<? super T> op, List<Expression<?
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(opMixin, context);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/DateTimeOperation.java
Patch:
@@ -59,7 +59,7 @@ protected DateTimeOperation(Class<T> type, Operator<? super T> op, List<Expressi
 
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(opMixin, context);
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/DslOperation.java
Patch:
@@ -59,7 +59,7 @@ protected DslOperation(Class<T> type, Operator<? super T> op, List<Expression<?>
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(opMixin, context);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EnumOperation.java
Patch:
@@ -59,7 +59,7 @@ protected EnumOperation(Class<? extends T> type, Operator<? super T> op, List<Ex
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(opMixin, context);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/NumberOperation.java
Patch:
@@ -71,7 +71,7 @@ public NumberExpression<T> negate(){
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(opMixin, context);
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/SimpleOperation.java
Patch:
@@ -59,7 +59,7 @@ protected SimpleOperation(Class<T> type, Operator<? super T> op, List<Expression
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(opMixin, context);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/StringOperation.java
Patch:
@@ -49,7 +49,7 @@ protected StringOperation(Operator<? super String> op, List<Expression<?>> args)
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(opMixin, context);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/TimeOperation.java
Patch:
@@ -59,7 +59,7 @@ protected TimeOperation(Class<T> type, Operator<? super T> op, List<Expression<?
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(opMixin, context);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/ArrayPath.java
Patch:
@@ -65,7 +65,7 @@ public ArrayPath(Class<? super E[]> type, PathMetadata<?> metadata) {
 
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(pathMixin, context);
     }
     
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/path/BeanPath.java
Patch:
@@ -71,6 +71,7 @@ public BeanPath(Class<? extends T> type, PathMetadata<?> metadata, @Nullable Pat
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
+        // mixin is not used here, because subtype instances may have data that needs to be made available
         return v.visit(this, context);
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/BooleanPath.java
Patch:
@@ -50,7 +50,7 @@ public BooleanPath(String var) {
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(pathMixin, context);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/CollectionPath.java
Patch:
@@ -68,7 +68,7 @@ public CollectionPath(Class<? super E> type, Class<Q> queryType, PathMetadata<?>
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(pathMixin, context);
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/ComparablePath.java
Patch:
@@ -52,7 +52,7 @@ public ComparablePath(Class<? extends T> type, String var) {
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(pathMixin, context);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/DatePath.java
Patch:
@@ -51,7 +51,7 @@ public DatePath(Class<? extends T> type, String var) {
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(pathMixin, context);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/DateTimePath.java
Patch:
@@ -50,7 +50,7 @@ public DateTimePath(Class<? extends T> type, String var) {
 
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(pathMixin, context);
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/DslPath.java
Patch:
@@ -50,7 +50,7 @@ public DslPath(Class<? extends T> type, String var) {
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(pathMixin, context);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/EnumPath.java
Patch:
@@ -50,7 +50,7 @@ public EnumPath(Class<? extends T> type, String var) {
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(pathMixin, context);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/ListPath.java
Patch:
@@ -74,7 +74,7 @@ public ListPath(Class<? super E> elementType, Class<Q> queryType, PathMetadata<?
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(pathMixin, context);
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/MapPath.java
Patch:
@@ -72,7 +72,7 @@ public MapPath(Class<? super K> keyType, Class<? super V> valueType, Class<E> qu
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(pathMixin, context);
     }
 
     protected PathMetadata<K> forMapAccess(K key){

File: querydsl-core/src/main/java/com/mysema/query/types/path/NumberPath.java
Patch:
@@ -50,7 +50,7 @@ public NumberPath(Class<? extends T> type, String var) {
 
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(pathMixin, context);
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/SetPath.java
Patch:
@@ -68,7 +68,7 @@ public SetPath(Class<? super E> type, Class<Q> queryType, PathMetadata<?> metada
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(pathMixin, context);
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/SimplePath.java
Patch:
@@ -46,7 +46,7 @@ public SimplePath(Class<? extends T> type, PathMetadata<?> metadata) {
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(pathMixin, context);
     }
 
     public SimplePath(Class<? extends T> type, String var) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/StringPath.java
Patch:
@@ -49,7 +49,7 @@ public StringPath(String var) {
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(pathMixin, context);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/TimePath.java
Patch:
@@ -50,7 +50,7 @@ public TimePath(Class<? extends T> type, String var) {
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(pathMixin, context);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/query/BooleanSubQuery.java
Patch:
@@ -43,13 +43,13 @@ public BooleanSubQuery(QueryMetadata md) {
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(subQueryMixin, context);
     }
 
     @Override
     public BooleanExpression exists() {
         if (exists == null) {
-            exists = BooleanOperation.create(Ops.EXISTS, this);
+            exists = BooleanOperation.create(Ops.EXISTS, mixin);
         }
         return exists;
     }

File: querydsl-core/src/main/java/com/mysema/query/types/query/ComparableSubQuery.java
Patch:
@@ -47,13 +47,13 @@ public ComparableSubQuery(Class<T> type, QueryMetadata md) {
 
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(subQueryMixin, context);
     }
     
     @Override
     public BooleanExpression exists() {
         if (exists == null) {
-            exists = BooleanOperation.create(Ops.EXISTS, this);
+            exists = BooleanOperation.create(Ops.EXISTS, mixin);
         }
         return exists;
     }

File: querydsl-core/src/main/java/com/mysema/query/types/query/DateSubQuery.java
Patch:
@@ -46,13 +46,13 @@ public DateSubQuery(Class<T> type, QueryMetadata md) {
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(subQueryMixin, context);
     }
 
     @Override
     public BooleanExpression exists() {
         if (exists == null) {
-            exists = BooleanOperation.create(Ops.EXISTS, this);
+            exists = BooleanOperation.create(Ops.EXISTS, mixin);
         }
         return exists;
     }

File: querydsl-core/src/main/java/com/mysema/query/types/query/DateTimeSubQuery.java
Patch:
@@ -46,13 +46,13 @@ public DateTimeSubQuery(Class<T> type, QueryMetadata md) {
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(subQueryMixin, context);
     }
 
     @Override
     public BooleanExpression exists() {
         if (exists == null) {
-            exists = BooleanOperation.create(Ops.EXISTS, this);
+            exists = BooleanOperation.create(Ops.EXISTS, mixin);
         }
         return exists;
     }

File: querydsl-core/src/main/java/com/mysema/query/types/query/ListSubQuery.java
Patch:
@@ -65,7 +65,7 @@ public ListSubQuery(Class<T> elementType, QueryMetadata md) {
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(subQueryMixin, context);
     }
 
     //@Override
@@ -100,7 +100,7 @@ private NumberExpression<Long> count(Operator<Number> operator) {
     @Override
     public BooleanExpression exists() {
         if (exists == null){
-            exists = BooleanOperation.create(Ops.EXISTS, this);
+            exists = BooleanOperation.create(Ops.EXISTS, mixin);
         }
         return exists;
     }

File: querydsl-core/src/main/java/com/mysema/query/types/query/NumberSubQuery.java
Patch:
@@ -46,13 +46,13 @@ public NumberSubQuery(Class<T> type, QueryMetadata md) {
 
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(subQueryMixin, context);
     }
     
     @Override
     public BooleanExpression exists() {
         if (exists == null) {
-            exists = BooleanOperation.create(Ops.EXISTS, this);
+            exists = BooleanOperation.create(Ops.EXISTS, mixin);
         }
         return exists;
     }

File: querydsl-core/src/main/java/com/mysema/query/types/query/SimpleSubQuery.java
Patch:
@@ -46,13 +46,13 @@ public SimpleSubQuery(Class<T> type, QueryMetadata md) {
 
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(subQueryMixin, context);
     }
     
     @Override
     public BooleanExpression exists() {
         if (exists == null) {
-            exists = BooleanOperation.create(Ops.EXISTS, this);
+            exists = BooleanOperation.create(Ops.EXISTS, mixin);
         }
         return exists;
     }

File: querydsl-core/src/main/java/com/mysema/query/types/query/StringSubQuery.java
Patch:
@@ -44,13 +44,13 @@ public StringSubQuery(QueryMetadata md) {
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(subQueryMixin, context);
     }
 
     @Override
     public BooleanExpression exists() {
         if (exists == null) {
-            exists = BooleanOperation.create(Ops.EXISTS, this);
+            exists = BooleanOperation.create(Ops.EXISTS, mixin);
         }
         return exists;
     }

File: querydsl-core/src/main/java/com/mysema/query/types/query/TimeSubQuery.java
Patch:
@@ -46,13 +46,13 @@ public TimeSubQuery(Class<T> type, QueryMetadata md) {
 
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(subQueryMixin, context);
     }
     
     @Override
     public BooleanExpression exists() {
         if (exists == null) {
-            exists = BooleanOperation.create(Ops.EXISTS, this);
+            exists = BooleanOperation.create(Ops.EXISTS, mixin);
         }
         return exists;
     }

File: querydsl-core/src/main/java/com/mysema/query/types/template/BooleanTemplate.java
Patch:
@@ -54,7 +54,7 @@ public BooleanTemplate(Template template, List<?> args) {
 
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(templateMixin, context);
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/template/ComparableTemplate.java
Patch:
@@ -51,7 +51,7 @@ public ComparableTemplate(Class<T> type, Template template, List<?> args) {
 
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(templateMixin, context);
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/template/DateTemplate.java
Patch:
@@ -51,7 +51,7 @@ public DateTemplate(Class<T> type, Template template, List<?> args) {
 
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(templateMixin, context);
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/template/DateTimeTemplate.java
Patch:
@@ -51,7 +51,7 @@ public DateTimeTemplate(Class<T> type, Template template, List<?> args) {
 
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(templateMixin, context);
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/template/DslTemplate.java
Patch:
@@ -51,7 +51,7 @@ public DslTemplate(Class<? extends T> type, Template template, List<?> args) {
 
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(templateMixin, context);
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/template/EnumTemplate.java
Patch:
@@ -51,7 +51,7 @@ public EnumTemplate(Class<T> type, Template template, List<?> args) {
 
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(templateMixin, context);
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/template/NumberTemplate.java
Patch:
@@ -59,7 +59,7 @@ public NumberTemplate(Class<T> type, Template template, List<?> args) {
 
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(templateMixin, context);
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/template/SimpleTemplate.java
Patch:
@@ -51,7 +51,7 @@ public SimpleTemplate(Class<? extends T> type, Template template, List<?> args)
      
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(templateMixin, context);
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/template/StringTemplate.java
Patch:
@@ -50,7 +50,7 @@ public StringTemplate(Template template, List<?> args) {
 
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(templateMixin, context);
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/template/TimeTemplate.java
Patch:
@@ -51,7 +51,7 @@ public TimeTemplate(Class<T> type, Template template, List<?> args) {
     
     @Override
     public final <R,C> R accept(Visitor<R,C> v, C context) {
-        return v.visit(this, context);
+        return v.visit(templateMixin, context);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/BooleanOperation.java
Patch:
@@ -37,15 +37,15 @@ public static BooleanExpression create(Operator<? super Boolean> op, Expression<
         return new BooleanOperation(op, args);
     }
 
-    private final Operation<Boolean> opMixin;
+    private final OperationImpl<Boolean> opMixin;
 
     protected BooleanOperation(Operator<? super Boolean> op, Expression<?>... args) {
         this(op, Arrays.asList(args));
     }
 
     protected BooleanOperation(Operator<? super Boolean> op, List<Expression<?>> args) {
         super(new OperationImpl<Boolean>(Boolean.class, op, args));
-        opMixin = (Operation<Boolean>)mixin;
+        opMixin = (OperationImpl<Boolean>)mixin;
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ComparableOperation.java
Patch:
@@ -47,15 +47,15 @@ public static <D extends Comparable<?>> ComparableExpression<D> create(Class<D>
         return new ComparableOperation<D>(type, op, args);
     }
 
-    private final Operation<T> opMixin;
+    private final OperationImpl<T> opMixin;
 
     protected ComparableOperation(Class<T> type, Operator<? super T> op, Expression<?>... args) {
         this(type, op, Arrays.asList(args));
     }
 
     protected ComparableOperation(Class<T> type, Operator<? super T> op, List<Expression<?>> args) {
         super(new OperationImpl<T>(type, op, args));
-        this.opMixin = (Operation<T>)mixin;
+        this.opMixin = (OperationImpl<T>)mixin;
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/DateOperation.java
Patch:
@@ -47,15 +47,15 @@ public static <D extends Comparable<?>> DateExpression<D> create(Class<D> type,
         return new DateOperation<D>(type, op, args);
     }
 
-    private final Operation<T> opMixin;
+    private final OperationImpl<T> opMixin;
 
     protected DateOperation(Class<T> type, Operator<? super T> op, Expression<?>... args) {
         this(type, op, Arrays.asList(args));
     }
 
     protected DateOperation(Class<T> type, Operator<? super T> op, List<Expression<?>> args) {
         super(new OperationImpl<T>(type, op, args));
-        this.opMixin = (Operation<T>)mixin;
+        this.opMixin = (OperationImpl<T>)mixin;
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/DateTimeOperation.java
Patch:
@@ -46,15 +46,15 @@ public static <D extends Comparable<?>> DateTimeExpression<D> create(Class<D> ty
         return new DateTimeOperation<D>(type, op, args);
     }
 
-    private final Operation<T> opMixin;
+    private final OperationImpl<T> opMixin;
 
     protected DateTimeOperation(Class<T> type, Operator<? super T> op, Expression<?>... args) {
         this(type, op, Arrays.asList(args));
     }
 
     protected DateTimeOperation(Class<T> type, Operator<? super T> op, List<Expression<?>> args) {
         super(new OperationImpl<T>(type, op, args));
-        this.opMixin = (Operation<T>)mixin;
+        this.opMixin = (OperationImpl<T>)mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/DslOperation.java
Patch:
@@ -46,15 +46,15 @@ public static <D> DslExpression<D> create(Class<D> type, Operator<? super D> op,
         return new DslOperation<D>(type, op, args);
     }
 
-    private final Operation<T> opMixin;
+    private final OperationImpl<T> opMixin;
 
     protected DslOperation(Class<T> type, Operator<? super T> op, Expression<?>... args) {
         this(type, op, Arrays.asList(args));
     }
 
     protected DslOperation(Class<T> type, Operator<? super T> op, List<Expression<?>> args) {
         super(new OperationImpl<T>(type, op, args));
-        this.opMixin = (Operation<T>)mixin;
+        this.opMixin = (OperationImpl<T>)mixin;
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EnumOperation.java
Patch:
@@ -46,15 +46,15 @@ public static <D extends Enum<D>> EnumExpression<D> create(Class<? extends D> ty
         return new EnumOperation<D>(type, op, args);
     }
 
-    private final Operation<T> opMixin;
+    private final OperationImpl<T> opMixin;
 
     protected EnumOperation(Class<? extends T> type, Operator<? super T> op, Expression<?>... args) {
         this(type, op, Arrays.asList(args));
     }
 
     protected EnumOperation(Class<? extends T> type, Operator<? super T> op, List<Expression<?>> args) {
         super(new OperationImpl<T>(type, op, args));
-        this.opMixin = (Operation<T>)mixin;
+        this.opMixin = (OperationImpl<T>)mixin;
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/NumberOperation.java
Patch:
@@ -48,15 +48,15 @@ public static <D extends Number & Comparable<?>> NumberExpression<D> create(Clas
         return new NumberOperation<D>(type, op, args);
     }
 
-    private final Operation<T> opMixin;
+    private final OperationImpl<T> opMixin;
 
     protected NumberOperation(Class<? extends T> type, Operator<? super T> op, Expression<?>... args) {
         this(type, op, Arrays.asList(args));
     }
 
     protected NumberOperation(Class<? extends T> type, Operator<? super T> op, List<Expression<?>> args) {
         super(new OperationImpl<T>(type, op, args));
-        this.opMixin = (Operation<T>)mixin;
+        this.opMixin = (OperationImpl<T>)mixin;
     }
 
     @SuppressWarnings("unchecked")

File: querydsl-core/src/main/java/com/mysema/query/types/expr/SimpleOperation.java
Patch:
@@ -46,15 +46,15 @@ public static <D> SimpleExpression<D> create(Class<D> type, Operator<? super D>
         return new SimpleOperation<D>(type, op, args);
     }
 
-    private final Operation< T> opMixin;
+    private final OperationImpl< T> opMixin;
 
     protected SimpleOperation(Class<T> type, Operator<? super T> op, Expression<?>... args) {
         this(type, op, Arrays.asList(args));
     }
 
     protected SimpleOperation(Class<T> type, Operator<? super T> op, List<Expression<?>> args) {
         super(new OperationImpl<T>(type, op, args));
-        this.opMixin = (Operation<T>)mixin;
+        this.opMixin = (OperationImpl<T>)mixin;
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/StringOperation.java
Patch:
@@ -36,15 +36,15 @@ public static StringExpression create(Operator<? super String> op, Expression<?>
         return new StringOperation(op, args);
     }
 
-    private final Operation<String> opMixin;
+    private final OperationImpl<String> opMixin;
 
     protected StringOperation(Operator<? super String> op, Expression<?>... args) {
         this(op, Arrays.asList(args));
     }
 
     protected StringOperation(Operator<? super String> op, List<Expression<?>> args) {
         super(new OperationImpl<String>(String.class, op, args));
-        this.opMixin = (Operation<String>)mixin;
+        this.opMixin = (OperationImpl<String>)mixin;
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/TimeOperation.java
Patch:
@@ -46,15 +46,15 @@ public static <D extends Comparable<?>> TimeExpression<D> create(Class<D> type,
         return new TimeOperation<D>(type, op, args);
     }
 
-    private final Operation<T> opMixin;
+    private final OperationImpl<T> opMixin;
 
     protected TimeOperation(Class<T> type, Operator<? super T> op, Expression<?>... args) {
         this(type, op, Arrays.asList(args));
     }
 
     protected TimeOperation(Class<T> type, Operator<? super T> op, List<Expression<?>> args) {
         super(new OperationImpl<T>(type, op, args));
-        this.opMixin = (Operation<T>)mixin;
+        this.opMixin = (OperationImpl<T>)mixin;
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/ArrayPath.java
Patch:
@@ -43,7 +43,7 @@ public class ArrayPath<E> extends SimpleExpression<E[]> implements Path<E[]>, Ar
 
     private final Class<E> componentType;
 
-    private final Path<E[]> pathMixin;
+    private final PathImpl<E[]> pathMixin;
 
     @Nullable
     private volatile NumberExpression<Integer> size;
@@ -59,7 +59,7 @@ public ArrayPath(Class<? super E[]> type, Path<?> parent, String property) {
     @SuppressWarnings("unchecked")
     public ArrayPath(Class<? super E[]> type, PathMetadata<?> metadata) {
         super(new PathImpl<E[]>((Class)type, metadata));
-        this.pathMixin = (Path<E[]>)mixin;
+        this.pathMixin = (PathImpl<E[]>)mixin;
         this.componentType = (Class<E>)type.getComponentType();
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/BeanPath.java
Patch:
@@ -49,7 +49,7 @@ public class BeanPath<T> extends SimpleExpression<T> implements Path<T> {
     @Nullable
     private final PathInits inits;
 
-    private final Path<T> pathMixin;
+    private final PathImpl<T> pathMixin;
 
     public BeanPath(Class<? extends T> type, String variable) {
         this(type, PathMetadataFactory.forVariable(variable), null);
@@ -65,7 +65,7 @@ public BeanPath(Class<? extends T> type, PathMetadata<?> metadata) {
 
     public BeanPath(Class<? extends T> type, PathMetadata<?> metadata, @Nullable PathInits inits) {
         super(new PathImpl<T>(type, metadata));
-        this.pathMixin = (Path<T>)mixin;
+        this.pathMixin = (PathImpl<T>)mixin;
         this.inits = inits;
     }
     

File: querydsl-core/src/main/java/com/mysema/query/types/path/BooleanPath.java
Patch:
@@ -33,15 +33,15 @@ public class BooleanPath extends BooleanExpression implements Path<Boolean> {
 
     private static final long serialVersionUID = 6590516706769430565L;
 
-    private final Path<Boolean> pathMixin;
+    private final PathImpl<Boolean> pathMixin;
 
     public BooleanPath(Path<?> parent, String property) {
         this(PathMetadataFactory.forProperty(parent, property));
     }
 
     public BooleanPath(PathMetadata<?> metadata) {
         super(new PathImpl<Boolean>(Boolean.class, metadata));
-        this.pathMixin = (Path<Boolean>)mixin;
+        this.pathMixin = (PathImpl<Boolean>)mixin;
     }
 
     public BooleanPath(String var) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/CollectionPath.java
Patch:
@@ -39,7 +39,7 @@ public class CollectionPath<E, Q extends SimpleExpression<? super E>> extends Co
 
     private final Class<E> elementType;
 
-    private final Path<Collection<E>> pathMixin;
+    private final PathImpl<Collection<E>> pathMixin;
 
     @Nullable
     private transient Q any;
@@ -63,7 +63,7 @@ public CollectionPath(Class<? super E> type, Class<Q> queryType, PathMetadata<?>
         super(new PathImpl<Collection<E>>((Class)Collection.class, metadata), inits);
         this.elementType = (Class<E>)type;
         this.queryType = queryType;
-        this.pathMixin = (Path<Collection<E>>)mixin;
+        this.pathMixin = (PathImpl<Collection<E>>)mixin;
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/CollectionPathBase.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.mysema.query.types.ExpressionException;
 import com.mysema.query.types.Path;
+import com.mysema.query.types.PathImpl;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.expr.CollectionExpressionBase;
 import com.mysema.query.types.expr.SimpleExpression;
@@ -45,7 +46,7 @@ public abstract class CollectionPathBase<C extends Collection<E>, E, Q extends S
 
     private final PathInits inits;
     
-    public CollectionPathBase(Path<C> mixin, PathInits inits) {
+    public CollectionPathBase(PathImpl<C> mixin, PathInits inits) {
         super(mixin);
         this.inits = inits;
     }

File: querydsl-core/src/main/java/com/mysema/query/types/path/ComparablePath.java
Patch:
@@ -35,15 +35,15 @@ public class ComparablePath<T extends Comparable> extends ComparableExpression<T
 
     private static final long serialVersionUID = -7434767743611671666L;
 
-    private final Path<T> pathMixin;
+    private final PathImpl<T> pathMixin;
 
     public ComparablePath(Class<? extends T> type, Path<?> parent, String property) {
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
     public ComparablePath(Class<? extends T> type, PathMetadata<?> metadata) {
         super(new PathImpl<T>(type, metadata));
-        this.pathMixin = (Path<T>)mixin;
+        this.pathMixin = (PathImpl<T>)mixin;
     }
 
     public ComparablePath(Class<? extends T> type, String var) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/DatePath.java
Patch:
@@ -34,15 +34,15 @@ public class DatePath<T extends Comparable> extends DateExpression<T> implements
 
     private static final long serialVersionUID = -6030609920388740246L;
 
-    private final Path<T> pathMixin;
+    private final PathImpl<T> pathMixin;
 
     public DatePath(Class<? extends T> type, Path<?> parent, String property) {
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
     public DatePath(Class<? extends T> type, PathMetadata<?> metadata) {
         super(new PathImpl<T>(type, metadata));
-        this.pathMixin = (Path<T>)mixin;
+        this.pathMixin = (PathImpl<T>)mixin;
     }
 
     public DatePath(Class<? extends T> type, String var) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/DateTimePath.java
Patch:
@@ -33,15 +33,15 @@ public class DateTimePath<T extends Comparable> extends DateTimeExpression<T> im
 
     private static final long serialVersionUID = -2807916228198184631L;
 
-    private final Path<T> pathMixin;
+    private final PathImpl<T> pathMixin;
 
     public DateTimePath(Class<? extends T> type, Path<?> parent, String property) {
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
     public DateTimePath(Class<? extends T> type, PathMetadata<?> metadata) {
         super(new PathImpl<T>(type, metadata));
-        this.pathMixin = (Path<T>)mixin;
+        this.pathMixin = (PathImpl<T>)mixin;
     }
 
     public DateTimePath(Class<? extends T> type, String var) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/DslPath.java
Patch:
@@ -33,15 +33,15 @@ public class DslPath<T> extends DslExpression<T> implements Path<T> {
 
     private static final long serialVersionUID = 3088836955328191852L;
 
-    private final Path<T> pathMixin;
+    private final PathImpl<T> pathMixin;
 
     public DslPath(Class<? extends T> type, Path<?> parent, String property) {
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
     public DslPath(Class<? extends T> type, PathMetadata<?> metadata) {
         super(new PathImpl<T>(type, metadata));
-        this.pathMixin = (Path<T>)mixin;
+        this.pathMixin = (PathImpl<T>)mixin;
     }
 
     public DslPath(Class<? extends T> type, String var) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/EnumPath.java
Patch:
@@ -33,15 +33,15 @@ public class EnumPath<T extends Enum<T>> extends EnumExpression<T> implements Pa
 
     private static final long serialVersionUID = 338191992784020563L;
 
-    private final Path<T> pathMixin;
+    private final PathImpl<T> pathMixin;
 
     public EnumPath(Class<? extends T> type, Path<?> parent, String property) {
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
     public EnumPath(Class<? extends T> type, PathMetadata<?> metadata) {
         super(new PathImpl<T>(type, metadata));
-        this.pathMixin = (Path<T>)mixin;
+        this.pathMixin = (PathImpl<T>)mixin;
     }
 
     public EnumPath(Class<? extends T> type, String var) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/ListPath.java
Patch:
@@ -45,7 +45,7 @@ public class ListPath<E, Q extends SimpleExpression<? super E>> extends Collecti
 
     private final Class<E> elementType;
 
-    private final Path<List<E>> pathMixin;
+    private final PathImpl<List<E>> pathMixin;
 
     private final Class<Q> queryType;
 
@@ -60,7 +60,6 @@ public ListPath(Class<? super E> elementType, Class<Q> queryType, Path<?> parent
         this(elementType, queryType, PathMetadataFactory.forProperty(parent, property));   
     }
     
-    @SuppressWarnings("unchecked")
     public ListPath(Class<? super E> elementType, Class<Q> queryType, PathMetadata<?> metadata) {
         this(elementType, queryType, metadata, PathInits.DIRECT);
     }
@@ -70,7 +69,7 @@ public ListPath(Class<? super E> elementType, Class<Q> queryType, PathMetadata<?
         super(new PathImpl<List<E>>((Class)List.class, metadata), inits);
         this.elementType = (Class<E>)elementType;
         this.queryType = queryType;
-        this.pathMixin = (Path<List<E>>)mixin;
+        this.pathMixin = (PathImpl<List<E>>)mixin;
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/MapPath.java
Patch:
@@ -44,7 +44,7 @@ public class MapPath<K, V, E extends SimpleExpression<? super V>> extends MapExp
 
     private final Class<K> keyType;
 
-    private final Path<Map<K,V>> pathMixin;
+    private final PathImpl<Map<K,V>> pathMixin;
 
     private final Class<E> queryType;
 
@@ -67,7 +67,7 @@ public MapPath(Class<? super K> keyType, Class<? super V> valueType, Class<E> qu
         this.keyType = (Class<K>) keyType;
         this.valueType = (Class<V>) valueType;
         this.queryType = queryType;
-        this.pathMixin = (Path<Map<K,V>>)mixin;
+        this.pathMixin = (PathImpl<Map<K,V>>)mixin;
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/NumberPath.java
Patch:
@@ -33,15 +33,15 @@ public class NumberPath<T extends Number & Comparable<?>> extends NumberExpressi
 
     private static final long serialVersionUID = 338191992784020563L;
 
-    private final Path<T> pathMixin;
+    private final PathImpl<T> pathMixin;
 
     public NumberPath(Class<? extends T> type, Path<?> parent, String property) {
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
     public NumberPath(Class<? extends T> type, PathMetadata<?> metadata) {
         super(new PathImpl<T>(type, metadata));
-        this.pathMixin = (Path<T>)mixin;
+        this.pathMixin = (PathImpl<T>)mixin;
     }
 
     public NumberPath(Class<? extends T> type, String var) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/SetPath.java
Patch:
@@ -39,7 +39,7 @@ public class SetPath<E, Q extends SimpleExpression<? super E>> extends Collectio
 
     private final Class<E> elementType;
 
-    private final Path<Set<E>> pathMixin;
+    private final PathImpl<Set<E>> pathMixin;
     
     @Nullable
     private transient Q any;
@@ -63,7 +63,7 @@ public SetPath(Class<? super E> type, Class<Q> queryType, PathMetadata<?> metada
         super(new PathImpl<Set<E>>((Class)Set.class, metadata), inits);
         this.elementType = (Class<E>)type;
         this.queryType = queryType;
-        this.pathMixin = (Path<Set<E>>)mixin;
+        this.pathMixin = (PathImpl<Set<E>>)mixin;
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/SimplePath.java
Patch:
@@ -33,15 +33,15 @@ public class SimplePath<T> extends SimpleExpression<T> implements Path<T> {
 
     private static final long serialVersionUID = 3088836955328191852L;
 
-    private final Path<T> pathMixin;
+    private final PathImpl<T> pathMixin;
 
     public SimplePath(Class<? extends T> type, Path<?> parent, String property) {
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
     public SimplePath(Class<? extends T> type, PathMetadata<?> metadata) {
         super(new PathImpl<T>(type, metadata));
-        this.pathMixin = (Path<T>)mixin;
+        this.pathMixin = (PathImpl<T>)mixin;
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/StringPath.java
Patch:
@@ -32,15 +32,15 @@ public class StringPath extends StringExpression implements Path<String> {
 
     private static final long serialVersionUID = 7983490925756833429L;
 
-    private final Path<String> pathMixin;
+    private final PathImpl<String> pathMixin;
 
     public StringPath(Path<?> parent, String property) {
         this(PathMetadataFactory.forProperty(parent, property));
     }
 
     public StringPath(PathMetadata<?> metadata) {
         super(new PathImpl<String>(String.class, metadata));
-        this.pathMixin = (Path<String>)mixin;
+        this.pathMixin = (PathImpl<String>)mixin;
     }
 
     public StringPath(String var) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/TimePath.java
Patch:
@@ -29,20 +29,19 @@
  *
  * @param <T> expression type
  */
-@SuppressWarnings({"unchecked"})
 public class TimePath<T extends Comparable> extends TimeExpression<T> implements Path<T> {
 
     private static final long serialVersionUID = -1432775001949467763L;
 
-    private final Path<T> pathMixin;
+    private final PathImpl<T> pathMixin;
 
     public TimePath(Class<? extends T> type, Path<?> parent, String property) {
         this(type, PathMetadataFactory.forProperty(parent, property));
     }
 
     public TimePath(Class<? extends T> type, PathMetadata<?> metadata) {
         super(new PathImpl<T>(type, metadata));
-        this.pathMixin = (Path<T>)mixin;
+        this.pathMixin = (PathImpl<T>)mixin;
     }
 
     public TimePath(Class<? extends T> type, String var) {

File: querydsl-core/src/main/java/com/mysema/query/types/query/BooleanSubQuery.java
Patch:
@@ -32,14 +32,14 @@ public final class BooleanSubQuery extends BooleanExpression implements Extended
 
     private static final long serialVersionUID = -64156984110154969L;
 
-    private final SubQueryExpression<Boolean> subQueryMixin;
+    private final SubQueryExpressionImpl<Boolean> subQueryMixin;
     
     @Nullable
     private volatile BooleanExpression exists;
 
     public BooleanSubQuery(QueryMetadata md) {
         super(new SubQueryExpressionImpl<Boolean>(Boolean.class, md));
-        subQueryMixin = (SubQueryExpression<Boolean>)mixin;
+        subQueryMixin = (SubQueryExpressionImpl<Boolean>)mixin;
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/query/ComparableSubQuery.java
Patch:
@@ -36,14 +36,14 @@ public final class ComparableSubQuery<T extends Comparable<?>> extends Comparabl
 
     private static final long serialVersionUID = -64156984110154969L;
 
-    private final SubQueryExpression<T> subQueryMixin;
+    private final SubQueryExpressionImpl<T> subQueryMixin;
 
     @Nullable
     private volatile BooleanExpression exists;
 
     public ComparableSubQuery(Class<T> type, QueryMetadata md) {
         super(new SubQueryExpressionImpl<T>(type, md));
-        subQueryMixin = (SubQueryExpression<T>)mixin;
+        subQueryMixin = (SubQueryExpressionImpl<T>)mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/query/DateSubQuery.java
Patch:
@@ -35,14 +35,14 @@ public final class DateSubQuery<T extends Comparable<?>> extends DateExpression<
 
     private static final long serialVersionUID = -64156984110154969L;
 
-    private final SubQueryExpression<T> subQueryMixin;
+    private final SubQueryExpressionImpl<T> subQueryMixin;
 
     @Nullable
     private volatile BooleanExpression exists;
 
     public DateSubQuery(Class<T> type, QueryMetadata md) {
         super(new SubQueryExpressionImpl<T>(type, md));
-        subQueryMixin = (SubQueryExpression<T>)mixin;
+        subQueryMixin = (SubQueryExpressionImpl<T>)mixin;
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/query/DateTimeSubQuery.java
Patch:
@@ -35,14 +35,14 @@ public final class DateTimeSubQuery<T extends Comparable<?>> extends DateTimeExp
 
     private static final long serialVersionUID = -64156984110154969L;
 
-    private final SubQueryExpression<T> subQueryMixin;
+    private final SubQueryExpressionImpl<T> subQueryMixin;
 
     @Nullable
     private volatile BooleanExpression exists;
 
     public DateTimeSubQuery(Class<T> type, QueryMetadata md) {
         super(new SubQueryExpressionImpl<T>(type, md));
-        subQueryMixin = (SubQueryExpression<T>)mixin;
+        subQueryMixin = (SubQueryExpressionImpl<T>)mixin;
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/query/ListSubQuery.java
Patch:
@@ -46,7 +46,7 @@ public final class ListSubQuery<T> extends CollectionExpressionBase<List<T>,T> i
 
     private final Class<T> elementType;
 
-    private final SubQueryExpression<List<T>> subQueryMixin;
+    private final SubQueryExpressionImpl<List<T>> subQueryMixin;
 
     @Nullable
     private volatile BooleanExpression exists;
@@ -61,7 +61,7 @@ public final class ListSubQuery<T> extends CollectionExpressionBase<List<T>,T> i
     public ListSubQuery(Class<T> elementType, QueryMetadata md) {
         super(new SubQueryExpressionImpl<List<T>>((Class)List.class, md));
         this.elementType = elementType;
-        this.subQueryMixin = (SubQueryExpression<List<T>>)mixin;
+        this.subQueryMixin = (SubQueryExpressionImpl<List<T>>)mixin;
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/query/NumberSubQuery.java
Patch:
@@ -35,14 +35,14 @@ public final class NumberSubQuery<T extends Number & Comparable<?>> extends Numb
 
     private static final long serialVersionUID = -64156984110154969L;
 
-    private final SubQueryExpression<T> subQueryMixin;
+    private final SubQueryExpressionImpl<T> subQueryMixin;
 
     @Nullable
     private volatile BooleanExpression exists;
 
     public NumberSubQuery(Class<T> type, QueryMetadata md) {
         super(new SubQueryExpressionImpl<T>(type, md));
-        subQueryMixin = (SubQueryExpression<T>)mixin;
+        subQueryMixin = (SubQueryExpressionImpl<T>)mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/query/SimpleSubQuery.java
Patch:
@@ -35,14 +35,14 @@ public final class SimpleSubQuery<T> extends DslExpression<T> implements Extende
 
     private static final long serialVersionUID = -64156984110154969L;
 
-    private final SubQueryExpression<T> subQueryMixin;
+    private final SubQueryExpressionImpl<T> subQueryMixin;
 
     @Nullable
     private volatile BooleanExpression exists;
 
     public SimpleSubQuery(Class<T> type, QueryMetadata md) {
         super(new SubQueryExpressionImpl<T>(type, md));
-        subQueryMixin = (SubQueryExpression<T>)mixin;
+        subQueryMixin = (SubQueryExpressionImpl<T>)mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/query/StringSubQuery.java
Patch:
@@ -33,14 +33,14 @@ public final class StringSubQuery extends StringExpression implements ExtendedSu
 
     private static final long serialVersionUID = -64156984110154969L;
 
-    private final SubQueryExpression<String> subQueryMixin;
+    private final SubQueryExpressionImpl<String> subQueryMixin;
     
     @Nullable
     private volatile BooleanExpression exists;
 
     public StringSubQuery(QueryMetadata md) {
         super(new SubQueryExpressionImpl<String>(String.class, md));
-        this.subQueryMixin = (SubQueryExpression<String>)mixin;
+        this.subQueryMixin = (SubQueryExpressionImpl<String>)mixin;
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/query/TimeSubQuery.java
Patch:
@@ -35,14 +35,14 @@ public final class TimeSubQuery<T extends Comparable<?>> extends TimeExpression<
 
     private static final long serialVersionUID = -64156984110154969L;
 
-    private final SubQueryExpression<T> subQueryMixin;
+    private final SubQueryExpressionImpl<T> subQueryMixin;
 
     @Nullable
     private volatile BooleanExpression exists;
 
     public TimeSubQuery(Class<T> type, QueryMetadata md) {
         super(new SubQueryExpressionImpl<T>(type, md));
-        subQueryMixin = (SubQueryExpression<T>)mixin;
+        subQueryMixin = (SubQueryExpressionImpl<T>)mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/template/BooleanTemplate.java
Patch:
@@ -45,11 +45,11 @@ public static BooleanExpression create(Template template, Object... args) {
     
     public static final BooleanExpression FALSE = create("false");
 
-    private final TemplateExpression<Boolean> templateMixin;
+    private final TemplateExpressionImpl<Boolean> templateMixin;
 
     public BooleanTemplate(Template template, List<?> args) {
         super(new TemplateExpressionImpl<Boolean>(Boolean.class, template, args));
-        this.templateMixin = (TemplateExpression<Boolean>)mixin;
+        this.templateMixin = (TemplateExpressionImpl<Boolean>)mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/template/ComparableTemplate.java
Patch:
@@ -42,11 +42,11 @@ public static <T extends Comparable<?>> ComparableExpression<T> create(Class<T>
         return new ComparableTemplate<T>(type, template, Arrays.asList(args));
     }
 
-    private final TemplateExpression<T> templateMixin;
+    private final TemplateExpressionImpl<T> templateMixin;
 
     public ComparableTemplate(Class<T> type, Template template, List<?> args) {
         super(new TemplateExpressionImpl<T>(type, template, args));
-        templateMixin = (TemplateExpression<T>)mixin;
+        templateMixin = (TemplateExpressionImpl<T>)mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/template/DateTemplate.java
Patch:
@@ -42,11 +42,11 @@ public static <T extends Comparable<?>> DateExpression<T> create(Class<T> type,
         return new DateTemplate<T>(type, template, Arrays.asList(args));
     }
 
-    private final TemplateExpression<T> templateMixin;
+    private final TemplateExpressionImpl<T> templateMixin;
 
     public DateTemplate(Class<T> type, Template template, List<?> args) {
         super(new TemplateExpressionImpl<T>(type, template, args));
-        templateMixin = (TemplateExpression<T>)mixin;
+        templateMixin = (TemplateExpressionImpl<T>)mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/template/DateTimeTemplate.java
Patch:
@@ -42,11 +42,11 @@ public static <T extends Comparable<?>> DateTimeExpression<T> create(Class<T> ty
         return new DateTimeTemplate<T>(type, template, Arrays.asList(args));
     }
 
-    private final TemplateExpression<T> templateMixin;
+    private final TemplateExpressionImpl<T> templateMixin;
 
     public DateTimeTemplate(Class<T> type, Template template, List<?> args) {
         super(new TemplateExpressionImpl<T>(type, template, args));
-        templateMixin = (TemplateExpression<T>)mixin;
+        templateMixin = (TemplateExpressionImpl<T>)mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/template/DslTemplate.java
Patch:
@@ -42,11 +42,11 @@ public static <T> DslExpression<T> create(Class<? extends T> type, Template temp
         return new DslTemplate<T>(type, template, Arrays.asList(args));
     }
 
-    private final TemplateExpression<T> templateMixin;
+    private final TemplateExpressionImpl<T> templateMixin;
 
     public DslTemplate(Class<? extends T> type, Template template, List<?> args) {
         super(new TemplateExpressionImpl<T>(type, template, args));
-        templateMixin = (TemplateExpression<T>)mixin;
+        templateMixin = (TemplateExpressionImpl<T>)mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/template/EnumTemplate.java
Patch:
@@ -42,11 +42,11 @@ public static <T extends Enum<T>> EnumExpression<T> create(Class<T> type, Templa
         return new EnumTemplate<T>(type, template, Arrays.asList(args));
     }
 
-    private final TemplateExpression<T> templateMixin;
+    private final TemplateExpressionImpl<T> templateMixin;
 
     public EnumTemplate(Class<T> type, Template template, List<?> args) {
         super(new TemplateExpressionImpl<T>(type, template, args));
-        templateMixin = (TemplateExpression<T>)mixin;
+        templateMixin = (TemplateExpressionImpl<T>)mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/template/NumberTemplate.java
Patch:
@@ -50,11 +50,11 @@ public static <T extends Number & Comparable<?>> NumberExpression<T> create(Clas
 
     public static final NumberExpression<Integer> ZERO = create(Integer.class, "0");
 
-    private final TemplateExpression<T> templateMixin;
+    private final TemplateExpressionImpl<T> templateMixin;
 
     public NumberTemplate(Class<T> type, Template template, List<?> args) {
         super(new TemplateExpressionImpl<T>(type, template, args));
-        templateMixin = (TemplateExpression<T>)mixin;
+        templateMixin = (TemplateExpressionImpl<T>)mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/template/SimpleTemplate.java
Patch:
@@ -42,11 +42,11 @@ public static <T> SimpleExpression<T> create(Class<? extends T> type, Template t
         return new SimpleTemplate<T>(type, template, Arrays.asList(args));
     }
 
-    private final TemplateExpression<T> templateMixin;
+    private final TemplateExpressionImpl<T> templateMixin;
 
     public SimpleTemplate(Class<? extends T> type, Template template, List<?> args) {
         super(new TemplateExpressionImpl<T>(type, template, args));
-        templateMixin = (TemplateExpression<T>)mixin;
+        templateMixin = (TemplateExpressionImpl<T>)mixin;
     }
      
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/template/StringTemplate.java
Patch:
@@ -41,11 +41,11 @@ public static StringExpression create(Template template, Object... args) {
         return new StringTemplate(template, Arrays.asList(args));
     }
 
-    private final TemplateExpression<String> templateMixin;
+    private final TemplateExpressionImpl<String> templateMixin;
 
     public StringTemplate(Template template, List<?> args) {
         super(new TemplateExpressionImpl<String>(String.class, template, args));
-        this.templateMixin = (TemplateExpression<String>)mixin;
+        this.templateMixin = (TemplateExpressionImpl<String>)mixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/template/TimeTemplate.java
Patch:
@@ -42,11 +42,11 @@ public static <T extends Comparable<?>> TimeTemplate<T> create(Class<T> type, Te
         return new TimeTemplate<T>(type, template, Arrays.asList(args));
     }
 
-    private final TemplateExpression<T> templateMixin;
+    private final TemplateExpressionImpl<T> templateMixin;
 
     public TimeTemplate(Class<T> type, Template template, List<?> args) {
         super(new TemplateExpressionImpl<T>(type, template, args));
-        templateMixin = (TemplateExpression<T>)mixin;
+        templateMixin = (TemplateExpressionImpl<T>)mixin;
     }
     
     @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/Configuration.java
Patch:
@@ -20,6 +20,7 @@
 import javax.annotation.Nullable;
 
 import com.mysema.query.sql.types.BigDecimalAsDoubleType;
+import com.mysema.query.sql.types.Null;
 import com.mysema.query.sql.types.Type;
 import com.mysema.query.sql.types.UntypedNullType;
 import com.mysema.query.types.Path;
@@ -114,7 +115,7 @@ public <T> int set(PreparedStatement stmt, Path<?> path, int i, T value) throws
 
     @SuppressWarnings("unchecked")
     private <T> Type<T> getType(@Nullable Path<?> path, Class<T> clazz) {
-        if (path != null && path.getMetadata().getParent() instanceof RelationalPath) {
+        if (path != null && !clazz.equals(Null.class) && path.getMetadata().getParent() instanceof RelationalPath) {
             String table = ((RelationalPath)path.getMetadata().getParent()).getTableName();
             String column = path.getMetadata().getName();
             Type<T> type = (Type)javaTypeMapping.getType(table, column);

File: querydsl-sql/src/main/java/com/mysema/query/sql/JDBCTypeMapping.java
Patch:
@@ -132,7 +132,7 @@ private Class<?> getNumericClass(int size, int digits) {
     
     @Nullable
     public Class<?> get(int sqlType, int size, int digits) {
-        if (sqlType == Types.NUMERIC) {
+        if (sqlType == Types.NUMERIC || sqlType == Types.DECIMAL) {
             return getNumericClass(size, digits);        
         } else if (types.containsKey(sqlType)) {
             return types.get(sqlType);

File: querydsl-sql/src/main/java/com/mysema/query/sql/JDBCTypeMapping.java
Patch:
@@ -132,7 +132,7 @@ private Class<?> getNumericClass(int size, int digits) {
     
     @Nullable
     public Class<?> get(int sqlType, int size, int digits) {
-        if (sqlType == Types.NUMERIC) {
+        if (sqlType == Types.NUMERIC || sqlType == Types.DECIMAL) {
             return getNumericClass(size, digits);        
         } else if (types.containsKey(sqlType)) {
             return types.get(sqlType);

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLExpressions.java
Patch:
@@ -13,7 +13,6 @@
  */
 package com.mysema.query.sql;
 
-import com.mysema.query.support.Expressions;
 import com.mysema.query.types.ConstantImpl;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Ops;

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLTemplates.java
Patch:
@@ -478,8 +478,8 @@ public String quoteIdentifier(String identifier) {
     protected boolean requiresQuotes(String identifier) {
         for (int i = 0; i < identifier.length(); i++) {
             char ch = identifier.charAt(i);
-            //0-9,a-z,A-Z
-            if (ch < '0' || (ch > '9' && ch < 'A') || (ch > 'Z' && ch < 'a') || ch > 'z') {
+            //0-9,a-z,A-Z_
+            if (ch < '0' || (ch > '9' && ch < 'A') || (ch > 'Z' && ch < '_') || ch > 'z') {
                 return true;
             }            
         }

File: querydsl-core/src/main/java/com/mysema/query/JoinExpression.java
Patch:
@@ -46,8 +46,8 @@ public final class JoinExpression implements Serializable{
      * @param target
      */
     public JoinExpression(JoinType type, Expression<?> target) {
-        this.type = Assert.notNull(type,"type");
-        this.target = Assert.notNull(target,"target");
+        this.type = type;
+        this.target = target;
     }
 
     public Predicate getCondition() {

File: querydsl-core/src/main/java/com/mysema/query/QueryFlag.java
Patch:
@@ -108,8 +108,8 @@ public QueryFlag(Position position, String flag) {
     }
     
     public QueryFlag(Position position, Expression<?> flag) {
-        this.position = Assert.notNull(position,"position");
-        this.flag = Assert.notNull(flag,"flag");        
+        this.position = position;
+        this.flag = flag;        
     }
 
     public Position getPosition() {

File: querydsl-core/src/main/java/com/mysema/query/support/CollectionAnyVisitor.java
Patch:
@@ -165,5 +165,7 @@ public Expression<?> visit(SubQueryExpression<?> expr, Context context) {
     public Expression<?> visit(ParamExpression<?> expr, Context context) {
         return expr;
     }
+    
+    protected CollectionAnyVisitor() {}
         
 }

File: querydsl-core/src/main/java/com/mysema/query/support/DetachableMixin.java
Patch:
@@ -52,7 +52,7 @@ public class DetachableMixin implements Detachable{
     private final QueryMixin<?> queryMixin;
 
     public DetachableMixin(QueryMixin<?> queryMixin){
-        this.queryMixin = Assert.notNull(queryMixin,"queryMixin");
+        this.queryMixin = queryMixin;
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/support/ProjectableAdapter.java
Patch:
@@ -34,7 +34,7 @@ public class ProjectableAdapter<P extends Projectable> implements Projectable {
     private final P projectable;
 
     public ProjectableAdapter(P projectable) {
-        this.projectable = Assert.notNull(projectable,"projectable");
+        this.projectable = projectable;
     }
 
     protected P getProjectable() {

File: querydsl-core/src/main/java/com/mysema/query/support/SerializerBase.java
Patch:
@@ -67,7 +67,7 @@ public SerializerBase(Templates templates) {
     }
     
     public SerializerBase(Templates templates, boolean dry) {
-        this.templates = Assert.notNull(templates,"templates");
+        this.templates = templates;
         this.dry = dry;
     }
     

File: querydsl-core/src/main/java/com/mysema/query/types/ArrayConstructorExpression.java
Patch:
@@ -42,7 +42,7 @@ public ArrayConstructorExpression(Expression<?>... args) {
     @SuppressWarnings("unchecked")
     public ArrayConstructorExpression(Class<T[]> type, Expression<T>... args) {
         super(type);
-        this.elementType = (Class<T>) Assert.notNull(type.getComponentType(),"componentType");
+        this.elementType = (Class<T>)type.getComponentType();
         this.args = Arrays.<Expression<?>>asList(args);
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/ConstantImpl.java
Patch:
@@ -170,7 +170,7 @@ public static Constant<String> create(String str, boolean populateCache) {
         if (STRINGS.containsKey(str)) {
             return STRINGS.get(str);
         } else {
-            Constant<String> rv = new ConstantImpl<String>(Assert.notNull(str,"str"));
+            Constant<String> rv = new ConstantImpl<String>(str);
             if (populateCache) {
                 STRINGS.put(str, rv);
             }

File: querydsl-core/src/main/java/com/mysema/query/types/OperatorImpl.java
Patch:
@@ -18,8 +18,6 @@
 import java.util.Arrays;
 import java.util.List;
 
-import com.mysema.commons.lang.Assert;
-
 /**
  * OperatorImpl is the default implementation of the {@link Operator} interface
  */
@@ -36,7 +34,7 @@ public OperatorImpl(String id, Class<?>... types) {
     }
 
     public OperatorImpl(String id, List<Class<?>> types) {
-        this.id = Assert.notNull(id,"id");
+        this.id = id;
         this.types = unmodifiableList(types);
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/ParamExpressionImpl.java
Patch:
@@ -15,8 +15,6 @@
 
 import java.util.UUID;
 
-import com.mysema.commons.lang.Assert;
-
 /**
  * ParamExpressionImpl defines a parameter in a query with an optional name
  *
@@ -34,7 +32,7 @@ public class ParamExpressionImpl<T> extends ExpressionBase<T> implements ParamEx
 
     public ParamExpressionImpl(Class<? extends T> type, String name) {
         super(type);
-        this.name = Assert.notNull(name, "name");
+        this.name = name;
         this.anon = false;
     }
     

File: querydsl-core/src/main/java/com/mysema/query/types/PathImpl.java
Patch:
@@ -44,7 +44,7 @@ public PathImpl(Class<? extends T> type, String variable) {
 
     public PathImpl(Class<? extends T> type, PathMetadata<?> metadata) {
         super(type);
-        this.metadata = Assert.notNull(metadata,"metadata");
+        this.metadata = metadata;
         this.root = metadata.getRoot() != null ? metadata.getRoot() : this;
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/TemplateExpressionImpl.java
Patch:
@@ -65,8 +65,8 @@ public TemplateExpressionImpl(Class<? extends T> type, Template template, Object
     
     public TemplateExpressionImpl(Class<? extends T> type, Template template, List<?> args){
         super(type);
-        this.args = Assert.notNull(args,"args");
-        this.template = Assert.notNull(template,"template");
+        this.args = args;
+        this.template = template;
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/ArrayPath.java
Patch:
@@ -61,7 +61,7 @@ public ArrayPath(Class<? super E[]> type, Path<?> parent, String property) {
     public ArrayPath(Class<? super E[]> type, PathMetadata<?> metadata) {
         super(new PathImpl<E[]>((Class)type, metadata));
         this.pathMixin = (Path<E[]>)mixin;
-        this.componentType = (Class<E>) Assert.notNull(type.getComponentType(),"componentType");
+        this.componentType = (Class<E>)type.getComponentType();
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/CollectionPath.java
Patch:
@@ -62,7 +62,7 @@ public CollectionPath(Class<? super E> type, Class<Q> queryType, PathMetadata<?>
     @SuppressWarnings("unchecked")
     public CollectionPath(Class<? super E> type, Class<Q> queryType, PathMetadata<?> metadata, PathInits inits) {
         super(new PathImpl<Collection<E>>((Class)Collection.class, metadata), inits);
-        this.elementType = (Class<E>) Assert.notNull(type,"type");
+        this.elementType = (Class<E>)type;
         this.queryType = queryType;
         this.pathMixin = (Path<Collection<E>>)mixin;
     }

File: querydsl-core/src/main/java/com/mysema/query/types/path/ListPath.java
Patch:
@@ -69,7 +69,7 @@ public ListPath(Class<? super E> elementType, Class<Q> queryType, PathMetadata<?
     @SuppressWarnings("unchecked")
     public ListPath(Class<? super E> elementType, Class<Q> queryType, PathMetadata<?> metadata, PathInits inits) {
         super(new PathImpl<List<E>>((Class)List.class, metadata), inits);
-        this.elementType = (Class<E>) Assert.notNull(elementType,"type");
+        this.elementType = (Class<E>)elementType;
         this.queryType = queryType;
         this.pathMixin = (Path<List<E>>)mixin;
     }

File: querydsl-core/src/main/java/com/mysema/query/types/path/SetPath.java
Patch:
@@ -62,7 +62,7 @@ public SetPath(Class<? super E> type, Class<Q> queryType, PathMetadata<?> metada
     @SuppressWarnings("unchecked")
     public SetPath(Class<? super E> type, Class<Q> queryType, PathMetadata<?> metadata, PathInits inits) {
         super(new PathImpl<Set<E>>((Class)Set.class, metadata), inits);
-        this.elementType = (Class<E>) Assert.notNull(type,"type");
+        this.elementType = (Class<E>)type;
         this.queryType = queryType;
         this.pathMixin = (Path<Set<E>>)mixin;
     }

File: querydsl-core/src/main/java/com/mysema/query/util/LimitingIterator.java
Patch:
@@ -48,7 +48,7 @@ public static <T> Iterator<T> create(Iterator<T> iterator, QueryModifiers modifi
     private final Iterator<E> original;
 
     LimitingIterator(Iterator<E> iterator, long limit) {
-        this.original = Assert.notNull(iterator,"iterator");
+        this.original = iterator;
         this.limit = limit;
     }
 

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/sql/SCalendar.java
Patch:
@@ -26,7 +26,7 @@ public class SCalendar extends com.mysema.query.sql.RelationalPathBase<SCalendar
 
     public final com.mysema.query.sql.ForeignKey<SCalendarHolidays> _fk31ce1edc591ebbc = createInvForeignKey(id, "Calendar_id");
 
-    public final com.mysema.query.sql.ForeignKey<SCalendarHOLIDAYS> _calendarHOLIDAYSCalendarIDFK = createInvForeignKey(id, "Calendar_ID");
+    public final com.mysema.query.sql.ForeignKey<SCalendarHOLIDAYS2> _calendarHOLIDAYSCalendarIDFK = createInvForeignKey(id, "Calendar_ID");
 
     public SCalendar(String variable) {
         super(SCalendar.class, forVariable(variable), "null", "calendar_");

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/sql/SEmployee.java
Patch:
@@ -44,7 +44,7 @@ public class SEmployee extends com.mysema.query.sql.RelationalPathBase<SEmployee
 
     public final com.mysema.query.sql.ForeignKey<SCompany> _company_CEOIDFK = createInvForeignKey(id, "ceo_id");
 
-    public final com.mysema.query.sql.ForeignKey<SEmployeeJOBFUNCTIONS> _employeeJOBFUNCTIONSEmployeeIDFK = createInvForeignKey(id, "Employee_ID");
+    public final com.mysema.query.sql.ForeignKey<SEmployeeJOBFUNCTIONS2> _employeeJOBFUNCTIONSEmployeeIDFK = createInvForeignKey(id, "Employee_ID");
 
     public final com.mysema.query.sql.ForeignKey<SEmployeeJobFunctions> _fk49690e2f75b8f5bc = createInvForeignKey(id, "Employee_id");
 

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/sql/SNamelist.java
Patch:
@@ -22,7 +22,7 @@ public class SNamelist extends com.mysema.query.sql.RelationalPathBase<SNamelist
 
     public final com.mysema.query.sql.PrimaryKey<SNamelist> primary = createPrimaryKey(id);
 
-    public final com.mysema.query.sql.ForeignKey<SNameListNAMES> _nameListNAMESNameListIDFK = createInvForeignKey(id, "NameList_ID");
+    public final com.mysema.query.sql.ForeignKey<SNameListNAMES2> _nameListNAMESNameListIDFK = createInvForeignKey(id, "NameList_ID");
 
     public final com.mysema.query.sql.ForeignKey<SNameListNames> _fkd6c82d7217b6c3fc = createInvForeignKey(id, "NameList_id");
 

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/sql/SOrder.java
Patch:
@@ -32,7 +32,7 @@ public class SOrder extends com.mysema.query.sql.RelationalPathBase<SOrder> {
 
     public final com.mysema.query.sql.ForeignKey<SOrder_item> _order_item_OrderIDFK = createInvForeignKey(id, "Order_ID");
 
-    public final com.mysema.query.sql.ForeignKey<SOrderDELIVEREDITEMINDICES> _orderDELIVEREDITEMINDICESOrderIDFK = createInvForeignKey(id, "Order_ID");
+    public final com.mysema.query.sql.ForeignKey<SOrderDELIVEREDITEMINDICES2> _orderDELIVEREDITEMINDICESOrderIDFK = createInvForeignKey(id, "Order_ID");
 
     public final com.mysema.query.sql.ForeignKey<SCustomer> _customer_CURRENTORDERIDFK = createInvForeignKey(id, "currentOrder_id");
 

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/sql/SPlayer.java
Patch:
@@ -24,7 +24,7 @@ public class SPlayer extends com.mysema.query.sql.RelationalPathBase<SPlayer> {
 
     public final com.mysema.query.sql.ForeignKey<SPlayerScores> _fkd5dc571fd8736d5c = createInvForeignKey(id, "Player_id");
 
-    public final com.mysema.query.sql.ForeignKey<SPlayerSCORES> _playerSCORESPlayerIDFK = createInvForeignKey(id, "Player_ID");
+    public final com.mysema.query.sql.ForeignKey<SPlayerSCORES2> _playerSCORESPlayerIDFK = createInvForeignKey(id, "Player_ID");
 
     public SPlayer(String variable) {
         super(SPlayer.class, forVariable(variable), "null", "player_");

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/sql/SShow.java
Patch:
@@ -22,7 +22,7 @@ public class SShow extends com.mysema.query.sql.RelationalPathBase<SShow> {
 
     public final com.mysema.query.sql.PrimaryKey<SShow> primary = createPrimaryKey(id);
 
-    public final com.mysema.query.sql.ForeignKey<SShowACTS> _showACTSShowIDFK = createInvForeignKey(id, "Show_ID");
+    public final com.mysema.query.sql.ForeignKey<SShowACTS2> _showACTSShowIDFK = createInvForeignKey(id, "Show_ID");
 
     public final com.mysema.query.sql.ForeignKey<SShowActs> _fk5f6ee03ab40105c = createInvForeignKey(id, "Show_id");
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -355,7 +355,7 @@ private <RT> CloseableIterator<RT> iterateSingle(QueryMetadata metadata, @Nullab
         String queryString = buildQueryString(false);
         logger.debug("query : {}", queryString);
         try {
-            PreparedStatement stmt = Assert.notNull(conn, "connection").prepareStatement(queryString);
+            PreparedStatement stmt = conn.prepareStatement(queryString);
             setParameters(stmt, constants, constantPaths, metadata.getParams());
             ResultSet rs = stmt.executeQuery();
 
@@ -531,7 +531,7 @@ private long unsafeCount() throws SQLException {
         PreparedStatement stmt = null;
         ResultSet rs = null;
         try {
-            stmt = Assert.notNull(conn, "connection").prepareStatement(queryString);
+            stmt = conn.prepareStatement(queryString);
             setParameters(stmt, constants, constantPaths, getMetadata().getParams());
             rs = stmt.executeQuery();
             rs.next();

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLQueryMixin.java
Patch:
@@ -30,11 +30,11 @@ public class SQLQueryMixin<T> extends QueryMixin<T> {
     public SQLQueryMixin() {}
 
     public SQLQueryMixin(QueryMetadata metadata) {
-        super(metadata);
+        super(metadata, false);
     }
 
     public SQLQueryMixin(T self, QueryMetadata metadata) {
-        super(self, metadata);
+        super(self, metadata, false);
     }
 
     public <P> T join(RelationalFunctionCall<P> target, Path<P> alias) {

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLDeleteClause.java
Patch:
@@ -65,8 +65,8 @@ public SQLDeleteClause(Connection connection, SQLTemplates templates, Relational
     
     public SQLDeleteClause(Connection connection, Configuration configuration, RelationalPath<?> entity) {
         super(configuration);
-        this.connection = Assert.notNull(connection,"connection");
-        this.entity = Assert.notNull(entity,"entity");
+        this.connection = connection;
+        this.entity = entity;
         metadata.addJoin(JoinType.DEFAULT, entity);
     }
     

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLInsertClause.java
Patch:
@@ -98,8 +98,8 @@ public SQLInsertClause(Connection connection, Configuration configuration, Relat
     
     public SQLInsertClause(Connection connection, Configuration configuration, RelationalPath<?> entity) {
         super(configuration);
-        this.connection = Assert.notNull(connection,"connection");
-        this.entity = Assert.notNull(entity,"entity");
+        this.connection = connection;
+        this.entity = entity;
         metadata.addJoin(JoinType.DEFAULT, entity);
     }
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLMergeClause.java
Patch:
@@ -84,8 +84,8 @@ public SQLMergeClause(Connection connection, SQLTemplates templates, RelationalP
     
     public SQLMergeClause(Connection connection, Configuration configuration, RelationalPath<?> entity) {
         super(configuration);
-        this.connection = Assert.notNull(connection,"connection");
-        this.entity = Assert.notNull(entity,"entity");
+        this.connection = connection;
+        this.entity = entity;
         metadata.addJoin(JoinType.DEFAULT, entity);
     }
     

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLUpdateClause.java
Patch:
@@ -75,8 +75,8 @@ public SQLUpdateClause(Connection connection, SQLTemplates templates, Relational
     
     public SQLUpdateClause(Connection connection, Configuration configuration, RelationalPath<?> entity) {
         super(configuration);
-        this.connection = Assert.notNull(connection,"connection");
-        this.entity = Assert.notNull(entity,"entity");
+        this.connection = connection;
+        this.entity = entity;
         metadata.addJoin(JoinType.DEFAULT, entity);
     }
     

File: querydsl-sql/src/test/java/com/mysema/query/QueryPerformanceTest.java
Patch:
@@ -28,7 +28,7 @@ public static void setUpClass() throws SQLException, ClassNotFoundException {
         Connections.initH2();        
         Connection conn = Connections.getConnection();        
         Statement stmt = conn.createStatement();
-        stmt.execute("create table companies (id identity, name varchar(30) unique not null);");        
+        stmt.execute("create or replace table companies (id identity, name varchar(30) unique not null);");        
         for (int i = 0; i < iterations; i++) {
             stmt.execute("insert into companies (name) values ('" + i + "')");
         }        

File: querydsl-core/src/main/java/com/mysema/query/types/PathImpl.java
Patch:
@@ -36,7 +36,7 @@ public class PathImpl<T> extends ExpressionBase<T> implements Path<T> {
     private final Path<?> root;
 
     @Nullable
-    private AnnotatedElement annotatedElement;
+    private transient AnnotatedElement annotatedElement;
     
     public PathImpl(Class<? extends T> type, String variable) {
         this(type, PathMetadataFactory.forVariable(variable));

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/Conversions.java
Patch:
@@ -58,4 +58,6 @@ private static boolean isCountAggConversion(Expression<?> expr) {
         return expr instanceof Operation && ((Operation)expr).getOperator() == Ops.AggOps.COUNT_AGG;
     }
     
+    private Conversions() {}
+    
 }

File: querydsl-core/src/main/java/com/mysema/util/BeanMap.java
Patch:
@@ -52,9 +52,9 @@ public class BeanMap extends AbstractMap<String, Object> implements Cloneable {
 
     private transient Object bean;
 
-    private transient HashMap<String, Method> readMethods = new HashMap<String, Method>();
-    private transient HashMap<String, Method> writeMethods = new HashMap<String, Method>();
-    private transient HashMap<String, Class<?>> types = new HashMap<String, Class<?>>();
+    private transient Map<String, Method> readMethods = new HashMap<String, Method>();
+    private transient Map<String, Method> writeMethods = new HashMap<String, Method>();
+    private transient Map<String, Class<?>> types = new HashMap<String, Class<?>>();
 
     /**
      * An empty array.  Used to invoke accessors via reflection.

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/hibernate/AbstractHibernateQuery.java
Patch:
@@ -183,7 +183,7 @@ private Query createQuery(String queryString, @Nullable QueryModifiers modifiers
             if (expr instanceof FactoryExpression<?>) {
                 query.setResultTransformer(new FactoryExpressionTransformer((FactoryExpression<?>) projection.get(0)));
             }
-        } else if (!forCount){
+        } else if (!forCount) {
             FactoryExpression<?> proj = FactoryExpressionUtils.wrap(projection);
             if (proj != null) {
                 query.setResultTransformer(new FactoryExpressionTransformer(proj));    

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/hibernate/sql/AbstractHibernateSQLQuery.java
Patch:
@@ -152,7 +152,6 @@ private Query createQuery(String queryString) {
         return query;
     }
 
-    @SuppressWarnings("unchecked")
     @Override
     public List<Tuple> list(Expression<?>[] projection) {
         return list(new QTuple(projection));

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/impl/AbstractJPAQuery.java
Patch:
@@ -188,6 +188,7 @@ private Query createQuery(String queryString, @Nullable QueryModifiers modifiers
             } else {
                 this.projection = (FactoryExpression<?>)projection.get(0);
                 if (wrapped != null) {
+                    this.projection = wrapped;
                     getMetadata().clearProjection();
                     getMetadata().addProjection(wrapped);
                 }

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLTemplates.java
Patch:
@@ -158,7 +158,7 @@ protected SQLTemplates(String quoteStr, char escape, boolean useQuotes) {
         
         // boolean
         add(Ops.AND, "{0} and {1}", 36);
-        add(Ops.NOT, "not {0}", 3);
+        add(Ops.NOT, "not {0}", 35);
         add(Ops.OR, "{0} or {1}", 38);
         add(Ops.XNOR, "{0} xnor {1}", 39);
         add(Ops.XOR, "{0} xor {1}", 39);
@@ -167,7 +167,7 @@ protected SQLTemplates(String quoteStr, char escape, boolean useQuotes) {
         add(Ops.MathOps.RANDOM, "rand()");
         add(Ops.MathOps.CEIL, "ceiling({0})");
         add(Ops.MathOps.POWER, "power({0},{1})");
-        add(Ops.MOD, "mod({0},{1})", 0);
+        add(Ops.MOD, "mod({0},{1})", -1);
 
         // date time
         add(Ops.DateTimeOps.CURRENT_DATE, "current_date");

File: querydsl-mongodb/src/main/java/com/mysema/query/mongodb/MongodbSerializer.java
Patch:
@@ -227,7 +227,7 @@ protected String getKeyForPath(Path<?> expr, PathMetadata<?> metadata) {
         if (expr.getType().equals(ObjectId.class)){
             return "_id";
         } else {
-            return metadata.getName();    
+            return metadata.getElement().toString();    
         }        
     }
 

File: querydsl-codegen/src/main/java/com/mysema/query/codegen/EntitySerializer.java
Patch:
@@ -525,7 +525,7 @@ protected void introInits(CodeWriter writer, EntityType model) throws IOExceptio
             String initsAsString = QUOTE + JOINER.join(inits) + QUOTE;
             writer.privateStaticFinal(PATH_INITS_TYPE, "INITS", "new PathInits(" + initsAsString + ")");
         } else if (model.hasEntityFields()) {
-            writer.privateStaticFinal(PATH_INITS_TYPE, "INITS", "PathInits.DIRECT");
+            writer.privateStaticFinal(PATH_INITS_TYPE, "INITS", "PathInits.DIRECT2");
         }
     }
 
@@ -806,7 +806,7 @@ private String getInits(Property property) {
         if (!property.getInits().isEmpty()) {
             return "INITS.get(\"" + property.getName() + "\")";
         } else {
-            return "PathInits.DIRECT";
+            return "PathInits.DIRECT2";
         }
     }
     

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathInits.java
Patch:
@@ -40,6 +40,8 @@ public class PathInits implements Serializable {
 
     public static final PathInits DIRECT  = new PathInits("*");
     
+    public static final PathInits DIRECT2  = new PathInits("*.*");
+    
     private final boolean initAllProps;
     
     private final PathInits defaultValue;

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLTemplates.java
Patch:
@@ -216,7 +216,7 @@ protected SQLTemplates(String quoteStr, char escape, boolean useQuotes) {
         class2type.put(java.sql.Timestamp.class, "timestamp");
     }
 
-    public void addClass2TypeMappings(String type, Class<?>... classes) {
+    protected void addClass2TypeMappings(String type, Class<?>... classes) {
         for (Class<?> cl : classes) {
             class2type.put(cl, type);
         }

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLTemplates.java
Patch:
@@ -169,7 +169,8 @@ protected SQLTemplates(String quoteStr, char escape, boolean useQuotes) {
 
         // date time
         add(Ops.DateTimeOps.CURRENT_DATE, "current_date");
-        add(Ops.DateTimeOps.CURRENT_TIME, "current_timestamp");
+        add(Ops.DateTimeOps.CURRENT_TIME, "current_time");
+        add(Ops.DateTimeOps.CURRENT_TIMESTAMP, "current_timestamp");
         add(Ops.DateTimeOps.MILLISECOND, "0");
         add(Ops.DateTimeOps.YEAR_MONTH, "year({0}) * 100 + month({0})");
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/ConfigurationTest.java
Patch:
@@ -36,15 +36,15 @@ public void Various(){
         configuration.register("person", "secureId", new EncryptedString());
         configuration.register("person", "gender",  new EnumByNameType<Gender>(Gender.class));
         configuration.register(new StringType());        
-        assertEquals(Gender.class, configuration.getJavaType(java.sql.Types.VARCHAR, "person", "gender"));
+        assertEquals(Gender.class, configuration.getJavaType(java.sql.Types.VARCHAR, 0,0,"person", "gender"));
     }
     
     @Test
     public void Custom_Type(){
         Configuration configuration = new Configuration(new H2Templates());
 //        configuration.setJavaType(Types.BLOB, InputStream.class);
         configuration.register(new InputStreamType());        
-        assertEquals(InputStream.class, configuration.getJavaType(Types.BLOB, "", ""));
+        assertEquals(InputStream.class, configuration.getJavaType(Types.BLOB, 0,0,"", ""));
     }
         
 }

File: querydsl-sql/src/test/java/com/mysema/query/sql/SQLTypeMappingTest.java
Patch:
@@ -27,7 +27,7 @@ public void Get() throws IllegalArgumentException, IllegalAccessException {
         for (Field field : java.sql.Types.class.getFields()){
             if (field.getType().equals(int.class)){
                 int val = field.getInt(null);
-                if (mapping.get(val) == null){
+                if (mapping.get(val,0,0) == null){
                     fail("Got no value for " + field.getName());
                 }
             }

File: querydsl-codegen/src/main/java/com/mysema/query/codegen/GenericExporter.java
Patch:
@@ -217,7 +217,7 @@ public void export(Class<?>...classes) {
     private void innerExport(){
         typeMappings = codegenModule.get(TypeMappings.class);
         queryTypeFactory = codegenModule.get(QueryTypeFactory.class);
-        typeFactory = new TypeFactory(entityAnnotation, supertypeAnnotation, embeddableAnnotation);
+        typeFactory = new TypeFactory(Arrays.asList(entityAnnotation, supertypeAnnotation, embeddableAnnotation));
 
         // process supertypes
         for (Class<?> cl : superTypes.keySet()) {

File: querydsl-codegen/src/test/java/com/mysema/query/codegen/Generic2Test.java
Patch:
@@ -3,7 +3,9 @@
 import static org.junit.Assert.*;
 
 import java.io.File;
+import java.lang.annotation.Annotation;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.List;
 
 import org.junit.Test;
@@ -37,7 +39,7 @@ public static class Product {
     
     @Test
     public void Resolve() {
-        TypeFactory factory = new TypeFactory();
+        TypeFactory factory = new TypeFactory(Collections.<Class<? extends Annotation>>emptyList());
         Type type = factory.create(AbstractCollectionAttribute.class, 
                 AbstractCollectionAttribute.class.getGenericSuperclass());
         assertEquals("com.mysema.query.codegen.Generic2Test.AbstractCollectionAttribute<? extends java.util.Collection<?>>", 

File: querydsl-codegen/src/test/java/com/mysema/query/codegen/TypeFactoryTest.java
Patch:
@@ -14,7 +14,6 @@
 package com.mysema.query.codegen;
 
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 
 import java.io.Serializable;

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/impl/JPAQuery.java
Patch:
@@ -83,7 +83,7 @@ public JPAQuery(EntityManager em, JPQLTemplates templates, QueryMetadata metadat
      * @return
      */
     public JPAQuery clone(EntityManager entityManager) {
-        JPAQuery q = new JPAQuery(entityManager, getTemplates(), getMetadata().clone());
+        JPAQuery q = new JPAQuery(entityManager, JPAProvider.getTemplates(entityManager), getMetadata().clone());
         q.factoryExpressionUsed = factoryExpressionUsed;
         q.flushMode = flushMode;
         q.hints.putAll(hints);

File: querydsl-apt/src/main/java/com/mysema/query/apt/AbstractQuerydslProcessor.java
Patch:
@@ -179,6 +179,9 @@ private void processAnnotations() {
       
         processProjectionTypes(elements);
         
+        // extend entity types
+        typeFactory.extendTypes();
+        
         context.clean();    
         
     }

File: querydsl-codegen/src/main/java/com/mysema/query/codegen/GenericExporter.java
Patch:
@@ -252,6 +252,9 @@ private void innerExport(){
         for (EntityType type : embeddableTypes.values()) {
             addSupertypeFields(type, allTypes, handled);
         }
+        
+        // extend types
+        typeFactory.extendTypes();
 
         try {
             Serializer supertypeSerializer, entitySerializer, embeddableSerializer;

File: querydsl-codegen/src/main/java/com/mysema/query/codegen/TypeResolver.java
Patch:
@@ -107,7 +107,7 @@ private static Type resolveWithParameters(Type type, Type declaringType, EntityT
         boolean transformed = false;
         for (int i = 0; i < type.getParameters().size(); i++) {
             Type param = type.getParameters().get(i);
-            if (param != null) {
+            if (param != null && !param.getFullName().equals(type.getFullName())) {
                 params[i] = resolve(param, declaringType, context);
                 if (params[i] != param) {
                     transformed = true;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain4/BookDefinition.java
Patch:
@@ -16,13 +16,16 @@
 import java.io.Serializable;
 import java.util.List;
 
+import javax.persistence.Access;
+import javax.persistence.AccessType;
 import javax.persistence.Basic;
 import javax.persistence.CollectionTable;
 import javax.persistence.ElementCollection;
 import javax.persistence.Embeddable;
 import javax.persistence.OrderColumn;
 
 @Embeddable
+@Access(AccessType.PROPERTY)
 public class BookDefinition implements Serializable {
 
     private static final long serialVersionUID = 3570098308959717614L;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain4/BookID.java
Patch:
@@ -15,6 +15,8 @@
 
 import java.io.Serializable;
 
+import javax.persistence.Access;
+import javax.persistence.AccessType;
 import javax.persistence.Entity;
 import javax.persistence.GeneratedValue;
 import javax.persistence.GenerationType;
@@ -23,6 +25,7 @@
 
 @Entity
 @Table(name = "bookid_")
+@Access(AccessType.PROPERTY)
 public class BookID implements Serializable {
 
     private static final long serialVersionUID = -3205025118656391776L;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain4/BookMark.java
Patch:
@@ -15,10 +15,13 @@
 
 import java.io.Serializable;
 
+import javax.persistence.Access;
+import javax.persistence.AccessType;
 import javax.persistence.Basic;
 import javax.persistence.Embeddable;
 
 @Embeddable
+@Access(AccessType.PROPERTY)
 public class BookMark implements Serializable {
 
     private static final long serialVersionUID = 8027009758015834551L;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain4/BookVersion.java
Patch:
@@ -15,6 +15,8 @@
 
 import java.io.Serializable;
 
+import javax.persistence.Access;
+import javax.persistence.AccessType;
 import javax.persistence.CascadeType;
 import javax.persistence.Embedded;
 import javax.persistence.EmbeddedId;
@@ -25,6 +27,7 @@
 
 @Entity
 @Table(name = "bookversion_")
+@Access(AccessType.PROPERTY)
 public class BookVersion implements Serializable {
 
     private static final long serialVersionUID = -1697470794339057030L;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain4/Library.java
Patch:
@@ -15,6 +15,8 @@
 
 import java.io.Serializable;
 
+import javax.persistence.Access;
+import javax.persistence.AccessType;
 import javax.persistence.Entity;
 import javax.persistence.GeneratedValue;
 import javax.persistence.GenerationType;
@@ -23,6 +25,7 @@
 
 @Entity
 @Table(name = "library_")
+@Access(AccessType.PROPERTY)
 public class Library implements Serializable {
 
     private static final long serialVersionUID = 6360420736014459567L;

File: querydsl-jpa/src/test/java/com/mysema/query/suites/H2BatooTest.java
Patch:
@@ -1,12 +1,10 @@
 package com.mysema.query.suites;
 
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 
 import com.mysema.query.Mode;
 import com.mysema.query.Target;
 
-@Ignore
 public class H2BatooTest extends AbstractJPASuite {
     
     @BeforeClass

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/impl/JPAProvider.java
Patch:
@@ -46,6 +46,7 @@ private static void addMapping(String className, JPQLTemplates templates) {
         addMapping("org.eclipse.persistence.jpa.JpaEntityManager", EclipseLinkTemplates.DEFAULT);
         addMapping("org.apache.openjpa.persistence.OpenJPAEntityManager", OpenJPATemplates.DEFAULT);
         addMapping("org.datanucleus.jpa.EntityManagerImpl", DataNucleusTemplates.DEFAULT);
+        addMapping("org.datanucleus.ObjectManager", DataNucleusTemplates.DEFAULT);
     }
     
     public static JPQLTemplates getTemplates(EntityManager em) {

File: querydsl-sql-codegen/src/test/java/com/mysema/query/sql/support/TypeTest.java
Patch:
@@ -42,7 +42,6 @@
 import com.mysema.commons.lang.Pair;
 import com.mysema.query.sql.types.BigDecimalType;
 import com.mysema.query.sql.types.BlobType;
-import com.mysema.query.sql.types.BooleanType;
 import com.mysema.query.sql.types.ByteType;
 import com.mysema.query.sql.types.BytesType;
 import com.mysema.query.sql.types.CharacterType;
@@ -94,7 +93,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
     public void test() throws MalformedURLException, SQLException{
         List<Pair<?,?>> valueAndType = new ArrayList<Pair<?,?>>();
         valueAndType.add(Pair.of(new BigDecimal("1"), new BigDecimalType()));
-        valueAndType.add(Pair.of(Boolean.TRUE,         new BooleanType()));
+        //valueAndType.add(Pair.of(Boolean.TRUE,         new BooleanType()));
         valueAndType.add(Pair.of(Byte.valueOf((byte)1),   new ByteType()));
         valueAndType.add(Pair.of(new byte[0],         new BytesType()));        
         valueAndType.add(Pair.of(new Character('c'),  new CharacterType()));

File: querydsl-sql/src/test/java/com/mysema/query/sql/SerializationTest.java
Patch:
@@ -95,7 +95,7 @@ public void Nextval() {
         SubQueryExpression<?> sq = new SQLSubQuery().from(QSurvey.survey).list(SQLExpressions.nextval("myseq"));
         SQLSerializer serializer = new SQLSerializer(SQLTemplates.DEFAULT);
         serializer.serialize(sq.getMetadata(), false);
-        assertEquals("select nextval('seq')\nfrom SURVEY SURVEY", serializer.toString());
+        assertEquals("select nextval('myseq')\nfrom SURVEY SURVEY", serializer.toString());
     }
     
     @Test

File: querydsl-codegen/src/main/java/com/mysema/query/codegen/ProjectionSerializer.java
Patch:
@@ -28,7 +28,6 @@
 import com.mysema.codegen.model.Types;
 import com.mysema.commons.lang.Assert;
 import com.mysema.query.types.ConstructorExpression;
-import com.mysema.query.types.Expression;
 import com.mysema.query.types.expr.NumberExpression;
 
 /**
@@ -61,8 +60,8 @@ protected void intro(EntityType model, CodeWriter writer) throws IOException {
         }
 
         // imports
-        writer.imports(Expression.class.getPackage(), NumberExpression.class.getPackage());
-        writer.imports(Generated.class);
+        writer.imports(NumberExpression.class.getPackage());
+        writer.imports(ConstructorExpression.class, Generated.class);
 
         // javadoc
         writer.javadoc(queryType + " is a Querydsl Projection type for " + simpleName);

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/JPQLSerializer.java
Patch:
@@ -401,7 +401,7 @@ private void visitInstanceOf(Class<?> type, Operator<?> operator,
             if (cl.getAnnotation(DiscriminatorValue.class) != null) {
                 newArgs.set(1, ConstantImpl.create(cl.getAnnotation(DiscriminatorValue.class).value()));
             } else {
-                newArgs.set(1, ConstantImpl.create(cl.getName()));
+                newArgs.set(1, ConstantImpl.create(cl.getSimpleName()));
             }
             super.visitOperation(type, operator, newArgs);
         } else {

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Domain.java
Patch:
@@ -44,6 +44,8 @@ private Domain(){}
             Dolphin.class,
             EmbeddedType.class,
             Employee.class,
+            Entity1.class,
+            Entity2.class,
             EvilType.class,
             Family.class,
             Foo.class,
@@ -57,6 +59,7 @@ private Domain(){}
             Named.class,
             NameList.class,
             Nationality.class,
+            Novel.class,
             Order.class,
             Parameter.class,
             Payment.class,

File: querydsl-jpa/src/test/java/com/mysema/testutil/JPATestRunner.java
Patch:
@@ -94,7 +94,7 @@ private void start() throws Exception {
         }
         entityManagerFactory = Persistence.createEntityManagerFactory(mode);
         entityManager = entityManagerFactory.createEntityManager();
-        entityManager.getTransaction().begin();
+        entityManager.getTransaction().begin();        
     }
     
     private void shutdown() {

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/BooleanType.java
Patch:
@@ -34,8 +34,8 @@ public BooleanType(int type) {
 
     @Override
     public Boolean getValue(ResultSet rs, int startIndex) throws SQLException {
-        Object value = rs.getObject(startIndex);
-        return value instanceof Boolean ? (Boolean)value : null;
+        final boolean value = rs.getBoolean(startIndex);
+        return rs.wasNull() ? null : value;
     }
 
     @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/BooleanType.java
Patch:
@@ -34,7 +34,8 @@ public BooleanType(int type) {
 
     @Override
     public Boolean getValue(ResultSet rs, int startIndex) throws SQLException {
-        return rs.getBoolean(startIndex);
+        final boolean value = rs.getBoolean(startIndex);
+        return rs.wasNull() ? null : value;
     }
 
     @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/BooleanType.java
Patch:
@@ -34,8 +34,7 @@ public BooleanType(int type) {
 
     @Override
     public Boolean getValue(ResultSet rs, int startIndex) throws SQLException {
-        Object value = rs.getObject(startIndex);
-        return value instanceof Boolean ? (Boolean)value : null;
+        return rs.getBoolean(startIndex);
     }
 
     @Override

File: querydsl-apt/src/main/java/com/mysema/query/apt/AbstractQuerydslProcessor.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.Deque;
 import java.util.HashSet;
 import java.util.Iterator;

File: querydsl-apt/src/test/java/com/mysema/query/apt/UnknownAsEmbeddableTest.java
Patch:
@@ -25,7 +25,7 @@
 
 public class UnknownAsEmbeddableTest extends AbstractProcessorTest {
 
-    private static final String packagePath = "src/test/java/com/mysema/query/domain/custom";
+    private static final String packagePath = "src/test/java/com/mysema/query/domain";
 
     @Test
     public void Process() throws IOException{

File: querydsl-sql/src/main/java/com/mysema/query/sql/HSQLDBTemplates.java
Patch:
@@ -37,7 +37,7 @@ public HSQLDBTemplates(char escape, boolean quote) {
         add(Ops.TRIM, "trim(both from {0})");
         add(Ops.NEGATE, "{0} * -1", 7);
 
-        add(Ops.NEXTVAL, "next value for {0s}");
+        add(NEXTVAL, "next value for {0s}");
         
         add(Ops.MathOps.ROUND, "round({0},0)");
         add(Ops.MathOps.LN, "log({0})");

File: querydsl-maven-plugin/src/main/java/com/mysema/query/maven/JDOExporterMojo.java
Patch:
@@ -35,7 +35,6 @@ protected void configure(GenericExporter exporter) {
         exporter.setEmbeddedAnnotation(Embedded.class);
         exporter.setEntityAnnotation(PersistenceCapable.class);
         exporter.setSkipAnnotation(NotPersistent.class);
-        exporter.setSupertypeAnnotation(null);
     }
 
 }

File: querydsl-maven-plugin/src/main/java/com/mysema/query/maven/JDOExporterMojo.java
Patch:
@@ -35,7 +35,6 @@ protected void configure(GenericExporter exporter) {
         exporter.setEmbeddedAnnotation(Embedded.class);
         exporter.setEntityAnnotation(PersistenceCapable.class);
         exporter.setSkipAnnotation(NotPersistent.class);
-        exporter.setSupertypeAnnotation(null);
     }
 
 }

File: querydsl-sql/src/main/java/com/mysema/query/sql/HSQLDBTemplates.java
Patch:
@@ -36,6 +36,8 @@ public HSQLDBTemplates(char escape, boolean quote) {
         setAutoIncrement(" identity");        
         add(Ops.TRIM, "trim(both from {0})");
         add(Ops.NEGATE, "{0} * -1", 7);
+
+        add(Ops.NEXTVAL, "next value for {0s}");
         
         add(Ops.MathOps.ROUND, "round({0},0)");
         add(Ops.MathOps.LN, "log({0})");

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLExpressions.java
Patch:
@@ -36,7 +36,7 @@ public static final SimpleExpression<Long> nextval(String sequence) {
     }    
     
     public static final <T extends Number> SimpleExpression<T> nextval(Class<T> type, String sequence) {
-        return SimpleOperation.create(type, SQLTemplates.NEXTVAL, ConstantImpl.create("seq"));
+        return SimpleOperation.create(type, SQLTemplates.NEXTVAL, ConstantImpl.create(sequence));
     }
     
     private SQLExpressions() {}

File: querydsl-jpa-codegen/src/test/java/com/mysema/query/jpa/domain11/DomainExporterTest.java
Patch:
@@ -27,9 +27,11 @@ public void Execute() throws IOException {
         assertTrue(new File(gen, "com/mysema/query/jpa/domain11/QOtherthing.java").exists());
         assertTrue(new File(gen, "com/mysema/query/jpa/domain11/QSomething.java").exists());
         
-        String str = Files.toString(new File(gen, "com/mysema/query/jpa/domain11/QSomething.java"), Charsets.UTF_8);
+        String str = Files.toString(new File(gen, "com/mysema/query/jpa/domain11/QOtherthing.java"), Charsets.UTF_8);
         assertTrue(str.contains("QSomething"));
         
+        str = Files.toString(new File(gen, "com/mysema/query/jpa/domain11/QSomething.java"), Charsets.UTF_8);
+        assertTrue(str.contains("id"));
     }
     
 }

File: querydsl-apt/src/main/java/com/mysema/query/apt/ExtendedTypeFactory.java
Patch:
@@ -264,7 +264,7 @@ public ExtendedTypeFactory(
             TypeMappings typeMappings,
             QueryTypeFactory queryTypeFactory){
         this.env = env;
-        this.defaultType = Types.OBJECT;
+        this.defaultType = new TypeExtends(Types.OBJECT);
         this.entityAnnotations = annotations;
         this.objectType = getErasedType(Object.class);
         this.numberType = getErasedType(Number.class);

File: querydsl-apt/src/test/java/com/mysema/query/apt/GenericExporterTest.java
Patch:
@@ -58,6 +58,7 @@ public void Execute() throws IOException {
         expected.add("QQueryEmbedded4Test_User.java");
         expected.add("QSuperclass3Test_Subtype.java");
         expected.add("QExamples_OrderBys.java");      
+        expected.add("QGeneric7Test_ListAttribute.java");
         
         execute(expected, "GenericExporterTest", "QuerydslAnnotationProcessor");
     }

File: querydsl-codegen/src/main/java/com/mysema/query/codegen/EntitySerializer.java
Patch:
@@ -51,7 +51,6 @@
 import com.mysema.codegen.model.TypeExtends;
 import com.mysema.codegen.model.Types;
 import com.mysema.commons.lang.Assert;
-import com.mysema.query.annotations.QueryInit;
 import com.mysema.query.types.ConstructorExpression;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Path;
@@ -111,7 +110,7 @@ protected void constructors(EntityType model, SerializerConfig config,
             CodeWriter writer) throws IOException {
         String localName = writer.getRawName(model);
         String genericName = writer.getGenericName(true, model);
-
+        
         boolean hasEntityFields = model.hasEntityFields();
         boolean stringOrBoolean = model.getOriginalCategory() == TypeCategory.STRING 
                 || model.getOriginalCategory() == TypeCategory.BOOLEAN;
@@ -120,7 +119,7 @@ protected void constructors(EntityType model, SerializerConfig config,
                         
         // 1
         constructorsForVariables(writer, model);
-
+        
         // 2
         if (model.isFinal()) {
             Type type = new ClassType(Path.class, model);

File: querydsl-codegen/src/main/java/com/mysema/query/codegen/TypeFactory.java
Patch:
@@ -45,6 +45,8 @@
 // TODO : refactor this to be more understandable
 public final class TypeFactory {
 
+    private static final Type ANY = new TypeExtends(Types.OBJECT);
+    
     private static final Type[] TYPES_0 = new Type[0];
 
     private static final Type[] TYPES_1 = new Type[]{ Types.OBJECT };
@@ -192,7 +194,7 @@ private Type getGenericParameter(Class<?> cl, java.lang.reflect.Type genericType
             && ((WildcardType)parameter).getUpperBounds()[0].equals(Object.class)
             && ((WildcardType)parameter).getLowerBounds().length == 0) {
             Type rv = getTypeParameter(cl, i);
-            return (collectionOrMap && rv == null) ? Types.OBJECT : rv;
+            return (collectionOrMap && rv == null) ? ANY : rv;
         } else {
             Type rv = create(ReflectionUtils.getTypeParameter(genericType, i), parameter);
             if (parameter instanceof WildcardType) {

File: querydsl-codegen/src/test/java/com/mysema/query/codegen/GenericTest.java
Patch:
@@ -12,6 +12,7 @@ public static abstract class CapiBCKeyedByGrundstueck {
     }
     
     public static abstract class HidaBez<B extends HidaBez<B, G>, G extends HidaBezGruppe<G, B>> extends CapiBCKeyedByGrundstueck {
+        
     }
 
     public static abstract class HidaBezGruppe<G extends HidaBezGruppe<G, B>, B extends HidaBez<B, G>> extends

File: querydsl-codegen/src/main/java/com/mysema/query/codegen/TypeFactory.java
Patch:
@@ -59,7 +59,7 @@ public final class TypeFactory {
 
     private boolean unknownAsEntity = false;
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     public TypeFactory(Class<?>... entityAnnotations) {
         this((List)Arrays.asList(entityAnnotations));
     }
@@ -181,6 +181,7 @@ private Type[] getGenericParameters(Class<?> cl, java.lang.reflect.Type genericT
         return types;
     }
 
+    @SuppressWarnings("rawtypes")
     private Type getGenericParameter(Class<?> cl, java.lang.reflect.Type genericType,
             boolean collectionOrMap, int i) {
         java.lang.reflect.Type parameter = ((ParameterizedType)genericType).getActualTypeArguments()[i];
@@ -209,6 +210,7 @@ private Type[] getTypeParameters(Class<?> cl) {
         return types;
     }
     
+    @SuppressWarnings("rawtypes")
     private Type getTypeParameter(Class<?> cl, int i) {
         TypeVariable<?> typeVariable = cl.getTypeParameters()[i];
         java.lang.reflect.Type firstBound = typeVariable.getBounds()[0];

File: querydsl-codegen/src/main/java/com/mysema/query/codegen/TypeMappings.java
Patch:
@@ -107,7 +107,7 @@ public Type getQueryType(Type type, EntityType model, Type exprType, boolean raw
         }
     }
     
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings("rawtypes")
     public void register(TypeCategory category,
             @Nullable Class<? extends Expression> expr,
             @Nullable Class<? extends Path> path,

File: querydsl-jpa-codegen/src/main/java/com/mysema/query/jpa/codegen/HibernateDomainExporter.java
Patch:
@@ -314,6 +314,9 @@ private void collectTypes() throws IOException, XMLStreamException, ClassNotFoun
 
     private void handleProperty(EntityType entityType, Class<?> cl, org.hibernate.mapping.Property p) 
             throws NoSuchMethodException, ClassNotFoundException {
+        if (p.isBackRef()) {
+            return;
+        }
         Type propertyType = getType(cl, p.getName());
         if (p.isComposite()) {
             Class<?> embeddedClass = Class.forName(propertyType.getFullName());

File: querydsl-codegen/src/main/java/com/mysema/query/codegen/GenericExporter.java
Patch:
@@ -34,6 +34,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.logging.Logger;
 
 import javax.annotation.Nullable;
 
@@ -91,7 +92,7 @@
  *
  */
 public class GenericExporter {
-
+    
     private Class<? extends Annotation> entityAnnotation = QueryEntity.class;
 
     private Class<? extends Annotation> supertypeAnnotation = QuerySupertype.class;

File: querydsl-sql/src/main/java/com/mysema/query/sql/RelationalFunctionCall.java
Patch:
@@ -41,7 +41,9 @@ private static final Template createTemplate(String function, int argCount) {
         builder.append(function);
         builder.append("(");
         for (int i = 0; i < argCount; i++) {
-            if (i > 0) builder.append(", ");
+            if (i > 0) {
+                builder.append(", ");
+            }
             builder.append("{"+ i + "}");
         }
         builder.append(")");

File: querydsl-sql/src/main/java/com/mysema/query/sql/UnionUtils.java
Patch:
@@ -31,7 +31,9 @@ public static Expression<?> combineUnion(SubQueryExpression<?>[] union, Path<?>
         StringBuilder builder = new StringBuilder("(");
         String separator = unionAll ? templates.getUnionAll() : templates.getUnion();
         for (int i = 0; i < union.length; i++) {
-            if (i > 0) builder.append(separator);
+            if (i > 0) {
+                builder.append(separator);
+            }
             builder.append("{"+i+"}");
         }
         builder.append(")");

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColQueryTemplates.java
Patch:
@@ -42,7 +42,6 @@ protected ColQueryTemplates() {
         add(Ops.STRING_CAST, "String.valueOf({0})");
 
         // Number
-        add(Ops.DIV,          "(double)({0}/{1})");
         add(Ops.MathOps.COT,  functions + ".cot({0})");
         add(Ops.MathOps.COTH, functions + ".coth({0})");
         add(Ops.MathOps.DEG,  functions + ".degrees({0})");

File: querydsl-jdo/src/test/java/com/mysema/query/jdo/test/domain/QBook.java
Patch:
@@ -48,10 +48,13 @@ public class QBook extends EntityPathBase<com.mysema.query.jdo.test.domain.Book>
     public QBook(String path) {
           this(com.mysema.query.jdo.test.domain.Book.class, path);
     }
+    
     public QBook(Class<? extends com.mysema.query.jdo.test.domain.Book> cl, String path) {
           super(cl, PathMetadataFactory.forVariable(path));
     }
+    
     public QBook(PathMetadata<?> metadata) {
          super(com.mysema.query.jdo.test.domain.Book.class, metadata);
     }
+    
 }

File: querydsl-jdo/src/test/java/com/mysema/query/jdo/test/domain/QProduct.java
Patch:
@@ -48,10 +48,13 @@ public class QProduct extends EntityPathBase<com.mysema.query.jdo.test.domain.Pr
     public QProduct(String path) {
           this(com.mysema.query.jdo.test.domain.Product.class, path);
     }
+    
     public QProduct(Class<? extends com.mysema.query.jdo.test.domain.Product> cl, String path) {
           super(cl, PathMetadataFactory.forVariable(path));
     }
+    
     public QProduct(PathMetadata<?> metadata) {
          super(com.mysema.query.jdo.test.domain.Product.class, metadata);
     }
+    
 }

File: querydsl-core/src/main/java/com/mysema/util/BeanMap.java
Patch:
@@ -1,4 +1,3 @@
-// GenericsNote: Converted to <String,Object>.
 /*
  *  Copyright 2001-2004 The Apache Software Foundation
  *

File: querydsl-jpa-codegen/src/main/java/com/mysema/query/jpa/codegen/HibernateDomainExporter.java
Patch:
@@ -303,8 +303,6 @@ private void collectTypes() throws IOException, XMLStreamException, ClassNotFoun
                     while (properties.hasNext()) {
                         handleProperty(entityType, pc.getMappedClass(), (org.hibernate.mapping.Property) properties.next());
                     }
-                } else {
-                    // ?!?
                 }
             }
             Iterator<?> properties = pc.getDeclaredPropertyIterator();

File: querydsl-codegen/src/main/java/com/mysema/query/codegen/TypeResolver.java
Patch:
@@ -13,6 +13,7 @@
  */
 package com.mysema.query.codegen;
 
+import com.google.common.base.Objects;
 import com.mysema.codegen.model.SimpleType;
 import com.mysema.codegen.model.Type;
 import com.mysema.codegen.model.TypeExtends;
@@ -71,7 +72,7 @@ private static Type resolveTypeExtends(TypeExtends typeExtends, Type declaringTy
                 param = ((EntityType)param).getInnerType();
             }
             if (param instanceof TypeExtends 
-                    && ((TypeExtends)param).getVarName().equals(typeExtends.getVarName())){
+                    && Objects.equal(((TypeExtends)param).getVarName(), typeExtends.getVarName())){
                 index = i;
             }
         }

File: querydsl-core/src/main/java/com/mysema/util/ClassPathUtils.java
Patch:
@@ -116,8 +116,7 @@ public static Class<?> safeClassForName(ClassLoader classLoader, String classNam
             if (className.startsWith("com.sun")) {
                 return null;
             } else {
-                //return Class.forName(className);
-                return classLoader.loadClass(className);
+                return Class.forName(className, true, classLoader);
             }
         } catch (ClassNotFoundException e) {
             return null;

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/JPQLQueryBase.java
Patch:
@@ -77,10 +77,10 @@ protected void reset() {
     @Override
     public boolean exists() {
         if (templates.isSelect1Supported()) {
-            return limit(1).uniqueResult(NumberTemplate.ONE) != null;
+            return limit(1).singleResult(NumberTemplate.ONE) != null;
         } else {            
             EntityPath<?> entityPath = (EntityPath<?>) queryMixin.getMetadata().getJoins().get(0).getTarget();
-            return limit(1).uniqueResult(entityPath) != null;
+            return !limit(1).list(entityPath).isEmpty();
         }                
     }
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -181,7 +181,7 @@ public long count() {
 
     @Override
     public boolean exists() {
-        return limit(1).uniqueResult(NumberTemplate.ONE) != null;
+        return limit(1).singleResult(NumberTemplate.ONE) != null;
     }
 
     public Q forUpdate() {

File: querydsl-sql/src/test/java/com/mysema/query/SelectBase.java
Patch:
@@ -1230,7 +1230,7 @@ public void Wildcard_All() {
     
     @Test
     public void Wildcard_All2(){
-        query().from(new RelationalPathBase(Object.class, "employee", null, "EMPLOYEE"))
+        query().from(new RelationalPathBase(Object.class, "employee", "public", "EMPLOYEE"))
                .list(Wildcard.all);
     }
     

File: querydsl-codegen/src/main/java/com/mysema/query/codegen/TypeFactory.java
Patch:
@@ -91,7 +91,6 @@ public Type create(boolean entity, Class<?> cl, java.lang.reflect.Type genericTy
             
         } else {
             if (cl.isPrimitive()) {
-//                cl = ClassUtils.primitiveToWrapper(cl);
                 cl = Primitives.wrap(cl);
             }
             Type value;

File: querydsl-jpa-codegen/src/test/java/com/mysema/query/jpa/codegen/MyEntity.java
Patch:
@@ -1,7 +1,7 @@
 package com.mysema.query.jpa.codegen;
 
 public class MyEntity {
-    
+
     String pk1, pk2, prop1;
 
 }

File: querydsl-sql-codegen/src/main/java/com/mysema/query/sql/codegen/DefaultNamingStrategy.java
Patch:
@@ -129,7 +129,7 @@ protected String toCamelCase(String str) {
         boolean toLower = str.toUpperCase().equals(str);
         StringBuilder builder = new StringBuilder(str.length());
         for (int i = 0; i < str.length(); i++) {
-            if (str.charAt(i) == '_' || str.charAt(i) == ' ' || str.charAt(i) == '-') {
+            if (i < str.length() - 1 && (str.charAt(i) == '_' || str.charAt(i) == ' ' || str.charAt(i) == '-')) {
                 i += 1;
                 if (i < str.length()) {
                     builder.append(Character.toUpperCase(str.charAt(i)));    

File: querydsl-sql-codegen/src/test/java/com/mysema/query/sql/codegen/DefaultNamingStrategyTest.java
Patch:
@@ -41,8 +41,8 @@ public void GetClassName() {
         assertEquals("UserData", namingStrategy.getClassName("user_data"));
         assertEquals("U", namingStrategy.getClassName("u"));
         assertEquals("Us",namingStrategy.getClassName("us"));
-        assertEquals("U", namingStrategy.getClassName("u_"));
-        assertEquals("Us",namingStrategy.getClassName("us_"));
+        assertEquals("U_", namingStrategy.getClassName("u_"));
+        assertEquals("Us_",namingStrategy.getClassName("us_"));
     }
 
     @Test
@@ -76,6 +76,7 @@ public void GetPropertyNameForForeignKey(){
         
         assertEquals("reffooBar", namingStrategy.getPropertyNameForForeignKey("REFFOO_BAR", entityModel));
         assertEquals("refFooBar", namingStrategy.getPropertyNameForForeignKey("REF_FOO_BAR", entityModel));
+        assertEquals("refFooBar_", namingStrategy.getPropertyNameForForeignKey("REF_FOO_BAR_", entityModel));
     }
         
     

File: querydsl-sql-codegen/src/test/java/com/mysema/query/sql/codegen/ExtendedNamingStrategyTest.java
Patch:
@@ -41,8 +41,8 @@ public void GetClassName() {
         assertEquals("UserData", namingStrategy.getClassName("user_data"));
         assertEquals("U", namingStrategy.getClassName("u"));
         assertEquals("Us",namingStrategy.getClassName("us"));
-        assertEquals("U", namingStrategy.getClassName("u_"));
-        assertEquals("Us",namingStrategy.getClassName("us_"));
+        assertEquals("U_", namingStrategy.getClassName("u_"));
+        assertEquals("Us_",namingStrategy.getClassName("us_"));
     }
 
     @Test

File: querydsl-sql-codegen/src/main/java/com/mysema/query/sql/codegen/DefaultNamingStrategy.java
Patch:
@@ -129,7 +129,7 @@ protected String toCamelCase(String str) {
         boolean toLower = str.toUpperCase().equals(str);
         StringBuilder builder = new StringBuilder(str.length());
         for (int i = 0; i < str.length(); i++) {
-            if (str.charAt(i) == '_' || str.charAt(i) == ' ') {
+            if (str.charAt(i) == '_' || str.charAt(i) == ' ' || str.charAt(i) == '-') {
                 i += 1;
                 if (i < str.length()) {
                     builder.append(Character.toUpperCase(str.charAt(i)));    

File: querydsl-sql-codegen/src/main/java/com/mysema/query/sql/codegen/OriginalNamingStrategy.java
Patch:
@@ -78,7 +78,8 @@ public String normalizeSchemaName(String schemaName) {
     }
         
     private String getPropertyName(String name) {
-        return JavaSyntaxUtils.isReserved(name) ? name + reservedSuffix : name;
+        String rv = JavaSyntaxUtils.isReserved(name) ? name + reservedSuffix : name;
+        return rv.replace('-', '_');
     }
     
 }

File: querydsl-core/src/main/java/com/mysema/query/support/SerializerBase.java
Patch:
@@ -321,7 +321,8 @@ protected void visitOperation(Class<?> type, Operator<?> operator, List<? extend
         for (Template.Element element : template.getElements()) {
             if (element.getStaticText() != null) {
                 append(element.getStaticText());                
-            } else if (element.isAsString()) {
+            } else if (element.isAsString() && args.get(element.getIndex()) instanceof Constant) {
+                // serialize only constants directly
                 appendAsString(args.get(element.getIndex()));                
             } else {
                 int i = element.getIndex();

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/JPQLTemplates.java
Patch:
@@ -98,8 +98,8 @@ protected JPQLTemplates(char escape) {
         add(Ops.ENDS_WITH_IC, "{0l} like {%%1} escape '"+escape+"'");
         add(Ops.STARTS_WITH, "{0} like {1%} escape '"+escape+"'");
         add(Ops.STARTS_WITH_IC, "{0l} like {1%%} escape '"+escape+"'");
-        add(Ops.INDEX_OF, "locate({1},{0}) - 1");
-        add(Ops.INDEX_OF_2ARGS, "locate({1},{0},{2s}+1) - 1");
+        add(Ops.INDEX_OF, "locate({1},{0})-1");
+        add(Ops.INDEX_OF_2ARGS, "locate({1},{0},{2s}+1)-1");
 
         // date time
         add(Ops.DateTimeOps.SYSDATE, "sysdate");

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/OpenJPATemplates.java
Patch:
@@ -28,6 +28,7 @@ public class OpenJPATemplates extends JPQLTemplates{
     public OpenJPATemplates() {
         this(DEFAULT_ESCAPE);  
         add(Ops.ALIAS, "{0} {1}");
+        add(Ops.NEGATE, "-1 * {0}", 7);
     }
     
     public OpenJPATemplates(char escape) {

File: querydsl-core/src/main/java/com/mysema/query/DefaultQueryMetadata.java
Patch:
@@ -141,9 +141,8 @@ public void addJoinCondition(Predicate o) {
 
     @Override
     public void addOrderBy(OrderSpecifier<?>... o) {
-        for (OrderSpecifier<?> os : o) {
-            validate(os.getTarget());
-        }
+        // order specifiers can't be validated, since they can refer to projection elements
+        // that are declared later
         orderBy.addAll(Arrays.asList(o));
     }
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/mssql/SQLServerQuery.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.List;
 
 import com.mysema.query.DefaultQueryMetadata;
-import com.mysema.query.QueryFlag;
+import com.mysema.query.JoinFlag;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.sql.AbstractSQLQuery;
 import com.mysema.query.sql.Configuration;
@@ -73,8 +73,8 @@ private SQLServerQuery tableHints(Collection<String> tableHints) {
             while (it.hasNext()) {
                 tableHintsStr.append(", ").append(it.next());
             }
-            tableHintsStr.append(") ");
-            addFlag(QueryFlag.Position.BEFORE_FILTERS, tableHintsStr.toString());
+            tableHintsStr.append(")");
+            addJoinFlag(tableHintsStr.toString(), JoinFlag.Position.END);
         }
         return this;
     }

File: querydsl-sql/src/test/java/com/mysema/query/SelectBaseTest.java
Patch:
@@ -25,7 +25,6 @@
 import static com.mysema.query.Target.HSQLDB;
 import static com.mysema.query.Target.MYSQL;
 import static com.mysema.query.Target.ORACLE;
-import static com.mysema.query.Target.POSTGRES;
 import static com.mysema.query.Target.SQLITE;
 import static com.mysema.query.Target.SQLSERVER;
 import static org.junit.Assert.assertEquals;
@@ -90,7 +89,6 @@
 import com.mysema.query.types.query.SimpleSubQuery;
 import com.mysema.query.types.template.NumberTemplate;
 import com.mysema.testutil.ExcludeIn;
-import com.mysema.testutil.IncludeIn;
 import com.mysema.testutil.Label;
 
 public abstract class SelectBaseTest extends AbstractBaseTest{
@@ -368,7 +366,7 @@ public void Right_Join() throws SQLException {
     }
 
     @Test
-    @ExcludeIn({H2, SQLITE, DERBY, MYSQL})
+    @ExcludeIn({H2, SQLITE, DERBY, CUBRID, MYSQL})
     public void Full_Join() throws SQLException {
         query().from(employee).fullJoin(employee2)
             .on(employee.superiorIdKey.on(employee2))

File: querydsl-sql/src/test/java/com/mysema/query/sql/oracle/OracleGrammarTest.java
Patch:
@@ -32,7 +32,7 @@ public void Constants(){
     @Test
     public void SumOver(){
         NumberPath<Integer> intPath = new NumberPath<Integer>(Integer.class, "intPath");
-        SumOver<Integer> sumOver = OracleGrammar.sumOver(intPath).order(intPath).partition(intPath);
+        SumOver<Integer> sumOver = OracleGrammar.sumOver(intPath).orderBy(intPath).partition(intPath);
         assertEquals("sum(intPath) over (partition by intPath order by intPath)", sumOver.toString());
     }
 

File: src/main/java/com/mysema/codegen/SimpleCompiler.java
Patch:
@@ -137,7 +137,6 @@ public int run(InputStream in, OutputStream out, OutputStream err, String... arg
         for (String arg : arguments) {
             args.add(arg);
         }
-        System.err.println(args);
         return compiler.run(in, out, err, args.toArray(new String[args.size()]));
     }
 

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColQueryMixin.java
Patch:
@@ -32,6 +32,8 @@
  */
 public class ColQueryMixin<T> extends QueryMixin<T> {
     
+    private static final Predicate ANY = BooleanTemplate.create("any");
+
     public ColQueryMixin() {}
 
     public ColQueryMixin(QueryMetadata metadata) {
@@ -63,7 +65,7 @@ private Predicate normalize(Predicate predicate, boolean where) {
                 innerJoin(
                     (CollectionExpression)context.paths.get(i).getMetadata().getParent(), 
                     (Path)context.replacements.get(i));
-                on(BooleanTemplate.create("any"));
+                on(ANY);
             }
             return transformed;    
         }        

File: querydsl-core/src/test/java/com/mysema/query/FilterFactory.java
Patch:
@@ -297,6 +297,7 @@ public Collection<BooleanExpression> string(StringExpression expr, StringExpress
         if (!target.equals(Target.DERBY)
          && !target.equals(Target.HSQLDB)
          && !target.equals(Target.H2)
+         && !target.equals(Target.SQLITE)
          && !target.equals(Target.SQLSERVER)){
             rv.add(expr.matches(knownValue.substring(0,1)+".*"));
             rv.add(expr.matches(".*"+knownValue.substring(1)));

File: querydsl-core/src/test/java/com/mysema/query/MatchingFiltersFactory.java
Patch:
@@ -259,6 +259,7 @@ public Collection<BooleanExpression> string(StringExpression expr, StringExpress
             || (!target.equals(Target.HSQLDB)
             && !target.equals(Target.H2)
             && !target.equals(Target.DERBY)
+            && !target.equals(Target.SQLITE)
             && !target.equals(Target.SQLSERVER))){
                 
                 rv.add(expr.matches(other));

File: querydsl-sql/src/test/java/com/mysema/query/Connections.java
Patch:
@@ -129,9 +129,9 @@ private static Connection getCubrid() throws ClassNotFoundException, SQLExceptio
     }
     
     private static Connection getSQLite() throws SQLException, ClassNotFoundException {
-        System.setProperty("sqlite.purejava", "true");
+        //System.setProperty("sqlite.purejava", "true");
         Class.forName("org.sqlite.JDBC");
-        return DriverManager.getConnection("jdbc:sqlite:");
+        return DriverManager.getConnection("jdbc:sqlite:target/sample.db");
     }
     
     private static CreateTableClause createTable(SQLTemplates templates, String table){

File: querydsl-sql/src/test/java/com/mysema/query/_sqlite/SelectSQLiteTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import org.junit.Before;
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import com.mysema.query.Connections;
@@ -27,7 +26,6 @@
 import com.mysema.query.sql.SQLiteTemplates;
 import com.mysema.testutil.Label;
 
-@Ignore // work in progress
 @Label(Target.SQLITE)
 public class SelectSQLiteTest extends SelectBaseTest {
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/AbstractSQLTemplatesTest.java
Patch:
@@ -59,11 +59,11 @@ public void Union(){
             sq().unique(two),
             sq().unique(three));
         assertEquals(
-                "(select 1 as col1 from dual) " +
+                "select 1 as col1 from dual " +
         	"union " +
-        	"(select 2 from dual) " +
+        	"select 2 from dual " +
         	"union " +
-        	"(select 3 from dual)", union.toString());
+        	"select 3 from dual", union.toString());
     }
     
     @Test

File: querydsl-sql/src/test/java/com/mysema/query/sql/OracleTemplatesTest.java
Patch:
@@ -45,11 +45,11 @@ public void Union(){
             sq().unique(two),
             sq().unique(three));
         assertEquals(
-                "(select 1 col1 from dual) " +
+                "select 1 col1 from dual " +
                 "union " +
-                "(select 2 from dual) " +
+                "select 2 from dual " +
                 "union " +
-                "(select 3 from dual)", union.toString());
+                "select 3 from dual", union.toString());
     }
 
     @Test

File: querydsl-sql/src/test/java/com/mysema/query/sql/SQLServerTemplatesTest.java
Patch:
@@ -53,11 +53,11 @@ public void Union(){
             sq().unique(two),
             sq().unique(three));
         assertEquals(
-                "(select 1 as col1) " +
+                "select 1 as col1 " +
                 "union " +
-                "(select 2) " +
+                "select 2 " +
                 "union " +
-                "(select 3)", union.toString());
+                "select 3", union.toString());
     }
  
     @Test

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColDeleteClause.java
Patch:
@@ -41,7 +41,7 @@ public ColDeleteClause(QueryEngine qe, Path<T> expr, Collection<? extends T> col
     }
 
     public ColDeleteClause(Path<T> expr, Collection<? extends T> col){
-        this(QueryEngine.DEFAULT, expr, col);
+        this(DefaultQueryEngine.DEFAULT, expr, col);
     }
 
     @Override

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColQueryImpl.java
Patch:
@@ -28,7 +28,7 @@ public class ColQueryImpl extends AbstractColQuery<ColQueryImpl> implements ColQ
      * Create a new ColQueryImpl instance
      */
     public ColQueryImpl() {
-        super(new DefaultQueryMetadata(), QueryEngine.DEFAULT);
+        super(new DefaultQueryMetadata(), DefaultQueryEngine.DEFAULT);
     }
 
     /**
@@ -57,7 +57,7 @@ public ColQueryImpl(QueryEngine queryEngine) {
      * @param evaluatorFactory
      */
     public ColQueryImpl(QueryMetadata metadata) {
-        super(metadata, QueryEngine.DEFAULT);
+        super(metadata, DefaultQueryEngine.DEFAULT);
     }
 
     /**

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColUpdateClause.java
Patch:
@@ -44,7 +44,7 @@ public ColUpdateClause(QueryEngine qe, Path<T> expr, Iterable<? extends T> col){
     }
 
     public ColUpdateClause(Path<T> expr, Iterable<? extends T> col){
-        this(QueryEngine.DEFAULT, expr, col);
+        this(DefaultQueryEngine.DEFAULT, expr, col);
     }
 
     @Override

File: querydsl-collections/src/main/java/com/mysema/query/collections/DefaultEvaluatorFactory.java
Patch:
@@ -62,7 +62,7 @@ public DefaultEvaluatorFactory(ColQueryTemplates templates){
         ToolProvider.getSystemJavaCompiler());
     }
 
-    public DefaultEvaluatorFactory(ColQueryTemplates templates,
+    protected DefaultEvaluatorFactory(ColQueryTemplates templates,
             URLClassLoader classLoader, JavaCompiler compiler){
         this.templates = templates;
         this.factory = new EvaluatorFactory(classLoader, compiler);

File: querydsl-collections/src/main/java/com/mysema/query/collections/DefaultQueryEngine.java
Patch:
@@ -43,6 +43,8 @@
 @SuppressWarnings("unchecked")
 public class DefaultQueryEngine implements QueryEngine {
 
+    public static final QueryEngine DEFAULT = new DefaultQueryEngine(new DefaultEvaluatorFactory(ColQueryTemplates.DEFAULT));
+    
     private final DefaultEvaluatorFactory evaluatorFactory;
 
     public DefaultQueryEngine(DefaultEvaluatorFactory evaluatorFactory) {

File: querydsl-core/src/main/java/com/mysema/query/support/OrderedQueryMetadata.java
Patch:
@@ -41,7 +41,8 @@ public class OrderedQueryMetadata extends DefaultQueryMetadata{
     private JoinExpression last;
     
     public OrderedQueryMetadata(){
-        super(false);
+        super();
+        noValidate();
     }
     
     @Override

File: querydsl-core/src/test/java/com/mysema/query/support/QueryMixinTest.java
Patch:
@@ -13,12 +13,13 @@
  */
 package com.mysema.query.support;
 
+import static com.mysema.query.alias.Alias.$;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
-import static com.mysema.query.alias.Alias.*;
 
 import org.junit.Test;
 
+import com.mysema.query.DefaultQueryMetadata;
 import com.mysema.query.JoinExpression;
 import com.mysema.query.alias.Alias;
 import com.mysema.query.domain.QCommonPersistence;

File: querydsl-jdo/src/main/java/com/mysema/query/jdo/AbstractJDOQLSubQuery.java
Patch:
@@ -30,7 +30,7 @@
 public class AbstractJDOQLSubQuery<Q extends AbstractJDOQLSubQuery<Q>> extends DetachableQuery<Q>{
 
     public AbstractJDOQLSubQuery() {
-        this(new DefaultQueryMetadata(false));
+        this(new DefaultQueryMetadata().noValidate());
     }
 
     @SuppressWarnings("unchecked")

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/AbstractJPQLSubQuery.java
Patch:
@@ -38,7 +38,7 @@ public class AbstractJPQLSubQuery<Q extends AbstractJPQLSubQuery<Q>> extends Det
     private final JPQLQueryMixin<Q> queryMixin;
 
     public AbstractJPQLSubQuery() {
-        this(new DefaultQueryMetadata(false));
+        this(new DefaultQueryMetadata().noValidate());
     }
 
     @SuppressWarnings("unchecked")

File: querydsl-lucene/src/main/java/com/mysema/query/lucene/AbstractLuceneQuery.java
Patch:
@@ -79,7 +79,7 @@ public abstract class AbstractLuceneQuery<T,Q extends AbstractLuceneQuery<T,Q>>
     @SuppressWarnings("unchecked")
     public AbstractLuceneQuery(LuceneSerializer serializer, Searcher searcher,
             Function<Document, T> transformer) {
-        queryMixin = new QueryMixin<Q>((Q) this, new DefaultQueryMetadata(false));
+        queryMixin = new QueryMixin<Q>((Q) this, new DefaultQueryMetadata().noValidate());
         this.serializer = serializer;
         this.searcher = searcher;
         this.transformer = transformer;

File: querydsl-mongodb/src/main/java/com/mysema/query/mongodb/MongodbQuery.java
Patch:
@@ -67,7 +67,7 @@ private static class NoResults extends RuntimeException {}
     private final Function<DBObject, K> transformer;
 
     public MongodbQuery(DBCollection collection, Function<DBObject, K> transformer, MongodbSerializer serializer) {
-        this.queryMixin = new QueryMixin<MongodbQuery<K>>(this, new DefaultQueryMetadata(false));
+        this.queryMixin = new QueryMixin<MongodbQuery<K>>(this, new DefaultQueryMetadata().noValidate());
         this.transformer = transformer;
         this.collection = collection;
         this.serializer = serializer;

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -40,7 +40,6 @@
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.QueryModifiers;
 import com.mysema.query.SearchResults;
-import com.mysema.query.support.Expressions;
 import com.mysema.query.support.ProjectableQuery;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.ExpressionUtils;
@@ -84,7 +83,7 @@ public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q> & Query> ex
     protected boolean unionAll;
 
     public AbstractSQLQuery(@Nullable Connection conn, Configuration configuration) {
-        this(conn, configuration, new DefaultQueryMetadata());
+        this(conn, configuration, new DefaultQueryMetadata().noValidate());
     }
 
     @SuppressWarnings("unchecked")

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLSubQuery.java
Patch:
@@ -40,7 +40,7 @@ public class AbstractSQLSubQuery<Q extends AbstractSQLSubQuery<Q>> extends Detac
     protected final SQLQueryMixin<Q> queryMixin;
     
     public AbstractSQLSubQuery() {
-        this(new DefaultQueryMetadata(false));
+        this(new DefaultQueryMetadata().noValidate());
     }
 
     @SuppressWarnings("unchecked")

File: querydsl-apt/src/main/java/com/mysema/query/apt/ExtendedTypeFactory.java
Patch:
@@ -115,6 +115,7 @@ public Type visitDeclared(DeclaredType declaredType, Boolean p) {
                 TypeElement typeElement = (TypeElement)declaredType.asElement();
                 switch(typeElement.getKind()){
                 case ENUM:      return createEnumType(declaredType, typeElement, p);
+                case ANNOTATION_TYPE:
                 case CLASS:     return createClassType(declaredType, typeElement, p);
                 case INTERFACE: return createInterfaceType(declaredType, typeElement, p);
                 default: throw new IllegalArgumentException("Illegal type " + typeElement);

File: querydsl-core/src/main/java/com/mysema/query/types/expr/BooleanExpression.java
Patch:
@@ -15,6 +15,7 @@
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.types.Expression;
 import com.mysema.query.types.ExpressionUtils;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
@@ -68,8 +69,8 @@ public static BooleanExpression anyOf(BooleanExpression... exprs){
     @Nullable
     private volatile BooleanExpression not;
 
-    public BooleanExpression() {
-        super(Boolean.class);
+    public BooleanExpression(Expression<Boolean> mixin) {
+        super(mixin);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/CollectionExpressionBase.java
Patch:
@@ -40,8 +40,8 @@ public abstract class CollectionExpressionBase<T extends Collection<E>, E> exten
     @Nullable
     private volatile NumberExpression<Integer> size;
 
-    public CollectionExpressionBase(Class<? extends T> type) {
-        super(type);
+    public CollectionExpressionBase(Expression<T> mixin) {
+        super(mixin);
     }
 
     public final BooleanExpression contains(E child) {

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ComparableExpression.java
Patch:
@@ -34,8 +34,8 @@ public abstract class ComparableExpression<T extends Comparable> extends Compara
 
     private static final long serialVersionUID = 5761359576767404270L;
 
-    public ComparableExpression(Class<? extends T> type) {
-        super(type);
+    public ComparableExpression(Expression<T> mixin) {
+        super(mixin);
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ComparableExpressionBase.java
Patch:
@@ -16,6 +16,7 @@
 import javax.annotation.Nullable;
 
 import com.mysema.query.types.ConstantImpl;
+import com.mysema.query.types.Expression;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Order;
 import com.mysema.query.types.OrderSpecifier;
@@ -39,8 +40,8 @@ public abstract class ComparableExpressionBase<T extends Comparable> extends Sim
     @Nullable
     private volatile StringExpression stringCast;
 
-    public ComparableExpressionBase(Class<? extends T> type) {
-        super(type);
+    public ComparableExpressionBase(Expression<T> mixin) {
+        super(mixin);
     }
 
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/DateExpression.java
Patch:
@@ -17,6 +17,7 @@
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.types.Expression;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathImpl;
@@ -64,8 +65,8 @@ public static <T extends Comparable> DateExpression<T> currentDate(Class<T> cl)
     @Nullable
     private volatile NumberExpression<Integer> week, month, year, yearMonth;
 
-    public DateExpression(Class<? extends T> type) {
-        super(type);
+    public DateExpression(Expression<T> mixin) {
+        super(mixin);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/DateTimeExpression.java
Patch:
@@ -17,6 +17,7 @@
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.types.Expression;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathImpl;
@@ -89,8 +90,8 @@ public static <T extends Comparable> DateTimeExpression<T> currentTimestamp(Clas
     @Nullable
     private volatile NumberExpression<Integer> week, month, year, yearMonth;
 
-    public DateTimeExpression(Class<? extends T> type) {
-        super(type);
+    public DateTimeExpression(Expression<T> mixin) {
+        super(mixin);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EnumExpression.java
Patch:
@@ -13,6 +13,7 @@
  */
 package com.mysema.query.types.expr;
 
+import com.mysema.query.types.Expression;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathImpl;
@@ -28,8 +29,8 @@ public abstract class EnumExpression<T extends Enum<T>> extends ComparableExpres
 
     private static final long serialVersionUID = 8819222316513862829L;
 
-    public EnumExpression(Class<? extends T> type) {
-        super(type);
+    public EnumExpression(Expression<T> mixin) {
+        super(mixin);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/MapExpressionBase.java
Patch:
@@ -40,8 +40,8 @@ public abstract class MapExpressionBase<K, V, Q extends SimpleExpression<? super
     @Nullable
     private volatile BooleanExpression empty;
 
-    public MapExpressionBase(Class<? extends Map<K, V>> type) {
-        super(type);
+    public MapExpressionBase(Expression<Map<K, V>> mixin) {
+        super(mixin);
     }
     
     public final BooleanExpression contains(K key, V value) {

File: querydsl-core/src/main/java/com/mysema/query/types/expr/NumberExpression.java
Patch:
@@ -82,8 +82,8 @@ public static NumberExpression<Double> random(){
     @Nullable
     private volatile NumberExpression<Integer> round;
 
-    public NumberExpression(Class<? extends T> type) {
-        super(type);
+    public NumberExpression(Expression<T> mixin) {
+        super(mixin);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/StringExpression.java
Patch:
@@ -43,8 +43,8 @@ public abstract class StringExpression extends ComparableExpression<String> {
     @Nullable
     private volatile BooleanExpression isempty;
 
-    public StringExpression() {
-        super(String.class);
+    public StringExpression(Expression<String> mixin) {
+        super(mixin);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/TemporalExpression.java
Patch:
@@ -27,8 +27,8 @@ public abstract class TemporalExpression<T extends Comparable> extends Comparabl
 
     private static final long serialVersionUID = 1137918766051524298L;
 
-    public TemporalExpression(Class<? extends T> type) {
-        super(type);
+    public TemporalExpression(Expression<T> mixin) {
+        super(mixin);
     }
 
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/TimeExpression.java
Patch:
@@ -17,6 +17,7 @@
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.types.Expression;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathImpl;
@@ -38,8 +39,8 @@ public abstract class TimeExpression<T extends Comparable> extends TemporalExpre
     @Nullable
     private volatile NumberExpression<Integer> hours, minutes, seconds, milliseconds;
 
-    public TimeExpression(Class<? extends T> type) {
-        super(type);
+    public TimeExpression(Expression<T> mixin) {
+        super(mixin);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/CollectionPathBase.java
Patch:
@@ -38,8 +38,8 @@ public abstract class CollectionPathBase<C extends Collection<E>, E, Q extends S
 
     private static final long serialVersionUID = -9004995667633601298L;
 
-    public CollectionPathBase(Class<? extends C> type) {
-        super(type);
+    public CollectionPathBase(Path<C> mixin) {
+        super(mixin);
     }
 
     @Nullable

File: querydsl-core/src/test/java/com/mysema/query/types/SignatureTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
+import com.mysema.query.types.expr.Coalesce;
 import com.mysema.query.types.expr.DslExpression;
 import com.mysema.query.types.expr.SimpleExpression;
 
@@ -61,6 +62,7 @@ public void ReturnType_extends_SimpleExpression(){
                 if (!skippedMethods.contains(m.getName())
                  && Modifier.isPublic(m.getModifiers())
                  && Expression.class.isAssignableFrom(m.getReturnType())
+                 && !Coalesce.class.isAssignableFrom(m.getReturnType())
                  && !DslExpression.class.isAssignableFrom(m.getReturnType())
                  && !SimpleExpression.class.isAssignableFrom(m.getReturnType())){
                     errors.add(cl.getSimpleName()+"."+m.getName() + " has illegal return type");

File: querydsl-core/src/test/java/com/mysema/query/types/expr/CoalesceTest.java
Patch:
@@ -40,7 +40,7 @@ public void withSingleArg(){
     @Test
     public void asComparable(){
         Coalesce<String> c = new Coalesce<String>(firstname, lastname);
-        c.asc();
+        c.getValue().asc();
     }
 
     @Test

File: querydsl-core/src/test/java/com/mysema/query/types/query/SubQueryTest.java
Patch:
@@ -56,7 +56,7 @@ public void test(){
             if (prev != null){
                 assertEquals(sq, prev);
             }
-            assertEquals(sq.getType().hashCode(), sq.hashCode());
+            //assertEquals(sq.getType().hashCode(), sq.hashCode());
             sq.accept(ToStringVisitor.DEFAULT, templates);
             prev = sq;
         }

File: querydsl-core/src/test/java/com/mysema/query/types/template/TemplateExpressionTest.java
Patch:
@@ -63,7 +63,7 @@ public void Constructors(){
             if (prev != null){
                 assertFalse(custom.equals(prev));
             }
-            assertEquals(custom.getType().hashCode(), custom.hashCode());
+            //assertEquals(custom.getType().hashCode(), custom.hashCode());
             custom.accept(ToStringVisitor.DEFAULT, templates);
             prev = custom;
         }

File: querydsl-lucene/src/test/java/com/mysema/query/lucene/QueryElementTest.java
Patch:
@@ -25,7 +25,7 @@ public class QueryElementTest {
     public void test(){
         QueryElement element = new QueryElement(new TermQuery(new Term("str","text")));
         assertEquals("str:text",element.toString());
-        assertEquals(element.getQuery().hashCode(), element.hashCode());
+        //assertEquals(element.getQuery().hashCode(), element.hashCode());
 
         QueryElement element2 = new QueryElement(new TermQuery(new Term("str","text")));
         assertEquals(element2, element);

File: querydsl-sql/src/test/java/com/mysema/query/SelectBaseTest.java
Patch:
@@ -200,7 +200,7 @@ public void Casts() throws SQLException {
     @Test
     public void Coalesce(){
         Coalesce<String> c = new Coalesce<String>(employee.firstname, employee.lastname).add("xxx");
-        query().from(employee).where(c.eq("xxx")).list(employee.id);
+        query().from(employee).where(c.getValue().eq("xxx")).list(employee.id);
     }
 
     @Test

File: querydsl-maven-plugin/src/test/java/com/mysema/query/maven/GenericExporterMojoTest.java
Patch:
@@ -19,7 +19,7 @@ public void Execute() throws Exception {
         mavenProject.getBuild().setOutputDirectory("target/classes");
         
         GenericExporterMojo mojo = new GenericExporterMojo();
-        set(mojo, "targetFolder", "target/generated-test-data");
+        set(mojo, "targetFolder", new File("target/generated-test-data"));
         set(mojo, "packages", new String[]{"com.mysema.query.maven"});
         set(mojo, "project", mavenProject);
         mojo.execute();

File: querydsl-core/src/main/java/com/mysema/query/types/expr/CollectionExpressionBase.java
Patch:
@@ -30,7 +30,7 @@
  * @param <T> expression type
  * @param <E> collection element type
  */
-public abstract class CollectionExpressionBase<T extends Collection<E>, E> extends SimpleExpression<T> implements CollectionExpression<T, E> {
+public abstract class CollectionExpressionBase<T extends Collection<E>, E> extends DslExpression<T> implements CollectionExpression<T, E> {
 
     private static final long serialVersionUID = 691230660037162054L;
 
@@ -53,6 +53,8 @@ public final BooleanExpression contains(Expression<E> child) {
     }
 
     public abstract Class<E> getElementType();
+    
+
 
     public final BooleanExpression isEmpty() {
         if (empty == null) {

File: querydsl-core/src/main/java/com/mysema/query/types/expr/MapExpressionBase.java
Patch:
@@ -30,7 +30,7 @@
  * @param <K> key type
  * @param <V> value type
  */
-public abstract class MapExpressionBase<K, V, Q extends SimpleExpression<? super V>> extends SimpleExpression<Map<K,V>> implements MapExpression<K,V> {
+public abstract class MapExpressionBase<K, V, Q extends SimpleExpression<? super V>> extends DslExpression<Map<K,V>> implements MapExpression<K,V> {
 
     private static final long serialVersionUID = 2856001983312366841L;
 
@@ -43,7 +43,7 @@ public abstract class MapExpressionBase<K, V, Q extends SimpleExpression<? super
     public MapExpressionBase(Class<? extends Map<K, V>> type) {
         super(type);
     }
-
+    
     public final BooleanExpression contains(K key, V value) {
         return get(key).eq(value);
     }

File: querydsl-core/src/main/java/com/mysema/query/types/query/ListSubQuery.java
Patch:
@@ -74,15 +74,15 @@ public boolean equals(Object o) {
        return subQueryMixin.equals(o);
     }
 
-    @Override
+    //@Override
     public NumberExpression<Long> count(){
         if (count == null) {
             count = count(Ops.AggOps.COUNT_AGG);    
         }
         return count;
     }
 
-    @Override
+    //@Override
     public NumberExpression<Long> countDistinct(){
         if (countDistinct == null) {
             countDistinct = count(Ops.AggOps.COUNT_DISTINCT_AGG);    

File: querydsl-core/src/main/java/com/mysema/query/types/query/SimpleSubQuery.java
Patch:
@@ -22,7 +22,7 @@
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.BooleanOperation;
-import com.mysema.query.types.expr.SimpleExpression;
+import com.mysema.query.types.expr.DslExpression;
 
 /**
  * Object typed single result subquery
@@ -31,7 +31,7 @@
  *
  * @param <T> expression type
  */
-public final class SimpleSubQuery<T> extends SimpleExpression<T> implements ExtendedSubQueryExpression<T>{
+public final class SimpleSubQuery<T> extends DslExpression<T> implements ExtendedSubQueryExpression<T>{
 
     private static final long serialVersionUID = -64156984110154969L;
 

File: querydsl-core/src/test/java/com/mysema/query/types/SignatureTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
+import com.mysema.query.types.expr.DslExpression;
 import com.mysema.query.types.expr.SimpleExpression;
 
 public class SignatureTest {
@@ -60,6 +61,7 @@ public void ReturnType_extends_SimpleExpression(){
                 if (!skippedMethods.contains(m.getName())
                  && Modifier.isPublic(m.getModifiers())
                  && Expression.class.isAssignableFrom(m.getReturnType())
+                 && !DslExpression.class.isAssignableFrom(m.getReturnType())
                  && !SimpleExpression.class.isAssignableFrom(m.getReturnType())){
                     errors.add(cl.getSimpleName()+"."+m.getName() + " has illegal return type");
                 }

File: querydsl-mongodb/src/test/java/com/mysema/query/mongodb/MongodbQueryTest.java
Patch:
@@ -361,8 +361,8 @@ public void In_ObjectIds2() {
         i.setCtds(Arrays.asList(ObjectId.get(), ObjectId.get(), ObjectId.get()));
         ds.save(i);
         
-        assertTrue(where(item, item.ctds.in(i.getCtds())).count() > 0);
-        assertTrue(where(item, item.ctds.in(Arrays.asList(ObjectId.get(), ObjectId.get()))).count() == 0);
+        assertTrue(where(item, item.ctds.any().in(i.getCtds())).count() > 0);
+        assertTrue(where(item, item.ctds.any().in(Arrays.asList(ObjectId.get(), ObjectId.get()))).count() == 0);
     }
         
     //TODO

File: querydsl-core/src/main/java/com/mysema/query/types/query/BooleanSubQuery.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.Ops;
+import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.SubQueryExpressionImpl;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
@@ -31,7 +32,7 @@ public final class BooleanSubQuery extends BooleanExpression implements Extended
 
     private static final long serialVersionUID = -64156984110154969L;
 
-    private final SubQueryExpressionImpl<Boolean> subQueryMixin;
+    private final SubQueryExpression<Boolean> subQueryMixin;
     
     @Nullable
     private volatile BooleanExpression exists;

File: querydsl-core/src/main/java/com/mysema/query/types/query/ComparableSubQuery.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.Ops;
+import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.SubQueryExpressionImpl;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
@@ -35,7 +36,7 @@ public final class ComparableSubQuery<T extends Comparable<?>> extends Comparabl
 
     private static final long serialVersionUID = -64156984110154969L;
 
-    private final SubQueryExpressionImpl<T> subQueryMixin;
+    private final SubQueryExpression<T> subQueryMixin;
 
     @Nullable
     private volatile BooleanExpression exists;

File: querydsl-core/src/main/java/com/mysema/query/types/query/DateSubQuery.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.Ops;
+import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.SubQueryExpressionImpl;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
@@ -34,7 +35,7 @@ public final class DateSubQuery<T extends Comparable<?>> extends DateExpression<
 
     private static final long serialVersionUID = -64156984110154969L;
 
-    private final SubQueryExpressionImpl<T> subQueryMixin;
+    private final SubQueryExpression<T> subQueryMixin;
 
     @Nullable
     private volatile BooleanExpression exists;

File: querydsl-core/src/main/java/com/mysema/query/types/query/DateTimeSubQuery.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.Ops;
+import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.SubQueryExpressionImpl;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
@@ -34,7 +35,7 @@ public final class DateTimeSubQuery<T extends Comparable<?>> extends DateTimeExp
 
     private static final long serialVersionUID = -64156984110154969L;
 
-    private final SubQueryExpressionImpl<T> subQueryMixin;
+    private final SubQueryExpression<T> subQueryMixin;
 
     @Nullable
     private volatile BooleanExpression exists;

File: querydsl-core/src/main/java/com/mysema/query/types/query/ListSubQuery.java
Patch:
@@ -23,6 +23,7 @@
 import com.mysema.query.types.OperationImpl;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
+import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.SubQueryExpressionImpl;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
@@ -45,7 +46,7 @@ public final class ListSubQuery<T> extends CollectionExpressionBase<List<T>,T> i
 
     private final Class<T> elementType;
 
-    private final SubQueryExpressionImpl<List<T>> subQueryMixin;
+    private final SubQueryExpression<List<T>> subQueryMixin;
 
     @Nullable
     private volatile BooleanExpression exists;
@@ -56,7 +57,7 @@ public final class ListSubQuery<T> extends CollectionExpressionBase<List<T>,T> i
     @Nullable
     private volatile NumberExpression<Long> countDistinct;
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     public ListSubQuery(Class<T> elementType, QueryMetadata md) {
         super((Class)List.class);
         this.elementType = elementType;

File: querydsl-core/src/main/java/com/mysema/query/types/query/NumberSubQuery.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.Ops;
+import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.SubQueryExpressionImpl;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
@@ -34,7 +35,7 @@ public final class NumberSubQuery<T extends Number & Comparable<?>> extends Numb
 
     private static final long serialVersionUID = -64156984110154969L;
 
-    private final SubQueryExpressionImpl<T> subQueryMixin;
+    private final SubQueryExpression<T> subQueryMixin;
 
     @Nullable
     private volatile BooleanExpression exists;

File: querydsl-core/src/main/java/com/mysema/query/types/query/SimpleSubQuery.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.Ops;
+import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.SubQueryExpressionImpl;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
@@ -34,7 +35,7 @@ public final class SimpleSubQuery<T> extends SimpleExpression<T> implements Exte
 
     private static final long serialVersionUID = -64156984110154969L;
 
-    private final SubQueryExpressionImpl<T> subQueryMixin;
+    private final SubQueryExpression<T> subQueryMixin;
 
     @Nullable
     private volatile BooleanExpression exists;

File: querydsl-core/src/main/java/com/mysema/query/types/query/StringSubQuery.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.Ops;
+import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.SubQueryExpressionImpl;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
@@ -32,7 +33,7 @@ public final class StringSubQuery extends StringExpression implements ExtendedSu
 
     private static final long serialVersionUID = -64156984110154969L;
 
-    private final SubQueryExpressionImpl<String> subQueryMixin;
+    private final SubQueryExpression<String> subQueryMixin;
     
     @Nullable
     private volatile BooleanExpression exists;

File: querydsl-core/src/main/java/com/mysema/query/types/query/TimeSubQuery.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.Ops;
+import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.SubQueryExpressionImpl;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
@@ -34,7 +35,7 @@ public final class TimeSubQuery<T extends Comparable<?>> extends TimeExpression<
 
     private static final long serialVersionUID = -64156984110154969L;
 
-    private final SubQueryExpressionImpl<T> subQueryMixin;
+    private final SubQueryExpression<T> subQueryMixin;
 
     @Nullable
     private volatile BooleanExpression exists;

File: querydsl-apt/src/test/java/com/mysema/query/domain/Examples.java
Patch:
@@ -64,6 +64,9 @@ public int compareTo(Complex<T> arg0) {
             return 0;
         }
         
+        public boolean equals(Object o) {
+            return o == this;
+        }
     }
     
     @QueryEntity

File: querydsl-apt/src/test/java/com/mysema/query/domain/PropertiesTest.java
Patch:
@@ -73,11 +73,11 @@ public static class Pizza extends AbstractEntity {
 
         @Column @Temporal(TemporalType.TIMESTAMP)
         public Date getOrderTime() {
-            return orderTime;
+            return new Date(orderTime.getTime());
         }
 
         public void setOrderTime(Date orderTime) {
-            this.orderTime = orderTime;
+            this.orderTime = new Date(orderTime.getTime());
         }
 
         @ManyToOne

File: querydsl-apt/src/test/java/com/mysema/query/domain/Superclass2Test.java
Patch:
@@ -38,7 +38,7 @@ protected void onCreate() {
         }
 
         public Date getCreatedOn() {
-            return createdOn;
+            return new Date(createdOn.getTime());
         }
 
     }

File: querydsl-apt/src/test/java/com/mysema/query/inheritance/Inheritance5Test.java
Patch:
@@ -32,11 +32,11 @@ public static class CommonPersistence {
         private Date createdOn;
 
         public Date getCreatedOn() {
-            return createdOn;
+            return new Date(createdOn.getTime());
         }
 
         public void setCreatedOn(Date createdOn) {
-            this.createdOn = createdOn;
+            this.createdOn = new Date(createdOn.getTime());
         }
 
     }

File: querydsl-codegen/src/test/java/com/mysema/query/codegen/EmbeddedTest.java
Patch:
@@ -19,20 +19,20 @@ public static class EntityClass extends AbstractEntity<SubEntityCode> {
     public static abstract class AbstractEntity<C extends EntityCode> {
 
         @QueryEmbedded
-        C code;
+        public C code;
     }
 
     @QuerySupertype
     public static class EntityCode {
 
-        String code;
+        public String code;
 
     }
     
     @QueryEmbeddable
     public static class SubEntityCode extends EntityCode {
         
-        String property;
+        public String property;
         
     }
     

File: querydsl-codegen/src/test/java/com/mysema/query/codegen/EntityInheritanceTest.java
Patch:
@@ -11,16 +11,16 @@ public class EntityInheritanceTest {
     @QuerySupertype
     public static class TreeEntity<T extends TreeEntity<T>> {
         
-        Integer id;
+        public Integer id;
         
-        T parent;
+        public T parent;
         
     }
 
     @QueryEntity
     public static class TestEntity extends TreeEntity<TestEntity> {
         
-        String name;
+        public String name;
         
     }
     

File: querydsl-collections/src/test/java/com/mysema/query/collections/Animal.java
Patch:
@@ -74,7 +74,7 @@ public void setAlive(boolean alive) {
     }
 
     public void setBirthdate(java.util.Date birthdate) {
-        this.birthdate = birthdate;
+        this.birthdate = new Date(birthdate.getTime());
     }
 
     public void setBodyWeight(int bodyWeight) {
@@ -106,7 +106,7 @@ public Date getDateAsSimple() {
     }
 
     public void setDateAsSimple(Date dateAsSimple) {
-        this.dateAsSimple = dateAsSimple;
+        this.dateAsSimple = new Date(dateAsSimple.getTime());
     }
 
 }

File: querydsl-collections/src/test/java/com/mysema/query/collections/Cat.java
Patch:
@@ -74,7 +74,7 @@ public Cat(String name, int id) {
 
     public Cat(String name, int id, Date birthdate) {
         this(name, id);
-        this.birthdate = birthdate;
+        this.birthdate = new Date(birthdate.getTime());
         this.dateField = new java.sql.Date(birthdate.getTime());
         this.timeField = new java.sql.Time(birthdate.getTime());
     }
@@ -120,7 +120,7 @@ public void setBreed(int breed) {
     }
 
     public void setDateField(java.sql.Date dateField) {
-        this.dateField = dateField;
+        this.dateField = new java.sql.Date(dateField.getTime());
     }
 
     public void setEyecolor(Color eyecolor) {
@@ -156,7 +156,7 @@ public Cat[] getKittenArray() {
     }
 
     public void setKittenArray(Cat[] kittenArray) {
-        this.kittenArray = kittenArray;
+        this.kittenArray = kittenArray.clone();
     }
 
     public String toString() {

File: querydsl-jdo/src/test/java/com/mysema/query/jdo/models/company/Office.java
Patch:
@@ -47,11 +47,11 @@ public Office(long floor, String roomName, String description) {
     }
 
     public Date getDate() {
-        return date;
+        return new Date(date.getTime());
     }
 
     public void setDate(Date date) {
-        this.date = date;
+        this.date = new Date(date.getTime());
     }
 
     /**

File: querydsl-jdo/src/test/java/com/mysema/query/jdo/models/company/Qualification.java
Patch:
@@ -48,7 +48,7 @@ public Person getPerson() {
     }
 
     public void setDate(Date date) {
-        this.date = date;
+        this.date = new Date(date.getTime());
     }
 
     public Date getDate() {

File: querydsl-lucene/src/main/java/com/mysema/query/lucene/ResultIterator.java
Patch:
@@ -46,7 +46,7 @@ public final class ResultIterator<T> implements CloseableIterator<T> {
 
     public ResultIterator(ScoreDoc[] scoreDocs, int offset, Searcher searcher, 
             @Nullable FieldSelector fieldSelector, Function<Document, T> transformer) {
-        this.scoreDocs = scoreDocs;
+        this.scoreDocs = scoreDocs.clone();
         this.cursor = offset;
         this.searcher = searcher;
         this.fieldSelector = fieldSelector;

File: querydsl-sql-codegen/src/main/java/com/mysema/query/sql/support/IndexData.java
Patch:
@@ -27,15 +27,15 @@ public class IndexData {
     
     public IndexData(String name, String[] columns) {
         this.name = name;
-        this.columns = columns;
+        this.columns = columns.clone();
     }
 
     public String getName() {
         return name;
     }
 
     public String[] getColumns() {
-        return columns;
+        return columns.clone();
     }
 
     public boolean isUnique() {

File: querydsl-sql/src/main/java/com/mysema/query/sql/RelationalPathBase.java
Patch:
@@ -105,7 +105,7 @@ public Path<?>[] all() {
             all = new Path[columns.size()];
             columns.toArray(all);
         }
-        return all;
+        return all.clone();
     }
     
     @Override

File: querydsl-sql/src/test/java/com/mysema/query/ddl/ForeignKeyBuilder.java
Patch:
@@ -32,7 +32,7 @@ public ForeignKeyBuilder(CreateTableClause clause, SQLTemplates templates, List<
         this.templates = templates;
         this.foreignKeys = foreignKeys;
         this.name = name;
-        this.foreignColumns = columns;
+        this.foreignColumns = columns.clone();
     }
 
     public CreateTableClause references(String table, String... parentColumns) {

File: querydsl-sql/src/test/java/com/mysema/query/ddl/IndexData.java
Patch:
@@ -19,15 +19,15 @@ public class IndexData {
     
     public IndexData(String name, String[] columns) {
         this.name = name;
-        this.columns = columns;
+        this.columns = columns.clone();
     }
 
     public String getName() {
         return name;
     }
 
     public String[] getColumns() {
-        return columns;
+        return columns.clone();
     }
 
     public boolean isUnique() {

File: querydsl-sql/src/test/java/com/mysema/query/sql/domain/Employee.java
Patch:
@@ -81,11 +81,11 @@ public void setSalary(BigDecimal salary) {
     }
 
     public Date getDatefield() {
-        return datefield;
+        return new Date(datefield.getTime());
     }
 
     public void setDatefield(Date datefield) {
-        this.datefield = datefield;
+        this.datefield = new Date(datefield.getTime());
     }
 
     public Time getTimefield() {

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -485,6 +485,7 @@ public <RT> SearchResults<RT> listResults(Expression<RT> expr) {
         long total = count();
         try {
             if (total > 0) {
+                queryMixin.getMetadata().clearProjection();
                 QueryModifiers modifiers = queryMixin.getMetadata().getModifiers();
                 return new SearchResults<RT>(list(expr), modifiers, total);
             } else {

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColQueryImpl.java
Patch:
@@ -37,7 +37,7 @@ public ColQueryImpl() {
      * @param templates
      */
     public ColQueryImpl(ColQueryTemplates templates) {
-        this(new DefaultQueryEngine(new DefaultEvaluatorFactory(ColQueryTemplates.DEFAULT)));
+        this(new DefaultQueryEngine(new DefaultEvaluatorFactory(templates)));
     }
     
     /**

File: querydsl-collections/src/test/java/com/mysema/query/collections/ColQueryTest.java
Patch:
@@ -42,7 +42,7 @@ public void CustomTemplates() {
             add(Ops.DateTimeOps.MONTH, "{0}.getMonthOfYear()");
             add(Ops.DateTimeOps.YEAR, "{0}.getYear()");
         }};
-        ColQuery query = new ColQueryImpl(templates);
+        new ColQueryImpl(templates);
     }
     
     @Test

File: querydsl-codegen/src/main/java/com/mysema/query/codegen/TypeFactory.java
Patch:
@@ -213,7 +213,7 @@ private Type getTypeParameter(Class<?> cl, int i) {
             return create((Class)typeVariable.getBounds()[0], typeVariable);    
         } else  if (firstBound instanceof ParameterizedType){
             ParameterizedType parameterized = (ParameterizedType)firstBound;
-            Class<?> rawType = (Class)((ParameterizedType)firstBound).getRawType();
+            Class<?> rawType = (Class)parameterized.getRawType();
             if (rawType.equals(cl)) {
                 return new TypeExtends(typeVariable.getName(), new ClassType(cl));
             } else {

File: querydsl-core/src/main/java/com/mysema/query/types/QBean.java
Patch:
@@ -104,7 +104,7 @@ private static Map<String,Expression<?>> createBindings(Expression<?>... args) {
 
     private final Map<String, ? extends Expression<?>> bindings;
 
-    private final Map<String, Field> fields = new HashMap<String, Field>();
+    private final transient Map<String, Field> fields = new HashMap<String, Field>();
 
     private final List<Expression<?>> args;
 

File: querydsl-core/src/main/java/com/mysema/util/BeanMap.java
Patch:
@@ -60,13 +60,13 @@ public class BeanMap extends AbstractMap<String, Object> implements Cloneable {
     /**
      * An empty array.  Used to invoke accessors via reflection.
      */
-    public static final Object[] NULL_ARGUMENTS = {};
+    private static final Object[] NULL_ARGUMENTS = {};
 
     /**
      * Maps primitive Class types to transformers.  The transformer
      * transform strings into the appropriate primitive wrapper.
      */
-    public static HashMap<Class<?>, Function<?,?>> defaultFunctions = new HashMap<Class<?>, Function<?,?>>();
+    private static final Map<Class<?>, Function<?,?>> defaultFunctions = new HashMap<Class<?>, Function<?,?>>();
 
     static {
         defaultFunctions.put(Boolean.TYPE, new Function() {
@@ -76,7 +76,7 @@ public Object apply(Object input) {
         });
         defaultFunctions.put(Character.TYPE, new Function() {
             public Object apply(Object input) {
-                return new Character(input.toString().charAt(0));
+                return Character.valueOf(input.toString().charAt(0));
             }
         });
         defaultFunctions.put(Byte.TYPE, new Function() {

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLSerializer.java
Patch:
@@ -361,7 +361,7 @@ public void serializeForInsert(QueryMetadata metadata, RelationalPath<?> entity,
         dmlWithSchema = false;
         // columns
         if (!columns.isEmpty()) {
-            append("(");
+            append(" (");
             skipParent = true;
             handle(COMMA, columns);
             skipParent = false;

File: querydsl-sql/src/test/java/com/mysema/query/_mysql/InsertMySQLTest.java
Patch:
@@ -55,7 +55,7 @@ public void Insert_with_Special_Options(){
         
         clause.addFlag(Position.START_OVERRIDE, "insert ignore into ");
         
-        assertEquals("insert ignore into SURVEY(ID, NAME) values (?, ?)", clause.toString());
+        assertEquals("insert ignore into SURVEY (ID, NAME) values (?, ?)", clause.toString());
         clause.execute();        
     }
 
@@ -65,7 +65,7 @@ public void Replace(){
         clause.columns(survey.id, survey.name)
             .values(3, "Hello");
         
-        assertEquals("replace into SURVEY(ID, NAME) values (?, ?)", clause.toString());
+        assertEquals("replace into SURVEY (ID, NAME) values (?, ?)", clause.toString());
         clause.execute();
     }
 }

File: querydsl-sql/src/test/java/com/mysema/query/sql/SerializationTest.java
Patch:
@@ -75,7 +75,7 @@ public void Insert(){
         SQLInsertClause insertClause = new SQLInsertClause(connection,SQLTemplates.DEFAULT,survey);
         insertClause.set(survey.id, 1);
         insertClause.set(survey.name, (String)null);
-        assertEquals("insert into SURVEY(ID, NAME)\nvalues (?, ?)", insertClause.toString());
+        assertEquals("insert into SURVEY (ID, NAME)\nvalues (?, ?)", insertClause.toString());
     }
     
     @Test

File: querydsl-apt/src/test/java/com/mysema/query/apt/GenericExporterTest.java
Patch:
@@ -77,6 +77,8 @@ public void Execute2() throws IOException {
         // GenericExporter doesn't include field/method selection
         expected.add("QFileAttachment.java");
         
+        expected.add("QJodaTest_BaseEntity.java");
+        
         // FIXME
         expected.add("QEntityInheritanceTest_TestEntity.java");
         

File: querydsl-apt/src/test/java/com/mysema/query/domain/JodaTest.java
Patch:
@@ -1,5 +1,7 @@
 package com.mysema.query.domain;
 
+import static org.junit.Assert.*;
+
 import java.util.Date;
 
 import javax.persistence.Access;
@@ -37,6 +39,6 @@ public void setCreatedDate(DateTime creationDate) {
     
     @Test
     public void test() {
-        // TODO
+        assertEquals(Date.class, QJodaTest_BaseEntity.baseEntity.createdDate.getType());
     }
 }

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/HQLTemplates.java
Patch:
@@ -43,6 +43,7 @@ public HQLTemplates() {
     }
     
     public HQLTemplates(char escape) {
+        super(escape);
         //CHECKSTYLE:OFF
         add(CAST, "cast({0} as {1s})");
      // TODO : remove this when Hibernate supports type(alias)

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Domain.java
Patch:
@@ -28,8 +28,10 @@ private Domain(){}
     public static final List<Class<?>> classes = Arrays.<Class<?>>asList(
             Account.class,
             Animal.class,
+            Author.class,
             AuditLog.class,
             Bar.class,
+            Book.class,
             Calendar.class,
             Cat.class,
             Catalog.class,

File: querydsl-apt/src/test/java/com/mysema/query/domain/AnyUsageTest.java
Patch:
@@ -62,7 +62,8 @@ public static class Dealer implements Serializable {
     }
     
     @Entity
-    public static class Company {
+    public static class Company implements Serializable {        
+        private static final long serialVersionUID = -5369301332567282659L;
         
         @Id
         @GeneratedValue

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColQueryImpl.java
Patch:
@@ -22,7 +22,7 @@
  * @author tiwe
  *
  */
-public class ColQueryImpl extends AbstractColQuery<ColQueryImpl> implements ColQuery, Cloneable{
+public class ColQueryImpl extends AbstractColQuery<ColQueryImpl> implements ColQuery, Cloneable {
 
     /**
      * Create a new ColQueryImpl instance

File: querydsl-core/src/main/java/com/mysema/query/group/AbstractGroupExpression.java
Patch:
@@ -50,7 +50,7 @@ public <R, C> R accept(Visitor<R, C> v, C context) {
     
     @Override
     public boolean equals(Object o) {
-        if (getClass().equals(o.getClass())) {
+        if (o != null && getClass().equals(o.getClass())) {
             return ((GroupExpression<?,?>)o).getExpression().equals(expr);
         } else {
             return false;

File: querydsl-core/src/main/java/com/mysema/query/types/Expression.java
Patch:
@@ -26,7 +26,7 @@
  * @param <T> expression type
  *
  */
-public interface Expression<T> extends Serializable{
+public interface Expression<T> extends Serializable {
 
     /**
      * Accept the visitor with the given context

File: querydsl-jdo/src/test/java/com/mysema/query/jdo/AbstractJDOTest.java
Patch:
@@ -35,7 +35,7 @@ public abstract class AbstractJDOTest {
 
     private static final JDOQLTemplates templates = new JDOQLTemplates();
     
-    protected static PersistenceManagerFactory pmf = JDOHelper.getPersistenceManagerFactory("datanucleus.properties");
+    protected static final PersistenceManagerFactory pmf = JDOHelper.getPersistenceManagerFactory("datanucleus.properties");
 
     protected PersistenceManager pm;
 

File: querydsl-jdo/src/test/java/com/mysema/query/jdo/models/company/Office.java
Patch:
@@ -117,8 +117,7 @@ public boolean equals(Object o) {
 
         Office other = (Office) o;
         return floor == other.floor
-                && (roomName == other.roomName || (roomName != null && roomName
-                        .equals(other.roomName)));
+                && (roomName == other.roomName || (roomName != null && roomName.equals(other.roomName)));
     }
 
     public String asString() {

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/hibernate/HibernateDomainExporter.java
Patch:
@@ -68,6 +68,7 @@
  * @author tiwe
  *
  */
+// TODO : fix encoding issues
 public class HibernateDomainExporter {
 
     private static final Logger logger = LoggerFactory.getLogger(HibernateDomainExporter.class);

File: querydsl-apt/src/main/java/com/mysema/query/apt/TypeElementHandler.java
Patch:
@@ -99,9 +99,9 @@ public EntityType handleEntityType(TypeElement element) {
         if (config.visitMethodProperties()){
             for (ExecutableElement method : ElementFilter.methodsIn(elements)) {            
                 String name = method.getSimpleName().toString();
-                if (name.startsWith("get") && method.getParameters().isEmpty()) {
+                if (name.startsWith("get") && name.length() > 3 && method.getParameters().isEmpty()) {
                     name = BeanUtils.uncapitalize(name.substring(3));
-                } else if (name.startsWith("is") && method.getParameters().isEmpty()) {
+                } else if (name.startsWith("is") && name.length() > 2 && method.getParameters().isEmpty()) {
                     name = BeanUtils.uncapitalize(name.substring(2));
                 } else {
                     continue;

File: querydsl-apt/src/main/java/com/mysema/query/apt/jpa/JPAConfiguration.java
Patch:
@@ -31,6 +31,7 @@
 import javax.persistence.ManyToOne;
 import javax.persistence.OneToMany;
 import javax.persistence.PrimaryKeyJoinColumn;
+import javax.persistence.Transient;
 import javax.persistence.Version;
 
 import com.mysema.query.annotations.QueryTransient;
@@ -64,7 +65,7 @@ public JPAConfiguration(RoundEnvironment roundEnv,Map<String,String> options,
     protected List<Class<? extends Annotation>> getAnnotations() {
         return Arrays.asList(Column.class, Embedded.class, EmbeddedId.class, GeneratedValue.class,
             Id.class, Version.class, JoinColumn.class, ManyToOne.class, OneToMany.class,
-            PrimaryKeyJoinColumn.class, QueryType.class, QueryTransient.class);
+            PrimaryKeyJoinColumn.class, QueryType.class, QueryTransient.class, Transient.class);
     }
 
     @Override

File: querydsl-apt/src/main/java/com/mysema/query/apt/TypeElementHandler.java
Patch:
@@ -27,8 +27,6 @@
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.ElementFilter;
 
-import net.jcip.annotations.Immutable;
-
 import com.mysema.codegen.model.Constructor;
 import com.mysema.codegen.model.Parameter;
 import com.mysema.codegen.model.Type;
@@ -49,7 +47,6 @@
  * @author tiwe
  *
  */
-@Immutable
 public final class TypeElementHandler {
 
     private final TypeMappings typeMappings;

File: querydsl-collections/src/main/java/com/mysema/query/collections/DefaultEvaluatorFactory.java
Patch:
@@ -23,8 +23,6 @@
 import javax.tools.JavaCompiler;
 import javax.tools.ToolProvider;
 
-import net.jcip.annotations.Immutable;
-
 import org.apache.commons.lang3.ClassUtils;
 
 import com.mysema.codegen.Evaluator;
@@ -53,7 +51,6 @@
  * @author tiwe
  *
  */
-@Immutable
 public class DefaultEvaluatorFactory {
 
     private final EvaluatorFactory factory;

File: querydsl-core/src/main/java/com/mysema/query/JoinFlag.java
Patch:
@@ -15,8 +15,6 @@
 
 import java.io.Serializable;
 
-import net.jcip.annotations.Immutable;
-
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.TemplateExpressionImpl;
 
@@ -26,7 +24,6 @@
  * @author tiwe
  *
  */
-@Immutable
 public class JoinFlag implements Serializable{
     
     public enum Position {

File: querydsl-core/src/main/java/com/mysema/query/JoinType.java
Patch:
@@ -13,14 +13,11 @@
  */
 package com.mysema.query;
 
-import net.jcip.annotations.Immutable;
-
 /**
  * JoinType defines the supported join types
  *
  * @author tiwe
  */
-@Immutable
 public enum JoinType {
     /**
      * cross join

File: querydsl-core/src/main/java/com/mysema/query/QueryFlag.java
Patch:
@@ -15,8 +15,6 @@
 
 import java.io.Serializable;
 
-import net.jcip.annotations.Immutable;
-
 import com.mysema.commons.lang.Assert;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.TemplateExpressionImpl;
@@ -27,7 +25,6 @@
  * @author tiwe
  *
  */
-@Immutable
 public class QueryFlag implements Serializable{
     
     private static final long serialVersionUID = -7131081607441961628L;

File: querydsl-core/src/main/java/com/mysema/query/QueryMetadata.java
Patch:
@@ -123,7 +123,6 @@ public interface QueryMetadata extends Serializable {
      *
      * @return
      */
-    @Nullable
     Predicate getHaving();
 
     /**
@@ -138,7 +137,6 @@ public interface QueryMetadata extends Serializable {
      *
      * @return
      */
-    @Nullable
     QueryModifiers getModifiers();
 
     /**

File: querydsl-core/src/main/java/com/mysema/query/QueryModifiers.java
Patch:
@@ -19,16 +19,13 @@
 import javax.annotation.Nonnegative;
 import javax.annotation.Nullable;
 
-import net.jcip.annotations.Immutable;
-
 import org.apache.commons.lang3.ObjectUtils;
 
 /**
  * QueryModifiers combines limit and offset info into a single type.
  *
  * @author tiwe
  */
-@Immutable
 public final class QueryModifiers implements Serializable{
 
     private static final long serialVersionUID = 2934344588433680339L;

File: querydsl-core/src/main/java/com/mysema/query/SearchResults.java
Patch:
@@ -18,14 +18,11 @@
 
 import javax.annotation.Nullable;
 
-import net.jcip.annotations.Immutable;
-
 /**
  * SearchResults bundles data for paged search results
  *
  * @author tiwe
  */
-@Immutable
 public final class SearchResults<T> {
 
     public static <T> SearchResults<T> emptyResults() {

File: querydsl-core/src/main/java/com/mysema/query/codegen/Delegate.java
Patch:
@@ -15,8 +15,6 @@
 
 import java.util.List;
 
-import net.jcip.annotations.Immutable;
-
 import com.mysema.codegen.model.Parameter;
 import com.mysema.codegen.model.Type;
 import com.mysema.commons.lang.Assert;
@@ -27,7 +25,6 @@
  * @author tiwe
  *
  */
-@Immutable
 public class Delegate {
 
     private final Type declaringType;

File: querydsl-core/src/main/java/com/mysema/query/codegen/EntitySerializer.java
Patch:
@@ -39,8 +39,6 @@
 import javax.inject.Inject;
 import javax.inject.Named;
 
-import net.jcip.annotations.Immutable;
-
 import org.apache.commons.collections15.Transformer;
 import org.apache.commons.lang3.StringUtils;
 
@@ -83,7 +81,6 @@
  * @author tiwe
  *
  */
-@Immutable
 public class EntitySerializer implements Serializer{
 
     private static final Parameter PATH_METADATA = new Parameter("metadata", new ClassType(PathMetadata.class, (Type)null));

File: querydsl-core/src/main/java/com/mysema/query/codegen/ProjectionSerializer.java
Patch:
@@ -17,8 +17,6 @@
 
 import javax.inject.Inject;
 
-import net.jcip.annotations.Immutable;
-
 import org.apache.commons.collections15.Transformer;
 
 import com.mysema.codegen.CodeWriter;
@@ -39,7 +37,6 @@
  * @author tiwe
  *
  */
-@Immutable
 public final class ProjectionSerializer implements Serializer{
 
     private final TypeMappings typeMappings;

File: querydsl-core/src/main/java/com/mysema/query/codegen/Property.java
Patch:
@@ -19,8 +19,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import net.jcip.annotations.Immutable;
-
 import com.mysema.codegen.model.Type;
 import com.mysema.commons.lang.Assert;
 import com.mysema.util.JavaSyntaxUtils;
@@ -30,7 +28,6 @@
  *
  * @author tiwe
  */
-@Immutable
 public final class Property implements Comparable<Property> {
 
     private final EntityType declaringType;

File: querydsl-core/src/main/java/com/mysema/query/codegen/SimpleSerializerConfig.java
Patch:
@@ -13,8 +13,6 @@
  */
 package com.mysema.query.codegen;
 
-import net.jcip.annotations.Immutable;
-
 import com.mysema.query.annotations.Config;
 
 /**
@@ -23,7 +21,6 @@
  * @author tiwe
  *
  */
-@Immutable
 public final class SimpleSerializerConfig implements SerializerConfig{
 
     public static final SerializerConfig DEFAULT = new SimpleSerializerConfig(false, false, false, true);

File: querydsl-core/src/main/java/com/mysema/query/codegen/SupertypeSerializer.java
Patch:
@@ -22,8 +22,6 @@
 import javax.inject.Inject;
 import javax.inject.Named;
 
-import net.jcip.annotations.Immutable;
-
 import com.mysema.codegen.CodeWriter;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.PathMetadataFactory;
@@ -36,7 +34,6 @@
  * @author tiwe
  *
  */
-@Immutable
 public final class SupertypeSerializer extends EntitySerializer{
 
     @Inject

File: querydsl-core/src/main/java/com/mysema/query/support/SimpleProjectableAdapter.java
Patch:
@@ -26,8 +26,6 @@
 import com.mysema.query.types.ParamExpression;
 import com.mysema.query.types.Predicate;
 
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
-
 /**
  * SimpleQueryAdapter is an apdater implementation for the SimpleQuery and SimpleProjectabl interfaces
  *

File: querydsl-core/src/main/java/com/mysema/query/support/SimpleQueryAdapter.java
Patch:
@@ -27,8 +27,6 @@
 import com.mysema.query.types.ParamExpression;
 import com.mysema.query.types.Predicate;
 
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
-
 /**
  * SimpleQueryAdapter is an apdater implementation for the SimpleQuery and SimpleProjectabl interfaces
  *

File: querydsl-core/src/main/java/com/mysema/query/types/OperatorImpl.java
Patch:
@@ -18,14 +18,11 @@
 import java.util.Arrays;
 import java.util.List;
 
-import net.jcip.annotations.Immutable;
-
 import com.mysema.commons.lang.Assert;
 
 /**
  * OperatorImpl is the default implementation of the {@link Operator}  interface
  */
-@Immutable
 public class OperatorImpl<T> implements Operator<T> {
 
     private static final long serialVersionUID = -2435035383548549877L;

File: querydsl-core/src/main/java/com/mysema/query/types/OrderSpecifier.java
Patch:
@@ -15,8 +15,6 @@
 
 import java.io.Serializable;
 
-import net.jcip.annotations.Immutable;
-
 import com.mysema.commons.lang.Assert;
 
 /**
@@ -26,7 +24,6 @@
  * @author tiwe
  */
 @SuppressWarnings({"unchecked"})
-@Immutable
 public class OrderSpecifier<T extends Comparable> implements Serializable {
 
     private static final long serialVersionUID = 3427652988262514678L;

File: querydsl-core/src/main/java/com/mysema/query/types/PathMetadata.java
Patch:
@@ -17,8 +17,6 @@
 
 import javax.annotation.Nullable;
 
-import net.jcip.annotations.Immutable;
-
 import org.apache.commons.lang3.builder.EqualsBuilder;
 import org.apache.commons.lang3.builder.HashCodeBuilder;
 
@@ -27,7 +25,6 @@
  *
  * @author tiwe
  */
-@Immutable
 public final class PathMetadata<T> implements Serializable{
 
     private static final long serialVersionUID = -1055994185028970065L;

File: querydsl-core/src/main/java/com/mysema/query/types/TemplateFactory.java
Patch:
@@ -21,8 +21,6 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import net.jcip.annotations.Immutable;
-
 import org.apache.commons.collections15.Transformer;
 
 import com.mysema.query.types.Template.Element;
@@ -33,7 +31,6 @@
  * @author tiwe
  *
  */
-@Immutable
 public class TemplateFactory {
 
     private static final Pattern elementPattern = Pattern.compile("\\{%?%?\\d+[slu%]?%?\\}");

File: querydsl-core/src/main/java/com/mysema/query/types/Templates.java
Patch:
@@ -18,14 +18,11 @@
 
 import javax.annotation.Nullable;
 
-import net.jcip.annotations.Immutable;
-
 /**
  * Templates provides operator patterns for query expression serialization
  *
  * @author tiwe
  */
-@Immutable
 public class Templates {
 
     public static final Templates DEFAULT = new Templates();

File: querydsl-core/src/main/java/com/mysema/query/types/expr/NumberExpression.java
Patch:
@@ -24,9 +24,9 @@
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
+import com.mysema.query.types.Ops.MathOps;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathImpl;
-import com.mysema.query.types.Ops.MathOps;
 import com.mysema.util.MathUtils;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/path/ArrayPath.java
Patch:
@@ -22,9 +22,9 @@
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
+import com.mysema.query.types.PathImpl;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.PathMetadataFactory;
-import com.mysema.query.types.PathImpl;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.ArrayExpression;
 import com.mysema.query.types.expr.NumberExpression;

File: querydsl-core/src/main/java/com/mysema/query/types/path/BooleanPath.java
Patch:
@@ -16,9 +16,9 @@
 import java.lang.reflect.AnnotatedElement;
 
 import com.mysema.query.types.Path;
+import com.mysema.query.types.PathImpl;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.PathMetadataFactory;
-import com.mysema.query.types.PathImpl;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/NumberPath.java
Patch:
@@ -16,9 +16,9 @@
 import java.lang.reflect.AnnotatedElement;
 
 import com.mysema.query.types.Path;
+import com.mysema.query.types.PathImpl;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.PathMetadataFactory;
-import com.mysema.query.types.PathImpl;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.NumberExpression;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/StringPath.java
Patch:
@@ -16,9 +16,9 @@
 import java.lang.reflect.AnnotatedElement;
 
 import com.mysema.query.types.Path;
+import com.mysema.query.types.PathImpl;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.PathMetadataFactory;
-import com.mysema.query.types.PathImpl;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.StringExpression;
 

File: querydsl-core/src/main/java/com/mysema/query/types/template/StringTemplate.java
Patch:
@@ -16,11 +16,11 @@
 import java.util.Arrays;
 import java.util.List;
 
-import com.mysema.query.types.TemplateExpression;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Template;
-import com.mysema.query.types.TemplateFactory;
+import com.mysema.query.types.TemplateExpression;
 import com.mysema.query.types.TemplateExpressionImpl;
+import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.StringExpression;
 

File: querydsl-jpa/src/test/java/com/mysema/testutil/HibernateTestRunner.java
Patch:
@@ -112,9 +112,8 @@ public void run(final RunNotifier notifier) {
     }
     
     private void shutdown() {
-        sessionFactory.getCache().evictEntityRegions();
-        
         if (sessionFactory != null){
+            sessionFactory.getCache().evictEntityRegions();            
             sessionFactory.close();
             sessionFactory = null;                
         }

File: querydsl-jpa/src/test/java/com/mysema/testutil/JPATestRunner.java
Patch:
@@ -89,16 +89,15 @@ public void run(final RunNotifier notifier) {
         } catch (Exception e) {
             String error = "Caught " + e.getClass().getName();
             throw new RuntimeException(error, e);
-        } finally {
+        } finally {            
             shutdown();
         }
 
     }
     
     private void shutdown() {
-        entityManagerFactory.getCache().evictAll();
-        
         if (entityManagerFactory != null){
+            entityManagerFactory.getCache().evictAll();
             entityManagerFactory.close();
             entityManagerFactory = null;
         }

File: querydsl-sql/src/main/java/com/mysema/query/sql/ForeignKey.java
Patch:
@@ -16,8 +16,6 @@
 import java.util.Arrays;
 import java.util.List;
 
-import net.jcip.annotations.Immutable;
-
 import com.mysema.query.BooleanBuilder;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.ExpressionUtils;
@@ -32,7 +30,6 @@
  *
  * @param <E>
  */
-@Immutable
 public class ForeignKey <E> {
 
     private final RelationalPath<?> entity;

File: querydsl-sql/src/main/java/com/mysema/query/sql/PrimaryKey.java
Patch:
@@ -16,16 +16,13 @@
 import java.util.Arrays;
 import java.util.List;
 
-import net.jcip.annotations.Immutable;
-
 import com.mysema.query.types.Path;
 
 /**
  * PrimaryKey defines a primary key on table
  *
  * @author tiwe
  */
-@Immutable
 public class PrimaryKey <E> {
 
     private final RelationalPath<?> entity;

File: querydsl-sql/src/main/java/com/mysema/query/sql/ddl/CreateTableClause.java
Patch:
@@ -31,8 +31,6 @@
 import com.mysema.query.sql.support.IndexData;
 import com.mysema.query.sql.support.PrimaryKeyData;
 
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
-
 /**
  * CreateTableClause defines a CREATE TABLE clause
  * 

File: querydsl-sql/src/main/java/com/mysema/query/sql/ddl/DropTableClause.java
Patch:
@@ -20,8 +20,6 @@
 import com.mysema.query.QueryException;
 import com.mysema.query.sql.SQLTemplates;
 
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
-
 /**
  * DropTableClause defines a DROP TABLE clause
  * 

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLInsertBatch.java
Patch:
@@ -18,8 +18,6 @@
 
 import javax.annotation.Nullable;
 
-import net.jcip.annotations.Immutable;
-
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQueryExpression;
@@ -30,7 +28,6 @@
  * @author tiwe
  *
  */
-@Immutable
 public class SQLInsertBatch {        
     
     private final List<Path<?>> columns;

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLMergeBatch.java
Patch:
@@ -18,8 +18,6 @@
 
 import javax.annotation.Nullable;
 
-import net.jcip.annotations.Immutable;
-
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQueryExpression;
@@ -30,7 +28,6 @@
  * @author tiwe
  *
  */
-@Immutable
 public class SQLMergeBatch {
     
     private final List<Path<?>> keys;

File: querydsl-apt/src/main/java/com/mysema/query/apt/TypeElementHandler.java
Patch:
@@ -135,6 +135,7 @@ public EntityType handleEntityType(TypeElement element) {
 
         return entityType;
     }
+
     
     private Property toProperty(EntityType entityType, String name, TypeMirror type, 
             Annotations annotations) {
@@ -146,7 +147,7 @@ private Property toProperty(EntityType entityType, String name, TypeMirror type,
                 return null;
             }
             propertyType = propertyType.as(typeCategory);
-        }
+        } 
         
         // inits
         String[] inits = new String[0];

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/HQLTemplates.java
Patch:
@@ -47,6 +47,8 @@ public HQLTemplates(char escape) {
         add(CAST, "cast({0} as {1s})");
      // TODO : remove this when Hibernate supports type(alias)
         add(Ops.INSTANCE_OF, "{0}.class = {1}");
+     // TODO : remove this when Hibernate supports type(alias)
+        add(TYPE, "{0}.class");
      // TODO : remove this when Hibernate supports member of properly
         add(MEMBER_OF, "{0} in elements({1})"); 
 

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/JPQLTemplates.java
Patch:
@@ -34,6 +34,8 @@ public class JPQLTemplates extends Templates {
 
     public static final char DEFAULT_ESCAPE = '!';
     
+    public static final Operator<String> TYPE = new OperatorImpl<String>("TYPE", Object.class);
+    
     public static final Operator<Object> CAST = new OperatorImpl<Object>("CAST",Object.class, Object.class);
 
     public static final Operator<Boolean> MEMBER_OF = new OperatorImpl<Boolean>("MEMBER_OF",Object.class, Object.class);
@@ -114,6 +116,7 @@ protected JPQLTemplates(char escape) {
         add(Ops.CASE_EQ_ELSE,  "else {0}");
 
         add(Ops.INSTANCE_OF, "type({0}) = {1}");
+        add(TYPE, "type({0})");
 
         //CHECKSTYLE:ON
     }

File: querydsl-jpa/src/test/java/com/mysema/query/AbstractJPATest.java
Patch:
@@ -74,7 +74,7 @@ public void Finder() {
     @SuppressWarnings("unchecked")
     @Test
     public void QueryExposure(){
-        save(new Cat());
+        save(new Cat(20));
         List results = query().from(QCat.cat).createQuery(QCat.cat).getResultList();
         assertNotNull(results);
         assertFalse(results.isEmpty());

File: querydsl-jpa/src/test/java/com/mysema/query/_oracle/OracleStandardTest.java
Patch:
@@ -31,7 +31,7 @@ protected Target getTarget() {
     
     @Override
     public void JoinEmbeddable() {
-        // for some reasonable not supported
+        // for some reason not supported
     }
 
 }

File: querydsl-core/src/main/java/com/mysema/query/codegen/BeanSerializer.java
Patch:
@@ -68,7 +68,8 @@ public BeanSerializer(boolean propertyAnnotations, String javadocSuffix) {
     }
 
     @Override
-    public void serialize(EntityType model, SerializerConfig serializerConfig, CodeWriter writer) throws IOException {
+    public void serialize(EntityType model, SerializerConfig serializerConfig, 
+            CodeWriter writer) throws IOException {
         String simpleName = model.getSimpleName();
 
         // package

File: querydsl-core/src/main/java/com/mysema/query/codegen/Delegate.java
Patch:
@@ -40,7 +40,8 @@ public class Delegate {
 
     private final Type returnType;
 
-    public Delegate(Type declaringType, Type delegateType, String name, List<Parameter> params, Type returnType) {
+    public Delegate(Type declaringType, Type delegateType, String name, List<Parameter> params, 
+            Type returnType) {
         this.declaringType = Assert.notNull(declaringType,"declaringType");
         this.delegateType = Assert.notNull(delegateType,"delegateType");
         this.name = Assert.notNull(name,"name");

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Account.java
Patch:
@@ -21,6 +21,7 @@
 import javax.persistence.Entity;
 import javax.persistence.Id;
 import javax.persistence.ManyToOne;
+import javax.persistence.Table;
 import javax.persistence.Transient;
 
 import org.junit.Test;
@@ -32,6 +33,7 @@
  */
 @SuppressWarnings("serial")
 @Entity
+@Table(name="account_")
 public class Account implements Serializable{
 
     @Transient

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Animal.java
Patch:
@@ -15,6 +15,7 @@
 
 import javax.persistence.Entity;
 import javax.persistence.Id;
+import javax.persistence.Table;
 import javax.persistence.Temporal;
 import javax.persistence.TemporalType;
 
@@ -24,6 +25,7 @@
  * The Class Animal.
  */
 @Entity
+@Table(name="animal_")
 public class Animal {
     private boolean alive;
 

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/AuditLog.java
Patch:
@@ -16,11 +16,13 @@
 import javax.persistence.Entity;
 import javax.persistence.Id;
 import javax.persistence.ManyToOne;
+import javax.persistence.Table;
 
 /**
  * The Class AuditLog.
  */
 @Entity
+@Table(name="auditlog_")
 public class AuditLog {
     @Id
     int id;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Bar.java
Patch:
@@ -15,13 +15,15 @@
 
 import javax.persistence.Entity;
 import javax.persistence.Id;
+import javax.persistence.Table;
 import javax.persistence.Temporal;
 import javax.persistence.TemporalType;
 
 /**
  * The Class Bar.
  */
 @Entity
+@Table(name="bar_")
 public class Bar {
     @Temporal(TemporalType.DATE)
     java.util.Date date;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Calendar.java
Patch:
@@ -19,6 +19,7 @@
 import javax.persistence.ElementCollection;
 import javax.persistence.Entity;
 import javax.persistence.Id;
+import javax.persistence.Table;
 import javax.persistence.Temporal;
 import javax.persistence.TemporalType;
 
@@ -29,6 +30,7 @@
  */
 @SuppressWarnings("serial")
 @Entity
+@Table(name="calendar_")
 public class Calendar implements Serializable{
     @ElementCollection
     @Temporal(TemporalType.DATE)

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Catalog.java
Patch:
@@ -19,13 +19,15 @@
 import javax.persistence.Entity;
 import javax.persistence.Id;
 import javax.persistence.OneToMany;
+import javax.persistence.Table;
 import javax.persistence.Temporal;
 import javax.persistence.TemporalType;
 
 /**
  * The Class Catalog.
  */
 @Entity
+@Table(name="catalog_")
 public class Catalog {
     @Temporal(TemporalType.DATE)
     Date effectiveDate;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Company.java
Patch:
@@ -19,13 +19,15 @@
 import javax.persistence.Id;
 import javax.persistence.ManyToOne;
 import javax.persistence.OneToMany;
+import javax.persistence.Table;
 
 import org.hibernate.annotations.IndexColumn;
 
 /**
  * The Class Company.
  */
 @Entity
+@Table(name="company_")
 public class Company {
     @ManyToOne
     Employee ceo;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Customer.java
Patch:
@@ -16,11 +16,13 @@
 import javax.persistence.Entity;
 import javax.persistence.Id;
 import javax.persistence.ManyToOne;
+import javax.persistence.Table;
 
 /**
  * The Class Customer.
  */
 @Entity
+@Table(name="customer_")
 public class Customer {
     @ManyToOne
     Order currentOrder;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Department.java
Patch:
@@ -19,13 +19,15 @@
 import javax.persistence.Id;
 import javax.persistence.ManyToOne;
 import javax.persistence.OneToMany;
+import javax.persistence.Table;
 
 import org.hibernate.annotations.IndexColumn;
 
 /**
  * The Class Department.
  */
 @Entity
+@Table(name="department_")
 public class Department {
     @ManyToOne
     Company company;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Document.java
Patch:
@@ -17,13 +17,15 @@
 
 import javax.persistence.Entity;
 import javax.persistence.Id;
+import javax.persistence.Table;
 import javax.persistence.Temporal;
 import javax.persistence.TemporalType;
 
 /**
  * The Class Document.
  */
 @Entity
+@Table(name="document_")
 public class Document {
     @Id
     int id;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Employee.java
Patch:
@@ -25,11 +25,13 @@
 import javax.persistence.Id;
 import javax.persistence.ManyToOne;
 import javax.persistence.OneToOne;
+import javax.persistence.Table;
 
 /**
  * The Class Employee.
  */
 @Entity
+@Table(name="employee_")
 public class Employee {
     @ManyToOne
     public Company company;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/EvilType.java
Patch:
@@ -17,11 +17,13 @@
 import javax.persistence.Id;
 import javax.persistence.JoinColumn;
 import javax.persistence.ManyToOne;
+import javax.persistence.Table;
 
 /**
  * The Class EvilType.
  */
 @Entity
+@Table(name="eviltype_")
 public class EvilType {
     @ManyToOne
     @JoinColumn(name = "_asc")

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Foo.java
Patch:
@@ -20,13 +20,15 @@
 import javax.persistence.Entity;
 import javax.persistence.Id;
 import javax.persistence.JoinColumn;
+import javax.persistence.Table;
 import javax.persistence.Temporal;
 import javax.persistence.TemporalType;
 
 /**
  * The Class Foo.
  */
 @Entity
+@Table(name="foo_")
 public class Foo {
     public String bar;
 

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Formula.java
Patch:
@@ -16,11 +16,13 @@
 import javax.persistence.Entity;
 import javax.persistence.Id;
 import javax.persistence.ManyToOne;
+import javax.persistence.Table;
 
 /**
  * The Class Formula.
  */
 @Entity
+@Table(name="formula_")
 public class Formula {
     @Id
     int id;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/InheritedProperties.java
Patch:
@@ -15,8 +15,10 @@
 
 import javax.persistence.Entity;
 import javax.persistence.Id;
+import javax.persistence.Table;
 
 @Entity
+@Table(name="inheritedproperties_")
 public class InheritedProperties extends Superclass {
     @Id
     long id;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Item.java
Patch:
@@ -16,11 +16,13 @@
 import javax.persistence.Entity;
 import javax.persistence.Id;
 import javax.persistence.ManyToOne;
+import javax.persistence.Table;
 
 /**
  * The Class Item.
  */
 @Entity
+@Table(name="item_")
 public class Item {
     @Id
     long id;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Location.java
Patch:
@@ -15,11 +15,13 @@
 
 import javax.persistence.Entity;
 import javax.persistence.Id;
+import javax.persistence.Table;
 
 /**
  * The Class Location.
  */
 @Entity(name="Location2")
+@Table(name="location_")
 public class Location {
     @Id
     long id;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Name.java
Patch:
@@ -15,11 +15,13 @@
 
 import javax.persistence.Entity;
 import javax.persistence.Id;
+import javax.persistence.Table;
 
 /**
  * The Class Name.
  */
 @Entity
+@Table(name="name_")
 public class Name {
     String firstName, lastName, nickName;
 

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/NameList.java
Patch:
@@ -18,11 +18,13 @@
 import javax.persistence.ElementCollection;
 import javax.persistence.Entity;
 import javax.persistence.Id;
+import javax.persistence.Table;
 
 /**
  * The Class NameList.
  */
 @Entity
+@Table(name="namelist_")
 public class NameList {
     @Id
     long id;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Named.java
Patch:
@@ -15,11 +15,13 @@
 
 import javax.persistence.Entity;
 import javax.persistence.Id;
+import javax.persistence.Table;
 
 /**
  * The Class Named.
  */
 @Entity
+@Table(name="named_")
 public class Named {
     @Id
     long id;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Nationality.java
Patch:
@@ -18,12 +18,14 @@
 import javax.persistence.Entity;
 import javax.persistence.Id;
 import javax.persistence.ManyToOne;
+import javax.persistence.Table;
 
 /**
  * The Class Nationality.
  */
 @SuppressWarnings("serial")
 @Entity
+@Table(name="nationality_")
 public class Nationality implements Serializable{
     @ManyToOne
     Calendar calendar;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Order.java
Patch:
@@ -28,7 +28,7 @@
  * The Class Order.
  */
 @Entity
-@Table(name="ORDER_")
+@Table(name="order_")
 public class Order {
     @ManyToOne
     Customer customer;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Parameter.java
Patch:
@@ -15,11 +15,13 @@
 
 import javax.persistence.Entity;
 import javax.persistence.Id;
+import javax.persistence.Table;
 
 /**
  * The Class Parameter.
  */
 @Entity
+@Table(name="parameter_")
 public class Parameter {
     @Id
     long id;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Person.java
Patch:
@@ -18,6 +18,7 @@
 import javax.persistence.Entity;
 import javax.persistence.Id;
 import javax.persistence.ManyToOne;
+import javax.persistence.Table;
 import javax.persistence.Temporal;
 import javax.persistence.TemporalType;
 
@@ -28,6 +29,7 @@
  */
 @SuppressWarnings("serial")
 @Entity
+@Table(name="person_")
 public class Person implements Serializable{
     @Temporal(TemporalType.DATE)
     java.util.Date birthDay;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/PersonId.java
Patch:
@@ -17,12 +17,14 @@
 
 import javax.persistence.Entity;
 import javax.persistence.Id;
+import javax.persistence.Table;
 
 /**
  * The Class PersonId.
  */
 @SuppressWarnings("serial")
 @Entity
+@Table(name="personid_")
 public class PersonId implements Serializable{
     String country;
 

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Player.java
Patch:
@@ -18,11 +18,13 @@
 import javax.persistence.ElementCollection;
 import javax.persistence.Entity;
 import javax.persistence.Id;
+import javax.persistence.Table;
 
 /**
  * The Class Player.
  */
 @Entity
+@Table(name="player_")
 public class Player {
     @Id
     long id;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Price.java
Patch:
@@ -16,11 +16,13 @@
 import javax.persistence.Entity;
 import javax.persistence.Id;
 import javax.persistence.ManyToOne;
+import javax.persistence.Table;
 
 /**
  * The Class Price.
  */
 @Entity
+@Table(name="price_")
 public class Price{
     long amount;
 

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/SimpleTypes.java
Patch:
@@ -19,10 +19,12 @@
 
 import javax.persistence.Entity;
 import javax.persistence.Id;
+import javax.persistence.Table;
 import javax.persistence.Temporal;
 import javax.persistence.TemporalType;
 
 @Entity
+@Table(name="simpletypes_")
 public class SimpleTypes {
     transient int test;
     @Id

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Status.java
Patch:
@@ -15,11 +15,13 @@
 
 import javax.persistence.Entity;
 import javax.persistence.Id;
+import javax.persistence.Table;
 
 /**
  * The Class Status.
  */
 @Entity
+@Table(name="status_")
 public class Status {
     @Id
     long id;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/StatusChange.java
Patch:
@@ -15,13 +15,15 @@
 
 import javax.persistence.Entity;
 import javax.persistence.Id;
+import javax.persistence.Table;
 import javax.persistence.Temporal;
 import javax.persistence.TemporalType;
 
 /**
  * The Class StatusChange.
  */
 @Entity
+@Table(name="statuschange_")
 public class StatusChange {
     @Id
     long id;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Store.java
Patch:
@@ -19,11 +19,13 @@
 import javax.persistence.Id;
 import javax.persistence.ManyToOne;
 import javax.persistence.OneToMany;
+import javax.persistence.Table;
 
 /**
  * The Class Store.
  */
 @Entity
+@Table(name="store_")
 public class Store {
     @OneToMany
     List<Customer> customers;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/User.java
Patch:
@@ -22,7 +22,7 @@
  * The Class User.
  */
 @Entity
-@Table(name="USER_")
+@Table(name="user_")
 public class User {
     @ManyToOne
     Company company;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain2/Category.java
Patch:
@@ -19,10 +19,12 @@
 import javax.persistence.Entity;
 import javax.persistence.Id;
 import javax.persistence.OneToMany;
+import javax.persistence.Table;
 import javax.persistence.Temporal;
 import javax.persistence.TemporalType;
 
 @Entity
+@Table(name="category_")
 public class Category {
 
     @Id

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain2/CategoryProp.java
Patch:
@@ -15,8 +15,10 @@
 
 import javax.persistence.Entity;
 import javax.persistence.Id;
+import javax.persistence.Table;
 
 @Entity
+@Table(name="categoryprop_")
 public class CategoryProp {
 
     @Id

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain2/Document2.java
Patch:
@@ -17,10 +17,12 @@
 
 import javax.persistence.Entity;
 import javax.persistence.Id;
+import javax.persistence.Table;
 import javax.persistence.Temporal;
 import javax.persistence.TemporalType;
 
 @Entity
+@Table(name="document2_")
 public class Document2 {
     
     @Id

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain2/DocumentProp.java
Patch:
@@ -15,8 +15,10 @@
 
 import javax.persistence.Entity;
 import javax.persistence.Id;
+import javax.persistence.Table;
 
 @Entity
+@Table(name="documentprop_")
 public class DocumentProp {
 
     @Id

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain2/Parent.java
Patch:
@@ -16,8 +16,10 @@
 import javax.persistence.Embedded;
 import javax.persistence.Entity;
 import javax.persistence.Id;
+import javax.persistence.Table;
 
 @Entity
+@Table(name="parent_")
 public class Parent {
 
     @Id

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain2/User2.java
Patch:
@@ -19,10 +19,12 @@
 import javax.persistence.Entity;
 import javax.persistence.Id;
 import javax.persistence.OneToMany;
+import javax.persistence.Table;
 import javax.persistence.Temporal;
 import javax.persistence.TemporalType;
 
 @Entity
+@Table(name="user2_")
 public class User2 {
 
     @Id

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain2/UserProp.java
Patch:
@@ -19,10 +19,12 @@
 import javax.persistence.Entity;
 import javax.persistence.Id;
 import javax.persistence.OneToMany;
+import javax.persistence.Table;
 import javax.persistence.Temporal;
 import javax.persistence.TemporalType;
 
 @Entity
+@Table(name="userprop_")
 public class UserProp {
     
     @Id

File: querydsl-sql/src/main/java/com/mysema/query/sql/support/ForeignKeyData.java
Patch:
@@ -29,6 +29,7 @@ public class ForeignKeyData implements KeyData {
 
     private final String name;
     
+    @Nullable
     private final String schema;
 
     private final String table;

File: querydsl-sql/src/main/java/com/mysema/query/sql/support/InverseForeignKeyData.java
Patch:
@@ -57,6 +57,7 @@ public String getName() {
         return name;
     }
     
+    @Nullable
     public String getSchema() {
         return schema;
     }

File: querydsl-sql/src/main/java/com/mysema/query/sql/ddl/CreateTableClause.java
Patch:
@@ -36,9 +36,11 @@
 /**
  * CreateTableClause defines a CREATE TABLE clause
  * 
+ * 
  * @author tiwe
  *
  */
+@Deprecated
 public class CreateTableClause {
     
     private static final Logger logger = LoggerFactory.getLogger(CreateTableClause.class);

File: querydsl-sql/src/main/java/com/mysema/query/sql/ddl/DropTableClause.java
Patch:
@@ -28,6 +28,7 @@
  * @author tiwe
  *
  */
+@Deprecated
 public class DropTableClause {
 
     private final Connection connection;

File: querydsl-sql/src/main/java/com/mysema/query/sql/ddl/ForeignKeyBuilder.java
Patch:
@@ -24,6 +24,7 @@
  * @author tiwe
  *
  */
+@Deprecated
 public class ForeignKeyBuilder {
 
     private final List<ForeignKeyData> foreignKeys;

File: querydsl-apt/src/main/java/com/mysema/query/apt/TypeElementHandler.java
Patch:
@@ -70,8 +70,7 @@ public TypeElementHandler(Configuration configuration, ExtendedTypeFactory typeF
     
 
     public EntityType handleEntityType(TypeElement element) {
-        TypeMirror typeMirror = configuration.getRealType(element);
-        EntityType entityType = typeFactory.getEntityType(typeMirror, true);
+        EntityType entityType = typeFactory.getEntityType(element.asType(), true);
         List<? extends Element> elements = element.getEnclosedElements();
         VisitorConfig config = configuration.getConfig(element, elements);
         Set<String> blockedProperties = new HashSet<String>();

File: querydsl-core/src/main/java/com/mysema/query/types/QBean.java
Patch:
@@ -32,7 +32,7 @@
  *
  * @param <T> bean type
  */
-public class QBean<T> extends ExpressionBase<T> implements FactoryExpression<T>{
+public class QBean<T> extends ExpressionBase<T> implements FactoryExpression<T> {
 
     private static final long serialVersionUID = -8210214512730989778L;
 

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/EclipseLinkTemplates.java
Patch:
@@ -23,13 +23,14 @@
  */
 public class EclipseLinkTemplates extends JPQLTemplates {
 
-    public static final JPQLTemplates DEFAULT = new EclipseLinkTemplates();
+    public static final JPQLTemplates DEFAULT = new EclipseLinkTemplates('\\');
 
     // TODO : indexed list access
 
     // TODO : cast
 
-    protected EclipseLinkTemplates() {
+    public EclipseLinkTemplates(char escape) {
+        super(escape);
         // LIKE replacements
         add(Ops.STRING_CONTAINS, "locate({1},{0}) > 0");
         add(Ops.STRING_CONTAINS_IC, "locate({1l},{0l}) > 0");

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/HQLTemplates.java
Patch:
@@ -36,9 +36,10 @@ public class HQLTemplates extends JPQLTemplates {
             Ops.QuantOps.AVG_IN_COL,
             Ops.EXISTS);
 
-    public static final HQLTemplates DEFAULT = new HQLTemplates();
+    public static final HQLTemplates DEFAULT = new HQLTemplates('\\');
 
-    protected HQLTemplates() {
+    public HQLTemplates(char escape) {
+        super(escape);
         //CHECKSTYLE:OFF
         add(CAST, "cast({0} as {1s})");
      // TODO : remove this when Hibernate supports type(alias)

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/JPQLCollectionAnyVisitorTest.java
Patch:
@@ -77,7 +77,7 @@ public void Template(){
     
     private String serialize(Expression<?> expression){
         Expression<?> transformed = expression.accept(JPQLCollectionAnyVisitor.DEFAULT, new Context());
-        JPQLSerializer serializer = new JPQLSerializer(new HQLTemplates());
+        JPQLSerializer serializer = new JPQLSerializer(HQLTemplates.DEFAULT);
         serializer.handle(transformed);
         return serializer.toString();
     }

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLTemplates.java
Patch:
@@ -143,7 +143,7 @@ protected SQLTemplates(String quoteStr, char escape, boolean useQuotes) {
         super(escape);
         this.quoteStr = Assert.notNull(quoteStr, "quoteStr");
         this.useQuotes = useQuotes;
-
+        
         // boolean
         add(Ops.AND, "{0} and {1}", 36);
         add(Ops.NOT, "not {0}", 3);

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/BeanMapper.java
Patch:
@@ -44,12 +44,12 @@ public Map<Path<?>, Object> createMap(RelationalPath<?> entity, Object bean) {
             Map<String, Field> fields = getPathFields(entity.getClass());
             for (Map.Entry entry : map.entrySet()) {
                 String property = entry.getKey().toString();
-                if (!property.equals("class")) {
+                if (!property.equals("class") && fields.containsKey(property)) {
                     Field field = fields.get(property);
                     Path path = (Path<?>) field.get(entity);
                     if (entry.getValue() != null) {
                         values.put(path, entry.getValue());    
-                    }                    
+                    }                                    
                 }
             }      
             return values;

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/DefaultMapper.java
Patch:
@@ -42,15 +42,15 @@ public Map<Path<?>, Object> createMap(RelationalPath<?> entity, Object bean) {
             Class<?> beanClass = bean.getClass();
             Map<String, Field> fields = getPathFields(entity.getClass());
             for (Field beanField : ReflectionUtils.getFields(beanClass)) {
-                if (!Modifier.isStatic(beanField.getModifiers())) {
-                    Field field = fields.get(beanField.getName());                    
+                if (!Modifier.isStatic(beanField.getModifiers()) && fields.containsKey(beanField.getName())) {
+                    Field field = fields.get(beanField.getName());
                     @SuppressWarnings("rawtypes")
                     Path path = (Path<?>) field.get(entity);
                     beanField.setAccessible(true);
                     Object propertyValue = beanField.get(bean);
                     if (propertyValue != null) {
                         values.put(path, propertyValue);
-                    }     
+                    }                     
                 }
             }
             return values;    

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/AnnotationMapper.java
Patch:
@@ -21,6 +21,7 @@
 import com.mysema.query.sql.Column;
 import com.mysema.query.sql.RelationalPath;
 import com.mysema.query.types.Path;
+import com.mysema.util.ReflectionUtils;
 
 /**
  * Creates the mapping via @Column annotated fields in the object. Field names don't have to match those in the RelationalPath.
@@ -40,7 +41,7 @@ public Map<Path<?>, Object> createMap(RelationalPath<?> path, Object object) {
                 columnToPath.put(column.getMetadata().getExpression().toString(), column);
             }
             Map<Path<?>, Object> values = new HashMap<Path<?>, Object>();        
-            for (Field field : object.getClass().getDeclaredFields()) {
+            for (Field field : ReflectionUtils.getFields(object.getClass())) {
                 Column ann = field.getAnnotation(Column.class);
                 if (ann != null) {
                     field.setAccessible(true);

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/DefaultMapper.java
Patch:
@@ -21,6 +21,7 @@
 import com.mysema.query.QueryException;
 import com.mysema.query.sql.RelationalPath;
 import com.mysema.query.types.Path;
+import com.mysema.util.ReflectionUtils;
 
 /**
  * Creates the mapping by inspecting the RelationalPath and Object via reflection. 
@@ -40,7 +41,7 @@ public Map<Path<?>, Object> createMap(RelationalPath<?> entity, Object bean) {
             Map<Path<?>, Object> values = new HashMap<Path<?>, Object>();
             Class<?> beanClass = bean.getClass();
             Map<String, Field> fields = getPathFields(entity.getClass());
-            for (Field beanField : beanClass.getDeclaredFields()) {
+            for (Field beanField : ReflectionUtils.getFields(beanClass)) {
                 if (!Modifier.isStatic(beanField.getModifiers())) {
                     Field field = fields.get(beanField.getName());                    
                     @SuppressWarnings("rawtypes")

File: querydsl-sql/src/main/java/com/mysema/query/sql/JDBCTypeMapping.java
Patch:
@@ -21,6 +21,8 @@
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.sql.types.Null;
+
 /**
  * JDBCTypeMapping defines a mapping from JDBC types to Java classes.
  *
@@ -76,7 +78,7 @@ public final class JDBCTypeMapping {
         registerDefault(Types.DISTINCT, Object.class);
         registerDefault(Types.DATALINK, Object.class);
         registerDefault(Types.JAVA_OBJECT, Object.class);
-        registerDefault(Types.NULL, Object.class);
+        registerDefault(Types.NULL, Null.class);
         registerDefault(Types.OTHER, Object.class);
         registerDefault(Types.REF, Object.class);
         registerDefault(Types.ROWID, Object.class);

File: querydsl-sql/src/main/java/com/mysema/query/sql/ddl/ForeignKeyBuilder.java
Patch:
@@ -36,7 +36,8 @@ public class ForeignKeyBuilder {
 
     private final SQLTemplates templates;
     
-    public ForeignKeyBuilder(CreateTableClause clause, SQLTemplates templates, List<ForeignKeyData> foreignKeys, String name, String[] columns) {
+    public ForeignKeyBuilder(CreateTableClause clause, SQLTemplates templates, 
+            List<ForeignKeyData> foreignKeys, String name, String[] columns) {
         this.clause = clause;
         this.templates = templates;
         this.foreignKeys = foreignKeys;

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/AbstractSQLClause.java
Patch:
@@ -47,7 +47,8 @@ public AbstractSQLClause(Configuration configuration) {
      * @param constantPaths list of paths related to the constants
      * @param params map of param to value for param resolving
      */
-    protected void setParameters(PreparedStatement stmt, List<?> objects, List<Path<?>> constantPaths, Map<Param<?>, ?> params) {
+    protected void setParameters(PreparedStatement stmt, List<?> objects, 
+            List<Path<?>> constantPaths, Map<Param<?>, ?> params) {
         if (objects.size() != constantPaths.size()) {
             throw new IllegalArgumentException("Expected " + objects.size() + " paths, but got " + constantPaths.size());
         }

File: querydsl-sql/src/test/java/com/mysema/query/sql/SerializationTest.java
Patch:
@@ -76,7 +76,7 @@ public void Insert(){
         SQLInsertClause insertClause = new SQLInsertClause(connection,SQLTemplates.DEFAULT,survey);
         insertClause.set(survey.id, 1);
         insertClause.set(survey.name, (String)null);
-        assertEquals("insert into SURVEY(ID, NAME)\nvalues (?, null)", insertClause.toString());
+        assertEquals("insert into SURVEY(ID, NAME)\nvalues (?, ?)", insertClause.toString());
     }
     
     @Test

File: src/main/java/com/mysema/codegen/MemSourceFileObject.java
Patch:
@@ -22,7 +22,7 @@
 public class MemSourceFileObject extends SimpleJavaFileObject {
     
     private static URI toUri(String fqname) {
-        return URI.create(fqname.replace(".","/") + ".java");
+        return URI.create("file:///" + fqname.replace(".","/") + ".java");
     }
     
     private final StringBuilder contents;

File: src/main/java/com/mysema/codegen/CodeWriter.java
Patch:
@@ -9,8 +9,6 @@
 import java.lang.annotation.Annotation;
 import java.util.Collection;
 
-import javax.annotation.Nullable;
-
 import org.apache.commons.collections15.Transformer;
 
 import com.mysema.codegen.model.Parameter;
@@ -34,7 +32,7 @@ public interface CodeWriter extends Appendable{
 
     CodeWriter beginClass(Type type) throws IOException;
 
-    CodeWriter beginClass(Type type, @Nullable Type superClass, Type... interfaces) throws IOException;
+    CodeWriter beginClass(Type type, Type superClass, Type... interfaces) throws IOException;
 
     <T> CodeWriter beginConstructor(Collection<T> params, Transformer<T, Parameter> transformer) throws IOException;
 

File: src/main/java/com/mysema/codegen/MemFileSystemRegistry.java
Patch:
@@ -12,7 +12,6 @@
 import java.util.Map;
 import java.util.WeakHashMap;
 
-import javax.annotation.Nullable;
 import javax.tools.JavaFileManager;
 
 /**
@@ -40,7 +39,6 @@ private MemFileSystemRegistry() {
         System.setProperty("java.protocol.handler.pkgs",pkgs);
     }
     
-    @Nullable
     public JavaFileManager getFileSystem(URL url) {
         String prefix = url.getProtocol() + "://" + url.getHost() + "/";
         if(prefix2jfm.containsKey(prefix)) {

File: src/main/java/com/mysema/codegen/MemJavaFileObject.java
Patch:
@@ -15,7 +15,6 @@
 import java.io.OutputStream;
 import java.net.URI;
 
-import javax.annotation.Nullable;
 import javax.tools.SimpleJavaFileObject;
 
 /**
@@ -26,7 +25,6 @@
  */
 public class MemJavaFileObject extends SimpleJavaFileObject {
     
-    @Nullable
     private ByteArrayOutputStream baos;
     
     private final String name;

File: src/main/java/com/mysema/codegen/SimpleCompiler.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.Locale;
 import java.util.Set;
 
-import javax.annotation.Nullable;
 import javax.lang.model.SourceVersion;
 import javax.tools.DiagnosticListener;
 import javax.tools.JavaCompiler;
@@ -55,7 +54,6 @@ public static String getClassPath(URLClassLoader classLoader) {
     
     private final ClassLoader classLoader;
     
-    @Nullable
     private String classPath;    
     
     private final JavaCompiler compiler;

File: src/main/java/com/mysema/codegen/model/Constructor.java
Patch:
@@ -7,13 +7,10 @@
 
 import java.util.Collection;
 
-import net.jcip.annotations.Immutable;
-
 /**
  * @author tiwe
  *
  */
-@Immutable
 public final class Constructor {
 
     private final Collection<Parameter> parameters;

File: src/main/java/com/mysema/codegen/model/Parameter.java
Patch:
@@ -5,15 +5,13 @@
  */
 package com.mysema.codegen.model;
 
-import net.jcip.annotations.Immutable;
 
 /**
  * Parameter represents a parameter in a Constructor
  *
  * @author tiwe
  * @version $Id$
  */
-@Immutable
 public final class Parameter {
 
     private final String name;

File: src/main/java/com/mysema/codegen/model/SimpleType.java
Patch:
@@ -10,8 +10,6 @@
 import java.util.List;
 import java.util.Set;
 
-import javax.annotation.Nullable;
-
 
 /**
  * @author tiwe
@@ -26,7 +24,6 @@ public class SimpleType implements Type {
 
     private final boolean primitiveClass, finalClass;
 
-    @Nullable
     private Type arrayType, componentType;
 
     public SimpleType(String fullName, String packageName, String simpleName, Type... parameters) {

File: src/main/java/com/mysema/codegen/model/TypeAdapter.java
Patch:
@@ -8,15 +8,12 @@
 import java.util.List;
 import java.util.Set;
 
-import net.jcip.annotations.Immutable;
-
 /**
  * TypeAdapter is a basic adapter implementation for the Type interface
  *
  * @author tiwe
  *
  */
-@Immutable
 public class TypeAdapter implements Type{
 
     protected final Type type;

File: querydsl-mongodb/src/test/java/com/mysema/query/mongodb/MongodbSerializerTest.java
Patch:
@@ -181,7 +181,7 @@ public void Regexcases() {
                 dbo("title", dbo("$regex", "\\QA\\E$").append("$options", "i")));
 
         assertQuery(title.equalsIgnoreCase("A"),
-                dbo("title", dbo("$regex", "\\QA\\E").append("$options", "i")));
+                dbo("title", dbo("$regex", "^\\QA\\E$").append("$options", "i")));
 
         assertQuery(title.contains("A"),
                 dbo("title", dbo("$regex", ".*\\QA\\E.*").append("$options", "")));

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLSubQuery.java
Patch:
@@ -86,7 +86,8 @@ public Q addFlag(Position position, Expression<?> flag) {
     }
     
     /**
-     * Add the given String literal as a join flag to the last added join with the position BEFORE_TARGET
+     * Add the given String literal as a join flag to the last added join with the 
+     * position BEFORE_TARGET
      *
      * @param flag
      * @return

File: querydsl-sql/src/main/java/com/mysema/query/sql/DefaultNamingStrategy.java
Patch:
@@ -34,7 +34,8 @@ public DefaultNamingStrategy() {
     @Override
     public String getClassName(String tableName) {
         if (tableName.length() > 1) {
-            return tableName.substring(0, 1).toUpperCase(Locale.ENGLISH) + toCamelCase(tableName.substring(1));    
+            return tableName.substring(0, 1).toUpperCase(Locale.ENGLISH) + 
+                    toCamelCase(tableName.substring(1));    
         } else {
             return tableName.toUpperCase(Locale.ENGLISH);
         }        

File: querydsl-sql/src/main/java/com/mysema/query/sql/ForeignKey.java
Patch:
@@ -33,7 +33,7 @@
  * @param <E>
  */
 @Immutable
-public class ForeignKey <E>{
+public class ForeignKey <E> {
 
     private final RelationalPath<?> entity;
 
@@ -45,7 +45,8 @@ public ForeignKey(RelationalPath<?> entity, Path<?> localColumn, String foreignC
         this(entity, Arrays.<Path<?>>asList(localColumn), Arrays.asList(foreignColumn));
     }
 
-    public ForeignKey(RelationalPath<?> entity, List<? extends Path<?>> localColumns, List<String> foreignColumns) {
+    public ForeignKey(RelationalPath<?> entity, List<? extends Path<?>> localColumns, 
+            List<String> foreignColumns) {
         this.entity = entity;
         this.localColumns = localColumns;
         this.foreignColumns = foreignColumns;

File: querydsl-sql/src/main/java/com/mysema/query/sql/MetaDataSerializer.java
Patch:
@@ -51,18 +51,19 @@ public class MetaDataSerializer extends EntitySerializer {
     private final NamingStrategy namingStrategy;
 
     private final boolean innerClassesForKeys;
-
+    
     /**
      * Create a new MetaDataSerializer instance
      *
      * @param namingStrategy naming strategy for table to class and column to property conversion
      * @param innerClassesForKeys wrap key properties into inner classes (default: false)
+     * @param schemaToPackage if schema name is appended to package or not
      */
     @Inject
     public MetaDataSerializer(
             TypeMappings typeMappings,
             NamingStrategy namingStrategy,
-            @Named("innerClassesForKeys") boolean innerClassesForKeys) {
+            @Named(SQLCodegenModule.INNER_CLASSES_FOR_KEYS) boolean innerClassesForKeys) {
         super(typeMappings,Collections.<String>emptyList());
         this.namingStrategy = namingStrategy;
         this.innerClassesForKeys = innerClassesForKeys;

File: querydsl-sql/src/main/java/com/mysema/query/sql/RelationalPath.java
Patch:
@@ -19,7 +19,6 @@
 import javax.annotation.Nullable;
 
 import com.mysema.query.types.EntityPath;
-import com.mysema.query.types.FactoryExpression;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.ProjectionRole;
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLCodegenModule.java
Patch:
@@ -29,6 +29,8 @@ public class SQLCodegenModule extends CodegenModule{
     
     public static final String INNER_CLASSES_FOR_KEYS = "innerClassesForKeys";
     
+    public static final String SCHEMA_TO_PACKAGE = "schemaToPackage";
+    
     @Override
     protected void configure() {
         super.configure();
@@ -42,6 +44,7 @@ protected void configure() {
         bind(BEAN_SUFFIX, "");
         bind(PACKAGE_NAME, "com.example");
         bind(BEAN_SERIALIZER, (Class<?>)null);
+        bind(SCHEMA_TO_PACKAGE, false);
     }
     
     public String getPrefix() {

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLCommonQuery.java
Patch:
@@ -59,7 +59,8 @@ public interface SQLCommonQuery<Q extends SQLCommonQuery<Q>> extends Query<Q> {
     Q addFlag(Position position, String prefix, Expression<?> expr);
 
     /**
-     * Add the given String literal as a join flag to the last added join with the position BEFORE_TARGET
+     * Add the given String literal as a join flag to the last added join with the 
+     * position BEFORE_TARGET
      *
      * @param flag
      * @return

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLQueryFactoryImpl.java
Patch:
@@ -29,7 +29,8 @@
  * @author tiwe
  *
  */
-public class SQLQueryFactoryImpl implements SQLQueryFactory<SQLQueryImpl, SQLSubQuery, SQLDeleteClause, SQLUpdateClause, SQLInsertClause, SQLMergeClause>{
+public class SQLQueryFactoryImpl implements SQLQueryFactory<SQLQueryImpl, SQLSubQuery, 
+    SQLDeleteClause, SQLUpdateClause, SQLInsertClause, SQLMergeClause>{
 
     private final Configuration configuration;
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/ddl/ForeignKeyBuilder.java
Patch:
@@ -45,7 +45,7 @@ public ForeignKeyBuilder(CreateTableClause clause, SQLTemplates templates, List<
     }
 
     public CreateTableClause references(String table, String... parentColumns) {
-        ForeignKeyData foreignKey = new ForeignKeyData(name, templates.quoteIdentifier(table), null);
+        ForeignKeyData foreignKey = new ForeignKeyData(name, null, templates.quoteIdentifier(table), null);
         for (int i = 0; i < parentColumns.length; i++) {
             foreignKey.add(
                 templates.quoteIdentifier(foreignColumns[i]), 

File: querydsl-sql/src/test/java/com/mysema/query/sql/support/KeyDataFactoryTest.java
Patch:
@@ -48,7 +48,7 @@ public void test() throws SQLException{
                 + "CONSTRAINT FK_survey FOREIGN KEY (survey_id, survey_name) REFERENCES survey(id,name), "
                 + "CONSTRAINT FK_superior FOREIGN KEY (superior_id) REFERENCES employee(id))");
         
-        KeyDataFactory keyDataFactory = new KeyDataFactory(new DefaultNamingStrategy(), "Q","","test");
+        KeyDataFactory keyDataFactory = new KeyDataFactory(new DefaultNamingStrategy(), "Q","","test", false);
         
         DatabaseMetaData md = connection.getMetaData();
         

File: querydsl-core/src/test/java/com/mysema/query/MatchingFiltersFactory.java
Patch:
@@ -256,6 +256,7 @@ public Collection<BooleanExpression> string(StringExpression expr, StringExpress
 
         if (module != Module.LUCENE){
             rv.add(expr.substring(0,1).eq(other.substring(0,1)));
+            rv.add(expr.substring(1,2).eq(other.substring(1,2)));
             rv.add(expr.substring(1).eq(other.substring(1)));
 
             rv.add(expr.trim().eq(other.trim()));

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/JPQLCollectionAnyVisitorTest.java
Patch:
@@ -52,7 +52,7 @@ public void Simple_StringOperation(){
         Predicate predicate = cat.kittens.any().name.substring(1).eq("uth123");        
         assertEquals("exists (select 1\n" +
         	"from Cat cat_kittens\n" +
-        	"where cat_kittens in elements(cat.kittens) and substring(cat_kittens.name,:a1+1) = :a2)", serialize(predicate));
+        	"where cat_kittens in elements(cat.kittens) and substring(cat_kittens.name,2) = :a1)", serialize(predicate));
     }
     
     @Test

File: querydsl-mongodb/src/main/java/com/mysema/query/mongodb/MongodbSerializer.java
Patch:
@@ -147,7 +147,7 @@ else if (op == Ops.ENDS_WITH_IC) {
 
         else if (op == Ops.EQ_IGNORE_CASE) {
             return asDBObject(asDBKey(expr, 0),
-                    Pattern.compile("^" + regexValue(expr, 1) + "$", Pattern.CASE_INSENSITIVE));
+                    Pattern.compile("^" + regexValue(expr, 1) + "$", Pattern.CASE_INSENSITIVE)); 
         }
 
         else if (op == Ops.STRING_CONTAINS) {

File: querydsl-mongodb/src/test/java/com/mysema/query/mongodb/MongodbQueryTest.java
Patch:
@@ -72,7 +72,7 @@ public void before() {
         u3 = addUser("Jaana", "Aakkonen", 40, new Address("Ceekatu","00300", tampere));
         u4 = addUser("Jaana", "BeekkoNen", 50, new Address("Deekatu","00400",tampere));
     }
-
+ 
     @Test
     public void Equals_Ignore_Case() {
         assertTrue(where(user.firstName.equalsIgnoreCase("jAaKko")).exists());

File: querydsl-sql/src/main/java/com/mysema/query/sql/DefaultNamingStrategy.java
Patch:
@@ -128,7 +128,7 @@ protected String toCamelCase(String str) {
         boolean toLower = str.toUpperCase().equals(str);
         StringBuilder builder = new StringBuilder(str.length());
         for (int i = 0; i < str.length(); i++) {
-            if (str.charAt(i) == '_') {
+            if (str.charAt(i) == '_' || str.charAt(i) == ' ') {
                 i += 1;
                 if (i < str.length()) {
                     builder.append(Character.toUpperCase(str.charAt(i)));    

File: src/main/java/com/mysema/codegen/ScalaWriter.java
Patch:
@@ -16,12 +16,12 @@
 
 import org.apache.commons.collections15.Transformer;
 import org.apache.commons.lang3.StringEscapeUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import com.mysema.codegen.model.Parameter;
 import com.mysema.codegen.model.Type;
 import com.mysema.codegen.model.Types;
 import com.mysema.codegen.support.ScalaSyntaxUtils;
-import com.sun.xml.internal.ws.util.StringUtils;
 
 /**
  * @author tiwe

File: src/test/java/com/mysema/codegen/ScalaWriterTest.java
Patch:
@@ -15,6 +15,7 @@
 import javax.validation.constraints.Max;
 
 import org.apache.commons.collections15.Transformer;
+import org.apache.commons.lang3.StringUtils;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -24,7 +25,7 @@
 import com.mysema.codegen.model.Type;
 import com.mysema.codegen.model.TypeCategory;
 import com.mysema.codegen.model.Types;
-import com.sun.xml.internal.ws.util.StringUtils;
+
 
 public class ScalaWriterTest {
 

File: src/main/java/com/mysema/codegen/ScalaWriter.java
Patch:
@@ -30,7 +30,7 @@
 public class ScalaWriter extends AbstractCodeWriter<ScalaWriter> {
 
     private static final Set<String> PRIMITIVE_TYPES = new HashSet<String>(
-            Arrays.asList("byte","char","int","long","short","double","float"));
+            Arrays.asList("boolean", "byte","char","int","long","short","double","float"));
     
     private static final String DEF = "def ";
 

File: querydsl-apt/src/test/java/com/mysema/query/domain/AbstractClasses2Test.java
Patch:
@@ -87,13 +87,13 @@ public int compareTo(PartyRole o) {
     }
     
     @Test
-    public void Grant(){
+    public void Grant_id_Type_And_Class(){
         assertEquals(QAbstractClasses2Test_Party.class, QAbstractClasses2Test_Grant.grant.id.getClass());
         assertEquals(Party.class, QAbstractClasses2Test_Grant.grant.id.getType());
     }
 
     @Test
-    public void Party(){
+    public void Party_id_Type_And_Class(){
         assertEquals(NumberPath.class, QAbstractClasses2Test_Party.party.id.getClass());
         assertEquals(Long.class, QAbstractClasses2Test_Party.party.id.getType());
     }

File: querydsl-apt/src/test/java/com/mysema/query/domain/AbstractClassesTest.java
Patch:
@@ -72,13 +72,13 @@ public int compareTo(Party o) {
     }
 
     @Test
-    public void Grant(){
+    public void Grant_id_Type(){
         assertEquals(QAbstractClassesTest_Party.class, QAbstractClassesTest_Grant.grant.id.getClass());
         assertEquals(Party.class, QAbstractClassesTest_Grant.grant.id.getType());
     }
 
     @Test
-    public void Party(){
+    public void Party_id_Type(){
         assertEquals(NumberPath.class, QAbstractClassesTest_Party.party.id.getClass());
         assertEquals(Long.class, QAbstractClassesTest_Party.party.id.getType());
     }

File: querydsl-apt/src/test/java/com/mysema/query/domain/AbstractPropertiesTest.java
Patch:
@@ -51,4 +51,5 @@ public void setId(Integer id) {
 
     }
 
+    // TODO : tests
 }

File: querydsl-apt/src/test/java/com/mysema/query/domain/AnimalTest.java
Patch:
@@ -37,7 +37,7 @@ public static class Cat extends Animal{
 
     @Test
     public void Properties_Are_Copied_From_Super(){
-        assertTrue("direct copy of PString field failed",  QAnimalTest_Cat.cat.name == QAnimalTest_Cat.cat._super.name);
+        assertTrue("direct copy of StringPath field failed",  QAnimalTest_Cat.cat.name == QAnimalTest_Cat.cat._super.name);
 
     }
 

File: querydsl-apt/src/main/java/com/mysema/query/apt/TypeUtils.java
Patch:
@@ -67,7 +67,7 @@ public static Set<Element> getAnnotationValuesAsElements(AnnotationMirror mirror
         Set<Element> elements = new HashSet<Element>();
         for (Map.Entry<? extends ExecutableElement,? extends AnnotationValue> entry : mirror.getElementValues().entrySet()) {
             if (entry.getKey().getSimpleName().toString().equals("value")) {
-                List<AnnotationValue> values = (List) entry.getValue().getValue();
+                List<AnnotationValue> values = ((List) entry.getValue().getValue());
                 for (AnnotationValue value : values) {
                     DeclaredType type = (DeclaredType) value.getValue();
                     elements.add(type.asElement());

File: querydsl-core/src/main/java/com/mysema/query/codegen/Property.java
Patch:
@@ -62,7 +62,7 @@ public Property(EntityType declaringType, String name, String escapedName, Type
         this.name = Assert.notNull(name,"name");
         this.escapedName = escapedName;
         this.type = Assert.notNull(type,"type");
-        this.inits = inits.clone();
+        this.inits = inits.clone();  
         this.inherited = inherited;
     }
 

File: querydsl-core/src/main/java/com/mysema/util/ReflectionUtils.java
Patch:
@@ -34,7 +34,7 @@
  */
 public final class ReflectionUtils {
 
-    private static final AnnotatedElement EMPTY = new AnnotatedElementAdapter();
+    private static final AnnotatedElement EMPTY = new Annotations();
 
     private ReflectionUtils(){}
 
@@ -46,7 +46,7 @@ public static AnnotatedElement getAnnotatedElement(Class<?> beanClass, String pr
         } else if (method == null || method.getAnnotations().length == 0) {
             return field;
         } else {
-            return new AnnotatedElementAdapter(field, method);
+            return new Annotations(field, method);
         }
     }
 

File: querydsl-core/src/test/java/com/mysema/query/types/path/PathTest.java
Patch:
@@ -41,7 +41,7 @@
 import com.mysema.query.types.PathMetadataFactory;
 import com.mysema.query.types.Templates;
 import com.mysema.query.types.ToStringVisitor;
-import com.mysema.util.AnnotatedElementAdapter;
+import com.mysema.util.Annotations;
 
 public class PathTest {
 
@@ -114,7 +114,7 @@ public void GetAnnotatedElement_for_property(){
         assertNull(property2.getAnnotation(Nullable.class));
 
         // property3 (both)
-        assertEquals(AnnotatedElementAdapter.class, property3.getClass());
+        assertEquals(Annotations.class, property3.getClass());
         assertTrue(property3.isAnnotationPresent(QueryTransient.class));
         assertNotNull(property3.getAnnotation(QueryTransient.class));
         assertTrue(property3.isAnnotationPresent(Nonnull.class));

File: querydsl-apt/src/main/java/com/mysema/query/apt/Processor.java
Patch:
@@ -455,7 +455,7 @@ private void mergeTypes(Map<String, EntityType> types, Deque<Type> superTypes) {
         // get external supertypes
         while (!superTypes.isEmpty()) {
             Type superType = superTypes.pop();
-            if (!types.containsKey(superType.getFullName())  && !allSupertypes.containsKey(superType.getFullName())) {
+            if (!types.containsKey(superType.getFullName()) && !allSupertypes.containsKey(superType.getFullName())) {
                 TypeElement typeElement = env.getElementUtils().getTypeElement(superType.getFullName());
                 if (typeElement == null) {
                     throw new IllegalStateException("Found no type for " + superType.getFullName());
@@ -666,7 +666,7 @@ private void serialize(Serializer serializer, Collection<EntityType> models) {
                 
                 Set<TypeElement> elements = typeElements.get(model.getFullName());
                 
-                if (isGenerated(type, filer, elements)) {
+                if (isGenerate(type, filer, elements)) {
                     if (elements == null) {
                         elements = new HashSet<TypeElement>();
                     }
@@ -701,7 +701,7 @@ private void serialize(Serializer serializer, Collection<EntityType> models) {
         }
     }
 
-    protected boolean isGenerated(Type type, Filer filer, Set<TypeElement> elements) throws IOException {
+    protected boolean isGenerate(Type type, Filer filer, Set<TypeElement> elements) throws IOException {
         String packageName = type.getPackageName();
         boolean generate = false;
         try {

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLInsertClause.java
Patch:
@@ -143,7 +143,7 @@ public SQLInsertClause columns(Path<?>... columns) {
     }
 
     /**
-     * Execute the clause and return the generated key with the type of the given path
+     * Execute the clause and return the generated key with the type of the given path.
      * If no rows were created, null is returned, otherwise the key of the first row is returned.
      *
      * @param <T>

File: querydsl-jdo/src/main/java/com/mysema/query/jdo/sql/AbstractSQLQuery.java
Patch:
@@ -17,7 +17,6 @@
 import com.mysema.query.sql.RelationalPath;
 import com.mysema.query.sql.SQLQueryMixin;
 import com.mysema.query.support.ProjectableQuery;
-import com.mysema.query.support.QueryMixin;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.ExpressionUtils;
 import com.mysema.query.types.Path;
@@ -40,7 +39,7 @@ public abstract class AbstractSQLQuery<T extends AbstractSQLQuery<T>> extends Pr
     
     @SuppressWarnings("unchecked")
     public AbstractSQLQuery(QueryMetadata metadata) {
-        super(new QueryMixin<T>(metadata));
+        super(new SQLQueryMixin<T>(metadata));
         this.queryMixin = (SQLQueryMixin<T>)super.queryMixin;
         this.queryMixin.setSelf((T)this);
     }

File: querydsl-core/src/main/java/com/mysema/query/types/ValidatingVisitor.java
Patch:
@@ -45,7 +45,8 @@ public Void visit(ParamExpression<?> expr, Void context) {
     @Override
     public Void visit(Path<?> expr, Void context) {
         if (!known.contains(expr.getRoot())){
-            throw new IllegalArgumentException("Undeclared path " + expr.getRoot());
+            throw new IllegalArgumentException("Undeclared path '" + expr.getRoot() + "'. " +
+            	"Add this path as a source to the query to be able to reference it.");
         }
         if (expr.getMetadata().getParent() != null){
             expr.getMetadata().getParent().accept(this, null);

File: querydsl-core/src/main/java/com/mysema/query/codegen/EntitySerializer.java
Patch:
@@ -80,10 +80,10 @@ protected void constructors(EntityType model, SerializerConfig config, CodeWrite
         // 2
         if (!hasEntityFields) {
             if (model.isFinal()) {
-                Type type = new ClassType(BeanPath.class, model);
+                Type type = new ClassType(Path.class, model);
                 writer.beginConstructor(new Parameter("entity", type));
             } else {
-                Type type = new ClassType(BeanPath.class, new TypeExtends(model));
+                Type type = new ClassType(Path.class, new TypeExtends(model));
                 writer.beginConstructor(new Parameter("entity", type));
             }
             if (stringOrBoolean) {

File: querydsl-apt/src/main/java/com/mysema/query/apt/Processor.java
Patch:
@@ -172,7 +172,7 @@ private void processAnnotations() {
         processEntities();
 
         processProjectionTypes();
-                
+        
     }
 
     private void processExclusions() {
@@ -301,6 +301,7 @@ private void serializeTypes() {
             env.getMessager().printMessage(Kind.NOTE, "Serializing Projection types");
             serialize(configuration.getDTOSerializer(), projectionTypes.values());
         }
+
     }
 
     private void serializeVariableClasses() {

File: querydsl-apt/src/test/java/com/mysema/query/domain/Embedded2Test.java
Patch:
@@ -63,6 +63,7 @@ public interface Entity<T> extends Serializable {
 
     }
      
+    @Embeddable
     public class BrandCode extends EntityCode {
 
     }

File: querydsl-apt/src/main/java/com/mysema/query/apt/Processor.java
Patch:
@@ -638,7 +638,9 @@ private void processEmbedded() {
                 typeName = typeName.substring(0, typeName.indexOf('<'));
             }
             TypeElement typeElement = env.getElementUtils().getTypeElement(typeName);
-            if (typeElement.getAnnotation(configuration.getEntityAnnotation()) != null){
+            if (typeElement == null) {
+                continue;
+            } else if (typeElement.getAnnotation(configuration.getEntityAnnotation()) != null){
                 // skip Entity types here
                 continue;
             }

File: querydsl-core/src/main/java/com/mysema/query/types/ValidatingVisitor.java
Patch:
@@ -58,10 +58,10 @@ public Void visit(SubQueryExpression<?> expr, Void context) {
         Collection<Expression<?>> k = known;
         known = new HashSet<Expression<?>>(known);
         QueryMetadata md = expr.getMetadata();
-        visit(md.getGroupBy());        
         visitJoins(md.getJoins());
         visitOrder(md.getOrderBy());
         visit(md.getProjection());
+        visit(md.getGroupBy());
         if (md.getHaving() != null){
             md.getHaving().accept(this, null);
         }

File: querydsl-core/src/main/java/com/mysema/query/types/QBean.java
Patch:
@@ -149,7 +149,7 @@ private void initFields() {
             Class<?> beanType = type;
             while (!beanType.equals(Object.class)){
                 try {
-                    Field field = type.getDeclaredField(property);
+                    Field field = beanType.getDeclaredField(property);
                     field.setAccessible(true);
                     fields.put(property, field);
                     beanType = Object.class;

File: querydsl-core/src/main/java/com/mysema/query/types/ConstructorExpression.java
Patch:
@@ -86,16 +86,16 @@ public ConstructorExpression(Class<T> type, Class<?>[] paramTypes, List<Expressi
      * @return
      */
     @SuppressWarnings("unchecked")
-    public SimpleExpression<T> as(Path<T> alias) {
-        return SimpleOperation.create((Class<T>)getType(),Ops.ALIAS, this, alias);
+    public Expression<T> as(Path<T> alias) {
+        return OperationImpl.create((Class<T>)getType(),Ops.ALIAS, this, alias);
     }
 
     /**
      * Create an alias for the expression
      *
      * @return
      */
-    public SimpleExpression<T> as(String alias) {
+    public Expression<T> as(String alias) {
         return as(new PathImpl<T>(getType(), alias));
     }
     

File: querydsl-core/src/main/java/com/mysema/query/types/QBean.java
Patch:
@@ -197,16 +197,16 @@ public T newInstance(Object... a){
      * @return
      */
     @SuppressWarnings("unchecked")
-    public SimpleExpression<T> as(Path<T> alias) {
-        return SimpleOperation.create((Class<T>)getType(),Ops.ALIAS, this, alias);
+    public Expression<T> as(Path<T> alias) {
+        return OperationImpl.create((Class<T>)getType(),Ops.ALIAS, this, alias);
     }
 
     /**
      * Create an alias for the expression
      *
      * @return
      */
-    public SimpleExpression<T> as(String alias) {
+    public Expression<T> as(String alias) {
         return as(new PathImpl<T>(getType(), alias));
     }
     

File: querydsl-core/src/main/java/com/mysema/query/support/Expressions.java
Patch:
@@ -122,9 +122,8 @@ public static <T extends Comparable> DateTimeExpression<T> dateTimeOperation(Cla
     public static <T extends Comparable> TimeExpression<T> timeOperation(Class<T> type, Operator<? super T> operator, Expression<?>... args) {
         return TimeOperation.create(type, operator, args);
     }    
-    
-    @SuppressWarnings("unchecked")
-    public static <T extends Number & Comparable> NumberExpression<T> numberOperation(Class<T> type, Operator<? super T> operator, Expression<?>... args) {
+        
+    public static <T extends Number & Comparable<?>> NumberExpression<T> numberOperation(Class<T> type, Operator<? super T> operator, Expression<?>... args) {
         return NumberOperation.create(type, operator, args);
     }
     

File: querydsl-collections/src/test/java/com/mysema/query/collections/GroupByTest.java
Patch:
@@ -179,7 +179,7 @@ public void OneToOneToMany_Projection() {
 //                Projections.constructor(Post.class, postId, postName, set(qComment)))));
         Map<String, User> results = MiniApi.from(user, users).from(post, posts)
             .where(user.name.eq(post.user.name))
-            .transform(groupBy(user.name, QUser.create(user.name, QPost.create(post.id, post.name, user))));                    
+            .transform(groupBy(user.name, Projections.constructor(User.class, user.name, QPost.create(post.id, post.name, user))));                    
         
         assertEquals(2, results.size());
         

File: querydsl-apt/src/test/java/com/mysema/query/domain/AbstractClasses2Test.java
Patch:
@@ -17,12 +17,13 @@
 
 import com.mysema.query.types.path.NumberPath;
 
+@SuppressWarnings("serial")
 public class AbstractClasses2Test {
     
     public interface Archetype<PK extends Serializable, DO extends Serializable> extends Serializable, Comparable<DO>  {
 
     }
-
+    
     @MappedSuperclass
     public static abstract class BaseArchetype<PK extends Serializable, DO extends Serializable> implements Archetype<PK, DO> {
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/UtilDateType.java
Patch:
@@ -34,7 +34,7 @@ public void setValue(PreparedStatement st, int startIndex, Date value) throws SQ
 
     @Override
     public int[] getSQLTypes() {
-        return new int[]{Types.DATE};
+        return new int[]{Types.TIMESTAMP};
     }
 
 }

File: querydsl-core/src/main/java/com/mysema/query/group/GroupDefinition.java
Patch:
@@ -9,7 +9,7 @@
 import com.mysema.query.types.Expression;
 
 /**
- * Defines the way results of a given expression are grouped. GroupDefinition is also used
+ * Defines the way results of a given expression are grouped. GroupDefinitions are also used
  * to access values of a given GroupDefinition within a Group. This resembles 
  * closely the way Expressions are used to access values of a {@link Tuple}. 
  * GroupDefinitions are stateless wrappers for Expressions that know how to 

File: querydsl-sql/src/main/java/com/mysema/query/sql/support/SerializationContext.java
Patch:
@@ -7,6 +7,7 @@
 
 import com.mysema.query.QueryMetadata;
 
+
 /**
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/group/GroupBy.java
Patch:
@@ -248,17 +248,17 @@ public <T, R> R getGroup(GroupColumnDefinition<T, R> definition) {
         
         @Override
         public <T> T getOne(Expression<T> expr) {
-            return get(expr);
+            return this.<T, T>get(expr);
         }
 
         @Override
         public <T> Set<T> getSet(Expression<T> expr) {
-            return get(expr);
+            return this.<T, Set<T>>get(expr);
         }
 
         @Override
         public <T> List<T> getList(Expression<T> expr) {
-            return get(expr);
+            return this.<T, List<T>>get(expr);
         }
         
         private <T, R> R get(Expression<T> expr) {

File: querydsl-core/src/main/java/com/mysema/query/group/QPair.java
Patch:
@@ -70,9 +70,8 @@ public int hashCode() {
     public boolean equals(Object o) {
         if (o == this) {
             return true;
-        } else if (o instanceof QPair) {
-            @SuppressWarnings("rawtypes")
-            QPair other = (QPair) o;
+        } else if (o instanceof QPair<?,?>) {
+            QPair<?,?> other = (QPair<?,?>) o;
             return this.key.equals(other.key) && this.value.equals(other.value);
         } else {
             return false;

File: querydsl-core/src/main/java/com/mysema/query/types/path/Constants.java
Patch:
@@ -12,6 +12,7 @@
 final class Constants {
     
     private static final Set<Class<?>> typedClasses = new HashSet<Class<?>>(Arrays.<Class<?>>asList(
+            ArrayPath.class,
             PathBuilder.class,
             ComparablePath.class,
             EnumPath.class,

File: querydsl-core/src/main/java/com/mysema/query/support/ProjectableAdapter.java
Patch:
@@ -20,7 +20,7 @@
  * @author tiwe
  */
 public class ProjectableAdapter<P extends Projectable> implements Projectable {
-
+  
     private final P projectable;
 
     public ProjectableAdapter(P projectable) {

File: querydsl-core/src/main/java/com/mysema/query/support/ProjectableQuery.java
Patch:
@@ -38,8 +38,6 @@ public final long countDistinct() {
         return count();
     }
 
-
-
     @Override
     public final CloseableIterator<Object[]> iterate(Expression<?> first, Expression<?> second, Expression<?>... rest) {
         return iterate(merge(first, second, rest));

File: querydsl-apt/src/main/java/com/mysema/query/apt/ExtendedTypeFactory.java
Patch:
@@ -62,7 +62,7 @@ private static Class<?> safeClassForName(String name){
 
     private final Type defaultType;
 
-    private final List<Class<? extends Annotation>> entityAnnotations;
+    private final Set<Class<? extends Annotation>> entityAnnotations;
 
     private final Map<List<String>, EntityType> entityTypeCache = new HashMap<List<String>, EntityType>();
 
@@ -79,7 +79,7 @@ private static Class<?> safeClassForName(String name){
     public ExtendedTypeFactory(
             ProcessingEnvironment env,
             Configuration configuration,
-            List<Class<? extends Annotation>> annotations,
+            Set<Class<? extends Annotation>> annotations,
             TypeMappings typeMappings,
             QueryTypeFactory queryTypeFactory){
         this.env = env;
@@ -156,7 +156,7 @@ public Type getType(TypeMirror typeMirror, boolean deep){
     private Type createType(TypeMirror typeMirror, List<String> key, boolean deep) {
         typeCache.put(key, null);
         Type type = handle(typeMirror, deep);
-        if (type != null && type.getCategory() == TypeCategory.ENTITY) {
+        if (type != null && (type.getCategory() == TypeCategory.ENTITY || type.getCategory() == TypeCategory.CUSTOM)) {
             EntityType entityType = getEntityType(typeMirror, deep);
             typeCache.put(key, entityType);
             return entityType;

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLQueryFactory.java
Patch:
@@ -14,12 +14,13 @@
  * @author tiwe
  *
  * @param <Q> query type
+ * @param <SQ> subquery type
  * @param <D> delete clause type
  * @param <U> update clause type
  * @param <I> insert clause type
  * @param <M> merge clause type
  */
-public interface SQLQueryFactory<Q extends AbstractSQLQuery<?> & Query<?>,
+public interface SQLQueryFactory<Q extends Query<?>, // extends AbstractSQLQuery<?>
     SQ extends AbstractSQLSubQuery<?>,
     D extends SQLDeleteClause,
     U extends SQLUpdateClause,

File: querydsl-sql/src/main/java/com/mysema/query/sql/oracle/OracleQueryFactory.java
Patch:
@@ -23,7 +23,7 @@
  * @author tiwe
  *
  */
-public class OracleQueryFactory implements SQLQueryFactory<OracleQuery, SQLSubQuery, SQLDeleteClause, SQLUpdateClause, SQLInsertClause, SQLMergeClause>{
+public class OracleQueryFactory implements SQLQueryFactory<OracleQuery, SQLSubQuery, SQLDeleteClause, SQLUpdateClause, SQLInsertClause, SQLMergeClause> {
 
     private final SQLQueryFactoryImpl queryFactory;
 

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/hibernate/sql/AbstractHibernateSQLQuery.java
Patch:
@@ -83,6 +83,7 @@ private String buildQueryString(boolean forCountRow) {
     }
 
     public Query createQuery(Expression<?>... args){
+        queryMixin.getMetadata().setValidate(false);
         queryMixin.addToProjection(args);
         return createQuery(toQueryString());
     }

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/sql/AbstractJPASQLQuery.java
Patch:
@@ -67,6 +67,7 @@ private String buildQueryString(boolean forCountRow) {
     }
 
     public Query createQuery(Expression<?>... args){
+        queryMixin.getMetadata().setValidate(false);
         queryMixin.addToProjection(args);
         return createQuery(toQueryString());
     }

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -319,6 +319,7 @@ public void close() throws SQLException {
     }
 
     private <RT> UnionBuilder<RT> innerUnion(SubQueryExpression<?>... sq) {
+        queryMixin.getMetadata().setValidate(false);
         if (!queryMixin.getMetadata().getJoins().isEmpty()) {
             throw new IllegalArgumentException("Don't mix union and from");
         }

File: querydsl-sql/src/test/java/com/mysema/query/SelectBaseTest.java
Patch:
@@ -705,8 +705,9 @@ public void Tuple_Projection(){
             assertNotNull(tuple.get(employee.lastname));
         }
     }
-    
+        
     @Test
+    @SuppressWarnings("serial")
     public void MappingProjection() {
         List<Pair<String, String>> pairs = query().from(employee).list(new MappingProjection<Pair<String,String>>(Pair.class, employee.firstname, employee.lastname) {
             @Override
@@ -815,7 +816,6 @@ public void Union3() throws SQLException {
     }
     
     @Test
-    @Ignore // FIXME
     @SuppressWarnings("unchecked")
     public void Union_With_Order() throws SQLException {
         SubQueryExpression<Integer> sq1 = sq().from(employee).unique(employee.id);

File: querydsl-jpa/src/test/java/com/mysema/query/AbstractStandardTest.java
Patch:
@@ -234,7 +234,7 @@ public void Any_And_Gt(){
     }
 
     @Test
-    public void AnyUsage() {
+    public void JoinEmbeddable() {
         QBookVersion bookVersion = QBookVersion.bookVersion;
         QBookMark bookMark = new QBookMark(PathMetadataFactory.forVariable("bm"));
 //        query().from(bookVersion)

File: querydsl-core/src/main/java/com/mysema/query/codegen/GenericExporter.java
Patch:
@@ -295,8 +295,7 @@ private Property createProperty(EntityType entityType, String propertyName, Type
             }
             propertyType = propertyType.as(queryType.value().getCategory());
         }
-        Property property = new Property(entityType, propertyName, propertyType, inits);
-        return property;
+        return new Property(entityType, propertyName, propertyType, inits);
     }
 
 

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/hibernate/HibernateDomainExporter.java
Patch:
@@ -215,8 +215,7 @@ private Property createProperty(EntityType entityType, String propertyName, Type
             }
             propertyType = propertyType.as(queryType.value().getCategory());
         }
-        Property property = new Property(entityType, propertyName, propertyType, inits);
-        return property;
+        return new Property(entityType, propertyName, propertyType, inits);
     }
 
     private EntityType createEntityType(Class<?> cl) {

File: querydsl-mongodb/src/main/java/com/mysema/query/mongodb/MongodbOps.java
Patch:
@@ -1,11 +1,10 @@
 package com.mysema.query.mongodb;
 
-import com.mysema.query.types.Operator;
 import com.mysema.query.types.OperatorImpl;
 
 public final class MongodbOps {
     
-    public static Operator<Boolean> NEAR = new OperatorImpl<Boolean>("NEAR", Number.class, Number.class);
+    public static final Operator<Boolean> NEAR = new OperatorImpl<Boolean>("NEAR", Number.class, Number.class);
 
     private MongodbOps(){}
     

File: querydsl-apt/src/main/java/com/mysema/query/apt/QuerydslAnnotationProcessor.java
Patch:
@@ -12,8 +12,6 @@
 import javax.annotation.processing.AbstractProcessor;
 import javax.annotation.processing.RoundEnvironment;
 import javax.annotation.processing.SupportedAnnotationTypes;
-import javax.annotation.processing.SupportedSourceVersion;
-import javax.lang.model.SourceVersion;
 import javax.lang.model.element.TypeElement;
 import javax.tools.Diagnostic;
 
@@ -32,7 +30,6 @@
  *
  */
 @SupportedAnnotationTypes({"com.mysema.query.annotations.*"})
-@SupportedSourceVersion(SourceVersion.RELEASE_6)
 public class QuerydslAnnotationProcessor extends AbstractProcessor{
     
     private static final Boolean ALLOW_OTHER_PROCESSORS_TO_CLAIM_ANNOTATIONS = Boolean.FALSE;

File: querydsl-apt/src/main/java/com/mysema/query/apt/hibernate/HibernateAnnotationProcessor.java
Patch:
@@ -7,8 +7,6 @@
 
 import javax.annotation.processing.RoundEnvironment;
 import javax.annotation.processing.SupportedAnnotationTypes;
-import javax.annotation.processing.SupportedSourceVersion;
-import javax.lang.model.SourceVersion;
 
 import com.mysema.query.apt.DefaultConfiguration;
 import com.mysema.query.apt.jpa.JPAAnnotationProcessor;
@@ -20,7 +18,6 @@
  *
  */
 @SupportedAnnotationTypes({"com.mysema.query.annotations.*","javax.persistence.*", "org.hibernate.annotations.*"})
-@SupportedSourceVersion(SourceVersion.RELEASE_6)
 public class HibernateAnnotationProcessor extends JPAAnnotationProcessor{
     
     @Override

File: querydsl-apt/src/main/java/com/mysema/query/apt/jdo/JDOAnnotationProcessor.java
Patch:
@@ -13,8 +13,6 @@
 import javax.annotation.processing.AbstractProcessor;
 import javax.annotation.processing.RoundEnvironment;
 import javax.annotation.processing.SupportedAnnotationTypes;
-import javax.annotation.processing.SupportedSourceVersion;
-import javax.lang.model.SourceVersion;
 import javax.lang.model.element.TypeElement;
 import javax.tools.Diagnostic;
 
@@ -29,7 +27,6 @@
  *
  */
 @SupportedAnnotationTypes({"com.mysema.query.annotations.*","javax.jdo.annotations.*"})
-@SupportedSourceVersion(SourceVersion.RELEASE_6)
 public class JDOAnnotationProcessor extends AbstractProcessor{
     
     private static final Boolean ALLOW_OTHER_PROCESSORS_TO_CLAIM_ANNOTATIONS = Boolean.FALSE;

File: querydsl-apt/src/main/java/com/mysema/query/apt/jpa/JPAAnnotationProcessor.java
Patch:
@@ -11,8 +11,6 @@
 import javax.annotation.processing.AbstractProcessor;
 import javax.annotation.processing.RoundEnvironment;
 import javax.annotation.processing.SupportedAnnotationTypes;
-import javax.annotation.processing.SupportedSourceVersion;
-import javax.lang.model.SourceVersion;
 import javax.lang.model.element.TypeElement;
 import javax.tools.Diagnostic;
 
@@ -27,7 +25,6 @@
  *
  */
 @SupportedAnnotationTypes({"com.mysema.query.annotations.*","javax.persistence.*"})
-@SupportedSourceVersion(SourceVersion.RELEASE_6)
 public class JPAAnnotationProcessor extends AbstractProcessor{
 
     private static final Boolean ALLOW_OTHER_PROCESSORS_TO_CLAIM_ANNOTATIONS = Boolean.FALSE;

File: querydsl-mongodb/src/main/java/com/mysema/query/mongodb/morphia/MorphiaAnnotationProcessor.java
Patch:
@@ -12,8 +12,6 @@
 import javax.annotation.processing.AbstractProcessor;
 import javax.annotation.processing.RoundEnvironment;
 import javax.annotation.processing.SupportedAnnotationTypes;
-import javax.annotation.processing.SupportedSourceVersion;
-import javax.lang.model.SourceVersion;
 import javax.lang.model.element.TypeElement;
 import javax.tools.Diagnostic;
 
@@ -32,7 +30,6 @@
  *
  */
 @SupportedAnnotationTypes({"com.mysema.query.annotations.*","com.google.code.morphia.annotations.*"})
-@SupportedSourceVersion(SourceVersion.RELEASE_6)
 public class MorphiaAnnotationProcessor extends AbstractProcessor{
 
     private static final Boolean ALLOW_OTHER_PROCESSORS_TO_CLAIM_ANNOTATIONS = Boolean.FALSE;

File: querydsl-apt/src/main/java/com/mysema/query/apt/ExtendedTypeFactory.java
Patch:
@@ -406,7 +406,9 @@ private Set<Type> getSupertypes(TypeMirror typeMirror, Type type, boolean deep)
                 if (e.getSuperclass().getKind() != TypeKind.NONE){
                     TypeMirror supertype = normalize(e.getSuperclass());
                     Type superClass = getType(supertype, deep);
-                    if (!superClass.getFullName().startsWith("java")){
+                    if (superClass == null) {
+                        System.err.println("Got no type for " + supertype);
+                    } else  if (!superClass.getFullName().startsWith("java")){
                         superTypes = Collections.singleton(getType(supertype, deep));
                     }
                 }

File: querydsl-apt/src/main/java/com/mysema/query/apt/Processor.java
Patch:
@@ -712,6 +712,7 @@ private void registerTypeElement(String entityName, TypeElement element){
     private void serialize(Serializer serializer, Collection<EntityType> models) {
         Messager msg = env.getMessager();
         for (EntityType model : models) {
+            
             try {
 
                 Type type = configuration.getTypeMappings().getPathType(model, model, true);

File: querydsl-apt/src/test/java/com/mysema/query/domain/ExternalEntityTest.java
Patch:
@@ -3,7 +3,6 @@
 import org.junit.Ignore;
 
 import com.mysema.query.annotations.QueryEntity;
-import com.mysema.query.codegen.sub.AbstractEntity;
 
 @Ignore
 public class ExternalEntityTest {

File: querydsl-core/src/main/java/com/mysema/query/codegen/EntityType.java
Patch:
@@ -204,5 +204,4 @@ public Set<String> getEscapedPropertyNames() {
         return escapedPropertyNames;
     }
     
-    
 }

File: querydsl-core/src/main/java/com/mysema/query/codegen/TypeResolver.java
Patch:
@@ -48,7 +48,7 @@ private static Type resolveTypeExtends(TypeExtends typeExtends, Type declaringTy
             }
         }
 
-        if (index > -1){
+        if (index > -1 && subtype.getSuperType() != null){
             // get binding of var via model supertype
             Supertype type = subtype.getSuperType();
             while (!type.getType().equals(declaringType)){

File: src/main/java/com/mysema/codegen/JavaWriter.java
Patch:
@@ -185,7 +185,7 @@ public JavaWriter beginClass(Type type) throws IOException{
     @Override
     public JavaWriter beginClass(Type type, Type superClass, Type... interfaces) throws IOException{
         packages.add(type.getPackageName());
-        beginLine(PUBLIC_CLASS + type.getSimpleName());
+        beginLine(PUBLIC_CLASS + type.getGenericName(false, packages, classes));
         if (superClass != null){
             append(EXTENDS + superClass.getGenericName(false, packages, classes));
         }

File: src/main/java/com/mysema/codegen/ScalaWriter.java
Patch:
@@ -200,7 +200,7 @@ public ScalaWriter beginClass(Type type) throws IOException {
     @Override
     public ScalaWriter beginClass(Type type, Type superClass, Type... interfaces) throws IOException {
         packages.add(type.getPackageName());
-        beginLine(PUBLIC_CLASS, type.getSimpleName());
+        beginLine(PUBLIC_CLASS, getGenericName(false, type));
         if (superClass != null){
             append(EXTENDS + getGenericName(false, superClass));
         }

File: querydsl-apt/src/main/java/com/mysema/query/apt/Processor.java
Patch:
@@ -476,7 +476,7 @@ private boolean hasKnownAnnotation(Element element) {
             return true;
         }
                 
-        if (configuration.getSupertypeSerializer() != null && element.getAnnotation(configuration.getSuperTypeAnnotation()) != null) {
+        if (configuration.getSuperTypeAnnotation() != null && element.getAnnotation(configuration.getSuperTypeAnnotation()) != null) {
             return true;
         }
         

File: querydsl-apt/src/main/java/com/mysema/query/apt/Processor.java
Patch:
@@ -630,7 +630,7 @@ private void processEmbedded(){
             // remove generic signature of type for TypeElement lookup
             String typeName = type.toString();
             if (typeName.contains("<")){
-                typeName = typeName.substring(0, typeName.indexOf("<"));
+                typeName = typeName.substring(0, typeName.indexOf('<'));
             }
             TypeElement typeElement = env.getElementUtils().getTypeElement(typeName);
             if (typeElement.getAnnotation(configuration.getEntityAnnotation()) != null){

File: querydsl-core/src/main/java/com/mysema/query/types/expr/Wildcard.java
Patch:
@@ -22,4 +22,6 @@ public final class Wildcard {
 
     public static final NumberExpression<Integer> countAsInt = NumberOperation.create(Integer.class, Ops.AggOps.COUNT_ALL_AGG);
 
+    private Wildcard(){}
+    
 }

File: querydsl-core/src/main/java/com/mysema/query/alias/Alias.java
Patch:
@@ -141,7 +141,7 @@ public final class Alias {
         if (rv != null) {
             return rv;
         }else if (arg instanceof EntityPath<?>){    
-            return (EntityPathBase<D>)arg;
+            return (EntityPathBase<D>)arg; //NOSONAR
         } else if (arg instanceof ManagedObject) {
             return (EntityPathBase<D>) ((ManagedObject) arg).__mappedPath();
         } else {

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/impl/AbstractJPAQuery.java
Patch:
@@ -202,6 +202,7 @@ private List<?> getResultList(Query query) {
      * @param query
      * @return
      */
+    @Nullable
     private Object getSingleResult(Query query) {
         if (factoryExpressionUsed) {
             Object result = query.getSingleResult();

File: querydsl-jpa/src/test/java/com/mysema/query/_derby/DerbyJPAEclipseLinkTest.java
Patch:
@@ -5,6 +5,7 @@
  */
 package com.mysema.query._derby;
 
+import org.junit.Ignore;
 import org.junit.runner.RunWith;
 
 import com.mysema.query.AbstractJPATest;
@@ -18,9 +19,10 @@
  * @author tiwe
  *
  */
+@Ignore
 @RunWith(JPATestRunner.class)
 @JPAConfig("derby-eclipselink")
-public abstract class DerbyJPAEclipseLinkTest extends AbstractJPATest{
+public class DerbyJPAEclipseLinkTest extends AbstractJPATest{
 
     @Override
     protected JPQLTemplates getTemplates(){

File: querydsl-core/src/main/java/com/mysema/query/alias/Alias.java
Patch:
@@ -141,7 +141,7 @@ public final class Alias {
         if (rv != null) {
             return rv;
         }else if (arg instanceof EntityPath<?>){    
-            return (EntityPathBase)arg;
+            return (EntityPathBase<D>)arg;
         } else if (arg instanceof ManagedObject) {
             return (EntityPathBase<D>) ((ManagedObject) arg).__mappedPath();
         } else {

File: querydsl-apt/src/main/java/com/mysema/query/apt/QuerydslAnnotationProcessor.java
Patch:
@@ -34,6 +34,8 @@
 @SupportedAnnotationTypes({"com.mysema.query.annotations.*"})
 @SupportedSourceVersion(SourceVersion.RELEASE_6)
 public class QuerydslAnnotationProcessor extends AbstractProcessor{
+    
+    private static final Boolean ALLOW_OTHER_PROCESSORS_TO_CLAIM_ANNOTATIONS = Boolean.FALSE;
 
     @Override
     public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
@@ -50,7 +52,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
 
         Processor processor = new Processor(processingEnv, roundEnv, configuration);
         processor.process();
-        return true;
+        return ALLOW_OTHER_PROCESSORS_TO_CLAIM_ANNOTATIONS;
     }
 
 }

File: querydsl-apt/src/main/java/com/mysema/query/apt/hibernate/HibernateAnnotationProcessor.java
Patch:
@@ -22,7 +22,7 @@
 @SupportedAnnotationTypes({"com.mysema.query.annotations.*","javax.persistence.*", "org.hibernate.annotations.*"})
 @SupportedSourceVersion(SourceVersion.RELEASE_6)
 public class HibernateAnnotationProcessor extends JPAAnnotationProcessor{
-
+    
     @Override
     protected DefaultConfiguration createConfiguration(RoundEnvironment roundEnv) throws ClassNotFoundException {
         return new HibernateConfiguration(roundEnv, processingEnv.getOptions(), entity, superType, embeddable, embedded, skip);

File: querydsl-apt/src/main/java/com/mysema/query/apt/jdo/JDOAnnotationProcessor.java
Patch:
@@ -32,6 +32,8 @@
 @SupportedSourceVersion(SourceVersion.RELEASE_6)
 public class JDOAnnotationProcessor extends AbstractProcessor{
     
+    private static final Boolean ALLOW_OTHER_PROCESSORS_TO_CLAIM_ANNOTATIONS = Boolean.FALSE;
+    
     private static final Set<String> KEYWORDS = new HashSet<String>(Arrays.asList(
             "AS","ASC", "ASCENDING","AVG",
             "BY","COUNT", "DESC","DESCENDING",
@@ -55,7 +57,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
             configuration.setUseGetters(false);
             Processor processor = new Processor(processingEnv, roundEnv, configuration);
             processor.process();
-            return true;
+            return ALLOW_OTHER_PROCESSORS_TO_CLAIM_ANNOTATIONS;
 
         } catch (ClassNotFoundException e) {
             throw new APTException(e.getMessage(), e);

File: querydsl-apt/src/main/java/com/mysema/query/apt/jpa/JPAAnnotationProcessor.java
Patch:
@@ -30,6 +30,8 @@
 @SupportedSourceVersion(SourceVersion.RELEASE_6)
 public class JPAAnnotationProcessor extends AbstractProcessor{
 
+    private static final Boolean ALLOW_OTHER_PROCESSORS_TO_CLAIM_ANNOTATIONS = Boolean.FALSE;
+    
     protected Class<? extends Annotation> entity, superType, embeddable, embedded, skip;
 
     @SuppressWarnings("unchecked")
@@ -46,7 +48,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
             DefaultConfiguration configuration = createConfiguration(roundEnv);
             Processor processor = new Processor(processingEnv, roundEnv, configuration);
             processor.process();
-            return true;
+            return ALLOW_OTHER_PROCESSORS_TO_CLAIM_ANNOTATIONS;
 
         } catch (ClassNotFoundException e) {
             throw new APTException(e.getMessage(), e);

File: querydsl-mongodb/src/main/java/com/mysema/query/mongodb/morphia/MorphiaAnnotationProcessor.java
Patch:
@@ -35,6 +35,8 @@
 @SupportedSourceVersion(SourceVersion.RELEASE_6)
 public class MorphiaAnnotationProcessor extends AbstractProcessor{
 
+    private static final Boolean ALLOW_OTHER_PROCESSORS_TO_CLAIM_ANNOTATIONS = Boolean.FALSE;
+    
     private Class<? extends Annotation> entities, entity, embedded, skip;
 
     @Override
@@ -52,7 +54,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
 
         Processor processor = new Processor(processingEnv, roundEnv, configuration);
         processor.process();
-        return true;
+        return ALLOW_OTHER_PROCESSORS_TO_CLAIM_ANNOTATIONS;
     }
 
 }

File: querydsl-core/src/main/java/com/mysema/query/alias/Alias.java
Patch:
@@ -149,6 +149,8 @@ public final class Alias {
         }
     }
     
+    @SuppressWarnings("unchecked")
+    @Nullable
     private static <D, P extends Path<D>> P getPath(D arg) {
         P rv = aliasFactory.<P>getCurrentAndReset();
         if (rv != null) {

File: querydsl-mongodb/src/test/java/com/mysema/query/mongodb/MongodbSerializerTest.java
Patch:
@@ -139,7 +139,7 @@ public void LessAndGreaterAndBetween() {
 
         assertQuery(
                 year.between(1, 10),
-                dbo("year", dbo("$goe", 1).append("$loe", 10))
+                dbo("year", dbo("$gte", 1).append("$lte", 10))
         );
     }
 

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColQueryFunctions.java
Patch:
@@ -19,7 +19,7 @@
 public final class ColQueryFunctions {
 
     public static <A extends Comparable<? super A>> boolean between(A a, A b, A c) {
-        return a.compareTo(b) > 0 && a.compareTo(c) < 0;
+        return a.compareTo(b) >= 0 && a.compareTo(c) <= 0;
     }
 
     @Nullable

File: querydsl-core/src/main/java/com/mysema/query/types/JavaTemplates.java
Patch:
@@ -40,7 +40,7 @@ public JavaTemplates() {
         add(Ops.CONTAINS_VALUE, "{0}.containsValue({1})");
 
         // Comparable
-        add(Ops.BETWEEN, "{1} < {0} && {0} < {2}");
+        add(Ops.BETWEEN, "{1} <= {0} && {0} <= {2}");
 
         // String
         add(Ops.CHAR_AT, "{0}.charAt({1})");

File: querydsl-core/src/main/java/com/mysema/query/types/OperationImpl.java
Patch:
@@ -54,13 +54,12 @@ public Operator<? super T> getOperator() {
         return operator;
     }
 
-    @SuppressWarnings("unchecked")
     @Override
     public boolean equals(Object o){
         if (o == this){
             return true;
         }else if (o instanceof Operation){
-            Operation op = (Operation)o;
+            Operation<?> op = (Operation<?>)o;
             return op.getOperator().equals(operator)
                 && op.getArgs().equals(args)
                 && op.getType().equals(type);

File: querydsl-mongodb/src/main/java/com/mysema/query/mongodb/MongodbSerializer.java
Patch:
@@ -162,8 +162,8 @@ else if (op == Ops.MATCHES_IC) {
         }
             
         else if (op == Ops.BETWEEN) {
-            BasicDBObject value = new BasicDBObject("$gt", asDBValue(expr, 1));
-            value.append("$lt", asDBValue(expr, 2));
+            BasicDBObject value = new BasicDBObject("$gte", asDBValue(expr, 1));
+            value.append("$lte", asDBValue(expr, 2));
             return asDBObject(asDBKey(expr, 0), value);
         }
 

File: querydsl-mongodb/src/test/java/com/mysema/query/mongodb/MongodbSerializerTest.java
Patch:
@@ -139,7 +139,7 @@ public void LessAndGreaterAndBetween() {
 
         assertQuery(
                 year.between(1, 10),
-                dbo("year", dbo("$gt", 1).append("$lt", 10))
+                dbo("year", dbo("$goe", 1).append("$loe", 10))
         );
     }
 

File: querydsl-collections/src/test/java/com/mysema/query/collections/QueryMetadataTest.java
Patch:
@@ -2,6 +2,8 @@
 
 import static org.junit.Assert.assertEquals;
 
+import java.util.Arrays;
+
 import org.junit.Test;
 
 import com.mysema.query.DefaultQueryMetadata;
@@ -18,7 +20,7 @@ public void Reusage(){
         
         ColQuery query = new ColQueryImpl(metadata);
         query.bind(cat, cats);
-        assertEquals(c3, query.list(cat));
+        assertEquals(Arrays.asList(c3), query.list(cat));
     }
 
 }

File: querydsl-core/src/test/java/com/mysema/query/codegen/BeanSerializerTest.java
Patch:
@@ -31,7 +31,7 @@ public class BeanSerializerTest {
     
     private EntityType type;
 
-    private Writer writer = new StringWriter();
+    private final Writer writer = new StringWriter();
 
     @Before
     public void setUp(){
@@ -112,7 +112,7 @@ public void Properties() throws IOException{
         System.err.println(str);
         for (String prop : Arrays.asList(
                 "String[] arrayField;",
-                "Boolean boolean_;",
+                "Boolean boolean$;",
                 "java.util.Collection<DomainClass> collection;",
                 "Comparable comparable;",
                 "java.util.Date date;",

File: querydsl-core/src/main/java/com/mysema/query/codegen/Property.java
Patch:
@@ -45,7 +45,7 @@ public Property(EntityType declaringType, String name, Type type, String[] inits
     }
 
     public Property(EntityType declaringType, String name, Type type, String[] inits, boolean inherited) {
-        this(declaringType, name, JavaSyntaxUtils.isReserved(name) ? (name + "_") : name, type, inits, inherited);
+        this(declaringType, name, JavaSyntaxUtils.isReserved(name) ? (name + "$") : name, type, inits, inherited);
     }
 
     public Property(EntityType declaringType, String name, String escapedName, Type type, String[] inits, boolean inherited) {
@@ -132,6 +132,7 @@ public boolean isInherited() {
         return inherited;
     }
 
+    @Override
     public String toString() {
         return declaringType.getFullName() + "." + name;
     }

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/hibernate/sql/AbstractHibernateSQLQuery.java
Patch:
@@ -25,7 +25,6 @@
 import com.mysema.query.jpa.hibernate.HibernateUtil;
 import com.mysema.query.jpa.hibernate.SessionHolder;
 import com.mysema.query.jpa.hibernate.StatelessSessionHolder;
-import com.mysema.query.sql.SQLCommonQuery;
 import com.mysema.query.sql.SQLTemplates;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.FactoryExpression;
@@ -36,7 +35,7 @@
  *
  * @param <Q>
  */
-public abstract class AbstractHibernateSQLQuery<Q extends AbstractHibernateSQLQuery<Q>> extends AbstractSQLQuery<Q> implements SQLCommonQuery<Q>{
+public abstract class AbstractHibernateSQLQuery<Q extends AbstractHibernateSQLQuery<Q>> extends AbstractSQLQuery<Q> {
 
     private static final Logger logger = LoggerFactory.getLogger(AbstractHibernateSQLQuery.class);
 

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/hibernate/sql/HibernateSQLQuery.java
Patch:
@@ -11,6 +11,7 @@
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.jpa.hibernate.DefaultSessionHolder;
 import com.mysema.query.jpa.hibernate.SessionHolder;
+import com.mysema.query.sql.SQLCommonQuery;
 import com.mysema.query.sql.SQLTemplates;
 
 /**
@@ -20,7 +21,7 @@
  * @author tiwe
  *
  */
-public final class HibernateSQLQuery extends AbstractHibernateSQLQuery<HibernateSQLQuery> {
+public final class HibernateSQLQuery extends AbstractHibernateSQLQuery<HibernateSQLQuery> implements SQLCommonQuery<HibernateSQLQuery> {
 
     public HibernateSQLQuery(Session session, SQLTemplates sqlTemplates) {
         super(session, sqlTemplates);

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/sql/AbstractJPASQLQuery.java
Patch:
@@ -22,7 +22,6 @@
 import com.mysema.query.jpa.impl.DefaultSessionHolder;
 import com.mysema.query.jpa.impl.JPASessionHolder;
 import com.mysema.query.jpa.impl.JPAUtil;
-import com.mysema.query.sql.SQLCommonQuery;
 import com.mysema.query.sql.SQLTemplates;
 import com.mysema.query.types.EntityPath;
 import com.mysema.query.types.Expression;
@@ -33,7 +32,7 @@
  * @param <Q>
  */
 //TODO : add support for constructor projections
-public abstract class AbstractJPASQLQuery<Q extends AbstractJPASQLQuery<Q>> extends AbstractSQLQuery<Q> implements SQLCommonQuery<Q>{
+public abstract class AbstractJPASQLQuery<Q extends AbstractJPASQLQuery<Q>> extends AbstractSQLQuery<Q> {
     
     private static final Logger logger = LoggerFactory.getLogger(AbstractJPASQLQuery.class);
 

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/sql/JPASQLQuery.java
Patch:
@@ -10,6 +10,7 @@
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.jpa.impl.DefaultSessionHolder;
 import com.mysema.query.jpa.impl.JPASessionHolder;
+import com.mysema.query.sql.SQLCommonQuery;
 import com.mysema.query.sql.SQLTemplates;
 
 /**
@@ -19,7 +20,7 @@
  * @author tiwe
  *
  */
-public final class JPASQLQuery extends AbstractJPASQLQuery<JPASQLQuery> {
+public final class JPASQLQuery extends AbstractJPASQLQuery<JPASQLQuery> implements SQLCommonQuery<JPASQLQuery> {
 
     public JPASQLQuery(EntityManager entityManager, SQLTemplates sqlTemplates) {
         super(entityManager, sqlTemplates);

File: querydsl-apt/src/test/java/com/mysema/query/domain/ReservedNamesInTypesTest.java
Patch:
@@ -1,15 +1,15 @@
 package com.mysema.query.domain;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertNotNull;
 
 import org.junit.Test;
 
 public class ReservedNamesInTypesTest {
     
     @Test
     public void Correctly_Escaped(){
-        assertNotNull(QPublic.public_);
-        assertNotNull(QPrivate.private_);
+        assertNotNull(QPublic.public$);
+        assertNotNull(QPrivate.private$);
     }
 
 }

File: querydsl-core/src/main/java/com/mysema/query/DefaultQueryMetadata.java
Patch:
@@ -80,7 +80,7 @@ public void addGroupBy(Expression<?>... o) {
     @Override
     public void addHaving(Predicate... o) {
         for (Predicate e : o){
-            if (!BooleanBuilder.class.isInstance(e) || ((BooleanBuilder)e).hasValue()){
+            if (e != null && (!BooleanBuilder.class.isInstance(e) || ((BooleanBuilder)e).hasValue())){
                 validate(e);
                 having.and(e);
             }
@@ -132,7 +132,7 @@ public void addProjection(Expression<?>... o) {
     @Override
     public void addWhere(Predicate... o) {
         for (Predicate e : o){
-            if (!BooleanBuilder.class.isInstance(e) || ((BooleanBuilder)e).hasValue()){
+            if (e != null && (!BooleanBuilder.class.isInstance(e) || ((BooleanBuilder)e).hasValue())){
                 validate(e);
                 where.and(e);
             }

File: querydsl-jpa/src/test/java/com/mysema/query/PackageVerification.java
Patch:
@@ -1,6 +1,7 @@
 package com.mysema.query;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 import java.io.File;
 import java.io.IOException;

File: querydsl-apt/src/main/java/com/mysema/query/apt/ElementHandler.java
Patch:
@@ -170,8 +170,8 @@ public EntityType handleNormalType(TypeElement e) {
         }
 
         // methods
-        for (ExecutableElement method : ElementFilter.methodsIn(elements)){
-            if (config.visitMethodProperties()){
+        if (config.visitMethodProperties()){
+            for (ExecutableElement method : ElementFilter.methodsIn(elements)){            
                 String name = method.getSimpleName().toString();
                 if (name.startsWith("get") && method.getParameters().isEmpty()){
                     name = BeanUtils.uncapitalize(name.substring(3));
@@ -187,7 +187,6 @@ public EntityType handleNormalType(TypeElement e) {
                      handleMethodProperty(entityType, name, method, properties, blockedProperties, types);
                 }
             }
-
         }
 
         for (Map.Entry<String,Property> entry : properties.entrySet()){

File: querydsl-apt/src/main/java/com/mysema/query/apt/Configuration.java
Patch:
@@ -29,6 +29,8 @@
  */
 public interface Configuration {
     
+    boolean isUnknownAsEmbedded();
+    
     TypeMappings getTypeMappings();
 
     VisitorConfig getConfig(TypeElement e, List<? extends Element> elements);

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/AbstractSQLQuery.java
Patch:
@@ -42,7 +42,8 @@ public AbstractSQLQuery(QueryMetadata metadata) {
 
     @Override
     public long count() {
-        return uniqueResult(Wildcard.countAsInt);
+        Number number = uniqueResult(Wildcard.countAsInt);
+        return number.longValue();
     }
 
     @Override

File: querydsl-jpa/src/test/java/com/mysema/query/_mysql/MySQLStandardTest.java
Patch:
@@ -5,15 +5,13 @@
  */
 package com.mysema.query._mysql;
 
-import org.junit.Ignore;
 import org.junit.runner.RunWith;
 
 import com.mysema.query.AbstractHibernateTest;
 import com.mysema.query.Target;
 import com.mysema.testutil.HibernateConfig;
 import com.mysema.testutil.HibernateTestRunner;
 
-@Ignore
 @RunWith(HibernateTestRunner.class)
 @HibernateConfig("mysql.properties")
 public class MySQLStandardTest extends AbstractHibernateTest{

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/support/ExtendedHSQLDialect.java
Patch:
@@ -5,9 +5,9 @@
  */
 package com.mysema.query.jpa.support;
 
-import org.hibernate.Hibernate;
 import org.hibernate.dialect.HSQLDialect;
 import org.hibernate.dialect.function.SQLFunctionTemplate;
+import org.hibernate.type.StandardBasicTypes;
 
 /**
  * @author tiwe
@@ -16,6 +16,6 @@
 public class ExtendedHSQLDialect extends HSQLDialect{
 
     public ExtendedHSQLDialect() {
-        registerFunction( "trim", new SQLFunctionTemplate( Hibernate.STRING, "trim(both from ?1)" ) );
+        registerFunction( "trim", new SQLFunctionTemplate( StandardBasicTypes.STRING, "trim(both from ?1)" ) );
     }
 }

File: querydsl-core/src/main/java/com/mysema/query/types/SubQueryExpressionImpl.java
Patch:
@@ -49,5 +49,5 @@ public int hashCode(){
     public <R, C> R accept(Visitor<R, C> v, C context) {
         return v.visit(this, context);
     }
-
+    
 }

File: querydsl-core/src/main/java/com/mysema/query/types/query/NumberSubQuery.java
Patch:
@@ -53,7 +53,7 @@ public BooleanExpression exists() {
         }
         return exists;
     }
-
+    
     @Override
     public QueryMetadata getMetadata() {
         return subQueryMixin.getMetadata();

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/JPQLSerializer.java
Patch:
@@ -37,8 +37,6 @@ public class JPQLSerializer extends SerializerBase<JPQLSerializer> {
             Ops.LT, Ops.LOE, Ops.GT, Ops.GOE, Ops.BETWEEN,
             Ops.BEFORE, Ops.AFTER, Ops.BOE, Ops.AOE));
 
-    private static final String SELECT_COUNT_DISTINCT = "select count(distinct ";
-
     private static final String COMMA = ", ";
 
     private static final String DELETE = "delete ";
@@ -55,6 +53,8 @@ public class JPQLSerializer extends SerializerBase<JPQLSerializer> {
 
     private static final String SELECT_COUNT = "select count(";
 
+    private static final String SELECT_COUNT_DISTINCT = "select count(distinct ";
+    
     private static final String SELECT_DISTINCT = "select distinct ";
 
     private static final String SET = "\nset ";

File: src/main/java/com/mysema/codegen/model/TypeAdapter.java
Patch:
@@ -19,7 +19,7 @@
 @Immutable
 public class TypeAdapter implements Type{
 
-    private final Type type;
+    protected final Type type;
 
     public TypeAdapter(Type type){
         this.type = type;

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLSubQuery.java
Patch:
@@ -165,11 +165,11 @@ public <E> Q rightJoin(ForeignKey<E> key, RelationalPath<E>  entity) {
     }
 
     public Q rightJoin(RelationalPath<?> target) {
-        return queryMixin.leftJoin(target);
+        return queryMixin.rightJoin(target);
     }
 
     public Q rightJoin(SubQueryExpression<?> target, Path<?> alias) {
-        return queryMixin.leftJoin(target, alias);
+        return queryMixin.rightJoin(target, alias);
     }
 
     @Override

File: src/main/java/com/mysema/codegen/support/ClassUtils.java
Patch:
@@ -26,7 +26,7 @@ public static String getFullName(Class<?> cl) {
         if (cl.isArray()){
             return getFullName(cl.getComponentType()) + "[]";
         }else{
-            return cl.getName();
+            return cl.getName().replace('$', '.');
         }
     }
 

File: querydsl-apt/src/main/java/com/mysema/query/apt/ElementHandler.java
Patch:
@@ -33,6 +33,7 @@
 import com.mysema.query.codegen.Property;
 import com.mysema.query.codegen.QueryTypeFactory;
 import com.mysema.query.codegen.TypeMappings;
+import com.mysema.util.BeanUtils;
 
 /**
  * ElementHandler is a an APT visitor for entity types
@@ -174,9 +175,9 @@ public EntityType handleNormalType(TypeElement e) {
             if (config.visitMethodProperties()){
                 String name = method.getSimpleName().toString();
                 if (name.startsWith("get") && method.getParameters().isEmpty()){
-                    name = StringUtils.uncapitalize(name.substring(3));
+                    name = BeanUtils.uncapitalize(name.substring(3));
                 }else if (name.startsWith("is") && method.getParameters().isEmpty()){
-                    name = StringUtils.uncapitalize(name.substring(2));
+                    name = BeanUtils.uncapitalize(name.substring(2));
                 }else{
                     continue;
                 }

File: querydsl-core/src/main/java/com/mysema/query/alias/PropertyAccessInvocationHandler.java
Patch:
@@ -22,13 +22,12 @@
 import net.sf.cglib.proxy.MethodInterceptor;
 import net.sf.cglib.proxy.MethodProxy;
 
-import org.apache.commons.lang.StringUtils;
-
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.ParametrizedExpression;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.PathMetadataFactory;
+import com.mysema.util.BeanUtils;
 import com.mysema.util.ReflectionUtils;
 
 /**
@@ -248,7 +247,7 @@ private <T> T newInstance(Class<T> type, Type genericType, Object parent, Object
     private String propertyNameForGetter(Method method) {
         String name = method.getName();
         name = name.startsWith("is") ? name.substring(2) : name.substring(3);
-        return StringUtils.uncapitalize(name);
+        return BeanUtils.uncapitalize(name);
     }
 
 }

File: querydsl-core/src/main/java/com/mysema/query/codegen/BeanSerializer.java
Patch:
@@ -15,6 +15,7 @@
 import com.mysema.codegen.CodeWriter;
 import com.mysema.codegen.model.Parameter;
 import com.mysema.codegen.model.Types;
+import com.mysema.util.BeanUtils;
 
 /**
  * BeanSerializer is a Serializer implementation which serializes EntityType instances into JavaBean classes

File: querydsl-core/src/main/java/com/mysema/util/ReflectionUtils.java
Patch:
@@ -19,7 +19,6 @@
 
 import javax.annotation.Nullable;
 
-import org.apache.commons.lang.StringUtils;
 
 /**
  * @author tiwe
@@ -60,7 +59,7 @@ private static Field getFieldOrNull(Class<?> beanClass, String propertyName){
 
     @Nullable
     private static Method getGetterOrNull(Class<?> beanClass, String name, Class<?> type){
-        String methodName = (type.equals(Boolean.class) ? "is" : "get") + StringUtils.capitalize(name);
+        String methodName = (type.equals(Boolean.class) ? "is" : "get") + BeanUtils.capitalize(name);
         while(beanClass != null && !beanClass.equals(Object.class)){
             try {
                 return beanClass.getDeclaredMethod(methodName);

File: querydsl-core/src/test/java/com/mysema/util/BeanUtilsTest.java
Patch:
@@ -1,9 +1,11 @@
-package com.mysema.query.codegen;
+package com.mysema.util;
 
 import static org.junit.Assert.assertEquals;
 
 import org.junit.Test;
 
+import com.mysema.util.BeanUtils;
+
 public class BeanUtilsTest {
 
     @Test

File: querydsl-apt/src/main/java/com/mysema/query/apt/QuerydslAnnotationProcessor.java
Patch:
@@ -45,7 +45,8 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
         Class<? extends Annotation> embedded = QueryEmbedded.class;
         Class<? extends Annotation> skip = QueryTransient.class;
         
-        DefaultConfiguration configuration = new DefaultConfiguration(roundEnv, processingEnv.getOptions(), Collections.<String>emptySet(), entities, entity, superType, embeddable, embedded, skip);
+        DefaultConfiguration configuration = new DefaultConfiguration(
+                roundEnv, processingEnv.getOptions(), Collections.<String>emptySet(), entities, entity, superType, embeddable, embedded, skip);
 
         Processor processor = new Processor(processingEnv, roundEnv, configuration);
         processor.process();

File: querydsl-core/src/main/java/com/mysema/query/codegen/EntitySerializer.java
Patch:
@@ -366,10 +366,10 @@ protected void introImports(CodeWriter writer, SerializerConfig config, EntityTy
 
         // import package of query type
         Type queryType = typeMappings.getPathType(model, model, true);
-        if (!queryType.getPackageName().isEmpty()
+        if (!model.getPackageName().isEmpty()
             && !queryType.getPackageName().equals(model.getPackageName()) 
             && !queryType.getSimpleName().equals(model.getSimpleName())){
-            writer.importPackages(queryType.getPackageName());
+            writer.importClasses(model.getFullName());
         }
         
         introDelegatePackages(writer, model);

File: querydsl-core/src/test/java/com/mysema/query/codegen/EntitySerializerTest.java
Patch:
@@ -89,7 +89,7 @@ public void Correct_Superclass() throws IOException {
 
         serializer.serialize(entityType, SimpleSerializerConfig.DEFAULT, new JavaWriter(writer));
 //        System.out.println(writer);
-        assertTrue(writer.toString().contains("public class QLocale extends EntityPathBase<java.util.Locale> {"));
+        assertTrue(writer.toString().contains("public class QLocale extends EntityPathBase<Locale> {"));
     }
 
     @Test

File: querydsl-apt/src/main/java/com/mysema/query/apt/Configuration.java
Patch:
@@ -16,6 +16,7 @@
 import javax.lang.model.element.VariableElement;
 
 import com.mysema.query.codegen.EntityType;
+import com.mysema.query.codegen.QueryTypeFactory;
 import com.mysema.query.codegen.Serializer;
 import com.mysema.query.codegen.SerializerConfig;
 import com.mysema.query.codegen.TypeMappings;
@@ -81,4 +82,6 @@ public interface Configuration {
 
     boolean isDefaultOverwrite();
 
+    QueryTypeFactory getQueryTypeFactory();
+
 }

File: querydsl-core/src/main/java/com/mysema/query/codegen/CodegenModule.java
Patch:
@@ -14,6 +14,8 @@ public class CodegenModule  extends AbstractModule{
     
     public static final String KEYWORDS = "keywords";
     
+    public static final String PACKAGE_SUFFIX = "packageSuffix";
+    
     @Override
     protected void configure() {
         bind(TypeMappings.class);
@@ -25,6 +27,7 @@ protected void configure() {
         
         bind(PREFIX, "Q");
         bind(SUFFIX, "");
+        bind(PACKAGE_SUFFIX, "");
     }
 
 }
\ No newline at end of file

File: querydsl-core/src/test/java/com/mysema/query/codegen/CustomTypeTest.java
Patch:
@@ -15,7 +15,7 @@
 
 public class CustomTypeTest {
 
-    private final QueryTypeFactory queryTypeFactory = new QueryTypeFactoryImpl("Q", "");
+    private final QueryTypeFactory queryTypeFactory = new QueryTypeFactoryImpl("Q", "", "");
 
     private final TypeMappings typeMappings = new TypeMappings();
 

File: querydsl-core/src/test/java/com/mysema/query/codegen/EmbeddableSerializerTest.java
Patch:
@@ -22,7 +22,7 @@
 
 public class EmbeddableSerializerTest {
 
-    private final QueryTypeFactory queryTypeFactory = new QueryTypeFactoryImpl("Q", "");
+    private final QueryTypeFactory queryTypeFactory = new QueryTypeFactoryImpl("Q", "", "");
 
     private final TypeMappings typeMappings = new TypeMappings();
 

File: querydsl-core/src/test/java/com/mysema/query/codegen/EntitySerializerTest.java
Patch:
@@ -27,7 +27,7 @@
 
 public class EntitySerializerTest {
 
-    private final QueryTypeFactory queryTypeFactory = new QueryTypeFactoryImpl("Q", "");
+    private final QueryTypeFactory queryTypeFactory = new QueryTypeFactoryImpl("Q", "", "");
 
     private final TypeMappings typeMappings = new TypeMappings();
 

File: querydsl-core/src/test/java/com/mysema/query/codegen/TypeMappingsTest.java
Patch:
@@ -19,7 +19,7 @@ public void GetPathType_Of_InnerClass(){
         TypeMappings typeMappings = new TypeMappings();
         EntityType model = new EntityType(new ClassType(TypeMappingsTest.class));
         EntityType type = new EntityType(new ClassType(Entity.class));
-        typeMappings.register(type, new QueryTypeFactoryImpl("Q","").create(type));
+        typeMappings.register(type, new QueryTypeFactoryImpl("Q","","").create(type));
 
         Type pathType = typeMappings.getPathType(type, model, false);
         assertEquals("QTypeMappingsTest_Entity", pathType.getSimpleName());

File: querydsl-core/src/main/java/com/mysema/query/codegen/ProjectionSerializer.java
Patch:
@@ -43,8 +43,8 @@ protected void intro(EntityType model, CodeWriter writer) throws IOException {
         Type queryType = typeMappings.getPathType(model, model, false);
 
         // package
-        if (!model.getPackageName().isEmpty()){
-            writer.packageDecl(model.getPackageName());
+        if (!queryType.getPackageName().isEmpty()){
+            writer.packageDecl(queryType.getPackageName());
         }
 
         // imports

File: querydsl-core/src/test/java/com/mysema/query/codegen/BeanSerializerTest.java
Patch:
@@ -35,7 +35,7 @@ public class BeanSerializerTest {
     @Before
     public void setUp(){
         typeModel = new SimpleType(TypeCategory.ENTITY, "com.mysema.query.DomainClass", "com.mysema.query", "DomainClass", false,false);
-        type = new EntityType("Q", "", typeModel);                    
+        type = new EntityType(typeModel);                    
     }
     
     @Test

File: querydsl-core/src/test/java/com/mysema/query/codegen/ProjectionSerializerTest.java
Patch:
@@ -23,7 +23,7 @@ public class ProjectionSerializerTest {
     @Test
     public void Constructors() throws IOException{
         Type typeModel = new SimpleType(TypeCategory.ENTITY, "com.mysema.query.DomainClass", "com.mysema.query", "DomainClass", false,false);
-        EntityType type = new EntityType("Q","",  typeModel);
+        EntityType type = new EntityType(typeModel);
 
         // constructor
         Parameter firstName = new Parameter("firstName", Types.STRING);

File: querydsl-core/src/test/java/com/mysema/query/codegen/PropertyTest.java
Patch:
@@ -18,7 +18,7 @@ public class PropertyTest {
     @Test
     public void test(){
         Type typeModel = new SimpleType(TypeCategory.ENTITY, "com.mysema.query.DomainClass", "com.mysema.query", "DomainClass", false,false);
-        EntityType type = new EntityType("Q","",  typeModel);
+        EntityType type = new EntityType(typeModel);
         Property p1 = new Property(type, "property", type, new String[0]);
         Property p2 = new Property(type, "property", type, new String[0]);
         assertEquals(p1, p1);

File: querydsl-sql/src/main/java/com/mysema/query/sql/ddl/ForeignKeyBuilder.java
Patch:
@@ -37,7 +37,7 @@ public ForeignKeyBuilder(CreateTableClause clause, SQLTemplates templates, List<
     }
 
     public CreateTableClause references(String table, String... parentColumns) {
-        ForeignKeyData foreignKey = new ForeignKeyData(name, templates.quoteIdentifier(table));
+        ForeignKeyData foreignKey = new ForeignKeyData(name, templates.quoteIdentifier(table), null);
         for (int i = 0; i < parentColumns.length; i++){
             foreignKey.add(
                 templates.quoteIdentifier(foreignColumns[i]), 

File: querydsl-sql/src/test/java/com/mysema/query/sql/CustomTypesTest.java
Patch:
@@ -57,13 +57,11 @@ public void Export() throws SQLException, IOException{
         // create exporter
         String namePrefix = "Q";
         NamingStrategy namingStrategy = new DefaultNamingStrategy();
-        MetaDataSerializer serializer = new MetaDataSerializer(namePrefix, namingStrategy);
         MetaDataExporter exporter = new MetaDataExporter();
         exporter.setNamePrefix(namePrefix);
         exporter.setPackageName("test");
         exporter.setTargetFolder(new File("target/customExport"));
         exporter.setNamingStrategy(namingStrategy);
-        exporter.setSerializer(serializer);
         exporter.setConfiguration(configuration);
         
         // export

File: querydsl-sql/src/test/java/com/mysema/query/sql/support/KeyDataFactoryTest.java
Patch:
@@ -15,6 +15,7 @@
 import org.junit.Test;
 
 import com.mysema.query.AbstractJDBCTest;
+import com.mysema.query.sql.DefaultNamingStrategy;
 
 
 public class KeyDataFactoryTest extends AbstractJDBCTest{
@@ -38,7 +39,7 @@ public void test() throws SQLException{
                 + "CONSTRAINT FK_survey FOREIGN KEY (survey_id, survey_name) REFERENCES survey(id,name), "
                 + "CONSTRAINT FK_superior FOREIGN KEY (superior_id) REFERENCES employee(id))");
         
-        KeyDataFactory keyDataFactory = new KeyDataFactory();
+        KeyDataFactory keyDataFactory = new KeyDataFactory(new DefaultNamingStrategy(), "Q","","test");
         
         DatabaseMetaData md = connection.getMetaData();
         

File: querydsl-mongodb/src/main/java/com/mysema/query/mongodb/morphia/MorphiaAnnotationProcessor.java
Patch:
@@ -23,7 +23,7 @@
 import com.mysema.query.annotations.QueryEntities;
 import com.mysema.query.apt.DefaultConfiguration;
 import com.mysema.query.apt.Processor;
-import com.mysema.query.mongodb.DoubleArray;
+import com.mysema.query.mongodb.Point;
 
 /**
  * Annotation processor to create Querydsl query types for Morphia annoated classes
@@ -48,7 +48,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
         DefaultConfiguration configuration = new DefaultConfiguration(
                 roundEnv, processingEnv.getOptions(), Collections.<String>emptySet(),
                 entities, entity, null, null, embedded, skip);
-        configuration.addCustomType(Double[].class, DoubleArray.class);
+        configuration.addCustomType(Double[].class, Point.class);
 
         Processor processor = new Processor(processingEnv, roundEnv, configuration);
         processor.process();

File: querydsl-mongodb/src/main/java/com/mysema/query/mongodb/morphia/MorphiaAnnotationProcessor.java
Patch:
@@ -23,6 +23,7 @@
 import com.mysema.query.annotations.QueryEntities;
 import com.mysema.query.apt.DefaultConfiguration;
 import com.mysema.query.apt.Processor;
+import com.mysema.query.mongodb.DoubleArray;
 
 /**
  * Annotation processor to create Querydsl query types for Morphia annoated classes
@@ -47,6 +48,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
         DefaultConfiguration configuration = new DefaultConfiguration(
                 roundEnv, processingEnv.getOptions(), Collections.<String>emptySet(),
                 entities, entity, null, null, embedded, skip);
+        configuration.addCustomType(Double[].class, DoubleArray.class);
 
         Processor processor = new Processor(processingEnv, roundEnv, configuration);
         processor.process();

File: querydsl-core/src/main/java/com/mysema/query/support/ProjectableQuery.java
Patch:
@@ -132,6 +132,9 @@ public final Object[] uniqueResult(Expression<?> first, Expression<?> second, Ex
     @Override
     public Object[] uniqueResult(Expression<?>[] args) {
         queryMixin.setUnique(true);
+        if (queryMixin.getMetadata().getModifiers().getLimit() == null){
+            limit(2l);
+        }
         return getUniqueResult(iterate(args));
     }
 

File: querydsl-apt/src/main/java/com/mysema/query/apt/Processor.java
Patch:
@@ -316,6 +316,9 @@ private void mergeTypes(Map<String, EntityType> types, Deque<Type> superTypes) {
             Type superType = superTypes.pop();
             if (!types.containsKey(superType.getFullName())  && !allSupertypes.containsKey(superType.getFullName())){
                 TypeElement typeElement = env.getElementUtils().getTypeElement(superType.getFullName());
+                if (typeElement == null){
+                    throw new IllegalStateException("Found no type for " + superType.getFullName());
+                }
                 EntityType entityType = elementHandler.handleNormalType(typeElement);
                 if (entityType.getSuperType() != null){
                     superTypes.push(entityType.getSuperType().getType());

File: querydsl-mongodb/src/test/java/com/mysema/query/mongodb/MongodbQueryTest.java
Patch:
@@ -60,7 +60,7 @@ public void before() {
     public void UniqueResult(){
         assertEquals("Jantunen", where(user.firstName.eq("Jaakko")).uniqueResult().getLastName());
     }
-    
+
     @Test(expected=NonUniqueResultException.class)
     public void UniqueResultContract(){
         where(user.firstName.isNotNull()).uniqueResult();
@@ -225,7 +225,7 @@ public void Iterate() {
     public void UniqueResultAndLimitAndOffset() {
         MongodbQuery<User> q = query().where(user.firstName.startsWith("Ja")).orderBy(user.age.asc());
         assertEquals(4, q.list().size());
-        assertEquals(u1, q.uniqueResult());
+        assertEquals(u1, q.list().get(0));
     }
 
     @Test

File: querydsl-apt/src/main/java/com/mysema/query/apt/Configuration.java
Patch:
@@ -50,6 +50,8 @@ public interface Configuration {
     Serializer getEntitySerializer();
 
     String getNamePrefix();
+    
+    String getNameSuffix();
 
     SerializerConfig getSerializerConfig(EntityType entityType);
 

File: querydsl-apt/src/main/java/com/mysema/query/apt/ElementHandler.java
Patch:
@@ -201,7 +201,7 @@ public EntityType handleNormalType(TypeElement e) {
 
     public EntityType handleProjectionType(TypeElement e) {
         Type c = typeFactory.getType(e.asType(), true);
-        EntityType entityType = new EntityType(configuration.getNamePrefix(), c.as(TypeCategory.ENTITY));
+        EntityType entityType = new EntityType(configuration.getNamePrefix(), configuration.getNameSuffix(), c.as(TypeCategory.ENTITY));
         List<? extends Element> elements = e.getEnclosedElements();
         handleConstructors(entityType, elements);
         return entityType;

File: querydsl-apt/src/main/java/com/mysema/query/apt/ExtendedTypeFactory.java
Patch:
@@ -186,7 +186,7 @@ && isImplemented(typeElement, comparableType)){
         // entity type
         for (Class<? extends Annotation> entityAnn : entityAnnotations){
             if (typeElement.getAnnotation(entityAnn) != null){
-                return new EntityType(configuration.getNamePrefix(), type);
+                return new EntityType(configuration.getNamePrefix(), configuration.getNameSuffix(), type);
             }
         }
         return type;
@@ -274,7 +274,7 @@ private EntityType createEntityType(TypeMirror typeMirror, List<String> key, boo
             if (value instanceof EntityType){
                 entityType = (EntityType)value;
             }else{
-                entityType = new EntityType(configuration.getNamePrefix(), value);
+                entityType = new EntityType(configuration.getNamePrefix(), configuration.getNameSuffix(), value);
             }
             entityTypeCache.put(key, entityType);
 
@@ -307,7 +307,7 @@ private Type createEnumType(DeclaredType declaredType, TypeElement typeElement,
 
         for (Class<? extends Annotation> entityAnn : entityAnnotations){
             if (typeElement.getAnnotation(entityAnn) != null){
-                return new EntityType(configuration.getNamePrefix(), enumType);
+                return new EntityType(configuration.getNamePrefix(), configuration.getNameSuffix(), enumType);
             }
         }
         return enumType;

File: querydsl-core/src/test/java/com/mysema/query/codegen/BeanSerializerTest.java
Patch:
@@ -35,7 +35,7 @@ public class BeanSerializerTest {
     @Before
     public void setUp(){
         typeModel = new SimpleType(TypeCategory.ENTITY, "com.mysema.query.DomainClass", "com.mysema.query", "DomainClass", false,false);
-        type = new EntityType("Q", typeModel);                    
+        type = new EntityType("Q", "", typeModel);                    
     }
     
     @Test

File: querydsl-core/src/test/java/com/mysema/query/codegen/EntityTypeTest.java
Patch:
@@ -24,7 +24,7 @@ public class EntityTypeTest {
     public void Annotation() throws IOException{
         Annotation annotation = new QueryExtensionsImpl(Object.class);
         ClassType typeModel = new ClassType(TypeCategory.ENTITY, Object.class);
-        EntityType entityModel = new EntityType("Q", typeModel);
+        EntityType entityModel = new EntityType("Q", "", typeModel);
         entityModel.addAnnotation(annotation);
 
         TypeMappings typeMappings = new TypeMappings();
@@ -37,7 +37,7 @@ public void Annotation() throws IOException{
     @Test
     public void UncapSimpleName_Escaped(){
         ClassType typeModel = new ClassType(TypeCategory.ENTITY, Object.class);
-        EntityType entityModel = new EntityType("Q", typeModel);
+        EntityType entityModel = new EntityType("Q","",  typeModel);
         assertEquals("object", entityModel.getUncapSimpleName());
         
         entityModel.addProperty(new Property(entityModel, "object", typeModel));
@@ -47,7 +47,7 @@ public void UncapSimpleName_Escaped(){
     @Test
     public void UncapSimpleName_Escaped2(){
         ClassType typeModel = new ClassType(TypeCategory.ENTITY, Object.class);
-        EntityType entityModel = new EntityType("Q", typeModel);
+        EntityType entityModel = new EntityType("Q", "", typeModel);
         assertEquals("object", entityModel.getUncapSimpleName());
         
         entityModel.addProperty(new Property(entityModel, "OBJECT", "object", typeModel, new String[0], false));

File: querydsl-core/src/test/java/com/mysema/query/codegen/MethodTest.java
Patch:
@@ -31,7 +31,7 @@ public void test(){
     public void CreateCopy(){
         Method method = new Method(typeFactory.create(String.class), "method", "abc", typeFactory.create(String.class));
         Type typeModel = new SimpleType(TypeCategory.ENTITY, "com.mysema.query.DomainClass", "com.mysema.query", "DomainClass", false,false);
-        EntityType type = new EntityType("Q", typeModel);
+        EntityType type = new EntityType("Q", "", typeModel);
         assertNotNull(method.createCopy(type));
     }
 

File: querydsl-core/src/test/java/com/mysema/query/codegen/ProjectionSerializerTest.java
Patch:
@@ -23,7 +23,7 @@ public class ProjectionSerializerTest {
     @Test
     public void Constructors() throws IOException{
         Type typeModel = new SimpleType(TypeCategory.ENTITY, "com.mysema.query.DomainClass", "com.mysema.query", "DomainClass", false,false);
-        EntityType type = new EntityType("Q", typeModel);
+        EntityType type = new EntityType("Q","",  typeModel);
 
         // constructor
         Parameter firstName = new Parameter("firstName", Types.STRING);

File: querydsl-core/src/test/java/com/mysema/query/codegen/PropertyTest.java
Patch:
@@ -18,7 +18,7 @@ public class PropertyTest {
     @Test
     public void test(){
         Type typeModel = new SimpleType(TypeCategory.ENTITY, "com.mysema.query.DomainClass", "com.mysema.query", "DomainClass", false,false);
-        EntityType type = new EntityType("Q", typeModel);
+        EntityType type = new EntityType("Q","",  typeModel);
         Property p1 = new Property(type, "property", type, new String[0]);
         Property p2 = new Property(type, "property", type, new String[0]);
         assertEquals(p1, p1);

File: querydsl-core/src/test/java/com/mysema/query/codegen/SerializerTest.java
Patch:
@@ -50,7 +50,7 @@ public void setUp(){
 
         // type
         Type typeModel = new SimpleType(TypeCategory.ENTITY, "com.mysema.query.DomainClass", "com.mysema.query", "DomainClass", false, false);
-        type = new EntityType("Q", typeModel);
+        type = new EntityType("Q", "", typeModel);
 
         // property
         type.addProperty(new Property(type, "entityField", type, new String[0]));

File: querydsl-sql/src/test/java/com/mysema/query/sql/DefaultNamingStrategyTest.java
Patch:
@@ -21,7 +21,7 @@ public class DefaultNamingStrategyTest {
     
     @Before
     public void setUp(){
-        entityModel = new EntityType("Q", Types.OBJECT);
+        entityModel = new EntityType("Q", "",Types.OBJECT);
         entityModel.addAnnotation(new TableImpl("OBJECT"));
     }
     

File: querydsl-sql/src/test/java/com/mysema/query/sql/MetaDataTest.java
Patch:
@@ -24,7 +24,7 @@ public void setUp(){
         
         Type classTypeModel = new SimpleType(TypeCategory.ENTITY,
                 packageName + "." + className, packageName, className, false, false);
-        classModel = new EntityType(namePrefix, classTypeModel);
+        classModel = new EntityType(namePrefix, "", classTypeModel);
         classModel.addAnnotation(new TableImpl(namingStrategy.normalizeTableName(tableName)));        
     }
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/OriginalNamingStrategyTest.java
Patch:
@@ -11,7 +11,7 @@ public class OriginalNamingStrategyTest {
 
     private NamingStrategy namingStrategy = new OriginalNamingStrategy();
     
-    private EntityType entityModel = new EntityType("Q", Types.OBJECT);
+    private EntityType entityModel = new EntityType("Q", "", Types.OBJECT);
     
     @Test
     public void GetClassName() {

File: querydsl-core/src/main/java/com/mysema/query/codegen/TypeMappings.java
Patch:
@@ -119,10 +119,10 @@ public Type getQueryType(Type type, EntityType model, Type exprType, boolean raw
             String packageName = type.getPackageName();
             String simpleName;
             if (type.getPackageName().isEmpty()){
-                simpleName = model.getPrefix()+type.getFullName().replace('.', '_');
+                simpleName = model.getPrefix()+type.getFullName().replace('.', '_')+model.getSuffix();
                 return new SimpleType(category, simpleName, "", simpleName, false, false);
             }else{                
-                simpleName = model.getPrefix()+type.getFullName().substring(packageName.length()+1).replace('.', '_');
+                simpleName = model.getPrefix()+type.getFullName().substring(packageName.length()+1).replace('.', '_')+model.getSuffix();
                 return new SimpleType(category, packageName+"."+simpleName, packageName, simpleName, false, false);
             }
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/MetaDataTest.java
Patch:
@@ -20,7 +20,7 @@ public void setUp(){
         String packageName = "com.myproject.domain";
         String tableName = "vwServiceName";
         String namePrefix = "Q";
-        String className = namingStrategy.getClassName(namePrefix, tableName);
+        String className = namingStrategy.getClassName(namePrefix, "", tableName);
         
         Type classTypeModel = new SimpleType(TypeCategory.ENTITY,
                 packageName + "." + className, packageName, className, false, false);

File: querydsl-core/src/main/java/com/mysema/query/support/DetachableMixin.java
Patch:
@@ -9,14 +9,14 @@
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Predicate;
-import com.mysema.query.types.Wildcard;
 import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.ComparableExpression;
 import com.mysema.query.types.expr.DateExpression;
 import com.mysema.query.types.expr.DateTimeExpression;
 import com.mysema.query.types.expr.NumberExpression;
 import com.mysema.query.types.expr.StringExpression;
 import com.mysema.query.types.expr.TimeExpression;
+import com.mysema.query.types.expr.Wildcard;
 import com.mysema.query.types.query.*;
 
 /**
@@ -35,7 +35,7 @@ public DetachableMixin(QueryMixin<?> queryMixin){
 
     @Override
     public NumberSubQuery<Long> count() {
-        return new NumberSubQuery<Long>(Long.class, projection(Wildcard.all));
+        return new NumberSubQuery<Long>(Long.class, projection(Wildcard.count));
     }
 
     @Override

File: querydsl-jdo/src/main/java/com/mysema/query/jdo/sql/AbstractSQLQuery.java
Patch:
@@ -16,7 +16,7 @@
 import com.mysema.query.types.Predicate;
 import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.TemplateExpressionImpl;
-import com.mysema.query.types.Wildcard;
+import com.mysema.query.types.expr.Wildcard;
 
 /**
  * Base class for JDO based SQLQuery implementations

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/AbstractSQLQuery.java
Patch:
@@ -16,7 +16,7 @@
 import com.mysema.query.types.Predicate;
 import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.TemplateExpressionImpl;
-import com.mysema.query.types.Wildcard;
+import com.mysema.query.types.expr.Wildcard;
 
 /**
  * Abstract super class for SQLQuery implementation for JPA and Hibernate

File: querydsl-sql/src/main/java/com/mysema/query/sql/JavaTypeMapping.java
Patch:
@@ -72,7 +72,7 @@ public <T> Type<T> getType(Class<T> clazz){
             }
         }
         if (resolvedType == null) {
-            throw new IllegalArgumentException("Got not type for " + clazz.getName());
+            throw new IllegalArgumentException("Got not user type for " + clazz.getName());
         } else {
             return (Type<T>) resolvedType;
         }
@@ -82,14 +82,14 @@ public <T> Type<T> getType(Class<T> clazz){
     private Type<?> findType(Class<?> clazz) {
         //Look for a registered type in the class hierarchy
         Class<?> cl = clazz;
-        while (!cl.equals(Object.class)){
+        do{
             if (typeByClass.containsKey(cl)){
                 return typeByClass.get(cl);
             }else if (defaultTypes.containsKey(cl)){
                 return defaultTypes.get(cl);
             }    
             cl = cl.getSuperclass(); 
-        }
+        }while(!cl.equals(Object.class));
         
         //Look for a registered type in any implemented interfaces
         Set<Class<?>> interfaces = ReflectionUtils.getImplementedInterfaces(clazz);

File: querydsl-core/src/main/java/com/mysema/query/types/QBean.java
Patch:
@@ -166,19 +166,19 @@ private void initFields() {
     @Override
     public T newInstance(Object... a){
         try {
-            Object[] args = FactoryExpressionUtils.compress(this.args, a);
+            Object[] compressedArgs = FactoryExpressionUtils.compress(this.args, a);
             T rv = getType().newInstance();
             if (fieldAccess){
                 for (Map.Entry<String, ? extends Expression<?>> entry : bindings.entrySet()){
-                    Object value = args[this.args.indexOf(entry.getValue())];
+                    Object value = compressedArgs[this.args.indexOf(entry.getValue())];
                     if (value != null){
                         fields.get(entry.getKey()).set(rv, value);
                     }
                 }
             }else{
                 BeanMap beanMap = new BeanMap(rv);
                 for (Map.Entry<String, ? extends Expression<?>> entry : bindings.entrySet()){
-                    Object value = args[this.args.indexOf(entry.getValue())];
+                    Object value = compressedArgs[this.args.indexOf(entry.getValue())];
                     if (value != null){
                         beanMap.put(entry.getKey(), value);    
                     }                

File: querydsl-core/src/main/java/com/mysema/query/types/Wildcard.java
Patch:
@@ -13,7 +13,9 @@
 public final class Wildcard {
 
     public static final Expression<Object[]> all = TemplateExpressionImpl.create(Object[].class, "*");
-    
+
     public static final Expression<Long> count = OperationImpl.create(Long.class, Ops.AggOps.COUNT_ALL_AGG);
 
+    public static final Expression<Integer> countAsInt = OperationImpl.create(Integer.class, Ops.AggOps.COUNT_ALL_AGG);
+
 }

File: querydsl-jdo/src/main/java/com/mysema/query/jdo/sql/AbstractSQLQuery.java
Patch:
@@ -37,7 +37,7 @@ public AbstractSQLQuery(QueryMetadata metadata) {
 
     @Override
     public long count() {
-        return uniqueResult(Wildcard.count);
+        return uniqueResult(Wildcard.countAsInt);
     }
 
     @Override
@@ -48,7 +48,7 @@ public boolean exists(){
     public T from(Expression<?>... args) {
         return queryMixin.from(args);
     }
-    
+
     @SuppressWarnings("unchecked")
     public T from(SubQueryExpression<?> subQuery, Path<?> alias){
         return queryMixin.from(ExpressionUtils.as((Expression)subQuery, alias));

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/AbstractSQLQuery.java
Patch:
@@ -37,7 +37,7 @@ public AbstractSQLQuery(QueryMetadata metadata) {
 
     @Override
     public long count() {
-        return uniqueResult(Wildcard.count);
+        return uniqueResult(Wildcard.countAsInt);
     }
 
     @Override
@@ -48,7 +48,7 @@ public boolean exists(){
     public T from(Expression<?>... args) {
         return queryMixin.from(args);
     }
-    
+
     @SuppressWarnings("unchecked")
     public T from(SubQueryExpression<?> subQuery, Path<?> alias){
         return queryMixin.from(ExpressionUtils.as((Expression)subQuery, alias));

File: querydsl-sql/src/main/java/com/mysema/query/sql/Wildcard.java
Patch:
@@ -12,9 +12,12 @@
 /**
  * Wildcard provides shortcuts for the wildcard (*) and wildcard count (count(*)) expressions
  * 
+ * @deprecated use com.mysema.query.types.Wildcard instead
+ * 
  * @author sasa
  *
  */
+@Deprecated
 public final class Wildcard {
 
     private static final long serialVersionUID = -675749944676437551L;

File: querydsl-lucene/src/test/java/com/mysema/query/LuceneSerializerTest.java
Patch:
@@ -637,7 +637,7 @@ private boolean unsupportedOperation(BooleanExpression filter) {
 
     @Test
     public void various() throws Exception{
-        MatchingFilters filters = new MatchingFilters(Module.LUCENE, Target.LUCENE);
+        MatchingFiltersFactory filters = new MatchingFiltersFactory(Module.LUCENE, Target.LUCENE);
         for (BooleanExpression filter : filters.string(title, StringConstant.create("jurassic park"))){
             if (unsupportedOperation(filter)) {
                 continue;

File: querydsl-jpa/src/test/java/com/mysema/query/AbstractStandardTest.java
Patch:
@@ -77,7 +77,7 @@ public QProjection(StringExpression str, QCat cat){
 
     private final java.sql.Date date;
 
-    private final Projections projections = new Projections(Module.HQL, getTarget()){
+    private final ProjectionsFactory projections = new ProjectionsFactory(Module.HQL, getTarget()){
         @Override
         public <A,Q extends SimpleExpression<A>> Collection<Expression<?>> list(ListPath<A,Q> expr, ListExpression<A,Q> other, A knownElement){
             // NOTE : expr.get(0) is only supported in the where clause
@@ -88,7 +88,7 @@ public <A,Q extends SimpleExpression<A>> Collection<Expression<?>> list(ListPath
     private final List<Cat> savedCats = new ArrayList<Cat>();
 
     private final QueryExecution standardTest = new QueryExecution(
-            projections, new Filters(projections, Module.HQL, getTarget()), new MatchingFilters(Module.HQL, getTarget())){
+            projections, new FilterFactory(projections, Module.HQL, getTarget()), new MatchingFiltersFactory(Module.HQL, getTarget())){
 
         @Override
         protected Pair<Projectable, List<Expression<?>>> createQuery() {
@@ -284,7 +284,7 @@ public void Contains1(){
     
     @Test
     public void Contains2(){
-        catQuery().where(cat.kittens.contains(savedCats.get(0))).count();
+        assertEquals(1l, catQuery().where(cat.kittens.contains(savedCats.get(0))).count());
     }
 
     @Test

File: querydsl-lucene/src/main/java/com/mysema/query/lucene/LuceneSerializer.java
Patch:
@@ -224,8 +224,7 @@ protected Query eq(String field, String[] terms, boolean ignoreCase) {
     protected Query in(Operation<?> operation, QueryMetadata metadata, boolean ignoreCase) {
         Path<?> path = getPath(operation.getArg(0));
         String field = toField(path);
-        @SuppressWarnings({ "rawtypes" })
-        Collection values = (Collection) ((Constant) operation.getArg(1)).getConstant();
+        Collection<?> values = (Collection<?>) ((Constant<?>) operation.getArg(1)).getConstant();
         BooleanQuery bq = new BooleanQuery();
         for (Object value : values) {
             // FIXME : use proper splitting
@@ -357,7 +356,7 @@ protected Query ge(Operation<?> operation, QueryMetadata metadata) {
                 metadata);
     }
 
-    @SuppressWarnings({"rawtypes", "unchecked"})
+    @SuppressWarnings({"unchecked"})
     protected Query range(Path<?> leftHandSide, String field, @Nullable Expression<?> min, @Nullable Expression<?> max, boolean minInc, boolean maxInc, QueryMetadata metadata) {
         if (min != null && Number.class.isAssignableFrom(min.getType()) || max != null
                 && Number.class.isAssignableFrom(max.getType())) {

File: querydsl-lucene/src/main/java/com/mysema/query/lucene/TypedQuery.java
Patch:
@@ -12,7 +12,8 @@
 /**
  * TypedQuery is a typed query implementation for Lucene queries.
  * 
- * @author vema
+ * @author laim
+ * @author tiwe
  */
 public class TypedQuery<T> extends AbstractLuceneQuery<T, TypedQuery<T>> {
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ListExpression.java
Patch:
@@ -20,7 +20,7 @@
  * @param <E> component type
  * @see java.util.List
  */
-public interface ListExpression<E, Q extends SimpleExpression<? extends E>> extends CollectionExpression<List<E>,E> {
+public interface ListExpression<E, Q extends SimpleExpression<? super E>> extends CollectionExpression<List<E>, E> {
 
     /**
      * Indexed access

File: querydsl-core/src/main/java/com/mysema/query/types/path/CollectionPath.java
Patch:
@@ -26,7 +26,7 @@
  * @param <E> component type
  * @param <Q> component query type
  */
-public class CollectionPath<E, Q extends SimpleExpression<E>> extends CollectionPathBase<Collection<E>, E, Q>{    
+public class CollectionPath<E, Q extends SimpleExpression<? super E>> extends CollectionPathBase<Collection<E>, E, Q>{    
 
     private static final long serialVersionUID = -4982311799113762600L;
 
@@ -56,7 +56,7 @@ public CollectionPath(Class<? super E> type, Class<Q> queryType, PathMetadata<?>
     }
 
     @Override
-    public <R,C> R accept(Visitor<R,C> v, C context) {
+    public <R, C> R accept(Visitor<R, C> v, C context) {
         return v.visit(this, context);
     }
     

File: querydsl-core/src/main/java/com/mysema/query/types/path/CollectionPathBase.java
Patch:
@@ -20,7 +20,7 @@
  * @param <E> component type
  * @param <Q> component query type
  */
-public abstract class CollectionPathBase<C extends Collection<E>, E, Q extends SimpleExpression<E>> 
+public abstract class CollectionPathBase<C extends Collection<E>, E, Q extends SimpleExpression<? super E>> 
     extends CollectionExpressionBase<C, E> implements Path<C>{
 
     private static final long serialVersionUID = -9004995667633601298L;

File: querydsl-core/src/main/java/com/mysema/query/types/path/ListPath.java
Patch:
@@ -30,7 +30,7 @@
  * @param <E> component type
  * @param <Q> component query type
  */
-public class ListPath<E, Q extends SimpleExpression<E>> extends CollectionPathBase<List<E>, E, Q> implements ListExpression<E, Q> {
+public class ListPath<E, Q extends SimpleExpression<? super E>> extends CollectionPathBase<List<E>, E, Q> implements ListExpression<E, Q> {
 
     private static final long serialVersionUID = 3302301599074388860L;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/MapPath.java
Patch:
@@ -30,7 +30,7 @@
  * @param <K> key type
  * @param <V> value type
  */
-public class MapPath<K, V, E extends SimpleExpression<V>> extends MapExpressionBase<K, V> implements Path<Map<K, V>> {
+public class MapPath<K, V, E extends SimpleExpression<? super V>> extends MapExpressionBase<K, V, E> implements Path<Map<K, V>> {
 
     private static final long serialVersionUID = -9113333728412016832L;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/SetPath.java
Patch:
@@ -26,7 +26,7 @@
  * @param <E> component type
  * @param <Q> component query type
  */
-public class SetPath<E, Q extends SimpleExpression<E>> extends CollectionPathBase<Set<E>,E, Q> {
+public class SetPath<E, Q extends SimpleExpression<? super E>> extends CollectionPathBase<Set<E>, E, Q> {
 
     private static final long serialVersionUID = 4145848445507037373L;
 

File: querydsl-core/src/test/java/com/mysema/query/Filters.java
Patch:
@@ -148,7 +148,7 @@ public <A, Q extends SimpleExpression<A>> Collection<BooleanExpression> list(Lis
         return rv;
     }
 
-    public <K,V> Collection<BooleanExpression> map(MapExpressionBase<K,V> expr, MapExpression<K,V> other, K knownKey, V knownValue) {
+    public <K,V> Collection<BooleanExpression> map(MapExpressionBase<K,V,?> expr, MapExpression<K,V> other, K knownKey, V knownValue) {
         HashSet<BooleanExpression> rv = new HashSet<BooleanExpression>();
         rv.add(expr.containsKey(knownKey));
         rv.add(expr.containsValue(knownValue));

File: querydsl-core/src/test/java/com/mysema/query/MatchingFilters.java
Patch:
@@ -122,7 +122,7 @@ public <A,Q extends SimpleExpression<A>> Collection<BooleanExpression> list(List
         return collection(expr, other, knownElement, missingElement);
     }
 
-    public <K,V> Collection<BooleanExpression> map(MapExpressionBase<K,V> expr, MapExpression<K,V> other,  K knownKey, V knownValue, K missingKey, V missingValue) {
+    public <K,V> Collection<BooleanExpression> map(MapExpressionBase<K,V,?> expr, MapExpression<K,V> other,  K knownKey, V knownValue, K missingKey, V missingValue) {
         HashSet<BooleanExpression> rv = new HashSet<BooleanExpression>();
         rv.add(expr.containsKey(knownKey));
         rv.add(expr.containsKey(missingKey).not());

File: querydsl-core/src/test/java/com/mysema/query/Projections.java
Patch:
@@ -91,7 +91,7 @@ public <A,Q extends SimpleExpression<A>> Collection<Expression<?>> list(ListPath
         return rv;
     }
 
-    public <K,V> Collection<Expression<?>> map(MapExpressionBase<K,V> expr, MapExpression<K,V> other, K knownKey, V knownValue) {
+    public <K,V> Collection<Expression<?>> map(MapExpressionBase<K,V,?> expr, MapExpression<K,V> other, K knownKey, V knownValue) {
         HashSet<Expression<?>> rv = new HashSet<Expression<?>>();
         rv.add(expr.get(knownKey));
         if (!module.equals(Module.RDFBEAN)){

File: querydsl-core/src/test/java/com/mysema/query/QueryExecution.java
Patch:
@@ -293,7 +293,7 @@ public final <A, Q extends SimpleExpression<A>> void runListTests(ListPath<A,Q>
         runProjectionQueries(projections.list(expr, other, knownElement));
     }
 
-    public final <K,V> void runMapTests(MapExpressionBase<K,V> expr, MapExpression<K,V> other, K knownKey, V knownValue, K missingKey, V missingValue) {
+    public final <K,V> void runMapTests(MapExpressionBase<K,V,?> expr, MapExpression<K,V> other, K knownKey, V knownValue, K missingKey, V missingValue) {
         runFilterQueries(matchers.map(expr, other, knownKey, knownValue, missingKey, missingValue), true);
         runFilterQueries(filters.map(expr, other, knownKey, knownValue), false);
         runProjectionQueries(projections.map(expr, other, knownKey, knownValue));

File: querydsl-core/src/test/java/com/mysema/query/domain/QCat.java
Patch:
@@ -36,9 +36,9 @@ public class QCat extends EntityPathBase<Cat> {
     //inherited
     public final NumberPath<Integer> id = _super.id;
 
-    public final ListPath<Cat, QCat> kittens = createList("kittens", Cat.class, QCat.class);
+    public final ListPath<Cat, QCat> kittens = this.<Cat,QCat>createList("kittens", Cat.class, QCat.class);
 
-    public final SetPath<Cat, QCat> kittensSet = createSet("kittensSet", Cat.class, QCat.class);
+    public final SetPath<Cat, QCat> kittensSet = this.<Cat,QCat>createSet("kittensSet", Cat.class, QCat.class);
 
     public final QCat mate;
 

File: querydsl-jdo/src/test/java/com/mysema/query/jdo/test/domain/QStore.java
Patch:
@@ -23,9 +23,9 @@ public class QStore extends EntityPathBase<com.mysema.query.jdo.test.domain.Stor
 
     public final StringPath name = createString("name");
 
-    public final MapPath<String,Product,QProduct> productsByName = this.<String,Product,QProduct>createMap("productsByName",String.class,Product.class,QProduct.class);
+    public final MapPath<String, Product, QProduct> productsByName = this.<String, Product, QProduct>createMap("productsByName",String.class,Product.class,QProduct.class);
 
-    public final ListPath<Product,QProduct> products = createList("products",Product.class,QProduct.class);
+    public final ListPath<Product, QProduct> products = this.<Product, QProduct>createList("products",Product.class,QProduct.class);
 
     public QProduct productsByName(String key) {
         return new QProduct(PathMetadataFactory.forMapAccess(productsByName,key));

File: querydsl-apt/src/test/java/com/mysema/query/domain/QueryEmbedded4Test.java
Patch:
@@ -63,8 +63,7 @@ public void User_Address_City_Name(){
     
     @Test
     public void User_Complex_a() {
-        //FIXME Tämä testiluokka ei käänny vaan tulee virhe
-        assertNotNull(QQueryEmbedded4Test_User.complex.a);
+        assertNotNull(QQueryEmbedded4Test_User.user.complex.a);
     }
     
 }

File: querydsl-core/src/main/java/com/mysema/query/annotations/QueryEmbeddable.java
Patch:
@@ -16,7 +16,7 @@
 @Target(TYPE)
 @Retention(RUNTIME)
 /**
- * Annotation for APT based Domain query type generation. Annotate Embeddable types with this annotation.
+ * Annotation for APT based Domain query type generation. Annotate embeddable types with this annotation.
  */
 public @interface QueryEmbeddable {
 

File: querydsl-core/src/main/java/com/mysema/query/annotations/QueryEmbedded.java
Patch:
@@ -1,17 +1,17 @@
 package com.mysema.query.annotations;
 
-import java.lang.annotation.ElementType;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
 @Documented
 @Target({ElementType.FIELD, ElementType.METHOD})
 @Retention(RUNTIME)
 /**
- * Annotation for APT based Domain query type generation. Annotate embdded properties with this annotation.
+ * Annotation for APT based Domain query type generation. Annotate embedded properties with this annotation.
  */
 public @interface QueryEmbedded {
 

File: querydsl-lucene/src/main/java/com/mysema/query/lucene/session/LuceneWriter.java
Patch:
@@ -12,6 +12,8 @@ public interface LuceneWriter {
 
     LuceneWriter addDocument(Document doc);
     
+    LuceneWriter addObject(Object object);
+    
     LuceneWriter deleteDocuments(Term term);
     
 }

File: querydsl-lucene/src/main/java/com/mysema/query/lucene/session/impl/LuceneSessionHolder.java
Patch:
@@ -32,7 +32,7 @@ private static class TransactionalScope {
 
         private final boolean readOnly;
 
-        public TransactionalScope(boolean readOnly) {
+        private TransactionalScope(boolean readOnly) {
             this.readOnly = readOnly;
         }
     }

File: querydsl-apt/src/test/java/com/mysema/query/domain/ConstructorTest.java
Patch:
@@ -5,7 +5,8 @@
  */
 package com.mysema.query.domain;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
 
 import org.junit.Test;
 
@@ -43,7 +44,7 @@ public void Classes_are_available(){
     @Test
     public void Category_Super_Reference_is_Correct(){
         assertEquals(QConstructorTest_CategorySuperclass.class, QConstructorTest_Category.category._super.getClass());
-        assertEquals(CategorySuperclass.class, QConstructorTest_Category.category._super.getType());
+        assertEquals(Category.class, QConstructorTest_Category.category._super.getType());
     }
 
 }

File: querydsl-core/src/main/java/com/mysema/query/alias/Alias.java
Patch:
@@ -21,6 +21,7 @@
 import com.mysema.query.types.EntityPath;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.PathMetadataFactory;
+import com.mysema.query.types.expr.SimpleExpression;
 import com.mysema.query.types.path.*;
 
 /**
@@ -115,8 +116,8 @@ public final class Alias {
         return aliasFactory.<DateTimePath<java.util.Date>> getCurrentAndReset();
     }
 
-    public static <D> ListPath<D,?> $(List<D> args) {
-        return aliasFactory.<ListPath<D,?>> getCurrentAndReset();
+    public static <D, Q extends SimpleExpression<D>> ListPath<D,Q> $(List<D> args) {
+        return aliasFactory.<ListPath<D,Q>> getCurrentAndReset();
     }
 
     public static NumberPath<Long> $(Long arg) {

File: querydsl-core/src/main/java/com/mysema/query/types/expr/CollectionExpressionBase.java
Patch:
@@ -21,7 +21,7 @@
  *
  * @param <D>
  */
-public abstract class CollectionExpressionBase<C extends Collection<E>, E> extends SimpleExpression<C> implements CollectionExpression<C,E> {
+public abstract class CollectionExpressionBase<C extends Collection<E>, E> extends SimpleExpression<C> implements CollectionExpression<C, E> {
 
     private static final long serialVersionUID = 691230660037162054L;
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ListExpression.java
Patch:
@@ -20,7 +20,7 @@
  * @param <E> component type
  * @see java.util.List
  */
-public interface ListExpression<E> extends CollectionExpression<List<E>,E> {
+public interface ListExpression<E, Q extends SimpleExpression<? extends E>> extends CollectionExpression<List<E>,E> {
 
     /**
      * Indexed access
@@ -29,7 +29,7 @@ public interface ListExpression<E> extends CollectionExpression<List<E>,E> {
      * @return this.get(index)
      * @see java.util.List#get(int)
      */
-    SimpleExpression<E> get(Expression<Integer> index);
+    Q get(Expression<Integer> index);
 
     /**
      * Indexed access
@@ -38,5 +38,5 @@ public interface ListExpression<E> extends CollectionExpression<List<E>,E> {
      * @return this.get(index)
      * @see java.util.List#get(int)
      */
-    SimpleExpression<E> get(@Nonnegative int index);
+    Q get(@Nonnegative int index);
 }

File: querydsl-core/src/main/java/com/mysema/query/types/path/CollectionPath.java
Patch:
@@ -24,8 +24,9 @@
  * @author tiwe
  *
  * @param <E> component type
+ * @param <Q> component query type
  */
-public class CollectionPath<E, Q extends SimpleExpression<E>> extends CollectionPathBase<Collection<E>,E>{    
+public class CollectionPath<E, Q extends SimpleExpression<E>> extends CollectionPathBase<Collection<E>, E, Q>{    
 
     private static final long serialVersionUID = -4982311799113762600L;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/ListPath.java
Patch:
@@ -28,8 +28,9 @@
  * @author tiwe
  *
  * @param <E> component type
+ * @param <Q> component query type
  */
-public class ListPath<E, Q extends SimpleExpression<E>> extends CollectionPathBase<List<E>,E> implements ListExpression<E> {
+public class ListPath<E, Q extends SimpleExpression<E>> extends CollectionPathBase<List<E>, E, Q> implements ListExpression<E, Q> {
 
     private static final long serialVersionUID = 3302301599074388860L;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/SetPath.java
Patch:
@@ -24,8 +24,9 @@
  * @author tiwe
  *
  * @param <E> component type
+ * @param <Q> component query type
  */
-public class SetPath<E, Q extends SimpleExpression<E>> extends CollectionPathBase<Set<E>,E> {
+public class SetPath<E, Q extends SimpleExpression<E>> extends CollectionPathBase<Set<E>,E, Q> {
 
     private static final long serialVersionUID = 4145848445507037373L;
 

File: querydsl-core/src/test/java/com/mysema/query/Filters.java
Patch:
@@ -141,7 +141,7 @@ private <A> Collection<BooleanExpression> exprFilters(SimpleExpression<A> expr,
         return rv;
     }
 
-    public <A> Collection<BooleanExpression> list(ListPath<A,?> expr, ListExpression<A> other, A knownElement){
+    public <A, Q extends SimpleExpression<A>> Collection<BooleanExpression> list(ListPath<A, Q> expr, ListExpression<A, Q> other, A knownElement){
         List<BooleanExpression> rv = new ArrayList<BooleanExpression>();
         rv.addAll(collection(expr, other, knownElement));
         rv.add(expr.get(0).eq(knownElement));

File: querydsl-core/src/test/java/com/mysema/query/MatchingFilters.java
Patch:
@@ -118,7 +118,7 @@ public Collection<BooleanExpression> dateTime(DateTimeExpression<java.util.Date>
         return rv;
     }
 
-    public <A> Collection<BooleanExpression> list(ListPath<A,?> expr, ListExpression<A> other, A knownElement, A missingElement){
+    public <A,Q extends SimpleExpression<A>> Collection<BooleanExpression> list(ListPath<A,Q> expr, ListExpression<A,Q> other, A knownElement, A missingElement){
         return collection(expr, other, knownElement, missingElement);
     }
 

File: querydsl-core/src/test/java/com/mysema/query/Projections.java
Patch:
@@ -82,7 +82,7 @@ public <A extends Comparable> Collection<Expression<?>> dateTime(DateTimeExpress
         return rv;
     }
 
-    public <A> Collection<Expression<?>> list(ListPath<A,?> expr, ListExpression<A> other, A knownElement){
+    public <A,Q extends SimpleExpression<A>> Collection<Expression<?>> list(ListPath<A,Q> expr, ListExpression<A,Q> other, A knownElement){
         HashSet<Expression<?>> rv = new HashSet<Expression<?>>();
         rv.add(expr.get(0));
         if (!module.equals(Module.RDFBEAN)){

File: querydsl-core/src/test/java/com/mysema/query/QueryExecution.java
Patch:
@@ -287,7 +287,7 @@ public final void runDateTimeTests(DateTimeExpression<java.util.Date> expr, Date
         runProjectionQueries(projections.dateTime(expr, other, knownValue));
     }
 
-    public final <A> void runListTests(ListPath<A,?> expr, ListExpression<A> other, A knownElement, A missingElement){
+    public final <A, Q extends SimpleExpression<A>> void runListTests(ListPath<A,Q> expr, ListExpression<A,Q> other, A knownElement, A missingElement){
         runFilterQueries(matchers.list(expr, other, knownElement, missingElement), true);
         runFilterQueries(filters.list(expr, other, knownElement), false);
         runProjectionQueries(projections.list(expr, other, knownElement));

File: querydsl-jpa/src/test/java/com/mysema/query/AbstractStandardTest.java
Patch:
@@ -39,6 +39,7 @@
 import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.ListExpression;
 import com.mysema.query.types.expr.Param;
+import com.mysema.query.types.expr.SimpleExpression;
 import com.mysema.query.types.expr.StringExpression;
 import com.mysema.query.types.path.ListPath;
 
@@ -79,7 +80,7 @@ public QProjection(StringExpression str, QCat cat){
 
     private final Projections projections = new Projections(Module.HQL, getTarget()){
         @Override
-        public <A> Collection<Expression<?>> list(ListPath<A,?> expr, ListExpression<A> other, A knownElement){
+        public <A,Q extends SimpleExpression<A>> Collection<Expression<?>> list(ListPath<A,Q> expr, ListExpression<A,Q> other, A knownElement){
             // NOTE : expr.get(0) is only supported in the where clause
             return Collections.<Expression<?>>singleton(expr.size());
         }

File: querydsl-apt/src/main/java/com/mysema/query/apt/Configuration.java
Patch:
@@ -36,10 +36,10 @@ public interface Configuration {
 
     @Nullable
     Class<? extends Annotation> getEntitiesAnnotation();
-    
+
     @Nullable
     Class<? extends Annotation> getEmbeddedAnnotation();
-    
+
     @Nullable
     Class<? extends Annotation> getEmbeddableAnnotation();
 
@@ -51,7 +51,7 @@ public interface Configuration {
 
     String getNamePrefix();
 
-    SerializerConfig getSerializerConfig(EntityType model);
+    SerializerConfig getSerializerConfig(EntityType entityType);
 
     @Nullable
     Class<? extends Annotation> getSkipAnnotation();

File: querydsl-maven-plugin/src/main/java/com/mysema/query/maven/AbstractMetaDataExportMojo.java
Patch:
@@ -116,15 +116,16 @@ public void execute() throws MojoExecutionException, MojoFailureException {
             namingStrategy = new DefaultNamingStrategy();
         }
         Serializer serializer = new MetaDataSerializer(namePrefix, namingStrategy, innerClassesForKeys);
-        Serializer beanSerializer = exportBeans ? new BeanSerializer() : null;
 
         MetaDataExporter exporter = new MetaDataExporter();
         exporter.setNamePrefix(namePrefix);
         exporter.setPackageName(packageName);
         exporter.setTargetFolder(new File(targetFolder));
         exporter.setNamingStrategy(namingStrategy);
         exporter.setSerializer(serializer);
-        exporter.setBeanSerializer(beanSerializer);
+        if (exportBeans){
+            exporter.setBeanSerializer(new BeanSerializer());
+        }
         exporter.setSchemaPattern(schemaPattern);
         exporter.setTableNamePattern(tableNamePattern);
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/MetaDataExporter.java
Patch:
@@ -88,6 +88,7 @@ private static Writer writerFor(File file) {
     @Nullable
     private String schemaPattern, tableNamePattern;
 
+    @Nullable
     private Serializer serializer;
 
     @Nullable
@@ -161,7 +162,7 @@ public void export(DatabaseMetaData md) throws SQLException {
         if (serializer == null){
             serializer = new MetaDataSerializer(namePrefix, namingStrategy);
         }
-        
+
         ResultSet tables = md.getTables(null, schemaPattern, tableNamePattern, null);
         try{
             while (tables.next()) {

File: querydsl-apt/src/main/java/com/mysema/query/apt/ElementHandler.java
Patch:
@@ -6,6 +6,7 @@
 package com.mysema.query.apt;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
@@ -212,6 +213,8 @@ public void handleQueryMethod(EntityType entityModel, ExecutableElement method,
         Type returnType = typeFactory.create(method.getReturnType());
         if (returnType.getCategory() == TypeCategory.ENTITY){
             returnType = returnType.as(TypeCategory.SIMPLE);
+        }else if (returnType.getCategory() == TypeCategory.CUSTOM){
+            returnType = returnType.as(TypeCategory.get(returnType.getRawName(Collections.<String>emptySet(), Collections.<String>emptySet())));
         }
         Method methodModel = new Method(entityModel, name, queryMethod.value(), transformParams(method.getParameters()), returnType);
         queryMethods.add(methodModel);

File: querydsl-apt/src/main/java/com/mysema/query/apt/QuerydslAnnotationProcessor.java
Patch:
@@ -46,7 +46,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
         embeddable = QueryEmbeddable.class;
         embedded = QueryEmbedded.class;
         skip = QueryTransient.class;
-
+        
         DefaultConfiguration configuration = new DefaultConfiguration(roundEnv, processingEnv.getOptions(), Collections.<String>emptySet(), entities, entity, superType, embeddable, embedded, skip);
 
         Processor processor = new Processor(processingEnv, roundEnv, configuration);

File: querydsl-apt/src/test/java/com/mysema/query/apt/AbstractProcessorTest.java
Patch:
@@ -59,7 +59,7 @@ protected void compile(Class<? extends AbstractProcessor> processorClass, List<S
             Assert.fail("Compilation Failed");
         }
     }
-
+    
     protected Collection<String> getAPTOptions() {
         return Collections.emptyList();
     }

File: querydsl-apt/src/test/java/com/mysema/query/domain/AbstractTest.java
Patch:
@@ -5,15 +5,15 @@
  */
 package com.mysema.query.domain;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.*;
 import junit.framework.Assert;
 
 public abstract class AbstractTest {
 
     public Class<?> cl;
 
     protected void match(Class<?> expectedType, String name) throws SecurityException, NoSuchFieldException{
-        assertEquals(cl.getSimpleName()+"."+name + " failed", expectedType, cl.getField(name).getType());
+        assertTrue(cl.getSimpleName()+"."+name + " failed", expectedType.isAssignableFrom(cl.getField(name).getType()));
     }
 
     protected void assertMissing(String name){

File: querydsl-apt/src/test/java/com/mysema/query/domain/SimpleTypesTest.java
Patch:
@@ -16,11 +16,11 @@
 
 import org.junit.Test;
 
+import com.mysema.query.annotations.Config;
 import com.mysema.query.annotations.PropertyType;
 import com.mysema.query.annotations.QueryEntity;
 import com.mysema.query.annotations.QueryTransient;
 import com.mysema.query.annotations.QueryType;
-import com.mysema.query.annotations.Config;
 import com.mysema.query.types.path.ComparablePath;
 import com.mysema.query.types.path.DateTimePath;
 import com.mysema.query.types.path.EnumPath;

File: querydsl-apt/src/main/java/com/mysema/query/apt/QuerydslAnnotationProcessor.java
Patch:
@@ -31,7 +31,7 @@
  * @author tiwe
  *
  */
-@SupportedAnnotationTypes("*")
+@SupportedAnnotationTypes({"com.mysema.query.annotations.*"})
 @SupportedSourceVersion(SourceVersion.RELEASE_6)
 public class QuerydslAnnotationProcessor extends AbstractProcessor{
 

File: querydsl-apt/src/main/java/com/mysema/query/apt/hibernate/HibernateAnnotationProcessor.java
Patch:
@@ -19,7 +19,7 @@
  * @author tiwe
  *
  */
-@SupportedAnnotationTypes("*")
+@SupportedAnnotationTypes({"com.mysema.query.annotations.*","javax.persistence.*", "org.hibernate.annotations.*"})
 @SupportedSourceVersion(SourceVersion.RELEASE_6)
 public class HibernateAnnotationProcessor extends JPAAnnotationProcessor{
 

File: querydsl-apt/src/main/java/com/mysema/query/apt/jdo/JDOAnnotationProcessor.java
Patch:
@@ -28,7 +28,7 @@
  * @author tiwe
  *
  */
-@SupportedAnnotationTypes("*")
+@SupportedAnnotationTypes({"com.mysema.query.annotations.*","javax.jdo.annotations.*"})
 @SupportedSourceVersion(SourceVersion.RELEASE_6)
 public class JDOAnnotationProcessor extends AbstractProcessor{
     

File: querydsl-apt/src/main/java/com/mysema/query/apt/jpa/JPAAnnotationProcessor.java
Patch:
@@ -26,7 +26,7 @@
  * @author tiwe
  *
  */
-@SupportedAnnotationTypes("*")
+@SupportedAnnotationTypes({"com.mysema.query.annotations.*","javax.persistence.*"})
 @SupportedSourceVersion(SourceVersion.RELEASE_6)
 public class JPAAnnotationProcessor extends AbstractProcessor{
 

File: querydsl-apt/src/test/java/com/mysema/query/apt/EntityExtensions.java
Patch:
@@ -1,7 +1,6 @@
 package com.mysema.query.apt;
 
 import com.mysema.query.annotations.QueryDelegate;
-import com.mysema.query.domain.QEntityWithExtensions;
 import com.mysema.query.types.Predicate;
 import com.mysema.query.types.path.BooleanPath;
 

File: querydsl-mongodb/src/main/java/com/mysema/query/mongodb/MongodbAnnotationProcessor.java
Patch:
@@ -24,7 +24,7 @@
 import com.mysema.query.apt.DefaultConfiguration;
 import com.mysema.query.apt.Processor;
 
-@SupportedAnnotationTypes("*")
+@SupportedAnnotationTypes({"com.mysema.query.annotations.*","com.google.code.morphia.annotations.*"})
 @SupportedSourceVersion(SourceVersion.RELEASE_6)
 public class MongodbAnnotationProcessor extends AbstractProcessor{
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/ConfigurationTest.java
Patch:
@@ -38,5 +38,5 @@ public void Custom_Type(){
         configuration.register(new InputStreamType());        
         assertEquals(InputStream.class, configuration.getJavaType(Types.BLOB, "", ""));
     }
-    
+        
 }

File: querydsl-core/src/main/java/com/mysema/query/types/Templates.java
Patch:
@@ -168,6 +168,7 @@ protected Templates() {
             add(type, "{0}.get({1})");
         }
         add(PathType.ARRAYVALUE, "{0}[{1}]");
+        add(PathType.COLLECTION_ANY, "any({0})");
         add(PathType.LISTVALUE_CONSTANT, "{0}.get({1s})"); // serialized constant
         add(PathType.ARRAYVALUE_CONSTANT, "{0}[{1s}]");    // serialized constant
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/CollectionPath.java
Patch:
@@ -61,7 +61,7 @@ public <R,C> R accept(Visitor<R,C> v, C context) {
     public Q any(){
         if (any == null){
             try {
-                any = newInstance(queryType, pathMixin.getMetadata());
+                any = newInstance(queryType, PathMetadataFactory.forCollectionAny(this));
             } catch (NoSuchMethodException e) {
                 throw new ExpressionException(e);
             } catch (InstantiationException e) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/ListPath.java
Patch:
@@ -67,7 +67,7 @@ public <R,C> R accept(Visitor<R,C> v, C context) {
     public Q any(){
         if (any == null){
             try {
-                any = newInstance(queryType, pathMixin.getMetadata());
+                any = newInstance(queryType, PathMetadataFactory.forCollectionAny(this));
             } catch (NoSuchMethodException e) {
                 throw new ExpressionException(e);
             } catch (InstantiationException e) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/SetPath.java
Patch:
@@ -61,7 +61,7 @@ public <R,C> R accept(Visitor<R,C> v, C context) {
     public Q any(){
         if (any == null){
             try {
-                any = newInstance(queryType, pathMixin.getMetadata());
+                any = newInstance(queryType, PathMetadataFactory.forCollectionAny(this));
             } catch (NoSuchMethodException e) {
                 throw new ExpressionException(e);
             } catch (InstantiationException e) {

File: querydsl-core/src/test/java/com/mysema/query/types/path/CollectionPathTest.java
Patch:
@@ -14,7 +14,7 @@ public void test(){
                 String.class, StringPath.class, 
                 PathMetadataFactory.forVariable("stringPath"));
         assertEquals("stringPath", stringPath.toString());
-        assertEquals("stringPath", stringPath.any().toString());
+        assertEquals("any(stringPath)", stringPath.any().toString());
         assertEquals("eqIc(stringPath,X)", stringPath.any().equalsIgnoreCase("X").toString());
     }
 

File: querydsl-core/src/test/java/com/mysema/query/types/path/ListPathTest.java
Patch:
@@ -15,7 +15,7 @@ public void test(){
                 String.class, StringPath.class, 
                 PathMetadataFactory.forVariable("stringPath"));
         assertEquals("stringPath", stringPath.toString());
-        assertEquals("stringPath", stringPath.any().toString());
+        assertEquals("any(stringPath)", stringPath.any().toString());
         assertEquals("eqIc(stringPath.get(0),X)", stringPath.get(0).equalsIgnoreCase("X").toString());
         assertEquals("eqIc(stringPath,X)", stringPath.any().equalsIgnoreCase("X").toString());
         assertEquals("stringPath.get(0)", stringPath.get(ConstantImpl.create(0)).toString());

File: querydsl-core/src/test/java/com/mysema/query/types/path/SetPathTest.java
Patch:
@@ -14,7 +14,7 @@ public void test(){
                 String.class, StringPath.class, 
                 PathMetadataFactory.forVariable("stringPath"));
         assertEquals("stringPath", stringPath.toString());
-        assertEquals("stringPath", stringPath.any().toString());
+        assertEquals("any(stringPath)", stringPath.any().toString());
         assertEquals("eqIc(stringPath,X)", stringPath.any().equalsIgnoreCase("X").toString());
     }
 

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/HQLTemplates.java
Patch:
@@ -39,6 +39,7 @@ protected HQLTemplates() {
             add(type, "{0}[{1}]");
         }
         add(PathType.LISTVALUE_CONSTANT, "{0}[{1s}]");
+        add(PathType.COLLECTION_ANY, "any elements({0})");
         
         add(Ops.CONTAINS_KEY, "{1} in indices({0})");
         add(Ops.CONTAINS_VALUE, "{1} in elements({0})");

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain2/DocumentProp.java
Patch:
@@ -52,7 +52,5 @@ public String getPropValueDetails() {
     public void setPropValueDetails(String propValueDetails) {
         this.propValueDetails = propValueDetails;
     }
-
-    
     
 }

File: querydsl-apt/src/main/java/com/mysema/query/apt/Processor.java
Patch:
@@ -400,10 +400,9 @@ private void processEmbedded(){
             }
             String typeName = type.toString();
             if (typeName.startsWith("java.util")){
-                Type t = typeModelFactory.create(type);
-                typeName = t.getParameters().get(0).toString();
+                typeName = typeName.substring(typeName.indexOf('<')+1, typeName.lastIndexOf('>'));
+                typeModelFactory.createEntityType(env.getElementUtils().getTypeElement(typeName).asType());
             }
-            System.err.println(":"+typeName); // TODO : remove
             TypeElement typeElement = env.getElementUtils().getTypeElement(typeName);
             EntityType model = elementHandler.handleNormalType(typeElement);
             embeddables.put(model.getFullName(), model);            

File: querydsl-apt/src/test/java/com/mysema/query/domain/QueryEmbeddedTest.java
Patch:
@@ -40,8 +40,7 @@ public class Child {
     @Test
     public void test(){
         assertNotNull(QQueryEmbeddedTest_Parent.parent.child.childProperty);
-        // FIXME
-//        assertNotNull(QQueryEmbeddedTest_Parent2.parent2.children.any().childProperty);
+        assertNotNull(QQueryEmbeddedTest_Parent2.parent2.children.any().childProperty);
     }
     
 }

File: querydsl-apt/src/main/java/com/mysema/query/apt/APTTypeFactory.java
Patch:
@@ -47,7 +47,6 @@
  * @author tiwe
  *
  */
-// TODO : improved entityTypeCache and cache usage
 public final class APTTypeFactory {
 
     @Nullable
@@ -185,7 +184,6 @@ && isImplemented(typeElement, comparableType)){
                 return new EntityType(configuration.getNamePrefix(), type);
             }
         }
-        
         return type;
     }
 

File: querydsl-apt/src/main/java/com/mysema/query/apt/Configuration.java
Patch:
@@ -37,6 +37,9 @@ public interface Configuration {
     @Nullable
     Class<? extends Annotation> getEntitiesAnnotation();
     
+    @Nullable
+    Class<? extends Annotation> getEmbeddedAnnotation();
+    
     @Nullable
     Class<? extends Annotation> getEmbeddableAnnotation();
 

File: querydsl-apt/src/main/java/com/mysema/query/apt/jdo/JDOAnnotationProcessor.java
Patch:
@@ -41,7 +41,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
             embeddable = (Class)Class.forName("javax.jdo.annotations.EmbeddedOnly");
             skip = (Class)Class.forName("javax.jdo.annotations.NotPersistent");
 
-            DefaultConfiguration configuration = new DefaultConfiguration(roundEnv, processingEnv.getOptions(), null, entity, null, embeddable, skip);
+            DefaultConfiguration configuration = new DefaultConfiguration(roundEnv, processingEnv.getOptions(), null, entity, null, embeddable, null, skip);
             configuration.setUseGetters(false);
             Processor processor = new Processor(processingEnv, roundEnv, configuration);
             processor.process();

File: querydsl-apt/src/main/java/com/mysema/query/apt/jdo/JDOConfiguration.java
Patch:
@@ -40,7 +40,7 @@ public JDOConfiguration(RoundEnvironment roundEnv,Map<String,String> options,
             @Nullable Class<? extends Annotation> superTypeAnn,
             Class<? extends Annotation> embeddableAnn,
             Class<? extends Annotation> skipAnn) throws ClassNotFoundException {
-        super(roundEnv, options, null, entityAnn, superTypeAnn, embeddableAnn, skipAnn);
+        super(roundEnv, options, null, entityAnn, superTypeAnn, embeddableAnn, null, skipAnn);
     }
 
     @Override

File: querydsl-apt/src/main/java/com/mysema/query/apt/jpa/JPAConfiguration.java
Patch:
@@ -53,7 +53,7 @@ public JPAConfiguration(RoundEnvironment roundEnv,Map<String,String> options,
             Class<? extends Annotation> superTypeAnn,
             Class<? extends Annotation> embeddableAnn,
             Class<? extends Annotation> skipAnn) throws ClassNotFoundException {
-        super(roundEnv, options, null, entityAnn, superTypeAnn, embeddableAnn, skipAnn);
+        super(roundEnv, options, null, entityAnn, superTypeAnn, embeddableAnn, null, skipAnn);
         this.annotations = getAnnotations();
     }
 

File: src/main/java/com/mysema/codegen/JavaWriter.java
Patch:
@@ -155,7 +155,8 @@ private void annotationConstant(Object value) throws IOException{
              Enum enumValue = (Enum)value;
              append(enumValue.getDeclaringClass().getName()+DOT+enumValue.name());
          }else if (value instanceof String){
-             append(QUOTE + StringEscapeUtils.escapeJava(value.toString()) + QUOTE);
+             String escaped = StringEscapeUtils.escapeJava(value.toString()); 
+             append(QUOTE + escaped.replace("\\/", "/") + QUOTE);
          }else{
              throw new IllegalArgumentException("Unsupported annotation value : " + value);
          }

File: src/test/java/com/mysema/codegen/Annotation.java
Patch:
@@ -13,7 +13,7 @@
 
 @Target( { TYPE })
 @Retention(RetentionPolicy.RUNTIME)
-public @interface TestAnnotation {
+public @interface Annotation {
     
     boolean prop1() default false;
     

File: src/test/java/com/mysema/codegen/Annotation2.java
Patch:
@@ -11,7 +11,7 @@
 
 @Target( { TYPE })
 @Retention(RetentionPolicy.RUNTIME)
-public @interface TestAnnotation2 {
+public @interface Annotation2 {
     
     String value();        
 

File: src/test/java/com/mysema/codegen/Annotation3.java
Patch:
@@ -14,7 +14,7 @@
 
 @Target( { TYPE })
 @Retention(RetentionPolicy.RUNTIME)
-public @interface TestAnnotation3 {
+public @interface Annotation3 {
     
     ElementType type(); 
 

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/HQLTemplates.java
Patch:
@@ -39,6 +39,9 @@ protected HQLTemplates() {
             add(type, "{0}[{1}]");
         }
         add(PathType.LISTVALUE_CONSTANT, "{0}[{1s}]");
+        
+        add(Ops.CONTAINS_KEY, "{1} in indices({0})");
+        add(Ops.CONTAINS_VALUE, "{1} in elements({0})");
 
         // date time
         add(Ops.DateTimeOps.MILLISECOND, "0"); // NOT supported in HQL

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/domain/Show.java
Patch:
@@ -18,8 +18,8 @@
 @Entity
 public class Show {
     @CollectionOfElements
-    Map<String, String> acts;
+    public Map<String, String> acts;
 
     @Id
-    int id;
+    public int id;
 }

File: querydsl-core/src/main/java/com/mysema/query/Projectable.java
Patch:
@@ -57,7 +57,7 @@ public interface Projectable {
      * iterate over the results for the given projection
      *
      * @param <RT>
-     *            generic type of the Iteratpr
+     *            generic type of the Iterator
      * @param projection
      * @return an Iterator over the projection
      */

File: querydsl-core/src/test/java/com/mysema/query/types/expr/ArrayConstructorExpressionTest.java
Patch:
@@ -17,7 +17,7 @@ public class ArrayConstructorExpressionTest {
     @SuppressWarnings("unchecked")
     @Test
     public void NewInstanceObjectArray() {
-        ArrayConstructorExpression<String> constructor = new ArrayConstructorExpression<String>(String[].class,  new StringPath(""), new StringPath("2"));
+        ArrayConstructorExpression<String> constructor = new ArrayConstructorExpression<String>(String[].class,  new StringPath("test"), new StringPath("test2"));
 
         String[] strings = constructor.newInstance((Object[])new String[]{"1", "2"});
         assertEquals("1", strings[0]);

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLSerializer.java
Patch:
@@ -254,9 +254,7 @@ public void serializeForDelete(QueryMetadata metadata, RelationalPath<?> entity)
         }        
         handle(entity);
         if (metadata.getWhere() != null) {
-            skipParent = true;
             append(templates.getWhere()).handle(metadata.getWhere());
-            skipParent = false;
         }        
         serialize(Position.END, metadata.getFlags());
         
@@ -373,6 +371,7 @@ public void serializeForUpdate(QueryMetadata metadata, RelationalPath<?> entity,
             first = false;
         }
         skipParent = false;
+        
         if (metadata.getWhere() != null) {
             append(templates.getWhere()).handle(metadata.getWhere());
         }

File: querydsl-collections/src/main/java/com/mysema/query/collections/AbstractColQuery.java
Patch:
@@ -18,10 +18,10 @@
 import com.mysema.query.SearchResults;
 import com.mysema.query.support.ProjectableQuery;
 import com.mysema.query.support.QueryMixin;
+import com.mysema.query.types.ArrayConstructorExpression;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.expr.ArrayConstructorExpression;
 import com.mysema.query.types.expr.SimpleOperation;
 import com.mysema.query.types.path.MapPath;
 

File: querydsl-collections/src/main/java/com/mysema/query/collections/DefaultQueryEngine.java
Patch:
@@ -20,11 +20,11 @@
 import com.mysema.query.JoinExpression;
 import com.mysema.query.JoinType;
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.ArrayConstructorExpression;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Order;
 import com.mysema.query.types.OrderSpecifier;
-import com.mysema.query.types.expr.ArrayConstructorExpression;
 import com.mysema.util.MultiComparator;
 
 /**

File: querydsl-collections/src/test/java/com/mysema/query/ColQueryStandardTest.java
Patch:
@@ -20,12 +20,12 @@
 import com.mysema.query.collections.Cat;
 import com.mysema.query.collections.MiniApi;
 import com.mysema.query.collections.QCat;
+import com.mysema.query.types.ArrayConstructorExpression;
+import com.mysema.query.types.ConstructorExpression;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.ParamNotSetException;
 import com.mysema.query.types.QTuple;
-import com.mysema.query.types.expr.ArrayConstructorExpression;
 import com.mysema.query.types.expr.BooleanExpression;
-import com.mysema.query.types.expr.ConstructorExpression;
 import com.mysema.query.types.expr.Param;
 
 public class ColQueryStandardTest {

File: querydsl-core/src/main/java/com/mysema/query/codegen/EntitySerializer.java
Patch:
@@ -31,12 +31,12 @@
 import com.mysema.codegen.model.TypeExtends;
 import com.mysema.codegen.model.Types;
 import com.mysema.commons.lang.Assert;
+import com.mysema.query.types.ConstructorExpression;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.PathMetadataFactory;
 import com.mysema.query.types.expr.ComparableExpression;
-import com.mysema.query.types.expr.ConstructorExpression;
 import com.mysema.query.types.path.*;
 import com.mysema.query.types.template.SimpleTemplate;
 

File: querydsl-core/src/main/java/com/mysema/query/codegen/ProjectionSerializer.java
Patch:
@@ -19,8 +19,8 @@
 import com.mysema.codegen.model.TypeCategory;
 import com.mysema.codegen.model.Types;
 import com.mysema.commons.lang.Assert;
+import com.mysema.query.types.ConstructorExpression;
 import com.mysema.query.types.Expression;
-import com.mysema.query.types.expr.ConstructorExpression;
 import com.mysema.query.types.expr.NumberExpression;
 
 /**

File: querydsl-core/src/test/java/com/mysema/query/types/ConstructorExpressionTest.java
Patch:
@@ -7,7 +7,6 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.expr.ConstructorExpression;
 
 public class ConstructorExpressionTest {
 

File: querydsl-core/src/test/java/com/mysema/query/types/StringTest.java
Patch:
@@ -17,8 +17,6 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.expr.ArrayConstructorExpression;
-import com.mysema.query.types.expr.ConstructorExpression;
 
 /**
  * StringTest provides.

File: querydsl-core/src/test/java/com/mysema/query/types/expr/ArrayConstructorExpressionTest.java
Patch:
@@ -9,6 +9,7 @@
 
 import org.junit.Test;
 
+import com.mysema.query.types.ArrayConstructorExpression;
 import com.mysema.query.types.path.StringPath;
 
 public class ArrayConstructorExpressionTest {

File: querydsl-jdo/src/main/java/com/mysema/query/jdo/sql/JDOSQLQuery.java
Patch:
@@ -30,9 +30,9 @@
 import com.mysema.query.sql.SQLCommonQuery;
 import com.mysema.query.sql.SQLSerializer;
 import com.mysema.query.sql.SQLTemplates;
+import com.mysema.query.types.ConstructorExpression;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.QTuple;
-import com.mysema.query.types.expr.ConstructorExpression;
 
 /**
  * JDOSQLQuery is an SQLQuery implementation that uses JDO's SQL query functionality

File: querydsl-jdo/src/test/java/com/mysema/query/JDOQLQueryStandardTest.java
Patch:
@@ -27,12 +27,12 @@
 import com.mysema.query.jdo.test.domain.QProduct;
 import com.mysema.query.jdo.test.domain.QStore;
 import com.mysema.query.jdo.test.domain.Store;
+import com.mysema.query.types.ArrayConstructorExpression;
+import com.mysema.query.types.ConstructorExpression;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.ParamNotSetException;
 import com.mysema.query.types.QTuple;
-import com.mysema.query.types.expr.ArrayConstructorExpression;
 import com.mysema.query.types.expr.BooleanExpression;
-import com.mysema.query.types.expr.ConstructorExpression;
 import com.mysema.query.types.expr.Param;
 
 public class JDOQLQueryStandardTest extends AbstractJDOTest {

File: querydsl-jdo/src/test/java/com/mysema/query/jdo/JDOSQLQueryTest.java
Patch:
@@ -17,8 +17,8 @@
 import com.mysema.query.jdo.test.domain.sql.SProduct;
 import com.mysema.query.sql.HSQLDBTemplates;
 import com.mysema.query.sql.SQLTemplates;
+import com.mysema.query.types.ConstructorExpression;
 import com.mysema.query.types.expr.BooleanExpression;
-import com.mysema.query.types.expr.ConstructorExpression;
 
 public class JDOSQLQueryTest extends AbstractJDOTest{
     

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/JPQLSerializer.java
Patch:
@@ -23,7 +23,6 @@
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.support.SerializerBase;
 import com.mysema.query.types.*;
-import com.mysema.query.types.expr.ConstructorExpression;
 import com.mysema.query.types.expr.SimpleOperation;
 import com.mysema.util.MathUtils;
 

File: querydsl-jpa/src/main/java/com/mysema/query/jpa/hibernate/AbstractHibernateQuery.java
Patch:
@@ -29,10 +29,10 @@
 import com.mysema.query.jpa.JPQLQueryBase;
 import com.mysema.query.jpa.HQLTemplates;
 import com.mysema.query.jpa.JPQLTemplates;
+import com.mysema.query.types.ConstructorExpression;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.FactoryExpression;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.expr.ConstructorExpression;
 
 /**
  * Abstract base class for Hibernate API based implementations of the JPQL interface

File: querydsl-jpa/src/test/java/com/mysema/query/AbstractStandardTest.java
Patch:
@@ -27,12 +27,12 @@
 import com.mysema.query.jpa.domain.Cat;
 import com.mysema.query.jpa.domain.DomesticCat;
 import com.mysema.query.jpa.domain.QCat;
+import com.mysema.query.types.ArrayConstructorExpression;
+import com.mysema.query.types.ConstructorExpression;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.ParamNotSetException;
 import com.mysema.query.types.QTuple;
-import com.mysema.query.types.expr.ArrayConstructorExpression;
 import com.mysema.query.types.expr.BooleanExpression;
-import com.mysema.query.types.expr.ConstructorExpression;
 import com.mysema.query.types.expr.ListExpression;
 import com.mysema.query.types.expr.Param;
 import com.mysema.query.types.expr.StringExpression;

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/ConstructorsTest.java
Patch:
@@ -8,8 +8,8 @@
 import org.junit.Ignore;
 import org.junit.Test;
 
+import com.mysema.query.types.ConstructorExpression;
 import com.mysema.query.types.Expression;
-import com.mysema.query.types.expr.ConstructorExpression;
 
 public class ConstructorsTest extends AbstractQueryTest{
 

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/hibernate/sql/DerbySQLTest.java
Patch:
@@ -22,7 +22,7 @@
 import com.mysema.query.jpa.domain.sql.SAnimal;
 import com.mysema.query.sql.DerbyTemplates;
 import com.mysema.query.sql.SQLTemplates;
-import com.mysema.query.types.expr.ConstructorExpression;
+import com.mysema.query.types.ConstructorExpression;
 import com.mysema.testutil.HibernateConfig;
 import com.mysema.testutil.HibernateTestRunner;
 

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/sql/JPADerbySQLTest.java
Patch:
@@ -26,7 +26,7 @@
 import com.mysema.query.jpa.domain.sql.SAnimal;
 import com.mysema.query.sql.DerbyTemplates;
 import com.mysema.query.sql.SQLTemplates;
-import com.mysema.query.types.expr.ConstructorExpression;
+import com.mysema.query.types.ConstructorExpression;
 import com.mysema.testutil.JPAConfig;
 import com.mysema.testutil.JPATestRunner;
 

File: querydsl-sql/src/test/java/com/mysema/query/QProjection.java
Patch:
@@ -5,8 +5,8 @@
  */
 package com.mysema.query;
 
+import com.mysema.query.types.ConstructorExpression;
 import com.mysema.query.types.Expression;
-import com.mysema.query.types.expr.ConstructorExpression;
 
 public class QProjection extends ConstructorExpression<Projection>{
 

File: querydsl-sql/src/test/java/com/mysema/query/SelectBaseTest.java
Patch:
@@ -43,15 +43,15 @@
 import com.mysema.query.sql.domain.IdName;
 import com.mysema.query.sql.domain.QEmployee;
 import com.mysema.query.sql.domain.QIdName;
+import com.mysema.query.types.ArrayConstructorExpression;
+import com.mysema.query.types.ConstructorExpression;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.ParamNotSetException;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.QTuple;
 import com.mysema.query.types.SubQueryExpression;
-import com.mysema.query.types.expr.ArrayConstructorExpression;
 import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.Coalesce;
-import com.mysema.query.types.expr.ConstructorExpression;
 import com.mysema.query.types.expr.NumberExpression;
 import com.mysema.query.types.expr.Param;
 import com.mysema.query.types.path.NumberPath;

File: querydsl-sql/src/test/java/com/mysema/query/sql/domain/QIdName.java
Patch:
@@ -5,8 +5,8 @@
  */
 package com.mysema.query.sql.domain;
 
+import com.mysema.query.types.ConstructorExpression;
 import com.mysema.query.types.Expression;
-import com.mysema.query.types.expr.ConstructorExpression;
 
 public class QIdName extends ConstructorExpression<IdName> {
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/JDBCTypeMapping.java
Patch:
@@ -64,7 +64,6 @@ public final class JDBCTypeMapping {
         registerDefault(Types.LONGVARBINARY, Object.class);
         registerDefault(Types.NULL, Object.class);
         registerDefault(Types.OTHER, Object.class);
-        registerDefault(Types.REAL, Object.class);
         registerDefault(Types.REF, Object.class);
         registerDefault(Types.ROWID, Object.class);
         registerDefault(Types.STRUCT, Object.class);

File: querydsl-core/src/main/java/com/mysema/query/support/SerializerBase.java
Patch:
@@ -16,7 +16,6 @@
 import com.mysema.query.QueryFlag;
 import com.mysema.query.QueryFlag.Position;
 import com.mysema.query.types.*;
-import com.mysema.query.types.Template.Element;
 
 /**
  * SerializerBase is a stub for Serializer implementations

File: querydsl-core/src/main/java/com/mysema/query/types/expr/StringExpression.java
Patch:
@@ -374,7 +374,7 @@ public StringExpression prepend(String str) {
      * @return this.split(regex)
      * @see java.lang.String#split(String)
      */
-    public Expression<String[]> split(String regex) {
+    public SimpleExpression<String[]> split(String regex) {
         return SimpleOperation.create(String[].class, Ops.StringOps.SPLIT, this, ConstantImpl.create(regex));
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathBuilder.java
Patch:
@@ -284,7 +284,7 @@ public <A> SetPath<A> getSet(String property, Class<A> type) {
      * @return
      */
     @SuppressWarnings("unchecked")
-    public <A> Path<A> get(Path<A> path){
+    public <A> SimplePath<A> get(Path<A> path){
         return getSimple(toString(path), (Class<A>)path.getType());
     }
 

File: querydsl-core/src/test/java/com/mysema/query/StringConstant.java
Patch:
@@ -157,7 +157,7 @@ public StringExpression prepend(String s) {
     }
 
     @Override
-    public Expression<String[]> split(String regex) {
+    public SimpleExpression<String[]> split(String regex) {
         return SimpleConstant.create(constant.split(regex));
     }
 

File: querydsl-core/src/main/java/com/mysema/query/codegen/TypeMappings.java
Patch:
@@ -49,7 +49,7 @@
  * @author tiwe
  *
  */
-public class TypeMappings {
+public final class TypeMappings {
 
     private final Map<TypeCategory, ClassType> customTypes = new HashMap<TypeCategory, ClassType>();
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/Constants.java
Patch:
@@ -23,5 +23,7 @@ public final class Constants {
             SimplePath.class,
             TimePath.class
             ));
+    
+    private Constants(){}
 
 }

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLMergeClause.java
Patch:
@@ -169,6 +169,7 @@ private PreparedStatement createStatement() throws SQLException{
             queryString = serializer.toString();
             logger.debug(queryString);
             stmt = connection.prepareStatement(queryString);
+            setParameters(stmt, serializer.getConstants(), serializer.getConstantPaths(), Collections.<Param<?>,Object>emptyMap());
             
             // add first batch
             stmt.addBatch();

File: querydsl-sql/src/test/java/com/mysema/query/_h2/MergeH2Test.java
Patch:
@@ -51,6 +51,9 @@ public void mergeBatch(){
             .addBatch();
      
         assertEquals(2, merge.execute());
+        
+        assertEquals(1l, query().from(survey).where(survey.name.eq("5")).count());
+        assertEquals(1l, query().from(survey).where(survey.name.eq("6")).count());
     }
     
     @Test

File: querydsl-core/src/main/java/com/mysema/query/types/Templates.java
Patch:
@@ -100,7 +100,7 @@ protected Templates() {
         add(Ops.MATCHES, "matches({0},{1})");
         add(Ops.STARTS_WITH, "startsWith({0},{1})");
         add(Ops.STARTS_WITH_IC, "startsWithIgnoreCase({0},{1})");
-        add(Ops.ENDS_WITH, "endsWith({0},{1}");
+        add(Ops.ENDS_WITH, "endsWith({0},{1})");
         add(Ops.ENDS_WITH_IC, "endsWithIgnoreCase({0},{1})");
         add(Ops.STRING_CONTAINS, "contains({0},{1})");
         add(Ops.STRING_CONTAINS_IC, "containsIc({0},{1})");

File: querydsl-apt/src/test/java/com/mysema/query/domain/DelegateTest.java
Patch:
@@ -41,17 +41,17 @@ public static class SimpleUser2 extends SimpleUser{
 
     @QueryDelegate(User.class)
     public static Expression<Boolean> isManagedBy(QDelegateTest_User user, User other){
-        return ConstantImpl.TRUE;
+        return ConstantImpl.create(true);
     }
 
     @QueryDelegate(User.class)
     public static Expression<Boolean> isManagedBy(QDelegateTest_User user, QDelegateTest_User other){
-        return ConstantImpl.TRUE;
+        return ConstantImpl.create(true);
     }
 
     @QueryDelegate(User.class)
     public static Expression<Boolean> simpleMethod(QDelegateTest_User user){
-        return ConstantImpl.TRUE;
+        return ConstantImpl.create(true);
     }
 
 //    @QueryDelegate(DelegateTest.User.class)

File: querydsl-apt/src/test/java/com/mysema/query/domain/ExprTest.java
Patch:
@@ -55,8 +55,8 @@ public void test() throws Throwable {
         exprs.add(ConstantImpl.create("Hello World!"));
         exprs.add(ConstantImpl.create(1000));
         exprs.add(ConstantImpl.create(10l));
-        exprs.add(ConstantImpl.TRUE);
-        exprs.add(ConstantImpl.FALSE);
+        exprs.add(ConstantImpl.create(true));
+        exprs.add(ConstantImpl.create(false));
 
         Set<Expression<?>> toVisit = new HashSet<Expression<?>>();
 

File: querydsl-apt/src/test/java/com/mysema/query/domain/QuerydslConfigTest.java
Patch:
@@ -13,18 +13,18 @@
 import org.junit.Test;
 
 import com.mysema.query.annotations.QueryEntity;
-import com.mysema.query.annotations.QuerydslConfig;
+import com.mysema.query.annotations.Config;
 
 public class QuerydslConfigTest {
 
-    @QuerydslConfig(entityAccessors=true)
+    @Config(entityAccessors=true)
     @QueryEntity
     public static class Superclass{
 
         Entity prop3;
     }
 
-    @QuerydslConfig(entityAccessors=true, listAccessors = true, mapAccessors= true)
+    @Config(entityAccessors=true, listAccessors = true, mapAccessors= true)
     @QueryEntity
     public static class Entity extends Superclass{
 

File: querydsl-apt/src/test/java/com/mysema/query/domain/RelationTest.java
Patch:
@@ -16,7 +16,7 @@
 import org.junit.Test;
 
 import com.mysema.query.annotations.QueryEntity;
-import com.mysema.query.annotations.QuerydslConfig;
+import com.mysema.query.annotations.Config;
 import com.mysema.query.domain.rel.RelationType2;
 import com.mysema.query.types.path.CollectionPath;
 import com.mysema.query.types.path.EnumPath;
@@ -54,7 +54,7 @@ public class GenericRelations{
     }
 
     @QueryEntity
-    @QuerydslConfig(listAccessors=true, mapAccessors=true)
+    @Config(listAccessors=true, mapAccessors=true)
     public class RelationType {
 
         MyEnum enumProperty;

File: querydsl-apt/src/test/java/com/mysema/query/domain/SimpleTypesTest.java
Patch:
@@ -20,7 +20,7 @@
 import com.mysema.query.annotations.QueryEntity;
 import com.mysema.query.annotations.QueryTransient;
 import com.mysema.query.annotations.QueryType;
-import com.mysema.query.annotations.QuerydslConfig;
+import com.mysema.query.annotations.Config;
 import com.mysema.query.types.path.ComparablePath;
 import com.mysema.query.types.path.DateTimePath;
 import com.mysema.query.types.path.EnumPath;
@@ -123,7 +123,7 @@ public boolean equals(Object o){
     }
 
     @QueryEntity
-    @QuerydslConfig(listAccessors=true)
+    @Config(listAccessors=true)
     public static class SimpleTypes {
         transient int test;
         List<Integer> testList;

File: querydsl-apt/src/test/java/com/mysema/query/domain/p5/package-info.java
Patch:
@@ -3,8 +3,8 @@
  * All rights reserved.
  *
  */
-@QuerydslVariables("Vars")
+@Variables("Vars")
 package com.mysema.query.domain.p5;
 
-import com.mysema.query.annotations.QuerydslVariables;
+import com.mysema.query.annotations.Variables;
 ;

File: querydsl-apt/src/test/java/com/mysema/query/extensions/QueryExtensions10Test.java
Patch:
@@ -25,15 +25,15 @@ public interface Interval<T>{
      */
     @QueryDelegate(Date.class)
     public static Expression<Boolean> period(DatePath<Date> expr, Interval<Date> period) {
-        return ConstantImpl.TRUE;
+        return ConstantImpl.create(true);
     }
 
     /**
      * Adds a timestamp period filter on a timestamp expression
      */
     @QueryDelegate(Timestamp.class)
     public static Expression<Boolean> period(DateTimePath<Timestamp> expr, Interval<Timestamp> period) {
-        return ConstantImpl.TRUE;
+        return ConstantImpl.create(true);
     }
     
     @QueryEmbeddable

File: querydsl-apt/src/test/java/com/mysema/query/extensions/QueryExtensions7Test.java
Patch:
@@ -36,7 +36,7 @@ public static interface ShortMethods{
     
     @QueryDelegate(Byte.class)
     public static Expression<Boolean> isNumeric(QByte byteValue){
-        return ConstantImpl.TRUE;
+        return ConstantImpl.create(true);
     }
     
     @Test

File: querydsl-apt/src/test/java/com/mysema/query/extensions/QueryExtensions8Test.java
Patch:
@@ -10,7 +10,7 @@
 import com.mysema.commons.lang.Pair;
 import com.mysema.query.annotations.QueryDelegate;
 import com.mysema.query.annotations.QueryEntity;
-import com.mysema.query.annotations.QuerydslConfig;
+import com.mysema.query.annotations.Config;
 import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.path.BooleanPath;
 import com.mysema.query.types.path.DatePath;
@@ -50,7 +50,7 @@ public static BooleanExpression eq(NumberPath<Integer> intVal, FileSize size){
     
 
     @QueryEntity
-    @QuerydslConfig(entityAccessors=true)
+    @Config(entityAccessors=true)
     public static class Entity {
         
         Entity superior;

File: querydsl-apt/src/test/java/com/mysema/query/extensions/QueryExtensions9Test.java
Patch:
@@ -13,7 +13,7 @@
 import com.mysema.commons.lang.Pair;
 import com.mysema.query.annotations.QueryDelegate;
 import com.mysema.query.annotations.QueryEntity;
-import com.mysema.query.annotations.QuerydslConfig;
+import com.mysema.query.annotations.Config;
 import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.path.BooleanPath;
 import com.mysema.query.types.path.DatePath;
@@ -63,7 +63,7 @@ public static BooleanExpression atMost(NumberPath<Integer> intValue, FileSize si
     
 
     @QueryEntity
-    @QuerydslConfig(entityAccessors=true)
+    @Config(entityAccessors=true)
     public static class Entity {
         
         Entity superior;

File: querydsl-core/src/main/java/com/mysema/query/types/Templates.java
Patch:
@@ -100,7 +100,7 @@ protected Templates() {
         add(Ops.MATCHES, "matches({0},{1})");
         add(Ops.STARTS_WITH, "startsWith({0},{1})");
         add(Ops.STARTS_WITH_IC, "startsWithIgnoreCase({0},{1})");
-        add(Ops.ENDS_WITH, "endsWith({0},{0}");
+        add(Ops.ENDS_WITH, "endsWith({0},{1}");
         add(Ops.ENDS_WITH_IC, "endsWithIgnoreCase({0},{1})");
         add(Ops.STRING_CONTAINS, "contains({0},{1})");
         add(Ops.STRING_CONTAINS_IC, "containsIc({0},{1})");

File: querydsl-sql/src/test/java/com/mysema/query/sql/mysql/MySQLQueryTest.java
Patch:
@@ -108,13 +108,13 @@ public void testForUpdate() {
     @Test
     public void testIntoOutfile() {
         query.intoOutfile(new File("target/out"));
-        assertEquals("select survey.NAME from SURVEY survey order by survey.NAME asc INTO OUTFILE 'target/out'", toString(query));
+        assertEquals("select survey.NAME from SURVEY survey order by survey.NAME asc INTO OUTFILE 'target" + File.separator + "out'", toString(query));
     }
     
     @Test
     public void testIntoDumpfile() {
         query.intoDumpfile(new File("target/out"));
-        assertEquals("select survey.NAME from SURVEY survey order by survey.NAME asc INTO DUMPFILE 'target/out'", toString(query));
+        assertEquals("select survey.NAME from SURVEY survey order by survey.NAME asc INTO DUMPFILE 'target" + File.separator + "out'", toString(query));
     }
 
     @Test

File: querydsl-core/src/main/java/com/mysema/query/JoinFlag.java
Patch:
@@ -10,7 +10,7 @@
 import net.jcip.annotations.Immutable;
 
 import com.mysema.query.types.Expression;
-import com.mysema.query.types.custom.StringTemplate;
+import com.mysema.query.types.template.StringTemplate;
 
 /**
  * JoinFlag defines a join related flag using an Expr instance

File: querydsl-core/src/main/java/com/mysema/query/QueryFlag.java
Patch:
@@ -11,7 +11,7 @@
 
 import com.mysema.commons.lang.Assert;
 import com.mysema.query.types.Expression;
-import com.mysema.query.types.custom.StringTemplate;
+import com.mysema.query.types.template.StringTemplate;
 
 /**
  * Defines a positioned flag in a query for customization of query serialization

File: querydsl-core/src/main/java/com/mysema/query/codegen/EmbeddableSerializer.java
Patch:
@@ -20,9 +20,9 @@
 import com.mysema.codegen.model.Types;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
-import com.mysema.query.types.custom.SimpleTemplate;
 import com.mysema.query.types.expr.ComparableExpression;
 import com.mysema.query.types.path.*;
+import com.mysema.query.types.template.SimpleTemplate;
 
 /**
  * EmbeddableSerializer is a Serializer implementation for embeddable types

File: querydsl-core/src/main/java/com/mysema/query/codegen/EntitySerializer.java
Patch:
@@ -35,10 +35,10 @@
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.PathMetadataFactory;
-import com.mysema.query.types.custom.SimpleTemplate;
 import com.mysema.query.types.expr.ComparableExpression;
 import com.mysema.query.types.expr.ConstructorExpression;
 import com.mysema.query.types.path.*;
+import com.mysema.query.types.template.SimpleTemplate;
 
 /**
  * EntitySerializer is a Serializer implementation for entity types

File: querydsl-core/src/main/java/com/mysema/query/codegen/SupertypeSerializer.java
Patch:
@@ -14,9 +14,9 @@
 
 import com.mysema.codegen.CodeWriter;
 import com.mysema.query.types.PathMetadata;
-import com.mysema.query.types.custom.SimpleTemplate;
 import com.mysema.query.types.expr.ComparableExpression;
 import com.mysema.query.types.path.SimplePath;
+import com.mysema.query.types.template.SimpleTemplate;
 
 /**
  * SupertypeSerializer is a Serializer implementation for supertypes

File: querydsl-core/src/main/java/com/mysema/query/types/path/NullExpr.java
Patch:
@@ -9,7 +9,7 @@
 
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.TemplateFactory;
-import com.mysema.query.types.custom.SimpleTemplate;
+import com.mysema.query.types.template.SimpleTemplate;
 
 /**
  * NullExpr defines a general null expression

File: querydsl-core/src/main/java/com/mysema/query/types/template/BooleanTemplate.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  *
  */
-package com.mysema.query.types.custom;
+package com.mysema.query.types.template;
 
 import java.util.Arrays;
 import java.util.List;

File: querydsl-core/src/main/java/com/mysema/query/types/template/ComparableTemplate.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  *
  */
-package com.mysema.query.types.custom;
+package com.mysema.query.types.template;
 
 import java.util.Arrays;
 import java.util.List;

File: querydsl-core/src/main/java/com/mysema/query/types/template/DateTemplate.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  *
  */
-package com.mysema.query.types.custom;
+package com.mysema.query.types.template;
 
 import java.util.Arrays;
 import java.util.List;

File: querydsl-core/src/main/java/com/mysema/query/types/template/DateTimeTemplate.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  *
  */
-package com.mysema.query.types.custom;
+package com.mysema.query.types.template;
 
 import java.util.Arrays;
 import java.util.List;

File: querydsl-core/src/main/java/com/mysema/query/types/template/EnumTemplate.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  *
  */
-package com.mysema.query.types.custom;
+package com.mysema.query.types.template;
 
 import java.util.Arrays;
 import java.util.List;

File: querydsl-core/src/main/java/com/mysema/query/types/template/NumberTemplate.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  *
  */
-package com.mysema.query.types.custom;
+package com.mysema.query.types.template;
 
 import java.util.Arrays;
 import java.util.List;

File: querydsl-core/src/main/java/com/mysema/query/types/template/SimpleTemplate.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  *
  */
-package com.mysema.query.types.custom;
+package com.mysema.query.types.template;
 
 import java.util.Arrays;
 import java.util.List;

File: querydsl-core/src/main/java/com/mysema/query/types/template/StringTemplate.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  *
  */
-package com.mysema.query.types.custom;
+package com.mysema.query.types.template;
 
 import java.util.Arrays;
 import java.util.List;

File: querydsl-core/src/main/java/com/mysema/query/types/template/TimeTemplate.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  *
  */
-package com.mysema.query.types.custom;
+package com.mysema.query.types.template;
 
 import java.util.Arrays;
 import java.util.List;

File: querydsl-core/src/main/java/com/mysema/query/types/template/package-info.java
Patch:
@@ -9,7 +9,7 @@
  * templates instead of operator patterns. Custom types are always implementation specific.
  */
 @DefaultAnnotation( { Nonnull.class })
-package com.mysema.query.types.custom;
+package com.mysema.query.types.template;
 
 import javax.annotation.Nonnull;
 

File: querydsl-core/src/test/java/com/mysema/query/DefaultQueryMetadataTest.java
Patch:
@@ -28,11 +28,11 @@
 import org.junit.Test;
 
 import com.mysema.query.QueryFlag.Position;
-import com.mysema.query.types.custom.NumberTemplate;
 import com.mysema.query.types.expr.NumberOperation;
 import com.mysema.query.types.path.BeanPath;
 import com.mysema.query.types.path.NumberPath;
 import com.mysema.query.types.path.StringPath;
+import com.mysema.query.types.template.NumberTemplate;
 import com.mysema.util.ReflectionUtils;
 
 public class DefaultQueryMetadataTest {

File: querydsl-core/src/test/java/com/mysema/query/serialization/SerializerBaseTest.java
Patch:
@@ -11,9 +11,9 @@
 
 import com.mysema.query.types.ConstantImpl;
 import com.mysema.query.types.JavaTemplates;
-import com.mysema.query.types.custom.StringTemplate;
 import com.mysema.query.types.path.PathBuilder;
 import com.mysema.query.types.path.StringPath;
+import com.mysema.query.types.template.StringTemplate;
 
 public class SerializerBaseTest {
 

File: querydsl-jpa/src/test/java/com/mysema/query/jpa/CustomExpressionsTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.TemplateFactory;
-import com.mysema.query.types.custom.StringTemplate;
+import com.mysema.query.types.template.StringTemplate;
 
 public class CustomExpressionsTest extends AbstractQueryTest{
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -45,9 +45,9 @@
 import com.mysema.query.types.Predicate;
 import com.mysema.query.types.QBean;
 import com.mysema.query.types.SubQueryExpression;
-import com.mysema.query.types.custom.SimpleTemplate;
 import com.mysema.query.types.expr.Param;
 import com.mysema.query.types.query.ListSubQuery;
+import com.mysema.query.types.template.SimpleTemplate;
 import com.mysema.util.ResultSetAdapter;
 
 /**

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLSubQuery.java
Patch:
@@ -15,7 +15,7 @@
 import com.mysema.query.types.Path;
 import com.mysema.query.types.Predicate;
 import com.mysema.query.types.SubQueryExpression;
-import com.mysema.query.types.custom.SimpleTemplate;
+import com.mysema.query.types.template.SimpleTemplate;
 
 /**
  * Abstract superclass for SubQuery implementations

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLSerializer.java
Patch:
@@ -21,7 +21,7 @@
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.QueryFlag.Position;
 import com.mysema.query.types.*;
-import com.mysema.query.types.custom.SimpleTemplate;
+import com.mysema.query.types.template.SimpleTemplate;
 
 /**
  * SqlSerializer serializes Querydsl queries into SQL

File: querydsl-sql/src/main/java/com/mysema/query/sql/Wildcard.java
Patch:
@@ -5,9 +5,9 @@
  */
 package com.mysema.query.sql;
 
-import com.mysema.query.types.custom.SimpleTemplate;
 import com.mysema.query.types.expr.NumberExpression;
 import com.mysema.query.types.expr.SimpleExpression;
+import com.mysema.query.types.template.SimpleTemplate;
 
 /**
  * Wildcard provides shortcuts for the wildcard (*) and wildcard count (count(*)) expressions

File: querydsl-sql/src/main/java/com/mysema/query/sql/mssql/RowNumber.java
Patch:
@@ -13,11 +13,11 @@
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.custom.NumberTemplate;
 import com.mysema.query.types.expr.ComparableExpression;
 import com.mysema.query.types.expr.NumberExpression;
 import com.mysema.query.types.expr.SimpleExpression;
 import com.mysema.query.types.path.NumberPath;
+import com.mysema.query.types.template.NumberTemplate;
 
 /**
  * RowNumber supports row_number constructs for MS SQL Server

File: querydsl-sql/src/main/java/com/mysema/query/sql/oracle/SumOver.java
Patch:
@@ -13,8 +13,8 @@
 
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.custom.NumberTemplate;
 import com.mysema.query.types.expr.NumberExpression;
+import com.mysema.query.types.template.NumberTemplate;
 
 /**
  * SumOver is a fluent type for Oracle specific sum over / partition by / order

File: querydsl-sql/src/test/java/com/mysema/query/_mssql/SelectMSSQLTest.java
Patch:
@@ -22,10 +22,10 @@
 import com.mysema.query.sql.SQLServerTemplates;
 import com.mysema.query.sql.mssql.RowNumber;
 import com.mysema.query.types.Expression;
-import com.mysema.query.types.custom.SimpleTemplate;
 import com.mysema.query.types.path.SimplePath;
 import com.mysema.query.types.query.ListSubQuery;
 import com.mysema.query.types.query.ObjectSubQuery;
+import com.mysema.query.types.template.SimpleTemplate;
 import com.mysema.testutil.Label;
 import com.mysema.testutil.ResourceCheck;
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/OracleTemplatesTest.java
Patch:
@@ -10,9 +10,9 @@
 import org.junit.Test;
 
 import com.mysema.query.sql.AbstractSQLQuery.UnionBuilder;
-import com.mysema.query.types.custom.SimpleTemplate;
 import com.mysema.query.types.expr.SimpleExpression;
 import com.mysema.query.types.path.NumberPath;
+import com.mysema.query.types.template.SimpleTemplate;
 
 
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/SQLTemplatesTest.java
Patch:
@@ -15,7 +15,7 @@
 import com.mysema.query.types.ConstantImpl;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
-import com.mysema.query.types.custom.SimpleTemplate;
+import com.mysema.query.types.template.SimpleTemplate;
 
 public class SQLTemplatesTest {
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/CollectionExpression.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.Collection;
 
 import com.mysema.query.types.Expression;
+import com.mysema.query.types.ParametrizedExpression;
 
 /**
  * CollectionExpression represents java.util.Collection typed expressions
@@ -17,7 +18,7 @@
  * @param <E>
  * @see java.util.Collection
  */
-public interface CollectionExpression<C extends Collection<E>, E>{
+public interface CollectionExpression<C extends Collection<E>, E> extends ParametrizedExpression<C>{
 
     /**
      * Get an expression for <code>this.contains(child)</code>

File: querydsl-core/src/main/java/com/mysema/query/codegen/EntitySerializer.java
Patch:
@@ -498,7 +498,8 @@ private void normalArgsMethod(final EntityType model, Method method, CodeWriter
         writer.append(", this");
         for (Parameter p : method.getParameters()){
             // TODO : replace with class reference
-            writer.append(COMMA + "new ConstantImpl(" + p.getName() + ")");
+            String paramType = writer.getGenericName(true, p.getType());
+            writer.append(COMMA + "new ConstantImpl<"+paramType+">(" + p.getName() + ")");
         }
         writer.append(");\n");
 

File: querydsl-apt/src/test/java/com/mysema/query/apt/AbstractProcessorTest.java
Patch:
@@ -43,6 +43,8 @@ protected void process(Class<? extends AbstractProcessor> processorClass, List<S
         options.add("-proc:only");
         options.add("-processor");
         options.add(processorClass.getName());
+        options.add("-sourcepath");
+        options.add("src/test/java");
         options.addAll(classes);
         int compilationResult = compiler.run(null, null, null, options.toArray(new String[options.size()]));
         if(compilationResult == 0){

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColQuerySerializer.java
Patch:
@@ -10,7 +10,6 @@
 
 import org.apache.commons.lang.StringUtils;
 
-import com.mysema.query.SimpleConstant;
 import com.mysema.query.types.*;
 
 /**
@@ -124,9 +123,10 @@ protected void visitOperation(Class<?> type, Operator<?> operator, List<Expressi
         }
     }
 
+    @SuppressWarnings("unchecked")
     @Override
     public Void visit(FactoryExpression<?> expr, Void context) {
-        handle(SimpleConstant.create(expr));
+        handle(new ConstantImpl(expr));
         append(".newInstance(");
         handle(", ", expr.getArgs());
         append(")");

File: querydsl-apt/src/test/java/com/mysema/query/domain/DelegateTest.java
Patch:
@@ -5,11 +5,11 @@
 
 import org.junit.Test;
 
+import com.mysema.query.BooleanConstant;
 import com.mysema.query.annotations.QueryDelegate;
 import com.mysema.query.annotations.QueryEntity;
 import com.mysema.query.annotations.QuerySupertype;
 import com.mysema.query.types.expr.BooleanExpression;
-import com.mysema.query.types.expr.BooleanConstant;
 
 public class DelegateTest {
 

File: querydsl-apt/src/test/java/com/mysema/query/domain/ExprTest.java
Patch:
@@ -15,12 +15,12 @@
 
 import org.junit.Test;
 
+import com.mysema.query.BooleanConstant;
+import com.mysema.query.NumberConstant;
+import com.mysema.query.StringConstant;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.expr.BooleanExpression;
-import com.mysema.query.types.expr.BooleanConstant;
-import com.mysema.query.types.expr.NumberConstant;
 import com.mysema.query.types.expr.StringExpression;
-import com.mysema.query.types.expr.StringConstant;
 
 public class ExprTest {
 

File: querydsl-apt/src/test/java/com/mysema/query/domain/PathMetadataTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.Ignore;
 import org.junit.Test;
 
-import com.mysema.query.types.expr.StringConstant;
+import com.mysema.query.StringConstant;
 import com.mysema.query.types.expr.StringExpression;
 
 public class PathMetadataTest {

File: querydsl-apt/src/test/java/com/mysema/query/domain/QueryProjectionTest.java
Patch:
@@ -12,13 +12,13 @@
 
 import org.junit.Test;
 
+import com.mysema.query.NumberConstant;
+import com.mysema.query.SimpleConstant;
+import com.mysema.query.StringConstant;
 import com.mysema.query.annotations.PropertyType;
 import com.mysema.query.annotations.QueryEntity;
 import com.mysema.query.annotations.QueryProjection;
 import com.mysema.query.annotations.QueryType;
-import com.mysema.query.types.expr.NumberConstant;
-import com.mysema.query.types.expr.StringConstant;
-import com.mysema.query.types.expr.SimpleConstant;
 
 public class QueryProjectionTest {
 

File: querydsl-apt/src/test/java/com/mysema/query/extensions/QueryExtensions10Test.java
Patch:
@@ -5,12 +5,12 @@
 
 import org.junit.Test;
 
+import com.mysema.query.BooleanConstant;
 import com.mysema.query.annotations.QueryDelegate;
 import com.mysema.query.annotations.QueryEmbeddable;
 import com.mysema.query.annotations.QueryEntity;
 import com.mysema.query.annotations.QuerySupertype;
 import com.mysema.query.types.expr.BooleanExpression;
-import com.mysema.query.types.expr.BooleanConstant;
 import com.mysema.query.types.path.DatePath;
 import com.mysema.query.types.path.DateTimePath;
 

File: querydsl-apt/src/test/java/com/mysema/query/extensions/QueryExtensions5Test.java
Patch:
@@ -9,10 +9,10 @@
 
 import org.junit.Test;
 
+import com.mysema.query.StringConstant;
 import com.mysema.query.annotations.QueryEntity;
 import com.mysema.query.annotations.QueryExtensions;
 import com.mysema.query.annotations.QueryMethod;
-import com.mysema.query.types.expr.StringConstant;
 
 public class QueryExtensions5Test {
 

File: querydsl-apt/src/test/java/com/mysema/query/extensions/QueryExtensions7Test.java
Patch:
@@ -5,12 +5,12 @@
 import org.junit.Ignore;
 import org.junit.Test;
 
+import com.mysema.query.BooleanConstant;
 import com.mysema.query.annotations.QueryDelegate;
 import com.mysema.query.annotations.QueryEntity;
 import com.mysema.query.annotations.QueryExtensions;
 import com.mysema.query.annotations.QueryMethod;
 import com.mysema.query.types.expr.BooleanExpression;
-import com.mysema.query.types.expr.BooleanConstant;
 
 import ext.java.lang.QByte;
 

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColQuerySerializer.java
Patch:
@@ -10,8 +10,8 @@
 
 import org.apache.commons.lang.StringUtils;
 
+import com.mysema.query.SimpleConstant;
 import com.mysema.query.types.*;
-import com.mysema.query.types.expr.SimpleConstant;
 
 /**
  * ColQuerySerializer is a Serializer implementation for the Java language

File: querydsl-core/src/main/java/com/mysema/query/codegen/EntitySerializer.java
Patch:
@@ -498,7 +498,7 @@ private void normalArgsMethod(final EntityType model, Method method, CodeWriter
         writer.append(", this");
         for (Parameter p : method.getParameters()){
             // TODO : replace with class reference
-            writer.append(COMMA + "SimpleConstant.create(" + p.getName() + ")");
+            writer.append(COMMA + "new ConstantImpl(" + p.getName() + ")");
         }
         writer.append(");\n");
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/Coalesce.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import com.mysema.query.types.ConstantImpl;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Visitor;
@@ -52,7 +53,7 @@ public final Coalesce<T> add(Expression<T> expr){
     }
 
     public final Coalesce<T> add(T constant){
-        this.exprs.add(SimpleConstant.create(constant));
+        this.exprs.add(new ConstantImpl<T>(constant));
         return this;
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/CollectionExpressionBase.java
Patch:
@@ -9,6 +9,7 @@
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.types.ConstantImpl;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Ops;
 
@@ -35,7 +36,7 @@ public CollectionExpressionBase(Class<? extends C> type) {
 
     @Override
     public final BooleanExpression contains(E child) {
-        return contains(SimpleConstant.create(child));
+        return contains(new ConstantImpl<E>(child));
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ComparableExpressionBase.java
Patch:
@@ -7,6 +7,7 @@
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.types.ConstantImpl;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Order;
 import com.mysema.query.types.OrderSpecifier;
@@ -54,7 +55,7 @@ public final OrderSpecifier<D> asc() {
      * @return
      */
     public <A extends Number & Comparable<? super A>> NumberExpression<A> castToNum(Class<A> type) {
-        return NumberOperation.create(type, Ops.NUMCAST, this, SimpleConstant.create(type));
+        return NumberOperation.create(type, Ops.NUMCAST, this, new ConstantImpl(type));
     }
 
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/MapExpressionBase.java
Patch:
@@ -9,6 +9,7 @@
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.types.ConstantImpl;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Ops;
 
@@ -46,7 +47,7 @@ public final BooleanExpression containsKey(Expression<K> key) {
 
     @Override
     public final BooleanExpression containsKey(K key) {
-        return BooleanOperation.create(Ops.CONTAINS_KEY, this, SimpleConstant.create(key));
+        return BooleanOperation.create(Ops.CONTAINS_KEY, this, new ConstantImpl<K>(key));
     }
 
     @Override
@@ -56,7 +57,7 @@ public final BooleanExpression containsValue(Expression<V> value) {
 
     @Override
     public final BooleanExpression containsValue(V value) {
-        return BooleanOperation.create(Ops.CONTAINS_VALUE, this, SimpleConstant.create(value));
+        return BooleanOperation.create(Ops.CONTAINS_VALUE, this, new ConstantImpl<V>(value));
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/BeanPath.java
Patch:
@@ -12,16 +12,16 @@
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.types.ConstantImpl;
 import com.mysema.query.types.ExpressionException;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
+import com.mysema.query.types.PathImpl;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.PathMetadataFactory;
-import com.mysema.query.types.PathImpl;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.BooleanOperation;
-import com.mysema.query.types.expr.SimpleConstant;
 import com.mysema.query.types.expr.SimpleExpression;
 
 /**
@@ -319,7 +319,7 @@ public int hashCode() {
      * @return
      */
     public <B extends D> BooleanExpression instanceOf(Class<B> type) {
-        return BooleanOperation.create(Ops.INSTANCE_OF, this, SimpleConstant.create(type));
+        return BooleanOperation.create(Ops.INSTANCE_OF, this, new ConstantImpl<Class<B>>(type));
     }
 
     @Override

File: querydsl-core/src/test/java/com/mysema/query/BooleanBuilderTest.java
Patch:
@@ -12,7 +12,6 @@
 import org.junit.Test;
 
 import com.mysema.query.types.expr.BooleanExpression;
-import com.mysema.query.types.expr.BooleanConstant;
 import com.mysema.query.types.path.BooleanPath;
 
 /**

File: querydsl-core/src/test/java/com/mysema/query/BooleanConstant.java
Patch:
@@ -3,10 +3,11 @@
  * All rights reserved.
  *
  */
-package com.mysema.query.types.expr;
+package com.mysema.query;
 
 import com.mysema.query.types.Constant;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.BooleanExpression;
 
 /**
  * BooleanConstant provides constants for Boolean.TRUE and Boolean.FALSE

File: querydsl-core/src/test/java/com/mysema/query/DateConstant.java
Patch:
@@ -3,12 +3,14 @@
  * All rights reserved.
  *
  */
-package com.mysema.query.types.expr;
+package com.mysema.query;
 
 import java.util.Calendar;
 
 import com.mysema.query.types.Constant;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.DateExpression;
+import com.mysema.query.types.expr.NumberExpression;
 
 /**
  * @author tiwe

File: querydsl-core/src/test/java/com/mysema/query/DateTimeConstant.java
Patch:
@@ -3,10 +3,12 @@
  * All rights reserved.
  *
  */
-package com.mysema.query.types.expr;
+package com.mysema.query;
 
 import com.mysema.query.types.Constant;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.DateTimeExpression;
+import com.mysema.query.types.expr.NumberExpression;
 
 /**
  * @author tiwe

File: querydsl-core/src/test/java/com/mysema/query/JoinExpressionTest.java
Patch:
@@ -11,7 +11,6 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.expr.BooleanConstant;
 import com.mysema.query.types.path.StringPath;
 
 public class JoinExpressionTest {

File: querydsl-core/src/test/java/com/mysema/query/NumberConstant.java
Patch:
@@ -3,12 +3,14 @@
  * All rights reserved.
  *
  */
-package com.mysema.query.types.expr;
+package com.mysema.query;
 
 import com.mysema.commons.lang.Assert;
 import com.mysema.query.types.Constant;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.BooleanExpression;
+import com.mysema.query.types.expr.NumberExpression;
 import com.mysema.util.MathUtils;
 
 /**

File: querydsl-core/src/test/java/com/mysema/query/SimpleConstant.java
Patch:
@@ -3,11 +3,13 @@
  * All rights reserved.
  *
  */
-package com.mysema.query.types.expr;
+package com.mysema.query;
 
 import com.mysema.commons.lang.Assert;
 import com.mysema.query.types.Constant;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.BooleanExpression;
+import com.mysema.query.types.expr.SimpleExpression;
 
 /**
  * SimpleConstant represents general constant expressions

File: querydsl-core/src/test/java/com/mysema/query/TimeConstant.java
Patch:
@@ -3,12 +3,14 @@
  * All rights reserved.
  *
  */
-package com.mysema.query.types.expr;
+package com.mysema.query;
 
 import java.util.Calendar;
 
 import com.mysema.query.types.Constant;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.NumberExpression;
+import com.mysema.query.types.expr.TimeExpression;
 
 /**
  * @author tiwe

File: querydsl-core/src/test/java/com/mysema/query/serialization/SerializerBaseTest.java
Patch:
@@ -9,9 +9,9 @@
 
 import org.junit.Test;
 
+import com.mysema.query.StringConstant;
 import com.mysema.query.types.JavaTemplates;
 import com.mysema.query.types.custom.StringTemplate;
-import com.mysema.query.types.expr.StringConstant;
 import com.mysema.query.types.path.PathBuilder;
 import com.mysema.query.types.path.StringPath;
 

File: querydsl-core/src/test/java/com/mysema/query/types/ConstructorExpressionTest.java
Patch:
@@ -7,11 +7,11 @@
 
 import org.junit.Test;
 
+import com.mysema.query.NumberConstant;
+import com.mysema.query.StringConstant;
 import com.mysema.query.types.expr.ConstructorExpression;
 import com.mysema.query.types.expr.NumberExpression;
-import com.mysema.query.types.expr.NumberConstant;
 import com.mysema.query.types.expr.StringExpression;
-import com.mysema.query.types.expr.StringConstant;
 
 public class ConstructorExpressionTest {
 

File: querydsl-core/src/test/java/com/mysema/query/types/DateConstantTest.java
Patch:
@@ -12,8 +12,8 @@
 
 import org.junit.Test;
 
+import com.mysema.query.DateConstant;
 import com.mysema.query.types.expr.DateExpression;
-import com.mysema.query.types.expr.DateConstant;
 
 public class DateConstantTest {
 

File: querydsl-core/src/test/java/com/mysema/query/types/DateTimeConstantTest.java
Patch:
@@ -12,8 +12,8 @@
 
 import org.junit.Test;
 
+import com.mysema.query.DateTimeConstant;
 import com.mysema.query.types.expr.DateTimeExpression;
-import com.mysema.query.types.expr.DateTimeConstant;
 
 public class DateTimeConstantTest {
 

File: querydsl-core/src/test/java/com/mysema/query/types/StringConstantTest.java
Patch:
@@ -9,8 +9,8 @@
 
 import org.junit.Test;
 
+import com.mysema.query.StringConstant;
 import com.mysema.query.types.expr.StringExpression;
-import com.mysema.query.types.expr.StringConstant;
 
 public class StringConstantTest {
 

File: querydsl-core/src/test/java/com/mysema/query/types/TimeConstantTest.java
Patch:
@@ -12,8 +12,8 @@
 
 import org.junit.Test;
 
+import com.mysema.query.TimeConstant;
 import com.mysema.query.types.expr.TimeExpression;
-import com.mysema.query.types.expr.TimeConstant;
 
 public class TimeConstantTest {
 

File: querydsl-core/src/test/java/com/mysema/query/types/custom/CustomTest.java
Patch:
@@ -16,6 +16,7 @@
 
 import org.junit.Test;
 
+import com.mysema.query.BooleanConstant;
 import com.mysema.query.types.TemplateExpression;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.JavaTemplates;
@@ -24,7 +25,6 @@
 import com.mysema.query.types.Templates;
 import com.mysema.query.types.ToStringVisitor;
 import com.mysema.query.types.expr.BooleanExpression;
-import com.mysema.query.types.expr.BooleanConstant;
 import com.mysema.query.types.path.StringPath;
 
 public class CustomTest {

File: querydsl-hql/src/main/java/com/mysema/query/jpa/JPQLSerializer.java
Patch:
@@ -21,11 +21,11 @@
 import com.mysema.query.JoinExpression;
 import com.mysema.query.JoinType;
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.SimpleConstant;
+import com.mysema.query.StringConstant;
 import com.mysema.query.types.*;
 import com.mysema.query.types.expr.ConstructorExpression;
-import com.mysema.query.types.expr.SimpleConstant;
 import com.mysema.query.types.expr.SimpleOperation;
-import com.mysema.query.types.expr.StringConstant;
 import com.mysema.util.MathUtils;
 
 /**

File: querydsl-lucene/src/test/java/com/mysema/query/lucene/LuceneSerializerTest.java
Patch:
@@ -35,10 +35,10 @@
 import com.mysema.query.MatchingFilters;
 import com.mysema.query.Module;
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.StringConstant;
 import com.mysema.query.Target;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.expr.BooleanExpression;
-import com.mysema.query.types.expr.StringConstant;
 import com.mysema.query.types.path.NumberPath;
 import com.mysema.query.types.path.StringPath;
 import com.mysema.query.types.path.PathBuilder;

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLSerializer.java
Patch:
@@ -19,10 +19,10 @@
 import com.mysema.query.JoinExpression;
 import com.mysema.query.QueryFlag;
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.SimpleConstant;
 import com.mysema.query.QueryFlag.Position;
 import com.mysema.query.types.*;
 import com.mysema.query.types.custom.SimpleTemplate;
-import com.mysema.query.types.expr.SimpleConstant;
 
 /**
  * SqlSerializer serializes Querydsl queries into SQL

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLInsertClause.java
Patch:
@@ -27,6 +27,7 @@
 import com.mysema.query.QueryException;
 import com.mysema.query.QueryFlag;
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.SimpleConstant;
 import com.mysema.query.QueryFlag.Position;
 import com.mysema.query.dml.InsertClause;
 import com.mysema.query.sql.Configuration;
@@ -37,7 +38,6 @@
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.expr.Param;
-import com.mysema.query.types.expr.SimpleConstant;
 import com.mysema.query.types.path.NullExpr;
 import com.mysema.util.ResultSetAdapter;
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLMergeClause.java
Patch:
@@ -23,6 +23,7 @@
 import com.mysema.query.QueryException;
 import com.mysema.query.QueryFlag;
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.SimpleConstant;
 import com.mysema.query.QueryFlag.Position;
 import com.mysema.query.dml.StoreClause;
 import com.mysema.query.sql.Configuration;
@@ -36,7 +37,6 @@
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.expr.Param;
-import com.mysema.query.types.expr.SimpleConstant;
 import com.mysema.query.types.path.NullExpr;
 
 /**

File: querydsl-sql/src/test/java/com/mysema/query/QProjection.java
Patch:
@@ -7,7 +7,6 @@
 
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.expr.ConstructorExpression;
-import com.mysema.query.types.expr.SimpleConstant;
 
 public class QProjection extends ConstructorExpression<Projection>{
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/SQLTemplatesTest.java
Patch:
@@ -12,10 +12,10 @@
 
 import org.junit.Test;
 
+import com.mysema.query.NumberConstant;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.custom.SimpleTemplate;
-import com.mysema.query.types.expr.NumberConstant;
 
 public class SQLTemplatesTest {
 

File: querydsl-apt/src/test/java/com/mysema/query/domain/ExprTest.java
Patch:
@@ -54,7 +54,7 @@ public void test() throws Throwable {
         exprs.add(QReservedNamesTest_ReservedNames.reservedNames);
         exprs.add(QSimpleTypesTest_SimpleTypes.simpleTypes);
 
-        exprs.add(StringConstant.create("Hello World!"));
+        exprs.add(new StringConstant("Hello World!"));
         exprs.add(NumberConstant.create(1000));
         exprs.add(NumberConstant.create(10l));
         exprs.add(BooleanConstant.TRUE);

File: querydsl-apt/src/test/java/com/mysema/query/extensions/QueryExtensions5Test.java
Patch:
@@ -57,11 +57,11 @@ public interface Entit2yExt{
     public void test_prop_and_method_available(){
         assertNotNull(QQueryExtensions5Test_Entity.entity.prop);
         assertNotNull(QQueryExtensions5Test_Entity.entity.method());
-        assertNotNull(QQueryExtensions5Test_Entity.entity.method(StringConstant.create("")));
+        assertNotNull(QQueryExtensions5Test_Entity.entity.method(new StringConstant("")));
 
         assertNotNull(QQueryExtensions5Test_Entity2.entity2.prop);
         assertNotNull(QQueryExtensions5Test_Entity2.entity2.method());
-        assertNotNull(QQueryExtensions5Test_Entity2.entity2.method(StringConstant.create("")));
+        assertNotNull(QQueryExtensions5Test_Entity2.entity2.method(new StringConstant("")));
     }
 
 }

File: querydsl-core/src/main/java/com/mysema/query/Query.java
Patch:
@@ -9,8 +9,8 @@
 
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.OrderSpecifier;
+import com.mysema.query.types.ParamExpression;
 import com.mysema.query.types.Predicate;
-import com.mysema.query.types.expr.Param;
 
 /**
  * Query provides a query interface of the fluent query DSL.
@@ -79,6 +79,6 @@ public interface Query<Q extends Query<Q>> extends FilteredClause<Q>{
      * @param value
      * @return
      */
-    <T> Q set(Param<T> param, T value);
+    <T> Q set(ParamExpression<T> param, T value);
 
 }

File: querydsl-core/src/main/java/com/mysema/query/QueryMetadata.java
Patch:
@@ -14,8 +14,8 @@
 
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.OrderSpecifier;
+import com.mysema.query.types.ParamExpression;
 import com.mysema.query.types.Predicate;
-import com.mysema.query.types.expr.Param;
 
 /**
  * QueryMetadata defines query metadata such as query sources, filtering
@@ -152,7 +152,7 @@ public interface QueryMetadata extends Serializable {
      *
      * @return
      */
-    Map<Param<?>,Object> getParams();
+    Map<ParamExpression<?>,Object> getParams();
 
     /**
      * Get the expressions aggregated into a single boolean expression or null,
@@ -212,7 +212,7 @@ public interface QueryMetadata extends Serializable {
      * @param param
      * @param value
      */
-    <T> void setParam(Param<T> param, T value);
+    <T> void setParam(ParamExpression<T> param, T value);
     
     /**
      * @param flag

File: querydsl-core/src/main/java/com/mysema/query/SimpleQuery.java
Patch:
@@ -8,8 +8,8 @@
 import javax.annotation.Nonnegative;
 
 import com.mysema.query.types.OrderSpecifier;
+import com.mysema.query.types.ParamExpression;
 import com.mysema.query.types.Predicate;
-import com.mysema.query.types.expr.Param;
 
 /**
  * SimpleQuery defines a simple querying interface than {@link Query}
@@ -69,6 +69,6 @@ public interface SimpleQuery<Q extends SimpleQuery<Q>> {
      * @param value
      * @return
      */
-    <T> Q set(Param<T> param, T value);
+    <T> Q set(ParamExpression<T> param, T value);
 
 }

File: querydsl-core/src/main/java/com/mysema/query/support/QueryBase.java
Patch:
@@ -8,8 +8,8 @@
 import com.mysema.query.QueryModifiers;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.OrderSpecifier;
+import com.mysema.query.types.ParamExpression;
 import com.mysema.query.types.Predicate;
-import com.mysema.query.types.expr.Param;
 
 /**
  * QueryBase provides a stub for Query implementations
@@ -57,7 +57,7 @@ public Q restrict(QueryModifiers modifiers) {
         return queryMixin.restrict(modifiers);
     }
 
-    public <P> Q set(Param<P> param, P value){
+    public <P> Q set(ParamExpression<P> param, P value){
         return queryMixin.set(param, value);
     }
 

File: querydsl-core/src/main/java/com/mysema/query/support/QueryMixin.java
Patch:
@@ -18,10 +18,10 @@
 import com.mysema.query.types.ExpressionUtils;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.OrderSpecifier;
+import com.mysema.query.types.ParamExpression;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.Predicate;
 import com.mysema.query.types.SubQueryExpression;
-import com.mysema.query.types.expr.Param;
 import com.mysema.query.types.expr.SimpleOperation;
 import com.mysema.query.types.path.MapPath;
 
@@ -341,7 +341,7 @@ public <P> T rightJoin(SubQueryExpression<P> target, Path alias) {
         return self;
     }
 
-    public <P> T set(Param<P> param, P value){
+    public <P> T set(ParamExpression<P> param, P value){
         metadata.setParam(param, value);
         return self;
     }

File: querydsl-core/src/main/java/com/mysema/query/support/SimpleQueryAdapter.java
Patch:
@@ -16,8 +16,8 @@
 import com.mysema.query.SimpleQuery;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.OrderSpecifier;
+import com.mysema.query.types.ParamExpression;
 import com.mysema.query.types.Predicate;
-import com.mysema.query.types.expr.Param;
 
 import edu.umd.cs.findbugs.annotations.SuppressWarnings;
 
@@ -108,7 +108,7 @@ public SimpleQueryAdapter<T> restrict(QueryModifiers modifiers) {
     }
 
     @Override
-    public <P> SimpleQueryAdapter<T> set(Param<P> param, P value) {
+    public <P> SimpleQueryAdapter<T> set(ParamExpression<P> param, P value) {
         query.set(param, value);
         return this;
     }

File: querydsl-core/src/main/java/com/mysema/query/types/expr/CaseBuilder.java
Patch:
@@ -184,7 +184,7 @@ protected NumberExpression<A> createResult(Class<A> type, Expression<A> last) {
         }
 
         public Cases<String, StringExpression> then(String str){
-            return then(StringConstant.create(str));
+            return then(new StringConstant(str));
         }
 
         public <A extends Number & Comparable<?>> Cases<A, NumberExpression<A>> then(A num){

File: querydsl-core/src/main/java/com/mysema/query/types/expr/CaseForEqBuilder.java
Patch:
@@ -112,7 +112,7 @@ protected StringExpression createResult(Class<String> type, Expression<String> l
     }
 
     public Cases<String,StringExpression> then(String then){
-        return then(StringConstant.create(then));
+        return then(new StringConstant(then));
     }
 
     public abstract class Cases<T, Q extends Expression<T>> {

File: querydsl-core/src/test/java/com/mysema/query/MatchingFilters.java
Patch:
@@ -251,7 +251,7 @@ public Collection<BooleanExpression> string(StringExpression expr, StringExpress
     public Collection<BooleanExpression> string(StringExpression expr, StringExpression other,  String knownValue){
         HashSet<BooleanExpression> rv = new HashSet<BooleanExpression>();
         rv.addAll(string(expr, other));
-        rv.addAll(string(expr, StringConstant.create(knownValue)));
+        rv.addAll(string(expr, new StringConstant(knownValue)));
         return rv;
     }
 

File: querydsl-core/src/test/java/com/mysema/query/Projections.java
Patch:
@@ -162,7 +162,7 @@ public <A extends Number & Comparable<A>> Collection<NumberExpression<?>> numeri
     public Collection<SimpleExpression<String>> string(StringExpression expr, StringExpression other, String knownValue){
         HashSet<SimpleExpression<String>> rv = new HashSet<SimpleExpression<String>>();
         rv.addAll(stringProjections(expr, other));
-        rv.addAll(stringProjections(expr, StringConstant.create(knownValue)));
+        rv.addAll(stringProjections(expr, new StringConstant(knownValue)));
         return rv;
     }
 

File: querydsl-core/src/test/java/com/mysema/query/types/ConstructorExpressionTest.java
Patch:
@@ -37,14 +37,14 @@ public Projection(CharSequence text){
     @Test
     public void test_Constructor(){
         NumberExpression<Long> longVal = NumberConstant.create(1l);
-        StringExpression stringVal = StringConstant.create("");
+        StringExpression stringVal = new StringConstant("");
         new ConstructorExpression<Projection>(Projection.class, new Class[]{long.class, String.class}, longVal, stringVal).newInstance(0l,"");
     }
 
     @Test
     public void test_create(){
         NumberExpression<Long> longVal = NumberConstant.create(1l);
-        StringExpression stringVal = StringConstant.create("");
+        StringExpression stringVal = new StringConstant("");
         ConstructorExpression.create(Projection.class, longVal, stringVal).newInstance(0l,"");
     }
 
@@ -61,7 +61,7 @@ public void test_create3(){
 
     @Test
     public void test_create4(){
-        StringExpression stringVal = StringConstant.create("");
+        StringExpression stringVal = new StringConstant("");
         ConstructorExpression.create(Projection.class, stringVal).newInstance("");
     }
 

File: querydsl-core/src/test/java/com/mysema/query/types/StringConstantTest.java
Patch:
@@ -33,6 +33,6 @@ public void test2(){
     }
 
     private StringExpression expr(String str){
-        return StringConstant.create(str);
+        return new StringConstant(str);
     }
 }

File: querydsl-hibernate-search/src/main/java/com/mysema/query/search/SearchQuery.java
Patch:
@@ -24,8 +24,8 @@
 import com.mysema.query.support.QueryMixin;
 import com.mysema.query.types.EntityPath;
 import com.mysema.query.types.OrderSpecifier;
+import com.mysema.query.types.ParamExpression;
 import com.mysema.query.types.Predicate;
-import com.mysema.query.types.expr.Param;
 
 /**
  * SearchQuery is a Query implementation for Hibernate Search
@@ -139,7 +139,7 @@ public SearchQuery<T> restrict(QueryModifiers modifiers) {
     }
 
     @Override
-    public <P> SearchQuery<T> set(Param<P> param, P value) {
+    public <P> SearchQuery<T> set(ParamExpression<P> param, P value) {
         return queryMixin.set(param, value);
     }
 

File: querydsl-hql/src/main/java/com/mysema/query/jpa/JPQLSerializer.java
Patch:
@@ -128,7 +128,7 @@ private <T> Expression<?> regexToLike(Operation<T> operation) {
     }
 
     private Expression<?> regexToLike(String str){
-        return StringConstant.create(str.replace(".*", "%").replace(".", "_"));
+        return ConstantImpl.create(str.replace(".*", "%").replace(".", "_"));
     }
 
     public void serialize(QueryMetadata metadata, boolean forCountRow, @Nullable String projection) {
@@ -320,9 +320,9 @@ protected void visitOperation(Class<?> type, Operator<?> operator, List<Expressi
                 Class<?> cl = ((Class<?>) ((Constant<?>) newArgs.get(1)).getConstant());
                 // use discriminator value instead of fqnm
                 if (cl.getAnnotation(DiscriminatorValue.class) != null){
-                    newArgs.set(1, StringConstant.create(cl.getAnnotation(DiscriminatorValue.class).value()));
+                    newArgs.set(1, ConstantImpl.create(cl.getAnnotation(DiscriminatorValue.class).value()));
                 }else{
-                    newArgs.set(1, StringConstant.create(cl.getName()));
+                    newArgs.set(1, ConstantImpl.create(cl.getName()));
                 }
                 super.visitOperation(type, operator, newArgs);
             }else{

File: querydsl-hql/src/main/java/com/mysema/query/jpa/hibernate/HibernateUtil.java
Patch:
@@ -22,6 +22,7 @@
 import org.hibernate.type.ShortType;
 import org.hibernate.type.Type;
 
+import com.mysema.query.types.ParamExpression;
 import com.mysema.query.types.ParamNotSetException;
 import com.mysema.query.types.expr.Param;
 
@@ -48,7 +49,7 @@ public final class HibernateUtil {
 
     private HibernateUtil(){}
 
-    public static void setConstants(Query query, Map<Object,String> constants, Map<Param<?>, Object> params) {
+    public static void setConstants(Query query, Map<Object,String> constants, Map<ParamExpression<?>, Object> params) {
         for (Map.Entry<Object, String> entry : constants.entrySet()){
             String key = entry.getValue();
             Object val = entry.getKey();

File: querydsl-hql/src/main/java/com/mysema/query/jpa/impl/JPAUtil.java
Patch:
@@ -9,6 +9,7 @@
 
 import javax.persistence.Query;
 
+import com.mysema.query.types.ParamExpression;
 import com.mysema.query.types.ParamNotSetException;
 import com.mysema.query.types.expr.Param;
 
@@ -22,7 +23,7 @@ public final class JPAUtil {
 
     private JPAUtil(){}
 
-    public static void setConstants(Query query, Map<Object,String> constants, Map<Param<?>, Object> params) {
+    public static void setConstants(Query query, Map<Object,String> constants, Map<ParamExpression<?>, Object> params) {
         for (Map.Entry<Object,String> entry : constants.entrySet()){
             String key = entry.getValue();
             Object val = entry.getKey();

File: querydsl-jdoql/src/main/java/com/mysema/query/jdo/JDOQLSerializer.java
Patch:
@@ -22,7 +22,6 @@
 import com.mysema.query.types.*;
 import com.mysema.query.types.expr.Param;
 import com.mysema.query.types.expr.SimpleOperation;
-import com.mysema.query.types.expr.StringConstant;
 
 /**
  * JDOQLSerializer serializes Querydsl queries and expressions into JDOQL strings
@@ -107,7 +106,7 @@ private <T> Expression<?> regexToLike(Operation<T> operation) {
     }
 
     private Expression<?> regexToLike(String str){
-        return StringConstant.create(str.replace(".*", "%").replace(".", "_"));
+        return ConstantImpl.create(str.replace(".*", "%").replace(".", "_"));
     }
 
     @SuppressWarnings("unchecked")
@@ -220,7 +219,7 @@ private void serializeModifiers(@Nullable Long limit, @Nullable Long offset) {
         }
     }
 
-    private void serializeParameters(Map<Param<?>, Object> params) {
+    private void serializeParameters(Map<ParamExpression<?>, Object> params) {
         append(PARAMETERS);
         boolean first = true;
         List<Map.Entry<Object, String>> entries = new ArrayList<Map.Entry<Object, String>>(getConstantToLabel().entrySet());

File: querydsl-lucene/src/main/java/com/mysema/query/lucene/LuceneQuery.java
Patch:
@@ -25,8 +25,8 @@
 import com.mysema.query.SimpleQuery;
 import com.mysema.query.support.QueryMixin;
 import com.mysema.query.types.OrderSpecifier;
+import com.mysema.query.types.ParamExpression;
 import com.mysema.query.types.Predicate;
-import com.mysema.query.types.expr.Param;
 
 /**
  * LuceneQuery is a Querydsl query implementation for Lucene queries.
@@ -169,7 +169,7 @@ public LuceneQuery restrict(QueryModifiers modifiers) {
     }
 
     @Override
-    public <T> LuceneQuery set(Param<T> param, T value) {
+    public <T> LuceneQuery set(ParamExpression<T> param, T value) {
         return queryMixin.set(param, value);
     }
 

File: querydsl-lucene/src/test/java/com/mysema/query/lucene/LuceneSerializerTest.java
Patch:
@@ -563,17 +563,17 @@ public void boost() throws Exception {
     @Test
     public void various() throws Exception{
         MatchingFilters filters = new MatchingFilters(Module.LUCENE, Target.LUCENE);
-        for (BooleanExpression filter : filters.string(title, StringConstant.create("Jurassic"))){
+        for (BooleanExpression filter : filters.string(title, new StringConstant("Jurassic"))){
             System.out.println(filter);
             testQuery(filter, 1);
         }
 
-        for (BooleanExpression filter : filters.string(author, StringConstant.create("Michael Crichton"))){
+        for (BooleanExpression filter : filters.string(author, new StringConstant("Michael Crichton"))){
             System.out.println(filter);
             testQuery(filter, 1);
         }
 
-        for (BooleanExpression filter : filters.string(title, StringConstant.create("1990"))){
+        for (BooleanExpression filter : filters.string(title, new StringConstant("1990"))){
             System.out.println(filter);
             testQuery(filter, 0);
         }

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -39,6 +39,7 @@
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.FactoryExpression;
 import com.mysema.query.types.OrderSpecifier;
+import com.mysema.query.types.ParamExpression;
 import com.mysema.query.types.ParamNotSetException;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.Predicate;
@@ -471,7 +472,7 @@ private void reset() {
         constants = null;
     }
     
-    protected void setParameters(PreparedStatement stmt, List<?> objects, List<Path<?>> constantPaths, Map<Param<?>, ?> params){
+    protected void setParameters(PreparedStatement stmt, List<?> objects, List<Path<?>> constantPaths, Map<ParamExpression<?>, ?> params){
         if (objects.size() != constantPaths.size()){
             throw new IllegalArgumentException("Expected " + objects.size() + " paths, but got " + constantPaths.size());
         }

File: querydsl-sql/src/test/java/com/mysema/query/AbstractJDBCTest.java
Patch:
@@ -22,7 +22,7 @@ public abstract class AbstractJDBCTest {
     @Before
     public void setUp() throws ClassNotFoundException, SQLException{
         Class.forName("org.hsqldb.jdbcDriver");
-        String url = "jdbc:hsqldb:data/tutorial";
+        String url = "jdbc:hsqldb:mem:testdb";
         connection = DriverManager.getConnection(url, "sa", "");
         statement = connection.createStatement();
     }

File: querydsl-core/src/main/java/com/mysema/query/types/Converters.java
Patch:
@@ -8,7 +8,6 @@
 import org.apache.commons.collections15.Transformer;
 
 import com.mysema.query.types.expr.StringExpression;
-import com.mysema.query.types.expr.StringEscape;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/types/StringEscape.java
Patch:
@@ -3,9 +3,10 @@
  * All rights reserved.
  *
  */
-package com.mysema.query.types.expr;
+package com.mysema.query.types;
 
-import com.mysema.query.types.Constant;
+import com.mysema.query.types.expr.StringConstant;
+import com.mysema.query.types.expr.StringExpression;
 
 // TODO : move somewhere else
 public final class StringEscape {

File: querydsl-core/src/test/java/com/mysema/query/types/expr/EStringEscapeTest.java
Patch:
@@ -9,6 +9,8 @@
 
 import org.junit.Test;
 
+import com.mysema.query.types.StringEscape;
+
 public class EStringEscapeTest {
 
     @Test

File: querydsl-collections/src/test/java/com/mysema/query/ColQueryStandardTest.java
Patch:
@@ -22,11 +22,11 @@
 import com.mysema.query.collections.QCat;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.ParamNotSetException;
+import com.mysema.query.types.QTuple;
 import com.mysema.query.types.expr.ArrayConstructorExpression;
 import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.ConstructorExpression;
 import com.mysema.query.types.expr.Param;
-import com.mysema.query.types.expr.QTuple;
 
 public class ColQueryStandardTest {
 

File: querydsl-collections/src/test/java/com/mysema/query/collections/SerializationTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.junit.Test;
 
 import com.mysema.query.Tuple;
-import com.mysema.query.types.expr.QTuple;
+import com.mysema.query.types.QTuple;
 
 public class SerializationTest extends AbstractQueryTest{
 

File: querydsl-core/src/main/java/com/mysema/query/types/ParamNotSetException.java
Patch:
@@ -5,7 +5,6 @@
  */
 package com.mysema.query.types;
 
-import com.mysema.query.types.expr.Param;
 
 /**
  * @author tiwe
@@ -15,7 +14,7 @@ public class ParamNotSetException extends RuntimeException{
 
     private static final long serialVersionUID = 2019016965590576490L;
 
-    public ParamNotSetException(Param<?> param) {
+    public ParamNotSetException(ParamExpression<?> param) {
         super(param.getNotSetMessage());
     }
 

File: querydsl-core/src/test/java/com/mysema/query/types/QBeanTest.java
Patch:
@@ -14,7 +14,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import com.mysema.query.types.expr.QBean;
 import com.mysema.query.types.path.BooleanPath;
 import com.mysema.query.types.path.NumberPath;
 import com.mysema.query.types.path.StringPath;

File: querydsl-core/src/test/java/com/mysema/query/types/expr/QTupleTest.java
Patch:
@@ -10,6 +10,7 @@
 import org.junit.Test;
 
 import com.mysema.query.Tuple;
+import com.mysema.query.types.QTuple;
 import com.mysema.query.types.path.BooleanPath;
 import com.mysema.query.types.path.NumberPath;
 import com.mysema.query.types.path.StringPath;

File: querydsl-hql/src/test/java/com/mysema/query/AbstractStandardTest.java
Patch:
@@ -29,12 +29,12 @@
 import com.mysema.query.jpa.domain.QCat;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.ParamNotSetException;
+import com.mysema.query.types.QTuple;
 import com.mysema.query.types.expr.ArrayConstructorExpression;
 import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.ConstructorExpression;
 import com.mysema.query.types.expr.ListExpression;
 import com.mysema.query.types.expr.Param;
-import com.mysema.query.types.expr.QTuple;
 import com.mysema.query.types.expr.StringExpression;
 
 /**

File: querydsl-jdoql/src/main/java/com/mysema/query/jdo/AbstractJDOQLQuery.java
Patch:
@@ -30,7 +30,7 @@
 import com.mysema.query.types.EntityPath;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.FactoryExpression;
-import com.mysema.query.types.expr.QTuple;
+import com.mysema.query.types.QTuple;
 
 /**
  * Abstract base class for custom implementations of the JDOQLQuery interface.

File: querydsl-jdoql/src/main/java/com/mysema/query/jdo/sql/JDOSQLQuery.java
Patch:
@@ -31,8 +31,8 @@
 import com.mysema.query.sql.SQLSerializer;
 import com.mysema.query.sql.SQLTemplates;
 import com.mysema.query.types.Expression;
+import com.mysema.query.types.QTuple;
 import com.mysema.query.types.expr.ConstructorExpression;
-import com.mysema.query.types.expr.QTuple;
 
 /**
  * JDOSQLQuery is an SQLQuery implementation that uses JDO's SQL query functionality

File: querydsl-jdoql/src/test/java/com/mysema/query/JDOQLQueryStandardTest.java
Patch:
@@ -29,11 +29,11 @@
 import com.mysema.query.jdo.test.domain.Store;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.ParamNotSetException;
+import com.mysema.query.types.QTuple;
 import com.mysema.query.types.expr.ArrayConstructorExpression;
 import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.ConstructorExpression;
 import com.mysema.query.types.expr.Param;
-import com.mysema.query.types.expr.QTuple;
 
 public class JDOQLQueryStandardTest extends AbstractJDOTest {
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -42,10 +42,10 @@
 import com.mysema.query.types.ParamNotSetException;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.Predicate;
+import com.mysema.query.types.QBean;
 import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.custom.SimpleTemplate;
 import com.mysema.query.types.expr.Param;
-import com.mysema.query.types.expr.QBean;
 import com.mysema.query.types.query.ListSubQuery;
 import com.mysema.util.ResultSetAdapter;
 

File: querydsl-sql/src/test/java/com/mysema/query/SelectBaseTest.java
Patch:
@@ -46,14 +46,14 @@
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.ParamNotSetException;
 import com.mysema.query.types.Path;
+import com.mysema.query.types.QTuple;
 import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.expr.Coalesce;
 import com.mysema.query.types.expr.ArrayConstructorExpression;
 import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.ConstructorExpression;
 import com.mysema.query.types.expr.NumberExpression;
 import com.mysema.query.types.expr.Param;
-import com.mysema.query.types.expr.QTuple;
 import com.mysema.query.types.path.NumberPath;
 import com.mysema.query.types.path.PathBuilder;
 import com.mysema.query.types.query.ListSubQuery;

File: querydsl-apt/src/test/java/com/mysema/query/domain/PathMetadataTest.java
Patch:
@@ -12,10 +12,11 @@
 import java.util.Map;
 
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 
-import com.mysema.query.types.expr.StringExpression;
 import com.mysema.query.types.expr.StringConstant;
+import com.mysema.query.types.expr.StringExpression;
 
 public class PathMetadataTest {
 
@@ -29,6 +30,7 @@ public void setUp(){
 
     @SuppressWarnings("unchecked")
     @Test
+    @Ignore
     public void test() throws Exception{
         Field field = StringConstant.class.getDeclaredField("CACHE");
         field.setAccessible(true);

File: querydsl-core/src/main/java/com/mysema/query/support/DetachableMixin.java
Patch:
@@ -10,7 +10,6 @@
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Predicate;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.ComparableExpression;
 import com.mysema.query.types.expr.DateExpression;
 import com.mysema.query.types.expr.DateTimeExpression;
@@ -42,7 +41,7 @@ public ObjectSubQuery<Long> count() {
     }
 
     @Override
-    public BooleanExpression exists(){
+    public Predicate exists(){
         if (queryMixin.getMetadata().getJoins().isEmpty()){
             throw new IllegalArgumentException("No sources given");
         }
@@ -66,7 +65,7 @@ public <RT> ListSubQuery<RT> list(Expression<RT> projection) {
     }
 
     @Override
-    public BooleanExpression notExists(){
+    public Predicate notExists(){
         return exists().not();
     }
 

File: querydsl-core/src/main/java/com/mysema/query/support/DetachableQuery.java
Patch:
@@ -7,7 +7,6 @@
 
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Predicate;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.ComparableExpression;
 import com.mysema.query.types.expr.DateExpression;
 import com.mysema.query.types.expr.DateTimeExpression;
@@ -38,7 +37,7 @@ public ObjectSubQuery<Long> count(){
     }
 
     @Override
-    public BooleanExpression exists(){
+    public Predicate exists(){
         return detachableMixin.exists();
     }
 
@@ -58,7 +57,7 @@ public <RT> ListSubQuery<RT> list(Expression<RT> projection) {
     }
 
     @Override
-    public BooleanExpression notExists(){
+    public Predicate notExists(){
         return detachableMixin.notExists();
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/PredicateOperation.java
Patch:
@@ -9,7 +9,7 @@
  * @author tiwe
  *
  */
-public class PredicateOperation extends OperationMixin<Boolean >implements Predicate{
+public class PredicateOperation extends OperationMixin<Boolean> implements Predicate{
     
     private static final long serialVersionUID = -5371430939203772072L;
 

File: querydsl-core/src/main/java/com/mysema/query/types/SubQueryExpression.java
Patch:
@@ -6,7 +6,6 @@
 package com.mysema.query.types;
 
 import com.mysema.query.QueryMetadata;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.query.Detachable;
 
 /**
@@ -26,7 +25,7 @@ public interface SubQueryExpression<T> extends Expression<T>{
      *
      * @return
      */
-    BooleanExpression exists();
+    Predicate exists();
 
     /**
      * Get the query metadata for the subquery
@@ -40,6 +39,6 @@ public interface SubQueryExpression<T> extends Expression<T>{
      *
      * @return
      */
-    BooleanExpression notExists();
+    Predicate notExists();
 
 }

File: querydsl-core/src/main/java/com/mysema/query/types/query/BooleanSubQuery.java
Patch:
@@ -6,6 +6,7 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.Predicate;
 import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.SubQueryMixin;
 import com.mysema.query.types.Visitor;
@@ -37,7 +38,7 @@ public boolean equals(Object o) {
     }
 
     @Override
-    public BooleanExpression exists() {
+    public Predicate exists() {
         return subQueryMixin.exists();
     }
 
@@ -52,7 +53,7 @@ public int hashCode(){
     }
 
     @Override
-    public BooleanExpression notExists() {
+    public Predicate notExists() {
         return subQueryMixin.notExists();
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/query/ComparableSubQuery.java
Patch:
@@ -6,10 +6,10 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.Predicate;
 import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.SubQueryMixin;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.ComparableExpression;
 
 /**
@@ -41,7 +41,7 @@ public boolean equals(Object o) {
     }
 
     @Override
-    public BooleanExpression exists() {
+    public Predicate exists() {
         return subQueryMixin.exists();
     }
 
@@ -56,7 +56,7 @@ public int hashCode(){
     }
 
     @Override
-    public BooleanExpression notExists() {
+    public Predicate notExists() {
         return subQueryMixin.notExists();
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/query/DateSubQuery.java
Patch:
@@ -6,10 +6,10 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.Predicate;
 import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.SubQueryMixin;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.DateExpression;
 
 /**
@@ -41,7 +41,7 @@ public boolean equals(Object o) {
     }
 
     @Override
-    public BooleanExpression exists() {
+    public Predicate exists() {
         return subQueryMixin.exists();
     }
 
@@ -56,7 +56,7 @@ public int hashCode(){
     }
 
     @Override
-    public BooleanExpression notExists() {
+    public Predicate notExists() {
         return subQueryMixin.notExists();
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/query/DateTimeSubQuery.java
Patch:
@@ -6,10 +6,10 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.Predicate;
 import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.SubQueryMixin;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.DateTimeExpression;
 
 /**
@@ -41,7 +41,7 @@ public boolean equals(Object o) {
     }
 
     @Override
-    public BooleanExpression exists() {
+    public Predicate exists() {
         return subQueryMixin.exists();
     }
 
@@ -56,7 +56,7 @@ public int hashCode(){
     }
 
     @Override
-    public BooleanExpression notExists() {
+    public Predicate notExists() {
         return subQueryMixin.notExists();
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/query/ListSubQuery.java
Patch:
@@ -11,10 +11,10 @@
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
+import com.mysema.query.types.Predicate;
 import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.SubQueryMixin;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.CollectionExpressionBase;
 import com.mysema.query.types.expr.SimpleOperation;
 
@@ -51,7 +51,7 @@ public boolean equals(Object o) {
     }
 
     @Override
-    public BooleanExpression exists() {
+    public Predicate exists() {
         return subQueryMixin.exists();
     }
 
@@ -70,7 +70,7 @@ public int hashCode(){
     }
 
     @Override
-    public BooleanExpression notExists() {
+    public Predicate notExists() {
         return subQueryMixin.notExists();
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/query/NumberSubQuery.java
Patch:
@@ -6,10 +6,10 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.Predicate;
 import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.SubQueryMixin;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.NumberExpression;
 
 /**
@@ -42,7 +42,7 @@ public boolean equals(Object o) {
     }
 
     @Override
-    public BooleanExpression exists() {
+    public Predicate exists() {
         return subQueryMixin.exists();
     }
 
@@ -57,7 +57,7 @@ public int hashCode(){
     }
 
     @Override
-    public BooleanExpression notExists() {
+    public Predicate notExists() {
         return subQueryMixin.notExists();
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/query/ObjectSubQuery.java
Patch:
@@ -6,10 +6,10 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.Predicate;
 import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.SubQueryMixin;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.SimpleExpression;
 
 /**
@@ -41,7 +41,7 @@ public boolean equals(Object o) {
     }
 
     @Override
-    public BooleanExpression exists() {
+    public Predicate exists() {
         return subQueryMixin.exists();
     }
 
@@ -56,7 +56,7 @@ public int hashCode(){
     }
 
     @Override
-    public BooleanExpression notExists() {
+    public Predicate notExists() {
         return subQueryMixin.notExists();
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/query/StringSubQuery.java
Patch:
@@ -6,10 +6,10 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.Predicate;
 import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.SubQueryMixin;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.StringExpression;
 
 /**
@@ -38,7 +38,7 @@ public boolean equals(Object o) {
     }
 
     @Override
-    public BooleanExpression exists() {
+    public Predicate exists() {
         return subQueryMixin.exists();
     }
 
@@ -53,7 +53,7 @@ public int hashCode(){
     }
 
     @Override
-    public BooleanExpression notExists() {
+    public Predicate notExists() {
         return subQueryMixin.notExists();
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/query/TimeSubQuery.java
Patch:
@@ -6,10 +6,10 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.Predicate;
 import com.mysema.query.types.SubQueryExpression;
 import com.mysema.query.types.SubQueryMixin;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.TimeExpression;
 
 /**
@@ -41,7 +41,7 @@ public boolean equals(Object o) {
     }
 
     @Override
-    public BooleanExpression exists() {
+    public Predicate exists() {
         return subQueryMixin.exists();
     }
 
@@ -56,7 +56,7 @@ public int hashCode(){
     }
 
     @Override
-    public BooleanExpression notExists() {
+    public Predicate notExists() {
         return subQueryMixin.notExists();
     }
 

File: querydsl-core/src/test/java/com/mysema/query/DefaultQueryMetadataTest.java
Patch:
@@ -67,6 +67,7 @@ public void testSerialization() throws IOException, ClassNotFoundException{
         in.close();
         
         assertEquals(metadata.getFlags(),     metadata2.getFlags());
+        assertEquals(metadata.getGroupBy().get(0),   metadata2.getGroupBy().get(0));
         assertEquals(metadata.getGroupBy(),   metadata2.getGroupBy());
         assertEquals(metadata.getHaving(),    metadata2.getHaving());
         assertEquals(metadata.getJoins(),     metadata2.getJoins());

File: querydsl-core/src/main/java/com/mysema/query/types/ExpressionUtils.java
Patch:
@@ -43,7 +43,7 @@ public static <D> Expression<D> as(Expression<D> source, Path<D> alias) {
     }
     
     public static <D> Expression<D> as(Expression<D> source, String alias) {
-        return as(source, new PathMixin<D>(source.getType(), PathMetadataFactory.forVariable(alias)));
+        return as(source, new PathMixin<D>(source.getType(), alias));
     }
 
     public static <D> Predicate eqConst(Expression<D> left, D constant) {

File: querydsl-core/src/main/java/com/mysema/query/types/expr/BooleanExpression.java
Patch:
@@ -10,8 +10,8 @@
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
+import com.mysema.query.types.PathMixin;
 import com.mysema.query.types.Predicate;
-import com.mysema.query.types.path.SimplePath;
 
 /**
  * BooleanExpression represents boolean expressions
@@ -58,7 +58,7 @@ public BooleanExpression as(Path<Boolean> alias) {
     @SuppressWarnings("unchecked")
     @Override
     public BooleanExpression as(String alias) {
-        return BooleanOperation.create((Operator)Ops.ALIAS, this, new SimplePath(getType(), alias));
+        return BooleanOperation.create((Operator)Ops.ALIAS, this, new PathMixin(getType(), alias));
     }
 
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ComparableExpression.java
Patch:
@@ -9,7 +9,7 @@
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.path.SimplePath;
+import com.mysema.query.types.PathMixin;
 
 /**
  * ComparableExpression extends EComparableBase to provide comparison methods.
@@ -34,7 +34,7 @@ public ComparableExpression<D> as(Path<D> alias) {
     
     @Override
     public ComparableExpression<D> as(String alias) {
-        return ComparableOperation.create(getType(),(Operator)Ops.ALIAS, this, new SimplePath(getType(), alias));
+        return ComparableOperation.create(getType(),(Operator)Ops.ALIAS, this, new PathMixin<D>(getType(), alias));
     }
 
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/DateExpression.java
Patch:
@@ -12,7 +12,7 @@
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.path.SimplePath;
+import com.mysema.query.types.PathMixin;
 
 /**
  * DateExpression represents Date expressions
@@ -68,7 +68,7 @@ public DateExpression<D> as(Path<D> alias) {
 
     @Override
     public DateExpression as(String alias) {
-        return DateOperation.create(getType(), (Operator)Ops.ALIAS, this, new SimplePath(getType(), alias));
+        return DateOperation.create(getType(), (Operator)Ops.ALIAS, this, new PathMixin<D>(getType(), alias));
     }
     
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/DateTimeExpression.java
Patch:
@@ -12,7 +12,7 @@
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.path.SimplePath;
+import com.mysema.query.types.PathMixin;
 
 /**
  * DateTimeExpression represents Date / Time expressions
@@ -85,7 +85,7 @@ public DateTimeExpression<D> as(Path<D> alias) {
     
     @Override
     public DateTimeExpression as(String alias) {
-        return DateTimeOperation.create(getType(), (Operator)Ops.ALIAS, this, new SimplePath(getType(), alias));
+        return DateTimeOperation.create(getType(), (Operator)Ops.ALIAS, this, new PathMixin<D>(getType(), alias));
     }
 
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EnumExpression.java
Patch:
@@ -8,7 +8,7 @@
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.path.SimplePath;
+import com.mysema.query.types.PathMixin;
 
 /**
  * @author tiwe
@@ -32,7 +32,7 @@ public EnumExpression<T> as(Path<T> alias) {
     @SuppressWarnings("unchecked")
     @Override
     public EnumExpression<T> as(String alias) {
-        return EnumOperation.create(getType(),(Operator)Ops.ALIAS, this, new SimplePath(getType(), alias));
+        return EnumOperation.create(getType(),(Operator)Ops.ALIAS, this, new PathMixin<T>(getType(), alias));
     }
 
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/NumberExpression.java
Patch:
@@ -16,8 +16,8 @@
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
+import com.mysema.query.types.PathMixin;
 import com.mysema.query.types.Ops.MathOps;
-import com.mysema.query.types.path.SimplePath;
 import com.mysema.util.MathUtils;
 
 /**
@@ -86,7 +86,7 @@ public NumberExpression<D> as(Path<D> alias) {
     @SuppressWarnings("unchecked")
     @Override
     public NumberExpression<D> as(String alias) {
-        return NumberOperation.create(getType(),(Operator)Ops.ALIAS, this, new SimplePath(getType(), alias));
+        return NumberOperation.create(getType(),(Operator)Ops.ALIAS, this, new PathMixin<D>(getType(), alias));
     }
 
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/SimpleExpression.java
Patch:
@@ -15,9 +15,9 @@
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
+import com.mysema.query.types.PathMixin;
 import com.mysema.query.types.Templates;
 import com.mysema.query.types.ToStringVisitor;
-import com.mysema.query.types.path.SimplePath;
 
 /**
  * ESimple is the base class for Expr implementations. It provides default implementations
@@ -97,7 +97,7 @@ public SimpleExpression<D> as(Path<D> alias) {
      */
     @SuppressWarnings("unchecked")
     public SimpleExpression<D> as(String alias) {
-        return SimpleOperation.create(getType(),(Operator)Ops.ALIAS, this, new SimplePath<D>(getType(), alias));
+        return SimpleOperation.create(getType(),(Operator)Ops.ALIAS, this, new PathMixin<D>(getType(), alias));
     }
 
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/StringExpression.java
Patch:
@@ -11,7 +11,7 @@
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.path.SimplePath;
+import com.mysema.query.types.PathMixin;
 
 /**
  * StringExpression represents String expressions
@@ -45,7 +45,7 @@ public StringExpression as(Path<String> alias) {
     @SuppressWarnings("unchecked")
     @Override
     public StringExpression as(String alias) {
-        return StringOperation.create((Operator)Ops.ALIAS, this, new SimplePath(getType(), alias));
+        return StringOperation.create((Operator)Ops.ALIAS, this, new PathMixin<String>(getType(), alias));
     }
 
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/TimeExpression.java
Patch:
@@ -12,7 +12,7 @@
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.path.SimplePath;
+import com.mysema.query.types.PathMixin;
 
 /**
  * TimeExpression represents Time expressions
@@ -42,7 +42,7 @@ public TimeExpression<D> as(Path<D> alias) {
     
     @Override
     public TimeExpression<D> as(String alias) {
-        return TimeOperation.create(getType(), (Operator)Ops.ALIAS, this, new SimplePath(getType(), alias));
+        return TimeOperation.create(getType(), (Operator)Ops.ALIAS, this, new PathMixin<D>(getType(), alias));
     }
 
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/MixinBase.java
Patch:
@@ -1,7 +1,5 @@
-package com.mysema.query.types.expr;
+package com.mysema.query.types;
 
-import com.mysema.query.types.Expression;
-import com.mysema.query.types.Visitor;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/types/custom/BooleanTemplate.java
Patch:
@@ -12,6 +12,7 @@
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
+import com.mysema.query.types.TemplateMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
 
@@ -36,7 +37,7 @@ public static BooleanExpression create(Template template, Expression<?>... args)
     private final TemplateExpression<Boolean> customMixin;
 
     public BooleanTemplate(Template template, List<Expression<?>> args){
-        customMixin = new CustomMixin<Boolean>(this, args, template);
+        customMixin = new TemplateMixin<Boolean>(this, args, template);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/custom/ComparableTemplate.java
Patch:
@@ -12,6 +12,7 @@
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
+import com.mysema.query.types.TemplateMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.ComparableExpression;
 
@@ -38,7 +39,7 @@ public static <T extends Comparable<?>> ComparableExpression<T> create(Class<T>
 
     public ComparableTemplate(Class<T> type, Template template, List<Expression<?>> args) {
         super(type);
-        customMixin = new CustomMixin<T>(this, args, template);
+        customMixin = new TemplateMixin<T>(this, args, template);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/custom/DateTemplate.java
Patch:
@@ -12,6 +12,7 @@
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
+import com.mysema.query.types.TemplateMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.DateExpression;
 
@@ -36,7 +37,7 @@ public static <T extends Comparable<?>> DateExpression<T> create(Class<T> type,
 
     public DateTemplate(Class<T> type, Template template, List<Expression<?>> args) {
         super(type);
-        customMixin = new CustomMixin<T>(this, args, template);
+        customMixin = new TemplateMixin<T>(this, args, template);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/custom/DateTimeTemplate.java
Patch:
@@ -12,6 +12,7 @@
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
+import com.mysema.query.types.TemplateMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.DateTimeExpression;
 
@@ -36,7 +37,7 @@ public static <T extends Comparable<?>> DateTimeExpression<T> create(Class<T> ty
 
     public DateTimeTemplate(Class<T> type, Template template, List<Expression<?>> args) {
         super(type);
-        customMixin = new CustomMixin<T>(this, args, template);
+        customMixin = new TemplateMixin<T>(this, args, template);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/custom/EnumTemplate.java
Patch:
@@ -12,6 +12,7 @@
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
+import com.mysema.query.types.TemplateMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EnumExpression;
 
@@ -38,7 +39,7 @@ public static <T extends Enum<T>> EnumExpression<T> create(Class<T> type, Templa
 
     public EnumTemplate(Class<T> type, Template template, List<Expression<?>> args) {
         super(type);
-        customMixin = new CustomMixin<T>(this, args, template);
+        customMixin = new TemplateMixin<T>(this, args, template);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/custom/NumberTemplate.java
Patch:
@@ -12,6 +12,7 @@
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
+import com.mysema.query.types.TemplateMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.NumberExpression;
 
@@ -38,7 +39,7 @@ public static <T extends Number & Comparable<?>> NumberExpression<T> create(Clas
 
     public NumberTemplate(Class<T> type, Template template, List<Expression<?>> args) {
         super(type);
-        customMixin = new CustomMixin<T>(this, args, template);
+        customMixin = new TemplateMixin<T>(this, args, template);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/custom/SimpleTemplate.java
Patch:
@@ -12,6 +12,7 @@
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
+import com.mysema.query.types.TemplateMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.SimpleExpression;
 
@@ -38,7 +39,7 @@ public static <T> SimpleExpression<T> create(Class<? extends T> type, Template t
 
     public SimpleTemplate(Class<? extends T> type, Template template, List<Expression<?>> args) {
         super(type);
-        customMixin = new CustomMixin<T>(this, args, template);
+        customMixin = new TemplateMixin<T>(this, args, template);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/custom/StringTemplate.java
Patch:
@@ -12,6 +12,7 @@
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
+import com.mysema.query.types.TemplateMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.StringExpression;
 
@@ -36,7 +37,7 @@ public static StringExpression create(Template template, Expression<?>... args){
     private final TemplateExpression<String> customMixin;
 
     public StringTemplate(Template template, List<Expression<?>> args){
-        customMixin = new CustomMixin<String>(this, args, template);
+        customMixin = new TemplateMixin<String>(this, args, template);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/custom/TimeTemplate.java
Patch:
@@ -12,6 +12,7 @@
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateExpression;
 import com.mysema.query.types.TemplateFactory;
+import com.mysema.query.types.TemplateMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.TimeExpression;
 
@@ -36,7 +37,7 @@ public static <T extends Comparable<?>> TimeTemplate<T> create(Class<T> type, Te
 
     public TimeTemplate(Class<T> type, Template template, List<Expression<?>> args) {
         super(type);
-        customMixin = new CustomMixin<T>(this, args, template);
+        customMixin = new TemplateMixin<T>(this, args, template);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/BooleanOperation.java
Patch:
@@ -10,6 +10,7 @@
 
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Operation;
+import com.mysema.query.types.OperationMixin;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Visitor;

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ComparableOperation.java
Patch:
@@ -10,6 +10,7 @@
 
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Operation;
+import com.mysema.query.types.OperationMixin;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/DateOperation.java
Patch:
@@ -10,6 +10,7 @@
 
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Operation;
+import com.mysema.query.types.OperationMixin;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/DateTimeOperation.java
Patch:
@@ -10,6 +10,7 @@
 
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Operation;
+import com.mysema.query.types.OperationMixin;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EnumOperation.java
Patch:
@@ -10,6 +10,7 @@
 
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Operation;
+import com.mysema.query.types.OperationMixin;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/NumberOperation.java
Patch:
@@ -10,6 +10,7 @@
 
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Operation;
+import com.mysema.query.types.OperationMixin;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/SimpleOperation.java
Patch:
@@ -10,6 +10,7 @@
 
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Operation;
+import com.mysema.query.types.OperationMixin;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/StringOperation.java
Patch:
@@ -10,6 +10,7 @@
 
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Operation;
+import com.mysema.query.types.OperationMixin;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/TimeOperation.java
Patch:
@@ -10,6 +10,7 @@
 
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Operation;
+import com.mysema.query.types.OperationMixin;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/ArrayPath.java
Patch:
@@ -15,6 +15,7 @@
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
+import com.mysema.query.types.PathMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.ArrayExpression;
 import com.mysema.query.types.expr.NumberExpression;

File: querydsl-core/src/main/java/com/mysema/query/types/path/BeanPath.java
Patch:
@@ -16,6 +16,7 @@
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
+import com.mysema.query.types.PathMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.BooleanOperation;

File: querydsl-core/src/main/java/com/mysema/query/types/path/BooleanPath.java
Patch:
@@ -9,6 +9,7 @@
 
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
+import com.mysema.query.types.PathMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/CollectionPath.java
Patch:
@@ -11,6 +11,7 @@
 import com.mysema.commons.lang.Assert;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
+import com.mysema.query.types.PathMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.CollectionExpressionBase;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/ComparablePath.java
Patch:
@@ -9,6 +9,7 @@
 
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
+import com.mysema.query.types.PathMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.ComparableExpression;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/DatePath.java
Patch:
@@ -9,6 +9,7 @@
 
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
+import com.mysema.query.types.PathMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.DateExpression;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/DateTimePath.java
Patch:
@@ -9,6 +9,7 @@
 
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
+import com.mysema.query.types.PathMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.DateTimeExpression;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/EnumPath.java
Patch:
@@ -9,6 +9,7 @@
 
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
+import com.mysema.query.types.PathMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EnumExpression;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/ListPath.java
Patch:
@@ -19,6 +19,7 @@
 import com.mysema.query.types.ExpressionException;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
+import com.mysema.query.types.PathMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.CollectionExpressionBase;
 import com.mysema.query.types.expr.ListExpression;

File: querydsl-core/src/main/java/com/mysema/query/types/path/MapPath.java
Patch:
@@ -16,6 +16,7 @@
 import com.mysema.query.types.ExpressionException;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
+import com.mysema.query.types.PathMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.MapExpressionBase;
 import com.mysema.query.types.expr.SimpleExpression;

File: querydsl-core/src/main/java/com/mysema/query/types/path/NumberPath.java
Patch:
@@ -9,6 +9,7 @@
 
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
+import com.mysema.query.types.PathMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.NumberExpression;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/SetPath.java
Patch:
@@ -11,6 +11,7 @@
 import com.mysema.commons.lang.Assert;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
+import com.mysema.query.types.PathMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.CollectionExpressionBase;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/SimplePath.java
Patch:
@@ -9,6 +9,7 @@
 
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
+import com.mysema.query.types.PathMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.SimpleExpression;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/StringPath.java
Patch:
@@ -9,6 +9,7 @@
 
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
+import com.mysema.query.types.PathMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.StringExpression;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/TimePath.java
Patch:
@@ -9,6 +9,7 @@
 
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
+import com.mysema.query.types.PathMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.TimeExpression;
 

File: querydsl-core/src/main/java/com/mysema/query/types/query/BooleanSubQuery.java
Patch:
@@ -7,6 +7,7 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.SubQueryExpression;
+import com.mysema.query.types.SubQueryMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
 

File: querydsl-core/src/main/java/com/mysema/query/types/query/ComparableSubQuery.java
Patch:
@@ -7,6 +7,7 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.SubQueryExpression;
+import com.mysema.query.types.SubQueryMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.ComparableExpression;

File: querydsl-core/src/main/java/com/mysema/query/types/query/DateSubQuery.java
Patch:
@@ -7,6 +7,7 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.SubQueryExpression;
+import com.mysema.query.types.SubQueryMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.DateExpression;

File: querydsl-core/src/main/java/com/mysema/query/types/query/DateTimeSubQuery.java
Patch:
@@ -7,6 +7,7 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.SubQueryExpression;
+import com.mysema.query.types.SubQueryMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.DateTimeExpression;

File: querydsl-core/src/main/java/com/mysema/query/types/query/ListSubQuery.java
Patch:
@@ -12,6 +12,7 @@
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.SubQueryExpression;
+import com.mysema.query.types.SubQueryMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.CollectionExpressionBase;

File: querydsl-core/src/main/java/com/mysema/query/types/query/NumberSubQuery.java
Patch:
@@ -7,6 +7,7 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.SubQueryExpression;
+import com.mysema.query.types.SubQueryMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.NumberExpression;

File: querydsl-core/src/main/java/com/mysema/query/types/query/ObjectSubQuery.java
Patch:
@@ -7,6 +7,7 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.SubQueryExpression;
+import com.mysema.query.types.SubQueryMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.SimpleExpression;

File: querydsl-core/src/main/java/com/mysema/query/types/query/StringSubQuery.java
Patch:
@@ -7,6 +7,7 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.SubQueryExpression;
+import com.mysema.query.types.SubQueryMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.StringExpression;

File: querydsl-core/src/main/java/com/mysema/query/types/query/TimeSubQuery.java
Patch:
@@ -7,6 +7,7 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.SubQueryExpression;
+import com.mysema.query.types.SubQueryMixin;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.TimeExpression;

File: querydsl-core/src/main/java/com/mysema/query/BooleanBuilder.java
Patch:
@@ -13,13 +13,13 @@
 import org.apache.commons.lang.ObjectUtils;
 
 import com.mysema.query.types.Expression;
-import com.mysema.query.types.ExpressionUtils;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Predicate;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
+import com.mysema.query.types.expr.ExpressionUtils;
 
 /**
  * BooleanBuilder is a cascading builder for {@link BooleanExpression} expressions.

File: querydsl-core/src/main/java/com/mysema/query/support/DetachableMixin.java
Patch:
@@ -9,14 +9,15 @@
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Ops;
+import com.mysema.query.types.Predicate;
 import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.ComparableExpression;
 import com.mysema.query.types.expr.DateExpression;
 import com.mysema.query.types.expr.DateTimeExpression;
 import com.mysema.query.types.expr.NumberExpression;
+import com.mysema.query.types.expr.NumberOperation;
 import com.mysema.query.types.expr.StringExpression;
 import com.mysema.query.types.expr.TimeExpression;
-import com.mysema.query.types.expr.NumberOperation;
 import com.mysema.query.types.query.*;
 
 /**
@@ -70,7 +71,7 @@ public BooleanExpression notExists(){
     }
 
     @Override
-    public BooleanSubQuery unique(BooleanExpression projection) {
+    public BooleanSubQuery unique(Predicate projection) {
         return new BooleanSubQuery(uniqueProjection(projection));
     }
 

File: querydsl-core/src/main/java/com/mysema/query/support/DetachableQuery.java
Patch:
@@ -6,6 +6,7 @@
 package com.mysema.query.support;
 
 import com.mysema.query.types.Expression;
+import com.mysema.query.types.Predicate;
 import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.ComparableExpression;
 import com.mysema.query.types.expr.DateExpression;
@@ -62,7 +63,7 @@ public BooleanExpression notExists(){
     }
 
     @Override
-    public BooleanSubQuery unique(BooleanExpression projection) {
+    public BooleanSubQuery unique(Predicate projection) {
         return detachableMixin.unique(projection);
     }
 

File: querydsl-core/src/main/java/com/mysema/query/support/QueryMixin.java
Patch:
@@ -15,13 +15,13 @@
 import com.mysema.query.QueryModifiers;
 import com.mysema.query.types.EntityPath;
 import com.mysema.query.types.Expression;
-import com.mysema.query.types.ExpressionUtils;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.Param;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.Predicate;
 import com.mysema.query.types.SubQueryExpression;
+import com.mysema.query.types.expr.ExpressionUtils;
 import com.mysema.query.types.expr.SimpleOperation;
 import com.mysema.query.types.path.MapPath;
 

File: querydsl-core/src/main/java/com/mysema/query/types/custom/BooleanTemplate.java
Patch:
@@ -16,7 +16,7 @@
 import com.mysema.query.types.expr.BooleanExpression;
 
 /**
- * CBoolean is a custom boolean expression
+ * BooleanTemplate is a custom boolean expression
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/custom/ComparableTemplate.java
Patch:
@@ -16,7 +16,7 @@
 import com.mysema.query.types.expr.ComparableExpression;
 
 /**
- * CComparable defines custom comparable expressions
+ * ComparableTemplate defines custom comparable expressions
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/custom/EnumTemplate.java
Patch:
@@ -16,7 +16,7 @@
 import com.mysema.query.types.expr.EnumExpression;
 
 /**
- * CEnum defines custom enum expressions
+ * EnumTemplate defines custom enum expressions
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/custom/NumberTemplate.java
Patch:
@@ -16,7 +16,7 @@
 import com.mysema.query.types.expr.NumberExpression;
 
 /**
- * CNumber defines custom numeric expressions
+ * NumberTemplate defines custom numeric expressions
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/custom/SimpleTemplate.java
Patch:
@@ -16,7 +16,7 @@
 import com.mysema.query.types.expr.SimpleExpression;
 
 /**
- * CSimple defines custom simple expressions
+ * SimpleTemplate defines custom simple expressions
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/custom/StringTemplate.java
Patch:
@@ -16,7 +16,7 @@
 import com.mysema.query.types.expr.StringExpression;
 
 /**
- * CString defines custom String expressions
+ * StringTemplate defines custom String expressions
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ArrayConstructorExpression.java
Patch:
@@ -15,7 +15,7 @@
 import com.mysema.query.types.Visitor;
 
 /**
- * EArrayConstructor extends {@link ConstructorExpression} to represent array initializers
+ * ArrayConstructorExpression extends {@link ConstructorExpression} to represent array initializers
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ArrayExpression.java
Patch:
@@ -10,7 +10,7 @@
 import com.mysema.query.types.Expression;
 
 /**
- * EArray defines an interface for array typed expression
+ * ArrayExpression defines an interface for array typed expression
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/expr/BooleanConstant.java
Patch:
@@ -9,7 +9,7 @@
 import com.mysema.query.types.Visitor;
 
 /**
- * EBooleanConst provides constants for Boolean.TRUE and Boolean.FALSE
+ * BooleanConstant provides constants for Boolean.TRUE and Boolean.FALSE
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/expr/BooleanExpression.java
Patch:
@@ -14,7 +14,7 @@
 import com.mysema.query.types.path.SimplePath;
 
 /**
- * EBoolean represents boolean expressions
+ * BooleanExpression represents boolean expressions
  *
  * @author tiwe
  * @see java.lang.Boolean

File: querydsl-core/src/main/java/com/mysema/query/types/expr/BooleanOperation.java
Patch:
@@ -15,7 +15,7 @@
 import com.mysema.query.types.Visitor;
 
 /**
- * OBoolean represents boolean operations
+ * BooleanOperation represents boolean operations
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/expr/CollectionExpression.java
Patch:
@@ -10,7 +10,7 @@
 import com.mysema.query.types.Expression;
 
 /**
- * ECollection represents java.util.Collection typed expressions
+ * CollectionExpression represents java.util.Collection typed expressions
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/expr/CollectionExpressionBase.java
Patch:
@@ -13,7 +13,7 @@
 import com.mysema.query.types.Ops;
 
 /**
- * ECollectionBase is an abstract base class for ECollection implementations
+ * CollectionExpressionBase is an abstract base class for ECollection implementations
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ComparableExpression.java
Patch:
@@ -12,7 +12,7 @@
 import com.mysema.query.types.path.SimplePath;
 
 /**
- * EComparable extends EComparableBase to provide comparison methods.
+ * ComparableExpression extends EComparableBase to provide comparison methods.
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ComparableExpressionBase.java
Patch:
@@ -12,7 +12,7 @@
 import com.mysema.query.types.OrderSpecifier;
 
 /**
- * EComparableBase represents comparable expressions
+ * ComparableExpressionBase represents comparable expressions
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ComparableOperation.java
Patch:
@@ -14,7 +14,7 @@
 import com.mysema.query.types.Visitor;
 
 /**
- * OComparable represents Comparable operations
+ * ComparableOperation represents Comparable operations
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ConstructorExpression.java
Patch:
@@ -18,7 +18,7 @@
 import com.mysema.query.types.Visitor;
 
 /**
- * EConstructor represents a constructor invocation
+ * ConstructorExpression represents a constructor invocation
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/expr/DateExpression.java
Patch:
@@ -15,7 +15,7 @@
 import com.mysema.query.types.path.SimplePath;
 
 /**
- * EDate represents Date expressions
+ * DateExpression represents Date expressions
  * The date representation is compatible with the Gregorian calendar.
  *
  * @param <D>

File: querydsl-core/src/main/java/com/mysema/query/types/expr/DateOperation.java
Patch:
@@ -14,7 +14,7 @@
 import com.mysema.query.types.Visitor;
 
 /**
- * ODate represents Date operations
+ * DateOperation represents Date operations
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/expr/DateTimeExpression.java
Patch:
@@ -15,7 +15,7 @@
 import com.mysema.query.types.path.SimplePath;
 
 /**
- * EDateTime represents Date / Time expressions
+ * DateTimeExpression represents Date / Time expressions
  * The date representation is compatible with the Gregorian calendar.
  *
  * @param <D>

File: querydsl-core/src/main/java/com/mysema/query/types/expr/DateTimeOperation.java
Patch:
@@ -14,13 +14,12 @@
 import com.mysema.query.types.Visitor;
 
 /**
- * ODateTime represents DateTime operations
+ * DateTimeOperation represents DateTime operations
  *
  * @author tiwe
  *
  * @param <D>
  */
-
 public class DateTimeOperation<D extends Comparable<?>> extends DateTimeExpression<D> implements Operation<D> {
 
     private static final long serialVersionUID = 6523293814317168556L;

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EnumOperation.java
Patch:
@@ -14,14 +14,13 @@
 import com.mysema.query.types.Visitor;
 
 /**
- * OEnum represents enum operations
+ * EnumOperation represents enum operations
  *
  * @author tiwe
  *
  * @param <D>
  */
-public class EnumOperation<D extends Enum<D>>
-        extends EnumExpression<D> implements Operation<D> {
+public class EnumOperation<D extends Enum<D>> extends EnumExpression<D> implements Operation<D> {
 
     private static final long serialVersionUID = -3593040852095778453L;
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ListExpression.java
Patch:
@@ -12,7 +12,7 @@
 import com.mysema.query.types.Expression;
 
 /**
- * EList represents java.util.List typed expressions
+ * ListExpression represents java.util.List typed expressions
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/expr/MapExpression.java
Patch:
@@ -8,7 +8,7 @@
 import com.mysema.query.types.Expression;
 
 /**
- * EMap represents java.util.Map typed expressions
+ * MapExpression represents java.util.Map typed expressions
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/expr/MapExpressionBase.java
Patch:
@@ -13,7 +13,7 @@
 import com.mysema.query.types.Ops;
 
 /**
- * EMapBase is an abstract base class for EMap implementations
+ * MapExpressionBase is an abstract base class for EMap implementations
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/expr/NumberConstant.java
Patch:
@@ -12,7 +12,7 @@
 import com.mysema.util.MathUtils;
 
 /**
- * ENumberConst represents numeric constants
+ * NumberConstant represents numeric constants
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/expr/NumberExpression.java
Patch:
@@ -21,7 +21,7 @@
 import com.mysema.util.MathUtils;
 
 /**
- * ENumber represents a numeric expression
+ * NumberExpression represents a numeric expression
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/expr/NumberOperation.java
Patch:
@@ -14,7 +14,7 @@
 import com.mysema.query.types.Visitor;
 
 /**
- * ONumber represents numeric operations
+ * NumberOperation represents numeric operations
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/expr/SimpleConstant.java
Patch:
@@ -10,7 +10,7 @@
 import com.mysema.query.types.Visitor;
 
 /**
- * ExprConst represents general constant expressions
+ * SimpleConstant represents general constant expressions
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/expr/SimpleExpression.java
Patch:
@@ -167,6 +167,9 @@ public BooleanExpression eq(Expression<? super D> right) {
     public final Class<? extends D> getType() {
         return type;
     }
+    
+    @Override
+    public abstract boolean equals(Object o);
 
     @Override
     public int hashCode() {

File: querydsl-core/src/main/java/com/mysema/query/types/expr/SimpleOperation.java
Patch:
@@ -14,7 +14,7 @@
 import com.mysema.query.types.Visitor;
 
 /**
- * OSimple represents a simple operation expression
+ * SimpleOperation represents a simple operation expression
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/expr/StringConstant.java
Patch:
@@ -20,7 +20,7 @@
 import com.mysema.query.types.Visitor;
 
 /**
- * EStringConst represents String constants
+ * StringConstant represents String constants
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/expr/StringExpression.java
Patch:
@@ -14,7 +14,7 @@
 import com.mysema.query.types.path.SimplePath;
 
 /**
- * EString represents String expressions
+ * StringExpression represents String expressions
  *
  * @author tiwe
  * @see java.lang.String

File: querydsl-core/src/main/java/com/mysema/query/types/expr/StringOperation.java
Patch:
@@ -14,7 +14,7 @@
 import com.mysema.query.types.Visitor;
 
 /**
- * OString represents a String typed operation
+ * StringOperation represents a String typed operation
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/expr/TemporalExpression.java
Patch:
@@ -8,7 +8,7 @@
 import com.mysema.query.types.Expression;
 
 /**
- * EDateOrTime is a supertype for Date/Time related types
+ * TemporalExpression is a supertype for Date/Time related types
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/expr/TimeExpression.java
Patch:
@@ -15,7 +15,7 @@
 import com.mysema.query.types.path.SimplePath;
 
 /**
- * ETime represents Time expressions
+ * TimeExpression represents Time expressions
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/expr/TimeOperation.java
Patch:
@@ -14,7 +14,7 @@
 import com.mysema.query.types.Visitor;
 
 /**
- * OTime represents Time functions
+ * TimeOperation represents Time functions
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/path/ArrayPath.java
Patch:
@@ -17,13 +17,12 @@
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.ArrayExpression;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.NumberExpression;
-import com.mysema.query.types.expr.SimpleExpression;
 import com.mysema.query.types.expr.NumberOperation;
+import com.mysema.query.types.expr.SimpleExpression;
 
 /**
- * PArray represents an array typed path
+ * ArrayPath represents an array typed path
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/path/BeanPath.java
Patch:
@@ -12,16 +12,15 @@
 
 import javax.annotation.Nullable;
 
-import com.mysema.query.types.Expression;
 import com.mysema.query.types.ExpressionException;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
-import com.mysema.query.types.expr.SimpleExpression;
-import com.mysema.query.types.expr.SimpleConstant;
 import com.mysema.query.types.expr.BooleanOperation;
+import com.mysema.query.types.expr.SimpleConstant;
+import com.mysema.query.types.expr.SimpleExpression;
 
 /**
  * BeanPath represents bean paths

File: querydsl-core/src/main/java/com/mysema/query/types/path/BooleanPath.java
Patch:
@@ -13,7 +13,7 @@
 import com.mysema.query.types.expr.BooleanExpression;
 
 /**
- * PBoolean represents boolean path expressions
+ * BooleanPath represents boolean path expressions
  *
  * @author tiwe
  * @see java.lang.Boolean

File: querydsl-core/src/main/java/com/mysema/query/types/path/CollectionPath.java
Patch:
@@ -12,11 +12,10 @@
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.CollectionExpressionBase;
 
 /**
- * PCollection represents collection paths
+ * CollectionPath represents collection paths
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/path/ComparablePath.java
Patch:
@@ -10,11 +10,10 @@
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.ComparableExpression;
 
 /**
- * PComparable represents Comparable paths
+ * ComparablePath represents Comparable paths
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/path/DatePath.java
Patch:
@@ -10,7 +10,6 @@
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.DateExpression;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/path/DateTimePath.java
Patch:
@@ -10,7 +10,6 @@
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.DateTimeExpression;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/path/EnumPath.java
Patch:
@@ -10,11 +10,10 @@
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.EnumExpression;
 
 /**
- * PEnum represents enum paths
+ * EnumPath represents enum paths
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/path/ListPath.java
Patch:
@@ -20,13 +20,12 @@
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.CollectionExpressionBase;
 import com.mysema.query.types.expr.ListExpression;
 import com.mysema.query.types.expr.SimpleExpression;
 
 /**
- * PList represents list paths
+ * ListPath represents list paths
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/path/MapPath.java
Patch:
@@ -17,12 +17,11 @@
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.MapExpressionBase;
 import com.mysema.query.types.expr.SimpleExpression;
 
 /**
- * PMap represents map paths
+ * MapPath represents map paths
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/path/NumberPath.java
Patch:
@@ -10,11 +10,10 @@
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.NumberExpression;
 
 /**
- * PNumber represents numeric paths
+ * NumberPath represents numeric paths
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathBuilder.java
Patch:
@@ -8,7 +8,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import com.mysema.query.types.Expression;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.expr.SimpleExpression;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathMetadataFactory.java
Patch:
@@ -13,8 +13,8 @@
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.PathType;
 import com.mysema.query.types.expr.NumberConstant;
-import com.mysema.query.types.expr.StringConstant;
 import com.mysema.query.types.expr.SimpleConstant;
+import com.mysema.query.types.expr.StringConstant;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathMixin.java
Patch:
@@ -10,12 +10,9 @@
 import javax.annotation.Nullable;
 
 import com.mysema.query.types.Expression;
-import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.PathType;
-import com.mysema.query.types.expr.BooleanExpression;
-import com.mysema.query.types.expr.BooleanOperation;
 import com.mysema.query.types.expr.MixinBase;
 import com.mysema.util.ReflectionUtils;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/SetPath.java
Patch:
@@ -12,11 +12,10 @@
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.CollectionExpressionBase;
 
 /**
- * PSet represents set paths
+ * SetPath represents set paths
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/path/SimplePath.java
Patch:
@@ -10,11 +10,10 @@
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.SimpleExpression;
 
 /**
- * PSimple represents simple paths
+ * SimplePath represents simple paths
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/path/StringPath.java
Patch:
@@ -10,11 +10,10 @@
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.StringExpression;
 
 /**
- * PString represents String typed paths
+ * StringPath represents String typed paths
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/path/TimePath.java
Patch:
@@ -10,7 +10,6 @@
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.TimeExpression;
 
 /**

File: querydsl-hql/src/main/java/com/mysema/query/jpa/JPQLCommonQuery.java
Patch:
@@ -15,7 +15,7 @@
  *
  * @param <Q>
  */
-public interface HQLCommonQuery<Q extends HQLCommonQuery<Q>>  extends Query<Q> {
+public interface JPQLCommonQuery<Q extends JPQLCommonQuery<Q>>  extends Query<Q> {
     
 
     /**

File: querydsl-hql/src/main/java/com/mysema/query/jpa/JPQLGrammar.java
Patch:
@@ -21,9 +21,9 @@
  * @author tiwe
  * @version $Id$
  */
-public final class HQLGrammar {
+public final class JPQLGrammar {
 
-    private HQLGrammar(){}
+    private JPQLGrammar(){}
 
     public static <D> Expression<D> all(CollectionExpression<?,D> col) {
         return SimpleOperation.create(col.getElementType(), Ops.QuantOps.ALL, (Expression<?>)col);

File: querydsl-hql/src/main/java/com/mysema/query/jpa/JPQLQuery.java
Patch:
@@ -13,19 +13,19 @@
  * @author tiwe
  *
  */
-public interface HQLQuery extends HQLCommonQuery<HQLQuery>, Projectable {
+public interface JPQLQuery extends JPQLCommonQuery<JPQLQuery>, Projectable {
 
     /**
      * Add the "fetch" flag to the last defined join
      *
      * @return
      */
-    HQLQuery fetch();
+    JPQLQuery fetch();
 
     /**
       * Add the "fetch all properties" flag to the last defined join.
       * @return
        */
-    HQLQuery fetchAll();
+    JPQLQuery fetchAll();
 
 }

File: querydsl-hql/src/main/java/com/mysema/query/jpa/JPQLSubQuery.java
Patch:
@@ -13,13 +13,13 @@
  * @author tiwe
  *
  */
-public final class HQLSubQuery extends AbstractHQLSubQuery<HQLSubQuery> implements HQLCommonQuery<HQLSubQuery>{
+public final class JPQLSubQuery extends AbstractJQLSubQuery<JPQLSubQuery> implements JPQLCommonQuery<JPQLSubQuery>{
 
-    public HQLSubQuery() {
+    public JPQLSubQuery() {
         super();
     }
 
-    public HQLSubQuery(QueryMetadata metadata) {
+    public JPQLSubQuery(QueryMetadata metadata) {
         super(metadata);
     }
 

File: querydsl-hql/src/main/java/com/mysema/query/jpa/hibernate/AbstractHibernateQuery.java
Patch:
@@ -26,7 +26,7 @@
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.QueryModifiers;
 import com.mysema.query.SearchResults;
-import com.mysema.query.jpa.HQLQueryBase;
+import com.mysema.query.jpa.JPQLQueryBase;
 import com.mysema.query.jpa.HQLTemplates;
 import com.mysema.query.jpa.JPQLTemplates;
 import com.mysema.query.types.Expression;
@@ -41,7 +41,7 @@
  *
  * @param <Q>
  */
-public abstract class AbstractHibernateQuery<Q extends AbstractHibernateQuery<Q>> extends HQLQueryBase<Q>{
+public abstract class AbstractHibernateQuery<Q extends AbstractHibernateQuery<Q>> extends JPQLQueryBase<Q>{
 
     private static final Logger logger = LoggerFactory.getLogger(HibernateQuery.class);
 

File: querydsl-hql/src/main/java/com/mysema/query/jpa/hibernate/HibernateDeleteClause.java
Patch:
@@ -15,7 +15,7 @@
 import com.mysema.query.JoinType;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.dml.DeleteClause;
-import com.mysema.query.jpa.HQLSerializer;
+import com.mysema.query.jpa.JPQLSerializer;
 import com.mysema.query.jpa.HQLTemplates;
 import com.mysema.query.jpa.JPQLTemplates;
 import com.mysema.query.types.EntityPath;
@@ -51,7 +51,7 @@ public HibernateDeleteClause(SessionHolder session, EntityPath<?> entity, JPQLTe
 
     @Override
     public long execute() {
-        HQLSerializer serializer = new HQLSerializer(templates);
+        JPQLSerializer serializer = new JPQLSerializer(templates);
         serializer.serializeForDelete(md);
         Map<Object,String> constants = serializer.getConstantToLabel();
 
@@ -68,7 +68,7 @@ public HibernateDeleteClause where(Predicate... o) {
     
     @Override
     public String toString(){
-        HQLSerializer serializer = new HQLSerializer(templates);
+        JPQLSerializer serializer = new JPQLSerializer(templates);
         serializer.serializeForDelete(md);
         return serializer.toString();
     }

File: querydsl-hql/src/main/java/com/mysema/query/jpa/hibernate/HibernateQuery.java
Patch:
@@ -10,7 +10,7 @@
 
 import com.mysema.query.DefaultQueryMetadata;
 import com.mysema.query.QueryMetadata;
-import com.mysema.query.jpa.HQLQuery;
+import com.mysema.query.jpa.JPQLQuery;
 import com.mysema.query.jpa.HQLTemplates;
 import com.mysema.query.jpa.JPQLTemplates;
 
@@ -20,7 +20,7 @@
  * @author tiwe
  *
  */
-public final class HibernateQuery extends AbstractHibernateQuery<HibernateQuery> implements HQLQuery{
+public final class HibernateQuery extends AbstractHibernateQuery<HibernateQuery> implements JPQLQuery{
 
     /**
      * Creates a detached query

File: querydsl-hql/src/main/java/com/mysema/query/jpa/impl/AbstractJPAQuery.java
Patch:
@@ -21,7 +21,7 @@
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.QueryModifiers;
 import com.mysema.query.SearchResults;
-import com.mysema.query.jpa.HQLQueryBase;
+import com.mysema.query.jpa.JPQLQueryBase;
 import com.mysema.query.jpa.HQLTemplates;
 import com.mysema.query.jpa.JPQLTemplates;
 import com.mysema.query.types.Expression;
@@ -33,7 +33,7 @@
  *
  * @param <Q>
  */
-public abstract class AbstractJPAQuery<Q extends AbstractJPAQuery<Q>> extends HQLQueryBase<Q> {
+public abstract class AbstractJPAQuery<Q extends AbstractJPAQuery<Q>> extends JPQLQueryBase<Q> {
 
     private static final Logger logger = LoggerFactory.getLogger(JPAQuery.class);
 

File: querydsl-hql/src/main/java/com/mysema/query/jpa/impl/JPADeleteClause.java
Patch:
@@ -14,7 +14,7 @@
 import com.mysema.query.JoinType;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.dml.DeleteClause;
-import com.mysema.query.jpa.HQLSerializer;
+import com.mysema.query.jpa.JPQLSerializer;
 import com.mysema.query.jpa.HQLTemplates;
 import com.mysema.query.jpa.JPQLTemplates;
 import com.mysema.query.types.EntityPath;
@@ -46,7 +46,7 @@ public JPADeleteClause(EntityManager entityManager, EntityPath<?> entity, JPQLTe
 
     @Override
     public long execute() {
-        HQLSerializer serializer = new HQLSerializer(templates);
+        JPQLSerializer serializer = new JPQLSerializer(templates);
         serializer.serializeForDelete(metadata);
         Map<Object,String> constants = serializer.getConstantToLabel();
 
@@ -63,7 +63,7 @@ public JPADeleteClause where(Predicate... o) {
     
     @Override
     public String toString(){
-        HQLSerializer serializer = new HQLSerializer(templates);
+        JPQLSerializer serializer = new JPQLSerializer(templates);
         serializer.serializeForDelete(metadata);
         return serializer.toString();
     }

File: querydsl-hql/src/main/java/com/mysema/query/jpa/impl/JPAQuery.java
Patch:
@@ -9,7 +9,7 @@
 
 import com.mysema.query.DefaultQueryMetadata;
 import com.mysema.query.QueryMetadata;
-import com.mysema.query.jpa.HQLQuery;
+import com.mysema.query.jpa.JPQLQuery;
 import com.mysema.query.jpa.HQLTemplates;
 import com.mysema.query.jpa.JPQLTemplates;
 
@@ -19,7 +19,7 @@
  * @author tiwe
  *
  */
-public final class JPAQuery extends AbstractJPAQuery<JPAQuery> implements HQLQuery{
+public final class JPAQuery extends AbstractJPAQuery<JPAQuery> implements JPQLQuery{
 
     /**
      * Creates a new detached query

File: querydsl-hql/src/test/java/PackagelessEntityTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.junit.Test;
 
-import com.mysema.query.jpa.HQLSubQuery;
+import com.mysema.query.jpa.JPQLSubQuery;
 import com.mysema.query.types.path.PathBuilder;
 
 
@@ -11,7 +11,7 @@ public class PackagelessEntityTest {
     @SuppressWarnings("unchecked")
     @Test
     public void PackageLess_Path(){
-        HQLSubQuery query = new HQLSubQuery();
+        JPQLSubQuery query = new JPQLSubQuery();
         PathBuilder builder = new PathBuilder(PackagelessEntityTest.class,"entity");
         query.from(builder);
         assertEquals("from PackagelessEntityTest entity", query.toString());

File: querydsl-hql/src/test/java/com/mysema/query/AbstractStandardTest.java
Patch:
@@ -24,7 +24,7 @@
 
 import com.mysema.commons.lang.Pair;
 import com.mysema.query.hql.domain.QCat;
-import com.mysema.query.jpa.HQLQuery;
+import com.mysema.query.jpa.JPQLQuery;
 import com.mysema.query.jpa.domain.Cat;
 import com.mysema.query.jpa.domain.DomesticCat;
 import com.mysema.query.types.Expression;
@@ -111,13 +111,13 @@ protected Pair<Projectable, List<Expression<?>>> createQuery(BooleanExpression f
         time = new java.sql.Time(cal.getTimeInMillis());
     }
 
-    protected HQLQuery catQuery(){
+    protected JPQLQuery catQuery(){
         return query().from(cat);
     }
 
     protected abstract Target getTarget();
 
-    protected abstract HQLQuery query();
+    protected abstract JPQLQuery query();
 
     protected abstract void save(Object entity);
 

File: querydsl-hql/src/test/java/com/mysema/query/jpa/FeaturesTest.java
Patch:
@@ -5,7 +5,7 @@
  */
 package com.mysema.query.jpa;
 
-import static com.mysema.query.jpa.HQLGrammar.sum;
+import static com.mysema.query.jpa.JPQLGrammar.sum;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;

File: querydsl-hql/src/test/java/com/mysema/query/jpa/JPQLQueryTest.java
Patch:
@@ -4,14 +4,14 @@
 import org.junit.Test;
 
 import com.mysema.query.hql.domain.QCat;
-import com.mysema.query.jpa.HQLQuery;
+import com.mysema.query.jpa.JPQLQuery;
 import com.mysema.query.jpa.hibernate.HibernateQuery;
 
-public class HQLQueryTest {
+public class JPQLQueryTest {
 
     private QCat cat = QCat.cat;
     
-    private HQLQuery query = new HibernateQuery();
+    private JPQLQuery query = new HibernateQuery();
     
     @Before
     public void setUp(){

File: querydsl-hql/src/test/java/com/mysema/query/jpa/JPQLSerializerTest.java
Patch:
@@ -9,15 +9,15 @@
 
 import org.junit.Test;
 
-import com.mysema.query.jpa.HQLSerializer;
+import com.mysema.query.jpa.JPQLSerializer;
 import com.mysema.query.jpa.HQLTemplates;
 import com.mysema.query.types.path.NumberPath;
 
-public class HQLSerializerTest {
+public class JPQLSerializerTest {
 
     @Test
     public void testNormalizeNumericArgs() {
-        HQLSerializer serializer = new HQLSerializer(HQLTemplates.DEFAULT);
+        JPQLSerializer serializer = new JPQLSerializer(HQLTemplates.DEFAULT);
         NumberPath<Double> doublePath = new NumberPath<Double>(Double.class, "doublePath");
         serializer.handle(doublePath.add(1));
         serializer.handle(doublePath.between((float)1.0, 1l));

File: querydsl-hql/src/test/java/com/mysema/query/jpa/JPQLSubQueryTest.java
Patch:
@@ -5,13 +5,13 @@
 import org.junit.Test;
 
 import com.mysema.query.hql.domain.QCat;
-import com.mysema.query.jpa.HQLSubQuery;
+import com.mysema.query.jpa.JPQLSubQuery;
 
-public class HQLSubQueryTest {
+public class JPQLSubQueryTest {
     
     @Test
     public void Multiple_Projections(){
-        HQLSubQuery query = new HQLSubQuery();
+        JPQLSubQuery query = new JPQLSubQuery();
         query.from(QCat.cat);
         assertEquals(1, query.list(QCat.cat).getMetadata().getProjection().size());
         assertEquals(1, query.list(QCat.cat).getMetadata().getProjection().size());

File: querydsl-hql/src/test/java/com/mysema/query/jpa/ParsingTest.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.alias.Alias.$;
 import static com.mysema.query.alias.Alias.alias;
-import static com.mysema.query.jpa.HQLGrammar.all;
-import static com.mysema.query.jpa.HQLGrammar.some;
-import static com.mysema.query.jpa.HQLGrammar.sum;
+import static com.mysema.query.jpa.JPQLGrammar.all;
+import static com.mysema.query.jpa.JPQLGrammar.some;
+import static com.mysema.query.jpa.JPQLGrammar.sum;
 import static org.junit.Assert.assertEquals;
 
 import org.junit.Ignore;

File: querydsl-hql/src/test/java/com/mysema/query/jpa/QueryHelper.java
Patch:
@@ -21,11 +21,11 @@
 import com.mysema.commons.lang.CloseableIterator;
 import com.mysema.query.DefaultQueryMetadata;
 import com.mysema.query.SearchResults;
-import com.mysema.query.jpa.HQLQueryBase;
+import com.mysema.query.jpa.JPQLQueryBase;
 import com.mysema.query.jpa.HQLTemplates;
 import com.mysema.query.types.Expression;
 
-class QueryHelper extends HQLQueryBase<QueryHelper> {
+class QueryHelper extends JPQLQueryBase<QueryHelper> {
 
     public QueryHelper() {
         super(new DefaultQueryMetadata(), HQLTemplates.DEFAULT);

File: querydsl-hql/src/test/java/com/mysema/query/jpa/SubQueryTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import org.junit.Test;
 
-import com.mysema.query.jpa.HQLSubQuery;
+import com.mysema.query.jpa.JPQLSubQuery;
 
 public class SubQueryTest extends AbstractQueryTest{
 
@@ -20,7 +20,7 @@ public void wrongUsage(){
 
     @Test
     public void serialization(){
-        HQLSubQuery query = sub();
+        JPQLSubQuery query = sub();
 
         query.from(cat);
         assertEquals("from Cat cat", query.toString());

File: querydsl-hql/src/test/java/com/mysema/query/jpa/UniqueResultsTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import com.mysema.query.jpa.HQLQuery;
+import com.mysema.query.jpa.JPQLQuery;
 import com.mysema.query.jpa.domain.Cat;
 import com.mysema.query.jpa.hibernate.HibernateQuery;
 import com.mysema.testutil.HibernateConfig;
@@ -37,7 +37,7 @@ public void test(){
         assertEquals(Long.valueOf(3), query().from(cat).uniqueResult(cat.count()));
     }
 
-    private HQLQuery query(){
+    private JPQLQuery query(){
         return new HibernateQuery(session);
     }
 

File: querydsl-jdoql/src/main/java/com/mysema/query/jdo/dml/JDOQLUpdateClause.java
Patch:
@@ -11,9 +11,9 @@
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.dml.UpdateClause;
 import com.mysema.query.types.Expression;
-import com.mysema.query.types.ExpressionUtils;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.Predicate;
+import com.mysema.query.types.expr.ExpressionUtils;
 import com.mysema.query.types.path.NullExpr;
 
 /**

File: querydsl-sql/src/main/java/com/mysema/query/sql/ForeignKey.java
Patch:
@@ -12,9 +12,9 @@
 
 import com.mysema.query.BooleanBuilder;
 import com.mysema.query.types.Expression;
-import com.mysema.query.types.ExpressionUtils;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.Predicate;
+import com.mysema.query.types.expr.ExpressionUtils;
 import com.mysema.query.types.path.SimplePath;
 
 /**

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLMergeClause.java
Patch:
@@ -32,10 +32,10 @@
 import com.mysema.query.sql.SQLSerializer;
 import com.mysema.query.sql.SQLTemplates;
 import com.mysema.query.types.Expression;
-import com.mysema.query.types.ExpressionUtils;
 import com.mysema.query.types.Param;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQueryExpression;
+import com.mysema.query.types.expr.ExpressionUtils;
 import com.mysema.query.types.expr.SimpleConstant;
 import com.mysema.query.types.path.NullExpr;
 

File: querydsl-core/src/main/java/com/mysema/query/BooleanBuilder.java
Patch:
@@ -16,7 +16,7 @@
 import com.mysema.query.types.ExpressionUtils;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
-import com.mysema.query.types.PathType;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.Predicate;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.BooleanExpression;
@@ -108,10 +108,9 @@ public List<Expression<?>> getArgs() {
         return Collections.<Expression<?>>singletonList(expr);
     }
 
-    @SuppressWarnings("unchecked")
     @Override
     public Operator<? super Boolean> getOperator() {
-        return (Operator)PathType.DELEGATE;
+        return Ops.DELEGATE;
     }
 
     @Nullable

File: querydsl-core/src/main/java/com/mysema/query/types/Ops.java
Patch:
@@ -44,6 +44,7 @@ public interface Ops {
     Operator<Object> ALIAS = new OperatorImpl<Object>("ALIAS");
     Operator<Object> LIST = new OperatorImpl<Object>("LIST");
     Operator<Integer> ORDINAL = new OperatorImpl<Integer>("ORDINAL");
+    Operator<Object> DELEGATE = new OperatorImpl<Object>("DELEGATE");
 
     // collection
     Operator<Boolean> IN = new OperatorImpl<Boolean>("IN",OBJECT_X_2); // cmp. contains

File: querydsl-core/src/main/java/com/mysema/query/types/Templates.java
Patch:
@@ -156,10 +156,10 @@ protected Templates() {
         add(Ops.MathOps.EXP, "exp({0})");
 
         // path types
-        add(PathType.DELEGATE, "{0}");
         add(PathType.PROPERTY, "{0}.{1s}");
         add(PathType.VARIABLE, "{0s}");
         add(Ops.ORDINAL, "ordinal({0})");
+        add(Ops.DELEGATE, "{0}");
 
         for (PathType type : new PathType[] {
                 PathType.LISTVALUE,

File: querydsl-core/src/test/java/com/mysema/query/CoverageTest.java
Patch:
@@ -121,7 +121,8 @@ public void test() throws IllegalArgumentException, IllegalAccessException{
             Ops.ARRAY_SIZE,
             Ops.MOD,
             Ops.STRING_CAST,
-
+            Ops.DELEGATE,
+            
             Ops.XOR,
             Ops.XNOR,
 

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/JDOQLSerializer.java
Patch:
@@ -20,9 +20,8 @@
 import com.mysema.query.JoinExpression;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.*;
-import com.mysema.query.types.expr.BooleanExpression;
-import com.mysema.query.types.expr.StringConstant;
 import com.mysema.query.types.expr.SimpleOperation;
+import com.mysema.query.types.expr.StringConstant;
 
 /**
  * JDOQLSerializer serializes Querydsl queries and expressions into JDOQL strings

File: querydsl-lucene/src/main/java/com/mysema/query/lucene/LuceneSerializer.java
Patch:
@@ -90,7 +90,7 @@ private Query toQuery(Operation<?> operation, QueryMetadata metadata) {
             return le(operation, metadata);
         } else if (op == Ops.GOE || op == Ops.AOE) {
             return ge(operation, metadata);
-        } else if (op == PathType.DELEGATE) {
+        } else if (op == Ops.DELEGATE){
             return toQuery(operation.getArg(0), metadata);
         }
         throw new UnsupportedOperationException("Illegal operation " + operation);

File: querydsl-hql/src/main/java/com/mysema/query/hql/AbstractSQLQuery.java
Patch:
@@ -13,8 +13,8 @@
 import com.mysema.query.types.Expression;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
+import com.mysema.query.types.Predicate;
 import com.mysema.query.types.SubQueryExpression;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.NumberExpression;
 import com.mysema.query.types.expr.NumberOperation;
 
@@ -96,7 +96,7 @@ public T leftJoin(SubQueryExpression<?> o, Path<?> alias) {
         return queryMixin.leftJoin(o, alias);
     }
 
-    public T on(BooleanExpression... conditions) {
+    public T on(Predicate... conditions) {
         return queryMixin.on(conditions);
     }
 

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/dml/JDOQLUpdateClause.java
Patch:
@@ -51,7 +51,7 @@ public long execute() {
     public JDOQLUpdateClause set(List<? extends Path<?>> paths, List<?> values) {
         for (int i = 0; i < paths.size(); i++){
             if (values.get(i) != null){
-                metadata.addProjection(ExpressionUtils.eq(((Expression)paths.get(i)), values.get(i)));
+                metadata.addProjection(ExpressionUtils.eqConst(((Expression)paths.get(i)), values.get(i)));
             }else{
                 metadata.addProjection(ExpressionUtils.eq(((Expression)paths.get(i)), new NullExpr(paths.get(i).getType())));
             }
@@ -62,7 +62,7 @@ public JDOQLUpdateClause set(List<? extends Path<?>> paths, List<?> values) {
     @Override
     public <T> JDOQLUpdateClause set(Path<T> path, T value) {
         if (value != null){
-            metadata.addProjection(ExpressionUtils.eq(path, value));
+            metadata.addProjection(ExpressionUtils.eqConst(path, value));
         }else{
             metadata.addProjection(ExpressionUtils.eq(path, new NullExpr<T>(path.getType())));
         }

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/AbstractJDOTest.java
Patch:
@@ -45,7 +45,7 @@ protected JDOQLSubQuery sub(){
     }
 
     protected <T> List<T> query(EntityPath<T> source, BooleanExpression condition) {
-        return query().from(source).where(condition).list(source.asExpr());
+        return query().from(source).where(condition).list(source);
     }
 
     protected JDOQLDeleteClause delete(EntityPath<?> entity) {

File: querydsl-sql/src/main/java/com/mysema/query/sql/RelationalPath.java
Patch:
@@ -11,7 +11,7 @@
 import javax.annotation.Nullable;
 
 import com.mysema.query.types.EntityPath;
-import com.mysema.query.types.Expression;
+import com.mysema.query.types.Path;
 
 /**
  * RelationalPath extends EntityPath to provide access to relational metadata
@@ -26,7 +26,7 @@ public interface RelationalPath<T> extends EntityPath<T>{
      * 
      * @return
      */
-    List<Expression<?>> getColumns();
+    List<Path<?>> getColumns();
 
     /**
      * Get the primary key for this relation or null if none exists

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLSerializer.java
Patch:
@@ -22,7 +22,6 @@
 import com.mysema.query.QueryFlag.Position;
 import com.mysema.query.types.*;
 import com.mysema.query.types.custom.SimpleTemplate;
-import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.expr.SimpleConstant;
 
 /**

File: querydsl-sql/src/test/java/com/mysema/query/sql/MetaDataSerializerTest.java
Patch:
@@ -98,7 +98,7 @@ protected void serializeProperties(EntityType model,  SerializerConfig config, C
                     paths.append(property.getEscapedName());
                 }
                 // adds accessors for all fields
-                writer.publicFinal(new SimpleType(Types.LIST, new ClassType(Expression.class, (Type)null)), "exprs", "Arrays.<Expr<?>>asList(" + paths.toString() + ")");
+                writer.publicFinal(new SimpleType(Types.LIST, new ClassType(Expression.class, (Type)null)), "exprs", "Arrays.<Expression<?>>asList(" + paths.toString() + ")");
                 writer.publicFinal(new SimpleType(Types.LIST, new ClassType(Path.class, (Type)null)), "paths", "Arrays.<Path<?>>asList(" + paths.toString() + ")");
             }
 

File: querydsl-apt/src/test/java/com/mysema/query/domain/JPATest.java
Patch:
@@ -11,7 +11,7 @@
 import org.junit.Test;
 
 import com.mysema.query.domain.JDOTest.JDOEntity;
-import com.mysema.query.types.path.PString;
+import com.mysema.query.types.path.StringPath;
 
 public class JPATest extends AbstractTest{
 
@@ -30,7 +30,7 @@ public static class JPAEntity{
     @Test
     public void test() throws SecurityException, NoSuchFieldException{
         cl = QJPATest_JPAEntity.class;
-        match(PString.class, "prop");
+        match(StringPath.class, "prop");
         assertMissing("skipped");
         assertMissing("skippedEntity");
     }

File: querydsl-apt/src/test/java/com/mysema/query/extensions/QueryExtensions3Test.java
Patch:
@@ -11,7 +11,7 @@
 
 import com.mysema.query.annotations.QueryEntity;
 import com.mysema.query.annotations.QueryMethod;
-import com.mysema.query.types.path.PComparable;
+import com.mysema.query.types.path.ComparablePath;
 import com.mysema.query.types.path.PathMetadataFactory;
 
 public class QueryExtensions3Test {
@@ -57,7 +57,7 @@ public void test(){
 
     @Test
     public void test_Point_has_right_type(){
-        assertEquals(PComparable.class, QQueryExtensions3Test_Point.class.getSuperclass());
-        assertEquals(PComparable.class, QQueryExtensions3Test_Entity.entity.point.getClass().getSuperclass());
+        assertEquals(ComparablePath.class, QQueryExtensions3Test_Point.class.getSuperclass());
+        assertEquals(ComparablePath.class, QQueryExtensions3Test_Entity.entity.point.getClass().getSuperclass());
     }
 }

File: querydsl-apt/src/test/java/com/mysema/query/extensions/QueryExtensions4Test.java
Patch:
@@ -11,7 +11,7 @@
 
 import com.mysema.query.annotations.QueryEntity;
 import com.mysema.query.annotations.QueryMethod;
-import com.mysema.query.types.path.PNumber;
+import com.mysema.query.types.path.NumberPath;
 
 public class QueryExtensions4Test {
 
@@ -59,8 +59,8 @@ public static class Entity{
 
     @Test
     public void test_CustomNumber_has_right_type(){
-        assertEquals(PNumber.class, QQueryExtensions4Test_CustomNumber.class.getSuperclass());
-        assertEquals(PNumber.class, QQueryExtensions4Test_Entity.entity.number.getClass().getSuperclass());
+        assertEquals(NumberPath.class, QQueryExtensions4Test_CustomNumber.class.getSuperclass());
+        assertEquals(NumberPath.class, QQueryExtensions4Test_Entity.entity.number.getClass().getSuperclass());
     }
 
 }

File: querydsl-apt/src/test/java/com/mysema/query/extensions/QueryExtensions5Test.java
Patch:
@@ -12,7 +12,7 @@
 import com.mysema.query.annotations.QueryEntity;
 import com.mysema.query.annotations.QueryExtensions;
 import com.mysema.query.annotations.QueryMethod;
-import com.mysema.query.types.expr.EStringConst;
+import com.mysema.query.types.expr.StringConstant;
 
 public class QueryExtensions5Test {
 
@@ -57,11 +57,11 @@ public interface Entit2yExt{
     public void test_prop_and_method_available(){
         assertNotNull(QQueryExtensions5Test_Entity.entity.prop);
         assertNotNull(QQueryExtensions5Test_Entity.entity.method());
-        assertNotNull(QQueryExtensions5Test_Entity.entity.method(EStringConst.create("")));
+        assertNotNull(QQueryExtensions5Test_Entity.entity.method(StringConstant.create("")));
 
         assertNotNull(QQueryExtensions5Test_Entity2.entity2.prop);
         assertNotNull(QQueryExtensions5Test_Entity2.entity2.method());
-        assertNotNull(QQueryExtensions5Test_Entity2.entity2.method(EStringConst.create("")));
+        assertNotNull(QQueryExtensions5Test_Entity2.entity2.method(StringConstant.create("")));
     }
 
 }

File: querydsl-apt/src/test/java/com/mysema/query/inheritance/Inheritance5Test.java
Patch:
@@ -9,7 +9,7 @@
 
 import com.mysema.query.annotations.QueryEntity;
 import com.mysema.query.annotations.QuerySupertype;
-import com.mysema.query.types.path.PNumber;
+import com.mysema.query.types.path.NumberPath;
 
 public class Inheritance5Test {
 
@@ -50,7 +50,7 @@ public class Entity extends CommonIdentifiable<Long> {
 
     @Test
     public void test(){
-        assertEquals(PNumber.class, QInheritance5Test_Entity.entity.id.getClass());
+        assertEquals(NumberPath.class, QInheritance5Test_Entity.entity.id.getClass());
     }
 
 }

File: querydsl-apt/src/test/java/com/mysema/query/inheritance/Inheritance8Test.java
Patch:
@@ -7,7 +7,7 @@
 import com.mysema.query.annotations.QueryEntity;
 import com.mysema.query.domain.CommonIdentifiable;
 import com.mysema.query.domain.CommonPersistence;
-import com.mysema.query.types.path.PNumber;
+import com.mysema.query.types.path.NumberPath;
 
 public class Inheritance8Test {
 
@@ -21,12 +21,12 @@ public static class GenericSubclass extends CommonIdentifiable<Long> {
 
     @Test
     public void simple_subclass_should_contain_fields_from_external_superclass() {
-        assertEquals(PNumber.class, QInheritance8Test_SimpleSubclass.simpleSubclass.version.getClass());
+        assertEquals(NumberPath.class, QInheritance8Test_SimpleSubclass.simpleSubclass.version.getClass());
     }
 
     @Test
     public void generic_subclass_should_contain_fields_from_external_superclass() {
-        assertEquals(PNumber.class, QInheritance8Test_GenericSubclass.genericSubclass.version.getClass());
+        assertEquals(NumberPath.class, QInheritance8Test_GenericSubclass.genericSubclass.version.getClass());
     }
 
 }

File: querydsl-apt/src/test/java/com/mysema/query/util/UserUtils.java
Patch:
@@ -3,14 +3,14 @@
 import com.mysema.query.annotations.QueryDelegate;
 import com.mysema.query.domain.DelegateTest;
 import com.mysema.query.domain.QDelegateTest_User;
-import com.mysema.query.types.path.PString;
+import com.mysema.query.types.path.StringPath;
 
 public final class UserUtils {
 
     private UserUtils(){}
 
     @QueryDelegate(DelegateTest.User.class)
-    public static PString getName(QDelegateTest_User user){
+    public static StringPath getName(QDelegateTest_User user){
         return user.name;
     }
 

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColDeleteClause.java
Patch:
@@ -9,7 +9,7 @@
 
 import com.mysema.query.dml.DeleteClause;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.Predicate;
 
 /**
  * ColDeleteClause is an implementation of the DeleteClause interface for the Querydsl Collections module
@@ -39,15 +39,15 @@ public ColDeleteClause(Path<T> expr, Collection<? extends T> col){
     @Override
     public long execute() {
         int rv = 0;
-        for (T match : query.list(expr.asExpr())){
+        for (T match : query.list(expr)){
             col.remove(match);
             rv++;
         }
         return rv;
     }
     
     @Override
-    public ColDeleteClause<T> where(EBoolean... o) {
+    public ColDeleteClause<T> where(Predicate... o) {
         query.where(o);
         return this;
     }

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColQuery.java
Patch:
@@ -10,7 +10,7 @@
 import com.mysema.query.Projectable;
 import com.mysema.query.SimpleQuery;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.path.PMap;
+import com.mysema.query.types.path.MapPath;
 
 /**
  * Query interface for Collection queries
@@ -55,6 +55,6 @@ public interface ColQuery extends SimpleQuery<ColQuery>, Projectable {
      * @param alias
      * @return
      */
-    <P> ColQuery innerJoin(PMap<?,P,?> mapPath, Path<P> alias);
+    <P> ColQuery innerJoin(MapPath<?,P,?> mapPath, Path<P> alias);
 
 }

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColUpdateClause.java
Patch:
@@ -13,7 +13,7 @@
 
 import com.mysema.query.dml.UpdateClause;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.Predicate;
 
 /**
  * ColUpdateClause is an implementation of the UpdateClause interface for Querydsl Collections
@@ -42,7 +42,7 @@ public ColUpdateClause(Path<T> expr, Iterable<? extends T> col){
     @Override
     public long execute() {
         int rv = 0;
-        for (T match : query.list(expr.asExpr())){
+        for (T match : query.list(expr)){
             BeanMap beanMap = new BeanMap(match);
             for (Map.Entry<Path<?>,Object> entry : paths.entrySet()){
                 // TODO : support deep updates as well
@@ -69,7 +69,7 @@ public ColUpdateClause<T> set(List<? extends Path<?>> p, List<?> v) {
     }
 
     @Override
-    public ColUpdateClause<T> where(EBoolean... o) {
+    public ColUpdateClause<T> where(Predicate... o) {
         query.where(o);
         return this;
     }

File: querydsl-collections/src/main/java/com/mysema/query/collections/QueryEngine.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.Map;
 
 import com.mysema.query.QueryMetadata;
-import com.mysema.query.types.Expr;
+import com.mysema.query.types.Expression;
 
 /**
  * QueryEngine defines an interface for the evaluation of ColQuery queries
@@ -31,7 +31,7 @@ public interface QueryEngine {
      * @param iterables
      * @return
      */
-    long count(QueryMetadata metadata, Map<Expr<?>, Iterable<?>> iterables);
+    long count(QueryMetadata metadata, Map<Expression<?>, Iterable<?>> iterables);
 
     /**
      * Evaluate the given query and return the projection as a list
@@ -40,6 +40,6 @@ public interface QueryEngine {
      * @param iterables
      * @return
      */
-    <T> List<T> list(QueryMetadata metadata, Map<Expr<?>, Iterable<?>> iterables, Expr<T> projection);
+    <T> List<T> list(QueryMetadata metadata, Map<Expression<?>, Iterable<?>> iterables, Expression<T> projection);
 
 }

File: querydsl-collections/src/test/java/com/mysema/query/collections/AbstractQueryTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.junit.Before;
 
 import com.mysema.query.alias.Alias;
-import com.mysema.query.types.Expr;
+import com.mysema.query.types.Expression;
 
 /**
  * AbstractQueryTest provides
@@ -73,7 +73,7 @@ static class TestQuery extends ColQueryImpl {
         List<Object> res = new ArrayList<Object>();
 
         @Override
-        public <RT> List<RT> list(Expr<RT> projection) {
+        public <RT> List<RT> list(Expression<RT> projection) {
             boolean array = projection.getType().isArray();
             List<RT> rv = super.list(projection);
             for (Object o : rv) {

File: querydsl-collections/src/test/java/com/mysema/query/collections/AnimalTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.path.PSimple;
+import com.mysema.query.types.path.SimplePath;
 
 public class AnimalTest {
 
@@ -23,7 +23,7 @@ public void testCast(){
 
     @Test
     public void dateAsSimple(){
-        assertTrue(QAnimal.animal.dateAsSimple.getClass().equals(PSimple.class));
+        assertTrue(QAnimal.animal.dateAsSimple.getClass().equals(SimplePath.class));
     }
 
 }

File: querydsl-collections/src/test/java/com/mysema/query/collections/CatTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.path.PSimple;
+import com.mysema.query.types.path.SimplePath;
 
 public class CatTest {
 
@@ -20,11 +20,11 @@ public void testSkippedField() throws SecurityException, NoSuchFieldException{
 
     @Test
     public void stringAsSimple() throws SecurityException, NoSuchFieldException {
-        assertTrue(QCat.cat.stringAsSimple.getClass().equals(PSimple.class));
+        assertTrue(QCat.cat.stringAsSimple.getClass().equals(SimplePath.class));
     }
 
     @Test
     public void dateAsSimple(){
-        assertTrue(QCat.cat.dateAsSimple.getClass().equals(PSimple.class));
+        assertTrue(QCat.cat.dateAsSimple.getClass().equals(SimplePath.class));
     }
 }

File: querydsl-collections/src/test/java/com/mysema/query/collections/DistinctTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.path.PNumber;
+import com.mysema.query.types.path.NumberPath;
 
 /**
  * DistinctTest provides
@@ -22,8 +22,8 @@
  */
 public class DistinctTest extends AbstractQueryTest {
 
-    private PNumber<Integer> intVar1 = new PNumber<Integer>(Integer.class, "var1");
-    private PNumber<Integer> intVar2 = new PNumber<Integer>(Integer.class, "var2");
+    private NumberPath<Integer> intVar1 = new NumberPath<Integer>(Integer.class, "var1");
+    private NumberPath<Integer> intVar2 = new NumberPath<Integer>(Integer.class, "var2");
     private List<Integer> list1 = Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4, 4);
     private List<Integer> list2 = Arrays.asList(2, 2, 3, 3, 3, 4, 4, 4, 4, 4);
 

File: querydsl-collections/src/test/java/com/mysema/query/collections/PagingTest.java
Patch:
@@ -15,13 +15,13 @@
 
 import com.mysema.query.QueryModifiers;
 import com.mysema.query.SearchResults;
-import com.mysema.query.types.path.PNumber;
+import com.mysema.query.types.path.NumberPath;
 
 public class PagingTest extends AbstractQueryTest {
 
     private List<Integer> ints = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);
 
-    private PNumber<Integer> var = new PNumber<Integer>(Integer.class, "var");
+    private NumberPath<Integer> var = new NumberPath<Integer>(Integer.class, "var");
 
     @Test
     public void test() {

File: querydsl-collections/src/test/java/com/mysema/query/collections/StringHandlingTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.path.PString;
+import com.mysema.query.types.path.StringPath;
 
 /**
  * StringHandlingTest provides
@@ -29,9 +29,9 @@ public class StringHandlingTest extends AbstractQueryTest {
 
     private List<String> data = Arrays.asList("abc", "aBC", "def");
 
-    private final PString a = new PString("a");
+    private final StringPath a = new StringPath("a");
 
-    private final PString b = new PString("b");
+    private final StringPath b = new StringPath("b");
 
     @Test
     public void equalsIgnoreCase() {

File: querydsl-core/src/main/java/com/mysema/query/FilteredClause.java
Patch:
@@ -5,7 +5,7 @@
  */
 package com.mysema.query;
 
-import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.Predicate;
 
 /**
  * Parent interface for clauses with a filter
@@ -22,6 +22,6 @@ public interface FilteredClause<C extends FilteredClause<C>> {
      * @param o
      * @return
      */
-    C where(EBoolean... o);
+    C where(Predicate... o);
 
 }

File: querydsl-core/src/main/java/com/mysema/query/SimpleQuery.java
Patch:
@@ -9,7 +9,7 @@
 
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.Param;
-import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.Predicate;
 
 /**
  * SimpleQuery defines a simple querying interface than {@link Query}
@@ -27,7 +27,7 @@ public interface SimpleQuery<Q extends SimpleQuery<Q>> {
      * @param e
      * @return
      */
-    Q where(EBoolean... e);
+    Q where(Predicate... e);
 
     /**
      * Defines the limit / max results for the query results

File: querydsl-core/src/main/java/com/mysema/query/Tuple.java
Patch:
@@ -7,7 +7,7 @@
 
 import javax.annotation.Nullable;
 
-import com.mysema.query.types.Expr;
+import com.mysema.query.types.Expression;
 
 /**
  * Tuple defines an interface for generic query result projection
@@ -36,7 +36,7 @@ public interface Tuple {
      * @return
      */
     @Nullable
-    <T> T get(Expr<T> expr);
+    <T> T get(Expression<T> expr);
 
     /**
      * Get the content as an Object array

File: querydsl-core/src/main/java/com/mysema/query/types/OrderSpecifier.java
Patch:
@@ -26,9 +26,9 @@ public class OrderSpecifier<A extends Comparable> implements Serializable {
 
     private final Order order;
 
-    private final Expr<A> target;
+    private final Expression<A> target;
 
-    public OrderSpecifier(Order order, Expr<A> target) {
+    public OrderSpecifier(Order order, Expression<A> target) {
         this.order = Assert.notNull(order,"order");
         this.target = Assert.notNull(target,"target");
     }
@@ -56,7 +56,7 @@ public boolean isAscending() {
      *
      * @return
      */
-    public Expr<A> getTarget() {
+    public Expression<A> getTarget() {
         return target;
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/Param.java
Patch:
@@ -6,7 +6,7 @@
 package com.mysema.query.types;
 
 import com.mysema.commons.lang.Assert;
-import com.mysema.query.types.expr.ESimple;
+import com.mysema.query.types.expr.SimpleExpression;
 
 /**
  * Param defines a parameter in a query with an optional name
@@ -15,7 +15,7 @@
  *
  * @param <T>
  */
-public class Param<T> extends ESimple<T> {
+public class Param<T> extends SimpleExpression<T> {
 
     private static final long serialVersionUID = -6872502615009012503L;
 

File: querydsl-core/src/main/java/com/mysema/query/types/PathMetadata.java
Patch:
@@ -25,7 +25,7 @@ public final class PathMetadata<T> implements Serializable{
 
     private static final long serialVersionUID = -1055994185028970065L;
 
-    private final Expr<T> expression;
+    private final Expression<T> expression;
 
     private final int hashCode;
 
@@ -34,7 +34,7 @@ public final class PathMetadata<T> implements Serializable{
 
     private final PathType pathType;
 
-    public PathMetadata(@Nullable Path<?> parent, Expr<T> expression, PathType type) {
+    public PathMetadata(@Nullable Path<?> parent, Expression<T> expression, PathType type) {
         this.parent = parent;
         this.expression = expression;
         this.pathType = type;
@@ -58,7 +58,7 @@ public boolean equals(Object obj) {
 
     }
 
-    public Expr<T> getExpression() {
+    public Expression<T> getExpression() {
         return expression;
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/TemplateFactory.java
Patch:
@@ -47,7 +47,7 @@ public Template create(String template){
                 }
                 String str = template.substring(m.start() + 1, m.end() - 1).toLowerCase(Locale.ENGLISH);
                 boolean asString = false;
-                Transformer<? extends Expr<?>, ? extends Expr<?>> transformer = null;
+                Transformer<? extends Expression<?>, ? extends Expression<?>> transformer = null;
                 if (str.charAt(0) == '%'){
                     if (str.charAt(1) == '%'){
                         transformer = Converters.toEndsWithViaLikeLower;

File: querydsl-core/src/main/java/com/mysema/query/types/Visitor.java
Patch:
@@ -8,7 +8,7 @@
 import javax.annotation.Nullable;
 
 /**
- * Visitor defines a Visitor signature for {@link Expr} instances.
+ * Visitor defines a Visitor signature for {@link Expression} instances.
  *
  * @author tiwe
  * @version $Id$
@@ -25,7 +25,7 @@ public interface Visitor<R,C>{
      * @param expr
      */
     @Nullable
-    R visit(Custom<?> expr, @Nullable C context);
+    R visit(TemplateExpression<?> expr, @Nullable C context);
 
     /**
      * @param expr

File: querydsl-core/src/test/java/com/mysema/query/CoverageTest.java
Patch:
@@ -19,7 +19,7 @@
 import org.junit.Test;
 
 import com.mysema.query.alias.Alias;
-import com.mysema.query.types.Expr;
+import com.mysema.query.types.Expression;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
@@ -63,7 +63,7 @@ public interface Entity{
     public void test() throws IllegalArgumentException, IllegalAccessException{
         // make sure all Operators are covered in expression factory methods
         Set<Operator<?>> usedOperators = new HashSet<Operator<?>>();
-        List<Expr<?>> exprs = new ArrayList<Expr<?>>();
+        List<Expression<?>> exprs = new ArrayList<Expression<?>>();
 
         Entity entity = Alias.alias(Entity.class, "entity");
         // numeric
@@ -101,7 +101,7 @@ public void test() throws IllegalArgumentException, IllegalAccessException{
         exprs.addAll(projections.map($(entity.getMap()), $(entity.getMap()), "", ""));
         exprs.addAll(filters.map($(entity.getMap()), $(entity.getMap()), "", ""));
 
-        for (Expr<?> e : exprs){
+        for (Expression<?> e : exprs){
             if (e instanceof Operation){
                 Operation<?> op = (Operation<?>)e;
                 if (op.getArg(0) instanceof Operation){

File: querydsl-core/src/test/java/com/mysema/query/QueryMutability.java
Patch:
@@ -11,7 +11,7 @@
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 
-import com.mysema.query.types.Expr;
+import com.mysema.query.types.Expression;
 
 public final class QueryMutability {
 
@@ -26,7 +26,7 @@ public QueryMutability(Projectable query) throws SecurityException,
         this.metadata = (QueryMetadata) query.getClass().getMethod("getMetadata").invoke(query);
     }
 
-    public void test(Expr<?> p1, Expr<?> p2) throws IOException {
+    public void test(Expression<?> p1, Expression<?> p2) throws IOException {
         System.err.println("count");
         query.count();
         assertProjectionEmpty();

File: querydsl-core/src/test/java/com/mysema/query/domain/QCommonPersistence.java
Patch:
@@ -8,7 +8,7 @@
 import com.mysema.query.types.EntityPath;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.path.BeanPath;
-import com.mysema.query.types.path.PNumber;
+import com.mysema.query.types.path.NumberPath;
 
 /**
  * QCommonPersistence is a Querydsl query type for CommonPersistence
@@ -17,7 +17,7 @@ public class QCommonPersistence extends BeanPath<CommonPersistence> implements E
 
     private static final long serialVersionUID = -1494672641;
 
-    public final PNumber<Long> version = createNumber("version", Long.class);
+    public final NumberPath<Long> version = createNumber("version", Long.class);
 
     public QCommonPersistence(BeanPath<? extends CommonPersistence> entity) {
         super(entity.getType(),entity.getMetadata());

File: querydsl-core/src/test/java/com/mysema/query/support/QueryMixinTest.java
Patch:
@@ -14,7 +14,7 @@
 import com.mysema.query.JoinExpression;
 import com.mysema.query.alias.Alias;
 import com.mysema.query.domain.QCommonPersistence;
-import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.BooleanExpression;
 import com.mysema.query.types.path.PathMetadataFactory;
 
 public class QueryMixinTest {
@@ -31,7 +31,7 @@ public void getJoins_with_condition(){
         assertEquals(1, mixin.getMetadata().getJoins().size());
         JoinExpression je = mixin.getMetadata().getJoins().get(0);
         assertEquals(entity, je.getTarget());
-        assertEquals(EBoolean.allOf(entity.version.isNull(), entity.version.isNotNull()), je.getCondition());
+        assertEquals(BooleanExpression.allOf(entity.version.isNull(), entity.version.isNotNull()), je.getCondition());
     }
 
     @Test

File: querydsl-core/src/test/java/com/mysema/query/support/SimpleQueryAdapterTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.path.PString;
+import com.mysema.query.types.path.StringPath;
 
 
 public class SimpleQueryAdapterTest {
@@ -19,7 +19,7 @@ public class SimpleQueryAdapterTest {
     public void test(){
         DummyQuery query = new DummyQuery();
         DummyProjectable projectable = new DummyProjectable();
-        SimpleQueryAdapter simpleQuery = new SimpleQueryAdapter(query, projectable, new PString("a"));
+        SimpleQueryAdapter simpleQuery = new SimpleQueryAdapter(query, projectable, new StringPath("a"));
         
         simpleQuery.count();
         simpleQuery.countDistinct();

File: querydsl-core/src/test/java/com/mysema/query/types/EDateConstTest.java
Patch:
@@ -12,8 +12,8 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.expr.EDate;
-import com.mysema.query.types.expr.EDateConst;
+import com.mysema.query.types.expr.DateExpression;
+import com.mysema.query.types.expr.DateConstant;
 
 public class EDateConstTest {
 
@@ -26,7 +26,7 @@ public void test(){
         cal.set(Calendar.YEAR,  2000);
         System.out.println(cal.getTime());
 
-        EDate<Date> date = EDateConst.create(new Date(cal.getTimeInMillis()));
+        DateExpression<Date> date = DateConstant.create(new Date(cal.getTimeInMillis()));
         assertEquals("1",   date.dayOfMonth().toString());
         assertEquals("1",   date.month().toString());
         assertEquals("2000",date.year().toString());

File: querydsl-core/src/test/java/com/mysema/query/types/EDateTimeConstTest.java
Patch:
@@ -12,8 +12,8 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.expr.EDateTime;
-import com.mysema.query.types.expr.EDateTimeConst;
+import com.mysema.query.types.expr.DateTimeExpression;
+import com.mysema.query.types.expr.DateTimeConstant;
 
 public class EDateTimeConstTest {
 
@@ -29,7 +29,7 @@ public void test(){
         cal.set(Calendar.MILLISECOND,  3);
         System.out.println(cal.getTime());
 
-        EDateTime<Date> date = EDateTimeConst.create(cal.getTime());
+        DateTimeExpression<Date> date = DateTimeConstant.create(cal.getTime());
         assertEquals("1",    date.dayOfMonth().toString());
         assertEquals("1",    date.month().toString());
         assertEquals("2000", date.year().toString());

File: querydsl-core/src/test/java/com/mysema/query/types/ETimeConstTest.java
Patch:
@@ -12,8 +12,8 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.expr.ETime;
-import com.mysema.query.types.expr.ETimeConst;
+import com.mysema.query.types.expr.TimeExpression;
+import com.mysema.query.types.expr.TimeConstant;
 
 public class ETimeConstTest {
 
@@ -26,7 +26,7 @@ public void test(){
         cal.set(Calendar.MILLISECOND,  3);
         System.out.println(cal.getTime());
 
-        ETime<Time> time = ETimeConst.create(new Time(cal.getTimeInMillis()));
+        TimeExpression<Time> time = TimeConstant.create(new Time(cal.getTimeInMillis()));
         assertEquals("13",   time.hour().toString());
         assertEquals("30",   time.minute().toString());
         assertEquals("12",   time.second().toString());

File: querydsl-core/src/test/java/com/mysema/query/types/TypesTest.java
Patch:
@@ -14,8 +14,8 @@ public class TypesTest {
 
     @Test
     public void testExpr() {
-        for (Class<?> cl : Expr.class.getClasses()) {
-            assertTrue(cl.getName(), Expr.class.isAssignableFrom(cl));
+        for (Class<?> cl : Expression.class.getClasses()) {
+            assertTrue(cl.getName(), Expression.class.isAssignableFrom(cl));
         }
     }
 
@@ -24,7 +24,7 @@ public void testPath() {
         for (Class<?> cl : Path.class.getClasses()) {
             assertTrue(cl.getName(), Path.class.isAssignableFrom(cl));
             if (!cl.isInterface()) {
-                assertTrue(cl.getName(), Expr.class.isAssignableFrom(cl));
+                assertTrue(cl.getName(), Expression.class.isAssignableFrom(cl));
             }
         }
     }

File: querydsl-core/src/test/java/com/mysema/query/types/VisitorTest.java
Patch:
@@ -33,7 +33,7 @@ public void testIteration() throws SecurityException, NoSuchMethodException{
         types.addAll(Arrays.<Class<?>>asList(Operation.class.getClasses()));
         types.addAll(Arrays.<Class<?>>asList(Path.class.getClasses()));
         for (Class<?> innerType : types){
-            if (!innerType.isInterface() && Expr.class.isAssignableFrom(innerType)){
+            if (!innerType.isInterface() && Expression.class.isAssignableFrom(innerType)){
                 Visitor.class.getDeclaredMethod("visit",innerType);
             }
         }

File: querydsl-core/src/test/java/com/mysema/query/types/expr/CoalesceTest.java
Patch:
@@ -9,13 +9,13 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.path.PString;
+import com.mysema.query.types.path.StringPath;
 
 public class CoalesceTest {
 
-    private final PString firstname = new PString("firstname");
+    private final StringPath firstname = new StringPath("firstname");
 
-    private final PString lastname = new PString("lastname");
+    private final StringPath lastname = new StringPath("lastname");
 
     @Test
     public void withList(){

File: querydsl-core/src/test/java/com/mysema/query/types/expr/EArrayConstructorTest.java
Patch:
@@ -9,14 +9,14 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.path.PString;
+import com.mysema.query.types.path.StringPath;
 
 public class EArrayConstructorTest {
 
     @SuppressWarnings("unchecked")
     @Test
     public void testNewInstanceObjectArray() {
-    EArrayConstructor<String> constructor = new EArrayConstructor<String>(String[].class,  new PString("test"), new PString("test2"));
+    ArrayConstructorExpression<String> constructor = new ArrayConstructorExpression<String>(String[].class,  new StringPath("test"), new StringPath("test2"));
 
     String[] strings = constructor.newInstance((Object[])new String[]{"1", "2"});
     assertEquals("1", strings[0]);

File: querydsl-core/src/test/java/com/mysema/query/types/expr/EStringEscapeTest.java
Patch:
@@ -13,7 +13,7 @@ public class EStringEscapeTest {
 
     @Test
     public void testEscapeForLike() {
-        assertEquals("a\\%b\\_c", EStringEscape.escapeForLike(EStringConst.create("a%b_c")).toString());
+        assertEquals("a\\%b\\_c", StringEscape.escapeForLike(StringConstant.create("a%b_c")).toString());
     }
 
 }

File: querydsl-core/src/test/java/com/mysema/query/types/path/PNumberTest.java
Patch:
@@ -16,7 +16,7 @@
 
 public class PNumberTest {
 
-    private PNumber<Byte> bytePath = new PNumber<Byte>(Byte.class, "bytePath");
+    private NumberPath<Byte> bytePath = new NumberPath<Byte>(Byte.class, "bytePath");
 
     @SuppressWarnings("unchecked")
     @Test

File: querydsl-core/src/test/java/com/mysema/query/types/query/SubQueryTest.java
Patch:
@@ -41,16 +41,16 @@ public void test(){
         );
         SubQueryExpression prev = null;
         for (SubQueryExpression sq : subQueries){
-            assertNotNull(sq.asExpr());
+            assertNotNull(sq);
             assertNotNull(sq.exists());
             assertNotNull(sq.getMetadata());
             assertNotNull(sq.notExists());
             assertEquals(sq, sq);
             if (prev != null){
                 assertEquals(sq, prev);
             }
-            assertEquals(sq.asExpr().getType().hashCode(), sq.hashCode());
-            sq.asExpr().accept(ToStringVisitor.DEFAULT, templates);
+            assertEquals(sq.getType().hashCode(), sq.hashCode());
+            sq.accept(ToStringVisitor.DEFAULT, templates);
             prev = sq;
         }
     }

File: querydsl-hibernate-search/src/main/java/com/mysema/query/search/SearchQuery.java
Patch:
@@ -23,7 +23,7 @@
 import com.mysema.query.types.EntityPath;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.Param;
-import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.Predicate;
 
 /**
  * SearchQuery is a Query implementation for Hibernate Search
@@ -143,7 +143,7 @@ public T uniqueResult() {
     }
 
     @Override
-    public SearchQuery<T> where(EBoolean... e) {
+    public SearchQuery<T> where(Predicate... e) {
         return queryMixin.where(e);
     }
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLQueryMixin.java
Patch:
@@ -11,7 +11,7 @@
 import com.mysema.query.JoinFlag;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.support.QueryMixin;
-import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.BooleanExpression;
 
 /**
  * HQLQueryMixin extends QueryMixin to support JPQL join construction
@@ -48,8 +48,8 @@ public T fetchAll(){
         return getSelf();
     }
 
-    public T with(EBoolean... conditions){
-        for (EBoolean condition : conditions){
+    public T with(BooleanExpression... conditions){
+        for (BooleanExpression condition : conditions){
             getMetadata().addJoinCondition(condition);
         }
         return getSelf();

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLTemplates.java
Patch:
@@ -57,7 +57,7 @@ public boolean wrapElements(Operator<?> operator){
     }
 
     public boolean wrapConstant(Constant<?> expr) {
-        Class<?> type = expr.asExpr().getType();
+        Class<?> type = expr.getType();
         return type.isArray() || Collection.class.isAssignableFrom(type);
     }
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/HibernateDeleteClause.java
Patch:
@@ -19,7 +19,7 @@
 import com.mysema.query.hql.HQLTemplates;
 import com.mysema.query.hql.JPQLTemplates;
 import com.mysema.query.types.EntityPath;
-import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.Predicate;
 
 /**
  * DeleteClause implementation for Hibernate
@@ -46,7 +46,7 @@ public HibernateDeleteClause(StatelessSession session, EntityPath<?> entity){
     public HibernateDeleteClause(SessionHolder session, EntityPath<?> entity, JPQLTemplates templates){
         this.session = session;
         this.templates = templates;
-        md.addJoin(JoinType.DEFAULT, entity.asExpr());
+        md.addJoin(JoinType.DEFAULT, entity);
     }
 
     @Override
@@ -61,7 +61,7 @@ public long execute() {
     }
     
     @Override
-    public HibernateDeleteClause where(EBoolean... o) {
+    public HibernateDeleteClause where(Predicate... o) {
         md.addWhere(o);
         return this;
     }

File: querydsl-hql/src/main/java/com/mysema/query/hql/jpa/JPADeleteClause.java
Patch:
@@ -18,7 +18,7 @@
 import com.mysema.query.hql.HQLTemplates;
 import com.mysema.query.hql.JPQLTemplates;
 import com.mysema.query.types.EntityPath;
-import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.Predicate;
 
 /**
  * DeleteClause implementation for JPA
@@ -41,7 +41,7 @@ public JPADeleteClause(EntityManager em, EntityPath<?> entity){
     public JPADeleteClause(EntityManager entityManager, EntityPath<?> entity, JPQLTemplates templates){
         this.entityManager = entityManager;
         this.templates = templates;
-        metadata.addJoin(JoinType.DEFAULT, entity.asExpr());
+        metadata.addJoin(JoinType.DEFAULT, entity);
     }
 
     @Override
@@ -56,7 +56,7 @@ public long execute() {
     }
     
     @Override
-    public JPADeleteClause where(EBoolean... o) {
+    public JPADeleteClause where(Predicate... o) {
         metadata.addWhere(o);
         return this;
     }

File: querydsl-hql/src/test/java/com/mysema/query/hql/AbstractQueryTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-import com.mysema.query.types.Expr;
+import com.mysema.query.types.Expression;
 
 public abstract class AbstractQueryTest implements Constants{
 
@@ -19,7 +19,7 @@ protected HQLSubQuery sub(){
         return new HQLSubQuery();
     }
 
-    protected static void assertToString(String expected, Expr<?> expr) {
+    protected static void assertToString(String expected, Expression<?> expr) {
         HQLSerializer serializer = new HQLSerializer(HQLTemplates.DEFAULT);
         assertEquals(expected, serializer.handle(expr).toString().replace("\n", " "));
     }

File: querydsl-hql/src/test/java/com/mysema/query/hql/CastTest.java
Patch:
@@ -9,12 +9,12 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.expr.ENumber;
-import com.mysema.query.types.path.PNumber;
+import com.mysema.query.types.expr.NumberExpression;
+import com.mysema.query.types.path.NumberPath;
 
 public class CastTest extends AbstractQueryTest {
 
-    private static ENumber<Integer> expr = new PNumber<Integer>(Integer.class,"int");
+    private static NumberExpression<Integer> expr = new NumberPath<Integer>(Integer.class,"int");
 
     @Test
     public void testNumericCast() {

File: querydsl-hql/src/test/java/com/mysema/query/hql/HQLSerializerTest.java
Patch:
@@ -9,14 +9,14 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.path.PNumber;
+import com.mysema.query.types.path.NumberPath;
 
 public class HQLSerializerTest {
 
     @Test
     public void testNormalizeNumericArgs() {
         HQLSerializer serializer = new HQLSerializer(HQLTemplates.DEFAULT);
-        PNumber<Double> doublePath = new PNumber<Double>(Double.class, "doublePath");
+        NumberPath<Double> doublePath = new NumberPath<Double>(Double.class, "doublePath");
         serializer.handle(doublePath.add(1));
         serializer.handle(doublePath.between((float)1.0, 1l));
         serializer.handle(doublePath.lt((byte)1));

File: querydsl-hql/src/test/java/com/mysema/query/hql/InnerJoinTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import com.mysema.query.alias.Alias;
 import com.mysema.query.hql.hibernate.HibernateQuery;
-import com.mysema.query.types.path.PString;
+import com.mysema.query.types.path.StringPath;
 
 public class InnerJoinTest {
 
@@ -25,7 +25,7 @@ public interface Entity{
     @Test
     public void subQuery(){
         Entity alias = Alias.alias(Entity.class);
-        PString path = new PString("path");
+        StringPath path = new StringPath("path");
         HQLSubQuery subQuery = new HQLSubQuery();
         subQuery.from($(alias));
         subQuery.fullJoin($(alias.getNames()), path);
@@ -37,7 +37,7 @@ public void subQuery(){
     @Test
     public void query(){
         Entity alias = Alias.alias(Entity.class);
-        PString path = new PString("path");
+        StringPath path = new StringPath("path");
         HQLQuery query = new HibernateQuery(new DummySessionHolder(), HQLTemplates.DEFAULT);
         query.from($(alias));
         query.fullJoin($(alias.getNames()), path);

File: querydsl-hql/src/test/java/com/mysema/query/hql/MathTest.java
Patch:
@@ -8,13 +8,13 @@
 import org.junit.Test;
 
 import com.mysema.query.hql.domain.QCat;
-import com.mysema.query.types.path.PNumber;
+import com.mysema.query.types.path.NumberPath;
 
 public class MathTest extends AbstractQueryTest{
 
     @Test
     public void test(){
-        PNumber<Double> path = QCat.cat.bodyWeight;
+        NumberPath<Double> path = QCat.cat.bodyWeight;
         assertToString("(cat.bodyWeight - sum(cat.bodyWeight)) * cat.bodyWeight", path.subtract(path.sum()).multiply(path));
     }
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/hibernate/sql/DerbySQLTest.java
Patch:
@@ -22,7 +22,7 @@
 import com.mysema.query.hql.domain.sql.SAnimal;
 import com.mysema.query.sql.DerbyTemplates;
 import com.mysema.query.sql.SQLTemplates;
-import com.mysema.query.types.EConstructor;
+import com.mysema.query.types.expr.ConstructorExpression;
 import com.mysema.testutil.HibernateConfig;
 import com.mysema.testutil.HibernateTestRunner;
 
@@ -109,7 +109,7 @@ public void entityProjections(){
         SAnimal cat = new SAnimal("cat");
 
         List<Cat> cats = query().from(cat).orderBy(cat.name.asc())
-            .list(EConstructor.create(Cat.class, cat.name, cat.id));
+            .list(ConstructorExpression.create(Cat.class, cat.name, cat.id));
         assertEquals(6, cats.size());
         for (Cat c : cats) System.out.println(c.getName());
     }

File: querydsl-hql/src/test/java/com/mysema/query/hql/jpa/sql/JPADerbySQLTest.java
Patch:
@@ -26,7 +26,7 @@
 import com.mysema.query.hql.domain.sql.SAnimal;
 import com.mysema.query.sql.DerbyTemplates;
 import com.mysema.query.sql.SQLTemplates;
-import com.mysema.query.types.EConstructor;
+import com.mysema.query.types.expr.ConstructorExpression;
 import com.mysema.testutil.JPAConfig;
 import com.mysema.testutil.JPATestRunner;
 
@@ -116,7 +116,7 @@ public void entityProjections(){
         // not yet supported
         SAnimal cat = new SAnimal("cat");
 
-        List<Cat> cats = query().from(cat).orderBy(cat.name.asc()).list(EConstructor.create(Cat.class, cat.name, cat.id));
+        List<Cat> cats = query().from(cat).orderBy(cat.name.asc()).list(ConstructorExpression.create(Cat.class, cat.name, cat.id));
         assertEquals(6, cats.size());
         for (Cat c : cats){
             System.out.println(c.getName());

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/JDOTuple.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.Map;
 
 import com.mysema.query.Tuple;
-import com.mysema.query.types.Expr;
+import com.mysema.query.types.Expression;
 import com.mysema.query.types.Path;
 
 /**
@@ -33,7 +33,7 @@ public <T> T get(int index, Class<T> type) {
     }
 
     @Override
-    public <T> T get(Expr<T> expr) {
+    public <T> T get(Expression<T> expr) {
         if (expr instanceof Path){
             return (T) mapped.get(((Path)expr).getMetadata().getExpression().toString());
         }else{

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/AbstractJDOTest.java
Patch:
@@ -20,7 +20,7 @@
 import com.mysema.query.jdoql.testdomain.Product;
 import com.mysema.query.jdoql.testdomain.Store;
 import com.mysema.query.types.EntityPath;
-import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.BooleanExpression;
 
 public abstract class AbstractJDOTest {
 
@@ -44,7 +44,7 @@ protected JDOQLSubQuery sub(){
         return new JDOQLSubQuery();
     }
 
-    protected <T> List<T> query(EntityPath<T> source, EBoolean condition) {
+    protected <T> List<T> query(EntityPath<T> source, BooleanExpression condition) {
         return query().from(source).where(condition).list(source.asExpr());
     }
 

File: querydsl-core/src/test/java/com/mysema/query/codegen/BeanSerializerTest.java
Patch:
@@ -75,12 +75,10 @@ public void test() throws IOException{
                 "Comparable comparable;",
                 "java.util.Date date;",
                 "DomainClass entityField;",
-//                "Object extendsTypeField;",
                 "Integer integer;",
                 "List<DomainClass> listField;",
                 "Map<DomainClass, DomainClass> mapField;",
                 "Set<DomainClass> setField;",
-//                "List<DomainClass, DomainClass> superTypeField;",
                 "java.sql.Time time;")){
             assertTrue(prop + " was not contained", str.contains(prop));
         }

File: src/main/java/com/mysema/codegen/model/ClassType.java
Patch:
@@ -106,7 +106,7 @@ public Type getComponentType() {
     
     @Override
     public String getFullName() {
-        return javaClass.getName();
+        return ClassUtils.getFullName(javaClass);   
     }
 
     @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/Configuration.java
Patch:
@@ -22,7 +22,7 @@
  */
 public class Configuration {
     
-    public static final Configuration DEFAULT = new Configuration(new SQLTemplates());
+    public static final Configuration DEFAULT = new Configuration(new SQLTemplates("\"",false));
     
     private final JDBCTypeMapping jdbcTypeMapping = new JDBCTypeMapping();
     

File: querydsl-sql/src/main/java/com/mysema/query/sql/ddl/CreateTableClause.java
Patch:
@@ -52,7 +52,7 @@ public class CreateTableClause {
     public CreateTableClause(Connection conn, SQLTemplates templates, String table) {
         this.connection = conn;
         this.templates = templates;
-        this.table = templates.quoteTableName(table);
+        this.table = templates.quoteIdentifier(table);
     }
 
     /**
@@ -65,7 +65,7 @@ public CreateTableClause(Connection conn, SQLTemplates templates, String table)
     public CreateTableClause column(String name, Class<?> type) {
         Assert.notNull(name,"name");
         Assert.notNull(type,"type");
-        columns.add(new ColumnData(templates.quoteColumnName(name), templates.getTypeForClass(type))); 
+        columns.add(new ColumnData(templates.quoteIdentifier(name), templates.getTypeForClass(type))); 
         return this;
     }
 
@@ -115,7 +115,7 @@ public CreateTableClause primaryKey(String name, String... columns) {
         Assert.notNull(name,"name");
         Assert.notEmpty(columns,"columns");
         for (int i = 0; i < columns.length; i++){
-            columns[i] = templates.quoteColumnName(columns[i]);
+            columns[i] = templates.quoteIdentifier(columns[i]);
         }        
         primaryKey = new PrimaryKeyData(name, columns);
         return this;

File: querydsl-sql/src/main/java/com/mysema/query/sql/ddl/DropTableClause.java
Patch:
@@ -28,7 +28,7 @@ public class DropTableClause {
     
     public DropTableClause(Connection conn, SQLTemplates templates, String table) {
         this.connection = conn;
-        this.table = templates.quoteTableName(table);
+        this.table = templates.quoteIdentifier(table);
     }
     
     @SuppressWarnings("SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE")

File: querydsl-sql/src/main/java/com/mysema/query/sql/ddl/ForeignKeyBuilder.java
Patch:
@@ -40,8 +40,8 @@ public CreateTableClause references(String table, String... parentColumns) {
         ForeignKeyData foreignKey = new ForeignKeyData(name, table);
         for (int i = 0; i < parentColumns.length; i++){
             foreignKey.add(
-                    templates.quoteColumnName(foreignColumns[i]), 
-                    templates.quoteColumnName(parentColumns[i]));
+                templates.quoteIdentifier(foreignColumns[i]), 
+                templates.quoteIdentifier(parentColumns[i]));
         }
         foreignKeys.add(foreignKey);
         return clause;

File: querydsl-sql/src/test/java/com/mysema/query/SelectBaseTest.java
Patch:
@@ -606,7 +606,7 @@ public void variousSingleProjections(){
     
     @Test
     public void aliasQuotes() {
-        expectedQuery = "select firstname as \"First Name\" from EMPLOYEE2 e";
+        expectedQuery = "select e.FIRSTNAME as \"First Name\" from EMPLOYEE2 e";
         query().from(employee).list(employee.firstname.as("First Name"));
     }
 

File: querydsl-sql/src/test/java/com/mysema/query/_mysql/SelectMySQLTest.java
Patch:
@@ -37,7 +37,7 @@ public void setUpForTest() {
     @Test
     @Override
     public void aliasQuotes() {
-        expectedQuery = "select firstname as `First Name` from EMPLOYEE2 e";
+        expectedQuery = "select e.FIRSTNAME as `First Name` from EMPLOYEE2 e";
         query().from(employee).list(employee.firstname.as("First Name"));
     }
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/TemplatesTest.java
Patch:
@@ -17,7 +17,7 @@ public void test(){
         new MySQLTemplates();
         new OracleTemplates();
         new PostgresTemplates();
-        new SQLTemplates();
+        new SQLTemplates("\"",false);
         new SQLServerTemplates();
     }
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/domain/QEmployee.java
Patch:
@@ -39,7 +39,7 @@ public class QEmployee extends RelationalPathBase<Employee> {
 
     public final PNumber<Integer> superiorId = createNumber("SUPERIOR_ID", Integer.class);
 
-    public final PrimaryKey<Employee> idKey = createPrimaryKey(this, id);
+    public final PrimaryKey<Employee> idKey = createPrimaryKey(id);
 
     public final ForeignKey<Employee> superiorIdKey = createForeignKey(superiorId, "ID");
     

File: querydsl-sql/src/test/java/com/mysema/query/sql/domain/QSurvey.java
Patch:
@@ -25,7 +25,7 @@ public class QSurvey extends RelationalPathBase<QSurvey>{
 
     public final PNumber<Integer> id = createNumber("ID", Integer.class);
     
-    public final PrimaryKey<QSurvey> idKey = createPrimaryKey(this,id);
+    public final PrimaryKey<QSurvey> idKey = createPrimaryKey(id);
 
     public QSurvey(String path) {
         super(QSurvey.class, PathMetadataFactory.forVariable(path));

File: querydsl-core/src/main/java/com/mysema/query/types/Expr.java
Patch:
@@ -41,7 +41,7 @@ public Expr(Class<? extends D> type) {
             || Character.class.equals(type);
     }
 
-    public abstract <R,C> R accept(Visitor<R,C> v, C context);
+    public abstract <R,C> R accept(Visitor<R,C> v, @Nullable C context);
 
     public abstract Expr<D> as(Path<D> alias);
 

File: querydsl-core/src/main/java/com/mysema/query/types/ToStringVisitor.java
Patch:
@@ -90,10 +90,8 @@ public String visit(Path<?> p, Templates templates) {
             }else{
                 throw new IllegalArgumentException("No pattern for " + p.getMetadata().getPathType());
             }
-        } else if (expr != null) {
+        } else {
             return expr.toString();
-        }else{
-            throw new IllegalArgumentException("Illegal path " + p);
         }
     }
 

File: src/test/java/com/mysema/codegen/ScalaWriterTest.java
Patch:
@@ -11,7 +11,6 @@
 
 import org.apache.commons.collections15.Transformer;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import com.mysema.codegen.model.ClassType;
@@ -59,9 +58,7 @@ public void beanAccessors() throws IOException{
     }
     
     @Test
-    @Ignore
     public void arrays() throws IOException{
-        // FIXME
 //        def main(args: Array[String]) {
         writer.beginClass(new SimpleType("Main"));
         writer.beginPublicMethod(Types.VOID, "main", new Parameter("args",Types.STRING.asArrayType()));

File: querydsl-sql/src/main/java/com/mysema/query/sql/Configuration.java
Patch:
@@ -11,6 +11,7 @@
 
 import javax.annotation.Nullable;
 
+import com.mysema.commons.lang.Assert;
 import com.mysema.query.sql.types.Type;
 import com.mysema.query.types.Path;
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLDeleteClause.java
Patch:
@@ -86,7 +86,7 @@ private PreparedStatement createStatement() throws SQLException{
             queryString = serializer.toString();
             logger.debug(queryString);
             stmt = connection.prepareStatement(queryString);
-            setParameters(stmt, serializer.getConstants(), Collections.<Param<?>,Object>emptyMap());
+            setParameters(stmt, serializer.getConstants(), serializer.getConstantPaths(), Collections.<Param<?>,Object>emptyMap());
         }else{
             SQLSerializer serializer = new SQLSerializer(configuration.getTemplates(), true);
             serializer.serializeForDelete(batches.get(0), entity);
@@ -95,14 +95,14 @@ private PreparedStatement createStatement() throws SQLException{
             
             // add first batch
             stmt = connection.prepareStatement(queryString);
-            setParameters(stmt, serializer.getConstants(), Collections.<Param<?>,Object>emptyMap());
+            setParameters(stmt, serializer.getConstants(), serializer.getConstantPaths(), Collections.<Param<?>,Object>emptyMap());
             stmt.addBatch();
             
             // add other batches
             for (int i = 1; i < batches.size(); i++){
                 serializer = new SQLSerializer(configuration.getTemplates(), true);
                 serializer.serializeForDelete(batches.get(i), entity);
-                setParameters(stmt, serializer.getConstants(), Collections.<Param<?>,Object>emptyMap());
+                setParameters(stmt, serializer.getConstants(), serializer.getConstantPaths(), Collections.<Param<?>,Object>emptyMap());
                 stmt.addBatch();
             }
         }

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLInsertClause.java
Patch:
@@ -163,7 +163,7 @@ private PreparedStatement createStatement(boolean withKeys) throws SQLException{
                 serializer = new SQLSerializer(configuration.getTemplates(), true);
                 // TODO : add support for dry serialization (without SQL construction)
                 serializer.serializeForInsert(metadata, entity, batch.getColumns(), batch.getValues(), batch.getSubQuery());
-                setParameters(stmt, serializer.getConstants(),Collections.<Param<?>,Object>emptyMap());
+                setParameters(stmt, serializer.getConstants(), serializer.getConstantPaths(), Collections.<Param<?>,Object>emptyMap());
                 stmt.addBatch();
             }
         }
@@ -179,7 +179,7 @@ private PreparedStatement prepareStatementAndSetParameters(SQLSerializer seriali
         }else{
             stmt = connection.prepareStatement(queryString);
         }            
-        setParameters(stmt, serializer.getConstants(),Collections.<Param<?>,Object>emptyMap());
+        setParameters(stmt, serializer.getConstants(), serializer.getConstantPaths(), Collections.<Param<?>,Object>emptyMap());
         return stmt;
     }
     

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLMergeClause.java
Patch:
@@ -137,7 +137,7 @@ private long executeNativeMerge() {
         PreparedStatement stmt = null;
         try {
             stmt = connection.prepareStatement(queryString);
-            setParameters(stmt, serializer.getConstants(),Collections.<Param<?>,Object>emptyMap());
+            setParameters(stmt, serializer.getConstants(), serializer.getConstantPaths(), Collections.<Param<?>,Object>emptyMap());
             return stmt.executeUpdate();
         } catch (SQLException e) {
             throw new QueryException("Caught " + e.getClass().getSimpleName()

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLUpdateClause.java
Patch:
@@ -98,7 +98,7 @@ private PreparedStatement createStatement() throws SQLException{
             queryString = serializer.toString();
             logger.debug(queryString);
             stmt = connection.prepareStatement(queryString);
-            setParameters(stmt, serializer.getConstants(), Collections.<Param<?>,Object>emptyMap());
+            setParameters(stmt, serializer.getConstants(), serializer.getConstantPaths(), Collections.<Param<?>,Object>emptyMap());
         }else{
             SQLSerializer serializer = new SQLSerializer(configuration.getTemplates(), true);
             serializer.serializeForUpdate(batchMetadata.get(0), entity, batchUpdates.get(0));
@@ -107,14 +107,14 @@ private PreparedStatement createStatement() throws SQLException{
             
             // add first batch
             stmt = connection.prepareStatement(queryString);
-            setParameters(stmt, serializer.getConstants(), Collections.<Param<?>,Object>emptyMap());
+            setParameters(stmt, serializer.getConstants(), serializer.getConstantPaths(), Collections.<Param<?>,Object>emptyMap());
             stmt.addBatch();
             
             // add other batches
             for (int i = 1; i < batchUpdates.size(); i++){
                 serializer = new SQLSerializer(configuration.getTemplates(), true);
                 serializer.serializeForUpdate(batchMetadata.get(i), entity, batchUpdates.get(i));
-                setParameters(stmt, serializer.getConstants(), Collections.<Param<?>,Object>emptyMap());
+                setParameters(stmt, serializer.getConstants(), serializer.getConstantPaths(), Collections.<Param<?>,Object>emptyMap());
                 stmt.addBatch();
             }
         }

File: querydsl-sql/src/test/java/com/mysema/query/SelectBaseTest.java
Patch:
@@ -367,9 +367,9 @@ public void standardTest(){
     public void stringFunctions2() throws SQLException {
         for (EBoolean where : Arrays.<EBoolean> asList(
                 employee.firstname.startsWith("a"),
-                employee.firstname.startsWith("a", false),
+                employee.firstname.startsWithIgnoreCase("a"),
                 employee.firstname.endsWith("a"),
-                employee.firstname.endsWith("a", false))) {
+                employee.firstname.endsWithIgnoreCase("a"))) {
             query().from(employee).where(where).list(employee.firstname);
         }
     }

File: querydsl-sql/src/main/java/com/mysema/query/sql/ddl/CreateTableClause.java
Patch:
@@ -196,8 +196,8 @@ public void execute() {
             stmt.execute(builder.toString());
             
             for (IndexData index : indexes){
-                String columns = StringUtils.join(index.getColumns(),", ");
-                String sql = "CREATE INDEX " + index.getName() + " ON " + table + "(" + columns+ ")";
+                String indexColumns = StringUtils.join(index.getColumns(),", ");
+                String sql = "CREATE INDEX " + index.getName() + " ON " + table + "(" + indexColumns+ ")";
                 logger.info(sql);
                 stmt.execute(sql);
             }

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLSerializer.java
Patch:
@@ -60,6 +60,8 @@ public void handle(String template, Object... args) {
 
     private static final String COMMA = ", ";
 
+    private final List<Path<?>> constantPaths = new ArrayList<Path<?>>();
+    
     private final List<Object> constants = new ArrayList<Object>();
 
     private final boolean dml;

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLDeleteClause.java
Patch:
@@ -15,6 +15,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.mysema.commons.lang.Assert;
 import com.mysema.query.DefaultQueryMetadata;
 import com.mysema.query.QueryException;
 import com.mysema.query.QueryFlag;
@@ -54,8 +55,8 @@ public SQLDeleteClause(Connection connection, SQLTemplates templates, Relational
     
     public SQLDeleteClause(Connection connection, Configuration configuration, RelationalPath<?> entity) {
         super(configuration);
-        this.connection = connection;
-        this.entity = entity;
+        this.connection = Assert.notNull(connection,"connection");
+        this.entity = Assert.notNull(entity,"entity");
     }
     
     public SQLDeleteClause addFlag(Position position, String flag){

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLInsertClause.java
Patch:
@@ -22,6 +22,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.mysema.commons.lang.Assert;
 import com.mysema.query.DefaultQueryMetadata;
 import com.mysema.query.QueryException;
 import com.mysema.query.QueryFlag;
@@ -73,8 +74,8 @@ public SQLInsertClause(Connection connection, SQLTemplates templates, Relational
     
     public SQLInsertClause(Connection connection, Configuration configuration, RelationalPath<?> entity) {
         super(configuration);
-        this.connection = connection;
-        this.entity = entity;
+        this.connection = Assert.notNull(connection,"connection");
+        this.entity = Assert.notNull(entity,"entity");
     }
     
     public SQLInsertClause addFlag(Position position, String flag){

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLMergeClause.java
Patch:
@@ -17,6 +17,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.mysema.commons.lang.Assert;
 import com.mysema.query.DefaultQueryMetadata;
 import com.mysema.query.QueryException;
 import com.mysema.query.QueryFlag;
@@ -67,8 +68,8 @@ public SQLMergeClause(Connection connection, SQLTemplates templates, RelationalP
     
     public SQLMergeClause(Connection connection, Configuration configuration, RelationalPath<?> entity) {
         super(configuration);
-        this.connection = connection;
-        this.entity = entity;
+        this.connection = Assert.notNull(connection,"connection");
+        this.entity = Assert.notNull(entity,"entity");
     }
     
     public SQLMergeClause addFlag(Position position, String flag){

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLUpdateClause.java
Patch:
@@ -18,6 +18,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.mysema.commons.lang.Assert;
 import com.mysema.commons.lang.Pair;
 import com.mysema.query.DefaultQueryMetadata;
 import com.mysema.query.QueryException;
@@ -64,8 +65,8 @@ public SQLUpdateClause(Connection connection, SQLTemplates templates, Relational
     
     public SQLUpdateClause(Connection connection, Configuration configuration, RelationalPath<?> entity) {
         super(configuration);
-        this.connection = connection;
-        this.entity = entity;
+        this.connection = Assert.notNull(connection,"connection");
+        this.entity = Assert.notNull(entity,"entity");
     }
     
     public SQLUpdateClause addFlag(Position position, String flag){

File: querydsl-sql/src/main/java/com/mysema/query/sql/JDBCTypeMapping.java
Patch:
@@ -13,12 +13,12 @@
 import javax.annotation.Nullable;
 
 /**
- * SQLTypeMapping defines a mapping from JDBC types to Java classes.
+ * JDBCTypeMapping defines a mapping from JDBC types to Java classes.
  *
  * @author tiwe
  *
  */
-public final class SQLTypeMapping {
+public final class JDBCTypeMapping {
 
     private static final Map<Integer, Class<?>> defaultTypes = new HashMap<Integer, Class<?>>();
     

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/AbstractSQLClause.java
Patch:
@@ -38,7 +38,7 @@ protected void setParameters(PreparedStatement stmt, Collection<?> objects, Map<
                     }
                     o = params.get(o);
                 }
-                counter += configuration.set(stmt, counter, o);
+                counter += configuration.set(stmt, null, counter, o);
             } catch (SQLException e) {
                 throw new IllegalArgumentException(e);
             }

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLInsertClause.java
Patch:
@@ -117,7 +117,7 @@ public <T> T executeWithKey(Path<T> path){
         ResultSet rs = executeWithKeys();
         try{
             if (rs.next()){
-                return configuration.get(rs, 1, path.getType());
+                return configuration.get(rs, path, 1, path.getType());
             }else{
                 return null;
             }
@@ -133,7 +133,7 @@ public <T> List<T> executeWithKeys(Path<T> path){
         try{
             List<T> rv = new ArrayList<T>();
             while (rs.next()){
-                rv.add(configuration.get(rs, 1, path.getType()));
+                rv.add(configuration.get(rs, path, 1, path.getType()));
             }
             return rv;
         } catch (SQLException e) {

File: querydsl-sql/src/test/java/com/mysema/query/sql/SQLTypeMappingTest.java
Patch:
@@ -15,7 +15,7 @@ public class SQLTypeMappingTest {
 
     @Test
     public void testGet() throws IllegalArgumentException, IllegalAccessException {
-        SQLTypeMapping mapping = new SQLTypeMapping();
+        JDBCTypeMapping mapping = new JDBCTypeMapping();
         for (Field field : java.sql.Types.class.getFields()){
             if (field.getType().equals(int.class)){
                 int val = field.getInt(null);

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -7,6 +7,7 @@
 
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Modifier;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
@@ -293,7 +294,7 @@ public <RT> CloseableIterator<RT> iterate(Expr<RT> expr) {
             try{
                 Map<String,Expr<?>> bindings = new HashMap<String,Expr<?>>();
                 for (Field field : expr.getClass().getFields()){
-                    if (Expr.class.isAssignableFrom(field.getType())){
+                    if (Expr.class.isAssignableFrom(field.getType()) && !Modifier.isStatic(field.getModifiers())){
                         field.setAccessible(true);
                         Expr<?> column = (Expr<?>) field.get(expr);
                         bindings.put(field.getName(), column);

File: querydsl-sql/src/test/java/com/mysema/query/sql/domain/QEmployee.java
Patch:
@@ -28,6 +28,8 @@
 public class QEmployee extends BeanPath<Employee> implements RelationalPath<Employee>{
 
     private static final long serialVersionUID = 1394463749655231079L;
+    
+    public static final QEmployee employee = new QEmployee("EMPLOYEE2");
 
     public final PNumber<Integer> id = createNumber("ID", Integer.class);
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/domain/QSurvey.java
Patch:
@@ -26,6 +26,8 @@
 public class QSurvey extends BeanPath<QSurvey> implements RelationalPath<QSurvey>{
 
     private static final long serialVersionUID = -7427577079709192842L;
+    
+    public static final QSurvey survey = new QSurvey("SURVEY");
 
     public final PString name = createString("NAME");
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/ForeignKeyTest.java
Patch:
@@ -11,6 +11,7 @@
 
 import org.junit.Test;
 
+import com.mysema.query.sql.domain.Employee;
 import com.mysema.query.sql.domain.QEmployee;
 import com.mysema.query.types.Path;
 
@@ -21,10 +22,10 @@ public void testOn() {
         QEmployee employee = new QEmployee("employee");
         QEmployee employee2 = new QEmployee("employee2");
 
-        ForeignKey<QEmployee> foreignKey = new ForeignKey<QEmployee>(employee, employee.superiorId, "ID");
+        ForeignKey<Employee> foreignKey = new ForeignKey<Employee>(employee, employee.superiorId, "ID");
         assertEquals("employee.SUPERIOR_ID = employee2.ID", foreignKey.on(employee2).toString());
 
-        foreignKey = new ForeignKey<QEmployee>(employee, Arrays.<Path<?>>asList(employee.superiorId, employee.firstname), Arrays.asList("ID", "FN"));
+        foreignKey = new ForeignKey<Employee>(employee, Arrays.<Path<?>>asList(employee.superiorId, employee.firstname), Arrays.asList("ID", "FN"));
         assertEquals("employee.SUPERIOR_ID = employee2.ID && employee.FIRSTNAME = employee2.FN", foreignKey.on(employee2).toString());
     }
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -51,7 +51,6 @@
  * @author tiwe
  * @version $Id$
  */
-@edu.umd.cs.findbugs.annotations.SuppressWarnings("SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING")
 public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>> extends
         ProjectableQuery<Q> {
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLDeleteClause.java
Patch:
@@ -28,15 +28,12 @@
 import com.mysema.query.types.Param;
 import com.mysema.query.types.expr.EBoolean;
 
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
-
 /**
  * SQLDeleteClause defines a DELETE clause
  *
  * @author tiwe
  *
  */
-@SuppressWarnings("SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING")
 public class SQLDeleteClause extends AbstractSQLClause implements DeleteClause<SQLDeleteClause> {
 
     private static final Logger logger = LoggerFactory.getLogger(SQLDeleteClause.class);

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLInsertClause.java
Patch:
@@ -37,15 +37,12 @@
 import com.mysema.query.types.path.NullExpr;
 import com.mysema.util.ResultSetAdapter;
 
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
-
 /**
  * SQLInsertClause defines an INSERT INTO clause
  *
  * @author tiwe
  *
  */
-@SuppressWarnings("SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING")
 public class SQLInsertClause extends AbstractSQLClause implements InsertClause<SQLInsertClause> {
 
     private static final Logger logger = LoggerFactory.getLogger(SQLInsertClause.class);

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLMergeClause.java
Patch:
@@ -42,7 +42,6 @@
  * @author tiwe
  *
  */
-@edu.umd.cs.findbugs.annotations.SuppressWarnings("SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING")
 public class SQLMergeClause extends AbstractSQLClause implements StoreClause<SQLMergeClause>{
 
     private static final Logger logger = LoggerFactory.getLogger(SQLMergeClause.class);

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLUpdateClause.java
Patch:
@@ -31,15 +31,12 @@
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.NullExpr;
 
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
-
 /**
  * SQLUpdateClause defines a UPDATE clause
  *
  * @author tiwe
  *
  */
-@SuppressWarnings("SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING")
 public class SQLUpdateClause extends AbstractSQLClause  implements UpdateClause<SQLUpdateClause> {
 
     private static final Logger logger = LoggerFactory.getLogger(SQLInsertClause.class);

File: querydsl-hql/src/main/java/com/mysema/query/hql/JPQLTemplates.java
Patch:
@@ -29,7 +29,7 @@ public class JPQLTemplates extends Templates {
     public static final JPQLTemplates DEFAULT = new JPQLTemplates();
 
     protected JPQLTemplates() {
-    //CHECKSTYLE:OFF
+        //CHECKSTYLE:OFF
         // boolean
         add(Ops.AND, "{0} and {1}", 36);
         add(Ops.NOT, "not {0}", 3);

File: querydsl-core/src/main/java/com/mysema/query/codegen/EntitySerializer.java
Patch:
@@ -85,7 +85,7 @@ protected void constructors(EntityType model, SerializerConfig config, CodeWrite
             if (stringOrBoolean){
                 writer.line("super(entity.getMetadata());");    
             }else{
-                writer.line("super(entity.getType(),entity.getMetadata());");
+                writer.line("super(entity.getType(), entity.getMetadata());");
             }            
             writer.end();
         }

File: querydsl-hql/src/test/java/com/mysema/query/hql/hibernate/sql/DerbySQLTest.java
Patch:
@@ -122,9 +122,9 @@ public void wildcard(){
         assertEquals(6, rows.size());
         print(rows);
 
-        rows = query().from(cat).list(cat.id, cat.all());
-        assertEquals(6, rows.size());
-        print(rows);
+//        rows = query().from(cat).list(cat.id, cat.all());
+//        assertEquals(6, rows.size());
+//        print(rows);
     }
 
     private void print(Iterable<Object[]> rows){

File: querydsl-hql/src/test/java/com/mysema/query/hql/jpa/sql/JPADerbySQLTest.java
Patch:
@@ -129,9 +129,9 @@ public void wildcard(){
         assertEquals(6, rows.size());
         print(rows);
 
-        rows = query().from(cat).list(cat.id, cat.all());
-        assertEquals(6, rows.size());
-        print(rows);
+//        rows = query().from(cat).list(cat.id, cat.all());
+//        assertEquals(6, rows.size());
+//        print(rows);
     }
 
     private void print(Iterable<Object[]> rows){

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/FetchPlanTest.java
Patch:
@@ -36,6 +36,7 @@ public void tearDown() {
         super.tearDown();
     }
     
+    @SuppressWarnings("unchecked")
     @Test
     public void listProducts() throws Exception{
         QProduct product = QProduct.product;
@@ -56,6 +57,7 @@ public void listProducts() throws Exception{
         assertEquals(2, jdoQuery.getFetchPlan().getMaxFetchDepth());
     }
     
+    @SuppressWarnings("unchecked")
     @Test
     public void listStores() throws Exception{
         QStore store = QStore.store;

File: querydsl-sql/src/test/java/com/mysema/query/DeleteBaseTest.java
Patch:
@@ -15,13 +15,13 @@
 import org.junit.Before;
 import org.junit.Test;
 
+import com.mysema.query.sql.RelationalPath;
 import com.mysema.query.sql.dml.SQLDeleteClause;
-import com.mysema.query.types.EntityPath;
 import com.mysema.testutil.ExcludeIn;
 
 public abstract class DeleteBaseTest extends AbstractBaseTest{
 
-    protected SQLDeleteClause delete(EntityPath<?> e){
+    protected SQLDeleteClause delete(RelationalPath<?> e){
         return new SQLDeleteClause(Connections.getConnection(), templates, e);
     }
 

File: querydsl-apt/src/main/java/com/mysema/query/apt/APTTypeFactory.java
Patch:
@@ -379,10 +379,10 @@ private Type handlePrimitiveType(PrimitiveType t) {
         switch (t.getKind()) {
         case BOOLEAN: return Types.BOOLEAN;
         case BYTE: return Types.BYTE;
-        case CHAR: return Types.CHAR;
+        case CHAR: return Types.CHARACTER;
         case DOUBLE: return Types.DOUBLE;
         case FLOAT: return Types.FLOAT;
-        case INT: return Types.INT;
+        case INT: return Types.INTEGER;
         case LONG: return Types.LONG;
         case SHORT: return Types.SHORT;
         }

File: querydsl-collections/src/main/java/com/mysema/query/collections/DefaultEvaluatorFactory.java
Patch:
@@ -107,7 +107,6 @@ public <T> Evaluator<T> create(QueryMetadata metadata, List<? extends Expr<?>> s
      * @param filter
      * @return
      */
-    @SuppressWarnings("unchecked")
     public <T> Evaluator<List<T>> createEvaluator(QueryMetadata metadata, Expr<? extends T> source, EBoolean filter){
         String typeName = com.mysema.codegen.support.ClassUtils.getName(source.getType());
         ColQuerySerializer ser = new ColQuerySerializer(templates);

File: querydsl-core/src/main/java/com/mysema/query/codegen/TypeFactory.java
Patch:
@@ -47,7 +47,6 @@ public Type create(Class<?> cl){
         return create(cl, cl);
     }
 
-    @SuppressWarnings("unchecked")
     public Type create(Class<?> cl, java.lang.reflect.Type genericType) {
         List<java.lang.reflect.Type> key = Arrays.<java.lang.reflect.Type> asList(cl, genericType);
         if (cache.containsKey(key)) {

File: querydsl-core/src/test/java/com/mysema/query/codegen/BeanSerializerTest.java
Patch:
@@ -85,9 +85,9 @@ public void test() throws IOException{
                 "Object extendsTypeField;",
                 "Integer integer;",
                 "List<DomainClass> listField;",
-                "Map<DomainClass,DomainClass> mapField;",
+                "Map<DomainClass, DomainClass> mapField;",
                 "Set<DomainClass> setField;",
-                "List<DomainClass,DomainClass> superTypeField;",
+                "List<DomainClass, DomainClass> superTypeField;",
                 "java.sql.Time time;")){
             assertTrue(prop + " was not contained", str.contains(prop));
         }

File: querydsl-core/src/test/java/com/mysema/query/codegen/EntitySerializerTest.java
Patch:
@@ -35,6 +35,7 @@ public void testSerialize() throws IOException {
         SimpleType type = new SimpleType(TypeCategory.ENTITY, "java.util.Locale", "java.util", "Locale",false,false);
         EntityType entityType = new EntityType("Q",type);        
         serializer.serialize(entityType, SimpleSerializerConfig.DEFAULT, new JavaWriter(writer));
+        System.out.println(writer);
         assertTrue(writer.toString().contains("public class QLocale extends PEntity<java.util.Locale> {"));
     }
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/Type.java
Patch:
@@ -18,6 +18,7 @@
  *
  * @param <T>
  */
+// TODO : rename this since it clashes with com.mysema.codegen.model.Type
 public interface Type<T> {
 
     int[] getSQLTypes();

File: src/main/java/com/mysema/codegen/model/ClassType.java
Patch:
@@ -34,7 +34,7 @@ public class ClassType<T> implements Type {
     @Nullable
     private final Class<?> primitiveClass;
     
-    public ClassType(TypeCategory category, Class<T> javaClass, @Nullable Class<?> primitiveClass) {
+    public ClassType(TypeCategory category, Class<T> javaClass, Class<?> primitiveClass) {
         this(category, javaClass, primitiveClass, Collections.<Type>emptyList());
     }
         

File: src/main/java/com/mysema/codegen/model/Types.java
Patch:
@@ -20,7 +20,7 @@
  */
 @SuppressWarnings("unchecked")
 public final class Types {
-
+    
     public static final ClassType<Object> OBJECT = new ClassType<Object>(TypeCategory.SIMPLE,Object.class);
     
     public static final ClassType<Object[]> OBJECTS = new ClassType<Object[]>(TypeCategory.ARRAY,Object[].class);
@@ -61,6 +61,8 @@ public final class Types {
     
     public static final ClassType<URI> URI = new ClassType<URI>(TypeCategory.COMPARABLE,URI.class);
     
+    public static final ClassType<Void> VOID = new ClassType<Void>(TypeCategory.SIMPLE, void.class);
+    
     private Types(){}
     
 }

File: querydsl-apt/src/main/java/com/mysema/query/apt/APTTypeFactory.java
Patch:
@@ -42,7 +42,7 @@
 import com.mysema.query.codegen.TypeFactory;
 
 /**
- * APTTypeModelFactory is a factory for APT inspection based TypeModel creation
+ * APTTypeFactory is a factory for APT inspection based TypeModel creation
  *
  * @author tiwe
  *

File: querydsl-apt/src/main/java/com/mysema/query/apt/ElementHandler.java
Patch:
@@ -35,7 +35,7 @@
 import com.mysema.query.codegen.Property;
 
 /**
- * EntityElementVisitor is a an APT visitor for entity types
+ * ElementHandler is a an APT visitor for entity types
  *
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/annotations/QueryEmbeddable.java
Patch:
@@ -18,7 +18,6 @@
 /**
  * Annotation for APT based Domain query type generation. Annotate Embeddable types with this annotation.
  */
-// TODO : rename to QEmbeddable
 public @interface QueryEmbeddable {
 
 }

File: querydsl-core/src/main/java/com/mysema/query/annotations/QueryEntity.java
Patch:
@@ -18,7 +18,6 @@
 /**
  * Annotation for APT based Domain query type generation. Annotate Domain types with this annotation.
  */
-// TODO : rename to QEntity
 public @interface QueryEntity {
 
 }

File: querydsl-core/src/main/java/com/mysema/query/annotations/QueryExtensions.java
Patch:
@@ -22,7 +22,6 @@
 @Documented
 @Target(TYPE)
 @Retention(RUNTIME)
-// TODO : rename to Extensions
 public @interface QueryExtensions {
 
     /**

File: querydsl-core/src/main/java/com/mysema/query/annotations/QuerySupertype.java
Patch:
@@ -18,7 +18,6 @@
 /**
  * Annotation for APT based Domain query type generation.
  */
-// TODO : rename to QSupertype
 public @interface QuerySupertype {
 
 }

File: querydsl-core/src/main/java/com/mysema/query/annotations/QueryTransient.java
Patch:
@@ -23,7 +23,6 @@
 @Documented
 @Target({FIELD,METHOD})
 @Retention(RUNTIME)
-// TODO : rename to Transient
 public @interface QueryTransient {
 
 }

File: querydsl-core/src/main/java/com/mysema/query/annotations/QueryType.java
Patch:
@@ -23,7 +23,6 @@
 @Documented
 @Target({FIELD,METHOD,PARAMETER})
 @Retention(RUNTIME)
-// TODO : rename to QType
 public @interface QueryType {
 
     /**

File: src/main/java/com/mysema/codegen/model/SimpleType.java
Patch:
@@ -15,8 +15,6 @@
 
 /**
  * @author tiwe
- *
- * @param <T>
  */
 @Immutable
 public class SimpleType implements Type {

File: src/main/java/com/mysema/codegen/model/Type.java
Patch:
@@ -12,8 +12,6 @@
 
 /**
  * @author tiwe
- *
- * @param <T>
  */
 public interface Type {
     

File: src/test/java/com/mysema/codegen/ComplexEvaluationTest.java
Patch:
@@ -15,8 +15,8 @@ public class ComplexEvaluationTest {
     
     @Test
     @SuppressWarnings("unchecked")
-    public void testComplex(){Type<String> stringType = new Type<String>(String.class);
-        Type<List> resultType = new Type<List>(List.class, stringType);
+    public void testComplex(){ClassType<String> stringType = new ClassType<String>(String.class);
+        Type<List> resultType = new ClassType<List>(List.class, stringType);
         StringBuilder source = new StringBuilder();
         source.append("java.util.List<String> rv = new java.util.ArrayList<String>();\n");
         source.append("for (String a : a_){\n");
@@ -30,7 +30,7 @@ public class ComplexEvaluationTest {
         
         Evaluator<List> evaluator = factory.createEvaluator(
             source.toString(), 
-            resultType, 
+            List.class, 
             new String[]{"a_","b_"}, 
             new Type[]{resultType, resultType},
             new Class[]{List.class,List.class},

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLTemplates.java
Patch:
@@ -30,13 +30,13 @@
  * @version $Id$
  */
 public class SQLTemplates extends Templates {
-
+    
     public static final Operator<Object> CAST = new OperatorImpl<Object>("CAST",Object.class, Object.class);
     
-    public static final SQLTemplates DEFAULT = new SQLTemplates();
-
     public static final Operator<Object> UNION = new OperatorImpl<Object>("UNION");
 
+    public static final SQLTemplates DEFAULT = new SQLTemplates();
+    
     private final Map<Class<?>, String> class2type = new HashMap<Class<?>, String>();
 
     @Nullable

File: querydsl-apt/src/test/java/com/mysema/query/domain/QueryExtensions2Test.java
Patch:
@@ -26,8 +26,8 @@ public interface PointOperations {
        @QueryMethod("geo_distance({0}, {1})")
        int geoDistance(Point otherPoint);
 
-       @QueryMethod("")
-       Point getPoint();
+//       @QueryMethod("")
+//       Point getPoint();
 
     }
 

File: querydsl-core/src/main/java/com/mysema/query/codegen/TypeMappings.java
Patch:
@@ -66,6 +66,7 @@ public TypeMappings(){
         register(TypeCategory.MAP, Expr.class, PSimple.class, CSimple.class);
         register(TypeCategory.SIMPLE, Expr.class, PSimple.class, CSimple.class);
 
+        register(TypeCategory.CUSTOM, Expr.class, Path.class, CSimple.class);
         register(TypeCategory.ENTITY, Expr.class, Path.class, CSimple.class);
     }
 
@@ -102,7 +103,7 @@ public String getQueryType(Type type, EntityType model, String typeName, boolean
         String localName = null;
         TypeCategory category = type.getCategory();
 
-        if (raw && category != TypeCategory.ENTITY){
+        if (raw && category != TypeCategory.ENTITY && category != TypeCategory.CUSTOM){
             return typeName;
         }
 
@@ -118,7 +119,7 @@ public String getQueryType(Type type, EntityType model, String typeName, boolean
         if (category == TypeCategory.STRING || category == TypeCategory.BOOLEAN){
             return typeName;
 
-        }else if (category == TypeCategory.ENTITY){
+        }else if (category == TypeCategory.ENTITY || category == TypeCategory.CUSTOM){
             String suffix;
             if (!type.getPackageName().isEmpty()){
                 suffix = type.getFullName().substring(type.getPackageName().length()+1).replace('.', '_');

File: src/main/java/com/mysema/codegen/CodeWriter.java
Patch:
@@ -72,7 +72,7 @@ public interface CodeWriter extends Appendable{
     CodeWriter privateStaticFinal(String type, String name, String value) throws IOException;
 
     CodeWriter protectedField(String type, String name) throws IOException;
-
+    
     CodeWriter protectedFinal(String type, String name) throws IOException;
 
     CodeWriter protectedFinal(String type, String name, String value) throws IOException;

File: querydsl-apt/src/test/java/com/mysema/query/domain/Inheritance4Test.java
Patch:
@@ -26,9 +26,9 @@ public Comparable<?> getField() {
 
     @QueryEntity
     public class EntityWithNumber extends EntityWithComparable{
-        private Integer field;
+        private Long field;
 
-        public Integer getField() {
+        public Long getField() {
             return field;
         }
 

File: querydsl-apt/src/test/java/com/mysema/query/domain/QueryExtensions7Test.java
Patch:
@@ -9,10 +9,11 @@
 import com.mysema.query.annotations.QueryEntity;
 import com.mysema.query.annotations.QueryExtensions;
 import com.mysema.query.annotations.QueryMethod;
-import com.mysema.query.types.QByte;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EBooleanConst;
 
+import ext.java.lang.QByte;
+
 @Ignore
 public class QueryExtensions7Test {
     

File: querydsl-apt/src/test/java/com/mysema/query/domain/SimpleTypesTest.java
Patch:
@@ -247,7 +247,7 @@ public void testSimpleTypes() throws SecurityException, NoSuchFieldException{
         match(PNumber.class, "ddouble2");
         match(PNumber.class, "ffloat");
         match(PNumber.class, "ffloat2");
-        match(PNumber.class, "iint");
+//        match(PNumber.class, "iint");
         match(PNumber.class, "iint2");
         match(PNumber.class, "llong");
         match(PNumber.class, "llong2");

File: querydsl-apt/src/test/java/com/mysema/query/domain/DelegateTest.java
Patch:
@@ -10,7 +10,6 @@
 import com.mysema.query.annotations.QuerySupertype;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EBooleanConst;
-import com.mysema.query.types.path.PString;
 
 public class DelegateTest {
 

File: querydsl-core/src/main/java/com/mysema/query/types/PathMetadata.java
Patch:
@@ -39,7 +39,7 @@ public PathMetadata(@Nullable Path<?> parent, Expr<T> expression, PathType type)
         this.expression = expression;
         this.pathType = type;
         this.root = parent != null ? parent.getRoot() : null;
-        this.hashCode = new HashCodeBuilder().append(expression).append(parent).append(pathType).hashCode();
+        this.hashCode = new HashCodeBuilder().append(expression).append(parent).append(pathType).toHashCode();
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathMixin.java
Patch:
@@ -16,7 +16,6 @@
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.PathType;
 import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.ESimple;
 import com.mysema.query.types.expr.OBoolean;
 import com.mysema.util.ReflectionUtils;
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/BooleanType.java
Patch:
@@ -18,7 +18,8 @@ public class BooleanType implements Type<Boolean>{
 
     @Override
     public Boolean getValue(ResultSet rs, int startIndex) throws SQLException {
-        return rs.getBoolean(startIndex);
+        Object value = rs.getObject(startIndex);
+        return value instanceof Boolean ? (Boolean)value : null;
     }
 
     @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/UtilDateType.java
Patch:
@@ -19,7 +19,7 @@ public class UtilDateType implements Type<Date>{
     
     @Override
     public Date getValue(ResultSet rs, int startIndex) throws SQLException {
-        return rs.getDate(startIndex);
+        return rs.getTimestamp(startIndex);
     }
 
     @Override
@@ -29,7 +29,7 @@ public Class<Date> getReturnedClass() {
 
     @Override
     public void setValue(PreparedStatement st, int startIndex, Date value) throws SQLException {
-        st.setDate(startIndex, new java.sql.Date(value.getTime()));
+        st.setTimestamp(startIndex, new java.sql.Timestamp(value.getTime()));
     }
 
     @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/BigDecimalType.java
Patch:
@@ -9,8 +9,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
-import org.hsqldb.Types;
+import java.sql.Types;
 
 /**
  * @author tiwe

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/BlobType.java
Patch:
@@ -9,8 +9,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
-import org.hsqldb.Types;
+import java.sql.Types;
 
 /**
  * @author tiwe

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/BooleanType.java
Patch:
@@ -8,8 +8,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
-import org.hsqldb.Types;
+import java.sql.Types;
 
 /**
  * @author tiwe

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/ByteType.java
Patch:
@@ -8,8 +8,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
-import org.hsqldb.Types;
+import java.sql.Types;
 
 /**
  * @author tiwe

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/BytesType.java
Patch:
@@ -8,8 +8,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
-import org.hsqldb.Types;
+import java.sql.Types;
 
 /**
  * @author tiwe

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/CharacterType.java
Patch:
@@ -8,8 +8,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
-import org.hsqldb.Types;
+import java.sql.Types;
 
 /**
  * @author tiwe

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/ClobType.java
Patch:
@@ -9,8 +9,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
-import org.hsqldb.Types;
+import java.sql.Types;
 
 /**
  * @author tiwe

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/DateType.java
Patch:
@@ -9,8 +9,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
-import org.hsqldb.Types;
+import java.sql.Types;
 
 /**
  * @author tiwe

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/DoubleType.java
Patch:
@@ -8,8 +8,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
-import org.hsqldb.Types;
+import java.sql.Types;
 
 /**
  * @author tiwe

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/FloatType.java
Patch:
@@ -8,8 +8,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
-import org.hsqldb.Types;
+import java.sql.Types;
 
 /**
  * @author tiwe

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/IntegerType.java
Patch:
@@ -8,8 +8,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
-import org.hsqldb.Types;
+import java.sql.Types;
 
 /**
  * @author tiwe

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/LongType.java
Patch:
@@ -8,8 +8,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
-import org.hsqldb.Types;
+import java.sql.Types;
 
 /**
  * @author tiwe

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/ObjectType.java
Patch:
@@ -8,8 +8,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
-import org.hsqldb.Types;
+import java.sql.Types;
 
 /**
  * @author tiwe

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/ShortType.java
Patch:
@@ -8,8 +8,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
-import org.hsqldb.Types;
+import java.sql.Types;
 
 /**
  * @author tiwe

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/StringType.java
Patch:
@@ -8,8 +8,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
-import org.hsqldb.Types;
+import java.sql.Types;
 
 /**
  * @author tiwe

File: querydsl-sql/src/main/java/com/mysema/query/sql/types/UtilDateType.java
Patch:
@@ -9,8 +9,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.util.Date;
-
-import org.hsqldb.Types;
+import java.sql.Types;
 
 /**
  * @author tiwe

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLSerializer.java
Patch:
@@ -19,8 +19,8 @@
 import com.mysema.commons.lang.Pair;
 import com.mysema.query.JoinExpression;
 import com.mysema.query.QueryException;
-import com.mysema.query.QueryMetadata;
 import com.mysema.query.QueryFlag;
+import com.mysema.query.QueryMetadata;
 import com.mysema.query.QueryFlag.Position;
 import com.mysema.query.serialization.SerializerBase;
 import com.mysema.query.types.*;

File: querydsl-core/src/main/java/com/mysema/query/dml/DMLClause.java
Patch:
@@ -10,17 +10,17 @@
 import com.mysema.query.types.Path;
 
 /**
- * Parent interface for InsertClause and UpdateClause
+ * Parent interface for DeleteClause, InsertClause and UpdateCluase
  * 
  * @author tiwe
  *
  * @param <C>
  */
-public interface StoreClause<C extends StoreClause<C>> {
+public interface DMLClause<C extends DMLClause<C>> {
     
 
     /**
-     * Execute the clause and return the amount of inserted/updated rows/items
+     * Execute the clause and return the amount of deleted/inserted/updated rows/items
      *
      * @return
      */

File: querydsl-core/src/main/java/com/mysema/query/dml/InsertClause.java
Patch:
@@ -15,7 +15,7 @@
  *
  * @param <C>
  */
-public interface InsertClause<C extends InsertClause<C>> extends StoreClause<C>{
+public interface InsertClause<C extends InsertClause<C>> extends DMLClause<C>{
 
     /**
      * Define the columns to be populated

File: querydsl-core/src/main/java/com/mysema/query/dml/UpdateClause.java
Patch:
@@ -17,7 +17,7 @@
  *
  * @param <C>
  */
-public interface UpdateClause<C extends UpdateClause<C>> extends StoreClause<C>{
+public interface UpdateClause<C extends UpdateClause<C>> extends DMLClause<C>{
 
     /**
      * Set the paths to be updated

File: querydsl-core/src/main/java/com/mysema/query/types/Custom.java
Patch:
@@ -7,6 +7,8 @@
 
 import java.util.List;
 
+import com.mysema.query.types.expr.ESimple;
+
 /**
  * Custom provides base types for custom expressions with integrated
  * serialization templates
@@ -48,6 +50,6 @@ public interface Custom<T> {
      *
      * @return
      */
-    Expr<T> asExpr();
+    ESimple<T> asExpr();
 
 }

File: querydsl-core/src/main/java/com/mysema/query/types/Operation.java
Patch:
@@ -7,6 +7,8 @@
 
 import java.util.List;
 
+import com.mysema.query.types.expr.ESimple;
+
 /**
  * Operation represents an operation with operator and arguments
  *
@@ -20,7 +22,7 @@ public interface Operation<RT> {
      *
      * @return
      */
-    Expr<RT> asExpr();
+    ESimple<RT> asExpr();
 
     /**
      * Get the argument with the given index

File: querydsl-core/src/main/java/com/mysema/query/types/Path.java
Patch:
@@ -8,6 +8,7 @@
 import java.lang.reflect.AnnotatedElement;
 
 import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.ESimple;
 
 /**
  * Path represents a path expression
@@ -21,7 +22,7 @@ public interface Path<C> {
      *
      * @return
      */
-    Expr<C> asExpr();
+    ESimple<C> asExpr();
 
     /**
      * Get the metadata for this path

File: querydsl-core/src/main/java/com/mysema/query/types/SubQuery.java
Patch:
@@ -7,6 +7,8 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.ESimple;
+import com.mysema.query.types.query.Detachable;
 
 /**
  *
@@ -46,6 +48,6 @@ public interface SubQuery<T>{
      *
      * @return
      */
-    Expr<T> asExpr();
+    ESimple<T> asExpr();
 
 }

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CustomMixin.java
Patch:
@@ -11,6 +11,7 @@
 import com.mysema.query.types.Custom;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Template;
+import com.mysema.query.types.expr.ESimple;
 
 /**
  * Mixin implementation of the Custom interface
@@ -23,7 +24,7 @@ public final class CustomMixin<T> implements Custom<T>, Serializable {
 
     private static final long serialVersionUID = 6951623726800809083L;
 
-    private final Expr<T> self;
+    private final ESimple<T> self;
 
     private final List<Expr<?>> args;
 
@@ -75,7 +76,7 @@ public Class<? extends T> getType() {
     }
 
     @Override
-    public Expr<T> asExpr() {
+    public ESimple<T> asExpr() {
         return self;
     }
 }

File: querydsl-core/src/main/java/com/mysema/query/types/expr/OperationMixin.java
Patch:
@@ -26,7 +26,7 @@ public final class OperationMixin<RT> implements Operation<RT>, Serializable {
 
     private final Operator<? super RT> operator;
 
-    private final Expr<RT> self;
+    private final ESimple<RT> self;
 
     public OperationMixin(Operation<RT> self, Operator<? super RT> operator, List<Expr<?>> args){
         this.self = self.asExpr();
@@ -35,7 +35,7 @@ public OperationMixin(Operation<RT> self, Operator<? super RT> operator, List<Ex
     }
 
     @Override
-    public Expr<RT> asExpr() {
+    public ESimple<RT> asExpr() {
         return self;
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathMixin.java
Patch:
@@ -16,6 +16,7 @@
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.PathType;
 import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.ESimple;
 import com.mysema.query.types.expr.OBoolean;
 import com.mysema.util.ReflectionUtils;
 
@@ -38,7 +39,7 @@ public final class PathMixin<T> implements Path<T>, Serializable {
 
     private final Path<?> root;
 
-    private final Expr<T> self;
+    private final ESimple<T> self;
 
     @Nullable
     private AnnotatedElement annotatedElement;
@@ -50,7 +51,7 @@ public PathMixin(Path<T> self, PathMetadata<?> metadata){
     }
 
     @Override
-    public Expr<T> asExpr() {
+    public ESimple<T> asExpr() {
         return self;
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/query/ListSubQuery.java
Patch:
@@ -75,7 +75,7 @@ public EBoolean notExists() {
 
     @SuppressWarnings("unchecked")
     public Expr<?> as(Expr<?> alias) {
-        return OSimple.create(alias.getType(),(Operator)Ops.ALIAS, this, alias.asExpr());
+        return OSimple.create(alias.getType(),(Operator)Ops.ALIAS, this, alias);
     }
 
 }

File: querydsl-core/src/main/java/com/mysema/query/types/query/SubQueryMixin.java
Patch:
@@ -12,6 +12,7 @@
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.ESimple;
 import com.mysema.query.types.expr.OBoolean;
 
 /**
@@ -27,7 +28,7 @@ public class SubQueryMixin<T> implements SubQuery<T>{
 
     private final QueryMetadata metadata;
 
-    private final Expr<T> self;
+    private final ESimple<T> self;
 
     public SubQueryMixin(SubQuery<T> self, QueryMetadata metadata){
         this.self = self.asExpr();
@@ -69,7 +70,7 @@ public EBoolean notExists() {
     }
 
     @Override
-    public Expr<T> asExpr() {
+    public ESimple<T> asExpr() {
         return self;
     }
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLMergeClause.java
Patch:
@@ -18,7 +18,7 @@
 import org.slf4j.LoggerFactory;
 
 import com.mysema.query.QueryException;
-import com.mysema.query.dml.StoreClause;
+import com.mysema.query.dml.DMLClause;
 import com.mysema.query.sql.SQLQuery;
 import com.mysema.query.sql.SQLQueryImpl;
 import com.mysema.query.sql.SQLSerializer;
@@ -39,7 +39,7 @@
  *
  */
 @edu.umd.cs.findbugs.annotations.SuppressWarnings("SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING")
-public class SQLMergeClause implements StoreClause<SQLMergeClause>{
+public class SQLMergeClause implements DMLClause<SQLMergeClause>{
 
     private static final Logger logger = LoggerFactory.getLogger(SQLMergeClause.class);
 
@@ -105,7 +105,7 @@ private long executeCompositeMerge() {
     }
 
     @SuppressWarnings("unchecked")
-    private void populate(StoreClause<?> clause) {
+    private void populate(DMLClause<?> clause) {
         for (int i = 0; i < columns.size(); i++){
             clause.set((Path)columns.get(i), (Expr)values.get(i));
         }

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLServerTemplates.java
Patch:
@@ -41,7 +41,7 @@ public SQLServerTemplates(){
     public SQLServerTemplates(boolean quote){
         super(quote ? "\"" : null);
         addClass2TypeMappings("decimal", Double.class);
-        setDummyTable(null);
+        setDummyTable("");
 
         // String
         add(Ops.CHAR_AT, "cast(substring({0},{1}+1,1) as char)");

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -187,6 +187,7 @@ public <E> Q rightJoin(ForeignKey<E> key, PEntity<E>  entity) {
     }
 
     @SuppressWarnings("unchecked")
+    @Nullable
     private <T> T get(ResultSet rs, int i, Class<T> type) {
         try {
             Object value = rs.getObject(i);

File: querydsl-core/src/test/java/com/mysema/testutil/FilteringTestRunner.java
Patch:
@@ -31,8 +31,6 @@ public FilteringTestRunner(Class<?> klass) throws InitializationError {
     public void run(RunNotifier notifier) {
         if (run){
             super.run(notifier);
-        }else{
-            System.err.println("skipping");
         }
     }
 

File: querydsl-core/src/test/java/com/mysema/testutil/ResourceCheckRule.java
Patch:
@@ -8,7 +8,7 @@ public class ResourceCheckRule implements MethodRule{
 
     @Override
     public Statement apply(Statement base, FrameworkMethod method, Object target) {
-        Class<?> testClass = method.getMethod().getDeclaringClass();
+        Class<?> testClass = target.getClass();
         ResourceCheck rc = testClass.getAnnotation(ResourceCheck.class);
         boolean run = true;
         if (rc != null) {

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLQueryImpl.java
Patch:
@@ -22,7 +22,7 @@ public class SQLQueryImpl extends AbstractSQLQuery<SQLQueryImpl> implements SQLQ
      * Create a detached SQLQueryImpl instance
      * The query can be attached via the clone method
      *
-     * @param conn Connection to use
+     * @param connection Connection to use
      * @param templates SQLTemplates to use
      */
     public SQLQueryImpl(SQLTemplates templates) {

File: querydsl-sql/src/main/java/com/mysema/query/sql/support/ForeignKeyData.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import com.mysema.commons.lang.Assert;
 import com.mysema.commons.lang.Pair;
 
 /**
@@ -23,8 +24,8 @@ public class ForeignKeyData implements KeyData {
     private final List<Pair<String,String>> columns = new ArrayList<Pair<String,String>>();
 
     public ForeignKeyData(String name, String parentTable) {
-        this.name = name;
-        this.table = parentTable;
+        this.name = Assert.hasLength(name,"name");
+        this.table = Assert.hasLength(parentTable,"parentTable");
     }
 
     public void add(String foreignColumn, String parentColumn){

File: querydsl-sql/src/main/java/com/mysema/query/sql/support/InverseForeignKeyData.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import com.mysema.commons.lang.Assert;
 import com.mysema.commons.lang.Pair;
 
 /**
@@ -23,8 +24,8 @@ public class InverseForeignKeyData implements KeyData{
     private final List<Pair<String,String>> columns = new ArrayList<Pair<String,String>>();
 
     public InverseForeignKeyData(String name, String parentTable) {
-        this.name = name;
-        this.table = parentTable;
+        this.name = Assert.hasLength(name,"name");
+        this.table = Assert.hasLength(parentTable,"parentTable");
     }
 
     public void add(String foreignColumn, String parentColumn){

File: querydsl-sql/src/main/java/com/mysema/query/sql/support/PrimaryKeyData.java
Patch:
@@ -8,6 +8,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import com.mysema.commons.lang.Assert;
+
 /**
  * @author tiwe
  *
@@ -19,7 +21,7 @@ public class PrimaryKeyData {
     private final List<String> columns = new ArrayList<String>();
 
     public PrimaryKeyData(String name) {
-        this.name = name;
+        this.name = Assert.notNull(name,"name");
     }
 
     public void add(String column){

File: querydsl-sql/src/test/java/com/mysema/query/SelectBaseTest.java
Patch:
@@ -251,7 +251,7 @@ public void mathFunctions() throws SQLException {
     }
 
     @Test
-    @ExcludeIn({HSQLDB,H2,MYSQL})
+    @ExcludeIn({HSQLDB, H2, MYSQL})
     public void offsetOnly(){
         // offset
         query().from(employee)

File: querydsl-core/src/test/java/com/mysema/testutil/FilteringTestRunner.java
Patch:
@@ -28,9 +28,11 @@ public FilteringTestRunner(Class<?> klass) throws InitializationError {
     }
 
     @Override
-    public void run(final RunNotifier notifier) {
+    public void run(RunNotifier notifier) {
         if (run){
             super.run(notifier);
+        }else{
+            System.err.println("skipping");
         }
     }
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/MetaDataSerializer.java
Patch:
@@ -83,7 +83,7 @@ protected void serializePrimaryKeys(EntityType model, CodeWriter writer,
                 if (!first){
                     value.append(", ");
                 }
-                value.append(namingStrategy.getPropertyNameForPrimaryKey(column, model));
+                value.append(namingStrategy.getPropertyName(column, namePrefix, model));
                 first = false;
             }
             value.append(")");

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLSubQuery.java
Patch:
@@ -13,7 +13,7 @@
  * @author tiwe
  *
  */
-public final class HQLSubQuery extends AbstractHQLSubQuery<HQLSubQuery>{
+public final class HQLSubQuery extends AbstractHQLSubQuery<HQLSubQuery> implements HQLCommonQuery<HQLSubQuery>{
 
     public HQLSubQuery() {
         super();

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/sql/HibernateSQLQuery.java
Patch:
@@ -28,6 +28,7 @@
 import com.mysema.query.hql.hibernate.HibernateUtil;
 import com.mysema.query.hql.hibernate.SessionHolder;
 import com.mysema.query.hql.hibernate.StatelessSessionHolder;
+import com.mysema.query.sql.SQLCommonQuery;
 import com.mysema.query.sql.SQLTemplates;
 import com.mysema.query.types.EConstructor;
 import com.mysema.query.types.Expr;
@@ -40,7 +41,7 @@
  * @author tiwe
  *
  */
-public final class HibernateSQLQuery extends AbstractSQLQuery<HibernateSQLQuery>{
+public final class HibernateSQLQuery extends AbstractSQLQuery<HibernateSQLQuery> implements SQLCommonQuery<HibernateSQLQuery>{
 
     private static final Logger logger = LoggerFactory.getLogger(HibernateQuery.class);
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/jpa/sql/JPASQLQuery.java
Patch:
@@ -25,6 +25,7 @@
 import com.mysema.query.hql.jpa.DefaultSessionHolder;
 import com.mysema.query.hql.jpa.JPASessionHolder;
 import com.mysema.query.hql.jpa.JPAUtil;
+import com.mysema.query.sql.SQLCommonQuery;
 import com.mysema.query.sql.SQLTemplates;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Path;
@@ -38,7 +39,7 @@
  *
  */
 // TODO : add support for constructor projections
-public final class JPASQLQuery extends AbstractSQLQuery<JPASQLQuery>{
+public final class JPASQLQuery extends AbstractSQLQuery<JPASQLQuery> implements SQLCommonQuery<JPASQLQuery>{
 
     private static final Logger logger = LoggerFactory.getLogger(JPASQLQuery.class);
 

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/JDOQLSubQuery.java
Patch:
@@ -13,7 +13,7 @@
  * @author tiwe
  *
  */
-public class JDOQLSubQuery extends AbstractJDOQLSubQuery<JDOQLSubQuery>{
+public class JDOQLSubQuery extends AbstractJDOQLSubQuery<JDOQLSubQuery> implements JDOQLCommonQuery<JDOQLSubQuery>{
 
     public JDOQLSubQuery() {
         super();

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLQuery.java
Patch:
@@ -9,7 +9,6 @@
 import java.sql.ResultSet;
 
 import com.mysema.query.Projectable;
-import com.mysema.query.Query;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
@@ -23,7 +22,7 @@
  * @author tiwe
  *
  */
-public interface SQLQuery extends Query<SQLQuery>, Projectable {
+public interface SQLQuery extends SQLCommonQuery<SQLQuery>, Projectable {
 
     /**
      * Defines the sources of the query

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLSubQuery.java
Patch:
@@ -13,7 +13,7 @@
  * @author tiwe
  *
  */
-public class SQLSubQuery extends AbstractSQLSubQuery<SQLSubQuery>{
+public class SQLSubQuery extends AbstractSQLSubQuery<SQLSubQuery> implements SQLCommonQuery<SQLSubQuery>{
 
     public SQLSubQuery() {
         super();

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLMergeClause.java
Patch:
@@ -35,6 +35,7 @@
  * @author tiwe
  *
  */
+@edu.umd.cs.findbugs.annotations.SuppressWarnings("SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING")
 public class SQLMergeClause {
     
     private static final Logger logger = LoggerFactory.getLogger(SQLMergeClause.class);
@@ -101,7 +102,7 @@ public SQLMergeClause select(SubQuery<?> subQuery) {
         return this;
     }
     
-    public <T> SQLMergeClause set(Path<T> path, T value) {
+    public <T> SQLMergeClause set(Path<T> path, @Nullable T value) {
         columns.add(path);
         if (value != null){
             values.add(ExprConst.create(value));    

File: querydsl-sql/src/main/java/com/mysema/util/JDBCUtil.java
Patch:
@@ -44,7 +44,7 @@ public static void setParameters(PreparedStatement stmt, Collection<Object> obje
         }
     }
     
-    // TODO : don't use reflaection here
+    // TODO : don't use reflection here
     private static void setParameter(PreparedStatement stmt, int i, Object o) throws NoSuchMethodException, 
         IllegalAccessException, InvocationTargetException {
         Class<?> type = o.getClass();        

File: querydsl-core/src/main/java/com/mysema/query/BooleanBuilder.java
Patch:
@@ -10,6 +10,8 @@
 
 import javax.annotation.Nullable;
 
+import org.apache.commons.lang.ObjectUtils;
+
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
@@ -84,7 +86,7 @@ public boolean equals(Object o) {
         if (o == this){
             return true;
         }else if (o instanceof BooleanBuilder){
-            return ((BooleanBuilder)o).getValue().equals(expr);    
+            return ObjectUtils.equals(((BooleanBuilder)o).getValue(), expr);
         }else{
             return false;
         }               

File: querydsl-core/src/main/java/com/mysema/query/DefaultQueryMetadata.java
Patch:
@@ -88,7 +88,7 @@ public void addJoin(JoinType joinType, Expr<?> expr) {
     @Override
     public void addJoinCondition(EBoolean o) {
         if (!joins.isEmpty()) {
-            joins.get(joins.size() - 1).setCondition(o);
+            joins.get(joins.size() - 1).addCondition(o);
         }
     }
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/KeyTest.java
Patch:
@@ -92,7 +92,7 @@ public void test(){
         QCompany company = new QCompany("company");
         
         // superiorId -> id
-        query().from(user).innerJoin(user.superiorId(), user.id());
+        query().from(user).innerJoin(user.superiorId(), user2.id());
         
         // superiorId -> superiorId
         query().from(user).innerJoin(user.superiorId(), user2.superiorId());

File: querydsl-core/src/main/java/com/mysema/query/JoinExpression.java
Patch:
@@ -31,8 +31,8 @@ public final class JoinExpression {
     private final JoinType type;
 
     public JoinExpression(JoinType type, Expr<?> target) {
-        this.type = Assert.notNull(type,"type is null");
-        this.target = Assert.notNull(target,"target is null");
+        this.type = Assert.notNull(type,"type");
+        this.target = Assert.notNull(target,"target");
     }
 
     public EBoolean getCondition() {

File: querydsl-core/src/main/java/com/mysema/query/serialization/SerializerBase.java
Patch:
@@ -34,7 +34,7 @@ public abstract class SerializerBase<S extends SerializerBase<S>> implements Vis
     private final Templates templates;
 
     public SerializerBase(Templates patterns) {
-        this.templates = Assert.notNull(patterns,"patterns is null");
+        this.templates = Assert.notNull(patterns,"patterns");
     }    
 
     public S append(String... str) {

File: querydsl-core/src/main/java/com/mysema/query/support/ProjectableAdapter.java
Patch:
@@ -25,7 +25,7 @@ public class ProjectableAdapter<P extends Projectable> implements Projectable {
     private final P projectable;
 
     public ProjectableAdapter(P projectable) {
-        this.projectable = Assert.notNull(projectable,"projectable is null");
+        this.projectable = Assert.notNull(projectable,"projectable");
     }
     
     protected P getProjectable(){

File: querydsl-core/src/main/java/com/mysema/query/types/Expr.java
Patch:
@@ -34,7 +34,7 @@ public abstract class Expr<D> implements Serializable{
     private final Class<? extends D> type;
         
     public Expr(Class<? extends D> type) {
-        this.type = Assert.notNull(type,"type is null");
+        this.type = Assert.notNull(type,"type");
         this.primitive = type.isPrimitive() 
             || Number.class.isAssignableFrom(type) 
             || Boolean.class.equals(type) 

File: querydsl-core/src/main/java/com/mysema/query/types/OrderSpecifier.java
Patch:
@@ -29,8 +29,8 @@ public class OrderSpecifier<A extends Comparable> implements Serializable {
     private final Expr<A> target;
 
     public OrderSpecifier(Order order, Expr<A> target) {
-        this.order = Assert.notNull(order,"order is null");
-        this.target = Assert.notNull(target,"target is null");
+        this.order = Assert.notNull(order,"order");
+        this.target = Assert.notNull(target,"target");
     }
 
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ENumberConst.java
Patch:
@@ -87,7 +87,7 @@ public static ENumber<Short> create(short i){
      */    
     @SuppressWarnings("unchecked")
     public static <T extends Number & Comparable<?>> ENumber<T> create(T val){
-        return new ENumberConst<T>((Class<T>)val.getClass(), Assert.notNull(val,"val is null"));
+        return new ENumberConst<T>((Class<T>)val.getClass(), Assert.notNull(val,"val"));
     }
     
     private final D constant;

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ExprConst.java
Patch:
@@ -34,7 +34,7 @@ public static <T> Expr<T> create(T val){
         if (val instanceof Boolean){
             return (Expr<T>)EBooleanConst.create((Boolean)val);            
         }else{
-            return new ExprConst<T>(Assert.notNull(val,"val is null"));    
+            return new ExprConst<T>(Assert.notNull(val,"val"));    
         }
     }
     

File: querydsl-core/src/main/java/com/mysema/query/types/path/PCollection.java
Patch:
@@ -35,8 +35,8 @@ public class PCollection<E> extends ECollectionBase<Collection<E>,E> implements
     @SuppressWarnings("unchecked")
     public PCollection(Class<? super E> type, String entityName, PathMetadata<?> metadata) {
         super((Class)Collection.class);        
-        this.elementType = (Class<E>) Assert.notNull(type,"type is null");
-        this.entityName = Assert.notNull(entityName,"entityName is null");
+        this.elementType = (Class<E>) Assert.notNull(type,"type");
+        this.entityName = Assert.notNull(entityName,"entityName");
         this.pathMixin = new PathMixin<Collection<E>>(this, metadata);
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PList.java
Patch:
@@ -63,7 +63,7 @@ public class PList<E, Q extends Expr<E>> extends ECollectionBase<List<E>,E> impl
     @SuppressWarnings("unchecked")
     public PList(Class<? super E> elementType, Class<Q> queryType, PathMetadata<?> metadata) {
         super((Class)List.class);
-        this.elementType = (Class<E>) Assert.notNull(elementType,"type is null");
+        this.elementType = (Class<E>) Assert.notNull(elementType,"type");
         this.queryType = queryType;
         this.pathMixin = new PathMixin<List<E>>(this, metadata);
     }

File: querydsl-core/src/main/java/com/mysema/query/types/path/PSet.java
Patch:
@@ -35,8 +35,8 @@ public class PSet<E> extends ECollectionBase<Set<E>,E> implements Path<Set<E>> {
     @SuppressWarnings("unchecked")
     public PSet(Class<? super E> type, String entityName, PathMetadata<?> metadata) {
         super((Class)Set.class);
-        this.elementType = (Class<E>) Assert.notNull(type,"type is null");        
-        this.entityName = Assert.notNull(entityName,"entityName is null");
+        this.elementType = (Class<E>) Assert.notNull(type,"type");        
+        this.entityName = Assert.notNull(entityName,"entityName");
         this.pathMixin = new PathMixin<Set<E>>(this, metadata);
     }
 

File: querydsl-collections/src/test/java/com/mysema/query/ColQueryStandardTest.java
Patch:
@@ -16,9 +16,9 @@
 import org.junit.Test;
 
 import com.mysema.commons.lang.Pair;
-import com.mysema.query.animal.QCat;
 import com.mysema.query.collections.Cat;
 import com.mysema.query.collections.MiniApi;
+import com.mysema.query.collections.QCat;
 import com.mysema.query.types.EConstructor;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.expr.EArrayConstructor;

File: querydsl-collections/src/test/java/com/mysema/query/LoadTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.junit.Test;
 
-import com.mysema.query.animal.QCat;
+import com.mysema.query.collections.QCat;
 import com.mysema.query.collections.Cat;
 import com.mysema.query.collections.ColQueryTemplates;
 import com.mysema.query.collections.DefaultEvaluatorFactory;

File: querydsl-collections/src/test/java/com/mysema/query/collections/AbstractQueryTest.java
Patch:
@@ -12,7 +12,6 @@
 import org.junit.Before;
 
 import com.mysema.query.alias.Alias;
-import com.mysema.query.animal.QCat;
 import com.mysema.query.types.Expr;
 
 /**

File: querydsl-collections/src/test/java/com/mysema/query/collections/AliasTest.java
Patch:
@@ -20,7 +20,6 @@
 import org.junit.Test;
 
 import com.mysema.query.alias.Alias;
-import com.mysema.query.animal.QCat;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
 

File: querydsl-collections/src/test/java/com/mysema/query/collections/AnimalTest.java
Patch:
@@ -10,8 +10,6 @@
 
 import org.junit.Test;
 
-import com.mysema.query.animal.QAnimal;
-import com.mysema.query.animal.QCat;
 import com.mysema.query.types.path.PSimple;
 
 public class AnimalTest {

File: querydsl-collections/src/test/java/com/mysema/query/collections/CatTest.java
Patch:
@@ -9,7 +9,6 @@
 
 import org.junit.Test;
 
-import com.mysema.query.animal.QCat;
 import com.mysema.query.types.path.PSimple;
 
 public class CatTest {

File: querydsl-collections/src/test/java/com/mysema/query/collections/ColDeleteClauseTest.java
Patch:
@@ -13,8 +13,6 @@
 
 import org.junit.Test;
 
-import com.mysema.query.animal.QCat;
-
 public class ColDeleteClauseTest {
 
     @Test

File: querydsl-collections/src/test/java/com/mysema/query/collections/ColQueryTest.java
Patch:
@@ -5,7 +5,6 @@
  */
 package com.mysema.query.collections;
 
-import static com.mysema.query.alias.Alias.$;
 import static com.mysema.query.collections.MiniApi.from;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;

File: querydsl-collections/src/test/java/com/mysema/query/collections/ColUpdateClauseTest.java
Patch:
@@ -12,8 +12,6 @@
 
 import org.junit.Test;
 
-import com.mysema.query.animal.QCat;
-
 public class ColUpdateClauseTest {
 
     @Test

File: querydsl-collections/src/test/java/com/mysema/query/collections/CompilationOverheadTest.java
Patch:
@@ -11,8 +11,6 @@
 
 import org.junit.Test;
 
-import com.mysema.query.animal.QCat;
-import com.mysema.query.collections.MiniApi;
 import com.mysema.query.types.expr.EBoolean;
 
 public class CompilationOverheadTest {

File: querydsl-collections/src/test/java/com/mysema/query/collections/EvaluatorTransformerTest.java
Patch:
@@ -12,7 +12,6 @@
 import org.junit.Test;
 
 import com.mysema.codegen.Evaluator;
-import com.mysema.query.animal.QCat;
 
 public class EvaluatorTransformerTest {
     

File: querydsl-collections/src/test/java/com/mysema/query/collections/InnerJoinTest.java
Patch:
@@ -14,8 +14,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import com.mysema.query.animal.QCat;
-
 public class InnerJoinTest extends AbstractQueryTest{
 
     private QCat cat, kitten;

File: querydsl-collections/src/test/java/com/mysema/query/collections/QueryMutabilityTest.java
Patch:
@@ -12,8 +12,6 @@
 import org.junit.Test;
 
 import com.mysema.query.QueryMutability;
-import com.mysema.query.animal.QCat;
-import com.mysema.query.collections.ColQueryImpl;
 
 public class QueryMutabilityTest {
 

File: querydsl-collections/src/main/java/com/mysema/query/collections/QueryEngine.java
Patch:
@@ -29,6 +29,6 @@ public interface QueryEngine {
      * @param iterables
      * @return
      */
-    List<?> list(QueryMetadata metadata, Map<Expr<?>, Iterable<?>> iterables);        
+    <T> List<T> list(QueryMetadata metadata, Map<Expr<?>, Iterable<?>> iterables, Expr<T> projection);        
 
 }
\ No newline at end of file

File: querydsl-apt/src/main/java/com/mysema/query/apt/jdo/JDOConfiguration.java
Patch:
@@ -6,6 +6,7 @@
 import java.util.List;
 import java.util.Map;
 
+import javax.annotation.Nullable;
 import javax.annotation.processing.RoundEnvironment;
 
 import com.mysema.query.apt.DefaultConfiguration;
@@ -29,7 +30,7 @@ public class JDOConfiguration extends DefaultConfiguration{
 
     public JDOConfiguration(RoundEnvironment roundEnv,Map<String,String> options,
             Class<? extends Annotation> entityAnn,
-            Class<? extends Annotation> superTypeAnn,
+            @Nullable Class<? extends Annotation> superTypeAnn,
             Class<? extends Annotation> embeddableAnn,
             Class<? extends Annotation> skipAnn) throws ClassNotFoundException {
         super(roundEnv, options, entityAnn, superTypeAnn, embeddableAnn, skipAnn);

File: querydsl-core/src/main/java/com/mysema/query/codegen/EmbeddableSerializer.java
Patch:
@@ -6,6 +6,7 @@
 package com.mysema.query.codegen;
 
 import java.io.IOException;
+import java.util.Collection;
 
 import com.mysema.codegen.CodeWriter;
 import com.mysema.query.types.PathMetadata;
@@ -22,8 +23,8 @@
  */
 public final class EmbeddableSerializer extends EntitySerializer{
 
-    public EmbeddableSerializer(TypeMappings typeMappings) {
-        super(typeMappings);
+    public EmbeddableSerializer(TypeMappings typeMappings, Collection<String> keywords) {
+        super(typeMappings, keywords);
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/codegen/EntityType.java
Patch:
@@ -176,7 +176,7 @@ public void include(Supertype supertype) {
     }
 
     private Property validateField(Property field) {
-        if (field.getName().equals(this.uncapSimpleName)) {
+        if (field.getName().equals(uncapSimpleName)) {
             uncapSimpleName = StringUtils.uncapitalize(getType().getSimpleName())+ (escapeSuffix++);
         }
         return field;

File: querydsl-core/src/main/java/com/mysema/query/codegen/SupertypeSerializer.java
Patch:
@@ -6,6 +6,7 @@
 package com.mysema.query.codegen;
 
 import java.io.IOException;
+import java.util.Collection;
 
 import net.jcip.annotations.Immutable;
 
@@ -24,8 +25,8 @@
 @Immutable
 public final class SupertypeSerializer extends EntitySerializer{
 
-    public SupertypeSerializer(TypeMappings typeMappings) {
-        super(typeMappings);
+    public SupertypeSerializer(TypeMappings typeMappings, Collection<String> keywords) {
+        super(typeMappings, keywords);
     }
 
     @Override

File: querydsl-core/src/test/java/com/mysema/query/codegen/EntityTypeTest.java
Patch:
@@ -8,6 +8,7 @@
 import java.io.IOException;
 import java.io.StringWriter;
 import java.lang.annotation.Annotation;
+import java.util.Collections;
 
 import org.junit.Test;
 
@@ -42,7 +43,7 @@ public void annotation() throws IOException{
         entityModel.addAnnotation(annotation);
         
         TypeMappings typeMappings = new TypeMappings();
-        EntitySerializer serializer = new EntitySerializer(typeMappings);
+        EntitySerializer serializer = new EntitySerializer(typeMappings,Collections.<String>emptyList());
         StringWriter writer = new StringWriter();
         serializer.serialize(entityModel, SimpleSerializerConfig.DEFAULT, new JavaWriter(writer));
         System.out.println(writer);

File: querydsl-sql/src/main/java/com/mysema/query/sql/DefaultNamingStrategy.java
Patch:
@@ -62,8 +62,7 @@ protected String toCamelCase(String str) {
     }
 
     @Override
-    public String getDefaultVariableName(String namePrefix,
-            EntityType entityType) {
+    public String getDefaultVariableName(String namePrefix, EntityType entityType) {
         String simpleName = entityType.getUncapSimpleName();
         if (namePrefix.length() > 0) {
             simpleName = StringUtils.uncapitalize(simpleName.substring(namePrefix.length()));

File: querydsl-sql/src/main/java/com/mysema/query/sql/MetaDataSerializer.java
Patch:
@@ -6,6 +6,7 @@
 import static com.mysema.codegen.Symbols.NEW;
 
 import java.io.IOException;
+import java.util.Collections;
 
 import com.mysema.codegen.CodeWriter;
 import com.mysema.query.codegen.EntitySerializer;
@@ -26,7 +27,8 @@ public class MetaDataSerializer extends EntitySerializer {
     private final NamingStrategy namingStrategy;
 
     public MetaDataSerializer(String namePrefix, NamingStrategy namingStrategy) {
-        super(new TypeMappings());
+	// TODO : supply reserved SQL keywords
+        super(new TypeMappings(),Collections.<String>emptyList());
         this.namePrefix = namePrefix;
         this.namingStrategy = namingStrategy;
     }

File: querydsl-sql/src/main/java/com/mysema/query/sql/MySQLTemplates.java
Patch:
@@ -38,7 +38,7 @@ public MySQLTemplates(boolean quote){
                 BigDecimal.class);
         addClass2TypeMappings("char(256)", String.class);
         
-        add(Ops.CONCAT, "concat({0}, {1})");
+        add(Ops.CONCAT, "concat({0}, {1})",0);
         add(Ops.MATCHES, "{0} regexp {1}");
         add(Ops.DateTimeOps.YEAR_MONTH, "extract(year_month from {0})");
         

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLTemplates.java
Patch:
@@ -55,6 +55,9 @@ protected HQLTemplates() {
         add(Ops.IS_NULL, "{0} is null", 26);
         add(Ops.IS_NOT_NULL, "{0} is not null", 26);
         
+        // NOTE : the following is the JPQL standard way
+//        add(Ops.INSTANCE_OF, "type({0}) = {1}");
+        
         // collection
         add(Ops.IN, "{0} in {1}");
         add(Ops.COL_IS_EMPTY, "{0} is empty");

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/Cat.java
Patch:
@@ -9,6 +9,7 @@
 import java.util.List;
 import java.util.Set;
 
+import javax.persistence.DiscriminatorValue;
 import javax.persistence.Entity;
 import javax.persistence.JoinTable;
 import javax.persistence.ManyToOne;
@@ -20,6 +21,7 @@
  * The Class Cat.
  */
 @Entity
+@DiscriminatorValue("C")
 public class Cat extends Animal {
     
     private int breed;

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/DomesticCat.java
Patch:
@@ -5,12 +5,14 @@
  */
 package com.mysema.query.hql.domain;
 
+import javax.persistence.DiscriminatorValue;
 import javax.persistence.Entity;
 
 /**
  * The Class DomesticCat.
  */
 @Entity
+@DiscriminatorValue("DC")
 public class DomesticCat extends Cat {
 
 }
\ No newline at end of file

File: querydsl-core/src/main/java/com/mysema/util/JavaSyntaxUtils.java
Patch:
@@ -23,7 +23,7 @@ private JavaSyntaxUtils(){}
     "catch",   
     "char",    
     "class",   
-    "const*",  
+    "const",  
     "continue",        
     "default",
     "double",  
@@ -36,7 +36,7 @@ private JavaSyntaxUtils(){}
     "finally",         
     "float",   
     "for",     
-    "goto*",   
+    "goto",   
     "if",
     "implements",      
     "import",  

File: querydsl-sql/src/main/java/com/mysema/query/sql/MetaDataExporter.java
Patch:
@@ -132,7 +132,7 @@ public Set<String> getClasses() {
     private void handleColumn(EntityType classModel, ResultSet columns)
             throws SQLException {
         String columnName = columns.getString(COLUMN_NAME);
-        String propertyName = namingStrategy.getPropertyName(columnName, namePrefix, classModel);
+        String propertyName = namingStrategy.getPropertyName(columnName, classModel);
         Class<?> clazz = sqlTypeMapping.get(columns.getInt(COLUMN_TYPE));
         if (clazz == null){
             throw new RuntimeException("No java type for " + columns.getString(6));

File: querydsl-sql/src/main/java/com/mysema/query/sql/NamingStrategy.java
Patch:
@@ -48,7 +48,7 @@ public interface NamingStrategy {
      * @param entityType 
      * @return
      */
-    String getPropertyName(String columnName, String namePrefix, EntityType entityType);
+    String getPropertyName(String columnName, EntityType entityType);
     
     /**
      * Convert the given table name and provide the opportunity to add quoted identifiers

File: querydsl-hibernate-search/src/test/java/com/mysema/query/search/SearchSerializerTest.java
Patch:
@@ -13,7 +13,7 @@ public class SearchSerializerTest {
 
     @Test
     public void testToField() {
-        SearchSerializer serializer = new SearchSerializer(true);
+        SearchSerializer serializer = new SearchSerializer();
         QUser user = new QUser("user");
         assertEquals("email", serializer.toField(user.emailAddress));
         assertEquals("firstName", serializer.toField(user.firstName));

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLTypeMapping.java
Patch:
@@ -44,8 +44,8 @@ public final class SQLTypeMapping {
         sqlToJavaType.put(Types.TIMESTAMP, java.util.Date.class);
 
         // TEXT
-        sqlToJavaType.put(Types.CHAR, Character.class);
-        sqlToJavaType.put(Types.NCHAR, Character.class);
+        sqlToJavaType.put(Types.CHAR, String.class);
+        sqlToJavaType.put(Types.NCHAR, String.class);
         sqlToJavaType.put(Types.CLOB, String.class);
         sqlToJavaType.put(Types.NCLOB, String.class);        
         sqlToJavaType.put(Types.LONGVARCHAR, String.class);

File: querydsl-sql/src/main/java/com/mysema/query/sql/OracleTemplates.java
Patch:
@@ -48,6 +48,8 @@ public OracleTemplates(boolean quote){
         addClass2TypeMappings("double precision", Double.class);
         addClass2TypeMappings("varchar(4000 char)", String.class);
 
+        add(Ops.ALIAS, "{0} {1}");
+        
         // String
         add(Ops.CONCAT, "{0} || {1}");
         add(Ops.INDEX_OF, "instrb({0},{1})-1");

File: querydsl-sql/src/test/java/com/mysema/query/AbstractBaseTest.java
Patch:
@@ -46,7 +46,7 @@ protected String buildQueryString(boolean countRow) {
     }
     
 
-    protected SQLSubQuery s(){
+    protected SQLSubQuery sq(){
         return new SQLSubQuery();
     }
 

File: querydsl-sql/src/test/java/com/mysema/query/InsertBaseTest.java
Patch:
@@ -60,12 +60,12 @@ public void insert(){
         // with subquery
         insert(survey)
             .columns(survey.id, survey.name)
-            .select(s().from(survey2).list(survey2.id.add(1), survey2.name))
+            .select(sq().from(survey2).list(survey2.id.add(1), survey2.name))
             .execute();
         
         // with subquery, without columns
         insert(survey)
-            .select(s().from(survey2).list(survey2.id.add(10), survey2.name))
+            .select(sq().from(survey2).list(survey2.id.add(10), survey2.name))
             .execute();
     }
     

File: querydsl-sql/src/test/java/com/mysema/query/_mssql/SelectMSSQLTest.java
Patch:
@@ -61,7 +61,7 @@ public void manualPaging(){
         
         // with subquery, generic alias
         System.out.println("#2");
-        ListSubQuery<Object[]> sub = s().from(employee).list(employee.firstname, employee.lastname, rowNumber);
+        ListSubQuery<Object[]> sub = sq().from(employee).list(employee.firstname, employee.lastname, rowNumber);
         PSimple<Object[]> subAlias = new PSimple<Object[]>(Object[].class, "s");
         for (Object[] row : query().from(sub.as(subAlias)).list(all)){
             System.out.println(Arrays.asList(row));
@@ -70,7 +70,7 @@ public void manualPaging(){
                 
         // with subquery, only row number
         System.out.println("#3");
-        ObjectSubQuery<Long> sub2 = s().from(employee).unique(rowNumber);
+        ObjectSubQuery<Long> sub2 = sq().from(employee).unique(rowNumber);
         PSimple<Long> subAlias2 = new PSimple<Long>(Long.class, "s");
         for (Object[] row : query().from(sub2.as(subAlias2)).list(all)){
             System.out.println(Arrays.asList(row));
@@ -79,7 +79,7 @@ public void manualPaging(){
         
         // with subquery, specific alias
         System.out.println("#4");
-        ListSubQuery<Object[]> sub3 = s().from(employee).list(employee.firstname, employee.lastname, rowNumber);
+        ListSubQuery<Object[]> sub3 = sq().from(employee).list(employee.firstname, employee.lastname, rowNumber);
         for (Object[] row : query().from(sub3.as(employee2)).list(employee2.firstname, employee2.lastname)){
             System.out.println(Arrays.asList(row));
         }

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLTypeMapping.java
Patch:
@@ -6,7 +6,6 @@
 package com.mysema.query.sql;
 
 import java.math.BigDecimal;
-import java.sql.Time;
 import java.sql.Types;
 import java.util.HashMap;
 import java.util.Map;
@@ -40,8 +39,8 @@ public final class SQLTypeMapping {
         sqlToJavaType.put(Types.TINYINT, Byte.class);
         
         // DATE and TIME
-        sqlToJavaType.put(Types.DATE, java.util.Date.class);
-        sqlToJavaType.put(Types.TIME, Time.class);
+        sqlToJavaType.put(Types.DATE, java.sql.Date.class);
+        sqlToJavaType.put(Types.TIME, java.sql.Time.class);
         sqlToJavaType.put(Types.TIMESTAMP, java.util.Date.class);
 
         // TEXT

File: querydsl-apt/src/main/java/com/mysema/query/apt/Processor.java
Patch:
@@ -299,7 +299,7 @@ private void serialize(Serializer serializer, Map<String, EntityType> models) {
             try {
                 String packageName = model.getPackageName();         
                 String localName = configuration.getTypeMappings().getPathType(model, model, true);
-                String className = packageName + "." + localName;
+                String className = packageName.length() > 0 ? (packageName + "." + localName) : localName;
                 
                 if (env.getElementUtils().getTypeElement(className) == null){
                     JavaFileObject fileObject = env.getFiler().createSourceFile(className);

File: querydsl-core/src/main/java/com/mysema/query/codegen/ClassType.java
Patch:
@@ -105,7 +105,7 @@ public void appendLocalRawName(Type context, Appendable builder) throws IOExcept
             packageName = clazz.getPackage().getName();
             name = clazz.getName();
         }
-        if (visible || context.getPackageName().equals(packageName)){
+        if ((visible || context.getPackageName().equals(packageName)) && !packageName.isEmpty()){
             builder.append(name.substring(packageName.length()+1));    
         }else{
             builder.append(name);

File: src/main/java/com/mysema/codegen/EvaluatorFactory.java
Patch:
@@ -46,7 +46,7 @@ public EvaluatorFactory(URLClassLoader parent){
     }
     
     public EvaluatorFactory(URLClassLoader parent, JavaCompiler compiler) {
-        this.fileManager = new MemFileManager(compiler.getStandardFileManager(null, null, null));
+        this.fileManager = new MemFileManager(parent, compiler.getStandardFileManager(null, null, null));
         this.compiler = compiler;                        
         this.classpath = SimpleCompiler.getClassPath(parent);
         this.loader = fileManager.getClassLoader(StandardLocation.CLASS_OUTPUT);

File: src/main/java/com/mysema/codegen/MemClassLoader.java
Patch:
@@ -36,7 +36,8 @@ public final class MemClassLoader extends ClassLoader {
     
     private final Map<LocationAndKind, Map<String, JavaFileObject>> memFileSystem;
     
-    public MemClassLoader(Map<LocationAndKind, Map<String, JavaFileObject>> ramFileSystem) {
+    public MemClassLoader(ClassLoader parent, Map<LocationAndKind, Map<String, JavaFileObject>> ramFileSystem) {
+        super(parent);
         this.memFileSystem = ramFileSystem;
     }
     

File: src/main/java/com/mysema/codegen/MemFileManager.java
Patch:
@@ -36,12 +36,12 @@ public class MemFileManager extends ForwardingJavaFileManager<JavaFileManager> {
     
     private final String urlPrefix;
     
-    public MemFileManager(StandardJavaFileManager sjfm) {
+    public MemFileManager(ClassLoader parent, StandardJavaFileManager sjfm) {
         super(sjfm);
         ramFileSystem = new HashMap<LocationAndKind,Map<String,JavaFileObject>>();
         Map<String,JavaFileObject> classLoaderContent = new HashMap<String,JavaFileObject>();
         ramFileSystem.put(new LocationAndKind(StandardLocation.CLASS_OUTPUT, Kind.CLASS),classLoaderContent);
-        classLoader = new MemClassLoader(ramFileSystem);
+        classLoader = new MemClassLoader(parent, ramFileSystem);
         urlPrefix = MemFileSystemRegistry.DEFAULT.getUrlPrefix(this);
     }
     

File: src/main/java/com/mysema/codegen/JavaWriter.java
Patch:
@@ -90,11 +90,11 @@ public JavaWriter annotation(Annotation annotation) throws IOException {
                 Object value = method.invoke(annotation);
                 annotationConstant(value);
             } catch (IllegalArgumentException e) {
-                throw new RuntimeException(e);
+                throw new CodegenException(e);
             } catch (IllegalAccessException e) {
-                throw new RuntimeException(e);
+                throw new CodegenException(e);
             } catch (InvocationTargetException e) {
-                throw new RuntimeException(e);
+                throw new CodegenException(e);
             }
             first = false;
         }        

File: src/main/java/com/mysema/codegen/SimpleCompiler.java
Patch:
@@ -45,7 +45,7 @@ public static String getClassPath(URLClassLoader classLoader) {
             }
             return  path.toString();    
         }catch(UnsupportedEncodingException e){
-            throw new RuntimeException(e);
+            throw new CodegenException(e);
         }        
     }
     

File: src/main/java/com/mysema/codegen/EvaluatorFactory.java
Patch:
@@ -54,8 +54,7 @@ public EvaluatorFactory(URLClassLoader parent, JavaCompiler compiler) {
     }
 
     private void compile(String source, Class<?> projectionType,
-            String[] names, Class<?>[] types, String id) throws IOException,
-            UnsupportedEncodingException {
+            String[] names, Class<?>[] types, String id) throws IOException {
         // create source
         StringWriter writer = new StringWriter();
         JavaWriter javaw = new JavaWriter(writer);

File: src/main/java/com/mysema/codegen/MemFileSystemRegistry.java
Patch:
@@ -17,7 +17,7 @@
  * @author tiwe
  *
  */
-public class MemFileSystemRegistry {
+public final class MemFileSystemRegistry {
     
     public static final MemFileSystemRegistry DEFAULT = new MemFileSystemRegistry();
     
@@ -31,9 +31,9 @@ public class MemFileSystemRegistry {
     
     private MemFileSystemRegistry() {
         String pkgName = MemFileSystemRegistry.class.getPackage().getName();
-        protocolName = pkgName.substring(pkgName.lastIndexOf(".") + 1);
+        protocolName = pkgName.substring(pkgName.lastIndexOf('.') + 1);
         String pkgs = System.getProperty("java.protocol.handler.pkgs");
-        String parentPackage = pkgName.substring(0,pkgName.lastIndexOf("."));
+        String parentPackage = pkgName.substring(0,pkgName.lastIndexOf('.'));
         pkgs = pkgs == null ? parentPackage : pkgs + "|" + parentPackage;
         System.setProperty("java.protocol.handler.pkgs",pkgs);
     }

File: src/main/java/com/mysema/codegen/MemJavaFileObject.java
Patch:
@@ -34,7 +34,7 @@ public MemJavaFileObject(String urlPrefix, String name, Kind kind) {
     
     @Override
     public CharSequence getCharContent(boolean ignoreEncodingErrors)
-        throws IOException, IllegalStateException, UnsupportedOperationException {
+        throws IOException, UnsupportedOperationException {
         if(baos == null){
             throw new FileNotFoundException(name);
         }
@@ -51,15 +51,15 @@ public byte[] getByteArray(){
     }
 
     @Override
-    public InputStream openInputStream() throws IOException, IllegalStateException, UnsupportedOperationException {
+    public InputStream openInputStream() throws IOException, UnsupportedOperationException {
         if(baos == null){
             throw new FileNotFoundException(name);
         }
         return new ByteArrayInputStream(baos.toByteArray());
     }
     
     @Override
-    public OutputStream openOutputStream() throws IOException, IllegalStateException, UnsupportedOperationException {
+    public OutputStream openOutputStream() throws IOException, UnsupportedOperationException {
         if (baos == null){
             baos = new ByteArrayOutputStream();
         }

File: src/main/java/com/mysema/codegen/MemFileManager.java
Patch:
@@ -134,13 +134,14 @@ public Iterable<JavaFileObject> list(Location location, String pkg,
             LocationAndKind key = new LocationAndKind(location,kind);
             if(ramFileSystem.containsKey(key)) {
                 Map<String, JavaFileObject> locatedFiles = ramFileSystem.get(key);
-                for(String name : locatedFiles.keySet()) {
+                for (Map.Entry<String,JavaFileObject> entry : locatedFiles.entrySet()){                    
+                    String name = entry.getKey();
                     String packageName = "";
                     if (name.indexOf('.') > -1){
                         packageName = name.substring(0,name.lastIndexOf('.'));
                     }
                     if(recurse ? packageName.startsWith(pkg) : packageName.equals(pkg)) {
-                        JavaFileObject candidate = locatedFiles.get(name);
+                        JavaFileObject candidate = entry.getValue();
                         if(kinds.contains(candidate.getKind())) {
                             result.add(candidate);
                         }

File: src/main/java/com/mysema/codegen/MemJavaFileObject.java
Patch:
@@ -52,7 +52,7 @@ public byte[] getByteArray(){
 
     @Override
     public InputStream openInputStream() throws IOException, IllegalStateException, UnsupportedOperationException {
-        if(baos != null){
+        if(baos == null){
             throw new FileNotFoundException(name);
         }
         return new ByteArrayInputStream(baos.toByteArray());

File: querydsl-core/src/main/java/com/mysema/query/types/Expr.java
Patch:
@@ -159,7 +159,7 @@ public final EBoolean notIn(Collection<? extends D> right) {
      * @param right rhs of the comparison
      * @return
      */
-    public final EBoolean notIn(D... right) {
+    public EBoolean notIn(D... right) {
         if (right.length == 1){
             return ne(right[0]);
         }else{

File: querydsl-core/src/test/java/com/mysema/query/Filters.java
Patch:
@@ -175,6 +175,9 @@ public <A extends Number & Comparable<A>> Collection<EBoolean> numeric(ENumber<A
         rv.add(expr.loe(knownValue));
         rv.add(expr.lt(other));
         rv.add(expr.lt(knownValue));
+        
+        rv.add(expr.in(1,2,3));
+        rv.add(expr.in(1l,2l,3l));
 
         if (expr.getType().equals(Integer.class)){
             ENumber<Integer> eint = (ENumber)expr;

File: querydsl-core/src/main/java/com/mysema/query/types/Converter.java
Patch:
@@ -14,7 +14,7 @@
  *
  * @param <D>
  */
-interface Converter<Source extends Expr<?>, Target extends Expr<?>>{
+interface Converter<S extends Expr<?>, T extends Expr<?>>{
     
     Converter<EString,EString> toLowerCase = new Converter<EString,EString>(){
         @Override
@@ -55,5 +55,5 @@ public EString convert(EString arg) {
      * @param arg
      * @return
      */
-    Target convert(Source arg); 
+    T convert(S arg); 
 }

File: querydsl-lucene/src/test/java/com/mysema/query/search/LuceneQueryTest.java
Patch:
@@ -267,7 +267,7 @@ public void listResults() {
         assertEquals("1990", results.getResults().get(1).get("year"));
         assertEquals(2, results.getLimit());
         assertEquals(1, results.getOffset());
-        assertEquals(2, results.getTotal());
+        assertEquals(4, results.getTotal());
     }
 
     @Test
@@ -280,7 +280,7 @@ public void listDistinctResults() {
         assertEquals("1954", results.getResults().get(0).get("year"));
         assertEquals(1, results.getLimit());
         assertEquals(1, results.getOffset());
-        assertEquals(1, results.getTotal());
+        assertEquals(4, results.getTotal());
     }
 
     @Test(expected = IllegalArgumentException.class)

File: querydsl-core/src/main/java/com/mysema/query/types/EArrayConstructor.java
Patch:
@@ -14,6 +14,7 @@
  * 
  * @param <D> component type
  */
+// TODO : split into interface and implementation
 public class EArrayConstructor<D> extends EConstructor<D[]> {
     
     private static final long serialVersionUID = 8667880104290226505L;

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CSimple.java
Patch:
@@ -13,6 +13,7 @@
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.ESimple;
 
 /**
  * CSimple defines custom simple expressions
@@ -21,7 +22,7 @@
  *
  * @param <T>
  */
-public class CSimple<T> extends Expr<T> implements Custom<T> {
+public class CSimple<T> extends ESimple<T> implements Custom<T> {
     
     private static final long serialVersionUID = -4697578522909045745L;
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ECollectionBase.java
Patch:
@@ -20,7 +20,7 @@
  *
  * @param <D>
  */
-public abstract class ECollectionBase<C extends Collection<E>, E> extends Expr<C> implements ECollection<C,E> {
+public abstract class ECollectionBase<C extends Collection<E>, E> extends ESimple<C> implements ECollection<C,E> {
 
     private static final long serialVersionUID = 691230660037162054L;
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EComparableBase.java
Patch:
@@ -7,7 +7,6 @@
 
 import javax.annotation.Nullable;
 
-import com.mysema.query.types.Expr;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Order;
 import com.mysema.query.types.OrderSpecifier;
@@ -22,7 +21,7 @@
  * @see java.lang.Comparable
  */
 @SuppressWarnings({"unchecked"})
-public abstract class EComparableBase<D extends Comparable> extends Expr<D> {
+public abstract class EComparableBase<D extends Comparable> extends ESimple<D> {
 
     private static final long serialVersionUID = 1460921109546656911L;
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EMapBase.java
Patch:
@@ -20,7 +20,7 @@
  * @param <K>
  * @param <V>
  */
-public abstract class EMapBase<K,V> extends Expr<Map<K,V>> implements EMap<K,V> {
+public abstract class EMapBase<K,V> extends ESimple<Map<K,V>> implements EMap<K,V> {
 
     private static final long serialVersionUID = 2856001983312366841L;
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ExprConst.java
Patch:
@@ -18,7 +18,7 @@
  * 
  * @param <D> Java type of constant
  */
-public class ExprConst<D> extends Expr<D> implements Constant<D> {
+public class ExprConst<D> extends ESimple<D> implements Constant<D> {
 
     private static final long serialVersionUID = -3211963259241932307L;
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/OSimple.java
Patch:
@@ -21,7 +21,7 @@
  * @param <OpType>
  * @param <D>
  */
-public class OSimple<OpType, D> extends Expr<D> implements Operation<OpType, D> {
+public class OSimple<OpType, D> extends ESimple<D> implements Operation<OpType, D> {
     
     private static final long serialVersionUID = -285668548371034230L;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PArray.java
Patch:
@@ -19,6 +19,7 @@
 import com.mysema.query.types.expr.EArray;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.ENumber;
+import com.mysema.query.types.expr.ESimple;
 import com.mysema.query.types.expr.ONumber;
 
 /**
@@ -28,7 +29,7 @@
  * 
  * @param <E> component type
  */
-public class PArray<E> extends Expr<E[]> implements Path<E[]>, EArray<E>{
+public class PArray<E> extends ESimple<E[]> implements Path<E[]>, EArray<E>{
     
     private static final long serialVersionUID = 7795049264874048226L;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PEntity.java
Patch:
@@ -19,6 +19,7 @@
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.ESimple;
 import com.mysema.query.types.expr.ExprConst;
 import com.mysema.query.types.expr.OBoolean;
 
@@ -30,7 +31,7 @@
  * @param <D>
  *            Java type
  */
-public class PEntity<D> extends Expr<D> implements Path<D> {
+public class PEntity<D> extends ESimple<D> implements Path<D> {
 
     private static final long serialVersionUID = -1845524024957822731L;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PSimple.java
Patch:
@@ -7,11 +7,11 @@
 
 import java.lang.reflect.AnnotatedElement;
 
-import com.mysema.query.types.Expr;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.ESimple;
 
 /**
  * PSimple represents simple paths
@@ -20,7 +20,7 @@
  * 
  * @param <D> Java type
  */
-public class PSimple<D> extends Expr<D> implements Path<D> {
+public class PSimple<D> extends ESimple<D> implements Path<D> {
     
     private static final long serialVersionUID = 3088836955328191852L;
     

File: querydsl-core/src/main/java/com/mysema/query/types/query/ObjectSubQuery.java
Patch:
@@ -13,6 +13,7 @@
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.ESimple;
 import com.mysema.query.types.expr.OSimple;
 
 /**
@@ -22,7 +23,7 @@
  *
  * @param <A>
  */
-public final class ObjectSubQuery<A> extends Expr<A> implements SubQuery<A>{
+public final class ObjectSubQuery<A> extends ESimple<A> implements SubQuery<A>{
 
     private static final long serialVersionUID = -64156984110154969L;
 

File: querydsl-core/src/test/java/com/mysema/query/Projections.java
Patch:
@@ -9,10 +9,10 @@
 import java.util.Collections;
 import java.util.HashSet;
 
-import com.mysema.query.types.CaseBuilder;
 import com.mysema.query.types.Constant;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Ops;
+import com.mysema.query.types.expr.CaseBuilder;
 import com.mysema.query.types.expr.EArray;
 import com.mysema.query.types.expr.ECollection;
 import com.mysema.query.types.expr.EDate;

File: querydsl-core/src/test/java/com/mysema/query/types/CaseBuilderTest.java
Patch:
@@ -11,6 +11,7 @@
 
 import org.junit.Test;
 
+import com.mysema.query.types.expr.CaseBuilder;
 import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.expr.EString;
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/mssql/RowNumber.java
Patch:
@@ -16,6 +16,7 @@
 import com.mysema.query.types.custom.CNumber;
 import com.mysema.query.types.expr.EComparable;
 import com.mysema.query.types.expr.ENumber;
+import com.mysema.query.types.expr.ESimple;
 import com.mysema.query.types.path.PNumber;
 
 /**
@@ -24,7 +25,7 @@
  * @author tiwe
  *
  */
-public class RowNumber extends Expr<Long>{
+public class RowNumber extends ESimple<Long>{
 
     private static final long serialVersionUID = 3499501725767772281L;
 

File: querydsl-apt/src/test/java/com/mysema/query/domain/QueryProjectionTest.java
Patch:
@@ -16,9 +16,9 @@
 import com.mysema.query.annotations.QueryEntity;
 import com.mysema.query.annotations.QueryProjection;
 import com.mysema.query.annotations.QueryType;
-import com.mysema.query.types.ExprConst;
 import com.mysema.query.types.expr.ENumberConst;
 import com.mysema.query.types.expr.EStringConst;
+import com.mysema.query.types.expr.ExprConst;
 
 public class QueryProjectionTest {
 

File: querydsl-collections/src/main/java/com/mysema/query/collections/AbstractColQuery.java
Patch:
@@ -29,11 +29,11 @@
 import com.mysema.query.SearchResults;
 import com.mysema.query.support.ProjectableQuery;
 import com.mysema.query.support.QueryMixin;
+import com.mysema.query.types.EArrayConstructor;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Order;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.expr.EArrayConstructor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.util.MultiIterator;
 

File: querydsl-core/src/main/java/com/mysema/query/alias/PropertyAccessInvocationHandler.java
Patch:
@@ -26,11 +26,11 @@
 
 import org.apache.commons.lang.StringUtils;
 
-import com.mysema.query.types.ECollection;
-import com.mysema.query.types.EMap;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
+import com.mysema.query.types.expr.ECollection;
+import com.mysema.query.types.expr.EMap;
 import com.mysema.query.types.path.PBoolean;
 import com.mysema.query.types.path.PCollection;
 import com.mysema.query.types.path.PComparable;

File: querydsl-core/src/main/java/com/mysema/query/codegen/DTOSerializer.java
Patch:
@@ -13,7 +13,7 @@
 
 import com.mysema.commons.lang.Assert;
 import com.mysema.query.types.Expr;
-import com.mysema.query.types.expr.EConstructor;
+import com.mysema.query.types.expr.ENumber;
 import com.mysema.util.CodeWriter;
 
 /**
@@ -41,7 +41,7 @@ protected void intro(EntityType model, CodeWriter writer) throws IOException {
         
         // imports
         writer.imports(Expr.class.getPackage());
-        writer.imports(EConstructor.class.getPackage());
+        writer.imports(ENumber.class.getPackage());
         writer.nl();
         
         // javadoc

File: querydsl-core/src/main/java/com/mysema/query/serialization/SerializerBase.java
Patch:
@@ -14,6 +14,8 @@
 import com.mysema.query.BooleanBuilder;
 import com.mysema.query.types.Constant;
 import com.mysema.query.types.Custom;
+import com.mysema.query.types.EArrayConstructor;
+import com.mysema.query.types.EConstructor;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
@@ -22,8 +24,6 @@
 import com.mysema.query.types.Template;
 import com.mysema.query.types.Templates;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EArrayConstructor;
-import com.mysema.query.types.expr.EConstructor;
 
 /**
  * SerializerBase is a stub for Serializer implementations

File: querydsl-core/src/main/java/com/mysema/query/types/CaseBuilder.java
Patch:
@@ -15,6 +15,7 @@
 import com.mysema.query.types.expr.ENumberConst;
 import com.mysema.query.types.expr.EString;
 import com.mysema.query.types.expr.EStringConst;
+import com.mysema.query.types.expr.ExprConst;
 import com.mysema.query.types.expr.ONumber;
 import com.mysema.query.types.expr.OSimple;
 import com.mysema.query.types.expr.OString;

File: querydsl-core/src/main/java/com/mysema/query/types/CaseForEqBuilder.java
Patch:
@@ -14,6 +14,7 @@
 import com.mysema.query.types.expr.ENumberConst;
 import com.mysema.query.types.expr.EString;
 import com.mysema.query.types.expr.EStringConst;
+import com.mysema.query.types.expr.ExprConst;
 import com.mysema.query.types.expr.ONumber;
 import com.mysema.query.types.expr.OSimple;
 import com.mysema.query.types.expr.OString;

File: querydsl-core/src/main/java/com/mysema/query/types/EArrayConstructor.java
Patch:
@@ -3,11 +3,9 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.expr;
+package com.mysema.query.types;
 
 import com.mysema.commons.lang.Assert;
-import com.mysema.query.types.Expr;
-import com.mysema.query.types.Visitor;
 
 /**
  * EArrayConstructor extends EConstructor to represent array initializers

File: querydsl-core/src/main/java/com/mysema/query/types/Expr.java
Patch:
@@ -13,7 +13,9 @@
 
 import com.mysema.commons.lang.Assert;
 import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.ECollection;
 import com.mysema.query.types.expr.ENumber;
+import com.mysema.query.types.expr.ExprConst;
 import com.mysema.query.types.expr.OBoolean;
 import com.mysema.query.types.expr.ONumber;
 

File: querydsl-core/src/main/java/com/mysema/query/types/Ops.java
Patch:
@@ -11,8 +11,6 @@
 import java.util.Collection;
 import java.util.List;
 
-import com.mysema.query.types.expr.ENumber;
-import com.mysema.query.types.expr.ONumber;
 
 /**
  * Ops provides the operators for the fluent query grammar.
@@ -139,7 +137,7 @@ interface AggOps{
         Operator<Number> COUNT_AGG = new OperatorImpl<Number>(Object.class);
         Operator<Number> COUNT_DISTINCT_AGG = new OperatorImpl<Number>(Object.class);
         Operator<Number> COUNT_ALL_AGG = new OperatorImpl<Number>();
-        ENumber<Long> COUNT_ALL_AGG_EXPR = ONumber.create(Long.class, COUNT_ALL_AGG);
+//        ENumber<Long> COUNT_ALL_AGG_EXPR = ONumber.create(Long.class, COUNT_ALL_AGG);
     }
     
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/ToStringVisitor.java
Patch:
@@ -5,8 +5,6 @@
  */
 package com.mysema.query.types;
 
-import com.mysema.query.types.expr.EArrayConstructor;
-import com.mysema.query.types.expr.EConstructor;
 
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/Visitor.java
Patch:
@@ -5,8 +5,6 @@
  */
 package com.mysema.query.types;
 
-import com.mysema.query.types.expr.EArrayConstructor;
-import com.mysema.query.types.expr.EConstructor;
 
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EArray.java
Patch:
@@ -3,11 +3,11 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types;
+package com.mysema.query.types.expr;
 
 import javax.annotation.Nonnegative;
 
-import com.mysema.query.types.expr.ENumber;
+import com.mysema.query.types.Expr;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ECollection.java
Patch:
@@ -3,12 +3,11 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types;
+package com.mysema.query.types.expr;
 
 import java.util.Collection;
 
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.ENumber;
+import com.mysema.query.types.Expr;
 
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ECollectionBase.java
Patch:
@@ -9,9 +9,7 @@
 
 import javax.annotation.Nullable;
 
-import com.mysema.query.types.ECollection;
 import com.mysema.query.types.Expr;
-import com.mysema.query.types.ExprConst;
 import com.mysema.query.types.Ops;
 
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EComparable.java
Patch:
@@ -6,7 +6,6 @@
 package com.mysema.query.types.expr;
 
 import com.mysema.query.types.Expr;
-import com.mysema.query.types.ExprConst;
 import com.mysema.query.types.Ops;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EComparableBase.java
Patch:
@@ -8,7 +8,6 @@
 import javax.annotation.Nullable;
 
 import com.mysema.query.types.Expr;
-import com.mysema.query.types.ExprConst;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Order;
 import com.mysema.query.types.OrderSpecifier;

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EList.java
Patch:
@@ -3,12 +3,14 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types;
+package com.mysema.query.types.expr;
 
 import java.util.List;
 
 import javax.annotation.Nonnegative;
 
+import com.mysema.query.types.Expr;
+
 
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EMap.java
Patch:
@@ -3,10 +3,9 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types;
+package com.mysema.query.types.expr;
 
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.ENumber;
+import com.mysema.query.types.Expr;
 
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EMapBase.java
Patch:
@@ -9,9 +9,7 @@
 
 import javax.annotation.Nullable;
 
-import com.mysema.query.types.EMap;
 import com.mysema.query.types.Expr;
-import com.mysema.query.types.ExprConst;
 import com.mysema.query.types.Ops;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ENumber.java
Patch:
@@ -11,7 +11,6 @@
 import javax.annotation.Nullable;
 
 import com.mysema.query.types.Expr;
-import com.mysema.query.types.ExprConst;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Ops.AggOps;

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EStringConst.java
Patch:
@@ -17,7 +17,6 @@
 import com.mysema.commons.lang.Assert;
 import com.mysema.query.types.Constant;
 import com.mysema.query.types.Expr;
-import com.mysema.query.types.ExprConst;
 import com.mysema.query.types.Visitor;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/path/PArray.java
Patch:
@@ -11,12 +11,12 @@
 import javax.annotation.Nullable;
 
 import com.mysema.commons.lang.Assert;
-import com.mysema.query.types.EArray;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EArray;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.expr.ONumber;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PEntity.java
Patch:
@@ -13,13 +13,13 @@
 import javax.annotation.Nullable;
 
 import com.mysema.query.types.Expr;
-import com.mysema.query.types.ExprConst;
 import com.mysema.query.types.ExprException;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.ExprConst;
 import com.mysema.query.types.expr.OBoolean;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/path/PList.java
Patch:
@@ -18,14 +18,14 @@
 import javax.annotation.Nullable;
 
 import com.mysema.commons.lang.Assert;
-import com.mysema.query.types.EList;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.ExprException;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.ECollectionBase;
+import com.mysema.query.types.expr.EList;
 
 /**
  * PList represents list paths

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathMetadataFactory.java
Patch:
@@ -9,12 +9,12 @@
 
 import com.mysema.commons.lang.Assert;
 import com.mysema.query.types.Expr;
-import com.mysema.query.types.ExprConst;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.PathType;
 import com.mysema.query.types.expr.ENumberConst;
 import com.mysema.query.types.expr.EStringConst;
+import com.mysema.query.types.expr.ExprConst;
 
 /**
  * @author tiwe

File: querydsl-core/src/test/java/com/mysema/query/types/EConstructorTest.java
Patch:
@@ -11,7 +11,6 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.expr.EConstructor;
 import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.expr.ENumberConst;
 import com.mysema.query.types.expr.EString;

File: querydsl-core/src/test/java/com/mysema/query/types/StringTest.java
Patch:
@@ -17,8 +17,6 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.expr.EArrayConstructor;
-import com.mysema.query.types.expr.EConstructor;
 
 
 /**

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLGrammar.java
Patch:
@@ -5,9 +5,9 @@
  */
 package com.mysema.query.hql;
 
-import com.mysema.query.types.ECollection;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Ops;
+import com.mysema.query.types.expr.ECollection;
 import com.mysema.query.types.expr.EComparable;
 import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.expr.OComparable;

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/sql/ConstructorResultTransformer.java
Patch:
@@ -11,7 +11,7 @@
 import org.hibernate.transform.ResultTransformer;
 
 import com.mysema.query.QueryException;
-import com.mysema.query.types.expr.EConstructor;
+import com.mysema.query.types.EConstructor;
 
 /**
  * @author tiwe

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/sql/HibernateSQLQuery.java
Patch:
@@ -28,9 +28,9 @@
 import com.mysema.query.hql.hibernate.SessionHolder;
 import com.mysema.query.hql.hibernate.StatelessSessionHolder;
 import com.mysema.query.sql.SQLTemplates;
+import com.mysema.query.types.EConstructor;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.expr.EConstructor;
 
 /**
  * HibernateSQLQuery is an SQLQuery implementation that uses Hibernate's Native SQL functionality 

File: querydsl-hql/src/test/java/com/mysema/query/AbstractStandardTest.java
Patch:
@@ -22,9 +22,9 @@
 import com.mysema.query.hql.HQLQuery;
 import com.mysema.query.hql.domain.Cat;
 import com.mysema.query.hql.domain.QCat;
-import com.mysema.query.types.EList;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.EList;
 
 /**
  * @author tiwe

File: querydsl-hql/src/test/java/com/mysema/query/hql/ConstructorsTest.java
Patch:
@@ -7,8 +7,8 @@
 
 import org.junit.Test;
 
+import com.mysema.query.types.EConstructor;
 import com.mysema.query.types.Expr;
-import com.mysema.query.types.expr.EConstructor;
 
 public class ConstructorsTest extends AbstractQueryTest{
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/hibernate/sql/DerbySQLTest.java
Patch:
@@ -22,7 +22,7 @@
 import com.mysema.query.hql.domain.sql.SAnimal;
 import com.mysema.query.sql.DerbyTemplates;
 import com.mysema.query.sql.SQLTemplates;
-import com.mysema.query.types.expr.EConstructor;
+import com.mysema.query.types.EConstructor;
 import com.mysema.testutil.HibernateConfig;
 import com.mysema.testutil.HibernateTestRunner;
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/jpa/sql/JPADerbySQLTest.java
Patch:
@@ -24,7 +24,7 @@
 import com.mysema.query.hql.domain.sql.SAnimal;
 import com.mysema.query.sql.DerbyTemplates;
 import com.mysema.query.sql.SQLTemplates;
-import com.mysema.query.types.expr.EConstructor;
+import com.mysema.query.types.EConstructor;
 import com.mysema.testutil.JPAConfig;
 import com.mysema.testutil.JPATestRunner;
 

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/JDOQLQueryMixin.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.support.QueryMixin;
+import com.mysema.query.types.EConstructor;
 import com.mysema.query.types.Expr;
-import com.mysema.query.types.expr.EConstructor;
 
 /**
  * @author tiwe

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/JDOQLMethodsTest.java
Patch:
@@ -17,9 +17,9 @@
 import com.mysema.query.jdoql.testdomain.Product;
 import com.mysema.query.jdoql.testdomain.QProduct;
 import com.mysema.query.jdoql.testdomain.QStore;
-import com.mysema.query.types.ECollection;
-import com.mysema.query.types.EMap;
 import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.ECollection;
+import com.mysema.query.types.expr.EMap;
 import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.expr.EString;
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -27,11 +27,11 @@
 import com.mysema.query.SearchResults;
 import com.mysema.query.support.ProjectableQuery;
 import com.mysema.query.support.QueryMixin;
+import com.mysema.query.types.EConstructor;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EConstructor;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.query.ListSubQuery;
 import com.mysema.util.JDBCUtil;

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLSerializer.java
Patch:
@@ -19,8 +19,8 @@
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.serialization.SerializerBase;
 import com.mysema.query.types.Constant;
+import com.mysema.query.types.EConstructor;
 import com.mysema.query.types.Expr;
-import com.mysema.query.types.ExprConst;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Order;
@@ -29,7 +29,7 @@
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EConstructor;
+import com.mysema.query.types.expr.ExprConst;
 import com.mysema.query.types.path.PEntity;
 
 /**

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLInsertClause.java
Patch:
@@ -20,9 +20,9 @@
 import com.mysema.query.sql.SQLSerializer;
 import com.mysema.query.sql.SQLTemplates;
 import com.mysema.query.types.Expr;
-import com.mysema.query.types.ExprConst;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
+import com.mysema.query.types.expr.ExprConst;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.util.JDBCUtil;
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/domain/QIdName.java
Patch:
@@ -5,8 +5,8 @@
  */
 package com.mysema.query.sql.domain;
 
+import com.mysema.query.types.EConstructor;
 import com.mysema.query.types.Expr;
-import com.mysema.query.types.expr.EConstructor;
 
 @SuppressWarnings("all")
 public class QIdName extends EConstructor<IdName> {

File: querydsl-core/src/main/java/com/mysema/query/codegen/DTOSerializer.java
Patch:
@@ -12,6 +12,7 @@
 import org.apache.commons.collections15.Transformer;
 
 import com.mysema.commons.lang.Assert;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.expr.EConstructor;
 import com.mysema.util.CodeWriter;
 
@@ -39,6 +40,7 @@ protected void intro(EntityType model, CodeWriter writer) throws IOException {
         writer.packageDecl(model.getPackageName());
         
         // imports
+        writer.imports(Expr.class.getPackage());
         writer.imports(EConstructor.class.getPackage());
         writer.nl();
         

File: querydsl-core/src/main/java/com/mysema/query/codegen/DTOSerializer.java
Patch:
@@ -12,7 +12,7 @@
 import org.apache.commons.collections15.Transformer;
 
 import com.mysema.commons.lang.Assert;
-import com.mysema.query.types.Expr;
+import com.mysema.query.types.expr.EConstructor;
 import com.mysema.util.CodeWriter;
 
 /**
@@ -39,7 +39,7 @@ protected void intro(EntityType model, CodeWriter writer) throws IOException {
         writer.packageDecl(model.getPackageName());
         
         // imports
-        writer.imports(Expr.class.getPackage());
+        writer.imports(EConstructor.class.getPackage());
         writer.nl();
         
         // javadoc

File: querydsl-core/src/main/java/com/mysema/query/codegen/EmbeddableSerializer.java
Patch:
@@ -7,9 +7,9 @@
 
 import java.io.IOException;
 
-import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
+import com.mysema.query.types.expr.EComparable;
 import com.mysema.query.types.path.PSimple;
 import com.mysema.util.CodeWriter;
 
@@ -49,7 +49,7 @@ protected void introImports(CodeWriter writer, SerializerConfig config, EntityTy
         if ((model.hasLists() && config.useListAccessors())
                 || !model.getMethods().isEmpty()
                 || (model.hasMaps() && config.useMapAccessors())){
-            writer.imports(Expr.class.getPackage());
+            writer.imports(EComparable.class.getPackage());
         }
         
         if (!model.getMethods().isEmpty()){

File: querydsl-core/src/main/java/com/mysema/query/codegen/EntitySerializer.java
Patch:
@@ -31,10 +31,10 @@
 import org.apache.commons.lang.StringEscapeUtils;
 
 import com.mysema.commons.lang.Assert;
-import com.mysema.query.types.Expr;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
+import com.mysema.query.types.expr.EComparable;
 import com.mysema.query.types.path.PComparable;
 import com.mysema.query.types.path.PDate;
 import com.mysema.query.types.path.PDateTime;
@@ -301,7 +301,7 @@ protected void introImports(CodeWriter writer, SerializerConfig config, EntityTy
                 || !model.getMethods().isEmpty()
                 || (model.hasLists() && config.useListAccessors()) 
                 || (model.hasMaps() && config.useMapAccessors())){
-            writer.imports(Expr.class.getPackage());
+            writer.imports(EComparable.class.getPackage());
         }
         
         if (!model.getMethods().isEmpty()){

File: querydsl-core/src/main/java/com/mysema/query/codegen/SupertypeSerializer.java
Patch:
@@ -9,9 +9,9 @@
 
 import net.jcip.annotations.Immutable;
 
-import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
+import com.mysema.query.types.expr.EComparable;
 import com.mysema.query.types.path.PSimple;
 import com.mysema.util.CodeWriter;
 
@@ -51,7 +51,7 @@ protected void introImports(CodeWriter writer, SerializerConfig config, EntityTy
         if ((model.hasLists() && config.useListAccessors())
                 || !model.getMethods().isEmpty()
                 || (model.hasMaps() && config.useMapAccessors())){
-            writer.imports(Expr.class.getPackage());
+            writer.imports(EComparable.class.getPackage());
         }
         
         if (!model.getMethods().isEmpty()){

File: querydsl-apt/src/test/java/com/mysema/query/domain/PathMetadataTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import com.mysema.query.types.EString;
-import com.mysema.query.types.EStringConst;
+import com.mysema.query.types.expr.EString;
+import com.mysema.query.types.expr.EStringConst;
 
 public class PathMetadataTest {
     

File: querydsl-apt/src/test/java/com/mysema/query/domain/QueryExtensions5Test.java
Patch:
@@ -12,7 +12,7 @@
 import com.mysema.query.annotations.QueryEntity;
 import com.mysema.query.annotations.QueryExtensions;
 import com.mysema.query.annotations.QueryMethod;
-import com.mysema.query.types.EStringConst;
+import com.mysema.query.types.expr.EStringConst;
 
 public class QueryExtensions5Test {
     

File: querydsl-apt/src/test/java/com/mysema/query/domain/QueryProjectionTest.java
Patch:
@@ -16,9 +16,9 @@
 import com.mysema.query.annotations.QueryEntity;
 import com.mysema.query.annotations.QueryProjection;
 import com.mysema.query.annotations.QueryType;
-import com.mysema.query.types.ENumberConst;
-import com.mysema.query.types.EStringConst;
 import com.mysema.query.types.ExprConst;
+import com.mysema.query.types.expr.ENumberConst;
+import com.mysema.query.types.expr.EStringConst;
 
 public class QueryProjectionTest {
 

File: querydsl-collections/src/main/java/com/mysema/query/collections/AbstractColQuery.java
Patch:
@@ -29,12 +29,12 @@
 import com.mysema.query.SearchResults;
 import com.mysema.query.support.ProjectableQuery;
 import com.mysema.query.support.QueryMixin;
-import com.mysema.query.types.EArrayConstructor;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Order;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.Path;
+import com.mysema.query.types.expr.EArrayConstructor;
+import com.mysema.query.types.expr.EBoolean;
 import com.mysema.util.MultiIterator;
 
 /**

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColDeleteClause.java
Patch:
@@ -3,8 +3,8 @@
 import java.util.Collection;
 
 import com.mysema.query.dml.DeleteClause;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Path;
+import com.mysema.query.types.expr.EBoolean;
 
 /**
  * @author tiwe

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColUpdateClause.java
Patch:
@@ -1,8 +1,8 @@
 package com.mysema.query.collections;
 
 import com.mysema.query.dml.UpdateClause;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Path;
+import com.mysema.query.types.expr.EBoolean;
 
 /**
  * @author tiwe

File: querydsl-collections/src/main/java/com/mysema/query/collections/IteratorFactory.java
Patch:
@@ -12,8 +12,8 @@
 
 import org.apache.commons.collections15.IteratorUtils;
 
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
+import com.mysema.query.types.expr.EBoolean;
 
 /**
  * IteratorFactory provides Iterator utilities

File: querydsl-collections/src/test/java/com/mysema/query/ColQueryStandardTest.java
Patch:
@@ -16,8 +16,8 @@
 import com.mysema.query.animal.Cat;
 import com.mysema.query.animal.QCat;
 import com.mysema.query.collections.MiniApi;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
+import com.mysema.query.types.expr.EBoolean;
 
 public class ColQueryStandardTest {
     

File: querydsl-collections/src/test/java/com/mysema/query/collections/ColQueryTest.java
Patch:
@@ -16,8 +16,8 @@
 import org.junit.Test;
 
 import com.mysema.query.animal.Cat;
-import com.mysema.query.types.ENumber;
 import com.mysema.query.types.Expr;
+import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.path.PString;
 
 /**

File: querydsl-collections/src/test/java/com/mysema/query/collections/MathFunctionTest.java
Patch:
@@ -12,9 +12,9 @@
 
 import com.mysema.query.animal.Cat;
 import com.mysema.query.functions.MathFunctions;
-import com.mysema.query.types.ENumber;
-import com.mysema.query.types.ENumberConst;
 import com.mysema.query.types.Expr;
+import com.mysema.query.types.expr.ENumber;
+import com.mysema.query.types.expr.ENumberConst;
 
 /**
  * MathFunctionTest provides

File: querydsl-core/src/main/java/com/mysema/query/BooleanBuilder.java
Patch:
@@ -7,8 +7,8 @@
 
 import javax.annotation.Nullable;
 
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
 
 /**
  * BooleanBuilder is a cascading builder for Boolean expressions.

File: querydsl-core/src/main/java/com/mysema/query/DefaultQueryMetadata.java
Patch:
@@ -14,10 +14,10 @@
 
 import javax.annotation.Nullable;
 
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.Path;
+import com.mysema.query.types.expr.EBoolean;
 
 import edu.umd.cs.findbugs.annotations.SuppressWarnings;
 

File: querydsl-core/src/main/java/com/mysema/query/JoinExpression.java
Patch:
@@ -11,8 +11,8 @@
 import org.apache.commons.lang.builder.EqualsBuilder;
 
 import com.mysema.commons.lang.Assert;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
+import com.mysema.query.types.expr.EBoolean;
 
 /**
  * JoinExpression is a join element in a Query instance. 

File: querydsl-core/src/main/java/com/mysema/query/Query.java
Patch:
@@ -7,9 +7,9 @@
 
 import javax.annotation.Nonnegative;
 
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.OrderSpecifier;
+import com.mysema.query.types.expr.EBoolean;
 
 /**
  * Query provides a query interface of the fluent query DSL.

File: querydsl-core/src/main/java/com/mysema/query/QueryMetadata.java
Patch:
@@ -10,9 +10,9 @@
 
 import javax.annotation.Nullable;
 
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.OrderSpecifier;
+import com.mysema.query.types.expr.EBoolean;
 
 /**
  * QueryMetadata defines query metadata such as query sources, filtering

File: querydsl-core/src/main/java/com/mysema/query/SimpleQuery.java
Patch:
@@ -7,8 +7,8 @@
 
 import javax.annotation.Nonnegative;
 
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.OrderSpecifier;
+import com.mysema.query.types.expr.EBoolean;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/dml/DeleteClause.java
Patch:
@@ -5,7 +5,7 @@
  */
 package com.mysema.query.dml;
 
-import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.expr.EBoolean;
 
 /**
  * DeleteClause defines a generic extensible interface for Delete clauses

File: querydsl-core/src/main/java/com/mysema/query/dml/UpdateClause.java
Patch:
@@ -5,8 +5,8 @@
  */
 package com.mysema.query.dml;
 
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Path;
+import com.mysema.query.types.expr.EBoolean;
 
 /**
  * UpdateClause defines a generic extensible interface for Update clauses

File: querydsl-core/src/main/java/com/mysema/query/functions/MathFunctions.java
Patch:
@@ -5,9 +5,9 @@
  */
 package com.mysema.query.functions;
 
-import com.mysema.query.types.ENumber;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Ops.MathOps;
+import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.operation.ONumber;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/serialization/SerializerBase.java
Patch:
@@ -14,8 +14,6 @@
 import com.mysema.query.BooleanBuilder;
 import com.mysema.query.types.Constant;
 import com.mysema.query.types.Custom;
-import com.mysema.query.types.EArrayConstructor;
-import com.mysema.query.types.EConstructor;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
@@ -24,6 +22,8 @@
 import com.mysema.query.types.Template;
 import com.mysema.query.types.Templates;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EArrayConstructor;
+import com.mysema.query.types.expr.EConstructor;
 
 /**
  * SerializerBase is a stub for Serializer implementations

File: querydsl-core/src/main/java/com/mysema/query/support/QueryBase.java
Patch:
@@ -6,9 +6,9 @@
 package com.mysema.query.support;
 
 import com.mysema.query.QueryModifiers;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.OrderSpecifier;
+import com.mysema.query.types.expr.EBoolean;
 
 /**
  * QueryBase provides a stub for Query implementations

File: querydsl-core/src/main/java/com/mysema/query/support/QueryMixin.java
Patch:
@@ -10,9 +10,9 @@
 import com.mysema.query.JoinType;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.QueryModifiers;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.OrderSpecifier;
+import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/support/SimpleQueryAdapter.java
Patch:
@@ -13,9 +13,9 @@
 import com.mysema.query.SearchResults;
 import com.mysema.query.SimpleProjectable;
 import com.mysema.query.SimpleQuery;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.OrderSpecifier;
+import com.mysema.query.types.expr.EBoolean;
 
 import edu.umd.cs.findbugs.annotations.SuppressWarnings;
 

File: querydsl-core/src/main/java/com/mysema/query/types/Converter.java
Patch:
@@ -5,6 +5,9 @@
  */
 package com.mysema.query.types;
 
+import com.mysema.query.types.expr.EString;
+import com.mysema.query.types.expr.EStringEscape;
+
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/types/EArray.java
Patch:
@@ -7,6 +7,8 @@
 
 import javax.annotation.Nonnegative;
 
+import com.mysema.query.types.expr.ENumber;
+
 /**
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/ECollection.java
Patch:
@@ -7,6 +7,9 @@
 
 import java.util.Collection;
 
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.ENumber;
+
 
 /**
  * ECollection represents java.util.Collection typed expressions

File: querydsl-core/src/main/java/com/mysema/query/types/EList.java
Patch:
@@ -10,6 +10,7 @@
 import javax.annotation.Nonnegative;
 
 
+
 /**
  * EList represents java.util.List typed expressions
  * 

File: querydsl-core/src/main/java/com/mysema/query/types/EMap.java
Patch:
@@ -5,6 +5,9 @@
  */
 package com.mysema.query.types;
 
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.ENumber;
+
 
 /**
  * EMap represents java.util.Map typed expressions

File: querydsl-core/src/main/java/com/mysema/query/types/Expr.java
Patch:
@@ -12,6 +12,8 @@
 import javax.annotation.Nullable;
 
 import com.mysema.commons.lang.Assert;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.ONumber;
 

File: querydsl-core/src/main/java/com/mysema/query/types/ExprConst.java
Patch:
@@ -6,6 +6,8 @@
 package com.mysema.query.types;
 
 import com.mysema.commons.lang.Assert;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.EBooleanConst;
 
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/Ops.java
Patch:
@@ -11,6 +11,7 @@
 import java.util.Collection;
 import java.util.List;
 
+import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.operation.ONumber;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/Path.java
Patch:
@@ -7,6 +7,8 @@
 
 import java.lang.reflect.AnnotatedElement;
 
+import com.mysema.query.types.expr.EBoolean;
+
 
 /**
  * Path represents a path expression
@@ -18,7 +20,6 @@ public interface Path<C> {
     /**
      * @return
      */
-    // Expr is in lower level package
     Expr<C> asExpr();
 
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/SubQuery.java
Patch:
@@ -6,6 +6,7 @@
 package com.mysema.query.types;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.expr.EBoolean;
 
 /**
  * 

File: querydsl-core/src/main/java/com/mysema/query/types/ToStringVisitor.java
Patch:
@@ -5,6 +5,9 @@
  */
 package com.mysema.query.types;
 
+import com.mysema.query.types.expr.EArrayConstructor;
+import com.mysema.query.types.expr.EConstructor;
+
 
 /**
  * ToStringVisitor is used for toString() serialization in Expr implementations.

File: querydsl-core/src/main/java/com/mysema/query/types/Visitor.java
Patch:
@@ -5,6 +5,9 @@
  */
 package com.mysema.query.types;
 
+import com.mysema.query.types.expr.EArrayConstructor;
+import com.mysema.query.types.expr.EConstructor;
+
 
 /**
  * Visitor provides a dispatching Visitor for Expr instances.

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CBoolean.java
Patch:
@@ -9,11 +9,11 @@
 import java.util.List;
 
 import com.mysema.query.types.Custom;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
 
 /**
  * CBoolean is a custom boolean expression

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CComparable.java
Patch:
@@ -9,11 +9,11 @@
 import java.util.List;
 
 import com.mysema.query.types.Custom;
-import com.mysema.query.types.EComparable;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EComparable;
 
 /**
  * CComparable defines custom comparable expressions

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CDate.java
Patch:
@@ -9,11 +9,11 @@
 import java.util.List;
 
 import com.mysema.query.types.Custom;
-import com.mysema.query.types.EDate;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EDate;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CDateTime.java
Patch:
@@ -9,11 +9,11 @@
 import java.util.List;
 
 import com.mysema.query.types.Custom;
-import com.mysema.query.types.EDateTime;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EDateTime;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CNumber.java
Patch:
@@ -9,11 +9,11 @@
 import java.util.List;
 
 import com.mysema.query.types.Custom;
-import com.mysema.query.types.ENumber;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.ENumber;
 
 /**
  * CNumber defines custom numeric expressions

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CString.java
Patch:
@@ -9,11 +9,11 @@
 import java.util.List;
 
 import com.mysema.query.types.Custom;
-import com.mysema.query.types.EString;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EString;
 
 /**
  * CString defines custom String expressions

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CTime.java
Patch:
@@ -9,12 +9,12 @@
 import java.util.List;
 
 import com.mysema.query.types.Custom;
-import com.mysema.query.types.EComparable;
-import com.mysema.query.types.ETime;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EComparable;
+import com.mysema.query.types.expr.ETime;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EArrayConstructor.java
Patch:
@@ -3,9 +3,11 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types;
+package com.mysema.query.types.expr;
 
 import com.mysema.commons.lang.Assert;
+import com.mysema.query.types.Expr;
+import com.mysema.query.types.Visitor;
 
 /**
  * EArrayConstructor extends EConstructor to represent array initializers

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EBoolean.java
Patch:
@@ -3,10 +3,11 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types;
+package com.mysema.query.types.expr;
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.operation.OBoolean;
 
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDate.java
Patch:
@@ -3,12 +3,13 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types;
+package com.mysema.query.types.expr;
 
 import java.util.Date;
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.operation.ODate;
 import com.mysema.query.types.operation.ONumber;
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDateOrTime.java
Patch:
@@ -3,7 +3,9 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types;
+package com.mysema.query.types.expr;
+
+import com.mysema.query.types.Expr;
 
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDateTime.java
Patch:
@@ -3,12 +3,13 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types;
+package com.mysema.query.types.expr;
 
 import java.util.Date;
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.operation.ODateTime;
 import com.mysema.query.types.operation.ONumber;
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EStringEscape.java
Patch:
@@ -3,7 +3,9 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types;
+package com.mysema.query.types.expr;
+
+import com.mysema.query.types.Constant;
 
 
 // TODO : move somewhere else

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ETime.java
Patch:
@@ -3,12 +3,14 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types;
+package com.mysema.query.types.expr;
 
 import java.util.Date;
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.types.Ops;
+import com.mysema.query.types.Ops.DateTimeOps;
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.OTime;
 

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OBoolean.java
Patch:
@@ -8,12 +8,12 @@
 import java.util.Arrays;
 import java.util.List;
 
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
 
 /**
  * OBoolean represents boolean operations

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OComparable.java
Patch:
@@ -8,11 +8,11 @@
 import java.util.Arrays;
 import java.util.List;
 
-import com.mysema.query.types.EComparable;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EComparable;
 
 /**
  * OComparable represents Comparable operations

File: querydsl-core/src/main/java/com/mysema/query/types/operation/ODate.java
Patch:
@@ -8,11 +8,11 @@
 import java.util.Arrays;
 import java.util.List;
 
-import com.mysema.query.types.EDate;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EDate;
 
 /**
  * ODate represents Date operations

File: querydsl-core/src/main/java/com/mysema/query/types/operation/ODateTime.java
Patch:
@@ -8,11 +8,11 @@
 import java.util.Arrays;
 import java.util.List;
 
-import com.mysema.query.types.EDateTime;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EDateTime;
 
 /**
  * ODateTime represents DateTime operations

File: querydsl-core/src/main/java/com/mysema/query/types/operation/ONumber.java
Patch:
@@ -8,11 +8,11 @@
 import java.util.Arrays;
 import java.util.List;
 
-import com.mysema.query.types.ENumber;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.ENumber;
 
 /**
  * ONumber represents numeric operations

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OString.java
Patch:
@@ -8,11 +8,11 @@
 import java.util.Arrays;
 import java.util.List;
 
-import com.mysema.query.types.EString;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EString;
 
 /**
  * OString represents a String typed operation

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OTime.java
Patch:
@@ -8,11 +8,11 @@
 import java.util.Arrays;
 import java.util.List;
 
-import com.mysema.query.types.ETime;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.ETime;
 
 /**
  * OTime represents Time functions

File: querydsl-core/src/main/java/com/mysema/query/types/path/PArray.java
Patch:
@@ -12,13 +12,13 @@
 
 import com.mysema.commons.lang.Assert;
 import com.mysema.query.types.EArray;
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.ENumber;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.operation.ONumber;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/path/PBoolean.java
Patch:
@@ -7,10 +7,10 @@
 
 import java.lang.reflect.AnnotatedElement;
 
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
 
 /**
  * PBoolean represents boolean path expressions

File: querydsl-core/src/main/java/com/mysema/query/types/path/PCollection.java
Patch:
@@ -9,11 +9,11 @@
 import java.util.Collection;
 
 import com.mysema.commons.lang.Assert;
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.ECollectionBase;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.ECollectionBase;
 
 /**
  * PCollection represents collection paths

File: querydsl-core/src/main/java/com/mysema/query/types/path/PComparable.java
Patch:
@@ -7,11 +7,11 @@
 
 import java.lang.reflect.AnnotatedElement;
 
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.EComparable;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.EComparable;
 
 /**
  * PComparable represents Comparable paths

File: querydsl-core/src/main/java/com/mysema/query/types/path/PDate.java
Patch:
@@ -7,11 +7,11 @@
 
 import java.lang.reflect.AnnotatedElement;
 
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.EDate;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.EDate;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/types/path/PDateTime.java
Patch:
@@ -7,11 +7,11 @@
 
 import java.lang.reflect.AnnotatedElement;
 
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.EDateTime;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.EDateTime;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/types/path/PEntity.java
Patch:
@@ -12,14 +12,14 @@
 
 import javax.annotation.Nullable;
 
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.ExprConst;
 import com.mysema.query.types.ExprException;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.operation.OBoolean;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/path/PList.java
Patch:
@@ -18,14 +18,14 @@
 import javax.annotation.Nullable;
 
 import com.mysema.commons.lang.Assert;
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.ECollectionBase;
 import com.mysema.query.types.EList;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.ExprException;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.ECollectionBase;
 
 /**
  * PList represents list paths

File: querydsl-core/src/main/java/com/mysema/query/types/path/PMap.java
Patch:
@@ -15,13 +15,13 @@
 
 import javax.annotation.Nullable;
 
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.EMapBase;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.ExprException;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.EMapBase;
 
 /**
  * PMap represents map paths

File: querydsl-core/src/main/java/com/mysema/query/types/path/PNumber.java
Patch:
@@ -7,11 +7,11 @@
 
 import java.lang.reflect.AnnotatedElement;
 
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.ENumber;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.ENumber;
 
 /**
  * PNumber represents numeric paths

File: querydsl-core/src/main/java/com/mysema/query/types/path/PSet.java
Patch:
@@ -9,11 +9,11 @@
 import java.util.Set;
 
 import com.mysema.commons.lang.Assert;
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.ECollectionBase;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.ECollectionBase;
 
 /**
  * PSet represents set paths

File: querydsl-core/src/main/java/com/mysema/query/types/path/PSimple.java
Patch:
@@ -7,11 +7,11 @@
 
 import java.lang.reflect.AnnotatedElement;
 
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
 
 /**
  * PSimple represents simple paths

File: querydsl-core/src/main/java/com/mysema/query/types/path/PString.java
Patch:
@@ -7,11 +7,11 @@
 
 import java.lang.reflect.AnnotatedElement;
 
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.EString;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.EString;
 
 /**
  * PString represents String typed paths

File: querydsl-core/src/main/java/com/mysema/query/types/path/PTime.java
Patch:
@@ -7,11 +7,11 @@
 
 import java.lang.reflect.AnnotatedElement;
 
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.ETime;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.ETime;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathMetadataFactory.java
Patch:
@@ -8,13 +8,13 @@
 import javax.annotation.Nonnegative;
 
 import com.mysema.commons.lang.Assert;
-import com.mysema.query.types.ENumberConst;
-import com.mysema.query.types.EStringConst;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.ExprConst;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.PathType;
+import com.mysema.query.types.expr.ENumberConst;
+import com.mysema.query.types.expr.EStringConst;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathMixin.java
Patch:
@@ -10,12 +10,12 @@
 
 import javax.annotation.Nullable;
 
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.PathType;
+import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.util.ReflectionUtils;
 

File: querydsl-core/src/main/java/com/mysema/query/types/query/BooleanSubQuery.java
Patch:
@@ -6,12 +6,12 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.operation.OBoolean;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/query/ComparableSubQuery.java
Patch:
@@ -6,13 +6,13 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.EComparable;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.EComparable;
 import com.mysema.query.types.operation.OComparable;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/query/DateSubQuery.java
Patch:
@@ -6,13 +6,13 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.EDate;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.EDate;
 import com.mysema.query.types.operation.ODate;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/query/DateTimeSubQuery.java
Patch:
@@ -6,13 +6,13 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.EDateTime;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.EDateTime;
 import com.mysema.query.types.operation.ODateTime;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/query/ListSubQuery.java
Patch:
@@ -8,14 +8,14 @@
 import java.util.List;
 
 import com.mysema.query.QueryMetadata;
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.ECollectionBase;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.ECollectionBase;
 import com.mysema.query.types.operation.OSimple;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/query/NumberSubQuery.java
Patch:
@@ -6,13 +6,13 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.ENumber;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.operation.ONumber;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/query/ObjectSubQuery.java
Patch:
@@ -6,13 +6,13 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.operation.OSimple;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/query/StringSubQuery.java
Patch:
@@ -6,13 +6,13 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.EString;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.EString;
 import com.mysema.query.types.operation.OString;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/query/SubQueryMixin.java
Patch:
@@ -8,11 +8,11 @@
 import javax.annotation.Nullable;
 
 import com.mysema.query.QueryMetadata;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
+import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.operation.OBoolean;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/query/TimeSubQuery.java
Patch:
@@ -6,13 +6,13 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.ETime;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.ETime;
 import com.mysema.query.types.operation.OTime;
 
 /**

File: querydsl-core/src/test/java/com/mysema/query/BooleanBuilderTest.java
Patch:
@@ -9,8 +9,8 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.EBooleanConst;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.EBooleanConst;
 
 
 /**

File: querydsl-core/src/test/java/com/mysema/query/types/CaseBuilderTest.java
Patch:
@@ -11,6 +11,9 @@
 
 import org.junit.Test;
 
+import com.mysema.query.types.expr.ENumber;
+import com.mysema.query.types.expr.EString;
+
 
 public class CaseBuilderTest {
 

File: querydsl-core/src/test/java/com/mysema/query/types/CaseForEqBuilderTest.java
Patch:
@@ -12,6 +12,9 @@
 
 import org.junit.Test;
 
+import com.mysema.query.types.expr.ENumber;
+import com.mysema.query.types.expr.EString;
+
 
 public class CaseForEqBuilderTest {
     

File: querydsl-core/src/test/java/com/mysema/query/types/EDateConstTest.java
Patch:
@@ -12,7 +12,8 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.EDate;
+import com.mysema.query.types.expr.EDate;
+import com.mysema.query.types.expr.EDateConst;
 
 public class EDateConstTest {
     

File: querydsl-core/src/test/java/com/mysema/query/types/EDateTimeConstTest.java
Patch:
@@ -12,7 +12,8 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.EDateTime;
+import com.mysema.query.types.expr.EDateTime;
+import com.mysema.query.types.expr.EDateTimeConst;
 
 public class EDateTimeConstTest {
     

File: querydsl-core/src/test/java/com/mysema/query/types/EStringConstTest.java
Patch:
@@ -9,7 +9,8 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.EString;
+import com.mysema.query.types.expr.EString;
+import com.mysema.query.types.expr.EStringConst;
 
 
 public class EStringConstTest {

File: querydsl-core/src/test/java/com/mysema/query/types/ETimeConstTest.java
Patch:
@@ -12,7 +12,8 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.ETime;
+import com.mysema.query.types.expr.ETime;
+import com.mysema.query.types.expr.ETimeConst;
 
 public class ETimeConstTest {
     

File: querydsl-core/src/test/java/com/mysema/query/types/StringTest.java
Patch:
@@ -17,6 +17,9 @@
 
 import org.junit.Test;
 
+import com.mysema.query.types.expr.EArrayConstructor;
+import com.mysema.query.types.expr.EConstructor;
+
 
 /**
  * StringTest provides.

File: querydsl-core/src/test/java/com/mysema/query/types/custom/CustomTest.java
Patch:
@@ -12,11 +12,11 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.EBooleanConst;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.EBooleanConst;
 
 public class CustomTest {
     

File: querydsl-hibernate-search/src/main/java/com/mysema/query/search/LuceneQuery.java
Patch:
@@ -11,9 +11,9 @@
 import com.mysema.query.SimpleProjectable;
 import com.mysema.query.SimpleQuery;
 import com.mysema.query.support.QueryMixin;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.Path;
+import com.mysema.query.types.expr.EBoolean;
 
 /**
  * @author tiwe

File: querydsl-hql/src/main/java/com/mysema/query/hql/AbstractSQLQuery.java
Patch:
@@ -8,9 +8,9 @@
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.support.ProjectableQuery;
 import com.mysema.query.support.QueryMixin;
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.ENumber;
 import com.mysema.query.types.Ops;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.path.PEntity;
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLGrammar.java
Patch:
@@ -6,10 +6,10 @@
 package com.mysema.query.hql;
 
 import com.mysema.query.types.ECollection;
-import com.mysema.query.types.EComparable;
-import com.mysema.query.types.ENumber;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Ops;
+import com.mysema.query.types.expr.EComparable;
+import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.operation.OComparable;
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.OSimple;

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLQuery.java
Patch:
@@ -9,8 +9,8 @@
 
 import com.mysema.query.Projectable;
 import com.mysema.query.Query;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Path;
+import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PMap;
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLQueryBase.java
Patch:
@@ -10,8 +10,8 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.support.ProjectableQuery;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Path;
+import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PMap;
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLQueryMixin.java
Patch:
@@ -12,10 +12,10 @@
 import com.mysema.query.JoinType;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.support.QueryMixin;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
+import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.operation.OSimple;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PMap;

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLSerializer.java
Patch:
@@ -19,8 +19,6 @@
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.serialization.SerializerBase;
 import com.mysema.query.types.Constant;
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.EStringConst;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
@@ -29,6 +27,8 @@
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathType;
 import com.mysema.query.types.SubQuery;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.EStringConst;
 import com.mysema.query.types.operation.OSimple;
 import com.mysema.query.types.path.PEntity;
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLSubQuery.java
Patch:
@@ -9,8 +9,8 @@
 
 import com.mysema.query.DefaultQueryMetadata;
 import com.mysema.query.support.DetachableQuery;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Path;
+import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PMap;
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/HibernateDeleteClause.java
Patch:
@@ -16,7 +16,7 @@
 import com.mysema.query.dml.DeleteClause;
 import com.mysema.query.hql.HQLSerializer;
 import com.mysema.query.hql.HQLTemplates;
-import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
 
 /**

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/HibernateUpdateClause.java
Patch:
@@ -16,8 +16,8 @@
 import com.mysema.query.dml.UpdateClause;
 import com.mysema.query.hql.HQLSerializer;
 import com.mysema.query.hql.HQLTemplates;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Path;
+import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
 
 /**

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/sql/ConstructorResultTransformer.java
Patch:
@@ -11,7 +11,7 @@
 import org.hibernate.transform.ResultTransformer;
 
 import com.mysema.query.QueryException;
-import com.mysema.query.types.EConstructor;
+import com.mysema.query.types.expr.EConstructor;
 
 /**
  * @author tiwe

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/sql/HibernateSQLQuery.java
Patch:
@@ -28,9 +28,9 @@
 import com.mysema.query.hql.hibernate.SessionHolder;
 import com.mysema.query.hql.hibernate.StatelessSessionHolder;
 import com.mysema.query.sql.SQLTemplates;
-import com.mysema.query.types.EConstructor;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Path;
+import com.mysema.query.types.expr.EConstructor;
 
 /**
  * HibernateSQLQuery is an SQLQuery implementation that uses Hibernate's Native SQL functionality 

File: querydsl-hql/src/main/java/com/mysema/query/hql/jpa/JPADeleteClause.java
Patch:
@@ -15,7 +15,7 @@
 import com.mysema.query.dml.DeleteClause;
 import com.mysema.query.hql.HQLSerializer;
 import com.mysema.query.hql.HQLTemplates;
-import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
 
 /**

File: querydsl-hql/src/main/java/com/mysema/query/hql/jpa/JPAUpdateClause.java
Patch:
@@ -15,8 +15,8 @@
 import com.mysema.query.dml.UpdateClause;
 import com.mysema.query.hql.HQLSerializer;
 import com.mysema.query.hql.HQLTemplates;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Path;
+import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
 
 /**

File: querydsl-hql/src/test/java/com/mysema/query/AbstractStandardTest.java
Patch:
@@ -22,9 +22,9 @@
 import com.mysema.query.hql.HQLQuery;
 import com.mysema.query.hql.domain.Cat;
 import com.mysema.query.hql.domain.QCat;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.EList;
 import com.mysema.query.types.Expr;
+import com.mysema.query.types.expr.EBoolean;
 
 /**
  * @author tiwe

File: querydsl-hql/src/test/java/com/mysema/query/hql/CastTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.ENumber;
+import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.path.PNumber;
 
 public class CastTest extends AbstractQueryTest {

File: querydsl-hql/src/test/java/com/mysema/query/hql/ConstructorsTest.java
Patch:
@@ -7,8 +7,8 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.EConstructor;
 import com.mysema.query.types.Expr;
+import com.mysema.query.types.expr.EConstructor;
 
 public class ConstructorsTest extends AbstractQueryTest{
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/DateTimeTest.java
Patch:
@@ -7,9 +7,9 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.EDate;
-import com.mysema.query.types.EDateTime;
-import com.mysema.query.types.ETime;
+import com.mysema.query.types.expr.EDate;
+import com.mysema.query.types.expr.EDateTime;
+import com.mysema.query.types.expr.ETime;
 
 public class DateTimeTest extends AbstractQueryTest {
     

File: querydsl-hql/src/test/java/com/mysema/query/hql/FeaturesTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.mysema.query.hql.domain.QAccount;
 import com.mysema.query.hql.domain.QInheritedProperties;
-import com.mysema.query.types.ENumber;
+import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.path.PNumber;
 
 /**

File: querydsl-hql/src/test/java/com/mysema/query/hql/ParsingTest.java
Patch:
@@ -29,9 +29,9 @@
 import com.mysema.query.hql.domain.QFooDTO;
 import com.mysema.query.hql.domain.QItem;
 import com.mysema.query.hql.domain.QProduct;
-import com.mysema.query.types.EComparable;
-import com.mysema.query.types.EDate;
-import com.mysema.query.types.ENumber;
+import com.mysema.query.types.expr.EComparable;
+import com.mysema.query.types.expr.EDate;
+import com.mysema.query.types.expr.ENumber;
 
 /**
  * ParsingTest provides.

File: querydsl-hql/src/test/java/com/mysema/query/hql/hibernate/sql/DerbySQLTest.java
Patch:
@@ -22,7 +22,7 @@
 import com.mysema.query.hql.domain.sql.SAnimal;
 import com.mysema.query.sql.DerbyTemplates;
 import com.mysema.query.sql.SQLTemplates;
-import com.mysema.query.types.EConstructor;
+import com.mysema.query.types.expr.EConstructor;
 import com.mysema.testutil.HibernateConfig;
 import com.mysema.testutil.HibernateTestRunner;
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/jpa/sql/JPADerbySQLTest.java
Patch:
@@ -24,7 +24,7 @@
 import com.mysema.query.hql.domain.sql.SAnimal;
 import com.mysema.query.sql.DerbyTemplates;
 import com.mysema.query.sql.SQLTemplates;
-import com.mysema.query.types.EConstructor;
+import com.mysema.query.types.expr.EConstructor;
 import com.mysema.testutil.JPAConfig;
 import com.mysema.testutil.JPATestRunner;
 

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/JDOQLQueryMixin.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.support.QueryMixin;
-import com.mysema.query.types.EConstructor;
 import com.mysema.query.types.Expr;
+import com.mysema.query.types.expr.EConstructor;
 
 /**
  * @author tiwe

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/JDOQLSerializer.java
Patch:
@@ -21,15 +21,15 @@
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.serialization.SerializerBase;
 import com.mysema.query.types.Constant;
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.EStringConst;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Ops;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.EStringConst;
 import com.mysema.query.types.operation.OSimple;
 import com.mysema.query.types.path.PEntity;
 

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/dml/JDOQLDeleteClause.java
Patch:
@@ -17,7 +17,7 @@
 import com.mysema.query.dml.DeleteClause;
 import com.mysema.query.jdoql.JDOQLSerializer;
 import com.mysema.query.jdoql.JDOQLTemplates;
-import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
 
 /**

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/dml/JDOQLUpdateClause.java
Patch:
@@ -8,8 +8,8 @@
 import com.mysema.query.DefaultQueryMetadata;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.dml.UpdateClause;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Path;
+import com.mysema.query.types.expr.EBoolean;
 
 /**
  * UpdateClause implementation for JDO

File: querydsl-jdoql/src/test/java/com/mysema/query/JDOQLQueryStandardTest.java
Patch:
@@ -22,8 +22,8 @@
 import com.mysema.query.jdoql.testdomain.QProduct;
 import com.mysema.query.jdoql.testdomain.QStore;
 import com.mysema.query.jdoql.testdomain.Store;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
+import com.mysema.query.types.expr.EBoolean;
 
 public class JDOQLQueryStandardTest extends AbstractJDOTest {
     

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/AbstractJDOTest.java
Patch:
@@ -19,7 +19,7 @@
 import com.mysema.query.jdoql.dml.JDOQLDeleteClause;
 import com.mysema.query.jdoql.testdomain.Product;
 import com.mysema.query.jdoql.testdomain.Store;
-import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
 
 public abstract class AbstractJDOTest {

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/JDOQLMethodsTest.java
Patch:
@@ -17,11 +17,11 @@
 import com.mysema.query.jdoql.testdomain.Product;
 import com.mysema.query.jdoql.testdomain.QProduct;
 import com.mysema.query.jdoql.testdomain.QStore;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.ECollection;
 import com.mysema.query.types.EMap;
-import com.mysema.query.types.ENumber;
-import com.mysema.query.types.EString;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.ENumber;
+import com.mysema.query.types.expr.EString;
 
 public class JDOQLMethodsTest extends AbstractJDOTest {
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -27,11 +27,11 @@
 import com.mysema.query.SearchResults;
 import com.mysema.query.support.ProjectableQuery;
 import com.mysema.query.support.QueryMixin;
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.EConstructor;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.SubQuery;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.EConstructor;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.query.ListSubQuery;
 import com.mysema.util.JDBCUtil;

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLQuery.java
Patch:
@@ -10,9 +10,9 @@
 
 import com.mysema.query.Projectable;
 import com.mysema.query.Query;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.SubQuery;
+import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.query.ListSubQuery;
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLSerializer.java
Patch:
@@ -19,8 +19,6 @@
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.serialization.SerializerBase;
 import com.mysema.query.types.Constant;
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.EConstructor;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.ExprConst;
 import com.mysema.query.types.Operator;
@@ -30,6 +28,8 @@
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.custom.CSimple;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.EConstructor;
 import com.mysema.query.types.path.PEntity;
 
 /**

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLSubQuery.java
Patch:
@@ -9,7 +9,7 @@
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.support.DetachableQuery;
 import com.mysema.query.support.QueryMixin;
-import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
 
 /**

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLDeleteClause.java
Patch:
@@ -17,7 +17,7 @@
 import com.mysema.query.dml.DeleteClause;
 import com.mysema.query.sql.SQLSerializer;
 import com.mysema.query.sql.SQLTemplates;
-import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.util.JDBCUtil;
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLUpdateClause.java
Patch:
@@ -20,8 +20,8 @@
 import com.mysema.query.dml.UpdateClause;
 import com.mysema.query.sql.SQLSerializer;
 import com.mysema.query.sql.SQLTemplates;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Path;
+import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.util.JDBCUtil;
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/mssql/RowNumber.java
Patch:
@@ -10,12 +10,12 @@
 
 import javax.annotation.Nullable;
 
-import com.mysema.query.types.EComparable;
-import com.mysema.query.types.ENumber;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.custom.CNumber;
+import com.mysema.query.types.expr.EComparable;
+import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.path.PNumber;
 
 /**

File: querydsl-sql/src/main/java/com/mysema/query/sql/oracle/OracleGrammar.java
Patch:
@@ -7,9 +7,9 @@
 
 import java.util.Date;
 
-import com.mysema.query.types.EDate;
-import com.mysema.query.types.ENumber;
 import com.mysema.query.types.Expr;
+import com.mysema.query.types.expr.EDate;
+import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.path.PDate;
 import com.mysema.query.types.path.PNumber;
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/oracle/OracleQuery.java
Patch:
@@ -12,8 +12,8 @@
 import com.mysema.query.sql.AbstractSQLQuery;
 import com.mysema.query.sql.SQLSerializer;
 import com.mysema.query.sql.SQLTemplates;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
+import com.mysema.query.types.expr.EBoolean;
 
 /**
  * OracleQuery provides Oracle specific extensions to the base SQL query type

File: querydsl-sql/src/main/java/com/mysema/query/sql/oracle/OracleSerializer.java
Patch:
@@ -7,8 +7,8 @@
 
 import com.mysema.query.sql.SQLSerializer;
 import com.mysema.query.sql.SQLTemplates;
-import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
+import com.mysema.query.types.expr.EBoolean;
 
 /**
  * OracleSerializer extended the SqlSerializer to support Oracle specific

File: querydsl-sql/src/main/java/com/mysema/query/sql/oracle/SumOver.java
Patch:
@@ -11,10 +11,10 @@
 
 import javax.annotation.Nullable;
 
-import com.mysema.query.types.ENumber;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.custom.CNumber;
+import com.mysema.query.types.expr.ENumber;
 
 /**
  * SumOver is a fluent type for Oracle specific sum over / partition by / order

File: querydsl-sql/src/test/java/com/mysema/query/SelectBaseTest.java
Patch:
@@ -38,11 +38,11 @@
 import com.mysema.query.sql.SQLSubQuery;
 import com.mysema.query.sql.domain.IdName;
 import com.mysema.query.sql.domain.QIdName;
-import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.ENumber;
-import com.mysema.query.types.ENumberConst;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.SubQuery;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.ENumber;
+import com.mysema.query.types.expr.ENumberConst;
 import com.mysema.query.types.query.ObjectSubQuery;
 import com.mysema.testutil.ExcludeIn;
 import com.mysema.testutil.Label;

File: querydsl-sql/src/test/java/com/mysema/query/sql/SQLTemplatesTest.java
Patch:
@@ -10,10 +10,10 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.ENumberConst;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.custom.CSimple;
+import com.mysema.query.types.expr.ENumberConst;
 
 public class SQLTemplatesTest {
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/domain/QIdName.java
Patch:
@@ -5,8 +5,8 @@
  */
 package com.mysema.query.sql.domain;
 
-import com.mysema.query.types.EConstructor;
 import com.mysema.query.types.Expr;
+import com.mysema.query.types.expr.EConstructor;
 
 @SuppressWarnings("all")
 public class QIdName extends EConstructor<IdName> {

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColQuerySerializer.java
Patch:
@@ -15,11 +15,11 @@
 import com.mysema.query.types.Constant;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operator;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathType;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Template;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * ColQuerySerializer is a Serializer implementation for the Java language

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColQueryTemplates.java
Patch:
@@ -9,8 +9,8 @@
 import java.util.Date;
 
 import com.mysema.query.serialization.JavaTemplates;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.PathType;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * ColQueryTemplates extends JavaTemplates to add Java syntax specific operation

File: querydsl-core/src/main/java/com/mysema/query/functions/MathFunctions.java
Patch:
@@ -7,8 +7,8 @@
 
 import com.mysema.query.types.ENumber;
 import com.mysema.query.types.Expr;
+import com.mysema.query.types.Ops.MathOps;
 import com.mysema.query.types.operation.ONumber;
-import com.mysema.query.types.operation.Ops.MathOps;
 
 /**
  * MathFunctions provides additional math functions that are not available 

File: querydsl-core/src/main/java/com/mysema/query/serialization/JavaTemplates.java
Patch:
@@ -7,9 +7,9 @@
 
 import java.lang.reflect.Field;
 
+import com.mysema.query.types.OperatorImpl;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.Templates;
-import com.mysema.query.types.operation.OperatorImpl;
-import com.mysema.query.types.operation.Ops;
 
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/support/DetachableMixin.java
Patch:
@@ -14,7 +14,7 @@
 import com.mysema.query.types.EString;
 import com.mysema.query.types.ETime;
 import com.mysema.query.types.Expr;
-import com.mysema.query.types.operation.Ops;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.query.BooleanSubQuery;
 import com.mysema.query.types.query.ComparableSubQuery;
 import com.mysema.query.types.query.DateSubQuery;

File: querydsl-core/src/main/java/com/mysema/query/types/CaseBuilder.java
Patch:
@@ -13,7 +13,6 @@
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.OSimple;
 import com.mysema.query.types.operation.OString;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * CaseBuilder enables the construction of typesafe case-when-then-else 

File: querydsl-core/src/main/java/com/mysema/query/types/CaseForEqBuilder.java
Patch:
@@ -13,7 +13,6 @@
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.OSimple;
 import com.mysema.query.types.operation.OString;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * CaseForEqBuilder enables the construction of typesafe case-when-then-else constructs

File: querydsl-core/src/main/java/com/mysema/query/types/EBoolean.java
Patch:
@@ -8,7 +8,6 @@
 import javax.annotation.Nullable;
 
 import com.mysema.query.types.operation.OBoolean;
-import com.mysema.query.types.operation.Ops;
 
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/ECollectionBase.java
Patch:
@@ -11,7 +11,6 @@
 
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.ONumber;
-import com.mysema.query.types.operation.Ops;
 
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/EComparable.java
Patch:
@@ -6,7 +6,6 @@
 package com.mysema.query.types;
 
 import com.mysema.query.types.operation.OBoolean;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * EComparable extends EComparableBase to provide comparison methods. 

File: querydsl-core/src/main/java/com/mysema/query/types/EComparableBase.java
Patch:
@@ -9,7 +9,6 @@
 
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.OString;
-import com.mysema.query.types.operation.Ops;
 
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/EDate.java
Patch:
@@ -11,7 +11,6 @@
 
 import com.mysema.query.types.operation.ODate;
 import com.mysema.query.types.operation.ONumber;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * EDate represents Date expressions

File: querydsl-core/src/main/java/com/mysema/query/types/EDateTime.java
Patch:
@@ -11,7 +11,6 @@
 
 import com.mysema.query.types.operation.ODateTime;
 import com.mysema.query.types.operation.ONumber;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * EDateTime represents Date / Time expressions

File: querydsl-core/src/main/java/com/mysema/query/types/EMapBase.java
Patch:
@@ -11,7 +11,6 @@
 
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.ONumber;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * EMapBase is an abstract base class for EMap implementations

File: querydsl-core/src/main/java/com/mysema/query/types/ENumber.java
Patch:
@@ -10,10 +10,9 @@
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.types.Ops.MathOps;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.ONumber;
-import com.mysema.query.types.operation.Ops;
-import com.mysema.query.types.operation.Ops.MathOps;
 
 /**
  * ENumber represents a numeric expression

File: querydsl-core/src/main/java/com/mysema/query/types/EString.java
Patch:
@@ -12,7 +12,6 @@
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.OSimple;
 import com.mysema.query.types.operation.OString;
-import com.mysema.query.types.operation.Ops;
 
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/ETime.java
Patch:
@@ -11,7 +11,6 @@
 
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.OTime;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * ETime represents Time expressions

File: querydsl-core/src/main/java/com/mysema/query/types/Expr.java
Patch:
@@ -14,7 +14,6 @@
 import com.mysema.commons.lang.Assert;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.ONumber;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * Expr represents a general typed expression in a Query instance. The generic type parameter

File: querydsl-core/src/main/java/com/mysema/query/types/OperatorImpl.java
Patch:
@@ -3,15 +3,14 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.operation;
+package com.mysema.query.types;
 
 import static java.util.Collections.unmodifiableList;
 
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 
-import com.mysema.query.types.Operator;
 
 import net.jcip.annotations.Immutable;
 

File: querydsl-core/src/main/java/com/mysema/query/types/Ops.java
Patch:
@@ -3,16 +3,15 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.operation;
+package com.mysema.query.types;
 
 import static java.util.Collections.unmodifiableList;
 
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
 
-import com.mysema.query.types.ENumber;
-import com.mysema.query.types.Operator;
+import com.mysema.query.types.operation.ONumber;
 
 /**
  * Ops provides the operators for the fluent query grammar.

File: querydsl-core/src/main/java/com/mysema/query/types/Templates.java
Patch:
@@ -12,7 +12,6 @@
 
 import net.jcip.annotations.Immutable;
 
-import com.mysema.query.types.operation.Ops;
 
 /**
  * OperationPatterns provides operator patterns for query expression serialization

File: querydsl-core/src/main/java/com/mysema/query/types/ToStringVisitor.java
Patch:
@@ -114,7 +114,7 @@ public void visit(Path<?> p) {
     }
 
     @Override
-    public void visit(SubQuery expr) {
+    public void visit(SubQuery<?> expr) {
         toString = expr.getMetadata().toString();        
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OBoolean.java
Patch:
@@ -12,6 +12,7 @@
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.Visitor;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/path/PArray.java
Patch:
@@ -15,11 +15,11 @@
 import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.ENumber;
 import com.mysema.query.types.Expr;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.operation.ONumber;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * PArray represents an array typed path

File: querydsl-core/src/main/java/com/mysema/query/types/path/PEntity.java
Patch:
@@ -16,11 +16,11 @@
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.ExprConst;
 import com.mysema.query.types.ExprException;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.operation.OBoolean;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * PEntity represents entity paths

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathMixin.java
Patch:
@@ -12,11 +12,11 @@
 
 import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.PathType;
 import com.mysema.query.types.operation.OBoolean;
-import com.mysema.query.types.operation.Ops;
 import com.mysema.util.ReflectionUtils;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/query/BooleanSubQuery.java
Patch:
@@ -8,11 +8,11 @@
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Operator;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.operation.OBoolean;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * Single result subquery

File: querydsl-core/src/main/java/com/mysema/query/types/query/ComparableSubQuery.java
Patch:
@@ -9,11 +9,11 @@
 import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.EComparable;
 import com.mysema.query.types.Operator;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.operation.OComparable;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * Single result subquery

File: querydsl-core/src/main/java/com/mysema/query/types/query/DateSubQuery.java
Patch:
@@ -9,11 +9,11 @@
 import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.EDate;
 import com.mysema.query.types.Operator;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.operation.ODate;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * Single result subquery

File: querydsl-core/src/main/java/com/mysema/query/types/query/DateTimeSubQuery.java
Patch:
@@ -9,11 +9,11 @@
 import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.EDateTime;
 import com.mysema.query.types.Operator;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.operation.ODateTime;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * Single result subquery

File: querydsl-core/src/main/java/com/mysema/query/types/query/ListSubQuery.java
Patch:
@@ -12,11 +12,11 @@
 import com.mysema.query.types.ECollectionBase;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operator;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.operation.OSimple;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * List result subquery

File: querydsl-core/src/main/java/com/mysema/query/types/query/NumberSubQuery.java
Patch:
@@ -9,11 +9,11 @@
 import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.ENumber;
 import com.mysema.query.types.Operator;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.operation.ONumber;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * Single result subquery

File: querydsl-core/src/main/java/com/mysema/query/types/query/ObjectSubQuery.java
Patch:
@@ -9,11 +9,11 @@
 import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operator;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.operation.OSimple;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * Single result subquery

File: querydsl-core/src/main/java/com/mysema/query/types/query/StringSubQuery.java
Patch:
@@ -9,11 +9,11 @@
 import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.EString;
 import com.mysema.query.types.Operator;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.operation.OString;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * Single result subquery

File: querydsl-core/src/main/java/com/mysema/query/types/query/SubQueryMixin.java
Patch:
@@ -10,10 +10,10 @@
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.operation.OBoolean;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/types/query/TimeSubQuery.java
Patch:
@@ -9,11 +9,11 @@
 import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.ETime;
 import com.mysema.query.types.Operator;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.operation.OTime;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * Single result subquery

File: querydsl-core/src/test/java/com/mysema/query/CoverageTest.java
Patch:
@@ -22,7 +22,7 @@
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
-import com.mysema.query.types.operation.Ops;
+import com.mysema.query.types.Ops;
 
 /**
  * The Class CoverageTest.

File: querydsl-core/src/test/java/com/mysema/query/Projections.java
Patch:
@@ -23,7 +23,7 @@
 import com.mysema.query.types.EStringConst;
 import com.mysema.query.types.ETime;
 import com.mysema.query.types.Expr;
-import com.mysema.query.types.operation.Ops;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.path.PDate;
 import com.mysema.query.types.path.PDateTime;
 import com.mysema.query.types.path.PNumber;

File: querydsl-core/src/test/java/com/mysema/query/types/OpsTest.java
Patch:
@@ -14,7 +14,6 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.operation.Ops;
 
 
 /**

File: querydsl-core/src/test/java/com/mysema/query/types/StringTest.java
Patch:
@@ -17,8 +17,6 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.operation.OperatorImpl;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * StringTest provides.

File: querydsl-hibernate-search/src/main/java/com/mysema/query/search/LuceneSerializer.java
Patch:
@@ -24,8 +24,8 @@
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.path.PString;
 
 public class LuceneSerializer {

File: querydsl-hql/src/main/java/com/mysema/query/hql/AbstractSQLQuery.java
Patch:
@@ -10,8 +10,8 @@
 import com.mysema.query.support.QueryMixin;
 import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.ENumber;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.operation.ONumber;
-import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.path.PEntity;
 
 /**

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLGrammar.java
Patch:
@@ -9,10 +9,10 @@
 import com.mysema.query.types.EComparable;
 import com.mysema.query.types.ENumber;
 import com.mysema.query.types.Expr;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.operation.OComparable;
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.OSimple;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * HQLGrammar provides factory methods for HQL specific operations

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLQueryMixin.java
Patch:
@@ -14,9 +14,9 @@
 import com.mysema.query.support.QueryMixin;
 import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.operation.OSimple;
-import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PMap;
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLSerializer.java
Patch:
@@ -24,12 +24,12 @@
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathType;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.operation.OSimple;
-import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.path.PEntity;
 
 /**

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLTemplates.java
Patch:
@@ -10,9 +10,9 @@
 import java.util.List;
 
 import com.mysema.query.types.Operator;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.PathType;
 import com.mysema.query.types.Templates;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * HQLTemplates extends Templates to provide operator patterns for HQL

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/JDOQLSerializer.java
Patch:
@@ -26,11 +26,11 @@
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.operation.OSimple;
-import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.path.PEntity;
 
 /**

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/JDOQLSubQuery.java
Patch:
@@ -11,9 +11,9 @@
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.support.DetachableQuery;
 import com.mysema.query.types.Expr;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.operation.OSimple;
-import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.path.PEntity;
 
 /**

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/JDOQLTemplates.java
Patch:
@@ -6,7 +6,7 @@
 package com.mysema.query.jdoql;
 
 import com.mysema.query.serialization.JavaTemplates;
-import com.mysema.query.types.operation.Ops;
+import com.mysema.query.types.Ops;
 
 /**
  * JDOQLTemplates provides patterns for JDOQL serialization

File: querydsl-sql/src/main/java/com/mysema/query/sql/DerbyTemplates.java
Patch:
@@ -7,7 +7,7 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.QueryModifiers;
-import com.mysema.query.types.operation.Ops;
+import com.mysema.query.types.Ops;
 
 /**
  * DerbyTemplates is an SQL dialect for Derby

File: querydsl-sql/src/main/java/com/mysema/query/sql/HSQLDBTemplates.java
Patch:
@@ -5,7 +5,7 @@
  */
 package com.mysema.query.sql;
 
-import com.mysema.query.types.operation.Ops;
+import com.mysema.query.types.Ops;
 
 /**
  * HSQLDBTemplates is an SQL dialect for HSQLDB

File: querydsl-sql/src/main/java/com/mysema/query/sql/MySQLTemplates.java
Patch:
@@ -8,7 +8,7 @@
 import java.math.BigDecimal;
 import java.math.BigInteger;
 
-import com.mysema.query.types.operation.Ops;
+import com.mysema.query.types.Ops;
 
 /**
  * MySQLTemplates is an SQL dialect for MySQL

File: querydsl-sql/src/main/java/com/mysema/query/sql/OracleTemplates.java
Patch:
@@ -9,7 +9,7 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.QueryModifiers;
-import com.mysema.query.types.operation.Ops;
+import com.mysema.query.types.Ops;
 
 /**
  * OracleTemplates is an SQL dialect for Oracle

File: querydsl-sql/src/main/java/com/mysema/query/sql/PostgresTemplates.java
Patch:
@@ -5,7 +5,7 @@
  */
 package com.mysema.query.sql;
 
-import com.mysema.query.types.operation.Ops;
+import com.mysema.query.types.Ops;
 
 /**
  * PostgresTemplates is an SQL dialect for Postgres

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLSerializer.java
Patch:
@@ -24,12 +24,12 @@
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.ExprConst;
 import com.mysema.query.types.Operator;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.Order;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.path.PEntity;
 
 /**

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLServerTemplates.java
Patch:
@@ -8,8 +8,8 @@
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.QueryModifiers;
 import com.mysema.query.sql.mssql.RowNumber;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.OrderSpecifier;
-import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.path.PNumber;
 
 /**

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLTemplates.java
Patch:
@@ -16,9 +16,9 @@
 import com.mysema.query.QueryException;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.QueryModifiers;
+import com.mysema.query.types.Ops;
 import com.mysema.query.types.PathType;
 import com.mysema.query.types.Templates;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * SQLTemplates extended Templates to provided SQL specific extensions

File: querydsl-core/src/main/java/com/mysema/query/serialization/JavaTemplates.java
Patch:
@@ -7,7 +7,6 @@
 
 import java.lang.reflect.Field;
 
-import com.mysema.query.QueryException;
 import com.mysema.query.types.Templates;
 import com.mysema.query.types.operation.OperatorImpl;
 import com.mysema.query.types.operation.Ops;
@@ -99,7 +98,7 @@ public JavaTemplates() {
                 add(op, "Math." + getTemplate(op));
             }
         } catch (IllegalAccessException e) {
-            throw new QueryException(e.getMessage(), e);
+            throw new RuntimeException(e.getMessage(), e);
         }
         add(Ops.MOD, "{0} % {0}");
         

File: querydsl-core/src/main/java/com/mysema/query/support/DetachableAdapter.java
Patch:
@@ -5,7 +5,6 @@
  */
 package com.mysema.query.support;
 
-import com.mysema.query.Detachable;
 import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.EComparable;
 import com.mysema.query.types.EDate;
@@ -18,6 +17,7 @@
 import com.mysema.query.types.query.ComparableSubQuery;
 import com.mysema.query.types.query.DateSubQuery;
 import com.mysema.query.types.query.DateTimeSubQuery;
+import com.mysema.query.types.query.Detachable;
 import com.mysema.query.types.query.ListSubQuery;
 import com.mysema.query.types.query.NumberSubQuery;
 import com.mysema.query.types.query.ObjectSubQuery;

File: querydsl-core/src/main/java/com/mysema/query/support/DetachableMixin.java
Patch:
@@ -6,7 +6,6 @@
 package com.mysema.query.support;
 
 import com.mysema.commons.lang.Assert;
-import com.mysema.query.Detachable;
 import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.EComparable;
 import com.mysema.query.types.EDate;
@@ -20,6 +19,7 @@
 import com.mysema.query.types.query.ComparableSubQuery;
 import com.mysema.query.types.query.DateSubQuery;
 import com.mysema.query.types.query.DateTimeSubQuery;
+import com.mysema.query.types.query.Detachable;
 import com.mysema.query.types.query.ListSubQuery;
 import com.mysema.query.types.query.NumberSubQuery;
 import com.mysema.query.types.query.ObjectSubQuery;

File: querydsl-core/src/main/java/com/mysema/query/support/DetachableQuery.java
Patch:
@@ -5,7 +5,6 @@
  */
 package com.mysema.query.support;
 
-import com.mysema.query.Detachable;
 import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.EComparable;
 import com.mysema.query.types.EDate;
@@ -18,6 +17,7 @@
 import com.mysema.query.types.query.ComparableSubQuery;
 import com.mysema.query.types.query.DateSubQuery;
 import com.mysema.query.types.query.DateTimeSubQuery;
+import com.mysema.query.types.query.Detachable;
 import com.mysema.query.types.query.ListSubQuery;
 import com.mysema.query.types.query.NumberSubQuery;
 import com.mysema.query.types.query.ObjectSubQuery;

File: querydsl-core/src/main/java/com/mysema/util/JDBCUtil.java
Patch:
@@ -11,8 +11,6 @@
 
 import org.apache.commons.lang.ClassUtils;
 
-import com.mysema.query.QueryException;
-
 /**
  * @author tiwe
  *

File: querydsl-apt/src/test/java/com/mysema/query/domain/ExprTest.java
Patch:
@@ -16,11 +16,11 @@
 import org.junit.Test;
 
 import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.EBooleanConst;
+import com.mysema.query.types.ENumberConst;
 import com.mysema.query.types.EString;
+import com.mysema.query.types.EStringConst;
 import com.mysema.query.types.Expr;
-import com.mysema.query.types.constant.EBooleanConst;
-import com.mysema.query.types.constant.ENumberConst;
-import com.mysema.query.types.constant.EStringConst;
 
 public class ExprTest {
     

File: querydsl-apt/src/test/java/com/mysema/query/domain/PathMetadataTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.Test;
 
 import com.mysema.query.types.EString;
-import com.mysema.query.types.constant.EStringConst;
+import com.mysema.query.types.EStringConst;
 
 public class PathMetadataTest {
     

File: querydsl-apt/src/test/java/com/mysema/query/domain/QueryExtensions5Test.java
Patch:
@@ -12,7 +12,7 @@
 import com.mysema.query.annotations.QueryEntity;
 import com.mysema.query.annotations.QueryExtensions;
 import com.mysema.query.annotations.QueryMethod;
-import com.mysema.query.types.constant.EStringConst;
+import com.mysema.query.types.EStringConst;
 
 public class QueryExtensions5Test {
     

File: querydsl-apt/src/test/java/com/mysema/query/domain/QueryProjectionTest.java
Patch:
@@ -16,9 +16,9 @@
 import com.mysema.query.annotations.QueryEntity;
 import com.mysema.query.annotations.QueryProjection;
 import com.mysema.query.annotations.QueryType;
-import com.mysema.query.types.constant.ENumberConst;
-import com.mysema.query.types.constant.EStringConst;
-import com.mysema.query.types.constant.ExprConst;
+import com.mysema.query.types.ENumberConst;
+import com.mysema.query.types.EStringConst;
+import com.mysema.query.types.ExprConst;
 
 public class QueryProjectionTest {
 

File: querydsl-collections/src/test/java/com/mysema/query/collections/MathFunctionTest.java
Patch:
@@ -13,8 +13,8 @@
 import com.mysema.query.animal.Cat;
 import com.mysema.query.functions.MathFunctions;
 import com.mysema.query.types.ENumber;
+import com.mysema.query.types.ENumberConst;
 import com.mysema.query.types.Expr;
-import com.mysema.query.types.constant.ENumberConst;
 
 /**
  * MathFunctionTest provides

File: querydsl-core/src/main/java/com/mysema/query/types/CaseBuilder.java
Patch:
@@ -10,9 +10,6 @@
 
 import javax.annotation.Nullable;
 
-import com.mysema.query.types.constant.ENumberConst;
-import com.mysema.query.types.constant.EStringConst;
-import com.mysema.query.types.constant.ExprConst;
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.OSimple;
 import com.mysema.query.types.operation.OString;

File: querydsl-core/src/main/java/com/mysema/query/types/CaseForEqBuilder.java
Patch:
@@ -10,9 +10,6 @@
 
 import javax.annotation.Nullable;
 
-import com.mysema.query.types.constant.ENumberConst;
-import com.mysema.query.types.constant.EStringConst;
-import com.mysema.query.types.constant.ExprConst;
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.OSimple;
 import com.mysema.query.types.operation.OString;

File: querydsl-core/src/main/java/com/mysema/query/types/ECollectionBase.java
Patch:
@@ -9,7 +9,6 @@
 
 import javax.annotation.Nullable;
 
-import com.mysema.query.types.constant.ExprConst;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.Ops;

File: querydsl-core/src/main/java/com/mysema/query/types/EComparable.java
Patch:
@@ -5,7 +5,6 @@
  */
 package com.mysema.query.types;
 
-import com.mysema.query.types.constant.ExprConst;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
 

File: querydsl-core/src/main/java/com/mysema/query/types/EComparableBase.java
Patch:
@@ -7,7 +7,6 @@
 
 import javax.annotation.Nullable;
 
-import com.mysema.query.types.constant.ExprConst;
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.OString;
 import com.mysema.query.types.operation.Ops;

File: querydsl-core/src/main/java/com/mysema/query/types/EMapBase.java
Patch:
@@ -9,7 +9,6 @@
 
 import javax.annotation.Nullable;
 
-import com.mysema.query.types.constant.ExprConst;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.Ops;

File: querydsl-core/src/main/java/com/mysema/query/types/ENumber.java
Patch:
@@ -10,8 +10,6 @@
 
 import javax.annotation.Nullable;
 
-import com.mysema.query.types.constant.ENumberConst;
-import com.mysema.query.types.constant.ExprConst;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.Ops;

File: querydsl-core/src/main/java/com/mysema/query/types/EString.java
Patch:
@@ -7,8 +7,6 @@
 
 import javax.annotation.Nullable;
 
-import com.mysema.query.types.constant.ENumberConst;
-import com.mysema.query.types.constant.EStringConst;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.OComparable;
 import com.mysema.query.types.operation.ONumber;

File: querydsl-core/src/main/java/com/mysema/query/types/EStringEscape.java
Patch:
@@ -5,7 +5,6 @@
  */
 package com.mysema.query.types;
 
-import com.mysema.query.types.constant.EStringConst;
 
 // TODO : move somewhere else
 public final class EStringEscape {

File: querydsl-core/src/main/java/com/mysema/query/types/Expr.java
Patch:
@@ -12,7 +12,6 @@
 import javax.annotation.Nullable;
 
 import com.mysema.commons.lang.Assert;
-import com.mysema.query.types.constant.ExprConst;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.Ops;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PEntity.java
Patch:
@@ -15,10 +15,10 @@
 import com.mysema.query.QueryException;
 import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Expr;
+import com.mysema.query.types.ExprConst;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.constant.ExprConst;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathMetadataFactory.java
Patch:
@@ -8,13 +8,13 @@
 import javax.annotation.Nonnegative;
 
 import com.mysema.commons.lang.Assert;
+import com.mysema.query.types.ENumberConst;
+import com.mysema.query.types.EStringConst;
 import com.mysema.query.types.Expr;
+import com.mysema.query.types.ExprConst;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.PathType;
-import com.mysema.query.types.constant.ENumberConst;
-import com.mysema.query.types.constant.EStringConst;
-import com.mysema.query.types.constant.ExprConst;
 
 /**
  * @author tiwe

File: querydsl-core/src/test/java/com/mysema/query/BooleanBuilderTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.junit.Test;
 
 import com.mysema.query.types.EBoolean;
-import com.mysema.query.types.constant.EBooleanConst;
+import com.mysema.query.types.EBooleanConst;
 
 
 /**

File: querydsl-core/src/test/java/com/mysema/query/Projections.java
Patch:
@@ -18,11 +18,11 @@
 import com.mysema.query.types.EList;
 import com.mysema.query.types.EMap;
 import com.mysema.query.types.ENumber;
+import com.mysema.query.types.ENumberConst;
 import com.mysema.query.types.EString;
+import com.mysema.query.types.EStringConst;
 import com.mysema.query.types.ETime;
 import com.mysema.query.types.Expr;
-import com.mysema.query.types.constant.ENumberConst;
-import com.mysema.query.types.constant.EStringConst;
 import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.path.PDate;
 import com.mysema.query.types.path.PDateTime;

File: querydsl-core/src/test/java/com/mysema/query/types/EConstructorTest.java
Patch:
@@ -14,8 +14,6 @@
 import com.mysema.query.types.EConstructor;
 import com.mysema.query.types.ENumber;
 import com.mysema.query.types.EString;
-import com.mysema.query.types.constant.ENumberConst;
-import com.mysema.query.types.constant.EStringConst;
 
 public class EConstructorTest {
     

File: querydsl-core/src/test/java/com/mysema/query/types/EDateConstTest.java
Patch:
@@ -13,7 +13,6 @@
 import org.junit.Test;
 
 import com.mysema.query.types.EDate;
-import com.mysema.query.types.constant.EDateConst;
 
 public class EDateConstTest {
     

File: querydsl-core/src/test/java/com/mysema/query/types/EDateTimeConstTest.java
Patch:
@@ -13,7 +13,6 @@
 import org.junit.Test;
 
 import com.mysema.query.types.EDateTime;
-import com.mysema.query.types.constant.EDateTimeConst;
 
 public class EDateTimeConstTest {
     

File: querydsl-core/src/test/java/com/mysema/query/types/EStringConstTest.java
Patch:
@@ -10,7 +10,6 @@
 import org.junit.Test;
 
 import com.mysema.query.types.EString;
-import com.mysema.query.types.constant.EStringConst;
 
 
 public class EStringConstTest {

File: querydsl-core/src/test/java/com/mysema/query/types/ETimeConstTest.java
Patch:
@@ -13,7 +13,6 @@
 import org.junit.Test;
 
 import com.mysema.query.types.ETime;
-import com.mysema.query.types.constant.ETimeConst;
 
 public class ETimeConstTest {
     

File: querydsl-core/src/test/java/com/mysema/query/types/custom/CustomTest.java
Patch:
@@ -13,10 +13,10 @@
 import org.junit.Test;
 
 import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.EBooleanConst;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
-import com.mysema.query.types.constant.EBooleanConst;
 
 public class CustomTest {
     

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLSerializer.java
Patch:
@@ -20,14 +20,14 @@
 import com.mysema.query.serialization.SerializerBase;
 import com.mysema.query.types.Constant;
 import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.EStringConst;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathType;
 import com.mysema.query.types.SubQuery;
-import com.mysema.query.types.constant.EStringConst;
 import com.mysema.query.types.operation.OSimple;
 import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.path.PEntity;

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/JDOQLSerializer.java
Patch:
@@ -22,13 +22,13 @@
 import com.mysema.query.serialization.SerializerBase;
 import com.mysema.query.types.Constant;
 import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.EStringConst;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
-import com.mysema.query.types.constant.EStringConst;
 import com.mysema.query.types.operation.OSimple;
 import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.path.PEntity;

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLSerializer.java
Patch:
@@ -22,12 +22,12 @@
 import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.EConstructor;
 import com.mysema.query.types.Expr;
+import com.mysema.query.types.ExprConst;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Order;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
-import com.mysema.query.types.constant.ExprConst;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.path.PEntity;

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLInsertClause.java
Patch:
@@ -20,9 +20,9 @@
 import com.mysema.query.sql.SQLSerializer;
 import com.mysema.query.sql.SQLTemplates;
 import com.mysema.query.types.Expr;
+import com.mysema.query.types.ExprConst;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
-import com.mysema.query.types.constant.ExprConst;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.util.JDBCUtil;
 

File: querydsl-sql/src/test/java/com/mysema/query/SelectBaseTest.java
Patch:
@@ -40,9 +40,9 @@
 import com.mysema.query.sql.domain.QIdName;
 import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.ENumber;
+import com.mysema.query.types.ENumberConst;
 import com.mysema.query.types.Expr;
 import com.mysema.query.types.SubQuery;
-import com.mysema.query.types.constant.ENumberConst;
 import com.mysema.query.types.query.ObjectSubQuery;
 import com.mysema.testutil.ExcludeIn;
 import com.mysema.testutil.Label;

File: querydsl-sql/src/test/java/com/mysema/query/sql/SQLTemplatesTest.java
Patch:
@@ -10,9 +10,9 @@
 
 import org.junit.Test;
 
+import com.mysema.query.types.ENumberConst;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
-import com.mysema.query.types.constant.ENumberConst;
 import com.mysema.query.types.custom.CSimple;
 
 public class SQLTemplatesTest {

File: querydsl-apt/src/test/java/com/mysema/query/domain/PathMetadataTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import com.mysema.query.types.expr.EString;
-import com.mysema.query.types.expr.EStringConst;
+import com.mysema.query.types.EString;
+import com.mysema.query.types.constant.EStringConst;
 
 public class PathMetadataTest {
     

File: querydsl-apt/src/test/java/com/mysema/query/domain/QueryExtensions5Test.java
Patch:
@@ -12,7 +12,7 @@
 import com.mysema.query.annotations.QueryEntity;
 import com.mysema.query.annotations.QueryExtensions;
 import com.mysema.query.annotations.QueryMethod;
-import com.mysema.query.types.expr.EStringConst;
+import com.mysema.query.types.constant.EStringConst;
 
 public class QueryExtensions5Test {
     

File: querydsl-apt/src/test/java/com/mysema/query/domain/QueryProjectionTest.java
Patch:
@@ -16,9 +16,9 @@
 import com.mysema.query.annotations.QueryEntity;
 import com.mysema.query.annotations.QueryProjection;
 import com.mysema.query.annotations.QueryType;
-import com.mysema.query.types.expr.ENumberConst;
-import com.mysema.query.types.expr.EStringConst;
-import com.mysema.query.types.expr.ExprConst;
+import com.mysema.query.types.constant.ENumberConst;
+import com.mysema.query.types.constant.EStringConst;
+import com.mysema.query.types.constant.ExprConst;
 
 public class QueryProjectionTest {
 

File: querydsl-collections/src/main/java/com/mysema/query/collections/AbstractColQuery.java
Patch:
@@ -29,12 +29,12 @@
 import com.mysema.query.SearchResults;
 import com.mysema.query.support.ProjectableQuery;
 import com.mysema.query.support.QueryMixin;
+import com.mysema.query.types.EArrayConstructor;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Order;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.expr.EArrayConstructor;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.util.MultiIterator;
 
 /**

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColDeleteClause.java
Patch:
@@ -3,8 +3,8 @@
 import java.util.Collection;
 
 import com.mysema.query.dml.DeleteClause;
+import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.expr.EBoolean;
 
 /**
  * @author tiwe

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColQuerySerializer.java
Patch:
@@ -13,12 +13,12 @@
 
 import com.mysema.query.serialization.SerializerBase;
 import com.mysema.query.types.Constant;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathType;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Template;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.Ops;
 
 /**

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColUpdateClause.java
Patch:
@@ -1,8 +1,8 @@
 package com.mysema.query.collections;
 
 import com.mysema.query.dml.UpdateClause;
+import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.expr.EBoolean;
 
 /**
  * @author tiwe

File: querydsl-collections/src/main/java/com/mysema/query/collections/EvaluatorFactory.java
Patch:
@@ -16,7 +16,7 @@
 import org.slf4j.LoggerFactory;
 
 import com.mysema.query.QueryException;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.Expr;
 
 /**
  * @author tiwe

File: querydsl-collections/src/main/java/com/mysema/query/collections/IteratorFactory.java
Patch:
@@ -12,8 +12,8 @@
 
 import org.apache.commons.collections15.IteratorUtils;
 
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 
 /**
  * IteratorFactory provides Iterator utilities

File: querydsl-collections/src/test/java/com/mysema/query/ColQueryStandardTest.java
Patch:
@@ -16,8 +16,8 @@
 import com.mysema.query.animal.Cat;
 import com.mysema.query.animal.QCat;
 import com.mysema.query.collections.MiniApi;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 
 public class ColQueryStandardTest {
     

File: querydsl-collections/src/test/java/com/mysema/query/collections/AbstractQueryTest.java
Patch:
@@ -15,7 +15,7 @@
 import com.mysema.query.animal.Cat;
 import com.mysema.query.animal.QCat;
 import com.mysema.query.collections.ColQueryImpl;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.Expr;
 
 /**
  * AbstractQueryTest provides

File: querydsl-collections/src/test/java/com/mysema/query/collections/ColQueryTest.java
Patch:
@@ -16,8 +16,8 @@
 import org.junit.Test;
 
 import com.mysema.query.animal.Cat;
-import com.mysema.query.types.expr.ENumber;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.ENumber;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.path.PString;
 
 /**

File: querydsl-collections/src/test/java/com/mysema/query/collections/MathFunctionTest.java
Patch:
@@ -12,9 +12,9 @@
 
 import com.mysema.query.animal.Cat;
 import com.mysema.query.functions.MathFunctions;
-import com.mysema.query.types.expr.ENumber;
-import com.mysema.query.types.expr.ENumberConst;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.ENumber;
+import com.mysema.query.types.Expr;
+import com.mysema.query.types.constant.ENumberConst;
 
 /**
  * MathFunctionTest provides

File: querydsl-core/src/main/java/com/mysema/query/BooleanBuilder.java
Patch:
@@ -7,8 +7,8 @@
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EBoolean;
 
 /**
  * BooleanBuilder is a cascading builder for Boolean expressions.

File: querydsl-core/src/main/java/com/mysema/query/DefaultQueryMetadata.java
Patch:
@@ -14,10 +14,10 @@
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
 
 import edu.umd.cs.findbugs.annotations.SuppressWarnings;
 

File: querydsl-core/src/main/java/com/mysema/query/JoinExpression.java
Patch:
@@ -11,8 +11,8 @@
 import org.apache.commons.lang.builder.EqualsBuilder;
 
 import com.mysema.commons.lang.Assert;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 
 /**
  * JoinExpression is a join element in a Query instance. 

File: querydsl-core/src/main/java/com/mysema/query/Projectable.java
Patch:
@@ -12,7 +12,7 @@
 import javax.annotation.Nullable;
 
 import com.mysema.commons.lang.CloseableIterator;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.Expr;
 
 /**
  * Projectable defines default projection methods for Query implementations.

File: querydsl-core/src/main/java/com/mysema/query/Query.java
Patch:
@@ -7,9 +7,9 @@
 
 import javax.annotation.Nonnegative;
 
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.OrderSpecifier;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * Query provides a query interface of the fluent query DSL.

File: querydsl-core/src/main/java/com/mysema/query/QueryMetadata.java
Patch:
@@ -10,9 +10,9 @@
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.OrderSpecifier;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * QueryMetadata defines query metadata such as query sources, filtering

File: querydsl-core/src/main/java/com/mysema/query/SimpleQuery.java
Patch:
@@ -7,8 +7,8 @@
 
 import javax.annotation.Nonnegative;
 
+import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.OrderSpecifier;
-import com.mysema.query.types.expr.EBoolean;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/alias/Alias.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.apache.commons.lang.StringUtils;
 
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.path.PBoolean;
 import com.mysema.query.types.path.PCollection;
 import com.mysema.query.types.path.PComparable;

File: querydsl-core/src/main/java/com/mysema/query/alias/AliasFactory.java
Patch:
@@ -17,7 +17,7 @@
 import org.apache.commons.collections15.map.LazyMap;
 
 import com.mysema.commons.lang.Pair;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.path.PEntity;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/alias/PropertyAccessInvocationHandler.java
Patch:
@@ -26,11 +26,11 @@
 
 import org.apache.commons.lang.StringUtils;
 
+import com.mysema.query.types.ECollection;
+import com.mysema.query.types.EMap;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
-import com.mysema.query.types.expr.ECollection;
-import com.mysema.query.types.expr.EMap;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PBoolean;
 import com.mysema.query.types.path.PCollection;
 import com.mysema.query.types.path.PComparable;

File: querydsl-core/src/main/java/com/mysema/query/codegen/DTOSerializer.java
Patch:
@@ -12,7 +12,7 @@
 import org.apache.commons.collections15.Transformer;
 
 import com.mysema.commons.lang.Assert;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.Expr;
 import com.mysema.util.CodeWriter;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/codegen/EmbeddableSerializer.java
Patch:
@@ -7,9 +7,9 @@
 
 import java.io.IOException;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PSimple;
 import com.mysema.util.CodeWriter;
 

File: querydsl-core/src/main/java/com/mysema/query/codegen/EntitySerializer.java
Patch:
@@ -31,10 +31,10 @@
 import org.apache.commons.lang.StringEscapeUtils;
 
 import com.mysema.commons.lang.Assert;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PComparable;
 import com.mysema.query.types.path.PDate;
 import com.mysema.query.types.path.PDateTime;

File: querydsl-core/src/main/java/com/mysema/query/codegen/SupertypeSerializer.java
Patch:
@@ -9,9 +9,9 @@
 
 import net.jcip.annotations.Immutable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PSimple;
 import com.mysema.util.CodeWriter;
 

File: querydsl-core/src/main/java/com/mysema/query/dml/DeleteClause.java
Patch:
@@ -5,7 +5,7 @@
  */
 package com.mysema.query.dml;
 
-import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.EBoolean;
 
 /**
  * DeleteClause defines a generic extensible interface for Delete clauses

File: querydsl-core/src/main/java/com/mysema/query/dml/UpdateClause.java
Patch:
@@ -5,8 +5,8 @@
  */
 package com.mysema.query.dml;
 
+import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.expr.EBoolean;
 
 /**
  * UpdateClause defines a generic extensible interface for Update clauses

File: querydsl-core/src/main/java/com/mysema/query/functions/MathFunctions.java
Patch:
@@ -5,8 +5,8 @@
  */
 package com.mysema.query.functions;
 
-import com.mysema.query.types.expr.ENumber;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.ENumber;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.Ops.MathOps;
 

File: querydsl-core/src/main/java/com/mysema/query/serialization/SerializerBase.java
Patch:
@@ -14,16 +14,16 @@
 import com.mysema.query.BooleanBuilder;
 import com.mysema.query.types.Constant;
 import com.mysema.query.types.Custom;
+import com.mysema.query.types.EArrayConstructor;
+import com.mysema.query.types.EConstructor;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathType;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.Templates;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EArrayConstructor;
-import com.mysema.query.types.expr.EConstructor;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * SerializerBase is a stub for Serializer implementations

File: querydsl-core/src/main/java/com/mysema/query/support/ProjectableAdapter.java
Patch:
@@ -12,7 +12,7 @@
 import com.mysema.commons.lang.CloseableIterator;
 import com.mysema.query.Projectable;
 import com.mysema.query.SearchResults;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.Expr;
 
 /**
  * ProjectableAdapter is an adapter implementation for the Projectable interface

File: querydsl-core/src/main/java/com/mysema/query/support/ProjectableQuery.java
Patch:
@@ -15,7 +15,7 @@
 import com.mysema.commons.lang.CloseableIterator;
 import com.mysema.query.Projectable;
 import com.mysema.query.SearchResults;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.Expr;
 
 /**
  * ProjectableQuery extends the QueryBase class to provide default

File: querydsl-core/src/main/java/com/mysema/query/support/QueryBase.java
Patch:
@@ -6,9 +6,9 @@
 package com.mysema.query.support;
 
 import com.mysema.query.QueryModifiers;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.OrderSpecifier;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * QueryBase provides a stub for Query implementations

File: querydsl-core/src/main/java/com/mysema/query/support/QueryMixin.java
Patch:
@@ -10,9 +10,9 @@
 import com.mysema.query.JoinType;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.QueryModifiers;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.OrderSpecifier;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/support/SimpleQueryAdapter.java
Patch:
@@ -13,9 +13,9 @@
 import com.mysema.query.SearchResults;
 import com.mysema.query.SimpleProjectable;
 import com.mysema.query.SimpleQuery;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.OrderSpecifier;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
 
 import edu.umd.cs.findbugs.annotations.SuppressWarnings;
 

File: querydsl-core/src/main/java/com/mysema/query/types/Converter.java
Patch:
@@ -5,8 +5,6 @@
  */
 package com.mysema.query.types;
 
-import com.mysema.query.types.expr.EString;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/types/Custom.java
Patch:
@@ -7,7 +7,6 @@
 
 import java.util.List;
 
-import com.mysema.query.types.expr.Expr;
 
 /**
  * Custom provides base types for custom expresions with integrated

File: querydsl-core/src/main/java/com/mysema/query/types/EArray.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.expr;
+package com.mysema.query.types;
 
 import javax.annotation.Nonnegative;
 

File: querydsl-core/src/main/java/com/mysema/query/types/EArrayConstructor.java
Patch:
@@ -3,10 +3,9 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.expr;
+package com.mysema.query.types;
 
 import com.mysema.commons.lang.Assert;
-import com.mysema.query.types.Visitor;
 
 /**
  * EArrayConstructor extends EConstructor to represent array initializers

File: querydsl-core/src/main/java/com/mysema/query/types/EBoolean.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.expr;
+package com.mysema.query.types;
 
 import javax.annotation.Nullable;
 

File: querydsl-core/src/main/java/com/mysema/query/types/ECollection.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.expr;
+package com.mysema.query.types;
 
 import java.util.Collection;
 

File: querydsl-core/src/main/java/com/mysema/query/types/ECollectionBase.java
Patch:
@@ -3,12 +3,13 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.expr;
+package com.mysema.query.types;
 
 import java.util.Collection;
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.types.constant.ExprConst;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.Ops;

File: querydsl-core/src/main/java/com/mysema/query/types/EComparable.java
Patch:
@@ -3,8 +3,9 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.expr;
+package com.mysema.query.types;
 
+import com.mysema.query.types.constant.ExprConst;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
 

File: querydsl-core/src/main/java/com/mysema/query/types/EComparableBase.java
Patch:
@@ -3,12 +3,11 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.expr;
+package com.mysema.query.types;
 
 import javax.annotation.Nullable;
 
-import com.mysema.query.types.Order;
-import com.mysema.query.types.OrderSpecifier;
+import com.mysema.query.types.constant.ExprConst;
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.OString;
 import com.mysema.query.types.operation.Ops;

File: querydsl-core/src/main/java/com/mysema/query/types/EConstructor.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.expr;
+package com.mysema.query.types;
 
 import java.lang.reflect.Constructor;
 import java.util.Arrays;
@@ -13,7 +13,6 @@
 import org.apache.commons.lang.ClassUtils;
 
 import com.mysema.query.QueryException;
-import com.mysema.query.types.Visitor;
 
 /**
  * EConstructor represents a constructor invocation

File: querydsl-core/src/main/java/com/mysema/query/types/EDate.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.expr;
+package com.mysema.query.types;
 
 import java.util.Date;
 

File: querydsl-core/src/main/java/com/mysema/query/types/EDateOrTime.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.expr;
+package com.mysema.query.types;
 
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/EDateTime.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.expr;
+package com.mysema.query.types;
 
 import java.util.Date;
 

File: querydsl-core/src/main/java/com/mysema/query/types/EList.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.expr;
+package com.mysema.query.types;
 
 import java.util.List;
 

File: querydsl-core/src/main/java/com/mysema/query/types/EMap.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.expr;
+package com.mysema.query.types;
 
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/EMapBase.java
Patch:
@@ -3,12 +3,13 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.expr;
+package com.mysema.query.types;
 
 import java.util.Map;
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.types.constant.ExprConst;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.Ops;

File: querydsl-core/src/main/java/com/mysema/query/types/ENumber.java
Patch:
@@ -3,14 +3,15 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.expr;
+package com.mysema.query.types;
 
 import java.math.BigDecimal;
 import java.math.BigInteger;
 
 import javax.annotation.Nullable;
 
-import com.mysema.query.types.Operator;
+import com.mysema.query.types.constant.ENumberConst;
+import com.mysema.query.types.constant.ExprConst;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.Ops;

File: querydsl-core/src/main/java/com/mysema/query/types/EString.java
Patch:
@@ -3,10 +3,12 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.expr;
+package com.mysema.query.types;
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.types.constant.ENumberConst;
+import com.mysema.query.types.constant.EStringConst;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.OComparable;
 import com.mysema.query.types.operation.ONumber;

File: querydsl-core/src/main/java/com/mysema/query/types/EStringEscape.java
Patch:
@@ -5,8 +5,7 @@
  */
 package com.mysema.query.types;
 
-import com.mysema.query.types.expr.EString;
-import com.mysema.query.types.expr.EStringConst;
+import com.mysema.query.types.constant.EStringConst;
 
 // TODO : move somewhere else
 public final class EStringEscape {

File: querydsl-core/src/main/java/com/mysema/query/types/ETime.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.expr;
+package com.mysema.query.types;
 
 import java.util.Date;
 

File: querydsl-core/src/main/java/com/mysema/query/types/Operation.java
Patch:
@@ -7,7 +7,6 @@
 
 import java.util.List;
 
-import com.mysema.query.types.expr.Expr;
 
 /**
  * Operation represents an operation with operator and arguments

File: querydsl-core/src/main/java/com/mysema/query/types/OrderSpecifier.java
Patch:
@@ -10,7 +10,6 @@
 import net.jcip.annotations.Immutable;
 
 import com.mysema.commons.lang.Assert;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * OrderSpecifier represents an order-by-element in a Query instance

File: querydsl-core/src/main/java/com/mysema/query/types/Path.java
Patch:
@@ -7,8 +7,6 @@
 
 import java.lang.reflect.AnnotatedElement;
 
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * Path represents a path expression

File: querydsl-core/src/main/java/com/mysema/query/types/PathMetadata.java
Patch:
@@ -14,7 +14,6 @@
 import org.apache.commons.lang.builder.EqualsBuilder;
 import org.apache.commons.lang.builder.HashCodeBuilder;
 
-import com.mysema.query.types.expr.Expr;
 
 /**
  * PathMetadata provides metadata for Path expressions.

File: querydsl-core/src/main/java/com/mysema/query/types/SubQuery.java
Patch:
@@ -6,8 +6,6 @@
 package com.mysema.query.types;
 
 import com.mysema.query.QueryMetadata;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * 

File: querydsl-core/src/main/java/com/mysema/query/types/Template.java
Patch:
@@ -12,7 +12,6 @@
 
 import net.jcip.annotations.Immutable;
 
-import com.mysema.query.types.expr.Expr;
 
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/ToStringVisitor.java
Patch:
@@ -5,9 +5,6 @@
  */
 package com.mysema.query.types;
 
-import com.mysema.query.types.expr.EArrayConstructor;
-import com.mysema.query.types.expr.EConstructor;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * ToStringVisitor is used for toString() serialization in Expr implementations.

File: querydsl-core/src/main/java/com/mysema/query/types/Visitor.java
Patch:
@@ -5,8 +5,6 @@
  */
 package com.mysema.query.types;
 
-import com.mysema.query.types.expr.EArrayConstructor;
-import com.mysema.query.types.expr.EConstructor;
 
 /**
  * Visitor provides a dispatching Visitor for Expr instances.

File: querydsl-core/src/main/java/com/mysema/query/types/constant/EBooleanConst.java
Patch:
@@ -3,9 +3,10 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.expr;
+package com.mysema.query.types.constant;
 
 import com.mysema.query.types.Constant;
+import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Visitor;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/constant/EDateConst.java
Patch:
@@ -3,11 +3,13 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.expr;
+package com.mysema.query.types.constant;
 
 import java.util.Calendar;
 
 import com.mysema.query.types.Constant;
+import com.mysema.query.types.EDate;
+import com.mysema.query.types.ENumber;
 import com.mysema.query.types.Visitor;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/constant/EDateTimeConst.java
Patch:
@@ -3,9 +3,11 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.expr;
+package com.mysema.query.types.constant;
 
 import com.mysema.query.types.Constant;
+import com.mysema.query.types.EDateTime;
+import com.mysema.query.types.ENumber;
 import com.mysema.query.types.Visitor;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/constant/ETimeConst.java
Patch:
@@ -3,11 +3,13 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.expr;
+package com.mysema.query.types.constant;
 
 import java.util.Calendar;
 
 import com.mysema.query.types.Constant;
+import com.mysema.query.types.ENumber;
+import com.mysema.query.types.ETime;
 import com.mysema.query.types.Visitor;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/constant/ExprConst.java
Patch:
@@ -3,10 +3,12 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.expr;
+package com.mysema.query.types.constant;
 
 import com.mysema.commons.lang.Assert;
 import com.mysema.query.types.Constant;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Visitor;
 
 

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CBoolean.java
Patch:
@@ -9,11 +9,11 @@
 import java.util.List;
 
 import com.mysema.query.types.Custom;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * CBoolean is a custom boolean expression

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CComparable.java
Patch:
@@ -9,11 +9,11 @@
 import java.util.List;
 
 import com.mysema.query.types.Custom;
+import com.mysema.query.types.EComparable;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EComparable;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * CComparable defines custom comparable expressions

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CDate.java
Patch:
@@ -9,11 +9,11 @@
 import java.util.List;
 
 import com.mysema.query.types.Custom;
+import com.mysema.query.types.EDate;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EDate;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CDateTime.java
Patch:
@@ -9,11 +9,11 @@
 import java.util.List;
 
 import com.mysema.query.types.Custom;
+import com.mysema.query.types.EDateTime;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EDateTime;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CNumber.java
Patch:
@@ -9,11 +9,11 @@
 import java.util.List;
 
 import com.mysema.query.types.Custom;
+import com.mysema.query.types.ENumber;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.ENumber;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * CNumber defines custom numeric expressions

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CSimple.java
Patch:
@@ -9,10 +9,10 @@
 import java.util.List;
 
 import com.mysema.query.types.Custom;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * CSimple defines custom simple expressions

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CString.java
Patch:
@@ -9,11 +9,11 @@
 import java.util.List;
 
 import com.mysema.query.types.Custom;
+import com.mysema.query.types.EString;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EString;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * CString defines custom String expressions

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CTime.java
Patch:
@@ -9,12 +9,12 @@
 import java.util.List;
 
 import com.mysema.query.types.Custom;
+import com.mysema.query.types.EComparable;
+import com.mysema.query.types.ETime;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EComparable;
-import com.mysema.query.types.expr.ETime;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CustomMixin.java
Patch:
@@ -9,8 +9,8 @@
 import java.util.List;
 
 import com.mysema.query.types.Custom;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Template;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OBoolean.java
Patch:
@@ -8,11 +8,11 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * OBoolean represents boolean operations

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OComparable.java
Patch:
@@ -8,11 +8,11 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.mysema.query.types.EComparable;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EComparable;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * OComparable represents Comparable operations

File: querydsl-core/src/main/java/com/mysema/query/types/operation/ODate.java
Patch:
@@ -8,11 +8,11 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.mysema.query.types.EDate;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EDate;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * ODate represents Date operations

File: querydsl-core/src/main/java/com/mysema/query/types/operation/ODateTime.java
Patch:
@@ -8,11 +8,11 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.mysema.query.types.EDateTime;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EDateTime;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * ODateTime represents DateTime operations

File: querydsl-core/src/main/java/com/mysema/query/types/operation/ONumber.java
Patch:
@@ -8,11 +8,11 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.mysema.query.types.ENumber;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.ENumber;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * ONumber represents numeric operations

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OSimple.java
Patch:
@@ -8,10 +8,10 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * OSimple represents a simple operation expression

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OString.java
Patch:
@@ -8,11 +8,11 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.mysema.query.types.EString;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EString;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * OString represents a String typed operation

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OTime.java
Patch:
@@ -8,11 +8,11 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.mysema.query.types.ETime;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.ETime;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * OTime represents Time functions

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OperationMixin.java
Patch:
@@ -9,9 +9,9 @@
 import java.util.Collections;
 import java.util.List;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/types/operation/Ops.java
Patch:
@@ -11,8 +11,8 @@
 import java.util.Collection;
 import java.util.List;
 
+import com.mysema.query.types.ENumber;
 import com.mysema.query.types.Operator;
-import com.mysema.query.types.expr.ENumber;
 
 /**
  * Ops provides the operators for the fluent query grammar.

File: querydsl-core/src/main/java/com/mysema/query/types/path/PBoolean.java
Patch:
@@ -7,10 +7,10 @@
 
 import java.lang.reflect.AnnotatedElement;
 
+import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EBoolean;
 
 /**
  * PBoolean represents boolean path expressions

File: querydsl-core/src/main/java/com/mysema/query/types/path/PCollection.java
Patch:
@@ -9,11 +9,11 @@
 import java.util.Collection;
 
 import com.mysema.commons.lang.Assert;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.ECollectionBase;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.ECollectionBase;
 
 /**
  * PCollection represents collection paths

File: querydsl-core/src/main/java/com/mysema/query/types/path/PComparable.java
Patch:
@@ -7,11 +7,11 @@
 
 import java.lang.reflect.AnnotatedElement;
 
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.EComparable;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EComparable;
 
 /**
  * PComparable represents Comparable paths

File: querydsl-core/src/main/java/com/mysema/query/types/path/PDate.java
Patch:
@@ -7,11 +7,11 @@
 
 import java.lang.reflect.AnnotatedElement;
 
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.EDate;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EDate;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/types/path/PDateTime.java
Patch:
@@ -7,11 +7,11 @@
 
 import java.lang.reflect.AnnotatedElement;
 
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.EDateTime;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EDateTime;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/types/path/PEntity.java
Patch:
@@ -13,12 +13,12 @@
 import javax.annotation.Nullable;
 
 import com.mysema.query.QueryException;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
-import com.mysema.query.types.expr.ExprConst;
+import com.mysema.query.types.constant.ExprConst;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PMap.java
Patch:
@@ -16,12 +16,12 @@
 import javax.annotation.Nullable;
 
 import com.mysema.query.QueryException;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.EMapBase;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EMapBase;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * PMap represents map paths

File: querydsl-core/src/main/java/com/mysema/query/types/path/PNumber.java
Patch:
@@ -7,11 +7,11 @@
 
 import java.lang.reflect.AnnotatedElement;
 
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.ENumber;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.ENumber;
 
 /**
  * PNumber represents numeric paths

File: querydsl-core/src/main/java/com/mysema/query/types/path/PSet.java
Patch:
@@ -9,11 +9,11 @@
 import java.util.Set;
 
 import com.mysema.commons.lang.Assert;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.ECollectionBase;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.ECollectionBase;
 
 /**
  * PSet represents set paths

File: querydsl-core/src/main/java/com/mysema/query/types/path/PSimple.java
Patch:
@@ -7,11 +7,11 @@
 
 import java.lang.reflect.AnnotatedElement;
 
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * PSimple represents simple paths

File: querydsl-core/src/main/java/com/mysema/query/types/path/PString.java
Patch:
@@ -7,11 +7,11 @@
 
 import java.lang.reflect.AnnotatedElement;
 
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.EString;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EString;
 
 /**
  * PString represents String typed paths

File: querydsl-core/src/main/java/com/mysema/query/types/path/PTime.java
Patch:
@@ -7,11 +7,11 @@
 
 import java.lang.reflect.AnnotatedElement;
 
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.ETime;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.ETime;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathBuilder.java
Patch:
@@ -8,8 +8,8 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * PathBuilder is an extension to PEntity for dynamic path construction

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathMixin.java
Patch:
@@ -10,11 +10,11 @@
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.PathType;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
 import com.mysema.util.ReflectionUtils;

File: querydsl-core/src/main/java/com/mysema/query/types/query/BooleanSubQuery.java
Patch:
@@ -6,11 +6,11 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
 

File: querydsl-core/src/main/java/com/mysema/query/types/query/ComparableSubQuery.java
Patch:
@@ -6,12 +6,12 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.EComparable;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EComparable;
 import com.mysema.query.types.operation.OComparable;
 import com.mysema.query.types.operation.Ops;
 

File: querydsl-core/src/main/java/com/mysema/query/types/query/DateSubQuery.java
Patch:
@@ -6,12 +6,12 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.EDate;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EDate;
 import com.mysema.query.types.operation.ODate;
 import com.mysema.query.types.operation.Ops;
 

File: querydsl-core/src/main/java/com/mysema/query/types/query/DateTimeSubQuery.java
Patch:
@@ -6,12 +6,12 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.EDateTime;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EDateTime;
 import com.mysema.query.types.operation.ODateTime;
 import com.mysema.query.types.operation.Ops;
 

File: querydsl-core/src/main/java/com/mysema/query/types/query/ListSubQuery.java
Patch:
@@ -8,13 +8,13 @@
 import java.util.List;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.ECollectionBase;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.ECollectionBase;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.OSimple;
 import com.mysema.query.types.operation.Ops;
 

File: querydsl-core/src/main/java/com/mysema/query/types/query/NumberSubQuery.java
Patch:
@@ -6,12 +6,12 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.ENumber;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.Ops;
 

File: querydsl-core/src/main/java/com/mysema/query/types/query/ObjectSubQuery.java
Patch:
@@ -6,12 +6,12 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.OSimple;
 import com.mysema.query.types.operation.Ops;
 

File: querydsl-core/src/main/java/com/mysema/query/types/query/StringSubQuery.java
Patch:
@@ -6,12 +6,12 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.EString;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EString;
 import com.mysema.query.types.operation.OString;
 import com.mysema.query.types.operation.Ops;
 

File: querydsl-core/src/main/java/com/mysema/query/types/query/SubQueryMixin.java
Patch:
@@ -8,10 +8,10 @@
 import javax.annotation.Nullable;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
 

File: querydsl-core/src/main/java/com/mysema/query/types/query/TimeSubQuery.java
Patch:
@@ -6,12 +6,12 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.ETime;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.ETime;
 import com.mysema.query.types.operation.OTime;
 import com.mysema.query.types.operation.Ops;
 

File: querydsl-core/src/test/java/com/mysema/query/BooleanBuilderTest.java
Patch:
@@ -9,8 +9,8 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EBooleanConst;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.constant.EBooleanConst;
 
 
 /**

File: querydsl-core/src/test/java/com/mysema/query/CoverageTest.java
Patch:
@@ -19,9 +19,9 @@
 import org.junit.Test;
 
 import com.mysema.query.alias.Alias;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.Ops;
 
 /**

File: querydsl-core/src/test/java/com/mysema/query/QueryMutability.java
Patch:
@@ -11,7 +11,7 @@
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.Expr;
 
 public final class QueryMutability {
 

File: querydsl-core/src/test/java/com/mysema/query/types/CaseBuilderTest.java
Patch:
@@ -11,9 +11,6 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.expr.ENumber;
-import com.mysema.query.types.expr.EString;
-import com.mysema.query.types.expr.Expr;
 
 public class CaseBuilderTest {
 

File: querydsl-core/src/test/java/com/mysema/query/types/CaseForEqBuilderTest.java
Patch:
@@ -12,9 +12,6 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.expr.ENumber;
-import com.mysema.query.types.expr.EString;
-import com.mysema.query.types.expr.Expr;
 
 public class CaseForEqBuilderTest {
     

File: querydsl-core/src/test/java/com/mysema/query/types/StringTest.java
Patch:
@@ -17,8 +17,6 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.expr.EArrayConstructor;
-import com.mysema.query.types.expr.EConstructor;
 import com.mysema.query.types.operation.OperatorImpl;
 import com.mysema.query.types.operation.Ops;
 

File: querydsl-core/src/test/java/com/mysema/query/types/TypesTest.java
Patch:
@@ -9,7 +9,6 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.expr.Expr;
 
 // TODO: Auto-generated Javadoc
 /**

File: querydsl-core/src/test/java/com/mysema/query/types/VisitorTest.java
Patch:
@@ -11,7 +11,6 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.expr.Expr;
 
 
 // TODO: Auto-generated Javadoc

File: querydsl-core/src/test/java/com/mysema/query/types/custom/CustomTest.java
Patch:
@@ -12,11 +12,11 @@
 
 import org.junit.Test;
 
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EBooleanConst;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.constant.EBooleanConst;
 
 public class CustomTest {
     

File: querydsl-hibernate-search/src/main/java/com/mysema/query/search/LuceneQuery.java
Patch:
@@ -11,9 +11,9 @@
 import com.mysema.query.SimpleProjectable;
 import com.mysema.query.SimpleQuery;
 import com.mysema.query.support.QueryMixin;
+import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.expr.EBoolean;
 
 /**
  * @author tiwe

File: querydsl-hibernate-search/src/main/java/com/mysema/query/search/LuceneSerializer.java
Patch:
@@ -21,10 +21,10 @@
 import org.apache.lucene.search.BooleanClause.Occur;
 
 import com.mysema.query.types.Constant;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.path.PString;
 

File: querydsl-hibernate-search/src/test/java/com/mysema/query/search/SimpleTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.Ignore;
 import org.junit.Test;
 
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.path.PString;
 import com.mysema.query.types.path.PathBuilder;
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/AbstractSQLQuery.java
Patch:
@@ -8,8 +8,8 @@
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.support.ProjectableQuery;
 import com.mysema.query.support.QueryMixin;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.ENumber;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.ENumber;
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.path.PEntity;

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLQuery.java
Patch:
@@ -9,8 +9,8 @@
 
 import com.mysema.query.Projectable;
 import com.mysema.query.Query;
+import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PMap;
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLQueryBase.java
Patch:
@@ -10,8 +10,8 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.support.ProjectableQuery;
+import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PMap;
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLQueryMixin.java
Patch:
@@ -12,9 +12,9 @@
 import com.mysema.query.JoinType;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.support.QueryMixin;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.OSimple;
 import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.path.PEntity;

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLSerializer.java
Patch:
@@ -19,15 +19,15 @@
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.serialization.SerializerBase;
 import com.mysema.query.types.Constant;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.PathType;
 import com.mysema.query.types.SubQuery;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EStringConst;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.constant.EStringConst;
 import com.mysema.query.types.operation.OSimple;
 import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.path.PEntity;

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLSubQuery.java
Patch:
@@ -9,8 +9,8 @@
 
 import com.mysema.query.DefaultQueryMetadata;
 import com.mysema.query.support.DetachableQuery;
+import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PMap;
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/AbstractHibernateQuery.java
Patch:
@@ -28,8 +28,8 @@
 import com.mysema.query.SearchResults;
 import com.mysema.query.hql.HQLQueryBase;
 import com.mysema.query.hql.HQLTemplates;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * Abstract base class for Hibernate API based implementations of the HQLQuery interface

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/HibernateDeleteClause.java
Patch:
@@ -16,7 +16,7 @@
 import com.mysema.query.dml.DeleteClause;
 import com.mysema.query.hql.HQLSerializer;
 import com.mysema.query.hql.HQLTemplates;
-import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.path.PEntity;
 
 /**

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/HibernateUpdateClause.java
Patch:
@@ -16,8 +16,8 @@
 import com.mysema.query.dml.UpdateClause;
 import com.mysema.query.hql.HQLSerializer;
 import com.mysema.query.hql.HQLTemplates;
+import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
 
 /**

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/sql/ConstructorResultTransformer.java
Patch:
@@ -11,7 +11,7 @@
 import org.hibernate.transform.ResultTransformer;
 
 import com.mysema.query.QueryException;
-import com.mysema.query.types.expr.EConstructor;
+import com.mysema.query.types.EConstructor;
 
 /**
  * @author tiwe

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/sql/HibernateSQLQuery.java
Patch:
@@ -28,9 +28,9 @@
 import com.mysema.query.hql.hibernate.SessionHolder;
 import com.mysema.query.hql.hibernate.StatelessSessionHolder;
 import com.mysema.query.sql.SQLTemplates;
+import com.mysema.query.types.EConstructor;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.expr.EConstructor;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * HibernateSQLQuery is an SQLQuery implementation that uses Hibernate's Native SQL functionality 

File: querydsl-hql/src/main/java/com/mysema/query/hql/jpa/AbstractJPAQuery.java
Patch:
@@ -22,7 +22,7 @@
 import com.mysema.query.SearchResults;
 import com.mysema.query.hql.HQLQueryBase;
 import com.mysema.query.hql.HQLTemplates;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.Expr;
 
 /**
  * Abstract base class for JPA API based implementations of the HQLQuery interface

File: querydsl-hql/src/main/java/com/mysema/query/hql/jpa/JPADeleteClause.java
Patch:
@@ -15,7 +15,7 @@
 import com.mysema.query.dml.DeleteClause;
 import com.mysema.query.hql.HQLSerializer;
 import com.mysema.query.hql.HQLTemplates;
-import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.path.PEntity;
 
 /**

File: querydsl-hql/src/main/java/com/mysema/query/hql/jpa/JPAUpdateClause.java
Patch:
@@ -15,8 +15,8 @@
 import com.mysema.query.dml.UpdateClause;
 import com.mysema.query.hql.HQLSerializer;
 import com.mysema.query.hql.HQLTemplates;
+import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
 
 /**

File: querydsl-hql/src/main/java/com/mysema/query/hql/jpa/sql/JPASQLQuery.java
Patch:
@@ -26,8 +26,8 @@
 import com.mysema.query.hql.jpa.JPASessionHolder;
 import com.mysema.query.hql.jpa.JPAUtil;
 import com.mysema.query.sql.SQLTemplates;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 
 /**

File: querydsl-hql/src/test/java/com/mysema/query/AbstractStandardTest.java
Patch:
@@ -22,9 +22,9 @@
 import com.mysema.query.hql.HQLQuery;
 import com.mysema.query.hql.domain.Cat;
 import com.mysema.query.hql.domain.QCat;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EList;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.EList;
+import com.mysema.query.types.Expr;
 
 /**
  * @author tiwe

File: querydsl-hql/src/test/java/com/mysema/query/hql/AbstractQueryTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.Expr;
 
 public abstract class AbstractQueryTest implements Constants{
    

File: querydsl-hql/src/test/java/com/mysema/query/hql/CastTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.expr.ENumber;
+import com.mysema.query.types.ENumber;
 import com.mysema.query.types.path.PNumber;
 
 public class CastTest extends AbstractQueryTest {

File: querydsl-hql/src/test/java/com/mysema/query/hql/ConstructorsTest.java
Patch:
@@ -7,8 +7,8 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.expr.EConstructor;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.EConstructor;
+import com.mysema.query.types.Expr;
 
 public class ConstructorsTest extends AbstractQueryTest{
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/CustomExpressionsTest.java
Patch:
@@ -9,9 +9,9 @@
 
 import org.junit.Test;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.custom.CString;
-import com.mysema.query.types.expr.Expr;
 
 public class CustomExpressionsTest extends AbstractQueryTest{
     

File: querydsl-hql/src/test/java/com/mysema/query/hql/DateTimeTest.java
Patch:
@@ -7,9 +7,9 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.expr.EDate;
-import com.mysema.query.types.expr.EDateTime;
-import com.mysema.query.types.expr.ETime;
+import com.mysema.query.types.EDate;
+import com.mysema.query.types.EDateTime;
+import com.mysema.query.types.ETime;
 
 public class DateTimeTest extends AbstractQueryTest {
     

File: querydsl-hql/src/test/java/com/mysema/query/hql/FeaturesTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.mysema.query.hql.domain.QAccount;
 import com.mysema.query.hql.domain.QInheritedProperties;
-import com.mysema.query.types.expr.ENumber;
+import com.mysema.query.types.ENumber;
 import com.mysema.query.types.path.PNumber;
 
 /**

File: querydsl-hql/src/test/java/com/mysema/query/hql/ParsingTest.java
Patch:
@@ -29,9 +29,9 @@
 import com.mysema.query.hql.domain.QFooDTO;
 import com.mysema.query.hql.domain.QItem;
 import com.mysema.query.hql.domain.QProduct;
-import com.mysema.query.types.expr.EComparable;
-import com.mysema.query.types.expr.EDate;
-import com.mysema.query.types.expr.ENumber;
+import com.mysema.query.types.EComparable;
+import com.mysema.query.types.EDate;
+import com.mysema.query.types.ENumber;
 
 /**
  * ParsingTest provides.

File: querydsl-hql/src/test/java/com/mysema/query/hql/QueryHelper.java
Patch:
@@ -21,7 +21,7 @@
 import com.mysema.commons.lang.CloseableIterator;
 import com.mysema.query.DefaultQueryMetadata;
 import com.mysema.query.SearchResults;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.Expr;
 
 class QueryHelper extends HQLQueryBase<QueryHelper> {
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SAccount.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SAnimal.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PComparable;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SAuditlog.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SBar.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PComparable;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SCalendar.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SCalendarHolidays.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PComparable;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SCatalog.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PComparable;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SCatalogPrice.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SCompany.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SCustomer.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SDepartment.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SDocument.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PComparable;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SEmployee.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SFoo.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PComparable;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SFormula.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SInheritedproperties.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SItem.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SItemStatuschange.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SKittens.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SKittensArray.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SKittensSet.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SLocation.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SName.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SNamed.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SNamelist.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SNamelistNames.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SNationality.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SParameter.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SPerson.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PComparable;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SPersonid.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SPlayer.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SPlayerScores.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SPrice.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SShow.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SShowActs.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SSimpletypes.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PComparable;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SStatus.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SStatuschange.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PComparable;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SStore.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SStoreCustomer.java
Patch:
@@ -7,9 +7,9 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/hibernate/sql/DerbySQLTest.java
Patch:
@@ -22,7 +22,7 @@
 import com.mysema.query.hql.domain.sql.SAnimal;
 import com.mysema.query.sql.DerbyTemplates;
 import com.mysema.query.sql.SQLTemplates;
-import com.mysema.query.types.expr.EConstructor;
+import com.mysema.query.types.EConstructor;
 import com.mysema.testutil.HibernateConfig;
 import com.mysema.testutil.HibernateTestRunner;
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/jpa/sql/JPADerbySQLTest.java
Patch:
@@ -24,7 +24,7 @@
 import com.mysema.query.hql.domain.sql.SAnimal;
 import com.mysema.query.sql.DerbyTemplates;
 import com.mysema.query.sql.SQLTemplates;
-import com.mysema.query.types.expr.EConstructor;
+import com.mysema.query.types.EConstructor;
 import com.mysema.testutil.JPAConfig;
 import com.mysema.testutil.JPATestRunner;
 

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/AbstractJDOQLQuery.java
Patch:
@@ -23,7 +23,7 @@
 import com.mysema.query.QueryModifiers;
 import com.mysema.query.SearchResults;
 import com.mysema.query.support.ProjectableQuery;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.util.ResultIterator;
 

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/JDOQLQueryMixin.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.support.QueryMixin;
-import com.mysema.query.types.expr.EConstructor;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.EConstructor;
+import com.mysema.query.types.Expr;
 
 /**
  * @author tiwe

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/JDOQLSerializer.java
Patch:
@@ -21,14 +21,14 @@
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.serialization.SerializerBase;
 import com.mysema.query.types.Constant;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Operation;
 import com.mysema.query.types.Operator;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EStringConst;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.constant.EStringConst;
 import com.mysema.query.types.operation.OSimple;
 import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.path.PEntity;

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/JDOQLSubQuery.java
Patch:
@@ -10,8 +10,8 @@
 import com.mysema.query.DefaultQueryMetadata;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.support.DetachableQuery;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.OSimple;
 import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.path.PEntity;

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/dml/JDOQLDeleteClause.java
Patch:
@@ -17,7 +17,7 @@
 import com.mysema.query.dml.DeleteClause;
 import com.mysema.query.jdoql.JDOQLSerializer;
 import com.mysema.query.jdoql.JDOQLTemplates;
-import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.path.PEntity;
 
 /**

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/dml/JDOQLUpdateClause.java
Patch:
@@ -8,8 +8,8 @@
 import com.mysema.query.DefaultQueryMetadata;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.dml.UpdateClause;
+import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.expr.EBoolean;
 
 /**
  * UpdateClause implementation for JDO

File: querydsl-jdoql/src/test/java/com/mysema/query/JDOQLQueryStandardTest.java
Patch:
@@ -22,8 +22,8 @@
 import com.mysema.query.jdoql.testdomain.QProduct;
 import com.mysema.query.jdoql.testdomain.QStore;
 import com.mysema.query.jdoql.testdomain.Store;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 
 public class JDOQLQueryStandardTest extends AbstractJDOTest {
     

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/AbstractJDOTest.java
Patch:
@@ -19,7 +19,7 @@
 import com.mysema.query.jdoql.dml.JDOQLDeleteClause;
 import com.mysema.query.jdoql.testdomain.Product;
 import com.mysema.query.jdoql.testdomain.Store;
-import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.path.PEntity;
 
 public abstract class AbstractJDOTest {

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/serialization/AbstractTest.java
Patch:
@@ -8,8 +8,8 @@
 import com.mysema.query.jdoql.JDOQLSerializer;
 import com.mysema.query.jdoql.JDOQLSubQuery;
 import com.mysema.query.jdoql.JDOQLTemplates;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.SubQuery;
-import com.mysema.query.types.expr.Expr;
 
 public abstract class AbstractTest {
 

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/serialization/ExprSerializationTest.java
Patch:
@@ -16,7 +16,7 @@
 import com.mysema.query.jdoql.testdomain.QBook;
 import com.mysema.query.jdoql.testdomain.QProduct;
 import com.mysema.query.jdoql.testdomain.QStore;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.Expr;
 
 public class ExprSerializationTest {
 

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/testdomain/QStore.java
Patch:
@@ -31,7 +31,7 @@ public QProduct productsByName(String key) {
         return new QProduct(PathMetadataFactory.forMapAccess(productsByName,key));
     }
     
-    public QProduct productsByName(com.mysema.query.types.expr.Expr<String> key) {
+    public QProduct productsByName(com.mysema.query.types.Expr<String> key) {
         return new QProduct(PathMetadataFactory.forMapAccess(productsByName,key));
     }
     

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -27,11 +27,11 @@
 import com.mysema.query.SearchResults;
 import com.mysema.query.support.ProjectableQuery;
 import com.mysema.query.support.QueryMixin;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.EConstructor;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.SubQuery;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EConstructor;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.query.ListSubQuery;
 import com.mysema.util.JDBCUtil;

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLQuery.java
Patch:
@@ -10,9 +10,9 @@
 
 import com.mysema.query.Projectable;
 import com.mysema.query.Query;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.SubQuery;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.query.ListSubQuery;
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLSubQuery.java
Patch:
@@ -9,7 +9,7 @@
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.support.DetachableQuery;
 import com.mysema.query.support.QueryMixin;
-import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.path.PEntity;
 
 /**

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLDeleteClause.java
Patch:
@@ -17,7 +17,7 @@
 import com.mysema.query.dml.DeleteClause;
 import com.mysema.query.sql.SQLSerializer;
 import com.mysema.query.sql.SQLTemplates;
-import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.util.JDBCUtil;
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLInsertClause.java
Patch:
@@ -19,10 +19,10 @@
 import com.mysema.query.dml.InsertClause;
 import com.mysema.query.sql.SQLSerializer;
 import com.mysema.query.sql.SQLTemplates;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Path;
 import com.mysema.query.types.SubQuery;
-import com.mysema.query.types.expr.Expr;
-import com.mysema.query.types.expr.ExprConst;
+import com.mysema.query.types.constant.ExprConst;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.util.JDBCUtil;
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLUpdateClause.java
Patch:
@@ -20,8 +20,8 @@
 import com.mysema.query.dml.UpdateClause;
 import com.mysema.query.sql.SQLSerializer;
 import com.mysema.query.sql.SQLTemplates;
+import com.mysema.query.types.EBoolean;
 import com.mysema.query.types.Path;
-import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.util.JDBCUtil;
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/mssql/RowNumber.java
Patch:
@@ -10,12 +10,12 @@
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.types.EComparable;
+import com.mysema.query.types.ENumber;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.custom.CNumber;
-import com.mysema.query.types.expr.EComparable;
-import com.mysema.query.types.expr.ENumber;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PNumber;
 
 /**

File: querydsl-sql/src/main/java/com/mysema/query/sql/oracle/OracleGrammar.java
Patch:
@@ -7,9 +7,9 @@
 
 import java.util.Date;
 
-import com.mysema.query.types.expr.EDate;
-import com.mysema.query.types.expr.ENumber;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.EDate;
+import com.mysema.query.types.ENumber;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.path.PDate;
 import com.mysema.query.types.path.PNumber;
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/oracle/OracleQuery.java
Patch:
@@ -12,8 +12,8 @@
 import com.mysema.query.sql.AbstractSQLQuery;
 import com.mysema.query.sql.SQLSerializer;
 import com.mysema.query.sql.SQLTemplates;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 
 /**
  * OracleQuery provides Oracle specific extensions to the base SQL query type

File: querydsl-sql/src/main/java/com/mysema/query/sql/oracle/OracleSerializer.java
Patch:
@@ -7,8 +7,8 @@
 
 import com.mysema.query.sql.SQLSerializer;
 import com.mysema.query.sql.SQLTemplates;
-import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.EBoolean;
+import com.mysema.query.types.Expr;
 
 /**
  * OracleSerializer extended the SqlSerializer to support Oracle specific

File: querydsl-sql/src/main/java/com/mysema/query/sql/oracle/SumOver.java
Patch:
@@ -11,10 +11,10 @@
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.types.ENumber;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.custom.CNumber;
-import com.mysema.query.types.expr.ENumber;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * SumOver is a fluent type for Oracle specific sum over / partition by / order

File: querydsl-sql/src/test/java/com/mysema/query/_mssql/SelectMSSQLTest.java
Patch:
@@ -22,8 +22,8 @@
 import com.mysema.query.Target;
 import com.mysema.query.sql.SQLServerTemplates;
 import com.mysema.query.sql.mssql.RowNumber;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PSimple;
 import com.mysema.query.types.query.ListSubQuery;
 import com.mysema.query.types.query.ObjectSubQuery;

File: querydsl-sql/src/test/java/com/mysema/query/sql/SQLTemplatesTest.java
Patch:
@@ -12,8 +12,8 @@
 
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
+import com.mysema.query.types.constant.ENumberConst;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.ENumberConst;
 
 public class SQLTemplatesTest {
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/domain/QEmployee.java
Patch:
@@ -8,9 +8,9 @@
 import java.math.BigDecimal;
 
 import com.mysema.query.sql.Table;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PDate;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;

File: querydsl-sql/src/test/java/com/mysema/query/sql/domain/QIdName.java
Patch:
@@ -5,8 +5,8 @@
  */
 package com.mysema.query.sql.domain;
 
-import com.mysema.query.types.expr.EConstructor;
-import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.EConstructor;
+import com.mysema.query.types.Expr;
 
 @SuppressWarnings("all")
 public class QIdName extends EConstructor<IdName> {

File: querydsl-sql/src/test/java/com/mysema/query/sql/domain/QSurvey.java
Patch:
@@ -6,9 +6,9 @@
 package com.mysema.query.sql.domain;
 
 import com.mysema.query.sql.Table;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;

File: querydsl-sql/src/test/java/com/mysema/query/sql/domain/QTest_.java
Patch:
@@ -6,9 +6,9 @@
 package com.mysema.query.sql.domain;
 
 import com.mysema.query.sql.Table;
+import com.mysema.query.types.Expr;
 import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PString;
 import com.mysema.query.types.path.PathMetadataFactory;

File: querydsl-apt/src/test/java/com/mysema/query/domain/EntityTest.java
Patch:
@@ -12,8 +12,8 @@
 import com.mysema.query.annotations.QueryEntity;
 import com.mysema.query.annotations.QueryInit;
 import com.mysema.query.annotations.QuerySupertype;
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.path.PathInits;
-import com.mysema.query.types.path.PathMetadata;
 
 public class EntityTest extends AbstractTest{
     

File: querydsl-collections/src/main/java/com/mysema/query/collections/AbstractColQuery.java
Patch:
@@ -31,10 +31,10 @@
 import com.mysema.query.support.QueryMixin;
 import com.mysema.query.types.Order;
 import com.mysema.query.types.OrderSpecifier;
+import com.mysema.query.types.Path;
 import com.mysema.query.types.expr.EArrayConstructor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.Expr;
-import com.mysema.query.types.path.Path;
 import com.mysema.util.MultiIterator;
 
 /**

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColDeleteClause.java
Patch:
@@ -3,8 +3,8 @@
 import java.util.Collection;
 
 import com.mysema.query.dml.DeleteClause;
+import com.mysema.query.types.Path;
 import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.path.Path;
 
 /**
  * @author tiwe

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColQuery.java
Patch:
@@ -7,7 +7,7 @@
 
 import com.mysema.query.Projectable;
 import com.mysema.query.Query;
-import com.mysema.query.types.path.Path;
+import com.mysema.query.types.Path;
 
 /**
  * Query interface for Collection queries

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColQueryTemplates.java
Patch:
@@ -9,8 +9,8 @@
 import java.util.Date;
 
 import com.mysema.query.serialization.JavaTemplates;
+import com.mysema.query.types.PathType;
 import com.mysema.query.types.operation.Ops;
-import com.mysema.query.types.path.PathType;
 
 /**
  * ColQueryTemplates extends JavaTemplates to add Java syntax specific operation

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColUpdateClause.java
Patch:
@@ -1,8 +1,8 @@
 package com.mysema.query.collections;
 
 import com.mysema.query.dml.UpdateClause;
+import com.mysema.query.types.Path;
 import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.path.Path;
 
 /**
  * @author tiwe

File: querydsl-collections/src/main/java/com/mysema/query/collections/MiniApi.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.Collection;
 
 import com.mysema.query.alias.Alias;
-import com.mysema.query.types.path.Path;
+import com.mysema.query.types.Path;
 
 /**
  * MiniApi provides static convenience methods for query construction

File: querydsl-core/src/main/java/com/mysema/query/DefaultQueryMetadata.java
Patch:
@@ -15,9 +15,9 @@
 import javax.annotation.Nullable;
 
 import com.mysema.query.types.OrderSpecifier;
+import com.mysema.query.types.Path;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.Expr;
-import com.mysema.query.types.path.Path;
 
 import edu.umd.cs.findbugs.annotations.SuppressWarnings;
 

File: querydsl-core/src/main/java/com/mysema/query/alias/PropertyAccessInvocationHandler.java
Patch:
@@ -26,6 +26,8 @@
 
 import org.apache.commons.lang.StringUtils;
 
+import com.mysema.query.types.Path;
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.expr.ECollection;
 import com.mysema.query.types.expr.EMap;
 import com.mysema.query.types.expr.Expr;
@@ -42,8 +44,6 @@
 import com.mysema.query.types.path.PSimple;
 import com.mysema.query.types.path.PString;
 import com.mysema.query.types.path.PTime;
-import com.mysema.query.types.path.Path;
-import com.mysema.query.types.path.PathMetadata;
 import com.mysema.query.types.path.PathMetadataFactory;
 import com.mysema.util.ReflectionUtils;
 

File: querydsl-core/src/main/java/com/mysema/query/codegen/TypeMappings.java
Patch:
@@ -8,6 +8,8 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import com.mysema.query.types.Custom;
+import com.mysema.query.types.Path;
 import com.mysema.query.types.custom.CBoolean;
 import com.mysema.query.types.custom.CComparable;
 import com.mysema.query.types.custom.CDate;
@@ -16,7 +18,6 @@
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.custom.CString;
 import com.mysema.query.types.custom.CTime;
-import com.mysema.query.types.custom.Custom;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EComparable;
 import com.mysema.query.types.expr.EDate;
@@ -33,7 +34,6 @@
 import com.mysema.query.types.path.PSimple;
 import com.mysema.query.types.path.PString;
 import com.mysema.query.types.path.PTime;
-import com.mysema.query.types.path.Path;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/dml/InsertClause.java
Patch:
@@ -5,8 +5,8 @@
  */
 package com.mysema.query.dml;
 
-import com.mysema.query.types.path.Path;
-import com.mysema.query.types.query.SubQuery;
+import com.mysema.query.types.Path;
+import com.mysema.query.types.SubQuery;
 
 /**
  * InsertClause defines a generic extensible interface for Insert clauses

File: querydsl-core/src/main/java/com/mysema/query/dml/UpdateClause.java
Patch:
@@ -5,8 +5,8 @@
  */
 package com.mysema.query.dml;
 
+import com.mysema.query.types.Path;
 import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.path.Path;
 
 /**
  * UpdateClause defines a generic extensible interface for Update clauses

File: querydsl-core/src/main/java/com/mysema/query/types/CaseBuilder.java
Patch:
@@ -20,7 +20,6 @@
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.OSimple;
 import com.mysema.query.types.operation.OString;
-import com.mysema.query.types.operation.Operator;
 import com.mysema.query.types.operation.Ops;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/CaseForEqBuilder.java
Patch:
@@ -19,7 +19,6 @@
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.OSimple;
 import com.mysema.query.types.operation.OString;
-import com.mysema.query.types.operation.Operator;
 import com.mysema.query.types.operation.Ops;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/Constant.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.expr;
+package com.mysema.query.types;
 
 /**
  * Constant represents a general constant expression. 

File: querydsl-core/src/main/java/com/mysema/query/types/Custom.java
Patch:
@@ -3,11 +3,10 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.custom;
+package com.mysema.query.types;
 
 import java.util.List;
 
-import com.mysema.query.types.Template;
 import com.mysema.query.types.expr.Expr;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/EStringEscape.java
Patch:
@@ -5,7 +5,6 @@
  */
 package com.mysema.query.types;
 
-import com.mysema.query.types.expr.Constant;
 import com.mysema.query.types.expr.EString;
 import com.mysema.query.types.expr.EStringConst;
 

File: querydsl-core/src/main/java/com/mysema/query/types/Operation.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.operation;
+package com.mysema.query.types;
 
 import java.util.List;
 

File: querydsl-core/src/main/java/com/mysema/query/types/Operator.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.operation;
+package com.mysema.query.types;
 
 import java.util.List;
 

File: querydsl-core/src/main/java/com/mysema/query/types/PathMetadata.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.path;
+package com.mysema.query.types;
 
 import java.io.Serializable;
 
@@ -27,6 +27,7 @@ public final class PathMetadata<T> implements Serializable{
     
     private static final long serialVersionUID = -1055994185028970065L;
 
+    // Expr is in lower level package
     private final Expr<T> expression;
 
     private final int hashCode;
@@ -36,7 +37,7 @@ public final class PathMetadata<T> implements Serializable{
 
     private final PathType pathType;
     
-    PathMetadata(@Nullable Path<?> parent, Expr<T> expression, PathType type) {
+    public PathMetadata(@Nullable Path<?> parent, Expr<T> expression, PathType type) {
         this.parent = parent;
         this.expression = expression;
         this.pathType = type;

File: querydsl-core/src/main/java/com/mysema/query/types/PathType.java
Patch:
@@ -3,12 +3,11 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types.path;
+package com.mysema.query.types;
 
 import java.util.Collections;
 import java.util.List;
 
-import com.mysema.query.types.operation.Operator;
 
 /**
  * PathType represents the relation of a path to its parent

File: querydsl-core/src/main/java/com/mysema/query/types/Templates.java
Patch:
@@ -12,9 +12,7 @@
 
 import net.jcip.annotations.Immutable;
 
-import com.mysema.query.types.operation.Operator;
 import com.mysema.query.types.operation.Ops;
-import com.mysema.query.types.path.PathType;
 
 /**
  * OperationPatterns provides operator patterns for query expression serialization

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CBoolean.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.mysema.query.types.Custom;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.Visitor;

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CComparable.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.mysema.query.types.Custom;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.Visitor;

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CDate.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.mysema.query.types.Custom;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.Visitor;

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CDateTime.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.mysema.query.types.Custom;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.Visitor;

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CNumber.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.mysema.query.types.Custom;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.Visitor;

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CSimple.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.mysema.query.types.Custom;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.Visitor;

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CString.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.mysema.query.types.Custom;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.Visitor;

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CTime.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.mysema.query.types.Custom;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.TemplateFactory;
 import com.mysema.query.types.Visitor;

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CustomMixin.java
Patch:
@@ -8,6 +8,7 @@
 import java.io.Serializable;
 import java.util.List;
 
+import com.mysema.query.types.Custom;
 import com.mysema.query.types.Template;
 import com.mysema.query.types.expr.Expr;
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EBooleanConst.java
Patch:
@@ -5,6 +5,7 @@
  */
 package com.mysema.query.types.expr;
 
+import com.mysema.query.types.Constant;
 import com.mysema.query.types.Visitor;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDateConst.java
Patch:
@@ -7,6 +7,7 @@
 
 import java.util.Calendar;
 
+import com.mysema.query.types.Constant;
 import com.mysema.query.types.Visitor;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDateTimeConst.java
Patch:
@@ -5,6 +5,7 @@
  */
 package com.mysema.query.types.expr;
 
+import com.mysema.query.types.Constant;
 import com.mysema.query.types.Visitor;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ENumber.java
Patch:
@@ -10,9 +10,9 @@
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.types.Operator;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.ONumber;
-import com.mysema.query.types.operation.Operator;
 import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.operation.Ops.MathOps;
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ENumberConst.java
Patch:
@@ -6,6 +6,7 @@
 package com.mysema.query.types.expr;
 
 import com.mysema.commons.lang.Assert;
+import com.mysema.query.types.Constant;
 import com.mysema.query.types.Visitor;
 import com.mysema.util.MathUtils;
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EStringConst.java
Patch:
@@ -15,6 +15,7 @@
 import javax.annotation.Nullable;
 
 import com.mysema.commons.lang.Assert;
+import com.mysema.query.types.Constant;
 import com.mysema.query.types.Visitor;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ETimeConst.java
Patch:
@@ -7,6 +7,7 @@
 
 import java.util.Calendar;
 
+import com.mysema.query.types.Constant;
 import com.mysema.query.types.Visitor;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ExprConst.java
Patch:
@@ -6,6 +6,7 @@
 package com.mysema.query.types.expr;
 
 import com.mysema.commons.lang.Assert;
+import com.mysema.query.types.Constant;
 import com.mysema.query.types.Visitor;
 
 

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OBoolean.java
Patch:
@@ -8,6 +8,8 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.mysema.query.types.Operation;
+import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.Expr;

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OComparable.java
Patch:
@@ -8,6 +8,8 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.mysema.query.types.Operation;
+import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EComparable;
 import com.mysema.query.types.expr.Expr;

File: querydsl-core/src/main/java/com/mysema/query/types/operation/ODate.java
Patch:
@@ -8,6 +8,8 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.mysema.query.types.Operation;
+import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EDate;
 import com.mysema.query.types.expr.Expr;

File: querydsl-core/src/main/java/com/mysema/query/types/operation/ODateTime.java
Patch:
@@ -8,6 +8,8 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.mysema.query.types.Operation;
+import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EDateTime;
 import com.mysema.query.types.expr.Expr;

File: querydsl-core/src/main/java/com/mysema/query/types/operation/ONumber.java
Patch:
@@ -8,6 +8,8 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.mysema.query.types.Operation;
+import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.expr.Expr;

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OSimple.java
Patch:
@@ -8,6 +8,8 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.mysema.query.types.Operation;
+import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.Expr;
 

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OString.java
Patch:
@@ -8,6 +8,8 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.mysema.query.types.Operation;
+import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EString;
 import com.mysema.query.types.expr.Expr;

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OTime.java
Patch:
@@ -8,6 +8,8 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.mysema.query.types.Operation;
+import com.mysema.query.types.Operator;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.ETime;
 import com.mysema.query.types.expr.Expr;

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OperationMixin.java
Patch:
@@ -9,6 +9,8 @@
 import java.util.Collections;
 import java.util.List;
 
+import com.mysema.query.types.Operation;
+import com.mysema.query.types.Operator;
 import com.mysema.query.types.expr.Expr;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OperatorImpl.java
Patch:
@@ -11,6 +11,8 @@
 import java.util.Collections;
 import java.util.List;
 
+import com.mysema.query.types.Operator;
+
 import net.jcip.annotations.Immutable;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/operation/Ops.java
Patch:
@@ -11,6 +11,7 @@
 import java.util.Collection;
 import java.util.List;
 
+import com.mysema.query.types.Operator;
 import com.mysema.query.types.expr.ENumber;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/path/PArray.java
Patch:
@@ -11,6 +11,8 @@
 import javax.annotation.Nullable;
 
 import com.mysema.commons.lang.Assert;
+import com.mysema.query.types.Path;
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EArray;
 import com.mysema.query.types.expr.EBoolean;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PBoolean.java
Patch:
@@ -7,6 +7,8 @@
 
 import java.lang.reflect.AnnotatedElement;
 
+import com.mysema.query.types.Path;
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PCollection.java
Patch:
@@ -9,6 +9,8 @@
 import java.util.Collection;
 
 import com.mysema.commons.lang.Assert;
+import com.mysema.query.types.Path;
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.ECollectionBase;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PComparable.java
Patch:
@@ -7,6 +7,8 @@
 
 import java.lang.reflect.AnnotatedElement;
 
+import com.mysema.query.types.Path;
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EComparable;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PDate.java
Patch:
@@ -7,6 +7,8 @@
 
 import java.lang.reflect.AnnotatedElement;
 
+import com.mysema.query.types.Path;
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EDate;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PDateTime.java
Patch:
@@ -7,6 +7,8 @@
 
 import java.lang.reflect.AnnotatedElement;
 
+import com.mysema.query.types.Path;
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EDateTime;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PEntity.java
Patch:
@@ -13,6 +13,8 @@
 import javax.annotation.Nullable;
 
 import com.mysema.query.QueryException;
+import com.mysema.query.types.Path;
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.Expr;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PList.java
Patch:
@@ -19,6 +19,8 @@
 
 import com.mysema.commons.lang.Assert;
 import com.mysema.query.QueryException;
+import com.mysema.query.types.Path;
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.ECollectionBase;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PMap.java
Patch:
@@ -16,6 +16,8 @@
 import javax.annotation.Nullable;
 
 import com.mysema.query.QueryException;
+import com.mysema.query.types.Path;
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EMapBase;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PNumber.java
Patch:
@@ -7,6 +7,8 @@
 
 import java.lang.reflect.AnnotatedElement;
 
+import com.mysema.query.types.Path;
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.ENumber;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PSet.java
Patch:
@@ -9,6 +9,8 @@
 import java.util.Set;
 
 import com.mysema.commons.lang.Assert;
+import com.mysema.query.types.Path;
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.ECollectionBase;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PSimple.java
Patch:
@@ -7,6 +7,8 @@
 
 import java.lang.reflect.AnnotatedElement;
 
+import com.mysema.query.types.Path;
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.Expr;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PString.java
Patch:
@@ -7,6 +7,8 @@
 
 import java.lang.reflect.AnnotatedElement;
 
+import com.mysema.query.types.Path;
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EString;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PTime.java
Patch:
@@ -7,6 +7,8 @@
 
 import java.lang.reflect.AnnotatedElement;
 
+import com.mysema.query.types.Path;
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.ETime;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathBuilder.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.expr.Expr;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathMetadataFactory.java
Patch:
@@ -8,6 +8,9 @@
 import javax.annotation.Nonnegative;
 
 import com.mysema.commons.lang.Assert;
+import com.mysema.query.types.Path;
+import com.mysema.query.types.PathMetadata;
+import com.mysema.query.types.PathType;
 import com.mysema.query.types.expr.ENumberConst;
 import com.mysema.query.types.expr.EStringConst;
 import com.mysema.query.types.expr.Expr;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathMixin.java
Patch:
@@ -10,6 +10,9 @@
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.types.Path;
+import com.mysema.query.types.PathMetadata;
+import com.mysema.query.types.PathType;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.OBoolean;

File: querydsl-core/src/main/java/com/mysema/query/types/query/BooleanSubQuery.java
Patch:
@@ -6,12 +6,13 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.Operator;
+import com.mysema.query.types.Path;
+import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.operation.OBoolean;
-import com.mysema.query.types.operation.Operator;
 import com.mysema.query.types.operation.Ops;
-import com.mysema.query.types.path.Path;
 
 /**
  * Single result subquery

File: querydsl-core/src/main/java/com/mysema/query/types/query/ComparableSubQuery.java
Patch:
@@ -6,13 +6,14 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.Operator;
+import com.mysema.query.types.Path;
+import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EComparable;
 import com.mysema.query.types.operation.OComparable;
-import com.mysema.query.types.operation.Operator;
 import com.mysema.query.types.operation.Ops;
-import com.mysema.query.types.path.Path;
 
 /**
  * Single result subquery

File: querydsl-core/src/main/java/com/mysema/query/types/query/DateSubQuery.java
Patch:
@@ -6,13 +6,14 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.Operator;
+import com.mysema.query.types.Path;
+import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EDate;
 import com.mysema.query.types.operation.ODate;
-import com.mysema.query.types.operation.Operator;
 import com.mysema.query.types.operation.Ops;
-import com.mysema.query.types.path.Path;
 
 /**
  * Single result subquery

File: querydsl-core/src/main/java/com/mysema/query/types/query/DateTimeSubQuery.java
Patch:
@@ -6,13 +6,14 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.Operator;
+import com.mysema.query.types.Path;
+import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EDateTime;
 import com.mysema.query.types.operation.ODateTime;
-import com.mysema.query.types.operation.Operator;
 import com.mysema.query.types.operation.Ops;
-import com.mysema.query.types.path.Path;
 
 /**
  * Single result subquery

File: querydsl-core/src/main/java/com/mysema/query/types/query/ListSubQuery.java
Patch:
@@ -8,14 +8,15 @@
 import java.util.List;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.Operator;
+import com.mysema.query.types.Path;
+import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.ECollectionBase;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.OSimple;
-import com.mysema.query.types.operation.Operator;
 import com.mysema.query.types.operation.Ops;
-import com.mysema.query.types.path.Path;
 
 /**
  * List result subquery

File: querydsl-core/src/main/java/com/mysema/query/types/query/NumberSubQuery.java
Patch:
@@ -6,13 +6,14 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.Operator;
+import com.mysema.query.types.Path;
+import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.operation.ONumber;
-import com.mysema.query.types.operation.Operator;
 import com.mysema.query.types.operation.Ops;
-import com.mysema.query.types.path.Path;
 
 /**
  * Single result subquery

File: querydsl-core/src/main/java/com/mysema/query/types/query/ObjectSubQuery.java
Patch:
@@ -6,13 +6,14 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.Operator;
+import com.mysema.query.types.Path;
+import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.OSimple;
-import com.mysema.query.types.operation.Operator;
 import com.mysema.query.types.operation.Ops;
-import com.mysema.query.types.path.Path;
 
 /**
  * Single result subquery

File: querydsl-core/src/main/java/com/mysema/query/types/query/StringSubQuery.java
Patch:
@@ -6,13 +6,14 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.Operator;
+import com.mysema.query.types.Path;
+import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EString;
 import com.mysema.query.types.operation.OString;
-import com.mysema.query.types.operation.Operator;
 import com.mysema.query.types.operation.Ops;
-import com.mysema.query.types.path.Path;
 
 /**
  * Single result subquery

File: querydsl-core/src/main/java/com/mysema/query/types/query/SubQueryMixin.java
Patch:
@@ -8,11 +8,12 @@
 import javax.annotation.Nullable;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.Path;
+import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
-import com.mysema.query.types.path.Path;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/types/query/TimeSubQuery.java
Patch:
@@ -6,13 +6,14 @@
 package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
+import com.mysema.query.types.Operator;
+import com.mysema.query.types.Path;
+import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.ETime;
 import com.mysema.query.types.operation.OTime;
-import com.mysema.query.types.operation.Operator;
 import com.mysema.query.types.operation.Ops;
-import com.mysema.query.types.path.Path;
 
 /**
  * Single result subquery

File: querydsl-core/src/test/java/com/mysema/query/CoverageTest.java
Patch:
@@ -19,9 +19,9 @@
 import org.junit.Test;
 
 import com.mysema.query.alias.Alias;
+import com.mysema.query.types.Operation;
+import com.mysema.query.types.Operator;
 import com.mysema.query.types.expr.Expr;
-import com.mysema.query.types.operation.Operation;
-import com.mysema.query.types.operation.Operator;
 import com.mysema.query.types.operation.Ops;
 
 /**

File: querydsl-core/src/test/java/com/mysema/query/Filters.java
Patch:
@@ -11,6 +11,7 @@
 import java.util.HashSet;
 import java.util.List;
 
+import com.mysema.query.types.Path;
 import com.mysema.query.types.expr.EArray;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.ECollection;
@@ -23,7 +24,6 @@
 import com.mysema.query.types.expr.EString;
 import com.mysema.query.types.expr.ETime;
 import com.mysema.query.types.expr.Expr;
-import com.mysema.query.types.path.Path;
 
 /**
  * @author tiwe

File: querydsl-core/src/test/java/com/mysema/query/Projections.java
Patch:
@@ -10,7 +10,7 @@
 import java.util.HashSet;
 
 import com.mysema.query.types.CaseBuilder;
-import com.mysema.query.types.expr.Constant;
+import com.mysema.query.types.Constant;
 import com.mysema.query.types.expr.EArray;
 import com.mysema.query.types.expr.ECollection;
 import com.mysema.query.types.expr.EDate;

File: querydsl-core/src/test/java/com/mysema/query/domain/QCommonPersistence.java
Patch:
@@ -5,9 +5,9 @@
  */
 package com.mysema.query.domain;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * QCommonPersistence is a Querydsl query type for CommonPersistence

File: querydsl-core/src/test/java/com/mysema/query/types/StringTest.java
Patch:
@@ -19,7 +19,6 @@
 
 import com.mysema.query.types.expr.EArrayConstructor;
 import com.mysema.query.types.expr.EConstructor;
-import com.mysema.query.types.operation.Operator;
 import com.mysema.query.types.operation.OperatorImpl;
 import com.mysema.query.types.operation.Ops;
 

File: querydsl-core/src/test/java/com/mysema/query/types/TypesTest.java
Patch:
@@ -10,7 +10,6 @@
 import org.junit.Test;
 
 import com.mysema.query.types.expr.Expr;
-import com.mysema.query.types.path.Path;
 
 // TODO: Auto-generated Javadoc
 /**

File: querydsl-core/src/test/java/com/mysema/query/types/VisitorTest.java
Patch:
@@ -12,8 +12,6 @@
 import org.junit.Test;
 
 import com.mysema.query.types.expr.Expr;
-import com.mysema.query.types.operation.Operation;
-import com.mysema.query.types.path.Path;
 
 
 // TODO: Auto-generated Javadoc

File: querydsl-hibernate-search/src/main/java/com/mysema/query/search/LuceneQuery.java
Patch:
@@ -12,8 +12,8 @@
 import com.mysema.query.SimpleQuery;
 import com.mysema.query.support.QueryMixin;
 import com.mysema.query.types.OrderSpecifier;
+import com.mysema.query.types.Path;
 import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.path.Path;
 
 /**
  * @author tiwe

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLQuery.java
Patch:
@@ -9,10 +9,10 @@
 
 import com.mysema.query.Projectable;
 import com.mysema.query.Query;
+import com.mysema.query.types.Path;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PMap;
-import com.mysema.query.types.path.Path;
 
 /**
  * Query interface for HQL queries

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLQueryBase.java
Patch:
@@ -10,10 +10,10 @@
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.support.ProjectableQuery;
+import com.mysema.query.types.Path;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PMap;
-import com.mysema.query.types.path.Path;
 
 /**
  * HQLQueryBase is a base Query class for HQL

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLQueryMixin.java
Patch:
@@ -12,13 +12,13 @@
 import com.mysema.query.JoinType;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.support.QueryMixin;
+import com.mysema.query.types.Path;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.OSimple;
 import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PMap;
-import com.mysema.query.types.path.Path;
 
 /**
  * @author tiwe

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLSubQuery.java
Patch:
@@ -9,10 +9,10 @@
 
 import com.mysema.query.DefaultQueryMetadata;
 import com.mysema.query.support.DetachableQuery;
+import com.mysema.query.types.Path;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PMap;
-import com.mysema.query.types.path.Path;
 
 /**
  * HQLSubQuery is a subquery builder class for HQL/JPAQL

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLTemplates.java
Patch:
@@ -9,10 +9,10 @@
 import java.util.Collections;
 import java.util.List;
 
+import com.mysema.query.types.Operator;
+import com.mysema.query.types.PathType;
 import com.mysema.query.types.Templates;
-import com.mysema.query.types.operation.Operator;
 import com.mysema.query.types.operation.Ops;
-import com.mysema.query.types.path.PathType;
 
 /**
  * HQLTemplates extends Templates to provide operator patterns for HQL

File: querydsl-hql/src/main/java/com/mysema/query/hql/HibernateSQLSerializer.java
Patch:
@@ -10,8 +10,8 @@
 
 import com.mysema.query.sql.SQLSerializer;
 import com.mysema.query.sql.SQLTemplates;
-import com.mysema.query.types.expr.Constant;
-import com.mysema.query.types.path.Path;
+import com.mysema.query.types.Constant;
+import com.mysema.query.types.Path;
 
 /**
  * @author tiwe

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/AbstractHibernateQuery.java
Patch:
@@ -28,8 +28,8 @@
 import com.mysema.query.SearchResults;
 import com.mysema.query.hql.HQLQueryBase;
 import com.mysema.query.hql.HQLTemplates;
+import com.mysema.query.types.Path;
 import com.mysema.query.types.expr.Expr;
-import com.mysema.query.types.path.Path;
 
 /**
  * Abstract base class for Hibernate API based implementations of the HQLQuery interface

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/HibernateUpdateClause.java
Patch:
@@ -16,9 +16,9 @@
 import com.mysema.query.dml.UpdateClause;
 import com.mysema.query.hql.HQLSerializer;
 import com.mysema.query.hql.HQLTemplates;
+import com.mysema.query.types.Path;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
-import com.mysema.query.types.path.Path;
 
 /**
  * UpdateClause implementation for JPA

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/sql/HibernateSQLQuery.java
Patch:
@@ -28,9 +28,9 @@
 import com.mysema.query.hql.hibernate.SessionHolder;
 import com.mysema.query.hql.hibernate.StatelessSessionHolder;
 import com.mysema.query.sql.SQLTemplates;
+import com.mysema.query.types.Path;
 import com.mysema.query.types.expr.EConstructor;
 import com.mysema.query.types.expr.Expr;
-import com.mysema.query.types.path.Path;
 
 /**
  * HibernateSQLQuery is an SQLQuery implementation that uses Hibernate's Native SQL functionality 

File: querydsl-hql/src/main/java/com/mysema/query/hql/jpa/JPAUpdateClause.java
Patch:
@@ -15,9 +15,9 @@
 import com.mysema.query.dml.UpdateClause;
 import com.mysema.query.hql.HQLSerializer;
 import com.mysema.query.hql.HQLTemplates;
+import com.mysema.query.types.Path;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
-import com.mysema.query.types.path.Path;
 
 /**
  * UpdateClause implementation for JPA

File: querydsl-hql/src/main/java/com/mysema/query/hql/jpa/sql/JPASQLQuery.java
Patch:
@@ -26,9 +26,9 @@
 import com.mysema.query.hql.jpa.JPASessionHolder;
 import com.mysema.query.hql.jpa.JPAUtil;
 import com.mysema.query.sql.SQLTemplates;
+import com.mysema.query.types.Path;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
-import com.mysema.query.types.path.Path;
 
 /**
  * JPASQLQuery is an SQLQuery implementation that uses Hibernate's Native SQL functionality 

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SAccount.java
Patch:
@@ -7,12 +7,12 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SAccount is a Querydsl query type for SAccount

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SAnimal.java
Patch:
@@ -7,13 +7,13 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PComparable;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SAnimal is a Querydsl query type for SAnimal

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SAuditlog.java
Patch:
@@ -7,11 +7,11 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SAuditlog is a Querydsl query type for SAuditlog

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SBar.java
Patch:
@@ -7,12 +7,12 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PComparable;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SBar is a Querydsl query type for SBar

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SCalendar.java
Patch:
@@ -7,11 +7,11 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SCalendar is a Querydsl query type for SCalendar

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SCalendarHolidays.java
Patch:
@@ -7,13 +7,13 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PComparable;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SCalendarHolidays is a Querydsl query type for SCalendarHolidays

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SCatalog.java
Patch:
@@ -7,12 +7,12 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PComparable;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SCatalog is a Querydsl query type for SCatalog

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SCatalogPrice.java
Patch:
@@ -7,11 +7,11 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SCatalogPrice is a Querydsl query type for SCatalogPrice

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SCompany.java
Patch:
@@ -7,12 +7,12 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SCompany is a Querydsl query type for SCompany

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SCustomer.java
Patch:
@@ -7,11 +7,11 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SCustomer is a Querydsl query type for SCustomer

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SDepartment.java
Patch:
@@ -7,12 +7,12 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SDepartment is a Querydsl query type for SDepartment

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SDocument.java
Patch:
@@ -7,13 +7,13 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PComparable;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SDocument is a Querydsl query type for SDocument

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SEmployee.java
Patch:
@@ -7,12 +7,12 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SEmployee is a Querydsl query type for SEmployee

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SFoo.java
Patch:
@@ -7,13 +7,13 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PComparable;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SFoo is a Querydsl query type for SFoo

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SFormula.java
Patch:
@@ -7,11 +7,11 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SFormula is a Querydsl query type for SFormula

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SInheritedproperties.java
Patch:
@@ -7,12 +7,12 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SInheritedproperties is a Querydsl query type for SInheritedproperties

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SItem.java
Patch:
@@ -7,12 +7,12 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SItem is a Querydsl query type for SItem

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SItemStatuschange.java
Patch:
@@ -7,11 +7,11 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SItemStatuschange is a Querydsl query type for SItemStatuschange

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SKittens.java
Patch:
@@ -7,11 +7,11 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SKittens is a Querydsl query type for SKittens

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SKittensArray.java
Patch:
@@ -7,11 +7,11 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SKittensArray is a Querydsl query type for SKittensArray

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SKittensSet.java
Patch:
@@ -7,11 +7,11 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SKittensSet is a Querydsl query type for SKittensSet

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SLocation.java
Patch:
@@ -7,12 +7,12 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SLocation is a Querydsl query type for SLocation

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SName.java
Patch:
@@ -7,12 +7,12 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SName is a Querydsl query type for SName

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SNamed.java
Patch:
@@ -7,12 +7,12 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SNamed is a Querydsl query type for SNamed

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SNamelist.java
Patch:
@@ -7,11 +7,11 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SNamelist is a Querydsl query type for SNamelist

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SNamelistNames.java
Patch:
@@ -7,12 +7,12 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SNamelistNames is a Querydsl query type for SNamelistNames

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SNationality.java
Patch:
@@ -7,11 +7,11 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SNationality is a Querydsl query type for SNationality

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SParameter.java
Patch:
@@ -7,11 +7,11 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SParameter is a Querydsl query type for SParameter

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SPerson.java
Patch:
@@ -7,13 +7,13 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PComparable;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SPerson is a Querydsl query type for SPerson

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SPersonid.java
Patch:
@@ -7,12 +7,12 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SPersonid is a Querydsl query type for SPersonid

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SPlayer.java
Patch:
@@ -7,11 +7,11 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SPlayer is a Querydsl query type for SPlayer

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SPlayerScores.java
Patch:
@@ -7,11 +7,11 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SPlayerScores is a Querydsl query type for SPlayerScores

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SPrice.java
Patch:
@@ -7,11 +7,11 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SPrice is a Querydsl query type for SPrice

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SShow.java
Patch:
@@ -7,11 +7,11 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SShow is a Querydsl query type for SShow

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SShowActs.java
Patch:
@@ -7,12 +7,12 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SShowActs is a Querydsl query type for SShowActs

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SSimpletypes.java
Patch:
@@ -7,13 +7,13 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PComparable;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SSimpletypes is a Querydsl query type for SSimpletypes

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SStatus.java
Patch:
@@ -7,12 +7,12 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SStatus is a Querydsl query type for SStatus

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SStatuschange.java
Patch:
@@ -7,12 +7,12 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PComparable;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SStatuschange is a Querydsl query type for SStatuschange

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SStore.java
Patch:
@@ -7,11 +7,11 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SStore is a Querydsl query type for SStore

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/sql/SStoreCustomer.java
Patch:
@@ -7,11 +7,11 @@
 
 import static com.mysema.query.types.path.PathMetadataFactory.forVariable;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
-import com.mysema.query.types.path.PathMetadata;
 
 /**
  * SStoreCustomer is a Querydsl query type for SStoreCustomer

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/JDOQLSubQuery.java
Patch:
@@ -10,11 +10,11 @@
 import com.mysema.query.DefaultQueryMetadata;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.support.DetachableQuery;
+import com.mysema.query.types.Path;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.OSimple;
 import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.path.PEntity;
-import com.mysema.query.types.path.Path;
 
 /**
  * JDOQLSubQuery is subquery implementation for JDOQL

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/dml/JDOQLUpdateClause.java
Patch:
@@ -8,8 +8,8 @@
 import com.mysema.query.DefaultQueryMetadata;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.dml.UpdateClause;
+import com.mysema.query.types.Path;
 import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.path.Path;
 
 /**
  * UpdateClause implementation for JDO

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/serialization/AbstractTest.java
Patch:
@@ -8,8 +8,8 @@
 import com.mysema.query.jdoql.JDOQLSerializer;
 import com.mysema.query.jdoql.JDOQLSubQuery;
 import com.mysema.query.jdoql.JDOQLTemplates;
+import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.expr.Expr;
-import com.mysema.query.types.query.SubQuery;
 
 public abstract class AbstractTest {
 

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/testdomain/QBook.java
Patch:
@@ -5,11 +5,11 @@
  */
 package com.mysema.query.jdoql.testdomain;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.path.PDateTime;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
-import com.mysema.query.types.path.PathMetadata;
 import com.mysema.query.types.path.PathMetadataFactory;
 
 /**

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/testdomain/QProduct.java
Patch:
@@ -5,13 +5,13 @@
  */
 package com.mysema.query.jdoql.testdomain;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.path.PDate;
 import com.mysema.query.types.path.PDateTime;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
 import com.mysema.query.types.path.PTime;
-import com.mysema.query.types.path.PathMetadata;
 import com.mysema.query.types.path.PathMetadataFactory;
 
 /**

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/testdomain/QStore.java
Patch:
@@ -5,11 +5,11 @@
  */
 package com.mysema.query.jdoql.testdomain;
 
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.path.PCollection;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PMap;
 import com.mysema.query.types.path.PString;
-import com.mysema.query.types.path.PathMetadata;
 import com.mysema.query.types.path.PathMetadataFactory;
 
 /**

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -28,12 +28,12 @@
 import com.mysema.query.support.ProjectableQuery;
 import com.mysema.query.support.QueryMixin;
 import com.mysema.query.types.OrderSpecifier;
+import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EConstructor;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.query.ListSubQuery;
-import com.mysema.query.types.query.SubQuery;
 import com.mysema.util.JDBCUtil;
 import com.mysema.util.ResultSetAdapter;
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLQuery.java
Patch:
@@ -10,11 +10,11 @@
 
 import com.mysema.query.Projectable;
 import com.mysema.query.Query;
+import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.query.ListSubQuery;
-import com.mysema.query.types.query.SubQuery;
 
 /**
  * Query interface for SQL queries

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLTemplates.java
Patch:
@@ -16,9 +16,9 @@
 import com.mysema.query.QueryException;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.QueryModifiers;
+import com.mysema.query.types.PathType;
 import com.mysema.query.types.Templates;
 import com.mysema.query.types.operation.Ops;
-import com.mysema.query.types.path.PathType;
 
 /**
  * SQLTemplates extended Templates to provided SQL specific extensions

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLInsertClause.java
Patch:
@@ -19,11 +19,11 @@
 import com.mysema.query.dml.InsertClause;
 import com.mysema.query.sql.SQLSerializer;
 import com.mysema.query.sql.SQLTemplates;
+import com.mysema.query.types.Path;
+import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.expr.ExprConst;
 import com.mysema.query.types.path.PEntity;
-import com.mysema.query.types.path.Path;
-import com.mysema.query.types.query.SubQuery;
 import com.mysema.util.JDBCUtil;
 
 import edu.umd.cs.findbugs.annotations.SuppressWarnings;

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLUpdateClause.java
Patch:
@@ -20,9 +20,9 @@
 import com.mysema.query.dml.UpdateClause;
 import com.mysema.query.sql.SQLSerializer;
 import com.mysema.query.sql.SQLTemplates;
+import com.mysema.query.types.Path;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.path.PEntity;
-import com.mysema.query.types.path.Path;
 import com.mysema.util.JDBCUtil;
 
 import edu.umd.cs.findbugs.annotations.SuppressWarnings;

File: querydsl-sql/src/test/java/com/mysema/query/SelectBaseTest.java
Patch:
@@ -38,12 +38,12 @@
 import com.mysema.query.sql.SQLSubQuery;
 import com.mysema.query.sql.domain.IdName;
 import com.mysema.query.sql.domain.QIdName;
+import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.expr.ENumberConst;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.query.ObjectSubQuery;
-import com.mysema.query.types.query.SubQuery;
 import com.mysema.testutil.ExcludeIn;
 import com.mysema.testutil.Label;
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/domain/QEmployee.java
Patch:
@@ -8,14 +8,14 @@
 import java.math.BigDecimal;
 
 import com.mysema.query.sql.Table;
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PDate;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
 import com.mysema.query.types.path.PTime;
-import com.mysema.query.types.path.PathMetadata;
 import com.mysema.query.types.path.PathMetadataFactory;
 
 @SuppressWarnings("all")

File: querydsl-sql/src/test/java/com/mysema/query/sql/domain/QSurvey.java
Patch:
@@ -6,12 +6,12 @@
 package com.mysema.query.sql.domain;
 
 import com.mysema.query.sql.Table;
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
-import com.mysema.query.types.path.PathMetadata;
 import com.mysema.query.types.path.PathMetadataFactory;
 
 @SuppressWarnings("all")

File: querydsl-sql/src/test/java/com/mysema/query/sql/domain/QTest_.java
Patch:
@@ -6,11 +6,11 @@
 package com.mysema.query.sql.domain;
 
 import com.mysema.query.sql.Table;
+import com.mysema.query.types.PathMetadata;
 import com.mysema.query.types.custom.CSimple;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PString;
-import com.mysema.query.types.path.PathMetadata;
 import com.mysema.query.types.path.PathMetadataFactory;
 
 @SuppressWarnings("all")

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EStringConst.java
Patch:
@@ -26,12 +26,14 @@
 public final class EStringConst extends EString implements Constant<String>{
     
     private static final Map<String,EString> CACHE;
+    
+    private static final int CACHE_SIZE = 256;
 
     private static final long serialVersionUID = 5182804405789674556L;
     
     static{
         List<String> strs = new ArrayList<String>(Arrays.asList("", ".", ".*", "%"));
-        for (int i = 0; i < 256; i++){
+        for (int i = 0; i < CACHE_SIZE; i++){
             strs.add(String.valueOf(i));
         }
     

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDate.java
Patch:
@@ -50,6 +50,7 @@ public static <T extends Comparable> EDate<T> currentDate(Class<T> cl) {
     @Nullable
     private volatile ENumber<Integer> dayOfMonth, dayOfWeek, dayOfYear;
     
+    @Nullable
     private volatile EDate min, max;
     
     @Nullable

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDateTime.java
Patch:
@@ -70,6 +70,7 @@ public static <T extends Comparable> EDateTime<T> currentTimestamp(Class<T> cl)
     @Nullable
     private volatile ENumber<Integer> hours, minutes, seconds, milliseconds;
     
+    @Nullable
     private volatile EDateTime<D> min, max;
     
     public EDateTime(Class<? extends D> type) {

File: querydsl-hibernate-search/src/main/java/com/mysema/query/search/LuceneQuery.java
Patch:
@@ -1,11 +1,8 @@
 package com.mysema.query.search;
 
-import java.util.List;
-
 import org.hibernate.Session;
 
 import com.mysema.query.QueryModifiers;
-import com.mysema.query.SearchResults;
 import com.mysema.query.SimpleProjectable;
 import com.mysema.query.SimpleQuery;
 import com.mysema.query.support.QueryMixin;

File: querydsl-core/src/main/java/com/mysema/query/types/Templates.java
Patch:
@@ -157,6 +157,7 @@ protected Templates() {
         add(Ops.MathOps.EXP, "exp({0})");
         
         // path types
+        add(PathType.DELEGATE, "{0}");
         add(PathType.PROPERTY, "{0}.{1s}");
         add(PathType.VARIABLE, "{0s}");
         

File: querydsl-apt/src/test/java/com/mysema/query/domain/QueryExtensions2Test.java
Patch:
@@ -15,7 +15,7 @@
 import com.mysema.query.types.path.PathMetadataFactory;
 
 public class QueryExtensions2Test {
-        
+    
     public static class Point{
         
     }

File: querydsl-core/src/main/java/com/mysema/query/codegen/TypeExtends.java
Patch:
@@ -38,6 +38,7 @@ public void appendLocalGenericName(Type context, Appendable builder, boolean asA
         getType().appendLocalGenericName(context, builder, true);
     }
     
+    @Nullable
     public String getVarName(){
         return varName;
     }

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathType.java
Patch:
@@ -47,6 +47,8 @@ public enum PathType implements Operator<Path<?>> {
      */
     VARIABLE(false);
     
+    // TODO : DELEGATE
+    
     private final boolean generic;
     
     PathType(boolean generic){

File: querydsl-apt/src/main/java/com/mysema/query/apt/ElementHandler.java
Patch:
@@ -210,6 +210,9 @@ public void handleQueryMethod(EntityType entityModel, ExecutableElement method,
         String name = method.getSimpleName().toString();
         QueryMethod queryMethod = method.getAnnotation(QueryMethod.class);
         Type returnType = typeFactory.create(method.getReturnType());
+        if (returnType.getCategory() == TypeCategory.ENTITY){
+            returnType = returnType.as(TypeCategory.SIMPLE);
+        }
         Method methodModel = new Method(entityModel, name, queryMethod.value(), transformParams(method.getParameters()), returnType);        
         queryMethods.add(methodModel);
     }

File: querydsl-apt/src/test/java/com/mysema/query/domain/QueryExtensions2Test.java
Patch:
@@ -25,6 +25,9 @@ public interface PointOperations {
 
        @QueryMethod("geo_distance({0}, {1})")
        int geoDistance(Point otherPoint);
+       
+       @QueryMethod("")
+       Point getPoint();
 
     }
     

File: querydsl-core/src/main/java/com/mysema/query/BooleanBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/DefaultQueryMetadata.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/Detachable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/JoinExpression.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/JoinType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/Projectable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/Query.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/QueryException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/QueryMetadata.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/QueryModifiers.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/SearchResults.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/SimpleProjectable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/SimpleQuery.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/alias/Alias.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/alias/AliasFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/alias/ManagedObject.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/alias/MethodType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/alias/PEntityTransformer.java
Patch:
@@ -1,4 +1,6 @@
-/**
+/*
+ * Copyright (c) 2010 Mysema Ltd.
+ * All rights reserved.
  * 
  */
 package com.mysema.query.alias;

File: querydsl-core/src/main/java/com/mysema/query/alias/PropertyAccessInvocationHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/alias/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/annotations/PropertyType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/annotations/QueryEmbeddable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/annotations/QueryEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/annotations/QueryExtensions.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/annotations/QueryInit.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/annotations/QueryMethod.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/annotations/QueryProjection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/annotations/QuerySupertype.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/annotations/QueryTransient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/annotations/QueryType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/annotations/QuerydslConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/annotations/QuerydslVariables.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/annotations/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/codegen/AbstractType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/codegen/ClassType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/codegen/CodeGenerationException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/codegen/Constructor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/codegen/DTOSerializer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/codegen/EmbeddableSerializer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/codegen/EntitySerializer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/codegen/EntityType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/codegen/Parameter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/codegen/Property.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */
@@ -51,7 +51,7 @@ public int compareTo(Property o) {
     }
     
     public Property createCopy(EntityType model) {
-        Type newType = TypeUtil.transform(type, declaringType, model);        
+        Type newType = TypeResolver.resolve(type, declaringType, model);        
         if (newType != type){
             return new Property(model, name, newType, inits, false);
         }else{

File: querydsl-core/src/main/java/com/mysema/query/codegen/Serializer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/codegen/SerializerConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/codegen/SimpleSerializerConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/codegen/SimpleType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/codegen/Supertype.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/codegen/SupertypeSerializer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/codegen/Type.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/codegen/TypeAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/codegen/TypeCategory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/codegen/TypeFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/codegen/TypeMappings.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/codegen/TypeSuper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/codegen/Types.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/codegen/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/dml/DeleteClause.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/dml/InsertClause.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/dml/UpdateClause.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/dml/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/functions/MathFunctions.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/functions/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/paging/EmptyListSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/paging/ListSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/paging/SimpleListSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/serialization/JavaTemplates.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/serialization/SerializerBase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/serialization/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/support/DetachableAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/support/DetachableMixin.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/support/DetachableQuery.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/support/ProjectableAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/support/ProjectableQuery.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/support/QueryBase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/support/QueryMixin.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/support/SimpleQueryAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/support/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/CaseBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/CaseForEqBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/Converter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/EStringEscape.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/Order.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/OrderSpecifier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/Template.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/TemplateFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/Templates.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/ToStringVisitor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/Visitor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CBoolean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CComparable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CDate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CDateTime.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CNumber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CSimple.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CString.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CTime.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/custom/Custom.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CustomMixin.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/custom/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/Constant.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EArray.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EArrayConstructor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EBoolean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EBooleanConst.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ECollection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ECollectionBase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EComparable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EComparableBase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EConstructor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDateConst.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDateOrTime.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDateTime.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDateTimeConst.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EList.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EMap.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EMapBase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ENumber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ENumberConst.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EString.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EStringConst.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ETime.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ETimeConst.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/Expr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ExprConst.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/expr/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OBoolean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OComparable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/operation/ODate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/operation/ODateTime.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/operation/ONumber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OSimple.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OString.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OTime.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/operation/Operation.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OperationMixin.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/operation/Operator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OperatorImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/operation/Ops.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/operation/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/path/PArray.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/path/PBoolean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/path/PCollection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/path/PComparable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/path/PDate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/path/PDateTime.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/path/PEntity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/path/PList.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/path/PMap.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/path/PNumber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/path/PSet.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/path/PSimple.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/path/PString.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/path/PTime.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/path/Path.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathBuilderFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathInits.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathMetadata.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathMetadataFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathMixin.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/path/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/query/BooleanSubQuery.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/query/ComparableSubQuery.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/query/DateSubQuery.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/query/DateTimeSubQuery.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/query/ListSubQuery.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/query/NumberSubQuery.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/query/ObjectSubQuery.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/query/StringSubQuery.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/query/SubQuery.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/query/SubQueryMixin.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/query/TimeSubQuery.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/types/query/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/util/AnnotatedElementAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/util/CodeWriter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/util/JDBCUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/util/JavaSyntaxUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/util/JavaWriter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/util/MathUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/util/MultiIterator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/util/ReflectionUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/util/ResultIterator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/util/ResultSetAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/util/SimpleCompiler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/util/Symbols.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/BooleanBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/CoverageTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/Filters.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/MatchingFilters.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/Module.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/Projections.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/QueryExecution.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/QueryMutability.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/Target.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/alias/AliasTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/alias/ComparablePropertyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/alias/FinalPropertyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/alias/MethodTypeTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/codegen/EntityTypeTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/codegen/ParameterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/codegen/SerializerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/codegen/TypeCategoryTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/codegen/TypeFactoryTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/codegen/TypeTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/types/CaseBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/types/CaseForEqBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/types/OpsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/types/StringTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/types/TemplateTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/types/TypesTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/types/VisitorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/types/custom/CustomTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/types/expr/EConstructorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/types/expr/EDateConstTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/types/expr/EDateTimeConstTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/types/expr/EStringConstTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/types/expr/ETimeConstTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/types/path/PathBuilderFactoryTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/types/path/PathBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/types/path/PathInitsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/test/java/com/mysema/query/types/path/PathTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009 Mysema Ltd.
+ * Copyright (c) 2010 Mysema Ltd.
  * All rights reserved.
  * 
  */

File: querydsl-core/src/main/java/com/mysema/query/codegen/EntityType.java
Patch:
@@ -166,8 +166,7 @@ public boolean hasMaps() {
     public void include(Supertype supertype) {
         EntityType entityType = supertype.getEntityType();
         for (Method method : entityType.getMethods()){
-            // TODO : take type arguments of parameters into account
-            addMethod(method);
+            addMethod(method.createCopy(this));
         }        
         for (Property property : entityType.getProperties()){
             if (!property.isInherited()){                

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -292,11 +292,11 @@ public RT produceNext(ResultSet rs) {
                         }else if (expr.getType().isArray()){
                             Object[] rv = new Object[rs.getMetaData().getColumnCount()];
                             for (int i = 0; i < rv.length; i++){
-                                rv[i] = rs.getObject(i);
+                                rv[i] = rs.getObject(i+1);
                             }
                             return (RT) rv;
                         } else{
-                            return (RT) get(rs, 1, expr != null ? expr.getType() : Object.class);
+                            return (RT) get(rs, 1, expr.getType());
                         }
                     } catch (IllegalAccessException e) {
                         close();

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLSerializer.java
Patch:
@@ -208,6 +208,7 @@ private void serializeForQuery(QueryMetadata metadata, boolean forCountRow) {
             append(templates.getHaving()).handle(having);
         }
 
+        // TODO : this should be injectted
         beforeOrderBy();
 
         // order by

File: querydsl-core/src/main/java/com/mysema/query/DefaultQueryMetadata.java
Patch:
@@ -122,11 +122,11 @@ public void addWhere(EBoolean... o) {
     }    
 
     public void clearOrderBy(){
-        orderBy.clear();
+        orderBy = new ArrayList<OrderSpecifier<?>>();
     }
     
     public void clearProjection(){
-        projection.clear();
+        projection = new ArrayList<Expr<?>>();
     }
     
     public void clearWhere(){
@@ -206,7 +206,7 @@ public boolean isUnique() {
 
     @Override
     public void reset() {
-        projection.clear();
+        clearProjection();
         modifiers = new QueryModifiers();
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PList.java
Patch:
@@ -41,6 +41,7 @@ public class PList<E, Q extends Expr<E>> extends ECollectionBase<List<E>,E> impl
             PComparable.class,
             PDate.class,
             PDateTime.class,
+            PEntity.class,
             PNumber.class,
             PSimple.class, 
             PTime.class         

File: querydsl-core/src/main/java/com/mysema/query/types/path/PMap.java
Patch:
@@ -38,6 +38,7 @@ public class PMap<K, V, E extends Expr<V>> extends EMapBase<K, V> implements Pat
             PComparable.class,
             PDate.class,
             PDateTime.class,
+            PEntity.class,
             PNumber.class,
             PSimple.class, 
             PTime.class            

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/sql/ConstructorResultTransformer.java
Patch:
@@ -21,7 +21,7 @@ public final class ConstructorResultTransformer implements ResultTransformer{
 
     private static final long serialVersionUID = -3625957233853100239L;
 
-    private final transient Constructor<?> constructor;
+    private transient Constructor<?> constructor;
     
     public ConstructorResultTransformer(EConstructor<?> constructor){
         this.constructor = constructor.getJavaConstructor();

File: querydsl-core/src/main/java/com/mysema/query/codegen/Property.java
Patch:
@@ -65,8 +65,7 @@ public Property createCopy(EntityType model) {
             TypeExtends extendsType = (TypeExtends)newType;
             if (extendsType.getVarName() != null){
                 newType = extendsType.resolve(model, declaringType);
-            }
-            
+            }            
         }
         
         if(newType.getParameterCount() > 0){

File: querydsl-sql/src/main/java/com/mysema/query/sql/oracle/SumOver.java
Patch:
@@ -9,6 +9,8 @@
 import java.util.Arrays;
 import java.util.List;
 
+import javax.annotation.Nullable;
+
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.custom.CNumber;
 import com.mysema.query.types.expr.ENumber;
@@ -28,6 +30,7 @@ public class SumOver<A extends Number & Comparable<? super A>> extends ENumber<A
     // TODO : change this to List<OrderSpecifier<?>>
     private List<Expr<?>> orderBy = new ArrayList<Expr<?>>();
     
+    @Nullable
     private Expr<?> partitionBy;
     
     private final Expr<A> target;

File: querydsl-apt/src/test/java/com/mysema/query/domain/Inheritance5Test.java
Patch:
@@ -5,7 +5,6 @@
 import java.io.Serializable;
 import java.util.Date;
 
-import org.junit.Ignore;
 import org.junit.Test;
 
 import com.mysema.query.annotations.QueryEntity;
@@ -50,9 +49,8 @@ public class Entity extends CommonIdentifiable<Long> {
     }
     
     @Test
-    @Ignore
     public void test(){
-        assertEquals(PNumber.class, QInheritance5Test_Entity.entity.id.getType());
+        assertEquals(PNumber.class, QInheritance5Test_Entity.entity.id.getClass());
     }
     
 }

File: querydsl-apt/src/test/java/com/mysema/query/domain/Inheritance6Test.java
Patch:
@@ -5,7 +5,6 @@
 import java.io.Serializable;
 import java.util.Date;
 
-import org.junit.Ignore;
 import org.junit.Test;
 
 import com.mysema.query.annotations.QueryEntity;
@@ -73,9 +72,8 @@ public void gloss_subtype_should_contain_fields_from_top_superclass() {
     }
 
     @Test
-    @Ignore
     public void gloss_subtype_should_contain_id_from_top_superclass() {
-        assertEquals(PNumber.class, QInheritance6Test_Gloss.gloss.id.getType());
+        assertEquals(PNumber.class, QInheritance6Test_Gloss.gloss.id.getClass());
     }
 
 }
\ No newline at end of file

File: querydsl-core/src/main/java/com/mysema/query/codegen/TypeExtends.java
Patch:
@@ -15,7 +15,6 @@
  * @author tiwe
  *
  */
-// TODO : take varName into account
 public class TypeExtends extends TypeAdapter{
 
     @Nullable

File: querydsl-core/src/main/java/com/mysema/query/codegen/TypeSuper.java
Patch:
@@ -15,7 +15,6 @@
  * @author tiwe
  *
  */
-// TODO : take varName into account
 public class TypeSuper extends TypeAdapter{
     
     private final Type superType;

File: querydsl-core/src/main/java/com/mysema/query/dml/DeleteClause.java
Patch:
@@ -12,17 +12,17 @@
  * 
  * @author tiwe
  *
- * @param <Q>
+ * @param <C>
  */
-public interface DeleteClause<Q extends DeleteClause<Q>> {
+public interface DeleteClause<C extends DeleteClause<C>> {
 
     /**
      * Defines the filter constraints
      * 
      * @param o
      * @return
      */
-    Q where(EBoolean... o);
+    C where(EBoolean... o);
     
     /**
      * Execute the delete clause and return the amount of deleted rows/items

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/sql/HibernateSQLQuery.java
Patch:
@@ -88,13 +88,13 @@ public HibernateSQLQuery clone(Session session){
         return new HibernateSQLQuery(new DefaultSessionHolder(session), sqlTemplates, getMetadata().clone());
     }
 
-    public org.hibernate.SQLQuery createQuery(Expr<?>... args){
+    public Query createQuery(Expr<?>... args){
         queryMixin.addToProjection(args);
         return createQuery(toQueryString());   
     }
 
     @SuppressWarnings("unchecked")
-    private org.hibernate.SQLQuery createQuery(String queryString) {
+    private Query createQuery(String queryString) {
         logQuery(queryString);
         org.hibernate.SQLQuery query = session.createSQLQuery(queryString);
         // set constants
@@ -194,7 +194,7 @@ protected String toQueryString(){
 
     @SuppressWarnings("unchecked")
     public <RT> RT uniqueResult(Expr<RT> expr) {
-        org.hibernate.SQLQuery query = createQuery(expr);
+        Query query = createQuery(expr);
         reset();
         return (RT) query.uniqueResult();
     }

File: querydsl-sql/src/test/java/com/mysema/query/Connections.java
Patch:
@@ -19,8 +19,6 @@
  */
 public final class Connections {
     
-    // TODO : make mssql work
-    
     private static ThreadLocal<Connection> connHolder = new ThreadLocal<Connection>();
 
     private static final String CREATE_TABLE_DATETEST = "create table date_test(date_test date)";

File: querydsl-core/src/main/java/com/mysema/query/Projectable.java
Patch:
@@ -5,7 +5,6 @@
  */
 package com.mysema.query;
 
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 

File: querydsl-core/src/main/java/com/mysema/util/JDBCUtil.java
Patch:
@@ -37,7 +37,7 @@ public static void setParameters(PreparedStatement stmt, Collection<Object> obje
     }
     
     private static void setParameter(PreparedStatement stmt, int i, Object o) throws NoSuchMethodException, 
-        SecurityException, IllegalAccessException, InvocationTargetException {
+        IllegalAccessException, InvocationTargetException {
         Class<?> type = o.getClass();        
         String methodName = "set" + type.getSimpleName();
         if (methodName.equals("setInteger")) {

File: querydsl-hql/src/main/java/com/mysema/query/hql/support/ExtendedDerbyDialect.java
Patch:
@@ -23,7 +23,7 @@ public class ExtendedDerbyDialect extends DerbyDialect{
     
     private static final CastFunction castFunction = new CastFunction(){
         @SuppressWarnings("unchecked")
-        public String render(List args, SessionFactoryImplementor factory) throws QueryException {
+        public String render(List args, SessionFactoryImplementor factory) {
             if (args.get(1).equals("string")){
                 return super.render(Arrays.<Object>asList("char("+args.get(0)+")",args.get(1)), factory);    
             }else{

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -283,7 +283,7 @@ public <RT> SearchResults<RT> listResults(Expr<RT> expr) {
     }
 
     @SuppressWarnings("unchecked")
-    private <RT> CloseableIterator<RT> iterateSingle(final @Nullable Expr<RT> expr) {
+    private <RT> CloseableIterator<RT> iterateSingle(@Nullable final Expr<RT> expr) {
         String queryString = buildQueryString(false);
         logger.debug("query : {}", queryString);
         try {

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLTypeMapping.java
Patch:
@@ -69,8 +69,7 @@ public final class SQLTypeMapping {
         sqlToJavaType.put(Types.REF, Object.class);
         sqlToJavaType.put(Types.ROWID, Object.class);
         sqlToJavaType.put(Types.STRUCT, Object.class);
-        sqlToJavaType.put(Types.VARBINARY, Object.class);
-        
+        sqlToJavaType.put(Types.VARBINARY, Object.class);        
     }
 
     @Nullable

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLInsertClause.java
Patch:
@@ -72,7 +72,7 @@ public SQLInsertClause columns(Path<?>... columns) {
     }
 
     public long execute() {
-        SQLSerializer serializer = new SQLSerializer(templates);
+        SQLSerializer serializer = new SQLSerializer(templates, true);
         serializer.serializeForInsert(entity, columns, values, subQuery);
         String queryString = serializer.toString();
         logger.debug(queryString);

File: querydsl-sql/src/main/java/com/mysema/query/sql/OracleTemplates.java
Patch:
@@ -54,7 +54,6 @@ public OracleTemplates(){
         add(Ops.DateTimeOps.MINUTE, "to_number(to_char({0},'MI'))");
         add(Ops.DateTimeOps.SECOND, "to_number(to_char({0},'SS'))");
         
-        
         setLimitAndOffsetSymbols(false);
         setRequiresWhereForPagingSymbols(true);
         setLimitTemplate("rownum < %1$s");

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLSerializer.java
Patch:
@@ -39,6 +39,8 @@
  */
 public final class HQLSerializer extends SerializerBase<HQLSerializer> {
 
+    private static final String SELECT_COUNT_DISTINCT = "select count(distinct ";
+
     private static final String AS = " as ";
 
     private static final String COMMA = ", ";
@@ -142,7 +144,7 @@ public void serialize(QueryMetadata metadata, boolean forCountRow, @Nullable Str
             if (!metadata.isDistinct()){
                 append(SELECT_COUNT_ALL);
             }else{
-                append("select count(distinct ");
+                append(SELECT_COUNT_DISTINCT);
                 if(!select.isEmpty()){
                     handle(COMMA, select);    
                 }else{

File: querydsl-core/src/main/java/com/mysema/query/codegen/EntitySerializer.java
Patch:
@@ -234,8 +234,7 @@ protected void introClassHeader(CodeWriter writer, EntityType model) throws IOEx
 
     protected void introDefaultInstance(CodeWriter writer, EntityType model) throws IOException {
         String simpleName = model.getUncapSimpleName();
-        String queryType = typeMappings.getPathType(model, model, true);
-        
+        String queryType = typeMappings.getPathType(model, model, true);        
         writer.publicStaticFinal(queryType, simpleName, NEW + queryType + "(\"" + simpleName + "\")");
     }
 

File: querydsl-core/src/main/java/com/mysema/query/DefaultQueryMetadata.java
Patch:
@@ -81,6 +81,7 @@ public void addHaving(EBoolean... o) {
         }            
     }
 
+    @java.lang.SuppressWarnings("unchecked")
     @SuppressWarnings("unchecked")
     @Override
     public void addJoin(JoinType joinType, Expr<?> expr) {

File: querydsl-apt/src/main/java/com/mysema/query/apt/APTTypeFactory.java
Patch:
@@ -265,8 +265,8 @@ private List<String> createKey(TypeMirror type, boolean useTypeArgs, boolean dee
         return key;        
     }
 
-    private Set<EntityType> getSupertypes(TypeMirror type, Type value) {                 
-        type = normalize(type);        
+    private Set<EntityType> getSupertypes(TypeMirror t, Type value) {                 
+        TypeMirror type = normalize(t);        
         Set<EntityType> superTypes = Collections.emptySet();
         if (type.getKind() == TypeKind.DECLARED){
             DeclaredType declaredType = (DeclaredType)type;

File: querydsl-core/src/main/java/com/mysema/query/types/Visitor.java
Patch:
@@ -54,6 +54,6 @@ public interface Visitor {
     /**
      * @param query
      */
-    void visit(SubQuery query);
+    void visit(SubQuery<?> query);
     
 }

File: querydsl-core/src/main/java/com/mysema/query/codegen/EntitySerializer.java
Patch:
@@ -14,7 +14,6 @@
 import static com.mysema.util.Symbols.QUOTE;
 import static com.mysema.util.Symbols.RETURN;
 import static com.mysema.util.Symbols.SEMICOLON;
-import static com.mysema.util.Symbols.SERIAL;
 import static com.mysema.util.Symbols.SPACE;
 import static com.mysema.util.Symbols.STAR;
 import static com.mysema.util.Symbols.SUPER;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PCollection.java
Patch:
@@ -12,7 +12,6 @@
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.ECollectionBase;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * PCollection represents collection paths

File: querydsl-core/src/main/java/com/mysema/query/types/path/PSet.java
Patch:
@@ -12,7 +12,6 @@
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.ECollectionBase;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * PSet represents set paths

File: querydsl-core/src/main/java/com/mysema/query/types/query/BooleanSubQuery.java
Patch:
@@ -8,7 +8,6 @@
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * Single result subquery

File: querydsl-core/src/main/java/com/mysema/query/types/query/ComparableSubQuery.java
Patch:
@@ -9,7 +9,6 @@
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EComparable;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * Single result subquery

File: querydsl-core/src/main/java/com/mysema/query/types/query/DateSubQuery.java
Patch:
@@ -9,7 +9,6 @@
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EDate;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * Single result subquery

File: querydsl-core/src/main/java/com/mysema/query/types/query/DateTimeSubQuery.java
Patch:
@@ -9,7 +9,6 @@
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EDateTime;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * Single result subquery

File: querydsl-core/src/main/java/com/mysema/query/types/query/ListSubQuery.java
Patch:
@@ -11,7 +11,6 @@
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.ECollectionBase;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * List result subquery

File: querydsl-core/src/main/java/com/mysema/query/types/query/NumberSubQuery.java
Patch:
@@ -9,7 +9,6 @@
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.ENumber;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * Single result subquery

File: querydsl-core/src/main/java/com/mysema/query/types/query/StringSubQuery.java
Patch:
@@ -9,7 +9,6 @@
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EString;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * Single result subquery

File: querydsl-core/src/main/java/com/mysema/query/types/query/TimeSubQuery.java
Patch:
@@ -9,7 +9,6 @@
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.ETime;
-import com.mysema.query.types.expr.Expr;
 
 /**
  * Single result subquery

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -35,13 +35,15 @@
 import com.mysema.query.types.query.SubQuery;
 import com.mysema.util.JDBCUtil;
 
+import edu.umd.cs.findbugs.annotations.SuppressWarnings;
+
 /**
  * AbstractSqlQuery is the base type for SQL query implementations
  * 
  * @author tiwe
  * @version $Id$
  */
-@edu.umd.cs.findbugs.annotations.SuppressWarnings("SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING")
+@SuppressWarnings("SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING")
 public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>>
         extends ProjectableQuery<Q>{
     

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLSerializer.java
Patch:
@@ -25,7 +25,6 @@
 import com.mysema.query.types.operation.Operator;
 import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.path.PEntity;
-import com.mysema.query.types.path.Path;
 import com.mysema.query.types.query.SubQuery;
 
 /**

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLDeleteClause.java
Patch:
@@ -19,13 +19,15 @@
 import com.mysema.query.types.path.PEntity;
 import com.mysema.util.JDBCUtil;
 
+import edu.umd.cs.findbugs.annotations.SuppressWarnings;
+
 /**
  * SQLDeleteClause defines a DELETE clause
  * 
  * @author tiwe
  *
  */
-@edu.umd.cs.findbugs.annotations.SuppressWarnings("SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING")
+@SuppressWarnings("SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING")
 public class SQLDeleteClause implements DeleteClause<SQLDeleteClause>{
 
     private final QueryMetadata metadata = new DefaultQueryMetadata();

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLInsertClause.java
Patch:
@@ -19,7 +19,9 @@
 import com.mysema.query.types.path.PEntity;
 import com.mysema.util.JDBCUtil;
 
-@edu.umd.cs.findbugs.annotations.SuppressWarnings("SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING")
+import edu.umd.cs.findbugs.annotations.SuppressWarnings;
+
+@SuppressWarnings("SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING")
 public class SQLInsertClause {
     
     private final PEntity<?> entity;
@@ -38,7 +40,6 @@ public SQLInsertClause(Connection connection, SQLTemplates templates, PEntity<?>
         this.entity = entity;    
     }
     
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings("SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING")
     public long execute() {
         SQLSerializer serializer = new SQLSerializer(templates);
         serializer.serializeForInsert(entity, columns, values);

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLUpdateClause.java
Patch:
@@ -20,13 +20,15 @@
 import com.mysema.query.types.path.Path;
 import com.mysema.util.JDBCUtil;
 
+import edu.umd.cs.findbugs.annotations.SuppressWarnings;
+
 /**
  * SQLUpdateClause defines a UPDATE clause
  * 
  * @author tiwe
  *
  */
-@edu.umd.cs.findbugs.annotations.SuppressWarnings("SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING")
+@SuppressWarnings("SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING")
 public class SQLUpdateClause implements UpdateClause<SQLUpdateClause>{
     
     private final QueryMetadata metadata = new DefaultQueryMetadata();

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -41,6 +41,7 @@
  * @author tiwe
  * @version $Id$
  */
+@edu.umd.cs.findbugs.annotations.SuppressWarnings("SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING")
 public abstract class AbstractSQLQuery<Q extends AbstractSQLQuery<Q>>
         extends ProjectableQuery<Q>{
     

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLDeleteClause.java
Patch:
@@ -25,6 +25,7 @@
  * @author tiwe
  *
  */
+@edu.umd.cs.findbugs.annotations.SuppressWarnings("SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING")
 public class SQLDeleteClause implements DeleteClause<SQLDeleteClause>{
 
     private final QueryMetadata metadata = new DefaultQueryMetadata();

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLUpdateClause.java
Patch:
@@ -26,6 +26,7 @@
  * @author tiwe
  *
  */
+@edu.umd.cs.findbugs.annotations.SuppressWarnings("SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING")
 public class SQLUpdateClause implements UpdateClause<SQLUpdateClause>{
     
     private final QueryMetadata metadata = new DefaultQueryMetadata();

File: querydsl-core/src/main/java/com/mysema/query/dml/DeleteClause.java
Patch:
@@ -12,17 +12,17 @@
  * 
  * @author tiwe
  *
- * @param <SubType>
+ * @param <Q>
  */
-public interface DeleteClause<SubType extends DeleteClause<SubType>> {
+public interface DeleteClause<Q extends DeleteClause<Q>> {
 
     /**
      * Defines the filter constraints
      * 
      * @param o
      * @return
      */
-    SubType where(EBoolean... o);
+    Q where(EBoolean... o);
     
     /**
      * Execute the delete clause and return the amount of deleted rows/items

File: querydsl-core/src/main/java/com/mysema/query/support/DetachableQuery.java
Patch:
@@ -29,13 +29,13 @@
 /**
  * @author tiwe
  *
- * @param <SubType>
+ * @param <Q>
  */
-public class DetachableQuery <SubType extends DetachableQuery<SubType>> extends QueryBase<SubType> implements Detachable {
+public class DetachableQuery <Q extends DetachableQuery<Q>> extends QueryBase<Q> implements Detachable {
 
     private final DetachableMixin detachableMixin;
     
-    public DetachableQuery(QueryMixin<SubType> queryMixin) {
+    public DetachableQuery(QueryMixin<Q> queryMixin) {
         super(queryMixin);
         this.detachableMixin = new DetachableMixin(queryMixin);
     }

File: querydsl-core/src/main/java/com/mysema/query/support/ProjectableQuery.java
Patch:
@@ -25,10 +25,10 @@
  * @author tiwe
  * @version $Id$
  */
-public abstract class ProjectableQuery<SubType extends ProjectableQuery<SubType>>
-        extends QueryBase<SubType> implements Projectable {
+public abstract class ProjectableQuery<Q extends ProjectableQuery<Q>>
+        extends QueryBase<Q> implements Projectable {
 
-    public ProjectableQuery(QueryMixin<SubType> queryMixin) {
+    public ProjectableQuery(QueryMixin<Q> queryMixin) {
         super(queryMixin);
     }
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/jpa/AbstractJPAQuery.java
Patch:
@@ -28,9 +28,9 @@
  * 
  * @author tiwe
  *
- * @param <SubType>
+ * @param <Q>
  */
-public abstract class AbstractJPAQuery<SubType extends AbstractJPAQuery<SubType>> extends HQLQueryBase<SubType> {
+public abstract class AbstractJPAQuery<Q extends AbstractJPAQuery<Q>> extends HQLQueryBase<Q> {
 
     private static final Logger logger = LoggerFactory.getLogger(JPAQuery.class);
     

File: querydsl-apt/src/main/java/com/mysema/query/apt/Configuration.java
Patch:
@@ -14,7 +14,7 @@
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
 
-import com.mysema.query.codegen.EntityModel;
+import com.mysema.query.codegen.EntityType;
 import com.mysema.query.codegen.Serializer;
 import com.mysema.query.codegen.SerializerConfig;
 import com.mysema.query.codegen.TypeMappings;
@@ -74,7 +74,7 @@ public interface Configuration {
      * @param model
      * @return
      */
-    SerializerConfig getSerializerConfig(EntityModel model);
+    SerializerConfig getSerializerConfig(EntityType model);
 
     /**
      * @return

File: querydsl-apt/src/main/java/com/mysema/query/apt/DefaultConfiguration.java
Patch:
@@ -25,7 +25,7 @@
 import com.mysema.query.annotations.QuerydslConfig;
 import com.mysema.query.codegen.DTOSerializer;
 import com.mysema.query.codegen.EmbeddableSerializer;
-import com.mysema.query.codegen.EntityModel;
+import com.mysema.query.codegen.EntityType;
 import com.mysema.query.codegen.EntitySerializer;
 import com.mysema.query.codegen.Serializer;
 import com.mysema.query.codegen.SerializerConfig;
@@ -134,7 +134,7 @@ public String getNamePrefix() {
     }
 
     @Override
-    public SerializerConfig getSerializerConfig(EntityModel model) {
+    public SerializerConfig getSerializerConfig(EntityType model) {
         if (typeToConfig.containsKey(model.getFullName())){
             return typeToConfig.get(model.getFullName());
         }else if (packageToConfig.containsKey(model.getPackageName())){

File: querydsl-apt/src/test/java/com/mysema/query/domain/Inheritance2Test.java
Patch:
@@ -16,12 +16,12 @@ public abstract class Base<T extends Base<T>>{
         Base2 base;
         Base2<?,?> base2;        
     }
-    
+        
     @QueryEntity
     public abstract class Base2<T extends Base2<T,U>,U extends IFace>{
         
     }
-    
+
     @QueryEntity
     public abstract class BaseSub extends Base<BaseSub>{
         

File: querydsl-apt/src/test/java/com/mysema/query/domain/InheritanceTest.java
Patch:
@@ -65,6 +65,7 @@ public interface Rimmable{
         
     }
     
+    @QueryEntity
     public abstract class Storable extends Merchandise{
         
     }

File: querydsl-core/src/test/java/com/mysema/query/codegen/EntityTypeTest.java
Patch:
@@ -14,7 +14,7 @@
 import com.mysema.query.annotations.QueryExtensions;
 import com.mysema.util.JavaWriter;
 
-public class EntityModelTest {
+public class EntityTypeTest {
 
     public static class QueryExt implements QueryExtensions{
         
@@ -37,8 +37,8 @@ public Class<? extends Annotation> annotationType() {
     @Test
     public void annotation() throws IOException{
         Annotation annotation = new QueryExt(Object.class);
-        ClassTypeModel typeModel = new ClassTypeModel(TypeCategory.ENTITY, Object.class);
-        EntityModel entityModel = new EntityModel("Q", typeModel);
+        ClassType typeModel = new ClassType(TypeCategory.ENTITY, Object.class);
+        EntityType entityModel = new EntityType("Q", typeModel);
         entityModel.addAnnotation(annotation);
         
         TypeMappings typeMappings = new TypeMappings();

File: querydsl-core/src/test/java/com/mysema/query/codegen/TypeTest.java
Patch:
@@ -9,11 +9,11 @@
 
 import org.junit.Test;
 
-public class TypeModelTest {
+public class TypeTest {
     
     @Test
     public void arrayType(){
-        assertEquals("Object[]",TypeModels.OBJECTS.getLocalRawName(TypeModels.OBJECT));
+        assertEquals("Object[]",Types.OBJECTS.getLocalRawName(Types.OBJECT));
     }
 
 }

File: querydsl-apt/src/main/java/com/mysema/query/apt/jpa/JPAConfiguration.java
Patch:
@@ -61,9 +61,9 @@ public VisitorConfig getConfig(TypeElement e, List<? extends Element> elements){
         boolean fields = false, methods = false;
         for (Element element : elements){
             if (hasRelevantAnnotation(element)){
-                if (!fields && element.getKind().equals(ElementKind.FIELD)){
+                if (element.getKind().equals(ElementKind.FIELD)){
                     fields = true;
-                }else if (!methods && element.getKind().equals(ElementKind.METHOD)){
+                }else if (element.getKind().equals(ElementKind.METHOD)){
                     methods = true;
                 }    
             }            

File: querydsl-apt/src/test/java/com/mysema/query/domain/p5/DateEnabled.java
Patch:
@@ -1,4 +1,6 @@
-/**
+/*
+ * Copyright (c) 2009 Mysema Ltd.
+ * All rights reserved.
  * 
  */
 package com.mysema.query.domain.p5;

File: querydsl-apt/src/test/java/com/mysema/query/domain/p5/Entity1.java
Patch:
@@ -1,4 +1,6 @@
-/**
+/*
+ * Copyright (c) 2009 Mysema Ltd.
+ * All rights reserved.
  * 
  */
 package com.mysema.query.domain.p5;

File: querydsl-apt/src/test/java/com/mysema/query/domain/p5/Entity2.java
Patch:
@@ -1,4 +1,6 @@
-/**
+/*
+ * Copyright (c) 2009 Mysema Ltd.
+ * All rights reserved.
  * 
  */
 package com.mysema.query.domain.p5;

File: querydsl-apt/src/test/java/com/mysema/query/domain/p5/IdEntity.java
Patch:
@@ -1,4 +1,6 @@
-/**
+/*
+ * Copyright (c) 2009 Mysema Ltd.
+ * All rights reserved.
  * 
  */
 package com.mysema.query.domain.p5;

File: querydsl-core/src/main/java/com/mysema/query/serialization/JavaTemplates.java
Patch:
@@ -91,7 +91,6 @@ public JavaTemplates() {
         add(Ops.CASE_EQ, "({0})");
         add(Ops.CASE_EQ_WHEN,  "({0} == {1}) ? ({2}) : ({3})");
         add(Ops.CASE_EQ_ELSE,  "{0}");
-
         
         // Math
         try {

File: querydsl-core/src/main/java/com/mysema/query/types/ToStringVisitor.java
Patch:
@@ -20,7 +20,7 @@
  * @author tiwe
  * @version $Id$
  */
-public final class ToStringVisitor extends VisitorBase<ToStringVisitor> {
+public final class ToStringVisitor implements Visitor{
 
     private final Templates templates;
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/Expr.java
Patch:
@@ -222,7 +222,9 @@ public final EBoolean notIn(ECollection<?,? extends D> right) {
     @Override
     public final String toString() {
         if (toString == null) {
-            toString = new ToStringVisitor(Templates.DEFAULT).handle(this).toString();
+            Visitor visitor = new ToStringVisitor(Templates.DEFAULT);
+            this.accept(visitor);
+            toString = visitor.toString();
         }
         return toString;
     }

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/JDOQLQuery.java
Patch:
@@ -22,6 +22,8 @@
 public interface JDOQLQuery extends Query<JDOQLQuery>, Projectable, Closeable {
 
     /**
+     * Clone the state of the query for the given PersistenceManager
+     * 
      * @param persistenceManager
      * @return
      */

File: querydsl-core/src/main/java/com/mysema/query/types/Template.java
Patch:
@@ -37,7 +37,7 @@ public static final class Element implements Serializable{
         private final String staticText;
         
         @Nullable
-        private transient final Converter<?,?> converter;
+        private final transient Converter<?,?> converter;
         
         private final boolean asString;
         

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EStringConst.java
Patch:
@@ -47,7 +47,7 @@ public final class EStringConst extends EString implements Constant<String>{
      * @param str
      * @return
      */
-    public static final EString create(String str){
+    public static EString create(String str){
         return create(str, false);
     }
     

File: querydsl-core/src/main/java/com/mysema/query/types/operation/Ops.java
Patch:
@@ -121,11 +121,11 @@ public interface Ops {
     // subquery operations
     Operator<Boolean> EXISTS = new OperatorImpl<Boolean>(Object.class);
 
-    public static final List<Operator<?>> equalsOps = unmodifiableList(Arrays.<Operator<?>> asList(EQ_OBJECT, EQ_PRIMITIVE));
+    List<Operator<?>> equalsOps = unmodifiableList(Arrays.<Operator<?>> asList(EQ_OBJECT, EQ_PRIMITIVE));
 
-    public static final List<Operator<?>> notEqualsOps = unmodifiableList(Arrays.<Operator<?>> asList(NE_OBJECT, NE_PRIMITIVE));
+    List<Operator<?>> notEqualsOps = unmodifiableList(Arrays.<Operator<?>> asList(NE_OBJECT, NE_PRIMITIVE));
 
-    public static final List<Operator<?>> compareOps = unmodifiableList(Arrays.<Operator<?>> asList(EQ_OBJECT, EQ_PRIMITIVE,LT, GT, GOE, LOE));
+    List<Operator<?>> compareOps = unmodifiableList(Arrays.<Operator<?>> asList(EQ_OBJECT, EQ_PRIMITIVE,LT, GT, GOE, LOE));
 
     /**
      * Aggreation operators

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLQueryBase.java
Patch:
@@ -8,8 +8,6 @@
 import java.util.Collection;
 import java.util.Map;
 
-import javax.annotation.Nullable;
-
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.support.ProjectableQuery;
 import com.mysema.query.types.expr.EBoolean;

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/AbstractHibernateQuery.java
Patch:
@@ -25,7 +25,6 @@
 import com.mysema.query.hql.HQLQueryBase;
 import com.mysema.query.hql.HQLTemplates;
 import com.mysema.query.types.expr.Expr;
-import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.path.Path;
 
 /**

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/sql/ConstructorResultTransformer.java
Patch:
@@ -21,7 +21,7 @@ public final class ConstructorResultTransformer implements ResultTransformer{
 
     private static final long serialVersionUID = -3625957233853100239L;
 
-    private transient final Constructor<?> constructor;
+    private final transient Constructor<?> constructor;
     
     public ConstructorResultTransformer(EConstructor<?> constructor){
         this.constructor = constructor.getJavaConstructor();

File: querydsl-core/src/main/java/com/mysema/query/codegen/PropertyModel.java
Patch:
@@ -53,8 +53,7 @@ public int compareTo(PropertyModel o) {
     }
 
     public PropertyModel createCopy(EntityModel model) {
-        boolean inherited = model.getSuperModel() != null;
-        return new PropertyModel(model, name, type, inits, inherited);
+        return new PropertyModel(model, name, type, inits, model.getSuperModel() != null);
     }
 
     public boolean equals(Object o) {

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDateConst.java
Patch:
@@ -28,7 +28,7 @@ public static <D extends java.util.Date> EDate<D> create(D date){
     @SuppressWarnings("unchecked")
     public EDateConst(D date) {
         super((Class<D>)date.getClass());
-        this.date = date;
+        this.date = (D) date.clone();
         this.calendar = Calendar.getInstance();
         calendar.setTime(date);
     }

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ETimeConst.java
Patch:
@@ -29,7 +29,7 @@ public static <D extends java.util.Date> ETime<D> create(D time){
     public ETimeConst(D time) {
         super((Class<D>)time.getClass());
         this.calendar = Calendar.getInstance();
-        this.time = time;
+        this.time = (D) time.clone();
         calendar.setTime(time);
     }
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -5,6 +5,7 @@
  */
 package com.mysema.query.sql;
 
+import java.lang.reflect.InvocationTargetException;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
@@ -118,7 +119,8 @@ public SubType fullJoin(PEntity<?> target) {
     }
 
     @SuppressWarnings("unchecked")
-    private <T> T get(ResultSet rs, int i, Class<T> type) throws Exception {
+    private <T> T get(ResultSet rs, int i, Class<T> type) throws SecurityException, 
+        IllegalAccessException, InvocationTargetException, NoSuchMethodException{
         String methodName = "get" + type.getSimpleName();
         if (methodName.equals("getInteger")) {
             methodName = "getInt";

File: querydsl-core/src/main/java/com/mysema/query/serialization/SerializerBase.java
Patch:
@@ -34,7 +34,7 @@
 public abstract class SerializerBase<SubType extends SerializerBase<SubType>> extends VisitorBase<SubType> {
 
     @SuppressWarnings("unchecked")
-    private final SubType _this = (SubType) this;
+    private final SubType self = (SubType) this;
 
     private final StringBuilder builder = new StringBuilder();
     
@@ -52,7 +52,7 @@ public SubType append(String... str) {
         for (String s : str) {
             builder.append(s);
         }
-        return _this;
+        return self;
     }
     
     protected String getConstantPrefix() {
@@ -76,7 +76,7 @@ public final SubType handle(String sep, List<? extends Expr<?>> expressions) {
             handle(expr);
             first = false;
         }
-        return _this;
+        return self;
     }
 
     public void setConstantPrefix(String prefix){

File: querydsl-core/src/main/java/com/mysema/util/JDBCUtil.java
Patch:
@@ -14,7 +14,9 @@
  * @author tiwe
  *
  */
-public class JDBCUtil {
+public final class JDBCUtil {
+    
+    private JDBCUtil(){}
     
     public static void setParameters(PreparedStatement stmt, Collection<Object> objects){
         int counter = 1;

File: querydsl-core/src/main/java/com/mysema/util/JavaSyntaxUtils.java
Patch:
@@ -9,7 +9,9 @@
 import java.util.HashSet;
 import java.util.Set;
 
-public class JavaSyntaxUtils {
+public final class JavaSyntaxUtils {
+    
+    private JavaSyntaxUtils(){}
     
     private static final Set<String> reserved = new HashSet<String>(Arrays.asList(
     "abstract",    

File: querydsl-hql/src/main/java/com/mysema/query/hql/jpa/sql/JPASQLQuery.java
Patch:
@@ -44,8 +44,6 @@
 // TODO : add support for constructor projections
 public final class JPASQLQuery extends AbstractSQLQuery<JPASQLQuery>{
     
-    private static final ENumber<Integer> COUNT_ALL_AGG_EXPR = ONumber.create(Integer.class, Ops.AggOps.COUNT_ALL_AGG);
-    
     private static final Logger logger = LoggerFactory.getLogger(JPASQLQuery.class);
         
     private Map<Object,String> constants;

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/dml/JDOQLUpdateClause.java
Patch:
@@ -42,7 +42,7 @@ public JDOQLUpdateClause(PersistenceManager persistenceManager, PEntity<?> entit
     @Override
     public long execute() {
         // TODO : implement
-        throw new RuntimeException("Not yet implemented");
+        throw new UnsupportedOperationException("Not yet implemented");
     }
 
     @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -327,8 +327,7 @@ private long unsafeCount() throws SQLException {
             JDBCUtil.setParameters(stmt, constants);            
             rs = stmt.executeQuery();
             rs.next();
-            long rv = rs.getLong(1);
-            return rv;
+            return rs.getLong(1);
         }catch(SQLException e){
             logger.error("Caught " + e.getClass().getName() + " for : " + queryString);
             throw new QueryException(e.getMessage(), e);

File: querydsl-sql/src/main/java/com/mysema/query/sql/oracle/SumOver.java
Patch:
@@ -21,9 +21,10 @@
  * @author tiwe
  * @version $Id$
  */
-@SuppressWarnings("serial")
 public class SumOver<A extends Number & Comparable<? super A>> extends ENumber<A> {
     
+    private static final long serialVersionUID = -4130672293308756779L;
+
     private final Expr<A> target;
     
     private Expr<?> partitionBy;

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ENumber.java
Patch:
@@ -27,6 +27,7 @@ public abstract class ENumber<D extends Number & Comparable<?>> extends ECompara
    
     private static final long serialVersionUID = -5485902768703364888L;
 
+    @Nullable
     private static volatile ENumber<Double> RANDOM;
         
     /**

File: querydsl-apt/src/main/java/com/mysema/query/apt/Processor.java
Patch:
@@ -5,6 +5,7 @@
  */
 package com.mysema.query.apt;
 
+import java.io.IOException;
 import java.io.Writer;
 import java.lang.annotation.Annotation;
 import java.util.ArrayList;
@@ -337,7 +338,7 @@ private void serializeVariableList(String packageName, QuerydslVariables vars, L
             }finally{
                 w.close();
             }
-        } catch (Exception e) {
+        } catch (IOException e) {
             e.printStackTrace();
             env.getMessager().printMessage(Kind.ERROR, e.getMessage());
         }
@@ -362,7 +363,7 @@ private void serialize(Serializer serializer, Map<String, EntityModel> models) {
                         writer.close();
                     }
                 }                
-            } catch (Exception e) {
+            } catch (IOException e) {
                 e.printStackTrace();
                 msg.printMessage(Kind.ERROR, e.getMessage());
             }

File: querydsl-collections/src/main/java/com/mysema/query/collections/dml/ColUpdateClause.java
Patch:
@@ -25,7 +25,7 @@ public ColUpdateClause(EvaluatorFactory ef, Path<T> expr, Iterable<? extends T>
     
     @Override
     public long execute() {
-        throw new RuntimeException("Not yet implemented");
+        throw new UnsupportedOperationException("Not yet implemented");
 //        int rv = 0;
 //        for (T match : query.list(expr.asExpr())){
 //            // TODO : update

File: querydsl-core/src/main/java/com/mysema/query/BooleanBuilder.java
Patch:
@@ -118,7 +118,7 @@ public void accept(Visitor v) {
         if (expr != null){
             expr.accept(v);
         }else{
-            throw new RuntimeException("CascadingBoolean has no value");
+            throw new QueryException("CascadingBoolean has no value");
         }
     }
 

File: querydsl-core/src/main/java/com/mysema/query/DefaultQueryMetadata.java
Patch:
@@ -130,7 +130,7 @@ public QueryMetadata clone(){
             clone.where = where.clone();
             return clone;
         } catch (CloneNotSupportedException e) {
-            throw new RuntimeException(e);
+            throw new QueryException(e);
         }
         
     }

File: querydsl-core/src/main/java/com/mysema/query/codegen/AbstractTypeModel.java
Patch:
@@ -22,7 +22,7 @@ public String getLocalGenericName(TypeModel context, boolean asArgType){
             appendLocalGenericName(context, builder, asArgType);
             return builder.toString();
         } catch (IOException e) {
-            throw new RuntimeException(e.getMessage(), e);
+            throw new CodeGenerationException(e.getMessage(), e);
         }
     }
     
@@ -33,7 +33,7 @@ public String getLocalRawName(TypeModel context){
             appendLocalRawName(context, builder);
             return builder.toString();
         } catch (IOException e) {
-            throw new RuntimeException(e.getMessage(), e);
+            throw new CodeGenerationException(e.getMessage(), e);
         }
     }
 

File: querydsl-core/src/main/java/com/mysema/query/codegen/DTOSerializer.java
Patch:
@@ -75,7 +75,9 @@ public String transform(ParameterModel p) {
             writer.append(", new Class[]{");
             boolean first = true;
             for (ParameterModel p : c.getParameters()){
-                if (!first) writer.append(", ");
+                if (!first){
+                    writer.append(", ");
+                }
                 if (p.getType().getPrimitiveName() != null){
                     writer.append(p.getType().getPrimitiveName()+".class");
                 }else{

File: querydsl-core/src/main/java/com/mysema/query/codegen/EntityModel.java
Patch:
@@ -109,7 +109,7 @@ public String getLocalGenericName(){
             getTypeModel().appendLocalGenericName(this, builder, false);
             return builder.toString();
         } catch (IOException e) {
-            throw new RuntimeException(e.getMessage(), e);
+            throw new CodeGenerationException(e.getMessage(), e);
         }            
     }
 
@@ -119,7 +119,7 @@ public String getLocalRawName() {
             getTypeModel().appendLocalRawName(this, builder);
             return builder.toString();
         } catch (IOException e) {
-            throw new RuntimeException(e.getMessage(), e);
+            throw new CodeGenerationException(e.getMessage(), e);
         }
     }
     

File: querydsl-core/src/main/java/com/mysema/query/serialization/JavaTemplates.java
Patch:
@@ -7,6 +7,7 @@
 
 import java.lang.reflect.Field;
 
+import com.mysema.query.QueryException;
 import com.mysema.query.types.Templates;
 import com.mysema.query.types.operation.OperatorImpl;
 import com.mysema.query.types.operation.Ops;
@@ -98,8 +99,8 @@ public JavaTemplates() {
                 OperatorImpl<?> op = (OperatorImpl<?>) f.get(null);
                 add(op, "Math." + getTemplate(op));
             }
-        } catch (Exception e) {
-            throw new RuntimeException(e.getMessage(), e);
+        } catch (IllegalAccessException e) {
+            throw new QueryException(e.getMessage(), e);
         }
         add(Ops.MOD, "{0} % {0}");
         

File: querydsl-core/src/main/java/com/mysema/query/types/path/PEntity.java
Patch:
@@ -11,6 +11,7 @@
 
 import javax.annotation.Nullable;
 
+import com.mysema.query.QueryException;
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.Expr;
@@ -79,7 +80,7 @@ public <T extends PEntity<? extends D>> T as(Class<T> clazz) {
             }
 
         } catch (Exception e) {
-            throw new RuntimeException(e.getMessage(), e);
+            throw new QueryException(e.getMessage(), e);
         }
     }
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/sql/ConstructorResultTransformer.java
Patch:
@@ -10,6 +10,7 @@
 
 import org.hibernate.transform.ResultTransformer;
 
+import com.mysema.query.QueryException;
 import com.mysema.query.types.expr.EConstructor;
 
 /**
@@ -37,7 +38,7 @@ public Object transformTuple(Object[] tuple, String[] aliases) {
         try {
             return constructor.newInstance(tuple);
         } catch (Exception e) {
-            throw new RuntimeException(e);
+            throw new QueryException(e);
         }
     }
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/MetaDataExporter.java
Patch:
@@ -8,6 +8,7 @@
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
+import java.io.IOException;
 import java.io.OutputStreamWriter;
 import java.io.Writer;
 import java.sql.DatabaseMetaData;
@@ -166,7 +167,7 @@ private void serialize(EntityModel type) {
             }finally{
                 writer.close();
             }            
-        } catch (Exception e) {
+        } catch (IOException e) {
             throw new RuntimeException(e.getMessage(), e);
         }    
     }

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLTemplates.java
Patch:
@@ -12,6 +12,7 @@
 import javax.annotation.Nullable;
 
 import com.mysema.query.JoinType;
+import com.mysema.query.QueryException;
 import com.mysema.query.types.Templates;
 import com.mysema.query.types.operation.Ops;
 
@@ -167,8 +168,8 @@ public final SQLTemplates newLineToSingleSpace() {
                 if (field.getType().equals(String.class)) {
                     field.set(this, field.get(this).toString().replace('\n',' '));
                 }
-            } catch (Exception e) {
-                throw new RuntimeException(e.getMessage(), e);
+            } catch (IllegalAccessException e) {
+                throw new QueryException(e.getMessage(), e);
             }
         }
         return this;

File: querydsl-collections/src/test/java/com/mysema/query/QueryMutabilityTest.java
Patch:
@@ -19,7 +19,7 @@ public void test() throws SecurityException, IllegalArgumentException,
         QCat cat = QCat.cat;
         ColQueryImpl query = new ColQueryImpl();
         query.from(cat, Collections.<Cat> emptyList());
-        QueryMutability.test(query, cat.id, cat.name);
+        new QueryMutability(query).test(cat.id, cat.name);
 
     }
 

File: querydsl-hql/src/test/java/com/mysema/query/HibernateQueryMutabilityTest.java
Patch:
@@ -39,7 +39,7 @@ public void test() throws SecurityException, IllegalArgumentException,
             InvocationTargetException, IOException {
         QCat cat = QCat.cat;
         HibernateQuery query = query().from(cat);
-        QueryMutability.test(query, cat, cat.name);
+        new QueryMutability(query).test(cat, cat.name);
     }
     
     @Test

File: querydsl-hql/src/test/java/com/mysema/query/hql/hibernate/sql/QueryMutabilityTest.java
Patch:
@@ -42,7 +42,7 @@ public void test() throws SecurityException, IllegalArgumentException,
             InvocationTargetException, IOException {
         SAnimal cat = new SAnimal("cat");
         HibernateSQLQuery query = query().from(cat);
-        QueryMutability.test(query, cat.id, cat.name);
+        new QueryMutability(query).test(cat.id, cat.name);
     }
 
     @Test

File: querydsl-hql/src/test/java/com/mysema/query/hql/jpa/sql/JPAQueryMutabilityTest.java
Patch:
@@ -48,7 +48,7 @@ public void test() throws SecurityException, IllegalArgumentException,
 
         SAnimal cat = new SAnimal("cat");
         JPASQLQuery query = query().from(cat);
-        QueryMutability.test(query, cat.id, cat.name);
+        new QueryMutability(query).test(cat.id, cat.name);
     }
     
     @Test

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/QueryMutabilityTest.java
Patch:
@@ -18,7 +18,7 @@ public void test() throws IOException, SecurityException,
             IllegalAccessException, InvocationTargetException {
         QProduct product = QProduct.product;
         JDOQLQueryImpl query = (JDOQLQueryImpl) query().from(product);
-        QueryMutability.test(query, product.name, product.description);
+        new QueryMutability(query).test(product.name, product.description);
     }
     
     @Test

File: querydsl-sql/src/test/java/com/mysema/query/DerbyQueryMutabilityTest.java
Patch:
@@ -58,7 +58,7 @@ public void test() throws IOException, SecurityException,
             IllegalAccessException, InvocationTargetException {
         SQLQueryImpl query = new SQLQueryImpl(connection, new DerbyTemplates());
         query.from(survey);
-        QueryMutability.test(query, survey.id, survey.name);
+        new QueryMutability(query).test(survey.id, survey.name);
     }
     
     @Test

File: querydsl-collections/src/test/java/com/mysema/query/QueryMutabilityTest.java
Patch:
@@ -19,7 +19,7 @@ public void test() throws SecurityException, IllegalArgumentException,
         QCat cat = QCat.cat;
         ColQueryImpl query = new ColQueryImpl();
         query.from(cat, Collections.<Cat> emptyList());
-        Mutability.test(query, cat.id, cat.name);
+        QueryMutability.test(query, cat.id, cat.name);
 
     }
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/jpa/JPAUpdateClause.java
Patch:
@@ -54,7 +54,6 @@ public long execute() {
         return query.executeUpdate();
     }
 
-    @SuppressWarnings("unchecked")
     @Override
     public <T> JPAUpdateClause set(Path<T> path, T value) {
         metadata.addProjection(path.asExpr().eq(value));

File: querydsl-hql/src/test/java/com/mysema/query/hql/AggregationTest.java
Patch:
@@ -7,8 +7,6 @@
 
 import org.junit.Test;
 
-import com.mysema.query.types.operation.Ops;
-
 public class AggregationTest extends AbstractQueryTest{
     
     @Test    
@@ -17,7 +15,7 @@ public void test(){
         assertToString("min(cat.bodyWeight)", cat.bodyWeight.min());
         assertToString("avg(cat.bodyWeight)", cat.bodyWeight.avg());
         
-        assertToString("count(*)", Ops.AggOps.COUNT_ALL_AGG_EXPR);
+//        assertToString("count(*)", Ops.AggOps.COUNT_ALL_AGG_EXPR);
         assertToString("count(cat)", cat.count());
         assertToString("count(distinct cat)", cat.countDistinct());
     }

File: querydsl-hql/src/test/java/com/mysema/query/hql/ParsingTest.java
Patch:
@@ -32,7 +32,6 @@
 import com.mysema.query.types.expr.EComparable;
 import com.mysema.query.types.expr.EDate;
 import com.mysema.query.types.expr.ENumber;
-import com.mysema.query.types.operation.Ops;
 
 /**
  * ParsingTest provides.
@@ -406,7 +405,7 @@ public void testOrderBy() throws Exception {
 
     @Test
     public void testSelect() throws Exception {
-        query().select(Ops.AggOps.COUNT_ALL_AGG_EXPR).from(qat).parse();
+//        query().select(Ops.AggOps.COUNT_ALL_AGG_EXPR).from(qat).parse();
 
         query().select(qat.weight.avg()).from(qat).parse();
     }

File: querydsl-hql/src/test/java/com/mysema/query/hql/hibernate/sql/QueryMutabilityTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import com.mysema.query.Mutability;
+import com.mysema.query.QueryMutability;
 import com.mysema.query.hql.domain.sql.SAnimal;
 import com.mysema.query.sql.DerbyTemplates;
 import com.mysema.query.sql.SQLTemplates;
@@ -42,7 +42,7 @@ public void test() throws SecurityException, IllegalArgumentException,
             InvocationTargetException, IOException {
         SAnimal cat = new SAnimal("cat");
         HibernateSQLQuery query = query().from(cat);
-        Mutability.test(query, cat.id, cat.name);
+        QueryMutability.test(query, cat.id, cat.name);
     }
 
     @Test

File: querydsl-hql/src/test/java/com/mysema/query/hql/jpa/sql/JPAQueryMutabilityTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import com.mysema.query.Mutability;
+import com.mysema.query.QueryMutability;
 import com.mysema.query.hql.domain.Cat;
 import com.mysema.query.hql.domain.sql.SAnimal;
 import com.mysema.query.sql.DerbyTemplates;
@@ -48,7 +48,7 @@ public void test() throws SecurityException, IllegalArgumentException,
 
         SAnimal cat = new SAnimal("cat");
         JPASQLQuery query = query().from(cat);
-        Mutability.test(query, cat.id, cat.name);
+        QueryMutability.test(query, cat.id, cat.name);
     }
     
     @Test

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/QueryMutabilityTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import org.junit.Test;
 
-import com.mysema.query.Mutability;
+import com.mysema.query.QueryMutability;
 import com.mysema.query.jdoql.testdomain.QProduct;
 
 public class QueryMutabilityTest extends AbstractJDOTest{
@@ -18,7 +18,7 @@ public void test() throws IOException, SecurityException,
             IllegalAccessException, InvocationTargetException {
         QProduct product = QProduct.product;
         JDOQLQueryImpl query = (JDOQLQueryImpl) query().from(product);
-        Mutability.test(query, product.name, product.description);
+        QueryMutability.test(query, product.name, product.description);
     }
     
     @Test

File: querydsl-sql/src/main/java/com/mysema/query/sql/DerbyTemplates.java
Patch:
@@ -30,6 +30,5 @@ public class DerbyTemplates extends SQLTemplates {
         setLimitTemplate("fetch first %1$s rows only");
         setOffsetTemplate("offset %1$s rows");
         setLimitOffsetTemplate("offset %2$s rows fetch next %1$s rows only");
-
     }
 }
\ No newline at end of file

File: querydsl-sql/src/test/java/com/mysema/query/DerbyTest.java
Patch:
@@ -20,8 +20,6 @@
 @RunWith(FilteringTestRunner.class)
 @Label(Target.DERBY)
 public class DerbyTest extends AbstractSQLTest {
-
-    
     
     @BeforeClass
     public static void setUp() throws Exception {

File: querydsl-sql/src/test/java/com/mysema/query/sql/domain/QIdName.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.sql.dto;
+package com.mysema.query.sql.domain;
 
 import com.mysema.query.types.expr.EConstructor;
 import com.mysema.query.types.expr.Expr;

File: querydsl-apt/src/main/java/com/mysema/query/apt/ElementHandler.java
Patch:
@@ -98,7 +98,7 @@ public void handleFieldProperty(EntityModel entityModel, VariableElement field,
             StringBuilder builder = new StringBuilder();
             builder.append("Caught exception for field ");
             builder.append(entityModel.getFullName()).append("#").append(field.getSimpleName());
-            throw new RuntimeException(builder.toString(), ex);
+            throw new APTException(builder.toString(), ex);
         }
     }
 
@@ -130,7 +130,7 @@ public void handleMethodProperty(EntityModel entityModel, String propertyName,
             StringBuilder builder = new StringBuilder();
             builder.append("Caught exception for method ");
             builder.append(entityModel.getFullName()).append("#").append(method.getSimpleName());
-            throw new RuntimeException(builder.toString(), ex);
+            throw new APTException(builder.toString(), ex);
         }
     }
 

File: querydsl-apt/src/main/java/com/mysema/query/apt/TypeArgumentsException.java
Patch:
@@ -9,7 +9,7 @@
  * @author tiwe
  *
  */
-public class TypeArgumentsException extends RuntimeException{
+public class TypeArgumentsException extends APTException{
     
     private static final long serialVersionUID = -3344464172475025628L;
 

File: querydsl-apt/src/main/java/com/mysema/query/apt/UnsupportedTypeException.java
Patch:
@@ -11,7 +11,7 @@
  * @author tiwe
  *
  */
-public class UnsupportedTypeException extends RuntimeException {
+public class UnsupportedTypeException extends APTException {
 
     private static final long serialVersionUID = 1082936662325717262L;
 

File: querydsl-apt/src/main/java/com/mysema/query/apt/jdo/JDOAnnotationProcessor.java
Patch:
@@ -16,6 +16,7 @@
 import javax.lang.model.element.TypeElement;
 import javax.tools.Diagnostic;
 
+import com.mysema.query.apt.APTException;
 import com.mysema.query.apt.DefaultConfiguration;
 import com.mysema.query.apt.Processor;
 
@@ -45,7 +46,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
             return true;
             
         } catch (ClassNotFoundException e) {
-            throw new RuntimeException(e.getMessage(), e);
+            throw new APTException(e.getMessage(), e);
         }
     }       
     

File: querydsl-apt/src/main/java/com/mysema/query/apt/jpa/JPAAnnotationProcessor.java
Patch:
@@ -16,6 +16,7 @@
 import javax.lang.model.element.TypeElement;
 import javax.tools.Diagnostic;
 
+import com.mysema.query.apt.APTException;
 import com.mysema.query.apt.DefaultConfiguration;
 import com.mysema.query.apt.Processor;
 
@@ -45,7 +46,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
             return true;
             
         } catch (ClassNotFoundException e) {
-            throw new RuntimeException(e.getMessage(), e);
+            throw new APTException(e.getMessage(), e);
         }        
     }
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLDeleteClause.java
Patch:
@@ -10,6 +10,7 @@
 import java.sql.SQLException;
 
 import com.mysema.query.DefaultQueryMetadata;
+import com.mysema.query.QueryException;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.dml.DeleteClause;
 import com.mysema.query.sql.SQLSerializer;
@@ -50,7 +51,7 @@ public long execute() {
             JDBCUtil.setParameters(stmt, serializer.getConstants());
             return stmt.executeUpdate();
         } catch (SQLException e) {
-            throw new RuntimeException("Caught " + e.getClass().getSimpleName() + " for " + queryString, e);
+            throw new QueryException("Caught " + e.getClass().getSimpleName() + " for " + queryString, e);
         }finally{
             if (stmt != null){
                 close(stmt);    
@@ -62,7 +63,7 @@ protected void close(PreparedStatement stmt) {
         try {
             stmt.close();
         } catch (SQLException e) {
-            throw new RuntimeException(e);
+            throw new QueryException(e);
         }        
     }
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLUpdateClause.java
Patch:
@@ -10,6 +10,7 @@
 import java.sql.SQLException;
 
 import com.mysema.query.DefaultQueryMetadata;
+import com.mysema.query.QueryException;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.dml.UpdateClause;
 import com.mysema.query.sql.SQLSerializer;
@@ -51,7 +52,7 @@ public long execute() {
             JDBCUtil.setParameters(stmt, serializer.getConstants());
             return stmt.executeUpdate();
         } catch (SQLException e) {
-            throw new RuntimeException("Caught " + e.getClass().getSimpleName() + " for " + queryString, e);
+            throw new QueryException("Caught " + e.getClass().getSimpleName() + " for " + queryString, e);
         }finally{
             if (stmt != null){
                 close(stmt);    
@@ -63,7 +64,7 @@ protected void close(PreparedStatement stmt) {
         try {
             stmt.close();
         } catch (SQLException e) {
-            throw new RuntimeException(e);
+            throw new QueryException(e);
         }        
     }
 

File: querydsl-core/src/main/java/com/mysema/query/DefaultQueryMetadata.java
Patch:
@@ -27,6 +27,8 @@
  */
 public class DefaultQueryMetadata implements QueryMetadata, Cloneable {
     
+    private static final long serialVersionUID = 317736313966701232L;
+
     private boolean distinct;
     
     private Set<Expr<?>> exprInJoins = new HashSet<Expr<?>>();

File: querydsl-core/src/main/java/com/mysema/query/QueryMetadata.java
Patch:
@@ -5,6 +5,7 @@
  */
 package com.mysema.query;
 
+import java.io.Serializable;
 import java.util.List;
 
 import javax.annotation.Nullable;
@@ -20,7 +21,7 @@
  * @author tiwe
  * @version $Id$
  */
-public interface QueryMetadata {
+public interface QueryMetadata extends Serializable {
 
     /**
      * @param o

File: querydsl-core/src/main/java/com/mysema/util/CodeWriter.java
Patch:
@@ -49,8 +49,6 @@ public interface CodeWriter extends Appendable{
 
     CodeWriter line(String... segments) throws IOException;
 
-    CodeWriter lines(String... lines) throws IOException;
-
     CodeWriter nl() throws IOException;
 
     CodeWriter packageDecl(String packageName) throws IOException;

File: querydsl-core/src/main/java/com/mysema/query/BooleanBuilder.java
Patch:
@@ -16,9 +16,10 @@
  * @author tiwe
  * @version $Id$
  */
-@SuppressWarnings("serial")
 public final class BooleanBuilder extends EBoolean implements Cloneable{
     
+    private static final long serialVersionUID = -4129485177345542519L;
+    
     @Nullable
     private EBoolean expr;
         

File: querydsl-core/src/main/java/com/mysema/query/types/OrderSpecifier.java
Patch:
@@ -19,10 +19,12 @@
  * @author tiwe
  * @version $Id$
  */
-@SuppressWarnings({"unchecked","serial"})
+@SuppressWarnings({"unchecked"})
 @Immutable
 public class OrderSpecifier<A extends Comparable> implements Serializable {
     
+    private static final long serialVersionUID = 3427652988262514678L;
+
     private final Order order;
     
     private final Expr<A> target;

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CBoolean.java
Patch:
@@ -20,9 +20,10 @@
  * @author tiwe
  *
  */
-@SuppressWarnings("serial")
 public class CBoolean extends EBoolean implements Custom<Boolean> {
     
+    private static final long serialVersionUID = 5749369427497731719L;
+
     public static EBoolean create(String template, Expr<?>... args){
         return new CBoolean(TemplateFactory.DEFAULT.create(template), Arrays.<Expr<?>>asList(args));
     }

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CComparable.java
Patch:
@@ -21,9 +21,10 @@
  *
  * @param <T>
  */
-@SuppressWarnings("serial")
 public class CComparable<T extends Comparable<?>> extends EComparable<T> implements Custom<T> {
     
+    private static final long serialVersionUID = -6292853402028813007L;
+
     public static <T extends Comparable<?>> EComparable<T> create(Class<T> type, String template, Expr<?>... args){
         return new CComparable<T>(type, TemplateFactory.DEFAULT.create(template), Arrays.<Expr<?>>asList(args));
     }

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CNumber.java
Patch:
@@ -21,9 +21,10 @@
  *
  * @param <T>
  */
-@SuppressWarnings("serial")
 public class CNumber<T extends Number & Comparable<?>> extends ENumber<T> implements Custom<T> {
     
+    private static final long serialVersionUID = 351057421752203377L;
+
     public static <T extends Number & Comparable<?>> ENumber<T> create(Class<T> type, String template, Expr<?>... args){
         return new CNumber<T>(type, TemplateFactory.DEFAULT.create(template), Arrays.<Expr<?>>asList(args));
     }

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CSimple.java
Patch:
@@ -20,9 +20,10 @@
  *
  * @param <T>
  */
-@SuppressWarnings("serial")
 public class CSimple<T> extends Expr<T> implements Custom<T> {
     
+    private static final long serialVersionUID = -4697578522909045745L;
+
     public static <T> Expr<T> create(Class<? extends T> type, String template, Expr<?>... args){
         return new CSimple<T>(type, TemplateFactory.DEFAULT.create(template), Arrays.<Expr<?>>asList(args));
     }

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CString.java
Patch:
@@ -20,9 +20,10 @@
  * @author tiwe
  *
  */
-@SuppressWarnings("serial")
 public class CString extends EString implements Custom<String> {
     
+    private static final long serialVersionUID = 3181686132439356614L;
+
     public static EString create(String template, Expr<?>... args){
         return new CString(TemplateFactory.DEFAULT.create(template), Arrays.<Expr<?>>asList(args));
     }

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CustomMixin.java
Patch:
@@ -16,9 +16,10 @@
  *
  * @param <T>
  */
-@SuppressWarnings("serial")
 public final class CustomMixin<T> implements Custom<T>, Serializable {
     
+    private static final long serialVersionUID = 6951623726800809083L;
+
     private final Expr<T> self;
     
     private final List<Expr<?>> args;

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EArrayConstructor.java
Patch:
@@ -15,9 +15,10 @@
  * 
  * @param <D> component type
  */
-@SuppressWarnings("serial")
 public class EArrayConstructor<D> extends EConstructor<D[]> {
     
+    private static final long serialVersionUID = 8667880104290226505L;
+    
     private final Class<D> elementType;
 
     @SuppressWarnings("unchecked")

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EBoolean.java
Patch:
@@ -18,9 +18,10 @@
  * @see java.lang.Boolean
  * 
  */
-@SuppressWarnings("serial")
 public abstract class EBoolean extends EComparable<Boolean> {
     
+    private static final long serialVersionUID = 3797956062512074164L;
+    
     @Nullable 
     private volatile EBoolean not;
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EBooleanConst.java
Patch:
@@ -13,9 +13,10 @@
  * @author tiwe
  *
  */
-@SuppressWarnings("serial")
 public final class EBooleanConst extends EBoolean implements Constant<Boolean>{
        
+    private static final long serialVersionUID = -4106376704553234781L;
+
     public static final EBoolean FALSE = new EBooleanConst(Boolean.FALSE);
     
     public static final EBoolean TRUE = new EBooleanConst(Boolean.TRUE);

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ECollectionBase.java
Patch:
@@ -21,9 +21,10 @@
  *
  * @param <D>
  */
-@SuppressWarnings("serial")
 public abstract class ECollectionBase<C extends Collection<E>, E> extends Expr<C> implements ECollection<C,E> {
 
+    private static final long serialVersionUID = 691230660037162054L;
+
     @Nullable
     private volatile EBoolean empty;
    

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EComparable.java
Patch:
@@ -15,9 +15,11 @@
  *
  * @param <D>
  */
-@SuppressWarnings({"unchecked","serial"})
+@SuppressWarnings({"unchecked"})
 public abstract class EComparable<D extends Comparable> extends EComparableBase<D> {
     
+    private static final long serialVersionUID = 5761359576767404270L;
+
     public EComparable(Class<? extends D> type) {
         super(type);
     }

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EComparableBase.java
Patch:
@@ -22,9 +22,11 @@
  * @param <D> Java type
  * @see java.lang.Comparable
  */
-@SuppressWarnings({"unchecked","serial"})
+@SuppressWarnings({"unchecked"})
 public abstract class EComparableBase<D extends Comparable> extends Expr<D> {
 
+    private static final long serialVersionUID = 1460921109546656911L;
+
     @Nullable
     private volatile OrderSpecifier<D> asc, desc;
     

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EConstructor.java
Patch:
@@ -21,9 +21,10 @@
  * 
  * @param <D> Java type
  */
-@SuppressWarnings("serial")
 public class EConstructor<D> extends Expr<D> {
     
+    private static final long serialVersionUID = -602747921848073175L;
+
     public static <D> EConstructor<D> create(Class<D> type, Expr<?>... args){
         for (Constructor<?> c : type.getConstructors()){
             Class<?>[] paramTypes = c.getParameterTypes();            

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDate.java
Patch:
@@ -22,9 +22,11 @@
  * @author tiwe
  * @see http://en.wikipedia.org/wiki/Gregorian_calendar
  */
-@SuppressWarnings({"unchecked","serial"})
+@SuppressWarnings({"unchecked"})
 public abstract class EDate<D extends Comparable> extends EDateOrTime<D> {
     
+    private static final long serialVersionUID = 6054664454254721302L;
+
     private static final EDate<Date> CURRENT_DATE = currentDate(Date.class);
         
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDateConst.java
Patch:
@@ -13,9 +13,10 @@
  * @author tiwe
  *
  */
-@SuppressWarnings("serial")
 public final class EDateConst<D extends java.util.Date> extends EDate<D> implements Constant<D>{
  
+    private static final long serialVersionUID = -5745611667058255826L;
+
     public static <D extends java.util.Date> EDate<D> create(D date){
         return new EDateConst<D>(date);
     }

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDateOrTime.java
Patch:
@@ -13,9 +13,11 @@
  *
  * @param <D>
  */
-@SuppressWarnings({"unchecked","serial"})
+@SuppressWarnings({"unchecked"})
 public abstract class EDateOrTime<D extends Comparable> extends EComparable<D> {
     
+    private static final long serialVersionUID = 1137918766051524298L;
+
     public EDateOrTime(Class<? extends D> type) {
         super(type);
     }

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDateTime.java
Patch:
@@ -22,9 +22,11 @@
  * @author tiwe
  * @see http://en.wikipedia.org/wiki/Gregorian_calendar
  */
-@SuppressWarnings({"unchecked","serial"})
+@SuppressWarnings({"unchecked"})
 public abstract class EDateTime<D extends Comparable> extends EDate<D> {
 
+    private static final long serialVersionUID = -6879277113694148047L;
+
     private static final EDateTime<Date> CURRENT_DATE = currentDate(Date.class);
     
     private static final EDateTime<Date> CURRENT_TIMESTAMP = currentTimestamp(Date.class);

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDateTimeConst.java
Patch:
@@ -11,9 +11,10 @@
  * @author tiwe
  *
  */
-@SuppressWarnings("serial")
 public final class EDateTimeConst<D extends java.util.Date> extends EDateTime<D> implements Constant<D>{
   
+    private static final long serialVersionUID = 4578416585568476532L;
+
     public static <D extends java.util.Date> EDateTime<D> create(D date){
         return new EDateTimeConst<D>(date);
     }

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EMapBase.java
Patch:
@@ -21,9 +21,10 @@
  * @param <K>
  * @param <V>
  */
-@SuppressWarnings("serial")
 public abstract class EMapBase<K,V> extends Expr<Map<K,V>> implements EMap<K,V> {
 
+    private static final long serialVersionUID = 2856001983312366841L;
+
     @Nullable 
     private volatile ENumber<Integer> size;    
     

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ENumber.java
Patch:
@@ -23,9 +23,10 @@
  * @param <D> Java type
  * @see java.lang.Number
  */
-@SuppressWarnings("serial")
 public abstract class ENumber<D extends Number & Comparable<?>> extends EComparableBase<D> {
    
+    private static final long serialVersionUID = -5485902768703364888L;
+
     private static final ENumber<Double> RANDOM = ONumber.create(Double.class, MathOps.RANDOM);
         
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ENumberConst.java
Patch:
@@ -16,9 +16,10 @@
  *
  * @param <D>
  */
-@SuppressWarnings("serial")
 public final class ENumberConst<D extends Number & Comparable<?>> extends ENumber<D> implements Constant<D>{
     
+    private static final long serialVersionUID = 2958824808974260439L;
+
     @SuppressWarnings("unchecked")
     private static final ENumber<Byte>[] BYTES = new ENumber[256];
     

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EString.java
Patch:
@@ -21,9 +21,10 @@
  * @author tiwe
  * @see java.lang.String
  */
-@SuppressWarnings("serial")
 public abstract class EString extends EComparable<String> {
-        
+       
+    private static final long serialVersionUID = 1536955079961023361L;
+
     @Nullable
     private volatile ENumber<Long> length;
     

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EStringConst.java
Patch:
@@ -22,9 +22,10 @@
  * @author tiwe
  *
  */
-@SuppressWarnings("serial")
 public final class EStringConst extends EString implements Constant<String>{
     
+    private static final long serialVersionUID = 5182804405789674556L;
+
     private static final Map<String,EString> CACHE;
     
     static{

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ETime.java
Patch:
@@ -20,9 +20,11 @@
  *
  * @param <D>
  */
-@SuppressWarnings({"unchecked","serial"})
+@SuppressWarnings({"unchecked"})
 public abstract class ETime<D extends Comparable> extends EDateOrTime<D> {
     
+    private static final long serialVersionUID = 7360552308332457990L;
+
     private static final ETime<Date> CURRENT_TIME = currentTime(Date.class);
     
     @Nullable

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ETimeConst.java
Patch:
@@ -13,9 +13,10 @@
  * @author tiwe
  *
  */
-@SuppressWarnings("serial")
 public final class ETimeConst<D extends java.util.Date> extends ETime<D> implements Constant<D>{
     
+    private static final long serialVersionUID = -7835941761930555480L;
+
     public static <D extends java.util.Date> ETime<D> create(D time){
         return new ETimeConst<D>(time);
     }

File: querydsl-core/src/main/java/com/mysema/query/types/expr/Expr.java
Patch:
@@ -27,9 +27,10 @@
  * @author tiwe
  * @version $Id$
  */
-@SuppressWarnings("serial")
 public abstract class Expr<D> implements Serializable{
 
+    private static final long serialVersionUID = 8049453060731070043L;
+
     @Nullable
     private volatile ENumber<Long> count;
     

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ExprConst.java
Patch:
@@ -16,9 +16,9 @@
  * 
  * @param <D> Java type of constant
  */
-@SuppressWarnings("serial")
 public class ExprConst<D> extends Expr<D> implements Constant<D> {
-    
+
+    private static final long serialVersionUID = -3211963259241932307L;
 
     /**
      * Factory method for constants

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OBoolean.java
Patch:
@@ -18,14 +18,14 @@
  * @author tiwe
  * 
  */
-@SuppressWarnings("serial")
 public class OBoolean extends EBoolean implements Operation<Boolean, Boolean> {
 
+    private static final long serialVersionUID = 7432281499861357581L;
+
     public static EBoolean create(Operator<Boolean> op, Expr<?>... args){
         return new OBoolean(op, args);
     }
-    
-
+   
     private final Operation<Boolean, Boolean> opMixin;
     
     OBoolean(Operator<Boolean> op, Expr<?>... args) {

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OComparable.java
Patch:
@@ -20,10 +20,11 @@
  * @param <OpType>
  * @param <D>
  */
-@SuppressWarnings("serial")
 public class OComparable<OpType, D extends Comparable<?>> extends
         EComparable<D> implements Operation<OpType, D> {
     
+    private static final long serialVersionUID = 1129243977606098865L;
+
     /**
      * Factory method
      * 

File: querydsl-core/src/main/java/com/mysema/query/types/operation/ODate.java
Patch:
@@ -20,10 +20,11 @@
  * @param <OpType>
  * @param <D>
  */
-@SuppressWarnings("serial")
 public class ODate <OpType extends Comparable<?>, D extends Comparable<?>> extends
     EDate<D> implements Operation<OpType, D> {
     
+    private static final long serialVersionUID = -7859020164194396995L;
+
     /**
      * Factory method
      * 

File: querydsl-core/src/main/java/com/mysema/query/types/operation/ONumber.java
Patch:
@@ -20,10 +20,11 @@
  * @param <OpType>
  * @param <D>
  */
-@SuppressWarnings("serial")
 public class ONumber<OpType extends Number, D extends Number & Comparable<?>>
         extends ENumber<D> implements Operation<OpType, D> {
     
+    private static final long serialVersionUID = -3593040852095778453L;
+
     /**
      * Factory method
      * 

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OSimple.java
Patch:
@@ -19,9 +19,10 @@
  * @param <OpType>
  * @param <D>
  */
-@SuppressWarnings("serial")
 public class OSimple<OpType, D> extends Expr<D> implements Operation<OpType, D> {
     
+    private static final long serialVersionUID = -285668548371034230L;
+
     /**
      * Factory method
      * 

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OString.java
Patch:
@@ -18,9 +18,10 @@
  * @author tiwe
  * 
  */
-@SuppressWarnings("serial")
 public class OString extends EString implements Operation<String, String> {
     
+    private static final long serialVersionUID = 6846556373847139549L;
+
     public static EString create(Operator<String> op, Expr<?>... args){
         return new OString(op, args);
     }

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OTime.java
Patch:
@@ -20,9 +20,10 @@
  * @param <OpType>
  * @param <D>
  */
-@SuppressWarnings("serial")
 public class OTime<OpType, D extends Comparable<?>> extends ETime<D> implements Operation<OpType, D> {
 
+    private static final long serialVersionUID = 9051606798649239240L;
+
     /**
      * Factory method
      * 

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OperationMixin.java
Patch:
@@ -17,9 +17,10 @@
  * @param <OP>
  * @param <RT>
  */
-@SuppressWarnings("serial")
 public final class OperationMixin<OP, RT> implements Operation<OP, RT>, Serializable {
 
+    private static final long serialVersionUID = 4796432056083507588L;
+
     private final List<Expr<?>> args;
     
     private final Operator<OP> operator;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PArray.java
Patch:
@@ -26,9 +26,10 @@
  * 
  * @param <E> component type
  */
-@SuppressWarnings("serial")
 public class PArray<E> extends Expr<E[]> implements Path<E[]>, EArray<E>{
     
+    private static final long serialVersionUID = 7795049264874048226L;
+
     private final Class<E> componentType;
     
     private final Path<E[]> pathMixin;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PBoolean.java
Patch:
@@ -17,9 +17,10 @@
  * @see java.lang.Boolean
  * 
  */
-@SuppressWarnings("serial")
 public class PBoolean extends EBoolean implements Path<Boolean> {
 
+    private static final long serialVersionUID = 6590516706769430565L;
+
     private final Path<Boolean> pathMixin;
 
     public PBoolean(Path<?> parent, String property) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/PCollection.java
Patch:
@@ -21,9 +21,10 @@
  * 
  * @param <E> component type
  */
-@SuppressWarnings("serial")
 public class PCollection<E> extends ECollectionBase<Collection<E>,E> implements Path<Collection<E>> {
     
+    private static final long serialVersionUID = -4982311799113762600L;
+
     private final Class<E> elementType;
     
     private final String entityName;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PComparable.java
Patch:
@@ -19,9 +19,11 @@
  * @param <D>
  * @see java.util.ComparableType
  */
-@SuppressWarnings({"unchecked","serial"})
+@SuppressWarnings({"unchecked"})
 public class PComparable<D extends Comparable> extends EComparable<D> implements Path<D> {
 
+    private static final long serialVersionUID = -7434767743611671666L;
+
     private final Path<D> pathMixin;
     
     public PComparable(Class<? extends D> type, Path<?> parent, String property) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/PDate.java
Patch:
@@ -16,9 +16,11 @@
  *
  * @param <D>
  */
-@SuppressWarnings({"unchecked","serial"})
+@SuppressWarnings({"unchecked"})
 public class PDate<D extends Comparable> extends EDate<D> implements Path<D>{
 
+    private static final long serialVersionUID = -6030609920388740246L;
+
     private final Path<D> pathMixin;
     
     public PDate(Class<? extends D> type, Path<?> parent, String property) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/PDateTime.java
Patch:
@@ -16,9 +16,11 @@
  *
  * @param <D>
  */
-@SuppressWarnings({"unchecked","serial"})
+@SuppressWarnings({"unchecked"})
 public class PDateTime<D extends Comparable> extends EDateTime<D> implements Path<D> {
 
+    private static final long serialVersionUID = -2807916228198184631L;
+
     private final Path<D> pathMixin;
     
     public PDateTime(Class<? extends D> type, Path<?> parent, String property) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/PEntity.java
Patch:
@@ -26,9 +26,10 @@
  * @param <D>
  *            Java type
  */
-@SuppressWarnings("serial")
 public class PEntity<D> extends Expr<D> implements Path<D> {
 
+    private static final long serialVersionUID = -1845524024957822731L;
+
     private final Map<Class<?>, Object> casts = new HashMap<Class<?>, Object>();
 
     @Nullable

File: querydsl-core/src/main/java/com/mysema/query/types/path/PList.java
Patch:
@@ -30,9 +30,10 @@
  * 
  * @param <E> component type
  */
-@SuppressWarnings("serial")
 public class PList<E, Q extends Expr<E>> extends ECollectionBase<List<E>,E> implements EList<E>, Path<List<E>>{
     
+    private static final long serialVersionUID = 3302301599074388860L;
+
     private static final Set<Class<?>> typedClasses = new HashSet<Class<?>>(Arrays.<Class<?>>asList(
             PathBuilder.class,
             PComparable.class,

File: querydsl-core/src/main/java/com/mysema/query/types/path/PMap.java
Patch:
@@ -27,9 +27,10 @@
  * @param <K> key type
  * @param <V> value type
  */
-@SuppressWarnings("serial")
 public class PMap<K, V, E extends Expr<V>> extends EMapBase<K, V> implements Path<Map<K, V>> {
     
+    private static final long serialVersionUID = -9113333728412016832L;
+
     private static final Set<Class<?>> typedClasses = new HashSet<Class<?>>(Arrays.<Class<?>>asList(
             PathBuilder.class,
             PComparable.class,

File: querydsl-core/src/main/java/com/mysema/query/types/path/PNumber.java
Patch:
@@ -18,9 +18,10 @@
  * 
  * @param <D> Java type
  */
-@SuppressWarnings("serial")
 public class PNumber<D extends Number & Comparable<?>> extends ENumber<D> implements Path<D> {
     
+    private static final long serialVersionUID = 338191992784020563L;
+    
     private final Path<D> pathMixin;
 
     public PNumber(Class<? extends D> type, Path<?> parent, String property) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/PSet.java
Patch:
@@ -21,9 +21,10 @@
  * 
  * @param <E> component type
  */
-@SuppressWarnings("serial")
 public class PSet<E> extends ECollectionBase<Set<E>,E> implements Path<Set<E>> {
     
+    private static final long serialVersionUID = 4145848445507037373L;
+
     private final Class<E> elementType;
     
     private final String entityName;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PSimple.java
Patch:
@@ -18,9 +18,10 @@
  * 
  * @param <D> Java type
  */
-@SuppressWarnings("serial")
 public class PSimple<D> extends Expr<D> implements Path<D> {
     
+    private static final long serialVersionUID = 3088836955328191852L;
+    
     private final Path<D> pathMixin;
     
     public PSimple(Class<? extends D> type, Path<?> parent, String property) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/PString.java
Patch:
@@ -17,9 +17,10 @@
  * @author tiwe
  * 
  */
-@SuppressWarnings("serial")
 public class PString extends EString implements Path<String> {
 
+    private static final long serialVersionUID = 7983490925756833429L;
+
     private final Path<String> pathMixin;
     
     public PString(Path<?> parent, String property) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/PTime.java
Patch:
@@ -16,9 +16,11 @@
  *
  * @param <D>
  */
-@SuppressWarnings({"unchecked","serial"})
+@SuppressWarnings({"unchecked"})
 public class PTime<D extends Comparable> extends ETime<D> implements Path<D>{
 
+    private static final long serialVersionUID = -1432775001949467763L;
+
     private final Path<D> pathMixin;
     
     public PTime(Class<? extends D> type, Path<?> parent, String property) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathBuilder.java
Patch:
@@ -17,9 +17,10 @@
  *
  * @param <D>
  */
-@SuppressWarnings("serial")
 public final class PathBuilder<D> extends PEntity<D>{
     
+    private static final long serialVersionUID = -1666357914232685088L;
+    
     private final Map<String,PathBuilder<?>> properties = new HashMap<String,PathBuilder<?>>();
 
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathInits.java
Patch:
@@ -16,9 +16,10 @@
  * @author tiwe
  *
  */
-@SuppressWarnings("serial")
 public class PathInits implements Serializable{
 
+    private static final long serialVersionUID = -2173980858324141095L;
+
     public static final PathInits DEFAULT = new PathInits();
     
     public static final PathInits DIRECT  = new PathInits("*");

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathMixin.java
Patch:
@@ -24,9 +24,10 @@
  *
  * @param <T>
  */
-@SuppressWarnings("serial")
 public final class PathMixin<T> implements Path<T>, Serializable {
     
+    private static final long serialVersionUID = -2498447742798348162L;
+
     @Nullable
     private volatile EBoolean isnull, isnotnull;
     

File: querydsl-core/src/main/java/com/mysema/query/types/query/ListSubQuery.java
Patch:
@@ -24,9 +24,10 @@
  * @param <JM>
  * @param <A>
  */
-@SuppressWarnings("serial")
 public final class ListSubQuery<A> extends ECollectionBase<List<A>,A> implements SubQuery{
 
+    private static final long serialVersionUID = 3399354334765602960L;
+
     private final Class<A> elementType;
     
     private final QueryMetadata md;

File: querydsl-core/src/main/java/com/mysema/query/types/query/ObjectSubQuery.java
Patch:
@@ -22,9 +22,10 @@
  * @param <JM>
  * @param <A>
  */
-@SuppressWarnings("serial")
 public final class ObjectSubQuery<A> extends Expr<A> implements SubQuery{
 
+    private static final long serialVersionUID = -64156984110154969L;
+
     private final QueryMetadata md;
     
     @Nullable

File: querydsl-apt/src/main/java/com/mysema/query/apt/APTTypeModelFactory.java
Patch:
@@ -45,7 +45,7 @@
  * @author tiwe
  *
  */
-public class APTTypeModelFactory {
+public final class APTTypeModelFactory {
     
     private final Map<List<String>,TypeModel> cache = new HashMap<List<String>,TypeModel>();
 

File: querydsl-collections/src/main/java/com/mysema/query/collections/impl/ColQuerySerializer.java
Patch:
@@ -27,7 +27,7 @@
  * @author tiwe
  * @version $Id$
  */
-public class ColQuerySerializer extends SerializerBase<ColQuerySerializer> {
+public final class ColQuerySerializer extends SerializerBase<ColQuerySerializer> {
 
     public ColQuerySerializer(ColQueryTemplates patterns) {
         super(patterns);

File: querydsl-core/src/main/java/com/mysema/query/BooleanBuilder.java
Patch:
@@ -17,7 +17,7 @@
  * @version $Id$
  */
 @SuppressWarnings("serial")
-public class BooleanBuilder extends EBoolean implements Cloneable{
+public final class BooleanBuilder extends EBoolean implements Cloneable{
     
     @Nullable
     private EBoolean expr;

File: querydsl-core/src/main/java/com/mysema/query/JoinExpression.java
Patch:
@@ -20,7 +20,7 @@
  * @author tiwe
  * @version $Id$
  */
-public class JoinExpression {
+public final class JoinExpression {
     
     // mutable
     private EBoolean condition;

File: querydsl-core/src/main/java/com/mysema/query/codegen/ClassTypeModel.java
Patch:
@@ -26,7 +26,7 @@
  *
  */
 @Immutable
-public class ClassTypeModel extends AbstractTypeModel{
+public final class ClassTypeModel extends AbstractTypeModel{
         
     private final Class<?> clazz;
     

File: querydsl-core/src/main/java/com/mysema/query/codegen/DTOSerializer.java
Patch:
@@ -22,7 +22,7 @@
  *
  */
 @Immutable
-public class DTOSerializer implements Serializer{
+public final class DTOSerializer implements Serializer{
     
     private final TypeMappings typeMappings;
     

File: querydsl-core/src/main/java/com/mysema/query/codegen/EmbeddableSerializer.java
Patch:
@@ -19,7 +19,7 @@
  * @author tiwe
  *
  */
-public class EmbeddableSerializer extends EntitySerializer{
+public final class EmbeddableSerializer extends EntitySerializer{
     
     public EmbeddableSerializer(TypeMappings typeMappings) {
         super(typeMappings);

File: querydsl-core/src/main/java/com/mysema/query/codegen/MethodModel.java
Patch:
@@ -16,7 +16,7 @@
  * 
  */
 @Immutable
-public class MethodModel {
+public final class MethodModel {
 
     private final EntityModel context;
 

File: querydsl-core/src/main/java/com/mysema/query/codegen/SimpleSerializerConfig.java
Patch:
@@ -11,7 +11,7 @@
  * @author tiwe
  *
  */
-public class SimpleSerializerConfig implements SerializerConfig{
+public final class SimpleSerializerConfig implements SerializerConfig{
     
     public static final SerializerConfig DEFAULT = new SimpleSerializerConfig(false, false, false, true);
 

File: querydsl-core/src/main/java/com/mysema/query/codegen/SimpleTypeModel.java
Patch:
@@ -19,7 +19,7 @@
  *
  */
 @Immutable
-public class SimpleTypeModel extends AbstractTypeModel {
+public final class SimpleTypeModel extends AbstractTypeModel {
 
     private final String fullName, packageName, simpleName, localName;
 

File: querydsl-core/src/main/java/com/mysema/query/codegen/SupertypeSerializer.java
Patch:
@@ -21,7 +21,7 @@
  *
  */
 @Immutable
-public class SupertypeSerializer extends EntitySerializer{
+public final class SupertypeSerializer extends EntitySerializer{
 
     public SupertypeSerializer(TypeMappings typeMappings) {
         super(typeMappings);

File: querydsl-core/src/main/java/com/mysema/query/codegen/TypeModelFactory.java
Patch:
@@ -25,7 +25,7 @@
  * @author tiwe
  * 
  */
-public class TypeModelFactory {
+public final class TypeModelFactory {
 
     private final Map<List<Type>, TypeModel> cache = new HashMap<List<Type>, TypeModel>();
     

File: querydsl-core/src/main/java/com/mysema/query/types/CaseBuilder.java
Patch:
@@ -39,7 +39,7 @@
  * @author tiwe
  * 
  */
-public class CaseBuilder {
+public final class CaseBuilder {
     
     private static class CaseElement<A> {
         

File: querydsl-core/src/main/java/com/mysema/query/types/CaseForEqBuilder.java
Patch:
@@ -40,7 +40,7 @@
  *
  * @param <D>
  */
-public class CaseForEqBuilder<D> {
+public final class CaseForEqBuilder<D> {
     
     private static class CaseElement<D> {
         

File: querydsl-core/src/main/java/com/mysema/query/types/ToStringVisitor.java
Patch:
@@ -20,7 +20,7 @@
  * @author tiwe
  * @version $Id$
  */
-public class ToStringVisitor extends VisitorBase<ToStringVisitor> {
+public final class ToStringVisitor extends VisitorBase<ToStringVisitor> {
 
     private final Templates templates;
 

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CustomMixin.java
Patch:
@@ -17,7 +17,7 @@
  * @param <T>
  */
 @SuppressWarnings("serial")
-class CustomMixin<T> implements Custom<T>, Serializable {
+public final class CustomMixin<T> implements Custom<T>, Serializable {
     
     private final Expr<T> self;
     

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDateConst.java
Patch:
@@ -14,7 +14,7 @@
  *
  */
 @SuppressWarnings("serial")
-public class EDateConst<D extends java.util.Date> extends EDate<D> implements Constant<D>{
+public final class EDateConst<D extends java.util.Date> extends EDate<D> implements Constant<D>{
  
     public static <D extends java.util.Date> EDate<D> create(D date){
         return new EDateConst<D>(date);

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDateTimeConst.java
Patch:
@@ -12,7 +12,7 @@
  *
  */
 @SuppressWarnings("serial")
-public class EDateTimeConst<D extends java.util.Date> extends EDateTime<D> implements Constant<D>{
+public final class EDateTimeConst<D extends java.util.Date> extends EDateTime<D> implements Constant<D>{
   
     public static <D extends java.util.Date> EDateTime<D> create(D date){
         return new EDateTimeConst<D>(date);

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ENumberConst.java
Patch:
@@ -17,7 +17,7 @@
  * @param <D>
  */
 @SuppressWarnings("serial")
-public class ENumberConst<D extends Number & Comparable<?>> extends ENumber<D> implements Constant<D>{
+public final class ENumberConst<D extends Number & Comparable<?>> extends ENumber<D> implements Constant<D>{
     
     @SuppressWarnings("unchecked")
     private static final ENumber<Byte>[] BYTES = new ENumber[256];

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ETimeConst.java
Patch:
@@ -14,7 +14,7 @@
  *
  */
 @SuppressWarnings("serial")
-public class ETimeConst<D extends java.util.Date> extends ETime<D> implements Constant<D>{
+public final class ETimeConst<D extends java.util.Date> extends ETime<D> implements Constant<D>{
     
     public static <D extends java.util.Date> ETime<D> create(D time){
         return new ETimeConst<D>(time);

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OperationMixin.java
Patch:
@@ -18,7 +18,7 @@
  * @param <RT>
  */
 @SuppressWarnings("serial")
-public class OperationMixin<OP, RT> implements Operation<OP, RT>, Serializable {
+public final class OperationMixin<OP, RT> implements Operation<OP, RT>, Serializable {
 
     private final List<Expr<?>> args;
     

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathBuilder.java
Patch:
@@ -18,7 +18,7 @@
  * @param <D>
  */
 @SuppressWarnings("serial")
-public class PathBuilder<D> extends PEntity<D>{
+public final class PathBuilder<D> extends PEntity<D>{
     
     private final Map<String,PathBuilder<?>> properties = new HashMap<String,PathBuilder<?>>();
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathBuilderFactory.java
Patch:
@@ -16,7 +16,7 @@
  * @author tiwe
  *
  */
-public class PathBuilderFactory {
+public final class PathBuilderFactory {
 
     private final Map<Class<?>, PathBuilder<?>> paths = new HashMap<Class<?>, PathBuilder<?>>();
     

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathMixin.java
Patch:
@@ -25,7 +25,7 @@
  * @param <T>
  */
 @SuppressWarnings("serial")
-class PathMixin<T> implements Path<T>, Serializable {
+public final class PathMixin<T> implements Path<T>, Serializable {
     
     @Nullable
     private volatile EBoolean isnull, isnotnull;

File: querydsl-core/src/main/java/com/mysema/query/types/query/ListSubQuery.java
Patch:
@@ -25,7 +25,7 @@
  * @param <A>
  */
 @SuppressWarnings("serial")
-public class ListSubQuery<A> extends ECollectionBase<List<A>,A> implements SubQuery{
+public final class ListSubQuery<A> extends ECollectionBase<List<A>,A> implements SubQuery{
 
     private final Class<A> elementType;
     

File: querydsl-core/src/main/java/com/mysema/query/types/query/ObjectSubQuery.java
Patch:
@@ -23,7 +23,7 @@
  * @param <A>
  */
 @SuppressWarnings("serial")
-public class ObjectSubQuery<A> extends Expr<A> implements SubQuery{
+public final class ObjectSubQuery<A> extends Expr<A> implements SubQuery{
 
     private final QueryMetadata md;
     

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLSerializer.java
Patch:
@@ -40,7 +40,7 @@
  * @author tiwe
  * @version $Id$
  */
-public class HQLSerializer extends SerializerBase<HQLSerializer> {
+public final class HQLSerializer extends SerializerBase<HQLSerializer> {
 
     private static final Map<JoinType, String> joinTypes = new HashMap<JoinType, String>();
     

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/sql/ConstructorResultTransformer.java
Patch:
@@ -17,7 +17,7 @@
  *
  */
 @SuppressWarnings("serial")
-public class ConstructorResultTransformer implements ResultTransformer{
+public final class ConstructorResultTransformer implements ResultTransformer{
 
     private transient final Constructor<?> constructor;
     

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/sql/HibernateSQLSerializer.java
Patch:
@@ -17,7 +17,7 @@
  * @author tiwe
  *
  */
-public class HibernateSQLSerializer extends SQLSerializer{
+public final class HibernateSQLSerializer extends SQLSerializer{
     
     private final List<Path<?>> entityPaths = new ArrayList<Path<?>>();
 

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/JDOQLQueryMixin.java
Patch:
@@ -10,7 +10,7 @@
  *
  * @param <T>
  */
-public class JDOQLQueryMixin<T> extends QueryMixin<T>{
+public final class JDOQLQueryMixin<T> extends QueryMixin<T>{
 
     public JDOQLQueryMixin(QueryMetadata metadata) {
         super(metadata);

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/JDOQLSerializer.java
Patch:
@@ -38,7 +38,7 @@
  * @author tiwe
  * 
  */
-public class JDOQLSerializer extends SerializerBase<JDOQLSerializer> {
+public final class JDOQLSerializer extends SerializerBase<JDOQLSerializer> {
     
     private static Comparator<Map.Entry<Object,String>> comparator = new Comparator<Map.Entry<Object,String>>(){
         @Override

File: querydsl-sql/src/main/java/com/mysema/query/sql/oracle/OracleSerializer.java
Patch:
@@ -17,7 +17,7 @@
  * @author tiwe
  * @version $Id$
  */
-public class OracleSerializer extends SQLSerializer {
+public final class OracleSerializer extends SQLSerializer {
 
     private final EBoolean connectBy, connectByPrior, connectByNocyclePrior;
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EBooleanConst.java
Patch:
@@ -20,7 +20,7 @@ public final class EBooleanConst extends EBoolean implements Constant<Boolean>{
     
     public static final EBoolean TRUE = new EBooleanConst(Boolean.TRUE);
     
-    public static final EBoolean create(Boolean b){
+    public static EBoolean create(Boolean b){
         return b.booleanValue() ? TRUE : FALSE;
     }
     

File: querydsl-apt/src/main/java/com/mysema/query/apt/Processor.java
Patch:
@@ -356,7 +356,7 @@ private void serialize(Serializer serializer, Map<String, EntityModel> models) {
                 Writer writer = fileObject.openWriter();
                 try {
                     SerializerConfig serializerConfig = configuration.getSerializerConfig(model);
-                    serializer.serialize(model, serializerConfig, writer);    
+                    serializer.serialize(model, serializerConfig, new JavaWriter(writer));    
                 }finally{
                     if (writer != null) {
                         writer.close();

File: querydsl-apt/src/test/java/com/mysema/query/domain/AnnotatedGettersTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.mysema.query.domain;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertNotNull;
 
 import org.junit.Test;
 

File: querydsl-apt/src/test/java/com/mysema/query/domain/ArrayTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.mysema.query.domain;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 
 import org.junit.Test;
 

File: querydsl-apt/src/test/java/com/mysema/query/domain/BlockingTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.mysema.query.domain;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertTrue;
 
 import org.junit.Test;
 

File: querydsl-apt/src/test/java/com/mysema/query/domain/InheritanceTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.mysema.query.domain;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertNotNull;
 
 import org.junit.Test;
 

File: querydsl-apt/src/test/java/com/mysema/query/domain/LiteralEntityTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.mysema.query.domain;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertNotNull;
 
 import org.junit.Test;
 

File: querydsl-apt/src/test/java/com/mysema/query/domain/QueryExtensions3Test.java
Patch:
@@ -6,7 +6,6 @@
 
 import com.mysema.query.annotations.QueryEntity;
 import com.mysema.query.annotations.QueryMethod;
-import com.mysema.query.domain.GenericTest.GenericNumberType;
 import com.mysema.query.types.path.PComparable;
 import com.mysema.query.types.path.PathMetadataFactory;
 

File: querydsl-apt/src/test/java/com/mysema/query/domain/QueryExtensions4Test.java
Patch:
@@ -6,7 +6,6 @@
 
 import com.mysema.query.annotations.QueryEntity;
 import com.mysema.query.annotations.QueryMethod;
-import com.mysema.query.domain.GenericTest.GenericNumberType;
 import com.mysema.query.types.path.PNumber;
 
 public class QueryExtensions4Test {

File: querydsl-apt/src/test/java/com/mysema/query/domain/QueryInitTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.mysema.query.domain;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
 
 import org.junit.Test;
 

File: querydsl-apt/src/test/java/com/mysema/query/domain/QuerydslConfigTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.mysema.query.domain;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 
 import java.util.List;
 import java.util.Map;

File: querydsl-apt/src/test/java/com/mysema/query/domain/p5/SupertypeTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.mysema.query.domain.p5;
 
-import static org.junit.Assert.*;
-
+import static org.junit.Assert.assertNotNull;
 
 import org.junit.Test;
 

File: querydsl-apt/src/test/java/com/mysema/query/domain/p5/package-info.java
Patch:
@@ -1,4 +1,5 @@
 @QuerydslVariables("Vars")
 package com.mysema.query.domain.p5;
 
-import com.mysema.query.annotations.QuerydslVariables;;
\ No newline at end of file
+import com.mysema.query.annotations.QuerydslVariables;
+;
\ No newline at end of file

File: querydsl-collections/src/test/java/com/mysema/query/alias/ExtensionsTest.java
Patch:
@@ -3,7 +3,7 @@
 import static com.mysema.query.alias.Alias.$;
 import static com.mysema.query.alias.Extensions.gt;
 import static com.mysema.query.alias.Extensions.having;
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 
 import java.util.Arrays;
 import java.util.List;

File: querydsl-collections/src/test/java/com/mysema/query/collections/impl/AliasTest.java
Patch:
@@ -5,7 +5,9 @@
  */
 package com.mysema.query.collections.impl;
 
-import static com.mysema.query.alias.Alias.*;
+import static com.mysema.query.alias.Alias.$;
+import static com.mysema.query.alias.Alias.alias;
+import static com.mysema.query.alias.Alias.var;
 import static com.mysema.query.collections.MiniApi.from;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;

File: querydsl-collections/src/test/java/com/mysema/query/collections/impl/DistinctTest.java
Patch:
@@ -12,7 +12,6 @@
 
 import org.junit.Test;
 
-import com.mysema.query.alias.Alias;
 import com.mysema.query.collections.MiniApi;
 import com.mysema.query.types.path.PNumber;
 

File: querydsl-collections/src/test/java/com/mysema/query/collections/impl/StringHandlingTest.java
Patch:
@@ -5,7 +5,6 @@
  */
 package com.mysema.query.collections.impl;
 
-import static com.mysema.query.alias.Alias.$;
 import static org.junit.Assert.assertEquals;
 
 import java.util.Arrays;

File: querydsl-core/src/main/java/com/mysema/query/alias/ManagedObject.java
Patch:
@@ -14,6 +14,9 @@
  */
 public interface ManagedObject {
 
+    /**
+     * @return
+     */
     PEntity<?> __mappedPath();
 
 }

File: querydsl-core/src/main/java/com/mysema/query/annotations/QuerydslConfig.java
Patch:
@@ -5,7 +5,8 @@
  */
 package com.mysema.query.annotations;
 
-import static java.lang.annotation.ElementType.*;
+import static java.lang.annotation.ElementType.PACKAGE;
+import static java.lang.annotation.ElementType.TYPE;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import java.lang.annotation.Documented;

File: querydsl-core/src/main/java/com/mysema/query/codegen/EmbeddableSerializer.java
Patch:
@@ -11,7 +11,6 @@
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.Path;
 import com.mysema.util.CodeWriter;
-import com.mysema.util.JavaWriter;
 
 
 /**
@@ -27,7 +26,7 @@ public EmbeddableSerializer(TypeMappings typeMappings) {
     }
 
     @Override
-    protected void constructorsForVariables(JavaWriter writer, EntityModel model) {
+    protected void constructorsForVariables(CodeWriter writer, EntityModel model) {
         // no root constructors
     }
     
@@ -37,7 +36,7 @@ protected void introDefaultInstance(CodeWriter writer, EntityModel model) {
     }
     
     @Override
-    protected void introFactoryMethods(JavaWriter writer, EntityModel model) throws IOException {
+    protected void introFactoryMethods(CodeWriter writer, EntityModel model) throws IOException {
         // no factory methods        
     }
     

File: querydsl-core/src/main/java/com/mysema/query/codegen/Serializer.java
Patch:
@@ -6,7 +6,8 @@
 package com.mysema.query.codegen;
 
 import java.io.IOException;
-import java.io.Writer;
+
+import com.mysema.util.CodeWriter;
 
 /**
  * Serializer defines a common interface for EntityModel serializers
@@ -24,7 +25,7 @@ public interface Serializer {
      * @param writer serialization target
      * @throws IOException
      */
-    void serialize(EntityModel type, SerializerConfig serializerConfig, Writer writer) throws IOException;
+    void serialize(EntityModel type, SerializerConfig serializerConfig, CodeWriter writer) throws IOException;
     
 
 }
\ No newline at end of file

File: querydsl-core/src/main/java/com/mysema/query/codegen/SupertypeSerializer.java
Patch:
@@ -13,7 +13,6 @@
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.Path;
 import com.mysema.util.CodeWriter;
-import com.mysema.util.JavaWriter;
 
 /**
  * SupertypeSerializer is a Serializer implementation for supertypes
@@ -29,7 +28,7 @@ public SupertypeSerializer(TypeMappings typeMappings) {
     }
 
     @Override
-    protected void constructorsForVariables(JavaWriter writer, EntityModel model) {
+    protected void constructorsForVariables(CodeWriter writer, EntityModel model) {
         // no constructors for variables
     }
     
@@ -39,7 +38,7 @@ protected void introDefaultInstance(CodeWriter writer, EntityModel model) {
     }
     
     @Override
-    protected void introFactoryMethods(JavaWriter writer, EntityModel model) throws IOException {
+    protected void introFactoryMethods(CodeWriter writer, EntityModel model) throws IOException {
         // no factory methods        
     }
         

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ETimeConst.java
Patch:
@@ -5,7 +5,6 @@
  */
 package com.mysema.query.types.expr;
 
-import java.sql.Time;
 import java.util.Calendar;
 
 import com.mysema.query.types.Visitor;

File: querydsl-core/src/test/java/com/mysema/query/BooleanBuilderTest.java
Patch:
@@ -5,7 +5,7 @@
  */
 package com.mysema.query;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 
 import org.junit.Test;
 

File: querydsl-core/src/test/java/com/mysema/query/alias/AliasTest.java
Patch:
@@ -5,8 +5,8 @@
  */
 package com.mysema.query.alias;
 
-import static com.mysema.query.alias.Alias.*;
-import static org.junit.Assert.*;
+import static com.mysema.query.alias.Alias.$;
+import static org.junit.Assert.assertEquals;
 
 import org.junit.Test;
 

File: querydsl-core/src/test/java/com/mysema/query/codegen/EntityModelTest.java
Patch:
@@ -12,6 +12,7 @@
 import org.junit.Test;
 
 import com.mysema.query.annotations.QueryExtensions;
+import com.mysema.util.JavaWriter;
 
 public class EntityModelTest {
 
@@ -43,7 +44,7 @@ public void annotation() throws IOException{
         TypeMappings typeMappings = new TypeMappings();
         EntitySerializer serializer = new EntitySerializer(typeMappings);
         StringWriter writer = new StringWriter();
-        serializer.serialize(entityModel, SimpleSerializerConfig.DEFAULT, writer);
+        serializer.serialize(entityModel, SimpleSerializerConfig.DEFAULT, new JavaWriter(writer));
         System.out.println(writer);
     }
 }

File: querydsl-core/src/test/java/com/mysema/query/codegen/ParameterModelTest.java
Patch:
@@ -5,7 +5,8 @@
  */
 package com.mysema.query.codegen;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 import org.junit.Test;
 

File: querydsl-core/src/test/java/com/mysema/query/codegen/SerializerTest.java
Patch:
@@ -11,6 +11,8 @@
 
 import org.junit.Test;
 
+import com.mysema.util.JavaWriter;
+
 /**
  * SerializerTest provides.
  * 
@@ -37,7 +39,7 @@ public SerializerTest() {
     @Test
     public void testDomainTypesAsOuterClasses() throws Exception {
         TypeMappings typeMappings = new TypeMappings();
-        new EntitySerializer(typeMappings).serialize(type, SimpleSerializerConfig.DEFAULT, writer);
+        new EntitySerializer(typeMappings).serialize(type, SimpleSerializerConfig.DEFAULT, new JavaWriter(writer));
 //        System.out.println(writer);
     }
 

File: querydsl-core/src/test/java/com/mysema/query/codegen/TypeModelTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.mysema.query.codegen;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 
 import org.junit.Test;
 

File: querydsl-core/src/test/java/com/mysema/query/types/expr/EConstructorTest.java
Patch:
@@ -5,7 +5,7 @@
  */
 package com.mysema.query.types.expr;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 
 import java.lang.reflect.Constructor;
 

File: querydsl-core/src/test/java/com/mysema/query/types/path/PathBuilderFactoryTest.java
Patch:
@@ -5,7 +5,7 @@
  */
 package com.mysema.query.types.path;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 
 import org.junit.Test;
 

File: querydsl-core/src/test/java/com/mysema/query/types/path/PathBuilderTest.java
Patch:
@@ -5,7 +5,7 @@
  */
 package com.mysema.query.types.path;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 
 import java.util.Map;
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/HibernateUpdateClause.java
Patch:
@@ -17,7 +17,6 @@
 import com.mysema.query.hql.HQLSerializer;
 import com.mysema.query.hql.HQLTemplates;
 import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.Path;
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/jpa/JPAUpdateClause.java
Patch:
@@ -16,7 +16,6 @@
 import com.mysema.query.hql.HQLSerializer;
 import com.mysema.query.hql.HQLTemplates;
 import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.Path;
 

File: querydsl-hql/src/test/java/com/mysema/query/HibernateQueryMutabilityTest.java
Patch:
@@ -14,7 +14,6 @@
 
 import com.mysema.query.hql.domain.QCat;
 import com.mysema.query.hql.hibernate.HibernateQuery;
-import com.mysema.query.hql.jpa.JPAQuery;
 import com.mysema.testutil.HibernateConfig;
 import com.mysema.testutil.HibernateTestRunner;
 

File: querydsl-hql/src/test/java/com/mysema/query/JPAQueryMutabilityTest.java
Patch:
@@ -5,7 +5,7 @@
  */
 package com.mysema.query;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
 import javax.persistence.EntityManager;

File: querydsl-hql/src/test/java/com/mysema/query/hql/BooleanOperationsTest.java
Patch:
@@ -5,7 +5,7 @@
  */
 package com.mysema.query.hql;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 
 import org.junit.Test;
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/FeaturesTest.java
Patch:
@@ -5,7 +5,6 @@
  */
 package com.mysema.query.hql;
 
-import static com.mysema.query.alias.Alias.$;
 import static com.mysema.query.hql.HQLGrammar.sum;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;

File: querydsl-hql/src/test/java/com/mysema/query/hql/UniqueResultsTest.java
Patch:
@@ -5,14 +5,14 @@
  */
 package com.mysema.query.hql;
 
+import static com.mysema.query.hql.domain.QCat.cat;
+import static org.junit.Assert.assertEquals;
+
 import org.hibernate.Session;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import com.mysema.query.hql.domain.Cat;
-import static com.mysema.query.hql.domain.QCat.cat;
-import static org.junit.Assert.*;
-
 import com.mysema.query.hql.hibernate.HibernateQuery;
 import com.mysema.testutil.HibernateConfig;
 import com.mysema.testutil.HibernateTestRunner;

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/Animal.java
Patch:
@@ -10,8 +10,6 @@
 
 import org.hibernate.annotations.Type;
 
-import com.mysema.query.ExtDoubleType;
-
 /**
  * The Class Animal.
  */

File: querydsl-hql/src/test/java/com/mysema/query/hql/domain/package-info.java
Patch:
@@ -6,3 +6,4 @@
 @QuerydslConfig(listAccessors=true, mapAccessors=true)
 package com.mysema.query.hql.domain;
 import com.mysema.query.annotations.QuerydslConfig;
+

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/dml/JDOQLUpdateClause.java
Patch:
@@ -12,7 +12,6 @@
 import com.mysema.query.dml.UpdateClause;
 import com.mysema.query.jdoql.JDOQLTemplates;
 import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.Path;
 

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/serialization/ExprSerializationTest.java
Patch:
@@ -9,8 +9,8 @@
 
 import org.junit.Test;
 
-import com.mysema.query.jdoql.JDOQLTemplates;
 import com.mysema.query.jdoql.JDOQLSerializer;
+import com.mysema.query.jdoql.JDOQLTemplates;
 import com.mysema.query.jdoql.testdomain.Book;
 import com.mysema.query.jdoql.testdomain.Product;
 import com.mysema.query.jdoql.testdomain.QBook;

File: querydsl-sql/src/main/java/com/mysema/query/sql/MetaDataExporter.java
Patch:
@@ -34,6 +34,7 @@
 import com.mysema.query.codegen.TypeMappings;
 import com.mysema.query.codegen.TypeModel;
 import com.mysema.query.codegen.TypeModels;
+import com.mysema.util.JavaWriter;
 
 /**
  * MetadataExporter exports JDBC metadata to Querydsl query types
@@ -160,8 +161,8 @@ private void serialize(EntityModel type) {
         String path = packageName.replace('.', '/') + "/" + type.getSimpleName() + ".java";
         try {                        
             Writer writer = writerFor(new File(targetFolder, path));
-            try{
-                serializer.serialize(type, serializerConfig, writer);    
+            try{                
+                serializer.serialize(type, serializerConfig, new JavaWriter(writer));    
             }finally{
                 writer.close();
             }            

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLUpdateClause.java
Patch:
@@ -15,7 +15,6 @@
 import com.mysema.query.sql.SQLSerializer;
 import com.mysema.query.sql.SQLTemplates;
 import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.Path;
 import com.mysema.util.JDBCUtil;

File: querydsl-sql/src/main/java/com/mysema/query/sql/oracle/OracleSerializer.java
Patch:
@@ -5,8 +5,8 @@
  */
 package com.mysema.query.sql.oracle;
 
-import com.mysema.query.sql.SQLTemplates;
 import com.mysema.query.sql.SQLSerializer;
+import com.mysema.query.sql.SQLTemplates;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.Expr;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathMixin.java
Patch:
@@ -36,6 +36,7 @@ class PathMixin<T> implements Path<T>, Serializable {
     
     private final Expr<T> self;
     
+    @Nullable
     private AnnotatedElement annotatedElement;
     
     @SuppressWarnings("unchecked")

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLTypeMapping.java
Patch:
@@ -6,6 +6,8 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import javax.annotation.Nullable;
+
 /**
  * @author tiwe
  *
@@ -54,6 +56,7 @@ public final class SQLTypeMapping {
         sqlToJavaType.put(Types.BLOB, Object.class);
     }
 
+    @Nullable
     public Class<?> get(int sqlType) {
         return sqlToJavaType.get(sqlType);
     }

File: querydsl-core/src/main/java/com/mysema/query/alias/Alias.java
Patch:
@@ -14,6 +14,8 @@
 import java.util.Map;
 import java.util.Set;
 
+import javax.annotation.Nullable;
+
 import org.apache.commons.lang.StringUtils;
 
 import com.mysema.query.types.expr.Expr;
@@ -80,6 +82,7 @@ public final class Alias {
     }
 
     @SuppressWarnings("unchecked")
+    @Nullable
     public static <D> PEntity<D> $(D arg) {
         PEntity<D> rv = aliasFactory.<PEntity<D>> getCurrentAndReset();
         if (rv != null) {

File: querydsl-apt/src/main/java/com/mysema/query/apt/APTTypeModelFactory.java
Patch:
@@ -215,6 +215,7 @@ private TypeModel createEnumType(DeclaredType t, TypeElement typeElement) {
         return create(typeElement, TypeCategory.SIMPLE, t.getTypeArguments());
     }
     
+    @Nullable
     private static Class<?> safeForName(String name){
         try {
             return Class.forName(name);

File: querydsl-collections/src/main/java/com/mysema/query/collections/impl/ColQuerySerializer.java
Patch:
@@ -39,7 +39,7 @@ public void visit(Path<?> path) {
         
         if (pathType == PathType.PROPERTY){            
             String prefix = "get";
-            if (((Expr<?>) path).getType() != null && ((Expr<?>) path).getType().equals(Boolean.class)) {
+            if (path.getType() != null && path.getType().equals(Boolean.class)) {
                 prefix = "is";
             }
             handle((Expr<?>) path.getMetadata().getParent());

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/HibernateUpdateClause.java
Patch:
@@ -60,10 +60,9 @@ public long execute() {
         return query.executeUpdate();
     }
 
-    @SuppressWarnings("unchecked")
     @Override
     public <T> HibernateUpdateClause set(Path<T> path, T value) {
-        metadata.addProjection(((Expr<T>)path).eq(value));
+        metadata.addProjection(path.asExpr().eq(value));
         return this;
     }
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/jpa/JPAUpdateClause.java
Patch:
@@ -58,7 +58,7 @@ public long execute() {
     @SuppressWarnings("unchecked")
     @Override
     public <T> JPAUpdateClause set(Path<T> path, T value) {
-        metadata.addProjection(((Expr<T>)path).eq(value));
+        metadata.addProjection(path.asExpr().eq(value));
         return this;
     }
 

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/dml/JDOQLUpdateClause.java
Patch:
@@ -46,10 +46,9 @@ public long execute() {
         throw new RuntimeException("Not yet implemented");
     }
 
-    @SuppressWarnings("unchecked")
     @Override
     public <T> JDOQLUpdateClause set(Path<T> path, T value) {
-        metadata.addProjection(((Expr<T>)path).eq(value));
+        metadata.addProjection(path.asExpr().eq(value));
         return this;
     }
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/dml/SQLUpdateClause.java
Patch:
@@ -68,10 +68,9 @@ protected void close(PreparedStatement stmt) {
         }        
     }
 
-    @SuppressWarnings("unchecked")
     @Override
     public <T> SQLUpdateClause set(Path<T> path, T value) {
-        metadata.addProjection(((Expr<T>)path).eq(value));
+        metadata.addProjection(path.asExpr().eq(value));
         return this;
     }
 

File: querydsl-apt/src/main/java/com/mysema/query/apt/ElementHandler.java
Patch:
@@ -159,8 +159,7 @@ public EntityModel handleNormalType(TypeElement e) {
                     handleFieldProperty(entityModel, field, properties, blockedProperties, types);
                 }else if (configuration.isBlockedField(field)){
                     blockedProperties.add(name);
-                }   
-                
+                }                   
             }        
         }
         

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/JDOQLSerializer.java
Patch:
@@ -143,6 +143,7 @@ public void serialize(QueryMetadata metadata, boolean forCountRow, boolean subqu
         
     }
 
+    @SuppressWarnings("unchecked")
     private void serializeVariables(List<JoinExpression> joins) {
         append("\nVARIABLES ");
         for (int i = 1; i < joins.size(); i++) {                

File: querydsl-apt/src/main/java/com/mysema/query/apt/APTTypeModelFactory.java
Patch:
@@ -186,6 +186,7 @@ && isAssignable(typeElement, comparableType)){
      * @param el
      * @return
      */
+    @Nullable
     public EntityModel createEntityModel(TypeMirror type){
         List<String> key = getKey(type, true);
         if (entityTypeCache.containsKey(key)){

File: querydsl-collections/src/main/java/com/mysema/query/collections/impl/ColQueryImpl.java
Patch:
@@ -16,7 +16,7 @@
  * @author tiwe
  *
  */
-public class ColQueryImpl extends AbstractColQuery<ColQueryImpl> implements ColQuery{
+public class ColQueryImpl extends AbstractColQuery<ColQueryImpl> implements ColQuery, Cloneable{
     
     public ColQueryImpl() {
         super(new DefaultQueryMetadata(), EvaluatorFactory.DEFAULT);

File: querydsl-collections/src/test/java/com/mysema/query/alias/ExtensionsTest.java
Patch:
@@ -58,7 +58,7 @@ public void oldFriends(){
         
         // querydsl style
         Person alias = Alias.alias(Person.class);
-        List<Person> oldFriends = MiniApi.from(alias, meAndMyFriends).where($(alias.getAge()).gt(30)).list($(alias));
+        MiniApi.from(alias, meAndMyFriends).where($(alias.getAge()).gt(30)).list($(alias));
         
         // lambdaj style
         MiniApi.from(alias, meAndMyFriends).where(having(alias.getAge(), gt(30))).list($(alias));

File: querydsl-core/src/main/java/com/mysema/query/DefaultQueryMetadata.java
Patch:
@@ -25,7 +25,7 @@
  * @author tiwe
  * @version $Id$
  */
-public class DefaultQueryMetadata implements QueryMetadata {
+public class DefaultQueryMetadata implements QueryMetadata, Cloneable {
     
     private boolean distinct;
     
@@ -48,11 +48,10 @@ public class DefaultQueryMetadata implements QueryMetadata {
 
     private final BooleanBuilder where = new BooleanBuilder();
     
-    @SuppressWarnings("unchecked")
     @Override
     public void addFrom(Expr<?>... args) {
         for (Expr<?> arg : args) {
-            if (arg instanceof Path){
+            if (arg instanceof Path<?>){
                 ensureRoot((Path<?>) arg);
             }
             if (!exprInJoins.contains(arg)) {

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/sql/ConstructorResultTransformer.java
Patch:
@@ -19,7 +19,7 @@
 @SuppressWarnings("serial")
 public class ConstructorResultTransformer implements ResultTransformer{
 
-    private final Constructor<?> constructor;
+    private transient final Constructor<?> constructor;
     
     public ConstructorResultTransformer(EConstructor<?> constructor){
         this.constructor = constructor.getJavaConstructor();

File: querydsl-hql/src/test/java/com/mysema/query/hql/DummySessionHolder.java
Patch:
@@ -14,12 +14,12 @@ public class DummySessionHolder implements SessionHolder{
 
     @Override
     public Query createQuery(String queryString) {
-        return null;
+        throw new UnsupportedOperationException();
     }
 
     @Override
     public SQLQuery createSQLQuery(String queryString) {
-        return null;
+        throw new UnsupportedOperationException();
     }
 
 }

File: querydsl-hql/src/test/java/com/mysema/query/hql/QueryHelper.java
Patch:
@@ -35,17 +35,17 @@ public long count() {
 
     @Override
     public Iterator<Object[]> iterate(Expr<?>[] args) {
-        return null;
+        throw new UnsupportedOperationException();
     }
 
     @Nullable
     public <RT> Iterator<RT> iterate(Expr<RT> projection) {
-        return null;
+        throw new UnsupportedOperationException();
     }
 
     @Nullable
     public <RT> SearchResults<RT> listResults(Expr<RT> expr) {
-        return null;
+        throw new UnsupportedOperationException();
     }
 
     public void parse() throws RecognitionException, TokenStreamException {

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/models/company/Account.java
Patch:
@@ -7,7 +7,6 @@
 
 import com.mysema.query.annotations.QueryEntity;
 
-
 /**
  * User account for a person.
  * 

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/models/company/Developer.java
Patch:
@@ -7,7 +7,6 @@
 
 import com.mysema.query.annotations.QueryEntity;
 
-
 /**
  * Developer of software for a system.
  * 
@@ -40,4 +39,6 @@ public String getSKILL() {
     public void setSKILL(String skill) {
         SKILL = skill;
     }
+    
+    
 }
\ No newline at end of file

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/models/company/Employee.java
Patch:
@@ -7,14 +7,13 @@
 
 import com.mysema.query.annotations.QueryEntity;
 
-
 /**
  * Employee in a company.
  * 
  * @version $Revision: 1.3 $
  */
 @QueryEntity
-public class Employee extends Person  {
+public class Employee extends Person {
     private String serialNo;
     private float salary;
     private String salaryCurrency;
@@ -23,7 +22,7 @@ public class Employee extends Person  {
     private Account account;
     private int weeklyhours;
     private Department department;
-    
+
     /** Used for the querying of static fields. */
     public static final String FIRSTNAME = "Bart";
 
@@ -102,4 +101,5 @@ public Department getDepartment() {
     }
     
     
+
 }
\ No newline at end of file

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/models/company/InsuranceDepartment.java
Patch:
@@ -7,13 +7,13 @@
 
 import com.mysema.query.annotations.QueryEntity;
 
-
 @QueryEntity
 public class InsuranceDepartment extends Department {
     private String someInfo1;
     private String someInfo2;
-    
-    public InsuranceDepartment(){}
+
+    public InsuranceDepartment() {
+    }
 
     public InsuranceDepartment(String name, String someInfo1, String someInfo2) {
         super(name);

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/models/company/Organisation.java
Patch:
@@ -7,7 +7,6 @@
 
 import com.mysema.query.annotations.QueryEntity;
 
-
 /**
  * Organisation that hands out qualifications to employees after taking training
  * courses
@@ -17,8 +16,9 @@
 @QueryEntity
 public class Organisation {
     String name;
-    
-    public Organisation(){}
+
+    public Organisation() {
+    }
 
     public Organisation(String name) {
         this.name = name;

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/models/company/PersonHolder.java
Patch:
@@ -7,7 +7,6 @@
 
 import com.mysema.query.annotations.QueryEntity;
 
-
 /**
  * Convenience class that can be used in query results for holding Person
  * objects.

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/models/company/PersonalDetails.java
Patch:
@@ -7,7 +7,6 @@
 
 import com.mysema.query.annotations.QueryEntity;
 
-
 /**
  * Details of a person. Represents a subset of the information available from
  * Person, and so can be used as a ResultClass for SQL/JDOQL queries.
@@ -20,8 +19,9 @@ public class PersonalDetails {
     private String lastName;
     private int age;
 
-    public PersonalDetails(){}
-    
+    public PersonalDetails() {
+    }
+
     public PersonalDetails(String first, String last, int age) {
         firstName = first;
         lastName = last;

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/models/company/PhoneNumber.java
Patch:
@@ -7,7 +7,6 @@
 
 import com.mysema.query.annotations.QueryEntity;
 
-
 /**
  * Phone number of a person.
  * 
@@ -18,8 +17,9 @@ public class PhoneNumber {
     long id; // PK when using app id
     String name;
     String number;
-    
-    public PhoneNumber(){}
+
+    public PhoneNumber() {
+    }
 
     public PhoneNumber(String name, String number) {
         this.name = name;

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/models/company/Project.java
Patch:
@@ -7,7 +7,6 @@
 
 import com.mysema.query.annotations.QueryEntity;
 
-
 /**
  * Project in a company.
  * 
@@ -17,8 +16,9 @@
 public class Project {
     String name; // PK when app id
     long budget;
-    
-    public Project(){}
+
+    public Project() {
+    }
 
     public Project(String name, long budget) {
         super();

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -66,8 +66,10 @@ public UnionBuilder<RT> orderBy(OrderSpecifier<?>... o) {
     @Nullable
     private final Connection conn;
 
+    @Nullable
     private List<Object> constants;
 
+    @Nullable
     private SubQuery[] sq;
 
     private final SQLTemplates templates;

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColQueryTemplates.java
Patch:
@@ -125,6 +125,7 @@ public static int getMilliSecond(Date date){
     
     private static int getField(Date date, int field){
         Calendar cal = Calendar.getInstance();
+        cal.setMinimalDaysInFirstWeek(4);
         cal.setTime(date);
         return cal.get(field);
     }

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDateConst.java
Patch:
@@ -29,6 +29,7 @@ public EDateConst(D date) {
         super((Class<D>)date.getClass());
         this.date = date;
         this.calendar = Calendar.getInstance();
+        calendar.setMinimalDaysInFirstWeek(4);
         calendar.setTime(date);
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDateTimeConst.java
Patch:
@@ -29,6 +29,7 @@ public EDateTimeConst(D date) {
         super((Class<D>)date.getClass());
         this.calendar = Calendar.getInstance();
         this.date = date;
+        calendar.setMinimalDaysInFirstWeek(4);
         calendar.setTime(date);
     }
 

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/BasicsTest.java
Patch:
@@ -13,6 +13,7 @@
 import javax.jdo.Transaction;
 
 import org.junit.BeforeClass;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import com.mysema.query.jdoql.testdomain.Book;
@@ -89,6 +90,7 @@ public void basicTests() {
     }
     
     @Test
+    @Ignore
     public void detachedResults(){
         for (Product p : detachedQuery().from(product).list(product)){
             System.out.println(p);

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColQueryTemplates.java
Patch:
@@ -19,7 +19,7 @@
  * @author tiwe
  * @version $Id$
  */
-public class ColQueryTemplates extends JavaTemplates {
+public final class ColQueryTemplates extends JavaTemplates {
 
     public static final ColQueryTemplates DEFAULT = new ColQueryTemplates();
     

File: querydsl-core/src/main/java/com/mysema/util/JavaWriter.java
Patch:
@@ -19,7 +19,7 @@
  * @author tiwe
  *
  */
-public class JavaWriter implements Appendable, CodeWriter{
+public final class JavaWriter implements Appendable, CodeWriter{
     
     private final Appendable appendable;
     

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLTemplates.java
Patch:
@@ -21,7 +21,7 @@
  * @author tiwe
  * @version $Id$
  */
-public class HQLTemplates extends Templates {
+public final class HQLTemplates extends Templates {
 
     public static final HQLTemplates DEFAULT = new HQLTemplates();
     

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/HibernateQuery.java
Patch:
@@ -20,7 +20,7 @@
  * @author tiwe
  *
  */
-public class HibernateQuery extends AbstractHibernateQuery<HibernateQuery> implements HQLQuery{
+public final class HibernateQuery extends AbstractHibernateQuery<HibernateQuery> implements HQLQuery{
 
     /**
      * Creates a detached query

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/sql/HibernateSQLQuery.java
Patch:
@@ -9,8 +9,6 @@
 import java.util.List;
 import java.util.Map;
 
-import javax.annotation.Nullable;
-
 import org.hibernate.Query;
 import org.hibernate.Session;
 import org.hibernate.StatelessSession;
@@ -45,7 +43,7 @@
  * @author tiwe
  *
  */
-public class HibernateSQLQuery extends ProjectableQuery<HibernateSQLQuery>{
+public final class HibernateSQLQuery extends ProjectableQuery<HibernateSQLQuery>{
     
     private static final ENumber<Integer> COUNT_ALL_AGG_EXPR = ONumber.create(Integer.class, Ops.AggOps.COUNT_ALL_AGG);
     

File: querydsl-hql/src/main/java/com/mysema/query/hql/jpa/JPAQuery.java
Patch:
@@ -18,7 +18,7 @@
  * @author tiwe
  *
  */
-public class JPAQuery extends AbstractJPAQuery<JPAQuery> implements HQLQuery{
+public final class JPAQuery extends AbstractJPAQuery<JPAQuery> implements HQLQuery{
 
     /**
      * Creates a new detached query 

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/JDOQLQueryImpl.java
Patch:
@@ -18,7 +18,7 @@
  * 
  * @param <A>
  */
-public class JDOQLQueryImpl extends AbstractJDOQLQuery<JDOQLQueryImpl> implements JDOQLQuery{
+public final class JDOQLQueryImpl extends AbstractJDOQLQuery<JDOQLQueryImpl> implements JDOQLQuery{
     
     /**
      * Create a detached JDOQLQueryImpl instance

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/JDOQLTemplates.java
Patch:
@@ -14,7 +14,7 @@
  * @author tiwe
  * 
  */
-public class JDOQLTemplates extends JavaTemplates {
+public final class JDOQLTemplates extends JavaTemplates {
 
     public static final JDOQLTemplates DEFAULT = new JDOQLTemplates();
     

File: querydsl-sql/src/main/java/com/mysema/query/sql/oracle/OracleQuery.java
Patch:
@@ -21,7 +21,7 @@
  * @author tiwe
  * @version $Id$
  */
-public class OracleQuery extends AbstractSQLQuery<OracleQuery> {
+public final class OracleQuery extends AbstractSQLQuery<OracleQuery> {
 
     private EBoolean connectBy, connectByPrior, connectByNocyclePrior;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PList.java
Patch:
@@ -43,7 +43,7 @@ public class PList<E, Q extends Expr<E>> extends ECollectionBase<List<E>,E> impl
     
     private final Map<Integer,Q> cache = new HashMap<Integer,Q>();
     
-    protected final Class<E> elementType;
+    private final Class<E> elementType;
     
     private final Path<List<E>> pathMixin;
     

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathMetadataFactory.java
Patch:
@@ -19,6 +19,8 @@
  */
 public final class PathMetadataFactory {
     
+    private PathMetadataFactory(){}
+    
     public static PathMetadata<Integer> forArrayAccess(PArray<?> parent, Expr<Integer> index) {
         return new PathMetadata<Integer>(parent, index, PathType.ARRAYVALUE);
     }

File: querydsl-core/src/main/java/com/mysema/util/MathUtils.java
Patch:
@@ -8,7 +8,9 @@
 import java.math.BigDecimal;
 import java.math.BigInteger;
 
-public class MathUtils {
+public final class MathUtils {
+    
+    private MathUtils(){}
 
     @SuppressWarnings("unchecked")
     public static <D extends Number & Comparable<?>> D sum(D num1, Number num2){

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLGrammar.java
Patch:
@@ -21,7 +21,9 @@
  * @author tiwe
  * @version $Id$
  */
-public class HQLGrammar {
+public final class HQLGrammar {
+    
+    private HQLGrammar(){}
 
     /**
      * @param <D>

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLQueryImpl.java
Patch:
@@ -55,7 +55,7 @@ protected SQLQueryImpl(Connection conn, SQLTemplates templates, QueryMetadata me
      * @return
      */
     public SQLQueryImpl clone(Connection conn){
-        return new SQLQueryImpl(conn, templates, getMetadata().clone());   
+        return new SQLQueryImpl(conn, getTemplates(), getMetadata().clone());   
     }
     
 }

File: querydsl-sql/src/main/java/com/mysema/query/sql/oracle/OracleQuery.java
Patch:
@@ -63,7 +63,7 @@ public OracleQuery orderSiblingsBy(Expr<?> path) {
     }
 
     protected SQLSerializer createSerializer() {
-        return new OracleSerializer(templates, connectBy, connectByNocyclePrior,
+        return new OracleSerializer(getTemplates(), connectBy, connectByNocyclePrior,
                 connectByPrior, orderSiblingsBy, startWith);
     }
     
@@ -74,7 +74,7 @@ protected SQLSerializer createSerializer() {
      * @return
      */
     public OracleQuery clone(Connection conn){
-        return new OracleQuery(conn, templates, getMetadata().clone());   
+        return new OracleQuery(conn, getTemplates(), getMetadata().clone());   
     }
 
     // TODO : connect by root

File: querydsl-core/src/main/java/com/mysema/query/types/CaseBuilder.java
Patch:
@@ -44,14 +44,15 @@ public class CaseBuilder {
     private static class CaseElement<A> {
         
         @Nullable
-        final EBoolean condition;
+        private final EBoolean condition;
         
-        final Expr<A> target;
+        private final Expr<A> target;
         
         public CaseElement(@Nullable EBoolean condition, Expr<A> target){
             this.condition = condition;
             this.target = target;
         }
+        
     }
     
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/CaseForEqBuilder.java
Patch:
@@ -45,9 +45,9 @@ public class CaseForEqBuilder<D> {
     private static class CaseElement<D> {
         
         @Nullable
-        final Expr<? extends D> eq;
+        private final Expr<? extends D> eq;
         
-        final Expr<?> target;
+        private final Expr<?> target;
         
         public CaseElement(@Nullable Expr<? extends D> eq, Expr<?> target){
             this.eq = eq;

File: querydsl-core/src/main/java/com/mysema/query/types/Templates.java
Patch:
@@ -199,12 +199,12 @@ protected Templates() {
         add(Ops.QuantOps.ALL, "all {0}");        
     }
 
-    protected void add(Operator<?> op, String pattern) {
+    protected final void add(Operator<?> op, String pattern) {
         Template template = templateFactory.create(pattern);
         templates.put(op, template);
     }
 
-    protected void add(Operator<?> op, String pattern, int pre) {
+    protected final void add(Operator<?> op, String pattern, int pre) {
         add(op, pattern);
         precedence.put(op, pre);
     }

File: querydsl-collections/src/main/java/com/mysema/query/collections/impl/AbstractColQuery.java
Patch:
@@ -193,7 +193,7 @@ protected Iterator<?> handleOrderBy(List<Expr<?>> sources, Iterator<?> it) throw
             orderByExpr[i] = (Expr) orderBy.get(i).getTarget();
             directions[i] = orderBy.get(i).getOrder() == Order.ASC;
         }
-        Expr<?> expr = new EArrayConstructor<Object>(Object.class, orderByExpr);
+        Expr<?> expr = new EArrayConstructor<Object>(Object[].class, orderByExpr);
         Evaluator ev = evaluatorFactory.create(sources, expr);
 
         // transform the iterator to list
@@ -230,7 +230,7 @@ public boolean evaluate(Object object) {
     @SuppressWarnings("unchecked")
     public Iterator<Object[]> iterate(Expr<?>[] args) {
         arrayProjection = true;
-        Expr<Object[]> projection = new EArrayConstructor(Object.class, args);
+        Expr<Object[]> projection = new EArrayConstructor(Object[].class, args);
         return iterate(projection);
     }
 

File: querydsl-core/src/test/java/com/mysema/query/types/StringTest.java
Patch:
@@ -88,7 +88,7 @@ public void testToString(){
         assertEquals("new SomeType(alias)", someType.toString());
         
         // EArrayConstructor
-        EArrayConstructor<SomeType> someTypeArray = new EArrayConstructor<SomeType>(SomeType.class,$(alias));
+        EArrayConstructor<SomeType> someTypeArray = new EArrayConstructor<SomeType>(SomeType[].class,$(alias));
         assertEquals("[alias]", someTypeArray.toString());
     }
     

File: querydsl-core/src/test/java/com/mysema/query/codegen/TypeModelFactoryTest.java
Patch:
@@ -17,7 +17,7 @@
 
 
 
-public class InspectingTypeModelTest {
+public class TypeModelFactoryTest {
     
     private TypeModelFactory factory = new TypeModelFactory();
     

File: querydsl-hql/src/test/java/com/mysema/query/hql/BooleanOperationsTest.java
Patch:
@@ -65,7 +65,8 @@ public void booleanBuilder2(){
     @Test
     public void booleanBuilderWithNull(){
         assertEquals("from Cat cat", sub().from(cat).where(new BooleanBuilder()).toString());
-        assertEquals("from Cat cat\ngroup by cat.name", sub().from(cat).groupBy(cat.name).having(new BooleanBuilder()).toString());
+        assertEquals("from Cat cat\ngroup by cat.name", 
+                sub().from(cat).groupBy(cat.name).having(new BooleanBuilder()).toString());
     }
     
 }

File: querydsl-hql/src/test/java/com/mysema/query/hql/CastTest.java
Patch:
@@ -5,7 +5,6 @@
  */
 package com.mysema.query.hql;
 
-import static com.mysema.query.alias.Alias.$;
 import static org.junit.Assert.assertEquals;
 
 import org.junit.Test;

File: querydsl-sql/src/main/java/com/mysema/query/sql/oracle/OracleTemplates.java
Patch:
@@ -50,8 +50,8 @@ public OracleTemplates(){
         add(Ops.DateTimeOps.DAY_OF_YEAR, "to_number(to_char({0},'DDD'))");
 
         setLimitAndOffsetSymbols(false);
-        setLimitTemplate("rownum < {0}");
-        setOffsetTemplate("rownum > {0}");
-        setLimitOffsetTemplate("rownum between {0} and {2}");
+        setLimitTemplate("rownum < %1$s");
+        setOffsetTemplate("rownum > %1$s");
+        setLimitOffsetTemplate("rownum between %1$s and %3$s");
     }
 }
\ No newline at end of file

File: querydsl-core/src/main/java/com/mysema/query/types/path/PArray.java
Patch:
@@ -54,7 +54,7 @@ public Expr<E[]> asExpr() {
         return this;
     }
 
-@Override
+    @Override
     public boolean equals(Object o) {
         return pathMixin.equals(o);
     }

File: querydsl-core/src/main/java/com/mysema/query/types/path/PEntity.java
Patch:
@@ -276,4 +276,5 @@ public EBoolean isNull() {
     public AnnotatedElement getAnnotatedElement(){
         return pathMixin.getAnnotatedElement();
     }
+    
 }
\ No newline at end of file

File: querydsl-core/src/main/java/com/mysema/query/types/path/PComparable.java
Patch:
@@ -15,7 +15,7 @@
  * @author tiwe
  * 
  * @param <D>
- * @see java.util.Comparable
+ * @see java.util.ComparableType
  */
 @SuppressWarnings({"unchecked","serial"})
 public class PComparable<D extends Comparable> extends EComparable<D> implements Path<D> {

File: querydsl-core/src/test/java/com/mysema/query/alias/FinalPropertyTest.java
Patch:
@@ -21,7 +21,7 @@ public void setProperty(Entity2 property) {
     public static final class Entity2{
         
     }
-
+    
     @Test
     public void test(){
         Entity entity = Alias.alias(Entity.class);

File: querydsl-core/src/main/java/com/mysema/query/alias/Alias.java
Patch:
@@ -144,7 +144,7 @@ public final class Alias {
     }
     
     public static <A> A alias(Class<A> cl) {
-        return aliasFactory.createAliasForVariable(cl, StringUtils.uncapitalize(cl.getSimpleName()));
+        return alias(cl, StringUtils.uncapitalize(cl.getSimpleName()));
     }
 
     public static <A> A alias(Class<A> cl, Expr<? extends A> expr) {

File: querydsl-apt/src/test/java/com/mysema/query/domain/AnimalTest.java
Patch:
@@ -23,9 +23,8 @@ public static class Cat extends Animal{
     }
     
     @Test
-    public void test(){
-        assertTrue("direct copy of PString field failed", 
-                QAnimalTest_Cat.cat.name == QAnimalTest_Cat.cat._super.name);
+    public void properties_are_copied_from_super(){
+        assertTrue("direct copy of PString field failed",  QAnimalTest_Cat.cat.name == QAnimalTest_Cat.cat._super.name);
         
     }
     

File: querydsl-apt/src/test/java/com/mysema/query/domain/AnnotatedGettersTest.java
Patch:
@@ -14,7 +14,7 @@ public interface Entity{
     }
     
     @Test
-    public void test(){
+    public void annotated_getter_is_supported(){
         assertNotNull(QAnnotatedGettersTest_Entity.entity.name);
     }
 

File: querydsl-apt/src/test/java/com/mysema/query/domain/EmbeddableTest.java
Patch:
@@ -66,6 +66,6 @@ public static class SuperclassAndEmbeddable{
     
     @Test
     public void test(){
-        
+        // TODO
     }
 }

File: querydsl-apt/src/test/java/com/mysema/query/domain/LiteralEntityTest.java
Patch:
@@ -1,5 +1,7 @@
 package com.mysema.query.domain;
 
+import static org.junit.Assert.*;
+
 import org.junit.Test;
 
 import com.mysema.query.annotations.QueryEntity;
@@ -13,7 +15,7 @@ enum EnumEntity{
     
     @Test
     public void test(){
-        // TODO
+        assertNotNull(QLiteralEntityTest_EnumEntity.enumEntity);
     }
 
 }

File: querydsl-apt/src/test/java/com/mysema/query/domain/QueryExtensions3Test.java
Patch:
@@ -40,7 +40,8 @@ public void test(){
     }
     
     @Test
-    public void superClass(){
+    public void test_Point_has_right_type(){
         assertEquals(PComparable.class, QQueryExtensions3Test_Point.class.getSuperclass());
+        assertEquals(PComparable.class, QQueryExtensions3Test_Entity.entity.point.getClass().getSuperclass());
     }
 }

File: querydsl-apt/src/test/java/com/mysema/query/domain/QueryInit2Test.java
Patch:
@@ -39,7 +39,7 @@ public static class Owner{
     }
     
     @Test
-    public void test(){
+    public void test_long_path(){
         assertNotNull(QQueryInit2Test_Categorization.categorization.event.account.owner);
         assertNotNull(QQueryInit2Test_Categorization.categorization.event.as(QQueryInit2Test_Activation.class).account.owner);
     }

File: querydsl-apt/src/test/java/com/mysema/query/domain/QuerydslConfigTest.java
Patch:
@@ -33,7 +33,7 @@ public static class Entity extends Superclass{
     }
     
     @Test
-    public void test(){
+    public void test_long_path(){
         assertEquals("entity.prop1.prop2.prop1", QQuerydslConfigTest_Entity.entity.prop1().prop2().prop1().toString());
     }
 

File: querydsl-apt/src/main/java/com/mysema/query/apt/Processor.java
Patch:
@@ -190,7 +190,9 @@ private void handleExtensionType(TypeMirror type, Element element) {
         // handle methods
         Map<String,MethodModel> queryMethods = new HashMap<String,MethodModel>();
         for (ExecutableElement method : ElementFilter.methodsIn(element.getEnclosedElements())){
-            entityVisitor.handleQueryMethod(entityModel, method, queryMethods);
+            if (method.getAnnotation(QueryMethod.class) != null){
+                entityVisitor.handleQueryMethod(entityModel, method, queryMethods);    
+            }            
         }            
         for (MethodModel method : queryMethods.values()){
             entityModel.addMethod(method);

File: querydsl-core/src/main/java/com/mysema/util/CodeWriter.java
Patch:
@@ -37,7 +37,7 @@ public interface CodeWriter extends Appendable{
 
     CodeWriter javadoc(String... lines) throws IOException;
 
-    CodeWriter line(String line) throws IOException;
+    CodeWriter line(String... segments) throws IOException;
 
     CodeWriter lines(String... lines) throws IOException;
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLQueryMixin.java
Patch:
@@ -27,6 +27,8 @@
  */
 public class HQLQueryMixin<T> extends QueryMixin<T> {
 
+    public HQLQueryMixin() {}
+    
     public HQLQueryMixin(QueryMetadata metadata) {
         super(metadata);
     }

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/AbstractHibernateQuery.java
Patch:
@@ -16,7 +16,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.mysema.query.QueryMetadata;
+import com.mysema.query.DefaultQueryMetadata;
 import com.mysema.query.QueryModifiers;
 import com.mysema.query.SearchResults;
 import com.mysema.query.hql.HQLQueryBase;
@@ -44,8 +44,8 @@ public abstract class AbstractHibernateQuery<SubType extends AbstractHibernateQu
     
     private int timeout = 0;    
 
-    public AbstractHibernateQuery(QueryMetadata md, SessionHolder session, HQLTemplates patterns) {
-        super(md, patterns);
+    public AbstractHibernateQuery(SessionHolder session, HQLTemplates patterns) {
+        super(new DefaultQueryMetadata(), patterns);
         this.session = session;
     }
     

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/HibernateQuery.java
Patch:
@@ -30,7 +30,7 @@ public HibernateQuery(StatelessSession session) {
     }
         
     public HibernateQuery(SessionHolder session, HQLTemplates templates) {
-        super(new DefaultQueryMetadata(), session, templates);
+        super(session, templates);
     }
     
 

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/AbstractJDOQLQuery.java
Patch:
@@ -41,8 +41,8 @@ public abstract class AbstractJDOQLQuery<SubType extends AbstractJDOQLQuery<SubT
     private final PersistenceManager pm;
     
     @SuppressWarnings("unchecked")
-    public AbstractJDOQLQuery(QueryMetadata md, PersistenceManager pm, JDOQLTemplates templates) {
-        super(new JDOQLQueryMixin<SubType>(new DefaultQueryMetadata()));
+    public AbstractJDOQLQuery(PersistenceManager pm, JDOQLTemplates templates) {
+        super(new JDOQLQueryMixin<SubType>());
         this.queryMixin.setSelf((SubType) this);
         this.templates = templates;
         this.pm = pm;

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/JDOQLQueryImpl.java
Patch:
@@ -20,10 +20,10 @@
 public class JDOQLQueryImpl extends AbstractJDOQLQuery<JDOQLQueryImpl> implements JDOQLQuery{
 
     public JDOQLQueryImpl(PersistenceManager pm, JDOQLTemplates templates) {
-        super(new DefaultQueryMetadata(), pm, templates);
+        super(pm, templates);
     }
 
     public JDOQLQueryImpl(PersistenceManager pm) {
-        super(new DefaultQueryMetadata(), pm, JDOQLTemplates.DEFAULT);
+        super(pm, JDOQLTemplates.DEFAULT);
     }
 }

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/JDOQLQueryMixin.java
Patch:
@@ -12,6 +12,8 @@
  */
 public class JDOQLQueryMixin<T> extends QueryMixin<T>{
 
+    public JDOQLQueryMixin() { }
+    
     public JDOQLQueryMixin(QueryMetadata metadata) {
         super(metadata);
     }

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -75,7 +75,7 @@ public UnionBuilder<RT> orderBy(OrderSpecifier<?>... o) {
 
     @SuppressWarnings("unchecked")
     public AbstractSQLQuery(Connection conn, SQLTemplates templates) {
-        super(new QueryMixin<SubType>(new DefaultQueryMetadata()));
+        super(new QueryMixin<SubType>());
         this.queryMixin.setSelf((SubType) this);
         this.conn = conn;
         this.templates = templates;

File: querydsl-core/src/main/java/com/mysema/query/alias/MethodType.java
Patch:
@@ -7,6 +7,8 @@
 
 import java.lang.reflect.Method;
 
+import javax.annotation.Nullable;
+
 import com.mysema.query.types.path.PEntity;
 
 /**
@@ -43,6 +45,7 @@ enum MethodType{
      */
     TO_STRING;
     
+    @Nullable
     public static MethodType get(Method method) {
         String name = method.getName();
         int paramCount = method.getParameterTypes().length;

File: querydsl-core/src/main/java/com/mysema/query/alias/PropertyAccessInvocationHandler.java
Patch:
@@ -254,7 +254,7 @@ public PEntity get(int index) {
         } else if (Map.class.isAssignableFrom(type)) {
             Class<Object> keyType = (Class)getTypeParameter(genericType, 0);
             final Class<Object> valueType = (Class)getTypeParameter(genericType, 1);
-            path = new PMap<Object,Object,PEntity<Object>>(keyType, valueType, null, pm){
+            path = new PMap<Object,Object,PEntity<Object>>(keyType, valueType, (Class)PEntity.class, pm){
                 @Override
                 public PEntity get(Expr<Object> key) {
                     return new PEntity(valueType, forMapAccess(key));

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CustomMixin.java
Patch:
@@ -5,6 +5,7 @@
  */
 package com.mysema.query.types.custom;
 
+import java.io.Serializable;
 import java.util.List;
 
 import com.mysema.query.types.Template;
@@ -15,7 +16,8 @@
  *
  * @param <T>
  */
-class CustomMixin<T> implements Custom<T> {
+@SuppressWarnings("serial")
+class CustomMixin<T> implements Custom<T>, Serializable {
     
     private final List<Expr<?>> args;
     

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OperationMixin.java
Patch:
@@ -5,6 +5,7 @@
  */
 package com.mysema.query.types.operation;
 
+import java.io.Serializable;
 import java.util.Collections;
 import java.util.List;
 
@@ -16,7 +17,8 @@
  * @param <OP>
  * @param <RT>
  */
-public class OperationMixin<OP, RT> implements Operation<OP, RT> {
+@SuppressWarnings("serial")
+public class OperationMixin<OP, RT> implements Operation<OP, RT>, Serializable {
 
     private final List<Expr<?>> args;
     

File: querydsl-core/src/main/java/com/mysema/query/types/path/PList.java
Patch:
@@ -48,7 +48,7 @@ public class PList<E, Q extends Expr<E>> extends ECollectionBase<List<E>,E> impl
     
     private final Class<Q> queryType;    
     
-    private Constructor<Q> constructor;    
+    private transient Constructor<Q> constructor;    
     
     @SuppressWarnings("unchecked")
     public PList(Class<? super E> elementType, Class<Q> queryType, PathMetadata<?> metadata) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/PMap.java
Patch:
@@ -43,7 +43,7 @@ public class PMap<K, V, E extends Expr<V>> extends EMapBase<K, V> implements Pat
     
     private final Class<E> queryType;
     
-    private Constructor<E> constructor; 
+    private transient Constructor<E> constructor; 
     
     private final Class<V> valueType;
     

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathInits.java
Patch:
@@ -5,6 +5,7 @@
  */
 package com.mysema.query.types.path;
 
+import java.io.Serializable;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -15,7 +16,8 @@
  * @author tiwe
  *
  */
-public class PathInits {
+@SuppressWarnings("serial")
+public class PathInits implements Serializable{
 
     public static final PathInits DEFAULT = new PathInits();
     

File: querydsl-apt/src/main/java/com/mysema/query/apt/QuerydslAnnotationProcessor.java
Patch:
@@ -40,7 +40,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
         embeddable = QueryEmbeddable.class;
         skip = QueryTransient.class;
         
-        SimpleConfiguration configuration = new SimpleConfiguration(roundEnv, entity, superType, embeddable, skip);
+        DefaultConfiguration configuration = new DefaultConfiguration(roundEnv, entity, superType, embeddable, skip);
         
         Processor processor = new Processor(processingEnv, configuration);
         processor.process(roundEnv);

File: querydsl-apt/src/main/java/com/mysema/query/apt/hibernate/HibernateAnnotationProcessor.java
Patch:
@@ -5,7 +5,7 @@
 import javax.annotation.processing.SupportedSourceVersion;
 import javax.lang.model.SourceVersion;
 
-import com.mysema.query.apt.SimpleConfiguration;
+import com.mysema.query.apt.DefaultConfiguration;
 import com.mysema.query.apt.jpa.JPAAnnotationProcessor;
 
 /**
@@ -17,7 +17,7 @@
 public class HibernateAnnotationProcessor extends JPAAnnotationProcessor{
     
     @Override
-    protected SimpleConfiguration createConfiguration(RoundEnvironment roundEnv) throws ClassNotFoundException {
+    protected DefaultConfiguration createConfiguration(RoundEnvironment roundEnv) throws ClassNotFoundException {
         return new HibernateConfiguration(roundEnv, entity, superType, embeddable, skip);
     } 
 

File: querydsl-apt/src/main/java/com/mysema/query/apt/jdo/JDOAnnotationProcessor.java
Patch:
@@ -17,7 +17,7 @@
 import javax.tools.Diagnostic;
 
 import com.mysema.query.apt.Processor;
-import com.mysema.query.apt.SimpleConfiguration;
+import com.mysema.query.apt.DefaultConfiguration;
 
 /**
  * @author tiwe
@@ -38,7 +38,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
             embeddable = (Class)Class.forName("javax.jdo.annotations.EmbeddedOnly");
             skip = (Class)Class.forName("javax.jdo.annotations.NotPersistent");
             
-            SimpleConfiguration configuration = new SimpleConfiguration(roundEnv, entity, null, embeddable, skip);
+            DefaultConfiguration configuration = new DefaultConfiguration(roundEnv, entity, null, embeddable, skip);
             configuration.setUseGetters(false);
             Processor processor = new Processor(processingEnv, configuration);
             processor.process(roundEnv);

File: querydsl-apt/src/main/java/com/mysema/query/apt/jpa/JPAAnnotationProcessor.java
Patch:
@@ -17,7 +17,7 @@
 import javax.tools.Diagnostic;
 
 import com.mysema.query.apt.Processor;
-import com.mysema.query.apt.SimpleConfiguration;
+import com.mysema.query.apt.DefaultConfiguration;
 
 /**
  * @author tiwe
@@ -39,7 +39,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
             embeddable = (Class)Class.forName("javax.persistence.Embeddable");
             skip = (Class)Class.forName("javax.persistence.Transient");
             
-            SimpleConfiguration configuration = createConfiguration(roundEnv);
+            DefaultConfiguration configuration = createConfiguration(roundEnv);
             Processor processor = new Processor(processingEnv, configuration);
             processor.process(roundEnv);
             return true;
@@ -49,7 +49,7 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
         }        
     }
 
-    protected SimpleConfiguration createConfiguration(RoundEnvironment roundEnv) throws ClassNotFoundException {
+    protected DefaultConfiguration createConfiguration(RoundEnvironment roundEnv) throws ClassNotFoundException {
         return new JPAConfiguration(roundEnv, entity, superType, embeddable, skip);
     }       
     

File: querydsl-apt/src/main/java/com/mysema/query/apt/jpa/JPAConfiguration.java
Patch:
@@ -16,14 +16,14 @@
 import javax.lang.model.element.TypeElement;
 
 import com.mysema.query.annotations.QueryType;
-import com.mysema.query.apt.SimpleConfiguration;
+import com.mysema.query.apt.DefaultConfiguration;
 import com.mysema.query.apt.VisitorConfig;
 
 /**
  * @author tiwe
  *
  */
-public class JPAConfiguration extends SimpleConfiguration {
+public class JPAConfiguration extends DefaultConfiguration {
    
     private List<Class<? extends Annotation>> annotations;
     

File: querydsl-core/src/main/java/com/mysema/query/types/operation/ONumber.java
Patch:
@@ -6,7 +6,6 @@
 package com.mysema.query.types.operation;
 
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 
 import com.mysema.query.types.Visitor;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PEntity.java
Patch:
@@ -154,7 +154,7 @@ protected <A extends Comparable> PDateTime<A> createDateTime(String property, Cl
      */
     @SuppressWarnings("unchecked")
     protected <A, E extends Expr<A>> PList<A, E> createList(String property, Class<? super A> type, Class<? super E> queryType) {
-        return new PList<A, E>(type, type.getSimpleName(), (Class) queryType, forProperty(property));
+        return new PList<A, E>(type, (Class) queryType, forProperty(property));
     }
 
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathBuilder.java
Patch:
@@ -11,6 +11,8 @@
 import com.mysema.query.types.expr.Expr;
 
 /**
+ * PathBuilder is an extension to PEntity for dynamic path construction
+ * 
  * @author tiwe
  *
  * @param <D>

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathBuilderFactory.java
Patch:
@@ -11,6 +11,8 @@
 import org.apache.commons.lang.StringUtils;
 
 /**
+ * PathBuilderFactory is a factory class for PathBuilder creation
+ * 
  * @author tiwe
  *
  */

File: querydsl-core/src/test/java/com/mysema/query/codegen/SerializerTest.java
Patch:
@@ -44,7 +44,7 @@ public SerializerTest() {
      */
     @Test
     public void testDomainTypesAsOuterClasses() throws Exception {
-        new EntitySerializer().serialize(type, null, writer);
+        new EntitySerializer().serialize(type, SimpleSerializerConfig.DEFAULT, writer);
 //        System.out.println(writer);
     }
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/AbstractHibernateQuery.java
Patch:
@@ -13,7 +13,6 @@
 import org.hibernate.Query;
 import org.hibernate.ScrollMode;
 import org.hibernate.ScrollableResults;
-import org.hibernate.Session;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -41,11 +40,11 @@ public abstract class AbstractHibernateQuery<SubType extends AbstractHibernateQu
 
     private int fetchSize = 0;
 
-    private final Session session;
+    private final SessionHolder session;
     
     private int timeout = 0;    
 
-    public AbstractHibernateQuery(QueryMetadata md, Session session, HQLTemplates patterns) {
+    public AbstractHibernateQuery(QueryMetadata md, SessionHolder session, HQLTemplates patterns) {
         super(md, patterns);
         this.session = session;
     }

File: querydsl-hql/src/test/java/com/mysema/query/AbstractHibernateTest.java
Patch:
@@ -5,14 +5,14 @@
  */
 package com.mysema.query;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
 
 import java.util.List;
 
 import org.hibernate.Session;
 import org.junit.Test;
 
-import com.mysema.query.hql.HQLTemplates;
 import com.mysema.query.hql.domain.Cat;
 import com.mysema.query.hql.domain.QCat;
 import com.mysema.query.hql.hibernate.HibernateQuery;
@@ -26,7 +26,7 @@ public abstract class AbstractHibernateTest extends AbstractStandardTest{
     private Session session;
     
     protected HibernateQuery query(){
-        return new HibernateQuery(session, HQLTemplates.DEFAULT);
+        return new HibernateQuery(session);
     }
 
     public void setSession(Session session) {

File: querydsl-hql/src/test/java/com/mysema/query/hql/QueryHelper.java
Patch:
@@ -1,4 +1,6 @@
-/**
+/*
+ * Copyright (c) 2009 Mysema Ltd.
+ * All rights reserved.
  * 
  */
 package com.mysema.query.hql;

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EBooleanConst.java
Patch:
@@ -15,7 +15,7 @@
  */
 @SuppressWarnings("serial")
 public class EBooleanConst extends EBoolean implements Constant<Boolean>{
-        
+       
     public static final EBoolean FALSE = new EBooleanConst(Boolean.FALSE);
     
     public static final EBoolean TRUE = new EBooleanConst(Boolean.TRUE);

File: querydsl-apt/src/test/java/com/mysema/query/domain/QueryInit2Test.java
Patch:
@@ -23,7 +23,7 @@ public static class Event{
     }
     
     @QueryEntity
-    public static class Withdrawal extends Event{
+    public static class Activation extends Event{
             
     }
     
@@ -41,7 +41,7 @@ public static class Owner{
     @Test
     public void test(){
         assertNotNull(QCategorization.categorization.event.account.owner);
-        assertNotNull(QCategorization.categorization.event.as(QWithdrawal.class).account.owner);
+        assertNotNull(QCategorization.categorization.event.as(QActivation.class).account.owner);
     }
 
 }

File: querydsl-core/src/main/java/com/mysema/query/alias/SimpleAliasFactory.java
Patch:
@@ -12,7 +12,6 @@
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PathMetadata;
 import com.mysema.query.util.FactoryMap;
-import com.mysema.query.util.NotEmpty;
 
 /**
  * SimpleAliasFactory creates CGLIB based alias proxy instances and keeps track
@@ -28,7 +27,7 @@ class SimpleAliasFactory implements AliasFactory {
     // caches top level paths (class/var as key)
     private FactoryMap<PEntity<?>> pathCache = new FactoryMap<PEntity<?>>() {
         @SuppressWarnings("unused")
-        public <A> PEntity<A> create(Class<A> cl, @NotEmpty String var) {
+        public <A> PEntity<A> create(Class<A> cl, String var) {
             return new PEntity<A>(cl, cl.getSimpleName(), PathMetadata.forVariable(var));
         }
     };

File: querydsl-core/src/main/java/com/mysema/query/codegen/EmbeddableSerializer.java
Patch:
@@ -28,9 +28,6 @@ protected void introFactoryMethods(StringBuilder builder, EntityModel model) thr
     
     @Override
     protected void introImports(StringBuilder builder, EntityModel model) {
-        if (model.hasEntityFields()){
-            builder.append("import com.mysema.query.util.*;\n");    
-        }        
         builder.append("import com.mysema.query.types.path.*;\n\n");
         if (hasOwnEntityProperties(model)){
             builder.append("import static com.mysema.query.types.path.PathMetadata.*;\n");    

File: querydsl-core/src/main/java/com/mysema/query/codegen/SupertypeSerializer.java
Patch:
@@ -35,9 +35,6 @@ protected void introFactoryMethods(StringBuilder builder, EntityModel model) thr
         
     @Override
     protected void introImports(StringBuilder builder, EntityModel model) {
-        if (model.hasEntityFields()){
-            builder.append("import com.mysema.query.util.*;\n");    
-        }        
         builder.append("import com.mysema.query.types.path.*;\n\n");
         if (hasOwnEntityProperties(model)){
             builder.append("import static com.mysema.query.types.path.PathMetadata.*;\n");    

File: querydsl-core/src/main/java/com/mysema/query/types/path/PBoolean.java
Patch:
@@ -7,7 +7,6 @@
 
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.util.NotEmpty;
 
 /**
  * PBoolean represents boolean path expressions
@@ -21,15 +20,15 @@ public class PBoolean extends EBoolean implements Path<Boolean> {
 
     private final Path<Boolean> pathMixin;
 
-    public PBoolean(Path<?> parent, @NotEmpty String property) {
+    public PBoolean(Path<?> parent, String property) {
         this(PathMetadata.forProperty(parent, property));
     }
 
     public PBoolean(PathMetadata<?> metadata) {
         this.pathMixin = new PathMixin<Boolean>(this, metadata);
     }
     
-    public PBoolean(@NotEmpty String var) {
+    public PBoolean(String var) {
         this(PathMetadata.forVariable(var));
     }
     

File: querydsl-core/src/main/java/com/mysema/query/types/path/PCollection.java
Patch:
@@ -12,7 +12,6 @@
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.ECollectionBase;
 import com.mysema.query.types.expr.Expr;
-import com.mysema.query.util.NotEmpty;
 
 /**
  * PCollection represents collection paths
@@ -31,7 +30,7 @@ public class PCollection<E> extends ECollectionBase<Collection<E>,E> implements
     private final Path<Collection<E>> pathMixin;
     
     @SuppressWarnings("unchecked")
-    public PCollection(Class<? super E> type, @NotEmpty String entityName, PathMetadata<?> metadata) {
+    public PCollection(Class<? super E> type, String entityName, PathMetadata<?> metadata) {
         super((Class)Collection.class);        
         this.elementType = (Class<E>) Assert.notNull(type,"type is null");
         this.entityName = Assert.notNull(entityName,"entityName is null");

File: querydsl-core/src/main/java/com/mysema/query/types/path/PDate.java
Patch:
@@ -8,7 +8,6 @@
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EDate;
-import com.mysema.query.util.NotEmpty;
 
 /**
  * @author tiwe
@@ -20,7 +19,7 @@ public class PDate<D extends Comparable> extends EDate<D> implements Path<D>{
 
     private final Path<D> pathMixin;
     
-    public PDate(Class<? extends D> type, Path<?> parent, @NotEmpty String property) {
+    public PDate(Class<? extends D> type, Path<?> parent, String property) {
         this(type, PathMetadata.forProperty(parent, property));
     }
 
@@ -29,7 +28,7 @@ public PDate(Class<? extends D> type, PathMetadata<?> metadata) {
         this.pathMixin = new PathMixin<D>(this, metadata);
     }
 
-    public PDate(Class<? extends D> type, @NotEmpty String var) {
+    public PDate(Class<? extends D> type, String var) {
         this(type, PathMetadata.forVariable(var));
     }
     

File: querydsl-core/src/main/java/com/mysema/query/types/path/PDateTime.java
Patch:
@@ -8,7 +8,6 @@
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EDateTime;
-import com.mysema.query.util.NotEmpty;
 
 /**
  * @author tiwe
@@ -20,7 +19,7 @@ public class PDateTime<D extends Comparable> extends EDateTime<D> implements Pat
 
     private final Path<D> pathMixin;
     
-    public PDateTime(Class<? extends D> type, Path<?> parent, @NotEmpty String property) {
+    public PDateTime(Class<? extends D> type, Path<?> parent, String property) {
         this(type, PathMetadata.forProperty(parent, property));
     }
 
@@ -29,7 +28,7 @@ public PDateTime(Class<? extends D> type, PathMetadata<?> metadata) {
         this.pathMixin = new PathMixin<D>(this, metadata);
     }
 
-    public PDateTime(Class<? extends D> type, @NotEmpty String var) {
+    public PDateTime(Class<? extends D> type, String var) {
         this(type, PathMetadata.forVariable(var));
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PList.java
Patch:
@@ -19,7 +19,6 @@
 import com.mysema.query.types.expr.ECollectionBase;
 import com.mysema.query.types.expr.EList;
 import com.mysema.query.types.expr.Expr;
-import com.mysema.query.util.NotEmpty;
 
 /**
  * PList represents list paths
@@ -53,7 +52,7 @@ public class PList<E, Q extends Expr<E>> extends ECollectionBase<List<E>,E> impl
     private Constructor<Q> queryTypeConstructor;    
     
     @SuppressWarnings("unchecked")
-    public PList(Class<? super E> elementType, @NotEmpty String entityName, Class<Q> queryType, PathMetadata<?> metadata) {
+    public PList(Class<? super E> elementType, String entityName, Class<Q> queryType, PathMetadata<?> metadata) {
         super((Class)List.class);
         this.elementType = (Class<E>) Assert.notNull(elementType,"type is null");
         this.entityName = Assert.notNull(entityName,"entityName is null");

File: querydsl-core/src/main/java/com/mysema/query/types/path/PNumber.java
Patch:
@@ -8,7 +8,6 @@
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.ENumber;
-import com.mysema.query.util.NotEmpty;
 
 /**
  * PNumber represents numeric paths
@@ -22,7 +21,7 @@ public class PNumber<D extends Number & Comparable<?>> extends ENumber<D> implem
     
     private final Path<D> pathMixin;
 
-    public PNumber(Class<? extends D> type, Path<?> parent, @NotEmpty String property) {
+    public PNumber(Class<? extends D> type, Path<?> parent, String property) {
         this(type, PathMetadata.forProperty(parent, property));
     }
 
@@ -31,7 +30,7 @@ public PNumber(Class<? extends D> type, PathMetadata<?> metadata) {
         this.pathMixin = new PathMixin<D>(this, metadata);
     }
     
-    public PNumber(Class<? extends D> type, @NotEmpty String var) {
+    public PNumber(Class<? extends D> type, String var) {
         this(type, PathMetadata.forVariable(var));
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PSet.java
Patch:
@@ -12,7 +12,6 @@
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.ECollectionBase;
 import com.mysema.query.types.expr.Expr;
-import com.mysema.query.util.NotEmpty;
 
 /**
  * PSet represents set paths
@@ -31,7 +30,7 @@ public class PSet<E> extends ECollectionBase<Set<E>,E> implements Path<Set<E>> {
     private final Path<Set<E>> pathMixin;
     
     @SuppressWarnings("unchecked")
-    public PSet(Class<? super E> type, @NotEmpty String entityName, PathMetadata<?> metadata) {
+    public PSet(Class<? super E> type, String entityName, PathMetadata<?> metadata) {
         super((Class)Set.class);
         this.elementType = (Class<E>) Assert.notNull(type,"type is null");        
         this.entityName = Assert.notNull(entityName,"entityName is null");

File: querydsl-core/src/main/java/com/mysema/query/types/path/PSimple.java
Patch:
@@ -8,7 +8,6 @@
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.Expr;
-import com.mysema.query.util.NotEmpty;
 
 /**
  * PSimple represents simple paths
@@ -22,7 +21,7 @@ public class PSimple<D> extends Expr<D> implements Path<D> {
     
     private final Path<D> pathMixin;
     
-    public PSimple(Class<? extends D> type, @NotEmpty Path<?> parent, String property) {
+    public PSimple(Class<? extends D> type, Path<?> parent, String property) {
         this(type, PathMetadata.forProperty(parent, property));
     }
 
@@ -31,7 +30,7 @@ public PSimple(Class<? extends D> type, PathMetadata<?> metadata) {
         this.pathMixin = new PathMixin<D>(this, metadata);
     }
     
-    public PSimple(Class<? extends D> type, @NotEmpty String var) {
+    public PSimple(Class<? extends D> type, String var) {
         this(type, PathMetadata.forVariable(var));
     }
     

File: querydsl-core/src/main/java/com/mysema/query/types/path/PString.java
Patch:
@@ -8,7 +8,6 @@
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EString;
-import com.mysema.query.util.NotEmpty;
 
 /**
  * PString represents String typed paths
@@ -21,15 +20,15 @@ public class PString extends EString implements Path<String> {
 
     private final Path<String> pathMixin;
     
-    public PString(Path<?> parent, @NotEmpty String property) {
+    public PString(Path<?> parent, String property) {
         this(PathMetadata.forProperty(parent, property));
     }
 
     public PString(PathMetadata<?> metadata) {
         this.pathMixin = new PathMixin<String>(this, metadata);
     }
     
-    public PString(@NotEmpty String var) {
+    public PString(String var) {
         this(PathMetadata.forVariable(var));
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PTime.java
Patch:
@@ -8,7 +8,6 @@
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.ETime;
-import com.mysema.query.util.NotEmpty;
 
 /**
  * @author tiwe
@@ -20,7 +19,7 @@ public class PTime<D extends Comparable> extends ETime<D> implements Path<D>{
 
     private final Path<D> pathMixin;
     
-    public PTime(Class<? extends D> type, Path<?> parent, @NotEmpty String property) {
+    public PTime(Class<? extends D> type, Path<?> parent, String property) {
         this(type, PathMetadata.forProperty(parent, property));
     }
 
@@ -29,7 +28,7 @@ public PTime(Class<? extends D> type, PathMetadata<?> metadata) {
         this.pathMixin = new PathMixin<D>(this, metadata);
     }
     
-    public PTime(Class<? extends D> type, @NotEmpty String var) {
+    public PTime(Class<? extends D> type, String var) {
         this(type, PathMetadata.forVariable(var));
     }    
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathMetadata.java
Patch:
@@ -20,7 +20,6 @@
 import com.mysema.query.types.expr.EStringConst;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.expr.ExprConst;
-import com.mysema.query.util.NotEmpty;
 
 /**
  * PathMetadata provides metadata for Path expressions.
@@ -57,11 +56,11 @@ public static <KT> PathMetadata<KT> forMapAccess(PMap<?, ?, ?> parent, KT key) {
         return new PathMetadata<KT>(parent, ExprConst.create(key), PathType.MAPVALUE_CONSTANT);
     }
 
-    public static PathMetadata<String> forProperty(Path<?> parent, @NotEmpty String property) {
+    public static PathMetadata<String> forProperty(Path<?> parent, String property) {
         return new PathMetadata<String>(parent, EStringConst.create(Assert.hasLength(property), true), PathType.PROPERTY);
     }
 
-    public static PathMetadata<String> forVariable(@NotEmpty String variable) {
+    public static PathMetadata<String> forVariable(String variable) {
         return new PathMetadata<String>(null, EStringConst.create(Assert.hasLength(variable), true), PathType.VARIABLE);
     }
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/oracle/OracleGrammar.java
Patch:
@@ -13,7 +13,6 @@
 import com.mysema.query.types.path.PComparable;
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PathMetadata;
-import com.mysema.query.util.NotEmpty;
 
 /**
  * OracleGrammar provides Oracle specific extensions to the SqlGrammar

File: querydsl-sql/src/test/java/com/mysema/query/sql/domain/QEMPLOYEE.java
Patch:
@@ -13,7 +13,6 @@
 import com.mysema.query.types.path.PString;
 import com.mysema.query.types.path.PTime;
 import com.mysema.query.types.path.PathMetadata;
-import com.mysema.query.util.NotEmpty;
 
 @SuppressWarnings("all")
 public class QEMPLOYEE extends PEntity<java.lang.Object> {
@@ -32,7 +31,7 @@ public class QEMPLOYEE extends PEntity<java.lang.Object> {
     
     public final PNumber<java.lang.Integer> superiorId = createNumber("superior_id", java.lang.Integer.class);
 
-    public QEMPLOYEE(@NotEmpty java.lang.String path) {
+    public QEMPLOYEE(java.lang.String path) {
         super(java.lang.Object.class, "employee2", PathMetadata.forVariable(path));
     }
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/domain/QSURVEY.java
Patch:
@@ -9,7 +9,6 @@
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
 import com.mysema.query.types.path.PathMetadata;
-import com.mysema.query.util.NotEmpty;
 
 @SuppressWarnings("all")
 public class QSURVEY extends PEntity<java.lang.Object> {
@@ -18,7 +17,7 @@ public class QSURVEY extends PEntity<java.lang.Object> {
     
     public final PNumber<java.lang.Integer> id = createNumber("id", java.lang.Integer.class);
 
-    public QSURVEY(@NotEmpty java.lang.String path) {
+    public QSURVEY(java.lang.String path) {
         super(java.lang.Object.class, "survey", PathMetadata.forVariable(path));
     }
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/domain/QTEST.java
Patch:
@@ -8,14 +8,13 @@
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PString;
 import com.mysema.query.types.path.PathMetadata;
-import com.mysema.query.util.NotEmpty;
 
 @SuppressWarnings("all")
 public class QTEST extends PEntity<java.lang.Object> {
     
     public final PString name = createString("name");
 
-    public QTEST(@NotEmpty java.lang.String path) {
+    public QTEST(java.lang.String path) {
         super(java.lang.Object.class, "test", PathMetadata.forVariable(path));
     }
 

File: querydsl-apt/src/main/java/com/mysema/query/apt/Processor.java
Patch:
@@ -226,7 +226,7 @@ private void serialize(Serializer serializer, Map<String, EntityModel> types) {
             msg.printMessage(Kind.NOTE, type.getFullName() + " is processed");
             try {
                 String packageName = type.getPackageName();         
-                String localName = serializer.getQueryType(type, type, true);
+                String localName = serializer.getPathType(type, type, true);
                 String className = packageName + "." + localName;
                 JavaFileObject fileObject = env.getFiler().createSourceFile(className);
                 Writer writer = fileObject.openWriter();

File: querydsl-core/src/main/java/com/mysema/query/codegen/Serializer.java
Patch:
@@ -34,6 +34,6 @@ public interface Serializer {
      * @param raw
      * @return
      */
-    public String getQueryType(TypeModel type, EntityModel model, boolean raw);
+    public String getPathType(TypeModel type, EntityModel model, boolean raw);
 
 }
\ No newline at end of file

File: querydsl-apt/src/main/java/com/mysema/query/apt/APTTypeModelFactory.java
Patch:
@@ -223,14 +223,14 @@ public TypeModel visitDeclared(DeclaredType t, Elements p) {
         if (t.asElement() != null && t.asElement() instanceof TypeElement){
             TypeElement typeElement = (TypeElement)t.asElement();
             switch(typeElement.getKind()){
+            case ENUM:
             case CLASS: return createClassType(t, typeElement, p);
             case INTERFACE: return createInterfaceType(t, typeElement, p);
-            case ENUM: return create(typeElement, TypeCategory.SIMPLE, p, t.getTypeArguments());
+            default: throw new IllegalArgumentException("Illegal type " + typeElement);
             }            
         }else{
             throw new IllegalArgumentException("Unsupported element type " + t.asElement());
         }
-        return null;
     }
 
     private TypeModel createInterfaceType(DeclaredType t, TypeElement typeElement, Elements p) {

File: querydsl-apt/src/main/java/com/mysema/query/apt/EntityElementVisitor.java
Patch:
@@ -185,8 +185,7 @@ private void visitFields(Elements elementUtils, EntityModel entityModel,
                 
             }else if (configuration.isBlockedField(field)){
                 blockedProperties.add(name);
-            }
-            
+            }           
             
         }
     }

File: querydsl-apt/src/test/java/com/mysema/query/domain/RelationTest.java
Patch:
@@ -13,10 +13,10 @@
 import com.mysema.query.annotations.QueryEntity;
 import com.mysema.query.domain.rel.RelationType2;
 import com.mysema.query.types.path.PCollection;
+import com.mysema.query.types.path.PComparable;
 import com.mysema.query.types.path.PList;
 import com.mysema.query.types.path.PMap;
 import com.mysema.query.types.path.PSet;
-import com.mysema.query.types.path.PSimple;
 
 public class RelationTest extends AbstractTest{
     
@@ -101,7 +101,7 @@ public class RelationType {
     @Test
     public void test() throws SecurityException, NoSuchFieldException{
         cl = QRelationType.class;
-        match(PSimple.class, "enumProperty");
+        match(PComparable.class, "enumProperty");
         match(PList.class, "enumList");
         match(PMap.class, "enumMap1");
         match(PMap.class, "enumMap");

File: querydsl-core/src/main/java/com/mysema/query/alias/PropertyAccessInvocationHandler.java
Patch:
@@ -125,7 +125,7 @@ public Object intercept(Object proxy, Method method, Object[] args, MethodProxy
                 rv = propToObj.get(propKey);
             } else {
                 PathMetadata<Integer> pm = PathMetadata.forListAccess((PList<?, ?>) path, (Integer) args[0]);
-                Class<?> elementType = ((ECollection<?>) path).getElementType();
+                Class<?> elementType = ((ECollection<?,?>) path).getElementType();
                 if (elementType != null) {
                     rv = newInstance(elementType, elementType, proxy, propKey, pm);
                 } else {
@@ -272,7 +272,7 @@ private <T> T newInstance(Class<T> type, Type genericType, Object parent, Object
 
         } else if (List.class.isAssignableFrom(type)) {
             final Class<Object> elementType = (Class)getTypeParameter(genericType, 0);
-            path = new PList<Object,PEntity<Object>>(elementType, null, pm){
+            path = new PList<Object,PEntity<Object>>(elementType, elementType.getSimpleName(), null, pm){
                 @Override
                 public PEntity get(Expr<Integer> index) {
                     return new PEntity(elementType, elementType.getSimpleName(), 

File: querydsl-core/src/main/java/com/mysema/query/alias/SimplePathFactory.java
Patch:
@@ -71,7 +71,7 @@ public PCollection<?> transform(Collection<?> arg) {
                 @SuppressWarnings({ "unchecked", "serial" })
                 public PList<?,?> transform(List<?> arg) {
                     final Class<?> cl = arg.isEmpty() ?  Object.class : arg.get(0).getClass();
-                    return new PList<Object,PEntity<Object>>(Object.class, null, md()){                        
+                    return new PList<Object,PEntity<Object>>(Object.class, Object.class.getSimpleName(), null, md()){                        
                         @Override
                         public PEntity get(Expr<Integer> index) {
                             return new PEntity(cl, cl.getSimpleName(), PathMetadata.forListAccess(this, index));

File: querydsl-core/src/main/java/com/mysema/query/codegen/EntitySerializer.java
Patch:
@@ -453,6 +453,7 @@ private void serializeProperties(EntityModel model, Writer writer) throws IOExce
                 String valueType = property.getParameter(1).getLocalRawName(model);
                 queryType = getQueryType(property.getParameter(1), model, true);
                 
+                // this.<"+genericKey+","+genericValue+","+genericQueryType+"
                 serialize(property, "PMap<"+genericKey+","+genericValue+","+genericQueryType+">",
                         writer, "this.<"+genericKey+","+genericValue+","+genericQueryType+">createMap", 
                         keyType+".class", 

File: querydsl-core/src/main/java/com/mysema/query/support/QueryBaseWithProjection.java
Patch:
@@ -101,7 +101,6 @@ public final <K, V> Map<K, V> map(Expr<K> key, Expr<V> value) {
     @Override
     public Object[] uniqueResult(Expr<?> first, Expr<?> second, Expr<?>... rest) {
         getMetadata().setUnique(true);
-        limit(1l);
         Iterator<Object[]> it = iterate(first, second, rest);
         return it.hasNext() ? it.next() : null;
     }

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ECollection.java
Patch:
@@ -5,6 +5,8 @@
  */
 package com.mysema.query.types.expr;
 
+import java.util.Collection;
+
 
 /**
  * ECollection represents java.util.Collection typed expressions
@@ -14,7 +16,7 @@
  * @param <E>
  * @see java.util.Collection
  */
-public interface ECollection<E>{
+public interface ECollection<C extends Collection<E>, E>{
    
     /**
      * Get an expression for <code>this.contains(child)</code>

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EList.java
Patch:
@@ -5,6 +5,8 @@
  */
 package com.mysema.query.types.expr;
 
+import java.util.List;
+
 import javax.annotation.Nonnegative;
 
 
@@ -16,7 +18,7 @@
  * @param <E> component type
  * @see java.util.List
  */
-public interface EList<E> extends ECollection<E> {
+public interface EList<E> extends ECollection<List<E>,E> {
     
     /**
      * Indexed access

File: querydsl-core/src/main/java/com/mysema/query/types/expr/Expr.java
Patch:
@@ -140,7 +140,7 @@ public final EBoolean in(D... right) {
      * @param right rhs of the comparison
      * @return
      */
-    public final EBoolean in(ECollection<? extends D> right) {
+    public final EBoolean in(ECollection<?,? extends D> right) {
         return OBoolean.create(Ops.IN, this, (Expr<?>)right);
     }
 
@@ -202,7 +202,7 @@ public final EBoolean notIn(D... right) {
      * @param right rhs of the comparison
      * @return
      */
-    public final EBoolean notIn(ECollection<? extends D> right) {
+    public final EBoolean notIn(ECollection<?,? extends D> right) {
         return in(right).not();
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PEntity.java
Patch:
@@ -137,7 +137,7 @@ protected <A> PCollection<A> createCollection(@NotEmpty String property, Class<?
      */
     @SuppressWarnings("unchecked")
     protected <A, E extends Expr<A>> PList<A, E> createList(@NotEmpty String property, Class<? super A> type, Class<? super E> queryType) {
-        return new PList<A, E>(type, (Class)queryType, PathMetadata.forProperty(this, property));
+        return new PList<A, E>(type, type.getSimpleName(), (Class)queryType, PathMetadata.forProperty(this, property));
     }
 
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/path/PMap.java
Patch:
@@ -19,7 +19,7 @@
 import com.mysema.query.types.operation.Ops;
 
 /**
- * PEntityMap represents entity map paths
+ * PMap represents map paths
  * 
  * @author tiwe
  * 

File: querydsl-core/src/main/java/com/mysema/query/types/query/ListSubQuery.java
Patch:
@@ -23,7 +23,7 @@
  * @param <A>
  */
 @SuppressWarnings("serial")
-public class ListSubQuery<A> extends ECollectionBase<A> implements SubQuery{
+public class ListSubQuery<A> extends ECollectionBase<List<A>,A> implements SubQuery{
 
     private final Class<A> elementType;
     

File: querydsl-core/src/test/java/com/mysema/query/Filters.java
Patch:
@@ -52,7 +52,7 @@ Collection<EBoolean> booleanFilters(EBoolean expr, EBoolean other){
         return rv;
     }
 
-    <A> Collection<EBoolean> collection(ECollection<A> expr, ECollection<A> other, A knownElement){
+    <A> Collection<EBoolean> collection(ECollection<?,A> expr, ECollection<?,A> other, A knownElement){
         HashSet<EBoolean> rv = new HashSet<EBoolean>();
         rv.add(expr.contains(knownElement));
         rv.add(expr.isEmpty());

File: querydsl-core/src/test/java/com/mysema/query/MatchingFilters.java
Patch:
@@ -40,7 +40,7 @@ public MatchingFilters(Module module, Target target) {
         this.target = target;
     }
 
-    <A> Collection<EBoolean> collection(ECollection<A> expr,  ECollection<A> other, A knownElement, A missingElement){
+    <A> Collection<EBoolean> collection(ECollection<?,A> expr,  ECollection<?,A> other, A knownElement, A missingElement){
         HashSet<EBoolean> rv = new HashSet<EBoolean>();
         rv.add(expr.contains(knownElement));
         rv.add(expr.contains(missingElement).not());          

File: querydsl-core/src/test/java/com/mysema/query/Projections.java
Patch:
@@ -41,7 +41,7 @@ public Projections(Module module, Target target) {
         this.target = target;
     }
 
-    <A> Collection<Expr<?>> collection(ECollection<A> expr, ECollection<A> other, A knownElement){
+    <A> Collection<Expr<?>> collection(ECollection<?,A> expr, ECollection<?,A> other, A knownElement){
         HashSet<Expr<?>> rv = new HashSet<Expr<?>>();
         rv.add(expr.size());
         return rv;

File: querydsl-core/src/test/java/com/mysema/query/StandardTest.java
Patch:
@@ -145,7 +145,7 @@ public void booleanTests(EBoolean expr, EBoolean other){
         execute(filters.booleanFilters(expr, other), false);
     }
 
-    public <A> void collectionTests(ECollection<A> expr, ECollection<A> other, A knownElement, A missingElement){
+    public <A> void collectionTests(ECollection<?,A> expr, ECollection<?,A> other, A knownElement, A missingElement){
         execute(matchers.collection(expr, other, knownElement, missingElement), true);
         execute(filters.collection(expr, other, knownElement), false);
         execute(projections.collection(expr, other, knownElement));

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/AbstractHibernateQuery.java
Patch:
@@ -179,7 +179,7 @@ public <RT> RT uniqueResult(Expr<RT> expr) {
         addToProjection(expr);
         String queryString = toQueryString();
         logQuery(queryString);
-        Query query = createQuery(queryString, QueryModifiers.limit(1));
+        Query query = createQuery(queryString, null);
         return (RT) query.uniqueResult();
     }
     

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/JDOQLMethodsTest.java
Patch:
@@ -44,7 +44,7 @@ public void test(){
 
     private <A,K,V> List<EBoolean> getFilters(
             EString str, EString other, String knownString,
-            ECollection<A> list, A element,
+            ECollection<?,A> list, A element,
             EMap<K,V> map, K key, V value,
             ENumber<Integer> number){
         return Arrays.<EBoolean>asList(

File: querydsl-apt/src/test/java/com/mysema/query/domain/InterfaceTypeTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.Test;
 
 import com.mysema.query.annotations.QueryEntity;
-import com.mysema.query.types.path.PEntityList;
+import com.mysema.query.types.path.PList;
 import com.mysema.query.types.path.PNumber;
 
 
@@ -61,13 +61,13 @@ public void QInterfaceType_reation() throws SecurityException, NoSuchFieldExcept
     @Test
     public void QInterfaceType_reation2() throws SecurityException, NoSuchFieldException{
         cl = QInterfaceType.class;
-        match(PEntityList.class, "relation2");
+        match(PList.class, "relation2");
     }
     
     @Test
     public void QInterfaceType_reation3() throws SecurityException, NoSuchFieldException{
         cl = QInterfaceType.class;
-        match(PEntityList.class, "relation3");
+        match(PList.class, "relation3");
     }
     
     @Test

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EStringConst.java
Patch:
@@ -14,9 +14,6 @@
 import com.mysema.commons.lang.Assert;
 import com.mysema.query.types.Visitor;
 
-
-
-
 /**
  * EStringConst represents String constants
  * 

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLSerializer.java
Patch:
@@ -21,8 +21,8 @@
 import com.mysema.query.types.operation.Operation;
 import com.mysema.query.types.operation.Operator;
 import com.mysema.query.types.operation.Ops;
-import com.mysema.query.types.path.PCollection;
 import com.mysema.query.types.path.PEntity;
+import com.mysema.query.types.path.PCollection;
 import com.mysema.query.types.path.Path;
 import com.mysema.query.types.path.PathType;
 import com.mysema.query.types.query.SubQuery;

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/JDOQLSubQuery.java
Patch:
@@ -11,8 +11,8 @@
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.OSimple;
 import com.mysema.query.types.operation.Ops;
+import com.mysema.query.types.path.PCollection;
 import com.mysema.query.types.path.PEntity;
-import com.mysema.query.types.path.PEntityCollection;
 
 /**
  * @author tiwe
@@ -35,7 +35,7 @@ public JDOQLSubQuery from(PEntity<?>... o) {
         return _this;
     }
 
-    public <P> JDOQLSubQuery from(PEntityCollection<P> target, PEntity<P> alias){
+    public <P> JDOQLSubQuery from(PCollection<P> target, PEntity<P> alias){
         getMetadata().addFrom(OSimple.create(alias.getType(), Ops.ALIAS, target, alias));
         return _this;
     }

File: querydsl-apt/src/main/java/com/mysema/query/apt/QuerydslAnnotationProcessor.java
Patch:
@@ -38,7 +38,6 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
         entity = QueryEntity.class;
         superType = QuerySupertype.class;
         embeddable = QueryEmbeddable.class;
-//        dto = QueryProjection.class;
         skip = QueryTransient.class;
         
         SimpleConfiguration configuration = new SimpleConfiguration(entity, superType, embeddable, skip);

File: querydsl-apt/src/test/java/com/mysema/query/domain/ExprTest.java
Patch:
@@ -47,9 +47,9 @@ public void test() throws Throwable {
         exprs.add(QReservedNames.reservedNames);
         exprs.add(QSimpleTypes.simpleTypes);
         
-        exprs.add(EString.create("Hello World!"));
-        exprs.add(ENumber.create(1000));
-        exprs.add(ENumber.create(10l));
+        exprs.add(EString.__create("Hello World!"));
+        exprs.add(ENumber.__create(1000));
+        exprs.add(ENumber.__create(10l));
         exprs.add(EBoolean.TRUE);
         exprs.add(EBoolean.FALSE);
         

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColQueryTemplates.java
Patch:
@@ -61,8 +61,7 @@ public ColQueryTemplates() {
         add(PathType.ARRAYVALUE, "{0}[{1}]");
         add(PathType.ARRAYVALUE_CONSTANT, "{0}[{1s}]");
         
-        // TEMPORARY FIXES
-        
+        // TEMPORARY FIXES        
         add(Ops.DIV, "(double)({0}/{1})");
     }
     

File: querydsl-collections/src/test/java/com/mysema/query/collections/impl/MathFunctionTest.java
Patch:
@@ -26,8 +26,8 @@ public class MathFunctionTest extends AbstractQueryTest {
     @Test
     public void test() {
         Cat c = alias(Cat.class, "c");
-        Expr<Integer> i = ENumber.create(1);
-        Expr<Double> d = ENumber.create(1.0);
+        Expr<Integer> i = ENumber.__create(1);
+        Expr<Double> d = ENumber.__create(1.0);
         from(c, cats).list( 
                 MathFunctions.acos(d),
                 MathFunctions.asin(d), 

File: querydsl-core/src/main/java/com/mysema/query/types/CaseBuilder.java
Patch:
@@ -42,7 +42,7 @@ Cases<A> addCase(EBoolean condition, Expr<A> expr) {
         }
 
         public Expr<A> otherwise(A constant) {
-            return otherwise(Expr.create(constant));
+            return otherwise(Expr.__create(constant));
         }
         
         public Expr<A> otherwise(Expr<A> expr) {
@@ -80,7 +80,7 @@ public CaseWhen(Cases<A> cases, EBoolean b) {
         }
 
         public Cases<A> then(A constant) {
-            return then(Expr.create(constant));
+            return then(Expr.__create(constant));
         }
 
         public Cases<A> then(Expr<A> expr) {
@@ -97,7 +97,7 @@ public Initial(EBoolean b) {
         }
 
         public <A> Cases<A> then(A constant) {
-            return then(Expr.create(constant));
+            return then(Expr.__create(constant));
         }
 
         @SuppressWarnings("unchecked")

File: querydsl-core/src/main/java/com/mysema/query/types/TemplateFactory.java
Patch:
@@ -70,7 +70,7 @@ private EString escapeForLike(EString expr){
             String str = ((Constant<String>) expr).getConstant();
             if (str.contains("%") || str.contains("_")){
                 str = str.replace("%", "\\%").replace("_", "\\_");
-                return EString.create(str);
+                return EString.__create(str);
             }                
         }        
         return expr;

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EBoolean.java
Patch:
@@ -23,7 +23,7 @@ public abstract class EBoolean extends EComparable<Boolean> {
     
     public static final EBoolean TRUE = new EBooleanConst(Boolean.TRUE);
     
-    public static final EBoolean create(Boolean b){
+    public static final EBoolean __create(Boolean b){
         return b.booleanValue() ? TRUE : FALSE;
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ECollectionBase.java
Patch:
@@ -32,7 +32,7 @@ public ECollectionBase(Class<? extends Collection<D>> type) {
     
     @Override
     public final EBoolean contains(D child) {
-        return contains(ExprConst.create(child));        
+        return contains(ExprConst.__create(child));        
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EComparableBase.java
Patch:
@@ -52,7 +52,7 @@ public final OrderSpecifier<D> asc() {
      * @return
      */
     public <A extends Number & Comparable<? super A>> ENumber<A> castToNum(Class<A> type) {
-        return ONumber.create(type, Ops.NUMCAST, this, ExprConst.create(type));
+        return ONumber.create(type, Ops.NUMCAST, this, ExprConst.__create(type));
     }
 
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDate.java
Patch:
@@ -23,7 +23,7 @@ public abstract class EDate<D extends Comparable> extends EDateOrTime<D> {
     
     private static final EDate<Date> currentDate = currentDate(Date.class);
     
-    public static EDate<java.sql.Date> create(java.sql.Date date){
+    public static EDate<java.sql.Date> __create(java.sql.Date date){
         return new EDateConst(date);
     }
     

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDateTime.java
Patch:
@@ -25,7 +25,7 @@ public abstract class EDateTime<D extends Comparable> extends EDateOrTime<D> {
     
     private static final EDateTime<Date> currentTimestamp = currentTimestamp(Date.class);
     
-    public static EDateTime<java.util.Date> create(java.util.Date date){
+    public static EDateTime<java.util.Date> __create(java.util.Date date){
         return new EDateTimeConst(date);
     }
     

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EMapBase.java
Patch:
@@ -42,7 +42,7 @@ public final EBoolean containsKey(Expr<K> key) {
 
     @Override
     public final EBoolean containsKey(K key) {
-        return OBoolean.create(Ops.CONTAINS_KEY, this, ExprConst.create(key));
+        return OBoolean.create(Ops.CONTAINS_KEY, this, ExprConst.__create(key));
     }
 
     @Override
@@ -52,7 +52,7 @@ public final EBoolean containsValue(Expr<V> value) {
 
     @Override
     public final EBoolean containsValue(V value) {
-        return OBoolean.create(Ops.CONTAINS_VALUE, this, ExprConst.create(value));
+        return OBoolean.create(Ops.CONTAINS_VALUE, this, ExprConst.__create(value));
     }
         
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ETime.java
Patch:
@@ -25,7 +25,7 @@ public abstract class ETime<D extends Comparable> extends EDateOrTime<D> {
     
     private volatile ENumber<Integer> hours, minutes, seconds, milliseconds;
     
-    public static ETime<java.sql.Time> create(java.sql.Time time){
+    public static ETime<java.sql.Time> __create(java.sql.Time time){
         return new ETimeConst(time);
     }
     

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ExprConst.java
Patch:
@@ -49,12 +49,12 @@ public D getConstant() {
 
     @Override
     public EBoolean eq(D s){
-        return EBoolean.create(constant.equals(s));
+        return EBoolean.__create(constant.equals(s));
     }
     
     @Override
     public EBoolean ne(D s){
-        return EBoolean.create(!constant.equals(s));
+        return EBoolean.__create(!constant.equals(s));
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/PEntity.java
Patch:
@@ -171,7 +171,7 @@ public int hashCode() {
      * @return
      */
     public <B extends D> EBoolean instanceOf(Class<B> type) {
-        return OBoolean.create(Ops.INSTANCE_OF, this, ExprConst.create(type));
+        return OBoolean.create(Ops.INSTANCE_OF, this, ExprConst.__create(type));
     }
     
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/PEntityCollection.java
Patch:
@@ -60,7 +60,7 @@ public PEntityCollection(Class<? super D> type, @NotEmpty String entityName, Pat
 
     @Override
     public EBoolean contains(D child) {
-        return OBoolean.create(Ops.IN, ExprConst.create(child), this);
+        return OBoolean.create(Ops.IN, ExprConst.__create(child), this);
     }
 
     @Override

File: querydsl-core/src/test/java/com/mysema/query/Projections.java
Patch:
@@ -83,7 +83,7 @@ <K,V> Collection<Expr<?>> map(EMap<K,V> expr, EMap<K,V> other, K knownKey, V kno
     <A extends Number & Comparable<A>> Collection<ENumber<?>> numeric(ENumber<A> expr, ENumber<A> other, A knownValue){
         HashSet<ENumber<?>> rv = new HashSet<ENumber<?>>();
         rv.addAll(numeric(expr, other));
-        rv.addAll(numeric(expr, ENumber.create(knownValue)));
+        rv.addAll(numeric(expr, ENumber.__create(knownValue)));
         return rv;
     }
     
@@ -99,7 +99,7 @@ private <A extends Number & Comparable<A>> Collection<ENumber<?>> numeric(ENumbe
         
         if (!(other instanceof Constant || module == Module.JDOQL)){
             CaseBuilder cases = new CaseBuilder();
-            rv.add(ENumber.create(1).add(cases
+            rv.add(ENumber.__create(1).add(cases
                 .when(expr.gt(10)).then(expr)
                 .when(expr.between(0, 10)).then((ENumber)other)
                 .otherwise((ENumber)other)));    
@@ -127,7 +127,7 @@ <A extends Number & Comparable<A>> Collection<ENumber<?>> numericCasts(ENumber<A
     Collection<Expr<String>> string(EString expr, EString other, String knownValue){
         HashSet<Expr<String>> rv = new HashSet<Expr<String>>();
         rv.addAll(stringProjections(expr, other));
-        rv.addAll(stringProjections(expr, EString.create(knownValue)));
+        rv.addAll(stringProjections(expr, EString.__create(knownValue)));
         return rv;
     }
     

File: querydsl-core/src/test/java/com/mysema/query/types/expr/EDateConstTest.java
Patch:
@@ -23,7 +23,7 @@ public void test(){
         cal.set(Calendar.YEAR,  2000);    
         System.out.println(cal.getTime());
         
-        EDate<Date> date = EDate.create(new Date(cal.getTimeInMillis()));
+        EDate<Date> date = EDate.__create(new Date(cal.getTimeInMillis()));
         assertEquals("1",   date.getDayOfMonth().toString());
         assertEquals("1",   date.getMonth().toString());
         assertEquals("2000",date.getYear().toString());        

File: querydsl-core/src/test/java/com/mysema/query/types/expr/EDateTimeConstTest.java
Patch:
@@ -26,7 +26,7 @@ public void test(){
         cal.set(Calendar.MILLISECOND,  3);
         System.out.println(cal.getTime());
         
-        EDateTime<Date> date = EDateTime.create(cal.getTime());
+        EDateTime<Date> date = EDateTime.__create(cal.getTime());
         assertEquals("1",    date.getDayOfMonth().toString());
         assertEquals("1",    date.getMonth().toString());
         assertEquals("2000", date.getYear().toString());        

File: querydsl-core/src/test/java/com/mysema/query/types/expr/EStringConstTest.java
Patch:
@@ -31,6 +31,6 @@ public void test2(){
     }
     
     private EString expr(String str){
-        return EString.create(str);
+        return EString.__create(str);
     }
 }

File: querydsl-core/src/test/java/com/mysema/query/types/expr/ETimeConstTest.java
Patch:
@@ -23,7 +23,7 @@ public void test(){
         cal.set(Calendar.MILLISECOND,  3);
         System.out.println(cal.getTime());
         
-        ETime<Time> time = ETime.create(new Time(cal.getTimeInMillis()));
+        ETime<Time> time = ETime.__create(new Time(cal.getTimeInMillis()));
         assertEquals("13",   time.getHour().toString());
         assertEquals("30",   time.getMinute().toString());
         assertEquals("12",   time.getSecond().toString());

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLTemplates.java
Patch:
@@ -61,8 +61,8 @@ public HQLTemplates() {
         add(Ops.CONCAT, "{0} || {1}", 37);
         add(Ops.MATCHES, "{0} like {1}", 27); // TODO : support real regexes 
         add(Ops.LOWER, "lower({0})");
-        add(Ops.SUBSTR_1ARG, "substring({0},{1})");
-        add(Ops.SUBSTR_2ARGS, "substring({0},{1},{2})");
+        add(Ops.SUBSTR_1ARG, "substring({0},{1}+1)");
+        add(Ops.SUBSTR_2ARGS, "substring({0},{1}+1,{2})");
         add(Ops.TRIM, "trim({0})");
         add(Ops.UPPER, "upper({0})");
         add(Ops.EQ_IGNORE_CASE, "{0l} = {1l}");

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/JDOQLTemplates.java
Patch:
@@ -23,6 +23,8 @@ public JDOQLTemplates() {
         add(Ops.STRING_IS_EMPTY, "{0} == \"\"", 25);
         add(Ops.LIKE, "{0}.like({1})");
         
+        add(Ops.STRING_CAST, "(String){0}");
+        
         // Date
         add(Ops.DateTimeOps.MONTH, "({0}.getMonth() + 1)"); // getMonth() in JDO returns a range from 0-11
         add(Ops.DateTimeOps.DAY_OF_MONTH, "{0}.getDay()");

File: querydsl-sql/src/test/java/com/mysema/query/AbstractSQLTest.java
Patch:
@@ -365,7 +365,7 @@ public void whereExists() throws SQLException {
     @ExcludeIn({DERBY})
     public void mathFunctions() throws SQLException {
 //        Expr<Integer> i = ENumber.create(1);
-        Expr<Double> d = ENumber.create(1.0);
+        Expr<Double> d = ENumber.__create(1.0);
         for (Expr<?> e : Arrays.<Expr<?>> asList(
 //                MathFunctions.abs(i),
                 MathFunctions.acos(d), 

File: querydsl-apt/src/test/java/com/mysema/query/domain/ExprTest.java
Patch:
@@ -17,6 +17,7 @@
 
 public class ExprTest {
     
+    @SuppressWarnings("unchecked")
     @Test
     public void test() throws Throwable {
         List<Expr<?>> exprs = new ArrayList<Expr<?>>();
@@ -28,7 +29,7 @@ public void test() throws Throwable {
         exprs.add(QEntity2.entity2);
         exprs.add(QEntity3.entity3);
         exprs.add(QEntityWithEmbedded.entityWithEmbedded);
-//        exprs.add(QGenericType.genericType);
+        exprs.add(QGenericType.genericType);
         exprs.add(QInterfaceType.interfaceType);
         exprs.add(QInterfaceType2.interfaceType2);
         exprs.add(QInterfaceType3.interfaceType3);
@@ -112,8 +113,7 @@ public void test() throws Throwable {
         for (String failure : failures){
             System.err.println(failure);
         }
-                
-        
+                        
 //        assertTrue("Got "+failures.size()+" failures",failures.isEmpty());
     }
 

File: querydsl-collections/src/test/java/com/mysema/query/collections/impl/ConstructorTest.java
Patch:
@@ -9,7 +9,7 @@ public class ConstructorTest {
     
     @Test
     public void test(){
-        QCat.create(QCat.cat.name, QCat.cat.id).getJavaConstructor();
+        QCat.project(QCat.cat.name, QCat.cat.id).getJavaConstructor();
     }
 
 }

File: querydsl-core/src/main/java/com/mysema/query/Detachable.java
Patch:
@@ -18,6 +18,8 @@
 public interface Detachable {
 
     /**
+     * Return the count of matched rows as a subquery
+     * 
      * @return
      */
     ObjectSubQuery<Long> count();

File: querydsl-core/src/main/java/com/mysema/query/codegen/PropertyModel.java
Patch:
@@ -5,6 +5,8 @@
  */
 package com.mysema.query.codegen;
 
+import java.util.Arrays;
+
 import javax.annotation.Nullable;
 
 import net.jcip.annotations.Immutable;
@@ -171,7 +173,7 @@ public String getTypePackage() {
     }
     
     public int hashCode() {
-        return name.hashCode();
+        return Arrays.asList(name, type).hashCode();
     }
 
     /* (non-Javadoc)

File: querydsl-core/src/main/java/com/mysema/query/codegen/TypeModel.java
Patch:
@@ -41,4 +41,5 @@ public interface TypeModel {
 
     String toString();
 
+    boolean isFinal();
 }
\ No newline at end of file

File: querydsl-core/src/main/java/com/mysema/query/codegen/TypeModelFactory.java
Patch:
@@ -6,6 +6,7 @@
 package com.mysema.query.codegen;
 
 import java.lang.annotation.Annotation;
+import java.lang.reflect.Modifier;
 import java.lang.reflect.Type;
 import java.util.Arrays;
 import java.util.Collection;
@@ -115,6 +116,7 @@ private TypeModel createComposite(TypeCategory entity, TypeCategory simple, Clas
                 containerType.getName(), 
                 containerType.getPackage().getName(), 
                 containerType.getSimpleName(), 
+                Modifier.isFinal(containerType.getModifiers()),
                 parameters);
 
     }

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathInits.java
Patch:
@@ -56,8 +56,10 @@ private void addInit(String initStr){
     public PathInits getInits(String property){
         if (propertyToInits.containsKey(property)){
             return propertyToInits.get(property);    
+        }else if (initAllProps){
+            return DEFAULT;
         }else{
-            return initAllProps ? DEFAULT : null;
+            throw new IllegalArgumentException(property + " is not initialized");
         }
     }
 

File: querydsl-core/src/test/java/com/mysema/query/codegen/ClassModelTest.java
Patch:
@@ -31,8 +31,8 @@ public class ClassModelTest {
      */
     @Test
     public void test() {        
-        BeanModelFactory factory = new BeanModelFactory(new TypeModelFactory(QueryEntity.class));
-        BeanModel type = factory.create(TestType.class, "Q");
+//        BeanModelFactory factory = new BeanModelFactory(new TypeModelFactory(QueryEntity.class));
+//        BeanModel type = factory.create(TestType.class, "Q");
 //        assertEquals(1, type.getEntityMaps().size());
 //        assertEquals(1, type.getSimpleMaps().size());
 //        assertEquals(2, type.getEntityCollections().size());

File: querydsl-core/src/test/java/com/mysema/query/codegen/SerializerTest.java
Patch:
@@ -28,7 +28,7 @@ public class SerializerTest {
      */
     public SerializerTest() {
         TypeModelFactory typeFactory = new TypeModelFactory();
-        TypeModel typeModel = new SimpleTypeModel(TypeCategory.ENTITY, "com.mysema.query.DomainClass", "com.mysema.query", "DomainClass");
+        TypeModel typeModel = new SimpleTypeModel(TypeCategory.ENTITY, "com.mysema.query.DomainClass", "com.mysema.query", "DomainClass", false);
         type = new BeanModel("Q", typeModel, Collections.singleton("com.mysema.query.DomainSuperClass"));
         
         PropertyModel field = new PropertyModel(type, "field", typeFactory.create(String.class), new String[0]);

File: querydsl-sql/src/main/java/com/mysema/query/sql/MetaDataExporter.java
Patch:
@@ -98,7 +98,7 @@ public void export(DatabaseMetaData md) throws SQLException {
 //        ClassModelFactory factory = new ClassModelFactory(new TypeModelFactory());
         while (tables.next()) {
             String tableName = tables.getString(3);
-            TypeModel classTypeModel = new SimpleTypeModel(TypeCategory.ENTITY, "java.lang.Object", "java.lang", tableName);
+            TypeModel classTypeModel = new SimpleTypeModel(TypeCategory.ENTITY, "java.lang.Object", "java.lang", tableName, false);
             BeanModel classModel = new BeanModel(namePrefix, classTypeModel);
             ResultSet columns = md.getColumns(null, schemaPattern, tables.getString(3), null);
             while (columns.next()) {

File: querydsl-apt/src/main/java/com/mysema/query/apt/EntityElementVisitor.java
Patch:
@@ -72,9 +72,7 @@ public BeanModel visitType(TypeElement e, Void p) {
             }
         }
         TypeModel c = typeFactory.create(e.asType(), elementUtils);
-        BeanModel classModel = new BeanModel(configuration.getNamePrefix(), 
-                c.getPackageName(), c.getName(), c.getSimpleName(),
-                superTypes);
+        BeanModel classModel = new BeanModel(configuration.getNamePrefix(), c, superTypes);
         List<? extends Element> elements = e.getEnclosedElements();
     
         // CONSTRUCTORS

File: querydsl-apt/src/test/java/com/mysema/query/domain/SimpleTypesTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.io.Serializable;
 import java.math.BigDecimal;
+import java.util.Calendar;
 import java.util.Date;
 import java.util.Locale;
 
@@ -69,6 +70,7 @@ public int compareTo(CustomComparableLiteral o) {
     @QueryEntity
     public static class SimpleTypes {
         transient int test;
+        Calendar calendar;
         long id;
         BigDecimal bigDecimal;
         Byte bbyte;
@@ -124,6 +126,7 @@ public void testSimpleTypes() throws SecurityException, NoSuchFieldException{
         match(PString.class, "sstring");
         
         match(PDateTime.class, "date");
+        match(PDateTime.class, "calendar");
         match(PDateTime.class, "timestamp");
         
         match(PTime.class, "time");

File: querydsl-apt/src/test/java/com/mysema/query/domain/p4/SSupertype.java
Patch:
@@ -5,6 +5,6 @@
 @QuerySupertype
 public class SSupertype {
 
-    String supertypeField;
+    public String supertypeField;
     
 }

File: querydsl-core/src/main/java/com/mysema/query/types/path/PEntityList.java
Patch:
@@ -18,15 +18,15 @@
 @SuppressWarnings("serial")
 public class PEntityList<D> extends PEntityCollection<D> implements PList<D> {
     
-    public PEntityList(Class<D> elementType, @NotEmpty String entityName, PathMetadata<?> metadata) {
+    public PEntityList(Class<? super D> elementType, @NotEmpty String entityName, PathMetadata<?> metadata) {
         super(elementType, entityName, metadata);
     }
 
-    public PEntityList(Class<D> elementType, @NotEmpty String entityName, @NotEmpty String var) {
+    public PEntityList(Class<? super D> elementType, @NotEmpty String entityName, @NotEmpty String var) {
         super(elementType, entityName, PathMetadata.forVariable(var));
     }
 
-    public PEntityList(Class<D> elementType, @NotEmpty String entityName, Path<?> parent, @NotEmpty String property) {
+    public PEntityList(Class<? super D> elementType, @NotEmpty String entityName, Path<?> parent, @NotEmpty String property) {
         super(elementType, entityName, PathMetadata.forProperty(parent, property));
     }
     

File: querydsl-sql/src/main/java/com/mysema/query/sql/MetaDataExporter.java
Patch:
@@ -21,6 +21,7 @@
 import com.mysema.query.codegen.PropertyModel;
 import com.mysema.query.codegen.Serializer;
 import com.mysema.query.codegen.Serializers;
+import com.mysema.query.codegen.SimpleTypeModel;
 import com.mysema.query.codegen.TypeCategory;
 import com.mysema.query.codegen.TypeModel;
 import com.mysema.query.util.FileUtils;
@@ -98,7 +99,8 @@ public void export(DatabaseMetaData md) throws SQLException {
 //        ClassModelFactory factory = new ClassModelFactory(new TypeModelFactory());
         while (tables.next()) {
             String tableName = tables.getString(3);
-            BeanModel classModel = new BeanModel(namePrefix, "java.lang", "java.lang.Object", tableName, Collections.<String>emptySet());
+            TypeModel classTypeModel = new SimpleTypeModel(TypeCategory.ENTITY, "java.lang.Object", "java.lang", tableName);
+            BeanModel classModel = new BeanModel(namePrefix, classTypeModel);
             ResultSet columns = md.getColumns(null, schemaPattern, tables.getString(3), null);
             while (columns.next()) {
                 String name = columns.getString(4);

File: querydsl-apt/src/test/java/com/mysema/query/domain/EntityTest.java
Patch:
@@ -41,7 +41,7 @@ public static class Supertype2 extends Supertype{
 
     @SuppressWarnings("unchecked")
     @Test
-    public void test(){
+    public void inheritance(){
         assertTrue(QEntity2.entity2 instanceof QSupertype);
         assertTrue(QEntity3.entity3 instanceof QSupertype);
     }

File: querydsl-apt/src/test/java/com/mysema/query/domain/RelationTest.java
Patch:
@@ -71,7 +71,7 @@ public class RelationType {
     
     @Test
     public void test(){
-        
+        // TODO
     }
 
 }

File: querydsl-core/src/main/java/com/mysema/query/codegen/BeanModel.java
Patch:
@@ -10,8 +10,6 @@
 import java.util.HashSet;
 import java.util.Map;
 
-import javax.annotation.Nullable;
-
 import org.apache.commons.collections15.Factory;
 import org.apache.commons.collections15.MapUtils;
 import org.apache.commons.lang.StringUtils;

File: querydsl-core/src/main/java/com/mysema/query/codegen/TypeModelFactory.java
Patch:
@@ -81,6 +81,9 @@ public TypeModel create(Class<?> cl, Type genericType) {
                 TypeModel valueInfo = create(TypeUtil.getTypeParameter(genericType, 0));
                 value = createCollectionType(valueInfo);
                 
+            }else if (Number.class.isAssignableFrom(cl) && Comparable.class.isAssignableFrom(cl)){    
+                value = new ClassTypeModel(TypeCategory.NUMERIC, cl);
+                
             } else {    
                 TypeCategory typeCategory = TypeCategory.get(cl.getName());
                 if (!typeCategory.isSubCategoryOf(TypeCategory.COMPARABLE) && Comparable.class.isAssignableFrom(cl)){

File: querydsl-collections/src/test/java/com/mysema/query/ColQueryStandardTest.java
Patch:
@@ -12,8 +12,8 @@
 import org.junit.Test;
 
 import com.mysema.query.collections.MiniApi;
-import com.mysema.query.collections.domain.Cat;
-import com.mysema.query.collections.domain.QCat;
+import com.mysema.query.domain.animal.Cat;
+import com.mysema.query.domain.animal.QCat;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.Expr;
 

File: querydsl-collections/src/test/java/com/mysema/query/collections/impl/AbstractQueryTest.java
Patch:
@@ -13,8 +13,8 @@
 
 import com.mysema.query.alias.Alias;
 import com.mysema.query.collections.ColQueryTemplates;
-import com.mysema.query.collections.domain.Cat;
-import com.mysema.query.collections.domain.QCat;
+import com.mysema.query.domain.animal.Cat;
+import com.mysema.query.domain.animal.QCat;
 import com.mysema.query.types.expr.Expr;
 
 /**

File: querydsl-collections/src/test/java/com/mysema/query/collections/impl/AliasTest.java
Patch:
@@ -19,8 +19,8 @@
 import org.junit.Test;
 
 import com.mysema.query.alias.Alias;
-import com.mysema.query.collections.domain.Cat;
-import com.mysema.query.collections.domain.QCat;
+import com.mysema.query.domain.animal.Cat;
+import com.mysema.query.domain.animal.QCat;
 
 /**
  * AliasTEst provides

File: querydsl-collections/src/test/java/com/mysema/query/collections/impl/ColQueryTest.java
Patch:
@@ -15,7 +15,7 @@
 
 import org.junit.Test;
 
-import com.mysema.query.collections.domain.Cat;
+import com.mysema.query.domain.animal.Cat;
 import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.expr.Expr;
 

File: querydsl-collections/src/test/java/com/mysema/query/collections/impl/ConstructorTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.junit.Test;
 
-import com.mysema.query.collections.domain.QCat;
+import com.mysema.query.domain.animal.QCat;
 
 
 public class ConstructorTest {

File: querydsl-collections/src/test/java/com/mysema/query/collections/impl/MathFunctionTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import org.junit.Test;
 
-import com.mysema.query.collections.domain.Cat;
+import com.mysema.query.domain.animal.Cat;
 import com.mysema.query.functions.MathFunctions;
 import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.expr.Expr;

File: querydsl-collections/src/test/java/com/mysema/query/domain/CustomComparableLiteral.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.collections.domain;
+package com.mysema.query.domain;
 
 public class CustomComparableLiteral implements
         Comparable<CustomComparableLiteral> {

File: querydsl-collections/src/test/java/com/mysema/query/domain/CustomLiteral.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.collections.domain;
+package com.mysema.query.domain;
 
 public class CustomLiteral {
 

File: querydsl-collections/src/test/java/com/mysema/query/domain/GenericType.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.collections.domain;
+package com.mysema.query.domain;
 
 import com.mysema.query.annotations.QueryEntity;
 

File: querydsl-collections/src/test/java/com/mysema/query/domain/Host.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.collections.domain;
+package com.mysema.query.domain;
 
 import com.mysema.query.annotations.QueryEntity;
 

File: querydsl-collections/src/test/java/com/mysema/query/domain/InterfaceType.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.collections.domain;
+package com.mysema.query.domain;
 
 import java.util.List;
 

File: querydsl-collections/src/test/java/com/mysema/query/domain/ItemType.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.collections.domain;
+package com.mysema.query.domain;
 
 import com.mysema.query.annotations.QueryEntity;
 

File: querydsl-collections/src/test/java/com/mysema/query/domain/JodaTimeSupport.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.collections.domain;
+package com.mysema.query.domain;
 
 import org.joda.time.DateMidnight;
 import org.joda.time.DateTime;

File: querydsl-collections/src/test/java/com/mysema/query/domain/JodaTimeSupportTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.mysema.query.collections.domain;
+package com.mysema.query.domain;
 
 import static org.junit.Assert.assertTrue;
 

File: querydsl-collections/src/test/java/com/mysema/query/domain/RelationType.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.collections.domain;
+package com.mysema.query.domain;
 
 import java.util.Collection;
 import java.util.List;
@@ -12,8 +12,8 @@
 import java.util.SortedSet;
 
 import com.mysema.query.annotations.QueryEntity;
-import com.mysema.query.collections.domain.Host.Reference;
-import com.mysema.query.collections.domain2.RelationType2;
+import com.mysema.query.domain.Host.Reference;
+import com.mysema.query.domain.rel.RelationType2;
 
 @QueryEntity
 @SuppressWarnings("unchecked")

File: querydsl-collections/src/test/java/com/mysema/query/domain/ReservedNames.java
Patch:
@@ -1,4 +1,4 @@
-package com.mysema.query.collections.domain;
+package com.mysema.query.domain;
 
 import java.util.List;
 import java.util.Map;

File: querydsl-collections/src/test/java/com/mysema/query/domain/SimpleTypes.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.collections.domain;
+package com.mysema.query.domain;
 
 import java.io.Serializable;
 import java.math.BigDecimal;

File: querydsl-collections/src/test/java/com/mysema/query/domain/SimpleTypesTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.mysema.query.collections.domain;
+package com.mysema.query.domain;
 
 import org.junit.Test;
 

File: querydsl-collections/src/test/java/com/mysema/query/domain/animal/Animal.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.collections.domain;
+package com.mysema.query.domain.animal;
 
 import java.util.Date;
 

File: querydsl-collections/src/test/java/com/mysema/query/domain/animal/AnimalTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.mysema.query.collections.domain;
+package com.mysema.query.domain.animal;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;

File: querydsl-collections/src/test/java/com/mysema/query/domain/animal/Cat.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.collections.domain;
+package com.mysema.query.domain.animal;
 
 import java.util.Arrays;
 import java.util.Collections;

File: querydsl-collections/src/test/java/com/mysema/query/domain/animal/CatTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.mysema.query.collections.domain;
+package com.mysema.query.domain.animal;
 
 import static org.junit.Assert.assertTrue;
 

File: querydsl-collections/src/test/java/com/mysema/query/domain/animal/Color.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.collections.domain;
+package com.mysema.query.domain.animal;
 
 public enum Color {
     BLACK, TABBY

File: querydsl-collections/src/test/java/com/mysema/query/domain/rel/RelationType2.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.collections.domain2;
+package com.mysema.query.domain.rel;
 
 import java.util.List;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PArray.java
Patch:
@@ -31,11 +31,11 @@ public abstract class PArray<D> extends Expr<D[]> implements Path<D[]>{
     
     protected final Class<D> componentType;
     
-    private EBoolean isnull, isnotnull;
+    private volatile EBoolean isnull, isnotnull;
     
     private final PathMetadata<?> metadata;
     
-    private ENumber<Integer> size;
+    private volatile ENumber<Integer> size;
     
     private final Path<?> root;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PBoolean.java
Patch:
@@ -7,7 +7,6 @@
 
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
 import com.mysema.query.util.NotEmpty;
@@ -22,7 +21,7 @@
 @SuppressWarnings("serial")
 public class PBoolean extends EBoolean implements Path<Boolean> {
     
-    private EBoolean isnull, isnotnull;
+    private volatile EBoolean isnull, isnotnull;
     
     private final PathMetadata<?> metadata;
     

File: querydsl-core/src/main/java/com/mysema/query/types/path/PComparable.java
Patch:
@@ -8,7 +8,6 @@
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EComparable;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
 import com.mysema.query.util.NotEmpty;
@@ -25,7 +24,7 @@
 public class PComparable<D extends Comparable> extends EComparable<D> implements
         Path<D> {
     
-    private EBoolean isnull, isnotnull;
+    private volatile EBoolean isnull, isnotnull;
     
     private final PathMetadata<?> metadata;
     

File: querydsl-core/src/main/java/com/mysema/query/types/path/PComponentCollection.java
Patch:
@@ -31,7 +31,7 @@ public class PComponentCollection<D> extends ECollectionBase<D> implements PColl
     
     private final PathMetadata<?> metadata;
     
-    private EBoolean isnull, isnotnull;    
+    private volatile EBoolean isnull, isnotnull;    
     
     @SuppressWarnings("unchecked")
     public PComponentCollection(Class<D> type, PathMetadata<?> metadata) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/PComponentMap.java
Patch:
@@ -34,7 +34,7 @@ public class PComponentMap<K, V> extends EMapBase<K, V> implements PMap<K, V> {
     
     private final Path<?> root;
     
-    private EBoolean isnull, isnotnull;    
+    private volatile EBoolean isnull, isnotnull;    
 
     @SuppressWarnings("unchecked")
     public PComponentMap(Class<K> keyType, Class<V> valueType,

File: querydsl-core/src/main/java/com/mysema/query/types/path/PDate.java
Patch:
@@ -8,7 +8,6 @@
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EDate;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
 import com.mysema.query.util.NotEmpty;
@@ -21,7 +20,7 @@
 @SuppressWarnings({"unchecked","serial"})
 public class PDate<D extends Comparable> extends EDate<D> implements Path<D>{
 
-    private EBoolean isnull, isnotnull;
+    private volatile EBoolean isnull, isnotnull;
     
     private final PathMetadata<?> metadata;
     

File: querydsl-core/src/main/java/com/mysema/query/types/path/PDateTime.java
Patch:
@@ -8,7 +8,6 @@
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EDateTime;
-import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
 import com.mysema.query.util.NotEmpty;
@@ -21,7 +20,7 @@
 @SuppressWarnings({"unchecked","serial"})
 public class PDateTime<D extends Comparable> extends EDateTime<D> implements Path<D> {
 
-    private EBoolean isnull, isnotnull;
+    private volatile EBoolean isnull, isnotnull;
     
     private final PathMetadata<?> metadata;
     

File: querydsl-core/src/main/java/com/mysema/query/types/path/PEntityMap.java
Patch:
@@ -26,7 +26,7 @@
 @SuppressWarnings("serial")
 public class PEntityMap<K, V> extends EMapBase<K, V> implements PMap<K, V> {
     
-    private EBoolean isnull, isnotnull;
+    private volatile EBoolean isnull, isnotnull;
     
     private final Class<K> keyType;
     

File: querydsl-core/src/main/java/com/mysema/query/types/path/PNumber.java
Patch:
@@ -7,7 +7,6 @@
 
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EMapBase;
 import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
@@ -23,7 +22,7 @@
 @SuppressWarnings("serial")
 public class PNumber<D extends Number & Comparable<?>> extends ENumber<D> implements Path<D> {
     
-    private EBoolean isnull, isnotnull;
+    private volatile EBoolean isnull, isnotnull;
     
     private final PathMetadata<?> metadata;
     

File: querydsl-core/src/main/java/com/mysema/query/types/path/PSimple.java
Patch:
@@ -7,7 +7,6 @@
 
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EMapBase;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
@@ -23,7 +22,7 @@
 @SuppressWarnings("serial")
 public class PSimple<D> extends Expr<D> implements Path<D> {
     
-    private EBoolean isnull, isnotnull;
+    private volatile EBoolean isnull, isnotnull;
     
     private final PathMetadata<?> metadata;
     

File: querydsl-core/src/main/java/com/mysema/query/types/path/PString.java
Patch:
@@ -7,7 +7,6 @@
 
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EMapBase;
 import com.mysema.query.types.expr.EString;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
@@ -22,7 +21,7 @@
 @SuppressWarnings("serial")
 public class PString extends EString implements Path<String> {
     
-    private EBoolean isnull, isnotnull;
+    private volatile EBoolean isnull, isnotnull;
     
     private final PathMetadata<?> metadata;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PTime.java
Patch:
@@ -7,7 +7,6 @@
 
 import com.mysema.query.types.Visitor;
 import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EMapBase;
 import com.mysema.query.types.expr.ETime;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
@@ -21,7 +20,7 @@
 @SuppressWarnings({"unchecked","serial"})
 public class PTime<D extends Comparable> extends ETime<D> implements Path<D>{
 
-    private EBoolean isnull, isnotnull;
+    private volatile EBoolean isnull, isnotnull;
     
     private final PathMetadata<?> metadata;
     

File: querydsl-apt/src/main/java/com/mysema/query/apt/Processor.java
Patch:
@@ -35,7 +35,6 @@
  * @author tiwe
  * 
  */
-// TODO : simplify this
 @Immutable
 public class Processor {
     

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColQueryTemplates.java
Patch:
@@ -30,7 +30,6 @@ public ColQueryTemplates() {
         add(Ops.AOE, "{0}.compareTo({1}) >= 0");
         add(Ops.BOE, "{0}.compareTo({1}) <= 0");
         add(Ops.BETWEEN, functions + ".between({0},{1},{2})");
-//        add(Ops.BETWEEN, "{0}.compareTo({1}) > 0 && {0}.compareTo({2}) < 0");
         add(Ops.STRING_CAST, "String.valueOf({0})");
         
         // Date and Time
@@ -60,6 +59,7 @@ public ColQueryTemplates() {
     }
     
     public static boolean like(String str, String like){
+        // TODO : better escaping
         return str.matches(like.replace("%", ".*").replace('_', '.'));
     }
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLTemplates.java
Patch:
@@ -59,7 +59,7 @@ public HQLTemplates() {
         
         // string
         add(Ops.CONCAT, "{0} || {1}", 37);
-        add(Ops.MATCHES, "{0} like {1}", 27); // TODO : as real regex
+        add(Ops.MATCHES, "{0} like {1}", 27); // TODO : support real regexes 
         add(Ops.LOWER, "lower({0})");
         add(Ops.SUBSTR_1ARG, "substring({0},{1})");
         add(Ops.SUBSTR_2ARGS, "substring({0},{1},{2})");

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLQuery.java
Patch:
@@ -37,7 +37,7 @@ public interface HQLQuery extends Query<HQLQuery>, Projectable {
     
     <P> HQLQuery fullJoin(PEntityCollection<P> target, PEntity<P> alias);
     
-    HQLQuery on(EBoolean condition);
+    HQLQuery with(EBoolean condition);
     
     HQLQuery fetch();
             

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLQueryBase.java
Patch:
@@ -131,7 +131,7 @@ public <P> SubType leftJoin(PEntityCollection<P> target, PEntity<P> alias) {
         return _this;
     }
     
-    public SubType on(EBoolean condition){
+    public SubType with(EBoolean condition){
         getMetadata().addJoinCondition(condition);
         return _this;
     }

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/AbstractHibernateQuery.java
Patch:
@@ -5,10 +5,8 @@
  */
 package com.mysema.query.hql.hibernate;
 
-import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Map;
 
 import javax.annotation.Nullable;
 
@@ -25,6 +23,8 @@
 import com.mysema.query.types.expr.Expr;
 
 /**
+ * Abstract base class for Hibernate API based implementations of the HQLQuery interface
+ * 
  * @author tiwe
  *
  * @param <SubType>

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/HibernateDeleteClause.java
Patch:
@@ -14,6 +14,8 @@
 import com.mysema.query.types.path.PEntity;
 
 /**
+ * DeleteClause implementation for Hibernate
+ * 
  * @author tiwe
  *
  */

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/HibernateQuery.java
Patch:
@@ -13,6 +13,7 @@
 
 
 /**
+ * HibernateQuery is the default implementation of the HQLQuery interface for Hibernate
  * 
  * @author tiwe
  *

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/HibernateUpdateClause.java
Patch:
@@ -16,6 +16,8 @@
 import com.mysema.query.types.path.Path;
 
 /**
+ * UpdateClause implementation for JPA
+ * 
  * @author tiwe
  *
  */

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/HibernateUtil.java
Patch:
@@ -6,6 +6,8 @@
 import org.hibernate.Query;
 
 /**
+ * Utility methods for Hibernate
+ * 
  * @author tiwe
  *
  */

File: querydsl-hql/src/main/java/com/mysema/query/hql/jpa/AbstractJPAQuery.java
Patch:
@@ -23,6 +23,8 @@
 import com.mysema.query.types.expr.Expr;
 
 /**
+ * Abstract base class for JPA API based implementations of the HQLQuery interface
+ * 
  * @author tiwe
  *
  * @param <SubType>

File: querydsl-hql/src/main/java/com/mysema/query/hql/jpa/JPADeleteClause.java
Patch:
@@ -14,6 +14,8 @@
 import com.mysema.query.types.path.PEntity;
 
 /**
+ * DeleteClause implementation for JPA
+ * 
  * @author tiwe
  *
  */

File: querydsl-hql/src/main/java/com/mysema/query/hql/jpa/JPAQuery.java
Patch:
@@ -12,7 +12,7 @@
 import com.mysema.query.hql.HQLTemplates;
 
 /**
- * 
+ * JPAQuery is the default implementation of the HQLQuery interface for JPA
  * 
  * @author tiwe
  *

File: querydsl-hql/src/main/java/com/mysema/query/hql/jpa/JPAUpdateClause.java
Patch:
@@ -16,6 +16,8 @@
 import com.mysema.query.types.path.Path;
 
 /**
+ * UpdateClause implementation for JPA
+ * 
  * @author tiwe
  *
  */

File: querydsl-hql/src/main/java/com/mysema/query/hql/jpa/JPAUtil.java
Patch:
@@ -5,6 +5,8 @@
 import javax.persistence.Query;
 
 /**
+ * Utility methods for JPA
+ * 
  * @author tiwe
  *
  */

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/dml/JDOQLUpdateClause.java
Patch:
@@ -17,6 +17,8 @@
 import com.mysema.query.types.path.Path;
 
 /**
+ * UpdateClause implementation for JDO
+ * 
  * @author tiwe
  *
  */

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/HibernateDeleteClause.java
Patch:
@@ -44,7 +44,7 @@ public long execute() {
         Map<Object,String> constants = serializer.getConstantToLabel();
 
         Query query = session.createQuery(serializer.toString());
-        AbstractHibernateQuery.setConstants(query, constants);
+        HibernateUtil.setConstants(query, constants);
         return query.executeUpdate();
     }
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/HibernateUpdateClause.java
Patch:
@@ -46,7 +46,7 @@ public long execute() {
         Map<Object,String> constants = serializer.getConstantToLabel();
 
         Query query = session.createQuery(serializer.toString());
-        AbstractHibernateQuery.setConstants(query, constants);
+        HibernateUtil.setConstants(query, constants);
         return query.executeUpdate();
     }
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/HibernateIntegrationTest.java
Patch:
@@ -20,8 +20,8 @@
 import com.mysema.query.hql.domain.Cat;
 import com.mysema.query.hql.domain.QCat;
 import com.mysema.query.hql.hibernate.HibernateDeleteClause;
-import com.mysema.query.hql.hibernate.HibernateQuery;
 import com.mysema.query.hql.hibernate.HibernateUpdateClause;
+import com.mysema.query.hql.hibernate.HibernateUtil;
 import com.mysema.query.types.path.PEntity;
 
 /**
@@ -45,7 +45,7 @@ public void parse() throws RecognitionException,
 
                     // create Query and execute it
                     Query query = session.createQuery(toString());
-                    HibernateQuery.setConstants(query, getConstants());
+                    HibernateUtil.setConstants(query, getConstants());
                     try {
                         query.list();
                     } catch (Exception e) {

File: querydsl-hql/src/test/java/com/mysema/query/hql/JPAIntegrationTest.java
Patch:
@@ -16,7 +16,7 @@
 
 import com.mysema.query.JPAConfig;
 import com.mysema.query.JPATestRunner;
-import com.mysema.query.hql.jpa.JPAQuery;
+import com.mysema.query.hql.jpa.JPAUtil;
 
 /**
  * HibernatePersistenceTest provides.
@@ -38,7 +38,7 @@ public void parse() throws RecognitionException, TokenStreamException {
 
                     // create Query and execute it
                     Query query = entityManager.createQuery(toString());
-                    JPAQuery.setConstants(query, getConstants());
+                    JPAUtil.setConstants(query, getConstants());
                     try {
                         query.getResultList();
                     } catch (Exception e) {

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CBoolean.java
Patch:
@@ -18,6 +18,7 @@
  * @author tiwe
  *
  */
+@SuppressWarnings("serial")
 public class CBoolean extends EBoolean implements Custom<Boolean> {
     
     public static EBoolean create(List<Expr<?>> args, Template template){

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CComparable.java
Patch:
@@ -19,6 +19,7 @@
  *
  * @param <T>
  */
+@SuppressWarnings("serial")
 public class CComparable<T extends Comparable<?>> extends EComparable<T> implements Custom<T> {
     
     public static <T extends Comparable<?>> EComparable<T> create(Class<T> type, List<Expr<?>> args, Template template){

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CNumber.java
Patch:
@@ -19,6 +19,7 @@
  *
  * @param <T>
  */
+@SuppressWarnings("serial")
 public class CNumber<T extends Number & Comparable<?>> extends ENumber<T> implements Custom<T> {
     
     public static <T extends Number & Comparable<?>> ENumber<T> create(Class<T> type, List<Expr<?>> args, Template template){

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CSimple.java
Patch:
@@ -18,6 +18,7 @@
  *
  * @param <T>
  */
+@SuppressWarnings("serial")
 public class CSimple<T> extends Expr<T> implements Custom<T> {
     
     public static <T> Expr<T> create(Class<? extends T> type, List<Expr<?>> args, Template template){

File: querydsl-core/src/main/java/com/mysema/query/types/custom/CString.java
Patch:
@@ -18,6 +18,7 @@
  * @author tiwe
  *
  */
+@SuppressWarnings("serial")
 public class CString extends EString implements Custom<String> {
     
     public static EString create(List<Expr<?>> args, Template template){

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EArrayConstructor.java
Patch:
@@ -14,6 +14,7 @@
  * 
  * @param <D> component type
  */
+@SuppressWarnings("serial")
 public class EArrayConstructor<D> extends EConstructor<D[]> {
     
     private final Class<D> elementType;

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EBoolean.java
Patch:
@@ -16,6 +16,7 @@
  * @see java.lang.Boolean
  * 
  */
+@SuppressWarnings("serial")
 public abstract class EBoolean extends EComparable<Boolean> {
     
     private volatile EBoolean not;

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EBooleanConst.java
Patch:
@@ -13,6 +13,7 @@
  * @author tiwe
  *
  */
+@SuppressWarnings("serial")
 public class EBooleanConst extends EBoolean implements Constant<Boolean>{
     
     public static final EBooleanConst FALSE = new EBooleanConst(Boolean.FALSE);

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ECollectionBase.java
Patch:
@@ -19,6 +19,7 @@
  *
  * @param <D>
  */
+@SuppressWarnings("serial")
 public abstract class ECollectionBase<D> extends Expr<java.util.Collection<D>> implements ECollection<D> {
 
     private volatile EBoolean empty;

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EComparable.java
Patch:
@@ -10,7 +10,7 @@
  *
  * @param <D>
  */
-@SuppressWarnings("unchecked")
+@SuppressWarnings({"unchecked","serial"})
 public abstract class EComparable<D extends Comparable> extends EComparableBase<D> {
     
     public EComparable(Class<? extends D> type) {

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EComparableBase.java
Patch:
@@ -21,7 +21,7 @@
  * @param <D> Java type
  * @see java.lang.Comparable
  */
-@SuppressWarnings("unchecked")
+@SuppressWarnings({"unchecked","serial"})
 public abstract class EComparableBase<D extends Comparable> extends Expr<D> {
 
     private volatile OrderSpecifier<D> asc, desc;

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EConstructor.java
Patch:
@@ -21,6 +21,7 @@
  * 
  * @param <D> Java type
  */
+@SuppressWarnings("serial")
 public class EConstructor<D> extends Expr<D> {
     
     private final List<Expr<?>> args;

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDate.java
Patch:
@@ -19,7 +19,7 @@
  *
  * @param <D>
  */
-@SuppressWarnings("unchecked")
+@SuppressWarnings({"unchecked","serial"})
 public abstract class EDate<D extends Comparable> extends EDateOrTime<D> {
     
     private volatile ENumber<Integer> dayOfMonth, month, year;

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDateOrTime.java
Patch:
@@ -8,7 +8,7 @@
  *
  * @param <D>
  */
-@SuppressWarnings("unchecked")
+@SuppressWarnings({"unchecked","serial"})
 public abstract class EDateOrTime<D extends Comparable> extends EComparable<D> {
     
     public EDateOrTime(Class<? extends D> type) {

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDateTime.java
Patch:
@@ -19,7 +19,7 @@
  *
  * @param <D>
  */
-@SuppressWarnings("unchecked")
+@SuppressWarnings({"unchecked","serial"})
 public abstract class EDateTime<D extends Comparable> extends EDateOrTime<D> {
 
     private volatile ENumber<Integer> dayOfMonth, month, year, hours, minutes, seconds;

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EEntity.java
Patch:
@@ -12,6 +12,7 @@
  * 
  * @param <D> Java type
  */
+@SuppressWarnings("serial")
 public abstract class EEntity<D> extends Expr<D> {
     
     public EEntity(Class<? extends D> type) {

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EMapBase.java
Patch:
@@ -19,6 +19,7 @@
  * @param <K>
  * @param <V>
  */
+@SuppressWarnings("serial")
 public abstract class EMapBase<K,V> extends Expr<Map<K,V>> implements EMap<K,V> {
 
     private volatile ENumber<Integer> size;    

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ENumber.java
Patch:
@@ -23,7 +23,7 @@
  * @param <D> Java type
  * @see java.lang.Number
  */
-
+@SuppressWarnings("serial")
 public abstract class ENumber<D extends Number & Comparable<?>> extends EComparableBase<D> {
     
     private static ENumber<Double> random;

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ENumberConst.java
Patch:
@@ -14,6 +14,7 @@
  *
  * @param <D>
  */
+@SuppressWarnings("serial")
 public class ENumberConst<D extends Number & Comparable<?>> extends ENumber<D> implements Constant<D>{
 
     private final D constant;

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EString.java
Patch:
@@ -21,6 +21,7 @@
  * @author tiwe
  * @see java.lang.String
  */
+@SuppressWarnings("serial")
 public abstract class EString extends EComparable<String> {
     
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EStringConst.java
Patch:
@@ -16,6 +16,7 @@
  * @author tiwe
  *
  */
+@SuppressWarnings("serial")
 public class EStringConst extends EString implements Constant<String>{
     
     private final String constant;

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ETime.java
Patch:
@@ -18,7 +18,7 @@
  *
  * @param <D>
  */
-@SuppressWarnings("unchecked")
+@SuppressWarnings({"unchecked","serial"})
 public abstract class ETime<D extends Comparable> extends EDateOrTime<D> {
     
     private volatile ENumber<Integer> hours, minutes, seconds;

File: querydsl-core/src/main/java/com/mysema/query/types/expr/Expr.java
Patch:
@@ -5,6 +5,7 @@
  */
 package com.mysema.query.types.expr;
 
+import java.io.Serializable;
 import java.util.Arrays;
 import java.util.Collection;
 
@@ -23,7 +24,8 @@
  * @author tiwe
  * @version $Id$
  */
-public abstract class Expr<D> {
+@SuppressWarnings("serial")
+public abstract class Expr<D> implements Serializable{
     
     private static final Templates templates = new Templates();
     

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ExprConst.java
Patch:
@@ -15,7 +15,7 @@
  * 
  * @param <D> Java type of constant
  */
-
+@SuppressWarnings("serial")
 public class ExprConst<D> extends Expr<D> implements Constant<D> {
     
     private final D constant;

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OBoolean.java
Patch:
@@ -19,6 +19,7 @@
  * @author tiwe
  * 
  */
+@SuppressWarnings("serial")
 public class OBoolean extends EBoolean implements Operation<Boolean, Boolean> {
 
     public static EBoolean create(Operator<Boolean> op, Expr<?>... args){

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OComparable.java
Patch:
@@ -21,6 +21,7 @@
  * @param <OpType>
  * @param <D>
  */
+@SuppressWarnings("serial")
 public class OComparable<OpType, D extends Comparable<?>> extends
         EComparable<D> implements Operation<OpType, D> {
     

File: querydsl-core/src/main/java/com/mysema/query/types/operation/ODate.java
Patch:
@@ -21,6 +21,7 @@
  * @param <OpType>
  * @param <D>
  */
+@SuppressWarnings("serial")
 public class ODate <OpType extends Comparable<?>, D extends Comparable<?>> extends
     EDate<D> implements Operation<OpType, D> {
     

File: querydsl-core/src/main/java/com/mysema/query/types/operation/ODateTime.java
Patch:
@@ -21,6 +21,7 @@
  * @param <OpType>
  * @param <D>
  */
+@SuppressWarnings("serial")
 public class ODateTime<OpType extends Comparable<?>, D extends Comparable<?>> extends
 EDateTime<D> implements Operation<OpType, D> {
 

File: querydsl-core/src/main/java/com/mysema/query/types/operation/ONumber.java
Patch:
@@ -21,6 +21,7 @@
  * @param <OpType>
  * @param <D>
  */
+@SuppressWarnings("serial")
 public class ONumber<OpType extends Number, D extends Number & Comparable<?>>
         extends ENumber<D> implements Operation<OpType, D> {
     

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OSimple.java
Patch:
@@ -20,6 +20,7 @@
  * @param <OpType>
  * @param <D>
  */
+@SuppressWarnings("serial")
 public class OSimple<OpType, D> extends Expr<D> implements Operation<OpType, D> {
     
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OString.java
Patch:
@@ -19,6 +19,7 @@
  * @author tiwe
  * 
  */
+@SuppressWarnings("serial")
 public class OString extends EString implements Operation<String, String> {
     
     public static EString create(Operator<String> op, Expr<?>... args){

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OStringArray.java
Patch:
@@ -18,6 +18,7 @@
  * @author tiwe
  * 
  */
+@SuppressWarnings("serial")
 public class OStringArray extends Expr<String[]> implements
         Operation<String, String[]> {
     

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OTime.java
Patch:
@@ -21,6 +21,7 @@
  * @param <OpType>
  * @param <D>
  */
+@SuppressWarnings("serial")
 public class OTime<OpType, D extends Comparable<?>> extends ETime<D> implements Operation<OpType, D> {
 
     /**

File: querydsl-core/src/main/java/com/mysema/query/types/path/PArray.java
Patch:
@@ -10,7 +10,6 @@
 import javax.annotation.Nonnegative;
 
 import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EComparableBase;
 import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.OBoolean;
@@ -25,6 +24,7 @@
  * 
  * @param <D> component type
  */
+@SuppressWarnings("serial")
 public abstract class PArray<D> extends Expr<D[]> implements Path<D[]>{
     
     protected final Class<D[]> arrayType;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PBoolean.java
Patch:
@@ -18,6 +18,7 @@
  * @see java.lang.Boolean
  * 
  */
+@SuppressWarnings("serial")
 public class PBoolean extends EBoolean implements Path<Boolean> {
     
     private EBoolean isnull, isnotnull;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PBooleanArray.java
Patch:
@@ -16,6 +16,7 @@
  * @author tiwe
  * 
  */
+@SuppressWarnings("serial")
 public class PBooleanArray extends PArray<Boolean> {
     
     public PBooleanArray(PathMetadata<?> metadata) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/PComparable.java
Patch:
@@ -20,7 +20,7 @@
  * @param <D>
  * @see java.util.Comparable
  */
-@SuppressWarnings("unchecked")
+@SuppressWarnings({"unchecked","serial"})
 public class PComparable<D extends Comparable> extends EComparable<D> implements
         Path<D> {
     

File: querydsl-core/src/main/java/com/mysema/query/types/path/PComparableArray.java
Patch:
@@ -15,7 +15,7 @@
  * 
  * @param <D> component type
  */
-@SuppressWarnings("unchecked")
+@SuppressWarnings({"unchecked","serial"})
 public class PComparableArray<D extends Comparable> extends PArray<D> {
     
     public PComparableArray(Class<D> type, PathMetadata<?> metadata) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/PComponentCollection.java
Patch:
@@ -21,6 +21,7 @@
  * 
  * @param <D> component type
  */
+@SuppressWarnings("serial")
 public class PComponentCollection<D> extends ECollectionBase<D> implements PCollection<D> {
     
     protected final Class<D> type;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PComponentList.java
Patch:
@@ -15,6 +15,7 @@
  * 
  * @param <D> component type
  */
+@SuppressWarnings("serial")
 public class PComponentList<D> extends PComponentCollection<D> implements PList<D> {
     
     public PComponentList(Class<D> type, PathMetadata<?> metadata) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/PComponentMap.java
Patch:
@@ -23,6 +23,7 @@
  * @param <K> key type
  * @param <V> value type
  */
+@SuppressWarnings("serial")
 public class PComponentMap<K, V> extends EMapBase<K, V> implements PMap<K, V> {    
     
     private final Class<K> keyType;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PDate.java
Patch:
@@ -17,7 +17,7 @@
  *
  * @param <D>
  */
-@SuppressWarnings("unchecked")
+@SuppressWarnings({"unchecked","serial"})
 public class PDate<D extends Comparable> extends EDate<D> implements Path<D>{
 
     private EBoolean isnull, isnotnull;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PDateTime.java
Patch:
@@ -17,7 +17,7 @@
  *
  * @param <D>
  */
-@SuppressWarnings("unchecked")
+@SuppressWarnings({"unchecked","serial"})
 public class PDateTime<D extends Comparable> extends EDateTime<D> implements Path<D> {
 
     private EBoolean isnull, isnotnull;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PEntity.java
Patch:
@@ -21,6 +21,7 @@
  *
  * @param <D> Java type
  */
+@SuppressWarnings("serial")
 public class PEntity<D> extends EEntity<D> implements Path<D> {
     
     private final String entityName;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PEntityCollection.java
Patch:
@@ -26,6 +26,7 @@
  * 
  * @param <D> component type
  */
+@SuppressWarnings("serial")
 public class PEntityCollection<D> extends EEntity<java.util.Collection<D>> implements PCollection<D> {
     
     private final PathMetadata<?> metadata;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PEntityList.java
Patch:
@@ -15,6 +15,7 @@
  * 
  * @param <D> component type
  */
+@SuppressWarnings("serial")
 public class PEntityList<D> extends PEntityCollection<D> implements PList<D> {
     
     public PEntityList(Class<D> elementType, @NotEmpty String entityName, PathMetadata<?> metadata) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/PEntityMap.java
Patch:
@@ -23,6 +23,7 @@
  * @param <K> key type
  * @param <V> value type
  */
+@SuppressWarnings("serial")
 public class PEntityMap<K, V> extends EMapBase<K, V> implements PMap<K, V> {
     
     private EBoolean isnull, isnotnull;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PNumber.java
Patch:
@@ -19,6 +19,7 @@
  * 
  * @param <D> Java type
  */
+@SuppressWarnings("serial")
 public class PNumber<D extends Number & Comparable<?>> extends ENumber<D> implements Path<D> {
     
     private EBoolean isnull, isnotnull;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PSimple.java
Patch:
@@ -19,6 +19,7 @@
  * 
  * @param <D> Java type
  */
+@SuppressWarnings("serial")
 public class PSimple<D> extends Expr<D> implements Path<D> {
     
     private EBoolean isnull, isnotnull;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PString.java
Patch:
@@ -18,6 +18,7 @@
  * @author tiwe
  * 
  */
+@SuppressWarnings("serial")
 public class PString extends EString implements Path<String> {
     
     private EBoolean isnull, isnotnull;

File: querydsl-core/src/main/java/com/mysema/query/types/path/PStringArray.java
Patch:
@@ -16,6 +16,7 @@
  * @author tiwe
  * 
  */
+@SuppressWarnings("serial")
 public class PStringArray extends PArray<String> {
     
     public PStringArray(PathMetadata<?> metadata) {

File: querydsl-core/src/main/java/com/mysema/query/types/path/PTime.java
Patch:
@@ -17,7 +17,7 @@
  *
  * @param <D>
  */
-@SuppressWarnings("unchecked")
+@SuppressWarnings({"unchecked","serial"})
 public class PTime<D extends Comparable> extends ETime<D> implements Path<D>{
 
     private EBoolean isnull, isnotnull;

File: querydsl-core/src/main/java/com/mysema/query/types/query/ListSubQuery.java
Patch:
@@ -22,6 +22,7 @@
  * @param <JM>
  * @param <A>
  */
+@SuppressWarnings("serial")
 public class ListSubQuery<A> extends ECollectionBase<A> implements SubQuery{
 
     private final Class<A> elementType;

File: querydsl-core/src/main/java/com/mysema/query/types/query/ObjectSubQuery.java
Patch:
@@ -20,6 +20,7 @@
  * @param <JM>
  * @param <A>
  */
+@SuppressWarnings("serial")
 public class ObjectSubQuery<A> extends Expr<A> implements SubQuery{
 
     private final QueryMetadata md;

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDate.java
Patch:
@@ -20,7 +20,7 @@
  * @param <D>
  */
 @SuppressWarnings("unchecked")
-public abstract class EDate<D extends Comparable> extends EComparable<D> {
+public abstract class EDate<D extends Comparable> extends EDateOrTime<D> {
     
     private ENumber<Integer> dayOfMonth;
     

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EDateTime.java
Patch:
@@ -20,7 +20,7 @@
  * @param <D>
  */
 @SuppressWarnings("unchecked")
-public abstract class EDateTime<D extends Comparable> extends EComparable<D> {
+public abstract class EDateTime<D extends Comparable> extends EDateOrTime<D> {
 
     private ENumber<Integer> dayOfMonth;
     

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ETime.java
Patch:
@@ -19,7 +19,7 @@
  * @param <D>
  */
 @SuppressWarnings("unchecked")
-public abstract class ETime<D extends Comparable> extends EComparable<D> {
+public abstract class ETime<D extends Comparable> extends EDateOrTime<D> {
     
     private ENumber<Integer> hours;
     

File: querydsl-collections/src/test/java/com/mysema/query/collections/impl/AliasTest.java
Patch:
@@ -88,7 +88,7 @@ public void testAlias3() {
         Cat c = alias(Cat.class, "cat");
 
         // 1
-        from(c, cats).where($(c.getBirthdate()).after(new Date())).list($(c))
+        from(c, cats).where($(c.getBirthdate()).gt(new Date())).list($(c))
                 .iterator();
 
         // 2

File: querydsl-collections/src/test/java/com/mysema/query/collections/impl/ColQueryTest.java
Patch:
@@ -37,9 +37,9 @@ public void instanceOf() {
     @Test
     public void testAfterAndBefore() {
         query().from(cat, Arrays.asList(c1, c2))
-        .where(cat.birthdate.before(new Date()),
-                cat.birthdate.boe(new Date()), cat.birthdate.after(new Date()),
-                cat.birthdate.aoe(new Date()))
+        .where(cat.birthdate.lt(new Date()),
+                cat.birthdate.loe(new Date()), cat.birthdate.gt(new Date()),
+                cat.birthdate.goe(new Date()))
         .list(cat);
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PArray.java
Patch:
@@ -11,6 +11,7 @@
 
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EComparable;
+import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.ONumber;
@@ -34,7 +35,7 @@ public abstract class PArray<D> extends Expr<D[]> implements Path<D[]>{
     
     private final PathMetadata<?> metadata;
     
-    private EComparable<Integer> size;
+    private ENumber<Integer> size;
     
     private final Path<?> root;
 
@@ -119,7 +120,7 @@ public EBoolean isNull() {
      * 
      * @return
      */
-    public EComparable<Integer> size() {
+    public ENumber<Integer> size() {
         if (size == null) {
             size = ONumber.create(Integer.class, Ops.COL_SIZE, this);
         }

File: querydsl-core/src/main/java/com/mysema/query/codegen/EntitySerializer.java
Patch:
@@ -149,8 +149,8 @@ protected void constructors(ClassModel model, Writer writer) throws IOException
             builder.append("    }\n\n");    
         }        
 
-        builder.append("    public " + queryType + "(PEntity<?> entity) {\n");
-        builder.append("        this(entity.getMetadata());\n");
+        builder.append("    public " + queryType + "(PEntity<? extends "+localName+"> entity) {\n");
+        builder.append("        super(entity.getType(), entity.getEntityName(), entity.getMetadata());\n");
         builder.append("    }\n\n");        
         builder.append("    public " + queryType + "(PathMetadata<?> metadata) {\n");
         builder.append("        super("+ localName + ".class, \"" + simpleName + "\", metadata);\n");

File: querydsl-core/src/main/java/com/mysema/query/codegen/SupertypeSerializer.java
Patch:
@@ -26,7 +26,7 @@ protected void constructors(ClassModel model, Writer writer) throws IOException
         
         StringBuilder builder = new StringBuilder();
         builder.append("    public " + queryType + "(PEntity<? extends "+localName+"> entity) {\n");
-        builder.append("        this(entity.getMetadata());\n");
+        builder.append("        super(entity.getType(), entity.getEntityName(), entity.getMetadata());\n");
         builder.append("    }\n\n");
         builder.append("    public " + queryType + "(PathMetadata<?> metadata) {\n");
         builder.append("        super("+ localName + ".class, \"" + simpleName + "\", metadata);\n");

File: querydsl-collections/src/test/java/com/mysema/query/collections/domain/Animal.java
Patch:
@@ -9,6 +9,7 @@
 
 @Entity
 public class Animal {
+    
     protected boolean alive;
     protected java.util.Date birthdate = new java.util.Date();
     protected int bodyWeight, weight, toes;

File: querydsl-core/src/main/java/com/mysema/query/codegen/Serializers.java
Patch:
@@ -16,7 +16,9 @@ public final class Serializers {
     
     private Serializers(){}
     
-    public static final Serializer DOMAIN = new EntitySerializer(false);
+    public static final Serializer ENTITY = new EntitySerializer(false);
+    
+    public static final Serializer SUPERTYPE = new SupertypeSerializer(false);
     
     public static final Serializer EMBEDDABLE = new EntitySerializer(true);
     

File: querydsl-core/src/test/java/com/mysema/query/codegen/SerializerTest.java
Patch:
@@ -50,7 +50,7 @@ public SerializerTest() {
      */
     @Test
     public void testDomainTypesAsOuterClasses() throws Exception {
-        Serializers.DOMAIN.serialize(type, writer);
+        Serializers.ENTITY.serialize(type, writer);
 //        System.out.println(writer);
     }
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/MetaDataExporter.java
Patch:
@@ -39,7 +39,7 @@ public class MetaDataExporter {
 
     private final String schemaPattern, tableNamePattern;
 
-    private static final Serializer serializer = Serializers.DOMAIN;
+    private static final Serializer serializer = Serializers.ENTITY;
     
     public MetaDataExporter(String namePrefix, String packageName, String schemaPattern, String tableNamePattern, String targetFolder){
         this.namePrefix = namePrefix;

File: querydsl-apt/src/main/java/com/mysema/query/apt/QuerydslAnnotationProcessor.java
Patch:
@@ -41,8 +41,9 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
         dto = Projection.class;
         skip = Transient.class;
         
-        Processor p = new Processor(processingEnv, entity, superType, embeddable, dto, skip);
-        p.process(roundEnv);
+        Configuration configuration = new Configuration(entity, superType, embeddable, dto, skip);
+        Processor processor = new Processor(processingEnv, configuration);
+        processor.process(roundEnv);
         return true;
     }       
     

File: querydsl-core/src/main/java/com/mysema/query/annotations/Embeddable.java
Patch:
@@ -16,7 +16,7 @@
 @Target(TYPE)
 @Retention(RUNTIME)
 /**
- * Annotion for APT based Domain query type generation. Annotate Embeddable types with this annotation.
+ * Annotation for APT based Domain query type generation. Annotate Embeddable types with this annotation.
  */
 public @interface Embeddable {
 

File: querydsl-core/src/main/java/com/mysema/query/annotations/Entity.java
Patch:
@@ -16,7 +16,7 @@
 @Target(TYPE)
 @Retention(RUNTIME)
 /**
- * Annotion for APT based Domain query type generation. Annotate Domain types with this annotation.
+ * Annotation for APT based Domain query type generation. Annotate Domain types with this annotation.
  */
 public @interface Entity {
 }
\ No newline at end of file

File: querydsl-core/src/main/java/com/mysema/query/annotations/Literal.java
Patch:
@@ -5,18 +5,18 @@
  */
 package com.mysema.query.annotations;
 
-import static java.lang.annotation.ElementType.TYPE;
+import static java.lang.annotation.ElementType.*;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
 @Documented
-@Target(TYPE)
+@Target({TYPE,FIELD,METHOD})
 @Retention(RUNTIME)
 /**
- * Annotion for APT based Domain query type generation. Annotate Literal types with this annotation.
+ * Annotation for APT based Domain query type generation. Annotate Literal types with this annotation.
  */
 public @interface Literal {
 

File: querydsl-core/src/main/java/com/mysema/query/codegen/FieldModel.java
Patch:
@@ -65,8 +65,8 @@ public String getDocString() {
         return docs;
     }
 
-    public FieldType getFieldType() {
-        return type.getFieldType();
+    public TypeCategory getTypeCategory() {
+        return type.getTypeCategory();
     }
 
     public String getKeyTypeName() {

File: querydsl-core/src/main/java/com/mysema/query/codegen/TypeModel.java
Patch:
@@ -19,7 +19,7 @@ public interface TypeModel {
      * 
      * @return field type of type
      */
-    FieldType getFieldType();
+    TypeCategory getTypeCategory();
 
     /**
      * Key type or null

File: querydsl-core/src/test/java/com/mysema/query/codegen/ReflectionTypeModelTest.java
Patch:
@@ -36,14 +36,14 @@ public void test(){
     @Test
     public void getFieldType(){
         for (Class<?> cl : Arrays.<Class<?>>asList(Blob.class, Clob.class, Locale.class, Class.class, Serializable.class)){
-            assertEquals(FieldType.SIMPLE, get(cl).getFieldType());
+            assertEquals(TypeCategory.SIMPLE, get(cl).getTypeCategory());
         }
         
         for (Class<?> cl : Arrays.<Class<?>>asList(Number.class, Integer.class)){
-            assertEquals(FieldType.NUMERIC, get(cl).getFieldType());
+            assertEquals(TypeCategory.NUMERIC, get(cl).getTypeCategory());
         }
         
-        assertEquals(FieldType.BOOLEAN, get(boolean.class).getFieldType());
+        assertEquals(TypeCategory.BOOLEAN, get(boolean.class).getTypeCategory());
     }
 
     private TypeModel get(Class<?> cl){

File: querydsl-core/src/test/java/com/mysema/query/codegen/SerializerTest.java
Patch:
@@ -38,8 +38,8 @@ public SerializerTest() {
         
         FieldModel field = new FieldModel(type, "field", new TypeModel(){
             @Override
-            public FieldType getFieldType() {
-                return FieldType.STRING;
+            public TypeCategory getTypeCategory() {
+                return TypeCategory.STRING;
             }
             @Override
             public String getName() {

File: querydsl-collections/src/main/java/com/mysema/query/collections/impl/JoinExpressionComparator.java
Patch:
@@ -15,7 +15,7 @@
 
 import com.mysema.query.JoinExpression;
 import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EConstant;
+import com.mysema.query.types.expr.ExprConst;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.Operation;
 import com.mysema.query.types.operation.Ops;
@@ -71,7 +71,7 @@ protected void visitOperation(Operation<?, ?> op) {
             if (expr instanceof Path) {
                 Path<?> path = (Path<?>) expr;
                 involved.add((Expr<?>) path.getRoot());
-            } else if (expr instanceof EConstant) {
+            } else if (expr instanceof ExprConst) {
                 constantInvolved = true;
             } else if (expr instanceof Operation) {
                 visitOperation((Operation<?, ?>) expr);

File: querydsl-collections/src/test/java/com/mysema/query/collections/impl/MathFunctionTest.java
Patch:
@@ -12,7 +12,6 @@
 
 import com.mysema.query.collections.domain.Cat;
 import com.mysema.query.functions.MathFunctions;
-import com.mysema.query.types.expr.EConstant;
 import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.expr.Expr;
 
@@ -27,8 +26,8 @@ public class MathFunctionTest extends AbstractQueryTest {
     @Test
     public void test() {
         Cat c = alias(Cat.class, "c");
-        Expr<Integer> i = EConstant.create(1);
-        Expr<Double> d = EConstant.create(1.0);
+        Expr<Integer> i = ENumber.create(1);
+        Expr<Double> d = ENumber.create(1.0);
         from(c, cats).list( 
                 MathFunctions.acos(d),
                 MathFunctions.asin(d), 

File: querydsl-core/src/main/java/com/mysema/query/serialization/JavaTemplates.java
Patch:
@@ -51,11 +51,13 @@ public JavaTemplates() {
         add(Ops.STRING_CONTAINS, "{0}.contains({1})");
         add(Ops.STARTS_WITH, "{0}.startsWith({1})");
         add(Ops.STARTS_WITH_IC, "{0}.toLowerCase().startsWith({1}.toLowerCase())");        
+                               //{0l}.startsWith({1l}) 
         add(Ops.INDEX_OF, "{0}.indexOf({1})");
         add(Ops.INDEX_OF_2ARGS, "{0}.indexOf({1},{2})");
         add(Ops.EQ_IGNORE_CASE, "{0}.equalsIgnoreCase({1})");
         add(Ops.ENDS_WITH, "{0}.endsWith({1})");
         add(Ops.ENDS_WITH_IC, "{0}.toLowerCase().endsWith({1}.toLowerCase())");
+                             //{0l}.endsWith({1l})
         add(Ops.StringOps.SPLIT, "{0}.split({1})");
         add(Ops.StringOps.LAST_INDEX, "{0}.lastIndexOf({1})");
         add(Ops.StringOps.LAST_INDEX_2ARGS, "{0}.lastIndexOf({1},{2})");

File: querydsl-core/src/main/java/com/mysema/query/types/ToStringVisitor.java
Patch:
@@ -7,8 +7,8 @@
 
 import com.mysema.query.types.Template.Element;
 import com.mysema.query.types.custom.Custom;
+import com.mysema.query.types.expr.Constant;
 import com.mysema.query.types.expr.EArrayConstructor;
-import com.mysema.query.types.expr.EConstant;
 import com.mysema.query.types.expr.EConstructor;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.Operation;
@@ -55,7 +55,7 @@ protected void visit(EArrayConstructor<?> e) {
         toString = builder.toString();
     }
 
-    protected void visit(EConstant<?> e) {
+    protected void visit(Constant<?> e) {
         toString = e.getConstant().toString();
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ECollectionBase.java
Patch:
@@ -31,7 +31,7 @@ public ECollectionBase(Class<? extends Collection<D>> type) {
     
     @Override
     public final EBoolean contains(D child) {
-        return contains(EConstant.create(child));        
+        return contains(ExprConst.create(child));        
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EMapBase.java
Patch:
@@ -41,7 +41,7 @@ public final EBoolean containsKey(Expr<K> key) {
 
     @Override
     public final EBoolean containsKey(K key) {
-        return new OBoolean(Ops.CONTAINS_KEY, this, EConstant.create(key));
+        return new OBoolean(Ops.CONTAINS_KEY, this, ExprConst.create(key));
     }
 
     @Override
@@ -51,7 +51,7 @@ public final EBoolean containsValue(Expr<V> value) {
 
     @Override
     public final EBoolean containsValue(V value) {
-        return new OBoolean(Ops.CONTAINS_VALUE, this, EConstant.create(value));
+        return new OBoolean(Ops.CONTAINS_VALUE, this, ExprConst.create(value));
     }
         
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/PEntity.java
Patch:
@@ -7,7 +7,7 @@
 
 import com.mysema.commons.lang.Assert;
 import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EConstant;
+import com.mysema.query.types.expr.ExprConst;
 import com.mysema.query.types.expr.EEntity;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
@@ -144,7 +144,7 @@ public int hashCode() {
      * @return
      */
     public <B extends D> EBoolean instanceOf(Class<B> type) {
-        return new OBoolean(Ops.INSTANCE_OF, this, EConstant.create(type));
+        return new OBoolean(Ops.INSTANCE_OF, this, ExprConst.create(type));
     }
 
     @Override

File: querydsl-core/src/main/java/com/mysema/query/types/path/PEntityCollection.java
Patch:
@@ -9,7 +9,7 @@
 
 import com.mysema.commons.lang.Assert;
 import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EConstant;
+import com.mysema.query.types.expr.ExprConst;
 import com.mysema.query.types.expr.EEntity;
 import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.expr.Expr;
@@ -62,7 +62,7 @@ public PEntityCollection(Class<D> type, @NotEmpty String entityName, Path<?> par
 
     @Override
     public EBoolean contains(D child) {
-        return new OBoolean(Ops.IN, EConstant.create(child), this);
+        return new OBoolean(Ops.IN, ExprConst.create(child), this);
     }
 
     @Override

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/JDOQLSerializer.java
Patch:
@@ -20,8 +20,8 @@
 import com.mysema.query.serialization.SerializerBase;
 import com.mysema.query.types.Order;
 import com.mysema.query.types.OrderSpecifier;
+import com.mysema.query.types.expr.Constant;
 import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EConstant;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.Operation;
 import com.mysema.query.types.operation.Operator;
@@ -195,13 +195,13 @@ protected void visitOperation(Class<?> type, Operator<?> operator,
         // TODO : these should be handled as serialization patterns
         if (operator.equals(Ops.INSTANCE_OF)) {
             handle(args.get(0)).append(" instanceof ");
-            append(((EConstant<Class<?>>) args.get(1)).getConstant().getName());
+            append(((Constant<Class<?>>) args.get(1)).getConstant().getName());
             
         } else if (operator.equals(Ops.STRING_CAST)) {
             append("(String)").handle(args.get(0));
             
         } else if (operator.equals(Ops.NUMCAST)) {
-            Class<?> clazz = ((EConstant<Class<?>>)args.get(1)).getConstant();
+            Class<?> clazz = ((Constant<Class<?>>)args.get(1)).getConstant();
             if (Number.class.isAssignableFrom(clazz) && ClassUtils.wrapperToPrimitive(clazz) != null){
                 clazz = ClassUtils.wrapperToPrimitive(clazz);
             }

File: querydsl-sql/src/test/java/com/mysema/query/sql/SqlQueryTest.java
Patch:
@@ -29,7 +29,7 @@
 import com.mysema.query.sql.dto.IdName;
 import com.mysema.query.sql.dto.QIdName;
 import com.mysema.query.types.expr.EBoolean;
-import com.mysema.query.types.expr.EConstant;
+import com.mysema.query.types.expr.ExprConst;
 import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.query.ObjectSubQuery;
@@ -330,8 +330,8 @@ public void testWhereExists() throws SQLException {
     @Test
     @ExcludeIn( { "derby" })
     public void testMathFunctions() throws SQLException {
-        Expr<Integer> i = EConstant.create(1);
-        Expr<Double> d = EConstant.create(1.0);
+        Expr<Integer> i = ENumber.create(1);
+        Expr<Double> d = ENumber.create(1.0);
         for (Expr<?> e : Arrays.<Expr<?>> asList(
 //                MathFunctions.abs(i),
                 MathFunctions.acos(d), 

File: querydsl-collections/src/main/java/com/mysema/query/collections/eval/JaninoEvaluator.java
Patch:
@@ -8,6 +8,8 @@
 import java.lang.reflect.InvocationTargetException;
 import java.util.List;
 
+import net.jcip.annotations.Immutable;
+
 import org.codehaus.janino.ExpressionEvaluator;
 
 import com.mysema.commons.lang.Assert;
@@ -19,6 +21,7 @@
  * @author tiwe
  * @version $Id$
  */
+@Immutable
 public class JaninoEvaluator implements Evaluator {
 
     private final ExpressionEvaluator ev;

File: querydsl-collections/src/main/java/com/mysema/query/collections/impl/DefaultIndexCreationTask.java
Patch:
@@ -7,6 +7,8 @@
 
 import java.util.List;
 
+import net.jcip.annotations.Immutable;
+
 import com.mysema.commons.lang.Assert;
 import com.mysema.query.collections.eval.ColQueryTemplates;
 import com.mysema.query.collections.eval.Evaluator;
@@ -24,6 +26,7 @@
  * @author tiwe
  * @version $Id$
  */
+@Immutable
 public class DefaultIndexCreationTask {
 
     private final EBoolean condition;

File: querydsl-collections/src/main/java/com/mysema/query/collections/impl/IndexedPath.java
Patch:
@@ -3,9 +3,12 @@
  */
 package com.mysema.query.collections.impl;
 
+import net.jcip.annotations.Immutable;
+
 import com.mysema.query.collections.eval.Evaluator;
 import com.mysema.query.types.path.Path;
 
+@Immutable
 public class IndexedPath {
     private final Path<?> path;
     private final Evaluator ev;

File: querydsl-collections/src/main/java/com/mysema/query/collections/impl/JoinExpressionComparator.java
Patch:
@@ -32,7 +32,7 @@
  */
 public class JoinExpressionComparator implements Comparator<JoinExpression> {
 
-    private Map<Expr<?>, MutableInt> priorities = new HashMap<Expr<?>, MutableInt>();
+    private final Map<Expr<?>, MutableInt> priorities = new HashMap<Expr<?>, MutableInt>();
 
     private boolean invert = false;
 

File: querydsl-collections/src/main/java/com/mysema/query/collections/impl/SimpleIndexSupport.java
Patch:
@@ -8,6 +8,8 @@
 import java.util.Iterator;
 import java.util.List;
 
+import net.jcip.annotations.Immutable;
+
 import com.mysema.commons.lang.Assert;
 import com.mysema.query.collections.IteratorSource;
 import com.mysema.query.collections.eval.ColQueryTemplates;
@@ -21,6 +23,7 @@
  * @author tiwe
  * @version $Id$
  */
+@Immutable
 public class SimpleIndexSupport implements QueryIndexSupport {
 
     protected final IteratorSource iteratorSource;

File: querydsl-collections/src/test/java/com/mysema/query/collections/domain/SimpleTypes.java
Patch:
@@ -32,4 +32,6 @@ public class SimpleTypes {
     Serializable serializable;
     Object object;
     Class<?> clazz;
+    CustomLiteral literal;
+    CustomComparableLiteral literal2;
 }
\ No newline at end of file

File: querydsl-core/src/main/java/com/mysema/query/codegen/ReflectionTypeModel.java
Patch:
@@ -23,9 +23,9 @@
  * @author tiwe
  *
  */
-public class ReflectionTypeModel extends InspectingTypeModel implements TypeModel{
+public final class ReflectionTypeModel extends InspectingTypeModel implements TypeModel{
     
-    private static Map<List<Type>,TypeModel> cache = new HashMap<List<Type>,TypeModel>();
+    private static final Map<List<Type>,TypeModel> cache = new HashMap<List<Type>,TypeModel>();
     
     public static TypeModel get(Class<?> key){
         return get(key, key);

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLTemplates.java
Patch:
@@ -13,7 +13,7 @@
 import com.mysema.query.types.operation.Ops;
 
 /**
- * SqlOps extended OperationPatterns to provided SQL specific extensions and
+ * SQLTemplates extended OperationPatterns to provided SQL specific extensions and
  * acts as database specific Dialect for Querydsl SQL
  * 
  * @author tiwe

File: querydsl-sql/src/main/java/com/mysema/query/sql/oracle/OracleTemplates.java
Patch:
@@ -17,7 +17,8 @@
  * @version $Id$
  */
 public class OracleTemplates extends SQLTemplates {
-    {
+    
+    public OracleTemplates(){
         // type mappings
         addClass2TypeMappings("number(3,0)", Byte.class);
         addClass2TypeMappings("number(1,0)", Boolean.class);

File: querydsl-sql/src/test/java/com/mysema/query/sql/domain/QEMPLOYEE.java
Patch:
@@ -11,6 +11,7 @@
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
 import com.mysema.query.types.path.PathMetadata;
+import com.mysema.query.util.NotEmpty;
 
 public class QEMPLOYEE extends PEntity<java.lang.Object> {
     // stmt.execute("create table employee(id int, "
@@ -28,7 +29,7 @@ public class QEMPLOYEE extends PEntity<java.lang.Object> {
     public final PNumber<java.lang.Integer> superiorId = _number("superior_id",
             java.lang.Integer.class);
 
-    public QEMPLOYEE(java.lang.String path) {
+    public QEMPLOYEE(@NotEmpty java.lang.String path) {
         super(java.lang.Object.class, "employee2", path);
     }
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/domain/QSURVEY.java
Patch:
@@ -9,13 +9,14 @@
 import com.mysema.query.types.path.PNumber;
 import com.mysema.query.types.path.PString;
 import com.mysema.query.types.path.PathMetadata;
+import com.mysema.query.util.NotEmpty;
 
 public class QSURVEY extends PEntity<java.lang.Object> {
     public final PString name = _string("name");
     public final PNumber<java.lang.Integer> id = _number("id",
             java.lang.Integer.class);
 
-    public QSURVEY(java.lang.String path) {
+    public QSURVEY(@NotEmpty java.lang.String path) {
         super(java.lang.Object.class, "survey", path);
     }
 

File: querydsl-sql/src/test/java/com/mysema/query/sql/domain/QTEST.java
Patch:
@@ -8,11 +8,12 @@
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PString;
 import com.mysema.query.types.path.PathMetadata;
+import com.mysema.query.util.NotEmpty;
 
 public class QTEST extends PEntity<java.lang.Object> {
     public final PString name = _string("name");
 
-    public QTEST(java.lang.String path) {
+    public QTEST(@NotEmpty java.lang.String path) {
         super(java.lang.Object.class, "test", path);
     }
 

File: querydsl-collections/src/test/java/com/mysema/query/collections/domain2/RelationType2.java
Patch:
@@ -1,4 +1,4 @@
-package com.mysema.query.collections.domain;
+package com.mysema.query.collections.domain2;
 
 import java.util.List;
 

File: querydsl-core/src/main/java/com/mysema/query/codegen/Serializer.java
Patch:
@@ -42,7 +42,7 @@ public void serialize(String targetFolder, String namePrefix, Collection<ClassMo
             String packageName = type.getPackageName();
             model.put("package", packageName);
             model.put("type", type);
-            model.put("classSimpleName", type.getSimpleName());
+            model.put("classSimpleName", type.getSimpleName());            
             try {
                 String path = packageName.replace('.', '/') + "/" + namePrefix + type.getSimpleName() + ".java";
                 serialize(model, FileUtils.writerFor(new File(targetFolder, path)));

File: querydsl-core/src/main/java/com/mysema/query/codegen/TypeModel.java
Patch:
@@ -17,12 +17,12 @@ public interface TypeModel {
 
     String getName();
 
-    String getKeyTypeName();
+    TypeModel getKeyType();
+    
+    TypeModel getValueType();
 
     String getPackageName();
 
     String getSimpleName();
 
-    String getValueTypeName();
-
 }
\ No newline at end of file

File: querydsl-core/src/test/java/com/mysema/query/CoverageTest.java
Patch:
@@ -38,6 +38,7 @@ public class CoverageTest {
      * @throws IllegalArgumentException the illegal argument exception
      * @throws IllegalAccessException the illegal access exception
      */
+    @SuppressWarnings("unchecked")
     @Test
     public void test() throws IllegalArgumentException, IllegalAccessException{        
         // make sure all Operators are covered in expression factory methods

File: querydsl-core/src/test/java/com/mysema/query/StandardTestData.java
Patch:
@@ -11,7 +11,6 @@
 import java.util.Collections;
 import java.util.List;
 
-import com.mysema.query.functions.MathFunctions;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.ECollection;
 import com.mysema.query.types.expr.EComparable;

File: querydsl-sql/src/main/java/com/mysema/query/sql/support/MetaDataExporter.java
Patch:
@@ -116,7 +116,7 @@ public void export(DatabaseMetaData md) throws SQLException {
                         _class.getName(),
                         _class.getPackage().getName(),
                         _class.getSimpleName(), null, null);
-                type.addField(new FieldModel(_name, typeModel, _name));
+                type.addField(new FieldModel(type, _name, typeModel, _name));
             }
             columns.close();
             serialize(type);

File: querydsl-collections/src/main/java/com/mysema/query/collections/eval/package-info.java
Patch:
@@ -4,11 +4,10 @@
  * 
  */
 
-@DefaultAnnotation( { Nonnull.class, OverridingMethodsMustInvokeSuper.class })
+@DefaultAnnotation( { Nonnull.class })
 package com.mysema.query.collections.eval;
 
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
 
 import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
 

File: querydsl-collections/src/main/java/com/mysema/query/collections/impl/package-info.java
Patch:
@@ -4,11 +4,10 @@
  * 
  */
 
-@DefaultAnnotation( { Nonnull.class, OverridingMethodsMustInvokeSuper.class })
+@DefaultAnnotation( { Nonnull.class })
 package com.mysema.query.collections.impl;
 
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
 
 import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
 

File: querydsl-collections/src/main/java/com/mysema/query/collections/package-info.java
Patch:
@@ -4,11 +4,10 @@
  * 
  */
 
-@DefaultAnnotation( { Nonnull.class, OverridingMethodsMustInvokeSuper.class })
+@DefaultAnnotation( { Nonnull.class })
 package com.mysema.query.collections;
 
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
 
 import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
 

File: querydsl-core/src/main/java/com/mysema/query/alias/SimpleAliasFactory.java
Patch:
@@ -12,6 +12,7 @@
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.PathMetadata;
 import com.mysema.query.util.FactoryMap;
+import com.mysema.query.util.NotEmpty;
 
 /**
  * SimpleAliasFactory creates CGLIB based alias proxy instances and keeps track
@@ -27,7 +28,7 @@ class SimpleAliasFactory implements AliasFactory {
     // caches top level paths (class/var as key)
     private FactoryMap<PEntity<?>> pathCache = new FactoryMap<PEntity<?>>() {
         @SuppressWarnings("unused")
-        public <A> PEntity<A> create(Class<A> cl, String var) {
+        public <A> PEntity<A> create(Class<A> cl, @NotEmpty String var) {
             return new PEntity<A>(cl, cl.getSimpleName(), PathMetadata.forVariable(var));
         }
     };

File: querydsl-core/src/main/java/com/mysema/query/alias/package-info.java
Patch:
@@ -7,11 +7,10 @@
 /**
  * Alias functionality
  */
-@DefaultAnnotation( { Nonnull.class, OverridingMethodsMustInvokeSuper.class })
+@DefaultAnnotation( { Nonnull.class })
 package com.mysema.query.alias;
 
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
 
 import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
 

File: querydsl-core/src/main/java/com/mysema/query/annotations/package-info.java
Patch:
@@ -7,11 +7,10 @@
 /**
  * Contains annotation for Domain and DTO types
  */
-@DefaultAnnotation( { Nonnull.class, OverridingMethodsMustInvokeSuper.class })
+@DefaultAnnotation( { Nonnull.class })
 package com.mysema.query.annotations;
 
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
 
 import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
 

File: querydsl-core/src/main/java/com/mysema/query/codegen/package-info.java
Patch:
@@ -4,11 +4,10 @@
  * 
  */
 
-@DefaultAnnotation( { Nonnull.class, OverridingMethodsMustInvokeSuper.class })
+@DefaultAnnotation( { Nonnull.class })
 package com.mysema.query.codegen;
 
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
 
 import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
 

File: querydsl-core/src/main/java/com/mysema/query/functions/package-info.java
Patch:
@@ -8,11 +8,10 @@
  * Optional function libraries
  */
 
-@DefaultAnnotation( { Nonnull.class, OverridingMethodsMustInvokeSuper.class })
+@DefaultAnnotation( { Nonnull.class })
 package com.mysema.query.functions;
 
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
 
 import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
 

File: querydsl-core/src/main/java/com/mysema/query/package-info.java
Patch:
@@ -7,11 +7,10 @@
 /**
  * Contains basic Query elements
  */
-@DefaultAnnotation( { Nonnull.class, OverridingMethodsMustInvokeSuper.class })
+@DefaultAnnotation( { Nonnull.class })
 package com.mysema.query;
 
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
 
 import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
 

File: querydsl-core/src/main/java/com/mysema/query/serialization/package-info.java
Patch:
@@ -8,11 +8,10 @@
  * Contains stubs for Serialization of queries 
  */
 
-@DefaultAnnotation( { Nonnull.class, OverridingMethodsMustInvokeSuper.class })
+@DefaultAnnotation( { Nonnull.class })
 package com.mysema.query.serialization;
 
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
 
 import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
 

File: querydsl-core/src/main/java/com/mysema/query/support/package-info.java
Patch:
@@ -4,11 +4,10 @@
  * 
  */
 
-@DefaultAnnotation( { Nonnull.class, OverridingMethodsMustInvokeSuper.class })
+@DefaultAnnotation( { Nonnull.class })
 package com.mysema.query.support;
 
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
 
 import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
 

File: querydsl-core/src/main/java/com/mysema/query/types/custom/package-info.java
Patch:
@@ -8,11 +8,10 @@
  * Custom types are comparable to operations but contain the serialization 
  * templates instead of operator patterns. Custom types are always implementation specific.
  */
-@DefaultAnnotation( { Nonnull.class, OverridingMethodsMustInvokeSuper.class })
+@DefaultAnnotation( { Nonnull.class })
 package com.mysema.query.types.custom;
 
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
 
 import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/package-info.java
Patch:
@@ -7,11 +7,10 @@
 /**
  * Expr encode the base type hierarchy and signatures of Querydsl expressions
  */
-@DefaultAnnotation( { Nonnull.class, OverridingMethodsMustInvokeSuper.class })
+@DefaultAnnotation( { Nonnull.class })
 package com.mysema.query.types.expr;
 
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
 
 import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
 

File: querydsl-core/src/main/java/com/mysema/query/types/operation/package-info.java
Patch:
@@ -7,11 +7,10 @@
 /**
  * Operations represent typed operations with operator and arguments
  */
-@DefaultAnnotation( { Nonnull.class, OverridingMethodsMustInvokeSuper.class })
+@DefaultAnnotation( { Nonnull.class })
 package com.mysema.query.types.operation;
 
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
 
 import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
 

File: querydsl-core/src/main/java/com/mysema/query/types/package-info.java
Patch:
@@ -7,11 +7,10 @@
 /**
  * Contains Querydsl grammar types
  */
-@DefaultAnnotation( { Nonnull.class, OverridingMethodsMustInvokeSuper.class })
+@DefaultAnnotation( { Nonnull.class })
 package com.mysema.query.types;
 
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
 
 import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PArray.java
Patch:
@@ -13,6 +13,7 @@
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.Ops;
+import com.mysema.query.util.NotEmpty;
 
 /**
  * PArray represents an array typed path
@@ -38,7 +39,7 @@ public PArray(Class<D> type, PathMetadata<?> metadata) {
         this.root = metadata.getRoot() != null ? metadata.getRoot() : this;
     }
 
-    public PArray(Class<D> type, String var) {
+    public PArray(Class<D> type, @NotEmpty String var) {
         this(type, PathMetadata.forVariable(var));
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PBoolean.java
Patch:
@@ -8,6 +8,7 @@
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
+import com.mysema.query.util.NotEmpty;
 
 /**
  * PBoolean represents boolean path expressions
@@ -26,7 +27,7 @@ public PBoolean(PathMetadata<?> metadata) {
         this.root = metadata.getRoot() != null ? metadata.getRoot() : this;
     }
 
-    public PBoolean(String var) {
+    public PBoolean(@NotEmpty String var) {
         this(PathMetadata.forVariable(var));
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PBooleanArray.java
Patch:
@@ -7,6 +7,7 @@
 
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.Expr;
+import com.mysema.query.util.NotEmpty;
 
 /**
  * PBooleanArray represents boolean array typed paths
@@ -19,7 +20,7 @@ public PBooleanArray(PathMetadata<?> metadata) {
         super(Boolean.class, metadata);
     }
 
-    public PBooleanArray(String var) {
+    public PBooleanArray(@NotEmpty String var) {
         super(Boolean.class, PathMetadata.forVariable(var));
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PComparable.java
Patch:
@@ -9,6 +9,7 @@
 import com.mysema.query.types.expr.EComparable;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
+import com.mysema.query.util.NotEmpty;
 
 /**
  * PComparable represents Comparable paths
@@ -31,7 +32,7 @@ public PComparable(Class<? extends D> type, PathMetadata<?> metadata) {
         this.root = metadata.getRoot() != null ? metadata.getRoot() : this;
     }
 
-    public PComparable(Class<? extends D> type, String var) {
+    public PComparable(Class<? extends D> type, @NotEmpty String var) {
         this(type, PathMetadata.forVariable(var));
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PComparableArray.java
Patch:
@@ -7,6 +7,7 @@
 
 import com.mysema.query.types.expr.EComparable;
 import com.mysema.query.types.expr.Expr;
+import com.mysema.query.util.NotEmpty;
 
 /**
  * PComparableArray represents comparable array paths
@@ -20,7 +21,7 @@ public PComparableArray(Class<D> type, PathMetadata<?> metadata) {
         super(type, metadata);
     }
 
-    public PComparableArray(Class<D> type, String var) {
+    public PComparableArray(Class<D> type, @NotEmpty String var) {
         super(type, PathMetadata.forVariable(var));
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PComponentCollection.java
Patch:
@@ -11,6 +11,7 @@
 import com.mysema.query.types.expr.ECollectionBase;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
+import com.mysema.query.util.NotEmpty;
 
 /**
  * PComponentCollection represents component collection paths
@@ -34,7 +35,7 @@ public PComponentCollection(Class<D> type, PathMetadata<?> metadata) {
         this.root = metadata.getRoot() != null ? metadata.getRoot() : this;
     }
 
-    public PComponentCollection(Class<D> type, String var) {
+    public PComponentCollection(Class<D> type, @NotEmpty String var) {
         this(type, PathMetadata.forVariable(var));
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PComponentList.java
Patch:
@@ -6,6 +6,7 @@
 package com.mysema.query.types.path;
 
 import com.mysema.query.types.expr.Expr;
+import com.mysema.query.util.NotEmpty;
 
 /**
  * PComponentList represents component list paths
@@ -19,7 +20,7 @@ public PComponentList(Class<D> type, PathMetadata<?> metadata) {
         super(type, metadata);
     }
 
-    public PComponentList(Class<D> type, String var) {
+    public PComponentList(Class<D> type, @NotEmpty String var) {
         super(type, PathMetadata.forVariable(var));
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PComponentMap.java
Patch:
@@ -12,6 +12,7 @@
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
+import com.mysema.query.util.NotEmpty;
 
 /**
  * PComponentMap represents component map paths
@@ -39,7 +40,7 @@ public PComponentMap(Class<K> keyType, Class<V> valueType,
         this.root = metadata.getRoot() != null ? metadata.getRoot() : this;
     }
 
-    public PComponentMap(Class<K> keyType, Class<V> valueType, String var) {
+    public PComponentMap(Class<K> keyType, Class<V> valueType, @NotEmpty String var) {
         this(keyType, valueType, PathMetadata.forVariable(var));
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PDate.java
Patch:
@@ -9,6 +9,7 @@
 import com.mysema.query.types.expr.EDate;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
+import com.mysema.query.util.NotEmpty;
 
 /**
  * @author tiwe
@@ -28,7 +29,7 @@ public PDate(Class<? extends D> type, PathMetadata<?> metadata) {
         this.root = metadata.getRoot() != null ? metadata.getRoot() : this;
     }
 
-    public PDate(Class<? extends D> type, String var) {
+    public PDate(Class<? extends D> type, @NotEmpty String var) {
         this(type, PathMetadata.forVariable(var));
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PDateTime.java
Patch:
@@ -9,6 +9,7 @@
 import com.mysema.query.types.expr.EDateTime;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
+import com.mysema.query.util.NotEmpty;
 
 /**
  * @author tiwe
@@ -28,7 +29,7 @@ public PDateTime(Class<? extends D> type, PathMetadata<?> metadata) {
         this.root = metadata.getRoot() != null ? metadata.getRoot() : this;
     }
 
-    public PDateTime(Class<? extends D> type, String var) {
+    public PDateTime(Class<? extends D> type, @NotEmpty String var) {
         this(type, PathMetadata.forVariable(var));
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PEntityCollection.java
Patch:
@@ -16,6 +16,7 @@
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.Ops;
+import com.mysema.query.util.NotEmpty;
 
 /**
  * PEntityCollection represents an entity collection path
@@ -36,16 +37,15 @@ public class PEntityCollection<D> extends EEntity<java.util.Collection<D>> imple
     private EBoolean notEmpty;
 
     @SuppressWarnings("unchecked")
-    public PEntityCollection(Class<D> type, String entityName,
-            PathMetadata<?> metadata) {
+    public PEntityCollection(Class<D> type, @NotEmpty String entityName, PathMetadata<?> metadata) {
         super((Class)Collection.class);
         this.elementType = Assert.notNull(type,"type is null");
         this.metadata = Assert.notNull(metadata,"metadata is null");
         this.entityName = Assert.notNull(entityName,"entityName is null");
         this.root = metadata.getRoot() != null ? metadata.getRoot() : this;
     }
 
-    public PEntityCollection(Class<D> type, String entityName, String var) {
+    public PEntityCollection(Class<D> type, @NotEmpty String entityName, @NotEmpty String var) {
         this(type, entityName, PathMetadata.forVariable(var));
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PEntityList.java
Patch:
@@ -6,6 +6,7 @@
 package com.mysema.query.types.path;
 
 import com.mysema.query.types.expr.Expr;
+import com.mysema.query.util.NotEmpty;
 
 /**
  * PEntityList represents entity list paths
@@ -15,12 +16,12 @@
  * @param <D> component type
  */
 public class PEntityList<D> extends PEntityCollection<D> implements PList<D> {
-    public PEntityList(Class<D> elementType, String entityName,
+    public PEntityList(Class<D> elementType, @NotEmpty String entityName,
             PathMetadata<?> metadata) {
         super(elementType, entityName, metadata);
     }
 
-    public PEntityList(Class<D> elementType, String entityName, String var) {
+    public PEntityList(Class<D> elementType, @NotEmpty String entityName, @NotEmpty String var) {
         super(elementType, entityName, PathMetadata.forVariable(var));
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PNumber.java
Patch:
@@ -9,6 +9,7 @@
 import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
+import com.mysema.query.util.NotEmpty;
 
 /**
  * PNumber represents numeric paths
@@ -29,7 +30,7 @@ public PNumber(Class<? extends D> type, PathMetadata<?> metadata) {
         this.root = metadata.getRoot() != null ? metadata.getRoot() : this;
     }
 
-    public PNumber(Class<? extends D> type, String var) {
+    public PNumber(Class<? extends D> type, @NotEmpty String var) {
         this(type, PathMetadata.forVariable(var));
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PSimple.java
Patch:
@@ -9,6 +9,7 @@
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
+import com.mysema.query.util.NotEmpty;
 
 /**
  * PSimple represents simple paths
@@ -28,7 +29,7 @@ public PSimple(Class<? extends D> type, PathMetadata<?> metadata) {
         this.root = metadata.getRoot() != null ? metadata.getRoot() : this;
     }
 
-    public PSimple(Class<? extends D> type, String var) {
+    public PSimple(Class<? extends D> type, @NotEmpty String var) {
         this(type, PathMetadata.forVariable(var));
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PString.java
Patch:
@@ -9,6 +9,7 @@
 import com.mysema.query.types.expr.EString;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
+import com.mysema.query.util.NotEmpty;
 
 /**
  * PString represents String typed paths
@@ -24,7 +25,7 @@ public PString(PathMetadata<?> metadata) {
         this.metadata = metadata;
     }
 
-    public PString(String var) {
+    public PString(@NotEmpty String var) {
         this(PathMetadata.forVariable(var));
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PStringArray.java
Patch:
@@ -7,6 +7,7 @@
 
 import com.mysema.query.types.expr.EString;
 import com.mysema.query.types.expr.Expr;
+import com.mysema.query.util.NotEmpty;
 
 /**
  * PStringArray represents String[] typed path
@@ -19,7 +20,7 @@ public PStringArray(PathMetadata<?> metadata) {
         super(String.class, metadata);
     }
 
-    public PStringArray(String var) {
+    public PStringArray(@NotEmpty String var) {
         super(String.class, PathMetadata.forVariable(var));
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PTime.java
Patch:
@@ -9,6 +9,7 @@
 import com.mysema.query.types.expr.ETime;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
+import com.mysema.query.util.NotEmpty;
 
 /**
  * @author tiwe
@@ -28,7 +29,7 @@ public PTime(Class<? extends D> type, PathMetadata<?> metadata) {
         this.root = metadata.getRoot() != null ? metadata.getRoot() : this;
     }
 
-    public PTime(Class<? extends D> type, String var) {
+    public PTime(Class<? extends D> type, @NotEmpty String var) {
         this(type, PathMetadata.forVariable(var));
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/PathMetadata.java
Patch:
@@ -12,6 +12,7 @@
 
 import com.mysema.query.types.expr.EConstant;
 import com.mysema.query.types.expr.Expr;
+import com.mysema.query.util.NotEmpty;
 
 /**
  * PathMetadata provides metadata for Path expressions.
@@ -96,7 +97,7 @@ public static <KT> PathMetadata<KT> forMapAccess(PMap<?, ?> parent, KT key) {
      * @param property
      * @return
      */
-    public static PathMetadata<String> forProperty(Path<?> parent, String property) {
+    public static PathMetadata<String> forProperty(Path<?> parent, @NotEmpty String property) {
         return new PathMetadata<String>(parent, EConstant.create(property), PathType.PROPERTY);
     }
 
@@ -106,7 +107,7 @@ public static PathMetadata<String> forProperty(Path<?> parent, String property)
      * @param variable
      * @return
      */
-    public static PathMetadata<String> forVariable(String variable) {
+    public static PathMetadata<String> forVariable(@NotEmpty String variable) {
         return new PathMetadata<String>(null, EConstant.create(variable), PathType.VARIABLE);
     }
 

File: querydsl-core/src/main/java/com/mysema/query/types/path/package-info.java
Patch:
@@ -7,11 +7,10 @@
 /**
  * Paths represent typed property paths, variables and list-map-array access
  */
-@DefaultAnnotation( { Nonnull.class, OverridingMethodsMustInvokeSuper.class })
+@DefaultAnnotation( { Nonnull.class })
 package com.mysema.query.types.path;
 
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
 
 import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
 

File: querydsl-core/src/main/java/com/mysema/query/types/query/package-info.java
Patch:
@@ -4,11 +4,10 @@
  * 
  */
 
-@DefaultAnnotation( { Nonnull.class, OverridingMethodsMustInvokeSuper.class })
+@DefaultAnnotation( { Nonnull.class })
 package com.mysema.query.types.query;
 
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
 
 import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
 

File: querydsl-core/src/main/java/com/mysema/query/util/package-info.java
Patch:
@@ -3,11 +3,10 @@
  * All rights reserved.
  * 
  */
-@DefaultAnnotation( { Nonnull.class, OverridingMethodsMustInvokeSuper.class })
+@DefaultAnnotation( { Nonnull.class })
 package com.mysema.query.util;
 
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
 
 import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/hibernate/package-info.java
Patch:
@@ -7,11 +7,10 @@
 /**
  * HQL for Hibernate
  */
-@DefaultAnnotation( { Nonnull.class, OverridingMethodsMustInvokeSuper.class })
+@DefaultAnnotation( { Nonnull.class })
 package com.mysema.query.hql.hibernate;
 
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
 
 import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/jpa/package-info.java
Patch:
@@ -7,11 +7,10 @@
 /**
  * HQL Support classes
  */
-@DefaultAnnotation( { Nonnull.class, OverridingMethodsMustInvokeSuper.class })
+@DefaultAnnotation( { Nonnull.class })
 package com.mysema.query.hql.jpa;
 
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
 
 import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/package-info.java
Patch:
@@ -7,11 +7,10 @@
 /**
  * Query implementations for HQL and JPAQL
  */
-@DefaultAnnotation( { Nonnull.class, OverridingMethodsMustInvokeSuper.class })
+@DefaultAnnotation( { Nonnull.class })
 package com.mysema.query.hql;
 
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
 
 import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/support/package-info.java
Patch:
@@ -7,11 +7,10 @@
 /**
  * HQL for JPA
  */
-@DefaultAnnotation( { Nonnull.class, OverridingMethodsMustInvokeSuper.class })
+@DefaultAnnotation( { Nonnull.class })
 package com.mysema.query.hql.support;
 
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
 
 import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
 

File: querydsl-jdoql/src/main/java/com/mysema/query/jdoql/package-info.java
Patch:
@@ -7,11 +7,10 @@
 /**
  * JDOQL support for Querydsl
  */
-@DefaultAnnotation( { Nonnull.class, OverridingMethodsMustInvokeSuper.class })
+@DefaultAnnotation( { Nonnull.class })
 package com.mysema.query.jdoql;
 
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
 
 import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/oracle/package-info.java
Patch:
@@ -7,11 +7,10 @@
 /**
  * Oracle support for Querydsl SQL
  */
-@DefaultAnnotation( { Nonnull.class, OverridingMethodsMustInvokeSuper.class })
+@DefaultAnnotation( { Nonnull.class })
 package com.mysema.query.sql.oracle;
 
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
 
 import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/package-info.java
Patch:
@@ -7,11 +7,10 @@
 /**
  * SQL/JDBC support for Querydsl
  */
-@DefaultAnnotation( { Nonnull.class, OverridingMethodsMustInvokeSuper.class })
+@DefaultAnnotation( { Nonnull.class })
 package com.mysema.query.sql;
 
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
 
 import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/support/package-info.java
Patch:
@@ -7,11 +7,10 @@
 /**
  * General support classes for Querydsl SQL
  */
-@DefaultAnnotation( { Nonnull.class, OverridingMethodsMustInvokeSuper.class })
+@DefaultAnnotation( { Nonnull.class })
 package com.mysema.query.sql.support;
 
 import javax.annotation.Nonnull;
-import javax.annotation.OverridingMethodsMustInvokeSuper;
 
 import edu.umd.cs.findbugs.annotations.DefaultAnnotation;
 

File: querydsl-core/src/main/java/com/mysema/query/support/QueryAdapter.java
Patch:
@@ -89,6 +89,7 @@ public void setQuery(Query<?> query) {
         this.query = query;
     }
 
+    @Override
     public String toString() {
         return query.toString();
     }

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EArrayConstructor.java
Patch:
@@ -13,7 +13,8 @@
  * @param <D> component type
  */
 public class EArrayConstructor<D> extends EConstructor<D[]> {
-    private Class<D> elementType;
+    
+    private final Class<D> elementType;
 
     @SuppressWarnings("unchecked")
     public EArrayConstructor(Class<D> type, Expr<D>... args) {

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EBoolean.java
Patch:
@@ -17,6 +17,7 @@
  * 
  */
 public abstract class EBoolean extends EComparable<Boolean> {
+    
     private EBoolean not;
 
     public EBoolean() {

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EConstructor.java
Patch:
@@ -20,7 +20,9 @@
  * @param <D> Java type
  */
 public class EConstructor<D> extends Expr<D> {
+    
     private final List<Expr<?>> args;
+    
     private java.lang.reflect.Constructor<D> javaConstructor;
 
     public EConstructor(Class<D> type, Expr<?>... args) {

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EEmbeddable.java
Patch:
@@ -13,7 +13,9 @@
  * @param <D> Java type
  */
 public abstract class EEmbeddable<D> extends Expr<D> {
+   
     public EEmbeddable(Class<? extends D> type) {
         super(type);
     }
+    
 }
\ No newline at end of file

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EEntity.java
Patch:
@@ -13,7 +13,9 @@
  * @param <D> Java type
  */
 public abstract class EEntity<D> extends Expr<D> {
+    
     public EEntity(Class<? extends D> type) {
         super(type);
     }
+    
 }
\ No newline at end of file

File: querydsl-hql/src/test/java/com/mysema/query/hql/ParserTest.java
Patch:
@@ -938,7 +938,7 @@ public void parse() throws RecognitionException, TokenStreamException {
                         + input, 0, parser.getParseErrorHandler()
                         .getErrorCount());
             } finally {
-                clear();
+//                clear();
                 System.out.println();
             }
         }

File: querydsl-collections/src/test/java/com/mysema/query/collections/impl/QueryIteratorUtilsTest.java
Patch:
@@ -25,6 +25,7 @@
  */
 public class QueryIteratorUtilsTest extends AbstractQueryTest {
 
+    @SuppressWarnings("unchecked")
     @Test
     public void projectToMap() {
         Evaluator ev = EvaluatorFactory.create(ColQueryPatterns.DEFAULT, Arrays

File: querydsl-core/src/test/java/com/mysema/query/serialization/JavaPatternsTest.java
Patch:
@@ -5,6 +5,8 @@
  */
 package com.mysema.query.serialization;
 
+import static org.junit.Assert.*;
+
 import org.junit.Test;
 
 
@@ -14,7 +16,7 @@ public class JavaPatternsTest {
     public void test(){
         JavaPatterns patterns = new JavaPatterns();
         for (String pattern : patterns.patterns.values()){
-            String.format(pattern, "","","","","");
+            assertNotNull(String.format(pattern, "","","","",""));
         }
     }
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/jpa/AbstractJPAQLQuery.java
Patch:
@@ -105,12 +105,10 @@ public long count() {
     }
 
     public <RT> Iterator<RT> iterate(Expr<RT> projection) {
-        // TODO Auto-generated method stub
         return list(projection).iterator();
     }
 
     public Iterator<Object[]> iterate(Expr<?> first, Expr<?> second, Expr<?>... rest) {
-        // TODO Auto-generated method stub
         return list(first, second, rest).iterator();
     }
 }

File: querydsl-hql/src/test/java/com/mysema/query/hql/FeaturesTest.java
Patch:
@@ -88,7 +88,7 @@ public void testBooleanOpeations() {
     /**
      * The Class MyCustomExpr.
      */
-    public class MyCustomExpr extends CString {
+    public static class MyCustomExpr extends CString {
         private final List<Expr<?>> args;
 
         public MyCustomExpr(Expr<?>... args) {
@@ -291,10 +291,9 @@ public void testBug326650() {
         assertEquals(BigDecimal.class, sum($(new BigDecimal("0"))).getType());
 
         // sum to var
-
-        @SuppressWarnings("unused")
         ENumber<Long> sum = (ENumber) sum($(0)); // via Java level cast
         sum = sum($(0)).longValue();
+        assertNotNull(sum);
 
         // sum comparison
 

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/models/company/DeveloperRC.java
Patch:
@@ -31,15 +31,15 @@ public void setId(Long id) {
      *            The id to set.
      */
     public void setId(BigDecimal id) {
-        this.id = new Long(id.longValue());
+        this.id = Long.valueOf(id.longValue());
     }
 
     /**
      * @param id
      *            The id to set.
      */
     public void setId(BigInteger id) {
-        this.id = new Long(id.longValue());
+        this.id = Long.valueOf(id.longValue());
     }
 
     /**

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/models/company/Employee.java
Patch:
@@ -56,7 +56,7 @@ public String getSalaryCurrency() {
         return this.salaryCurrency;
     }
 
-    public synchronized Manager getManager() {
+    public Manager getManager() {
         return this.manager;
     }
 

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/models/company/Office.java
Patch:
@@ -12,7 +12,7 @@
  * An office in the company.
  */
 @Entity
-public class Office implements Cloneable {
+public class Office {
     private long floor; // PK when app-id
     private String roomName; // PK when app-id
 
@@ -114,6 +114,8 @@ public String asString() {
     }
 
     public static class Id implements Serializable {
+
+        private static final long serialVersionUID = -4032898077139179659L;
         public long floor;
         public String roomName;
 

File: querydsl-core/src/main/java/com/mysema/query/codegen/InspectingTypeModel.java
Patch:
@@ -35,7 +35,7 @@ protected FieldType getFieldType(String fullName){
                 || fullName.equals(java.sql.Timestamp.class.getName())){
             return FieldType.DATETIME;
                         
-        } else if (fullName.equals(java.sql.Time.class)){
+        } else if (fullName.equals(java.sql.Time.class.getName())){
             return FieldType.TIME;
             
         } else if (isComparableSupported(fullName)

File: querydsl-core/src/main/java/com/mysema/query/serialization/Pattern.java
Patch:
@@ -36,7 +36,7 @@ public Pattern text(String text){
     
     public interface Element { }
     
-    public class ArgElement implements Element {     
+    public static class ArgElement implements Element {     
         private final int index;        
         ArgElement (int index){
             this.index = index;
@@ -46,7 +46,7 @@ public int getIndex(){
         }
     }
     
-    public class TextElement implements Element {
+    public static class TextElement implements Element {
         private final String text;
         TextElement(String text) {
             this.text = text;

File: querydsl-core/src/main/java/com/mysema/query/types/operation/OStringArray.java
Patch:
@@ -27,7 +27,7 @@ public OStringArray(Operator<String> op, Expr<?>... args) {
     }
 
     public OStringArray(Operator<String> op, List<Expr<?>> args) {
-        super(null);
+        super(String[].class);
         this.op = op;
         this.args = Collections.unmodifiableList(args);
         validate();

File: querydsl-collections/src/main/java/com/mysema/query/collections/MiniApi.java
Patch:
@@ -9,7 +9,6 @@
 import java.util.List;
 
 import com.mysema.query.alias.GrammarWithAlias;
-import com.mysema.query.types.Grammar;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.SinglePathExtractor;
 import com.mysema.query.types.expr.EBoolean;

File: querydsl-collections/src/main/java/com/mysema/query/collections/SourceSortingSupport.java
Patch:
@@ -8,6 +8,8 @@
 import java.util.List;
 
 import com.mysema.query.JoinExpression;
+import com.mysema.query.collections.support.DefaultSourceSortingSupport;
+import com.mysema.query.collections.support.JoinExpressionComparator;
 import com.mysema.query.types.expr.EBoolean;
 
 /**

File: querydsl-collections/src/main/java/com/mysema/query/collections/support/CustomQueryable.java
Patch:
@@ -12,8 +12,8 @@
 import com.mysema.query.DefaultQueryMetadata;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.collections.ColQueryImpl;
-import com.mysema.query.collections.IteratorSource;
 import com.mysema.query.collections.ColQueryPatterns;
+import com.mysema.query.collections.IteratorSource;
 import com.mysema.query.collections.QueryIndexSupport;
 import com.mysema.query.support.ProjectableAdapter;
 import com.mysema.query.types.OrderSpecifier;

File: querydsl-collections/src/main/java/com/mysema/query/collections/support/DefaultIndexSupport.java
Patch:
@@ -11,8 +11,8 @@
 import java.util.List;
 import java.util.Map;
 
-import com.mysema.query.collections.IteratorSource;
 import com.mysema.query.collections.ColQueryPatterns;
+import com.mysema.query.collections.IteratorSource;
 import com.mysema.query.collections.eval.Evaluator;
 import com.mysema.query.collections.utils.EvaluatorUtils;
 import com.mysema.query.collections.utils.QueryIteratorUtils;

File: querydsl-collections/src/main/java/com/mysema/query/collections/support/JoinExpressionComparator.java
Patch:
@@ -14,6 +14,7 @@
 import org.apache.commons.lang.mutable.MutableInt;
 
 import com.mysema.query.JoinExpression;
+import com.mysema.query.collections.SourceSortingSupport;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EConstant;
 import com.mysema.query.types.expr.Expr;

File: querydsl-collections/src/main/java/com/mysema/query/collections/support/SimpleIndexSupport.java
Patch:
@@ -9,8 +9,8 @@
 import java.util.List;
 
 import com.mysema.commons.lang.Assert;
-import com.mysema.query.collections.IteratorSource;
 import com.mysema.query.collections.ColQueryPatterns;
+import com.mysema.query.collections.IteratorSource;
 import com.mysema.query.collections.QueryIndexSupport;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.Expr;

File: querydsl-collections/src/test/java/com/mysema/query/collections/ColTypesTest.java
Patch:
@@ -9,7 +9,6 @@
 
 import org.junit.Test;
 
-import com.mysema.query.collections.MiniApi;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EComparable;
 import com.mysema.query.types.expr.EString;

File: querydsl-collections/src/test/java/com/mysema/query/collections/DistinctTest.java
Patch:
@@ -5,7 +5,7 @@
  */
 package com.mysema.query.collections;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 
 import java.util.Arrays;
 import java.util.List;

File: querydsl-collections/src/test/java/com/mysema/query/collections/iterators/AbstractIteratorTest.java
Patch:
@@ -5,7 +5,8 @@
  */
 package com.mysema.query.collections.iterators;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 
 import java.util.Arrays;
 import java.util.Iterator;

File: querydsl-collections/src/test/java/com/mysema/query/collections/iterators/FilteringMultiIteratorTest.java
Patch:
@@ -21,7 +21,6 @@
 import com.mysema.query.collections.domain.QCat;
 import com.mysema.query.collections.support.DefaultIndexSupport;
 import com.mysema.query.collections.support.SimpleIteratorSource;
-import com.mysema.query.types.Grammar;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.expr.EString;

File: querydsl-collections/src/test/java/com/mysema/query/collections/support/CustomQueryableTest.java
Patch:
@@ -5,7 +5,7 @@
  */
 package com.mysema.query.collections.support;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 
 import java.util.Arrays;
 import java.util.List;

File: querydsl-core/src/main/java/com/mysema/query/DefaultQueryMetadata.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.List;
 import java.util.Set;
 
-import com.mysema.query.types.CascadingBoolean;
+import com.mysema.query.support.CascadingBoolean;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.Expr;

File: querydsl-core/src/main/java/com/mysema/query/Detachable.java
Patch:
@@ -5,9 +5,9 @@
  */
 package com.mysema.query;
 
-import com.mysema.query.types.ListSubQuery;
-import com.mysema.query.types.ObjectSubQuery;
 import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.query.ListSubQuery;
+import com.mysema.query.types.query.ObjectSubQuery;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/support/CascadingBoolean.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types;
+package com.mysema.query.support;
 
 import com.mysema.query.types.expr.EBoolean;
 

File: querydsl-core/src/main/java/com/mysema/query/support/QueryBaseWithProjectionAndDetach.java
Patch:
@@ -8,9 +8,9 @@
 import com.mysema.query.Detachable;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.Grammar;
-import com.mysema.query.types.ListSubQuery;
-import com.mysema.query.types.ObjectSubQuery;
 import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.query.ListSubQuery;
+import com.mysema.query.types.query.ObjectSubQuery;
 
 /**
  * @author tiwe

File: querydsl-core/src/main/java/com/mysema/query/types/Visitor.java
Patch:
@@ -52,6 +52,7 @@
 import com.mysema.query.types.path.PStringArray;
 import com.mysema.query.types.path.PTime;
 import com.mysema.query.types.path.Path;
+import com.mysema.query.types.query.SubQuery;
 
 /**
  * Visitor provides a dispatching Visitor for Expr instances.
@@ -67,7 +68,8 @@ public abstract class Visitor<T extends Visitor<T>> {
                     Custom.class.getPackage(), 
                     Expr.class.getPackage(),
                     Operation.class.getPackage(), 
-                    Path.class.getPackage()));
+                    Path.class.getPackage(),
+                    SubQuery.class.getPackage()));
 
     private final Map<Class<?>, Method> methodMap = LazyMap.decorate(
             new HashMap<Class<?>, Method>(),

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EBoolean.java
Patch:
@@ -8,6 +8,7 @@
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.Ops;
 
+
 /**
  * EBoolean represents boolean expressions
  * 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ECollectionBase.java
Patch:
@@ -11,6 +11,7 @@
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.Ops;
 
+
 /**
  * @author tiwe
  *

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EComparable.java
Patch:
@@ -5,14 +5,14 @@
  */
 package com.mysema.query.types.expr;
 
-import com.mysema.query.types.Grammar;
 import com.mysema.query.types.Order;
 import com.mysema.query.types.OrderSpecifier;
 import com.mysema.query.types.operation.OBoolean;
 import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.OString;
 import com.mysema.query.types.operation.Ops;
 
+
 /**
  * EComparable represents comparable expressions
  * 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/ENumber.java
Patch:
@@ -9,9 +9,9 @@
 import java.math.BigInteger;
 
 import com.mysema.query.types.operation.OBoolean;
-import com.mysema.query.types.operation.ONumber;
 import com.mysema.query.types.operation.Ops;
 
+
 /**
  * ENumber represents a numeric expression
  * 

File: querydsl-core/src/main/java/com/mysema/query/types/expr/EString.java
Patch:
@@ -11,6 +11,7 @@
 import com.mysema.query.types.operation.OString;
 import com.mysema.query.types.operation.Ops;
 
+
 /**
  * EString represents String expressions
  * 

File: querydsl-core/src/main/java/com/mysema/query/types/query/ListSubQuery.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types;
+package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.expr.ECollectionBase;

File: querydsl-core/src/main/java/com/mysema/query/types/query/ObjectSubQuery.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types;
+package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.types.expr.Expr;

File: querydsl-core/src/main/java/com/mysema/query/types/query/SubQuery.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.types;
+package com.mysema.query.types.query;
 
 import com.mysema.query.QueryMetadata;
 

File: querydsl-core/src/test/java/com/mysema/query/CascadingBooleanTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.Test;
 
 import com.mysema.query.alias.GrammarWithAlias;
-import com.mysema.query.types.CascadingBoolean;
+import com.mysema.query.support.CascadingBoolean;
 import com.mysema.query.types.expr.EBoolean;
 
 

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLGrammar.java
Patch:
@@ -5,8 +5,6 @@
  */
 package com.mysema.query.hql;
 
-import org.hibernate.type.CollectionType;
-
 import com.mysema.query.alias.GrammarWithAlias;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.ECollection;

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLQueryBase.java
Patch:
@@ -9,8 +9,8 @@
 import java.util.Map;
 
 import com.mysema.query.JoinExpression;
+import com.mysema.query.support.CascadingBoolean;
 import com.mysema.query.support.QueryBaseWithProjectionAndDetach;
-import com.mysema.query.types.CascadingBoolean;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EEntity;
 import com.mysema.query.types.expr.Expr;

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLSerializer.java
Patch:
@@ -12,11 +12,8 @@
 import com.mysema.query.JoinExpression;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.serialization.BaseSerializer;
-import com.mysema.query.types.ListSubQuery;
-import com.mysema.query.types.ObjectSubQuery;
 import com.mysema.query.types.Order;
 import com.mysema.query.types.OrderSpecifier;
-import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EConstant;
 import com.mysema.query.types.expr.Expr;
@@ -26,6 +23,9 @@
 import com.mysema.query.types.path.PEntity;
 import com.mysema.query.types.path.Path;
 import com.mysema.query.types.path.PathType;
+import com.mysema.query.types.query.ListSubQuery;
+import com.mysema.query.types.query.ObjectSubQuery;
+import com.mysema.query.types.query.SubQuery;
 
 /**
  * HQLSerializer serializes querydsl expressions into HQL syntax.

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/JDOQLContainerTest.java
Patch:
@@ -7,8 +7,8 @@
 
 import com.mysema.query.jdoql.models.fitness.QGym;
 import com.mysema.query.jdoql.models.fitness.Wardrobe;
-import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.query.SubQuery;
 
 
 /**

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/QuerySerializationTest.java
Patch:
@@ -7,8 +7,8 @@
 import com.mysema.query.jdoql.testdomain.Book;
 import com.mysema.query.jdoql.testdomain.QProduct;
 import com.mysema.query.types.Grammar;
-import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.query.SubQuery;
 
 public class QuerySerializationTest {
     

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSQLQuery.java
Patch:
@@ -21,12 +21,12 @@
 import com.mysema.query.QueryModifiers;
 import com.mysema.query.SearchResults;
 import com.mysema.query.support.QueryBaseWithProjectionAndDetach;
-import com.mysema.query.types.ListSubQuery;
-import com.mysema.query.types.ObjectSubQuery;
 import com.mysema.query.types.OrderSpecifier;
-import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.expr.EConstructor;
 import com.mysema.query.types.expr.Expr;
+import com.mysema.query.types.query.ListSubQuery;
+import com.mysema.query.types.query.ObjectSubQuery;
+import com.mysema.query.types.query.SubQuery;
 
 /**
  * AbstractSqlQuery is the base type for SQL query implementations

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLGrammar.java
Patch:
@@ -6,10 +6,10 @@
 package com.mysema.query.sql;
 
 import com.mysema.query.types.Grammar;
-import com.mysema.query.types.ListSubQuery;
-import com.mysema.query.types.ObjectSubQuery;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.operation.Ops;
+import com.mysema.query.types.query.ListSubQuery;
+import com.mysema.query.types.query.ObjectSubQuery;
 
 /**
  * SqlGrammar provides SQL specific extensions to the general Querydsl Grammar

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLSerializer.java
Patch:
@@ -12,18 +12,18 @@
 import com.mysema.query.JoinExpression;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.serialization.BaseSerializer;
-import com.mysema.query.types.ListSubQuery;
-import com.mysema.query.types.ObjectSubQuery;
 import com.mysema.query.types.Order;
 import com.mysema.query.types.OrderSpecifier;
-import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EConstant;
 import com.mysema.query.types.expr.EConstructor;
 import com.mysema.query.types.expr.Expr;
 import com.mysema.query.types.operation.Operator;
 import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.path.PEntity;
+import com.mysema.query.types.query.ListSubQuery;
+import com.mysema.query.types.query.ObjectSubQuery;
+import com.mysema.query.types.query.SubQuery;
 
 /**
  * SqlSerializer serializes Querydsl queries into SQL

File: querydsl-collections/src/main/java/com/mysema/query/collections/MiniApi.java
Patch:
@@ -44,7 +44,7 @@ public static <A> List<A> select(Iterable<A> from, EBoolean where, OrderSpecifie
     }
 
     public static <A> List<A> reject(Iterable<A> from, EBoolean where, OrderSpecifier<?>... order) {
-        return select(from, Grammar.not(where), order);
+        return select(from, where.not(), order);
     }
 
 }

File: querydsl-collections/src/test/java/com/mysema/query/collections/ColQueryTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.mysema.query.collections.domain.Cat;
 import com.mysema.query.functions.MathFunctions;
-import com.mysema.query.types.Grammar;
 import com.mysema.query.types.expr.ENumber;
 import com.mysema.query.types.expr.Expr;
 
@@ -30,9 +29,9 @@
 public class ColQueryTest extends AbstractQueryTest {
 
     @Test
-    public void isTypeOf() {
+    public void instanceOf() {
         assertEquals(Arrays.asList(c1, c2), query().from(cat, c1, c2).where(
-                Grammar.instanceOf(cat, Cat.class)).list(cat));
+                cat.instanceOf(Cat.class)).list(cat));
     }
 
     @Test

File: querydsl-collections/src/test/java/com/mysema/query/collections/iterators/FilteringMultiIteratorTest.java
Patch:
@@ -115,7 +115,7 @@ public void testMoreComplexCases() {
     public void testCats() {
         for (EBoolean where : Arrays.asList(cat.name.eq(otherCat.name),
                 cat.name.eq("Kitty").and(otherCat.name.eq("Bob")), cat.name.eq(
-                        "Kitty").and(Grammar.not(otherCat.name.eq("Bob"))))) {
+                        "Kitty").and(otherCat.name.ne("Bob")))) {
             it = new FilteringMultiIterator(ops, where);
             it.add(cat);
             exprToIt.put(cat, Arrays.asList(c1, c2));

File: querydsl-core/src/main/java/com/mysema/query/codegen/FieldModel.java
Patch:
@@ -31,7 +31,7 @@ public FieldModel(String name, TypeModel type, String docs){
     }
 
     public int compareTo(FieldModel o) {
-        return name.compareTo(o.name);
+        return name.compareToIgnoreCase(o.name);
     }
 
     public boolean equals(Object o) {

File: querydsl-core/src/main/java/com/mysema/query/serialization/ToStringVisitor.java
Patch:
@@ -33,7 +33,6 @@ public String toString() {
     @Override
     protected void visit(Custom<?> expr) {
         toString = String.format(expr.getPattern(), expr.getArgs());
-
     }
 
     protected void visit(EArrayConstructor<?> e) {

File: querydsl-core/src/main/java/com/mysema/query/types/CascadingBoolean.java
Patch:
@@ -26,7 +26,7 @@ public void clear() {
     }
 
     public CascadingBoolean not(EBoolean right) {
-        return and(Grammar.not(right));
+        return and(right.not());
     }
 
     public CascadingBoolean or(EBoolean right) {

File: querydsl-hql/src/test/java/com/mysema/query/hql/FeaturesTest.java
Patch:
@@ -11,7 +11,6 @@
 import static com.mysema.query.functions.MathFunctions.mult;
 import static com.mysema.query.functions.MathFunctions.sub;
 import static com.mysema.query.hql.HQLGrammar.sum;
-import static com.mysema.query.types.Grammar.not;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
@@ -83,7 +82,7 @@ public void testBooleanOpeations() {
         toString("cust is null or cat is null", cust.isNull().or(cat.isNull()));
         toString("cust is null and cat is null", cust.isNull()
                 .and(cat.isNull()));
-        toString("not (cust is null)", not(cust.isNull()));
+        toString("not (cust is null)", cust.isNull().not());
         cat.name.eq(cust.name.firstName).and(
                 cat.bodyWeight.eq(kitten.bodyWeight));
         cat.name.eq(cust.name.firstName).or(
@@ -181,7 +180,7 @@ public void testGroupingOperationsAndNullChecks() {
         // member of
         // not member of
         kitten.in(cat.kittens);
-        not(kitten.in(cat.kittens));
+        kitten.in(cat.kittens).not();
         kitten.bodyWeight.between(10, 20);
         kitten.bodyWeight.isNull();
         kitten.bodyWeight.isNotNull();

File: querydsl-sql/src/test/java/com/mysema/query/sql/SqlQueryTest.java
Patch:
@@ -9,7 +9,6 @@
 import static com.mysema.query.sql.SQLGrammar.exists;
 import static com.mysema.query.types.Grammar.avg;
 import static com.mysema.query.types.Grammar.count;
-import static com.mysema.query.types.Grammar.not;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.fail;
@@ -37,7 +36,6 @@
 import com.mysema.query.sql.dto.QIdName;
 import com.mysema.query.types.Grammar;
 import com.mysema.query.types.ObjectSubQuery;
-import com.mysema.query.types.SubQuery;
 import com.mysema.query.types.expr.EBoolean;
 import com.mysema.query.types.expr.EComparable;
 import com.mysema.query.types.expr.EConstant;
@@ -334,7 +332,7 @@ public void testQueryWithoutFrom() throws SQLException {
     public void testWhereExists() throws SQLException {
         ObjectSubQuery<Integer> sq1 = q().from(employee).uniqueExpr(Grammar.max(employee.id));
         q().from(employee).where(exists(sq1)).count();
-        q().from(employee).where(not(exists(sq1))).count();
+        q().from(employee).where(exists(sq1).not()).count();
     }
 
     @Test

File: querydsl-core/src/main/java/com/mysema/query/serialization/OperationPatterns.java
Patch:
@@ -85,7 +85,7 @@ public OperationPatterns() {
         add(Ops.EXISTS, "exists(%s)");
 
         add(Ops.NUMCAST, "cast(%s,%s)");
-        add(Ops.STRING_CAST, "toString(%s)");
+        add(Ops.STRING_CAST, "str(%s)");
 
         // string
         add(Ops.CONCAT, "%s + %s", 37);

File: querydsl-collections/src/main/java/com/mysema/query/collections/support/CustomQueryable.java
Patch:
@@ -59,7 +59,7 @@ protected QueryMetadata<Object> getMetadata() {
     }
 
     public SubType from(Expr<?>... o) {
-        innerQuery.getMetadata().addToFrom(o);
+        innerQuery.getMetadata().addFrom(o);
         return _this;
     }
 

File: querydsl-collections/src/main/java/com/mysema/query/collections/JavaPatterns.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.regex.Pattern;
 
 import com.mysema.query.serialization.OperationPatterns;
-import com.mysema.query.types.operation.Operator;
+import com.mysema.query.types.operation.OperatorImpl;
 import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.path.PathMetadata;
 import com.mysema.query.types.path.PathType;
@@ -87,7 +87,7 @@ protected JavaPatterns() {
         // math
         try {
             for (Field f : Ops.OpMath.class.getFields()) {
-                Operator<?> op = (Operator<?>) f.get(null);
+                OperatorImpl<?> op = (OperatorImpl<?>) f.get(null);
                 add(op, "Math." + getPattern(op));
             }
         } catch (Exception e) {

File: querydsl-core/src/main/java/com/mysema/query/serialization/OperationPatterns.java
Patch:
@@ -11,7 +11,6 @@
 import com.mysema.query.types.operation.Operator;
 import com.mysema.query.types.operation.Ops;
 import com.mysema.query.types.operation.Ops.OpNumberAgg;
-import com.mysema.query.types.path.PathMetadata;
 import com.mysema.query.types.path.PathType;
 
 /**

File: querydsl-core/src/test/java/com/mysema/query/types/StringTest.java
Patch:
@@ -21,6 +21,7 @@
 import com.mysema.query.types.expr.EArrayConstructor;
 import com.mysema.query.types.expr.EConstructor;
 import com.mysema.query.types.operation.Operator;
+import com.mysema.query.types.operation.OperatorImpl;
 import com.mysema.query.types.operation.Ops;
 
 /**
@@ -38,14 +39,14 @@ public void testPatternAvailability() throws IllegalArgumentException, IllegalAc
         }};
         Set<Field> missing = new HashSet<Field>();
         for (Field field : Ops.class.getFields()){
-            if (field.getType().equals(Operator.class)){
+            if (field.getType().equals(OperatorImpl.class)){
                 Operator op = (Operator)field.get(null);
                 if (ops.getPattern(op) == null) missing.add(field);    
             }            
         }
         for (Class<?> cl : Ops.class.getClasses()){
             for (Field field : cl.getFields()){
-                if (field.getType().equals(Operator.class)){
+                if (field.getType().equals(OperatorImpl.class)){
                     Operator op = (Operator)field.get(null);
                     if (ops.getPattern(op) == null) missing.add(field);    
                 }                

File: querydsl-jdoql/src/test/java/com/mysema/query/jdoql/JDOQueryTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.Test;
 
 // TODO : FIXME
-public abstract class JDOQueryTest extends AbstractJDOTest{
+public class JDOQueryTest extends AbstractJDOTest{
 
 	@Test
 	public void basicTests() {

File: querydsl-apt/src/main/java/com/mysema/query/apt/APTFactory.java
Patch:
@@ -12,8 +12,8 @@
 import java.util.Collections;
 import java.util.Set;
 
+import com.mysema.query.apt.general.QuerydslProcessor;
 import com.mysema.query.apt.jpa.JpaProcessor;
-import com.mysema.query.apt.querydsl.QuerydslProcessor;
 import com.sun.mirror.apt.AnnotationProcessor;
 import com.sun.mirror.apt.AnnotationProcessorEnvironment;
 import com.sun.mirror.apt.AnnotationProcessorFactory;

File: querydsl-apt/src/main/java/com/mysema/query/apt/general/QuerydslProcessor.java
Patch:
@@ -3,11 +3,9 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.apt.querydsl;
+package com.mysema.query.apt.general;
 
 import com.mysema.query.apt.Constants;
-import com.mysema.query.apt.general.DefaultEntityVisitor;
-import com.mysema.query.apt.general.GeneralProcessor;
 import com.sun.mirror.apt.AnnotationProcessorEnvironment;
 import com.sun.mirror.declaration.MethodDeclaration;
 

File: querydsl-collections/src/main/java/com/mysema/query/collections/ColQuery.java
Patch:
@@ -6,7 +6,6 @@
 package com.mysema.query.collections;
 
 import com.mysema.query.QueryMetadata;
-import com.mysema.query.grammar.JavaOps;
 
 
 /**

File: querydsl-collections/src/main/java/com/mysema/query/collections/IteratorSource.java
Patch:
@@ -7,7 +7,7 @@
 
 import java.util.Iterator;
 
-import com.mysema.query.grammar.types.Expr;
+import com.mysema.query.types.expr.Expr;
 
 /**
  * IteratorSource provides a Expr -> Iterator mapping

File: querydsl-collections/src/main/java/com/mysema/query/collections/QueryIndexSupport.java
Patch:
@@ -6,7 +6,7 @@
 package com.mysema.query.collections;
 
 import com.mysema.query.collections.support.DefaultIndexSupport;
-import com.mysema.query.grammar.types.Expr.EBoolean;
+import com.mysema.query.types.expr.EBoolean;
 
 /**
  * QueryIndexSupport enables the injection of indexed query source lookup into 

File: querydsl-collections/src/main/java/com/mysema/query/collections/SourceSortingSupport.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.List;
 
 import com.mysema.query.JoinExpression;
-import com.mysema.query.grammar.types.Expr.EBoolean;
+import com.mysema.query.types.expr.EBoolean;
 
 /**
  * SourceSortingSupport enables the injection of source sorting functionality 

File: querydsl-collections/src/main/java/com/mysema/query/collections/eval/JaninoEvaluator.java
Patch:
@@ -11,8 +11,8 @@
 import org.codehaus.janino.ExpressionEvaluator;
 
 import com.mysema.commons.lang.Assert;
-import com.mysema.query.grammar.JavaOps;
-import com.mysema.query.grammar.types.Expr;
+import com.mysema.query.collections.JavaOps;
+import com.mysema.query.types.expr.Expr;
 
 /**
  * JaninoEvaluator is a Janino compiler based Evaluator implementation

File: querydsl-collections/src/main/java/com/mysema/query/collections/iterators/FilteringMultiIterator.java
Patch:
@@ -20,14 +20,14 @@
 
 import com.mysema.commons.lang.Assert;
 import com.mysema.query.collections.IteratorSource;
+import com.mysema.query.collections.JavaOps;
 import com.mysema.query.collections.eval.Evaluator;
 import com.mysema.query.collections.eval.FilteredJavaSerializer;
 import com.mysema.query.collections.eval.JaninoEvaluator;
 import com.mysema.query.collections.eval.JavaSerializer;
 import com.mysema.query.collections.utils.QueryIteratorUtils;
-import com.mysema.query.grammar.JavaOps;
-import com.mysema.query.grammar.types.Expr;
-import com.mysema.query.grammar.types.Expr.EBoolean;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.Expr;
 
 /**
  * FilteringMultiIterator extends the MultiIterator to provide a filtered view 

File: querydsl-collections/src/main/java/com/mysema/query/collections/iterators/MultiIterator.java
Patch:
@@ -11,7 +11,7 @@
 import java.util.NoSuchElementException;
 
 import com.mysema.query.collections.IteratorSource;
-import com.mysema.query.grammar.types.Expr;
+import com.mysema.query.types.expr.Expr;
 
 /**
  * MultiIterator provides a cartesian view on the given iterators

File: querydsl-collections/src/main/java/com/mysema/query/collections/support/DefaultSourceSortingSupport.java
Patch:
@@ -10,7 +10,7 @@
 
 import com.mysema.query.JoinExpression;
 import com.mysema.query.collections.SourceSortingSupport;
-import com.mysema.query.grammar.types.Expr.EBoolean;
+import com.mysema.query.types.expr.EBoolean;
 
 /**
  * DefaultSourceSortingSupport provides

File: querydsl-collections/src/main/java/com/mysema/query/collections/support/SimpleIndexSupport.java
Patch:
@@ -10,10 +10,10 @@
 
 import com.mysema.commons.lang.Assert;
 import com.mysema.query.collections.IteratorSource;
+import com.mysema.query.collections.JavaOps;
 import com.mysema.query.collections.QueryIndexSupport;
-import com.mysema.query.grammar.JavaOps;
-import com.mysema.query.grammar.types.Expr;
-import com.mysema.query.grammar.types.Expr.EBoolean;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.Expr;
 
 /**
  * SimpleIndexSupport is a minimal QueryIndexSupport implementation

File: querydsl-collections/src/main/java/com/mysema/query/collections/support/SimpleIteratorSource.java
Patch:
@@ -12,7 +12,7 @@
 import com.mysema.commons.lang.Assert;
 import com.mysema.query.collections.IteratorSource;
 import com.mysema.query.collections.QueryIndexSupport;
-import com.mysema.query.grammar.types.Expr;
+import com.mysema.query.types.expr.Expr;
 
 /**
  * SimpleIteratorSource is the default implementation of the IndexSupport interface

File: querydsl-collections/src/main/java/com/mysema/query/collections/utils/EvaluatorUtils.java
Patch:
@@ -8,10 +8,10 @@
 import java.util.List;
 
 import com.mysema.commons.lang.Assert;
+import com.mysema.query.collections.JavaOps;
 import com.mysema.query.collections.eval.Evaluator;
 import com.mysema.query.collections.eval.JaninoEvaluator;
-import com.mysema.query.grammar.JavaOps;
-import com.mysema.query.grammar.types.Expr;
+import com.mysema.query.types.expr.Expr;
 
 /**
  * EvaluatorUtils provides factory methods for Evaluator creation

File: querydsl-collections/src/main/java/com/mysema/query/collections/utils/QueryIteratorUtils.java
Patch:
@@ -11,10 +11,10 @@
 import org.apache.commons.collections15.Predicate;
 import org.apache.commons.collections15.Transformer;
 
+import com.mysema.query.collections.JavaOps;
 import com.mysema.query.collections.eval.Evaluator;
-import com.mysema.query.grammar.JavaOps;
-import com.mysema.query.grammar.types.Expr;
-import com.mysema.query.grammar.types.Expr.EBoolean;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.Expr;
 
 /**
  * QueryIteratorUtils provides Iterator utilities

File: querydsl-collections/src/test/java/com/mysema/query/collections/DistinctTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import org.junit.Test;
 
-import com.mysema.query.grammar.types.Expr.ENumber;
+import com.mysema.query.types.expr.ENumber;
 
 /**
  * DistinctTest provides

File: querydsl-collections/src/test/java/com/mysema/query/collections/MiniApiTest.java
Patch:
@@ -5,9 +5,9 @@
  */
 package com.mysema.query.collections;
 
+import static com.mysema.query.alias.GrammarWithAlias.$;
 import static com.mysema.query.collections.MiniApi.reject;
 import static com.mysema.query.collections.MiniApi.select;
-import static com.mysema.query.grammar.GrammarWithAlias.$;
 import static org.junit.Assert.assertEquals;
 
 import java.util.Arrays;

File: querydsl-collections/src/test/java/com/mysema/query/collections/PagingTest.java
Patch:
@@ -10,8 +10,8 @@
 
 import com.mysema.query.QueryModifiers;
 import com.mysema.query.SearchResults;
-import com.mysema.query.grammar.GrammarWithAlias;
-import com.mysema.query.grammar.types.Path.PNumber;
+import com.mysema.query.alias.GrammarWithAlias;
+import com.mysema.query.types.path.PNumber;
 
 public class PagingTest extends AbstractQueryTest{
 

File: querydsl-collections/src/test/java/com/mysema/query/collections/QueryPerformanceTest.java
Patch:
@@ -15,8 +15,8 @@
 import com.mysema.query.JoinType;
 import com.mysema.query.collections.Domain.Cat;
 import com.mysema.query.collections.support.JoinExpressionComparator;
-import com.mysema.query.grammar.types.Expr;
-import com.mysema.query.grammar.types.Expr.EBoolean;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.Expr;
 
 /**
  * QueryPerformanceTest provides

File: querydsl-collections/src/test/java/com/mysema/query/collections/QueryValidationTest.java
Patch:
@@ -15,8 +15,7 @@
 
 import com.mysema.query.collections.Domain.Cat;
 import com.mysema.query.collections.eval.JavaSerializer;
-import com.mysema.query.grammar.JavaOps;
-import com.mysema.query.grammar.types.Expr.EBoolean;
+import com.mysema.query.types.expr.EBoolean;
 
 /**
  * QueryValidationTest provides

File: querydsl-collections/src/test/java/com/mysema/query/collections/StringHandlingTest.java
Patch:
@@ -5,7 +5,7 @@
  */
 package com.mysema.query.collections;
 
-import static com.mysema.query.grammar.GrammarWithAlias.$;
+import static com.mysema.query.alias.GrammarWithAlias.$;
 import static org.junit.Assert.assertEquals;
 
 import java.util.Arrays;

File: querydsl-collections/src/test/java/com/mysema/query/collections/eval/FilteredJavaSerializerTest.java
Patch:
@@ -11,10 +11,10 @@
 import org.junit.Assert;
 import org.junit.Test;
 
+import com.mysema.query.collections.JavaOps;
 import com.mysema.query.collections.Domain.QCat;
-import com.mysema.query.grammar.JavaOps;
-import com.mysema.query.grammar.types.Expr;
-import com.mysema.query.grammar.types.Expr.EBoolean;
+import com.mysema.query.types.expr.EBoolean;
+import com.mysema.query.types.expr.Expr;
 
 
 /**

File: querydsl-collections/src/test/java/com/mysema/query/collections/iterators/MultiIteratorTest.java
Patch:
@@ -17,8 +17,8 @@
 
 import com.mysema.query.collections.IteratorSource;
 import com.mysema.query.collections.MiniApi;
-import com.mysema.query.grammar.types.Expr;
-import com.mysema.query.grammar.types.Expr.ENumber;
+import com.mysema.query.types.expr.ENumber;
+import com.mysema.query.types.expr.Expr;
 
 /**
  * MultiIteratorTest provides

File: querydsl-collections/src/test/java/com/mysema/query/collections/support/CustomQueryableTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import com.mysema.query.grammar.types.Path.PString;
+import com.mysema.query.types.path.PString;
 
 
 /**

File: querydsl-collections/src/test/java/com/mysema/query/collections/support/DefaultIndexSupportTest.java
Patch:
@@ -16,8 +16,8 @@
 import org.junit.Test;
 
 import com.mysema.query.collections.AbstractQueryTest;
-import com.mysema.query.grammar.JavaOps;
-import com.mysema.query.grammar.types.Expr;
+import com.mysema.query.collections.JavaOps;
+import com.mysema.query.types.expr.Expr;
 
 
 /**

File: querydsl-collections/src/test/java/com/mysema/query/collections/support/JoinExpressionComparatorTest.java
Patch:
@@ -14,7 +14,7 @@
 import com.mysema.query.JoinExpression;
 import com.mysema.query.JoinType;
 import com.mysema.query.collections.AbstractQueryTest;
-import com.mysema.query.grammar.types.Expr.EBoolean;
+import com.mysema.query.types.expr.EBoolean;
 
 
 /**

File: querydsl-collections/src/test/java/com/mysema/query/collections/utils/QueryIteratorUtilsTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.junit.Test;
 
 import com.mysema.query.collections.AbstractQueryTest;
+import com.mysema.query.collections.JavaOps;
 import com.mysema.query.collections.eval.Evaluator;
-import com.mysema.query.grammar.JavaOps;
 
 
 /**

File: querydsl-hql/src/main/java/com/mysema/query/hql/HQLJoinMeta.java
Patch:
@@ -3,14 +3,14 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.grammar;
+package com.mysema.query.hql;
 
 /**
  * HqlJoinMeta provides join metadata in the form of flags for HQL queries
  *
  * @author tiwe
  * @version $Id$
  */
-public enum HqlJoinMeta {
+public enum HQLJoinMeta {
     FETCH
 }

File: querydsl-hql/src/test/java/com/mysema/query/hql/CustomNamingStrategy.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.util;
+package com.mysema.query.hql;
 
 import org.hibernate.cfg.ImprovedNamingStrategy;
 

File: querydsl-hql/src/test/java/com/mysema/query/hql/Hibernate.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.util;
+package com.mysema.query.hql;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Inherited;

File: querydsl-hql/src/test/java/com/mysema/query/hql/HibernateTestRunner.java
Patch:
@@ -3,7 +3,7 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.util;
+package com.mysema.query.hql;
 
 import java.io.InputStream;
 import java.lang.reflect.Method;
@@ -16,8 +16,6 @@
 import org.junit.internal.runners.JUnit4ClassRunner;
 import org.junit.runner.notification.RunNotifier;
 
-import com.mysema.query.hql.HqlDomain;
-import com.mysema.query.hql.HqlIntegrationTest;
 
 /**
  * HibernateTestRunner provides.

File: querydsl-sql/src/main/java/com/mysema/query/sql/SQLQuery.java
Patch:
@@ -7,17 +7,16 @@
 
 import java.sql.Connection;
 
-import com.mysema.query.grammar.SqlOps;
 
 /**
  * SqlQuery is a JDBC based implementation of the Querydsl Query interface
  *
  * @author tiwe
  * @version $Id$
  */
-public class SqlQuery extends AbstractSqlQuery<SqlQuery>{
+public class SQLQuery extends AbstractSQLQuery<SQLQuery>{
 
-    public SqlQuery(Connection conn, SqlOps ops) {
+    public SQLQuery(Connection conn, SQLOps ops) {
         super(conn, ops);
     }
 

File: querydsl-sql/src/main/java/com/mysema/query/sql/SumOver.java
Patch:
@@ -3,14 +3,14 @@
  * All rights reserved.
  * 
  */
-package com.mysema.query.grammar.types;
+package com.mysema.query.sql;
 
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
-import com.mysema.query.grammar.types.Expr;
-import com.mysema.query.grammar.types.Expr.ENumber;
+import com.mysema.query.types.expr.ENumber;
+import com.mysema.query.types.expr.Expr;
 
 /**
  * SumOver is a fluent type for Oracle specific sum over / partition by / order by constructs

File: querydsl-sql/src/test/java/com/mysema/query/sql/DerbyTest.java
Patch:
@@ -12,7 +12,6 @@
 
 import com.mysema.query.FilteringTestRunner;
 import com.mysema.query.Label;
-import com.mysema.query.grammar.Dialect;
 
 @RunWith(FilteringTestRunner.class)
 @Label("derby")

File: querydsl-sql/src/test/java/com/mysema/query/sql/HsqldbTest.java
Patch:
@@ -16,7 +16,6 @@
 
 import com.mysema.query.Label;
 import com.mysema.query.FilteringTestRunner;
-import com.mysema.query.grammar.Dialect;
 
 /**
  * HsqdlbTest provides

File: querydsl-sql/src/test/java/com/mysema/query/sql/MySqlTest.java
Patch:
@@ -17,7 +17,6 @@
 import com.mysema.query.Label;
 import com.mysema.query.ResourceCheck;
 import com.mysema.query.FilteringTestRunner;
-import com.mysema.query.grammar.Dialect;
 
 /**
  * MySqlTest provides

File: querydsl-sql/src/test/java/com/mysema/query/sql/dto/QIdName.java
Patch:
@@ -5,9 +5,10 @@
  */
 package com.mysema.query.sql.dto;
 
-import com.mysema.query.grammar.types.Expr;
+import com.mysema.query.types.expr.EConstructor;
+import com.mysema.query.types.expr.Expr;
 
-public class QIdName extends Expr.EConstructor<IdName>{
+public class QIdName extends EConstructor<IdName>{
     public QIdName(Expr<java.lang.Integer> id, Expr<java.lang.String> name){
         super(IdName.class,id,name);
     }

File: querydsl-apt/src/main/java/com/mysema/query/apt/general/TypeFactory.java
Patch:
@@ -25,7 +25,7 @@ public static Type createType(Class<?> clazz) {
             Field field = new Field(
                     FieldHelper.javaSafe(f.getName()), // name 
                     FieldHelper.realName(f.getName()), // realName
-                    null,  // keyTypeName
+                    typeHelper.getKeyTypeName(),
                     typeHelper.getPackageName(),
                     typeHelper.getFullName(),
                     typeHelper.getSimpleName(),

File: querydsl-collections/src/main/java/com/mysema/query/collections/iterators/FilteringMultiIterator.java
Patch:
@@ -81,7 +81,7 @@ public Object evaluate(Object[] origArgs) throws InvocationTargetException{
         logger.info("Filtering iterator for source");
         ExpressionEvaluator ev = serializer.createExpressionEvaluator(sources, boolean.class);
         if (ev != null){
-            return new JaninoEvaluator(ev);    
+            return new JaninoEvaluator(ev, sources, where);    
         }else{
             return null;
         }

File: querydsl-collections/src/test/java/com/mysema/query/collections/AliasTest.java
Patch:
@@ -151,7 +151,7 @@ public void testAlias3(){
             from(cat,cats).where(cat.mate.alive).list(cat);
             fail("expected RuntimeException");
         }catch(RuntimeException e){
-            assertEquals("null path in expression", e.getMessage());
+            assertEquals("null in cat.mate.alive", e.getMessage());
         }
         
         // 12

File: querydsl-core/src/main/java/com/mysema/query/SimplePathFactory.java
Patch:
@@ -40,6 +40,7 @@ public PBooleanArray transform(Object arg) {
     });
     
     private final Map<Object,PComparableArray<?>> caToPath = new PathFactory<Object,PComparableArray<?>>(new Transformer<Object,PComparableArray<?>>(){
+        @SuppressWarnings("unchecked")
         public PComparableArray<?> transform(Object arg) {
             return new PComparableArray(((List)arg).get(0).getClass(), md());
         }    

File: querydsl-core/src/main/java/com/mysema/query/grammar/types/Expr.java
Patch:
@@ -89,6 +89,8 @@ public final EBoolean not(){
         public final EBoolean or(EBoolean right) {return Grammar.or(this, right);}
     }        
     
+    // <D extends Comparable> is used instead of <D extends Comparable<? super D> 
+    // to support pre-JDK1.5 types such as Joda time    
     @SuppressWarnings("unchecked")
     public static abstract class EComparable<D extends Comparable> extends ESimple<D>{
         private OrderSpecifier<D> asc;

File: querydsl-core/src/main/java/com/mysema/query/PathFactory.java
Patch:
@@ -26,9 +26,9 @@ public interface PathFactory {
 
     PBooleanArray createBooleanArray(Boolean[] args);
     
-    <D extends Number & Comparable<? super D>> PNumber<D> createNumber(D arg);
+    <D extends Number & Comparable<?>> PNumber<D> createNumber(D arg);
 
-    <D extends Comparable<? super D>> PComparable<D> createComparable(D arg);
+    <D extends Comparable<?>> PComparable<D> createComparable(D arg);
 
     <D> PEntity<D> createEntity(D arg);
     
@@ -38,7 +38,7 @@ public interface PathFactory {
     
     <D> PEntityCollection<D> createEntityCollection(Collection<D> arg);
 
-    <D extends Comparable<? super D>> PComparableArray<D> createComparableArray(D[] args);
+    <D extends Comparable<?>> PComparableArray<D> createComparableArray(D[] args);
 
     PString createString(String arg);
 

File: querydsl-core/src/main/java/com/mysema/query/SimplePathFactory.java
Patch:
@@ -135,12 +135,12 @@ public <D> PEntityCollection<D> createEntityCollection(Collection<D> arg) {
     }
     
     @SuppressWarnings("unchecked")
-    public <D extends Comparable<? super D>> PComparable<D> createComparable(D arg){
+    public <D extends Comparable<?>> PComparable<D> createComparable(D arg){
         return (PComparable<D>) comToPath.get(arg);
     }
     
     @SuppressWarnings("unchecked")
-    public <D extends Number & Comparable<? super D>> PNumber<D> createNumber(D arg) {
+    public <D extends Number & Comparable<?>> PNumber<D> createNumber(D arg) {
         return (PNumber<D>) numToPath.get(arg);
     }
     
@@ -150,7 +150,7 @@ public <D> PEntity<D> createEntity(D arg){
     }
  
     @SuppressWarnings("unchecked")
-    public <D extends Comparable<? super D>> PComparableArray<D> createComparableArray(D[] args){
+    public <D extends Comparable<?>> PComparableArray<D> createComparableArray(D[] args){
         return (PComparableArray<D>) caToPath.get(Arrays.asList(args));
     }
 

File: querydsl-core/src/main/java/com/mysema/query/alias/AliasAwarePathFactory.java
Patch:
@@ -54,12 +54,12 @@ public <D> PEntityCollection<D> createEntityCollection(Collection<D> arg) {
         return rv != null ? rv : super.createEntityCollection(arg);
     }
     
-    public <D extends Comparable<? super D>> PComparable<D> createComparable(D arg){
+    public <D extends Comparable<?>> PComparable<D> createComparable(D arg){
         PComparable<D> rv = aliasFactory.<PComparable<D>>getCurrentAndReset();
         return rv != null ? rv : super.createComparable(arg);
     }
     
-    public <D extends Number & Comparable<? super D>> PNumber<D> createNumber(D arg){
+    public <D extends Number & Comparable<?>> PNumber<D> createNumber(D arg){
         PNumber<D> rv = aliasFactory.<PNumber<D>>getCurrentAndReset();
         return rv != null ? rv : super.createNumber(arg);
     }
@@ -76,7 +76,7 @@ public <D> PEntity<D> createEntity(D arg){
         }                 
     }
     
-    public <D extends Comparable<? super D>> PComparableArray<D> createComparableArray(D[] args){
+    public <D extends Comparable<?>> PComparableArray<D> createComparableArray(D[] args){
         PComparableArray<D> rv = aliasFactory.<PComparableArray<D>>getCurrentAndReset();
         return rv != null ? rv : super.createComparableArray(args);
     }

File: querydsl-core/src/main/java/com/mysema/query/grammar/GrammarWithAlias.java
Patch:
@@ -49,7 +49,7 @@ public static void resetAlias(){
         return pathFactory.createBoolean(arg);
     }
     
-    public static <D extends Comparable<? super D>> PComparable<D> $(D arg){
+    public static <D extends Comparable<?>> PComparable<D> $(D arg){
         return pathFactory.createComparable(arg);
     }
     
@@ -93,7 +93,7 @@ public static void resetAlias(){
         return pathFactory.createBooleanArray(args);
     }
     
-    public static <D extends Comparable<? super D>> PComparableArray<D> $(D[] args){
+    public static <D extends Comparable<?>> PComparableArray<D> $(D[] args){
         return pathFactory.createComparableArray(args);
     }
     

File: querydsl-core/src/main/java/com/mysema/query/grammar/types/ExprFactory.java
Patch:
@@ -21,11 +21,11 @@ public interface ExprFactory {
     
     EBoolean createBoolean(Op<Boolean> operator, Expr<?>... args);
     
-    <OpType, RT extends Comparable<? super RT>> EComparable<RT> createComparable(Class<RT> type, Op<OpType> operator, Expr<?>... args);
+    <OpType, RT extends Comparable<?>> EComparable<RT> createComparable(Class<RT> type, Op<OpType> operator, Expr<?>... args);
     
     <A> Expr<A> createConstant(A obj);
 
-    <OpType extends Number,D extends Number & Comparable<? super D>> ENumber<D> createNumber(Class<? extends D> type, Op<OpType> operator, Expr<?>... args);
+    <OpType extends Number,D extends Number & Comparable<?>> ENumber<D> createNumber(Class<? extends D> type, Op<OpType> operator, Expr<?>... args);
     
     EString createString(Op<String> operator, Expr<?>... args);
     

File: querydsl-core/src/main/java/com/mysema/query/grammar/types/Operation.java
Patch:
@@ -48,7 +48,7 @@ public OBoolean(Op<Boolean> op, List<Expr<?>> args){
         public Op<Boolean> getOperator() {return op;}  
     }    
 
-    public static class OComparable<OpType,D extends Comparable<? super D>> extends EComparable<D> implements Operation<OpType,D> {
+    public static class OComparable<OpType,D extends Comparable<?>> extends EComparable<D> implements Operation<OpType,D> {
         private final List<Expr<?>> args;
         private final Op<OpType> op;
         public OComparable(Class<D> type, Op<OpType> op, Expr<?>... args){
@@ -65,7 +65,7 @@ public OComparable(Class<D> type, Op<OpType> op, List<Expr<?>> args){
         public Op<OpType> getOperator() {return op;}
     }
 
-    public static class ONumber<OpType extends Number, D extends Number & Comparable<? super D>> extends ENumber<D> implements Operation<OpType,D>{
+    public static class ONumber<OpType extends Number, D extends Number & Comparable<?>> extends ENumber<D> implements Operation<OpType,D>{
         private final List<Expr<?>> args;
         private final Op<OpType> op;
         public ONumber(Class<? extends D> type, Op<OpType> op, Expr<?>... args){

File: querydsl-core/src/main/java/com/mysema/query/grammar/types/SimpleExprFactory.java
Patch:
@@ -30,7 +30,7 @@ public EBoolean createBoolean(Op<Boolean> operator, Expr<?>... args) {
         return new OBoolean(Assert.notNull(operator), Assert.notNull(args));
     }
     
-    public <OpType, RT extends Comparable<? super RT>> EComparable<RT> createComparable(Class<RT> type, Op<OpType> operator, Expr<?>... args) {
+    public <OpType, RT extends Comparable<?>> EComparable<RT> createComparable(Class<RT> type, Op<OpType> operator, Expr<?>... args) {
         return new OComparable<OpType,RT>(type, Assert.notNull(operator), Assert.notNull(args));
     }
     
@@ -40,7 +40,7 @@ public <A> Expr<A> createConstant(A obj) {
         return new EConstant<A>(Assert.notNull(obj));
     }
 
-    public <OpType extends Number,D extends Number & Comparable<? super D>> ENumber<D> createNumber(Class<? extends D> type, Op<OpType> operator, Expr<?>... args) {
+    public <OpType extends Number,D extends Number & Comparable<?>> ENumber<D> createNumber(Class<? extends D> type, Op<OpType> operator, Expr<?>... args) {
         return new ONumber<OpType,D>(type, Assert.notNull(operator), Assert.notNull(args));
     }
     

File: querydsl-apt/src/main/java/com/mysema/query/apt/general/DefaultEntityVisitor.java
Patch:
@@ -11,6 +11,7 @@
 import org.apache.commons.lang.StringUtils;
 
 import com.mysema.query.apt.model.Field;
+import com.mysema.query.apt.model.FieldType;
 import com.mysema.query.apt.model.Type;
 import com.sun.mirror.declaration.ClassDeclaration;
 import com.sun.mirror.declaration.FieldDeclaration;
@@ -37,7 +38,7 @@ private void addField(String originalName, TypeHelper typeInfo) {
         String typeName = typeInfo.getFullName();
         String typePackage = typeInfo.getPackageName();
         String simpleTypeName = typeInfo.getSimpleName();
-        Field.Type fieldType = typeInfo.getFieldType();   
+        FieldType fieldType = typeInfo.getFieldType();   
         last.addField(new Field(name, realName, keyTypeName, typePackage, 
                 typeName, simpleTypeName, fieldType));
     }

File: querydsl-apt/src/main/java/com/mysema/query/apt/model/Parameter.java
Patch:
@@ -7,7 +7,7 @@
 
 
 /**
- * Parameter represents a parameter 
+ * Parameter represents a parameter in a Constructor
  *  
  * @author tiwe
  * @version $Id$

File: querydsl-apt/src/test/java/com/mysema/query/apt/general/GeneralProcessorTest.java
Patch:
@@ -15,6 +15,7 @@
 
 import com.mysema.query.apt.model.Constructor;
 import com.mysema.query.apt.model.Field;
+import com.mysema.query.apt.model.FieldType;
 import com.mysema.query.apt.model.Parameter;
 import com.mysema.query.apt.model.Type;
 
@@ -37,8 +38,7 @@ public GeneralProcessorTest() {
                 "com.mysema.query",
                 "com.mysema.query.DomainClass", "DomainClass");
         
-        Field field = new Field("field", "field", null, "java.lang", "java.lang.String",
-                "String", Field.Type.STRING);
+        Field field = new Field("field", "field", null, "java.lang", "java.lang.String", "String", FieldType.STRING);
         type.addField(field);
         Parameter param = new Parameter("name", "java.lang.String");
         type.addConstructor(new Constructor(Collections.singleton(param)));

File: querydsl-apt/src/main/java/com/mysema/query/apt/Constants.java
Patch:
@@ -6,7 +6,7 @@
 package com.mysema.query.apt;
 
 /**
- * Constants provides
+ * Constants provides constants for use in Querydsl APT
  *
  * @author tiwe
  * @version $Id$

File: querydsl-apt/src/main/java/com/mysema/query/apt/FreeMarkerSerializer.java
Patch:
@@ -14,7 +14,7 @@
 import freemarker.template.TemplateException;
 
 /**
- * Serializer is the main interface to be implemented for code generating serializers.
+ * FreeMarkerSerializer provides FreeMarker based serialization of querydsl types to Java sources
  * 
  * @author tiwe
  * @version $Id$

File: querydsl-apt/src/main/java/com/mysema/query/apt/general/DefaultEntityVisitor.java
Patch:
@@ -20,7 +20,7 @@
 import com.sun.mirror.util.SimpleDeclarationVisitor;
 
 /**
- * EntityVisitor is a visitor for entity and embeddable types.
+ * DefaultEntityVisitor is a visitor for entity and embeddable types.
  * 
  * @author tiwe
  * @version $Id$

File: querydsl-apt/src/main/java/com/mysema/query/apt/general/FieldHelper.java
Patch:
@@ -6,7 +6,7 @@
 package com.mysema.query.apt.general;
 
 /**
- * FieldHelper provides
+ * FieldHelper provides convenience methods for field name escaping
  *
  * @author tiwe
  * @version $Id$

File: querydsl-apt/src/main/java/com/mysema/query/apt/general/TypeHelper.java
Patch:
@@ -13,7 +13,7 @@
 import com.sun.mirror.util.SimpleTypeVisitor;
 
 /**
- * TypeInfo represents a single type
+ * TypeInfo is a helper type for determing types of fields and methods
  * 
  * @author tiwe
  * @version $Id$

File: querydsl-apt/src/main/java/com/mysema/query/apt/jpa/JpaProcessor.java
Patch:
@@ -20,7 +20,7 @@
 import com.sun.mirror.declaration.MethodDeclaration;
 
 /**
- * JpaProcessor provides
+ * JpaProcessor provides JPA annotation handling support
  *
  * @author tiwe
  * @version $Id$

File: querydsl-apt/src/main/java/com/mysema/query/apt/model/Constructor.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.Collection;
 
 /**
- * ConstructorDecl represents a constructor for a DTO query type.
+ * Constructor represents a constructor for a DTO query type.
  * 
  * @author tiwe
  * @version $Id$

File: querydsl-apt/src/main/java/com/mysema/query/apt/model/Field.java
Patch:
@@ -7,7 +7,7 @@
 
 
 /**
- * FieldDecl represents a field / property in a query domain type.
+ * Field represents a field / property in a query domain type.
  * 
  * @author tiwe
  * @version $Id$

File: querydsl-apt/src/main/java/com/mysema/query/apt/model/Parameter.java
Patch:
@@ -7,7 +7,7 @@
 
 
 /**
- * ParameterDecl represents a parameter 
+ * Parameter represents a parameter 
  *  
  * @author tiwe
  * @version $Id$

File: querydsl-apt/src/main/java/com/mysema/query/apt/model/Type.java
Patch:
@@ -11,7 +11,7 @@
 import java.util.TreeSet;
 
 /**
- * TypeDecl represents a query domain type.
+ * Type represents a query domain type.
  * 
  * @author tiwe
  * @version $Id$

File: querydsl-apt/src/main/java/com/mysema/query/apt/querydsl/QuerydslProcessor.java
Patch:
@@ -12,7 +12,7 @@
 import com.sun.mirror.declaration.MethodDeclaration;
 
 /**
- * QureydslProcessor provides
+ * QureydslProcessor provides Querydsl annotation handling support
  *
  * @author tiwe
  * @version $Id$

File: querydsl-core/src/main/java/com/mysema/query/grammar/types/CountExpression.java
Patch:
@@ -5,7 +5,7 @@
  */
 package com.mysema.query.grammar.types;
 
-import com.mysema.query.grammar.types.Expr.EComparable;
+import com.mysema.query.grammar.types.Expr.ENumber;
 
 /**
  * CountExpression represents a count expression
@@ -14,7 +14,7 @@
  * @version $Id$
  *
  */
-public class CountExpression extends EComparable<Long> {
+public class CountExpression extends ENumber<Long> {
     private final Expr<?> target;
 
     public CountExpression(Expr<?> expr) {

File: querydsl-collections/src/main/java/com/mysema/query/collections/support/CustomQueryable.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.List;
 import java.util.Map;
 
-import com.mysema.query.DefaultMetadata;
+import com.mysema.query.DefaultQueryMetadata;
 import com.mysema.query.ProjectableAdapter;
 import com.mysema.query.QueryMetadata;
 import com.mysema.query.collections.ColQuery;
@@ -33,7 +33,7 @@ public class CustomQueryable<SubType extends CustomQueryable<SubType>> extends P
     private final SubType _this = (SubType)this;
     
     public CustomQueryable(IteratorSource iteratorSource){
-        this(iteratorSource, new DefaultMetadata<Object>());
+        this(iteratorSource, new DefaultQueryMetadata<Object>());
     }
     
     public CustomQueryable(final IteratorSource iteratorSource, QueryMetadata<Object> metadata){

File: querydsl-core/src/main/java/com/mysema/query/DefaultQueryMetadata.java
Patch:
@@ -17,7 +17,7 @@
  * @author tiwe
  * @version $Id$
  */
-public class DefaultMetadata<JoinMeta> implements QueryMetadata<JoinMeta>{
+public class DefaultQueryMetadata<JoinMeta> implements QueryMetadata<JoinMeta>{
 
     private final Set<Expr<?>> exprInJoins = new HashSet<Expr<?>>();
     

File: querydsl-core/src/main/java/com/mysema/query/QueryBase.java
Patch:
@@ -24,7 +24,7 @@ public class QueryBase<JoinMeta,SubType extends QueryBase<JoinMeta,SubType>> imp
     protected String toString;
 
     public QueryBase() {
-        this.metadata = new DefaultMetadata<JoinMeta>();
+        this.metadata = new DefaultQueryMetadata<JoinMeta>();
     }
     
     public QueryBase(QueryMetadata<JoinMeta> metadata) {
@@ -37,7 +37,7 @@ protected SubType addToProjection(Expr<?>... o) {
     }
     
     protected void clear(){
-        metadata = new DefaultMetadata<JoinMeta>();
+        metadata = new DefaultQueryMetadata<JoinMeta>();
     }
     
     public SubType from(Expr<?>... o) {        

File: querydsl-collections/src/main/java/com/mysema/query/collections/support/MultiComparator.java
Patch:
@@ -28,7 +28,7 @@ public class MultiComparator implements Comparator<Object[]> {
     
     public MultiComparator(Evaluator ev, boolean[] directions) {
         this.ev = ev;
-        this.asc = directions;
+        this.asc = directions.clone();
     }
 
     public int compare(Object[] o1, Object[] o2) {

File: querydsl-collections/src/test/java/com/mysema/query/collections/Domain.java
Patch:
@@ -10,7 +10,6 @@
 
 import java.util.Arrays;
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 

File: querydsl-sql/src/main/java/com/mysema/query/grammar/SqlSerializer.java
Patch:
@@ -59,7 +59,7 @@ public void serialize(
                 if (selectExpr instanceof Expr.EConstructor){
                     // transforms constructor arguments into individual select
                     // expressions
-                    sqlSelect.addAll(Arrays.<Expr<?>>asList(((Expr.EConstructor<?>)selectExpr).getArgs()));
+                    sqlSelect.addAll(((Expr.EConstructor<?>)selectExpr).getArgs());
                 }else{
                     sqlSelect.add(selectExpr);
                 }

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSqlQuery.java
Patch:
@@ -48,7 +48,7 @@ public class AbstractSqlQuery<SubType extends AbstractSqlQuery<SubType>> extends
     
     private boolean forCountRow = false;
     
-    private SubQuery<SqlJoinMeta, ?>[] sq;
+    private SubQuery<SqlJoinMeta,?>[] sq;
     
     @SuppressWarnings("unchecked")
     private SubType _this = (SubType)this;
@@ -139,8 +139,8 @@ private <RT> List<RT> listSingle(Expr<RT> expr) throws SQLException{
                 while (rs.next()){                    
                     try {
                         List<Object> args = new ArrayList<Object>();
-                        for (int i=0; i < c.getArgs().length; i++){                        
-                            args.add(get(rs,i+1,c.getArgs()[i].getType()));
+                        for (int i=0; i < c.getArgs().size(); i++){                        
+                            args.add(get(rs,i+1,c.getArgs().get(i).getType()));
                         }
                         rv.add(cc.newInstance(args.toArray()));
                     } catch (Exception e) {

File: querydsl-core/src/main/java/com/mysema/query/grammar/types/Visitor.java
Patch:
@@ -75,6 +75,8 @@ public final T handle(Expr<?> expr) {
 
     protected abstract void visit(Custom.CComparable<?> expr);
 
+    protected abstract void visit(Custom.CSimple<?> expr);
+    
     protected abstract void visit(Custom.CString expr);
     
     protected abstract void visit(Custom<?> expr);

File: querydsl-collections/src/main/java/com/mysema/query/collections/AbstractColQuery.java
Patch:
@@ -361,7 +361,7 @@ protected Iterator<?> handleFromWhereMultiSource(List<Expr<?>> sources) throws E
                 // TODO : handle deeper OR operations as well
                 Operation<?,?> op = (Operation<?,?>)condition;
                 IteratorChain<Object[]> chain = new IteratorChain<Object[]>();
-                EBoolean e1 = (EBoolean)op.getArgs()[0], e2 = (EBoolean)op.getArgs()[1];
+                EBoolean e1 = (EBoolean)op.getArgs().get(0), e2 = (EBoolean)op.getArgs().get(1);
                 chain.addIterator(createMultiIterator(sources, e1));
                 chain.addIterator(createMultiIterator(sources, e2.and(e1.not())));
                 return chain;
@@ -380,7 +380,7 @@ protected Iterator<?> handleFromWhereSingleSource(List<Expr<?>> sources) throws
             if (sequentialUnion && condition instanceof Operation && ((Operation<?,?>)condition).getOperator() == Ops.OR){
                 Operation<?,?> op = (Operation<?,?>)condition;
                 IteratorChain<Object[]> chain = new IteratorChain<Object[]>();
-                EBoolean e1 = (EBoolean)op.getArgs()[0], e2 = (EBoolean)op.getArgs()[1];
+                EBoolean e1 = (EBoolean)op.getArgs().get(0), e2 = (EBoolean)op.getArgs().get(1);
                 Iterator<?> it1 = indexSupport.getChildFor(e1).getIterator(join.getTarget());
                 chain.addIterator(multiArgFilter(ops, toArrayIterator(it1), sources, e1));
                 Iterator<?> it2 = indexSupport.getChildFor(e2.and(e1.not())).getIterator(join.getTarget());

File: querydsl-collections/src/main/java/com/mysema/query/collections/eval/FilteredJavaSerializer.java
Patch:
@@ -66,7 +66,7 @@ protected String normalize(String expr) {
     }
         
     @Override
-    protected void visitOperation(Class<?> type, Op<?> operator, Expr<?>... args) {
+    protected void visitOperation(Class<?> type, Op<?> operator, List<Expr<?>> args) {
         if (!skipPath){
             boolean unknownPaths = false;
             boolean knownPaths = false;

File: querydsl-collections/src/main/java/com/mysema/query/collections/support/DefaultIndexCreationTask.java
Patch:
@@ -94,8 +94,8 @@ public void run(){
 
     public void visitOperation(Operation<?,?> op) {
         if (op.getOperator() == Ops.EQ_OBJECT  || op.getOperator() == Ops.EQ_PRIMITIVE){
-            Expr<?> e1 = op.getArgs()[0];
-            Expr<?> e2 = op.getArgs()[1];
+            Expr<?> e1 = op.getArgs().get(0);
+            Expr<?> e2 = op.getArgs().get(1);
             if (e1 instanceof Path && e2 instanceof Path){
                 indexPathEqPath(e1, e2);
                 

File: querydsl-sql/src/main/java/com/mysema/query/grammar/SqlSerializer.java
Patch:
@@ -191,11 +191,11 @@ private void visitCast(Op<?> operator, Expr<?> source, Class<?> targetType) {
     }
     
     @Override
-    protected void visitOperation(Class<?> type, Op<?> operator, Expr<?>... args) {
+    protected void visitOperation(Class<?> type, Op<?> operator, List<Expr<?>> args) {
         if (operator.equals(Ops.STRING_CAST)){
-            visitCast(operator, args[0], String.class);
+            visitCast(operator, args.get(0), String.class);
         }else if (operator.equals(Ops.NUMCAST)){
-            visitCast(operator, args[0], (Class<?>) ((EConstant<?>)args[1]).getConstant());
+            visitCast(operator, args.get(0), (Class<?>) ((EConstant<?>)args.get(1)).getConstant());
         }else{
             super.visitOperation(type, operator, args);    
         }  

File: querydsl-core/src/main/java/com/mysema/query/grammar/Grammar.java
Patch:
@@ -762,7 +762,7 @@ public static <A> EBoolean ne(Expr<A> left, Expr<? super A> right) {
     public static EBoolean not(EBoolean left) {
         if (left instanceof OBoolean){
             OBoolean o = (OBoolean)left;
-            if (o.getOperator() == Ops.NOT) return (EBoolean) o.getArgs()[0];
+            if (o.getOperator() == Ops.NOT) return (EBoolean) o.getArgs().get(0);
         }        
         return createBoolean(Ops.NOT, left);
     }

File: querydsl-core/src/main/java/com/mysema/query/serialization/ToStringVisitor.java
Patch:
@@ -75,9 +75,9 @@ protected void visit(EConstructor<?> e){
     protected void visit(Operation<?,?> o){
         String pattern = ops.getPattern(o.getOperator());
         if (pattern != null){
-            toString =  String.format(pattern, o.getArgs());
+            toString =  String.format(pattern, o.getArgs().toArray());
         }else{
-            toString = "unknown operation with args " + Arrays.asList(o.getArgs());
+            toString = "unknown operation with args " + o.getArgs();
         }
     }
 

File: querydsl-collections/src/main/java/com/mysema/query/collections/AbstractColQuery.java
Patch:
@@ -19,6 +19,7 @@
 import com.mysema.query.JoinExpression;
 import com.mysema.query.Projectable;
 import com.mysema.query.QueryBase;
+import com.mysema.query.QueryMetadata;
 import com.mysema.query.collections.eval.Evaluator;
 import com.mysema.query.collections.iterators.FilteringMultiIterator;
 import com.mysema.query.collections.iterators.MultiIterator;
@@ -150,7 +151,7 @@ public <A> SubType from(Expr<A> entity, Iterable<? extends A> col) {
         return _this;
     }    
     
-    public InnerQuery.Metadata getMetadata(){
+    public QueryMetadata<?> getMetadata(){
         return query.getMetadata();
     }
     

File: querydsl-hql/src/main/java/com/mysema/query/grammar/HqlQueryBase.java
Patch:
@@ -100,9 +100,8 @@ public SubType innerJoin(HqlJoinMeta meta, EEntity<?> o) {
         return _this;
     }
     
-    public SubType fullJoin(EEntity<?> o) {
-        // ?!?
-        joins.add(new JoinExpression<HqlJoinMeta>(JoinType.INNERJOIN,o));
+    public SubType fullJoin(HqlJoinMeta meta, EEntity<?> o) {
+        joins.add(new JoinExpression<HqlJoinMeta>(JoinType.FULLJOIN, o, meta));
         return _this;
     }
 

File: querydsl-core/src/main/java/com/mysema/query/QueryBase.java
Patch:
@@ -40,6 +40,8 @@ protected void clear(){
     @SuppressWarnings("unchecked")
     private SubType _this = (SubType)this;
     
+    protected String toString;
+    
     private final Metadata metadata = new Metadata();
     
     public SubType from(Expr<?>... o) {
@@ -108,7 +110,7 @@ public Metadata getMetadata(){
     protected EBoolean normalize(EBoolean e){
         return e;
     }
-
+    
     /**
      * The Class Metadata.
      */

File: querydsl-apt/src/main/java/com/mysema/query/apt/general/DefaultDTOVisitor.java
Patch:
@@ -24,7 +24,7 @@
  * @author tiwe
  * @version $Id$
  */
-public class DTOVisitor extends SimpleDeclarationVisitor {
+public class DefaultDTOVisitor extends SimpleDeclarationVisitor {
     final Set<Type> types = new TreeSet<Type>();
 
     private Type last;

File: querydsl-apt/src/main/java/com/mysema/query/apt/general/TypeHelper.java
Patch:
@@ -95,7 +95,7 @@ public void visitClassType(ClassType arg0){
                     fieldType = Field.Type.STRING;
                 } else if (fullName.equals(Boolean.class.getName())) {
                     fieldType = Field.Type.BOOLEAN;
-                } else if (fullName.equals(Locale.class.getName())) {
+                } else if (fullName.equals(Locale.class.getName()) || fullName.equals(Class.class.getName())) {
                     fieldType = Field.Type.SIMPLE;
                 } else if (fullName.startsWith("java") && Number.class.isAssignableFrom(Class.forName(fullName))) {
                     fieldType = Field.Type.NUMERIC;

File: querydsl-core/src/main/java/com/mysema/query/grammar/types/Factory.java
Patch:
@@ -30,7 +30,7 @@ public static final <A> Expr<A> createConstant(A obj) {
         return new Expr.EConstant<A>(Assert.notNull(obj));
     }
 
-    public static final <OpType extends Number,D extends Number & Comparable<? super D>> Expr.ENumber<D> createNumber(Class<D> type, Op<OpType> operator, Expr<?>... args) {
+    public static final <OpType extends Number,D extends Number & Comparable<? super D>> Expr.ENumber<D> createNumber(Class<? extends D> type, Op<OpType> operator, Expr<?>... args) {
         return new Operation.ONumber<OpType,D>(type, Assert.notNull(operator), Assert.notNull(args));
     }
     

File: querydsl-core/src/main/java/com/mysema/query/grammar/types/Operation.java
Patch:
@@ -21,7 +21,7 @@
  */
 public interface Operation<OP,RT> {
     
-    Class<RT> getType();
+    Class<? extends RT> getType();
     Expr<?>[] getArgs();
     Op<OP> getOperator();
     
@@ -65,7 +65,7 @@ public OComparable(Op<OpType> op, Expr<?>... args){
     public static class ONumber<OpType extends Number, D extends Number & Comparable<? super D>> extends ENumber<D> implements Operation<OpType,D>{
         private final Expr<?>[] args;
         private final Op<OpType> op;
-        public ONumber(Class<D> type, Op<OpType> op, Expr<?>... args){
+        public ONumber(Class<? extends D> type, Op<OpType> op, Expr<?>... args){
             super(type);
             this.op = op;
             this.args = args;

File: querydsl-collections/src/main/java/com/mysema/query/grammar/JavaOps.java
Patch:
@@ -41,7 +41,7 @@ protected JavaOps(){
         add(Ops.ISNULL, "%s == null");
         add(Ops.ISNOTNULL, "%s != null");
                 
-        add(Ops.ISTYPEOF, "%s.class.equals(%s)");
+        add(Ops.ISTYPEOF, "%2$s.isInstance(%1$s)");
         add(Ops.IN, "%2$s.contains(%1$s)"); 
         add(Ops.NOTIN, "!%2$s.contains(%1$s)");        
         add(Ops.LIKE, functions+".like(%s,%s)");

File: querydsl-core/src/main/java/com/mysema/query/grammar/Grammar.java
Patch:
@@ -914,7 +914,7 @@ public static EString trim(Expr<String> left) {
      * @return
      */    
     public static <A, B extends A> EBoolean typeOf(Expr<A> left, Class<B> right) {
-        return createBoolean(Ops.ISTYPEOF, left, createConstant(right.getName()));
+        return createBoolean(Ops.ISTYPEOF, left, createConstant(right));
     }    
     
     /**

File: querydsl-collections/src/main/java/com/mysema/query/collections/eval/JaninoEvaluator.java
Patch:
@@ -22,7 +22,7 @@
  */
 public class JaninoEvaluator implements Evaluator{
 
-    private ExpressionEvaluator ev;
+    private final ExpressionEvaluator ev;
     
     public JaninoEvaluator(ExpressionEvaluator ev){
         this.ev = Assert.notNull(ev);

File: querydsl-collections/src/main/java/com/mysema/query/collections/iterators/FilteringMultiIterator.java
Patch:
@@ -69,7 +69,7 @@ protected ExpressionEvaluator instantiateExpressionEvaluator(
                     @Override
                     public Object evaluate(Object[] origArgs) throws InvocationTargetException{
                         Object[] args = JavaSerializer.combine(constArray.length + values.length, constArray, values);
-                        args[constArray.length + lastElement] = origArgs[0];                 
+                        args[constArray.length + lastElement] = origArgs[0];                
                         return super.evaluate(args);
                     }
                 };    

File: querydsl-collections/src/test/java/com/mysema/query/collections/QueryPerformanceTest.java
Patch:
@@ -53,7 +53,6 @@ public class QueryPerformanceTest extends AbstractQueryTest{
     );
     
     @Test
-    @Ignore
     public void testValidateResultSizes(){
         int size = 50;
         long count, expected;
@@ -104,7 +103,7 @@ public void testValidateResultSizes(){
         }
         System.out.println(res);
         if (res.toString().contains("X")){
-            fail("Errors occurred. See log for details.");
+            fail(res.toString().replaceAll("[^X]", "").length() + " errors occurred. See log for details.");
         }
     }
     

File: querydsl-collections/src/main/java/com/mysema/query/collections/iterators/FilteringMultiIterator.java
Patch:
@@ -116,8 +116,8 @@ public MultiIterator init(IndexSupport iteratorFactory){
         return this;
     }
 
-    public void init(List<Expr<?>> orderedSources, EBoolean condition) {
-        indexSupport.init(orderedSources, condition);
+    public void init(JavaOps ops, List<? extends Expr<?>> orderedSources, EBoolean condition) {
+        indexSupport.init(ops, orderedSources, condition);
     }
     
 }

File: querydsl-collections/src/main/java/com/mysema/query/grammar/JavaSerializer.java
Patch:
@@ -208,6 +208,7 @@ private void visitCast(Op<?> operator, Expr<?> source, Class<?> targetType) {
     @Override
     protected void visitOperation(Class<?> type, Op<?> operator, Expr<?>... args) {
         if (operator.equals(Ops.LIKE)){
+            // optimize like matches to startsWith and endsWith, when possible
             String right = args[1].toString();
             if (!right.contains("_")){
                 int lastIndex = right.lastIndexOf('%');

File: querydsl-collections/src/test/java/com/mysema/query/collections/iterators/MultiIteratorTest.java
Patch:
@@ -14,6 +14,7 @@
 import com.mysema.query.JoinExpression;
 import com.mysema.query.collections.IndexSupport;
 import com.mysema.query.collections.MiniApi;
+import com.mysema.query.grammar.JavaOps;
 import com.mysema.query.grammar.types.Expr;
 import com.mysema.query.grammar.types.Expr.EBoolean;
 import com.mysema.query.grammar.types.Expr.ENumber;
@@ -60,7 +61,7 @@ public <A> Iterator<A> getIterator(Expr<A> expr, Object[] bindings) {
             return getIterator(expr);
         }
 
-        public void init(List<Expr<?>> sources, EBoolean where) {
+        public void init(JavaOps ops, List<? extends Expr<?>> sources, EBoolean where) {
             // TODO Auto-generated method stub
         }
 

File: querydsl-apt/src/main/java/com/mysema/query/apt/general/GeneralProcessor.java
Patch:
@@ -171,6 +171,4 @@ private void serializeAsOuterClasses(Collection<Type> entityTypes,
         }
     }
 
-
-
 }

File: querydsl-collections/src/main/java/com/mysema/query/collections/support/DefaultIndexSupport.java
Patch:
@@ -42,5 +42,5 @@ public <A> Iterator<A> getIterator(Expr<A> expr, Object[] bindings) {
     public void init(List<Expr<?>> sources, EBoolean condition) {
         // do nothing
     }
-
+        
 }

File: querydsl-apt/src/main/java/com/mysema/query/apt/Field.java
Patch:
@@ -68,6 +68,7 @@ public Field(String name, String realName, String keyTypeName, String typeName,
         this.realName = realName(realName);
         this.keyTypeName = keyTypeName;
         this.typeName = typeName;
+        this.typePackage = typeName.substring(0, typeName.lastIndexOf('.'));
         this.simpleTypeName = simpleTypeName;
         this.fieldType = fieldType;
     }

File: querydsl-apt/src/main/java/com/mysema/query/apt/util/TypeInfo.java
Patch:
@@ -124,7 +124,8 @@ public void visitInterfaceType(InterfaceType arg0) {
                 }
 
             } else if (typeName.equals(java.util.Collection.class.getName())
-                    || typeName.equals(java.util.Set.class.getName())) {
+                    || typeName.equals(java.util.Set.class.getName()) 
+                    || typeName.equals(java.util.SortedSet.class.getName())) {
                 TypeInfo valueInfo = new TypeInfo(i.next());
                 fullName = valueInfo.getFullName();
                 packageName = valueInfo.getPackageName();

File: querydsl-collections/src/main/java/com/mysema/query/grammar/JavaOps.java
Patch:
@@ -21,6 +21,8 @@
  */
 public class JavaOps extends OperationPatterns {
     
+    public static final JavaOps DEFAULT = new JavaOps();
+    
     public JavaOps(){       
         String functions = JavaOps.class.getName();
         

File: querydsl-collections/src/test/java/com/mysema/query/collections/comparators/JoinExpressionComparatorTest.java
Patch:
@@ -49,7 +49,7 @@ public void setUp(){
     public void test1(){        
         EBoolean where = cat.name.eq(otherCat.name).and(otherCat.name.eq("Bob"));
         
-        JoinExpressionComparator comp = new JoinExpressionComparator(where, exprToIt);        
+        JoinExpressionComparator comp = new JoinExpressionComparator(where, exprToIt.keySet());        
         assertTrue( comp.compare(otherCatJoin, catJoin) < 0);
         assertTrue( comp.compare(catJoin, otherCatJoin) > 0);
         assertEquals(0, comp.compare(catJoin, catJoin));
@@ -63,7 +63,7 @@ public void test2(){
             .and(cat.eq(mate.kittens(0)))
             .and(otherCat.name.eq("Bob"));
         
-        JoinExpressionComparator comp = new JoinExpressionComparator(where, exprToIt);        
+        JoinExpressionComparator comp = new JoinExpressionComparator(where, exprToIt.keySet());        
         assertTrue( comp.compare(otherCatJoin, catJoin) < 0);
         assertTrue( comp.compare(catJoin, mateJoin) < 0);
     }

File: querydsl-hql/src/main/java/com/mysema/query/grammar/HqlOps.java
Patch:
@@ -22,6 +22,8 @@
  */
 public class HqlOps extends OperationPatterns {
     
+    public static final HqlOps DEFAULT = new HqlOps();
+    
     public static final List<Op<?>> wrapCollectionsForOp;
     
     static{

File: querydsl-hql/src/main/java/com/mysema/query/hql/AbstractHqlQuery.java
Patch:
@@ -28,13 +28,11 @@
 public class AbstractHqlQuery<A extends AbstractHqlQuery<A>> extends HqlQueryBase<A> {
     
     private static final Logger logger = LoggerFactory.getLogger(HqlQuery.class);
-
-    private static final HqlOps OPS_DEFAULT = new HqlOps();
     
     private final Session session;
     
     public AbstractHqlQuery(Session session) {
-        this(session, OPS_DEFAULT);
+        this(session, HqlOps.DEFAULT);
     }
 
     public AbstractHqlQuery(Session session, HqlOps ops) {

File: querydsl-hql/src/main/java/com/mysema/query/hql/JpaqlQuery.java
Patch:
@@ -26,13 +26,11 @@
 public class JpaqlQuery<A extends JpaqlQuery<A>> extends HqlQueryBase<A>{
     
     private static final Logger logger = LoggerFactory.getLogger(JpaqlQuery.class);
-
-    private static final HqlOps OPS_DEFAULT = new HqlOps();
     
     private final EntityManager em;
 
     public JpaqlQuery(EntityManager em) {
-        this(em, OPS_DEFAULT);
+        this(em, HqlOps.DEFAULT);
     }
 
     public JpaqlQuery(EntityManager em, HqlOps ops) {

File: querydsl-hql/src/test/java/com/mysema/query/hql/HqlDomain.java
Patch:
@@ -43,6 +43,7 @@ public static class InheritatedProperties extends Superclass{
     
     @Entity
     public static class SimpleTypes{
+        transient int test;
         @Id long id;
         BigDecimal bigDecimal;
         Byte bbyte;

File: querydsl-core/src/main/java/com/mysema/query/CascadingBoolean.java
Patch:
@@ -36,6 +36,9 @@ public CascadingBoolean or(Expr.EBoolean right) {
     public Expr.EBoolean create(){
         return expr;
     }
+    /**
+     * use create instead
+     */
     @Deprecated
     public Expr.EBoolean self(){
         return create();

File: querydsl-core/src/main/java/com/mysema/query/serialization/BaseSerializer.java
Patch:
@@ -105,7 +105,7 @@ public List<Object> getConstants(){
         
     public String toString(){ return builder.toString(); }
 
-    protected void visit(Constructor<?> expr){
+    protected void visit(EConstructor<?> expr){
         append("new ").append(expr.getType().getName()).append("(");
         append(", ",Arrays.asList(expr.getArgs())).append(")");
     }
@@ -121,7 +121,7 @@ protected void visit(Expr.EConstant<?> expr) {
         }     
     }
     
-    protected void visit(Constructor.CArray<?> oa) {
+    protected void visit(EConstructor.CArray<?> oa) {
 //        _append("new Object[]{");
         append("new ").append(oa.getElementType().getName()).append("[]{");
         append(", ",Arrays.asList(oa.getArgs())).append("}");

File: querydsl-hql/src/main/java/com/mysema/query/grammar/HqlGrammar.java
Patch:
@@ -149,7 +149,7 @@ public static EComparable<Date> month(Expr<Date> date){
     }
     
     public static <A> Expr<A> newInstance(Class<A> a, Expr<?>... args){
-        return new Constructor<A>(a,args);
+        return new EConstructor<A>(a,args);
     }
     
     public static <D> EBoolean notExists(CollectionType<D> col){

File: querydsl-hql/src/test/java/com/mysema/query/hql/FeaturesTest.java
Patch:
@@ -25,7 +25,7 @@
 import com.mysema.query.grammar.HqlOps;
 import com.mysema.query.grammar.HqlQueryBase;
 import com.mysema.query.grammar.HqlSerializer;
-import com.mysema.query.grammar.types.Constructor;
+import com.mysema.query.grammar.types.EConstructor;
 import com.mysema.query.grammar.types.Custom;
 import com.mysema.query.grammar.types.Expr;
 import com.mysema.query.grammar.types.Expr.ENumber;
@@ -221,7 +221,7 @@ public void testCollectionOperations(){
     
     @Test
     public void testConstructors(){
-        Constructor<com.mysema.query.hql.HqlDomain.Cat> c = new Constructor<com.mysema.query.hql.HqlDomain.Cat>(com.mysema.query.hql.HqlDomain.Cat.class, cat.name);
+        EConstructor<com.mysema.query.hql.HqlDomain.Cat> c = new EConstructor<com.mysema.query.hql.HqlDomain.Cat>(com.mysema.query.hql.HqlDomain.Cat.class, cat.name);
         toString("new "+com.mysema.query.hql.HqlDomain.Cat.class.getName()+"(cat.name)", c);
         toString("new "+getClass().getName()+"$BookmarkDTO()", new _BookmarkDTO());
         toString("new "+getClass().getName()+"$BookmarkDTO(cat.name)", new _BookmarkDTO(cat.name));
@@ -445,7 +445,7 @@ private void toString(String expected, Expr<?> expr) {
     /**
      * The Class _BookmarkDTO.
      */
-    public static final class _BookmarkDTO extends Constructor<BookmarkDTO>{
+    public static final class _BookmarkDTO extends EConstructor<BookmarkDTO>{
         public _BookmarkDTO(){
             super(BookmarkDTO.class);
         }

File: querydsl-sql/src/main/java/com/mysema/query/grammar/SqlSerializer.java
Patch:
@@ -56,10 +56,10 @@ public void serialize(
             append(ops.select());           
             List<Expr<?>> sqlSelect = new ArrayList<Expr<?>>();
             for (Expr<?> selectExpr : select){
-                if (selectExpr instanceof Constructor){
+                if (selectExpr instanceof EConstructor){
                     // transforms constructor arguments into individual select
                     // expressions
-                    sqlSelect.addAll(Arrays.<Expr<?>>asList(((Constructor<?>)selectExpr).getArgs()));
+                    sqlSelect.addAll(Arrays.<Expr<?>>asList(((EConstructor<?>)selectExpr).getArgs()));
                 }else{
                     sqlSelect.add(selectExpr);
                 }

File: querydsl-sql/src/main/java/com/mysema/query/sql/AbstractSqlQuery.java
Patch:
@@ -24,7 +24,7 @@
 import com.mysema.query.grammar.SqlOps;
 import com.mysema.query.grammar.SqlSerializer;
 import com.mysema.query.grammar.types.Alias;
-import com.mysema.query.grammar.types.Constructor;
+import com.mysema.query.grammar.types.EConstructor;
 import com.mysema.query.grammar.types.Expr;
 import com.mysema.query.grammar.types.SubQuery;
 
@@ -128,8 +128,8 @@ private <RT> List<RT> listSingle(Expr<RT> expr) throws SQLException{
         ResultSet rs = stmt.executeQuery();        
         try{
             List<RT> rv = new ArrayList<RT>();
-            if (expr instanceof Constructor){                
-                Constructor<RT> c = (Constructor<RT>)expr;
+            if (expr instanceof EConstructor){                
+                EConstructor<RT> c = (EConstructor<RT>)expr;
                 java.lang.reflect.Constructor<RT> cc =  c.getJavaConstructor();
                 while (rs.next()){                    
                     try {

File: querydsl-sql/src/test/java/com/mysema/query/sql/dto/QIdName.java
Patch:
@@ -5,10 +5,10 @@
  */
 package com.mysema.query.sql.dto;
 
-import com.mysema.query.grammar.types.Constructor;
+import com.mysema.query.grammar.types.EConstructor;
 import com.mysema.query.grammar.types.Expr;
 
-public class QIdName extends Constructor<IdName>{
+public class QIdName extends EConstructor<IdName>{
     public QIdName(Expr<java.lang.Integer> id, Expr<java.lang.String> name){
         super(IdName.class,id,name);
     }

File: querydsl-collections/src/main/java/com/mysema/query/collections/InnerQuery.java
Patch:
@@ -22,7 +22,7 @@
 import com.mysema.query.grammar.JavaSerializer;
 import com.mysema.query.grammar.Order;
 import com.mysema.query.grammar.types.Expr;
-import com.mysema.query.grammar.types.Constructor.CArray;
+import com.mysema.query.grammar.types.EConstructor.CArray;
 import com.mysema.query.serialization.OperationPatterns;
 
 /**

File: querydsl-collections/src/main/java/com/mysema/query/collections/MiniApi.java
Patch:
@@ -11,7 +11,6 @@
 import com.mysema.query.grammar.GrammarWithAlias;
 import com.mysema.query.grammar.OrderSpecifier;
 import com.mysema.query.grammar.types.Expr;
-import com.mysema.query.grammar.types.Path;
 import com.mysema.query.grammar.types.PathExtractor;
 
 /**

File: querydsl-collections/src/test/java/com/mysema/query/collections/iterators/MultiIteratorTest.java
Patch:
@@ -13,7 +13,6 @@
 import java.util.Iterator;
 import java.util.List;
 
-import org.apache.commons.collections15.IteratorUtils;
 import org.junit.Test;
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/grammar/QMath.java
Patch:
@@ -27,7 +27,7 @@ public static <A extends Number & Comparable<? super A>> ENumber<A> mult(Expr<A>
         return createNumber(left.getType(), Ops.MULT, left, right);
     }
         
-    public static <A extends Number & Comparable<? super A>> ENumber<Double> div(Expr<A> left, A right) {
+    public static <A extends Number & Comparable<? super A>> ENumber<Double> div(ENumber<A> left, A right) {
         return createNumber(Double.class,Ops.DIV, left, createConstant(right));
     }
 
@@ -119,8 +119,8 @@ public static ENumber<Double> sin(Expr<Double> left){
         return createNumber(left.getType(),OpMath.SIN, left);
     }
     
-    public static <A extends Number & Comparable<? super A>> ENumber<A> sqrt(Expr<A> left){
-        return createNumber(left.getType(),OpMath.SQRT, left);
+    public static <A extends Number & Comparable<? super A>> ENumber<Double> sqrt(Expr<A> left){
+        return createNumber(Double.class,OpMath.SQRT, left);
     }
     
     public static ENumber<Double> tan(Expr<Double> left){

File: querydsl-core/src/main/java/com/mysema/query/grammar/types/CollectionType.java
Patch:
@@ -11,5 +11,6 @@
  * @author tiwe
  * @version $Id$
  */
-public interface CollectionType<D>{ 
+public interface CollectionType<D>{
+    Class<D> getElementType();
 }
\ No newline at end of file

File: querydsl-core/src/main/java/com/mysema/query/grammar/types/SubQuery.java
Patch:
@@ -47,4 +47,7 @@ public void s(Expr<?>... expr){
             select(expr);
         }
     }
+    public Class<A> getElementType() {
+        return null;
+    }
 }
\ No newline at end of file

File: querydsl-hql/src/test/java/com/mysema/query/hql/HqlDomain.java
Patch:
@@ -257,7 +257,7 @@ public Family(Cat mother, Cat mate, Cat offspr){
     public static class Foo {
         String bar;
         @Id int id;
-        @CollectionOfElements List<String> names;
+        @CollectionOfElements @IndexColumn(name="_index") List<String> names;
         java.util.Date startDate;
     }
     
@@ -348,7 +348,7 @@ public static class Nationality {
     @Entity
     public static class Order {
         @ManyToOne Customer customer;
-        @CollectionOfElements List<Integer> deliveredItemIndices;    
+        @CollectionOfElements @IndexColumn(name="_index") List<Integer> deliveredItemIndices;    
         @Id long id;
         @OneToMany @IndexColumn(name="_index") List<Item> items, lineItems;
         boolean paid;
@@ -386,7 +386,7 @@ public enum PaymentStatus{
     public static class Person {
         java.util.Date birthDay;
         @Id long i;
-        @ManyToOne PersonId id;
+        @ManyToOne PersonId pid;
         String name;
         @ManyToOne Nationality nationality;
     }

File: querydsl-hql/src/main/java/com/mysema/query/grammar/types/Quant.java
Patch:
@@ -35,7 +35,7 @@ public QBoolean(Op<?> op, CollectionType<Q> col) {
     /**
      * The Class Comparable.
      */
-    public static class QComparable<Q extends java.lang.Comparable<Q>> extends Expr.EComparable<Q> implements Quant{
+    public static class QComparable<Q extends Comparable<? super Q>> extends Expr.EComparable<Q> implements Quant{
         private final Expr<?> col;
         private final Op<?> op;
         public QComparable(Op<?> op, CollectionType<Q> col) {

File: querydsl-core/src/main/java/com/mysema/query/grammar/GrammarWithAlias.java
Patch:
@@ -95,7 +95,7 @@ public static <A> A alias(Class<A> cl, String var){
         return exprFactory.createBooleanArray(args);
     }
     
-    public static <D extends Comparable<D>> PComparableArray<D> $(D[] args){
+    public static <D extends Comparable<? super D>> PComparableArray<D> $(D[] args){
         return exprFactory.createComparableArray(args);
     }
     

File: querydsl-core/src/main/java/com/mysema/query/grammar/types/Path.java
Patch:
@@ -260,7 +260,7 @@ protected PBoolean _boolean(String path){
         protected <A extends Comparable<? super A>> PComparable<A> _comparable(String path,Class<A> type) {
             return new PComparable<A>(type, forProperty(this, path));
         }    
-        protected <A extends Number & Comparable<A>> PNumber<A> _number(String path,Class<A> type) {
+        protected <A extends Number & Comparable<? super A>> PNumber<A> _number(String path,Class<A> type) {
             return new PNumber<A>(type, forProperty(this, path));
         }   
         protected <A> PEntity<A> _entity(String path, String entityName, Class<A> type){

File: querydsl-sql/src/main/java/com/mysema/query/grammar/OracleGrammar.java
Patch:
@@ -34,7 +34,7 @@ public class OracleGrammar extends SqlGrammar{
     
     // custom functions
     
-    public static <A extends Number & Comparable<A>> SumOver<A> sumOver(Expr<A> expr){
+    public static <A extends Number & Comparable<? super A>> SumOver<A> sumOver(Expr<A> expr){
         return new SumOver<A>(expr);
     }
     

File: querydsl-sql/src/main/java/com/mysema/query/grammar/types/SumOver.java
Patch:
@@ -13,7 +13,7 @@
  * @author tiwe
  * @version $Id$
  */
-public class SumOver<A extends Number & Comparable<A>> extends ENumber<A>{
+public class SumOver<A extends Number & Comparable<? super A>> extends ENumber<A>{
     private Expr<A> target;        
     private Expr<?> partitionBy;
     private List<Expr<?>> orderBy = new ArrayList<Expr<?>>();

File: querydsl-collections/src/main/java/com/mysema/query/grammar/JavaOps.java
Patch:
@@ -94,7 +94,7 @@ public static int mod(int left, int right){
         return left % right;
     }
     
-    public static <A extends Comparable<A>> boolean between(A a, A b, A c){
+    public static <A extends Comparable<? super A>> boolean between(A a, A b, A c){
         return a.compareTo(b) > 0 && a.compareTo(c) < 0;
     }
         

File: querydsl-collections/src/test/java/com/mysema/query/collections/ColQueryTest.java
Patch:
@@ -187,7 +187,7 @@ private TestQuery query(){
         return last;
     }
     
-    private static class TestQuery extends ColQuery<TestQuery>{
+    private static class TestQuery extends AbstractColQuery<TestQuery>{
         List<Object> res = new ArrayList<Object>();
         <RT> void select(Expr<RT> projection){
             for (Object o : iterate(projection)){

File: querydsl-hql/src/main/java/com/mysema/query/grammar/HqlGrammar.java
Patch:
@@ -36,15 +36,15 @@ public static <D> Expr<D> all(CollectionType<D> col){
         return new QSimple<D>(OpQuant.ALL, col);
     }    
     
-    public static <D extends Number & Comparable<D>> ENumber<D> all(CollectionType<D> col){
+    public static <D extends Number & Comparable<? super D>> ENumber<D> all(CollectionType<D> col){
         return new QNumber<D>(OpQuant.ALL, col);
     }
         
     public static <D> ESimple<D> any(CollectionType<D> col){
         return new QSimple<D>(OpQuant.ANY, col);
     }    
     
-    public static <D extends Number & Comparable<D>> ENumber<D> any(CollectionType<D> col){
+    public static <D extends Number & Comparable<? super D>> ENumber<D> any(CollectionType<D> col){
         return new QNumber<D>(OpQuant.ANY, col);
     }    
     

File: querydsl-hql/src/main/java/com/mysema/query/grammar/types/Quant.java
Patch:
@@ -47,7 +47,7 @@ public QComparable(Op<?> op, CollectionType<Q> col) {
         public Expr<?> getTarget() {return col;}                          
     }
     
-    public static class QNumber<Q extends  Number & java.lang.Comparable<Q>> extends Expr.ENumber<Q> implements Quant{
+    public static class QNumber<Q extends  Number & Comparable<? super Q>> extends Expr.ENumber<Q> implements Quant{
         private final Expr<?> col;
         private final Op<?> op;
         public QNumber(Op<?> op, CollectionType<Q> col) {

File: querydsl-hql/src/test/java/com/mysema/query/hql/HqlDomain.java
Patch:
@@ -59,6 +59,9 @@ public static class SimpleTypes{
         Long llong;
         long llong2;
         String sstring;
+        Date date;
+        java.sql.Time time;
+        java.sql.Timestamp timestamp;
     }
     
     /**

File: querydsl-core/src/main/java/com/mysema/query/ExprFactory.java
Patch:
@@ -26,17 +26,17 @@ public interface ExprFactory {
 
     PBooleanArray createBooleanArray(Boolean[] args);
     
-    <D extends Number & Comparable<D>> ENumber<D> createNumber(D arg);
+    <D extends Number & Comparable<? super D>> ENumber<D> createNumber(D arg);
 
-    <D extends Comparable<D>> EComparable<D> createComparable(D arg);
+    <D extends Comparable<? super D>> EComparable<D> createComparable(D arg);
 
     <D> PEntity<D> createEntity(D arg);
     
     <D> PEntityList<D> createEntityList(List<D> arg);
     
     <D> PEntityCollection<D> createEntityCollection(Collection<D> arg);
 
-    <D extends Comparable<D>> PComparableArray<D> createComparableArray(D[] args);
+    <D extends Comparable<? super D>> PComparableArray<D> createComparableArray(D[] args);
 
     ExtString createString(String arg);
 

File: querydsl-core/src/main/java/com/mysema/query/SimpleExprFactory.java
Patch:
@@ -121,12 +121,12 @@ public <D> PEntityCollection<D> createEntityCollection(Collection<D> arg) {
     }
     
     @SuppressWarnings("unchecked")
-    public <D extends Comparable<D>> EComparable<D> createComparable(D arg){
+    public <D extends Comparable<? super D>> EComparable<D> createComparable(D arg){
         return (EComparable<D>) comToPath.get(arg);
     }
     
     @SuppressWarnings("unchecked")
-    public <D extends Number & Comparable<D>> ENumber<D> createNumber(D arg) {
+    public <D extends Number & Comparable<? super D>> ENumber<D> createNumber(D arg) {
         return (ENumber<D>) numToPath.get(arg);
     }
     
@@ -136,7 +136,7 @@ public <D> PEntity<D> createEntity(D arg){
     }
  
     @SuppressWarnings("unchecked")
-    public <D extends Comparable<D>> PComparableArray<D> createComparableArray(D[] args){
+    public <D extends Comparable<? super D>> PComparableArray<D> createComparableArray(D[] args){
         return (PComparableArray<D>) caToPath.get(Arrays.asList(args));
     }
 

File: querydsl-core/src/main/java/com/mysema/query/alias/AliasAwareExprFactory.java
Patch:
@@ -53,15 +53,15 @@ public <D> PEntityCollection<D> createEntityCollection(Collection<D> arg) {
         }        
     }
     
-    public <D extends Comparable<D>> EComparable<D> createComparable(D arg){
+    public <D extends Comparable<? super D>> EComparable<D> createComparable(D arg){
         try{
             return aliasFactory.hasCurrent() ? aliasFactory.<EComparable<D>>getCurrent() : super.createComparable(arg);
         }finally{
             aliasFactory.setCurrent(null);
         }        
     }
     
-    public <D extends Number & Comparable<D>> ENumber<D> createNumber(D arg){
+    public <D extends Number & Comparable<? super D>> ENumber<D> createNumber(D arg){
         try{
             return aliasFactory.hasCurrent() ? aliasFactory.<ENumber<D>>getCurrent() : super.createNumber(arg);
         }finally{
@@ -83,7 +83,7 @@ public <D> PEntity<D> createEntity(D arg){
         }        
     }
     
-    public <D extends Comparable<D>> PComparableArray<D> createComparableArray(D[] args){
+    public <D extends Comparable<? super D>> PComparableArray<D> createComparableArray(D[] args){
         try{
             return aliasFactory.hasCurrent() ? aliasFactory.<PComparableArray<D>>getCurrent() : super.createComparableArray(args);
         }finally{

File: querydsl-core/src/main/java/com/mysema/query/grammar/GrammarWithAlias.java
Patch:
@@ -42,7 +42,7 @@ public static <A> A alias(Class<A> cl, String var){
         return exprFactory.createBoolean(arg);
     }
     
-    public static <D extends Comparable<D>> EComparable<D> $(D arg){
+    public static <D extends Comparable<? super D>> EComparable<D> $(D arg){
         return exprFactory.createComparable(arg);
     }
     

File: querydsl-core/src/main/java/com/mysema/query/grammar/OrderSpecifier.java
Patch:
@@ -15,7 +15,7 @@
  * @author tiwe
  * @version $Id$
  */
-public class OrderSpecifier<A extends Comparable<A>> {
+public class OrderSpecifier<A extends Comparable<? super A>> {
     public Order order;
     public Expr<A> target;
 }
\ No newline at end of file

File: querydsl-core/src/main/java/com/mysema/query/grammar/types/Custom.java
Patch:
@@ -28,14 +28,14 @@ public static abstract class CBoolean extends Expr.EBoolean implements
     /**
      * Custom comparable expression
      */
-    public static abstract class CComparable<T extends java.lang.Comparable<T>>
+    public static abstract class CComparable<T extends java.lang.Comparable<? super T>>
             extends Expr.EComparable<T> implements Custom<T> {
         public CComparable(Class<T> type) {
             super(type);
         }
     }
 
-    public static abstract class CNumber<T extends java.lang.Number & java.lang.Comparable<T>>
+    public static abstract class CNumber<T extends java.lang.Number & java.lang.Comparable<? super T>>
             extends Expr.ENumber<T> implements Custom<T> {
         public CNumber(Class<T> type) {
             super(type);

File: querydsl-core/src/main/java/com/mysema/query/grammar/types/Expr.java
Patch:
@@ -44,7 +44,7 @@ public static abstract class EBoolean extends ELiteral<Boolean>{
     /**
      * The Class Comparable.
      */
-    public static abstract class EComparable<D extends Comparable<D>> extends ELiteral<D>{
+    public static abstract class EComparable<D extends Comparable<? super D>> extends ELiteral<D>{
         public EComparable(Class<D> type) {super(type);}
         public EBoolean after(D right) {return Grammar.after(this,right);}
         public EBoolean after(Expr<D> right) {return Grammar.after(this,right);}  
@@ -108,7 +108,7 @@ public static abstract class ELiteral<D> extends ESimple<D>{
     /**
      * The Class Number.
      */
-    public static abstract class ENumber<D extends Number & Comparable<D>> extends EComparable<D>{
+    public static abstract class ENumber<D extends Number & Comparable<? super D>> extends EComparable<D>{
         public ENumber(Class<D> type) {super(type);}
         public <A extends Number & Comparable<A>> EBoolean goe(A right) {return createBoolean(Ops.GOE, this, createConstant(right));}  
         public <A extends Number & Comparable<A>> EBoolean goe(Expr<A> right) {return createBoolean(Ops.GOE, this, right);}         

File: querydsl-core/src/main/java/com/mysema/query/grammar/types/Factory.java
Patch:
@@ -25,7 +25,7 @@ public static final Expr.EBoolean createBoolean(Op<Boolean> operator, Expr<?>...
         return new Operation.OBoolean(operator, args);
     }
     
-    public static final <OpType, RT extends Comparable<RT>> Expr.EComparable<RT> createComparable(Class<RT> type, Op<OpType> operator, Expr<?>... args) {
+    public static final <OpType, RT extends Comparable<? super RT>> Expr.EComparable<RT> createComparable(Class<RT> type, Op<OpType> operator, Expr<?>... args) {
         checkArg("operator",operator);
         checkArg("args",args);
         return new Operation.OComparable<OpType,RT>(type, operator, args);
@@ -39,7 +39,7 @@ public static final <A> Expr<A> createConstant(A obj) {
         return new Expr.EConstant<A>(obj);
     }
 
-    public static final <OpType extends Number,D extends Number & Comparable<D>> Expr.ENumber<D> createNumber(Class<D> type, Op<OpType> operator, Expr<?>... args) {
+    public static final <OpType extends Number,D extends Number & Comparable<? super D>> Expr.ENumber<D> createNumber(Class<D> type, Op<OpType> operator, Expr<?>... args) {
         checkArg("operator",operator);
         checkArg("args",args);
         return new Operation.ONumber<OpType,D>(type, operator, args);

File: querydsl-core/src/main/java/com/mysema/query/grammar/types/Operation.java
Patch:
@@ -41,7 +41,7 @@ public OBoolean(Op<Boolean> op, Expr<?>... args){
     /**
      * The Class Comparable.
      */
-    public static class OComparable<OpType,D extends Comparable<D>> extends EComparable<D> implements Operation<OpType,D> {
+    public static class OComparable<OpType,D extends Comparable<? super D>> extends EComparable<D> implements Operation<OpType,D> {
         private final Expr<?>[] args;
         private final Op<OpType> op;
         public OComparable(Class<D> type, Op<OpType> op, Expr<?>... args){
@@ -60,7 +60,7 @@ public OComparable(Op<OpType> op, Expr<?>... args){
     /**
      * The Class Number.
      */
-    public static class ONumber<OpType extends Number, D extends Number & Comparable<D>> extends ENumber<D> implements Operation<OpType,D>{
+    public static class ONumber<OpType extends Number, D extends Number & Comparable<? super D>> extends ENumber<D> implements Operation<OpType,D>{
         private final Expr<?>[] args;
         private final Op<OpType> op;
         public ONumber(Class<D> type, Op<OpType> op, Expr<?>... args){

File: querydsl-collections/src/main/java/com/mysema/query/collections/InnerQuery.java
Patch:
@@ -80,7 +80,7 @@ private <RT> Iterator<RT> createIterator(Expr<RT> projection) throws Exception {
             Expr<Object>[] orderByExpr = new Expr[orderBy.size()];
             boolean[] directions = new boolean[orderBy.size()];
             for (int i = 0; i < orderBy.size(); i++){
-                orderByExpr[i] = (Expr<Object>)orderBy.get(i).target;
+                orderByExpr[i] = (Expr)orderBy.get(i).target;
                 directions[i] = orderBy.get(i).order == Order.ASC;
             }
             Expr<?> expr = new CArray<Object>(Object.class, orderByExpr);

File: querydsl-apt/src/main/java/com/mysema/query/apt/Field.java
Patch:
@@ -26,6 +26,7 @@ public enum Type {
         ENTITYLIST, 
         ENTITYCOLLECTION, 
         ENTITYMAP, 
+        NUMERIC,
         SIMPLE, 
         SIMPLELIST, 
         SIMPLECOLLECTION, 

File: querydsl-collections/src/test/java/com/mysema/query/collections/Domain.java
Patch:
@@ -89,7 +89,7 @@ public static class QCat extends Path.PEntity<Cat>{
         public final Path.PBoolean alive = _boolean("alive");
         public final Path.PComparable<java.util.Date> birthdate = _comparable("birthdate",java.util.Date.class);
     
-        public final Path.PComparable<java.lang.Integer> bodyWeight = _comparable("bodyWeight",java.lang.Integer.class);
+        public final Path.PNumber<java.lang.Integer> bodyWeight = _number("bodyWeight",java.lang.Integer.class);
         public final Path.PComparable<java.lang.Integer> breed = _comparable("breed",java.lang.Integer.class);
         public final Path.PSimple<Color> color = _simple("color",Color.class);
         public final Path.PSimple<Color> eyecolor = _simple("eyecolor",Color.class);

File: querydsl-core/src/main/java/com/mysema/query/grammar/types/Visitor.java
Patch:
@@ -111,6 +111,8 @@ public final T handle(Expr<?> expr) {
     
     protected abstract void visit(Path.PMap<?,?> expr);
     
+    protected abstract void visit(Path.PNumber<?> expr);
+    
     protected abstract void visit(Path.PSimple<?> expr);
     
     protected abstract void visit(Path.PString expr);

File: querydsl-core/src/main/java/com/mysema/query/serialization/OperationPatterns.java
Patch:
@@ -84,12 +84,12 @@ public OperationPatterns(){
         add(Ops.OpMath.SQRT,"sqrt(%s)");
         add(Ops.OpMath.SIN,"sin(%s)");
         add(Ops.OpMath.ROUND,"round(%s)");
-        add(Ops.OpMath.RANDOM,"random(%s)");
-        add(Ops.OpMath.POWER,"%s^%s");
+        add(Ops.OpMath.RANDOM,"random()");
+        add(Ops.OpMath.POWER,"pow(%s,%s)");
         add(Ops.OpMath.MIN,"min(%s,%s)");
         add(Ops.OpMath.MAX,"max(%s,%s)");
         add(Ops.OpMath.MOD,"mod(%s,%s)");
-        add(Ops.OpMath.LOG10,"log(%s)");
+        add(Ops.OpMath.LOG10,"log10(%s)");
         add(Ops.OpMath.LOG,"log(%s)");
         add(Ops.OpMath.FLOOR,"floor(%s)");
         add(Ops.OpMath.EXP,"exp(%s)");

File: querydsl-core/src/main/java/com/mysema/query/grammar/types/Alias.java
Patch:
@@ -5,6 +5,7 @@
  */
 package com.mysema.query.grammar.types;
 
+import com.mysema.query.grammar.Grammar;
 import com.mysema.query.grammar.types.Expr.EEntity;
 import com.mysema.query.grammar.types.Expr.ESimple;
 import com.mysema.query.grammar.types.Path.PEntity;
@@ -62,7 +63,7 @@ public ASimple(Expr<D> from, String to) {
             this.to = to;
         }
         public Expr<D> as(String to) {
-            return IntGrammar.as(this, to);
+            return Grammar.as(this, to);
         }   
         public Expr<?> getFrom() {return from;}
         public String getTo() {return to;}  

File: querydsl-hql/src/main/java/com/mysema/query/grammar/HqlGrammar.java
Patch:
@@ -120,7 +120,7 @@ public static <A extends Comparable<A>> Expr.EComparable<A> max(Path.PCollection
     } 
     
     public static <A> Path.PEntity<A> maxelement(Path.PEntityCollection<A> col) {
-        return new Path.PEntity<A>(col.getElementType(), new PathMetadata<A>(col, null, HqlPathType.MINELEMENT));
+        return new Path.PEntity<A>(col.getElementType(), col.getEntityName(), new PathMetadata<A>(col, null, HqlPathType.MINELEMENT));
     }
     
     public static <A> Path.PComparable<Integer> maxindex(Path.PComponentCollection<A> col) {
@@ -140,7 +140,7 @@ public static <A extends Comparable<A>> Expr.EComparable<A> min(Path.PCollection
     }       
     
     public static <A> Path.PEntity<A> minelement(Path.PEntityCollection<A> col) {
-        return new Path.PEntity<A>(col.getElementType(), new PathMetadata<A>(col, null, HqlPathType.MINELEMENT));
+        return new Path.PEntity<A>(col.getElementType(), col.getEntityName(), new PathMetadata<A>(col, null, HqlPathType.MINELEMENT));
     } 
     
     public static <A> Path.PComparable<Integer> minindex(Path.PComponentCollection<A> col) {

File: querydsl-collections/src/test/java/com/mysema/query/collections/Domain.java
Patch:
@@ -94,18 +94,18 @@ public static class QCat extends Path.PEntity<Cat>{
         public final Path.PSimple<Color> color = _simple("color",Color.class);
         public final Path.PSimple<Color> eyecolor = _simple("eyecolor",Color.class);
         public final Path.PComparable<java.lang.Integer> id = _comparable("id",java.lang.Integer.class);
-        public final Path.PEntityList<Cat> kittens = _entitylist("kittens",Cat.class);
+        public final Path.PEntityList<Cat> kittens = _entitylist("kittens",Cat.class,"Cat");
         public QCat mate;
         public final Path.PString name = _string("name");
     
         public final Path.PComparable<java.lang.Integer> toes = _comparable("toes",java.lang.Integer.class);
         public final Path.PComparable<java.lang.Integer> weight = _comparable("weight",java.lang.Integer.class);
         public QCat(java.lang.String path) {
-            super(Cat.class, path);
+            super(Cat.class, "Cat", path);
             _mate();
         }
         public QCat(PathMetadata<?> metadata) {
-            super(Cat.class, metadata);
+            super(Cat.class, "Cat", metadata);
         }
         public QCat _mate() {
             if (mate == null) mate = new QCat(forProperty(this,"mate"));

File: querydsl-collections/src/main/java/com/mysema/query/collections/iterators/FilteringIterator.java
Patch:
@@ -1,4 +1,6 @@
-/**
+/*
+ * Copyright (c) 2008 Mysema Ltd.
+ * All rights reserved.
  * 
  */
 package com.mysema.query.collections.iterators;

File: querydsl-collections/src/main/java/com/mysema/query/collections/iterators/IteratorBase.java
Patch:
@@ -1,4 +1,6 @@
-/**
+/*
+ * Copyright (c) 2008 Mysema Ltd.
+ * All rights reserved.
  * 
  */
 package com.mysema.query.collections.iterators;

File: querydsl-collections/src/main/java/com/mysema/query/collections/iterators/ProjectingIterator.java
Patch:
@@ -1,4 +1,6 @@
-/**
+/*
+ * Copyright (c) 2008 Mysema Ltd.
+ * All rights reserved.
  * 
  */
 package com.mysema.query.collections.iterators;

File: querydsl-collections/src/main/java/com/mysema/query/collections/iterators/WrappingIterator.java
Patch:
@@ -1,4 +1,6 @@
-/**
+/*
+ * Copyright (c) 2008 Mysema Ltd.
+ * All rights reserved.
  * 
  */
 package com.mysema.query.collections.iterators;

File: querydsl-hql/src/main/java/com/mysema/query/grammar/HqlQueryBase.java
Patch:
@@ -46,11 +46,13 @@ private String buildQueryString(boolean forCountRow) {
         return serializer.toString();
     }
     
+    @SuppressWarnings("unchecked")
     public A innerJoin(JoinMeta meta, Entity<?> o) {
         joins.add(new JoinExpression<JoinMeta>(JoinType.INNERJOIN, o, meta));
         return (A) this;
     }
     
+    @SuppressWarnings("unchecked")
     public A leftJoin(JoinMeta meta, Entity<?> o) {
         joins.add(new JoinExpression<JoinMeta>(JoinType.LEFTJOIN, o, meta));
         return (A) this;

File: querydsl-hql/src/main/java/com/mysema/query/hql/HqlQuery.java
Patch:
@@ -67,6 +67,7 @@ public HqlQuery limit(int limit) {
         return this;
     }
     
+    @SuppressWarnings("unchecked")
     public <RT> List<RT> list(Expr<RT> expr){
         select(expr);
         String queryString = toString();
@@ -75,6 +76,7 @@ public <RT> List<RT> list(Expr<RT> expr){
         return query.list();
     }
     
+    @SuppressWarnings("unchecked")
     public List<Object[]> list(Expr<?> expr1, Expr<?> expr2, Expr<?>...rest){
         select(expr1, expr2);
         select(rest);

File: querydsl-hql/src/test/java/com/mysema/query/hql/FeaturesTest.java
Patch:
@@ -22,9 +22,9 @@
 import com.mysema.query.grammar.HqlOps;
 import com.mysema.query.grammar.HqlQueryBase;
 import com.mysema.query.grammar.HqlSerializer;
+import com.mysema.query.grammar.types.Constructor;
 import com.mysema.query.grammar.types.Custom;
 import com.mysema.query.grammar.types.Expr;
-import com.mysema.query.grammar.types.HqlTypes.Constructor;
 
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/QueryBase.java
Patch:
@@ -40,7 +40,7 @@ protected void clear(){
     
     private final Metadata metadata = new Metadata();
     
-    public A from(Entity<?>... o) {
+    public A from(Expr.Entity<?>... o) {
         for (Entity<?> expr : o){
             joins.add(new JoinExpression<JoinMeta>(JoinType.DEFAULT,expr));
         }

File: querydsl-apt/src/main/java/com/mysema/query/apt/Field.java
Patch:
@@ -21,6 +21,7 @@ public class Field implements Comparable<Field>{
      */
     public enum Type {
         BOOLEAN, 
+        COMPARABLE,
         ENTITY, 
         ENTITYLIST, 
         ENTITYCOLLECTION, 

File: querydsl-core/src/main/java/com/mysema/query/grammar/types/Expr.java
Patch:
@@ -96,6 +96,8 @@ public static abstract class Entity<D> extends Expr<D>{
     public static abstract class Simple<D> extends Expr<D>{
         public Simple(Class<D> type) {super(type);}
         public Expr<D> as(java.lang.String to){return IntGrammar.as(this, to);}
+        public Boolean in(D... args) {return IntGrammar.in(this,args);}
+        public Boolean in(CollectionType<D> arg) {return IntGrammar.in(this, arg);}
     }
     
     /**

File: querydsl-core/src/main/java/com/mysema/query/grammar/types/Path.java
Patch:
@@ -148,7 +148,7 @@ protected <A> EntityCollection<A> _entitycol(java.lang.String path,Class<A> type
         protected <A> EntityList<A> _entitylist(java.lang.String path,Class<A> type) {
             return new EntityList<A>(type, forProperty(this, path));
         }
-        protected <A> Expr.Simple<A> _simple(java.lang.String path, Class<A> type){
+        protected <A> Path.Simple<A> _simple(java.lang.String path, Class<A> type){
             return new Path.Simple<A>(type, forProperty(this, path));
         }
         protected <A> ComponentCollection<A> _simplecol(java.lang.String path,Class<A> type) {

File: querydsl-hql/src/main/java/com/mysema/query/hibernate/QueryUtil.java
Patch:
@@ -30,10 +30,13 @@ public static void setConstants(Query query, List<?> constants){
             String key = "a"+(i+1);
             Object val = constants.get(i);            
             if (val instanceof Collection<?>){
+                // NOTE : parameter types should be given explicitly
                 query.setParameterList(key,(Collection<?>)val);
             }else if (val.getClass().isArray()){
+                // NOTE : parameter types should be given explicitly
                 query.setParameterList(key,(Object[])val);
             }else{
+                // NOTE : parameter types should be given explicitly
                 query.setParameter(key,val);    
             }
         }

File: querydsl-hql/src/main/java/com/mysema/query/grammar/types/HqlTypes.java
Patch:
@@ -8,7 +8,6 @@
 import com.mysema.query.Query;
 import com.mysema.query.QueryBase;
 import com.mysema.query.grammar.OrderSpecifier;
-import com.mysema.query.grammar.types.Expr.CollectionType;
 
 /**
  * HqlTypes provides

File: querydsl-hql/src/main/java/com/mysema/query/hibernate/QueryUtil.java
Patch:
@@ -44,7 +44,7 @@ public static Expr.Boolean createQBECondition(Path.Entity<?> entity,
         CascadingBoolean expr = new CascadingBoolean();  
         for (Map.Entry<String, Object> entry : map.entrySet()){                
             PathMetadata<String> md = PathMetadata.forProperty(entity, entry.getKey());
-            Path.Literal<Object> path = new Path.Literal<Object>(Object.class, md);
+            Path.Simple<Object> path = new Path.Simple<Object>(Object.class, md);
             if (entry.getValue() != null){
                 expr.and(path.eq(entry.getValue()));
             }else{

File: querydsl-core/src/main/java/com/mysema/query/grammar/Grammar.java
Patch:
@@ -10,8 +10,8 @@
 import static com.mysema.query.grammar.types.Factory.createConstant;
 import static com.mysema.query.grammar.types.Factory.createNumber;
 
+import com.mysema.query.grammar.types.CollectionType;
 import com.mysema.query.grammar.types.Expr;
-import com.mysema.query.grammar.types.Expr.CollectionType;
 
 /**
  * Grammar provides the factory methods for the fluent grammar

File: querydsl-core/src/main/java/com/mysema/query/grammar/types/Expr.java
Patch:
@@ -29,8 +29,6 @@ public static abstract class Boolean extends Literal<java.lang.Boolean>{
         public Boolean or(Boolean right) {return IntGrammar.or(this, right);}
     }
     
-    public interface CollectionType<D>{ }
-    
     public static abstract class Comparable<D extends java.lang.Comparable<D>> extends Literal<D>{
         public Comparable(Class<D> type) {super(type);}
         public Boolean after(D right) {return IntGrammar.after(this,right);}

File: querydsl-core/src/main/java/com/mysema/query/grammar/types/IntGrammar.java
Patch:
@@ -13,7 +13,6 @@
 import com.mysema.query.grammar.Ops;
 import com.mysema.query.grammar.Order;
 import com.mysema.query.grammar.OrderSpecifier;
-import com.mysema.query.grammar.types.Expr.CollectionType;
 
 /**
  * InternalGrammar provides

File: querydsl-core/src/main/java/com/mysema/query/grammar/types/Visitor.java
Patch:
@@ -103,8 +103,6 @@ public final T handle(Expr<?> expr) {
     
     protected abstract void visit(Path.Simple<?> expr);
     
-    protected abstract void visit(Path.Literal<?> expr);
-
     protected abstract void visit(Path.String expr);
     
 }

File: querydsl-core/src/main/java/com/mysema/query/grammar/Grammar.java
Patch:
@@ -39,7 +39,7 @@ public static <A extends Comparable<A>> Expr.Comparable<A> div(Expr<A> left, Exp
     }
     
     public static <A> Expr.Boolean in(A left, CollectionType<A> right){
-        return createBoolean(Op.IN, createConstant(left), (Expr<?>)right);
+        return createBoolean(Ops.IN, createConstant(left), (Expr<?>)right);
     }
 
     public static <A extends Comparable<A>> Expr.Comparable<A> mult(Expr<A> left, A right) {

File: querydsl-hql/src/main/java/com/mysema/query/grammar/HqlGrammar.java
Patch:
@@ -193,7 +193,6 @@ public static Expr.Comparable<Date> sysdate(){
     public static Expr.Comparable<Date> year(Expr<Date> date){
         return createComparable(OpHql.YEAR, date);
     }
-    
-    
+      
         
 }

File: querydsl-hql/src/main/java/com/mysema/query/grammar/HqlSerializer.java
Patch:
@@ -11,13 +11,13 @@
 
 import com.mysema.query.JoinExpression;
 import com.mysema.query.QueryBase;
-import com.mysema.query.grammar.HqlGrammar.*;
 import com.mysema.query.grammar.Ops.Op;
 import com.mysema.query.grammar.types.Alias;
 import com.mysema.query.grammar.types.Expr;
 import com.mysema.query.grammar.types.Operation;
 import com.mysema.query.grammar.types.Path;
 import com.mysema.query.grammar.types.VisitorAdapter;
+import com.mysema.query.grammar.types.HqlTypes.*;
 import com.mysema.query.grammar.types.PathMetadata.PathType;
 
 

File: querydsl-hql/src/test/java/com/mysema/query/grammar/hql/FeaturesTest.java
Patch:
@@ -20,8 +20,8 @@
 import com.mysema.query.grammar.HqlGrammar;
 import com.mysema.query.grammar.HqlQueryBase;
 import com.mysema.query.grammar.HqlSerializer;
-import com.mysema.query.grammar.HqlGrammar.Constructor;
 import com.mysema.query.grammar.types.Expr;
+import com.mysema.query.grammar.types.HqlTypes.Constructor;
 
 
 /**

File: querydsl-hql/src/test/java/com/mysema/query/grammar/hql/FeaturesTest.java
Patch:
@@ -21,7 +21,7 @@
 import com.mysema.query.grammar.HqlQueryBase;
 import com.mysema.query.grammar.HqlSerializer;
 import com.mysema.query.grammar.HqlGrammar.Constructor;
-import com.mysema.query.grammar.Types.Expr;
+import com.mysema.query.grammar.types.Expr;
 
 
 /**

File: querydsl-core/src/main/java/com/mysema/query/dto/DTO.java
Patch:
@@ -5,11 +5,12 @@
  */
 package com.mysema.query.dto;
 
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
 import static java.lang.annotation.ElementType.TYPE;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
 @Target(TYPE) 
 @Retention(RUNTIME)
 

File: querydsl-core/src/main/java/com/mysema/query/grammar/Ops.java
Patch:
@@ -24,7 +24,6 @@ public interface Op<RT> {
         Op<Boolean> ISTYPEOF = new OpImpl<Boolean>();
         Op<Boolean> NE = new OpImpl<Boolean>();
         Op<Boolean> NOTIN =  new OpImpl<Boolean>();
-//        Op<Integer> SIZE = new OpImpl<Integer>();
     }
     
     /**

File: querydsl-hql/src/test/java/com/mysema/query/grammar/hql/HqlParserTest.java
Patch:
@@ -207,8 +207,7 @@ public void testDocoExamples98() throws Exception {
 //        parse( "from eg.Player p where 3 > all elements(p.scores)" );
         from(player).where(all(player.scores).lt(3)).parse();
 //        parse( "from eg.Show show where 'fizard' in indices(show.acts)" );
-        // FIXME
-//        from(show).where(in("fizard",indices(show.acts))).parse();
+        from(show).where(in("fizard",indices(show.acts))).parse();
         
 //        parse( "from Order ord where ord.items[0].id = 1234" );
         from(ord).where(ord.items(0).id.eq(1234l)).parse();

File: querydsl-hibernate/src/main/java/com/mysema/query/hibernate/HqlQuery.java
Patch:
@@ -24,7 +24,7 @@
  * @version $Id$
  */
 @SuppressWarnings("unchecked")
-public class HqlQuery extends HqlQueryBase<HqlQuery>{
+public class HqlQuery<RT> extends HqlQueryBase<HqlQuery<RT>>{
 
     private static final Logger logger = LoggerFactory.getLogger(HqlQuery.class);
 
@@ -63,15 +63,15 @@ public HqlQuery limit(int limit) {
         return this;
     }
     
-    public List list() {
+    public List<RT> list() {
         String queryString = toString();
         logger.debug("query : {}", queryString);
         Query query = createQuery(queryString, limit, offset);
         return query.list();
     }    
 
 
-    public SearchResults<?> listResults() {
+    public SearchResults<RT> listResults() {
         Query query = createQuery(toCountRowsString(), null, null);
         long total = (Long) query.uniqueResult();
         if (total > 0) {

File: querydsl-hibernate/src/main/java/com/mysema/query/grammar/HqlOps.java
Patch:
@@ -72,7 +72,7 @@ public class HqlOps extends Ops {
         
         
         // HQL specific
-        patterns.put(OpHql.DISTINCT, "distinct %s");
+//        patterns.put(OpHql.DISTINCT, "distinct %s");
         patterns.put(OpHql.EXISTS, "exists elements(%s)");
         patterns.put(OpHql.SUM, "sum(%s)");
         patterns.put(OpHql.SYSDATE, "sysdate");
@@ -97,7 +97,7 @@ public interface OpHql<RT>{
         Op<Date> CURRENT_DATE = new OpImpl<Date>();
         Op<Date> CURRENT_TIME = new OpImpl<Date>();
         Op<Date> CURRENT_TIMESTAMP = new OpImpl<Date>();
-        Op<Comparable<?>> DISTINCT = new OpImpl<Comparable<?>>();
+//        Op<Comparable<?>> DISTINCT = new OpImpl<Comparable<?>>();
         Op<Number> SUM = new OpImpl<Number>();
         Op<Date> SYSDATE = new OpImpl<Date>();
         Op<Date> SECOND = new OpImpl<Date>();

File: querydsl-hibernate/src/test/java/com/mysema/query/grammar/hql/HqlIntegrationTest.java
Patch:
@@ -8,6 +8,8 @@
 import antlr.TokenStreamException;
 
 import com.mysema.query.hibernate.QueryUtil;
+import com.mysema.query.util.CustomNamingStrategy;
+import com.mysema.query.util.Hibernate;
 import com.mysema.query.util.HibernateTestRunner;
 
 
@@ -18,6 +20,7 @@
  * @version $Id$
  */
 @RunWith(HibernateTestRunner.class)
+@Hibernate(namingStrategy=CustomNamingStrategy.class, properties="default.properties")
 public class HqlIntegrationTest extends HqlParserTest{
     
     private Session session;

File: querydsl-core/src/main/java/com/mysema/query/QueryBase.java
Patch:
@@ -88,12 +88,13 @@ public A where(ExprBoolean... o) {
         where.addAll(Arrays.asList(o));
         return (A) this;
     }
-
+    
     public A with(ExprBoolean... o) {
         if (!joins.isEmpty()){
             joins.get(joins.size()-1).setConditions(o);
         }
         return (A) this;
     }
+
     
 }

File: querydsl-core/src/main/java/com/mysema/query/QueryBase.java
Patch:
@@ -91,7 +91,7 @@ public A where(ExprBoolean... o) {
 
     public A with(ExprBoolean... o) {
         if (!joins.isEmpty()){
-            joins.get(joins.size()-1).conditions = o;
+            joins.get(joins.size()-1).setConditions(o);
         }
         return (A) this;
     }

File: querydsl-core/src/main/java/com/mysema/query/grammar/PathMetadata.java
Patch:
@@ -6,7 +6,6 @@
 package com.mysema.query.grammar;
 
 import static com.mysema.query.grammar.Grammar.*;
-import com.mysema.query.grammar.Types.ConstantExpr;
 import com.mysema.query.grammar.Types.Expr;
 import com.mysema.query.grammar.Types.Path;
 

File: querydsl-hibernate/src/test/java/com/mysema/query/grammar/hql/domain/Family.java
Patch:
@@ -8,7 +8,7 @@
  * @author tiwe
  * @version $Id$
  */
-@DTO(domainType=Cat.class)
+@DTO
 public class Family {
     public Family(Cat mother, Cat mate, Cat offspr){
         

File: querydsl-hibernate/src/test/java/com/mysema/query/grammar/hql/domain/Foo.java
Patch:
@@ -11,7 +11,7 @@
  * @version $Id$
  */
 @Entity
-@DTO(domainType=Foo.class)
+@DTO
 public class Foo {
     java.util.Date startDate;
     String bar;

File: querydsl-hibernate/src/main/java/com/mysema/query/hibernate/HqlQuery.java
Patch:
@@ -99,7 +99,7 @@ public List list() {
 
     public SearchResults<?> listResults() {
         Query query = createQuery(toCountRowsString(), null, null);
-        long total = (Long) query.list().get(0);
+        long total = (Long) query.uniqueResult();
         if (total > 0) {
             String queryString = toString();
             logger.debug("query : {}", queryString);

File: querydsl-hibernate/src/test/java/com/mysema/query/grammar/hql/domain/Cat.java
Patch:
@@ -14,7 +14,7 @@
 public class Cat {
     Collection<Cat> kittens;
     Cat mate;
-    int bodyWeight;
+    int bodyWeight, id, weight;
     String name;
     boolean alive;    
 }

File: querydsl-core/src/main/java/com/mysema/query/JoinType.java
Patch:
@@ -6,5 +6,5 @@
 package com.mysema.query;
 
 public enum JoinType {
-    DEFAULT, IJ, J, LJ
+    DEFAULT, INNERJOIN, JOIN, LEFTJOIN, FULLJOIN
 }
\ No newline at end of file

File: querydsl-core/src/main/java/com/mysema/query/Query.java
Patch:
@@ -21,6 +21,7 @@ public interface Query<A extends Query<A>>{
     A from(ExprEntity<?>... o);  
     A innerJoin(ExprEntity<?> o);
     A join(ExprEntity<?> o);
+    A fullJoin(ExprEntity<?> o);
     A leftJoin(ExprEntity<?> o);
     A with(ExprBoolean... o);
     A where(ExprBoolean... o);

File: querydsl-hibernate/src/test/java/com/mysema/query/grammar/hql/ThingLinkQueriesTest.java
Patch:
@@ -34,6 +34,7 @@ public void testQuery1(){
         
     }
     
+    @Test
     public void testQuery2(){
 //        "select g._keyword, count(g._keyword) from "
 //        + Thing.class.getName()

File: querydsl-hibernate/src/test/java/com/mysema/query/grammar/hql/domain/AuditLog.java
Patch:
@@ -10,5 +10,5 @@
  */
 @Entity
 public class AuditLog {
-    protected Item item;
+    Item item;
 }

File: querydsl-hibernate/src/test/java/com/mysema/query/grammar/hql/domain/Catalog.java
Patch:
@@ -13,6 +13,6 @@
  */
 @Entity
 public class Catalog {
-    protected Collection<Price> prices;
-    protected Date effectiveDate;
+    Collection<Price> prices;
+    Date effectiveDate;
 }

File: querydsl-hibernate/src/test/java/com/mysema/query/grammar/hql/domain/Customer.java
Patch:
@@ -10,5 +10,5 @@
  */
 @Entity
 public class Customer {
-    protected Name name;    
+    Name name;    
 }

File: querydsl-hibernate/src/test/java/com/mysema/query/grammar/hql/domain/Document.java
Patch:
@@ -12,6 +12,6 @@
  */
 @Entity
 public class Document {
-    protected String name;
-    protected Date validTo;
+    String name;
+    Date validTo;
 }

File: querydsl-hibernate/src/test/java/com/mysema/query/grammar/hql/domain/EvilType.java
Patch:
@@ -10,6 +10,6 @@
  */
 @Entity
 public class EvilType {
-    protected EvilType isnull, isnotnull, asc, desc, get, getType, getMetadata;
-    protected EvilType toString, hashCode, getClass, notify, notifyAll, wait;
+    EvilType isnull, isnotnull, asc, desc, get, getType, getMetadata;
+    EvilType toString, hashCode, getClass, notify, notifyAll, wait;
 }

File: querydsl-hibernate/src/test/java/com/mysema/query/grammar/hql/domain/Item.java
Patch:
@@ -10,6 +10,6 @@
  */
 @Entity
 public class Item {
-    protected long id;
-    protected Product product;    
+    long id;
+    Product product;    
 }

File: querydsl-hibernate/src/test/java/com/mysema/query/grammar/hql/domain/Name.java
Patch:
@@ -10,5 +10,5 @@
  */
 @Entity
 public class Name {
-    protected String firstName, lastName;    
+    String firstName, lastName;    
 }

File: querydsl-hibernate/src/test/java/com/mysema/query/grammar/hql/domain/Price.java
Patch:
@@ -10,6 +10,6 @@
  */
 @Entity
 public class Price {
-    protected long amount;
-    protected Product product;
+    long amount;
+    Product product;
 }

File: querydsl-hibernate/src/test/java/com/mysema/query/grammar/hql/domain/User.java
Patch:
@@ -11,7 +11,7 @@
  */
 @Entity
 public class User {
-    protected Company company;
-    protected long id;
-    protected String userName, firstName, lastName;    
+    Company company;
+    long id;
+    String userName, firstName, lastName;    
 }

File: querydsl-core/src/main/java/com/mysema/query/Query.java
Patch:
@@ -8,7 +8,7 @@
 import com.mysema.query.grammar.Types.ExprBoolean;
 import com.mysema.query.grammar.Types.ExprEntity;
 import com.mysema.query.grammar.Types.Expr;
-import com.mysema.query.grammar.Types.OrderSpecifier;
+import com.mysema.query.grammar.OrderSpecifier;
 
 /**
  * Query provides a the query interface of the fluent query DSL

File: querydsl-hibernate/src/test/java/com/mysema/query/grammar/hql/domain/EvilType.java
Patch:
@@ -10,6 +10,6 @@
  */
 @Entity
 public class EvilType {
-    protected EvilType isnull, isnotnull, asc, desc, get, _type, path, _parent;
+    protected EvilType isnull, isnotnull, asc, desc, get, getType, getMetadata;
     protected EvilType toString, hashCode, getClass, notify, notifyAll, wait;
 }

File: querydsl-hibernate/src/main/java/com/mysema/query/grammar/HqlGrammar.java
Patch:
@@ -98,7 +98,6 @@ public Constructor(Class<D> type, Expr<?>... args){
             super(type);
             this.args = args;
         }
-        public Class<D> getType(){ return type;}
     }
     
     public static class CountExpr extends ExprComparable<Long>{

File: querydsl-hibernate/src/main/java/com/mysema/query/grammar/HqlOps.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import com.mysema.query.grammar.Ops.Op;
+import com.mysema.query.grammar.Ops;
 
 /**
  * Ops provides

File: querydsl-hibernate/src/test/java/com/mysema/query/grammar/hql/domain/EvilType.java
Patch:
@@ -10,5 +10,6 @@
  */
 @Entity
 public class EvilType {
-    protected EvilType isnull, isnotnull, asc, desc, get, toString, hashCode, getClass, notify, notifyAll, wait;
+    protected EvilType isnull, isnotnull, asc, desc, get, _type, path, _parent;
+    protected EvilType toString, hashCode, getClass, notify, notifyAll, wait;
 }

File: src/main/java/com/mysema/query/grammar/Types.java
Patch:
@@ -125,7 +125,7 @@ public static class OperationTertiary<OP,RT extends OP,F,S,T> extends Operation<
     public static class OperationTertiaryBoolean<F,S,T> extends OperationTertiary<Boolean,Boolean,F,S,T>
         implements ExprBoolean{  
         public ExprBoolean and(ExprBoolean right) {return Grammar.and(this, right);}
-        public ExprBoolean or(ExprBoolean right) {return Grammar.and(this, right);}
+        public ExprBoolean or(ExprBoolean right) {return Grammar.or(this, right);}
     }
     
     public static class OperationUnary<OP,RT extends OP,A> extends Operation<RT>{
@@ -139,7 +139,7 @@ public static class OperationUnary<OP,RT extends OP,A> extends Operation<RT>{
     public static class OperationUnaryBoolean<A> extends OperationUnary<Boolean,Boolean,A>
         implements ExprBoolean{
         public ExprBoolean and(ExprBoolean right) {return Grammar.and(this, right);}
-        public ExprBoolean or(ExprBoolean right) {return Grammar.and(this, right);}
+        public ExprBoolean or(ExprBoolean right) {return Grammar.or(this, right);}
     }
     
     public enum Order{ ASC,DESC }
@@ -162,7 +162,7 @@ public Path(String p) {
     public static class PathBoolean extends PathNoEntity<Boolean> implements ExprBoolean{
         PathBoolean(String path) {super(path);}
         public ExprBoolean and(ExprBoolean right) {return Grammar.and(this, right);}
-        public ExprBoolean or(ExprBoolean right) {return Grammar.and(this, right);}        
+        public ExprBoolean or(ExprBoolean right) {return Grammar.or(this, right);}        
     }
     
     public static class PathEntity<D> extends Path<D> implements ExprEntity<D>{

File: src/main/java/com/mysema/query/grammar/Types.java
Patch:
@@ -91,9 +91,9 @@ protected DomainType(DomainType<?> type, String path) {
             super(type+"."+path);
         } 
         protected DomainType(String path) {super(path);}
-        public EntityExpr<D> as(DomainType<D> to){
-            return new Alias<D>(this, to);
-        }
+//        public EntityExpr<D> as(DomainType<D> to){
+//            return new Alias<D>(this, to);
+//        }
         protected BooleanProperty _boolean(String path){
             return new BooleanProperty(this+"."+path);
         }

File: src/test/java/com/mysema/query/test/QueryTest.java
Patch:
@@ -38,7 +38,7 @@ public void testVarious(){
         select(lower(cat.name)).from(cat).where(eq(substr(cat.name,0,2),"Mi"));
         select(upper(cat.name)).from(cat);
         select(concat(lower(cat.name),cat.mate().name)).from(cat);
-        cat.as(kitten);
+        as(cat,kitten);
 //        cat.as(company); // not allowed
 //        asc(cust.name()); // not allowed
         asc(cust.name().firstName);
@@ -68,7 +68,7 @@ public void testOperations(){
     public void testCat1(){
 //      from Cat as cat left join cat.kittens as kitten 
 //          with kitten.bodyWeight > 10.0
-        from(cat).leftJoin(cat.kittens().as(kitten))
+        from(cat).leftJoin(as(cat.kittens(),kitten))
             .with(gt(kitten.bodyWeight,10));            
     }
     
@@ -77,7 +77,7 @@ public void testCat2(){
 //      from Cat as cat inner join fetch cat.mate
 //          left join fetch cat.kittens child left join fetch child.kittens
         from(cat).innerJoin(cat.mate())
-            .leftJoin(cat.kittens().as(child)).leftJoin(child.kittens());
+            .leftJoin(as(cat.kittens(),child)).leftJoin(child.kittens());
     }
    
     @Test

File: src/main/java/com/mysema/query/ExtQuery.java
Patch:
@@ -5,7 +5,8 @@
  */
 package com.mysema.query;
 
-import com.mysema.query.grammar.Types.*;
+import com.mysema.query.grammar.Types.BooleanExpr;
+import com.mysema.query.grammar.Types.EntityExpr;
 
 /**
  * ExtQuery externds the Query interface to provide innerJoin, leftJoin and with methods

