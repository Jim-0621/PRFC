File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/HeroClass.java
Patch:
@@ -28,7 +28,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.QuickSlot;
 import com.shatteredpixel.shatteredpixeldungeon.SPDSettings;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.ArmorAbility;
-import com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.Ratmogrify;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Challenge;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.ElementalStrike;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.duelist.Feint;
@@ -41,6 +40,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.DeathMark;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.ShadowClone;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.rogue.SmokeBomb;
+import com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.warrior.Endure;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.warrior.HeroicLeap;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.warrior.Shockwave;
 import com.shatteredpixel.shatteredpixeldungeon.items.BrokenSeal;
@@ -249,7 +249,7 @@ public HeroSubClass[] subClasses() {
 	public ArmorAbility[] armorAbilities(){
 		switch (this) {
 			case WARRIOR: default:
-				return new ArmorAbility[]{new HeroicLeap(), new Shockwave(), new Ratmogrify()};
+				return new ArmorAbility[]{new HeroicLeap(), new Shockwave(), new Endure()};
 			case MAGE:
 				return new ArmorAbility[]{new ElementalBlast(), new WildMagic(), new WarpBeacon()};
 			case ROGUE:

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTransmutation.java
Patch:
@@ -79,9 +79,9 @@ protected boolean usableOnItem(Item item) {
 		} else if (item instanceof Potion){
 			return !(item instanceof Elixir || item instanceof Brew);
 
-		//all regular or exotic scrolls, except itself
+		//all regular or exotic scrolls, except itself (unless un-ided, in which case it was already consumed)
 		} else if (item instanceof Scroll){
-			return item != this || item.quantity() > 1;
+			return item != this || item.quantity() > 1 || identifiedByUse;
 
 		//all rings, wands, artifacts, trinkets, seeds, and runestones
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTeleportation.java
Patch:
@@ -302,12 +302,14 @@ public static void appear( Char ch, int pos ) {
 		}
 	}
 
-	//just plays the VFX for teleporting, without any position changes
+	//just plays the VFX for teleporting, without any position changes, does re-press cells though
 	public static void appearVFX( Char ch ){
 		if (Dungeon.level.heroFOV[ch.pos]){
 			Sample.INSTANCE.play(Assets.Sounds.TELEPORT);
 		}
 
+		Dungeon.level.occupyCell(ch);
+
 		if (ch.invisible == 0) {
 			ch.sprite.alpha( 0 );
 			ch.sprite.parent.add( new AlphaTweener( ch.sprite, 1, 0.4f ) );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Imp.java
Patch:
@@ -34,6 +34,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring;
 import com.shatteredpixel.shatteredpixeldungeon.journal.Notes;
 import com.shatteredpixel.shatteredpixeldungeon.levels.CityLevel;
+import com.shatteredpixel.shatteredpixeldungeon.levels.Level;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Terrain;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
@@ -231,7 +232,7 @@ public static void spawn( CityLevel level ) {
 				spawned = true;
 
 				//imp always spawns on an empty tile, for better visibility
-				level.map[ npc.pos ] = Terrain.EMPTY;
+				Level.set( npc.pos, Terrain.EMPTY, level);
 
 				//always assigns monks on floor 17, golems on floor 19, and 50/50 between either on 18
 				switch (Dungeon.depth){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/Bomb.java
Patch:
@@ -28,7 +28,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
-import com.shatteredpixel.shatteredpixeldungeon.effects.Beam;
 import com.shatteredpixel.shatteredpixeldungeon.effects.CellEmitter;
 import com.shatteredpixel.shatteredpixeldungeon.effects.particles.BlastParticle;
 import com.shatteredpixel.shatteredpixeldungeon.effects.particles.SmokeParticle;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/FlashBangBomb.java
Patch:
@@ -71,7 +71,7 @@ public void explode(int cell) {
 		for (Char ch : affected){
 			//25% bonus damage and 10 turns of stun
 			int damage = Math.round(Random.NormalIntRange(4 + Dungeon.scalingDepth(), 12 + 3*Dungeon.scalingDepth()) / 4f);
-			ch.damage(damage, Electricity.class);
+			ch.damage(damage, new Electricity());
 			if (ch.isAlive()) Buff.prolong(ch, Paralysis.class, Paralysis.DURATION);
 			arcs.add(new Lightning.Arc(DungeonTilemap.tileCenterToWorld(cell), ch.sprite.center()));
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/CursedWand.java
Patch:
@@ -1007,6 +1007,7 @@ public boolean effect(Item origin, Char user, Ballistica bolt, boolean positiveO
 		VERY_RARE_EFFECTS.add(new HeroShapeShift());
 		VERY_RARE_EFFECTS.add(new SuperNova());
 		VERY_RARE_EFFECTS.add(new SinkHole());
+		VERY_RARE_EFFECTS.add(new GravityChaos());
 	}
 
 	public static CursedEffect randomVeryRareEffect(){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v2_X_Changes.java
Patch:
@@ -93,7 +93,7 @@ public static void add_v2_5_Changes( ArrayList<ChangeInfo> changeInfos ) {
 		changes.hardlight(Window.TITLE_COLOR);
 		changeInfos.add(changes);
 
-		changes = new ChangeInfo("v2.5.3-BETA-1", false, null);
+		changes = new ChangeInfo("v2.5.3", false, null);
 		changes.hardlight(Window.TITLE_COLOR);
 		changeInfos.add(changes);
 
@@ -145,7 +145,6 @@ public static void add_v2_5_Changes( ArrayList<ChangeInfo> changeInfos ) {
 				"_-_ Scroll of Upgrade uses counting twice in the new catalog\n" +
 				"_-_ Liquid Nature using the wrong position for thrown potions\n" +
 				"_-_ Invisibility vfx persisting in rare cases when they shouldn't\n" +
-				"_-_ Bombs not destroying terrain during the beta for v2.5.3\n" +
 				"\n" +
 				"_Existed Prior to v2.5.0:_\n" +
 				"_-_ Various rare crash bugs\n" +

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mimic.java
Patch:
@@ -313,7 +313,7 @@ public static Mimic spawnAt( int pos, Class mimicType, boolean useDecks, Item...
 		}
 
 		m.items = new ArrayList<>( Arrays.asList(items) );
-		m.setLevel( Dungeon.depth );
+		m.setLevel( Dungeon.scalingDepth() );
 		m.pos = pos;
 
 		//generate an extra reward for killing the mimic

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/YogDzewa.java
Patch:
@@ -503,7 +503,7 @@ public void clearEnemy() {
 
 	@Override
 	public void aggro(Char ch) {
-		if (ch.alignment != alignment || !(ch instanceof Larva || ch instanceof YogRipper || ch instanceof YogEye || ch instanceof YogScorpio)) {
+		if (ch != null && ch.alignment != alignment || !(ch instanceof Larva || ch instanceof YogRipper || ch instanceof YogEye || ch instanceof YogScorpio)) {
 			for (Mob mob : (Iterable<Mob>) Dungeon.level.mobs.clone()) {
 				if (mob != ch && Dungeon.level.distance(pos, mob.pos) <= 4 && mob.alignment == alignment &&
 						(mob instanceof Larva || mob instanceof YogRipper || mob instanceof YogEye || mob instanceof YogScorpio)) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java
Patch:
@@ -55,7 +55,7 @@ public ShatteredPixelDungeon( PlatformSupport platform ) {
 				"com.shatteredpixel.shatteredpixeldungeon.items.bombs.ShockBomb" );
 		com.watabou.utils.Bundle.addAlias(
 				com.shatteredpixel.shatteredpixeldungeon.items.bombs.SmokeBomb.class,
-				"com.shatteredpixel.shatteredpixeldungeon.items.bombs.FlashBang" );
+				"com.shatteredpixel.shatteredpixeldungeon.items.bombs.Flashbang" );
 
 		//pre-v2.5.0
 		com.watabou.utils.Bundle.addAlias(

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/quest/MineEntrance.java
Patch:
@@ -78,6 +78,9 @@ public void paint(Level level) {
 					valid = true;
 				}
 			}
+			if (height() == 7 && width() == 7){
+				valid = true;
+			}
 		} while (level.findMob(entrance) != null || !valid);
 		Painter.set( level, entrance, Terrain.ENTRANCE );
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfFireblast.java
Patch:
@@ -201,7 +201,7 @@ public void fx(Ballistica bolt, Callback callback) {
 	@Override
 	protected int chargesPerCast() {
 		if (cursed ||
-				(charger != null && charger.target == null && charger.target.buff(WildMagic.WildMagicTracker.class) != null)){
+				(charger != null && charger.target != null && charger.target.buff(WildMagic.WildMagicTracker.class) != null)){
 			return 1;
 		}
 		//consumes 30% of current charges, rounded up, with a min of 1 and a max of 3.

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfRegrowth.java
Patch:
@@ -277,7 +277,7 @@ public void fx(Ballistica bolt, Callback callback) {
 	@Override
 	protected int chargesPerCast() {
 		if (cursed ||
-				(charger != null && charger.target == null && charger.target.buff(WildMagic.WildMagicTracker.class) != null)){
+				(charger != null && charger.target != null && charger.target.buff(WildMagic.WildMagicTracker.class) != null)){
 			return 1;
 		}
 		//consumes 30% of current charges, rounded up, with a min of 1 and a max of 3.

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Ooze.java
Patch:
@@ -89,15 +89,13 @@ public boolean act() {
 			detach();
 		} else if (target.isAlive()) {
 
+			acted = true;
 			if (Dungeon.scalingDepth() > 5) {
 				target.damage(1 + Dungeon.scalingDepth() / 5, this);
-				acted = true;
 			} else if (Dungeon.scalingDepth() == 5){
 				target.damage(1, this); //1 dmg per turn vs Goo
-				acted = true;
 			} else if (Random.Int(2) == 0) {
 				target.damage(1, this); //0.5 dmg per turn in sewers
-				acted = true;
 			}
 
 			if (!target.isAlive() && target == Dungeon.hero) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/stones/StoneOfAggression.java
Patch:
@@ -47,7 +47,7 @@ protected void activate(int cell) {
 		Char ch = Actor.findChar( cell );
 		
 		if (ch != null) {
-			if (ch.alignment == Char.Alignment.ENEMY) {
+			if (Char.hasProp(ch, Char.Property.BOSS) || Char.hasProp(ch, Char.Property.MINIBOSS)) {
 				Buff.prolong(ch, Aggression.class, Aggression.DURATION / 4f);
 			} else {
 				Buff.prolong(ch, Aggression.class, Aggression.DURATION);
@@ -80,7 +80,7 @@ public int icon() {
 
 		@Override
 		public float iconFadePercent() {
-			if (target.alignment == Char.Alignment.ENEMY){
+			if (Char.hasProp(target, Char.Property.BOSS) || Char.hasProp(target, Char.Property.MINIBOSS)){
 				return Math.max(0, (DURATION/4f - visualcooldown()) / (DURATION/4f));
 			} else {
 				return Math.max(0, (DURATION - visualcooldown()) / DURATION);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/SandalsOfNature.java
Patch:
@@ -35,6 +35,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.bags.Bag;
 import com.shatteredpixel.shatteredpixeldungeon.items.bags.VelvetPouch;
 import com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfEnergy;
+import com.shatteredpixel.shatteredpixeldungeon.journal.Catalog;
 import com.shatteredpixel.shatteredpixeldungeon.mechanics.Ballistica;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.plants.Blindweed;
@@ -308,7 +309,7 @@ public void onSelect( Item item ) {
 				if (seeds.size() >= 3+(level()*3)){
 					seeds.clear();
 					upgrade();
-
+					Catalog.countUses(SandalsOfNature.class, level() == 3 ? 4 : 3);
 					if (level() >= 1 && level() <= 3) {
 						GLog.p( Messages.get(SandalsOfNature.class, "levelup") );
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfUpgrade.java
Patch:
@@ -135,7 +135,6 @@ public Item upgradeItem( Item item ){
 		Badges.validateMageUnlock();
 
 		Catalog.countUse(item.getClass());
-		Catalog.countUse(ScrollOfUpgrade.class);
 
 		return item;
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/MagicalInfusion.java
Patch:
@@ -103,7 +103,6 @@ public Item upgradeItem( Item item ){
 		Badges.validateItemLevelAquired(item);
 
 		Catalog.countUse(item.getClass());
-		Catalog.countUse(getClass());
 
 		Statistics.upgradesUsed++;
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/GameLog.java
Patch:
@@ -95,7 +95,6 @@ public synchronized void update() {
 				} else {
 
 					lastEntry = PixelScene.renderTextBlock( text, 6 );
-					lastEntry.setHightlighting( false );
 					lastEntry.hardlight( color );
 					lastColor = color;
 					add( lastEntry );
@@ -155,6 +154,7 @@ protected void layout() {
 		float pos = y;
 		for (int i=length-1; i >= 0; i--) {
 			RenderedTextBlock entry = (RenderedTextBlock)members.get( i );
+			entry.setHightlighting(false);
 			entry.maxWidth((int)width);
 			entry.setPos(x, pos-entry.height());
 			pos -= entry.height()+2;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/ScrollingGridPane.java
Patch:
@@ -70,6 +70,7 @@ public void addHeader( String text, int size, boolean center ){
 	public synchronized void clear() {
 		content.clear();
 		items.clear();
+		separators.clear();
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndDailies.java
Patch:
@@ -95,7 +95,7 @@ protected void onPointerUp() {
 
 		top = (int) score.bottom() + 6;
 
-		NumberFormat num = NumberFormat.getInstance(Locale.US);
+		NumberFormat num = NumberFormat.getInstance(Messages.locale());
 		DateFormat format = new SimpleDateFormat("yyyy-MM-dd", Locale.ROOT);
 		format.setTimeZone(TimeZone.getTimeZone("UTC"));
 		Date date = new Date();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndRanking.java
Patch:
@@ -190,7 +190,7 @@ public StatsTab() {
 
 			pos = date.bottom()+5;
 
-			NumberFormat num = NumberFormat.getInstance(Locale.US);
+			NumberFormat num = NumberFormat.getInstance(Messages.locale());
 
 			if (Dungeon.hero == null){
 				pos = statSlot( this, Messages.get(this, "score"), num.format( record.score ), pos );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndScoreBreakdown.java
Patch:
@@ -32,7 +32,6 @@
 import com.watabou.noosa.Group;
 
 import java.text.NumberFormat;
-import java.util.Locale;
 
 public class WndScoreBreakdown extends Window {
 
@@ -48,7 +47,7 @@ public WndScoreBreakdown(){
 
 		float pos = title.bottom()+2;
 
-		NumberFormat num = NumberFormat.getInstance(Locale.US);
+		NumberFormat num = NumberFormat.getInstance(Messages.locale());
 		if (Dungeon.initialVersion > ShatteredPixelDungeon.v1_2_3) {
 			pos = statSlot(this, Messages.get(this, "progress_title"),
 					num.format(Statistics.progressScore), pos, Statistics.progressScore >= 50_000);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/Potion.java
Patch:
@@ -320,7 +320,7 @@ protected void onThrow( int cell ) {
 			if (!anonymous) {
 				Catalog.countUse(getClass());
 				if (Random.Float() < talentChance) {
-					Talent.onPotionUsed(curUser, curUser.pos, talentFactor);
+					Talent.onPotionUsed(curUser, cell, talentFactor);
 				}
 			}
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Rat.java
Patch:
@@ -36,8 +36,6 @@ public class Rat extends Mob {
 		HP = HT = 8;
 		defenseSkill = 2;
 
-		flying = true;
-		
 		maxLvl = 5;
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -1332,7 +1332,7 @@ public static void afterObserve() {
 		if (scene != null) {
 			for (Mob mob : Dungeon.level.mobs.toArray(new Mob[0])) {
 				if (mob.sprite != null) {
-					if (mob instanceof Mimic && mob.state == mob.PASSIVE && ((Mimic) mob).stealthy() &&  mob.sprite.visible){
+					if (mob instanceof Mimic && mob.state == mob.PASSIVE && ((Mimic) mob).stealthy() && Dungeon.level.visited[mob.pos]){
 						//mimics stay visible in fog of war after being first seen
 						mob.sprite.visible = true;
 					} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/Ratmogrify.java
Patch:
@@ -302,7 +302,7 @@ public void rollToDropLoot() {
 		@Override
 		public void destroy() {
 			super.destroy();
-			if (alignment == Alignment.ENEMY) {
+			if (alignment == Alignment.ENEMY && original != null) {
 				Bestiary.setSeen(original.getClass());
 				Bestiary.countEncounter(original.getClass());
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/trinkets/ShardOfOblivion.java
Patch:
@@ -81,7 +81,7 @@ public void execute(Hero hero, String action) {
 			curItem = this;
 			GameScene.selectItem(identifySelector);
 		} else {
-			super.execute(hero);
+			super.execute(hero, action);
 		}
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -429,8 +429,9 @@ public void restoreFromBundle( Bundle bundle ) {
 		}
 
 		feeling = bundle.getEnum( FEELING, Feeling.class );
-		if (feeling == Feeling.DARK)
-			viewDistance = Math.round(viewDistance/2f);
+		if (feeling == Feeling.DARK) {
+			viewDistance = Math.round(5 * viewDistance / 8f);
+		}
 
 		if (bundle.contains( "mobs_to_spawn" )) {
 			for (Class<? extends Mob> mob : bundle.getClassArray("mobs_to_spawn")) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/InterlevelScene.java
Patch:
@@ -274,7 +274,7 @@ public void update() {
 					add(storyBG);
 					add(storyMessage);
 
-					btnContinue = new StyledButton(Chrome.Type.TOAST_TR, "Continue", 9){
+					btnContinue = new StyledButton(Chrome.Type.TOAST_TR, Messages.get(InterlevelScene.class, "continue"), 9){
 						@Override
 						protected void onClick() {
 							phase = Phase.FADE_OUT;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM300.java
Patch:
@@ -323,7 +323,7 @@ public void move(int step, boolean travelling) {
 
 		if (travelling) PixelScene.shake( supercharged ? 3 : 1, 0.25f );
 
-		if (Dungeon.level.map[pos] == Terrain.INACTIVE_TRAP && state == HUNTING) {
+		if (!flying && Dungeon.level.map[pos] == Terrain.INACTIVE_TRAP && state == HUNTING) {
 
 			//don't gain energy from cells that are energized
 			if (CavesBossLevel.PylonEnergy.volumeAt(pos, CavesBossLevel.PylonEnergy.class) > 0){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Goo.java
Patch:
@@ -106,7 +106,7 @@ public boolean act() {
 			sprite.idle();
 		}
 
-		if (Dungeon.level.water[pos] && HP < HT) {
+		if (!flying && Dungeon.level.water[pos] && HP < HT) {
 			HP += healInc;
 			Statistics.qualifiedForBossChallengeBadge = false;
 

File: desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopPlatformSupport.java
Patch:
@@ -57,7 +57,7 @@ public void updateDisplaySize() {
 		}
 	}
 
-	private static boolean first = false;
+	private static boolean first = true;
 
 	@Override
 	public void updateSystemUI() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/SandalsOfNature.java
Patch:
@@ -242,14 +242,14 @@ public boolean canUseSeed(Item item){
 	@Override
 	public void storeInBundle( Bundle bundle ) {
 		super.storeInBundle(bundle);
-		bundle.put(SEEDS, seeds.toArray(new Class[seeds.size()]));
+		bundle.put(SEEDS, seeds.toArray(new Class[0]));
 		bundle.put(CUR_SEED_EFFECT, curSeedEffect);
 	}
 
 	@Override
 	public void restoreFromBundle( Bundle bundle ) {
 		super.restoreFromBundle(bundle);
-		if (bundle.contains(SEEDS)) {
+		if (bundle.contains(SEEDS) && bundle.getClassArray(SEEDS) != null) {
 			Collections.addAll(seeds, bundle.getClassArray(SEEDS));
 		}
 		curSeedEffect = bundle.getClass(CUR_SEED_EFFECT);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Item.java
Patch:
@@ -512,7 +512,8 @@ public String info() {
 				note = Notes.findCustomRecord(getClass());
 			}
 			if (note != null){
-				return Messages.get(this, "custom_note", note.title()) + "\n\n" + desc();
+				//we swap underscore(0x5F) with low macron(0x2CD) here to avoid highlighting in the item window
+				return Messages.get(this, "custom_note", note.title().replace('_', 'ˍ')) + "\n\n" + desc();
 			}
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/Ring.java
Patch:
@@ -187,7 +187,8 @@ public String info(){
 		} else if (Notes.findCustomRecord(customNoteID) == null) {
 			Notes.CustomRecord note = Notes.findCustomRecord(getClass());
 			if (note != null){
-				desc = Messages.get(this, "custom_note", note.title()) + "\n\n" + super.info();
+				//we swap underscore(0x5F) with low macron(0x2CD) here to avoid highlighting in the item window
+				desc = Messages.get(this, "custom_note", note.title().replace('_', 'ˍ')) + "\n\n" + super.info();
 			} else {
 				desc = super.info();
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndJournal.java
Patch:
@@ -363,7 +363,7 @@ protected void layout() {
 			updateList();
 		}
 		
-		private void updateList() {
+		public void updateList() {
 
 			if (currentPageIdx != -1 && !Document.ALCHEMY_GUIDE.isPageFound(currentPageIdx)){
 				currentPageIdx = -1;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Statue.java
Patch:
@@ -173,7 +173,6 @@ public float spawningWeight() {
 
 	@Override
 	public boolean reset() {
-		state = PASSIVE;
 		return true;
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Pylon.java
Patch:
@@ -228,8 +228,8 @@ public void storeInBundle(Bundle bundle) {
 
 	@Override
 	public void restoreFromBundle(Bundle bundle) {
-		super.restoreFromBundle(bundle);
 		alignment = bundle.getEnum(ALIGNMENT, Alignment.class);
+		super.restoreFromBundle(bundle);
 		targetNeighbor = bundle.getInt(TARGET_NEIGHBOUR);
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/trinkets/ChaoticCenser.java
Patch:
@@ -109,8 +109,8 @@ public boolean act() {
 				if (safeAreaDelay >= 0) {
 					for (Char ch : Actor.chars()) {
 						if (ch instanceof Shopkeeper
-								&& Dungeon.level.distance(target.pos, ch.pos) <= 5
-								&& new Ballistica(target.pos, ch.pos, Ballistica.STOP_SOLID).collisionPos == ch.pos) {
+								&& Dungeon.level.distance(target.pos, ch.pos) <= 6
+								&& new Ballistica(target.pos, ch.pos, Ballistica.PROJECTILE).collisionPos == ch.pos) {
 							int delay = Random.NormalIntRange(2, 8);
 							spend(delay);
 							safeAreaDelay -= delay;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -593,10 +593,13 @@ public void draw() {
 			if (Document.ADVENTURERS_GUIDE.isPageFound(Document.GUIDE_INTRO)){
 				GameScene.flashForDocument(Document.ADVENTURERS_GUIDE, Document.GUIDE_INTRO);
 			} else if (ControllerHandler.isControllerConnected()) {
+				GameLog.wipe();
 				GLog.p(Messages.get(GameScene.class, "tutorial_move_controller"));
 			} else if (SPDSettings.interfaceSize() == 0) {
+				GameLog.wipe();
 				GLog.p(Messages.get(GameScene.class, "tutorial_move_mobile"));
 			} else {
+				GameLog.wipe();
 				GLog.p(Messages.get(GameScene.class, "tutorial_move_desktop"));
 			}
 			toolbar.visible = toolbar.active = false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/InterlevelScene.java
Patch:
@@ -281,6 +281,7 @@ protected void onClick() {
 							timeLeft = fadeTime;
 
 							btnContinue.enable(false);
+							Document.INTROS.readPage(region);
 						}
 					};
 					btnContinue.icon(Icons.STAIRS.get());
@@ -312,6 +313,7 @@ protected void updateValues(float progress) {
 									phase = Phase.FADE_OUT;
 									timeLeft = fadeTime;
 									btnContinue.enable(false);
+									Document.INTROS.readPage(region);
 								}
 								return true;
 							}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/TitleScene.java
Patch:
@@ -150,7 +150,7 @@ protected void onClick() {
 		add(btnRankings);
 		Dungeon.daily = Dungeon.dailyReplay = false;
 
-		StyledButton btnBadges = new StyledButton(GREY_TR, "Journal"){
+		StyledButton btnBadges = new StyledButton(GREY_TR, Messages.get(this, "journal")){
 			@Override
 			protected void onClick() {
 				ShatteredPixelDungeon.switchNoFade( JournalScene.class );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/CursedWand.java
Patch:
@@ -648,7 +648,7 @@ public boolean effect(Item origin, Char user, Ballistica bolt, boolean positiveO
 				mob.beckon( user.pos );
 			}
 			user.sprite.centerEmitter().start( Speck.factory( Speck.SCREAM ), 0.3f, 3 );
-			if (!positiveOnly){
+			if (positiveOnly){
 				Buff.affect(user, ScrollOfChallenge.ChallengeArena.class).setup(user.pos);
 				Sample.INSTANCE.play( Assets.Sounds.CHALLENGE );
 			} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/Potion.java
Patch:
@@ -379,7 +379,7 @@ public String name() {
 	@Override
 	public String info() {
 		//skip custom notes if anonymized and un-Ided
-		return (anonymous && (handler == null || !handler.isKnown( this ))) ? super.desc() : super.info();
+		return (anonymous && (handler == null || !handler.isKnown( this ))) ? desc() : super.info();
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/Ring.java
Patch:
@@ -181,7 +181,7 @@ public String info(){
 		//skip custom notes if anonymized and un-Ided
 		String desc;
 		if (anonymous && (handler == null || !handler.isKnown( this ))){
-			desc = super.desc();
+			desc = desc();
 		} else {
 			//otherwise, check for item type note too, rings can have either
 			Notes.CustomRecord note = Notes.findCustomRecord(getClass());

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/Scroll.java
Patch:
@@ -242,7 +242,7 @@ public String name() {
 	@Override
 	public String info() {
 		//skip custom notes if anonymized and un-Ided
-		return (anonymous && (handler == null || !handler.isKnown( this ))) ? super.desc() : super.info();
+		return (anonymous && (handler == null || !handler.isKnown( this ))) ? desc() : super.info();
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/RipperDemon.java
Patch:
@@ -196,7 +196,7 @@ public void call() {
 								leapVictim.sprite.flash();
 								Sample.INSTANCE.play(Assets.Sounds.HIT);
 							} else {
-								enemy.sprite.showStatus( CharSprite.NEUTRAL, enemy.defenseVerb() );
+								leapVictim.sprite.showStatus( CharSprite.NEUTRAL, leapVictim.defenseVerb() );
 								Sample.INSTANCE.play(Assets.Sounds.MISS);
 							}
 						}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/TitleScene.java
Patch:
@@ -352,7 +352,7 @@ public void update() {
 		@Override
 		protected void onClick() {
 			if (Messages.lang().status() == Languages.Status.X_UNFINISH){
-				WndSettings.last_index = 4;
+				WndSettings.last_index = 5;
 			}
 			ShatteredPixelDungeon.scene().add(new WndSettings());
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/BadgesGrid.java
Patch:
@@ -139,7 +139,7 @@ public void update() {
 		@Override
 		protected void onClick() {
 			Sample.INSTANCE.play( Assets.Sounds.CLICK, 0.7f, 0.7f, 1.2f );
-			Game.scene().add( new WndBadge( badge, unlocked ) );
+			Game.scene().addToFront( new WndBadge( badge, unlocked ) );
 		}
 
 		@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/BadgesList.java
Patch:
@@ -120,7 +120,7 @@ protected void layout() {
 		public boolean onClick( float x, float y ) {
 			if (inside( x, y )) {
 				Sample.INSTANCE.play( Assets.Sounds.CLICK, 0.7f, 0.7f, 1.2f );
-				Game.scene().add( new WndBadge( badge, true ) );
+				Game.scene().addToFront( new WndBadge( badge, true ) );
 				return true;
 			} else {
 				return false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/CursedWand.java
Patch:
@@ -559,7 +559,7 @@ public boolean effect(Item origin, Char user, Ballistica bolt, boolean positiveO
 			user.sprite.parent.add(new Lightning(pos - 1 - Dungeon.level.width(), pos + 1 + Dungeon.level.width(), null));
 			user.sprite.parent.add(new Lightning(pos - 1 + Dungeon.level.width(), pos + 1 - Dungeon.level.width(), null));
 			for (int i : PathFinder.NEIGHBOURS9){
-				if (Actor.findChar(pos+i) != null){
+				if (Actor.findChar(pos+i) != null && !affected.contains(Actor.findChar(pos+i))){
 					affected.add(Actor.findChar(pos+i));
 				}
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/stones/StoneOfAugmentation.java
Patch:
@@ -62,7 +62,7 @@ public void apply( Weapon weapon, Weapon.Augment augment ) {
 		useAnimation();
 		ScrollOfUpgrade.upgrade(curUser);
 		curItem.detach( curUser.belongings.backpack );
-		
+		Catalog.countUse(getClass());
 	}
 	
 	public void apply( Armor armor, Armor.Augment augment ) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/stones/StoneOfIntuition.java
Patch:
@@ -114,7 +114,7 @@ public WndGuess(final Item item){
 				protected void onClick() {
 					super.onClick();
 					useAnimation();
-					Catalog.countUse(getClass());
+					Catalog.countUse(StoneOfIntuition.class);
 					if (item.getClass() == curGuess){
 						if (item instanceof Ring){
 							((Ring) item).setKnown();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/RankingsScene.java
Patch:
@@ -160,8 +160,8 @@ protected void onPointerUp() {
 				}
 			};
 			btnDailies.icon().hardlight(0.5f, 1f, 2f);
-			btnDailies.setRect( left, 0, 20, 20 );
-			left += 20;
+			btnDailies.setRect( left, 0, 16, 20 );
+			left += 16;
 			add(btnDailies);
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/trinkets/DimensionalSundial.java
Patch:
@@ -36,7 +36,7 @@ public class DimensionalSundial extends Trinket {
 
 	@Override
 	protected int upgradeEnergyCost() {
-		//5 -> 8(13) -> 10(23) -> 12(35)
+		//6 -> 8(14) -> 10(24) -> 12(36)
 		return 6+2*level();
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/trinkets/ExoticCrystals.java
Patch:
@@ -32,7 +32,7 @@ public class ExoticCrystals extends Trinket {
 
 	@Override
 	protected int upgradeEnergyCost() {
-		//5 -> 8(13) -> 10(23) -> 12(35)
+		//6 -> 8(14) -> 10(24) -> 12(36)
 		return 6+2*level();
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/trinkets/EyeOfNewt.java
Patch:
@@ -32,7 +32,7 @@ public class EyeOfNewt extends Trinket {
 
 	@Override
 	protected int upgradeEnergyCost() {
-		//5 -> 8(13) -> 10(23) -> 12(35)
+		//6 -> 8(14) -> 10(24) -> 12(36)
 		return 6+2*level();
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/trinkets/MimicTooth.java
Patch:
@@ -32,7 +32,7 @@ public class MimicTooth extends Trinket {
 
 	@Override
 	protected int upgradeEnergyCost() {
-		//5 -> 8(13) -> 10(23) -> 12(35)
+		//6 -> 8(14) -> 10(24) -> 12(36)
 		return 6+2*level();
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/trinkets/MossyClump.java
Patch:
@@ -38,7 +38,7 @@ public class MossyClump extends Trinket {
 
 	@Override
 	protected int upgradeEnergyCost() {
-		//5 -> 15(20) -> 20(40) -> 25(65)
+		//6 -> 15(21) -> 20(41) -> 25(66)
 		return 15+5*level();
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/trinkets/ParchmentScrap.java
Patch:
@@ -32,7 +32,7 @@ public class ParchmentScrap extends Trinket {
 
 	@Override
 	protected int upgradeEnergyCost() {
-		//5 -> 10(15) -> 15(30) -> 20(50)
+		//6 -> 10(16) -> 15(31) -> 20(51)
 		return 10+5*level();
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/trinkets/PetrifiedSeed.java
Patch:
@@ -32,7 +32,7 @@ public class PetrifiedSeed extends Trinket {
 
 	@Override
 	protected int upgradeEnergyCost() {
-		//5 -> 8(13) -> 10(23) -> 12(35)
+		//6 -> 8(14) -> 10(24) -> 12(36)
 		return 6+2*level();
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/trinkets/RatSkull.java
Patch:
@@ -32,7 +32,7 @@ public class RatSkull extends Trinket {
 
 	@Override
 	protected int upgradeEnergyCost() {
-		//5 -> 8(13) -> 10(23) -> 12(35)
+		//6 -> 8(14) -> 10(24) -> 12(36)
 		return 6+2*level();
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/trinkets/SaltCube.java
Patch:
@@ -32,7 +32,7 @@ public class SaltCube extends Trinket {
 
 	@Override
 	protected int upgradeEnergyCost() {
-		//5 -> 8(13) -> 10(23) -> 12(35)
+		//6 -> 8(14) -> 10(24) -> 12(36)
 		return 6+2*level();
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/trinkets/ShardOfOblivion.java
Patch:
@@ -54,7 +54,7 @@ public class ShardOfOblivion extends Trinket {
 
 	@Override
 	protected int upgradeEnergyCost() {
-		//5 -> 8(13) -> 10(23) -> 12(35)
+		//6 -> 8(14) -> 10(24) -> 12(36)
 		return 6+2*level();
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/trinkets/ThirteenLeafClover.java
Patch:
@@ -33,7 +33,7 @@ public class ThirteenLeafClover extends Trinket {
 
 	@Override
 	protected int upgradeEnergyCost() {
-		//5 -> 5(10) -> 7(17) -> 8(25)
+		//6 -> 5(11) -> 7(18) -> 8(26)
 		return Math.round(5+1.67f*level());
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/trinkets/TrapMechanism.java
Patch:
@@ -38,7 +38,7 @@ public class TrapMechanism extends Trinket {
 
 	@Override
 	protected int upgradeEnergyCost() {
-		//5 -> 5(10) -> 7(17) -> 8(25)
+		//6 -> 5(11) -> 7(18) -> 8(26)
 		return Math.round(5+1.67f*level());
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/trinkets/VialOfBlood.java
Patch:
@@ -33,7 +33,7 @@ public class VialOfBlood extends Trinket {
 
 	@Override
 	protected int upgradeEnergyCost() {
-		//5 -> 8(13) -> 10(23) -> 12(35)
+		//6 -> 8(14) -> 10(24) -> 12(36)
 		return 6+2*level();
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/trinkets/WondrousResin.java
Patch:
@@ -32,7 +32,7 @@ public class WondrousResin extends Trinket {
 
 	@Override
 	protected int upgradeEnergyCost() {
-		//5 -> 10(15) -> 15(30) -> 20(50)
+		//6 -> 10(16) -> 15(31) -> 20(51)
 		return 10+5*level();
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/InterlevelScene.java
Patch:
@@ -210,7 +210,7 @@ public void create() {
 		Random.popGenerator();
 		
 		if (DeviceCompat.isDebug()){
-			fadeTime = 1f;
+			fadeTime = 0f;
 		}
 
 		Image background = new Image(loadingAsset);
@@ -266,7 +266,7 @@ public void update() {
 		align(loadingText);
 		add(loadingText);
 
-		if (mode == Mode.DESCEND && lastRegion <= 5){
+		if (mode == Mode.DESCEND && lastRegion <= 5 && !DeviceCompat.isDebug()){
 			if (Dungeon.hero == null || (loadingDepth > Statistics.deepestFloor && loadingDepth % 5 == 1)){
 					storyMessage = PixelScene.renderTextBlock(Document.INTROS.pageBody(region), 6);
 					storyMessage.maxWidth( PixelScene.landscape() ? 180 : 125);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/ReclaimTrap.java
Patch:
@@ -74,6 +74,7 @@ protected void affectTarget(Ballistica bolt, Hero hero) {
 				Sample.INSTANCE.play(Assets.Sounds.LIGHTNING);
 				ScrollOfRecharging.charge(hero);
 				storedTrap = t.getClass();
+				Bestiary.setSeen(t.getClass());
 				
 			} else {
 				GLog.w(Messages.get(this, "no_trap"));
@@ -84,7 +85,7 @@ protected void affectTarget(Ballistica bolt, Hero hero) {
 			storedTrap = null;
 			
 			t.pos = bolt.collisionPos;
-			Bestiary.setSeen(t.getClass());
+			t.reclaimed = true;
 			Bestiary.countEncounter(t.getClass());
 			t.activate();
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/DisintegrationTrap.java
Patch:
@@ -88,6 +88,7 @@ public void activate() {
 					Badges.validateDeathFromGrimOrDisintTrap();
 					Dungeon.fail( this );
 					GLog.n( Messages.get(this, "ondeath") );
+					if (reclaimed) Badges.validateDeathFromFriendlyMagic();
 				}
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/GnollRockfallTrap.java
Patch:
@@ -22,6 +22,7 @@
 package com.shatteredpixel.shatteredpixeldungeon.levels.traps;
 
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
+import com.shatteredpixel.shatteredpixeldungeon.Badges;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
@@ -90,6 +91,7 @@ public void activate() {
 				if (!ch.isAlive() && ch == Dungeon.hero){
 					Dungeon.fail( this );
 					GLog.n( Messages.get(this, "ondeath") );
+					if (reclaimed) Badges.validateDeathFromFriendlyMagic();
 				}
 			} else if (ch == null
 					&& Dungeon.level instanceof MiningLevel

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/GrimTrap.java
Patch:
@@ -110,6 +110,7 @@ public void call() {
 												Badges.validateDeathFromGrimOrDisintTrap();
 												Dungeon.fail( GrimTrap.this );
 												GLog.n( Messages.get(GrimTrap.class, "ondeath") );
+												if (reclaimed) Badges.validateDeathFromFriendlyMagic();
 											}
 										} else {
 											Sample.INSTANCE.play(Assets.Sounds.BURNING);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/PoisonDartTrap.java
Patch:
@@ -22,6 +22,7 @@
 package com.shatteredpixel.shatteredpixeldungeon.levels.traps;
 
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
+import com.shatteredpixel.shatteredpixeldungeon.Badges;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon;
 import com.shatteredpixel.shatteredpixeldungeon.Statistics;
@@ -116,6 +117,7 @@ public void call() {
 											if (!finalTarget.isAlive()) {
 												Dungeon.fail(PoisonDartTrap.this);
 												GLog.n(Messages.get(PoisonDartTrap.class, "ondeath"));
+												if (reclaimed) Badges.validateDeathFromFriendlyMagic();
 											}
 										}
 										Buff.affect( finalTarget, Poison.class ).set( poisonAmount() );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/RockfallTrap.java
Patch:
@@ -22,6 +22,7 @@
 package com.shatteredpixel.shatteredpixeldungeon.levels.traps;
 
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
+import com.shatteredpixel.shatteredpixeldungeon.Badges;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
@@ -103,6 +104,7 @@ public void activate() {
 				if (!ch.isAlive() && ch == Dungeon.hero){
 					Dungeon.fail( this );
 					GLog.n( Messages.get(this, "ondeath") );
+					if (reclaimed) Badges.validateDeathFromFriendlyMagic();
 				}
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/Trap.java
Patch:
@@ -56,6 +56,7 @@ public abstract class Trap implements Bundlable {
 	public int shape;
 
 	public int pos;
+	public boolean reclaimed = false; //if this trap was spawned by reclaim trap
 
 	public boolean visible;
 	public boolean active = true;
@@ -111,7 +112,7 @@ public void disarm(){
 	//If the trap is part of the level, it should use the true depth
 	//If it's not part of the level (e.g. effect from reclaim trap), use scaling depth
 	protected int scalingDepth(){
-		return Dungeon.level.traps.get(pos) == this ? Dungeon.depth : Dungeon.scalingDepth();
+		return (reclaimed || Dungeon.level.traps.get(pos) != this) ? Dungeon.scalingDepth() : Dungeon.depth;
 	}
 
 	public String name(){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/WornDartTrap.java
Patch:
@@ -22,6 +22,7 @@
 package com.shatteredpixel.shatteredpixeldungeon.levels.traps;
 
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
+import com.shatteredpixel.shatteredpixeldungeon.Badges;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
@@ -95,6 +96,7 @@ public void call() {
 										if (finalTarget == Dungeon.hero && !finalTarget.isAlive()){
 											Dungeon.fail( WornDartTrap.this  );
 											GLog.n(Messages.get(WornDartTrap.class, "ondeath"));
+											if (reclaimed) Badges.validateDeathFromFriendlyMagic();
 										}
 										Sample.INSTANCE.play(Assets.Sounds.HIT, 1, 1, Random.Float(0.8f, 1.25f));
 										finalTarget.sprite.bloodBurstA(finalTarget.sprite.center(), dmg);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -440,8 +440,8 @@ public boolean add( Buff buff ) {
 	@Override
 	public boolean remove( Buff buff ) {
 		if (super.remove( buff )) {
-			if ((buff instanceof Terror && buff(Dread.class) == null)
-					|| (buff instanceof Dread && buff(Terror.class) == null)) {
+			if (state == FLEEING && ((buff instanceof Terror && buff(Dread.class) == null)
+					|| (buff instanceof Dread && buff(Terror.class) == null))) {
 				if (enemySeen) {
 					sprite.showStatus(CharSprite.WARNING, Messages.get(this, "rage"));
 					state = HUNTING;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Badges.java
Patch:
@@ -672,7 +672,9 @@ public static void validateCatalogBadges(){
 		}
 
 		//doesn't actually use catalogs, but triggers at the same time effectively
-		if (!local.contains(Badge.CATALOG_POTIONS_SCROLLS) && Potion.allKnown() && Scroll.allKnown()){
+		if (!local.contains(Badge.CATALOG_POTIONS_SCROLLS)
+				&& Potion.allKnown() && Scroll.allKnown()
+				&& Dungeon.hero != null && Dungeon.hero.isAlive()){
 			local.add(Badge.CATALOG_POTIONS_SCROLLS);
 			displayBadge(Badge.CATALOG_POTIONS_SCROLLS);
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/journal/Notes.java
Patch:
@@ -631,7 +631,9 @@ public static CustomRecord findCustomRecord( int ID ){
 
 	public static CustomRecord findCustomRecord( Class itemClass ){
 		for (Record rec : records){
-			if (rec instanceof CustomRecord && ((CustomRecord) rec).itemClass == itemClass)
+			if (rec instanceof CustomRecord
+					&& ((CustomRecord) rec).itemClass == itemClass
+					&& ((CustomRecord) rec).ID == -1)
 				return (CustomRecord) rec;
 		}
 		return null;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Spear.java
Patch:
@@ -116,7 +116,7 @@ public void call() {
 						trajectory = new Ballistica(trajectory.collisionPos, trajectory.path.get(trajectory.path.size() - 1), Ballistica.PROJECTILE);
 						//knock them back along that ballistica
 						WandOfBlastWave.throwChar(enemy, trajectory, 1, true, false, hero);
-					} else {
+					} else if (!enemy.isAlive()) {
 						wep.onAbilityKill(hero, enemy);
 					}
 					Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -61,6 +61,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfTeleportation;
 import com.shatteredpixel.shatteredpixeldungeon.items.trinkets.DimensionalSundial;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon;
+import com.shatteredpixel.shatteredpixeldungeon.journal.Bestiary;
 import com.shatteredpixel.shatteredpixeldungeon.journal.Catalog;
 import com.shatteredpixel.shatteredpixeldungeon.journal.Document;
 import com.shatteredpixel.shatteredpixeldungeon.journal.Journal;
@@ -1574,11 +1575,11 @@ public static void examineObject(Object o){
 		} else if ( o instanceof Plant ){
 			GameScene.show( new WndInfoPlant((Plant) o) );
 			//plants can be harmful to trample, so let the player ID just by examine
-			Catalog.setSeen(o.getClass());
+			Bestiary.setSeen(o.getClass());
 		} else if ( o instanceof Trap ){
 			GameScene.show( new WndInfoTrap((Trap) o));
 			//traps are often harmful to trigger, so let the player ID just by examine
-			Catalog.setSeen(o.getClass());
+			Bestiary.setSeen(o.getClass());
 		} else {
 			GameScene.show( new WndMessage( Messages.get(GameScene.class, "dont_know") ) ) ;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -113,6 +113,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Grim;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Kinetic;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Shocking;
+import com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Sickle;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.ShockingDart;
@@ -479,7 +480,7 @@ public boolean attack( Char enemy, float dmgMulti, float dmgBonus, float accMult
 			}
 
 			Talent.CombinedLethalityAbilityTracker combinedLethality = buff(Talent.CombinedLethalityAbilityTracker.class);
-			if (combinedLethality != null && this instanceof Hero &&  combinedLethality.weapon != ((Hero) this).belongings.attackingWeapon()){
+			if (combinedLethality != null && this instanceof Hero && ((Hero) this).belongings.attackingWeapon() instanceof MeleeWeapon && combinedLethality.weapon != ((Hero) this).belongings.attackingWeapon()){
 				if ( enemy.isAlive() && enemy.alignment != alignment && !Char.hasProp(enemy, Property.BOSS)
 						&& !Char.hasProp(enemy, Property.MINIBOSS) &&
 						(enemy.HP/(float)enemy.HT) <= 0.4f*((Hero)this).pointsInTalent(Talent.COMBINED_LETHALITY)/3f) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfUpgrade.java
Patch:
@@ -66,6 +66,7 @@ protected void onItemSelected( Item item ) {
 
 	public void reShowSelector(boolean force){
 		identifiedByUse = force;
+		curItem = this;
 		GameScene.selectItem(itemSelector);
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/MagicalInfusion.java
Patch:
@@ -64,6 +64,7 @@ protected void onItemSelected( Item item ) {
 	}
 
 	public void reShowSelector(){
+		curItem = this;
 		GameScene.selectItem(itemSelector);
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/CustomNoteButton.java
Patch:
@@ -156,6 +156,9 @@ public boolean hideAfterSelecting() {
 		@Override
 		public boolean itemSelectable(Item item) {
 			if (item instanceof EquipableItem){
+				if (item instanceof Ring && Notes.findCustomRecord(item.getClass()) != null){
+					return false;
+				}
 				return ((EquipableItem) item).customNoteID == -1
 						|| Notes.findCustomRecord(((EquipableItem) item).customNoteID) == null;
 			} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Invulnerability.java
Patch:
@@ -35,7 +35,7 @@ public class Invulnerability extends FlavourBuff {
 
 	@Override
 	public void fx(boolean on) {
-		if (target.buff(ChampionEnemy.class) != null) return;
+		if (!target.buffs(ChampionEnemy.class).isEmpty()) return;
 		if (on) target.sprite.aura( 0xFFFF00 );
 		else target.sprite.clearAura();
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/CursedWand.java
Patch:
@@ -576,8 +576,9 @@ public boolean effect(Item origin, Char user, Ballistica bolt, boolean positiveO
 				if (ch.alignment != Char.Alignment.ALLY || !positiveOnly){
 					//shocking dart damage and a little stun
 					ch.damage(Random.NormalIntRange(5 + Dungeon.scalingDepth() / 4, 10 + Dungeon.scalingDepth() / 4), new Electricity());
-					Buff.affect(ch, Paralysis.class, Paralysis.DURATION/2f);
-					if (!ch.isAlive() && ch == Dungeon.hero){
+					if (ch.isAlive()) {
+						Buff.affect(ch, Paralysis.class, Paralysis.DURATION / 2f);
+					} else if (ch == Dungeon.hero){
 						if (user == Dungeon.hero && origin != null) {
 							Badges.validateDeathFromFriendlyMagic();
 							Dungeon.fail( origin );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfCorrosion.java
Patch:
@@ -132,6 +132,6 @@ public String upgradeStat1(int level) {
 
 	@Override
 	public String upgradeStat2(int level) {
-		return (1+.2f*level) + "x";
+		return Messages.decimalFormat("#.##x", 1+.2f*level);
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndUpgrade.java
Patch:
@@ -417,7 +417,7 @@ protected void onClick() {
 
 				hide();
 
-				if (moreUpgradeItem != null){
+				if (moreUpgradeItem != null && toUpgrade.isUpgradable()){
 					GameScene.show(new WndUpgrade(moreUpgradeItem, upgraded, false));
 				}
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/Potion.java
Patch:
@@ -379,7 +379,7 @@ public String name() {
 	@Override
 	public String info() {
 		//skip custom notes if anonymized and un-Ided
-		return (anonymous && !handler.isKnown( this )) ? super.desc() : super.info();
+		return (anonymous && (handler == null || !handler.isKnown( this ))) ? super.desc() : super.info();
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/Ring.java
Patch:
@@ -177,7 +177,7 @@ public String desc() {
 	public String info(){
 
 		//skip custom notes if anonymized and un-Ided
-		String desc = (anonymous && !handler.isKnown( this )) ? super.desc() : super.info();
+		String desc = (anonymous && (handler == null || !handler.isKnown( this ))) ? super.desc() : super.info();
 		
 		if (cursed && isEquipped( Dungeon.hero )) {
 			desc += "\n\n" + Messages.get(Ring.class, "cursed_worn");

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/Scroll.java
Patch:
@@ -242,7 +242,7 @@ public String name() {
 	@Override
 	public String info() {
 		//skip custom notes if anonymized and un-Ided
-		return (anonymous && !handler.isKnown( this )) ? super.desc() : super.info();
+		return (anonymous && (handler == null || !handler.isKnown( this ))) ? super.desc() : super.info();
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/trinkets/PetrifiedSeed.java
Patch:
@@ -39,12 +39,11 @@ protected int upgradeEnergyCost() {
 	@Override
 	public String statsDesc() {
 		if (isIdentified()){
-
 			return Messages.get(this, "stats_desc",
 					Messages.decimalFormat("#.##", 100*stoneInsteadOfSeedChance(buffedLvl())),
 					Messages.decimalFormat("#.##", 100*(grassLootMultiplier(buffedLvl())-1f)));
 		} else {
-			return Messages.get(this, "stats_desc",
+			return Messages.get(this, "typical_stats_desc",
 					Messages.decimalFormat("#.##", 100*stoneInsteadOfSeedChance(0)),
 					Messages.decimalFormat("#.##", 100*(grassLootMultiplier(0)-1f)));
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/Potion.java
Patch:
@@ -379,7 +379,7 @@ public String name() {
 	@Override
 	public String info() {
 		//skip custom notes if anonymized and un-Ided
-		return (anonymous && !isIdentified()) ? super.desc() : super.info();
+		return (anonymous && !handler.isKnown( this )) ? super.desc() : super.info();
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/Ring.java
Patch:
@@ -177,7 +177,7 @@ public String desc() {
 	public String info(){
 
 		//skip custom notes if anonymized and un-Ided
-		String desc = (anonymous && !isIdentified()) ? super.desc() : super.info();
+		String desc = (anonymous && !handler.isKnown( this )) ? super.desc() : super.info();
 		
 		if (cursed && isEquipped( Dungeon.hero )) {
 			desc += "\n\n" + Messages.get(Ring.class, "cursed_worn");

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/Scroll.java
Patch:
@@ -242,7 +242,7 @@ public String name() {
 	@Override
 	public String info() {
 		//skip custom notes if anonymized and un-Ided
-		return (anonymous && !isIdentified()) ? super.desc() : super.info();
+		return (anonymous && !handler.isKnown( this )) ? super.desc() : super.info();
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Badges.java
Patch:
@@ -638,7 +638,7 @@ public static void validateCatalogBadges(){
 			unlock(badge);
 			badge = Badge.RESEARCHER_3;
 		}
-		if (totalSeen >= 360) {
+		if (totalSeen >= 320) {
 			unlock(badge);
 			badge = Badge.RESEARCHER_4;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Badges.java
Patch:
@@ -145,7 +145,7 @@ public enum Badge {
 		BOSS_SLAIN_4                ( 78 ),
 		ALL_RINGS_IDENTIFIED        , //still exists internally for pre-2.5 saves
 		ALL_ARTIFACTS_IDENTIFIED    , //still exists internally for pre-2.5 saves
-		ALL_RARE_ENEMIES            ( 79 ),
+		ALL_RARE_ENEMIES            ( 79, true ),
 		DEATH_FROM_GRIM_TRAP        ( 80 ), //also disintegration traps
 		VICTORY                     ( 81 ),
 		BOSS_CHALLENGE_1            ( 82 ),

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndUpgrade.java
Patch:
@@ -214,8 +214,8 @@ public WndUpgrade( Item upgrader, Item toUpgrade, boolean force){
 		if (toUpgrade instanceof Armor){
 			Armor.Augment aug = ((Armor) toUpgrade).augment;
 			bottom = fillFields(Messages.get(this, "blocking"),
-					((Armor) toUpgrade).DRMin(levelFrom) + "-" + (((Armor) toUpgrade).DRMax(levelFrom) + aug.defenseFactor(levelFrom)),
-					((Armor) toUpgrade).DRMin(levelTo) + "-" +  (((Armor) toUpgrade).DRMax(levelTo) + aug.defenseFactor(levelTo)),
+					((Armor) toUpgrade).DRMin(levelFrom) + "-" + (((Armor) toUpgrade).DRMax(levelFrom)),
+					((Armor) toUpgrade).DRMin(levelTo) + "-" +  (((Armor) toUpgrade).DRMax(levelTo)),
 					bottom);
 		} else if (toUpgrade instanceof RoundShield){
 			bottom = fillFields(Messages.get(this, "blocking"),

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/JournalScene.java
Patch:
@@ -82,6 +82,7 @@ public void create() {
 		float top = 20;
 
 		IconTitle title = new IconTitle( Icons.JOURNAL.get(), Messages.get(this, "title") );
+		title.setSize(200, 0);
 		title.setPos(
 				(w - title.reqWidth()) / 2f,
 				(top - title.height()) / 2f

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/darts/Dart.java
Patch:
@@ -112,8 +112,9 @@ public int max(int lvl) {
 	protected static Crossbow bow;
 	
 	private void updateCrossbow(){
-		if (Dungeon.hero == null) return;
-		if (Dungeon.hero.belongings.weapon() instanceof Crossbow){
+		if (Dungeon.hero == null) {
+			bow = null;
+		} else if (Dungeon.hero.belongings.weapon() instanceof Crossbow){
 			bow = (Crossbow) Dungeon.hero.belongings.weapon();
 		} else if (Dungeon.hero.belongings.secondWep() instanceof Crossbow) {
 			//player can instant swap anyway, so this is just QoL

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/darts/TippedDart.java
Patch:
@@ -198,7 +198,7 @@ public float durabilityPerUse() {
 		float usages = Math.round(MAX_DURABILITY/use);
 
 		//grants 3+lvl extra uses with charged shot
-		if (bow != null && Dungeon.hero.buff(Crossbow.ChargedShot.class) != null){
+		if (bow != null && Dungeon.hero != null && Dungeon.hero.buff(Crossbow.ChargedShot.class) != null){
 			usages += 3 + bow.buffedLvl();
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndUpgrade.java
Patch:
@@ -82,7 +82,7 @@ public WndUpgrade( Item upgrader, Item toUpgrade, boolean force){
 		int quantity = upgrader.quantity();
 		Item moreUpgradeItem = Dungeon.hero.belongings.getItem(upgrader.getClass());
 
-		if (moreUpgradeItem != upgrader){
+		if (moreUpgradeItem != null && moreUpgradeItem != upgrader){
 			quantity += moreUpgradeItem.quantity();
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Rapier.java
Patch:
@@ -167,6 +167,7 @@ public void call() {
 						charger.charges--;
 						charger.partialCharge++;
 					}
+					updateQuickslot();
 					GLog.w(Messages.get(Rapier.class, "ability_no_target"));
 					hero.spendAndNext(1/hero.speed());
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/CrystalGuardian.java
Patch:
@@ -30,6 +30,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.effects.FloatingText;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Splash;
+import com.shatteredpixel.shatteredpixeldungeon.journal.Bestiary;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Level;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Terrain;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
@@ -138,6 +139,8 @@ public boolean isAlive() {
 
 			if (!recovering) {
 				recovering = true;
+				Bestiary.setSeen(getClass());
+				Bestiary.countEncounter(getClass());
 				if (sprite != null) ((CrystalGuardianSprite) sprite).crumple();
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndJournal.java
Patch:
@@ -27,6 +27,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon;
 import com.shatteredpixel.shatteredpixeldungeon.Statistics;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalSpire;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mimic;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Pylon;
@@ -849,7 +850,7 @@ private static void addGridEntities(ScrollingGridPane grid, Collection<Class<?>>
 
 				mob = (Mob) Reflection.newInstance(entityCls);
 
-				if (mob instanceof Mimic || mob instanceof Pylon) {
+				if (mob instanceof Mimic || mob instanceof Pylon || mob instanceof CrystalSpire) {
 					mob.alignment = Char.Alignment.ENEMY;
 				}
 				if (mob instanceof WandOfWarding.Ward){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTransmutation.java
Patch:
@@ -302,6 +302,7 @@ private static Trinket changeTrinket( Trinket t ){
 
 		n.level(t.trueLevel());
 		n.levelKnown = t.levelKnown;
+		n.cursedKnown = t.cursedKnown;
 		n.cursed = t.cursed;
 
 		return n;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/trinkets/SaltCube.java
Patch:
@@ -41,12 +41,12 @@ public String statsDesc() {
 		if (isIdentified()){
 			return Messages.get(this,
 					"stats_desc",
-					Messages.decimalFormat("#.##", 100*(1f-hungerGainMultiplier(buffedLvl()))),
+					Messages.decimalFormat("#.##", 100*((1f/hungerGainMultiplier(buffedLvl()))-1f)),
 					Messages.decimalFormat("#.##", 100*(1f-healthRegenMultiplier(buffedLvl()))));
 		} else {
 			return Messages.get(this,
 					"typical_stats_desc",
-					Messages.decimalFormat("#.##", 100*(1f-hungerGainMultiplier(buffedLvl()))),
+					Messages.decimalFormat("#.##", 100*((1f/hungerGainMultiplier(buffedLvl()))-1f)),
 					Messages.decimalFormat("#.##", 100*(1f-healthRegenMultiplier(buffedLvl()))));
 		}
 	}
@@ -59,7 +59,7 @@ public static float hungerGainMultiplier( int level ){
 		if (level == -1){
 			return 1;
 		} else {
-			return 1f - 0.125f*(level+1);
+			return 1f / (1f + 0.125f*(level+1));
 		}
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Icons.java
Patch:
@@ -435,7 +435,8 @@ private static int runTypeOfsX(){
 	}
 
 	private static int runTypeOfsY(){
-		if (Dungeon.dailyReplay || !Dungeon.customSeedText.isEmpty()){
+		if ((Dungeon.daily && Dungeon.dailyReplay)
+				|| (!Dungeon.daily && !Dungeon.customSeedText.isEmpty())){
 			return 8;
 		} else {
 			return 0;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfHaste.java
Patch:
@@ -48,7 +48,7 @@ public String statsInfo() {
 
 	public String upgradeStat1(int level){
 		if (cursed && cursedKnown) level = Math.min(-1, level-3);
-		return Messages.decimalFormat("#.##", 100f * (Math.pow(1.75f, level+1)-1f)) + "%";
+		return Messages.decimalFormat("#.##", 100f * (Math.pow(1.175f, level+1)-1f)) + "%";
 	}
 	
 	@Override
@@ -57,7 +57,7 @@ protected RingBuff buff( ) {
 	}
 	
 	public static float speedMultiplier( Char target ){
-		return (float)Math.pow(1.75, getBuffedBonus(target, Haste.class));
+		return (float)Math.pow(1.175, getBuffedBonus(target, Haste.class));
 	}
 	
 	public class Haste extends RingBuff {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/PitfallTrap.java
Patch:
@@ -63,7 +63,7 @@ public void activate() {
 		for (int i : PathFinder.NEIGHBOURS9){
 			if (!Dungeon.level.solid[pos+i] || Dungeon.level.passable[pos+i]){
 				CellEmitter.floor(pos+i).burst(PitfallParticle.FACTORY4, 8);
-				positions.add(i);
+				positions.add(pos+i);
 			}
 		}
 		p.setPositions(positions);
@@ -95,7 +95,8 @@ public boolean act() {
 			if (depth == Dungeon.depth && branch == Dungeon.branch && positions != null) {
 				for (int cell : positions) {
 
-					if (Dungeon.level.solid[cell] && !Dungeon.level.passable[cell]){
+					if (!Dungeon.level.insideMap(cell)
+							|| (Dungeon.level.solid[cell] && !Dungeon.level.passable[cell])){
 						continue;
 					}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/InterlevelScene.java
Patch:
@@ -133,7 +133,7 @@ public void create() {
 					if (Statistics.deepestFloor >= loadingDepth) {
 						fadeTime = FAST_FADE;
 					} else if (loadingDepth == 6 || loadingDepth == 11
-							|| loadingDepth == 16 || loadingDepth == 21) {
+							|| loadingDepth == 16 || loadingDepth == 21 || loadingDepth == 26) {
 						fadeTime = SLOW_FADE;
 					}
 				}
@@ -264,7 +264,7 @@ public void update() {
 		align(loadingText);
 		add(loadingText);
 
-		if (mode == Mode.DESCEND){
+		if (mode == Mode.DESCEND && lastRegion <= 5){
 			if (Dungeon.hero == null || (loadingDepth > Statistics.deepestFloor && loadingDepth % 5 == 1)){
 					storyMessage = PixelScene.renderTextBlock(Document.INTROS.pageBody(region), 6);
 					storyMessage.maxWidth( PixelScene.landscape() ? 180 : 125);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/trinkets/VialOfBlood.java
Patch:
@@ -28,7 +28,7 @@
 public class VialOfBlood extends Trinket {
 
 	{
-		image = ItemSpriteSheet.ARTIFACT_HOURGLASS;
+		image = ItemSpriteSheet.BLOOD_VIAL;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/ItemSpriteSheet.java
Patch:
@@ -488,6 +488,7 @@ private static void assignItemRect( int item, int width, int height ){
 	public static final int WONDROUS_RESIN  = TRINKETS+9;
 	public static final int EYE_OF_NEWT     = TRINKETS+10;
 	public static final int SALT_CUBE       = TRINKETS+11;
+	public static final int BLOOD_VIAL      = TRINKETS+12;
 	static{
 		assignItemRect(RAT_SKULL,       16, 11);
 		assignItemRect(PARCHMENT_SCRAP, 10, 14);
@@ -501,6 +502,7 @@ private static void assignItemRect( int item, int width, int height ){
 		assignItemRect(WONDROUS_RESIN,  12, 11);
 		assignItemRect(EYE_OF_NEWT,     12, 12);
 		assignItemRect(SALT_CUBE,       12, 13);
+		assignItemRect(BLOOD_VIAL,      6,  15);
 	}
 
 	private static final int SCROLLS        =                               xy(1, 19);  //16 slots

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/CursedWand.java
Patch:
@@ -120,7 +120,7 @@ public class CursedWand {
 	public static void cursedZap(final Item origin, final Char user, final Ballistica bolt, final Callback afterZap){
 
 		boolean positiveOnly = user == Dungeon.hero && Random.Float() < WondrousResin.positiveCurseEffectChance();
-		CursedEffect effect = new GravityChaos();
+		CursedEffect effect = randomValidEffect(origin, user, bolt, positiveOnly);
 
 		effect.FX(origin, user, bolt, new Callback() {
 			@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndJournal.java
Patch:
@@ -926,7 +926,7 @@ private static void addGridEntities(ScrollingGridPane grid, Collection<Class<?>>
 				} else {
 					icon.lightness(0f);
 					title = "???";
-					desc = Messages.get(CatalogTab.class, "not_seen_trap");
+					desc = Messages.get(CatalogTab.class, "not_seen_plant");
 				}
 
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM300.java
Patch:
@@ -319,14 +319,14 @@ public void move(int step, boolean travelling) {
 
 		if (travelling) PixelScene.shake( supercharged ? 3 : 1, 0.25f );
 
-		if (Dungeon.level.map[step] == Terrain.INACTIVE_TRAP && state == HUNTING) {
+		if (Dungeon.level.map[pos] == Terrain.INACTIVE_TRAP && state == HUNTING) {
 
 			//don't gain energy from cells that are energized
 			if (CavesBossLevel.PylonEnergy.volumeAt(pos, CavesBossLevel.PylonEnergy.class) > 0){
 				return;
 			}
 
-			if (Dungeon.level.heroFOV[step]) {
+			if (Dungeon.level.heroFOV[pos]) {
 				if (buff(Barrier.class) == null) {
 					GLog.w(Messages.get(this, "shield"));
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/PixelScene.java
Patch:
@@ -385,6 +385,7 @@ public void call() {
 					}
 
 					WndJournal.last_index = 4;
+					WndJournal.BadgesTab.global = badge.meta;
 
 				}
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndJournal.java
Patch:
@@ -1029,7 +1029,7 @@ public static class BadgesTab extends Component {
 		private Component badgesLocal;
 		private Component badgesGlobal;
 
-		private boolean global = false;
+		public static boolean global = false;
 
 		@Override
 		protected void createChildren() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -259,7 +259,8 @@ public boolean interact(Char c){
 		}
 
 		//can't swap places if one char has restricted movement
-		if (rooted || c.rooted || buff(Vertigo.class) != null || c.buff(Vertigo.class) != null){
+		if (paralysed > 0 || c.paralysed > 0 || rooted || c.rooted
+				|| buff(Vertigo.class) != null || c.buff(Vertigo.class) != null){
 			return true;
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MeleeWeapon.java
Patch:
@@ -293,7 +293,7 @@ public float accuracyFactor(Char owner, Char target) {
 		float ACC = super.accuracyFactor(owner, target);
 
 		if (owner instanceof Hero
-				&& ((Hero) owner).hasTalent(Talent.PRECISE_ASSAULT) || ((Hero) owner).hasTalent(Talent.LIQUID_AGILITY)
+				&& (((Hero) owner).hasTalent(Talent.PRECISE_ASSAULT) || ((Hero) owner).hasTalent(Talent.LIQUID_AGILITY))
 				//does not trigger on ability attacks
 				&& ((Hero) owner).belongings.abilityWeapon != this) {
 			if (((Hero) owner).heroClass != HeroClass.DUELIST) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Ghost.java
Patch:
@@ -306,7 +306,7 @@ public static void spawn( SewerLevel level, Room room ) {
 				Ghost ghost = new Ghost();
 				do {
 					ghost.pos = level.pointToCell(room.random());
-				} while (ghost.pos == -1 || ghost.pos == level.exit());
+				} while (ghost.pos == -1 || level.solid[ghost.pos] || ghost.pos == level.exit());
 				level.mobs.add( ghost );
 				
 				spawned = true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndUpgrade.java
Patch:
@@ -203,7 +203,7 @@ public WndUpgrade( Item upgrader, Item toUpgrade, boolean force){
 			Armor.Augment aug = ((Armor) toUpgrade).augment;
 			bottom = fillFields(Messages.get(this, "blocking"),
 					((Armor) toUpgrade).DRMin(levelFrom) + "-" + (((Armor) toUpgrade).DRMax(levelFrom) + aug.defenseFactor(levelFrom)),
-					((Armor) toUpgrade).DRMin(levelTo) + "-" +  (((Armor) toUpgrade).DRMax(levelFrom) + aug.defenseFactor(levelTo)),
+					((Armor) toUpgrade).DRMin(levelTo) + "-" +  (((Armor) toUpgrade).DRMax(levelTo) + aug.defenseFactor(levelTo)),
 					bottom);
 		} else if (toUpgrade instanceof RoundShield){
 			bottom = fillFields(Messages.get(this, "blocking"),

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/CursedWand.java
Patch:
@@ -417,6 +417,8 @@ private static boolean veryRareEffect(final Item origin, final Char user, final
 					mimic.items.add(reward);
 				}
 
+				Dungeon.level.occupyCell(mimic);
+
 				return true;
 
 			//appears to crash the game (actually just closes it)

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/CustomNoteButton.java
Patch:
@@ -167,6 +167,7 @@ public boolean itemSelectable(Item item) {
 		public void onSelect( Item item ) {
 			if (item != null){
 				Notes.CustomRecord custom = new Notes.CustomRecord(item, "", "");
+				custom.assignID();
 				if (item instanceof EquipableItem){
 					((EquipableItem) item).customNoteID = custom.ID();
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/Ratmogrify.java
Patch:
@@ -169,11 +169,11 @@ protected void activate(ClassArmor armor, Hero hero, Integer target) {
 			CellEmitter.get(rat.pos).burst(Speck.factory(Speck.WOOL), 4);
 			Sample.INSTANCE.play(Assets.Sounds.PUFF);
 
-			Dungeon.level.occupyCell(rat);
-
-			//for rare cases where a buff was keeping a mob alive (e.g. gnoll brutes)
+			//for rare cases where a buff was keeping a mob alive (e.g. gnoll brute rage)
 			if (!rat.isAlive()){
 				rat.die(this);
+			} else {
+				Dungeon.level.occupyCell(rat);
 			}
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/AttackIndicator.java
Patch:
@@ -122,7 +122,7 @@ private synchronized void checkEnemies() {
 			}
 		}
 		
-		if (!candidates.contains( lastTarget )) {
+		if (lastTarget == null || !candidates.contains( lastTarget )) {
 			if (candidates.isEmpty()) {
 				lastTarget = null;
 			} else {
@@ -132,8 +132,8 @@ private synchronized void checkEnemies() {
 				flash();
 			}
 		} else {
+			active = true;
 			if (!bg.visible) {
-				active = true;
 				flash();
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfRemoveCurse.java
Patch:
@@ -68,6 +68,7 @@ public void doRead() {
 				Degrade.detach(curUser, Degrade.class);
 			}
 
+			detach(curUser.belongings.backpack);
 			GLog.p(Messages.get(this, "spirit"));
 			spirit.cleanse();
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/UnstableSpellbook.java
Patch:
@@ -82,7 +82,7 @@ public UnstableSpellbook() {
 		super();
 
 		Class<?>[] scrollClasses = Generator.Category.SCROLL.classes;
-		float[] probs = Generator.Category.SCROLL.defaultProbs.clone(); //array of primitives, clone gives deep copy.
+		float[] probs = Generator.Category.SCROLL.defaultProbsTotal.clone(); //array of primitives, clone gives deep copy.
 		int i = Random.chances(probs);
 
 		while (i != -1){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfAccuracy.java
Patch:
@@ -47,6 +47,7 @@ public String statsInfo() {
 	}
 
 	public String upgradeStat1(int level){
+		if (cursed && cursedKnown) level = Math.min(-1, level-3);
 		return Messages.decimalFormat("#.##", 100f * (Math.pow(1.3f, level+1)-1f)) + "%";
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfArcana.java
Patch:
@@ -47,6 +47,7 @@ public String statsInfo() {
 	}
 
 	public String upgradeStat1(int level){
+		if (cursed) level = Math.min(-1, level-3);
 		return Messages.decimalFormat("#.##", 100f * (Math.pow(1.175f, level+1)-1f)) + "%";
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfElements.java
Patch:
@@ -59,6 +59,7 @@ public String statsInfo() {
 	}
 
 	public String upgradeStat1(int level){
+		if (cursed && cursedKnown) level = Math.min(-1, level-3);
 		return Messages.decimalFormat("#.##", 100f * (1f - Math.pow(0.825f, level+1))) + "%";
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfEnergy.java
Patch:
@@ -51,6 +51,7 @@ public String statsInfo() {
 	}
 
 	public String upgradeStat1(int level){
+		if (cursed && cursedKnown) level = Math.min(-1, level-3);
 		return Messages.decimalFormat("#.##", 100f * (Math.pow(1.15f, level+1)-1f)) + "%";
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfEvasion.java
Patch:
@@ -47,6 +47,7 @@ public String statsInfo() {
 	}
 
 	public String upgradeStat1(int level){
+		if (cursed && cursedKnown) level = Math.min(-1, level-3);
 		return Messages.decimalFormat("#.##", 100f * (Math.pow(1.125f, level+1)-1f)) + "%";
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfForce.java
Patch:
@@ -133,17 +133,20 @@ public String statsInfo() {
 
 	@Override
 	public String upgradeStat1(int level) {
+		if (cursed && cursedKnown) level = Math.min(-1, level-3);
 		float tier = tier(Dungeon.hero != null ? Dungeon.hero.STR() : 10);
 		return min(level+1, tier) + "-" + max(level+1, tier);
 	}
 
 	@Override
 	public String upgradeStat2(int level) {
+		if (cursed && cursedKnown) level = Math.min(-1, level-3);
 		return Integer.toString(level+1);
 	}
 
 	@Override
 	public String upgradeStat3(int level) {
+		if (cursed && cursedKnown) level = Math.min(-1, level-3);
 		if (Dungeon.hero != null && Dungeon.hero.heroClass == HeroClass.DUELIST){
 			float tier = tier(Dungeon.hero != null ? Dungeon.hero.STR() : 10);
 			int bonus = Math.round(1+tier+((level+1)*((3+tier)/8f)));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfFuror.java
Patch:
@@ -47,6 +47,7 @@ public String statsInfo() {
 	}
 
 	public String upgradeStat1(int level){
+		if (cursed && cursedKnown) level = Math.min(-1, level-3);
 		return Messages.decimalFormat("#.##", 100f * (Math.pow(1.09051f, level+1)-1f)) + "%";
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfHaste.java
Patch:
@@ -47,6 +47,7 @@ public String statsInfo() {
 	}
 
 	public String upgradeStat1(int level){
+		if (cursed && cursedKnown) level = Math.min(-1, level-3);
 		return Messages.decimalFormat("#.##", 100f * (Math.pow(1.2f, level+1)-1f)) + "%";
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfMight.java
Patch:
@@ -90,11 +90,13 @@ public String statsInfo() {
 
 	@Override
 	public String upgradeStat1(int level) {
+		if (cursed && cursedKnown) level = Math.min(-1, level-3);
 		return Integer.toString(level+1);
 	}
 
 	@Override
 	public String upgradeStat2(int level) {
+		if (cursed && cursedKnown) level = Math.min(-1, level-3);
 		return Messages.decimalFormat("#.##", 100f * (Math.pow(1.035, level+1)-1f)) + "%";
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfSharpshooting.java
Patch:
@@ -48,11 +48,13 @@ public String statsInfo() {
 
 	@Override
 	public String upgradeStat1(int level) {
+		if (cursed && cursedKnown) level = Math.min(-1, level-3);
 		return Integer.toString(level+1);
 	}
 
 	@Override
 	public String upgradeStat2(int level) {
+		if (cursed && cursedKnown) level = Math.min(-1, level-3);
 		return Messages.decimalFormat("#.##", 100f * (Math.pow(1.2, level+1)-1f)) + "%";
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfTenacity.java
Patch:
@@ -47,6 +47,7 @@ public String statsInfo() {
 	}
 
 	public String upgradeStat1(int level){
+		if (cursed && cursedKnown) level = Math.min(-1, level-3);
 		return Messages.decimalFormat("#.##", 100f * (1f - Math.pow(0.85f, level+1))) + "%";
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfWealth.java
Patch:
@@ -76,6 +76,7 @@ public String statsInfo() {
 	}
 
 	public String upgradeStat1(int level){
+		if (cursed && cursedKnown) level = Math.min(-1, level-3);
 		return Messages.decimalFormat("#.##", 100f * (Math.pow(1.2f, level+1)-1f)) + "%";
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndUpgrade.java
Patch:
@@ -103,6 +103,7 @@ public WndUpgrade( Item upgrader, Item toUpgrade, boolean force){
 
 		// *** Sprites, showing item at current level and with +1 ***
 
+		//TODO add a background here too, to better communicate things like ID state and curse state?
 		ItemSprite i1 = new ItemSprite();
 		add(i1);
 		i1.view(toUpgrade);
@@ -254,7 +255,6 @@ public WndUpgrade( Item upgrader, Item toUpgrade, boolean force){
 		}
 
 		//Various ring stats (varies by ring)
-		//TODO cursed ring stats?
 		if (toUpgrade instanceof Ring){
 			if (((Ring) toUpgrade).upgradeStat1(levelFrom) != null){
 				bottom = fillFields(Messages.get(toUpgrade, "upgrade_stat_name_1"),

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/Armor.java
Patch:
@@ -635,7 +635,7 @@ public Armor inscribe( Glyph glyph ) {
 		if (seal != null){
 			seal.setGlyph(glyph);
 		}
-		if (isIdentified() && Dungeon.hero != null
+		if (glyph != null && isIdentified() && Dungeon.hero != null
 				&& Dungeon.hero.isAlive() && Dungeon.hero.belongings.contains(this)){
 			Catalog.setSeen(glyph.getClass());
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/Weapon.java
Patch:
@@ -353,7 +353,7 @@ public Weapon enchant( Enchantment ench ) {
 		if (ench == null || !ench.curse()) curseInfusionBonus = false;
 		enchantment = ench;
 		updateQuickslot();
-		if (isIdentified() && Dungeon.hero != null
+		if (ench != null && isIdentified() && Dungeon.hero != null
 				&& Dungeon.hero.isAlive() && Dungeon.hero.belongings.contains(this)){
 			Catalog.setSeen(ench.getClass());
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Badges.java
Patch:
@@ -1000,9 +1000,11 @@ public static void validateHighScore( int score ){
 	}
 	
 	public static void validateHappyEnd() {
+		local.add( Badge.HAPPY_END );
 		displayBadge( Badge.HAPPY_END );
 
 		if( Dungeon.hero.belongings.getItem(RemainsItem.class) != null ){
+			local.add( Badge.HAPPY_END_REMAINS );
 			displayBadge( Badge.HAPPY_END_REMAINS );
 		}
 	}

File: SPD-classes/src/main/java/com/watabou/noosa/Image.java
Patch:
@@ -100,6 +100,9 @@ public void copy( Image other ) {
 		
 		updateFrame();
 		updateVertices();
+
+		rm = other.rm; gm = other.gm; bm = other.bm; am = other.am;
+		ra = other.ra; ga = other.ga; ba = other.ba; aa = other.aa;
 	}
 	
 	protected void updateFrame() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/KindOfWeapon.java
Patch:
@@ -33,7 +33,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite;
-import com.shatteredpixel.shatteredpixeldungeon.ui.ActionIndicator;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
 import com.shatteredpixel.shatteredpixeldungeon.windows.WndOptions;
 import com.watabou.noosa.audio.Sample;
@@ -120,7 +119,6 @@ public boolean doEquip( Hero hero ) {
 			activate( hero );
 			Talent.onItemEquipped(hero, this);
 			Badges.validateDuelistUnlock();
-			ActionIndicator.refresh();
 			updateQuickslot();
 
 			cursedKnown = true;
@@ -168,7 +166,6 @@ public boolean equipSecondary( Hero hero ){
 			activate( hero );
 			Talent.onItemEquipped(hero, this);
 			Badges.validateDuelistUnlock();
-			ActionIndicator.refresh();
 			updateQuickslot();
 
 			cursedKnown = true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/DisarmingTrap.java
Patch:
@@ -34,7 +34,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.KindOfWeapon;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
-import com.shatteredpixel.shatteredpixeldungeon.ui.ActionIndicator;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
 import com.watabou.noosa.audio.Sample;
 import com.watabou.utils.PathFinder;
@@ -95,7 +94,6 @@ public void activate() {
 
 				hero.belongings.weapon = null;
 				Dungeon.quickslot.clearItem(weapon);
-				ActionIndicator.refresh();
 				weapon.updateQuickslot();
 
 				Dungeon.level.drop(weapon, cell).seen = true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Dagger.java
Patch:
@@ -121,7 +121,6 @@ public static void sneakAbility(Hero hero, Integer target, int maxDist, int invi
 
 		wep.beforeAbilityUsed(hero, null);
 		Buff.affect(hero, Invisibility.class, invisTurns-1); //1 fewer turns as ability is instant
-		hero.next();
 
 		Dungeon.hero.sprite.turnTo( Dungeon.hero.pos, target);
 		Dungeon.hero.pos = target;
@@ -134,6 +133,7 @@ public static void sneakAbility(Hero hero, Integer target, int maxDist, int invi
 		CellEmitter.get( Dungeon.hero.pos ).burst( Speck.factory( Speck.WOOL ), 6 );
 		Sample.INSTANCE.play( Assets.Sounds.PUFF );
 
+		hero.next();
 		wep.afterAbilityUsed(hero);
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -451,7 +451,7 @@ && buffedLvl() > super.buffedLvl()){
 		if (Dungeon.hero.hasTalent(Talent.LINGERING_MAGIC)
 				&& charger != null && charger.target == Dungeon.hero){
 
-			Buff.affect(Dungeon.hero, Talent.LingeringMagicTracker.class, 5f);
+			Buff.prolong(Dungeon.hero, Talent.LingeringMagicTracker.class, 5f);
 		}
 
 		Invisibility.dispel();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Actor.java
Patch:
@@ -230,7 +230,7 @@ public static boolean processing(){
 	}
 
 	public static int curActorPriority() {
-		return current != null ? current.actPriority : DEFAULT;
+		return current != null ? current.actPriority : HERO_PRIO;
 	}
 	
 	public static boolean keepActorThreadAlive = true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/YogDzewa.java
Patch:
@@ -464,7 +464,7 @@ public void addFist(YogFist fist){
 	public void updateVisibility( Level level ){
 		int viewDistance = 4;
 		if (phase > 1 && isAlive()){
-			viewDistance = 4 - (phase-1);
+			viewDistance = Math.max(4 - (phase-1), 1);
 		}
 		if (Dungeon.isChallenged(Challenges.DARKNESS)) {
 			viewDistance = Math.min(viewDistance, 2);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/AscensionChallenge.java
Patch:
@@ -149,7 +149,7 @@ public static float enemySpeedModifier(Mob m){
 	//hero speed is halved and capped at 1x at 6+ stacks
 	public static float modifyHeroSpeed(float speed){
 		if (Dungeon.hero.buff(AscensionChallenge.class) != null
-				&& Dungeon.hero.buff(AscensionChallenge.class).stacks > 6f){
+				&& Dungeon.hero.buff(AscensionChallenge.class).stacks >= 6f){
 			return Math.min(speed/2f, 1f);
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM300.java
Patch:
@@ -476,7 +476,7 @@ public void damage(int dmg, Object src) {
 		int dmgTaken = preHP - HP;
 		if (dmgTaken > 0) {
 			LockedFloor lock = Dungeon.hero.buff(LockedFloor.class);
-			if (lock != null && !isImmune(src.getClass())){
+			if (lock != null && !isImmune(src.getClass()) && !isInvulnerable(src.getClass())){
 				if (Dungeon.isChallenged(Challenges.STRONGER_BOSSES))   lock.addTime(dmgTaken/2f);
 				else                                                    lock.addTime(dmgTaken);
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DwarfKing.java
Patch:
@@ -476,7 +476,7 @@ public void damage(int dmg, Object src) {
 		super.damage(dmg, src);
 
 		LockedFloor lock = Dungeon.hero.buff(LockedFloor.class);
-		if (lock != null && !isImmune(src.getClass())){
+		if (lock != null && !isImmune(src.getClass()) && !isInvulnerable(src.getClass())){
 			if (Dungeon.isChallenged(Challenges.STRONGER_BOSSES))   lock.addTime(dmg/5f);
 			else                                                    lock.addTime(dmg/3f);
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Goo.java
Patch:
@@ -273,7 +273,7 @@ public void damage(int dmg, Object src) {
 			yell(Messages.get(this, "gluuurp"));
 		}
 		LockedFloor lock = Dungeon.hero.buff(LockedFloor.class);
-		if (lock != null){
+		if (lock != null && !isImmune(src.getClass()) && !isInvulnerable(src.getClass())){
 			if (Dungeon.isChallenged(Challenges.STRONGER_BOSSES))   lock.addTime(dmg);
 			else                                                    lock.addTime(dmg*1.5f);
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Pylon.java
Patch:
@@ -203,7 +203,7 @@ public void damage(int dmg, Object src) {
 		}
 
 		LockedFloor lock = Dungeon.hero.buff(LockedFloor.class);
-		if (lock != null && !isImmune(src.getClass())){
+		if (lock != null && !isImmune(src.getClass()) && !isInvulnerable(src.getClass())){
 			if (Dungeon.isChallenged(Challenges.STRONGER_BOSSES))   lock.addTime(dmg/2f);
 			else                                                    lock.addTime(dmg);
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Tengu.java
Patch:
@@ -153,7 +153,7 @@ public void damage(int dmg, Object src) {
 		dmg = beforeHitHP - HP;
 
 		LockedFloor lock = Dungeon.hero.buff(LockedFloor.class);
-		if (lock != null) {
+		if (lock != null && !isImmune(src.getClass()) && !isInvulnerable(src.getClass())){
 			if (Dungeon.isChallenged(Challenges.STRONGER_BOSSES))   lock.addTime(2*dmg/3f);
 			else                                                    lock.addTime(dmg);
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/YogDzewa.java
Patch:
@@ -422,7 +422,7 @@ public void damage( int dmg, Object src ) {
 		}
 
 		LockedFloor lock = Dungeon.hero.buff(LockedFloor.class);
-		if (lock != null){
+		if (lock != null && !isImmune(src.getClass()) && !isInvulnerable(src.getClass())){
 			if (Dungeon.isChallenged(Challenges.STRONGER_BOSSES))   lock.addTime(dmgTaken/3f);
 			else                                                    lock.addTime(dmgTaken/2f);
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/YogFist.java
Patch:
@@ -152,7 +152,7 @@ public void damage(int dmg, Object src) {
 		int dmgTaken = preHP - HP;
 
 		LockedFloor lock = Dungeon.hero.buff(LockedFloor.class);
-		if (dmgTaken > 0 && lock != null){
+		if (dmgTaken > 0 && lock != null && !isImmune(src.getClass()) && !isInvulnerable(src.getClass())){
 			if (Dungeon.isChallenged(Challenges.STRONGER_BOSSES))   lock.addTime(dmgTaken/4f);
 			else                                                    lock.addTime(dmgTaken/2f);
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/Armor.java
Patch:
@@ -348,7 +348,7 @@ public float speedFactor( Char owner, float speed ){
 			boolean enemyNear = false;
 			//for each enemy, check if they are adjacent, or within 2 tiles and an adjacent cell is open
 			for (Char ch : Actor.chars()){
-				if ( Dungeon.level.distance(ch.pos, owner.pos) <= 2 && owner.alignment != ch.alignment){
+				if ( Dungeon.level.distance(ch.pos, owner.pos) <= 2 && owner.alignment != ch.alignment && ch.alignment != Char.Alignment.NEUTRAL){
 					if (Dungeon.level.adjacent(ch.pos, owner.pos)){
 						enemyNear = true;
 						break;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM300.java
Patch:
@@ -489,7 +489,7 @@ public void damage(int dmg, Object src) {
 			threshold = HT / 3 * (2 - pylonsActivated);
 		}
 
-		if (HP <= threshold && HP > 0){
+		if (HP <= threshold && threshold > 0){
 			HP = threshold;
 			supercharge();
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/effects/Speck.java
Patch:
@@ -22,6 +22,7 @@
 package com.shatteredpixel.shatteredpixeldungeon.effects;
 
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
+import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
 import com.watabou.noosa.Game;
 import com.watabou.noosa.Image;
 import com.watabou.noosa.TextureFilm;
@@ -282,7 +283,7 @@ public void reset( int index, float x, float y, int type ) {
 			
 		case BUBBLE:
 			speed.set( 0, -15 );
-			scale.set( Random.Float( 0.8f, 1 ) );
+			scale.set( PixelScene.align(Random.Float( 0.8f, 1 )) );
 			lifespan = Random.Float( 0.8f, 1.5f );
 			break;
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TimekeepersHourglass.java
Patch:
@@ -432,12 +432,12 @@ public float iconFadePercent() {
 
 		@Override
 		public String iconTextDisplay() {
-			return Integer.toString((int)turnsToCost);
+			return Integer.toString((int)(turnsToCost + 0.001f));
 		}
 
 		@Override
 		public String desc() {
-			return Messages.get(this, "desc", Messages.decimalFormat("#.##", turnsToCost));
+			return Messages.get(this, "desc", Messages.decimalFormat("#.##", Math.max(0, turnsToCost)));
 		}
 
 		private static final String PRESSES = "presses";

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/plants/Swiftthistle.java
Patch:
@@ -93,7 +93,7 @@ public float iconFadePercent() {
 
 		@Override
 		public String iconTextDisplay() {
-			return Integer.toString((int)left);
+			return Integer.toString((int)(left + 0.001f));
 		}
 		
 		public void reset(){
@@ -102,7 +102,7 @@ public void reset(){
 		
 		@Override
 		public String desc() {
-			return Messages.get(this, "desc", dispTurns(left));
+			return Messages.get(this, "desc", dispTurns(Math.max(0, left)));
 		}
 		
 		public void processTime(float time){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -575,12 +575,12 @@ public static boolean enchStoneNeeded(){
 
 	public static boolean intStoneNeeded(){
 		//one stone on floors 1-3
-		return !LimitedDrops.INT_STONE.dropped() && Random.Int(4-depth) == 0;
+		return depth < 5 && !LimitedDrops.INT_STONE.dropped() && Random.Int(4-depth) == 0;
 	}
 
 	public static boolean trinketCataNeeded(){
 		//one trinket catalyst on floors 1-3
-		return !LimitedDrops.TRINKET_CATA.dropped() && Random.Int(4-depth) == 0;
+		return depth < 5 && !LimitedDrops.TRINKET_CATA.dropped() && Random.Int(4-depth) == 0;
 	}
 
 	public static boolean labRoomNeeded(){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM300.java
Patch:
@@ -489,7 +489,7 @@ public void damage(int dmg, Object src) {
 			threshold = HT / 3 * (2 - pylonsActivated);
 		}
 
-		if (HP <= threshold){
+		if (HP <= threshold && HP > 0){
 			HP = threshold;
 			supercharge();
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/ClassArmor.java
Patch:
@@ -123,6 +123,7 @@ public static ClassArmor upgrade (Hero owner, Armor armor ) {
 		if (armor.seal != null) {
 			classArmor.seal = armor.seal;
 		}
+		classArmor.glyphHardened = armor.glyphHardened;
 		classArmor.cursed = armor.cursed;
 		classArmor.curseInfusionBonus = armor.curseInfusionBonus;
 		classArmor.masteryPotionBonus = armor.masteryPotionBonus;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/EbonyMimic.java
Patch:
@@ -75,7 +75,7 @@ public void stopHiding(){
 			CellEmitter.get(pos).burst(Speck.factory(Speck.STAR), 10);
 			Sample.INSTANCE.play(Assets.Sounds.MIMIC, 1, 0.85f);
 		}
-		if (Dungeon.level.map[pos] == Terrain.DOOR){
+		if (Actor.chars().contains(this) && Dungeon.level.map[pos] == Terrain.DOOR){
 			Door.enter( pos );
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM300.java
Patch:
@@ -489,7 +489,7 @@ public void damage(int dmg, Object src) {
 			threshold = HT / 3 * (2 - pylonsActivated);
 		}
 
-		if (HP < threshold){
+		if (HP <= threshold){
 			HP = threshold;
 			supercharge();
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/trinkets/MossyClump.java
Patch:
@@ -38,10 +38,8 @@ public class MossyClump extends Trinket {
 
 	@Override
 	protected int upgradeEnergyCost() {
-		//5 -> 10(15) -> 15(30) -> 20(50)
-		return 10+5*level();
 		//5 -> 10(15) -> 20(35) -> 30(65)
-		//return 10+10*level();
+		return 10+10*level();
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Spear.java
Patch:
@@ -27,6 +27,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Invisibility;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
+import com.shatteredpixel.shatteredpixeldungeon.effects.Pushing;
 import com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfBlastWave;
 import com.shatteredpixel.shatteredpixeldungeon.mechanics.Ballistica;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
@@ -101,8 +102,9 @@ public void call() {
 				wep.beforeAbilityUsed(hero, enemy);
 				AttackIndicator.target(enemy);
 				int oldPos = enemy.pos;
+				//do not push if enemy has moved, or another push is active (e.g. elastic)
 				if (hero.attack(enemy, dmgMulti, dmgBoost, Char.INFINITE_ACCURACY)) {
-					if (enemy.isAlive() && enemy.pos == oldPos){
+					if (enemy.isAlive() && enemy.pos == oldPos && !Pushing.pushingExistsForChar(enemy)){
 						//trace a ballistica to our target (which will also extend past them
 						Ballistica trajectory = new Ballistica(hero.pos, enemy.pos, Ballistica.STOP_TARGET);
 						//trim it to just be the part that goes past them

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/stones/StoneOfFear.java
Patch:
@@ -43,7 +43,7 @@ protected void activate(int cell) {
 
 		Char ch = Actor.findChar( cell );
 
-		if (ch != null){
+		if (ch != null && ch.alignment != Char.Alignment.ALLY ){
 			Buff.affect( ch, Terror.class, Terror.DURATION ).object = curUser.id();
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/exotic/ScrollOfMetamorphosis.java
Patch:
@@ -197,7 +197,7 @@ public WndMetamorphReplace(){
 		public WndMetamorphReplace(Talent replacing, int tier){
 			super();
 
-			if (!identifiedByUse) {
+			if (!identifiedByUse && curItem instanceof ScrollOfMetamorphosis) {
 				curItem.detach(curUser.belongings.backpack);
 			}
 			identifiedByUse = false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
Patch:
@@ -341,8 +341,8 @@ public static void spawnWandmaker( Level level, Room room ) {
 		
 		public static ArrayList<Room> spawnRoom( ArrayList<Room> rooms) {
 			questRoomSpawned = false;
-			if (!spawned && (type != 0 || Dungeon.depth > 6)) {
-				
+			if (!spawned && (type != 0 || (Dungeon.depth > 6 && Random.Int( 10 - Dungeon.depth ) == 0))) {
+
 				// decide between 1,2, or 3 for quest type.
 				if (type == 0) type = Random.Int(3)+1;
 				

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/AlchemyScene.java
Patch:
@@ -906,7 +906,7 @@ protected void onClick() {
 
 				@Override
 				protected String hoverText() {
-					return "Craft";
+					return Messages.get(AlchemyScene.class, "craft");
 				}
 
 				@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/MonkEnergy.java
Patch:
@@ -506,6 +506,7 @@ public void doAbility(Hero hero, Integer target) {
 
 				if (Actor.findChar(target) != null){
 					GLog.w(Messages.get(MeleeWeapon.class, "ability_occupied"));
+					return;
 				}
 
 				Ballistica dash = new Ballistica(hero.pos, target, Ballistica.PROJECTILE);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/quest/Pickaxe.java
Patch:
@@ -207,7 +207,7 @@ protected void duelistAbility(Hero hero, Integer target) {
 
 		hero.belongings.abilityWeapon = this;
 		if (!hero.canAttack(enemy)){
-			GLog.w(Messages.get(this, "ability_bad_position"));
+			GLog.w(Messages.get(this, "ability_target_range"));
 			hero.belongings.abilityWeapon = null;
 			return;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Greataxe.java
Patch:
@@ -79,7 +79,7 @@ protected void duelistAbility(Hero hero, Integer target) {
 
 		hero.belongings.abilityWeapon = this;
 		if (!hero.canAttack(enemy)){
-			GLog.w(Messages.get(this, "ability_bad_position"));
+			GLog.w(Messages.get(this, "ability_target_range"));
 			hero.belongings.abilityWeapon = null;
 			return;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Mace.java
Patch:
@@ -89,7 +89,7 @@ public static void heavyBlowAbility(Hero hero, Integer target, float dmgMulti, i
 
 		hero.belongings.abilityWeapon = wep;
 		if (!hero.canAttack(enemy)){
-			GLog.w(Messages.get(wep, "ability_bad_position"));
+			GLog.w(Messages.get(wep, "ability_target_range"));
 			hero.belongings.abilityWeapon = null;
 			return;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Rapier.java
Patch:
@@ -99,7 +99,7 @@ public static void lungeAbility(Hero hero, Integer target, float dmgMulti, int d
 
 		if (hero.rooted || Dungeon.level.distance(hero.pos, target) < 2
 				|| Dungeon.level.distance(hero.pos, target)-1 > wep.reachFactor(hero)){
-			GLog.w(Messages.get(wep, "ability_bad_position"));
+			GLog.w(Messages.get(wep, "ability_target_range"));
 			if (hero.rooted) PixelScene.shake( 1, 1f );
 			return;
 		}
@@ -116,7 +116,7 @@ public static void lungeAbility(Hero hero, Integer target, float dmgMulti, int d
 		}
 
 		if (lungeCell == -1){
-			GLog.w(Messages.get(wep, "ability_bad_position"));
+			GLog.w(Messages.get(wep, "ability_target_range"));
 			return;
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/RunicBlade.java
Patch:
@@ -77,7 +77,7 @@ protected void duelistAbility(Hero hero, Integer target) {
 		tracker.boost = 2f + 0.50f*buffedLvl();
 		hero.belongings.abilityWeapon = this;
 		if (!hero.canAttack(enemy)){
-			GLog.w(Messages.get(this, "ability_bad_position"));
+			GLog.w(Messages.get(this, "ability_target_range"));
 			tracker.detach();
 			hero.belongings.abilityWeapon = null;
 			return;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sai.java
Patch:
@@ -90,7 +90,7 @@ public static void comboStrikeAbility(Hero hero, Integer target, float multiPerH
 
 		hero.belongings.abilityWeapon = wep;
 		if (!hero.canAttack(enemy)){
-			GLog.w(Messages.get(wep, "ability_bad_position"));
+			GLog.w(Messages.get(wep, "ability_target_range"));
 			hero.belongings.abilityWeapon = null;
 			return;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sickle.java
Patch:
@@ -89,7 +89,7 @@ public static void harvestAbility(Hero hero, Integer target, float bleedMulti, i
 
 		hero.belongings.abilityWeapon = wep;
 		if (!hero.canAttack(enemy)){
-			GLog.w(Messages.get(wep, "ability_bad_position"));
+			GLog.w(Messages.get(wep, "ability_target_range"));
 			hero.belongings.abilityWeapon = null;
 			return;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Spear.java
Patch:
@@ -89,7 +89,7 @@ public static void spikeAbility(Hero hero, Integer target, float dmgMulti, int d
 
 		hero.belongings.abilityWeapon = wep;
 		if (!hero.canAttack(enemy) || Dungeon.level.adjacent(hero.pos, enemy.pos)){
-			GLog.w(Messages.get(wep, "ability_bad_position"));
+			GLog.w(Messages.get(wep, "ability_target_range"));
 			hero.belongings.abilityWeapon = null;
 			return;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sword.java
Patch:
@@ -91,7 +91,7 @@ public static void cleaveAbility(Hero hero, Integer target, float dmgMulti, int
 
 		hero.belongings.abilityWeapon = wep;
 		if (!hero.canAttack(enemy)){
-			GLog.w(Messages.get(wep, "ability_bad_position"));
+			GLog.w(Messages.get(wep, "ability_target_range"));
 			hero.belongings.abilityWeapon = null;
 			return;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/SpiritBow.java
Patch:
@@ -456,6 +456,7 @@ protected boolean act() {
 					if (Actor.findChar(shotPos) == null) {
 						RevealedArea a = Buff.affect(user, RevealedArea.class, 5 * user.pointsInTalent(Talent.SEER_SHOT));
 						a.depth = Dungeon.depth;
+						a.branch = Dungeon.branch;
 						a.pos = shotPos;
 						Buff.affect(user, Talent.SeerShotCooldown.class, 20f);
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/Recycle.java
Patch:
@@ -108,7 +108,7 @@ public static class Recipe extends com.shatteredpixel.shatteredpixeldungeon.item
 		
 		{
 			inputs =  new Class[]{ScrollOfTransmutation.class};
-			inQuantity = new int[]{1, 1};
+			inQuantity = new int[]{1};
 			
 			cost = 12;
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/WelcomeScene.java
Patch:
@@ -202,7 +202,7 @@ protected void onClick() {
 
 			}
 
-			//message = "Welcome Beta testers!\n\nv2.4.0 is mostly complete so far, with 8 trinkets implemented and a bunch of other content too. Check the changes screen for more details, and please let me know what you think!";
+			message = "Welcome Beta testers!\n\nv2.4.0 is mostly complete so far, with 8 trinkets implemented and a bunch of other content too. Check the changes screen for more details, and please let me know what you think!";
 
 		} else {
 			message = Messages.get(this, "what_msg");

File: SPD-classes/src/main/java/com/watabou/gltextures/SmartTexture.java
Patch:
@@ -89,7 +89,9 @@ public void bitmap( Pixmap bitmap ) {
 	}
 	
 	public int getPixel( int x, int y ){
-		return bitmap.getPixel(x, y);
+		int color = bitmap.getPixel(x, y);
+		// convert from libGdx RGBA to Noosa ARGB
+		return ( (color << 24) | (color >>> 8) );
 	}
 	
 	public void reload() {

File: SPD-classes/src/main/java/com/watabou/gltextures/TextureCache.java
Patch:
@@ -42,7 +42,7 @@ public synchronized static SmartTexture createSolid( int color ) {
 		} else {
 			
 			Pixmap pixmap =new Pixmap( 1, 1, Pixmap.Format.RGBA8888 );
-			// In the rest of the code ARGB is used
+			// convert from Noosa ARGB to libGdx RGBA
 			pixmap.setColor( (color << 8) | (color >>> 24) );
 			pixmap.fill();
 			
@@ -65,7 +65,7 @@ public synchronized static SmartTexture createGradient( int... colors ) {
 			
 			Pixmap pixmap = new Pixmap( colors.length, 1, Pixmap.Format.RGBA8888);
 			for (int i=0; i < colors.length; i++) {
-				// In the rest of the code ARGB is used
+				// convert from Noosa ARGB to libGdx RGBA
 				pixmap.drawPixel( i, 0, (colors[i] << 8) | (colors[i] >>> 24) );
 			}
 			SmartTexture tx = new SmartTexture( pixmap );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
Patch:
@@ -459,7 +459,7 @@ public static void onTalentUpgraded( Hero hero, Talent talent ){
 			Dungeon.observe();
 		}
 
-		if (talent == TWIN_UPGRADES || talent == DESPERATE_POWER){
+		if (talent == TWIN_UPGRADES || talent == DESPERATE_POWER || talent == STRONGMAN){
 			Item.updateQuickslot();
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/AlchemistsToolkit.java
Patch:
@@ -159,7 +159,7 @@ protected ArtifactBuff passiveBuff() {
 	public void charge(Hero target, float amount) {
 		if (target.buff(MagicImmune.class) != null) return;
 		partialCharge += 0.25f*amount;
-		if (partialCharge >= 1){
+		while (partialCharge >= 1){
 			partialCharge--;
 			charge++;
 			updateQuickslot();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTeleportation.java
Patch:
@@ -225,7 +225,7 @@ private static boolean teleportInNonRegularLevel(Char ch, boolean preferNotSeen
 		boolean[] passable = Dungeon.level.passable;
 
 		if (Char.hasProp(ch, Char.Property.LARGE)){
-			passable = BArray.or(passable, Dungeon.level.openSpace, null);
+			passable = BArray.and(passable, Dungeon.level.openSpace, null);
 		}
 
 		PathFinder.buildDistanceMap(ch.pos, passable);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfRegrowth.java
Patch:
@@ -464,7 +464,6 @@ public boolean isInvulnerable(Class effect) {
 		}
 
 		{
-			immunities.add( AllyBuff.class );
 			immunities.add( Doom.class );
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/features/HighGrass.java
Patch:
@@ -125,20 +125,20 @@ public static void trample( Level level, int pos ) {
 				// Seed, scales from 1/25 to 1/9
 				float lootChance = 1/(25f - naturalismLevel*4f);
 
-				//absolute max drop rate is ~1/6.5 with footwear of nature, ~1/18 without
+				// absolute max drop rate is ~1/6.5 with footwear of nature, ~1/18 without
 				lootChance *= PetrifiedSeed.grassLootMultiplier();
 
 				if (Random.Float() < lootChance) {
 					if (Random.Float() < PetrifiedSeed.stoneInsteadOfSeedChance()) {
-						//TODO do we want to use decks here in some way?
 						level.drop(Generator.randomUsingDefaults(Generator.Category.STONE), pos).sprite.drop();
 					} else {
 						level.drop(Generator.random(Generator.Category.SEED), pos).sprite.drop();
 					}
 				}
 				
 				// Dew, scales from 1/6 to 1/4
-				if (Random.Int(6 - naturalismLevel/2) == 0) {
+				lootChance = 1/(6f -naturalismLevel/2f);
+				if (Random.Float() < lootChance) {
 					level.drop(new Dewdrop(), pos).sprite.drop();
 				}
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfForce.java
Patch:
@@ -177,11 +177,12 @@ public String actionName(String action, Hero hero) {
 	public void execute(Hero hero, String action) {
 		if (action.equals(AC_ABILITY)){
 			if (hero.buff(BrawlersStance.class) != null){
-				if (hero.buff(BrawlersStance.class).active){
+				if (!hero.buff(BrawlersStance.class).active){
 					hero.buff(BrawlersStance.class).reset();
 				} else {
 					hero.buff(BrawlersStance.class).active = false;
 				}
+				BuffIndicator.refreshHero();
 				AttackIndicator.updateState();
 			} else if (!isEquipped(hero)) {
 				GLog.w(Messages.get(MeleeWeapon.class, "ability_need_equip"));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Combo.java
Patch:
@@ -237,7 +237,7 @@ public String desc(int count){
 					if (count >= 3 && Dungeon.hero.pointsInTalent(Talent.ENHANCED_COMBO) >= 3){
 						return Messages.get(this, name() + ".empower_desc", count/3, count*20);
 					} else {
-						return Messages.get(this, name() + ".desc");
+						return Messages.get(this, name() + ".desc", count*20);
 					}
 				case PARRY:
 					if (count >= 9 && Dungeon.hero.pointsInTalent(Talent.ENHANCED_COMBO) >= 2){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java
Patch:
@@ -66,10 +66,10 @@ public ShatteredPixelDungeon( PlatformSupport platform ) {
 
 		com.watabou.utils.Bundle.addAlias(
 				com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.entrance.EntranceRoom.class,
-				"com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.EntranceRoom.class" );
+				"com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.EntranceRoom" );
 		com.watabou.utils.Bundle.addAlias(
 				com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.exit.ExitRoom.class,
-				"com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.ExitRoom.class" );
+				"com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.ExitRoom" );
 
 		//pre-v2.3.0
 		com.watabou.utils.Bundle.addAlias(

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sai.java
Patch:
@@ -163,7 +163,7 @@ public void addHit(){
 			hits++;
 			comboTime = 5f;
 
-			if (hits >= 2){
+			if (hits >= 2 && icon() != BuffIndicator.NONE){
 				GLog.p( Messages.get(Combo.class, "combo", hits) );
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
Patch:
@@ -39,6 +39,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.journal.Notes;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Level;
 import com.shatteredpixel.shatteredpixeldungeon.levels.RegularLevel;
+import com.shatteredpixel.shatteredpixeldungeon.levels.Terrain;
 import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room;
 import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.MassGraveRoom;
 import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.quest.RitualSiteRoom;
@@ -308,7 +309,7 @@ public static void spawnWandmaker( Level level, Room room ) {
 							validPos = false;
 						}
 					}
-					if (level.traps.get(npc.pos) != null){
+					if (level.traps.get(npc.pos) != null || level.map[npc.pos] == Terrain.CHASM){
 						validPos = false;
 					}
 				} while (!validPos);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/standard/exit/ExitRoom.java
Patch:
@@ -87,8 +87,8 @@ public boolean connect(Room room) {
 		rooms.add(ChasmBridgeExitRoom.class);
 		rooms.add(PillarsExitRoom.class);
 
-		rooms.add(CavesFissureExitRoom.class);
 		rooms.add(CaveExitRoom.class);
+		rooms.add(CavesFissureExitRoom.class);
 
 		rooms.add(HallwayExitRoom.class);
 		rooms.add(StatuesExitRoom.class);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Elemental.java
Patch:
@@ -514,7 +514,7 @@ protected void meleeProc( Char enemy, int damage ) {
 			}
 			
 			for (Char ch : affected) {
-				ch.damage( Math.round( damage * 0.4f ), Shocking.class );
+				ch.damage( Math.round( damage * 0.4f ), new Shocking() );
 				if (ch == Dungeon.hero && !ch.isAlive()){
 					Dungeon.fail(this);
 					GLog.n( Messages.capitalize(Messages.get(Char.class, "kill", name())) );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/standard/ChasmBridgeRoom.java
Patch:
@@ -23,7 +23,7 @@
 
 import com.shatteredpixel.shatteredpixeldungeon.levels.Terrain;
 
-public class ChasmBridgeRoom extends BridgeRoom{
+public class ChasmBridgeRoom extends StandardBridgeRoom {
 
 	protected int maxBridgeWidth( int roomDimension ) {
 		return roomDimension >= 7 ? 2 : 1;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/standard/StandardBridgeRoom.java
Patch:
@@ -33,7 +33,7 @@
 import java.util.Collections;
 import java.util.Comparator;
 
-public abstract class BridgeRoom extends StandardRoom {
+public abstract class StandardBridgeRoom extends StandardRoom {
 
 	@Override
 	public int minWidth() {
@@ -53,12 +53,12 @@ public boolean canMerge(Level l, Room other, Point p, int mergeTerrain) {
 
 	@Override
 	public boolean canPlaceItem(Point p, Level l) {
-		return super.canPlaceItem(p, l) && !spaceRect.inside(p);
+		return super.canPlaceItem(p, l) && (spaceRect == null || !spaceRect.inside(p));
 	}
 
 	@Override
 	public boolean canPlaceCharacter(Point p, Level l) {
-		return super.canPlaceItem(p, l) && !spaceRect.inside(p);
+		return super.canPlaceItem(p, l) && (spaceRect == null || !spaceRect.inside(p));
 	}
 
 	//keep these so that subclasses can use them in their methods

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/standard/WaterBridgeRoom.java
Patch:
@@ -24,7 +24,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.levels.Terrain;
 import com.watabou.utils.Point;
 
-public class WaterBridgeRoom extends BridgeRoom {
+public class WaterBridgeRoom extends StandardBridgeRoom {
 
 	protected int maxBridgeWidth( int roomDimension ) {
 		return roomDimension >= 8 ? 3 : 2;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/standard/RuinsRoom.java
Patch:
@@ -51,7 +51,7 @@ protected float fill() {
 
 	@Override
 	protected int clustering() {
-		return 9;
+		return 0;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndSettings.java
Patch:
@@ -257,7 +257,7 @@ protected void onClick() {
 			// this is being phased out as the setting is useless on all but very old devices anyway
 			// and support is going to be dropped for 4.3- in the forseeable future
 			if (DeviceCompat.isAndroid() && PixelScene.maxScreenZoom >= 2
-				&& SPDSettings.powerSaver() || !DeviceCompat.supportsFullScreen()) {
+				&& (SPDSettings.powerSaver() || !DeviceCompat.supportsFullScreen())) {
 				chkSaver = new CheckBox(Messages.get(this, "saver")) {
 					@Override
 					protected void onClick() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Ghoul.java
Patch:
@@ -32,6 +32,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.effects.FloatingText;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Pushing;
 import com.shatteredpixel.shatteredpixeldungeon.items.Gold;
+import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.MasterThievesArmband;
 import com.shatteredpixel.shatteredpixeldungeon.levels.features.Chasm;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite;
@@ -185,6 +186,7 @@ protected synchronized void onRemove() {
 					Buff.prolong(this, SacrificialFire.Marked.class, timesDowned*5);
 				} else if (buff instanceof AllyBuff
 						|| buff instanceof ChampionEnemy
+						|| buff instanceof MasterThievesArmband.StolenTracker
 						|| buff instanceof DwarfKing.KingDamager) {
 					//don't remove
 				} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Dewdrop.java
Patch:
@@ -58,7 +58,8 @@ public boolean doPickUp(Hero hero, int pos) {
 		} else {
 
 			int terr = Dungeon.level.map[pos];
-			if (!consumeDew(1, hero, terr == Terrain.ENTRANCE|| terr == Terrain.EXIT || terr == Terrain.UNLOCKED_EXIT)){
+			if (!consumeDew(1, hero, terr == Terrain.ENTRANCE || terr == Terrain.ENTRANCE_SP
+					|| terr == Terrain.EXIT || terr == Terrain.UNLOCKED_EXIT)){
 				return false;
 			}
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CavesBossLevel.java
Patch:
@@ -426,6 +426,7 @@ public String tileDesc( int tile ) {
 			case Terrain.WATER:
 				return super.tileDesc( tile ) + "\n\n" + Messages.get(CavesBossLevel.class, "water_desc");
 			case Terrain.ENTRANCE:
+			case Terrain.ENTRANCE_SP:
 				return Messages.get(CavesLevel.class, "entrance_desc");
 			case Terrain.EXIT:
 				//city exit is used

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CavesLevel.java
Patch:
@@ -210,6 +210,7 @@ public String tileName( int tile ) {
 	public String tileDesc( int tile ) {
 		switch (tile) {
 			case Terrain.ENTRANCE:
+			case Terrain.ENTRANCE_SP:
 				return Messages.get(CavesLevel.class, "entrance_desc");
 			case Terrain.EXIT:
 				return Messages.get(CavesLevel.class, "exit_desc");

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CityBossLevel.java
Patch:
@@ -388,6 +388,7 @@ public String tileName( int tile ) {
 	public String tileDesc(int tile) {
 		switch (tile) {
 			case Terrain.ENTRANCE:
+			case Terrain.ENTRANCE_SP:
 				return Messages.get(CityLevel.class, "entrance_desc");
 			case Terrain.EXIT:
 				return Messages.get(CityLevel.class, "exit_desc");

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CityLevel.java
Patch:
@@ -145,6 +145,7 @@ public String tileName( int tile ) {
 	public String tileDesc(int tile) {
 		switch (tile) {
 			case Terrain.ENTRANCE:
+			case Terrain.ENTRANCE_SP:
 				return Messages.get(CityLevel.class, "entrance_desc");
 			case Terrain.EXIT:
 				return Messages.get(CityLevel.class, "exit_desc");

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/LastShopLevel.java
Patch:
@@ -167,6 +167,7 @@ public String tileName( int tile ) {
 	public String tileDesc(int tile) {
 		switch (tile) {
 			case Terrain.ENTRANCE:
+			case Terrain.ENTRANCE_SP:
 				return Messages.get(CityLevel.class, "entrance_desc");
 			case Terrain.EXIT:
 				return Messages.get(CityLevel.class, "exit_desc");

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -1493,6 +1493,7 @@ public String tileName( int tile ) {
 			case Terrain.OPEN_DOOR:
 				return Messages.get(Level.class, "open_door_name");
 			case Terrain.ENTRANCE:
+			case Terrain.ENTRANCE_SP:
 				return Messages.get(Level.class, "entrace_name");
 			case Terrain.EXIT:
 				return Messages.get(Level.class, "exit_name");
@@ -1540,6 +1541,7 @@ public String tileDesc( int tile ) {
 			case Terrain.WATER:
 				return Messages.get(Level.class, "water_desc");
 			case Terrain.ENTRANCE:
+			case Terrain.ENTRANCE_SP:
 				return Messages.get(Level.class, "entrance_desc");
 			case Terrain.EXIT:
 			case Terrain.UNLOCKED_EXIT:

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Terrain.java
Patch:
@@ -31,6 +31,7 @@ public class Terrain {
 	public static final int DOOR			= 5;
 	public static final int OPEN_DOOR		= 6;
 	public static final int ENTRANCE		= 7;
+	public static final int ENTRANCE_SP		= 37;
 	public static final int EXIT			= 8;
 	public static final int EMBERS			= 9;
 	public static final int LOCKED_DOOR		= 10;
@@ -85,7 +86,8 @@ public class Terrain {
 		flags[WALL]			= LOS_BLOCKING | SOLID;
 		flags[DOOR]			= PASSABLE | LOS_BLOCKING | FLAMABLE | SOLID;
 		flags[OPEN_DOOR]	= PASSABLE | FLAMABLE;
-		flags[ENTRANCE]		= PASSABLE/* | SOLID*/;
+		flags[ENTRANCE]		= PASSABLE;
+		flags[ENTRANCE_SP]	= flags[ENTRANCE];
 		flags[EXIT]			= PASSABLE;
 		flags[EMBERS]		= PASSABLE;
 		flags[LOCKED_DOOR]	= LOS_BLOCKING | SOLID;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/standard/entrance/CircleBasinEntranceRoom.java
Patch:
@@ -45,7 +45,7 @@ public void paint(Level level) {
 		super.paint(level);
 
 		int entrance = level.pointToCell(center());
-		Painter.set( level, entrance, Terrain.ENTRANCE );
+		Painter.set( level, entrance, Terrain.ENTRANCE_SP );
 
 		level.transitions.add(new LevelTransition(level, entrance, LevelTransition.Type.REGULAR_ENTRANCE));
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/standard/entrance/HallwayEntranceRoom.java
Patch:
@@ -46,7 +46,7 @@ public void paint(Level level) {
 				break;
 			}
 		}
-		Painter.set( level, entrance, Terrain.ENTRANCE );
+		Painter.set( level, entrance, Terrain.ENTRANCE_SP );
 		level.transitions.add(new LevelTransition(level, entrance, LevelTransition.Type.REGULAR_ENTRANCE));
 
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/DungeonTileSheet.java
Patch:
@@ -68,6 +68,8 @@ private static int xy(int x, int y){
 	public static final int EMPTY_WELL      = GROUND +19;
 	public static final int PEDESTAL        = GROUND +20;
 
+	public static final int ENTRANCE_SP     = GROUND +22;
+
 	public static final int CHASM           =                               xy(9, 2);   //8 slots
 	//chasm stitching visuals...
 	public static final int CHASM_FLOOR     = CHASM+1;
@@ -394,6 +396,7 @@ public static int stitchWallOverhangTile(int tile, int rightBelow, int below, in
 		directVisuals.put(Terrain.EMBERS,           EMBERS);
 		directVisuals.put(Terrain.PEDESTAL,         PEDESTAL);
 		directVisuals.put(Terrain.EMPTY_SP,         FLOOR_SP);
+		directVisuals.put(Terrain.ENTRANCE_SP,      ENTRANCE_SP);
 
 		directVisuals.put(Terrain.SECRET_TRAP,      directVisuals.get(Terrain.EMPTY));
 		directVisuals.put(Terrain.TRAP,             directVisuals.get(Terrain.EMPTY));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MagesStaff.java
Patch:
@@ -184,7 +184,7 @@ public int proc(Char attacker, Char defender, int damage) {
 		}
 
 		if (empoweredStrike != null){
-			empoweredStrike.detach();
+			if (!empoweredStrike.delayedDetach) empoweredStrike.detach();
 			if (!(defender instanceof Mob) || !((Mob) defender).surprisedBy(attacker)){
 				Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG, 0.75f, 1.2f);
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/glyphs/AntiMagic.java
Patch:
@@ -102,7 +102,9 @@ public class AntiMagic extends Armor.Glyph {
 
 		RESISTS.add( ElementalStrike.class );
 		RESISTS.add( Blazing.class );
+		RESISTS.add( WandOfFireblast.FireBlastOnHit.class );
 		RESISTS.add( Shocking.class );
+		RESISTS.add( WandOfLightning.LightningOnHit.class );
 		RESISTS.add( Grim.class );
 
 		RESISTS.add( WarpBeacon.class );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfFireblast.java
Patch:
@@ -155,7 +155,7 @@ public void onHit(MagesStaff staff, Char attacker, Char defender, int damage) {
 		new FireBlastOnHit().proc( staff, attacker, defender, damage);
 	}
 
-	private static class FireBlastOnHit extends Blazing {
+	public static class FireBlastOnHit extends Blazing {
 		@Override
 		protected float procChanceMultiplier(Char attacker) {
 			return Wand.procChanceMultiplier(attacker);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfLightning.java
Patch:
@@ -101,7 +101,7 @@ public void onHit(MagesStaff staff, Char attacker, Char defender, int damage) {
 		new LightningOnHit().proc(staff, attacker, defender, damage);
 	}
 
-	private static class LightningOnHit extends Shocking {
+	public static class LightningOnHit extends Shocking {
 		@Override
 		protected float procChanceMultiplier(Char attacker) {
 			return Wand.procChanceMultiplier(attacker);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Badges.java
Patch:
@@ -800,9 +800,8 @@ public static void validateBossSlain() {
 
 			if (Statistics.qualifiedForBossRemainsBadge && Dungeon.hero.belongings.getItem(RemainsItem.class) != null){
 				badge = Badge.BOSS_SLAIN_REMAINS;
-				if (!isUnlocked( badge )) {
-					displayBadge( badge );
-				}
+				local.add( badge );
+				displayBadge( badge );
 			}
 
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/DriedRose.java
Patch:
@@ -246,11 +246,11 @@ public String desc() {
 			desc += "\n";
 
 			if (weapon != null) {
-				desc += "\n" + Messages.get(this, "desc_weapon", weapon.title());
+				desc += "\n" + Messages.get(this, "desc_weapon", Messages.titleCase(weapon.title()));
 			}
 
 			if (armor != null) {
-				desc += "\n" + Messages.get(this, "desc_armor", armor.title());
+				desc += "\n" + Messages.get(this, "desc_armor", Messages.titleCase(armor.title()));
 			}
 
 			desc += "\n" + Messages.get(this, "desc_strength", ghostStrength());

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Greataxe.java
Patch:
@@ -94,7 +94,7 @@ public void call() {
 				//+(12.5+(1.75*lvl)) damage, equivalent to +50% damage
 				int dmgBoost = augment.damageFactor(Math.round(12.5f + 1.75f*buffedLvl()));
 
-				if (hero.attack(enemy, 1.50f, 0, Char.INFINITE_ACCURACY)){
+				if (hero.attack(enemy, 1, dmgBoost, Char.INFINITE_ACCURACY)){
 					Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 					if (!enemy.isAlive()){
 						onAbilityKill(hero, enemy);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CityBossLevel.java
Patch:
@@ -366,7 +366,7 @@ public void call() {
 	}
 
 	private void spawnShop(){
-		while (impShop.itemCount() >= 7*(impShop.height()-2)){
+		while (impShop.spacesNeeded() >= 7*(impShop.height()-2)){
 			impShop.bottom++;
 		}
 		impShop.spawnShop(this);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/DamageWand.java
Patch:
@@ -29,7 +29,7 @@
 import com.watabou.noosa.audio.Sample;
 
 //for wands that directly damage a target
-//wands with AOE effects count here (e.g. fireblast), but wands with indrect damage do not (e.g. venom, transfusion)
+//wands with AOE or circumstantial direct damage count here (e.g. fireblast, transfusion), but wands with indirect damage do not (e.g. corrosion)
 public abstract class DamageWand extends Wand{
 
 	public int min(){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/ItemSpriteSheet.java
Patch:
@@ -479,7 +479,7 @@ private static void assignItemRect( int item, int width, int height ){
 		assignItemRect(RAT_SKULL,       16,  11);
 		assignItemRect(PARCHMENT_SCRAP, 10,  14);
 		assignItemRect(PETRIFIED_SEED,  10,  10);
-		assignItemRect(EXOTIC_CRYSTALS, 11,  11);
+		assignItemRect(EXOTIC_CRYSTALS, 14,  13);
 		assignItemRect(MOSSY_CLUMP,     12,  11);
 		assignItemRect(SUNDIAL,         16,  12);
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfRegrowth.java
Patch:
@@ -426,7 +426,7 @@ public boolean inRange(int pos){
 		}
 
 		public float seedPreservation(){
-			return 0.40f + 0.04f*wandLvl;
+			return Math.min( 1f, 0.40f + 0.04f*wandLvl );
 		}
 
 		@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/darts/TippedDart.java
Patch:
@@ -186,6 +186,9 @@ public float durabilityPerUse() {
 			usages += 4;
 		}
 
+		//at 100 uses, items just last forever.
+		if (usages >= 100f) return 0;
+
 		//add a tiny amount to account for rounding error for calculations like 1/3
 		return (MAX_DURABILITY/usages) + 0.001f;
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/MasterThievesArmband.java
Patch:
@@ -302,6 +302,7 @@ public boolean steal(Item item){
 					GLog.p(Messages.get(MasterThievesArmband.class, "level_up"));
 					upgrade();
 				}
+				updateQuickslot();
 				return true;
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/CloakOfShadows.java
Patch:
@@ -238,7 +238,7 @@ public boolean act() {
 					partialCharge += chargeToGain;
 				}
 
-				if (partialCharge >= 1) {
+				while (partialCharge >= 1) {
 					charge++;
 					partialCharge -= 1;
 					if (charge == chargeCap){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/DriedRose.java
Patch:
@@ -404,7 +404,7 @@ public boolean act() {
 					partialCharge += (ghost.HT / 500f) * RingOfEnergy.artifactChargeMultiplier(target);
 					updateQuickslot();
 					
-					if (partialCharge > 1) {
+					while (partialCharge > 1) {
 						ghost.HP++;
 						partialCharge--;
 					}
@@ -421,7 +421,7 @@ public boolean act() {
 					&& Regeneration.regenOn()) {
 				//500 turns to a full charge
 				partialCharge += (1/5f * RingOfEnergy.artifactChargeMultiplier(target));
-				if (partialCharge > 1){
+				while (partialCharge > 1){
 					charge++;
 					partialCharge--;
 					if (charge == chargeCap){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/EtherealChains.java
Patch:
@@ -281,7 +281,7 @@ public void charge(Hero target, float amount) {
 		int chargeTarget = 5+(level()*2);
 		if (charge < chargeTarget*2){
 			partialCharge += 0.5f*amount;
-			if (partialCharge >= 1){
+			while (partialCharge >= 1){
 				partialCharge--;
 				charge++;
 				updateQuickslot();
@@ -320,7 +320,7 @@ public boolean act() {
 				Buff.prolong( target, Cripple.class, 10f);
 			}
 
-			if (partialCharge >= 1) {
+			while (partialCharge >= 1) {
 				partialCharge --;
 				charge ++;
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/HornOfPlenty.java
Patch:
@@ -164,7 +164,7 @@ protected ArtifactBuff passiveBuff() {
 	public void charge(Hero target, float amount) {
 		if (charge < chargeCap && !cursed && target.buff(MagicImmune.class) == null){
 			partialCharge += 0.25f*amount;
-			if (partialCharge >= 1){
+			while (partialCharge >= 1){
 				partialCharge--;
 				charge++;
 				

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/LloydsBeacon.java
Patch:
@@ -276,7 +276,7 @@ protected ArtifactBuff passiveBuff() {
 	public void charge(Hero target, float amount) {
 		if (charge < chargeCap){
 			partialCharge += 0.25f*amount;
-			if (partialCharge >= 1){
+			while (partialCharge >= 1){
 				partialCharge--;
 				charge++;
 				updateQuickslot();
@@ -314,7 +314,7 @@ public boolean act() {
 			if (charge < chargeCap && !cursed && Regeneration.regenOn()) {
 				partialCharge += 1 / (100f - (chargeCap - charge)*10f);
 
-				if (partialCharge >= 1) {
+				while (partialCharge >= 1) {
 					partialCharge --;
 					charge ++;
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/features/HighGrass.java
Patch:
@@ -81,7 +81,7 @@ public static void trample( Level level, int pos ) {
 				if (naturalism != null) {
 					if (!naturalism.isCursed()) {
 						naturalismLevel = naturalism.itemLevel() + 1;
-						naturalism.charge(1);
+						naturalism.charge();
 					} else {
 						naturalismLevel = -1;
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/GnollGeomancer.java
Patch:
@@ -806,7 +806,9 @@ public void affectChar(Char ch) {
 
 		@Override
 		public void affectCell(int cell) {
-			if (Dungeon.level.map[cell] != Terrain.EMPTY_SP && Random.Int(3) == 0) {
+			if (Dungeon.level.map[cell] != Terrain.EMPTY_SP
+					&& !Dungeon.level.adjacent(cell, Dungeon.level.entrance())
+					&& Random.Int(3) == 0) {
 				Level.set(cell, Terrain.MINE_BOULDER);
 				GameScene.updateMap(cell);
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -512,7 +512,9 @@ public LevelTransition getTransition(LevelTransition.Type type){
 		for (LevelTransition transition : transitions){
 			//if we don't specify a type, prefer to return any entrance
 			if (type == null &&
-					(transition.type == LevelTransition.Type.REGULAR_ENTRANCE || transition.type == LevelTransition.Type.SURFACE)){
+					(transition.type == LevelTransition.Type.REGULAR_ENTRANCE
+							|| transition.type == LevelTransition.Type.BRANCH_ENTRANCE
+							|| transition.type == LevelTransition.Type.SURFACE)){
 				return transition;
 			} else if (transition.type == type){
 				return transition;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/MissileWeapon.java
Patch:
@@ -288,7 +288,7 @@ protected void rangedHit( Char enemy, int cell ){
 		decrementDurability();
 		if (durability > 0){
 			//attempt to stick the missile weapon to the enemy, just drop it if we can't.
-			if (sticky && enemy != null && enemy.isAlive() && enemy.alignment != Char.Alignment.ALLY){
+			if (sticky && enemy != null && enemy.isActive() && enemy.alignment != Char.Alignment.ALLY){
 				PinCushion p = Buff.affect(enemy, PinCushion.class);
 				if (p.target == enemy){
 					p.stick(this);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/YogDzewa.java
Patch:
@@ -503,7 +503,7 @@ public void clearEnemy() {
 	@Override
 	public void aggro(Char ch) {
 		for (Mob mob : (Iterable<Mob>)Dungeon.level.mobs.clone()) {
-			if (Dungeon.level.distance(pos, mob.pos) <= 4 &&
+			if (mob != ch && Dungeon.level.distance(pos, mob.pos) <= 4 &&
 					(mob instanceof Larva || mob instanceof YogRipper || mob instanceof YogEye || mob instanceof YogScorpio)) {
 				mob.aggro(ch);
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/stones/StoneOfDisarming.java
Patch:
@@ -41,9 +41,6 @@ public class StoneOfDisarming extends Runestone {
 	
 	{
 		image = ItemSpriteSheet.STONE_DISARM;
-
-		//so traps do not activate before the effect
-		pressesCell = false;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/stones/StoneOfFlock.java
Patch:
@@ -39,9 +39,6 @@ public class StoneOfFlock extends Runestone {
 	
 	{
 		image = ItemSpriteSheet.STONE_FLOCK;
-
-		//the sheep will press the cell instead
-		pressesCell = false;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Dagger.java
Patch:
@@ -117,7 +117,7 @@ public static void sneakAbility(Hero hero, Integer target, int maxDist, MeleeWea
 		}
 
 		wep.beforeAbilityUsed(hero, null);
-		Buff.affect(hero, Invisibility.class, Actor.TICK);
+		Buff.affect(hero, Invisibility.class);
 		hero.next();
 
 		Dungeon.hero.sprite.turnTo( Dungeon.hero.pos, target);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/MasterThievesArmband.java
Patch:
@@ -34,6 +34,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MagicImmune;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mimic;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Shopkeeper;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Surprise;
@@ -121,7 +122,8 @@ public void onSelect(Integer target) {
 				Char ch = Actor.findChar(target);
 				if (ch instanceof Shopkeeper){
 					GLog.w( Messages.get(MasterThievesArmband.class, "steal_shopkeeper") );
-				} else if (ch.alignment != Char.Alignment.ENEMY){
+				} else if (ch.alignment != Char.Alignment.ENEMY
+						&& !(ch instanceof Mimic && ch.alignment == Char.Alignment.NEUTRAL)){
 					GLog.w( Messages.get(MasterThievesArmband.class, "no_target") );
 				} else if (ch instanceof Mob) {
 					curUser.busy();

File: android/src/main/java/com/shatteredpixel/shatteredpixeldungeon/android/AndroidLauncher.java
Patch:
@@ -62,7 +62,7 @@ protected void onCreate (Bundle savedInstanceState) {
 			GdxNativesLoader.load();
 			FreeType.initFreeType();
 		} catch (Exception e){
-			AndroidMissingNativesHandler.errorMsg = e.getMessage();
+			AndroidMissingNativesHandler.error = e;
 			Intent intent = new Intent(this, AndroidMissingNativesHandler.class);
 			startActivity(intent);
 			finish();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/HeroSprite.java
Patch:
@@ -122,6 +122,7 @@ public void idle() {
 	public void jump( int from, int to, float height, float duration,  Callback callback ) {
 		super.jump( from, to, height, duration, callback );
 		play( fly );
+		Camera.main.panFollow(this, 20f);
 	}
 
 	public synchronized void read() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/standard/ImpShopRoom.java
Patch:
@@ -91,7 +91,7 @@ protected void placeShopkeeper(Level level) {
 	//fix for connections not being bundled normally
 	@Override
 	public Door entrance() {
-		return connected.isEmpty() ? new Door(left, top+2) : super.entrance();
+		return connected.isEmpty() ? new Door((left+right)/2 + 1, bottom-1) : super.entrance();
 	}
 
 	public void spawnShop(Level level){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/TerrainFeaturesTilemap.java
Patch:
@@ -66,14 +66,15 @@ protected int getTileVisual(int pos, int tile, boolean flat){
 
 		int stage = (Dungeon.depth-1)/5;
 		if (Dungeon.depth == 21 && Dungeon.level instanceof LastShopLevel) stage--;
+		stage = Math.min(stage, 4);
 		if (tile == Terrain.HIGH_GRASS){
 			return 9 + 16*stage + (DungeonTileSheet.tileVariance[pos] >= 50 ? 1 : 0);
 		} else if (tile == Terrain.FURROWED_GRASS){
 			return 11 + 16*stage + (DungeonTileSheet.tileVariance[pos] >= 50 ? 1 : 0);
 		} else if (tile == Terrain.GRASS) {
 			return 13 + 16*stage + (DungeonTileSheet.tileVariance[pos] >= 50 ? 1 : 0);
 		} else if (tile == Terrain.EMBERS) {
-			return 9 * (16*5) + (DungeonTileSheet.tileVariance[pos] >= 50 ? 1 : 0);
+			return 9 + (16*5) + (DungeonTileSheet.tileVariance[pos] >= 50 ? 1 : 0);
 		}
 
 		return -1;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/HeroSelectScene.java
Patch:
@@ -460,7 +460,7 @@ private void updateFade(){
 		}
 		startBtn.enable(alpha != 0);
 		startBtn.alpha(alpha);
-		btnExit.enable(alpha != 0);
+		btnExit.enable(btnExit.visible && alpha != 0);
 		btnExit.icon().alpha(alpha);
 		optionsPane.active = optionsPane.visible && alpha != 0;
 		optionsPane.alpha(alpha);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfWarding.java
Patch:
@@ -340,7 +340,8 @@ private void zap() {
 
 			if (!enemy.isAlive() && enemy == Dungeon.hero) {
 				Badges.validateDeathFromFriendlyMagic();
-				Dungeon.fail( this );
+				GLog.n(Messages.capitalize(Messages.get( this, "kill", name() )));
+				Dungeon.fail( WandOfWarding.class );
 			}
 
 			totalZaps++;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTransmutation.java
Patch:
@@ -122,7 +122,7 @@ protected void onItemSelected(Item item) {
 					item.detach(Dungeon.hero.belongings.backpack);
 					if (!result.collect()) {
 						Dungeon.level.drop(result, curUser.pos).sprite.drop();
-					} else if (Dungeon.hero.belongings.getSimilar(result) != null){
+					} else if (result.stackable && Dungeon.hero.belongings.getSimilar(result) != null){
 						result = Dungeon.hero.belongings.getSimilar(result);
 					}
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Rapier.java
Patch:
@@ -111,6 +111,7 @@ public static void lungeAbility(Hero hero, Integer target, float dmgMulti, int d
 		}
 
 		final int dest = lungeCell;
+
 		hero.busy();
 		Sample.INSTANCE.play(Assets.Sounds.MISS);
 		hero.sprite.jump(hero.pos, dest, 0, 0.1f, new Callback() {
@@ -123,6 +124,7 @@ public void call() {
 				Dungeon.level.occupyCell(hero);
 				Dungeon.observe();
 
+				hero.belongings.abilityWeapon = wep; //set this early to we can check canAttack
 				if (enemy != null && hero.canAttack(enemy)) {
 					hero.sprite.attack(enemy.pos, new Callback() {
 						@Override

File: SPD-classes/src/main/java/com/watabou/noosa/particles/Emitter.java
Patch:
@@ -134,9 +134,11 @@ public void update() {
 
 	@Override
 	public void revive() {
+		//ensure certain emitter variables default to true
 		started = false;
-		//some emitters may be killed while not visible, this ensures true is always the default
 		visible = true;
+		fillTarget = true;
+		autoKill = true;
 		super.revive();
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/YogFist.java
Patch:
@@ -386,7 +386,7 @@ protected boolean act() {
 
 			if (Dungeon.level.water[pos] && HP < HT) {
 				sprite.showStatusWithIcon(CharSprite.POSITIVE, Integer.toString(HT/50), FloatingText.HEALING);
-				HP = Math.max(HT, HP + HT/50);
+				HP = Math.min(HT, HP + HT/50);
 			}
 
 			return super.act();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1459,6 +1459,7 @@ public void damage( int dmg, Object src ) {
 		if (belongings.armor() != null && belongings.armor().hasGlyph(AntiMagic.class, this)
 				&& AntiMagic.RESISTS.contains(src.getClass())){
 			dmg -= AntiMagic.drRoll(this, belongings.armor().buffedLvl());
+			dmg = Math.max(dmg, 0);
 		}
 
 		if (buff(Talent.WarriorFoodImmunity.class) != null){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/rogue/ShadowClone.java
Patch:
@@ -268,6 +268,7 @@ public void damage(int dmg, Object src) {
 					&& Dungeon.hero.belongings.armor().hasGlyph(AntiMagic.class, this)
 					&& AntiMagic.RESISTS.contains(src.getClass())){
 				dmg -= AntiMagic.drRoll(Dungeon.hero, Dungeon.hero.belongings.armor().buffedLvl());
+				dmg = Math.max(dmg, 0);
 			}
 
 			super.damage(dmg, src);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/ArmoredStatue.java
Patch:
@@ -105,6 +105,7 @@ public void damage(int dmg, Object src) {
 		if (armor != null && armor.hasGlyph(AntiMagic.class, this)
 				&& AntiMagic.RESISTS.contains(src.getClass())){
 			dmg -= AntiMagic.drRoll(this, armor.buffedLvl());
+			dmg = Math.max(dmg, 0);
 		}
 
 		super.damage( dmg, src );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/PrismaticImage.java
Patch:
@@ -210,6 +210,7 @@ public void damage(int dmg, Object src) {
 		if (hero != null && hero.belongings.armor() != null && hero.belongings.armor().hasGlyph(AntiMagic.class, this)
 				&& AntiMagic.RESISTS.contains(src.getClass())){
 			dmg -= AntiMagic.drRoll(hero, hero.belongings.armor().buffedLvl());
+			dmg = Math.max(dmg, 0);
 		}
 		
 		super.damage(dmg, src);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/DriedRose.java
Patch:
@@ -657,6 +657,7 @@ public void damage(int dmg, Object src) {
 			if (rose != null && rose.armor != null && rose.armor.hasGlyph(AntiMagic.class, this)
 					&& AntiMagic.RESISTS.contains(src.getClass())){
 				dmg -= AntiMagic.drRoll(this, rose.armor.buffedLvl());
+				dmg = Math.max(dmg, 0);
 			}
 			
 			super.damage( dmg, src );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/CloakOfShadows.java
Patch:
@@ -352,6 +352,9 @@ public boolean act(){
 		}
 
 		public void dispel(){
+			if (turnsToCost <= 0 && charge > 0){
+				charge--;
+			}
 			updateQuickslot();
 			detach();
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/GnollGeomancer.java
Patch:
@@ -82,6 +82,7 @@ public class GnollGeomancer extends Mob {
 		viewDistance = 12;
 
 		properties.add(Property.BOSS);
+		properties.add(Property.IMMOVABLE); //moves itself via ability, otherwise is static
 	}
 
 	private int abilityCooldown = Random.NormalIntRange(3, 5);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/darts/RotDart.java
Patch:
@@ -52,6 +52,6 @@ public int proc(Char attacker, Char defender, int damage) {
 	
 	@Override
 	public float durabilityPerUse() {
-		return 20f;
+		return MAX_DURABILITY/5f; //always 5 uses
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfAccuracy.java
Patch:
@@ -36,9 +36,9 @@ public String statsInfo() {
 		if (isIdentified()){
 			String info = Messages.get(this, "stats",
 					Messages.decimalFormat("#.##", 100f * (Math.pow(1.3f, soloBuffedBonus()) - 1f)));
-			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero, Accuracy.class)){
+			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero)){
 				info += "\n\n" + Messages.get(this, "combined_stats",
-						Messages.decimalFormat("#.##", 100f * (Math.pow(1.3f, combinedBuffedBonus(Dungeon.hero, Accuracy.class)) - 1f)));
+						Messages.decimalFormat("#.##", 100f * (Math.pow(1.3f, combinedBuffedBonus(Dungeon.hero)) - 1f)));
 			}
 			return info;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfArcana.java
Patch:
@@ -36,9 +36,9 @@ public String statsInfo() {
 		if (isIdentified()){
 			String info = Messages.get(this, "stats",
 					Messages.decimalFormat("#.##", 100f * (Math.pow(1.175f, soloBuffedBonus()) - 1f)));
-			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero, Arcana.class)){
+			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero)){
 				info += "\n\n" + Messages.get(this, "combined_stats",
-						Messages.decimalFormat("#.##", 100f * (Math.pow(1.175f, combinedBuffedBonus(Dungeon.hero, Arcana.class)) - 1f)));
+						Messages.decimalFormat("#.##", 100f * (Math.pow(1.175f, combinedBuffedBonus(Dungeon.hero)) - 1f)));
 			}
 			return info;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfElements.java
Patch:
@@ -48,9 +48,9 @@ public String statsInfo() {
 		if (isIdentified()){
 			String info = Messages.get(this, "stats",
 					Messages.decimalFormat("#.##", 100f * (1f - Math.pow(0.825f, soloBuffedBonus()))));
-			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero, Resistance.class)){
+			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero)){
 				info += "\n\n" + Messages.get(this, "combined_stats",
-						Messages.decimalFormat("#.##", 100f * (1f - Math.pow(0.825f, combinedBuffedBonus(Dungeon.hero, Resistance.class)))));
+						Messages.decimalFormat("#.##", 100f * (1f - Math.pow(0.825f, combinedBuffedBonus(Dungeon.hero)))));
 			}
 			return info;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfEnergy.java
Patch:
@@ -39,9 +39,9 @@ public String statsInfo() {
 		if (isIdentified()){
 			String info = Messages.get(this, "stats",
 					Messages.decimalFormat("#.##", 100f * (Math.pow(1.15f, soloBuffedBonus()) - 1f)));
-			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero, Energy.class)){
+			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero)){
 				info += "\n\n" + Messages.get(this, "combined_stats",
-						Messages.decimalFormat("#.##", 100f * (Math.pow(1.15f, combinedBuffedBonus(Dungeon.hero, Energy.class)) - 1f)));
+						Messages.decimalFormat("#.##", 100f * (Math.pow(1.15f, combinedBuffedBonus(Dungeon.hero)) - 1f)));
 			}
 			return info;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfEvasion.java
Patch:
@@ -36,9 +36,9 @@ public String statsInfo() {
 		if (isIdentified()){
 			String info = Messages.get(this, "stats",
 					Messages.decimalFormat("#.##", 100f * (Math.pow(1.125f, soloBuffedBonus()) - 1f)));
-			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero, Evasion.class)){
+			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero)){
 				info += "\n\n" + Messages.get(this, "combined_stats",
-						Messages.decimalFormat("#.##", 100f * (Math.pow(1.125f, combinedBuffedBonus(Dungeon.hero, Evasion.class)) - 1f)));
+						Messages.decimalFormat("#.##", 100f * (Math.pow(1.125f, combinedBuffedBonus(Dungeon.hero)) - 1f)));
 			}
 			return info;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfForce.java
Patch:
@@ -115,8 +115,8 @@ public String statsInfo() {
 		if (isIdentified()) {
 			int level = soloBuffedBonus();
 			String info = Messages.get(this, "stats", min(level, tier), max(level, tier), level);
-			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero, Force.class)){
-				level = combinedBuffedBonus(Dungeon.hero, Force.class);
+			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero)){
+				level = combinedBuffedBonus(Dungeon.hero);
 				info += "\n\n" + Messages.get(this, "combined_stats", min(level, tier), max(level, tier), level);
 			}
 			return info;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfFuror.java
Patch:
@@ -36,9 +36,9 @@ public String statsInfo() {
 		if (isIdentified()){
 			String info = Messages.get(this, "stats",
 					Messages.decimalFormat("#.##", 100f * (Math.pow(1.09051f, soloBuffedBonus()) - 1f)));
-			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero, Furor.class)){
+			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero)){
 				info += "\n\n" + Messages.get(this, "combined_stats",
-						Messages.decimalFormat("#.##", 100f * (Math.pow(1.09051f, combinedBuffedBonus(Dungeon.hero, Furor.class)) - 1f)));
+						Messages.decimalFormat("#.##", 100f * (Math.pow(1.09051f, combinedBuffedBonus(Dungeon.hero)) - 1f)));
 			}
 			return info;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfHaste.java
Patch:
@@ -36,9 +36,9 @@ public String statsInfo() {
 		if (isIdentified()){
 			String info = Messages.get(this, "stats",
 					Messages.decimalFormat("#.##", 100f * (Math.pow(1.2f, soloBuffedBonus()) - 1f)));
-			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero, Haste.class)){
+			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero)){
 				info += "\n\n" + Messages.get(this, "combined_stats",
-						Messages.decimalFormat("#.##", 100f * (Math.pow(1.2f, combinedBuffedBonus(Dungeon.hero, Haste.class)) - 1f)));
+						Messages.decimalFormat("#.##", 100f * (Math.pow(1.2f, combinedBuffedBonus(Dungeon.hero)) - 1f)));
 			}
 			return info;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfMight.java
Patch:
@@ -78,9 +78,9 @@ public String statsInfo() {
 		if (isIdentified()){
 			String info = Messages.get(this, "stats",
 					soloBonus(), Messages.decimalFormat("#.##", 100f * (Math.pow(1.035, soloBuffedBonus()) - 1f)));
-			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero, Might.class)){
+			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero)){
 				info += "\n\n" + Messages.get(this, "combined_stats",
-						getBonus(Dungeon.hero, Might.class), Messages.decimalFormat("#.##", 100f * (Math.pow(1.035, combinedBuffedBonus(Dungeon.hero, Might.class)) - 1f)));
+						getBonus(Dungeon.hero, Might.class), Messages.decimalFormat("#.##", 100f * (Math.pow(1.035, combinedBuffedBonus(Dungeon.hero)) - 1f)));
 			}
 			return info;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfSharpshooting.java
Patch:
@@ -36,9 +36,9 @@ public String statsInfo() {
 		if (isIdentified()){
 			String info = Messages.get(this, "stats",
 					soloBuffedBonus(), Messages.decimalFormat("#.##", 100f * (Math.pow(1.2, soloBonus()) - 1f)));
-			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero, Aim.class)){
+			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero)){
 				info += "\n\n" + Messages.get(this, "combined_stats",
-						combinedBuffedBonus(Dungeon.hero, Aim.class), Messages.decimalFormat("#.##", 100f * (Math.pow(1.2, getBonus(Dungeon.hero, Aim.class)) - 1f)));
+						combinedBuffedBonus(Dungeon.hero), Messages.decimalFormat("#.##", 100f * (Math.pow(1.2, combinedBonus(Dungeon.hero)) - 1f)));
 			}
 			return info;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfTenacity.java
Patch:
@@ -36,9 +36,9 @@ public String statsInfo() {
 		if (isIdentified()){
 			String info = Messages.get(this, "stats",
 					Messages.decimalFormat("#.##", 100f * (1f - Math.pow(0.85f, soloBuffedBonus()))));
-			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero, Tenacity.class)){
+			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero)){
 				info += "\n\n" + Messages.get(this, "combined_stats",
-						Messages.decimalFormat("#.##", 100f * (1f - Math.pow(0.85f, combinedBuffedBonus(Dungeon.hero, Tenacity.class)))));
+						Messages.decimalFormat("#.##", 100f * (1f - Math.pow(0.85f, combinedBuffedBonus(Dungeon.hero)))));
 			}
 			return info;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfWealth.java
Patch:
@@ -62,9 +62,9 @@ public String statsInfo() {
 		if (isIdentified()){
 			String info = Messages.get(this, "stats",
 					Messages.decimalFormat("#.##", 100f * (Math.pow(1.20f, soloBuffedBonus()) - 1f)));
-			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero, Wealth.class)){
+			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero)){
 				info += "\n\n" + Messages.get(this, "combined_stats",
-						Messages.decimalFormat("#.##", 100f * (Math.pow(1.20f, combinedBuffedBonus(Dungeon.hero, Wealth.class)) - 1f)));
+						Messages.decimalFormat("#.##", 100f * (Math.pow(1.20f, combinedBuffedBonus(Dungeon.hero)) - 1f)));
 			}
 			return info;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndSettings.java
Patch:
@@ -841,7 +841,7 @@ protected void onClick() {
 						@Override
 						protected void onClick() {
 							super.onClick();
-							SPDSettings.updates(checked());
+							SPDSettings.betas(checked());
 							Updates.clearUpdate();
 						}
 					};

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -1268,7 +1268,7 @@ public static void restoreAllies( Level level, int pos, int gravitatePos ){
 			
 			ArrayList<Integer> candidatePositions = new ArrayList<>();
 			for (int i : PathFinder.NEIGHBOURS8) {
-				if (!Dungeon.level.solid[i+pos] && level.findMob(i+pos) == null){
+				if (!Dungeon.level.solid[i+pos] && !Dungeon.level.avoid[i+pos] && level.findMob(i+pos) == null){
 					candidatePositions.add(i+pos);
 				}
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/QuickSlotButton.java
Patch:
@@ -258,8 +258,10 @@ public void onSelect(Item item) {
 		}
 	};
 
+	public static int lastVisible = instance.length;
+
 	public static void set(Item item){
-		for (int i = 0; i < instance.length; i++) {
+		for (int i = 0; i < lastVisible; i++) {
 			if (select(i) == null || select(i) == item) {
 				set(i, item);
 				return;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Toolbar.java
Patch:
@@ -498,10 +498,12 @@ protected void layout() {
 			startingSlot = swappedQuickslots ? 3 : 0;
 			btnSwap.visible = true;
 			btnSwap.active = lastEnabled;
+			QuickSlotButton.lastVisible = 6;
 		} else {
 			startingSlot = 0;
 			btnSwap.visible = btnSwap.active = false;
 			btnSwap.setPos(0, PixelScene.uiCamera.height);
+			QuickSlotButton.lastVisible = quickslotsToShow;
 		}
 		int endingSlot = startingSlot+quickslotsToShow-1;
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/AllyBuff.java
Patch:
@@ -26,6 +26,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroSubClass;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mimic;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
 import com.shatteredpixel.shatteredpixeldungeon.effects.FloatingText;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite;
@@ -50,7 +51,7 @@ public boolean attachTo(Char target) {
 	//for when applying an ally buff should also cause that enemy to give exp/loot as if they had died
 	//consider that chars with the ally alignment do not drop items or award exp on death
 	public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){
-		boolean wasEnemy = enemy.alignment == Char.Alignment.ENEMY;
+		boolean wasEnemy = enemy.alignment == Char.Alignment.ENEMY || enemy instanceof Mimic;
 		Buff.affect(enemy, buffCls);
 
 		if (enemy.buff(buffCls) != null && wasEnemy){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Dagger.java
Patch:
@@ -33,6 +33,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.effects.Speck;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
+import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
 import com.watabou.noosa.audio.Sample;
@@ -103,8 +104,9 @@ public static void sneakAbility(Hero hero, Integer target, int maxDist, MeleeWea
 			return;
 		}
 
-		if (Actor.findChar(target) != null || !Dungeon.level.heroFOV[target]) {
+		if (Actor.findChar(target) != null || !Dungeon.level.heroFOV[target] || hero.rooted) {
 			GLog.w(Messages.get(wep, "ability_bad_position"));
+			if (Dungeon.hero.rooted) PixelScene.shake( 1, 1f );
 			return;
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndBlacksmith.java
Patch:
@@ -257,7 +257,7 @@ protected void onClick() {
 				protected void onClick() {
 
 					Item first, second;
-					if (btnItem1.item().trueLevel() > btnItem2.item().trueLevel()) {
+					if (btnItem1.item().trueLevel() >= btnItem2.item().trueLevel()) {
 						first = btnItem1.item();
 						second = btnItem2.item();
 					} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DwarfKing.java
Patch:
@@ -450,8 +450,8 @@ public boolean isInvulnerable(Class effect) {
 
 	@Override
 	public void damage(int dmg, Object src) {
-		//hero only counts as unarmed if they have no weapon and aren't benefiting from force
-		if (src == Dungeon.hero && (Dungeon.hero.belongings.weapon() != null || Dungeon.hero.buff(RingOfForce.Force.class) != null)){
+		//hero counts as unarmed if they aren't attacking with a weapon and aren't benefiting from force
+		if (src == Dungeon.hero && (!RingOfForce.fightingUnarmed(Dungeon.hero) || Dungeon.hero.buff(RingOfForce.Force.class) != null)){
 			Statistics.qualifiedForBossChallengeBadge = false;
 		//Corrosion, corruption, and regrowth do no direct damage and so have their own custom logic
 		//Transfusion damages DK and so doesn't need custom logic

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/PrismaticGuard.java
Patch:
@@ -51,7 +51,8 @@ public boolean act() {
 		int v = hero.visibleEnemies();
 		for (int i=0; i < v; i++) {
 			Mob mob = hero.visibleEnemy( i );
-			if ( mob.isAlive() && mob.state != mob.PASSIVE && mob.state != mob.WANDERING && mob.state != mob.SLEEPING && !hero.mindVisionEnemies.contains(mob)
+			if ( mob.isAlive() && !mob.isInvulnerable(PrismaticImage.class)
+					&& mob.state != mob.PASSIVE && mob.state != mob.WANDERING && mob.state != mob.SLEEPING && !hero.mindVisionEnemies.contains(mob)
 					&& (closest == null || Dungeon.level.distance(hero.pos, mob.pos) < Dungeon.level.distance(hero.pos, closest.pos))) {
 				closest = mob;
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/standard/EntranceRoom.java
Patch:
@@ -94,6 +94,7 @@ public void paint(Level level ) {
 						Random.IntRange( top + 1, bottom - 2 )));
 			} while (pos == level.entrance() || level.findMob(level.entrance()) != null);
 			level.drop( new Guidebook(), pos );
+			Document.ADVENTURERS_GUIDE.deletePage(Document.GUIDE_INTRO);
 		}
 
 		//places the third guidebook page on floor 2

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -568,7 +568,9 @@ public void draw() {
 		//Tutorial
 		if (SPDSettings.intro()){
 
-			if (ControllerHandler.isControllerConnected()) {
+			if (Document.ADVENTURERS_GUIDE.isPageFound(Document.GUIDE_INTRO)){
+				GameScene.flashForDocument(Document.ADVENTURERS_GUIDE, Document.GUIDE_INTRO);
+			} else if (ControllerHandler.isControllerConnected()) {
 				GLog.p(Messages.get(GameScene.class, "tutorial_move_controller"));
 			} else if (SPDSettings.interfaceSize() == 0) {
 				GLog.p(Messages.get(GameScene.class, "tutorial_move_mobile"));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Pylon.java
Patch:
@@ -93,6 +93,7 @@ protected boolean act() {
 		//end of char/mob logic
 
 		if (alignment == Alignment.NEUTRAL){
+			spend(TICK);
 			return true;
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/GnollGeomancerSprite.java
Patch:
@@ -108,14 +108,16 @@ public void die() {
 		super.die();
 		if (earthArmor != null){
 			earthArmor.on = false;
+			earthArmor = null;
 		}
 	}
 
 	@Override
 	public void kill() {
 		super.kill();
 		if (earthArmor != null){
-			earthArmor.killAndErase();
+			earthArmor.on = false;
+			earthArmor = null;
 		}
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/GnollGuardSprite.java
Patch:
@@ -96,14 +96,16 @@ public void die() {
 		super.die();
 		if (earthArmor != null){
 			earthArmor.on = false;
+			earthArmor = null;
 		}
 	}
 
 	@Override
 	public void kill() {
 		super.kill();
 		if (earthArmor != null){
-			earthArmor.killAndErase();
+			earthArmor.on = false;
+			earthArmor = null;
 		}
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/CrystalSpire.java
Patch:
@@ -356,7 +356,7 @@ public void call() {
 						for (Char ch : Actor.chars()){
 							if (fieldOfView[ch.pos]) {
 								if (ch instanceof CrystalGuardian) {
-									ch.damage(ch.HT, this);
+									ch.damage(ch.HT, new SpireSpike());
 								}
 								if (ch instanceof CrystalWisp) {
 									Buff.affect(ch, Blindness.class, 5f);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Assets.java
Patch:
@@ -323,5 +323,6 @@ public static class Sprites {
 		public static final String GNOLL_GEOMANCER  = "sprites/gnoll_geomancer.png";
 		public static final String FUNGAL_SPINNER   = "sprites/fungal_spinner.png";
 		public static final String FUNGAL_SENTRY    = "sprites/fungal_sentry.png";
+		public static final String FUNGAL_CORE      = "sprites/fungal_core.png";
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/features/HighGrass.java
Patch:
@@ -117,7 +117,7 @@ public static void trample( Level level, int pos ) {
 			if (Dungeon.level instanceof MiningLevel
 					&& Blacksmith.Quest.Type() == Blacksmith.Quest.FUNGI
 					&& Random.Int(3) != 0){
-				naturalismLevel = 0;
+				naturalismLevel = -1;
 			}
 			
 			if (naturalismLevel >= 0) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/BossHealthBar.java
Patch:
@@ -219,7 +219,7 @@ public static void bleed(boolean value){
 	}
 
 	public static boolean isBleeding(){
-		return bleeding;
+		return isAssigned() && bleeding;
 	}
 
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Healing.java
Patch:
@@ -53,9 +53,10 @@ public boolean act(){
 			if (target.HP == target.HT && target instanceof Hero) {
 				((Hero) target).resting = false;
 			}
+
+			target.sprite.showStatusWithIcon(CharSprite.POSITIVE, Integer.toString(healingThisTick()), FloatingText.HEALING);
 		}
 
-		target.sprite.showStatusWithIcon(CharSprite.POSITIVE, Integer.toString(healingThisTick()), FloatingText.HEALING);
 		healingLeft -= healingThisTick();
 		
 		if (healingLeft <= 0){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Bones.java
Patch:
@@ -68,12 +68,13 @@ public static void leave() {
 		}
 
 		item = pickItem(Dungeon.hero);
+		heroClass = Dungeon.hero.heroClass;
 
 		Bundle bundle = new Bundle();
 		bundle.put( LEVEL, depth );
 		bundle.put( BRANCH, branch );
 		bundle.put( ITEM, item );
-		bundle.put( HERO_CLASS, Dungeon.hero.heroClass );
+		bundle.put( HERO_CLASS, heroClass );
 
 		try {
 			FileUtils.bundleToFile( BONES_FILE, bundle );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/GnollGeomancer.java
Patch:
@@ -108,8 +108,10 @@ protected boolean act() {
 		}
 
 		if (throwingRocksFromPos != null){
+			boolean attacked = false;
 			for (int rock : throwingRocksFromPos) {
 				if (rock != -1 && Dungeon.level.map[rock] == Terrain.MINE_BOULDER) {
+					attacked = true;
 					GnollGeomancer.doRockThrowAttack(this, rock, throwingRockToPos);
 				}
 			}
@@ -118,7 +120,7 @@ protected boolean act() {
 			throwingRockToPos = -1;
 
 			spend(TICK);
-			return false;
+			return !attacked;
 		} else {
 			return super.act();
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -107,7 +107,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfLivingEarth;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.Weapon;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Blazing;
-import com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Chilling;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Grim;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Kinetic;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Shocking;
@@ -813,7 +812,7 @@ public void damage( int dmg, Object src ) {
 
 			if (src instanceof Hunger)                                  icon = FloatingText.HUNGER;
 			if (src instanceof Burning)                                 icon = FloatingText.BURNING;
-			if (src instanceof Chilling || src instanceof Frost)        icon = FloatingText.FROST;
+			if (src instanceof Chill || src instanceof Frost)        icon = FloatingText.FROST;
 			if (src instanceof GeyserTrap || src instanceof StormCloud) icon = FloatingText.WATER;
 			if (src instanceof Burning)                                 icon = FloatingText.BURNING;
 			if (src instanceof Electricity)                             icon = FloatingText.SHOCKING;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/GnollGeomancer.java
Patch:
@@ -76,7 +76,9 @@ public class GnollGeomancer extends Mob {
 		HUNTING = new Hunting();
 		state = SLEEPING;
 
-		//can see the hero from a distance
+		//FOV is used to attack hero when they are in open space created by geomancer
+		// but geomancer will lose sight and stop attacking if the hero flees behind walls.
+		// Because of this geomancer can see through high grass and shrouding fod
 		viewDistance = 12;
 
 		properties.add(Property.BOSS);
@@ -85,7 +87,6 @@ public class GnollGeomancer extends Mob {
 	private int abilityCooldown = Random.NormalIntRange(3, 6);
 	private boolean lastAbilityWasRockfall;
 
-	private int throwingRockFromPos = -1;
 	private int[] throwingRocksFromPos = null;
 	private int throwingRockToPos = -1; //only need 1 to pos, it's always the same.
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -48,6 +48,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.SpiritHawk;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Bestiary;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GnollGeomancer;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Piranha;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist;
@@ -1221,7 +1222,7 @@ public void updateFieldOfView( Char c, boolean[] fieldOfView ) {
 			}
 			
 			if ((c instanceof Hero && ((Hero) c).subClass == HeroSubClass.WARDEN)
-				|| c instanceof YogFist.SoiledFist) {
+				|| c instanceof YogFist.SoiledFist || c instanceof GnollGeomancer) {
 				if (blocking == null) {
 					System.arraycopy(Dungeon.level.losBlocking, 0, modifiableBlocking, 0, modifiableBlocking.length);
 					blocking = modifiableBlocking;
@@ -1233,7 +1234,7 @@ public void updateFieldOfView( Char c, boolean[] fieldOfView ) {
 				}
 			}
 
-			if (c.alignment != Char.Alignment.ALLY
+			if ((c.alignment != Char.Alignment.ALLY && !(c instanceof GnollGeomancer))
 					&& Dungeon.level.blobs.containsKey(SmokeScreen.class)
 					&& Dungeon.level.blobs.get(SmokeScreen.class).volume > 0) {
 				if (blocking == null) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -71,6 +71,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Snake;
 import com.shatteredpixel.shatteredpixeldungeon.effects.CellEmitter;
 import com.shatteredpixel.shatteredpixeldungeon.effects.CheckedCell;
+import com.shatteredpixel.shatteredpixeldungeon.effects.FloatingText;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Speck;
 import com.shatteredpixel.shatteredpixeldungeon.effects.SpellSprite;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Splash;
@@ -1310,7 +1311,9 @@ && hasTalent(Talent.AGGRESSIVE_BARRIER)
 					&& buff(Talent.AggressiveBarrierCooldown.class) == null
 					&& (HP / (float)HT) < 0.20f*(1+pointsInTalent(Talent.AGGRESSIVE_BARRIER))){
 				Buff.affect(this, Barrier.class).setShield(3);
+				sprite.showStatusWithIcon(CharSprite.POSITIVE, "3", FloatingText.SHIELDING);
 				Buff.affect(this, Talent.AggressiveBarrierCooldown.class, 50f);
+
 			}
 			sprite.attack( enemy.pos );
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfTransfusion.java
Patch:
@@ -113,6 +113,7 @@ public void onZap(Ballistica beam) {
 
 				//grant a self-shield, and...
 				Buff.affect(curUser, Barrier.class).setShield((5 + buffedLvl()));
+				curUser.sprite.showStatusWithIcon(CharSprite.POSITIVE, Integer.toString(5+buffedLvl()), FloatingText.SHIELDING);
 				
 				//charms living enemies
 				if (!ch.properties().contains(Char.Property.UNDEAD)) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Rapier.java
Patch:
@@ -144,7 +144,7 @@ public void call() {
 				} else {
 					wep.beforeAbilityUsed(hero, null);
 					GLog.w(Messages.get(Rapier.class, "ability_no_target"));
-					hero.spendAndNext(hero.speed());
+					hero.spendAndNext(1/hero.speed());
 					wep.afterAbilityUsed(hero);
 				}
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/RotLasher.java
Patch:
@@ -55,7 +55,7 @@ public class RotLasher extends Mob {
 
 	@Override
 	protected boolean act() {
-		if (HP < HT && enemy == null || !Dungeon.level.adjacent(pos, enemy.pos)) {
+		if (HP < HT && (enemy == null || !Dungeon.level.adjacent(pos, enemy.pos))) {
 			sprite.showStatusWithIcon(CharSprite.POSITIVE, String.valueOf(Math.min(5, HT - HP)), FloatingText.HEALING);
 			HP = Math.min(HT, HP + 5);
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/warrior/HeroicLeap.java
Patch:
@@ -101,6 +101,7 @@ public void call() {
 							if (hero.hasTalent(Talent.BODY_SLAM)){
 								int damage = Random.NormalIntRange(hero.pointsInTalent(Talent.BODY_SLAM), 4*hero.pointsInTalent(Talent.BODY_SLAM));
 								damage += Math.round(hero.drRoll()*0.25f*hero.pointsInTalent(Talent.BODY_SLAM));
+								damage -= mob.drRoll();
 								mob.damage(damage, hero);
 							}
 							if (mob.pos == hero.pos + i && hero.hasTalent(Talent.IMPACT_WAVE)){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/CrystalSpire.java
Patch:
@@ -133,7 +133,7 @@ protected boolean act() {
 						dmg += 12; //18-27 damage
 						Buff.prolong(ch, Cripple.class, 30f);
 					}
-					ch.damage(dmg, CrystalSpire.this);
+					ch.damage(dmg, new SpireSpike());
 
 					int movePos = i;
 					//crystal guardians get knocked away from the hero, others get knocked away from the spire
@@ -208,6 +208,8 @@ protected boolean act() {
 		return true;
 	}
 
+	public static class SpireSpike{}
+
 	private void diamondAOEAttack(){
 		targetedCells.clear();
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/GnollGeomancer.java
Patch:
@@ -668,7 +668,7 @@ public void call() {
 						}
 
 						if (ch != null && !(ch instanceof GnollGeomancer)){
-							ch.damage(Random.NormalIntRange(5, 10), this);
+							ch.damage(Random.NormalIntRange(5, 10), new GnollGeomancer.Boulder());
 
 							if (ch.isAlive()){
 								Buff.prolong( ch, Paralysis.class, ch instanceof GnollGuard ? 10 : 3 );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CavesBossLevel.java
Patch:
@@ -827,7 +827,7 @@ protected void evolve() {
 						Char ch = Actor.findChar(cell);
 						if (ch != null && !(ch instanceof DM300) && !ch.flying) {
 							Sample.INSTANCE.play( Assets.Sounds.LIGHTNING );
-							ch.damage( Random.NormalIntRange(6, 12), Electricity.class);
+							ch.damage( Random.NormalIntRange(6, 12), new Electricity());
 							ch.sprite.flash();
 
 							if (ch == Dungeon.hero){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/RotLasher.java
Patch:
@@ -55,9 +55,9 @@ public class RotLasher extends Mob {
 
 	@Override
 	protected boolean act() {
-		if (enemy == null || !Dungeon.level.adjacent(pos, enemy.pos)) {
+		if (HP < HT && enemy == null || !Dungeon.level.adjacent(pos, enemy.pos)) {
+			sprite.showStatusWithIcon(CharSprite.POSITIVE, String.valueOf(Math.min(5, HT - HP)), FloatingText.HEALING);
 			HP = Math.min(HT, HP + 5);
-			sprite.showStatusWithIcon(CharSprite.POSITIVE, "5", FloatingText.HEALING);
 		}
 		return super.act();
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/AllyBuff.java
Patch:
@@ -27,7 +27,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroSubClass;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
-import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
+import com.shatteredpixel.shatteredpixeldungeon.effects.FloatingText;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite;
 
 //generic class for buffs which convert an enemy into an ally
@@ -64,7 +64,7 @@ public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff>
 
 			int exp = hero.lvl <= enemy.maxLvl ? enemy.EXP : 0;
 			if (exp > 0) {
-				hero.sprite.showStatus(CharSprite.POSITIVE, Messages.get(enemy, "exp", exp));
+				hero.sprite.showStatusWithIcon(CharSprite.POSITIVE, String.valueOf(exp), FloatingText.EXPERIENCE);
 			}
 			hero.earnExp(exp, enemy.getClass());
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
Patch:
@@ -671,7 +671,7 @@ public static void onItemIdentified( Hero hero, Item item ){
 			if (hero.sprite != null) {
 				Emitter e = hero.sprite.emitter();
 				if (e != null) e.burst(Speck.factory(Speck.HEALING), hero.pointsInTalent(TEST_SUBJECT));
-				hero.sprite.showStatusWithIcon(CharSprite.POSITIVE, String.valueOf(hero.HP + 1 + hero.pointsInTalent(TEST_SUBJECT)), FloatingText.HEALING);
+				hero.sprite.showStatusWithIcon(CharSprite.POSITIVE, String.valueOf(1 + hero.pointsInTalent(TEST_SUBJECT)), FloatingText.HEALING);
 			}
 		}
 		if (hero.hasTalent(TESTED_HYPOTHESIS)){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
Patch:
@@ -465,7 +465,7 @@ public static class NatureBerriesDropped extends CounterBuff{{revivePersists = t
 
 	public static void onFoodEaten( Hero hero, float foodVal, Item foodSource ){
 		if (hero.hasTalent(HEARTY_MEAL)){
-			if (hero.HP <= hero.HT/4) {
+			if (hero.HP <= hero.HT/2) {
 				//2/3 HP healed, when hero is below 50% health
 				int healing = 1 + hero.pointsInTalent(HEARTY_MEAL);
 				//3/5 HP healed, when hero is below 25% health

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/PotionOfStrength.java
Patch:
@@ -41,6 +41,8 @@ public class PotionOfStrength extends Potion {
 	public void apply( Hero hero ) {
 		identify();
 
+		hero.STR++;
+
 		GLog.p( Messages.get(this, "msg", hero.STR()) );
 		
 		Badges.validateStrengthAttained();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/food/Pasty.java
Patch:
@@ -47,7 +47,7 @@ public class Pasty extends Food {
 	public void reset() {
 		super.reset();
 		switch(Holiday.getCurrentHoliday()){
-			case NONE:
+			case NONE: default:
 				image = ItemSpriteSheet.PASTY;
 				break;
 			case LUNAR_NEW_YEAR:

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Bones.java
Patch:
@@ -71,8 +71,9 @@ public static void leave() {
 
 		Bundle bundle = new Bundle();
 		bundle.put( LEVEL, depth );
+		bundle.put( BRANCH, branch );
 		bundle.put( ITEM, item );
-		bundle.put( HERO_CLASS, heroClass );
+		bundle.put( HERO_CLASS, Dungeon.hero.heroClass );
 
 		try {
 			FileUtils.bundleToFile( BONES_FILE, bundle );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/MissileWeapon.java
Patch:
@@ -164,7 +164,7 @@ public int throwPos(Hero user, int dst) {
 		}
 
 		if (projecting
-				&& (Dungeon.level.passable[dst] || Dungeon.level.avoid[dst])
+				&& (Dungeon.level.passable[dst] || Dungeon.level.avoid[dst] || Actor.findChar(dst) != null)
 				&& Dungeon.level.distance(user.pos, dst) <= Math.round(4 * Enchantment.genericProcChanceMultiplier(user))){
 			return dst;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Berserk.java
Patch:
@@ -266,7 +266,7 @@ public int indicatorColor() {
 	@Override
 	public void doAction() {
 		WarriorShield shield = target.buff(WarriorShield.class);
-		if (shield != null) {
+		if (shield != null && shield.maxShield() > 0) {
 			startBerserking();
 			ActionIndicator.clearAction(this);
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfWarding.java
Patch:
@@ -59,8 +59,9 @@ public class WandOfWarding extends Wand {
 
 	@Override
 	public int collisionProperties(int target) {
-		if (cursed || !Dungeon.level.heroFOV[target])   return Ballistica.PROJECTILE;
-		else                                            return Ballistica.STOP_TARGET;
+		if (cursed)                                 return super.collisionProperties(target);
+		else if (!Dungeon.level.heroFOV[target])    return Ballistica.PROJECTILE;
+		else                                        return Ballistica.STOP_TARGET;
 	}
 
 	private boolean wardAvailable = true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/CrystalSpire.java
Patch:
@@ -76,7 +76,7 @@ public class CrystalSpire extends Mob {
 		alignment = Alignment.NEUTRAL;
 
 		properties.add(Property.IMMOVABLE);
-		properties.add(Property.MINIBOSS);
+		properties.add(Property.BOSS);
 		properties.add(Property.INORGANIC);
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -1153,7 +1153,7 @@ public boolean act( boolean enemyInFOV, boolean justAlerted ) {
 					if (!enemyInFOV) {
 						sprite.showLost();
 						state = WANDERING;
-						target = Dungeon.level.randomDestination( Mob.this );
+						target = ((Mob.Wandering)WANDERING).randomDestination();
 					}
 					return true;
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/CurseInfusion.java
Patch:
@@ -79,7 +79,7 @@ protected void onItemSelected(Item item) {
 				if (a.hasGoodGlyph() || a.curseInfusionBonus) {
 					a.inscribe(Armor.Glyph.randomCurse(a.glyph.getClass()));
 				}
-			} else if (a.hasGoodGlyph() || a.curseInfusionBonus) {
+			} else {
 				a.inscribe(Armor.Glyph.randomCurse());
 			}
 			a.curseInfusionBonus = true;

File: SPD-classes/src/main/java/com/watabou/utils/FileUtils.java
Patch:
@@ -176,6 +176,9 @@ public static ArrayList<String> filesInDir( String name ){
 	public static Bundle bundleFromFile( String fileName ) throws IOException{
 		try {
 			FileHandle file = getFileHandle( fileName );
+			if (!file.exists() || file.isDirectory() || file.length() == 0) {
+				throw new IOException("file does not exist!");
+			}
 			return bundleFromStream(file.read());
 		} catch (GdxRuntimeException e){
 			//game classes expect an IO exception, so wrap the GDX exception in that

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -441,7 +441,9 @@ public static int scalingDepth(){
 	}
 
 	public static boolean interfloorTeleportAllowed(){
-		if (Dungeon.level.locked || (Dungeon.hero != null && Dungeon.hero.belongings.getItem(Amulet.class) != null)){
+		if (Dungeon.level.locked
+				|| Dungeon.level instanceof MiningLevel
+				|| (Dungeon.hero != null && Dungeon.hero.belongings.getItem(Amulet.class) != null)){
 			return false;
 		}
 		return true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/stones/StoneOfAggression.java
Patch:
@@ -89,7 +89,7 @@ public float iconFadePercent() {
 
 		@Override
 		public void detach() {
-			//if our target is an enemy, reset the aggro of any enemies targeting it
+			//if our target is an enemy, reset any enemy-to-enemy aggro involving it
 			if (target.isAlive()) {
 				if (target.alignment == Char.Alignment.ENEMY) {
 					for (Mob m : Dungeon.level.mobs) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/PotionOfFrost.java
Patch:
@@ -38,11 +38,11 @@ public class PotionOfFrost extends Potion {
 	
 	@Override
 	public void shatter( int cell ) {
-		
+
+		splash( cell );
 		if (Dungeon.level.heroFOV[cell]) {
 			identify();
-			
-			splash( cell );
+
 			Sample.INSTANCE.play( Assets.Sounds.SHATTER );
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/PotionOfLevitation.java
Patch:
@@ -43,10 +43,10 @@ public class PotionOfLevitation extends Potion {
 	@Override
 	public void shatter( int cell ) {
 
+		splash( cell );
 		if (Dungeon.level.heroFOV[cell]) {
 			identify();
 
-			splash( cell );
 			Sample.INSTANCE.play( Assets.Sounds.SHATTER );
 			Sample.INSTANCE.play( Assets.Sounds.GAS );
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/PotionOfLiquidFlame.java
Patch:
@@ -39,10 +39,10 @@ public class PotionOfLiquidFlame extends Potion {
 	@Override
 	public void shatter( int cell ) {
 
+		splash( cell );
 		if (Dungeon.level.heroFOV[cell]) {
 			identify();
 
-			splash( cell );
 			Sample.INSTANCE.play( Assets.Sounds.SHATTER );
 			Sample.INSTANCE.play( Assets.Sounds.BURNING );
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/PotionOfParalyticGas.java
Patch:
@@ -38,10 +38,10 @@ public class PotionOfParalyticGas extends Potion {
 	@Override
 	public void shatter( int cell ) {
 
+		splash( cell );
 		if (Dungeon.level.heroFOV[cell]) {
 			identify();
 
-			splash( cell );
 			Sample.INSTANCE.play( Assets.Sounds.SHATTER );
 			Sample.INSTANCE.play( Assets.Sounds.GAS );
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/PotionOfPurity.java
Patch:
@@ -77,10 +77,10 @@ public void shatter( int cell ) {
 				
 			}
 		}
-		
-		
+
+
+		splash( cell );
 		if (Dungeon.level.heroFOV[cell]) {
-			splash(cell);
 			Sample.INSTANCE.play(Assets.Sounds.SHATTER);
 
 			identify();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/PotionOfToxicGas.java
Patch:
@@ -38,10 +38,10 @@ public class PotionOfToxicGas extends Potion {
 	@Override
 	public void shatter( int cell ) {
 
+		splash( cell );
 		if (Dungeon.level.heroFOV[cell]) {
 			identify();
 
-			splash( cell );
 			Sample.INSTANCE.play( Assets.Sounds.SHATTER );
 			Sample.INSTANCE.play( Assets.Sounds.GAS );
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/brews/BlizzardBrew.java
Patch:
@@ -40,8 +40,8 @@ public class BlizzardBrew extends Brew {
 	
 	@Override
 	public void shatter(int cell) {
+		splash( cell );
 		if (Dungeon.level.heroFOV[cell]) {
-			splash( cell );
 			Sample.INSTANCE.play( Assets.Sounds.SHATTER );
 			Sample.INSTANCE.play( Assets.Sounds.GAS );
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/brews/CausticBrew.java
Patch:
@@ -43,9 +43,9 @@ public class CausticBrew extends Brew {
 	
 	@Override
 	public void shatter(int cell) {
-		
+
+		splash( cell );
 		if (Dungeon.level.heroFOV[cell]) {
-			splash( cell );
 			Sample.INSTANCE.play( Assets.Sounds.SHATTER );
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/brews/InfernalBrew.java
Patch:
@@ -40,9 +40,9 @@ public class InfernalBrew extends Brew {
 	
 	@Override
 	public void shatter(int cell) {
-		
+
+		splash( cell );
 		if (Dungeon.level.heroFOV[cell]) {
-			splash( cell );
 			Sample.INSTANCE.play( Assets.Sounds.SHATTER );
 			Sample.INSTANCE.play( Assets.Sounds.GAS );
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/brews/ShockingBrew.java
Patch:
@@ -41,8 +41,8 @@ public class ShockingBrew extends Brew {
 	
 	@Override
 	public void shatter(int cell) {
+		splash( cell );
 		if (Dungeon.level.heroFOV[cell]) {
-			splash( cell );
 			Sample.INSTANCE.play( Assets.Sounds.SHATTER );
 			Sample.INSTANCE.play(Assets.Sounds.LIGHTNING);
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/elixirs/ElixirOfHoneyedHealing.java
Patch:
@@ -51,9 +51,9 @@ public void apply(Hero hero) {
 	
 	@Override
 	public void shatter(int cell) {
+		splash( cell );
 		if (Dungeon.level.heroFOV[cell]) {
 			Sample.INSTANCE.play( Assets.Sounds.SHATTER );
-			splash( cell );
 		}
 		
 		Char ch = Actor.findChar(cell);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/exotic/PotionOfCleansing.java
Patch:
@@ -56,9 +56,9 @@ public void shatter(int cell) {
 		if (Actor.findChar(cell) == null){
 			super.shatter(cell);
 		} else {
+			splash( cell );
 			if (Dungeon.level.heroFOV[cell]) {
 				Sample.INSTANCE.play(Assets.Sounds.SHATTER);
-				splash(cell);
 				identify();
 			}
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/exotic/PotionOfCorrosiveGas.java
Patch:
@@ -38,11 +38,11 @@ public class PotionOfCorrosiveGas extends ExoticPotion {
 	
 	@Override
 	public void shatter( int cell ) {
-		
+
+		splash( cell );
 		if (Dungeon.level.heroFOV[cell]) {
 			identify();
-			
-			splash( cell );
+
 			Sample.INSTANCE.play( Assets.Sounds.SHATTER );
 			Sample.INSTANCE.play( Assets.Sounds.GAS );
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/exotic/PotionOfShroudingFog.java
Patch:
@@ -38,11 +38,11 @@ public class PotionOfShroudingFog extends ExoticPotion {
 	
 	@Override
 	public void shatter( int cell ) {
-		
+
+		splash( cell );
 		if (Dungeon.level.heroFOV[cell]) {
 			identify();
-			
-			splash( cell );
+
 			Sample.INSTANCE.play( Assets.Sounds.SHATTER );
 			Sample.INSTANCE.play( Assets.Sounds.GAS );
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/exotic/PotionOfSnapFreeze.java
Patch:
@@ -40,11 +40,11 @@ public class PotionOfSnapFreeze extends ExoticPotion {
 	
 	@Override
 	public void shatter(int cell) {
-		
+
+		splash( cell );
 		if (Dungeon.level.heroFOV[cell]) {
 			identify();
-			
-			splash( cell );
+
 			Sample.INSTANCE.play( Assets.Sounds.SHATTER );
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/exotic/PotionOfStormClouds.java
Patch:
@@ -38,11 +38,11 @@ public class PotionOfStormClouds extends ExoticPotion {
 	
 	@Override
 	public void shatter(int cell) {
-		
+
+		splash( cell );
 		if (Dungeon.level.heroFOV[cell]) {
 			identify();
-			
-			splash( cell );
+
 			Sample.INSTANCE.play( Assets.Sounds.SHATTER );
 			Sample.INSTANCE.play( Assets.Sounds.GAS );
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/MonkEnergy.java
Patch:
@@ -666,6 +666,7 @@ protected boolean act() {
 				}, hero.cooldown()-1);
 
 				hero.next();
+				hero.busy();
 				Buff.affect(hero, MonkEnergy.class).abilityUsed(this);
 			}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MagesStaff.java
Patch:
@@ -156,11 +156,11 @@ public void execute(Hero hero, String action) {
 	}
 
 	@Override
-	public int buffedLvl() {
+	public int buffedVisiblyUpgraded() {
 		if (wand != null){
-			return Math.max(super.buffedLvl(), wand.buffedLvl());
+			return Math.max(super.buffedVisiblyUpgraded(), wand.buffedVisiblyUpgraded());
 		} else {
-			return super.buffedLvl();
+			return super.buffedVisiblyUpgraded();
 		}
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Preparation.java
Patch:
@@ -285,7 +285,7 @@ public void onSelect(Integer cell) {
 				
 				AttackLevel lvl = AttackLevel.getLvl(turnsInvis);
 
-				PathFinder.buildDistanceMap(Dungeon.hero.pos, BArray.not(Dungeon.level.solid, null), lvl.blinkDistance());
+				PathFinder.buildDistanceMap(Dungeon.hero.pos,BArray.or(Dungeon.level.passable, Dungeon.level.avoid, null), lvl.blinkDistance());
 				int dest = -1;
 				for (int i : PathFinder.NEIGHBOURS8){
 					//cannot blink into a cell that's occupied or impassable, only over them

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/duelist/Challenge.java
Patch:
@@ -104,7 +104,7 @@ protected void activate(ClassArmor armor, Hero hero, Integer target) {
 			return;
 		}
 
-		boolean[] passable = BArray.not(Dungeon.level.solid,null);
+		boolean[] passable = BArray.or(Dungeon.level.passable, Dungeon.level.avoid, null);
 		for (Char c : Actor.chars()) {
 			if (c != hero) passable[c.pos] = false;
 		}
@@ -115,7 +115,7 @@ protected void activate(ClassArmor armor, Hero hero, Integer target) {
 		if (hero.hasTalent(Talent.CLOSE_THE_GAP) && !hero.rooted){
 
 			int blinkrange = 1 + hero.pointsInTalent(Talent.CLOSE_THE_GAP);
-			PathFinder.buildDistanceMap(hero.pos, BArray.not(Dungeon.level.solid,null), blinkrange);
+			PathFinder.buildDistanceMap(hero.pos, BArray.or(Dungeon.level.passable, Dungeon.level.avoid, null), blinkrange);
 
 			for (int i = 0; i < PathFinder.distance.length; i++){
 				if (PathFinder.distance[i] == Integer.MAX_VALUE

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/rogue/SmokeBomb.java
Patch:
@@ -92,7 +92,7 @@ protected void activate(ClassArmor armor, Hero hero, Integer target) {
 				return;
 			}
 
-			PathFinder.buildDistanceMap(hero.pos, BArray.not(Dungeon.level.solid,null), 6);
+			PathFinder.buildDistanceMap(hero.pos, BArray.or(Dungeon.level.passable, Dungeon.level.avoid, null), 6);
 
 			if ( PathFinder.distance[target] == Integer.MAX_VALUE ||
 					!Dungeon.level.heroFOV[target] ||

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Dagger.java
Patch:
@@ -108,7 +108,7 @@ public static void sneakAbility(Hero hero, Integer target, int maxDist, MeleeWea
 			return;
 		}
 
-		PathFinder.buildDistanceMap(Dungeon.hero.pos, BArray.not(Dungeon.level.solid, null), maxDist);
+		PathFinder.buildDistanceMap(Dungeon.hero.pos, BArray.or(Dungeon.level.passable, Dungeon.level.avoid, null), maxDist);
 		if (PathFinder.distance[target] == Integer.MAX_VALUE) {
 			GLog.w(Messages.get(wep, "ability_bad_position"));
 			return;

File: ios/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ios/IOSLauncher.java
Patch:
@@ -104,7 +104,7 @@ protected IOSApplication createApplication() {
 		config.hideHomeIndicator = SPDSettings.fullscreen();
 		config.overrideRingerSwitch = SPDSettings.ignoreSilentMode();
 
-		config.screenEdgesDeferringSystemGestures = UIRectEdge.All;
+		config.screenEdgesDeferringSystemGestures = UIRectEdge.None;
 
 		if (NSProcessInfo.getSharedProcessInfo().getOperatingSystemVersion().getMajorVersion() >= 11) {
 			config.preferredFramesPerSecond = (int)(UIScreen.getMainScreen().getMaximumFramesPerSecond());

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/MonkEnergy.java
Patch:
@@ -571,15 +571,15 @@ public void call() {
 							Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 						}
 
-						if (enemy.isAlive() && oldPos == enemy.pos){
+						if (oldPos == enemy.pos){
 							//trace a ballistica to our target (which will also extend past them
 							Ballistica trajectory = new Ballistica(hero.pos, enemy.pos, Ballistica.STOP_TARGET);
 							//trim it to just be the part that goes past them
 							trajectory = new Ballistica(trajectory.collisionPos, trajectory.path.get(trajectory.path.size() - 1), Ballistica.PROJECTILE);
 							//knock them back along that ballistica
 							WandOfBlastWave.throwChar(enemy, trajectory, 6, true, false, hero);
 
-							if (trajectory.dist > 0) {
+							if (trajectory.dist > 0 && enemy.isActive()) {
 								Buff.affect(enemy, Paralysis.class, Math.min( 6, trajectory.dist));
 							}
 						}
@@ -600,7 +600,7 @@ public void call() {
 									//knock them back along that ballistica
 									WandOfBlastWave.throwChar(ch, trajectory, 6, true, false, hero);
 
-									if (trajectory.dist > 0) {
+									if (trajectory.dist > 0 && enemy.isActive()) {
 										Buff.affect(ch, Paralysis.class, Math.min( 6, trajectory.dist));
 									}
 								}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/CrystalWispSprite.java
Patch:
@@ -111,8 +111,8 @@ public void die() {
 	}
 
 	@Override
-	public void destroy() {
-		super.destroy();
+	public void kill() {
+		super.kill();
 		if (light != null){
 			light.killAndErase();
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTransmutation.java
Patch:
@@ -223,6 +223,7 @@ private static Weapon changeWeapon( Weapon w ) {
 		n.cursedKnown = w.cursedKnown;
 		n.cursed = w.cursed;
 		n.augment = w.augment;
+		n.enchantHardened = w.enchantHardened;
 		
 		return n;
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/CrystalSpire.java
Patch:
@@ -396,10 +396,8 @@ public void call() {
 								if (ch instanceof CrystalGuardian){
 									if (((CrystalGuardian) ch).state == ((CrystalGuardian) ch).SLEEPING) {
 
+										((CrystalGuardian) ch).aggro(Dungeon.hero);
 										((CrystalGuardian) ch).beckon(pos);
-										if (((CrystalGuardian) ch).state != HUNTING) {
-											((CrystalGuardian) ch).aggro(Dungeon.hero);
-										}
 
 										//delays sleeping guardians that happen to be near to the crystal
 										if (PathFinder.distance[ch.pos] < 20){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/CrystalWispSprite.java
Patch:
@@ -73,7 +73,7 @@ public void onComplete() {
 				light.alpha(0.3f);
 				((CrystalWisp)ch).onZapComplete();
 				Beam ray = new Beam.LightRay(center(), DungeonTilemap.raisedTileCenterToWorld(cell));
-				ray.hardlight(blood());
+				ray.hardlight(blood() & 0x00FFFFFF);
 				parent.add( ray );
 			}
 		});

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfAccuracy.java
Patch:
@@ -36,9 +36,9 @@ public String statsInfo() {
 		if (isIdentified()){
 			String info = Messages.get(this, "stats",
 					Messages.decimalFormat("#.##", 100f * (Math.pow(1.3f, soloBuffedBonus()) - 1f)));
-			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != getBuffedBonus(Dungeon.hero, Accuracy.class)){
+			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero, Accuracy.class)){
 				info += "\n\n" + Messages.get(this, "combined_stats",
-						Messages.decimalFormat("#.##", 100f * (Math.pow(1.3f, getBuffedBonus(Dungeon.hero, Accuracy.class)) - 1f)));
+						Messages.decimalFormat("#.##", 100f * (Math.pow(1.3f, combinedBuffedBonus(Dungeon.hero, Accuracy.class)) - 1f)));
 			}
 			return info;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfArcana.java
Patch:
@@ -36,9 +36,9 @@ public String statsInfo() {
 		if (isIdentified()){
 			String info = Messages.get(this, "stats",
 					Messages.decimalFormat("#.##", 100f * (Math.pow(1.175f, soloBuffedBonus()) - 1f)));
-			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != getBuffedBonus(Dungeon.hero, Arcana.class)){
+			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero, Arcana.class)){
 				info += "\n\n" + Messages.get(this, "combined_stats",
-						Messages.decimalFormat("#.##", 100f * (Math.pow(1.175f, getBuffedBonus(Dungeon.hero, Arcana.class)) - 1f)));
+						Messages.decimalFormat("#.##", 100f * (Math.pow(1.175f, combinedBuffedBonus(Dungeon.hero, Arcana.class)) - 1f)));
 			}
 			return info;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfElements.java
Patch:
@@ -48,9 +48,9 @@ public String statsInfo() {
 		if (isIdentified()){
 			String info = Messages.get(this, "stats",
 					Messages.decimalFormat("#.##", 100f * (1f - Math.pow(0.825f, soloBuffedBonus()))));
-			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != getBuffedBonus(Dungeon.hero, Resistance.class)){
+			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero, Resistance.class)){
 				info += "\n\n" + Messages.get(this, "combined_stats",
-						Messages.decimalFormat("#.##", 100f * (1f - Math.pow(0.825f, getBuffedBonus(Dungeon.hero, Resistance.class)))));
+						Messages.decimalFormat("#.##", 100f * (1f - Math.pow(0.825f, combinedBuffedBonus(Dungeon.hero, Resistance.class)))));
 			}
 			return info;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfEnergy.java
Patch:
@@ -39,9 +39,9 @@ public String statsInfo() {
 		if (isIdentified()){
 			String info = Messages.get(this, "stats",
 					Messages.decimalFormat("#.##", 100f * (Math.pow(1.15f, soloBuffedBonus()) - 1f)));
-			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != getBuffedBonus(Dungeon.hero, Energy.class)){
+			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero, Energy.class)){
 				info += "\n\n" + Messages.get(this, "combined_stats",
-						Messages.decimalFormat("#.##", 100f * (Math.pow(1.15f, getBuffedBonus(Dungeon.hero, Energy.class)) - 1f)));
+						Messages.decimalFormat("#.##", 100f * (Math.pow(1.15f, combinedBuffedBonus(Dungeon.hero, Energy.class)) - 1f)));
 			}
 			return info;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfEvasion.java
Patch:
@@ -36,9 +36,9 @@ public String statsInfo() {
 		if (isIdentified()){
 			String info = Messages.get(this, "stats",
 					Messages.decimalFormat("#.##", 100f * (Math.pow(1.125f, soloBuffedBonus()) - 1f)));
-			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != getBuffedBonus(Dungeon.hero, Evasion.class)){
+			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero, Evasion.class)){
 				info += "\n\n" + Messages.get(this, "combined_stats",
-						Messages.decimalFormat("#.##", 100f * (Math.pow(1.125f, getBuffedBonus(Dungeon.hero, Evasion.class)) - 1f)));
+						Messages.decimalFormat("#.##", 100f * (Math.pow(1.125f, combinedBuffedBonus(Dungeon.hero, Evasion.class)) - 1f)));
 			}
 			return info;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfForce.java
Patch:
@@ -115,8 +115,8 @@ public String statsInfo() {
 		if (isIdentified()) {
 			int level = soloBuffedBonus();
 			String info = Messages.get(this, "stats", min(level, tier), max(level, tier), level);
-			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != getBuffedBonus(Dungeon.hero, Force.class)){
-				level = getBuffedBonus(Dungeon.hero, Force.class);
+			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero, Force.class)){
+				level = combinedBuffedBonus(Dungeon.hero, Force.class);
 				info += "\n\n" + Messages.get(this, "combined_stats", min(level, tier), max(level, tier), level);
 			}
 			return info;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfFuror.java
Patch:
@@ -36,9 +36,9 @@ public String statsInfo() {
 		if (isIdentified()){
 			String info = Messages.get(this, "stats",
 					Messages.decimalFormat("#.##", 100f * (Math.pow(1.09051f, soloBuffedBonus()) - 1f)));
-			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != getBuffedBonus(Dungeon.hero, Furor.class)){
+			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero, Furor.class)){
 				info += "\n\n" + Messages.get(this, "combined_stats",
-						Messages.decimalFormat("#.##", 100f * (Math.pow(1.09051f, getBuffedBonus(Dungeon.hero, Furor.class)) - 1f)));
+						Messages.decimalFormat("#.##", 100f * (Math.pow(1.09051f, combinedBuffedBonus(Dungeon.hero, Furor.class)) - 1f)));
 			}
 			return info;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfHaste.java
Patch:
@@ -36,9 +36,9 @@ public String statsInfo() {
 		if (isIdentified()){
 			String info = Messages.get(this, "stats",
 					Messages.decimalFormat("#.##", 100f * (Math.pow(1.2f, soloBuffedBonus()) - 1f)));
-			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != getBuffedBonus(Dungeon.hero, Haste.class)){
+			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero, Haste.class)){
 				info += "\n\n" + Messages.get(this, "combined_stats",
-						Messages.decimalFormat("#.##", 100f * (Math.pow(1.2f, getBuffedBonus(Dungeon.hero, Haste.class)) - 1f)));
+						Messages.decimalFormat("#.##", 100f * (Math.pow(1.2f, combinedBuffedBonus(Dungeon.hero, Haste.class)) - 1f)));
 			}
 			return info;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfMight.java
Patch:
@@ -78,9 +78,9 @@ public String statsInfo() {
 		if (isIdentified()){
 			String info = Messages.get(this, "stats",
 					soloBonus(), Messages.decimalFormat("#.##", 100f * (Math.pow(1.035, soloBuffedBonus()) - 1f)));
-			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != getBuffedBonus(Dungeon.hero, Might.class)){
+			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero, Might.class)){
 				info += "\n\n" + Messages.get(this, "combined_stats",
-						getBonus(Dungeon.hero, Might.class), Messages.decimalFormat("#.##", 100f * (Math.pow(1.035, getBuffedBonus(Dungeon.hero, Might.class)) - 1f)));
+						getBonus(Dungeon.hero, Might.class), Messages.decimalFormat("#.##", 100f * (Math.pow(1.035, combinedBuffedBonus(Dungeon.hero, Might.class)) - 1f)));
 			}
 			return info;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfSharpshooting.java
Patch:
@@ -36,9 +36,9 @@ public String statsInfo() {
 		if (isIdentified()){
 			String info = Messages.get(this, "stats",
 					soloBuffedBonus(), Messages.decimalFormat("#.##", 100f * (Math.pow(1.2, soloBonus()) - 1f)));
-			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != getBuffedBonus(Dungeon.hero, Aim.class)){
+			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero, Aim.class)){
 				info += "\n\n" + Messages.get(this, "combined_stats",
-						getBuffedBonus(Dungeon.hero, Aim.class), Messages.decimalFormat("#.##", 100f * (Math.pow(1.2, getBonus(Dungeon.hero, Aim.class)) - 1f)));
+						combinedBuffedBonus(Dungeon.hero, Aim.class), Messages.decimalFormat("#.##", 100f * (Math.pow(1.2, getBonus(Dungeon.hero, Aim.class)) - 1f)));
 			}
 			return info;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfTenacity.java
Patch:
@@ -36,9 +36,9 @@ public String statsInfo() {
 		if (isIdentified()){
 			String info = Messages.get(this, "stats",
 					Messages.decimalFormat("#.##", 100f * (1f - Math.pow(0.85f, soloBuffedBonus()))));
-			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != getBuffedBonus(Dungeon.hero, Tenacity.class)){
+			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero, Tenacity.class)){
 				info += "\n\n" + Messages.get(this, "combined_stats",
-						Messages.decimalFormat("#.##", 100f * (1f - Math.pow(0.85f, getBuffedBonus(Dungeon.hero, Tenacity.class)))));
+						Messages.decimalFormat("#.##", 100f * (1f - Math.pow(0.85f, combinedBuffedBonus(Dungeon.hero, Tenacity.class)))));
 			}
 			return info;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfWealth.java
Patch:
@@ -62,9 +62,9 @@ public String statsInfo() {
 		if (isIdentified()){
 			String info = Messages.get(this, "stats",
 					Messages.decimalFormat("#.##", 100f * (Math.pow(1.20f, soloBuffedBonus()) - 1f)));
-			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != getBuffedBonus(Dungeon.hero, Wealth.class)){
+			if (isEquipped(Dungeon.hero) && soloBuffedBonus() != combinedBuffedBonus(Dungeon.hero, Wealth.class)){
 				info += "\n\n" + Messages.get(this, "combined_stats",
-						Messages.decimalFormat("#.##", 100f * (Math.pow(1.20f, getBuffedBonus(Dungeon.hero, Wealth.class)) - 1f)));
+						Messages.decimalFormat("#.##", 100f * (Math.pow(1.20f, combinedBuffedBonus(Dungeon.hero, Wealth.class)) - 1f)));
 			}
 			return info;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndInfoMob.java
Patch:
@@ -80,7 +80,7 @@ protected void layout() {
 				extraBuffSpace += 8;
 			} while (extraBuffSpace <= 40 && !buffs.allBuffsVisible());
 
-			name.setPos(x + image.width + GAP,
+			name.setPos(x + image.width() + GAP,
 					image.height() > name.height() ? y +(image.height() - name.height()) / 2 : y);
 
 			health.setRect(image.width() + GAP, name.bottom() + GAP, w, health.height());

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/DistortionTrap.java
Patch:
@@ -129,6 +129,7 @@ public void activate() {
 							break;
 						case 3:
 							mob = Statue.random();
+							((Statue) mob).levelGenStatue = false;
 							break;
 					}
 					break;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CityBossLevel.java
Patch:
@@ -200,6 +200,7 @@ protected boolean build() {
 		Painter.fill(this, end.left+5, end.bottom+1, 5, 1, Terrain.EMPTY);
 		Painter.fill(this, end.left+6, end.bottom+2, 3, 1, Terrain.EMPTY);
 
+		impShop.paint(this);
 		new CityPainter().paint(this, null);
 
 		//pillars last, no deco on these

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTransmutation.java
Patch:
@@ -280,7 +280,7 @@ private static Artifact changeArtifact( Artifact a ) {
 	private static Wand changeWand( Wand w ) {
 		Wand n;
 		do {
-			n = (Wand)Generator.random( Generator.Category.WAND );
+			n = (Wand)Generator.randomUsingDefaults( Generator.Category.WAND );
 		} while ( Challenges.isItemBlocked(n) || n.getClass() == w.getClass());
 		
 		n.level( 0 );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/CursedWand.java
Patch:
@@ -425,7 +425,7 @@ public void onBackPressed() {
 				origin.detach(Dungeon.hero.belongings.backpack);
 				Item result;
 				do {
-					result = Generator.random(Random.oneOf(Generator.Category.WEAPON, Generator.Category.ARMOR,
+					result = Generator.randomUsingDefaults(Random.oneOf(Generator.Category.WEAPON, Generator.Category.ARMOR,
 							Generator.Category.RING, Generator.Category.ARTIFACT));
 				} while (result.cursed);
 				if (result.isUpgradable()) result.upgrade();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
Patch:
@@ -683,7 +683,7 @@ public static int onAttackProc( Hero hero, Char enemy, int dmg ){
 			Buff.affect(enemy, SuckerPunchTracker.class);
 		}
 
-		if (hero.hasTalent(Talent.FOLLOWUP_STRIKE) && enemy.alignment == Char.Alignment.ENEMY) {
+		if (hero.hasTalent(Talent.FOLLOWUP_STRIKE) && enemy.isAlive() && enemy.alignment == Char.Alignment.ENEMY) {
 			if (hero.belongings.attackingWeapon() instanceof MissileWeapon) {
 				Buff.prolong(hero, FollowupStrikeTracker.class, 5f).object = enemy.id();
 			} else if (hero.buff(FollowupStrikeTracker.class) != null

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndBlacksmith.java
Patch:
@@ -384,6 +384,8 @@ public void onSelect(Item item) {
 				Sample.INSTANCE.play(Assets.Sounds.EVOKE);
 				ScrollOfUpgrade.upgrade( Dungeon.hero );
 				Item.evoke( Dungeon.hero );
+
+				Badges.validateItemLevelAquired( item );
 			}
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndBlacksmith.java
Patch:
@@ -144,7 +144,7 @@ protected void onClick() {
 				WndBlacksmith.this.hide();
 			}
 		};
-		cashOut.enable(true);
+		cashOut.enable(Blacksmith.Quest.favor > 0);
 		buttons.add(cashOut);
 
 		float pos = message.bottom() + 3*GAP;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/InventoryScroll.java
Patch:
@@ -123,7 +123,7 @@ public void onSelect( Item item ) {
 				
 				((InventoryScroll)curItem).confirmCancelation();
 				
-			} else {
+			} else if (((Scroll)curItem).anonymous) {
 
 				curUser.spendAndNext( TIME_TO_READ );
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/CrystalSpire.java
Patch:
@@ -147,7 +147,7 @@ protected boolean act() {
 									movePos = i+j;
 								}
 							}
-						} else {
+						} else if (!Char.hasProp(ch, Property.IMMOVABLE)) {
 							for (int j : PathFinder.NEIGHBOURS8){
 								if (!Dungeon.level.solid[i+j] && Actor.findChar(i+j) == null &&
 										Dungeon.level.trueDistance(i+j, pos) > Dungeon.level.trueDistance(movePos, pos)){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -509,7 +509,7 @@ public void draw() {
 			}
 
 			if (Dungeon.hero.hasTalent(Talent.ROGUES_FORESIGHT)
-					&& Dungeon.level instanceof RegularLevel){
+					&& Dungeon.level instanceof RegularLevel && Dungeon.branch == 0){
 				int reqSecrets = Dungeon.level.feeling == Level.Feeling.SECRETS ? 2 : 1;
 				for (Room r : ((RegularLevel) Dungeon.level).rooms()){
 					if (r instanceof SecretRoom) reqSecrets--;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/DisarmingTrap.java
Patch:
@@ -34,6 +34,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.KindOfWeapon;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
+import com.shatteredpixel.shatteredpixeldungeon.ui.ActionIndicator;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
 import com.watabou.noosa.audio.Sample;
 import com.watabou.utils.PathFinder;
@@ -94,6 +95,7 @@ public void activate() {
 
 				hero.belongings.weapon = null;
 				Dungeon.quickslot.clearItem(weapon);
+				ActionIndicator.refresh();
 				weapon.updateQuickslot();
 
 				Dungeon.level.drop(weapon, cell).seen = true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -2351,15 +2351,15 @@ public void resurrect() {
 		for (Item i : belongings){
 			if (i instanceof EquipableItem && i.isEquipped(this)){
 				((EquipableItem) i).activate(this);
-			} else if (i instanceof CloakOfShadows && i.keptThoughLostInvent && hasTalent(Talent.LIGHT_CLOAK)){
+			} else if (i instanceof CloakOfShadows && i.keptThroughLostInventory() && hasTalent(Talent.LIGHT_CLOAK)){
 				((CloakOfShadows) i).activate(this);
-			} else if (i instanceof Wand && i.keptThoughLostInvent){
+			} else if (i instanceof Wand && i.keptThroughLostInventory()){
 				if (holster != null && holster.contains(i)){
 					((Wand) i).charge(this, MagicalHolster.HOLSTER_SCALE_FACTOR);
 				} else {
 					((Wand) i).charge(this);
 				}
-			} else if (i instanceof MagesStaff && i.keptThoughLostInvent){
+			} else if (i instanceof MagesStaff && i.keptThroughLostInventory()){
 				((MagesStaff) i).applyWandChargeBuff(this);
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
Patch:
@@ -431,7 +431,7 @@ public static void onTalentUpgraded( Hero hero, Talent talent ){
 		if (talent == LIGHT_CLOAK && hero.heroClass == HeroClass.ROGUE){
 			for (Item item : Dungeon.hero.belongings.backpack){
 				if (item instanceof CloakOfShadows){
-					if (hero.buff(LostInventory.class) == null || item.keptThoughLostInvent) {
+					if (hero.buff(LostInventory.class) == null || item.keptThroughLostInventory()) {
 						((CloakOfShadows) item).activate(Dungeon.hero);
 					}
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/EquipableItem.java
Patch:
@@ -127,7 +127,7 @@ public boolean doUnequip( Hero hero, boolean collect, boolean single ) {
 
 		if (cursed
 				&& hero.buff(MagicImmune.class) == null
-				&& (hero.buff(LostInventory.class) == null || keptThoughLostInvent)) {
+				&& (hero.buff(LostInventory.class) == null || keptThroughLostInventory())) {
 			GLog.w(Messages.get(EquipableItem.class, "unequip_cursed"));
 			return false;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/LostBackpack.java
Patch:
@@ -50,7 +50,7 @@ public boolean doPickUp(Hero hero, int pos) {
 
 		MagicalHolster holster = hero.belongings.getItem(MagicalHolster.class);
 		for (Item i : hero.belongings){
-			if (i.keptThoughLostInvent){
+			if (i.keptThroughLostInventory()){
 				i.keptThoughLostInvent = false; //don't reactivate, was previously activated
 			} else {
 				if (i instanceof EquipableItem && i.isEquipped(hero)){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bags/Bag.java
Patch:
@@ -168,7 +168,7 @@ public boolean contains( Item item ) {
 
 	public boolean canHold( Item item ){
 		if (!loading && owner != null && owner.buff(LostInventory.class) != null
-			&& !item.keptThoughLostInvent){
+			&& !item.keptThroughLostInventory()){
 			return false;
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/InventorySlot.java
Patch:
@@ -102,7 +102,7 @@ public void item( Item item ) {
 			if (item.name() == null) {
 				enable( false );
 			} else if (Dungeon.hero.buff(LostInventory.class) != null
-					&& !item.keptThoughLostInvent){
+					&& !item.keptThroughLostInventory()){
 				enable(false);
 			}
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/QuickSlotButton.java
Patch:
@@ -302,7 +302,7 @@ public void enable( boolean value ) {
 	
 	private void enableSlot() {
 		slot.enable(Dungeon.quickslot.isNonePlaceholder( slotNum )
-				&& (Dungeon.hero.buff(LostInventory.class) == null || Dungeon.quickslot.getItem(slotNum).keptThoughLostInvent));
+				&& (Dungeon.hero.buff(LostInventory.class) == null || Dungeon.quickslot.getItem(slotNum).keptThroughLostInventory()));
 	}
 
 	public void slotMargins( int left, int top, int right, int bottom){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Toolbar.java
Patch:
@@ -128,7 +128,7 @@ protected void onClick() {
 						Item item = Dungeon.quickslot.getItem(i);
 
 						if (item != null && !Dungeon.quickslot.isPlaceholder(i) &&
-								(Dungeon.hero.buff(LostInventory.class) == null || item.keptThoughLostInvent)){
+								(Dungeon.hero.buff(LostInventory.class) == null || item.keptThroughLostInventory())){
 							slotNames[i] = Messages.titleCase(item.name());
 							slotIcons[i] = new ItemSprite(item);
 						} else {
@@ -154,7 +154,7 @@ public void onSelect(int idx, boolean alt) {
 							Item item = Dungeon.quickslot.getItem(idx);
 
 							if (item == null || Dungeon.quickslot.isPlaceholder(idx)
-									|| (Dungeon.hero.buff(LostInventory.class) != null && !item.keptThoughLostInvent)
+									|| (Dungeon.hero.buff(LostInventory.class) != null && !item.keptThroughLostInventory())
 									|| alt){
 								//TODO would be nice to use a radial menu for this too
 								// Also a bunch of code could be moved out of here into subclasses of RadialMenu
@@ -420,7 +420,7 @@ public void onSelect(int idx, boolean alt) {
 
 							for(Item i : bag.items){
 								if (i instanceof Bag) items.remove(i);
-								if (Dungeon.hero.buff(LostInventory.class) != null && !i.keptThoughLostInvent) items.remove(i);
+								if (Dungeon.hero.buff(LostInventory.class) != null && !i.keptThroughLostInventory()) items.remove(i);
 							}
 
 							if (idx == 0){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -1009,7 +1009,7 @@ public static PathFinder.Path findPath(Char ch, int to, boolean[] pass, boolean[
 	public static int findStep(Char ch, int to, boolean[] pass, boolean[] visible, boolean chars ) {
 
 		if (Dungeon.level.adjacent( ch.pos, to )) {
-			return Actor.findChar( to ) == null && (pass[to] || Dungeon.level.avoid[to]) ? to : -1;
+			return Actor.findChar( to ) == null && pass[to] ? to : -1;
 		}
 
 		return PathFinder.getStep( ch.pos, to, findPassable(ch, pass, visible, chars) );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndBlacksmith.java
Patch:
@@ -375,7 +375,7 @@ public boolean itemSelectable(Item item) {
 		public void onSelect(Item item) {
 			if (item != null) {
 				item.upgrade();
-				int upgradeCost = Blacksmith.Quest.upgrades == 0 ? 1000 : 1500;
+				int upgradeCost = 1000 * (int)Math.pow(2, Blacksmith.Quest.upgrades);
 				Blacksmith.Quest.favor -= upgradeCost;
 				Blacksmith.Quest.upgrades++;
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Blacksmith.java
Patch:
@@ -430,8 +430,9 @@ public static void complete(){
 			}
 			pick.detach(Dungeon.hero.belongings.backpack);
 			Quest.pickaxe = pick;
-			//check for boss enemy, add another 1k points if they are dead
-			//perhaps reduce final quest score if hero is hit by avoidable boss attacks?
+
+			if (bossBeaten) favor += 1000;
+
 			Statistics.questScores[2] = favor;
 		}
 

File: SPD-classes/src/main/java/com/watabou/noosa/audio/Music.java
Patch:
@@ -193,6 +193,8 @@ private synchronized void playNextTrack(com.badlogic.gdx.audio.Music music){
 
 	private synchronized void play(String track, com.badlogic.gdx.audio.Music.OnCompletionListener listener){
 		try {
+			fadeTime = fadeTotal = -1;
+
 			player = Gdx.audio.newMusic(Gdx.files.internal(track));
 			player.setLooping(looping);
 			player.setVolume(volumeWithFade());

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/SacrificialFire.java
Patch:
@@ -166,7 +166,7 @@ public void sacrifice( Char ch ) {
 				} else if (ch instanceof Swarm && ((Swarm) ch).EXP == 0){
 					//give 1 exp for child swarms, instead of 0
 					exp = 1;
-				} else {
+				} else if (((Mob) ch).EXP > 0) {
 					exp = 1 + ((Mob)ch).EXP;
 				}
 				exp *= Random.IntRange( 2, 3 );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -1458,6 +1458,7 @@ public String tileName( int tile ) {
 			case Terrain.EMPTY:
 			case Terrain.EMPTY_SP:
 			case Terrain.EMPTY_DECO:
+			case Terrain.CUSTOM_DECO_EMPTY:
 			case Terrain.SECRET_TRAP:
 				return Messages.get(Level.class, "floor_name");
 			case Terrain.GRASS:

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/quest/MassGraveRoom.java
Patch:
@@ -58,7 +58,7 @@ public void paint(Level level){
 		level.addItemToSpawn(new PotionOfLiquidFlame());
 
 		Painter.fill(level, this, Terrain.WALL);
-		Painter.fill(level, this, 1, Terrain.EMPTY_SP);
+		Painter.fill(level, this, 1, Terrain.CUSTOM_DECO_EMPTY);
 
 		Bones b = new Bones();
 
@@ -72,7 +72,7 @@ public void paint(Level level){
 			int pos;
 			do {
 				pos = level.pointToCell(random());
-			} while (level.map[pos] != Terrain.EMPTY_SP || level.findMob(pos) != null);
+			} while (level.map[pos] != Terrain.CUSTOM_DECO_EMPTY || level.findMob(pos) != null);
 			skele.pos = pos;
 			level.mobs.add( skele );
 		}
@@ -91,7 +91,7 @@ public void paint(Level level){
 			int pos;
 			do {
 				pos = level.pointToCell(random());
-			} while (level.map[pos] != Terrain.EMPTY_SP || level.heaps.get(pos) != null);
+			} while (level.map[pos] != Terrain.CUSTOM_DECO_EMPTY || level.heaps.get(pos) != null);
 			Heap h = level.drop(item, pos);
 			h.setHauntedIfCursed();
 			h.type = Heap.Type.SKELETON;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/quest/RitualSiteRoom.java
Patch:
@@ -59,7 +59,7 @@ public void paint( Level level ) {
 
 		level.customTiles.add(vis);
 		
-		Painter.fill(level, c.x-1, c.y-1, 3, 3, Terrain.EMPTY_DECO);
+		Painter.fill(level, c.x-1, c.y-1, 3, 3, Terrain.CUSTOM_DECO_EMPTY);
 
 		level.addItemToSpawn(new CeremonialCandle());
 		level.addItemToSpawn(new CeremonialCandle());

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/DungeonTileSheet.java
Patch:
@@ -96,6 +96,7 @@ private static int xy(int x, int y){
 		chasmStitcheable.put( Terrain.BOOKSHELF,    CHASM_FLOOR );
 		chasmStitcheable.put( Terrain.BARRICADE,    CHASM_FLOOR );
 		chasmStitcheable.put( Terrain.PEDESTAL,     CHASM_FLOOR );
+		chasmStitcheable.put( Terrain.CUSTOM_DECO_EMPTY,CHASM_FLOOR );
 		chasmStitcheable.put( Terrain.MINE_BOULDER, CHASM_FLOOR );
 		chasmStitcheable.put( Terrain.MINE_CRYSTAL, CHASM_FLOOR );
 
@@ -134,7 +135,7 @@ public static int stitchChasmTile(int above){
 			Terrain.BARRICADE, Terrain.HIGH_GRASS, Terrain.FURROWED_GRASS, Terrain.SECRET_TRAP,
 			Terrain.TRAP, Terrain.INACTIVE_TRAP, Terrain.EMPTY_DECO,
 			Terrain.CUSTOM_DECO, Terrain.WELL, Terrain.STATUE, Terrain.ALCHEMY,
-			Terrain.MINE_CRYSTAL, Terrain.MINE_BOULDER,
+			Terrain.CUSTOM_DECO_EMPTY, Terrain.MINE_CRYSTAL, Terrain.MINE_BOULDER,
 			Terrain.DOOR, Terrain.OPEN_DOOR, Terrain.LOCKED_DOOR, Terrain.CRYSTAL_DOOR
 	));
 
@@ -392,6 +393,7 @@ public static int stitchWallOverhangTile(int tile, int rightBelow, int below, in
 		directVisuals.put(Terrain.SECRET_TRAP,      directVisuals.get(Terrain.EMPTY));
 		directVisuals.put(Terrain.TRAP,             directVisuals.get(Terrain.EMPTY));
 		directVisuals.put(Terrain.INACTIVE_TRAP,    directVisuals.get(Terrain.EMPTY));
+		directVisuals.put(Terrain.CUSTOM_DECO_EMPTY,directVisuals.get(Terrain.EMPTY));
 
 		directVisuals.put(Terrain.EMPTY_DECO,       FLOOR_DECO);
 		directVisuals.put(Terrain.LOCKED_EXIT,      LOCKED_EXIT);

File: SPD-classes/src/main/java/com/watabou/input/ControllerHandler.java
Patch:
@@ -45,7 +45,8 @@ public enum ControllerType {
 	public static boolean controllerActive = false;
 
 	//sufficiently large number so that it'll never collide with touch pointers (which start at 0)
-	public static final int CONTROLLER_POINTER_ID = 1000;
+	//19 is the max to avoid array overflow when interacting with some libGDX graphics objects
+	public static final int CONTROLLER_POINTER_ID = 19;
 
 	private static void setControllerType(Controller controller){
 		if (controller.getName().contains("Xbox")){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/YogFist.java
Patch:
@@ -148,7 +148,7 @@ protected boolean doAttack( Char enemy ) {
 	public void damage(int dmg, Object src) {
 		int preHP = HP;
 		super.damage(dmg, src);
-		int dmgTaken = HP - preHP;
+		int dmgTaken = preHP - HP;
 
 		LockedFloor lock = Dungeon.hero.buff(LockedFloor.class);
 		if (dmgTaken > 0 && lock != null){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Tag.java
Patch:
@@ -59,7 +59,7 @@ protected void createChildren() {
 
 	@Override
 	protected void onClick() {
-		GameScene.tagsNeedLayout = false;
+		GameScene.tagDisappeared = false;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfLivingEarth.java
Patch:
@@ -80,10 +80,10 @@ public void onZap(Ballistica bolt) {
 		}
 
 		RockArmor buff = curUser.buff(RockArmor.class);
-		//only grant armor if we are shooting at an enemy, or a hiding mimic
-		if (ch == null
+		//only grant armor if we are shooting at an enemy, a hiding mimic, or the guardian
+		if ((guardian == null || ch != guardian) && (ch == null
 				|| ch.alignment == Char.Alignment.ALLY
-				|| ch.alignment == Char.Alignment.NEUTRAL && !(ch instanceof Mimic)){
+				|| ch.alignment == Char.Alignment.NEUTRAL && !(ch instanceof Mimic))){
 			armorToAdd = 0;
 		} else {
 			if (buff == null && guardian == null) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/Ring.java
Patch:
@@ -289,7 +289,7 @@ public void onHeroGainExp( float levelPercent, Hero hero ){
 		levelsToID -= levelPercent;
 		if (levelsToID <= 0){
 			identify();
-			GLog.p( Messages.get(Ring.class, "identify", title()) );
+			GLog.p( Messages.get(Ring.class, "identify") );
 			Badges.validateItemLevelAquired( this );
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/curses/Multiplicity.java
Patch:
@@ -52,7 +52,7 @@ public class Multiplicity extends Armor.Glyph {
 	@Override
 	public int proc(Armor armor, Char attacker, Char defender, int damage) {
 
-		float procChance = 1/2f * procChanceMultiplier(defender);
+		float procChance = 1/20f * procChanceMultiplier(defender);
 		if ( Random.Float() < procChance ) {
 			ArrayList<Integer> spawnPoints = new ArrayList<>();
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/HallsBossLevel.java
Patch:
@@ -79,7 +79,7 @@ public class HallsBossLevel extends Level {
 
 	@Override
 	public void playLevelMusic() {
-		if (locked){
+		if (locked && BossHealthBar.isAssigned()){
 			if (BossHealthBar.isBleeding()){
 				Music.INSTANCE.play(Assets.Music.HALLS_BOSS_FINALE, true);
 			} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DwarfKing.java
Patch:
@@ -60,6 +60,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.sprites.KingSprite;
 import com.shatteredpixel.shatteredpixeldungeon.ui.BossHealthBar;
 import com.shatteredpixel.shatteredpixeldungeon.ui.BuffIndicator;
+import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
 import com.watabou.noosa.Game;
 import com.watabou.noosa.audio.Music;
 import com.watabou.noosa.audio.Sample;
@@ -695,6 +696,7 @@ public boolean act() {
 					}
 					if (!ch.isAlive() && ch == Dungeon.hero) {
 						Dungeon.fail(DwarfKing.class);
+						GLog.n( Messages.capitalize(Messages.get(Char.class, "kill", Messages.get(DwarfKing.class, "name"))));
 					}
 				}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfRemoveCurse.java
Patch:
@@ -51,7 +51,6 @@ public class ScrollOfRemoveCurse extends InventoryScroll {
 	@Override
 	public void doRead() {
 
-		detach(curUser.belongings.backpack);
 		TormentedSpirit spirit = null;
 		for (int i : PathFinder.NEIGHBOURS8){
 			if (Actor.findChar(curUser.pos+i) instanceof TormentedSpirit){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Ghost.java
Patch:
@@ -363,7 +363,7 @@ public void call() {
 		}
 
 		public static boolean active(){
-			return given && !processed && depth == Dungeon.depth;
+			return spawned && given && !processed && depth == Dungeon.depth;
 		}
 		
 		public static void complete() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTransmutation.java
Patch:
@@ -68,7 +68,8 @@ protected boolean usableOnItem(Item item) {
 		return item instanceof MeleeWeapon ||
 				(item instanceof MissileWeapon && (!(item instanceof Dart) || item instanceof TippedDart)) ||
 				(item instanceof Potion && !(item instanceof Elixir || item instanceof Brew || item instanceof AlchemicalCatalyst)) ||
-				item instanceof Scroll ||
+				//the extra check here prevents a single scroll being used on itself
+				(item instanceof Scroll && (!(item instanceof ScrollOfTransmutation) || item.quantity() > 1)) ||
 				item instanceof Ring ||
 				item instanceof Wand ||
 				item instanceof Plant.Seed ||

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/CrystalPathRoom.java
Patch:
@@ -205,8 +205,9 @@ public int compare(Item a, Item b) {
 		level.drop(rewardItems.remove(0), level.pointToCell(rooms[shuffle == 1 ? 0 : 1].center()));
 		level.drop(rewardItems.remove(0), level.pointToCell(rooms[shuffle == 1 ? 1 : 0].center()));
 
-		level.drop(rewardItems.remove(0), shuffle == 1 ? prize1 : prize2);
-		level.drop(rewardItems.remove(0), shuffle == 1 ? prize2 : prize1);
+		//player can only see these if they unlock the previous doors, so don't count them for exploration
+		level.drop(rewardItems.remove(0), shuffle == 1 ? prize1 : prize2).autoExplored = true;
+		level.drop(rewardItems.remove(0), shuffle == 1 ? prize2 : prize1).autoExplored = true;
 
 		level.addItemToSpawn( new CrystalKey( Dungeon.depth ) );
 		level.addItemToSpawn( new CrystalKey( Dungeon.depth ) );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/features/Chasm.java
Patch:
@@ -59,7 +59,7 @@ public static void heroJump( final Hero hero ) {
 			@Override
 			public void call() {
 				GameScene.show(
-						new WndOptions( new Image(Dungeon.level.tilesTex(), 48, 48, 16, 16),
+						new WndOptions( new Image(Dungeon.level.tilesTex(), 176, 16, 16, 16),
 								Messages.get(Chasm.class, "chasm"),
 								Messages.get(Chasm.class, "jump"),
 								Messages.get(Chasm.class, "yes"),

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Blacksmith.java
Patch:
@@ -118,7 +118,7 @@ public void hide() {
 							Quest.given = true;
 							Quest.completed = false;
 							Notes.add( Notes.Landmark.TROLL );
-							Item pick = Quest.pickaxe;
+							Item pick = Quest.pickaxe != null ? Quest.pickaxe : new Pickaxe();
 							if (pick.doPickUp( Dungeon.hero )) {
 								GLog.i( Messages.capitalize(Messages.get(Dungeon.hero, "you_now_have", pick.name()) ));
 							} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Heap.java
Patch:
@@ -320,7 +320,7 @@ public void freeze() {
 				items.remove(item);
 				((Potion) item).shatter(pos);
 				frozen = true;
-			} else if (item instanceof Bomb){
+			} else if (item instanceof Bomb && ((Bomb) item).fuse != null){
 				frozen = frozen || ((Bomb) item).fuse.freeze();
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndHeroInfo.java
Patch:
@@ -189,7 +189,7 @@ public HeroInfoTab(HeroClass cls){
 					break;
 				case HUNTRESS:
 					icons = new Image[]{ new ItemSprite(ItemSpriteSheet.SPIRIT_BOW),
-							new Image(Assets.Environment.TILES_SEWERS, 112, 80, 16, 16),
+							new Image(Assets.Environment.TILES_SEWERS, 32, 64, 16, 16),
 							new ItemSprite(ItemSpriteSheet.GLOVES),
 							new ItemSprite(ItemSpriteSheet.SCROLL_ISAZ)};
 					break;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -136,12 +136,13 @@ public static float procChanceMultiplier( Char attacker ){
 
 	public boolean tryToZap( Hero owner, int target ){
 
-		if (owner.buff(MagicImmune.class) != null){
+		if (owner.buff(WildMagic.WildMagicTracker.class) == null && owner.buff(MagicImmune.class) != null){
 			GLog.w( Messages.get(this, "no_magic") );
 			return false;
 		}
 
-		if ( curCharges >= chargesPerCast()){
+		//if we're using wild magic, then assume we have charges
+		if ( owner.buff(WildMagic.WildMagicTracker.class) != null || curCharges >= chargesPerCast()){
 			return true;
 		} else {
 			GLog.w(Messages.get(this, "fizzles"));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndWandmaker.java
Patch:
@@ -78,7 +78,7 @@ public WndWandmaker( final Wandmaker wandmaker, final Item item ) {
 			@Override
 			protected void onClick() {
 				if (Dungeon.hero.belongings.contains(questItem)) {
-					GameScene.show(new RewardWindow(item));
+					GameScene.show(new RewardWindow(item()));
 				} else {
 					hide();
 				}
@@ -92,7 +92,7 @@ protected void onClick() {
 			@Override
 			protected void onClick() {
 				if (Dungeon.hero.belongings.contains(questItem)) {
-					GameScene.show(new RewardWindow(item));
+					GameScene.show(new RewardWindow(item()));
 				} else {
 					hide();
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/rogue/SmokeBomb.java
Patch:
@@ -126,6 +126,7 @@ protected void activate(ClassArmor armor, Hero hero, Integer target) {
 					NinjaLog n = new NinjaLog();
 					n.pos = hero.pos;
 					GameScene.add(n);
+					Dungeon.level.occupyCell(n);
 				}
 
 				if (hero.hasTalent(Talent.HASTY_RETREAT)){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_7_X_Changes.java
Patch:
@@ -753,7 +753,7 @@ public static void add_v0_7_0_Changes( ArrayList<ChangeInfo> changeInfos ){
 				"\n" +
 				"Also, before v0.7.0 there were a few unique artifacts which only dropped from particular enemies. I standardized these items in v0.7.0 to either be universal, or scrapped them entirely and put some of their functionality into other game systems."));
 		
-		changes.addButton( new ChangeButton(new Image(Assets.Environment.TILES_SEWERS, 48, 80, 16, 16 ), "Alchemy Overhaul!",
+		changes.addButton( new ChangeButton(new Image(Assets.Environment.TILES_SEWERS, 0, 64, 16, 16 ), "Alchemy Overhaul!",
 				"The game's alchemy system has been entirely overhauled!\n\n" +
 				"Alchemy is now a full consumable crafting system which lets you create all kinds of new items.\n\n" +
 				"There is also a new resource: alchemical energy. Every alchemy pot has some energy within it. Some recipes require this energy, so make sure to use it wisely!\n\n" +

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_9_X_Changes.java
Patch:
@@ -348,7 +348,7 @@ public static void add_v0_9_2_Changes( ArrayList<ChangeInfo> changeInfos ) {
 				"_-_ Rather than having a 1/8 chance per enemy, the game now guarantees that every 8th enemy is a champion. This should make champion spawn rates much more consistent.\n" +
 				"_-_ Removed champion enemy caps, no longer needed now that spawning is more consistent."));
 
-		changes.addButton(new ChangeButton(new TalentIcon(Talent.INSCRIBED_POWER), "On-Upgrade Talents",
+		changes.addButton(new ChangeButton(new ItemSprite(ItemSpriteSheet.SCROLL_TIWAZ), "On-Upgrade Talents",
 				"T2 talents are doing very well overall, but I'm handing out a buff to each on-upgrade talent as they're a bit weak and aren't picked often:\n\n" +
 				"_- Energizing Upgrade_ staff charges increased to 2/3 at +1/+2, up from 1/2 at +1/+2.\n" +
 				"_- Mystical Upgrade_ cloak of shadows charges increased to 2/3 at +1/+2, up from 1/2 at +1/+2."));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v1_X_Changes.java
Patch:
@@ -485,7 +485,7 @@ public static void add_v1_2_Changes( ArrayList<ChangeInfo> changeInfos ) {
 				"_-_ Integration with Steamworks for achievements and cloud sync.\n\n" +
 				"Users on mobile devices will be able to benefit from most of these features as well! (some feature require a large enough display)"));
 
-		changes.addButton( new ChangeButton(new Image(Assets.Environment.TILES_SEWERS, 176, 64, 16, 16 ), "Special Rooms Additions!",
+		changes.addButton( new ChangeButton(new Image(Assets.Environment.TILES_SEWERS, 176, 48, 16, 16 ), "Special Rooms Additions!",
 				"_Six new special rooms have been added!_\n\n" +
 				"Two of these rooms (and one existing room) use new crystal doors, which let you see through them before you find a crystal key to unlock them.\n\n" +
 				"Three of these rooms include new terrain hazards, which will require the right tools to get past.\n\n" +

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/DungeonTileSheet.java
Patch:
@@ -329,7 +329,8 @@ public static int stitchWallOverhangTile(int tile, int rightBelow, int below, in
 		else if (tile == Terrain.DOOR)                              visual = DOOR_SIDEWAYS_OVERHANG_CLOSED;
 		else if (tile == Terrain.LOCKED_DOOR)                       visual = DOOR_SIDEWAYS_OVERHANG_LOCKED;
 		else if (tile == Terrain.CRYSTAL_DOOR)                      visual = DOOR_SIDEWAYS_OVERHANG_CRYSTAL;
-		else if (below == Terrain.WALL_DECO)                        visual = WALL_OVERHANG_DECO;
+		//TODO currently this line on triggers on mining floors, do we want to make it universal?
+		else if (Dungeon.branch == 1 && below == Terrain.WALL_DECO) visual = WALL_OVERHANG_DECO;
 		else if (below == Terrain.BOOKSHELF)                        visual = WALL_OVERHANG_WOODEN;
 		else                                                        visual = WALL_OVERHANG;
 

File: SPD-classes/src/main/java/com/watabou/noosa/Group.java
Patch:
@@ -280,6 +280,7 @@ public synchronized Gizmo random() {
 	}
 	
 	public synchronized void clear() {
+		if (length == 0) return;
 		for (int i=0; i < length; i++) {
 			Gizmo g = members.get( i );
 			if (g != null) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/DungeonTileSheet.java
Patch:
@@ -86,7 +86,7 @@ private static int xy(int x, int y){
 		chasmStitcheable.put( Terrain.HIGH_GRASS,   CHASM_FLOOR );
 		chasmStitcheable.put( Terrain.FURROWED_GRASS,CHASM_FLOOR );
 		chasmStitcheable.put( Terrain.EMPTY_DECO,   CHASM_FLOOR );
-		chasmStitcheable.put( Terrain.SIGN,         CHASM_FLOOR );
+		chasmStitcheable.put( Terrain.CUSTOM_DECO,  CHASM_FLOOR );
 		chasmStitcheable.put( Terrain.EMPTY_WELL,   CHASM_FLOOR );
 		chasmStitcheable.put( Terrain.WELL,         CHASM_FLOOR );
 		chasmStitcheable.put( Terrain.STATUE,       CHASM_FLOOR );
@@ -131,7 +131,7 @@ public static int stitchChasmTile(int above){
 			Terrain.ENTRANCE, Terrain.EXIT, Terrain.EMBERS,
 			Terrain.BARRICADE, Terrain.HIGH_GRASS, Terrain.FURROWED_GRASS, Terrain.SECRET_TRAP,
 			Terrain.TRAP, Terrain.INACTIVE_TRAP, Terrain.EMPTY_DECO,
-			Terrain.SIGN, Terrain.WELL, Terrain.STATUE, Terrain.ALCHEMY,
+			Terrain.CUSTOM_DECO, Terrain.WELL, Terrain.STATUE, Terrain.ALCHEMY,
 			Terrain.DOOR, Terrain.OPEN_DOOR, Terrain.LOCKED_DOOR, Terrain.CRYSTAL_DOOR
 	));
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfTransfusion.java
Patch:
@@ -29,6 +29,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Barrier;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Charm;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mimic;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Beam;
 import com.shatteredpixel.shatteredpixeldungeon.effects.CellEmitter;
@@ -101,7 +102,8 @@ public void onZap(Ballistica beam) {
 				}
 
 			//for enemies...
-			} else {
+			//(or for mimics which are hiding, special case)
+			} else if (ch.alignment == Char.Alignment.ENEMY || ch instanceof Mimic) {
 
 				//grant a self-shield, and...
 				Buff.affect(curUser, Barrier.class).setShield((5 + buffedLvl()));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/StormCloud.java
Patch:
@@ -43,11 +43,11 @@ protected void evolve() {
 				if (cur[cell] > 0) {
 					Dungeon.level.setCellToWater(true, cell);
 					if (fire != null){
-						fire.clear(i);
+						fire.clear(cell);
 					}
 
 					//fiery enemies take damage as if they are in toxic gas
-					Char ch = Actor.findChar(i);
+					Char ch = Actor.findChar(cell);
 					if (ch != null
 							&& !ch.isImmune(getClass())
 							&& Char.hasProp(ch, Char.Property.FIERY)){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/SewerLevel.java
Patch:
@@ -119,7 +119,7 @@ protected float[] trapChances() {
 	@Override
 	protected void createMobs() {
 		Ghost.Quest.spawn( this, roomExit );
-		super.createItems();
+		super.createMobs();
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/BeaconOfReturning.java
Patch:
@@ -183,12 +183,14 @@ public ItemSprite.Glowing glowing() {
 	}
 	
 	private static final String DEPTH	= "depth";
+	private static final String BRANCH	= "branch";
 	private static final String POS		= "pos";
 	
 	@Override
 	public void storeInBundle( Bundle bundle ) {
 		super.storeInBundle( bundle );
 		bundle.put( DEPTH, returnDepth );
+		bundle.put( BRANCH, returnBranch );
 		if (returnDepth != -1) {
 			bundle.put( POS, returnPos );
 		}
@@ -198,6 +200,7 @@ public void storeInBundle( Bundle bundle ) {
 	public void restoreFromBundle( Bundle bundle ) {
 		super.restoreFromBundle(bundle);
 		returnDepth	= bundle.getInt( DEPTH );
+		returnBranch = bundle.getInt( BRANCH );
 		returnPos	= bundle.getInt( POS );
 	}
 	

File: desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopLauncher.java
Patch:
@@ -92,7 +92,7 @@ public void uncaughtException(Thread thread, Throwable throwable) {
 					exceptionMsg = exceptionMsg.substring(0, 1000) + "...";
 				}
 
-				if (exceptionMsg.contains("Couldnt create window")){
+				if (exceptionMsg.contains("Couldn’t create window")){
 					TinyFileDialogs.tinyfd_messageBox(title + " Has Crashed!",
 							title + " was not able to initialize its graphics display, sorry about that!\n\n" +
 									"This usually happens when your graphics card does not support OpenGL 2.0+, or has misconfigured graphics drivers.\n\n" +

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/builders/FigureEightBuilder.java
Patch:
@@ -130,7 +130,7 @@ public ArrayList<Room> build(ArrayList<Room> rooms) {
 		ArrayList<Room> secondLoopTemp = new ArrayList<>();
 		secondLoopTemp.add(landmarkRoom);
 		secondLoopTemp.addAll(roomsToLoop);
-		secondLoopTemp.add((secondLoopTemp.size()+1)/2, exit);
+		if (exit != null) secondLoopTemp.add((secondLoopTemp.size()+1)/2, exit);
 
 		secondLoop = new ArrayList<>();
 		for (Room r : secondLoopTemp){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/builders/LoopBuilder.java
Patch:
@@ -84,7 +84,7 @@ public ArrayList<Room> build(ArrayList<Room> rooms) {
 		float startAngle = Random.Float(0, 360);
 
 		mainPathRooms.add(0, entrance);
-		mainPathRooms.add((mainPathRooms.size()+1)/2, exit);
+		if (exit != null) mainPathRooms.add((mainPathRooms.size()+1)/2, exit);
 
 		ArrayList<Room> loop = new ArrayList<>();
 		float[] pathTunnels = pathTunnelChances.clone();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -914,15 +914,15 @@ public static void observe( int dist ) {
 		}
 
 		for (TalismanOfForesight.HeapAwareness h : hero.buffs(TalismanOfForesight.HeapAwareness.class)){
-			if (Dungeon.depth != h.depth) continue;
+			if (Dungeon.depth != h.depth || Dungeon.branch != h.branch) continue;
 			BArray.or( level.visited, level.heroFOV, h.pos - 1 - level.width(), 3, level.visited );
 			BArray.or( level.visited, level.heroFOV, h.pos - 1, 3, level.visited );
 			BArray.or( level.visited, level.heroFOV, h.pos - 1 + level.width(), 3, level.visited );
 			GameScene.updateFog(h.pos, 2);
 		}
 
 		for (RevealedArea a : hero.buffs(RevealedArea.class)){
-			if (Dungeon.depth != a.depth) continue;
+			if (Dungeon.depth != a.depth || Dungeon.branch != a.branch) continue;
 			BArray.or( level.visited, level.heroFOV, a.pos - 1 - level.width(), 3, level.visited );
 			BArray.or( level.visited, level.heroFOV, a.pos - 1, 3, level.visited );
 			BArray.or( level.visited, level.heroFOV, a.pos - 1 + level.width(), 3, level.visited );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/keys/Key.java
Patch:
@@ -38,7 +38,8 @@ public abstract class Key extends Item {
 		stackable = true;
 		unique = true;
 	}
-	
+
+	//TODO currently keys can only appear on branch = 0, add branch support here if that changes
 	public int depth;
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/journal/Notes.java
Patch:
@@ -33,7 +33,8 @@
 public class Notes {
 	
 	public static abstract class Record implements Comparable<Record>, Bundlable {
-		
+
+		//TODO currently notes can only relate to branch = 0, add branch support here if that changes
 		protected int depth;
 
 		public int depth(){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -1337,7 +1337,7 @@ public void updateFieldOfView( Char c, boolean[] fieldOfView ) {
 			}
 
 			for (TalismanOfForesight.HeapAwareness h : c.buffs(TalismanOfForesight.HeapAwareness.class)){
-				if (Dungeon.depth != h.depth) continue;
+				if (Dungeon.depth != h.depth || Dungeon.branch != h.branch) continue;
 				for (int i : PathFinder.NEIGHBOURS9) heroMindFov[h.pos+i] = true;
 			}
 
@@ -1354,7 +1354,7 @@ public void updateFieldOfView( Char c, boolean[] fieldOfView ) {
 			}
 
 			for (RevealedArea a : c.buffs(RevealedArea.class)){
-				if (Dungeon.depth != a.depth) continue;
+				if (Dungeon.depth != a.depth || Dungeon.branch != a.branch) continue;
 				for (int i : PathFinder.NEIGHBOURS9) heroMindFov[a.pos+i] = true;
 			}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_7_X_Changes.java
Patch:
@@ -753,7 +753,7 @@ public static void add_v0_7_0_Changes( ArrayList<ChangeInfo> changeInfos ){
 				"\n" +
 				"Also, before v0.7.0 there were a few unique artifacts which only dropped from particular enemies. I standardized these items in v0.7.0 to either be universal, or scrapped them entirely and put some of their functionality into other game systems."));
 		
-		changes.addButton( new ChangeButton(new Image(Assets.Environment.TILES_SEWERS, 48, 96, 16, 16 ), "Alchemy Overhaul!",
+		changes.addButton( new ChangeButton(new Image(Assets.Environment.TILES_SEWERS, 48, 80, 16, 16 ), "Alchemy Overhaul!",
 				"The game's alchemy system has been entirely overhauled!\n\n" +
 				"Alchemy is now a full consumable crafting system which lets you create all kinds of new items.\n\n" +
 				"There is also a new resource: alchemical energy. Every alchemy pot has some energy within it. Some recipes require this energy, so make sure to use it wisely!\n\n" +

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v1_X_Changes.java
Patch:
@@ -485,7 +485,7 @@ public static void add_v1_2_Changes( ArrayList<ChangeInfo> changeInfos ) {
 				"_-_ Integration with Steamworks for achievements and cloud sync.\n\n" +
 				"Users on mobile devices will be able to benefit from most of these features as well! (some feature require a large enough display)"));
 
-		changes.addButton( new ChangeButton(new Image(Assets.Environment.TILES_SEWERS, 48, 80, 16, 16 ), "Special Rooms Additions!",
+		changes.addButton( new ChangeButton(new Image(Assets.Environment.TILES_SEWERS, 176, 64, 16, 16 ), "Special Rooms Additions!",
 				"_Six new special rooms have been added!_\n\n" +
 				"Two of these rooms (and one existing room) use new crystal doors, which let you see through them before you find a crystal key to unlock them.\n\n" +
 				"Three of these rooms include new terrain hazards, which will require the right tools to get past.\n\n" +

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndHeroInfo.java
Patch:
@@ -189,7 +189,7 @@ public HeroInfoTab(HeroClass cls){
 					break;
 				case HUNTRESS:
 					icons = new Image[]{ new ItemSprite(ItemSpriteSheet.SPIRIT_BOW),
-							new Image(Assets.Environment.TILES_SEWERS, 112, 96, 16, 16),
+							new Image(Assets.Environment.TILES_SEWERS, 112, 80, 16, 16),
 							new ItemSprite(ItemSpriteSheet.GLOVES),
 							new ItemSprite(ItemSpriteSheet.SCROLL_ISAZ)};
 					break;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Generator.java
Patch:
@@ -641,7 +641,7 @@ public static MeleeWeapon randomWeapon(int floorSet) {
 	}
 
 	public static MeleeWeapon randomWeapon(boolean useDefaults) {
-		return randomWeapon(Dungeon.depth / 5, false);
+		return randomWeapon(Dungeon.depth / 5, useDefaults);
 	}
 	
 	public static MeleeWeapon randomWeapon(int floorSet, boolean useDefaults) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/effects/Surprise.java
Patch:
@@ -76,7 +76,7 @@ public static void hit(Char ch) {
 	}
 
 	public static void hit(Char ch, float angle) {
-		if (ch.sprite.parent != null) {
+		if (ch.sprite != null && ch.sprite.parent != null) {
 			Surprise s = (Surprise) ch.sprite.parent.recycle(Surprise.class);
 			ch.sprite.parent.bringToFront(s);
 			s.reset(ch.sprite);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/stones/StoneOfDisarming.java
Patch:
@@ -30,7 +30,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
 import com.watabou.noosa.audio.Sample;
 import com.watabou.utils.Point;
-import com.watabou.utils.Random;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -76,15 +75,16 @@ protected void activate(final int cell) {
 				curr++;
 			}
 		}
-		
+
+		Collections.shuffle(disarmCandidates);
 		Collections.sort(disarmCandidates, new Comparator<Trap>() {
 			@Override
 			public int compare(Trap o1, Trap o2) {
 				float diff = Dungeon.level.trueDistance(cell, o1.pos) - Dungeon.level.trueDistance(cell, o2.pos);
 				if (diff < 0){
 					return -1;
 				} else if (diff == 0){
-					return Random.Int(2) == 0 ? -1 : 1;
+					return 0;
 				} else {
 					return 1;
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/PitfallTrap.java
Patch:
@@ -48,7 +48,7 @@ public class PitfallTrap extends Trap {
 	@Override
 	public void activate() {
 		
-		if( Dungeon.bossLevel() || Dungeon.depth > 25){
+		if( Dungeon.bossLevel() || Dungeon.depth > 25 || Dungeon.branch != 0){
 			GLog.w(Messages.get(this, "no_pit"));
 			return;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/AssassinsBlade.java
Patch:
@@ -66,8 +66,8 @@ public int damageRoll(Char owner) {
 	}
 
 	@Override
-	public float abilityChargeUse(Hero hero, Char target) {
-		return 2*super.abilityChargeUse(hero, target);
+	protected int baseChargeUse(Hero hero, Char target){
+		return 2;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/BattleAxe.java
Patch:
@@ -51,11 +51,11 @@ public String targetingPrompt() {
 	}
 
 	@Override
-	public float abilityChargeUse(Hero hero, Char target) {
+	protected int baseChargeUse(Hero hero, Char target){
 		if (target == null || (target instanceof Mob && ((Mob) target).surprisedBy(hero))) {
-			return super.abilityChargeUse(hero, target);
+			return 1;
 		} else {
-			return 2*super.abilityChargeUse(hero, target);
+			return 2;
 		}
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Dagger.java
Patch:
@@ -75,8 +75,8 @@ public int damageRoll(Char owner) {
 	}
 
 	@Override
-	public float abilityChargeUse(Hero hero, Char target) {
-		return 2*super.abilityChargeUse(hero, target);
+	protected int baseChargeUse(Hero hero, Char target){
+		return 2;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Dirk.java
Patch:
@@ -66,8 +66,8 @@ public int damageRoll(Char owner) {
 	}
 
 	@Override
-	public float abilityChargeUse(Hero hero, Char target) {
-		return 2*super.abilityChargeUse(hero, target);
+	protected int baseChargeUse(Hero hero, Char target){
+		return 2;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Flail.java
Patch:
@@ -89,11 +89,12 @@ protected boolean act() {
 		}
 	}
 
-	public float abilityChargeUse(Hero hero, Char target) {
+	@Override
+	protected int baseChargeUse(Hero hero, Char target){
 		if (Dungeon.hero.buff(SpinAbilityTracker.class) != null){
 			return 0;
 		} else {
-			return 2*super.abilityChargeUse(hero, target);
+			return 2;
 		}
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Greatsword.java
Patch:
@@ -38,11 +38,11 @@ public class Greatsword extends MeleeWeapon {
 	}
 
 	@Override
-	public float abilityChargeUse(Hero hero, Char target) {
+	protected int baseChargeUse(Hero hero, Char target){
 		if (hero.buff(Sword.CleaveTracker.class) != null){
 			return 0;
 		} else {
-			return super.abilityChargeUse( hero, target);
+			return 1;
 		}
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/HandAxe.java
Patch:
@@ -51,11 +51,11 @@ public String targetingPrompt() {
 	}
 
 	@Override
-	public float abilityChargeUse(Hero hero, Char target) {
+	protected int baseChargeUse(Hero hero, Char target){
 		if (target == null || (target instanceof Mob && ((Mob) target).surprisedBy(hero))) {
-			return super.abilityChargeUse(hero, target);
+			return 1;
 		} else {
-			return 2*super.abilityChargeUse(hero, target);
+			return 2;
 		}
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Longsword.java
Patch:
@@ -38,11 +38,11 @@ public class Longsword extends MeleeWeapon {
 	}
 
 	@Override
-	public float abilityChargeUse(Hero hero, Char target) {
+	protected int baseChargeUse(Hero hero, Char target){
 		if (hero.buff(Sword.CleaveTracker.class) != null){
 			return 0;
 		} else {
-			return super.abilityChargeUse( hero, target);
+			return 1;
 		}
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Mace.java
Patch:
@@ -60,11 +60,11 @@ public String targetingPrompt() {
 	}
 
 	@Override
-	public float abilityChargeUse(Hero hero, Char target) {
+	protected int baseChargeUse(Hero hero, Char target){
 		if (target == null || (target instanceof Mob && ((Mob) target).surprisedBy(hero))) {
-			return super.abilityChargeUse(hero, target);
+			return 1;
 		} else {
-			return 2*super.abilityChargeUse(hero, target);
+			return 2;
 		}
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Quarterstaff.java
Patch:
@@ -51,8 +51,8 @@ public int defenseFactor( Char owner ) {
 	}
 
 	@Override
-	public float abilityChargeUse(Hero hero, Char target) {
-		return 2*super.abilityChargeUse(hero, target);
+	protected int baseChargeUse(Hero hero, Char target){
+		return 2;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Scimitar.java
Patch:
@@ -47,8 +47,8 @@ public int max(int lvl) {
 	}
 
 	@Override
-	public float abilityChargeUse(Hero hero, Char target) {
-		return 2*super.abilityChargeUse(hero, target);
+	protected int baseChargeUse(Hero hero, Char target){
+		return 2;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Shortsword.java
Patch:
@@ -38,11 +38,11 @@ public class Shortsword extends MeleeWeapon {
 	}
 
 	@Override
-	public float abilityChargeUse(Hero hero, Char target) {
+	protected int baseChargeUse(Hero hero, Char target){
 		if (hero.buff(Sword.CleaveTracker.class) != null){
 			return 0;
 		} else {
-			return super.abilityChargeUse( hero, target);
+			return 1;
 		}
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sickle.java
Patch:
@@ -53,8 +53,9 @@ public int max(int lvl) {
 				lvl*(tier+1);                   //scaling unchanged
 	}
 
-	public float abilityChargeUse(Hero hero, Char target) {
-		return 2*super.abilityChargeUse(hero, target);
+	@Override
+	protected int baseChargeUse(Hero hero, Char target){
+		return 2;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sword.java
Patch:
@@ -48,11 +48,11 @@ public class Sword extends MeleeWeapon {
 	}
 
 	@Override
-	public float abilityChargeUse(Hero hero, Char target) {
+	protected int baseChargeUse(Hero hero, Char target){
 		if (hero.buff(Sword.CleaveTracker.class) != null){
 			return 0;
 		} else {
-			return super.abilityChargeUse( hero, target);
+			return 1;
 		}
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/WarHammer.java
Patch:
@@ -51,11 +51,11 @@ public String targetingPrompt() {
 	}
 
 	@Override
-	public float abilityChargeUse(Hero hero, Char target) {
+	protected int baseChargeUse(Hero hero, Char target){
 		if (target == null || (target instanceof Mob && ((Mob) target).surprisedBy(hero))) {
-			return super.abilityChargeUse(hero, target);
+			return 1;
 		} else {
-			return 2*super.abilityChargeUse(hero, target);
+			return 2;
 		}
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/WarScythe.java
Patch:
@@ -44,8 +44,9 @@ public int max(int lvl) {
 				lvl*(tier+1);                   //scaling unchanged
 	}
 
-	public float abilityChargeUse(Hero hero, Char target) {
-		return 2*super.abilityChargeUse(hero, target);
+	@Override
+	protected int baseChargeUse(Hero hero, Char target){
+		return 2;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/WornShortsword.java
Patch:
@@ -40,11 +40,11 @@ public class WornShortsword extends MeleeWeapon {
 	}
 
 	@Override
-	public float abilityChargeUse(Hero hero, Char target) {
+	protected int baseChargeUse(Hero hero, Char target){
 		if (hero.buff(Sword.CleaveTracker.class) != null){
 			return 0;
 		} else {
-			return super.abilityChargeUse( hero, target);
+			return 1;
 		}
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/BrokenSeal.java
Patch:
@@ -23,6 +23,7 @@
 
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Regeneration;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ShieldBuff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Belongings;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
@@ -185,7 +186,7 @@ public static class WarriorShield extends ShieldBuff {
 
 		@Override
 		public synchronized boolean act() {
-			if (shielding() < maxShield()) {
+			if (Regeneration.regenOn() && shielding() < maxShield()) {
 				partialShield += 1/30f;
 			}
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/Armor.java
Patch:
@@ -474,7 +474,7 @@ public String info() {
 				info += " " + Messages.get(Armor.class, "too_heavy");
 			}
 		} else {
-			if (Messages.lang() == Languages.KOREAN) {
+			if (Messages.lang() != Languages.KOREAN) {
 				info += "\n\n" + Messages.get(Armor.class, "avg_absorb", tier, DRMin(0), DRMax(0), STRReq(0));
 			} else {
 				info += "\n\n" + Messages.get(Armor.class, "avg_absorb", DRMin(0), DRMax(0), STRReq(0));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/ArmoredBrute.java
Patch:
@@ -45,7 +45,7 @@ public class ArmoredBrute extends Brute {
 	
 	@Override
 	public int drRoll() {
-		return super.drRoll() + Random.NormalIntRange(6, 10);
+		return super.drRoll() + 4; //4-12 DR total
 	}
 	
 	@Override

File: SPD-classes/src/main/java/com/watabou/utils/Bundle.java
Patch:
@@ -525,6 +525,7 @@ public static Bundle read( InputStream stream ) throws IOException {
 				// Some of these are written in a 'minified' format, some have duplicate keys.
 				// We read them in with the libGDX JSON code, fix duplicates, write as full JSON
 				// and then try to read again with org.json
+				Game.reportException(e);
 				JsonValue gdxJSON = new JsonReader().parse(jsonString);
 				killDuplicateKeysInLibGDXJSON(gdxJSON);
 				json = new JSONTokener(gdxJSON.prettyPrint(JsonWriter.OutputType.json, 0)).nextValue();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/MagicalFireRoom.java
Patch:
@@ -216,9 +216,10 @@ protected void evolve() {
 							Buff.affect(ch, Burning.class).reignite(ch, 4f);
 						}
 
-						//burn adjacent heaps, but only on outside cells
+						//burn adjacent heaps, but only on outside and non-water cells
 						if (Dungeon.level.heaps.get(cell) != null
-							&& Dungeon.level.map[cell] != Terrain.EMPTY_SP){
+							&& Dungeon.level.map[cell] != Terrain.EMPTY_SP
+							&& Dungeon.level.map[cell] != Terrain.WATER){
 							Dungeon.level.heaps.get(cell).burn();
 						}
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/Ratmogrify.java
Patch:
@@ -184,6 +184,9 @@ public static class TransmogRat extends Mob {
 
 		{
 			spriteClass = RatSprite.class;
+
+			//always false, as we derive stats from what we are transmogging from (which was already added)
+			firstAdded = false;
 		}
 
 		private Mob original;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Rapier.java
Patch:
@@ -121,6 +121,7 @@ public void call() {
 				}
 				hero.pos = dest;
 				Dungeon.level.occupyCell(hero);
+				Dungeon.observe();
 
 				if (enemy != null && hero.canAttack(enemy)) {
 					hero.sprite.attack(enemy.pos, new Callback() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/duelist/Feint.java
Patch:
@@ -90,7 +90,7 @@ protected void activate(ClassArmor armor, Hero hero, Integer target) {
 			return;
 		}
 
-		if (!Dungeon.level.solid[target] || Actor.findChar(target) != null){
+		if (Dungeon.level.solid[target] || Actor.findChar(target) != null){
 			GLog.w(Messages.get(this, "bad_location"));
 			return;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/Ratmogrify.java
Patch:
@@ -225,6 +225,7 @@ protected boolean act() {
 			if (timeLeft <= 0){
 				Mob original = getOriginal();
 				this.original = null;
+				original.clearTime();
 				GameScene.add(original);
 
 				EXP = 0;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/InterlevelScene.java
Patch:
@@ -254,9 +254,6 @@ public void run() {
 					
 					try {
 
-						if (Dungeon.hero != null){
-							Dungeon.hero.spendToWhole();
-						}
 						Actor.fixTime();
 
 						switch (mode) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/duelist/ElementalStrike.java
Patch:
@@ -529,7 +529,7 @@ private void perCharEffect(ConeAOE cone, Hero hero, Char primaryTarget, Weapon.E
 		} else if (ench instanceof Friendly){
 			for (Char ch : affected){
 				if (Random.Float() < 0.5f*powerMulti){
-					Buff.affect(ch, Charm.class, 6f).target = hero;
+					Buff.affect(ch, Charm.class, 6f).object = hero.id();
 				}
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/duelist/Challenge.java
Patch:
@@ -138,7 +138,7 @@ protected void activate(ClassArmor armor, Hero hero, Integer target) {
 			return;
 		}
 
-		if (Dungeon.level.distance(blinkpos, targetCh.pos) >= 5){
+		if (Dungeon.level.distance(blinkpos, targetCh.pos) > 5){
 			GLog.w(Messages.get(this, "distant_target"));
 			return;
 		}

File: SPD-classes/src/main/java/com/watabou/input/ControllerHandler.java
Patch:
@@ -179,6 +179,8 @@ public static void updateControllerPointer(PointF pos, boolean sendEvent){
 		if (sendEvent) {
 			controllerActive = true;
 			PointerEvent.addPointerEvent(new PointerEvent((int) controllerPointerPos.x, (int) controllerPointerPos.y, 10_000, PointerEvent.Type.HOVER, PointerEvent.NONE));
+		} else {
+			PointerEvent.setHoverPos(pos);
 		}
 	}
 

File: SPD-classes/src/main/java/com/watabou/input/InputHandler.java
Patch:
@@ -21,13 +21,11 @@
 
 package com.watabou.input;
 
-import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input;
 import com.badlogic.gdx.InputAdapter;
 import com.badlogic.gdx.InputMultiplexer;
 import com.badlogic.gdx.InputProcessor;
 import com.watabou.noosa.Game;
-import com.watabou.noosa.ui.Cursor;
 import com.watabou.utils.PointF;
 
 public class InputHandler extends InputAdapter {

File: SPD-classes/src/main/java/com/watabou/noosa/ui/Cursor.java
Patch:
@@ -26,6 +26,7 @@
 import com.badlogic.gdx.graphics.Pixmap;
 import com.watabou.input.ControllerHandler;
 import com.watabou.noosa.Game;
+import com.watabou.utils.Callback;
 import com.watabou.utils.FileUtils;
 import com.watabou.utils.PointF;
 
@@ -99,10 +100,9 @@ public static void captureCursor(boolean captured){
 		} else {
 			if (ControllerHandler.controllerPointerActive()) {
 				ControllerHandler.setControllerPointer(true);
-				ControllerHandler.updateControllerPointer(new PointF(Game.width/2, Game.height/2), false);
+				ControllerHandler.updateControllerPointer(new PointF(Game.width/2f, Game.height/2f), false);
 			} else {
 				Gdx.input.setCursorCatched(false);
-				Gdx.input.setCursorPosition(Game.width/2, Game.height/2);
 			}
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Toolbar.java
Patch:
@@ -463,6 +463,7 @@ public void onSelect(int idx, boolean alt) {
 									if (alt && item.defaultAction() != null) {
 										item.execute(Dungeon.hero);
 									} else {
+										InventoryPane.clearTargetingSlot();
 										Game.scene().addToFront(new WndUseItem(null, item));
 									}
 								}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndUseItem.java
Patch:
@@ -55,7 +55,7 @@ protected void onClick() {
 							item.execute( Dungeon.hero, action );
 						}
 						Item.updateQuickslot();
-						if (action == item.defaultAction() && item.usesTargeting && owner == null){
+						if (action.equals(item.defaultAction()) && item.usesTargeting && owner == null){
 							InventoryPane.useTargeting();
 						}
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/AscensionChallenge.java
Patch:
@@ -137,6 +137,7 @@ public static void processEnemyKill(Char enemy){
 
 		if (enemy instanceof Ratmogrify.TransmogRat){
 			enemy = ((Ratmogrify.TransmogRat) enemy).getOriginal();
+			if (enemy == null) return;
 		}
 
 		//only enemies that are boosted count

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v2_X_Changes.java
Patch:
@@ -66,7 +66,7 @@ public static void add_Coming_Soon( ArrayList<ChangeInfo> changeInfos ) {
 		changes.addButton( new ChangeButton(Icons.get(Icons.CHANGES), "Larger Patches",
 				"There is a decent amount of technical work that still needs to be done for v2.2.0, and I can easily introduce that into the game via some patches to v2.1.0. Because of this, I expect that v2.1 is going to have a longer patch cycle than usual, as I'll be both including those technical changes and taking the opportunity to fix a bunch of smaller issues sooner than if I waiting to release them in v2.2.0."));
 
-		changes.addButton( new ChangeButton(new ItemSprite(ItemSpriteSheet.PICKAXE), "Blacksmith Questt",
+		changes.addButton( new ChangeButton(new ItemSprite(ItemSpriteSheet.PICKAXE), "Blacksmith Quest",
 				"I plan to completely rework the blacksmith's quest in v2.2.0, to feature a new sub area and a unique mining mechanic. The player will need to mine out walls both to collect treasure and to navigate around hazards. I expect the quest will be notably more involved and challenging, but there will be new rewards on offer a well!"));
 
 		changes.addButton( new ChangeButton(Icons.get(Icons.PREFS), "Smaller Changes/Fixes",
@@ -92,7 +92,7 @@ public static void add_v2_1_Changes( ArrayList<ChangeInfo> changeInfos ) {
 		changes.addButton( new ChangeButton(new ItemSprite(ItemSpriteSheet.WAR_SCYTHE), "New Weapons!",
 				"Three new weapons have been added to the game!\n" +
 				"\n" +
-				"_The Katana_ is a tier-4 defensive weapon that was designed to respond to the common feedback point of players wanting a higher tier weapon with the rapier's ability. Just like with her rapier, the Duelist can _lunge_ at enemies with a katana, dealing +50% damage.\n" +
+				"_The Katana_ is a tier-4 defensive weapon that was designed to respond to the common feedback point of players wanting a higher tier weapon with the rapier's ability. Just like with her rapier, the Duelist can _lunge_ at enemies with a katana, dealing bonus damage.\n" +
 				"\n" +
 				"_The Sickle_ and _War Scythe_ are T2 and T5 weapons that trade in some accuracy for increased base damage. The Duelist can use the _harvest_ ability with these weapons, which deals a large amount of bleeding instead of direct damage, but costs 2 charges."));
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -749,7 +749,6 @@ public void damage( int dmg, Object src ) {
 
 			float finalChance = buff(Grim.GrimTracker.class).maxChance;
 			finalChance *= (float)Math.pow( ((HT - HP) / (float)HT), 2);
-			finalChance = 1;
 
 			if (Random.Float() < finalChance) {
 				int extraDmg = Math.round(HP*resist(Grim.class));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v2_X_Changes.java
Patch:
@@ -89,6 +89,7 @@ public static void add_v2_1_Changes( ArrayList<ChangeInfo> changeInfos ) {
 		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes"),
 				"Fixed the following bugs:\n" +
 				"_Caused by RC-1:_\n" +
+				"_-_ Grim enchantment proccing far more often than intended\n" +
 				"_-_ Tormented spirit spawning far more frequently than intended"));
 
 		changes = new ChangeInfo("RC-1", false, null);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Wraith.java
Patch:
@@ -104,7 +104,7 @@ public static Wraith spawnAt( int pos, boolean allowExotic ) {
 		if ((!Dungeon.level.solid[pos] || Dungeon.level.passable[pos]) && Actor.findChar( pos ) == null) {
 
 			Wraith w;
-			if (allowExotic && Random.Int(1) == 0){
+			if (allowExotic && Random.Int(100) == 0){
 				w = new TormentedSpirit();
 			} else {
 				w = new Wraith();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM200.java
Patch:
@@ -82,7 +82,7 @@ public Item createLoot() {
 		Dungeon.LimitedDrops.DM200_EQUIP.count++;
 		//uses probability tables for dwarf city
 		if (loot == Generator.Category.WEAPON){
-			return Generator.randomWeapon(4);
+			return Generator.randomWeapon(4, true);
 		} else {
 			return Generator.randomArmor(4);
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Golem.java
Patch:
@@ -90,7 +90,7 @@ public Item createLoot() {
 		Dungeon.LimitedDrops.GOLEM_EQUIP.count++;
 		//uses probability tables for demon halls
 		if (loot == Generator.Category.WEAPON){
-			return Generator.randomWeapon(5);
+			return Generator.randomWeapon(5, true);
 		} else {
 			return Generator.randomArmor(5);
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mimic.java
Patch:
@@ -294,16 +294,16 @@ protected void generatePrize(){
 					reward = new Gold().random();
 					break;
 				case 1:
-					reward = Generator.randomMissile();
+					reward = Generator.randomMissile(true);
 					break;
 				case 2:
 					reward = Generator.randomArmor();
 					break;
 				case 3:
-					reward = Generator.randomWeapon();
+					reward = Generator.randomWeapon(true);
 					break;
 				case 4:
-					reward = Generator.random(Generator.Category.RING);
+					reward = Generator.randomUsingDefaults(Generator.Category.RING);
 					break;
 			}
 		} while (reward == null || Challenges.isItemBlocked(reward));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/TormentedSpirit.java
Patch:
@@ -60,7 +60,7 @@ public void cleanse(){
 		//50/50 between weapon or armor, always uncursed
 		Item prize;
 		if (Random.Int(2) == 0){
-			prize = Generator.randomWeapon();
+			prize = Generator.randomWeapon(true);
 			if (((MeleeWeapon)prize).hasCurseEnchant()){
 				((MeleeWeapon) prize).enchantment = null;
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfWealth.java
Patch:
@@ -261,7 +261,7 @@ private static Item genEquipmentDrop( int level ){
 		int floorset = (Dungeon.depth + level)/5;
 		switch (Random.Int(5)){
 			default: case 0: case 1:
-				Weapon w = Generator.randomWeapon(floorset);
+				Weapon w = Generator.randomWeapon(floorset, true);
 				if (!w.hasGoodEnchant() && Random.Int(10) < level)      w.enchant();
 				else if (w.hasCurseEnchant())                           w.enchant(null);
 				result = w;
@@ -273,7 +273,7 @@ private static Item genEquipmentDrop( int level ){
 				result = a;
 				break;
 			case 3:
-				result = Generator.random(Generator.Category.RING);
+				result = Generator.randomUsingDefaults(Generator.Category.RING);
 				break;
 			case 4:
 				result = Generator.random(Generator.Category.ARTIFACT);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/CursedWand.java
Patch:
@@ -362,7 +362,7 @@ private static boolean veryRareEffect(final Item origin, final Char user, final
 				mimic.alignment = Char.Alignment.ENEMY;
 				Item reward;
 				do {
-					reward = Generator.random(Random.oneOf(Generator.Category.WEAPON, Generator.Category.ARMOR,
+					reward = Generator.randomUsingDefaults(Random.oneOf(Generator.Category.WEAPON, Generator.Category.ARMOR,
 							Generator.Category.RING, Generator.Category.WAND));
 				} while (reward.level() < 1);
 				//play vfx/sfx manually as mimic isn't in the scene yet

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/secret/SecretArtilleryRoom.java
Patch:
@@ -46,7 +46,7 @@ public void paint(Level level) {
 			if( i == 0 ){
 				level.drop(new Bomb.DoubleBomb(), itemPos);
 			} else {
-				level.drop(Generator.randomMissile(), itemPos);
+				level.drop(Generator.randomMissile(true), itemPos);
 			}
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/secret/SecretMazeRoom.java
Patch:
@@ -97,7 +97,7 @@ public void paint(Level level) {
 		//1 floor set higher in probability, never cursed
 		do {
 			if (Random.Int(2) == 0) {
-				prize = Generator.randomWeapon((Dungeon.depth / 5) + 1);
+				prize = Generator.randomWeapon((Dungeon.depth / 5) + 1, true);
 			} else {
 				prize = Generator.randomArmor((Dungeon.depth / 5) + 1);
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/darts/DisplacingDart.java
Patch:
@@ -102,7 +102,7 @@ public int proc(Char attacker, Char defender, int damage) {
 					Dungeon.observe();
 					GameScene.updateFog();
 				} else if (!Dungeon.level.heroFOV[chosenPos]){
-					Buff.affect(attacker, TalismanOfForesight.CharAwareness.class, 5f).charID = defender.id();
+					Buff.append(attacker, TalismanOfForesight.CharAwareness.class, 5f).charID = defender.id();
 				}
 			}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/SewerBossLevel.java
Patch:
@@ -158,6 +158,7 @@ public int randomRespawnCell( Char ch ) {
 		for (Point p : roomEntrance.getPoints()){
 			int cell = pointToCell(p);
 			if (passable[cell]
+					&& roomEntrance.inside(p)
 					&& Actor.findChar(cell) == null
 					&& (!Char.hasProp(ch, Char.Property.LARGE) || openSpace[cell])){
 				candidates.add(cell);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Wraith.java
Patch:
@@ -37,7 +37,7 @@ public class Wraith extends Mob {
 
 	private static final float SPAWN_DELAY	= 2f;
 	
-	private int level;
+	protected int level;
 	
 	{
 		spriteClass = WraithSprite.class;
@@ -104,7 +104,7 @@ public static Wraith spawnAt( int pos, boolean allowExotic ) {
 		if ((!Dungeon.level.solid[pos] || Dungeon.level.passable[pos]) && Actor.findChar( pos ) == null) {
 
 			Wraith w;
-			if (allowExotic && Random.Int(100) == 0){
+			if (allowExotic && Random.Int(1) == 0){
 				w = new TormentedSpirit();
 			} else {
 				w = new Wraith();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTransmutation.java
Patch:
@@ -209,6 +209,7 @@ private static Weapon changeWeapon( Weapon w ) {
 		} while (Challenges.isItemBlocked(n) || n.getClass() == w.getClass());
 
 		n.level(0);
+		n.quantity(1);
 		int level = w.trueLevel();
 		if (level > 0) {
 			n.upgrade( level );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/enchantments/Grim.java
Patch:
@@ -46,7 +46,9 @@ public int proc( Weapon weapon, Char attacker, Char defender, int damage ) {
 		//see Char.damage
 		Buff.affect(defender, GrimTracker.class).maxChance = maxChance;
 
-		if (attacker instanceof Hero && weapon.hasEnchant(Grim.class, attacker)){
+		if (defender.buff(GrimTracker.class) != null
+				&& attacker instanceof Hero
+				&& weapon.hasEnchant(Grim.class, attacker)){
 			defender.buff(GrimTracker.class).qualifiesForBadge = true;
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Generator.java
Patch:
@@ -656,7 +656,6 @@ public static MeleeWeapon randomWeapon(int floorSet, boolean useDefaults) {
 		} else {
 			w = (MeleeWeapon) random(wepTiers[Random.chances(floorSetTierProbs[floorSet])]);
 		}
-		w.random();
 		return w;
 	}
 	
@@ -690,7 +689,6 @@ public static MissileWeapon randomMissile(int floorSet, boolean useDefaults) {
 		} else {
 			w = (MissileWeapon)random(misTiers[Random.chances(floorSetTierProbs[floorSet])]);
 		}
-		w.random();
 		return w;
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/LockedFloor.java
Patch:
@@ -48,7 +48,7 @@ public boolean act() {
 
 	public void addTime(float time){
 		left += time;
-		left = Math.max(left, 50); //cannot build to more than 50
+		left = Math.min(left, 50); //cannot build to more than 50
 	}
 
 	public void removeTime(float time){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -877,7 +877,7 @@ private boolean actMove( HeroAction.Move action ) {
 			return true;
 
 		//Hero moves in place if there is grass to trample
-		} else if (canSelfTrample()){
+		} else if (pos == action.dst && canSelfTrample()){
 			canSelfTrample = false;
 			Dungeon.level.pressCell(pos);
 			spendAndNext( 1 / speed() );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/curses/Explosive.java
Patch:
@@ -73,6 +73,9 @@ public int proc( Weapon weapon, Char attacker, Char defender, int damage ) {
 					explosionPos = defender.pos+i;
 				}
 			}
+			if (explosionPos == -1) {
+				explosionPos = defender.pos;
+			}
 
 			new Bomb.MagicalBomb().explode(explosionPos);
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Slime.java
Patch:
@@ -78,8 +78,7 @@ public float lootChance(){
 	public Item createLoot() {
 		Dungeon.LimitedDrops.SLIME_WEP.count++;
 		Generator.Category c = Generator.Category.WEP_T2;
-		MeleeWeapon w = (MeleeWeapon) Reflection.newInstance(c.classes[Random.chances(c.probs)]);
-		w.random();
+		MeleeWeapon w = (MeleeWeapon)Generator.randomUsingDefaults(Generator.Category.WEP_T2);
 		w.level(0);
 		return w;
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -458,7 +458,7 @@ public boolean shoot( Char enemy, MissileWeapon wep ) {
 		}
 
 		if (hit && heroClass == HeroClass.DUELIST && wasEnemy){
-			Buff.append( this, Sai.ComboStrikeTracker.class).addHit();
+			Buff.affect( this, Sai.ComboStrikeTracker.class).addHit();
 		}
 
 		return hit;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Shopkeeper.java
Patch:
@@ -172,7 +172,9 @@ public void call() {
 				options[i++] = Messages.get(Shopkeeper.this, "sell");
 				options[i++] = Messages.get(Shopkeeper.this, "talk");
 				for (Item item : buybackItems){
-					options[i++] = Messages.get(Heap.class, "for_sale", item.value(), Messages.titleCase(item.title()));
+					options[i] = Messages.get(Heap.class, "for_sale", item.value(), Messages.titleCase(item.title()));
+					if (options[i].length() > 26) options[i] = options[i].substring(0, 23) + "...";
+					i++;
 				}
 				GameScene.show(new WndOptions(sprite(), Messages.titleCase(name()), description(), options){
 					@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/HandAxe.java
Patch:
@@ -68,7 +68,7 @@ public float abilityChargeUse(Hero hero, Char target) {
 
 	@Override
 	protected void duelistAbility(Hero hero, Integer target) {
-		Mace.heavyBlowAbility(hero, target, 0.45f, this);
+		Mace.heavyBlowAbility(hero, target, 1.45f, this);
 	}
 
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
Patch:
@@ -679,7 +679,7 @@ public static int onAttackProc( Hero hero, Char enemy, int dmg ){
 			Buff.affect(enemy, SuckerPunchTracker.class);
 		}
 
-		if (hero.hasTalent(Talent.FOLLOWUP_STRIKE)) {
+		if (hero.hasTalent(Talent.FOLLOWUP_STRIKE) && enemy.alignment == Char.Alignment.ENEMY) {
 			if (hero.belongings.attackingWeapon() instanceof MissileWeapon) {
 				Buff.prolong(hero, FollowupStrikeTracker.class, 5f).object = enemy.id();
 			} else if (hero.buff(FollowupStrikeTracker.class) != null
@@ -704,7 +704,7 @@ public static int onAttackProc( Hero hero, Char enemy, int dmg ){
 			}
 		}
 
-		if (hero.hasTalent(DEADLY_FOLLOWUP)) {
+		if (hero.hasTalent(DEADLY_FOLLOWUP) && enemy.alignment == Char.Alignment.ENEMY) {
 			if (hero.belongings.attackingWeapon() instanceof MissileWeapon) {
 				if (!(hero.belongings.attackingWeapon() instanceof SpiritBow.SpiritArrow)) {
 					Buff.prolong(hero, DeadlyFollowupTracker.class, 5f).object = enemy.id();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/BeaconOfReturning.java
Patch:
@@ -142,7 +142,9 @@ private void returnBeacon( Hero hero ){
 				}
 			}
 
-			if (!ScrollOfTeleportation.teleportToLocation(hero, returnPos)){
+			if (ScrollOfTeleportation.teleportToLocation(hero, returnPos)){
+				hero.spendAndNext( 1f );
+			} else {
 				return;
 			}
 
@@ -161,7 +163,6 @@ private void returnBeacon( Hero hero ){
 			InterlevelScene.returnPos = returnPos;
 			Game.switchScene( InterlevelScene.class );
 		}
-		hero.spendAndNext( 1f );
 		detach(hero.belongings.backpack);
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTransmutation.java
Patch:
@@ -201,7 +201,8 @@ private static Weapon changeWeapon( Weapon w ) {
 		do {
 			n = (Weapon)Generator.random(c);
 		} while (Challenges.isItemBlocked(n) || n.getClass() == w.getClass());
-		
+
+		n.level(0);
 		int level = w.trueLevel();
 		if (level > 0) {
 			n.upgrade( level );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Momentum.java
Patch:
@@ -133,7 +133,7 @@ public int icon() {
 	
 	@Override
 	public void tintIcon(Image icon) {
-		if (freerunCooldown == 0){
+		if (freerunCooldown == 0 || freerunTurns > 0){
 			icon.hardlight(1,1,0);
 		} else {
 			icon.hardlight(0.5f,0.5f,1);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Whip.java
Patch:
@@ -83,7 +83,7 @@ protected void duelistAbility(Hero hero, Integer target) {
 			public void call() {
 				beforeAbilityUsed(hero, finalClosest);
 				for (Char ch : targets) {
-					hero.attack(ch, 0, 1, ch == finalClosest ? Char.INFINITE_ACCURACY : 1);
+					hero.attack(ch, 1, 0, ch == finalClosest ? Char.INFINITE_ACCURACY : 1);
 					if (!ch.isAlive()){
 						onAbilityKill(hero, ch);
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Wraith.java
Patch:
@@ -104,7 +104,7 @@ public static Wraith spawnAt( int pos, boolean allowExotic ) {
 		if ((!Dungeon.level.solid[pos] || Dungeon.level.passable[pos]) && Actor.findChar( pos ) == null) {
 
 			Wraith w;
-			if (allowExotic && Random.Int(1) == 0){
+			if (allowExotic && Random.Int(100) == 0){
 				w = new TormentedSpirit();
 			} else {
 				w = new Wraith();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1257,7 +1257,7 @@ public void rest( boolean fullRest ) {
 			Buff.affect(this, HoldFast.class).pos = pos;
 		}
 		if (hasTalent(Talent.PATIENT_STRIKE)){
-			Buff.prolong(this, Talent.PatientStrikeTracker.class, cooldown());
+			Buff.affect(Dungeon.hero, Talent.PatientStrikeTracker.class).pos = Dungeon.hero.pos;
 		}
 		if (!fullRest) {
 			if (sprite != null) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Toolbar.java
Patch:
@@ -260,7 +260,7 @@ protected void onClick() {
 							Buff.affect(Dungeon.hero, HoldFast.class).pos = Dungeon.hero.pos;
 						}
 						if (Dungeon.hero.hasTalent(Talent.PATIENT_STRIKE)){
-							Buff.prolong(Dungeon.hero, Talent.PatientStrikeTracker.class, Dungeon.hero.cooldown());
+							Buff.affect(Dungeon.hero, Talent.PatientStrikeTracker.class).pos = Dungeon.hero.pos;
 						}
 						Dungeon.hero.next();
 					} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/ItemSprite.java
Patch:
@@ -106,6 +106,7 @@ public void link( Heap heap ) {
 		this.heap = heap;
 		view(heap);
 		renderShadow = true;
+		visible = heap.seen;
 		place(heap.pos);
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/WelcomeScene.java
Patch:
@@ -259,7 +259,7 @@ private void updateVersion(int previousVersion){
 					} catch (Exception e) {
 						//if we encounter a fatal per-record error, then clear that record's data
 						rec.gameData = null;
-						ShatteredPixelDungeon.reportException(e);
+						Game.reportException( new RuntimeException("Rankings Updating Failed!",e));
 					}
 				}
 				if (Rankings.INSTANCE.latestDaily != null){
@@ -269,15 +269,15 @@ private void updateVersion(int previousVersion){
 					} catch (Exception e) {
 						//if we encounter a fatal per-record error, then clear that record's data
 						Rankings.INSTANCE.latestDaily.gameData = null;
-						ShatteredPixelDungeon.reportException(e);
+						Game.reportException( new RuntimeException("Rankings Updating Failed!",e));
 					}
 				}
 				Collections.sort(Rankings.INSTANCE.records, Rankings.scoreComparator);
 				Rankings.INSTANCE.save();
 			} catch (Exception e) {
 				//if we encounter a fatal error, then just clear the rankings
 				FileUtils.deleteFile( Rankings.RANKINGS_FILE );
-				ShatteredPixelDungeon.reportException(e);
+				Game.reportException( new RuntimeException("Rankings Updating Failed!",e));
 			}
 			Dungeon.daily = Dungeon.dailyReplay = false;
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndRanking.java
Patch:
@@ -88,7 +88,7 @@ public WndRanking( final Rankings.Record rec ) {
 			Rankings.INSTANCE.loadGameData( rec );
 			createControls();
 		} catch ( Exception e ) {
-			Game.reportException(e);
+			Game.reportException( new RuntimeException("Rankings Display Failed!",e));
 			Dungeon.hero = null;
 			createControls();
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Toolbar.java
Patch:
@@ -373,6 +373,7 @@ protected void createChildren() {
 			protected void layout() {
 				super.layout();
 				ind.fill(this);
+				bringToFront(ind);
 
 				arrow.x = left() + (width - arrow.width())/2;
 				arrow.y = bottom()-arrow.height-1;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/BeaconOfReturning.java
Patch:
@@ -25,6 +25,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Invisibility;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Pushing;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfTeleportation;
@@ -153,6 +154,7 @@ private void returnBeacon( Hero hero ){
 			}
 
 			Level.beforeTransition();
+			Invisibility.dispel();
 			InterlevelScene.mode = InterlevelScene.Mode.RETURN;
 			InterlevelScene.returnDepth = returnDepth;
 			InterlevelScene.returnBranch = returnBranch;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/FeatherFall.java
Patch:
@@ -24,6 +24,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Invisibility;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Speck;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfLevitation;
@@ -51,6 +52,7 @@ protected void onCast(Hero hero) {
 		
 		detach( curUser.belongings.backpack );
 		updateQuickslot();
+		Invisibility.dispel();
 		hero.spendAndNext( 1f );
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/SummonElemental.java
Patch:
@@ -27,6 +27,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.AllyBuff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Invisibility;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.SpiritHawk;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Elemental;
@@ -113,6 +114,8 @@ protected void onCast(Hero hero) {
 			elemental.setSummonedALly();
 			elemental.HP = elemental.HT;
 			ScrollOfTeleportation.appear( elemental, Random.element(spawnPoints) );
+			Invisibility.dispel(curUser);
+			curUser.sprite.operate(curUser.pos);
 			curUser.spendAndNext(Actor.TICK);
 
 			summonClass = Elemental.AllyNewBornElemental.class;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/DisintegrationTrap.java
Patch:
@@ -55,6 +55,7 @@ public void activate() {
 		if (target == null){
 			float closestDist = Float.MAX_VALUE;
 			for (Char ch : Actor.chars()){
+				if (!ch.isAlive()) continue;
 				float curDist = Dungeon.level.trueDistance(pos, ch.pos);
 				if (ch.invisible > 0) curDist += 1000;
 				Ballistica bolt = new Ballistica(pos, ch.pos, Ballistica.PROJECTILE);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/GrimTrap.java
Patch:
@@ -65,6 +65,7 @@ protected boolean act() {
 				if (target == null){
 					float closestDist = Float.MAX_VALUE;
 					for (Char ch : Actor.chars()){
+						if (!ch.isAlive()) continue;
 						float curDist = Dungeon.level.trueDistance(pos, ch.pos);
 						if (ch.invisible > 0) curDist += 1000;
 						Ballistica bolt = new Ballistica(pos, ch.pos, Ballistica.PROJECTILE);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/PoisonDartTrap.java
Patch:
@@ -77,6 +77,7 @@ protected boolean act() {
 				if (target == null){
 					float closestDist = Float.MAX_VALUE;
 					for (Char ch : Actor.chars()){
+						if (!ch.isAlive()) continue;
 						float curDist = Dungeon.level.trueDistance(pos, ch.pos);
 						if (ch.invisible > 0) curDist += 1000;
 						Ballistica bolt = new Ballistica(pos, ch.pos, Ballistica.PROJECTILE);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/WornDartTrap.java
Patch:
@@ -62,6 +62,7 @@ protected boolean act() {
 				if (target == null){
 					float closestDist = Float.MAX_VALUE;
 					for (Char ch : Actor.chars()){
+						if (!ch.isAlive()) continue;
 						float curDist = Dungeon.level.trueDistance(pos, ch.pos);
 						if (ch.invisible > 0) curDist += 1000;
 						Ballistica bolt = new Ballistica(pos, ch.pos, Ballistica.PROJECTILE);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -526,6 +526,8 @@ public static boolean hit( Char attacker, Char defender, float accMulti, boolean
 
 		if (defender.buff(MonkEnergy.MonkAbility.Focus.FocusBuff.class) != null && !magic){
 			defStat = INFINITE_EVASION;
+			defender.buff(MonkEnergy.MonkAbility.Focus.FocusBuff.class).detach();
+			Buff.affect(defender, MonkEnergy.MonkAbility.Focus.FocusActivation.class, 0);
 		}
 
 		//if accuracy or evasion are large enough, treat them as infinite.

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -548,8 +548,8 @@ public String defenseVerb() {
 			return Messages.get(RoundShield.GuardTracker.class, "guarded");
 		}
 
-		if (buff(MonkEnergy.MonkAbility.Focus.FocusBuff.class) != null){
-			buff(MonkEnergy.MonkAbility.Focus.FocusBuff.class).detach();
+		if (buff(MonkEnergy.MonkAbility.Focus.FocusActivation.class) != null){
+			buff(MonkEnergy.MonkAbility.Focus.FocusActivation.class).detach();
 			if (sprite != null && sprite.visible) {
 				Sample.INSTANCE.play(Assets.Sounds.HIT_PARRY, 1, Random.Float(0.96f, 1.05f));
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/Ratmogrify.java
Patch:
@@ -213,6 +213,9 @@ public void setup(Mob original) {
 		}
 
 		public Mob getOriginal(){
+			original.HP = HP;
+			original.pos = pos;
+			original.clearTime();
 			return original;
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Icons.java
Patch:
@@ -221,10 +221,10 @@ public static Image get( Icons type ) {
 				icon.frame( icon.texture.uvRectBySize( 208, 32, 15, 10 ) );
 				break;
 			case LEFTARROW:
-				icon.frame( icon.texture.uvRectBySize( 224, 32, 14, 8 ) );
+				icon.frame( icon.texture.uvRectBySize( 224, 32, 14, 9 ) );
 				break;
 			case RIGHTARROW:
-				icon.frame( icon.texture.uvRectBySize( 240, 32, 14, 8 ) );
+				icon.frame( icon.texture.uvRectBySize( 240, 32, 14, 9 ) );
 				break;
 			case CALENDAR:
 				icon.frame( icon.texture.uvRectBySize( 240, 16, 15, 12 ) );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/AlchemistsToolkit.java
Patch:
@@ -146,7 +146,7 @@ protected Image getIcon(int index) {
 	@Override
 	public String status() {
 		if (isEquipped(Dungeon.hero) && warmUpDelay > 0 && !cursed){
-			return Messages.format( "%d%%", 100 - (int)warmUpDelay );
+			return Messages.format( "%d%%", Math.max(0, 100 - (int)warmUpDelay) );
 		} else {
 			return super.status();
 		}
@@ -221,12 +221,12 @@ public class kitEnergy extends ArtifactBuff {
 		@Override
 		public boolean act() {
 
-			if (warmUpDelay > 0 && !cursed && target.buff(MagicImmune.class) == null){
+			if (warmUpDelay > 0){
 				if (level() == 10){
 					warmUpDelay = 0;
 				} else if (warmUpDelay == 101){
 					warmUpDelay = 100f;
-				} else {
+				} else if (!cursed && target.buff(MagicImmune.class) == null) {
 					float turnsToWarmUp = (int) Math.pow(10 - level(), 2);
 					warmUpDelay -= 100 / turnsToWarmUp;
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -730,7 +730,7 @@ public void damage( int dmg, Object src ) {
 		shielded -= dmg;
 		HP -= dmg;
 
-		if (HP < 0 && src instanceof Char){
+		if (HP < 0 && src instanceof Char && alignment == Alignment.ENEMY){
 			if (((Char) src).buff(Kinetic.KineticTracker.class) != null){
 				int dmgToAdd = -HP;
 				dmgToAdd -= ((Char) src).buff(Kinetic.KineticTracker.class).conservedDamage;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Bleeding.java
Patch:
@@ -116,7 +116,7 @@ public boolean act() {
 				}
 
 				if (source == Sickle.HarvestBleedTracker.class && !target.isAlive()){
-					MeleeWeapon.onAbilityKill(Dungeon.hero);
+					MeleeWeapon.onAbilityKill(Dungeon.hero, target);
 				}
 				
 				spend( TICK );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/quest/Pickaxe.java
Patch:
@@ -214,7 +214,7 @@ public void call() {
 					if (enemy.isAlive()) {
 						Buff.affect(enemy, Vulnerable.class, 3f);
 					} else {
-						onAbilityKill(hero);
+						onAbilityKill(hero, enemy);
 					}
 					Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Flail.java
Patch:
@@ -74,7 +74,7 @@ public float accuracyFactor(Char owner, Char target) {
 				@Override
 				protected boolean act() {
 					if (owner instanceof Hero && !target.isAlive()){
-						onAbilityKill((Hero)owner);
+						onAbilityKill((Hero)owner, target);
 					}
 					Actor.remove(this);
 					return true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Greataxe.java
Patch:
@@ -93,7 +93,7 @@ public void call() {
 				if (hero.attack(enemy, 1.35f, 0, Char.INFINITE_ACCURACY)){
 					Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 					if (!enemy.isAlive()){
-						onAbilityKill(hero);
+						onAbilityKill(hero, enemy);
 					}
 				}
 				Invisibility.dispel();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Mace.java
Patch:
@@ -94,7 +94,7 @@ public void call() {
 						Buff.affect(enemy, Vulnerable.class, 5f);
 						Buff.affect(enemy, Weakness.class, 5f);
 					} else {
-						wep.onAbilityKill(hero);
+						wep.onAbilityKill(hero, enemy);
 					}
 				}
 				Invisibility.dispel();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MeleeWeapon.java
Patch:
@@ -253,8 +253,8 @@ protected void afterAbilityUsed( Hero hero ){
 		}
 	}
 
-	public static void onAbilityKill( Hero hero ){
-		if (hero.hasTalent(Talent.LETHAL_HASTE)){
+	public static void onAbilityKill( Hero hero, Char killed ){
+		if (killed.alignment == Char.Alignment.ENEMY && hero.hasTalent(Talent.LETHAL_HASTE)){
 			//effectively 2/3 turns of haste
 			Buff.prolong(hero, Haste.class, 1.67f+hero.pointsInTalent(Talent.LETHAL_HASTE));
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Rapier.java
Patch:
@@ -130,7 +130,7 @@ public void call() {
 							if (hero.attack(enemy, dmgMulti, dmgBoost, Char.INFINITE_ACCURACY)) {
 								Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 								if (!enemy.isAlive()) {
-									wep.onAbilityKill(hero);
+									wep.onAbilityKill(hero, enemy);
 								}
 							}
 							Invisibility.dispel();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/RunicBlade.java
Patch:
@@ -91,7 +91,7 @@ public void call() {
 				if (hero.attack(enemy, 1f, 0, Char.INFINITE_ACCURACY)){
 					Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 					if (!enemy.isAlive()){
-						onAbilityKill(hero);
+						onAbilityKill(hero, enemy);
 					}
 				}
 				tracker.detach();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sai.java
Patch:
@@ -98,7 +98,7 @@ public void call() {
 
 				boolean hit = hero.attack(enemy, 1f + boostPerHit*recentHits, 0, Char.INFINITE_ACCURACY);
 				if (hit && !enemy.isAlive()){
-					wep.onAbilityKill(hero);
+					wep.onAbilityKill(hero, enemy);
 				}
 
 				Invisibility.dispel();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sickle.java
Patch:
@@ -97,7 +97,7 @@ public void call() {
 				Invisibility.dispel();
 				hero.spendAndNext(hero.attackDelay());
 				if (!enemy.isAlive()){
-					wep.onAbilityKill(hero);
+					wep.onAbilityKill(hero, enemy);
 					Buff.prolong(hero, Sword.CleaveTracker.class, 5f);
 				} else {
 					if (hero.buff(Sword.CleaveTracker.class) != null) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Spear.java
Patch:
@@ -97,7 +97,7 @@ public void call() {
 						//knock them back along that ballistica
 						WandOfBlastWave.throwChar(enemy, trajectory, 1, true, false, hero.getClass());
 					} else {
-						wep.onAbilityKill(hero);
+						wep.onAbilityKill(hero, enemy);
 					}
 					Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sword.java
Patch:
@@ -97,7 +97,7 @@ public void call() {
 				Invisibility.dispel();
 				hero.spendAndNext(hero.attackDelay());
 				if (!enemy.isAlive()){
-					wep.onAbilityKill(hero);
+					wep.onAbilityKill(hero, enemy);
 					Buff.prolong(hero, CleaveTracker.class, 5f);
 				} else {
 					if (hero.buff(CleaveTracker.class) != null) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Whip.java
Patch:
@@ -81,7 +81,7 @@ public void call() {
 				for (Char ch : targets) {
 					hero.attack(ch);
 					if (!ch.isAlive()){
-						onAbilityKill(hero);
+						onAbilityKill(hero, ch);
 					}
 				}
 				Invisibility.dispel();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/darts/Dart.java
Patch:
@@ -176,7 +176,7 @@ protected void processChargedShot( Char target, int dmg ){
 						@Override
 						protected boolean act() {
 							if (!ch.isAlive()){
-								bow.onAbilityKill(Dungeon.hero);
+								bow.onAbilityKill(Dungeon.hero, ch);
 							}
 							Actor.remove(this);
 							return true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/Weapon.java
Patch:
@@ -76,9 +76,9 @@ abstract public class Weapon extends KindOfWeapon {
 	public int      RCH = 1;    // Reach modifier (only applies to melee hits)
 
 	public enum Augment {
-		SPEED   (0.7f, 0.6667f),
-		DAMAGE  (1.5f, 1.6667f),
-		NONE	(1.0f, 1.0000f);
+		SPEED   (0.7f, 2/3f),
+		DAMAGE  (1.5f, 5/3f),
+		NONE	(1.0f, 1f);
 
 		private float damageFactor;
 		private float delayFactor;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Necromancer.java
Patch:
@@ -315,6 +315,7 @@ public boolean act(boolean enemyInFOV, boolean justAlerted) {
 							if (Actor.findChar(enemy.pos+c) == null
 									&& Dungeon.level.passable[enemy.pos+c]
 									&& fieldOfView[enemy.pos+c]
+									&& (Dungeon.level.openSpace[enemy.pos+c] || !Char.hasProp(mySkeleton, Property.LARGE))
 									&& Dungeon.level.trueDistance(pos, enemy.pos+c) < Dungeon.level.trueDistance(pos, telePos)){
 								telePos = enemy.pos+c;
 							}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/PitfallTrap.java
Patch:
@@ -53,7 +53,7 @@ public void activate() {
 			return;
 		}
 
-		DelayedPit p = Buff.affect(Dungeon.hero, DelayedPit.class, 1);
+		DelayedPit p = Buff.append(Dungeon.hero, DelayedPit.class, 1);
 		p.depth = Dungeon.depth;
 		p.pos = pos;
 
@@ -105,6 +105,7 @@ public boolean act() {
 						}
 						heap.sprite.kill();
 						GameScene.discard(heap);
+						heap.sprite.drop();
 						Dungeon.level.heaps.remove(cell);
 					}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Eye.java
Patch:
@@ -96,7 +96,7 @@ protected boolean canAttack( Char enemy ) {
 			if (enemy.invisible == 0 && !isCharmedBy(enemy) && fieldOfView[enemy.pos]
 					&& (super.canAttack(enemy) || aim.subPath(1, aim.dist).contains(enemy.pos))){
 				beam = aim;
-				beamTarget = aim.collisionPos;
+				beamTarget = enemy.pos;
 				return true;
 			} else {
 				//if the beam is charged, it has to attack, will aim at previous location of target.

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Momentum.java
Patch:
@@ -70,6 +70,7 @@ public boolean act() {
 		if (freerunCooldown == 0 && !freerunning() && target.invisible > 0 && Dungeon.hero.pointsInTalent(Talent.SPEEDY_STEALTH) >= 1){
 			momentumStacks = Math.min(momentumStacks + 2, 10);
 			movedLastTurn = true;
+			ActionIndicator.refresh();
 		}
 
 		if (freerunTurns > 0){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/duelist/Challenge.java
Patch:
@@ -29,6 +29,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Doom;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Invisibility;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.ArmorAbility;
@@ -175,6 +176,7 @@ protected void activate(ClassArmor armor, Hero hero, Integer target) {
 
 		armor.charge -= chargeUse( hero );
 		armor.updateQuickslot();
+		Invisibility.dispel();
 		hero.sprite.zap(target);
 
 		hero.next();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/duelist/Feint.java
Patch:
@@ -29,6 +29,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Haste;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Invisibility;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Vulnerable;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent;
@@ -97,6 +98,7 @@ public void call() {
 				}
 				hero.pos = target;
 				Dungeon.level.occupyCell(hero);
+				Invisibility.dispel();
 				hero.spendAndNext(1f);
 			}
 		});

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DwarfKing.java
Patch:
@@ -690,7 +690,7 @@ public boolean act() {
 
 		@Override
 		public void fx(boolean on) {
-			if (on && particles == null) {
+			if (on && (particles == null || particles.parent == null)) {
 				particles = CellEmitter.get(pos);
 
 				if (summon == DKGolem.class){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/AmuletScene.java
Patch:
@@ -70,7 +70,6 @@ public void create() {
 		if (!noText) {
 			text = renderTextBlock( Messages.get(this, "text"), 8 );
 			text.maxWidth( PixelScene.landscape() ? 2*WIDTH-4 : WIDTH);
-			add( text );
 		}
 		
 		amulet = new Image( Assets.Sprites.AMULET );
@@ -137,6 +136,7 @@ protected void onClick() {
 
 			text.setPos((Camera.main.width - text.width()) / 2, amulet.y + amulet.height + LARGE_GAP);
 			align(text);
+			add(text);
 			
 			btnExit.setPos( (Camera.main.width - btnExit.width()) / 2, text.top() + text.height() + LARGE_GAP );
 			btnStay.setPos( btnExit.left(), btnExit.bottom() + SMALL_GAP );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/ActionIndicator.java
Patch:
@@ -96,10 +96,12 @@ public synchronized void update() {
 
 		if (needsRefresh){
 			if (primaryVis != null) {
+				primaryVis.destroy();
 				primaryVis.killAndErase();
 				primaryVis = null;
 			}
 			if (secondVis != null){
+				secondVis.destroy();
 				secondVis.killAndErase();
 				secondVis = null;
 			}
@@ -112,11 +114,11 @@ public synchronized void update() {
 					add(secondVis);
 				}
 
-				needsRefresh = true;
 				setColor(action.indicatorColor());
 			}
 
 			layout();
+			needsRefresh = false;
 		}
 
 		if (!Dungeon.hero.ready){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
Patch:
@@ -658,7 +658,9 @@ public static int onAttackProc( Hero hero, Char enemy, int dmg ){
 
 		if (hero.hasTalent(DEADLY_FOLLOWUP)) {
 			if (hero.belongings.attackingWeapon() instanceof MissileWeapon) {
-				Buff.prolong(enemy, DeadlyFollowupTracker.class, 5f);
+				if (!(hero.belongings.attackingWeapon() instanceof SpiritBow.SpiritArrow)) {
+					Buff.prolong(enemy, DeadlyFollowupTracker.class, 5f);
+				}
 			} else if (enemy.buff(DeadlyFollowupTracker.class) != null){
 				dmg = Math.round(dmg * (1.0f + .08f*hero.pointsInTalent(DEADLY_FOLLOWUP)));
 				if (!(enemy instanceof Mob) || !((Mob) enemy).surprisedBy(hero)){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Rapier.java
Patch:
@@ -114,7 +114,7 @@ public void call() {
 				hero.pos = dest;
 				Dungeon.level.occupyCell(hero);
 
-				if (enemy != null) {
+				if (enemy != null && hero.canAttack(enemy)) {
 					hero.sprite.attack(enemy.pos, new Callback() {
 						@Override
 						public void call() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1567,6 +1567,8 @@ else if (path.getLast() != target)
 					Chasm.heroJump(this);
 					interrupt();
 				} else {
+					flying = false;
+					remove(buff(Levitation.class)); //directly remove to prevent cell pressing
 					Chasm.heroFall(target);
 				}
 				canSelfTrample = false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/KindofMisc.java
Patch:
@@ -118,7 +118,7 @@ protected void onSelect(int index) {
 							}
 							if (slot != -1) {
 								Dungeon.quickslot.setSlot(slot, KindofMisc.this);
-							} else if (slotOfUnequipped != -1){
+							} else if (slotOfUnequipped != -1 && defaultAction() != null){
 								Dungeon.quickslot.setSlot(slotOfUnequipped, KindofMisc.this);
 							}
 							updateQuickslot();

File: SPD-classes/src/main/java/com/watabou/input/KeyEvent.java
Patch:
@@ -64,13 +64,13 @@ public static synchronized void addKeyEvent( KeyEvent event ){
 	public static synchronized void processKeyEvents(){
 		for (KeyEvent k : keyEvents){
 			if (KeyBindings.getActionForKey(k) == GameAction.LEFT_CLICK){
-				Game.inputHandler.emulateTouch(PointerEvent.LEFT, k.pressed);
+				Game.inputHandler.emulateTouch(ControllerHandler.CONTROLLER_POINTER_ID, PointerEvent.LEFT, k.pressed);
 				if (KeyBindings.bindingKey) keySignal.dispatch(k);
 			} else if (KeyBindings.getActionForKey(k) == GameAction.RIGHT_CLICK){
-				Game.inputHandler.emulateTouch(PointerEvent.RIGHT, k.pressed);
+				Game.inputHandler.emulateTouch(ControllerHandler.CONTROLLER_POINTER_ID, PointerEvent.RIGHT, k.pressed);
 				if (KeyBindings.bindingKey) keySignal.dispatch(k);
 			} else if (KeyBindings.getActionForKey(k) == GameAction.MIDDLE_CLICK){
-				Game.inputHandler.emulateTouch(PointerEvent.MIDDLE, k.pressed);
+				Game.inputHandler.emulateTouch(ControllerHandler.CONTROLLER_POINTER_ID, PointerEvent.MIDDLE, k.pressed);
 				if (KeyBindings.bindingKey) keySignal.dispatch(k);
 			} else {
 				keySignal.dispatch(k);

File: SPD-classes/src/main/java/com/watabou/noosa/Camera.java
Patch:
@@ -51,7 +51,7 @@ public class Camera extends Gizmo {
 	
 	public float[] matrix;
 
-	public boolean scrollable = false;
+	public PointF edgeScroll;
 	public PointF scroll;
 	public PointF centerOffset;
 	
@@ -122,7 +122,8 @@ public Camera( int x, int y, int width, int height, float zoom ) {
 		
 		screenWidth = (int)(width * zoom);
 		screenHeight = (int)(height * zoom);
-		
+
+		edgeScroll = new PointF();
 		scroll = new PointF();
 		centerOffset = new PointF();
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/CellSelector.java
Patch:
@@ -176,7 +176,7 @@ public void select( int cell, int button ) {
 	
 	@Override
 	protected void onPointerDown( PointerEvent event ) {
-
+		camera.edgeScroll.set(-1);
 		if (event != curEvent && another == null) {
 					
 			if (curEvent.type == PointerEvent.Type.UP) {
@@ -199,6 +199,7 @@ protected void onPointerDown( PointerEvent event ) {
 	
 	@Override
 	protected void onPointerUp( PointerEvent event ) {
+		camera.edgeScroll.set(1);
 		if (pinching && (event == curEvent || event == another)) {
 			
 			pinching = false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -211,7 +211,7 @@ public void create() {
 		
 		super.create();
 		Camera.main.zoom( GameMath.gate(minZoom, defaultZoom + SPDSettings.zoom(), maxZoom));
-		Camera.main.scrollable = true;
+		Camera.main.edgeScroll.set(1);
 
 		switch (SPDSettings.cameraFollow()) {
 			case 4: default:    Camera.main.setFollowDeadzone(0);      break;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/PixelScene.java
Patch:
@@ -238,7 +238,9 @@ public boolean onSignal(KeyEvent keyEvent) {
 				}
 
 				cameraShift.invScale(Camera.main.zoom);
-				if (cameraShift.length() > 0 && Camera.main.scrollable){
+				cameraShift.x *= Camera.main.edgeScroll.x;
+				cameraShift.y *= Camera.main.edgeScroll.y;
+				if (cameraShift.length() > 0){
 					Camera.main.shift(cameraShift);
 				}
 				ControllerHandler.updateControllerPointer(virtualCursorPos, true);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/MonkEnergy.java
Patch:
@@ -234,7 +234,7 @@ public void abilityUsed( MonkAbility abil ){
 
 	public boolean abilitiesEmpowered( Hero hero ){
 		//100%/80%/60% energy at +1/+2/+3
-		return energy/energyCap() >= 1.15f - 0.2f*hero.pointsInTalent(Talent.MONASTIC_VIGOR);
+		return energy/energyCap() >= 1.2f - 0.2f*hero.pointsInTalent(Talent.MONASTIC_VIGOR);
 	}
 
 	public void processCombinedEnergy(Talent.CombinedEnergyAbilityTracker tracker){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/RenderedTextBlock.java
Patch:
@@ -237,7 +237,7 @@ protected synchronized void layout() {
 					j++;
 				}
 
-				if ((x - this.x) + fullWidth > maxWidth && !curLine.isEmpty()){
+				if ((x - this.x) + fullWidth - 0.001f > maxWidth && !curLine.isEmpty()){
 					y += height+2f;
 					x = this.x;
 					nLines++;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/SpiritBow.java
Patch:
@@ -338,7 +338,7 @@ public float accuracyFactor(Char owner, Char target) {
 		
 		@Override
 		public int STRReq(int lvl) {
-			return SpiritBow.this.STRReq(lvl);
+			return SpiritBow.this.STRReq();
 		}
 
 		@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/duelist/ElementalStrike.java
Patch:
@@ -407,8 +407,9 @@ private void perCharEffect(ConeAOE cone, Hero hero, Char primaryTarget, Weapon.E
 		//*** Lucky ***
 		} else if (ench instanceof Lucky){
 			for (Char ch : affected){
-				if (Random.Float() < 0.1f*powerMulti &&
-						ch.buff(ElementalStrikeLuckyTracker.class) == null) {
+				if (ch.alignment == Char.Alignment.ENEMY
+						&& Random.Float() < 0.1f*powerMulti
+						&& ch.buff(ElementalStrikeLuckyTracker.class) == null) {
 					Dungeon.level.drop(Lucky.genLoot(), ch.pos).sprite.drop();
 					Lucky.showFlare(ch.sprite);
 					Buff.affect(ch, ElementalStrikeLuckyTracker.class);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1151,7 +1151,7 @@ private boolean actTransition(HeroAction.LvlTransition action ) {
 			Camera.main.shake(1, 1f);
 			ready();
 			return false;
-		} else if (transition != null && transition.inside(pos)) {
+		} else if (!Dungeon.level.locked && transition != null && transition.inside(pos)) {
 
 			if (transition.type == LevelTransition.Type.SURFACE){
 				if (belongings.getItem( Amulet.class ) == null) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/LifeLink.java
Patch:
@@ -43,7 +43,7 @@ public class LifeLink extends FlavourBuff {
 	public void detach() {
 		super.detach();
 		Char ch = (Char)Actor.findById(object);
-		if (!target.isAlive() && ch != null){
+		if (!target.isActive() && ch != null){
 			for (LifeLink l : ch.buffs(LifeLink.class)){
 				if (l.object == target.id()){
 					l.detach();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -587,7 +587,7 @@ public void onSelect( Integer target ) {
 						Sample.INSTANCE.play(Assets.Sounds.CHARGEUP);
 						ScrollOfRecharging.charge(curUser);
 						updateQuickslot();
-						curUser.spend(Actor.TICK);
+						curUser.spendAndNext(Actor.TICK);
 						return;
 					}
 					GLog.i( Messages.get(Wand.class, "self_target") );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -575,7 +575,7 @@ public void onSelect( Integer target ) {
 					if (target == curUser.pos && curUser.hasTalent(Talent.SHIELD_BATTERY)){
 
 						if (curUser.buff(MagicImmune.class) != null){
-							GLog.w( Messages.get(this, "no_magic") );
+							GLog.w( Messages.get(Wand.class, "no_magic") );
 							return;
 						}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MeleeWeapon.java
Patch:
@@ -46,6 +46,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
 import com.shatteredpixel.shatteredpixeldungeon.ui.ActionIndicator;
+import com.shatteredpixel.shatteredpixeldungeon.ui.AttackIndicator;
 import com.shatteredpixel.shatteredpixeldungeon.ui.HeroIcon;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
 import com.watabou.noosa.Image;
@@ -577,6 +578,7 @@ public void doAction() {
 
 			ActionIndicator.setAction(this);
 			Item.updateQuickslot();
+			AttackIndicator.updateState();
 		}
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Eye.java
Patch:
@@ -125,7 +125,7 @@ protected boolean act() {
 	@Override
 	protected boolean doAttack( Char enemy ) {
 
-		beam = new Ballistica(pos, enemy.pos, Ballistica.STOP_SOLID);
+		beam = new Ballistica(pos, beamTarget, Ballistica.STOP_SOLID);
 		if (beamCooldown > 0 || (!beamCharged && !beam.subPath(1, beam.dist).contains(enemy.pos))) {
 			return super.doAttack(enemy);
 		} else if (!beamCharged){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Flail.java
Patch:
@@ -160,7 +160,7 @@ public float iconFadePercent() {
 
 		@Override
 		public String desc() {
-			return Messages.get(this, "desc", (spins/3f)*100f, dispTurns());
+			return Messages.get(this, "desc", (int)Math.round((spins/3f)*100f), dispTurns());
 		}
 
 		public static String SPINS = "spins";

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Eye.java
Patch:
@@ -69,7 +69,7 @@ public class Eye extends Mob {
 
 	@Override
 	public int damageRoll() {
-		return Random.NormalIntRange(0, 0);
+		return Random.NormalIntRange(20, 30);
 	}
 
 	@Override
@@ -184,7 +184,7 @@ public void deathGaze(){
 			}
 
 			if (hit( this, ch, true )) {
-				int dmg = Random.NormalIntRange( 0, 0 );
+				int dmg = Random.NormalIntRange( 30, 50 );
 				dmg = Math.round(dmg * AscensionChallenge.statModifier(this));
 				ch.damage( dmg, new DeathGaze() );
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Eye.java
Patch:
@@ -69,7 +69,7 @@ public class Eye extends Mob {
 
 	@Override
 	public int damageRoll() {
-		return Random.NormalIntRange(20, 30);
+		return Random.NormalIntRange(0, 0);
 	}
 
 	@Override
@@ -126,7 +126,7 @@ protected boolean act() {
 	protected boolean doAttack( Char enemy ) {
 
 		beam = new Ballistica(pos, enemy.pos, Ballistica.STOP_SOLID);
-		if (beamCooldown > 0 || !beam.subPath(1, beam.dist).contains(enemy.pos)) {
+		if (beamCooldown > 0 || (!beamCharged && !beam.subPath(1, beam.dist).contains(enemy.pos))) {
 			return super.doAttack(enemy);
 		} else if (!beamCharged){
 			((EyeSprite)sprite).charge( enemy.pos );
@@ -184,7 +184,7 @@ public void deathGaze(){
 			}
 
 			if (hit( this, ch, true )) {
-				int dmg = Random.NormalIntRange( 30, 50 );
+				int dmg = Random.NormalIntRange( 0, 0 );
 				dmg = Math.round(dmg * AscensionChallenge.statModifier(this));
 				ch.damage( dmg, new DeathGaze() );
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -570,7 +570,7 @@ public int drRoll() {
 			}
 			if (armDr > 0) dr += armDr;
 		}
-		if (belongings.weapon() != null)  {
+		if (belongings.weapon() != null && !RingOfForce.fightingUnarmed(this))  {
 			int wepDr = Random.NormalIntRange( 0 , belongings.weapon().defenseFactor( this ) );
 			if (STR() < ((Weapon)belongings.weapon()).STRReq()){
 				wepDr -= 2*(((Weapon)belongings.weapon()).STRReq() - STR());

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/GnollTrickster.java
Patch:
@@ -66,8 +66,8 @@ public int attackSkill( Char target ) {
 
 	@Override
 	protected boolean canAttack( Char enemy ) {
-		Ballistica attack = new Ballistica( pos, enemy.pos, Ballistica.PROJECTILE);
-		return !Dungeon.level.adjacent(pos, enemy.pos) && attack.collisionPos == enemy.pos;
+		return !Dungeon.level.adjacent( pos, enemy.pos )
+				&& (super.canAttack(enemy) || new Ballistica( pos, enemy.pos, Ballistica.PROJECTILE).collisionPos == enemy.pos);
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Scorpio.java
Patch:
@@ -71,8 +71,8 @@ public int drRoll() {
 	
 	@Override
 	protected boolean canAttack( Char enemy ) {
-		Ballistica attack = new Ballistica( pos, enemy.pos, Ballistica.PROJECTILE);
-		return !Dungeon.level.adjacent( pos, enemy.pos ) && attack.collisionPos == enemy.pos;
+		return !Dungeon.level.adjacent( pos, enemy.pos )
+				&& (super.canAttack(enemy) || new Ballistica( pos, enemy.pos, Ballistica.PROJECTILE).collisionPos == enemy.pos);
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/MonkEnergy.java
Patch:
@@ -226,7 +226,7 @@ public boolean abilitiesEmpowered( Hero hero ){
 	}
 
 	public void processCombinedEnergy(Talent.CombinedEnergyAbilityTracker tracker){
-		energy += tracker.energySpent/3f;
+		energy = Math.min(energy+tracker.energySpent/3f, energyCap());
 		cooldown = 0;
 		tracker.detach();
 		if (energy >= 1){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -2099,7 +2099,9 @@ public void onOperateComplete() {
 		}
 		curAction = null;
 
-		super.onOperateComplete();
+		if (!ready) {
+			super.onOperateComplete();
+		}
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/UnstableSpellbook.java
Patch:
@@ -171,6 +171,7 @@ public void onBackPressed() {
 							//do nothing
 						}
 					});
+					hero.busy();
 				} else {
 					scroll.doRead();
 					Talent.onArtifactUsed(Dungeon.hero);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfBlastWave.java
Patch:
@@ -160,9 +160,9 @@ public void call() {
 				}
 				int oldPos = ch.pos;
 				ch.pos = newPos;
-				if (finalCollided && ch.isAlive()) {
+				if (finalCollided && ch.isActive()) {
 					ch.damage(Random.NormalIntRange(finalDist, 2*finalDist), this);
-					if (ch.isAlive()) {
+					if (ch.isActive()) {
 						Paralysis.prolong(ch, Paralysis.class, 1 + finalDist/2f);
 					} else if (ch == Dungeon.hero){
 						if (cause == WandOfBlastWave.class || cause == AquaBlast.class){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/Noisemaker.java
Patch:
@@ -89,7 +89,7 @@ public boolean act() {
 				}
 			}
 
-			if (bomb == null) {
+			if (bomb == null || bomb.fuse == null) {
 				detach();
 
 			} else if (Actor.findChar(cell) != null)  {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/duelist/ElementalStrike.java
Patch:
@@ -335,7 +335,9 @@ private void perCellEffect(ConeAOE cone, Weapon.Enchantment ench){
 				int terr = Dungeon.level.map[cell];
 				if (terr == Terrain.EMPTY || terr == Terrain.EMBERS || terr == Terrain.EMPTY_DECO ||
 						terr == Terrain.GRASS) {
-					if (grassToPlace > 0){
+					if (grassToPlace > 0
+							&& !Char.hasProp(Actor.findChar(cell), Char.Property.IMMOVABLE)
+							&& Dungeon.level.plants.get(cell) == null){
 						Level.set(cell, highGrassType);
 						grassToPlace--;
 					} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/WelcomeScene.java
Patch:
@@ -276,6 +276,7 @@ private void updateVersion(int previousVersion){
 		if (previousVersion <= ShatteredPixelDungeon.v2_0_0){
 			Badges.loadGlobal();
 			if (Badges.isUnlocked(Badges.Badge.VICTORY) && !Badges.isUnlocked(Badges.Badge.UNLOCK_DUELIST)){
+				Dungeon.customSeedText = ""; //clear in case rankings updating left this set
 				Badges.unlock(Badges.Badge.UNLOCK_DUELIST);
 				Badges.saveGlobal();
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/Weapon.java
Patch:
@@ -289,9 +289,7 @@ public Item upgrade(boolean enchant ) {
 		
 		cursed = false;
 
-		Item result = super.upgrade();
-		Badges.validateDuelistUnlock();
-		return result;
+		return super.upgrade();
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -454,7 +454,7 @@ public boolean attack( Char enemy, float dmgMulti, float dmgBonus, float accMult
 						enemy.damage(-1, this);
 						DeathMark.processFearTheReaper(enemy);
 					}
-					enemy.sprite.showStatus(CharSprite.NEGATIVE, "executed");
+					enemy.sprite.showStatus(CharSprite.NEGATIVE, Messages.get(Talent.CombinedLethalityTriggerTracker.class, "executed"));
 				}
 				buff(Talent.CombinedLethalityTriggerTracker.class).detach();
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/duelist/Challenge.java
Patch:
@@ -33,6 +33,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.ArmorAbility;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.NPC;
 import com.shatteredpixel.shatteredpixeldungeon.effects.CellEmitter;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Speck;
 import com.shatteredpixel.shatteredpixeldungeon.items.Dewdrop;
@@ -156,7 +157,7 @@ protected void activate(ClassArmor armor, Hero hero, Integer target) {
 
 		boolean bossTarget = Char.hasProp(targetCh, Char.Property.BOSS);
 		for (Char toFreeze : Actor.chars()){
-			if (toFreeze != targetCh && toFreeze.alignment != hero.alignment
+			if (toFreeze != targetCh && toFreeze.alignment != Char.Alignment.ALLY && !(toFreeze instanceof NPC)
 				&& (!bossTarget || !(Char.hasProp(targetCh, Char.Property.BOSS) || Char.hasProp(targetCh, Char.Property.BOSS_MINION)))) {
 				Actor.delayChar(toFreeze, DuelParticipant.DURATION);
 				Buff.affect(toFreeze, SpectatorFreeze.class, DuelParticipant.DURATION);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/duelist/Feint.java
Patch:
@@ -53,7 +53,7 @@
 public class Feint extends ArmorAbility {
 
 	{
-		baseChargeUse = 0;
+		baseChargeUse = 50;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/curses/Multiplicity.java
Patch:
@@ -110,8 +110,9 @@ public int proc(Armor armor, Char attacker, Char defender, int damage) {
 					}
 
 					if (!spawnPoints.isEmpty()) {
+						m.pos = Random.element(spawnPoints);
 						GameScene.add(m);
-						ScrollOfTeleportation.appear(m, Random.element(spawnPoints));
+						ScrollOfTeleportation.appear(m, m.pos);
 					}
 				}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/duelist/Feint.java
Patch:
@@ -53,7 +53,7 @@
 public class Feint extends ArmorAbility {
 
 	{
-		baseChargeUse = 50;
+		baseChargeUse = 0;
 	}
 
 	@Override
@@ -126,7 +126,7 @@ public void call() {
 		});
 
 		for (Mob m : Dungeon.level.mobs.toArray( new Mob[0] )){
-			if (m.focusingHero() ||
+			if ((m.isTargeting(hero) && m.state == m.HUNTING) ||
 					(m.alignment == Char.Alignment.ENEMY && m.state != m.PASSIVE && Dungeon.level.distance(m.pos, image.pos) <= 2)){
 				m.aggro(image);
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Elemental.java
Patch:
@@ -149,6 +149,7 @@ private void zap() {
 		spend( 1f );
 
 		Invisibility.dispel(this);
+		Char enemy = this.enemy;
 		if (hit( this, enemy, true )) {
 			
 			rangedProc( enemy );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Shaman.java
Patch:
@@ -112,6 +112,7 @@ private void zap() {
 		spend( 1f );
 
 		Invisibility.dispel(this);
+		Char enemy = this.enemy;
 		if (hit( this, enemy, true )) {
 			
 			if (Random.Int( 2 ) == 0) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Warlock.java
Patch:
@@ -105,6 +105,7 @@ protected void zap() {
 		spend( TIME_TO_ZAP );
 
 		Invisibility.dispel(this);
+		Char enemy = this.enemy;
 		if (hit( this, enemy, true )) {
 			//TODO would be nice for this to work on ghost/statues too
 			if (enemy == Dungeon.hero && Random.Int( 2 ) == 0) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/YogFist.java
Patch:
@@ -314,6 +314,7 @@ protected void zap() {
 			spend( 1f );
 
 			Invisibility.dispel(this);
+			Char enemy = this.enemy;
 			if (hit( this, enemy, true )) {
 
 				Buff.affect( enemy, Roots.class, 3f );
@@ -471,6 +472,7 @@ protected void zap() {
 			spend( 1f );
 
 			Invisibility.dispel(this);
+			Char enemy = this.enemy;
 			if (hit( this, enemy, true )) {
 
 				enemy.damage( Random.NormalIntRange(10, 20), new LightBeam() );
@@ -536,6 +538,7 @@ protected void zap() {
 			spend( 1f );
 
 			Invisibility.dispel(this);
+			Char enemy = this.enemy;
 			if (hit( this, enemy, true )) {
 
 				enemy.damage( Random.NormalIntRange(10, 20), new DarkBolt() );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfWarding.java
Patch:
@@ -331,6 +331,7 @@ private void zap() {
 
 			//always hits
 			int dmg = Random.NormalIntRange( 2 + wandLevel, 8 + 4*wandLevel );
+			Char enemy = this.enemy;
 			enemy.damage( dmg, this );
 			if (enemy.isAlive()){
 				Wand.wandProc(enemy, wandLevel, 1);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
Patch:
@@ -870,8 +870,6 @@ public static void storeTalentsInBundle( Bundle bundle, Hero hero ){
 	static{
 		//v2.0.0
 		renamedTalents.put("ARMSMASTERS_INTUITION",     "VETERANS_INTUITION");
-		//v2.0.0 BETA
-		renamedTalents.put("LIGHTLY_ARMED",             "UNENCUMBERED_SPIRIT");
 	}
 
 	public static void restoreTalentsFromBundle( Bundle bundle, Hero hero ){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
Patch:
@@ -165,7 +165,7 @@ public enum Talent {
 	//Elemental Strike T4
 	ELEMENTAL_REACH(148, 4), STRIKING_FORCE(149, 4), DIRECTED_POWER(150, 4),
 	//Duelist A3 T4
-	FEIGNED_RETREAT(151, 4), EXPOSE_WEAKNESS(152, 4), LASTING_IMAGE(153, 4),
+	FEIGNED_RETREAT(151, 4), EXPOSE_WEAKNESS(152, 4), COUNTER_ABILITY(153, 4),
 
 	//universal T4
 	HEROIC_ENERGY(26, 4), //See icon() and title() for special logic for this one

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/duelist/Feint.java
Patch:
@@ -51,7 +51,7 @@
 public class Feint extends ArmorAbility {
 
 	{
-		baseChargeUse = 0;
+		baseChargeUse = 50;
 	}
 
 	@Override
@@ -136,7 +136,7 @@ public void call() {
 
 	@Override
 	public Talent[] talents() {
-		return new Talent[]{Talent.FEIGNED_RETREAT, Talent.EXPOSE_WEAKNESS, Talent.LASTING_IMAGE, Talent.HEROIC_ENERGY};
+		return new Talent[]{Talent.FEIGNED_RETREAT, Talent.EXPOSE_WEAKNESS, Talent.COUNTER_ABILITY, Talent.HEROIC_ENERGY};
 	}
 
 	public static class AfterImage extends Mob {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
Patch:
@@ -645,7 +645,8 @@ public static int onAttackProc( Hero hero, Char enemy, int dmg ){
 		}
 
 		if (hero.hasTalent(PATIENT_STRIKE)){
-			if (hero.buff(PatientStrikeTracker.class) != null){
+			if (hero.buff(PatientStrikeTracker.class) != null
+					&& !(hero.belongings.attackingWeapon() instanceof MissileWeapon)){
 				hero.buff(PatientStrikeTracker.class).detach();
 				dmg += Random.IntRange(hero.pointsInTalent(Talent.PATIENT_STRIKE), 2);
 				if (!(enemy instanceof Mob) || !((Mob) enemy).surprisedBy(hero)){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/quest/Pickaxe.java
Patch:
@@ -31,6 +31,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroClass;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Bat;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Bee;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Crab;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Scorpio;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Spinner;
@@ -201,6 +202,7 @@ public void call() {
 				float damageMulti = 1f;
 				if (Char.hasProp(enemy, Char.Property.INORGANIC)
 						|| enemy instanceof Swarm
+						|| enemy instanceof Bee
 						|| enemy instanceof Crab
 						|| enemy instanceof Spinner
 						|| enemy instanceof Scorpio) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/MonkEnergy.java
Patch:
@@ -165,7 +165,8 @@ public void gainEnergy(Mob enemy ){
 					}
 				}
 
-				if (hero.belongings.weapon() instanceof MeleeWeapon){
+				if (hero.belongings.weapon() instanceof MeleeWeapon
+						&& hero.buff(RingOfForce.BrawlersStance.class) == null){
 					if (((MeleeWeapon) hero.belongings.weapon()).tier == 3 && points >= 1){
 						enGainMulti += 0.25f;
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/MonkEnergy.java
Patch:
@@ -150,8 +150,8 @@ public void gainEnergy(Mob enemy ){
 		float enGainMulti = 1f;
 		if (target instanceof Hero) {
 			Hero hero = (Hero) target;
-			if (hero.hasTalent(Talent.LIGHTLY_ARMED)) {
-				int points = hero.pointsInTalent(Talent.LIGHTLY_ARMED);
+			if (hero.hasTalent(Talent.UNENCUMBERED_SPIRIT)) {
+				int points = hero.pointsInTalent(Talent.UNENCUMBERED_SPIRIT);
 
 				if (hero.belongings.armor() != null){
 					if (hero.belongings.armor().tier == 3 && points >= 1){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfArcana.java
Patch:
@@ -35,7 +35,7 @@ public String statsInfo() {
 		if (isIdentified()){
 			return Messages.get(this, "stats", Messages.decimalFormat("#.##", 100f * (Math.pow(1.175f, soloBuffedBonus()) - 1f)));
 		} else {
-			return Messages.get(this, "typical_stats", Messages.decimalFormat("#.##", 175f));
+			return Messages.get(this, "typical_stats", Messages.decimalFormat("#.##", 17.5f));
 		}
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/MonkEnergy.java
Patch:
@@ -208,7 +208,7 @@ public void abilityUsed( MonkAbility abil ){
 
 	@Override
 	public String actionName() {
-		return "TODO";
+		return Messages.get(this, "action");
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1545,6 +1545,7 @@ else if (path.getLast() != target)
 				} else {
 					Chasm.heroFall(target);
 				}
+				canSelfTrample = false;
 				return false;
 			}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/KindOfWeapon.java
Patch:
@@ -51,6 +51,7 @@ abstract public class KindOfWeapon extends EquipableItem {
 	@Override
 	public void execute(Hero hero, String action) {
 		if (hero.subClass == HeroSubClass.CHAMPION && action.equals(AC_EQUIP)){
+			usesTargeting = false;
 			String primaryName = Messages.titleCase(hero.belongings.weapon != null ? hero.belongings.weapon.trueName() : Messages.get(KindOfWeapon.class, "empty"));
 			String secondaryName = Messages.titleCase(hero.belongings.secondWep != null ? hero.belongings.secondWep.trueName() : Messages.get(KindOfWeapon.class, "empty"));
 			if (primaryName.length() > 18) primaryName = primaryName.substring(0, 15) + "...";

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/KindOfWeapon.java
Patch:
@@ -138,7 +138,7 @@ public boolean doEquip( Hero hero ) {
 		}
 	}
 
-	private boolean equipSecondary( Hero hero ){
+	public boolean equipSecondary( Hero hero ){
 		detachAll( hero.belongings.backpack );
 
 		if (hero.belongings.secondWep == null || hero.belongings.secondWep.doUnequip( hero, true )) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -329,7 +329,7 @@ public boolean attack( Char enemy, float dmgMulti, float dmgBonus, float accMult
 			
 			if (this instanceof Hero){
 				Hero h = (Hero)this;
-				if (h.belongings.weapon() instanceof MissileWeapon
+				if (h.belongings.attackingWeapon() instanceof MissileWeapon
 						&& h.subClass == HeroSubClass.SNIPER
 						&& !Dungeon.level.adjacent(h.pos, enemy.pos)){
 					dr = 0;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
Patch:
@@ -609,7 +609,7 @@ public static int onAttackProc( Hero hero, Char enemy, int dmg ){
 		}
 
 		if (hero.hasTalent(Talent.FOLLOWUP_STRIKE)) {
-			if (hero.belongings.weapon() instanceof MissileWeapon) {
+			if (hero.belongings.attackingWeapon() instanceof MissileWeapon) {
 				Buff.affect(enemy, FollowupStrikeTracker.class);
 			} else if (enemy.buff(FollowupStrikeTracker.class) != null){
 				dmg += 1 + hero.pointsInTalent(FOLLOWUP_STRIKE);
@@ -638,7 +638,7 @@ public static int onAttackProc( Hero hero, Char enemy, int dmg ){
 		}
 
 		if (hero.hasTalent(DEADLY_FOLLOWUP)) {
-			if (hero.belongings.weapon() instanceof MissileWeapon) {
+			if (hero.belongings.attackingWeapon() instanceof MissileWeapon) {
 				Buff.prolong(enemy, DeadlyFollowupTracker.class, 5f);
 			} else if (enemy.buff(DeadlyFollowupTracker.class) != null){
 				dmg = Math.round(dmg * (1.0f + .08f*hero.pointsInTalent(DEADLY_FOLLOWUP)));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -620,7 +620,7 @@ public int defenseSkill( Char enemy ) {
 	public int defenseProc( Char enemy, int damage ) {
 		
 		if (enemy instanceof Hero
-				&& ((Hero) enemy).belongings.weapon() instanceof MissileWeapon){
+				&& ((Hero) enemy).belongings.attackingWeapon() instanceof MissileWeapon){
 			Statistics.thrownAttacks++;
 			Badges.validateHuntressUnlock();
 		}
@@ -630,8 +630,8 @@ public int defenseProc( Char enemy, int damage ) {
 			Badges.validateRogueUnlock();
 			//TODO this is somewhat messy, it would be nicer to not have to manually handle delays here
 			// playing the strong hit sound might work best as another property of weapon?
-			if (Dungeon.hero.belongings.weapon() instanceof SpiritBow.SpiritArrow
-				|| Dungeon.hero.belongings.weapon() instanceof Dart){
+			if (Dungeon.hero.belongings.attackingWeapon() instanceof SpiritBow.SpiritArrow
+				|| Dungeon.hero.belongings.attackingWeapon() instanceof Dart){
 				Sample.INSTANCE.playDelayed(Assets.Sounds.HIT_STRONG, 0.125f);
 			} else {
 				Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfForce.java
Patch:
@@ -195,7 +195,7 @@ public String info() {
 	}
 
 	public static boolean fightingUnarmed( Hero hero ){
-		if (hero.belongings.weapon() == null){
+		if (hero.belongings.attackingWeapon() == null){
 			return true;
 		}
 		if (hero.belongings.thrownWeapon != null || hero.belongings.abilityWeapon != null){
@@ -216,7 +216,7 @@ public static boolean fightingUnarmed( Hero hero ){
 	}
 
 	public static boolean unarmedGetsWeaponEffects( Hero hero ){
-		if (hero.belongings.weapon() == null){
+		if (hero.belongings.attackingWeapon() == null){
 			return false;
 		}
 		BrawlersStance stance = hero.buff(BrawlersStance.class);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfForce.java
Patch:
@@ -184,7 +184,7 @@ public String info() {
 		String info = super.info();
 
 		if (Dungeon.hero.heroClass == HeroClass.DUELIST
-			&& (isIdentified() || isEquipped(Dungeon.hero))){
+			&& (anonymous || isIdentified() || isEquipped(Dungeon.hero))){
 			info += "\n\n" + Messages.get(this, "ability_desc");
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1537,7 +1537,7 @@ else if (path.getLast() != target)
 			float delay = 1 / speed();
 
 			if (Dungeon.level.pit[step] && !Dungeon.level.solid[step]
-					&& (!flying || buff(Levitation.class) != null && buff(Levitation.class).cooldown() < delay)){
+					&& (!flying || buff(Levitation.class) != null && buff(Levitation.class).detachesWithinDelay(delay))){
 				if (!Chasm.jumpConfirmed){
 					Chasm.heroJump(this);
 					interrupt();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/KindOfWeapon.java
Patch:
@@ -159,7 +159,7 @@ private boolean equipSecondary( Hero hero ){
 			if (hero.hasTalent(Talent.SWIFT_EQUIP)) {
 				if (hero.buff(Talent.SwiftEquipCooldown.class) == null){
 					hero.spendAndNext(-hero.cooldown());
-					Buff.affect(hero, Talent.SwiftEquipCooldown.class, 49f)
+					Buff.affect(hero, Talent.SwiftEquipCooldown.class, 29f)
 							.secondUse = hero.pointsInTalent(Talent.SWIFT_EQUIP) == 2;
 					GLog.i(Messages.get(this, "swift_equip"));
 				} else if (hero.buff(Talent.SwiftEquipCooldown.class).hasSecondUse()) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Buff.java
Patch:
@@ -29,7 +29,9 @@
 import com.watabou.utils.Reflection;
 
 import java.text.DecimalFormat;
+import java.text.DecimalFormatSymbols;
 import java.util.HashSet;
+import java.util.Locale;
 
 public class Buff extends Actor {
 	
@@ -133,7 +135,7 @@ public String desc(){
 
 	//to handle the common case of showing how many turns are remaining in a buff description.
 	protected String dispTurns(float input){
-		return new DecimalFormat("#.##").format(input);
+		return new DecimalFormat("#.##", DecimalFormatSymbols.getInstance(Locale.ENGLISH)).format(input);
 	}
 
 	//buffs act after the hero, so it is often useful to use cooldown+1 when display buff time remaining

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sai.java
Patch:
@@ -102,6 +102,7 @@ public void call() {
 				}
 
 				Invisibility.dispel();
+				hero.spendAndNext(hero.attackDelay());
 				if (recentHits >= 2 && hit){
 					Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/ChaliceOfBlood.java
Patch:
@@ -70,7 +70,7 @@ public void execute(Hero hero, String action ) {
 
 		if (action.equals(AC_PRICK)){
 
-			int damage = 3*(level()*level());
+			int damage = 5 + 3*(level()*level());
 
 			if (damage > hero.HP*0.75) {
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Rapier.java
Patch:
@@ -88,7 +88,7 @@ protected void duelistAbility(Hero hero, Integer target) {
 
 		int lungeCell = -1;
 		for (int i : PathFinder.NEIGHBOURS8){
-			if (Dungeon.level.distance(hero.pos, target)-1 <= reachFactor(hero)
+			if (Dungeon.level.distance(hero.pos+i, target) <= reachFactor(hero)
 					&& Actor.findChar(hero.pos+i) == null
 					&& Dungeon.level.passable[hero.pos+i]){
 				if (lungeCell == -1 || Dungeon.level.trueDistance(hero.pos + i, target) < Dungeon.level.trueDistance(lungeCell, target)){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/ScrollEmpower.java
Patch:
@@ -77,7 +77,7 @@ public String iconTextDisplay() {
 
 	@Override
 	public String desc() {
-		return Messages.get(this, "desc", Dungeon.hero.pointsInTalent(Talent.EMPOWERING_SCROLLS), left);
+		return Messages.get(this, "desc", 3, left);
 	}
 
 	private static final String LEFT = "left";

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/mechanics/ShadowCaster.java
Patch:
@@ -41,7 +41,7 @@ public final class ShadowCaster {
 				//testing the middle of a cell, so we use i + 0.5
 				rounding[i][j] = (int)Math.min(
 						j,
-						Math.round( (i + 0.5) * Math.cos( Math.asin( j / (i + 0.5) ))));
+						Math.round( i * Math.cos( Math.asin( j / (i + 0.5) ))));
 			}
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/messages/Messages.java
Patch:
@@ -158,7 +158,7 @@ public static String format( String format, Object...args ) {
 		try {
 			return String.format(Locale.ENGLISH, format, args);
 		} catch (IllegalFormatException e) {
-			ShatteredPixelDungeon.reportException( e );
+			ShatteredPixelDungeon.reportException( new Exception("formatting error for the string: " + format, e) );
 			return format;
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Ghost.java
Patch:
@@ -170,13 +170,13 @@ public void call() {
 			switch (Quest.type){
 				case 1: default:
 					questBoss = new FetidRat();
-					txt_quest = Messages.get(this, "rat_1", Dungeon.hero.name()); break;
+					txt_quest = Messages.get(this, "rat_1", Messages.titleCase(Dungeon.hero.name())); break;
 				case 2:
 					questBoss = new GnollTrickster();
-					txt_quest = Messages.get(this, "gnoll_1", Dungeon.hero.name()); break;
+					txt_quest = Messages.get(this, "gnoll_1", Messages.titleCase(Dungeon.hero.name())); break;
 				case 3:
 					questBoss = new GreatCrab();
-					txt_quest = Messages.get(this, "crab_1", Dungeon.hero.name()); break;
+					txt_quest = Messages.get(this, "crab_1", Messages.titleCase(Dungeon.hero.name())); break;
 			}
 
 			questBoss.pos = Dungeon.level.randomRespawnCell( this );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/ImpShopkeeper.java
Patch:
@@ -39,9 +39,9 @@ protected boolean act() {
 
 		if (!seenBefore && Dungeon.level.heroFOV[pos]) {
 			if (Dungeon.hero.buff(AscensionChallenge.class) == null) {
-				yell(Messages.get(this, "greetings", Dungeon.hero.name()));
+				yell(Messages.get(this, "greetings", Messages.titleCase(Dungeon.hero.name())));
 			} else {
-				yell(Messages.get(this, "greetings_ascent", Dungeon.hero.name()));
+				yell(Messages.get(this, "greetings_ascent", Messages.titleCase(Dungeon.hero.name())));
 			}
 			seenBefore = true;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/DriedRose.java
Patch:
@@ -178,7 +178,7 @@ public void execute( Hero hero, String action ) {
 					hero.sprite.operate(hero.pos);
 
 					if (!firstSummon) {
-						ghost.yell( Messages.get(GhostHero.class, "hello", Dungeon.hero.name()) );
+						ghost.yell( Messages.get(GhostHero.class, "hello", Messages.titleCase(Dungeon.hero.name())) );
 						Sample.INSTANCE.play( Assets.Sounds.GHOST );
 						firstSummon = true;
 						

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndWandmaker.java
Patch:
@@ -108,7 +108,7 @@ private void selectReward( Item reward ) {
 			Dungeon.level.drop( reward, wandmaker.pos ).sprite.drop();
 		}
 		
-		wandmaker.yell( Messages.get(this, "farewell", Dungeon.hero.name()) );
+		wandmaker.yell( Messages.get(this, "farewell", Messages.titleCase(Dungeon.hero.name())) );
 		wandmaker.destroy();
 		
 		wandmaker.sprite.die();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Generator.java
Patch:
@@ -454,12 +454,12 @@ public static int order( Item item ) {
 			RING.classes = new Class<?>[]{
 					RingOfAccuracy.class,
 					RingOfArcana.class,
-					RingOfEvasion.class,
 					RingOfElements.class,
+					RingOfEnergy.class,
+					RingOfEvasion.class,
 					RingOfForce.class,
 					RingOfFuror.class,
 					RingOfHaste.class,
-					RingOfEnergy.class,
 					RingOfMight.class,
 					RingOfSharpshooting.class,
 					RingOfTenacity.class,

File: SPD-classes/src/main/java/com/watabou/noosa/particles/Emitter.java
Patch:
@@ -135,6 +135,8 @@ public void update() {
 	@Override
 	public void revive() {
 		started = false;
+		//some emitters may be killed while not visible, this ensures true is always the default
+		visible = true;
 		super.revive();
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/quest/Pickaxe.java
Patch:
@@ -190,6 +190,7 @@ protected void duelistAbility(Hero hero, Integer target) {
 		hero.belongings.abilityWeapon = this;
 		if (!hero.canAttack(enemy)){
 			GLog.w(Messages.get(this, "ability_bad_position"));
+			hero.belongings.abilityWeapon = null;
 			return;
 		}
 		hero.belongings.abilityWeapon = null;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/darts/TippedDart.java
Patch:
@@ -182,7 +182,7 @@ public float durabilityPerUse() {
 
 		//grants 1 extra use with charged shot
 		if (Dungeon.hero.buff(Crossbow.ChargedShot.class) != null){
-			use = 100f/((use/100f) + 1f) + 0.001f;
+			use = 100f/((100f/use) + 1f) + 0.001f;
 		}
 		
 		return use;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Greataxe.java
Patch:
@@ -80,6 +80,7 @@ protected void duelistAbility(Hero hero, Integer target) {
 		hero.belongings.abilityWeapon = this;
 		if (!hero.canAttack(enemy)){
 			GLog.w(Messages.get(this, "ability_bad_position"));
+			hero.belongings.abilityWeapon = null;
 			return;
 		}
 		hero.belongings.abilityWeapon = null;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Mace.java
Patch:
@@ -77,6 +77,7 @@ public static void heavyBlowAbility(Hero hero, Integer target, float dmgMulti, M
 		hero.belongings.abilityWeapon = wep;
 		if (!hero.canAttack(enemy)){
 			GLog.w(Messages.get(wep, "ability_bad_position"));
+			hero.belongings.abilityWeapon = null;
 			return;
 		}
 		hero.belongings.abilityWeapon = null;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/RunicBlade.java
Patch:
@@ -78,6 +78,7 @@ protected void duelistAbility(Hero hero, Integer target) {
 		if (!hero.canAttack(enemy)){
 			GLog.w(Messages.get(this, "ability_bad_position"));
 			tracker.detach();
+			hero.belongings.abilityWeapon = null;
 			return;
 		}
 		hero.belongings.abilityWeapon = null;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sai.java
Patch:
@@ -79,6 +79,7 @@ public static void comboStrikeAbility(Hero hero, Integer target, int comboTime,
 		hero.belongings.abilityWeapon = wep;
 		if (!hero.canAttack(enemy)){
 			GLog.w(Messages.get(wep, "ability_bad_position"));
+			hero.belongings.abilityWeapon = null;
 			return;
 		}
 		hero.belongings.abilityWeapon = null;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sword.java
Patch:
@@ -80,6 +80,7 @@ public static void cleaveAbility(Hero hero, Integer target, float dmgMulti, Mele
 		hero.belongings.abilityWeapon = wep;
 		if (!hero.canAttack(enemy)){
 			GLog.w(Messages.get(wep, "ability_bad_position"));
+			hero.belongings.abilityWeapon = null;
 			return;
 		}
 		hero.belongings.abilityWeapon = null;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Bones.java
Patch:
@@ -76,7 +76,8 @@ private static Item pickItem(Hero hero){
 				case 0:
 					item = hero.belongings.weapon;
 					//if the hero has two weapons (champion), pick the stronger one
-					if (hero.belongings.secondWep != null && hero.belongings.secondWep.trueLevel() > item.trueLevel()){
+					if (hero.belongings.secondWep != null &&
+							(item == null || hero.belongings.secondWep.trueLevel() > item.trueLevel())){
 						item = hero.belongings.secondWep;
 						break;
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/HeroIcon.java
Patch:
@@ -64,7 +64,7 @@ public class HeroIcon extends Image {
 	public static final int CHALLENGE       = 28;
 	public static final int ELEMENTAL_STRIKE= 29;
 	public static final int DUELIST_3       = 30;
-	public static final int RATMOGRIFY      = 33;
+	public static final int RATMOGRIFY      = 31;
 
 	public HeroIcon(HeroSubClass subCls){
 		super( Assets.Interfaces.HERO_ICONS );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/EquipableItem.java
Patch:
@@ -137,7 +137,7 @@ public boolean doUnequip( Hero hero, boolean collect, boolean single ) {
 			onDetach();
 			Dungeon.quickslot.clearItem(this);
 			updateQuickslot();
-			if (collect) Dungeon.level.drop( this, hero.pos );
+			if (collect) Dungeon.level.drop( this, hero.pos ).sprite.drop();
 		}
 		keptThoughLostInvent = wasKept;
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfForce.java
Patch:
@@ -171,7 +171,8 @@ public void execute(Hero hero, String action) {
 	public String info() {
 		String info = super.info();
 
-		if (Dungeon.hero.heroClass == HeroClass.DUELIST){
+		if (Dungeon.hero.heroClass == HeroClass.DUELIST
+			&& (isIdentified() || isEquipped(Dungeon.hero))){
 			info += "\n\n" + Messages.get(this, "ability_desc");
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndBag.java
Patch:
@@ -364,7 +364,7 @@ protected boolean onLongClick() {
 	@Override
 	public boolean onSignal(KeyEvent event) {
 		if (event.pressed && KeyBindings.getActionForKey( event ) == SPDAction.INVENTORY) {
-			hide();
+			onBackPressed();
 			return true;
 		} else {
 			return super.onSignal(event);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/quest/Pickaxe.java
Patch:
@@ -215,8 +215,8 @@ public void call() {
 					}
 					Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 				}
-				hero.spendAndNext(hero.attackDelay());
 				Invisibility.dispel();
+				hero.spendAndNext(hero.attackDelay());
 				afterAbilityUsed(hero);
 			}
 		});

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Greataxe.java
Patch:
@@ -95,8 +95,8 @@ public void call() {
 						onAbilityKill(hero);
 					}
 				}
-				hero.spendAndNext(hero.attackDelay());
 				Invisibility.dispel();
+				hero.spendAndNext(hero.attackDelay());
 				afterAbilityUsed(hero);
 			}
 		});

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Mace.java
Patch:
@@ -94,8 +94,8 @@ public void call() {
 						wep.onAbilityKill(hero);
 					}
 				}
-				hero.spendAndNext(hero.attackDelay());
 				Invisibility.dispel();
+				hero.spendAndNext(hero.attackDelay());
 				wep.afterAbilityUsed(hero);
 			}
 		});

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Rapier.java
Patch:
@@ -126,8 +126,8 @@ public void call() {
 									onAbilityKill(hero);
 								}
 							}
-							hero.spendAndNext(hero.attackDelay());
 							Invisibility.dispel();
+							hero.spendAndNext(hero.attackDelay());
 							afterAbilityUsed(hero);
 						}
 					});

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/RunicBlade.java
Patch:
@@ -94,8 +94,8 @@ public void call() {
 					}
 				}
 				tracker.detach();
-				hero.spendAndNext(hero.attackDelay());
 				Invisibility.dispel();
+				hero.spendAndNext(hero.attackDelay());
 				afterAbilityUsed(hero);
 			}
 		});

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sai.java
Patch:
@@ -101,6 +101,7 @@ public void call() {
 					}
 				}
 
+				Invisibility.dispel();
 				if (recentHits >= 2 && hit){
 					for (Buff b : buffs){
 						b.detach();
@@ -110,7 +111,6 @@ public void call() {
 				} else {
 					hero.spendAndNext(hero.attackDelay());
 				}
-				Invisibility.dispel();
 				wep.afterAbilityUsed(hero);
 			}
 		});

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Spear.java
Patch:
@@ -101,8 +101,8 @@ public void call() {
 					}
 					Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 				}
-				hero.spendAndNext(hero.attackDelay());
 				Invisibility.dispel();
+				hero.spendAndNext(hero.attackDelay());
 				wep.afterAbilityUsed(hero);
 			}
 		});

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sword.java
Patch:
@@ -93,6 +93,7 @@ public void call() {
 					Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 				}
 
+				Invisibility.dispel();
 				hero.spendAndNext(hero.attackDelay());
 				if (!enemy.isAlive()){
 					wep.onAbilityKill(hero);
@@ -102,7 +103,6 @@ public void call() {
 						hero.buff(CleaveTracker.class).detach();
 					}
 				}
-				Invisibility.dispel();
 				wep.afterAbilityUsed(hero);
 			}
 		});

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Whip.java
Patch:
@@ -84,8 +84,8 @@ public void call() {
 						onAbilityKill(hero);
 					}
 				}
-				hero.spendAndNext(hero.attackDelay());
 				Invisibility.dispel();
+				hero.spendAndNext(hero.attackDelay());
 				afterAbilityUsed(hero);
 			}
 		});

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Goo.java
Patch:
@@ -66,8 +66,8 @@ public class Goo extends Mob {
 
 	@Override
 	public int damageRoll() {
-		int min = 0;
-		int max = 0;
+		int min = 1;
+		int max = (HP*2 <= HT) ? 12 : 8;
 		if (pumpedUp > 0) {
 			pumpedUp = 0;
 			if (enemy == Dungeon.hero) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MeleeWeapon.java
Patch:
@@ -211,7 +211,7 @@ protected void afterAbilityUsed( Hero hero ){
 		}
 	}
 
-	protected void onAbilityKill( Hero hero ){
+	public void onAbilityKill( Hero hero ){
 		if (hero.hasTalent(Talent.LETHAL_HASTE)){
 			//effectively 1/2 turns of haste
 			Buff.prolong(hero, Haste.class, 0.67f+hero.pointsInTalent(Talent.LETHAL_HASTE));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/darts/IncendiaryDart.java
Patch:
@@ -28,6 +28,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Fire;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Burning;
+import com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Crossbow;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
 
@@ -46,7 +47,6 @@ protected void onThrow( int cell ) {
 			if (durability > 0){
 				super.onThrow(cell);
 			} else {
-				processChargedShot(cell);
 				Dungeon.level.drop(new Dart(), cell).sprite.drop();
 			}
 		} else{

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Tengu.java
Patch:
@@ -558,8 +558,8 @@ public static boolean throwBomb(final Char thrower, final Char target){
 		//Targets closest cell which is adjacent to target
 		for (int i : PathFinder.NEIGHBOURS8){
 			int cell = target.pos + i;
-			if (targetCell == -1 ||
-					Dungeon.level.trueDistance(cell, thrower.pos) < Dungeon.level.trueDistance(targetCell, thrower.pos)){
+			if (!Dungeon.level.solid[cell] &&
+					(targetCell == -1 || Dungeon.level.trueDistance(cell, thrower.pos) < Dungeon.level.trueDistance(targetCell, thrower.pos))){
 				targetCell = cell;
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/quest/Pickaxe.java
Patch:
@@ -206,6 +206,7 @@ public void call() {
 					damageMulti = 2f;
 				}
 				beforeAbilityUsed(hero);
+				AttackIndicator.target(enemy);
 				if (hero.attack(enemy, damageMulti, 0, Char.INFINITE_ACCURACY)) {
 					if (enemy.isAlive()) {
 						Buff.affect(enemy, Vulnerable.class, 3f);
@@ -214,7 +215,6 @@ public void call() {
 					}
 					Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 				}
-				AttackIndicator.target(enemy);
 				hero.spendAndNext(hero.attackDelay());
 				Invisibility.dispel();
 				afterAbilityUsed(hero);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Greataxe.java
Patch:
@@ -88,13 +88,13 @@ protected void duelistAbility(Hero hero, Integer target) {
 			@Override
 			public void call() {
 				beforeAbilityUsed(hero);
+				AttackIndicator.target(enemy);
 				if (hero.attack(enemy, 1.35f, 0, Char.INFINITE_ACCURACY)){
 					Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 					if (!enemy.isAlive()){
 						onAbilityKill(hero);
 					}
 				}
-				AttackIndicator.target(enemy);
 				hero.spendAndNext(hero.attackDelay());
 				Invisibility.dispel();
 				afterAbilityUsed(hero);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Mace.java
Patch:
@@ -85,6 +85,7 @@ public static void heavyBlowAbility(Hero hero, Integer target, float dmgMulti, M
 			@Override
 			public void call() {
 				wep.beforeAbilityUsed(hero);
+				AttackIndicator.target(enemy);
 				if (hero.attack(enemy, dmgMulti, 0, 0.25f)) {
 					Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 					if (enemy.isAlive()){
@@ -93,7 +94,6 @@ public void call() {
 						wep.onAbilityKill(hero);
 					}
 				}
-				AttackIndicator.target(enemy);
 				hero.spendAndNext(hero.attackDelay());
 				Invisibility.dispel();
 				wep.afterAbilityUsed(hero);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Rapier.java
Patch:
@@ -110,13 +110,13 @@ public void call() {
 					public void call() {
 						//+3+lvl damage, equivalent to +67% damage, but more consistent
 						beforeAbilityUsed(hero);
+						AttackIndicator.target(enemy);
 						if (hero.attack(enemy, 1f, augment.damageFactor(3 + level()), Char.INFINITE_ACCURACY)){
 							Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 							if (!enemy.isAlive()){
 								onAbilityKill(hero);
 							}
 						}
-						AttackIndicator.target(enemy);
 						hero.spendAndNext(hero.attackDelay());
 						Invisibility.dispel();
 						afterAbilityUsed(hero);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/RunicBlade.java
Patch:
@@ -86,14 +86,14 @@ protected void duelistAbility(Hero hero, Integer target) {
 			@Override
 			public void call() {
 				beforeAbilityUsed(hero);
+				AttackIndicator.target(enemy);
 				if (hero.attack(enemy, 1f, 0, Char.INFINITE_ACCURACY)){
 					Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 					if (!enemy.isAlive()){
 						onAbilityKill(hero);
 					}
 				}
 				tracker.detach();
-				AttackIndicator.target(enemy);
 				hero.spendAndNext(hero.attackDelay());
 				Invisibility.dispel();
 				afterAbilityUsed(hero);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sai.java
Patch:
@@ -87,6 +87,7 @@ public static void comboStrikeAbility(Hero hero, Integer target, int comboTime,
 			@Override
 			public void call() {
 				wep.beforeAbilityUsed(hero);
+				AttackIndicator.target(enemy);
 				boolean hit = hero.attack(enemy, 1, 0, Char.INFINITE_ACCURACY);
 				if (hit && !enemy.isAlive()){
 					wep.onAbilityKill(hero);
@@ -100,7 +101,6 @@ public void call() {
 					}
 				}
 
-				AttackIndicator.target(enemy);
 				if (recentHits >= 2 && hit){
 					for (Buff b : buffs){
 						b.detach();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Spear.java
Patch:
@@ -87,6 +87,7 @@ public static void spikeAbility(Hero hero, Integer target, float dmgMulti, Melee
 			@Override
 			public void call() {
 				wep.beforeAbilityUsed(hero);
+				AttackIndicator.target(enemy);
 				if (hero.attack(enemy, dmgMulti, 0, Char.INFINITE_ACCURACY)) {
 					if (enemy.isAlive()){
 						//trace a ballistica to our target (which will also extend past them
@@ -100,7 +101,6 @@ public void call() {
 					}
 					Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 				}
-				AttackIndicator.target(enemy);
 				hero.spendAndNext(hero.attackDelay());
 				Invisibility.dispel();
 				wep.afterAbilityUsed(hero);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sword.java
Patch:
@@ -88,11 +88,11 @@ public static void cleaveAbility(Hero hero, Integer target, float dmgMulti, Mele
 			@Override
 			public void call() {
 				wep.beforeAbilityUsed(hero);
+				AttackIndicator.target(enemy);
 				if (hero.attack(enemy, dmgMulti, 0, Char.INFINITE_ACCURACY)){
 					Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 				}
 
-				AttackIndicator.target(enemy);
 				hero.spendAndNext(hero.attackDelay());
 				if (!enemy.isAlive()){
 					wep.onAbilityKill(hero);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/quest/Pickaxe.java
Patch:
@@ -187,10 +187,12 @@ protected void duelistAbility(Hero hero, Integer target) {
 			return;
 		}
 
+		hero.belongings.abilityWeapon = this;
 		if (!hero.canAttack(enemy)){
 			GLog.w(Messages.get(this, "ability_bad_position"));
 			return;
 		}
+		hero.belongings.abilityWeapon = null;
 
 		hero.sprite.attack(enemy.pos, new Callback() {
 			@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Greataxe.java
Patch:
@@ -77,10 +77,12 @@ protected void duelistAbility(Hero hero, Integer target) {
 			return;
 		}
 
+		hero.belongings.abilityWeapon = this;
 		if (!hero.canAttack(enemy)){
 			GLog.w(Messages.get(this, "ability_bad_position"));
 			return;
 		}
+		hero.belongings.abilityWeapon = null;
 
 		hero.sprite.attack(enemy.pos, new Callback() {
 			@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Mace.java
Patch:
@@ -74,10 +74,12 @@ public static void heavyBlowAbility(Hero hero, Integer target, float dmgMulti, M
 			return;
 		}
 
+		hero.belongings.abilityWeapon = wep;
 		if (!hero.canAttack(enemy)){
 			GLog.w(Messages.get(wep, "ability_bad_position"));
 			return;
 		}
+		hero.belongings.abilityWeapon = null;
 
 		hero.sprite.attack(enemy.pos, new Callback() {
 			@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/RunicBlade.java
Patch:
@@ -74,11 +74,13 @@ protected void duelistAbility(Hero hero, Integer target) {
 
 		//we apply here because of projecting
 		RunicSlashTracker tracker = Buff.affect(hero, RunicSlashTracker.class);
+		hero.belongings.abilityWeapon = this;
 		if (!hero.canAttack(enemy)){
 			GLog.w(Messages.get(this, "ability_bad_position"));
 			tracker.detach();
 			return;
 		}
+		hero.belongings.abilityWeapon = null;
 
 		hero.sprite.attack(enemy.pos, new Callback() {
 			@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sai.java
Patch:
@@ -76,10 +76,12 @@ public static void comboStrikeAbility(Hero hero, Integer target, int comboTime,
 			return;
 		}
 
+		hero.belongings.abilityWeapon = wep;
 		if (!hero.canAttack(enemy)){
 			GLog.w(Messages.get(wep, "ability_bad_position"));
 			return;
 		}
+		hero.belongings.abilityWeapon = null;
 
 		hero.sprite.attack(enemy.pos, new Callback() {
 			@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Spear.java
Patch:
@@ -75,10 +75,13 @@ public static void spikeAbility(Hero hero, Integer target, float dmgMulti, Melee
 			return;
 		}
 
+		hero.belongings.abilityWeapon = wep;
 		if (!hero.canAttack(enemy) || Dungeon.level.adjacent(hero.pos, enemy.pos)){
 			GLog.w(Messages.get(wep, "ability_bad_position"));
+			hero.belongings.abilityWeapon = null;
 			return;
 		}
+		hero.belongings.abilityWeapon = null;
 
 		hero.sprite.attack(enemy.pos, new Callback() {
 			@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sword.java
Patch:
@@ -77,10 +77,12 @@ public static void cleaveAbility(Hero hero, Integer target, float dmgMulti, Mele
 			return;
 		}
 
+		hero.belongings.abilityWeapon = wep;
 		if (!hero.canAttack(enemy)){
 			GLog.w(Messages.get(wep, "ability_bad_position"));
 			return;
 		}
+		hero.belongings.abilityWeapon = null;
 
 		hero.sprite.attack(enemy.pos, new Callback() {
 			@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Whip.java
Patch:
@@ -57,7 +57,6 @@ protected void duelistAbility(Hero hero, Integer target) {
 
 		ArrayList<Char> targets = new ArrayList<>();
 
-		//temporarily set whip as ability weapon before the attack, as we want to use its range
 		hero.belongings.abilityWeapon = this;
 		for (Char ch : Actor.chars()){
 			if (ch.alignment == Char.Alignment.ENEMY

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/duelist/Challenge.java
Patch:
@@ -51,7 +51,7 @@
 public class Challenge extends ArmorAbility {
 
 	{
-		baseChargeUse = 5;
+		baseChargeUse = 35;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/Ratmogrify.java
Patch:
@@ -83,7 +83,7 @@ protected void activate(ClassArmor armor, Hero hero, Integer target) {
 
 		Char ch = Actor.findChar(target);
 
-		if (ch == null) {
+		if (ch == null || !Dungeon.level.heroFOV[target]) {
 			GLog.w(Messages.get(this, "no_target"));
 			return;
 		} else if (ch == hero){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/huntress/SpectralBlades.java
Patch:
@@ -69,7 +69,7 @@ protected void activate(ClassArmor armor, Hero hero, Integer target) {
 
 		Char enemy = findChar(b, hero, 2*hero.pointsInTalent(Talent.PROJECTING_BLADES), targets);
 
-		if (enemy == null){
+		if (enemy == null || !hero.fieldOfView[enemy.pos]){
 			GLog.w(Messages.get(this, "no_target"));
 			return;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/rogue/DeathMark.java
Patch:
@@ -78,7 +78,7 @@ protected void activate(ClassArmor armor, Hero hero, Integer target) {
 
 		Char ch = Actor.findChar(target);
 
-		if (ch == null){
+		if (ch == null || !Dungeon.level.heroFOV[target]){
 			GLog.w(Messages.get(this, "no_target"));
 			return;
 		} else if (ch.alignment != Char.Alignment.ENEMY){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Gauntlet.java
Patch:
@@ -50,7 +50,7 @@ public String targetingPrompt() {
 
 	@Override
 	protected void duelistAbility(Hero hero, Integer target) {
-		Sai.comboStrikeAbility(hero, target, 3, this);
+		Sai.comboStrikeAbility(hero, target, 4, this);
 	}
 
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Gloves.java
Patch:
@@ -52,7 +52,7 @@ public String targetingPrompt() {
 
 	@Override
 	protected void duelistAbility(Hero hero, Integer target) {
-		Sai.comboStrikeAbility(hero, target, 5, this);
+		Sai.comboStrikeAbility(hero, target, 6, this);
 	}
 
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sai.java
Patch:
@@ -62,7 +62,7 @@ public String targetingPrompt() {
 
 	@Override
 	protected void duelistAbility(Hero hero, Integer target) {
-		Sai.comboStrikeAbility(hero, target, 4, this);
+		Sai.comboStrikeAbility(hero, target, 5, this);
 	}
 
 	public static void comboStrikeAbility(Hero hero, Integer target, int comboTime, MeleeWeapon wep){
@@ -116,7 +116,7 @@ public void call() {
 
 	public static class ComboStrikeTracker extends FlavourBuff{
 
-		public static float DURATION = 5f;
+		public static float DURATION = 6f;
 
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MeleeWeapon.java
Patch:
@@ -99,7 +99,6 @@ public void execute(Hero hero, String action) {
 					if (hero.buff(Talent.SwiftEquipCooldown.class) == null
 						|| hero.buff(Talent.SwiftEquipCooldown.class).hasSecondUse()){
 						execute(hero, AC_EQUIP);
-						GLog.i(Messages.get(this, "swift_equip"));
 					} else {
 						GLog.w(Messages.get(this, "ability_need_equip"));
 						usesTargeting = false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/AssassinsBlade.java
Patch:
@@ -78,7 +78,7 @@ public String targetingPrompt() {
 
 	@Override
 	protected void duelistAbility(Hero hero, Integer target) {
-		Dagger.sneakAbility(hero, target, 3, this);
+		Dagger.sneakAbility(hero, 4, this);
 	}
 
 }
\ No newline at end of file

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Dirk.java
Patch:
@@ -78,7 +78,7 @@ public String targetingPrompt() {
 
 	@Override
 	protected void duelistAbility(Hero hero, Integer target) {
-		Dagger.sneakAbility(hero, target, 4, this);
+		Dagger.sneakAbility(hero, 5, this);
 	}
 
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sword.java
Patch:
@@ -91,12 +91,11 @@ public void call() {
 				}
 
 				AttackIndicator.target(enemy);
+				hero.spendAndNext(hero.attackDelay());
 				if (!enemy.isAlive()){
 					wep.onAbilityKill(hero);
-					hero.next();
-					Buff.prolong(hero, CleaveTracker.class, 4f); //1 less as attack was instant
+					Buff.prolong(hero, CleaveTracker.class, 5f);
 				} else {
-					hero.spendAndNext(hero.attackDelay());
 					if (hero.buff(CleaveTracker.class) != null) {
 						hero.buff(CleaveTracker.class).detach();
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM201.java
Patch:
@@ -60,7 +60,8 @@ protected boolean act() {
 		}
 
 		if (paralysed <= 0 && state == HUNTING && enemy != null && enemySeen && threatened
-				&& canVent(enemy.pos) && !Dungeon.level.adjacent(pos, enemy.pos) && fieldOfView[enemy.pos]){
+				&& canVent(enemy.pos) && !Dungeon.level.adjacent(pos, enemy.pos)
+				&& fieldOfView[enemy.pos] && enemy.invisible <= 0){
 			enemySeen = enemy.isAlive() && fieldOfView[enemy.pos] && enemy.invisible <= 0;
 			if (sprite != null && (sprite.visible || enemy.sprite.visible)) {
 				sprite.zap( enemy.pos );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/MissileSprite.java
Patch:
@@ -151,7 +151,9 @@ private void setup( PointF from, PointF to, Item item, Callback listener ){
 		}
 		
 		float speed = SPEED;
-		if (item instanceof Dart && Dungeon.hero.belongings.weapon() instanceof Crossbow){
+		if (item instanceof Dart
+				&& (Dungeon.hero.belongings.weapon() instanceof Crossbow
+				|| Dungeon.hero.belongings.secondWep() instanceof Crossbow)){
 			speed *= 3f;
 			
 		} else if (item instanceof SpiritBow.SpiritArrow

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Whip.java
Patch:
@@ -57,6 +57,8 @@ protected void duelistAbility(Hero hero, Integer target) {
 
 		ArrayList<Char> targets = new ArrayList<>();
 
+		//temporarily set whip as ability weapon before the attack, as we want to use its range
+		hero.belongings.abilityWeapon = this;
 		for (Char ch : Actor.chars()){
 			if (ch.alignment == Char.Alignment.ENEMY
 					&& !hero.isCharmedBy(ch)
@@ -65,6 +67,7 @@ protected void duelistAbility(Hero hero, Integer target) {
 				targets.add(ch);
 			}
 		}
+		hero.belongings.abilityWeapon = null;
 
 		if (targets.isEmpty()) {
 			GLog.w(Messages.get(this, "ability_no_target"));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MeleeWeapon.java
Patch:
@@ -326,7 +326,8 @@ public String info() {
 			}
 		}
 
-		if (Dungeon.hero.heroClass == HeroClass.DUELIST){
+		//the mage's staff has no ability as it can only be gained by the mage
+		if (Dungeon.hero.heroClass == HeroClass.DUELIST && !(this instanceof MagesStaff)){
 			info += "\n\n" + Messages.get(this, "ability_desc");
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/AlchemistsToolkit.java
Patch:
@@ -98,7 +98,7 @@ public void execute(Hero hero, String action ) {
 
 				String[] options;
 				if (maxLevels > 1){
-					options = new String[]{ Messages.get(this, "energize_1"), Messages.get(this, "energize_all", 5*maxLevels, maxLevels)};
+					options = new String[]{ Messages.get(this, "energize_1"), Messages.get(this, "energize_all", 6*maxLevels, maxLevels)};
 				} else {
 					options = new String[]{ Messages.get(this, "energize_1")};
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1967,7 +1967,7 @@ public void onAttackComplete() {
 		RingOfForce.BrawlersStance brawlStance = buff(RingOfForce.BrawlersStance.class);
 		if (brawlStance != null && brawlStance.hitsLeft() > 0){
 			MeleeWeapon.Charger charger = Buff.affect(this, MeleeWeapon.Charger.class);
-			charger.partialCharge -= 0.25f;
+			charger.partialCharge -= RingOfForce.BrawlersStance.HIT_CHARGE_USE;
 			while (charger.partialCharge < 0) {
 				charger.charges--;
 				charger.partialCharge++;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfForce.java
Patch:
@@ -155,7 +155,8 @@ public void execute(Hero hero, String action) {
 			} else if (!isEquipped(hero)) {
 				GLog.w(Messages.get(MeleeWeapon.class, "ability_need_equip"));
 
-			} else if ((Buff.affect(hero, MeleeWeapon.Charger.class).charges + Buff.affect(hero, MeleeWeapon.Charger.class).partialCharge) < 0.333f){
+			} else if ((Buff.affect(hero, MeleeWeapon.Charger.class).charges + Buff.affect(hero, MeleeWeapon.Charger.class).partialCharge)
+					< BrawlersStance.HIT_CHARGE_USE){
 				GLog.w(Messages.get(MeleeWeapon.class, "ability_no_charge"));
 
 			} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Whip.java
Patch:
@@ -25,9 +25,11 @@
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Invisibility;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
+import com.shatteredpixel.shatteredpixeldungeon.ui.AttackIndicator;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
 import com.watabou.utils.Callback;
 
@@ -81,6 +83,7 @@ public void call() {
 					}
 				}
 				hero.spendAndNext(hero.attackDelay());
+				Invisibility.dispel();
 				afterAbilityUsed(hero);
 			}
 		});

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v2_X_Changes.java
Patch:
@@ -87,7 +87,7 @@ public static void add_v2_0_Changes( ArrayList<ChangeInfo> changeInfos ) {
 				"\n" +
 				"_The Champion_ is a master of melee weapons who can equip a secondary weapon in addition to her primary one!\n" +
 				"\n" +
-				"_The Monk_ is a master of psychical technique, _but has not been finished yet._ Look out for the second subclass very soon!"));
+				"_The Monk_ is a master of physical technique, _but has not been finished yet._ Look out for the second subclass very soon!"));
 
 		changes.addButton(new ChangeButton(HeroSprite.avatar(HeroClass.DUELIST, 6), "Duelist Armor Abilities",
 				"_The Duelist has three lategame armor abilities, with 3 more talents each!_\n" +
@@ -222,6 +222,8 @@ public static void add_v2_0_Changes( ArrayList<ChangeInfo> changeInfos ) {
 		changes.addButton( new ChangeButton(new ItemSprite(ItemSpriteSheet.RING_TOPAZ), "Item Buffs",
 				"I'm making several buffs to various items that could be performing a little better:\n" +
 				"\n" +
+				"_- Pickaxe_ can now benefit from upgrades enchantments and augmentation, if you feel like using it for fun.\n" +
+				"\n" +
 				"_- Ring of Energy_ now also applies a recharging boost to hero armor abilities. All the boosts it gives are now standardized to +15%.\n" +
 				"_- Ring of Arcana_ enchantment boost up to +17.5% per level, from +15%\n" +
 				"\n" +

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
Patch:
@@ -849,7 +849,7 @@ public static void storeTalentsInBundle( Bundle bundle, Hero hero ){
 	private static final HashMap<String, String> renamedTalents = new HashMap<>();
 	static{
 		//v2.0.0
-		renamedTalents.put("ADVENTURERS_INTUITION",      "VETERANS_INTUITION");
+		renamedTalents.put("ARMSMASTERS_INTUITION",      "VETERANS_INTUITION");
 	}
 
 	public static void restoreTalentsFromBundle( Bundle bundle, Hero hero ){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM200.java
Patch:
@@ -128,7 +128,7 @@ private void zap( ){
 
 	}
 
-	private boolean canVent(int target){
+	protected boolean canVent(int target){
 		if (ventCooldown > 0) return false;
 		PathFinder.buildDistanceMap(target, BArray.not(Dungeon.level.solid, null), Dungeon.level.distance(pos, target)+1);
 		//vent can go around blocking terrain, but not through it

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM201.java
Patch:
@@ -59,8 +59,8 @@ protected boolean act() {
 			Dungeon.level.updateFieldOfView( this, fieldOfView );
 		}
 
-		if (paralysed <= 0 && state == HUNTING && enemy != null && enemySeen
-				&& threatened && !Dungeon.level.adjacent(pos, enemy.pos) && fieldOfView[enemy.pos]){
+		if (paralysed <= 0 && state == HUNTING && enemy != null && enemySeen && threatened
+				&& canVent(enemy.pos) && !Dungeon.level.adjacent(pos, enemy.pos) && fieldOfView[enemy.pos]){
 			enemySeen = enemy.isAlive() && fieldOfView[enemy.pos] && enemy.invisible <= 0;
 			if (sprite != null && (sprite.visible || enemy.sprite.visible)) {
 				sprite.zap( enemy.pos );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/CrystalMimic.java
Patch:
@@ -108,6 +108,7 @@ public int damageRoll() {
 
 	public void stopHiding(){
 		state = FLEEING;
+		if (sprite != null) sprite.idle();
 		//haste for 2 turns if attacking
 		if (alignment == Alignment.NEUTRAL){
 			Buff.affect(this, Haste.class, 2f);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/GoldenMimic.java
Patch:
@@ -66,6 +66,7 @@ public String description() {
 
 	public void stopHiding(){
 		state = HUNTING;
+		if (sprite != null) sprite.idle();
 		if (Actor.chars().contains(this) && Dungeon.level.heroFOV[pos]) {
 			enemy = Dungeon.hero;
 			target = Dungeon.hero.pos;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/Ratmogrify.java
Patch:
@@ -27,6 +27,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Adrenaline;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.AllyBuff;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.AscensionChallenge;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Invisibility;
@@ -107,6 +108,7 @@ protected void activate(ClassArmor armor, Hero hero, Integer target) {
 					Rat rat = new Rat();
 					rat.alignment = Char.Alignment.ALLY;
 					rat.state = rat.HUNTING;
+					Buff.affect(rat, AscensionChallenge.AscensionBuffBlocker.class);
 					GameScene.add( rat );
 					ScrollOfTeleportation.appear( rat, spawnPoints.get( index ) );
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -407,12 +407,12 @@ public void draw() {
 		switch (InterlevelScene.mode) {
 			case RESURRECT:
 				Sample.INSTANCE.play(Assets.Sounds.TELEPORT);
-				ScrollOfTeleportation.appear( Dungeon.hero, Dungeon.hero.pos );
+				ScrollOfTeleportation.appearVFX( Dungeon.hero );
 				SpellSprite.show(Dungeon.hero, SpellSprite.ANKH);
 				new Flare( 5, 16 ).color( 0xFFFF00, true ).show( hero, 4f ) ;
 				break;
 			case RETURN:
-				ScrollOfTeleportation.appear(  Dungeon.hero, Dungeon.hero.pos );
+				ScrollOfTeleportation.appearVFX( Dungeon.hero );
 				break;
 			case DESCEND:
 			case FALL:

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/quest/Pickaxe.java
Patch:
@@ -201,7 +201,7 @@ public void call() {
 						|| enemy instanceof Scorpio) {
 					damageMulti = 2f;
 				}
-				onAbilityUsed(hero);
+				beforeAbilityUsed(hero);
 				if (hero.attack(enemy, damageMulti, 0, Char.INFINITE_ACCURACY)) {
 					if (enemy.isAlive()) {
 						Buff.affect(enemy, Vulnerable.class, 3f);
@@ -211,6 +211,7 @@ public void call() {
 					Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 				}
 				hero.spendAndNext(hero.attackDelay());
+				afterAbilityUsed(hero);
 			}
 		});
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Dagger.java
Patch:
@@ -110,7 +110,7 @@ public static void sneakAbility(Hero hero, Integer target, int maxDist, MeleeWea
 			return;
 		}
 
-		wep.onAbilityUsed(hero);
+		wep.beforeAbilityUsed(hero);
 		Buff.affect(hero, Invisibility.class, Math.max(1, 1/hero.speed()));
 		hero.spendAndNext(1/hero.speed());
 
@@ -124,6 +124,7 @@ public static void sneakAbility(Hero hero, Integer target, int maxDist, MeleeWea
 		Dungeon.hero.sprite.place( Dungeon.hero.pos );
 		CellEmitter.get( Dungeon.hero.pos ).burst( Speck.factory( Speck.WOOL ), 6 );
 		Sample.INSTANCE.play( Assets.Sounds.PUFF );
+		wep.afterAbilityUsed(hero);
 	}
 
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Flail.java
Patch:
@@ -22,7 +22,6 @@
 package com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee;
 
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
-import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
@@ -102,7 +101,7 @@ public float abilityChargeUse( Hero hero ) {
 	@Override
 	protected void duelistAbility(Hero hero, Integer target) {
 
-		onAbilityUsed(hero);
+		beforeAbilityUsed(hero);
 		SpinAbilityTracker spin = hero.buff(SpinAbilityTracker.class);
 
 		if (spin == null){
@@ -119,6 +118,7 @@ protected void duelistAbility(Hero hero, Integer target) {
 		} else {
 			GLog.w(Messages.get(this, "spin_warn"));
 		}
+		afterAbilityUsed(hero);
 	}
 
 	public static class SpinAbilityTracker extends FlavourBuff {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Greataxe.java
Patch:
@@ -83,14 +83,15 @@ protected void duelistAbility(Hero hero, Integer target) {
 		hero.sprite.attack(enemy.pos, new Callback() {
 			@Override
 			public void call() {
-				onAbilityUsed(hero);
+				beforeAbilityUsed(hero);
 				if (hero.attack(enemy, 1.5f, 0, Char.INFINITE_ACCURACY)){
 					Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 					if (!enemy.isAlive()){
 						onAbilityKill(hero);
 					}
 				}
 				hero.spendAndNext(hero.attackDelay());
+				afterAbilityUsed(hero);
 			}
 		});
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Mace.java
Patch:
@@ -80,7 +80,7 @@ public static void heavyBlowAbility(Hero hero, Integer target, float dmgMulti, M
 		hero.sprite.attack(enemy.pos, new Callback() {
 			@Override
 			public void call() {
-				wep.onAbilityUsed(hero);
+				wep.beforeAbilityUsed(hero);
 				if (hero.attack(enemy, dmgMulti, 0, 0.25f)) {
 					Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 					if (enemy.isAlive()){
@@ -90,6 +90,7 @@ public void call() {
 					}
 				}
 				hero.spendAndNext(hero.attackDelay());
+				wep.afterAbilityUsed(hero);
 			}
 		});
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Quarterstaff.java
Patch:
@@ -22,7 +22,6 @@
 package com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee;
 
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
-import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff;
@@ -58,10 +57,11 @@ public float abilityChargeUse(Hero hero) {
 
 	@Override
 	protected void duelistAbility(Hero hero, Integer target) {
-		onAbilityUsed(hero);
+		beforeAbilityUsed(hero);
 		Buff.prolong(hero, DefensiveStance.class, 5f); //4 turns as using the ability is instant
 		hero.sprite.operate(hero.pos);
 		hero.next();
+		afterAbilityUsed(hero);
 	}
 
 	public static class DefensiveStance extends FlavourBuff {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Rapier.java
Patch:
@@ -102,14 +102,15 @@ public void call() {
 					@Override
 					public void call() {
 						//+3+lvl damage, equivalent to +67% damage, but more consistent
-						onAbilityUsed(hero);
+						beforeAbilityUsed(hero);
 						if (hero.attack(enemy, 1f, augment.damageFactor(3 + level()), Char.INFINITE_ACCURACY)){
 							Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 							if (!enemy.isAlive()){
 								onAbilityKill(hero);
 							}
 						}
 						hero.spendAndNext(hero.attackDelay());
+						afterAbilityUsed(hero);
 					}
 				});
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/RoundShield.java
Patch:
@@ -67,10 +67,11 @@ protected void duelistAbility(Hero hero, Integer target) {
 	}
 
 	public static void guardAbility(Hero hero, int duration, MeleeWeapon wep){
-		wep.onAbilityUsed(hero);
+		wep.beforeAbilityUsed(hero);
 		Buff.prolong(hero, GuardTracker.class, duration);
 		hero.sprite.operate(hero.pos);
 		hero.spendAndNext(Actor.TICK);
+		wep.afterAbilityUsed(hero);
 	}
 
 	public static class GuardTracker extends FlavourBuff {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/RunicBlade.java
Patch:
@@ -81,7 +81,7 @@ protected void duelistAbility(Hero hero, Integer target) {
 		hero.sprite.attack(enemy.pos, new Callback() {
 			@Override
 			public void call() {
-				onAbilityUsed(hero);
+				beforeAbilityUsed(hero);
 				if (hero.attack(enemy, 1f, 0, Char.INFINITE_ACCURACY)){
 					Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 					if (!enemy.isAlive()){
@@ -90,6 +90,7 @@ public void call() {
 				}
 				tracker.detach();
 				hero.spendAndNext(hero.attackDelay());
+				afterAbilityUsed(hero);
 			}
 		});
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sai.java
Patch:
@@ -82,7 +82,7 @@ public static void comboStrikeAbility(Hero hero, Integer target, int comboTime,
 		hero.sprite.attack(enemy.pos, new Callback() {
 			@Override
 			public void call() {
-				wep.onAbilityUsed(hero);
+				wep.beforeAbilityUsed(hero);
 				boolean hit = hero.attack(enemy, 1, 0, Char.INFINITE_ACCURACY);
 				if (hit && !enemy.isAlive()){
 					wep.onAbilityKill(hero);
@@ -105,6 +105,7 @@ public void call() {
 				} else {
 					hero.spendAndNext(hero.attackDelay());
 				}
+				wep.afterAbilityUsed(hero);
 			}
 		});
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Scimitar.java
Patch:
@@ -52,10 +52,11 @@ public float abilityChargeUse(Hero hero) {
 
 	@Override
 	protected void duelistAbility(Hero hero, Integer target) {
-		onAbilityUsed(hero);
+		beforeAbilityUsed(hero);
 		Buff.prolong(hero, SwordDance.class, 5f); //5 turns as using the ability is instant
 		hero.sprite.operate(hero.pos);
 		hero.next();
+		afterAbilityUsed(hero);
 	}
 
 	public static class SwordDance extends FlavourBuff {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Spear.java
Patch:
@@ -81,7 +81,7 @@ public static void spikeAbility(Hero hero, Integer target, float dmgMulti, Melee
 		hero.sprite.attack(enemy.pos, new Callback() {
 			@Override
 			public void call() {
-				wep.onAbilityUsed(hero);
+				wep.beforeAbilityUsed(hero);
 				if (hero.attack(enemy, dmgMulti, 0, Char.INFINITE_ACCURACY)) {
 					if (enemy.isAlive()){
 						//trace a ballistica to our target (which will also extend past them
@@ -96,6 +96,7 @@ public void call() {
 					Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 				}
 				hero.spendAndNext(hero.attackDelay());
+				wep.afterAbilityUsed(hero);
 			}
 		});
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sword.java
Patch:
@@ -83,7 +83,7 @@ public static void cleaveAbility(Hero hero, Integer target, float dmgMulti, Mele
 		hero.sprite.attack(enemy.pos, new Callback() {
 			@Override
 			public void call() {
-				wep.onAbilityUsed(hero);
+				wep.beforeAbilityUsed(hero);
 				if (hero.attack(enemy, dmgMulti, 0, Char.INFINITE_ACCURACY)){
 					Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 				}
@@ -98,6 +98,7 @@ public void call() {
 						hero.buff(CleaveTracker.class).detach();
 					}
 				}
+				wep.afterAbilityUsed(hero);
 			}
 		});
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Whip.java
Patch:
@@ -73,14 +73,15 @@ protected void duelistAbility(Hero hero, Integer target) {
 		hero.sprite.attack(hero.pos, new Callback() {
 			@Override
 			public void call() {
-				onAbilityUsed(hero);
+				beforeAbilityUsed(hero);
 				for (Char ch : targets) {
 					hero.attack(ch);
 					if (!ch.isAlive()){
 						onAbilityKill(hero);
 					}
 				}
 				hero.spendAndNext(hero.attackDelay());
+				afterAbilityUsed(hero);
 			}
 		});
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndHeroInfo.java
Patch:
@@ -39,6 +39,7 @@
 import com.watabou.noosa.Game;
 import com.watabou.noosa.Image;
 import com.watabou.noosa.ui.Component;
+import com.watabou.utils.DeviceCompat;
 
 import java.util.ArrayList;
 import java.util.LinkedHashMap;
@@ -103,7 +104,7 @@ protected void select(boolean value) {
 			}
 		});
 
-		if (Badges.isUnlocked(Badges.Badge.BOSS_SLAIN_2)) {
+		if (Badges.isUnlocked(Badges.Badge.BOSS_SLAIN_2) || DeviceCompat.isDebug()) {
 			subclassInfo = new SubclassInfoTab(cl);
 			add(subclassInfo);
 			subclassInfo.setSize(WIDTH, MIN_HEIGHT);
@@ -118,7 +119,7 @@ protected void select(boolean value) {
 			});
 		}
 
-		if (Badges.isUnlocked(Badges.Badge.BOSS_SLAIN_4)) {
+		if (Badges.isUnlocked(Badges.Badge.BOSS_SLAIN_4) || DeviceCompat.isDebug()) {
 			abilityInfo = new ArmorAbilityInfoTab(cl);
 			add(abilityInfo);
 			abilityInfo.setSize(WIDTH, MIN_HEIGHT);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/warrior/Shockwave.java
Patch:
@@ -33,6 +33,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroSubClass;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.ArmorAbility;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mimic;
 import com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.armor.ClassArmor;
@@ -122,7 +123,8 @@ public void call() {
 								}
 
 								if (Random.Int(10) < 3*hero.pointsInTalent(Talent.STRIKING_WAVE)){
-									boolean wasEnemy = ch.alignment == Char.Alignment.ENEMY;
+									boolean wasEnemy = ch.alignment == Char.Alignment.ENEMY
+											|| (ch instanceof Mimic && ch.alignment == Char.Alignment.NEUTRAL);
 									damage = hero.attackProc(ch, damage);
 									ch.damage(damage, hero);
 									if (hero.subClass == HeroSubClass.GLADIATOR && wasEnemy){

File: desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopLauncher.java
Patch:
@@ -93,7 +93,7 @@ public void uncaughtException(Thread thread, Throwable throwable) {
 					exceptionMsg = exceptionMsg.substring(0, 1000) + "...";
 				}
 
-				if (exceptionMsg.contains("Couldn't create window")){
+				if (exceptionMsg.contains("Couldnt create window")){
 					TinyFileDialogs.tinyfd_messageBox(title + " Has Crashed!",
 							title + " was not able to initialize its graphics display, sorry about that!\n\n" +
 									"This usually happens when your graphics card does not support OpenGL 2.0+, or has misconfigured graphics drivers.\n\n" +

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -483,7 +483,7 @@ public int attackSkill( Char target ) {
 	public int defenseSkill( Char enemy ) {
 
 		if (buff(Combo.ParryTracker.class) != null){
-			if (canAttack(enemy)){
+			if (canAttack(enemy) && !isCharmedBy(enemy)){
 				Buff.affect(this, Combo.RiposteTracker.class).enemy = enemy;
 			}
 			return INFINITE_EVASION;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/glyphs/AntiMagic.java
Patch:
@@ -37,6 +37,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor;
 import com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb;
 import com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfArcana;
+import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfTeleportation;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfPsionicBlast;
 import com.shatteredpixel.shatteredpixeldungeon.items.wands.CursedWand;
 import com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfBlastWave;
@@ -78,6 +79,7 @@ public class AntiMagic extends Armor.Glyph {
 
 		RESISTS.add( Bomb.MagicalBomb.class );
 		RESISTS.add( ScrollOfPsionicBlast.class );
+		RESISTS.add( ScrollOfTeleportation.class );
 
 		RESISTS.add( CursedWand.class );
 		RESISTS.add( WandOfBlastWave.class );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/plants/Fadeleaf.java
Patch:
@@ -65,12 +65,12 @@ public void activate( final Char ch ) {
 				Game.switchScene( InterlevelScene.class );
 				
 			} else {
-				ScrollOfTeleportation.teleportChar((Hero) ch);
+				ScrollOfTeleportation.teleportChar(ch, Fadeleaf.class);
 			}
 			
 		} else if (ch instanceof Mob && !ch.properties().contains(Char.Property.IMMOVABLE)) {
 
-			ScrollOfTeleportation.teleportChar(ch);
+			ScrollOfTeleportation.teleportChar(ch, Fadeleaf.class);
 
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM300.java
Patch:
@@ -68,6 +68,7 @@
 import com.watabou.noosa.audio.Sample;
 import com.watabou.noosa.particles.Emitter;
 import com.watabou.utils.Bundle;
+import com.watabou.utils.GameMath;
 import com.watabou.utils.PathFinder;
 import com.watabou.utils.Point;
 import com.watabou.utils.Random;
@@ -454,7 +455,7 @@ public void dropRocks( Char target ) {
 				pos++;
 			}
 		}
-		Buff.append(this, FallingRockBuff.class, Math.min(target.cooldown(), 3*TICK)).setRockPositions(rockCells);
+		Buff.append(this, FallingRockBuff.class, GameMath.gate(TICK, target.cooldown(), 3*TICK)).setRockPositions(rockCells);
 
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -678,8 +678,8 @@ public final boolean surprisedBy( Char enemy ){
 
 	public boolean surprisedBy( Char enemy, boolean attacking ){
 		return enemy == Dungeon.hero
-				&& (enemy.invisible > 0 || !enemySeen)
-				&& (!attacking || ((Hero)enemy).canSurpriseAttack());
+				&& (enemy.invisible > 0 || !enemySeen || (fieldOfView != null && !fieldOfView[enemy.pos]))
+				&& (!attacking || enemy.canSurpriseAttack());
 	}
 
 	public void aggro( Char ch ) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/AlchemistsToolkit.java
Patch:
@@ -25,6 +25,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MagicImmune;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
+import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.Recipe;
 import com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfEnergy;
@@ -174,6 +175,7 @@ public int availableEnergy(){
 	public int consumeEnergy(int amount){
 		int result = amount - charge;
 		charge = Math.max(0, charge - amount);
+		Talent.onArtifactUsed(Dungeon.hero);
 		return Math.max(0, result);
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Rapier.java
Patch:
@@ -109,7 +109,7 @@ public void call() {
 					@Override
 					public void call() {
 						//+3+lvl damage, equivalent to +67% damage, but more consistent
-						if (hero.attack(enemy, 1f, 3 + level(), Char.INFINITE_ACCURACY)){
+						if (hero.attack(enemy, 1f, augment.damageFactor(3 + level()), Char.INFINITE_ACCURACY)){
 							Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 						}
 						onAbilityUsed(hero);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sword.java
Patch:
@@ -79,9 +79,10 @@ public static void cleaveAbility(Hero hero, Integer target, float dmgMulti, Mele
 		hero.sprite.attack(enemy.pos, new Callback() {
 			@Override
 			public void call() {
-				hero.attack(enemy, dmgMulti, 0, Char.INFINITE_ACCURACY);
+				if (hero.attack(enemy, dmgMulti, 0, Char.INFINITE_ACCURACY)){
+					Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
+				}
 				wep.onAbilityUsed(hero);
-				Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 
 				if (!enemy.isAlive()){
 					hero.next();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/CrystalMimic.java
Patch:
@@ -117,7 +117,6 @@ public void stopHiding(){
 		if (Actor.chars().contains(this) && Dungeon.level.heroFOV[pos]) {
 			enemy = Dungeon.hero;
 			target = Dungeon.hero.pos;
-			enemySeen = true;
 			GLog.w(Messages.get(this, "reveal") );
 			CellEmitter.get(pos).burst(Speck.factory(Speck.STAR), 10);
 			Sample.INSTANCE.play(Assets.Sounds.MIMIC, 1, 1.25f);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/GoldenMimic.java
Patch:
@@ -69,7 +69,6 @@ public void stopHiding(){
 		if (Actor.chars().contains(this) && Dungeon.level.heroFOV[pos]) {
 			enemy = Dungeon.hero;
 			target = Dungeon.hero.pos;
-			enemySeen = true;
 			GLog.w(Messages.get(this, "reveal") );
 			CellEmitter.get(pos).burst(Speck.factory(Speck.STAR), 10);
 			Sample.INSTANCE.play(Assets.Sounds.MIMIC, 1, 0.85f);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mimic.java
Patch:
@@ -181,7 +181,6 @@ public void stopHiding(){
 		if (Actor.chars().contains(this) && Dungeon.level.heroFOV[pos]) {
 			enemy = Dungeon.hero;
 			target = Dungeon.hero.pos;
-			enemySeen = true;
 			GLog.w(Messages.get(this, "reveal") );
 			CellEmitter.get(pos).burst(Speck.factory(Speck.STAR), 10);
 			Sample.INSTANCE.play(Assets.Sounds.MIMIC);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -538,7 +538,7 @@ public int drRoll() {
 		}
 
 		if (buff(HoldFast.class) != null){
-			dr += Random.NormalIntRange(0, 2*pointsInTalent(Talent.HOLD_FAST));
+			dr += buff(HoldFast.class).armorBonus();
 		}
 		
 		return dr;
@@ -1170,7 +1170,7 @@ public Char enemy(){
 	public void rest( boolean fullRest ) {
 		spendAndNextConstant( TIME_TO_REST );
 		if (hasTalent(Talent.HOLD_FAST)){
-			Buff.affect(this, HoldFast.class);
+			Buff.affect(this, HoldFast.class).pos = pos;
 		}
 		if (!fullRest) {
 			if (sprite != null) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Toolbar.java
Patch:
@@ -256,7 +256,7 @@ protected void onClick() {
 						&& Dungeon.hero.handle(Dungeon.hero.pos)){
 						//trigger hold fast here, even if the hero didn't specifically wait
 						if (Dungeon.hero.hasTalent(Talent.HOLD_FAST)){
-							Buff.affect(Dungeon.hero, HoldFast.class);
+							Buff.affect(Dungeon.hero, HoldFast.class).pos = Dungeon.hero.pos;
 						}
 						Dungeon.hero.next();
 					} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Imp.java
Patch:
@@ -156,6 +156,8 @@ public static class Quest {
 		
 		public static void reset() {
 			spawned = false;
+			given = false;
+			completed = false;
 
 			reward = null;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/exotic/ScrollOfEnchantment.java
Patch:
@@ -159,7 +159,7 @@ public WndEnchantSelect(Weapon wep, Weapon.Enchantment ench1,
 		                           Weapon.Enchantment ench2, Weapon.Enchantment ench3){
 			super(new ItemSprite(new ScrollOfEnchantment()),
 					Messages.titleCase(new ScrollOfEnchantment().name()),
-					Messages.get(ScrollOfEnchantment.class, "armor") +
+					Messages.get(ScrollOfEnchantment.class, "weapon") +
 							"\n\n" +
 							Messages.get(ScrollOfEnchantment.class, "cancel_warn"),
 					ench1.name(),

File: SPD-classes/src/main/java/com/watabou/noosa/particles/Emitter.java
Patch:
@@ -89,8 +89,6 @@ public void pour( Factory factory, float interval ) {
 
 	public void start( Factory factory, float interval, int quantity ) {
 
-		started = true;
-
 		this.factory = factory;
 		this.lightMode = factory.lightMode();
 		
@@ -101,6 +99,7 @@ public void start( Factory factory, float interval, int quantity ) {
 		time = Random.Float( interval );
 		
 		on = true;
+		started = true;
 	}
 
 	public static boolean freezeEmitters = false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Badges.java
Patch:
@@ -867,7 +867,7 @@ public static void validateHuntressUnlock(){
 	}
 
 	public static void validateDuelistUnlock(){
-		if (!isUnlocked(Badge.UNLOCK_HUNTRESS) && Dungeon.hero != null
+		if (!isUnlocked(Badge.UNLOCK_DUELIST) && Dungeon.hero != null
 				&& Dungeon.hero.belongings.weapon instanceof MeleeWeapon
 				&& ((MeleeWeapon) Dungeon.hero.belongings.weapon).tier >= 2
 				&& ((MeleeWeapon) Dungeon.hero.belongings.weapon).STRReq() <= Dungeon.hero.STR()){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/ClassArmor.java
Patch:
@@ -292,7 +292,9 @@ public class Charger extends Buff {
 		public boolean attachTo( Char target ) {
 			if (super.attachTo( target )) {
 				//if we're loading in and the hero has partially spent a turn, delay for 1 turn
-				if (now() == 0 && cooldown() == 0 && target.cooldown() > 0) spend(TICK);
+				if (target instanceof Hero && Dungeon.hero == null && cooldown() == 0 && target.cooldown() > 0) {
+					spend(TICK);
+				}
 				return true;
 			}
 			return false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/Artifact.java
Patch:
@@ -220,7 +220,9 @@ public class ArtifactBuff extends Buff {
 		public boolean attachTo( Char target ) {
 			if (super.attachTo( target )) {
 				//if we're loading in and the hero has partially spent a turn, delay for 1 turn
-				if (now() == 0 && cooldown() == 0 && target.cooldown() > 0) spend(TICK);
+				if (target instanceof Hero && Dungeon.hero == null && cooldown() == 0 && target.cooldown() > 0) {
+					spend(TICK);
+				}
 				return true;
 			}
 			return false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/Ring.java
Patch:
@@ -344,7 +344,9 @@ public class RingBuff extends Buff {
 		public boolean attachTo( Char target ) {
 			if (super.attachTo( target )) {
 				//if we're loading in and the hero has partially spent a turn, delay for 1 turn
-				if (now() == 0 && cooldown() == 0 && target.cooldown() > 0) spend(TICK);
+				if (target instanceof Hero && Dungeon.hero == null && cooldown() == 0 && target.cooldown() > 0) {
+					spend(TICK);
+				}
 				return true;
 			}
 			return false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -680,7 +680,9 @@ public class Charger extends Buff {
 		public boolean attachTo( Char target ) {
 			if (super.attachTo( target )) {
 				//if we're loading in and the hero has partially spent a turn, delay for 1 turn
-				if (now() == 0 && cooldown() == 0 && target.cooldown() > 0) spend(TICK);
+				if (target instanceof Hero && Dungeon.hero == null && cooldown() == 0 && target.cooldown() > 0) {
+					spend(TICK);
+				}
 				return true;
 			}
 			return false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Blacksmith.java
Patch:
@@ -120,6 +120,7 @@ public void onBackPressed() {
 					tell( Messages.get(this, "blood_2") );
 				} else {
 					if (pick.isEquipped( Dungeon.hero )) {
+						pick.cursed = false; //so that it can always be removed
 						pick.doUnequip( Dungeon.hero, false );
 					}
 					pick.detach( Dungeon.hero.belongings.backpack );

File: desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopLauncher.java
Patch:
@@ -93,7 +93,7 @@ public void uncaughtException(Thread thread, Throwable throwable) {
 					exceptionMsg = exceptionMsg.substring(0, 1000) + "...";
 				}
 
-				if (exceptionMsg.contains("Could not create window")){
+				if (exceptionMsg.contains("Couldn't create window")){
 					TinyFileDialogs.tinyfd_messageBox(title + " Has Crashed!",
 							title + " was not able to initialize its graphics display, sorry about that!\n\n" +
 									"This usually happens when your graphics card does not support OpenGL 2.0+, or has misconfigured graphics drivers.\n\n" +

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Badges.java
Patch:
@@ -867,7 +867,7 @@ public static void validateHuntressUnlock(){
 	}
 
 	public static void validateDuelistUnlock(){
-		if (Dungeon.hero.belongings.weapon instanceof MeleeWeapon
+		if (!isUnlocked(Badge.UNLOCK_HUNTRESS) && Dungeon.hero.belongings.weapon instanceof MeleeWeapon
 				&& ((MeleeWeapon) Dungeon.hero.belongings.weapon).tier >= 2
 				&& ((MeleeWeapon) Dungeon.hero.belongings.weapon).STRReq() <= Dungeon.hero.STR()){
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/YogDzewa.java
Patch:
@@ -333,6 +333,7 @@ protected boolean act() {
 					GameScene.add( summon );
 					Actor.addDelayed( new Pushing( summon, pos, summon.pos ), -1 );
 					summon.beckon(Dungeon.hero.pos);
+					Dungeon.level.occupyCell(summon);
 
 					summonCooldown += Random.NormalFloat(MIN_SUMMON_CD, MAX_SUMMON_CD);
 					summonCooldown -= (phase - 1);
@@ -447,6 +448,7 @@ public void addFist(YogFist fist){
 
 		GameScene.add(fist, 4);
 		Actor.addDelayed( new Pushing( fist, Dungeon.level.exit(), fist.pos ), -1 );
+		Dungeon.level.occupyCell(fist);
 	}
 
 	public void updateVisibility( Level level ){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MeleeWeapon.java
Patch:
@@ -83,9 +83,9 @@ public void execute(Hero hero, String action) {
 
 		if (action.equals(AC_ABILITY)){
 			if (!isEquipped(hero)) {
-				GLog.w(Messages.get(this, "ability_equip"));
+				GLog.w(Messages.get(this, "ability_need_equip"));
 			} else if (Buff.affect(hero, Charger.class).charges < abilityChargeUse()) {
-				GLog.w(Messages.get(this, "ability_charge"));
+				GLog.w(Messages.get(this, "ability_no_charge"));
 				usesTargeting = false;
 			} else {
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1282,8 +1282,10 @@ public void damage( int dmg, Object src ) {
 		}
 
 		int preHP = HP + shielding();
+		if (src instanceof Hunger) preHP -= shielding();
 		super.damage( dmg, src );
 		int postHP = HP + shielding();
+		if (src instanceof Hunger) postHP -= shielding();
 		int effectiveDamage = preHP - postHP;
 
 		if (effectiveDamage <= 0) return;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Burning.java
Patch:
@@ -117,7 +117,7 @@ public boolean act() {
 
 					if (!burnable.isEmpty()){
 						Item toBurn = Random.element(burnable).detach(hero.belongings.backpack);
-						GLog.w( Messages.get(this, "burnsup", Messages.capitalize(toBurn.title())) );
+						GLog.w( Messages.capitalize(Messages.get(this, "burnsup", toBurn.title())) );
 						if (toBurn instanceof MysteryMeat || toBurn instanceof FrozenCarpaccio){
 							ChargrilledMeat steak = new ChargrilledMeat();
 							if (!steak.collect( hero.belongings.backpack )) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Frost.java
Patch:
@@ -71,7 +71,7 @@ public boolean attachTo( Char target ) {
 				
 				if (!freezable.isEmpty()){
 					Item toFreeze = Random.element(freezable).detach( hero.belongings.backpack );
-					GLog.w( Messages.get(this, "freezes", toFreeze.title()) );
+					GLog.w( Messages.capitalize(Messages.get(this, "freezes", toFreeze.title())) );
 					if (toFreeze instanceof Potion){
 						((Potion) toFreeze).shatter(hero.pos);
 					} else if (toFreeze instanceof MysteryMeat){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CavesBossLevel.java
Patch:
@@ -249,8 +249,6 @@ public boolean setCellToWater(boolean includeTraps, int cell) {
 
 	@Override
 	public void occupyCell(Char ch) {
-		super.occupyCell(ch);
-
 		//seal the level when the hero moves near to a pylon, the level isn't already sealed, and the gate hasn't been destroyed
 		int gatePos = pointToCell(new Point(gate.left, gate.top));
 		if (ch == Dungeon.hero && !locked && solid[gatePos]){
@@ -261,6 +259,8 @@ public void occupyCell(Char ch) {
 				}
 			}
 		}
+
+		super.occupyCell(ch);
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/HallsBossLevel.java
Patch:
@@ -220,12 +220,12 @@ public int randomRespawnCell( Char ch ) {
 
 	@Override
 	public void occupyCell( Char ch ) {
-		super.occupyCell( ch );
-
 		if (map[entrance()] == Terrain.ENTRANCE && map[exit()] != Terrain.EXIT
 				&& ch == Dungeon.hero && Dungeon.level.distance(ch.pos, entrance()) >= 2) {
 			seal();
 		}
+
+		super.occupyCell( ch );
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonBossLevel.java
Patch:
@@ -547,8 +547,6 @@ public void call() {
 	
 	@Override
 	public void occupyCell(Char ch) {
-		super.occupyCell(ch);
-		
 		if (ch == Dungeon.hero){
 			switch (state){
 				case START:
@@ -564,6 +562,8 @@ public void occupyCell(Char ch) {
 					break;
 			}
 		}
+
+		super.occupyCell(ch);
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1343,7 +1343,7 @@ public void checkVisibleMobs() {
 
 		Char lastTarget = QuickSlotButton.lastTarget;
 		if (target != null && (lastTarget == null ||
-							!lastTarget.isAlive() ||
+							!lastTarget.isAlive() || !lastTarget.isActive() ||
 							lastTarget.alignment == Alignment.ALLY ||
 							!fieldOfView[lastTarget.pos])){
 			QuickSlotButton.target(target);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/CharHealthIndicator.java
Patch:
@@ -22,6 +22,7 @@
 package com.shatteredpixel.shatteredpixeldungeon.ui;
 
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Ghoul;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite;
 
@@ -46,7 +47,7 @@ protected void createChildren() {
 	public void update() {
 		super.update();
 		
-		if (target != null && target.isAlive() && target.sprite.visible) {
+		if (target != null && target.isAlive() && target.isActive() && target.sprite.visible) {
 			CharSprite sprite = target.sprite;
 			width = sprite.width()*(4/6f);
 			x = sprite.x + sprite.width()/6f;
@@ -59,7 +60,7 @@ public void update() {
 	}
 	
 	public void target( Char ch ) {
-		if (ch != null && ch.isAlive()) {
+		if (ch != null && ch.isAlive() && ch.isActive()) {
 			target = ch;
 		} else {
 			target = null;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/TargetHealthIndicator.java
Patch:
@@ -40,7 +40,7 @@ public TargetHealthIndicator() {
 	public void update() {
 		super.update();
 		
-		if (target != null && target.isAlive() && target.sprite.visible) {
+		if (target != null && target.isAlive() && target.isActive() && target.sprite.visible) {
 			CharSprite sprite = target.sprite;
 			width = sprite.width();
 			x = sprite.x;
@@ -53,7 +53,7 @@ public void update() {
 	}
 	
 	public void target( Char ch ) {
-		if (ch != null && ch.isAlive()) {
+		if (ch != null && ch.isAlive() && ch.isActive()) {
 			target = ch;
 		} else {
 			target = null;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTransmutation.java
Patch:
@@ -100,7 +100,7 @@ protected void onItemSelected(Item item) {
 					}
 				}
 				if (slot != -1
-						&& result.defaultAction != null
+						&& result.defaultAction() != null
 						&& !Dungeon.quickslot.isNonePlaceholder(slot)
 						&& Dungeon.hero.belongings.contains(result)){
 					Dungeon.quickslot.setSlot(slot, result);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/stones/Runestone.java
Patch:
@@ -38,7 +38,7 @@ public abstract class Runestone extends Item {
 
 	@Override
 	protected void onThrow(int cell) {
-		if (Dungeon.level.pit[cell] || !defaultAction.equals(AC_THROW)){
+		if (Dungeon.level.pit[cell] || !defaultAction().equals(AC_THROW)){
 			super.onThrow( cell );
 		} else {
 			if (pressesCell) Dungeon.level.pressCell( cell );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/InventoryPane.java
Patch:
@@ -539,7 +539,7 @@ protected void onMiddleClick() {
 				return;
 			}
 
-			if (selector == null && item.defaultAction != null){
+			if (selector == null && item.defaultAction() != null){
 				item.execute(Dungeon.hero);
 				if (item.usesTargeting) {
 					targetingSlot = this;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/QuickSlotButton.java
Patch:
@@ -247,7 +247,7 @@ public String textPrompt() {
 
 		@Override
 		public boolean itemSelectable(Item item) {
-			return item.defaultAction != null;
+			return item.defaultAction() != null;
 		}
 
 		@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Toolbar.java
Patch:
@@ -166,7 +166,7 @@ public String textPrompt() {
 
 									@Override
 									public boolean itemSelectable(Item item) {
-										return item.defaultAction != null;
+										return item.defaultAction() != null;
 									}
 
 									@Override
@@ -445,7 +445,7 @@ public void onSelect(int idx, boolean alt) {
 								public void onSelect(int idx, boolean alt) {
 									super.onSelect(idx, alt);
 									Item item = items.get(idx);
-									if (alt && item.defaultAction != null) {
+									if (alt && item.defaultAction() != null) {
 										item.execute(Dungeon.hero);
 									} else {
 										Game.scene().addToFront(new WndUseItem(null, item));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndBag.java
Patch:
@@ -327,7 +327,7 @@ public void onSelect(int index) {
 
 			@Override
 			protected boolean onLongClick() {
-				if (selector == null && item.defaultAction != null) {
+				if (selector == null && item.defaultAction() != null) {
 					hide();
 					QuickSlotButton.set( item );
 					return true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndQuickBag.java
Patch:
@@ -73,7 +73,7 @@ public WndQuickBag(Bag bag){
 		ArrayList<Item> items = new ArrayList<>();
 
 		for (Item i : bag == null ? Dungeon.hero.belongings : bag){
-			if (i.defaultAction == null){
+			if (i.defaultAction() == null){
 				continue;
 			}
 			if (i instanceof Bag) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndUseItem.java
Patch:
@@ -55,7 +55,7 @@ protected void onClick() {
 							item.execute( Dungeon.hero, action );
 						}
 						Item.updateQuickslot();
-						if (action == item.defaultAction && item.usesTargeting && owner == null){
+						if (action == item.defaultAction() && item.usesTargeting && owner == null){
 							InventoryPane.useTargeting();
 						}
 					}
@@ -64,7 +64,7 @@ protected void onClick() {
 				buttons.add(btn);
 				add( btn );
 
-				if (action.equals(item.defaultAction)) {
+				if (action.equals(item.defaultAction())) {
 					btn.textColor( TITLE_COLOR );
 				}
 				

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/CharSprite.java
Patch:
@@ -493,6 +493,7 @@ public void aura( int color ){
 		aura = new Flare(5, size);
 		aura.angularSpeed = 90;
 		aura.color(color, true);
+		aura.visible = visible;
 
 		if (parent != null) {
 			aura.show(this, 0);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/Artifact.java
Patch:
@@ -24,6 +24,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MagicImmune;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.KindofMisc;
@@ -230,7 +231,7 @@ public int itemLevel() {
 		}
 
 		public boolean isCursed() {
-			return cursed;
+			return target.buff(MagicImmune.class) == null && cursed;
 		}
 
 		public void charge(Hero target, float amount){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -682,7 +682,7 @@ public boolean attachTo( Char target ) {
 		
 		@Override
 		public boolean act() {
-			if (curCharges < maxCharges)
+			if (curCharges < maxCharges && target.buff(MagicImmune.class) == null)
 				recharge();
 			
 			while (partialCharge >= 1 && curCharges < maxCharges) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/RegularLevel.java
Patch:
@@ -67,6 +67,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.DisintegrationTrap;
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.ExplosiveTrap;
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.FrostTrap;
+import com.shatteredpixel.shatteredpixeldungeon.levels.traps.PitfallTrap;
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap;
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.WornDartTrap;
 import com.watabou.utils.Bundle;
@@ -611,7 +612,8 @@ && findMob(pos) == null) {
 					if (t == null ||
 							! (t instanceof BurningTrap || t instanceof BlazingTrap
 							|| t instanceof ChillingTrap || t instanceof FrostTrap
-							|| t instanceof ExplosiveTrap || t instanceof DisintegrationTrap)) {
+							|| t instanceof ExplosiveTrap || t instanceof DisintegrationTrap
+							|| t instanceof PitfallTrap)) {
 						
 						return pos;
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -792,7 +792,7 @@ private boolean actInteract( HeroAction.Interact action ) {
 		
 		Char ch = action.ch;
 
-		if (ch.canInteract(this)) {
+		if (ch.isAlive() && ch.canInteract(this)) {
 			
 			ready();
 			sprite.turnTo( pos, ch.pos );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/secret/SecretRunestoneRoom.java
Patch:
@@ -68,12 +68,12 @@ public void paint(Level level) {
 		do{
 			dropPos = level.pointToCell(random());
 		} while (level.map[dropPos] != Terrain.EMPTY);
-		level.drop( Generator.random(Generator.Category.STONE), dropPos);
+		level.drop( Generator.randomUsingDefaults(Generator.Category.STONE), dropPos);
 		
 		do{
 			dropPos = level.pointToCell(random());
 		} while (level.map[dropPos] != Terrain.EMPTY || level.heaps.get(dropPos) != null);
-		level.drop( Generator.random(Generator.Category.STONE), dropPos);
+		level.drop( Generator.randomUsingDefaults(Generator.Category.STONE), dropPos);
 		
 		do{
 			dropPos = level.pointToCell(random());

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Blacksmith.java
Patch:
@@ -214,7 +214,7 @@ public static String verify( Item item1, Item item2 ) {
 	public static void upgrade( Item item1, Item item2 ) {
 		
 		Item first, second;
-		if (item2.level() > item1.level()) {
+		if (item2.trueLevel() > item1.trueLevel()) {
 			first = item2;
 			second = item1;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/Armor.java
Patch:
@@ -381,6 +381,8 @@ public float stealthFactor( Char owner, float stealth ){
 	@Override
 	public int level() {
 		int level = super.level();
+		//TODO warrior's seal upgrade should probably be considered here too
+		// instead of being part of true level
 		if (curseInfusionBonus) level += 1 + level/6;
 		return level;
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DwarfKing.java
Patch:
@@ -139,6 +139,9 @@ public void restoreFromBundle(Bundle bundle) {
 		lastAbility = bundle.getInt( LAST_ABILITY );
 
 		if (phase == 2) properties.add(Property.IMMOVABLE);
+
+		BossHealthBar.assignBoss(this);
+		if (phase == 3) BossHealthBar.bleed(true);
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/ElementalSprite.java
Patch:
@@ -206,7 +206,7 @@ public static class Shock extends ElementalSprite {
 		//different bolt, so overrides zap
 		@Override
 		public void zap( int cell ) {
-			super.zap( cell );
+			super.zap( cell, null );
 			
 			((Elemental)ch).onZapComplete();
 			parent.add( new Beam.LightRay(center(), DungeonTilemap.raisedTileCenterToWorld(cell)));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/FistSprite.java
Patch:
@@ -118,6 +118,7 @@ public void attack( int cell ) {
 		jump(ch.pos, ch.pos, null, 9, SLAM_TIME );
 	}
 
+	//different bolt, so overrides zap
 	public void zap( int cell ) {
 
 		super.zap( cell );
@@ -265,7 +266,7 @@ protected Emitter createEmitter() {
 
 		@Override
 		public void zap( int cell ) {
-			super.zap( cell );
+			super.zap( cell, null );
 
 			((YogFist)ch).onZapComplete();
 			parent.add( new Beam.LightRay(center(), DungeonTilemap.raisedTileCenterToWorld(cell)));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Toolbar.java
Patch:
@@ -448,9 +448,6 @@ public void onSelect(int idx, boolean alt) {
 									Item item = items.get(idx);
 									if (alt && item.defaultAction != null) {
 										item.execute(Dungeon.hero);
-										if (item.usesTargeting) {
-											QuickSlotButton.useTargeting(idx);
-										}
 									} else {
 										Game.scene().addToFront(new WndUseItem(null, item));
 									}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/MissileWeapon.java
Patch:
@@ -165,7 +165,7 @@ public int throwPos(Hero user, int dst) {
 		}
 
 		if (projecting
-				&& !Dungeon.level.solid[dst]
+				&& (Dungeon.level.passable[dst] || Dungeon.level.avoid[dst])
 				&& Dungeon.level.distance(user.pos, dst) <= Math.round(4 * RingOfArcana.enchantPowerMultiplier(user))){
 			return dst;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Goo.java
Patch:
@@ -107,7 +107,6 @@ public boolean act() {
 
 		if (Dungeon.level.water[pos] && HP < HT) {
 			HP += healInc;
-			Statistics.bossScores[0] -= 10;
 			Statistics.qualifiedForBossChallengeBadge = false;
 
 			LockedFloor lock = Dungeon.hero.buff(LockedFloor.class);
@@ -297,8 +296,7 @@ public void die( Object cause ) {
 		if (Statistics.qualifiedForBossChallengeBadge){
 			Badges.validateBossChallengeCompleted();
 		}
-		Statistics.bossScores[0] += 1050; //Goo has a 50 point gimme
-		Statistics.bossScores[0] = Math.min(1000, Statistics.bossScores[0]);
+		Statistics.bossScores[0] += 1000;
 		
 		yell( Messages.get(this, "defeated") );
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/CharSprite.java
Patch:
@@ -270,7 +270,8 @@ public void zap( int cell ) {
 	
 	public synchronized void zap( int cell, Callback callback ) {
 		animCallback = callback;
-		zap( cell );
+		turnTo( ch.pos, cell );
+		play( zap );
 	}
 	
 	public void turnTo( int from, int to ) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/DM100Sprite.java
Patch:
@@ -78,9 +78,8 @@ public void zap( int pos ) {
 		}
 		Sample.INSTANCE.play( Assets.Sounds.LIGHTNING );
 		
-		turnTo( ch.pos, pos );
+		super.zap( ch.pos );
 		flash();
-		play( zap );
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/DM200Sprite.java
Patch:
@@ -60,8 +60,7 @@ public DM200Sprite () {
 
 	public void zap( int cell ) {
 
-		turnTo( ch.pos , cell );
-		play( zap );
+		super.zap( cell );
 
 		MagicMissile.boltFromChar( parent,
 				MagicMissile.TOXIC_VENT,

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/DM201Sprite.java
Patch:
@@ -73,8 +73,7 @@ public void die() {
 
 	public void zap( int cell ) {
 
-		turnTo( ch.pos , cell );
-		play( zap );
+		super.zap( cell );
 
 		MagicMissile.boltFromChar( parent,
 				MagicMissile.CORROSION,

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/DM300Sprite.java
Patch:
@@ -84,8 +84,7 @@ public void updateChargeState( boolean enraged ){
 
 	public void zap( int cell ) {
 
-		turnTo( ch.pos , cell );
-		play( zap );
+		super.zap( cell );
 
 		MagicMissile.boltFromChar( parent,
 				MagicMissile.TOXIC_VENT,

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/GolemSprite.java
Patch:
@@ -104,8 +104,7 @@ public int blood() {
 
 	public void zap( int cell ) {
 
-		turnTo( ch.pos , cell );
-		play( zap );
+		super.zap( cell );
 
 		MagicMissile.boltFromChar( parent,
 				MagicMissile.ELMO,

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/ScorpioSprite.java
Patch:
@@ -65,8 +65,7 @@ public void attack( int cell ) {
 		if (!Dungeon.level.adjacent( cell, ch.pos )) {
 			
 			cellToAttack = cell;
-			turnTo( ch.pos , cell );
-			play( zap );
+			zap(cell);
 			
 		} else {
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/ShamanSprite.java
Patch:
@@ -61,9 +61,8 @@ public ShamanSprite() {
 	}
 	
 	public void zap( int cell ) {
-		
-		turnTo( ch.pos , cell );
-		play( zap );
+
+		super.zap( cell );
 		
 		MagicMissile.boltFromChar( parent,
 				boltType,

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/SpinnerSprite.java
Patch:
@@ -71,9 +71,8 @@ public void link(Char ch) {
 	}
 	
 	public void zap( int cell ) {
-		
-		turnTo( ch.pos , cell );
-		play( zap );
+
+		super.zap( cell );
 		
 		MagicMissile.boltFromChar( parent,
 				MagicMissile.MAGIC_MISSILE,

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/TenguSprite.java
Patch:
@@ -99,8 +99,7 @@ public void call() {
 					}
 				} );
 			
-			play( zap );
-			turnTo( ch.pos , cell );
+			zap( ch.pos );
 			
 		} else {
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/WarlockSprite.java
Patch:
@@ -55,9 +55,8 @@ public WarlockSprite() {
 	}
 	
 	public void zap( int cell ) {
-		
-		turnTo( ch.pos , cell );
-		play( zap );
+
+		super.zap( cell );
 
 		MagicMissile.boltFromChar( parent,
 				MagicMissile.SHADOW,

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/BossHealthBar.java
Patch:
@@ -157,6 +157,8 @@ public void update() {
 			if (!boss.isAlive() || !Dungeon.level.mobs.contains(boss)){
 				boss = null;
 				visible = active = false;
+				buffs.killAndErase();
+				buffs = null;
 			} else {
 
 				int health = boss.HP;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/HeroSprite.java
Patch:
@@ -124,7 +124,7 @@ public void jump( int from, int to, Callback callback ) {
 		play( fly );
 	}
 
-	public void read() {
+	public synchronized void read() {
 		animCallback = new Callback() {
 			@Override
 			public void call() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
Patch:
@@ -66,6 +66,7 @@
 import com.watabou.noosa.audio.Sample;
 import com.watabou.noosa.particles.Emitter;
 import com.watabou.utils.Bundle;
+import com.watabou.utils.GameMath;
 import com.watabou.utils.PathFinder;
 import com.watabou.utils.Random;
 
@@ -198,7 +199,7 @@ public static class BountyHunterTracker extends FlavourBuff{};
 	public static class RejuvenatingStepsCooldown extends FlavourBuff{
 		public int icon() { return BuffIndicator.TIME; }
 		public void tintIcon(Image icon) { icon.hardlight(0f, 0.35f, 0.15f); }
-		public float iconFadePercent() { return Math.max(0, visualcooldown() / (15 - 5*Dungeon.hero.pointsInTalent(REJUVENATING_STEPS))); }
+		public float iconFadePercent() { return GameMath.gate(0, visualcooldown() / (15 - 5*Dungeon.hero.pointsInTalent(REJUVENATING_STEPS)), 1); }
 	};
 	public static class RejuvenatingStepsFurrow extends CounterBuff{{revivePersists = true;}};
 	public static class SeerShotCooldown extends FlavourBuff{

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Button.java
Patch:
@@ -208,6 +208,7 @@ protected void layout() {
 	public synchronized void destroy () {
 		super.destroy();
 		KeyEvent.removeKeyListener( keyListener );
+		killTooltip();
 	}
 	
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -83,6 +83,7 @@
 
 import java.io.IOException;
 import java.text.DateFormat;
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.HashSet;
@@ -207,7 +208,7 @@ public static void init() {
 		if (daily) {
 			//Ensures that daily seeds are not in the range of user-enterable seeds
 			seed = SPDSettings.lastDaily() + DungeonSeed.TOTAL_SEEDS;
-			DateFormat format = DateFormat.getDateInstance(DateFormat.SHORT, Locale.ROOT);
+			DateFormat format = new SimpleDateFormat("yyyy-MM-dd", Locale.ROOT);
 			format.setTimeZone(TimeZone.getTimeZone("UTC"));
 			customSeedText = format.format(new Date(SPDSettings.lastDaily()));
 		} else if (!SPDSettings.customSeed().isEmpty()){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Rankings.java
Patch:
@@ -45,6 +45,7 @@
 
 import java.io.IOException;
 import java.text.DateFormat;
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
@@ -91,7 +92,7 @@ public void submit( boolean win, Class cause ) {
 			rec.version = "";
 		}
 
-		DateFormat format = DateFormat.getDateInstance(DateFormat.SHORT, Locale.ROOT);
+		DateFormat format = new SimpleDateFormat("yyyy-MM-dd", Locale.ROOT);
 		rec.date = format.format(new Date(Game.realTime));
 
 		rec.cause = cause;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndDailies.java
Patch:
@@ -35,6 +35,7 @@
 
 import java.text.DateFormat;
 import java.text.NumberFormat;
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Date;
@@ -95,7 +96,7 @@ protected void onPointerUp() {
 		top = (int) score.bottom() + 6;
 
 		NumberFormat num = NumberFormat.getInstance(Locale.US);
-		DateFormat format = DateFormat.getDateInstance(DateFormat.SHORT, Locale.ROOT);
+		DateFormat format = new SimpleDateFormat("yyyy-MM-dd", Locale.ROOT);
 		format.setTimeZone(TimeZone.getTimeZone("UTC"));
 		Date date = new Date();
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TimekeepersHourglass.java
Patch:
@@ -116,8 +116,6 @@ protected void onSelect(int index) {
 									activeBuff = new timeStasis();
 									Talent.onArtifactUsed(Dungeon.hero);
 									activeBuff.attachTo(Dungeon.hero);
-									charge--;
-									updateQuickslot();
 								} else if (index == 1) {
 									GLog.i( Messages.get(TimekeepersHourglass.class, "onfreeze") );
 									GameScene.flash(0x80FFFFFF);
@@ -126,6 +124,7 @@ protected void onSelect(int index) {
 									activeBuff = new timeFreeze();
 									Talent.onArtifactUsed(Dungeon.hero);
 									activeBuff.attachTo(Dungeon.hero);
+									charge--;
 									((timeFreeze)activeBuff).processTime(0f);
 								}
 							}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/glyphs/AntiMagic.java
Patch:
@@ -38,6 +38,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb;
 import com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfArcana;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfPsionicBlast;
+import com.shatteredpixel.shatteredpixeldungeon.items.wands.CursedWand;
 import com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfBlastWave;
 import com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfDisintegration;
 import com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfFireblast;
@@ -75,6 +76,7 @@ public class AntiMagic extends Armor.Glyph {
 		RESISTS.add( Bomb.MagicalBomb.class );
 		RESISTS.add( ScrollOfPsionicBlast.class );
 
+		RESISTS.add( CursedWand.class );
 		RESISTS.add( WandOfBlastWave.class );
 		RESISTS.add( WandOfDisintegration.class );
 		RESISTS.add( WandOfFireblast.class );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -110,7 +110,7 @@ public abstract class Mob extends Char {
 	public int defenseSkill = 0;
 	
 	public int EXP = 1;
-	public int maxLvl = Hero.MAX_LEVEL;
+	public int maxLvl = Hero.MAX_LEVEL-1;
 	
 	protected Char enemy;
 	protected int enemyID = -1; //used for save/restore

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/DistortionTrap.java
Patch:
@@ -141,7 +141,7 @@ public void activate() {
 				continue;
 			}
 
-			mob.maxLvl = Hero.MAX_LEVEL;
+			mob.maxLvl = Hero.MAX_LEVEL-1;
 			mob.state = mob.WANDERING;
 			mob.pos = point;
 			GameScene.add(mob, DELAY);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -548,7 +548,8 @@ public void reset() {
 	}
 
 	public int collisionProperties(int target){
-		return collisionProperties;
+		if (cursed)     return Ballistica.MAGIC_BOLT;
+		else            return collisionProperties;
 	}
 
 	public static class PlaceHolder extends Wand {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfWarding.java
Patch:
@@ -60,8 +60,8 @@ public class WandOfWarding extends Wand {
 
 	@Override
 	public int collisionProperties(int target) {
-		if (Dungeon.level.heroFOV[target])  return Ballistica.STOP_TARGET;
-		else                                return Ballistica.PROJECTILE;
+		if (cursed || !Dungeon.level.heroFOV[target])   return Ballistica.PROJECTILE;
+		else                                            return Ballistica.STOP_TARGET;
 	}
 
 	private boolean wardAvailable = true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/elixirs/ElixirOfAquaticRejuvenation.java
Patch:
@@ -49,8 +49,8 @@ public void apply(Hero hero) {
 			PotionOfHealing.pharmacophobiaProc(hero);
 		} else {
 			Buff.affect(hero, AquaHealing.class).set(Math.round(hero.HT * 1.5f));
-			Talent.onHealingPotionUsed( hero );
 		}
+		Talent.onHealingPotionUsed( hero );
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/exotic/PotionOfShielding.java
Patch:
@@ -45,7 +45,7 @@ public void apply(Hero hero) {
 		} else {
 			//~75% of a potion of healing
 			Buff.affect(hero, Barrier.class).setShield((int) (0.6f * hero.HT + 10));
-			Talent.onHealingPotionUsed( hero );
 		}
+		Talent.onHealingPotionUsed( hero );
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/curses/Multiplicity.java
Patch:
@@ -31,6 +31,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Statue;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Thief;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.MirrorImage;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.NPC;
 import com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfTeleportation;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
@@ -71,7 +72,7 @@ public int proc(Armor armor, Char attacker, Char defender, int damage) {
 					//FIXME should probably have a mob property for this
 					if (!(attacker instanceof Mob)
 							|| attacker.properties().contains(Char.Property.BOSS) || attacker.properties().contains(Char.Property.MINIBOSS)
-							|| attacker instanceof Mimic || attacker instanceof Statue){
+							|| attacker instanceof Mimic || attacker instanceof Statue || attacker instanceof NPC){
 						m = Dungeon.level.createMob();
 					} else {
 						Actor.fixTime();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/enchantments/Blooming.java
Patch:
@@ -46,7 +46,7 @@ public int proc(Weapon weapon, Char attacker, Char defender, int damage) {
 		// lvl 0 - 33%
 		// lvl 1 - 50%
 		// lvl 2 - 60%
-		float procChance = (level+1f)/(level+1f) * procChanceMultiplier(attacker);
+		float procChance = (level+1f)/(level+3f) * procChanceMultiplier(attacker);
 		if (Random.Float() < procChance) {
 
 			float powerMulti = Math.max(1f, procChance);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/stones/StoneOfAggression.java
Patch:
@@ -98,6 +98,9 @@ public void detach() {
 						if (m.alignment == Char.Alignment.ENEMY && m.isTargeting(target)) {
 							m.aggro(null);
 						}
+						if (target instanceof Mob && ((Mob) target).isTargeting(m)){
+							((Mob) target).aggro(null);
+						}
 					}
 				}
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/ChampionEnemy.java
Patch:
@@ -195,7 +195,8 @@ public boolean canAttackWithExtraReach(Char enemy) {
 			} else {
 				boolean[] passable = BArray.not(Dungeon.level.solid, null);
 				for (Char ch : Actor.chars()) {
-					if (ch != target) passable[ch.pos] = false;
+					//our own tile is always passable
+					passable[ch.pos] = ch == target;
 				}
 
 				PathFinder.buildDistanceMap(enemy.pos, passable, 2);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/GuardianTrap.java
Patch:
@@ -73,6 +73,8 @@ public static class Guardian extends Statue {
 
 			EXP = 0;
 			state = WANDERING;
+
+			levelGenStatue = false;
 		}
 
 		public Guardian(){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -917,7 +917,7 @@ private boolean actPickUp( HeroAction.PickUp action ) {
 						GLog.n(Messages.capitalize(Messages.get(this, "you_cant_have", item.name())));
 					}
 
-					next();
+					ready();
 				}
 			} else {
 				ready();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/HeroSelectScene.java
Patch:
@@ -396,7 +396,7 @@ private void setSelectedHero(HeroClass cl){
 			startBtn.text(Messages.titleCase(cl.title()));
 			startBtn.setSize(startBtn.reqWidth() + 8, 21);
 
-			startBtn.setPos((Camera.main.width - startBtn.width())/2f, startBtn.top());
+			startBtn.setPos((Camera.main.width - startBtn.width())/2f, (Camera.main.height - HeroBtn.HEIGHT + 2 - startBtn.height()));
 			PixelScene.align(startBtn);
 
 			infoButton.visible = infoButton.active = true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MagesStaff.java
Patch:
@@ -341,8 +341,8 @@ public String info() {
 
 		if (wand != null){
 			info += "\n\n" + Messages.get(this, "has_wand", Messages.get(wand, "name"));
-			if (!cursed || !cursedKnown)    info += " " + wand.statsDesc();
-			else                            info += " " + Messages.get(this, "cursed_wand");
+			if ((!cursed && !hasCurseEnchant()) || !cursedKnown)    info += " " + wand.statsDesc();
+			else                                                    info += " " + Messages.get(this, "cursed_wand");
 
 			if (Dungeon.hero.subClass == HeroSubClass.BATTLEMAGE){
 				info += "\n\n" + Messages.get(wand, "bmage_desc");

File: desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopLauncher.java
Patch:
@@ -89,11 +89,11 @@ public void uncaughtException(Thread thread, Throwable throwable) {
 				exceptionMsg = exceptionMsg.replace("\t", "    ");
 				exceptionMsg = exceptionMsg.replace("'", "");
 
-				if (exceptionMsg.length() > 500){
-					exceptionMsg = exceptionMsg.substring(0, 500) + "...";
+				if (exceptionMsg.length() > 1000){
+					exceptionMsg = exceptionMsg.substring(0, 1000) + "...";
 				}
 
-				if (exceptionMsg.contains("Couldnt create window")){
+				if (exceptionMsg.contains("Could not create window")){
 					TinyFileDialogs.tinyfd_messageBox(title + " Has Crashed!",
 							title + " was not able to initialize its graphics display, sorry about that!\n\n" +
 									"This usually happens when your graphics card does not support OpenGL 2.0+, or has misconfigured graphics drivers.\n\n" +

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/SpiritBow.java
Patch:
@@ -430,7 +430,9 @@ public void call() {
 								@Override
 								protected boolean act() {
 									flurryActor = this;
-									cast(user, QuickSlotButton.autoAim(enemy, SpiritArrow.this));
+									int target = QuickSlotButton.autoAim(enemy, SpiritArrow.this);
+									if (target == -1) target = cell;
+									cast(user, target);
 									Actor.remove(this);
 									return false;
 								}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Rankings.java
Patch:
@@ -323,6 +323,7 @@ public void loadGameData(Record rec){
 		Badges.loadLocal(data.getBundle(BADGES));
 
 		Dungeon.hero = (Hero)data.get(HERO);
+		Dungeon.hero.belongings.identify();
 
 		Statistics.restoreFromBundle(data.getBundle(STATS));
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Belongings.java
Patch:
@@ -280,7 +280,7 @@ public ArrayList<Item> getAllSimilar( Item similar ){
 	//triggers when a run ends, so ignores lost inventory effects
 	public void identify() {
 		for (Item item : this) {
-			item.identify();
+			item.identify(false);
 		}
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/SpiritBow.java
Patch:
@@ -393,7 +393,7 @@ public void cast(final Hero user, final int dst) {
 				
 				((MissileSprite) user.sprite.parent.recycle(MissileSprite.class)).
 						reset(user.sprite,
-								enemy.pos,
+								cell,
 								this,
 								new Callback() {
 									@Override
@@ -430,7 +430,7 @@ public void call() {
 								@Override
 								protected boolean act() {
 									flurryActor = this;
-									cast(user, enemy.pos);
+									cast(user, QuickSlotButton.autoAim(enemy, SpiritArrow.this));
 									Actor.remove(this);
 									return false;
 								}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -771,9 +771,8 @@ private boolean actMove( HeroAction.Move action ) {
 		if (getCloser( action.dst )) {
 			return true;
 
-		//Hero moves in place if there is an active trap to trigger or grass to trample
-		} else if (!rooted && !flying &&
-					(Dungeon.level.map[pos] == Terrain.TRAP || Dungeon.level.map[pos] == Terrain.HIGH_GRASS)){
+		//Hero moves in place if there is high grass to trample
+		} else if (!rooted && !flying && Dungeon.level.map[pos] == Terrain.HIGH_GRASS){
 			Dungeon.level.pressCell(pos);
 			spendAndNext( 1 / speed() );
 			return false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/elixirs/ElixirOfMight.java
Patch:
@@ -97,7 +97,7 @@ public void reset(){
 		}
 		
 		public int boost(){
-			return Math.round(left*boost(target.HT)/5f);
+			return Math.round(left*boost(15 + 5*((Hero)target).lvl)/5f);
 		}
 		
 		public static int boost(int HT){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v1_X_Changes.java
Patch:
@@ -235,15 +235,15 @@ public static void add_v1_4_Changes( ArrayList<ChangeInfo> changeInfos ) {
 				"_-_ Now gives a rare drop every 0-20 kills, up from every 0-25\n" +
 				"_-_ Now gives an equipment drop every 5-10 rare drops, down from every 4-8\n" +
 				"_-_ Equipment drops are now guaranteed to be at least level 1/2/3/4/5/6 at ring level 1/3/5/7/9/11, up from 1/3/6/10/15/21\n\n" +
-				"To limit the effectiveness of farming for a long time to stack up two highly upgraded ring of wealth, the level for equipment drops is based on your most powerful wealth ring, and a second one can only boost the level by another +1 at most."));
+				"To limit the effectiveness of farming for a long time to stack up two highly upgraded rings of wealth, the level for equipment drops is based on your most powerful wealth ring, and a second one can only boost the level by another +1 at most."));
 
 		changes.addButton(new ChangeButton( new WandOfTransfusion(),
 				"I'm boosting the wand of transfusion's damage scaling versus undead enemies slightly:\n\n" +
 				"_-_ Damage vs. undead scaling up to 1-2 per level, from 0.5-1"));
 
 		changes.addButton(new ChangeButton( new TelekineticGrab(),
 				"I'm enhancing the value of telekinetic grab a bit for users with multiple thrown weapons:\n\n" +
-				"_-_ now grabs all items at a location or stuck to an enemy, not just the first one."));
+				"_-_ Now grabs all items at a location or stuck to an enemy, not just the first one."));
 
 		changes.addButton(new ChangeButton(new ItemSprite(ItemSpriteSheet.SHORTSWORD, new ItemSprite.Glowing( 0x000000 )), "Annoying Curse",
 				"A very critical buff has been given to the annoying curse:\n\n" +

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/AcidicSprite.java
Patch:
@@ -31,7 +31,7 @@ public AcidicSprite() {
 		
 		texture( Assets.Sprites.SCORPIO );
 		
-		TextureFilm frames = new TextureFilm( texture, 18, 17 );
+		TextureFilm frames = new TextureFilm( texture, 17, 17 );
 		
 		idle = new Animation( 12, true );
 		idle.frames( frames, 14, 14, 14, 14, 14, 14, 14, 14, 15, 16, 15, 16, 15, 16 );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Berserk.java
Patch:
@@ -93,7 +93,7 @@ public void restoreFromBundle(Bundle bundle) {
 
 	@Override
 	public boolean act() {
-		if (berserking()){
+		if (state == State.BERSERK){
 			ShieldBuff buff = target.buff(WarriorShield.class);
 			if (target.shielding() > 0) {
 				//lose 2.5% of shielding per turn, but no less than 1

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/HeroSelectScene.java
Patch:
@@ -282,7 +282,7 @@ private void setSelectedHero(HeroClass cl){
 	@Override
 	public void update() {
 		super.update();
-		btnExit.visible = !SPDSettings.intro() || Rankings.INSTANCE.totalNumber > 0;
+		btnExit.visible = !SPDSettings.intro();
 		//do not fade when a window is open
 		for (Object v : members){
 			if (v instanceof Window) resetFade();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -771,9 +771,9 @@ private boolean actMove( HeroAction.Move action ) {
 		if (getCloser( action.dst )) {
 			return true;
 
-		//Hero moves in place if there is a trap to trigger or grass to trample
-		} else if (!rooted &&
-					(Dungeon.level.traps.get(pos) != null || Dungeon.level.map[pos] == Terrain.HIGH_GRASS)){
+		//Hero moves in place if there is an active trap to trigger or grass to trample
+		} else if (!rooted && !flying &&
+					(Dungeon.level.map[pos] == Terrain.TRAP || Dungeon.level.map[pos] == Terrain.HIGH_GRASS)){
 			Dungeon.level.pressCell(pos);
 			spendAndNext( 1 / speed() );
 			return false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/ScorpioSprite.java
Patch:
@@ -36,7 +36,7 @@ public ScorpioSprite() {
 		
 		texture( Assets.Sprites.SCORPIO );
 		
-		TextureFilm frames = new TextureFilm( texture, 18, 17 );
+		TextureFilm frames = new TextureFilm( texture, 17, 17 );
 		
 		idle = new Animation( 12, true );
 		idle.frames( frames, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 2, 1, 2 );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfBlastWave.java
Patch:
@@ -39,6 +39,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.levels.features.Door;
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.TenguDartTrap;
 import com.shatteredpixel.shatteredpixeldungeon.mechanics.Ballistica;
+import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
 import com.shatteredpixel.shatteredpixeldungeon.tiles.DungeonTilemap;
 import com.watabou.noosa.Game;
@@ -176,6 +177,7 @@ public void call() {
 				Dungeon.level.occupyCell(ch);
 				if (ch == Dungeon.hero){
 					Dungeon.observe();
+					GameScene.updateFog();
 				}
 			}
 		}), -1);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Berserk.java
Patch:
@@ -155,7 +155,7 @@ public boolean act() {
 	}
 
 	public float enchantFactor(float chance){
-		return chance + (Math.min(1f, power) * 0.15f) * ((Hero) target).pointsInTalent(Talent.ENRAGED_CATALYST);
+		return chance + ((Math.min(1f, power) * 0.15f) * ((Hero) target).pointsInTalent(Talent.ENRAGED_CATALYST));
 	}
 
 	public float damageFactor(float dmg){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/Weapon.java
Patch:
@@ -369,7 +369,7 @@ protected float procChanceMultiplier( Char attacker ){
 			float multi = RingOfArcana.enchantPowerMultiplier(attacker);
 			Berserk rage = attacker.buff(Berserk.class);
 			if (rage != null) {
-				multi += rage.enchantFactor(multi);
+				multi = rage.enchantFactor(multi);
 			}
 
 			if (attacker.buff(Talent.SpiritBladesTracker.class) != null

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Generator.java
Patch:
@@ -472,7 +472,7 @@ public static int order( Item item ) {
 					TimekeepersHourglass.class,
 					UnstableSpellbook.class
 			};
-			ARTIFACT.defaultProbs = new float[]{ 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
+			ARTIFACT.defaultProbs = new float[]{ 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 };
 			ARTIFACT.probs = ARTIFACT.defaultProbs.clone();
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/Armor.java
Patch:
@@ -198,6 +198,7 @@ public void execute(Hero hero, String action) {
 			if (!detaching.collect()){
 				Dungeon.level.drop(detaching, hero.pos);
 			}
+			updateQuickslot();
 		}
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -26,6 +26,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.Bones;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.GamesInProgress;
+import com.shatteredpixel.shatteredpixeldungeon.SPDSettings;
 import com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon;
 import com.shatteredpixel.shatteredpixeldungeon.Statistics;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Necromancer.java
Patch:
@@ -272,6 +272,7 @@ public boolean act(boolean enemyInFOV, boolean justAlerted) {
 					if (Actor.findChar(enemy.pos+c) == null
 							&& PathFinder.distance[enemy.pos+c] != Integer.MAX_VALUE
 							&& Dungeon.level.passable[enemy.pos+c]
+							&& (!hasProp(Necromancer.this, Property.LARGE) || Dungeon.level.openSpace[enemy.pos+c])
 							&& fieldOfView[enemy.pos+c]
 							&& Dungeon.level.trueDistance(pos, enemy.pos+c) < Dungeon.level.trueDistance(pos, summoningPos)){
 						summoningPos = enemy.pos+c;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CavesBossLevel.java
Patch:
@@ -223,7 +223,7 @@ public int randomRespawnCell( Char ch ) {
 		for (int i : PathFinder.NEIGHBOURS8){
 			int cell = entrance() + i;
 			if (passable[cell]
-					&& Actor.findChar(cell) != null
+					&& Actor.findChar(cell) == null
 					&& (!Char.hasProp(ch, Char.Property.LARGE) || openSpace[cell])){
 				candidates.add(cell);
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CityBossLevel.java
Patch:
@@ -279,7 +279,7 @@ public int randomRespawnCell( Char ch ) {
 		for (int i : PathFinder.NEIGHBOURS8){
 			int cell = entrance() + i;
 			if (passable[cell]
-					&& Actor.findChar(cell) != null
+					&& Actor.findChar(cell) == null
 					&& (!Char.hasProp(ch, Char.Property.LARGE) || openSpace[cell])){
 				candidates.add(cell);
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/HallsBossLevel.java
Patch:
@@ -205,7 +205,7 @@ public int randomRespawnCell( Char ch ) {
 		for (int i : PathFinder.NEIGHBOURS8){
 			int cell = entrance() + i;
 			if (passable[cell]
-					&& Actor.findChar(cell) != null
+					&& Actor.findChar(cell) == null
 					&& (!Char.hasProp(ch, Char.Property.LARGE) || openSpace[cell])){
 				candidates.add(cell);
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/LastLevel.java
Patch:
@@ -171,7 +171,7 @@ public int randomRespawnCell( Char ch ) {
 		for (int i : PathFinder.NEIGHBOURS8){
 			int cell = entrance() + i;
 			if (passable[cell]
-					&& Actor.findChar(cell) != null
+					&& Actor.findChar(cell) == null
 					&& (!Char.hasProp(ch, Char.Property.LARGE) || openSpace[cell])){
 				candidates.add(cell);
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonBossLevel.java
Patch:
@@ -692,7 +692,7 @@ public int randomRespawnCell( Char ch ) {
 		for (int i : PathFinder.NEIGHBOURS8){
 			int cell = ENTRANCE_POS + i;
 			if (passable[cell]
-					&& Actor.findChar(cell) != null
+					&& Actor.findChar(cell) == null
 					&& (!Char.hasProp(ch, Char.Property.LARGE) || openSpace[cell])){
 				candidates.add(cell);
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/ArcaneResin.java
Patch:
@@ -92,7 +92,7 @@ public int value() {
 
 		@Override
 		public String textPrompt() {
-			return Messages.get(this, "prompt");
+			return Messages.get(ArcaneResin.class, "prompt");
 		}
 
 		@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndJournal.java
Patch:
@@ -329,7 +329,7 @@ protected void layout() {
 		
 		private void updateList() {
 
-			if (!Document.ALCHEMY_GUIDE.isPageFound(currentPageIdx)){
+			if (currentPageIdx != -1 && !Document.ALCHEMY_GUIDE.isPageFound(currentPageIdx)){
 				currentPageIdx = -1;
 			}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/SPDAction.java
Patch:
@@ -155,16 +155,16 @@ public static LinkedHashMap<Integer, GameAction> getDefaults() {
 	private static final LinkedHashMap<Integer, GameAction> defaultControllerBindings = new LinkedHashMap<>();
 	static {
 		defaultControllerBindings.put( Input.Keys.BUTTON_START,     SPDAction.BACK );
+		defaultControllerBindings.put( Input.Keys.BUTTON_SELECT,    SPDAction.JOURNAL );
 
 		defaultControllerBindings.put( Input.Keys.BUTTON_R2,        SPDAction.LEFT_CLICK );
 		defaultControllerBindings.put( Input.Keys.BUTTON_THUMBR,    SPDAction.LEFT_CLICK );
 		defaultControllerBindings.put( Input.Keys.BUTTON_L2,        SPDAction.RIGHT_CLICK );
-		defaultControllerBindings.put( Input.Keys.BUTTON_SELECT,    SPDAction.MIDDLE_CLICK );
 
 		defaultControllerBindings.put( Input.Keys.DPAD_UP+1000,     SPDAction.TAG_ACTION );
-		defaultControllerBindings.put( Input.Keys.DPAD_LEFT+1000,   SPDAction.CYCLE);
+		defaultControllerBindings.put( Input.Keys.DPAD_LEFT+1000,   SPDAction.TAG_LOOT );
 		defaultControllerBindings.put( Input.Keys.DPAD_DOWN+1000,   SPDAction.TAG_RESUME );
-		defaultControllerBindings.put( Input.Keys.DPAD_RIGHT+1000,  SPDAction.TAG_LOOT );
+		defaultControllerBindings.put( Input.Keys.DPAD_RIGHT+1000,  SPDAction.CYCLE );
 
 		defaultControllerBindings.put( Input.Keys.BUTTON_THUMBL,    SPDAction.WAIT_OR_PICKUP );
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfBlastWave.java
Patch:
@@ -158,7 +158,7 @@ public void call() {
 				int oldPos = ch.pos;
 				ch.pos = newPos;
 				if (finalCollided && ch.isAlive()) {
-					ch.damage(Random.NormalIntRange(50, 50), this);
+					ch.damage(Random.NormalIntRange(finalDist, 2*finalDist), this);
 					if (ch.isAlive()) {
 						Paralysis.prolong(ch, Paralysis.class, 1 + finalDist/2f);
 					} else if (ch == Dungeon.hero){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/ChangesScene.java
Patch:
@@ -304,11 +304,11 @@ private void updateChangesText(Image icon, String title, String message){
 
 			int pw = 135 + rightPanel.marginHor() - 2;
 			changeBody.text(message, pw - rightPanel.marginHor());
-			while (changeBody.height() > rightPanel.height()-25
+			int ph = Camera.main.height - 36;
+			while (changeBody.height() > ph-25
 					&& changeBody.right() + 5 < Camera.main.width){
 				changeBody.maxWidth(changeBody.maxWidth()+5);
 			}
-			int ph = Camera.main.height - 36;
 			rightPanel.size(changeBody.maxWidth() + rightPanel.marginHor(), Math.max(ph, changeBody.height()+18+rightPanel.marginVer()));
 			changeBody.setPos(changeBody.left(), changeTitle.bottom()+2);
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndRanking.java
Patch:
@@ -321,7 +321,7 @@ public ItemsTab() {
 
 			float slotWidth = Math.min(28, ((WIDTH - slotsActive + 1) / (float)slotsActive));
 
-			for (int i = 0; i < slotsActive; i++){
+			for (int i = 0; i < QuickSlot.SIZE; i++){
 				if (Dungeon.quickslot.isNonePlaceholder(i)){
 					QuickSlotButton slot = new QuickSlotButton(Dungeon.quickslot.getItem(i));
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/CursedWand.java
Patch:
@@ -66,6 +66,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.plants.Swiftthistle;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.InterlevelScene;
+import com.shatteredpixel.shatteredpixeldungeon.ui.BadgesList;
 import com.shatteredpixel.shatteredpixeldungeon.ui.Icons;
 import com.shatteredpixel.shatteredpixeldungeon.ui.TargetHealthIndicator;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
@@ -223,12 +224,12 @@ private static boolean uncommonEffect(final Item origin, final Char user, final
 					if (toDamage == Dungeon.hero){
 						Sample.INSTANCE.play(Assets.Sounds.CURSED);
 						if (!toDamage.isAlive()) {
-							if (origin != null) {
+							if (user == Dungeon.hero && origin != null) {
 								Badges.validateDeathFromFriendlyMagic();
 								Dungeon.fail( origin.getClass() );
 								GLog.n( Messages.get( CursedWand.class, "ondeath", origin.name() ) );
 							} else {
-								Badges.validateDeathFromFriendlyMagic();
+								Badges.validateDeathFromEnemyMagic();
 								Dungeon.fail( toHeal.getClass() );
 							}
 						}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Albino.java
Patch:
@@ -43,7 +43,7 @@ public class Albino extends Rat {
 	@Override
 	public int attackProc( Char enemy, int damage ) {
 		damage = super.attackProc( enemy, damage );
-		if (Random.Int( 2 ) == 0) {
+		if (damage > 0 && Random.Int( 2 ) == 0) {
 			Buff.affect( enemy, Bleeding.class ).set( damage );
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SpecialRoom.java
Patch:
@@ -125,8 +125,6 @@ public static void initForRun() {
 			if (!runConsSpecials.isEmpty())     runSpecials.add(runConsSpecials.remove(0));
 		}
 
-		runSpecials.add(0, WeakFloorRoom.class);
-
 		pitNeededDepth = -1;
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/AquaBlast.java
Patch:
@@ -40,6 +40,7 @@ protected void affectTarget(Ballistica bolt, Hero hero) {
 
 		GeyserTrap geyser = new GeyserTrap();
 		geyser.pos = cell;
+		geyser.source = getClass();
 		if (bolt.path.size() > bolt.dist+1) {
 			geyser.centerKnockBackDirection = bolt.path.get(bolt.dist + 1);
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfBlastWave.java
Patch:
@@ -30,6 +30,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.effects.Effects;
 import com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Pushing;
+import com.shatteredpixel.shatteredpixeldungeon.items.spells.AquaBlast;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Elastic;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MagesStaff;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Terrain;
@@ -160,7 +161,7 @@ public void call() {
 					ch.damage(Random.NormalIntRange(finalDist, 2*finalDist), this);
 					Paralysis.prolong(ch, Paralysis.class, 1 + finalDist/2f);
 					if (ch == Dungeon.hero && !ch.isAlive()){
-						if ( cause == WandOfBlastWave.class){
+						if (cause == WandOfBlastWave.class || cause == AquaBlast.class){
 							Badges.validateDeathFromFriendlyMagic();
 						}
 						Dungeon.fail(cause);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/GeyserTrap.java
Patch:
@@ -46,6 +46,7 @@ public class GeyserTrap extends Trap {
 	}
 
 	public int centerKnockBackDirection = -1;
+	public Class source = getClass();
 
 	@Override
 	public void activate() {
@@ -76,7 +77,7 @@ public void activate() {
 				//trim it to just be the part that goes past them
 				trajectory = new Ballistica(trajectory.collisionPos, trajectory.path.get(trajectory.path.size()-1), Ballistica.PROJECTILE);
 				//knock them back along that ballistica
-				WandOfBlastWave.throwChar(ch, trajectory, 2, true, true, getClass());
+				WandOfBlastWave.throwChar(ch, trajectory, 2, true, true, source);
 			}
 		}
 
@@ -105,7 +106,7 @@ public void activate() {
 				//trace a ballistica in the direction of our target
 				Ballistica trajectory = new Ballistica(pos, targetpos, Ballistica.MAGIC_BOLT);
 				//knock them back along that ballistica
-				WandOfBlastWave.throwChar(ch, trajectory, 2, true, true, getClass());
+				WandOfBlastWave.throwChar(ch, trajectory, 2, true, true, source);
 			}
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -429,7 +429,7 @@ public static void switchLevel( final Level level, int pos ) {
 		level.addRespawner();
 		
 		for(Mob m : level.mobs){
-			if (m.pos == hero.pos){
+			if (m.pos == hero.pos && !Char.hasProp(m, Char.Property.IMMOVABLE)){
 				//displace mob
 				for(int i : PathFinder.NEIGHBOURS8){
 					if (Actor.findChar(m.pos+i) == null && level.passable[m.pos + i]){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SpecialRoom.java
Patch:
@@ -125,6 +125,8 @@ public static void initForRun() {
 			if (!runConsSpecials.isEmpty())     runSpecials.add(runConsSpecials.remove(0));
 		}
 
+		runSpecials.add(0, WeakFloorRoom.class);
+
 		pitNeededDepth = -1;
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/mage/WarpBeacon.java
Patch:
@@ -41,6 +41,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.plants.Swiftthistle;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.InterlevelScene;
+import com.shatteredpixel.shatteredpixeldungeon.ui.AttackIndicator;
 import com.shatteredpixel.shatteredpixeldungeon.ui.HeroIcon;
 import com.shatteredpixel.shatteredpixeldungeon.utils.BArray;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
@@ -161,6 +162,8 @@ protected void onSelect(int index) {
 							Invisibility.dispel();
 							Dungeon.observe();
 							GameScene.updateFog();
+							hero.checkVisibleMobs();
+							AttackIndicator.updateState();
 
 						} else {
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfIdentify.java
Patch:
@@ -49,7 +49,7 @@ protected void onItemSelected( Item item ) {
 		curUser.sprite.parent.add( new Identification( curUser.sprite.center().offset( 0, -16 ) ) );
 		
 		item.identify();
-		GLog.i( Messages.get(this, "it_is", item) );
+		GLog.i( Messages.get(this, "it_is", item.title()) );
 		
 		Badges.validateItemLevelAquired( item );
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/UnstableSpellbook.java
Patch:
@@ -125,7 +125,7 @@ public void execute( Hero hero, String action ) {
 
 				Scroll scroll;
 				do {
-					scroll = new ScrollOfLullaby();
+					scroll = (Scroll) Generator.randomUsingDefaults(Generator.Category.SCROLL);
 				} while (scroll == null
 						//reduce the frequency of these scrolls by half
 						||((scroll instanceof ScrollOfIdentify ||
@@ -294,7 +294,7 @@ public boolean act() {
 					&& target.buff(MagicImmune.class) == null
 					&& (lock == null || lock.regenOn())) {
 				//120 turns to charge at full, 80 turns to charge at 0/8
-				float chargeGain = 1;
+				float chargeGain = 1 / (120f - (chargeCap - charge)*5f);
 				chargeGain *= RingOfEnergy.artifactChargeMultiplier(target);
 				partialCharge += chargeGain;
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/glyphs/Brimstone.java
Patch:
@@ -36,6 +36,7 @@ public int proc(Armor armor, Char attacker, Char defender, int damage) {
 		// GhostHero.isImmune
 		// Shadowclone.isImmune
 		// ArmoredStatue.isImmune
+		// PrismaticImage.isImmune
 		return damage;
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/exotic/ScrollOfSirensSong.java
Patch:
@@ -56,7 +56,7 @@ public void doRead() {
 
 		@Override
 		public void onSelect(Integer cell) {
-			if (cell == null && isKnown() && !anonymous){
+			if (cell == null && isKnown()){
 				return;
 			}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -676,6 +676,7 @@ public boolean act() {
 		
 		checkVisibleMobs();
 		BuffIndicator.refreshHero();
+		BuffIndicator.refreshBoss();
 		
 		if (paralysed > 0) {
 			
@@ -754,7 +755,6 @@ private void ready() {
 		ready = true;
 
 		AttackIndicator.updateState();
-		BuffIndicator.refreshBoss();
 		
 		GameScene.ready();
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/BrokenSeal.java
Patch:
@@ -130,9 +130,8 @@ public void onSelect( Item item ) {
 				if (!armor.levelKnown){
 					GLog.w(Messages.get(BrokenSeal.class, "unknown_armor"));
 
-				} else if ((armor.cursed || armor.level() < 0)
-						&& (seal.getGlyph() == null || !seal.getGlyph().curse())){
-					GLog.w(Messages.get(BrokenSeal.class, "degraded_armor"));
+				} else if (armor.cursed && (seal.getGlyph() == null || !seal.getGlyph().curse())){
+					GLog.w(Messages.get(BrokenSeal.class, "cursed_armor"));
 
 				} else if (armor.glyph != null && seal.getGlyph() != null
 						&& armor.glyph.getClass() != seal.getGlyph().getClass()) {

File: SPD-classes/src/main/java/com/watabou/noosa/TextInput.java
Patch:
@@ -40,6 +40,7 @@
 import com.watabou.glwrap.Quad;
 import com.watabou.glwrap.Texture;
 import com.watabou.noosa.ui.Component;
+import com.watabou.utils.DeviceCompat;
 import com.watabou.utils.FileUtils;
 import com.watabou.utils.Point;
 
@@ -184,7 +185,7 @@ public synchronized void destroy() {
 			skin.dispose();
 			Game.inputHandler.removeInputProcessor(stage);
 			Gdx.input.setOnscreenKeyboardVisible(false);
-			Game.platform.updateSystemUI();
+			if (!DeviceCompat.isDesktop()) Game.platform.updateSystemUI();
 		}
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/standard/StandardRoom.java
Patch:
@@ -149,7 +149,7 @@ public boolean canMerge(Level l, Point p, int mergeTerrain) {
 	private static float[][] chances = new float[27][];
 	static {
 		chances[1] =  new float[]{10,  10,10,5, 0,0,0, 0,0,0, 0,0,0, 0,0,0,  1,0,1,0,1,0,1,1,0,0};
-		chances[2] =  new float[]{10,  10,10,5, 0,0,0, 0,0,0, 0,0,0, 0,1000,0,  1,1,1000,1,1,1,1,1,1,1};
+		chances[2] =  new float[]{10,  10,10,5, 0,0,0, 0,0,0, 0,0,0, 0,0,0,  1,1,1,1,1,1,1,1,1,1};
 		chances[4] =  chances[3] = chances[2];
 		chances[5] =  new float[]{10,  10,10,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0,  0,0,0,0,0,0,0,0,0,0};
 

File: SPD-classes/src/main/java/com/watabou/glwrap/Matrix.java
Patch:
@@ -21,8 +21,6 @@
 
 package com.watabou.glwrap;
 
-//TODO libGDX offer matrix classes as well, which might give better performance.
-//should investigate using them
 public class Matrix {
 
 	public static final float G2RAD = 0.01745329251994329576923690768489f;

File: SPD-classes/src/main/java/com/watabou/input/ControllerHandler.java
Patch:
@@ -110,7 +110,6 @@ public boolean buttonUp(Controller controller, int buttonCode) {
 	private float L2Trigger = 0f;
 	private float R2Trigger = 0f;
 
-	//FIXME these axis mappings seem to be wrong on Android (and iOS?) in some cases
 	@Override
 	public boolean axisMoved(Controller controller, int axisCode, float value) {
 		setControllerType(controller);

File: SPD-classes/src/main/java/com/watabou/noosa/Game.java
Patch:
@@ -146,9 +146,9 @@ public void resize(int width, int height) {
 		}
 	}
 
-	//FIXME this is a temporary workaround to improve start times on android (first frame is 'cheated' and skips rendering)
-	//this is partly to improve stats on google play, and partly to try and diagnose what the cause of slow loading times is
-	//ultimately once the cause is found it should be fixed and this should no longer be needed
+	//FIXME this is a hack to improve start times on android (first frame is 'cheated' and skips rendering)
+	//This is mainly to improve stats on google play, as lots of texture refreshing leads to slow warm starts
+	//Would be nice to accomplish this goal in a less hacky way
 	private boolean justResumed = true;
 
 	@Override

File: SPD-classes/src/main/java/com/watabou/noosa/audio/Music.java
Patch:
@@ -130,7 +130,6 @@ public synchronized void playTracks( String[] tracks, float[] chances, boolean s
 		@Override
 		public void onCompletion(com.badlogic.gdx.audio.Music music) {
 			//we do this in a separate thread to avoid graphics hitching while the music is prepared
-			//FIXME this fixes graphics stutter but there's still some audio stutter, perhaps keep more than 1 player alive?
 			if (!DeviceCompat.isDesktop()) {
 				new Thread() {
 					@Override
@@ -139,7 +138,7 @@ public void run() {
 					}
 				}.start();
 			} else {
-				//don't use a separate thread on desktop, causes errors and makes no performance difference(?)
+				//don't use a separate thread on desktop, causes errors and makes no performance difference
 				playNextTrack(music);
 			}
 		}
@@ -202,7 +201,6 @@ public synchronized void resume() {
 		}
 	}
 
-	//TODO do we need to dispose every player? Maybe just stop them and keep an LRU cache of 2 or 3?
 	public synchronized void stop() {
 		if (player != null) {
 			player.dispose();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
Patch:
@@ -706,7 +706,6 @@ public static void storeTalentsInBundle( Bundle bundle, Hero hero ){
 	}
 
 	public static void restoreTalentsFromBundle( Bundle bundle, Hero hero ){
-		//TODO restore replacements
 		if (bundle.contains("replacements")){
 			Bundle replacements = bundle.getBundle("replacements");
 			for (String key : replacements.getKeys()){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/ArcaneResin.java
Patch:
@@ -92,8 +92,7 @@ public int value() {
 
 		@Override
 		public String textPrompt() {
-			//FIXME give this its own prompt string
-			return Messages.get(MagesStaff.class, "prompt");
+			return Messages.get(this, "prompt");
 		}
 
 		@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/EnergyCrystal.java
Patch:
@@ -57,8 +57,7 @@ public ArrayList<String> actions(Hero hero ) {
 	public boolean doPickUp(Hero hero, int pos) {
 
 		Dungeon.energy += quantity;
-		//TODO Statistics.goldCollected += quantity;
-		//Badges.validateGoldCollected();
+		//TODO track energy collected maybe? We do already track recipes crafted though..
 
 		GameScene.pickUp( this, pos );
 		hero.sprite.showStatus( 0x44CCFF, TXT_VALUE, quantity );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/standard/StudyRoom.java
Patch:
@@ -57,7 +57,7 @@ public void paint(Level level) {
 			door.set( Door.Type.REGULAR );
 		}
 		
-		//TODO add support for giant size as well
+		//TODO add support for giant size as well?
 		if (sizeCat == SizeCategory.LARGE){
 			int pillarW = (width()-7)/2;
 			int pillarH = (height()-7)/2;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -445,10 +445,10 @@ public void draw() {
 			}
 			Dungeon.droppedItems.remove( Dungeon.depth );
 		}
-		
+
+		//pre-1.1.0 saves, including all logic surrounding Dungeon.portedItems
 		ArrayList<Item> ported = Dungeon.portedItems.get( Dungeon.depth );
 		if (ported != null){
-			//TODO currently items are only ported to boss rooms, so this works well
 			//might want to have a 'near entrance' function if items can be ported elsewhere
 			int pos;
 			//try to find a tile with no heap, otherwise just stick items onto a heap.
@@ -1080,7 +1080,6 @@ public static void plantSeed( int cell ) {
 		}
 	}
 	
-	//todo this doesn't account for walls right now
 	public static void discoverTile( int pos, int oldValue ) {
 		if (scene != null) {
 			scene.tiles.discover( pos, oldValue );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/SpectralNecromancerSprite.java
Patch:
@@ -36,7 +36,6 @@ public class SpectralNecromancerSprite extends MobSprite {
 	private Animation charging;
 	private Emitter summoningBones;
 
-	//TODO sprite is still a bit of a WIP
 	public SpectralNecromancerSprite(){
 		super();
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/WallBlockingTilemap.java
Patch:
@@ -72,8 +72,6 @@ public synchronized void updateMapCell(int cell) {
 			super.updateMapCell(cell);
 			return;
 		}
-		
-		//TODO should doors be considered? currently the blocking is a bit permissive around doors
 
 		//non-wall tiles
 		if (!wall(cell)) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/BuffIcon.java
Patch:
@@ -36,7 +36,6 @@ public class BuffIcon extends Image {
 
 	private final boolean large;
 
-	//TODO maybe roll fading behaviour into this too?
 	public BuffIcon(Buff buff, boolean large){
 		super( large ? Assets.Interfaces.BUFFS_LARGE : Assets.Interfaces.BUFFS_SMALL );
 		this.large = large;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/BuffIndicator.java
Patch:
@@ -220,7 +220,6 @@ private static class BuffButton extends IconButton {
 		public Image grey; //only for small
 		public BitmapText text; //only for large
 
-		//TODO for large buffs there is room to have text instead of fading
 		public BuffButton( Buff buff, boolean large ){
 			super( new BuffIcon(buff, large));
 			this.buff = buff;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/QuickSlotButton.java
Patch:
@@ -271,7 +271,6 @@ public void enable( boolean value ) {
 	}
 	
 	private void enableSlot() {
-		//TODO check if item persists!
 		slot.enable(Dungeon.quickslot.isNonePlaceholder( slotNum )
 				&& (Dungeon.hero.buff(LostInventory.class) == null || Dungeon.quickslot.getItem(slotNum).keptThoughLostInvent));
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/RenderedTextBlock.java
Patch:
@@ -239,7 +239,7 @@ protected synchronized void layout() {
 
 				if ((x - this.x) > width) width = (x - this.x);
 				
-				//TODO spacing currently doesn't factor in halfwidth and fullwidth characters
+				//Note that spacing currently doesn't factor in halfwidth and fullwidth characters
 				//(e.g. Ideographic full stop)
 				x -= 0.5f;
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Window.java
Patch:
@@ -201,8 +201,6 @@ public boolean onSignal( KeyEvent event ) {
 			}
 		}
 		
-		//TODO currently always eats the key event as windows always take full focus
-		// if they are ever made more flexible, might not want to do this in all cases
 		return true;
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v1_X_Changes.java
Patch:
@@ -562,7 +562,6 @@ public static void add_v1_1_Changes( ArrayList<ChangeInfo> changeInfos ) {
 
 				"_-_ Updated translations and translator credits"));
 
-		//TODO condense to two bugfix entries
 		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes") + " 1",
 				"Fixed:\n" +
 				"_-_ Various minor/rare visual and textual errors\n" +

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/MasterThievesArmband.java
Patch:
@@ -30,6 +30,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.CounterBuff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Cripple;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Invisibility;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MagicImmune;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent;
@@ -137,6 +138,8 @@ public void call() {
 							float lootMultiplier = 1f + 0.1f*level();
 							int debuffDuration = 3 + level()/2;
 
+							Invisibility.dispel(curUser);
+
 							if (surprised){
 								lootMultiplier += 0.5f;
 								Surprise.hit(ch);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/painters/RegularPainter.java
Patch:
@@ -306,7 +306,7 @@ protected boolean mergeRooms( Level l, Room r, Room n, Point start, int mergeTer
 			}
 
 			if (merge.height() >= 3) {
-				Painter.fill(l, merge.left, merge.top + 1, 1, merge.height()-1, mergeTerrain);
+				r.merge(l, n, new Rect(merge.left, merge.top + 1, merge.left+1, merge.bottom), mergeTerrain);
 				return true;
 			} else {
 				return false;
@@ -330,7 +330,7 @@ protected boolean mergeRooms( Level l, Room r, Room n, Point start, int mergeTer
 			}
 
 			if (merge.width() >= 3) {
-				Painter.fill(l, merge.left + 1, merge.top, merge.width()-1, 1, mergeTerrain);
+				r.merge(l, n, new Rect(merge.left + 1, merge.top, merge.right, merge.top+1), mergeTerrain);
 				return true;
 			} else {
 				return false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/standard/StandardRoom.java
Patch:
@@ -149,7 +149,7 @@ public boolean canMerge(Level l, Point p, int mergeTerrain) {
 	private static float[][] chances = new float[27][];
 	static {
 		chances[1] =  new float[]{10,  10,10,5, 0,0,0, 0,0,0, 0,0,0, 0,0,0,  1,0,1,0,1,0,1,1,0,0};
-		chances[2] =  new float[]{10,  10,10,5, 0,0,0, 0,0,0, 0,0,0, 0,0,0,  1,1,1,1,1,1,1,1,1,1};
+		chances[2] =  new float[]{10,  10,10,5, 0,0,0, 0,0,0, 0,0,0, 0,1000,0,  1,1,1000,1,1,1,1,1,1,1};
 		chances[4] =  chances[3] = chances[2];
 		chances[5] =  new float[]{10,  10,10,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0,  0,0,0,0,0,0,0,0,0,0};
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndHardNotification.java
Patch:
@@ -72,6 +72,7 @@ public void update() {
 			timeLeft -= incTime;
 			incTime = 0;
 			btnOkay.text(btnMessage + " (" + (int)Math.ceil(timeLeft) + ")");
+			btnOkay.enable(false);
 		}
 
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Swarm.java
Patch:
@@ -90,7 +90,7 @@ public int defenseProc( Char enemy, int damage ) {
 			for (int n : neighbours) {
 				if (!Dungeon.level.solid[n]
 						&& Actor.findChar( n ) == null
-						&& (Dungeon.level.passable[target] || Dungeon.level.avoid[target])
+						&& (Dungeon.level.passable[n] || Dungeon.level.avoid[n])
 						&& (!properties().contains(Property.LARGE) || Dungeon.level.openSpace[n])) {
 					candidates.add( n );
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfRetribution.java
Patch:
@@ -27,8 +27,10 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Weakness;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
+import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
+import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
 import com.watabou.noosa.audio.Sample;
 
 public class ScrollOfRetribution extends Scroll {
@@ -47,6 +49,7 @@ public void doRead() {
 		float power = Math.min( 4f, 4.45f*hpPercent);
 		
 		Sample.INSTANCE.play( Assets.Sounds.BLAST );
+		GLog.i(Messages.get(this, "blast"));
 		
 		for (Mob mob : Dungeon.level.mobs.toArray( new Mob[0] )) {
 			if (Dungeon.level.heroFOV[mob.pos]) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/exotic/ScrollOfPsionicBlast.java
Patch:
@@ -28,6 +28,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Weakness;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
+import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfRetribution;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
@@ -46,6 +47,7 @@ public void doRead() {
 		GameScene.flash( 0x80FFFFFF );
 		
 		Sample.INSTANCE.play( Assets.Sounds.BLAST );
+		GLog.i(Messages.get(ScrollOfRetribution.class, "blast"));
 		
 		int targets = 0;
 		for (Mob mob : Dungeon.level.mobs.toArray( new Mob[0] )) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/Armor.java
Patch:
@@ -105,7 +105,7 @@ public int defenseFactor(int level){
 	public boolean curseInfusionBonus = false;
 	public boolean masteryPotionBonus = false;
 	
-	private BrokenSeal seal;
+	protected BrokenSeal seal;
 	
 	public int tier;
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/ClassArmor.java
Patch:
@@ -224,6 +224,8 @@ public void onSelect(Item item) {
 								cursed = armor.cursed;
 								curseInfusionBonus = armor.curseInfusionBonus;
 								masteryPotionBonus = armor.masteryPotionBonus;
+								if (armor.checkSeal() != null) seal = armor.checkSeal();
+
 								identify();
 
 								GLog.p( Messages.get(ClassArmor.class, "transfer_complete") );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Regeneration.java
Patch:
@@ -53,7 +53,7 @@ public boolean act() {
 			ChaliceOfBlood.chaliceRegen regenBuff = Dungeon.hero.buff( ChaliceOfBlood.chaliceRegen.class);
 
 			float delay = REGENERATION_DELAY;
-			if (regenBuff != null) {
+			if (regenBuff != null && target.buff(MagicImmune.class) == null) {
 				if (regenBuff.isCursed()) {
 					delay *= 1.5f;
 				} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/Ring.java
Patch:
@@ -26,6 +26,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.EnhancedRings;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MagicImmune;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent;
 import com.shatteredpixel.shatteredpixeldungeon.items.Generator;
@@ -304,6 +305,7 @@ public int buffedLvl() {
 	}
 
 	public static int getBonus(Char target, Class<?extends RingBuff> type){
+		if (target.buff(MagicImmune.class) != null) return 0;
 		int bonus = 0;
 		for (RingBuff buff : target.buffs(type)) {
 			bonus += buff.level();
@@ -312,6 +314,7 @@ public static int getBonus(Char target, Class<?extends RingBuff> type){
 	}
 
 	public static int getBuffedBonus(Char target, Class<?extends RingBuff> type){
+		if (target.buff(MagicImmune.class) != null) return 0;
 		int bonus = 0;
 		for (RingBuff buff : target.buffs(type)) {
 			bonus += buff.buffedLvl();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Toolbar.java
Patch:
@@ -249,6 +249,7 @@ public GameAction keyAction() {
 			@Override
 			protected void onClick() {
 				if (Dungeon.hero.ready && !GameScene.cancel()) {
+					Dungeon.hero.waitOrPickup = true;
 					if (Dungeon.level.heaps.get(Dungeon.hero.pos) != null
 						&& Dungeon.hero.handle(Dungeon.hero.pos)){
 						Dungeon.hero.next();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Amulet.java
Patch:
@@ -107,6 +107,7 @@ public void afterCreate() {
 				Badges.validateChampion(Challenges.activeChallenges());
 				try {
 					Dungeon.saveAll();
+					Badges.saveGlobal();
 				} catch (IOException e) {
 					ShatteredPixelDungeon.reportException(e);
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/ArcaneBomb.java
Patch:
@@ -37,7 +37,7 @@
 
 import java.util.ArrayList;
 
-public class ArcaneBomb extends Bomb {
+public class ArcaneBomb extends Bomb.MagicalBomb {
 	
 	{
 		image = ItemSpriteSheet.ARCANE_BOMB;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/HolyBomb.java
Patch:
@@ -36,7 +36,7 @@
 
 import java.util.ArrayList;
 
-public class HolyBomb extends Bomb {
+public class HolyBomb extends Bomb.MagicalBomb {
 	
 	{
 		image = ItemSpriteSheet.HOLY_BOMB;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/stones/StoneOfBlast.java
Patch:
@@ -32,7 +32,7 @@ public class StoneOfBlast extends Runestone {
 	
 	@Override
 	protected void activate(int cell) {
-		new Bomb().explode(cell);
+		new Bomb.MagicalBomb().explode(cell);
 	}
 	
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/curses/Explosive.java
Patch:
@@ -76,7 +76,7 @@ public int proc( Weapon weapon, Char attacker, Char defender, int damage ) {
 				}
 			}
 
-			new Bomb().explode(explosionPos);
+			new Bomb.MagicalBomb().explode(explosionPos);
 
 			durability = 100;
 			Item.updateQuickslot();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/AscensionChallenge.java
Patch:
@@ -209,7 +209,7 @@ public void onLevelSwitch(){
 	}
 
 	public void saySwitch(){
-		if (Dungeon.bossLevel() || Dungeon.depth == 1){
+		if (Dungeon.bossLevel()){
 			GLog.p(Messages.get(this, "break"));
 		} else {
 			if (Dungeon.depth == 1){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/mage/WarpBeacon.java
Patch:
@@ -196,6 +196,7 @@ protected void onSelect(int index) {
 			PathFinder.buildDistanceMap(target, BArray.or(Dungeon.level.passable, Dungeon.level.avoid, null));
 			if (Dungeon.level.pit[target] ||
 					(Dungeon.level.solid[target] && !Dungeon.level.passable[target]) ||
+					!(Dungeon.level.passable[target] || Dungeon.level.avoid[target]) ||
 					PathFinder.distance[hero.pos] == Integer.MAX_VALUE){
 				GLog.w( Messages.get(WarpBeacon.class, "invalid_beacon") );
 				return;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Swarm.java
Patch:
@@ -88,7 +88,9 @@ public int defenseProc( Char enemy, int damage ) {
 			
 			int[] neighbours = {pos + 1, pos - 1, pos + Dungeon.level.width(), pos - Dungeon.level.width()};
 			for (int n : neighbours) {
-				if (!Dungeon.level.solid[n] && Actor.findChar( n ) == null
+				if (!Dungeon.level.solid[n]
+						&& Actor.findChar( n ) == null
+						&& (Dungeon.level.passable[target] || Dungeon.level.avoid[target])
 						&& (!properties().contains(Property.LARGE) || Dungeon.level.openSpace[n])) {
 					candidates.add( n );
 				}

File: SPD-classes/src/main/java/com/watabou/input/InputHandler.java
Patch:
@@ -91,6 +91,7 @@ public void processAllEvents(){
 	@Override
 	public synchronized boolean touchDown(int screenX, int screenY, int pointer, int button) {
 		ControllerHandler.setControllerPointer(false);
+		ControllerHandler.controllerActive = false;
 		Gdx.input.setOnscreenKeyboardVisible(false); //in-game events never need keyboard, so hide it
 
 		if (button >= 3 && KeyBindings.isKeyBound( button + 1000 )) {

File: SPD-classes/src/main/java/com/watabou/input/KeyBindings.java
Patch:
@@ -87,10 +87,8 @@ public static int getFirstKeyForAction(GameAction action, boolean preferControll
 		ArrayList<Integer> buttons = getControllerKeysForAction(action);
 		if (preferController){
 			if (!buttons.isEmpty())         return buttons.get(0);
-			else if (!keys.isEmpty())       return keys.get(0);
 		} else {
 			if (!keys.isEmpty())            return keys.get(0);
-			else if (!buttons.isEmpty())    return buttons.get(0);
 		}
 		return 0;
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndSettings.java
Patch:
@@ -113,7 +113,7 @@ protected void select(boolean value) {
 		if (DeviceCompat.hasHardKeyboard() || ControllerHandler.isControllerConnected()) {
 			add( input );
 			Image icon;
-			if (ControllerHandler.controllerPointerActive() || !DeviceCompat.hasHardKeyboard()){
+			if (ControllerHandler.controllerActive || !DeviceCompat.hasHardKeyboard()){
 				icon = Icons.get(Icons.CONTROLLER);
 			} else {
 				icon = Icons.get(Icons.KEYBOARD);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Badges.java
Patch:
@@ -864,6 +864,7 @@ public static void validateMasteryCombo( int n ) {
 	public static void validateVictory() {
 
 		Badge badge = Badge.VICTORY;
+		local.add( badge );
 		displayBadge( badge );
 
 		switch (Dungeon.hero.heroClass) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -1195,6 +1195,8 @@ public static void flash( int color, boolean lightmode ) {
 	}
 
 	public static void gameOver() {
+		if (scene == null) return;
+
 		Banner gameOver = new Banner( BannerSprites.get( BannerSprites.Type.GAME_OVER ) );
 		gameOver.show( 0x000000, 2f );
 		scene.showBanner( gameOver );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/Potion.java
Patch:
@@ -74,6 +74,7 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.LinkedHashMap;
 
 public class Potion extends Item {
 
@@ -84,7 +85,7 @@ public class Potion extends Item {
 
 	private static final float TIME_TO_DRINK = 1f;
 
-	private static final HashMap<String, Integer> colors = new HashMap<String, Integer>() {
+	private static final LinkedHashMap<String, Integer> colors = new LinkedHashMap<String, Integer>() {
 		{
 			put("crimson",ItemSpriteSheet.POTION_CRIMSON);
 			put("amber",ItemSpriteSheet.POTION_AMBER);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/Ring.java
Patch:
@@ -42,12 +42,13 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.LinkedHashMap;
 
 public class Ring extends KindofMisc {
 	
 	protected Buff buff;
 
-	private static final HashMap<String, Integer> gems = new HashMap<String, Integer>() {
+	private static final LinkedHashMap<String, Integer> gems = new LinkedHashMap<String, Integer>() {
 		{
 			put("garnet",ItemSpriteSheet.RING_GARNET);
 			put("ruby",ItemSpriteSheet.RING_RUBY);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/Scroll.java
Patch:
@@ -60,14 +60,15 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.LinkedHashMap;
 
 public abstract class Scroll extends Item {
 	
 	public static final String AC_READ	= "READ";
 	
 	protected static final float TIME_TO_READ	= 1f;
 
-	private static final HashMap<String, Integer> runes = new HashMap<String, Integer>() {
+	private static final LinkedHashMap<String, Integer> runes = new LinkedHashMap<String, Integer>() {
 		{
 			put("KAUNAN",ItemSpriteSheet.SCROLL_KAUNAN);
 			put("SOWILO",ItemSpriteSheet.SCROLL_SOWILO);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/GatewayTrap.java
Patch:
@@ -127,7 +127,7 @@ public void activate() {
 				}
 
 				Heap heap = Dungeon.level.heaps.get(pos + i);
-				if (heap != null){
+				if (heap != null && heap.type == Heap.Type.HEAP){
 					Item item = heap.pickUp();
 					Heap dropped = Dungeon.level.drop( item, telePos );
 					dropped.type = heap.type;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/ClassArmor.java
Patch:
@@ -210,7 +210,7 @@ public boolean itemSelectable(Item item) {
 
 							@Override
 							public void onSelect(Item item) {
-								if (item == null) return;
+								if (item == null || item == ClassArmor.this) return;
 
 								Armor armor = (Armor)item;
 								armor.detach(hero.belongings.backpack);
@@ -226,7 +226,7 @@ public void onSelect(Item item) {
 								masteryPotionBonus = armor.masteryPotionBonus;
 								identify();
 
-								GLog.p( "Your heroic armor's properties have been transferred!" );
+								GLog.p( Messages.get(ClassArmor.class, "transfer_complete") );
 								hero.sprite.operate(hero.pos);
 								hero.sprite.emitter().burst( Speck.factory( Speck.CROWN), 12 );
 								Sample.INSTANCE.play( Assets.Sounds.EVOKE );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Badges.java
Patch:
@@ -97,7 +97,7 @@ public enum Badge {
 		BOSS_SLAIN_3                ( 48 ),
 		ALL_POTIONS_IDENTIFIED      ( 49 ),
 		ALL_SCROLLS_IDENTIFIED      ( 50 ),
-		DEATH_FROM_ENEMY_MAGIC( 51 ),
+		DEATH_FROM_ENEMY_MAGIC      ( 51 ),
 		DEATH_FROM_FRIENDLY_MAGIC   ( 52 ),
 		DEATH_FROM_SACRIFICE        ( 53 ),
 		BOSS_SLAIN_1_WARRIOR,

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -417,12 +417,12 @@ public static void switchLevel( final Level level, int pos ) {
 		Dungeon.level = level;
 		hero.pos = pos;
 
-		Mob.restoreAllies( level, pos );
-
 		if (hero.buff(AscensionChallenge.class) != null){
 			hero.buff(AscensionChallenge.class).onLevelSwitch();
 		}
 
+		Mob.restoreAllies( level, pos );
+
 		Actor.init();
 
 		level.addRespawner();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfTransfusion.java
Patch:
@@ -106,7 +106,7 @@ public void onZap(Ballistica beam) {
 				//grant a self-shield, and...
 				Buff.affect(curUser, Barrier.class).setShield((5 + buffedLvl()));
 				
-				//chars living enemies
+				//charms living enemies
 				if (!ch.properties().contains(Char.Property.UNDEAD)) {
 					Charm charm = Buff.affect(ch, Charm.class, Charm.DURATION/2f);
 					charm.object = curUser.id();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndRanking.java
Patch:
@@ -92,7 +92,8 @@ public WndRanking( final Rankings.Record rec ) {
 				hide();
 			}
 		} catch ( Exception e ) {
-			Game.scene().add( new WndError( Messages.get(WndRanking.class, "error" )));
+			hide();
+			Game.scene().addToFront( new WndError( Messages.get(WndRanking.class, "error" )));
 		}
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/curses/Explosive.java
Patch:
@@ -109,7 +109,7 @@ public String desc() {
 		} else if (durability > 10){
 			desc += " " + Messages.get(this, "desc_warm");
 		} else {
-			desc += " " + Messages.get(this, "desc_hot");
+			desc += " _" + Messages.get(this, "desc_hot") + "_";
 		}
 		return desc;
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/AmuletScene.java
Patch:
@@ -77,7 +77,7 @@ protected void onClick() {
 				btnExit.enable(false);
 				btnStay.enable(false);
 
-				add(new Delayer(1f){
+				AmuletScene.this.add(new Delayer(0.1f){
 					@Override
 					protected void onComplete() {
 						if (BadgeBanner.isShowingBadges()){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java
Patch:
@@ -48,7 +48,7 @@ public ShatteredPixelDungeon( PlatformSupport platform ) {
 		//pre-v1.3.0
 		com.watabou.utils.Bundle.addAlias(
 				com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Bleeding.class,
-				"com.shatteredpixel.shatteredpixeldungeon.levels.features.Chasm$FallBleed.class" );
+				"com.shatteredpixel.shatteredpixeldungeon.levels.features.Chasm$FallBleed" );
 		com.watabou.utils.Bundle.addAlias(
 				com.shatteredpixel.shatteredpixeldungeon.plants.Mageroyal.class,
 				"com.shatteredpixel.shatteredpixeldungeon.plants.Dreamfoil" );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/AscensionChallenge.java
Patch:
@@ -213,8 +213,8 @@ public void onLevelSwitch(){
 					if (!mob.reset()) {
 						Dungeon.level.mobs.remove( mob );
 					}
-					Dungeon.level.spawnMob(12);
 				}
+				Dungeon.level.spawnMob(12);
 
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/CorrosiveGas.java
Patch:
@@ -55,7 +55,7 @@ protected void evolve() {
 					cell = i + j*Dungeon.level.width();
 					if (cur[cell] > 0 && (ch = Actor.findChar( cell )) != null) {
 						if (!ch.isImmune(this.getClass()))
-							Buff.affect(ch, Corrosion.class).set(2f, strength);
+							Buff.affect(ch, Corrosion.class).set(2f, strength, source);
 					}
 				}
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfBlastWave.java
Patch:
@@ -117,7 +117,7 @@ public static void throwChar(final Char ch, final Ballistica trajectory, int pow
 
 		boolean collided = dist == trajectory.dist;
 
-		if (dist == 0
+		if (dist <= 0
 				|| ch.rooted
 				|| ch.properties().contains(Char.Property.IMMOVABLE)) return;
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/HeroSelectScene.java
Patch:
@@ -121,6 +121,7 @@ protected void onClick() {
 				if (GamesInProgress.selectedClass == null) return;
 
 				Dungeon.hero = null;
+				Dungeon.daily = false;
 				ActionIndicator.action = null;
 				InterlevelScene.mode = InterlevelScene.Mode.DESCEND;
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndGameInProgress.java
Patch:
@@ -121,6 +121,7 @@ protected void onClick() {
 				GamesInProgress.curSlot = slot;
 				
 				Dungeon.hero = null;
+				Dungeon.daily = false;
 				ActionIndicator.action = null;
 				InterlevelScene.mode = InterlevelScene.Mode.CONTINUE;
 				ShatteredPixelDungeon.switchScene(InterlevelScene.class);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndStartGame.java
Patch:
@@ -94,6 +94,7 @@ protected void onClick() {
 				
 				GamesInProgress.curSlot = slot;
 				Dungeon.hero = null;
+				Dungeon.daily = false;
 				ActionIndicator.action = null;
 				InterlevelScene.mode = InterlevelScene.Mode.DESCEND;
 				

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -483,9 +483,7 @@ public Mob createMob() {
 		}
 
 		Mob m = Reflection.newInstance(mobsToSpawn.remove(0));
-		if (Dungeon.isChallenged(Challenges.CHAMPION_ENEMIES)){
-			ChampionEnemy.rollForChampion(m);
-		}
+		ChampionEnemy.rollForChampion(m);
 		return m;
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/PitRoom.java
Patch:
@@ -66,7 +66,6 @@ public void paint( Level level ) {
 		
 		int remains = level.pointToCell(center());
 		
-		level.drop( new CrystalKey( Dungeon.depth ), remains ).type = Heap.Type.SKELETON;
 		Item mainLoot = null;
 		do {
 			switch (Random.Int(3)){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/Ratmogrify.java
Patch:
@@ -204,6 +204,7 @@ protected boolean act() {
 				original.clearTime();
 				GameScene.add(original);
 
+				EXP = 0;
 				destroy();
 				sprite.killAndErase();
 				CellEmitter.get(original.pos).burst(Speck.factory(Speck.WOOL), 4);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTransmutation.java
Patch:
@@ -90,6 +90,7 @@ protected void onItemSelected(Item item) {
 					item.cursed = false; //to allow it to be unequipped
 					((EquipableItem) item).doUnequip(Dungeon.hero, false);
 					((EquipableItem) result).doEquip(Dungeon.hero);
+					Dungeon.hero.spend(-Dungeon.hero.cooldown()); //cancel equip/unequip time
 				} else {
 					item.detach(Dungeon.hero.belongings.backpack);
 					if (!result.collect()) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfLivingEarth.java
Patch:
@@ -309,6 +309,9 @@ public static class EarthGuardian extends NPC {
 			alignment = Alignment.ALLY;
 			state = HUNTING;
 			intelligentAlly = true;
+
+			properties.add(Property.INORGANIC);
+
 			WANDERING = new Wandering();
 
 			//before other mobs

File: SPD-classes/src/main/java/com/watabou/input/ControllerHandler.java
Patch:
@@ -54,8 +54,7 @@ private static void setControllerType(Controller controller){
 	}
 
 	public static boolean controllersSupported() {
-		//disabled on iOS as a temporary workaround for dependency issues between RoboVM and gdx-controllers
-		if (DeviceCompat.isiOS() || (DeviceCompat.isAndroid() && Gdx.app.getVersion() < 16)) {
+		if (DeviceCompat.isAndroid() && Gdx.app.getVersion() < 16) {
 			return false;
 		} else {
 			return true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -780,7 +780,7 @@ public static void win( Class cause ) {
 	}
 
 	public static void updateLevelExplored(){
-		if (branch == 0 && level instanceof RegularLevel){
+		if (branch == 0 && level instanceof RegularLevel && !Dungeon.bossLevel()){
 			Statistics.floorsExplored.put( depth, level.isLevelExplored(depth));
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Golem.java
Patch:
@@ -30,6 +30,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.Generator;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfTeleportation;
+import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.GolemSprite;
 import com.shatteredpixel.shatteredpixeldungeon.utils.BArray;
 import com.watabou.utils.Bundle;
@@ -164,6 +165,7 @@ public void teleportEnemy(){
 			if (enemy instanceof Hero){
 				((Hero) enemy).interrupt();
 				Dungeon.observe();
+				GameScene.updateFog();
 			}
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/SPDSettings.java
Patch:
@@ -121,7 +121,7 @@ public static int visualGrid() {
 
 	public static final String KEY_UI_SIZE 	    = "full_ui";
 	public static final String KEY_SCALE		= "scale";
-	public static final String KEY_QUICKSLOTS	= "quickslots";
+	public static final String KEY_QUICK_SWAP	= "quickslot_swapper";
 	public static final String KEY_FLIPTOOLBAR	= "flipped_ui";
 	public static final String KEY_FLIPTAGS 	= "flip_tags";
 	public static final String KEY_BARMODE		= "toolbar_mode";
@@ -152,9 +152,9 @@ public static int scale() {
 		return getInt( KEY_SCALE, 0 );
 	}
 	
-	public static void quickSlots( boolean value ){ put( KEY_QUICKSLOTS, value ); }
+	public static void quickSwapper(boolean value ){ put( KEY_QUICK_SWAP, value ); }
 	
-	public static boolean quickSlots(){ return getBoolean( KEY_QUICKSLOTS, false); }
+	public static boolean quickSwapper(){ return getBoolean( KEY_QUICK_SWAP, true); }
 	
 	public static void flipToolbar( boolean value) {
 		put(KEY_FLIPTOOLBAR, value );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Toolbar.java
Patch:
@@ -231,7 +231,7 @@ protected void layout() {
 		if (PixelScene.uiCamera.width > 170) quickslotsToShow ++;
 
 		int startingSlot;
-		if (SPDSettings.quickSlots() && quickslotsToShow < 6){
+		if (SPDSettings.quickSwapper() && quickslotsToShow < 6){
 			quickslotsToShow = 3;
 			startingSlot = swappedQuickslots ? 3 : 0;
 			btnSwap.visible = true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndSettings.java
Patch:
@@ -520,11 +520,11 @@ protected void onClick() {
 									@Override
 									protected void onClick() {
 										super.onClick();
-										SPDSettings.quickSlots(checked());
+										SPDSettings.quickSwapper(checked());
 										Toolbar.updateLayout();
 									}
 								};
-								chkQuickSwapper.checked(SPDSettings.quickSlots());
+								chkQuickSwapper.checked(SPDSettings.quickSwapper());
 								add(chkQuickSwapper);
 
 								swapperDesc = PixelScene.renderTextBlock(Messages.get(WndSettings.UITab.this, "swapper_desc"), 5);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/AscensionChallenge.java
Patch:
@@ -81,7 +81,7 @@ public static float statModifier(Char ch){
 		}
 
 		for (Class<?extends Mob> cls : modifiers.keySet()){
-			if (ch.getClass().isAssignableFrom(cls)){
+			if (cls.isAssignableFrom(ch.getClass())){
 				return modifiers.get(cls);
 			}
 		}
@@ -132,7 +132,7 @@ public static void processEnemyKill(Char enemy){
 		//only enemies that are boosted count
 		boolean found = false;
 		for (Class<?extends Mob> cls : modifiers.keySet()){
-			if (enemy.getClass().isAssignableFrom(cls)){
+			if (cls.isAssignableFrom(enemy.getClass())){
 				found = true;
 				break;
 			}
@@ -168,7 +168,7 @@ public static int AscensionExp(Mob m){
 			return 7; //half of 13, rounded up
 		} else {
 			for (Class<?extends Mob> cls : modifiers.keySet()){
-				if (m.getClass().isAssignableFrom(cls)){
+				if (cls.isAssignableFrom(m.getClass())){
 					return Math.max(13, m.EXP); //same exp as an eye
 				}
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1223,7 +1223,7 @@ public void damage( int dmg, Object src ) {
 		if (!(src instanceof Char)){
 			//reduce damage here if it isn't coming from a character (if it is we already reduced it)
 			if (endure != null){
-				dmg = endure.adjustDamageTaken(dmg);
+				dmg = Math.round(endure.adjustDamageTaken(dmg));
 			}
 			//the same also applies to challenge scroll damage reduction
 			if (buff(ScrollOfChallenge.ChallengeArena.class) != null){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/warrior/Endure.java
Patch:
@@ -109,10 +109,10 @@ public void setup(Hero hero){
 			hitsLeft = 0;
 		}
 
-		public int adjustDamageTaken(int damage){
+		public float adjustDamageTaken(float damage){
 			if (enduring) {
 				damageBonus += damage/2;
-				return damage/2;
+				return damage/2f;
 			}
 			return damage;
 		}
@@ -155,7 +155,7 @@ public void endEnduring(){
 			}
 		}
 
-		public int damageFactor(int damage){
+		public float damageFactor(float damage){
 			if (enduring){
 				return damage;
 			} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/curses/Explosive.java
Patch:
@@ -47,7 +47,7 @@ public class Explosive extends Weapon.Enchantment {
 	public int proc( Weapon weapon, Char attacker, Char defender, int damage ) {
 
 		//average value of 5, or 20 hits to an explosion
-		int durToReduce = Random.IntRange(0, 10);
+		int durToReduce = Math.round(Random.IntRange(0, 10) * procChanceMultiplier(attacker));
 		int currentDurability = durability;
 		durability -= durToReduce;
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java
Patch:
@@ -51,7 +51,7 @@ public ShatteredPixelDungeon( PlatformSupport platform ) {
 				"com.shatteredpixel.shatteredpixeldungeon.plants.Dreamfoil" );
 		com.watabou.utils.Bundle.addAlias(
 				com.shatteredpixel.shatteredpixeldungeon.plants.Mageroyal.Seed.class,
-				"com.shatteredpixel.shatteredpixeldungeon.plants.Dreamfoil.Seed" );
+				"com.shatteredpixel.shatteredpixeldungeon.plants.Dreamfoil$Seed" );
 
 		com.watabou.utils.Bundle.addAlias(
 				com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Dazzling.class,

File: SPD-classes/src/main/java/com/watabou/input/ControllerHandler.java
Patch:
@@ -54,7 +54,8 @@ private static void setControllerType(Controller controller){
 	}
 
 	public static boolean controllersSupported() {
-		if (DeviceCompat.isAndroid() && Gdx.app.getVersion() < 16) {
+		//disabled on iOS as a temporary workaround for dependency issues between RoboVM and gdx-controllers
+		if (DeviceCompat.isiOS() || (DeviceCompat.isAndroid() && Gdx.app.getVersion() < 16)) {
 			return false;
 		} else {
 			return true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v1_X_Changes.java
Patch:
@@ -194,7 +194,7 @@ public static void add_v1_3_Changes( ArrayList<ChangeInfo> changeInfos ) {
 				"_- Wild Magic_ base wand boost and max boost increased by 1\n" +
 				"_- Fire Everything_ now has a 25% chance per point to let a wand be usable 3 times\n" +
 				"_- Conserved Magic_ no longer lets a wand be usable 3 times, now grants a chance for wild magic to take 0 turns instead\n\n" +
-				"_- Elemental power_ boost per point up to 25%, from 25%\n" +
+				"_- Elemental power_ boost per point up to 25%, from 20%\n" +
 				"_- Reactive Barrier_ shielding per point up to 2.5, from 20, and max targets now increases by 1 per point.\n\n" +
 				"_- Shadow Clone_ now costs 35 energy, down from 50. Initial HP down to 80 from 100\n" +
 				"_- Shadow Blade_ damage per point up to 8%, from 7.5%\n" +

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/InterlevelScene.java
Patch:
@@ -412,10 +412,10 @@ private void fall() throws IOException {
 		Dungeon.saveAll();
 
 		Level level;
-		if (Dungeon.depth >= Statistics.deepestFloor) {
+		Dungeon.depth++;
+		if (Dungeon.depth > Statistics.deepestFloor) {
 			level = Dungeon.newLevel();
 		} else {
-			Dungeon.depth++;
 			level = Dungeon.loadLevel( GamesInProgress.curSlot );
 		}
 		Dungeon.switchLevel( level, level.fallCell( fallIntoPit ));

File: android/src/main/java/com/shatteredpixel/shatteredpixeldungeon/android/AndroidLauncher.java
Patch:
@@ -23,6 +23,7 @@
 
 import android.annotation.SuppressLint;
 import android.content.Context;
+import android.content.Intent;
 import android.content.pm.ActivityInfo;
 import android.content.pm.PackageManager;
 import android.os.Build;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Rankings.java
Patch:
@@ -434,7 +434,7 @@ public void storeInBundle( Bundle bundle ) {
 		}
 	}
 
-	private static final Comparator<Record> scoreComparator = new Comparator<Rankings.Record>() {
+	public static final Comparator<Record> scoreComparator = new Comparator<Rankings.Record>() {
 		@Override
 		public int compare( Record lhs, Record rhs ) {
 			int result = (int)Math.signum( rhs.score - lhs.score );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -830,7 +830,7 @@ public static void observe( int dist ) {
 		if (hero.buff(MindVision.class) != null){
 			for (Mob m : level.mobs.toArray(new Mob[0])){
 				BArray.or( level.visited, level.heroFOV, m.pos - 1 - level.width(), 3, level.visited );
-				BArray.or( level.visited, level.heroFOV, m.pos, 3, level.visited );
+				BArray.or( level.visited, level.heroFOV, m.pos - 1, 3, level.visited );
 				BArray.or( level.visited, level.heroFOV, m.pos - 1 + level.width(), 3, level.visited );
 				//updates adjacent cells too
 				GameScene.updateFog(m.pos, 2);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -205,7 +205,7 @@ public class Hero extends Char {
 	private ArrayList<Mob> visibleEnemies;
 
 	//This list is maintained so that some logic checks can be skipped
-	// for enemies we know we aren't seeing normally, resultign in better performance
+	// for enemies we know we aren't seeing normally, resulting in better performance
 	public ArrayList<Mob> mindVisionEnemies = new ArrayList<>();
 
 	public Hero() {

File: desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopLauncher.java
Patch:
@@ -143,12 +143,12 @@ public void uncaughtException(Thread thread, Throwable throwable) {
 			basePath = "Library/Application Support/Shattered Pixel Dungeon/";
 		} else if (SharedLibraryLoader.isLinux) {
 			String XDGHome = System.getenv().get("XDG_DATA_HOME");
-			if (XDGHome == null) XDGHome = ".local/share/";
-			basePath = XDGHome + ".shatteredpixel/shattered-pixel-dungeon/";
+			if (XDGHome == null) XDGHome = ".local/share";
+			basePath = XDGHome + "/.shatteredpixel/shattered-pixel-dungeon/";
 
 			//copy over files from old linux save DIR, pre-1.2.0
 			FileHandle oldBase = new Lwjgl3FileHandle(".shatteredpixel/shattered-pixel-dungeon/", Files.FileType.External);
-			FileHandle newBase = new Lwjgl3FileHandle(XDGHome + ".shatteredpixel/shattered-pixel-dungeon/", Files.FileType.External);
+			FileHandle newBase = new Lwjgl3FileHandle(basePath, Files.FileType.External);
 			if (oldBase.exists()){
 				if (!newBase.exists()) {
 					oldBase.copyTo(newBase.parent());

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/BuffIndicator.java
Patch:
@@ -240,7 +240,7 @@ protected void createChildren() {
 		public void updateIcon(){
 			((BuffIcon)icon).refresh(buff);
 			//round up to the nearest pixel if <50% faded, otherwise round down
-			if (!large) {
+			if (!large || buff.iconTextDisplay().isEmpty()) {
 				text.visible = false;
 				float fadeHeight = buff.iconFadePercent() * icon.height();
 				float zoom = (camera() != null) ? camera().zoom : 1;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Toolbar.java
Patch:
@@ -91,8 +91,6 @@ protected void onClick() {
 				if (Dungeon.hero.ready && !GameScene.cancel()) {
 					examining = false;
 					Dungeon.hero.rest(false);
-					swappedQuickslots = !swappedQuickslots;
-					updateLayout();
 				}
 			}
 			

File: desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopPlatformSupport.java
Patch:
@@ -55,6 +55,8 @@ public void updateDisplaySize() {
 		if (!SPDSettings.fullscreen()) {
 			SPDSettings.windowResolution( previousSizes[0] );
 		}
+		//TODO fixes an in libGDX v1.11.0 with macOS displays
+		Gdx.gl.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MagesStaff.java
Patch:
@@ -163,8 +163,8 @@ public int proc(Char attacker, Char defender, int damage) {
 		if (attacker instanceof Hero && ((Hero) attacker).hasTalent(Talent.MYSTICAL_CHARGE)){
 			Hero hero = (Hero) attacker;
 			for (Buff b : hero.buffs()){
-				if (b instanceof Artifact.ArtifactBuff) {
-					if (!((Artifact.ArtifactBuff) b).isCursed()) ((Artifact.ArtifactBuff) b).charge(hero, 4);
+				if (b instanceof Artifact.ArtifactBuff && !((Artifact.ArtifactBuff) b).isCursed() ) {
+					((Artifact.ArtifactBuff) b).charge(hero, hero.pointsInTalent(Talent.MYSTICAL_CHARGE)/2f);
 				}
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/exotic/ScrollOfPassage.java
Patch:
@@ -42,6 +42,7 @@ public class ScrollOfPassage extends ExoticScroll {
 	public void doRead() {
 
 		identify();
+		readAnimation();
 		
 		if (Dungeon.level.locked) {
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -189,7 +189,7 @@ public static void init() {
 		challenges = SPDSettings.challenges();
 		mobsToChampion = -1;
 
-		if (SPDSettings.customSeed() != ""){
+		if (!SPDSettings.customSeed().isEmpty()){
 			customSeedText = SPDSettings.customSeed();
 			seed = DungeonSeed.convertFromText(customSeedText);
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CavesBossLevel.java
Patch:
@@ -101,6 +101,7 @@ public String waterTex() {
 	private static int WIDTH = 33;
 	private static int HEIGHT = 42;
 
+	public static Rect diggableArea = new Rect(2, 11, 31, 40);
 	public static Rect mainArena = new Rect(5, 14, 28, 37);
 	public static Rect gate = new Rect(14, 13, 19, 14);
 	public static int[] pylonPositions = new int[]{ 4 + 13*WIDTH, 28 + 13*WIDTH, 4 + 37*WIDTH, 28 + 37*WIDTH };

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/AlchemistsToolkit.java
Patch:
@@ -141,7 +141,7 @@ protected Image getIcon(int index) {
 
 	@Override
 	public String status() {
-		if (isEquipped(Dungeon.hero) && warmUpDelay > 0){
+		if (isEquipped(Dungeon.hero) && warmUpDelay > 0 && !cursed){
 			return Messages.format( "%d%%", 100 - (int)warmUpDelay );
 		} else {
 			return super.status();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/GreatCrab.java
Patch:
@@ -70,6 +70,7 @@ protected boolean getCloser( int target ) {
 
 	@Override
 	public void damage( int dmg, Object src ){
+		if (enemy == null) enemy = chooseEnemy();
 		//crab blocks all wand damage from the hero if it sees them.
 		//Direct damage is negated, but add-on effects and environmental effects go through as normal.
 		if (enemySeen
@@ -88,6 +89,7 @@ public void damage( int dmg, Object src ){
 
 	@Override
 	public int defenseSkill( Char enemy ) {
+		if (this.enemy == null) this.enemy = chooseEnemy();
 		//crab blocks all melee attacks from its current target
 		if (enemySeen
 				&& state != SLEEPING

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java
Patch:
@@ -157,7 +157,7 @@ public void paint(Level level) {
 		sentry.pos = level.pointToCell(sentryPos);
 		sentry.room = new EmptyRoom();
 		sentry.room.set((Rect)this);
-		sentry.initialChargeDelay = dangerDist / 3f + 0.1f;
+		sentry.initialChargeDelay = sentry.curChargeDelay = dangerDist / 3f + 0.1f;
 		level.mobs.add( sentry );
 
 		Painter.set(level, treasurePos, Terrain.PEDESTAL);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Badges.java
Patch:
@@ -901,7 +901,6 @@ public static void validateGamesPlayed() {
 		displayBadge( badge );
 	}
 
-	//TODO this is calibrated for scoring changes I plan to make
 	public static void validateHighScore( int score ){
 		Badge badge = null;
 		if (score >= 5000) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java
Patch:
@@ -40,8 +40,8 @@ public class ShatteredPixelDungeon extends Game {
 	public static final int v0_9_3c = 557; //557 on iOS, 554 on other platforms
 
 	public static final int v1_0_3  = 574;
-	public static final int v1_1_2  = 587;
-	public static final int v1_2_3  = 627;
+	public static final int v1_1_2  = 588;
+	public static final int v1_2_3  = 628;
 	
 	public ShatteredPixelDungeon( PlatformSupport platform ) {
 		super( sceneClass == null ? WelcomeScene.class : sceneClass, platform );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/YogDzewa.java
Patch:
@@ -134,15 +134,14 @@ private static Class getPairedFist(Class fist){
 			for (int i = 0; i < 6; i++){
 				if (i >= 4){
 					regularSummons.add(YogRipper.class);
-				}
-				if (i >= Statistics.spawnersAlive){
+				} else if (i >= Statistics.spawnersAlive){
 					regularSummons.add(Larva.class);
 				} else {
 					regularSummons.add( i % 2 == 0 ? YogEye.class : YogScorpio.class);
 				}
 			}
 		} else {
-			for (int i = 0; i < 6; i++){
+			for (int i = 0; i < 4; i++){
 				if (i >= Statistics.spawnersAlive){
 					regularSummons.add(Larva.class);
 				} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Preparation.java
Patch:
@@ -52,6 +52,7 @@ public class Preparation extends Buff implements ActionIndicator.Action {
 	{
 		//always acts after other buffs, so invisibility effects can process first
 		actPriority = BUFF_PRIO - 1;
+		type = buffType.POSITIVE;
 	}
 	
 	public enum AttackLevel{

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/ScrollEmpower.java
Patch:
@@ -62,7 +62,7 @@ public int icon() {
 
 	@Override
 	public void tintIcon(Image icon) {
-		icon.hardlight(1, 1, 0);
+		icon.hardlight(0.84f, 0.79f, 0.65f); //scroll colors
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Shadows.java
Patch:
@@ -38,6 +38,7 @@ public class Shadows extends Invisibility {
 
 	{
 		announced = false;
+		type = buffType.POSITIVE;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/SoulMark.java
Patch:
@@ -37,12 +37,12 @@ public class SoulMark extends FlavourBuff {
 
 	@Override
 	public int icon() {
-		return BuffIndicator.CORRUPT;
+		return BuffIndicator.INVERT_MARK;
 	}
 
 	@Override
 	public void tintIcon(Image icon) {
-		icon.hardlight(0.5f, 0.5f, 0.5f);
+		icon.hardlight(0.5f, 0.2f, 1f);
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/HeroSelectScene.java
Patch:
@@ -38,7 +38,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.ui.RenderedTextBlock;
 import com.shatteredpixel.shatteredpixeldungeon.ui.StyledButton;
 import com.shatteredpixel.shatteredpixeldungeon.ui.Window;
-import com.shatteredpixel.shatteredpixeldungeon.ui.WndTextInput;
+import com.shatteredpixel.shatteredpixeldungeon.windows.WndTextInput;
 import com.shatteredpixel.shatteredpixeldungeon.utils.DungeonSeed;
 import com.shatteredpixel.shatteredpixeldungeon.windows.WndChallenges;
 import com.shatteredpixel.shatteredpixeldungeon.windows.WndHeroInfo;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -200,6 +200,8 @@ public static void init() {
 			SpecialRoom.initForRun();
 			SecretRoom.initForRun();
 
+			Generator.fullReset();
+
 		Random.resetGenerators();
 		
 		Statistics.reset();
@@ -224,7 +226,6 @@ public static void init() {
 		Blacksmith.Quest.reset();
 		Imp.Quest.reset();
 
-		Generator.fullReset();
 		hero = new Hero();
 		hero.live();
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -585,7 +585,7 @@ public void draw() {
 					ankh = i;
 				}
 			}
-			if (ankh != null) {
+			if (ankh != null && GamesInProgress.gameExists(GamesInProgress.curSlot)) {
 				add(new WndResurrect(ankh));
 			} else {
 				gameOver();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/RegularLevel.java
Patch:
@@ -440,7 +440,7 @@ protected void createItems() {
 						losBlocking[cell] = false;
 					}
 					drop(new SmallRation(), cell).type = Heap.Type.CHEST;
-					//dropped.countUp(1);
+					dropped.countUp(1);
 				}
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/CloakOfShadows.java
Patch:
@@ -171,7 +171,7 @@ protected ArtifactBuff activeBuff( ) {
 	@Override
 	public void charge(Hero target, float amount) {
 		if (charge < chargeCap) {
-			if (!isEquipped(target)) amount *= 0.5f*target.pointsInTalent(Talent.LIGHT_CLOAK)/3f;
+			if (!isEquipped(target)) amount *= 0.75f*target.pointsInTalent(Talent.LIGHT_CLOAK)/3f;
 			partialCharge += 0.25f*amount;
 			if (partialCharge >= 1){
 				partialCharge--;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/MasterThievesArmband.java
Patch:
@@ -265,6 +265,7 @@ public void gainCharge(float levelPortion) {
 
 			if (charge < chargeCap){
 				float chargeGain = 3f * levelPortion;
+				chargeGain *= RingOfEnergy.artifactChargeMultiplier(target);
 
 				partialCharge += chargeGain;
 				while (partialCharge > 1f){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
Patch:
@@ -219,7 +219,7 @@ public int maxPoints(){
 	}
 
 	public String title(){
-		if (Ratmogrify.useRatroicEnergy){
+		if (this == HEROIC_ENERGY && Ratmogrify.useRatroicEnergy){
 			return Messages.get(this, name() + ".rat_title");
 		}
 		return Messages.get(this, name() + ".title");

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Invisibility.java
Patch:
@@ -88,6 +88,8 @@ public String desc() {
 	}
 
 	public static void dispel() {
+		if (Dungeon.hero == null) return;
+
 		for ( Buff invis : Dungeon.hero.buffs( Invisibility.class )){
 			invis.detach();
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfFrost.java
Patch:
@@ -72,7 +72,7 @@ public void onZap(Ballistica bolt) {
 		if (eternalFire != null && eternalFire.volume > 0) {
 			eternalFire.clear( bolt.collisionPos );
 			//bolt ends 1 tile short of fire, so check next tile too
-			if (bolt.path.size() > bolt.dist){
+			if (bolt.path.size() > bolt.dist+1){
 				eternalFire.clear( bolt.path.get(bolt.dist+1) );
 			}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -1168,9 +1168,8 @@ public static void updateFog( int cell, int radius ){
 	
 	public static void afterObserve() {
 		if (scene != null) {
-			for (Mob mob : Dungeon.level.mobs) {
-				if (mob.sprite != null)
-					mob.sprite.visible = Dungeon.level.heroFOV[mob.pos];
+			for (Mob mob : Dungeon.level.mobs.toArray(new Mob[0])) {
+				if (mob.sprite != null) mob.sprite.visible = Dungeon.level.heroFOV[mob.pos];
 			}
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/ActionIndicator.java
Patch:
@@ -105,7 +105,7 @@ protected void onClick() {
 
 	@Override
 	protected String hoverText() {
-		String text = action.actionName();
+		String text = (action == null ? null : action.actionName());
 		if (text != null){
 			return Messages.titleCase(text);
 		} else {

File: SPD-classes/src/main/java/com/watabou/input/InputHandler.java
Patch:
@@ -104,7 +104,7 @@ public synchronized boolean touchDown(int screenX, int screenY, int pointer, int
 	public synchronized boolean touchUp(int screenX, int screenY, int pointer, int button) {
 
 		if (button >= 3 && KeyBindings.isKeyBound( button + 1000 )) {
-			KeyEvent.addKeyEvent( new KeyEvent( button + 1000, true ) );
+			KeyEvent.addKeyEvent( new KeyEvent( button + 1000, false ) );
 		} else if (button < 3) {
 			PointerEvent.addPointerEvent(new PointerEvent(screenX, screenY, pointer, PointerEvent.Type.UP, button));
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/RegularLevel.java
Patch:
@@ -428,7 +428,7 @@ protected void createItems() {
 				boolean valid;
 				do {
 					cell = randomDropCell(SpecialRoom.class);
-					valid = !(room(cell) instanceof SecretRoom)
+					valid = cell != -1 && !(room(cell) instanceof SecretRoom)
 							&& !(room(cell) instanceof ShopRoom)
 							&& map[cell] != Terrain.EMPTY_SP
 							&& map[cell] != Terrain.WATER

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/ArmoredStatue.java
Patch:
@@ -133,7 +133,7 @@ public int defenseSkill(Char enemy) {
 
 	@Override
 	public void die( Object cause ) {
-		armor.identify();
+		armor.identify(false);
 		Dungeon.level.drop( armor, pos ).sprite.drop();
 		super.die( cause );
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Statue.java
Patch:
@@ -145,7 +145,7 @@ public void beckon( int cell ) {
 	
 	@Override
 	public void die( Object cause ) {
-		weapon.identify();
+		weapon.identify(false);
 		Dungeon.level.drop( weapon, pos ).sprite.drop();
 		super.die( cause );
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/Potion.java
Patch:
@@ -352,8 +352,8 @@ public void setKnown() {
 	}
 	
 	@Override
-	public Item identify() {
-		super.identify();
+	public Item identify( boolean byHero ) {
+		super.identify(byHero);
 
 		if (!isKnown()) {
 			setKnown();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/Ring.java
Patch:
@@ -198,10 +198,10 @@ public boolean isIdentified() {
 	}
 	
 	@Override
-	public Item identify() {
+	public Item identify( boolean byHero ) {
 		setKnown();
 		levelsToID = 0;
-		return super.identify();
+		return super.identify(byHero);
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/Scroll.java
Patch:
@@ -211,8 +211,8 @@ public void setKnown() {
 	}
 	
 	@Override
-	public Item identify() {
-		super.identify();
+	public Item identify( boolean byHero ) {
+		super.identify(byHero);
 
 		if (!isKnown()) {
 			setKnown();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -215,10 +215,10 @@ public void level( int value) {
 	}
 	
 	@Override
-	public Item identify() {
+	public Item identify( boolean byHero ) {
 		
 		curChargeKnown = true;
-		super.identify();
+		super.identify(byHero);
 		
 		updateQuickslot();
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndImp.java
Patch:
@@ -73,7 +73,7 @@ private void takeReward( Imp imp, DwarfToken tokens, Item reward ) {
 		tokens.detachAll( Dungeon.hero.belongings.backpack );
 		if (reward == null) return;
 
-		reward.identify();
+		reward.identify(false);
 		if (reward.doPickUp( Dungeon.hero )) {
 			GLog.i( Messages.get(Dungeon.hero, "you_now_have", reward.name()) );
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndSadGhost.java
Patch:
@@ -110,7 +110,7 @@ private void selectReward( Item reward ) {
 			((Armor) reward).inscribe(Ghost.Quest.glyph);
 		}
 		
-		reward.identify();
+		reward.identify(false);
 		if (reward.doPickUp( Dungeon.hero )) {
 			GLog.i( Messages.get(Dungeon.hero, "you_now_have", reward.name()) );
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndWandmaker.java
Patch:
@@ -101,7 +101,7 @@ private void selectReward( Item reward ) {
 
 		questItem.detach( Dungeon.hero.belongings.backpack );
 
-		reward.identify();
+		reward.identify(false);
 		if (reward.doPickUp( Dungeon.hero )) {
 			GLog.i( Messages.get(Dungeon.hero, "you_now_have", reward.name()) );
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/WildEnergy.java
Patch:
@@ -57,7 +57,9 @@ protected void affectTarget(Ballistica bolt, final Hero hero) {
 
 		hero.belongings.charge(1f);
 		for (Buff b : hero.buffs()){
-			if (b instanceof Artifact.ArtifactBuff) ((Artifact.ArtifactBuff) b).charge(hero, 4);
+			if (b instanceof Artifact.ArtifactBuff){
+				if (!((Artifact.ArtifactBuff) b).isCursed()) ((Artifact.ArtifactBuff) b).charge(hero, 4);
+			}
 		}
 
 		Buff.affect(hero, Recharging.class, 8f);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MagesStaff.java
Patch:
@@ -163,7 +163,9 @@ public int proc(Char attacker, Char defender, int damage) {
 		if (attacker instanceof Hero && ((Hero) attacker).hasTalent(Talent.MYSTICAL_CHARGE)){
 			Hero hero = (Hero) attacker;
 			for (Buff b : hero.buffs()){
-				if (b instanceof Artifact.ArtifactBuff) ((Artifact.ArtifactBuff) b).charge(hero, hero.pointsInTalent(Talent.MYSTICAL_CHARGE)/2f);
+				if (b instanceof Artifact.ArtifactBuff) {
+					if (!((Artifact.ArtifactBuff) b).isCursed()) ((Artifact.ArtifactBuff) b).charge(hero, 4);
+				}
 			}
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/Ratmogrify.java
Patch:
@@ -57,6 +57,9 @@ public class Ratmogrify extends ArmorAbility {
 		baseChargeUse = 50f;
 	}
 
+	//this is sort of hacky, but we need it to know when to use alternate name/icon for heroic energy
+	public static boolean useRatroicEnergy = false;
+
 	@Override
 	public String targetingPrompt() {
 		return Messages.get(this, "prompt");

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/TalentsPane.java
Patch:
@@ -25,6 +25,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroSubClass;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent;
+import com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.Ratmogrify;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Speck;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
@@ -52,6 +53,8 @@ public TalentsPane( TalentButton.Mode mode ) {
 	public TalentsPane( TalentButton.Mode mode, ArrayList<LinkedHashMap<Talent, Integer>> talents ) {
 		super(new Component());
 
+		Ratmogrify.useRatroicEnergy = Dungeon.hero != null && Dungeon.hero.armorAbility instanceof Ratmogrify;
+
 		int tiersAvailable = 1;
 
 		if (mode == TalentButton.Mode.INFO){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndInfoArmorAbility.java
Patch:
@@ -24,6 +24,8 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroClass;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.ArmorAbility;
+import com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.Ratmogrify;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Rat;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
@@ -43,6 +45,7 @@ public WndInfoArmorAbility(HeroClass cls, ArmorAbility ability){
 		ArrayList<LinkedHashMap<Talent, Integer>> talentList = new ArrayList<>();
 		Talent.initArmorTalents(ability, talentList);
 
+		Ratmogrify.useRatroicEnergy = ability instanceof Ratmogrify;
 		TalentsPane.TalentTierPane talentPane = new TalentsPane.TalentTierPane(talentList.get(3), 4, TalentButton.Mode.INFO);
 		talentPane.title.text( Messages.titleCase(Messages.get(WndHeroInfo.class, "talents")));
 		talentPane.setRect(0, height + 5, width, talentPane.height());

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -2083,6 +2083,8 @@ public void resurrect() {
 				((MagesStaff) i).applyWandChargeBuff(this);
 			}
 		}
+
+		updateHT(false);
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/LostBackpack.java
Patch:
@@ -69,6 +69,8 @@ public boolean doPickUp(Hero hero, int pos) {
 			}
 		}
 
+		hero.updateHT(false);
+
 		Item.updateQuickslot();
 		Sample.INSTANCE.play( Assets.Sounds.DEWDROP );
 		hero.spendAndNext(TIME_TO_PICK_UP);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/GhoulSprite.java
Patch:
@@ -62,7 +62,7 @@ public void crumple(){
 	@Override
 	public void move(int from, int to) {
 		if (parent == null){
-			//fixme this happens rarely, likely due to ghoul life link?
+			//TODO this should be fixed as of v1.2.2, monitor for more reports and remove if we're clear
 			Game.reportException(new RuntimeException("ghoul sprite tried to move with null parent! ghoul HP: " + ch.HP));
 			return;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/MagicalFireRoom.java
Patch:
@@ -203,7 +203,7 @@ protected void evolve() {
 							|| cur[cell-Dungeon.level.width()] > 0
 							|| cur[cell+Dungeon.level.width()] > 0) {
 						//spread fire to nearby flammable cells
-						if (Dungeon.level.flamable[cell] && (fire == null || fire.cur[cell] == 0)){
+						if (Dungeon.level.flamable[cell] && (fire == null || fire.volume == 0 || fire.cur[cell] == 0)){
 							GameScene.add(Blob.seed(cell, 4, Fire.class));
 						}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -762,7 +762,7 @@ public static void observe( int dist ) {
 
 		for (TalismanOfForesight.CharAwareness c : hero.buffs(TalismanOfForesight.CharAwareness.class)){
 			Char ch = (Char) Actor.findById(c.charID);
-			if (ch == null) continue;
+			if (ch == null || !ch.isAlive()) continue;
 			BArray.or( level.visited, level.heroFOV, ch.pos - 1 - level.width(), 3, level.visited );
 			BArray.or( level.visited, level.heroFOV, ch.pos - 1, 3, level.visited );
 			BArray.or( level.visited, level.heroFOV, ch.pos - 1 + level.width(), 3, level.visited );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -1203,7 +1203,7 @@ public void updateFieldOfView( Char c, boolean[] fieldOfView ) {
 
 			for (TalismanOfForesight.CharAwareness a : c.buffs(TalismanOfForesight.CharAwareness.class)){
 				Char ch = (Char) Actor.findById(a.charID);
-				if (ch == null) {
+				if (ch == null || !ch.isAlive()) {
 					continue;
 				}
 				int p = ch.pos;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Button.java
Patch:
@@ -99,7 +99,7 @@ protected void onHoverStart(PointerEvent event) {
 							text += " _(" + KeyBindings.getKeyName(key) + ")_";
 						}
 					}
-					hoverTip = new Tooltip(text, 80);
+					hoverTip = new Tooltip(Button.this, text, 80);
 					Button.this.parent.addToFront(hoverTip);
 					hoverTip.camera = camera();
 					alignTooltip(hoverTip);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/effects/Splash.java
Patch:
@@ -41,6 +41,7 @@ public static void at( PointF p, final int color, int n ) {
 		}
 		
 		Emitter emitter = GameScene.emitter();
+		if (emitter == null) return;
 		emitter.pos( p );
 		
 		FACTORY.color = color;
@@ -56,6 +57,7 @@ public static void at( PointF p, final float dir, final float cone, final int co
 		}
 		
 		Emitter emitter = GameScene.emitter();
+		if (emitter == null) return;
 		emitter.pos( p );
 		
 		FACTORY.color = color;
@@ -71,6 +73,7 @@ public static void at( PointF p, final float dir, final float cone, final int co
 		}
 
 		Emitter emitter = GameScene.emitter();
+		if (emitter == null) return;
 		emitter.pos( p );
 
 		FACTORY.color = color;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/exotic/ScrollOfSirensSong.java
Patch:
@@ -48,7 +48,7 @@ public class ScrollOfSirensSong extends ExoticScroll {
 	
 	@Override
 	public void doRead() {
-		curItem.collect(); //we detach it later
+		if (!anonymous) curItem.collect(); //we detach it later
 		GameScene.selectCell(targeter);
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/rogue/SmokeBomb.java
Patch:
@@ -25,6 +25,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.AllyBuff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Amok;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Blindness;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
@@ -170,6 +171,7 @@ public int drRoll() {
 			immunities.add( Amok.class );
 			immunities.add( Charm.class );
 			immunities.add( Sleep.class );
+			immunities.add( AllyBuff.class );
 		}
 
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/InventoryPane.java
Patch:
@@ -146,6 +146,9 @@ public boolean onSignal(KeyEvent keyEvent) {
 						&& KeyBindings.getActionForKey(keyEvent) != SPDAction.BAG_3
 						&& KeyBindings.getActionForKey(keyEvent) != SPDAction.BAG_4
 						&& KeyBindings.getActionForKey(keyEvent) != SPDAction.BAG_5){
+					//any windows opened as a consequence of this should be centered on the inventory
+					GameScene.centerNextWndOnInvPane();
+					selector.onSelect(null);
 					selector = null;
 					updateInventory();
 					return true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/InventoryPane.java
Patch:
@@ -360,7 +360,9 @@ public void updateInventory(){
 
 	public void setSelector(WndBag.ItemSelector selector){
 		this.selector = selector;
-		if (selector.preferredBag() != null) {
+		if (selector.preferredBag() == Belongings.Backpack.class){
+			lastBag = Dungeon.hero.belongings.backpack;
+		} else if (selector.preferredBag() != null) {
 			Bag preferred = Dungeon.hero.belongings.getItem(selector.preferredBag());
 			if (preferred != null) lastBag = preferred;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/AquaBlast.java
Patch:
@@ -40,7 +40,9 @@ protected void affectTarget(Ballistica bolt, Hero hero) {
 
 		GeyserTrap geyser = new GeyserTrap();
 		geyser.pos = cell;
-		geyser.centerKnockBackDirection = bolt.path.get(bolt.dist+1);
+		if (bolt.path.size() > bolt.dist+1) {
+			geyser.centerKnockBackDirection = bolt.path.get(bolt.dist + 1);
+		}
 		geyser.activate();
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v1_X_Changes.java
Patch:
@@ -207,7 +207,7 @@ public static void add_v1_2_Changes( ArrayList<ChangeInfo> changeInfos ) {
 				"_- Wand Preservation_ max uses up to 5 from 3\n" +
 				"_- Empowering Scrolls_ now grants +3 on the next 1/2/3 wand zaps\n\n" +
 				"_- Light Cloak_ charging rate boosted to 25%/50%/75%, from 17%/33%/50%\n\n" +
-				"_- Shared Enchantments_ bugfixed to give the bonus damage stated in the description, instead of slightly less."));
+				"_- Shared Upgrades_ bugfixed to give the bonus damage stated in the description, instead of slightly less."));
 
 		changes = new ChangeInfo(Messages.get(ChangesScene.class, "nerfs"), false, null);
 		changes.hardlight(CharSprite.NEGATIVE);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/TalentsPane.java
Patch:
@@ -109,8 +109,8 @@ public TalentsPane( TalentButton.Mode mode, ArrayList<LinkedHashMap<Talent, Inte
 			blockText = null;
 		}
 
-		for (TalentTierPane p : panes){
-			content.bringToFront(p);
+		for (int i = panes.size()-1; i >= 0; i--){
+			content.bringToFront(panes.get(i));
 		}
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/MagicalFireRoom.java
Patch:
@@ -223,7 +223,9 @@ public void seed(Level level, int cell, int amount) {
 
 		@Override
 		public void clear(int cell) {
-			fullyClear();
+			if (volume > 0 && cur[cell] > 0) {
+				fullyClear();
+			}
 		}
 
 		@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Succubus.java
Patch:
@@ -68,7 +68,7 @@ public class Succubus extends Mob {
 	
 	@Override
 	public int damageRoll() {
-		return Random.NormalIntRange( 2, 3 );
+		return Random.NormalIntRange( 25, 30 );
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Toolbar.java
Patch:
@@ -323,7 +323,7 @@ protected void layout() {
 			btnSearch.setPos( (right - btnSearch.right()), y);
 			btnInventory.setPos( (right - btnInventory.right()), y);
 
-			for(int i = 0; i <= btnQuick.length; i++) {
+			for(int i = 0; i < btnQuick.length; i++) {
 				btnQuick[i].setPos( right - btnQuick[i].right(), y+2);
 			}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/GamesInProgress.java
Patch:
@@ -50,7 +50,7 @@ public class GamesInProgress {
 	
 	public static boolean gameExists( int slot ){
 		return FileUtils.dirExists(gameFolder(slot))
-				&& FileUtils.fileExists(gameFile(slot));
+				&& FileUtils.fileLength(gameFile(slot)) > 1;
 	}
 	
 	public static String gameFolder( int slot ){
@@ -74,7 +74,7 @@ public static int firstEmpty(){
 	
 	public static ArrayList<Info> checkAll(){
 		ArrayList<Info> result = new ArrayList<>();
-		for (int i = 0; i <= MAX_SLOTS; i++){
+		for (int i = 1; i <= MAX_SLOTS; i++){
 			Info curr = check(i);
 			if (curr != null) result.add(curr);
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/ItemSlot.java
Patch:
@@ -119,7 +119,7 @@ protected void layout() {
 		
 		if (status != null) {
 			status.measure();
-			if (status.width > width){
+			if (status.width > width - (margin.left + margin.right)){
 				status.scale.set(PixelScene.align(0.8f));
 			} else {
 				status.scale.set(1f);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/MasterThievesArmband.java
Patch:
@@ -201,7 +201,7 @@ protected ArtifactBuff passiveBuff() {
 	public void charge(Hero target, float amount) {
 		partialCharge += 0.1f * amount;
 		partialCharge = Math.min(partialCharge, chargeCap - charge);
-		while (partialCharge > 1f){
+		while (partialCharge >= 1f){
 			charge++;
 			partialCharge--;
 			updateQuickslot();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/exotic/PotionOfSnapFreeze.java
Patch:
@@ -49,12 +49,10 @@ public void shatter(int cell) {
 			Sample.INSTANCE.play( Assets.Sounds.SHATTER );
 		}
 		
-		Fire fire = (Fire)Dungeon.level.blobs.get( Fire.class );
-		
 		for (int offset : PathFinder.NEIGHBOURS9){
 			if (!Dungeon.level.solid[cell+offset]) {
 				
-				Freezing.affect( cell + offset, fire );
+				Freezing.affect( cell + offset );
 				
 				Char ch = Actor.findChar( cell + offset);
 				if (ch != null){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java
Patch:
@@ -159,11 +159,11 @@ public void paint(Level level) {
 		sentry.initialChargeDelay = dangerDist / 3f + 0.1f;
 		level.mobs.add( sentry );
 
-		level.addItemToSpawn(new PotionOfHaste());
-
 		Painter.set(level, treasurePos, Terrain.PEDESTAL);
 		level.drop( prize( level ), level.pointToCell(treasurePos) ).type = Heap.Type.CHEST;
 
+		level.addItemToSpawn(new PotionOfHaste());
+
 		entrance.set( Door.Type.REGULAR );
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/mage/WarpBeacon.java
Patch:
@@ -155,6 +155,7 @@ protected void onSelect(int index) {
 
 							Invisibility.dispel();
 							Dungeon.observe();
+							GameScene.updateFog();
 
 						} else {
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TimekeepersHourglass.java
Patch:
@@ -70,8 +70,9 @@ public class TimekeepersHourglass extends Artifact {
 	@Override
 	public ArrayList<String> actions( Hero hero ) {
 		ArrayList<String> actions = super.actions( hero );
-		if (isEquipped( hero ) && charge > 0 && !cursed)
+		if (isEquipped( hero ) && !cursed && (charge > 0 || activeBuff != null)) {
 			actions.add(AC_ACTIVATE);
+		}
 		return actions;
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1279,7 +1279,7 @@ public void checkVisibleMobs() {
 
 		Mob target = null;
 		for (Mob m : Dungeon.level.mobs.toArray(new Mob[0])) {
-			if (fieldOfView[ m.pos ] && m.alignment == Alignment.ENEMY && !(m instanceof NPC)) {
+			if (fieldOfView[ m.pos ] && m.alignment == Alignment.ENEMY) {
 				visible.add(m);
 				if (!visibleEnemies.contains( m )) {
 					newMob = true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -1093,7 +1093,7 @@ public void updateFieldOfView( Char c, boolean[] fieldOfView ) {
 						blocking[i] = false;
 					}
 				}
-			} else if (c.alignment == Char.Alignment.ENEMY
+			} else if (c.alignment != Char.Alignment.ALLY
 					&& Dungeon.level.blobs.containsKey(SmokeScreen.class)
 					&& Dungeon.level.blobs.get(SmokeScreen.class).volume > 0) {
 				System.arraycopy(Dungeon.level.losBlocking, 0, modifiableBlocking, 0, modifiableBlocking.length);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java
Patch:
@@ -217,7 +217,6 @@ public static class Sentry extends NPC {
 			spriteClass = SentrySprite.class;
 
 			properties.add(Property.IMMOVABLE);
-			alignment = Alignment.ENEMY;
 		}
 
 		private float initialChargeDelay;

File: SPD-classes/src/main/java/com/watabou/noosa/audio/Music.java
Patch:
@@ -183,8 +183,9 @@ private synchronized void play(String track, com.badlogic.gdx.audio.Music.OnComp
 		}
 	}
 	
-	public synchronized void mute() {
+	public synchronized void end() {
 		lastPlayed = null;
+		trackList = null;
 		stop();
 	}
 	
@@ -228,7 +229,7 @@ public synchronized void enable( boolean value ) {
 		if (!isPlaying() && value) {
 			if (trackList != null){
 				playTracks(trackList, trackChances, shuffle);
-			} else {
+			} else if (lastPlayed != null) {
 				play(lastPlayed, looping);
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CavesBossLevel.java
Patch:
@@ -77,7 +77,7 @@ public void playLevelMusic() {
 			Music.INSTANCE.play(Assets.Music.CAVES_BOSS, true);
 		//if wall isn't broken
 		} else if (map[14 + 13*width()] == Terrain.SIGN){
-			Music.INSTANCE.stop();
+			Music.INSTANCE.end();
 		} else {
 			Music.INSTANCE.playTracks(
 					new String[]{Assets.Music.CAVES_1, Assets.Music.CAVES_2, Assets.Music.CAVES_2},
@@ -316,7 +316,7 @@ public void unseal() {
 		Game.runOnRenderThread(new Callback() {
 			@Override
 			public void call() {
-				Music.INSTANCE.stop();
+				Music.INSTANCE.end();
 			}
 		});
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CityBossLevel.java
Patch:
@@ -89,7 +89,7 @@ public void playLevelMusic() {
 			Music.INSTANCE.play(Assets.Music.CITY_BOSS, true);
 		//if top door isn't unlocked
 		} else if (map[topDoor] == Terrain.LOCKED_DOOR){
-			Music.INSTANCE.stop();
+			Music.INSTANCE.end();
 		} else {
 			Music.INSTANCE.playTracks(
 					new String[]{Assets.Music.CITY_1, Assets.Music.CITY_2, Assets.Music.CITY_2},
@@ -335,7 +335,7 @@ public void unseal() {
 		Game.runOnRenderThread(new Callback() {
 			@Override
 			public void call() {
-				Music.INSTANCE.stop();
+				Music.INSTANCE.end();
 			}
 		});
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/HallsBossLevel.java
Patch:
@@ -69,7 +69,7 @@ public void playLevelMusic() {
 			Music.INSTANCE.play(Assets.Music.HALLS_BOSS, true);
 		//if exit isn't unlocked
 		} else if (map[exit] != Terrain.EXIT){
-			Music.INSTANCE.stop();
+			Music.INSTANCE.end();
 		} else {
 			Music.INSTANCE.playTracks(
 					new String[]{Assets.Music.HALLS_1, Assets.Music.HALLS_2, Assets.Music.HALLS_2},
@@ -252,7 +252,7 @@ public void unseal() {
 		Game.runOnRenderThread(new Callback() {
 			@Override
 			public void call() {
-				Music.INSTANCE.stop();
+				Music.INSTANCE.end();
 			}
 		});
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonBossLevel.java
Patch:
@@ -89,7 +89,7 @@ public enum State {
 	@Override
 	public void playLevelMusic() {
 		if (state == State.START){
-			Music.INSTANCE.stop();
+			Music.INSTANCE.end();
 		} else if (state == State.WON) {
 			Music.INSTANCE.playTracks(
 					new String[]{Assets.Music.PRISON_1, Assets.Music.PRISON_2, Assets.Music.PRISON_2},
@@ -512,7 +512,7 @@ public void call() {
 				Game.runOnRenderThread(new Callback() {
 					@Override
 					public void call() {
-						Music.INSTANCE.stop();
+						Music.INSTANCE.end();
 					}
 				});
 				break;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/SewerBossLevel.java
Patch:
@@ -40,7 +40,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss.SewerBossExitRoom;
 import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
-import com.shatteredpixel.shatteredpixeldungeon.ui.BossHealthBar;
 import com.watabou.noosa.Game;
 import com.watabou.noosa.Group;
 import com.watabou.noosa.audio.Music;
@@ -75,7 +74,7 @@ public void playLevelMusic() {
 		}
 
 		if (gooAlive){
-			Music.INSTANCE.stop();
+			Music.INSTANCE.end();
 		} else {
 			Music.INSTANCE.playTracks(
 					new String[]{Assets.Music.SEWERS_1, Assets.Music.SEWERS_2, Assets.Music.SEWERS_2},
@@ -201,7 +200,7 @@ public void unseal() {
 			Game.runOnRenderThread(new Callback() {
 				@Override
 				public void call() {
-					Music.INSTANCE.stop();
+					Music.INSTANCE.end();
 				}
 			});
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -59,6 +59,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Monk;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Snake;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.NPC;
 import com.shatteredpixel.shatteredpixeldungeon.effects.CellEmitter;
 import com.shatteredpixel.shatteredpixeldungeon.effects.CheckedCell;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Speck;
@@ -1278,7 +1279,7 @@ public void checkVisibleMobs() {
 
 		Mob target = null;
 		for (Mob m : Dungeon.level.mobs.toArray(new Mob[0])) {
-			if (fieldOfView[ m.pos ] && m.alignment == Alignment.ENEMY) {
+			if (fieldOfView[ m.pos ] && m.alignment == Alignment.ENEMY && !(m instanceof NPC)) {
 				visible.add(m);
 				if (!visibleEnemies.contains( m )) {
 					newMob = true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/PixelScene.java
Patch:
@@ -165,7 +165,6 @@ public void create() {
 	public void update() {
 		super.update();
 		//20% deadzone
-		System.out.println("x: " + ControllerHandler.rightStickPosition.x + " y: " + ControllerHandler.rightStickPosition.y);
 		if (Math.abs(ControllerHandler.rightStickPosition.x) >= 0.2f
 				|| Math.abs(ControllerHandler.rightStickPosition.y) >= 0.2f) {
 			if (!ControllerHandler.controllerPointerActive()) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java
Patch:
@@ -34,6 +34,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.Generator;
 import com.shatteredpixel.shatteredpixeldungeon.items.Heap;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
+import com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfHaste;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Level;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Terrain;
 import com.shatteredpixel.shatteredpixeldungeon.levels.painters.Painter;
@@ -156,6 +157,8 @@ public void paint(Level level) {
 		sentry.initialChargeDelay = dangerDist / 3f + 0.1f;
 		level.mobs.add( sentry );
 
+		level.addItemToSpawn(new PotionOfHaste());
+
 		Painter.set(level, treasurePos, Terrain.PEDESTAL);
 		level.drop( prize( level ), level.pointToCell(treasurePos) ).type = Heap.Type.CHEST;
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Piranha.java
Patch:
@@ -97,7 +97,7 @@ public boolean surprisedBy(Char enemy, boolean attacking) {
 			}
 			return state == SLEEPING || !fieldOfView[enemy.pos] || enemy.invisible > 0;
 		}
-		return super.surprisedBy(enemy);
+		return super.surprisedBy(enemy, attacking);
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/WndTextInput.java
Patch:
@@ -131,7 +131,9 @@ protected void onClick() {
 	@Override
 	public void offset(int xOffset, int yOffset) {
 		super.offset(xOffset, yOffset);
-		textBox.setRect(textBox.left(), textBox.top(), textBox.width(), textBox.height());
+		if (textBox != null){
+			textBox.setRect(textBox.left(), textBox.top(), textBox.width(), textBox.height());
+		}
 	}
 
 	public void onSelect(boolean positive, String text){ }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -203,7 +203,7 @@ public static void init() {
 		quickslot.reset();
 		QuickSlotButton.reset();
 		
-		depth = 24;
+		depth = 0;
 		gold = 0;
 		energy = 0;
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Icons.java
Patch:
@@ -131,7 +131,7 @@ public static Image get( Icons type ) {
 				icon.frame( icon.texture.uvRectBySize( 51, 0, 16, 16 ) );
 				break;
 			case NEWS:
-				icon.frame( icon.texture.uvRectBySize( 68, 0, 15, 15 ) );
+				icon.frame( icon.texture.uvRectBySize( 68, 0, 16, 15 ) );
 				break;
 			case CHANGES:
 				icon.frame( icon.texture.uvRectBySize( 85, 0, 15, 15 ) );
@@ -164,9 +164,9 @@ public static Image get( Icons type ) {
 				break;
 			case DISPLAY:
 				if (!PixelScene.landscape()){
-					icon.frame( icon.texture.uvRectBySize( 16, 32, 13, 16 ) );
+					icon.frame( icon.texture.uvRectBySize( 16, 32, 12, 16 ) );
 				} else {
-					icon.frame( icon.texture.uvRectBySize( 32, 32, 16, 13 ) );
+					icon.frame( icon.texture.uvRectBySize( 32, 32, 16, 12 ) );
 				}
 				break;
 			case DATA:

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/ArcaneBomb.java
Patch:
@@ -92,6 +92,6 @@ public void explode(int cell) {
 	@Override
 	public int value() {
 		//prices of ingredients
-		return quantity * (20 + 50);
+		return quantity * (20 + 30);
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/ShrapnelBomb.java
Patch:
@@ -81,6 +81,6 @@ public void explode(int cell) {
 	@Override
 	public int value() {
 		//prices of ingredients
-		return quantity * (20 + 100);
+		return quantity * (20 + 50);
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/brews/CausticBrew.java
Patch:
@@ -65,7 +65,7 @@ public void shatter(int cell) {
 	@Override
 	public int value() {
 		//prices of ingredients
-		return quantity * (30 + 50);
+		return quantity * (30 + 30);
 	}
 	
 	public static class Recipe extends com.shatteredpixel.shatteredpixeldungeon.items.Recipe.SimpleRecipe {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/elixirs/ElixirOfAquaticRejuvenation.java
Patch:
@@ -56,7 +56,7 @@ public void apply(Hero hero) {
 	@Override
 	public int value() {
 		//prices of ingredients
-		return quantity * (30 + 50);
+		return quantity * (30 + 30);
 	}
 	
 	public static class AquaHealing extends Buff {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/elixirs/ElixirOfArcaneArmor.java
Patch:
@@ -42,7 +42,7 @@ public void apply(Hero hero) {
 	@Override
 	public int value() {
 		//prices of ingredients
-		return quantity * (50 + 40);
+		return quantity * (60 + 30);
 	}
 	
 	public static class Recipe extends com.shatteredpixel.shatteredpixeldungeon.items.Recipe.SimpleRecipe {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/quest/GooBlob.java
Patch:
@@ -48,6 +48,6 @@ public int value() {
 
 	@Override
 	public int energyVal() {
-		return quantity * 4;
+		return quantity * 3;
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/quest/MetalShard.java
Patch:
@@ -48,6 +48,6 @@ public int value() {
 
 	@Override
 	public int energyVal() {
-		return quantity * 6;
+		return quantity * 3;
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/CurseInfusion.java
Patch:
@@ -90,7 +90,7 @@ protected void onItemSelected(Item item) {
 	@Override
 	public int value() {
 		//prices of ingredients, divided by output quantity
-		return Math.round(quantity * ((30 + 100) / 3f));
+		return Math.round(quantity * ((30 + 50) / 3f));
 	}
 	
 	public static class Recipe extends com.shatteredpixel.shatteredpixeldungeon.items.Recipe.SimpleRecipe {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/ReclaimTrap.java
Patch:
@@ -117,7 +117,7 @@ public ItemSprite.Glowing glowing() {
 	@Override
 	public int value() {
 		//prices of ingredients, divided by output quantity
-		return Math.round(quantity * ((40 + 100) / 3f));
+		return Math.round(quantity * ((40 + 50) / 3f));
 	}
 	
 	private static final String STORED_TRAP = "stored_trap";

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/WildEnergy.java
Patch:
@@ -66,7 +66,7 @@ protected void affectTarget(Ballistica bolt, final Hero hero) {
 	@Override
 	public int value() {
 		//prices of ingredients, divided by output quantity
-		return Math.round(quantity * ((50 + 100) / 5f));
+		return Math.round(quantity * ((50 + 50) / 5f));
 	}
 	
 	public static class Recipe extends com.shatteredpixel.shatteredpixeldungeon.items.Recipe.SimpleRecipe {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/ShopRoom.java
Patch:
@@ -189,7 +189,7 @@ protected static ArrayList<Item> generateItems() {
 		
 		itemsToSpawn.add( TippedDart.randomTipped(2) );
 
-		itemsToSpawn.add( new Alchemize().quantity(Random.IntRange(3, 4)));
+		itemsToSpawn.add( new Alchemize().quantity(Random.IntRange(2, 3)));
 
 		itemsToSpawn.add(ChooseBag(Dungeon.hero.belongings));
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/YogFist.java
Patch:
@@ -364,6 +364,7 @@ protected boolean act() {
 		@Override
 		public void damage(int dmg, Object src) {
 			if (!isInvulnerable(src.getClass()) && !(src instanceof Bleeding)){
+				dmg = Math.round( dmg * resist( src.getClass() ));
 				if (dmg < 0){
 					return;
 				}
@@ -421,6 +422,7 @@ public int damageRoll() {
 		@Override
 		public void damage(int dmg, Object src) {
 			if (!isInvulnerable(src.getClass()) && !(src instanceof Viscosity.DeferedDamage)){
+				dmg = Math.round( dmg * resist( src.getClass() ));
 				if (dmg >= 0) {
 					Buff.affect(this, Viscosity.DeferedDamage.class).prolong(dmg);
 					sprite.showStatus(CharSprite.WARNING, Messages.get(Viscosity.class, "deferred", dmg));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Berserk.java
Patch:
@@ -145,7 +145,7 @@ public boolean berserking(){
 	
 	public void damage(int damage){
 		if (state == State.RECOVERING) return;
-		float maxPower = 1f + 0.15f*((Hero)target).pointsInTalent(Talent.ENDLESS_RAGE);
+		float maxPower = 1f + 0.1f*((Hero)target).pointsInTalent(Talent.ENDLESS_RAGE);
 		power = Math.min(maxPower, power + (damage/(float)target.HT)/3f );
 		BuffIndicator.refreshHero(); //show new power immediately
 		powerLossBuffer = 3; //2 turns until rage starts dropping

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/SnipersMark.java
Patch:
@@ -141,7 +141,7 @@ public void doAction() {
 		if (cell == -1) return;
 		
 		bow.sniperSpecial = true;
-		bow.sniperSpecialBonusDamage = level*Dungeon.hero.pointsInTalent(Talent.SHARED_UPGRADES)/15f;
+		bow.sniperSpecialBonusDamage = level*Dungeon.hero.pointsInTalent(Talent.SHARED_UPGRADES)/10f;
 		
 		arrow.cast(hero, cell);
 		detach();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/CloakOfShadows.java
Patch:
@@ -227,7 +227,7 @@ public boolean act() {
 					turnsToCharge /= RingOfEnergy.artifactChargeMultiplier(target);
 					float chargeToGain = (1f / turnsToCharge);
 					if (!isEquipped(Dungeon.hero)){
-						chargeToGain *= 0.5f*Dungeon.hero.pointsInTalent(Talent.LIGHT_CLOAK)/3f;
+						chargeToGain *= 0.75f*Dungeon.hero.pointsInTalent(Talent.LIGHT_CLOAK)/3f;
 					}
 					partialCharge += chargeToGain;
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -332,7 +332,7 @@ public int buffedLvl() {
 			}
 
 			if (charger.target.buff(ScrollEmpower.class) != null){
-				lvl += Dungeon.hero.pointsInTalent(Talent.EMPOWERING_SCROLLS);
+				lvl += 3;
 			}
 
 			WandOfMagicMissile.MagicCharge buff = charger.target.buff(WandOfMagicMissile.MagicCharge.class);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/Weapon.java
Patch:
@@ -362,7 +362,7 @@ protected float procChanceMultiplier( Char attacker ){
 			if (attacker instanceof Hero && ((Hero) attacker).hasTalent(Talent.ENRAGED_CATALYST)){
 				Berserk rage = attacker.buff(Berserk.class);
 				if (rage != null) {
-					multi += (rage.rageAmount() / 6f) * ((Hero) attacker).pointsInTalent(Talent.ENRAGED_CATALYST);
+					multi += (rage.rageAmount() * 0.15f) * ((Hero) attacker).pointsInTalent(Talent.ENRAGED_CATALYST);
 				}
 			}
 			if (attacker.buff(Talent.SpiritBladesTracker.class) != null

File: SPD-classes/src/main/java/com/watabou/input/InputHandler.java
Patch:
@@ -89,6 +89,7 @@ public void processAllEvents(){
 	
 	@Override
 	public synchronized boolean touchDown(int screenX, int screenY, int pointer, int button) {
+		ControllerHandler.setControllerPointer(false);
 		Gdx.input.setOnscreenKeyboardVisible(false); //in-game events never need keyboard, so hide it
 		PointerEvent.addPointerEvent(new PointerEvent(screenX, screenY, pointer, PointerEvent.Type.DOWN, button));
 		return true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Toolbar.java
Patch:
@@ -136,11 +136,11 @@ public GameAction keyAction() {
 		add(btnSearch = new Tool(44, 0, 20, 26) {
 			@Override
 			protected void onClick() {
-				if (Dungeon.hero.ready && !GameScene.cancel()) {
-					if (!examining) {
+				if (Dungeon.hero.ready) {
+					if (!examining && !GameScene.cancel()) {
 						GameScene.selectCell(informer);
 						examining = true;
-					} else {
+					} else if (examining) {
 						informer.onSelect(null);
 						Dungeon.hero.search(true);
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -389,7 +389,7 @@ public boolean attack( Char enemy, float dmgMulti, float dmgBonus, float accMult
 			if (buff(FireImbue.class) != null)  buff(FireImbue.class).proc(enemy);
 			if (buff(FrostImbue.class) != null) buff(FrostImbue.class).proc(enemy);
 
-			if (enemy.isAlive() && prep != null && prep.canKO(enemy)){
+			if (enemy.isAlive() && enemy.alignment != alignment && prep != null && prep.canKO(enemy)){
 				enemy.HP = 0;
 				if (!enemy.isAlive()) {
 					enemy.die(this);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndTitledMessage.java
Patch:
@@ -62,6 +62,8 @@ public WndTitledMessage( Component titlebar, String message ) {
 			text.maxWidth(width);
 		}
 
+		bringToFront(titlebar);
+
 		resize( width, (int)text.bottom() + 2 );
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Burning.java
Patch:
@@ -31,6 +31,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.effects.particles.ElmoParticle;
 import com.shatteredpixel.shatteredpixeldungeon.items.Heap;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
+import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass;
 import com.shatteredpixel.shatteredpixeldungeon.items.food.ChargrilledMeat;
 import com.shatteredpixel.shatteredpixeldungeon.items.food.FrozenCarpaccio;
 import com.shatteredpixel.shatteredpixeldungeon.items.food.MysteryMeat;
@@ -91,7 +92,7 @@ public boolean act() {
 			int damage = Random.NormalIntRange( 1, 3 + Dungeon.depth/4 );
 			Buff.detach( target, Chill.class);
 
-			if (target instanceof Hero) {
+			if (target instanceof Hero && target.buff(TimekeepersHourglass.timeStasis.class) == null) {
 				
 				Hero hero = (Hero)target;
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/QuickSlotButton.java
Patch:
@@ -95,6 +95,7 @@ protected void onClick() {
 				} else {
 					Item item = select(slotNum);
 					if (Dungeon.hero.belongings.contains(item)) {
+						GameScene.centerNextWndOnInvPane();
 						item.execute(Dungeon.hero);
 						if (item.usesTargeting) {
 							useTargeting();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Combo.java
Patch:
@@ -243,6 +243,7 @@ public void useMove(ComboMove move){
 		if (move == ComboMove.PARRY){
 			parryUsed = true;
 			comboTime = 5f;
+			Invisibility.dispel();
 			Buff.affect(target, ParryTracker.class, Actor.TICK);
 			((Hero)target).spendAndNext(Actor.TICK);
 			Dungeon.hero.busy();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Momentum.java
Patch:
@@ -55,7 +55,7 @@ public boolean act() {
 			freerunCooldown--;
 		}
 
-		if (freerunCooldown == 0 && target.invisible > 0 && Dungeon.hero.pointsInTalent(Talent.SPEEDY_STEALTH) >= 1){
+		if (freerunCooldown == 0 && !freerunning() && target.invisible > 0 && Dungeon.hero.pointsInTalent(Talent.SPEEDY_STEALTH) >= 1){
 			momentumStacks = Math.min(momentumStacks + 2, 10);
 			movedLastTurn = true;
 		}
@@ -79,7 +79,7 @@ public boolean act() {
 	
 	public void gainStack(){
 		movedLastTurn = true;
-		if (freerunCooldown <= 0){
+		if (freerunCooldown <= 0 && !freerunning()){
 			postpone(target.cooldown()+(1/target.speed()));
 			momentumStacks = Math.min(momentumStacks + 1, 10);
 			ActionIndicator.setAction(this);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/AlchemicalCatalyst.java
Patch:
@@ -60,6 +60,7 @@ public class AlchemicalCatalyst extends Potion {
 	@Override
 	public void apply(Hero hero) {
 		Potion p = Reflection.newInstance(Random.chances(potionChances));
+		//Don't allow this to roll healing in pharma
 		while (Dungeon.isChallenged(Challenges.NO_HEALING) && p instanceof PotionOfHealing){
 			p = Reflection.newInstance(Random.chances(potionChances));
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/Potion.java
Patch:
@@ -514,8 +514,7 @@ public Item brew(ArrayList<Item> ingredients) {
 			}
 
 			while (result instanceof PotionOfHealing
-					&& (Dungeon.isChallenged(Challenges.NO_HEALING)
-					|| Random.Int(10) < Dungeon.LimitedDrops.COOKING_HP.count)) {
+					&& Random.Int(10) < Dungeon.LimitedDrops.COOKING_HP.count) {
 
 				result = (Potion) Generator.randomUsingDefaults(Generator.Category.POTION);
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -1329,7 +1329,7 @@ private static ArrayList<String> getObjectNames( ArrayList<Object> objects ){
 			if (obj instanceof Hero)        names.add(((Hero) obj).className().toUpperCase(Locale.ENGLISH));
 			else if (obj instanceof Mob)    names.add(Messages.titleCase( ((Mob)obj).name() ));
 			else if (obj instanceof Heap)   names.add(Messages.titleCase( ((Heap)obj).toString() ));
-			else if (obj instanceof Plant)  names.add(Messages.titleCase( ((Plant) obj).plantName ));
+			else if (obj instanceof Plant)  names.add(Messages.titleCase( ((Plant) obj).name() ));
 			else if (obj instanceof Trap)   names.add(Messages.titleCase( ((Trap) obj).name() ));
 		}
 		return names;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndInfoPlant.java
Patch:
@@ -31,7 +31,7 @@ public class WndInfoPlant extends WndTitledMessage {
 	public WndInfoPlant( Plant plant ) {
 		
 		super(TerrainFeaturesTilemap.tile( plant.pos, Dungeon.level.map[plant.pos]),
-				Messages.titleCase(plant.plantName), plant.desc());
+				Messages.titleCase(plant.name()), plant.desc());
 
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Guard.java
Patch:
@@ -95,7 +95,7 @@ private boolean chain(int target){
 					yell(Messages.get(this, "scorpion"));
 					new Item().throwSound();
 					Sample.INSTANCE.play(Assets.Sounds.CHAINS);
-					sprite.parent.add(new Chains(sprite.center(), enemy.sprite.center(), new Callback() {
+					sprite.parent.add(new Chains(sprite.center(), enemy.sprite.destinationCenter(), new Callback() {
 						public void call() {
 							Actor.addDelayed(new Pushing(enemy, enemy.pos, newPosFinal, new Callback() {
 								public void call() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/UnstableSpellbook.java
Patch:
@@ -156,6 +156,7 @@ protected void onSelect(int index) {
 								fScroll.doRead();
 								Talent.onArtifactUsed(Dungeon.hero);
 							}
+							updateQuickslot();
 						}
 						
 						@Override
@@ -190,6 +191,7 @@ public boolean act() {
 				@Override
 				public void call() {
 					scroll.doRead();
+					Item.updateQuickslot();
 				}
 			});
 			detach();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/CellSelector.java
Patch:
@@ -28,7 +28,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
 import com.shatteredpixel.shatteredpixeldungeon.items.Heap;
-import com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite;
 import com.shatteredpixel.shatteredpixeldungeon.tiles.DungeonTilemap;
 import com.watabou.input.ControllerHandler;
 import com.watabou.input.GameAction;
@@ -145,7 +144,7 @@ private float zoom( float value ) {
 	}
 	
 	public void select( int cell, int button ) {
-		if (enabled && Dungeon.hero.ready && !GameScene.InterfaceBlockingHero()
+		if (enabled && Dungeon.hero.ready && !GameScene.interfaceBlockingHero()
 				&& listener != null && cell != -1) {
 
 			switch (button){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -1110,7 +1110,7 @@ public static void show( Window wnd ) {
 		}
 	}
 
-	public static boolean InterfaceBlockingHero(){
+	public static boolean interfaceBlockingHero(){
 		if (scene == null) return false;
 
 		for (Gizmo g : scene.members){
@@ -1227,7 +1227,8 @@ public static WndBag selectItem( WndBag.ItemSelector listener ) {
 		cancelCellSelector();
 
 		if (scene != null) {
-			if (scene.inventory != null && scene.inventory.visible){
+			//TODO can the inventory pane work in these cases? bad to fallback to mobile window
+			if (scene.inventory != null && scene.inventory.visible && !interfaceBlockingHero()){
 				scene.inventory.setSelector(listener);
 				return null;
 			} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/CellSelector.java
Patch:
@@ -373,7 +373,9 @@ private boolean moveFromActions(GameAction... actions){
 
 		if (cell != Dungeon.hero.pos && cell != lastCellMoved){
 			lastCellMoved = cell;
-			select(cell, PointerEvent.LEFT);
+			if (Dungeon.hero.handle( cell )) {
+				Dungeon.hero.next();
+			}
 			return true;
 
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Toolbar.java
Patch:
@@ -126,7 +126,8 @@ protected void onClick() {
 
 			@Override
 			public GameAction keyAction() {
-				return SPDAction.REST;
+				if (btnWait.active) return SPDAction.REST;
+				else				return null;
 			}
 		});
 		

File: SPD-classes/src/main/java/com/watabou/input/KeyBindings.java
Patch:
@@ -47,13 +47,13 @@ public static void addHardBinding(int keyCode, GameAction action){
 		hardBindings.put(keyCode, action);
 	}
 
-	public static boolean acceptUnbound = false;
+	public static boolean bindingKey = false;
 
 	public static boolean isKeyBound(int keyCode){
 		if (keyCode <= 0 || keyCode > 255){
 			return false;
 		}
-		return acceptUnbound || bindings.containsKey( keyCode ) || hardBindings.containsKey( keyCode );
+		return bindingKey || bindings.containsKey( keyCode ) || hardBindings.containsKey( keyCode );
 	}
 	
 	public static GameAction getActionForKey(KeyEvent event){

File: SPD-classes/src/main/java/com/watabou/input/KeyEvent.java
Patch:
@@ -64,10 +64,13 @@ public static synchronized void processKeyEvents(){
 		for (KeyEvent k : keyEvents){
 			if (KeyBindings.getActionForKey(k) == GameAction.LEFT_CLICK){
 				PointerEvent.emulateMouseButton(PointerEvent.LEFT, k.pressed);
+				if (KeyBindings.bindingKey) keySignal.dispatch(k);
 			} else if (KeyBindings.getActionForKey(k) == GameAction.RIGHT_CLICK){
 				PointerEvent.emulateMouseButton(PointerEvent.RIGHT, k.pressed);
+				if (KeyBindings.bindingKey) keySignal.dispatch(k);
 			} else if (KeyBindings.getActionForKey(k) == GameAction.MIDDLE_CLICK){
 				PointerEvent.emulateMouseButton(PointerEvent.MIDDLE, k.pressed);
+				if (KeyBindings.bindingKey) keySignal.dispatch(k);
 			} else {
 				keySignal.dispatch(k);
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndKeyBindings.java
Patch:
@@ -443,7 +443,7 @@ protected void onClick() {
 			add(btnCancel);
 
 			resize(WIDTH, (int)btnCancel.bottom());
-			KeyBindings.acceptUnbound = true;
+			KeyBindings.bindingKey = true;
 
 		}
 
@@ -484,7 +484,7 @@ public boolean onSignal(KeyEvent event) {
 		@Override
 		public void destroy() {
 			super.destroy();
-			KeyBindings.acceptUnbound = false;
+			KeyBindings.bindingKey = false;
 		}
 
 	}

File: SPD-classes/src/main/java/com/watabou/input/PointerEvent.java
Patch:
@@ -109,7 +109,6 @@ public static PointF currentHoverPos(){
 		return lastHoverPos.clone();
 	}
 
-
 	public static synchronized void emulateMouseButton( int button, boolean down ){
 		if (down){
 			addPointerEvent(new PointerEvent((int)lastHoverPos.x, (int)lastHoverPos.y, 1000+button, Type.DOWN, button));
@@ -137,7 +136,8 @@ public static synchronized void processPointerEvents(){
 		if (hovered){
 			for (int i = 1000+LEFT; i <= 1000+FORWARD; i++){
 				if (activePointers.containsKey(i)){
-					addPointerEvent(new PointerEvent((int)lastHoverPos.x, (int)lastHoverPos.y, i, Type.DOWN, i));
+					//add to front in case pointer is also being released this frame
+					pointerEvents.add(0, new PointerEvent((int)lastHoverPos.x, (int)lastHoverPos.y, i, Type.DOWN, i));
 				}
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Toolbar.java
Patch:
@@ -144,12 +144,12 @@ protected void onClick() {
 			
 			@Override
 			public GameAction keyAction() {
-				return SPDAction.SEARCH;
+				return SPDAction.EXAMINE;
 			}
 
 			@Override
 			protected String hoverText() {
-				return Messages.titleCase(Messages.get(WndKeyBindings.class, "search"));
+				return Messages.titleCase(Messages.get(WndKeyBindings.class, "examine"));
 			}
 			
 			@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Window.java
Patch:
@@ -195,7 +195,8 @@ public void destroy() {
 	@Override
 	public boolean onSignal( KeyEvent event ) {
 		if (event.pressed) {
-			if (KeyBindings.getActionForKey( event ) == SPDAction.BACK){
+			if (KeyBindings.getActionForKey( event ) == SPDAction.BACK
+				|| KeyBindings.getActionForKey( event ) == SPDAction.WAIT){
 				onBackPressed();
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/SPDSettings.java
Patch:
@@ -64,7 +64,7 @@ public static void fullscreen( boolean value ) {
 	}
 	
 	public static boolean fullscreen() {
-		return getBoolean( KEY_FULLSCREEN, false );
+		return getBoolean( KEY_FULLSCREEN, DeviceCompat.isDesktop() );
 	}
 	
 	public static void landscape( boolean value ){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/InventoryPane.java
Patch:
@@ -66,7 +66,7 @@ public class InventoryPane extends Component {
 	//used to prevent clicks through the BG normally, or to cancel selectors if they're enabled
 	private PointerArea blocker;
 
-	private Signal.Listener keyBlocker;
+	private Signal.Listener<KeyEvent> keyBlocker;
 
 	private static InventoryPane instance;
 
@@ -107,6 +107,7 @@ public InventoryPane(){
 
 	@Override
 	public synchronized void destroy() {
+		KeyEvent.removeKeyListener(keyBlocker);
 		super.destroy();
 		if (instance == this) instance = null;
 	}
@@ -139,7 +140,7 @@ protected void onClick(PointerEvent event) {
 		keyBlocker = new Signal.Listener<KeyEvent>(){
 			@Override
 			public boolean onSignal(KeyEvent keyEvent) {
-				if (keyEvent.pressed && isSelecting()
+				if (keyEvent.pressed && isSelecting() && InventoryPane.this.visible
 						&& KeyBindings.getActionForKey(keyEvent) != SPDAction.BAG_1
 						&& KeyBindings.getActionForKey(keyEvent) != SPDAction.BAG_2
 						&& KeyBindings.getActionForKey(keyEvent) != SPDAction.BAG_3

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/WelcomeScene.java
Patch:
@@ -205,14 +205,13 @@ protected void onClick() {
 							"_-_ Quickslots now use the number keys\n" +
 							"_-_ Several game action bindings have been moved to the right of WASD\n" +
 							"_-_ Inventory bags can now be tabbed through with F1-F5\n" +
-							"_-_ Other bindings (including numpad and arrow keys to move) are unchanged." +
+							"_-_ Other bindings (including numpad and arrow keys to move) are unchanged.\n\n" +
 							"Please let me know if these new bindings work well for you, I am open to further adjustments. All keybinds can still be customized via the settings menu.",
 					Messages.get(this, "continue"),
 					2){
 				@Override
 				public void hide() {
 					super.hide();
-					ShatteredPixelDungeon.resetScene();
 				}
 			});
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/WelcomeScene.java
Patch:
@@ -201,11 +201,11 @@ protected void onClick() {
 					"Key Bindings",
 					"Shattered Pixel Dungeon's default keybindings have changed based on early demo feedback!\n\n" +
 							"Here's a quick summary of what's been adjusted:\n" +
-							"_-_ The WASD and QEZC keys are now used for movement\n" +
+							"_-_ The WAXD and QEZC keys are now used for movement, S is used for waiting\n" +
 							"_-_ Quickslots now use the number keys\n" +
 							"_-_ Several game action bindings have been moved to the right of WASD\n" +
 							"_-_ Inventory bags can now be tabbed through with F1-F5\n" +
-							"_-_ Other binding (including numpad and arrow keys to move) are unchanged." +
+							"_-_ Other bindings (including numpad and arrow keys to move) are unchanged." +
 							"Please let me know if these new bindings work well for you, I am open to further adjustments. All keybinds can still be customized via the settings menu.",
 					Messages.get(this, "continue"),
 					2){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Belongings.java
Patch:
@@ -306,6 +306,7 @@ public void observe() {
 				item.cursedKnown = true;
 			}
 		}
+		Item.updateQuickslot();
 	}
 	
 	public void uncurseEquipped() {

File: desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopLauncher.java
Patch:
@@ -101,7 +101,7 @@ public void uncaughtException(Thread thread, Throwable throwable) {
 									exceptionMsg,
 							"ok", "error", false);
 				}
-				if (Gdx.app != null) Gdx.app.exit();
+				System.exit(1);
 			}
 		});
 		

File: services/updates/debugUpdates/src/main/java/com/shatteredpixel/shatteredpixeldungeon/services/updates/DebugUpdates.java
Patch:
@@ -72,7 +72,7 @@ public void initializeInstall() {
 
 	@Override
 	public boolean supportsReviews() {
-		return true;
+		return false; //turn on to debug review prompts
 	}
 
 	@Override

File: desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopLauncher.java
Patch:
@@ -163,11 +163,12 @@ public void uncaughtException(Thread thread, Throwable throwable) {
 
 		config.setMaximized(SPDSettings.windowMaximized());
 
-		if (SPDSettings.fullscreen()) {
+		//going fullscreen on launch is still buggy on macOS, so game enters it slightly later
+		if (SPDSettings.fullscreen() && !SharedLibraryLoader.isMac) {
 			config.setFullscreenMode(Lwjgl3ApplicationConfiguration.getDisplayMode());
 		}
 		
-		//we set fullscreen/maximized in the listener as doing it through the config seems to be buggy
+		//records whether window is maximized or not for settings
 		DesktopWindowListener listener = new DesktopWindowListener();
 		config.setWindowListener( listener );
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/ItemSlot.java
Patch:
@@ -164,8 +164,7 @@ public void clear(){
 	public void item( Item item ) {
 		if (this.item == item) {
 			if (item != null) {
-				sprite.frame(item.image());
-				sprite.glow(item.glowing());
+				sprite.view( item );
 			}
 			updateText();
 			return;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Item.java
Patch:
@@ -490,8 +490,7 @@ public String status() {
 	}
 
 	public static void updateQuickslot() {
-		QuickSlotButton.refresh();
-		InventoryPane.refresh();
+		GameScene.updateItemDisplays = true;
 	}
 	
 	private static final String QUANTITY		= "quantity";

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/CellSelector.java
Patch:
@@ -143,7 +143,7 @@ private float zoom( float value ) {
 	}
 	
 	public void select( int cell ) {
-		if (enabled && Dungeon.hero.ready && !GameScene.isShowingWindow()
+		if (enabled && Dungeon.hero.ready && !GameScene.InterfaceBlockingHero()
 				&& listener != null && cell != -1) {
 			
 			listener.onSelect( cell );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/SupporterScene.java
Patch:
@@ -83,7 +83,7 @@ protected void onClick() {
 				link += "?utm_source=shatteredpd";
 				link += "&utm_medium=supporter_page";
 				link += "&utm_campaign=ingame_link";
-				DeviceCompat.openURI(link);
+				ShatteredPixelDungeon.platform.openURI(link);
 			}
 		};
 		link.icon(Icons.get(Icons.GOLD));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/MenuPane.java
Patch:
@@ -146,7 +146,7 @@ public GameAction keyAction() {
 		protected void createChildren() {
 			super.createChildren();
 
-			bg = new Image( Assets.Interfaces.MENU, 2, 2, 13, 11 );
+			bg = new Image( Assets.Interfaces.MENU_BTN, 2, 2, 13, 11 );
 			add( bg );
 
 			journalIcon = new Image( Assets.Interfaces.MENU_BTN, 31, 0, 11, 7);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndSupportPrompt.java
Patch:
@@ -22,6 +22,7 @@
 package com.shatteredpixel.shatteredpixeldungeon.windows;
 
 import com.shatteredpixel.shatteredpixeldungeon.SPDSettings;
+import com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Languages;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
@@ -66,7 +67,7 @@ protected void onClick() {
 				link += "?utm_source=shatteredpd";
 				link += "&utm_medium=supporter_prompt";
 				link += "&utm_campaign=ingame_link";
-				DeviceCompat.openURI(link);
+				ShatteredPixelDungeon.platform.openURI(link);
 				SPDSettings.supportNagged(true);
 				WndSupportPrompt.super.hide();
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Shopkeeper.java
Patch:
@@ -104,7 +104,6 @@ public static int sellPrice(Item item){
 	}
 	
 	public static WndBag sell() {
-		//FIXME currently doesn't allow for repeated sales on new inventory pane
 		return GameScene.selectItem( itemSelector );
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/Alchemize.java
Patch:
@@ -89,7 +89,6 @@ public boolean itemSelectable(Item item) {
 		@Override
 		public void onSelect( Item item ) {
 			if (item != null) {
-				//FIXME currently doesn't allow for repeated alchemizes on new inventory pane
 				WndBag parentWnd = GameScene.selectItem( itemSelector );
 				GameScene.show( new WndAlchemizeItem( item, parentWnd ) );
 			}
@@ -221,6 +220,9 @@ private void consumeAlchemize(){
 				}
 			} else {
 				curItem.detach(Dungeon.hero.belongings.backpack);
+				if (owner == null){
+					GameScene.selectItem(itemSelector);
+				}
 			}
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndTradeItem.java
Patch:
@@ -166,8 +166,8 @@ public void hide() {
 		
 		if (owner != null) {
 			owner.hide();
-			Shopkeeper.sell();
 		}
+		Shopkeeper.sell();
 	}
 	
 	public static void sell( Item item ) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Window.java
Patch:
@@ -131,6 +131,7 @@ public void resize( int w, int h ) {
 		shadow.boxRect( camera.x / camera.zoom, camera.y / camera.zoom, chrome.width(), chrome.height );
 	}
 
+	//windows with scroll panes will likely need to override this and refresh them when offset changes
 	public void offset( int xOffset, int yOffset ){
 		camera.x -= this.xOffset * camera.zoom;
 		this.xOffset = xOffset;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndSadGhost.java
Patch:
@@ -30,6 +30,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.Weapon;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
+import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.FetidRatSprite;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.GnollTricksterSprite;
@@ -143,7 +144,7 @@ protected void onPointerUp() {
 				}
 				@Override
 				protected void onClick() {
-					ShatteredPixelDungeon.scene().addToFront(new RewardWindow(item));
+					GameScene.show(new RewardWindow(item));
 				}
 			};
 			add(slot);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndWandmaker.java
Patch:
@@ -31,6 +31,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.quest.Embers;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.plants.Rotberry;
+import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite;
 import com.shatteredpixel.shatteredpixeldungeon.ui.ItemSlot;
@@ -137,7 +138,7 @@ protected void onPointerUp() {
 				@Override
 				protected void onClick() {
 					if (Dungeon.hero.belongings.contains(questItem)) {
-						ShatteredPixelDungeon.scene().addToFront(new RewardWindow(item));
+						GameScene.show(new RewardWindow(item));
 					} else {
 						hide();
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Preparation.java
Patch:
@@ -267,7 +267,7 @@ public void doAction() {
 		public void onSelect(Integer cell) {
 			if (cell == null) return;
 			final Char enemy = Actor.findChar( cell );
-			if (enemy == null || Dungeon.hero.isCharmedBy(enemy) || enemy instanceof NPC || !Dungeon.level.heroFOV[cell]){
+			if (enemy == null || Dungeon.hero.isCharmedBy(enemy) || enemy instanceof NPC || !Dungeon.level.heroFOV[cell] || enemy == Dungeon.hero){
 				GLog.w(Messages.get(Preparation.class, "no_target"));
 			} else {
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/AboutScene.java
Patch:
@@ -315,7 +315,7 @@ private CreditsBlock(boolean large, int highlight, String title, Image avatar, S
 				linkButton = new PointerArea(0, 0, 0, 0){
 					@Override
 					protected void onClick( PointerEvent event ) {
-						DeviceCompat.openURI( linkUrl );
+						ShatteredPixelDungeon.platform.openURI( linkUrl );
 					}
 				};
 				add(linkButton);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/NewsScene.java
Patch:
@@ -151,7 +151,7 @@ protected void onClick() {
 				link += "?utm_source=shatteredpd";
 				link += "&utm_medium=news_page";
 				link += "&utm_campaign=ingame_link";
-				DeviceCompat.openURI(link);
+				ShatteredPixelDungeon.platform.openURI(link);
 			}
 		};
 		btnSite.icon(Icons.get(Icons.NEWS));
@@ -323,7 +323,7 @@ protected void onClick() {
 					link += "?utm_source=shatteredpd";
 					link += "&utm_medium=news_page";
 					link += "&utm_campaign=ingame_link";
-					DeviceCompat.openURI(link);
+					ShatteredPixelDungeon.platform.openURI(link);
 				}
 			};
 			link.setRect(0, height + 2, width, BTN_HEIGHT);

File: services/updates/debugUpdates/src/main/java/com/shatteredpixel/shatteredpixeldungeon/services/updates/DebugUpdates.java
Patch:
@@ -57,7 +57,7 @@ public void checkForUpdate(boolean useMetered, boolean includeBetas, UpdateResul
 
 	@Override
 	public void initializeUpdate(AvailableUpdateData update) {
-		DeviceCompat.openURI( update.URL );
+		Game.platform.openURI( update.URL );
 	}
 
 	@Override
@@ -83,6 +83,6 @@ public void initializeReview(ReviewResultCallback callback) {
 
 	@Override
 	public void openReviewURI() {
-		DeviceCompat.openURI("https://www.google.com/");
+		Game.platform.openURI("https://www.google.com/");
 	}
 }

File: services/updates/githubUpdates/src/main/java/com/shatteredpixel/shatteredpixeldungeon/services/updates/GitHubUpdates.java
Patch:
@@ -125,7 +125,7 @@ public void cancelled() {
 
 	@Override
 	public void initializeUpdate(AvailableUpdateData update) {
-		DeviceCompat.openURI( update.URL );
+		Game.platform.openURI( update.URL );
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndSettings.java
Patch:
@@ -698,13 +698,12 @@ protected void onClick() {
 			chkMuteSFX.checked(!SPDSettings.soundFx());
 			add( chkMuteSFX );
 
-			//TODO translate for v1.2.0!
 			if (DeviceCompat.isiOS() && Messages.lang() == Languages.ENGLISH){
 
 				sep3 = new ColorBlock(1, 1, 0xFF000000);
 				add(sep3);
 
-				chkIgnoreSilent = new CheckBox( "Ignore Silent Mode" ){
+				chkIgnoreSilent = new CheckBox( Messages.get(this, "ignore_silent") ){
 					@Override
 					protected void onClick() {
 						super.onClick();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/LootIndicator.java
Patch:
@@ -67,8 +67,8 @@ public GameAction keyAction() {
 	protected void layout() {
 		super.layout();
 
-		if (!flipped)   slot.setRect( x + 1, y, SIZE, height );
-		else	        slot.setRect( x + (width() - SIZE) - 1, y, SIZE, height );
+		if (!flipped)   slot.setRect( x+2, y+2, SIZE-3, height-4 );
+		else	        slot.setRect( x+(width()-SIZE)+1, y+2, SIZE-3, height-4 );
 
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/mage/WildMagic.java
Patch:
@@ -158,7 +158,7 @@ private void afterZap( Wand cur, ArrayList<Wand> wands, Hero hero, int target){
 			cur.partialCharge++;
 			cur.curCharges--;
 		}
-		if (!wands.isEmpty()) {
+		if (!wands.isEmpty() && hero.isAlive()) {
 			zapWand(wands, hero, target);
 		} else {
 			if (hero.buff(WildMagicTracker.class) != null) {

File: SPD-classes/src/main/java/com/watabou/utils/Bundle.java
Patch:
@@ -23,6 +23,7 @@
 
 import com.badlogic.gdx.utils.JsonReader;
 import com.badlogic.gdx.utils.JsonValue;
+import com.badlogic.gdx.utils.JsonWriter;
 import com.watabou.noosa.Game;
 
 import java.io.BufferedInputStream;
@@ -452,7 +453,7 @@ public static boolean write( Bundle bundle, OutputStream stream, boolean compres
 			if (compressed) writer = new BufferedWriter( new OutputStreamWriter( new GZIPOutputStream(stream, GZIP_BUFFER ) ) );
 			else writer = new BufferedWriter( new OutputStreamWriter( stream ) );
 
-			writer.write( bundle.toString() );
+			bundle.data.prettyPrint(JsonWriter.OutputType.json, writer);
 			writer.close();
 
 			return true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -627,7 +627,6 @@ public boolean waitForActorThread(int msToWait, boolean interrupt){
 	@Override
 	public synchronized void onPause() {
 		try {
-			if (Dungeon.hero != null && !Dungeon.hero.ready) waitForActorThread(500, false);
 			Dungeon.saveAll();
 			Badges.saveGlobal();
 			Journal.saveGlobal();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/GatewayTrap.java
Patch:
@@ -82,7 +82,7 @@ public void activate() {
 			for (int i : PathFinder.NEIGHBOURS9){
 
 				Char ch = Actor.findChar(pos + i);
-				if (ch != null){
+				if (ch != null && !Char.hasProp(ch, Char.Property.IMMOVABLE)){
 					int newPos = -1;
 					if (Char.hasProp(ch, Char.Property.LARGE)){
 						if (!largeCharPositions.isEmpty()){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bags/Bag.java
Patch:
@@ -60,7 +60,7 @@ public void execute( Hero hero, String action ) {
 
 		super.execute( hero, action );
 
-		if (action.equals( AC_OPEN )) {
+		if (action.equals( AC_OPEN ) && !items.isEmpty()) {
 			
 			GameScene.show( new WndQuickBag( this ) );
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/ChangesWindow.java
Patch:
@@ -35,7 +35,7 @@ public ChangesWindow(Image icon, String title, String message ) {
 		PointerArea blocker = new PointerArea( 0, 0, PixelScene.uiCamera.width, PixelScene.uiCamera.height ) {
 			@Override
 			protected void onClick( PointerEvent event ) {
-				hide();
+				onBackPressed();
 			}
 		};
 		blocker.camera = PixelScene.uiCamera;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/CellSelector.java
Patch:
@@ -296,7 +296,8 @@ private boolean moveFromAction(GameAction action){
 	
 	public void processKeyHold(){
 		if (heldAction != SPDAction.NONE){
-			enabled = true;
+			enabled = Dungeon.hero.ready = true;
+			Dungeon.observe();
 			heldTurns++;
 			moveFromAction(heldAction);
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -627,7 +627,7 @@ public boolean waitForActorThread(int msToWait, boolean interrupt){
 	@Override
 	public synchronized void onPause() {
 		try {
-			if (!Dungeon.hero.ready) waitForActorThread(1000, false);
+			if (!Dungeon.hero.ready) waitForActorThread(500, false);
 			Dungeon.saveAll();
 			Badges.saveGlobal();
 			Journal.saveGlobal();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TalismanOfForesight.java
Patch:
@@ -97,6 +97,7 @@ public void charge(Hero target, float amount) {
 				partialCharge = 0;
 				GLog.p( Messages.get(TalismanOfForesight.class, "full_charge") );
 			}
+			updateQuickslot();
 		}
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/SummonElemental.java
Patch:
@@ -134,7 +134,7 @@ public void storeInBundle(Bundle bundle) {
 	@Override
 	public void restoreFromBundle(Bundle bundle) {
 		super.restoreFromBundle(bundle);
-		summonClass = bundle.getClass(SUMMON_CLASS);
+		if (bundle.contains(SUMMON_CLASS)) summonClass = bundle.getClass(SUMMON_CLASS);
 	}
 
 	public WndBag.ItemSelector selector = new WndBag.ItemSelector() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/GatewayTrap.java
Patch:
@@ -49,6 +49,7 @@ public void activate() {
 
 					if (cell != -1) {
 						Dungeon.level.drop( item, cell );
+						telePos = cell;
 						break;
 					}
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/UnstableSpellbook.java
Patch:
@@ -125,8 +125,6 @@ public void execute( Hero hero, String action ) {
 						||((scroll instanceof ScrollOfIdentify ||
 							scroll instanceof ScrollOfRemoveCurse ||
 							scroll instanceof ScrollOfMagicMapping) && Random.Int(2) == 0)
-						//don't roll teleportation scrolls on boss floors
-						|| (scroll instanceof ScrollOfTeleportation && Dungeon.bossLevel())
 						//cannot roll transmutation
 						|| (scroll instanceof ScrollOfTransmutation));
 				

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTeleportation.java
Patch:
@@ -61,9 +61,6 @@ public void doRead() {
 		}
 		identify();
 
-		if (!Dungeon.bossLevel()) {
-			readAnimation();
-		}
 	}
 	
 	public static boolean teleportToLocation(Char ch, int pos){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -699,7 +699,7 @@ public static void win( Class cause ) {
 
 	//default to recomputing based on max hero vision, in case vision just shrank/grew
 	public static void observe(){
-		int dist = 8;
+		int dist = Math.max(Dungeon.hero.viewDistance, 8);
 		dist *= 1f + 0.25f*Dungeon.hero.pointsInTalent(Talent.FARSIGHT);
 
 		if (Dungeon.hero.buff(MagicalSight.class) != null){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/exotic/PotionOfMastery.java
Patch:
@@ -57,7 +57,7 @@ protected void drink(final Hero hero) {
 
 		@Override
 		public String textPrompt() {
-			return "Master an Item";
+			return Messages.get(PotionOfMastery.class, "prompt");
 		}
 
 		@Override
@@ -94,10 +94,10 @@ public void onBackPressed() {}
 
 				if (item instanceof Weapon) {
 					((Weapon) item).masteryPotionBonus = true;
-					GLog.p( "Your weapon becomes easier to wield!" );
+					GLog.p( Messages.get(PotionOfMastery.class, "weapon_easier") );
 				} else if (item instanceof Armor) {
 					((Armor) item).masteryPotionBonus = true;
-					GLog.p( "Your weapon becomes easier to wear!" );
+					GLog.p( Messages.get(PotionOfMastery.class, "armor_easier") );
 				}
 				updateQuickslot();
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Ghost.java
Patch:
@@ -354,7 +354,7 @@ public static boolean processed(){
 		}
 		
 		public static boolean completed(){
-			return true;
+			return processed() && weapon == null && armor == null;
 		}
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/ReclaimTrap.java
Patch:
@@ -125,13 +125,13 @@ public int value() {
 	@Override
 	public void storeInBundle(Bundle bundle) {
 		super.storeInBundle(bundle);
-		bundle.put(STORED_TRAP, storedTrap);
+		if (storedTrap != null) bundle.put(STORED_TRAP, storedTrap);
 	}
 	
 	@Override
 	public void restoreFromBundle(Bundle bundle) {
 		super.restoreFromBundle(bundle);
-		storedTrap = bundle.getClass(STORED_TRAP);
+		if (bundle.contains(STORED_TRAP)) storedTrap = bundle.getClass(STORED_TRAP);
 	}
 	
 	public static class Recipe extends com.shatteredpixel.shatteredpixeldungeon.items.Recipe.SimpleRecipe {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/exotic/PotionOfDivineInspiration.java
Patch:
@@ -65,7 +65,7 @@ protected void drink(final Hero hero) {
 			}
 
 			if (allBoosted){
-				GLog.w(Messages.get(this, "no_more_bonus"));
+				GLog.w(Messages.get(this, "no_more_points"));
 				return;
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -790,7 +790,7 @@ public float stealth() {
 		return 0;
 	}
 
-	public void move( int step ) {
+	public final void move( int step ) {
 		move( step, true );
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM300.java
Patch:
@@ -309,7 +309,7 @@ protected Char chooseEnemy() {
 
 	@Override
 	public void move(int step, boolean travelling) {
-		super.move(step);
+		super.move(step, travelling);
 
 		if (travelling) Camera.main.shake( supercharged ? 3 : 1, 0.25f );
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Spinner.java
Patch:
@@ -130,8 +130,8 @@ public int attackProc(Char enemy, int damage) {
 	private boolean shotWebVisually = false;
 
 	@Override
-	public void move(int step) {
-		if (enemySeen && webCoolDown <= 0 && lastEnemyPos != -1){
+	public void move(int step, boolean travelling) {
+		if (travelling && enemySeen && webCoolDown <= 0 && lastEnemyPos != -1){
 			if (webPos() != -1){
 				if (sprite != null && (sprite.visible || enemy.sprite.visible)) {
 					sprite.zap( webPos() );
@@ -141,7 +141,7 @@ public void move(int step) {
 				}
 			}
 		}
-		super.move(step);
+		super.move(step, travelling);
 	}
 	
 	public int webPos(){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SpecialRoom.java
Patch:
@@ -165,7 +165,7 @@ public static SpecialRoom createRoom(){
 
 			//60% chance for front of queue, 30% chance for next, 10% for one after that
 			int index = Random.chances(new float[]{6, 3, 1});
-			while (index > floorSpecials.size()) index--;
+			while (index >= floorSpecials.size()) index--;
 
 			Room r = Reflection.newInstance(floorSpecials.get( index ));
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1773,12 +1773,12 @@ public boolean isAlive() {
 	}
 
 	@Override
-	public void move( int step ) {
+	public void move(int step, boolean travelling) {
 		boolean wasHighGrass = Dungeon.level.map[step] == Terrain.HIGH_GRASS;
 
-		super.move( step );
+		super.move( step, travelling);
 		
-		if (!flying) {
+		if (!flying && travelling) {
 			if (Dungeon.level.water[pos]) {
 				Sample.INSTANCE.play( Assets.Sounds.WATER, 1, Random.Float( 0.8f, 1.25f ) );
 			} else if (Dungeon.level.map[pos] == Terrain.EMPTY_SP) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM300.java
Patch:
@@ -308,10 +308,10 @@ protected Char chooseEnemy() {
 	}
 
 	@Override
-	public void move(int step) {
+	public void move(int step, boolean travelling) {
 		super.move(step);
 
-		Camera.main.shake( supercharged ? 3 : 1, 0.25f );
+		if (travelling) Camera.main.shake( supercharged ? 3 : 1, 0.25f );
 
 		if (Dungeon.level.map[step] == Terrain.INACTIVE_TRAP && state == HUNTING) {
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Monk.java
Patch:
@@ -96,11 +96,11 @@ protected void spend( float time ) {
 	}
 	
 	@Override
-	public void move( int step ) {
+	public void move( int step, boolean travelling) {
 		// moving reduces cooldown by an additional 0.67, giving a total reduction of 1.67f.
 		// basically monks will become focused notably faster if you kite them.
-		focusCooldown -= 0.67f;
-		super.move( step );
+		if (travelling) focusCooldown -= 0.67f;
+		super.move( step, travelling);
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Senior.java
Patch:
@@ -35,11 +35,11 @@ public class Senior extends Monk {
 	}
 	
 	@Override
-	public void move( int step ) {
+	public void move( int step, boolean travelling) {
 		// on top of the existing move bonus, senior monks get a further 1.66 cooldown reduction
 		// for a total of 3.33, double the normal 1.67 for regular monks
-		focusCooldown -= 1.66f;
-		super.move( step );
+		if (travelling) focusCooldown -= 1.66f;
+		super.move( step, travelling);
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Ghost.java
Patch:
@@ -354,7 +354,7 @@ public static boolean processed(){
 		}
 		
 		public static boolean completed(){
-			return processed() && weapon == null && armor == null;
+			return true;
 		}
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTeleportation.java
Patch:
@@ -276,7 +276,7 @@ public static void appear( Char ch, int pos ) {
 			Sample.INSTANCE.play(Assets.Sounds.TELEPORT);
 		}
 
-		ch.move( pos );
+		ch.move( pos, false );
 		if (ch.pos == pos) ch.sprite.place( pos );
 
 		if (ch.invisible == 0) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/exotic/ScrollOfMetamorphosis.java
Patch:
@@ -122,7 +122,7 @@ public WndMetamorphChoose(){
 			top = text.bottom() + 2;
 
 			ArrayList<LinkedHashMap<Talent, Integer>> talents = new ArrayList<>();
-			Talent.initClassTalents(Dungeon.hero.heroClass, talents);
+			Talent.initClassTalents(Dungeon.hero.heroClass, talents, Dungeon.hero.metamorphedTalents);
 			TalentsPane p = new TalentsPane(TalentButton.Mode.METAMORPH_CHOOSE, talents);
 			add(p);
 			p.setPos(0, top);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SpecialRoom.java
Patch:
@@ -165,6 +165,8 @@ public static SpecialRoom createRoom(){
 
 			//60% chance for front of queue, 30% chance for next, 10% for one after that
 			int index = Random.chances(new float[]{6, 3, 1});
+			while (index > floorSpecials.size()) index--;
+
 			Room r = Reflection.newInstance(floorSpecials.get( index ));
 
 			if (r instanceof WeakFloorRoom){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/Inferno.java
Patch:
@@ -70,7 +70,7 @@ protected void evolve() {
 						|| cur[cell-Dungeon.level.width()] > 0
 						|| cur[cell+Dungeon.level.width()] > 0)) {
 
-					if (fire == null || fire.cur[cell] == 0) {
+					if (fire == null || fire.cur == null || fire.cur[cell] == 0) {
 						GameScene.add(Fire.seed(cell, 4, Fire.class));
 					}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/TalentButton.java
Patch:
@@ -192,7 +192,7 @@ public void call() {
 									newTier.put(t, tier.get(t));
 								}
 							}
-							Dungeon.hero.talents.add(ScrollOfMetamorphosis.WndMetamorphReplace.INSTANCE.tier-1, newTier);
+							Dungeon.hero.talents.set(ScrollOfMetamorphosis.WndMetamorphReplace.INSTANCE.tier-1, newTier);
 							break;
 						}
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/rogue/ShadowClone.java
Patch:
@@ -31,6 +31,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.ArmorAbility;
+import com.shatteredpixel.shatteredpixeldungeon.actors.hero.abilities.huntress.SpiritHawk;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.DirectableAlly;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.MirrorImage;
@@ -119,7 +120,7 @@ protected void activate(ClassArmor armor, Hero hero, Integer target) {
 				hero.spendAndNext(Actor.TICK);
 
 			} else {
-				GLog.w(Messages.get(this, "no_space"));
+				GLog.w(Messages.get(SpiritHawk.class, "no_space"));
 			}
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/ArmoredStatue.java
Patch:
@@ -91,6 +91,7 @@ public boolean isImmune(Class effect) {
 
 	@Override
 	public int defenseProc(Char enemy, int damage) {
+		damage = super.defenseProc(enemy, damage);
 		return armor.proc(enemy, this, damage);
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/DriedRose.java
Patch:
@@ -616,10 +616,9 @@ public int attackProc(Char enemy, int damage) {
 		@Override
 		public int defenseProc(Char enemy, int damage) {
 			if (rose != null && rose.armor != null) {
-				return rose.armor.proc( enemy, this, damage );
-			} else {
-				return super.defenseProc(enemy, damage);
+				damage = rose.armor.proc( enemy, this, damage );
 			}
+			return super.defenseProc(enemy, damage);
 		}
 		
 		@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/stones/Runestone.java
Patch:
@@ -66,7 +66,7 @@ public int value() {
 
 	@Override
 	public int energyVal() {
-		return 3;
+		return 3 * quantity;
 	}
 
 	public static class PlaceHolder extends Runestone {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/stones/StoneOfAugmentation.java
Patch:
@@ -77,7 +77,7 @@ public int value() {
 
 	@Override
 	public int energyVal() {
-		return 4;
+		return 4 * quantity;
 	}
 	
 	public class WndAugment extends Window {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/stones/StoneOfEnchantment.java
Patch:
@@ -79,7 +79,7 @@ public int value() {
 
 	@Override
 	public int energyVal() {
-		return 4;
+		return 4 * quantity;
 	}
 
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/plants/Plant.java
Patch:
@@ -207,7 +207,7 @@ public int value() {
 
 		@Override
 		public int energyVal() {
-			return 2;
+			return 2 * quantity;
 		}
 
 		@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/plants/Rotberry.java
Patch:
@@ -74,7 +74,7 @@ public int value() {
 
 		@Override
 		public int energyVal() {
-			return 3;
+			return 3 * quantity;
 		}
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/plants/Starflower.java
Patch:
@@ -63,7 +63,7 @@ public int value() {
 
 		@Override
 		public int energyVal() {
-			return 3;
+			return 3 * quantity;
 		}
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/QuickRecipe.java
Patch:
@@ -133,7 +133,7 @@ protected void onClick() {
 		
 		if (cost > 0) {
 			arrow = new arrow(Icons.get(Icons.ARROW), cost);
-			arrow.hardlightText(0x00CCFF);
+			arrow.hardlightText(0x44CCFF);
 		} else {
 			arrow = new arrow(Icons.get(Icons.ARROW));
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Goo.java
Patch:
@@ -183,10 +183,9 @@ protected boolean doAttack( Char enemy ) {
 					((GooSprite)sprite).triggerEmitters();
 				}
 				attack( enemy );
+				spend( attackDelay() );
 			}
 
-			spend( attackDelay() );
-
 			return !visible;
 
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/CurseInfusion.java
Patch:
@@ -29,6 +29,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor;
 import com.shatteredpixel.shatteredpixeldungeon.items.quest.MetalShard;
+import com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfMight;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfRemoveCurse;
 import com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.SpiritBow;
@@ -79,6 +80,8 @@ protected void onItemSelected(Item item) {
 		} else if (item instanceof Wand){
 			((Wand) item).curseInfusionBonus = true;
 			((Wand) item).updateLevel();
+		} else if (item instanceof RingOfMight){
+			curUser.updateHT(false);
 		}
 		Badges.validateItemLevelAquired(item);
 		updateQuickslot();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfUpgrade.java
Patch:
@@ -101,7 +101,7 @@ protected void onItemSelected( Item item ) {
 
 			item.upgrade();
 
-			if (wasCursed && !item.cursed){
+			if (item.cursedKnown && wasCursed && !item.cursed){
 				removeCurse( Dungeon.hero );
 			}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/ArtifactRecharge.java
Patch:
@@ -50,7 +50,9 @@ public boolean act() {
 					if (b instanceof HornOfPlenty.hornRecharge && ignoreHornOfPlenty){
 						continue;
 					}
-					((Artifact.ArtifactBuff) b).charge((Hero) target, chargeAmount);
+					if (!((Artifact.ArtifactBuff) b).isCursed()) {
+						((Artifact.ArtifactBuff) b).charge((Hero) target, chargeAmount);
+					}
 				}
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/glyphs/AntiMagic.java
Patch:
@@ -91,7 +91,7 @@ public class AntiMagic extends Armor.Glyph {
 	
 	@Override
 	public int proc(Armor armor, Char attacker, Char defender, int damage) {
-		//no proc effect, see Hero.damage
+		//no proc effect, see Hero.damage and GhostHero.damage and ArmoredStatue.damage
 		return damage;
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/glyphs/Brimstone.java
Patch:
@@ -31,7 +31,7 @@ public class Brimstone extends Armor.Glyph {
 
 	@Override
 	public int proc(Armor armor, Char attacker, Char defender, int damage) {
-		//no proc effect, see Hero.isImmune and GhostHero.isImmune
+		//no proc effect, see Hero.isImmune and GhostHero.isImmune and ArmoredStatue.isImmune
 		return damage;
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/InterlevelScene.java
Patch:
@@ -462,8 +462,9 @@ private void resurrect() {
 			do {
 				Dungeon.hero.pos = level.randomRespawnCell(Dungeon.hero);
 				tries++;
-			} while (level.trueDistance(invPos, Dungeon.hero.pos) <= 30 - (tries/10));
-			level.plants.remove(Dungeon.hero.pos); //so the hero does not spawn on a plant
+			} while (level.traps.get(Dungeon.hero.pos) != null
+					|| (level.plants.get(Dungeon.hero.pos) != null && tries < 500)
+					|| level.trueDistance(invPos, Dungeon.hero.pos) <= 30 - (tries/10));
 			Dungeon.hero.resurrect();
 			level.drop(new LostBackpack(), invPos);
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SpecialRoom.java
Patch:
@@ -81,7 +81,7 @@ public void restoreFromBundle(Bundle bundle) {
 
 	//special rooms which give an equipment reward
 	private static final ArrayList<Class<? extends SpecialRoom>> EQUIP_SPECIALS = new ArrayList<>( Arrays.asList(
-			ArmoryRoom.class, ArmoryRoom.class, ArmoryRoom.class, ArmoryRoom.class, ArmoryRoom.class, ArmoryRoom.class, ArmoryRoom.class
+			WeakFloorRoom.class, CryptRoom.class, PoolRoom.class, ArmoryRoom.class, TrapsRoom.class, StatueRoom.class, VaultRoom.class
 	));
 
 	//special rooms which give a consumable reward

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Ghoul.java
Patch:
@@ -266,7 +266,7 @@ public boolean act() {
 				}
 				ghoul.HP = Math.round(ghoul.HT/10f);
 				Actor.add(ghoul);
-				ghoul.spend(-ghoul.cooldown());
+				ghoul.timeToNow();
 				Dungeon.level.mobs.add(ghoul);
 				Dungeon.level.occupyCell( ghoul );
 				ghoul.sprite.idle();
@@ -297,7 +297,7 @@ public void detach() {
 			Ghoul newHost = searchForHost(ghoul);
 			if (newHost != null){
 				attachTo(newHost);
-				spend(-cooldown());
+				timeToNow();
 			} else {
 				ghoul.die(this);
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Tengu.java
Patch:
@@ -101,7 +101,7 @@ public class Tengu extends Mob {
 	protected void onAdd() {
 		//when he's removed and re-added to the fight, his time is always set to now.
 		if (cooldown() > TICK) {
-			spend(-cooldown());
+			timeToNow();
 			spendToWhole();
 		}
 		super.onAdd();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/LiquidMetal.java
Patch:
@@ -120,7 +120,9 @@ public void onSelect( Item item ) {
 				//we remove a tiny amount here to account for rounding errors
 				float percentDurabilityLost = 0.999f - (m.durabilityLeft()/100f);
 				maxToUse = (int)Math.ceil(maxToUse*percentDurabilityLost);
-				if (maxToUse == 0 || percentDurabilityLost < m.durabilityPerUse()/100f){
+				float durPerUse = m.durabilityPerUse()/100f;
+				if (maxToUse == 0 ||
+						Math.ceil(m.durabilityLeft()/ m.durabilityPerUse()) >= Math.ceil(m.MAX_DURABILITY/ m.durabilityPerUse()) ){
 					GLog.w(Messages.get(LiquidMetal.class, "already_fixed"));
 					return;
 				} else if (maxToUse < quantity()) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/MissileWeapon.java
Patch:
@@ -61,7 +61,7 @@ abstract public class MissileWeapon extends Weapon {
 	
 	protected boolean sticky = true;
 	
-	protected static final float MAX_DURABILITY = 100;
+	public static final float MAX_DURABILITY = 100;
 	protected float durability = MAX_DURABILITY;
 	protected float baseUses = 10;
 	
@@ -265,6 +265,7 @@ public float durabilityLeft(){
 
 	public void repair( float amount ){
 		durability += amount;
+		durability = Math.min(durability, MAX_DURABILITY);
 	}
 	
 	public float durabilityPerUse(){
@@ -444,7 +445,7 @@ public void restoreFromBundle(Bundle bundle) {
 		bundleRestoring = true;
 		super.restoreFromBundle(bundle);
 		bundleRestoring = false;
-		durability = bundle.getInt(DURABILITY);
+		durability = bundle.getFloat(DURABILITY);
 	}
 
 	public static class PlaceHolder extends MissileWeapon {

File: SPD-classes/src/main/java/com/watabou/noosa/Game.java
Patch:
@@ -275,7 +275,7 @@ protected void update() {
 	}
 	
 	public static void reportException( Throwable tr ) {
-		if (instance != null) {
+		if (instance != null && Gdx.app != null) {
 			instance.logException(tr);
 		} else {
 			//fallback if error happened in initialization

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/LiquidMetal.java
Patch:
@@ -182,7 +182,7 @@ public Item sampleOutput(ArrayList<Item> ingredients) {
 				MissileWeapon m = (MissileWeapon) i;
 				float quantity = m.quantity()-1;
 				quantity += 0.25f + 0.0075f*m.durabilityLeft();
-				quantity *= Math.pow(2, Math.max(3, m.level()));
+				quantity *= Math.pow(2, Math.min(3, m.level()));
 				metalQuantity += Math.round((5*(m.tier+1))*quantity);
 			}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/UnstableSpellbook.java
Patch:
@@ -320,7 +320,7 @@ public Class<?extends Bag> preferredBag(){
 
 		@Override
 		public boolean itemSelectable(Item item) {
-			return item instanceof Scroll && scrolls.contains(item.getClass());
+			return item instanceof Scroll && item.isIdentified() && scrolls.contains(item.getClass());
 		}
 
 		@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DemonSpawner.java
Patch:
@@ -117,6 +117,7 @@ protected boolean act() {
 				}
 			}
 		}
+		alerted = false;
 		return super.act();
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1649,10 +1649,11 @@ public void die( Object cause ) {
 				//delete the run or submit it to rankings, because a WndResurrect is about to exist
 				//this is needed because the actual creation of the window is delayed here
 				WndResurrect.instance = new Object();
+				Ankh finalAnkh = ankh;
 				Game.runOnRenderThread(new Callback() {
 					@Override
 					public void call() {
-						GameScene.show( new WndResurrect() );
+						GameScene.show( new WndResurrect(finalAnkh) );
 					}
 				});
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/GoldenMimic.java
Patch:
@@ -30,6 +30,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.Heap;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor;
+import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact;
 import com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.Weapon;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon;
@@ -94,7 +95,7 @@ protected void generatePrize() {
 				if (i instanceof Armor && ((Armor) i).hasCurseGlyph()){
 					((Armor) i).inscribe(null);
 				}
-				if (!(i instanceof MissileWeapon) && i.level() == 0 && Random.Int(2) == 0){
+				if (!(i instanceof MissileWeapon || i instanceof Artifact) && i.level() == 0 && Random.Int(2) == 0){
 					i.upgrade();
 				}
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -538,7 +538,6 @@ protected boolean doAttack( Char enemy ) {
 		
 		if (sprite != null && (sprite.visible || enemy.sprite.visible)) {
 			sprite.attack( enemy.pos );
-			spend( attackDelay() );
 			return false;
 			
 		} else {
@@ -551,6 +550,7 @@ protected boolean doAttack( Char enemy ) {
 	@Override
 	public void onAttackComplete() {
 		attack( enemy );
+		spend( attackDelay() );
 		super.onAttackComplete();
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -741,7 +741,7 @@ public void rollToDropLoot(){
 		}
 		
 		//lucky enchant logic
-		if (Dungeon.hero.lvl <= maxLvl && buff(Lucky.LuckProc.class) != null){
+		if (buff(Lucky.LuckProc.class) != null){
 			Dungeon.level.drop(Lucky.genLoot(), pos).sprite.drop();
 			Lucky.showFlare(sprite);
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1619,7 +1619,6 @@ public void die( Object cause ) {
 		}
 
 		if (ankh != null) {
-			ankh.detach(belongings.backpack);
 			interrupt();
 			resting = false;
 
@@ -1635,6 +1634,8 @@ public void die( Object cause ) {
 				GLog.w(Messages.get(this, "revive"));
 				Statistics.ankhsUsed++;
 
+				ankh.detach(belongings.backpack);
+
 				for (Char ch : Actor.chars()) {
 					if (ch instanceof DriedRose.GhostHero) {
 						((DriedRose.GhostHero) ch).sayAnhk();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndResurrect.java
Patch:
@@ -56,13 +56,11 @@ public class WndResurrect extends Window {
 
 	RedButton btnContinue;
 	
-	public WndResurrect() {
+	public WndResurrect( final Ankh ankh ) {
 		
 		super();
 		
 		instance = this;
-
-		Ankh ankh = new Ankh();
 		
 		IconTitle titlebar = new IconTitle();
 		titlebar.icon( new ItemSprite( ankh.image(), null ) );
@@ -104,6 +102,8 @@ protected void onClick() {
 				
 				Statistics.ankhsUsed++;
 
+				ankh.detach(Dungeon.hero.belongings.backpack);
+
 				if (btnItem1.item != null){
 					btnItem1.item.keptThoughLostInvent = true;
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/MissileWeapon.java
Patch:
@@ -267,7 +267,7 @@ public void repair( float amount ){
 		durability += amount;
 	}
 	
-	protected float durabilityPerUse(){
+	public float durabilityPerUse(){
 		float usages = baseUses * (float)(Math.pow(3, level()));
 
 		//+50%/75% durability

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/darts/RotDart.java
Patch:
@@ -48,7 +48,7 @@ public int proc(Char attacker, Char defender, int damage) {
 	}
 	
 	@Override
-	protected float durabilityPerUse() {
+	public float durabilityPerUse() {
 		return 100f;
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/darts/TippedDart.java
Patch:
@@ -129,7 +129,7 @@ protected void rangedHit(Char enemy, int cell) {
 	private static int targetPos = -1;
 
 	@Override
-	protected float durabilityPerUse() {
+	public float durabilityPerUse() {
 		float use = super.durabilityPerUse();
 		
 		use /= (1 + Dungeon.hero.pointsInTalent(Talent.DURABLE_TIPS));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Guard.java
Patch:
@@ -116,6 +116,7 @@ public void call() {
 
 	private void pullEnemy( Char enemy, int pullPos ){
 		enemy.pos = pullPos;
+		enemy.sprite.place(pullPos);
 		Dungeon.level.occupyCell(enemy);
 		Cripple.prolong(enemy, Cripple.class, 4f);
 		if (enemy == Dungeon.hero) {
@@ -173,7 +174,7 @@ public boolean act( boolean enemyInFOV, boolean justAlerted ) {
 					&& !isCharmedBy( enemy )
 					&& !canAttack( enemy )
 					&& Dungeon.level.distance( pos, enemy.pos ) < 5
-					&& Random.Int(3) == 0
+
 					
 					&& chain(enemy.pos)){
 				return !(sprite.visible || enemy.sprite.visible);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Tengu.java
Patch:
@@ -799,14 +799,14 @@ private int right(int direction){
 		public void storeInBundle(Bundle bundle) {
 			super.storeInBundle(bundle);
 			bundle.put( DIRECTION, direction );
-			bundle.put( CUR_CELLS, curCells );
+			if (curCells != null) bundle.put( CUR_CELLS, curCells );
 		}
 		
 		@Override
 		public void restoreFromBundle(Bundle bundle) {
 			super.restoreFromBundle(bundle);
 			direction = bundle.getInt( DIRECTION );
-			curCells = bundle.getIntArray( CUR_CELLS );
+			if (bundle.contains( CUR_CELLS )) curCells = bundle.getIntArray( CUR_CELLS );
 		}
 		
 		public static class FireBlob extends Blob {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/ReclaimTrap.java
Patch:
@@ -46,7 +46,7 @@ public class ReclaimTrap extends TargetedSpell {
 		image = ItemSpriteSheet.RECLAIM_TRAP;
 	}
 	
-	private Class<?extends Trap> storedTrap = SummoningTrap.class;
+	private Class<?extends Trap> storedTrap = null;
 	
 	@Override
 	public ArrayList<String> actions(Hero hero) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/InterlevelScene.java
Patch:
@@ -453,7 +453,6 @@ private void resurrect() {
 			Dungeon.hero.pos = level.randomRespawnCell(Dungeon.hero);
 			level.drop(new LostBackpack(), level.randomRespawnCell(null));
 		} else {
-			Dungeon.hero.resurrect();
 			level = Dungeon.level;
 			BArray.setFalse(level.heroFOV);
 			BArray.setFalse(level.visited);
@@ -464,6 +463,8 @@ private void resurrect() {
 				Dungeon.hero.pos = level.randomRespawnCell(Dungeon.hero);
 				tries++;
 			} while (level.trueDistance(invPos, Dungeon.hero.pos) <= 30 - (tries/10));
+			level.plants.remove(Dungeon.hero.pos); //so the hero does not spawn on a plant
+			Dungeon.hero.resurrect();
 			level.drop(new LostBackpack(), invPos);
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/ReclaimTrap.java
Patch:
@@ -27,6 +27,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.quest.MetalShard;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfMagicMapping;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfRecharging;
+import com.shatteredpixel.shatteredpixeldungeon.levels.traps.SummoningTrap;
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap;
 import com.shatteredpixel.shatteredpixeldungeon.mechanics.Ballistica;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
@@ -45,7 +46,7 @@ public class ReclaimTrap extends TargetedSpell {
 		image = ItemSpriteSheet.RECLAIM_TRAP;
 	}
 	
-	private Class<?extends Trap> storedTrap = null;
+	private Class<?extends Trap> storedTrap = SummoningTrap.class;
 	
 	@Override
 	public ArrayList<String> actions(Hero hero) {
@@ -64,7 +65,7 @@ protected void affectTarget(Ballistica bolt, Hero hero) {
 			quantity++; //storing a trap doesn't consume the spell
 			Trap t = Dungeon.level.traps.get(bolt.collisionPos);
 			if (t != null && t.active && t.visible) {
-				t.disarm();
+				t.disarm(); //even disarms traps that normally wouldn't be
 				
 				Sample.INSTANCE.play(Assets.Sounds.LIGHTNING);
 				ScrollOfRecharging.charge(hero);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/DistortionTrap.java
Patch:
@@ -153,7 +153,7 @@ public void activate() {
 		for (Mob mob : mobs){
 			//manually trigger traps first to avoid sfx spam
 			if ((t = Dungeon.level.traps.get(mob.pos)) != null && t.active){
-				t.disarm();
+				if (t.disarmedByActivation) t.disarm();
 				t.reveal();
 				t.activate();
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/FlockTrap.java
Patch:
@@ -57,7 +57,7 @@ public void activate() {
 					CellEmitter.get(i).burst(Speck.factory(Speck.WOOL), 4);
 					//before the tile is pressed, directly trigger traps to avoid sfx spam
 					if ((t = Dungeon.level.traps.get(i)) != null && t.active){
-						t.disarm();
+						if (t.disarmedByActivation) t.disarm();
 						t.reveal();
 						t.activate();
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/SummoningTrap.java
Patch:
@@ -90,7 +90,7 @@ public void activate() {
 		for (Mob mob : mobs){
 			//manually trigger traps first to avoid sfx spam
 			if ((t = Dungeon.level.traps.get(mob.pos)) != null && t.active){
-				t.disarm();
+				if (t.disarmedByActivation) t.disarm();
 				t.reveal();
 				t.activate();
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TimekeepersHourglass.java
Patch:
@@ -250,6 +250,7 @@ public class timeStasis extends ArtifactBuff {
 		
 		{
 			type = buffType.POSITIVE;
+			actPriority = BUFF_PRIO-3; //acts after all other buffs, so they are prevented
 		}
 
 		@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/rogue/SmokeBomb.java
Patch:
@@ -112,7 +112,8 @@ protected void activate(ClassArmor armor, Hero hero, Integer target) {
 				}
 
 				if (hero.hasTalent(Talent.HASTY_RETREAT)){
-					int duration = hero.pointsInTalent(Talent.HASTY_RETREAT);
+					//effectively 1/2/3/4 turns
+					float duration = 0.67f + hero.pointsInTalent(Talent.HASTY_RETREAT);
 					Buff.affect(hero, Haste.class, duration);
 					Buff.affect(hero, Invisibility.class, duration);
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/GeyserTrap.java
Patch:
@@ -68,7 +68,7 @@ public void activate() {
 			}
 			if (targetpos != -1){
 				//trace a ballistica in the direction of our target
-				Ballistica trajectory = new Ballistica(pos, targetpos, Ballistica.STOP_SOLID);
+				Ballistica trajectory = new Ballistica(pos, targetpos, Ballistica.PROJECTILE);
 				//knock them back along that ballistica
 				WandOfBlastWave.throwChar(ch, trajectory, 2, true);
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/mage/ElementalBlast.java
Patch:
@@ -174,7 +174,7 @@ protected void activate(ClassArmor armor, Hero hero, Integer target) {
 			);
 		}
 
-		final float effectMulti = 1f + 0.15f*hero.pointsInTalent(Talent.ELEMENTAL_POWER);
+		final float effectMulti = 1f + 0.2f*hero.pointsInTalent(Talent.ELEMENTAL_POWER);
 
 		//cast a ray 2/3 the way, and do effects
 		Class<? extends Wand> finalWandCls = wandCls;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DemonSpawner.java
Patch:
@@ -103,9 +103,9 @@ protected boolean act() {
 				spawn.pos = Random.element( candidates );
 				spawn.state = spawn.HUNTING;
 
+				GameScene.add( spawn, 1 );
 				Dungeon.level.occupyCell(spawn);
 
-				GameScene.add( spawn, 1 );
 				if (sprite.visible) {
 					Actor.addDelayed(new Pushing(spawn, pos, spawn.pos), -1);
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Ghoul.java
Patch:
@@ -122,10 +122,10 @@ protected boolean act() {
 				}
 				
 				child.pos = Random.element( candidates );
-				
+
+				GameScene.add( child );
 				Dungeon.level.occupyCell(child);
 				
-				GameScene.add( child );
 				if (sprite.visible) {
 					Actor.addDelayed( new Pushing( child, pos, child.pos ), -1 );
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Swarm.java
Patch:
@@ -100,11 +100,11 @@ public int defenseProc( Char enemy, int damage ) {
 				clone.HP = (HP - damage) / 2;
 				clone.pos = Random.element( candidates );
 				clone.state = clone.HUNTING;
-				
-				Dungeon.level.occupyCell(clone);
-				
+
 				GameScene.add( clone, SPLIT_DELAY );
 				Actor.addDelayed( new Pushing( clone, pos, clone.pos ), -1 );
+
+				Dungeon.level.occupyCell(clone);
 				
 				HP -= clone.HP;
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Wraith.java
Patch:
@@ -106,9 +106,9 @@ public static Wraith spawnAt( int pos ) {
 			w.adjustStats( Dungeon.depth );
 			w.pos = pos;
 			w.state = w.HUNTING;
-			Dungeon.level.occupyCell(w);
 			GameScene.add( w, SPAWN_DELAY );
-			
+			Dungeon.level.occupyCell(w);
+
 			w.sprite.alpha( 0 );
 			w.sprite.parent.add( new AlphaTweener( w.sprite, 1, 0.5f ) );
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/WoollyBomb.java
Patch:
@@ -53,8 +53,8 @@ public void explode(int cell) {
 					Sheep sheep = new Sheep();
 					sheep.lifespan = Random.NormalIntRange( 12, 16 );
 					sheep.pos = i;
-					Dungeon.level.occupyCell(sheep);
 					GameScene.add(sheep);
+					Dungeon.level.occupyCell(sheep);
 					CellEmitter.get(i).burst(Speck.factory(Speck.WOOL), 4);
 				}
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/stones/StoneOfFlock.java
Patch:
@@ -55,8 +55,8 @@ protected void activate(int cell) {
 					Sheep sheep = new Sheep();
 					sheep.lifespan = Random.NormalIntRange( 6, 8 );
 					sheep.pos = i;
-					Dungeon.level.occupyCell(sheep);
 					GameScene.add(sheep);
+					Dungeon.level.occupyCell(sheep);
 					CellEmitter.get(i).burst(Speck.factory(Speck.WOOL), 4);
 				}
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/GnollTrickster.java
Patch:
@@ -105,7 +105,7 @@ protected boolean getCloser( int target ) {
 	@Override
 	public void aggro(Char ch) {
 		//cannot be aggroed to something it can't see
-		if (fieldOfView == null || fieldOfView[ch.pos]) {
+		if (ch == null || fieldOfView == null || fieldOfView[ch.pos]) {
 			super.aggro(ch);
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Scorpio.java
Patch:
@@ -97,7 +97,7 @@ protected boolean getCloser( int target ) {
 	@Override
 	public void aggro(Char ch) {
 		//cannot be aggroed to something it can't see
-		if (fieldOfView == null || fieldOfView[ch.pos]) {
+		if (ch == null || fieldOfView == null || fieldOfView[ch.pos]) {
 			super.aggro(ch);
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TimekeepersHourglass.java
Patch:
@@ -26,6 +26,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Hunger;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Invisibility;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.LockedFloor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent;
@@ -256,6 +257,8 @@ public boolean attachTo(Char target) {
 
 			if (super.attachTo(target)) {
 
+				Invisibility.dispel();
+
 				int usedCharge = Math.min(charge, 2);
 				//buffs always act last, so the stasis buff should end a turn early.
 				spend((5*usedCharge) - 1);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Burning.java
Patch:
@@ -104,7 +104,7 @@ public boolean act() {
 
 					ArrayList<Item> burnable = new ArrayList<>();
 					//does not reach inside of containers
-					if (hero.buff(LostInventory.class) != null) {
+					if (hero.buff(LostInventory.class) == null) {
 						for (Item i : hero.belongings.backpack.items) {
 							if (!i.unique && (i instanceof Scroll || i instanceof MysteryMeat || i instanceof FrozenCarpaccio)) {
 								burnable.add(i);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Frost.java
Patch:
@@ -61,7 +61,7 @@ public boolean attachTo( Char target ) {
 				Hero hero = (Hero)target;
 				ArrayList<Item> freezable = new ArrayList<>();
 				//does not reach inside of containers
-				if (hero.buff(LostInventory.class) != null) {
+				if (hero.buff(LostInventory.class) == null) {
 					for (Item i : hero.belongings.backpack.items) {
 						if (!i.unique && (i instanceof Potion || i instanceof MysteryMeat)) {
 							freezable.add(i);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/Ratmogrify.java
Patch:
@@ -221,6 +221,7 @@ public float attackDelay() {
 
 		@Override
 		public void rollToDropLoot() {
+			original.pos = pos;
 			original.rollToDropLoot();
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/Trap.java
Patch:
@@ -23,6 +23,8 @@
 
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
+import com.shatteredpixel.shatteredpixeldungeon.levels.Level;
+import com.shatteredpixel.shatteredpixeldungeon.levels.Terrain;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.watabou.noosa.audio.Sample;
@@ -92,7 +94,7 @@ public void trigger() {
 				Sample.INSTANCE.play(Assets.Sounds.TRAP);
 			}
 			if (disarmedByActivation) disarm();
-			reveal();
+			Dungeon.level.discover(pos);
 			activate();
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/LiquidMetal.java
Patch:
@@ -135,6 +135,7 @@ public void onSelect( Item item ) {
 
 				curUser.sprite.operate(curUser.pos);
 				Sample.INSTANCE.play(Assets.Sounds.DRINK);
+				updateQuickslot();
 				curUser.sprite.emitter().start(Speck.factory(Speck.LIGHT), 0.1f, 10);
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndInfoMob.java
Patch:
@@ -70,11 +70,12 @@ protected void layout() {
 			image.x = 0;
 			image.y = Math.max( 0, name.height() + health.height() - image.height() );
 
+			float w = width - image.width() - GAP;
+
+			name.maxWidth((int)w);
 			name.setPos(x + image.width + GAP,
 					image.height() > name.height() ? y +(image.height() - name.height()) / 2 : y);
 
-			float w = width - image.width() - GAP;
-
 			health.setRect(image.width() + GAP, name.bottom() + GAP, w, health.height());
 
 			buffs.setPos(

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/ArcaneResin.java
Patch:
@@ -8,6 +8,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.bags.Bag;
 import com.shatteredpixel.shatteredpixeldungeon.items.bags.MagicalHolster;
 import com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand;
+import com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MagesStaff;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
@@ -70,7 +71,8 @@ public int value() {
 
 		@Override
 		public String textPrompt() {
-			return Messages.get(LiquidMetal.class, "prompt");
+			//FIXME give this its own prompt string
+			return Messages.get(MagesStaff.class, "prompt");
 		}
 
 		@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/mage/WarpBeacon.java
Patch:
@@ -186,7 +186,7 @@ protected void onSelect(int index) {
 				return;
 			}
 
-			if (Dungeon.level.distance(hero.pos, target) > 3*hero.pointsInTalent(Talent.REMOTE_BEACON)){
+			if (Dungeon.level.distance(hero.pos, target) > 4*hero.pointsInTalent(Talent.REMOTE_BEACON)){
 				GLog.w( Messages.get(WarpBeacon.class, "too_far") );
 				return;
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TimekeepersHourglass.java
Patch:
@@ -347,7 +347,7 @@ public void triggerPresses(){
 		public void disarmPressedTraps(){
 			for (int cell : presses){
 				Trap t = Dungeon.level.traps.get(cell);
-				if (t != null) t.disarm();
+				if (t != null && t.disarmedByActivation) t.disarm();
 			}
 
 			presses = new ArrayList<>();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/plants/Swiftthistle.java
Patch:
@@ -131,7 +131,7 @@ public void triggerPresses() {
 		public void disarmPressedTraps(){
 			for (int cell : presses){
 				Trap t = Dungeon.level.traps.get(cell);
-				if (t != null) t.disarm();
+				if (t != null && t.disarmedByActivation) t.disarm();
 			}
 
 			presses = new ArrayList<>();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -74,7 +74,7 @@ public abstract class Wand extends Item {
 	
 	protected Charger charger;
 	
-	private boolean curChargeKnown = false;
+	public boolean curChargeKnown = false;
 	
 	public boolean curseInfusionBonus = false;
 	public int resinBonus = 0;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -676,7 +676,7 @@ public static void preview( GamesInProgress.Info info, Bundle bundle ) {
 	}
 	
 	public static void fail( Class cause ) {
-		if (hero.belongings.getItem( Ankh.class ) == null) {
+		if (WndResurrect.instance == null) {
 			Rankings.INSTANCE.submit( false, cause );
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndResurrect.java
Patch:
@@ -48,7 +48,7 @@ public class WndResurrect extends Window {
 
 	private static final int BTN_SIZE	= 36;
 
-	public static WndResurrect instance;
+	public static Object instance;
 
 	private WndBlacksmith.ItemButton btnItem1;
 	private WndBlacksmith.ItemButton btnItem2;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Heap.java
Patch:
@@ -155,8 +155,9 @@ public void drop( Item item ) {
 			items.remove( item );
 			
 		}
-		
-		if (item.dropsDownHeap && type != Type.FOR_SALE) {
+
+		//lost backpack must always be on top of a heap
+		if ((item.dropsDownHeap && type != Type.FOR_SALE) || peek() instanceof LostBackpack) {
 			items.add( item );
 		} else {
 			items.addFirst( item );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -2006,7 +2006,7 @@ public void resurrect() {
 			} else if (i instanceof CloakOfShadows && i.keptThoughLostInvent && hasTalent(Talent.LIGHT_CLOAK)){
 				((CloakOfShadows) i).activate(this);
 			} else if (i instanceof Wand && i.keptThoughLostInvent){
-				if (holster.contains(i)){
+				if (holster != null && holster.contains(i)){
 					((Wand) i).charge(this, MagicalHolster.HOLSTER_SCALE_FACTOR);
 				} else {
 					((Wand) i).charge(this);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/LostBackpack.java
Patch:
@@ -38,7 +38,7 @@ public boolean doPickUp(Hero hero) {
 				} else if ( i instanceof CloakOfShadows && hero.hasTalent(Talent.LIGHT_CLOAK)){
 					((CloakOfShadows) i).activate(hero);
 				} else if (i instanceof Wand){
-					if (holster.contains(i)){
+					if (holster != null && holster.contains(i)){
 						((Wand) i).charge(hero, MagicalHolster.HOLSTER_SCALE_FACTOR);
 					} else {
 						((Wand) i).charge(hero);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndResurrect.java
Patch:
@@ -142,9 +142,9 @@ public void onSelect( Item item ) {
 
 				if (btnItem1.item == btnItem2.item){
 					if (btnPressed == btnItem1){
-						btnItem2.item(null);
+						btnItem2.clear();
 					} else {
-						btnItem1.item(null);
+						btnItem1.clear();
 					}
 				}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Wraith.java
Patch:
@@ -106,6 +106,7 @@ public static Wraith spawnAt( int pos ) {
 			w.adjustStats( Dungeon.depth );
 			w.pos = pos;
 			w.state = w.HUNTING;
+			Dungeon.level.occupyCell(w);
 			GameScene.add( w, SPAWN_DELAY );
 			
 			w.sprite.alpha( 0 );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/WaterOfTransmutation.java
Patch:
@@ -187,7 +187,7 @@ private Wand changeWand( Wand w ) {
 		n.level( 0 );
 		int level = w.level();
 		if (w.curseInfusionBonus) level--;
-		level -= n.resinBonus;
+		level -= w.resinBonus;
 		n.upgrade( level );
 		
 		n.levelKnown = w.levelKnown;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTransmutation.java
Patch:
@@ -221,7 +221,7 @@ private Wand changeWand( Wand w ) {
 		n.level( 0 );
 		int level = w.level();
 		if (w.curseInfusionBonus) level--;
-		level -= n.resinBonus;
+		level -= w.resinBonus;
 		n.upgrade( level );
 		
 		n.levelKnown = w.levelKnown;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/mage/WildMagic.java
Patch:
@@ -134,6 +134,7 @@ private void zapWand( ArrayList<Wand> wands, Hero hero, int target){
 			cur.fx(aim, new Callback() {
 				@Override
 				public void call() {
+					cur.onZap(aim);
 					afterZap(cur, wands, hero, target);
 				}
 			});

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Succubus.java
Patch:
@@ -131,7 +131,7 @@ private void blink( int target ) {
 				cell = route.collisionPos + n;
 				if (Dungeon.level.passable[cell]
 						&& Actor.findChar( cell ) == null
-						&& (!properties().contains(Property.LARGE) || Dungeon.level.openSpace[n])) {
+						&& (!properties().contains(Property.LARGE) || Dungeon.level.openSpace[cell])) {
 					candidates.add( cell );
 				}
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndTitledMessage.java
Patch:
@@ -57,6 +57,8 @@ public WndTitledMessage( Component titlebar, String message ) {
 				&& text.bottom() > (PixelScene.MIN_HEIGHT_L - 10)
 				&& width < WIDTH_MAX){
 			width += 20;
+			titlebar.setRect(0, 0, width, 0);
+			text.setPos( titlebar.left(), titlebar.bottom() + 2*GAP );
 			text.maxWidth(width);
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/StatusPane.java
Patch:
@@ -380,6 +380,7 @@ protected void onClick() {
 					GameScene.show( new WndStory( WndJournal.GuideTab.iconForPage(flashingPage),
 							Document.ADVENTURERS_GUIDE.pageTitle(flashingPage),
 							Document.ADVENTURERS_GUIDE.pageBody(flashingPage) ));
+					Document.ADVENTURERS_GUIDE.readPage(flashingPage);
 				} else {
 					GameScene.show( new WndJournal() );
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/UnstableSpellbook.java
Patch:
@@ -320,7 +320,7 @@ public Class<?extends Bag> preferredBag(){
 
 		@Override
 		public boolean itemSelectable(Item item) {
-			return item instanceof Scroll && !scrolls.contains(item.getClass());
+			return item instanceof Scroll && scrolls.contains(item.getClass());
 		}
 
 		@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/mechanics/ShadowCaster.java
Patch:
@@ -28,7 +28,7 @@
 //based on: http://www.roguebasin.com/index.php?title=FOV_using_recursive_shadowcasting
 public final class ShadowCaster {
 
-	public static final int MAX_DISTANCE = 14;
+	public static final int MAX_DISTANCE = 20;
 	
 	//max length of rows as FOV moves out, for each FOV distance
 	//This is used to make the overall FOV circular, instead of square

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndSettings.java
Patch:
@@ -839,6 +839,9 @@ protected void onClick() {
 						if (reviewers.length > 0) {
 							creds += Messages.titleCase(Messages.get(LangsTab.this, "reviewers"));
 							creds2 += "";
+						}
+
+						if (translators.length > 0){
 							boolean col2 = false;
 							for (i = 0; i < total.size(); i++) {
 								if (i == translatorIdx){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -376,7 +376,8 @@ public static void switchLevel( final Level level, int pos ) {
 		hero.viewDistance = light == null ? level.viewDistance : Math.max( Light.DISTANCE, level.viewDistance );
 		
 		hero.curAction = hero.lastAction = null;
-		
+
+		observe();
 		try {
 			saveAll();
 		} catch (IOException e) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Item.java
Patch:
@@ -188,7 +188,6 @@ public boolean collect( Bag container ) {
 		}
 
 		if (!container.canHold(this)){
-			GLog.n( Messages.get(Item.class, "pack_full", container.name()) );
 			return false;
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/WndTextInput.java
Patch:
@@ -38,7 +38,8 @@ public WndTextInput(final String title, final String initialValue, final int max
 		txtTitle.setPos((width - txtTitle.width()) / 2, 2);
 		add(txtTitle);
 
-		TextInput textBox = new TextInput(Chrome.get(Chrome.Type.TOAST_WHITE), multiLine);
+		int textSize = (int)PixelScene.uiCamera.zoom * (multiLine ? 6 : 9);
+		TextInput textBox = new TextInput(Chrome.get(Chrome.Type.TOAST_WHITE), multiLine, textSize);
 		if (initialValue != null) textBox.setText(initialValue);
 		textBox.setMaxLength(maxLength);
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -377,7 +377,6 @@ public static void switchLevel( final Level level, int pos ) {
 		
 		hero.curAction = hero.lastAction = null;
 		
-		observe();
 		try {
 			saveAll();
 		} catch (IOException e) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Buff.java
Patch:
@@ -44,6 +44,9 @@ public enum buffType {POSITIVE, NEGATIVE, NEUTRAL}
 	
 	//whether or not the buff announces its name
 	public boolean announced = false;
+
+	//whether a buff should persist through revive effects for the hero
+	public boolean revivePersists = false;
 	
 	protected HashSet<Class> resistances = new HashSet<>();
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -380,7 +380,7 @@ public boolean blockSound(float pitch) {
 
 	public void live() {
 		for (Buff b : buffs()){
-			b.detach();
+			if (!b.revivePersists) b.detach();
 		}
 		Buff.affect( this, Regeneration.class );
 		Buff.affect( this, Hunger.class );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/food/Berry.java
Patch:
@@ -63,5 +63,5 @@ public int value() {
 		return 5 * quantity;
 	}
 
-	public static class SeedCounter extends CounterBuff{};
+	public static class SeedCounter extends CounterBuff{{revivePersists = true;}};
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -361,9 +361,10 @@ public void draw() {
 		
 		switch (InterlevelScene.mode) {
 			case RESURRECT:
+				Sample.INSTANCE.play(Assets.Sounds.TELEPORT);
 				ScrollOfTeleportation.appear( Dungeon.hero, Dungeon.hero.pos );
 				SpellSprite.show(Dungeon.hero, SpellSprite.ANKH);
-				new Flare( 5, 16 ).color( 0xFFFF00, true ).show( hero, 6f ) ;
+				new Flare( 5, 16 ).color( 0xFFFF00, true ).show( hero, 4f ) ;
 				break;
 			case RETURN:
 				ScrollOfTeleportation.appear(  Dungeon.hero, Dungeon.hero.pos );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/InterlevelScene.java
Patch:
@@ -455,6 +455,7 @@ private void resurrect() {
 		} else {
 			Dungeon.hero.resurrect();
 			level = Dungeon.level;
+			BArray.setFalse(level.heroFOV);
 			BArray.setFalse(level.visited);
 			BArray.setFalse(level.mapped);
 			int invPos = Dungeon.hero.pos;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -501,6 +501,8 @@ public void restoreFromBundle( Bundle bundle ) {
 		partialCharge = bundle.getFloat( PARTIALCHARGE );
 		curseInfusionBonus = bundle.getBoolean(CURSE_INFUSION_BONUS);
 		resinBonus = bundle.getInt(RESIN_BONUS);
+
+		updateLevel();
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
Patch:
@@ -156,6 +156,7 @@ public static class ImprovisedProjectileCooldown extends FlavourBuff{
 		public String desc() { return Messages.get(this, "desc", dispTurns(visualcooldown())); }
 	};
 	public static class LethalMomentumTracker extends FlavourBuff{};
+	public static class StrikingWaveTracker extends FlavourBuff{};
 	public static class WandPreservationCounter extends CounterBuff{};
 	public static class EmpoweredStrikeTracker extends FlavourBuff{};
 	public static class BountyHunterTracker extends FlavourBuff{};

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/warrior/Endure.java
Patch:
@@ -100,7 +100,7 @@ public void setup(Hero hero){
 
 		public int adjustDamageTaken(int damage){
 			if (enduring) {
-				damageBonus += damage/4;
+				damageBonus += damage/3;
 				return damage/2;
 			}
 			return damage;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/warrior/HeroicLeap.java
Patch:
@@ -57,8 +57,8 @@ public String targetingPrompt() {
 	public float chargeUse( Hero hero ) {
 		float chargeUse = super.chargeUse(hero);
 		if (hero.buff(DoubleJumpTracker.class) != null){
-			//reduced charge use by 24%/42%/56%/67%
-			chargeUse *= Math.pow(0.76, hero.pointsInTalent(Talent.DOUBLE_JUMP));
+			//reduced charge use by 20%/36%/50%/60%
+			chargeUse *= Math.pow(0.795, hero.pointsInTalent(Talent.DOUBLE_JUMP));
 		}
 		return chargeUse;
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/rogue/DeathMark.java
Patch:
@@ -57,8 +57,8 @@ public String targetingPrompt() {
 	public float chargeUse( Hero hero ) {
 		float chargeUse = super.chargeUse(hero);
 		if (hero.buff(DoubleMarkTracker.class) != null){
-			//reduced charge use by 33%/55%/70%/80%
-			chargeUse *= Math.pow(0.67, hero.pointsInTalent(Talent.DOUBLE_MARK));
+			//reduced charge use by 30%/50%/65%/75%
+			chargeUse *= Math.pow(0.707, hero.pointsInTalent(Talent.DOUBLE_MARK));
 		}
 		return chargeUse;
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Combo.java
Patch:
@@ -305,7 +305,7 @@ private void doAttack(final Char enemy) {
 				dmgBonus = Math.round(target.drRoll() * count / 5f);
 				break;
 			case CRUSH:
-				dmgMulti = 1f + (0.25f * count);
+				dmgMulti = 0.25f * count;
 				break;
 			case FURY:
 				dmgMulti = 0.6f;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_2_X_Changes.java
Patch:
@@ -145,7 +145,7 @@ public static void add_v0_2_2_Changes( ArrayList<ChangeInfo> changeInfos ){
 				"_-_ Released November 3rd, 2014\n" +
 				"_-_ 21 days after Shattered v0.2.1\n" +
 				"\n" +
-				"v0.2.2 was Shattered's first update that didn't have a specific focus. Instead this update was forking on making a bunch of little improvements.\n" +
+				"v0.2.2 was Shattered's first update that didn't have a specific focus. Instead this update was focused on making a bunch of little improvements.\n" +
 				"\n" +
 				"The largest change was the integration of Pixel Dungeon's source code from v1.7.2, which included synchronous movement! It's something we take for granted now, but before this change every on-screen character had to move one at a time. This slowed the pace of the game to a crawl whenever enemies were on screen.\n" +
 				"\n" +

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/BuffIndicator.java
Patch:
@@ -212,7 +212,7 @@ protected void createChildren() {
 		}
 
 		public void updateIcon(){
-			buff.tintIcon(icon);
+			((BuffIcon)icon).refresh(buff);
 			//round up to the nearest pixel if <50% faded, otherwise round down
 			float fadeHeight = buff.iconFadePercent() * icon.height();
 			float zoom = (camera() != null) ? camera().zoom : 1;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -1091,9 +1091,7 @@ public void updateFieldOfView( Char c, boolean[] fieldOfView ) {
 			}
 			if (c.buff(MagicalSight.class) != null){
 				sense = 8;
-			}
-			if (((Hero)c).subClass == HeroSubClass.SNIPER){
-				sense *= 1.5f;
+				sense *= 1f + 0.25f*((Hero) c).pointsInTalent(Talent.FARSIGHT);
 			}
 		}
 		

File: services/updates/debugUpdates/src/main/java/com/shatteredpixel/shatteredpixeldungeon/services/updates/UpdateImpl.java
Patch:
@@ -21,6 +21,8 @@
 
 package com.shatteredpixel.shatteredpixeldungeon.services.updates;
 
+import com.watabou.noosa.Game;
+
 public class UpdateImpl {
 
 	private static UpdateService updateChecker = new DebugUpdates();
@@ -30,7 +32,7 @@ public static UpdateService getUpdateService(){
 	}
 
 	public static boolean supportsUpdates(){
-		return true;
+		return Game.version.contains("INDEV");
 	}
 
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/PixelScene.java
Patch:
@@ -245,6 +245,7 @@ public void update() {
 			if ((time -= Game.elapsed) <= 0) {
 				alpha( 0f );
 				parent.remove( this );
+				destroy();
 			} else {
 				alpha( time / FADE_TIME );
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/KindOfWeapon.java
Patch:
@@ -28,6 +28,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
+import com.shatteredpixel.shatteredpixeldungeon.ui.ActionIndicator;
 import com.shatteredpixel.shatteredpixeldungeon.utils.BArray;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
 import com.watabou.noosa.audio.Sample;
@@ -56,6 +57,7 @@ public boolean doEquip( Hero hero ) {
 			hero.belongings.weapon = this;
 			activate( hero );
 			Talent.onItemEquipped(hero, this);
+			ActionIndicator.updateIcon();
 			updateQuickslot();
 			
 			cursedKnown = true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Shadows.java
Patch:
@@ -87,11 +87,13 @@ public boolean act() {
 			
 			if (--left <= 0) {
 				detach();
+				return true;
 			}
 
 			for (Mob m : Dungeon.level.mobs){
 				if (Dungeon.level.adjacent(m.pos, target.pos) && m.alignment != target.alignment){
 					detach();
+					return true;
 				}
 			}
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -601,7 +601,7 @@ public int defenseProc( Char enemy, int damage ) {
 		}
 
 		if (buff(SoulMark.class) != null) {
-			int restoration = Math.min(damage, HP);
+			int restoration = Math.min(damage, HP+shielding());
 			
 			//physical damage that doesn't come from the hero is less effective
 			if (enemy != Dungeon.hero){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Imp.java
Patch:
@@ -235,7 +235,7 @@ public static void spawn( CityLevel level ) {
 		}
 		
 		public static void process( Mob mob ) {
-			if (spawned && given && !completed) {
+			if (spawned && given && !completed && Dungeon.depth != 20) {
 				if ((alternative && mob instanceof Monk) ||
 					(!alternative && mob instanceof Golem)) {
 					

File: SPD-classes/src/main/java/com/watabou/noosa/Game.java
Patch:
@@ -121,7 +121,8 @@ public void resize(int width, int height) {
 			TextureCache.reload();
 			Vertexbuffer.refreshAllBuffers();
 		}
-		
+
+		height -= bottomInset;
 		if (height != Game.height || width != Game.width) {
 
 			Game.width = width;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfRegrowth.java
Patch:
@@ -457,7 +457,8 @@ public boolean isInvulnerable(Class effect) {
 
 		@Override
 		public String description() {
-			return Messages.get(this, "desc", wandLvl, (int)(seedPreservation()*100), (int)(seedPreservation()*100) );
+			int preservation = Math.round(seedPreservation()*100);
+			return Messages.get(this, "desc", wandLvl, preservation, preservation);
 		}
 
 		private static final String WAND_LVL = "wand_lvl";

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1215,6 +1215,8 @@ public void damage( int dmg, Object src ) {
 		int postHP = HP + shielding();
 		int effectiveDamage = preHP - postHP;
 
+		if (effectiveDamage <= 0) return;
+
 		//flash red when hit for serious damage.
 		float percentDMG = effectiveDamage / (float)preHP; //percent of current HP that was taken
 		float percentHP = 1 - ((HT - postHP) / (float)HT); //percent health after damage was taken

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Necromancer.java
Patch:
@@ -131,6 +131,8 @@ public void storeInBundle(Bundle bundle) {
 		}
 		if (mySkeleton != null){
 			bundle.put( MY_SKELETON, mySkeleton.id() );
+		} else if (storedSkeletonID != -1){
+			bundle.put( MY_SKELETON, storedSkeletonID );
 		}
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/CloakOfShadows.java
Patch:
@@ -123,6 +123,8 @@ public boolean doUnequip(Hero hero, boolean collect, boolean single) {
 					activeBuff.detach();
 					activeBuff = null;
 				}
+			} else {
+				activate(hero);
 			}
 
 			return true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/rogue/DeathMark.java
Patch:
@@ -104,7 +104,7 @@ public static void processFearTheReaper( Char ch ){
 
 		if (Dungeon.hero.hasTalent(Talent.FEAR_THE_REAPER)) {
 			if (Dungeon.hero.pointsInTalent(Talent.FEAR_THE_REAPER) >= 2) {
-				Buff.prolong(ch, Terror.class, 5f).target = Dungeon.hero;
+				Buff.prolong(ch, Terror.class, 5f).object = Dungeon.hero.id();
 			}
 			Buff.prolong(ch, Cripple.class, 5f);
 
@@ -116,7 +116,7 @@ public static void processFearTheReaper( Char ch ){
 					if (near != ch && near.alignment == Char.Alignment.ENEMY
 							&& PathFinder.distance[near.pos] != Integer.MAX_VALUE) {
 						if (Dungeon.hero.pointsInTalent(Talent.FEAR_THE_REAPER) == 4) {
-							Buff.prolong(near, Terror.class, 5f).target = Dungeon.hero;
+							Buff.prolong(near, Terror.class, 5f).object = Dungeon.hero.id();
 						}
 						Buff.prolong(near, Cripple.class, 5f);
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
Patch:
@@ -263,7 +263,7 @@ public static void onTalentUpgraded( Hero hero, Talent talent){
 			}
 		}
 
-		if (talent == FARSIGHT){
+		if (talent == HEIGHTENED_SENSES || talent == FARSIGHT){
 			Dungeon.observe();
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Item.java
Patch:
@@ -205,7 +205,9 @@ public boolean collect( Bag container ) {
 				if (isSimilar( item )) {
 					item.merge( this );
 					item.updateQuickslot();
-					Talent.onItemCollected( Dungeon.hero, item );
+					if (Dungeon.hero != null && Dungeon.hero.isAlive()) {
+						Talent.onItemCollected(Dungeon.hero, item);
+					}
 					return true;
 				}
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/mage/WildMagic.java
Patch:
@@ -62,8 +62,6 @@ protected void activate(ClassArmor armor, Hero hero, Integer target) {
 			return;
 		}
 
-		hero.busy();
-
 		ArrayList<Wand> wands = hero.belongings.getAllItems(Wand.class);
 		Random.shuffle(wands);
 
@@ -98,6 +96,8 @@ protected void activate(ClassArmor armor, Hero hero, Integer target) {
 			return;
 		}
 
+		hero.busy();
+
 		Random.shuffle(wands);
 
 		Buff.affect(hero, WildMagicTracker.class, 0f);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/WaterOfHealth.java
Patch:
@@ -49,12 +49,12 @@ protected boolean affectHero( Hero hero ) {
 		
 		Sample.INSTANCE.play( Assets.Sounds.DRINK );
 
-		hero.HP = hero.HT;
-		hero.sprite.emitter().start( Speck.factory( Speck.HEALING ), 0.4f, 4 );
-
 		PotionOfHealing.cure( hero );
 		hero.belongings.uncurseEquipped();
 		hero.buff( Hunger.class ).satisfy( Hunger.STARVING );
+
+		hero.HP = hero.HT;
+		hero.sprite.emitter().start( Speck.factory( Speck.HEALING ), 0.4f, 4 );
 		
 		CellEmitter.get( hero.pos ).start( ShaftParticle.FACTORY, 0.2f, 3 );
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Swarm.java
Patch:
@@ -89,7 +89,7 @@ public int defenseProc( Char enemy, int damage ) {
 			int[] neighbours = {pos + 1, pos - 1, pos + Dungeon.level.width(), pos - Dungeon.level.width()};
 			for (int n : neighbours) {
 				if (!Dungeon.level.solid[n] && Actor.findChar( n ) == null
-						&& (!properties.contains(Property.LARGE) || Dungeon.level.openSpace[n])) {
+						&& (!properties().contains(Property.LARGE) || Dungeon.level.openSpace[n])) {
 					candidates.add( n );
 				}
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1719,9 +1719,9 @@ public static void reallyDie( Object cause ) {
 		Dungeon.deleteGame( GamesInProgress.curSlot, true );
 	}
 
-	//effectively cache this buff to prevent having to call buff(Berserk.class) a bunch.
+	//effectively cache this buff to prevent having to call buff(...) a bunch.
 	//This is relevant because we call isAlive during drawing, which has both performance
-	//and concurrent modification implications if that method calls buff(Berserk.class)
+	//and thread coordination implications if that method calls buff(...) frequently
 	private Berserk berserk;
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/Ratmogrify.java
Patch:
@@ -53,6 +53,7 @@ protected void activate(ClassArmor armor, Hero hero, Integer target) {
 		} else if (ch == hero){
 			if (!hero.hasTalent(Talent.RATFORCEMENTS)){
 				GLog.w(Messages.get(this, "self_target"));
+				return;
 			} else {
 				ArrayList<Integer> spawnPoints = new ArrayList<>();
 
@@ -96,6 +97,7 @@ protected void activate(ClassArmor armor, Hero hero, Integer target) {
 			}
 		} else if (Char.hasProp(ch, Char.Property.MINIBOSS) || Char.hasProp(ch, Char.Property.BOSS)){
 			GLog.w(Messages.get(this, "too_strong"));
+			return;
 		} else {
 			TransmogRat rat = new TransmogRat();
 			rat.setup((Mob)ch);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/mage/WildMagic.java
Patch:
@@ -62,6 +62,8 @@ protected void activate(ClassArmor armor, Hero hero, Integer target) {
 			return;
 		}
 
+		hero.busy();
+
 		ArrayList<Wand> wands = hero.belongings.getAllItems(Wand.class);
 		Random.shuffle(wands);
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/ClassArmor.java
Patch:
@@ -167,8 +167,10 @@ public void execute( Hero hero, String action ) {
 			if (hero.armorAbility == null){
 				GameScene.show(new WndChooseAbility(null, this, hero));
 			} else if (!isEquipped( hero )) {
+				usesTargeting = false;
 				GLog.w( Messages.get(this, "not_equipped") );
 			} else if (charge < hero.armorAbility.chargeUse(hero)) {
+				usesTargeting = false;
 				GLog.w( Messages.get(this, "low_charge") );
 			} else  {
 				usesTargeting = hero.armorAbility.useTargeting();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/rogue/ShadowClone.java
Patch:
@@ -96,7 +96,7 @@ protected void activate(ClassArmor armor, Hero hero, Integer target) {
 			ArrayList<Integer> spawnPoints = new ArrayList<>();
 			for (int i = 0; i < PathFinder.NEIGHBOURS8.length; i++) {
 				int p = hero.pos + PathFinder.NEIGHBOURS8[i];
-				if (Actor.findChar(p) == null && (Dungeon.level.passable[p] || Dungeon.level.avoid[p])) {
+				if (Actor.findChar(p) == null && Dungeon.level.passable[p]) {
 					spawnPoints.add(p);
 				}
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/HeroSelectScene.java
Patch:
@@ -68,6 +68,8 @@ public class HeroSelectScene extends PixelScene {
 	public void create() {
 		super.create();
 
+		Dungeon.hero = null;
+
 		Badges.loadGlobal();
 		Journal.loadGlobal();
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/AttackIndicator.java
Patch:
@@ -89,6 +89,7 @@ public synchronized void update() {
 
 		if (needsImageUpdate){
 			updateImage();
+			needsImageUpdate = false;
 		}
 
 		if (!bg.visible){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/rogue/ShadowClone.java
Patch:
@@ -203,7 +203,7 @@ public int attackProc( Char enemy, int damage ) {
 			damage = super.attackProc( enemy, damage );
 			if (Random.Int(4) < Dungeon.hero.pointsInTalent(Talent.SHADOW_BLADE)
 					&& Dungeon.hero.belongings.weapon != null){
-				return Dungeon.hero.belongings.weapon.proc( enemy, this, damage );
+				return Dungeon.hero.belongings.weapon.proc( this, enemy, damage );
 			} else {
 				return damage;
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/mage/WildMagic.java
Patch:
@@ -65,7 +65,7 @@ protected void activate(ClassArmor armor, Hero hero, Integer target) {
 		ArrayList<Wand> wands = hero.belongings.getAllItems(Wand.class);
 		Random.shuffle(wands);
 
-		float chargeUsePerShot = (float)Math.pow(0.707, hero.pointsInTalent(Talent.CONSERVED_MAGIC));
+		float chargeUsePerShot = (float)Math.pow(0.563f, hero.pointsInTalent(Talent.CONSERVED_MAGIC));
 
 		for (Wand w : wands.toArray(new Wand[0])){
 			if (w.curCharges < 1 && w.partialCharge < chargeUsePerShot){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/mage/WildMagic.java
Patch:
@@ -127,7 +127,9 @@ public void call() {
 				if (!wands.isEmpty()){
 					zapWand(wands, hero, target);
 				} else {
-					hero.buff(WildMagicTracker.class).detach();
+					if (hero.buff(WildMagicTracker.class) != null){
+						hero.buff(WildMagicTracker.class).detach();
+					}
 					Item.updateQuickslot();
 					Invisibility.dispel();
 					hero.spendAndNext(Actor.TICK);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CavesBossLevel.java
Patch:
@@ -298,7 +298,7 @@ public void unseal() {
 		}
 		GameScene.updateMap();
 
-		customArenaVisuals.updateState();
+		if (customArenaVisuals != null) customArenaVisuals.updateState();
 
 		Dungeon.observe();
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/DirectableAlly.java
Patch:
@@ -46,6 +46,7 @@ public void followHero(){
 	public void targetChar( Char ch ){
 		aggro(ch);
 		target = ch.pos;
+		defendingPos = -1;
 		movingToDefendPos = false;
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/GameLog.java
Patch:
@@ -169,5 +169,6 @@ public Entry( String text, int color ) {
 
 	public static void wipe() {
 		entries.clear();
+		textsToAdd.clear();
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/BuffIndicator.java
Patch:
@@ -26,6 +26,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
+import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
 import com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoBuff;
 import com.watabou.gltextures.SmartTexture;
 import com.watabou.gltextures.TextureCache;
@@ -192,6 +193,7 @@ protected void onComplete() {
 		for (BuffIcon icon : buffIcons.values()){
 			icon.updateIcon();
 			icon.setRect(x + pos * (SIZE + 2), y, 9, 12);
+			PixelScene.align(icon);
 			pos++;
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/elixirs/ElixirOfAquaticRejuvenation.java
Patch:
@@ -75,7 +75,7 @@ public void set( int amount ){
 		@Override
 		public boolean act() {
 			
-			if (Dungeon.level.water[target.pos] && target.HP < target.HT){
+			if (!target.flying && Dungeon.level.water[target.pos] && target.HP < target.HT){
 				float healAmt = GameMath.gate( 1, target.HT/50f, left );
 				healAmt = Math.min(healAmt, target.HT - target.HP);
 				if (Random.Float() < (healAmt % 1)){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CavesBossLevel.java
Patch:
@@ -334,7 +334,7 @@ public void activatePylon(){
 	}
 
 	public void eliminatePylon(){
-		customArenaVisuals.updateState();
+		if (customArenaVisuals != null) customArenaVisuals.updateState();
 		int pylonsRemaining = 0;
 		for (Mob m : mobs){
 			if (m instanceof DM300){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/GooSprite.java
Patch:
@@ -92,7 +92,7 @@ public void pumpUp( int warnDist ) {
 			play(pump);
 			Sample.INSTANCE.play( Assets.Sounds.CHARGEUP, 1f, warnDist == 1 ? 0.8f : 1f );
 			for (int i = 0; i < Dungeon.level.length(); i++){
-				if (ch.fieldOfView[i]
+				if (ch.fieldOfView != null && ch.fieldOfView[i]
 						&& Dungeon.level.distance(i, ch.pos) <= warnDist
 						&& new Ballistica( ch.pos, i, Ballistica.STOP_TARGET | Ballistica.STOP_SOLID | Ballistica.IGNORE_SOFT_SOLID).collisionPos == i
 						&& new Ballistica( i, ch.pos, Ballistica.STOP_TARGET | Ballistica.STOP_SOLID | Ballistica.IGNORE_SOFT_SOLID).collisionPos == ch.pos){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndRanking.java
Patch:
@@ -181,6 +181,7 @@ protected void onClick() {
 					int tiers = 1;
 					if (Dungeon.hero.lvl >= 6) tiers++;
 					if (Dungeon.hero.lvl >= 12 && Dungeon.hero.subClass != HeroSubClass.NONE) tiers++;
+					if (Dungeon.hero.lvl >= 20 && Dungeon.hero.armorAbility != null) tiers++;
 					while (Dungeon.hero.talents.size() > tiers){
 						Dungeon.hero.talents.remove(Dungeon.hero.talents.size()-1);
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/plants/Plant.java
Patch:
@@ -66,13 +66,13 @@ public void trigger(){
 			((Hero) ch).interrupt();
 		}
 
-		wither();
-		activate( ch );
-
 		if (Dungeon.level.heroFOV[pos] && Dungeon.hero.hasTalent(Talent.NATURES_AID)){
 			// 3/5 turns based on talent points spent
 			Buff.affect(Dungeon.hero, Barkskin.class).set(2, 1 + 2*(Dungeon.hero.pointsInTalent(Talent.NATURES_AID)));
 		}
+
+		wither();
+		activate( ch );
 	}
 	
 	public abstract void activate( Char ch );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
Patch:
@@ -320,7 +320,7 @@ public static void onHealingPotionUsed( Hero hero ){
 			Random.shuffle(grassCells);
 			for (int cell : grassCells){
 				Char ch = Actor.findChar(cell);
-				if (ch != null){
+				if (ch != null && ch.alignment == Char.Alignment.ENEMY){
 					Buff.affect(ch, Roots.class, 1f + hero.pointsInTalent(RESTORED_NATURE));
 				}
 				if (Dungeon.level.map[cell] == Terrain.EMPTY ||

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/CellSelector.java
Patch:
@@ -245,10 +245,12 @@ public boolean onSignal(KeyEvent event) {
 				} else {
 					if (action == SPDAction.ZOOM_IN){
 						zoom( camera.zoom+1 );
+						mouseZoom = camera.zoom;
 						return true;
 
 					} else if (action == SPDAction.ZOOM_OUT){
 						zoom( camera.zoom-1 );
+						mouseZoom = camera.zoom;
 						return true;
 					}
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Golem.java
Patch:
@@ -176,7 +176,7 @@ protected boolean continueWandering() {
 			if (target != -1 && getCloser( target )) {
 				spend( 1 / speed() );
 				return moveSprite( oldPos, pos );
-			} else if (target != -1 && target != pos && selfTeleCooldown <= 0) {
+			} else if (!Dungeon.bossLevel() && target != -1 && target != pos && selfTeleCooldown <= 0) {
 				((GolemSprite)sprite).teleParticles(true);
 				teleporting = true;
 				spend( 2*TICK );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -228,7 +228,7 @@ public int STR() {
 		}
 
 		if (hasTalent(Talent.STRONGMAN)){
-			STR = (int)Math.floor(STR * (1f + 0.3f + 0.5f*pointsInTalent(Talent.STRONGMAN)));
+			STR = (int)Math.floor(STR * (1f + 0.03f + 0.05f*pointsInTalent(Talent.STRONGMAN)));
 		}
 
 		return STR;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -335,7 +335,8 @@ public int talentPointsSpent(int tier){
 
 	public int talentPointsAvailable(int tier){
 		if (lvl < Talent.tierLevelThresholds[tier]
-			|| (tier == 3 && subClass == HeroSubClass.NONE)){
+			|| (tier == 3 && subClass == HeroSubClass.NONE)
+			|| (tier == 4 && armorAbility == null)){
 			return 0;
 		} else if (lvl >= Talent.tierLevelThresholds[tier+1]){
 			return Talent.tierLevelThresholds[tier+1] - Talent.tierLevelThresholds[tier] - talentPointsSpent(tier);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/SpiritBow.java
Patch:
@@ -101,7 +101,7 @@ public void execute(Hero hero, String action) {
 	@Override
 	public int proc(Char attacker, Char defender, int damage) {
 
-		if (attacker.buff(NaturesPower.naturesPowerTracker.class) != null){
+		if (attacker.buff(NaturesPower.naturesPowerTracker.class) != null && !sniperSpecial){
 
 			Actor.add(new Actor() {
 				{
@@ -291,7 +291,7 @@ public class SpiritArrow extends MissileWeapon {
 
 		@Override
 		public Emitter emitter() {
-			if (Dungeon.hero.buff(NaturesPower.naturesPowerTracker.class) != null){
+			if (Dungeon.hero.buff(NaturesPower.naturesPowerTracker.class) != null && !sniperSpecial){
 				Emitter e = new Emitter();
 				e.pos(5, 5);
 				e.fillTarget = false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/ArmorAbility.java
Patch:
@@ -53,7 +53,7 @@ public String prompt() {
 	}
 
 	//leave null for no targeting
-	protected String targetingPrompt(){
+	public String targetingPrompt(){
 		return null;
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/Ratmogrify.java
Patch:
@@ -10,7 +10,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Rat;
-import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.MirrorImage;
 import com.shatteredpixel.shatteredpixeldungeon.effects.CellEmitter;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Speck;
 import com.shatteredpixel.shatteredpixeldungeon.items.armor.ClassArmor;
@@ -34,7 +33,7 @@ public class Ratmogrify extends ArmorAbility {
 	}
 
 	@Override
-	protected String targetingPrompt() {
+	public String targetingPrompt() {
 		return Messages.get(this, "prompt");
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/huntress/NaturesPower.java
Patch:
@@ -48,6 +48,9 @@ protected void activate(ClassArmor armor, Hero hero, Integer target) {
 		hero.sprite.operate(hero.pos);
 		Sample.INSTANCE.play(Assets.Sounds.CHARGEUP);
 		hero.sprite.emitter().burst(LeafParticle.GENERAL, 10);
+
+		armor.charge -= chargeUse(hero);
+		armor.updateQuickslot();
 		hero.spendAndNext(Actor.TICK);
 
 	}
@@ -90,7 +93,5 @@ public String desc() {
 			return Messages.get(this, "desc", dispTurns(visualcooldown()));
 		}
 
-		//TODO name/desc
-
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/huntress/SpectralBlades.java
Patch:
@@ -25,7 +25,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
-import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.FlavourBuff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Invisibility;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent;
@@ -49,7 +48,7 @@ public class SpectralBlades extends ArmorAbility {
 	}
 
 	@Override
-	protected String targetingPrompt() {
+	public String targetingPrompt() {
 		return Messages.get(this, "prompt");
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/rogue/DeathMark.java
Patch:
@@ -42,7 +42,7 @@
 public class DeathMark extends ArmorAbility {
 
 	@Override
-	protected String targetingPrompt() {
+	public String targetingPrompt() {
 		return Messages.get(this, "prompt");
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/rogue/SmokeBomb.java
Patch:
@@ -52,7 +52,7 @@
 public class SmokeBomb extends ArmorAbility {
 
 	@Override
-	protected String targetingPrompt() {
+	public String targetingPrompt() {
 		return Messages.get(this, "prompt");
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/warrior/Endure.java
Patch:
@@ -62,7 +62,6 @@ protected void activate(ClassArmor armor, Hero hero, Integer target) {
 		hero.spendAndNext(3f);
 	}
 
-	//TODO visual buff stuff
 	public static class EndureTracker extends FlavourBuff {
 
 		public boolean enduring;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/warrior/HeroicLeap.java
Patch:
@@ -46,7 +46,7 @@ public class HeroicLeap extends ArmorAbility {
 	}
 
 	@Override
-	protected String targetingPrompt() {
+	public String targetingPrompt() {
 		return Messages.get(this, "prompt");
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/warrior/Shockwave.java
Patch:
@@ -51,7 +51,7 @@ public class Shockwave extends ArmorAbility {
 	}
 
 	@Override
-	protected String targetingPrompt() {
+	public String targetingPrompt() {
 		return Messages.get(this, "prompt");
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/ClassArmor.java
Patch:
@@ -170,6 +170,7 @@ public void execute( Hero hero, String action ) {
 			} else if (charge < hero.armorAbility.chargeUse(hero)) {
 				GLog.w( Messages.get(this, "low_charge") );
 			} else  {
+				usesTargeting = hero.armorAbility.targetingPrompt() != null;
 				hero.armorAbility.use(this, hero);
 			}
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_6_X_Changes.java
Patch:
@@ -212,7 +212,7 @@ public static void add_v0_6_4_Changes( ArrayList<ChangeInfo> changeInfos ){
 				"_-_ Released April 1st, 2018\n" +
 				"_-_ 46 days after Shattered v0.6.3\n" +
 				"\n" +
-				"v0.6.4 was a smaller update, mostly focused on additions and fixes following v0.6.4. Probably the most interesting content that came in v0.6.4 was the crossbow! This weapon was an attempt to fulfill the common request for an ammo-based ranged weapon, without actually having an ammo system in the game. I felt that an ammo system would be more cumbersome than it would be worth. Letting darts piggyback on an equipped weapon seemed like a great compromise.\n" +
+				"v0.6.4 was a smaller update, mostly focused on additions and fixes following v0.6.3. Probably the most interesting content that came in v0.6.4 was the crossbow! This weapon was an attempt to fulfill the common request for an ammo-based ranged weapon, without actually having an ammo system in the game. I felt that an ammo system would be more cumbersome than it would be worth. Letting darts piggyback on an equipped weapon seemed like a great compromise.\n" +
 				"\n" +
 				"I also made some important changes to challenges in v0.6.4, primarily to make stacked challenge games a bit easier. This made high-challenge games more feasible without extreme luck, which led to a big increase in challenge interest among highly skilled players."));
 		
@@ -356,7 +356,7 @@ public static void add_v0_6_3_Changes( ArrayList<ChangeInfo> changeInfos ){
 				"_-_ Released February 14th, 2018\n" +
 				"_-_ 113 days after Shattered v0.6.2\n" +
 				"\n" +
-				"Prior to v0.6.3 thrown weapons broke on a single hit each and so weren't useful for much. I didn't want to just amp up their quantity though, as players would just horde them and use them against bosses. By lowering quantity but also giving thrown weapons durability, I was able to make them much more useful without making hording problematic.\n" +
+				"Prior to v0.6.3 thrown weapons broke on a single hit each and so weren't useful for much. I didn't want to just amp up their quantity though, as players would just horde them and use them against bosses. By lowering quantity but also giving thrown weapons durability, I was able to make them much more useful without making hoarding problematic.\n" +
 				"\n" +
 				"v0.6.3 is also an excellent case for why I run betas for every Shattered update. In the original beta for v0.6.3 thrown weapons were seriously overpowered, and threatened to make regular weapons pointless. I ended up significantly reducing their stats and quantity before the full release.\n" +
 				"\n" +

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TalismanOfForesight.java
Patch:
@@ -324,6 +324,7 @@ public boolean act() {
 		public void charge(int boost){
 			if (!cursed) {
 				charge = Math.min((charge + boost), chargeCap);
+				updateQuickslot();
 			}
 		}
 

File: SPD-classes/src/main/java/com/watabou/glwrap/Quad.java
Patch:
@@ -98,7 +98,7 @@ public static ShortBuffer getIndices( int size ) {
 			}
 			
 			indices.put( values );
-			indices.position( 0 );
+			((Buffer)indices).position( 0 );
 		}
 		
 		return indices;

File: SPD-classes/src/main/java/com/watabou/glwrap/Quad.java
Patch:
@@ -23,6 +23,7 @@
 
 import com.badlogic.gdx.Gdx;
 
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.nio.FloatBuffer;

File: SPD-classes/src/main/java/com/watabou/glwrap/Texture.java
Patch:
@@ -24,6 +24,7 @@
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.graphics.Pixmap;
 
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.nio.IntBuffer;
@@ -108,7 +109,7 @@ public void pixels( int w, int h, int[] pixels ) {
 			order( ByteOrder.nativeOrder() ).
 			asIntBuffer();
 		imageBuffer.put( pixels );
-		imageBuffer.position( 0 );
+		((Buffer)imageBuffer).position( 0 );
 		
 		Gdx.gl.glTexImage2D(
 			Gdx.gl.GL_TEXTURE_2D,
@@ -130,7 +131,7 @@ public void pixels( int w, int h, byte[] pixels ) {
 			allocateDirect( w * h ).
 			order( ByteOrder.nativeOrder() );
 		imageBuffer.put( pixels );
-		imageBuffer.position( 0 );
+		((Buffer)imageBuffer).position( 0 );
 		
 		Gdx.gl.glPixelStorei( Gdx.gl.GL_UNPACK_ALIGNMENT, 1 );
 

File: SPD-classes/src/main/java/com/watabou/glwrap/Vertexbuffer.java
Patch:
@@ -23,6 +23,7 @@
 
 import com.badlogic.gdx.Gdx;
 
+import java.nio.Buffer;
 import java.nio.FloatBuffer;
 import java.util.ArrayList;
 
@@ -74,7 +75,7 @@ public void updateVertices( FloatBuffer vertices, int start, int end){
 	public void updateGLData(){
 		if (updateStart == -1) return;
 
-		vertices.position(updateStart);
+		((Buffer)vertices).position(updateStart);
 		bind();
 
 		if (updateStart == 0 && updateEnd == vertices.limit()){

File: SPD-classes/src/main/java/com/watabou/noosa/BitmapText.java
Patch:
@@ -28,6 +28,7 @@
 import com.watabou.glwrap.Vertexbuffer;
 import com.watabou.utils.RectF;
 
+import java.nio.Buffer;
 import java.nio.FloatBuffer;
 
 public class BitmapText extends Visual {
@@ -74,7 +75,7 @@ public void draw() {
 
 		if (dirty) {
 			updateVertices();
-			quads.limit(quads.position());
+			((Buffer)quads).limit(quads.position());
 			if (buffer == null)
 				buffer = new Vertexbuffer(quads);
 			else

File: SPD-classes/src/main/java/com/watabou/noosa/Image.java
Patch:
@@ -27,6 +27,7 @@
 import com.watabou.glwrap.Vertexbuffer;
 import com.watabou.utils.RectF;
 
+import java.nio.Buffer;
 import java.nio.FloatBuffer;
 
 public class Image extends Visual {
@@ -156,7 +157,7 @@ public void draw() {
 		super.draw();
 
 		if (dirty) {
-			verticesBuffer.position( 0 );
+			((Buffer)verticesBuffer).position( 0 );
 			verticesBuffer.put( vertices );
 			if (buffer == null)
 				buffer = new Vertexbuffer( verticesBuffer );

File: SPD-classes/src/main/java/com/watabou/noosa/NinePatch.java
Patch:
@@ -27,6 +27,7 @@
 import com.watabou.glwrap.Vertexbuffer;
 import com.watabou.utils.RectF;
 
+import java.nio.Buffer;
 import java.nio.FloatBuffer;
 
 public class NinePatch extends Visual {
@@ -91,7 +92,7 @@ public NinePatch( Object tx, int x, int y, int w, int h, int left, int top, int
 	
 	protected void updateVertices() {
 
-		quads.position( 0 );
+		((Buffer)quads).position( 0 );
 		
 		float right = width - marginRight;
 		float bottom = height - marginBottom;

File: SPD-classes/src/main/java/com/watabou/noosa/Tilemap.java
Patch:
@@ -28,6 +28,7 @@
 import com.watabou.utils.Rect;
 import com.watabou.utils.RectF;
 
+import java.nio.Buffer;
 import java.nio.FloatBuffer;
 import java.util.Arrays;
 
@@ -136,7 +137,7 @@ protected void updateVertices() {
 
 				bottomRightUpdating = pos + 1;
 
-				quads.position(pos*16);
+				((Buffer)quads).position(pos*16);
 				
 				uv = tileset.get(data[pos]);
 				

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/effects/Flare.java
Patch:
@@ -31,6 +31,7 @@
 import com.watabou.noosa.Visual;
 import com.watabou.utils.PointF;
 
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.nio.FloatBuffer;
@@ -99,8 +100,8 @@ public Flare( int nRays, float radius ) {
 			indices.put( (short)(1 + i * 2) );
 			indices.put( (short)(2 + i * 2) );
 		}
-		
-		indices.position( 0 );
+
+		((Buffer)indices).position( 0 );
 	}
 	
 	public Flare color( int color, boolean lightMode ) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/SurfaceScene.java
Patch:
@@ -56,6 +56,7 @@
 import com.watabou.utils.PointF;
 import com.watabou.utils.Random;
 
+import java.nio.Buffer;
 import java.nio.FloatBuffer;
 import java.util.Calendar;
 
@@ -289,8 +290,8 @@ public Sky( boolean dayTime ) {
 			
 			vertices[12]	= 0;
 			vertices[13]	= 1;
-			
-			verticesBuffer.position( 0 );
+
+			((Buffer)verticesBuffer).position( 0 );
 			verticesBuffer.put( vertices );
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/CharSprite.java
Patch:
@@ -56,6 +56,8 @@
 import com.watabou.utils.PointF;
 import com.watabou.utils.Random;
 
+import java.nio.Buffer;
+
 public class CharSprite extends MovieClip implements Tweener.Listener, MovieClip.Listener {
 	
 	// Color constants for floating text
@@ -639,7 +641,7 @@ public void draw() {
 
 		if (renderShadow) {
 			if (dirty) {
-				verticesBuffer.position(0);
+				((Buffer)verticesBuffer).position(0);
 				verticesBuffer.put(vertices);
 				if (buffer == null)
 					buffer = new Vertexbuffer(verticesBuffer);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/ItemSprite.java
Patch:
@@ -43,6 +43,8 @@
 import com.watabou.utils.PointF;
 import com.watabou.utils.Random;
 
+import java.nio.Buffer;
+
 public class ItemSprite extends MovieClip {
 
 	public static final int SIZE	= 16;
@@ -272,7 +274,7 @@ public void draw() {
 
 		if (renderShadow) {
 			if (dirty) {
-				verticesBuffer.position(0);
+				((Buffer)verticesBuffer).position(0);
 				verticesBuffer.put(vertices);
 				if (buffer == null)
 					buffer = new Vertexbuffer(verticesBuffer);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/KeyDisplay.java
Patch:
@@ -37,6 +37,7 @@
 import com.watabou.noosa.Visual;
 import com.watabou.utils.RectF;
 
+import java.nio.Buffer;
 import java.nio.FloatBuffer;
 import java.util.LinkedHashMap;
 
@@ -97,8 +98,8 @@ public void draw() {
 		if (dirty){
 			
 			updateVertices();
-			
-			quads.limit(quads.position());
+
+			((Buffer)quads).limit(quads.position());
 			if (buffer == null)
 				buffer = new Vertexbuffer(quads);
 			else

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Monk.java
Patch:
@@ -118,7 +118,9 @@ public String defenseVerb() {
 			return super.defenseVerb();
 		} else {
 			f.detach();
-			Sample.INSTANCE.play( Assets.Sounds.HIT_PARRY, 1, Random.Float(0.96f, 1.05f));
+			if (sprite != null && sprite.visible) {
+				Sample.INSTANCE.play(Assets.Sounds.HIT_PARRY, 1, Random.Float(0.96f, 1.05f));
+			}
 			focusCooldown = Random.NormalFloat( 6, 7 );
 			return Messages.get(this, "parried");
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -196,7 +196,7 @@ public static void init() {
 		quickslot.reset();
 		QuickSlotButton.reset();
 		
-		depth = 24;
+		depth = 0;
 		gold = 0;
 
 		droppedItems = new SparseArray<>();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -23,6 +23,7 @@
 
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
 import com.shatteredpixel.shatteredpixeldungeon.Badges;
+import com.shatteredpixel.shatteredpixeldungeon.Challenges;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.SPDSettings;
 import com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon;
@@ -397,7 +398,7 @@ public void draw() {
 				int pos = Dungeon.level.randomRespawnCell( null );
 				if (item instanceof Potion) {
 					((Potion)item).shatter( pos );
-				} else if (item instanceof Plant.Seed) {
+				} else if (item instanceof Plant.Seed && !Dungeon.isChallenged(Challenges.NO_HERBALISM)) {
 					Dungeon.level.plant( (Plant.Seed)item, pos );
 				} else if (item instanceof Honeypot) {
 					Dungeon.level.drop(((Honeypot) item).shatter(null, pos), pos);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -196,7 +196,7 @@ public static void init() {
 		quickslot.reset();
 		QuickSlotButton.reset();
 		
-		depth = 0;
+		depth = 24;
 		gold = 0;
 
 		droppedItems = new SparseArray<>();
@@ -698,8 +698,9 @@ public static void win( Class cause ) {
 		Rankings.INSTANCE.submit( true, cause );
 	}
 
+	//default to recomputing based on max hero vision, in case vision just shrank/grew
 	public static void observe(){
-		int dist = Dungeon.hero.viewDistance;
+		int dist = 8;
 		dist *= 1f + 0.25f*Dungeon.hero.pointsInTalent(Talent.FARSIGHT);
 		observe( dist+1 );
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -753,7 +753,6 @@ public static void observe( int dist ) {
 		}
 
 		for (TalismanOfForesight.CharAwareness c : hero.buffs(TalismanOfForesight.CharAwareness.class)){
-			if (Dungeon.depth != c.depth) continue;
 			Char ch = (Char) Actor.findById(c.charID);
 			if (ch == null) continue;
 			BArray.or( level.visited, level.heroFOV, ch.pos - 1 - level.width(), 3, level.visited );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TalismanOfForesight.java
Patch:
@@ -349,7 +349,6 @@ public int icon() {
 	public static class CharAwareness extends FlavourBuff {
 
 		public int charID;
-		public int depth = Dungeon.depth;
 
 		private static final String CHAR_ID = "char_id";
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -1167,10 +1167,8 @@ public void updateFieldOfView( Char c, boolean[] fieldOfView ) {
 			}
 
 			for (TalismanOfForesight.CharAwareness a : c.buffs(TalismanOfForesight.CharAwareness.class)){
-				if (Dungeon.depth != a.depth) continue;
 				Char ch = (Char) Actor.findById(a.charID);
 				if (ch == null) {
-					a.detach();
 					continue;
 				}
 				int p = ch.pos;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Golem.java
Patch:
@@ -201,7 +201,7 @@ public boolean act(boolean enemyInFOV, boolean justAlerted) {
 
 				int oldPos = pos;
 
-				if (enemyTeleCooldown <= 0 && Random.Int(100/distance(enemy)) == 0
+				if (enemyTeleCooldown <= 0 && distance(enemy) >= 1 && Random.Int(100/distance(enemy)) == 0
 						&& !Char.hasProp(enemy, Property.IMMOVABLE)){
 					if (sprite != null && (sprite.visible || enemy.sprite.visible)) {
 						sprite.zap( enemy.pos );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfFireblast.java
Patch:
@@ -43,6 +43,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
 import com.watabou.noosa.audio.Sample;
 import com.watabou.utils.Callback;
+import com.watabou.utils.GameMath;
 import com.watabou.utils.PathFinder;
 
 import java.util.ArrayList;
@@ -171,8 +172,8 @@ protected void fx( Ballistica bolt, Callback callback ) {
 
 	@Override
 	protected int chargesPerCast() {
-		//consumes 30% of current charges, rounded up, with a minimum of one.
-		return Math.max(1, (int)Math.ceil(curCharges*0.3f));
+		//consumes 30% of current charges, rounded up, with a min of 1 and a max of 3.
+		return (int) GameMath.gate(1, (int)Math.ceil(curCharges*0.3f), 3);
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfRegrowth.java
Patch:
@@ -49,6 +49,7 @@
 import com.watabou.utils.Bundle;
 import com.watabou.utils.Callback;
 import com.watabou.utils.ColorMath;
+import com.watabou.utils.GameMath;
 import com.watabou.utils.PathFinder;
 import com.watabou.utils.Random;
 
@@ -262,8 +263,8 @@ protected void fx( Ballistica bolt, Callback callback ) {
 
 	@Override
 	protected int chargesPerCast() {
-		//consumes 30% of current charges, rounded up, with a minimum of one.
-		return Math.max(1, (int)Math.ceil(curCharges*0.3f));
+		//consumes 30% of current charges, rounded up, with a min of 1 and a max of 3.
+		return (int)GameMath.gate(1, (int)Math.ceil(curCharges*0.3f), 3);
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/CloakOfShadows.java
Patch:
@@ -98,6 +98,9 @@ public void execute( Hero hero, String action ) {
 			} else {
 				activeBuff.detach();
 				activeBuff = null;
+				if (hero.buff(Preparation.class) != null){
+					hero.buff(Preparation.class).detach();
+				}
 				hero.sprite.operate( hero.pos );
 			}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/exotic/PotionOfDragonsBreath.java
Patch:
@@ -70,14 +70,14 @@ public void onSelect(final Integer cell) {
 				detach(curUser.belongings.backpack);
 			} else if (cell != null) {
 				identify();
+				curUser.busy();
 				Sample.INSTANCE.play( Assets.Sounds.DRINK );
 				curUser.sprite.operate(curUser.pos, new Callback() {
 					@Override
 					public void call() {
 
 						curItem.detach(curUser.belongings.backpack);
 
-						curUser.spend(1f);
 						curUser.sprite.idle();
 						curUser.sprite.zap(cell);
 						Sample.INSTANCE.play( Assets.Sounds.BURNING );
@@ -146,7 +146,7 @@ public void call() {
 											}
 										}
 
-										curUser.next();
+										curUser.spendAndNext(1f);
 									}
 								});
 						

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/NewDM300.java
Patch:
@@ -202,7 +202,7 @@ protected boolean act() {
 					//try to fire gas at an enemy we can't reach
 					if (turnsSinceLastAbility >= MIN_COOLDOWN){
 						//use a coneAOE to try and account for trickshotting angles
-						ConeAOE aim = new ConeAOE(new Ballistica(pos, enemy.pos, Ballistica.PROJECTILE), 30);
+						ConeAOE aim = new ConeAOE(new Ballistica(pos, enemy.pos, Ballistica.WONT_STOP), Float.POSITIVE_INFINITY, 30, Ballistica.STOP_SOLID);
 						if (aim.cells.contains(enemy.pos)) {
 							lastAbility = GAS;
 							turnsSinceLastAbility = 0;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/exotic/PotionOfDragonsBreath.java
Patch:
@@ -82,7 +82,7 @@ public void call() {
 						curUser.sprite.zap(cell);
 						Sample.INSTANCE.play( Assets.Sounds.BURNING );
 
-						final Ballistica bolt = new Ballistica(curUser.pos, cell, Ballistica.STOP_SOLID | Ballistica.IGNORE_SOFT_SOLID);
+						final Ballistica bolt = new Ballistica(curUser.pos, cell, Ballistica.WONT_STOP);
 
 						int maxDist = 6;
 						int dist = Math.min(bolt.dist, maxDist);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfFireblast.java
Patch:
@@ -52,7 +52,8 @@ public class WandOfFireblast extends DamageWand {
 	{
 		image = ItemSpriteSheet.WAND_FIREBOLT;
 
-		collisionProperties = Ballistica.STOP_SOLID | Ballistica.IGNORE_SOFT_SOLID;
+		//only used for targeting, actual projectile logic is Ballistica.STOP_SOLID | Ballistica.IGNORE_SOFT_SOLID
+		collisionProperties = Ballistica.WONT_STOP;
 	}
 
 	//1x/2x/3x damage
@@ -146,7 +147,7 @@ protected void fx( Ballistica bolt, Callback callback ) {
 		cone = new ConeAOE( bolt,
 				maxDist,
 				30 + 20*chargesPerCast(),
-				collisionProperties | Ballistica.STOP_TARGET);
+				Ballistica.STOP_TARGET | Ballistica.STOP_SOLID | Ballistica.IGNORE_SOFT_SOLID);
 
 		//cast to cells at the tip, rather than all cells, better performance.
 		for (Ballistica ray : cone.rays){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfRegrowth.java
Patch:
@@ -60,7 +60,8 @@ public class WandOfRegrowth extends Wand {
 	{
 		image = ItemSpriteSheet.WAND_REGROWTH;
 
-		collisionProperties = Ballistica.STOP_SOLID;
+		//only used for targeting, actual projectile logic is Ballistica.STOP_SOLID
+		collisionProperties = Ballistica.WONT_STOP;
 	}
 	
 	private int totChrgUsed = 0;
@@ -238,7 +239,7 @@ protected void fx( Ballistica bolt, Callback callback ) {
 		cone = new ConeAOE( bolt,
 				maxDist,
 				20 + 10*chargesPerCast(),
-				collisionProperties | Ballistica.STOP_TARGET);
+				Ballistica.STOP_SOLID | Ballistica.STOP_TARGET);
 
 		//cast to cells at the tip, rather than all cells, better performance.
 		for (Ballistica ray : cone.rays){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/MissileWeapon.java
Patch:
@@ -120,7 +120,9 @@ public Item upgrade() {
 				Item similar = Dungeon.hero.belongings.getSimilar(this);
 				if (similar != null){
 					detach(Dungeon.hero.belongings.backpack);
-					return similar.merge(this);
+					Item result = similar.merge(this);
+					updateQuickslot();
+					return result;
 				}
 				updateQuickslot();
 				return this;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -559,6 +559,7 @@ public static void loadGame( int save, boolean fullLoad ) throws IOException {
 
 		seed = bundle.contains( SEED ) ? bundle.getLong( SEED ) : DungeonSeed.randomSeed();
 
+		Actor.clear();
 		Actor.restoreNextID( bundle );
 
 		quickslot.reset();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Actor.java
Patch:
@@ -111,7 +111,6 @@ public void restoreFromBundle( Bundle bundle ) {
 		}
 	}
 
-	private static int nextID = 1;
 	public int id() {
 		if (id > 0) {
 			return id;
@@ -129,6 +128,7 @@ public int id() {
 	private static volatile Actor current;
 
 	private static SparseArray<Actor> ids = new SparseArray<>();
+	private static int nextID = 1;
 
 	private static float now = 0;
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Degrade.java
Patch:
@@ -39,7 +39,7 @@ public class Degrade extends FlavourBuff {
 	@Override
 	public boolean attachTo(Char target) {
 		if (super.attachTo(target)){
-			Item.updateQuickslot(false);
+			Item.updateQuickslot();
 			if (target instanceof Hero) ((Hero) target).updateHT(false);
 			return true;
 		}
@@ -50,7 +50,7 @@ public boolean attachTo(Char target) {
 	public void detach() {
 		super.detach();
 		if (target instanceof Hero) ((Hero) target).updateHT(false);
-		Item.updateQuickslot(false);
+		Item.updateQuickslot();
 	}
 
 	//called in Item.buffedLevel()

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/ScrollEmpower.java
Patch:
@@ -37,7 +37,7 @@ public class ScrollEmpower extends Buff {
 	@Override
 	public void detach() {
 		super.detach();
-		Item.updateQuickslot(false);
+		Item.updateQuickslot();
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Waterskin.java
Patch:
@@ -168,7 +168,7 @@ public void collectDew( Dewdrop dew ) {
 			GLog.p( Messages.get(this, "full") );
 		}
 
-		updateQuickslot(false);
+		updateQuickslot();
 	}
 
 	public void fill() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/ClassArmor.java
Patch:
@@ -207,7 +207,7 @@ public boolean act() {
 			LockedFloor lock = target.buff(LockedFloor.class);
 			if (lock == null || lock.regenOn()) {
 				charge += 100 / 500f; //500 turns to full charge
-				updateQuickslot(false);
+				updateQuickslot();
 				if (charge > 100) {
 					charge = 100;
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/AlchemistsToolkit.java
Patch:
@@ -96,7 +96,7 @@ public void charge(Hero target, float amount) {
 			if (partialCharge >= 1){
 				partialCharge--;
 				charge++;
-				updateQuickslot(false);
+				updateQuickslot();
 			}
 		}
 	}
@@ -126,7 +126,7 @@ public void absorbEnergy( int energy ){
 				break;
 			}
 		}
-		updateQuickslot(false);
+		updateQuickslot();
 		
 	}
 
@@ -195,7 +195,7 @@ public void gainCharge(float levelPortion) {
 						partialCharge = 0;
 					}
 					
-					updateQuickslot(false);
+					updateQuickslot();
 				}
 			} else
 				partialCharge = 0;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/CapeOfThorns.java
Patch:
@@ -53,7 +53,7 @@ protected ArtifactBuff passiveBuff() {
 	public void charge(Hero target, float amount) {
 		if (cooldown == 0) {
 			charge += Math.round(4*amount);
-			updateQuickslot(false);
+			updateQuickslot();
 		}
 		if (charge >= chargeCap){
 			target.buff(Thorns.class).proc(0, null, null);
@@ -83,7 +83,7 @@ public boolean act(){
 				if (cooldown == 0) {
 					GLog.w( Messages.get(this, "inert") );
 				}
-				updateQuickslot(false);
+				updateQuickslot();
 			}
 			spend(TICK);
 			return true;
@@ -116,7 +116,7 @@ public int proc(int damage, Char attacker, Char defender){
 				}
 
 			}
-			updateQuickslot(false);
+			updateQuickslot();
 			return damage;
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/HornOfPlenty.java
Patch:
@@ -128,7 +128,7 @@ public void execute( Hero hero, String action ) {
 				else if (charge >= 5)   image = ItemSpriteSheet.ARTIFACT_HORN2;
 				else                    image = ItemSpriteSheet.ARTIFACT_HORN1;
 
-				updateQuickslot( image != oldImage );
+				updateQuickslot();
 			}
 
 		} else if (action.equals(AC_STORE)){
@@ -162,7 +162,7 @@ public void charge(Hero target, float amount) {
 				else if (charge >= 5)   image = ItemSpriteSheet.ARTIFACT_HORN2;
 				else                    image = ItemSpriteSheet.ARTIFACT_HORN1;
 
-				updateQuickslot( image != oldImage );
+				updateQuickslot();
 			}
 		}
 	}
@@ -259,7 +259,7 @@ public void gainCharge(float levelPortion) {
 					else if (charge >= 5)   image = ItemSpriteSheet.ARTIFACT_HORN2;
 					else                    image = ItemSpriteSheet.ARTIFACT_HORN1;
 
-					updateQuickslot( image != oldImage );
+					updateQuickslot();
 
 					if (charge == chargeCap){
 						GLog.p( Messages.get(HornOfPlenty.class, "full") );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/LloydsBeacon.java
Patch:
@@ -201,7 +201,7 @@ public void onSelect(Integer target) {
 
 			Invisibility.dispel();
 			charge -= Dungeon.depth > 20 ? 2 : 1;
-			updateQuickslot(false);
+			updateQuickslot();
 
 			if (Actor.findChar(target) == curUser){
 				ScrollOfTeleportation.teleportHero(curUser);
@@ -330,7 +330,7 @@ public boolean act() {
 				}
 			}
 
-			updateQuickslot(false);
+			updateQuickslot();
 			spend( TICK );
 			return true;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/MasterThievesArmband.java
Patch:
@@ -49,7 +49,7 @@ protected ArtifactBuff passiveBuff() {
 	@Override
 	public void charge(Hero target, float amount) {
 		charge += Math.round(10*amount);
-		updateQuickslot(false);
+		updateQuickslot();
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/SandalsOfNature.java
Patch:
@@ -93,7 +93,7 @@ public void execute( Hero hero, String action ) {
 				Camera.main.shake(1, 0.4f);
 				charge = 0;
 				Talent.onArtifactUsed(Dungeon.hero);
-				updateQuickslot(false);
+				updateQuickslot();
 			}
 		}
 	}
@@ -185,7 +185,7 @@ public void charge(float amount) {
 					charge++;
 					partialCharge--;
 				}
-				updateQuickslot(false);
+				updateQuickslot();
 			}
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TalismanOfForesight.java
Patch:
@@ -197,7 +197,7 @@ public void onSelect(Integer target) {
 					upgrade();
 					GLog.p( Messages.get(TalismanOfForesight.class, "levelup") );
 				}
-				updateQuickslot(false);
+				updateQuickslot();
 
 				//5 charge at 2 tiles, up to 30 charge at 25 tiles
 				charge -= 3 + dist*1.08f;
@@ -211,7 +211,7 @@ public void onSelect(Integer target) {
 					partialCharge--;
 				}
 				Talent.onArtifactUsed(Dungeon.hero);
-				updateQuickslot(false);
+				updateQuickslot();
 				Dungeon.observe();
 				Dungeon.hero.checkVisibleMobs();
 				GameScene.updateFog();
@@ -311,7 +311,7 @@ public boolean act() {
 				if (partialCharge > 1 && charge < chargeCap) {
 					partialCharge--;
 					charge++;
-					updateQuickslot(false);
+					updateQuickslot();
 				} else if (charge >= chargeCap) {
 					partialCharge = 0;
 					GLog.p( Messages.get(TalismanOfForesight.class, "full_charge") );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/UnstableSpellbook.java
Patch:
@@ -168,7 +168,7 @@ public void onBackPressed() {
 					scroll.doRead();
 					Talent.onArtifactUsed(Dungeon.hero);
 				}
-				updateQuickslot(false);
+				updateQuickslot();
 			}
 
 		} else if (action.equals( AC_ADD )) {
@@ -222,7 +222,7 @@ public void charge(Hero target, float amount) {
 			if (partialCharge >= 1){
 				partialCharge--;
 				charge++;
-				updateQuickslot(false);
+				updateQuickslot();
 			}
 		}
 	}
@@ -297,7 +297,7 @@ public boolean act() {
 				}
 			}
 
-			updateQuickslot(false);
+			updateQuickslot();
 
 			spend( TICK );
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/Potion.java
Patch:
@@ -334,7 +334,7 @@ public void setKnown() {
 		if (!anonymous) {
 			if (!isKnown()) {
 				handler.know(this);
-				updateQuickslot(false);
+				updateQuickslot();
 				Potion p = Dungeon.hero.belongings.getItem(getClass());
 				if (p != null)  p.setAction();
 				if (ExoticPotion.regToExo.get(getClass()) != null) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/exotic/ExoticPotion.java
Patch:
@@ -98,7 +98,7 @@ public boolean isKnown() {
 	public void setKnown() {
 		if (!isKnown()) {
 			handler.know(exoToReg.get(this.getClass()));
-			updateQuickslot(false);
+			updateQuickslot();
 			Potion p = Dungeon.hero.belongings.getItem(getClass());
 			if (p != null)  p.setAction();
 			p = Dungeon.hero.belongings.getItem(exoToReg.get(this.getClass()));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/quest/Pickaxe.java
Patch:
@@ -162,7 +162,7 @@ public int proc( Char attacker, Char defender, int damage ) {
 				protected boolean act() {
 					if (!defender.isAlive()){
 						bloodStained = true;
-						updateQuickslot(true);
+						updateQuickslot();
 					}
 
 					Actor.remove(this);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -160,7 +160,7 @@ public void gainCharge( float amt, boolean overcharge ){
 			if (overcharge) curCharges = Math.min(maxCharges+(int)amt, curCharges+1);
 			else curCharges = Math.min(maxCharges, curCharges+1);
 			partialCharge--;
-			updateQuickslot(false);
+			updateQuickslot();
 		}
 	}
 	
@@ -581,7 +581,7 @@ public boolean act() {
 			while (partialCharge >= 1 && curCharges < maxCharges) {
 				partialCharge--;
 				curCharges++;
-				updateQuickslot(false);
+				updateQuickslot();
 			}
 			
 			if (curCharges == maxCharges){
@@ -623,7 +623,7 @@ public void gainCharge(float charge){
 					partialCharge--;
 				}
 				curCharges = Math.min(curCharges, maxCharges);
-				updateQuickslot(false);
+				updateQuickslot();
 			}
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfBlastWave.java
Patch:
@@ -84,7 +84,7 @@ protected void onZap(Ballistica bolt) {
 				processSoulMark(ch, chargesPerCast());
 				if (ch.alignment != Char.Alignment.ALLY) ch.damage(damageRoll(), this);
 
-				if (ch.isAlive() && ch.pos == bolt.collisionPos + i) {
+				if (ch.pos == bolt.collisionPos + i) {
 					Ballistica trajectory = new Ballistica(ch.pos, ch.pos + i, Ballistica.MAGIC_BOLT);
 					int strength = 1 + Math.round(buffedLvl() / 2f);
 					throwChar(ch, trajectory, strength, false);
@@ -101,7 +101,7 @@ protected void onZap(Ballistica bolt) {
 			processSoulMark(ch, chargesPerCast());
 			ch.damage(damageRoll(), this);
 
-			if (ch.isAlive() && bolt.path.size() > bolt.dist+1 && ch.pos == bolt.collisionPos) {
+			if (bolt.path.size() > bolt.dist+1 && ch.pos == bolt.collisionPos) {
 				Ballistica trajectory = new Ballistica(ch.pos, bolt.path.get(bolt.dist + 1), Ballistica.MAGIC_BOLT);
 				int strength = buffedLvl() + 3;
 				throwChar(ch, trajectory, strength, false);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfMagicMissile.java
Patch:
@@ -33,7 +33,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
 import com.shatteredpixel.shatteredpixeldungeon.ui.BuffIndicator;
-import com.shatteredpixel.shatteredpixeldungeon.ui.QuickSlotButton;
 import com.watabou.noosa.Image;
 import com.watabou.noosa.audio.Sample;
 import com.watabou.utils.Bundle;
@@ -111,7 +110,7 @@ public void setLevel(int level){
 		@Override
 		public void detach() {
 			super.detach();
-			QuickSlotButton.refresh(false);
+			updateQuickslot();
 		}
 
 		public int level(){

File: SPD-classes/src/main/java/com/watabou/noosa/ui/Button.java
Patch:
@@ -31,7 +31,7 @@
 
 public class Button extends Component {
 
-	public static float longClick = 1f;
+	public static float longClick = 0.5f;
 	
 	protected PointerArea hotArea;
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -291,10 +291,10 @@ public boolean attack( Char enemy ) {
 			
 			int dr = enemy.drRoll();
 
-			Barkskin bark = buff(Barkskin.class);
+			Barkskin bark = enemy.buff(Barkskin.class);
 			if (bark != null)   dr += Random.NormalIntRange( 0 , bark.level() );
 
-			Blocking.BlockBuff block = buff(Blocking.BlockBuff.class);
+			Blocking.BlockBuff block = enemy.buff(Blocking.BlockBuff.class);
 			if (block != null)  dr += block.blockingRoll();
 			
 			if (this instanceof Hero){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Degrade.java
Patch:
@@ -39,7 +39,7 @@ public class Degrade extends FlavourBuff {
 	@Override
 	public boolean attachTo(Char target) {
 		if (super.attachTo(target)){
-			Item.updateQuickslot();
+			Item.updateQuickslot(false);
 			if (target instanceof Hero) ((Hero) target).updateHT(false);
 			return true;
 		}
@@ -50,7 +50,7 @@ public boolean attachTo(Char target) {
 	public void detach() {
 		super.detach();
 		if (target instanceof Hero) ((Hero) target).updateHT(false);
-		Item.updateQuickslot();
+		Item.updateQuickslot(false);
 	}
 
 	//called in Item.buffedLevel()

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/ScrollEmpower.java
Patch:
@@ -37,7 +37,7 @@ public class ScrollEmpower extends FlavourBuff {
 	@Override
 	public void detach() {
 		super.detach();
-		Item.updateQuickslot();
+		Item.updateQuickslot(false);
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Waterskin.java
Patch:
@@ -168,7 +168,7 @@ public void collectDew( Dewdrop dew ) {
 			GLog.p( Messages.get(this, "full") );
 		}
 
-		updateQuickslot();
+		updateQuickslot(false);
 	}
 
 	public void fill() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/ClassArmor.java
Patch:
@@ -207,7 +207,7 @@ public boolean act() {
 			LockedFloor lock = target.buff(LockedFloor.class);
 			if (lock == null || lock.regenOn()) {
 				charge += 100 / 500f; //500 turns to full charge
-				updateQuickslot();
+				updateQuickslot(false);
 				if (charge > 100) {
 					charge = 100;
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/AlchemistsToolkit.java
Patch:
@@ -96,7 +96,7 @@ public void charge(Hero target, float amount) {
 			if (partialCharge >= 1){
 				partialCharge--;
 				charge++;
-				updateQuickslot();
+				updateQuickslot(false);
 			}
 		}
 	}
@@ -126,7 +126,7 @@ public void absorbEnergy( int energy ){
 				break;
 			}
 		}
-		updateQuickslot();
+		updateQuickslot(false);
 		
 	}
 
@@ -195,7 +195,7 @@ public void gainCharge(float levelPortion) {
 						partialCharge = 0;
 					}
 					
-					updateQuickslot();
+					updateQuickslot(false);
 				}
 			} else
 				partialCharge = 0;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/CapeOfThorns.java
Patch:
@@ -53,7 +53,7 @@ protected ArtifactBuff passiveBuff() {
 	public void charge(Hero target, float amount) {
 		if (cooldown == 0) {
 			charge += Math.round(4*amount);
-			updateQuickslot();
+			updateQuickslot(false);
 		}
 		if (charge >= chargeCap){
 			target.buff(Thorns.class).proc(0, null, null);
@@ -83,7 +83,7 @@ public boolean act(){
 				if (cooldown == 0) {
 					GLog.w( Messages.get(this, "inert") );
 				}
-				updateQuickslot();
+				updateQuickslot(false);
 			}
 			spend(TICK);
 			return true;
@@ -116,7 +116,7 @@ public int proc(int damage, Char attacker, Char defender){
 				}
 
 			}
-			updateQuickslot();
+			updateQuickslot(false);
 			return damage;
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/LloydsBeacon.java
Patch:
@@ -201,7 +201,7 @@ public void onSelect(Integer target) {
 
 			Invisibility.dispel();
 			charge -= Dungeon.depth > 20 ? 2 : 1;
-			updateQuickslot();
+			updateQuickslot(false);
 
 			if (Actor.findChar(target) == curUser){
 				ScrollOfTeleportation.teleportHero(curUser);
@@ -330,7 +330,7 @@ public boolean act() {
 				}
 			}
 
-			updateQuickslot();
+			updateQuickslot(false);
 			spend( TICK );
 			return true;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/MasterThievesArmband.java
Patch:
@@ -49,7 +49,7 @@ protected ArtifactBuff passiveBuff() {
 	@Override
 	public void charge(Hero target, float amount) {
 		charge += Math.round(10*amount);
-		updateQuickslot();
+		updateQuickslot(false);
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/SandalsOfNature.java
Patch:
@@ -93,7 +93,7 @@ public void execute( Hero hero, String action ) {
 				Camera.main.shake(1, 0.4f);
 				charge = 0;
 				Talent.onArtifactUsed(Dungeon.hero);
-				updateQuickslot();
+				updateQuickslot(false);
 			}
 		}
 	}
@@ -185,7 +185,7 @@ public void charge(float amount) {
 					charge++;
 					partialCharge--;
 				}
-				updateQuickslot();
+				updateQuickslot(false);
 			}
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TalismanOfForesight.java
Patch:
@@ -197,7 +197,7 @@ public void onSelect(Integer target) {
 					upgrade();
 					GLog.p( Messages.get(TalismanOfForesight.class, "levelup") );
 				}
-				updateQuickslot();
+				updateQuickslot(false);
 
 				//5 charge at 2 tiles, up to 30 charge at 25 tiles
 				charge -= 3 + dist*1.08f;
@@ -211,7 +211,7 @@ public void onSelect(Integer target) {
 					partialCharge--;
 				}
 				Talent.onArtifactUsed(Dungeon.hero);
-				updateQuickslot();
+				updateQuickslot(false);
 				Dungeon.observe();
 				Dungeon.hero.checkVisibleMobs();
 				GameScene.updateFog();
@@ -311,7 +311,7 @@ public boolean act() {
 				if (partialCharge > 1 && charge < chargeCap) {
 					partialCharge--;
 					charge++;
-					updateQuickslot();
+					updateQuickslot(false);
 				} else if (charge >= chargeCap) {
 					partialCharge = 0;
 					GLog.p( Messages.get(TalismanOfForesight.class, "full_charge") );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/UnstableSpellbook.java
Patch:
@@ -168,7 +168,7 @@ public void onBackPressed() {
 					scroll.doRead();
 					Talent.onArtifactUsed(Dungeon.hero);
 				}
-				updateQuickslot();
+				updateQuickslot(false);
 			}
 
 		} else if (action.equals( AC_ADD )) {
@@ -222,7 +222,7 @@ public void charge(Hero target, float amount) {
 			if (partialCharge >= 1){
 				partialCharge--;
 				charge++;
-				updateQuickslot();
+				updateQuickslot(false);
 			}
 		}
 	}
@@ -297,7 +297,7 @@ public boolean act() {
 				}
 			}
 
-			updateQuickslot();
+			updateQuickslot(false);
 
 			spend( TICK );
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/Potion.java
Patch:
@@ -334,7 +334,7 @@ public void setKnown() {
 		if (!anonymous) {
 			if (!isKnown()) {
 				handler.know(this);
-				updateQuickslot();
+				updateQuickslot(false);
 				Potion p = Dungeon.hero.belongings.getItem(getClass());
 				if (p != null)  p.setAction();
 				if (ExoticPotion.regToExo.get(getClass()) != null) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/exotic/ExoticPotion.java
Patch:
@@ -98,7 +98,7 @@ public boolean isKnown() {
 	public void setKnown() {
 		if (!isKnown()) {
 			handler.know(exoToReg.get(this.getClass()));
-			updateQuickslot();
+			updateQuickslot(false);
 			Potion p = Dungeon.hero.belongings.getItem(getClass());
 			if (p != null)  p.setAction();
 			p = Dungeon.hero.belongings.getItem(exoToReg.get(this.getClass()));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/quest/Pickaxe.java
Patch:
@@ -162,7 +162,7 @@ public int proc( Char attacker, Char defender, int damage ) {
 				protected boolean act() {
 					if (!defender.isAlive()){
 						bloodStained = true;
-						updateQuickslot();
+						updateQuickslot(true);
 					}
 
 					Actor.remove(this);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -160,7 +160,7 @@ public void gainCharge( float amt, boolean overcharge ){
 			if (overcharge) curCharges = Math.min(maxCharges+(int)amt, curCharges+1);
 			else curCharges = Math.min(maxCharges, curCharges+1);
 			partialCharge--;
-			updateQuickslot();
+			updateQuickslot(false);
 		}
 	}
 	
@@ -581,7 +581,7 @@ public boolean act() {
 			while (partialCharge >= 1 && curCharges < maxCharges) {
 				partialCharge--;
 				curCharges++;
-				updateQuickslot();
+				updateQuickslot(false);
 			}
 			
 			if (curCharges == maxCharges){
@@ -623,7 +623,7 @@ public void gainCharge(float charge){
 					partialCharge--;
 				}
 				curCharges = Math.min(curCharges, maxCharges);
-				updateQuickslot();
+				updateQuickslot(false);
 			}
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfMagicMissile.java
Patch:
@@ -111,7 +111,7 @@ public void setLevel(int level){
 		@Override
 		public void detach() {
 			super.detach();
-			QuickSlotButton.refresh();
+			QuickSlotButton.refresh(false);
 		}
 
 		public int level(){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Ghoul.java
Patch:
@@ -246,7 +246,6 @@ public boolean act() {
 
 			turnsToRevive--;
 			if (turnsToRevive <= 0){
-				ghoul.HP = Math.round(ghoul.HT/10f);
 				if (Actor.findChar( ghoul.pos ) != null) {
 					ArrayList<Integer> candidates = new ArrayList<>();
 					for (int n : PathFinder.NEIGHBOURS8) {
@@ -265,6 +264,7 @@ public boolean act() {
 						return true;
 					}
 				}
+				ghoul.HP = Math.round(ghoul.HT/10f);
 				Actor.add(ghoul);
 				ghoul.spend(-ghoul.cooldown());
 				Dungeon.level.mobs.add(ghoul);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Item.java
Patch:
@@ -113,7 +113,6 @@ public boolean doPickUp( Hero hero ) {
 			
 			GameScene.pickUp( this, hero.pos );
 			Sample.INSTANCE.play( Assets.Sounds.ITEM );
-			Talent.onItemCollected( hero, this );
 			hero.spendAndNext( TIME_TO_PICK_UP );
 			return true;
 			
@@ -206,13 +205,15 @@ public boolean collect( Bag container ) {
 				if (isSimilar( item )) {
 					item.merge( this );
 					item.updateQuickslot();
+					Talent.onItemCollected( Dungeon.hero, item );
 					return true;
 				}
 			}
 		}
 
 		if (Dungeon.hero != null && Dungeon.hero.isAlive()) {
 			Badges.validateItemLevelAquired( this );
+			Talent.onItemCollected( Dungeon.hero, this );
 		}
 
 		items.add( this );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/NewCavesBossLevel.java
Patch:
@@ -801,7 +801,7 @@ public void emit(Emitter emitter, int index, float x, float y) {
 						if (c instanceof Pylon && c.alignment != Char.Alignment.NEUTRAL){
 							energySourceSprite = c.sprite;
 							break;
-						} else if (c instanceof OldDM300){
+						} else if (c instanceof NewDM300){
 							energySourceSprite = c.sprite;
 						}
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndUseItem.java
Patch:
@@ -57,7 +57,9 @@ public WndUseItem(final WndBag owner, final Item item ) {
 					protected void onClick() {
 						hide();
 						if (owner != null && owner.parent != null) owner.hide();
-						if (Dungeon.hero.isAlive()) item.execute( Dungeon.hero, action );
+						if (Dungeon.hero.isAlive() && Dungeon.hero.belongings.contains(item)){
+							item.execute( Dungeon.hero, action );
+						}
 					}
 				};
 				btn.setSize( btn.reqWidth(), BUTTON_HEIGHT );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/AttackIndicator.java
Patch:
@@ -30,7 +30,6 @@
 import com.watabou.input.GameAction;
 import com.watabou.noosa.Game;
 import com.watabou.utils.Random;
-import com.watabou.utils.Reflection;
 
 import java.util.ArrayList;
 
@@ -143,7 +142,7 @@ private synchronized void updateImage() {
 			sprite = null;
 		}
 		
-		sprite = Reflection.newInstance(lastTarget.spriteClass);
+		sprite = lastTarget.sprite();
 		active = true;
 		sprite.linkVisuals(lastTarget);
 		sprite.idle();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/QuickSlotButton.java
Patch:
@@ -92,10 +92,10 @@ protected void onClick() {
 					}
 				} else {
 					Item item = select(slotNum);
+					item.execute( Dungeon.hero );
 					if (item.usesTargeting) {
 						useTargeting();
 					}
-					item.execute( Dungeon.hero );
 				}
 			}
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/ItemSlot.java
Patch:
@@ -176,7 +176,7 @@ public void item( Item item ) {
 		}
 	}
 
-	private void updateText(){
+	public void updateText(){
 
 		if (itemIcon != null){
 			remove(itemIcon);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/QuickSlotButton.java
Patch:
@@ -189,7 +189,7 @@ public void item( Item item ) {
 		slot.item( item );
 		enableSlot();
 	}
-	
+
 	public void enable( boolean value ) {
 		active = value;
 		if (value) {
@@ -257,7 +257,7 @@ public static int autoAim(Char target, Item item){
 	public static void refresh() {
 		for (int i = 0; i < instance.length; i++) {
 			if (instance[i] != null) {
-				instance[i].item(select(i));
+				instance[i].slot.updateText();
 			}
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Swarm.java
Patch:
@@ -85,11 +85,11 @@ public int defenseProc( Char enemy, int damage ) {
 
 		if (HP >= damage + 2) {
 			ArrayList<Integer> candidates = new ArrayList<>();
-			boolean[] solid = Dungeon.level.solid;
 			
 			int[] neighbours = {pos + 1, pos - 1, pos + Dungeon.level.width(), pos - Dungeon.level.width()};
 			for (int n : neighbours) {
-				if (!solid[n] && Actor.findChar( n ) == null) {
+				if (!Dungeon.level.solid[n] && Actor.findChar( n ) == null
+						&& (!properties.contains(Property.LARGE) || Dungeon.level.openSpace[n])) {
 					candidates.add( n );
 				}
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Combo.java
Patch:
@@ -41,6 +41,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.ui.ActionIndicator;
 import com.shatteredpixel.shatteredpixeldungeon.ui.AttackIndicator;
 import com.shatteredpixel.shatteredpixeldungeon.ui.BuffIndicator;
+import com.shatteredpixel.shatteredpixeldungeon.utils.BArray;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
 import com.shatteredpixel.shatteredpixeldungeon.windows.WndCombo;
 import com.watabou.noosa.Image;
@@ -346,7 +347,7 @@ private void doAttack(final Char enemy){
 					break;
 				case CRUSH:
 					WandOfBlastWave.BlastWave.blast(enemy.pos);
-					PathFinder.buildDistanceMap(target.pos, Dungeon.level.passable, 3);
+					PathFinder.buildDistanceMap(target.pos, BArray.not(Dungeon.level.solid, null), 3);
 					for (Char ch : Actor.chars()){
 						if (ch != enemy && ch.alignment == Char.Alignment.ENEMY
 								&& PathFinder.distance[ch.pos] < Integer.MAX_VALUE){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Preparation.java
Patch:
@@ -298,6 +298,7 @@ public void onSelect(Integer cell) {
 				Dungeon.level.occupyCell(Dungeon.hero);
 				//prevents the hero from being interrupted by seeing new enemies
 				Dungeon.observe();
+				GameScene.updateFog();
 				Dungeon.hero.checkVisibleMobs();
 				
 				Dungeon.hero.sprite.place( Dungeon.hero.pos );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -698,7 +698,8 @@ public static void win( Class cause ) {
 	}
 
 	public static void observe(){
-		int dist = 8 + 2*Dungeon.hero.pointsInTalent(Talent.FARSIGHT);
+		int dist = Dungeon.hero.viewDistance;
+		dist *= 1f + 0.25f*Dungeon.hero.pointsInTalent(Talent.FARSIGHT);
 		observe( dist+1 );
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfRemoveCurse.java
Patch:
@@ -100,7 +100,7 @@ public static boolean uncurse( Hero hero, Item... items ) {
 	public static boolean uncursable( Item item ){
 		if (item.isEquipped(Dungeon.hero) && Dungeon.hero.buff(Degrade.class) != null) {
 			return true;
-		} if ((item instanceof EquipableItem || item instanceof Wand) && (!item.cursedKnown || item.cursed)){
+		} if ((item instanceof EquipableItem || item instanceof Wand) && ((!item.isIdentified() && !item.cursedKnown) || item.cursed)){
 			return true;
 		} else if (item instanceof Weapon){
 			return ((Weapon)item).hasCurseEnchant();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Necromancer.java
Patch:
@@ -72,7 +72,7 @@ public class Necromancer extends Mob {
 	protected boolean act() {
 		if (summoning && state != HUNTING){
 			summoning = false;
-			updateSpriteState();
+			if (sprite instanceof NecromancerSprite) ((NecromancerSprite) sprite).cancelSummoning();
 		}
 		return super.act();
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/NecromancerSprite.java
Patch:
@@ -73,7 +73,7 @@ public void link(Char ch) {
 	@Override
 	public void update() {
 		super.update();
-		if (summoningBones != null){
+		if (summoningBones != null && ((Necromancer) ch).summoningPos != -1){
 			summoningBones.visible = Dungeon.level.heroFOV[((Necromancer) ch).summoningPos];
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_9_X_Changes.java
Patch:
@@ -84,7 +84,8 @@ public static void add_v0_9_2_Changes( ArrayList<ChangeInfo> changeInfos ) {
 				"_-_ Scrolls of remove curse being usable on items known to be uncursed\n" +
 				"_-_ Pitfall traps affecting items in locked chests or shops\n" +
 				"_-_ Various cases where teleportation could put the player onto traps\n" +
-				"_-_ Iron stomach not working with viscocity glyph"));
+				"_-_ Iron stomach not working with viscocity glyph\n" +
+				"_-_ Web links not working on Android 11"));
 
 		changes = new ChangeInfo("v0.9.2a", false, null);
 		changes.hardlight(Window.TITLE_COLOR);

File: SPD-classes/src/main/java/com/watabou/utils/DeviceCompat.java
Patch:
@@ -64,7 +64,7 @@ public static boolean isDebug(){
 	}
 	
 	public static void openURI( String URI ){
-		Gdx.net.openURI( URI );
+		Game.platform.openURI(URI);
 	}
 	
 	public static void log( String tag, String message ){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Combo.java
Patch:
@@ -86,8 +86,7 @@ public void hit( Char enemy ) {
 		count++;
 		comboTime = 5f;
 
-		//TODO this won't count a kill on an enemy that gets corruped by corrupting I think?
-		if (!enemy.isAlive() || enemy.buff(Corruption.class) != null){
+		if (!enemy.isAlive() || (enemy.buff(Corruption.class) != null && enemy.HP == enemy.HT)){
 			comboTime = Math.max(comboTime, 10*((Hero)target).pointsInTalent(Talent.CLEAVE));
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTeleportation.java
Patch:
@@ -91,7 +91,7 @@ public static void teleportChar( Char ch ) {
 			return;
 		}
 		
-		int count = 10;
+		int count = 20;
 		int pos;
 		do {
 			pos = Dungeon.level.randomRespawnCell( ch );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/PhaseShift.java
Patch:
@@ -45,14 +45,14 @@ protected void affectTarget(Ballistica bolt, Hero hero) {
 		if (ch == hero){
 			ScrollOfTeleportation.teleportHero(curUser);
 		} else if (ch != null) {
-			int count = 10;
+			int count = 20;
 			int pos;
 			do {
 				pos = Dungeon.level.randomRespawnCell( hero );
 				if (count-- <= 0) {
 					break;
 				}
-			} while (pos == -1);
+			} while (pos == -1 || Dungeon.level.secret[pos]);
 			
 			if (pos == -1 || Dungeon.bossLevel()) {
 				

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/curses/Displacing.java
Patch:
@@ -39,14 +39,14 @@ public int proc(Weapon weapon, Char attacker, Char defender, int damage ) {
 
 		float procChance = 1/12f * procChanceMultiplier(attacker);
 		if (Random.Float() < procChance && !defender.properties().contains(Char.Property.IMMOVABLE)){
-			int count = 10;
+			int count = 20;
 			int newPos;
 			do {
 				newPos = Dungeon.level.randomRespawnCell( defender );
 				if (count-- <= 0) {
 					break;
 				}
-			} while (newPos == -1);
+			} while (newPos == -1 || Dungeon.level.secret[newPos]);
 
 			if (newPos != -1 && !Dungeon.bossLevel()) {
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/TeleportationTrap.java
Patch:
@@ -54,14 +54,14 @@ public void activate() {
 			if (ch instanceof Hero) {
 				ScrollOfTeleportation.teleportHero((Hero) ch);
 			} else {
-				int count = 10;
+				int count = 20;
 				int pos;
 				do {
 					pos = Dungeon.level.randomRespawnCell( ch );
 					if (count-- <= 0) {
 						break;
 					}
-				} while (pos == -1);
+				} while (pos == -1 || Dungeon.level.secret[pos]);
 				
 				if (pos == -1 || Dungeon.bossLevel()) {
 					

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/WarpingTrap.java
Patch:
@@ -60,14 +60,14 @@ public void activate() {
 				Dungeon.observe();
 				
 			} else {
-				int count = 10;
+				int count = 20;
 				int pos;
 				do {
 					pos = Dungeon.level.randomRespawnCell( ch );
 					if (count-- <= 0) {
 						break;
 					}
-				} while (pos == -1);
+				} while (pos == -1 || Dungeon.level.secret[pos]);
 				
 				if (pos == -1 || Dungeon.bossLevel()) {
 					

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/plants/Fadeleaf.java
Patch:
@@ -77,14 +77,14 @@ public void activate( final Char ch ) {
 
 			if (!Dungeon.bossLevel()) {
 
-				int count = 10;
+				int count = 20;
 				int newPos;
 				do {
 					newPos = Dungeon.level.randomRespawnCell(ch);
 					if (count-- <= 0) {
 						break;
 					}
-				} while (newPos == -1);
+				} while (newPos == -1 || Dungeon.level.secret[newPos]);
 
 				if (newPos != -1) {
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfRemoveCurse.java
Patch:
@@ -100,7 +100,7 @@ public static boolean uncurse( Hero hero, Item... items ) {
 	public static boolean uncursable( Item item ){
 		if (item.isEquipped(Dungeon.hero) && Dungeon.hero.buff(Degrade.class) != null) {
 			return true;
-		} if ((item instanceof EquipableItem || item instanceof Wand) && (!item.isIdentified() || item.cursed)){
+		} if ((item instanceof EquipableItem || item instanceof Wand) && (!item.cursedKnown || item.cursed)){
 			return true;
 		} else if (item instanceof Weapon){
 			return ((Weapon)item).hasCurseEnchant();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -531,7 +531,7 @@ public boolean canSurpriseAttack(){
 	}
 
 	public boolean canAttack(Char enemy){
-		if (enemy == null || pos == enemy.pos) {
+		if (enemy == null || pos == enemy.pos || !Actor.chars().contains(enemy)) {
 			return false;
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Actor.java
Patch:
@@ -105,7 +105,7 @@ public void storeInBundle( Bundle bundle ) {
 	public void restoreFromBundle( Bundle bundle ) {
 		time = bundle.getFloat( TIME );
 		int incomingID = bundle.getInt( ID );
-		if (Actor.findById(id) == null){
+		if (Actor.findById(incomingID) == null){
 			id = incomingID;
 		} else {
 			id = nextID++;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TalismanOfForesight.java
Patch:
@@ -351,7 +351,7 @@ public static class CharAwareness extends FlavourBuff {
 		public int charID;
 		public int depth = Dungeon.depth;
 
-		private static final String ID = "id";
+		private static final String CHAR_ID = "char_id";
 
 		@Override
 		public void detach() {
@@ -363,13 +363,13 @@ public void detach() {
 		@Override
 		public void restoreFromBundle(Bundle bundle) {
 			super.restoreFromBundle(bundle);
-			charID = bundle.getInt(ID);
+			charID = bundle.getInt(CHAR_ID);
 		}
 
 		@Override
 		public void storeInBundle(Bundle bundle) {
 			super.storeInBundle(bundle);
-			bundle.put(ID, charID);
+			bundle.put(CHAR_ID, charID);
 		}
 
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/Armor.java
Patch:
@@ -233,7 +233,9 @@ public void affixSeal(BrokenSeal seal){
 		this.seal = seal;
 		if (seal.level() > 0){
 			//doesn't trigger upgrading logic such as affecting curses/glyphs
-			level(level()+1);
+			int newLevel = level()+1;
+			if (curseInfusionBonus) newLevel--;
+			level(newLevel);
 			Badges.validateItemLevelAquired(this);
 		}
 		if (seal.getGlyph() != null){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Shaman.java
Patch:
@@ -113,7 +113,7 @@ private void zap() {
 			
 			if (Random.Int( 2 ) == 0) {
 				debuff( enemy );
-				Sample.INSTANCE.play( Assets.Sounds.DEBUFF );
+				if (enemy == Dungeon.hero) Sample.INSTANCE.play( Assets.Sounds.DEBUFF );
 			}
 			
 			int dmg = Random.NormalIntRange( 6, 15 );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/DM200Sprite.java
Patch:
@@ -25,6 +25,8 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM200;
 import com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Speck;
+import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
+import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
 import com.watabou.noosa.TextureFilm;
 import com.watabou.noosa.audio.Sample;
 import com.watabou.utils.Callback;
@@ -72,6 +74,7 @@ public void call() {
 					}
 				} );
 		Sample.INSTANCE.play( Assets.Sounds.GAS );
+		GLog.w(Messages.get(DM200.class, "vent"));
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/NewDM300.java
Patch:
@@ -217,7 +217,7 @@ protected boolean act() {
 							}
 						//if we can't gas, then drop rocks
 						} else {
-							lastAbility = GAS;
+							lastAbility = ROCKS;
 							turnsSinceLastAbility = 0;
 							GLog.w(Messages.get(this, "rocks"));
 							if (sprite != null && (sprite.visible || enemy.sprite.visible)) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Goo.java
Patch:
@@ -158,8 +158,10 @@ protected boolean doAttack( Char enemy ) {
 					sprite.attack(enemy.pos);
 				}
 			} else {
+				if (pumpedUp >= 2){
+					((GooSprite)sprite).triggerEmitters();
+				}
 				attack( enemy );
-				((GooSprite)sprite).triggerEmitters();
 			}
 
 			spend( attackDelay() );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Shaman.java
Patch:
@@ -111,7 +111,7 @@ private void zap() {
 		
 		if (hit( this, enemy, true )) {
 			
-			if (enemy == Dungeon.hero && Random.Int( 2 ) == 0) {
+			if (Random.Int( 2 ) == 0) {
 				debuff( enemy );
 				Sample.INSTANCE.play( Assets.Sounds.DEBUFF );
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Combo.java
Patch:
@@ -333,7 +333,7 @@ private void doAttack(final Char enemy){
 						if (count >= 7 && hero.pointsInTalent(Talent.ENHANCED_COMBO) >= 1){
 							dist ++;
 							Buff.prolong(enemy, Vertigo.class, 3);
-						} else {
+						} else if (!enemy.flying) {
 							while (dist > trajectory.dist ||
 									(dist > 0 && Dungeon.level.pit[trajectory.path.get(dist)])) {
 								dist--;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/food/Food.java
Patch:
@@ -46,7 +46,6 @@ public class Food extends Item {
 	public static final String AC_EAT	= "EAT";
 	
 	public float energy = Hunger.HUNGRY;
-	public String message = Messages.get(this, "eat_msg");
 	
 	{
 		stackable = true;
@@ -72,7 +71,7 @@ public void execute( Hero hero, String action ) {
 			detach( hero.belongings.backpack );
 			
 			satisfy(hero);
-			GLog.i( message );
+			GLog.i( Messages.get(this, "eat_msg") );
 			
 			hero.sprite.operate( hero.pos );
 			hero.busy();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/AttackIndicator.java
Patch:
@@ -148,6 +148,7 @@ private synchronized void updateImage() {
 		sprite.linkVisuals(lastTarget);
 		sprite.idle();
 		sprite.paused = true;
+		sprite.visible = bg.visible;
 		add( sprite );
 
 		layout();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MagesStaff.java
Patch:
@@ -153,7 +153,7 @@ public int proc(Char attacker, Char defender, int damage) {
 			damage = Math.round( damage * (1f + Dungeon.hero.pointsInTalent(Talent.EMPOWERED_STRIKE)/6f));
 		}
 
-		if (wand.curCharges == wand.maxCharges && attacker instanceof Hero && Random.Int(6) < ((Hero) attacker).pointsInTalent(Talent.EXCESS_CHARGE)){
+		if (wand.curCharges >= wand.maxCharges && attacker instanceof Hero && Random.Int(6) < ((Hero) attacker).pointsInTalent(Talent.EXCESS_CHARGE)){
 			Buff.affect(attacker, Barrier.class).setShield(buffedLvl()*2);
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Actor.java
Patch:
@@ -324,8 +324,7 @@ private static synchronized void add( Actor actor, float time ) {
 			Char ch = (Char)actor;
 			chars.add( ch );
 			for (Buff buff : ch.buffs()) {
-				all.add( buff );
-				buff.onAdd();
+				add(buff);
 			}
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -295,6 +295,9 @@ public boolean attack( Char enemy ) {
 			Preparation prep = buff(Preparation.class);
 			if (prep != null){
 				dmg = prep.damageRoll(this);
+				if (this == Dungeon.hero && Dungeon.hero.hasTalent(Talent.BOUNTY_HUNTER)) {
+					Buff.affect(Dungeon.hero, Talent.BountyHunterTracker.class, 0.0f);
+				}
 			} else {
 				dmg = damageRoll();
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/RegrowthBomb.java
Patch:
@@ -66,7 +66,7 @@ public void explode(int cell) {
 		for (int i = 0; i < PathFinder.distance.length; i++) {
 			if (PathFinder.distance[i] < Integer.MAX_VALUE) {
 				Char ch = Actor.findChar(i);
-				int t = Dungeon.level.map[cell];
+				int t = Dungeon.level.map[i];
 				if (ch != null){
 					if (ch.alignment == Dungeon.hero.alignment) {
 						//same as a healing potion
@@ -75,7 +75,7 @@ public void explode(int cell) {
 					}
 				} else if ((t == Terrain.EMPTY || t == Terrain.EMPTY_DECO || t == Terrain.EMBERS
 						|| t == Terrain.GRASS || t == Terrain.FURROWED_GRASS || t == Terrain.HIGH_GRASS)
-						&& Dungeon.level.plants.get(cell) == null){
+						&& Dungeon.level.plants.get(i) == null){
 					plantCandidates.add(i);
 				}
 				GameScene.add( Blob.seed( i, 10, Regrowth.class ) );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/enchantments/Kinetic.java
Patch:
@@ -43,9 +43,9 @@ public int proc(Weapon weapon, Char attacker, Char defender, int damage) {
 			attacker.buff(ConservedDamage.class).detach();
 		}
 		
-		if (damage > defender.HP){
-			int extraDamage = damage - defender.HP;
-			
+		if (damage > (defender.HP + defender.shielding())){
+			int extraDamage = damage - (defender.HP + defender.shielding());
+
 			Buff.affect(attacker, ConservedDamage.class).setBonus(extraDamage);
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Necromancer.java
Patch:
@@ -221,6 +221,7 @@ public boolean act(boolean enemyInFOV, boolean justAlerted) {
 					for (int c : PathFinder.NEIGHBOURS8) {
 						if (Actor.findChar(summoningPos + c) == null
 								&& Dungeon.level.passable[summoningPos + c]
+								&& (Dungeon.level.openSpace[summoningPos + c] || !hasProp(Actor.findChar(summoningPos), Property.LARGE))
 								&& Dungeon.level.trueDistance(pos, summoningPos + c) > Dungeon.level.trueDistance(pos, pushPos)) {
 							pushPos = summoningPos + c;
 						}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Combo.java
Patch:
@@ -228,6 +228,7 @@ public void useMove(ComboMove move){
 			comboTime = 5f;
 			Buff.affect(target, ParryTracker.class, Actor.TICK);
 			((Hero)target).spendAndNext(Actor.TICK);
+			Dungeon.hero.busy();
 		} else {
 			moveBeingUsed = move;
 			GameScene.selectCell(listener);
@@ -447,6 +448,7 @@ public void onSelect(Integer cell) {
 				} else {
 					Ballistica c = new Ballistica(target.pos, enemy.pos, Ballistica.PROJECTILE);
 					if (c.collisionPos == enemy.pos){
+						Dungeon.hero.busy();
 						target.sprite.jump(target.pos, c.path.get(c.dist-1), new Callback() {
 							@Override
 							public void call() {
@@ -468,6 +470,7 @@ public void call() {
 				}
 
 			} else {
+				Dungeon.hero.busy();
 				target.sprite.attack(cell, new Callback() {
 					@Override
 					public void call() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/NewsScene.java
Patch:
@@ -119,6 +119,7 @@ public void create() {
 			boolean rightCol = false;
 			for (NewsArticle article : articles) {
 				StyledButton b = new ArticleButton(article);
+				b.multiline = true;
 				if (!rightCol) {
 					top += gap;
 					b.setRect( left, top, BTN_WIDTH, BTN_HEIGHT);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/StyledButton.java
Patch:
@@ -35,6 +35,8 @@ public class StyledButton extends Button {
 	protected NinePatch bg;
 	protected RenderedTextBlock text;
 	protected Image icon;
+
+	public boolean multiline;
 	
 	public StyledButton(Chrome.Type type, String label ) {
 		this(type, label, 9);
@@ -65,7 +67,7 @@ protected void layout() {
 		if (icon != null) componentWidth += icon.width() + 2;
 		
 		if (text != null && !text.text().equals("")){
-			text.maxWidth( (int)(width - componentWidth - bg.marginHor() - 2));
+			if (multiline) text.maxWidth( (int)(width - componentWidth - bg.marginHor() - 2));
 			componentWidth += text.width() + 2;
 
 			text.setPos(

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndCombo.java
Patch:
@@ -74,6 +74,7 @@ protected void onClick() {
 			};
 			ic.tint(move.tintColor);
 			moveBtn.icon(ic);
+			moveBtn.multiline = true;
 			moveBtn.setSize(width, moveBtn.reqHeight());
 			moveBtn.setRect(0, pos, width, moveBtn.reqHeight());
 			moveBtn.enable(combo.canUseMove(move));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Barkskin.java
Patch:
@@ -75,7 +75,7 @@ public int icon() {
 	public float iconFadePercent() {
 		if (target instanceof Hero){
 			float max = ((Hero) target).lvl;
-			return (max-level)/max;
+			return Math.max(0, (max-level)/max);
 		}
 		return 0;
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/CloakOfShadows.java
Patch:
@@ -362,6 +362,8 @@ public String desc() {
 
 		@Override
 		public void detach() {
+			activeBuff = null;
+
 			if (target.invisible > 0)   target.invisible--;
 
 			updateQuickslot();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/ScrollPane.java
Patch:
@@ -61,7 +61,7 @@ public void destroy() {
 
 	public void scrollTo( float x, float y ) {
 		content.camera.scroll.set( x, y );
-		thumb.y = y + height * content.camera.scroll.y / content.height();
+		thumb.y = this.y + height * content.camera.scroll.y / content.height();
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/NewsScene.java
Patch:
@@ -282,8 +282,6 @@ public ArticleButton(NewsArticle article) {
 
 		@Override
 		protected void layout() {
-			text.maxWidth( (int)(width - icon.width() - bg.marginHor() - 2));
-
 			super.layout();
 
 			icon.x = x + bg.marginLeft() + (16-icon.width())/2f;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/StyledButton.java
Patch:
@@ -65,7 +65,7 @@ protected void layout() {
 		if (icon != null) componentWidth += icon.width() + 2;
 		
 		if (text != null && !text.text().equals("")){
-			text.maxWidth( (int)(width - componentWidth - 2) );
+			text.maxWidth( (int)(width - componentWidth - bg.marginHor() - 2));
 			componentWidth += text.width() + 2;
 
 			text.setPos(

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -699,8 +699,7 @@ public static void win( Class cause ) {
 	}
 
 	public static void observe(){
-		int dist = Dungeon.hero.viewDistance;
-		dist *= 1f + 0.25f*Dungeon.hero.pointsInTalent(Talent.FARSIGHT);
+		int dist = 8 + 2*Dungeon.hero.pointsInTalent(Talent.FARSIGHT);
 		observe( dist+1 );
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Preparation.java
Patch:
@@ -151,7 +151,7 @@ public int damageRoll( Char attacker ){
 	}
 
 	public boolean canKO( Char defender ){
-		return AttackLevel.getLvl(turnsInvis).canKO(defender);
+		return !defender.isInvulnerable(target.getClass()) && AttackLevel.getLvl(turnsInvis).canKO(defender);
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -320,7 +320,8 @@ public int talentPointsSpent(int tier){
 	}
 
 	public int talentPointsAvailable(int tier){
-		if (lvl < Talent.tierLevelThresholds[tier]){
+		if (lvl < Talent.tierLevelThresholds[tier]
+			|| (tier == 3 && subClass == HeroSubClass.NONE)){
 			return 0;
 		} else if (lvl >= Talent.tierLevelThresholds[tier+1]){
 			return Talent.tierLevelThresholds[tier+1] - Talent.tierLevelThresholds[tier] - talentPointsSpent(tier);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/standard/CavesFissureRoom.java
Patch:
@@ -121,6 +121,7 @@ public void paint(Level level) {
 
 			//just become an empty room if we can't make at least 2 lines
 			if (lineAngles.size() < 2) {
+				PathFinder.setMapSize(level.width(), level.height());
 				return;
 			}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/SpiritBow.java
Patch:
@@ -164,9 +164,9 @@ public int damageRoll(Char owner) {
 			}
 		}
 
-		damage = Math.round(damage * (1f + sniperSpecialBonusDamage));
-		
 		if (sniperSpecial){
+			damage = Math.round(damage * (1f + sniperSpecialBonusDamage));
+
 			switch (augment){
 				case NONE:
 					damage = Math.round(damage * 0.667f);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Combo.java
Patch:
@@ -216,6 +216,7 @@ public boolean canUseMove(ComboMove move){
 	public void useMove(ComboMove move){
 		if (move == ComboMove.PARRY){
 			parryUsed = true;
+			comboTime = 5f;
 			Buff.affect(target, ParryTracker.class, Actor.TICK);
 			((Hero)target).spendAndNext(Actor.TICK);
 		} else {
@@ -422,6 +423,7 @@ public void onSelect(Integer cell) {
 			if (cell == null) return;
 			final Char enemy = Actor.findChar( cell );
 			if (enemy == null
+					|| enemy == target
 					|| !Dungeon.level.heroFOV[cell]
 					|| target.isCharmedBy( enemy )) {
 				GLog.w(Messages.get(Combo.class, "bad_target"));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Preparation.java
Patch:
@@ -231,9 +231,7 @@ public String desc() {
 	public void restoreFromBundle(Bundle bundle) {
 		super.restoreFromBundle(bundle);
 		turnsInvis = bundle.getInt(TURNS);
-		if (AttackLevel.getLvl(turnsInvis).blinkDistance() > 0){
-			ActionIndicator.setAction(this);
-		}
+		ActionIndicator.setAction(this);
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/NewTengu.java
Patch:
@@ -265,8 +265,8 @@ private void jump() {
 				
 				if (level.heroFOV[newPos]) CellEmitter.get( newPos ).burst( Speck.factory( Speck.WOOL ), 6 );
 				Sample.INSTANCE.play( Assets.Sounds.PUFF );
-				
-				float fill = 0.9f - 0.5f*((HP-80)/80f);
+
+				float fill = 0.9f - 0.5f*((HP-(HT/2f))/(HT/2f));
 				level.placeTrapsInTenguCell(fill);
 				
 			//otherwise, jump in a larger possible area, as the room is bigger

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Momentum.java
Patch:
@@ -31,6 +31,7 @@
 import com.watabou.noosa.Image;
 import com.watabou.noosa.audio.Sample;
 import com.watabou.utils.Bundle;
+import com.watabou.utils.GameMath;
 
 public class Momentum extends Buff implements ActionIndicator.Action {
 	
@@ -63,7 +64,7 @@ public boolean act() {
 				freerunTurns--;
 			}
 		} else if (!movedLastTurn){
-			momentumStacks = Math.min(momentumStacks -1, Math.round(momentumStacks * 0.667f));
+			momentumStacks = (int)GameMath.gate(0, momentumStacks-1, Math.round(momentumStacks * 0.667f));
 			if (momentumStacks <= 0) {
 				ActionIndicator.clearAction(this);
 				if (freerunCooldown <= 0) detach();
@@ -78,7 +79,7 @@ public boolean act() {
 	public void gainStack(){
 		movedLastTurn = true;
 		if (freerunCooldown <= 0){
-			postpone(target.cooldown());
+			postpone(target.cooldown()+(1/target.speed()));
 			momentumStacks = Math.min(momentumStacks + 1, 10);
 			ActionIndicator.setAction(this);
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/CloakOfShadows.java
Patch:
@@ -23,6 +23,7 @@
 
 
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
+import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Barrier;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/Weapon.java
Patch:
@@ -351,7 +351,9 @@ protected float procChanceMultiplier( Char attacker ){
 			float multi = 1f;
 			if (attacker instanceof Hero && ((Hero) attacker).hasTalent(Talent.ENRAGED_CATALYST)){
 				Berserk rage = attacker.buff(Berserk.class);
-				multi += 0.2f*rage.rageAmount()*((Hero) attacker).pointsInTalent(Talent.ENRAGED_CATALYST);
+				if (rage != null) {
+					multi += 0.2f * rage.rageAmount() * ((Hero) attacker).pointsInTalent(Talent.ENRAGED_CATALYST);
+				}
 			}
 			return multi;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MagesStaff.java
Patch:
@@ -153,7 +153,7 @@ public int proc(Char attacker, Char defender, int damage) {
 			damage = Math.round( damage * (1f + Dungeon.hero.pointsInTalent(Talent.EMPOWERED_STRIKE)/6f));
 		}
 
-		if (wand.curCharges == wand.maxCharges && Random.Int(6) < ((Hero) attacker).pointsInTalent(Talent.EXCESS_CHARGE)){
+		if (wand.curCharges == wand.maxCharges && attacker instanceof Hero && Random.Int(6) < ((Hero) attacker).pointsInTalent(Talent.EXCESS_CHARGE)){
 			Buff.affect(attacker, Barrier.class).setShield(buffedLvl()*2);
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/CharSprite.java
Patch:
@@ -220,7 +220,7 @@ public static void setMoveInterval( float interval){
 	//returns where the center of this sprite will be after it completes any motion in progress
 	public PointF destinationCenter(){
 		PosTweener motion = this.motion;
-		if (motion != null){
+		if (motion != null && motion.elapsed >= 0){
 			return new PointF(motion.end.x + width()/2f, motion.end.y + height()/2f);
 		} else {
 			return center();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -92,7 +92,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfMagicMapping;
 import com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfLivingEarth;
-import com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfWarding;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.SpiritBow;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.Weapon;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Blocking;
@@ -1190,8 +1189,8 @@ public void checkVisibleMobs() {
 		Char lastTarget = QuickSlotButton.lastTarget;
 		if (target != null && (lastTarget == null ||
 							!lastTarget.isAlive() ||
-							!fieldOfView[lastTarget.pos]) ||
-							(lastTarget instanceof WandOfWarding.Ward && mindVisionEnemies.contains(lastTarget))){
+							lastTarget.alignment == Alignment.ALLY ||
+							!fieldOfView[lastTarget.pos])){
 			QuickSlotButton.target(target);
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/QuickSlotButton.java
Patch:
@@ -92,8 +92,9 @@ protected void onClick() {
 					}
 				} else {
 					Item item = select(slotNum);
-					if (item.usesTargeting)
+					if (item.usesTargeting) {
 						useTargeting();
+					}
 					item.execute( Dungeon.hero );
 				}
 			}
@@ -207,6 +208,7 @@ private void useTargeting() {
 		if (lastTarget != null &&
 				Actor.chars().contains( lastTarget ) &&
 				lastTarget.isAlive() &&
+				lastTarget.alignment != Char.Alignment.ALLY &&
 				Dungeon.level.heroFOV[lastTarget.pos]) {
 
 			targeting = true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/NewDM300.java
Patch:
@@ -517,7 +517,7 @@ protected boolean getCloser(int target) {
 			return true;
 		} else {
 
-			if (!supercharged || rooted || target == pos || Dungeon.level.adjacent(pos, target)) {
+			if (!supercharged || state != HUNTING || rooted || target == pos || Dungeon.level.adjacent(pos, target)) {
 				return false;
 			}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -381,7 +381,7 @@ public static void switchLevel( final Level level, int pos ) {
 		}
 		
 		Light light = hero.buff( Light.class );
-		hero.viewDistance = 2;
+		hero.viewDistance = light == null ? level.viewDistance : Math.max( Light.DISTANCE, level.viewDistance );
 		
 		hero.curAction = hero.lastAction = null;
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -625,7 +625,7 @@ public synchronized boolean isCharmedBy( Char ch ) {
 	public synchronized void add( Buff buff ) {
 		
 		buffs.add( buff );
-		Actor.add( buff );
+		if (Actor.chars().contains(this)) Actor.add( buff );
 
 		if (sprite != null && buff.announced)
 			switch(buff.type){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
Patch:
@@ -93,7 +93,7 @@ public enum Talent {
 	//Rogue T2
 	MYSTICAL_MEAL(68), MYSTICAL_UPGRADE(69), WIDE_SEARCH(70), SILENT_STEPS(71), ROGUES_FORESIGHT(72),
 	//Rogue T3
-	ROGUE_T3_1(73), ROGUE_T3_2(74),
+	ROGUE_T3_1(73, 3), ROGUE_T3_2(74, 3),
 	//Assassin T3
 	ASSASSIN_T3_1(75, 3), ASSASSIN_T3_2(76, 3), ASSASSIN_T3_3(77, 3),
 	//Freerunner T3

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/GhoulSprite.java
Patch:
@@ -45,10 +45,10 @@ public GhoulSprite() {
 		attack = new Animation( 12, false );
 		attack.frames( frames, 0, 8, 9 );
 
-		crumple = new Animation( 1, false);
+		crumple = new Animation( 15, false);
 		crumple.frames( frames, 0, 10, 11, 12 );
 
-		die = new Animation( 1, false );
+		die = new Animation( 15, false );
 		die.frames( frames, 0, 10, 11, 12, 13 );
 		
 		play( idle );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -787,7 +787,7 @@ public static PathFinder.Path findPath(Char ch, int to, boolean[] pass, boolean[
 		}
 
 		if (chars && Char.hasProp(ch, Char.Property.LARGE)){
-			BArray.and( pass, Dungeon.level.openSpace, passable );
+			BArray.and( passable, Dungeon.level.openSpace, passable );
 		}
 
 		if (chars) {
@@ -816,7 +816,7 @@ public static int findStep(Char ch, int to, boolean[] pass, boolean[] visible, b
 		}
 
 		if (Char.hasProp(ch, Char.Property.LARGE)){
-			BArray.and( pass, Dungeon.level.openSpace, passable );
+			BArray.and( passable, Dungeon.level.openSpace, passable );
 		}
 
 		if (chars){
@@ -841,7 +841,7 @@ public static int flee( Char ch, int from, boolean[] pass, boolean[] visible, bo
 		}
 
 		if (Char.hasProp(ch, Char.Property.LARGE)){
-			BArray.and( pass, Dungeon.level.openSpace, passable );
+			BArray.and( passable, Dungeon.level.openSpace, passable );
 		}
 
 		if (chars) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndInfoPlant.java
Patch:
@@ -22,6 +22,7 @@
 package com.shatteredpixel.shatteredpixeldungeon.windows;
 
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
+import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.plants.Plant;
 import com.shatteredpixel.shatteredpixeldungeon.tiles.TerrainFeaturesTilemap;
 
@@ -30,7 +31,7 @@ public class WndInfoPlant extends WndTitledMessage {
 	public WndInfoPlant( Plant plant ) {
 		
 		super(TerrainFeaturesTilemap.tile( plant.pos, Dungeon.level.map[plant.pos]),
-				plant.plantName, plant.desc());
+				Messages.titleCase(plant.plantName), plant.desc());
 
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/CharSprite.java
Patch:
@@ -482,7 +482,7 @@ public void clearAura(){
 	
 	@Override
 	public void update() {
-		if (paused && !looping()){
+		if (paused && !looping() && ch != null && curAnim != null){
 			Animation cur = curAnim;
 			curAnim = null;
 			listener.onComplete(cur);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/Armor.java
Patch:
@@ -558,7 +558,7 @@ public Armor inscribe( Glyph glyph ) {
 		updateQuickslot();
 		//the hero needs runic transference to actually transfer, but we still attach the glyph here
 		// in case they take that talent in the future
-		if (glyph != null && seal != null){
+		if (seal != null){
 			seal.setGlyph(glyph);
 		}
 		return this;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/NewTengu.java
Patch:
@@ -1011,6 +1011,7 @@ protected void evolve() {
 								
 								if (ch == Dungeon.hero && !ch.isAlive()) {
 									Dungeon.fail(NewTengu.class);
+									GLog.n( Messages.get(Electricity.class, "ondeath") );
 								}
 							}
 							

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -299,8 +299,8 @@ public Item degrade() {
 	@Override
 	public int buffedLvl() {
 		int lvl = super.buffedLvl();
-		if (curUser != null) {
-			WandOfMagicMissile.MagicCharge buff = curUser.buff(WandOfMagicMissile.MagicCharge.class);
+		if (charger != null && charger.target != null) {
+			WandOfMagicMissile.MagicCharge buff = charger.target.buff(WandOfMagicMissile.MagicCharge.class);
 			if (buff != null && buff.level() > lvl){
 				return buff.level();
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/BrokenSeal.java
Patch:
@@ -107,7 +107,8 @@ public void onSelect( Item item ) {
 					GLog.w(Messages.get(BrokenSeal.class, "unknown_armor"));
 				} else if (armor.cursed || armor.level() < 0){
 					GLog.w(Messages.get(BrokenSeal.class, "degraded_armor"));
-				} else if (armor.glyph != null && ((BrokenSeal)curItem).getGlyph() != null) {
+				} else if (armor.glyph != null && ((BrokenSeal)curItem).getGlyph() != null
+						&& armor.glyph.getClass() != ((BrokenSeal) curItem).getGlyph().getClass()) {
 					GameScene.show(new WndOptions(Messages.get(BrokenSeal.class, "choose_title"),
 							Messages.get(BrokenSeal.class, "choose_desc"),
 							armor.glyph.name(),

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/RegularLevel.java
Patch:
@@ -423,8 +423,8 @@ protected void createItems() {
 				int tries = 100;
 				do {
 					cell = randomDropCell(SpecialRoom.class);
-				} while (tries-- > 0 && room(cell) instanceof SecretRoom);
-				if (!(room(cell) instanceof SecretRoom) && cell != -1) {
+				} while (tries-- > 0 && (room(cell) instanceof SecretRoom || room(cell) instanceof ShopRoom));
+				if (!(room(cell) instanceof SecretRoom || room(cell) instanceof ShopRoom) && cell != -1) {
 					if (map[cell] == Terrain.HIGH_GRASS || map[cell] == Terrain.FURROWED_GRASS) {
 						map[cell] = Terrain.GRASS;
 						losBlocking[cell] = false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -345,7 +345,7 @@ public boolean attack( Char enemy ) {
 				String defense = enemy.defenseVerb();
 				enemy.sprite.showStatus( CharSprite.NEUTRAL, defense );
 
-				//TODO enemy.defenseSound? currently miss plays for monks/crab even when the parry
+				//TODO enemy.defenseSound? currently miss plays for monks/crab even when they parry
 				Sample.INSTANCE.play(Assets.Sounds.MISS);
 			}
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -817,7 +817,7 @@ public boolean act( boolean enemyInFOV, boolean justAlerted ) {
 					if (alignment == Alignment.ENEMY && Dungeon.isChallenged(Challenges.SWARM_INTELLIGENCE)) {
 						for (Mob mob : Dungeon.level.mobs) {
 							if (mob.paralysed <= 0
-									&& Dungeon.level.distance(pos, mob.pos) <= 8 //TODO base on pathfinder distance instead?
+									&& Dungeon.level.distance(pos, mob.pos) <= 8
 									&& mob.state != mob.HUNTING) {
 								mob.beckon(target);
 							}
@@ -865,7 +865,7 @@ protected boolean noticeEnemy(){
 			if (alignment == Alignment.ENEMY && Dungeon.isChallenged( Challenges.SWARM_INTELLIGENCE )) {
 				for (Mob mob : Dungeon.level.mobs) {
 					if (mob.paralysed <= 0
-							&& Dungeon.level.distance(pos, mob.pos) <= 8 //TODO base on pathfinder distance instead?
+							&& Dungeon.level.distance(pos, mob.pos) <= 8
 							&& mob.state != mob.HUNTING) {
 						mob.beckon( target );
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/NewDM300.java
Patch:
@@ -76,7 +76,6 @@
 public class NewDM300 extends Mob {
 
 	{
-		//TODO improved sprite
 		spriteClass = DM300Sprite.class;
 
 		HP = HT = 300;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Shaman.java
Patch:
@@ -38,7 +38,6 @@
 import com.watabou.noosa.audio.Sample;
 import com.watabou.utils.Random;
 
-//TODO stats on these might be a bit weak
 public abstract class Shaman extends Mob {
 	
 	{
@@ -174,8 +173,6 @@ protected void debuff( Char enemy ) {
 		}
 	}
 	
-	//TODO a rare variant that helps brutes?
-	
 	public static Class<? extends Shaman> random(){
 		float roll = Random.Float();
 		if (roll < 0.4f){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/RegrowthBomb.java
Patch:
@@ -44,7 +44,6 @@
 public class RegrowthBomb extends Bomb {
 	
 	{
-		//TODO visuals
 		image = ItemSpriteSheet.REGROWTH_BOMB;
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/ShrapnelBomb.java
Patch:
@@ -57,7 +57,6 @@ public void explode(int cell) {
 		for (int i = 0; i < FOV.length; i++) {
 			if (FOV[i]) {
 				if (Dungeon.level.heroFOV[i] && !Dungeon.level.solid[i]) {
-					//TODO better vfx?
 					CellEmitter.center( i ).burst( BlastParticle.FACTORY, 5 );
 				}
 				Char ch = Actor.findChar(i);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/brews/CausticBrew.java
Patch:
@@ -38,7 +38,6 @@
 public class CausticBrew extends Brew {
 	
 	{
-		//TODO finish visuals
 		image = ItemSpriteSheet.BREW_CAUSTIC;
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/elixirs/ElixirOfAquaticRejuvenation.java
Patch:
@@ -40,7 +40,6 @@
 public class ElixirOfAquaticRejuvenation extends Elixir {
 	
 	{
-		//TODO finish visuals
 		image = ItemSpriteSheet.ELIXIR_AQUA;
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/elixirs/ElixirOfDragonsBlood.java
Patch:
@@ -34,7 +34,6 @@
 public class ElixirOfDragonsBlood extends Elixir {
 	
 	{
-		//TODO finish visuals
 		image = ItemSpriteSheet.ELIXIR_DRAGON;
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/elixirs/ElixirOfIcyTouch.java
Patch:
@@ -32,7 +32,6 @@
 public class ElixirOfIcyTouch extends Elixir {
 	
 	{
-		//TODO finish visuals
 		image = ItemSpriteSheet.ELIXIR_ICY;
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/elixirs/ElixirOfToxicEssence.java
Patch:
@@ -32,7 +32,6 @@
 public class ElixirOfToxicEssence extends Elixir {
 	
 	{
-		//TODO finish visuals
 		image = ItemSpriteSheet.ELIXIR_TOXIC;
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTransmutation.java
Patch:
@@ -23,6 +23,7 @@
 
 import com.shatteredpixel.shatteredpixeldungeon.Challenges;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
+import com.shatteredpixel.shatteredpixeldungeon.effects.Speck;
 import com.shatteredpixel.shatteredpixeldungeon.items.EquipableItem;
 import com.shatteredpixel.shatteredpixeldungeon.items.Generator;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
@@ -116,7 +117,8 @@ protected void onItemSelected(Item item) {
 			if (result.isIdentified()){
 				Catalog.setSeen(result.getClass());
 			}
-			//TODO visuals
+			//TODO might be nice to have a spellsprite for this, like Enchanting
+			curUser.sprite.emitter().start(Speck.factory(Speck.CHANGE), 0.2f, 10);
 			GLog.p( Messages.get(this, "morph") );
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/NewCityBossLevel.java
Patch:
@@ -359,7 +359,6 @@ public Group addVisuals( ) {
 		return visuals;
 	}
 
-	//TODO need to change text for some of these tiles
 	public static class CustomGroundVisuals extends CustomTilemap {
 
 		{
@@ -469,7 +468,7 @@ public Tilemap create() {
 						//mid row of DK's throne
 					}else if (map[i + 1] == Terrain.SIGN) {
 						data[i] = 14 * 8 + 1;
-						data[++i] = 14 * 8 + 2; //TODO finalize throne visuals
+						data[++i] = 14 * 8 + 2;
 						data[++i] = 14 * 8 + 3;
 
 						//bottom row of DK's throne

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/OldPrisonBossLevel.java
Patch:
@@ -34,7 +34,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.keys.IronKey;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.HeavyBoomerang;
-import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.MazeRoom;
 import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room;
 import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.EmptyRoom;
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.GrippingTrap;
@@ -352,7 +351,7 @@ public void progress(){
 				TargetHealthIndicator.instance.target(null);
 				tengu.sprite.kill();
 
-				Room maze = new MazeRoom();
+				Room maze = new EmptyRoom();
 				maze.set(10, 1, 31, 29);
 				maze.connected.put(null, new Room.Door(10, 2));
 				maze.connected.put(maze, new Room.Door(20, 29));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/features/Chasm.java
Patch:
@@ -29,6 +29,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Cripple;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
+import com.shatteredpixel.shatteredpixeldungeon.effects.Speck;
 import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass;
 import com.shatteredpixel.shatteredpixeldungeon.items.spells.FeatherFall;
 import com.shatteredpixel.shatteredpixeldungeon.levels.RegularLevel;
@@ -106,7 +107,7 @@ public static void heroLand() {
 		FeatherFall.FeatherBuff b = hero.buff(FeatherFall.FeatherBuff.class);
 		
 		if (b != null){
-			//TODO visuals
+			hero.sprite.emitter().burst( Speck.factory( Speck.JET ), 20);
 			b.detach();
 			return;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/PitfallTrap.java
Patch:
@@ -137,7 +137,4 @@ public void restoreFromBundle(Bundle bundle) {
 		}
 
 	}
-
-	//TODO these used to become chasms when disarmed, but the functionality was problematic
-	//because it could block routes, perhaps some way to make this work elegantly?
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/mechanics/Ballistica.java
Patch:
@@ -35,6 +35,7 @@ public class Ballistica {
 	public ArrayList<Integer> path = new ArrayList<>();
 	public Integer sourcePos = null;
 	public Integer collisionPos = null;
+	public Integer collisionProperties = null;
 	public Integer dist = 0;
 
 	//parameters to specify the colliding cell
@@ -52,6 +53,7 @@ public class Ballistica {
 
 	public Ballistica( int from, int to, int params ){
 		sourcePos = from;
+		collisionProperties = params;
 		build(from, to,
 				(params & STOP_TARGET) > 0,
 				(params & STOP_CHARS) > 0,

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/mechanics/ConeAOE.java
Patch:
@@ -39,7 +39,7 @@ public class ConeAOE {
 	public HashSet<Integer> cells = new HashSet<>();
 
 	public ConeAOE( Ballistica core, float degrees ){
-		this( core, Float.POSITIVE_INFINITY, degrees, Ballistica.STOP_TARGET/* TODO */);
+		this( core, Float.POSITIVE_INFINITY, degrees, core.collisionProperties );
 	}
 
 	public ConeAOE( Ballistica core, float maxDist, float degrees, int ballisticaParams ){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/WelcomeScene.java
Patch:
@@ -161,7 +161,6 @@ protected void onClick() {
 	private void updateVersion(int previousVersion){
 
 		//update rankings, to update any data which may be outdated
-		//FIXME this is set to true temporarily as we want to run this no matter what, to ensure the v0.9.0a- badges bug is fixed
 		if (previousVersion < LATEST_UPDATE){
 			int highestChalInRankings = 0;
 			try {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/GhoulSprite.java
Patch:
@@ -62,7 +62,7 @@ public void crumple(){
 	@Override
 	public void move(int from, int to) {
 		if (parent == null){
-			//fixme this happens rarely, likely due to ghoul like link?
+			//fixme this happens rarely, likely due to ghoul life link?
 			Game.reportException(new RuntimeException("ghoul sprite tried to move with null parent! ghoul HP: " + ch.HP));
 			return;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/TerrainFeaturesTilemap.java
Patch:
@@ -33,7 +33,6 @@
 import com.watabou.utils.RectF;
 import com.watabou.utils.SparseArray;
 
-//TODO add in a proper set of vfx for plants growing/withering, grass burning, discovering traps
 public class TerrainFeaturesTilemap extends DungeonTilemap {
 
 	private static TerrainFeaturesTilemap instance;
@@ -70,7 +69,6 @@ protected int getTileVisual(int pos, int tile, boolean flat){
 		if (tile == Terrain.HIGH_GRASS){
 			return 9 + 16*stage + (DungeonTileSheet.tileVariance[pos] >= 50 ? 1 : 0);
 		} else if (tile == Terrain.FURROWED_GRASS){
-			//TODO
 			return 11 + 16*stage + (DungeonTileSheet.tileVariance[pos] >= 50 ? 1 : 0);
 		} else if (tile == Terrain.GRASS) {
 			return 13 + 16*stage + (DungeonTileSheet.tileVariance[pos] >= 50 ? 1 : 0);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
Patch:
@@ -202,7 +202,9 @@ public static void onFoodEaten( Hero hero, float foodVal, Item foodSource ){
 		}
 	}
 
-	public static class WarriorFoodImmunity extends FlavourBuff{};
+	public static class WarriorFoodImmunity extends FlavourBuff{
+		{ actPriority = HERO_PRIO+1; }
+	}
 
 	public static float itemIDSpeedFactor( Hero hero, Item item ){
 		// 1.75x/2.5x speed with huntress talent

File: SPD-classes/src/main/java/com/watabou/glwrap/Program.java
Patch:
@@ -23,6 +23,7 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.utils.BufferUtils;
+import com.watabou.noosa.Game;
 
 import java.nio.IntBuffer;
 
@@ -48,7 +49,7 @@ public void link() {
 		IntBuffer status = BufferUtils.newIntBuffer(1);
 		Gdx.gl.glGetProgramiv( handle, Gdx.gl.GL_LINK_STATUS, status );
 		if (status.get() == Gdx.gl.GL_FALSE) {
-			throw new Error( Gdx.gl.glGetProgramInfoLog( handle ) );
+			Game.reportException( new RuntimeException( Gdx.gl.glGetProgramInfoLog( handle ) ) );
 		}
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/NewDM300.java
Patch:
@@ -407,7 +407,7 @@ public void dropRocks( Char target ) {
 				pos++;
 			}
 		}
-		Buff.append(this, FallingRocks.class, Math.min(target.cooldown(), 3*TICK)).setRockPositions(rockCells);
+		Buff.append(this, FallingRockBuff.class, Math.min(target.cooldown(), 3*TICK)).setRockPositions(rockCells);
 
 	}
 
@@ -600,7 +600,7 @@ public String description() {
 		resistances.add(Slow.class);
 	}
 
-	public static class FallingRocks extends FlavourBuff {
+	public static class FallingRockBuff extends FlavourBuff {
 
 		private int[] rockPositions;
 		private ArrayList<Emitter> rockEmitters = new ArrayList<>();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
Patch:
@@ -169,11 +169,11 @@ public static void onFoodEaten( Hero hero, float foodVal, Item foodSource ){
 			//3/5 HP healed, when hero is below 25% health
 			if (hero.HP <= hero.HT/4) {
 				hero.HP = Math.min(hero.HP + 1 + 2 * hero.pointsInTalent(HEARTY_MEAL), hero.HT);
-				hero.sprite.emitter().burst(Speck.factory(Speck.HEALING), hero.pointsInTalent(HEARTY_MEAL));
+				hero.sprite.emitter().burst(Speck.factory(Speck.HEALING), 1+hero.pointsInTalent(HEARTY_MEAL));
 			//2/3 HP healed, when hero is below 50% health
 			} else if (hero.HP <= hero.HT/2){
 				hero.HP = Math.min(hero.HP + 1 + hero.pointsInTalent(HEARTY_MEAL), hero.HT);
-				hero.sprite.emitter().burst(Speck.factory(Speck.HEALING), 1+hero.pointsInTalent(HEARTY_MEAL));
+				hero.sprite.emitter().burst(Speck.factory(Speck.HEALING), hero.pointsInTalent(HEARTY_MEAL));
 			}
 		}
 		if (hero.hasTalent(IRON_STOMACH)){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/HornOfPlenty.java
Patch:
@@ -98,8 +98,6 @@ public void execute( Hero hero, String action ) {
 				if (chargesToUse > charge) chargesToUse = charge;
 				hunger.satisfy(satietyPerCharge * chargesToUse);
 
-				Talent.onFoodEaten(hero, satietyPerCharge * chargesToUse, this);
-
 				Statistics.foodEaten++;
 
 				charge -= chargesToUse;
@@ -119,6 +117,8 @@ public void execute( Hero hero, String action ) {
 					hero.spend(Food.TIME_TO_EAT);
 				}
 
+				Talent.onFoodEaten(hero, satietyPerCharge * chargesToUse, this);
+
 				Badges.validateFoodEaten();
 
 				if (charge >= 15)       image = ItemSpriteSheet.ARTIFACT_HORN4;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/TalentsPane.java
Patch:
@@ -106,7 +106,9 @@ protected void layout() {
 		blocker.y = top;
 		blocker.size(width, height - top);
 
-		blockText.setPos((width - blockText.width())/2f, blocker.y + (height - blocker.y)/2 - 3);
+		blockText.maxWidth((int)width);
+		blockText.align(RenderedTextBlock.CENTER_ALIGN);
+		blockText.setPos((width - blockText.width())/2f, blocker.y + (height - blocker.y - blockText.height())/2);
 	}
 
 	public static class TalentTierPane extends Component {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfTransfusion.java
Patch:
@@ -166,9 +166,9 @@ public void staffFx(MagesStaff.StaffParticle particle) {
 
 	@Override
 	public String statsDesc() {
-		int selfDMG = Math.round(Dungeon.hero.HT*0.10f);
+		int selfDMG = Math.round(Dungeon.hero.HT*0.05f);
 		if (levelKnown)
-			return Messages.get(this, "stats_desc", selfDMG, selfDMG + 3*buffedLvl(), 5+2*buffedLvl(), 3+buffedLvl()/2, 6+ buffedLvl());
+			return Messages.get(this, "stats_desc", selfDMG, selfDMG + 3*buffedLvl(), 5+buffedLvl(), 3+buffedLvl()/2, 6+ buffedLvl());
 		else
 			return Messages.get(this, "stats_desc", selfDMG, selfDMG, 5, 3, 6);
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/glyphs/Viscosity.java
Patch:
@@ -134,10 +134,10 @@ public boolean act() {
 				target.damage( damageThisTick, this );
 				if (target == Dungeon.hero && !target.isAlive()) {
 
+					Badges.validateDeathFromGlyph();
+
 					Dungeon.fail( getClass() );
 					GLog.n( Messages.get(this, "ondeath") );
-					
-					Badges.validateDeathFromGlyph();
 				}
 				spend( TICK );
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DwarfKing.java
Patch:
@@ -537,7 +537,7 @@ public boolean act() {
 					}
 				} else {
 					Char ch = Actor.findChar(pos);
-					ch.damage(Random.NormalIntRange(20, 40), summon);
+					ch.damage(Random.NormalIntRange(20, 40), target);
 					if (((DwarfKing)target).phase == 2){
 						target.damage(target.HT/12, new KingDamager());
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/CausticSlime.java
Patch:
@@ -57,7 +57,7 @@ public void rollToDropLoot() {
 		int ofs;
 		do {
 			ofs = PathFinder.NEIGHBOURS8[Random.Int(8)];
-		} while (Dungeon.level.solid[pos + ofs]);
+		} while (Dungeon.level.solid[pos + ofs] && !Dungeon.level.passable[pos + ofs]);
 		Dungeon.level.drop( new GooBlob(), pos + ofs ).sprite.drop( pos );
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM201.java
Patch:
@@ -126,7 +126,7 @@ public void rollToDropLoot() {
 		int ofs;
 		do {
 			ofs = PathFinder.NEIGHBOURS8[Random.Int(8)];
-		} while (Dungeon.level.solid[pos + ofs]);
+		} while (Dungeon.level.solid[pos + ofs] && !Dungeon.level.passable[pos + ofs]);
 		Dungeon.level.drop( new MetalShard(), pos + ofs ).sprite.drop( pos );
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/QuickSlotButton.java
Patch:
@@ -244,7 +244,7 @@ public static int autoAim(Char target, Item item){
 		PathFinder.buildDistanceMap( target.pos, BArray.not( new boolean[Dungeon.level.length()], null ), 2 );
 		for (int i = 0; i < PathFinder.distance.length; i++) {
 			if (PathFinder.distance[i] < Integer.MAX_VALUE
-					&& item.throwPos(Dungeon.hero, i) == target.pos)
+					&& item.targetingPos(Dungeon.hero, i) == target.pos)
 				return i;
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/InterlevelScene.java
Patch:
@@ -148,7 +148,7 @@ public void create() {
 			fadeTime += 0.5f; //adds 1 second total
 		//speed up transition when debugging
 		} else if (DeviceCompat.isDebug()){
-			fadeTime /= 2;
+			fadeTime = 0f;
 		}
 		
 		SkinnedBlock bg = new SkinnedBlock(Camera.main.width, Camera.main.height, loadingAsset ){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/ShopRoom.java
Patch:
@@ -228,7 +228,7 @@ protected static ArrayList<Item> generateItems() {
 		itemsToSpawn.add( new StoneOfAugmentation() );
 
 		TimekeepersHourglass hourglass = Dungeon.hero.belongings.getItem(TimekeepersHourglass.class);
-		if (hourglass != null){
+		if (hourglass != null && hourglass.isIdentified() && !hourglass.cursed){
 			int bags = 0;
 			//creates the given float percent of the remaining bags to be dropped.
 			//this way players who get the hourglass late can still max it, usually.

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Badges.java
Patch:
@@ -557,7 +557,6 @@ private static void validateYASD() {
 			global.contains( Badge.DEATH_FROM_FALLING)) {
 			
 			Badge badge = Badge.YASD;
-			local.add( badge );
 			displayBadge( badge );
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Combo.java
Patch:
@@ -265,7 +265,7 @@ private void doAttack(final Char enemy){
 
 			boolean wasAlly = enemy.alignment == target.alignment;
 			dmg = target.attackProc(enemy, dmg);
-			enemy.damage( dmg, this );
+			enemy.damage( dmg, target );
 
 			//special effects
 			switch (type){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/WallBlockingTilemap.java
Patch:
@@ -46,9 +46,6 @@ public WallBlockingTilemap() {
 
 	@Override
 	public synchronized void updateMap() {
-		super.updateMap();
-		data = new int[size]; //clears all values, including cleared tiles
-		
 		for (int cell = 0; cell < data.length; cell++) {
 			//force all top/bottom row, and none-discoverable cells to cleared
 			if (!Dungeon.level.discoverable[cell]
@@ -59,6 +56,8 @@ public synchronized void updateMap() {
 				updateMapCell(cell);
 			}
 		}
+
+		super.updateMap();
 	}
 
 	private int curr;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -359,6 +359,7 @@ protected void wandUsed() {
 
 		//if the wand is owned by the hero, but not in their inventory, it must be in the staff
 		if (curCharges == 0
+				&& charger != null
 				&& charger.target == Dungeon.hero
 				&& !Dungeon.hero.belongings.contains(this)
 				&& Dungeon.hero.hasTalent(Talent.BACKUP_BARRIER)){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/NewDM300.java
Patch:
@@ -526,7 +526,7 @@ protected boolean getCloser(int target) {
 			return true;
 		} else {
 
-			if (rooted || target == pos) {
+			if (!supercharged || rooted || target == pos) {
 				return false;
 			}
 
@@ -542,7 +542,7 @@ protected boolean getCloser(int target) {
 				return true;
 			}
 
-			if (!supercharged || state != HUNTING || Dungeon.level.adjacent(pos, target)){
+			if (state != HUNTING || Dungeon.level.adjacent(pos, target)){
 				return false;
 			}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
Patch:
@@ -177,7 +177,9 @@ public static void onFoodEaten( Hero hero, float foodVal, Item foodSource ){
 			}
 		}
 		if (hero.hasTalent(IRON_STOMACH)){
-			Buff.affect(hero, WarriorFoodImmunity.class, 1f);
+			if (hero.cooldown() > 0) {
+				Buff.affect(hero, WarriorFoodImmunity.class, hero.cooldown());
+			}
 		}
 		if (hero.hasTalent(EMPOWERING_MEAL)){
 			//2/3 bonus wand damage for next 3 zaps

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/food/Food.java
Patch:
@@ -73,15 +73,15 @@ public void execute( Hero hero, String action ) {
 			
 			satisfy(hero);
 			GLog.i( message );
-
-			Talent.onFoodEaten(hero, energy, this);
 			
 			hero.sprite.operate( hero.pos );
 			hero.busy();
 			SpellSprite.show( hero, SpellSprite.FOOD );
 			Sample.INSTANCE.play( Assets.Sounds.EAT );
 			
 			hero.spend( eatingTime() );
+
+			Talent.onFoodEaten(hero, energy, this);
 			
 			Statistics.foodEaten++;
 			Badges.validateFoodEaten();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -939,6 +939,7 @@ public void occupyCell( Char ch ){
 				&& ch == Dungeon.hero && Dungeon.hero.hasTalent(Talent.REJUVENATING_STEPS)
 				&& ch.buff(Talent.RejuvenatingStepsCooldown.class) == null){
 			set(ch.pos, Terrain.HIGH_GRASS);
+			GameScene.updateMap(ch.pos);
 			Buff.affect(ch, Talent.RejuvenatingStepsCooldown.class, 15f - 5f*Dungeon.hero.pointsInTalent(Talent.REJUVENATING_STEPS));
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1066,7 +1066,7 @@ public int attackProc( final Char enemy, int damage ) {
 		
 		switch (subClass) {
 		case SNIPER:
-			if (wep instanceof MissileWeapon && !(wep instanceof SpiritBow.SpiritArrow)) {
+			if (wep instanceof MissileWeapon && !(wep instanceof SpiritBow.SpiritArrow) && enemy != this) {
 				Actor.add(new Actor() {
 					
 					{

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndBag.java
Patch:
@@ -40,11 +40,11 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.bags.VelvetPouch;
 import com.shatteredpixel.shatteredpixeldungeon.items.food.Food;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion;
-import com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfRemoveCurse;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfTransmutation;
 import com.shatteredpixel.shatteredpixeldungeon.items.spells.Recycle;
+import com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfIntuition;
 import com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.SpiritBow;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon;
@@ -88,7 +88,7 @@ public static enum Mode {
 		FOOD,
 		POTION,
 		SCROLL,
-		UNIDED_POTION_OR_SCROLL,
+		INTUITIONABLE,
 		EQUIPMENT,
 		TRANMSUTABLE,
 		ALCHEMY,
@@ -444,7 +444,7 @@ public void item( Item item ) {
 						mode == Mode.FOOD && (item instanceof Food) ||
 						mode == Mode.POTION && (item instanceof Potion) ||
 						mode == Mode.SCROLL && (item instanceof Scroll) ||
-						mode == Mode.UNIDED_POTION_OR_SCROLL && (!item.isIdentified() && (item instanceof Scroll || item instanceof Potion || item instanceof Ring)) ||
+						mode == Mode.INTUITIONABLE && StoneOfIntuition.isIntuitionable(item) ||
 						mode == Mode.EQUIPMENT && (item instanceof EquipableItem || item instanceof Wand) ||
 						mode == Mode.ALCHEMY && Recipe.usableInRecipe(item) ||
 						mode == Mode.TRANMSUTABLE && ScrollOfTransmutation.canTransmute(item) ||

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/glyphs/AntiMagic.java
Patch:
@@ -25,10 +25,11 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Charm;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Degrade;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Hex;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MagicalSleep;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Vulnerable;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Weakness;
-import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Eye;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM100;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Eye;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Shaman;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Warlock;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Yog;
@@ -57,6 +58,7 @@ public class AntiMagic extends Armor.Glyph {
 	
 	public static final HashSet<Class> RESISTS = new HashSet<>();
 	static {
+		RESISTS.add( MagicalSleep.class );
 		RESISTS.add( Charm.class );
 		RESISTS.add( Weakness.class );
 		RESISTS.add( Vulnerable.class );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfWarding.java
Patch:
@@ -305,7 +305,7 @@ private void zap() {
 
 			//always hits
 			int dmg = Random.NormalIntRange( 2 + wandLevel, 8 + 4*wandLevel );
-			enemy.damage( dmg, WandOfWarding.class );
+			enemy.damage( dmg, this );
 			if (enemy.isAlive()){
 				Wand.processSoulMark(enemy, wandLevel, 1);
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/plants/Swiftthistle.java
Patch:
@@ -101,7 +101,7 @@ public void processTime(float time){
 			left -= time;
 
 			//use 1/1,000 to account for rounding errors
-			while (left < -0.001f){
+			if (left < -0.001f){
 				detach();
 			}
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -181,7 +181,7 @@ protected void processSoulMark(Char target, int chargesUsed){
 	protected static void processSoulMark(Char target, int wandLevel, int chargesUsed){
 		if (Dungeon.hero.hasTalent(Talent.ARCANE_VISION)) {
 			int dur = 5 + 5*Dungeon.hero.pointsInTalent(Talent.ARCANE_VISION);
-			Buff.affect(Dungeon.hero, TalismanOfForesight.CharAwareness.class, dur).charID = target.id();
+			Buff.append(Dungeon.hero, TalismanOfForesight.CharAwareness.class, dur).charID = target.id();
 		}
 
 		if (target != Dungeon.hero &&

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Warlock.java
Patch:
@@ -135,7 +135,7 @@ public Item createLoot(){
 
 		// 1/6 chance for healing, scaling to 0 over 8 drops
 		if (Random.Int(2) == 0 && Random.Int(8) > Dungeon.LimitedDrops.WARLOCK_HP.count ){
-			Dungeon.LimitedDrops.WARLOCK_HP.drop();
+			Dungeon.LimitedDrops.WARLOCK_HP.count++;
 			return new PotionOfHealing();
 		} else {
 			Item i = Generator.random(Generator.Category.POTION);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/TalentButton.java
Patch:
@@ -109,6 +109,7 @@ protected void onClick() {
 
 		if (upgradeEnabled
 				&& Dungeon.hero != null
+				&& Dungeon.hero.isAlive()
 				&& Dungeon.hero.talentPointsAvailable(tier) > 0
 				&& Dungeon.hero.pointsInTalent(talent) < talent.maxPoints()){
 			ShatteredPixelDungeon.scene().addToFront(new WndInfoTalent(talent, pointsInTalent, new Callback() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -906,8 +906,10 @@ public boolean act( boolean enemyInFOV, boolean justAlerted ) {
 				if (enemyInFOV) {
 					target = enemy.pos;
 				} else if (enemy == null) {
+					sprite.showLost();
 					state = WANDERING;
 					target = Dungeon.level.randomDestination( Mob.this );
+					spend( TICK );
 					return true;
 				}
 				

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1455,7 +1455,7 @@ public void earnExp( int exp, Class source ) {
 				GLog.p( Messages.get(this, "new_level") );
 				sprite.showStatus( CharSprite.POSITIVE, Messages.get(Hero.class, "level_up") );
 				Sample.INSTANCE.play( Assets.Sounds.LEVELUP );
-				if (lvl <= 6){
+				if (lvl < Talent.tierLevelThresholds[Talent.MAX_TALENT_TIERS+1]){
 					GLog.newLine();
 					GLog.p( Messages.get(this, "new_talent") );
 					StatusPane.talentBlink = 10f;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CityLevel.java
Patch:
@@ -59,7 +59,7 @@ public class CityLevel extends RegularLevel {
 	@Override
 	protected int standardRooms(boolean forceMax) {
 		if (forceMax) return 10;
-		//7 to 10, average 7.9
+		//7 to 10, average 8.0
 		return 7+Random.chances(new float[]{4, 3, 2, 1});
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonLevel.java
Patch:
@@ -65,14 +65,14 @@ protected ArrayList<Room> initRooms() {
 	@Override
 	protected int standardRooms(boolean forceMax) {
 		if (forceMax) return 8;
-		//6 to 8, average 6.66
+		//6 to 8, average 6.75
 		return 6+Random.chances(new float[]{4, 2, 2});
 	}
 	
 	@Override
 	protected int specialRooms(boolean forceMax) {
 		if (forceMax) return 3;
-		//1 to 3, average 1.83
+		//1 to 3, average 2.0
 		return 1+Random.chances(new float[]{3, 4, 3});
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/SewerLevel.java
Patch:
@@ -66,7 +66,7 @@ protected int standardRooms(boolean forceMax) {
 	@Override
 	protected int specialRooms(boolean forceMax) {
 		if (forceMax) return 3;
-		//1 to 3, average 1.67
+		//1 to 3, average 1.8
 		return 1+Random.chances(new float[]{4, 4, 2});
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/NewDM300.java
Patch:
@@ -209,7 +209,7 @@ protected boolean act() {
 
 					}
 
-				} else {
+				} else if (fieldOfView[enemy.pos]) {
 					if (turnsSinceLastAbility > abilityCooldown) {
 
 						if (lastAbility == NONE) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Honeypot.java
Patch:
@@ -101,11 +101,10 @@ public Item shatter( Char owner, int pos ) {
 		int newPos = pos;
 		if (Actor.findChar( pos ) != null) {
 			ArrayList<Integer> candidates = new ArrayList<>();
-			boolean[] passable = Dungeon.level.passable;
 			
 			for (int n : PathFinder.NEIGHBOURS4) {
 				int c = pos + n;
-				if (passable[c] && Actor.findChar( c ) == null) {
+				if (!Dungeon.level.solid[c] && Actor.findChar( c ) == null) {
 					candidates.add( c );
 				}
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TalismanOfForesight.java
Patch:
@@ -94,7 +94,7 @@ public void charge(Hero target) {
 			if (charge >= chargeCap) {
 				charge = chargeCap;
 				partialCharge = 0;
-				GLog.p( Messages.get(Foresight.class, "full_charge") );
+				GLog.p( Messages.get(TalismanOfForesight.class, "full_charge") );
 			}
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/Artifact.java
Patch:
@@ -130,7 +130,7 @@ public int buffedLvl() {
 
 	//transfers upgrades from another artifact, transfer level will equal the displayed level
 	public void transferUpgrade(int transferLvl) {
-		upgrade(Math.round((float)(transferLvl*levelCap)/10));
+		upgrade(Math.round((transferLvl*levelCap)/10f));
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -627,7 +627,7 @@ public void damage( int dmg, Object src ) {
 		if (state == SLEEPING) {
 			state = WANDERING;
 		}
-		if (state != HUNTING) {
+		if (state != HUNTING && !(src instanceof Corruption)) {
 			alerted = true;
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Preparation.java
Patch:
@@ -259,7 +259,7 @@ public void onSelect(Integer cell) {
 				PathFinder.Path path = PathFinder.find(Dungeon.hero.pos, cell, blinkable);
 				int attackPos = path == null ? -1 : path.get(path.size()-2);
 				
-				if (attackPos == -1 ||
+				if (attackPos == -1 || Dungeon.hero.rooted ||
 						Dungeon.level.distance(attackPos, Dungeon.hero.pos) > lvl.blinkDistance){
 					GLog.w(Messages.get(Preparation.class, "out_of_reach"));
 					return;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -684,7 +684,7 @@ public void move( int step ) {
 			sprite.interruptMotion();
 			int newPos = pos + PathFinder.NEIGHBOURS8[Random.Int( 8 )];
 			if (!(Dungeon.level.passable[newPos] || Dungeon.level.avoid[newPos])
-					|| (properties().contains(Property.LARGE) && !Dungeon.level.openSpace[pos])
+					|| (properties().contains(Property.LARGE) && !Dungeon.level.openSpace[newPos])
 					|| Actor.findChar( newPos ) != null)
 				return;
 			else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/NewPrisonBossLevel.java
Patch:
@@ -462,7 +462,7 @@ public void progress(){
 				for (Mob m : allies){
 					do{
 						m.pos = randomTenguCellPos();
-					} while (findMob(m.pos) != null);
+					} while (findMob(m.pos) != null || m.pos == Dungeon.hero.pos);
 					if (m.sprite != null) m.sprite.place(m.pos);
 					mobs.add(m);
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/builders/FigureEightBuilder.java
Patch:
@@ -96,7 +96,7 @@ public ArrayList<Room> build(ArrayList<Room> rooms) {
 		mainPathRooms.remove(landmarkRoom);
 		multiConnections.remove(landmarkRoom);
 		
-		float startAngle = Random.Float(0, 180);
+		float startAngle = Random.Float(0, 360);
 
 		int roomsOnFirstLoop = mainPathRooms.size()/2;
 		if (mainPathRooms.size() % 2 == 1) roomsOnFirstLoop += Random.Int(2);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TalismanOfForesight.java
Patch:
@@ -316,7 +316,9 @@ public boolean act() {
 		}
 
 		public void charge(int boost){
-			charge = Math.min((charge+boost), chargeCap);
+			if (!cursed) {
+				charge = Math.min((charge + boost), chargeCap);
+			}
 		}
 
 		@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/builders/FigureEightBuilder.java
Patch:
@@ -211,7 +211,7 @@ public ArrayList<Room> build(ArrayList<Room> rooms) {
 			float angle;
 			int tries = 10;
 			do {
-				angle = placeRoom(firstLoop, entrance, shop, Random.Float(360f));
+				angle = placeRoom(rooms, entrance, shop, Random.Float(360f));
 				tries--;
 			} while (angle == -1 && tries >= 0);
 			if (angle == -1) return null;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/connection/PerimeterRoom.java
Patch:
@@ -92,8 +92,8 @@ private static int spaceBetween(int a, int b){
 	//gets the path distance between two points
 	private static int distanceBetweenPoints(Room r, Point a, Point b){
 		//on the same side
-		if (((a.x == r.left || a.x == r.right) && a.y == b.y)
-				|| ((a.y == r.top || a.y == r.bottom) && a.x == b.x)){
+		if (((a.x == r.left+1 || a.x == r.right-1) && a.y == b.y)
+				|| ((a.y == r.top+1 || a.y == r.bottom-1) && a.x == b.x)){
 			return Math.max(spaceBetween(a.x, b.x), spaceBetween(a.y, b.y));
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/painters/RegularPainter.java
Patch:
@@ -214,6 +214,9 @@ protected void paintDoors( Level l, ArrayList<Room> rooms ) {
 					case TUNNEL:
 						l.map[door] = l.tunnelTile();
 						break;
+					case WATER:
+						l.map[door] = Terrain.WATER;
+						break;
 					case UNLOCKED:
 						l.map[door] = Terrain.DOOR;
 						break;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/Room.java
Patch:
@@ -387,7 +387,7 @@ public void onLevelLoad( Level level ){
 	public static class Door extends Point implements Bundlable {
 		
 		public enum Type {
-			EMPTY, TUNNEL, REGULAR, UNLOCKED, HIDDEN, BARRICADE, LOCKED
+			EMPTY, TUNNEL, WATER, REGULAR, UNLOCKED, HIDDEN, BARRICADE, LOCKED
 		}
 		public Type type = Type.EMPTY;
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TimekeepersHourglass.java
Patch:
@@ -309,7 +309,8 @@ public class timeFreeze extends ArtifactBuff {
 		public void processTime(float time){
 			turnsToCost -= time;
 
-			while (turnsToCost < 0f){
+			//use 1/1,000 to account for rounding errors
+			while (turnsToCost < -0.001f){
 				turnsToCost += 2f;
 				charge --;
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/plants/Swiftthistle.java
Patch:
@@ -99,8 +99,9 @@ public String desc() {
 		
 		public void processTime(float time){
 			left -= time;
-			
-			if (left <= 0){
+
+			//use 1/1,000 to account for rounding errors
+			while (left < -0.001f){
 				detach();
 			}
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/NewCavesBossLevel.java
Patch:
@@ -28,10 +28,10 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob;
 import com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Electricity;
-import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.OldDM300;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
-import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Pylon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.NewDM300;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.OldDM300;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Pylon;
 import com.shatteredpixel.shatteredpixeldungeon.effects.BlobEmitter;
 import com.shatteredpixel.shatteredpixeldungeon.effects.CellEmitter;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Speck;
@@ -277,7 +277,7 @@ public void seal() {
 		boss.state = boss.WANDERING;
 		do {
 			boss.pos = pointToCell(Random.element(mainArena.getPoints()));
-		} while (!openSpace[boss.pos] || map[boss.pos] == Terrain.EMPTY_SP);
+		} while (!openSpace[boss.pos] || map[boss.pos] == Terrain.EMPTY_SP || Actor.findChar(boss.pos) != null);
 		GameScene.add( boss );
 
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/CurseInfusion.java
Patch:
@@ -22,6 +22,7 @@
 package com.shatteredpixel.shatteredpixeldungeon.items.spells;
 
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
+import com.shatteredpixel.shatteredpixeldungeon.Badges;
 import com.shatteredpixel.shatteredpixeldungeon.effects.CellEmitter;
 import com.shatteredpixel.shatteredpixeldungeon.effects.particles.ShadowParticle;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
@@ -74,6 +75,7 @@ protected void onItemSelected(Item item) {
 			((Wand) item).curseInfusionBonus = true;
 			((Wand) item).updateLevel();
 		}
+		Badges.validateItemLevelAquired(item);
 		updateQuickslot();
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/DM300Sprite.java
Patch:
@@ -97,7 +97,7 @@ public void call() {
 						((NewDM300)ch).onZapComplete();
 					}
 				} );
-		Sample.INSTANCE.play( Assets.Sounds.PUFF );
+		Sample.INSTANCE.play( Assets.Sounds.GAS );
 	}
 
 	public void charge(){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/WelcomeScene.java
Patch:
@@ -168,7 +168,7 @@ private void updateVersion(int previousVersion){
 				for (Rankings.Record rec : Rankings.INSTANCE.records.toArray(new Rankings.Record[0])){
 					try {
 						Rankings.INSTANCE.loadGameData(rec);
-						highestChalInRankings = Math.max(highestChalInRankings, Challenges.activeChallenges());
+						if (rec.win) highestChalInRankings = Math.max(highestChalInRankings, Challenges.activeChallenges());
 						Rankings.INSTANCE.saveGameData(rec);
 					} catch (Exception e) {
 						//if we encounter a fatal per-record error, then clear that record

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
Patch:
@@ -202,14 +202,14 @@ public static int onAttackProc( Hero hero, Char enemy, int dmg ){
 	public static class SuckerPunchTracker extends Buff{};
 	public static class FollowupStrikeTracker extends Buff{};
 
-	private static final int TALENT_TIERS = 1;
+	public static final int MAX_TALENT_TIERS = 1;
 
 	public static void initClassTalents( Hero hero ){
 		initClassTalents( hero.heroClass, hero.talents );
 	}
 
 	public static void initClassTalents( HeroClass cls, ArrayList<LinkedHashMap<Talent, Integer>> talents ){
-		while (talents.size() < TALENT_TIERS){
+		while (talents.size() < MAX_TALENT_TIERS){
 			talents.add(new LinkedHashMap<>());
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Frost.java
Patch:
@@ -130,7 +130,7 @@ public void fx(boolean on) {
 			target.sprite.add(CharSprite.State.PARALYSED);
 		} else {
 			target.sprite.remove(CharSprite.State.FROZEN);
-			if (target.paralysed <= 1) target.sprite.remove(CharSprite.State.FROZEN);
+			if (target.paralysed <= 1) target.sprite.remove(CharSprite.State.PARALYSED);
 		}
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/CharSprite.java
Patch:
@@ -417,7 +417,7 @@ public void remove( State state ) {
 				alpha( 1f );
 				break;
 			case PARALYSED:
-				if (iceBlock != null) paused = false;
+				paused = false;
 				break;
 			case FROZEN:
 				if (iceBlock != null) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Ghost.java
Patch:
@@ -289,7 +289,7 @@ public static void spawn( SewerLevel level ) {
 					case 5: armor = new PlateArmor();   break;
 				}
 				//50%:tier2, 30%:tier3, 15%:tier4, 5%:tier5
-				int wepTier = Random.chances(new float[]{0, 10, 6, 3, 1});
+				int wepTier = Random.chances(new float[]{0, 0, 10, 6, 3, 1});
 				Generator.Category c = Generator.wepTiers[wepTier - 1];
 				weapon = (MeleeWeapon) Reflection.newInstance(c.classes[Random.chances(c.probs)]);
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Paralysis.java
Patch:
@@ -82,8 +82,8 @@ public float iconFadePercent() {
 
 	@Override
 	public void fx(boolean on) {
-		if (on) target.sprite.add(CharSprite.State.PARALYSED);
-		else target.sprite.remove(CharSprite.State.PARALYSED);
+		if (on)                         target.sprite.add(CharSprite.State.PARALYSED);
+		else if (target.paralysed <= 1) target.sprite.remove(CharSprite.State.PARALYSED);
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/CharSprite.java
Patch:
@@ -82,6 +82,7 @@ public class CharSprite extends MovieClip implements Tweener.Listener, MovieClip
 	public enum State {
 		BURNING, LEVITATING, INVISIBLE, PARALYSED, FROZEN, ILLUMINATED, CHILLED, DARKENED, MARKED, HEALING, SHIELDED
 	}
+	private int stunStates = 0;
 	
 	protected Animation idle;
 	protected Animation run;
@@ -369,7 +370,6 @@ public void add( State state ) {
 				break;
 			case FROZEN:
 				iceBlock = IceBlock.freeze( this );
-				paused = true;
 				break;
 			case ILLUMINATED:
 				GameScene.effect( light = new TorchHalo( this ) );
@@ -417,14 +417,13 @@ public void remove( State state ) {
 				alpha( 1f );
 				break;
 			case PARALYSED:
-				paused = false;
+				if (iceBlock != null) paused = false;
 				break;
 			case FROZEN:
 				if (iceBlock != null) {
 					iceBlock.melt();
 					iceBlock = null;
 				}
-				paused = false;
 				break;
 			case ILLUMINATED:
 				if (light != null) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Generator.java
Patch:
@@ -461,7 +461,7 @@ public static int order( Item item ) {
 	}
 
 	private static final float[][] floorSetTierProbs = new float[][] {
-			{0, 70, 20,  8,  2},
+			{0, 75, 20,  4,  1},
 			{0, 25, 50, 20,  5},
 			{0,  0, 40, 50, 10},
 			{0,  0, 20, 40, 40},

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndSadGhost.java
Patch:
@@ -72,7 +72,7 @@ public WndSadGhost( final Ghost ghost, final int type ) {
 		message.setPos(0, titlebar.bottom() + GAP);
 		add( message );
 		
-		RedButton btnWeapon = new RedButton( Messages.get(this, "weapon") ) {
+		RedButton btnWeapon = new RedButton( Ghost.Quest.weapon.trueName() + "  :" + Ghost.Quest.weapon.STRReq(0) ) {
 			@Override
 			protected void onClick() {
 				selectReward( ghost, Ghost.Quest.weapon );
@@ -81,7 +81,7 @@ protected void onClick() {
 		btnWeapon.setRect( 0, message.top() + message.height() + GAP, WIDTH, BTN_HEIGHT );
 		add( btnWeapon );
 
-		RedButton btnArmor = new RedButton( Messages.get(this, "armor") ) {
+		RedButton btnArmor = new RedButton( Ghost.Quest.armor.trueName() + "  :" + Ghost.Quest.armor.STRReq(0) ) {
 			@Override
 			protected void onClick() {
 				selectReward(ghost, Ghost.Quest.armor);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/ShieldBuff.java
Patch:
@@ -53,7 +53,7 @@ public void setShield( int shield ) {
 	}
 
 	public void setShield( int shield, float delay ) {
-		this.shielding = shield;
+		if (this.shielding <= shield) this.shielding = shield;
 		if (target != null) target.needsShieldUpdate = true;
 		spend(delay);
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/BrokenSeal.java
Patch:
@@ -150,7 +150,7 @@ public int absorbDamage(int dmg) {
 				dmg = 0;
 			} else {
 				dmg -= shielding();
-				setShield(0);
+				decShield(shielding());
 			}
 			return dmg;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1449,7 +1449,7 @@ public void earnExp( int exp, Class source ) {
 				GLog.p( Messages.get(this, "new_level") );
 				sprite.showStatus( CharSprite.POSITIVE, Messages.get(Hero.class, "level_up") );
 				Sample.INSTANCE.play( Assets.Sounds.LEVELUP );
-				if (talentPointsAvailable() > 0){
+				if (lvl <= 6){
 					GLog.newLine();
 					GLog.p( Messages.get(this, "new_talent") );
 					StatusPane.talentBlink = 10f;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Elemental.java
Patch:
@@ -98,7 +98,7 @@ protected boolean canAttack( Char enemy ) {
 	
 	protected boolean doAttack( Char enemy ) {
 		
-		if (Dungeon.level.adjacent( pos, enemy.pos )) {
+		if (Dungeon.level.adjacent( pos, enemy.pos ) || rangedCooldown > 0) {
 			
 			return super.doAttack( enemy );
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/ForceCube.java
Patch:
@@ -58,6 +58,7 @@ protected void onThrow(int cell) {
 			return;
 		}
 
+		rangedHit( null, cell );
 		Dungeon.level.pressCell(cell);
 		
 		ArrayList<Char> targets = new ArrayList<>();
@@ -76,8 +77,6 @@ protected void onThrow(int cell) {
 			}
 		}
 		
-		rangedHit( null, cell );
-		
 		WandOfBlastWave.BlastWave.blast(cell);
 		Sample.INSTANCE.play( Assets.Sounds.BLAST );
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Badges.java
Patch:
@@ -803,6 +803,7 @@ public static void validateHappyEnd() {
 	}
 
 	public static void validateChampion( int challenges ) {
+		if (challenges == 0) return;
 		Badge badge = null;
 		if (challenges >= 1) {
 			badge = Badge.CHAMPION_1;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/MobSprite.java
Patch:
@@ -36,7 +36,7 @@ public class MobSprite extends CharSprite {
 	
 	@Override
 	public void update() {
-		sleeping = ch != null && ((Mob)ch).state == ((Mob)ch).SLEEPING;
+		sleeping = ch != null && ch.isAlive() && ((Mob)ch).state == ((Mob)ch).SLEEPING;
 		super.update();
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/Scroll.java
Patch:
@@ -195,9 +195,9 @@ public void execute( Hero hero, String action ) {
 	public abstract void doRead();
 
 	protected void readAnimation() {
+		Invisibility.dispel();
 		curUser.spend( TIME_TO_READ );
 		curUser.busy();
-		Invisibility.dispel();
 		((HeroSprite)curUser.sprite).read();
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/GreatCrab.java
Patch:
@@ -47,6 +47,9 @@ public class GreatCrab extends Crab {
 
 		state = WANDERING;
 
+		loot = new MysteryMeat().quantity(2);
+		lootChance = 1f;
+
 		properties.add(Property.MINIBOSS);
 	}
 
@@ -85,8 +88,5 @@ public void die( Object cause ) {
 		super.die( cause );
 
 		Ghost.Quest.process();
-
-		Dungeon.level.drop( new MysteryMeat(), pos );
-		Dungeon.level.drop( new MysteryMeat(), pos ).sprite.drop();
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -684,7 +684,7 @@ public void buildFlagMaps() {
 	public void destroy( int pos ) {
 		//if raw tile type is flammable or empty
 		int terr = map[pos];
-		if (terr == Terrain.EMPTY || terr == Terrain.EMPTY_SP
+		if (terr == Terrain.EMPTY || terr == Terrain.EMPTY_DECO
 				|| (Terrain.flags[map[pos]] & Terrain.FLAMABLE) != 0) {
 			set(pos, Terrain.EMBERS);
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/EquipableItem.java
Patch:
@@ -26,7 +26,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MagicImmune;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
-import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent;
 import com.shatteredpixel.shatteredpixeldungeon.effects.particles.ShadowParticle;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
@@ -119,8 +118,6 @@ public boolean doUnequip( Hero hero, boolean collect, boolean single ) {
 			if (collect) Dungeon.level.drop( this, hero.pos );
 		}
 
-		Talent.onItemEquipped(hero, this);
-
 		return true;
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/KindOfWeapon.java
Patch:
@@ -26,6 +26,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
+import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.utils.BArray;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
@@ -54,7 +55,7 @@ public boolean doEquip( Hero hero ) {
 			
 			hero.belongings.weapon = this;
 			activate( hero );
-
+			Talent.onItemEquipped(hero, this);
 			updateQuickslot();
 			
 			cursedKnown = true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/KindofMisc.java
Patch:
@@ -23,6 +23,7 @@
 
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
+import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent;
 import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact;
 import com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
@@ -118,6 +119,7 @@ protected boolean enabled(int index) {
 
 			detach( hero.belongings.backpack );
 
+			Talent.onItemEquipped(hero, this);
 			activate( hero );
 
 			cursedKnown = true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/Armor.java
Patch:
@@ -199,7 +199,7 @@ public boolean doEquip( Hero hero ) {
 			
 			((HeroSprite)hero.sprite).updateArmor();
 			activate(hero);
-
+			Talent.onItemEquipped(hero, this);
 			hero.spendAndNext( time2equip( hero ) );
 			return true;
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Spinner.java
Patch:
@@ -173,7 +173,7 @@ public int webPos(){
 		//ensure we aren't shooting the web through walls
 		int projectilePos = new Ballistica( pos, webPos, Ballistica.STOP_TARGET | Ballistica.STOP_SOLID).collisionPos;
 		
-		if (projectilePos == webPos && Dungeon.level.passable[webPos]){
+		if (webPos != enemy.pos && projectilePos == webPos && Dungeon.level.passable[webPos]){
 			return webPos;
 		} else {
 			return -1;
@@ -183,7 +183,7 @@ public int webPos(){
 	
 	public void shootWeb(){
 		int webPos = webPos();
-		if (enemy != null && webPos != enemy.pos && webPos != -1){
+		if (webPos != -1){
 			int i;
 			for ( i = 0; i < PathFinder.CIRCLE8.length; i++){
 				if ((enemy.pos + PathFinder.CIRCLE8[i]) == webPos){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/TalentButton.java
Patch:
@@ -108,14 +108,14 @@ protected void onClick() {
 				&& Dungeon.hero != null
 				&& Dungeon.hero.talentPointsAvailable() > 0
 				&& Dungeon.hero.pointsInTalent(talent) < talent.maxPoints()){
-			ShatteredPixelDungeon.scene().addToFront(new WndInfoTalent(talent, new Callback() {
+			ShatteredPixelDungeon.scene().addToFront(new WndInfoTalent(talent, pointsInTalent, new Callback() {
 				@Override
 				public void call() {
 					upgradeTalent();
 				}
 			}));
 		} else {
-			ShatteredPixelDungeon.scene().addToFront(new WndInfoTalent(talent, null));
+			ShatteredPixelDungeon.scene().addToFront(new WndInfoTalent(talent, pointsInTalent, null));
 		}
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/EquipableItem.java
Patch:
@@ -60,9 +60,6 @@ public void execute( Hero hero, String action ) {
 			//This is a special case as the item is being removed from inventory, but is staying with the hero.
 			int slot = Dungeon.quickslot.getSlot( this );
 			doEquip(hero);
-			if (isEquipped(hero)){
-				Talent.onItemEquipped(hero, this);
-			}
 			if (slot != -1) {
 				Dungeon.quickslot.setSlot( slot, this );
 				updateQuickslot();
@@ -122,6 +119,8 @@ public boolean doUnequip( Hero hero, boolean collect, boolean single ) {
 			if (collect) Dungeon.level.drop( this, hero.pos );
 		}
 
+		Talent.onItemEquipped(hero, this);
+
 		return true;
 	}
 

File: SPD-classes/src/main/java/com/watabou/noosa/Game.java
Patch:
@@ -31,6 +31,7 @@
 import com.watabou.glwrap.Blending;
 import com.watabou.glwrap.Vertexbuffer;
 import com.watabou.input.InputHandler;
+import com.watabou.input.PointerEvent;
 import com.watabou.noosa.audio.Music;
 import com.watabou.noosa.audio.Sample;
 import com.watabou.utils.Callback;
@@ -154,6 +155,8 @@ public void render() {
 	@Override
 	public void pause() {
 		paused = true;
+
+		PointerEvent.clearPointerEvents();
 		
 		if (scene != null) {
 			scene.onPause();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TalismanOfForesight.java
Patch:
@@ -211,7 +211,7 @@ public void onSelect(Integer target) {
 				GameScene.updateFog();
 
 				curUser.sprite.zap(target);
-				curUser.spend(Actor.TICK);
+				curUser.spendAndNext(Actor.TICK);
 				Sample.INSTANCE.play(Assets.Sounds.SCAN);
 				if (noticed) Sample.INSTANCE.play(Assets.Sounds.SECRET);
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/Potion.java
Patch:
@@ -374,7 +374,7 @@ public Item identify() {
 			setKnown();
 			//3/5 HP healed
 			Hero hero = Dungeon.hero;
-			if (hero.hasTalent(Talent.TEST_SUBJECT)) {
+			if (hero.isAlive() && hero.hasTalent(Talent.TEST_SUBJECT)) {
 				hero.HP = Math.min(hero.HP + 1 + (2 * hero.pointsInTalent(Talent.TEST_SUBJECT)), hero.HT);
 				Emitter e = hero.sprite.emitter();
 				if (e != null) e.burst(Speck.factory(Speck.HEALING), hero.pointsInTalent(Talent.TEST_SUBJECT));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/Scroll.java
Patch:
@@ -225,7 +225,7 @@ public Item identify() {
 			setKnown();
 			//6/9 HP barrier
 			Hero hero = Dungeon.hero;
-			if (hero.hasTalent(Talent.TESTED_HYPOTHESIS)) {
+			if (hero.isAlive() && hero.hasTalent(Talent.TESTED_HYPOTHESIS)) {
 				Buff.affect(hero, Barrier.class).setShield(3 + (3 * hero.pointsInTalent(Talent.TESTED_HYPOTHESIS)));
 				ScrollOfRecharging.charge(hero);
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -824,7 +824,7 @@ public static void add( CustomTilemap t, boolean wall ){
 	}
 	
 	public static void effect( Visual effect ) {
-		scene.effects.add( effect );
+		if (scene != null) scene.effects.add( effect );
 	}
 
 	public static void effectOverFog( Visual effect ) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/CharSprite.java
Patch:
@@ -302,19 +302,19 @@ public void die() {
 	
 	public Emitter emitter() {
 		Emitter emitter = GameScene.emitter();
-		emitter.pos( this );
+		if (emitter != null) emitter.pos( this );
 		return emitter;
 	}
 	
 	public Emitter centerEmitter() {
 		Emitter emitter = GameScene.emitter();
-		emitter.pos( center() );
+		if (emitter != null) emitter.pos( center() );
 		return emitter;
 	}
 	
 	public Emitter bottomEmitter() {
 		Emitter emitter = GameScene.emitter();
-		emitter.pos( x, y + height, width, 0 );
+		if (emitter != null) emitter.pos( x, y + height, width, 0 );
 		return emitter;
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/ChampionEnemy.java
Patch:
@@ -121,7 +121,7 @@ public void onAttackProc(Char enemy) {
 		public void detach() {
 			for (int i : PathFinder.NEIGHBOURS9){
 				if (!Dungeon.level.solid[target.pos+i]){
-					GameScene.add(Blob.seed(target.pos+i, 8, Fire.class));
+					GameScene.add(Blob.seed(target.pos+i, 2, Fire.class));
 				}
 			}
 			super.detach();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Challenges.java
Patch:
@@ -44,8 +44,8 @@ public class Challenges {
 			"no_armor",
 			"no_healing",
 			"no_herbalism",
-			"darkness",
 			"swarm_intelligence",
+			"darkness",
 			"no_scrolls"
 	};
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Thief.java
Patch:
@@ -150,7 +150,7 @@ protected boolean steal( Hero hero ) {
 
 			GLog.w( Messages.get(Thief.class, "stole", toSteal.name()) );
 			if (!toSteal.stackable) {
-				Dungeon.quickslot.convertToPlaceholder(item);
+				Dungeon.quickslot.convertToPlaceholder(toSteal);
 			}
 			Item.updateQuickslot();
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/Potion.java
Patch:
@@ -72,6 +72,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.windows.WndOptions;
 import com.shatteredpixel.shatteredpixeldungeon.windows.WndUseItem;
 import com.watabou.noosa.audio.Sample;
+import com.watabou.noosa.particles.Emitter;
 import com.watabou.utils.Bundle;
 import com.watabou.utils.Random;
 import com.watabou.utils.Reflection;
@@ -375,7 +376,8 @@ public Item identify() {
 			Hero hero = Dungeon.hero;
 			if (hero.hasTalent(Talent.TEST_SUBJECT)) {
 				hero.HP = Math.min(hero.HP + 1 + (2 * hero.pointsInTalent(Talent.TEST_SUBJECT)), hero.HT);
-				hero.sprite.emitter().burst(Speck.factory(Speck.HEALING), hero.pointsInTalent(Talent.TEST_SUBJECT));
+				Emitter e = hero.sprite.emitter();
+				if (e != null) e.burst(Speck.factory(Speck.HEALING), hero.pointsInTalent(Talent.TEST_SUBJECT));
 			}
 		}
 		return super.identify();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfRecharging.java
Patch:
@@ -31,6 +31,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
 import com.watabou.noosa.audio.Sample;
+import com.watabou.noosa.particles.Emitter;
 
 public class ScrollOfRecharging extends Scroll {
 
@@ -55,7 +56,8 @@ public void doRead() {
 	}
 	
 	public static void charge( Char user ) {
-		user.sprite.centerEmitter().burst( EnergyParticle.FACTORY, 15 );
+		Emitter e = user.sprite.centerEmitter();
+		if (e != null) e.burst( EnergyParticle.FACTORY, 15 );
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
Patch:
@@ -130,7 +130,7 @@ public static void onFoodEaten( Hero hero, float foodVal ){
 			//eating food takes 1 turn, instead of 3
 			hero.spend(-2);
 			//effectively 2/3 turns of haste
-			Buff.affect( hero, Haste.class, 2+hero.pointsInTalent(INVIGORATING_MEAL));
+			Buff.affect( hero, Haste.class, 1.67f+hero.pointsInTalent(INVIGORATING_MEAL));
 			//TODO VFX
 		}
 	}
@@ -153,7 +153,7 @@ public static float itemIDSpeedFactor( Hero hero, Item item ){
 	}
 
 	public static void onItemEquipped( Hero hero, Item item ){
-		if (hero.hasTalent(ARMSMASTERS_INTUITION) && (item instanceof Weapon || item instanceof Armor)){
+		if (hero.pointsInTalent(ARMSMASTERS_INTUITION) == 2 && (item instanceof Weapon || item instanceof Armor)){
 			item.identify();
 		}
 		if (hero.hasTalent(THIEFS_INTUITION) && item instanceof Ring){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/secret/SecretMazeRoom.java
Patch:
@@ -102,6 +102,7 @@ public void paint(Level level) {
 				prize = Generator.randomArmor((Dungeon.depth / 5) + 1);
 			}
 		} while (prize.cursed || Challenges.isItemBlocked(prize));
+		prize.cursedKnown = true;
 		
 		//33% chance for an extra update.
 		if (Random.Int(3) == 0){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/NewDM300.java
Patch:
@@ -461,6 +461,7 @@ public void supercharge(){
 		spend(3f);
 		yell(Messages.get(this, "charging"));
 		sprite.showStatus(CharSprite.POSITIVE, Messages.get(this, "invulnerable"));
+		((DM300Sprite)sprite).updateChargeState(true);
 		((DM300Sprite)sprite).charge();
 		chargeAnnounced = false;
 
@@ -472,7 +473,7 @@ public boolean isSupercharged(){
 
 	public void loseSupercharge(){
 		supercharged = false;
-		sprite.resetColor();
+		((DM300Sprite)sprite).updateChargeState(false);
 
 		if (pylonsActivated < 2){
 			yell(Messages.get(this, "charge_lost"));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM201.java
Patch:
@@ -64,7 +64,7 @@ protected boolean act() {
 		}
 
 		GameScene.add(Blob.seed(pos, 0, CorrosiveGas.class));
-		if (state == HUNTING && enemy != null && enemySeen
+		if (paralysed <= 0 && state == HUNTING && enemy != null && enemySeen
 				&& threatened && !Dungeon.level.adjacent(pos, enemy.pos) && fieldOfView[enemy.pos]){
 			enemySeen = enemy.isAlive() && fieldOfView[enemy.pos] && enemy.invisible <= 0;
 			if (sprite != null && (sprite.visible || enemy.sprite.visible)) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mimic.java
Patch:
@@ -177,6 +177,7 @@ public void damage(int dmg, Object src) {
 
 	public void stopHiding(){
 		state = HUNTING;
+		if (sprite != null) sprite.idle();
 		if (Actor.chars().contains(this) && Dungeon.level.heroFOV[pos]) {
 			enemy = Dungeon.hero;
 			target = Dungeon.hero.pos;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Degrade.java
Patch:
@@ -22,6 +22,7 @@
 package com.shatteredpixel.shatteredpixeldungeon.actors.buffs;
 
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
+import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.ui.BuffIndicator;
@@ -39,6 +40,7 @@ public class Degrade extends FlavourBuff {
 	public boolean attachTo(Char target) {
 		if (super.attachTo(target)){
 			Item.updateQuickslot();
+			if (target instanceof Hero) ((Hero) target).updateHT(false);
 			return true;
 		}
 		return false;
@@ -47,6 +49,7 @@ public boolean attachTo(Char target) {
 	@Override
 	public void detach() {
 		super.detach();
+		if (target instanceof Hero) ((Hero) target).updateHT(false);
 		Item.updateQuickslot();
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Generator.java
Patch:
@@ -609,7 +609,7 @@ public static Artifact randomArtifact() {
 	public static boolean removeArtifact(Class<?extends Artifact> artifact) {
 		Category cat = Category.ARTIFACT;
 		for (int i = 0; i < cat.classes.length; i++){
-			if (cat.classes[i].equals(artifact)) {
+			if (cat.classes[i].equals(artifact) && cat.probs[i] > 0) {
 				cat.probs[i] = 0;
 				return true;
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Shopkeeper.java
Patch:
@@ -103,7 +103,7 @@ public static WndBag sell() {
 	}
 
 	public static boolean willBuyItem( Item item ){
-		if (item.value() < 0)                                               return false;
+		if (item.value() <= 0)                                               return false;
 		if (item.unique && !item.stackable)                                 return false;
 		if (item instanceof Armor && ((Armor) item).checkSeal() != null)    return false;
 		if (item.isEquipped(Dungeon.hero) && item.cursed)                   return false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/enchantments/Elastic.java
Patch:
@@ -23,6 +23,7 @@
 
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfBlastWave;
+import com.shatteredpixel.shatteredpixeldungeon.items.weapon.SpiritBow;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.Weapon;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon;
 import com.shatteredpixel.shatteredpixeldungeon.mechanics.Ballistica;
@@ -46,7 +47,7 @@ public int proc(Weapon weapon, Char attacker, Char defender, int damage ) {
 			//trim it to just be the part that goes past them
 			trajectory = new Ballistica(trajectory.collisionPos, trajectory.path.get(trajectory.path.size()-1), Ballistica.PROJECTILE);
 			//knock them back along that ballistica
-			WandOfBlastWave.throwChar(defender, trajectory, 2, !(weapon instanceof MissileWeapon));
+			WandOfBlastWave.throwChar(defender, trajectory, 2, !(weapon instanceof MissileWeapon || weapon instanceof SpiritBow));
 		}
 		
 		return damage;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Elemental.java
Patch:
@@ -29,6 +29,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Burning;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Chill;
+import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Lightning;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Splash;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfFrost;
@@ -213,6 +214,7 @@ public static class NewbornFireElemental extends FireElemental {
 			defenseSkill = 12;
 			
 			EXP = 7;
+			maxLvl = Hero.MAX_LEVEL;
 			
 			loot = new Embers();
 			lootChance = 1f;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/NewCityBossLevel.java
Patch:
@@ -406,7 +406,9 @@ public Tilemap create() {
 					data[i] = 15*8 + 5;
 
 				//ground tiles
-				} else if (map[i] == Terrain.EMPTY || map[i] == Terrain.EMPTY_DECO){
+				} else if (map[i] == Terrain.EMPTY || map[i] == Terrain.EMPTY_DECO
+						|| map[i] == Terrain.EMBERS || map[i] == Terrain.GRASS
+						|| map[i] == Terrain.HIGH_GRASS || map[i] == Terrain.FURROWED_GRASS){
 
 					//final ground stiching with city tiles
 					if (i/tileW == 21){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -945,7 +945,7 @@ private void pressCell( int cell, boolean hard ) {
 		case Terrain.SECRET_TRAP:
 			if (hard) {
 				trap = traps.get( cell );
-				GLog.i(Messages.get(Level.class, "hidden_trap", trap.name));
+				GLog.i(Messages.get(Level.class, "hidden_trap", trap.name()));
 			}
 			break;
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/NewPrisonBossLevel.java
Patch:
@@ -689,7 +689,7 @@ public Tilemap create() {
 		public String name(int tileX, int tileY) {
 			int cell = (this.tileX+tileX) + Dungeon.level.width()*(this.tileY+tileY);
 			if (Dungeon.level.traps.get(cell) != null){
-				return Messages.titleCase(Dungeon.level.traps.get(cell).name);
+				return Messages.titleCase(Dungeon.level.traps.get(cell).name());
 			}
 			return super.name(tileX, tileY);
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -1091,7 +1091,7 @@ public static void examineCell( Integer cell ) {
 		Trap trap = Dungeon.level.traps.get( cell );
 		if (trap != null && trap.visible) {
 			objects.add(trap);
-			names.add(Messages.titleCase( trap.name ));
+			names.add(Messages.titleCase( trap.name() ));
 		}
 
 		if (objects.isEmpty()) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndInfoTrap.java
Patch:
@@ -31,7 +31,7 @@ public class WndInfoTrap extends WndTitledMessage {
 	public WndInfoTrap(Trap trap) {
 
 		super(TerrainFeaturesTilemap.tile( trap.pos, Dungeon.level.map[trap.pos]),
-				Messages.titleCase(trap.name),
+				Messages.titleCase(trap.name()),
 				(!trap.active ? Messages.get(WndInfoTrap.class, "inactive") + "\n\n" : "") + trap.desc());
 
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/AquaBlast.java
Patch:
@@ -56,7 +56,7 @@ protected void affectTarget(Ballistica bolt, Hero hero) {
 		
 		if (target != null && target != hero){
 			//just enough to skip their current turn
-			Buff.affect(target, Paralysis.class, 0f);
+			Buff.affect(target, Paralysis.class, target.cooldown());
 		}
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/CrystalMimic.java
Patch:
@@ -188,11 +188,13 @@ protected void nowhereToRun() {
 				if (enemySeen) {
 					sprite.showStatus(CharSprite.NEGATIVE, Messages.get(Mob.class, "rage"));
 					state = HUNTING;
-				} else {
+				} else if (!Dungeon.level.heroFOV[pos] && Dungeon.level.distance(Dungeon.hero.pos, pos) >= 6) {
 					GLog.n( Messages.get(CrystalMimic.class, "escaped"));
 					if (Dungeon.level.heroFOV[pos]) CellEmitter.get(pos).burst(Speck.factory(Speck.WOOL), 6);
 					destroy();
 					sprite.killAndErase();
+				} else {
+					state = WANDERING;
 				}
 			} else {
 				super.nowhereToRun();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/HeroSelectScene.java
Patch:
@@ -275,7 +275,7 @@ private void resetFade(){
 
 	@Override
 	protected void onBackPressed() {
-		if (!SPDSettings.intro() && Rankings.INSTANCE.totalNumber == 0){
+		if (btnExit.visible){
 			ShatteredPixelDungeon.switchScene(TitleScene.class);
 		} else {
 			super.onBackPressed();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfFrost.java
Patch:
@@ -72,7 +72,7 @@ protected void onZap(Ballistica bolt) {
 			if (ch.buff(Chill.class) != null){
 				//6.67% less damage per turn of chill remaining, to a max of 10 turns (50% dmg)
 				float chillturns = Math.min(10, ch.buff(Chill.class).cooldown());
-				damage = (int)Math.round(damage * Math.pow(0.9633f, chillturns));
+				damage = (int)Math.round(damage * Math.pow(0.9333f, chillturns));
 			} else {
 				ch.sprite.burst( 0xFF99CCFF, buffedLvl() / 2 + 2 );
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Piranha.java
Patch:
@@ -26,6 +26,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.Statistics;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Burning;
+import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.items.food.MysteryMeat;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.PiranhaSprite;
 import com.watabou.utils.PathFinder;
@@ -87,7 +88,7 @@ public int drRoll() {
 
 	@Override
 	public boolean surprisedBy(Char enemy) {
-		if (enemy == Dungeon.hero){
+		if (enemy == Dungeon.hero && ((Hero)enemy).canSurpriseAttack()){
 			if (fieldOfView == null || fieldOfView.length != Dungeon.level.length()){
 				fieldOfView = new boolean[Dungeon.level.length()];
 				Dungeon.level.updateFieldOfView( this, fieldOfView );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -778,8 +778,8 @@ public static void discard( Heap heap ) {
 	
 	public static void add( Mob mob ) {
 		Dungeon.level.mobs.add( mob );
-		Actor.add( mob );
 		scene.addMobSprite( mob );
+		Actor.add( mob );
 	}
 
 	public static void addSprite( Mob mob ) {
@@ -788,8 +788,8 @@ public static void addSprite( Mob mob ) {
 	
 	public static void add( Mob mob, float delay ) {
 		Dungeon.level.mobs.add( mob );
-		Actor.addDelayed( mob, delay );
 		scene.addMobSprite( mob );
+		Actor.addDelayed( mob, delay );
 	}
 	
 	public static void add( EmoIcon icon ) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Eye.java
Patch:
@@ -64,7 +64,7 @@ public class Eye extends Mob {
 
 	@Override
 	public int damageRoll() {
-		return Random.NormalIntRange(0, 0);
+		return Random.NormalIntRange(20, 30);
 	}
 
 	@Override
@@ -175,7 +175,7 @@ public void deathGaze(){
 			}
 
 			if (hit( this, ch, true )) {
-				ch.damage( Random.NormalIntRange( 0, 0 ), new DeathGaze() );
+				ch.damage( Random.NormalIntRange( 30, 50 ), new DeathGaze() );
 
 				if (Dungeon.level.heroFOV[pos]) {
 					ch.sprite.flash();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndBag.java
Patch:
@@ -60,7 +60,6 @@
 import com.watabou.input.KeyBindings;
 import com.watabou.input.KeyEvent;
 import com.watabou.noosa.BitmapText;
-import com.watabou.noosa.Camera;
 import com.watabou.noosa.ColorBlock;
 import com.watabou.noosa.Game;
 import com.watabou.noosa.Image;
@@ -152,12 +151,12 @@ public WndBag( Bag bag, Listener listener, Mode mode, String title ) {
 		int windowHeight = TITLE_HEIGHT + slotHeight * nRows + SLOT_MARGIN * (nRows - 1);
 
 		if (PixelScene.landscape()){
-			while (windowHeight + 20 > Camera.main.height){
+			while (windowHeight + 20 > PixelScene.uiCamera.height){
 				slotHeight--;
 				windowHeight -= nRows;
 			}
 		} else {
-			while (windowWidth > Camera.main.width){
+			while (windowWidth > PixelScene.uiCamera.width){
 				slotWidth--;
 				windowWidth -= nCols;
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/SpiritBow.java
Patch:
@@ -169,7 +169,7 @@ public int damageRoll(Char owner) {
 					//as distance increases so does damage, capping at 3x:
 					//1.20x|1.35x|1.52x|1.71x|1.92x|2.16x|2.43x|2.74x|3.00x
 					int distance = Dungeon.level.distance(owner.pos, targetPos) - 1;
-					float multiplier = Math.min(2.5f, 1.2f * (float)Math.pow(1.125f, distance));
+					float multiplier = Math.min(3f, 1.2f * (float)Math.pow(1.125f, distance));
 					damage = Math.round(damage * multiplier);
 					break;
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Eye.java
Patch:
@@ -25,7 +25,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Light;
-import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Terror;
 import com.shatteredpixel.shatteredpixeldungeon.effects.CellEmitter;
 import com.shatteredpixel.shatteredpixeldungeon.effects.particles.PurpleParticle;
 import com.shatteredpixel.shatteredpixeldungeon.items.Dewdrop;
@@ -104,6 +103,7 @@ protected boolean canAttack( Char enemy ) {
 	protected boolean act() {
 		if (beamCharged && state != HUNTING){
 			beamCharged = false;
+			sprite.idle();
 		}
 		if (beam == null && beamTarget != -1) {
 			beam = new Ballistica(pos, beamTarget, Ballistica.STOP_TERRAIN);
@@ -243,7 +243,7 @@ public void restoreFromBundle(Bundle bundle) {
 	}
 	
 	{
-		immunities.add( Terror.class );
+		//immunities.add( Terror.class );
 	}
 
 	private class Hunting extends Mob.Hunting{

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -771,7 +771,7 @@ public boolean act( boolean enemyInFOV, boolean justAlerted ) {
 				state = HUNTING;
 				target = enemy.pos;
 
-				if (Dungeon.isChallenged( Challenges.SWARM_INTELLIGENCE )) {
+				if (alignment == Alignment.ENEMY && Dungeon.isChallenged( Challenges.SWARM_INTELLIGENCE )) {
 					for (Mob mob : Dungeon.level.mobs) {
 						if (Dungeon.level.distance(pos, mob.pos) <= 8 && mob.state != mob.HUNTING) {
 							mob.beckon( target );
@@ -817,7 +817,7 @@ protected boolean noticeEnemy(){
 			state = HUNTING;
 			target = enemy.pos;
 			
-			if (Dungeon.isChallenged( Challenges.SWARM_INTELLIGENCE )) {
+			if (alignment == Alignment.ENEMY && Dungeon.isChallenged( Challenges.SWARM_INTELLIGENCE )) {
 				for (Mob mob : Dungeon.level.mobs) {
 					if (Dungeon.level.distance(pos, mob.pos) <= 8 && mob.state != mob.HUNTING) {
 						mob.beckon( target );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Eye.java
Patch:
@@ -65,7 +65,7 @@ public class Eye extends Mob {
 
 	@Override
 	public int damageRoll() {
-		return Random.NormalIntRange(20, 30);
+		return Random.NormalIntRange(0, 0);
 	}
 
 	@Override
@@ -133,6 +133,7 @@ protected boolean doAttack( Char enemy ) {
 				sprite.zap( beam.collisionPos );
 				return false;
 			} else {
+				sprite.idle();
 				deathGaze();
 				return true;
 			}
@@ -174,7 +175,7 @@ public void deathGaze(){
 			}
 
 			if (hit( this, ch, true )) {
-				ch.damage( Random.NormalIntRange( 30, 50 ), new DeathGaze() );
+				ch.damage( Random.NormalIntRange( 0, 0 ), new DeathGaze() );
 
 				if (Dungeon.level.heroFOV[pos]) {
 					ch.sprite.flash();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MagesStaff.java
Patch:
@@ -266,7 +266,8 @@ public String name() {
 		if (wand == null) {
 			return super.name();
 		} else {
-			return Messages.get(wand, "staff_name");
+			String name = Messages.get(wand, "staff_name");
+			return enchantment != null && (cursedKnown || !enchantment.curse()) ? enchantment.name( name ) : name;
 		}
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SpecialRoom.java
Patch:
@@ -30,7 +30,6 @@
 
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Collections;
 
 public abstract class SpecialRoom extends Room {
 	
@@ -168,7 +167,9 @@ public static SpecialRoom createRoom(){
 	public static void restoreRoomsFromBundle( Bundle bundle ) {
 		runSpecials.clear();
 		if (bundle.contains( ROOMS )) {
-			Collections.addAll(runSpecials, bundle.getClassArray(ROOMS));
+			for (Class<? extends Room> type : bundle.getClassArray(ROOMS)) {
+				runSpecials.add(type);
+			}
 		} else {
 			initForRun();
 			ShatteredPixelDungeon.reportException(new Exception("specials array didn't exist!"));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/KindofMisc.java
Patch:
@@ -95,6 +95,7 @@ protected void onSelect(int index) {
 								collect();
 							}
 							if (slot != -1) Dungeon.quickslot.setSlot(slot, KindofMisc.this);
+							updateQuickslot();
 						}
 
 						@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Blacksmith.java
Patch:
@@ -63,7 +63,6 @@ public class Blacksmith extends NPC {
 	
 	@Override
 	protected boolean act() {
-		throwItem();
 		if (Dungeon.level.heroFOV[pos] && !Quest.reforged){
 			Notes.add( Notes.Landmark.TROLL );
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Imp.java
Patch:
@@ -66,8 +66,6 @@ protected boolean act() {
 			seenBefore = false;
 		}
 		
-		throwItem();
-		
 		return super.act();
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Shopkeeper.java
Patch:
@@ -49,15 +49,13 @@ public class Shopkeeper extends NPC {
 	@Override
 	protected boolean act() {
 
-		throwItem();
-
 		if (Dungeon.level.heroFOV[pos]){
 			Notes.add(Notes.Landmark.SHOP);
 		}
 		
 		sprite.turnTo( pos, Dungeon.hero.pos );
 		spend( TICK );
-		return true;
+		return super.act();
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
Patch:
@@ -60,7 +60,6 @@ public class Wandmaker extends NPC {
 	
 	@Override
 	protected boolean act() {
-		throwItem();
 		if (Dungeon.level.heroFOV[pos] && Quest.wand1 != null){
 			Notes.add( Notes.Landmark.WANDMAKER );
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfRegrowth.java
Patch:
@@ -374,7 +374,6 @@ public boolean canInteract(Char c) {
 		@Override
 		protected boolean act() {
 			super.act();
-			throwItem();
 
 			if (--HP <= 0){
 				destroy();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfRegrowth.java
Patch:
@@ -381,7 +381,6 @@ protected boolean act() {
 				sprite.die();
 			}
 
-			spend(TICK);
 			return true;
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/HeroSelectScene.java
Patch:
@@ -201,7 +201,7 @@ public void update() {
 		btnExit = new ExitButton();
 		btnExit.setPos( Camera.main.width - btnExit.width(), 0 );
 		add( btnExit );
-		btnExit.visible = SPDSettings.intro() || Rankings.INSTANCE.totalNumber > 0;
+		btnExit.visible = !SPDSettings.intro() || Rankings.INSTANCE.totalNumber > 0;
 
 		PointerArea fadeResetter = new PointerArea(0, 0, Camera.main.width, Camera.main.height){
 			@Override
@@ -248,7 +248,7 @@ private void setSelectedHero(HeroClass cl){
 	@Override
 	public void update() {
 		super.update();
-		btnExit.visible = SPDSettings.intro() || Rankings.INSTANCE.totalNumber > 0;
+		btnExit.visible = !SPDSettings.intro() || Rankings.INSTANCE.totalNumber > 0;
 		//do not fade when a window is open
 		for (Object v : members){
 			if (v instanceof Window) resetFade();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/SandalsOfNature.java
Patch:
@@ -108,7 +108,8 @@ public void charge(Hero target) {
 
 	@Override
 	public String name() {
-		return Messages.get(this, "name_" + (level()+1));
+		if (level() == 0)   return super.name();
+		else                return Messages.get(this, "name_" + level());
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/RegularLevel.java
Patch:
@@ -411,7 +411,7 @@ protected void createItems() {
 
 		//chance to find a page scales with pages missing and depth
 		float dropChance = (missingPages.size() + Dungeon.depth - 1) / (float)(allPages.size() - 2);
-		if (Random.Float() < dropChance){
+		if (!missingPages.isEmpty() && Random.Float() < dropChance){
 			GuidePage p = new GuidePage();
 			p.page(missingPages.get(0));
 			int cell = randomDropCell();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Belongings.java
Patch:
@@ -60,9 +60,6 @@ public Belongings( Hero owner ) {
 		this.owner = owner;
 		
 		backpack = new Bag() {
-			{
-				name = Messages.get(Bag.class, "name");
-			}
 			public int capacity(){
 				int cap = super.capacity();
 				for (Item item : items){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/Scroll.java
Patch:
@@ -224,7 +224,7 @@ public Item identify() {
 	
 	@Override
 	public String name() {
-		return isKnown() ? name : Messages.get(this, rune);
+		return isKnown() ? super.name() : Messages.get(this, rune);
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Wraith.java
Patch:
@@ -103,7 +103,7 @@ public static void spawnAround( int pos ) {
 	}
 	
 	public static Wraith spawnAt( int pos ) {
-		if (Dungeon.level.passable[pos] && Actor.findChar( pos ) == null) {
+		if (!Dungeon.level.solid[pos] && Actor.findChar( pos ) == null) {
 			
 			Wraith w = new Wraith();
 			w.adjustStats( Dungeon.depth );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/DriedRose.java
Patch:
@@ -359,7 +359,8 @@ public boolean act() {
 				defaultAction = AC_DIRECT;
 				
 				//heals to full over 1000 turns
-				if (ghost.HP < ghost.HT) {
+				LockedFloor lock = target.buff(LockedFloor.class);
+				if (ghost.HP < ghost.HT && (lock == null || lock.regenOn())) {
 					partialCharge += (ghost.HT / 1000f) * RingOfEnergy.artifactChargeMultiplier(target);
 					updateQuickslot();
 					

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/RegularLevel.java
Patch:
@@ -403,7 +403,7 @@ protected void createItems() {
 		missingPages.remove(Document.GUIDE_SEARCH_PAGE);
 
 		//chance to find a page scales with pages missing and depth
-		float dropChance = (missingPages.size() + Dungeon.depth) / (float)(allPages.size() - 2);
+		float dropChance = (missingPages.size() + Dungeon.depth - 1) / (float)(allPages.size() - 2);
 		if (Random.Float() < dropChance){
 			GuidePage p = new GuidePage();
 			p.page(missingPages.get(0));

File: SPD-classes/src/main/java/com/watabou/noosa/audio/Sample.java
Patch:
@@ -97,7 +97,7 @@ public long play( Object id, float volume, float pitch ) {
 		return play( id, volume, volume, pitch );
 	}
 	
-	public long play( Object id, float leftVolume, float rightVolume, float pitch ) {
+	public synchronized long play( Object id, float leftVolume, float rightVolume, float pitch ) {
 		float volume = Math.max(leftVolume, rightVolume);
 		float pan = rightVolume - leftVolume;
 		if (enabled && ids.containsKey( id )) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Amok.java
Patch:
@@ -40,8 +40,9 @@ public int icon() {
 	@Override
 	public void detach() {
 		super.detach();
-		if (target instanceof Mob)
-			((Mob)target).aggro( null );
+		if (target instanceof Mob && target.isAlive()) {
+			((Mob) target).aggro(null);
+		}
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -227,8 +227,8 @@ protected Char chooseEnemy() {
 		//We are charmed and current enemy is what charmed us
 		} else if (buff(Charm.class) != null && buff(Charm.class).object == enemy.id()) {
 			newEnemy = true;
-		//we aren't amoked and current enemy is invulnerable to us
-		} else if (buff( Amok.class ) == null && enemy.isInvulnerable(getClass())) {
+		//we aren't amoked, current enemy is invulnerable to us, and that enemy isn't affect by aggression
+		} else if (buff( Amok.class ) == null && enemy.isInvulnerable(getClass()) && enemy.buff(StoneOfAggression.Aggression.class) == null) {
 			newEnemy = true;
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/NewTengu.java
Patch:
@@ -274,7 +274,7 @@ private void jump() {
 								level.distance(newPos, enemy.pos) > 7 ||
 								level.distance(newPos, Dungeon.hero.pos) < 5 ||
 								level.distance(newPos, Dungeon.hero.pos) > 7 ||
-								level.distance(newPos, pos) < 6 ||
+								level.distance(newPos, pos) < 5 ||
 								Actor.findChar(newPos) != null ||
 								Dungeon.level.heaps.get(newPos) != null);
 				

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/RegularLevel.java
Patch:
@@ -210,8 +210,8 @@ protected void createMobs() {
 					do {
 						mob.pos = pointToCell(roomToSpawn.random());
 						tries--;
-					} while (tries >= 0 && findMob(mob.pos) != null || !passable[mob.pos] || mob.pos == exit
-							|| (!openSpace[mob.pos] && mob.properties().contains(Char.Property.LARGE)));
+					} while (tries >= 0 && (findMob(mob.pos) != null || !passable[mob.pos] || mob.pos == exit
+							|| (!openSpace[mob.pos] && mob.properties().contains(Char.Property.LARGE))));
 
 					if (tries >= 0) {
 						mobsToSpawn--;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/enchantments/Elastic.java
Patch:
@@ -40,7 +40,7 @@ public int proc(Weapon weapon, Char attacker, Char defender, int damage ) {
 		// lvl 2 - 43%
 		int level = Math.max( 0, weapon.buffedLvl() );
 		
-		if (Random.Int( level + 500 ) >= 4) {
+		if (Random.Int( level + 5 ) >= 4) {
 			//trace a ballistica to our target (which will also extend past them
 			Ballistica trajectory = new Ballistica(attacker.pos, defender.pos, Ballistica.STOP_TARGET);
 			//trim it to just be the part that goes past them

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
Patch:
@@ -292,7 +292,7 @@ public static void spawnWandmaker( Level level, Room room ) {
 							validPos = false;
 						}
 					}
-					if (Dungeon.level.traps.get(npc.pos) != null){
+					if (level.traps.get(npc.pos) != null){
 						validPos = false;
 					}
 				} while (!validPos);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/DriedRose.java
Patch:
@@ -360,7 +360,7 @@ public boolean act() {
 				
 				//heals to full over 1000 turns
 				if (ghost.HP < ghost.HT) {
-					partialCharge += ghost.HT / 1000f;
+					partialCharge += (ghost.HT / 1000f) * RingOfEnergy.artifactChargeMultiplier(target);
 					updateQuickslot();
 					
 					if (partialCharge > 1) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfDisintegration.java
Patch:
@@ -118,7 +118,7 @@ public void onHit(MagesStaff staff, Char attacker, Char defender, int damage) {
 	}
 
 	private int distance() {
-		return level()*2 + 6;
+		return buffedLvl()*2 + 6;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/PitRoom.java
Patch:
@@ -77,7 +77,7 @@ public void paint( Level level ) {
 					break;
 			}
 		} while ( mainLoot == null || Challenges.isItemBlocked(mainLoot));
-		level.drop(mainLoot, remains);
+		level.drop(mainLoot, remains).setHauntedIfCursed();
 		
 		int n = Random.IntRange( 1, 2 );
 		for (int i=0; i < n; i++) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/DisintegrationTrap.java
Patch:
@@ -58,6 +58,7 @@ public void activate() {
 				Ballistica bolt = new Ballistica(pos, ch.pos, Ballistica.PROJECTILE);
 				if (bolt.collisionPos == ch.pos && curDist < closestDist){
 					target = ch;
+					closestDist = curDist;
 				}
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/GrimTrap.java
Patch:
@@ -57,6 +57,7 @@ public void activate() {
 				Ballistica bolt = new Ballistica(pos, ch.pos, Ballistica.PROJECTILE);
 				if (bolt.collisionPos == ch.pos && curDist < closestDist){
 					target = ch;
+					closestDist = curDist;
 				}
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/PoisonDartTrap.java
Patch:
@@ -69,6 +69,7 @@ public void activate() {
 				Ballistica bolt = new Ballistica(pos, ch.pos, Ballistica.PROJECTILE);
 				if (canTarget(ch) && bolt.collisionPos == ch.pos && curDist < closestDist){
 					target = ch;
+					closestDist = curDist;
 				}
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/WornDartTrap.java
Patch:
@@ -54,6 +54,7 @@ public void activate() {
 				Ballistica bolt = new Ballistica(pos, ch.pos, Ballistica.PROJECTILE);
 				if (bolt.collisionPos == ch.pos && curDist < closestDist){
 					target = ch;
+					closestDist = curDist;
 				}
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/DisintegrationTrap.java
Patch:
@@ -53,8 +53,8 @@ public void activate() {
 		if (target == null){
 			float closestDist = Float.MAX_VALUE;
 			for (Char ch : Actor.chars()){
-				float curDist = Dungeon.level.trueDistance(pos, target.pos);
-				if (target.invisible > 0) curDist += 1000;
+				float curDist = Dungeon.level.trueDistance(pos, ch.pos);
+				if (ch.invisible > 0) curDist += 1000;
 				Ballistica bolt = new Ballistica(pos, ch.pos, Ballistica.PROJECTILE);
 				if (bolt.collisionPos == ch.pos && curDist < closestDist){
 					target = ch;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/GrimTrap.java
Patch:
@@ -52,8 +52,8 @@ public void activate() {
 		if (target == null){
 			float closestDist = Float.MAX_VALUE;
 			for (Char ch : Actor.chars()){
-				float curDist = Dungeon.level.trueDistance(pos, target.pos);
-				if (target.invisible > 0) curDist += 1000;
+				float curDist = Dungeon.level.trueDistance(pos, ch.pos);
+				if (ch.invisible > 0) curDist += 1000;
 				Ballistica bolt = new Ballistica(pos, ch.pos, Ballistica.PROJECTILE);
 				if (bolt.collisionPos == ch.pos && curDist < closestDist){
 					target = ch;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/PoisonDartTrap.java
Patch:
@@ -64,8 +64,8 @@ public void activate() {
 		if (target == null){
 			float closestDist = Float.MAX_VALUE;
 			for (Char ch : Actor.chars()){
-				float curDist = Dungeon.level.trueDistance(pos, target.pos);
-				if (target.invisible > 0) curDist += 1000;
+				float curDist = Dungeon.level.trueDistance(pos, ch.pos);
+				if (ch.invisible > 0) curDist += 1000;
 				Ballistica bolt = new Ballistica(pos, ch.pos, Ballistica.PROJECTILE);
 				if (canTarget(ch) && bolt.collisionPos == ch.pos && curDist < closestDist){
 					target = ch;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/WornDartTrap.java
Patch:
@@ -49,8 +49,8 @@ public void activate() {
 		if (target == null){
 			float closestDist = Float.MAX_VALUE;
 			for (Char ch : Actor.chars()){
-				float curDist = Dungeon.level.trueDistance(pos, target.pos);
-				if (target.invisible > 0) curDist += 1000;
+				float curDist = Dungeon.level.trueDistance(pos, ch.pos);
+				if (ch.invisible > 0) curDist += 1000;
 				Ballistica bolt = new Ballistica(pos, ch.pos, Ballistica.PROJECTILE);
 				if (bolt.collisionPos == ch.pos && curDist < closestDist){
 					target = ch;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Burning.java
Patch:
@@ -119,7 +119,7 @@ public boolean act() {
 				target.damage( damage, this );
 			}
 
-			if (target instanceof Thief) {
+			if (target instanceof Thief && ((Thief) target).item != null) {
 
 				Item item = ((Thief) target).item;
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/NewPrisonBossLevel.java
Patch:
@@ -582,6 +582,7 @@ public void placeTrapsInTenguCell(float fill){
 				int cell = x+tenguCell.left+1 + (y+tenguCell.top+1)*width();
 				if (Blob.volumeAt(cell, StormCloud.class) == 0
 						&& Blob.volumeAt(cell, Regrowth.class) <= 9
+						&& Dungeon.level.plants.get(cell) == null
 						&& Actor.findChar(cell) == null) {
 					Level.set(cell, Terrain.SECRET_TRAP);
 					setTrap(new TenguDartTrap().hide(), cell);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndResurrect.java
Patch:
@@ -79,9 +79,9 @@ protected void onClick() {
 			@Override
 			protected void onClick() {
 				hide();
-				
-				Rankings.INSTANCE.submit( false, WndResurrect.causeOfDeath.getClass() );
+
 				Hero.reallyDie( WndResurrect.causeOfDeath );
+				Rankings.INSTANCE.submit( false, WndResurrect.causeOfDeath.getClass() );
 			}
 		};
 		btnNo.setRect( 0, btnYes.bottom() + GAP, WIDTH, BTN_HEIGHT );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/AboutScene.java
Patch:
@@ -59,7 +59,7 @@ public void create() {
 
 		String shpxLink = "https://ShatteredPixel.com";
 		//tracking codes, so that the website knows where this pageview came from
-		shpxLink += "/?utm_source=shatteredpd";
+		shpxLink += "?utm_source=shatteredpd";
 		shpxLink += "&utm_medium=android";
 		shpxLink += "&utm_campaign=about_page";
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/SupporterScene.java
Patch:
@@ -75,7 +75,7 @@ protected void onClick() {
 				super.onClick();
 				String link = "https://www.patreon.com/ShatteredPixel";
 				//tracking codes, so that the website knows where this pageview came from
-				link += "/?utm_source=shatteredpd";
+				link += "?utm_source=shatteredpd";
 				link += "&utm_medium=android";
 				link += "&utm_campaign=supporter_page";
 				DeviceCompat.openURI(link);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/OptionSlider.java
Patch:
@@ -120,7 +120,7 @@ protected void onPointerUp( PointerEvent event ) {
 					sliderNode.resetColor();
 					
 					//sets the selected value
-					selectedVal = minVal + Math.round(sliderNode.x / tickDist);
+					selectedVal = minVal + Math.round((sliderNode.x - x) / tickDist);
 					sliderNode.x = x + tickDist * (selectedVal - minVal);
 					PixelScene.align(sliderNode);
 					onChange();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -463,6 +463,9 @@ public void seal(){
 	public void unseal(){
 		if (locked) {
 			locked = false;
+			if (Dungeon.hero.buff(LockedFloor.class) != null){
+				Dungeon.hero.buff(LockedFloor.class).detach();
+			}
 		}
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/NewHallsBossLevel.java
Patch:
@@ -206,6 +206,7 @@ public void seal() {
 
 	@Override
 	public void unseal() {
+		super.unseal();
 		set( entrance, Terrain.ENTRANCE );
 		GameScene.updateMap( entrance );
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/CharSprite.java
Patch:
@@ -339,7 +339,7 @@ public void flash() {
 		flashTime = FLASH_INTERVAL;
 	}
 	
-	public synchronized void add( State state ) {
+	public void add( State state ) {
 		switch (state) {
 			case BURNING:
 				burning = emitter();
@@ -393,7 +393,7 @@ public synchronized void add( State state ) {
 		}
 	}
 	
-	public synchronized void remove( State state ) {
+	public void remove( State state ) {
 		switch (state) {
 			case BURNING:
 				if (burning != null) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/CausticSlime.java
Patch:
@@ -57,7 +57,7 @@ public void rollToDropLoot() {
 		int ofs;
 		do {
 			ofs = PathFinder.NEIGHBOURS8[Random.Int(8)];
-		} while (!Dungeon.level.passable[pos + ofs]);
+		} while (Dungeon.level.solid[pos + ofs]);
 		Dungeon.level.drop( new GooBlob(), pos + ofs ).sprite.drop( pos );
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM201.java
Patch:
@@ -126,7 +126,7 @@ public void rollToDropLoot() {
 		int ofs;
 		do {
 			ofs = PathFinder.NEIGHBOURS8[Random.Int(8)];
-		} while (!Dungeon.level.passable[pos + ofs]);
+		} while (Dungeon.level.solid[pos + ofs]);
 		Dungeon.level.drop( new MetalShard(), pos + ofs ).sprite.drop( pos );
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfWarding.java
Patch:
@@ -250,15 +250,12 @@ private void wandHeal( int wandLevel ){
 					return;
 				case 4:
 					heal = 8;
-					HP = Math.min(HT, HP+9);
 					break;
 				case 5:
 					heal = 10;
-					HP = Math.min(HT, HP+10);
 					break;
 				case 6:
 					heal = 15;
-					HP = Math.min(HT, HP+15);
 					break;
 			}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Rankings.java
Patch:
@@ -154,9 +154,9 @@ public void saveGameData(Record rec){
 		Bundle handler = new Bundle();
 		Scroll.saveSelectively(handler, belongings.backpack.items);
 		Potion.saveSelectively(handler, belongings.backpack.items);
-		//include worn rings
-		if (belongings.misc1 != null) belongings.backpack.items.add(belongings.misc1);
-		if (belongings.misc2 != null) belongings.backpack.items.add(belongings.misc2);
+		//include potentially worn rings
+		if (belongings.misc != null)        belongings.backpack.items.add(belongings.misc);
+		if (belongings.ring != null)        belongings.backpack.items.add(belongings.ring);
 		Ring.saveSelectively(handler, belongings.backpack.items);
 		rec.gameData.put( HANDLERS, handler);
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/HeroClass.java
Patch:
@@ -163,8 +163,8 @@ private static void initRogue( Hero hero ) {
 		(hero.belongings.weapon = new Dagger()).identify();
 
 		CloakOfShadows cloak = new CloakOfShadows();
-		(hero.belongings.misc1 = cloak).identify();
-		hero.belongings.misc1.activate( hero );
+		(hero.belongings.artifact = cloak).identify();
+		hero.belongings.artifact.activate( hero );
 
 		ThrowingKnife knives = new ThrowingKnife();
 		knives.quantity(3).collect();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/Artifact.java
Patch:
@@ -58,8 +58,8 @@ public class Artifact extends KindofMisc {
 	@Override
 	public boolean doEquip( final Hero hero ) {
 
-		if ((hero.belongings.misc1 != null && hero.belongings.misc1.getClass() == this.getClass())
-				|| (hero.belongings.misc2 != null && hero.belongings.misc2.getClass() == this.getClass())){
+		if ((hero.belongings.artifact != null && hero.belongings.artifact.getClass() == this.getClass())
+				|| (hero.belongings.misc != null && hero.belongings.misc.getClass() == this.getClass())){
 
 			GLog.w( Messages.get(Artifact.class, "cannot_wear_two") );
 			return false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/WildEnergy.java
Patch:
@@ -59,8 +59,8 @@ public void call() {
 
 				hero.belongings.charge(1f);
 				for (int i = 0; i < 4; i++){
-					if (hero.belongings.misc1 instanceof Artifact) ((Artifact) hero.belongings.misc1).charge(hero);
-					if (hero.belongings.misc2 instanceof Artifact) ((Artifact) hero.belongings.misc2).charge(hero);
+					if (hero.belongings.artifact instanceof Artifact)   ((Artifact) hero.belongings.artifact).charge(hero);
+					if (hero.belongings.misc instanceof Artifact)       ((Artifact) hero.belongings.misc).charge(hero);
 				}
 
 				Buff.affect(hero, Recharging.class, 8f);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Bee.java
Patch:
@@ -149,7 +149,8 @@ protected Char chooseEnemy() {
 			//try to find a new enemy in these circumstances
 			if (enemy == null || !enemy.isAlive() || !Actor.chars().contains(enemy) || state == WANDERING
 					|| Dungeon.level.distance(enemy.pos, potPos) > 3
-					|| (alignment == Alignment.ALLY && enemy.alignment == Alignment.ALLY)){
+					|| (alignment == Alignment.ALLY && enemy.alignment == Alignment.ALLY)
+					|| (buff( Amok.class ) == null && enemy.isInvulnerable(getClass()))){
 				
 				//find all mobs near the pot
 				HashSet<Char> enemies = new HashSet<>();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Item.java
Patch:
@@ -130,7 +130,8 @@ public void doThrow( Hero hero ) {
 	}
 	
 	public void execute( Hero hero, String action ) {
-		
+
+		GameScene.cancel();
 		curUser = hero;
 		curItem = this;
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/Potion.java
Patch:
@@ -416,7 +416,7 @@ protected void splash( int cell ) {
 		final int color = splashColor();
 
 		Char ch = Actor.findChar(cell);
-		if (ch != null) {
+		if (ch != null && ch.alignment == Char.Alignment.ALLY) {
 			Buff.detach(ch, Burning.class);
 			Buff.detach(ch, Ooze.class);
 			Splash.at( ch.sprite.center(), color, 5 );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfBlastWave.java
Patch:
@@ -84,7 +84,7 @@ protected void onZap(Ballistica bolt) {
 				processSoulMark(ch, chargesPerCast());
 				if (ch.alignment != Char.Alignment.ALLY) ch.damage(damageRoll(), this);
 
-				if (ch.isAlive()) {
+				if (ch.isAlive() && ch.pos == bolt.collisionPos + i) {
 					Ballistica trajectory = new Ballistica(ch.pos, ch.pos + i, Ballistica.MAGIC_BOLT);
 					int strength = 1 + Math.round(buffedLvl() / 2f);
 					throwChar(ch, trajectory, strength);
@@ -101,7 +101,7 @@ protected void onZap(Ballistica bolt) {
 			processSoulMark(ch, chargesPerCast());
 			ch.damage(damageRoll(), this);
 
-			if (ch.isAlive() && bolt.path.size() > bolt.dist+1) {
+			if (ch.isAlive() && bolt.path.size() > bolt.dist+1 && ch.pos == bolt.collisionPos) {
 				Ballistica trajectory = new Ballistica(ch.pos, bolt.path.get(bolt.dist + 1), Ballistica.MAGIC_BOLT);
 				int strength = buffedLvl() + 3;
 				throwChar(ch, trajectory, strength);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -1025,7 +1025,7 @@ public static WndBag selectItem( WndBag.Listener listener, WndBag.Mode mode, Str
 		return wnd;
 	}
 	
-	static boolean cancel() {
+	public static boolean cancel() {
 		if (Dungeon.hero != null && (Dungeon.hero.curAction != null || Dungeon.hero.resting)) {
 			
 			Dungeon.hero.curAction = null;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -212,7 +212,7 @@ public static void init() {
 		Blacksmith.Quest.reset();
 		Imp.Quest.reset();
 
-		Generator.reset();
+		Generator.fullReset();
 		hero = new Hero();
 		hero.live();
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Rankings.java
Patch:
@@ -173,7 +173,7 @@ public void loadGameData(Record rec){
 		Actor.clear();
 		Dungeon.hero = null;
 		Dungeon.level = null;
-		Generator.reset();
+		Generator.fullReset();
 		Notes.reset();
 		Dungeon.quickslot.reset();
 		QuickSlotButton.reset();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Assets.java
Patch:
@@ -137,6 +137,7 @@ public static class Sounds {
 		public static final String HIT_MAGIC        = "sounds/hit_magic.mp3";
 		public static final String HIT_STRONG       = "sounds/hit_strong.mp3";
 		public static final String HIT_PARRY        = "sounds/hit_parry.mp3";
+		public static final String HIT_ARROW        = "sounds/hit_arrow.mp3";
 		public static final String ATK_SPIRITBOW    = "sounds/atk_spiritbow.mp3";
 		public static final String ATK_CROSSBOW     = "sounds/atk_crossbow.mp3";
 		public static final String HEALTH_WARN      = "sounds/health_warn.mp3";
@@ -188,7 +189,7 @@ public static class Sounds {
 				OPEN, UNLOCK, ITEM, DEWDROP, STEP, WATER, GRASS, TRAMPLE, STURDY,
 
 				HIT, MISS, HIT_SLASH, HIT_STAB, HIT_CRUSH, HIT_MAGIC, HIT_STRONG, HIT_PARRY,
-				ATK_SPIRITBOW, ATK_CROSSBOW, HEALTH_WARN, HEALTH_CRITICAL,
+				HIT_ARROW, ATK_SPIRITBOW, ATK_CROSSBOW, HEALTH_WARN, HEALTH_CRITICAL,
 
 				DESCEND, EAT, READ, LULLABY, DRINK, SHATTER, ZAP, LIGHTNING, LEVELUP, DEATH,
 				CHALLENGE, CURSED, TRAP, EVOKE, TOMB, ALERT, MELD, BOSS, BLAST, PLANT, RAY, BEACON,

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/darts/Dart.java
Patch:
@@ -36,14 +36,15 @@
 import com.shatteredpixel.shatteredpixeldungeon.windows.WndBag;
 import com.shatteredpixel.shatteredpixeldungeon.windows.WndOptions;
 import com.watabou.noosa.audio.Sample;
+import com.watabou.utils.Random;
 
 import java.util.ArrayList;
 
 public class Dart extends MissileWeapon {
 
 	{
 		image = ItemSpriteSheet.DART;
-		hitSound = Assets.Sounds.HIT_STAB;
+		hitSound = Assets.Sounds.HIT_ARROW;
 		hitSoundPitch = 1.3f;
 		
 		tier = 1;
@@ -130,7 +131,7 @@ protected void onThrow(int cell) {
 	public void throwSound() {
 		updateCrossbow();
 		if (bow != null) {
-			Sample.INSTANCE.play(Assets.Sounds.ATK_CROSSBOW);
+			Sample.INSTANCE.play(Assets.Sounds.ATK_CROSSBOW, 1, Random.Float(0.87f, 1.15f));
 		} else {
 			super.throwSound();
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Warlock.java
Patch:
@@ -105,10 +105,8 @@ private void zap() {
 		if (hit( this, enemy, true )) {
 			//TODO would be nice for this to work on ghost/statues too
 			if (enemy == Dungeon.hero && Random.Int( 2 ) == 0) {
-				if (enemy.buff( Degrade.class ) == null){
-					Sample.INSTANCE.play( Assets.Sounds.DEBUFF );
-				}
 				Buff.prolong( enemy, Degrade.class, Degrade.DURATION );
+				Sample.INSTANCE.play( Assets.Sounds.DEBUFF );
 			}
 			
 			int dmg = Random.NormalIntRange( 12, 18 );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfWarding.java
Patch:
@@ -68,7 +68,7 @@ public boolean tryToZap(Hero owner, int target) {
 				return false;
 			}
 		} else {
-			if ((currentWardEnergy + 2) > maxWardEnergy){
+			if ((currentWardEnergy + 1) > maxWardEnergy){
 				GLog.w( Messages.get(this, "no_more_wards"));
 				return false;
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/RunestoneRoom.java
Patch:
@@ -55,7 +55,7 @@ public void paint( Level level) {
 		for (int i = 0; i < n; i++) {
 			do {
 				dropPos = level.pointToCell(random());
-			} while (level.map[dropPos] != Terrain.EMPTY);
+			} while (level.map[dropPos] != Terrain.EMPTY || level.heaps.get( dropPos ) != null);
 			level.drop(prize(level), dropPos);
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/MimicSprite.java
Patch:
@@ -81,7 +81,7 @@ public void hideMimic(){
 	}
 
 	@Override
-	public synchronized void showSleep() {
+	public void showSleep() {
 		if (curAnim == hiding){
 			return;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/MobSprite.java
Patch:
@@ -62,9 +62,7 @@ public void fall() {
 		angularSpeed = Random.Int( 2 ) == 0 ? -720 : 720;
 		am = 1;
 
-		if (emo != null){
-			emo.killAndErase();
-		}
+		hideEmo();
 
 		if (health != null){
 			health.killAndErase();

File: SPD-classes/src/main/java/com/watabou/utils/Reflection.java
Patch:
@@ -39,7 +39,7 @@ public static boolean isStatic( Class cls ){
 	public static <T> T newInstance( Class<T> cls ){
 		try {
 			return ClassReflection.newInstance(cls);
-		} catch (ReflectionException e) {
+		} catch (Exception e) {
 			Game.reportException(e);
 			return null;
 		}
@@ -52,7 +52,7 @@ public static <T> T newInstanceUnhandled( Class<T> cls ) throws Exception {
 	public static Class forName( String name ){
 		try {
 			return ClassReflection.forName( name );
-		} catch (ReflectionException e) {
+		} catch (Exception e) {
 			Game.reportException(e);
 			return null;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -801,6 +801,7 @@ public static void observe( int dist ) {
 		}
 
 		for (TalismanOfForesight.CharAwareness c : hero.buffs(TalismanOfForesight.CharAwareness.class)){
+			if (Dungeon.depth != c.depth) continue;
 			Char ch = (Char) Actor.findById(c.charID);
 			if (ch == null) continue;
 			BArray.or( level.visited, level.heroFOV, ch.pos - 1 - level.width(), 3, level.visited );
@@ -810,6 +811,7 @@ public static void observe( int dist ) {
 		}
 
 		for (TalismanOfForesight.HeapAwareness h : hero.buffs(TalismanOfForesight.HeapAwareness.class)){
+			if (Dungeon.depth != h.depth) continue;
 			BArray.or( level.visited, level.heroFOV, h.pos - 1 - level.width(), 3, level.visited );
 			BArray.or( level.visited, level.heroFOV, h.pos - 1, 3, level.visited );
 			BArray.or( level.visited, level.heroFOV, h.pos - 1 + level.width(), 3, level.visited );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Ghoul.java
Patch:
@@ -138,7 +138,7 @@ protected boolean act() {
 
 	@Override
 	public void die(Object cause) {
-		if (cause != Chasm.class && cause != GhoulLifeLink.class){
+		if (cause != Chasm.class && cause != GhoulLifeLink.class && !Dungeon.level.pit[pos]){
 			Ghoul nearby = GhoulLifeLink.searchForHost(this);
 			if (nearby != null){
 				beingLifeLinked = true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/NewTengu.java
Patch:
@@ -244,8 +244,8 @@ private void jump() {
 				
 				do {
 					newPos = ((NewPrisonBossLevel)Dungeon.level).randomTenguCellPos();
-				} while ( level.trueDistance(newPos, enemy.pos) <= 4
-						|| level.trueDistance(newPos, Dungeon.hero.pos) <= 4
+				} while ( level.trueDistance(newPos, enemy.pos) <= 3.5f
+						|| level.trueDistance(newPos, Dungeon.hero.pos) <= 3.5f
 						|| Actor.findChar(newPos) != null);
 				
 				if (level.heroFOV[pos]) CellEmitter.get( pos ).burst( Speck.factory( Speck.WOOL ), 6 );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Warlock.java
Patch:
@@ -114,7 +114,7 @@ private void zap() {
 			int dmg = Random.NormalIntRange( 12, 18 );
 			enemy.damage( dmg, new DarkBolt() );
 			
-			if (!enemy.isAlive() && enemy == Dungeon.hero) {
+			if (enemy == Dungeon.hero && !enemy.isAlive()) {
 				Dungeon.fail( getClass() );
 				GLog.n( Messages.get(this, "bolt_kill") );
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/curses/Multiplicity.java
Patch:
@@ -68,7 +68,8 @@ public int proc(Armor armor, Char attacker, Char defender, int damage) {
 
 				} else {
 					//FIXME should probably have a mob property for this
-					if (attacker.properties().contains(Char.Property.BOSS) || attacker.properties().contains(Char.Property.MINIBOSS)
+					if (!(attacker instanceof Mob)
+							|| attacker.properties().contains(Char.Property.BOSS) || attacker.properties().contains(Char.Property.MINIBOSS)
 							|| attacker instanceof Mimic || attacker instanceof Statue){
 						m = Dungeon.level.createMob();
 					} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/quest/Pickaxe.java
Patch:
@@ -53,6 +53,8 @@ public class Pickaxe extends Weapon {
 	
 	{
 		image = ItemSpriteSheet.PICKAXE;
+
+		levelKnown = true;
 		
 		unique = true;
 		bones = false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Shadows.java
Patch:
@@ -56,7 +56,6 @@ public void restoreFromBundle( Bundle bundle ) {
 	@Override
 	public boolean attachTo( Char target ) {
 		if (super.attachTo( target )) {
-			Sample.INSTANCE.play( Assets.Sounds.MELD );
 			if (Dungeon.level != null)
 				Dungeon.observe();
 			return true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Blacksmith.java
Patch:
@@ -246,6 +246,7 @@ public static void upgrade( Item item1, Item item2 ) {
 		}
 		Dungeon.hero.spendAndNext( 2f );
 		Badges.validateItemLevelAquired( first );
+		Item.updateQuickslot();
 		
 		Quest.reforged = true;
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/darts/Dart.java
Patch:
@@ -63,11 +63,10 @@ public ArrayList<String> actions(Hero hero) {
 	
 	@Override
 	public void execute(Hero hero, String action) {
+		super.execute(hero, action);
 		if (action.equals(AC_TIP)){
 			GameScene.selectItem(itemSelector, WndBag.Mode.SEED, Messages.get(this, "prompt"));
 		}
-		
-		super.execute(hero, action);
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/darts/TippedDart.java
Patch:
@@ -72,6 +72,7 @@ public ArrayList<String> actions(Hero hero) {
 	
 	@Override
 	public void execute(final Hero hero, String action) {
+		super.execute(hero, action);
 		if (action.equals( AC_CLEAN )){
 			
 			GameScene.show(new WndOptions(Messages.get(this, "clean_title"),
@@ -100,7 +101,6 @@ protected void onSelect(int index) {
 			});
 			
 		}
-		super.execute(hero, action);
 	}
 	
 	//exact same damage as regular darts, despite being higher tier.

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/NewPrisonBossLevel.java
Patch:
@@ -571,9 +571,9 @@ public void placeTrapsInTenguCell(float fill){
 			PathFinder.buildDistanceMap(tenguPos, BArray.not(trapsPatch, null));
 			//note that the effective range of fill is 40%-90%
 			//so distance to tengu starts at 3-6 tiles and scales up to 7-8 as fill increases
-		} while (PathFinder.distance[heroPos] > Math.ceil(4 + 4*fill)
-				|| PathFinder.distance[heroPos] < Math.ceil(7*fill));
-		
+		} while (((PathFinder.distance[heroPos] < Math.ceil(7*fill))
+				|| (PathFinder.distance[heroPos] > Math.ceil(4 + 4*fill))));
+
 		PathFinder.setMapSize(width(), height());
 		
 		for (int i = 0; i < trapsPatch.length; i++){

File: services/updates/githubUpdates/src/main/java/com/shatteredpixel/shatteredpixeldungeon/services/updates/GitHubUpdates.java
Patch:
@@ -43,6 +43,7 @@ public void checkForUpdate(UpdateResultCallback callback) {
 
 		if (!Game.platform.connectedToUnmeteredNetwork()){
 			callback.onConnectionFailed();
+			return;
 		}
 
 		Net.HttpRequest httpGet = new Net.HttpRequest(Net.HttpMethods.GET);

File: android/src/main/java/com/shatteredpixel/shatteredpixeldungeon/android/AndroidGame.java
Patch:
@@ -42,7 +42,7 @@ public class AndroidGame extends AndroidApplication {
 	public static AndroidApplication instance;
 	protected static GLSurfaceView view;
 	
-	private AndroidPlatformSupport support;
+	private static AndroidPlatformSupport support;
 	
 	@Override
 	protected void onCreate (Bundle savedInstanceState) {
@@ -92,7 +92,8 @@ protected void onCreate (Bundle savedInstanceState) {
 		config.useCompass = false;
 		config.useAccelerometer = false;
 		
-		support = new AndroidPlatformSupport();
+		if (support == null) support = new AndroidPlatformSupport();
+		else                 support.resetGenerators();
 		
 		support.updateSystemUI();
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM200.java
Patch:
@@ -81,6 +81,7 @@ public void rollToDropLoot() {
 	}
 
 	protected Item createLoot() {
+		Dungeon.LimitedDrops.DM200_EQUIP.count++;
 		//uses probability tables for dwarf city
 		if (loot == Generator.Category.WEAPON){
 			return Generator.randomWeapon(4);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Golem.java
Patch:
@@ -82,6 +82,7 @@ public void rollToDropLoot() {
 	}
 
 	protected Item createLoot() {
+		Dungeon.LimitedDrops.GOLEM_EQUIP.count++;
 		//uses probability tables for demon halls
 		if (loot == Generator.Category.WEAPON){
 			return Generator.randomWeapon(5);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/NewTengu.java
Patch:
@@ -32,6 +32,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Blindness;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Burning;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Doom;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.LockedFloor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Terror;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
@@ -121,7 +122,7 @@ public int drRoll() {
 	//Tengu is immune to debuffs and damage when removed from the level
 	@Override
 	public void add(Buff buff) {
-		if (Actor.chars().contains(this)){
+		if (Actor.chars().contains(this) || buff instanceof Doom){
 			super.add(buff);
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Preparation.java
Patch:
@@ -72,9 +72,9 @@ public enum AttackLevel{
 		public boolean canKO(Char defender){
 			if (defender.properties().contains(Char.Property.MINIBOSS)
 					|| defender.properties().contains(Char.Property.BOSS)){
-				return (defender.HP/(float)defender.HT) <= (KOThreshold/5f);
+				return (defender.HP/(float)defender.HT) < (KOThreshold/5f);
 			} else {
-				return (defender.HP/(float)defender.HT) <= KOThreshold;
+				return (defender.HP/(float)defender.HT) < KOThreshold;
 			}
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bags/Bag.java
Patch:
@@ -152,7 +152,7 @@ public boolean contains( Item item ) {
 	public boolean canHold( Item item ){
 		if (items.contains(item) || item instanceof Bag || items.size() < capacity()){
 			return true;
-		} else {
+		} else if (item.stackable) {
 			for (Item i : items) {
 				if (item.isSimilar( i )) {
 					return true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/CursedWand.java
Patch:
@@ -171,6 +171,7 @@ public void call() {
 								GameScene.add( Blob.seed( bolt.collisionPos, 200, ParalyticGas.class ) );
 								break;
 						}
+						Sample.INSTANCE.play( Assets.Sounds.GAS );
 						afterZap.call();
 					}
 				});

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Greatshield.java
Patch:
@@ -46,9 +46,9 @@ public int defenseFactor( Char owner ) {
 	
 	public String statsInfo(){
 		if (isIdentified()){
-			return Messages.get(this, "stats_desc", 10+3*buffedLvl());
+			return Messages.get(this, "stats_desc", 6+3*buffedLvl());
 		} else {
-			return Messages.get(this, "typical_stats_desc", 10);
+			return Messages.get(this, "typical_stats_desc", 6);
 		}
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/RoundShield.java
Patch:
@@ -50,9 +50,9 @@ public int defenseFactor( Char owner ) {
 	
 	public String statsInfo(){
 		if (isIdentified()){
-			return Messages.get(this, "stats_desc", 5+2*buffedLvl());
+			return Messages.get(this, "stats_desc", 4+2*buffedLvl());
 		} else {
-			return Messages.get(this, "typical_stats_desc", 5);
+			return Messages.get(this, "typical_stats_desc", 4);
 		}
 	}
 }
\ No newline at end of file

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -1094,6 +1094,7 @@ public void updateFieldOfView( Char c, boolean[] fieldOfView ) {
 			}
 
 			for (TalismanOfForesight.CharAwareness a : c.buffs(TalismanOfForesight.CharAwareness.class)){
+				if (Dungeon.depth != a.depth) continue;
 				Char ch = (Char) Actor.findById(a.charID);
 				if (ch == null) {
 					a.detach();
@@ -1105,9 +1106,9 @@ public void updateFieldOfView( Char c, boolean[] fieldOfView ) {
 			}
 
 			for (TalismanOfForesight.HeapAwareness h : c.buffs(TalismanOfForesight.HeapAwareness.class)){
-				int p = h.pos;
+				if (Dungeon.depth != h.depth) continue;
 				for (int i : PathFinder.NEIGHBOURS9)
-					fieldOfView[p+i] = true;
+					fieldOfView[h.pos+i] = true;
 			}
 
 			for (Mob m : mobs){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -988,6 +988,9 @@ public static void handleCell( int cell ) {
 	}
 	
 	public static void selectCell( CellSelector.Listener listener ) {
+		if (cellSelector.listener != null && cellSelector.listener != defaultCellListener){
+			cellSelector.listener.onSelect(null);
+		}
 		cellSelector.listener = listener;
 		if (scene != null)
 			scene.prompt( listener.prompt() );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM200.java
Patch:
@@ -130,7 +130,6 @@ private void zap( ){
 		}
 
 		GLog.w(Messages.get(this, "vent"));
-		Sample.INSTANCE.play(Assets.Sounds.GAS);
 		GameScene.add(Blob.seed(trajectory.collisionPos, 100, ToxicGas.class));
 
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/SummoningTrap.java
Patch:
@@ -74,8 +74,8 @@ public void activate() {
 
 		for (Integer point : respawnPoints) {
 			Mob mob = Dungeon.level.createMob();
-			if (Char.hasProp(mob, Char.Property.LARGE) && !Dungeon.level.openSpace[point]){
-				continue;
+			while (Char.hasProp(mob, Char.Property.LARGE) && !Dungeon.level.openSpace[point]){
+				mob = Dungeon.level.createMob();
 			}
 			if (mob != null) {
 				mob.state = mob.WANDERING;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/DM200Sprite.java
Patch:
@@ -71,7 +71,7 @@ public void call() {
 						((DM200)ch).onZapComplete();
 					}
 				} );
-		Sample.INSTANCE.play( Assets.Sounds.PUFF );
+		Sample.INSTANCE.play( Assets.Sounds.GAS );
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Assets.java
Patch:
@@ -70,7 +70,6 @@ public static class Interfaces {
 		public static final String BANNERS	= "interfaces/banners.png";
 		public static final String BADGES	= "interfaces/badges.png";
 		public static final String LOCKED	= "interfaces/locked_badge.png";
-		public static final String AMULET	= "interfaces/amulet.png";
 
 		public static final String CHROME	= "interfaces/chrome.png";
 		public static final String ICONS	= "interfaces/icons.png";
@@ -215,6 +214,7 @@ public static class Sprites {
 		public static final String HUNTRESS	= "sprites/huntress.png";
 		public static final String AVATARS	= "sprites/avatars.png";
 		public static final String PET		= "sprites/pet.png";
+		public static final String AMULET	= "sprites/amulet.png";
 
 		public static final String RAT		= "sprites/rat.png";
 		public static final String BRUTE	= "sprites/brute.png";

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mimic.java
Patch:
@@ -249,7 +249,7 @@ public float spawningWeight() {
 
 	@Override
 	public boolean reset() {
-		state = WANDERING;
+		if (state != PASSIVE) state = WANDERING;
 		return true;
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -579,7 +579,7 @@ public int defenseProc( Char enemy, int damage ) {
 	}
 
 	public boolean surprisedBy( Char enemy ){
-		return !enemySeen && enemy == Dungeon.hero;
+		return (!enemySeen || enemy.invisible > 0) && enemy == Dungeon.hero;
 	}
 
 	public void aggro( Char ch ) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/YogFist.java
Patch:
@@ -473,7 +473,7 @@ public void damage(int dmg, Object src) {
 				} while (Dungeon.level.heroFOV[i]
 						|| Dungeon.level.solid[i]
 						|| Actor.findChar(i) != null
-						|| Dungeon.findStep(this, Dungeon.level.exit, Dungeon.level.passable, fieldOfView, false) == -1);
+						|| PathFinder.getStep(i, Dungeon.level.exit, Dungeon.level.passable) == -1);
 				ScrollOfTeleportation.appear(this, i);
 				state = WANDERING;
 				GameScene.flash(0xFFFFFF);
@@ -543,7 +543,7 @@ public void damage(int dmg, Object src) {
 				} while (Dungeon.level.heroFOV[i]
 						|| Dungeon.level.solid[i]
 						|| Actor.findChar(i) != null
-						|| Dungeon.findStep(this, Dungeon.level.exit, Dungeon.level.passable, fieldOfView, false) == -1);
+						|| PathFinder.getStep(i, Dungeon.level.exit, Dungeon.level.passable) == -1);
 				ScrollOfTeleportation.appear(this, i);
 				state = WANDERING;
 				GameScene.flash(0, false);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/RogueArmor.java
Patch:
@@ -36,6 +36,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.scenes.CellSelector;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
+import com.shatteredpixel.shatteredpixeldungeon.utils.BArray;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
 import com.watabou.noosa.audio.Sample;
 import com.watabou.utils.PathFinder;
@@ -57,11 +58,10 @@ public void doSpecial() {
 		public void onSelect( Integer target ) {
 			if (target != null) {
 				
-				PathFinder.buildDistanceMap(curUser.pos, Dungeon.level.passable, 8);
+				PathFinder.buildDistanceMap(curUser.pos, BArray.not(Dungeon.level.solid,null), 8);
 				
 				if ( PathFinder.distance[target] == Integer.MAX_VALUE ||
 					!Dungeon.level.heroFOV[target] ||
-					!(Dungeon.level.passable[target] || Dungeon.level.avoid[target]) ||
 					Actor.findChar( target ) != null) {
 					
 					GLog.w( Messages.get(RogueArmor.class, "fov") );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/AmuletScene.java
Patch:
@@ -57,7 +57,7 @@ public void create() {
 			add( text );
 		}
 		
-		amulet = new Image( Assets.Interfaces.AMULET );
+		amulet = new Image( Assets.Sprites.AMULET );
 		add( amulet );
 		
 		RedButton btnExit = new RedButton( Messages.get(this, "exit") ) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Combo.java
Patch:
@@ -70,7 +70,7 @@ public void tintIcon(Image icon) {
 
 	@Override
 	public float iconFadePercent() {
-		return (4 - comboTime)/4f;
+		return Math.max(0, (4 - comboTime)/4f);
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -298,7 +298,7 @@ public boolean attack( Char enemy ) {
 			if (buff(FrostImbue.class) != null)
 				buff(FrostImbue.class).proc(enemy);
 
-			if (prep != null && prep.canKO(enemy)){
+			if (enemy.isAlive() && prep != null && prep.canKO(enemy)){
 				enemy.die(this);
 				enemy.sprite.showStatus(CharSprite.NEGATIVE, Messages.get(Preparation.class, "assassinated"));
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Golem.java
Patch:
@@ -94,9 +94,9 @@ protected Item createLoot() {
 	private int selfTeleCooldown = 0;
 	private int enemyTeleCooldown = 0;
 
-	private static final String TELEPORTING = "vent_cooldown";
+	private static final String TELEPORTING = "teleporting";
 	private static final String SELF_COOLDOWN = "self_cooldown";
-	private static final String ENEMY_COOLDOWN = "vent_cooldown";
+	private static final String ENEMY_COOLDOWN = "enemy_cooldown";
 
 	@Override
 	public void storeInBundle(Bundle bundle) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/glyphs/Stone.java
Patch:
@@ -24,6 +24,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite;
+import com.watabou.utils.GameMath;
 
 public class Stone extends Armor.Glyph {
 
@@ -45,7 +46,8 @@ public int proc(Armor armor, Char attacker, Char defender, int damage) {
 		}
 		
 		//75% of dodge chance is applied as damage reduction
-		hitChance = (1f + 3f*hitChance)/4f;
+		// we clamp in case accuracy or evasion were negative
+		hitChance = GameMath.gate(0.25f, (1f + 3f*hitChance)/4f, 1f);
 		
 		damage = (int)Math.ceil(damage * hitChance);
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndSettings.java
Patch:
@@ -360,7 +360,7 @@ protected void onChange() {
 								Assets.Sounds.ITEM,
 								Assets.Sounds.SHATTER,
 								Assets.Sounds.EVOKE,
-								Assets.Sounds.TELEPORT));
+								Assets.Sounds.SECRET));
 					}
 				}
 			};

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfLivingEarth.java
Patch:
@@ -251,7 +251,7 @@ public int icon() {
 
 		@Override
 		public float iconFadePercent() {
-			return Math.max(0, (armorToGuardian() - armor) / armorToGuardian());
+			return Math.max(0, (armorToGuardian() - armor) / (float)armorToGuardian());
 		}
 
 		@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/plants/Earthroot.java
Patch:
@@ -125,7 +125,7 @@ public int icon() {
 
 		@Override
 		public float iconFadePercent() {
-			return Math.max(0, (target.HT - level) / target.HT);
+			return Math.max(0, (target.HT - level) / (float) target.HT);
 		}
 		
 		@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/plants/Sungrass.java
Patch:
@@ -124,7 +124,7 @@ public int icon() {
 
 		@Override
 		public float iconFadePercent() {
-			return Math.max(0, (target.HT - level) / target.HT);
+			return Math.max(0, (target.HT - level) / (float)target.HT);
 		}
 		
 		@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/OptionSlider.java
Patch:
@@ -108,15 +108,15 @@ protected void createChildren() {
 			protected void onPointerDown( PointerEvent event ) {
 				pressed = true;
 				PointF p = camera().screenToCamera((int) event.current.x, (int) event.current.y);
-				sliderNode.x = GameMath.gate(sliderBG.x-2, p.x, sliderBG.x+sliderBG.width()-2);
+				sliderNode.x = GameMath.gate(sliderBG.x-2, p.x - sliderNode.width()/2, sliderBG.x+sliderBG.width()-2);
 				sliderNode.brightness(1.5f);
 			}
 
 			@Override
 			protected void onPointerUp( PointerEvent event ) {
 				if (pressed) {
 					PointF p = camera().screenToCamera((int) event.current.x, (int) event.current.y);
-					sliderNode.x = GameMath.gate(sliderBG.x - 2, p.x, sliderBG.x + sliderBG.width() - 2);
+					sliderNode.x = GameMath.gate(sliderBG.x - 2, p.x - sliderNode.width()/2, sliderBG.x + sliderBG.width() - 2);
 					sliderNode.resetColor();
 					
 					//sets the selected value
@@ -131,7 +131,7 @@ protected void onPointerUp( PointerEvent event ) {
 			protected void onDrag( PointerEvent event ) {
 				if (pressed) {
 					PointF p = camera().screenToCamera((int) event.current.x, (int) event.current.y);
-					sliderNode.x = GameMath.gate(sliderBG.x - 2, p.x, sliderBG.x + sliderBG.width() - 2);
+					sliderNode.x = GameMath.gate(sliderBG.x - 2, p.x - sliderNode.width()/2, sliderBG.x + sliderBG.width() - 2);
 				}
 			}
 		};

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Levitation.java
Patch:
@@ -50,8 +50,8 @@ public boolean attachTo( Char target ) {
 	@Override
 	public void detach() {
 		target.flying = false;
-		Dungeon.level.occupyCell(target );
 		super.detach();
+		Dungeon.level.occupyCell(target );
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/FogOfWar.java
Patch:
@@ -49,9 +49,9 @@ public class FogOfWar extends Image {
 			0x55000000
 			}, {
 			//mapped
-			0xCC442211,
-			0x99663319,
-			0x55884422
+			0xCC112244,
+			0x99193366,
+			0x55224488
 			}, {
 			//invisible
 			0xFF000000,

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1564,7 +1564,7 @@ public void move( int step ) {
 			if (Dungeon.level.water[pos]) {
 				Sample.INSTANCE.play( Assets.Sounds.WATER, 1, Random.Float( 0.8f, 1.25f ) );
 			} else if (Dungeon.level.map[pos] == Terrain.EMPTY_SP) {
-				Sample.INSTANCE.play( Assets.Sounds.TRAMPLE, 1, Random.Float( 0.96f, 1.05f ) );
+				Sample.INSTANCE.play( Assets.Sounds.STURDY, 1, Random.Float( 0.96f, 1.05f ) );
 			} else if (Dungeon.level.map[pos] == Terrain.GRASS
 					|| Dungeon.level.map[pos] == Terrain.EMBERS
 					|| Dungeon.level.map[pos] == Terrain.FURROWED_GRASS){

File: SPD-classes/src/main/java/com/watabou/noosa/Game.java
Patch:
@@ -138,7 +138,8 @@ public void render() {
 		Gdx.gl.glDisable(Gdx.gl.GL_SCISSOR_TEST);
 		Gdx.gl.glClear(Gdx.gl.GL_COLOR_BUFFER_BIT);
 		draw();
-		
+
+		Gdx.gl.glDisable( Gdx.gl.GL_SCISSOR_TEST );
 		Gdx.gl.glFlush();
 		
 		step();

File: desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopLauncher.java
Patch:
@@ -77,6 +77,7 @@ public void uncaughtException(Thread thread, Throwable throwable) {
 				TinyFileDialogs.tinyfd_messageBox(title + " Has Crashed!",
 						title + " has run into an error it can't recover from and has crashed, sorry about that!\n\n" +
 						"If you could, please email this error message to the developer (Evan@ShatteredPixel.com):\n\n" +
+						"version: " + Game.version + "\n" +
 						exceptionMsg,
 						"ok", "error", false );
 				if (Gdx.app != null) Gdx.app.exit();
@@ -137,7 +138,7 @@ public void uncaughtException(Thread thread, Throwable throwable) {
 		
 		config.setWindowIcon("icons/icon_16.png", "icons/icon_32.png", "icons/icon_64.png",
 				"icons/icon_128.png", "icons/icon_256.png");
-		
+
 		new Lwjgl3Application(new ShatteredPixelDungeon(new DesktopPlatformSupport()), config);
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -630,7 +630,7 @@ public void destroy() {
 	
 	@Override
 	public void die( Object cause ) {
-		
+
 		if (hitWithRanged){
 			Statistics.thrownAssists++;
 			Badges.validateHuntressUnlock();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Warlock.java
Patch:
@@ -111,7 +111,7 @@ private void zap() {
 				Buff.prolong( enemy, Degrade.class, Degrade.DURATION );
 			}
 			
-			int dmg = Random.Int( 12, 18 );
+			int dmg = Random.NormalIntRange( 12, 18 );
 			enemy.damage( dmg, new DarkBolt() );
 			
 			if (!enemy.isAlive() && enemy == Dungeon.hero) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
Patch:
@@ -278,15 +278,15 @@ public static void spawnWandmaker( Level level, Room room ) {
 				
 				Wandmaker npc = new Wandmaker();
 				boolean validPos;
-				//Do not spawn wandmaker on the entrance, or next to a door.
+				//Do not spawn wandmaker on the entrance, or in front of a door.
 				do {
 					validPos = true;
 					npc.pos = level.pointToCell(room.random());
 					if (npc.pos == level.entrance){
 						validPos = false;
 					}
 					for (Point door : room.connected.values()){
-						if (level.adjacent( npc.pos, level.pointToCell( door ) )){
+						if (level.trueDistance( npc.pos, level.pointToCell( door ) ) <= 1){
 							validPos = false;
 						}
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -863,8 +863,7 @@ public int fallCell( boolean fallIntoPit ) {
 		do {
 			result = randomRespawnCell( null );
 		} while (traps.get(result) != null
-				|| findMob(result) != null
-				|| heaps.get(result) != null);
+				|| findMob(result) != null);
 		return result;
 	}
 	

File: desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopLauncher.java
Patch:
@@ -79,7 +79,7 @@ public void uncaughtException(Thread thread, Throwable throwable) {
 						"If you could, please email this error message to the developer (Evan@ShatteredPixel.com):\n\n" +
 						exceptionMsg,
 						"ok", "error", false );
-				Gdx.app.exit();
+				if (Gdx.app != null) Gdx.app.exit();
 			}
 		});
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/PitfallTrap.java
Patch:
@@ -102,7 +102,9 @@ public boolean act() {
 
 					Char ch = Actor.findChar(cell);
 
-					if (ch != null && !ch.flying) {
+					//don't trigger on flying chars, or immovable neutral chars
+					if (ch != null && !ch.flying
+						&& !(ch.alignment == Char.Alignment.NEUTRAL && Char.hasProp(ch, Char.Property.IMMOVABLE))) {
 						if (ch == Dungeon.hero) {
 							Chasm.heroFall(cell);
 						} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/AboutScene.java
Patch:
@@ -137,7 +137,7 @@ protected void onClick( PointerEvent event ) {
 		PointerArea hotArea = new PointerArea( wataLink.left(), wataLink.top(), wataLink.width(), wataLink.height() ) {
 			@Override
 			protected void onClick( PointerEvent event ) {
-				DeviceCompat.openURI( "https://" + LNK_WATA );
+				DeviceCompat.openURI( "http://" + LNK_WATA );
 			}
 		};
 		add( hotArea );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -630,7 +630,9 @@ public void move( int step ) {
 		if (Dungeon.level.adjacent( step, pos ) && buff( Vertigo.class ) != null) {
 			sprite.interruptMotion();
 			int newPos = pos + PathFinder.NEIGHBOURS8[Random.Int( 8 )];
-			if (!(Dungeon.level.passable[newPos] || Dungeon.level.avoid[newPos]) || Actor.findChar( newPos ) != null)
+			if (!(Dungeon.level.passable[newPos] || Dungeon.level.avoid[newPos])
+					|| (properties.contains(Property.LARGE) && !Dungeon.level.openSpace[pos])
+					|| Actor.findChar( newPos ) != null)
 				return;
 			else {
 				sprite.move(pos, newPos);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Brute.java
Patch:
@@ -79,9 +79,9 @@ public void die(Object cause) {
 	}
 
 	@Override
-	public boolean isAlive() {
+	public synchronized boolean isAlive() {
 		if (HP > 0){
-			return  true;
+			return true;
 		} else {
 			if (!hasRaged){
 				triggerEnrage();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Golem.java
Patch:
@@ -183,7 +183,8 @@ public boolean act(boolean enemyInFOV, boolean justAlerted) {
 
 				int oldPos = pos;
 
-				if (enemyTeleCooldown <= 0 && Random.Int(100/distance(enemy)) == 0){
+				if (enemyTeleCooldown <= 0 && Random.Int(100/distance(enemy)) == 0
+						&& !Char.hasProp(enemy, Property.IMMOVABLE)){
 					if (sprite != null && (sprite.visible || enemy.sprite.visible)) {
 						sprite.zap( enemy.pos );
 						return false;
@@ -196,7 +197,7 @@ public boolean act(boolean enemyInFOV, boolean justAlerted) {
 					spend( 1 / speed() );
 					return moveSprite( oldPos,  pos );
 
-				} else if (enemyTeleCooldown <= 0) {
+				} else if (enemyTeleCooldown <= 0 && !Char.hasProp(enemy, Property.IMMOVABLE)) {
 					if (sprite != null && (sprite.visible || enemy.sprite.visible)) {
 						sprite.zap( enemy.pos );
 						return false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Statue.java
Patch:
@@ -21,6 +21,7 @@
 
 package com.shatteredpixel.shatteredpixeldungeon.actors.mobs;
 
+import com.shatteredpixel.shatteredpixeldungeon.Challenges;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.items.Generator;
@@ -168,7 +169,7 @@ public String description() {
 	}
 
 	public static Statue random(){
-		if (Random.Int(10) == 0){
+		if (Random.Int(10) == 0 && !Dungeon.isChallenged(Challenges.NO_ARMOR)){
 			return new ArmoredStatue();
 		} else {
 			return new Statue();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/YogDzewa.java
Patch:
@@ -290,7 +290,7 @@ public void damage( int dmg, Object src ) {
 		if (phase < 4 && HP <= HT - 300*phase){
 			HP = HT - 300*phase;
 
-			Dungeon.level.viewDistance--;
+			Dungeon.level.viewDistance = Math.max(1, Dungeon.level.viewDistance-1);
 			if (Dungeon.hero.buff(Light.class) == null){
 				Dungeon.hero.viewDistance = Dungeon.level.viewDistance;
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -759,7 +759,7 @@ public Heap drop( Item item, int cell ) {
 			heap.drop(item);
 		}
 		
-		if (Dungeon.level != null) {
+		if (Dungeon.level != null && ShatteredPixelDungeon.scene() instanceof GameScene) {
 			pressCell( cell );
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/CharSprite.java
Patch:
@@ -217,6 +217,7 @@ public static void setMoveInterval( float interval){
 	
 	//returns where the center of this sprite will be after it completes any motion in progress
 	public PointF destinationCenter(){
+		PosTweener motion = this.motion;
 		if (motion != null){
 			return new PointF(motion.end.x + width()/2f, motion.end.y + height()/2f);
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/NewHallsBossLevel.java
Patch:
@@ -283,7 +283,7 @@ public static class CenterPieceVisuals extends CustomTilemap {
 				24, 25, 26, 19, 19, 19, 28, 29, 30,
 				24, 25, 26, 19, 19, 19, 28, 29, 30,
 				24, 25, 26, 19, 19, 19, 28, 29, 30,
-				24, 25, 34, 35, 35, 35, -1, 29, 30,
+				24, 25, 34, 35, 35, 35, 34, 29, 30,
 				40, 41, 36, 36, 36, 36, 36, 40, 41,
 				48, 49, 36, 36, 36, 36, 36, 48, 49
 		};

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Bee.java
Patch:
@@ -157,6 +157,7 @@ protected Char chooseEnemy() {
 					if (!(mob == this)
 							&& Dungeon.level.distance(mob.pos, potPos) <= 3
 							&& mob.alignment != Alignment.NEUTRAL
+							&& !mob.isInvulnerable(getClass())
 							&& !(alignment == Alignment.ALLY && mob.alignment == Alignment.ALLY)) {
 						enemies.add(mob);
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM201.java
Patch:
@@ -57,6 +57,7 @@ protected boolean act() {
 		GameScene.add(Blob.seed(pos, 0, CorrosiveGas.class));
 		if (state == HUNTING && enemy != null && enemySeen
 				&& threatened && !Dungeon.level.adjacent(pos, enemy.pos)){
+			enemySeen = enemy != null && enemy.isAlive() && fieldOfView[enemy.pos] && enemy.invisible <= 0;
 			if (sprite != null && (sprite.visible || enemy.sprite.visible)) {
 				sprite.zap( enemy.pos );
 				return false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Golem.java
Patch:
@@ -103,7 +103,7 @@ protected boolean act() {
 		enemyTeleCooldown--;
 		if (teleporting){
 			((GolemSprite)sprite).teleParticles(false);
-			if (Actor.findChar(target) == null) {
+			if (Actor.findChar(target) == null && Dungeon.level.openSpace[target]) {
 				ScrollOfTeleportation.appear(this, target);
 				selfTeleCooldown = 30;
 			} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -443,7 +443,7 @@ else if (path.getLast() != target) {
 					//otherwise, check if other characters are forcing us to take a very slow route
 					// and don't try to go around them yet in response, basically assume their blockage is temporary
 					PathFinder.Path ignoreChars = Dungeon.findPath(this, target, Dungeon.level.passable, fieldOfView, false);
-					if (full == null || full.size() > 2*ignoreChars.size()){
+					if (ignoreChars != null && (full == null || full.size() > 2*ignoreChars.size())){
 						//check if first cell of shorter path is valid. If it is, use new shorter path. Otherwise do nothing and wait.
 						path = ignoreChars;
 						if (!Dungeon.level.passable[ignoreChars.getFirst()]

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/RipperDemon.java
Patch:
@@ -213,7 +213,7 @@ public void call() {
 						leapPos = targetPos;
 						//don't want to overly punish players with slow move or attack speed
 						spend(GameMath.gate(TICK, enemy.cooldown(), 3*TICK));
-						if (Dungeon.level.heroFOV[pos]){
+						if (Dungeon.level.heroFOV[pos] || Dungeon.level.heroFOV[leapPos]){
 							GLog.w(Messages.get(RipperDemon.this, "leap"));
 							sprite.parent.addToBack(new TargetedCell(leapPos, 0xFF0000));
 							((RipperSprite)sprite).leapPrep( leapPos );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/YogDzewa.java
Patch:
@@ -282,6 +282,8 @@ public void damage( int dmg, Object src ) {
 		super.damage( dmg, src );
 		int dmgTaken = preHP - HP;
 
+		if (phase == 0 || findFist() != null) return;
+
 		abilityCooldown -= dmgTaken/10f;
 		summonCooldown -= dmgTaken/10f;
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/Web.java
Patch:
@@ -78,7 +78,7 @@ public void use( BlobEmitter emitter ) {
 	@Override
 	public void clear(int cell) {
 		super.clear(cell);
-		if (volume == 0) return;
+		if (cur == null) return;
 		Level l = Dungeon.level;
 		l.solid[cell] = cur[cell] > 0 || (Terrain.flags[l.map[cell]] & Terrain.SOLID) != 0;
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/RipperDemon.java
Patch:
@@ -187,7 +187,7 @@ public void call() {
 					return true;
 				}
 
-				if (Dungeon.level.distance(pos, enemy.pos) >= 3) {
+				if (enemyInFOV && Dungeon.level.distance(pos, enemy.pos) >= 3) {
 
 					int targetPos = enemy.pos;
 					if (lastEnemyPos != enemy.pos){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/Web.java
Patch:
@@ -78,6 +78,7 @@ public void use( BlobEmitter emitter ) {
 	@Override
 	public void clear(int cell) {
 		super.clear(cell);
+		if (volume == 0) return;
 		Level l = Dungeon.level;
 		l.solid[cell] = cur[cell] > 0 || (Terrain.flags[l.map[cell]] & Terrain.SOLID) != 0;
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/GoldenMimic.java
Patch:
@@ -76,9 +76,8 @@ public void stopHiding(){
 	}
 
 	@Override
-	public void adjustStats(int level) {
-		//FIXME this causes level to keep increasing over save/load
-		super.adjustStats(Math.round(level*1.33f));
+	public void setLevel(int level) {
+		super.setLevel(Math.round(level*1.33f));
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Ghoul.java
Patch:
@@ -277,7 +277,7 @@ public boolean act() {
 					ArrayList<Integer> candidates = new ArrayList<>();
 					for (int n : PathFinder.NEIGHBOURS8) {
 						int cell = ghoul.pos + n;
-						if ((Dungeon.level.passable[cell] || Dungeon.level.avoid[cell]) && Actor.findChar( cell ) == null) {
+						if (Dungeon.level.passable[cell] && Actor.findChar( cell ) == null) {
 							candidates.add( cell );
 						}
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Piranha.java
Patch:
@@ -65,7 +65,6 @@ protected boolean act() {
 		
 		if (!Dungeon.level.water[pos]) {
 			die( null );
-			sprite.killAndErase();
 			return true;
 		} else {
 			return super.act();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/YogDzewa.java
Patch:
@@ -239,6 +239,8 @@ protected boolean act() {
 					if (findFist() != null){
 						summonCooldown += MIN_SUMMON_CD - phase;
 					}
+				} else {
+					break;
 				}
 			}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/YogFist.java
Patch:
@@ -475,7 +475,7 @@ public void damage(int dmg, Object src) {
 			super.damage(dmg, src);
 			if (isAlive() && beforeHP > HT/2 && HP < HT/2){
 				HP = HT/2;
-				Buff.prolong( enemy, Blindness.class, 30f );
+				Buff.prolong( Dungeon.hero, Blindness.class, 30f );
 				int i;
 				do {
 					i = Random.Int(Dungeon.level.length());
@@ -485,7 +485,7 @@ public void damage(int dmg, Object src) {
 				GameScene.flash(0xFFFFFF);
 				GLog.w( Messages.get( this, "teleport" ));
 			} else if (!isAlive()){
-				Buff.prolong( enemy, Blindness.class, 50f );
+				Buff.prolong( Dungeon.hero, Blindness.class, 50f );
 				GameScene.flash(0xFFFFFF);
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -444,7 +444,7 @@ public void draw() {
 				}
 
 				int spawnersAbove = Statistics.spawnersAlive;
-				if (spawnersAbove > 0) {
+				if (spawnersAbove > 0 && Dungeon.depth <= 25) {
 					for (Mob m : Dungeon.level.mobs) {
 						if (m instanceof DemonSpawner && ((DemonSpawner) m).spawnRecorded) {
 							spawnersAbove--;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -633,7 +633,7 @@ private boolean actInteract( HeroAction.Interact action ) {
 			
 			ready();
 			sprite.turnTo( pos, ch.pos );
-			return ch.interact();
+			return ch.interact(this);
 			
 		} else {
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/GoldenMimic.java
Patch:
@@ -77,6 +77,7 @@ public void stopHiding(){
 
 	@Override
 	public void adjustStats(int level) {
+		//FIXME this causes level to keep increasing over save/load
 		super.adjustStats(Math.round(level*1.33f));
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Pylon.java
Patch:
@@ -139,7 +139,7 @@ public String description() {
 	}
 
 	@Override
-	public boolean interact() {
+	public boolean interact(Char c) {
 		return true;
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Sheep.java
Patch:
@@ -70,9 +70,9 @@ public void add( Buff buff ) {
 	}
 
 	@Override
-	public boolean interact() {
+	public boolean interact(Char c) {
 		sprite.showStatus( CharSprite.NEUTRAL, Messages.get(this, Random.element( LINE_KEYS )) );
-		Dungeon.hero.spendAndNext(1f);
-		return false;
+		if (c == Dungeon.hero) Dungeon.hero.spendAndNext(1f);
+		return true;
 	}
 }
\ No newline at end of file

File: SPD-classes/src/main/java/com/watabou/noosa/Visual.java
Patch:
@@ -272,6 +272,9 @@ public boolean isVisible() {
 
 		if (c == null || !visible) return false;
 
+		//FIXME, the below calculations ignore angle, so assume visible if angle != 0
+		if (angle != 0) return true;
+
 		//x coord
 		if (x > c.scroll.x + c.width)
 			return false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Actor.java
Patch:
@@ -47,7 +47,7 @@ public abstract class Actor implements Bundlable {
 	protected static final int VFX_PRIO    = 100;   //visual effects take priority
 	protected static final int HERO_PRIO   = 0;     //positive is before hero, negative after
 	protected static final int BLOB_PRIO   = -10;   //blobs act after hero, before mobs
-	protected static final int MOB_PRIO    = -20;   //mobs act between buffs and blobd
+	protected static final int MOB_PRIO    = -20;   //mobs act between buffs and blobs
 	protected static final int BUFF_PRIO   = -30;   //buffs act last in a turn
 	private static final int   DEFAULT     = -100;  //if no priority is given, act after all else
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/LastLevel.java
Patch:
@@ -307,10 +307,10 @@ public static class CenterPieceVisuals extends CustomTilemap {
 		private static final int[] map = new int[]{
 				-1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1,
 				 0,  0,  0,  0,  8,  9, 10, 11, 19, 11, 12, 13, 14,  0,  0,  0,
-				 0,  0,  0,  0, 16, 17, 18, 19, 19, 19, 20, 21, 22,  0,  0,  0,
-				 0,  0,  0,  0, 24, 25, 26, 31, 19, 31, 28, 29, 30,  0,  0,  0,
+				 0,  0,  0,  0, 16, 17, 18, 31, 19, 31, 20, 21, 22,  0,  0,  0,
+				 0,  0,  0,  0, 24, 25, 26, 19, 19, 19, 28, 29, 30,  0,  0,  0,
+				 0,  0,  0,  0, 24, 25, 26, 19, 19, 19, 28, 29, 30,  0,  0,  0,
 				 0,  0,  0,  0, 24, 25, 26, 19, 19, 19, 28, 29, 30,  0,  0,  0,
-				 0,  0,  0,  0, 24, 25, 26, 31, 19, 31, 28, 29, 30,  0,  0,  0,
 				 0,  0,  0,  0, 24, 25, 34, 35, 35, 35, 34, 29, 30,  0,  0,  0,
 				 0,  0,  0,  0, 40, 41, 36, 36, 36, 36, 36, 40, 41,  0,  0,  0,
 				 0,  0,  0,  0, 48, 49, 36, 36, 36, 36, 36, 48, 49,  0,  0,  0,

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/YogSprite.java
Patch:
@@ -31,7 +31,7 @@ public class YogSprite extends MobSprite {
 	public YogSprite() {
 		super();
 
-		perspectiveRaise = 0.2f;
+		perspectiveRaise = 5 / 16f;
 
 		texture( Assets.YOG );
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Recipe.java
Patch:
@@ -238,7 +238,7 @@ public static Recipe findRecipe(ArrayList<Item> ingredients){
 	
 	public static boolean usableInRecipe(Item item){
 		return !item.cursed
-				&& (!(item instanceof EquipableItem) || item instanceof Dart || item instanceof AlchemistsToolkit)
+				&& (!(item instanceof EquipableItem) || (item instanceof AlchemistsToolkit && item.isIdentified()))
 				&& !(item instanceof Wand);
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/NewCavesBossLevel.java
Patch:
@@ -213,7 +213,7 @@ public void seal() {
 		boss.state = boss.WANDERING;
 		do {
 			boss.pos = pointToCell(Random.element(mainArena.getPoints()));
-		} while (!openSpace[boss.pos] || map[boss.pos] == Terrain.EMPTY_SP || heroFOV[boss.pos]);
+		} while (!openSpace[boss.pos] || map[boss.pos] == Terrain.EMPTY_SP);
 		GameScene.add( boss );
 
 		set( entrance, Terrain.WALL );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DemonSpawner.java
Patch:
@@ -110,7 +110,7 @@ protected boolean act() {
 				spawnCooldown += 60;
 				if (Dungeon.depth > 21){
 					//60/53.33/46.67/40 turns to spawn on floor 21/22/23/24
-					spawnCooldown -= Math.max(40, (Dungeon.depth-21)*6.67);
+					spawnCooldown -= Math.min(20, (Dungeon.depth-21)*6.67);
 				}
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -174,7 +174,7 @@ public void create() {
 
 		Random.pushGenerator( Dungeon.seedCurDepth() );
 		
-		if (!(Dungeon.bossLevel() || Dungeon.depth == 21) /*final shop floor*/) {
+		if (!(Dungeon.bossLevel())) {
 
 			if (Dungeon.isChallenged(Challenges.NO_FOOD)){
 				addItemToSpawn( new SmallRation() );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/effects/BannerSprites.java
Patch:
@@ -50,7 +50,7 @@ public static Image get( Type type ) {
 				icon.frame( icon.texture.uvRect( 0, 160, 128, 181 ) );
 				break;
 			case PIXEL_DUNGEON_SIGNS:
-				icon.frame( icon.texture.uvRect( 133, 0, 255, 90 ) );
+				icon.frame( icon.texture.uvRect( 132, 0, 256, 90 ) );
 				break;
 		}
 		return icon;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/RegularLevel.java
Patch:
@@ -451,7 +451,7 @@ protected int randomDropCell() {
 				if (passable[pos]
 						&& pos != exit
 						&& heaps.get(pos) == null
-						&& Actor.findChar(pos) == null) {
+						&& findMob(pos) == null) {
 					
 					Trap t = traps.get(pos);
 					

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/standard/ImpShopRoom.java
Patch:
@@ -94,8 +94,8 @@ public Door entrance() {
 
 	public void spawnShop(Level level){
 		impSpawned = true;
-		placeItems(level);
 		placeShopkeeper(level);
+		placeItems(level);
 	}
 
 	private static final String IMP = "imp_spawned";

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/NPC.java
Patch:
@@ -39,7 +39,7 @@ public abstract class NPC extends Mob {
 
 	protected void throwItem() {
 		Heap heap = Dungeon.level.heaps.get( pos );
-		if (heap != null) {
+		if (heap != null && heap.type == Heap.Type.HEAP) {
 			int n;
 			do {
 				n = pos + PathFinder.NEIGHBOURS8[Random.Int( 8 )];

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -447,7 +447,7 @@ public void damage( int dmg, Object src ) {
 		if (this.buff(MagicalSleep.class) != null){
 			Buff.detach(this, MagicalSleep.class);
 		}
-		if (this.buff(Doom.class) != null){
+		if (this.buff(Doom.class) != null && !isImmune(Doom.class)){
 			dmg *= 2;
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/CrystalMimic.java
Patch:
@@ -112,7 +112,7 @@ public void stopHiding(){
 		} else {
 			Buff.affect(this, Haste.class, 1f);
 		}
-		if (Dungeon.level.heroFOV[pos] && Actor.chars().contains(this)) {
+		if (Actor.chars().contains(this) && Dungeon.level.heroFOV[pos]) {
 			enemy = Dungeon.hero;
 			target = Dungeon.hero.pos;
 			enemySeen = true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/NewCavesBossLevel.java
Patch:
@@ -572,7 +572,7 @@ public static class EntranceOverhang extends CustomTilemap{
 		private static short[] entryWay = new short[]{
 				 0,  7,  7,  7,  4,
 				 0, 15, 15, 15,  4,
-				 8, 23, 23, 23, 12,
+				-1, 23, 23, 23, -1,
 				-1, -1, -1, -1, -1,
 				-1,  6, -1, 14, -1,
 				-1, -1, -1, -1, -1,

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/CharHealthIndicator.java
Patch:
@@ -47,7 +47,7 @@ protected void createChildren() {
 	public void update() {
 		super.update();
 		
-		if (target != null && target.isAlive() && target.sprite.visible && Actor.chars().contains(target)) {
+		if (target != null && target.isAlive() && target.sprite.visible) {
 			CharSprite sprite = target.sprite;
 			width = sprite.width()*(4/6f);
 			x = sprite.x + sprite.width()/6f;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/TargetHealthIndicator.java
Patch:
@@ -41,7 +41,7 @@ public TargetHealthIndicator() {
 	public void update() {
 		super.update();
 		
-		if (target != null && target.isAlive() && target.sprite.visible && Actor.chars().contains(target)) {
+		if (target != null && target.isAlive() && target.sprite.visible) {
 			CharSprite sprite = target.sprite;
 			width = sprite.width();
 			x = sprite.x;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Ghoul.java
Patch:
@@ -151,8 +151,6 @@ public void die(Object cause) {
 				timesDowned++;
 				Buff.append(nearby, GhoulLifeLink.class).set(timesDowned*5, this);
 				((GhoulSprite)sprite).crumple();
-				HP = Math.round(HT/10f);
-				GLog.i(Messages.get(this, "collapse"));
 				beingLifeLinked = false;
 				return;
 			}
@@ -282,6 +280,7 @@ public boolean act() {
 
 			turnsToRevive--;
 			if (turnsToRevive <= 0){
+				ghoul.HP = Math.round(ghoul.HT/10f);
 				if (Actor.findChar( ghoul.pos ) != null) {
 					ArrayList<Integer> candidates = new ArrayList<>();
 					for (int n : PathFinder.NEIGHBOURS8) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/NewCityBossLevel.java
Patch:
@@ -259,7 +259,7 @@ public void occupyCell( Char ch ) {
 
 		super.occupyCell( ch );
 
-		if (map[bottomDoor] == Terrain.DOOR && map[topDoor] == Terrain.LOCKED_DOOR
+		if (map[bottomDoor] != Terrain.LOCKED_DOOR && map[topDoor] == Terrain.LOCKED_DOOR
 				&& ch.pos < bottomDoor && ch == Dungeon.hero) {
 
 			seal();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/TreasuryRoom.java
Patch:
@@ -47,7 +47,7 @@ public void paint( Level level ) {
 			int pos;
 			do {
 				pos = level.pointToCell(random());
-			} while (level.map[pos] != Terrain.EMPTY || level.heaps.get( pos ) != null);
+			} while (level.map[pos] != Terrain.EMPTY || level.heaps.get( pos ) != null || level.findMob(pos) != null);
 			if (heapType == Heap.Type.CHEST && Dungeon.depth > 1 && Random.Int( 5 ) == 0){
 				level.mobs.add(Mimic.spawnAt(pos, new Gold().random()));
 			} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/InterlevelScene.java
Patch:
@@ -112,7 +112,7 @@ public void create() {
 					if (!(Statistics.deepestFloor < loadingDepth)) {
 						fadeTime = FAST_FADE;
 					} else if (loadingDepth == 6 || loadingDepth == 11
-							|| loadingDepth == 16 || loadingDepth == 22) {
+							|| loadingDepth == 16 || loadingDepth == 21) {
 						fadeTime = SLOW_FADE;
 					}
 				}
@@ -135,7 +135,7 @@ public void create() {
 		if (loadingDepth <= 5)          loadingAsset = Assets.LOADING_SEWERS;
 		else if (loadingDepth <= 10)    loadingAsset = Assets.LOADING_PRISON;
 		else if (loadingDepth <= 15)    loadingAsset = Assets.LOADING_CAVES;
-		else if (loadingDepth <= 21)    loadingAsset = Assets.LOADING_CITY;
+		else if (loadingDepth <= 20)    loadingAsset = Assets.LOADING_CITY;
 		else if (loadingDepth <= 25)    loadingAsset = Assets.LOADING_HALLS;
 		else                            loadingAsset = Assets.SHADOW;
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/GoldenMimic.java
Patch:
@@ -65,7 +65,7 @@ public String description() {
 
 	public void stopHiding(){
 		state = HUNTING;
-		if (Dungeon.level.heroFOV[pos] && Actor.chars().contains(this)) {
+		if (Actor.chars().contains(this) && Dungeon.level.heroFOV[pos]) {
 			enemy = Dungeon.hero;
 			target = Dungeon.hero.pos;
 			enemySeen = true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/NewTengu.java
Patch:
@@ -117,10 +117,9 @@ public int drRoll() {
 	//Tengu is immune to debuffs and damage when removed from the level
 	@Override
 	public void add(Buff buff) {
-		if (!Dungeon.level.mobs.contains(this)){
-			return;
+		if (Actor.chars().contains(this)){
+			super.add(buff);
 		}
-		super.add(buff);
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/CharHealthIndicator.java
Patch:
@@ -21,6 +21,7 @@
 
 package com.shatteredpixel.shatteredpixeldungeon.ui;
 
+import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite;
@@ -46,7 +47,7 @@ protected void createChildren() {
 	public void update() {
 		super.update();
 		
-		if (target != null && target.isAlive() && target.sprite.visible) {
+		if (target != null && target.isAlive() && target.sprite.visible && Actor.chars().contains(target)) {
 			CharSprite sprite = target.sprite;
 			width = sprite.width()*(4/6f);
 			x = sprite.x + sprite.width()/6f;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/TargetHealthIndicator.java
Patch:
@@ -21,6 +21,7 @@
 
 package com.shatteredpixel.shatteredpixeldungeon.ui;
 
+import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite;
 
@@ -40,7 +41,7 @@ public TargetHealthIndicator() {
 	public void update() {
 		super.update();
 		
-		if (target != null && target.isAlive() && target.sprite.visible) {
+		if (target != null && target.isAlive() && target.sprite.visible && Actor.chars().contains(target)) {
 			CharSprite sprite = target.sprite;
 			width = sprite.width();
 			x = sprite.x;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -415,7 +415,7 @@ public void damage( int dmg, Object src ) {
 			return;
 		}
 
-		if (src != LifeLink.class && buff(LifeLink.class) != null){
+		if (!(src instanceof LifeLink) && buff(LifeLink.class) != null){
 			HashSet<LifeLink> links = buffs(LifeLink.class);
 			for (LifeLink link : links.toArray(new LifeLink[0])){
 				if (Actor.findById(link.object) == null){
@@ -426,7 +426,7 @@ public void damage( int dmg, Object src ) {
 			dmg = (int)Math.ceil(dmg / (float)(links.size()+1));
 			for (LifeLink link : links){
 				Char ch = (Char)Actor.findById(link.object);
-				ch.damage(dmg, LifeLink.class);
+				ch.damage(dmg, link);
 				if (!ch.isAlive()){
 					link.detach();
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/NewTengu.java
Patch:
@@ -1005,7 +1005,7 @@ protected void evolve() {
 							
 							Char ch = Actor.findChar(cell);
 							if (ch != null && !(ch instanceof NewTengu)){
-								ch.damage(2 + Dungeon.depth, Electricity.class);
+								ch.damage(2 + Dungeon.depth, new Electricity());
 								
 								if (ch == Dungeon.hero && !ch.isAlive()) {
 									Dungeon.fail(NewTengu.class);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Pylon.java
Patch:
@@ -108,7 +108,7 @@ protected boolean act() {
 	private void shockChar( Char ch ){
 		if (ch != null && !(ch instanceof NewDM300)){
 			ch.sprite.flash();
-			ch.damage(Random.NormalIntRange(10, 20), Electricity.class);
+			ch.damage(Random.NormalIntRange(10, 20), new Electricity());
 
 			if (ch == Dungeon.hero && !ch.isAlive()){
 				Dungeon.fail(NewDM300.class);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/MageArmor.java
Patch:
@@ -53,7 +53,7 @@ public void doSpecial() {
 				&& mob.alignment != Char.Alignment.ALLY) {
 				Buff.affect( mob, Burning.class ).reignite( mob );
 				Buff.prolong( mob, Roots.class, 5 );
-				mob.damage(Random.NormalIntRange(4, 16 + Dungeon.depth), Burning.class);
+				mob.damage(Random.NormalIntRange(4, 16 + Dungeon.depth), new Burning());
 			}
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -423,7 +423,7 @@ public void damage( int dmg, Object src ) {
 					link.detach();
 				}
 			}
-			dmg /= (links.size()+1);
+			dmg = (int)Math.ceil(dmg / (float)(links.size()+1));
 			for (LifeLink link : links){
 				Char ch = (Char)Actor.findById(link.object);
 				ch.damage(dmg, LifeLink.class);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Ghoul.java
Patch:
@@ -42,8 +42,8 @@ public class Ghoul extends Mob {
 	{
 		spriteClass = GhoulSprite.class;
 		
-		HP = HT = 5;
-		defenseSkill = 0;
+		HP = HT = 45;
+		defenseSkill = 20;
 		
 		EXP = 5;
 		maxLvl = 20;
@@ -313,7 +313,7 @@ public void detach() {
 			super.detach();
 			Ghoul newHost = searchForHost(ghoul);
 			if (newHost != null){
-				newHost.add(this);
+				attachTo(newHost);
 			} else {
 				ghoul.die(this);
 			}

File: SPD-classes/src/main/java/com/watabou/noosa/ui/Button.java
Patch:
@@ -78,7 +78,7 @@ public boolean onSignal ( KeyEvent event ) {
 	private Signal.Listener<KeyEvent> keyListener;
 	
 	public GameAction keyAction(){
-		return GameAction.NONE;
+		return null;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Golem.java
Patch:
@@ -139,6 +139,7 @@ public void teleportEnemy(){
 			ScrollOfTeleportation.appear(enemy, bestPos);
 			if (enemy instanceof Hero){
 				((Hero) enemy).interrupt();
+				Dungeon.observe();
 			}
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mimic.java
Patch:
@@ -178,7 +178,7 @@ public void damage(int dmg, Object src) {
 
 	public void stopHiding(){
 		state = HUNTING;
-		if (Dungeon.level.heroFOV[pos] && Actor.chars().contains(this)) {
+		if (Actor.chars().contains(this) && Dungeon.level.heroFOV[pos]) {
 			enemy = Dungeon.hero;
 			target = Dungeon.hero.pos;
 			enemySeen = true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Spinner.java
Patch:
@@ -160,7 +160,7 @@ public int webPos(){
 		}
 
 		//in case target is at the edge of the map and there are no more cells in the path
-		if (b.path.size() <= collisionIndex){
+		if (b.path.size() <= collisionIndex+1){
 			return -1;
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfAccuracy.java
Patch:
@@ -30,7 +30,7 @@ public class RingOfAccuracy extends Ring {
 	
 	public String statsInfo() {
 		if (isIdentified()){
-			return Messages.get(this, "stats", new DecimalFormat("#.##").format(100f * (Math.pow(1.3f, soloBonus()) - 1f)));
+			return Messages.get(this, "stats", new DecimalFormat("#.##").format(100f * (Math.pow(1.3f, soloBuffedBonus()) - 1f)));
 		} else {
 			return Messages.get(this, "typical_stats", new DecimalFormat("#.##").format(30f));
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfElements.java
Patch:
@@ -62,7 +62,7 @@ public class RingOfElements extends Ring {
 	
 	public String statsInfo() {
 		if (isIdentified()){
-			return Messages.get(this, "stats", new DecimalFormat("#.##").format(100f * (1f - Math.pow(0.80f, soloBonus()))));
+			return Messages.get(this, "stats", new DecimalFormat("#.##").format(100f * (1f - Math.pow(0.80f, soloBuffedBonus()))));
 		} else {
 			return Messages.get(this, "typical_stats", new DecimalFormat("#.##").format(20f));
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfEnergy.java
Patch:
@@ -30,7 +30,7 @@ public class RingOfEnergy extends Ring {
 	
 	public String statsInfo() {
 		if (isIdentified()){
-			return Messages.get(this, "stats", new DecimalFormat("#.##").format(100f * (Math.pow(1.30f, soloBonus()) - 1f)));
+			return Messages.get(this, "stats", new DecimalFormat("#.##").format(100f * (Math.pow(1.30f, soloBuffedBonus()) - 1f)));
 		} else {
 			return Messages.get(this, "typical_stats", new DecimalFormat("#.##").format(30f));
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfEvasion.java
Patch:
@@ -30,7 +30,7 @@ public class RingOfEvasion extends Ring {
 	
 	public String statsInfo() {
 		if (isIdentified()){
-			return Messages.get(this, "stats", new DecimalFormat("#.##").format(100f * (Math.pow(1.15f, soloBonus()) - 1f)));
+			return Messages.get(this, "stats", new DecimalFormat("#.##").format(100f * (Math.pow(1.15f, soloBuffedBonus()) - 1f)));
 		} else {
 			return Messages.get(this, "typical_stats", new DecimalFormat("#.##").format(15f));
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfForce.java
Patch:
@@ -81,7 +81,8 @@ private static int max(int lvl, float tier){
 	public String statsInfo() {
 		float tier = tier(Dungeon.hero.STR());
 		if (isIdentified()) {
-			return Messages.get(this, "stats", min(soloBonus(), tier), max(soloBonus(), tier), soloBonus());
+			int level = soloBuffedBonus();
+			return Messages.get(this, "stats", min(level, tier), max(level, tier), level);
 		} else {
 			return Messages.get(this, "typical_stats", min(1, tier), max(1, tier), 1);
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfFuror.java
Patch:
@@ -30,7 +30,7 @@ public class RingOfFuror extends Ring {
 	
 	public String statsInfo() {
 		if (isIdentified()){
-			return Messages.get(this, "stats", new DecimalFormat("#.##").format(100f * (Math.pow(1.105f, soloBonus()) - 1f)));
+			return Messages.get(this, "stats", new DecimalFormat("#.##").format(100f * (Math.pow(1.105f, soloBuffedBonus()) - 1f)));
 		} else {
 			return Messages.get(this, "typical_stats", new DecimalFormat("#.##").format(10.5f));
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfHaste.java
Patch:
@@ -30,7 +30,7 @@ public class RingOfHaste extends Ring {
 	
 	public String statsInfo() {
 		if (isIdentified()){
-			return Messages.get(this, "stats", new DecimalFormat("#.##").format(100f * (Math.pow(1.2f, soloBonus()) - 1f)));
+			return Messages.get(this, "stats", new DecimalFormat("#.##").format(100f * (Math.pow(1.2f, soloBuffedBonus()) - 1f)));
 		} else {
 			return Messages.get(this, "typical_stats", new DecimalFormat("#.##").format(20f));
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfMight.java
Patch:
@@ -72,7 +72,7 @@ private void updateTargetHT(){
 	
 	public String statsInfo() {
 		if (isIdentified()){
-			return Messages.get(this, "stats", soloBonus(), new DecimalFormat("#.##").format(100f * (Math.pow(1.035, soloBonus()) - 1f)));
+			return Messages.get(this, "stats", soloBonus(), new DecimalFormat("#.##").format(100f * (Math.pow(1.035, soloBuffedBonus()) - 1f)));
 		} else {
 			return Messages.get(this, "typical_stats", 1, new DecimalFormat("#.##").format(3.5f));
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfSharpshooting.java
Patch:
@@ -30,7 +30,7 @@ public class RingOfSharpshooting extends Ring {
 	
 	public String statsInfo() {
 		if (isIdentified()){
-			return Messages.get(this, "stats", soloBonus(), new DecimalFormat("#.##").format(100f * (Math.pow(1.2, soloBonus()) - 1f)));
+			return Messages.get(this, "stats", soloBuffedBonus(), new DecimalFormat("#.##").format(100f * (Math.pow(1.2, soloBonus()) - 1f)));
 		} else {
 			return Messages.get(this, "typical_stats", 1, new DecimalFormat("#.##").format(20f));
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfTenacity.java
Patch:
@@ -30,7 +30,7 @@ public class RingOfTenacity extends Ring {
 	
 	public String statsInfo() {
 		if (isIdentified()){
-			return Messages.get(this, "stats", new DecimalFormat("#.##").format(100f * (1f - Math.pow(0.85f, soloBonus()))));
+			return Messages.get(this, "stats", new DecimalFormat("#.##").format(100f * (1f - Math.pow(0.85f, soloBuffedBonus()))));
 		} else {
 			return Messages.get(this, "typical_stats", new DecimalFormat("#.##").format(15f));
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfWealth.java
Patch:
@@ -51,7 +51,7 @@ public class RingOfWealth extends Ring {
 	
 	public String statsInfo() {
 		if (isIdentified()){
-			return Messages.get(this, "stats", new DecimalFormat("#.##").format(100f * (Math.pow(1.2f, soloBonus()) - 1f)));
+			return Messages.get(this, "stats", new DecimalFormat("#.##").format(100f * (Math.pow(1.2f, soloBuffedBonus()) - 1f)));
 		} else {
 			return Messages.get(this, "typical_stats", new DecimalFormat("#.##").format(20f));
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/NewCavesBossLevel.java
Patch:
@@ -753,6 +753,9 @@ public void emit(Emitter emitter, int index, float x, float y) {
 							energySourceSprite = c.sprite;
 						}
 					}
+					if (energySourceSprite == null){
+						return;
+					}
 				}
 
 				float dist = Math.abs(energySourceSprite.x - x) + Math.abs(energySourceSprite.y - y);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/NewDM300.java
Patch:
@@ -409,6 +409,7 @@ public void supercharge(){
 		spend(3f);
 		yell(Messages.get(this, "charging"));
 		sprite.showStatus(CharSprite.POSITIVE, Messages.get(this, "immune"));
+		sprite.resetColor();
 		chargeAnnounced = false;
 	}
 

File: SPD-classes/src/main/java/com/watabou/input/GameAction.java
Patch:
@@ -52,9 +52,7 @@ public boolean equals(Object o) {
 	}
 
 	public static final GameAction NONE = new GameAction( "none" );
-
 	public static final GameAction BACK = new GameAction( "back" );
-	public static final GameAction MENU = new GameAction( "menu" );
 
 	public static ArrayList<GameAction> allActions(){
 		return new ArrayList<>(ALL_ACTIONS);

File: SPD-classes/src/main/java/com/watabou/noosa/ui/Button.java
Patch:
@@ -66,8 +66,7 @@ protected void onClick( PointerEvent event ) {
 		KeyEvent.addKeyListener( keyListener = new Signal.Listener<KeyEvent>() {
 			@Override
 			public boolean onSignal ( KeyEvent event ) {
-				if ( active && !event.pressed
-						&& KeyBindings.getActionForKey( event ) == keyAction()){
+				if ( active && event.pressed && KeyBindings.getActionForKey( event ) == keyAction()){
 					onClick();
 					return true;
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndKeyBindings.java
Patch:
@@ -99,8 +99,8 @@ public void onClick(float x, float y) {
 
 		int y = 0;
 		for (GameAction action : GameAction.allActions()){
-			//start at 3. No bindings for NONE, BACK, and MENU atm
-			if (action.code() < 3) continue;
+			//start at 1. No bindings for NONE
+			if (action.code() < 1) continue;
 
 			BindingItem item = new BindingItem(action);
 			item.setRect(0, y, WIDTH, BindingItem.HEIGHT);
@@ -192,7 +192,7 @@ public BindingItem( GameAction action ){
 			actionName.setHightlighting(false);
 			add(actionName);
 
-			ArrayList<Integer> keys = KeyBindings.getKeysForAction(action);
+			ArrayList<Integer> keys = KeyBindings.getBoundKeysForAction(action);
 			origKey1 = key1 = keys.isEmpty() ? 0 : keys.remove(0);
 			origKey2 = key2 = keys.isEmpty() ? 0 : keys.remove(0);
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/effects/Speck.java
Patch:
@@ -243,7 +243,7 @@ public void reset( int index, float x, float y, int type ) {
 			scale.set( Random.Float( 1, 2 ) );
 			speed.set( 0, 64 );
 			lifespan = 0.2f;
-			y -= speed.y * lifespan;
+			this.y -= speed.y * lifespan;
 			break;
 			
 		case NOTE:

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -651,7 +651,7 @@ private boolean actInteract( HeroAction.Interact action ) {
 	
 	private boolean actBuy( HeroAction.Buy action ) {
 		int dst = action.dst;
-		if (pos == dst || Dungeon.level.adjacent( pos, dst )) {
+		if (pos == dst) {
 
 			ready();
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/effects/Lightning.java
Patch:
@@ -137,6 +137,8 @@ public Arc(PointF from, PointF to){
 			arc2 = new Image(Effects.get(Effects.Type.LIGHTNING));
 			arc2.origin.set( 0, arc2.height()/2 );
 			add( arc2 );
+
+			update();
 		}
 
 		public void alpha(float alpha) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Eye.java
Patch:
@@ -240,7 +240,6 @@ public void restoreFromBundle(Bundle bundle) {
 
 	{
 		resistances.add( WandOfDisintegration.class );
-		resistances.add( Grim.class );
 	}
 	
 	{

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Piranha.java
Patch:
@@ -148,7 +148,6 @@ protected boolean getFurther( int target ) {
 	
 	{
 		immunities.add( Burning.class );
-		immunities.add( Vertigo.class );
 	}
 	
 	//if there is not a path to the enemy, piranhas act as if they can't see them

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Succubus.java
Patch:
@@ -164,7 +164,6 @@ protected Item createLoot() {
 	}
 
 	{
-		immunities.add( Sleep.class );
 		immunities.add( Charm.class );
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/RegularLevel.java
Patch:
@@ -450,7 +450,8 @@ protected int randomDropCell() {
 				int pos = pointToCell(room.random());
 				if (passable[pos]
 						&& pos != exit
-						&& heaps.get(pos) == null) {
+						&& heaps.get(pos) == null
+						&& Actor.findChar(pos) == null) {
 					
 					Trap t = traps.get(pos);
 					

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/TreasuryRoom.java
Patch:
@@ -48,7 +48,7 @@ public void paint( Level level ) {
 			do {
 				pos = level.pointToCell(random());
 			} while (level.map[pos] != Terrain.EMPTY || level.heaps.get( pos ) != null);
-			if (heapType == Heap.Type.CHEST && Random.Int(5 ) == 0){
+			if (heapType == Heap.Type.CHEST && Dungeon.depth > 1 && Random.Int( 5 ) == 0){
 				level.mobs.add(Mimic.spawnAt(pos, new Gold().random()));
 			} else {
 				level.drop( new Gold().random(), pos ).type = heapType;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/PoisonDartTrap.java
Patch:
@@ -105,7 +105,7 @@ public void call() {
 					}
 				});
 			} else {
-				finalTarget.damage(Random.NormalIntRange(1, 4) - finalTarget.drRoll(), trap);
+				finalTarget.damage(Random.NormalIntRange(4, 8) - finalTarget.drRoll(), trap);
 				Buff.affect( finalTarget, Poison.class ).set( poisonAmount() );
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/WornDartTrap.java
Patch:
@@ -90,7 +90,7 @@ public void call() {
 					}
 				});
 			} else {
-				finalTarget.damage(Random.NormalIntRange(1, 4) - finalTarget.drRoll(), trap);
+				finalTarget.damage(Random.NormalIntRange(4, 8) - finalTarget.drRoll(), trap);
 			}
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -630,12 +630,12 @@ public void buildFlagMaps() {
 		}
 
 		//an open space is large enough to fit large mobs. A space is open when it is not solid
-		// and there is a group of 3 or more adjacent cells which aren't solid
+		// and there is and open corner with both adjacent cells opens
 		for (int i=0; i < length(); i++) {
 			if (solid[i]){
 				openSpace[i] = false;
 			} else {
-				for (int j = 0; j < PathFinder.CIRCLE8.length; j++){
+				for (int j = 1; j < PathFinder.CIRCLE8.length; j += 2){
 					if (solid[i+PathFinder.CIRCLE8[j]]) {
 						openSpace[i] = false;
 					} else if (!solid[i+PathFinder.CIRCLE8[(j+1)%8]]

File: SPD-classes/src/main/java/com/watabou/utils/PathFinder.java
Patch:
@@ -129,7 +129,7 @@ public static int getStep( int from, int to, boolean[] passable ) {
 	
 	public static int getStepBack( int cur, int from, boolean[] passable ) {
 
-		int d = buildEscapeDistanceMap( cur, from, 5f, passable );
+		int d = buildEscapeDistanceMap( cur, from, 5, passable );
 		for (int i=0; i < size; i++) {
 			goals[i] = distance[i] == d;
 		}
@@ -285,7 +285,7 @@ private static boolean buildDistanceMap( int from, boolean[] to, boolean[] passa
 		return pathFound;
 	}
 	
-	private static int buildEscapeDistanceMap( int cur, int from, float factor, boolean[] passable ) {
+	private static int buildEscapeDistanceMap( int cur, int from, int lookAhead, boolean[] passable ) {
 		
 		System.arraycopy(maxVal, 0, distance, 0, maxVal.length);
 		
@@ -311,7 +311,7 @@ private static int buildEscapeDistanceMap( int cur, int from, float factor, bool
 			}
 			
 			if (step == cur) {
-				destDist = (int)(dist * factor) + 1;
+				destDist = dist + lookAhead;
 			}
 			
 			int nextDistance = dist + 1;

File: SPD-classes/src/main/java/com/watabou/utils/GameSettings.java
Patch:
@@ -26,8 +26,7 @@
 
 public class GameSettings {
 	
-	//TODO might want to rename this file. this is the auto-generated name for android atm
-	public static final String DEFAULT_PREFS_FILE = "ShatteredPixelDungeon";
+	public static final String DEFAULT_PREFS_FILE = "settings.xml";
 	
 	private static Preferences prefs;
 	

File: android/src/main/java/com/shatteredpixel/shatteredpixeldungeon/android/AndroidGame.java
Patch:
@@ -69,6 +69,8 @@ protected void onCreate (Bundle savedInstanceState) {
 		
 		// grab preferences directly using our instance first
 		// so that we don't need to rely on Gdx.app, which isn't initialized yet.
+		// Note that we use a different prefs name on android for legacy purposes,
+		// this is the default prefs filename given to an android app (.xml is automatically added to it)
 		SPDSettings.set(instance.getPreferences("ShatteredPixelDungeon"));
 		
 		//set desired orientation (if it exists) before initializing the app.

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -140,7 +140,7 @@ public String name(){
 	}
 
 	public boolean canInteract( Hero h ){
-		return Dungeon.level.adjacent( pos, h.pos );
+		return Dungeon.level.adjacent( pos, h.pos ) && h.buff(Vertigo.class) == null;
 	}
 	
 	//swaps places by default

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -638,10 +638,10 @@ public void rollToDropLoot(){
 			if (bonus != null && !bonus.isEmpty()) {
 				for (Item b : bonus) Dungeon.level.drop(b, pos).sprite.drop();
 				if (RingOfWealth.latestDropWasRare){
-					if (sprite != null) new Flare(8, 48).color(0xAA00FF, true).show(sprite, 3f);
+					new Flare(8, 48).color(0xAA00FF, true).show(sprite, 3f);
 					RingOfWealth.latestDropWasRare = false;
 				} else {
-					if (sprite != null) new Flare(8, 24).color(0xFFFFFF, true).show(sprite, 3f);
+					new Flare(8, 24).color(0xFFFFFF, true).show(sprite, 3f);
 				}
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/curses/Multiplicity.java
Patch:
@@ -98,9 +98,10 @@ public int proc(Armor armor, Char attacker, Char defender, int damage) {
 				if (m != null) {
 
 					if (Char.hasProp(m, Char.Property.LARGE)){
-						for ( int i : spawnPoints){
+						for ( int i : spawnPoints.toArray(new Integer[0])){
 							if (!Dungeon.level.openSpace[i]){
-								spawnPoints.remove(i);
+								//remove the value, not at the index
+								spawnPoints.remove((Integer) i);
 							}
 						}
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/StatueSprite.java
Patch:
@@ -49,7 +49,7 @@ public StatueSprite() {
 		play( idle );
 	}
 
-	private static int[] tierFrames = {0, 21, 32, 43, 54, 63};
+	private static int[] tierFrames = {0, 21, 32, 43, 54, 65};
 
 	public void setArmor( int tier ){
 		int c = tierFrames[(int)GameMath.gate(0, tier, 5)];

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfBlastWave.java
Patch:
@@ -135,6 +135,8 @@ public static void throwChar(final Char ch, final Ballistica trajectory, int pow
 			collided = true;
 		}
 
+		if (dist < 0) return;
+
 		final int newPos = trajectory.path.get(dist);
 
 		if (newPos == ch.pos) return;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/NewTengu.java
Patch:
@@ -502,7 +502,7 @@ public static boolean throwBomb(final Char thrower, final Char target){
 		//Targets closest cell which is adjacent to target, and at least 3 tiles away
 		for (int i : PathFinder.NEIGHBOURS8){
 			int cell = target.pos + i;
-			if (Dungeon.level.distance(cell, thrower.pos) >= 3){
+			if (Dungeon.level.distance(cell, thrower.pos) >= 3 && !Dungeon.level.solid[cell]){
 				if (targetCell == -1 ||
 						Dungeon.level.trueDistance(cell, thrower.pos) < Dungeon.level.trueDistance(targetCell, thrower.pos)){
 					targetCell = cell;
@@ -866,7 +866,7 @@ public static boolean throwShocker(final Char thrower, final Char target){
 		//Targets closest cell which is adjacent to target, and not adjacent to thrower or another shocker
 		for (int i : PathFinder.NEIGHBOURS8){
 			int cell = target.pos + i;
-			if (Dungeon.level.distance(cell, thrower.pos) >= 2){
+			if (Dungeon.level.distance(cell, thrower.pos) >= 2 && !Dungeon.level.solid[cell]){
 				boolean validTarget = true;
 				for (ShockerAbility s : thrower.buffs(ShockerAbility.class)){
 					if (Dungeon.level.distance(cell, s.shockerPos) < 2){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/PotionOfMindVision.java
Patch:
@@ -37,7 +37,7 @@ public class PotionOfMindVision extends Potion {
 	@Override
 	public void apply( Hero hero ) {
 		setKnown();
-		Buff.affect( hero, MindVision.class, MindVision.DURATION*100 );
+		Buff.affect( hero, MindVision.class, MindVision.DURATION );
 		Dungeon.observe();
 		
 		if (Dungeon.level.mobs.size() > 0) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -638,10 +638,10 @@ public void rollToDropLoot(){
 			if (bonus != null && !bonus.isEmpty()) {
 				for (Item b : bonus) Dungeon.level.drop(b, pos).sprite.drop();
 				if (RingOfWealth.latestDropWasRare){
-					new Flare(8, 48).color(0xAA00FF, true).show(sprite, 3f);
+					if (sprite != null) new Flare(8, 48).color(0xAA00FF, true).show(sprite, 3f);
 					RingOfWealth.latestDropWasRare = false;
 				} else {
-					new Flare(8, 24).color(0xFFFFFF, true).show(sprite, 3f);
+					if (sprite != null) new Flare(8, 24).color(0xFFFFFF, true).show(sprite, 3f);
 				}
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/ForceCube.java
Patch:
@@ -26,6 +26,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfBlastWave;
+import com.shatteredpixel.shatteredpixeldungeon.levels.traps.TenguDartTrap;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
@@ -58,7 +59,7 @@ protected void onThrow(int cell) {
 		if (Actor.findChar(cell) != null) targets.add(Actor.findChar(cell));
 		
 		for (int i : PathFinder.NEIGHBOURS8){
-			Dungeon.level.pressCell(cell);
+			if (!(Dungeon.level.traps.get(cell+i) instanceof TenguDartTrap)) Dungeon.level.pressCell(cell+i);
 			if (Actor.findChar(cell + i) != null) targets.add(Actor.findChar(cell + i));
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/NewPrisonBossLevel.java
Patch:
@@ -585,7 +585,7 @@ public void occupyCell(Char ch) {
 							
 							FadingTraps f = new FadingTraps();
 							f.setCoveringArea(mazeCells[i]);
-							f.fadeDelay = 1f;
+							f.fadeDelay = 2f;
 							GameScene.add(f, false);
 							customTiles.add(f);
 							
@@ -680,7 +680,7 @@ public void placeTrapsInTenguCell(float fill){
 		GameScene.updateMap();
 		
 		FadingTraps t = new FadingTraps();
-		t.fadeDelay = 1f;
+		t.fadeDelay = 2f;
 		t.setCoveringArea(tenguCell);
 		GameScene.add(t, false);
 		customTiles.add(t);
@@ -795,7 +795,7 @@ private void setFade( ){
 			Actor.addDelayed(new Actor() {
 				
 				{
-					actPriority = HERO_PRIO-1;
+					actPriority = HERO_PRIO+1;
 				}
 				
 				@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/darts/Dart.java
Patch:
@@ -60,7 +60,7 @@ public ArrayList<String> actions(Hero hero) {
 	@Override
 	public void execute(Hero hero, String action) {
 		if (action.equals(AC_TIP)){
-			GameScene.selectItem(itemSelector, WndBag.Mode.SEED, "select a seed");
+			GameScene.selectItem(itemSelector, WndBag.Mode.SEED, Messages.get(this, "prompt"));
 		}
 		
 		super.execute(hero, action);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/DisarmingTrap.java
Patch:
@@ -68,8 +68,10 @@ public void activate() {
 			if (weapon != null && !weapon.cursed) {
 
 				int cell;
+				int tries = 20;
 				do {
 					cell = Dungeon.level.randomRespawnCell();
+					if (tries-- < 0 && cell != -1) break;
 
 					PathFinder.buildDistanceMap(pos, Dungeon.level.passable);
 				} while (cell == -1 || PathFinder.distance[cell] < 10 || PathFinder.distance[cell] > 20);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Bee.java
Patch:
@@ -147,7 +147,7 @@ protected Char chooseEnemy() {
 		}else {
 			
 			//try to find a new enemy in these circumstances
-			if (enemy == null || !enemy.isAlive() || state == WANDERING
+			if (enemy == null || !enemy.isAlive() || !Actor.chars().contains(enemy) || state == WANDERING
 					|| Dungeon.level.distance(enemy.pos, potPos) > 3
 					|| (alignment == Alignment.ALLY && enemy.alignment == Alignment.ALLY)){
 				

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Spinner.java
Patch:
@@ -171,6 +171,9 @@ public void shootWeb(){
 			
 			webCoolDown = 10;
 		}
+		if (Dungeon.level.heroFOV[enemy.pos]){
+			Dungeon.hero.interrupt();
+		}
 		next();
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/effects/MagicMissile.java
Patch:
@@ -94,8 +94,6 @@ public void reset( int type, Visual from, int to, Callback callback ) {
 	public void reset( int type, PointF from, PointF to, Callback callback ) {
 		this.callback = callback;
 		
-		revive();
-		
 		this.to = to;
 		
 		x = from.x;
@@ -174,6 +172,8 @@ public void reset( int type, PointF from, PointF to, Callback callback ) {
 				pour( LeafParticle.GENERAL, 0.03f );
 				break;
 		}
+
+		revive();
 	}
 	
 	public void size( float size ) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTeleportation.java
Patch:
@@ -175,7 +175,7 @@ public static void teleportPreferringUnseen( Hero hero ){
 			int cell;
 			for (Point p : r.charPlaceablePoints(level)){
 				cell = level.pointToCell(p);
-				if (level.passable[cell] && !level.visited[cell] && !level.secret[cell]){
+				if (level.passable[cell] && !level.visited[cell] && !level.secret[cell] && Actor.findChar(cell) == null){
 					candidates.add(cell);
 				}
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/stones/StoneOfIntuition.java
Patch:
@@ -125,7 +125,7 @@ public WndGuess(final Item item){
 			
 			IconTitle titlebar = new IconTitle();
 			titlebar.icon( new ItemSprite(ItemSpriteSheet.STONE_INTUITION, null) );
-			titlebar.label( Messages.get(StoneOfIntuition.class, "name") );
+			titlebar.label( Messages.titleCase(Messages.get(StoneOfIntuition.class, "name")) );
 			titlebar.setRect( 0, 0, WIDTH, 0 );
 			add( titlebar );
 			
@@ -226,7 +226,7 @@ protected void onClick() {
 					protected void onClick() {
 						curGuess = all[j];
 						guess.visible = true;
-						guess.text( Messages.get(curGuess, "name") );
+						guess.text( Messages.titleCase(Messages.get(curGuess, "name")) );
 						guess.enable(true);
 						super.onClick();
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndInfoItem.java
Patch:
@@ -68,7 +68,7 @@ private void fillFields( Heap heap ) {
 		txtInfo.setPos(titlebar.left(), titlebar.bottom() + GAP);
 		add( txtInfo );
 		
-		resize( width, (int)(txtInfo.top() + txtInfo.height()) );
+		resize( width, (int)(txtInfo.bottom() + 2) );
 	}
 	
 	private void fillFields( Item item ) {
@@ -92,6 +92,6 @@ private void fillFields( Item item ) {
 		txtInfo.setPos(titlebar.left(), titlebar.bottom() + GAP);
 		add( txtInfo );
 		
-		resize( width, (int)(txtInfo.top() + txtInfo.height()) );
+		resize( width, (int)(txtInfo.bottom() + 2) );
 	}
 }

File: desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopPlatformSupport.java
Patch:
@@ -119,7 +119,8 @@ public void setupFontGenerators(int pageSize, boolean systemfont) {
 			}
 		}
 		fonts = new HashMap<>();
-		
+
+		//FIXME systemfont setting is currently ignored as DroidSandFallback.ttf is missing key characters
 		basicFontGenerator = new FreeTypeFontGenerator(Gdx.files.internal("pixel_font.ttf"));
 		asianFontGenerator = new FreeTypeFontGenerator(Gdx.files.internal("DroidSansFallback.ttf"));
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Brute.java
Patch:
@@ -77,7 +77,7 @@ public boolean isAlive() {
 			if (!hasRaged){
 				triggerEnrage();
 			}
-			return buff(BruteRage.class) != null;
+			return !buffs(BruteRage.class).isEmpty();
 		}
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Shaman.java
Patch:
@@ -76,7 +76,6 @@ public void rollToDropLoot() {
 		// so loot chance looks like: 1/33, 1/100, 1/300, 1/900, etc.
 		lootChance *= Math.pow(1/3f, Dungeon.LimitedDrops.SHAMAN_WAND.count);
 		super.rollToDropLoot();
-		super.rollToDropLoot();
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Spinner.java
Patch:
@@ -122,6 +122,8 @@ public void move(int step) {
 	}
 	
 	public int webPos(){
+
+		if (enemy == null) return -1;
 		
 		Ballistica b;
 		//aims web in direction enemy is moving, or between self and enemy if they aren't moving
@@ -151,7 +153,7 @@ public int webPos(){
 	
 	public void shootWeb(){
 		int webPos = webPos();
-		if (webPos != enemy.pos && webPos != -1){
+		if (enemy != null && webPos != enemy.pos && webPos != -1){
 			int i;
 			for ( i = 0; i < PathFinder.CIRCLE8.length; i++){
 				if ((enemy.pos + PathFinder.CIRCLE8[i]) == webPos){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfCorruption.java
Patch:
@@ -155,9 +155,9 @@ protected void onZap(Ballistica bolt) {
 			
 			//debuffs placed on the enemy reduce their resistance
 			for (Buff buff : enemy.buffs()){
-				if (MAJOR_DEBUFFS.containsKey(buff.getClass()))         enemyResist *= MAJOR_DEBUFF_WEAKEN;
-				else if (MINOR_DEBUFFS.containsKey(buff.getClass()))    enemyResist *= MINOR_DEBUFF_WEAKEN;
-				else if (buff.type == Buff.buffType.NEGATIVE)           enemyResist *= MINOR_DEBUFF_WEAKEN;
+				if (MAJOR_DEBUFFS.containsKey(buff.getClass()))         enemyResist *= (1f-MAJOR_DEBUFF_WEAKEN);
+				else if (MINOR_DEBUFFS.containsKey(buff.getClass()))    enemyResist *= (1f-MINOR_DEBUFF_WEAKEN);
+				else if (buff.type == Buff.buffType.NEGATIVE)           enemyResist *= (1f-MINOR_DEBUFF_WEAKEN);
 			}
 			
 			//cannot re-corrupt or doom an enemy, so give them a major debuff instead

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/CharSprite.java
Patch:
@@ -181,9 +181,9 @@ public void showStatus( int color, String text, Object... args ) {
 				text = Messages.format( text, args );
 			}
 			if (ch != null) {
-				FloatingText.show( x + width * 0.5f, y, ch.pos, text, color );
+				FloatingText.show( x + width() * 0.5f, y, ch.pos, text, color );
 			} else {
-				FloatingText.show( x + width * 0.5f, y, text, color );
+				FloatingText.show( x + width() * 0.5f, y, text, color );
 			}
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/NewTengu.java
Patch:
@@ -33,6 +33,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Burning;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.LockedFloor;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Terror;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroSubClass;
 import com.shatteredpixel.shatteredpixeldungeon.effects.BlobEmitter;
@@ -53,7 +54,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.levels.Level;
 import com.shatteredpixel.shatteredpixeldungeon.levels.NewPrisonBossLevel;
 import com.shatteredpixel.shatteredpixeldungeon.mechanics.Ballistica;
-import com.shatteredpixel.shatteredpixeldungeon.messages.Languages;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite;
@@ -305,6 +305,7 @@ public void notice() {
 	
 	{
 		immunities.add( Blindness.class );
+		immunities.add( Terror.class );
 	}
 	
 	private static final String LAST_ABILITY     = "last_ability";

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Scorpio.java
Patch:
@@ -30,6 +30,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfHealing;
+import com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfStrength;
 import com.shatteredpixel.shatteredpixeldungeon.mechanics.Ballistica;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ScorpioSprite;
 import com.watabou.utils.Random;
@@ -98,7 +99,7 @@ protected Item createLoot() {
 		Class<?extends Potion> loot;
 		do{
 			loot = (Class<? extends Potion>) Random.oneOf(Generator.Category.POTION.classes);
-		} while (loot == PotionOfHealing.class);
+		} while (loot == PotionOfHealing.class || loot == PotionOfStrength.class);
 
 		return Reflection.newInstance(loot);
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Succubus.java
Patch:
@@ -36,6 +36,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfIdentify;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfTeleportation;
+import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfUpgrade;
 import com.shatteredpixel.shatteredpixeldungeon.mechanics.Ballistica;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.SuccubusSprite;
 import com.watabou.noosa.audio.Sample;
@@ -157,7 +158,7 @@ protected Item createLoot() {
 		Class<?extends Scroll> loot;
 		do{
 			loot = (Class<? extends Scroll>) Random.oneOf(Generator.Category.SCROLL.classes);
-		} while (loot == ScrollOfIdentify.class);
+		} while (loot == ScrollOfIdentify.class || loot == ScrollOfUpgrade.class);
 
 		return Reflection.newInstance(loot);
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/effects/EmoIcon.java
Patch:
@@ -61,7 +61,7 @@ public void update() {
 				}
 			}
 			
-			x = owner.x + owner.width - width / 2;
+			x = owner.x + owner.width() - width / 2;
 			y = owner.y - height;
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/glyphs/AntiMagic.java
Patch:
@@ -26,6 +26,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Weakness;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Eye;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM100;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Shaman;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Warlock;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Yog;
 import com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor;
@@ -70,6 +71,7 @@ public class AntiMagic extends Armor.Glyph {
 		RESISTS.add( WandOfWarding.Ward.class );
 		
 		RESISTS.add( DM100.LightningBolt.class );
+		RESISTS.add( Shaman.EarthenBolt.class );
 		RESISTS.add( Warlock.DarkBolt.class );
 		RESISTS.add( Eye.DeathGaze.class );
 		RESISTS.add( Yog.BurningFist.DarkBolt.class );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfElements.java
Patch:
@@ -35,6 +35,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Weakness;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Eye;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DM100;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Shaman;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Warlock;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Yog;
 import com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfBlastWave;
@@ -99,6 +100,7 @@ protected RingBuff buff( ) {
 		RESISTS.add( Electricity.class );
 		
 		RESISTS.add( DM100.LightningBolt.class );
+		RESISTS.add( Shaman.EarthenBolt.class );
 		RESISTS.add( Warlock.DarkBolt.class );
 		RESISTS.add( Eye.DeathGaze.class );
 		RESISTS.add( Yog.BurningFist.DarkBolt.class );

File: desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopLauncher.java
Patch:
@@ -60,6 +60,7 @@ public static void main (String[] arg) {
 		Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
 			@Override
 			public void uncaughtException(Thread thread, Throwable throwable) {
+				Game.reportException(throwable);
 				StringWriter sw = new StringWriter();
 				PrintWriter pw = new PrintWriter(sw);
 				throwable.printStackTrace(pw);

File: SPD-classes/src/main/java/com/watabou/utils/Bundle.java
Patch:
@@ -393,7 +393,7 @@ public void put( String key, Class[] array ){
 		try {
 			JSONArray jsonArray = new JSONArray();
 			for (int i=0; i < array.length; i++) {
-				jsonArray.put( i, array[i].getCanonicalName() );
+				jsonArray.put( i, array[i].getName() );
 			}
 			data.put( key, jsonArray );
 		} catch (JSONException e) {

File: SPD-classes/src/main/java/com/watabou/noosa/Image.java
Patch:
@@ -94,6 +94,8 @@ public void copy( Image other ) {
 		
 		width = other.width;
 		height = other.height;
+
+		scale = other.scale;
 		
 		updateFrame();
 		updateVertices();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/ChangeButton.java
Patch:
@@ -60,8 +60,8 @@ protected void onClick() {
 	protected void layout() {
 		super.layout();
 		
-		icon.x = x + (width - icon.width) / 2f;
-		icon.y = y + (height - icon.height) / 2f;
+		icon.x = x + (width - icon.width()) / 2f;
+		icon.y = y + (height - icon.height()) / 2f;
 		PixelScene.align(icon);
 	}
 }

File: SPD-classes/src/main/java/com/watabou/utils/Bundle.java
Patch:
@@ -372,7 +372,7 @@ public void put( String key, Class[] array ){
 		try {
 			JSONArray jsonArray = new JSONArray();
 			for (int i=0; i < array.length; i++) {
-				jsonArray.put( i, array[i] );
+				jsonArray.put( i, array[i].getCanonicalName() );
 			}
 			data.put( key, jsonArray );
 		} catch (JSONException e) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/GooWarn.java
Patch:
@@ -33,8 +33,8 @@ public class GooWarn extends Blob {
 	//cosmetic blob, used to warn noobs that goo's pump up should, infact, be avoided.
 
 	{
-		//this one needs to act after the Goo
-		actPriority = MOB_PRIO - 1;
+		//this one needs to act just before the Goo
+		actPriority = MOB_PRIO + 1;
 	}
 
 	protected int pos;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/MirrorImage.java
Patch:
@@ -28,6 +28,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.blobs.ToxicGas;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Burning;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Corruption;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Invisibility;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
@@ -184,6 +185,7 @@ public CharSprite sprite() {
 		immunities.add( ToxicGas.class );
 		immunities.add( CorrosiveGas.class );
 		immunities.add( Burning.class );
+		immunities.add( Corruption.class );
 	}
 	
 	public static class MirrorInvis extends Invisibility {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTeleportation.java
Patch:
@@ -121,7 +121,7 @@ public static void teleportHero( Hero  hero ) {
 			if (count-- <= 0) {
 				break;
 			}
-		} while (pos == -1);
+		} while (pos == -1 || Dungeon.level.secret[pos]);
 		
 		if (pos == -1) {
 			
@@ -168,7 +168,7 @@ public static void teleportPreferringUnseen( Hero hero ){
 			int cell;
 			for (Point p : r.charPlaceablePoints(level)){
 				cell = level.pointToCell(p);
-				if (level.passable[cell] && !level.visited[cell] && Actor.findChar(cell) == null){
+				if (level.passable[cell] && !level.visited[cell] && !level.secret[cell]){
 					candidates.add(cell);
 				}
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -338,6 +338,7 @@ public Item random() {
 			}
 		}
 		level(n);
+		curCharges += n;
 		
 		//30% chance to be cursed
 		if (Random.Float() < 0.3f) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/StormCloud.java
Patch:
@@ -40,7 +40,7 @@ protected void evolve() {
 		for (int i = area.left; i < area.right; i++){
 			for (int j = area.top; j < area.bottom; j++){
 				cell = i + j*Dungeon.level.width();
-				if (off[cell] > 0) {
+				if (cur[cell] > 0) {
 					int terr = Dungeon.level.map[cell];
 					if (terr == Terrain.EMPTY || terr == Terrain.GRASS ||
 							terr == Terrain.EMBERS || terr == Terrain.EMPTY_SP ||

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/MissileWeapon.java
Patch:
@@ -99,6 +99,7 @@ public int STRReq(int lvl){
 	//FIXME some logic here assumes the items are in the player's inventory. Might need to adjust
 	public Item upgrade() {
 		if (!bundleRestoring) {
+			durability = MAX_DURABILITY;
 			if (quantity > 1) {
 				MissileWeapon upgraded = (MissileWeapon) split(1);
 				upgraded.parent = null;
@@ -112,7 +113,6 @@ public Item upgrade() {
 				updateQuickslot();
 				return upgraded;
 			} else {
-				durability = MAX_DURABILITY;
 				super.upgrade();
 				
 				Item similar = Dungeon.hero.belongings.getSimilar(this);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -340,7 +340,8 @@ protected boolean getCloser( int target ) {
 
 			path = null;
 
-			if (Actor.findChar( target ) == null && Dungeon.level.passable[target]) {
+			if (Actor.findChar( target ) == null &&
+					(Dungeon.level.passable[target] || (flying && Dungeon.level.avoid[target]))) {
 				step = target;
 			}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Item.java
Patch:
@@ -113,7 +113,8 @@ public boolean doPickUp( Hero hero ) {
 	
 	public void doDrop( Hero hero ) {
 		hero.spendAndNext(TIME_TO_DROP);
-		Dungeon.level.drop(detachAll(hero.belongings.backpack), hero.pos).sprite.drop(hero.pos);
+		int pos = hero.pos;
+		Dungeon.level.drop(detachAll(hero.belongings.backpack), pos).sprite.drop(pos);
 	}
 
 	//resets an item's properties, to ensure consistency between runs

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Goo.java
Patch:
@@ -211,6 +211,9 @@ protected boolean getCloser( int target ) {
 
 	@Override
 	public void damage(int dmg, Object src) {
+		if (!BossHealthBar.isAssigned()){
+			BossHealthBar.assignBoss( this );
+		}
 		boolean bleeding = (HP*2 <= HT);
 		super.damage(dmg, src);
 		if ((HP*2 <= HT) && !bleeding){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/glyphs/Viscosity.java
Patch:
@@ -45,7 +45,7 @@ public int proc( Armor armor, Char attacker, Char defender, int damage ) {
 
 		//FIXME this glyph should really just proc after DR is accounted for.
 		//should build in functionality for that, but this works for now
-		int realDamage = damage - Random.NormalIntRange( armor.DRMin(), armor.DRMax());
+		int realDamage = damage - defender.drRoll();
 
 		if (realDamage <= 0) {
 			return 0;

File: SPD-classes/src/main/java/com/watabou/noosa/Visual.java
Patch:
@@ -138,12 +138,12 @@ public Point point( Point p ) {
 	}
 	
 	public PointF center() {
-		return new PointF( x + width / 2, y + height / 2 );
+		return new PointF( x + width() / 2, y + height() / 2 );
 	}
 	
 	public PointF center( PointF p ) {
-		x = p.x - width / 2;
-		y = p.y - height / 2;
+		x = p.x - width() / 2;
+		y = p.y - height() / 2;
 		return p;
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/TargetHealthIndicator.java
Patch:
@@ -42,7 +42,7 @@ public void update() {
 		
 		if (target != null && target.isAlive() && target.sprite.visible) {
 			CharSprite sprite = target.sprite;
-			width = sprite.width;
+			width = sprite.width();
 			x = sprite.x;
 			y = sprite.y - 3;
 			level( target );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/DriedRose.java
Patch:
@@ -250,12 +250,12 @@ public void charge(Hero target) {
 		if (ghost == null){
 			if (charge < chargeCap) {
 				charge += 4;
-				updateQuickslot();
 				if (charge >= chargeCap) {
 					charge = chargeCap;
 					partialCharge = 0;
 					GLog.p(Messages.get(DriedRose.class, "charged"));
 				}
+				updateQuickslot();
 			}
 		} else {
 			ghost.HP = Math.min( ghost.HT, ghost.HP + 1 + level()/3);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfCorruption.java
Patch:
@@ -85,7 +85,7 @@ public class WandOfCorruption extends Wand {
 	// This is because the wand of corruption considers them to be a certain level of harmful
 	// for the purposes of reducing resistance, but does not actually apply them itself
 	
-	private static final float MINOR_DEBUFF_WEAKEN = 7/8f;
+	private static final float MINOR_DEBUFF_WEAKEN = 1/4f;
 	private static final HashMap<Class<? extends Buff>, Float> MINOR_DEBUFFS = new HashMap<>();
 	static{
 		MINOR_DEBUFFS.put(Weakness.class,       2f);
@@ -103,7 +103,7 @@ public class WandOfCorruption extends Wand {
 		MINOR_DEBUFFS.put(Poison.class,         0f);
 	}
 	
-	private static final float MAJOR_DEBUFF_WEAKEN = 4/5f;
+	private static final float MAJOR_DEBUFF_WEAKEN = 1/2f;
 	private static final HashMap<Class<? extends Buff>, Float> MAJOR_DEBUFFS = new HashMap<>();
 	static{
 		MAJOR_DEBUFFS.put(Amok.class,           3f);
@@ -130,7 +130,7 @@ protected void onZap(Ballistica bolt) {
 
 			Mob enemy = (Mob) ch;
 
-			float corruptingPower = 3 + level()/2;
+			float corruptingPower = 3 + level()/2f;
 			
 			//base enemy resistance is usually based on their exp, but in special cases it is based on other criteria
 			float enemyResist = 1 + enemy.EXP;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/TeleportationTrap.java
Patch:
@@ -88,7 +88,9 @@ public void activate() {
 			Item item = heap.pickUp();
 
 			if (cell != -1) {
-				Dungeon.level.drop( item, cell );
+				Heap dropped = Dungeon.level.drop( item, cell );
+				dropped.type = heap.type;
+				dropped.sprite.view( dropped );
 			}
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/CausticSlimeSprite.java
Patch:
@@ -41,8 +41,8 @@ public CausticSlimeSprite() {
 		run = new Animation( 10, true );
 		run.frames( frames, c+0, c+2, c+3, c+3, c+2, c+0 );
 		
-		attack = new Animation( 10, false );
-		attack.frames( frames, c+2, c+3, c+4, c+5, c+2 );
+		attack = new Animation( 15, false );
+		attack.frames( frames, c+2, c+3, c+4, c+6, c+5 );
 		
 		die = new Animation( 10, false );
 		die.frames( frames, c+0, c+5, c+6, c+7 );

File: desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopLauncher.java
Patch:
@@ -58,7 +58,7 @@ public void uncaughtException(Thread thread, Throwable throwable) {
 		
 		config.title = DesktopLauncher.class.getPackage().getSpecificationTitle();
 		if (config.title == null) {
-			config.title = System.getProperty("Specification-Name");
+			config.title = System.getProperty("Specification-Title");
 		}
 		
 		Game.version = DesktopLauncher.class.getPackage().getSpecificationVersion();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfLightning.java
Patch:
@@ -92,8 +92,6 @@ public void onHit(MagesStaff staff, Char attacker, Char defender, int damage) {
 	}
 
 	private void arc( Char ch ) {
-		
-		affected.add( ch );
 
 		int dist = (Dungeon.level.water[ch.pos] && !ch.flying) ? 2 : 1;
 
@@ -128,6 +126,7 @@ protected void fx( Ballistica bolt, Callback callback ) {
 
 		Char ch = Actor.findChar( cell );
 		if (ch != null) {
+			affected.add( ch );
 			arcs.add( new Lightning.Arc(curUser.sprite.center(), ch.sprite.center()));
 			arc(ch);
 		} else {

File: desktop/src/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopLauncher.java
Patch:
@@ -73,7 +73,7 @@ public void uncaughtException(Thread thread, Throwable throwable) {
 		try {
 			Game.versionCode = Integer.parseInt(DesktopLauncher.class.getPackage().getImplementationVersion());
 		} catch (NumberFormatException e) {
-			Game.versionCode = 381;
+			Game.versionCode = 382;
 		}
 		
 		new LwjglApplication(new ShatteredPixelDungeon(new DesktopPlatformSupport()), config);

File: desktop/src/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopLauncher.java
Patch:
@@ -42,9 +42,9 @@ public void uncaughtException(Thread thread, Throwable throwable) {
 				PrintWriter pw = new PrintWriter(sw);
 				throwable.printStackTrace(pw);
 				pw.flush();
-				JOptionPane.showMessageDialog(null, "Shattered Pixel Dungeon has crashed! Sorry about that!\n\n" +
+				JOptionPane.showMessageDialog(null, "Shattered Pixel Dungeon has crashed, sorry about that!\n\n" +
 						"If you could, please email this error message to me and I'll get it fixed (Evan@ShatteredPixel.com):\n\n" +
-						sw.toString());
+						sw.toString(), "Game Crash!", JOptionPane.ERROR_MESSAGE);
 				Gdx.app.exit();
 			}
 		});

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/MissileWeapon.java
Patch:
@@ -25,6 +25,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Corruption;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.PinCushion;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroClass;
@@ -200,7 +201,7 @@ protected void rangedHit( Char enemy, int cell ){
 		decrementDurability();
 		if (durability > 0){
 			//attempt to stick the missile weapon to the enemy, just drop it if we can't.
-			if (enemy != null && enemy.isAlive() && sticky) {
+			if (sticky && enemy != null && enemy.isAlive() && enemy.buff(Corruption.class) == null){
 				PinCushion p = Buff.affect(enemy, PinCushion.class);
 				if (p.target == enemy){
 					p.stick(this);

File: android/src/main/java/com/shatteredpixel/shatteredpixeldungeon/android/AndroidPlatformSupport.java
Patch:
@@ -383,10 +383,10 @@ public BitmapFont getFont(int size, String text) {
 					"(?<=\\p{InCJK_Symbols_and_Punctuation})|(?=\\p{InCJK_Symbols_and_Punctuation})|" +
 					"(?<=\\p{InHalfwidth_and_Fullwidth_Forms})|(?=\\p{InHalfwidth_and_Fullwidth_Forms})");
 	
-	//splits on each group of hangul syllables. Needed for weird android 6.0 font files
+	//splits on each non-hangul character. Needed for weird android 6.0 font files
 	private Pattern android6KRSplitter = Pattern.compile(
 			"(?<= )|(?= )|(?<=\n)|(?=\n)|(?<=_)|(?=_)|" +
-					"(?!\\p{InHangul_Syllables})");
+					"(?!\\p{InHangul_Syllables})|(?<!\\p{InHangul_Syllables})");
 	
 	@Override
 	public String[] splitforTextBlock(String text, boolean multiline) {

File: SPD-classes/src/main/java/com/watabou/noosa/Camera.java
Patch:
@@ -173,7 +173,7 @@ public void update() {
 			panMove.x = panTarget.x - (scroll.x + width/2f);
 			panMove.y = panTarget.y - (scroll.y + height/2f);
 			
-			panMove.scale(Game.elapsed * panIntensity);
+			panMove.scale(Math.min(1f, Game.elapsed * panIntensity));
 			
 			scroll.offset(panMove);
 		}

File: android/src/main/java/com/shatteredpixel/shatteredpixeldungeon/android/AndroidPlatformSupport.java
Patch:
@@ -244,6 +244,7 @@ public void setupFontGenerators(int pageSize, boolean systemfont) {
 				KRFontGenerator = new FreeTypeFontGenerator(Gdx.files.absolute("/system/fonts/NanumGothic.ttf"));
 			} else if (Gdx.files.absolute("/system/fonts/NotoSansKR-Regular.otf").exists()){
 				KRFontGenerator = new FreeTypeFontGenerator(Gdx.files.absolute("/system/fonts/NotoSansKR-Regular.otf"));
+				koreanAndroid6OTF = true;
 			}
 			
 			//Chinese font generators

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/DriedRose.java
Patch:
@@ -147,6 +147,8 @@ public void execute( Hero hero, String action ) {
 					ghost.pos = Random.element(spawnPoints);
 
 					GameScene.add(ghost, 1f);
+					Dungeon.level.occupyCell(ghost);
+					
 					CellEmitter.get(ghost.pos).start( ShaftParticle.FACTORY, 0.3f, 4 );
 					CellEmitter.get(ghost.pos).start( Speck.factory(Speck.LIGHT), 0.2f, 3 );
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -885,7 +885,7 @@ private boolean actAscend( HeroAction.Ascend action ) {
 					Game.runOnRenderThread(new Callback() {
 						@Override
 						public void call() {
-							GameScene.show( new WndMessage( Messages.get(this, "leave") ) );
+							GameScene.show( new WndMessage( Messages.get(Hero.this, "leave") ) );
 						}
 					});
 					ready();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndInfoBuff.java
Patch:
@@ -60,7 +60,7 @@ public WndInfoBuff(Buff buff){
 
 		RenderedTextBlock txtInfo = PixelScene.renderTextBlock(buff.desc(), 6);
 		txtInfo.maxWidth(WIDTH);
-		txtInfo.setPos(titlebar.left(), titlebar.bottom() + GAP);
+		txtInfo.setPos(titlebar.left(), titlebar.bottom() + 2*GAP);
 		add( txtInfo );
 
 		resize( WIDTH, (int)txtInfo.bottom() + 2 );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndInfoCell.java
Patch:
@@ -117,8 +117,8 @@ public WndInfoCell( int cell ) {
 		
 		info.text( desc.length() == 0 ? Messages.get(this, "nothing") : desc );
 		info.maxWidth(WIDTH);
-		info.setPos(titlebar.left(), titlebar.bottom() + GAP);
+		info.setPos(titlebar.left(), titlebar.bottom() + 2*GAP);
 		
-		resize( WIDTH, (int)(info.top() + info.height()) );
+		resize( WIDTH, (int)info.bottom()+2 );
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndInfoMob.java
Patch:
@@ -71,11 +71,11 @@ protected void layout() {
 			image.y = Math.max( 0, name.height() + health.height() - image.height );
 
 			name.setPos(x + image.width + GAP,
-					image.height > name.height() ? y +(name.height() - image.height()) / 2 : y);
+					image.height > name.height() ? y +(image.height() - name.height()) / 2 : y);
 
 			float w = width - image.width - GAP;
 
-			health.setRect(image.width + GAP, name.bottom(), w, health.height());
+			health.setRect(image.width + GAP, name.bottom() + GAP, w, health.height());
 
 			buffs.setPos(
 				name.right() + GAP-1,

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndLangs.java
Patch:
@@ -116,7 +116,7 @@ public void afterCreate() {
 
 		//language info layout.
 		RenderedTextBlock title = PixelScene.renderTextBlock( Messages.titleCase(currLang.nativeName()) , 9 );
-		title.setPos( textLeft + (textWidth - title.width())/2f, 0 );
+		title.setPos( textLeft + (textWidth - title.width())/2f, 2 );
 		title.hardlight(TITLE_COLOR);
 		PixelScene.align(title);
 		add(title);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndStory.java
Patch:
@@ -71,7 +71,7 @@ public WndStory( String text ) {
 					WIDTH_L - MARGIN * 2:
 					WIDTH_P - MARGIN *2);
 		tf.invert();
-		tf.setPos(MARGIN, 0);
+		tf.setPos(MARGIN, 2);
 		add( tf );
 		
 		add( new PointerArea( chrome ) {
@@ -81,7 +81,7 @@ protected void onClick( PointerEvent event ) {
 			}
 		} );
 		
-		resize( (int)(tf.width() + MARGIN * 2), (int)Math.min( tf.height(), 180 ) );
+		resize( (int)(tf.width() + MARGIN * 2), (int)Math.min( tf.height()+2, 180 ) );
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndTitledMessage.java
Patch:
@@ -51,7 +51,7 @@ public WndTitledMessage( Component titlebar, String message ) {
 
 		RenderedTextBlock text = PixelScene.renderTextBlock( 6 );
 		text.text( message, width );
-		text.setPos( titlebar.left(), titlebar.bottom() + GAP );
+		text.setPos( titlebar.left(), titlebar.bottom() + 2*GAP );
 		add( text );
 
 		resize( width, (int)text.bottom() + 2 );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndInfoBuff.java
Patch:
@@ -63,6 +63,6 @@ public WndInfoBuff(Buff buff){
 		txtInfo.setPos(titlebar.left(), titlebar.bottom() + GAP);
 		add( txtInfo );
 
-		resize( WIDTH, (int)(txtInfo.top() + txtInfo.height()) );
+		resize( WIDTH, (int)txtInfo.bottom() + 2 );
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Swarm.java
Patch:
@@ -102,9 +102,7 @@ public int defenseProc( Char enemy, int damage ) {
 				clone.pos = Random.element( candidates );
 				clone.state = clone.HUNTING;
 				
-				if (Dungeon.level.map[clone.pos] == Terrain.DOOR) {
-					Door.enter( clone.pos );
-				}
+				Dungeon.level.occupyCell(clone);
 				
 				GameScene.add( clone, SPLIT_DELAY );
 				Actor.addDelayed( new Pushing( clone, pos, clone.pos ), -1 );

File: android/src/main/java/com/shatteredpixel/shatteredpixeldungeon/android/AndroidPlatformSupport.java
Patch:
@@ -353,7 +353,7 @@ public String[] splitforTextBlock(String text, boolean multiline) {
 	public float getFontHeightOffset( BitmapFont font ){
 		//more weirdness with android 6 OTF fonts
 		if (android6OTFPresent && !basicFonts.containsValue(font)){
-			return -0.2f;
+			return -0.25f;
 		} else {
 			return 0.0f;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/StyledButton.java
Patch:
@@ -141,7 +141,7 @@ public float reqHeight() {
 			reqHeight = Math.max(icon.height() + 4, reqHeight);
 		}
 		if (text != null && !text.text().equals("")){
-			reqHeight = Math.max(text.baseLine() + 4, reqHeight);
+			reqHeight = Math.max(text.height() + 4, reqHeight);
 		}
 		return reqHeight;
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndTitledMessage.java
Patch:
@@ -54,6 +54,6 @@ public WndTitledMessage( Component titlebar, String message ) {
 		text.setPos( titlebar.left(), titlebar.bottom() + GAP );
 		add( text );
 
-		resize( width, (int)text.bottom() );
+		resize( width, (int)text.bottom() + 2 );
 	}
 }

File: SPD-classes/src/main/java/com/watabou/noosa/Game.java
Patch:
@@ -110,7 +110,9 @@ public void create() {
 	
 	@Override
 	public void resize(int width, int height) {
-		Gdx.gl.glViewport(0, 0, width, height);
+		Blending.useDefault();
+		TextureCache.reload();
+		Vertexbuffer.refreshAllBuffers();
 		
 		if (height != Game.height || width != Game.width) {
 			

File: SPD-classes/src/main/java/com/watabou/glscripts/Script.java
Patch:
@@ -30,7 +30,7 @@
 public class Script extends Program {
 
 	private static final HashMap<Class<? extends Script>,Script> all =
-		new HashMap<Class<? extends Script>, Script>();
+			new HashMap<>();
 	
 	private static Script curScript = null;
 	private static Class<? extends Script> curScriptClass = null;

File: SPD-classes/src/main/java/com/watabou/gltextures/Atlas.java
Patch:
@@ -42,7 +42,7 @@ public Atlas( SmartTexture tx ) {
 		this.tx = tx;
 		tx.atlas = this;
 		
-		namedFrames = new HashMap<Object, RectF>();
+		namedFrames = new HashMap<>();
 	}
 	
 	public void add( Object key, int left, int top, int right, int bottom ) {

File: SPD-classes/src/main/java/com/watabou/noosa/Camera.java
Patch:
@@ -30,7 +30,7 @@
 
 public class Camera extends Gizmo {
 
-	private static ArrayList<Camera> all = new ArrayList<Camera>();
+	private static ArrayList<Camera> all = new ArrayList<>();
 	
 	protected static float invW2;
 	protected static float invH2;

File: SPD-classes/src/main/java/com/watabou/noosa/Group.java
Patch:
@@ -38,7 +38,7 @@ public class Group extends Gizmo {
 	public static boolean freezeEmitters = false;
 	
 	public Group() {
-		members = new ArrayList<Gizmo>();
+		members = new ArrayList<>();
 		length = 0;
 	}
 	

File: SPD-classes/src/main/java/com/watabou/noosa/TextureFilm.java
Patch:
@@ -36,7 +36,7 @@ public class TextureFilm {
 
 	private SmartTexture texture;
 	
-	protected HashMap<Object,RectF> frames = new HashMap<Object, RectF>();
+	protected HashMap<Object,RectF> frames = new HashMap<>();
 	
 	public TextureFilm( Object tx ) {
 		

File: SPD-classes/src/main/java/com/watabou/utils/BitmapCache.java
Patch:
@@ -31,7 +31,7 @@ public class BitmapCache {
 
 	private static final String DEFAULT	= "__default";
 	
-	private static HashMap<String,Layer> layers = new HashMap<String, BitmapCache.Layer>();
+	private static HashMap<String,Layer> layers = new HashMap<>();
 	
 	public static Pixmap get( String assetName ) {
 		return get( DEFAULT, assetName );

File: SPD-classes/src/main/java/com/watabou/utils/BitmapFilm.java
Patch:
@@ -29,7 +29,7 @@ public class BitmapFilm {
 
 	public Pixmap bitmap;
 	
-	protected HashMap<Object,Rect> frames = new HashMap<Object, Rect>();
+	protected HashMap<Object,Rect> frames = new HashMap<>();
 	
 	public BitmapFilm( Pixmap bitmap ) {
 		this.bitmap = bitmap;

File: SPD-classes/src/main/java/com/watabou/utils/Bundle.java
Patch:
@@ -46,7 +46,7 @@ public class Bundle {
 
 	private static final String CLASS_NAME = "__className";
 	
-	private static HashMap<String,String> aliases = new HashMap<String, String>();
+	private static HashMap<String,String> aliases = new HashMap<>();
 	
 	private JSONObject data;
 	
@@ -226,7 +226,7 @@ public Class[] getClassArray( String key ) {
 	
 	public Collection<Bundlable> getCollection( String key ) {
 		
-		ArrayList<Bundlable> list = new ArrayList<Bundlable>();
+		ArrayList<Bundlable> list = new ArrayList<>();
 		
 		try {
 			JSONArray array = data.getJSONArray( key );

File: SPD-classes/src/main/java/com/watabou/utils/Graph.java
Patch:
@@ -40,7 +40,7 @@ public static <T extends Node> void buildDistanceMap( Collection<T> nodes, Node
 			node.distance( Integer.MAX_VALUE );
 		}
 		
-		LinkedList<Node> queue = new LinkedList<Node>();
+		LinkedList<Node> queue = new LinkedList<>();
 		
 		focus.distance( 0 );
 		queue.add( focus );
@@ -63,7 +63,7 @@ public static <T extends Node> void buildDistanceMap( Collection<T> nodes, Node
 	@SuppressWarnings("unchecked")
 	public static <T extends Node> List<T> buildPath( Collection<T> nodes, T from, T to ) {
 		
-		List<T> path = new ArrayList<T>();
+		List<T> path = new ArrayList<>();
 		
 		T room = from;
 		while (room != to) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Bones.java
Patch:
@@ -96,7 +96,7 @@ private static Item pickItem(Hero hero){
 
 			Iterator<Item> iterator = hero.belongings.backpack.iterator();
 			Item curItem;
-			ArrayList<Item> items = new ArrayList<Item>();
+			ArrayList<Item> items = new ArrayList<>();
 			while (iterator.hasNext()){
 				curItem = iterator.next();
 				if (curItem.bones)

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -198,7 +198,7 @@ public static void init() {
 		for (LimitedDrops a : LimitedDrops.values())
 			a.count = 0;
 		
-		chapters = new HashSet<Integer>();
+		chapters = new HashSet<>();
 		
 		Ghost.Quest.reset();
 		Wandmaker.Quest.reset();
@@ -413,7 +413,7 @@ public static void dropToChasm( Item item ) {
 		int depth = Dungeon.depth + 1;
 		ArrayList<Item> dropped = Dungeon.droppedItems.get( depth );
 		if (dropped == null) {
-			Dungeon.droppedItems.put( depth, dropped = new ArrayList<Item>() );
+			Dungeon.droppedItems.put( depth, dropped = new ArrayList<>() );
 		}
 		dropped.add( item );
 	}
@@ -589,7 +589,7 @@ public static void loadGame( int save, boolean fullLoad ) throws IOException {
 			
 			LimitedDrops.restore( bundle.getBundle(LIMDROPS) );
 
-			chapters = new HashSet<Integer>();
+			chapters = new HashSet<>();
 			int ids[] = bundle.getIntArray( CHAPTERS );
 			if (ids != null) {
 				for (int id : ids) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/QuickSlot.java
Patch:
@@ -105,7 +105,7 @@ public void convertToPlaceholder(Item item){
 
 	public Item randomNonePlaceholder(){
 
-		ArrayList<Item> result = new ArrayList<Item>();
+		ArrayList<Item> result = new ArrayList<>();
 		for (int i = 0; i < SIZE; i ++)
 		if (getItem(i) != null && !isPlaceholder(i))
 				result.add(getItem(i));
@@ -123,7 +123,7 @@ public Item randomNonePlaceholder(){
 	 */
 
 	public void storePlaceholders(Bundle bundle){
-		ArrayList<Item> placeholders = new ArrayList<Item>(SIZE);
+		ArrayList<Item> placeholders = new ArrayList<>(SIZE);
 		boolean[] placements = new boolean[SIZE];
 
 		for (int i = 0; i < SIZE; i++)

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/PinCushion.java
Patch:
@@ -31,7 +31,7 @@
 
 public class PinCushion extends Buff {
 
-	private ArrayList<MissileWeapon> items = new ArrayList<MissileWeapon>();
+	private ArrayList<MissileWeapon> items = new ArrayList<>();
 
 	public void stick(MissileWeapon projectile){
 		for (Item item : items){
@@ -60,7 +60,7 @@ public void storeInBundle(Bundle bundle) {
 
 	@Override
 	public void restoreFromBundle(Bundle bundle) {
-		items = new ArrayList<MissileWeapon>((Collection<MissileWeapon>)((Collection<?>)bundle.getCollection( ITEMS )));
+		items = new ArrayList<>((Collection<MissileWeapon>) ((Collection<?>) bundle.getCollection(ITEMS)));
 		super.restoreFromBundle( bundle );
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -191,7 +191,7 @@ public Hero() {
 		
 		belongings = new Belongings( this );
 		
-		visibleEnemies = new ArrayList<Mob>();
+		visibleEnemies = new ArrayList<>();
 	}
 	
 	public void updateHT( boolean boostHP ){
@@ -1459,7 +1459,7 @@ public static void reallyDie( Object cause ) {
 
 		int pos = Dungeon.hero.pos;
 
-		ArrayList<Integer> passable = new ArrayList<Integer>();
+		ArrayList<Integer> passable = new ArrayList<>();
 		for (Integer ofs : PathFinder.NEIGHBOURS8) {
 			int cell = pos + ofs;
 			if ((Dungeon.level.passable[cell] || Dungeon.level.avoid[cell]) && Dungeon.level.heaps.get( cell ) == null) {
@@ -1468,7 +1468,7 @@ public static void reallyDie( Object cause ) {
 		}
 		Collections.shuffle( passable );
 
-		ArrayList<Item> items = new ArrayList<Item>( Dungeon.hero.belongings.backpack.items );
+		ArrayList<Item> items = new ArrayList<>(Dungeon.hero.belongings.backpack.items);
 		for (Integer cell : passable) {
 			if (items.isEmpty()) {
 				break;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/effects/FloatingText.java
Patch:
@@ -42,7 +42,7 @@ public class FloatingText extends RenderedText {
 
 	private float cameraZoom = -1;
 
-	private static final SparseArray<ArrayList<FloatingText>> stacks = new SparseArray<ArrayList<FloatingText>>();
+	private static final SparseArray<ArrayList<FloatingText>> stacks = new SparseArray<>();
 	
 	public FloatingText() {
 		speed.y = - DISTANCE / LIFESPAN;
@@ -123,7 +123,7 @@ private static void push( FloatingText txt, int key ) {
 			
 			ArrayList<FloatingText> stack = stacks.get(key);
 			if (stack == null) {
-				stack = new ArrayList<FloatingText>();
+				stack = new ArrayList<>();
 				stacks.put(key, stack);
 			}
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/effects/SpellSprite.java
Patch:
@@ -56,7 +56,7 @@ private enum Phase {
 	private float duration;
 	private float passed;
 	
-	private static HashMap<Char,SpellSprite> all = new HashMap<Char, SpellSprite>();
+	private static HashMap<Char,SpellSprite> all = new HashMap<>();
 	
 	public SpellSprite() {
 		super( Assets.SPELL_ICONS );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Gold.java
Patch:
@@ -55,7 +55,7 @@ public Gold( int value ) {
 	
 	@Override
 	public ArrayList<String> actions( Hero hero ) {
-		return new ArrayList<String>();
+		return new ArrayList<>();
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Heap.java
Patch:
@@ -82,7 +82,7 @@ public enum Type {
 	public boolean seen = false;
 	public boolean haunted = false;
 	
-	public LinkedList<Item> items = new LinkedList<Item>();
+	public LinkedList<Item> items = new LinkedList<>();
 	
 	public void open( Hero hero ) {
 		switch (type) {
@@ -429,7 +429,7 @@ public void restoreFromBundle( Bundle bundle ) {
 		seen = bundle.getBoolean( SEEN );
 		type = Type.valueOf( bundle.getString( TYPE ) );
 		
-		items = new LinkedList<Item>( (Collection<Item>) ((Collection<?>) bundle.getCollection( ITEMS )) );
+		items = new LinkedList<>((Collection<Item>) ((Collection<?>) bundle.getCollection(ITEMS)));
 		items.removeAll(Collections.singleton(null));
 		
 		//remove any document pages that either don't exist anymore or that the player already has

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Honeypot.java
Patch:
@@ -100,7 +100,7 @@ public Item shatter( Char owner, int pos ) {
 		
 		int newPos = pos;
 		if (Actor.findChar( pos ) != null) {
-			ArrayList<Integer> candidates = new ArrayList<Integer>();
+			ArrayList<Integer> candidates = new ArrayList<>();
 			boolean[] passable = Dungeon.level.passable;
 			
 			for (int n : PathFinder.NEIGHBOURS4) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Item.java
Patch:
@@ -92,7 +92,7 @@ public int compare( Item lhs, Item rhs ) {
 	};
 	
 	public ArrayList<String> actions( Hero hero ) {
-		ArrayList<String> actions = new ArrayList<String>();
+		ArrayList<String> actions = new ArrayList<>();
 		actions.add( AC_DROP );
 		actions.add( AC_THROW );
 		return actions;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/DriedRose.java
Patch:
@@ -131,7 +131,7 @@ public void execute( Hero hero, String action ) {
 			else if (charge != chargeCap)   GLog.i( Messages.get(this, "no_charge") );
 			else if (cursed)                GLog.i( Messages.get(this, "cursed") );
 			else {
-				ArrayList<Integer> spawnPoints = new ArrayList<Integer>();
+				ArrayList<Integer> spawnPoints = new ArrayList<>();
 				for (int i = 0; i < PathFinder.NEIGHBOURS8.length; i++) {
 					int p = hero.pos + PathFinder.NEIGHBOURS8[i];
 					if (Actor.findChar(p) == null && (Dungeon.level.passable[p] || Dungeon.level.avoid[p])) {
@@ -371,7 +371,7 @@ public boolean act() {
 				}
 			} else if (cursed && Random.Int(100) == 0) {
 
-				ArrayList<Integer> spawnPoints = new ArrayList<Integer>();
+				ArrayList<Integer> spawnPoints = new ArrayList<>();
 
 				for (int i = 0; i < PathFinder.NEIGHBOURS8.length; i++) {
 					int p = target.pos + PathFinder.NEIGHBOURS8[i];

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bags/Bag.java
Patch:
@@ -48,7 +48,7 @@ public class Bag extends Item implements Iterable<Item> {
 	
 	public Char owner;
 	
-	public ArrayList<Item> items = new ArrayList<Item>();
+	public ArrayList<Item> items = new ArrayList<>();
 	
 	public int size = 1;
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfMirrorImage.java
Patch:
@@ -75,7 +75,7 @@ public void empoweredRead() {
 	//returns the number of images spawned
 	public static int spawnImages( Hero hero, int nImages ){
 		
-		ArrayList<Integer> respawnPoints = new ArrayList<Integer>();
+		ArrayList<Integer> respawnPoints = new ArrayList<>();
 		
 		for (int i = 0; i < PathFinder.NEIGHBOURS8.length; i++) {
 			int p = hero.pos + PathFinder.NEIGHBOURS8[i];

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfRegrowth.java
Patch:
@@ -292,7 +292,7 @@ public void activate( Char ch ) {
 
 			int nDrops = Random.NormalIntRange(3, 6);
 
-			ArrayList<Integer> candidates = new ArrayList<Integer>();
+			ArrayList<Integer> candidates = new ArrayList<>();
 			for (int i : PathFinder.NEIGHBOURS8){
 				if (Dungeon.level.passable[pos+i]
 						&& pos+i != Dungeon.level.entrance
@@ -328,7 +328,7 @@ public void activate( Char ch ) {
 
 			int nSeeds = Random.NormalIntRange(2, 4);
 
-			ArrayList<Integer> candidates = new ArrayList<Integer>();
+			ArrayList<Integer> candidates = new ArrayList<>();
 			for (int i : PathFinder.NEIGHBOURS8){
 				if (Dungeon.level.passable[pos+i]
 						&& pos+i != Dungeon.level.entrance

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/Room.java
Patch:
@@ -35,8 +35,8 @@
 
 public abstract class Room extends Rect implements Graph.Node, Bundlable {
 	
-	public ArrayList<Room> neigbours = new ArrayList<Room>();
-	public LinkedHashMap<Room, Door> connected = new LinkedHashMap<Room, Door>();
+	public ArrayList<Room> neigbours = new ArrayList<>();
+	public LinkedHashMap<Room, Door> connected = new LinkedHashMap<>();
 	
 	public int distance;
 	public int price = 1;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/plants/Swiftthistle.java
Patch:
@@ -72,7 +72,7 @@ public static class TimeBubble extends Buff {
 		}
 		
 		private float left;
-		ArrayList<Integer> presses = new ArrayList<Integer>();
+		ArrayList<Integer> presses = new ArrayList<>();
 		
 		@Override
 		public int icon() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/AttackIndicator.java
Patch:
@@ -44,7 +44,7 @@ public class AttackIndicator extends Tag {
 	private CharSprite sprite = null;
 	
 	private static Mob lastTarget;
-	private ArrayList<Mob> candidates = new ArrayList<Mob>();
+	private ArrayList<Mob> candidates = new ArrayList<>();
 	
 	public AttackIndicator() {
 		super( DangerIndicator.COLOR );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/BadgesList.java
Patch:
@@ -36,7 +36,7 @@
 
 public class BadgesList extends ScrollPane {
 
-	private ArrayList<ListItem> items = new ArrayList<ListItem>();
+	private ArrayList<ListItem> items = new ArrayList<>();
 	
 	public BadgesList( boolean global ) {
 		super( new Component() );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/GameLog.java
Patch:
@@ -39,7 +39,7 @@ public class GameLog extends Component implements Signal.Listener<String> {
 	private RenderedTextMultiline lastEntry;
 	private int lastColor;
 
-	private static ArrayList<Entry> entries = new ArrayList<Entry>();
+	private static ArrayList<Entry> entries = new ArrayList<>();
 
 	public GameLog() {
 		super();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/QuickRecipe.java
Patch:
@@ -294,7 +294,7 @@ public String info() {
 						i = 0;
 					}
 					Item item = (Item) Reflection.newInstance(cls);
-					ArrayList<Item> in = new ArrayList<Item>(Arrays.asList(new Bomb(), item));
+					ArrayList<Item> in = new ArrayList<>(Arrays.asList(new Bomb(), item));
 					result.add(new QuickRecipe( r, in, r.sampleOutput(in)));
 					i++;
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/utils/GLog.java
Patch:
@@ -34,7 +34,7 @@ public class GLog {
 	public static final String WARNING		= "** ";
 	public static final String HIGHLIGHT	= "@@ ";
 	
-	public static Signal<String> update = new Signal<String>();
+	public static Signal<String> update = new Signal<>();
 	
 	public static void i( String text, Object... args ) {
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndStory.java
Patch:
@@ -49,7 +49,7 @@ public class WndStory extends Window {
 	public static final int ID_CITY     	= 3;
 	public static final int ID_HALLS		= 4;
 	
-	private static final SparseArray<String> CHAPTERS = new SparseArray<String>();
+	private static final SparseArray<String> CHAPTERS = new SparseArray<>();
 	
 	static {
 		CHAPTERS.put( ID_SEWERS, "sewers" );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndTabbed.java
Patch:
@@ -37,7 +37,7 @@
 
 public class WndTabbed extends Window {
 
-	protected ArrayList<Tab> tabs = new ArrayList<WndTabbed.Tab>();
+	protected ArrayList<Tab> tabs = new ArrayList<>();
 	protected Tab selected;
 	
 	public WndTabbed() {
@@ -100,7 +100,7 @@ public void resize( int w, int h ) {
 			remove( tab );
 		}
 		
-		ArrayList<Tab> tabs = new ArrayList<WndTabbed.Tab>( this.tabs );
+		ArrayList<Tab> tabs = new ArrayList<>(this.tabs);
 		this.tabs.clear();
 		
 		for (Tab tab : tabs) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Necromancer.java
Patch:
@@ -242,7 +242,7 @@ public boolean act(boolean enemyInFOV, boolean justAlerted) {
 			}
 			
 			//if enemy is seen, and enemy is within range, and we haven no skeleton, summon a skeleton!
-			if (enemySeen && Dungeon.level.distance(pos, enemy.pos) <= 1 && mySkeleton == null){
+			if (enemySeen && Dungeon.level.distance(pos, enemy.pos) <= 4 && mySkeleton == null){
 				
 				summoningPos = -1;
 				for (int c : PathFinder.NEIGHBOURS8){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/builders/FigureEightBuilder.java
Patch:
@@ -163,7 +163,7 @@ public ArrayList<Room> build(ArrayList<Room> rooms) {
 		while (!prev.connect(landmarkRoom)){
 			
 			ConnectionRoom c = ConnectionRoom.createRoom();
-			if (placeRoom(firstLoop, prev, c, angleBetweenRooms(prev, entrance)) == -1){
+			if (placeRoom(rooms, prev, c, angleBetweenRooms(prev, landmarkRoom)) == -1){
 				return null;
 			}
 			firstLoop.add(c);
@@ -191,7 +191,7 @@ public ArrayList<Room> build(ArrayList<Room> rooms) {
 		while (!prev.connect(landmarkRoom)){
 			
 			ConnectionRoom c = ConnectionRoom.createRoom();
-			if (placeRoom(secondLoop, prev, c, angleBetweenRooms(prev, entrance)) == -1){
+			if (placeRoom(rooms, prev, c, angleBetweenRooms(prev, landmarkRoom)) == -1){
 				return null;
 			}
 			secondLoop.add(c);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndInfoItem.java
Patch:
@@ -61,8 +61,7 @@ private void fillFields( Heap heap ) {
 		
 		int width = SPDSettings.landscape() ? WIDTH_L : WIDTH_P;
 		
-		IconTitle titlebar = new IconTitle();
-		titlebar.icon( new ItemSprite(heap) );
+		IconTitle titlebar = new IconTitle( heap );
 		titlebar.color( TITLE_COLOR );
 		titlebar.setRect( 0, 0, width, 0 );
 		add( titlebar );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/NewTengu.java
Patch:
@@ -87,6 +87,8 @@ public class NewTengu extends Mob {
 		flying = true; //doesn't literally fly, but he is fleet-of-foot enough to avoid hazards
 		
 		properties.add(Property.BOSS);
+		
+		viewDistance = 12;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/NewTengu.java
Patch:
@@ -651,6 +651,7 @@ public static class BombItem extends Item {
 			
 			{
 				dropsDownHeap = true;
+				unique = true;
 				
 				image = ItemSpriteSheet.TENGU_BOMB;
 			}
@@ -781,7 +782,6 @@ public void restoreFromBundle(Bundle bundle) {
 		public static class FireBlob extends Blob {
 			
 			{
-				
 				actPriority = BUFF_PRIO - 1;
 			}
 			
@@ -1013,6 +1013,7 @@ public static class ShockerItem extends Item {
 			
 			{
 				dropsDownHeap = true;
+				unique = true;
 				
 				image = ItemSpriteSheet.TENGU_SHOCKER;
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java
Patch:
@@ -104,7 +104,7 @@ public ShatteredPixelDungeon( PlatformSupport platform ) {
 				"com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.SewerBossEntranceRoom" );
 		com.watabou.utils.Bundle.addAlias(
 				com.shatteredpixel.shatteredpixeldungeon.levels.OldPrisonBossLevel.class,
-				"com.shatteredpixel.shatteredpixeldungeon.levels.OldPrisonBossLevel" );
+				"com.shatteredpixel.shatteredpixeldungeon.levels.PrisonBossLevel" );
 		com.watabou.utils.Bundle.addAlias(
 				com.shatteredpixel.shatteredpixeldungeon.actors.mobs.OldTengu.class,
 				"com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu" );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/sewerboss/DiamondGooRoom.java
Patch:
@@ -35,6 +35,8 @@ public void paint(Level level) {
 		
 		//we want the end width to be width()-2, and the width will grow by a total of (height()-4 - height()%2)
 		int diamondWidth = width()-2 - (height()-4 - height()%2);
+		//but starting width cannot be smaller than 2 on even width, 3 on odd width.
+		diamondWidth = Math.max(diamondWidth, width()%2 == 0 ? 2 : 3);
 		
 		for (int i = 1; i < height(); i++){
 			Painter.fill( level, left + (width() - diamondWidth)/2, top+i, diamondWidth, height()-2*i, Terrain.EMPTY);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Thief.java
Patch:
@@ -195,7 +195,7 @@ protected void nowhereToRun() {
 					state = HUNTING;
 				} else if (item != null
 						&& !Dungeon.level.heroFOV[pos]
-						&& Dungeon.level.distance(Dungeon.hero.pos, pos) < 6) {
+						&& Dungeon.level.distance(Dungeon.hero.pos, pos) >= 6) {
 
 					int count = 32;
 					int newPos;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/ShamanSprite.java
Patch:
@@ -27,6 +27,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Shaman;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Lightning;
 import com.watabou.noosa.TextureFilm;
+import com.watabou.noosa.audio.Sample;
 
 public class ShamanSprite extends MobSprite {
 	
@@ -63,6 +64,7 @@ public void zap( int pos ) {
 		} else {
 			parent.add(new Lightning(center(), pos, (Shaman) ch));
 		}
+		Sample.INSTANCE.play( Assets.SND_LIGHTNING );
 		
 		turnTo( ch.pos, pos );
 		play( zap );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TalismanOfForesight.java
Patch:
@@ -183,7 +183,7 @@ public boolean act() {
 					if (Dungeon.level.heroFOV[p]
 							&& Dungeon.level.secret[p]
 							&& Dungeon.level.map[p] != Terrain.SECRET_DOOR) {
-						if (Dungeon.level.traps.get(p) == null || Dungeon.level.traps.get(p).canBeSearched) {
+						if (Dungeon.level.traps.get(p) != null && Dungeon.level.traps.get(p).canBeSearched) {
 							smthFound = true;
 						}
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/WornDartTrap.java
Patch:
@@ -38,6 +38,8 @@ public class WornDartTrap extends Trap {
 	{
 		color = GREY;
 		shape = CROSSHAIR;
+		
+		//canBeHidden = false;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/sewerboss/DiamondGooRoom.java
Patch:
@@ -33,7 +33,9 @@ public class DiamondGooRoom extends GooBossRoom {
 	public void paint(Level level) {
 		Painter.fill( level, this, Terrain.WALL );
 		
-		int diamondWidth = 2 + width()%2;
+		//we want the end width to be width()-2, and the width will grow by a total of (height()-4 - height()%2)
+		int diamondWidth = width()-2 - (height()-4 - height()%2);
+		
 		for (int i = 1; i < height(); i++){
 			Painter.fill( level, left + (width() - diamondWidth)/2, top+i, diamondWidth, height()-2*i, Terrain.EMPTY);
 			diamondWidth += 2;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/connection/PerimeterRoom.java
Patch:
@@ -115,8 +115,8 @@ private static int distanceBetweenPoints(Room r, Point a, Point b){
 	private static void fillBetweenPoints(Level level, Room r, Point from, Point to, int floor){
 		
 		//doors are along the same side
-		if (((from.x == r.left || from.x == r.right) && from.y == to.y)
-				|| ((from.y == r.top || from.y == r.bottom) && from.x == to.x)){
+		if (((from.x == r.left+1 || from.x == r.right-1) && from.x == to.x)
+				|| ((from.y == r.top+1 || from.y == r.bottom-1) && from.y == to.y)){
 			Painter.fill(level,
 					Math.min(from.x, to.x),
 					Math.min(from.y, to.y),

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1546,7 +1546,7 @@ public void onOperateComplete() {
 			int doorCell = ((HeroAction.Unlock)curAction).dst;
 			int door = Dungeon.level.map[doorCell];
 			
-			if (Dungeon.level.adjacent(pos, doorCell)) {
+			if (Dungeon.level.distance(pos, doorCell) <= 1) {
 				boolean hasKey = true;
 				if (door == Terrain.LOCKED_DOOR) {
 					hasKey = Notes.remove(new IronKey(Dungeon.depth));
@@ -1568,7 +1568,7 @@ public void onOperateComplete() {
 			
 			Heap heap = Dungeon.level.heaps.get( ((HeroAction.OpenChest)curAction).dst );
 			
-			if (Dungeon.level.adjacent(pos, heap.pos)){
+			if (Dungeon.level.distance(pos, heap.pos) <= 1){
 				boolean hasKey = true;
 				if (heap.type == Type.SKELETON || heap.type == Type.REMAINS) {
 					Sample.INSTANCE.play( Assets.SND_BONES );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -772,7 +772,7 @@ public static void observe( int dist ) {
 		}
 		
 		if (hero.buff(Awareness.class) != null){
-			for (Heap h : level.heaps.valueArray()){
+			for (Heap h : level.heaps.valueList()){
 				BArray.or( level.visited, level.heroFOV, h.pos - 1 - level.width(), 3, level.visited );
 				BArray.or( level.visited, level.heroFOV, h.pos - 1, 3, level.visited );
 				BArray.or( level.visited, level.heroFOV, h.pos - 1 + level.width(), 3, level.visited );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/ImpShopkeeper.java
Patch:
@@ -50,7 +50,7 @@ protected boolean act() {
 	
 	@Override
 	public void flee() {
-		for (Heap heap: Dungeon.level.heaps.valueArray()) {
+		for (Heap heap: Dungeon.level.heaps.valueList()) {
 			if (heap.type == Heap.Type.FOR_SALE) {
 				CellEmitter.get( heap.pos ).burst( ElmoParticle.FACTORY, 4 );
 				heap.destroy();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Shopkeeper.java
Patch:
@@ -71,7 +71,7 @@ public void flee() {
 	@Override
 	public void destroy() {
 		super.destroy();
-		for (Heap heap: Dungeon.level.heaps.valueArray()) {
+		for (Heap heap: Dungeon.level.heaps.valueList()) {
 			if (heap.type == Heap.Type.FOR_SALE) {
 				CellEmitter.get( heap.pos ).burst( ElmoParticle.FACTORY, 4 );
 				heap.destroy();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/Bomb.java
Patch:
@@ -273,7 +273,7 @@ protected boolean act() {
 			}
 
 			//look for our bomb, remove it from its heap, and blow it up.
-			for (Heap heap : Dungeon.level.heaps.valueArray()) {
+			for (Heap heap : Dungeon.level.heaps.valueList()) {
 				if (heap.items.contains(bomb)) {
 
 					//FIXME this is a bit hacky, might want to generalize the functionality

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/Noisemaker.java
Patch:
@@ -52,7 +52,7 @@ public void setTrigger(int cell){
 			mob.beckon( cell );
 		}
 
-		for (Heap heap : Dungeon.level.heaps.valueArray()) {
+		for (Heap heap : Dungeon.level.heaps.valueList()) {
 			if (heap.type == Heap.Type.MIMIC) {
 				Mimic m = Mimic.spawnAt( heap.pos, heap.items );
 				if (m != null) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfRage.java
Patch:
@@ -51,7 +51,7 @@ public void doRead() {
 			}
 		}
 
-		for (Heap heap : Dungeon.level.heaps.valueArray()) {
+		for (Heap heap : Dungeon.level.heaps.valueList()) {
 			if (heap.type == Heap.Type.MIMIC) {
 				Mimic m = Mimic.spawnAt( heap.pos, heap.items );
 				if (m != null) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -980,7 +980,7 @@ public void updateFieldOfView( Char c, boolean[] fieldOfView ) {
 			}
 			
 			if (c.buff( Awareness.class ) != null) {
-				for (Heap heap : heaps.valueArray()) {
+				for (Heap heap : heaps.valueList()) {
 					int p = heap.pos;
 					for (int i : PathFinder.NEIGHBOURS9)
 						fieldOfView[p+i] = true;
@@ -1005,7 +1005,7 @@ public void updateFieldOfView( Char c, boolean[] fieldOfView ) {
 		}
 
 		if (c == Dungeon.hero) {
-			for (Heap heap : heaps.valueArray())
+			for (Heap heap : heaps.valueList())
 				if (!heap.seen && fieldOfView[heap.pos])
 					heap.seen = true;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/CellSelector.java
Patch:
@@ -65,7 +65,7 @@ protected void onClick( PointerEvent event ) {
 				}
 			}
 
-			for (Heap heap : Dungeon.level.heaps.valueArray()){
+			for (Heap heap : Dungeon.level.heaps.valueList()){
 				if (heap.sprite != null && heap.sprite.overlapsPoint( p.x, p.y)){
 					select( heap.pos );
 					return;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -229,7 +229,7 @@ public void draw() {
 		heaps = new Group();
 		add( heaps );
 		
-		for ( Heap heap : Dungeon.level.heaps.valueArray() ) {
+		for ( Heap heap : Dungeon.level.heaps.valueList() ) {
 			addHeapSprite( heap );
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -772,7 +772,7 @@ public static void observe( int dist ) {
 		}
 		
 		if (hero.buff(Awareness.class) != null){
-			for (Heap h : level.heaps.values()){
+			for (Heap h : level.heaps.valueArray()){
 				BArray.or( level.visited, level.heroFOV, h.pos - 1 - level.width(), 3, level.visited );
 				BArray.or( level.visited, level.heroFOV, h.pos - 1, 3, level.visited );
 				BArray.or( level.visited, level.heroFOV, h.pos - 1 + level.width(), 3, level.visited );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/ImpShopkeeper.java
Patch:
@@ -50,7 +50,7 @@ protected boolean act() {
 	
 	@Override
 	public void flee() {
-		for (Heap heap: Dungeon.level.heaps.values()) {
+		for (Heap heap: Dungeon.level.heaps.valueArray()) {
 			if (heap.type == Heap.Type.FOR_SALE) {
 				CellEmitter.get( heap.pos ).burst( ElmoParticle.FACTORY, 4 );
 				heap.destroy();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Shopkeeper.java
Patch:
@@ -71,7 +71,7 @@ public void flee() {
 	@Override
 	public void destroy() {
 		super.destroy();
-		for (Heap heap: Dungeon.level.heaps.values()) {
+		for (Heap heap: Dungeon.level.heaps.valueArray()) {
 			if (heap.type == Heap.Type.FOR_SALE) {
 				CellEmitter.get( heap.pos ).burst( ElmoParticle.FACTORY, 4 );
 				heap.destroy();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/Bomb.java
Patch:
@@ -273,7 +273,7 @@ protected boolean act() {
 			}
 
 			//look for our bomb, remove it from its heap, and blow it up.
-			for (Heap heap : Dungeon.level.heaps.values()) {
+			for (Heap heap : Dungeon.level.heaps.valueArray()) {
 				if (heap.items.contains(bomb)) {
 
 					//FIXME this is a bit hacky, might want to generalize the functionality

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/Noisemaker.java
Patch:
@@ -52,7 +52,7 @@ public void setTrigger(int cell){
 			mob.beckon( cell );
 		}
 
-		for (Heap heap : Dungeon.level.heaps.values()) {
+		for (Heap heap : Dungeon.level.heaps.valueArray()) {
 			if (heap.type == Heap.Type.MIMIC) {
 				Mimic m = Mimic.spawnAt( heap.pos, heap.items );
 				if (m != null) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfRage.java
Patch:
@@ -51,7 +51,7 @@ public void doRead() {
 			}
 		}
 
-		for (Heap heap : Dungeon.level.heaps.values()) {
+		for (Heap heap : Dungeon.level.heaps.valueArray()) {
 			if (heap.type == Heap.Type.MIMIC) {
 				Mimic m = Mimic.spawnAt( heap.pos, heap.items );
 				if (m != null) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/CellSelector.java
Patch:
@@ -65,7 +65,7 @@ protected void onClick( PointerEvent event ) {
 				}
 			}
 
-			for (Heap heap : Dungeon.level.heaps.values()){
+			for (Heap heap : Dungeon.level.heaps.valueArray()){
 				if (heap.sprite != null && heap.sprite.overlapsPoint( p.x, p.y)){
 					select( heap.pos );
 					return;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -229,7 +229,7 @@ public void draw() {
 		heaps = new Group();
 		add( heaps );
 		
-		for ( Heap heap : Dungeon.level.heaps.values() ) {
+		for ( Heap heap : Dungeon.level.heaps.valueArray() ) {
 			addHeapSprite( heap );
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Gauntlet.java
Patch:
@@ -41,6 +41,6 @@ public int max(int lvl) {
 	
 	@Override
 	public int defenseFactor( Char owner ) {
-		return 5;	//5 extra defence
+		return 4;	//4 extra defence
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sai.java
Patch:
@@ -41,6 +41,6 @@ public int max(int lvl) {
 
 	@Override
 	public int defenseFactor( Char owner ) {
-		return 3;	//3 extra defence
+		return 2;	//2 extra defence
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -474,7 +474,7 @@ public static boolean asNeeded() {
 	private static final String QUESTS		= "quests";
 	private static final String BADGES		= "badges";
 	
-	public static void saveGame( int save ) throws IOException {
+	public static void saveGame( int save ) {
 		try {
 			Bundle bundle = new Bundle();
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Rankings.java
Patch:
@@ -34,6 +34,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.journal.Notes;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.ui.QuickSlotButton;
+import com.watabou.noosa.Game;
 import com.watabou.utils.Bundlable;
 import com.watabou.utils.Bundle;
 import com.watabou.utils.FileUtils;
@@ -238,7 +239,7 @@ public void load() {
 		} catch (IOException e) {
 		}
 	}
-
+	
 	public static class Record implements Bundlable {
 
 		private static final String CAUSE   = "cause";

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndTextInput.java
Patch:
@@ -36,6 +36,7 @@
 
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.backends.android.AndroidApplication;
+import com.badlogic.gdx.backends.android.AndroidGraphics;
 import com.shatteredpixel.shatteredpixeldungeon.SPDSettings;
 import com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
@@ -204,7 +205,7 @@ public void run() {
 					((ViewGroup) textInput.getParent()).removeView(textInput);
 
 					InputMethodManager imm = (InputMethodManager)((AndroidApplication)Gdx.app).getSystemService(Activity.INPUT_METHOD_SERVICE);
-					imm.hideSoftInputFromWindow(textInput.getWindowToken(), 0);
+					imm.hideSoftInputFromWindow(((AndroidGraphics)Gdx.app.getGraphics()).getView().getWindowToken(), 0);
 
 					//Soft keyboard sometimes triggers software buttons, so make sure to reassert immersive
 					ShatteredPixelDungeon.updateSystemUI();

File: SPD-classes/src/main/java/com/watabou/utils/Bundle.java
Patch:
@@ -150,6 +150,9 @@ public <E extends Enum<E>> E getEnum( String key, Class<E> enumClass ) {
 		} catch (JSONException e) {
 			Game.reportException(e);
 			return enumClass.getEnumConstants()[0];
+		} catch (IllegalArgumentException e) {
+			Game.reportException(e);
+			return enumClass.getEnumConstants()[0];
 		}
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfWarding.java
Patch:
@@ -211,6 +211,7 @@ public void upgrade( int wandLevel ){
 				viewDistance++;
 				name = Messages.get(this, "name_" + tier );
 				updateSpriteState();
+				GameScene.updateFog(pos, viewDistance+1);
 			}
 		}
 
@@ -351,6 +352,7 @@ public void updateSpriteState() {
 		public void destroy() {
 			super.destroy();
 			Dungeon.observe();
+			GameScene.updateFog(pos, viewDistance+1);
 		}
 		
 		@Override
@@ -368,7 +370,6 @@ public boolean interact() {
 				protected void onSelect(int index) {
 					if (index == 0){
 						die(null);
-						Dungeon.observe();
 					}
 				}
 			});

File: SPD-classes/src/main/java/com/watabou/noosa/BitmapText.java
Patch:
@@ -334,7 +334,6 @@ protected void splitBy( Pixmap bitmap, int height, int color, String chars ) {
 			lineHeight = baseLine = height( frames.get( chars.charAt( 0 ) ) );
 		}
 		
-		//FIXME
 		private boolean colorNotMatch(Pixmap pixmap, int x, int y, int color) {
 			int pixel = pixmap.getPixel(x, y);
 			if ((pixel & 0xFF) == 0) {

File: SPD-classes/src/main/java/com/watabou/utils/FileUtils.java
Patch:
@@ -29,7 +29,6 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 
-//TODO should consider migrating away from use of File.java here. Can probably just use strings
 public class FileUtils {
 	
 	// Files

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfLivingEarth.java
Patch:
@@ -222,10 +222,10 @@ public static class RockArmor extends Buff {
 		private int wandLevel;
 		private int armor;
 
-		private void addArmor( int wandLevel, int armor ){
+		private void addArmor( int wandLevel, int toAdd ){
 			this.wandLevel = Math.max(this.wandLevel, wandLevel);
-			this.armor += armor;
-			this.armor = Math.min(armor, 2*armorToGuardian());
+			armor += toAdd;
+			armor = Math.min(armor, 2*armorToGuardian());
 		}
 
 		private int armorToGuardian(){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonBossLevel.java
Patch:
@@ -432,13 +432,13 @@ public void progress(){
 					do{
 						m.pos = randomTenguArenaCell();
 					} while (findMob(m.pos) != null);
-					m.sprite().place(m.pos);
+					if (m.sprite != null) m.sprite.place(m.pos);
 					mobs.add(m);
 				}
 
 				tengu.die(Dungeon.hero);
 				
-				clearEntities((Room) new EmptyRoom().set(3, 26, 7, 30)); //arena is safe
+				clearEntities((Room) new EmptyRoom().set(2, 25, 8, 31)); //arena is safe
 
 				for (Item item : storedItems)
 					drop(item, randomTenguArenaCell());

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -471,6 +471,7 @@ public Group addVisuals() {
 			visuals = new Group();
 		} else {
 			visuals.clear();
+			visuals.camera = null;
 		}
 		for (int i=0; i < length(); i++) {
 			if (pit[i]) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfWarding.java
Patch:
@@ -75,7 +75,7 @@ public boolean tryToZap(Hero owner, int target) {
 	protected void onZap(Ballistica bolt) {
 		
 		Char ch = Actor.findChar(bolt.collisionPos);
-		if (!curUser.fieldOfView[bolt.collisionPos]){
+		if (!curUser.fieldOfView[bolt.collisionPos] || !Dungeon.level.passable[bolt.collisionPos]){
 			GLog.w( Messages.get(this, "bad_location"));
 			
 		} else if (ch != null){

File: android/src/main/java/com/shatteredpixel/shatteredpixeldungeon/android/AndroidPlatformSupport.java
Patch:
@@ -115,7 +115,7 @@ public void run() {
 							WindowManager.LayoutParams.FLAG_FULLSCREEN | WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);
 				}
 				
-				if (DeviceCompat.supportsFullScreen()){
+				if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT){
 					if (SPDSettings.fullscreen()) {
 						AndroidLauncher.instance.getWindow().getDecorView().setSystemUiVisibility(
 								View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/elixirs/ElixirOfAquaticRejuvenation.java
Patch:
@@ -72,6 +72,7 @@ public boolean act() {
 			
 			if (Dungeon.level.water[target.pos] && target.HP < target.HT){
 				float healAmt = GameMath.gate( 1, target.HT/50f, left );
+				healAmt = Math.min(healAmt, target.HT - target.HP);
 				if (Random.Float() < (healAmt % 1)){
 					healAmt = (float)Math.ceil(healAmt);
 				} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CavesBossLevel.java
Patch:
@@ -203,10 +203,10 @@ protected void createItems() {
 	
 	@Override
 	public int randomRespawnCell() {
-		int cell = entrance + PathFinder.NEIGHBOURS8[Random.Int(8)];
-		while (!passable[cell]){
+		int cell;
+		do {
 			cell = entrance + PathFinder.NEIGHBOURS8[Random.Int(8)];
-		}
+		} while (!passable[cell] || Actor.findChar(cell) != null);
 		return cell;
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CityBossLevel.java
Patch:
@@ -174,10 +174,10 @@ protected void createItems() {
 	
 	@Override
 	public int randomRespawnCell() {
-		int cell = entrance + PathFinder.NEIGHBOURS8[Random.Int(8)];
-		while (!passable[cell]){
+		int cell;
+		do {
 			cell = entrance + PathFinder.NEIGHBOURS8[Random.Int(8)];
-		}
+		} while (!passable[cell] || Actor.findChar(cell) != null);
 		return cell;
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/HallsBossLevel.java
Patch:
@@ -164,10 +164,10 @@ protected void createItems() {
 	@Override
 	public int randomRespawnCell() {
 		int pos = entrance == -1 ? stairs : entrance;
-		int cell = pos + PathFinder.NEIGHBOURS8[Random.Int(8)];
-		while (!passable[cell]){
+		int cell;
+		do {
 			cell = pos + PathFinder.NEIGHBOURS8[Random.Int(8)];
-		}
+		} while (!passable[cell] || Actor.findChar(cell) != null);
 		return cell;
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/LastLevel.java
Patch:
@@ -131,10 +131,10 @@ protected void createItems() {
 
 	@Override
 	public int randomRespawnCell() {
-		int cell = entrance + PathFinder.NEIGHBOURS8[Random.Int(8)];
-		while (!passable[cell]){
+		int cell;
+		do {
 			cell = entrance + PathFinder.NEIGHBOURS8[Random.Int(8)];
-		}
+		} while (!passable[cell] || Actor.findChar(cell) != null);
 		return cell;
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/SewerBossLevel.java
Patch:
@@ -130,7 +130,7 @@ public int randomRespawnCell() {
 		int pos;
 		do {
 			pos = pointToCell(roomEntrance.random());
-		} while (pos == entrance || solid[pos]);
+		} while (pos == entrance || !passable[pos] || Actor.findChar(pos) != null);
 		return pos;
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Blacksmith.java
Patch:
@@ -226,7 +226,7 @@ public static void upgrade( Item item1, Item item2 ) {
 	
 	@Override
 	public int defenseSkill( Char enemy ) {
-		return 1000;
+		return 100_000_000;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Ghost.java
Patch:
@@ -80,7 +80,7 @@ protected boolean act() {
 
 	@Override
 	public int defenseSkill( Char enemy ) {
-		return 1000;
+		return 100_000_000;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Imp.java
Patch:
@@ -70,7 +70,7 @@ protected boolean act() {
 	
 	@Override
 	public int defenseSkill( Char enemy ) {
-		return 1000;
+		return 100_000_000;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/RatKing.java
Patch:
@@ -37,7 +37,7 @@ public class RatKing extends NPC {
 	
 	@Override
 	public int defenseSkill( Char enemy ) {
-		return 1000;
+		return 100_000_000;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
Patch:
@@ -63,7 +63,7 @@ protected boolean act() {
 	
 	@Override
 	public int defenseSkill( Char enemy ) {
-		return 1000;
+		return 100_000_000;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Rankings.java
Patch:
@@ -21,6 +21,7 @@
 
 package com.shatteredpixel.shatteredpixeldungeon;
 
+import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Belongings;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroClass;
@@ -161,6 +162,7 @@ public void saveGameData(Record rec){
 	public void loadGameData(Record rec){
 		Bundle data = rec.gameData;
 
+		Actor.clear();
 		Dungeon.hero = null;
 		Dungeon.level = null;
 		Generator.reset();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfWarding.java
Patch:
@@ -145,7 +145,7 @@ public String statsDesc() {
 
 	public static class Ward extends NPC {
 
-		private int tier = 1;
+		public int tier = 1;
 		private int wandLevel = 1;
 
 		private int totalZaps = 0;
@@ -316,14 +316,15 @@ protected boolean getFurther(int target) {
 		@Override
 		public CharSprite sprite() {
 			WardSprite sprite = (WardSprite) super.sprite();
-			sprite.updateTier(tier);
+			sprite.linkVisuals(this);
 			return sprite;
 		}
 
 		@Override
 		public void updateSpriteState() {
 			super.updateSpriteState();
 			((WardSprite)sprite).updateTier(tier);
+			sprite.place(pos);
 		}
 		
 		@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/AttackIndicator.java
Patch:
@@ -137,6 +137,7 @@ private synchronized void updateImage() {
 		try {
 			sprite = lastTarget.spriteClass.newInstance();
 			active = true;
+			sprite.linkVisuals(lastTarget);
 			sprite.idle();
 			sprite.paused = true;
 			add( sprite );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/effects/MagicMissile.java
Patch:
@@ -165,7 +165,7 @@ public void size( float size ) {
 	public static void boltFromChar(Group group, int type, Visual sprite, int to, Callback callback){
 		MagicMissile missile = ((MagicMissile)group.recycle( MagicMissile.class ));
 		if (Actor.findChar(to) != null){
-			missile.reset(type, sprite, Actor.findChar(to).sprite, callback);
+			missile.reset(type, sprite.center(), Actor.findChar(to).sprite.destinationCenter(), callback);
 		} else {
 			missile.reset(type, sprite, to, callback);
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Hunger.java
Patch:
@@ -66,7 +66,7 @@ public boolean act() {
 			return true;
 		}
 
-		if (target.isAlive()) {
+		if (target.isAlive() && target instanceof Hero) {
 
 			Hero hero = (Hero)target;
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/curses/Metabolism.java
Patch:
@@ -24,6 +24,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Hunger;
+import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Speck;
 import com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor;
 import com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor.Glyph;
@@ -40,7 +41,7 @@ public class Metabolism extends Glyph {
 	@Override
 	public int proc( Armor armor, Char attacker, Char defender, int damage) {
 
-		if (Random.Int( 6 ) == 0) {
+		if (Random.Int( 6 ) == 0 && defender instanceof Hero) {
 
 			//assumes using up 10% of starving, and healing of 1 hp per 10 turns;
 			int healing = Math.min((int)Hunger.STARVING/100, defender.HT - defender.HP);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/StyledButton.java
Patch:
@@ -45,7 +45,7 @@ public StyledButton(Chrome.Type type, String label, int size ){
 		super();
 		
 		bg = Chrome.get( type );
-		add( bg );
+		addToBack( bg );
 		
 		text = PixelScene.renderText( size );
 		text.text( label );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -32,6 +32,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Alchemy;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.AdrenalineSurge;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Amok;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Awareness;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Barkskin;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Berserk;
@@ -1197,7 +1198,7 @@ public boolean handle( int cell ) {
 			
 		} else if (fieldOfView[cell] && (ch = Actor.findChar( cell )) instanceof Mob) {
 
-			if (ch.alignment != Alignment.ENEMY) {
+			if (ch.alignment != Alignment.ENEMY && ch.buff(Amok.class) == null) {
 				curAction = new HeroAction.Interact( ch );
 			} else {
 				curAction = new HeroAction.Attack( ch );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -914,6 +914,7 @@ public static void restoreAllies( Level level, int pos ){
 			
 			for (Mob ally : heldAllies) {
 				level.mobs.add(ally);
+				ally.state = ally.WANDERING;
 				
 				if (!candidatePositions.isEmpty()){
 					ally.pos = candidatePositions.remove(0);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CavesBossLevel.java
Patch:
@@ -222,7 +222,7 @@ public void press( int cell, Char hero ) {
 			
 			for (Mob m : mobs){
 				//bring the first ally with you
-				if (m.alignment == Char.Alignment.ALLY){
+				if (m.alignment == Char.Alignment.ALLY && !m.properties().contains(Char.Property.IMMOVABLE)){
 					m.pos = Dungeon.hero.pos + (Random.Int(2) == 0 ? +1 : -1);
 					m.sprite.place(m.pos);
 					break;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CityBossLevel.java
Patch:
@@ -193,7 +193,7 @@ public void press( int cell, Char hero ) {
 			
 			for (Mob m : mobs){
 				//bring the first ally with you
-				if (m.alignment == Char.Alignment.ALLY){
+				if (m.alignment == Char.Alignment.ALLY && !m.properties().contains(Char.Property.IMMOVABLE)){
 					m.pos = Dungeon.hero.pos + (Random.Int(2) == 0 ? +1 : -1);
 					m.sprite.place(m.pos);
 					break;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonBossLevel.java
Patch:
@@ -415,7 +415,7 @@ public void progress(){
 				//remove all mobs, but preserve allies
 				ArrayList<Mob> allies = new ArrayList<>();
 				for(Mob m : mobs.toArray(new Mob[0])){
-					if (m.alignment == Char.Alignment.ALLY){
+					if (m.alignment == Char.Alignment.ALLY && !m.properties().contains(Char.Property.IMMOVABLE)){
 						allies.add(m);
 						mobs.remove(m);
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -887,6 +887,7 @@ public static void holdAllies( Level level ){
 		for (Mob mob : level.mobs.toArray( new Mob[0] )) {
 			//preserve the ghost no matter where they are
 			if (mob instanceof DriedRose.GhostHero) {
+				((DriedRose.GhostHero) mob).clearDefensingPos();
 				level.mobs.remove( mob );
 				heldAllies.add(mob);
 				

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfWarding.java
Patch:
@@ -270,7 +270,7 @@ private void zap() {
 			spend( 1f );
 
 			//always hits
-			int dmg = Random.Int( 2 + wandLevel, 8 + 4*wandLevel );
+			int dmg = Random.NormalIntRange( 2 + wandLevel, 8 + 4*wandLevel );
 			enemy.damage( dmg, WandOfWarding.class );
 			if (enemy.isAlive()){
 				Wand.processSoulMark(enemy, wandLevel, 1);
@@ -375,6 +375,7 @@ public void storeInBundle(Bundle bundle) {
 		public void restoreFromBundle(Bundle bundle) {
 			super.restoreFromBundle(bundle);
 			tier = bundle.getInt(TIER);
+			viewDistance = 2 + tier;
 			name = Messages.get(this, "name_" + tier );
 			wandLevel = bundle.getInt(WAND_LEVEL);
 			totalZaps = bundle.getInt(TOTAL_ZAPS);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java
Patch:
@@ -81,7 +81,7 @@ public ShatteredPixelDungeon() {
 		
 		com.watabou.utils.Bundle.addAlias(
 				com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Elastic.class,
-				"com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.curses.Elastic" );
+				"com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Elastic" );
 		com.watabou.utils.Bundle.addAlias(
 				com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Elastic.class,
 				"com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.Dazzling" );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/MagicalSleep.java
Patch:
@@ -66,7 +66,7 @@ public boolean act(){
 		if (target.alignment == Char.Alignment.ALLY) {
 			target.HP = Math.min(target.HP+1, target.HT);
 			if (target instanceof  Hero) ((Hero) target).resting = true;
-			if (target.HP == target.buff(Regeneration.class).regencap()) {
+			if (target.HP == target.HT) {
 				if (target instanceof  Hero) GLog.p(Messages.get(this, "wakeup"));
 				detach();
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/DriedRose.java
Patch:
@@ -105,7 +105,7 @@ public ArrayList<String> actions( Hero hero ) {
 			actions.remove(AC_EQUIP);
 			return actions;
 		}
-		if (isEquipped( hero ) && charge == chargeCap && !cursed && ghostID != 0) {
+		if (isEquipped( hero ) && charge == chargeCap && !cursed && ghostID == 0) {
 			actions.add(AC_SUMMON);
 		}
 		if (ghostID != 0){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfLivingEarth.java
Patch:
@@ -121,13 +121,15 @@ protected void onZap(Ballistica bolt) {
 				} else {
 					guardian.pos = closest;
 					GameScene.add(guardian);
+					Dungeon.level.press(guardian.pos, guardian);
 				}
 
 				guardian.aggro(ch);
 
 			} else {
 				guardian.pos = bolt.collisionPos;
 				GameScene.add(guardian);
+				Dungeon.level.press(guardian.pos, guardian);
 			}
 
 			guardian.sprite.centerEmitter().burst(MagicMissile.EarthParticle.ATTRACT, 5 + level()/2);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonBossLevel.java
Patch:
@@ -318,7 +318,7 @@ public void progress(){
 
 				for (Mob m : mobs){
 					//bring the first ally with you
-					if (m.alignment == Char.Alignment.ALLY){
+					if (m.alignment == Char.Alignment.ALLY && !m.properties().contains(Char.Property.IMMOVABLE)){
 						m.pos = ARENA_DOOR; //they should immediately walk out of the door
 						m.sprite.place(m.pos);
 						break;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/HeavyBoomerang.java
Patch:
@@ -115,12 +115,14 @@ public void call() {
 											} else {
 												Dungeon.level.drop(boomerang, returnPos).sprite.drop();
 											}
+											CircleBack.this.next();
 										}
 									});
 					visual.alpha(0f);
 					float duration = Dungeon.level.trueDistance(thrownPos, returnPos) / 20f;
 					Dungeon.hero.sprite.parent.add(new AlphaTweener(visual, 1f, duration));
 					detach();
+					return false;
 				}
 			}
 			spend( TICK );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1315,7 +1315,7 @@ public static int maxExp( int lvl ){
 	}
 	
 	public boolean isStarving() {
-		return buff(Hunger.class) != null && ((Hunger)buff( Hunger.class )).isStarving();
+		return Buff.affect(this, Hunger.class).isStarving();
 	}
 	
 	@Override
@@ -1656,9 +1656,9 @@ public boolean search( boolean intentional ) {
 			if (!Dungeon.level.locked) {
 				if (cursed) {
 					GLog.n(Messages.get(this, "search_distracted"));
-					buff(Hunger.class).reduceHunger(TIME_TO_SEARCH - (2 * HUNGER_FOR_SEARCH));
+					Buff.affect(this, Hunger.class).reduceHunger(TIME_TO_SEARCH - (2 * HUNGER_FOR_SEARCH));
 				} else {
-					buff(Hunger.class).reduceHunger(TIME_TO_SEARCH - HUNGER_FOR_SEARCH);
+					Buff.affect(this, Hunger.class).reduceHunger(TIME_TO_SEARCH - HUNGER_FOR_SEARCH);
 				}
 			}
 			spendAndNext(TIME_TO_SEARCH);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -540,7 +540,7 @@ public int defenseProc( Char enemy, int damage ) {
 
 		if (buff(SoulMark.class) != null) {
 			int restoration = Math.min(damage, HP);
-			Dungeon.hero.buff(Hunger.class).satisfy(restoration);
+			Buff.affect(Dungeon.hero, Hunger.class).satisfy(restoration);
 			Dungeon.hero.HP = (int)Math.ceil(Math.min(Dungeon.hero.HT, Dungeon.hero.HP+(restoration*0.33f)));
 			Dungeon.hero.sprite.emitter().burst( Speck.factory(Speck.HEALING), 1 );
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/curses/Metabolism.java
Patch:
@@ -22,6 +22,7 @@
 package com.shatteredpixel.shatteredpixeldungeon.items.armor.curses;
 
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Hunger;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Speck;
 import com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor;
@@ -46,7 +47,7 @@ public int proc( Armor armor, Char attacker, Char defender, int damage) {
 
 			if (healing > 0) {
 				
-				Hunger hunger = defender.buff( Hunger.class );
+				Hunger hunger = Buff.affect(defender, Hunger.class);
 				
 				if (hunger != null && !hunger.isStarving()) {
 					

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TimekeepersHourglass.java
Patch:
@@ -24,6 +24,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Hunger;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.LockedFloor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
@@ -250,7 +251,7 @@ public boolean attachTo(Char target) {
 				((Hero) target).spendAndNext(5*usedCharge);
 
 				//shouldn't punish the player for going into stasis frequently
-				Hunger hunger = target.buff(Hunger.class);
+				Hunger hunger = Buff.affect(target, Hunger.class);
 				if (hunger != null && !hunger.isStarving())
 					hunger.satisfy(5*usedCharge);
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/food/Food.java
Patch:
@@ -90,7 +90,7 @@ public void execute( Hero hero, String action ) {
 	}
 	
 	protected void satisfy( Hero hero ){
-		(hero.buff( Hunger.class )).satisfy( energy );
+		Buff.affect(hero, Hunger.class).satisfy( energy );
 	}
 	
 	public static void foodProc( Hero hero ){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/elixirs/ElixirOfHoneyedHealing.java
Patch:
@@ -45,7 +45,7 @@ public class ElixirOfHoneyedHealing extends Elixir {
 	public void apply(Hero hero) {
 		Buff.affect( hero, Healing.class ).setHeal((int)(0.8f*hero.HT + 14), 0.25f, 0);
 		PotionOfHealing.cure(hero);
-		hero.buff(Hunger.class).satisfy(Hunger.STARVING/5f);
+		Buff.affect(hero, Hunger.class).satisfy(Hunger.STARVING/5f);
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/PoisonDartTrap.java
Patch:
@@ -100,7 +100,7 @@ public void call() {
 			} else {
 				finalTarget.damage(Random.NormalIntRange(1, 4) - finalTarget.drRoll(), trap);
 				Buff.affect( finalTarget, Poison.class )
-						.set( 4 + Dungeon.depth );
+						.set( 8 + Math.round(2*Dungeon.depth / 3f) );
 			}
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Banner.java
Patch:
@@ -78,8 +78,10 @@ public void update() {
 				alpha( 1 - p );
 				break;
 			case STATIC:
+				resetColor();
 				break;
 			case FADE_OUT:
+				resetColor();
 				alpha( p );
 				break;
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Heap.java
Patch:
@@ -35,6 +35,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.effects.particles.ElmoParticle;
 import com.shatteredpixel.shatteredpixeldungeon.effects.particles.FlameParticle;
 import com.shatteredpixel.shatteredpixeldungeon.effects.particles.ShadowParticle;
+import com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor;
 import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact;
 import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose;
 import com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb;
@@ -320,7 +321,8 @@ public void explode() {
 					}
 
 				//unique and upgraded items can endure the blast
-				} else if (!(item.level() > 0 || item.unique))
+				} else if (!(item.level() > 0 || item.unique
+						|| (item instanceof Armor && ((Armor) item).checkSeal() != null)))
 					items.remove( item );
 
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/WildEnergy.java
Patch:
@@ -47,7 +47,7 @@ protected void fx(Ballistica bolt, Callback callback) {
 	
 	@Override
 	protected void affectTarget(Ballistica bolt, final Hero hero) {
-		CursedWand.cursedZap(null, hero, bolt, new Callback() {
+		CursedWand.cursedZap(this, hero, bolt, new Callback() {
 			@Override
 			public void call() {
 				ScrollOfRecharging.charge(hero);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/PixelScene.java
Patch:
@@ -141,7 +141,7 @@ public void create() {
 	public void saveWindows(){
 		savedWindows.clear();
 		savedClass = getClass();
-		for (Gizmo g : members){
+		for (Gizmo g : members.toArray(new Gizmo[0])){
 			if (g instanceof Window){
 				savedWindows.add((Class<? extends Window>) g.getClass());
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndStartGame.java
Patch:
@@ -47,6 +47,7 @@
 import com.watabou.noosa.RenderedText;
 import com.watabou.noosa.ui.Button;
 import com.watabou.noosa.ui.Component;
+import com.watabou.utils.DeviceCompat;
 
 public class WndStartGame extends Window {
 	
@@ -116,7 +117,7 @@ public void update() {
 		start.setRect(0, HEIGHT - 20, WIDTH, 20);
 		add(start);
 		
-		if (Badges.isUnlocked(Badges.Badge.VICTORY)){
+		if (DeviceCompat.isDebug() || Badges.isUnlocked(Badges.Badge.VICTORY)){
 			IconButton challengeButton = new IconButton(
 					Icons.get( SPDSettings.challenges() > 0 ? Icons.CHALLENGE_ON :Icons.CHALLENGE_OFF)){
 				@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/ArmorKit.java
Patch:
@@ -62,7 +62,7 @@ public void execute( Hero hero, String action ) {
 
 		super.execute( hero, action );
 
-		if (action == AC_APPLY) {
+		if (action.equals(AC_APPLY)) {
 
 			curUser = hero;
 			GameScene.selectItem( itemSelector, WndBag.Mode.ARMOR, Messages.get(this, "prompt") );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/ClassArmor.java
Patch:
@@ -71,10 +71,12 @@ public static ClassArmor upgrade ( Hero owner, Armor armor ) {
 			break;
 		}
 		
-		classArmor.level(armor.level());
+		classArmor.level(armor.level() - (armor.curseInfusionBonus ? 1 : 0));
 		classArmor.armorTier = armor.tier;
 		classArmor.augment = armor.augment;
 		classArmor.inscribe( armor.glyph );
+		classArmor.cursed = armor.cursed;
+		classArmor.curseInfusionBonus = armor.curseInfusionBonus;
 		classArmor.identify();
 		
 		return classArmor;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/SpiritBow.java
Patch:
@@ -198,10 +198,9 @@ public int level() {
 				+ (curseInfusionBonus ? 1 : 0);
 	}
 	
-	//for fetching upgrades from a boomerang from pre-0.7.0
-	//TODO implement on this
+	//for fetching upgrades from a boomerang from pre-0.7.1
 	public int spentUpgrades() {
-		return super.level();
+		return super.level() - (curseInfusionBonus ? 1 : 0);
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/enchantments/Vampiric.java
Patch:
@@ -44,6 +44,7 @@ public int proc( Weapon weapon, Char attacker, Char defender, int damage ) {
 			
 			//heals for 50% of damage dealt
 			int healAmt = Math.round(damage * 0.5f);
+			healAmt = Math.min( healAmt, attacker.HT - attacker.HP );
 			
 			if (healAmt > 0 && attacker.isAlive()) {
 				

File: SPD-classes/src/main/java/com/watabou/noosa/Halo.java
Patch:
@@ -8,7 +8,7 @@
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
- *  (at your option) any later version.
+ * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/ArcaneArmor.java
Patch:
@@ -8,7 +8,7 @@
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
- *  (at your option) any later version.
+ * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/elixirs/ElixirOfArcaneArmor.java
Patch:
@@ -8,7 +8,7 @@
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
- *  (at your option) any later version.
+ * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/WildEnergy.java
Patch:
@@ -8,7 +8,7 @@
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
- *  (at your option) any later version.
+ * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/enchantments/Corrupting.java
Patch:
@@ -8,7 +8,7 @@
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
- *  (at your option) any later version.
+ * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/enchantments/Kinetic.java
Patch:
@@ -8,7 +8,7 @@
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
- *  (at your option) any later version.
+ * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/Kunai.java
Patch:
@@ -8,7 +8,7 @@
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
- *  (at your option) any later version.
+ * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/ThrowingClub.java
Patch:
@@ -8,7 +8,7 @@
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
- *  (at your option) any later version.
+ * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/CursedWand.java
Patch:
@@ -426,7 +426,8 @@ public void onBackPressed() {
 
 			//random transmogrification
 			case 3:
-				if (origin == null){
+				//skips this effect if there is no item to transmogrify
+				if (origin == null || !Dungeon.hero.belongings.contains(origin)){
 					cursedZap(origin, user, bolt, afterZap);
 					return;
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/curses/Multiplicity.java
Patch:
@@ -79,6 +79,7 @@ public int proc(Armor armor, Char attacker, Char defender, int damage) {
 							Bundle store = new Bundle();
 							attacker.storeInBundle(store);
 							m.restoreFromBundle(store);
+							m.pos = 0;
 							m.HP = m.HT;
 							if (m.buff(PinCushion.class) != null){
 								m.remove(m.buff(PinCushion.class));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/secret/SecretRoom.java
Patch:
@@ -82,7 +82,7 @@ public static int secretsForFloor(int depth){
 		if (floorsLeft == 0) {
 			secrets = regionSecretsThisRun[region];
 		} else {
-			secrets = regionSecretsThisRun[region] / floorsLeft;
+			secrets = regionSecretsThisRun[region] / (float)floorsLeft;
 			if (Random.Float() < secrets % 1f){
 				secrets = (float)Math.ceil(secrets);
 			} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Preparation.java
Patch:
@@ -249,6 +249,8 @@ public void onSelect(Integer cell) {
 				AttackLevel lvl = AttackLevel.getLvl(turnsInvis);
 				
 				boolean[] passable = Dungeon.level.passable.clone();
+				//need to consider enemy cell as passable in case they are on a trap or chasm
+				passable[cell] = true;
 				PathFinder.buildDistanceMap(Dungeon.hero.pos, passable, lvl.blinkDistance+1);
 				if (PathFinder.distance[cell] == Integer.MAX_VALUE){
 					GLog.w(Messages.get(Preparation.class, "out_of_reach"));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/glyphs/Stone.java
Patch:
@@ -39,7 +39,7 @@ public int proc(Armor armor, Char attacker, Char defender, int damage) {
 		
 		float hitChance;
 		if (evasion >= accuracy){
-			hitChance = 1f - (1f - (accuracy/evasion))/2f;
+			hitChance = (accuracy/evasion)/2f;
 		} else {
 			hitChance = 1f - (evasion/accuracy)/2f;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfCorruption.java
Patch:
@@ -237,7 +237,9 @@ private void corruptEnemy( Mob enemy ){
 			} else {
 				curUser.earnExp(0, enemy.getClass());
 			}
-			enemy.rollToDropLoot();
+			if (enemy.alignment == Char.Alignment.ENEMY){
+				enemy.rollToDropLoot();
+			}
 		} else {
 			Buff.affect(enemy, Doom.class);
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndRanking.java
Patch:
@@ -183,7 +183,7 @@ protected void onClick() {
 
 			pos += GAP + GAP;
 			
-			pos = statSlot( this, Messages.get(this, "str"), Integer.toString( Dungeon.hero.STR ), pos );
+			pos = statSlot( this, Messages.get(this, "str"), Integer.toString( Dungeon.hero.STR() ), pos );
 			pos = statSlot( this, Messages.get(this, "health"), Integer.toString( Dungeon.hero.HT ), pos );
 			
 			pos += GAP;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTransmutation.java
Patch:
@@ -28,6 +28,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.Generator;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact;
+import com.shatteredpixel.shatteredpixeldungeon.items.potions.AlchemicalCatalyst;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.Brew;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.Elixir;
@@ -57,7 +58,7 @@ public class ScrollOfTransmutation extends InventoryScroll {
 	
 	public static boolean canTransmute(Item item){
 		return item instanceof MeleeWeapon ||
-				(item instanceof Potion && !(item instanceof Elixir || item instanceof Brew)) ||
+				(item instanceof Potion && !(item instanceof Elixir || item instanceof Brew || item instanceof AlchemicalCatalyst)) ||
 				item instanceof Scroll ||
 				item instanceof Ring ||
 				item instanceof Wand ||

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndBag.java
Patch:
@@ -399,7 +399,7 @@ public void item( Item item ) {
 						mode == Mode.POTION && (item instanceof Potion) ||
 						mode == Mode.SCROLL && (item instanceof Scroll) ||
 						mode == Mode.UNIDED_POTION_OR_SCROLL && (!item.isIdentified() && (item instanceof Scroll || item instanceof Potion)) ||
-						mode == Mode.EQUIPMENT && (item instanceof EquipableItem) ||
+						mode == Mode.EQUIPMENT && (item instanceof EquipableItem || item instanceof Wand) ||
 						mode == Mode.ALCHEMY && Recipe.usableInRecipe(item) ||
 						mode == Mode.TRANMSUTABLE && ScrollOfTransmutation.canTransmute(item) ||
 						mode == Mode.NOT_EQUIPPED && !item.isEquipped(Dungeon.hero) ||

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndRanking.java
Patch:
@@ -78,14 +78,15 @@ public void run() {
 				}
 			}
 		};
-		thread.start();
 
 		busy = Icons.BUSY.get();
 		busy.origin.set( busy.width / 2, busy.height / 2 );
 		busy.angularSpeed = 720;
 		busy.x = (WIDTH - busy.width) / 2;
 		busy.y = (HEIGHT - busy.height) / 2;
 		add( busy );
+		
+		thread.start();
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Thief.java
Patch:
@@ -116,7 +116,8 @@ public int drRoll() {
 	public int attackProc( Char enemy, int damage ) {
 		damage = super.attackProc( enemy, damage );
 		
-		if (item == null && enemy instanceof Hero && steal( (Hero)enemy )) {
+		if (alignment == Alignment.ENEMY && item == null
+				&& enemy instanceof Hero && steal( (Hero)enemy )) {
 			state = FLEEING;
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/CloakOfShadows.java
Patch:
@@ -66,7 +66,7 @@ public class CloakOfShadows extends Artifact {
 	@Override
 	public ArrayList<String> actions( Hero hero ) {
 		ArrayList<String> actions = super.actions( hero );
-		if (isEquipped( hero ) && !cursed && charge > 0)
+		if (isEquipped( hero ) && !cursed && (charge > 0 || stealthed))
 			actions.add(AC_STEALTH);
 		return actions;
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/DriedRose.java
Patch:
@@ -61,6 +61,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.windows.IconTitle;
 import com.shatteredpixel.shatteredpixeldungeon.windows.WndBag;
 import com.shatteredpixel.shatteredpixeldungeon.windows.WndBlacksmith;
+import com.shatteredpixel.shatteredpixeldungeon.windows.WndItem;
 import com.shatteredpixel.shatteredpixeldungeon.windows.WndQuest;
 import com.watabou.noosa.audio.Sample;
 import com.watabou.utils.Bundle;
@@ -120,7 +121,8 @@ public void execute( Hero hero, String action ) {
 
 		if (action.equals(AC_SUMMON)) {
 
-			if (ghost != null)              GLog.i( Messages.get(this, "spawned") );
+			if (!Ghost.Quest.completed())   GameScene.show(new WndItem(null, this, true));
+			else if (ghost != null)         GLog.i( Messages.get(this, "spawned") );
 			else if (!isEquipped( hero ))   GLog.i( Messages.get(Artifact.class, "need_to_equip") );
 			else if (charge != chargeCap)   GLog.i( Messages.get(this, "no_charge") );
 			else if (cursed)                GLog.i( Messages.get(this, "cursed") );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/enchantments/Elastic.java
Patch:
@@ -39,7 +39,7 @@ public int proc(Weapon weapon, Char attacker, Char defender, int damage ) {
 		// lvl 2 - 43%
 		int level = Math.max( 0, weapon.level() );
 		
-		if (Random.Int( level + 5000 ) >= 4) {
+		if (Random.Int( level + 5 ) >= 4) {
 			//trace a ballistica to our target (which will also extend past them
 			Ballistica trajectory = new Ballistica(attacker.pos, defender.pos, Ballistica.STOP_TARGET);
 			//trim it to just be the part that goes past them

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Warlock.java
Patch:
@@ -96,8 +96,6 @@ protected boolean doAttack( Char enemy ) {
 	}
 	
 	private void zap() {
-		if (enemy == null) return;
-		
 		spend( TIME_TO_ZAP );
 		
 		if (hit( this, enemy, true )) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/CloakOfShadows.java
Patch:
@@ -66,7 +66,7 @@ public class CloakOfShadows extends Artifact {
 	@Override
 	public ArrayList<String> actions( Hero hero ) {
 		ArrayList<String> actions = super.actions( hero );
-		if (isEquipped( hero ) && !cursed && charge > 1)
+		if (isEquipped( hero ) && !cursed && charge > 0)
 			actions.add(AC_STEALTH);
 		return actions;
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTeleportation.java
Patch:
@@ -211,7 +211,7 @@ public static void appear( Char ch, int pos ) {
 		ch.sprite.interruptMotion();
 
 		ch.move( pos );
-		ch.sprite.place( pos );
+		if (ch.pos == pos) ch.sprite.place( pos );
 
 		if (ch.invisible == 0) {
 			ch.sprite.alpha( 0 );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/darts/Dart.java
Patch:
@@ -83,7 +83,9 @@ public boolean hasEnchant(Class<? extends Enchantment> type, Char owner) {
 	@Override
 	public int proc(Char attacker, Char defender, int damage) {
 		if (bow != null && bow.enchantment != null && attacker.buff(MagicImmune.class) == null){
-			damage = bow.enchantment.proc(bow, attacker, defender, damage);
+			level(bow.level());
+			damage = bow.enchantment.proc(this, attacker, defender, damage);
+			level(0);
 		}
 		return super.proc(attacker, defender, damage);
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Warlock.java
Patch:
@@ -96,6 +96,8 @@ protected boolean doAttack( Char enemy ) {
 	}
 	
 	private void zap() {
+		if (enemy == null) return;
+		
 		spend( TIME_TO_ZAP );
 		
 		if (hit( this, enemy, true )) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/enchantments/Vampiric.java
Patch:
@@ -41,7 +41,7 @@ public int proc( Weapon weapon, Char attacker, Char defender, int damage ) {
 		int healAmt = Math.round(healPercent * damage);
 		healAmt = Math.min( healAmt, attacker.HT - attacker.HP );
 		
-		if (healAmt > 0) {
+		if (healAmt > 0 && attacker.isAlive()) {
 		
 			attacker.HP += healAmt;
 			attacker.sprite.emitter().start( Speck.factory( Speck.HEALING ), 0.4f, 1 );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Thief.java
Patch:
@@ -192,7 +192,9 @@ protected void nowhereToRun() {
 				if (enemySeen) {
 					sprite.showStatus(CharSprite.NEGATIVE, Messages.get(Mob.class, "rage"));
 					state = HUNTING;
-				} else if (item != null && !Dungeon.level.heroFOV[pos]) {
+				} else if (item != null
+						&& !Dungeon.level.heroFOV[pos]
+						&& Dungeon.level.distance(Dungeon.hero.pos, pos) < 6) {
 
 					int count = 32;
 					int newPos;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Burning.java
Patch:
@@ -80,7 +80,7 @@ public void restoreFromBundle( Bundle bundle ) {
 	@Override
 	public boolean act() {
 		
-		if (target.isAlive()) {
+		if (target.isAlive() && !target.isImmune(getClass())) {
 			
 			int damage = Random.NormalIntRange( 1, 3 + Dungeon.depth/4 );
 			Buff.detach( target, Chill.class);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -321,11 +321,11 @@ public int attackSkill( Char target ) {
 				|| (((Weapon) wep).hasEnchant(Unstable.class, this) && Random.Int(11) == 0))){
 			if (Precise.rollToGuaranteeHit((Weapon) wep)){
 				target.sprite.emitter().start( Speck.factory(Speck.LIGHT), 0.05f, 5 );
+				if (((Weapon) wep).hasEnchant(Unstable.class, this)){
+					Unstable.justRolledPrecise = true;
+				}
 				return Integer.MAX_VALUE;
 			}
-			if (((Weapon) wep).hasEnchant(Unstable.class, this)){
-				Unstable.justRolledPrecise = true;
-			}
 		}
 		
 		float accuracy = 1;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfBlastWave.java
Patch:
@@ -129,12 +129,12 @@ public static void throwChar(final Char ch, final Ballistica trajectory, int pow
 		Actor.addDelayed(new Pushing(ch, ch.pos, newPos, new Callback() {
 			public void call() {
 				if (initialpos != ch.pos) {
-					//something cased movement before pushing resolved, cancel to be safe.
+					//something caused movement before pushing resolved, cancel to be safe.
 					ch.sprite.place(ch.pos);
 					return;
 				}
 				ch.pos = newPos;
-				if (ch.pos == trajectory.collisionPos) {
+				if (ch.pos == trajectory.collisionPos && ch.isAlive()) {
 					ch.damage(Random.NormalIntRange((finalDist + 1) / 2, finalDist), this);
 					Paralysis.prolong(ch, Paralysis.class, Random.NormalIntRange((finalDist + 1) / 2, finalDist));
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/enchantments/Grim.java
Patch:
@@ -40,7 +40,7 @@ public int proc( Weapon weapon, Char attacker, Char defender, int damage ) {
 		int level = Math.max( 0, weapon.level() );
 
 		int enemyHealth = defender.HP - damage;
-		if (enemyHealth == 0) return damage; //no point in proccing if they're already dead.
+		if (enemyHealth <= 0) return damage; //no point in proccing if they're already dead.
 
 		//scales from 0 - 40% based on how low hp the enemy is, plus 2% per level
 		float maxChance = 0.4f + .02f*level;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/enchantments/Precise.java
Patch:
@@ -42,7 +42,7 @@ public static boolean rollToGuaranteeHit( Weapon weapon ){
 		// lvl 2 - 30%
 		int level = Math.max( 0, weapon.level() );
 		
-		if (Random.Int( level + 80 ) >= 7) {
+		if (Random.Int( level + 8 ) >= 7) {
 			return true;
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/features/Chasm.java
Patch:
@@ -125,7 +125,7 @@ public void onDeath() {
 	}
 
 	public static void mobFall( Mob mob ) {
-		mob.die( Chasm.class );
+		if (mob.isAlive()) mob.die( Chasm.class );
 		
 		((MobSprite)mob.sprite).fall();
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/InterlevelScene.java
Patch:
@@ -300,7 +300,7 @@ public void onBackPressed() {
 				} );
 				thread = null;
 				error = null;
-			} else if ((int)waitingTime == 10){
+			} else if (thread != null && (int)waitingTime == 10){
 				waitingTime = 11f;
 				String s = "";
 				for (StackTraceElement t : thread.getStackTrace()){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -277,7 +277,7 @@ public void staffFx( MagesStaff.StaffParticle particle ){
 	}
 
 	protected void wandUsed() {
-		if (!levelKnown && availableUsesToID >= 1) {
+		if (!isIdentified() && availableUsesToID >= 1) {
 			availableUsesToID--;
 			usesLeftToID--;
 			if (usesLeftToID <= 0) {

File: SPD-classes/src/main/java/com/watabou/glwrap/ScreenConfigChooser.java
Patch:
@@ -50,11 +50,11 @@ public class ScreenConfigChooser implements GLSurfaceView.EGLConfigChooser {
 	public static final int EXACTLY = 1;
 
 	//attributes with this preference must be present in the config with at least the given value
-	// In the case of multiple valid configs, chooser will prefer higher values for these attributes
+	// In the case of multiple valid configs, chooser will prefer lower values for these attributes
 	public static final int PREF_LOW = 2;
 
 	//attributes with this preference must be present in the config with at least the given value
-	// In the case of multiple valid configs, chooser will prefer lower values for these attributes
+	// In the case of multiple valid configs, chooser will prefer higher values for these attributes
 	public static final int PREF_HIGH = 3;
 
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTeleportation.java
Patch:
@@ -100,7 +100,7 @@ public static void teleportToLocation(Hero hero, int pos){
 		}
 		
 		appear( hero, pos );
-		Dungeon.level.press( pos, hero );
+		if (!hero.flying) Dungeon.level.press( pos, hero );
 		Dungeon.observe();
 		GameScene.updateFog();
 		
@@ -126,7 +126,7 @@ public static void teleportHero( Hero  hero ) {
 			GLog.i( Messages.get(ScrollOfTeleportation.class, "tele") );
 			
 			appear( hero, pos );
-			Dungeon.level.press( pos, hero );
+			if (!hero.flying) Dungeon.level.press( pos, hero );
 			Dungeon.observe();
 			GameScene.updateFog();
 			
@@ -174,7 +174,7 @@ public static void teleportPreferringUnseen( Hero hero ){
 			int pos = Random.element(candidates);
 			GLog.i( Messages.get(ScrollOfTeleportation.class, "tele") );
 			appear( hero, pos );
-			Dungeon.level.press( pos, hero );
+			if (!hero.flying) Dungeon.level.press( pos, hero );
 			Dungeon.observe();
 			GameScene.updateFog();
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/FetidRatSprite.java
Patch:
@@ -74,8 +74,8 @@ public void update() {
 	}
 	
 	@Override
-	public void die() {
-		super.die();
+	public void kill() {
+		super.kill();
 		
 		if (cloud != null) {
 			cloud.on = false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Thief.java
Patch:
@@ -139,7 +139,7 @@ protected boolean steal( Hero hero ) {
 		if (item != null && !item.unique && item.level() < 1 ) {
 
 			GLog.w( Messages.get(Thief.class, "stole", item.name()) );
-			if (!item.stackable || hero.belongings.getSimilar(item) == null) {
+			if (!item.stackable) {
 				Dungeon.quickslot.convertToPlaceholder(item);
 			}
 			item.updateQuickslot();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/Armor.java
Patch:
@@ -140,6 +140,7 @@ public void restoreFromBundle( Bundle bundle ) {
 	@Override
 	public void reset() {
 		super.reset();
+		levelsToID = 1;
 		//armor can be kept in bones between runs, the seal cannot.
 		seal = null;
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/Ring.java
Patch:
@@ -117,6 +117,7 @@ public void anonymize(){
 	
 	public void reset() {
 		super.reset();
+		levelsToID = 1;
 		if (handler != null && handler.contains(this)){
 			image = handler.image(this);
 			gem = handler.label(this);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/HeroClass.java
Patch:
@@ -128,7 +128,7 @@ public Badges.Badge masteryBadge() {
 	private static void initWarrior( Hero hero ) {
 		(hero.belongings.weapon = new WornShortsword()).identify();
 		ThrowingStone stones = new ThrowingStone();
-		stones.identify().quantity(3).collect();
+		stones.quantity(3).collect();
 		Dungeon.quickslot.setSlot(0, stones);
 
 		if (hero.belongings.armor != null){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/Ring.java
Patch:
@@ -297,7 +297,7 @@ public void restoreFromBundle( Bundle bundle ) {
 	}
 	
 	public void onHeroGainExp( float levelPercent, Hero hero ){
-		if (!isIdentified() || !isEquipped(hero)) return;
+		if (isIdentified() || !isEquipped(hero)) return;
 		levelsToID -= levelPercent;
 		if (levelsToID <= 0){
 			identify();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/King.java
Patch:
@@ -117,7 +117,7 @@ protected boolean canAttack( Char enemy ) {
 	}
 	
 	private boolean canTryToSummon() {
-		if (Undead.count < maxArmySize()) {
+		if (paralysed <= 0 && Undead.count < maxArmySize()) {
 			Char ch = Actor.findChar( ((CityBossLevel)Dungeon.level).pedestal( nextPedestal ) );
 			return ch == this || ch == null;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Recipe.java
Patch:
@@ -30,9 +30,9 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.AlchemicalCatalyst;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.BlizzardBrew;
+import com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.CausticBrew;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.InfernalBrew;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.ShockingBrew;
-import com.shatteredpixel.shatteredpixeldungeon.items.potions.brews.WickedBrew;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfAquaticRejuvenation;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfDragonsBlood;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.elixirs.ElixirOfHoneyedHealing;
@@ -188,7 +188,7 @@ public final Item sampleOutput(ArrayList<Item> ingredients){
 		new BlizzardBrew.Recipe(),
 		new InfernalBrew.Recipe(),
 		new ShockingBrew.Recipe(),
-		new WickedBrew.Recipe(),
+		new CausticBrew.Recipe(),
 		new Alchemize.Recipe(),
 		new AquaBlast.Recipe(),
 		new BeaconOfReturning.Recipe(),

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/ItemSpriteSheet.java
Patch:
@@ -557,8 +557,8 @@ private static int xy(int x, int y){
 	public static final int ELIXIR_HONEY    = ELIXIRS+1;
 	public static final int ELIXIR_MIGHT    = ELIXIRS+2;
 	public static final int ELIXIR_DRAGON   = ELIXIRS+3;
-	public static final int ELIXIR_ICY      = ELIXIRS+4;
-	public static final int ELIXIR_TOXIC    = ELIXIRS+5;
+	public static final int ELIXIR_TOXIC    = ELIXIRS+4;
+	public static final int ELIXIR_ICY      = ELIXIRS+5;
 	public static final int ELIXIR_RESTO    = ELIXIRS+6; //discontinued
 	public static final int ELIXIR_SURGE    = ELIXIRS+7; //discontinued
 	static{

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/ItemSpriteSheet.java
Patch:
@@ -448,7 +448,7 @@ private static int xy(int x, int y){
 	static {
 		for (int i = SCROLLS; i < SCROLLS+16; i++)
 			assignItemRect(i, 15, 14);
-		assignItemRect(SCROLL_CATALYST, 9, 9);
+		assignItemRect(SCROLL_CATALYST, 12, 11);
 	}
 	
 	private static final int EXOTIC_SCROLLS =                               xy(1, 20);  //16 slots
@@ -553,8 +553,8 @@ private static int xy(int x, int y){
 	public static final int BREW_FROSTFIRE  = BREWS+6; //discontinued
 	
 	private static final int ELIXIRS        =                               xy(9, 25);  //8 slots
-	public static final int ELIXIR_HONEY    = ELIXIRS+0;
-	public static final int ELIXIR_AQUA     = ELIXIRS+1;
+	public static final int ELIXIR_AQUA     = ELIXIRS+0;
+	public static final int ELIXIR_HONEY    = ELIXIRS+1;
 	public static final int ELIXIR_MIGHT    = ELIXIRS+2;
 	public static final int ELIXIR_DRAGON   = ELIXIRS+3;
 	public static final int ELIXIR_ICY      = ELIXIRS+4;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TalismanOfForesight.java
Patch:
@@ -110,7 +110,7 @@ public void charge(Hero target) {
 			if (charge >= chargeCap) {
 				charge = chargeCap;
 				partialCharge = 0;
-				GLog.p( Messages.get(this, "full_charge") );
+				GLog.p( Messages.get(Foresight.class, "full_charge") );
 			}
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/HeroClass.java
Patch:
@@ -54,6 +54,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.ThrowingStone;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.watabou.utils.Bundle;
+import com.watabou.utils.DeviceCompat;
 
 public enum HeroClass {
 
@@ -254,7 +255,7 @@ public String[] perks() {
 	
 	public boolean isUnlocked(){
 		//always unlock on debug builds
-		if (BuildConfig.DEBUG) return true;
+		if (DeviceCompat.isDebug()) return true;
 		
 		switch (this){
 			case WARRIOR: default:

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/TitleScene.java
Patch:
@@ -22,7 +22,6 @@
 package com.shatteredpixel.shatteredpixeldungeon.scenes;
 
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
-import com.shatteredpixel.shatteredpixeldungeon.BuildConfig;
 import com.shatteredpixel.shatteredpixeldungeon.GamesInProgress;
 import com.shatteredpixel.shatteredpixeldungeon.SPDSettings;
 import com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon;
@@ -127,7 +126,7 @@ protected void onClick() {
 			@Override
 			protected boolean onLongClick() {
 				//making it easier to start runs quickly while debugging
-				if (BuildConfig.DEBUG) {
+				if (DeviceCompat.isDebug()) {
 					TitleScene.this.add( new WndStartGame(1) );
 					return true;
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/CapeOfThorns.java
Patch:
@@ -53,6 +53,7 @@ protected ArtifactBuff passiveBuff() {
 	public void charge(Hero target) {
 		if (cooldown == 0) {
 			charge += 4;
+			updateQuickslot();
 		}
 		if (charge >= chargeCap){
 			target.buff(Thorns.class).proc(0, null, null);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/MasterThievesArmband.java
Patch:
@@ -48,6 +48,7 @@ protected ArtifactBuff passiveBuff() {
 	public void charge(Hero target) {
 		if (charge < chargeCap){
 			charge += 10;
+			updateQuickslot();
 		}
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Bones.java
Patch:
@@ -173,7 +173,7 @@ public static Item get() {
 						item.degrade( item.level() - 3 );
 					}
 					//thrown weapons are always IDed, otherwise set unknown
-					item.levelKnown = !(item instanceof MissileWeapon);
+					item.levelKnown = item instanceof MissileWeapon;
 				}
 				
 				item.reset();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Bones.java
Patch:
@@ -172,7 +172,8 @@ public static Item get() {
 					if (item.level() > 3) {
 						item.degrade( item.level() - 3 );
 					}
-					item.levelKnown = false;
+					//thrown weapons are always IDed, otherwise set unknown
+					item.levelKnown = !(item instanceof MissileWeapon);
 				}
 				
 				item.reset();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/Recycle.java
Patch:
@@ -21,6 +21,7 @@
 
 package com.shatteredpixel.shatteredpixeldungeon.items.spells;
 
+import com.shatteredpixel.shatteredpixeldungeon.Challenges;
 import com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon;
 import com.shatteredpixel.shatteredpixeldungeon.items.Generator;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
@@ -75,7 +76,7 @@ protected void onItemSelected(Item item) {
 			} else {
 				result = Generator.random(Generator.Category.STONE);
 			}
-		} while (result.getClass() == item.getClass());
+		} while (result.getClass() == item.getClass() || Challenges.isItemBlocked(result));
 		
 		item.detach(curUser.belongings.backpack);
 		GLog.p(Messages.get(this, "recycled", result.name()));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -146,7 +146,7 @@ protected void processSoulMark(Char target, int chargesUsed){
 		if (target != Dungeon.hero &&
 				Dungeon.hero.subClass == HeroSubClass.WARLOCK &&
 				//standard 1 - 0.92^x chance, plus 7%. Starts at 15%
-				Random.Float() > (Math.pow(0.92f, (level()*chargesUsed)+1) - 0.7f)){
+				Random.Float() > (Math.pow(0.92f, (level()*chargesUsed)+1) - 0.07f)){
 			SoulMark.prolong(target, SoulMark.class, SoulMark.DURATION + level());
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Guard.java
Patch:
@@ -139,7 +139,7 @@ protected Item createLoot() {
 		//with 0 potions dropped that simplifies to 1/8
 		} else {
 			if (Random.Float() < ((6f - Dungeon.LimitedDrops.GUARD_HP.count) / 6f)){
-				Dungeon.LimitedDrops.GUARD_HP.drop();
+				Dungeon.LimitedDrops.GUARD_HP.count++;
 				return new PotionOfHealing();
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Item.java
Patch:
@@ -518,6 +518,7 @@ public void cast( final Hero user, final int dst ) {
 							new Callback() {
 						@Override
 						public void call() {
+							curUser = user;
 							Item.this.detach(user.belongings.backpack).onThrow(cell);
 							user.spendAndNext(delay);
 						}
@@ -530,6 +531,7 @@ public void call() {
 							new Callback() {
 						@Override
 						public void call() {
+							curUser = user;
 							Item.this.detach(user.belongings.backpack).onThrow(cell);
 							user.spendAndNext(delay);
 						}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Actor.java
Patch:
@@ -143,7 +143,9 @@ public static synchronized void clear() {
 	}
 
 	public static synchronized void fixTime() {
-
+		
+		if (all.isEmpty()) return;
+		
 		float min = Float.MAX_VALUE;
 		for (Actor a : all) {
 			if (a.time < min) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Actor.java
Patch:
@@ -159,9 +159,9 @@ public static synchronized void fixTime() {
 		}
 
 		if (Dungeon.hero != null && all.contains( Dungeon.hero )) {
-			Statistics.duration += (int)now;
+			Statistics.duration += min;
 		}
-		now = now % 1;
+		now -= min;
 	}
 	
 	public static void init() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/ChangesScene.java
Patch:
@@ -235,7 +235,7 @@ public void onClick(float x, float y) {
 		
 		changes.addButton( new ChangeButton( new ItemSprite(ItemSpriteSheet.RING_RUBY, null), new RingOfFuror().trueName(),
 				"Ring of furor has been nerfed/simplified:\n\n" +
-				"_-_ Now provides a flat +10.5% attack speed per level, instead of speed with scales based on how slow the weapon is.\n\n" +
+				"_-_ Now provides a flat +10.5% attack speed per level, instead of speed which scales based on how slow the weapon is.\n\n" +
 				"This means the ring is effectively nerfed for slow weapons and regular weapons, and slightly buffed for fast weapons.\n\n" +
 				"A +6 ring grants almost exactly doubled attack speed."));
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Buff.java
Patch:
@@ -69,8 +69,10 @@ public boolean attachTo( Char target ) {
 		if (target.buffs().contains(this)){
 			if (target.sprite != null) fx( true );
 			return true;
-		} else
+		} else {
+			this.target = null;
 			return false;
+		}
 	}
 	
 	public void detach() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Tengu.java
Patch:
@@ -164,7 +164,7 @@ protected boolean doAttack(Char enemy) {
 			Dungeon.hero.resting = false;
 		sprite.attack( enemy.pos );
 		spend( attackDelay() );
-		return true;
+		return !Dungeon.level.adjacent(pos, enemy.pos);
 }
 
 	private void jump() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/effects/CircleArc.java
Patch:
@@ -58,9 +58,8 @@ public class CircleArc extends Visual {
 	public CircleArc( int triangles, float radius ) {
 		
 		super( 0, 0, 0, 0 );
-		
-		int gradient[] = {0xFFFFFFFF, 0xFFFFFFFF};
-		texture = TextureCache.createGradient( gradient );
+
+		texture = TextureCache.createSolid( 0xFFFFFFFF );
 		
 		this.nTris = triangles;
 		this.rad = radius;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Item.java
Patch:
@@ -58,7 +58,7 @@ public class Item implements Bundlable {
 	
 	protected static final float TIME_TO_THROW		= 1.0f;
 	protected static final float TIME_TO_PICK_UP	= 1.0f;
-	protected static final float TIME_TO_DROP		= 0.5f;
+	protected static final float TIME_TO_DROP		= 1.0f;
 	
 	public static final String AC_DROP		= "DROP";
 	public static final String AC_THROW		= "THROW";

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/MissileWeapon.java
Patch:
@@ -109,6 +109,7 @@ public Item upgrade() {
 				if (upgraded.quantity() == 1 && !upgraded.collect()) {
 					Dungeon.level.drop(upgraded, Dungeon.hero.pos);
 				}
+				updateQuickslot();
 				return upgraded;
 			} else {
 				durability = MAX_DURABILITY;
@@ -119,6 +120,7 @@ public Item upgrade() {
 					detach(Dungeon.hero.belongings.backpack);
 					return similar.merge(this);
 				}
+				updateQuickslot();
 				return this;
 			}
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/CurseInfusion.java
Patch:
@@ -28,9 +28,9 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor;
 import com.shatteredpixel.shatteredpixeldungeon.items.quest.MetalShard;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfRemoveCurse;
+import com.shatteredpixel.shatteredpixeldungeon.items.weapon.SpiritBow;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.Weapon;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon;
-import com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.Boomerang;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
 import com.shatteredpixel.shatteredpixeldungeon.windows.WndBag;
 import com.watabou.noosa.audio.Sample;
@@ -49,7 +49,7 @@ protected void onItemSelected(Item item) {
 		Sample.INSTANCE.play(Assets.SND_CURSED);
 		
 		item.cursed = true;
-		if (item instanceof MeleeWeapon || item instanceof Boomerang) {
+		if (item instanceof MeleeWeapon || item instanceof SpiritBow) {
 			Weapon w = (Weapon) item;
 			Class<? extends Weapon.Enchantment> curr = null;
 			if (w.enchantment != null) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/journal/Catalog.java
Patch:
@@ -116,7 +116,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.WarHammer;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.Whip;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.WornShortsword;
-import com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.Boomerang;
 import com.watabou.utils.Bundle;
 
 import java.util.ArrayList;
@@ -155,7 +154,7 @@ public boolean allSeen(){
 		WEAPONS.seen.put( Knuckles.class,                   false);
 		WEAPONS.seen.put( Dagger.class,                     false);
 		WEAPONS.seen.put( MagesStaff.class,                 false);
-		WEAPONS.seen.put( Boomerang.class,                  false);
+		//WEAPONS.seen.put( Boomerang.class,                  false);
 		WEAPONS.seen.put( Shortsword.class,                 false);
 		WEAPONS.seen.put( HandAxe.class,                    false);
 		WEAPONS.seen.put( Spear.class,                      false);
@@ -253,7 +252,7 @@ public boolean allSeen(){
 		SCROLLS.seen.put( ScrollOfTerror.class,             false);
 		SCROLLS.seen.put( ScrollOfLullaby.class,            false);
 		SCROLLS.seen.put( ScrollOfRage.class,               false);
-		SCROLLS.seen.put( ScrollOfRetribution.class,       false);
+		SCROLLS.seen.put( ScrollOfRetribution.class,        false);
 		SCROLLS.seen.put( ScrollOfTransmutation.class,      false);
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/CursingTrap.java
Patch:
@@ -34,6 +34,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.Weapon;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.Boomerang;
+import com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
 import com.watabou.noosa.audio.Sample;
@@ -59,7 +60,7 @@ public void activate() {
 		Heap heap = Dungeon.level.heaps.get( pos );
 		if (heap != null){
 			for (Item item : heap.items){
-				if (item.isUpgradable())
+				if (item.isUpgradable() && !(item instanceof MissileWeapon))
 					curse(item);
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndBag.java
Patch:
@@ -390,7 +390,7 @@ public void item( Item item ) {
 						mode == Mode.UPGRADEABLE && item.isUpgradable() ||
 						mode == Mode.UNIDENTIFED && !item.isIdentified() ||
 						mode == Mode.UNCURSABLE && ScrollOfRemoveCurse.uncursable(item) ||
-						mode == Mode.CURSABLE && ((item instanceof EquipableItem && !(item instanceof MissileWeapon)) || item instanceof Boomerang || item instanceof Wand) ||
+						mode == Mode.CURSABLE && ((item instanceof EquipableItem && !(item instanceof MissileWeapon)) || item instanceof Wand) ||
 						mode == Mode.QUICKSLOT && (item.defaultAction != null) ||
 						mode == Mode.WEAPON && (item instanceof MeleeWeapon || item instanceof Boomerang) ||
 						mode == Mode.ARMOR && (item instanceof Armor) ||

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/SpiritBow.java
Patch:
@@ -142,7 +142,8 @@ public int damageRoll(Char owner) {
 	
 	@Override
 	public int level() {
-		return Dungeon.hero.lvl/5;
+		//need to check if hero is null for loading an upgraded bow from pre-0.7.0
+		return Dungeon.hero == null ? 0 : Dungeon.hero.lvl/5;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/mechanics/ShadowCaster.java
Patch:
@@ -80,6 +80,9 @@ private static void scanOctant(int distance, boolean[] fov, boolean[] blocking,
 	                               int x, int y, double lSlope, double rSlope,
 	                               int mX, int mY, boolean mXY){
 		
+		//if we have negative space to traverse, just quit.
+		if (rSlope < lSlope) return;
+		
 		boolean inBlocking = false;
 		int start, end;
 		int col;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -491,7 +491,7 @@ public synchronized void updateSpriteState() {
 		}
 	}
 	
-	public int stealth() {
+	public float stealth() {
 		return 0;
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1292,11 +1292,11 @@ public void remove( Buff buff ) {
 	}
 	
 	@Override
-	public int stealth() {
-		int stealth = super.stealth();
+	public float stealth() {
+		float stealth = super.stealth();
 		
 		if (belongings.armor != null){
-			stealth = Math.round(belongings.armor.stealthFactor(this, stealth));
+			stealth = belongings.armor.stealthFactor(this, stealth);
 		}
 		
 		return stealth;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -691,7 +691,7 @@ protected class Sleeping implements AiState {
 
 		@Override
 		public boolean act( boolean enemyInFOV, boolean justAlerted ) {
-			if (enemyInFOV && Random.Int( distance( enemy ) + enemy.stealth() + (enemy.flying ? 2 : 0) ) == 0) {
+			if (enemyInFOV && Random.Float( distance( enemy ) + enemy.stealth() + (enemy.flying ? 2 : 0) ) < 1) {
 
 				enemySeen = true;
 
@@ -726,7 +726,7 @@ protected class Wandering implements AiState {
 
 		@Override
 		public boolean act( boolean enemyInFOV, boolean justAlerted ) {
-			if (enemyInFOV && (justAlerted || Random.Int( distance( enemy ) / 2 + enemy.stealth() ) == 0)) {
+			if (enemyInFOV && (justAlerted || Random.Float( distance( enemy ) / 2f + enemy.stealth() ) < 1)) {
 
 				enemySeen = true;
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/DriedRose.java
Patch:
@@ -571,11 +571,11 @@ public int defenseSkill(Char enemy) {
 		}
 		
 		@Override
-		public int stealth() {
-			int stealth = super.stealth();
+		public float stealth() {
+			float stealth = super.stealth();
 			
 			if (rose != null && rose.armor != null){
-				stealth = Math.round(rose.armor.stealthFactor(this, stealth));
+				stealth = rose.armor.stealthFactor(this, stealth);
 			}
 			
 			return stealth;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CityLevel.java
Patch:
@@ -103,10 +103,10 @@ protected float[] trapChances() {
 	}
 	
 	@Override
-	protected void createItems() {
-		super.createItems();
-		
+	protected void createMobs() {
 		Imp.Quest.spawn( this );
+		
+		super.createMobs();
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/MassGraveRoom.java
Patch:
@@ -89,7 +89,7 @@ public void paint(Level level){
 				pos = level.pointToCell(random());
 			} while (level.map[pos] != Terrain.EMPTY_SP || level.heaps.get(pos) != null);
 			Heap h = level.drop(item, pos);
-			h.haunted = true;
+			h.setHauntedIfCursed(1f);
 			h.type = Heap.Type.SKELETON;
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Statue.java
Patch:
@@ -99,7 +99,7 @@ protected float attackDelay() {
 
 	@Override
 	protected boolean canAttack(Char enemy) {
-		return Dungeon.level.distance( pos, enemy.pos ) <= weapon.reachFactor(this);
+		return super.canAttack(enemy) || weapon.canReach(this, enemy.pos);
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/AlchemistsToolkit.java
Patch:
@@ -113,7 +113,8 @@ public void absorbEnergy( int energy ){
 			partialCharge -= 1;
 			charge++;
 			
-			if (charge == chargeCap){
+			if (charge >= chargeCap){
+				charge = chargeCap;
 				partialCharge = 0;
 				break;
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/Bolas.java
Patch:
@@ -45,7 +45,7 @@ public int max(int lvl) {
 	
 	@Override
 	public int STRReq(int lvl) {
-		return 15;
+		return 13;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/ShopRoom.java
Patch:
@@ -284,7 +284,8 @@ protected static ArrayList<Item> generateItems() {
 			default:
 				rare = new Stylus();
 		}
-		rare.cursed = rare.cursedKnown = false;
+		rare.cursed = false;
+		rare.cursedKnown = true;
 		itemsToSpawn.add( rare );
 
 		//hard limit is 63 items + 1 shopkeeper, as shops can't be bigger than 8x8=64 internally

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/DungeonTileSheet.java
Patch:
@@ -325,7 +325,7 @@ public static int stitchWallOverhangTile(int tile, int rightBelow, int below, in
 	public static final int DOOR_SIDEWAYS_LOCKED        = WALL_OVERHANG+24;
 
 	public static final int STATUE_OVERHANG             = WALL_OVERHANG+26;
-	public static final int ALCHEMY_POT_OVERHAND        = WALL_OVERHANG+27;
+	public static final int ALCHEMY_POT_OVERHANG        = WALL_OVERHANG+27;
 	public static final int BARRICADE_OVERHANG          = WALL_OVERHANG+28;
 	public static final int HIGH_GRASS_OVERHANG         = WALL_OVERHANG+29;
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/DungeonWallsTilemap.java
Patch:
@@ -76,7 +76,7 @@ protected int getTileVisual(int pos, int tile, boolean flat){
 		} else if (pos + mapWidth < size && (map[pos+mapWidth] == Terrain.STATUE || map[pos+mapWidth] == Terrain.STATUE_SP)){
 			return DungeonTileSheet.STATUE_OVERHANG;
 		} else if (pos + mapWidth < size && map[pos+mapWidth] == Terrain.ALCHEMY){
-			return DungeonTileSheet.ALCHEMY_POT_OVERHAND;
+			return DungeonTileSheet.ALCHEMY_POT_OVERHANG;
 		} else if (pos + mapWidth < size && map[pos+mapWidth] == Terrain.BARRICADE){
 			return DungeonTileSheet.BARRICADE_OVERHANG;
 		} else if (pos + mapWidth < size && map[pos+mapWidth] == Terrain.HIGH_GRASS){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/SPDSettings.java
Patch:
@@ -75,6 +75,8 @@ public static void landscape( boolean value ){
 		((ShatteredPixelDungeon)ShatteredPixelDungeon.instance).updateDisplaySize();
 	}
 	
+	//FIXME in certain multi-window cases this can disagree with the actual screen size
+	//there should be an option to check for landscape the setting, and actual screen size
 	public static boolean landscape() {
 		return getBoolean(KEY_LANDSCAPE, Game.dispWidth > Game.dispHeight);
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/ArcaneBomb.java
Patch:
@@ -72,6 +72,8 @@ public void explode(int cell) {
 					//regular bomb damage, but pierces armor
 					int damage = Math.round(Random.NormalIntRange( Dungeon.depth+5, 10 + Dungeon.depth * 2 ));
 					ch.damage(damage, this);
+					if (ch == Dungeon.hero && !ch.isAlive())
+						Dungeon.fail(Bomb.class);
 				}
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/ShrapnelBomb.java
Patch:
@@ -62,6 +62,8 @@ public void explode(int cell) {
 					int damage = Math.round(Random.NormalIntRange( Dungeon.depth+5, 10 + Dungeon.depth * 2 ));
 					damage -= ch.drRoll();
 					ch.damage(damage, this);
+					if (ch == Dungeon.hero && !ch.isAlive())
+						Dungeon.fail(Bomb.class);
 				}
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/AlchemyScene.java
Patch:
@@ -305,6 +305,7 @@ public void onSelect( Item item ) {
 							if (item instanceof Dart) {
 								inputs[i].item(item.detachAll(Dungeon.hero.belongings.backpack));
 							} else if (item instanceof AlchemistsToolkit) {
+								clearSlots();
 								inputs[i].item(item);
 							} else {
 								inputs[i].item(item.detach(Dungeon.hero.belongings.backpack));

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/BrokenSeal.java
Patch:
@@ -127,6 +127,7 @@ public synchronized boolean act() {
 		public synchronized void supercharge(int maxShield){
 			if (maxShield > shielding){
 				shielding = maxShield;
+				target.needsShieldUpdate = true;
 			}
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -655,7 +655,7 @@ public static void loadGame( int save, boolean fullLoad ) throws IOException {
 		for (int i=1; i <= 26; i++) {
 			
 			//dropped items
-			ArrayList<Item> items = new ArrayList<Item>();
+			ArrayList<Item> items = new ArrayList<>();
 			if (bundle.contains(Messages.format( DROPPED, i )))
 				for (Bundlable b : bundle.getCollection( Messages.format( DROPPED, i ) ) ) {
 					items.add( (Item)b );
@@ -665,7 +665,7 @@ public static void loadGame( int save, boolean fullLoad ) throws IOException {
 			}
 			
 			//ported items
-			items.clear();
+			items = new ArrayList<>();
 			if (bundle.contains(Messages.format( PORTED, i )))
 				for (Bundlable b : bundle.getCollection( Messages.format( PORTED, i ) ) ) {
 					items.add( (Item)b );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/MagicalSleep.java
Patch:
@@ -37,7 +37,7 @@ public boolean attachTo( Char target ) {
 		if (!target.isImmune(Sleep.class) && super.attachTo( target )) {
 
 			if (target instanceof Hero)
-				if (target.HP == target.buff(Regeneration.class).regencap()) {
+				if (target.HP == target.HT) {
 					GLog.i(Messages.get(this, "toohealthy"));
 					detach();
 					return true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Heap.java
Patch:
@@ -250,6 +250,8 @@ public void burn() {
 				if (((Bomb) item).explodesDestructively()) {
 					//stop processing the burning, it will be replaced by the explosion.
 					return;
+				} else {
+					burnt = true;
 				}
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CityBossLevel.java
Patch:
@@ -28,7 +28,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.King;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
-import com.shatteredpixel.shatteredpixeldungeon.items.Gold;
 import com.shatteredpixel.shatteredpixeldungeon.items.Heap;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.keys.SkeletonKey;
@@ -166,7 +165,7 @@ public Actor respawner() {
 	
 	@Override
 	protected void createItems() {
-		Item item = new Gold(10);
+		Item item = Bones.get();
 		if (item != null) {
 			int pos;
 			do {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/QuickRecipe.java
Patch:
@@ -316,14 +316,14 @@ public String info() {
 						new ArrayList<>(Arrays.asList(new Blandfruit(), new Plant.Seed.PlaceHolder())),
 						new Blandfruit(){
 							{
-								name = "Cooked Blandfruit";
+								name = Messages.get(Blandfruit.class, "cooked");
 							}
 							
 							@Override
 							public String info() {
 								return "";
 							}
-						})); //TODO
+						}));
 				return result;
 			case 6:
 				r = new Bomb.EnhanceBomb();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/DriedRose.java
Patch:
@@ -474,7 +474,8 @@ protected Char chooseEnemy() {
 			Char enemy = super.chooseEnemy();
 			
 			//will never attack something far from the player
-			if (enemy != null &&  Dungeon.level.distance(enemy.pos, Dungeon.hero.pos) <= 8){
+			if (enemy != null && Dungeon.level.mobs.contains(enemy)
+					&& Dungeon.level.distance(enemy.pos, Dungeon.hero.pos) <= 8){
 				return enemy;
 			} else {
 				return null;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/elixirs/ElixirOfVitality.java
Patch:
@@ -38,6 +38,7 @@ public class ElixirOfVitality extends Elixir {
 	@Override
 	public void apply(Hero hero) {
 		Buff.affect( hero, Healing.class ).setHeal((int)(0.8f*hero.HT + 14), 0.25f, 0);
+		PotionOfHealing.cure(hero);
 		Buff.affect(hero, Barrier.class).set((int)(0.6f*hero.HT + 10));
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CityBossLevel.java
Patch:
@@ -28,6 +28,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.King;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
+import com.shatteredpixel.shatteredpixeldungeon.items.Gold;
 import com.shatteredpixel.shatteredpixeldungeon.items.Heap;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.keys.SkeletonKey;
@@ -165,13 +166,13 @@ public Actor respawner() {
 	
 	@Override
 	protected void createItems() {
-		Item item = Bones.get();
+		Item item = new Gold(10);
 		if (item != null) {
 			int pos;
 			do {
 				pos =
 					Random.IntRange( LEFT + 1, LEFT + HALL_WIDTH - 2 ) +
-					Random.IntRange( TOP + HALL_HEIGHT + 1, TOP + HALL_HEIGHT  + CHAMBER_HEIGHT ) * width();
+					Random.IntRange( TOP + HALL_HEIGHT + 2, TOP + HALL_HEIGHT  + CHAMBER_HEIGHT ) * width();
 			} while (pos == entrance);
 			drop( item, pos ).type = Heap.Type.REMAINS;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/PrismaticImage.java
Patch:
@@ -29,6 +29,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.blobs.ToxicGas;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Burning;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Corruption;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.PrismaticGuard;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
@@ -231,6 +232,7 @@ public boolean interact() {
 		immunities.add( ToxicGas.class );
 		immunities.add( CorrosiveGas.class );
 		immunities.add( Burning.class );
+		immunities.add( Corruption.class );
 	}
 	
 	private class Wandering extends Mob.Wandering{

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/food/Feast.java
Patch:
@@ -40,7 +40,7 @@ public class Feast extends Food {
 	@Override
 	protected void satisfy(Hero hero) {
 		super.satisfy( hero );
-		Buff.affect(hero, WellFed.class);
+		Buff.affect(hero, WellFed.class).reset();
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/exotic/ExoticScroll.java
Patch:
@@ -95,7 +95,7 @@ public boolean isKnown() {
 	
 	@Override
 	public void setKnown() {
-		if (isKnown()) {
+		if (!isKnown()) {
 			handler.know(exoToReg.get(this.getClass()));
 			updateQuickslot();
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/Firebomb.java
Patch:
@@ -36,7 +36,6 @@
 public class Firebomb extends Bomb {
 	
 	{
-		//TODO visuals
 		image = ItemSpriteSheet.FIRE_BOMB;
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/FrostBomb.java
Patch:
@@ -32,7 +32,6 @@
 public class FrostBomb extends Bomb {
 	
 	{
-		//TODO visuals
 		image = ItemSpriteSheet.FROST_BOMB;
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/HolyBomb.java
Patch:
@@ -39,7 +39,6 @@
 public class HolyBomb extends Bomb {
 	
 	{
-		//TODO visuals
 		image = ItemSpriteSheet.HOLY_BOMB;
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/ShockBomb.java
Patch:
@@ -34,7 +34,6 @@
 public class ShockBomb extends Bomb {
 	
 	{
-		//TODO visuals
 		image = ItemSpriteSheet.SHOCK_BOMB;
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/elixirs/ElixirOfHoneyedHealing.java
Patch:
@@ -44,6 +44,7 @@ public class ElixirOfHoneyedHealing extends Elixir {
 	@Override
 	public void apply(Hero hero) {
 		Buff.affect( hero, Healing.class ).setHeal((int)(0.8f*hero.HT + 14), 0.25f, 0);
+		PotionOfHealing.cure(hero);
 		hero.buff(Hunger.class).satisfy(Hunger.STARVING/5f);
 	}
 	
@@ -57,6 +58,7 @@ public void shatter(int cell) {
 		Char ch = Actor.findChar(cell);
 		if (ch != null){
 			Buff.affect( ch, Healing.class ).setHeal((int)(0.8f*ch.HT + 14), 0.25f, 0);
+			PotionOfHealing.cure(ch);
 			if (ch instanceof Bee && ch.alignment != curUser.alignment){
 				ch.alignment = Char.Alignment.ALLY;
 				((Bee)ch).setPotInfo(-1, null);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/AlchemyScene.java
Patch:
@@ -127,8 +127,8 @@ public void draw() {
 		int pos = (Camera.main.height - 100)/2;
 		
 		RenderedTextMultiline desc = PixelScene.renderMultiline(6);
-		desc.text( Messages.get(AlchemyScene.class, "text") );
 		desc.maxWidth(w);
+		desc.text( Messages.get(AlchemyScene.class, "text") );
 		desc.setPos(left + (w - desc.width())/2, pos);
 		add(desc);
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Recipe.java
Patch:
@@ -229,6 +229,7 @@ public static Recipe findRecipe(ArrayList<Item> ingredients){
 	
 	public static boolean usableInRecipe(Item item){
 		return item.isIdentified()
+				&& !item.cursed
 				&& (!(item instanceof EquipableItem) || item instanceof Dart || item instanceof AlchemistsToolkit)
 				&& !(item instanceof Wand);
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/RockfallTrap.java
Patch:
@@ -90,7 +90,7 @@ public void activate() {
 
 			Char ch = Actor.findChar( cell );
 
-			if (ch != null){
+			if (ch != null && ch.isAlive()){
 				int damage = Random.NormalIntRange(5+Dungeon.depth, 10+Dungeon.depth*2);
 				damage -= ch.drRoll();
 				ch.damage( Math.max(damage, 0) , this);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndItem.java
Patch:
@@ -90,7 +90,7 @@ public WndItem( final WndBag owner, final Item item , final boolean options ) {
 					protected void onClick() {
 						hide();
 						if (owner != null && owner.parent != null) owner.hide();
-						item.execute( Dungeon.hero, action );
+						if (Dungeon.hero.isAlive()) item.execute( Dungeon.hero, action );
 					};
 				};
 				btn.setSize( btn.reqWidth(), BUTTON_HEIGHT );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/AlchemistsToolkit.java
Patch:
@@ -181,7 +181,7 @@ public void gainCharge(float levelPortion) {
 					partialCharge -= 1;
 					
 					if (charge == chargeCap){
-						GLog.p( Messages.get(HornOfPlenty.class, "full") );
+						GLog.p( Messages.get(AlchemistsToolkit.class, "full") );
 						partialCharge = 0;
 					}
 					

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/WaterOfAwareness.java
Patch:
@@ -73,7 +73,7 @@ protected boolean affectHero( Hero hero ) {
 	}
 	
 	@Override
-	protected Item affectItem( Item item ) {
+	protected Item affectItem( Item item, int pos ) {
 		if (item.isIdentified()) {
 			return null;
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/WaterOfHealth.java
Patch:
@@ -53,7 +53,7 @@ protected boolean affectHero( Hero hero ) {
 		hero.belongings.uncurseEquipped();
 		((Hunger)hero.buff( Hunger.class )).satisfy( Hunger.STARVING );
 		
-		CellEmitter.get( pos ).start( ShaftParticle.FACTORY, 0.2f, 3 );
+		CellEmitter.get( hero.pos ).start( ShaftParticle.FACTORY, 0.2f, 3 );
 
 		Dungeon.hero.interrupt();
 	
@@ -63,7 +63,7 @@ protected boolean affectHero( Hero hero ) {
 	}
 	
 	@Override
-	protected Item affectItem( Item item ) {
+	protected Item affectItem( Item item, int pos ) {
 		if (item instanceof DewVial && !((DewVial)item).isFull()) {
 			((DewVial)item).fill();
 			return item;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/WaterOfTransmutation.java
Patch:
@@ -48,7 +48,7 @@
 public class WaterOfTransmutation extends WellWater {
 	
 	@Override
-	protected Item affectItem( Item item ) {
+	protected Item affectItem( Item item, int pos ) {
 		
 		if (item instanceof MagesStaff) {
 			item = changeStaff( (MagesStaff)item );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/AlchemistsToolkit.java
Patch:
@@ -235,6 +235,7 @@ public Item sampleOutput(ArrayList<Item> ingredients) {
 			
 			sample.charge = existing.charge;
 			sample.partialCharge = existing.partialCharge;
+			sample.exp = existing.exp;
 			sample.level(existing.level());
 			sample.absorbEnergy(AlchemyScene.availableEnergy());
 			return sample;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/FeatherFall.java
Patch:
@@ -44,7 +44,7 @@ protected void onCast(Hero hero) {
 		hero.sprite.operate(hero.pos);
 		Sample.INSTANCE.play(Assets.SND_READ );
 		
-		GLog.p(Messages.get(this, "feather"));
+		GLog.p(Messages.get(this, "light"));
 		
 		detach( curUser.belongings.backpack );
 		updateQuickslot();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/MagicalPorter.java
Patch:
@@ -53,9 +53,10 @@ protected void onCast(Hero hero) {
 	protected void onItemSelected(Item item) {
 		
 		Item result = item.detachAll(curUser.belongings.backpack);
-		ArrayList<Item> ported = Dungeon.portedItems.get(5);
+		int portDepth = 5 * (1 + Dungeon.depth/5);
+		ArrayList<Item> ported = Dungeon.portedItems.get(portDepth);
 		if (ported == null) {
-			Dungeon.portedItems.put(5 * (1 + Dungeon.depth/5), ported = new ArrayList<>());
+			Dungeon.portedItems.put(portDepth, ported = new ArrayList<>());
 		}
 		ported.add(result);
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/quest/GooBlob.java
Patch:
@@ -43,6 +43,6 @@ public boolean isIdentified() {
 
 	@Override
 	public int price() {
-		return 40;
+		return quantity * 50;
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/quest/MetalShard.java
Patch:
@@ -43,6 +43,6 @@ public boolean isIdentified() {
 	
 	@Override
 	public int price() {
-		return 80;
+		return quantity * 100;
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Heap.java
Patch:
@@ -247,8 +247,9 @@ public void burn() {
 			} else if (item instanceof Bomb) {
 				items.remove( item );
 				((Bomb) item).explode( pos );
+				burnt = true;
 				//stop processing the burning, it will be replaced by the explosion.
-				return;
+				break;
 			}
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/MagicalPorter.java
Patch:
@@ -23,9 +23,9 @@
 
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
-import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.MirrorImage;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.MerchantsBeacon;
+import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfMirrorImage;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
@@ -65,7 +65,7 @@ protected void onItemSelected(Item item) {
 	public static class Recipe extends com.shatteredpixel.shatteredpixeldungeon.items.Recipe.SimpleRecipe {
 		
 		{
-			inputs =  new Class[]{MirrorImage.class, MerchantsBeacon.class};
+			inputs =  new Class[]{ScrollOfMirrorImage.class, MerchantsBeacon.class};
 			inQuantity = new int[]{1, 1};
 			
 			cost = 2;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/AlchemyScene.java
Patch:
@@ -402,8 +402,6 @@ public void destroy() {
 			}
 		}
 		
-		provider = null;
-		
 		try {
 			Dungeon.saveAll();
 			Badges.saveGlobal();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Paralysis.java
Patch:
@@ -26,7 +26,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite;
 import com.shatteredpixel.shatteredpixeldungeon.ui.BuffIndicator;
-import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
 import com.watabou.utils.Bundle;
 import com.watabou.utils.Random;
 
@@ -57,10 +56,10 @@ public void processDamage( int damage ){
 		}
 		resist.damage += damage;
 		if (Random.NormalIntRange(0, resist.damage) >= Random.NormalIntRange(0, target.HP)){
-			detach();
 			if (Dungeon.level.heroFOV[target.pos]) {
-				GLog.i( Messages.get(this, "out", target.name) );
+				target.sprite.showStatus(CharSprite.NEUTRAL, Messages.get(this, "out"));
 			}
+			detach();
 		}
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -674,7 +674,7 @@ public void notice() {
 	}
 	
 	public void yell( String str ) {
-		GLog.n( "%s: \"%s\" ", name, str );
+		GLog.n( "%s: \"%s\" ", Messages.titleCase(name), str );
 	}
 
 	//returns true when a mob sees the hero, and is currently targeting them.

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTransmutation.java
Patch:
@@ -29,8 +29,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion;
-import com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfMight;
-import com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfStrength;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.ExoticPotion;
 import com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ExoticScroll;
@@ -96,7 +94,9 @@ protected void onItemSelected(Item item) {
 				((EquipableItem)result).doEquip(Dungeon.hero);
 			} else {
 				item.detach(Dungeon.hero.belongings.backpack);
-				result.collect();
+				if (!result.collect()){
+					Dungeon.level.drop(result, curUser.pos).sprite.drop();
+				}
 			}
 			if (result.isIdentified()){
 				Catalog.setSeen(result.getClass());

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfCorruption.java
Patch:
@@ -161,7 +161,7 @@ protected void onZap(Ballistica bolt) {
 			
 			//cannot re-corrupt or doom an enemy, so give them a major debuff instead
 			if(enemy.buff(Corruption.class) != null || enemy.buff(Doom.class) != null){
-				enemyResist = corruptingPower*.99f;
+				corruptingPower = enemyResist - 0.001f;
 			}
 			
 			if (corruptingPower > enemyResist){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/secret/SecretLaboratoryRoom.java
Patch:
@@ -23,6 +23,7 @@
 
 import com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Alchemy;
+import com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfExperience;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfFrost;
@@ -70,9 +71,7 @@ public void paint( Level level ) {
 		Point pot = center();
 		Painter.set( level, pot, Terrain.ALCHEMY );
 		
-		Alchemy alchemy = new Alchemy();
-		alchemy.seed( level, pot.x + level.width() * pot.y, 1+Random.NormalIntRange(20, 30) );
-		level.blobs.put( Alchemy.class, alchemy );
+		Blob.seed( pot.x + level.width() * pot.y, 1+Random.NormalIntRange(20, 30), Alchemy.class, level );
 		
 		int n = Random.IntRange( 2, 3 );
 		HashMap<Class<? extends Potion>, Float> chances = new HashMap<>(potionChances);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/LaboratoryRoom.java
Patch:
@@ -23,6 +23,7 @@
 
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Alchemy;
+import com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob;
 import com.shatteredpixel.shatteredpixeldungeon.items.Generator;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.journal.AlchemyPage;
@@ -60,10 +61,8 @@ public void paint( Level level ) {
 		}
 		Painter.set( level, pot, Terrain.ALCHEMY );
 		
-		Alchemy alchemy = new Alchemy();
 		int chapter = 1 + Dungeon.depth/5;
-		alchemy.seed( level, pot.x + level.width() * pot.y, 1 + chapter*10 + Random.NormalIntRange(0, 10) );
-		level.blobs.put( Alchemy.class, alchemy );
+		Blob.seed( pot.x + level.width() * pot.y, 1 + chapter*10 + Random.NormalIntRange(0, 10), Alchemy.class, level );
 		
 		int n = Random.NormalIntRange( 2, 3 );
 		for (int i=0; i < n; i++) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/DungeonTileSheet.java
Patch:
@@ -144,6 +144,7 @@ public static boolean floorTile(int tile){
 		chasmStitcheable.put( Terrain.DOOR,         CHASM_WALL );
 		chasmStitcheable.put( Terrain.OPEN_DOOR,    CHASM_WALL );
 		chasmStitcheable.put( Terrain.LOCKED_DOOR,  CHASM_WALL );
+		chasmStitcheable.put( Terrain.SECRET_DOOR,  CHASM_WALL );
 		chasmStitcheable.put( Terrain.WALL_DECO,    CHASM_WALL );
 
 		//water

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndBag.java
Patch:
@@ -47,7 +47,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.Boomerang;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.plants.Plant.Seed;
-import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
@@ -57,6 +56,7 @@
 import com.watabou.gltextures.TextureCache;
 import com.watabou.noosa.BitmapText;
 import com.watabou.noosa.ColorBlock;
+import com.watabou.noosa.Game;
 import com.watabou.noosa.Image;
 import com.watabou.noosa.RenderedText;
 import com.watabou.noosa.audio.Sample;
@@ -251,7 +251,7 @@ public void onBackPressed() {
 	@Override
 	protected void onClick( Tab tab ) {
 		hide();
-		GameScene.show( new WndBag( ((BagTab)tab).bag, listener, mode, title ) );
+		Game.scene().addToFront(new WndBag(((BagTab) tab).bag, listener, mode, title));
 	}
 	
 	@Override
@@ -439,7 +439,7 @@ protected void onClick() {
 				
 			} else {
 				
-				GameScene.show(new WndItem( WndBag.this, item ) );
+				Game.scene().addToFront(new WndItem( WndBag.this, item ) );
 				
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Bleeding.java
Patch:
@@ -110,6 +110,6 @@ public String heroMessage() {
 
 	@Override
 	public String desc() {
-		return Messages.get(this, "desc", level);
+		return Messages.get(this, "desc", Math.round(level));
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/Flashbang.java
Patch:
@@ -58,7 +58,7 @@ public void explode(int cell) {
 		//FIXME currently has somewhat odd behaviour, as FOV is updated at the start of a turn.
 		Level l = Dungeon.level;
 		for (Char ch : Actor.chars()){
-			if (ch.fieldOfView[cell]){
+			if (ch.fieldOfView != null && ch.fieldOfView[cell]){
 				int power = 10 - l.distance(ch.pos, cell);
 				if (power > 0){
 					Buff.prolong(ch, Blindness.class, power);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Ooze.java
Patch:
@@ -66,6 +66,8 @@ else if (Random.Int(2) == 0)
 				GLog.n( Messages.get(this, "ondeath") );
 			}
 			spend( TICK );
+		} else {
+			detach();
 		}
 		if (Dungeon.level.water[target.pos]) {
 			detach();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -815,7 +815,7 @@ public void press( int cell, Char ch, boolean hard ) {
 		if (trap != null) {
 			
 			TimekeepersHourglass.timeFreeze timeFreeze =
-					ch != null ? ch.buff(TimekeepersHourglass.timeFreeze.class) : null;
+					Dungeon.hero.buff(TimekeepersHourglass.timeFreeze.class);
 			
 			if (timeFreeze == null) {
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/mechanics/Ballistica.java
Patch:
@@ -102,13 +102,14 @@ private void build( int from, int to, boolean stopTarget, boolean stopChars, boo
 		while (Dungeon.level.insideMap(cell)) {
 
 			//if we're in a wall, collide with the previous cell along the path.
+			//we don't use solid here because we don't want to stop short of closed doors
 			if (stopTerrain && cell != sourcePos && !Dungeon.level.passable[cell] && !Dungeon.level.avoid[cell]) {
 				collide(path.get(path.size() - 1));
 			}
 
 			path.add(cell);
 
-			if ((stopTerrain && cell != sourcePos && Dungeon.level.losBlocking[cell])
+			if ((stopTerrain && cell != sourcePos && Dungeon.level.solid[cell])
 					|| (cell != sourcePos && stopChars && Actor.findChar( cell ) != null)
 					|| (cell == to && stopTarget)){
 				collide(cell);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Challenges.java
Patch:
@@ -24,6 +24,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.Dewdrop;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor;
+import com.shatteredpixel.shatteredpixeldungeon.items.armor.ClassArmor;
 import com.shatteredpixel.shatteredpixeldungeon.items.armor.ClothArmor;
 import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.HornOfPlenty;
 import com.shatteredpixel.shatteredpixeldungeon.items.food.Blandfruit;
@@ -68,7 +69,7 @@ public static boolean isItemBlocked( Item item ){
 		}
 
 		if (Dungeon.isChallenged(NO_ARMOR)){
-			if (item instanceof Armor && !(item instanceof ClothArmor)) {
+			if (item instanceof Armor && !(item instanceof ClothArmor || item instanceof ClassArmor)) {
 				return true;
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/PrismaticGuard.java
Patch:
@@ -62,7 +62,7 @@ public boolean act() {
 			int bestPos = -1;
 			for (int i = 0; i < PathFinder.NEIGHBOURS8.length; i++) {
 				int p = hero.pos + PathFinder.NEIGHBOURS8[i];
-				if (Actor.findChar( p ) == null && (Dungeon.level.passable[p] || Dungeon.level.avoid[p])) {
+				if (Actor.findChar( p ) == null && Dungeon.level.passable[p]) {
 					if (bestPos == -1 || Dungeon.level.trueDistance(p, closest.pos) < Dungeon.level.trueDistance(bestPos, closest.pos)){
 						bestPos = p;
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TimekeepersHourglass.java
Patch:
@@ -337,6 +337,7 @@ public void detach(){
 			super.detach();
 			activeBuff = null;
 			triggerPresses();
+			target.next();
 		}
 
 		private static final String PRESSES = "presses";

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfMirrorImage.java
Patch:
@@ -79,7 +79,7 @@ public static int spawnImages( Hero hero, int nImages ){
 		
 		for (int i = 0; i < PathFinder.NEIGHBOURS8.length; i++) {
 			int p = hero.pos + PathFinder.NEIGHBOURS8[i];
-			if (Actor.findChar( p ) == null && (Dungeon.level.passable[p] || Dungeon.level.avoid[p])) {
+			if (Actor.findChar( p ) == null && Dungeon.level.passable[p]) {
 				respawnPoints.add( p );
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/stones/StoneOfClairvoyance.java
Patch:
@@ -80,8 +80,9 @@ protected void activate(final int cell) {
 						}
 					}
 					
-					if (Dungeon.level.traps.get(curr) != null){
-						disarmCandidates.add(Dungeon.level.traps.get(curr));
+					Trap t = Dungeon.level.traps.get(curr);
+					if (t != null && t.active){
+						disarmCandidates.add(t);
 					}
 					
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -387,7 +387,8 @@ public void onSelect( Integer target ) {
 				if (curWand.curCharges >= (curWand.cursed ? 1 : curWand.chargesPerCast())) {
 					
 					curUser.busy();
-
+					Invisibility.dispel();
+					
 					if (curWand.cursed){
 						CursedWand.cursedZap(curWand, curUser, new Ballistica( curUser.pos, target, Ballistica.MAGIC_BOLT));
 						if (!curWand.cursedKnown){
@@ -403,8 +404,6 @@ public void call() {
 					}
 					curWand.cursedKnown = true;
 					
-					Invisibility.dispel();
-					
 				} else {
 
 					GLog.w( Messages.get(Wand.class, "fizzles") );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -178,7 +178,7 @@ public void restoreFromBundle( Bundle bundle ) {
 	
 	public boolean attack( Char enemy ) {
 
-		if (enemy == null || !enemy.isAlive()) return false;
+		if (enemy == null) return false;
 		
 		boolean visibleFight = Dungeon.level.heroFOV[pos] || Dungeon.level.heroFOV[enemy.pos];
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/PrismaticGuard.java
Patch:
@@ -85,7 +85,8 @@ public boolean act() {
 			spend(TICK);
 		}
 		
-		if (HP < maxHP()){
+		LockedFloor lock = target.buff(LockedFloor.class);
+		if (HP < maxHP() && (lock == null || lock.regenOn())){
 			HP += 0.1f;
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/MirrorImage.java
Patch:
@@ -43,7 +43,7 @@ public class MirrorImage extends NPC {
 		spriteClass = MirrorSprite.class;
 		
 		HP = HT = 1;
-		defenseSkill = 0;
+		defenseSkill = 1;
 		
 		alignment = Alignment.ALLY;
 		state = HUNTING;
@@ -119,7 +119,7 @@ public int defenseSkill(Char enemy) {
 			int heroEvasion = hero.defenseSkill(enemy);
 			
 			//if the hero has more/less evasion, 50% of it is applied
-			return (baseEvasion + heroEvasion) / 2;
+			return super.defenseSkill(enemy) * (baseEvasion + heroEvasion) / 2;
 		} else {
 			return 0;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/PrismaticImage.java
Patch:
@@ -46,7 +46,7 @@ public class PrismaticImage extends NPC {
 		spriteClass = PrismaticSprite.class;
 		
 		HP = HT = 8;
-		defenseSkill = 0;
+		defenseSkill = 1;
 		
 		alignment = Alignment.ALLY;
 		state = HUNTING;
@@ -151,7 +151,7 @@ public int defenseSkill(Char enemy) {
 			int heroEvasion = hero.defenseSkill(enemy);
 			
 			//if the hero has more/less evasion, 50% of it is applied
-			return (baseEvasion + heroEvasion) / 2;
+			return super.defenseSkill(enemy) * (baseEvasion + heroEvasion) / 2;
 		} else {
 			return 0;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/PrismaticGuard.java
Patch:
@@ -51,7 +51,7 @@ public boolean act() {
 		int v = hero.visibleEnemies();
 		for (int i=0; i < v; i++) {
 			Mob mob = hero.visibleEnemy( i );
-			if ( mob.isAlive() && !hero.mindVisionEnemies.contains(mob)
+			if ( mob.isAlive() && mob.state != mob.PASSIVE && !hero.mindVisionEnemies.contains(mob)
 					&& (closest == null || Dungeon.level.distance(hero.pos, mob.pos) < Dungeon.level.distance(hero.pos, closest.pos))) {
 				closest = mob;
 			}
@@ -72,7 +72,7 @@ public boolean act() {
 				PrismaticImage pris = new PrismaticImage();
 				pris.duplicate(hero, (int)Math.floor(HP) );
 				pris.state = pris.HUNTING;
-				GameScene.add(pris);
+				GameScene.add(pris, 1);
 				ScrollOfTeleportation.appear(pris, bestPos);
 				
 				detach();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/UnstableSpellbook.java
Patch:
@@ -127,8 +127,8 @@ public void execute( Hero hero, String action ) {
 				curItem = scroll;
 				curUser = hero;
 				
-				//if this scroll hasn't been given to the book
-				if (!scrolls.contains(scroll.getClass())) {
+				//if there are changes left and the scroll has been given to the book
+				if (charge > 0 && !scrolls.contains(scroll.getClass())) {
 					final Scroll fScroll = scroll;
 					GameScene.show(new WndOptions(
 							Messages.get(this, "prompt"),

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/exotic/ScrollOfMysticalEnergy.java
Patch:
@@ -39,7 +39,7 @@ public class ScrollOfMysticalEnergy extends ExoticScroll {
 	public void doRead() {
 		
 		//append buff
-		Buff.affect(curUser, ArtifactRecharge.class);
+		Buff.affect(curUser, ArtifactRecharge.class).reset();
 		
 		Sample.INSTANCE.play( Assets.SND_READ );
 		Invisibility.dispel();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/Armor.java
Patch:
@@ -354,7 +354,7 @@ public Item upgrade( boolean inscribe ) {
 	
 	public int proc( Char attacker, Char defender, int damage ) {
 		
-		if (glyph != null && defender.buff(MagicImmune.class) != null) {
+		if (glyph != null && defender.buff(MagicImmune.class) == null) {
 			damage = glyph.proc( this, attacker, defender, damage );
 		}
 		
@@ -504,7 +504,7 @@ public Armor inscribe() {
 	}
 
 	public boolean hasGlyph(Class<?extends Glyph> type, Char owner) {
-		return glyph != null &&  glyph.getClass() == type && owner.buff(MagicImmune.class) == null;
+		return glyph != null && glyph.getClass() == type && owner.buff(MagicImmune.class) == null;
 	}
 
 	//these are not used to process specific glyph effects, so magic immune doesn't affect them

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/exotic/PotionOfDragonsBreath.java
Patch:
@@ -59,7 +59,7 @@ public class PotionOfDragonsBreath extends ExoticPotion {
 	@Override
 	//need to override drink so that time isn't spent right away
 	protected void drink(final Hero hero) {
-		detach( hero.belongings.backpack );
+		curItem = detach( hero.belongings.backpack );
 		setKnown();
 		
 		GameScene.selectCell(targeter);
@@ -70,7 +70,8 @@ protected void drink(final Hero hero) {
 		public void onSelect(final Integer cell) {
 			
 			if (cell == null){
-				return;
+				//TODO if this can ever be found un-IDed, need logic for that
+				curItem.collect();
 			} else {
 				Sample.INSTANCE.play( Assets.SND_DRINK );
 				curUser.sprite.operate(curUser.pos, new Callback() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTeleportation.java
Patch:
@@ -135,7 +135,7 @@ public static void teleportHero( Hero  hero ) {
 	
 	public static void teleportPreferringUnseen( Hero hero ){
 		
-		if (!(Dungeon.level instanceof RegularLevel)){
+		if (Dungeon.bossLevel() || !(Dungeon.level instanceof RegularLevel)){
 			teleportHero( hero );
 			return;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/exotic/ExoticScroll.java
Patch:
@@ -84,10 +84,10 @@ public abstract class ExoticScroll extends Scroll {
 		//TODO
 		
 		regToExo.put(ScrollOfMirrorImage.class, ScrollOfDivination.class);
-		exoToReg.put(ScrollOfDivination.class, ScrollOfMirrorImage.class);
+		//exoToReg.put(ScrollOfDivination.class, ScrollOfMirrorImage.class);
 		
 		regToExo.put(ScrollOfTransmutation.class, ScrollOfDivination.class);
-		exoToReg.put(ScrollOfDivination.class, ScrollOfTransmutation.class);
+		//exoToReg.put(ScrollOfDivination.class, ScrollOfTransmutation.class);
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/Weapon.java
Patch:
@@ -100,7 +100,7 @@ public float delayFactor(float dly){
 	@Override
 	public int proc( Char attacker, Char defender, int damage ) {
 		
-		if (enchantment != null && attacker.buff(MagicImmune.class) != null) {
+		if (enchantment != null && attacker.buff(MagicImmune.class) == null) {
 			damage = enchantment.proc( this, attacker, defender, damage );
 		}
 		
@@ -251,7 +251,7 @@ public Weapon enchant() {
 	}
 
 	public boolean hasEnchant(Class<?extends Enchantment> type, Char owner) {
-		return enchantment != null && enchantment.getClass() == type && owner.buff(MagicImmune.class) != null;
+		return enchantment != null && enchantment.getClass() == type && owner.buff(MagicImmune.class) == null;
 	}
 	
 	//these are not used to process specific enchant effects, so magic immune doesn't affect them

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/darts/Dart.java
Patch:
@@ -78,7 +78,7 @@ public int throwPos(Hero user, int dst) {
 	
 	@Override
 	public int proc(Char attacker, Char defender, int damage) {
-		if (bow != null && bow.enchantment != null && attacker.buff(MagicImmune.class) != null){
+		if (bow != null && bow.enchantment != null && attacker.buff(MagicImmune.class) == null){
 			damage = bow.enchantment.proc(bow, attacker, defender, damage);
 		}
 		return super.proc(attacker, defender, damage);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/exotic/PotionOfDragonsBreath.java
Patch:
@@ -33,6 +33,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile;
 import com.shatteredpixel.shatteredpixeldungeon.mechanics.Ballistica;
+import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.CellSelector;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.watabou.noosa.audio.Sample;
@@ -154,7 +155,7 @@ public void call() {
 		
 		@Override
 		public String prompt() {
-			return "test";
+			return Messages.get(PotionOfDragonsBreath.class, "prompt");
 		}
 	};
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/stones/StoneOfIntuition.java
Patch:
@@ -206,7 +206,7 @@ protected void onClick() {
 						super.onClick();
 					}
 				};
-				Image im = new Image(Assets.CONS_ICONS, 7*i, all == potions ? 0 : 8, 7, 8);
+				Image im = new Image(Assets.CONS_ICONS, 7*i, all == potions ? 0 : 16, 7, 8);
 				im.scale.set(2f);
 				btn.icon(im);
 				btn.setRect(left + placed*BTN_SIZE, top, BTN_SIZE, BTN_SIZE);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -886,7 +886,7 @@ public void updateFieldOfView( Char c, boolean[] fieldOfView ) {
 				right = Math.min(width()-1, cx + cx - left);
 				left = Math.max(0, left);
 				pos = left + y * width();
-				System.arraycopy(discoverable, pos, fieldOfView, pos, right - left);
+				System.arraycopy(discoverable, pos, fieldOfView, pos, right - left + 1);
 			}
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/ChaliceOfBlood.java
Patch:
@@ -66,7 +66,7 @@ public void execute(Hero hero, String action ) {
 			if (damage > hero.HP*0.75) {
 
 				GameScene.show(
-					new WndOptions(Messages.get(this, "name"),
+					new WndOptions(Messages.titleCase(Messages.get(this, "name")),
 							Messages.get(this, "prick_warn"),
 							Messages.get(this, "yes"),
 							Messages.get(this, "no")) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndResurrect.java
Patch:
@@ -52,7 +52,7 @@ public WndResurrect( final Ankh ankh, Object causeOfDeath ) {
 		
 		IconTitle titlebar = new IconTitle();
 		titlebar.icon( new ItemSprite( ankh.image(), null ) );
-		titlebar.label( ankh.name() );
+		titlebar.label( Messages.titleCase(ankh.name()) );
 		titlebar.setRect( 0, 0, WIDTH, 0 );
 		add( titlebar );
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Amok.java
Patch:
@@ -29,6 +29,7 @@ public class Amok extends FlavourBuff {
 
 	{
 		type = buffType.NEGATIVE;
+		announced = true;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Barrier.java
Patch:
@@ -29,7 +29,9 @@
 
 public class Barrier extends ShieldBuff {
 	
-	//TODO icon and description for phase 2
+	{
+		type = buffType.POSITIVE;
+	}
 	
 	@Override
 	public boolean act() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Bleeding.java
Patch:
@@ -34,6 +34,7 @@ public class Bleeding extends Buff {
 
 	{
 		type = buffType.NEGATIVE;
+		announced = true;
 	}
 	
 	protected int level;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Bless.java
Patch:
@@ -31,6 +31,7 @@ public class Bless extends FlavourBuff {
 	
 	{
 		type = buffType.POSITIVE;
+		announced = true;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Blindness.java
Patch:
@@ -29,6 +29,7 @@ public class Blindness extends FlavourBuff {
 
 	{
 		type = buffType.NEGATIVE;
+		announced = true;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Burning.java
Patch:
@@ -61,6 +61,7 @@ public class Burning extends Buff implements Hero.Doom {
 
 	{
 		type = buffType.NEGATIVE;
+		announced = true;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Charm.java
Patch:
@@ -33,6 +33,7 @@ public class Charm extends FlavourBuff {
 
 	{
 		type = buffType.NEGATIVE;
+		announced = true;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Chill.java
Patch:
@@ -32,6 +32,7 @@ public class Chill extends FlavourBuff {
 
 	{
 		type = buffType.NEGATIVE;
+		announced = true;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Corrosion.java
Patch:
@@ -39,6 +39,7 @@ public class Corrosion extends Buff implements Hero.Doom {
 
 	{
 		type = buffType.NEGATIVE;
+		announced = true;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Corruption.java
Patch:
@@ -30,6 +30,7 @@ public class Corruption extends Buff {
 
 	{
 		type = buffType.NEGATIVE;
+		announced = true;
 	}
 
 	private float buildToDamage = 0f;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Cripple.java
Patch:
@@ -30,6 +30,7 @@ public class Cripple extends FlavourBuff {
 
 	{
 		type = buffType.NEGATIVE;
+		announced = true;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Doom.java
Patch:
@@ -29,6 +29,7 @@ public class Doom extends Buff {
 	
 	{
 		type = buffType.NEGATIVE;
+		announced = true;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Drowsy.java
Patch:
@@ -30,6 +30,7 @@ public class Drowsy extends Buff {
 
 	{
 		type = buffType.NEUTRAL;
+		announced = true;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Frost.java
Patch:
@@ -45,6 +45,7 @@ public class Frost extends FlavourBuff {
 
 	{
 		type = buffType.NEGATIVE;
+		announced = true;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Fury.java
Patch:
@@ -30,6 +30,7 @@ public class Fury extends Buff {
 
 	{
 		type = buffType.POSITIVE;
+		announced = true;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Healing.java
Patch:
@@ -37,6 +37,8 @@ public class Healing extends Buff {
 		//unlike other buffs, this one acts after the hero and takes priority against other effects
 		//healing is much more useful if you get some of it off before taking damage
 		actPriority = HERO_PRIO - 1;
+		
+		type = buffType.POSITIVE;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Invisibility.java
Patch:
@@ -39,6 +39,7 @@ public class Invisibility extends FlavourBuff {
 
 	{
 		type = buffType.POSITIVE;
+		announced = true;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/MagicalSight.java
Patch:
@@ -35,6 +35,7 @@ public class MagicalSight extends FlavourBuff {
 	
 	{
 		type = buffType.POSITIVE;
+		announced = true;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/MindVision.java
Patch:
@@ -35,6 +35,7 @@ public class MindVision extends FlavourBuff {
 
 	{
 		type = buffType.POSITIVE;
+		announced = true;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Ooze.java
Patch:
@@ -31,6 +31,7 @@ public class Ooze extends Buff {
 
 	{
 		type = buffType.NEGATIVE;
+		announced = true;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Poison.java
Patch:
@@ -41,6 +41,7 @@ public class Poison extends Buff implements Hero.Doom {
 
 	{
 		type = buffType.NEGATIVE;
+		announced = true;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Roots.java
Patch:
@@ -29,6 +29,7 @@ public class Roots extends FlavourBuff {
 
 	{
 		type = buffType.NEGATIVE;
+		announced = true;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Shadows.java
Patch:
@@ -37,7 +37,7 @@ public class Shadows extends Invisibility {
 	private static final String LEFT	= "left";
 
 	{
-		type = buffType.SILENT;
+		announced = false;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Slow.java
Patch:
@@ -28,6 +28,7 @@ public class Slow extends FlavourBuff {
 
 	{
 		type = buffType.NEGATIVE;
+		announced = true;
 	}
 
 	public static final float DURATION = 10f;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/SoulMark.java
Patch:
@@ -31,6 +31,7 @@ public class SoulMark extends FlavourBuff {
 
 	{
 		type = buffType.NEGATIVE;
+		announced = true;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Terror.java
Patch:
@@ -33,6 +33,7 @@ public class Terror extends FlavourBuff {
 
 	{
 		type = buffType.NEGATIVE;
+		announced = true;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Vertigo.java
Patch:
@@ -30,6 +30,7 @@ public class Vertigo extends FlavourBuff {
 
 	{
 		type = buffType.NEGATIVE;
+		announced = true;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Weakness.java
Patch:
@@ -30,6 +30,7 @@ public class Weakness extends FlavourBuff {
 
 	{
 		type = buffType.NEGATIVE;
+		announced = true;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/stones/StoneOfAggression.java
Patch:
@@ -67,6 +67,7 @@ public static class Aggression extends FlavourBuff {
 		
 		{
 			type = buffType.NEGATIVE;
+			announced = true;
 		}
 		
 		@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/stones/StoneOfAvoidance.java
Patch:
@@ -67,6 +67,7 @@ public static class Avoidance extends FlavourBuff {
 		
 		{
 			type = buffType.NEGATIVE;
+			announced = true;
 		}
 		
 		@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/plants/Earthroot.java
Patch:
@@ -74,6 +74,7 @@ public static class Armor extends Buff {
 
 		{
 			type = buffType.POSITIVE;
+			announced = true;
 		}
 		
 		@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/plants/Sungrass.java
Patch:
@@ -75,6 +75,7 @@ public static class Health extends Buff {
 
 		{
 			type = buffType.POSITIVE;
+			announced = true;
 		}
 		
 		@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/plants/Swiftthistle.java
Patch:
@@ -61,6 +61,7 @@ public static class TimeBubble extends Buff {
 		
 		{
 			type = buffType.POSITIVE;
+			announced = true;
 		}
 		
 		@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -545,8 +545,6 @@ public void aggro( Char ch ) {
 	@Override
 	public void damage( int dmg, Object src ) {
 
-		Terror.recover( this );
-
 		if (state == SLEEPING) {
 			state = WANDERING;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/glyphs/Affection.java
Patch:
@@ -42,7 +42,7 @@ public int proc( Armor armor, Char attacker, Char defender, int damage) {
 		
 		if (Random.Int( level / 2 + 10 ) >= 9) {
 			
-			int duration = Random.IntRange( 2, 5 );
+			int duration = Random.IntRange( 4, 12 );
 
 			Buff.affect( attacker, Charm.class, duration ).object = defender.id();
 			attacker.sprite.centerEmitter().start( Speck.factory( Speck.HEART ), 0.2f, 5 );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTerror.java
Patch:
@@ -50,7 +50,7 @@ public void doRead() {
 		Mob affected = null;
 		for (Mob mob : Dungeon.level.mobs.toArray( new Mob[0] )) {
 			if (Dungeon.level.heroFOV[mob.pos]) {
-				Buff.affect( mob, Terror.class, Terror.DURATION ).object = curUser.id();
+				Buff.affect( mob, Terror.class, 20f ).object = curUser.id();
 
 				if (mob.buff(Terror.class) != null){
 					count++;
@@ -81,8 +81,8 @@ public void empoweredRead() {
 			if (Dungeon.level.heroFOV[mob.pos]) {
 				Terror t = mob.buff(Terror.class);
 				if (t != null){
-					Buff.prolong(mob, Terror.class, Terror.DURATION*1.5f);
-					Buff.affect(mob, Paralysis.class, Terror.DURATION*.5f);
+					Buff.prolong(mob, Terror.class, 15f);
+					Buff.affect(mob, Paralysis.class, 5f);
 				}
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfTransfusion.java
Patch:
@@ -103,8 +103,7 @@ protected void onZap(Ballistica beam) {
 			//charms an enemy
 			} else {
 				
-				Buff.affect(ch      , Charm.class, 5 + level()  ).object = curUser.id();
-				Buff.affect(curUser , Charm.class, 5            ).object = ch.id();
+				Buff.affect(ch , Charm.class, 4 + level() ).object = curUser.id();
 
 				ch.sprite.centerEmitter().start( Speck.factory( Speck.HEART ), 0.2f, 5 );
 				curUser.sprite.centerEmitter().start( Speck.factory( Speck.HEART ), 0.2f, 5 );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/enchantments/Eldritch.java
Patch:
@@ -47,7 +47,8 @@ public int proc( Weapon weapon, Char attacker, Char defender, int damage ) {
 			if (defender == Dungeon.hero) {
 				Buff.affect( defender, Vertigo.class, Vertigo.DURATION );
 			} else {
-				Buff.affect( defender, Terror.class, Terror.DURATION ).object = attacker.id();
+				//damage will reduce by 5 turns, so effectively 10 turns of terror
+				Buff.affect( defender, Terror.class, 10f + 5f ).object = attacker.id();
 			}
 
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/Weapon.java
Patch:
@@ -22,6 +22,7 @@
 package com.shatteredpixel.shatteredpixeldungeon.items.weapon;
 
 import com.shatteredpixel.shatteredpixeldungeon.Badges;
+import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
@@ -99,7 +100,7 @@ public int proc( Char attacker, Char defender, int damage ) {
 			damage = enchantment.proc( this, attacker, defender, damage );
 		}
 		
-		if (!levelKnown) {
+		if (!levelKnown && attacker == Dungeon.hero) {
 			if (--hitsToKnow <= 0) {
 				identify();
 				GLog.i( Messages.get(Weapon.class, "identify") );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/CursedWand.java
Patch:
@@ -339,8 +339,9 @@ public void call() {
 
 				} else {
 					ScrollOfTeleportation.teleportHero(user);
-					wand.wandUsed();
+
 				}
+				wand.wandUsed();
 				break;
 
 			//summon monsters

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/builders/RegularBuilder.java
Patch:
@@ -162,6 +162,7 @@ protected void createBranches(ArrayList<Room> rooms, ArrayList<Room> branchable,
 				} while (angle == -1 && tries > 0);
 				
 				if (angle == -1) {
+					t.clearConnections();
 					for (Room c : connectingRoomsThisBranch){
 						c.clearConnections();
 						rooms.remove(c);
@@ -188,6 +189,7 @@ protected void createBranches(ArrayList<Room> rooms, ArrayList<Room> branchable,
 			} while (angle == -1 && tries > 0);
 			
 			if (angle == -1){
+				r.clearConnections();
 				for (Room t : connectingRoomsThisBranch){
 					t.clearConnections();
 					rooms.remove(t);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/InterlevelScene.java
Patch:
@@ -278,7 +278,8 @@ public void update() {
 				else if (error.getMessage() != null &&
 						error.getMessage().equals("old save")) errorMsg = Messages.get(this, "io_error");
 
-				else throw new RuntimeException("fatal error occured while moving between floors", error);
+				else throw new RuntimeException("fatal error occured while moving between floors. " +
+							"Seed:" + Dungeon.seed + " depth:" + Dungeon.depth, error);
 
 				add( new WndError( errorMsg ) {
 					public void onBackPressed() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MagesStaff.java
Patch:
@@ -130,7 +130,8 @@ public void execute(Hero hero, String action) {
 
 	@Override
 	public int proc(Char attacker, Char defender, int damage) {
-		if (wand != null && Dungeon.hero.subClass == HeroSubClass.BATTLEMAGE) {
+		if (wand != null &&
+				attacker instanceof Hero && ((Hero)attacker).subClass == HeroSubClass.BATTLEMAGE) {
 			if (wand.curCharges < wand.maxCharges) wand.partialCharge += 0.33f;
 			ScrollOfRecharging.charge((Hero)attacker);
 			wand.onHit(this, attacker, defender, damage);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTeleportation.java
Patch:
@@ -147,7 +147,7 @@ public static void teleportPreferringUnseen( Hero hero ){
 			if (r instanceof SpecialRoom){
 				int terr;
 				boolean locked = false;
-				for (Point p : r.charPlaceablePoints(level)){
+				for (Point p : r.getPoints()){
 					terr = level.map[level.pointToCell(p)];
 					if (terr == Terrain.LOCKED_DOOR || terr == Terrain.BARRICADE){
 						locked = true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TalismanOfForesight.java
Patch:
@@ -182,6 +182,7 @@ public boolean act() {
 				if (partialCharge > 1 && charge < chargeCap) {
 					partialCharge--;
 					charge++;
+					updateQuickslot();
 				} else if (charge >= chargeCap) {
 					partialCharge = 0;
 					GLog.p( Messages.get(this, "full_charge") );
@@ -199,6 +200,7 @@ public void charge(){
 				GLog.p( Messages.get(this, "levelup") );
 				exp -= 4;
 			}
+			updateQuickslot();
 		}
 
 		@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTeleportation.java
Patch:
@@ -147,7 +147,7 @@ public static void teleportPreferringUnseen( Hero hero ){
 			if (r instanceof SpecialRoom){
 				int terr;
 				boolean locked = false;
-				for (Point p : r.getPoints()){
+				for (Point p : r.charPlaceablePoints(level)){
 					terr = level.map[level.pointToCell(p)];
 					if (terr == Terrain.LOCKED_DOOR || terr == Terrain.BARRICADE){
 						locked = true;
@@ -160,9 +160,9 @@ public static void teleportPreferringUnseen( Hero hero ){
 			}
 			
 			int cell;
-			for (Point p : r.getPoints()){
+			for (Point p : r.charPlaceablePoints(level)){
 				cell = level.pointToCell(p);
-				if (level.passable[cell] && !level.visited[cell] && Actor.findChar(cell) != null){
+				if (level.passable[cell] && !level.visited[cell] && Actor.findChar(cell) == null){
 					candidates.add(cell);
 				}
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/RegularLevel.java
Patch:
@@ -263,6 +263,7 @@ public int randomRespawnCell() {
 			if (!heroFOV[cell]
 					&& Actor.findChar( cell ) == null
 					&& passable[cell]
+					&& room.canPlaceCharacter(cellToPoint(cell), this)
 					&& cell != exit) {
 				return cell;
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/BlacksmithSprite.java
Patch:
@@ -75,7 +75,8 @@ public void update() {
 	public void onComplete( Animation anim ) {
 		super.onComplete( anim );
 		
-		if (visible && emitter != null && anim == idle) {
+		//FIXME should figure out why onComplete is called constantly when an animation is paused
+		if (visible && emitter != null && anim == idle && !paused) {
 			emitter.burst( Speck.factory( Speck.FORGE ), 3 );
 			float volume = 0.2f / (Dungeon.level.distance( ch.pos, Dungeon.hero.pos ));
 			Sample.INSTANCE.play( Assets.SND_EVOKE, volume, volume, 0.8f  );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTeleportation.java
Patch:
@@ -134,6 +134,7 @@ public static void teleportPreferringUnseen( Hero hero ){
 		
 		if (!(Dungeon.level instanceof RegularLevel)){
 			teleportHero( hero );
+			return;
 		}
 		
 		RegularLevel level = (RegularLevel) Dungeon.level;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/secret/SecretRunestoneRoom.java
Patch:
@@ -72,7 +72,7 @@ public void paint(Level level) {
 		
 		do{
 			dropPos = level.pointToCell(random());
-		} while (level.map[dropPos] != Terrain.EMPTY && level.heaps.get(dropPos) != null);
+		} while (level.map[dropPos] != Terrain.EMPTY || level.heaps.get(dropPos) != null);
 		level.drop( Generator.random(Generator.Category.STONE), dropPos);
 		
 		do{

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/stones/StoneOfFlock.java
Patch:
@@ -31,6 +31,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
 import com.watabou.noosa.audio.Sample;
 import com.watabou.utils.PathFinder;
+import com.watabou.utils.Random;
 
 public class StoneOfFlock extends Runestone {
 	
@@ -48,7 +49,7 @@ protected void activate(int cell) {
 					&& Actor.findChar(cell + i) == null) {
 				
 				Sheep sheep = new Sheep();
-				sheep.lifespan = 10;
+				sheep.lifespan = Random.IntRange(5, 8);
 				sheep.pos = cell + i;
 				GameScene.add(sheep);
 				Dungeon.level.press(sheep.pos, sheep);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/StartScene.java
Patch:
@@ -29,7 +29,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroSubClass;
 import com.shatteredpixel.shatteredpixeldungeon.journal.Journal;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
-import com.shatteredpixel.shatteredpixeldungeon.ui.ActionIndicator;
 import com.shatteredpixel.shatteredpixeldungeon.ui.Archs;
 import com.shatteredpixel.shatteredpixeldungeon.ui.ExitButton;
 import com.shatteredpixel.shatteredpixeldungeon.ui.Icons;
@@ -106,7 +105,6 @@ public void create() {
 		}
 		
 		GamesInProgress.curSlot = 0;
-		ActionIndicator.action = null;
 		
 		fadeIn();
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndGameInProgress.java
Patch:
@@ -31,6 +31,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.StartScene;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.HeroSprite;
+import com.shatteredpixel.shatteredpixeldungeon.ui.ActionIndicator;
 import com.shatteredpixel.shatteredpixeldungeon.ui.RedButton;
 import com.shatteredpixel.shatteredpixeldungeon.ui.Window;
 import com.watabou.noosa.Game;
@@ -105,6 +106,7 @@ protected void onClick() {
 				GamesInProgress.curSlot = slot;
 				
 				Dungeon.hero = null;
+				ActionIndicator.action = null;
 				InterlevelScene.mode = InterlevelScene.Mode.CONTINUE;
 				ShatteredPixelDungeon.switchScene(InterlevelScene.class);
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndStartGame.java
Patch:
@@ -36,6 +36,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
+import com.shatteredpixel.shatteredpixeldungeon.ui.ActionIndicator;
 import com.shatteredpixel.shatteredpixeldungeon.ui.IconButton;
 import com.shatteredpixel.shatteredpixeldungeon.ui.Icons;
 import com.shatteredpixel.shatteredpixeldungeon.ui.RedButton;
@@ -92,6 +93,7 @@ protected void onClick() {
 				
 				GamesInProgress.curSlot = slot;
 				Dungeon.hero = null;
+				ActionIndicator.action = null;
 				InterlevelScene.mode = InterlevelScene.Mode.DESCEND;
 				
 				if (SPDSettings.intro()) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/UnstableSpellbook.java
Patch:
@@ -80,7 +80,8 @@ public UnstableSpellbook() {
 			probs[i] = 0;
 
 			i = Random.chances(probs);
-		};
+		}
+		scrolls.remove(ScrollOfTransmutation.class);
 	}
 
 	@Override
@@ -147,7 +148,7 @@ public Item upgrade() {
 		chargeCap = (int)((level()+1)*0.4f)+2;
 
 		//for artifact transmutation.
-		while (scrolls.size() > (levelCap-1-level()))
+		while (!scrolls.isEmpty() && scrolls.size() > (levelCap-1-level()))
 			scrolls.remove(0);
 
 		return super.upgrade();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTransmutation.java
Patch:
@@ -89,6 +89,7 @@ protected void onItemSelected(Item item) {
 			curItem.collect( curUser.belongings.backpack );
 		} else {
 			if (item.isEquipped(Dungeon.hero)){
+				item.cursed = false; //to allow it to be unequipped
 				((EquipableItem)item).doUnequip(Dungeon.hero, false);
 				((EquipableItem)result).doEquip(Dungeon.hero);
 			} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -385,7 +385,6 @@ public void onSelect( Integer target ) {
 					if (curWand.cursed){
 						CursedWand.cursedZap(curWand, curUser, new Ballistica( curUser.pos, target, Ballistica.MAGIC_BOLT));
 						if (!curWand.cursedKnown){
-							curWand.cursedKnown = true;
 							GLog.n(Messages.get(Wand.class, "curse_discover", curWand.name()));
 						}
 					} else {
@@ -396,6 +395,7 @@ public void call() {
 							}
 						});
 					}
+					curWand.cursedKnown = true;
 					
 					Invisibility.dispel();
 					

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndBag.java
Patch:
@@ -29,6 +29,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.EquipableItem;
 import com.shatteredpixel.shatteredpixeldungeon.items.Gold;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
+import com.shatteredpixel.shatteredpixeldungeon.items.Recipe;
 import com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor;
 import com.shatteredpixel.shatteredpixeldungeon.items.bags.Bag;
 import com.shatteredpixel.shatteredpixeldungeon.items.bags.MagicalHolster;
@@ -402,7 +403,7 @@ public void item( Item item ) {
 						mode == Mode.SCROLL && (item instanceof Scroll) ||
 						mode == Mode.UNIDED_POTION_OR_SCROLL && (!item.isIdentified() && (item instanceof Scroll || item instanceof Potion)) ||
 						mode == Mode.EQUIPMENT && (item instanceof EquipableItem) ||
-						mode == Mode.ALCHEMY && (!(item instanceof EquipableItem) && item.isIdentified()) ||
+						mode == Mode.ALCHEMY && Recipe.usableInRecipe(item) ||
 						mode == Mode.TRANMSUTABLE && ScrollOfTransmutation.canTransmute(item) ||
 						mode == Mode.ALL
 					);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfWealth.java
Patch:
@@ -118,7 +118,6 @@ private static ArrayList<Item> generateRareDrop(){
 		return items;
 	}
 	
-	//caps at a 50% bonus
 	private static float dropProgression( Char target, int tries ){
 		return tries * (float)Math.pow(1.2f, getBonus(target, Wealth.class) -1 );
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -874,7 +874,6 @@ private boolean actAttack( HeroAction.Attack action ) {
 
 		if (enemy.isAlive() && canAttack( enemy ) && !isCharmedBy( enemy )) {
 			
-			spend( attackDelay() );
 			sprite.attack( enemy.pos );
 
 			return false;
@@ -1433,6 +1432,7 @@ public void onAttackComplete() {
 		}
 		
 		Invisibility.dispel();
+		spend( attackDelay() );
 
 		curAction = null;
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Scimitar.java
Patch:
@@ -35,7 +35,7 @@ public class Scimitar extends MeleeWeapon {
 	@Override
 	public int max(int lvl) {
 		return  4*(tier+1) +    //16 base, down from 20
-				lvl*(tier+1);   //+1 per level, down from +2
+				lvl*(tier+1);   //scaling unchanged
 	}
 
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -372,7 +372,7 @@ public static void switchLevel( final Level level, int pos ) {
 		
 		Actor respawner = level.respawner();
 		if (respawner != null) {
-			Actor.add( level.respawner() );
+			Actor.addDelayed( respawner, level.respawnTime() );
 		}
 
 		hero.pos = pos;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Piranha.java
Patch:
@@ -26,6 +26,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.Statistics;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Burning;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Vertigo;
 import com.shatteredpixel.shatteredpixeldungeon.items.food.MysteryMeat;
 import com.shatteredpixel.shatteredpixeldungeon.levels.RegularLevel;
 import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room;
@@ -130,6 +131,7 @@ protected boolean getFurther( int target ) {
 	
 	{
 		immunities.add( Burning.class );
+		immunities.add( Vertigo.class );
 	}
 	
 	private class Hunting extends Mob.Hunting{

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Imp.java
Patch:
@@ -188,6 +188,7 @@ public static void spawn( CityLevel level ) {
 				} while (
 						npc.pos == -1 ||
 						level.heaps.get( npc.pos ) != null ||
+						level.traps.get( npc.pos) != null ||
 						level.findMob( npc.pos ) != null ||
 						//The imp doesn't move, so he cannot obstruct a passageway
 						!(level.passable[npc.pos + PathFinder.CIRCLE4[0]] && level.passable[npc.pos + PathFinder.CIRCLE4[2]]) ||

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/InterlevelScene.java
Patch:
@@ -27,8 +27,10 @@
 import com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon;
 import com.shatteredpixel.shatteredpixeldungeon.Statistics;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Level;
+import com.shatteredpixel.shatteredpixeldungeon.levels.features.Chasm;
 import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.SpecialRoom;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.ui.GameLog;
@@ -335,6 +337,7 @@ private void fall() throws IOException {
 		Actor.fixTime();
 		DriedRose.holdGhostHero( Dungeon.level );
 		
+		Buff.affect( Dungeon.hero, Chasm.Falling.class );
 		Dungeon.saveAll();
 
 		Level level;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -745,7 +745,6 @@ private boolean actOpenChest( HeroAction.OpenChest action ) {
 					Sample.INSTANCE.play( Assets.SND_UNLOCK );
 				}
 				
-				spend( Key.TIME_TO_UNLOCK );
 				sprite.operate( dst );
 				
 			} else {
@@ -785,7 +784,6 @@ private boolean actUnlock( HeroAction.Unlock action ) {
 			
 			if (hasKey) {
 				
-				spend( Key.TIME_TO_UNLOCK );
 				sprite.operate( doorCell );
 				
 				Sample.INSTANCE.play( Assets.SND_UNLOCK );
@@ -1459,6 +1457,7 @@ public void onOperateComplete() {
 			
 			Level.set( doorCell, door == Terrain.LOCKED_DOOR ? Terrain.DOOR : Terrain.UNLOCKED_EXIT );
 			GameScene.updateMap( doorCell );
+			spend( Key.TIME_TO_UNLOCK );
 			
 		} else if (curAction instanceof HeroAction.OpenChest) {
 
@@ -1472,6 +1471,7 @@ public void onOperateComplete() {
 			}
 			GameScene.updateKeyDisplay();
 			heap.open( this );
+			spend( Key.TIME_TO_UNLOCK );
 		}
 		curAction = null;
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/WaterOfTransmutation.java
Patch:
@@ -175,9 +175,10 @@ private Artifact changeArtifact( Artifact a ) {
 			n.cursed = a.cursed;
 			n.levelKnown = a.levelKnown;
 			n.transferUpgrade(a.visiblyUpgraded());
+			return n;
 		}
 
-		return n;
+		return null;
 	}
 	
 	private Wand changeWand( Wand w ) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/glyphs/Stone.java
Patch:
@@ -31,7 +31,6 @@ public class Stone extends Armor.Glyph {
 
 	@Override
 	public int proc(Armor armor, Char attacker, Char defender, int damage) {
-		//no proc effect, see armor.DrMin and the end of hero.getCloser
 		
 		testing = true;
 		float evasion = defender.defenseSkill(attacker);
@@ -45,7 +44,9 @@ public int proc(Armor armor, Char attacker, Char defender, int damage) {
 			hitChance = 1f - (evasion/accuracy)/2f;
 		}
 		
-		//FIXME this is probably very OP, needs balancing
+		//60% of dodge chance is applied as damage reduction
+		hitChance = (2f + 3f*hitChance)/5f;
+		
 		damage = (int)Math.ceil(damage * hitChance);
 		
 		return damage;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/ClassArmor.java
Patch:
@@ -73,6 +73,7 @@ public static ClassArmor upgrade ( Hero owner, Armor armor ) {
 		
 		classArmor.level(armor.level());
 		classArmor.armorTier = armor.tier;
+		classArmor.augment = armor.augment;
 		classArmor.inscribe( armor.glyph );
 		classArmor.identify();
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -835,9 +835,9 @@ private boolean actAscend( HeroAction.Ascend action ) {
 					GameScene.show( new WndMessage( Messages.get(this, "leave") ) );
 					ready();
 				} else {
+					Badges.silentValidateHappyEnd();
 					Dungeon.win( Amulet.class );
 					Dungeon.deleteGame( GamesInProgress.curSlot, true );
-					Badges.silentValidateHappyEnd();
 					Game.switchScene( SurfaceScene.class );
 				}
 				

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/Armor.java
Patch:
@@ -128,7 +128,8 @@ public void restoreFromBundle( Bundle bundle ) {
 		hitsToKnow = bundle.getInt( UNFAMILIRIARITY );
 		inscribe((Glyph) bundle.get(GLYPH));
 		seal = (BrokenSeal)bundle.get(SEAL);
-		augment = bundle.getEnum(AUGMENT, Augment.class);
+		//pre-0.6.5 saves
+		if (bundle.contains(AUGMENT)) augment = bundle.getEnum(AUGMENT, Augment.class);
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TimekeepersHourglass.java
Patch:
@@ -82,7 +82,7 @@ else if (activeBuff != null) {
 					activeBuff.detach();
 					GLog.i( Messages.get(this, "deactivate") );
 				}
-			} else if (charge <= 1)         GLog.i( Messages.get(this, "no_charge") );
+			} else if (charge <= 0)         GLog.i( Messages.get(this, "no_charge") );
 			else if (cursed)                GLog.i( Messages.get(this, "cursed") );
 			else GameScene.show(
 						new WndOptions( Messages.get(this, "name"),

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bags/MagicalHolster.java
Patch:
@@ -31,7 +31,7 @@ public class MagicalHolster extends Bag {
 	{
 		image = ItemSpriteSheet.HOLSTER;
 		
-		size = 12;
+		size = 20;
 	}
 
 	public static final float HOLSTER_SCALE_FACTOR = 0.85f;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bags/PotionBandolier.java
Patch:
@@ -30,7 +30,7 @@ public class PotionBandolier extends Bag {
 	{
 		image = ItemSpriteSheet.BANDOLIER;
 
-		size = 12;
+		size = 20;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bags/ScrollHolder.java
Patch:
@@ -30,7 +30,7 @@ public class ScrollHolder extends Bag {
 	{
 		image = ItemSpriteSheet.HOLDER;
 		
-		size = 12;
+		size = 20;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bags/VelvetPouch.java
Patch:
@@ -31,7 +31,7 @@ public class VelvetPouch extends Bag {
 	{
 		image = ItemSpriteSheet.POUCH;
 		
-		size = 12;
+		size = 20;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Badges.java
Patch:
@@ -105,8 +105,8 @@ public enum Badge {
 		VICTORY_ALL_CLASSES( 35, true ),
 		HAPPY_END( 36 ),
 		CHAMPION_1( 37, true ),
-		CHAMPION_2( 39, true ),
-		CHAMPION_3( 38, true ),
+		CHAMPION_2( 38, true ),
+		CHAMPION_3( 39, true ),
 		STRENGTH_ATTAINED_1( 40 ),
 		STRENGTH_ATTAINED_2( 41 ),
 		STRENGTH_ATTAINED_3( 42 ),

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -839,6 +839,7 @@ private boolean actAscend( HeroAction.Ascend action ) {
 				} else {
 					Dungeon.win( Amulet.class );
 					Dungeon.deleteGame( GamesInProgress.curSlot, true );
+					Badges.silentValidateHappyEnd();
 					Game.switchScene( SurfaceScene.class );
 				}
 				

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/BrokenSeal.java
Patch:
@@ -22,7 +22,6 @@
 package com.shatteredpixel.shatteredpixeldungeon.items;
 
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
-import com.shatteredpixel.shatteredpixeldungeon.Badges;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
@@ -95,7 +94,6 @@ public void onSelect( Item item ) {
 					Sample.INSTANCE.play(Assets.SND_UNLOCK);
 					armor.affixSeal((BrokenSeal)curItem);
 					curItem.detach(Dungeon.hero.belongings.backpack);
-					Badges.validateTutorial();
 				}
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MagesStaff.java
Patch:
@@ -353,7 +353,6 @@ private void applyWand(Wand wand){
 			Dungeon.quickslot.clearItem(wand);
 
 			wand.detach(curUser.belongings.backpack);
-			Badges.validateTutorial();
 
 			GLog.p( Messages.get(MagesStaff.class, "imbue", wand.name()));
 			imbueWand( wand, curUser );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/BadgesScene.java
Patch:
@@ -75,7 +75,7 @@ public void create() {
 
 		List<Badges.Badge> badges = Badges.filtered( true );
 
-		int blankBadges = 34;
+		int blankBadges = 33;
 		blankBadges -= badges.size();
 		if (badges.contains(Badges.Badge.ALL_ITEMS_IDENTIFIED))	blankBadges -= 6;
 		if (badges.contains(Badges.Badge.YASD)) 				blankBadges -= 5;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/darts/TippedDart.java
Patch:
@@ -61,7 +61,7 @@ protected void rangedHit(Char enemy, int cell) {
 		if (enemy.isAlive())
 			Buff.affect(enemy, PinCushion.class).stick(new Dart());
 		else
-			Dungeon.level.drop( new Dart(), cell ).sprite.drop();
+			Dungeon.level.drop( new Dart(), enemy.pos ).sprite.drop();
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/enchantments/Unstable.java
Patch:
@@ -38,9 +38,11 @@ public class Unstable extends Weapon.Enchantment {
 			Eldritch.class,
 			Grim.class,
 			Lucky.class,
+			//projecting not included, no on-hit effect
 			Shocking.class,
 			Stunning.class,
 			Vampiric.class,
+			Venomous.class,
 			Vorpal.class
 	};
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Belongings.java
Patch:
@@ -206,7 +206,7 @@ public void resurrect( int depth ) {
 				item.detachAll(backpack);
 				//you keep the bag itself, not its contents.
 				if (item instanceof Bag){
-					((Bag)item).clear();
+					((Bag)item).resurrect();
 				}
 				item.collect();
 			} else if (!item.isEquipped( owner )) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonBossLevel.java
Patch:
@@ -383,8 +383,6 @@ public void progress(){
 
 				tengu.pos = 5+28*32;
 				tengu.sprite.place(5 + 28 * 32);
-
-				changeMap(MAP_END);
 				
 				//remove all mobs, but preserve allies
 				ArrayList<Mob> allies = new ArrayList<>();
@@ -395,6 +393,9 @@ public void progress(){
 					}
 				}
 				clearEntities(null);
+				
+				changeMap(MAP_END);
+				
 				for (Mob m : allies){
 					do{
 						m.pos = Random.IntRange(3, 7) + Random.IntRange(26, 30)*32;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndGame.java
Patch:
@@ -76,7 +76,7 @@ protected void onClick() {
 				protected void onClick() {
 					GamesInProgress.selectedClass = Dungeon.hero.heroClass;
 					InterlevelScene.noStory = true;
-					ShatteredPixelDungeon.scene().add(new WndStartGame(GamesInProgress.firstEmpty()));
+					GameScene.show(new WndStartGame(GamesInProgress.firstEmpty()));
 				}
 			} );
 			btnStart.textColor(Window.TITLE_COLOR);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java
Patch:
@@ -150,7 +150,6 @@ public ShatteredPixelDungeon() {
 		
 	}
 	
-	@SuppressWarnings("deprecation")
 	@Override
 	protected void onCreate( Bundle savedInstanceState ) {
 		super.onCreate(savedInstanceState);
@@ -230,6 +229,7 @@ public void onWindowFocusChanged( boolean hasFocus ) {
 	}
 
 	@Override
+	@SuppressWarnings("deprecation")
 	public void onMultiWindowModeChanged(boolean isInMultiWindowMode) {
 		super.onMultiWindowModeChanged(isInMultiWindowMode);
 		updateSystemUI();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/Artifact.java
Patch:
@@ -236,7 +236,8 @@ public void storeInBundle( Bundle bundle ) {
 	public void restoreFromBundle( Bundle bundle ) {
 		super.restoreFromBundle(bundle);
 		exp = bundle.getInt( EXP );
-		charge = Math.min( chargeCap, bundle.getInt( CHARGE ));
+		if (chargeCap > 0)  charge = Math.min( chargeCap, bundle.getInt( CHARGE ));
+		else                charge = bundle.getInt( CHARGE );
 		partialCharge = bundle.getFloat( PARTIALCHARGE );
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mimic.java
Patch:
@@ -171,7 +171,7 @@ public static Mimic spawnAt( int pos, List<Item> items ) {
 					reward = Generator.random(Generator.Category.RING);
 					break;
 			}
-		} while (reward == null || !Challenges.isItemBlocked(reward));
+		} while (reward == null || Challenges.isItemBlocked(reward));
 		m.items.add(reward);
 		
 		return m;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/WaterOfHealth.java
Patch:
@@ -42,6 +42,8 @@ public class WaterOfHealth extends WellWater {
 	@Override
 	protected boolean affectHero( Hero hero ) {
 		
+		if (!hero.isAlive()) return false;
+		
 		Sample.INSTANCE.play( Assets.SND_DRINK );
 
 		hero.HP = hero.HT;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndAlchemy.java
Patch:
@@ -302,7 +302,7 @@ private void combine(){
 	public void destroy() {
 		synchronized ( inputs ) {
 			for (int i = 0; i < inputs.length; i++) {
-				if (inputs[i].item != null) {
+				if (inputs[i] != null && inputs[i].item != null) {
 					if (!inputs[i].item.collect()) {
 						Dungeon.level.drop(inputs[i].item, Dungeon.hero.pos);
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndBag.java
Patch:
@@ -213,7 +213,7 @@ protected void placeItems( Bag container ) {
 		}
 
 		// Items in the bag
-		for (Item item : container.items) {
+		for (Item item : container.items.toArray(new Item[0])) {
 			placeItem( item );
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndGameInProgress.java
Patch:
@@ -72,7 +72,7 @@ public WndGameInProgress(final int slot){
 		pos = title.bottom() + GAP;
 		
 		if (info.challenges > 0) {
-			RedButton btnChallenges = new RedButton( "Challenges" ) {
+			RedButton btnChallenges = new RedButton( Messages.get(this, "challenges") ) {
 				@Override
 				protected void onClick() {
 					Game.scene().add( new WndChallenges( info.challenges, false ) );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/StartScene.java
Patch:
@@ -134,7 +134,7 @@ public void onBackPressed() {
 		}
 		align(challengeButton);
 		
-		if (!Badges.isUnlocked(Badges.Badge.VICTORY)){
+		if (Badges.isUnlocked(Badges.Badge.VICTORY)){
 			add(challengeButton);
 		} else {
 			Dungeon.challenges = 0;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/MagicalSleep.java
Patch:
@@ -37,7 +37,7 @@ public boolean attachTo( Char target ) {
 		if (!target.isImmune(Sleep.class) && super.attachTo( target )) {
 
 			if (target instanceof Hero)
-				if (target.HP == target.HT) {
+				if (target.HP == target.buff(Regeneration.class).regencap()) {
 					GLog.i(Messages.get(this, "toohealthy"));
 					detach();
 					return true;
@@ -64,7 +64,7 @@ public boolean act(){
 		if (target instanceof Hero) {
 			target.HP = Math.min(target.HP+1, target.HT);
 			((Hero) target).resting = true;
-			if (target.HP == target.HT) {
+			if (target.HP == target.buff(Regeneration.class).regencap()) {
 				GLog.p(Messages.get(this, "wakeup"));
 				detach();
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mimic.java
Patch:
@@ -94,15 +94,15 @@ public void adjustStats( int level ) {
 	}
 	
 	@Override
-	public void die( Object cause ) {
-
-		super.die( cause );
+	public void rollToDropLoot(){
 		
 		if (items != null) {
 			for (Item item : items) {
 				Dungeon.level.drop( item, pos ).sprite.drop();
 			}
+			items = null;
 		}
+		super.rollToDropLoot();
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -291,7 +291,6 @@ public void add( Buff buff ) {
 			state = FLEEING;
 		} else if (buff instanceof Sleep) {
 			state = SLEEPING;
-			this.sprite().showSleep();
 			postpone( Sleep.SWS );
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndImp.java
Patch:
@@ -71,6 +71,7 @@ private void takeReward( Imp imp, DwarfToken tokens, Item reward ) {
 		hide();
 		
 		tokens.detachAll( Dungeon.hero.belongings.backpack );
+		if (reward == null) return;
 
 		reward.identify();
 		if (reward.doPickUp( Dungeon.hero )) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/ChangesScene.java
Patch:
@@ -141,7 +141,7 @@ public void onClick(float x, float y) {
 		infos.add(changes);
 		
 		changes.addButton( new ChangeButton(Icons.get(Icons.SHPX), "Developer Commentary",
-				"_-_ Released Fabruary 14th, 2018\n" +
+				"_-_ Released February 14th, 2018\n" +
 				"_-_ 113 days after Shattered v0.6.2\n" +
 				"\n" +
 				"Commentary will be added here when this update is older."));
@@ -1235,10 +1235,10 @@ public void onClick(float x, float y) {
 				"_-_ Using throwing weapons now cancels stealth"));
 		
 		changes.addButton( new ChangeButton(Icons.get(Icons.PREFS), Messages.get(this, "misc"),
-				"_-_ Implement a donation system in the Google Play version of Shattered\n\n" +
+				"_-_ Implemented a donation system in the Google Play version of Shattered\n\n" +
 				"_-_ Significantly increased the stability of the save system\n\n" +
 				"_-_ Increased the number of visible rankings to 11 from 6\n\n" +
-				"_-_ Improved how the player is interrupted by hermful events"));
+				"_-_ Improved how the player is interrupted by harmful events"));
 		
 		changes = new ChangeInfo("v0.2.2", false, "");
 		changes.hardlight(Window.TITLE_COLOR);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/Potion.java
Patch:
@@ -23,6 +23,7 @@
 
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
 import com.shatteredpixel.shatteredpixeldungeon.Badges;
+import com.shatteredpixel.shatteredpixeldungeon.Challenges;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon;
 import com.shatteredpixel.shatteredpixeldungeon.Statistics;
@@ -385,7 +386,8 @@ public Item brew(ArrayList<Item> ingredients) {
 			}
 			
 			while (result instanceof PotionOfHealing
-					&& Random.Int(10) < Dungeon.LimitedDrops.COOKING_HP.count) {
+					&& (Dungeon.isChallenged(Challenges.NO_HEALING)
+					|| Random.Int(10) < Dungeon.LimitedDrops.COOKING_HP.count)) {
 				result = Generator.random(Generator.Category.POTION);
 			}
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MeleeWeapon.java
Patch:
@@ -52,16 +52,16 @@ public int STRReq(int lvl){
 	
 	@Override
 	public int damageRoll(Char owner) {
-		int damage = super.damageRoll( owner );
-		
+		int damage = imbue.damageFactor(super.damageRoll( owner ));
+
 		if (owner instanceof Hero) {
 			int exStr = ((Hero)owner).STR() - STRReq();
 			if (exStr > 0) {
 				damage += Random.IntRange( 0, exStr );
 			}
 		}
 		
-		return imbue.damageFactor(damage);
+		return damage;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/darts/TippedDart.java
Patch:
@@ -69,7 +69,7 @@ public int price() {
 	}
 	
 	private static HashMap<Class<?extends Plant.Seed>, Class<?extends TippedDart>> types = new HashMap<>();
-	{
+	static {
 		types.put(Blindweed.Seed.class,     BlindingDart.class);
 		types.put(Dreamfoil.Seed.class,     SleepDart.class);
 		types.put(Earthroot.Seed.class,     ParalyticDart.class);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -931,7 +931,7 @@ public int attackProc( Char enemy, int damage ) {
 			
 		switch (subClass) {
 		case SNIPER:
-			if (wep instanceof MissileWeapon) {
+			if (wep instanceof MissileWeapon && rangedAttack) {
 				Buff.prolong( this, SnipersMark.class, attackDelay() ).object = enemy.id();
 			}
 			break;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Thief.java
Patch:
@@ -98,6 +98,7 @@ public void rollToDropLoot() {
 			Dungeon.level.drop( item, pos ).sprite.drop();
 			//updates position
 			if (item instanceof Honeypot.ShatteredPot) ((Honeypot.ShatteredPot)item).setHolder( this );
+			item = null;
 		}
 		super.rollToDropLoot();
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/WallBlockingTilemap.java
Patch:
@@ -77,8 +77,7 @@ public synchronized void updateMapCell(int cell) {
 			//- There are cells 2x below
 			//- The cell below is a wall and visible
 			//- All of left, below-left, right, below-right is either a wall or hidden
-			} else if ( ((cell + 2*mapWidth) < size)
-					&& !fogHidden(cell + mapWidth)
+			} else if ( !fogHidden(cell + mapWidth)
 					&& (fogHidden(cell - 1) || wall(cell - 1))
 					&& (fogHidden(cell + 1) || wall(cell + 1))
 					&& (fogHidden(cell - 1 + mapWidth) || wall(cell - 1 + mapWidth))
@@ -178,7 +177,7 @@ public synchronized void updateMapCell(int cell) {
 	private boolean fogHidden(int cell){
 		if (!Dungeon.level.visited[cell] && !Dungeon.level.mapped[cell]) {
 			return true;
-		} else if (wall(cell) && !wall(cell + mapWidth) &&
+		} else if (wall(cell) && cell + mapWidth < size && !wall(cell + mapWidth) &&
 				!Dungeon.level.visited[cell + mapWidth] && !Dungeon.level.mapped[cell + mapWidth]) {
 			return true;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -276,6 +276,7 @@ protected boolean moveSprite( int from, int to ) {
 			sprite.move( from, to );
 			return true;
 		} else {
+			sprite.turnTo(from, to);
 			sprite.place( to );
 			return true;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Assets.java
Patch:
@@ -46,7 +46,7 @@ public class Assets {
 	public static final String WARRIOR	= "warrior.png";
 	public static final String MAGE		= "mage.png";
 	public static final String ROGUE	= "rogue.png";
-	public static final String HUNTRESS	= "ranger.png";
+	public static final String HUNTRESS	= "huntress.png";
 	public static final String AVATARS	= "avatars.png";
 	public static final String PET		= "pet.png";
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfFrost.java
Patch:
@@ -104,7 +104,7 @@ protected void fx(Ballistica bolt, Callback callback) {
 	@Override
 	public void onHit(MagesStaff staff, Char attacker, Char defender, int damage) {
 		Chill chill = defender.buff(Chill.class);
-		if (chill != null && Random.IntRange(2, 10) > chill.cooldown()){
+		if (chill != null && Random.IntRange(2, 10) <= chill.cooldown()){
 			//need to delay this through an actor so that the freezing isn't broken by taking damage from the staff hit.
 			new FlavourBuff(){
 				{actPriority = VFX_PRIO;}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Preparation.java
Patch:
@@ -26,6 +26,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Rat;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.NPC;
 import com.shatteredpixel.shatteredpixeldungeon.effects.CellEmitter;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Effects;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Speck;
@@ -233,7 +234,7 @@ public void doAction() {
 		public void onSelect(Integer cell) {
 			if (cell == null) return;
 			final Char enemy = Actor.findChar( cell );
-			if (enemy == null || Dungeon.hero.isCharmedBy(enemy)){
+			if (enemy == null || Dungeon.hero.isCharmedBy(enemy) || enemy instanceof NPC){
 				GLog.w(Messages.get(Preparation.class, "no_target"));
 			} else {
 				

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Golem.java
Patch:
@@ -60,12 +60,12 @@ protected float attackDelay() {
 	public int drRoll() {
 		return Random.NormalIntRange(0, 12);
 	}
-
+	
 	@Override
-	public void die( Object cause ) {
+	public void rollToDropLoot() {
 		Imp.Quest.process( this );
 		
-		super.die( cause );
+		super.rollToDropLoot();
 	}
 	
 	{

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Monk.java
Patch:
@@ -74,10 +74,10 @@ public int drRoll() {
 	}
 	
 	@Override
-	public void die( Object cause ) {
+	public void rollToDropLoot() {
 		Imp.Quest.process( this );
 		
-		super.die( cause );
+		super.rollToDropLoot();
 	}
 
 	private int hitsToDisarm = 0;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Piranha.java
Patch:
@@ -47,6 +47,9 @@ public class Piranha extends Mob {
 		
 		EXP = 0;
 		
+		loot = MysteryMeat.class;
+		lootChance = 1f;
+		
 		HUNTING = new Hunting();
 	}
 	
@@ -86,7 +89,6 @@ public int drRoll() {
 	
 	@Override
 	public void die( Object cause ) {
-		Dungeon.level.drop( new MysteryMeat(), pos ).sprite.drop();
 		super.die( cause );
 		
 		Statistics.piranhasKilled++;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfCorruption.java
Patch:
@@ -125,7 +125,7 @@ protected void onZap(Ballistica bolt) {
 
 		if (ch != null){
 			
-			if (!(ch instanceof Mob) || ch instanceof NPC){
+			if (!(ch instanceof Mob)){
 				return;
 			}
 

File: SPD-classes/src/main/java/com/watabou/glscripts/Script.java
Patch:
@@ -23,6 +23,7 @@
 
 import com.watabou.glwrap.Program;
 import com.watabou.glwrap.Shader;
+import com.watabou.noosa.Game;
 
 import java.util.HashMap;
 
@@ -44,7 +45,7 @@ public synchronized static<T extends Script> T use( Class<T> c ) {
 				try {
 					script = c.newInstance();
 				} catch (Exception e) {
-					e.printStackTrace();
+					Game.reportException(e);
 				}
 				all.put( c, script );
 			}

File: SPD-classes/src/main/java/com/watabou/gltextures/TextureCache.java
Patch:
@@ -26,6 +26,7 @@
 import android.graphics.BitmapFactory;
 
 import com.watabou.glwrap.Texture;
+import com.watabou.noosa.Game;
 
 import java.util.HashMap;
 
@@ -157,7 +158,7 @@ public static Bitmap getBitmap( Object src ) {
 			}
 		} catch (Exception e) {
 			
-			e.printStackTrace();
+			Game.reportException(e);
 			return null;
 			
 		}

File: SPD-classes/src/main/java/com/watabou/noosa/Group.java
Patch:
@@ -191,7 +191,7 @@ public synchronized Gizmo recycle( Class<? extends Gizmo> c ) {
 			try {
 				return add( c.newInstance() );
 			} catch (Exception e) {
-				e.printStackTrace();
+				Game.reportException(e);
 			}
 		}
 		

File: SPD-classes/src/main/java/com/watabou/noosa/audio/Music.java
Patch:
@@ -72,6 +72,7 @@ public void play( String assetName, boolean looping ) {
 			
 		} catch (Exception e) {
 			
+			Game.reportException(e);
 			player = null;
 			
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/Boomerang.java
Patch:
@@ -95,8 +95,8 @@ protected float durabilityPerUse() {
 	}
 	
 	@Override
-	public void rangedHit( Char enemy ) {
-		circleBack(enemy.pos, curUser);
+	public void rangedHit( Char enemy, int cell ) {
+		circleBack(cell, curUser);
 	}
 
 	@Override
@@ -107,7 +107,7 @@ protected void rangedMiss( int cell ) {
 	private void circleBack( int from, Hero owner ) {
 
 		((MissileSprite)curUser.sprite.parent.recycle( MissileSprite.class )).
-				reset( from, curUser.pos, curItem, null );
+				reset( from, owner.sprite, curItem, null );
 
 		if (throwEquiped) {
 			owner.belongings.weapon = this;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/TippedDart.java
Patch:
@@ -38,11 +38,11 @@ public int STRReq(int lvl) {
 	}
 	
 	@Override
-	protected void rangedHit(Char enemy) {
+	protected void rangedHit(Char enemy, int cell) {
 		if (enemy.isAlive())
 			Buff.affect(enemy, PinCushion.class).stick(new Dart());
 		else
-			Dungeon.level.drop( new Dart(), enemy.pos).sprite.drop();
+			Dungeon.level.drop( new Dart(), cell ).sprite.drop();
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/HornOfPlenty.java
Patch:
@@ -127,6 +127,7 @@ public void execute( Hero hero, String action ) {
 				if (charge >= 15)       image = ItemSpriteSheet.ARTIFACT_HORN4;
 				else if (charge >= 10)  image = ItemSpriteSheet.ARTIFACT_HORN3;
 				else if (charge >= 5)   image = ItemSpriteSheet.ARTIFACT_HORN2;
+				else                    image = ItemSpriteSheet.ARTIFACT_HORN1;
 
 				updateQuickslot();
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Combo.java
Patch:
@@ -151,7 +151,7 @@ public void restoreFromBundle(Bundle bundle) {
 	public Image getIcon() {
 		Image icon;
 		if (((Hero)target).belongings.weapon != null){
-			icon = new ItemSprite(Dungeon.hero.belongings.weapon.image, null);
+			icon = new ItemSprite(((Hero)target).belongings.weapon.image, null);
 		} else {
 			icon = new ItemSprite(new Item(){ {image = ItemSpriteSheet.WEAPON_HOLDER; }});
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1496,6 +1496,8 @@ public void onOperateComplete() {
 	
 	public boolean search( boolean intentional ) {
 		
+		if (!isAlive()) return false;
+		
 		boolean smthFound = false;
 
 		int distance = heroClass == HeroClass.ROGUE ? 2 : 1;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/effects/BlobEmitter.java
Patch:
@@ -56,9 +56,9 @@ protected void emit( int index ) {
 		for (int i = blob.area.left; i < blob.area.right; i++) {
 			for (int j = blob.area.top; j < blob.area.bottom; j++) {
 				cell = i + j*Dungeon.level.width();
-				if (map[cell] > 0
-						&& cell < Dungeon.level.heroFOV.length
-						&& Dungeon.level.heroFOV[cell]) {
+				if (cell < Dungeon.level.heroFOV.length
+						&& Dungeon.level.heroFOV[cell]
+						&& map[cell] > 0) {
 					float x = (i + Random.Float()) * size;
 					float y = (j + Random.Float()) * size;
 					factory.emit(this, index, x, y);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/BuffIndicator.java
Patch:
@@ -221,9 +221,7 @@ protected void onClick() {
 	
 	public static void refreshHero() {
 		if (heroInstance != null) {
-			synchronized (heroInstance) {
-				heroInstance.needsRefresh = true;
-			}
+			heroInstance.needsRefresh = true;
 		}
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -786,6 +786,7 @@ public static void plantSeed( int cell ) {
 		}
 	}
 	
+	//todo this doesn't account for walls right now
 	public static void discoverTile( int pos, int oldValue ) {
 		if (scene != null) {
 			scene.tiles.discover( pos, oldValue );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/DungeonTilemap.java
Patch:
@@ -113,6 +113,9 @@ public boolean overlapsPoint( float x, float y ) {
 	
 	public void discover( int pos, int oldValue ) {
 		
+		int visual = getTileVisual( pos, oldValue, false);
+		if (visual < 0) return;
+		
 		final Image tile = new Image( texture );
 		tile.frame( tileset.get( getTileVisual( pos, oldValue, false)));
 		tile.point( tileToWorld( pos ) );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/PixelScene.java
Patch:
@@ -238,7 +238,7 @@ protected void fadeIn() {
 		if (noFade) {
 			noFade = false;
 		} else {
-			fadeIn( 0xFF000000, true );
+			fadeIn( 0xFF000000, false );
 		}
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/DungeonTileSheet.java
Patch:
@@ -219,7 +219,9 @@ public static boolean wallStitcheable(int tile){
 
 	public static int getRaisedWallTile(int tile, int pos, int right, int below, int left){
 		int result;
-		if (doorTile(below))                                            result = RAISED_WALL_DOOR;
+		
+		if (below == -1 || wallStitcheable(below))                      return -1;
+		else if (doorTile(below))                                       result = RAISED_WALL_DOOR;
 		else if (tile == Terrain.WALL || tile == Terrain.SECRET_DOOR)   result = RAISED_WALL;
 		else if (tile == Terrain.WALL_DECO)                             result = RAISED_WALL_DECO;
 		else if (tile == Terrain.BOOKSHELF)                             result = RAISED_WALL_BOOKSHELF;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/CursedWand.java
Patch:
@@ -416,7 +416,7 @@ public void call() {
 									
 									@Override
 									protected void onSelect(int index) {
-										ShatteredPixelDungeon.quitGame();
+										Game.instance.finish();
 									}
 									
 									@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -454,7 +454,7 @@ public void destroy() {
 	}
 	
 	@Override
-	public synchronized void onFocusLost() {
+	public synchronized void onPause() {
 		try {
 			Dungeon.saveAll();
 			Badges.saveGlobal();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/ExitButton.java
Patch:
@@ -70,7 +70,7 @@ protected void onTouchUp() {
 	@Override
 	protected void onClick() {
 		if (Game.scene() instanceof TitleScene) {
-			ShatteredPixelDungeon.quitGame();
+			Game.instance.finish();
 		} else {
 			ShatteredPixelDungeon.switchNoFade( TitleScene.class );
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndGame.java
Patch:
@@ -113,7 +113,7 @@ protected void onClick() {
 						} catch (IOException e) {
 							ShatteredPixelDungeon.reportException(e);
 						}
-						ShatteredPixelDungeon.quitGame();
+						Game.instance.finish();
 					}
 				}
 		);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndInfoMob.java
Patch:
@@ -68,14 +68,14 @@ public MobTitle( Mob mob ) {
 		protected void layout() {
 			
 			image.x = 0;
-			image.y = Math.max( 0, name.height() + GAP + health.height() - image.height );
+			image.y = Math.max( 0, name.height() + health.height() - image.height );
 
 			name.x = image.width + GAP;
-			name.y = image.height - health.height() - GAP - name.baseLine();
+			name.y = Math.max( 0, image.height - health.height() - name.height());
 
 			float w = width - image.width - GAP;
 
-			health.setRect(image.width + GAP, image.height - health.height(), w, health.height());
+			health.setRect(image.width + GAP, name.y + name.height(), w, health.height());
 
 			buffs.setPos(
 				name.x + name.width() + GAP-1,

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/CharSprite.java
Patch:
@@ -300,7 +300,7 @@ public void flash() {
 		flashTime = FLASH_INTERVAL;
 	}
 	
-	public synchronized void add( State state ) {
+	public void add( State state ) {
 		switch (state) {
 			case BURNING:
 				burning = emitter();
@@ -350,7 +350,7 @@ public synchronized void add( State state ) {
 		}
 	}
 	
-	public synchronized void remove( State state ) {
+	public void remove( State state ) {
 		switch (state) {
 			case BURNING:
 				if (burning != null) {
@@ -414,6 +414,7 @@ public synchronized void remove( State state ) {
 	}
 	
 	@Override
+	//syncronized due to EmoIcon handling
 	public synchronized void update() {
 		
 		super.update();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/MageArmor.java
Patch:
@@ -41,7 +41,7 @@ public class MageArmor extends ClassArmor {
 	@Override
 	public void doSpecial() {
 		
-		for (Mob mob : Dungeon.level.mobs) {
+		for (Mob mob : Dungeon.level.mobs.toArray(new Mob[0])) {
 			if (Dungeon.level.heroFOV[mob.pos]) {
 				Buff.affect( mob, Burning.class ).reignite( mob );
 				Buff.prolong( mob, Roots.class, 3 );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mimic.java
Patch:
@@ -112,8 +112,9 @@ public boolean reset() {
 	}
 
 	public static Mimic spawnAt( int pos, List<Item> items ) {
+		if (Dungeon.level.pit[pos]) return null;
 		Char ch = Actor.findChar( pos );
-		if (ch != null || !Dungeon.level.passable[pos]) {
+		if (ch != null) {
 			ArrayList<Integer> candidates = new ArrayList<>();
 			for (int n : PathFinder.NEIGHBOURS8) {
 				int cell = pos + n;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Actor.java
Patch:
@@ -220,7 +220,7 @@ public static void process() {
 					current = null;
 				} else {
 					doNext = acting.act();
-					if (doNext && !Dungeon.hero.isAlive()) {
+					if (doNext && (Dungeon.hero == null || !Dungeon.hero.isAlive())) {
 						doNext = false;
 						current = null;
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Buff.java
Patch:
@@ -72,7 +72,7 @@ public boolean attachTo( Char target ) {
 	}
 	
 	public void detach() {
-		fx( false );
+		if (target.sprite != null) fx( false );
 		target.remove( this );
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/BrokenSeal.java
Patch:
@@ -107,7 +107,7 @@ public static class WarriorShield extends Buff {
 		private float partialShield;
 
 		@Override
-		public boolean act() {
+		public synchronized boolean act() {
 			if (armor == null) detach();
 			else if (armor.isEquipped((Hero)target)) {
 				if (target.SHLD < maxShield()){
@@ -122,11 +122,11 @@ else if (armor.isEquipped((Hero)target)) {
 			return true;
 		}
 
-		public void setArmor(Armor arm){
+		public synchronized void setArmor(Armor arm){
 			armor = arm;
 		}
 
-		public int maxShield() {
+		public synchronized int maxShield() {
 			return 1 + armor.tier + armor.level();
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/CharSprite.java
Patch:
@@ -300,7 +300,7 @@ public void flash() {
 		flashTime = FLASH_INTERVAL;
 	}
 	
-	public void add( State state ) {
+	public synchronized void add( State state ) {
 		switch (state) {
 			case BURNING:
 				burning = emitter();
@@ -350,7 +350,7 @@ public void add( State state ) {
 		}
 	}
 	
-	public void remove( State state ) {
+	public synchronized void remove( State state ) {
 		switch (state) {
 			case BURNING:
 				if (burning != null) {
@@ -414,7 +414,6 @@ public void remove( State state ) {
 	}
 	
 	@Override
-	//syncronized due to EmoIcon handling
 	public synchronized void update() {
 		
 		super.update();

File: SPD-classes/src/main/java/com/watabou/noosa/audio/Music.java
Patch:
@@ -44,7 +44,7 @@ public enum Music implements MediaPlayer.OnPreparedListener, MediaPlayer.OnError
 	
 	public void play( String assetName, boolean looping ) {
 		
-		if (isPlaying() && lastPlayed.equals( assetName )) {
+		if (isPlaying() && lastPlayed != null && lastPlayed.equals( assetName )) {
 			return;
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/effects/BlobEmitter.java
Patch:
@@ -56,7 +56,9 @@ protected void emit( int index ) {
 		for (int i = blob.area.left; i < blob.area.right; i++) {
 			for (int j = blob.area.top; j < blob.area.bottom; j++) {
 				cell = i + j*Dungeon.level.width();
-				if (map[cell] > 0 && Dungeon.level.heroFOV[cell]) {
+				if (map[cell] > 0
+						&& cell < Dungeon.level.heroFOV.length
+						&& Dungeon.level.heroFOV[cell]) {
 					float x = (i + Random.Float()) * size;
 					float y = (j + Random.Float()) * size;
 					factory.emit(this, index, x, y);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/effects/particles/FlowParticle.java
Patch:
@@ -96,7 +96,7 @@ public Flow( int pos ) {
 		@Override
 		public void update() {
 			
-			if (visible = Dungeon.level.heroFOV[pos]) {
+			if (visible = (pos < Dungeon.level.heroFOV.length && Dungeon.level.heroFOV[pos])) {
 				
 				super.update();
 				

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -902,7 +902,7 @@ public static WndBag selectItem( WndBag.Listener listener, WndBag.Mode mode, Str
 	}
 	
 	static boolean cancel() {
-		if (Dungeon.hero.curAction != null || Dungeon.hero.resting) {
+		if (Dungeon.hero != null || Dungeon.hero.curAction != null || Dungeon.hero.resting) {
 			
 			Dungeon.hero.curAction = null;
 			Dungeon.hero.resting = false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mimic.java
Patch:
@@ -113,7 +113,7 @@ public boolean reset() {
 
 	public static Mimic spawnAt( int pos, List<Item> items ) {
 		Char ch = Actor.findChar( pos );
-		if (ch != null) {
+		if (ch != null || !Dungeon.level.passable[pos]) {
 			ArrayList<Integer> candidates = new ArrayList<>();
 			for (int n : PathFinder.NEIGHBOURS8) {
 				int cell = pos + n;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/ClassArmor.java
Patch:
@@ -141,8 +141,8 @@ public int DRMax(int lvl){
 		int effectiveTier = armorTier;
 		if (glyph != null) effectiveTier += glyph.tierDRAdjust();
 		effectiveTier = Math.max(0, effectiveTier);
-
-		return effectiveTier * (2 + lvl);
+		
+		return Math.max(DRMin(lvl), effectiveTier * (2 + lvl));
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CavesLevel.java
Patch:
@@ -174,7 +174,7 @@ public Vein( int pos ) {
 		@Override
 		public void update() {
 			
-			if (visible = Dungeon.level.heroFOV[pos]) {
+			if (visible = (pos < Dungeon.level.heroFOV.length && Dungeon.level.heroFOV[pos])) {
 				
 				super.update();
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CityLevel.java
Patch:
@@ -184,7 +184,7 @@ public Smoke( int pos ) {
 		
 		@Override
 		public void update() {
-			if (visible = Dungeon.level.heroFOV[pos]) {
+			if (visible = (pos < Dungeon.level.heroFOV.length && Dungeon.level.heroFOV[pos])) {
 				super.update();
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/HallsLevel.java
Patch:
@@ -181,7 +181,7 @@ public Stream( int pos ) {
 		@Override
 		public void update() {
 			
-			if (visible = Dungeon.level.heroFOV[pos]) {
+			if (visible = (pos < Dungeon.level.heroFOV.length && Dungeon.level.heroFOV[pos])) {
 				
 				super.update();
 				

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/ChangesScene.java
Patch:
@@ -137,7 +137,7 @@ public void onClick(float x, float y) {
 		changes.addButton( new ChangeButton(Icons.get(Icons.PREFS), Messages.get(this, "misc"),
 				"_-_ Improved the formatting of older updates in the changes list. More information will be added to fill these out in future updates.\n\n" +
 				"_-_ Slightly reduced the chance for items to appear in locked chests.\n\n" +
-				"_-_ Game music now mutes itself during phone calls"));
+				"_-_ Game music now mutes itself during phone calls on android 6.0+"));
 		
 		changes.addButton( new ChangeButton(new Image(Assets.SPINNER, 144, 0, 16, 16), Messages.get(this, "bugfixes"),
 				"Fixed (caused by 0.6.2):\n" +

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/plants/Earthroot.java
Patch:
@@ -99,13 +99,15 @@ public int absorb( int damage ) {
 				return damage - level;
 			} else {
 				level -= damage-damage/2;
+				BuffIndicator.refreshHero();
 				return damage/2;
 			}
 		}
 		
 		public void level( int value ) {
 			if (level < value) {
 				level = value;
+				BuffIndicator.refreshHero();
 			}
 			pos = target.pos;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/KeyDisplay.java
Patch:
@@ -39,7 +39,7 @@
 import com.watabou.noosa.Visual;
 
 import java.nio.FloatBuffer;
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 
 public class KeyDisplay extends Visual {
 	
@@ -55,7 +55,7 @@ public class KeyDisplay extends Visual {
 	//mapping of key types to slots in the array, 0 is reserved for black (missed) keys
 	//this also determines the order these keys will appear (lower first)
 	//and the order they will be truncated if there is no space (higher first, larger counts first)
-	private static final HashMap<Class<? extends Key>, Integer> keyMap = new HashMap<>();
+	private static final LinkedHashMap<Class<? extends Key>, Integer> keyMap = new LinkedHashMap<>();
 	static {
 		keyMap.put(SkeletonKey.class, 1);
 		keyMap.put(CrystalKey.class, 2);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/ArmorKit.java
Patch:
@@ -95,6 +95,7 @@ private void upgrade( Armor armor ) {
 			
 			curUser.belongings.armor = classArmor;
 			((HeroSprite)curUser.sprite).updateArmor();
+			classArmor.activate(curUser);
 			
 		} else {
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/ClassArmor.java
Patch:
@@ -97,7 +97,6 @@ public void restoreFromBundle( Bundle bundle ) {
 	@Override
 	public ArrayList<String> actions( Hero hero ) {
 		ArrayList<String> actions = super.actions( hero );
-		actions.remove( AC_DETACH );
 		if (hero.HP >= 3 && isEquipped( hero )) {
 			actions.add( AC_SPECIAL );
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/CloakOfShadows.java
Patch:
@@ -233,7 +233,7 @@ public boolean act(){
 					((Hero) target).interrupt();
 				} else {
 					//target hero level is 1 + 2*cloak level
-					int lvlDiffFromTarget = ((Hero) target).lvl - 1+level()*2;
+					int lvlDiffFromTarget = ((Hero) target).lvl - (1+level()*2);
 					//plus an extra one for each level after 6
 					if (level() >= 7){
 						lvlDiffFromTarget -= level()-6;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/secret/SecretRunestoneRoom.java
Patch:
@@ -22,7 +22,7 @@
 package com.shatteredpixel.shatteredpixeldungeon.levels.rooms.secret;
 
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfLiquidFlame;
-import com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfIntuition;
+import com.shatteredpixel.shatteredpixeldungeon.items.stones.StoneOfEnchantment;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Level;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Terrain;
 import com.shatteredpixel.shatteredpixeldungeon.levels.painters.Painter;
@@ -66,7 +66,7 @@ public void paint(Level level) {
 		do{
 			dropPos = level.pointToCell(random());
 		} while (level.map[dropPos] != Terrain.EMPTY_SP);
-		level.drop( new StoneOfIntuition(), dropPos);
+		level.drop( new StoneOfEnchantment(), dropPos);
 		
 		entrance.set(Door.Type.HIDDEN);
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/RegularLevel.java
Patch:
@@ -215,7 +215,7 @@ protected void createMobs() {
 			Mob mob = createMob();
 			mob.pos = pointToCell(roomToSpawn.random());
 
-			if (findMob(mob.pos) == null && passable[mob.pos]) {
+			if (findMob(mob.pos) == null && passable[mob.pos] && mob.pos != exit) {
 				mobsToSpawn--;
 				mobs.add(mob);
 
@@ -224,7 +224,7 @@ protected void createMobs() {
 					mob = createMob();
 					mob.pos = pointToCell(roomToSpawn.random());
 
-					if (findMob(mob.pos)  == null && passable[mob.pos]) {
+					if (findMob(mob.pos)  == null && passable[mob.pos] && mob.pos != exit) {
 						mobsToSpawn--;
 						mobs.add(mob);
 					}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -710,8 +710,8 @@ public Plant plant( Plant.Seed seed, int pos ) {
 				map[pos] == Terrain.EMPTY ||
 				map[pos] == Terrain.EMBERS ||
 				map[pos] == Terrain.EMPTY_DECO) {
-			map[pos] = Terrain.GRASS;
-			flamable[pos] = true;
+			set(pos, Terrain.GRASS, this);
+			GameScene.updateMap(pos);
 		}
 		
 		plant = seed.couch( pos, this );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -764,7 +764,9 @@ public boolean act( boolean enemyInFOV, boolean justAlerted ) {
 			//loses target when 0-dist rolls a 6 or greater.
 			if (enemy == null || !enemyInFOV && 1 + Random.Int(Dungeon.level.distance(pos, target)) >= 6){
 				target = -1;
-			} else {
+			
+			//if enemy isn't in FOV, keep running from their previous position.
+			} else if (enemyInFOV) {
 				target = enemy.pos;
 			}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Guard.java
Patch:
@@ -89,6 +89,7 @@ private boolean chain(int target){
 				return false;
 			} else {
 				final int newPosFinal = newPos;
+				this.target = newPos;
 				yell( Messages.get(this, "scorpion") );
 				sprite.parent.add(new Chains(sprite.center(), enemy.sprite.center(), new Callback() {
 					public void call() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MagesStaff.java
Patch:
@@ -205,6 +205,8 @@ else if (wandLevelDiff < 0)
 			Dungeon.quickslot.setSlot( slot, this );
 			updateQuickslot();
 		}
+		
+		Badges.validateItemLevelAquired(this);
 
 		return this;
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/Fire.java
Patch:
@@ -69,7 +69,7 @@ protected void evolve() {
 
 					}
 
-				} else if (freeze == null || freeze.volume <= 0 || freeze.cur[cell] < 0) {
+				} else if (freeze == null || freeze.volume <= 0 || freeze.cur[cell] <= 0) {
 
 					if (flamable[cell]
 							&& (cur[cell-1] > 0

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Preparation.java
Patch:
@@ -55,8 +55,8 @@ public enum AttackLevel{
 		LVL_1( 1,  0.1f, 0.0f, 1, 0),
 		LVL_2( 3,  0.2f, 0.0f, 1, 1),
 		LVL_3( 6,  0.3f, 0.0f, 2, 3),
-		LVL_4( 11, 0.4f, 0.4f, 2, 5),
-		LVL_5( 16, 0.6f, 0.6f, 3, 7);
+		LVL_4( 11, 0.4f, 0.6f, 2, 5),
+		LVL_5( 16, 0.5f, 1.0f, 3, 7);
 		
 		final int turnsReq;
 		final float baseDmgBonus, missingHPBonus;
@@ -80,7 +80,7 @@ public int damageRoll( Char attacker, Char defender){
 				int newDmg = attacker.damageRoll();
 				if (newDmg > dmg) dmg = newDmg;
 			}
-			float defenderHPPercent = defender.HP / (float)defender.HT;
+			float defenderHPPercent = 1f - (defender.HP / (float)defender.HT);
 			return Math.round(dmg * (1f + baseDmgBonus + (missingHPBonus * defenderHPPercent)));
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -86,7 +86,7 @@ public abstract class Mob extends Char {
 	protected int defenseSkill = 0;
 	
 	public int EXP = 1;
-	protected int maxLvl = Hero.MAX_LEVEL;
+	public int maxLvl = Hero.MAX_LEVEL;
 	
 	protected Char enemy;
 	protected boolean enemySeen;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfCorruption.java
Patch:
@@ -208,7 +208,7 @@ private void corruptEnemy( Mob enemy ){
 				buff.detach();
 			}
 			Buff.affect(enemy, Corruption.class);
-			if (enemy.EXP > 0) {
+			if (enemy.EXP > 0 && curUser.lvl <= enemy.maxLvl) {
 				curUser.sprite.showStatus(CharSprite.POSITIVE, Messages.get(enemy, "exp", enemy.EXP));
 				curUser.earnExp(enemy.EXP);
 				enemy.EXP = 0;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/Fire.java
Patch:
@@ -51,7 +51,7 @@ protected void evolve() {
 				cell = i + j*Dungeon.level.width();
 				if (cur[cell] > 0) {
 					
-					if (freeze != null && freeze.cur[cell] > 0){
+					if (freeze != null && freeze.volume > 0 && freeze.cur[cell] > 0){
 						freeze.clear(cell);
 						off[cell] = cur[cell] = 0;
 						continue;
@@ -69,7 +69,7 @@ protected void evolve() {
 
 					}
 
-				} else if (freeze == null || freeze.cur[cell] < 0) {
+				} else if (freeze == null || freeze.volume <= 0 || freeze.cur[cell] < 0) {
 
 					if (flamable[cell]
 							&& (cur[cell-1] > 0

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/Freezing.java
Patch:
@@ -49,7 +49,7 @@ protected void evolve() {
 				cell = i + j*Dungeon.level.width();
 				if (cur[cell] > 0) {
 					
-					if (fire != null && fire.cur[cell] > 0){
+					if (fire != null && fire.volume > 0 && fire.cur[cell] > 0){
 						fire.clear(cell);
 						off[cell] = cur[cell] = 0;
 						continue;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/WarpingTrap.java
Patch:
@@ -33,6 +33,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfTeleportation;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
+import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.utils.BArray;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
 import com.watabou.noosa.audio.Sample;
@@ -54,6 +55,7 @@ public void activate() {
 			ScrollOfTeleportation.teleportHero( (Hero)ch);
 			BArray.setFalse(Dungeon.level.visited);
 			BArray.setFalse(Dungeon.level.mapped);
+			GameScene.updateFog();
 			Dungeon.observe();
 			
 		} else if (ch != null){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Yog.java
Patch:
@@ -315,7 +315,7 @@ protected boolean canAttack( Char enemy ) {
 		}
 		
 		@Override
-		public boolean doAttack( Char enemy ) {
+		public boolean attack( Char enemy ) {
 			
 			if (!Dungeon.level.adjacent( pos, enemy.pos )) {
 				spend( attackDelay() );
@@ -340,7 +340,7 @@ public boolean doAttack( Char enemy ) {
 					return false;
 				}
 			} else {
-				return super.doAttack( enemy );
+				return super.attack( enemy );
 			}
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Eye.java
Patch:
@@ -94,7 +94,7 @@ protected boolean canAttack( Char enemy ) {
 				beamTarget = aim.collisionPos;
 				return true;
 			} else
-				//if the beam is charged, it has to attack, will aim at previous location of hero.
+				//if the beam is charged, it has to attack, will aim at previous location of target.
 				return beamCharged;
 		} else
 			return super.canAttack(enemy);
@@ -229,8 +229,8 @@ public void restoreFromBundle(Bundle bundle) {
 	private class Hunting extends Mob.Hunting{
 		@Override
 		public boolean act(boolean enemyInFOV, boolean justAlerted) {
-			//always attack if the beam is charged, no exceptions
-			if (beamCharged && canAttack(enemy)) {
+			//even if enemy isn't seen, attack them if the beam is charged
+			if (beamCharged && enemy != null && canAttack(enemy)) {
 				enemySeen = enemyInFOV;
 				return doAttack(enemy);
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/FireImbue.java
Patch:
@@ -66,10 +66,10 @@ public boolean act() {
 
 		spend(TICK);
 		left -= TICK;
-		if (left < 5){
-			BuffIndicator.refreshHero();
-		} else if (left <= 0) {
+		if (left <= 0){
 			detach();
+		} else if (left < 5){
+			BuffIndicator.refreshHero();
 		}
 
 		return true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Bones.java
Patch:
@@ -92,8 +92,9 @@ private static Item pickItem(Hero hero){
 					item = Dungeon.quickslot.randomNonePlaceholder();
 					break;
 			}
-			if (item == null || item.bones)
+			if (item == null || !item.bones) {
 				return pickItem(hero);
+			}
 		} else {
 
 			Iterator<Item> iterator = hero.belongings.backpack.iterator();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Imp.java
Patch:
@@ -190,8 +190,8 @@ public static void spawn( CityLevel level ) {
 						level.heaps.get( npc.pos ) != null ||
 						level.findMob( npc.pos ) != null ||
 						//The imp doesn't move, so he cannot obstruct a passageway
-						!(Dungeon.level.passable[npc.pos + PathFinder.CIRCLE4[0]] && Dungeon.level.passable[npc.pos + PathFinder.CIRCLE4[2]]) ||
-						!(Dungeon.level.passable[npc.pos + PathFinder.CIRCLE4[1]] && Dungeon.level.passable[npc.pos + PathFinder.CIRCLE4[3]]));
+						!(level.passable[npc.pos + PathFinder.CIRCLE4[0]] && level.passable[npc.pos + PathFinder.CIRCLE4[2]]) ||
+						!(level.passable[npc.pos + PathFinder.CIRCLE4[1]] && level.passable[npc.pos + PathFinder.CIRCLE4[3]]));
 				level.mobs.add( npc );
 				
 				spawned = true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/InventoryScroll.java
Patch:
@@ -49,7 +49,7 @@ public void doRead() {
 	}
 	
 	private void confirmCancelation() {
-		GameScene.show( new WndOptions( name(), Messages.get(this, "warning"),
+		GameScene.show( new WndOptions( Messages.titleCase(name()), Messages.get(this, "warning"),
 				Messages.get(this, "yes"), Messages.get(this, "no") ) {
 			@Override
 			protected void onSelect( int index ) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Terrain.java
Patch:
@@ -99,7 +99,7 @@ public class Terrain {
 		flags[STATUE]		= SOLID;
 		flags[STATUE_SP]	= flags[STATUE];
 		flags[BOOKSHELF]	= flags[BARRICADE];
-		flags[ALCHEMY]		= PASSABLE;
+		flags[ALCHEMY]		= SOLID;
 
 	};
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java
Patch:
@@ -95,6 +95,9 @@ public ShatteredPixelDungeon() {
 		com.watabou.utils.Bundle.addAlias(
 				com.shatteredpixel.shatteredpixeldungeon.levels.traps.WornDartTrap.class,
 				"com.shatteredpixel.shatteredpixeldungeon.levels.traps.WornTrap" );
+		com.watabou.utils.Bundle.addAlias(
+				com.shatteredpixel.shatteredpixeldungeon.levels.traps.PoisonDartTrap.class,
+				"com.shatteredpixel.shatteredpixeldungeon.levels.traps.PoisonTrap" );
 		com.watabou.utils.Bundle.addAlias(
 				com.shatteredpixel.shatteredpixeldungeon.levels.traps.ShockingTrap.class,
 				"com.shatteredpixel.shatteredpixeldungeon.levels.traps.ParalyticTrap" );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -722,7 +722,7 @@ public Plant plant( Plant.Seed seed, int pos ) {
 			flamable[pos] = true;
 		}
 		
-		plant = seed.couch( pos );
+		plant = seed.couch( pos, this );
 		plants.put( pos, plant );
 		
 		GameScene.plantSeed( pos );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/plants/Plant.java
Patch:
@@ -36,6 +36,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.Generator;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.SandalsOfNature;
+import com.shatteredpixel.shatteredpixeldungeon.levels.Level;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Terrain;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.watabou.noosa.audio.Sample;
@@ -166,9 +167,9 @@ public void execute( Hero hero, String action ) {
 			}
 		}
 		
-		public Plant couch( int pos ) {
+		public Plant couch( int pos, Level level ) {
 			try {
-				if (Dungeon.level.heroFOV != null && Dungeon.level.heroFOV[pos]) {
+				if (level.heroFOV != null && level.heroFOV[pos]) {
 					Sample.INSTANCE.play(Assets.SND_PLANT);
 				}
 				Plant plant = plantClass.newInstance();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfCorruption.java
Patch:
@@ -49,6 +49,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Venom;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Vertigo;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Weakness;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Bee;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.King;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mimic;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
@@ -129,7 +130,7 @@ protected void onZap(Ballistica bolt) {
 			float enemyResist = 1 + enemy.EXP;
 			if (ch instanceof Mimic || ch instanceof Statue){
 				enemyResist = 1 + Dungeon.depth;
-			} else if (ch instanceof Piranha) {
+			} else if (ch instanceof Piranha || ch instanceof Bee) {
 				enemyResist = 1 + Dungeon.depth/2f;
 			} else if (ch instanceof Wraith) {
 				enemyResist = 1 + Dungeon.depth/4f;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/CustomTiledVisual.java
Patch:
@@ -64,6 +64,7 @@ public void setRect(int tileX, int tileY, int tileW, int tileH){
 	}
 
 	public CustomTiledVisual create(){
+		camera = null;
 		x = tileX*SIZE;
 		y = tileY*SIZE;
 		return this;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Swarm.java
Patch:
@@ -86,11 +86,11 @@ public int defenseProc( Char enemy, int damage ) {
 
 		if (HP >= damage + 2) {
 			ArrayList<Integer> candidates = new ArrayList<>();
-			boolean[] passable = Dungeon.level.passable;
+			boolean[] solid = Dungeon.level.solid;
 			
 			int[] neighbours = {pos + 1, pos - 1, pos + Dungeon.level.width(), pos - Dungeon.level.width()};
 			for (int n : neighbours) {
-				if (passable[n] && Actor.findChar( n ) == null) {
+				if (!solid[n] && Actor.findChar( n ) == null) {
 					candidates.add( n );
 				}
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -163,6 +163,7 @@ protected boolean act() {
 			sprite.showAlert();
 		} else {
 			sprite.hideAlert();
+			sprite.hideLost();
 		}
 		
 		if (paralysed > 0) {
@@ -698,7 +699,6 @@ public boolean act( boolean enemyInFOV, boolean justAlerted ) {
 			} else {
 
 				enemySeen = false;
-				sprite.hideLost();
 
 				int oldPos = pos;
 				if (target != -1 && getCloser( target )) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/DriedRose.java
Patch:
@@ -682,7 +682,6 @@ public boolean act( boolean enemyInFOV, boolean justAlerted ) {
 				} else {
 					
 					enemySeen = false;
-					sprite.hideLost();
 					
 					int oldPos = pos;
 					//always move towards the hero when wandering

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/curses/Multiplicity.java
Patch:
@@ -72,6 +72,8 @@ public int proc(Armor armor, Char attacker, Char defender, int damage) {
 						m = Dungeon.level.createMob();
 					} else {
 						try {
+							Actor.fixTime();
+							
 							m = (Mob)attacker.getClass().newInstance();
 							Bundle store = new Bundle();
 							attacker.storeInBundle(store);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/CharSprite.java
Patch:
@@ -126,7 +126,7 @@ public CharSprite() {
 	@Override
 	public void play(Animation anim) {
 		//Shouldn't interrupt the dieing animation
-		if (curAnim != die) {
+		if (curAnim == null || curAnim != die) {
 			super.play(anim);
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/secret/SecretLarderRoom.java
Patch:
@@ -40,7 +40,7 @@ public class SecretLarderRoom extends SecretRoom {
 	@Override
 	public boolean canConnect(Point p) {
 		//refuses connections from the top
-		return super.canConnect(p) && p.x > top+1;
+		return super.canConnect(p) && p.y > top+1;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/KindofMisc.java
Patch:
@@ -50,11 +50,9 @@ public boolean doEquip(final Hero hero) {
 						protected void onSelect(int index) {
 
 							KindofMisc equipped = (index == 0 ? m1 : m2);
-							detach( hero.belongings.backpack );
 							if (equipped.doUnequip(hero, true, false)) {
+								//fully re-execute rather than just call doEquip as we want to preserve quickslot
 								execute(hero, AC_EQUIP);
-							} else {
-								collect( hero.belongings.backpack );
 							}
 						}
 					});

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/secret/SecretRoom.java
Patch:
@@ -119,11 +119,11 @@ public static void restoreRoomsFromBundle( Bundle bundle ) {
 			for (Class<? extends SecretRoom> type : bundle.getClassArray(ROOMS)) {
 				if (type != null) runSecrets.add(type);
 			}
+			regionSecretsThisRun = bundle.getIntArray(REGIONS);
 		} else {
 			initForRun();
 			ShatteredPixelDungeon.reportException(new Exception("secrets array didn't exist!"));
 		}
-		regionSecretsThisRun = bundle.getIntArray(REGIONS);
 	}
 	
 	public static void storeRoomsInBundle( Bundle bundle ) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -1059,7 +1059,7 @@ public String tileDesc( int tile ) {
 			case Terrain.EMPTY_WELL:
 				return Messages.get(Level.class, "empty_well_desc");
 			default:
-				return Messages.get(Level.class, "default_desc");
+				return "";
 		}
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/ItemSprite.java
Patch:
@@ -158,7 +158,7 @@ public void drop() {
 		speed.set( 0, -100 );
 		acc.set(0, -speed.y / DROP_INTERVAL * 2);
 		
-		if (visible && heap != null && heap.peek() instanceof Gold) {
+		if (heap != null && heap.seen && heap.peek() instanceof Gold) {
 			CellEmitter.center( heap.pos ).burst( Speck.factory( Speck.COIN ), 5 );
 			Sample.INSTANCE.play( Assets.SND_GOLD, 1, 1, Random.Float( 0.9f, 1.1f ) );
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -314,8 +314,8 @@ protected void spend( float time ) {
 		super.spend( time / timeScale );
 	}
 	
-	public HashSet<Buff> buffs() {
-		return buffs;
+	public synchronized HashSet<Buff> buffs() {
+		return new HashSet<>(buffs);
 	}
 	
 	@SuppressWarnings("unchecked")

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfMirrorImage.java
Patch:
@@ -89,7 +89,7 @@ public static int spawnImages( Hero hero, int nImages ){
 			int index = Random.index( respawnPoints );
 			
 			MirrorImage mob = new MirrorImage();
-			mob.duplicate( curUser );
+			mob.duplicate( hero );
 			GameScene.add( mob );
 			ScrollOfTeleportation.appear( mob, respawnPoints.get( index ) );
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/standard/EntranceRoom.java
Patch:
@@ -71,7 +71,7 @@ public void paint( Level level ) {
 		}
 
 		if (Dungeon.depth == 2){
-			if (!Badges.isUnlocked(Badges.Badge.BOSS_SLAIN_4)){
+			if (!Badges.isUnlocked(Badges.Badge.BOSS_SLAIN_1)){
 				for (Room.Door door : connected.values()) {
 					door.set( Door.Type.HIDDEN );
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -556,7 +556,7 @@ public static void saveLevel() throws IOException {
 	}
 	
 	public static void saveAll() throws IOException {
-		if (hero.isAlive()) {
+		if (hero != null && hero.isAlive()) {
 			
 			Actor.fixTime();
 			saveGame( gameFile( hero.heroClass ) );

File: SPD-classes/src/main/java/com/watabou/noosa/Camera.java
Patch:
@@ -131,7 +131,6 @@ public Camera( int x, int y, int width, int height, float zoom ) {
 	@Override
 	public void destroy() {
 		target = null;
-		matrix = null;
 	}
 	
 	public void zoom( float value ) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndSadGhost.java
Patch:
@@ -21,7 +21,6 @@
 
 package com.shatteredpixel.shatteredpixeldungeon.windows;
 
-import com.shatteredpixel.shatteredpixeldungeon.Challenges;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Ghost;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
@@ -82,7 +81,7 @@ protected void onClick() {
 		btnWeapon.setRect( 0, message.top() + message.height() + GAP, WIDTH, BTN_HEIGHT );
 		add( btnWeapon );
 
-		if (!Dungeon.isChallenged( Challenges.NO_ARMOR )) {
+		if (Ghost.Quest.armor != null) {
 			RedButton btnArmor = new RedButton( Messages.get(this, "armor") ) {
 				@Override
 				protected void onClick() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/CharSprite.java
Patch:
@@ -185,7 +185,7 @@ public void move( int from, int to ) {
 	
 	public void interruptMotion() {
 		if (motion != null) {
-			onComplete( motion );
+			motion.stop(false);
 		}
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/MagicalSleep.java
Patch:
@@ -34,7 +34,7 @@ public class MagicalSleep extends Buff {
 
 	@Override
 	public boolean attachTo( Char target ) {
-		if (super.attachTo( target ) && !target.immunities().contains(Sleep.class)) {
+		if (!target.immunities().contains(Sleep.class) && super.attachTo( target )) {
 
 			if (target instanceof Hero)
 				if (target.HP == target.HT) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Rankings.java
Patch:
@@ -292,7 +292,9 @@ public void restoreFromBundle( Bundle bundle ) {
 			armorTier	= bundle.getInt( TIER );
 			
 			if (bundle.contains(DATA))  gameData = bundle.getBundle(DATA);
-			if (bundle.contains(ID))    gameID = bundle.getString(ID);
+			if (bundle.contains(ID))   gameID = bundle.getString(ID);
+			
+			if (gameID == null) gameID = UUID.randomUUID().toString();
 
 			depth = bundle.getInt( DEPTH );
 			herolevel = bundle.getInt( LEVEL );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/plants/Plant.java
Patch:
@@ -167,7 +167,7 @@ public void execute( Hero hero, String action ) {
 		
 		public Plant couch( int pos ) {
 			try {
-				if (Dungeon.visible[pos]) {
+				if (Dungeon.visible != null && Dungeon.visible[pos]) {
 					Sample.INSTANCE.play(Assets.SND_PLANT);
 				}
 				Plant plant = plantClass.newInstance();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/CharSprite.java
Patch:
@@ -161,7 +161,9 @@ public void showStatus( int color, String text, Object... args ) {
 	}
 	
 	public void idle() {
-		play( idle );
+		if (curAnim != die) {
+			play(idle);
+		}
 	}
 	
 	public void move( int from, int to ) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -483,7 +483,7 @@ public boolean act() {
 			Dungeon.observe();
 		}
 		
-		if (curAction == null) {
+		if (curAction == null || search(false)) {
 			
 			if (resting) {
 				spend( TIME_TO_REST ); next();
@@ -495,8 +495,6 @@ public boolean act() {
 			
 		} else {
 			
-			search( false );
-			
 			resting = false;
 			
 			ready = false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/CellSelector.java
Patch:
@@ -22,11 +22,11 @@
 package com.shatteredpixel.shatteredpixeldungeon.scenes;
 
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
-import com.shatteredpixel.shatteredpixeldungeon.items.Heap;
-import com.shatteredpixel.shatteredpixeldungeon.tiles.DungeonTilemap;
 import com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
+import com.shatteredpixel.shatteredpixeldungeon.items.Heap;
+import com.shatteredpixel.shatteredpixeldungeon.tiles.DungeonTilemap;
 import com.watabou.input.Touchscreen.Touch;
 import com.watabou.noosa.Camera;
 import com.watabou.noosa.TouchArea;
@@ -167,7 +167,7 @@ protected void onDrag( Touch t ) {
 			float curSpan = PointF.distance( touch.current, another.current );
 			camera.zoom( GameMath.gate(
 				PixelScene.minZoom,
-				startZoom * curSpan / startSpan,
+				PixelScene.align(startZoom * curSpan / startSpan),
 				PixelScene.maxZoom ) );
 
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Window.java
Patch:
@@ -140,7 +140,9 @@ public void offset( int yOffset ){
 	}
 	
 	public void hide() {
-		parent.erase( this );
+		if (parent != null) {
+			parent.erase(this);
+		}
 		destroy();
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/GameLog.java
Patch:
@@ -48,20 +48,20 @@ public GameLog() {
 		recreateLines();
 	}
 
-	private void recreateLines() {
+	private synchronized void recreateLines() {
 		for (Entry entry : entries) {
 			lastEntry = PixelScene.renderMultiline( entry.text, 6 );
 			lastEntry.hardlight( lastColor = entry.color );
 			add( lastEntry );
 		}
 	}
 
-	public void newLine() {
+	public synchronized void newLine() {
 		lastEntry = null;
 	}
 
 	@Override
-	public void onSignal( String text ) {
+	public synchronized void onSignal( String text ) {
 
 		if (length != entries.size()){
 			clear();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -478,7 +478,6 @@ public boolean act() {
 			return false;
 		}
 		
-		search( false );
 		checkVisibleMobs();
 		if (!resting || buff(MindVision.class) != null || buff(Awareness.class) != null) {
 			Dungeon.observe();
@@ -496,6 +495,8 @@ public boolean act() {
 			
 		} else {
 			
+			search( false );
+			
 			resting = false;
 			
 			ready = false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/effects/Flare.java
Patch:
@@ -119,7 +119,7 @@ public Flare show( Visual visual, float duration ) {
 		visual.parent.addToBack( this );
 		
 		lifespan = this.duration = duration;
-		scale.set( 0 );
+		if (lifespan > 0) scale.set( 0 );
 		
 		return this;
 	}
@@ -129,7 +129,7 @@ public Flare show( Group parent, PointF pos, float duration ) {
 		parent.add( this );
 
 		lifespan = this.duration = duration;
-		scale.set( 0 );
+		if (lifespan > 0) scale.set( 0 );
 
 		return this;
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndJournal.java
Patch:
@@ -229,7 +229,7 @@ private void updateList(){
 			PixelScene.align(title);
 			content.add(title);
 			
-			pos += Math.max(ITEM_HEIGHT, title.bottom());
+			pos += Math.max(ITEM_HEIGHT, title.height());
 			
 			for (String page : Document.ADVENTURERS_GUIDE.pages()){
 				GuideItem item = new GuideItem( page );
@@ -313,7 +313,7 @@ private void updateList(){
 				PixelScene.align(title);
 				content.add(title);
 				
-				pos += Math.max(ITEM_HEIGHT, title.bottom());
+				pos += Math.max(ITEM_HEIGHT, title.height());
 			}
 			for(Notes.Record rec : keys){
 				ListItem item = new ListItem( Icons.get(Icons.DEPTH),
@@ -338,7 +338,7 @@ private void updateList(){
 				PixelScene.align(title);
 				content.add(title);
 				
-				pos += Math.max(ITEM_HEIGHT, title.bottom());
+				pos += Math.max(ITEM_HEIGHT, title.height());
 			}
 			for (Notes.Record rec : landmarks) {
 				ListItem item = new ListItem( Icons.get(Icons.DEPTH),

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/DriedRose.java
Patch:
@@ -627,7 +627,7 @@ public boolean interact() {
 				rose.talkedTo = true;
 				GameScene.show(new WndQuest(this, Messages.get(this, "introduce") ));
 				return false;
-			} else {
+			} else if (Level.passable[pos] || Dungeon.hero.flying) {
 				int curPos = pos;
 
 				moveSprite( pos, Dungeon.hero.pos );
@@ -639,6 +639,8 @@ public boolean interact() {
 				Dungeon.hero.spend( 1 / Dungeon.hero.speed() );
 				Dungeon.hero.busy();
 				return true;
+			} else {
+				return false;
 			}
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfCorruption.java
Patch:
@@ -27,6 +27,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Amok;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Corruption;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.NPC;
 import com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MagesStaff;
 import com.shatteredpixel.shatteredpixeldungeon.mechanics.Ballistica;
@@ -47,7 +48,7 @@ public class WandOfCorruption extends Wand {
 	protected void onZap(Ballistica bolt) {
 		Char ch = Actor.findChar(bolt.collisionPos);
 
-		if (ch != null){
+		if (ch != null && !(ch instanceof NPC)){
 
 			if(ch.buff(Corruption.class) != null){
 				GLog.w( Messages.get(this, "already_corrupted") );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndJournal.java
Patch:
@@ -512,7 +512,7 @@ public CatalogItem(Item item, boolean IDed, boolean seen ) {
 				
 				if (!seen) {
 					icon.copy( new ItemSprite( ItemSpriteSheet.WEAPON_HOLDER + currentItemIdx, null) );
-					label.text("?????? ????????????? ????????? ?????");
+					label.text("???");
 					label.hardlight( 0x999999 );
 				} else if (!IDed) {
 					icon.copy( new ItemSprite( ItemSpriteSheet.WEAPON_HOLDER + currentItemIdx, null) );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Eye.java
Patch:
@@ -133,7 +133,8 @@ protected boolean doAttack( Char enemy ) {
 		} else {
 
 			spend( attackDelay() );
-
+			
+			beam = new Ballistica(pos, beamTarget, Ballistica.STOP_TERRAIN);
 			if (Dungeon.visible[pos] || Dungeon.visible[beam.collisionPos] ) {
 				sprite.zap( beam.collisionPos );
 				return false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/HeroSprite.java
Patch:
@@ -22,6 +22,7 @@
 package com.shatteredpixel.shatteredpixeldungeon.sprites;
 
 import android.graphics.RectF;
+
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
@@ -86,6 +87,8 @@ public void updateArmor() {
 
 		read = new Animation( 20, false );
 		read.frames( film, 19, 20, 20, 20, 20, 20, 20, 20, 20, 19 );
+		
+		idle();
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -190,7 +190,7 @@ public void create() {
 			}
 
 			DriedRose rose = Dungeon.hero.belongings.getItem( DriedRose.class );
-			if (rose != null && !rose.cursed){
+			if (rose != null && rose.isIdentified() && !rose.cursed){
 				//aim to drop 1 petal every 2 floors
 				int petalsNeeded = (int) Math.ceil((float)((Dungeon.depth / 2) - rose.droppedPetals) / 3);
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Item.java
Patch:
@@ -338,7 +338,7 @@ public Item identify() {
 		levelKnown = true;
 		cursedKnown = true;
 		
-		if (Dungeon.hero.isAlive()) {
+		if (Dungeon.hero != null && Dungeon.hero.isAlive()) {
 			Catalog.setSeen(getClass());
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndTitledMessage.java
Patch:
@@ -31,7 +31,7 @@
 public class WndTitledMessage extends Window {
 
 	protected static final int WIDTH_P    = 120;
-	protected static final int WIDTH_L    = 144;
+	protected static final int WIDTH_L    = 160;
 	protected static final int GAP	= 2;
 
 	public WndTitledMessage( Image icon, String title, String message ) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/connection/BridgeRoom.java
Patch:
@@ -39,7 +39,7 @@ public void paint(Level level) {
 		super.paint(level);
 		
 		for (Room r : neigbours){
-			if (r instanceof BridgeRoom || r instanceof WalkwayRoom){
+			if (r instanceof BridgeRoom || r instanceof RingBridgeRoom || r instanceof WalkwayRoom){
 				Rect i = intersect(r);
 				if (i.width() != 0){
 					i.left++;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/connection/WalkwayRoom.java
Patch:
@@ -39,7 +39,7 @@ public void paint(Level level) {
 		super.paint(level);
 		
 		for (Room r : neigbours){
-			if (r instanceof BridgeRoom || r instanceof WalkwayRoom){
+			if (r instanceof BridgeRoom || r instanceof RingBridgeRoom || r instanceof WalkwayRoom){
 				Rect i = intersect(r);
 				if (i.width() != 0){
 					i.left++;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/RegularLevel.java
Patch:
@@ -379,7 +379,7 @@ protected void createItems() {
 				map[cell] = Terrain.GRASS;
 				losBlocking[cell] = false;
 			}
-			drop( p, cell ).type = Heap.Type.REMAINS;
+			drop( p, cell );
 		}
 
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Rankings.java
Patch:
@@ -30,6 +30,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion;
 import com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll;
+import com.shatteredpixel.shatteredpixeldungeon.journal.Notes;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.ui.QuickSlotButton;
 import com.watabou.noosa.Game;
@@ -161,6 +162,7 @@ public void loadGameData(Record rec){
 		Dungeon.hero = null;
 		Dungeon.level = null;
 		Generator.reset();
+		Notes.reset();
 		Dungeon.quickslot.reset();
 		QuickSlotButton.reset();
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/DriedRose.java
Patch:
@@ -260,7 +260,7 @@ public static void restoreGhostHero( Level level, int pos ){
 			int ghostPos;
 			do {
 				ghostPos = pos + PathFinder.NEIGHBOURS8[Random.Int(8)];
-			} while (!Level.solid[ghostPos] || level.findMob(ghostPos) != null);
+			} while (Level.solid[ghostPos] || level.findMob(ghostPos) != null);
 			
 			heldGhost.pos = pos;
 			heldGhost = null;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/DungeonTileSheet.java
Patch:
@@ -121,6 +121,7 @@ public static boolean floorTile(int tile){
 		//floor
 		chasmStitcheable.put( Terrain.EMPTY,        CHASM_FLOOR );
 		chasmStitcheable.put( Terrain.GRASS,        CHASM_FLOOR );
+		chasmStitcheable.put( Terrain.EMBERS,       CHASM_FLOOR );
 		chasmStitcheable.put( Terrain.EMPTY_WELL,   CHASM_FLOOR );
 		chasmStitcheable.put( Terrain.HIGH_GRASS,   CHASM_FLOOR );
 		chasmStitcheable.put( Terrain.EMPTY_DECO,   CHASM_FLOOR );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM300.java
Patch:
@@ -63,7 +63,7 @@ public class DM300 extends Mob {
 		EXP = 30;
 		defenseSkill = 18;
 		
-		loot = new CapeOfThorns().identify();
+		loot = new CapeOfThorns();
 		lootChance = 0.333f;
 
 		properties.add(Property.BOSS);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Goo.java
Patch:
@@ -62,7 +62,7 @@ public class Goo extends Mob {
 		defenseSkill = 8;
 		spriteClass = GooSprite.class;
 
-		loot = new LloydsBeacon().identify();
+		loot = new LloydsBeacon();
 		lootChance = 0.333f;
 
 		properties.add(Property.BOSS);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -242,6 +242,8 @@ public void restoreFromBundle( Bundle bundle ) {
 		heroClass = HeroClass.restoreInBundle( bundle );
 		subClass = HeroSubClass.restoreInBundle( bundle );
 		
+		berserk = subClass == HeroSubClass.BERSERKER ? buff(Berserk.class) : null;
+		
 		attackSkill = bundle.getInt( ATTACK );
 		defenseSkill = bundle.getInt( DEFENSE );
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/standard/PlatformRoom.java
Patch:
@@ -33,12 +33,12 @@ public class PlatformRoom extends StandardRoom {
 	
 	@Override
 	public int minWidth() {
-		return Math.max(super.minWidth(), 5);
+		return Math.max(super.minWidth(), 6);
 	}
 	
 	@Override
 	public int minHeight() {
-		return Math.max(super.minHeight(), 5);
+		return Math.max(super.minHeight(), 6);
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Item.java
Patch:
@@ -338,7 +338,9 @@ public Item identify() {
 		levelKnown = true;
 		cursedKnown = true;
 		
-		Catalogs.setSeen(getClass());
+		if (Dungeon.hero.isAlive()) {
+			Catalogs.setSeen(getClass());
+		}
 		
 		return this;
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/Potion.java
Patch:
@@ -253,7 +253,9 @@ public void setKnown() {
 				updateQuickslot();
 			}
 			
-			Catalogs.setSeen(getClass());
+			if (Dungeon.hero.isAlive()) {
+				Catalogs.setSeen(getClass());
+			}
 		}
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/rings/Ring.java
Patch:
@@ -143,7 +143,9 @@ protected void setKnown() {
 			handler.know( this );
 		}
 		
-		Catalogs.setSeen(getClass());
+		if (Dungeon.hero.isAlive()) {
+			Catalogs.setSeen(getClass());
+		}
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java
Patch:
@@ -51,6 +51,8 @@ public class ShatteredPixelDungeon extends Game {
 	
 	public static final int v0_5_0b = 157;
 	
+	public static final int v0_6_0b = 185;
+	
 	public ShatteredPixelDungeon() {
 		super( WelcomeScene.class );
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/journal/Catalogs.java
Patch:
@@ -409,7 +409,9 @@ public static void load( ){
 			
 			for ( LinkedHashMap<Class<? extends Item>, Boolean> cat : allCatalogs){
 				for (Class<? extends Item> item : cat.keySet()){
-					cat.put(item, seen.contains( item.getSimpleName() ));
+					if (seen.contains( item.getSimpleName() )) {
+						cat.put(item, true );
+					}
 				}
 			}
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Belongings.java
Patch:
@@ -95,9 +95,9 @@ public void restoreFromBundle( Bundle bundle ) {
 			for (int i = 0; i < specialKeys.length; i++){
 				if (specialKeys[i] > 0){
 					if (i % 5 == 0){
-						Notes.add((Key) new GoldenKey(i).quantity(specialKeys[i]));
-					} else {
 						Notes.add((Key) new SkeletonKey(i).quantity(specialKeys[i]));
+					} else {
+						Notes.add((Key) new GoldenKey(i).quantity(specialKeys[i]));
 					}
 				}
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -773,7 +773,7 @@ private boolean actUnlock( HeroAction.Unlock action ) {
 				hasKey = true;
 				
 			} else if (door == Terrain.LOCKED_EXIT
-					&& Notes.keyCount(new GoldenKey(Dungeon.depth)) > 0) {
+					&& Notes.keyCount(new SkeletonKey(Dungeon.depth)) > 0) {
 
 				hasKey = true;
 				

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/DewVial.java
Patch:
@@ -53,7 +53,7 @@ public class DewVial extends Item {
 		unique = true;
 	}
 
-	private int volume = 20;
+	private int volume = 0;
 
 	private static final String VOLUME	= "volume";
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -317,7 +317,7 @@ public static void switchLevel( final Level level, int pos ) {
 		PathFinder.setMapSize(level.width(), level.height());
 		
 		Dungeon.level = level;
-		DriedRose.restoreGhostHero( level, pos + PathFinder.NEIGHBOURS8[Random.Int(8)]);
+		DriedRose.restoreGhostHero( level, pos );
 		Actor.init();
 		
 		visible = new boolean[level.length()];

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Eye.java
Patch:
@@ -198,7 +198,6 @@ public void deathGaze(){
 
 		beam = null;
 		beamTarget = -1;
-		sprite.idle();
 	}
 
 	private static final String BEAM_TARGET     = "beamTarget";

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/EyeSprite.java
Patch:
@@ -104,6 +104,7 @@ public void onComplete( Animation anim ) {
 		super.onComplete( anim );
 		
 		if (anim == zap) {
+			idle();
 			if (Actor.findChar(zapPos) != null){
 				parent.add(new Beam.DeathRay(center(), Actor.findChar(zapPos).sprite.center()));
 			} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/CharSprite.java
Patch:
@@ -444,6 +444,7 @@ public void showSleep() {
 	public void hideSleep() {
 		if (emo instanceof EmoIcon.Sleep) {
 			emo.killAndErase();
+			emo = null;
 		}
 	}
 	
@@ -462,6 +463,7 @@ public void showAlert() {
 	public void hideAlert() {
 		if (emo instanceof EmoIcon.Alert) {
 			emo.killAndErase();
+			emo = null;
 		}
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/features/Chasm.java
Patch:
@@ -111,7 +111,7 @@ public static void heroLand() {
 			public void onDeath() {
 				Badges.validateDeathFromFalling();
 				
-				Dungeon.fail( getClass() );
+				Dungeon.fail( Chasm.class );
 				GLog.n( Messages.get(Chasm.class, "ondeath") );
 			}
 		} );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Healing.java
Patch:
@@ -21,7 +21,6 @@
 
 package com.shatteredpixel.shatteredpixeldungeon.actors.buffs;
 
-import com.shatteredpixel.shatteredpixeldungeon.effects.Speck;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite;
 import com.watabou.utils.Bundle;
@@ -43,7 +42,6 @@ public boolean act(){
 		
 		target.HP = Math.min(target.HT, target.HP + healingThisTick);
 		
-		target.sprite.emitter().burst(Speck.factory(Speck.HEALING), 1 );
 		target.sprite.showStatus(CharSprite.POSITIVE, Messages.get(this, "value", healingThisTick));
 		
 		healingLeft -= healingThisTick;
@@ -70,7 +68,7 @@ public void increaseHeal( int amount ){
 	@Override
 	public void fx(boolean on) {
 		if (on) target.sprite.add( CharSprite.State.HEALING );
-		else if (target.invisible == 0) target.sprite.remove( CharSprite.State.HEALING );
+		else    target.sprite.remove( CharSprite.State.HEALING );
 	}
 	
 	private static final String LEFT = "left";

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Heap.java
Patch:
@@ -466,7 +466,6 @@ public void destroy() {
 			sprite.kill();
 		}
 		items.clear();
-		items = null;
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndSettings.java
Patch:
@@ -287,7 +287,7 @@ protected void onClick() {
 			};
 			chkImmersive.setRect( 0, slots.bottom() + GAP_SML, WIDTH, BTN_HEIGHT );
 			chkImmersive.checked(ShatteredPixelDungeon.immersed());
-			chkImmersive.enable(Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1);
+			chkImmersive.enable(Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT);
 			add(chkImmersive);
 
 			CheckBox chkFont = new CheckBox(Messages.get(this, "system_font")){

File: SPD-classes/src/main/java/com/watabou/glwrap/ScreenConfigChooser.java
Patch:
@@ -125,7 +125,7 @@ public EGLConfig chooseConfig(EGL10 egl, EGLDisplay display) {
 
 	private EGLConfig chooseConfig( EGLConfig[] configs ){
 		EGLConfig bestConfig = null;
-		int bestConfigValue = -1;
+		int bestConfigValue = Integer.MIN_VALUE;
 		for (EGLConfig curConfig : configs){
 
 			int curConfigValue = 0;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/builders/RegularBuilder.java
Patch:
@@ -56,8 +56,8 @@ public RegularBuilder setPathLength( float len, float[] jitter ){
 		return this;
 	}
 	
-	protected float[] pathTunnelChances = new float[]{2, 3, 1};
-	protected float[] branchTunnelChances = new float[]{3, 2, 1};
+	protected float[] pathTunnelChances = new float[]{2, 6, 2};
+	protected float[] branchTunnelChances = new float[]{5, 4, 1};
 	
 	public RegularBuilder setTunnelLength( float[] path, float[] branch){
 		pathTunnelChances = path;
@@ -173,7 +173,7 @@ protected static void createBranches(ArrayList<Room> rooms, ArrayList<Room> bran
 				continue;
 			}
 			
-			branchable.addAll(connectingRoomsThisBranch);
+			if (Random.Float() < 0.33f) branchable.addAll(connectingRoomsThisBranch);
 			if (r.maxConnections(Room.ALL) > 1) {
 				if (r instanceof StandardRoom){
 					for (int j = 0; j < ((StandardRoom) r).sizeCat.connectionWeight(); j++){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/FogOfWar.java
Patch:
@@ -122,7 +122,7 @@ public synchronized void updateFog(){
 	}
 
 	public synchronized void updateFogCell( int cell ){
-		updateFogArea( cell % mapWidth , cell / mapHeight, 1, 1 );
+		updateFogArea( cell % mapWidth , cell / mapWidth, 1, 1 );
 	}
 
 	public synchronized void updateFogArea(int x, int y, int w, int h){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Patch.java
Patch:
@@ -35,7 +35,7 @@ public class Patch {
 	 * The closer the fill rate is to 0.5f the weaker this pushing will be.
 	 *
 	 * forceFillRate adjusts the algorithm to force fill rate to be consistent despite clustering.
-	 * this is achived by firstly pulling the initial fill value towards 0.5f
+	 * this is achieved by firstly pulling the initial fill value towards 0.5f
 	 * and then by manually filling in or emptying cells after clustering, until the fill rate is
 	 * achieved. This is tracked with the fillDiff variable.
 	*/
@@ -114,7 +114,8 @@ public static boolean[] generate( int w, int h, float fill, int clustering, bool
 			off = tmp;
 		}
 
-		if (forceFillRate) {
+		//even if force fill rate is on, only do this if we have some kind of border
+		if (forceFillRate && Math.min(w, h) > 2) {
 			int[] neighbours = new int[]{-w - 1, -w, -w + 1, -1, 0, +1, +w - 1, +w, +w + 1};
 			boolean growing = fillDiff < 0;
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/MagicWellRoom.java
Patch:
@@ -54,7 +54,7 @@ public void paint( Level level ) {
 			(Class<? extends WellWater>)Random.element( WATERS );
 			
 		if (waterClass == WaterOfTransmutation.class) {
-			SpecialRoom.disableGaranteedWell();
+			SpecialRoom.disableGuaranteedWell();
 		}
 		
 		WellWater water = (WellWater)level.blobs.get( waterClass );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/builders/RegularBuilder.java
Patch:
@@ -23,6 +23,7 @@
 
 import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room;
 import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.connection.ConnectionRoom;
+import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.ShopRoom;
 import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.EntranceRoom;
 import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.ExitRoom;
 import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.standard.StandardRoom;
@@ -89,6 +90,8 @@ protected void setupRooms(ArrayList<Room> rooms){
 				entrance = r;
 			} else if (r instanceof ExitRoom) {
 				exit = r;
+			} else if (r instanceof ShopRoom && r.maxConnections(Room.ALL) == 1){
+				shop = r;
 			} else if (r.maxConnections(Room.ALL) > 1){
 				multiConnections.add(r);
 			} else if (r.maxConnections(Room.ALL) == 1){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/DungeonTileSheet.java
Patch:
@@ -129,6 +129,8 @@ public static boolean floorTile(int tile){
 		chasmStitcheable.put( Terrain.STATUE,       CHASM_FLOOR );
 		chasmStitcheable.put( Terrain.SECRET_TRAP,  CHASM_FLOOR );
 		chasmStitcheable.put( Terrain.TRAP,         CHASM_FLOOR );
+		chasmStitcheable.put( Terrain.BOOKSHELF,    CHASM_FLOOR );
+		chasmStitcheable.put( Terrain.BARRICADE,    CHASM_FLOOR );
 
 		//special floor
 		chasmStitcheable.put( Terrain.EMPTY_SP,     CHASM_FLOOR_SP );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/Room.java
Patch:
@@ -139,8 +139,8 @@ public Point random() {
 	}
 	
 	public Point random( int m ) {
-		return new Point( Random.Int( left + m, right - m ),
-				Random.Int( top + m, bottom - m ));
+		return new Point( Random.IntRange( left + m, right - m ),
+				Random.IntRange( top + m, bottom - m ));
 	}
 	
 	public boolean inside( Point p ) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/HallsBossLevel.java
Patch:
@@ -167,10 +167,10 @@ protected void createItems() {
 	
 	@Override
 	public int randomRespawnCell() {
-		if (entrance == -1) return entrance;
-		int cell = entrance + PathFinder.NEIGHBOURS8[Random.Int(8)];
+		int pos = entrance == -1 ? stairs : entrance;
+		int cell = pos + PathFinder.NEIGHBOURS8[Random.Int(8)];
 		while (!passable[cell]){
-			cell = entrance + PathFinder.NEIGHBOURS8[Random.Int(8)];
+			cell = pos + PathFinder.NEIGHBOURS8[Random.Int(8)];
 		}
 		return cell;
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/RegularLevel.java
Patch:
@@ -79,7 +79,7 @@ protected boolean build() {
 				r.neigbours.clear();
 				r.connected.clear();
 			}
-			rooms = builder.build(initRooms);
+			rooms = builder.build((ArrayList<Room>)initRooms.clone());
 		} while (rooms == null);
 		
 		return painter().paint(this, rooms);
@@ -382,6 +382,7 @@ public int fallCell( boolean fallIntoPit ) {
 					} while (traps.get(result) != null
 							|| findMob(result) != null
 							|| heaps.get(result) != null);
+					return result;
 				}
 			}
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
Patch:
@@ -259,9 +259,7 @@ public static void spawnWandmaker( PrisonLevel level, Room room, Collection<Room
 				Wandmaker npc = new Wandmaker();
 				do {
 					npc.pos = level.pointToCell(room.random());
-					//Wandmaker must never spawn in the center.
-					//If he does, and the room is 3x3, there is no room for the stairs.
-				} while (npc.pos == level.pointToCell(room.center()));
+				} while (npc.pos == level.entrance);
 				level.mobs.add( npc );
 
 				spawned = true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -295,6 +295,8 @@ public void setSize(int w, int h){
 		avoid		= new boolean[length()];
 		water		= new boolean[length()];
 		pit			= new boolean[length()];
+		
+		PathFinder.setMapSize(w, h);
 	}
 	
 	public void reset() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/Potion.java
Patch:
@@ -249,6 +249,7 @@ public void setKnown() {
 		if (!ownedByFruit) {
 			if (!isKnown()) {
 				handler.know(this);
+				updateQuickslot();
 			}
 
 			Badges.validateAllPotionsIdentified();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/Scroll.java
Patch:
@@ -162,6 +162,7 @@ public boolean isKnown() {
 	public void setKnown() {
 		if (!isKnown() && !ownedByBook) {
 			handler.know( this );
+			updateQuickslot();
 		}
 		
 		Badges.validateAllScrollsIdentified();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/GridTileMap.java
Patch:
@@ -43,7 +43,7 @@ public synchronized void updateMap() {
 
 	@Override
 	protected int getTileVisual(int pos, int tile, boolean flat) {
-		if (gridSetting == -1 || pos % 2 != (pos / mapWidth) % 2){
+		if (gridSetting == -1 || (pos % mapWidth) % 2 != (pos / mapWidth) % 2){
 			return -1;
 		} else if (DungeonTileSheet.floorTile(tile) || tile == Terrain.HIGH_GRASS) {
 			return gridSetting;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Rankings.java
Patch:
@@ -174,6 +174,8 @@ public void loadGameData(Record rec){
 		Dungeon.hero = (Hero)data.get(HERO);
 
 		Statistics.restoreFromBundle(data.getBundle(STATS));
+		
+		Dungeon.challenges = 0;
 
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/IconTitle.java
Patch:
@@ -81,6 +81,7 @@ protected void layout() {
 
 		imIcon.x = x + (Math.max(0, 8 - imIcon.width()/2));
 		imIcon.y = y + (Math.max(0, 8 - imIcon.height()/2));
+		PixelScene.align(imIcon);
 
 		int imWidth = (int)Math.max(imIcon.width(), 16);
 		int imHeight = (int)Math.max(imIcon.height(), 16);

File: SPD-classes/src/main/java/com/watabou/glwrap/ScreenConfigChooser.java
Patch:
@@ -138,7 +138,6 @@ private EGLConfig chooseConfig( EGLConfig[] configs ){
 					} else {
 						configVal += val;
 					}
-					break;
 				} else if (attribPrefs[i] == AT_MOST) {
 					if (attribVals[i] < val) {
 						configVal = -1;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonBossLevel.java
Patch:
@@ -303,11 +303,11 @@ public void progress(){
 				HealthIndicator.instance.target(null);
 				tengu.sprite.kill();
 
-				Room maze = new Room();
+				Room maze = new MazeRoom();
 				maze.set(10, 1, 31, 29);
 				maze.connected.put(null, new Room.Door(10, 2));
 				maze.connected.put(maze, new Room.Door(20, 29));
-				MazeRoom.paint(this, maze);
+				maze.paint(this);
 				buildFlagMaps();
 				cleanWalls();
 				GameScene.resetMap();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/SewerBossLevel.java
Patch:
@@ -32,7 +32,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.levels.builders.Builder;
 import com.shatteredpixel.shatteredpixeldungeon.levels.builders.LegacyBuilder;
 import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room;
-import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room.Type;
+import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.StandardRoom;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.watabou.noosa.Group;
@@ -128,7 +128,7 @@ protected void createMobs() {
 		Room room;
 		do {
 			room = Random.element(rooms);
-		} while (room.type != Type.STANDARD);
+		} while (!(room instanceof StandardRoom));
 		mob.pos = pointToCell(room.random());
 		mobs.add( mob );
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/features/Chasm.java
Patch:
@@ -33,6 +33,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass;
 import com.shatteredpixel.shatteredpixeldungeon.levels.RegularLevel;
 import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room;
+import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.WeakFloorRoom;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.InterlevelScene;
@@ -82,7 +83,7 @@ public static void heroFall( int pos ) {
 			InterlevelScene.mode = InterlevelScene.Mode.FALL;
 			if (Dungeon.level instanceof RegularLevel) {
 				Room room = ((RegularLevel)Dungeon.level).room( pos );
-				InterlevelScene.fallIntoPit = room != null && room.type == Room.Type.WEAK_FLOOR;
+				InterlevelScene.fallIntoPit = room != null && room instanceof WeakFloorRoom;
 			} else {
 				InterlevelScene.fallIntoPit = false;
 			}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/AltarRoom.java
Patch:
@@ -31,7 +31,7 @@
 
 public class AltarRoom extends Room {
 
-	public static void paint( Level level, Room room ) {
+	public void paint( Level level, Room room ) {
 		
 		Painter.fill( level, room, Terrain.WALL );
 		Painter.fill( level, room, 1, Dungeon.bossLevel( Dungeon.depth + 1 ) ? Terrain.HIGH_GRASS : Terrain.CHASM );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/ArmoryRoom.java
Patch:
@@ -34,7 +34,7 @@
 
 public class ArmoryRoom extends Room {
 
-	public static void paint( Level level, Room room ) {
+	public void paint( Level level, Room room ) {
 		
 		Painter.fill( level, room, Terrain.WALL );
 		Painter.fill( level, room, 1, Terrain.EMPTY );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/BlacksmithRoom.java
Patch:
@@ -32,7 +32,7 @@
 
 public class BlacksmithRoom extends Room {
 
-	public static void paint( Level level, Room room ) {
+	public void paint( Level level, Room room ) {
 
 		Painter.fill( level, room, Terrain.WALL );
 		Painter.fill( level, room, 1, Terrain.TRAP );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/CryptRoom.java
Patch:
@@ -34,7 +34,7 @@
 
 public class CryptRoom extends Room {
 
-	public static void paint( Level level, Room room ) {
+	public void paint( Level level, Room room ) {
 		
 		Painter.fill( level, room, Terrain.WALL );
 		Painter.fill( level, room, 1, Terrain.EMPTY );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/EntranceRoom.java
Patch:
@@ -27,7 +27,7 @@
 
 public class EntranceRoom extends Room {
 
-	public static void paint( Level level, Room room ) {
+	public void paint( Level level, Room room ) {
 		
 		Painter.fill( level, room, Terrain.WALL );
 		Painter.fill( level, room, 1, Terrain.EMPTY );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/ExitRoom.java
Patch:
@@ -27,7 +27,7 @@
 
 public class ExitRoom extends Room {
 
-	public static void paint( Level level, Room room ) {
+	public void paint( Level level, Room room ) {
 
 		Painter.fill( level, room, Terrain.WALL );
 		Painter.fill( level, room, 1, Terrain.EMPTY );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/GardenRoom.java
Patch:
@@ -33,7 +33,7 @@
 
 public class GardenRoom extends Room {
 
-	public static void paint( Level level, Room room ) {
+	public void paint( Level level, Room room ) {
 		
 		Painter.fill( level, room, Terrain.WALL );
 		Painter.fill( level, room, 1, Terrain.HIGH_GRASS );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/LaboratoryRoom.java
Patch:
@@ -35,7 +35,7 @@
 
 public class LaboratoryRoom extends Room {
 
-	public static void paint( Level level, Room room ) {
+	public void paint( Level level, Room room ) {
 		
 		Painter.fill( level, room, Terrain.WALL );
 		Painter.fill( level, room, 1, Terrain.EMPTY_SP );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/LibraryRoom.java
Patch:
@@ -36,7 +36,7 @@
 
 public class LibraryRoom extends Room {
 
-	public static void paint( Level level, Room room ) {
+	public void paint( Level level, Room room ) {
 		
 		Painter.fill( level, room, Terrain.WALL );
 		Painter.fill( level, room, 1, Terrain.EMPTY_SP );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/MagicWellRoom.java
Patch:
@@ -38,7 +38,7 @@ public class MagicWellRoom extends Room {
 	private static final Class<?>[] WATERS =
 		{WaterOfAwareness.class, WaterOfHealth.class, WaterOfTransmutation.class};
 	
-	public static void paint( Level level, Room room ) {
+	public void paint( Level level, Room room ) {
 
 		Painter.fill( level, room, Terrain.WALL );
 		Painter.fill( level, room, 1, Terrain.EMPTY );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/MassGraveRoom.java
Patch:
@@ -41,7 +41,7 @@
 
 public class MassGraveRoom extends Room {
 
-	public static void paint( Level level, Room room){
+	public void paint( Level level, Room room){
 
 		Room.Door entrance = room.entrance();
 		entrance.set(Room.Door.Type.BARRICADE);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/MazeRoom.java
Patch:
@@ -28,7 +28,7 @@
 
 public class MazeRoom extends Room {
 
-	public static void paint( Level level, Room room ) {
+	public void paint( Level level, Room room ) {
 		Painter.fill(level, room, 1, Terrain.EMPTY);
 
 		//true = space, false = wall

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/PassageRoom.java
Patch:
@@ -33,7 +33,7 @@ public class PassageRoom extends Room {
 	private static int pasWidth;
 	private static int pasHeight;
 	
-	public static void paint( Level level, Room room ) {
+	public void paint( Level level, Room room ) {
 		
 		pasWidth = room.width() - 2;
 		pasHeight = room.height() - 2;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/PitRoom.java
Patch:
@@ -34,7 +34,7 @@
 
 public class PitRoom extends Room {
 
-	public static void paint( Level level, Room room ) {
+	public void paint( Level level, Room room ) {
 		
 		Painter.fill( level, room, Terrain.WALL );
 		Painter.fill( level, room, 1, Terrain.EMPTY );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/PoolRoom.java
Patch:
@@ -37,7 +37,7 @@ public class PoolRoom extends Room {
 
 	private static final int NPIRANHAS	= 3;
 	
-	public static void paint( Level level, Room room ) {
+	public void paint( Level level, Room room ) {
 		
 		Painter.fill( level, room, Terrain.WALL );
 		Painter.fill( level, room, 1, Terrain.WATER );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/RatKingRoom.java
Patch:
@@ -32,7 +32,7 @@
 
 public class RatKingRoom extends Room {
 
-	public static void paint( Level level, Room room ) {
+	public void paint( Level level, Room room ) {
 
 		Painter.fill( level, room, Terrain.WALL );
 		Painter.fill( level, room, 1, Terrain.EMPTY_SP );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/RitualSiteRoom.java
Patch:
@@ -32,7 +32,7 @@
 
 public class RitualSiteRoom extends Room {
 
-	public static void paint( Level level, Room room) {
+	public void paint( Level level, Room room) {
 
 		for (Room.Door door : room.connected.values()) {
 			door.set( Room.Door.Type.REGULAR );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/RotGardenRoom.java
Patch:
@@ -34,7 +34,7 @@
 
 public class RotGardenRoom extends Room {
 
-	public static void paint( Level level, Room room ) {
+	public void paint( Level level, Room room ) {
 
 		Room.Door entrance = room.entrance();
 		entrance.set(Room.Door.Type.LOCKED);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/ShopRoom.java
Patch:
@@ -85,7 +85,7 @@ public class ShopRoom extends Room {
 
 	private static ArrayList<Item> itemsToSpawn;
 	
-	public static void paint( Level level, Room room ) {
+	public void paint( Level level, Room room ) {
 		
 		Painter.fill( level, room, Terrain.WALL );
 		Painter.fill( level, room, 1, Terrain.EMPTY_SP );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/StandardRoom.java
Patch:
@@ -35,7 +35,7 @@
 
 public class StandardRoom extends Room {
 
-	public static void paint( Level level, Room room ) {
+	public void paint( Level level, Room room ) {
 		
 		Painter.fill( level, room, Terrain.WALL );
 		for (Room.Door door : room.connected.values()) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/StatueRoom.java
Patch:
@@ -31,7 +31,7 @@
 
 public class StatueRoom extends Room {
 
-	public static void paint( Level level, Room room ) {
+	public void paint( Level level, Room room ) {
 
 		Painter.fill( level, room, Terrain.WALL );
 		Painter.fill( level, room, 1, Terrain.EMPTY );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/StorageRoom.java
Patch:
@@ -32,7 +32,7 @@
 
 public class StorageRoom extends Room {
 
-	public static void paint( Level level, Room room ) {
+	public void paint( Level level, Room room ) {
 		
 		final int floor = Terrain.EMPTY_SP;
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/TrapsRoom.java
Patch:
@@ -50,7 +50,7 @@
 
 public class TrapsRoom extends Room {
 
-	public static void paint( Level level, Room room ) {
+	public void paint( Level level, Room room ) {
 		 
 		Painter.fill( level, room, Terrain.WALL );
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/TreasuryRoom.java
Patch:
@@ -32,7 +32,7 @@
 
 public class TreasuryRoom extends Room {
 
-	public static void paint( Level level, Room room ) {
+	public void paint( Level level, Room room ) {
 		
 		Painter.fill( level, room, Terrain.WALL );
 		Painter.fill( level, room, 1, Terrain.EMPTY );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/TunnelRoom.java
Patch:
@@ -28,7 +28,7 @@
 
 public class TunnelRoom extends Room {
 
-	public static void paint( Level level, Room room ) {
+	public void paint( Level level, Room room ) {
 		
 		int floor = level.tunnelTile();
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/VaultRoom.java
Patch:
@@ -35,7 +35,7 @@
 
 public class VaultRoom extends Room {
 
-	public static void paint( Level level, Room room ) {
+	public void paint( Level level, Room room ) {
 
 		Painter.fill( level, room, Terrain.WALL );
 		Painter.fill( level, room, 1, Terrain.EMPTY_SP );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/WeakFloorRoom.java
Patch:
@@ -33,7 +33,7 @@
 
 public class WeakFloorRoom extends Room {
 
-	public static void paint( Level level, Room room ) {
+	public void paint( Level level, Room room ) {
 		
 		Painter.fill( level, room, Terrain.WALL );
 		Painter.fill( level, room, 1, Terrain.CHASM );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -51,9 +51,9 @@
 import com.shatteredpixel.shatteredpixeldungeon.levels.Level;
 import com.shatteredpixel.shatteredpixeldungeon.levels.PrisonBossLevel;
 import com.shatteredpixel.shatteredpixeldungeon.levels.PrisonLevel;
-import com.shatteredpixel.shatteredpixeldungeon.levels.Room;
 import com.shatteredpixel.shatteredpixeldungeon.levels.SewerBossLevel;
 import com.shatteredpixel.shatteredpixeldungeon.levels.SewerLevel;
+import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.StartScene;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Blacksmith.java
Patch:
@@ -32,8 +32,8 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.quest.DarkGold;
 import com.shatteredpixel.shatteredpixeldungeon.items.quest.Pickaxe;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfUpgrade;
-import com.shatteredpixel.shatteredpixeldungeon.levels.Room;
-import com.shatteredpixel.shatteredpixeldungeon.levels.Room.Type;
+import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room;
+import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room.Type;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.BlacksmithSprite;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
Patch:
@@ -33,8 +33,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.quest.Embers;
 import com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand;
 import com.shatteredpixel.shatteredpixeldungeon.levels.PrisonLevel;
-import com.shatteredpixel.shatteredpixeldungeon.levels.Room;
-import com.shatteredpixel.shatteredpixeldungeon.levels.Terrain;
+import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.plants.Rotberry;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CavesBossLevel.java
Patch:
@@ -33,7 +33,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.Heap;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.keys.SkeletonKey;
-import com.shatteredpixel.shatteredpixeldungeon.levels.painters.Painter;
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.ToxicTrap;
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CityBossLevel.java
Patch:
@@ -31,7 +31,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.Heap;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.keys.SkeletonKey;
-import com.shatteredpixel.shatteredpixeldungeon.levels.painters.Painter;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.tiles.DungeonTileSheet;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/HallsBossLevel.java
Patch:
@@ -32,7 +32,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.Heap;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.keys.SkeletonKey;
-import com.shatteredpixel.shatteredpixeldungeon.levels.painters.Painter;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.watabou.noosa.Group;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/LastLevel.java
Patch:
@@ -24,7 +24,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.items.Amulet;
-import com.shatteredpixel.shatteredpixeldungeon.levels.painters.Painter;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.watabou.noosa.Group;
 import com.watabou.utils.Bundle;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/LastShopLevel.java
Patch:
@@ -27,7 +27,8 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Imp;
 import com.shatteredpixel.shatteredpixeldungeon.items.Heap;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
-import com.shatteredpixel.shatteredpixeldungeon.levels.Room.Type;
+import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room;
+import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room.Type;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.watabou.noosa.Group;
 import com.watabou.utils.Graph;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -66,8 +66,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.levels.features.Chasm;
 import com.shatteredpixel.shatteredpixeldungeon.levels.features.Door;
 import com.shatteredpixel.shatteredpixeldungeon.levels.features.HighGrass;
-import com.shatteredpixel.shatteredpixeldungeon.levels.painters.MassGravePainter;
-import com.shatteredpixel.shatteredpixeldungeon.levels.painters.Painter;
+import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.MassGraveRoom;
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap;
 import com.shatteredpixel.shatteredpixeldungeon.mechanics.ShadowCaster;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
@@ -369,7 +368,7 @@ public void restoreFromBundle( Bundle bundle ) {
 			CustomTiledVisual vis = (CustomTiledVisual)p;
 			//for compatibilities with pre-0.5.0b saves
 			//extends one of the bones visuals and discards the rest
-			if (vis instanceof MassGravePainter.Bones && vis.tileH == 0){
+			if (vis instanceof MassGraveRoom.Bones && vis.tileH == 0){
 				int cell = vis.tileX + vis.tileY*width;
 				if (map[cell] == Terrain.EMPTY_SP &&
 						DungeonTileSheet.wallStitcheable(map[cell - width]) &&

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Painter.java
Patch:
@@ -19,10 +19,9 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>
  */
 
-package com.shatteredpixel.shatteredpixeldungeon.levels.painters;
+package com.shatteredpixel.shatteredpixeldungeon.levels;
 
-import com.shatteredpixel.shatteredpixeldungeon.levels.Level;
-import com.shatteredpixel.shatteredpixeldungeon.levels.Room;
+import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room;
 import com.watabou.utils.Point;
 import com.watabou.utils.Rect;
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonBossLevel.java
Patch:
@@ -33,7 +33,8 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.Heap;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.keys.IronKey;
-import com.shatteredpixel.shatteredpixeldungeon.levels.painters.MazePainter;
+import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.MazeRoom;
+import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room;
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.SpearTrap;
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
@@ -306,7 +307,7 @@ public void progress(){
 				maze.set(10, 1, 31, 29);
 				maze.connected.put(null, new Room.Door(10, 2));
 				maze.connected.put(maze, new Room.Door(20, 29));
-				MazePainter.paint(this, maze);
+				MazeRoom.paint(this, maze);
 				buildFlagMaps();
 				cleanWalls();
 				GameScene.resetMap();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonLevel.java
Patch:
@@ -23,11 +23,11 @@
 
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
-import com.shatteredpixel.shatteredpixeldungeon.tiles.DungeonTilemap;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Wandmaker;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Halo;
 import com.shatteredpixel.shatteredpixeldungeon.effects.particles.FlameParticle;
-import com.shatteredpixel.shatteredpixeldungeon.levels.Room.Type;
+import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room;
+import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room.Type;
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.AlarmTrap;
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.ChillingTrap;
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.ConfusionTrap;
@@ -44,6 +44,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.TeleportationTrap;
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.ToxicTrap;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
+import com.shatteredpixel.shatteredpixeldungeon.tiles.DungeonTilemap;
 import com.watabou.noosa.Group;
 import com.watabou.noosa.particles.Emitter;
 import com.watabou.utils.PointF;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/SewerBossLevel.java
Patch:
@@ -29,7 +29,8 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
 import com.shatteredpixel.shatteredpixeldungeon.items.Heap;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
-import com.shatteredpixel.shatteredpixeldungeon.levels.Room.Type;
+import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room;
+import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room.Type;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.watabou.noosa.Group;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/SewerLevel.java
Patch:
@@ -23,10 +23,10 @@
 
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
-import com.shatteredpixel.shatteredpixeldungeon.tiles.DungeonTilemap;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Ghost;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Ripple;
 import com.shatteredpixel.shatteredpixeldungeon.items.DewVial;
+import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room;
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.AlarmTrap;
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.ChillingTrap;
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.FlockTrap;
@@ -37,6 +37,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.WornTrap;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
+import com.shatteredpixel.shatteredpixeldungeon.tiles.DungeonTilemap;
 import com.watabou.noosa.Game;
 import com.watabou.noosa.Group;
 import com.watabou.noosa.particles.Emitter;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/features/Chasm.java
Patch:
@@ -32,7 +32,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.DriedRose;
 import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.TimekeepersHourglass;
 import com.shatteredpixel.shatteredpixeldungeon.levels.RegularLevel;
-import com.shatteredpixel.shatteredpixeldungeon.levels.Room;
+import com.shatteredpixel.shatteredpixeldungeon.levels.rooms.Room;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.InterlevelScene;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Berserk.java
Patch:
@@ -120,7 +120,7 @@ public boolean berserking(){
 
 		}
 
-		return state == State.BERSERK && target.SHLD > 0;
+		return state == State.BERSERK;
 	}
 
 	public void recover(float percent){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1403,7 +1403,8 @@ public static void reallyDie( Object cause ) {
 	public boolean isAlive() {
 		if (subClass == HeroSubClass.BERSERKER
 				&& berserk != null
-				&& berserk.berserking()){
+				&& berserk.berserking()
+				&& SHLD > 0){
 			return true;
 		}
 		return super.isAlive();

File: SPD-classes/src/main/java/com/watabou/noosa/Game.java
Patch:
@@ -45,6 +45,7 @@
 import android.opengl.GLSurfaceView;
 import android.os.Build;
 import android.os.Bundle;
+import android.os.SystemClock;
 import android.os.Vibrator;
 import android.util.DisplayMetrics;
 import android.view.KeyEvent;
@@ -223,7 +224,7 @@ public void onDrawFrame( GL10 gl ) {
 		}
 		
 		SystemTime.tick();
-		long rightNow = SystemTime.now;
+		long rightNow = SystemClock.elapsedRealtime();
 		step = (now == 0 ? 0 : rightNow - now);
 		now = rightNow;
 		

File: SPD-classes/src/main/java/com/watabou/noosa/RenderedText.java
Patch:
@@ -190,7 +190,7 @@ private static synchronized void render(RenderedText r){
 
 			r.texture = new SmartTexture(bitmap, Texture.NEAREST, Texture.CLAMP, true);
 
-			RectF rect = r.texture.uvRect(0, 0, (int)r.width, (int)r.height);
+			RectF rect = r.texture.uvRect(0, 0, r.width, r.height);
 			r.frame(rect);
 
 			r.cache = new CachedText();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/ItemSpriteSheet.java
Patch:
@@ -151,7 +151,7 @@ private static int xy(int x, int y){
 	public static final int WHIP            = WEP_TIER3+5;
 	static{
 		assignItemRect(SWORD,           14, 14);
-		assignItemRect(MACE,            15, 14);
+		assignItemRect(MACE,            15, 15);
 		assignItemRect(SCIMITAR,        13, 16);
 		assignItemRect(ROUND_SHIELD,    16, 16);
 		assignItemRect(SAI,             16, 16);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Imp.java
Patch:
@@ -183,7 +183,7 @@ public static void spawn( CityLevel level ) {
 				Imp npc = new Imp();
 				do {
 					npc.pos = level.randomRespawnCell();
-				} while (npc.pos == -1 || level.heaps.get( npc.pos ) != null);
+				} while (npc.pos == -1 || level.heaps.get( npc.pos ) != null || level.findMob( npc.pos ) != null);
 				level.mobs.add( npc );
 				
 				spawned = true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Heap.java
Patch:
@@ -163,6 +163,7 @@ public Item pickUp() {
 			destroy();
 		} else if (sprite != null) {
 			sprite.view( image(), glowing() );
+			sprite.place( pos );
 		}
 		
 		return item;
@@ -198,6 +199,7 @@ public void drop( Item item ) {
 				sprite.view( items.peek() );
 			else
 				sprite.view( image(), glowing() );
+			sprite.place( pos );
 		}
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/BuffIndicator.java
Patch:
@@ -151,6 +151,8 @@ protected void onComplete() {
 						image.killAndErase();
 					}
 				} );
+
+				icons.get( key ).destroy();
 			}
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/MissileSprite.java
Patch:
@@ -101,7 +101,7 @@ private void setup( PointF from, PointF to, int image, Callback listener ){
 				|| image == ItemSpriteSheet.CURARE_DART  || image == ItemSpriteSheet.JAVELIN) {
 
 			angularSpeed = 0;
-			angle = 135 - (float)(Math.atan2( d.y, d.x ) / 3.1415926 * 180);
+			angle = 135 - (float)(Math.atan2( d.x, d.y ) / 3.1415926 * 180);
 
 		} else {
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/DungeonTileSheet.java
Patch:
@@ -104,7 +104,7 @@ public static int stitchWaterTile(int top, int right, int bottom, int left){
 
 
 	public static boolean floorTile(int tile){
-		return directVisuals.get(tile, CHASM) < CHASM;
+		return tile == Terrain.WATER || directVisuals.get(tile, CHASM) < CHASM;
 	}
 
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Item.java
Patch:
@@ -516,7 +516,7 @@ public void call() {
 		} else {
 			((MissileSprite) user.sprite.parent.recycle(MissileSprite.class)).
 					reset(user.sprite,
-							dst,
+							cell,
 							this,
 							new Callback() {
 						@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/WaterOfAwareness.java
Patch:
@@ -45,7 +45,7 @@ public class WaterOfAwareness extends WellWater {
 	protected boolean affectHero( Hero hero ) {
 		
 		Sample.INSTANCE.play( Assets.SND_DRINK );
-		emitter.parent.add( new Identification( DungeonTilemap.tileCenterToWorld( pos ) ) );
+		emitter.parent.add( new Identification( hero.sprite.center() ) );
 		
 		hero.belongings.observe();
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Guard.java
Patch:
@@ -108,7 +108,7 @@ private boolean chain(int target){
 			} else {
 				final int newPosFinal = newPos;
 				yell( Messages.get(this, "scorpion") );
-				sprite.parent.add(new Chains(pos, enemy.pos, new Callback() {
+				sprite.parent.add(new Chains(sprite.center(), enemy.sprite.center(), new Callback() {
 					public void call() {
 						Actor.addDelayed(new Pushing(enemy, enemy.pos, newPosFinal, new Callback(){
 							public void call() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/EtherealChains.java
Patch:
@@ -35,6 +35,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.scenes.CellSelector;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
+import com.shatteredpixel.shatteredpixeldungeon.tiles.DungeonTilemap;
 import com.shatteredpixel.shatteredpixeldungeon.ui.QuickSlotButton;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
 import com.watabou.utils.Callback;
@@ -132,7 +133,7 @@ public void onSelect(Integer target) {
 							updateQuickslot();
 						}
 						curUser.busy();
-						curUser.sprite.parent.add(new Chains(curUser.pos, affected.pos, new Callback() {
+						curUser.sprite.parent.add(new Chains(curUser.sprite.center(), affected.sprite.center(), new Callback() {
 							public void call() {
 								Actor.add(new Pushing(affected, affected.pos, newMobPos, new Callback() {
 									public void call() {
@@ -169,7 +170,7 @@ public void call() {
 							updateQuickslot();
 						}
 						curUser.busy();
-						curUser.sprite.parent.add(new Chains(curUser.pos, target, new Callback() {
+						curUser.sprite.parent.add(new Chains(curUser.sprite.center(), DungeonTilemap.tileCenterToWorld(target), new Callback() {
 							public void call() {
 								Actor.add(new Pushing(curUser, curUser.pos, newHeroPos, new Callback() {
 									public void call() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/DungeonTileSheet.java
Patch:
@@ -104,7 +104,7 @@ public static int stitchWaterTile(int top, int right, int bottom, int left){
 
 
 	public static boolean floorTile(int tile){
-		return tile < CHASM;
+		return directVisuals.get(tile, CHASM) < CHASM;
 	}
 
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/FogOfWar.java
Patch:
@@ -242,7 +242,7 @@ private void updateTexture( boolean[] visible, boolean[] visited, boolean[] mapp
 			}
 		}
 
-		if (updating.width() == mapWidth && updating.height() == mapWidth)
+		if (updating.width() == mapWidth && updating.height() == mapHeight)
 			fog.update();
 		else
 			fog.update(updating.top * PIX_PER_TILE, updating.bottom * PIX_PER_TILE);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Patch.java
Patch:
@@ -28,7 +28,7 @@ public class Patch {
 	public static boolean[] generate( Level level, float seed, int nGen ) {
 		
 		int w = level.width();
-		int h = level.width();
+		int h = level.height();
 
 		boolean[] cur = new boolean[level.length()];
 		boolean[] off = new boolean[level.length()];

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/FogOfWar.java
Patch:
@@ -120,7 +120,7 @@ public synchronized void updateFog(){
 	}
 
 	public synchronized void updateFogCell( int cell ){
-		updated.set( cell % mapWidth , cell / mapHeight, (cell % mapWidth)+1, (cell / mapHeight)+1 );
+		updateFogArea( cell % mapWidth , cell / mapHeight, 1, 1 );
 	}
 
 	public synchronized void updateFogArea(int x, int y, int w, int h){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/CharSprite.java
Patch:
@@ -394,6 +394,9 @@ public void update() {
 		if (chilled != null) {
 			chilled.visible = visible;
 		}
+		if (marked != null) {
+			marked.visible = visible;
+		}
 		if (sleeping) {
 			showSleep();
 		} else {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/quest/Pickaxe.java
Patch:
@@ -56,6 +56,7 @@ public class Pickaxe extends Weapon {
 		image = ItemSpriteSheet.PICKAXE;
 		
 		unique = true;
+		bones = false;
 		
 		defaultAction = AC_MINE;
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/DungeonWallsTilemap.java
Patch:
@@ -92,6 +92,6 @@ public boolean overlapsScreenPoint( int x, int y ) {
 
 	@Override
 	protected boolean needsRender(int pos) {
-		return data[pos] != -1 && Level.discoverable[pos];
+		return data[pos] != -1;
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/tiles/DungeonTileSheet.java
Patch:
@@ -176,7 +176,7 @@ public static int stitchChasmTile(int above){
 	 **********************************************************************/
 
 	private static final int RAISED_WALLS           =                       xy(1, 8);   //32 slots
-	//+1 for walls to the right, +2 for walls to the left
+	//+1 for open to the right, +2 for open to the left
 	public static final int RAISED_WALL             = RAISED_WALLS+0;
 	public static final int RAISED_WALL_DECO        = RAISED_WALLS+4;
 	//wall that appears behind a top/bottom doorway
@@ -200,8 +200,8 @@ public static int getRaisedWallTile(int tile, int pos, int right, int below, int
 
 		result = getVisualWithAlts(result, pos);
 
-		if (wallStitcheable.contains(right)) result += 1;
-		if (wallStitcheable.contains(left)) result += 2;
+		if (!wallStitcheable.contains(right)) result += 1;
+		if (!wallStitcheable.contains(left)) result += 2;
 		return result;
 	}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/AttackIndicator.java
Patch:
@@ -73,7 +73,7 @@ protected void layout() {
 	}
 	
 	@Override
-	public void update() {
+	public synchronized void update() {
 		super.update();
 
 		if (!bg.visible){
@@ -95,7 +95,7 @@ public void update() {
 		}
 	}
 	
-	private void checkEnemies() {
+	private synchronized void checkEnemies() {
 
 		candidates.clear();
 		int v = Dungeon.hero.visibleEnemies();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Berserk.java
Patch:
@@ -119,7 +119,7 @@ public boolean berserking(){
 
 		}
 
-		return state == State.BERSERK;
+		return state == State.BERSERK && target.SHLD > 0;
 	}
 
 	public void recover(float percent){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/curses/Stench.java
Patch:
@@ -37,7 +37,7 @@ public int proc(Armor armor, Char attacker, Char defender, int damage) {
 
 		if ( Random.Int( 8 ) == 0) {
 
-			GameScene.add( Blob.seed( attacker.pos, 250, ToxicGas.class ) );
+			GameScene.add( Blob.seed( defender.pos, 250, ToxicGas.class ) );
 
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -556,8 +556,8 @@ private void addMobSprite( Mob mob ) {
 	private synchronized void prompt( String text ) {
 		
 		if (prompt != null) {
-			prompt.destroy();
 			prompt.killAndErase();
+			prompt.destroy();
 			prompt = null;
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/Blob.java
Patch:
@@ -245,7 +245,7 @@ public static<T extends Blob> T seed( int cell, int amount, Class<T> type ) {
 
 	public static int volumeAt( int cell, Class<? extends Blob> type){
 		Blob gas = Dungeon.level.blobs.get( type );
-		if (gas == null) {
+		if (gas == null || gas.volume == 0) {
 			return 0;
 		} else {
 			return gas.cur[cell];

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/PotionOfPurity.java
Patch:
@@ -66,7 +66,7 @@ public void shatter( int cell ) {
 		for (int j=0; j < blobs.length; j++) {
 			
 			Blob blob = blobs[j];
-			if (blob == null) {
+			if (blob == null || blob.volume == 0) {
 				continue;
 			}
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndInfoCell.java
Patch:
@@ -89,7 +89,7 @@ public WndInfoCell( int cell ) {
 		add(info);
 
 		for (Blob blob:Dungeon.level.blobs.values()) {
-			if (blob.cur[cell] > 0 && blob.tileDesc() != null) {
+			if (blob.volume > 0 && blob.cur[cell] > 0 && blob.tileDesc() != null) {
 				if (desc.length() > 0) {
 					desc += "\n\n";
 				}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/quest/CorpseDust.java
Patch:
@@ -67,7 +67,7 @@ public boolean isIdentified() {
 	@Override
 	public boolean doPickUp(Hero hero) {
 		if (super.doPickUp(hero)){
-			GLog.n( Messages.get("chill") );
+			GLog.n( Messages.get( this, "chill") );
 			Buff.affect(hero, DustGhostSpawner.class);
 			return true;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -548,7 +548,7 @@ private void addMobSprite( Mob mob ) {
 		sprite.link( mob );
 	}
 	
-	private void prompt( String text ) {
+	private synchronized void prompt( String text ) {
 		
 		if (prompt != null) {
 			prompt.killAndErase();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Toast.java
Patch:
@@ -81,8 +81,7 @@ protected void layout() {
 	public synchronized void kill() {
 		super.kill();
 		//need to also destroy the text so that memory is freed
-		if (text != null)
-			text.destroy();
+		text.destroy();
 	}
 
 	public void text( String txt ) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
Patch:
@@ -262,7 +262,9 @@ public static boolean spawn( PrisonLevel level, Room room, Collection<Room> room
 					Wandmaker npc = new Wandmaker();
 					do {
 						npc.pos = level.pointToCell(room.random());
-					} while (level.map[npc.pos] == Terrain.ENTRANCE || level.map[npc.pos] == Terrain.SIGN);
+						//Wandmaker must never spawn in the center.
+						//If he does, and the room is 3x3, there is no room for the stairs.
+					} while (npc.pos == level.pointToCell(room.center()));
 					level.mobs.add( npc );
 
 					spawned = true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -801,7 +801,7 @@ static boolean cancel() {
 	public static void ready() {
 		selectCell( defaultCellListener );
 		QuickSlotButton.cancel();
-		scene.toolbar.examining = false;
+		if (scene != null) scene.toolbar.examining = false;
 	}
 
 	public static void examineCell( Integer cell ) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Toast.java
Patch:
@@ -81,7 +81,8 @@ protected void layout() {
 	public synchronized void kill() {
 		super.kill();
 		//need to also destroy the text so that memory is freed
-		text.destroy();
+		if (text != null)
+			text.destroy();
 	}
 
 	public void text( String txt ) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -667,6 +667,7 @@ public static void pickUpJournal( Item item ) {
 	public static void resetMap() {
 		if (scene != null) {
 			scene.tiles.map(Dungeon.level.map, Dungeon.level.width() );
+			scene.terrainFeatures.map(Dungeon.level.map, Dungeon.level.width() );
 		}
 		updateFog();
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -413,13 +413,13 @@ public void move( int step ) {
 		}
 
 		if (Dungeon.level.map[pos] == Terrain.OPEN_DOOR) {
-			Door.leave( pos, this );
+			Door.leave( pos );
 		}
 
 		pos = step;
 		
 		if (flying && Dungeon.level.map[pos] == Terrain.DOOR) {
-			Door.enter( pos, this );
+			Door.enter( pos );
 		}
 		
 		if (this != Dungeon.hero) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/Fire.java
Patch:
@@ -32,10 +32,9 @@
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.plants.Plant;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
-import com.watabou.utils.Random;
 
 public class Fire extends Blob {
-	
+
 	@Override
 	protected void evolve() {
 
@@ -53,7 +52,7 @@ protected void evolve() {
 					burn( cell );
 
 					fire = cur[cell] - 1;
-					if (flamable[cell] && Random.Int(fire+1) == 0) {
+					if (fire <= 0 && flamable[cell]) {
 
 						int oldTile = Dungeon.level.map[cell];
 						Dungeon.level.destroy( cell );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Burning.java
Patch:
@@ -141,7 +141,7 @@ public boolean act() {
 			detach();
 		}
 		
-		if (Level.flamable[target.pos]) {
+		if (Level.flamable[target.pos] && Blob.volumeAt(target.pos, Fire.class) == 0) {
 			GameScene.add( Blob.seed( target.pos, 4, Fire.class ) );
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1335,6 +1335,7 @@ public static void reallyDie( Object cause ) {
 		Bones.leave();
 		
 		Dungeon.observe();
+		GameScene.updateFog();
 				
 		Dungeon.hero.belongings.identify();
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Swarm.java
Patch:
@@ -103,7 +103,7 @@ public int defenseProc( Char enemy, int damage ) {
 				clone.state = clone.HUNTING;
 				
 				if (Dungeon.level.map[clone.pos] == Terrain.DOOR) {
-					Door.enter( clone.pos, clone );
+					Door.enter( clone.pos );
 				}
 				
 				GameScene.add( clone, SPLIT_DELAY );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/effects/Speck.java
Patch:
@@ -423,7 +423,7 @@ public void update() {
 			case VENOM:
 				hardlight( ColorMath.interpolate( 0x8844FF, 0x00FF00 , p ));
 			case STENCH:
-				am = (float)Math.sqrt( (p < 0.5f ? p : 1 - p) * 0.5f );
+				am = (float)Math.sqrt( (p < 0.5f ? p : 1 - p) );
 				scale.set( 1 + p );
 				break;
 				

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfFireblast.java
Patch:
@@ -96,7 +96,7 @@ protected void onZap( Ballistica bolt ) {
 
 	//burn... BURNNNNN!.....
 	private void spreadFlames(int cell, float strength){
-		if (strength >= 0 && Level.passable[cell]){
+		if (strength >= 0 && (Level.passable[cell] || Level.flamable[cell])){
 			affectedCells.add(cell);
 			if (strength >= 1.5f) {
 				visualCells.remove(cell);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -814,7 +814,7 @@ public void press( int cell, Char ch ) {
 			break;
 			
 		case Terrain.DOOR:
-			Door.enter( cell, ch );
+			Door.enter( cell );
 			break;
 		}
 
@@ -862,7 +862,7 @@ public void mobPress( Mob mob ) {
 			break;
 			
 		case Terrain.DOOR:
-			Door.enter( cell, mob );
+			Door.enter( cell );
 			break;
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/features/HighGrass.java
Patch:
@@ -103,8 +103,7 @@ public static void trample( Level level, int pos, Char ch ) {
 		}
 		
 		CellEmitter.get( pos ).burst( LeafParticle.LEVEL_SPECIFIC, leaves );
-		//observe already happens when hero moves
-		if (ch != Dungeon.hero)
+		if (Dungeon.visible[pos])
 			Dungeon.observe();
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -806,6 +806,7 @@ static boolean cancel() {
 	public static void ready() {
 		selectCell( defaultCellListener );
 		QuickSlotButton.cancel();
+		scene.toolbar.examining = false;
 	}
 
 	public static void examineCell( Integer cell ) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Toolbar.java
Patch:
@@ -47,7 +47,7 @@ public class Toolbar extends Component {
 	private PickedUpItem pickedUp;
 	
 	private boolean lastEnabled = true;
-	private boolean examining = false;
+	public boolean examining = false;
 
 	private static Toolbar instance;
 
@@ -249,8 +249,8 @@ public static void updateLayout(){
 	public void update() {
 		super.update();
 		
-		if (lastEnabled != Dungeon.hero.ready) {
-			lastEnabled = Dungeon.hero.ready;
+		if (lastEnabled != (Dungeon.hero.ready && Dungeon.hero.isAlive())) {
+			lastEnabled = (Dungeon.hero.ready && Dungeon.hero.isAlive());
 			
 			for (Gizmo tool : members) {
 				if (tool instanceof Tool) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/SewerBossLevel.java
Patch:
@@ -249,7 +249,7 @@ public void seal() {
 
 			super.seal();
 			
-			set( entrance, Terrain.WATER_TILES );
+			set( entrance, Terrain.WATER );
 			GameScene.updateMap( entrance );
 			GameScene.ripple( entrance );
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -320,7 +320,7 @@ public HashSet<Buff> buffs() {
 	}
 	
 	@SuppressWarnings("unchecked")
-	public <T extends Buff> HashSet<T> buffs( Class<T> c ) {
+	public synchronized <T extends Buff> HashSet<T> buffs( Class<T> c ) {
 		HashSet<T> filtered = new HashSet<>();
 		for (Buff b : buffs) {
 			if (c.isInstance( b )) {
@@ -329,9 +329,9 @@ public <T extends Buff> HashSet<T> buffs( Class<T> c ) {
 		}
 		return filtered;
 	}
-	
+
 	@SuppressWarnings("unchecked")
-	public <T extends Buff> T buff( Class<T> c ) {
+	public synchronized  <T extends Buff> T buff( Class<T> c ) {
 		for (Buff b : buffs) {
 			if (c.isInstance( b )) {
 				return (T)b;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -557,7 +557,7 @@ public void resume() {
 		curAction = lastAction;
 		lastAction = null;
 		damageInterrupt = false;
-		act();
+		next();
 	}
 	
 	private boolean actMove( HeroAction.Move action ) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonBossLevel.java
Patch:
@@ -266,6 +266,8 @@ private void clearEntities(Room safeArea){
 		for (Mob mob : Dungeon.level.mobs.toArray(new Mob[Dungeon.level.mobs.size()])){
 			if (mob != tengu && (safeArea == null || !safeArea.inside(cellToPoint(mob.pos)))){
 				mob.destroy();
+				if (mob.sprite != null)
+					mob.sprite.killAndErase();
 			}
 		}
 		for (Plant plant : plants.values()){

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -584,8 +584,7 @@ private boolean actInteract( HeroAction.Interact action ) {
 			
 			ready();
 			sprite.turnTo( pos, npc.pos );
-			npc.interact();
-			return false;
+			return npc.interact();
 			
 		} else {
 			

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Blacksmith.java
Patch:
@@ -60,7 +60,7 @@ protected boolean act() {
 	}
 	
 	@Override
-	public void interact() {
+	public boolean interact() {
 		
 		sprite.turnTo( pos, Dungeon.hero.pos );
 		
@@ -136,6 +136,8 @@ public void onBackPressed() {
 			tell( Messages.get(this, "get_lost") );
 			
 		}
+
+		return false;
 	}
 	
 	private void tell( String text ) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Ghost.java
Patch:
@@ -108,7 +108,7 @@ public boolean reset() {
 	}
 	
 	@Override
-	public void interact() {
+	public boolean interact() {
 		sprite.turnTo( pos, Dungeon.hero.pos );
 		
 		Sample.INSTANCE.play( Assets.SND_GHOST );
@@ -173,6 +173,8 @@ public void interact() {
 			}
 
 		}
+
+		return false;
 	}
 
 	private static final HashSet<Class<?>> IMMUNITIES = new HashSet<>();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Imp.java
Patch:
@@ -85,7 +85,7 @@ public boolean reset() {
 	}
 	
 	@Override
-	public void interact() {
+	public boolean interact() {
 		
 		sprite.turnTo( pos, Dungeon.hero.pos );
 		if (Quest.given) {
@@ -106,6 +106,8 @@ public void interact() {
 			
 			Journal.add( Journal.Feature.IMP );
 		}
+
+		return false;
 	}
 	
 	private void tell( String text ) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/MirrorImage.java
Patch:
@@ -118,7 +118,7 @@ public CharSprite sprite() {
 	}
 
 	@Override
-	public void interact() {
+	public boolean interact() {
 		
 		int curPos = pos;
 		
@@ -130,6 +130,8 @@ public void interact() {
 		
 		Dungeon.hero.spend( 1 / Dungeon.hero.speed() );
 		Dungeon.hero.busy();
+
+		return true;
 	}
 
 	private static final HashSet<Class<?>> IMMUNITIES = new HashSet<>();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/NPC.java
Patch:
@@ -52,5 +52,5 @@ protected void throwItem() {
 	public void beckon( int cell ) {
 	}
 
-	abstract public void interact();
+	abstract public boolean interact();
 }
\ No newline at end of file

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/RatKing.java
Patch:
@@ -63,7 +63,7 @@ public boolean reset() {
 	}
 	
 	@Override
-	public void interact() {
+	public boolean interact() {
 		sprite.turnTo( pos, Dungeon.hero.pos );
 		if (state == SLEEPING) {
 			notice();
@@ -72,6 +72,7 @@ public void interact() {
 		} else {
 			yell( Messages.get(this, "what_is_it") );
 		}
+		return true;
 	}
 	
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Sheep.java
Patch:
@@ -20,6 +20,7 @@
  */
 package com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs;
 
+import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.SheepSprite;
@@ -61,7 +62,8 @@ public void add( Buff buff ) {
 	}
 
 	@Override
-	public void interact() {
+	public boolean interact() {
 		yell( Messages.get(this, Random.element( LINE_KEYS )) );
+		return false;
 	}
 }
\ No newline at end of file

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Shopkeeper.java
Patch:
@@ -94,7 +94,8 @@ public void onSelect( Item item ) {
 	};
 
 	@Override
-	public void interact() {
+	public boolean interact() {
 		sell();
+		return false;
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
Patch:
@@ -78,7 +78,7 @@ public boolean reset() {
 	}
 	
 	@Override
-	public void interact() {
+	public boolean interact() {
 		
 		sprite.turnTo( pos, Dungeon.hero.pos );
 		if (Quest.given) {
@@ -163,6 +163,8 @@ public void hide() {
 			Journal.add( Journal.Feature.WANDMAKER );
 			Quest.given = true;
 		}
+
+		return false;
 	}
 	
 	public static class Quest {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/DriedRose.java
Patch:
@@ -392,10 +392,11 @@ public void add( Buff buff ) {
 		}
 
 		@Override
-		public void interact() {
+		public boolean interact() {
 			if (!DriedRose.talkedTo){
 				DriedRose.talkedTo = true;
 				GameScene.show(new WndQuest(this, Messages.get(this, "introduce") ));
+				return false;
 			} else {
 				int curPos = pos;
 
@@ -407,6 +408,7 @@ public void interact() {
 
 				Dungeon.hero.spend( 1 / Dungeon.hero.speed() );
 				Dungeon.hero.busy();
+				return true;
 			}
 		}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -432,7 +432,9 @@ public int distance( Char other ) {
 	}
 	
 	public void onMotionComplete() {
-		next();
+		//Does nothing by default
+		//The main actor thread already accounts for motion,
+		// so calling next() here isn't necessary (see Actor.process)
 	}
 	
 	public void onAttackComplete() {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1400,8 +1400,6 @@ public void move( int step ) {
 	public void onMotionComplete() {
 		Dungeon.observe();
 		search( false );
-			
-		super.onMotionComplete();
 	}
 	
 	@Override

File: SPD-classes/src/main/java/com/watabou/glwrap/Texture.java
Patch:
@@ -49,7 +49,7 @@ protected void generate(){
 		id = ids[0];
 	}
 	
-	public static void activ1ate( int index ) {
+	public static void activate( int index ) {
 		GLES20.glActiveTexture( GLES20.GL_TEXTURE0 + index );
 	}
 	

File: SPD-classes/src/main/java/com/watabou/glwrap/FroyoGLES20Fix.java
Patch:
@@ -31,8 +31,9 @@
 //...I don't know what google engineer forgot to put the java hooks in android 2.2 back in 2010,
 // but you know who you are and this class is your fault.
 
-//Note that compiled binares are included with this source,
-// so the android NDK is not needed to compile this project
+//Compiled binaries for the FroyoGLES20Fix lib are included in this project, which means that
+// the android NDK is not required for building Shattered Pixel Dungeon.
+// see SPD-classes/src/main/jniSources/README.txt for more details.
 
 //DO NOT REFERENCE THIS CLASS ON DEVICES API 9 AND ABOVE, use android.opengl.GLES20 instead.
 @SuppressWarnings("JniMissingFunction")

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/CursedWand.java
Patch:
@@ -59,6 +59,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.LightningTrap;
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.SummoningTrap;
 import com.shatteredpixel.shatteredpixeldungeon.mechanics.Ballistica;
+import com.shatteredpixel.shatteredpixeldungeon.messages.Languages;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.plants.Plant;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
@@ -401,7 +402,7 @@ public void call() {
 			case 2:
 				try {
 					Dungeon.saveAll();
-					if(!Messages.get(CursedWand.class, "nothing").equals("nothing happens")){
+					if(Messages.lang() != Languages.ENGLISH){
 						//Don't bother doing this joke to none-english speakers, I doubt it would translate.
 						GLog.i(Messages.get(CursedWand.class, "nothing"));
 						wand.wandUsed();

File: SPD-classes/src/main/java/com/watabou/noosa/Image.java
Patch:
@@ -149,7 +149,7 @@ protected void updateVertices() {
 	@Override
 	public void draw() {
 
-		if (texture == null)
+		if (texture == null || (!dirty && buffer == null))
 			return;
 		
 		super.draw();

File: SPD-classes/src/main/java/com/watabou/noosa/Tilemap.java
Patch:
@@ -241,7 +241,7 @@ public void draw() {
 				topLeft++;
 
 			bottomRight = Math.min(camX+camW, mapWidth-1)
-					+ Math.min((camY+camH)*mapWidth, mapHeight*(mapWidth-1));
+					+ Math.min((camY+camH)*mapWidth, (mapHeight-1)*mapWidth);
 			while(bufferPositions[bottomRight] == -1)
 				bottomRight--;
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/curses/Multiplicity.java
Patch:
@@ -68,9 +68,9 @@ public int proc(Armor armor, Char attacker, Char defender, int damage) {
 						m = Bestiary.mutable(Dungeon.depth % 5 == 0 ? Dungeon.depth - 1 : Dungeon.depth);
 					} else {
 						try {
-							m = (Mob)defender.getClass().newInstance();
+							m = (Mob)attacker.getClass().newInstance();
 							Bundle store = new Bundle();
-							defender.storeInBundle(store);
+							attacker.storeInBundle(store);
 							m.restoreFromBundle(store);
 							m.HP = m.HT;
 						} catch (Exception e) {

File: SPD-classes/src/main/java/com/watabou/noosa/NoosaScript.java
Patch:
@@ -48,6 +48,7 @@ public class NoosaScript extends Script {
 	
 	public NoosaScript() {
 
+		super();
 		compile( shader() );
 		
 		uCamera	= uniform( "uCamera" );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -718,7 +718,8 @@ public static void updateFog(int x, int y, int w, int h){
 	public static void afterObserve() {
 		if (scene != null) {
 			for (Mob mob : Dungeon.level.mobs) {
-				mob.sprite.visible = Dungeon.visible[mob.pos];
+				if (mob.sprite != null)
+					mob.sprite.visible = Dungeon.visible[mob.pos];
 			}
 		}
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/plants/Earthroot.java
Patch:
@@ -103,8 +103,8 @@ public int absorb( int damage ) {
 		public void level( int value ) {
 			if (level < value) {
 				level = value;
-				pos = target.pos;
 			}
+			pos = target.pos;
 		}
 		
 		@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Tengu.java
Patch:
@@ -156,6 +156,8 @@ protected boolean canAttack( Char enemy ) {
 	//tengu's attack is always visible
 	@Override
 	protected boolean doAttack(Char enemy) {
+		if (enemy == Dungeon.hero)
+			Dungeon.hero.resting = false;
 		sprite.attack( enemy.pos );
 		spend( attackDelay() );
 		return true;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Heap.java
Patch:
@@ -187,7 +187,7 @@ public void drop( Item item ) {
 			
 		}
 		
-		if (item instanceof Dewdrop) {
+		if (item instanceof Dewdrop && type != Type.FOR_SALE) {
 			items.add( item );
 		} else {
 			items.addFirst( item );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/ItemSlot.java
Patch:
@@ -142,7 +142,7 @@ protected void layout() {
 	
 	public void item( Item item ) {
 		if (this.item == item) {
-			if (item != null) icon.frame(item.image);
+			if (item != null) icon.frame(item.image());
 			updateText();
 			return;
 		}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/Boomerang.java
Patch:
@@ -125,7 +125,7 @@ private void circleBack( int from, Hero owner ) {
 
 	@Override
 	public void cast( Hero user, int dst ) {
-		throwEquiped = isEquipped( user );
+		throwEquiped = isEquipped( user ) && !cursed;
 		if (throwEquiped) Dungeon.quickslot.convertToPlaceholder(this);
 		super.cast( user, dst );
 	}

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/CursingTrap.java
Patch:
@@ -34,6 +34,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact;
 import com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.Weapon;
+import com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.Boomerang;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.TrapSprite;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
@@ -77,7 +78,7 @@ public static void curse(Hero hero){
 		ArrayList<Item> canCurse = new ArrayList<>();
 
 		KindOfWeapon weapon = hero.belongings.weapon;
-		if (weapon instanceof Weapon && !weapon.cursed){
+		if (weapon instanceof Weapon && !weapon.cursed && !(weapon instanceof Boomerang)){
 			if (((Weapon) weapon).enchantment == null)
 				priorityCurse.add(weapon);
 			else

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -751,7 +751,8 @@ public static void handleCell( int cell ) {
 	
 	public static void selectCell( CellSelector.Listener listener ) {
 		cellSelector.listener = listener;
-		scene.prompt( listener.prompt() );
+		if (scene != null)
+			scene.prompt( listener.prompt() );
 	}
 	
 	private static boolean cancelCellSelector() {

File: SPD-classes/src/main/java/com/watabou/noosa/Game.java
Patch:
@@ -285,11 +285,12 @@ protected void step() {
 			try {
 				requestedScene = sceneClass.newInstance();
 				switchScene();
-			} catch (InstantiationException | IllegalAccessException e) {
+			} catch (InstantiationException e){
+				e.printStackTrace();
+			} catch (IllegalAccessException e) {
 				e.printStackTrace();
 			}
 
-
 		}
 		
 		update();

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -426,7 +426,7 @@ public static void saveGame( String fileName ) throws IOException {
 			bundle.put( DEPTH, depth );
 
 			for (int d : droppedItems.keyArray()) {
-				bundle.put(String.format(DROPPED, d), droppedItems.get(d));
+				bundle.put(Messages.format(DROPPED, d), droppedItems.get(d));
 			}
 
 			quickslot.storePlaceholders( bundle );
@@ -589,7 +589,7 @@ public static void loadGame( String fileName, boolean fullLoad ) throws IOExcept
 		droppedItems = new SparseArray<ArrayList<Item>>();
 		for (int i=2; i <= Statistics.deepestFloor + 1; i++) {
 			ArrayList<Item> dropped = new ArrayList<Item>();
-			for (Bundlable b : bundle.getCollection( String.format( DROPPED, i ) ) ) {
+			for (Bundlable b : bundle.getCollection( Messages.format( DROPPED, i ) ) ) {
 				dropped.add( (Item)b );
 			}
 			if (!dropped.isEmpty()) {

File: SPD-classes/src/main/java/com/watabou/noosa/Image.java
Patch:
@@ -148,6 +148,9 @@ protected void updateVertices() {
 	
 	@Override
 	public void draw() {
+
+		if (texture == null)
+			return;
 		
 		super.draw();
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/features/Sign.java
Patch:
@@ -55,7 +55,7 @@ public static void read( int pos ) {
 
 				//if we are at depths 22-24 and in english
 				if (Dungeon.depth-21 <= 3 && Messages.lang() == Languages.ENGLISH){
-					GameScene.show( new WndMessage(teaser_texts[Dungeon.depth-21]));
+					GameScene.show( new WndMessage(teaser_texts[Dungeon.depth-22]));
 				}
 
 				Dungeon.level.destroy( pos );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/FogOfWar.java
Patch:
@@ -104,7 +104,7 @@ private void updateTexture( boolean[] visible, boolean[] visited, boolean[] mapp
 			int cell = (pWidth - 1) * i + updating.left;
 			fog.pixels.position((width2) * i + updating.left);
 			for (int j=updating.left; j < updating.right; j++) {
-				if (cell < pWidth || cell >= Dungeon.level.length()) {
+				if (cell < pWidth || cell >= Dungeon.level.length() || j == 0 || j == pWidth-1) {
 					fog.pixels.put(INVISIBLE);
 				} else
 				if (visible[cell] && visible[cell - (pWidth - 1)] &&

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Shadows.java
Patch:
@@ -55,7 +55,8 @@ public void restoreFromBundle( Bundle bundle ) {
 	public boolean attachTo( Char target ) {
 		if (super.attachTo( target )) {
 			Sample.INSTANCE.play( Assets.SND_MELD );
-			Dungeon.observe();
+			if (Dungeon.level != null)
+				Dungeon.observe();
 			return true;
 		} else {
 			return false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1045,7 +1045,7 @@ private boolean getCloser( final int target ) {
 		} else {
 
 			boolean newPath = false;
-			if (path == null || path.isEmpty())
+			if (path == null || path.isEmpty() || !Dungeon.level.adjacent(pos, path.getFirst()))
 				newPath = true;
 			else if (path.getLast() != target)
 				newPath = true;

File: SPD-classes/src/main/java/com/watabou/noosa/RenderedText.java
Patch:
@@ -214,7 +214,8 @@ protected void updateMatrix() {
 	public void draw() {
 		if (needsRender)
 			render(this);
-		super.draw();
+		if (texture != null)
+			super.draw();
 	}
 
 	@Override

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/features/Sign.java
Patch:
@@ -26,6 +26,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.effects.particles.ElmoParticle;
 import com.shatteredpixel.shatteredpixeldungeon.levels.DeadEndLevel;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Terrain;
+import com.shatteredpixel.shatteredpixeldungeon.messages.Languages;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
@@ -53,8 +54,7 @@ public static void read( int pos ) {
 			} else {
 
 				//if we are at depths 22-24 and in english
-				if (Dungeon.depth-21 < 3 &&
-						Messages.get(Sign.class, "burn").equals("As you try to read the sign it bursts into greenish flames.")){
+				if (Dungeon.depth-21 <= 3 && Messages.lang() == Languages.ENGLISH){
 					GameScene.show( new WndMessage(teaser_texts[Dungeon.depth-21]));
 				}
 

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/AttackIndicator.java
Patch:
@@ -167,7 +167,9 @@ private void visible( boolean value ) {
 	@Override
 	protected void onClick() {
 		if (enabled) {
-			Dungeon.hero.handle( lastTarget.pos );
+			if (Dungeon.hero.handle( lastTarget.pos )) {
+				Dungeon.hero.next();
+			}
 		}
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1424,6 +1424,7 @@ public void onOperateComplete() {
 			} else if (heap.type == Type.LOCKED_CHEST || heap.type == Type.CRYSTAL_CHEST){
 				belongings.specialKeys[Dungeon.depth]--;
 			}
+			StatusPane.needsKeyUpdate = true;
 			heap.open( this );
 		}
 		curAction = null;
@@ -1551,7 +1552,8 @@ public HashSet<Class<?>> immunities() {
 
 	@Override
 	public void next() {
-		super.next();
+		if (isAlive())
+			super.next();
 	}
 
 	public static interface Doom {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonBossLevel.java
Patch:
@@ -233,7 +233,6 @@ private void resetTraps(){
 
 	private void changeMap(int[] map){
 		this.map = map.clone();
-		GameScene.resetMap();
 		buildFlagMaps();
 		cleanWalls();
 
@@ -251,6 +250,8 @@ else if (map[i] == Terrain.EXIT)
 		addVisuals(); //this also resets existing visuals
 		resetTraps();
 
+
+		GameScene.resetMap();
 		Dungeon.observe();
 	}
 
@@ -307,9 +308,9 @@ public void progress(){
 				maze.connected.put(null, new Room.Door(10, 2));
 				maze.connected.put(maze, new Room.Door(20, 29));
 				MazePainter.paint(this, maze);
-				GameScene.resetMap();
 				buildFlagMaps();
 				cleanWalls();
+				GameScene.resetMap();
 
 				GameScene.flash(0xFFFFFF);
 				Sample.INSTANCE.play(Assets.SND_BLAST);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -412,13 +412,13 @@ public void move( int step ) {
 		}
 
 		if (Dungeon.level.map[pos] == Terrain.OPEN_DOOR) {
-			Door.leave( pos );
+			Door.leave( pos, this );
 		}
 
 		pos = step;
 		
 		if (flying && Dungeon.level.map[pos] == Terrain.DOOR) {
-			Door.enter( pos );
+			Door.enter( pos, this );
 		}
 		
 		if (this != Dungeon.hero) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Swarm.java
Patch:
@@ -103,7 +103,7 @@ public int defenseProc( Char enemy, int damage ) {
 				clone.state = clone.HUNTING;
 				
 				if (Dungeon.level.map[clone.pos] == Terrain.DOOR) {
-					Door.enter( clone.pos );
+					Door.enter( clone.pos, clone );
 				}
 				
 				GameScene.add( clone, SPLIT_DELAY );

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -843,7 +843,7 @@ public void press( int cell, Char ch ) {
 			break;
 			
 		case Terrain.DOOR:
-			Door.enter( cell );
+			Door.enter( cell, ch );
 			break;
 		}
 
@@ -891,7 +891,7 @@ public void mobPress( Mob mob ) {
 			break;
 			
 		case Terrain.DOOR:
-			Door.enter( cell );
+			Door.enter( cell, mob );
 			break;
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/features/HighGrass.java
Patch:
@@ -103,6 +103,8 @@ public static void trample( Level level, int pos, Char ch ) {
 		}
 		
 		CellEmitter.get( pos ).burst( LeafParticle.LEVEL_SPECIFIC, leaves );
-		Dungeon.observe();
+		//observe already happens when hero moves
+		if (ch != Dungeon.hero)
+			Dungeon.observe();
 	}
 }

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/ItemSprite.java
Patch:
@@ -131,7 +131,8 @@ public PointF worldToCamera( int cell ) {
 	}
 	
 	public void place( int p ) {
-		point( worldToCamera( p ) );
+		if (Dungeon.level != null)
+			point( worldToCamera( p ) );
 	}
 	
 	public void drop() {

File: SPD-classes/src/main/java/com/watabou/noosa/Tilemap.java
Patch:
@@ -78,6 +78,7 @@ public void map( int[] data, int cols ) {
 		bufferPositions = new short[size];
 		for (int i = 0; i < bufferPositions.length; i++)
 			bufferPositions[i] = -1;
+		bufferLength = 0;
 
 		width = cellW * mapWidth;
 		height = cellH * mapHeight;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
Patch:
@@ -259,7 +259,7 @@ public static boolean spawn( PrisonLevel level, Room room, Collection<Room> room
 				if (setRoom( rooms )){
 					Wandmaker npc = new Wandmaker();
 					do {
-						npc.pos = Dungeon.level.pointToCell(room.random());
+						npc.pos = level.pointToCell(room.random());
 					} while (level.map[npc.pos] == Terrain.ENTRANCE || level.map[npc.pos] == Terrain.SIGN);
 					level.mobs.add( npc );
 

File: SPD-classes/src/main/java/com/watabou/noosa/NoosaScript.java
Patch:
@@ -157,9 +157,9 @@ public void drawQuadSet( Vertexbuffer buffer, int length, int offset ){
 		buffer.release();
 
 		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {
-			GLES20.glDrawElements( GLES20.GL_TRIANGLES, Quad.SIZE * length, GLES20.GL_UNSIGNED_SHORT, Quad.SIZE * offset );
+			GLES20.glDrawElements( GLES20.GL_TRIANGLES, Quad.SIZE * length, GLES20.GL_UNSIGNED_SHORT, Quad.SIZE * Short.SIZE/8 * offset );
 		} else {
-			FroyoGLES20Fix.glDrawElements( GLES20.GL_TRIANGLES, Quad.SIZE * length, GLES20.GL_UNSIGNED_SHORT, Quad.SIZE * offset );
+			FroyoGLES20Fix.glDrawElements( GLES20.GL_TRIANGLES, Quad.SIZE * length, GLES20.GL_UNSIGNED_SHORT, Quad.SIZE * Short.SIZE/8 * offset );
 		}
 	}
 	

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/traps/FlockTrap.java
Patch:
@@ -58,8 +58,8 @@ protected boolean act() {
 						sheep.lifespan = 2 + Random.Int(Dungeon.depth + 10);
 						sheep.pos = i;
 						GameScene.add(sheep);
+						CellEmitter.get(i).burst(Speck.factory(Speck.WOOL), 4);
 					}
-					CellEmitter.get(i).burst(Speck.factory(Speck.WOOL), 4);
 				}
 				Sample.INSTANCE.play(Assets.SND_PUFF);
 				Actor.remove(this);

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/plants/Earthroot.java
Patch:
@@ -44,7 +44,7 @@ public void activate() {
 		Char ch = Actor.findChar(pos);
 		
 		if (ch == Dungeon.hero) {
-			Buff.affect( ch, Armor.class ).level = ch.HT;
+			Buff.affect( ch, Armor.class ).level(ch.HT);
 		}
 		
 		if (Dungeon.visible[pos]) {
@@ -103,6 +103,7 @@ public int absorb( int damage ) {
 		public void level( int value ) {
 			if (level < value) {
 				level = value;
+				pos = target.pos;
 			}
 		}
 		

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/Blob.java
Patch:
@@ -91,6 +91,7 @@ public void restoreFromBundle( Bundle bundle ) {
 			//compatability with pre-0.4.2
 			cur = new int[1024];
 		}
+		off = new int[cur.length];
 		
 		int[] data = bundle.getIntArray( CUR );
 		if (data != null) {

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonBossLevel.java
Patch:
@@ -221,7 +221,7 @@ private void resetTraps(){
 		}
 		traps.clear();
 
-		for (int i = 0; i < Dungeon.level.length(); i++){
+		for (int i = 0; i < length(); i++){
 			if (map[i] == Terrain.INACTIVE_TRAP) {
 				Trap t = new SpearTrap().reveal();
 				t.active = false;

File: core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Challenges.java
Patch:
@@ -30,6 +30,8 @@ public class Challenges {
 	public static final int DARKNESS			= 32;
 	public static final int NO_SCROLLS		    = 64;
 
+	public static final int MAX_VALUE           = 127;
+
 	public static final String[] NAME_IDS = {
 			"no_food",
 			"no_armor",

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Eye.java
Patch:
@@ -109,7 +109,7 @@ protected boolean act() {
 
 	@Override
 	protected Char chooseEnemy() {
-		if (beamCharged) return enemy;
+		if (beamCharged && enemy != null) return enemy;
 		return super.chooseEnemy();
 	}
 
@@ -241,7 +241,7 @@ private class Hunting extends Mob.Hunting{
 		@Override
 		public boolean act(boolean enemyInFOV, boolean justAlerted) {
 			//always attack if the beam is charged, no exceptions
-			if (beamCharged)
+			if (beamCharged && enemy != null)
 				enemyInFOV = true;
 			return super.act(enemyInFOV, justAlerted);
 		}

File: src/com/shatteredpixel/shatteredpixeldungeon/Rankings.java
Patch:
@@ -48,7 +48,6 @@
 import com.watabou.noosa.Game;
 import com.watabou.utils.Bundlable;
 import com.watabou.utils.Bundle;
-import com.watabou.utils.SystemTime;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -57,6 +56,7 @@
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.Locale;
+import java.util.UUID;
 
 public enum Rankings {
 	
@@ -87,7 +87,7 @@ public void submit( boolean win, Class cause ) {
 		
 		INSTANCE.saveGameData(rec);
 
-		rec.gameID = String.valueOf(SystemTime.now);
+		rec.gameID = UUID.randomUUID().toString();
 		
 		records.add( rec );
 		

File: src/com/shatteredpixel/shatteredpixeldungeon/Rankings.java
Patch:
@@ -44,6 +44,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.levels.features.Chasm;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Languages;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
+import com.shatteredpixel.shatteredpixeldungeon.ui.QuickSlotButton;
 import com.watabou.noosa.Game;
 import com.watabou.utils.Bundlable;
 import com.watabou.utils.Bundle;
@@ -175,6 +176,7 @@ public void loadGameData(Record rec){
 		Dungeon.level = null;
 		Generator.reset();
 		Dungeon.quickslot.reset();
+		QuickSlotButton.reset();
 
 		Bundle handler = data.getBundle(HANDLERS);
 		Scroll.restore(handler);

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Eye.java
Patch:
@@ -90,7 +90,7 @@ protected boolean canAttack( Char enemy ) {
 		if (beamCooldown == 0) {
 			Ballistica aim = new Ballistica(pos, enemy.pos, Ballistica.STOP_TERRAIN);
 
-			if (enemy.invisible == 0 && aim.subPath(1, aim.dist).contains(enemy.pos)){
+			if (enemy.invisible == 0 && Level.fieldOfView[enemy.pos] && aim.subPath(1, aim.dist).contains(enemy.pos)){
 				beam = aim;
 				return true;
 			} else

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/LloydsBeacon.java
Patch:
@@ -57,8 +57,8 @@ public class LloydsBeacon extends Artifact {
 	public static final String AC_SET		= "SET";
 	public static final String AC_RETURN	= "RETURN";
 	
-	private int returnDepth	= -1;
-	private int returnPos;
+	public int returnDepth	= -1;
+	public int returnPos;
 	
 	{
 		image = ItemSpriteSheet.ARTIFACT_BEACON;

File: src/com/shatteredpixel/shatteredpixeldungeon/ui/ItemSlot.java
Patch:
@@ -142,6 +142,7 @@ protected void layout() {
 	
 	public void item( Item item ) {
 		if (this.item == item) {
+			if (item != null) icon.frame(item.image);
 			updateText();
 			return;
 		}

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/CursingTrap.java
Patch:
@@ -85,7 +85,7 @@ public static void curse(Hero hero){
 		}
 
 		Armor armor = hero.belongings.armor;
-		if (!armor.cursed){
+		if (armor != null && !armor.cursed){
 			if (armor.glyph == null)
 				priorityCurse.add(armor);
 			else

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -390,7 +390,7 @@ public int defenseProc( Char enemy, int damage ) {
 		}
 
 		if (buff(SoulMark.class) != null) {
-			int restoration = Math.max(damage, HP);
+			int restoration = Math.min(damage, HP);
 			Dungeon.hero.buff(Hunger.class).satisfy(restoration*0.5f);
 			Dungeon.hero.HP = (int)Math.ceil(Math.min(Dungeon.hero.HT, Dungeon.hero.HP+(restoration*0.25f)));
 			Dungeon.hero.sprite.emitter().burst( Speck.factory(Speck.HEALING), 1 );

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/CryptPainter.java
Patch:
@@ -77,7 +77,7 @@ private static Item prize( Level level ) {
 		if (!prize.cursed){
 			prize.upgrade();
 			//curse the armor, unless it has a glyph
-			if (prize.glyph == null){
+			if (!prize.hasGoodGlyph()){
 				prize.cursed = prize.cursedKnown = true;
 				prize.inscribe(Armor.Glyph.randomCurse());
 			}

File: src/com/shatteredpixel/shatteredpixeldungeon/ui/StatusPane.java
Patch:
@@ -164,6 +164,7 @@ protected void layout() {
 
 		depth.x = width - 35.5f - depth.width() / 2f;
 		depth.y = 8f - depth.baseLine() / 2f;
+		PixelScene.align(depth);
 
 		danger.setPos( width - danger.width(), 20 );
 

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/PoolPainter.java
Patch:
@@ -26,6 +26,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.Heap;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfInvisibility;
+import com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Level;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Room;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Terrain;
@@ -103,7 +104,7 @@ private static Item prize( Level level ) {
 		} while (prize.cursed);
 
 		//33% chance for an extra update.
-		if (Random.Int(3) == 1){
+		if (!(prize instanceof MissileWeapon) && Random.Int(3) == 0){
 			prize.upgrade();
 		}
 

File: src/com/shatteredpixel/shatteredpixeldungeon/sprites/CharSprite.java
Patch:
@@ -397,6 +397,7 @@ public void showSleep() {
 				emo.killAndErase();
 			}
 			emo = new EmoIcon.Sleep( this );
+			emo.visible = visible;
 		}
 		idle();
 	}
@@ -416,6 +417,7 @@ public void showAlert() {
 				emo.killAndErase();
 			}
 			emo = new EmoIcon.Alert( this );
+			emo.visible = visible;
 		}
 	}
 	

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -308,8 +308,8 @@ public int drRoll() {
 				dr = Math.max(dr, 0);
 			}
 		}
-		if (belongings.weapon != null)  dr += Math.max( belongings.weapon.defenceFactor( this ), 0 );
-		if (bark != null)               dr += bark.level();
+		if (belongings.weapon != null)  dr += Random.NormalIntRange( 0 , belongings.weapon.defenseFactor( this ) );
+		if (bark != null)               dr += Random.NormalIntRange( 0 , bark.level() );
 
 		return dr;
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Statue.java
Patch:
@@ -108,7 +108,7 @@ protected boolean canAttack(Char enemy) {
 
 	@Override
 	public int drRoll() {
-		return Random.NormalIntRange(0, Dungeon.depth + weapon.defenceFactor(null));
+		return Random.NormalIntRange(0, Dungeon.depth + weapon.defenseFactor(null));
 	}
 	
 	@Override

File: src/com/shatteredpixel/shatteredpixeldungeon/items/KindOfWeapon.java
Patch:
@@ -104,7 +104,7 @@ public int reachFactor( Hero hero ){
 		return 1;
 	}
 
-	public int defenceFactor( Hero hero ) {
+	public int defenseFactor(Hero hero ) {
 		return 0;
 	}
 	

File: src/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Greatshield.java
Patch:
@@ -38,7 +38,7 @@ public int max(int lvl) {
 	}
 
 	@Override
-	public int defenceFactor(Hero hero) {
+	public int defenseFactor(Hero hero) {
 		return 10+3*level();    //10 extra defence, plus 3 per level;
 	}
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Quarterstaff.java
Patch:
@@ -38,7 +38,7 @@ public int max(int lvl) {
 	}
 
 	@Override
-	public int defenceFactor(Hero hero) {
+	public int defenseFactor(Hero hero) {
 		return 2;	//2 extra defence
 	}
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/RoundShield.java
Patch:
@@ -38,7 +38,7 @@ public int max(int lvl) {
 	}
 
 	@Override
-	public int defenceFactor(Hero hero) {
+	public int defenseFactor(Hero hero) {
 		return 5+2*level();     //5 extra defence, plus 2 per level;
 	}
 }
\ No newline at end of file

File: src/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sai.java
Patch:
@@ -39,7 +39,7 @@ public int max(int lvl) {
 	}
 
 	@Override
-	public int defenceFactor(Hero hero) {
+	public int defenseFactor(Hero hero) {
 		return 3;	//3 extra defence
 	}
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/Rankings.java
Patch:
@@ -35,6 +35,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Tengu;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Yog;
 import com.shatteredpixel.shatteredpixeldungeon.items.Amulet;
+import com.shatteredpixel.shatteredpixeldungeon.items.Generator;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.bags.Bag;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion;
@@ -171,6 +172,8 @@ public void loadGameData(Record rec){
 		Bundle data = rec.gameData;
 
 		Dungeon.hero = null;
+		Dungeon.level = null;
+		Generator.reset();
 		Dungeon.quickslot.reset();
 
 		Bundle handler = data.getBundle(HANDLERS);

File: src/com/shatteredpixel/shatteredpixeldungeon/windows/WndBlacksmith.java
Patch:
@@ -147,6 +147,7 @@ protected void onClick() {
 					ItemButton.this.onClick();
 				}
 			};
+			slot.enable(true);
 			add( slot );
 		}
 		

File: src/com/shatteredpixel/shatteredpixeldungeon/ui/ItemSlot.java
Patch:
@@ -149,15 +149,15 @@ public void item( Item item ) {
 		this.item = item;
 
 		if (item == null) {
-			
-			active = false;
+
+			enable(false);
 			icon.visible(false);
 
 			updateText();
 			
 		} else {
 			
-			active = true;
+			enable(true);
 			icon.visible(true);
 
 			icon.view( item );

File: src/com/shatteredpixel/shatteredpixeldungeon/sprites/ItemSprite.java
Patch:
@@ -174,7 +174,6 @@ public void drop( int from ) {
 
 	public ItemSprite view(Item item){
 		view(item.image(), item.glowing());
-		if (this.emitter != null) this.emitter.killAndErase();
 		Emitter emitter = item.emitter();
 		if (emitter != null && parent != null) {
 			emitter.pos( this );
@@ -185,7 +184,7 @@ public ItemSprite view(Item item){
 	}
 	
 	public ItemSprite view( int image, Glowing glowing ) {
-		if (this.emitter != null) this.emitter.on = false;
+		if (this.emitter != null) this.emitter.killAndErase();
 		emitter = null;
 		frame( film.get( image ) );
 		if ((this.glowing = glowing) == null) {

File: src/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java
Patch:
@@ -444,7 +444,7 @@ public static int challenges() {
 
 	public static void quickSlots( int value ){ Preferences.INSTANCE.put( Preferences.KEY_QUICKSLOTS, value ); }
 
-	public static int quickSlots(){ return Preferences.INSTANCE.getInt( Preferences.KEY_QUICKSLOTS, 2); }
+	public static int quickSlots(){ return Preferences.INSTANCE.getInt( Preferences.KEY_QUICKSLOTS, 4); }
 
 	public static void flipToolbar( boolean value) {
 		Preferences.INSTANCE.put(Preferences.KEY_FLIPTOOLBAR, value );

File: src/com/shatteredpixel/shatteredpixeldungeon/items/armor/Armor.java
Patch:
@@ -222,7 +222,7 @@ public int DRMax(int lvl){
 		if (glyph != null) effectiveTier += glyph.tierDRAdjust();
 		effectiveTier = Math.max(0, effectiveTier);
 
-		return effectiveTier * (2 + lvl);
+		return Math.max(DRMin(lvl), effectiveTier * (2 + lvl));
 	}
 
 	public final int DRMin(){

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/DriedRose.java
Patch:
@@ -253,6 +253,7 @@ public boolean doPickUp( Hero hero ) {
 				return false;
 			} if ( rose.level() >= rose.levelCap ){
 				GLog.i( Messages.get(this, "no_room") );
+				hero.spendAndNext(TIME_TO_PICK_UP);
 				return true;
 			} else {
 

File: src/com/shatteredpixel/shatteredpixeldungeon/ui/StatusPane.java
Patch:
@@ -265,7 +265,7 @@ public void updateKeyDisplay() {
 			boolean blackKey = false;
 			boolean specialKey = false;
 			int ironKeys = 0;
-			for (int i = 1; i <= Dungeon.depth; i++) {
+			for (int i = 1; i <= Math.min(Dungeon.depth, 25); i++) {
 				if (Dungeon.hero.belongings.ironKeys[i] > 0 || Dungeon.hero.belongings.specialKeys[i] > 0) {
 					foundKeys = true;
 

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -695,7 +695,7 @@ private boolean actOpenChest( HeroAction.OpenChest action ) {
 			Heap heap = Dungeon.level.heaps.get( dst );
 			if (heap != null && (heap.type != Type.HEAP && heap.type != Type.FOR_SALE)) {
 				
-				if (heap.type == Type.LOCKED_CHEST || heap.type == Type.CRYSTAL_CHEST
+				if ((heap.type == Type.LOCKED_CHEST || heap.type == Type.CRYSTAL_CHEST)
 						&& belongings.specialKeys[Dungeon.depth] < 1) {
 
 						GLog.w( Messages.get(this, "locked_chest") );

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Guard.java
Patch:
@@ -90,7 +90,7 @@ private boolean chain(int target){
 
 		Ballistica chain = new Ballistica(pos, target, Ballistica.PROJECTILE);
 
-		if (chain.collisionPos != enemy.pos || Level.pit[chain.path.get(1)])
+		if (chain.collisionPos != enemy.pos || chain.path.size() < 2 || Level.pit[chain.path.get(1)])
 			return false;
 		else {
 			int newPos = -1;

File: src/com/shatteredpixel/shatteredpixeldungeon/items/armor/Armor.java
Patch:
@@ -173,6 +173,7 @@ public void affixSeal(BrokenSeal seal){
 		if (seal.level() > 0){
 			//doesn't trigger upgrading logic such as affecting curses/glyphs
 			level(level()+1);
+			Badges.validateItemLevelAquired(this);
 		}
 		if (isEquipped(Dungeon.hero)){
 			Buff.affect(Dungeon.hero, BrokenSeal.WarriorShield.class).setArmor(this);

File: src/com/shatteredpixel/shatteredpixeldungeon/Bones.java
Patch:
@@ -152,13 +152,14 @@ public static Item get() {
 					if (Generator.removeArtifact((Artifact)item)) {
 						try {
 							Artifact artifact = (Artifact)item.getClass().newInstance();
-							artifact.cursed = true;
-							artifact.cursedKnown = true;
 							//caps displayed artifact level
 							artifact.transferUpgrade(Math.min(
 									item.visiblyUpgraded(),
 									1 + ((Dungeon.depth * 3) / 10)));
 
+							artifact.cursed = true;
+							artifact.cursedKnown = true;
+
 							return artifact;
 						} catch (Exception e) {
 							return new Gold(item.price());

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Piranha.java
Patch:
@@ -57,6 +57,7 @@ public Piranha() {
 	protected boolean act() {
 		if (!Level.water[pos]) {
 			die( null );
+			sprite.killAndErase();
 			return true;
 		} else {
 			//this causes pirahna to move away when a door is closed on them.

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Goo.java
Patch:
@@ -223,7 +223,6 @@ public void damage(int dmg, Object src) {
 			sprite.showStatus(CharSprite.NEGATIVE, Messages.get(this, "enraged"));
 			((GooSprite)sprite).spray(true);
 			yell(Messages.get(this, "gluuurp"));
-			spend( TICK );
 		}
 		LockedFloor lock = Dungeon.hero.buff(LockedFloor.class);
 		if (lock != null) lock.addTime(dmg*2);

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Tengu.java
Patch:
@@ -125,7 +125,7 @@ public void damage(int dmg, Object src) {
 
 	@Override
 	public boolean isAlive() {
-		return HP > 0 || Dungeon.level.mobs.contains(this); //Tengu has special death rules, see prisonbosslevel.progress()
+		return Dungeon.level.mobs.contains(this); //Tengu has special death rules, see prisonbosslevel.progress()
 	}
 
 	@Override

File: src/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfMight.java
Patch:
@@ -30,6 +30,7 @@ public class RingOfMight extends Ring {
 	public boolean doEquip(Hero hero) {
 		if (super.doEquip(hero)){
 			hero.HT += level()*5;
+			hero.HP = Math.min(hero.HP, hero.HT);
 			return true;
 		} else {
 			return false;

File: src/com/shatteredpixel/shatteredpixeldungeon/items/keys/GoldenKey.java
Patch:
@@ -32,7 +32,7 @@ public class GoldenKey extends Key {
 
 	@Override
 	public boolean doPickUp(Hero hero) {
-		Dungeon.hero.belongings.specialKeys[depth]++;
+		Dungeon.hero.belongings.specialKeys[depth] += quantity();
 		return super.doPickUp(hero);
 	}
 

File: src/com/shatteredpixel/shatteredpixeldungeon/items/keys/IronKey.java
Patch:
@@ -25,16 +25,14 @@
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
 
 public class IronKey extends Key {
-
-	public static int curDepthQuantity = 0;
 	
 	{
 		image = ItemSpriteSheet.IRON_KEY;
 	}
 
 	@Override
 	public boolean doPickUp(Hero hero) {
-		Dungeon.hero.belongings.ironKeys[depth]++;
+		Dungeon.hero.belongings.ironKeys[depth] += quantity();
 		return super.doPickUp(hero);
 	}
 

File: src/com/shatteredpixel/shatteredpixeldungeon/items/keys/GoldenKey.java
Patch:
@@ -32,7 +32,7 @@ public class GoldenKey extends Key {
 
 	@Override
 	public boolean doPickUp(Hero hero) {
-		Dungeon.hero.belongings.specialKeys[Dungeon.depth]++;
+		Dungeon.hero.belongings.specialKeys[depth]++;
 		return super.doPickUp(hero);
 	}
 

File: src/com/shatteredpixel/shatteredpixeldungeon/items/keys/IronKey.java
Patch:
@@ -34,7 +34,7 @@ public class IronKey extends Key {
 
 	@Override
 	public boolean doPickUp(Hero hero) {
-		Dungeon.hero.belongings.ironKeys[Dungeon.depth]++;
+		Dungeon.hero.belongings.ironKeys[depth]++;
 		return super.doPickUp(hero);
 	}
 

File: src/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/AssassinsBlade.java
Patch:
@@ -45,7 +45,7 @@ public int damageRoll(Hero hero) {
 		Char enemy = hero.enemy();
 		if (enemy instanceof Mob && ((Mob) enemy).surprisedBy(hero))
 			//deals avg damage to max on surprise, instead of min to max.
-			return Random.NormalIntRange((min() + max())/2, max());
+			return imbue.damageFactor(Random.NormalIntRange((min() + max())/2, max()));
 		else
 			return super.damageRoll(hero);
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Dagger.java
Patch:
@@ -45,7 +45,7 @@ public int damageRoll(Hero hero) {
 		Char enemy = hero.enemy();
 		if (enemy instanceof Mob && ((Mob) enemy).surprisedBy(hero))
 			//deals avg damage to max on surprise, instead of min to max.
-			return Random.NormalIntRange((min() + max())/2, max());
+			return imbue.damageFactor(Random.NormalIntRange((min() + max())/2, max()));
 		else
 			return super.damageRoll(hero);
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Dirk.java
Patch:
@@ -45,7 +45,7 @@ public int damageRoll(Hero hero) {
 		Char enemy = hero.enemy();
 		if (enemy instanceof Mob && ((Mob) enemy).surprisedBy(hero))
 			//deals avg damage to max on surprise, instead of min to max.
-			return Random.NormalIntRange((min() + max())/2, max());
+			return imbue.damageFactor(Random.NormalIntRange((min() + max())/2, max()));
 		else
 			return super.damageRoll(hero);
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/scenes/RankingsScene.java
Patch:
@@ -297,7 +297,7 @@ protected void onClick() {
 			if (rec.gameFile.length() > 0) {
 				parent.add( new WndRanking( rec.gameFile ) );
 			} else {
-				parent.add( new WndError( Messages.get(this, "no_info") ) );
+				parent.add( new WndError( Messages.get(RankingsScene.class, "no_info") ) );
 			}
 		}
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Poison.java
Patch:
@@ -122,6 +122,6 @@ public void onDeath() {
 		Badges.validateDeathFromPoison();
 		
 		Dungeon.fail( getClass() );
-		GLog.n( "You died from poison..." );
+		GLog.n( Messages.get(this, "ondeath") );
 	}
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -196,7 +196,7 @@ public void create() {
 		mapped = new boolean[LENGTH];
 		Arrays.fill( mapped, false );
 		
-		if (!Dungeon.bossLevel()) {
+		if (!(Dungeon.bossLevel() || Dungeon.depth == 21) /*final shop floor*/) {
 			addItemToSpawn( Generator.random( Generator.Category.FOOD ) );
 			if (Dungeon.posNeeded()) {
 				addItemToSpawn( new PotionOfStrength() );

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/GrimTrap.java
Patch:
@@ -69,7 +69,7 @@ public void activate() {
 			MagicMissile.shadow(target.sprite.parent, pos, target.pos, new Callback() {
 				@Override
 				public void call() {
-
+					if (!finalTarget.isAlive()) return;
 					if (finalTarget == Dungeon.hero) {
 						//almost kill the player
 						if (((float)finalTarget.HP/finalTarget.HT) >= 0.9f){

File: src/com/shatteredpixel/shatteredpixeldungeon/items/armor/Armor.java
Patch:
@@ -27,7 +27,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroClass;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Speck;
-import com.shatteredpixel.shatteredpixeldungeon.effects.particles.ShadowParticle;
 import com.shatteredpixel.shatteredpixeldungeon.items.BrokenSeal;
 import com.shatteredpixel.shatteredpixeldungeon.items.EquipableItem;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
@@ -321,7 +320,7 @@ public Item random() {
 			//45% chance to be level 0
 		} else if (roll < 0.95f){
 			//15% chance to be +1
-			upgrade(0);
+			upgrade(1);
 		} else {
 			//5% chance to be +2
 			upgrade(2);

File: src/com/shatteredpixel/shatteredpixeldungeon/ui/QuickSlotButton.java
Patch:
@@ -203,7 +203,7 @@ public static int autoAim(Char target, Item item){
 
 		//Otherwise pick nearby tiles to try and 'angle' the shot, auto-aim basically.
 		for (int i : Level.NEIGHBOURS9DIST2) {
-			if (item.throwPos(Dungeon.hero, target.pos) == target.pos){
+			if (item.throwPos(Dungeon.hero, target.pos+i) == target.pos){
 				return target.pos+i;
 			}
 		}

File: src/com/shatteredpixel/shatteredpixeldungeon/items/Item.java
Patch:
@@ -466,7 +466,7 @@ public void restoreFromBundle( Bundle bundle ) {
 		}
 	}
 
-	protected int throwPos( Hero user, int dst){
+	public int throwPos( Hero user, int dst){
 		return new Ballistica( user.pos, dst, Ballistica.PROJECTILE ).collisionPos;
 	}
 	

File: src/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfMight.java
Patch:
@@ -42,7 +42,7 @@ public boolean doUnequip(Hero hero, boolean collect, boolean single) {
 		if (super.doUnequip(hero, collect, single)){
 			hero.HT -= level()*5;
 			hero.HP = Math.min(hero.HP, hero.HT);
-			return false;
+			return true;
 		} else {
 			return false;
 		}

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Statue.java
Patch:
@@ -55,7 +55,7 @@ public Statue() {
 		
 		do {
 			weapon = (Weapon)Generator.random( Generator.Category.WEAPON );
-		} while (!(weapon instanceof MeleeWeapon) || weapon.level() < 0);
+		} while (!(weapon instanceof MeleeWeapon) || weapon.cursed);
 		
 		weapon.identify();
 		weapon.enchant( Enchantment.random() );

File: src/com/shatteredpixel/shatteredpixeldungeon/items/weapon/Weapon.java
Patch:
@@ -229,7 +229,7 @@ public Item upgrade( boolean enchant ) {
 	
 	@Override
 	public String name() {
-		return enchantment != null && (cursedKnown || !enchantment.curse()) ? enchantment.name( super.name() ) : super.name;
+		return enchantment != null && (cursedKnown || !enchantment.curse()) ? enchantment.name( super.name() ) : super.name();
 	}
 	
 	@Override

File: src/com/shatteredpixel/shatteredpixeldungeon/items/Item.java
Patch:
@@ -52,8 +52,8 @@
 
 public class Item implements Bundlable {
 
-	private static final String TXT_TO_STRING_LVL	= "%s %+d";
-	private static final String TXT_TO_STRING_X		= "%s x%d";
+	protected static final String TXT_TO_STRING_LVL		= "%s %+d";
+	protected static final String TXT_TO_STRING_X		= "%s x%d";
 	
 	protected static final float TIME_TO_THROW		= 1.0f;
 	protected static final float TIME_TO_PICK_UP	= 1.0f;

File: src/com/shatteredpixel/shatteredpixeldungeon/items/armor/Armor.java
Patch:
@@ -170,8 +170,8 @@ public void activate(Char ch) {
 	public void affixSeal(BrokenSeal seal){
 		this.seal = seal;
 		if (seal.level() > 0){
-			//doesn't override existing glyphs, but doesn't create one either
-			upgrade(glyph != null);
+			//doesn't trigger upgrading logic such as affecting curses/glyphs
+			level(level()+1);
 		}
 		if (isEquipped(Dungeon.hero)){
 			Buff.affect(Dungeon.hero, BrokenSeal.WarriorShield.class).setArmor(this);

File: src/com/shatteredpixel/shatteredpixeldungeon/windows/WndBag.java
Patch:
@@ -369,7 +369,7 @@ public void item( Item item ) {
 						mode == Mode.FOR_SALE && (item.price() > 0) && (!item.isEquipped( Dungeon.hero ) || !item.cursed) ||
 						mode == Mode.UPGRADEABLE && item.isUpgradable() ||
 						mode == Mode.UNIDENTIFED && !item.isIdentified() ||
-						mode == Mode.UNIDED_OR_CURSED && (item instanceof EquipableItem && (!item.isIdentified() || item.cursed)) ||
+						mode == Mode.UNIDED_OR_CURSED && ((item instanceof EquipableItem || item instanceof Wand) && (!item.isIdentified() || item.cursed)) ||
 						mode == Mode.QUICKSLOT && (item.defaultAction != null) ||
 						mode == Mode.WEAPON && (item instanceof MeleeWeapon || item instanceof Boomerang) ||
 						mode == Mode.ARMOR && (item instanceof Armor) ||

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/CryptPainter.java
Patch:
@@ -77,7 +77,7 @@ private static Item prize( Level level ) {
 		if (!prize.cursed){
 			prize.upgrade();
 			//curse the armor, unless it has a glyph
-			if (prize.glyph != null){
+			if (prize.glyph == null){
 				prize.cursed = prize.cursedKnown = true;
 				prize.inscribe(Armor.Glyph.randomCurse());
 			}

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -895,7 +895,7 @@ public void rest( boolean fullRest ) {
 	public int attackProc( Char enemy, int damage ) {
 		KindOfWeapon wep = rangedWeapon != null ? rangedWeapon : belongings.weapon;
 
-		if (wep != null)  wep.proc( this, enemy, damage );
+		if (wep != null) damage = wep.proc( this, enemy, damage );
 			
 		switch (subClass) {
 		case SNIPER:

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Statue.java
Patch:
@@ -123,8 +123,7 @@ public void damage( int dmg, Object src ) {
 	
 	@Override
 	public int attackProc( Char enemy, int damage ) {
-		weapon.proc( this, enemy, damage );
-		return damage;
+		return weapon.proc( this, enemy, damage );
 	}
 	
 	@Override

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/SandalsOfNature.java
Patch:
@@ -154,7 +154,7 @@ public void restoreFromBundle( Bundle bundle ) {
 
 	public class Naturalism extends ArtifactBuff{
 		public void charge() {
-			if (charge < target.HT){
+			if (level() > 0 && charge < target.HT){
 				//gain 1+(1*level)% of the difference between current charge and max HP.
 				charge+= (Math.round( (target.HT-charge) * (.01+ level()*0.01) ));
 				updateQuickslot();

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -232,7 +232,7 @@ public float speed() {
 	
 	public void damage( int dmg, Object src ) {
 		
-		if (HP <= 0 || dmg < 0) {
+		if (!isAlive() || dmg < 0) {
 			return;
 		}
 		if (this.buff(Frost.class) != null){

File: src/com/shatteredpixel/shatteredpixeldungeon/windows/WndRanking.java
Patch:
@@ -316,9 +316,11 @@ protected void layout() {
 			bg.y = y;
 			
 			slot.setRect( x, y, HEIGHT, HEIGHT );
+			PixelScene.align(slot);
 			
 			name.x = slot.right() + 2;
 			name.y = y + (height - name.baseLine()) / 2;
+			PixelScene.align(name);
 			
 			String str = Messages.titleCase( item.name() );
 			name.text( str );

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonBossLevel.java
Patch:
@@ -181,7 +181,7 @@ public void press( int cell, Char ch ) {
 
 			//hero finishes the maze
 			else if (state == State.MAZE
-					&& ((Room)new Room().set(4, 1, 7, 4)).inside(cell)){
+					&& ((Room)new Room().set(4, 0, 7, 4)).inside(cell)){
 				progress();
 			}
 		}

File: src/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Knuckles.java
Patch:
@@ -34,7 +34,7 @@ public class Knuckles extends MeleeWeapon {
 	@Override
 	public int max(int lvl) {
 		return  3*(tier+1) +    //6 base, down from 10
-				lvl;            //+1 per level, down from +2
+				lvl*tier;       //+1 per level, down from +2
 	}
 
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Burning.java
Patch:
@@ -86,7 +86,7 @@ public boolean act() {
 				if (item instanceof Scroll) {
 					
 					item = item.detach( hero.belongings.backpack );
-					GLog.w( Messages.get(this, "burnsup", item.toString()) );
+					GLog.w( Messages.get(this, "burnsup", Messages.capitalize(item.toString())) );
 					
 					Heap.burnFX( hero.pos );
 					

File: src/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/Boomerang.java
Patch:
@@ -119,6 +119,7 @@ private void circleBack( int from, Hero owner ) {
 	@Override
 	public void cast( Hero user, int dst ) {
 		throwEquiped = isEquipped( user );
+		if (throwEquiped) Dungeon.quickslot.convertToPlaceholder(this);
 		super.cast( user, dst );
 	}
 	

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Berserk.java
Patch:
@@ -50,7 +50,7 @@ public boolean act() {
 				target.SHLD -= Math.min(target.SHLD, 2);
 				if (target.SHLD == 0) {
 					target.die(this);
-					Dungeon.fail(this.getClass());
+					if (!target.isAlive()) Dungeon.fail(this.getClass());
 				}
 			} else {
 				state = State.EXHAUSTED;

File: src/com/shatteredpixel/shatteredpixeldungeon/items/armor/Armor.java
Patch:
@@ -55,7 +55,7 @@ public class Armor extends EquipableItem {
 	private static final int HITS_TO_KNOW    = 10;
 
 	private static final String TXT_TO_STRING	= "%s :%d";
-	private static final String AC_DETACH       = "DETACH";
+	protected static final String AC_DETACH       = "DETACH";
 	
 	public int tier;
 	

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Combo.java
Patch:
@@ -140,7 +140,7 @@ public void restoreFromBundle(Bundle bundle) {
 	public Image getIcon() {
 		Image icon;
 		if (((Hero)target).belongings.weapon != null){
-			icon = new ItemSprite(Dungeon.hero.belongings.weapon);
+			icon = new ItemSprite(Dungeon.hero.belongings.weapon.image, null);
 		} else {
 			icon = new ItemSprite(new Item(){ {image = ItemSpriteSheet.WEAPON; }});
 		}

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/CloakOfShadows.java
Patch:
@@ -98,6 +98,7 @@ public void execute( Hero hero, String action ) {
 				stealthed = false;
 				activeBuff.detach();
 				activeBuff = null;
+				hero.spend( 1f );
 				hero.sprite.operate( hero.pos );
 			}
 

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Belongings.java
Patch:
@@ -23,8 +23,8 @@
 import com.shatteredpixel.shatteredpixeldungeon.Badges;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
-import com.shatteredpixel.shatteredpixeldungeon.items.KindofMisc;
 import com.shatteredpixel.shatteredpixeldungeon.items.KindOfWeapon;
+import com.shatteredpixel.shatteredpixeldungeon.items.KindofMisc;
 import com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor;
 import com.shatteredpixel.shatteredpixeldungeon.items.bags.Bag;
 import com.shatteredpixel.shatteredpixeldungeon.items.keys.IronKey;
@@ -208,6 +208,7 @@ public void resurrect( int depth ) {
 		
 		if (armor != null) {
 			armor.cursed = false;
+			armor.activate( owner );
 		}
 		
 		if (misc1 != null) {

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Combo.java
Patch:
@@ -253,7 +253,7 @@ private void doAttack(final Char enemy){
 					}
 					break;
 				case SLAM:
-					target.SHLD += dmg/2;
+					target.SHLD = Math.max( target.SHLD, dmg/2);
 					break;
 				default:
 					//nothing

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/SpearTrap.java
Patch:
@@ -59,7 +59,7 @@ public void activate() {
 		}
 
 		Char ch = Actor.findChar( pos);
-		if (ch != null){
+		if (ch != null && !ch.flying){
 			int damage = Random.NormalIntRange(Dungeon.depth, Dungeon.depth*2);
 			damage -= Random.IntRange( 0, ch.dr());
 			ch.damage( Math.max(damage, 0) , this);

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Berserk.java
Patch:
@@ -86,11 +86,11 @@ public int damageFactor(int dmg){
 	public boolean berserking(){
 		if (target.HP == 0 && state == State.NORMAL){
 
-			WarriorShield sigil = target.buff(WarriorShield.class);
-			if (sigil != null){
+			WarriorShield shield = target.buff(WarriorShield.class);
+			if (shield != null){
 				state = State.BERSERK;
 				BuffIndicator.refreshHero();
-				target.SHLD = sigil.maxShield() * 5;
+				target.SHLD = shield.maxShield() * 5;
 
 				SpellSprite.show(target, SpellSprite.BERSERK);
 				Sample.INSTANCE.play( Assets.SND_CHALLENGE );

File: src/com/shatteredpixel/shatteredpixeldungeon/items/BrokenSeal.java
Patch:
@@ -24,7 +24,7 @@ public class BrokenSeal extends Item {
 	public static final String AC_INFO = "INFO_WINDOW";
 
 	{
-		image = ItemSpriteSheet.SIGIL;
+		image = ItemSpriteSheet.SEAL;
 
 		cursedKnown = levelKnown = true;
 		unique = true;

File: src/com/shatteredpixel/shatteredpixeldungeon/sprites/ItemSpriteSheet.java
Patch:
@@ -70,7 +70,7 @@ public class ItemSpriteSheet {
 	public static final int BOMB        = ROW2+5;
 	public static final int HONEYPOT    = ROW2+6;
 	public static final int SHATTPOT    = ROW2+7;
-	public static final int SIGIL       = ROW2+8;
+	public static final int SEAL       = ROW2+8;
 	// Keys
 	public static final int IRON_KEY		= ROW2+9;
 	public static final int GOLDEN_KEY		= ROW2+10;

File: src/com/shatteredpixel/shatteredpixeldungeon/items/Bomb.java
Patch:
@@ -73,13 +73,14 @@ public ArrayList<String> actions(Hero hero) {
 
 	@Override
 	public void execute(Hero hero, String action) {
-		super.execute(hero, action);
 
 		if (action.equals(AC_LIGHTTHROW)) {
 			lightingFuse = true;
 			action = AC_THROW;
 		} else
 			lightingFuse = false;
+
+		super.execute(hero, action);
 	}
 
 	@Override

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Combo.java
Patch:
@@ -217,7 +217,7 @@ private void doAttack(final Char enemy){
 					dmg = Math.round(dmg*2.5f);
 					break;
 				case FURY:
-					dmg = Math.round(dmg*.4f);
+					dmg = Math.round(dmg*0.4f);
 					break;
 			}
 

File: src/com/shatteredpixel/shatteredpixeldungeon/items/armor/Armor.java
Patch:
@@ -64,7 +64,7 @@ public class Armor extends EquipableItem {
 	private int hitsToKnow = HITS_TO_KNOW;
 	
 	public Glyph glyph;
-	private boolean seal;
+	public boolean seal;
 	
 	public Armor( int tier ) {
 		
@@ -167,9 +167,9 @@ public void activate(Char ch) {
 		if (seal) Buff.affect(ch, BrokenSeal.WarriorShield.class).setArmor(this);
 	}
 
-	public void affixSeal(BrokenSeal sigil){
+	public void affixSeal(BrokenSeal seal){
 		this.seal = true;
-		if (sigil.level() > 0){
+		if (seal.level() > 0){
 			//doesn't override existing glyphs, but doesn't create one either
 			upgrade(glyph != null);
 		}

File: src/com/shatteredpixel/shatteredpixeldungeon/Bones.java
Patch:
@@ -159,7 +159,7 @@ public static Item get() {
 									item.visiblyUpgraded(),
 									1 + ((Dungeon.depth * 3) / 10)));
 
-							return item;
+							return artifact;
 						} catch (Exception e) {
 							return new Gold(item.price());
 						}
@@ -168,7 +168,7 @@ public static Item get() {
 					}
 				}
 				
-				if (item.isUpgradable() || item instanceof Artifact) {
+				if (item.isUpgradable()) {
 					item.cursed = true;
 					item.cursedKnown = true;
 					if (item.isUpgradable()) {

File: src/com/shatteredpixel/shatteredpixeldungeon/Bones.java
Patch:
@@ -168,7 +168,7 @@ public static Item get() {
 					}
 				}
 				
-				if (item.isUpgradable()) {
+				if (item.isUpgradable() || item instanceof Artifact) {
 					item.cursed = true;
 					item.cursedKnown = true;
 					if (item.isUpgradable()) {

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TalismanOfForesight.java
Patch:
@@ -89,6 +89,8 @@ public void execute( Hero hero, String action ) {
 
 				GLog.p( Messages.get(this, "scry") );
 
+				updateQuickslot();
+
 				Buff.affect(hero, Awareness.class, Awareness.DURATION);
 				Dungeon.observe();
 			}

File: src/com/shatteredpixel/shatteredpixeldungeon/items/armor/Armor.java
Patch:
@@ -306,7 +306,7 @@ public Emitter emitter() {
 		Emitter emitter = new Emitter();
 		emitter.pos(10f, 6f);
 		emitter.fillTarget = false;
-		emitter.pour(Speck.factory( Speck.LIGHT, 0xFFCC0000 ), 0.6f);
+		emitter.pour(Speck.factory( Speck.RED_LIGHT ), 0.6f);
 		return emitter;
 	}
 

File: src/com/shatteredpixel/shatteredpixeldungeon/items/armor/Armor.java
Patch:
@@ -150,7 +150,7 @@ public boolean doEquip( Hero hero ) {
 			((HeroSprite)hero.sprite).updateArmor();
 			activate(hero);
 
-			hero.spendAndNext( 2 * time2equip( hero ) );
+			hero.spendAndNext( time2equip( hero ) );
 			return true;
 			
 		} else {
@@ -179,7 +179,7 @@ public void affixSeal(BrokenSeal sigil){
 
 	@Override
 	protected float time2equip( Hero hero ) {
-		return hero.speed();
+		return 2 / hero.speed();
 	}
 
 	@Override

File: src/com/shatteredpixel/shatteredpixeldungeon/items/KindOfWeapon.java
Patch:
@@ -50,7 +50,7 @@ public boolean doEquip( Hero hero ) {
 			cursedKnown = true;
 			if (cursed) {
 				equipCursed( hero );
-				GLog.n( Messages.get(KindOfWeapon.class, "cursed", name()) );
+				GLog.n( Messages.get(KindOfWeapon.class, "cursed") );
 			}
 			
 			hero.spendAndNext( TIME_TO_EQUIP );

File: src/com/shatteredpixel/shatteredpixeldungeon/items/armor/Armor.java
Patch:
@@ -144,7 +144,7 @@ public boolean doEquip( Hero hero ) {
 			cursedKnown = true;
 			if (cursed) {
 				equipCursed( hero );
-				GLog.n( Messages.get(Armor.class, "equip_cursed", toString()) );
+				GLog.n( Messages.get(Armor.class, "equip_cursed") );
 			}
 			
 			((HeroSprite)hero.sprite).updateArmor();

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -167,9 +167,10 @@ public static enum Feeling {
 	
 	public int color1 = 0x004400;
 	public int color2 = 0x88CC44;
-	
+
+	//FIXME this is sloppy. Should be able to keep track of this without static variables
 	protected static boolean pitRoomNeeded = false;
-	protected static boolean weakFloorCreated = false;
+	public static boolean weakFloorCreated = false;
 
 	private static final String VERSION     = "version";
 	private static final String MAP			= "map";

File: src/com/shatteredpixel/shatteredpixeldungeon/scenes/InterlevelScene.java
Patch:
@@ -27,6 +27,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.items.Generator;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Level;
+import com.shatteredpixel.shatteredpixeldungeon.levels.RegularLevel;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.ui.GameLog;
 import com.shatteredpixel.shatteredpixeldungeon.windows.WndError;
@@ -279,6 +280,8 @@ private void reset() throws IOException {
 
 		Dungeon.depth--;
 		Level level = Dungeon.newLevel();
+		//FIXME this only partially addresses issues regarding weak floors.
+		RegularLevel.weakFloorCreated = false;
 		Dungeon.switchLevel( level, level.entrance );
 	}
 	

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Regeneration.java
Patch:
@@ -34,7 +34,7 @@ public boolean act() {
 
 			if (target.HP < target.HT && !((Hero)target).isStarving()) {
 				LockedFloor lock = target.buff(LockedFloor.class);
-				if (lock == null || lock.regenOn()) {
+				if (target.HP > 0 && (lock == null || lock.regenOn())) {
 					target.HP += 1;
 					if (target.HP == target.HT) {
 						((Hero) target).resting = false;

File: src/com/shatteredpixel/shatteredpixeldungeon/ui/StatusPane.java
Patch:
@@ -176,7 +176,7 @@ public void update() {
 		float shield = Dungeon.hero.SHLD;
 		float max = Math.max(health+shield, Dungeon.hero.HT);
 
-		if (health == 0) {
+		if (!Dungeon.hero.isAlive()) {
 			avatar.tint( 0x000000, 0.6f );
 			blood.on = false;
 		} else if ((health/Dungeon.hero.HT) < 0.25f) {

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TimekeepersHourglass.java
Patch:
@@ -286,11 +286,11 @@ public void setDelayedPress(int cell){
 				presses.add(cell);
 		}
 
-		public void triggerPresses(){
+		private void triggerPresses(){
 			for (int cell : presses)
 				Dungeon.level.press(cell, null);
 
-			presses = new ArrayList<Integer>();
+			presses = new ArrayList<>();
 		}
 
 		@Override
@@ -304,7 +304,6 @@ public boolean attachTo(Char target) {
 
 		@Override
 		public void detach(){
-			triggerPresses();
 			for (Mob mob : Dungeon.level.mobs.toArray(new Mob[0]))
 				mob.sprite.remove(CharSprite.State.PARALYSED);
 			GameScene.freezeEmitters = false;
@@ -313,6 +312,7 @@ public void detach(){
 			updateQuickslot();
 			super.detach();
 			activeBuff = null;
+			triggerPresses();
 		}
 
 		private static final String PRESSES = "presses";

File: src/com/shatteredpixel/shatteredpixeldungeon/scenes/AmuletScene.java
Patch:
@@ -63,7 +63,7 @@ public void create() {
 			protected void onClick() {
 				Dungeon.win( Amulet.class );
 				Dungeon.deleteGame( Dungeon.hero.heroClass, true );
-				Game.switchScene( noText ? TitleScene.class : RankingsScene.class );
+				Game.switchScene( RankingsScene.class );
 			}
 		};
 		btnExit.setSize( WIDTH, BTN_HEIGHT );

File: src/com/shatteredpixel/shatteredpixeldungeon/scenes/SurfaceScene.java
Patch:
@@ -170,7 +170,7 @@ protected void onClick( Touch touch ) {
 
 		RedButton gameOver = new RedButton( Messages.get(this, "exit") ) {
 			protected void onClick() {
-				Game.switchScene( TitleScene.class );
+				Game.switchScene( RankingsScene.class );
 			}
 		};
 		gameOver.setSize( SKY_WIDTH - FRAME_MARGIN_X * 2, BUTTON_HEIGHT );

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/DriedRose.java
Patch:
@@ -349,7 +349,7 @@ protected boolean getCloser( int target ) {
 
 		@Override
 		protected Char chooseEnemy() {
-			if (enemy == null || !enemy.isAlive() || state == WANDERING) {
+			if (enemy == null || !enemy.isAlive() || !Dungeon.level.mobs.contains(enemy) || state == WANDERING) {
 
 				HashSet<Mob> enemies = new HashSet<Mob>();
 				for (Mob mob : Dungeon.level.mobs) {

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/GreatCrab.java
Patch:
@@ -66,7 +66,8 @@ protected boolean getCloser( int target ) {
 	public void damage( int dmg, Object src ){
 		//crab blocks all attacks originating from the hero or enemy characters or traps if it is alerted.
 		//All direct damage from these sources is negated, no exceptions. blob/debuff effects go through as normal.
-		if (enemySeen && (src instanceof Wand || src instanceof LightningTrap.Electricity || src instanceof Char)){
+		if ((enemySeen && state != SLEEPING && paralysed == 0)
+				&& (src instanceof Wand || src instanceof LightningTrap.Electricity || src instanceof Char)){
 			GLog.n( Messages.get(this, "noticed") );
 			sprite.showStatus( CharSprite.NEUTRAL, Messages.get(this, "blocked") );
 		} else {

File: src/com/shatteredpixel/shatteredpixeldungeon/Rankings.java
Patch:
@@ -47,6 +47,7 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
+import java.util.Locale;
 
 public enum Rankings {
 	
@@ -231,7 +232,7 @@ public void restoreFromBundle( Bundle bundle ) {
 
 			//conversion logic for pre-0.3.4 saves
 			if (bundle.contains( REASON )){
-				String info = bundle.getString( REASON ).toLowerCase();
+				String info = bundle.getString( REASON ).toLowerCase(Locale.ENGLISH);
 				if (info.equals("obtained the amulet of yendor"))   cause = Amulet.class;
 				else if (info.contains("goo"))                      cause = Goo.class;
 				else if (info.contains("tengu"))                    cause = Tengu.class;

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/LloydsBeacon.java
Patch:
@@ -220,7 +220,7 @@ public void call() {
 
 								} else if (ch.properties().contains(Char.Property.IMMOVABLE)) {
 
-									GLog.w( Messages.get(this, "tele_fail") );
+									GLog.w( Messages.get(LloydsBeacon.class, "tele_fail") );
 
 								} else  {
 
@@ -243,7 +243,7 @@ public void call() {
 
 		@Override
 		public String prompt() {
-			return Messages.get(this, "prompt");
+			return Messages.get(LloydsBeacon.class, "prompt");
 		}
 	};
 

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/EtherealChains.java
Patch:
@@ -104,7 +104,7 @@ public void onSelect(Integer target) {
 						}
 					}
 					if (newPos == -1){
-						GLog.w( Messages.get(this, "does_nothing") );
+						GLog.w( Messages.get(EtherealChains.class, "does_nothing") );
 					} else {
 						final int newMobPos = newPos;
 						final Char affected = Actor.findChar( chain.collisionPos );

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TimekeepersHourglass.java
Patch:
@@ -83,14 +83,14 @@ public void execute( Hero hero, String action ) {
 							@Override
 							protected void onSelect(int index) {
 								if (index == 0) {
-									GLog.i( Messages.get(this, "onstasis") );
+									GLog.i( Messages.get(TimekeepersHourglass.class, "onstasis") );
 									GameScene.flash(0xFFFFFF);
 									Sample.INSTANCE.play(Assets.SND_TELEPORT);
 
 									activeBuff = new timeStasis();
 									activeBuff.attachTo(Dungeon.hero);
 								} else if (index == 1) {
-									GLog.i( Messages.get(this, "onfreeze") );
+									GLog.i( Messages.get(TimekeepersHourglass.class, "onfreeze") );
 									GameScene.flash(0xFFFFFF);
 									Sample.INSTANCE.play(Assets.SND_TELEPORT);
 

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Thief.java
Patch:
@@ -203,7 +203,7 @@ protected void nowhereToRun() {
 
 					}
 
-					if (item != null) GLog.n( Messages.get(this, "escapes", item.name()));
+					if (item != null) GLog.n( Messages.get(Thief.class, "escapes", item.name()));
 					item = null;
 					state = WANDERING;
 				}

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Thief.java
Patch:
@@ -145,7 +145,7 @@ protected boolean steal( Hero hero ) {
 
 		if (item != null && !item.unique && item.level() < 1 ) {
 
-			GLog.w( Messages.get(this, "stole", item.name()) );
+			GLog.w( Messages.get(Thief.class, "stole", item.name()) );
 			Dungeon.quickslot.clearItem( item );
 			item.updateQuickslot();
 

File: src/com/shatteredpixel/shatteredpixeldungeon/scenes/WelcomeScene.java
Patch:
@@ -25,7 +25,7 @@ public void create() {
 
 		final int previousVersion = ShatteredPixelDungeon.version();
 
-		if (ShatteredPixelDungeon.versionCode != previousVersion) {
+		if (ShatteredPixelDungeon.versionCode == previousVersion) {
 			ShatteredPixelDungeon.switchNoFade(TitleScene.class);
 			return;
 		}

File: src/com/shatteredpixel/shatteredpixeldungeon/ui/ScrollPane.java
Patch:
@@ -20,12 +20,12 @@
  */
 package com.shatteredpixel.shatteredpixeldungeon.ui;
 
+import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
 import com.watabou.input.Touchscreen.Touch;
 import com.watabou.noosa.Camera;
 import com.watabou.noosa.ColorBlock;
 import com.watabou.noosa.TouchArea;
 import com.watabou.noosa.ui.Component;
-import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
 import com.watabou.utils.Point;
 import com.watabou.utils.PointF;
 
@@ -116,7 +116,7 @@ public TouchController() {
 		}
 
 		@Override
-		protected void onClick( Touch touch ) {
+		protected void onTouchUp( Touch touch ) {
 			if (dragging) {
 
 				dragging = false;

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Shopkeeper.java
Patch:
@@ -22,11 +22,11 @@
 
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
-import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
 import com.shatteredpixel.shatteredpixeldungeon.effects.CellEmitter;
 import com.shatteredpixel.shatteredpixeldungeon.effects.particles.ElmoParticle;
 import com.shatteredpixel.shatteredpixeldungeon.items.Heap;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
+import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ShopkeeperSprite;
 import com.shatteredpixel.shatteredpixeldungeon.windows.WndBag;
@@ -80,7 +80,7 @@ public boolean reset() {
 	}
 	
 	public static WndBag sell() {
-		return GameScene.selectItem( itemSelector, WndBag.Mode.FOR_SALE, "Select an item to sell" );
+		return GameScene.selectItem( itemSelector, WndBag.Mode.FOR_SALE, Messages.get(Shopkeeper.class, "sell"));
 	}
 	
 	private static WndBag.Listener itemSelector = new WndBag.Listener() {

File: src/com/shatteredpixel/shatteredpixeldungeon/scenes/StartScene.java
Patch:
@@ -498,7 +498,7 @@ public void onBackPressed() {
 					}
 				} );
 			} else {
-				StartScene.this.add( new WndMessage( Messages.get(this, "need_to_win") ) );
+				StartScene.this.add( new WndMessage( Messages.get(StartScene.class, "need_to_win") ) );
 			}
 		}
 

File: src/com/shatteredpixel/shatteredpixeldungeon/windows/WndItem.java
Patch:
@@ -108,6 +108,7 @@ private static void layoutButtons(ArrayList<RedButton> line, float extraWidth, f
 		if (line == null || line.size() == 0 || extraWidth == 0) return;
 		if (line.size() == 1){
 			line.get(0).setSize(line.get(0).width()+extraWidth, BUTTON_HEIGHT);
+			line.get(0).setPos( 0 , y );
 			return;
 		}
 		ArrayList<RedButton> lineByWidths = new ArrayList<>(line);

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -719,7 +719,7 @@ public Heap drop( Item item, int cell ) {
 			(Dungeon.isChallenged( Challenges.NO_ARMOR ) && item instanceof Armor) ||
 			(Dungeon.isChallenged( Challenges.NO_HEALING ) && item instanceof PotionOfHealing) ||
 			(Dungeon.isChallenged( Challenges.NO_HERBALISM ) && (item instanceof Plant.Seed || item instanceof Dewdrop || item instanceof SeedPouch)) ||
-			(Dungeon.isChallenged( Challenges.NO_SCROLLS ) && ((item instanceof Scroll && !(item instanceof ScrollOfUpgrade)) || item instanceof ScrollHolder)) ||
+			(Dungeon.isChallenged( Challenges.NO_SCROLLS ) && ((item instanceof Scroll && !(item instanceof ScrollOfUpgrade || item instanceof ScrollOfMagicalInfusion)) || item instanceof ScrollHolder)) ||
 			item == null) {
 
 			//create a dummy heap, give it a dummy sprite, don't add it to the game, and return it.

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/HornOfPlenty.java
Patch:
@@ -180,7 +180,7 @@ else if (charge >= 3)
 						image = ItemSpriteSheet.ARTIFACT_HORN1;
 
 					if (charge == chargeCap){
-						GLog.p( Messages.get(this, "full") );
+						GLog.p( Messages.get(HornOfPlenty.class, "full") );
 						partialCharge = 0;
 					}
 

File: src/com/shatteredpixel/shatteredpixeldungeon/Bones.java
Patch:
@@ -26,7 +26,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon;
-import com.shatteredpixel.shatteredpixeldungeon.ui.QuickSlotButton;
 import com.watabou.noosa.Game;
 import com.watabou.utils.Bundle;
 import com.watabou.utils.Random;
@@ -43,7 +42,7 @@ public class Bones {
 	
 	private static final String LEVEL	= "level";
 	private static final String ITEM	= "item";
-	
+
 	private static int depth = -1;
 	private static Item item;
 	
@@ -182,7 +181,7 @@ public static Item get() {
 					}
 				}
 				
-				item.syncVisuals();
+				item.sync();
 				
 				return item;
 			} else {

File: src/com/shatteredpixel/shatteredpixeldungeon/items/potions/Potion.java
Patch:
@@ -112,11 +112,12 @@ public static void restore( Bundle bundle ) {
 	
 	public Potion() {
 		super();
-		syncVisuals();
+		sync();
 	}
 
 	@Override
-	public void syncVisuals(){
+	public void sync(){
+		super.sync();
 		image = handler.image( this );
 		color = handler.label( this );
 	};

File: src/com/shatteredpixel/shatteredpixeldungeon/items/rings/Ring.java
Patch:
@@ -99,10 +99,11 @@ public static void restore( Bundle bundle ) {
 	
 	public Ring() {
 		super();
-		syncVisuals();
+		sync();
 	}
 	
-	public void syncVisuals() {
+	public void sync() {
+		super.sync();
 		image	= handler.image( this );
 		gem		= handler.label( this );
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/Scroll.java
Patch:
@@ -100,11 +100,12 @@ public static void restore( Bundle bundle ) {
 	
 	public Scroll() {
 		super();
-		syncVisuals();
+		sync();
 	}
 
 	@Override
-	public void syncVisuals(){
+	public void sync(){
+		super.sync();
 		image = handler.image( this );
 		rune = handler.label( this );
 	};

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Monk.java
Patch:
@@ -99,7 +99,7 @@ public int attackProc( Char enemy, int damage ) {
 					Dungeon.quickslot.clearItem(weapon);
 					weapon.updateQuickslot();
 					Dungeon.level.drop(weapon, hero.pos).sprite.drop();
-					GLog.w(Messages.get(this, "diarm", weapon.name()));
+					GLog.w(Messages.get(this, "disarm", weapon.name()));
 				}
 			}
 		}

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Blacksmith.java
Patch:
@@ -188,7 +188,7 @@ public static void upgrade( Item item1, Item item2 ) {
 			((EquipableItem)first).doUnequip( Dungeon.hero, true );
 		}
 		first.upgrade();
-		GLog.p( Messages.get(ScrollOfUpgrade.class, "look_better", first.name()) );
+		GLog.p( Messages.get(ScrollOfUpgrade.class, "looks_better", first.name()) );
 		Dungeon.hero.spendAndNext( 2f );
 		Badges.validateItemLevelAquired( first );
 		

File: src/com/shatteredpixel/shatteredpixeldungeon/ui/ItemSlot.java
Patch:
@@ -57,6 +57,7 @@ public class ItemSlot extends Button {
 	protected BitmapText topRight;
 	protected BitmapText bottomRight;
 	protected Image      bottomRightIcon;
+	protected boolean    iconVisible = true;
 	
 	private static final String TXT_STRENGTH	= ":%d";
 	private static final String TXT_TYPICAL_STR	= "%d?";
@@ -205,7 +206,7 @@ public void item( Item item ) {
 				} else {
 					iconInt = ((Potion) item).initials();
 				}
-				if (iconInt != null) {
+				if (iconInt != null && iconVisible) {
 					bottomRightIcon = new Image(Assets.CONS_ICONS);
 					int left = iconInt*7;
 					int top = item instanceof Potion ? 0 : 8;
@@ -242,5 +243,6 @@ public void showParams( boolean TL, boolean TR, boolean BR ) {
 
 		if (BR) add( bottomRight );
 		else remove( bottomRight );
+		iconVisible = BR;
 	}
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/SpearTrap.java
Patch:
@@ -26,6 +26,8 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Wound;
+import com.shatteredpixel.shatteredpixeldungeon.levels.Level;
+import com.shatteredpixel.shatteredpixeldungeon.levels.Terrain;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.TrapSprite;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
@@ -47,6 +49,7 @@ public void trigger() {
 		}
 		//this trap is not disarmed by being triggered
 		reveal();
+		Level.set(pos, Terrain.TRAP);
 		activate();
 	}
 

File: src/com/shatteredpixel/shatteredpixeldungeon/windows/IconTitle.java
Patch:
@@ -81,10 +81,10 @@ protected void layout() {
 		imIcon.x = x;
 		imIcon.y = y;
 
+		tfLabel.maxWidth((int)(width - (imIcon.x + imIcon.width() + GAP)));
 		tfLabel.setPos(imIcon.x + imIcon.width() + GAP, imIcon.height > tfLabel.height() ?
 						imIcon.y + (imIcon.height() - tfLabel.height()) / 2 :
 						imIcon.y);
-		tfLabel.maxWidth((int)(width - tfLabel.left()));
 
 		if (health.visible) {
 			health.setRect( tfLabel.left(), Math.max( tfLabel.top() + tfLabel.height(), imIcon.y + imIcon.height() - health.height() ), tfLabel.maxWidth(), 0 );

File: src/com/shatteredpixel/shatteredpixeldungeon/windows/WndInfoBuff.java
Patch:
@@ -57,7 +57,7 @@ public WndInfoBuff(Buff buff){
 		add( titlebar );
 
 		RenderedTextMultiline txtInfo = PixelScene.renderMultiline(buff.desc(), 6);
-		txtInfo.maxWidth(width);
+		txtInfo.maxWidth(WIDTH);
 		txtInfo.setPos(titlebar.left(), titlebar.bottom() + GAP);
 		add( txtInfo );
 

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Thief.java
Patch:
@@ -181,7 +181,7 @@ private class Fleeing extends Mob.Fleeing {
 		protected void nowhereToRun() {
 			if (buff( Terror.class ) == null && buff( Corruption.class ) == null) {
 				if (enemySeen) {
-					sprite.showStatus(CharSprite.NEGATIVE, Messages.get(this, "rage"));
+					sprite.showStatus(CharSprite.NEGATIVE, Messages.get(Mob.class, "rage"));
 					state = HUNTING;
 				} else {
 

File: src/com/shatteredpixel/shatteredpixeldungeon/windows/WndTradeItem.java
Patch:
@@ -146,7 +146,7 @@ protected void onClick() {
 						if(thievery.steal(price)){
 							Hero hero = Dungeon.hero;
 							Item item = heap.pickUp();
-							GLog.i( Messages.get(this, "stole", item.name()) );
+							GLog.i( Messages.get(WndTradeItem.class, "stole", item.name()) );
 							hide();
 
 							if (!item.doPickUp( hero )) {

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Brute.java
Patch:
@@ -81,8 +81,8 @@ public void damage( int dmg, Object src ) {
 			enraged = true;
 			spend( TICK );
 			if (Dungeon.visible[pos]) {
-				GLog.w( Messages.get(this, "engraged_text") );
-				sprite.showStatus( CharSprite.NEGATIVE, Messages.get(this, "engraged") );
+				GLog.w( Messages.get(this, "enraged_text") );
+				sprite.showStatus( CharSprite.NEGATIVE, Messages.get(this, "enraged") );
 			}
 		}
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -458,7 +458,7 @@ public void die( Object cause ) {
 		}
 		
 		if (Dungeon.hero.isAlive() && !Dungeon.visible[pos]) {
-			GLog.i( Messages.get(this, "dead") );
+			GLog.i( Messages.get(this, "died") );
 		}
 	}
 	

File: src/com/shatteredpixel/shatteredpixeldungeon/items/potions/PotionOfInvisibility.java
Patch:
@@ -38,7 +38,7 @@ public class PotionOfInvisibility extends Potion {
 	public void apply( Hero hero ) {
 		setKnown();
 		Buff.affect( hero, Invisibility.class, Invisibility.DURATION );
-		GLog.i( Messages.get(this, "invisble") );
+		GLog.i( Messages.get(this, "invisible") );
 		Sample.INSTANCE.play( Assets.SND_MELD );
 	}
 	

File: src/com/shatteredpixel/shatteredpixeldungeon/windows/WndBlacksmith.java
Patch:
@@ -70,7 +70,7 @@ public WndBlacksmith( Blacksmith troll, Hero hero ) {
 			@Override
 			protected void onClick() {
 				btnPressed = btnItem1;
-				GameScene.selectItem( itemSelector, WndBag.Mode.UPGRADEABLE, Messages.get(this, "select") );
+				GameScene.selectItem( itemSelector, WndBag.Mode.UPGRADEABLE, Messages.get(WndBlacksmith.class, "select") );
 			}
 		};
 		btnItem1.setRect( (WIDTH - BTN_GAP) / 2 - BTN_SIZE, message.y + message.height() + BTN_GAP, BTN_SIZE, BTN_SIZE );
@@ -80,7 +80,7 @@ protected void onClick() {
 			@Override
 			protected void onClick() {
 				btnPressed = btnItem2;
-				GameScene.selectItem( itemSelector, WndBag.Mode.UPGRADEABLE, Messages.get(this, "select") );
+				GameScene.selectItem( itemSelector, WndBag.Mode.UPGRADEABLE, Messages.get(WndBlacksmith.class, "select") );
 			}
 		};
 		btnItem2.setRect( btnItem1.right() + BTN_GAP, btnItem1.top(), BTN_SIZE, BTN_SIZE );

File: src/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfUpgrade.java
Patch:
@@ -44,7 +44,7 @@ protected void onItemSelected( Item item ) {
 		item.upgrade();
 
 		upgrade( curUser );
-		GLog.p( Messages.get(this, "look_better", item.name()) );
+		GLog.p( Messages.get(this, "looks_better", item.name()) );
 		
 		Badges.validateItemLevelAquired( item );
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -164,7 +164,7 @@ public class Hero extends Char {
 	
 	public Hero() {
 		super();
-		name = "you";
+		name = Messages.get(this, "name");
 		
 		HP = HT = 20;
 		STR = STARTING_STR;
@@ -238,7 +238,7 @@ public String className() {
 	}
 
 	public String givenName(){
-		return name.equals("you") ? className() : name;
+		return name.equals(Messages.get(this, "name")) ? className() : name;
 	}
 	
 	public void live() {

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Blacksmith.java
Patch:
@@ -22,15 +22,14 @@
 
 import java.util.Collection;
 
+import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.watabou.noosa.audio.Sample;
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
 import com.shatteredpixel.shatteredpixeldungeon.Badges;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.Journal;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
-import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
-import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
 import com.shatteredpixel.shatteredpixeldungeon.items.EquipableItem;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.quest.DarkGold;
@@ -101,7 +100,7 @@ public void onBackPressed() {
 					
 					Pickaxe pick = new Pickaxe();
 					if (pick.doPickUp( Dungeon.hero )) {
-						GLog.i( Hero.TXT_YOU_NOW_HAVE, pick.name() );
+						GLog.i( Messages.get(Dungeon.hero, "you_now_have", pick.name() ));
 					} else {
 						Dungeon.level.drop( pick, Dungeon.hero.pos ).sprite.drop();
 					}

File: src/com/shatteredpixel/shatteredpixeldungeon/items/quest/Pickaxe.java
Patch:
@@ -22,6 +22,7 @@
 
 import java.util.ArrayList;
 
+import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.watabou.noosa.audio.Sample;
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
@@ -113,7 +114,7 @@ public void call() {
 							
 							DarkGold gold = new DarkGold();
 							if (gold.doPickUp( Dungeon.hero )) {
-								GLog.i( Hero.TXT_YOU_NOW_HAVE, gold.name() );
+								GLog.i( Messages.get(Dungeon.hero, "you_now_have", gold.name()) );
 							} else {
 								Dungeon.level.drop( gold, hero.pos ).sprite.drop();
 							}

File: src/com/shatteredpixel/shatteredpixeldungeon/windows/WndImp.java
Patch:
@@ -20,9 +20,9 @@
  */
 package com.shatteredpixel.shatteredpixeldungeon.windows;
 
+import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.watabou.noosa.BitmapTextMultiline;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
-import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Imp;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.quest.DwarfToken;
@@ -81,7 +81,7 @@ private void takeReward( Imp imp, DwarfToken tokens, Item reward ) {
 
 		reward.identify();
 		if (reward.doPickUp( Dungeon.hero )) {
-			GLog.i( Hero.TXT_YOU_NOW_HAVE, reward.name() );
+			GLog.i( Messages.get(Dungeon.hero, "you_now_have", reward.name()) );
 		} else {
 			Dungeon.level.drop( reward, imp.pos ).sprite.drop();
 		}

File: src/com/shatteredpixel/shatteredpixeldungeon/windows/WndSadGhost.java
Patch:
@@ -22,9 +22,9 @@
 
 import com.shatteredpixel.shatteredpixeldungeon.Challenges;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
-import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Ghost;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
+import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.FetidRatSprite;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.GnollTricksterSprite;
@@ -121,7 +121,7 @@ private void selectReward( Ghost ghost, Item reward ) {
 		hide();
 		
 		if (reward.doPickUp( Dungeon.hero )) {
-			GLog.i( Hero.TXT_YOU_NOW_HAVE, reward.name() );
+			GLog.i( Messages.get(Dungeon.hero, "you_now_have", reward.name()) );
 		} else {
 			Dungeon.level.drop( reward, ghost.pos ).sprite.drop();
 		}

File: src/com/shatteredpixel/shatteredpixeldungeon/windows/WndWandmaker.java
Patch:
@@ -22,10 +22,10 @@
 
 import com.shatteredpixel.shatteredpixeldungeon.items.quest.CorpseDust;
 import com.shatteredpixel.shatteredpixeldungeon.items.quest.Embers;
+import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.plants.Rotberry;
 import com.watabou.noosa.BitmapTextMultiline;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
-import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Wandmaker;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand;
@@ -110,7 +110,7 @@ private void selectReward( Wandmaker wandmaker, Item item, Wand reward ) {
 
 		reward.identify();
 		if (reward.doPickUp( Dungeon.hero )) {
-			GLog.i( Hero.TXT_YOU_NOW_HAVE, reward.name() );
+			GLog.i( Messages.get(Dungeon.hero, "you_now_have", reward.name()) );
 		} else {
 			Dungeon.level.drop( reward, wandmaker.pos ).sprite.drop();
 		}

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/Actor.java
Patch:
@@ -136,7 +136,7 @@ public static void fixTime() {
 	
 	public static void init() {
 		
-		addDelayed( Dungeon.hero, -Float.MIN_VALUE );
+		add( Dungeon.hero );
 		
 		for (Mob mob : Dungeon.level.mobs) {
 			add( mob );
@@ -231,7 +231,7 @@ private static void add( Actor actor, float time ) {
 		ids.put( actor.id(),  actor );
 
 		all.add( actor );
-		actor.time = time;
+		actor.time += time;
 		actor.onAdd();
 		
 		if (actor instanceof Char) {

File: src/com/shatteredpixel/shatteredpixeldungeon/items/armor/RogueArmor.java
Patch:
@@ -93,7 +93,7 @@ public void onSelect( Integer target ) {
 
 				curUser.HP -= (curUser.HP / 3);
 				
-				for (Mob mob : Dungeon.level.mobs) {
+				for (Mob mob : Dungeon.level.mobs.toArray(new Mob[Dungeon.level.mobs.size()])) {
 					if (Level.fieldOfView[mob.pos]) {
 						Buff.prolong( mob, Blindness.class, 2 );
 						if (mob.state == mob.HUNTING) mob.state = mob.WANDERING;

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -642,7 +642,7 @@ protected class Fleeing implements AiState {
 		public boolean act( boolean enemyInFOV, boolean justAlerted ) {
 			enemySeen = enemyInFOV;
 			//loses target when 0-dist rolls a 6 or greater.
-			if (!enemyInFOV && 1 + Random.Int(Level.distance(pos, target)) >= 6){
+			if (enemy == null || !enemyInFOV && 1 + Random.Int(Level.distance(pos, target)) >= 6){
 				target = -1;
 			} else {
 				target = enemy.pos;

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Thief.java
Patch:
@@ -22,6 +22,7 @@
 
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Corruption;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Terror;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.effects.CellEmitter;
@@ -186,7 +187,7 @@ public String description() {
 	private class Fleeing extends Mob.Fleeing {
 		@Override
 		protected void nowhereToRun() {
-			if (buff( Terror.class ) == null) {
+			if (buff( Terror.class ) == null && buff( Corruption.class ) == null) {
 				if (enemySeen) {
 					sprite.showStatus(CharSprite.NEGATIVE, TXT_RAGE);
 					state = HUNTING;

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/SandalsOfNature.java
Patch:
@@ -183,7 +183,7 @@ public void storeInBundle( Bundle bundle ) {
 	@Override
 	public void restoreFromBundle( Bundle bundle ) {
 		super.restoreFromBundle(bundle);
-		name = NAMES[level()+1];
+		name = NAMES[level()];
 		if (bundle.contains(SEEDS))
 			Collections.addAll(seeds , bundle.getStringArray(SEEDS));
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/sprites/NewbornElementalSprite.java
Patch:
@@ -33,7 +33,7 @@ public NewbornElementalSprite() {
 
 		texture( Assets.ELEMENTAL );
 
-		int ofs = 22;
+		int ofs = 21;
 
 		TextureFilm frames = new TextureFilm( texture, 12, 14 );
 

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -113,6 +113,8 @@ public void restoreFromBundle( Bundle bundle ) {
 	}
 	
 	public boolean attack( Char enemy ) {
+
+		if (enemy == null || !enemy.isAlive()) return false;
 		
 		boolean visibleFight = Dungeon.visible[pos] || Dungeon.visible[enemy.pos];
 		

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Tengu.java
Patch:
@@ -167,7 +167,9 @@ private void jump() {
 				ScrollOfMagicMapping.discover( trapPos );
 			}
 		}
-		
+
+		if (enemy == null) enemy = chooseEnemy();
+
 		int newPos;
 		//if we're in phase 1, want to warp around within the room
 		if (HP > HT/2) {

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/DisintegrationTrap.java
Patch:
@@ -77,7 +77,7 @@ public void activate() {
 						bag = (Bag)item;
 						item = Random.element(bag.items);
 					}
-					if (item.level() > 0 || item.unique) return;
+					if (item == null || item.level() > 0 || item.unique) return;
 					if (!item.stackable){
 						item.detachAll(bag);
 						GLog.w("the trap disintegrates your " + item.name() + "!");

File: src/com/shatteredpixel/shatteredpixeldungeon/items/quest/CeremonialCandle.java
Patch:
@@ -43,6 +43,8 @@ public class CeremonialCandle extends Item {
 		name = "ceremonial candle";
 		image = ItemSpriteSheet.CANDLE;
 
+		defaultAction = AC_THROW;
+
 		unique = true;
 		stackable = true;
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfPrismaticLight.java
Patch:
@@ -68,7 +68,7 @@ protected void onZap(Ballistica beam) {
 		}
 		affectMap(beam);
 
-		if (curUser.viewDistance < 4)
+		if (Dungeon.level.viewDistance < 4)
 			Buff.prolong( curUser, Light.class, 10f+level()*5);
 	}
 

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Thief.java
Patch:
@@ -169,7 +169,7 @@ public String description() {
 				"Over time, this place has taken their minds as well as their freedom. " +
 				"Long ago, these crazy thieves and bandits have forgotten who they are and why they steal.\n\n" +
 				"These enemies are more likely to steal and run than they are to fight. " +
-				"Make sure to keep them in sight, of you might never see your stolen item again.";
+				"Make sure to keep them in sight, or you might never see your stolen item again.";
 
 		if (item != null) {
 			desc += String.format( TXT_CARRIES, Utils.capitalize( this.name ), item.name() );

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Guard.java
Patch:
@@ -65,6 +65,7 @@ protected boolean act() {
 		Dungeon.level.updateFieldOfView( this );
 
 		if (state == HUNTING &&
+				paralysed <= 0 &&
 				enemy != null &&
 				enemy.invisible == 0 &&
 				Level.fieldOfView[enemy.pos] &&

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Tengu.java
Patch:
@@ -172,7 +172,7 @@ private void jump() {
 			do {
 				newPos = Random.Int(Level.LENGTH);
 			} while (
-					!Level.fieldOfView[newPos] ||
+					!(Dungeon.level.map[newPos] == Terrain.INACTIVE_TRAP || Dungeon.level.map[newPos] == Terrain.TRAP)||
 							Level.solid[newPos] ||
 							Level.adjacent(newPos, enemy.pos) ||
 							Actor.findChar(newPos) != null);

File: src/com/shatteredpixel/shatteredpixeldungeon/windows/WndOptions.java
Patch:
@@ -41,7 +41,7 @@ public WndOptions( String title, String message, String... options ) {
 		tfTitle.measure();
 		add( tfTitle );
 		
-		BitmapTextMultiline tfMesage = PixelScene.createMultiline( message, 8 );
+		BitmapTextMultiline tfMesage = PixelScene.createMultiline( message, 6 );
 		tfMesage.maxWidth = WIDTH - MARGIN * 2;
 		tfMesage.measure();
 		tfMesage.x = MARGIN;

File: src/com/shatteredpixel/shatteredpixeldungeon/ui/Window.java
Patch:
@@ -33,6 +33,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
 import com.watabou.utils.Signal;
 
+//TODO: need to do a big consistency pass on windows now that text size is consistent (larger in many cases)
 public class Window extends Group implements Signal.Listener<Key> {
 
 	protected int width;

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Tengu.java
Patch:
@@ -92,6 +92,9 @@ public void damage(int dmg, Object src) {
 
 		//phase 2 of the fight is over
 		if (dmg >= HP) {
+			if (state == SLEEPING) {
+				state = WANDERING;
+			}
 			((PrisonBossLevel)Dungeon.level).progress();
 			return;
 		}

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Guard.java
Patch:
@@ -66,6 +66,7 @@ protected boolean act() {
 
 		if (state == HUNTING &&
 				enemy != null &&
+				enemy.invisible == 0 &&
 				Level.fieldOfView[enemy.pos] &&
 				Level.distance( pos, enemy.pos ) < 5 && !Level.adjacent( pos, enemy.pos ) &&
 				Random.Int(3) == 0 &&

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/CavesLevel.java
Patch:
@@ -79,7 +79,7 @@ protected float[] trapChances() {
 	
 	@Override
 	protected boolean assignRoomType() {
-		super.assignRoomType();
+		if (!super.assignRoomType()) return false;
 
 		if (!Blacksmith.Quest.spawn( rooms ) && Dungeon.depth == 14)
 			return false;

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/CityLevel.java
Patch:
@@ -75,7 +75,7 @@ protected float[] trapChances() {
 	
 	@Override
 	protected boolean assignRoomType() {
-		super.assignRoomType();
+		if (!super.assignRoomType()) return false;
 		
 		for (Room r : rooms) {
 			if (r.type == Type.TUNNEL) {

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonLevel.java
Patch:
@@ -74,7 +74,7 @@ protected float[] trapChances() {
 
 	@Override
 	protected boolean assignRoomType() {
-		super.assignRoomType();
+		if (!super.assignRoomType()) return false;
 		
 		for (Room r : rooms) {
 			if (r.type == Type.TUNNEL) {

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Bee.java
Patch:
@@ -39,6 +39,8 @@ public class Bee extends Mob {
 		spriteClass = BeeSprite.class;
 		
 		viewDistance = 4;
+
+		EXP = 0;
 		
 		flying = true;
 		state = WANDERING;
@@ -118,7 +120,7 @@ else if (Actor.findById(potHolder) != null)
 		else {
 
 			//if already targeting something, and that thing is still alive and near the pot, keeping targeting it.
-			if (enemy != null && enemy.isAlive()
+			if (enemy != null && enemy.isAlive() && Dungeon.level.mobs.contains(enemy)
 					&& Level.fieldOfView[enemy.pos] && enemy.invisible == 0
 					&& Level.distance(enemy.pos, potPos) <= 3)
 				return enemy;

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Tengu.java
Patch:
@@ -250,6 +250,9 @@ public boolean act(boolean enemyInFOV, boolean justAlerted) {
 
 				if (enemyInFOV) {
 					target = enemy.pos;
+				} else {
+					chooseEnemy();
+					target = enemy.pos;
 				}
 
 				spend( TICK );

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/CavesBossLevel.java
Patch:
@@ -189,7 +189,7 @@ protected void decorate() {
 		int sign;
 		do {
 			sign = Random.Int( ROOM_LEFT, ROOM_RIGHT ) + Random.Int( ROOM_TOP, ROOM_BOTTOM ) * WIDTH;
-		} while (sign == entrance);
+		} while (sign == entrance || map[sign] == Terrain.INACTIVE_TRAP);
 		map[sign] = Terrain.SIGN;
 	}
 	

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/ShopPainter.java
Patch:
@@ -234,7 +234,7 @@ private static void generateItems() {
 		switch (Random.Int(10)){
 			case 0:
 				rare = Generator.random( Generator.Category.WAND );
-				rare.level = 0;
+				if (rare.level > 0 ) rare.degrade( rare.level );
 				break;
 			case 1:
 				rare = Generator.random(Generator.Category.RING);

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/RegularLevel.java
Patch:
@@ -210,7 +210,7 @@ protected boolean assignRoomType() {
 					r.width() > 3 && r.height() > 3 &&
 					Random.Int( specialRooms * specialRooms + 2 ) == 0) {
 
-					if (pitRoomNeeded) {
+					if (pitRoomNeeded && !pitMade) {
 
 						r.type = Type.PIT;
 						pitMade = true;

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonBossLevel.java
Patch:
@@ -499,7 +499,7 @@ public void addVisuals( Scene scene ) {
 					W, W, M, W, W, _, W, W, _, W, _, _, _, _, _, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W,
 					W, _, _, _, W, _, W, _, _, _, W, _, _, _, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W,
 					W, _, _, _, D, _, D, _, _, _, _, _, _, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W,
-					W, _, _, _, W, _, W, _, _, _, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W,
+					W, _, _, _, W, _, W, _, _, _, _, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W,
 					W, W, M, W, W, _, W, W, M, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W,
 					W, W, W, W, W, _, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W,
 					W, W, W, M, W, D, W, M, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W,

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonBossLevel.java
Patch:
@@ -114,7 +114,7 @@ public void restoreFromBundle( Bundle bundle ) {
 	@Override
 	protected boolean build() {
 		
-		map = MAP_START;
+		map = MAP_START.clone();
 		decorate();
 
 		buildFlagMaps();
@@ -229,7 +229,7 @@ private void resetTraps(){
 	}
 
 	private void changeMap(int[] map){
-		this.map = map;
+		this.map = map.clone();
 		GameScene.resetMap();
 		buildFlagMaps();
 		cleanWalls();

File: src/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfBlastWave.java
Patch:
@@ -29,6 +29,8 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Paralysis;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Golem;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.King;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.RotHeart;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.RotLasher;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Yog;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Effects;
 import com.shatteredpixel.shatteredpixeldungeon.effects.MagicMissile;
@@ -110,7 +112,7 @@ private void throwChar(final Char ch, final Ballistica trajectory, int power){
 		if ((ch instanceof King) || (ch instanceof Golem) || (ch instanceof Yog.RottingFist))
 			dist /= 2;
 
-		if (dist == 0 || ch instanceof Yog) return;
+		if (dist == 0 || ch instanceof Yog || ch instanceof RotLasher || ch instanceof RotHeart) return;
 
 		if (Actor.findChar(trajectory.path.get(dist)) != null){
 			dist--;

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Tengu.java
Patch:
@@ -86,7 +86,8 @@ public int dr() {
 
 	@Override
 	public void damage(int dmg, Object src) {
-		if (dmg > HP) {
+		//phase 2 of the fight is over
+		if (dmg >= HP) {
 			((PrisonBossLevel)Dungeon.level).progress();
 			return;
 		}

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonBossLevel.java
Patch:
@@ -303,11 +303,11 @@ public void progress(){
 				Dungeon.hero.sprite.interruptMotion();
 				Dungeon.hero.sprite.place(Dungeon.hero.pos);
 
-				changeMap(MAP_END);
-
 				tengu.pos = 5+28*32;
-				tengu.sprite.interruptMotion();
 				tengu.sprite.place(5 + 28 * 32);
+
+				changeMap(MAP_END);
+
 				tengu.die(Dungeon.hero);
 
 				state = State.WON;

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
Patch:
@@ -326,8 +326,7 @@ public static void restoreFromBundle( Bundle bundle ) {
 		}
 		
 		public static boolean spawn( PrisonLevel level, Room room, Collection<Room> rooms ) {
-			if (!spawned && Dungeon.depth > 6 && Random.Int( 10 - Dungeon.depth ) == 0
-					|| type != 0) {
+			if (!spawned && (type != 0 || (Dungeon.depth > 6 && Random.Int( 10 - Dungeon.depth ) == 0))) {
 				// decide between 1,2, or 3 for quest type.
 				// but if the no herbalism challenge is enabled, only pick 1 or 2, no rotberry.
 				if (type == 0) type = Random.Int(Dungeon.isChallenged(Challenges.NO_HERBALISM) ? 2 : 3)+1;

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Fury.java
Patch:
@@ -57,6 +57,6 @@ public String desc() {
 				"\n" +
 				"A great rage burns within you, increasing the damage you deal with physical attacks by 50%. \n" +
 				"\n" +
-				"This rage will last as long as you are injured below 40% health.\n";
+				"This rage will last as long as you are injured below 50% health.\n";
 	}
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MeleeWeapon.java
Patch:
@@ -95,7 +95,7 @@ public String info() {
 		
 		if (levelKnown) {
 			info.append( "Its average damage is " +
-				Math.round((MIN + (MAX - MIN) / 2)*(imbue == Imbue.LIGHT ? 0.75f : (imbue == Imbue.HEAVY ? 1.5f : 1)))
+				Math.round((MIN + (MAX - MIN) / 2)*(imbue == Imbue.LIGHT ? 0.7f : (imbue == Imbue.HEAVY ? 1.5f : 1)))
 				+ " points per hit. " );
 		} else {
 			info.append(

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
Patch:
@@ -270,7 +270,7 @@ public static void storeInBundle( Bundle bundle ) {
 				node.put( GIVEN, given );
 				
 				node.put( WAND1, wand1 );
-				node.put(WAND2, wand2);
+				node.put( WAND2, wand2 );
 
 				if (type == 2){
 					node.put( RITUALPOS, CeremonialCandle.ritualPos );
@@ -288,7 +288,7 @@ public static void restoreFromBundle( Bundle bundle ) {
 			if (!node.isNull() && (spawned = node.getBoolean( SPAWNED ))) {
 
 				//TODO remove when pre-0.3.2 saves are no longer supported
-				if (bundle.contains(TYPE)) {
+				if (node.contains(TYPE)) {
 					type = node.getInt(TYPE);
 				} else {
 					type = node.getBoolean("alternative")? 1 : 3;
@@ -300,7 +300,7 @@ public static void restoreFromBundle( Bundle bundle ) {
 				wand2 = (Wand)node.get( WAND2 );
 
 				if (type == 2){
-					CeremonialCandle.ritualPos = bundle.getInt( RITUALPOS );
+					CeremonialCandle.ritualPos = node.getInt( RITUALPOS );
 				}
 
 			} else {

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/RitualSitePainter.java
Patch:
@@ -47,6 +47,8 @@ public static void paint( Level level, Room room) {
 
 		level.customTiles.add(vis);
 
+		fill(level, c.x-1, c.y-1, 3, 3, Terrain.EMPTY_DECO);
+
 		level.addItemToSpawn(new CeremonialCandle());
 		level.addItemToSpawn(new CeremonialCandle());
 		level.addItemToSpawn(new CeremonialCandle());

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/MassGravePainter.java
Patch:
@@ -56,7 +56,7 @@ public static void paint( Level level, Room room){
 			int pos;
 			do {
 				pos = room.random();
-			} while (level.map[pos] != Terrain.EMPTY_SP);
+			} while (level.map[pos] != Terrain.EMPTY_SP || level.findMob(pos) != null);
 			skele.pos = pos;
 			level.mobs.add( skele );
 		}

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/DistortionTrap.java
Patch:
@@ -39,7 +39,7 @@ public class DistortionTrap extends Trap{
 	@Override
 	public void activate() {
 		InterlevelScene.returnDepth = Dungeon.depth;
-		for (Item item : Dungeon.hero.belongings.backpack.items){
+		for (Item item : Dungeon.hero.belongings.backpack.items.toArray( new Item[0])){
 			if (item instanceof Key && ((Key)item).depth == Dungeon.depth){
 				item.detachAll(Dungeon.hero.belongings.backpack);
 			}

File: src/com/shatteredpixel/shatteredpixeldungeon/sprites/GooSprite.java
Patch:
@@ -96,6 +96,7 @@ public void spray(boolean on){
 	public void update() {
 		super.update();
 		spray.pos(center());
+		spray.visible = visible;
 	}
 
 	public static class GooParticle extends PixelParticle.Shrinking {

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -388,6 +388,9 @@ public int defenseProc( Char enemy, int damage ) {
 
 	public void aggro( Char ch ) {
 		enemy = ch;
+		if (state != PASSIVE){
+			state = HUNTING;
+		}
 	}
 
 	@Override

File: src/com/shatteredpixel/shatteredpixeldungeon/sprites/ItemSpriteSheet.java
Patch:
@@ -226,8 +226,8 @@ public class ItemSpriteSheet {
 	public static final int DUST	= ROW14+1;
 	public static final int CANDLE	= ROW14+2;
 	public static final int PICKAXE	= ROW14+3;
-	public static final int ORE		= ROW14+3;
-	public static final int TOKEN	= ROW14+4;
+	public static final int ORE		= ROW14+4;
+	public static final int TOKEN	= ROW14+5;
 
 	//Row Fifteen: Containers/Bags
 	public static final int VIAL	    = ROW15+0;

File: src/com/shatteredpixel/shatteredpixeldungeon/scenes/PixelScene.java
Patch:
@@ -265,8 +265,8 @@ public PixelCamera( float zoom ) {
 		
 		@Override
 		protected void updateMatrix() {
-			float sx = scroll.x + shakeX;
-			float sy = scroll.y + shakeY;
+			float sx = Math.round(scroll.x + shakeX);
+			float sy = Math.round(scroll.y + shakeY);
 			
 			matrix[0] = +zoom * invW2;
 			matrix[5] = -zoom * invH2;

File: src/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -140,8 +140,6 @@ public static void init() {
 		version = Game.versionCode;
 		challenges = ShatteredPixelDungeon.challenges();
 
-		Generator.initArtifacts();
-
 		Actor.clear();
 		Actor.resetNextID();
 		
@@ -175,7 +173,8 @@ public static void init() {
 		Imp.Quest.reset();
 		
 		Room.shuffleTypes();
-		
+
+		Generator.initArtifacts();
 		hero = new Hero();
 		hero.live();
 		

File: src/com/shatteredpixel/shatteredpixeldungeon/items/Generator.java
Patch:
@@ -202,7 +202,7 @@ public static int order( Item item ) {
 			LloydsBeacon.class,
 			EtherealChains.class
 			};
-		Category.ARTIFACT.probs = INITIAL_ARTIFACT_PROBS;
+		Category.ARTIFACT.probs = INITIAL_ARTIFACT_PROBS.clone();
 		
 		Category.SEED.classes = new Class<?>[]{
 			Firebloom.Seed.class,
@@ -360,10 +360,10 @@ public static boolean removeArtifact(Artifact artifact) {
 
 	//resets artifact probabilities, for new dungeons
 	public static void initArtifacts() {
-		Category.ARTIFACT.probs = INITIAL_ARTIFACT_PROBS;
+		Category.ARTIFACT.probs = INITIAL_ARTIFACT_PROBS.clone();
 
 		//checks for dried rose quest completion, adds the rose in accordingly.
-		if (Ghost.Quest.processed) Category.ARTIFACT.probs[10] = 1;
+		if (Ghost.Quest.completed()) Category.ARTIFACT.probs[10] = 1;
 
 		spawnedArtifacts = new ArrayList<String>();
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/sprites/CharSprite.java
Patch:
@@ -157,7 +157,6 @@ public void move( int from, int to ) {
 			GameScene.ripple( from );
 		}
 
-		ch.onMotionComplete();
 	}
 	
 	public void interruptMotion() {

File: src/com/shatteredpixel/shatteredpixeldungeon/sprites/TenguSprite.java
Patch:
@@ -69,7 +69,6 @@ public void move( int from, int to ) {
 			GameScene.ripple( to );
 		}
 
-		ch.onMotionComplete();
 	}
 	
 	@Override

File: src/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfDisintegration.java
Patch:
@@ -81,7 +81,7 @@ protected void onZap( Ballistica beam ) {
 				
 			}
 
-			if (!Level.passable[c])
+			if (Level.solid[c])
 				terrainPassed++;
 			
 			CellEmitter.center( c ).burst( PurpleParticle.BURST, Random.IntRange( 1, 2 ) );

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/PitfallTrap.java
Patch:
@@ -69,8 +69,8 @@ protected void disarm() {
 		super.disarm();
 
 		//if making a pit here wouldn't block any paths, make a pit tile instead of a disarmed trap tile.
-		if (!(Dungeon.level.map[pos - Level.WIDTH] == Terrain.WALL && Dungeon.level.map[pos + Level.WIDTH] == Terrain.WALL)
-				&& !(Dungeon.level.map[pos - 1] == Terrain.WALL && Dungeon.level.map[pos + 1] == Terrain.WALL)){
+		if (!(Dungeon.level.solid[pos - Level.WIDTH] && Dungeon.level.solid[pos + Level.WIDTH])
+				&& !(Dungeon.level.solid[pos - 1]&& Dungeon.level.solid[pos + 1])){
 
 			int c = Dungeon.level.map[pos - Level.WIDTH];
 

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/VenomGas.java
Patch:
@@ -77,6 +77,6 @@ public void use( BlobEmitter emitter ) {
 
 	@Override
 	public String tileDesc() {
-		return "A could of foul acidic venom is swirling here.";
+		return "A cloud of foul acidic venom is swirling here.";
 	}
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/HallsBossLevel.java
Patch:
@@ -159,6 +159,7 @@ protected void createItems() {
 	
 	@Override
 	public int randomRespawnCell() {
+		if (entrance == -1) return entrance;
 		int cell = entrance + NEIGHBOURS8[Random.Int(8)];
 		while (!passable[cell]){
 			cell = entrance + NEIGHBOURS8[Random.Int(8)];

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/SpearTrap.java
Patch:
@@ -46,6 +46,7 @@ public void trigger() {
 			Sample.INSTANCE.play(Assets.SND_TRAP);
 		}
 		//this trap is not disarmed by being triggered
+		reveal();
 		activate();
 	}
 

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/Trap.java
Patch:
@@ -72,6 +72,7 @@ public void trigger() {
 				Sample.INSTANCE.play(Assets.SND_TRAP);
 			}
 			disarm();
+			reveal();
 			activate();
 		}
 	}
@@ -82,7 +83,6 @@ protected void disarm(){
 		Dungeon.level.disarmTrap(pos);
 		active = false;
 		if (sprite != null) {
-			sprite.visible = true;
 			sprite.reset( this );
 		}
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/BlazingTrap.java
Patch:
@@ -55,6 +55,6 @@ public void activate() {
 
 	@Override
 	public String desc() {
-		return  "stepping on this trap will ignite a powerful chemical mixture, setting a wide area ablaze.";
+		return  "Stepping on this trap will ignite a powerful chemical mixture, setting a wide area ablaze.";
 	}
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/ChillingTrap.java
Patch:
@@ -65,6 +65,6 @@ public void activate() {
 
 	@Override
 	public String desc() {
-		return "when activated, chemicals in this trap will trigger a snap-frost at its location.";
+		return "When activated, chemicals in this trap will trigger a snap-frost at its location.";
 	}
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/CursingTrap.java
Patch:
@@ -72,6 +72,6 @@ public void activate() {
 	@Override
 	public String desc() {
 		return "This trap contains the same malevolent magic found in cursed equipment. " +
-				"Trigger it will curse all worn items, and all items in the immediate area.";
+				"Triggering it will curse all worn items, and all items in the immediate area.";
 	}
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/DisintegrationTrap.java
Patch:
@@ -95,7 +95,7 @@ public void activate() {
 
 	@Override
 	public String desc() {
-		return "Then triggered, this trap will lance the target with beams of disintegration, " +
+		return "When triggered, this trap will lance the target with beams of disintegration, " +
 				"dealing significant damage and destroying items.";
 	}
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/DistortionTrap.java
Patch:
@@ -50,6 +50,6 @@ public void activate() {
 
 	@Override
 	public String desc() {
-		return "Build from strange magic of unknown origin, this trap will shift and morph the world around you.";
+		return "Built from strange magic of unknown origin, this trap will shift and morph the world around you.";
 	}
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/FireTrap.java
Patch:
@@ -45,6 +45,6 @@ public void activate() {
 
 	@Override
 	public String desc() {
-		return "stepping on this trap will ignite a chemical mixture, setting the immediate area aflame.";
+		return "Stepping on this trap will ignite a chemical mixture, setting the immediate area aflame.";
 	}
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/FlashingTrap.java
Patch:
@@ -68,7 +68,7 @@ public void activate() {
 
 	@Override
 	public String desc() {
-		return "On activation, this trap with ignite a potent flashing powder stored within, " +
+		return "On activation, this trap will ignite a potent flashing powder stored within, " +
 				"temporarily blinding and crippling its victim.";
 	}
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/FrostTrap.java
Patch:
@@ -67,6 +67,6 @@ public void activate() {
 
 	@Override
 	public String desc() {
-		return "when activated, chemicals in this trap will trigger a powerful snap-frost at its location.";
+		return "When activated, chemicals in this trap will trigger a powerful snap-frost at its location.";
 	}
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/GrippingTrap.java
Patch:
@@ -58,7 +58,7 @@ public void activate() {
 
 	@Override
 	public String desc() {
-		return "triggering this trap will send barbed claws along the ground, " +
+		return "Triggering this trap will send barbed claws along the ground, " +
 				"damaging the victims feet and rooting them in place.";
 	}
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/OozeTrap.java
Patch:
@@ -47,6 +47,6 @@ public void activate() {
 
 	@Override
 	public String desc() {
-		return "This trap with splash out caustic ooze when activated, which will burn until it is washed away.";
+		return "This trap will splash out caustic ooze when activated, which will burn until it is washed away.";
 	}
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/PitfallTrap.java
Patch:
@@ -88,6 +88,6 @@ protected void disarm() {
 
 	@Override
 	public String desc() {
-		return "This pressure plate rests ontop of a fairly weak floor, and will likely collapse into a pit if it is pressed.";
+		return "This pressure plate rests atop a fairly weak floor, and will likely collapse into a pit if it is pressed.";
 	}
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/items/KindofMisc.java
Patch:
@@ -23,6 +23,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.items.EquipableItem;
 
+
 public abstract class KindofMisc extends EquipableItem {
 
 	public abstract void activate(Char ch);

File: src/com/shatteredpixel/shatteredpixeldungeon/items/armor/ClothArmor.java
Patch:
@@ -22,7 +22,6 @@
 
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
 
-
 public class ClothArmor extends Armor {
 
 	{

File: src/com/shatteredpixel/shatteredpixeldungeon/items/armor/LeatherArmor.java
Patch:
@@ -22,7 +22,6 @@
 
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
 
-
 public class LeatherArmor extends Armor {
 
 	{

File: src/com/shatteredpixel/shatteredpixeldungeon/items/armor/MailArmor.java
Patch:
@@ -22,7 +22,6 @@
 
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
 
-
 public class MailArmor extends Armor {
 
 	{

File: src/com/shatteredpixel/shatteredpixeldungeon/items/armor/PlateArmor.java
Patch:
@@ -22,7 +22,6 @@
 
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
 
-
 public class PlateArmor extends Armor {
 
 	{

File: src/com/shatteredpixel/shatteredpixeldungeon/items/armor/ScaleArmor.java
Patch:
@@ -22,7 +22,6 @@
 
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
 
-
 public class ScaleArmor extends Armor {
 
 	{

File: src/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfCorruption.java
Patch:
@@ -44,6 +44,7 @@
 import java.util.Arrays;
 import java.util.HashSet;
 
+
 //TODO: balancing
 public class WandOfCorruption extends Wand {
 

File: src/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfWealth.java
Patch:
@@ -35,7 +35,7 @@ protected RingBuff buff( ) {
 	public String desc() {
 		return isKnown() ?
 				"It's not clear what this ring does exactly, good luck may influence " +
-				"the life an an adventurer in many subtle ways. " +
+				"the life of an adventurer in many subtle ways. " +
 				"Naturally a degraded ring would give bad luck." :
 				super.desc();
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/ui/QuickSlotButton.java
Patch:
@@ -188,13 +188,13 @@ private void useTargeting() {
 
 	public static int autoAim(Char target){
 		//first try to directly target
-		if (new Ballistica(Dungeon.hero.pos, target.pos, Ballistica.PROJECTILE).collisionPos == lastTarget.pos) {
+		if (new Ballistica(Dungeon.hero.pos, target.pos, Ballistica.PROJECTILE).collisionPos == target.pos) {
 			return target.pos;
 		}
 
 		//Otherwise pick nearby tiles to try and 'angle' the shot, auto-aim basically.
 		for (int i : Level.NEIGHBOURS9DIST2) {
-			if (new Ballistica(Dungeon.hero.pos, lastTarget.pos+i, Ballistica.PROJECTILE).collisionPos == lastTarget.pos){
+			if (new Ballistica(Dungeon.hero.pos, target.pos+i, Ballistica.PROJECTILE).collisionPos == target.pos){
 				return target.pos+i;
 			}
 		}

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -241,7 +241,7 @@ public float speed() {
 	
 	public void damage( int dmg, Object src ) {
 		
-		if (HP <= 0) {
+		if (HP <= 0 || dmg < 0) {
 			return;
 		}
 		if (this.buff(Frost.class) != null){

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/SpearTrap.java
Patch:
@@ -60,7 +60,7 @@ public void activate() {
 		if (ch != null){
 			int damage = Random.NormalIntRange(Dungeon.depth, Dungeon.depth*2);
 			damage -= Random.IntRange( 0, ch.dr());
-			ch.damage( damage , this);
+			ch.damage( Math.max(damage, 0) , this);
 			if (!ch.isAlive() && ch == Dungeon.hero){
 				Dungeon.fail(Utils.format(ResultDescriptions.TRAP, name));
 				GLog.n("You were skewered by the spear trap...");

File: src/com/shatteredpixel/shatteredpixeldungeon/scenes/BadgesScene.java
Patch:
@@ -48,7 +48,7 @@ public void create() {
 		super.create();
 
 		Music.INSTANCE.play( Assets.THEME, true );
-		Music.INSTANCE.volume( 1f );
+		Music.INSTANCE.volume( ShatteredPixelDungeon.musicVol() / 10f  );
 
 		uiCamera.visible = false;
 

File: src/com/shatteredpixel/shatteredpixeldungeon/ui/Toolbar.java
Patch:
@@ -280,7 +280,7 @@ public void onSelect( Integer cell ) {
 			}
 
 			Heap heap = Dungeon.level.heaps.get(cell);
-			if (heap != null) {
+			if (heap != null && heap.seen) {
 				if (heap.type == Heap.Type.FOR_SALE && heap.size() == 1 && heap.peek().price() > 0) {
 					GameScene.show(new WndTradeItem(heap, false));
 				} else {

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -700,7 +700,7 @@ public Heap drop( Item item, int cell ) {
 		if (heap == null) {
 			
 			heap = new Heap();
-			heap.seen = fieldOfView[cell];
+			heap.seen = Dungeon.visible[cell];
 			heap.pos = cell;
 			if (map[cell] == Terrain.CHASM || (Dungeon.level != null && pit[cell])) {
 				Dungeon.dropToChasm( item );

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/LloydsBeacon.java
Patch:
@@ -204,15 +204,13 @@ public void onSelect(Integer target) {
 
 			if (Actor.findChar(target) == curUser){
 				ScrollOfTeleportation.teleportHero(curUser);
-				Sample.INSTANCE.play(Assets.SND_TELEPORT);
 				curUser.spendAndNext(1f);
 			} else {
 				final Ballistica bolt = new Ballistica( curUser.pos, target, Ballistica.MAGIC_BOLT );
 				final Char ch = Actor.findChar(bolt.collisionPos);
 
 				if (ch == curUser){
 					ScrollOfTeleportation.teleportHero(curUser);
-					Sample.INSTANCE.play(Assets.SND_TELEPORT);
 					curUser.spendAndNext( 1f );
 				} else {
 					Sample.INSTANCE.play( Assets.SND_ZAP );
@@ -233,7 +231,7 @@ public void call() {
 									}
 								} while (pos == -1);
 
-								if (pos == -1) {
+								if (pos == -1 || Dungeon.bossLevel()) {
 
 									GLog.w(ScrollOfTeleportation.TXT_NO_TELEPORT);
 

File: src/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfTeleportation.java
Patch:
@@ -66,7 +66,7 @@ public static void teleportHero( Hero  hero ) {
 			}
 		} while (pos == -1);
 		
-		if (pos == -1) {
+		if (pos == -1 || Dungeon.bossLevel()) {
 			
 			GLog.w( TXT_NO_TELEPORT );
 			

File: src/com/shatteredpixel/shatteredpixeldungeon/items/wands/CursedWand.java
Patch:
@@ -164,7 +164,7 @@ public void call() {
 											break;
 										}
 									} while (pos == -1);
-									if (pos == -1) {
+									if (pos == -1 || Dungeon.bossLevel()) {
 										GLog.w(ScrollOfTeleportation.TXT_NO_TELEPORT);
 									} else {
 										ch.pos = pos;

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/TeleportationTrap.java
Patch:
@@ -64,7 +64,7 @@ public void activate() {
 				}
 			} while (pos == -1);
 
-			if (pos == -1) {
+			if (pos == -1 || Dungeon.bossLevel()) {
 
 				GLog.w(ScrollOfTeleportation.TXT_NO_TELEPORT);
 

File: src/com/shatteredpixel/shatteredpixeldungeon/plants/Fadeleaf.java
Patch:
@@ -62,7 +62,7 @@ public void activate() {
 				}
 			} while (newPos == -1);
 			
-			if (newPos != -1) {
+			if (newPos != -1 && !Dungeon.bossLevel()) {
 			
 				ch.pos = newPos;
 				ch.sprite.place( ch.pos );

File: src/com/shatteredpixel/shatteredpixeldungeon/sprites/CharSprite.java
Patch:
@@ -331,6 +331,7 @@ public void remove( State state ) {
 				chilled.on = false;
 				chilled = null;
 			}
+			break;
 		case DARKENED:
 			if (darkBlock != null) {
 				darkBlock.lighten();

File: src/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -409,6 +409,8 @@ public synchronized void update() {
 
 	public static void layoutTags() {
 
+		if (scene == null) return;
+
 		float tagLeft = ShatteredPixelDungeon.flipTags() ? 0 : uiCamera.width - scene.attack.width();
 
 		if (ShatteredPixelDungeon.flipTags()) {

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/PitfallTrap.java
Patch:
@@ -81,6 +81,7 @@ protected void disarm() {
 			}
 
 			sprite.parent.add(new WindParticle.Wind(pos));
+			sprite.killAndErase();
 			GameScene.updateMap( pos );
 		}
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -971,7 +971,7 @@ public boolean[] updateFieldOfView( Char c ) {
 		}
 
 		for (Heap heap : heaps.values())
-			if (!heap.seen && fieldOfView[heap.pos])
+			if (!heap.seen && fieldOfView[heap.pos] && c == Dungeon.hero)
 				heap.seen = true;
 		
 		return fieldOfView;

File: src/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java
Patch:
@@ -335,7 +335,7 @@ public static int challenges() {
 
 	public static void quickSlots( int value ){ Preferences.INSTANCE.put( Preferences.KEY_QUICKSLOTS, value ); }
 
-	public static int quickSlots(){ return Preferences.INSTANCE.getInt( Preferences.KEY_QUICKSLOTS, 4); }
+	public static int quickSlots(){ return Preferences.INSTANCE.getInt( Preferences.KEY_QUICKSLOTS, 2); }
 
 	public static void flipToolbar( boolean value) {
 		Preferences.INSTANCE.put(Preferences.KEY_FLIPTOOLBAR, value );

File: src/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -413,7 +413,7 @@ public static void layoutTags() {
 		if (ShatteredPixelDungeon.flipTags()) {
 			scene.log.setRect(scene.attack.width(), scene.toolbar.top(), uiCamera.width - scene.attack.width(), 0);
 		} else {
-			scene.log.setRect(0, scene.toolbar.top(), scene.attack.left(),  0 );
+			scene.log.setRect(0, scene.toolbar.top(), uiCamera.width - scene.attack.width(),  0 );
 		}
 
 		float pos = scene.toolbar.top();

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -688,6 +688,7 @@ public Heap drop( Item item, int cell ) {
 		if (heap == null) {
 			
 			heap = new Heap();
+			heap.seen = fieldOfView[cell];
 			heap.pos = cell;
 			if (map[cell] == Terrain.CHASM || (Dungeon.level != null && pit[cell])) {
 				Dungeon.dropToChasm( item );

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Belongings.java
Patch:
@@ -186,7 +186,8 @@ public void resurrect( int depth ) {
 					item.detachAll( backpack );
 				}
 			} else if (item.unique) {
-				// Keep unique items
+				item.detachAll(backpack);
+				item.collect();
 			} else if (!item.isEquipped( owner )) {
 				item.detachAll( backpack );
 			}

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Ghost.java
Patch:
@@ -246,7 +246,7 @@ public static class Quest {
 		private static int type;
 
 		private static boolean given;
-		private static boolean processed;
+		public static boolean processed;
 		
 		private static int depth;
 		

File: src/com/shatteredpixel/shatteredpixeldungeon/items/Heap.java
Patch:
@@ -422,7 +422,7 @@ public Item transmute() {
 				if (Random.Int(1000/bonus) == 0)
 					return new PotionOfExperience();
 
-			while (potion instanceof PotionOfHealing && Random.Int(15) - Dungeon.limitedDrops.cookingHP.count >= 0)
+			while (potion instanceof PotionOfHealing && Random.Int(10) < Dungeon.limitedDrops.cookingHP.count)
 				potion = Generator.random( Generator.Category.POTION );
 
 			if (potion instanceof PotionOfHealing)

File: src/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java
Patch:
@@ -335,7 +335,7 @@ public static int challenges() {
 
 	public static void quickSlots( int value ){ Preferences.INSTANCE.put( Preferences.KEY_QUICKSLOTS, value ); }
 
-	public static int quickSlots(){ return Preferences.INSTANCE.getInt( Preferences.KEY_QUICKSLOTS, 1); }
+	public static int quickSlots(){ return Preferences.INSTANCE.getInt( Preferences.KEY_QUICKSLOTS, 4); }
 
 	public static void flippedUI( boolean value) {
 		Preferences.INSTANCE.put(Preferences.KEY_FLIPPEDUI, value ); }

File: src/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfRegrowth.java
Patch:
@@ -162,7 +162,7 @@ private int right(int direction){
 	public void onHit(MagesStaff staff, Char attacker, Char defender, int damage) {
 		//like vampiric enchantment, except with herbal healing buff
 
-		int level = Math.max( 0, 0/*staff level*/ );
+		int level = Math.max( 0, staff.level );
 
 		// lvl 0 - 33%
 		// lvl 1 - 43%

File: src/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java
Patch:
@@ -347,7 +347,7 @@ public static void toolbarMode( String value ) {
 	}
 
 	public static String toolbarMode() {
-		return Preferences.INSTANCE.getString(Preferences.KEY_BARMODE, !landscape() ? "SPLIT" : "GROUPED");
+		return Preferences.INSTANCE.getString(Preferences.KEY_BARMODE, !landscape() ? "SPLIT" : "GROUP");
 	}
 	
 	public static void intro( boolean value ) {

File: src/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java
Patch:
@@ -203,7 +203,6 @@ public static boolean landscape() {
 	
 	public static void scale( int value ) {
 		Preferences.INSTANCE.put( Preferences.KEY_SCALE, value );
-		resetScene();
 	}
 
 	// *** IMMERSIVE MODE ****

File: src/com/shatteredpixel/shatteredpixeldungeon/ui/WndDisplay.java
Patch:
@@ -46,6 +46,7 @@ public WndDisplay() {
 			@Override
 			protected void onChange() {
 				ShatteredPixelDungeon.scale(getSelectedValue());
+				ShatteredPixelDungeon.resetScene();
 			}
 		};
 		scale.setSelectedValue(PixelScene.defaultZoom);

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/SewerLevel.java
Patch:
@@ -100,7 +100,8 @@ protected void decorate() {
 		if (Dungeon.depth == 2)
 			for (Room r : roomEntrance.connected.keySet()){
 				Room.Door d = roomEntrance.connected.get(r);
-				map[d.x + d.y * WIDTH] = Terrain.SECRET_DOOR;
+				if (d.type == Room.Door.Type.REGULAR)
+					map[d.x + d.y * WIDTH] = Terrain.SECRET_DOOR;
 			}
 		
 		placeSign();

File: src/com/shatteredpixel/shatteredpixeldungeon/items/EquipableItem.java
Patch:
@@ -100,6 +100,8 @@ public boolean doUnequip( Hero hero, boolean collect, boolean single ) {
 		}
 
 		if (collect && !collect( hero.belongings.backpack )) {
+			onDetach();
+			Dungeon.quickslot.clearItem(this);
 			Dungeon.level.drop( this, hero.pos );
 		}
 

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Combo.java
Patch:
@@ -76,6 +76,6 @@ public String desc() {
 				"failing to land a hit quickly enough will reset the combo.\n" +
 				"\n" +
 				(count <= 2 ? "Your combo has not built up enough to give you bonus damage yet." :
-				"Your combo is currently giving you " + ((count - 2) / 5f) + " % bonus damage.");
+				"Your combo is currently giving you " + ((count - 2) * 20f) + " % bonus damage.");
 	}
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/LightningTrap.java
Patch:
@@ -79,7 +79,7 @@ public void activate() {
 			Item item = heap.items.peek();
 			if (item instanceof Wand){
 				Wand wand = (Wand)item;
-				((Wand)item).curCharges += (int)Math.ceil((wand.curCharges - wand.maxCharges)/2f);
+				((Wand)item).curCharges += (int)Math.ceil((wand.maxCharges - wand.curCharges)/2f);
 			}
 		}
 

File: src/com/shatteredpixel/shatteredpixeldungeon/items/wands/CursedWand.java
Patch:
@@ -289,8 +289,8 @@ public void call() {
 							Sheep sheep = new Sheep();
 							sheep.lifespan = 10;
 							sheep.pos = ch.pos;
+							ch.destroy();
 							ch.sprite.killAndErase();
-							Actor.remove(ch);
 							Dungeon.level.mobs.remove(ch);
 							HealthIndicator.instance.target(null);
 							GameScene.add(sheep);

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/PoisonTrap.java
Patch:
@@ -52,6 +52,6 @@ public void activate() {
 
 	@Override
 	public String desc() {
-		return "A small dart-blower must be hidden nearby, activating this trap will cause it to shoot a pointed dart at you.";
+		return "A small dart-blower must be hidden nearby, activating this trap will cause it to shoot a poisoned dart at you.";
 	}
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MagesStaff.java
Patch:
@@ -193,7 +193,7 @@ public Item upgrade(boolean enchant) {
 			wand.upgrade();
 			//gives the wand one additional charge
 			wand.maxCharges = Math.min(wand.maxCharges + 1, 10);
-			wand.curCharges = curCharges+1;
+			wand.curCharges = Math.min(wand.curCharges + 1, 10);
 			updateQuickslot();
 		}
 

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1008,9 +1008,8 @@ private boolean getCloser( final int target ) {
 		
 		if (step != -1) {
 
-			int oldPos = pos;
+			sprite.move(pos, step);
 			move(step);
-			sprite.move(oldPos, pos);
 			spend( 1 / speed() );
 			
 			return true;

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/traps/Trap.java
Patch:
@@ -50,7 +50,7 @@ public Trap set(int pos){
 
 	public Trap reveal() {
 		visible = true;
-		if (sprite != null) {
+		if (sprite != null && sprite.visible == false) {
 			sprite.visible = true;
 			sprite.alpha( 0 );
 			sprite.parent.add( new AlphaTweener( sprite, 1, 0.6f));

File: src/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MagesStaff.java
Patch:
@@ -119,7 +119,7 @@ public void execute(Hero hero, String action) {
 	@Override
 	public void proc(Char attacker, Char defender, int damage) {
 		if (wand != null && Dungeon.hero.subClass == HeroSubClass.BATTLEMAGE) {
-			wand.partialCharge += 0.33f;
+			if (wand.curCharges < wand.maxCharges) wand.partialCharge += 0.33f;
 			ScrollOfRecharging.charge((Hero)attacker);
 			wand.onHit(this, attacker, defender, damage);
 		}

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Succubus.java
Patch:
@@ -113,8 +113,10 @@ private void blink( int target ) {
 			}
 			if (candidates.size() > 0)
 				cell = Random.element(candidates);
-			else
+			else {
+				delay = BLINK_DELAY;
 				return;
+			}
 		}
 		
 		ScrollOfTeleportation.appear( this, cell );

File: src/com/shatteredpixel/shatteredpixeldungeon/mechanics/Ballistica.java
Patch:
@@ -103,13 +103,13 @@ private void build( int from, int to, boolean stopTarget, boolean stopChars, boo
 		while (Level.insideMap(cell)) {
 
 			//if we're in a wall, collide with the previous cell along the path.
-			if (stopTerrain && !Level.passable[cell] && !Level.avoid[cell]) {
-				collide(path.get(path.size()-1));
+			if (stopTerrain && cell != sourcePos && !Level.passable[cell] && !Level.avoid[cell]) {
+				collide(path.get(path.size() - 1));
 			}
 
 			path.add(cell);
 
-			if ((stopTerrain && Level.losBlocking[cell])
+			if ((stopTerrain && cell != sourcePos && Level.losBlocking[cell])
 					|| (cell != sourcePos && stopChars && Actor.findChar( cell ) != null)
 					|| (cell == to && stopTarget)){
 				collide(cell);

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -366,7 +366,8 @@ public int defenseProc( Char enemy, int damage ) {
 		if (enemy.buff(Corruption.class) != null) {
 			aggro(enemy);
 			target = enemy.pos;
-			state = HUNTING;
+			if (state == SLEEPING || state == WANDERING)
+				state = HUNTING;
 		}
 
 		return damage;

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/RegularLevel.java
Patch:
@@ -172,7 +172,7 @@ protected boolean build() {
 	protected void placeSign(){
 		while (true) {
 			int pos = roomEntrance.random();
-			if (pos != entrance || traps.get(pos) == null) {
+			if (pos != entrance && traps.get(pos) == null) {
 				map[pos] = Terrain.SIGN;
 				break;
 			}

File: src/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfBlastWave.java
Patch:
@@ -109,8 +109,8 @@ public void call() {
 				if (ch.pos == trajectory.collisionPos) {
 					ch.damage(Random.NormalIntRange((finalDist + 1) / 2, finalDist), this);
 					Paralysis.prolong(ch, Paralysis.class, Random.NormalIntRange((finalDist + 1) / 2, finalDist));
-					Dungeon.level.press(ch.pos, ch);
 				}
+				Dungeon.level.press(ch.pos, ch);
 			}
 		}), -1);
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/RegularLevel.java
Patch:
@@ -588,7 +588,7 @@ protected void createMobs() {
 			Mob mob = Bestiary.mob( Dungeon.depth );
 			mob.pos = roomToSpawn.random();
 
-			if (Actor.findChar(mob.pos) == null && Level.passable[mob.pos]) {
+			if (findMob(mob.pos) == null && Level.passable[mob.pos]) {
 				mobsToSpawn--;
 				mobs.add(mob);
 
@@ -597,7 +597,7 @@ protected void createMobs() {
 					mob = Bestiary.mob( Dungeon.depth );
 					mob.pos = roomToSpawn.random();
 
-					if (Actor.findChar(mob.pos) == null && Level.passable[mob.pos]) {
+					if (findMob(mob.pos)  == null && Level.passable[mob.pos]) {
 						mobsToSpawn--;
 						mobs.add(mob);
 					}

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/PoolPainter.java
Patch:
@@ -75,7 +75,7 @@ public static void paint( Level level, Room room ) {
 			Piranha piranha = new Piranha();
 			do {
 				piranha.pos = room.random();
-			} while (level.map[piranha.pos] != Terrain.WATER|| Actor.findChar( piranha.pos ) != null);
+			} while (level.map[piranha.pos] != Terrain.WATER|| level.findMob( piranha.pos ) != null);
 			level.mobs.add( piranha );
 		}
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Swarm.java
Patch:
@@ -108,7 +108,7 @@ public int defenseProc( Char enemy, int damage ) {
 			}
 		}
 		
-		return damage;
+		return super.defenseProc(enemy, damage);
 	}
 	
 	@Override

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Thief.java
Patch:
@@ -125,7 +125,7 @@ public int defenseProc(Char enemy, int damage) {
             Dungeon.level.drop( new Gold(), pos ).sprite.drop();
         }
 
-        return damage;
+        return super.defenseProc(enemy, damage);
     }
 
     protected boolean steal( Hero hero ) {

File: src/com/shatteredpixel/shatteredpixeldungeon/items/Generator.java
Patch:
@@ -210,7 +210,7 @@ public static int order( Item item ) {
 			BlandfruitBush.Seed.class,
             Dreamfoil.Seed.class,
             Stormvine.Seed.class,
-			Starflower.class};
+			Starflower.Seed.class};
 		Category.SEED.probs = new float[]{ 12, 12, 12, 12, 12, 12, 12, 0, 4, 12, 12, 1 };
 	}
 	

File: src/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfRegrowth.java
Patch:
@@ -124,7 +124,7 @@ private void placePlants(float numPlants, float numDews, float numPods, float nu
 					floor.plant(seed, cells.next());
 					Dungeon.limitedDrops.blandfruitSeed.count++;
 				}
-			} else if (seed != null)
+			} else
 				floor.plant(seed, cells.next());
 
 			numPlants --;

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Thief.java
Patch:
@@ -86,6 +86,8 @@ public void die( Object cause ) {
 
         if (item != null) {
             Dungeon.level.drop( item, pos ).sprite.drop();
+            //updates position
+            if (item instanceof Honeypot.ShatteredPot) ((Honeypot.ShatteredPot)item).setHolder( this );
         }
     }
 

File: src/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -154,7 +154,7 @@ public static void init() {
 		quickslot.reset();
         QuickSlotButton.reset();
 		
-		depth = 0;
+		depth = 24;
 		gold = 0;
 
 		droppedItems = new SparseArray<ArrayList<Item>>();

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/WaterOfAwareness.java
Patch:
@@ -56,8 +56,7 @@ protected boolean affectHero( Hero hero ) {
 			int terr = Dungeon.level.map[i];
 			if ((Terrain.flags[terr] & Terrain.SECRET) != 0) {
 				
-				Level.set( i, Terrain.discover( terr ) );						
-				GameScene.updateMap( i );
+				Dungeon.level.discover( i );
 				
 				if (Dungeon.visible[i]) {
 					GameScene.discoverTile( i, terr );

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Tengu.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.HashSet;
 
 import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.LloydsBeacon;
+import com.shatteredpixel.shatteredpixeldungeon.levels.traps.PoisonTrap;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
 import com.watabou.noosa.audio.Sample;
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
@@ -147,8 +148,8 @@ private void jump() {
 			} while (!Level.fieldOfView[trapPos] || !Level.passable[trapPos]);
 			
 			if (Dungeon.level.map[trapPos] == Terrain.INACTIVE_TRAP) {
-				Level.set( trapPos, Terrain.POISON_TRAP );
-				GameScene.updateMap( trapPos );
+				Dungeon.level.setTrap( new PoisonTrap().reveal(), trapPos );
+				Level.set( trapPos, Terrain.TRAP );
 				ScrollOfMagicMapping.discover( trapPos );
 			}
 		}

File: src/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfMagicMapping.java
Patch:
@@ -57,8 +57,7 @@ protected void doRead() {
 				mapped[i] = true;
 				if ((Terrain.flags[terr] & Terrain.SECRET) != 0) {
 					
-					Level.set( i, Terrain.discover( terr ) );						
-					GameScene.updateMap( i );
+					Dungeon.level.discover( i );
 					
 					if (Dungeon.visible[i]) {
 						GameScene.discoverTile( i, terr );

File: src/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfPrismaticLight.java
Patch:
@@ -109,8 +109,7 @@ private void affectMap(Ballistica beam){
                 int terr = Dungeon.level.map[cell];
                 if ((Terrain.flags[terr] & Terrain.SECRET) != 0) {
 
-                    Level.set( cell, Terrain.discover( terr ) );
-                    GameScene.updateMap(cell);
+                    Dungeon.level.discover( cell );
 
                     GameScene.discoverTile( cell, terr );
                     ScrollOfMagicMapping.discover(cell);

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/CavesBossLevel.java
Patch:
@@ -127,9 +127,10 @@ protected boolean build() {
 			ROOM_RIGHT - ROOM_LEFT + 3, ROOM_BOTTOM - ROOM_TOP + 3, Terrain.WALL );
 		Painter.fill( this, ROOM_LEFT, ROOM_TOP + 1, 
 			ROOM_RIGHT - ROOM_LEFT + 1, ROOM_BOTTOM - ROOM_TOP, Terrain.EMPTY );
-		
+
+		//TODO Trap refactor
 		Painter.fill( this, ROOM_LEFT, ROOM_TOP, 
-			ROOM_RIGHT - ROOM_LEFT + 1, 1, Terrain.TOXIC_TRAP );
+			ROOM_RIGHT - ROOM_LEFT + 1, 1, Terrain.INACTIVE_TRAP );
 		
 		arenaDoor = Random.Int( ROOM_LEFT, ROOM_RIGHT ) + (ROOM_BOTTOM + 1) * WIDTH;
 		map[arenaDoor] = Terrain.DOOR;

File: src/com/shatteredpixel/shatteredpixeldungeon/windows/WndInfoTrap.java
Patch:
@@ -1,13 +1,14 @@
 package com.shatteredpixel.shatteredpixeldungeon.windows;
 
+import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.Trap;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.TrapSprite;
 
 public class WndInfoTrap extends WndTitledMessage {
 
 	public WndInfoTrap(Trap trap) {
 
-		super(new TrapSprite( trap.image ), trap.name, trap.desc());
+		super(new TrapSprite( trap.image + (((Dungeon.depth-1) / 5) * 8) ), trap.name, trap.desc());
 
 	}
 

File: src/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfTransfusion.java
Patch:
@@ -109,7 +109,7 @@ protected void onZap(Ballistica beam) {
 				Buff.affect(ch, Charm.class, Charm.durationFactor(ch) * duration).object = curUser.id();
 
 				duration *= Random.Float(0.75f, 1f);
-				Buff.affect(curUser, Charm.class, Charm.durationFactor(ch) * duration).object = curUser.id();
+				Buff.affect(curUser, Charm.class, Charm.durationFactor(ch) * duration).object = ch.id();
 
 				ch.sprite.centerEmitter().start( Speck.factory( Speck.HEART ), 0.2f, 5 );
 				curUser.sprite.centerEmitter().start( Speck.factory( Speck.HEART ), 0.2f, 5 );

File: src/com/shatteredpixel/shatteredpixeldungeon/items/Heap.java
Patch:
@@ -189,7 +189,7 @@ public void drop( Item item ) {
 		
 		if (sprite != null) {
 			if (type == Type.HEAP || type == Type.FOR_SALE)
-				sprite.view( item );
+				sprite.view( items.peek() );
 			else
 				sprite.view( image(), glowing() );
 		}

File: src/com/shatteredpixel/shatteredpixeldungeon/sprites/DiscardedItemSprite.java
Patch:
@@ -33,6 +33,7 @@ public DiscardedItemSprite() {
 	public void drop() {
 		scale.set( 1 );
 		am = 1;
+		if (emitter != null) emitter.killAndErase();
 	}
 	
 	@Override

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/SnipersMark.java
Patch:
@@ -54,7 +54,7 @@ public String toString() {
 	@Override
 	public String desc() {
 		Char ch = (Char)Actor.findById(object);
-		return "The sniper is honed in " + ((ch == null) ? "on a lost target" : "on the nearby" + ch.name ) + ", " +
+		return "The sniper is honed in " + ((ch == null) ? "on a lost target" : "on the nearby " + ch.name ) + ", " +
 				"gaining increased attack speed and armor penetration while attacking it.\n" +
 				"\n" +
 				"The sniper will remain honed in until she switches targets, stops attacking, or the target dies.";

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/Actor.java
Patch:
@@ -193,7 +193,7 @@ public static void process() {
 
 				//some actors will always go before others if time is equal.
 				if (actor.time < now ||
-						actor.time == now && actor.actPriority < current.actPriority) {
+						actor.time == now && (current == null || actor.actPriority < current.actPriority)) {
 					now = actor.time;
 					current = actor;
 				}

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Regeneration.java
Patch:
@@ -41,7 +41,7 @@ public boolean act() {
 				if (regenBuff.isCursed())
 					spend( REGENERATION_DELAY * 1.5f );
 				else
-					spend( regenBuff.level()*0.9f );
+					spend( REGENERATION_DELAY - regenBuff.level()*0.9f );
             else
                 spend( REGENERATION_DELAY );
 			

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/SnipersMark.java
Patch:
@@ -53,7 +53,8 @@ public String toString() {
 
 	@Override
 	public String desc() {
-		return "The sniper is honed in on the nearby " + ((Char)Actor.findById(object)).name + ", " +
+		Char ch = (Char)Actor.findById(object);
+		return "The sniper is honed in " + ((ch == null) ? "on a lost target" : "on the nearby" + ch.name ) + ", " +
 				"gaining increased attack speed and armor penetration while attacking it.\n" +
 				"\n" +
 				"The sniper will remain honed in until she switches targets, stops attacking, or the target dies.";

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Piranha.java
Patch:
@@ -60,7 +60,8 @@ protected boolean act() {
 			//this causes pirahna to move away when a door is closed on them.
 			Dungeon.level.updateFieldOfView( this );
 			enemy = chooseEnemy();
-			if (state == this.HUNTING && !(enemy.isAlive() && Level.fieldOfView[enemy.pos] && enemy.invisible <= 0)){
+			if (state == this.HUNTING &&
+					!(enemy != null && enemy.isAlive() && Level.fieldOfView[enemy.pos] && enemy.invisible <= 0)){
 				state = this.WANDERING;
 				int oldPos = pos;
 				int i = 0;

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Ghost.java
Patch:
@@ -499,7 +499,7 @@ public int attackProc( Char enemy, int damage ) {
         @Override
         protected boolean getCloser( int target ) {
             combo = 0; //if he's moving, he isn't attacking, reset combo.
-            if (Level.adjacent(pos, enemy.pos)) {
+            if (enemy != null && Level.adjacent(pos, enemy.pos)) {
                 return getFurther( target );
             } else {
                 return super.getCloser( target );

File: src/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -117,7 +117,8 @@ public boolean collect( Bag container ) {
 	}
 	
 	public void charge( Char owner ) {
-		if (charger == null) (charger = new Charger()).attachTo( owner );
+		if (charger == null) charger = new Charger();
+		charger.attachTo( owner );
 	}
 
 	public void charge( Char owner, float chargeScaleFactor ){

File: src/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfBlastWave.java
Patch:
@@ -70,7 +70,7 @@ protected void onZap(Ballistica bolt) {
 		if (ch != null){
 			ch.damage(damage, this);
 
-			if (ch.isAlive() && bolt.path.size() > bolt.dist) {
+			if (ch.isAlive() && bolt.path.size() > bolt.dist+1) {
 				Ballistica trajectory = new Ballistica(ch.pos, bolt.path.get(bolt.dist + 1), Ballistica.MAGIC_BOLT);
 				int strength = level + 3;
 				throwChar(ch, trajectory, strength);

File: src/com/shatteredpixel/shatteredpixeldungeon/items/Generator.java
Patch:
@@ -196,7 +196,7 @@ public static int order( Item item ) {
 	        LloydsBeacon.class,
 	        EtherealChains.class
             };
-        Category.ARTIFACT.probs = new float[]{ 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0 , 1};
+        Category.ARTIFACT.probs = new float[]{ 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1};
 		
 		Category.SEED.classes = new Class<?>[]{ 
 			Firebloom.Seed.class,
@@ -354,7 +354,8 @@ public static boolean removeArtifact(Artifact artifact) {
 
     //resets artifact probabilities, for new dungeons
     public static void initArtifacts() {
-        Category.ARTIFACT.probs = new float[]{ 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0 };
+	    //FIXME: the duplicated logic here has caused 1 bug so far, should refactor.
+        Category.ARTIFACT.probs = new float[]{ 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1};
         spawnedArtifacts = new ArrayList<String>();
     }
 

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Poison.java
Patch:
@@ -77,7 +77,7 @@ public String desc() {
 
 	@Override
 	public boolean attachTo(Char target) {
-		if (super.attachTo(target)){
+		if (super.attachTo(target) && target.sprite != null){
 			CellEmitter.center(target.pos).burst( PoisonParticle.SPLASH, 5 );
 			return true;
 		} else

File: src/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MagesStaff.java
Patch:
@@ -221,7 +221,9 @@ public String desc() {
 				"Rather than having an innate magic in it, this staff is instead imbued with magical energy from a wand, permanently granting it new power.\n" +
 				"\n";
 
-		if (wand instanceof WandOfMagicMissile){
+		if (wand == null) {
+			result += "The staff is currently a slightly magical stick, it needs a wand!";
+		} else if (wand instanceof WandOfMagicMissile){
 			result += "The staff radiates consistent magical energy from the wand it is imbued with.";
 		} else if (wand instanceof WandOfFireblast){
 			result += "The staff burns and sizzles with fiery energy from the wand it is imbued with.";

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Chill.java
Patch:
@@ -96,6 +96,6 @@ public String desc() {
 				"At it's worst, this is equivalent to being slowed.\n" +
 				"\n" +
 				"This chilled will last for " + dispTurns() + ", " +
-				"and is currently reducing speed by " + new DecimalFormat("#.##").format(speedFactor()*100f) + "%";
+				"and is currently reducing speed by " + new DecimalFormat("#.##").format((1f-speedFactor())*100f) + "%";
 	}
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/sprites/CharSprite.java
Patch:
@@ -347,6 +347,9 @@ public void update() {
 		if (iceBlock != null) {
 			iceBlock.visible = visible;
 		}
+		if (chilled != null) {
+			chilled.visible = visible;
+		}
 		if (sleeping) {
 			showSleep();
 		} else {

File: src/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfDisintegration.java
Patch:
@@ -113,7 +113,7 @@ private int distance() {
 	protected void fx( Ballistica beam, Callback callback ) {
 		
 		int cell = beam.path.get(Math.min(beam.dist, distance()));
-		curUser.sprite.parent.add(new Beam.LightRay(curUser.sprite.center(), DungeonTilemap.tileCenterToWorld( cell )));
+		curUser.sprite.parent.add(new Beam.DeathRay(curUser.sprite.center(), DungeonTilemap.tileCenterToWorld( cell )));
 		callback.call();
 	}
 	

File: src/com/shatteredpixel/shatteredpixeldungeon/mechanics/Ballistica.java
Patch:
@@ -135,7 +135,7 @@ private void collide(int cell){
 	//if there is an error, returns an empty arraylist instead.
 	public List<Integer> subPath(int start, int end){
 		try {
-			end = Math.max( end, path.size()-1);
+			end = Math.min( end, path.size()-1);
 			return path.subList(start, end+1);
 		} catch (Exception e){
 			return new ArrayList<>();

File: src/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfTeleportation.java
Patch:
@@ -40,8 +40,7 @@ protected void onZap( int cell ) {
 		Char ch = Actor.findChar( cell );
 		
 		if (ch == curUser) {
-			
-			setKnown();
+
 			ScrollOfTeleportation.teleportHero( curUser );
 			
 		} else if (ch != null && !(ch instanceof NPC)) {

File: src/com/shatteredpixel/shatteredpixeldungeon/items/bags/Bag.java
Patch:
@@ -85,6 +85,7 @@ public void onDetach( ) {
 	    this.owner = null;
 	    for (Item item : items)
 		    Dungeon.quickslot.clearItem(item);
+		updateQuickslot();
 	}
 
 	@Override

File: src/com/shatteredpixel/shatteredpixeldungeon/items/bags/WandHolster.java
Patch:
@@ -17,6 +17,7 @@
  */
 package com.shatteredpixel.shatteredpixeldungeon.items.bags;
 
+import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
@@ -51,6 +52,7 @@ public boolean collect( Bag container ) {
 
 	@Override
     public void onDetach( ) {
+		super.onDetach();
         for (Item item : items) {
             ((Wand)item).stopCharging();
         }

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TimekeepersHourglass.java
Patch:
@@ -209,7 +209,8 @@ public class timeStasis extends ArtifactBuff {
 
         @Override
         public boolean attachTo(Char target) {
-            spend(charge);
+            //buffs always act last, so the stasis buff should end a turn early.
+            spend(charge-1);
             ((Hero)target).spendAndNext(charge);
 
             //shouldn't punish the player for going into stasis frequently

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Tengu.java
Patch:
@@ -115,7 +115,7 @@ protected boolean getCloser( int target ) {
 	
 	@Override
 	protected boolean canAttack( Char enemy ) {
-		return Ballistica.cast( pos, enemy.pos, false, true ) == enemy.pos;
+		return Ballistica.cast( pos, enemy.pos, false, true ) == enemy.pos && !isCharmedBy( enemy );
 	}
 	
 	@Override

File: src/com/shatteredpixel/shatteredpixeldungeon/items/armor/RogueArmor.java
Patch:
@@ -93,7 +93,7 @@ public void onSelect( Integer target ) {
 				for (Mob mob : Dungeon.level.mobs) {
 					if (Level.fieldOfView[mob.pos]) {
 						Buff.prolong( mob, Blindness.class, 2 );
-						mob.state = mob.WANDERING;
+						if (mob.state == mob.HUNTING) mob.state = mob.WANDERING;
 						mob.sprite.emitter().burst( Speck.factory( Speck.LIGHT ), 4 );
 					}
 				}

File: src/com/shatteredpixel/shatteredpixeldungeon/plants/Blindweed.java
Patch:
@@ -49,7 +49,7 @@ public void activate( Char ch ) {
 			Buff.prolong( ch, Blindness.class, len );
             Buff.prolong( ch, Cripple.class, len );
 			if (ch instanceof Mob) {
-				((Mob)ch).state = ((Mob)ch).WANDERING;
+				if (((Mob)ch).state == ((Mob)ch).HUNTING) ((Mob)ch).state = ((Mob)ch).WANDERING;
 				((Mob)ch).beckon( Dungeon.level.randomDestination() );
 			}
 		}

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Monk.java
Patch:
@@ -92,6 +92,7 @@ public int attackProc( Char enemy, int damage ) {
 			
 			if (weapon != null && !(weapon instanceof Knuckles) && !weapon.cursed) {
 				hero.belongings.weapon = null;
+				Dungeon.quickslot.clearItem( weapon );
 				Dungeon.level.drop( weapon, hero.pos ).sprite.drop();
 				GLog.w( TXT_DISARM, name, weapon.name() );
 			}

File: src/com/shatteredpixel/shatteredpixeldungeon/items/armor/Armor.java
Patch:
@@ -77,7 +77,6 @@ public void storeInBundle( Bundle bundle ) {
 	@Override
 	public void restoreFromBundle( Bundle bundle ) {
 		super.restoreFromBundle( bundle );
-		glyph = (Glyph)bundle.get( GLYPH );
 		if ((hitsToKnow = bundle.getInt( UNFAMILIRIARITY )) == 0) {
 			hitsToKnow = HITS_TO_KNOW;
 		}

File: src/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -425,8 +425,9 @@ public void onSelect( Integer target ) {
 				
 				final int cell = Ballistica.cast( curUser.pos, target, true, curWand.hitChars );
 				curUser.sprite.zap( cell );
-				
-				QuickSlotButton.target(Actor.findChar(cell));
+
+				//targets the enemy hit for char-hitting wands, or the cell aimed at for other wands.
+				QuickSlotButton.target(Actor.findChar(curWand.hitChars ? cell : target));
 				
 				if (curWand.curCharges > 0) {
 					

File: src/com/shatteredpixel/shatteredpixeldungeon/items/Heap.java
Patch:
@@ -315,6 +315,7 @@ public void freeze() {
 				replace( item, FrozenCarpaccio.cook( (MysteryMeat)item ) );
 				frozen = true;
 			} else if (item instanceof Potion) {
+                items.remove(item);
 				((Potion) item).shatter(pos);
 				frozen = true;
 			} else if (item instanceof Bomb){

File: src/com/shatteredpixel/shatteredpixeldungeon/items/Honeypot.java
Patch:
@@ -219,7 +219,7 @@ public String info() {
 				"The pot has been shattered, only the sticky honey that lines its walls is holding it together, and it is slowly coming apart.";
 
 			if (Actor.findById( myBee ) != null)
-				info += "\n\nDespite its broken state, the bee still seems quite fond of the pot, and is understandable quite mad.";
+				info += "\n\nDespite its broken state, the bee still seems quite fond of the pot, and is understandably quite mad.";
 			else
 				info += "\n\nNow that its bee is gone, you can't think of a use for this wad of broken clay and drying honey.";
 

File: src/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/MissileWeapon.java
Patch:
@@ -160,7 +160,7 @@ public String info() {
 			}
 		}
 
-		info.append( "\n\nAs this weapon designed to be used at a distance, it is much less accurate if used at melee range.");
+		info.append( "\n\nAs this weapon is designed to be used at a distance, it is much less accurate if used at melee range.");
 		
 		if (isEquipped( Dungeon.hero )) {
 			info.append( "\n\nYou hold the " + name + " at the ready." ); 

File: src/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfMagicMissile.java
Patch:
@@ -136,6 +136,9 @@ public void onSelect( Item item ) {
 				evoke( curUser );
 				
 				GLog.w( TXT_DISENCHANTED, item.name() );
+
+                Dungeon.quickslot.clearItem(WandOfMagicMissile.this);
+                WandOfMagicMissile.this.updateQuickslot();
 				
 				item.upgrade();
 				curUser.spendAndNext( TIME_TO_DISENCHANT );

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -885,6 +885,7 @@ public int attackProc( Char enemy, int damage ) {
 				}
 				damage += wand.curCharges;
 			}
+            break;
 		case SNIPER:
 			if (rangedWeapon != null) {
 				Buff.prolong( this, SnipersMark.class, attackDelay() * 1.1f ).object = enemy.id();

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Bee.java
Patch:
@@ -133,8 +133,7 @@ else if (Actor.findById(potHolder) != null)
 	protected boolean getCloser(int target) {
         if (enemy != null && Actor.findById(potHolder) == enemy) {
             target = enemy.pos;
-            return super.getCloser(target);
-        } else if (state == WANDERING || (potPos != -1 && Level.distance(target, potPos) > 3))
+        } else if (potPos != -1 && (state == WANDERING || Level.distance(target, potPos) > 3))
 			this.target = target = potPos;
 		return super.getCloser( target );
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/scenes/CellSelector.java
Patch:
@@ -169,7 +169,6 @@ public void reset() {
     public void enable(boolean value){
         if (enabled != value){
             enabled = value;
-            reset();
         }
     }
 

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/WaterOfTransmutation.java
Patch:
@@ -170,6 +170,7 @@ private Wand changeWand( Wand w ) {
 		} while (n.getClass() == w.getClass());
 		
 		n.level = 0;
+		n.updateLevel();
 		n.upgrade( w.level );
 		
 		n.levelKnown = w.levelKnown;

File: src/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -313,7 +313,7 @@ public Item degrade() {
 		return this;
 	}
 	
-	protected void updateLevel() {
+	public void updateLevel() {
 		maxCharges = Math.min( initialCharges() + level, 9 );
 		curCharges = Math.min( curCharges, maxCharges );
 		

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/DeadEndLevel.java
Patch:
@@ -63,9 +63,9 @@ protected boolean build() {
 		entrance = SIZE * WIDTH + SIZE / 2 + 1;
 		map[entrance] = Terrain.ENTRANCE;
 		
-		exit = (SIZE / 2 + 1) * (WIDTH + 1);
+		map[(SIZE / 2 + 1) * (WIDTH + 1)] = Terrain.SIGN;
 		
-		map[exit] = Terrain.SIGN;
+		exit = 0;
 		
 		return true;
 	}
@@ -91,7 +91,7 @@ protected void createItems() {
 	
 	@Override
 	public int randomRespawnCell() {
-		return -1;
+		return entrance-WIDTH;
 	}
 
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -536,9 +536,6 @@ public static void loadGame( String fileName, boolean fullLoad ) throws IOExcept
 		quickslot.restorePlaceholders( bundle );
 		
 		if (fullLoad) {
-
-			//for pre-0.2.4 saves
-            if (bundle.getBoolean(DV)) limitedDrops.dewVial.drop();
             transmutation = bundle.getInt( WT );
 
             //TODO: adjust this when dropping support for pre-0.2.3 saves
@@ -554,6 +551,9 @@ public static void loadGame( String fileName, boolean fullLoad ) throws IOExcept
                 limitedDrops.upgradeScrolls.count = bundle.getInt(SOU);
                 limitedDrops.arcaneStyli.count = bundle.getInt(AS);
             }
+            //for pre-0.2.4 saves
+            if (bundle.getBoolean(DV)) limitedDrops.dewVial.drop();
+
 			chapters = new HashSet<Integer>();
 			int ids[] = bundle.getIntArray( CHAPTERS );
 			if (ids != null) {

File: src/com/shatteredpixel/shatteredpixeldungeon/windows/IconTitle.java
Patch:
@@ -90,7 +90,7 @@ protected void layout() {
 			health.setRect( tfLabel.x, Math.max( tfLabel.y + tfLabel.height(), imIcon.y + imIcon.height() - health.height() ), tfLabel.maxWidth, 0 );
 			height = health.bottom();
 		} else {
-			height = Math.max( imIcon.y + imIcon.height(), tfLabel.y + tfLabel.height() );
+			height = Math.max( imIcon.height(), tfLabel.height() );
 		}
 	}
 

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Bee.java
Patch:
@@ -120,7 +120,7 @@ else if (Actor.findById(potHolder) != null)
             //find all mobs near the pot
             HashSet<Char> enemies = new HashSet<Char>();
             for (Mob mob : Dungeon.level.mobs)
-                if (!(mob instanceof Bee) && Level.distance(mob.pos, potPos) <= 3 && mob.hostile)
+                if (!(mob instanceof Bee) && Level.distance(mob.pos, potPos) <= 3 && (mob.hostile || mob.ally))
                     enemies.add(mob);
 
             //pick one, if there are none, check if the hero is near the pot, go for them, otherwise go for nothing.

File: src/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/InventoryScroll.java
Patch:
@@ -85,7 +85,7 @@ public void onSelect( Item item ) {
 				
 				((InventoryScroll)curItem).confirmCancelation();
 				
-			} else {
+			} else if (!((Scroll)curItem).ownedByBook) {
 				
 				curItem.collect( curUser.belongings.backpack );
 				

File: src/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -379,8 +379,8 @@ public synchronized void update() {
 
 			layoutTags();
 		}
-		
-		cellSelector.enabled = Dungeon.hero.ready;
+
+        cellSelector.enable(Dungeon.hero.ready);
 	}
 
 	private boolean tagAttack    = false;

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Buff.java
Patch:
@@ -39,8 +39,8 @@ public boolean attachTo( Char target ) {
 		
 		this.target = target;
 		target.add( this );
-		
-		return true;
+
+        return target.buffs().contains(this);
 	}
 	
 	public void detach() {

File: src/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -319,7 +319,7 @@ public void create() {
 				} else if (item instanceof Plant.Seed) {
 					Dungeon.level.plant( (Plant.Seed)item, pos );
 				} else if (item instanceof Honeypot) {
-					(Honeypot)item.shatter( pos );
+                    Dungeon.level.drop(((Honeypot) item).shatter(null, pos), pos);
 				} else {
 					Dungeon.level.drop( item, pos );
 				}

File: src/com/shatteredpixel/shatteredpixeldungeon/items/weapon/Weapon.java
Patch:
@@ -27,6 +27,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfFuror;
 import com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfSharpshooting;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.enchantments.*;
+import com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
@@ -149,7 +150,7 @@ public int damageRoll( Hero hero ) {
 		
 		int damage = super.damageRoll( hero );
 		
-		if ((hero.rangedWeapon != null) == (hero.heroClass == HeroClass.HUNTRESS)) {
+		if (this instanceof MeleeWeapon || (this instanceof MissileWeapon && hero.heroClass == HeroClass.HUNTRESS)) {
 			int exStr = hero.STR() - STR;
 			if (exStr > 0) {
 				damage += Random.IntRange( 0, exStr );

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/UnstableSpellbook.java
Patch:
@@ -69,7 +69,7 @@ public ArrayList<String> actions( Hero hero ) {
         ArrayList<String> actions = super.actions( hero );
         if (isEquipped( hero ) && charge > 0 && !cursed)
             actions.add(AC_READ);
-        if (level < levelCap && !cursed)
+        if (isEquipped( hero ) && level < levelCap && !cursed)
             actions.add(AC_ADD);
         return actions;
     }

File: src/com/shatteredpixel/shatteredpixeldungeon/windows/WndCatalogus.java
Patch:
@@ -102,9 +102,10 @@ protected void select( boolean value ) {
 			}
 		};
 		for (Tab tab : tabs) {
-			tab.setSize( TAB_WIDTH, tabHeight() );
 			add( tab );
 		}
+
+		layoutTabs();
 		
 		select( showPotions ? 0 : 1 );
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/windows/WndClass.java
Patch:
@@ -57,7 +57,6 @@ public WndClass( HeroClass cl ) {
             add( tabMastery );
 
             tab = new RankingTab( TXT_MASTERY, tabMastery );
-            tab.setSize( TAB_WIDTH, tabHeight() );
             add( tab );
 
             resize(
@@ -67,6 +66,8 @@ public WndClass( HeroClass cl ) {
             resize( (int)tabPerks.width, (int)tabPerks.height );
         }
 
+        layoutTabs();
+
         select( 0 );
     }
 

File: src/com/shatteredpixel/shatteredpixeldungeon/windows/WndRanking.java
Patch:
@@ -115,9 +115,10 @@ private void createControls() {
 			add( pages[i] );
 			
 			Tab tab = new RankingTab( labels[i], pages[i] );
-			tab.setSize( TAB_WIDTH, tabHeight() );
 			add( tab );
 		}
+
+		layoutTabs();
 		
 		select( 0 );
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mimic.java
Patch:
@@ -64,7 +64,7 @@ public void storeInBundle( Bundle bundle ) {
 	@Override
 	public void restoreFromBundle( Bundle bundle ) {
 		super.restoreFromBundle( bundle );
-		items = new ArrayList<Item>( (Collection<? extends Item>) bundle.getCollection( ITEMS ) ); 
+		items = new ArrayList<Item>( (Collection<Item>) ((Collection<?>) bundle.getCollection( ITEMS ) ));
 		adjustStats( bundle.getInt( LEVEL ) );
 	}
 	

File: src/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -191,7 +191,7 @@ public boolean collect( Bag container ) {
 	};
 	
 	public void charge( Char owner ) {
-		(charger = new Charger()).attachTo( owner );
+		if (charger == null) (charger = new Charger()).attachTo( owner );
 	}
 
     @Override

File: src/com/shatteredpixel/shatteredpixeldungeon/ui/ResumeIndicator.java
Patch:
@@ -1,7 +1,6 @@
 package com.shatteredpixel.shatteredpixeldungeon.ui;
 
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
-import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
 import com.watabou.noosa.Image;
 
 /**
@@ -41,7 +40,9 @@ protected void onClick() {
 
     @Override
     public void update() {
-        if (visible != (Dungeon.hero.lastAction != null)){
+        if (!Dungeon.hero.isAlive())
+            visible = false;
+        else if (visible != (Dungeon.hero.lastAction != null)){
             visible = Dungeon.hero.lastAction != null;
             if (visible)
                 flash();

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -223,7 +223,8 @@ public void create() {
                 int petalsNeeded = (int) Math.ceil((float)((Dungeon.depth / 2) - rose.droppedPetals) / 3);
 
                 for (int i=1; i <= petalsNeeded; i++) {
-                    if (rose.droppedPetals < 10) {
+					//the player may miss a single petal and still max their rose.
+                    if (rose.droppedPetals < 11) {
                         addItemToSpawn(new DriedRose.Petal());
                         rose.droppedPetals++;
                     }

File: src/com/shatteredpixel/shatteredpixeldungeon/items/Item.java
Patch:
@@ -179,7 +179,7 @@ public boolean collect( Bag container ) {
 			}
 			
 			items.add( this );
-			Dungeon.quickslot.replaceSimilar(this);
+			if (stackable || this instanceof Boomerang) Dungeon.quickslot.replaceSimilar(this);
 			updateQuickslot();
 			Collections.sort( items, itemComparator );
 			return true;
@@ -205,7 +205,7 @@ public final Item detach( Bag container ) {
 		} else
 		if (quantity == 1) {
 
-			if (stackable == true || this instanceof Boomerang){
+			if (stackable || this instanceof Boomerang){
 				Dungeon.quickslot.convertToPlaceholder(this);
 			}
 

File: src/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/Boomerang.java
Patch:
@@ -36,7 +36,7 @@ public class Boomerang extends MissileWeapon {
 		
 		MIN = 1;
 		MAX = 4;
-		
+
 		stackable = false;
 
         bones = false;
@@ -100,6 +100,8 @@ private void circleBack( int from, Hero owner ) {
         if (throwEquiped) {
             owner.belongings.weapon = this;
             owner.spend( -TIME_TO_EQUIP );
+			Dungeon.quickslot.replaceSimilar(this);
+			updateQuickslot();
         } else
         if (!collect( curUser.belongings.backpack )) {
             Dungeon.level.drop( this, owner.pos ).sprite.drop();

File: src/com/shatteredpixel/shatteredpixeldungeon/items/Item.java
Patch:
@@ -264,6 +264,8 @@ public Item upgrade() {
 		cursed = false;
 		cursedKnown = true;
 		this.level++;
+
+		updateQuickslot();
 		
 		return this;
 	}
@@ -399,7 +401,7 @@ public String status() {
 	
 	public void updateQuickslot() {
 		if (Dungeon.quickslot.contains( this )) {
-			updateQuickslot();
+			QuickSlotButton.refresh();
 		}
 	}
 	

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/LastShopLevel.java
Patch:
@@ -52,6 +52,7 @@ public String waterTex() {
 	protected boolean build() {
 
 		feeling = Feeling.CHASM;
+		viewDistance = 4;
 		
 		initRooms();
 		
@@ -113,8 +114,7 @@ protected boolean build() {
 			}
 		}
 		
-		if (roomShop == null || shopSquare < 30
-				|| ((roomShop.width()-1)*(roomShop.height()-1) < ShopPainter.spaceNeeded())) {
+		if (roomShop == null || shopSquare < 54) {
 			return false;
 		} else {
 			roomShop.type = Imp.Quest.isCompleted() ? Room.Type.SHOP : Room.Type.STANDARD;

File: src/com/shatteredpixel/shatteredpixeldungeon/items/Item.java
Patch:
@@ -26,6 +26,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Speck;
 import com.shatteredpixel.shatteredpixeldungeon.items.bags.Bag;
+import com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.Boomerang;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.MissileWeapon;
 import com.shatteredpixel.shatteredpixeldungeon.mechanics.Ballistica;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.CellSelector;
@@ -204,7 +205,7 @@ public final Item detach( Bag container ) {
 		} else
 		if (quantity == 1) {
 
-			if (stackable == true){
+			if (stackable == true || this instanceof Boomerang){
 				Dungeon.quickslot.convertToPlaceholder(this);
 			}
 

File: src/com/shatteredpixel/shatteredpixeldungeon/windows/WndRanking.java
Patch:
@@ -252,7 +252,7 @@ public ItemsTab() {
 				if (Dungeon.quickslot.getItem(i) != null){
 					QuickSlotButton slot = new QuickSlotButton(Dungeon.quickslot.getItem(i));
 
-					slot.setPos( pos, 116 );
+					slot.setRect( pos, 116, 28, 28 );
 
 					add(slot);
 

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -35,6 +35,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfAccuracy;
 import com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfWealth;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Level;
+import com.shatteredpixel.shatteredpixeldungeon.levels.Level.Feeling;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
 import com.watabou.utils.Bundle;

File: src/com/shatteredpixel/shatteredpixeldungeon/ui/QuickSlotButton.java
Patch:
@@ -58,7 +58,7 @@ public QuickSlotButton( int slotNum ) {
 	public void destroy() {
 		super.destroy();
 		
-		instance = null;
+		instance = new QuickSlotButton[4];
 		
 		lastItem = null;
 		lastTarget = null;

File: src/com/shatteredpixel/shatteredpixeldungeon/windows/WndSettings.java
Patch:
@@ -173,7 +173,7 @@ protected void onClick() {
 				}
 			};
 			btnQuickSlot.setRect( 0, btnBrightness.bottom() + GAP, WIDTH, BTN_HEIGHT );
-			btnQuickSlot.checked( ShatteredPixelDungeon.quickSlots() == 1 );
+			btnQuickSlot.checked( ShatteredPixelDungeon.quickSlots() == 2 );
 			add( btnQuickSlot );
 			
 			resize( WIDTH, (int)btnQuickSlot.bottom() );

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/SewerBossLevel.java
Patch:
@@ -79,11 +79,11 @@ protected boolean build() {
         //now find the rest of the rooms for this boss mini-maze
         Room curRoom = null;
         Room lastRoom = roomEntrance;
-        //we make 4 rooms, last iteration is tieing the final toom to the start
+        //we make 4 rooms, last iteration is tieing the final room to the start
         for(int i = 0; i <= 4; i++){
             retry = 0;
             //find a suitable room the first four times
-            //suitable room should be empty, have a distance of 2 from the current room, and not be adjacent to the entrance.
+            //suitable room should be empty, have a distance of 2 from the current room, and not touch the entrance.
             if (i < 4) {
                 do {
                     if (retry++ > 20) {
@@ -92,7 +92,7 @@ protected boolean build() {
                     curRoom = Random.element(rooms);
                     Graph.buildDistanceMap(rooms, curRoom);
                     distance = lastRoom.distance();
-                } while (curRoom.type != Type.NULL || distance != 2 || curRoom.neigbours.contains(roomEntrance));
+                } while (curRoom.type != Type.NULL || distance != 2 || !curRoom.intersect(roomEntrance).isEmpty());
 
                 curRoom.type = Type.STANDARD;
 

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -878,7 +878,7 @@ public int attackProc( Char enemy, int damage ) {
 				if (wand.curCharges < wand.maxCharges && damage > 0) {
 
 					wand.curCharges++;
-					if (belongings.quickslot.contains(wand)) {
+					if (Dungeon.quickslot.contains(wand)) {
 						QuickSlot.refresh();
 					}
 

File: src/com/shatteredpixel/shatteredpixeldungeon/ui/QuickSlot.java
Patch:
@@ -127,7 +127,7 @@ protected boolean onLongClick() {
 	
 	@SuppressWarnings("unchecked")
 	private static Item select() {
-		return Dungeon.hero.belongings.quickslot.getItem(0);
+		return Dungeon.quickslot.getItem(0);
 	}
 
     public static Item getItem(){
@@ -138,7 +138,7 @@ public static Item getItem(){
 	@Override
 	public void onSelect( Item item ) {
 		if (item != null) {
-			Dungeon.hero.belongings.quickslot.setSlot( 0 , item );
+			Dungeon.quickslot.setSlot( 0 , item );
 			refresh();
 		}
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/windows/WndBag.java
Patch:
@@ -395,7 +395,7 @@ protected void onClick() {
 		protected boolean onLongClick() {
 			if (listener == null && item.defaultAction != null) {
 				hide();
-				Dungeon.hero.belongings.quickslot.setSlot( 0 , item );
+				Dungeon.quickslot.setSlot( 0 , item );
 				QuickSlot.refresh();
 				return true;
 			} else {

File: src/com/shatteredpixel/shatteredpixeldungeon/windows/WndRanking.java
Patch:
@@ -248,8 +248,8 @@ public ItemsTab() {
 			}
 
 			//TODO: add proper visual support for mutli-quickslots
-			if (stuff.quickslot.getItem(0) != null){
-				addItem( stuff.quickslot.getItem(0) );
+			if (Dungeon.quickslot.getItem(0) != null){
+				addItem( Dungeon.quickslot.getItem(0) );
 			}
 		}
 		

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Piranha.java
Patch:
@@ -59,6 +59,7 @@ protected boolean act() {
 		} else {
 			//this causes pirahna to move away when a door is closed on them.
 			Dungeon.level.updateFieldOfView( this );
+			enemy = chooseEnemy();
 			if (state == this.HUNTING && !(enemy.isAlive() && Level.fieldOfView[enemy.pos] && enemy.invisible <= 0)){
 				state = this.WANDERING;
 				int oldPos = pos;

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/RegularLevel.java
Patch:
@@ -31,6 +31,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfUpgrade;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Room.Type;
 import com.shatteredpixel.shatteredpixeldungeon.levels.painters.Painter;
+import com.shatteredpixel.shatteredpixeldungeon.levels.painters.ShopPainter;
 import com.watabou.utils.Bundle;
 import com.watabou.utils.Graph;
 import com.watabou.utils.Random;
@@ -123,7 +124,7 @@ protected boolean build() {
 		if (Dungeon.shopOnLevel()) {
 			Room shop = null;
 			for (Room r : roomEntrance.connected.keySet()) {
-				if (r.connected.size() == 1 && r.width() >= 5 && r.height() >= 5) {
+				if (r.connected.size() == 1 && ((r.width()-1)*(r.height()-1) >= ShopPainter.spaceNeeded())) {
 					shop = r;
 					break;
 				}

File: src/com/shatteredpixel/shatteredpixeldungeon/effects/Pushing.java
Patch:
@@ -72,8 +72,9 @@ public Effect() {
 			acc.set( -speed.x / DELAY, -speed.y / DELAY );
 			
 			delay = 0;
-			
-			sprite.parent.add( this );
+
+			if (sprite.parent != null)
+				sprite.parent.add( this );
 		}
 		
 		@Override

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/MasterThievesArmband.java
Patch:
@@ -46,7 +46,7 @@ public void collect(int gold){
 
         @Override
         public void detach() {
-            charge /= 0.80;
+            charge *= 0.80;
             super.detach();
         }
 

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/CavesLevel.java
Patch:
@@ -59,8 +59,8 @@ protected boolean[] grass() {
 	}
 	
 	@Override
-	protected boolean build() {
-		if (!super.build()) return false;
+	protected boolean assignRoomType() {
+		super.assignRoomType();
 
 		if (!Blacksmith.Quest.spawn( rooms ) && Dungeon.depth == 14)
 			return false;

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/CityLevel.java
Patch:
@@ -54,14 +54,16 @@ protected boolean[] grass() {
 	}
 	
 	@Override
-	protected void assignRoomType() {
+	protected boolean assignRoomType() {
 		super.assignRoomType();
 		
 		for (Room r : rooms) {
 			if (r.type == Type.TUNNEL) {
 				r.type = Type.PASSAGE;
 			}
 		}
+
+		return true;
 	}
 	
 	@Override

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonLevel.java
Patch:
@@ -55,14 +55,16 @@ protected boolean[] grass() {
 	}
 	
 	@Override
-	protected void assignRoomType() {
+	protected boolean assignRoomType() {
 		super.assignRoomType();
 		
 		for (Room r : rooms) {
 			if (r.type == Type.TUNNEL) {
 				r.type = Type.PASSAGE;
 			}
 		}
+
+		return true;
 	}
 	
 	@Override

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Blacksmith.java
Patch:
@@ -303,7 +303,7 @@ public static void restoreFromBundle( Bundle bundle ) {
 			}
 		}
 		
-		public static void spawn( Collection<Room> rooms ) {
+		public static boolean spawn( Collection<Room> rooms ) {
 			if (!spawned && Dungeon.depth > 11 && Random.Int( 15 - Dungeon.depth ) == 0) {
 				
 				Room blacksmith = null;
@@ -321,6 +321,7 @@ public static void spawn( Collection<Room> rooms ) {
 					}
 				}
 			}
+			return spawned;
 		}
 	}
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Imp.java
Patch:
@@ -209,7 +209,7 @@ public static void restoreFromBundle( Bundle bundle ) {
 			}
 		}
 		
-		public static void spawn( CityLevel level, Room room ) {
+		public static void spawn( CityLevel level ) {
 			if (!spawned && Dungeon.depth > 16 && Random.Int( 20 - Dungeon.depth ) == 0) {
 				
 				Imp npc = new Imp();

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/CityLevel.java
Patch:
@@ -88,7 +88,7 @@ protected void decorate() {
 	protected void createItems() {
 		super.createItems();
 		
-		Imp.Quest.spawn( this, roomEntrance );
+		Imp.Quest.spawn( this );
 	}
 	
 	@Override

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/PrisonLevel.java
Patch:
@@ -66,8 +66,8 @@ protected void assignRoomType() {
 	}
 	
 	@Override
-	protected void createMobs() {
-		super.createMobs();
+	protected void createItems() {
+		super.createItems();
 		
 		Wandmaker.Quest.spawn( this, roomEntrance );
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/scenes/WelcomeScene.java
Patch:
@@ -96,7 +96,7 @@ public void create() {
             @Override
             protected void onClick() {
                 //imports new ranking data for pre-0.2.3 saves.
-                if (gameversion < 29){
+                if (gameversion < 30){
                     Rankings.INSTANCE.load();
                     Rankings.INSTANCE.save();
                 }

File: src/com/shatteredpixel/shatteredpixeldungeon/Rankings.java
Patch:
@@ -207,6 +207,9 @@ public void restoreFromBundle( Bundle bundle ) {
 				depth = bundle.getInt( DEPTH );
 				herolevel = bundle.getInt( LEVEL );
 			}
+
+			//to handle cases with pre-0.2.3d saves, where an updated ranking where the player died to dm-300 would cause a recorded depth of 30015.
+			if (depth == 30015) depth = 15;
 		}
 		
 		@Override

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Invisibility.java
Patch:
@@ -56,17 +56,17 @@ public String toString() {
 	
 	public static void dispel() {
 		Invisibility buff = Dungeon.hero.buff( Invisibility.class );
-		if (buff != null && Dungeon.hero.visibleEnemies() > 0) {
+		if (buff != null) {
 			buff.detach();
 		}
         CloakOfShadows.cloakStealth cloakBuff = Dungeon.hero.buff( CloakOfShadows.cloakStealth.class );
-        if (cloakBuff != null && Dungeon.hero.visibleEnemies() > 0) {
+        if (cloakBuff != null) {
             cloakBuff.act();
             cloakBuff.detach();
         }
         //this isn't a form of invisibilty, but it is meant to dispel at the same time as it.
         TimekeepersHourglass.timeFreeze timeFreeze = Dungeon.hero.buff( TimekeepersHourglass.timeFreeze.class );
-        if (timeFreeze != null && Dungeon.hero.visibleEnemies() > 0) {
+        if (timeFreeze != null) {
             timeFreeze.detach();
         }
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/items/armor/ClassArmor.java
Patch:
@@ -17,6 +17,7 @@
  */
 package com.shatteredpixel.shatteredpixeldungeon.items.armor;
 
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Invisibility;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
 import com.watabou.utils.Bundle;
@@ -103,6 +104,7 @@ public void execute( Hero hero, String action ) {
 				GLog.w( TXT_NOT_EQUIPPED );
 			} else {
 				curUser = hero;
+				Invisibility.dispel();
 				doSpecial();
 			}
 			

File: src/com/shatteredpixel/shatteredpixeldungeon/items/armor/WarriorArmor.java
Patch:
@@ -24,7 +24,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Fury;
-import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Invisibility;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Paralysis;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroClass;
@@ -95,7 +94,7 @@ public void onSelect( Integer target ) {
 					Buff.affect( curUser, Fury.class );
 				}
 				
-				Invisibility.dispel();
+
 
                 final int dest = cell;
                 curUser.busy();

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/AlchemistsToolkit.java
Patch:
@@ -106,6 +106,7 @@ public void guessBrew() {
         } else if (score > level) {
 
             level = score;
+            seedsToPotion = 0;
             bstGuess = curGuess;
             this.numRight = numRight;
             this.numWrongPlace = numWrongPlace;
@@ -218,8 +219,8 @@ public boolean tryCook(int count){
             //this logic is handled inside the class with a variable so that it may be stored.
             //to prevent manipulation where a player could keep throwing in 1-2 seeds until they get lucky.
             if (seedsToPotion == 0){
-                if (Random.Int(30) < 10+level){
-                    if (Random.Int(30) < level){
+                if (Random.Int(20) < 10+level){
+                    if (Random.Int(20) < level){
                         seedsToPotion = 1;
                     } else
                         seedsToPotion = 2;

File: src/com/shatteredpixel/shatteredpixeldungeon/Badges.java
Patch:
@@ -193,7 +193,7 @@ private static HashSet<Badge> restore( Bundle bundle ) {
 	
 	private static void store( Bundle bundle, HashSet<Badge> badges ) {
 		int count = 0;
-		String names[] = new String[global.size()];
+		String names[] = new String[badges.size()];
 		
 		for (Badge badge:badges) {
 			names[count++] = badge.toString();

File: src/com/shatteredpixel/shatteredpixeldungeon/Rankings.java
Patch:
@@ -46,8 +46,6 @@ public enum Rankings {
 	
 	public void submit( boolean win ) {
 		
-		load();
-		
 		Record rec = new Record();
 		
 		rec.info	= Dungeon.resultDescription;
@@ -65,6 +63,8 @@ public void submit( boolean win ) {
 		} catch (IOException e) {
 			rec.gameFile = "";
 		}
+
+		load();
 		
 		records.add( rec );
 		
@@ -160,7 +160,7 @@ public static class Record implements Bundlable {
 		
 		public HeroClass heroClass;
 		public int armorTier;
-		public int herolevel; //not currently used, but I may want this here in the future.
+		public int herolevel;
 		public int depth;
 		
 		public int score;

File: src/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -576,6 +576,8 @@ public static void loadGame( String fileName, boolean fullLoad ) throws IOExcept
 
         version = bundle.getInt( VERSION );
 
+		Generator.reset();
+
         Dungeon.challenges = bundle.getInt( CHALLENGES );
 		
 		Dungeon.level = null;

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM300.java
Patch:
@@ -55,7 +55,7 @@ public class DM300 extends Mob {
 		EXP = 30;
 		defenseSkill = 18;
 		
-		loot = new CapeOfThorns();
+		loot = new CapeOfThorns().identify();
 		lootChance = 0.333f;
 	}
 	

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Thief.java
Patch:
@@ -48,7 +48,7 @@ public class Thief extends Mob {
 		EXP = 5;
 		maxLvl = 10;
 		
-		loot = new MasterThievesArmband();
+		loot = new MasterThievesArmband().identify();
         lootChance = 0.01f;
 
         FLEEING = new Fleeing();

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Thief.java
Patch:
@@ -48,7 +48,7 @@ public class Thief extends Mob {
 		EXP = 5;
 		maxLvl = 10;
 		
-		loot = MasterThievesArmband.class;
+		loot = new MasterThievesArmband();
         lootChance = 0.01f;
 
         FLEEING = new Fleeing();

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1168,7 +1168,7 @@ public void add( Buff buff ) {
 				GLog.w( "You are poisoned!" );
 				interrupt();
 			} else if (buff instanceof Ooze) {
-				GLog.w( "Caustic ooze eats your flesh. Wash away it!" );
+				GLog.w( "Caustic ooze eats your flesh. Wash it away!" );
 			} else if (buff instanceof Roots) {
 				GLog.w( "You can't move!" );
 			} else if (buff instanceof Weakness) {

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/SewerBossLevel.java
Patch:
@@ -83,7 +83,7 @@ protected boolean build() {
         for(int i = 0; i <= 4; i++){
             retry = 0;
             //find a suitable room the first four times
-            //sutiable room should be empty and have a distance of 2 from the current room
+            //suitable room should be empty, have a distance of 2 from the current room, and not be adjacent to the entrance.
             if (i < 4) {
                 do {
                     if (retry++ > 20) {
@@ -92,7 +92,7 @@ protected boolean build() {
                     curRoom = Random.element(rooms);
                     Graph.buildDistanceMap(rooms, curRoom);
                     distance = lastRoom.distance();
-                } while (curRoom.type != Type.NULL || distance != 2);
+                } while (curRoom.type != Type.NULL || distance != 2 || curRoom.neigbours.contains(roomEntrance));
 
                 curRoom.type = Type.STANDARD;
 

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -215,7 +215,7 @@ public void create() {
             }
 
             DriedRose rose = Dungeon.hero.belongings.getItem( DriedRose.class );
-            if (rose != null){
+            if (rose != null && !rose.cursed){
                 //this way if a rose is dropped later in the game, player still has a chance to max it out.
                 int petalsNeeded = (int) Math.ceil((float)((Dungeon.depth / 2) - rose.droppedPetals) / 3);
 

File: src/com/shatteredpixel/shatteredpixeldungeon/ResultDescriptions.java
Patch:
@@ -20,7 +20,7 @@
 public class ResultDescriptions {
 
 	// Mobs
-	public static final String MOB		= "Killed by a %s on level %d";
+	public static final String MOB		= "Killed by %s on level %d";
 	public static final String UNIQUE	= "Killed by the %s on level %d";
 	public static final String NAMED	= "Killed by %s on level %d";
 	

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Yog.java
Patch:
@@ -335,7 +335,7 @@ public boolean attack( Char enemy ) {
 					enemy.sprite.flash();
 					
 					if (!enemy.isAlive() && enemy == Dungeon.hero) {
-						Dungeon.fail( Utils.format( ResultDescriptions.BOSS, name, Dungeon.depth ) );
+						Dungeon.fail( Utils.format( ResultDescriptions.UNIQUE, name, Dungeon.depth ) );
 						GLog.n( TXT_KILL, name );
 					}
 					return true;

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Buff.java
Patch:
@@ -27,9 +27,9 @@ public class Buff extends Actor {
 	
 	public Char target;
 
-    public static HashSet<Class<?>> resistances = new HashSet<Class<?>>();
+    public HashSet<Class<?>> resistances = new HashSet<Class<?>>();
 
-    public static HashSet<Class<?>> immunities = new HashSet<Class<?>>();
+    public HashSet<Class<?>> immunities = new HashSet<Class<?>>();
 	
 	public boolean attachTo( Char target ) {
 

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/EarthImbue.java
Patch:
@@ -30,7 +30,7 @@ public String toString() {
         return "Imbued with Earth";
     }
 
-    static {
+    {
         immunities.add( Paralysis.class );
         immunities.add( Roots.class );
         immunities.add( Slow.class );

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/FireImbue.java
Patch:
@@ -71,7 +71,7 @@ public String toString() {
         return "Imbued with Fire";
     }
 
-    static {
+    {
         immunities.add( Burning.class );
     }
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/GasesImmunity.java
Patch:
@@ -39,7 +39,7 @@ public String toString() {
 		return "Immune to gases";
 	}
 
-	static {
+	{
         immunities.add( ParalyticGas.class );
         immunities.add( ToxicGas.class );
         immunities.add( ConfusionGas.class );

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/ToxicImbue.java
Patch:
@@ -59,7 +59,7 @@ public String toString() {
         return "Imbued with Toxicity";
     }
 
-    static {
+    {
         immunities.add( ToxicGas.class );
         immunities.add( Poison.class );
     }

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Swarm.java
Patch:
@@ -136,7 +136,7 @@ private Swarm split() {
 	@Override
 	public void die( Object cause ){
         //sets drop chance
-        lootChance = 1f/((5 + Dungeon.limitedDrops.swarmHP.count ) * generation );
+        lootChance = 1f/((5 + Dungeon.limitedDrops.swarmHP.count ) * generation+1 );
         super.die( cause );
     }
 

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/UnstableSpellbook.java
Patch:
@@ -227,7 +227,8 @@ public void onSelect(Item item) {
                 }
                 if (item != null)
                     GLog.w("You are unable to add this scroll to the book.");
-            }
+            } else if (item instanceof Scroll && !item.isIdentified())
+                GLog.w("You're not sure what type of scroll this is yet.");
         }
     };
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TimekeepersHourglass.java
Patch:
@@ -244,6 +244,7 @@ public boolean act() {
         @Override
         public void detach() {
             super.detach();
+            activeBuff = null;
             Dungeon.observe();
         }
     }
@@ -303,6 +304,7 @@ public void detach(){
             charge = 0;
             QuickSlot.refresh();
             super.detach();
+            activeBuff = null;
         }
 
         private static final String PRESSES = "presses";

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Drowsy.java
Patch:
@@ -29,7 +29,7 @@ public int icon() {
     }
 
     public boolean attachTo( Char target ) {
-        if (super.attachTo(target) && !target.immunities().contains(Sleep.class)) {
+        if (!target.immunities().contains(Sleep.class) && super.attachTo(target)) {
             if (cooldown() == 0)
                 spend(Random.Int(3, 6));
             return true;

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/DriedRose.java
Patch:
@@ -16,7 +16,6 @@
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.GhostSprite;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
-import com.shatteredpixel.shatteredpixeldungeon.sprites.WraithSprite;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
 import com.shatteredpixel.shatteredpixeldungeon.windows.WndQuest;
 import com.watabou.noosa.audio.Sample;
@@ -55,7 +54,7 @@ public class DriedRose extends Artifact {
     @Override
     public ArrayList<String> actions( Hero hero ) {
         ArrayList<String> actions = super.actions( hero );
-        if (isEquipped( hero ) && charge == chargeCap)
+        if (isEquipped( hero ) && charge == chargeCap && !cursed)
             actions.add(AC_SUMMON);
         return actions;
     }
@@ -67,6 +66,7 @@ public void execute( Hero hero, String action ) {
             if (spawned)                    GLog.n("sad ghost: I'm already here");
             else if (!isEquipped( hero ))   GLog.i("You need to equip your rose to do that.");
             else if (charge != chargeCap)   GLog.i("Your rose isn't fully charged yet.");
+            else if (cursed)                GLog.i("You cannot use a cursed rose.");
             else {
                 ArrayList<Integer> spawnPoints = new ArrayList<Integer>();
                 for (int i = 0; i < Level.NEIGHBOURS8.length; i++) {

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/UnstableSpellbook.java
Patch:
@@ -82,6 +82,7 @@ public void execute( Hero hero, String action ) {
             if (hero.buff( Blindness.class ) != null) GLog.w("You cannot read from the book while blinded.");
             else if (!isEquipped( hero ))             GLog.i("You need to equip your spellbook to do that.");
             else if (charge == 0)                     GLog.i("Your spellbook is out of energy for now.");
+            else if (cursed)                          GLog.i("Your cannot read from a cursed spellbook.");
             else {
                 charge--;
 

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -781,7 +781,7 @@ public void press( int cell, Char ch ) {
 			Level.set( cell, Terrain.discover( map[cell] ) );
 			GameScene.updateMap( cell );
 
-			timeFreeze.delayedPress(cell);
+			timeFreeze.setDelayedPress( cell );
 
 		}
 		

File: src/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -298,7 +298,9 @@ public void create() {
 	
 	public void destroy() {
 		
-		scene = null;
+		freezeEmitters = false;
+
+        scene = null;
 		Badges.saveGlobal();
 		
 		super.destroy();

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/Artifact.java
Patch:
@@ -208,10 +208,10 @@ public String status() {
     //converts class names to be more concise and readable.
     protected String convertName(String className){
         //removes known redundant parts of names.
-        className.replaceFirst("ScrollOf|PotionOf", "");
+        className = className.replaceFirst("ScrollOf|PotionOf", "");
 
         //inserts a space infront of every uppercase character
-        className.replaceAll("(\\p{Ll})(\\p{Lu})", "$1 $2");
+        className = className.replaceAll("(\\p{Ll})(\\p{Lu})", "$1 $2");
 
         return className;
     };

File: src/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/InventoryScroll.java
Patch:
@@ -81,7 +81,7 @@ public void onSelect( Item item ) {
 				Sample.INSTANCE.play( Assets.SND_READ );
 				Invisibility.dispel();
 				
-			} else if (identifiedByUse) {
+			} else if (identifiedByUse && !((Scroll)curItem).ownedByBook) {
 				
 				((InventoryScroll)curItem).confirmCancelation();
 				

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/SewerBossLevel.java
Patch:
@@ -122,7 +122,7 @@ protected boolean build() {
                 //look at rooms adjacent to the final found room (likely to be furthest from start)
                 ArrayList<Room> candidates = new ArrayList<Room>();
                 for (Room r : lastRoom.neigbours) {
-                    if (r.type == Type.NULL && r.connected.size() == 0) {
+                    if (r.type == Type.NULL && r.connected.size() == 0 && !r.neigbours.contains(roomEntrance)) {
                         candidates.add(r);
                     }
                 }

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -409,7 +409,7 @@ public boolean act() {
 		}
 		
 		checkVisibleMobs();
-		AttackIndicator.updateState();
+
 		
 		if (curAction == null) {
 			
@@ -495,6 +495,8 @@ private void ready() {
 		curAction = null;
         damageInterrupt = true;
 		ready = true;
+
+        AttackIndicator.updateState();
 		
 		GameScene.ready();
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -636,7 +636,7 @@ public Plant plant( Plant.Seed seed, int pos ) {
                 map[pos] == Terrain.EMPTY ||
                 map[pos] == Terrain.EMBERS ||
                 map[pos] == Terrain.EMPTY_DECO) {
-            set(pos, Terrain.GRASS);
+            map[pos] = Terrain.GRASS;
             GameScene.updateMap( pos );
         }
 		

File: src/com/shatteredpixel/shatteredpixeldungeon/Rankings.java
Patch:
@@ -110,7 +110,7 @@ public void save() {
 			OutputStream output = Game.instance.openFileOutput( RANKINGS_FILE, Game.MODE_PRIVATE );
 			Bundle.write( bundle, output );
 			output.close();
-		} catch (Exception e) {
+		} catch (IOException e) {
 		}
 	}
 	
@@ -137,7 +137,7 @@ public void load() {
 				totalNumber = records.size();
 			}
 			
-		} catch (Exception e) {
+		} catch (IOException e) {
 		}
 	}
 	

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/UnstableSpellbook.java
Patch:
@@ -99,10 +99,10 @@ protected ArtifactBuff passiveBuff() {
 
     @Override
     public Item upgrade() {
-        chargeCap = ((level/2)+1);
+        chargeCap = (((level+1)/2)+1);
 
         //for artifact transmutation.
-        if (scrolls.size() > (levelCap-level))
+        while (scrolls.size() > (levelCap-1-level))
             scrolls.remove(0);
 
         return super.upgrade();

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/WaterOfTransmutation.java
Patch:
@@ -173,6 +173,7 @@ private Artifact changeArtifact( Artifact a ) {
         if (n != null){
             n.cursedKnown = a.cursedKnown;
             n.cursed = a.cursed;
+            n.levelKnown = a.levelKnown;
 			n.transferUpgrade(a.visiblyUpgraded());
             Journal.remove( Feature.WELL_OF_TRANSMUTATION );
         }

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Elemental.java
Patch:
@@ -83,11 +83,12 @@ public void add( Buff buff ) {
 		} else {
 			if (buff instanceof Frost) {
                 if (Level.water[this.pos])
-                    damage(Random.NormalIntRange( HT / 2, HT ), buff);
+                    damage( Random.NormalIntRange( HT / 2, HT ), buff );
                 else
 				    damage( Random.NormalIntRange( 1, HT * 2 / 3 ), buff );
 			}
-			super.add( buff );
+            if (isAlive())
+			    super.add( buff );
 		}
 	}
 	

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TalismanOfForesight.java
Patch:
@@ -137,7 +137,7 @@ public boolean act() {
                 }
             }
 
-            if (smthFound == true || !cursed){
+            if (smthFound == true && !cursed){
                 if (warn == 0){
                     GLog.w("You feel uneasy.");
                     if (target instanceof Hero){

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -572,7 +572,9 @@ public Heap drop( Item item, int cell ) {
             (Dungeon.isChallenged( Challenges.NO_HEALING ) && item instanceof PotionOfHealing) ||
             (Dungeon.isChallenged( Challenges.NO_HERBALISM ) && (item instanceof Plant.Seed || item instanceof Dewdrop))) {
 
-            return new Heap();
+            Heap heap = new Heap();
+            GameScene.add( heap );
+            return heap;
 
         }
 

File: src/com/shatteredpixel/shatteredpixeldungeon/items/weapon/enchantments/Piercing.java
Patch:
@@ -39,7 +39,7 @@ public boolean proc( Weapon weapon, Char attacker, Char defender, int damage ) {
 			int d = defender.pos - attacker.pos;
 			int pos = defender.pos + d;
 			
-			do {
+			while (pos >= 0 && pos < Level.LENGTH) {
 				
 				Char ch = Actor.findChar( pos );
 				if (ch == null) {
@@ -56,7 +56,7 @@ public boolean proc( Weapon weapon, Char attacker, Char defender, int damage ) {
 				ch.sprite.flash();
 				
 				pos += d;
-			} while (pos >= 0 && pos < Level.LENGTH);
+			}
 			
 			return true;
 			

File: src/com/shatteredpixel/shatteredpixeldungeon/Rankings.java
Patch:
@@ -93,7 +93,7 @@ public void submit( boolean win ) {
 	}
 	
 	private int score( boolean win ) {
-		return (Statistics.goldCollected + Dungeon.hero.lvl * Dungeon.depth * 100) * (win ? 2 : 1);
+		return (Statistics.goldCollected + Dungeon.hero.lvl * (win ? 26 : Dungeon.depth ) * 100) * (win ? 2 : 1);
 	}
 	
 	private static final String RECORDS	= "records";

File: src/com/shatteredpixel/shatteredpixeldungeon/items/Ankh.java
Patch:
@@ -68,7 +68,7 @@ public boolean isIdentified() {
     public ArrayList<String> actions( Hero hero ) {
         ArrayList<String> actions = super.actions(hero);
         DewVial vial = hero.belongings.getItem(DewVial.class);
-        if (vial != null && vial.isFull())
+        if (vial != null && vial.isFull() && !blessed)
             actions.add( AC_BLESS );
         return actions;
     }

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Belongings.java
Patch:
@@ -124,7 +124,7 @@ public void countIronKeys() {
 
         for (Item item : backpack) {
             if (item instanceof IronKey && ((IronKey)item).depth == Dungeon.depth) {
-                IronKey.curDepthQuantity++;
+                IronKey.curDepthQuantity += item.quantity();
             }
         }
     }

File: src/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
Patch:
@@ -151,9 +151,9 @@ public ArrayList<String> actions( Hero hero ) {
 	}
 	
 	@Override
-	public boolean doUnequip( Hero hero, boolean collect ) {
+	public boolean doUnequip( Hero hero, boolean collect, boolean single ) {
         onDetach();
-        return super.doUnequip( hero, collect );
+        return super.doUnequip( hero, collect, single );
 	}
 	
 	@Override

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -637,7 +637,7 @@ private boolean actOpenChest( HeroAction.OpenChest action ) {
 			Heap heap = Dungeon.level.heaps.get( dst );
 			if (heap != null && 
 				(heap.type == Type.CHEST || heap.type == Type.TOMB || heap.type == Type.SKELETON ||
-				heap.type == Type.LOCKED_CHEST || heap.type == Type.CRYSTAL_CHEST)) {
+                    heap.type == Type.REMAINS || heap.type == Type.LOCKED_CHEST || heap.type == Type.CRYSTAL_CHEST)) {
 				
 				theKey = null;
 				

File: src/com/shatteredpixel/shatteredpixeldungeon/items/food/Food.java
Patch:
@@ -47,6 +47,8 @@ public class Food extends Item {
 		stackable = true;
 		name = "ration of food";
 		image = ItemSpriteSheet.RATION;
+
+        bones = true;
 	}
 	
 	@Override

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -658,6 +658,7 @@ private boolean actOpenChest( HeroAction.OpenChest action ) {
 					Camera.main.shake( 1, 0.5f );
 					break;
 				case SKELETON:
+                case REMAINS:
 					break;
 				default:
 					Sample.INSTANCE.play( Assets.SND_UNLOCK );
@@ -1318,7 +1319,7 @@ public void onOperateComplete() {
 			}
 			
 			Heap heap = Dungeon.level.heaps.get( ((HeroAction.OpenChest)curAction).dst ); 
-			if (heap.type == Type.SKELETON) {
+			if (heap.type == Type.SKELETON || heap.type == Type.REMAINS) {
 				Sample.INSTANCE.play( Assets.SND_BONES );
 			}
 			heap.open( this );

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/CavesBossLevel.java
Patch:
@@ -201,7 +201,7 @@ protected void createItems() {
 			do {
 				pos = Random.IntRange( ROOM_LEFT, ROOM_RIGHT ) + Random.IntRange( ROOM_TOP + 1, ROOM_BOTTOM ) * WIDTH;
 			} while (pos == entrance || map[pos] == Terrain.SIGN);
-			drop( item, pos ).type = Heap.Type.SKELETON;
+			drop( item, pos ).type = Heap.Type.REMAINS;
 		}
 	}
 	

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/CityBossLevel.java
Patch:
@@ -159,7 +159,7 @@ protected void createItems() {
 					Random.IntRange( LEFT + 1, LEFT + HALL_WIDTH - 2 ) + 
 					Random.IntRange( TOP + HALL_HEIGHT + 1, TOP + HALL_HEIGHT  + CHAMBER_HEIGHT ) * WIDTH;
 			} while (pos == entrance || map[pos] == Terrain.SIGN);
-			drop( item, pos ).type = Heap.Type.SKELETON;
+			drop( item, pos ).type = Heap.Type.REMAINS;
 		}
 	}
 	

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/HallsBossLevel.java
Patch:
@@ -150,7 +150,7 @@ protected void createItems() {
 			do {
 				pos = Random.IntRange( ROOM_LEFT, ROOM_RIGHT ) + Random.IntRange( ROOM_TOP + 1, ROOM_BOTTOM ) * WIDTH;
 			} while (pos == entrance || map[pos] == Terrain.SIGN);
-			drop( item, pos ).type = Heap.Type.SKELETON;
+			drop( item, pos ).type = Heap.Type.REMAINS;
 		}
 	}
 	

File: src/com/shatteredpixel/shatteredpixeldungeon/ui/LootIndicator.java
Patch:
@@ -69,6 +69,7 @@ public void update() {
                     heap.type == Heap.Type.CRYSTAL_CHEST ? ItemSlot.CRYSTAL_CHEST :
 					heap.type == Heap.Type.TOMB ? ItemSlot.TOMB :
 					heap.type == Heap.Type.SKELETON ? ItemSlot.SKELETON :
+                    heap.type == Heap.Type.REMAINS ? ItemSlot.REMAINS :
 					heap.peek();
 				if (item != lastItem || item.quantity() != lastQuantity) {
 					lastItem = item;

File: src/com/shatteredpixel/shatteredpixeldungeon/items/rings/Ring.java
Patch:
@@ -93,10 +93,10 @@ public static void restore( Bundle bundle ) {
 	
 	public Ring() {
 		super();
-		syncGem();
+        syncVisuals();
 	}
 	
-	public void syncGem() {
+	public void syncVisuals() {
 		image	= handler.image( this );
 		gem		= handler.label( this );
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/items/Heap.java
Patch:
@@ -341,7 +341,7 @@ public void destroy() {
 	public void restoreFromBundle( Bundle bundle ) {
 		pos = bundle.getInt( POS );
 		type = Type.valueOf( bundle.getString( TYPE ) );
-		items = new LinkedList<Item>( (Collection<? extends Item>) bundle.getCollection( ITEMS ) );
+        items = new LinkedList<Item>( (Collection<Item>) ((Collection<?>) bundle.getCollection( ITEMS )) );
         items.removeAll(Collections.singleton(null));
 	}
 

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/RegularLevel.java
Patch:
@@ -690,7 +690,7 @@ public void storeInBundle( Bundle bundle ) {
 	public void restoreFromBundle( Bundle bundle ) {
 		super.restoreFromBundle( bundle );
 
-		rooms = new HashSet<Room>( (Collection<? extends Room>) bundle.getCollection( "rooms" ) );
+        rooms = new HashSet<Room>( (Collection<Room>) ((Collection<?>) bundle.getCollection( "rooms" )) );
 		for (Room r : rooms) {
 			if (r.type == Type.WEAK_FLOOR) {
 				weakFloorCreated = true;

File: src/com/shatteredpixel/shatteredpixeldungeon/scenes/TitleScene.java
Patch:
@@ -114,7 +114,7 @@ protected void onClick() {
 		btnHighscores.setPos( w / 2, btnPlay.top() );
 		add( btnHighscores );
 
-        BitmapText source = new BitmapText( "PD source v 1.7.1c", font1x );
+        BitmapText source = new BitmapText( "PD source v 1.7.2a", font1x );
         source.measure();
         source.hardlight( 0x444444 );
         source.x = w - source.width();

File: src/com/shatteredpixel/shatteredpixeldungeon/windows/WndSadGhost.java
Patch:
@@ -33,7 +33,7 @@
 public class WndSadGhost extends Window {
 
 	private static final String TXT_RAT	= 
-		"Thank you, that horrid rad is slain and I can finally rest..." +
+		"Thank you, that horrid rat is slain and I can finally rest..." +
         "I wonder what twisted magic created such a foul creature...\n\n";
     private static final String TXT_GNOLL	=
         "Thank you, that scheming gnoll is slain and I can finally rest..." +
@@ -62,7 +62,7 @@ public WndSadGhost( final Ghost ghost, final int type ) {
         BitmapTextMultiline message;
         switch (type){
             case 1:default:
-                titlebar.icon( new FetidRatSprite(). );
+                titlebar.icon( new FetidRatSprite() );
                 titlebar.label( "DEFEATED FETID RAT" );
                 message = PixelScene.createMultiline( TXT_RAT+TXT_GIVEITEM, 6 );
                 break;

File: src/com/shatteredpixel/shatteredpixeldungeon/windows/WndStory.java
Patch:
@@ -49,7 +49,7 @@ public class WndStory extends Window {
 		"The Dungeon lies right beneath the City, its upper levels actually constitute the City's sewer system.\n\n " +
         "As dark energy has crept up from below the usually harmless sewer creatures have become more and more " +
         "dangerous. The city sends guard patrols down here to try and maintain safety for those above, but " +
-        "they are slowly failing.\n\n This place is dangerous, but a least the evil magic at work here is weak." );
+        "they are slowly failing.\n\n This place is dangerous, but at least the evil magic at work here is weak." );
 		
 		CHAPTERS.put( ID_PRISON, 
 		"Many years ago an underground prison was built here for the most dangerous criminals. At the time it seemed " +

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
Patch:
@@ -283,6 +283,7 @@ public static void placeItem() {
 				
 				if (candidates.size() > 0) {
 					Random.element( candidates ).drop( new CorpseDust() );
+                    given = true;
 				} else {
 					int pos = Dungeon.level.randomRespawnCell();
 					while (Dungeon.level.heaps.get( pos ) != null) {

File: src/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
Patch:
@@ -70,8 +70,8 @@
 
 public class GameScene extends PixelScene {
 	
-	private static final String TXT_WELCOME			= "Welcome to level %d of Pixel Dungeon!";
-	private static final String TXT_WELCOME_BACK	= "Welcome back to level %d of Pixel Dungeon!";
+	private static final String TXT_WELCOME			= "Welcome to the level %d of Pixel Dungeon!";
+	private static final String TXT_WELCOME_BACK	= "Welcome back to the level %d of Pixel Dungeon!";
 	private static final String TXT_NIGHT_MODE		= "Be cautious, since the dungeon is even more dangerous at night!";
 	
 	private static final String TXT_CHASM	= "Your steps echo across the dungeon.";

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -842,7 +842,7 @@ public void damage( int dmg, Object src ) {
             tenacity += ((RingOfTenacity.Tenacity)buff).level;
         }
         if (tenacity != 0) //(HT - HP)/HT = heroes current % missing health.
-            dmg *= Math.pow(0.9, tenacity*((float)(HT - HP)/HT));
+            dmg = (int)Math.ceil((float)dmg * Math.pow(0.9, tenacity*((float)(HT - HP)/HT)));
 
 		super.damage( dmg, src );
 		

File: src/com/shatteredpixel/shatteredpixeldungeon/items/rings/RingOfTenacity.java
Patch:
@@ -18,8 +18,8 @@ protected RingBuff buff( ) {
     public String desc() {
         return isKnown() ?
                 "When worn, this ring will allow the wearer to resist normally mortal strikes. " +
-                "The weaker the user becomes, the more resistant they will be to physical damage. " +
-                "A cursed ring will instead make it easier for the wearer to be executed." :
+                "The more injured the user is, the more resistant they will be to damage. " +
+                "A cursed ring will instead make it easier for enemies to execute the wearer." :
                 super.desc();
     }
 

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/ChaliceOfBlood.java
Patch:
@@ -74,9 +74,7 @@ protected void onSelect(int index) {
     }
 
     private void prick(Hero hero){
-        int damage = (level*2)*(level*2);
-
-
+        int damage = 3*(level*level);
 
         Earthroot.Armor armor = hero.buff(Earthroot.Armor.class);
         if (armor != null) {

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/StenchGas.java
Patch:
@@ -37,5 +37,4 @@ public void use( BlobEmitter emitter ) {
     public String tileDesc() {
         return "A cloud of fetid stench is swirling here.";
     }
-} {
 }

File: src/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfRage.java
Patch:
@@ -17,6 +17,7 @@
  */
 package com.shatteredpixel.shatteredpixeldungeon.items.scrolls;
 
+import com.shatteredpixel.shatteredpixeldungeon.levels.Level;
 import com.watabou.noosa.audio.Sample;
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
@@ -36,9 +37,9 @@ public class ScrollOfRage extends Scroll {
 	@Override
 	protected void doRead() {
 
-        for (Mob mob : Dungeon.level.mobs) {
+        for (Mob mob : Dungeon.level.mobs.toArray( new Mob[0] )) {
             mob.beckon( curUser.pos );
-            if (Dungeon.level.fieldOfView[mob.pos]) {
+            if (Level.fieldOfView[mob.pos]) {
                 Buff.prolong(mob, Amok.class, 5f);
             }
         }

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -1102,6 +1102,7 @@ public void remove( Buff buff ) {
 		} else if (buff instanceof RingOfMight.Might){
             if (((RingOfMight.Might)buff).level > 0){
                 HT -= ((RingOfMight.Might) buff).level * 5;
+                HP = Math.min(HT, HP);
             }
         }
 		

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM300.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.util.HashSet;
 
+import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Terror;
 import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.CapeOfThorns;
 import com.watabou.noosa.Camera;
 import com.watabou.noosa.audio.Sample;
@@ -164,6 +165,7 @@ public HashSet<Class<?>> resistances() {
 	private static final HashSet<Class<?>> IMMUNITIES = new HashSet<Class<?>>();
 	static {
 		IMMUNITIES.add( ToxicGas.class );
+        IMMUNITIES.add( Terror.class );
 	}
 	
 	@Override

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/RegularLevel.java
Patch:
@@ -551,7 +551,7 @@ public int randomRespawnCell() {
 		
 		while (true) {
 			
-			if (++count > 10) {
+			if (++count > 30) {
 				return -1;
 			}
 			

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/hero/HeroClass.java
Patch:
@@ -140,7 +140,8 @@ private static void initMage( Hero hero ) {
 	private static void initRogue( Hero hero ) {
 		(hero.belongings.weapon = new Dagger()).identify();
 		(hero.belongings.armor = new ClothArmor()).identify();
-		hero.belongings.misc1 = new CloakOfShadows();
+        CloakOfShadows cloak = new CloakOfShadows();
+		hero.belongings.misc1 = cloak;
 		new Dart( 8 ).identify().collect();
 		new Food().identify().collect();
 
@@ -150,7 +151,7 @@ private static void initRogue( Hero hero ) {
 			new TomeOfMastery().collect();
 		}
 		
-		Dungeon.quickslot = CloakOfShadows.class;
+		Dungeon.quickslot = cloak;
 		
 		new ScrollOfMagicMapping().setKnown();
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -368,7 +368,7 @@ public void add( Buff buff ) {
 
 				sprite.showStatus( CharSprite.NEGATIVE, "bleeding" );
 				
-			} else if (buff instanceof Sleep || buff instanceof MagicalSleep) {
+			} else if (buff instanceof Sleep) {
 				sprite.idle();
 			}
 			

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
Patch:
@@ -25,12 +25,10 @@
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Amok;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
-import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MagicalSleep;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Sleep;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Terror;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroSubClass;
-import com.shatteredpixel.shatteredpixeldungeon.effects.Flare;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Wound;
 import com.shatteredpixel.shatteredpixeldungeon.items.Generator;
 import com.shatteredpixel.shatteredpixeldungeon.items.Heap;
@@ -298,7 +296,7 @@ public void add( Buff buff ) {
 			state = State.HUNTING;
 		} else if (buff instanceof Terror) {
 			state = State.FLEEING;
-		} else if (buff instanceof Sleep || buff instanceof MagicalSleep) {
+		} else if (buff instanceof Sleep) {
 			state = State.SLEEPING;
             this.sprite().showSleep();
 			postpone( Sleep.SWS );

File: src/com/shatteredpixel/shatteredpixeldungeon/sprites/CharSprite.java
Patch:
@@ -336,6 +336,7 @@ public void showSleep() {
 			}
 			emo = new EmoIcon.Sleep( this );
 		}
+        idle();
 	}
 	
 	public void hideSleep() {

File: src/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
Patch:
@@ -497,6 +497,8 @@ public static void loadGame( String fileName ) throws IOException {
 	public static void loadGame( String fileName, boolean fullLoad ) throws IOException {
 		
 		Bundle bundle = gameBundle( fileName );
+
+        version = bundle.getInt( VERSION );
 		
 		Dungeon.level = null;
 		Dungeon.depth = -1;
@@ -558,8 +560,6 @@ public static void loadGame( String fileName, boolean fullLoad ) throws IOExcept
 			quickslot = null;
 		}
 		
-		version = bundle.getInt( VERSION );
-		
 		hero = null;
 		hero = (Hero)bundle.get( HERO );
 		

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/TalismanOfForesight.java
Patch:
@@ -172,10 +172,10 @@ public boolean act() {
         public void charge(){
             charge = Math.min(charge+4, chargeCap);
             exp++;
-            if (exp >= 4) {
+            if (exp >= 5 && level < levelCap) {
                 upgrade();
                 GLog.p("Your Talisman grows stronger!");
-                exp -= 4;
+                exp -= 5;
             }
         }
 

File: src/com/shatteredpixel/shatteredpixeldungeon/items/bags/Bag.java
Patch:
@@ -117,7 +117,7 @@ public void storeInBundle( Bundle bundle ) {
 	public void restoreFromBundle( Bundle bundle ) {
 		super.restoreFromBundle( bundle );
 		for (Bundlable item : bundle.getCollection( ITEMS )) {
-			((Item)item).collect( this );
+			if (item != null) ((Item)item).collect( this );
 		};
 	}
 	

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/SandalsOfNature.java
Patch:
@@ -172,6 +172,7 @@ public void onSelect( Item item ) {
                     GLog.w("Your " + name + " have already gained nutrients from that seed recently.");
                 } else {
                     seeds.add(item.name());
+
                     Hero hero = Dungeon.hero;
                     hero.sprite.operate( hero.pos );
                     hero.busy();
@@ -194,6 +195,7 @@ else if (level >= 3)
                     } else {
                         GLog.i("Your " + name + " absorb the seed, they seem healthier.");
                     }
+                    item.detach(hero.belongings.backpack);
                 }
             }
         }

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/CapeOfThorns.java
Patch:
@@ -64,7 +64,7 @@ public String desc() {
     @Override
     public String toString(){
         if (level > 0)
-            return Utils.format("%s%+d %d%", name, level, charge);
+            return Utils.format("%s+%d %d%%", name, level, charge);
         else
             return Utils.format("%s %d%%", name, charge);
     }

File: src/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
Patch:
@@ -176,7 +176,7 @@ public void create() {
             for (Buff buff : Dungeon.hero.buffs(RingOfWealth.Wealth.class)) {
                 bonus += ((RingOfWealth.Wealth) buff).level;
             }
-            if (Random.Float() < Math.pow(0.95, bonus)){
+            if (Random.Float() > Math.pow(0.95, bonus)){
                 if (Random.Int(2) == 0)
                      addItemToSpawn( new ScrollOfWeaponUpgrade() );
                 else

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/hero/HeroClass.java
Patch:
@@ -62,7 +62,7 @@ private HeroClass( String title ) {
 	};
 	
 	public static final String[] ROG_PERKS = {
-		"Rogues start with a Ring of Shadows+1.",
+		"Rogues start with a Cloak of Shadows.",
 		"Rogues identify a type of a ring on equipping it.",
 		"Rogues are proficient with light armor, dodging better while wearing one.",
 		"Rogues are proficient in detecting hidden doors and traps.",
@@ -150,7 +150,7 @@ private static void initRogue( Hero hero ) {
 			new TomeOfMastery().collect();
 		}
 		
-		Dungeon.quickslot = Dart.class;
+		Dungeon.quickslot = CloakOfShadows.class;
 		
 		new ScrollOfMagicMapping().setKnown();
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/items/weapon/missiles/MissileWeapon.java
Patch:
@@ -64,7 +64,7 @@ protected void onThrow( int cell ) {
 		} else {
 			if (!curUser.shoot( enemy, this )) {
 				miss( cell );
-			} else {
+			} else if (!(this instanceof Boomerang)){
                 int bonus = 0;
                 for (Buff buff : curUser.buffs(RingOfSharpshooting.Aim.class)) {
                     bonus += ((RingOfSharpshooting.Aim)buff).level;

File: src/com/shatteredpixel/shatteredpixeldungeon/plants/Earthroot.java
Patch:
@@ -99,7 +99,7 @@ public boolean act() {
 		}
 		
 		public int absorb( int damage ) {
-			if (level >= damage-damage/2) {
+			if (level <= damage-damage/2) {
 				detach();
 				return damage - level;
 			} else {

File: src/com/shatteredpixel/shatteredpixeldungeon/plants/Earthroot.java
Patch:
@@ -99,7 +99,7 @@ public boolean act() {
 		}
 		
 		public int absorb( int damage ) {
-			if (damage*2 >= level) {
+			if (level >= damage-damage/2) {
 				detach();
 				return damage - level;
 			} else {

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/Artifact.java
Patch:
@@ -50,8 +50,8 @@ public boolean doEquip( Hero hero ) {
             GLog.w("you can only wear 2 misc items at a time");
             return false;
 
-        } else if (hero.belongings.misc1.getClass() == this.getClass()
-                || hero.belongings.misc2.getClass() == this.getClass()){
+        } else if ((hero.belongings.misc1 != null && hero.belongings.misc1.getClass() == this.getClass())
+                || (hero.belongings.misc2 != null && hero.belongings.misc2.getClass() == this.getClass())){
 
             GLog.w("you cannot wear two of the same artifact");
             return false;

File: src/com/shatteredpixel/shatteredpixeldungeon/ResultDescriptions.java
Patch:
@@ -24,7 +24,7 @@ public class ResultDescriptions {
 	public static final String BOSS	= "Killed by the %s on level %d";
 	
 	// Items
-	public static final String WAND		= "Killed by your own %s on level %d";
+	public static final String ITEM      = "Killed by your own %s on level %d";
 	public static final String GLYPH	= "Killed by the %s on level %d";
 	
 	// Dungeon features

File: src/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfAvalanche.java
Patch:
@@ -81,7 +81,7 @@ protected void onZap( int cell ) {
 		}
 		
 		if (!curUser.isAlive()) {
-			Dungeon.fail( Utils.format( ResultDescriptions.WAND, name, Dungeon.depth ) );
+			Dungeon.fail( Utils.format( ResultDescriptions.ITEM, name, Dungeon.depth ) );
 			GLog.n( "You killed yourself with your own Wand of Avalanche..." );
 		}
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfFirebolt.java
Patch:
@@ -66,7 +66,7 @@ protected void onZap( int cell ) {
 			ch.sprite.emitter().burst( FlameParticle.FACTORY, 5 );
 			
 			if (ch == curUser && !ch.isAlive()) {
-				Dungeon.fail( Utils.format( ResultDescriptions.WAND, name, Dungeon.depth ) );
+				Dungeon.fail( Utils.format( ResultDescriptions.ITEM, name, Dungeon.depth ) );
 				GLog.n( "You killed yourself with your own Wand of Firebolt..." );
 			}
 		}

File: src/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfLightning.java
Patch:
@@ -51,7 +51,7 @@ protected void onZap( int cell ) {
 		// The actual effect is processed in "fx" method
 		
 		if (!curUser.isAlive()) {
-			Dungeon.fail( Utils.format( ResultDescriptions.WAND, name, Dungeon.depth ) );
+			Dungeon.fail( Utils.format( ResultDescriptions.ITEM, name, Dungeon.depth ) );
 			GLog.n( "You killed yourself with your own Wand of Lightning..." );
 		}
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfMagicMissile.java
Patch:
@@ -76,7 +76,7 @@ protected void onZap( int cell ) {
 			ch.sprite.burst( 0xFF99CCFF, level / 2 + 2 );
 			
 			if (ch == curUser && !ch.isAlive()) {
-				Dungeon.fail( Utils.format( ResultDescriptions.WAND, name, Dungeon.depth ) );
+				Dungeon.fail( Utils.format( ResultDescriptions.ITEM, name, Dungeon.depth ) );
 				GLog.n( "You killed yourself with your own Wand of Magic Missile..." );
 			}
 		}

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Drowsy.java
Patch:
@@ -39,14 +39,13 @@ public boolean act(){
             if (target instanceof Hero)
                 if (target.HP == target.HT) {
                     GLog.i("You are too healthy, and resist the urge to sleep.");
-                    detach();
                 } else {
                     GLog.i("You fall into a deep magical sleep.");
                     Buff.affect(target, MagicalSleep.class);
-                    detach();
                 }
             else
                 Buff.affect(target, MagicalSleep.class);
+            detach();
             return true;
         } else {
             placed = true;

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/CloakOfShadows.java
Patch:
@@ -138,7 +138,7 @@ public class cloakRecharge extends ArtifactBuff{
         public boolean act() {
             if (charge < chargeCap) {
                 if (!stealthed)
-                    partialCharge += (chargeCap / (50-(level*2)));
+                    partialCharge += (1f / (50-(level*2)));
 
                 if (partialCharge >= 1) {
                     charge++;

File: src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/Artifact.java
Patch:
@@ -21,7 +21,7 @@ public class Artifact extends KindofMisc {
     protected Buff activeBuff;
 
     //level is used internally to track upgrades to artifacts, size/logic varies per artifact.
-    protected int level = 1;
+
     //the current artifact charge
     protected int charge = 0;
     //the % towards next charge, should roll over at a value of 1 or higher.

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -378,7 +378,7 @@ else if (buff instanceof Burning) {
 				sprite.add( CharSprite.State.LEVITATING );
 			} else if (buff instanceof Frost) {
 				sprite.add( CharSprite.State.FROZEN );
-			} else if (buff instanceof Invisibility) {
+			} else if (buff instanceof Invisibility || buff instanceof CloakOfShadows.cloakStealth) {
 				if (!(buff instanceof Shadows)) {
 					sprite.showStatus( CharSprite.POSITIVE, "invisible" );
 				}
@@ -396,7 +396,7 @@ public void remove( Buff buff ) {
 			sprite.remove( CharSprite.State.BURNING );
 		} else if (buff instanceof Levitation) {
 			sprite.remove( CharSprite.State.LEVITATING );
-		} else if (buff instanceof Invisibility || buff instanceof CloakOfShadows.cloakStealth && invisible <= 0) {
+		} else if ((buff instanceof Invisibility || buff instanceof CloakOfShadows.cloakStealth) && invisible <= 0) {
 			sprite.remove( CharSprite.State.INVISIBLE );
 		} else if (buff instanceof Paralysis) {
 			sprite.remove( CharSprite.State.PARALYSED );
@@ -424,7 +424,7 @@ public void updateSpriteState() {
 				sprite.add( CharSprite.State.BURNING );
 			} else if (buff instanceof Levitation) {
 				sprite.add( CharSprite.State.LEVITATING );
-			} else if (buff instanceof Invisibility) {
+			} else if (buff instanceof Invisibility || buff instanceof CloakOfShadows.cloakStealth)  {
 				sprite.add( CharSprite.State.INVISIBLE );
 			} else if (buff instanceof Paralysis) {
 				sprite.add( CharSprite.State.PARALYSED );

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/Actor.java
Patch:
@@ -24,6 +24,7 @@
 import com.shatteredpixel.shatteredpixeldungeon.Statistics;
 import com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
+import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Level;
 import com.watabou.utils.Bundlable;
@@ -149,7 +150,8 @@ public static void process() {
 			Arrays.fill( chars, null );
 			
 			for (Actor actor : all) {
-				if (actor.time < now) {
+                //if multiple things act at the same time, hero should go first.
+				if (actor.time < now || (actor instanceof Hero && actor.time == now)) {
 					now = actor.time;
 					current = actor;
 				}

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Invisibility.java
Patch:
@@ -38,7 +38,8 @@ public boolean attachTo( Char target ) {
 	
 	@Override
 	public void detach() {
-		target.invisible--;
+        if (target.invisible > 0)
+		    target.invisible--;
 		super.detach();
 	}
 	

File: src/com/shatteredpixel/shatteredpixeldungeon/sprites/ItemSpriteSheet.java
Patch:
@@ -76,8 +76,8 @@ public class ItemSpriteSheet {
     public static final int SPEAR			= ROW3+4;
     public static final int MACE			= ROW3+5;
     public static final int SWORD			= ROW3+6;
-    public static final int LONG_SWORD		= ROW3+7;
-    public static final int BATTLE_AXE		= ROW3+8;
+    public static final int BATTLE_AXE		= ROW3+7;
+    public static final int LONG_SWORD		= ROW3+8;
     public static final int WAR_HAMMER		= ROW3+9;
     public static final int GLAIVE			= ROW3+10;
 

File: src/com/shatteredpixel/shatteredpixeldungeon/Bones.java
Patch:
@@ -49,10 +49,10 @@ public static void leave() {
 			item = Dungeon.hero.belongings.armor;
 			break;
 		case 2:
-			item = Dungeon.hero.belongings.ring1;
+			item = Dungeon.hero.belongings.misc1;
 			break;
 		case 3:
-			item = Dungeon.hero.belongings.ring2;
+			item = Dungeon.hero.belongings.misc2;
 			break;
 		}
 		if (item == null) {

File: src/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfRemoveCurse.java
Patch:
@@ -49,8 +49,8 @@ protected void doRead() {
 		procced = uncurse( curUser, 
 			curUser.belongings.weapon, 
 			curUser.belongings.armor, 
-			curUser.belongings.ring1, 
-			curUser.belongings.ring2 ) || procced;
+			curUser.belongings.misc1,
+			curUser.belongings.misc2) || procced;
 		
 		Weakness.detach( curUser, Weakness.class );
 		

File: src/com/shatteredpixel/shatteredpixeldungeon/sprites/ItemSpriteSheet.java
Patch:
@@ -69,7 +69,7 @@ public class ItemSpriteSheet {
     public static final int AMULET	= ROW2+10;
 
     //Row Three: Melee weapons
-    public static final int KNUCKLEDUSTER	= ROW8+1;
+    public static final int KNUCKLEDUSTER	= ROW3+0;
     public static final int DAGGER			= ROW3+1;
     public static final int SHORT_SWORD		= ROW3+2;
     public static final int QUARTERSTAFF	= ROW3+3;

File: src/com/shatteredpixel/shatteredpixeldungeon/windows/WndBag.java
Patch:
@@ -154,8 +154,8 @@ protected void placeItems( Bag container ) {
 		Belongings stuff = Dungeon.hero.belongings;
 		placeItem( stuff.weapon != null ? stuff.weapon : new Placeholder( ItemSpriteSheet.WEAPON ) );
 		placeItem( stuff.armor != null ? stuff.armor : new Placeholder( ItemSpriteSheet.ARMOR ) );
-		placeItem( stuff.ring1 != null ? stuff.ring1 : new Placeholder( ItemSpriteSheet.RING ) );
-		placeItem( stuff.ring2 != null ? stuff.ring2 : new Placeholder( ItemSpriteSheet.RING ) );
+		placeItem( stuff.misc1 != null ? stuff.misc1 : new Placeholder( ItemSpriteSheet.RING ) );
+		placeItem( stuff.misc2 != null ? stuff.misc2 : new Placeholder( ItemSpriteSheet.RING ) );
 		
 		// Unequipped items
 		for (Item item : container.items) {

File: src/com/shatteredpixel/shatteredpixeldungeon/items/potions/PotionOfMight.java
Patch:
@@ -17,6 +17,7 @@
  */
 package com.shatteredpixel.shatteredpixeldungeon.items.potions;
 
+import com.shatteredpixel.shatteredpixeldungeon.Badges;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
@@ -36,6 +37,8 @@ public void apply( Hero hero ) {
 		hero.HP += 5;
 		hero.sprite.showStatus( CharSprite.POSITIVE, "+1 str, +5 ht" );
 		GLog.p( "Newfound strength surges through your body." );
+
+        Badges.validateStrengthAttained();
 	}
 	
 	@Override

File: src/com/shatteredpixel/shatteredpixeldungeon/items/Ankh.java
Patch:
@@ -44,7 +44,7 @@ public class Ankh extends Item {
 
 
     {
-		stackable = true;
+		stackable = false;
 		name = "Ankh";
 		image = ItemSpriteSheet.ANKH;
 	}

File: src/com/shatteredpixel/shatteredpixeldungeon/scenes/TitleScene.java
Patch:
@@ -108,7 +108,7 @@ protected void onClick() {
         source.y = h - source.height();
         add( source );
 
-        BitmapText version = new BitmapText( "v " + Game.version + "  ", font1x );
+        BitmapText version = new BitmapText( "v " + Game.version + "", font1x );
         version.measure();
         version.hardlight( 0xCCCCCC );
         version.x = w - version.width();

File: src/com/shatteredpixel/shatteredpixeldungeon/items/Generator.java
Patch:
@@ -184,8 +184,9 @@ public static int order( Item item ) {
 			Sungrass.Seed.class,
 			Earthroot.Seed.class,
 			Fadeleaf.Seed.class,
-			Rotberry.Seed.class };
-		Category.SEED.probs = new float[]{ 1, 1, 1, 1, 1, 1, 1, 0 };
+            Rotberry.Seed.class,
+			BlandfruitBush.Seed.class};
+		Category.SEED.probs = new float[]{ 7, 7, 7, 7, 7, 7, 7, 0, 1 };
 	}
 	
 	public static void reset() {

File: src/com/shatteredpixel/shatteredpixeldungeon/sprites/ItemSpriteSheet.java
Patch:
@@ -129,6 +129,7 @@ public class ItemSpriteSheet {
 	public static final int SEED_EARTHROOT	= 93;
 	public static final int SEED_FADELEAF	= 94;
 	public static final int SEED_ROTBERRY	= 95;
+    public static final int SEED_BLANDFRUIT	= 118;
 	
 	// Quest items
 	public static final int ROSE	= 100;

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
Patch:
@@ -367,7 +367,7 @@ public void add( Buff buff ) {
 
 				sprite.showStatus( CharSprite.NEGATIVE, "bleeding" );
 				
-			} else if (buff instanceof Sleep) {
+			} else if (buff instanceof Sleep || buff instanceof MagicalSleep) {
 				sprite.idle();
 			}
 			

File: src/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.HashSet;
 
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Drowsy;
+import com.shatteredpixel.shatteredpixeldungeon.effects.CellEmitter;
 import com.watabou.noosa.Camera;
 import com.watabou.noosa.Game;
 import com.watabou.noosa.audio.Sample;
@@ -823,7 +824,7 @@ public void damage( int dmg, Object src ) {
 		restoreHealth = false;
         if (this.buff(Drowsy.class) != null){
             Buff.detach(this, Drowsy.class);
-            GLog.i("The pain helps you resist the urge to sleep.");
+            GLog.w("The pain helps you resist the urge to sleep.");
         }
 		super.damage( dmg, src );
 		
@@ -1100,6 +1101,7 @@ public void die( Object cause  ) {
         if (ankh != null && ankh.isBlessed()) {
             this.HP = HT;
             new Flare(8, 32).color(0xFFFF66, true).show(sprite, 2f);
+            CellEmitter.get(this.pos).start(Speck.factory(Speck.LIGHT), 0.2f, 3);
 
             ankh.detach(belongings.backpack);
 

File: src/com/shatteredpixel/shatteredpixeldungeon/items/Ankh.java
Patch:
@@ -19,6 +19,8 @@
 
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
+import com.shatteredpixel.shatteredpixeldungeon.effects.CellEmitter;
+import com.shatteredpixel.shatteredpixeldungeon.effects.Speck;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite.Glowing;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
@@ -80,6 +82,7 @@ public void execute( final Hero hero, String action ) {
                 hero.busy();
 
                 Sample.INSTANCE.play( Assets.SND_DRINK );
+                CellEmitter.get(hero.pos).start(Speck.factory(Speck.LIGHT), 0.2f, 3);
                 hero.sprite.operate( hero.pos );
             }
         } else {

File: src/com/shatteredpixel/shatteredpixeldungeon/items/food/Blandfruit.java
Patch:
@@ -125,7 +125,7 @@ public void execute( Hero hero, String action ) {
                     potionAttrib instanceof PotionOfParalyticGas ||
                     potionAttrib instanceof PotionOfFrost){
                 potionAttrib.execute(hero, action);
-                detach( hero.belongings.backpack );
+                //detaches in Potion.cast, this is an awkward workaround due to throwing being on a different thread.
             } else {
                 super.execute(hero, action);
             }
@@ -151,6 +151,7 @@ public Item cook(Seed seed){
 
         try {
             potionAttrib = (Potion)plant.newInstance();
+            potionAttrib.ownedByFruit = true;
         } catch (Exception e) {
             return null;
         }

File: src/com/shatteredpixel/shatteredpixeldungeon/items/scrolls/ScrollOfLullaby.java
Patch:
@@ -45,6 +45,7 @@ protected void doRead() {
 		for (Mob mob : Dungeon.level.mobs.toArray( new Mob[0] )) {
 			if (Level.fieldOfView[mob.pos]) {
 				Buff.affect( mob, Drowsy.class );
+                mob.sprite.centerEmitter().start( Speck.factory( Speck.NOTE ), 0.3f, 5 );
 			}
 		}
 

