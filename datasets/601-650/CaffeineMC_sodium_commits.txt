File: common/src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/vertex/format/impl/CompactChunkVertex.java
Patch:
@@ -18,8 +18,8 @@ public class CompactChunkVertex implements ChunkVertexType {
             .addElement(DefaultChunkMeshAttributes.LIGHT_MATERIAL_INDEX, ChunkShaderBindingPoints.ATTRIBUTE_LIGHT_MATERIAL_INDEX, 16)
             .build();
 
-    private static final int POSITION_MAX_VALUE = 1 << 20;
-    private static final int TEXTURE_MAX_VALUE = 1 << 15;
+    public static final int POSITION_MAX_VALUE = 1 << 20;
+    public static final int TEXTURE_MAX_VALUE = 1 << 15;
 
     private static final float MODEL_ORIGIN = 8.0f;
     private static final float MODEL_RANGE = 32.0f;

File: common/src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/DefaultChunkRenderer.java
Patch:
@@ -25,6 +25,7 @@
 import net.caffeinemc.mods.sodium.client.util.BitwiseMath;
 import net.caffeinemc.mods.sodium.client.util.UInt32;
 import org.lwjgl.system.MemoryUtil;
+import org.lwjgl.system.Pointer;
 
 import java.util.Iterator;
 
@@ -172,7 +173,7 @@ private static void addNonIndexedDrawCommands(MultiDrawBatch batch, long pMeshDa
             // Uint32 -> Int32 cast is always safe and should be optimized away
             MemoryUtil.memPutInt(pBaseVertex + (size << 2), (int) SectionRenderDataUnsafe.getVertexOffset(pMeshData, facing));
             MemoryUtil.memPutInt(pElementCount + (size << 2), (int) SectionRenderDataUnsafe.getElementCount(pMeshData, facing));
-            MemoryUtil.memPutAddress(pElementPointer + (size << 3), 0 /* using a shared index buffer */);
+            MemoryUtil.memPutAddress(pElementPointer + (size << Pointer.POINTER_SHIFT), 0 /* using a shared index buffer */);
 
             size += (mask >> facing) & 1;
         }
@@ -204,7 +205,7 @@ private static void addIndexedDrawCommands(MultiDrawBatch batch, long pMeshData,
 
             // * 4 to convert to bytes (the index buffer contains integers)
             // the section render data storage for the indices stores the offset in indices (also called elements)
-            MemoryUtil.memPutAddress(pElementPointer + (size << 3), elementOffset << 2);
+            MemoryUtil.memPutAddress(pElementPointer + (size << Pointer.POINTER_SHIFT), elementOffset << 2);
 
             // adding the number of elements works because the index data has one index per element (which are the indices)
             elementOffset += elementCount;

File: common/src/main/java/net/caffeinemc/mods/sodium/client/render/frapi/render/AbstractBlockRenderContext.java
Patch:
@@ -81,7 +81,7 @@ public void emitDirectly() {
 
 
 
-    private final MutableQuadViewImpl editorQuad = new BlockEmitter();
+    private final BlockEmitter editorQuad = new BlockEmitter();
 
     /**
      * The world which the block is being rendered in.
@@ -233,7 +233,7 @@ public void bufferDefaultModel(BakedModel model, @Nullable BlockState state, Pre
                 // Call processQuad instead of emit for efficiency
                 // (avoid unnecessarily clearing data, trying to apply transforms, and performing cull check again)
 
-                this.processQuad(editorQuad);
+                editorQuad.transformAndEmit();
             }
         }
 

File: common/src/main/java/net/caffeinemc/mods/sodium/mixin/features/render/world/clouds/LevelRendererMixin.java
Patch:
@@ -58,7 +58,7 @@ public void renderCloudsFabric(ResourceHandle<RenderTarget> resourceHandle, int
 
     @Group(name = "sodium$cloudsOverride", min = 1, max = 1)
     @Dynamic
-    @Inject(method = { "lambda$addCloudsPass$4" }, at = @At(value = "INVOKE", target = "Lnet/minecraft/client/renderer/CloudRenderer;render(ILnet/minecraft/client/CloudStatus;FLorg/joml/Matrix4f;Lorg/joml/Matrix4f;Lnet/minecraft/world/phys/Vec3;F)V"), cancellable = true, require = 0) // Inject after Forge checks dimension support
+    @Inject(method = { "lambda$addCloudsPass$6" }, at = @At(value = "INVOKE", target = "Lnet/minecraft/client/renderer/CloudRenderer;render(ILnet/minecraft/client/CloudStatus;FLorg/joml/Matrix4f;Lorg/joml/Matrix4f;Lnet/minecraft/world/phys/Vec3;F)V"), cancellable = true, require = 0) // Inject after Forge checks dimension support
     public void renderCloudsNeo(ResourceHandle<?> resourcehandle, float p_365209_, Vec3 p_362985_, Matrix4f modelView, Matrix4f projectionMatrix, int color, CloudStatus p_364196_, float p_362337_, CallbackInfo ci) {
         ci.cancel();
 

File: common/src/main/java/net/caffeinemc/mods/sodium/mixin/features/render/world/sky/LevelRendererMixin.java
Patch:
@@ -33,7 +33,7 @@ public abstract class LevelRendererMixin {
      * <p>When updating Sodium to new releases of the game, please check for new
      * ways the fog can be reduced in {@link FogRenderer#setupFog(Camera, FogRenderer.FogMode, org.joml.Vector4f, float, boolean, float)} ()}.</p>
      */
-    @Inject(method = { "method_62215", "lambda$addSkyPass$10" }, require = 1, at = @At("HEAD"), cancellable = true)
+    @Inject(method = { "method_62215", "lambda$addSkyPass$12" }, require = 1, at = @At("HEAD"), cancellable = true)
     private void preRenderSky(CallbackInfo ci) {
         // Cancels sky rendering when the camera is submersed underwater.
         // This prevents the sky from being visible through chunks culled by Sodium's fog occlusion.

File: common/src/workarounds/java/net/caffeinemc/mods/sodium/client/compatibility/workarounds/Workarounds.java
Patch:
@@ -37,7 +37,7 @@ private static Set<Reference> findNecessaryWorkarounds() {
         var workarounds = EnumSet.noneOf(Reference.class);
         var operatingSystem = OsUtils.getOs();
 
-        if (NvidiaWorkarounds.isUsingNvidiaGraphicsCard()) {
+        if (NvidiaWorkarounds.isNvidiaGraphicsCardPresent()) {
             workarounds.add(Reference.NVIDIA_THREADED_OPTIMIZATIONS_BROKEN);
         }
 

File: fabric/src/main/java/net/caffeinemc/mods/sodium/fabric/SodiumPreLaunch.java
Patch:
@@ -8,9 +8,8 @@
 public class SodiumPreLaunch implements PreLaunchEntrypoint {
     @Override
     public void onPreLaunch() {
-        PreLaunchChecks.beforeLWJGLInit();
+        PreLaunchChecks.checkEnvironment();
         GraphicsAdapterProbe.findAdapters();
-        PreLaunchChecks.onGameInit();
         Workarounds.init();
     }
 }

File: neoforge/src/service/java/net/caffeinemc/mods/sodium/service/SodiumWorkarounds.java
Patch:
@@ -14,9 +14,8 @@ public String name() {
 
     @Override
     public void bootstrap(String[] arguments) {
-        PreLaunchChecks.beforeLWJGLInit();
+        PreLaunchChecks.checkEnvironment();
         GraphicsAdapterProbe.findAdapters();
-        PreLaunchChecks.onGameInit();
         Workarounds.init();
 
         // Context creation happens earlier on NeoForge, so we need to apply this now

File: common/src/main/java/net/caffeinemc/mods/sodium/mixin/features/render/gui/font/BakedGlyphMixin.java
Patch:
@@ -121,13 +121,13 @@ private void drawEffectFast(BakedGlyph.Effect effect, float offset, float depthO
             write(ptr, matrix, x1 + offset, h1 + offset, z, color, this.u0, this.v0, light);
             ptr += GlyphVertex.STRIDE;
 
-            write(ptr, matrix, x1 + offset, h2 + offset, z, color, this.u0, this.v1, light);
+            write(ptr, matrix, x2 + offset, h1 + offset, z, color, this.u0, this.v1, light);
             ptr += GlyphVertex.STRIDE;
 
             write(ptr, matrix, x2 + offset, h2 + offset, z, color, this.u1, this.v1, light);
             ptr += GlyphVertex.STRIDE;
 
-            write(ptr, matrix, x2 + offset, h1 + offset, z, color, this.u1, this.v0, light);
+            write(ptr, matrix, x1 + offset, h2 + offset, z, color, this.u1, this.v0, light);
             ptr += GlyphVertex.STRIDE;
 
             writer.push(stack, buffer, 4, GlyphVertex.FORMAT);

File: common/src/main/java/net/caffeinemc/mods/sodium/client/render/frapi/render/ItemRenderContext.java
Patch:
@@ -145,6 +145,7 @@ public void renderModel(ItemStack itemStack, ItemDisplayContext transformMode, b
     }
 
     private void computeOutputInfo() {
+        isDefaultTranslucent = ItemBlockRenderTypes.getRenderType(this.itemStack) == Sheets.translucentItemSheet();
         isDefaultGlint = itemStack.hasFoil();
         isGlintDynamicDisplay = ItemRendererAccessor.sodium$hasAnimatedTexture(itemStack);
 

File: common/src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/RenderSection.java
Patch:
@@ -69,9 +69,9 @@ public RenderSection(RenderRegion region, int chunkX, int chunkY, int chunkZ) {
         this.chunkY = chunkY;
         this.chunkZ = chunkZ;
 
-        int rX = this.getChunkX() & (RenderRegion.REGION_WIDTH - 1);
-        int rY = this.getChunkY() & (RenderRegion.REGION_HEIGHT - 1);
-        int rZ = this.getChunkZ() & (RenderRegion.REGION_LENGTH - 1);
+        int rX = this.getChunkX() & RenderRegion.REGION_WIDTH_M;
+        int rY = this.getChunkY() & RenderRegion.REGION_HEIGHT_M;
+        int rZ = this.getChunkZ() & RenderRegion.REGION_LENGTH_M;
 
         this.sectionIndex = LocalSectionIndex.pack(rX, rY, rZ);
 

File: common/src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/RenderSectionManager.java
Patch:
@@ -146,7 +146,7 @@ private void createTerrainRenderList(Camera camera, Viewport viewport, int frame
 
         this.occlusionCuller.findVisible(visitor, viewport, searchDistance, useOcclusionCulling, frame);
 
-        this.renderLists = visitor.createRenderLists();
+        this.renderLists = visitor.createRenderLists(viewport);
         this.taskLists = visitor.getRebuildLists();
     }
 

File: neoforge/src/main/java/net/caffeinemc/mods/sodium/neoforge/NeoForgeRuntimeInformation.java
Patch:
@@ -1,7 +1,6 @@
 package net.caffeinemc.mods.sodium.neoforge;
 
 import net.caffeinemc.mods.sodium.client.services.PlatformRuntimeInformation;
-import net.neoforged.fml.loading.FMLConfig;
 import net.neoforged.fml.loading.FMLLoader;
 import net.neoforged.fml.loading.FMLPaths;
 import net.neoforged.fml.loading.LoadingModList;

File: neoforge/src/main/java/net/caffeinemc/mods/sodium/neoforge/block/NeoForgeBlockAccess.java
Patch:
@@ -27,7 +27,7 @@ public int getLightEmission(BlockState state, BlockAndTintGetter level, BlockPos
 
     @Override
     public boolean shouldSkipRender(BlockGetter level, BlockState selfState, BlockState otherState, BlockPos selfPos, BlockPos otherPos, Direction facing) {
-        return (otherState.hidesNeighborFace(level, otherPos, selfState, DirectionUtil.getOpposite(facing))) && selfState.supportsExternalFaceHiding();
+        return selfState.supportsExternalFaceHiding() && (otherState.hidesNeighborFace(level, otherPos, selfState, DirectionUtil.getOpposite(facing)));
     }
 
     @Override

File: common/src/workarounds/java/net/caffeinemc/mods/sodium/client/compatibility/checks/BugChecks.java
Patch:
@@ -10,7 +10,6 @@ class BugChecks {
     public static final boolean ISSUE_2048 = configureCheck("issue2048", true);
     public static final boolean ISSUE_2561 = configureCheck("issue2561", true);
     public static final boolean ISSUE_2637 = configureCheck("issue2637", true);
-    public static final boolean ISSUE_2862 = configureCheck("issue2862", true);
 
     private static boolean configureCheck(String name, boolean defaultValue) {
         var propertyValue = System.getProperty(getPropertyKey(name), null);

File: common/src/main/java/net/caffeinemc/mods/sodium/client/render/immediate/CloudRenderer.java
Patch:
@@ -78,7 +78,8 @@ public void render(Camera camera,
 
         // -1 if below clouds, +1 if above clouds
         var cloudType = Minecraft.getInstance().options.getCloudsType();
-        int orientation = cloudType == CloudStatus.FANCY ? (int) Math.signum(pos.y() - cloudHeight) : 0;
+        var relativeCloudY = cloudHeight - (float) pos.y() + 0.33F;
+        int orientation = cloudType == CloudStatus.FANCY ? (int) Math.signum(-relativeCloudY) : 0;
         var parameters = new CloudGeometryParameters(centerCellX, centerCellZ, cloudDistance, orientation, cloudType);
 
         CloudGeometry geometry = this.cachedGeometry;
@@ -95,9 +96,8 @@ public void render(Camera camera,
         final float translateX = (float) (cloudCenterX - (centerCellX * 12));
         final float translateZ = (float) (cloudCenterZ - (centerCellZ * 12));
 
-
         Matrix4f modelViewMatrix = new Matrix4f(modelView);
-        modelViewMatrix.translate(-translateX, cloudHeight - (float) pos.y() + 0.33F, -translateZ);
+        modelViewMatrix.translate(-translateX, relativeCloudY, -translateZ);
 
         final var prevShaderFog = copyFog(RenderSystem.getShaderFog());
 

File: common/src/workarounds/java/net/caffeinemc/mods/sodium/client/compatibility/checks/BugChecks.java
Patch:
@@ -10,6 +10,7 @@ class BugChecks {
     public static final boolean ISSUE_2048 = configureCheck("issue2048", true);
     public static final boolean ISSUE_2561 = configureCheck("issue2561", true);
     public static final boolean ISSUE_2637 = configureCheck("issue2637", true);
+    public static final boolean ISSUE_2862 = configureCheck("issue2862", true);
 
     private static boolean configureCheck(String name, boolean defaultValue) {
         var propertyValue = System.getProperty(getPropertyKey(name), null);

File: common/src/workarounds/java/net/caffeinemc/mods/sodium/client/compatibility/checks/PreLaunchChecks.java
Patch:
@@ -103,7 +103,7 @@ private static void showCriticalErrorAndClose(String title, String message, Stri
                 .replace("###HELP_URL###", url == null ? "" : url));
 
         // Try to show a graphical message box (if the platform supports it) and shut down the game.
-        MessageBox.showMessageBox(0L, MessageBox.IconType.ERROR, title, message, url);
+        MessageBox.showMessageBox(null, MessageBox.IconType.ERROR, title, message, url);
         System.exit(1 /* failure code */);
     }
 

File: common/src/workarounds/java/net/caffeinemc/mods/sodium/client/compatibility/environment/probe/GraphicsAdapterVendor.java
Patch:
@@ -1,8 +1,5 @@
 package net.caffeinemc.mods.sodium.client.compatibility.environment.probe;
 
-import org.apache.commons.io.FileUtils;
-import org.apache.commons.io.FilenameUtils;
-import org.apache.commons.io.file.PathUtils;
 import org.jetbrains.annotations.NotNull;
 
 public enum GraphicsAdapterVendor {

File: common/src/workarounds/java/net/caffeinemc/mods/sodium/client/platform/windows/api/d3dkmt/D3DKMT.java
Patch:
@@ -13,6 +13,7 @@
 import org.slf4j.LoggerFactory;
 
 import java.nio.ByteBuffer;
+import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.List;
 

File: fabric/src/main/java/net/caffeinemc/mods/sodium/mixin/core/model/quad/BakedQuadMixin.java
Patch:
@@ -1,4 +1,4 @@
-package net.caffeinemc.mods.sodium.mixin.fabric.core.model.quad;
+package net.caffeinemc.mods.sodium.mixin.core.model.quad;
 
 import net.caffeinemc.mods.sodium.client.model.quad.BakedQuadView;
 import net.caffeinemc.mods.sodium.client.model.quad.properties.ModelQuadFacing;

File: fabric/src/main/java/net/caffeinemc/mods/sodium/mixin/features/model/MultiPartBakedModelMixin.java
Patch:
@@ -1,4 +1,4 @@
-package net.caffeinemc.mods.sodium.mixin.fabric.features.model;
+package net.caffeinemc.mods.sodium.mixin.features.model;
 
 import it.unimi.dsi.fastutil.objects.Reference2ReferenceOpenHashMap;
 import net.minecraft.client.renderer.block.model.BakedQuad;

File: fabric/src/main/java/net/caffeinemc/mods/sodium/mixin/features/model/WeightedBakedModelMixin.java
Patch:
@@ -1,4 +1,4 @@
-package net.caffeinemc.mods.sodium.mixin.fabric.features.model;
+package net.caffeinemc.mods.sodium.mixin.features.model;
 
 import net.minecraft.client.renderer.block.model.BakedQuad;
 import net.minecraft.client.resources.model.BakedModel;

File: fabric/src/main/java/net/caffeinemc/mods/sodium/mixin/features/render/model/block/ModelBlockRendererMixin.java
Patch:
@@ -1,4 +1,4 @@
-package net.caffeinemc.mods.sodium.mixin.fabric.features.render.model.block;
+package net.caffeinemc.mods.sodium.mixin.features.render.model.block;
 
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.VertexConsumer;

File: fabric/src/main/java/net/caffeinemc/mods/sodium/mixin/features/world/biome/BiomeMixin.java
Patch:
@@ -1,4 +1,4 @@
-package net.caffeinemc.mods.sodium.mixin.fabric.features.world.biome;
+package net.caffeinemc.mods.sodium.mixin.features.world.biome;
 
 import net.caffeinemc.mods.sodium.client.world.biome.BiomeColorMaps;
 import net.minecraft.util.Mth;

File: neoforge/src/main/java/net/caffeinemc/mods/sodium/mixin/core/model/quad/BakedQuadMixin.java
Patch:
@@ -1,4 +1,4 @@
-package net.caffeinemc.mods.sodium.neoforge.mixin.core.model.quad;
+package net.caffeinemc.mods.sodium.mixin.core.model.quad;
 
 import net.caffeinemc.mods.sodium.client.model.quad.BakedQuadView;
 import net.caffeinemc.mods.sodium.client.model.quad.properties.ModelQuadFacing;

File: neoforge/src/main/java/net/caffeinemc/mods/sodium/mixin/features/model/MultiPartBakedModelMixin.java
Patch:
@@ -1,8 +1,8 @@
-package net.caffeinemc.mods.sodium.neoforge.mixin.features.model;
+package net.caffeinemc.mods.sodium.mixin.features.model;
 
 import it.unimi.dsi.fastutil.objects.Reference2ReferenceOpenHashMap;
-import net.caffeinemc.mods.sodium.neoforge.mixin.ChunkRenderTypeSetAccessor;
-import net.caffeinemc.mods.sodium.neoforge.mixin.SimpleBakedModelAccessor;
+import net.caffeinemc.mods.sodium.mixin.platform.neoforge.ChunkRenderTypeSetAccessor;
+import net.caffeinemc.mods.sodium.mixin.platform.neoforge.SimpleBakedModelAccessor;
 import net.minecraft.client.renderer.ItemBlockRenderTypes;
 import net.minecraft.client.renderer.RenderType;
 import net.minecraft.client.renderer.block.model.BakedQuad;

File: neoforge/src/main/java/net/caffeinemc/mods/sodium/mixin/features/model/WeightedBakedModelMixin.java
Patch:
@@ -1,4 +1,4 @@
-package net.caffeinemc.mods.sodium.neoforge.mixin.features.model;
+package net.caffeinemc.mods.sodium.mixin.features.model;
 
 import net.minecraft.client.renderer.RenderType;
 import net.minecraft.client.renderer.block.model.BakedQuad;

File: neoforge/src/main/java/net/caffeinemc/mods/sodium/mixin/features/render/model/block/ModelBlockRendererMixin.java
Patch:
@@ -1,4 +1,4 @@
-package net.caffeinemc.mods.sodium.neoforge.mixin.features.render.model.block;
+package net.caffeinemc.mods.sodium.mixin.features.render.model.block;
 
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.VertexConsumer;

File: neoforge/src/main/java/net/caffeinemc/mods/sodium/mixin/features/world/biome/BiomeMixin.java
Patch:
@@ -1,4 +1,4 @@
-package net.caffeinemc.mods.sodium.neoforge.mixin.features.world.biome;
+package net.caffeinemc.mods.sodium.mixin.features.world.biome;
 
 import net.caffeinemc.mods.sodium.client.world.biome.BiomeColorMaps;
 import net.minecraft.util.Mth;

File: neoforge/src/main/java/net/caffeinemc/mods/sodium/mixin/platform/neoforge/AbstractBlockRenderContextMixin.java
Patch:
@@ -1,4 +1,4 @@
-package net.caffeinemc.mods.sodium.neoforge.mixin;
+package net.caffeinemc.mods.sodium.mixin.platform.neoforge;
 
 import net.caffeinemc.mods.sodium.client.render.frapi.render.AbstractBlockRenderContext;
 import net.caffeinemc.mods.sodium.client.services.SodiumModelData;

File: neoforge/src/main/java/net/caffeinemc/mods/sodium/mixin/platform/neoforge/AuxiliaryLightManagerMixin.java
Patch:
@@ -1,4 +1,4 @@
-package net.caffeinemc.mods.sodium.neoforge.mixin;
+package net.caffeinemc.mods.sodium.mixin.platform.neoforge;
 
 import net.caffeinemc.mods.sodium.client.world.SodiumAuxiliaryLightManager;
 import net.neoforged.neoforge.common.world.AuxiliaryLightManager;

File: neoforge/src/main/java/net/caffeinemc/mods/sodium/mixin/platform/neoforge/ChunkRenderTypeSetAccessor.java
Patch:
@@ -1,4 +1,4 @@
-package net.caffeinemc.mods.sodium.neoforge.mixin;
+package net.caffeinemc.mods.sodium.mixin.platform.neoforge;
 
 import net.neoforged.neoforge.client.ChunkRenderTypeSet;
 import org.spongepowered.asm.mixin.Mixin;

File: neoforge/src/main/java/net/caffeinemc/mods/sodium/mixin/platform/neoforge/ClientHooksMixin.java
Patch:
@@ -1,4 +1,4 @@
-package net.caffeinemc.mods.sodium.neoforge.mixin;
+package net.caffeinemc.mods.sodium.mixin.platform.neoforge;
 
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.neoforged.neoforge.client.ClientHooks;

File: neoforge/src/main/java/net/caffeinemc/mods/sodium/mixin/platform/neoforge/EntrypointMixin.java
Patch:
@@ -1,4 +1,4 @@
-package net.caffeinemc.mods.sodium.neoforge.mixin;
+package net.caffeinemc.mods.sodium.mixin.platform.neoforge;
 
 import net.caffeinemc.mods.sodium.client.SodiumClientMod;
 import net.minecraft.client.Minecraft;

File: neoforge/src/main/java/net/caffeinemc/mods/sodium/mixin/platform/neoforge/LevelSliceMixin.java
Patch:
@@ -1,8 +1,7 @@
-package net.caffeinemc.mods.sodium.neoforge.mixin;
+package net.caffeinemc.mods.sodium.mixin.platform.neoforge;
 
 
 import net.caffeinemc.mods.sodium.client.services.SodiumModelData;
-import net.caffeinemc.mods.sodium.client.services.SodiumModelDataContainer;
 import net.caffeinemc.mods.sodium.client.world.LevelSlice;
 import net.caffeinemc.mods.sodium.client.world.SodiumAuxiliaryLightManager;
 import net.minecraft.client.multiplayer.ClientLevel;

File: neoforge/src/main/java/net/caffeinemc/mods/sodium/mixin/platform/neoforge/ModelDataMixin.java
Patch:
@@ -1,4 +1,4 @@
-package net.caffeinemc.mods.sodium.neoforge.mixin;
+package net.caffeinemc.mods.sodium.mixin.platform.neoforge;
 
 import net.caffeinemc.mods.sodium.client.services.SodiumModelData;
 import net.neoforged.neoforge.client.model.data.ModelData;

File: neoforge/src/main/java/net/caffeinemc/mods/sodium/mixin/platform/neoforge/ResourcePackLoaderMixin.java
Patch:
@@ -1,4 +1,4 @@
-package net.caffeinemc.mods.sodium.neoforge.mixin;
+package net.caffeinemc.mods.sodium.mixin.platform.neoforge;
 
 import it.unimi.dsi.fastutil.objects.ReferenceLinkedOpenHashSet;
 import net.minecraft.server.packs.repository.Pack;

File: neoforge/src/main/java/net/caffeinemc/mods/sodium/mixin/platform/neoforge/SimpleBakedModelAccessor.java
Patch:
@@ -1,4 +1,4 @@
-package net.caffeinemc.mods.sodium.neoforge.mixin;
+package net.caffeinemc.mods.sodium.mixin.platform.neoforge;
 
 import net.minecraft.client.resources.model.SimpleBakedModel;
 import net.neoforged.neoforge.client.ChunkRenderTypeSet;

File: common/src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/translucent_sorting/bsp_tree/BSPNode.java
Patch:
@@ -65,7 +65,7 @@ private static boolean doubleLeafPossible(TQuad quadA, TQuad quadB) {
             // opposite normal (distance irrelevant)
             if (NormI8.isOpposite(packedNormalA, packedNormalB)
                     // same normal and same distance
-                    || packedNormalA == packedNormalB && quadA.getDotProduct() == quadB.getDotProduct()) {
+                    || packedNormalA == packedNormalB && quadA.getAccurateDotProduct() == quadB.getAccurateDotProduct()) {
                 return true;
             }
         }

File: common/src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/translucent_sorting/bsp_tree/InnerPartitionBSPNode.java
Patch:
@@ -540,7 +540,7 @@ static private BSPNode buildSNRLeafNodeFromQuads(BSPWorkspace workspace, IntArra
 
             for (int i = 0; i < indexes.size(); i++) {
                 var quadIndex = indexes.getInt(i);
-                keys[i] = MathUtil.floatToComparableInt(workspace.quads[quadIndex].getDotProduct());
+                keys[i] = MathUtil.floatToComparableInt(workspace.quads[quadIndex].getAccurateDotProduct());
             }
 
             quadIndexes = RadixSort.sort(keys);
@@ -553,7 +553,7 @@ static private BSPNode buildSNRLeafNodeFromQuads(BSPWorkspace workspace, IntArra
 
             for (int i = 0; i < indexes.size(); i++) {
                 var quadIndex = indexes.getInt(i);
-                int dotProductComponent = MathUtil.floatToComparableInt(workspace.quads[quadIndex].getDotProduct());
+                int dotProductComponent = MathUtil.floatToComparableInt(workspace.quads[quadIndex].getAccurateDotProduct());
                 sortData[i] = (long) dotProductComponent << 32 | quadIndex;
             }
 

File: common/src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/translucent_sorting/data/DynamicTopoData.java
Patch:
@@ -1,7 +1,6 @@
 package net.caffeinemc.mods.sodium.client.render.chunk.translucent_sorting.data;
 
 import it.unimi.dsi.fastutil.objects.Object2ReferenceOpenHashMap;
-import net.caffeinemc.mods.sodium.client.render.chunk.data.BuiltSectionMeshParts;
 import net.caffeinemc.mods.sodium.client.render.chunk.translucent_sorting.TQuad;
 import net.caffeinemc.mods.sodium.client.render.chunk.translucent_sorting.trigger.GeometryPlanes;
 import net.caffeinemc.mods.sodium.client.util.sorting.RadixSort;

File: common/src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/translucent_sorting/trigger/GeometryPlanes.java
Patch:
@@ -92,9 +92,9 @@ public void addUnalignedPlane(SectionPos sectionPos, Vector3fc normal, float dis
     public void addQuadPlane(SectionPos sectionPos, TQuad quad) {
         var facing = quad.useQuantizedFacing();
         if (facing.isAligned()) {
-            this.addAlignedPlane(sectionPos, facing.ordinal(), quad.getDotProduct());
+            this.addAlignedPlane(sectionPos, facing.ordinal(), quad.getQuantizedDotProduct());
         } else {
-            this.addUnalignedPlane(sectionPos, quad.getQuantizedNormal(), quad.getDotProduct());
+            this.addUnalignedPlane(sectionPos, quad.getQuantizedNormal(), quad.getQuantizedDotProduct());
         }
     }
 

File: common/src/api/java/net/caffeinemc/mods/sodium/api/vertex/buffer/VertexBufferWriter.java
Patch:
@@ -43,7 +43,7 @@ private static RuntimeException createUnsupportedVertexConsumerThrowable(VertexC
         var name = clazz.getName();
 
         return new IllegalArgumentException(("The class %s does not implement interface VertexBufferWriter, " +
-                "which is required for compatibility with Sodium (see: https://github.com/CaffeineMC/sodium-fabric/issues/1620)").formatted(name));
+                "which is required for compatibility with Sodium (see: https://github.com/CaffeineMC/sodium/issues/1620)").formatted(name));
     }
 
     /**

File: common/src/desktop/java/net/caffeinemc/mods/sodium/desktop/LaunchWarn.java
Patch:
@@ -7,7 +7,7 @@
 import java.io.IOException;
 
 public class LaunchWarn {
-    private static final String HELP_URL = "https://github.com/CaffeineMC/sodium-fabric/wiki/Installation";
+    private static final String HELP_URL = "https://github.com/CaffeineMC/sodium/wiki/Installation";
 
     private static final String RICH_MESSAGE =
                     "<html>" +

File: common/src/main/java/net/caffeinemc/mods/sodium/client/checks/ResourcePackScanner.java
Patch:
@@ -47,7 +47,7 @@ public class ResourcePackScanner {
     );
 
     /**
-     * <a href="https://github.com/CaffeineMC/sodium-fabric/issues/1569">#1569</a>
+     * <a href="https://github.com/CaffeineMC/sodium/issues/1569">#1569</a>
      * Iterate through all active resource packs, and detect resource packs which contain files matching the blacklist.
      * An error message is shown for resource packs which replace terrain core shaders.
      * A warning is shown for resource packs which replace the default light.glsl and fog.glsl shaders.
@@ -115,14 +115,14 @@ private static void printCompatibilityReport(Collection<ScannedResourcePack> sca
             if (!entry.shaderPrograms.isEmpty()) {
                 emitProblem(builder,
                         "The resource pack replaces terrain shaders, which are not supported",
-                        "https://github.com/CaffeineMC/sodium-fabric/wiki/Resource-Packs",
+                        "https://github.com/CaffeineMC/sodium/wiki/Resource-Packs",
                         entry.shaderPrograms);
             }
 
             if (!entry.shaderIncludes.isEmpty()) {
                 emitProblem(builder,
                         "The resource pack modifies shader include files, which are not fully supported",
-                        "https://github.com/CaffeineMC/sodium-fabric/wiki/Resource-Packs",
+                        "https://github.com/CaffeineMC/sodium/wiki/Resource-Packs",
                         entry.shaderIncludes);
             }
         }

File: common/src/main/java/net/caffeinemc/mods/sodium/client/data/config/MixinConfig.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.Properties;
 
 /**
- * <a href="https://github.com/CaffeineMC/sodium-fabric/wiki/Configuration-File">Documentation of these options...</a>
+ * <a href="https://github.com/CaffeineMC/sodium/wiki/Configuration-File">Documentation of these options...</a>
  */
 @SuppressWarnings("CanBeFinal")
 public class MixinConfig {
@@ -230,7 +230,7 @@ private static void writeDefaultConfig(File file) throws IOException {
             writer.write("# This is the configuration file for Sodium.\n");
             writer.write("#\n");
             writer.write("# You can find information on editing this file and all the available options here:\n");
-            writer.write("# https://github.com/CaffeineMC/sodium-fabric/wiki/Configuration-File\n");
+            writer.write("# https://github.com/CaffeineMC/sodium/wiki/Configuration-File\n");
             writer.write("#\n");
             writer.write("# By default, this file will be empty except for this notice.\n");
         }

File: common/src/main/java/net/caffeinemc/mods/sodium/client/util/collections/BitArray.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.Arrays;
 
 /**
- * Originally authored here: https://github.com/CaffeineMC/sodium-fabric/blob/ddfb9f21a54bfb30aa876678204371e94d8001db/src/main/java/net/caffeinemc/sodium/util/collections/BitArray.java
+ * Originally authored here: https://github.com/CaffeineMC/sodium/blob/ddfb9f21a54bfb30aa876678204371e94d8001db/src/main/java/net/caffeinemc/sodium/util/collections/BitArray.java
  * @author burgerindividual
  */
 public class BitArray {
@@ -18,7 +18,7 @@ public class BitArray {
     /**
      * Returns {@param num} aligned to the next multiple of {@param alignment}.
      * 
-     * Taken from https://github.com/CaffeineMC/sodium-fabric/blob/1.19.x/next/components/gfx-utils/src/main/java/net/caffeinemc/gfx/util/misc/MathUtil.java
+     * Taken from https://github.com/CaffeineMC/sodium/blob/1.19.x/next/components/gfx-utils/src/main/java/net/caffeinemc/gfx/util/misc/MathUtil.java
      * 
      * @param num       The number that will be rounded if needed
      * @param alignment The multiple that the output will be rounded to (must be a

File: common/src/main/java/net/caffeinemc/mods/sodium/client/world/cloned/ClonedChunkSection.java
Patch:
@@ -185,7 +185,7 @@ private static Int2ReferenceMap<Object> copyBlockEntityRenderData(Level level, I
         // Retrieve any render data after we have copied all block entities, as this will call into the code of
         // other mods. This could potentially result in the chunk being modified, which would cause problems if we
         // were iterating over any data in that chunk.
-        // See https://github.com/CaffeineMC/sodium-fabric/issues/942 for more info.
+        // See https://github.com/CaffeineMC/sodium/issues/942 for more info.
         for (var entry : Int2ReferenceMaps.fastIterable(blockEntities)) {
             Object data = PlatformLevelAccess.getInstance().getBlockEntityData(entry.getValue());
 

File: common/src/workarounds/java/net/caffeinemc/mods/sodium/client/compatibility/checks/PostLaunchChecks.java
Patch:
@@ -26,7 +26,7 @@ public static void onContextInitialized() {
         }
     }
 
-    // https://github.com/CaffeineMC/sodium-fabric/issues/1916
+    // https://github.com/CaffeineMC/sodium/issues/1916
     private static boolean isUsingPojavLauncher() {
         if (System.getenv("POJAV_RENDERER") != null) {
             LOGGER.warn("Detected presence of environment variable POJAV_LAUNCHER, which seems to indicate we are running on Android");

File: common/src/workarounds/java/net/caffeinemc/mods/sodium/client/compatibility/workarounds/nvidia/NvidiaWorkarounds.java
Patch:
@@ -34,7 +34,7 @@ public static void install() {
 
             LOGGER.error("READ ME! The workarounds for the NVIDIA Graphics Driver did not apply correctly!");
             LOGGER.error("READ ME! You are very likely going to run into unexplained crashes and severe performance issues!");
-            LOGGER.error("READ ME! Please see this issue for more information: https://github.com/CaffeineMC/sodium-fabric/issues/1816");
+            LOGGER.error("READ ME! Please see this issue for more information: https://github.com/CaffeineMC/sodium/issues/1816");
         }
     }
 

File: common/src/main/java/net/caffeinemc/mods/sodium/mixin/features/render/compositing/RenderTargetMixin.java
Patch:
@@ -27,7 +27,7 @@ public class RenderTargetMixin {
      */
     @Inject(method = "blitToScreen(IIZ)V", at = @At("HEAD"), cancellable = true)
     public void blitToScreen(int width, int height, boolean disableBlend, CallbackInfo ci) {
-        if (Workarounds.isWorkaroundEnabled(Workarounds.Reference.INTEL_FRAMEBUFFER_BLIT_UNSUPPORTED)) {
+        if (Workarounds.isWorkaroundEnabled(Workarounds.Reference.INTEL_FRAMEBUFFER_BLIT_CRASH_WHEN_UNFOCUSED)) {
             return;
         }
 

File: common/src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/compile/tasks/ChunkBuilderMeshingTask.java
Patch:
@@ -2,6 +2,7 @@
 
 import it.unimi.dsi.fastutil.objects.Reference2ReferenceOpenHashMap;
 import net.caffeinemc.mods.sodium.client.SodiumClientMod;
+import net.caffeinemc.mods.sodium.client.render.chunk.ExtendedBlockEntityType;
 import net.caffeinemc.mods.sodium.client.render.chunk.RenderSection;
 import net.caffeinemc.mods.sodium.client.render.chunk.compile.ChunkBuildBuffers;
 import net.caffeinemc.mods.sodium.client.render.chunk.compile.ChunkBuildContext;
@@ -120,7 +121,7 @@ public ChunkBuildOutput execute(ChunkBuildContext buildContext, CancellationToke
                         if (blockState.hasBlockEntity()) {
                             BlockEntity entity = slice.getBlockEntity(blockPos);
 
-                            if (entity != null) {
+                            if (entity != null && ExtendedBlockEntityType.shouldRender(entity.getType(), slice, blockPos, entity)) {
                                 BlockEntityRenderer<BlockEntity> renderer = Minecraft.getInstance().getBlockEntityRenderDispatcher().getRenderer(entity);
 
                                 if (renderer != null) {

File: common/src/main/java/net/caffeinemc/mods/sodium/client/data/config/MixinConfig.java
Patch:
@@ -210,7 +210,7 @@ public static MixinConfig load(File file) {
 
         MixinConfig config = new MixinConfig();
         config.readProperties(props);
-        PlatformMixinOverrides.getInstance().applyModOverrides();
+        PlatformMixinOverrides.getInstance().applyModOverrides().forEach(config::applyModOverride);
 
         return config;
     }

File: common/src/main/java/net/caffeinemc/mods/sodium/client/world/LevelSlice.java
Patch:
@@ -363,7 +363,7 @@ public int getMinBuildHeight() {
         return this.level.getMinBuildHeight();
     }
 
-    //@Override
+    @Override
     public @Nullable Object getBlockEntityRenderData(BlockPos pos) {
         if (!this.volume.isInside(pos.getX(), pos.getY(), pos.getZ())) {
             return null;

File: common/src/main/java/net/caffeinemc/mods/sodium/client/data/config/MixinConfig.java
Patch:
@@ -49,6 +49,8 @@ protected MixinConfig() {
 
         this.addMixinRule("features.render", true);
 
+        this.addMixinRule("features.render.compositing", true);
+
         this.addMixinRule("features.render.entity", true);
         this.addMixinRule("features.render.entity.cull", true);
         this.addMixinRule("features.render.entity.shadow", true);

File: common/src/workarounds/java/net/caffeinemc/mods/sodium/client/compatibility/checks/PreLaunchChecks.java
Patch:
@@ -116,12 +116,13 @@ private static void showCriticalErrorAndClose(String title, String message, Stri
         for (var adapter : GraphicsAdapterProbe.getAdapters()) {
             if (adapter instanceof D3DKMT.WDDMAdapterInfo wddmAdapterInfo) {
                 @Nullable var driverName = wddmAdapterInfo.getOpenGlIcdName();
-                var driverVersion = wddmAdapterInfo.openglIcdVersion();
 
                 if (driverName == null) {
                     continue;
                 }
 
+                var driverVersion = wddmAdapterInfo.openglIcdVersion();
+
                 // Intel OpenGL ICD for Generation 7 GPUs
                 if (driverName.matches("ig7icd(32|64)")) {
                     // https://www.intel.com/content/www/us/en/support/articles/000005654/graphics.html

File: common/src/main/java/net/caffeinemc/mods/sodium/client/model/light/flat/FlatLightPipeline.java
Patch:
@@ -49,7 +49,7 @@ public void calculate(ModelQuadView quad, BlockPos pos, QuadLightData out, Direc
                 Arrays.fill(out.br, this.lightCache.getLevel().getShade(lightFace, shade));
             } else {
                 lightmap = getEmissiveLightmap(this.lightCache.get(pos));
-                Arrays.fill(out.br, PlatformBlockAccess.getInstance().getNormalVectorShade(quad, this.lightCache.getLevel(), shade));
+                Arrays.fill(out.br, enhanced ? PlatformBlockAccess.getInstance().getNormalVectorShade(quad, this.lightCache.getLevel(), shade) : this.lightCache.getLevel().getShade(lightFace, shade));
             }
         }
 

File: common/src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/compile/pipeline/BlockRenderer.java
Patch:
@@ -1,5 +1,6 @@
 package net.caffeinemc.mods.sodium.client.render.chunk.compile.pipeline;
 
+import net.caffeinemc.mods.sodium.api.util.ColorARGB;
 import net.caffeinemc.mods.sodium.client.model.color.ColorProvider;
 import net.caffeinemc.mods.sodium.client.model.color.ColorProviderRegistry;
 import net.caffeinemc.mods.sodium.client.model.light.LightMode;
@@ -20,7 +21,6 @@
 import net.caffeinemc.mods.sodium.client.services.PlatformModelAccess;
 import net.caffeinemc.mods.sodium.client.services.SodiumModelData;
 import net.caffeinemc.mods.sodium.client.world.LevelSlice;
-import net.caffeinemc.mods.sodium.api.util.ColorARGB;
 import net.fabricmc.fabric.api.renderer.v1.material.BlendMode;
 import net.fabricmc.fabric.api.renderer.v1.material.RenderMaterial;
 import net.fabricmc.fabric.api.renderer.v1.material.ShadeMode;
@@ -177,8 +177,8 @@ private void bufferQuad(MutableQuadViewImpl quad, float[] brightnesses, Material
 
         ModelQuadFacing normalFace = quad.normalFace();
 
-        if (material == DefaultMaterials.TRANSLUCENT && collector != null) {
-            collector.appendQuad(quad.getFaceNormal(), vertices, normalFace);
+        if (material.isTranslucent() && this.collector != null) {
+            this.collector.appendQuad(quad.getFaceNormal(), vertices, normalFace);
         }
 
         ChunkMeshBufferBuilder vertexBuffer = modelBuilder.getVertexBuffer(normalFace);

File: common/src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/region/RenderRegion.java
Patch:
@@ -115,7 +115,7 @@ public SectionRenderDataStorage createStorage(TerrainRenderPass pass) {
         var storage = this.sectionRenderData.get(pass);
 
         if (storage == null) {
-            storage = new SectionRenderDataStorage(pass == DefaultTerrainRenderPasses.TRANSLUCENT);
+            storage = new SectionRenderDataStorage(pass.isTranslucent());
             this.sectionRenderData.put(pass, storage);
         }
 

File: common/src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/region/RenderRegionManager.java
Patch:
@@ -124,7 +124,7 @@ private void uploadResults(CommandList commandList, RenderRegion region, Collect
             for (PendingSectionMeshUpload upload : uploads) {
                 var storage = region.createStorage(upload.pass);
                 storage.setVertexData(upload.section.getSectionIndex(),
-                        upload.vertexUpload.getResult(), upload.meshData.getVertexRanges());
+                        upload.vertexUpload.getResult(), upload.meshData.getVertexCounts());
             }
         }
 

File: common/src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/translucent_sorting/data/DynamicData.java
Patch:
@@ -1,6 +1,5 @@
 package net.caffeinemc.mods.sodium.client.render.chunk.translucent_sorting.data;
 
-import net.caffeinemc.mods.sodium.client.gl.util.VertexRange;
 import net.caffeinemc.mods.sodium.client.render.chunk.translucent_sorting.SortType;
 import net.caffeinemc.mods.sodium.client.render.chunk.translucent_sorting.trigger.GeometryPlanes;
 import net.minecraft.core.SectionPos;
@@ -10,8 +9,8 @@ public abstract class DynamicData extends MixedDirectionData {
     private GeometryPlanes geometryPlanes;
     private final Vector3dc initialCameraPos;
 
-    DynamicData(SectionPos sectionPos, VertexRange range, int quadCount, GeometryPlanes geometryPlanes, Vector3dc initialCameraPos) {
-        super(sectionPos, range, quadCount);
+    DynamicData(SectionPos sectionPos, int vertexCount, int quadCount, GeometryPlanes geometryPlanes, Vector3dc initialCameraPos) {
+        super(sectionPos, vertexCount, quadCount);
         this.geometryPlanes = geometryPlanes;
         this.initialCameraPos = initialCameraPos;
     }

File: common/src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/translucent_sorting/data/PresentTranslucentData.java
Patch:
@@ -1,6 +1,5 @@
 package net.caffeinemc.mods.sodium.client.render.chunk.translucent_sorting.data;
 
-import net.caffeinemc.mods.sodium.client.gl.util.VertexRange;
 import net.minecraft.core.SectionPos;
 
 /**
@@ -15,7 +14,7 @@ public abstract class PresentTranslucentData extends TranslucentData {
         this.quadCount = quadCount;
     }
 
-    public abstract VertexRange[] getVertexRanges();
+    public abstract int[] getVertexCounts();
 
     public abstract Sorter getSorter();
 

File: src/main/java/net/caffeinemc/mods/sodium/client/compatibility/checks/BugChecks.java
Patch:
@@ -9,6 +9,7 @@ class BugChecks {
     public static final boolean ISSUE_1486 = configureCheck("issue1486", true);
     public static final boolean ISSUE_2048 = configureCheck("issue2048", true);
     public static final boolean ISSUE_2561 = configureCheck("issue2561", true);
+    public static final boolean ISSUE_2637 = configureCheck("issue2637", true);
 
     private static boolean configureCheck(String name, boolean defaultValue) {
         var propertyValue = System.getProperty(getPropertyKey(name), null);

File: src/main/java/net/caffeinemc/mods/sodium/client/gui/SodiumOptionsGUI.java
Patch:
@@ -222,7 +222,7 @@ private void rebuildGUIOptions() {
             // Add each option's control element
             for (Option<?> option : group.getOptions()) {
                 Control<?> control = option.getControl();
-                ControlElement<?> element = control.createElement(new Dim2i(x, y, 200, 18));
+                ControlElement<?> element = control.createElement(new Dim2i(x, y, 240, 18));
 
                 this.addRenderableWidget(element);
 

File: src/main/java/net/caffeinemc/mods/sodium/client/gui/options/control/SliderControl.java
Patch:
@@ -41,7 +41,7 @@ public Option<Integer> getOption() {
 
     @Override
     public int getMaxWidth() {
-        return 130;
+        return 170;
     }
 
     private static class Button extends ControlElement<Integer> {
@@ -112,7 +112,7 @@ private void renderSlider(GuiGraphics graphics) {
             this.drawRect(graphics, thumbX, sliderY, thumbX + (THUMB_WIDTH * 2), sliderY + sliderHeight, 0xFFFFFFFF);
             this.drawRect(graphics, sliderX, trackY, sliderX + sliderWidth, trackY + TRACK_HEIGHT, 0xFFFFFFFF);
 
-            String label = String.valueOf(this.getIntValue());
+            Component label = this.formatter.format(this.getIntValue());
 
             int labelWidth = this.font.width(label);
 

File: src/main/java/net/caffeinemc/mods/sodium/client/compatibility/checks/PreLaunchChecks.java
Patch:
@@ -69,7 +69,7 @@ public static void onGameInit() {
                                 Required version: 10.18.10.5161 (or newer)
                                 
                                 You must update your graphics card driver in order to continue."""
-                                .replace("###CURRENT_DRIVER###", NvidiaDriverVersion.parse(installedVersion).toString()),
+                                .replace("###CURRENT_DRIVER###", installedVersion.toString()),
                         "https://github.com/CaffeineMC/sodium-fabric/wiki/Driver-Compatibility#windows-intel-gen7");
             }
         }
@@ -87,7 +87,7 @@ public static void onGameInit() {
                                 Required version: 536.23 (or newer)
                                 
                                 You must update your graphics card driver in order to continue."""
-                                .replace("###CURRENT_DRIVER###", installedVersion.toString()),
+                                .replace("###CURRENT_DRIVER###", NvidiaDriverVersion.parse(installedVersion).toString()),
                         "https://github.com/CaffeineMC/sodium-fabric/wiki/Driver-Compatibility#nvidia-gpus");
 
             }

File: src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/compile/tasks/ChunkBuilderMeshingTask.java
Patch:
@@ -164,6 +164,7 @@ public ChunkBuildOutput execute(ChunkBuildContext buildContext, CancellationToke
 
         // cancellation opportunity right before translucent sorting
         if (cancellationToken.isCancelled()) {
+            meshes.forEach((pass, mesh) -> mesh.getVertexData().free());
             return null;
         }
 

File: src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/compile/pipeline/DefaultFluidRenderer.java
Patch:
@@ -75,7 +75,7 @@ private boolean isFluidOccluded(BlockAndTintGetter world, int x, int y, int z, D
         if (blockState.getFluidState().getType().isSame(fluid)) {
             return true;
         }
-        return blockState.isFaceSturdy(world, adjPos, dir.getOpposite(), SupportType.FULL);
+        return blockState.canOcclude() && blockState.isFaceSturdy(world, adjPos, dir.getOpposite(), SupportType.FULL);
     }
 
     private boolean isSideExposed(BlockAndTintGetter world, int x, int y, int z, Direction dir, float height) {

File: src/main/java/net/caffeinemc/mods/sodium/client/gui/SodiumGameOptions.java
Patch:
@@ -49,7 +49,7 @@ public static class PerformanceSettings {
         public boolean sortingEnabled = true;
 
         public SortBehavior getSortBehavior() {
-            return this.sortingEnabled ? SortBehavior.DYNAMIC_DEFER_NEARBY_ONE_FRAME : SortBehavior.OFF;
+            return this.sortingEnabled ? SortBehavior.DYNAMIC_DEFER_NEARBY_ZERO_FRAMES : SortBehavior.OFF;
         }
     }
 

File: src/main/java/net/caffeinemc/mods/sodium/client/render/SodiumWorldRenderer.java
Patch:
@@ -39,12 +39,12 @@
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
+import org.joml.Vector3d;
+
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.SortedSet;
 
-import org.joml.Vector3d;
-
 /**
  * Provides an extension to vanilla's {@link LevelRenderer}.
  */

File: src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/compile/executor/ChunkJobCollector.java
Patch:
@@ -39,7 +39,7 @@ public void onJobFinished(ChunkJobResult<? extends BuilderTaskOutput> result) {
     }
 
     public void awaitCompletion(ChunkBuilder builder) {
-        if (this.submitted.size() == 0) {
+        if (this.submitted.isEmpty()) {
             return;
         }
 

File: src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/translucent_sorting/data/MixedDirectionData.java
Patch:
@@ -8,13 +8,13 @@
 public abstract class MixedDirectionData extends PresentTranslucentData {
     private final VertexRange[] ranges = new VertexRange[ModelQuadFacing.COUNT];
 
-    MixedDirectionData(SectionPos sectionPos, NativeBuffer buffer, VertexRange range) {
-        super(sectionPos, buffer);
+    MixedDirectionData(SectionPos sectionPos, VertexRange range, int quadCount) {
+        super(sectionPos, quadCount);
         this.ranges[ModelQuadFacing.UNASSIGNED.ordinal()] = range;
     }
 
     @Override
     public VertexRange[] getVertexRanges() {
-        return ranges;
+        return this.ranges;
     }
 }

File: src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/translucent_sorting/data/NoData.java
Patch:
@@ -20,7 +20,7 @@ private NoData(SectionPos sectionPos, SortType reason) {
 
     @Override
     public SortType getSortType() {
-        return reason;
+        return this.reason;
     }
 
     public static NoData forEmptySection(SectionPos sectionPos) {

File: src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/translucent_sorting/data/SplitDirectionData.java
Patch:
@@ -12,8 +12,8 @@
 public abstract class SplitDirectionData extends PresentTranslucentData {
     private final VertexRange[] ranges;
 
-    public SplitDirectionData(SectionPos sectionPos, NativeBuffer buffer, VertexRange[] ranges) {
-        super(sectionPos, buffer);
+    public SplitDirectionData(SectionPos sectionPos, VertexRange[] ranges, int quadCount) {
+        super(sectionPos, quadCount);
         this.ranges = ranges;
     }
 

File: src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/translucent_sorting/trigger/GFNITriggers.java
Patch:
@@ -106,7 +106,7 @@ public void integrateSection(SortTriggering ts, SectionPos pos, DynamicData data
             }
         }
 
-        data.clearGeometryPlanes();
+        data.discardGeometryPlanes();
 
         // check if catchup trigger is necessary
         if (movement.hasChanged()) {

File: src/main/java/net/caffeinemc/mods/sodium/client/SodiumPreLaunch.java
Patch:
@@ -1,6 +1,6 @@
 package net.caffeinemc.mods.sodium.client;
 
-import net.caffeinemc.mods.sodium.client.compatibility.checks.EarlyDriverScanner;
+import net.caffeinemc.mods.sodium.client.compatibility.checks.PreLaunchChecks;
 import net.caffeinemc.mods.sodium.client.compatibility.workarounds.Workarounds;
 import net.caffeinemc.mods.sodium.client.compatibility.environment.probe.GraphicsAdapterProbe;
 import net.fabricmc.loader.api.entrypoint.PreLaunchEntrypoint;
@@ -9,7 +9,7 @@ public class SodiumPreLaunch implements PreLaunchEntrypoint {
     @Override
     public void onPreLaunch() {
         GraphicsAdapterProbe.findAdapters();
-        EarlyDriverScanner.scanDrivers();
+        PreLaunchChecks.onGameInit();
         Workarounds.init();
     }
 }

File: src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/DefaultChunkRenderer.java
Patch:
@@ -60,7 +60,7 @@ public void render(ChunkRenderMatrices matrices,
         shader.setProjectionMatrix(matrices.projection());
         shader.setModelViewMatrix(matrices.modelView());
 
-        Iterator<ChunkRenderList> iterator = renderLists.iterator(renderPass.isReverseOrder());
+        Iterator<ChunkRenderList> iterator = renderLists.iterator(renderPass.isTranslucent());
 
         while (iterator.hasNext()) {
             ChunkRenderList renderList = iterator.next();
@@ -113,7 +113,7 @@ private static void fillCommandBuffer(MultiDrawBatch batch,
                                           boolean useBlockFaceCulling) {
         batch.clear();
 
-        var iterator = renderList.sectionsWithGeometryIterator(pass.isReverseOrder());
+        var iterator = renderList.sectionsWithGeometryIterator(pass.isTranslucent());
 
         if (iterator == null) {
             return;

File: src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/compile/pipeline/BlockRenderer.java
Patch:
@@ -162,7 +162,7 @@ private void writeGeometry(BlockRenderContext ctx,
             out.light = light.lm[srcIndex];
         }
 
-        if (material == DefaultMaterials.TRANSLUCENT && ctx.collector != null) {
+        if (material.isTranslucent() && ctx.collector != null) {
             ctx.collector.appendQuad(quad.getNormal(), vertices, normalFace);
         }
 

File: src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/compile/pipeline/DefaultFluidRenderer.java
Patch:
@@ -422,7 +422,7 @@ private void writeQuad(ChunkModelBuilder builder, TranslucentGeometryCollector c
             builder.addSprite(sprite);
         }
 
-        if (material == DefaultMaterials.TRANSLUCENT && collector != null) {
+        if (material.isTranslucent() && collector != null) {
             int normal;
             if (facing.isAligned()) {
                 normal = facing.getPackedAlignedNormal();

File: src/main/java/net/caffeinemc/mods/sodium/client/data/config/MixinConfig.java
Patch:
@@ -82,7 +82,6 @@ private MixinConfig() {
 
         this.addMixinRule("features.world", true);
         this.addMixinRule("features.world.biome", true);
-        this.addMixinRule("features.world.storage", true);
 
         this.addMixinRule("workarounds", true);
         this.addMixinRule("workarounds.context_creation", true);

File: src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/shader/ChunkShaderOptions.java
Patch:
@@ -14,9 +14,6 @@ public ShaderConstants constants() {
         }
 
         constants.add("USE_VERTEX_COMPRESSION"); // TODO: allow compact vertex format to be disabled
-        constants.add("VERT_POS_SCALE", String.valueOf(this.vertexType.getPositionScale()));
-        constants.add("VERT_POS_OFFSET", String.valueOf(this.vertexType.getPositionOffset()));
-        constants.add("VERT_TEX_SCALE", String.valueOf(this.vertexType.getTextureScale()));
 
         return constants.build();
     }

File: src/main/java/net/caffeinemc/mods/sodium/client/render/chunk/vertex/format/ChunkVertexEncoder.java
Patch:
@@ -3,7 +3,7 @@
 import net.caffeinemc.mods.sodium.client.render.chunk.terrain.material.Material;
 
 public interface ChunkVertexEncoder {
-    long write(long ptr, Material material, Vertex vertex, int sectionIndex);
+    long write(long ptr, Material material, Vertex[] vertices, int sectionIndex);
 
     class Vertex {
         public float x;

File: src/main/java/me/jellysquid/mods/sodium/client/compatibility/checks/EarlyDriverScanner.java
Patch:
@@ -3,7 +3,6 @@
 import me.jellysquid.mods.sodium.client.platform.MessageBox;
 import me.jellysquid.mods.sodium.client.platform.windows.WindowsDriverStoreVersion;
 import net.minecraft.Util;
-import me.jellysquid.mods.sodium.client.compatibility.environment.probe.GraphicsAdapterInfo;
 import me.jellysquid.mods.sodium.client.compatibility.environment.probe.GraphicsAdapterProbe;
 import me.jellysquid.mods.sodium.client.compatibility.environment.probe.GraphicsAdapterVendor;
 import org.jetbrains.annotations.Nullable;

File: src/main/java/me/jellysquid/mods/sodium/client/compatibility/environment/probe/GraphicsAdapterProbe.java
Patch:
@@ -3,8 +3,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import oshi.SystemInfo;
-import oshi.hardware.GraphicsCard;
-import oshi.hardware.HardwareAbstractionLayer;
 import oshi.util.ExecutingCommand;
 
 import java.io.IOException;
@@ -13,7 +11,7 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
-import java.util.stream.Stream;
+
 import net.minecraft.Util;
 
 public class GraphicsAdapterProbe {

File: src/main/java/me/jellysquid/mods/sodium/client/compatibility/workarounds/Workarounds.java
Patch:
@@ -4,7 +4,6 @@
 import me.jellysquid.mods.sodium.client.compatibility.environment.probe.GraphicsAdapterProbe;
 import me.jellysquid.mods.sodium.client.compatibility.environment.probe.GraphicsAdapterVendor;
 import net.minecraft.Util;
-import net.minecraft.Util.OS;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: src/main/java/me/jellysquid/mods/sodium/client/compatibility/workarounds/nvidia/NvidiaDriverVersion.java
Patch:
@@ -5,7 +5,6 @@
 import org.jetbrains.annotations.Nullable;
 
 import java.util.Objects;
-import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 public record NvidiaDriverVersion(int major, int minor) {

File: src/main/java/me/jellysquid/mods/sodium/client/data/fingerprint/FingerprintMeasure.java
Patch:
@@ -5,13 +5,12 @@
 import org.apache.commons.codec.binary.Hex;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
+
 import java.nio.charset.StandardCharsets;
-import java.nio.file.Path;
 import java.security.MessageDigest;
 import java.security.SecureRandom;
 import java.time.Instant;
 import java.util.Objects;
-import java.util.UUID;
 
 public record FingerprintMeasure(@NotNull String uuid, @NotNull String path) {
     private static final int SALT_LENGTH = 64;

File: src/main/java/me/jellysquid/mods/sodium/client/gl/shader/GlProgram.java
Patch:
@@ -32,8 +32,8 @@ public T getInterface() {
         return this.shaderInterface;
     }
 
-    public static Builder builder(ResourceLocation identifier) {
-        return new Builder(identifier);
+    public static Builder builder(ResourceLocation name) {
+        return new Builder(name);
     }
 
     public void bind() {

File: src/main/java/me/jellysquid/mods/sodium/client/gl/shader/ShaderParser.java
Patch:
@@ -48,8 +48,8 @@ private static List<String> resolveImport(String line) {
         String namespace = matcher.group("namespace");
         String path = matcher.group("path");
 
-        ResourceLocation identifier = new ResourceLocation(namespace, path);
-        String source = ShaderLoader.getShaderSource(identifier);
+        ResourceLocation name = new ResourceLocation(namespace, path);
+        String source = ShaderLoader.getShaderSource(name);
 
         return ShaderParser.parseShader(source);
     }

File: src/main/java/me/jellysquid/mods/sodium/client/gl/shader/uniform/GlUniformMatrix4f.java
Patch:
@@ -1,6 +1,5 @@
 package me.jellysquid.mods.sodium.client.gl.shader.uniform;
 
-import org.joml.Matrix4f;
 import org.joml.Matrix4fc;
 import org.lwjgl.opengl.GL30C;
 import org.lwjgl.system.MemoryStack;

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptions.java
Patch:
@@ -81,8 +81,8 @@ public Component getLocalizedName() {
             return this.name;
         }
 
-        public boolean isFancy(GraphicsStatus graphicsMode) {
-            return (this == FANCY) || (this == DEFAULT && (graphicsMode == GraphicsStatus.FANCY || graphicsMode == GraphicsStatus.FABULOUS));
+        public boolean isFancy(GraphicsStatus graphicsStatus) {
+            return (this == FANCY) || (this == DEFAULT && (graphicsStatus == GraphicsStatus.FANCY || graphicsStatus == GraphicsStatus.FABULOUS));
         }
     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/gui/console/Console.java
Patch:
@@ -3,11 +3,11 @@
 import me.jellysquid.mods.sodium.client.gui.console.message.Message;
 import me.jellysquid.mods.sodium.client.gui.console.message.MessageLevel;
 import net.minecraft.network.chat.Component;
-import org.apache.commons.lang3.Validate;
 import org.jetbrains.annotations.NotNull;
 
 import java.util.ArrayDeque;
 import java.util.Deque;
+import java.util.Objects;
 
 public class Console implements ConsoleSink {
     static final Console INSTANCE = new Console();
@@ -16,8 +16,8 @@ public class Console implements ConsoleSink {
 
     @Override
     public void logMessage(@NotNull MessageLevel level, @NotNull Component text, double duration) {
-        Validate.notNull(level);
-        Validate.notNull(text);
+        Objects.requireNonNull(level);
+        Objects.requireNonNull(text);
 
         this.messages.addLast(new Message(level, text.copy(), duration));
     }

File: src/main/java/me/jellysquid/mods/sodium/client/gui/console/ConsoleHooks.java
Patch:
@@ -3,8 +3,8 @@
 import net.minecraft.client.gui.GuiGraphics;
 
 public class ConsoleHooks {
-    public static void render(GuiGraphics drawContext, double currentTime) {
+    public static void render(GuiGraphics graphics, double currentTime) {
         ConsoleRenderer.INSTANCE.update(Console.INSTANCE, currentTime);
-        ConsoleRenderer.INSTANCE.draw(drawContext);
+        ConsoleRenderer.INSTANCE.draw(graphics);
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/OptionImpact.java
Patch:
@@ -11,8 +11,9 @@ public enum OptionImpact implements TextProvider {
 
     private final Component text;
 
-    OptionImpact(ChatFormatting color, String text) {
-        this.text = Component.translatable(text).withStyle(color);
+    OptionImpact(ChatFormatting formatting, String text) {
+        this.text = Component.translatable(text)
+                .withStyle(formatting);
     }
 
     @Override

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/control/CyclingControl.java
Patch:
@@ -86,14 +86,14 @@ public CyclingControlElement(Option<T> option, Dim2i dim, T[] allowedValues, Com
         }
 
         @Override
-        public void render(GuiGraphics drawContext, int mouseX, int mouseY, float delta) {
-            super.render(drawContext, mouseX, mouseY, delta);
+        public void render(GuiGraphics graphics, int mouseX, int mouseY, float delta) {
+            super.render(graphics, mouseX, mouseY, delta);
 
             Enum<T> value = this.option.getValue();
             Component name = this.names[value.ordinal()];
 
             int strWidth = this.getStringWidth(name);
-            this.drawString(drawContext, name, this.dim.getLimitX() - strWidth - 6, this.dim.getCenterY() - 4, 0xFFFFFFFF);
+            this.drawString(graphics, name, this.dim.getLimitX() - strWidth - 6, this.dim.getCenterY() - 4, 0xFFFFFFFF);
         }
 
         @Override

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/storage/MinecraftOptionsStorage.java
Patch:
@@ -5,15 +5,15 @@
 import net.minecraft.client.Options;
 
 public class MinecraftOptionsStorage implements OptionStorage<Options> {
-    private final Minecraft client;
+    private final Minecraft minecraft;
 
     public MinecraftOptionsStorage() {
-        this.client = Minecraft.getInstance();
+        this.minecraft = Minecraft.getInstance();
     }
 
     @Override
     public Options getData() {
-        return this.client.options;
+        return this.minecraft.options;
     }
 
     @Override

File: src/main/java/me/jellysquid/mods/sodium/client/model/color/ColorProvider.java
Patch:
@@ -1,19 +1,19 @@
 package me.jellysquid.mods.sodium.client.model.color;
 
 import me.jellysquid.mods.sodium.client.model.quad.ModelQuadView;
-import me.jellysquid.mods.sodium.client.world.WorldSlice;
+import me.jellysquid.mods.sodium.client.world.LevelSlice;
 import net.minecraft.core.BlockPos;
 
 public interface ColorProvider<T> {
     /**
      * Computes the per-vertex colors of a model quad and stores the results in {@param output}. The order of
      * the output color array is the same as the order of the quad's vertices.
      *
-     * @param view   The world which contains the object being colorized
+     * @param slice  The level slice which contains the object being colorized
      * @param pos    The position of the object being colorized
      * @param state  The state of the object being colorized
      * @param quad   The quad geometry which should be colorized
      * @param output The output array of vertex colors (in ABGR format)
      */
-    void getColors(WorldSlice view, BlockPos pos, T state, ModelQuadView quad, int[] output);
+    void getColors(LevelSlice slice, BlockPos pos, T state, ModelQuadView quad, int[] output);
 }

File: src/main/java/me/jellysquid/mods/sodium/client/model/color/interop/BlockColorsExtension.java
Patch:
@@ -6,13 +6,13 @@
 import net.minecraft.client.color.block.BlockColors;
 import net.minecraft.world.level.block.Block;
 
-public interface BlockColorsExtended {
+public interface BlockColorsExtension {
     static Reference2ReferenceMap<Block, BlockColor> getProviders(BlockColors blockColors) {
-        return ((BlockColorsExtended) blockColors).sodium$getProviders();
+        return ((BlockColorsExtension) blockColors).sodium$getProviders();
     }
 
     static ReferenceSet<Block> getOverridenVanillaBlocks(BlockColors blockColors) {
-        return ((BlockColorsExtended) blockColors).sodium$getOverridenVanillaBlocks();
+        return ((BlockColorsExtension) blockColors).sodium$getOverridenVanillaBlocks();
     }
 
     Reference2ReferenceMap<Block, BlockColor> sodium$getProviders();

File: src/main/java/me/jellysquid/mods/sodium/client/model/color/interop/ItemColorsExtension.java
Patch:
@@ -3,6 +3,6 @@
 import net.minecraft.client.color.item.ItemColor;
 import net.minecraft.world.item.ItemStack;
 
-public interface ItemColorsExtended {
+public interface ItemColorsExtension {
     ItemColor sodium$getColorProvider(ItemStack stack);
 }

File: src/main/java/me/jellysquid/mods/sodium/client/model/light/LightPipeline.java
Patch:
@@ -6,7 +6,7 @@
 import net.minecraft.core.Direction;
 
 /**
- * Light pipelines allow model quads for any location in the world to be lit using various backends, including fluids
+ * Light pipelines allow model quads for any location in the level to be lit using various backends, including fluids
  * and block entities. 
  */
 public interface LightPipeline {

File: src/main/java/me/jellysquid/mods/sodium/client/model/light/data/HashLightDataCache.java
Patch:
@@ -10,8 +10,8 @@
 public class HashLightDataCache extends LightDataAccess {
     private final Long2IntLinkedOpenHashMap map = new Long2IntLinkedOpenHashMap(1024, 0.50f);
 
-    public HashLightDataCache(BlockAndTintGetter world) {
-        this.world = world;
+    public HashLightDataCache(BlockAndTintGetter level) {
+        this.level = level;
     }
 
     @Override

File: src/main/java/me/jellysquid/mods/sodium/client/model/light/flat/FlatLightPipeline.java
Patch:
@@ -48,7 +48,7 @@ public void calculate(ModelQuadView quad, BlockPos pos, QuadLightData out, Direc
         }
 
         Arrays.fill(out.lm, lightmap);
-        Arrays.fill(out.br, this.lightCache.getWorld().getShade(lightFace, shade));
+        Arrays.fill(out.br, this.lightCache.getLevel().getShade(lightFace, shade));
     }
 
     /**
@@ -66,7 +66,7 @@ private int getOffsetLightmap(BlockPos pos, Direction face) {
             return LightTexture.FULL_BRIGHT;
         }
 
-        // Use world light values from the offset pos, but luminance from the origin pos
+        // Use light values from the offset pos, but luminance from the origin pos
         int adjWord = this.lightCache.get(pos, face);
         return LightTexture.pack(Math.max(unpackBL(adjWord), unpackLU(word)), unpackSL(adjWord));
     }

File: src/main/java/me/jellysquid/mods/sodium/client/model/light/smooth/SmoothLightPipeline.java
Patch:
@@ -215,7 +215,7 @@ private void applyInsetPartialFaceVertex(BlockPos pos, Direction dir, float n1d,
     }
 
     private void applySidedBrightness(QuadLightData out, Direction face, boolean shade) {
-        float brightness = this.lightCache.getWorld().getShade(face, shade);
+        float brightness = this.lightCache.getLevel().getShade(face, shade);
         float[] br = out.br;
 
         for (int i = 0; i < br.length; i++) {

File: src/main/java/me/jellysquid/mods/sodium/client/platform/unix/Libc.java
Patch:
@@ -1,6 +1,5 @@
 package me.jellysquid.mods.sodium.client.platform.unix;
 
-import java.nio.ByteBuffer;
 import org.jetbrains.annotations.Nullable;
 import org.lwjgl.system.*;
 

File: src/main/java/me/jellysquid/mods/sodium/client/platform/windows/WindowsDriverStoreVersion.java
Patch:
@@ -1,6 +1,5 @@
 package me.jellysquid.mods.sodium.client.platform.windows;
 
-import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 public record WindowsDriverStoreVersion(int driverModel, int featureLevel, int major, int minor) {

File: src/main/java/me/jellysquid/mods/sodium/client/platform/windows/api/Kernel32.java
Patch:
@@ -4,7 +4,6 @@
 import org.lwjgl.PointerBuffer;
 import org.lwjgl.system.*;
 import java.nio.ByteBuffer;
-import java.nio.IntBuffer;
 
 public class Kernel32 {
     private static final SharedLibrary LIBRARY = APIUtil.apiCreateLibrary("kernel32");

File: src/main/java/me/jellysquid/mods/sodium/client/platform/windows/api/User32.java
Patch:
@@ -3,7 +3,6 @@
 import me.jellysquid.mods.sodium.client.platform.windows.api.msgbox.MsgBoxParamSw;
 import org.lwjgl.system.APIUtil;
 import org.lwjgl.system.JNI;
-import org.lwjgl.system.Library;
 import org.lwjgl.system.SharedLibrary;
 
 public class User32 {

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/DefaultChunkRenderer.java
Patch:
@@ -16,15 +16,13 @@
 import me.jellysquid.mods.sodium.client.render.chunk.lists.ChunkRenderListIterable;
 import me.jellysquid.mods.sodium.client.render.chunk.lists.ChunkRenderList;
 import me.jellysquid.mods.sodium.client.render.chunk.region.RenderRegion;
-import me.jellysquid.mods.sodium.client.render.chunk.region.RenderRegion.DeviceResources;
 import me.jellysquid.mods.sodium.client.render.chunk.shader.ChunkShaderBindingPoints;
 import me.jellysquid.mods.sodium.client.render.chunk.shader.ChunkShaderInterface;
 import me.jellysquid.mods.sodium.client.render.chunk.terrain.TerrainRenderPass;
 import me.jellysquid.mods.sodium.client.render.chunk.vertex.format.ChunkMeshAttribute;
 import me.jellysquid.mods.sodium.client.render.chunk.vertex.format.ChunkVertexType;
 import me.jellysquid.mods.sodium.client.render.viewport.CameraTransform;
 import me.jellysquid.mods.sodium.client.util.BitwiseMath;
-import me.jellysquid.mods.sodium.client.util.iterator.ByteIterator;
 import org.lwjgl.system.MemoryUtil;
 import java.util.Iterator;
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/RenderSection.java
Patch:
@@ -152,7 +152,7 @@ private void clearRenderState() {
     }
 
     /**
-     * Returns the chunk section position which this render refers to in the world.
+     * Returns the chunk section position which this render refers to in the level.
      */
     public SectionPos getPosition() {
         return SectionPos.of(this.chunkX, this.chunkY, this.chunkZ);
@@ -180,15 +180,15 @@ public int getOriginZ() {
     }
 
     /**
-     * @return The squared distance from the center of this chunk in the world to the center of the block position
+     * @return The squared distance from the center of this chunk in the level to the center of the block position
      * given by {@param pos}
      */
     public float getSquaredDistance(BlockPos pos) {
         return this.getSquaredDistance(pos.getX() + 0.5f, pos.getY() + 0.5f, pos.getZ() + 0.5f);
     }
 
     /**
-     * @return The squared distance from the center of this chunk in the world to the given position
+     * @return The squared distance from the center of this chunk to the given block position
      */
     public float getSquaredDistance(float x, float y, float z) {
         float xDist = x - this.getCenterX();

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/SharedQuadIndexBuffer.java
Patch:
@@ -2,7 +2,6 @@
 
 import me.jellysquid.mods.sodium.client.gl.buffer.GlBuffer;
 import me.jellysquid.mods.sodium.client.gl.buffer.GlBufferMapFlags;
-import me.jellysquid.mods.sodium.client.gl.buffer.GlBufferMapping;
 import me.jellysquid.mods.sodium.client.gl.buffer.GlBufferUsage;
 import me.jellysquid.mods.sodium.client.gl.buffer.GlMutableBuffer;
 import me.jellysquid.mods.sodium.client.gl.device.CommandList;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/ChunkBuildContext.java
Patch:
@@ -9,9 +9,9 @@ public class ChunkBuildContext {
     public final ChunkBuildBuffers buffers;
     public final BlockRenderCache cache;
 
-    public ChunkBuildContext(ClientLevel world, ChunkVertexType vertexType) {
+    public ChunkBuildContext(ClientLevel level, ChunkVertexType vertexType) {
         this.buffers = new ChunkBuildBuffers(vertexType);
-        this.cache = new BlockRenderCache(Minecraft.getInstance(), world);
+        this.cache = new BlockRenderCache(Minecraft.getInstance(), level);
     }
 
     public void cleanup() {

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/executor/ChunkJobResult.java
Patch:
@@ -20,9 +20,9 @@ public static <OUTPUT> ChunkJobResult<OUTPUT> successfully(OUTPUT output) {
     }
 
     public OUTPUT unwrap() {
-        if (this.throwable instanceof ReportedException crashException) {
-            // Propagate CrashExceptions directly to provide extra information
-            throw crashException;
+        if (this.throwable instanceof ReportedException exception) {
+            // Propagate ReportedExceptions directly to provide extra information
+            throw exception;
         } else if (this.throwable != null) {
             throw new RuntimeException("Exception thrown while executing job", this.throwable);
         }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/pipeline/BlockOcclusionCache.java
Patch:
@@ -29,8 +29,8 @@ public BlockOcclusionCache() {
     }
 
     /**
-     * @param selfState The state of the block in the world
-     * @param view The world view for this render context
+     * @param selfState The state of the block in the level
+     * @param view The block view for this render context
      * @param selfPos The position of the block
      * @param facing The facing direction of the side to check
      * @return True if the block side facing {@param dir} is not occluded, otherwise false

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/data/SectionRenderDataUnsafe.java
Patch:
@@ -5,7 +5,7 @@
 // This code is a terrible hack to get around the fact that we are so incredibly memory bound, and that we
 // have no control over memory layout. The chunk rendering code spends an astronomical amount of time chasing
 // object pointers that are scattered across the heap. Worse yet, because render state is initialized over a long
-// period of time as the world loads, those objects are never even remotely close to one another in heap, so
+// period of time as the level loads, those objects are never even remotely close to one another in heap, so
 // you also have to pay the penalty of a DTLB miss on every other access.
 //
 // Unfortunately, Hotspot *still* produces abysmal machine code for the chunk rendering code paths, since any usage of

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/map/ChunkTrackerHolder.java
Patch:
@@ -3,8 +3,8 @@
 import net.minecraft.client.multiplayer.ClientLevel;
 
 public interface ChunkTrackerHolder {
-    static ChunkTracker get(ClientLevel world) {
-        return ((ChunkTrackerHolder) world).sodium$getTracker();
+    static ChunkTracker get(ClientLevel level) {
+        return ((ChunkTrackerHolder) level).sodium$getTracker();
     }
 
     ChunkTracker sodium$getTracker();

File: src/main/java/me/jellysquid/mods/sodium/client/render/immediate/model/ModelCuboid.java
Patch:
@@ -1,6 +1,5 @@
 package me.jellysquid.mods.sodium.client.render.immediate.model;
 
-import org.joml.*;
 import java.util.Set;
 import net.minecraft.core.Direction;
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/immediate/model/ModelPartData.java
Patch:
@@ -3,8 +3,8 @@
 import net.minecraft.client.model.geom.ModelPart;
 
 public interface ModelPartData {
-    static ModelPartData from(ModelPart child) {
-        return (ModelPartData) (Object) child;
+    static ModelPartData from(ModelPart part) {
+        return (ModelPartData) (Object) part;
     }
 
     ModelCuboid[] getCuboids();

File: src/main/java/me/jellysquid/mods/sodium/client/render/texture/SpriteContentsExtension.java
Patch:
@@ -1,6 +1,6 @@
 package me.jellysquid.mods.sodium.client.render.texture;
 
-public interface SpriteContentsExtended {
+public interface SpriteContentsExtension {
     void sodium$setActive(boolean value);
     boolean sodium$isActive();
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/texture/SpriteUtil.java
Patch:
@@ -11,10 +11,10 @@ public static void markSpriteActive(@Nullable TextureAtlasSprite sprite) {
             return;
         }
 
-        ((SpriteContentsExtended) sprite.contents()).sodium$setActive(true);
+        ((SpriteContentsExtension) sprite.contents()).sodium$setActive(true);
     }
 
     public static boolean hasAnimation(TextureAtlasSprite sprite) {
-        return ((SpriteContentsExtended) sprite.contents()).sodium$hasAnimation();
+        return ((SpriteContentsExtension) sprite.contents()).sodium$hasAnimation();
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/render/vertex/VertexConsumerTracker.java
Patch:
@@ -4,7 +4,6 @@
 import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet;
 import it.unimi.dsi.fastutil.objects.ReferenceSet;
 import it.unimi.dsi.fastutil.objects.ReferenceSets;
-import me.jellysquid.mods.sodium.client.SodiumClientMod;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/vertex/VertexFormatDescriptionImpl.java
Patch:
@@ -3,11 +3,9 @@
 import me.jellysquid.mods.sodium.mixin.core.render.VertexFormatAccessor;
 import net.caffeinemc.mods.sodium.api.vertex.attributes.CommonVertexAttribute;
 import net.caffeinemc.mods.sodium.api.vertex.format.VertexFormatDescription;
-import com.google.common.collect.ImmutableList;
 import com.mojang.blaze3d.vertex.DefaultVertexFormat;
 import com.mojang.blaze3d.vertex.VertexFormat;
-import com.mojang.blaze3d.vertex.VertexFormatElement;
-import it.unimi.dsi.fastutil.ints.IntList;
+
 import java.util.Arrays;
 import java.util.EnumSet;
 import java.util.NoSuchElementException;

File: src/main/java/me/jellysquid/mods/sodium/client/render/vertex/buffer/BufferBuilderExtension.java
Patch:
@@ -5,11 +5,11 @@
 
 import java.nio.ByteBuffer;
 
-public interface ExtendedBufferBuilder extends VertexBufferWriter {
+public interface BufferBuilderExtension extends VertexBufferWriter {
     ByteBuffer sodium$getBuffer();
     int sodium$getElementOffset();
     void sodium$moveToNextVertex();
     VertexFormatDescription sodium$getFormatDescription();
-    boolean sodium$usingFixedColor();
-    SodiumBufferBuilder sodium$getDelegate();
+    boolean sodium$hasDefaultColor();
+    DirectBufferBuilder sodium$getDelegate();
 }

File: src/main/java/me/jellysquid/mods/sodium/client/render/viewport/Viewport.java
Patch:
@@ -9,14 +9,14 @@ public final class Viewport {
     private final Frustum frustum;
     private final CameraTransform transform;
 
-    private final SectionPos chunkCoords;
+    private final SectionPos sectionCoords;
     private final BlockPos blockCoords;
 
     public Viewport(Frustum frustum, Vector3d position) {
         this.frustum = frustum;
         this.transform = new CameraTransform(position.x, position.y, position.z);
 
-        this.chunkCoords = SectionPos.of(
+        this.sectionCoords = SectionPos.of(
                 SectionPos.posToSectionCoord(position.x),
                 SectionPos.posToSectionCoord(position.y),
                 SectionPos.posToSectionCoord(position.z)
@@ -46,7 +46,7 @@ public CameraTransform getTransform() {
     }
 
     public SectionPos getChunkCoord() {
-        return this.chunkCoords;
+        return this.sectionCoords;
     }
 
     public BlockPos getBlockCoord() {

File: src/main/java/me/jellysquid/mods/sodium/client/world/BiomeSeedProvider.java
Patch:
@@ -3,9 +3,9 @@
 import net.minecraft.client.multiplayer.ClientLevel;
 
 public interface BiomeSeedProvider {
-    static long getBiomeSeed(ClientLevel world) {
-        return ((BiomeSeedProvider) world).sodium$getBiomeSeed();
+    static long getBiomeZoomSeed(ClientLevel level) {
+        return ((BiomeSeedProvider) level).sodium$getBiomeZoomSeed();
     }
 
-    long sodium$getBiomeSeed();
+    long sodium$getBiomeZoomSeed();
 }

File: src/main/java/me/jellysquid/mods/sodium/client/world/BitStorageExtension.java
Patch:
@@ -2,6 +2,6 @@
 
 import net.minecraft.world.level.chunk.Palette;
 
-public interface PaletteStorageExtended {
+public interface BitStorageExtension {
     <T> void sodium$unpack(T[] out, Palette<T> palette);
 }

File: src/main/java/me/jellysquid/mods/sodium/client/world/LevelRendererExtension.java
Patch:
@@ -2,6 +2,6 @@
 
 import me.jellysquid.mods.sodium.client.render.SodiumWorldRenderer;
 
-public interface WorldRendererExtended {
+public interface LevelRendererExtension {
     SodiumWorldRenderer sodium$getWorldRenderer();
 }

File: src/main/java/me/jellysquid/mods/sodium/client/world/PalettedContainerROExtension.java
Patch:
@@ -2,10 +2,10 @@
 
 import net.minecraft.world.level.chunk.PalettedContainerRO;
 
-public interface ReadableContainerExtended<T> {
+public interface PalettedContainerROExtension<T> {
     @SuppressWarnings("unchecked")
-    static <T> ReadableContainerExtended<T> of(PalettedContainerRO<T> container) {
-        return (ReadableContainerExtended<T>) container;
+    static <T> PalettedContainerROExtension<T> of(PalettedContainerRO<T> container) {
+        return (PalettedContainerROExtension<T>) container;
     }
 
     static <T> PalettedContainerRO<T> clone(PalettedContainerRO<T> container) {

File: src/main/java/me/jellysquid/mods/sodium/client/world/cloned/ChunkRenderContext.java
Patch:
@@ -2,7 +2,6 @@
 
 import net.minecraft.core.SectionPos;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
-import org.jetbrains.annotations.Nullable;
 
 public class ChunkRenderContext {
     private final SectionPos origin;

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/MinecraftMixin.java
Patch:
@@ -2,7 +2,6 @@
 
 import it.unimi.dsi.fastutil.longs.LongArrayFIFOQueue;
 import me.jellysquid.mods.sodium.client.SodiumClientMod;
-import me.jellysquid.mods.sodium.client.gui.screen.ConfigCorruptedScreen;
 import net.minecraft.client.Minecraft;
 import net.minecraft.server.packs.resources.ReloadableResourceManager;
 import net.minecraft.util.profiling.ProfilerFiller;
@@ -19,7 +18,7 @@
 import java.util.concurrent.CompletableFuture;
 
 @Mixin(Minecraft.class)
-public class MinecraftClientMixin {
+public class MinecraftMixin {
     @Shadow
     @Final
     private ReloadableResourceManager resourceManager;

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/gui/LevelLoadStatusManagerMixin.java
Patch:
@@ -8,7 +8,7 @@
 import org.spongepowered.asm.mixin.injection.Redirect;
 
 @Mixin(LevelLoadStatusManager.class)
-public class WorldLoadingStateMixin {
+public class LevelLoadStatusManagerMixin {
     @Redirect(method = "tick", at = @At(value = "INVOKE", target = "Lnet/minecraft/client/player/LocalPlayer;blockPosition()Lnet/minecraft/core/BlockPos;"))
     private BlockPos redirect$getPlayerBlockPosition(LocalPlayer instance) {
         // Ensure the "eye" position (which the chunk rendering code is actually concerned about) is used instead of

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/model/colors/BlockColorsMixin.java
Patch:
@@ -2,7 +2,7 @@
 
 import it.unimi.dsi.fastutil.objects.*;
 import me.jellysquid.mods.sodium.client.SodiumClientMod;
-import me.jellysquid.mods.sodium.client.model.color.interop.BlockColorsExtended;
+import me.jellysquid.mods.sodium.client.model.color.interop.BlockColorsExtension;
 import net.minecraft.client.color.block.BlockColor;
 import net.minecraft.client.color.block.BlockColors;
 import net.minecraft.core.registries.BuiltInRegistries;
@@ -14,7 +14,7 @@
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
 
 @Mixin(BlockColors.class)
-public class BlockColorsMixin implements BlockColorsExtended {
+public class BlockColorsMixin implements BlockColorsExtension {
     // We're keeping a copy as we need to be able to iterate over the entry pairs, rather than just the values.
     @Unique
     private final Reference2ReferenceMap<Block, BlockColor> blocksToColor = new Reference2ReferenceOpenHashMap<>();

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/model/colors/ItemColorsMixin.java
Patch:
@@ -2,7 +2,7 @@
 
 import it.unimi.dsi.fastutil.objects.Reference2ReferenceMap;
 import it.unimi.dsi.fastutil.objects.Reference2ReferenceOpenHashMap;
-import me.jellysquid.mods.sodium.client.model.color.interop.ItemColorsExtended;
+import me.jellysquid.mods.sodium.client.model.color.interop.ItemColorsExtension;
 import net.minecraft.client.color.item.ItemColor;
 import net.minecraft.client.color.item.ItemColors;
 import net.minecraft.world.item.ItemStack;
@@ -14,7 +14,7 @@
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
 
 @Mixin(ItemColors.class)
-public class ItemColorsMixin implements ItemColorsExtended {
+public class ItemColorsMixin implements ItemColorsExtension {
     @Unique
     private final Reference2ReferenceMap<ItemLike, ItemColor> itemsToColor =
             new Reference2ReferenceOpenHashMap<>();

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/render/immediate/consumer/EntityOutlineGeneratorMixin.java
Patch:
@@ -17,7 +17,7 @@
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
 
 @Mixin(targets = "net/minecraft/client/renderer/OutlineBufferSource$EntityOutlineGenerator")
-public abstract class OutlineVertexConsumerMixin extends DefaultedVertexConsumer implements VertexBufferWriter {
+public abstract class EntityOutlineGeneratorMixin extends DefaultedVertexConsumer implements VertexBufferWriter {
     @Shadow
     @Final
     private VertexConsumer delegate;

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/render/immediate/consumer/SheetedDecalTextureGeneratorMixin.java
Patch:
@@ -25,7 +25,7 @@
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
 
 @Mixin(SheetedDecalTextureGenerator.class)
-public class OverlayVertexConsumerMixin implements VertexBufferWriter {
+public class SheetedDecalTextureGeneratorMixin implements VertexBufferWriter {
     @Shadow
     @Final
     private VertexConsumer delegate;

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/render/immediate/consumer/SpriteCoordinateExpanderMixin.java
Patch:
@@ -17,7 +17,7 @@
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
 
 @Mixin(SpriteCoordinateExpander.class)
-public class SpriteTexturedVertexConsumerMixin implements VertexBufferWriter {
+public class SpriteCoordinateExpanderMixin implements VertexBufferWriter {
     @Shadow
     @Final
     private VertexConsumer delegate;

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/render/immediate/consumer/VertexMultiConsumerMixin.java
Patch:
@@ -13,9 +13,9 @@
 import org.spongepowered.asm.mixin.injection.Inject;
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
 
-public class VertexConsumersMixin {
+public class VertexMultiConsumerMixin {
     @Mixin(targets = "com/mojang/blaze3d/vertex/VertexMultiConsumer$Double")
-    public static class DualMixin implements VertexBufferWriter {
+    public static class DoubleMixin implements VertexBufferWriter {
         @Shadow
         @Final
         private VertexConsumer first;
@@ -44,7 +44,7 @@ public void push(MemoryStack stack, long ptr, int count, VertexFormatDescription
     }
 
     @Mixin(targets = "com/mojang/blaze3d/vertex/VertexMultiConsumer$Multiple")
-    public static class UnionMixin implements VertexBufferWriter {
+    public static class MultipleMixin implements VertexBufferWriter {
         @Shadow
         @Final
         private VertexConsumer[] delegates;

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/render/world/RenderBuffersMixin.java
Patch:
@@ -8,7 +8,7 @@
 import org.spongepowered.asm.mixin.injection.Redirect;
 
 @Mixin(RenderBuffers.class)
-public class BufferBuilderStorageMixin {
+public class RenderBuffersMixin {
     @Redirect(method = "<init>", at = @At(value = "INVOKE", target = "Lnet/minecraft/client/renderer/SectionBufferBuilderPool;allocate(I)Lnet/minecraft/client/renderer/SectionBufferBuilderPool;"))
     private SectionBufferBuilderPool sodium$doNotAllocateChunks(int i) {
         return new NonStoringBuilderPool();

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/world/chunk/SimpleBitStorageMixin.java
Patch:
@@ -1,6 +1,6 @@
 package me.jellysquid.mods.sodium.mixin.core.world.chunk;
 
-import me.jellysquid.mods.sodium.client.world.PaletteStorageExtended;
+import me.jellysquid.mods.sodium.client.world.BitStorageExtension;
 import net.minecraft.util.SimpleBitStorage;
 import net.minecraft.world.level.chunk.Palette;
 import org.spongepowered.asm.mixin.Final;
@@ -10,7 +10,7 @@
 import java.util.Objects;
 
 @Mixin(SimpleBitStorage.class)
-public class PackedIntegerArrayMixin implements PaletteStorageExtended {
+public class SimpleBitStorageMixin implements BitStorageExtension {
     @Shadow
     @Final
     private long[] data;

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/world/map/ClientChunkCacheMixin.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.function.Consumer;
 
 @Mixin(ClientChunkCache.class)
-public class ClientChunkManagerMixin {
+public class ClientChunkCacheMixin {
     @Shadow
     @Final
     ClientLevel level;

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/world/map/ClientPacketListenerMixin.java
Patch:
@@ -13,7 +13,7 @@
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
 
 @Mixin(ClientPacketListener.class)
-public class ClientPlayNetworkHandlerMixin {
+public class ClientPacketListenerMixin {
     @Shadow
     private ClientLevel level;
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/debug/checks/BufferUploaderMixin.java
Patch:
@@ -7,7 +7,7 @@
 import org.spongepowered.asm.mixin.injection.Redirect;
 
 @Mixin(BufferUploader.class)
-public class BufferRendererMixin {
+public class BufferUploaderMixin {
     @Redirect(method = "drawWithShader", at = @At(value = "INVOKE", target = "Lcom/mojang/blaze3d/systems/RenderSystem;isOnRenderThreadOrInit()Z"))
     private static boolean validateCurrentThread$draw() {
         return RenderAsserts.validateCurrentThread();

File: src/main/java/me/jellysquid/mods/sodium/mixin/debug/checks/DynamicTextureMixin.java
Patch:
@@ -7,7 +7,7 @@
 import org.spongepowered.asm.mixin.injection.Redirect;
 
 @Mixin(DynamicTexture.class)
-public class NativeImageBackedTextureMixin {
+public class DynamicTextureMixin {
     @Redirect(method = "<init>(Lcom/mojang/blaze3d/platform/NativeImage;)V", at = @At(value = "INVOKE", target = "Lcom/mojang/blaze3d/systems/RenderSystem;isOnRenderThread()Z"))
     private boolean validateCurrentThread$init() {
         return RenderAsserts.validateCurrentThread();

File: src/main/java/me/jellysquid/mods/sodium/mixin/debug/checks/HttpTextureMixin.java
Patch:
@@ -10,7 +10,7 @@
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
 
 @Mixin(HttpTexture.class)
-public abstract class PlayerSkinTextureMixin {
+public abstract class HttpTextureMixin {
     @Shadow
     private boolean uploaded;
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/debug/checks/MainTargetMixin.java
Patch:
@@ -7,7 +7,7 @@
 import org.spongepowered.asm.mixin.injection.Redirect;
 
 @Mixin(MainTarget.class)
-public class WindowFramebufferMixin {
+public class MainTargetMixin {
     @Redirect(method = {
             "<init>"
     }, at = @At(value = "INVOKE", target = "Lcom/mojang/blaze3d/systems/RenderSystem;isOnRenderThread()Z"))

File: src/main/java/me/jellysquid/mods/sodium/mixin/debug/checks/PreloadedTextureMixin.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.concurrent.Executor;
 
 @Mixin(PreloadedTexture.class)
-public class AsyncTextureMixin {
+public class PreloadedTextureMixin {
     /**
      * @author JellySquid
      * @reason Redirect asynchronous render commands to our helper

File: src/main/java/me/jellysquid/mods/sodium/mixin/debug/checks/RenderTargetMixin.java
Patch:
@@ -7,7 +7,7 @@
 import org.spongepowered.asm.mixin.injection.Redirect;
 
 @Mixin(RenderTarget.class)
-public class FramebufferMixin {
+public class RenderTargetMixin {
     @Redirect(method = {
             "resize",
             "bindWrite",

File: src/main/java/me/jellysquid/mods/sodium/mixin/debug/checks/TextureAtlasMixin.java
Patch:
@@ -7,7 +7,7 @@
 import org.spongepowered.asm.mixin.injection.Redirect;
 
 @Mixin(TextureAtlas.class)
-public class SpriteAtlasTextureMixin {
+public class TextureAtlasMixin {
     @Redirect(method = {
             "tick"
     }, at = @At(value = "INVOKE", target = "Lcom/mojang/blaze3d/systems/RenderSystem;isOnRenderThread()Z"))

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/gui/hooks/debug/DebugScreenOverlayMixin.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.ArrayList;
 
 @Mixin(DebugScreenOverlay.class)
-public abstract class DebugHudMixin {
+public abstract class DebugScreenOverlayMixin {
     @Redirect(method = "getSystemInformation", at = @At(value = "INVOKE", target = "Lcom/google/common/collect/Lists;newArrayList([Ljava/lang/Object;)Ljava/util/ArrayList;", remap = false))
     private ArrayList<String> redirectRightTextEarly(Object[] elements) {
         ArrayList<String> strings = Lists.newArrayList((String[]) elements);

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/gui/screen/LevelLoadingScreenMixin.java
Patch:
@@ -50,7 +50,7 @@ public class LevelLoadingScreenMixin {
      * @author JellySquid
      */
     @Overwrite
-    public static void renderChunks(GuiGraphics drawContext, StoringChunkProgressListener tracker, int mapX, int mapY, int mapScale, int mapPadding) {
+    public static void renderChunks(GuiGraphics graphics, StoringChunkProgressListener tracker, int mapX, int mapY, int mapScale, int mapPadding) {
         if (STATUS_TO_COLOR_FAST == null) {
             STATUS_TO_COLOR_FAST = new Reference2IntOpenHashMap<>(COLORS.size());
             STATUS_TO_COLOR_FAST.put(null, NULL_STATUS_COLOR);
@@ -60,7 +60,7 @@ public static void renderChunks(GuiGraphics drawContext, StoringChunkProgressLis
 
         RenderSystem.setShader(GameRenderer::getPositionColorShader);
 
-        Matrix4f matrix = drawContext.pose().last().pose();
+        Matrix4f matrix = graphics.pose().last().pose();
 
         Tesselator tessellator = Tesselator.getInstance();
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/model/MultiPartBakedModelMixin.java
Patch:
@@ -15,7 +15,7 @@
 import net.minecraft.world.level.block.state.BlockState;
 
 @Mixin(MultiPartBakedModel.class)
-public class MultipartBakedModelMixin {
+public class MultiPartBakedModelMixin {
     @Unique
     private final Map<BlockState, BakedModel[]> stateCacheFast = new Reference2ReferenceOpenHashMap<>();
     @Unique

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/options/overlays/GuiMixin.java
Patch:
@@ -7,7 +7,7 @@
 import org.spongepowered.asm.mixin.injection.Redirect;
 
 @Mixin(Gui.class)
-public class InGameHudMixin {
+public class GuiMixin {
     @Redirect(method = "render", at = @At(value = "INVOKE", target = "Lnet/minecraft/client/Minecraft;useFancyGraphics()Z"))
     private boolean redirectFancyGraphicsVignette() {
         return SodiumClientMod.options().quality.enableVignette;

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/options/render_layers/ItemBlockRenderTypesMixin.java
Patch:
@@ -11,7 +11,7 @@
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
 
 @Mixin(ItemBlockRenderTypes.class)
-public class RenderLayersMixin {
+public class ItemBlockRenderTypesMixin {
     @Unique
     private static boolean leavesFancy;
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/options/weather/LevelRendererMixin.java
Patch:
@@ -8,7 +8,7 @@
 import org.spongepowered.asm.mixin.injection.Redirect;
 
 @Mixin(LevelRenderer.class)
-public class WorldRendererMixin {
+public class LevelRendererMixin {
     @Redirect(method = "renderSnowAndRain", at = @At(value = "INVOKE", target = "Lnet/minecraft/client/Minecraft;useFancyGraphics()Z"))
     private boolean redirectGetFancyWeather() {
         return SodiumClientMod.options().quality.weatherQuality.isFancy(Minecraft.getInstance().options.graphicsMode().get());

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/entity/CubeMixin.java
Patch:
@@ -14,7 +14,7 @@
 import java.util.Set;
 
 @Mixin(ModelPart.Cube.class)
-public class CuboidMixin implements ModelCuboidAccessor {
+public class CubeMixin implements ModelCuboidAccessor {
     @Unique
     private ModelCuboid sodium$cuboid;
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/gui/font/BakedGlyphMixin.java
Patch:
@@ -4,7 +4,6 @@
 import me.jellysquid.mods.sodium.client.render.vertex.VertexConsumerUtils;
 import net.caffeinemc.mods.sodium.api.vertex.format.common.GlyphVertex;
 import net.minecraft.client.gui.font.glyphs.BakedGlyph;
-import net.caffeinemc.mods.sodium.api.vertex.buffer.VertexBufferWriter;
 import net.caffeinemc.mods.sodium.api.util.ColorABGR;
 import net.caffeinemc.mods.sodium.api.math.MatrixHelper;
 import org.joml.Matrix4f;
@@ -15,7 +14,7 @@
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
 
 @Mixin(BakedGlyph.class)
-public class GlyphRendererMixin {
+public class BakedGlyphMixin {
     @Shadow
     @Final
     private float left;

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/gui/outlines/LevelRendererMixin.java
Patch:
@@ -13,14 +13,13 @@
 import org.joml.Matrix4f;
 import org.lwjgl.system.MemoryStack;
 import org.spongepowered.asm.mixin.Mixin;
-import org.spongepowered.asm.mixin.Overwrite;
 import org.spongepowered.asm.mixin.Unique;
 import org.spongepowered.asm.mixin.injection.At;
 import org.spongepowered.asm.mixin.injection.Inject;
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
 
 @Mixin(LevelRenderer.class)
-public class WorldRendererMixin {
+public class LevelRendererMixin {
     /**
      * @author JellySquid
      * @reason Use intrinsics where possible to speed up vertex writing

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/immediate/DirectionMixin.java
Patch:
@@ -1,7 +1,7 @@
 package me.jellysquid.mods.sodium.mixin.features.render.immediate;
 
 import com.mojang.blaze3d.vertex.SheetedDecalTextureGenerator;
-import me.jellysquid.mods.sodium.mixin.core.render.immediate.consumer.OverlayVertexConsumerMixin;
+import me.jellysquid.mods.sodium.mixin.core.render.immediate.consumer.SheetedDecalTextureGeneratorMixin;
 import net.minecraft.client.renderer.block.model.BlockModel;
 import net.minecraft.client.renderer.block.model.FaceBakery;
 import net.minecraft.core.Direction;
@@ -12,7 +12,7 @@
 @Mixin(Direction.class)
 public class DirectionMixin {
     /**
-     * Benchmarking looking at a ton of glinted/lodestone compasses: time spent in {@link OverlayVertexConsumerMixin#writeVerticesSlow}
+     * Benchmarking looking at a ton of glinted/lodestone compasses: time spent in {@link SheetedDecalTextureGeneratorMixin#writeVerticesSlow}
      * <ul>
      *     <li>Before optimization: 10.4% (n=2979)</li>
      *     <li>After optimization: 1.5% (n=2409)</li>

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/immediate/buffer_builder/sorting/VertexSortingMixin.java
Patch:
@@ -7,7 +7,7 @@
 import org.spongepowered.asm.mixin.Overwrite;
 
 @Mixin(VertexSorting.class)
-public interface VertexSorterMixin {
+public interface VertexSortingMixin {
     /**
      * @author JellySquid
      * @reason Optimize vertex sorting

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/immediate/matrix_stack/PoseStackMixin.java
Patch:
@@ -4,12 +4,12 @@
 import org.joml.Matrix4f;
 import org.spongepowered.asm.mixin.*;
 import com.mojang.blaze3d.vertex.PoseStack;
-import com.mojang.blaze3d.vertex.PoseStack.Pose;
+
 import java.util.ArrayDeque;
 import java.util.Deque;
 
 @Mixin(PoseStack.class)
-public abstract class MatrixStackMixin {
+public abstract class PoseStackMixin {
     @Shadow
     @Final
     private Deque<PoseStack.Pose> poseStack;

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/model/ItemBlockRenderTypesMixin.java
Patch:
@@ -13,7 +13,7 @@
 import net.minecraft.world.level.material.Fluid;
 
 @Mixin(ItemBlockRenderTypes.class)
-public class RenderLayersMixin {
+public class ItemBlockRenderTypesMixin {
     @Mutable
     @Shadow
     @Final

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/model/block/ModelBlockRendererMixin.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.List;
 
 @Mixin(ModelBlockRenderer.class)
-public class BlockModelRendererMixin {
+public class ModelBlockRendererMixin {
     @Unique
     private final RandomSource random = new SingleThreadedRandomSource(42L);
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/model/item/ItemRendererMixin.java
Patch:
@@ -4,7 +4,7 @@
 import me.jellysquid.mods.sodium.client.render.immediate.model.BakedModelEncoder;
 import me.jellysquid.mods.sodium.client.render.texture.SpriteUtil;
 import me.jellysquid.mods.sodium.client.render.vertex.VertexConsumerUtils;
-import me.jellysquid.mods.sodium.client.model.color.interop.ItemColorsExtended;
+import me.jellysquid.mods.sodium.client.model.color.interop.ItemColorsExtension;
 import me.jellysquid.mods.sodium.client.util.DirectionUtil;
 import net.caffeinemc.mods.sodium.api.util.ColorARGB;
 import net.caffeinemc.mods.sodium.api.vertex.buffer.VertexBufferWriter;
@@ -54,7 +54,7 @@ private void renderModelFast(BakedModel model, ItemStack itemStack, int light, i
         ItemColor colorProvider = null;
 
         if (!itemStack.isEmpty()) {
-            colorProvider = ((ItemColorsExtended) this.itemColors).sodium$getColorProvider(itemStack);
+            colorProvider = ((ItemColorsExtension) this.itemColors).sodium$getColorProvider(itemStack);
         }
 
         for (Direction direction : DirectionUtil.ALL_DIRECTIONS) {

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/particle/SingleQuadParticleMixin.java
Patch:
@@ -18,7 +18,7 @@
 import org.spongepowered.asm.mixin.Unique;
 
 @Mixin(SingleQuadParticle.class)
-public abstract class BillboardParticleMixin extends Particle {
+public abstract class SingleQuadParticleMixin extends Particle {
     @Shadow
     public abstract float getQuadSize(float tickDelta);
 
@@ -34,8 +34,8 @@ public abstract class BillboardParticleMixin extends Particle {
     @Shadow
     protected abstract float getV1();
 
-    protected BillboardParticleMixin(ClientLevel world, double x, double y, double z) {
-        super(world, x, y, z);
+    protected SingleQuadParticleMixin(ClientLevel level, double x, double y, double z) {
+        super(level, x, y, z);
     }
 
     /**

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/world/clouds/LevelRendererMixin.java
Patch:
@@ -14,7 +14,7 @@
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
 
 @Mixin(LevelRenderer.class)
-public class WorldRendererMixin {
+public class LevelRendererMixin {
     @Shadow
     private @Nullable ClientLevel level;
     @Shadow

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/world/sky/ClientLevelMixin.java
Patch:
@@ -12,11 +12,11 @@
 import java.util.function.Function;
 
 @Mixin(ClientLevel.class)
-public class ClientWorldMixin {
+public class ClientLevelMixin {
     @Redirect(method = "getSkyColor", at = @At(value = "INVOKE", target = "Lnet/minecraft/util/CubicSampler;gaussianSampleVec3(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/util/CubicSampler$Vec3Fetcher;)Lnet/minecraft/world/phys/Vec3;"))
     private Vec3 redirectSampleColor(Vec3 pos, CubicSampler.Vec3Fetcher rgbFetcher) {
-        Level world = (Level) (Object) this;
+        Level level = (Level) (Object) this;
 
-        return FastCubicSampler.sampleColor(pos, (x, y, z) -> world.getNoiseBiome(x, y, z).value().getSkyColor(), Function.identity());
+        return FastCubicSampler.sampleColor(pos, (x, y, z) -> level.getNoiseBiome(x, y, z).value().getSkyColor(), Function.identity());
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/world/sky/LevelRendererMixin.java
Patch:
@@ -12,7 +12,7 @@
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
 
 @Mixin(LevelRenderer.class)
-public class WorldRendererMixin {
+public class LevelRendererMixin {
     /**
      * <p>Prevents the sky layer from rendering when the fog distance is reduced
      * from the default. This helps prevent situations where the sky can be seen
@@ -31,7 +31,7 @@ public class WorldRendererMixin {
      * ways the fog can be reduced in {@link FogRenderer#setupFog(Camera, FogRenderer.FogMode, float, boolean, float)} ()}.</p>
      */
     @Inject(method = "renderSky(Lcom/mojang/blaze3d/vertex/PoseStack;Lorg/joml/Matrix4f;FLnet/minecraft/client/Camera;ZLjava/lang/Runnable;)V", at = @At("HEAD"), cancellable = true)
-    private void preRenderSky(PoseStack matrices, Matrix4f projectionMatrix, float tickDelta, Camera camera, boolean bl, Runnable runnable, CallbackInfo ci) {
+    private void preRenderSky(PoseStack poseStack, Matrix4f projectionMatrix, float tickDelta, Camera camera, boolean bl, Runnable runnable, CallbackInfo ci) {
         // Cancels sky rendering when the camera is submersed underwater.
         // This prevents the sky from being visible through chunks culled by Sodium's fog occlusion.
         // Fixes https://bugs.mojang.com/browse/MC-152504.

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/shader/uniform/ShaderInstanceMixin.java
Patch:
@@ -23,7 +23,7 @@
  * these uniform locations can be trivially cached.
  */
 @Mixin(ShaderInstance.class)
-public class ShaderProgramMixin {
+public class ShaderInstanceMixin {
     @Shadow
     @Final
     private List<String> samplerNames;

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/textures/animations/tracking/AnimatedTextureAccessor.java
Patch:
@@ -7,7 +7,7 @@
 import net.minecraft.client.renderer.texture.SpriteContents;
 
 @Mixin(SpriteContents.AnimatedTexture.class)
-public interface SpriteContentsAnimationAccessor {
+public interface AnimatedTextureAccessor {
     @Accessor("frames")
     List<SpriteContents.FrameInfo> getFrames();
 }

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/textures/animations/tracking/GuiGraphicsMixin.java
Patch:
@@ -9,7 +9,7 @@
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
 
 @Mixin(GuiGraphics.class)
-public class DrawContextMixin {
+public class GuiGraphicsMixin {
     @Inject(method = "blit(IIIIILnet/minecraft/client/renderer/texture/TextureAtlasSprite;)V", at = @At("HEAD"))
     private void preDrawSprite(int x, int y, int z,
                                int width, int height,

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/textures/animations/tracking/ModelBlockRendererMixin.java
Patch:
@@ -14,14 +14,14 @@
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
 
 @Mixin(ModelBlockRenderer.class)
-public class BlockModelRendererMixin {
+public class ModelBlockRendererMixin {
     /**
      * @reason Ensure sprites rendered through renderSmooth/renderFlat in immediate-mode are marked as active.
      * This doesn't affect vanilla to my knowledge, but mods can trigger it.
      * @author embeddedt
      */
     @Inject(method = "putQuadData", at = @At("HEAD"))
-    private void preRenderQuad(BlockAndTintGetter world, BlockState state, BlockPos pos, VertexConsumer vertexConsumer, PoseStack.Pose matrixEntry, BakedQuad quad, float brightness0, float brightness1, float brightness2, float brightness3, int light0, int light1, int light2, int light3, int overlay, CallbackInfo ci) {
+    private void preRenderQuad(BlockAndTintGetter level, BlockState state, BlockPos pos, VertexConsumer vertexConsumer, PoseStack.Pose matrices, BakedQuad quad, float brightness0, float brightness1, float brightness2, float brightness3, int light0, int light1, int light2, int light3, int overlay, CallbackInfo ci) {
         SpriteUtil.markSpriteActive(quad.getSprite());
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/textures/animations/tracking/SpriteContentsFrameInfoAccessor.java
Patch:
@@ -5,7 +5,7 @@
 import org.spongepowered.asm.mixin.gen.Accessor;
 
 @Mixin(SpriteContents.FrameInfo.class)
-public interface SpriteContentsAnimationFrameAccessor {
+public interface SpriteContentsFrameInfoAccessor {
     @Accessor("time")
     int getTime();
 }

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/textures/animations/tracking/SpriteContentsMixin.java
Patch:
@@ -1,6 +1,6 @@
 package me.jellysquid.mods.sodium.mixin.features.textures.animations.tracking;
 
-import me.jellysquid.mods.sodium.client.render.texture.SpriteContentsExtended;
+import me.jellysquid.mods.sodium.client.render.texture.SpriteContentsExtension;
 import net.minecraft.client.renderer.texture.SpriteContents;
 import org.jetbrains.annotations.Nullable;
 import org.spongepowered.asm.mixin.Final;
@@ -9,7 +9,7 @@
 import org.spongepowered.asm.mixin.Unique;
 
 @Mixin(SpriteContents.class)
-public abstract class SpriteContentsMixin implements SpriteContentsExtended {
+public abstract class SpriteContentsMixin implements SpriteContentsExtension {
     @Shadow
     @Final
     @Nullable

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/textures/animations/tracking/TextureAtlasMixin.java
Patch:
@@ -9,7 +9,7 @@
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;
 
 @Mixin(TextureAtlas.class)
-public class SpriteAtlasTextureMixin {
+public class TextureAtlasMixin {
     @Inject(method = "getSprite", at = @At("RETURN"))
     private void preReturnSprite(CallbackInfoReturnable<TextureAtlasSprite> cir) {
         TextureAtlasSprite sprite = cir.getReturnValue();

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/textures/animations/tracking/TextureSheetParticleMixin.java
Patch:
@@ -15,15 +15,15 @@
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
 
 @Mixin(TextureSheetParticle.class)
-public abstract class SpriteBillboardParticleMixin extends SingleQuadParticle {
+public abstract class TextureSheetParticleMixin extends SingleQuadParticle {
     @Shadow
     protected TextureAtlasSprite sprite;
 
     @Unique
     private boolean shouldTickSprite;
 
-    protected SpriteBillboardParticleMixin(ClientLevel world, double x, double y, double z) {
-        super(world, x, y, z);
+    protected TextureSheetParticleMixin(ClientLevel level, double x, double y, double z) {
+        super(level, x, y, z);
     }
 
     @Inject(method = "setSprite(Lnet/minecraft/client/renderer/texture/TextureAtlasSprite;)V", at = @At("RETURN"))

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/textures/animations/upload/SpriteContentsAnimatedTextureAccessor.java
Patch:
@@ -7,7 +7,7 @@
 import net.minecraft.client.renderer.texture.SpriteContents;
 
 @Mixin(SpriteContents.AnimatedTexture.class)
-public interface SpriteContentsAnimationAccessor {
+public interface SpriteContentsAnimatedTextureAccessor {
     @Accessor
     List<SpriteContents.FrameInfo> getFrames();
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/textures/animations/upload/SpriteContentsFrameInfoAccessor.java
Patch:
@@ -5,7 +5,7 @@
 import org.spongepowered.asm.mixin.gen.Accessor;
 
 @Mixin(SpriteContents.FrameInfo.class)
-public interface SpriteContentsAnimationFrameAccessor {
+public interface SpriteContentsFrameInfoAccessor {
     @Accessor
     int getIndex();
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/textures/animations/upload/SpriteContentsTickerAccessor.java
Patch:
@@ -5,7 +5,7 @@
 import org.spongepowered.asm.mixin.gen.Accessor;
 
 @Mixin(SpriteContents.Ticker.class)
-public interface SpriteContentsAnimatorImplAccessor {
+public interface SpriteContentsTickerAccessor {
     @Accessor
     SpriteContents.AnimatedTexture getAnimationInfo();
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/textures/mipmaps/MipmapGeneratorMixin.java
Patch:
@@ -27,7 +27,7 @@
  * This Mixin is ported from Iris at <a href="https://github.com/IrisShaders/Iris/blob/41095ac23ea0add664afd1b85c414d1f1ed94066/src/main/java/net/coderbot/iris/mixin/bettermipmaps/MixinMipmapGenerator.java">MixinMipmapGenerator</a>.
  */
 @Mixin(MipmapGenerator.class)
-public class MipmapHelperMixin {
+public class MipmapGeneratorMixin {
     /**
      * @author coderbot
      * @reason replace the vanilla blending function with our improved function

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/world/biome/BiomeMixin.java
Patch:
@@ -1,11 +1,9 @@
 package me.jellysquid.mods.sodium.mixin.features.world.biome;
 
-import java.util.Optional;
 import me.jellysquid.mods.sodium.client.world.biome.BiomeColorMaps;
 import net.minecraft.util.Mth;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.biome.BiomeSpecialEffects;
-import net.minecraft.world.level.biome.BiomeSpecialEffects.GrassColorModifier;
 import org.spongepowered.asm.mixin.*;
 import org.spongepowered.asm.mixin.injection.At;
 import org.spongepowered.asm.mixin.injection.Inject;

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/world/storage/ClientChunkCacheMixin.java
Patch:
@@ -11,7 +11,7 @@
 import net.minecraft.world.level.chunk.LevelChunk;
 
 @Mixin(targets = "net/minecraft/client/multiplayer/ClientChunkCache$Storage")
-public class ClientChunkMapMixin {
+public class ClientChunkCacheMixin {
     @Mutable
     @Shadow
     @Final
@@ -32,7 +32,7 @@ public class ClientChunkMapMixin {
 
     @Inject(method = "<init>", at = @At("RETURN"))
     private void reinit(ClientChunkCache outer, int loadDistance, CallbackInfo ci) {
-        // This re-initialization is a bit expensive on memory, but it only happens when either the world is
+        // This re-initialization is a bit expensive on memory, but it only happens when either the level is
         // switched or the render distance is changed;
         this.chunkRadius = loadDistance;
 

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/control/CyclingControl.java
Patch:
@@ -5,6 +5,7 @@
 import me.jellysquid.mods.sodium.client.util.Dim2i;
 import net.minecraft.client.gui.DrawContext;
 import net.minecraft.client.gui.screen.Screen;
+import net.minecraft.client.input.KeyCodes;
 import net.minecraft.client.util.InputUtil;
 import net.minecraft.text.Text;
 import org.apache.commons.lang3.Validate;
@@ -112,7 +113,7 @@ public boolean mouseClicked(double mouseX, double mouseY, int button) {
         public boolean keyPressed(int keyCode, int scanCode, int modifiers) {
             if (!isFocused()) return false;
 
-            if (keyCode == InputUtil.GLFW_KEY_ENTER) {
+            if (KeyCodes.isToggle(keyCode)) {
                 cycleControl(Screen.hasShiftDown());
                 return true;
             }

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/control/TickBoxControl.java
Patch:
@@ -3,6 +3,7 @@
 import me.jellysquid.mods.sodium.client.gui.options.Option;
 import me.jellysquid.mods.sodium.client.util.Dim2i;
 import net.minecraft.client.gui.DrawContext;
+import net.minecraft.client.input.KeyCodes;
 import net.minecraft.client.util.InputUtil;
 import net.minecraft.client.util.math.Rect2i;
 
@@ -80,7 +81,7 @@ public boolean mouseClicked(double mouseX, double mouseY, int button) {
         public boolean keyPressed(int keyCode, int scanCode, int modifiers) {
             if (!isFocused()) return false;
 
-            if (keyCode == InputUtil.GLFW_KEY_ENTER) {
+            if (KeyCodes.isToggle(keyCode)) {
                 toggleControl();
                 this.playClickSound();
 

File: src/main/java/me/jellysquid/mods/sodium/client/gui/widgets/FlatButtonWidget.java
Patch:
@@ -6,6 +6,7 @@
 import net.minecraft.client.gui.ScreenRect;
 import net.minecraft.client.gui.navigation.GuiNavigation;
 import net.minecraft.client.gui.navigation.GuiNavigationPath;
+import net.minecraft.client.input.KeyCodes;
 import net.minecraft.client.util.InputUtil;
 import net.minecraft.text.Text;
 import org.jetbrains.annotations.NotNull;
@@ -85,7 +86,7 @@ public boolean keyPressed(int keyCode, int scanCode, int modifiers) {
         if (!this.isFocused())
             return false;
 
-        if (keyCode == InputUtil.GLFW_KEY_ENTER) {
+        if (KeyCodes.isToggle(keyCode)) {
             doAction();
             return true;
         }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/occlusion/OcclusionCuller.java
Patch:
@@ -293,7 +293,7 @@ private void initOutsideWorldHeight(WriteQueue<RenderSection> queue,
     private void tryVisitNode(WriteQueue<RenderSection> queue, int x, int y, int z, int direction, int frame, Viewport viewport) {
         RenderSection section = this.getRenderSection(x, y, z);
 
-        if (section == null || isWithinFrustum(viewport, section)) {
+        if (section == null || !isWithinFrustum(viewport, section)) {
             return;
         }
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/occlusion/OcclusionCuller.java
Patch:
@@ -164,7 +164,7 @@ private static boolean isWithinRenderDistance(CameraTransform camera, RenderSect
 
         // vanilla's "cylindrical fog" algorithm
         // max(length(distance.xz), abs(distance.y))
-        return (((dx * dx) + (dz * dz)) < (maxDistance * maxDistance)) || (Math.abs(dy) < maxDistance);
+        return (((dx * dx) + (dz * dz)) < (maxDistance * maxDistance)) && (Math.abs(dy) < maxDistance);
     }
 
     @SuppressWarnings("ManualMinMaxCalculation") // we know what we are doing.

File: src/main/java/me/jellysquid/mods/sodium/mixin/MixinConfig.java
Patch:
@@ -27,7 +27,8 @@ private MixinConfig() {
         // Defines the default rules which can be configured by the user or other mods.
         // You must manually add a rule for any new mixins not covered by an existing package rule.
         this.addMixinRule("core", true); // TODO: Don't actually allow the user to disable this
-        this.addMixinRule("core.checks", false);
+
+        this.addMixinRule("debug.checks", false);
 
         this.addMixinRule("features", true);
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/debug/checks/AbstractTextureMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.core.checks;
+package me.jellysquid.mods.sodium.mixin.debug.checks;
 
 import me.jellysquid.mods.sodium.client.render.util.RenderAsserts;
 import net.minecraft.client.texture.AbstractTexture;

File: src/main/java/me/jellysquid/mods/sodium/mixin/debug/checks/AsyncTextureMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.core.checks;
+package me.jellysquid.mods.sodium.mixin.debug.checks;
 
 import me.jellysquid.mods.sodium.client.render.util.DeferredRenderTask;
 import net.minecraft.client.texture.AsyncTexture;

File: src/main/java/me/jellysquid/mods/sodium/mixin/debug/checks/BufferRendererMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.core.checks;
+package me.jellysquid.mods.sodium.mixin.debug.checks;
 
 import me.jellysquid.mods.sodium.client.render.util.RenderAsserts;
 import net.minecraft.client.render.BufferRenderer;

File: src/main/java/me/jellysquid/mods/sodium/mixin/debug/checks/FramebufferMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.core.checks;
+package me.jellysquid.mods.sodium.mixin.debug.checks;
 
 import me.jellysquid.mods.sodium.client.render.util.RenderAsserts;
 import net.minecraft.client.gl.Framebuffer;

File: src/main/java/me/jellysquid/mods/sodium/mixin/debug/checks/GlStateManagerMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.core.checks;
+package me.jellysquid.mods.sodium.mixin.debug.checks;
 
 import com.mojang.blaze3d.platform.GlStateManager;
 import me.jellysquid.mods.sodium.client.render.util.RenderAsserts;

File: src/main/java/me/jellysquid/mods/sodium/mixin/debug/checks/NativeImageBackedTextureMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.core.checks;
+package me.jellysquid.mods.sodium.mixin.debug.checks;
 
 import me.jellysquid.mods.sodium.client.render.util.RenderAsserts;
 import net.minecraft.client.texture.NativeImageBackedTexture;

File: src/main/java/me/jellysquid/mods/sodium/mixin/debug/checks/NativeImageMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.core.checks;
+package me.jellysquid.mods.sodium.mixin.debug.checks;
 
 import me.jellysquid.mods.sodium.client.render.util.RenderAsserts;
 import net.minecraft.client.texture.NativeImage;

File: src/main/java/me/jellysquid/mods/sodium/mixin/debug/checks/PlayerSkinTextureMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.core.checks;
+package me.jellysquid.mods.sodium.mixin.debug.checks;
 
 import net.minecraft.client.MinecraftClient;
 import net.minecraft.client.texture.NativeImage;

File: src/main/java/me/jellysquid/mods/sodium/mixin/debug/checks/RenderSystemMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.core.checks;
+package me.jellysquid.mods.sodium.mixin.debug.checks;
 
 import com.mojang.blaze3d.systems.RenderCall;
 import com.mojang.blaze3d.systems.RenderSystem;

File: src/main/java/me/jellysquid/mods/sodium/mixin/debug/checks/SpriteAtlasTextureMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.core.checks;
+package me.jellysquid.mods.sodium.mixin.debug.checks;
 
 import me.jellysquid.mods.sodium.client.render.util.RenderAsserts;
 import net.minecraft.client.texture.SpriteAtlasTexture;

File: src/main/java/me/jellysquid/mods/sodium/mixin/debug/checks/SpriteContentsAnimatorImplMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.core.checks;
+package me.jellysquid.mods.sodium.mixin.debug.checks;
 
 import me.jellysquid.mods.sodium.client.render.util.RenderAsserts;
 import net.minecraft.client.texture.SpriteContents;

File: src/main/java/me/jellysquid/mods/sodium/mixin/debug/checks/TextureManagerMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.core.checks;
+package me.jellysquid.mods.sodium.mixin.debug.checks;
 
 import me.jellysquid.mods.sodium.client.render.util.DeferredRenderTask;
 import me.jellysquid.mods.sodium.client.render.util.RenderAsserts;

File: src/main/java/me/jellysquid/mods/sodium/mixin/debug/checks/VertexBufferMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.core.checks;
+package me.jellysquid.mods.sodium.mixin.debug.checks;
 
 import me.jellysquid.mods.sodium.client.render.util.RenderAsserts;
 import net.minecraft.client.gl.VertexBuffer;

File: src/main/java/me/jellysquid/mods/sodium/mixin/debug/checks/VertexFormatMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.core.checks;
+package me.jellysquid.mods.sodium.mixin.debug.checks;
 
 import me.jellysquid.mods.sodium.client.render.util.RenderAsserts;
 import net.minecraft.client.render.VertexFormat;

File: src/main/java/me/jellysquid/mods/sodium/mixin/debug/checks/WindowFramebufferMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.core.checks;
+package me.jellysquid.mods.sodium.mixin.debug.checks;
 
 import me.jellysquid.mods.sodium.client.render.util.RenderAsserts;
 import net.minecraft.client.gl.WindowFramebuffer;

File: src/main/java/me/jellysquid/mods/sodium/mixin/MixinConfig.java
Patch:
@@ -27,6 +27,7 @@ private MixinConfig() {
         // Defines the default rules which can be configured by the user or other mods.
         // You must manually add a rule for any new mixins not covered by an existing package rule.
         this.addMixinRule("core", true); // TODO: Don't actually allow the user to disable this
+        this.addMixinRule("core.checks", false);
 
         this.addMixinRule("features", true);
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/tasks/ChunkBuilderMeshingTask.java
Patch:
@@ -85,7 +85,7 @@ public ChunkBuildOutput execute(ChunkBuildContext buildContext, CancellationToke
                     for (int x = minX; x < maxX; x++) {
                         BlockState blockState = slice.getBlockState(x, y, z);
 
-                        if (blockState.isAir()) {
+                        if (blockState.isAir() && !blockState.hasBlockEntity()) {
                             continue;
                         }
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/immediate/model/EntityRenderer.java
Patch:
@@ -176,8 +176,8 @@ private static void prepareVertices(MatrixStack.Entry matrices, ModelCuboid cubo
         buildVertexTexCoord(VERTEX_TEXTURES[FACE_POS_Y], cuboid.u2, cuboid.v1, cuboid.u3, cuboid.v0);
         buildVertexTexCoord(VERTEX_TEXTURES[FACE_NEG_Z], cuboid.u1, cuboid.v1, cuboid.u2, cuboid.v2);
         buildVertexTexCoord(VERTEX_TEXTURES[FACE_POS_Z], cuboid.u4, cuboid.v1, cuboid.u5, cuboid.v2);
-        buildVertexTexCoord(VERTEX_TEXTURES[FACE_POS_X], cuboid.u2, cuboid.v1, cuboid.u4, cuboid.v2);
-        buildVertexTexCoord(VERTEX_TEXTURES[FACE_NEG_X], cuboid.u0, cuboid.v1, cuboid.u1, cuboid.v2);
+        buildVertexTexCoord(VERTEX_TEXTURES[FACE_NEG_X], cuboid.u2, cuboid.v1, cuboid.u4, cuboid.v2);
+        buildVertexTexCoord(VERTEX_TEXTURES[FACE_POS_X], cuboid.u0, cuboid.v1, cuboid.u1, cuboid.v2);
     }
 
     private static void prepareNormals(MatrixStack.Entry matrices) {

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/entity/ModelPartMixin.java
Patch:
@@ -106,7 +106,7 @@ public void rotate(MatrixStack matrixStack) {
         }
 
         if (this.pitch != 0.0F || this.yaw != 0.0F || this.roll != 0.0F) {
-            MatrixHelper.rotateZYX(matrixStack.peek(), this.pitch, this.yaw, this.roll);
+            MatrixHelper.rotateZYX(matrixStack.peek(), this.roll, this.yaw, this.pitch);
         }
 
         if (this.xScale != 1.0F || this.yScale != 1.0F || this.zScale != 1.0F) {

File: src/api/java/net/caffeinemc/mods/sodium/api/util/ColorARGB.java
Patch:
@@ -80,7 +80,7 @@ public static int toABGR(int color, int alpha) {
     }
 
     public static int toABGR(int color) {
-        return Integer.reverseBytes(color << 8);
+        return Integer.reverseBytes(Integer.rotateLeft(color, 8));
     }
 
     /**

File: src/main/java/me/jellysquid/mods/sodium/client/model/color/ColorProviderRegistry.java
Patch:
@@ -30,7 +30,7 @@ public ColorProviderRegistry(BlockColors blockColors) {
     // TODO: Allow mods to install their own color resolvers here
     private void installOverrides() {
         this.registerBlocks(DefaultColorProviders.GrassColorProvider.BLOCKS,
-                Blocks.GRASS_BLOCK, Blocks.FERN, Blocks.GRASS, Blocks.POTTED_FERN,
+                Blocks.GRASS_BLOCK, Blocks.FERN, Blocks.SHORT_GRASS, Blocks.POTTED_FERN,
                 Blocks.PINK_PETALS, Blocks.SUGAR_CANE, Blocks.LARGE_FERN, Blocks.TALL_GRASS);
 
         this.registerBlocks(DefaultColorProviders.FoliageColorProvider.BLOCKS,

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/gui/WorldLoadingStateMixin.java
Patch:
@@ -1,14 +1,14 @@
 package me.jellysquid.mods.sodium.mixin.core.gui;
 
-import net.minecraft.client.gui.screen.DownloadingTerrainScreen;
 import net.minecraft.client.network.ClientPlayerEntity;
+import net.minecraft.client.network.WorldLoadingState;
 import net.minecraft.util.math.BlockPos;
 import org.spongepowered.asm.mixin.Mixin;
 import org.spongepowered.asm.mixin.injection.At;
 import org.spongepowered.asm.mixin.injection.Redirect;
 
-@Mixin(DownloadingTerrainScreen.class)
-public class DownloadingTerrainScreenMixin {
+@Mixin(WorldLoadingState.class)
+public class WorldLoadingStateMixin {
     @Redirect(method = "tick", at = @At(value = "INVOKE", target = "Lnet/minecraft/client/network/ClientPlayerEntity;getBlockPos()Lnet/minecraft/util/math/BlockPos;"))
     private BlockPos redirect$getPlayerBlockPosition(ClientPlayerEntity instance) {
         // Ensure the "eye" position (which the chunk rendering code is actually concerned about) is used instead of

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/tasks/ChunkBuilderMeshingTask.java
Patch:
@@ -85,7 +85,7 @@ public ChunkBuildOutput execute(ChunkBuildContext buildContext, CancellationToke
                     for (int x = minX; x < maxX; x++) {
                         BlockState blockState = slice.getBlockState(x, y, z);
 
-                        if (blockState.isAir()) {
+                        if (blockState.isAir() && !blockState.hasBlockEntity()) {
                             continue;
                         }
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/MinecraftClientMixin.java
Patch:
@@ -87,16 +87,16 @@ private void postRender(boolean tick, CallbackInfo ci) {
      * Check for problematic core shader resource packs after the initial game launch.
      */
     @Inject(method = "onInitFinished", at = @At("TAIL"))
-    private void postInit(RealmsClient realms, ResourceReload reload, RunArgs.QuickPlay quickPlay, CallbackInfo ci) {
-        InGameChecks.checkIfCoreShaderLoaded(resourceManager);
+    private void postInit(CallbackInfoReturnable<Runnable> cir) {
+        InGameChecks.checkIfCoreShaderLoaded(this.resourceManager);
     }
 
     /**
      * Check for problematic core shader resource packs after every resource reload.
      */
     @Inject(method = "reloadResources()Ljava/util/concurrent/CompletableFuture;", at = @At("TAIL"))
     private void postResourceReload(CallbackInfoReturnable<CompletableFuture<Void>> cir) {
-        InGameChecks.checkIfCoreShaderLoaded(resourceManager);
+        InGameChecks.checkIfCoreShaderLoaded(this.resourceManager);
     }
 
 }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/lists/ChunkRenderList.java
Patch:
@@ -101,4 +101,7 @@ public RenderRegion getRegion() {
         return this.region;
     }
 
+    public int size() {
+        return this.size;
+    }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/lists/VisibleChunkCollector.java
Patch:
@@ -24,9 +24,7 @@ public VisibleChunkCollector(int frame) {
 
     @Override
     public void accept(RenderSection section) {
-        if (section.getFlags() != 0) {
-            this.sortedRenderLists.add(section);
-        }
+        this.sortedRenderLists.add(section);
 
         this.addToRebuildLists(section);
     }

File: src/main/java/me/jellysquid/mods/sodium/client/util/workarounds/PreLaunchChecks.java
Patch:
@@ -52,7 +52,7 @@ private static boolean isBrokenIntelGen7GraphicsDriver() {
             try {
                 var version = WindowsDriverStoreVersion.parse(adapter.version());
 
-                if (version.equals(new WindowsDriverStoreVersion(10, 18, 10, 4538))) {
+                if (version.driverModel() == 10 && version.featureLevel() == 18 && version.major() == 10) {
                     return true;
                 }
             } catch (WindowsDriverStoreVersion.ParseException ignored) { }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/map/ChunkTracker.java
Patch:
@@ -80,11 +80,11 @@ private void updateMerged(int x, int z) {
         }
 
         if (flags == ChunkStatus.FLAG_ALL) {
-            if (this.chunkReady.add(key)) {
+            if (this.chunkReady.add(key) && !this.unloadQueue.remove(key)) {
                 this.loadQueue.add(key);
             }
         } else {
-            if (this.chunkReady.remove(key)) {
+            if (this.chunkReady.remove(key) && !this.loadQueue.remove(key)) {
                 this.unloadQueue.add(key);
             }
         }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/RenderSection.java
Patch:
@@ -154,7 +154,7 @@ private void clearRenderState() {
     /**
      * Returns the chunk section position which this render refers to in the world.
      */
-    public ChunkSectionPos getChunkPos() {
+    public ChunkSectionPos getPosition() {
         return ChunkSectionPos.from(this.chunkX, this.chunkY, this.chunkZ);
     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/executor/ChunkJob.java
Patch:
@@ -5,4 +5,6 @@
 
 public interface ChunkJob extends CancellationToken {
     void execute(ChunkBuildContext context);
+
+    boolean isStarted();
 }

File: src/main/java/me/jellysquid/mods/sodium/client/util/MathUtil.java
Patch:
@@ -8,7 +8,7 @@ public static boolean isPowerOfTwo(int n) {
         return ((n & (n - 1)) == 0);
     }
 
-    public static long toMib(long x) {
-        return x / 1024L / 1024L;
+    public static long toMib(long bytes) {
+        return bytes / (1024L * 1024L); // 1 MiB = 1048576 (2^20) bytes
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/occlusion/OcclusionCuller.java
Patch:
@@ -120,8 +120,9 @@ private static double getClosestVertexDistanceToCamera(Vec3d camera, ChunkSectio
         double distanceY = camera.y - (section.getCenterY() + offsetY);
         double distanceZ = camera.z - (section.getCenterZ() + offsetZ);
 
-        // squared distance: (x^2)+(y^2)+(z^2)
-        return (distanceX * distanceX) + (distanceY * distanceY) + (distanceZ * distanceZ);
+        // vanilla's "cylindrical fog" algorithm
+        // max(length(distance.xz), abs(distance.y))
+        return Math.max((distanceX * distanceX) + (distanceZ * distanceZ), distanceY * distanceY);
     }
 
     private void init(ArrayDeque<RenderSection> queue,

File: src/main/java/me/jellysquid/mods/sodium/client/SodiumClientMod.java
Patch:
@@ -2,7 +2,6 @@
 
 import me.jellysquid.mods.sodium.client.gui.SodiumGameOptions;
 import me.jellysquid.mods.sodium.client.util.FlawlessFrames;
-import me.jellysquid.mods.sodium.client.util.workarounds.PostLaunchChecks;
 import net.fabricmc.api.ClientModInitializer;
 import net.fabricmc.loader.api.FabricLoader;
 import net.fabricmc.loader.api.ModContainer;
@@ -31,8 +30,6 @@ public void onInitializeClient() {
         CONFIG = loadConfig();
 
         FlawlessFrames.onClientInitialization();
-
-        PostLaunchChecks.checkDrivers();
     }
 
     public static SodiumGameOptions options() {

File: src/main/java/me/jellysquid/mods/sodium/client/world/biome/BiomeSlice.java
Patch:
@@ -54,6 +54,7 @@ private void copyBiomeData(World world, ChunkRenderContext context) {
 
     private void copySectionBiomeData(ChunkRenderContext context, int sectionX, int sectionY, int sectionZ, Biome defaultBiome) {
         var section = context.getSections()[WorldSlice.getLocalSectionIndex(sectionX, sectionY, sectionZ)];
+        var biomeData = section.getBiomeData();
 
         for (int x = 0; x < 4; x++) {
             for (int y = 0; y < 4; y++) {
@@ -64,10 +65,10 @@ private void copySectionBiomeData(ChunkRenderContext context, int sectionX, int
 
                     var idx = dataArrayIndex(biomeX, biomeY, biomeZ);
 
-                    if (section == null) {
+                    if (biomeData == null) {
                         this.biomes[idx] = defaultBiome;
                     } else {
-                        this.biomes[idx] = section.getBiome(x, y, z).value();
+                        this.biomes[idx] = biomeData.get(x, y, z).value();
                     }
                 }
             }

File: src/main/java/me/jellysquid/mods/sodium/client/world/cloned/ChunkRenderContext.java
Patch:
@@ -6,16 +6,16 @@
 
 public class ChunkRenderContext {
     private final ChunkSectionPos origin;
-    private final @Nullable ClonedChunkSection[] sections;
+    private final ClonedChunkSection[] sections;
     private final BlockBox volume;
 
-    public ChunkRenderContext(ChunkSectionPos origin, @Nullable ClonedChunkSection[] sections, BlockBox volume) {
+    public ChunkRenderContext(ChunkSectionPos origin, ClonedChunkSection[] sections, BlockBox volume) {
         this.origin = origin;
         this.sections = sections;
         this.volume = volume;
     }
 
-    public @Nullable ClonedChunkSection[] getSections() {
+    public ClonedChunkSection[] getSections() {
         return this.sections;
     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/RenderSectionManager.java
Patch:
@@ -419,10 +419,10 @@ private void processChunkBuildResults(ArrayList<ChunkBuildOutput> results) {
     private void updateSectionInfo(RenderSection render, BuiltSectionInfo info) {
         render.setInfo(info);
 
-        if (info != null && ArrayUtils.isEmpty(info.globalBlockEntities)) {
-            this.sectionsWithGlobalEntities.add(render);
-        } else {
+        if (info == null || ArrayUtils.isEmpty(info.globalBlockEntities)) {
             this.sectionsWithGlobalEntities.remove(render);
+        } else {
+            this.sectionsWithGlobalEntities.add(render);
         }
     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/executor/ChunkBuilder.java
Patch:
@@ -1,7 +1,6 @@
 package me.jellysquid.mods.sodium.client.render.chunk.compile.executor;
 
 import me.jellysquid.mods.sodium.client.SodiumClientMod;
-import me.jellysquid.mods.sodium.client.model.light.cache.ArrayLightDataCache;
 import me.jellysquid.mods.sodium.client.render.chunk.compile.ChunkBuildContext;
 import me.jellysquid.mods.sodium.client.render.chunk.compile.tasks.ChunkBuilderTask;
 import me.jellysquid.mods.sodium.client.render.chunk.vertex.format.ChunkVertexType;
@@ -12,7 +11,8 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.Consumer;
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/pipeline/BlockRenderCache.java
Patch:
@@ -1,8 +1,8 @@
 package me.jellysquid.mods.sodium.client.render.chunk.compile.pipeline;
 
-import me.jellysquid.mods.sodium.client.model.light.LightPipelineProvider;
-import me.jellysquid.mods.sodium.client.model.light.cache.ArrayLightDataCache;
 import me.jellysquid.mods.sodium.client.model.color.ColorProviderRegistry;
+import me.jellysquid.mods.sodium.client.model.light.LightPipelineProvider;
+import me.jellysquid.mods.sodium.client.model.light.data.ArrayLightDataCache;
 import me.jellysquid.mods.sodium.client.world.WorldSlice;
 import me.jellysquid.mods.sodium.client.world.cloned.ChunkRenderContext;
 import net.minecraft.client.MinecraftClient;

File: src/main/java/me/jellysquid/mods/sodium/client/render/immediate/CloudRenderer.java
Patch:
@@ -3,7 +3,6 @@
 import com.mojang.blaze3d.platform.GlStateManager;
 import com.mojang.blaze3d.systems.RenderSystem;
 import me.jellysquid.mods.sodium.mixin.features.render.world.clouds.BackgroundRendererInvoker;
-import net.caffeinemc.mods.sodium.api.render.immediate.RenderImmediate;
 import net.caffeinemc.mods.sodium.api.vertex.format.common.ColorVertex;
 import net.caffeinemc.mods.sodium.api.vertex.buffer.VertexBufferWriter;
 import me.jellysquid.mods.sodium.client.util.MathUtil;
@@ -230,7 +229,7 @@ private void rebuildGeometry(BufferBuilder bufferBuilder, int cloudDistance, int
                 float x = offsetX * 12;
                 float z = offsetZ * 12;
 
-                try (MemoryStack stack = RenderImmediate.VERTEX_DATA.push()) {
+                try (MemoryStack stack = MemoryStack.stackPush()) {
                     final long buffer = stack.nmalloc(6 * 4 * ColorVertex.STRIDE);
 
                     long ptr = buffer;

File: src/main/java/me/jellysquid/mods/sodium/client/render/immediate/model/BakedModelEncoder.java
Patch:
@@ -2,7 +2,6 @@
 
 import me.jellysquid.mods.sodium.client.model.quad.ModelQuadView;
 import net.caffeinemc.mods.sodium.api.math.MatrixHelper;
-import net.caffeinemc.mods.sodium.api.render.immediate.RenderImmediate;
 import net.caffeinemc.mods.sodium.api.util.ColorABGR;
 import net.caffeinemc.mods.sodium.api.util.ColorU8;
 import net.caffeinemc.mods.sodium.api.vertex.buffer.VertexBufferWriter;
@@ -17,7 +16,7 @@ public static void writeQuadVertices(VertexBufferWriter writer, MatrixStack.Entr
         Matrix3f matNormal = matrices.getNormalMatrix();
         Matrix4f matPosition = matrices.getPositionMatrix();
 
-        try (MemoryStack stack = RenderImmediate.VERTEX_DATA.push()) {
+        try (MemoryStack stack = MemoryStack.stackPush()) {
             long buffer = stack.nmalloc(4 * ModelVertex.STRIDE);
             long ptr = buffer;
 
@@ -47,7 +46,7 @@ public static void writeQuadVertices(VertexBufferWriter writer, MatrixStack.Entr
         Matrix3f matNormal = matrices.getNormalMatrix();
         Matrix4f matPosition = matrices.getPositionMatrix();
 
-        try (MemoryStack stack = RenderImmediate.VERTEX_DATA.push()) {
+        try (MemoryStack stack = MemoryStack.stackPush()) {
             long buffer = stack.nmalloc(4 * ModelVertex.STRIDE);
             long ptr = buffer;
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/gui/screen/LevelLoadingScreenMixin.java
Patch:
@@ -3,7 +3,6 @@
 import com.mojang.blaze3d.systems.RenderSystem;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Reference2IntOpenHashMap;
-import net.caffeinemc.mods.sodium.api.render.immediate.RenderImmediate;
 import net.caffeinemc.mods.sodium.api.vertex.format.common.ColorVertex;
 import net.caffeinemc.mods.sodium.api.vertex.buffer.VertexBufferWriter;
 import net.caffeinemc.mods.sodium.api.util.ColorABGR;
@@ -121,7 +120,7 @@ public static void drawChunkMap(DrawContext drawContext, WorldGenerationProgress
 
     @Unique
     private static void addRect(VertexBufferWriter writer, Matrix4f matrix, int x1, int y1, int x2, int y2, int color) {
-        try (MemoryStack stack = RenderImmediate.VERTEX_DATA.push()) {
+        try (MemoryStack stack = MemoryStack.stackPush()) {
             long buffer = stack.nmalloc(4 * ColorVertex.STRIDE);
             long ptr = buffer;
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/entity/ModelPartMixin.java
Patch:
@@ -2,7 +2,6 @@
 
 import me.jellysquid.mods.sodium.client.model.ModelCuboidAccessor;
 import me.jellysquid.mods.sodium.client.render.vertex.VertexConsumerUtils;
-import net.caffeinemc.mods.sodium.api.render.immediate.RenderImmediate;
 import me.jellysquid.mods.sodium.client.render.immediate.model.ModelCuboid;
 import net.caffeinemc.mods.sodium.api.vertex.format.common.ModelVertex;
 import net.caffeinemc.mods.sodium.api.util.ColorABGR;
@@ -69,7 +68,7 @@ private void renderCuboidsFast(MatrixStack.Entry matrices, VertexConsumer vertex
         for (ModelCuboid cuboid : this.sodium$cuboids) {
             cuboid.updateVertices(matrices.getPositionMatrix());
 
-            try (MemoryStack stack = RenderImmediate.VERTEX_DATA.push()) {
+            try (MemoryStack stack = MemoryStack.stackPush()) {
                 long buffer = stack.nmalloc(4 * 6 * ModelVertex.STRIDE);
                 long ptr = buffer;
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/entity/shadows/EntityRenderDispatcherMixin.java
Patch:
@@ -1,6 +1,5 @@
 package me.jellysquid.mods.sodium.mixin.features.render.entity.shadows;
 
-import net.caffeinemc.mods.sodium.api.render.immediate.RenderImmediate;
 import net.caffeinemc.mods.sodium.api.vertex.buffer.VertexBufferWriter;
 import net.caffeinemc.mods.sodium.api.vertex.format.common.ModelVertex;
 import net.caffeinemc.mods.sodium.api.util.ColorABGR;
@@ -91,7 +90,7 @@ private static void renderShadowPart(MatrixStack.Entry matrices, VertexConsumer
         var color = ColorABGR.withAlpha(SHADOW_COLOR, alpha);
         var normal = MatrixHelper.transformNormal(matNormal, 0.0f, 1.0f, 0.0f);
 
-        try (MemoryStack stack = RenderImmediate.VERTEX_DATA.push()) {
+        try (MemoryStack stack = MemoryStack.stackPush()) {
             long buffer = stack.nmalloc(4 * ModelVertex.STRIDE);
             long ptr = buffer;
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/gui/font/GlyphRendererMixin.java
Patch:
@@ -1,6 +1,5 @@
 package me.jellysquid.mods.sodium.mixin.features.render.gui.font;
 
-import net.caffeinemc.mods.sodium.api.render.immediate.RenderImmediate;
 import net.caffeinemc.mods.sodium.api.vertex.format.common.GlyphVertex;
 import net.caffeinemc.mods.sodium.api.vertex.buffer.VertexBufferWriter;
 import net.caffeinemc.mods.sodium.api.util.ColorABGR;
@@ -64,7 +63,7 @@ public void draw(boolean italic, float x, float y, Matrix4f matrix, VertexConsum
 
         var writer = VertexBufferWriter.of(vertexConsumer);
 
-        try (MemoryStack stack = RenderImmediate.VERTEX_DATA.push()) {
+        try (MemoryStack stack = MemoryStack.stackPush()) {
             long buffer = stack.nmalloc(4 * GlyphVertex.STRIDE);
             long ptr = buffer;
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/gui/outlines/WorldRendererMixin.java
Patch:
@@ -1,6 +1,5 @@
 package me.jellysquid.mods.sodium.mixin.features.render.gui.outlines;
 
-import net.caffeinemc.mods.sodium.api.render.immediate.RenderImmediate;
 import net.caffeinemc.mods.sodium.api.vertex.format.common.LineVertex;
 import net.caffeinemc.mods.sodium.api.vertex.buffer.VertexBufferWriter;
 import net.caffeinemc.mods.sodium.api.util.NormI8;
@@ -101,7 +100,7 @@ public static void drawBox(MatrixStack matrices, VertexConsumer vertexConsumer,
 
     @Unique
     private static void writeLineVertices(VertexBufferWriter writer, float x, float y, float z, int color, int normal) {
-        try (MemoryStack stack = RenderImmediate.VERTEX_DATA.push()) {
+        try (MemoryStack stack = MemoryStack.stackPush()) {
             long buffer = stack.nmalloc(2 * LineVertex.STRIDE);
             long ptr = buffer;
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/particle/BillboardParticleMixin.java
Patch:
@@ -1,6 +1,5 @@
 package me.jellysquid.mods.sodium.mixin.features.render.particle;
 
-import net.caffeinemc.mods.sodium.api.render.immediate.RenderImmediate;
 import net.caffeinemc.mods.sodium.api.vertex.format.common.ParticleVertex;
 import net.caffeinemc.mods.sodium.api.vertex.buffer.VertexBufferWriter;
 import net.caffeinemc.mods.sodium.api.util.ColorABGR;
@@ -74,7 +73,7 @@ public void buildGeometry(VertexConsumer vertexConsumer, Camera camera, float ti
 
         var writer = VertexBufferWriter.of(vertexConsumer);
 
-        try (MemoryStack stack = RenderImmediate.VERTEX_DATA.push()) {
+        try (MemoryStack stack = MemoryStack.stackPush()) {
             long buffer = stack.nmalloc(4 * ParticleVertex.STRIDE);
             long ptr = buffer;
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/RenderSectionManager.java
Patch:
@@ -360,8 +360,8 @@ public boolean isSectionVisible(int x, int y, int z) {
     }
 
     public void updateChunks(boolean updateImmediately) {
+        this.sectionCache.cleanup();
         this.regions.update();
-        this.sectionCache.update();
 
         this.submitRebuildTasks(ChunkUpdateType.IMPORTANT_REBUILD, false);
         this.submitRebuildTasks(ChunkUpdateType.REBUILD, !updateImmediately);
@@ -732,7 +732,6 @@ public Collection<String> getDebugStrings() {
                 this.rebuildQueues.get(ChunkUpdateType.REBUILD).size(),
                 this.rebuildQueues.get(ChunkUpdateType.INITIAL_BUILD).size())
         );
-        list.add("Chunk cache: " + this.sectionCache.getDebugString());
 
         return list;
     }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/executor/ChunkJobTyped.java
Patch:
@@ -1,6 +1,5 @@
 package me.jellysquid.mods.sodium.client.render.chunk.compile.executor;
 
-import me.jellysquid.mods.sodium.client.SodiumClientMod;
 import me.jellysquid.mods.sodium.client.render.chunk.compile.ChunkBuildContext;
 import me.jellysquid.mods.sodium.client.render.chunk.compile.tasks.ChunkBuilderTask;
 
@@ -50,8 +49,6 @@ public void execute(ChunkBuildContext context) {
         } catch (Throwable throwable) {
             result = ChunkJobResult.exceptionally(throwable);
             ChunkBuilder.LOGGER.error("Chunk build failed", throwable);
-        } finally {
-            this.task.releaseResources();
         }
 
         try {

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/tasks/ChunkBuilderTask.java
Patch:
@@ -24,6 +24,4 @@ public abstract class ChunkBuilderTask<OUTPUT> {
      *         if the task was cancelled.
      */
     public abstract OUTPUT execute(ChunkBuildContext context, CancellationToken cancellationToken);
-
-    public abstract void releaseResources();
 }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/executor/ChunkBuilder.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.function.Consumer;
 
 public class ChunkBuilder {
-    private static final Logger LOGGER = LogManager.getLogger("ChunkBuilder");
+    static final Logger LOGGER = LogManager.getLogger("ChunkBuilder");
 
     private volatile boolean isRunning;
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/executor/ChunkJobTyped.java
Patch:
@@ -1,5 +1,6 @@
 package me.jellysquid.mods.sodium.client.render.chunk.compile.executor;
 
+import me.jellysquid.mods.sodium.client.SodiumClientMod;
 import me.jellysquid.mods.sodium.client.render.chunk.compile.ChunkBuildContext;
 import me.jellysquid.mods.sodium.client.render.chunk.compile.tasks.ChunkBuilderTask;
 
@@ -48,6 +49,7 @@ public void execute(ChunkBuildContext context) {
             result = ChunkJobResult.successfully(output);
         } catch (Throwable throwable) {
             result = ChunkJobResult.exceptionally(throwable);
+            ChunkBuilder.LOGGER.error("Chunk build failed", throwable);
         } finally {
             this.task.releaseResources();
         }

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/render/frustum/FrustumMixin.java
Patch:
@@ -26,6 +26,6 @@ public class FrustumMixin implements ViewportProvider {
     @Override
     public Viewport sodium$createViewport() {
         return new Viewport(new FrustumIntersection[] { this.frustumIntersection },
-                (float) this.x, (float) this.y, (float) this.z);
+                this.x, this.y, this.z);
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/render/SodiumWorldRenderer.java
Patch:
@@ -452,7 +452,7 @@ public void scheduleRebuildForChunk(int x, int y, int z, boolean important) {
         this.renderSectionManager.scheduleRebuild(x, y, z, important);
     }
 
-    public Collection<String> getMemoryDebugStrings() {
+    public Collection<String> getDebugStrings() {
         return this.renderSectionManager.getDebugStrings();
     }
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/gui/hooks/debug/DebugHudMixin.java
Patch:
@@ -32,7 +32,7 @@ private ArrayList<String> redirectRightTextEarly(Object[] elements) {
         var renderer = SodiumWorldRenderer.instanceNullable();
 
         if (renderer != null) {
-            strings.addAll(renderer.getMemoryDebugStrings());
+            strings.addAll(renderer.getDebugStrings());
         }
 
         for (int i = 0; i < strings.size(); i++) {

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/ChunkBuildContext.java
Patch:
@@ -1,7 +1,6 @@
 package me.jellysquid.mods.sodium.client.render.chunk.compile;
 
 import me.jellysquid.mods.sodium.client.render.chunk.vertex.format.ChunkVertexType;
-import me.jellysquid.mods.sodium.client.render.chunk.compile.ChunkBuildBuffers;
 import me.jellysquid.mods.sodium.client.render.chunk.compile.pipeline.BlockRenderCache;
 import net.minecraft.client.MinecraftClient;
 import net.minecraft.world.World;
@@ -15,7 +14,7 @@ public ChunkBuildContext(World world, ChunkVertexType vertexType) {
         this.cache = new BlockRenderCache(MinecraftClient.getInstance(), world);
     }
 
-    public void release() {
+    public void cleanup() {
         this.buffers.destroy();
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/util/task/CancellationToken.java
Patch:
@@ -1,5 +1,7 @@
 package me.jellysquid.mods.sodium.client.util.task;
 
-public interface CancellationSource {
+public interface CancellationToken {
     boolean isCancelled();
+
+    void setCancelled();
 }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/data/BuiltSectionInfo.java
Patch:
@@ -17,8 +17,6 @@
  * block entities contained by it, and any data used for occlusion testing.
  */
 public class BuiltSectionInfo {
-    public static final BuiltSectionInfo ABSENT = new BuiltSectionInfo.Builder()
-            .build();
     public static final BuiltSectionInfo EMPTY = createEmptyData();
 
     private List<TerrainRenderPass> blockRenderPasses;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/region/RenderRegion.java
Patch:
@@ -122,7 +122,7 @@ public void refresh(CommandList commandList) {
         }
 
         for (var storage : this.sectionRenderData.values()) {
-            storage.refresh();
+            storage.onBufferResized();
         }
     }
 
@@ -149,7 +149,7 @@ public void removeSection(RenderSection section) {
         }
 
         for (var storage : this.sectionRenderData.values()) {
-            storage.removeMesh(sectionIndex);
+            storage.removeMeshes(sectionIndex);
         }
 
         this.sections[sectionIndex] = null;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/RenderSectionManager.java
Patch:
@@ -667,7 +667,7 @@ private int getEffectiveViewDistance() {
             return this.renderDistance;
         }
 
-        return MathHelper.floor(distance) >> 4;
+        return MathHelper.ceil(distance / 16.0f);
     }
 
     private void connectNeighborNodes(RenderSection render) {

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/map/ChunkStatus.java
Patch:
@@ -1,7 +1,7 @@
-package me.jellysquid.mods.sodium.client.render.chunk;
+package me.jellysquid.mods.sodium.client.render.chunk.map;
 
 public class ChunkStatus {
     public static final int FLAG_HAS_BLOCK_DATA = 1;
     public static final int FLAG_HAS_LIGHT_DATA = 2;
     public static final int FLAG_ALL = FLAG_HAS_BLOCK_DATA | FLAG_HAS_LIGHT_DATA;
-}
+}
\ No newline at end of file

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/RenderSection.java
Patch:
@@ -19,8 +19,6 @@
  * data about the render in the chunk visibility graph.
  */
 public class RenderSection {
-    private static final long DEFAULT_VISIBILITY_DATA = VisibilityEncoding.encode(ChunkRenderData.EMPTY.getOcclusionData());
-
     private final SodiumWorldRenderer worldRenderer;
     private final int chunkX, chunkY, chunkZ;
 
@@ -63,7 +61,7 @@ public RenderSection(RenderRegion region, SodiumWorldRenderer worldRenderer, int
 
         this.region = region;
 
-        this.visibilityData = DEFAULT_VISIBILITY_DATA;
+        this.visibilityData = VisibilityEncoding.DEFAULT;
     }
 
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/graph/GraphDirection.java
Patch:
@@ -1,8 +1,6 @@
 package me.jellysquid.mods.sodium.client.render.chunk.graph;
 
 public class GraphDirection {
-    public static final int NONE    = -1;
-
     public static final int DOWN    = 0;
     public static final int UP      = 1;
     public static final int NORTH   = 2;
@@ -13,6 +11,9 @@ public class GraphDirection {
 
     public static final int COUNT   = 6;
 
+    public static final int NONE    = 0b000000;
+    public static final int ALL     = 0b111111;
+
     private static final int[] OPPOSITE;
     private static final int[] X, Y, Z;
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/RenderSection.java
Patch:
@@ -5,7 +5,7 @@
 import me.jellysquid.mods.sodium.client.render.chunk.data.ChunkRenderData;
 import me.jellysquid.mods.sodium.client.render.chunk.region.RenderRegion;
 import me.jellysquid.mods.sodium.client.render.texture.SpriteUtil;
-import me.jellysquid.mods.sodium.client.util.frustum.Frustum;
+import me.jellysquid.mods.sodium.client.render.viewport.Viewport;
 import me.jellysquid.mods.sodium.client.util.DirectionUtil;
 import net.minecraft.client.render.chunk.ChunkOcclusionData;
 import net.minecraft.client.texture.Sprite;
@@ -307,11 +307,11 @@ public void resetCullingState() {
         this.cullingState = 0;
     }
 
-    public boolean isCulledByFrustum(Frustum frustum) {
+    public boolean isInsideViewport(Viewport viewport) {
         float x = this.getOriginX();
         float y = this.getOriginY();
         float z = this.getOriginZ();
 
-        return !frustum.isBoxVisible(x, y, z, x + 16.0f, y + 16.0f, z + 16.0f);
+        return !viewport.isBoxVisible(x, y, z, x + 16.0f, y + 16.0f, z + 16.0f);
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/model/ModelCuboidAccessor.java
Patch:
@@ -3,5 +3,5 @@
 import me.jellysquid.mods.sodium.client.render.immediate.model.ModelCuboid;
 
 public interface ModelCuboidAccessor {
-    ModelCuboid copy();
+    ModelCuboid sodium$copy();
 }

File: src/main/java/me/jellysquid/mods/sodium/client/model/color/ColorProviderRegistry.java
Patch:
@@ -18,7 +18,9 @@ public class ColorProviderRegistry {
     private final Reference2ReferenceMap<Fluid, ColorProvider<FluidState>> fluids = new Reference2ReferenceOpenHashMap<>();
 
     public ColorProviderRegistry(BlockColors blockColors) {
-        for (var entry : BlockColorsExtended.getProviders(blockColors)) {
+        var providers = BlockColorsExtended.getProviders(blockColors);
+
+        for (var entry : providers.reference2ReferenceEntrySet()) {
             this.blocks.put(entry.getKey(), DefaultColorProviders.adapt(entry.getValue()));
         }
 

File: src/main/java/me/jellysquid/mods/sodium/client/model/color/interop/BlockColorsExtended.java
Patch:
@@ -6,9 +6,9 @@
 import net.minecraft.client.color.block.BlockColors;
 
 public interface BlockColorsExtended {
-    static Iterable<Reference2ReferenceMap.Entry<Block, BlockColorProvider>> getProviders(BlockColors blockColors) {
-        return ((BlockColorsExtended) blockColors).getProviders();
+    static Reference2ReferenceMap<Block, BlockColorProvider> getProviders(BlockColors blockColors) {
+        return ((BlockColorsExtended) blockColors).sodium$getProviders();
     }
 
-    Iterable<Reference2ReferenceMap.Entry<Block, BlockColorProvider>> getProviders();
+    Reference2ReferenceMap<Block, BlockColorProvider> sodium$getProviders();
 }

File: src/main/java/me/jellysquid/mods/sodium/client/model/color/interop/ItemColorsExtended.java
Patch:
@@ -4,5 +4,5 @@
 import net.minecraft.item.ItemStack;
 
 public interface ItemColorsExtended {
-    ItemColorProvider getColorProvider(ItemStack stack);
+    ItemColorProvider sodium$getColorProvider(ItemStack stack);
 }

File: src/main/java/me/jellysquid/mods/sodium/client/render/SodiumWorldRenderer.java
Patch:
@@ -71,7 +71,7 @@ public static SodiumWorldRenderer instanceNullable() {
         var world = MinecraftClient.getInstance().worldRenderer;
 
         if (world instanceof WorldRendererExtended) {
-            return ((WorldRendererExtended) world).getSodiumWorldRenderer();
+            return ((WorldRendererExtended) world).sodium$getWorldRenderer();
         }
 
         return null;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/data/ChunkRenderData.java
Patch:
@@ -4,7 +4,7 @@
 import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import me.jellysquid.mods.sodium.client.render.chunk.RenderSectionFlags;
 import me.jellysquid.mods.sodium.client.render.chunk.terrain.TerrainRenderPass;
-import me.jellysquid.mods.sodium.client.render.texture.SpriteContentsExtended;
+import me.jellysquid.mods.sodium.client.render.texture.SpriteUtil;
 import net.minecraft.block.entity.BlockEntity;
 import net.minecraft.client.render.chunk.ChunkOcclusionData;
 import net.minecraft.client.texture.Sprite;
@@ -88,7 +88,7 @@ public void setOcclusionData(ChunkOcclusionData data) {
          * @param sprite The sprite
          */
         public void addSprite(Sprite sprite) {
-            if (((SpriteContentsExtended) sprite.getContents()).hasAnimation()) {
+            if (SpriteUtil.hasAnimation(sprite)) {
                 this.animatedSprites.add(sprite);
             }
         }

File: src/main/java/me/jellysquid/mods/sodium/client/render/immediate/CloudRenderer.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.mojang.blaze3d.platform.GlStateManager;
 import com.mojang.blaze3d.systems.RenderSystem;
+import me.jellysquid.mods.sodium.mixin.features.render.world.clouds.BackgroundRendererInvoker;
 import net.caffeinemc.mods.sodium.api.render.immediate.RenderImmediate;
 import net.caffeinemc.mods.sodium.api.vertex.format.common.ColorVertex;
 import net.caffeinemc.mods.sodium.api.vertex.buffer.VertexBufferWriter;
@@ -204,7 +205,7 @@ private void applyFogModifiers(ClientWorld world, BackgroundRenderer.FogData fog
             fogData.fogEnd = Math.min((cloudDistance), 192.0f) * 0.5f;
         }
 
-        BackgroundRenderer.StatusEffectFogModifier fogModifier = BackgroundRenderer.getFogModifier(player, tickDelta);
+        BackgroundRenderer.StatusEffectFogModifier fogModifier = BackgroundRendererInvoker.invokeGetFogModifier(player, tickDelta);
         if (fogModifier != null) {
             StatusEffectInstance statusEffectInstance = player.getStatusEffect(fogModifier.getStatusEffect());
             if (statusEffectInstance != null) {

File: src/main/java/me/jellysquid/mods/sodium/client/util/NativeImageHelper.java
Patch:
@@ -1,5 +1,6 @@
 package me.jellysquid.mods.sodium.client.util;
 
+import me.jellysquid.mods.sodium.mixin.features.textures.NativeImageAccessor;
 import net.minecraft.client.texture.NativeImage;
 
 import java.util.Locale;
@@ -11,6 +12,7 @@ public static long getPointerRGBA(NativeImage nativeImage) {
                     "Tried to get pointer to RGBA pixel data on NativeImage of wrong format; have %s", nativeImage.getFormat()));
         }
 
-        return nativeImage.pointer;
+        return ((NativeImageAccessor) (Object) nativeImage) // duck type since NativeImage is final
+                .getPointer();
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/util/frustum/Frustum.java
Patch:
@@ -4,13 +4,13 @@ public interface Frustum {
     /**
      * @return The visibility of an axis-aligned box within the frustum
      */
-    Visibility testBox(float minX, float minY, float minZ, float maxX, float maxY, float maxZ);
+    Visibility sodium$testBox(float minX, float minY, float minZ, float maxX, float maxY, float maxZ);
 
     /**
      * @return true if the axis-aligned box is visible within the frustum, otherwise false
      */
     default boolean isBoxVisible(float minX, float minY, float minZ, float maxX, float maxY, float maxZ) {
-        return this.testBox(minX, minY, minZ, maxX, maxY, maxZ) != Visibility.OUTSIDE;
+        return this.sodium$testBox(minX, minY, minZ, maxX, maxY, maxZ) != Visibility.OUTSIDE;
     }
 
     enum Visibility {

File: src/main/java/me/jellysquid/mods/sodium/client/util/frustum/JomlFrustum.java
Patch:
@@ -21,7 +21,7 @@ public JomlFrustum(Matrix4f matrix, Vector3f offset) {
     }
 
     @Override
-    public Visibility testBox(float minX, float minY, float minZ, float maxX, float maxY, float maxZ) {
+    public Visibility sodium$testBox(float minX, float minY, float minZ, float maxX, float maxY, float maxZ) {
         return switch (this.intersection.intersectAab(minX - this.offset.x, minY - this.offset.y, minZ - this.offset.z,
                 maxX - this.offset.x, maxY - this.offset.y, maxZ - this.offset.z)) {
             case FrustumIntersection.INTERSECT -> Visibility.INTERSECT;

File: src/main/java/me/jellysquid/mods/sodium/client/world/BiomeSeedProvider.java
Patch:
@@ -1,5 +1,5 @@
 package me.jellysquid.mods.sodium.client.world;
 
 public interface BiomeSeedProvider {
-    long getBiomeSeed();
+    long sodium$getBiomeSeed();
 }

File: src/main/java/me/jellysquid/mods/sodium/client/world/WorldRendererExtended.java
Patch:
@@ -3,5 +3,5 @@
 import me.jellysquid.mods.sodium.client.render.SodiumWorldRenderer;
 
 public interface WorldRendererExtended {
-    SodiumWorldRenderer getSodiumWorldRenderer();
+    SodiumWorldRenderer sodium$getWorldRenderer();
 }

File: src/main/java/me/jellysquid/mods/sodium/client/world/WorldSlice.java
Patch:
@@ -190,7 +190,7 @@ private void unpackBlockDataSlow(BlockState[] states, ClonedChunkSection section
 
     private void unpackBlockData(BlockState[] states, ClonedChunkSection section) {
         ((PackedIntegerArrayExtended) section.getBlockData())
-                .copyUsingPalette(states, section.getBlockPalette());
+                .sodium$unpack(states, section.getBlockPalette());
     }
 
 
@@ -294,7 +294,7 @@ public static int getLocalSectionIndex(int x, int y, int z) {
     }
 
     public long getBiomeSeed() {
-        return ((BiomeSeedProvider) this.world).getBiomeSeed();
+        return ((BiomeSeedProvider) this.world).sodium$getBiomeSeed();
     }
 
     public Biome getBiome(int x, int y, int z) {

File: src/main/java/me/jellysquid/mods/sodium/client/world/cloned/ClonedChunkSection.java
Patch:
@@ -6,6 +6,7 @@
 import me.jellysquid.mods.sodium.client.world.cloned.palette.ClonedPalette;
 import me.jellysquid.mods.sodium.client.world.cloned.palette.ClonedPaletteFallback;
 import me.jellysquid.mods.sodium.client.world.cloned.palette.ClonedPalleteArray;
+import me.jellysquid.mods.sodium.mixin.core.world.chunk.PalettedContainerAccessor;
 import net.fabricmc.fabric.api.rendering.data.v1.RenderAttachmentBlockEntity;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockState;
@@ -91,7 +92,7 @@ private void reset(ChunkSectionPos pos) {
     }
 
     private void copyBlockData(ChunkSection section) {
-        PalettedContainer.Data<BlockState> container = PalettedContainerAccessor.getData(section.getBlockStateContainer());
+        PalettedContainer.Data<BlockState> container = ((PalettedContainerAccessor<BlockState>) section.getBlockStateContainer()).getData();
 
         this.blockStateData = copyBlockData(container);
         this.blockStatePalette = copyPalette(container);

File: src/main/java/me/jellysquid/mods/sodium/client/world/cloned/PackedIntegerArrayExtended.java
Patch:
@@ -3,5 +3,5 @@
 import me.jellysquid.mods.sodium.client.world.cloned.palette.ClonedPalette;
 
 public interface PackedIntegerArrayExtended {
-    <T> void copyUsingPalette(T[] out, ClonedPalette<T> palette);
+    <T> void sodium$unpack(T[] out, ClonedPalette<T> palette);
 }

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/MinecraftClientMixin.java
Patch:
@@ -8,12 +8,14 @@
 import net.minecraft.util.profiler.Profiler;
 import org.lwjgl.opengl.GL32C;
 import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.Unique;
 import org.spongepowered.asm.mixin.injection.At;
 import org.spongepowered.asm.mixin.injection.Inject;
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
 
 @Mixin(MinecraftClient.class)
-public class MixinMinecraftClient {
+public class MinecraftClientMixin {
+    @Unique
     private final LongArrayFIFOQueue fences = new LongArrayFIFOQueue();
 
     @Inject(method = "<init>", at = @At("RETURN"))

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/WindowMixin.java
Patch:
@@ -10,7 +10,7 @@
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
 
 @Mixin(Window.class)
-public class MixinWindow {
+public class WindowMixin {
     @Inject(method = "<init>", at = @At(value = "INVOKE", target = "Lorg/lwjgl/glfw/GLFW;glfwCreateWindow(IILjava/lang/CharSequence;JJ)J", shift = At.Shift.BEFORE))
     public void setAdditionalWindowHints(CallbackInfo ci) {
         if (SodiumClientMod.options().performance.useNoErrorGLContext &&

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/render/frustum/FrustumMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.core;
+package me.jellysquid.mods.sodium.mixin.core.render.frustum;
 
 import me.jellysquid.mods.sodium.client.util.frustum.FrustumAdapter;
 import net.minecraft.client.render.Frustum;
@@ -8,7 +8,7 @@
 import org.spongepowered.asm.mixin.Shadow;
 
 @Mixin(Frustum.class)
-public class MixinFrustum implements FrustumAdapter, me.jellysquid.mods.sodium.client.util.frustum.Frustum {
+public class FrustumMixin implements FrustumAdapter, me.jellysquid.mods.sodium.client.util.frustum.Frustum {
     @Shadow
     private double x;
 
@@ -28,7 +28,7 @@ public class MixinFrustum implements FrustumAdapter, me.jellysquid.mods.sodium.c
     }
 
     @Override
-    public Visibility testBox(float minX, float minY, float minZ, float maxX, float maxY, float maxZ) {
+    public Visibility sodium$testBox(float minX, float minY, float minZ, float maxX, float maxY, float maxZ) {
         return switch (this.frustumIntersection.intersectAab(minX - (float) this.x, minY - (float) this.y, minZ - (float) this.z,
                 maxX - (float) this.x, maxY - (float) this.y, maxZ - (float) this.z)) {
             case FrustumIntersection.INTERSECT -> Visibility.INTERSECT;

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/render/world/ChunkBuilderMixin.java
Patch:
@@ -1,12 +1,12 @@
-package me.jellysquid.mods.sodium.mixin.features.chunk_rendering;
+package me.jellysquid.mods.sodium.mixin.core.render.world;
 
 import net.minecraft.client.render.chunk.ChunkBuilder;
 import org.spongepowered.asm.mixin.Mixin;
 import org.spongepowered.asm.mixin.injection.At;
 import org.spongepowered.asm.mixin.injection.ModifyVariable;
 
 @Mixin(ChunkBuilder.class)
-public class MixinChunkBuilder {
+public class ChunkBuilderMixin {
     @ModifyVariable(method = "<init>", index = 9, at = @At(value = "INVOKE", target = "Lcom/google/common/collect/Lists;newArrayListWithExpectedSize(I)Ljava/util/ArrayList;", remap = false))
     private int modifyThreadPoolSize(int prev) {
         // Do not allow any resources to be allocated

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/render/world/ClientPlayNetworkHandlerMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.features.chunk_rendering;
+package me.jellysquid.mods.sodium.mixin.core.render.world;
 
 import me.jellysquid.mods.sodium.client.render.SodiumWorldRenderer;
 import net.minecraft.client.network.ClientPlayNetworkHandler;
@@ -15,7 +15,7 @@
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
 
 @Mixin(ClientPlayNetworkHandler.class)
-public class MixinClientPlayNetworkHandler {
+public class ClientPlayNetworkHandlerMixin {
     @Inject(method = "onChunkData", at = @At("RETURN"))
     private void postLoadChunk(ChunkDataS2CPacket packet, CallbackInfo ci) {
         SodiumWorldRenderer.instance()

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/world/biome/ClientWorldMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.features.chunk_rendering;
+package me.jellysquid.mods.sodium.mixin.core.world.biome;
 
 import me.jellysquid.mods.sodium.client.world.BiomeSeedProvider;
 import net.minecraft.client.network.ClientPlayNetworkHandler;
@@ -18,7 +18,7 @@
 import java.util.function.Supplier;
 
 @Mixin(ClientWorld.class)
-public class MixinClientWorld implements BiomeSeedProvider {
+public class ClientWorldMixin implements BiomeSeedProvider {
     @Unique
     private long biomeSeed;
 
@@ -38,7 +38,7 @@ private void captureSeed(ClientPlayNetworkHandler networkHandler,
     }
 
     @Override
-    public long getBiomeSeed() {
+    public long sodium$getBiomeSeed() {
         return this.biomeSeed;
     }
 }
\ No newline at end of file

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/world/chunk/PackedIntegerArrayMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.features.chunk_rendering;
+package me.jellysquid.mods.sodium.mixin.core.world.chunk;
 
 import me.jellysquid.mods.sodium.client.world.cloned.PackedIntegerArrayExtended;
 import me.jellysquid.mods.sodium.client.world.cloned.palette.ClonedPalette;
@@ -8,7 +8,7 @@
 import org.spongepowered.asm.mixin.Shadow;
 
 @Mixin(PackedIntegerArray.class)
-public class MixinPackedIntegerArray implements PackedIntegerArrayExtended {
+public class PackedIntegerArrayMixin implements PackedIntegerArrayExtended {
     @Shadow
     @Final
     private long[] data;
@@ -30,7 +30,7 @@ public class MixinPackedIntegerArray implements PackedIntegerArrayExtended {
     private int size;
 
     @Override
-    public <T> void copyUsingPalette(T[] out, ClonedPalette<T> palette) {
+    public <T> void sodium$unpack(T[] out, ClonedPalette<T> palette) {
         int idx = 0;
 
         for (long word : this.data) {

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/gui/hooks/settings/OptionsScreenMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.features.options;
+package me.jellysquid.mods.sodium.mixin.features.gui.hooks.settings;
 
 import me.jellysquid.mods.sodium.client.gui.SodiumOptionsGUI;
 import net.minecraft.client.gui.screen.Screen;
@@ -11,8 +11,8 @@
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;
 
 @Mixin(OptionsScreen.class)
-public class MixinOptionsScreen extends Screen {
-    protected MixinOptionsScreen(Text title) {
+public class OptionsScreenMixin extends Screen {
+    protected OptionsScreenMixin(Text title) {
         super(title);
     }
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/options/overlays/InGameHudMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.features.options;
+package me.jellysquid.mods.sodium.mixin.features.options.overlays;
 
 import me.jellysquid.mods.sodium.client.SodiumClientMod;
 import net.minecraft.client.gui.hud.InGameHud;
@@ -7,7 +7,7 @@
 import org.spongepowered.asm.mixin.injection.Redirect;
 
 @Mixin(InGameHud.class)
-public class MixinInGameHud {
+public class InGameHudMixin {
     @Redirect(method = "render", at = @At(value = "INVOKE", target = "Lnet/minecraft/client/MinecraftClient;isFancyGraphicsOrBetter()Z"))
     private boolean redirectFancyGraphicsVignette() {
         return SodiumClientMod.options().quality.enableVignette;

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/options/render_layers/LeavesBlockMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.features.render_layer.leaves;
+package me.jellysquid.mods.sodium.mixin.features.options.render_layers;
 
 import me.jellysquid.mods.sodium.client.SodiumClientMod;
 import net.minecraft.block.*;
@@ -7,8 +7,8 @@
 import org.spongepowered.asm.mixin.Mixin;
 
 @Mixin(LeavesBlock.class)
-public class MixinLeavesBlock extends Block {
-    public MixinLeavesBlock() {
+public class LeavesBlockMixin extends Block {
+    public LeavesBlockMixin() {
         super(Settings.copy(Blocks.AIR));
         throw new AssertionError("Mixin constructor called!");
     }

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/options/render_layers/RenderLayersMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.features.render_layer.leaves;
+package me.jellysquid.mods.sodium.mixin.features.options.render_layers;
 
 import it.unimi.dsi.fastutil.objects.Reference2ReferenceOpenHashMap;
 import me.jellysquid.mods.sodium.client.SodiumClientMod;
@@ -20,7 +20,7 @@
 import java.util.Map;
 
 @Mixin(RenderLayers.class)
-public class MixinRenderLayers {
+public class RenderLayersMixin {
     @Mutable
     @Shadow
     @Final

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/options/weather/WorldRendererMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.features.options;
+package me.jellysquid.mods.sodium.mixin.features.options.weather;
 
 import me.jellysquid.mods.sodium.client.SodiumClientMod;
 import net.minecraft.client.MinecraftClient;
@@ -8,7 +8,7 @@
 import org.spongepowered.asm.mixin.injection.Redirect;
 
 @Mixin(WorldRenderer.class)
-public class MixinWorldRenderer {
+public class WorldRendererMixin {
     @Redirect(method = "renderWeather", at = @At(value = "INVOKE", target = "Lnet/minecraft/client/MinecraftClient;isFancyGraphicsOrBetter()Z"))
     private boolean redirectGetFancyWeather() {
         return SodiumClientMod.options().quality.weatherQuality.isFancy(MinecraftClient.getInstance().options.getGraphicsMode().getValue());

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/entity/cull/EntityRendererMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.features.entity.cull;
+package me.jellysquid.mods.sodium.mixin.features.render.entity.cull;
 
 import me.jellysquid.mods.sodium.client.render.SodiumWorldRenderer;
 import net.minecraft.client.render.Frustum;
@@ -10,7 +10,7 @@
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;
 
 @Mixin(EntityRenderer.class)
-public abstract class MixinEntityRenderer<T extends Entity> {
+public abstract class EntityRendererMixin<T extends Entity> {
     @Inject(method = "shouldRender", at = @At(value = "INVOKE", target = "Lnet/minecraft/client/render/Frustum;isVisible(Lnet/minecraft/util/math/Box;)Z", shift = At.Shift.AFTER), cancellable = true)
     private void preShouldRender(T entity, Frustum frustum, double x, double y, double z, CallbackInfoReturnable<Boolean> cir) {
         var renderer = SodiumWorldRenderer.instanceNullable();

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/immediate/buffer_builder/BufferBuilderMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.features.buffer_builder.fast_advance;
+package me.jellysquid.mods.sodium.mixin.features.render.immediate.buffer_builder;
 
 import com.google.common.collect.ImmutableList;
 import net.minecraft.client.render.*;
@@ -7,7 +7,7 @@
 import org.spongepowered.asm.mixin.Shadow;
 
 @Mixin(BufferBuilder.class)
-public abstract class MixinBufferBuilder extends FixedColorVertexConsumer implements BufferVertexConsumer {
+public abstract class BufferBuilderMixin extends FixedColorVertexConsumer implements BufferVertexConsumer {
     @Shadow
     private VertexFormat format;
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/immediate/buffer_builder/intrinsics/BufferBuilderMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.features.buffer_builder.intrinsics;
+package me.jellysquid.mods.sodium.mixin.features.render.immediate.buffer_builder.intrinsics;
 
 import me.jellysquid.mods.sodium.client.model.quad.ModelQuadView;
 import me.jellysquid.mods.sodium.client.render.immediate.model.BakedModelEncoder;
@@ -14,7 +14,7 @@
 
 @SuppressWarnings({ "SameParameterValue" })
 @Mixin(BufferBuilder.class)
-public abstract class MixinBufferBuilder extends FixedColorVertexConsumer {
+public abstract class BufferBuilderMixin extends FixedColorVertexConsumer {
     @Shadow
     private boolean canSkipElementChecks;
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/immediate/buffer_builder/sorting/VertexSorterMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.features.buffer_builder.fast_sort;
+package me.jellysquid.mods.sodium.mixin.features.render.immediate.buffer_builder.sorting;
 
 import com.mojang.blaze3d.systems.VertexSorter;
 import me.jellysquid.mods.sodium.client.util.sorting.VertexSorters;
@@ -7,7 +7,7 @@
 import org.spongepowered.asm.mixin.Overwrite;
 
 @Mixin(VertexSorter.class)
-public interface MixinVertexSorter {
+public interface VertexSorterMixin {
     /**
      * @author JellySquid
      * @reason Optimize vertex sorting

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/immediate/matrix_stack/VertexConsumerMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.features.matrix_stack;
+package me.jellysquid.mods.sodium.mixin.features.render.immediate.matrix_stack;
 
 import net.caffeinemc.mods.sodium.api.math.MatrixHelper;
 import net.minecraft.client.render.VertexConsumer;
@@ -10,7 +10,7 @@
 import org.spongepowered.asm.mixin.Shadow;
 
 @Mixin(VertexConsumer.class)
-public interface MixinVertexConsumer {
+public interface VertexConsumerMixin {
     @Shadow
     VertexConsumer normal(float x, float y, float z);
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/model/block/BlockModelRendererMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.features.block;
+package me.jellysquid.mods.sodium.mixin.features.render.model.block;
 
 import me.jellysquid.mods.sodium.client.model.quad.BakedQuadView;
 import me.jellysquid.mods.sodium.client.render.immediate.model.BakedModelEncoder;
@@ -18,7 +18,6 @@
 import net.minecraft.util.math.random.LocalRandom;
 import net.minecraft.util.math.random.Random;
 import org.spongepowered.asm.mixin.Mixin;
-import org.spongepowered.asm.mixin.Overwrite;
 import org.spongepowered.asm.mixin.Unique;
 import org.spongepowered.asm.mixin.injection.At;
 import org.spongepowered.asm.mixin.injection.Inject;
@@ -27,7 +26,8 @@
 import java.util.List;
 
 @Mixin(BlockModelRenderer.class)
-public class MixinBlockModelRenderer {
+public class BlockModelRendererMixin {
+    @Unique
     private final Random random = new LocalRandom(42L);
 
     /**

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/world/sky/BackgroundRendererMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.features.fast_biome_colors;
+package me.jellysquid.mods.sodium.mixin.features.render.world.sky;
 
 import me.jellysquid.mods.sodium.client.util.color.FastCubicSampler;
 import net.minecraft.client.render.BackgroundRenderer;
@@ -12,7 +12,7 @@
 import org.spongepowered.asm.mixin.injection.Redirect;
 
 @Mixin(BackgroundRenderer.class)
-public class MixinBackgroundRenderer {
+public class BackgroundRendererMixin {
     @Redirect(method = "render", at = @At(value = "INVOKE", target = "Lnet/minecraft/util/CubicSampler;sampleColor(Lnet/minecraft/util/math/Vec3d;Lnet/minecraft/util/CubicSampler$RgbFetcher;)Lnet/minecraft/util/math/Vec3d;"))
     private static Vec3d redirectSampleColor(Vec3d pos, CubicSampler.RgbFetcher rgbFetcher, Camera camera, float tickDelta, ClientWorld world, int i, float f) {
         float u = MathHelper.clamp(MathHelper.cos(world.getSkyAngle(tickDelta) * 6.2831855F) * 2.0F + 0.5F, 0.0F, 1.0F);

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render/world/sky/ClientWorldMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.features.fast_biome_colors;
+package me.jellysquid.mods.sodium.mixin.features.render.world.sky;
 
 import me.jellysquid.mods.sodium.client.util.color.FastCubicSampler;
 import net.minecraft.client.world.ClientWorld;
@@ -12,7 +12,7 @@
 import java.util.function.Function;
 
 @Mixin(ClientWorld.class)
-public class MixinClientWorld {
+public class ClientWorldMixin {
     @Redirect(method = "getSkyColor", at = @At(value = "INVOKE", target = "Lnet/minecraft/util/CubicSampler;sampleColor(Lnet/minecraft/util/math/Vec3d;Lnet/minecraft/util/CubicSampler$RgbFetcher;)Lnet/minecraft/util/math/Vec3d;"))
     private Vec3d redirectSampleColor(Vec3d pos, CubicSampler.RgbFetcher rgbFetcher) {
         World world = (World) (Object) this;

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/textures/animations/tracking/SpriteAtlasTextureMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.features.texture_tracking;
+package me.jellysquid.mods.sodium.mixin.features.textures.animations.tracking;
 
 import me.jellysquid.mods.sodium.client.render.texture.SpriteUtil;
 import net.minecraft.client.texture.Sprite;
@@ -9,7 +9,7 @@
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;
 
 @Mixin(SpriteAtlasTexture.class)
-public class MixinSpriteAtlasTexture {
+public class SpriteAtlasTextureMixin {
     @Inject(method = "getSprite", at = @At("RETURN"))
     private void preReturnSprite(CallbackInfoReturnable<Sprite> cir) {
         Sprite sprite = cir.getReturnValue();

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/textures/animations/upload/AnimationAccessor.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.features.texture_updates;
+package me.jellysquid.mods.sodium.mixin.features.textures.animations.upload;
 
 import net.minecraft.client.texture.SpriteContents;
 import org.spongepowered.asm.mixin.Mixin;

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/textures/animations/upload/AnimationFrameAccessor.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.features.texture_updates;
+package me.jellysquid.mods.sodium.mixin.features.textures.animations.upload;
 
 import net.minecraft.client.texture.SpriteContents;
 import org.spongepowered.asm.mixin.Mixin;

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/textures/animations/upload/SpriteInfoAccessor.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.features.texture_updates;
+package me.jellysquid.mods.sodium.mixin.features.textures.animations.upload;
 
 import net.minecraft.client.texture.NativeImage;
 import net.minecraft.client.texture.SpriteContents;

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/textures/animations/upload/SpriteInfoAnimationAccessor.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.features.texture_updates;
+package me.jellysquid.mods.sodium.mixin.features.textures.animations.upload;
 
 import net.minecraft.client.texture.SpriteContents;
 import org.spongepowered.asm.mixin.Mixin;

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/textures/mipmaps/MipmapHelperMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.features.mipmaps;
+package me.jellysquid.mods.sodium.mixin.features.textures.mipmaps;
 
 import me.jellysquid.mods.sodium.client.util.color.ColorSRGB;
 import net.minecraft.client.texture.MipmapHelper;
@@ -27,7 +27,7 @@
  * This Mixin is ported from Iris at <a href="https://github.com/IrisShaders/Iris/blob/41095ac23ea0add664afd1b85c414d1f1ed94066/src/main/java/net/coderbot/iris/mixin/bettermipmaps/MixinMipmapGenerator.java">MixinMipmapGenerator</a>.
  */
 @Mixin(MipmapHelper.class)
-public class MixinMipmapHelper {
+public class MipmapHelperMixin {
     /**
      * @author coderbot
      * @reason replace the vanilla blending function with our improved function

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/textures/mipmaps/SpriteContentsMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.features.mipmaps;
+package me.jellysquid.mods.sodium.mixin.features.textures.mipmaps;
 
 import me.jellysquid.mods.sodium.client.util.NativeImageHelper;
 import me.jellysquid.mods.sodium.client.util.color.ColorSRGB;
@@ -20,7 +20,7 @@
  * This Mixin is ported from Iris at <a href="https://github.com/IrisShaders/Iris/blob/41095ac23ea0add664afd1b85c414d1f1ed94066/src/main/java/net/coderbot/iris/mixin/bettermipmaps/MixinTextureAtlasSprite.java">MixinTextureAtlasSprite</a>.
  */
 @Mixin(SpriteContents.class)
-public class MixinSpriteContents {
+public class SpriteContentsMixin {
     @Mutable
     @Shadow
     @Final

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/world/storage/ClientChunkMapMixin.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.features.chunk_rendering;
+package me.jellysquid.mods.sodium.mixin.features.world.storage;
 
 import net.minecraft.client.world.ClientChunkManager;
 import net.minecraft.util.math.MathHelper;
@@ -11,7 +11,7 @@
 import java.util.concurrent.atomic.AtomicReferenceArray;
 
 @Mixin(targets = "net/minecraft/client/world/ClientChunkManager$ClientChunkMap")
-public class MixinClientChunkMap {
+public class ClientChunkMapMixin {
     @Mutable
     @Shadow
     @Final
@@ -27,6 +27,7 @@ public class MixinClientChunkMap {
     @Final
     int radius;
 
+    @Unique
     private int factor;
 
     @Inject(method = "<init>", at = @At("RETURN"))

File: src/main/java/me/jellysquid/mods/sodium/mixin/workarounds/context_creation/MixinWindow.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.workarounds;
+package me.jellysquid.mods.sodium.mixin.workarounds.context_creation;
 
 import me.jellysquid.mods.sodium.client.util.workarounds.DriverWorkarounds;
 import net.minecraft.client.util.Window;

File: src/main/java/me/jellysquid/mods/sodium/mixin/workarounds/event_loop/RenderSystemMixin.java
Patch:
@@ -1,12 +1,12 @@
-package me.jellysquid.mods.sodium.mixin.core;
+package me.jellysquid.mods.sodium.mixin.workarounds.event_loop;
 
 import com.mojang.blaze3d.systems.RenderSystem;
 import org.spongepowered.asm.mixin.Mixin;
 import org.spongepowered.asm.mixin.injection.At;
 import org.spongepowered.asm.mixin.injection.Redirect;
 
 @Mixin(RenderSystem.class)
-public class MixinRenderSystem {
+public class RenderSystemMixin {
     @Redirect(method = "flipFrame", at = @At(value = "INVOKE", target = "Lcom/mojang/blaze3d/systems/RenderSystem;pollEvents()V", ordinal = 0))
     private static void removeFirstPoll() {
         // noop

File: src/main/java/me/jellysquid/mods/sodium/client/util/workarounds/platform/windows/WindowsProcessHacks.java
Patch:
@@ -58,16 +58,16 @@ private static class CommandLineHook {
         private final String cmdline;
         private final ByteBuffer cmdlineBuf;
 
-        private boolean active;
+        private boolean active = true;
 
         private CommandLineHook(String cmdline, ByteBuffer cmdlineBuf) {
             this.cmdline = cmdline;
             this.cmdlineBuf = cmdlineBuf;
         }
 
         public void uninstall() {
-            if (this.active) {
-                throw new IllegalStateException();
+            if (!this.active) {
+                throw new IllegalStateException("Hook was already uninstalled");
             }
 
             // Restore the original value of the command line arguments

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/ChunkBuildBuffers.java
Patch:
@@ -93,7 +93,7 @@ public ChunkMeshData createMesh(TerrainRenderPass pass) {
 
         mergedBufferBuilder.flip();
 
-        return new ChunkMeshData(mergedBuffer, vertexRanges);
+        return new ChunkMeshData(mergedBuffer, vertexRanges, vertexCount);
     }
 
     public void destroy() {

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptionPages.java
Patch:
@@ -11,6 +11,7 @@
 import me.jellysquid.mods.sodium.client.gui.options.control.TickBoxControl;
 import me.jellysquid.mods.sodium.client.gui.options.storage.MinecraftOptionsStorage;
 import me.jellysquid.mods.sodium.client.gui.options.storage.SodiumOptionsStorage;
+import me.jellysquid.mods.sodium.client.util.workarounds.Workarounds;
 import net.minecraft.client.MinecraftClient;
 import net.minecraft.client.gl.Framebuffer;
 import net.minecraft.client.option.*;
@@ -314,7 +315,8 @@ public static OptionPage performance() {
 
     private static boolean supportsNoErrorContext() {
         GLCapabilities capabilities = GL.getCapabilities();
-        return capabilities.OpenGL46 || capabilities.GL_KHR_no_error;
+        return (capabilities.OpenGL46 || capabilities.GL_KHR_no_error)
+                && !Workarounds.isWorkaroundEnabled(Workarounds.Reference.NO_ERROR_CONTEXT_UNSUPPORTED);
     }
 
     public static OptionPage advanced() {

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptions.java
Patch:
@@ -3,6 +3,7 @@
 import com.google.gson.FieldNamingPolicy;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
+import com.google.gson.annotations.SerializedName;
 import me.jellysquid.mods.sodium.client.gui.options.TextProvider;
 import net.fabricmc.loader.api.FabricLoader;
 import net.minecraft.client.option.GraphicsMode;
@@ -36,7 +37,8 @@ public static SodiumGameOptions defaults() {
 
     public static class PerformanceSettings {
         public int chunkBuilderThreads = 0;
-        public boolean alwaysDeferChunkUpdates = false;
+        @SerializedName("always_defer_chunk_updates_v2") // this will reset the option in older configs
+        public boolean alwaysDeferChunkUpdates = true;
 
         public boolean animateOnlyVisibleTextures = true;
         public boolean useEntityCulling = true;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/pipeline/BlockRenderer.java
Patch:
@@ -138,7 +138,7 @@ private void writeGeometry(BlockRenderContext ctx,
                                QuadLightData light,
                                ChunkRenderBounds.Builder bounds)
     {
-        ModelQuadOrientation orientation = ModelQuadOrientation.orientByBrightness(light.br);
+        ModelQuadOrientation orientation = ModelQuadOrientation.orientByBrightness(light.br, light.lm);
         var vertices = this.vertices;
 
         ModelQuadFacing normalFace = quad.getNormalFace();

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/MixinWindow.java
Patch:
@@ -1,6 +1,7 @@
 package me.jellysquid.mods.sodium.mixin.core;
 
 import me.jellysquid.mods.sodium.client.SodiumClientMod;
+import me.jellysquid.mods.sodium.client.util.workarounds.Workarounds;
 import net.minecraft.client.util.Window;
 import org.lwjgl.glfw.GLFW;
 import org.spongepowered.asm.mixin.Mixin;
@@ -12,7 +13,8 @@
 public class MixinWindow {
     @Inject(method = "<init>", at = @At(value = "INVOKE", target = "Lorg/lwjgl/glfw/GLFW;glfwCreateWindow(IILjava/lang/CharSequence;JJ)J", shift = At.Shift.BEFORE))
     public void setAdditionalWindowHints(CallbackInfo ci) {
-        if (SodiumClientMod.options().performance.useNoErrorGLContext) {
+        if (SodiumClientMod.options().performance.useNoErrorGLContext &&
+                !Workarounds.isWorkaroundEnabled(Workarounds.Reference.NO_ERROR_CONTEXT_UNSUPPORTED)) {
             GLFW.glfwWindowHint(GLFW.GLFW_CONTEXT_NO_ERROR, GLFW.GLFW_TRUE);
         }
     }

File: src/main/java/me/jellysquid/mods/sodium/client/render/SodiumWorldRenderer.java
Patch:
@@ -361,9 +361,9 @@ public boolean isBoxVisible(double x1, double y1, double z1, double x2, double y
     }
 
     public String getChunksDebugString() {
-        // C: visible/total
+        // C: visible/total D: distance
         // TODO: add dirty and queued counts
-        return String.format("C: %s/%s", this.renderSectionManager.getVisibleChunkCount(), this.renderSectionManager.getTotalSections());
+        return String.format("C: %d/%d D: %d", this.renderSectionManager.getVisibleChunkCount(), this.renderSectionManager.getTotalSections(), this.renderDistance);
     }
 
     /**

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/control/ControlElement.java
Patch:
@@ -7,7 +7,6 @@
 import net.minecraft.client.gui.ScreenRect;
 import net.minecraft.client.gui.navigation.GuiNavigation;
 import net.minecraft.client.gui.navigation.GuiNavigationPath;
-import net.minecraft.client.util.math.MatrixStack;
 import net.minecraft.util.Formatting;
 import org.jetbrains.annotations.Nullable;
 
@@ -42,11 +41,11 @@ public void render(DrawContext drawContext, int mouseX, int mouseY, float delta)
 
         this.hovered = this.dim.containsCursor(mouseX, mouseY);
 
-        this.drawRect(this.dim.x(), this.dim.y(), this.dim.getLimitX(), this.dim.getLimitY(), this.hovered ? 0xE0000000 : 0x90000000);
+        this.drawRect(drawContext, this.dim.x(), this.dim.y(), this.dim.getLimitX(), this.dim.getLimitY(), this.hovered ? 0xE0000000 : 0x90000000);
         this.drawString(drawContext, label, this.dim.x() + 6, this.dim.getCenterY() - 4, 0xFFFFFFFF);
 
         if (this.isFocused()) {
-            this.drawBorder(this.dim.x(), this.dim.y(), this.dim.getLimitX(), this.dim.getLimitY());
+            this.drawBorder(drawContext, this.dim.x(), this.dim.y(), this.dim.getLimitX(), this.dim.getLimitY(), -1);
         }
     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/control/ControlValueFormatter.java
Patch:
@@ -38,7 +38,7 @@ static ControlValueFormatter percentage() {
     }
 
     static ControlValueFormatter multiplier() {
-        return (v) -> Text.literal(v + "%");
+        return (v) -> Text.literal(v + "x");
     }
 
     static ControlValueFormatter quantityOrDisabled(String name, String disableText) {

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/control/ControlElement.java
Patch:
@@ -7,7 +7,6 @@
 import net.minecraft.client.gui.ScreenRect;
 import net.minecraft.client.gui.navigation.GuiNavigation;
 import net.minecraft.client.gui.navigation.GuiNavigationPath;
-import net.minecraft.client.util.math.MatrixStack;
 import net.minecraft.util.Formatting;
 import org.jetbrains.annotations.Nullable;
 
@@ -42,11 +41,11 @@ public void render(DrawContext drawContext, int mouseX, int mouseY, float delta)
 
         this.hovered = this.dim.containsCursor(mouseX, mouseY);
 
-        this.drawRect(this.dim.x(), this.dim.y(), this.dim.getLimitX(), this.dim.getLimitY(), this.hovered ? 0xE0000000 : 0x90000000);
+        this.drawRect(drawContext, this.dim.x(), this.dim.y(), this.dim.getLimitX(), this.dim.getLimitY(), this.hovered ? 0xE0000000 : 0x90000000);
         this.drawString(drawContext, label, this.dim.x() + 6, this.dim.getCenterY() - 4, 0xFFFFFFFF);
 
         if (this.isFocused()) {
-            this.drawBorder(this.dim.x(), this.dim.y(), this.dim.getLimitX(), this.dim.getLimitY());
+            this.drawBorder(drawContext, this.dim.x(), this.dim.y(), this.dim.getLimitX(), this.dim.getLimitY(), -1);
         }
     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/pipeline/FluidRenderer.java
Patch:
@@ -479,7 +479,7 @@ private float fluidHeight(BlockRenderView world, Fluid fluid, BlockPos blockPos,
                 return fluidState.getHeight();
             }
         }
-        if (!blockState.isOpaque()) {
+        if (!blockState.isSolid()) {
             return 0.0f;
         }
         return -1.0f;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/pipeline/FluidRenderer.java
Patch:
@@ -479,7 +479,7 @@ private float fluidHeight(BlockRenderView world, Fluid fluid, BlockPos blockPos,
                 return fluidState.getHeight();
             }
         }
-        if (!blockState.isOpaque()) {
+        if (!blockState.isSolid()) {
             return 0.0f;
         }
         return -1.0f;

File: src/main/java/me/jellysquid/mods/sodium/client/model/light/smooth/SmoothLightPipeline.java
Patch:
@@ -13,12 +13,11 @@
  * A light pipeline which produces smooth interpolated lighting and ambient occlusion for model quads. This
  * implementation makes a number of improvements over vanilla's own "smooth lighting" option. In no particular order:
  *
- * - Ambient occlusion of block slopes underwater no longer produces broken results (fixes MC-149211)
- * - Smooth lighting now works when underwater (fixes MC-68129)
  * - Corner blocks are now selected from the correct set of neighbors above block faces (fixes MC-148689 and MC-12558)
- * - Shading issues caused by anisotropy are fixed by re-orientating quads to a consistent ordering (fixes MC-136302)
+ * - Shading issues caused by anisotropy are fixed by re-orientating quads to a consistent ordering (fixes MC-138211)
  * - Inset block faces are correctly shaded by their neighbors, fixing a number of problems with non-full blocks such as
  *   grass paths (fixes MC-11783 and MC-108621)
+ * - Blocks next to emissive blocks are too bright (MC-260989)
  * - Synchronization issues between the main render thread's light engine and chunk build worker threads are corrected
  *   by copying light data alongside block states, fixing a number of inconsistencies in baked chunks (no open issue)
  *

File: src/main/java/me/jellysquid/mods/sodium/client/model/quad/properties/ModelQuadOrientation.java
Patch:
@@ -26,7 +26,7 @@ public int getVertexIndex(int idx) {
      */
     public static ModelQuadOrientation orientByBrightness(float[] brightnesses) {
         // If one side of the quad is brighter, flip the sides
-        if (brightnesses[0] + brightnesses[2] > brightnesses[1] + brightnesses[3]) {
+        if (brightnesses[0] + brightnesses[2] >= brightnesses[1] + brightnesses[3]) {
             return NORMAL;
         } else {
             return FLIP;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/pipeline/BlockOcclusionCache.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.client.render.occlusion;
+package me.jellysquid.mods.sodium.client.render.chunk.compile.pipeline;
 
 import it.unimi.dsi.fastutil.objects.Object2ByteLinkedOpenHashMap;
 import net.minecraft.block.BlockState;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/pipeline/BlockRenderer.java
Patch:
@@ -15,13 +15,12 @@
 import me.jellysquid.mods.sodium.client.render.chunk.terrain.material.DefaultMaterials;
 import me.jellysquid.mods.sodium.client.render.chunk.terrain.material.Material;
 import me.jellysquid.mods.sodium.client.render.chunk.vertex.format.ChunkVertexEncoder;
-import me.jellysquid.mods.sodium.client.render.occlusion.BlockOcclusionCache;
 import me.jellysquid.mods.sodium.common.util.DirectionUtil;
 import net.caffeinemc.mods.sodium.api.util.ColorABGR;
 import net.minecraft.block.BlockState;
 import net.minecraft.client.MinecraftClient;
 import net.minecraft.client.render.model.BakedModel;
-import net.minecraft.client.render.model.BakedQuad;
+import net.minecraft.client.render.model.BakedQuad;gi
 import net.minecraft.client.texture.Sprite;
 import net.minecraft.util.math.Direction;
 import net.minecraft.util.math.Vec3d;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/pipeline/FluidRenderer.java
Patch:
@@ -249,7 +249,7 @@ public void render(WorldSlice world, FluidState fluidState, BlockPos pos, BlockP
 
         }
 
-        quad.setFlags(ModelQuadFlags.IS_ALIGNED);
+        quad.setFlags(ModelQuadFlags.IS_PARALLEL | ModelQuadFlags.IS_ALIGNED);
 
         for (Direction dir : DirectionUtil.HORIZONTAL_DIRECTIONS) {
             float c1;

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptionPages.java
Patch:
@@ -193,7 +193,7 @@ public static OptionPage quality() {
                 .add(OptionImpl.createBuilder(int.class, vanillaOpts)
                         .setName(Text.translatable("options.biomeBlendRadius"))
                         .setTooltip(Text.translatable("sodium.options.biome_blend.tooltip"))
-                        .setControl(option -> new SliderControl(option, 0, 7, 1, ControlValueFormatter.biomeBlend()))
+                        .setControl(option -> new SliderControl(option, 1, 7, 1, ControlValueFormatter.biomeBlend()))
                         .setBinding((opts, value) -> opts.getBiomeBlendRadius().setValue(value), opts -> opts.getBiomeBlendRadius().getValue())
                         .setImpact(OptionImpact.LOW)
                         .setFlags(OptionFlag.REQUIRES_RENDERER_RELOAD)

File: src/main/java/me/jellysquid/mods/sodium/client/model/color/interop/ItemColorsExtended.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.client.world.biome;
+package me.jellysquid.mods.sodium.client.model.color.interop;
 
 import net.minecraft.client.color.item.ItemColorProvider;
 import net.minecraft.item.ItemStack;

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/model/MixinItemColors.java
Patch:
@@ -2,7 +2,7 @@
 
 import it.unimi.dsi.fastutil.objects.Reference2ReferenceMap;
 import it.unimi.dsi.fastutil.objects.Reference2ReferenceOpenHashMap;
-import me.jellysquid.mods.sodium.client.world.biome.ItemColorsExtended;
+import me.jellysquid.mods.sodium.client.model.color.interop.ItemColorsExtended;
 import net.minecraft.client.color.item.ItemColorProvider;
 import net.minecraft.client.color.item.ItemColors;
 import net.minecraft.item.ItemConvertible;

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/biome/MixinBiome.java
Patch:
@@ -1,6 +1,6 @@
 package me.jellysquid.mods.sodium.mixin.features.biome;
 
-import me.jellysquid.mods.sodium.client.render.biome.BiomeColorMaps;
+import me.jellysquid.mods.sodium.client.world.biome.BiomeColorMaps;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.world.biome.Biome;
 import net.minecraft.world.biome.BiomeEffects;

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/item/MixinItemRenderer.java
Patch:
@@ -3,7 +3,7 @@
 import me.jellysquid.mods.sodium.client.model.quad.BakedQuadView;
 import me.jellysquid.mods.sodium.client.render.immediate.model.BakedModelEncoder;
 import me.jellysquid.mods.sodium.client.render.texture.SpriteUtil;
-import me.jellysquid.mods.sodium.client.world.biome.ItemColorsExtended;
+import me.jellysquid.mods.sodium.client.model.color.interop.ItemColorsExtended;
 import me.jellysquid.mods.sodium.common.util.DirectionUtil;
 import net.caffeinemc.mods.sodium.api.util.ColorARGB;
 import net.caffeinemc.mods.sodium.api.vertex.buffer.VertexBufferWriter;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/RenderSectionManager.java
Patch:
@@ -127,7 +127,7 @@ public RenderSectionManager(SodiumWorldRenderer worldRenderer, ClientWorld world
     }
 
     public void reloadChunks(ChunkTracker tracker) {
-        tracker.getChunks()
+        tracker.getChunks(ChunkStatus.FLAG_HAS_BLOCK_DATA)
                 .forEach(pos -> this.onChunkAdded(ChunkPos.getPackedX(pos), ChunkPos.getPackedZ(pos)));
     }
 
@@ -192,7 +192,7 @@ private void iterateChunks(ChunkRenderListBuilder list, Camera camera, Frustum f
     }
 
     private void schedulePendingUpdates(RenderSection section) {
-        if (section.getPendingUpdate() == null || !this.tracker.hasData(section.getChunkX(), section.getChunkZ())) {
+        if (section.getPendingUpdate() == null || !this.tracker.hasMergedFlags(section.getChunkX(), section.getChunkZ(), ChunkStatus.FLAG_ALL)) {
             return;
         }
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/chunk_rendering/MixinWorldRenderer.java
Patch:
@@ -4,6 +4,7 @@
 import me.jellysquid.mods.sodium.client.gl.device.RenderDevice;
 import me.jellysquid.mods.sodium.client.render.SodiumWorldRenderer;
 import me.jellysquid.mods.sodium.client.util.FlawlessFrames;
+import me.jellysquid.mods.sodium.client.render.chunk.ChunkStatus;
 import me.jellysquid.mods.sodium.client.util.frustum.FrustumAdapter;
 import me.jellysquid.mods.sodium.client.world.WorldRendererExtended;
 import net.minecraft.client.MinecraftClient;
@@ -178,7 +179,7 @@ private void scheduleChunkRender(int x, int y, int z, boolean important) {
      */
     @Overwrite
     public boolean isRenderingReady(BlockPos pos) {
-        return this.renderer.doesChunkHaveData(pos.getX() >> 4, pos.getZ() >> 4);
+        return this.renderer.doesChunkHaveFlag(pos.getX() >> 4, pos.getZ() >> 4, ChunkStatus.FLAG_ALL);
     }
 
     @Inject(method = "reload()V", at = @At("RETURN"))

File: src/main/java/me/jellysquid/mods/sodium/client/SodiumClientMod.java
Patch:
@@ -2,7 +2,6 @@
 
 import me.jellysquid.mods.sodium.client.gui.SodiumGameOptions;
 import me.jellysquid.mods.sodium.client.util.FlawlessFrames;
-import me.jellysquid.mods.sodium.client.util.workarounds.DriverWorkarounds;
 import net.fabricmc.api.ClientModInitializer;
 import net.fabricmc.loader.api.FabricLoader;
 import net.fabricmc.loader.api.ModContainer;

File: src/main/java/me/jellysquid/mods/sodium/client/SodiumPreLaunch.java
Patch:
@@ -1,5 +1,6 @@
 package me.jellysquid.mods.sodium.client;
 
+import me.jellysquid.mods.sodium.client.util.workarounds.Workarounds;
 import net.fabricmc.loader.api.SemanticVersion;
 import net.fabricmc.loader.api.VersionParsingException;
 import net.fabricmc.loader.api.entrypoint.PreLaunchEntrypoint;
@@ -17,6 +18,8 @@ public class SodiumPreLaunch implements PreLaunchEntrypoint {
     @Override
     public void onPreLaunch() {
         checkJemalloc();
+
+        Workarounds.init();
     }
 
     private static void checkJemalloc() {

File: src/main/java/me/jellysquid/mods/sodium/client/gl/device/RenderDevice.java
Patch:
@@ -19,6 +19,8 @@ static void exitManagedCode() {
     void makeActive();
     void makeInactive();
 
+    boolean isActive();
+
     GLCapabilities getCapabilities();
 
     DeviceFunctions getDeviceFunctions();

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/texture_tracking/MixinDrawableHelper.java
Patch:
@@ -15,6 +15,7 @@ public class MixinDrawableHelper {
             "drawSprite(IIIIILnet/minecraft/client/texture/Sprite;)V",
             "drawSprite(IIIIILnet/minecraft/client/texture/Sprite;FFFF)V"
     }, at = @At("HEAD"))
+    // IDEA thinks this is an error, it's not. Don't change it.
     private void onHeadDrawSprite(int x, int y, int z, int width, int height, Sprite sprite, CallbackInfo ci) {
         SpriteUtil.markSpriteActive(sprite);
     }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/data/ChunkRenderData.java
Patch:
@@ -4,7 +4,7 @@
 import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import me.jellysquid.mods.sodium.client.render.chunk.RenderSectionFlags;
 import me.jellysquid.mods.sodium.client.render.chunk.terrain.TerrainRenderPass;
-import me.jellysquid.mods.sodium.client.render.texture.SpriteExtended;
+import me.jellysquid.mods.sodium.client.render.texture.SpriteContentsExtended;
 import net.minecraft.block.entity.BlockEntity;
 import net.minecraft.client.render.chunk.ChunkOcclusionData;
 import net.minecraft.client.texture.Sprite;
@@ -98,7 +98,7 @@ public void setOcclusionData(ChunkOcclusionData data) {
          * @param sprite The sprite
          */
         public void addSprite(Sprite sprite) {
-            if (((SpriteExtended) sprite.getContents()).hasAnimation()) {
+            if (((SpriteContentsExtended) sprite.getContents()).hasAnimation()) {
                 this.animatedSprites.add(sprite);
             }
         }

File: src/main/java/me/jellysquid/mods/sodium/client/render/texture/SpriteContentsExtended.java
Patch:
@@ -1,6 +1,6 @@
 package me.jellysquid.mods.sodium.client.render.texture;
 
-public interface SpriteExtended {
+public interface SpriteContentsExtended {
     void setActive(boolean b);
 
     boolean hasAnimation();

File: src/main/java/me/jellysquid/mods/sodium/client/render/texture/SpriteUtil.java
Patch:
@@ -4,8 +4,8 @@
 
 public class SpriteUtil {
     public static void markSpriteActive(Sprite sprite) {
-        if (sprite.getContents() instanceof SpriteExtended) {
-            ((SpriteExtended) sprite.getContents()).setActive(true);
+        if (sprite.getContents() instanceof SpriteContentsExtended) {
+            ((SpriteContentsExtended) sprite.getContents()).setActive(true);
         }
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/texture_tracking/MixinSpriteBillboardParticle.java
Patch:
@@ -1,6 +1,6 @@
 package me.jellysquid.mods.sodium.mixin.features.texture_tracking;
 
-import me.jellysquid.mods.sodium.client.render.texture.SpriteExtended;
+import me.jellysquid.mods.sodium.client.render.texture.SpriteContentsExtended;
 import me.jellysquid.mods.sodium.client.render.texture.SpriteUtil;
 import net.minecraft.client.particle.BillboardParticle;
 import net.minecraft.client.particle.SpriteBillboardParticle;
@@ -27,7 +27,7 @@ protected MixinSpriteBillboardParticle(ClientWorld world, double x, double y, do
 
     @Inject(method = "setSprite(Lnet/minecraft/client/texture/Sprite;)V", at = @At("RETURN"))
     private void afterSetSprite(Sprite sprite, CallbackInfo ci) {
-        this.shouldTickSprite = sprite != null && ((SpriteExtended) sprite.getContents()).hasAnimation();
+        this.shouldTickSprite = sprite != null && ((SpriteContentsExtended) sprite.getContents()).hasAnimation();
     }
 
     @Override

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/texture_tracking/MixinSpriteContentsAnimatorImpl.java
Patch:
@@ -1,7 +1,7 @@
 package me.jellysquid.mods.sodium.mixin.features.texture_tracking;
 
 import me.jellysquid.mods.sodium.client.SodiumClientMod;
-import me.jellysquid.mods.sodium.client.render.texture.SpriteExtended;
+import me.jellysquid.mods.sodium.client.render.texture.SpriteContentsExtended;
 import net.minecraft.client.texture.SpriteContents;
 import org.spongepowered.asm.mixin.Mixin;
 import org.spongepowered.asm.mixin.Unique;
@@ -25,7 +25,7 @@ public void assignParent(SpriteContents spriteContents, SpriteContents.Animation
 
     @Inject(method = "tick", at = @At("HEAD"), cancellable = true)
     private void preTick(CallbackInfo ci) {
-        SpriteExtended parent = (SpriteExtended) this.parent;
+        SpriteContentsExtended parent = (SpriteContentsExtended) this.parent;
 
         boolean onDemand = SodiumClientMod.options().performance.animateOnlyVisibleTextures;
 
@@ -36,7 +36,7 @@ private void preTick(CallbackInfo ci) {
 
     @Inject(method = "tick", at = @At("TAIL"))
     private void postTick(CallbackInfo ci) {
-        SpriteExtended parent = (SpriteExtended) this.parent;
+        SpriteContentsExtended parent = (SpriteContentsExtended) this.parent;
         parent.setActive(false);
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/model/quad/BakedQuadView.java
Patch:
@@ -8,6 +8,5 @@ public interface BakedQuadView extends ModelQuadView {
 
     Direction getLightFace();
 
-    // NOTE: BakedQuad already defines this method, so we do not re-implement it in our mixin.
     boolean hasShade();
 }

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/control/ControlElement.java
Patch:
@@ -3,7 +3,7 @@
 import me.jellysquid.mods.sodium.client.gui.options.Option;
 import me.jellysquid.mods.sodium.client.gui.widgets.AbstractWidget;
 import me.jellysquid.mods.sodium.client.util.Dim2i;
-import net.minecraft.client.gui.navigation.FocusedRect;
+import net.minecraft.client.gui.ScreenRect;
 import net.minecraft.client.gui.navigation.GuiNavigation;
 import net.minecraft.client.gui.navigation.GuiNavigationPath;
 import net.minecraft.client.util.math.MatrixStack;
@@ -65,7 +65,7 @@ public Dim2i getDimensions() {
     }
 
     @Override
-    public FocusedRect getNavigationFocus() {
-        return new FocusedRect(this.dim.x(), this.dim.y(), this.dim.width(), this.dim.height());
+    public ScreenRect getNavigationFocus() {
+        return new ScreenRect(this.dim.x(), this.dim.y(), this.dim.width(), this.dim.height());
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/gui/widgets/FlatButtonWidget.java
Patch:
@@ -2,7 +2,7 @@
 
 import me.jellysquid.mods.sodium.client.util.Dim2i;
 import net.minecraft.client.gui.Drawable;
-import net.minecraft.client.gui.navigation.FocusedRect;
+import net.minecraft.client.gui.ScreenRect;
 import net.minecraft.client.gui.navigation.GuiNavigation;
 import net.minecraft.client.gui.navigation.GuiNavigationPath;
 import net.minecraft.client.util.InputUtil;
@@ -111,7 +111,7 @@ public Text getLabel() {
     }
 
     @Override
-    public FocusedRect getNavigationFocus() {
-        return new FocusedRect(this.dim.x(), this.dim.y(), this.dim.width(), this.dim.height());
+    public ScreenRect getNavigationFocus() {
+        return new ScreenRect(this.dim.x(), this.dim.y(), this.dim.width(), this.dim.height());
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/util/color/ColorSRGB.java
Patch:
@@ -83,7 +83,7 @@ public static float srgbToLinear(int c) {
      * @param a The alpha-component in linear RGB space (0 to 255)
      */
     public static int linearToSrgb(float r, float g, float b, int a) {
-        return ColorHelper.Abgr.getAbgr(a, linearToSrgb(b), linearToSrgb(g), linearToSrgb(r));
+        return ColorHelper.Argb.getArgb(a, linearToSrgb(r), linearToSrgb(g), linearToSrgb(b));
     }
 
     /**

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/biome/MixinBiome.java
Patch:
@@ -19,8 +19,8 @@ public abstract class MixinBiome {
     public abstract float getTemperature();
 
     @Shadow
-    public abstract float getDownfall();
-
+    @Final
+    private Biome.Weather weather;
     @Unique
     private boolean hasCustomGrassColor;
 
@@ -89,7 +89,7 @@ public int getFoliageColor() {
 
     private int getDefaultColorIndex() {
         double temperature = MathHelper.clamp(this.getTemperature(), 0.0F, 1.0F);
-        double humidity = MathHelper.clamp(this.getDownfall(), 0.0F, 1.0F);
+        double humidity = MathHelper.clamp(this.weather.downfall, 0.0F, 1.0F);
 
         return BiomeColorMaps.getIndex(temperature, humidity);
     }

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/control/SliderControl.java
Patch:
@@ -70,7 +70,7 @@ public Button(Option<Integer> option, Dim2i dim, int min, int max, int interval,
         public void render(MatrixStack matrixStack, int mouseX, int mouseY, float delta) {
             super.render(matrixStack, mouseX, mouseY, delta);
 
-            if (this.option.isAvailable() && this.hovered) {
+            if (this.option.isAvailable() && (this.hovered || this.isFocused())) {
                 this.renderSlider(matrixStack);
             } else {
                 this.renderStandaloneValue(matrixStack);
@@ -100,7 +100,7 @@ private void renderSlider(MatrixStack matrixStack) {
             double thumbOffset = MathHelper.clamp((double) (this.getIntValue() - this.min) / this.range * sliderWidth, 0, sliderWidth);
 
             double thumbX = sliderX + thumbOffset - THUMB_WIDTH;
-            double trackY = sliderY + (sliderHeight / 2) - ((double) TRACK_HEIGHT / 2);
+            double trackY = sliderY + (sliderHeight / 2f) - ((double) TRACK_HEIGHT / 2);
 
             this.drawRect(thumbX, sliderY, thumbX + (THUMB_WIDTH * 2), sliderY + sliderHeight, 0xFFFFFFFF);
             this.drawRect(sliderX, trackY, sliderX + sliderWidth, trackY + TRACK_HEIGHT, 0xFFFFFFFF);
@@ -139,7 +139,7 @@ private void setValueFromMouse(double d) {
             this.setValue((d - (double) this.sliderBounds.getX()) / (double) this.sliderBounds.getWidth());
         }
 
-        private void setValue(double d) {
+        public void setValue(double d) {
             this.thumbPosition = MathHelper.clamp(d, 0.0D, 1.0D);
 
             int value = this.getIntValue();

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/control/SliderControl.java
Patch:
@@ -70,7 +70,7 @@ public Button(Option<Integer> option, Dim2i dim, int min, int max, int interval,
         public void render(MatrixStack matrixStack, int mouseX, int mouseY, float delta) {
             super.render(matrixStack, mouseX, mouseY, delta);
 
-            if (this.option.isAvailable() && this.hovered) {
+            if (this.option.isAvailable() && (this.hovered || this.isFocused())) {
                 this.renderSlider(matrixStack);
             } else {
                 this.renderStandaloneValue(matrixStack);
@@ -100,7 +100,7 @@ private void renderSlider(MatrixStack matrixStack) {
             double thumbOffset = MathHelper.clamp((double) (this.getIntValue() - this.min) / this.range * sliderWidth, 0, sliderWidth);
 
             double thumbX = sliderX + thumbOffset - THUMB_WIDTH;
-            double trackY = sliderY + (sliderHeight / 2) - ((double) TRACK_HEIGHT / 2);
+            double trackY = sliderY + (sliderHeight / 2f) - ((double) TRACK_HEIGHT / 2);
 
             this.drawRect(thumbX, sliderY, thumbX + (THUMB_WIDTH * 2), sliderY + sliderHeight, 0xFFFFFFFF);
             this.drawRect(sliderX, trackY, sliderX + sliderWidth, trackY + TRACK_HEIGHT, 0xFFFFFFFF);
@@ -139,7 +139,7 @@ private void setValueFromMouse(double d) {
             this.setValue((d - (double) this.sliderBounds.getX()) / (double) this.sliderBounds.getWidth());
         }
 
-        private void setValue(double d) {
+        public void setValue(double d) {
             this.thumbPosition = MathHelper.clamp(d, 0.0D, 1.0D);
 
             int value = this.getIntValue();

File: src/main/java/me/jellysquid/mods/sodium/client/util/color/ColorSRGB.java
Patch:
@@ -82,7 +82,7 @@ public static float srgbToLinear(int c) {
      * @param a The alpha-component in linear RGB space (0 to 255)
      */
     public static int linearToSrgb(float r, float g, float b, int a) {
-        return NativeImage.packColor(a, linearToSrgb(r), linearToSrgb(g), linearToSrgb(b));
+        return NativeImage.packColor(a, linearToSrgb(b), linearToSrgb(g), linearToSrgb(r));
     }
 
     /**

File: src/main/java/me/jellysquid/mods/sodium/client/gl/device/MultiDrawBatch.java
Patch:
@@ -54,7 +54,7 @@ public void add(long pointer, int count, int baseVertex) {
             throw new BufferUnderflowException();
         }
 
-        MemoryUtil.memPutLong(this.pPointer + (this.count * Pointer.POINTER_SIZE), pointer);
+        MemoryUtil.memPutAddress(this.pPointer + (this.count * Pointer.POINTER_SIZE), pointer);
         MemoryUtil.memPutInt(this.pCount + (this.count * Integer.BYTES), count);
         MemoryUtil.memPutInt(this.pBaseVertex + (this.count * Integer.BYTES), baseVertex);
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/buffers/BakedChunkModelBuilder.java
Patch:
@@ -29,7 +29,7 @@ public IndexBufferBuilder getIndexBuffer(ModelQuadFacing facing) {
 
     @Override
     public void addSprite(Sprite sprite) {
-//        this.renderData.addSprite(sprite);
+        this.renderData.addSprite(sprite);
     }
 
     public IndexBufferBuilder[] getIndexBuffers() {

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/RegionChunkRenderer.java
Patch:
@@ -52,7 +52,7 @@ public RegionChunkRenderer(RenderDevice device, ChunkVertexType vertexType) {
     public void render(ChunkRenderMatrices matrices, CommandList commandList,
                        ChunkRenderList list, RenderPass pass,
                        ChunkCameraContext camera, RenderRegionManager regions) {
-        pass.begin();
+        pass.startDrawing();
 
         super.begin(pass);
 
@@ -76,7 +76,7 @@ public void render(ChunkRenderMatrices matrices, CommandList commandList,
 
         super.end();
 
-        pass.end();
+        pass.endDrawing();
     }
 
     private boolean buildDrawBatches(RenderRegion.RenderRegionStorage storage, List<RenderSection> sections, RenderPass pass, ChunkCameraContext camera) {

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/passes/RenderPass.java
Patch:
@@ -21,12 +21,12 @@ public boolean isReverseOrder() {
     }
 
     @Deprecated
-    public void begin() {
+    public void startDrawing() {
         this.layer.startDrawing();
     }
 
     @Deprecated
-    public void end() {
+    public void endDrawing() {
         this.layer.endDrawing();
     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/region/RenderRegionManager.java
Patch:
@@ -108,7 +108,7 @@ private void upload(CommandList commandList, RenderRegion region, List<ChunkBuil
         // Collect the upload results
         for (PendingSectionUpload upload : sectionUploads) {
             region.createStorage(upload.pass)
-                    .setState(upload.section, new ChunkGraphicsState(upload.vertexUpload.getResult(), upload.indicesUpload.getResult(), upload.meshData));
+                    .replaceState(upload.section, new ChunkGraphicsState(upload.vertexUpload.getResult(), upload.indicesUpload.getResult(), upload.meshData));
         }
     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/passes/BlockRenderPass.java
Patch:
@@ -6,7 +6,7 @@
 public enum BlockRenderPass {
     SOLID(RenderLayer.getSolid(), false, 0.0f),
     CUTOUT(RenderLayer.getCutout(), false, 0.1f),
-    CUTOUT_MIPPED(RenderLayer.getCutoutMipped(), false, 0.5f),
+    CUTOUT_MIPPED(RenderLayer.getCutoutMipped(), false, 0.1f),
     TRANSLUCENT(RenderLayer.getTranslucent(), true, 0.0f),
     TRIPWIRE(RenderLayer.getTripwire(), true, 0.1f);
 

File: src/main/java/me/jellysquid/mods/sodium/common/config/SodiumConfig.java
Patch:
@@ -43,6 +43,7 @@ private SodiumConfig() {
         this.addMixinRule("features.gui.font", true);
         this.addMixinRule("features.item", true);
         this.addMixinRule("features.matrix_stack", true);
+        this.addMixinRule("features.mipmaps", true);
         this.addMixinRule("features.model", true);
         this.addMixinRule("features.options", true);
         this.addMixinRule("features.particle", true);

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptions.java
Patch:
@@ -43,6 +43,7 @@ public static class PerformanceSettings {
         public boolean useEntityCulling = true;
         public boolean useFogOcclusion = true;
         public boolean useBlockFaceCulling = true;
+        public boolean useNoErrorGLContext = true;
     }
 
     public static class AdvancedSettings {

File: src/main/java/me/jellysquid/mods/sodium/client/util/GeometrySort.java
Patch:
@@ -61,7 +61,7 @@ public static void mergeSort(final int[] indices, final int from, final int to,
 
         // If list is already sorted, just copy from supp to indices. This is an
         // optimization that results in faster sorts for nearly ordered lists.
-        if (Floats.compare(distance[supp[mid - 1]], distance[supp[mid]]) <= 0) {
+        if (Floats.compare(distance[supp[mid]], distance[supp[mid - 1]]) <= 0) {
             System.arraycopy(supp, from, indices, from, len);
             return;
         }

File: src/main/java/me/jellysquid/mods/sodium/client/model/ModelCuboidAccessor.java
Patch:
@@ -1,6 +1,6 @@
 package me.jellysquid.mods.sodium.client.model;
 
-import me.jellysquid.mods.sodium.client.render.ModelCuboid;
+import me.jellysquid.mods.sodium.client.render.immediate.model.ModelCuboid;
 
 public interface ModelCuboidAccessor {
     ModelCuboid copy();

File: src/main/java/me/jellysquid/mods/sodium/client/render/immediate/model/ModelCuboid.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.client.render;
+package me.jellysquid.mods.sodium.client.render.immediate.model;
 
 import me.jellysquid.mods.sodium.client.util.Norm3b;
 import net.minecraft.util.math.Direction;

File: src/main/java/me/jellysquid/mods/sodium/client/render/vertex/serializers/VertexSerializer.java
Patch:
@@ -1,5 +1,5 @@
 package me.jellysquid.mods.sodium.client.render.vertex.serializers;
 
 public interface VertexSerializer {
-    void serialize(long srcBuffer, int srcStride, long dstBuffer, int dstStride, int count);
+    void serialize(long srcBuffer, long dstBuffer, int count);
 }

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/clouds/MixinWorldRenderer.java
Patch:
@@ -1,6 +1,6 @@
 package me.jellysquid.mods.sodium.mixin.features.clouds;
 
-import me.jellysquid.mods.sodium.client.render.CloudRenderer;
+import me.jellysquid.mods.sodium.client.render.immediate.CloudRenderer;
 import net.minecraft.client.MinecraftClient;
 import net.minecraft.client.render.WorldRenderer;
 import net.minecraft.client.util.math.MatrixStack;

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/entity/fast_render/MixinCuboid.java
Patch:
@@ -1,7 +1,7 @@
 package me.jellysquid.mods.sodium.mixin.features.entity.fast_render;
 
 import me.jellysquid.mods.sodium.client.model.ModelCuboidAccessor;
-import me.jellysquid.mods.sodium.client.render.ModelCuboid;
+import me.jellysquid.mods.sodium.client.render.immediate.model.ModelCuboid;
 import net.minecraft.client.model.ModelPart;
 import org.objectweb.asm.Opcodes;
 import org.spongepowered.asm.mixin.Mixin;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/ChunkBuilder.java
Patch:
@@ -116,6 +116,7 @@ public void stopWorkers() {
         // Delete any queued tasks and resources attached to them
         for (WrappedTask job : this.buildQueue) {
             job.future.cancel(true);
+            job.task.releaseResources();
         }
 
         // Delete any results in the deferred queue
@@ -288,6 +289,8 @@ private static void processJob(WrappedTask job, ChunkBuildContext context) {
             job.future.completeExceptionally(e);
             e.printStackTrace();
             return;
+        } finally {
+            job.task.releaseResources();
         }
 
         // The result can be null if the task is cancelled

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/tasks/ChunkRenderBuildTask.java
Patch:
@@ -25,4 +25,6 @@ public abstract class ChunkRenderBuildTask {
      *         if the task was cancelled.
      */
     public abstract ChunkBuildResult performBuild(ChunkBuildContext context, CancellationSource cancellationSource);
+
+    public abstract void releaseResources();
 }

File: src/main/java/me/jellysquid/mods/sodium/client/util/workarounds/DriverWorkarounds.java
Patch:
@@ -19,7 +19,7 @@ public static void init() {
         DriverProbeResult result;
 
         try {
-            result = DriverProbe.launchProbe();
+            result = DriverProbeLauncher.launchProbe();
         } catch (Throwable t) {
             LOGGER.error("Failed to launch driver probe", t);
             return;

File: src/main/java/me/jellysquid/mods/sodium/client/util/workarounds/DriverWorkarounds.java
Patch:
@@ -11,7 +11,7 @@
 public class DriverWorkarounds {
     private static final Logger LOGGER = LoggerFactory.getLogger("Sodium");
 
-    private static final AtomicReference<Set<Reference>> ACTIVE_WORKAROUNDS = new AtomicReference<>();
+    private static final AtomicReference<Set<Reference>> ACTIVE_WORKAROUNDS = new AtomicReference<>(EnumSet.noneOf(Reference.class));
 
     public static void init() {
         LOGGER.info("Launching a new process to probe the system configuration!");

File: src/main/java/me/jellysquid/mods/sodium/client/util/workarounds/DriverProbe.java
Patch:
@@ -135,7 +135,7 @@ private static String getClasspathEntry(Class<?> clazz) {
 
     private static String getBaseDirectoryForFileUrl(URL resource, Class<?> clazz) {
         var pathFragment = clazz.getName()
-                .replace('.', File.separatorChar) + ".class";
+                .replace('.', '/') + ".class";
         var path = resource.getPath();
 
         var idx = path.lastIndexOf(pathFragment);

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/clouds/MixinWorldRenderer.java
Patch:
@@ -39,7 +39,7 @@ public void renderClouds(MatrixStack matrices, Matrix4f projectionMatrix, float
             this.cloudRenderer = new CloudRenderer(client.getResourceManager());
         }
 
-        this.cloudRenderer.render(this.world, matrices, projectionMatrix, this.ticks, tickDelta, x, y, z);
+        this.cloudRenderer.render(this.world, this.client.player, matrices, projectionMatrix, this.ticks, tickDelta, x, y, z);
     }
 
     @Inject(method = "reload(Lnet/minecraft/resource/ResourceManager;)V", at = @At("RETURN"))

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/data/ChunkRenderData.java
Patch:
@@ -2,6 +2,7 @@
 
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
+import me.jellysquid.mods.sodium.client.render.texture.SpriteExtended;
 import net.minecraft.block.entity.BlockEntity;
 import net.minecraft.client.render.chunk.ChunkOcclusionData;
 import net.minecraft.client.texture.Sprite;
@@ -84,7 +85,7 @@ public void setOcclusionData(ChunkOcclusionData data) {
          * @param sprite The sprite
          */
         public void addSprite(Sprite sprite) {
-            if (sprite.createAnimation() != null) {
+            if (((SpriteExtended) sprite.getContents()).hasAnimation()) {
                 this.animatedSprites.add(sprite);
             }
         }

File: src/main/java/me/jellysquid/mods/sodium/client/render/texture/SpriteExtended.java
Patch:
@@ -3,5 +3,7 @@
 public interface SpriteExtended {
     void setActive(boolean b);
 
+    boolean hasAnimation();
+
     boolean isActive();
 }

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/texture_tracking/MixinSpriteBillboardParticle.java
Patch:
@@ -1,5 +1,6 @@
 package me.jellysquid.mods.sodium.mixin.features.texture_tracking;
 
+import me.jellysquid.mods.sodium.client.render.texture.SpriteExtended;
 import me.jellysquid.mods.sodium.client.render.texture.SpriteUtil;
 import net.minecraft.client.particle.BillboardParticle;
 import net.minecraft.client.particle.SpriteBillboardParticle;
@@ -26,7 +27,7 @@ protected MixinSpriteBillboardParticle(ClientWorld world, double x, double y, do
 
     @Inject(method = "setSprite(Lnet/minecraft/client/texture/Sprite;)V", at = @At("RETURN"))
     private void afterSetSprite(Sprite sprite, CallbackInfo ci) {
-        this.shouldTickSprite = sprite != null && sprite.createAnimation() != null;
+        this.shouldTickSprite = sprite != null && ((SpriteExtended) sprite.getContents()).hasAnimation();
     }
 
     @Override

File: src/main/java/me/jellysquid/mods/sodium/client/render/CloudRenderer.java
Patch:
@@ -50,7 +50,7 @@ public class CloudRenderer {
     private ShaderProgram clouds;
     private ShaderProgram cloudsDepth;
 
-    private int prevCenterCellX, prevCenterCellY;
+    private int prevCenterCellX, prevCenterCellY, cachedRenderDistance;
 
     public CloudRenderer(ResourceFactory factory) {
         this.reloadTextures(factory);
@@ -75,7 +75,7 @@ public void render(@Nullable ClientWorld world, MatrixStack matrices, Matrix4f p
         int centerCellX = (int) (Math.floor(cloudCenterX / 12));
         int centerCellZ = (int) (Math.floor(cloudCenterZ / 12));
 
-        if (this.vertexBuffer == null || this.prevCenterCellX != centerCellX || this.prevCenterCellY != centerCellZ) {
+        if (this.vertexBuffer == null || this.prevCenterCellX != centerCellX || this.prevCenterCellY != centerCellZ || this.cachedRenderDistance != renderDistance) {
             BufferBuilder bufferBuilder = Tessellator.getInstance().getBuffer();
             bufferBuilder.begin(VertexFormat.DrawMode.QUADS, VertexFormats.POSITION_COLOR);
 
@@ -92,6 +92,7 @@ public void render(@Nullable ClientWorld world, MatrixStack matrices, Matrix4f p
 
             this.prevCenterCellX = centerCellX;
             this.prevCenterCellY = centerCellZ;
+            this.cachedRenderDistance = renderDistance;
         }
 
         float previousEnd = RenderSystem.getShaderFogEnd();

File: src/main/java/me/jellysquid/mods/sodium/client/render/CloudRenderer.java
Patch:
@@ -117,6 +117,9 @@ public void render(@Nullable ClientWorld world, MatrixStack matrices, Matrix4f p
         Matrix4f modelViewMatrix = matrices.peek().getPositionMatrix();
         modelViewMatrix.translate(-translateX, cloudHeight - (float) cameraY, -translateZ);
 
+        // Scale matrix to avoid z-fighting
+        modelViewMatrix.scale(0.99975586f, 0.99975586f, 0.99975586f);
+
         // PASS 1: Set up depth buffer
         RenderSystem.disableBlend();
         RenderSystem.depthMask(true);

File: src/main/java/me/jellysquid/mods/sodium/client/model/quad/blender/LinearColorBlender.java
Patch:
@@ -62,13 +62,13 @@ private <T> int getVertexColor(BlockRenderView world, BlockPos origin, ModelQuad
         // Linear interpolation across the Z-axis
         int dz1 = ColorMixer.getStartRatio(fracZ);
         int dz2 = ColorMixer.getEndRatio(fracZ);
-        int rz0 = ColorMixer.mixARGB(c00, c01, dz1, dz2);
-        int rz1 = ColorMixer.mixARGB(c10, c11, dz1, dz2);
+        int rz0 = ColorMixer.mix(c00, c01, dz1, dz2);
+        int rz1 = ColorMixer.mix(c10, c11, dz1, dz2);
 
         // Linear interpolation across the X-axis
         int dx1 = ColorMixer.getStartRatio(fracX);
         int dx2 = ColorMixer.getEndRatio(fracX);
-        int rx = ColorMixer.mixARGB(rz0, rz1, dx1, dx2);
+        int rx = ColorMixer.mix(rz0, rz1, dx1, dx2);
 
         return ColorARGB.toABGR(rx);
     }

File: src/main/java/me/jellysquid/mods/sodium/common/config/SodiumConfig.java
Patch:
@@ -57,6 +57,7 @@ private SodiumConfig() {
         this.addMixinRule("features.world_ticking", true);
         this.addMixinRule("features.fast_biome_colors", true);
         this.addMixinRule("features.shader", true);
+        this.addMixinRule("features.clouds", true);
 
         this.addMixinRule("workarounds.nvidia", true);
     }

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/texture_updates/MixinSpriteInterpolated.java
Patch:
@@ -78,7 +78,7 @@ void apply(int x, int y, SpriteContents.AnimatorImpl arg) {
             int pixelCount = width * height;
 
             for (int i = 0; i < pixelCount; i++) {
-                MemoryUtil.memPutInt(dp, ColorMixer.mixARGB(MemoryUtil.memGetInt(s1p), MemoryUtil.memGetInt(s2p), f1, f2));
+                MemoryUtil.memPutInt(dp, ColorMixer.mix(MemoryUtil.memGetInt(s1p), MemoryUtil.memGetInt(s2p), f1, f2));
 
                 s1p += STRIDE;
                 s2p += STRIDE;

File: src/main/java/me/jellysquid/mods/sodium/client/SodiumClientMod.java
Patch:
@@ -30,7 +30,6 @@ public void onInitializeClient() {
         LOGGER = LoggerFactory.getLogger("Sodium");
         CONFIG = loadConfig();
 
-        DriverWorkarounds.init();
         FlawlessFrames.onClientInitialization();
     }
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/MixinMinecraftClient.java
Patch:
@@ -3,6 +3,7 @@
 import it.unimi.dsi.fastutil.longs.LongArrayFIFOQueue;
 import me.jellysquid.mods.sodium.client.SodiumClientMod;
 import me.jellysquid.mods.sodium.client.gui.screen.ConfigCorruptedScreen;
+import me.jellysquid.mods.sodium.client.util.workarounds.DriverWorkarounds;
 import net.minecraft.client.MinecraftClient;
 import net.minecraft.client.RunArgs;
 import org.lwjgl.opengl.GL32C;
@@ -21,6 +22,8 @@ private void postInit(RunArgs args, CallbackInfo ci) {
             var parent = MinecraftClient.getInstance().currentScreen;
             MinecraftClient.getInstance().setScreen(new ConfigCorruptedScreen(() -> parent));
         }
+
+        DriverWorkarounds.init();
     }
 
     @Inject(method = "render", at = @At("HEAD"))

File: src/main/java/me/jellysquid/mods/sodium/client/SodiumClientMod.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.jellysquid.mods.sodium.client.gui.SodiumGameOptions;
 import me.jellysquid.mods.sodium.client.util.FlawlessFrames;
+import me.jellysquid.mods.sodium.client.util.workarounds.DriverWorkarounds;
 import net.fabricmc.api.ClientModInitializer;
 import net.fabricmc.loader.api.FabricLoader;
 import net.fabricmc.loader.api.ModContainer;
@@ -29,6 +30,7 @@ public void onInitializeClient() {
         LOGGER = LoggerFactory.getLogger("Sodium");
         CONFIG = loadConfig();
 
+        DriverWorkarounds.init();
         FlawlessFrames.onClientInitialization();
     }
 

File: src/main/java/me/jellysquid/mods/sodium/common/config/SodiumConfig.java
Patch:
@@ -57,6 +57,8 @@ private SodiumConfig() {
         this.addMixinRule("features.world_ticking", true);
         this.addMixinRule("features.fast_biome_colors", true);
         this.addMixinRule("features.shader", true);
+
+        this.addMixinRule("workarounds.nvidia", true);
     }
 
     /**

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/format/sfp/ModelVertexType.java
Patch:
@@ -68,7 +68,7 @@ public float getPositionOffset() {
     }
 
     static short encodeBlockTexture(float value) {
-        return (short) (value * TEXTURE_MAX_VALUE);
+        return (short) (Math.min(0.99999997F, value) * TEXTURE_MAX_VALUE);
     }
 
     static short encodePosition(float v) {

File: src/main/java/me/jellysquid/mods/sodium/client/model/vertex/formats/quad/QuadVertexSink.java
Patch:
@@ -44,9 +44,9 @@ default void writeQuad(MatrixStack.Entry matrices, float x, float y, float z, in
         float normY1 = Norm3b.unpackY(normal);
         float normZ1 = Norm3b.unpackZ(normal);
 
-        float normX2 = Math.fma(normMatrix.m00(), x, Math.fma(normMatrix.m10(), y, normMatrix.m20() * z));
-        float normY2 = Math.fma(normMatrix.m01(), x, Math.fma(normMatrix.m11(), y, normMatrix.m21() * z));
-        float normZ2 = Math.fma(normMatrix.m02(), x, Math.fma(normMatrix.m12(), y, normMatrix.m22() * z));
+        float normX2 = Math.fma(normMatrix.m00(), normX1, Math.fma(normMatrix.m10(), normY1, normMatrix.m20() * normZ1));
+        float normY2 = Math.fma(normMatrix.m01(), normX1, Math.fma(normMatrix.m11(), normY1, normMatrix.m21() * normZ1));
+        float normZ2 = Math.fma(normMatrix.m02(), normX1, Math.fma(normMatrix.m12(), normY1, normMatrix.m22() * normZ1));
 
         this.writeQuad(x2, y2, z2, color, u, v, light, overlay, Norm3b.pack(normX2, normY2, normZ2));
     }

File: src/main/java/me/jellysquid/mods/sodium/common/config/SodiumConfig.java
Patch:
@@ -44,6 +44,7 @@ private SodiumConfig() {
         this.addMixinRule("features.item", true);
         this.addMixinRule("features.matrix_stack", true);
         this.addMixinRule("features.model", true);
+        this.addMixinRule("features.optimized_bamboo", true);
         this.addMixinRule("features.options", true);
         this.addMixinRule("features.particle", true);
         this.addMixinRule("features.particle.cull", true);

File: src/main/java/me/jellysquid/mods/sodium/client/render/pipeline/FluidRenderer.java
Patch:
@@ -208,8 +208,8 @@ public boolean render(BlockRenderView world, FluidState fluidState, BlockPos pos
 
             float uAvg = (u1 + u2 + u3 + u4) / 4.0F;
             float vAvg = (v1 + v2 + v3 + v4) / 4.0F;
-            float s1 = (float) sprites[0].getWidth() / (sprites[0].getMaxU() - sprites[0].getMinU());
-            float s2 = (float) sprites[0].getHeight() / (sprites[0].getMaxV() - sprites[0].getMinV());
+            float s1 = (float) sprites[0].method_45851().method_45807() / (sprites[0].getMaxU() - sprites[0].getMinU());
+            float s2 = (float) sprites[0].method_45851().method_45815() / (sprites[0].getMaxV() - sprites[0].getMinV());
             float s3 = 4.0F / Math.max(s2, s1);
 
             u1 = MathHelper.lerp(s3, u1, uAvg);

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptionPages.java
Patch:
@@ -93,7 +93,7 @@ public static OptionPage general() {
                 .add(OptionImpl.createBuilder(int.class, vanillaOpts)
                         .setName(Text.translatable("options.framerateLimit"))
                         .setTooltip(Text.translatable("sodium.options.fps_limit.tooltip"))
-                        .setControl(option -> new SliderControl(option, 5, 260, 10, ControlValueFormatter.fpsLimit()))
+                        .setControl(option -> new SliderControl(option, 10, 260, 10, ControlValueFormatter.fpsLimit()))
                         .setBinding((opts, value) -> {
                             opts.getMaxFps().setValue(value);
                             MinecraftClient.getInstance().getWindow().setFramerateLimit(value);

File: src/main/java/me/jellysquid/mods/sodium/client/SodiumClientMod.java
Patch:
@@ -1,6 +1,7 @@
 package me.jellysquid.mods.sodium.client;
 
 import me.jellysquid.mods.sodium.client.gui.SodiumGameOptions;
+import me.jellysquid.mods.sodium.client.util.FlawlessFrames;
 import net.fabricmc.api.ClientModInitializer;
 import net.fabricmc.loader.api.FabricLoader;
 import net.fabricmc.loader.api.ModContainer;
@@ -27,6 +28,8 @@ public void onInitializeClient() {
 
         LOGGER = LoggerFactory.getLogger("Sodium");
         CONFIG = loadConfig();
+
+        FlawlessFrames.onClientInitialization();
     }
 
     public static SodiumGameOptions options() {

File: src/main/java/me/jellysquid/mods/sodium/client/render/SodiumWorldRenderer.java
Patch:
@@ -407,6 +407,7 @@ public Collection<String> getMemoryDebugStrings() {
 
     public RenderSectionManager getRenderSectionManager() {
         return this.renderSectionManager;
+    }
 
     public ChunkTracker getChunkTracker() {
         return this.chunkTracker;

File: src/main/java/me/jellysquid/mods/sodium/client/SodiumClientMod.java
Patch:
@@ -5,8 +5,8 @@
 import net.fabricmc.api.ClientModInitializer;
 import net.fabricmc.loader.api.FabricLoader;
 import net.fabricmc.loader.api.ModContainer;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
 
@@ -26,7 +26,7 @@ public void onInitializeClient() {
                 .getVersion()
                 .getFriendlyString();
 
-        LOGGER = LogManager.getLogger("Sodium");
+        LOGGER = LoggerFactory.getLogger("Sodium");
         CONFIG = loadConfig();
 
         FlawlessFrames.onClientInitialization();

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/OptionImpact.java
Patch:
@@ -1,7 +1,6 @@
 package me.jellysquid.mods.sodium.client.gui.options;
 
 import net.minecraft.text.Text;
-import net.minecraft.text.TranslatableText;
 import net.minecraft.util.Formatting;
 
 public enum OptionImpact implements TextProvider {
@@ -13,7 +12,7 @@ public enum OptionImpact implements TextProvider {
     private final Text text;
 
     OptionImpact(Formatting color, String text) {
-        this.text = new TranslatableText(text).formatted(color);
+        this.text = Text.translatable(text).formatted(color);
     }
 
     @Override

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/control/CyclingControl.java
Patch:
@@ -4,7 +4,6 @@
 import me.jellysquid.mods.sodium.client.gui.options.TextProvider;
 import me.jellysquid.mods.sodium.client.util.Dim2i;
 import net.minecraft.client.util.math.MatrixStack;
-import net.minecraft.text.LiteralText;
 import net.minecraft.text.Text;
 import org.apache.commons.lang3.Validate;
 
@@ -42,7 +41,7 @@ public CyclingControl(Option<T> option, Class<T> enumType, T[] allowedValues) {
             if (value instanceof TextProvider) {
                 name = ((TextProvider) value).getLocalizedName();
             } else {
-                name = new LiteralText(value.name());
+                name = Text.literal(value.name());
             }
 
             this.names[i] = name;

File: src/main/java/me/jellysquid/mods/sodium/client/gui/widgets/AbstractWidget.java
Patch:
@@ -52,9 +52,9 @@ protected void drawQuads(Consumer<VertexConsumer> consumer) {
 
         consumer.accept(bufferBuilder);
 
-        bufferBuilder.end();
+        BufferBuilder.BuiltBuffer output = bufferBuilder.end();
 
-        BufferRenderer.draw(bufferBuilder);
+        BufferRenderer.drawWithShader(output);
         RenderSystem.enableTexture();
         RenderSystem.disableBlend();
     }

File: src/main/java/me/jellysquid/mods/sodium/client/model/light/LightPipeline.java
Patch:
@@ -15,8 +15,9 @@ public interface LightPipeline {
      * @param quad The block model quad
      * @param pos The block position of the model this quad belongs to
      * @param out The data arrays which will store the calculated light data results
+     * @param cullFace The cull face of the quad
      * @param face The pre-computed facing vector of the quad
      * @param shade True if the block is shaded by ambient occlusion
      */
-    void calculate(ModelQuadView quad, BlockPos pos, QuadLightData out, Direction face, boolean shade);
+    void calculate(ModelQuadView quad, BlockPos pos, QuadLightData out, Direction cullFace, Direction face, boolean shade);
 }

File: src/main/java/me/jellysquid/mods/sodium/client/model/quad/blender/ColorSampler.java
Patch:
@@ -1,9 +1,9 @@
-package me.jellysquid.mods.sodium.client.model.quad;
+package me.jellysquid.mods.sodium.client.model.quad.blender;
 
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.BlockRenderView;
 import org.jetbrains.annotations.Nullable;
 
-public interface ModelQuadColorProvider<T> {
+public interface ColorSampler<T> {
     int getColor(T state, @Nullable BlockRenderView world, @Nullable BlockPos pos, int tintIndex);
 }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/ChunkRenderMatrices.java
Patch:
@@ -8,6 +8,6 @@
 public record ChunkRenderMatrices(Matrix4f projection, Matrix4f modelView) {
     public static ChunkRenderMatrices from(MatrixStack stack) {
         MatrixStack.Entry entry = stack.peek();
-        return new ChunkRenderMatrices(JomlHelper.copy(RenderSystem.getProjectionMatrix()), JomlHelper.copy(entry.getModel()));
+        return new ChunkRenderMatrices(JomlHelper.copy(RenderSystem.getProjectionMatrix()), JomlHelper.copy(entry.getPositionMatrix()));
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/render/pipeline/context/ChunkRenderCacheShared.java
Patch:
@@ -3,7 +3,7 @@
 import it.unimi.dsi.fastutil.objects.Reference2ObjectOpenHashMap;
 import me.jellysquid.mods.sodium.client.model.light.LightPipelineProvider;
 import me.jellysquid.mods.sodium.client.model.light.cache.HashLightDataCache;
-import me.jellysquid.mods.sodium.client.model.quad.blender.BiomeColorBlender;
+import me.jellysquid.mods.sodium.client.model.quad.blender.ColorBlender;
 import me.jellysquid.mods.sodium.client.render.pipeline.BlockRenderer;
 import me.jellysquid.mods.sodium.client.render.pipeline.ChunkRenderCache;
 import net.minecraft.client.MinecraftClient;
@@ -22,10 +22,10 @@ private ChunkRenderCacheShared(BlockRenderView world) {
 
         this.lightCache = new HashLightDataCache(world);
 
-        BiomeColorBlender biomeColorBlender = this.createBiomeColorBlender();
+        ColorBlender colorBlender = this.createBiomeColorBlender();
         LightPipelineProvider lightPipelineProvider = new LightPipelineProvider(this.lightCache);
 
-        this.blockRenderer = new BlockRenderer(client, lightPipelineProvider, biomeColorBlender);
+        this.blockRenderer = new BlockRenderer(client, lightPipelineProvider, colorBlender);
     }
 
     public BlockRenderer getBlockRenderer() {

File: src/main/java/me/jellysquid/mods/sodium/client/world/biome/BlockColorsExtended.java
Patch:
@@ -1,8 +1,8 @@
 package me.jellysquid.mods.sodium.client.world.biome;
 
-import me.jellysquid.mods.sodium.client.model.quad.ModelQuadColorProvider;
+import me.jellysquid.mods.sodium.client.model.quad.blender.ColorSampler;
 import net.minecraft.block.BlockState;
 
 public interface BlockColorsExtended {
-    ModelQuadColorProvider<BlockState> getColorProvider(BlockState state);
+    ColorSampler<BlockState> getColorProvider(BlockState state);
 }

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/MixinFrustum.java
Patch:
@@ -6,6 +6,7 @@
 import net.minecraft.client.render.Frustum;
 import org.apache.commons.lang3.Validate;
 import org.joml.Matrix4f;
+import org.joml.Vector3f;
 import org.spongepowered.asm.mixin.Mixin;
 import org.spongepowered.asm.mixin.Shadow;
 import org.spongepowered.asm.mixin.injection.At;
@@ -39,8 +40,7 @@ public void init(net.minecraft.util.math.Matrix4f modelViewMatrix,
         Matrix4f matrix = new Matrix4f();
         matrix.set(Validate.notNull(this.projectionMatrix));
         matrix.mul(Validate.notNull(this.modelViewMatrix));
-        matrix.translate((float) -this.x, (float) -this.y, (float) -this.z);
 
-        return new JomlFrustum(matrix);
+        return new JomlFrustum(matrix, new Vector3f((float) this.x, (float) this.y, (float) this.z));
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/MixinMinecraftClient.java
Patch:
@@ -19,7 +19,7 @@ public class MixinMinecraftClient {
     private void postInit(RunArgs args, CallbackInfo ci) {
         if (SodiumClientMod.options().isReadOnly()) {
             var parent = MinecraftClient.getInstance().currentScreen;
-            MinecraftClient.getInstance().openScreen(new ConfigCorruptedScreen(() -> parent));
+            MinecraftClient.getInstance().setScreen(new ConfigCorruptedScreen(() -> parent));
         }
     }
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/pipeline/MixinVertexFormat.java
Patch:
@@ -7,11 +7,12 @@
 
 @Mixin(VertexFormat.class)
 public abstract class MixinVertexFormat implements BufferVertexFormat {
+
     @Shadow
-    public abstract int getVertexSize();
+    public abstract int getVertexSizeByte();
 
     @Override
     public int getStride() {
-        return this.getVertexSize();
+        return this.getVertexSizeByte();
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/buffer_builder/intrinsics/MixinBufferBuilder.java
Patch:
@@ -37,8 +37,8 @@ public void quad(MatrixStack.Entry matrices, BakedQuad quad, float[] brightnessT
 
         ModelQuadView quadView = (ModelQuadView) quad;
 
-        Matrix4f modelMatrix = matrices.getModel();
-        Matrix3f normalMatrix = matrices.getNormal();
+        Matrix4f positionMatrix = matrices.getPositionMatrix();
+        Matrix3f normalMatrix = matrices.getNormalMatrix();
 
         int norm = MatrixUtil.computeNormal(normalMatrix, quad.getFace());
 
@@ -79,7 +79,7 @@ public void quad(MatrixStack.Entry matrices, BakedQuad quad, float[] brightnessT
             int color = ColorABGR.pack(fR, fG, fB, 1.0F);
 
             Vector4f pos = new Vector4f(x, y, z, 1.0F);
-            pos.transform(modelMatrix);
+            pos.transform(positionMatrix);
 
             drain.writeQuad(pos.getX(), pos.getY(), pos.getZ(), color, u, v, light[i], overlay, norm);
         }

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/chunk_rendering/MixinPackedIntegerArray.java
Patch:
@@ -11,7 +11,7 @@
 public class MixinPackedIntegerArray implements PackedIntegerArrayExtended {
     @Shadow
     @Final
-    private long[] storage;
+    private long[] data;
 
     @Shadow
     @Final
@@ -33,7 +33,7 @@ public class MixinPackedIntegerArray implements PackedIntegerArrayExtended {
     public <T> void copyUsingPalette(T[] out, ClonedPalette<T> palette) {
         int idx = 0;
 
-        for (long word : this.storage) {
+        for (long word : this.data) {
             long l = word;
 
             for (int j = 0; j < this.elementsPerLong; ++j) {

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/fast_biome_colors/MixinBackgroundRenderer.java
Patch:
@@ -18,7 +18,7 @@ private static Vec3d redirectSampleColor(Vec3d pos, CubicSampler.RgbFetcher rgbF
         float u = MathHelper.clamp(MathHelper.cos(world.getSkyAngle(tickDelta) * 6.2831855F) * 2.0F + 0.5F, 0.0F, 1.0F);
 
         return FastCubicSampler.sampleColor(pos,
-                (x, y, z) -> world.getBiomeAccess().getBiomeForNoiseGen(x, y, z).getFogColor(),
-                (v) -> world.getSkyProperties().adjustFogColor(v, u));
+                (x, y, z) -> world.getBiomeAccess().getBiomeForNoiseGen(x, y, z).value().getFogColor(),
+                (v) -> world.getDimensionEffects().adjustFogColor(v, u));
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/gui/fast_loading_screen/MixinLevelLoadingScreen.java
Patch:
@@ -52,7 +52,7 @@ public static void drawChunkMap(MatrixStack matrixStack, WorldGenerationProgress
 
         RenderSystem.setShader(GameRenderer::getPositionColorShader);
 
-        Matrix4f matrix = matrixStack.peek().getModel();
+        Matrix4f matrix = matrixStack.peek().getPositionMatrix();
 
         Tessellator tessellator = Tessellator.getInstance();
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/matrix_stack/MixinMatrixStack.java
Patch:
@@ -26,7 +26,7 @@ public class MixinMatrixStack {
     public void translate(double x, double y, double z) {
         MatrixStack.Entry entry = this.stack.getLast();
 
-        Matrix4fExtended mat = MatrixUtil.getExtendedMatrix(entry.getModel());
+        Matrix4fExtended mat = MatrixUtil.getExtendedMatrix(entry.getPositionMatrix());
         mat.translate((float) x, (float) y, (float) z);
     }
 
@@ -38,10 +38,10 @@ public void translate(double x, double y, double z) {
     public void multiply(Quaternion q) {
         MatrixStack.Entry entry = this.stack.getLast();
 
-        Matrix4fExtended mat4 = MatrixUtil.getExtendedMatrix(entry.getModel());
+        Matrix4fExtended mat4 = MatrixUtil.getExtendedMatrix(entry.getPositionMatrix());
         mat4.rotate(q);
 
-        Matrix3fExtended mat3 = MatrixUtil.getExtendedMatrix(entry.getNormal());
+        Matrix3fExtended mat3 = MatrixUtil.getExtendedMatrix(entry.getNormalMatrix());
         mat3.rotate(q);
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/model/MixinMultipartBakedModel.java
Patch:
@@ -6,6 +6,7 @@
 import net.minecraft.client.render.model.BakedQuad;
 import net.minecraft.client.render.model.MultipartBakedModel;
 import net.minecraft.util.math.Direction;
+import net.minecraft.util.math.random.Random;
 import org.apache.commons.lang3.tuple.Pair;
 import org.spongepowered.asm.mixin.Final;
 import org.spongepowered.asm.mixin.Mixin;
@@ -66,4 +67,4 @@ public List<BakedQuad> getQuads(BlockState state, Direction face, Random random)
         return list;
     }
 
-}
+}
\ No newline at end of file

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/model/MixinWeightedBakedModel.java
Patch:
@@ -6,6 +6,7 @@
 import net.minecraft.client.render.model.WeightedBakedModel;
 import net.minecraft.util.collection.Weighted;
 import net.minecraft.util.math.Direction;
+import net.minecraft.util.math.random.Random;
 import org.jetbrains.annotations.Nullable;
 import org.spongepowered.asm.mixin.Final;
 import org.spongepowered.asm.mixin.Mixin;

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/options/MixinOptionsScreen.java
Patch:
@@ -20,7 +20,7 @@ protected MixinOptionsScreen(Text title) {
     @Dynamic
     @Inject(method = "method_19828(Lnet/minecraft/client/gui/widget/ButtonWidget;)V", at = @At("HEAD"), cancellable = true)
     private void open(ButtonWidget widget, CallbackInfo ci) {
-        this.client.openScreen(new SodiumOptionsGUI(this));
+        this.client.setScreen(new SodiumOptionsGUI(this));
 
         ci.cancel();
     }

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/options/MixinWorldRenderer.java
Patch:
@@ -11,6 +11,6 @@
 public class MixinWorldRenderer {
     @Redirect(method = "renderWeather", at = @At(value = "INVOKE", target = "Lnet/minecraft/client/MinecraftClient;isFancyGraphicsOrBetter()Z"))
     private boolean redirectGetFancyWeather() {
-        return SodiumClientMod.options().quality.weatherQuality.isFancy(MinecraftClient.getInstance().options.graphicsMode);
+        return SodiumClientMod.options().quality.weatherQuality.isFancy(MinecraftClient.getInstance().options.getGraphicsMode().getValue());
     }
-}
+}
\ No newline at end of file

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/particle/fast_render/MixinBillboardParticle.java
Patch:
@@ -69,7 +69,7 @@ public void buildGeometry(VertexConsumer vertexConsumer, Camera camera, float ti
         float minV = this.getMinV();
         float maxV = this.getMaxV();
 
-        int color = ColorABGR.pack(this.colorRed, this.colorGreen, this.colorBlue, this.colorAlpha);
+        int color = ColorABGR.pack(this.red , this.green, this.blue, this.alpha);
 
         ParticleVertexSink drain = VertexDrain.of(vertexConsumer)
                 .createSink(VanillaVertexTypes.PARTICLES);

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/render_layer/leaves/MixinLeavesBlock.java
Patch:
@@ -18,7 +18,7 @@ public MixinLeavesBlock() {
 
     @Override
     public boolean isSideInvisible(BlockState state, BlockState stateFrom, Direction direction) {
-        if (SodiumClientMod.options().quality.leavesQuality.isFancy(MinecraftClient.getInstance().options.graphicsMode)) {
+        if (SodiumClientMod.options().quality.leavesQuality.isFancy(MinecraftClient.getInstance().options.getGraphicsMode().getValue())) {
             return super.isSideInvisible(state, stateFrom, direction);
         } else {
             return stateFrom.getBlock() instanceof LeavesBlock || super.isSideInvisible(state, stateFrom, direction);

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptionPages.java
Patch:
@@ -146,15 +146,15 @@ public static OptionPage quality() {
                         .setTooltip(Text.translatable("sodium.options.clouds_quality.tooltip"))
                         .setControl(option -> new CyclingControl<>(option, CloudRenderMode.class, new Text[] { Text.translatable("options.off"), Text.translatable("options.clouds.fast"), Text.translatable("options.clouds.fancy") }))
                         .setBinding((opts, value) -> {
-                            opts.getCloudRenderMod().setValue(value);
+                            opts.getCloudRenderMode().setValue(value);
 
                             if (MinecraftClient.isFabulousGraphicsOrBetter()) {
                                 Framebuffer framebuffer = MinecraftClient.getInstance().worldRenderer.getCloudsFramebuffer();
                                 if (framebuffer != null) {
                                     framebuffer.clear(MinecraftClient.IS_SYSTEM_MAC);
                                 }
                             }
-                        }, opts -> opts.getCloudRenderMod().getValue())
+                        }, opts -> opts.getCloudRenderMode().getValue())
                         .setImpact(OptionImpact.LOW)
                         .build())
                 .add(OptionImpl.createBuilder(SodiumGameOptions.GraphicsQuality.class, sodiumOpts)

File: src/main/java/me/jellysquid/mods/sodium/client/model/light/LightPipeline.java
Patch:
@@ -15,8 +15,9 @@ public interface LightPipeline {
      * @param quad The block model quad
      * @param pos The block position of the model this quad belongs to
      * @param out The data arrays which will store the calculated light data results
+     * @param cullFace The cull face of the quad
      * @param face The pre-computed facing vector of the quad
      * @param shade True if the block is shaded by ambient occlusion
      */
-    void calculate(ModelQuadView quad, BlockPos pos, QuadLightData out, Direction face, boolean shade);
+    void calculate(ModelQuadView quad, BlockPos pos, QuadLightData out, Direction cullFace, Direction face, boolean shade);
 }

File: src/main/java/me/jellysquid/mods/sodium/client/world/cloned/ClonedChunkSection.java
Patch:
@@ -10,7 +10,7 @@
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.entity.BlockEntity;
-import net.minecraft.class_7522;
+import net.minecraft.tag.TagKey;
 import net.minecraft.util.collection.PackedIntegerArray;
 import net.minecraft.util.math.BlockBox;
 import net.minecraft.util.math.BlockPos;
@@ -43,7 +43,7 @@ public class ClonedChunkSection {
     private PackedIntegerArray blockStateData;
     private ClonedPalette<BlockState> blockStatePalette;
 
-    private class_7522<RegistryEntry<Biome>> biomeData;
+    private ReadableContainer<RegistryEntry<Biome>> biomeData;
 
     ClonedChunkSection(ClonedChunkSectionCache backingCache) {
         this.backingCache = backingCache;

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/item/MixinItemRenderer.java
Patch:
@@ -43,6 +43,7 @@ private void renderBakedItemModel(BakedModel model, ItemStack stack, int light,
         Xoroshiro128PlusPlusRandom random = this.random;
 
         for (Direction direction : DirectionUtil.ALL_DIRECTIONS) {
+            random.setSeed(42L);
             List<BakedQuad> quads = model.getQuads(null, direction, random);
 
             if (!quads.isEmpty()) {

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/block/MixinBlockModelRenderer.java
Patch:
@@ -61,13 +61,15 @@ public void render(MatrixStack.Entry entry, VertexConsumer vertexConsumer, Block
         int defaultColor = ColorABGR.pack(red, green, blue, 1.0F);
 
         for (Direction direction : DirectionUtil.ALL_DIRECTIONS) {
+            random.setSeed(42L);
             List<BakedQuad> quads = bakedModel.getQuads(blockState, direction, random);
 
             if (!quads.isEmpty()) {
                 renderQuad(entry, drain, defaultColor, quads, light, overlay);
             }
         }
 
+        random.setSeed(42L);
         List<BakedQuad> quads = bakedModel.getQuads(blockState, null, random);
 
         if (!quads.isEmpty()) {

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/item/MixinItemRenderer.java
Patch:
@@ -50,6 +50,7 @@ private void renderBakedItemModel(BakedModel model, ItemStack stack, int light,
             }
         }
 
+        random.setSeed(42L);
         List<BakedQuad> quads = model.getQuads(null, null, random);
 
         if (!quads.isEmpty()) {

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/block/MixinBlockModelRenderer.java
Patch:
@@ -18,7 +18,7 @@
 import net.minecraft.util.math.Direction;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.world.BlockRenderView;
-import net.minecraft.world.gen.random.AbstractRandom;
+import net.minecraft.util.math.random.AbstractRandom;
 import net.minecraft.world.gen.random.Xoroshiro128PlusPlusRandom;
 import org.spongepowered.asm.mixin.Mixin;
 import org.spongepowered.asm.mixin.Overwrite;
@@ -33,7 +33,7 @@
 public class MixinBlockModelRenderer {
     private final Xoroshiro128PlusPlusRandom random = new Xoroshiro128PlusPlusRandom(42L);
 
-    @Inject(method = "render(Lnet/minecraft/world/BlockRenderView;Lnet/minecraft/client/render/model/BakedModel;Lnet/minecraft/block/BlockState;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/client/util/math/MatrixStack;Lnet/minecraft/client/render/VertexConsumer;ZLnet/minecraft/world/gen/random/AbstractRandom;JI)Z", at = @At("HEAD"), cancellable = true)
+    @Inject(method = "render(Lnet/minecraft/world/BlockRenderView;Lnet/minecraft/client/render/model/BakedModel;Lnet/minecraft/block/BlockState;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/client/util/math/MatrixStack;Lnet/minecraft/client/render/VertexConsumer;ZLnet/minecraft/util/math/random/AbstractRandom;JI)Z", at = @At("HEAD"), cancellable = true)
     private void preRenderBlockInWorld(BlockRenderView world, BakedModel model, BlockState state, BlockPos pos, MatrixStack matrices, VertexConsumer vertexConsumer, boolean cull, AbstractRandom abstractRandom, long seed, int overlay, CallbackInfoReturnable<Boolean> cir) {
 //        GlobalRenderContext renderer = GlobalRenderContext.getInstance(world);
 //        BlockRenderer blockRenderer = renderer.getBlockRenderer();

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/chunk_rendering/MixinWorldRenderer.java
Patch:
@@ -9,6 +9,8 @@
 import net.minecraft.client.MinecraftClient;
 import net.minecraft.client.option.GameOptions;
 import net.minecraft.client.render.*;
+import net.minecraft.client.render.block.entity.BlockEntityRenderDispatcher;
+import net.minecraft.client.render.entity.EntityRenderDispatcher;
 import net.minecraft.client.util.math.MatrixStack;
 import net.minecraft.client.world.ClientWorld;
 import net.minecraft.util.math.BlockPos;
@@ -48,7 +50,7 @@ private int nullifyBuiltChunkStorage(GameOptions options) {
     }
 
     @Inject(method = "<init>", at = @At("RETURN"))
-    private void init(MinecraftClient client, BufferBuilderStorage bufferBuilders, CallbackInfo ci) {
+    private void init(MinecraftClient client, EntityRenderDispatcher entityRenderDispatcher, BlockEntityRenderDispatcher blockEntityRenderDispatcher, BufferBuilderStorage bufferBuilderStorage, CallbackInfo ci) {
         this.renderer = new SodiumWorldRenderer(client);
     }
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/model/MixinMultipartBakedModel.java
Patch:
@@ -6,7 +6,7 @@
 import net.minecraft.client.render.model.BakedQuad;
 import net.minecraft.client.render.model.MultipartBakedModel;
 import net.minecraft.util.math.Direction;
-import net.minecraft.world.gen.random.AbstractRandom;
+import net.minecraft.util.math.random.AbstractRandom;
 import org.apache.commons.lang3.tuple.Pair;
 import org.spongepowered.asm.mixin.Final;
 import org.spongepowered.asm.mixin.Mixin;

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/model/MixinWeightedBakedModel.java
Patch:
@@ -6,7 +6,7 @@
 import net.minecraft.client.render.model.WeightedBakedModel;
 import net.minecraft.util.collection.Weighted;
 import net.minecraft.util.math.Direction;
-import net.minecraft.world.gen.random.AbstractRandom;
+import net.minecraft.util.math.random.AbstractRandom;
 import org.jetbrains.annotations.Nullable;
 import org.spongepowered.asm.mixin.Final;
 import org.spongepowered.asm.mixin.Mixin;

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptions.java
Patch:
@@ -86,7 +86,7 @@ public Text getLocalizedName() {
     }
 
     public enum GraphicsQuality implements TextProvider {
-        DEFAULT("generator.default"),
+        DEFAULT("options.gamma.default"),
         FANCY("options.clouds.fancy"),
         FAST("options.clouds.fast");
 

File: src/main/java/me/jellysquid/mods/sodium/client/world/cloned/ClonedChunkSection.java
Patch:
@@ -60,7 +60,7 @@ public void init(World world, ChunkSectionPos pos) {
 
         ChunkSection section = getChunkSection(world, chunk, pos);
 
-        if (section == null || section.isEmpty()) {
+        if (section == null) {
             section = EMPTY_SECTION;
         }
 

File: src/main/java/me/jellysquid/mods/sodium/client/SodiumClientMod.java
Patch:
@@ -4,8 +4,8 @@
 import net.fabricmc.api.ClientModInitializer;
 import net.fabricmc.loader.api.FabricLoader;
 import net.fabricmc.loader.api.ModContainer;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
 
@@ -25,7 +25,7 @@ public void onInitializeClient() {
                 .getVersion()
                 .getFriendlyString();
 
-        LOGGER = LogManager.getLogger("Sodium");
+        LOGGER = LoggerFactory.getLogger("Sodium");
         CONFIG = loadConfig();
     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumOptionsGUI.java
Patch:
@@ -84,7 +84,7 @@ private void rebuildGUI() {
 
         this.undoButton = new FlatButtonWidget(new Dim2i(this.width - 211, this.height - 30, 65, 20), new TranslatableText("sodium.options.buttons.undo"), this::undoChanges);
         this.applyButton = new FlatButtonWidget(new Dim2i(this.width - 142, this.height - 30, 65, 20), new TranslatableText("sodium.options.buttons.apply"), this::applyChanges);
-        this.closeButton = new FlatButtonWidget(new Dim2i(this.width - 73, this.height - 30, 65, 20), new TranslatableText("gui.done"), this::onClose);
+        this.closeButton = new FlatButtonWidget(new Dim2i(this.width - 73, this.height - 30, 65, 20), new TranslatableText("gui.done"), this::close);
         this.donateButton = new FlatButtonWidget(new Dim2i(this.width - 128, 6, 100, 20), new TranslatableText("sodium.options.buttons.donate"), this::openDonationPage);
         this.hideDonateButton = new FlatButtonWidget(new Dim2i(this.width - 26, 6, 20, 20), new LiteralText("x"), this::hideDonationButton);
 
@@ -299,7 +299,7 @@ public boolean shouldCloseOnEsc() {
     }
 
     @Override
-    public void onClose() {
+    public void close() {
         this.client.setScreen(this.prevScreen);
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/world/cloned/ClonedChunkSection.java
Patch:
@@ -15,6 +15,7 @@
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.ChunkSectionPos;
 import net.minecraft.util.registry.BuiltinRegistries;
+import net.minecraft.util.registry.RegistryEntry;
 import net.minecraft.world.LightType;
 import net.minecraft.world.World;
 import net.minecraft.world.biome.Biome;
@@ -41,7 +42,7 @@ public class ClonedChunkSection {
     private PackedIntegerArray blockStateData;
     private ClonedPalette<BlockState> blockStatePalette;
 
-    private PalettedContainer<Biome> biomeData;
+    private PalettedContainer<RegistryEntry<Biome>> biomeData;
 
     ClonedChunkSection(ClonedChunkSectionCache backingCache) {
         this.backingCache = backingCache;
@@ -138,7 +139,7 @@ private void copyBlockEntities(WorldChunk chunk, ChunkSectionPos chunkCoord) {
         }
     }
 
-    public Biome getBiome(int x, int y, int z) {
+    public RegistryEntry<Biome> getBiome(int x, int y, int z) {
         return this.biomeData.get(x, y, z);
     }
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/fast_biome_colors/MixinBackgroundRenderer.java
Patch:
@@ -18,7 +18,7 @@ private static Vec3d redirectSampleColor(Vec3d pos, CubicSampler.RgbFetcher rgbF
         float u = MathHelper.clamp(MathHelper.cos(world.getSkyAngle(tickDelta) * 6.2831855F) * 2.0F + 0.5F, 0.0F, 1.0F);
 
         return FastCubicSampler.sampleColor(pos,
-                (x, y, z) -> world.getBiomeAccess().getBiomeForNoiseGen(x, y, z).getFogColor(),
+                (x, y, z) -> world.getBiomeAccess().getBiomeForNoiseGen(x, y, z).value().getFogColor(),
                 (v) -> world.getDimensionEffects().adjustFogColor(v, u));
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/particle/fast_render/MixinBillboardParticle.java
Patch:
@@ -69,7 +69,7 @@ public void buildGeometry(VertexConsumer vertexConsumer, Camera camera, float ti
         float minV = this.getMinV();
         float maxV = this.getMaxV();
 
-        int color = ColorABGR.pack(this.colorRed, this.colorGreen, this.colorBlue, this.colorAlpha);
+        int color = ColorABGR.pack(this.red , this.green, this.blue, this.alpha);
 
         ParticleVertexSink drain = VertexDrain.of(vertexConsumer)
                 .createSink(VanillaVertexTypes.PARTICLES);

File: src/main/java/me/jellysquid/mods/sodium/client/render/SodiumWorldRenderer.java
Patch:
@@ -158,7 +158,7 @@ public void updateChunks(Camera camera, Frustum frustum, @Deprecated(forRemoval
 
         this.useEntityCulling = SodiumClientMod.options().performance.useEntityCulling;
 
-        if (this.client.options.viewDistance != this.renderDistance) {
+        if (this.client.options.getViewDistance() != this.renderDistance) {
             this.reload();
         }
 
@@ -207,7 +207,7 @@ public void updateChunks(Camera camera, Frustum frustum, @Deprecated(forRemoval
 
         profiler.pop();
 
-        Entity.setRenderDistanceMultiplier(MathHelper.clamp((double) this.client.options.viewDistance / 8.0D, 1.0D, 2.5D) * (double) this.client.options.entityDistanceScaling);
+        Entity.setRenderDistanceMultiplier(MathHelper.clamp((double) this.client.options.getViewDistance() / 8.0D, 1.0D, 2.5D) * (double) this.client.options.entityDistanceScaling);
     }
 
     /**
@@ -238,7 +238,7 @@ private void initRenderer(CommandList commandList) {
             this.renderSectionManager = null;
         }
 
-        this.renderDistance = this.client.options.viewDistance;
+        this.renderDistance = this.client.options.getViewDistance();
 
         this.renderPassManager = BlockRenderPassManager.createDefaultMappings();
 

File: src/main/java/me/jellysquid/mods/sodium/client/gl/buffer/GlBufferTarget.java
Patch:
@@ -2,14 +2,12 @@
 
 import org.lwjgl.opengl.GL20C;
 import org.lwjgl.opengl.GL31C;
-import org.lwjgl.opengl.GL40C;
 
 public enum GlBufferTarget {
     ARRAY_BUFFER(GL20C.GL_ARRAY_BUFFER, GL20C.GL_ARRAY_BUFFER_BINDING),
     ELEMENT_BUFFER(GL20C.GL_ELEMENT_ARRAY_BUFFER, GL20C.GL_ELEMENT_ARRAY_BUFFER_BINDING),
     COPY_READ_BUFFER(GL31C.GL_COPY_READ_BUFFER, GL31C.GL_COPY_READ_BUFFER),
-    COPY_WRITE_BUFFER(GL31C.GL_COPY_WRITE_BUFFER, GL31C.GL_COPY_WRITE_BUFFER),
-    DRAW_INDIRECT_BUFFER(GL40C.GL_DRAW_INDIRECT_BUFFER, GL40C.GL_DRAW_INDIRECT_BUFFER_BINDING);
+    COPY_WRITE_BUFFER(GL31C.GL_COPY_WRITE_BUFFER, GL31C.GL_COPY_WRITE_BUFFER);
 
     public static final GlBufferTarget[] VALUES = GlBufferTarget.values();
     public static final int COUNT = VALUES.length;

File: src/main/java/me/jellysquid/mods/sodium/client/gl/tessellation/GlVertexArrayTessellation.java
Patch:
@@ -1,14 +1,13 @@
 package me.jellysquid.mods.sodium.client.gl.tessellation;
 
 import me.jellysquid.mods.sodium.client.gl.array.GlVertexArray;
-import me.jellysquid.mods.sodium.client.gl.buffer.GlBuffer;
 import me.jellysquid.mods.sodium.client.gl.device.CommandList;
 
 public class GlVertexArrayTessellation extends GlAbstractTessellation {
     private final GlVertexArray array;
 
-    public GlVertexArrayTessellation(GlVertexArray array, GlPrimitiveType primitiveType, TessellationBinding[] bindings, GlBuffer indexBuffer) {
-        super(primitiveType, bindings, indexBuffer);
+    public GlVertexArrayTessellation(GlVertexArray array, GlPrimitiveType primitiveType, TessellationBinding[] bindings) {
+        super(primitiveType, bindings);
 
         this.array = array;
     }

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/OptionFlag.java
Patch:
@@ -2,6 +2,7 @@
 
 public enum OptionFlag {
     REQUIRES_RENDERER_RELOAD,
+    REQUIRES_RENDERER_UPDATE,
     REQUIRES_ASSET_RELOAD,
-    REQUIRES_GAME_RESTART
+    REQUIRES_GAME_RESTART;
 }

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/control/ControlElement.java
Patch:
@@ -4,7 +4,6 @@
 import me.jellysquid.mods.sodium.client.gui.widgets.AbstractWidget;
 import me.jellysquid.mods.sodium.client.util.Dim2i;
 import net.minecraft.client.util.math.MatrixStack;
-import net.minecraft.text.Text;
 import net.minecraft.util.Formatting;
 
 public class ControlElement<T> extends AbstractWidget {

File: src/main/java/me/jellysquid/mods/sodium/client/model/IndexBufferBuilder.java
Patch:
@@ -1,12 +1,9 @@
 package me.jellysquid.mods.sodium.client.model;
 
 import it.unimi.dsi.fastutil.ints.IntArrayList;
-import it.unimi.dsi.fastutil.ints.IntArrays;
 import it.unimi.dsi.fastutil.ints.IntIterator;
 import me.jellysquid.mods.sodium.client.gl.tessellation.GlIndexType;
-import me.jellysquid.mods.sodium.client.gl.util.ElementRange;
 import me.jellysquid.mods.sodium.client.model.quad.properties.ModelQuadWinding;
-import me.jellysquid.mods.sodium.client.model.vertex.buffer.VertexBufferBuilder;
 
 import java.nio.ByteBuffer;
 

File: src/main/java/me/jellysquid/mods/sodium/client/model/quad/properties/ModelQuadFacing.java
Patch:
@@ -12,6 +12,8 @@ public enum ModelQuadFacing {
     UNASSIGNED;
 
     public static final ModelQuadFacing[] VALUES = ModelQuadFacing.values();
+    public static final ModelQuadFacing[] DIRECTIONS = new ModelQuadFacing[] { UP, DOWN, EAST, WEST, SOUTH, NORTH };
+
     public static final int COUNT = VALUES.length;
 
     public static ModelQuadFacing fromDirection(Direction dir) {

File: src/main/java/me/jellysquid/mods/sodium/client/model/vertex/type/ChunkVertexType.java
Patch:
@@ -7,12 +7,12 @@ public interface ChunkVertexType extends BlittableVertexType<ModelVertexSink>, C
     /**
      * @return The scale to be applied to vertex coordinates
      */
-    float getModelScale();
+    float getPositionScale();
 
     /**
      * @return The translation to be applied to vertex coordinates
      */
-    float getModelOffset();
+    float getPositionOffset();
 
     /**
      * @return The scale to be applied to texture coordinates

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/ChunkGraphicsState.java
Patch:
@@ -1,7 +1,6 @@
 package me.jellysquid.mods.sodium.client.render.chunk;
 
 import me.jellysquid.mods.sodium.client.gl.arena.GlBufferSegment;
-import me.jellysquid.mods.sodium.client.gl.tessellation.GlIndexType;
 import me.jellysquid.mods.sodium.client.gl.util.ElementRange;
 import me.jellysquid.mods.sodium.client.model.quad.properties.ModelQuadFacing;
 import me.jellysquid.mods.sodium.client.render.chunk.data.ChunkMeshData;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/ChunkRenderer.java
Patch:
@@ -3,7 +3,6 @@
 import me.jellysquid.mods.sodium.client.gl.device.CommandList;
 import me.jellysquid.mods.sodium.client.model.vertex.type.ChunkVertexType;
 import me.jellysquid.mods.sodium.client.render.chunk.passes.BlockRenderPass;
-import net.minecraft.client.util.math.MatrixStack;
 
 /**
  * The chunk render backend takes care of managing the graphics resource state of chunk render containers. This includes
@@ -12,13 +11,13 @@
 public interface ChunkRenderer {
     /**
      * Renders the given chunk render list to the active framebuffer.
-     * @param matrixStack The current matrix stack to be used for rendering
+     * @param matrices The camera matrices to use for rendering
      * @param commandList The command list which OpenGL commands should be serialized to
      * @param renders An iterator over the list of chunks to be rendered
      * @param pass The block render pass to execute
      * @param camera The camera context containing chunk offsets for the current render
      */
-    void render(MatrixStack matrixStack, CommandList commandList, ChunkRenderList renders, BlockRenderPass pass, ChunkCameraContext camera);
+    void render(ChunkRenderMatrices matrices, CommandList commandList, ChunkRenderList renders, BlockRenderPass pass, ChunkCameraContext camera);
 
     /**
      * Deletes this render backend and any resources attached to it.

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/ChunkBuildBuffers.java
Patch:
@@ -15,7 +15,6 @@
 import me.jellysquid.mods.sodium.client.render.chunk.passes.BlockRenderPassManager;
 import me.jellysquid.mods.sodium.client.util.NativeBuffer;
 import net.minecraft.client.render.RenderLayer;
-import net.minecraft.util.math.Vec3i;
 
 import java.util.Arrays;
 import java.util.EnumMap;
@@ -58,7 +57,7 @@ public ChunkBuildBuffers(ChunkVertexType vertexType, BlockRenderPassManager rend
         }
     }
 
-    public void init(ChunkRenderData.Builder renderData, Vec3i pos) {
+    public void init(ChunkRenderData.Builder renderData, int chunkId) {
         for (VertexBufferBuilder vertexBuffer : this.vertexBuffers) {
             vertexBuffer.start();
         }
@@ -73,7 +72,7 @@ public void init(ChunkRenderData.Builder renderData, Vec3i pos) {
             ModelVertexSink vertexSink = this.vertexType.createBufferWriter(this.vertexBuffers[i]);
             IndexBufferBuilder[] indexBuffers = this.indexBuffers[i];
 
-            this.delegates[i] = new BakedChunkModelBuilder(indexBuffers, vertexSink, renderData, pos);
+            this.delegates[i] = new BakedChunkModelBuilder(indexBuffers, vertexSink, renderData, chunkId);
         }
     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/ChunkBuildResult.java
Patch:
@@ -1,6 +1,5 @@
 package me.jellysquid.mods.sodium.client.render.chunk.compile;
 
-import me.jellysquid.mods.sodium.client.gl.tessellation.GlIndexType;
 import me.jellysquid.mods.sodium.client.render.chunk.RenderSection;
 import me.jellysquid.mods.sodium.client.render.chunk.data.ChunkMeshData;
 import me.jellysquid.mods.sodium.client.render.chunk.data.ChunkRenderData;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/graph/ChunkGraphInfo.java
Patch:
@@ -2,7 +2,7 @@
 
 import me.jellysquid.mods.sodium.client.render.chunk.RenderSection;
 import me.jellysquid.mods.sodium.client.render.chunk.data.ChunkRenderData;
-import me.jellysquid.mods.sodium.client.util.math.FrustumExtended;
+import me.jellysquid.mods.sodium.client.util.frustum.Frustum;
 import me.jellysquid.mods.sodium.common.util.DirectionUtil;
 import net.minecraft.client.render.chunk.ChunkOcclusionData;
 import net.minecraft.util.math.Direction;
@@ -68,12 +68,12 @@ public void resetCullingState() {
         this.cullingState = 0;
     }
 
-    public boolean isCulledByFrustum(FrustumExtended frustum) {
+    public boolean isCulledByFrustum(Frustum frustum) {
         float x = this.getOriginX();
         float y = this.getOriginY();
         float z = this.getOriginZ();
 
-        return !frustum.fastAabbTest(x, y, z, x + 16.0f, y + 16.0f, z + 16.0f);
+        return !frustum.isBoxVisible(x, y, z, x + 16.0f, y + 16.0f, z + 16.0f);
     }
 
     /**

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/shader/ChunkFogMode.java
Patch:
@@ -9,15 +9,15 @@ public enum ChunkFogMode {
     NONE(ChunkShaderFogComponent.None::new, ImmutableList.of()),
     SMOOTH(ChunkShaderFogComponent.Smooth::new, ImmutableList.of("USE_FOG", "USE_FOG_SMOOTH"));
 
-    private final Function<ChunkProgram, ChunkShaderFogComponent> factory;
+    private final Function<ShaderBindingContext, ChunkShaderFogComponent> factory;
     private final List<String> defines;
 
-    ChunkFogMode(Function<ChunkProgram, ChunkShaderFogComponent> factory, List<String> defines) {
+    ChunkFogMode(Function<ShaderBindingContext, ChunkShaderFogComponent> factory, List<String> defines) {
         this.factory = factory;
         this.defines = defines;
     }
 
-    public Function<ChunkProgram, ChunkShaderFogComponent> getFactory() {
+    public Function<ShaderBindingContext, ChunkShaderFogComponent> getFactory() {
         return this.factory;
     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/util/NativeBuffer.java
Patch:
@@ -4,7 +4,6 @@
 import it.unimi.dsi.fastutil.objects.Reference2ReferenceMaps;
 import it.unimi.dsi.fastutil.objects.Reference2ReferenceOpenHashMap;
 import me.jellysquid.mods.sodium.client.SodiumClientMod;
-import me.jellysquid.mods.sodium.client.gui.SodiumGameOptions;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.lwjgl.system.MemoryUtil;

File: src/main/java/me/jellysquid/mods/sodium/client/world/cloned/ChunkRenderContext.java
Patch:
@@ -27,7 +27,7 @@ public BlockBox getVolume() {
     }
 
     public void releaseResources() {
-        for (ClonedChunkSection section : sections) {
+        for (ClonedChunkSection section : this.sections) {
             if (section != null) {
                 section.getBackingCache()
                         .release(section);

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/chunk_rendering/MixinWorldRenderer.java
Patch:
@@ -4,6 +4,7 @@
 import me.jellysquid.mods.sodium.client.gl.device.RenderDevice;
 import me.jellysquid.mods.sodium.client.render.SodiumWorldRenderer;
 import me.jellysquid.mods.sodium.client.util.FlawlessFrames;
+import me.jellysquid.mods.sodium.client.util.frustum.FrustumAdapter;
 import me.jellysquid.mods.sodium.client.world.WorldRendererExtended;
 import net.minecraft.client.MinecraftClient;
 import net.minecraft.client.option.GameOptions;
@@ -115,15 +116,15 @@ private void setupTerrain(Camera camera, Frustum frustum, boolean hasForcedFrust
         RenderDevice.enterManagedCode();
 
         try {
-            this.renderer.updateChunks(camera, frustum, hasForcedFrustum, frame, spectator);
+            this.renderer.updateChunks(camera, FrustumAdapter.adapt(frustum), frame, spectator);
 
             if (FlawlessFrames.isActive()) {
                 // Block until all chunk updates have been processed
                 this.renderer.getRenderSectionManager().updateAllChunksNow();
 
                 // If that caused new chunks to become visible, repeat until we got them all
                 while (this.renderer.getRenderSectionManager().isGraphDirty()) {
-                    this.renderer.updateChunks(camera, frustum, hasForcedFrustum, this.frame++, spectator);
+                    this.renderer.updateChunks(camera, FrustumAdapter.adapt(frustum), this.frame++, spectator);
                     this.renderer.getRenderSectionManager().updateAllChunksNow();
                 }
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/MixinFrustum.java
Patch:
@@ -6,6 +6,7 @@
 import net.minecraft.client.render.Frustum;
 import org.apache.commons.lang3.Validate;
 import org.joml.Matrix4f;
+import org.joml.Vector3f;
 import org.spongepowered.asm.mixin.Mixin;
 import org.spongepowered.asm.mixin.Shadow;
 import org.spongepowered.asm.mixin.injection.At;
@@ -39,8 +40,7 @@ public void init(net.minecraft.util.math.Matrix4f modelViewMatrix,
         Matrix4f matrix = new Matrix4f();
         matrix.set(Validate.notNull(this.projectionMatrix));
         matrix.mul(Validate.notNull(this.modelViewMatrix));
-        matrix.translate((float) -this.x, (float) -this.y, (float) -this.z);
 
-        return new JomlFrustum(matrix);
+        return new JomlFrustum(matrix, new Vector3f((float) this.x, (float) this.y, (float) this.z));
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptionPages.java
Patch:
@@ -42,7 +42,7 @@ public static OptionPage general() {
                 .add(OptionImpl.createBuilder(int.class, vanillaOpts)
                         .setName(new TranslatableText("options.simulationDistance"))
                         .setTooltip(new TranslatableText("sodium.options.simulation_distance.tooltip"))
-                        .setControl(option -> new SliderControl(option, 2, 32, 1, ControlValueFormatter.translateVariable("options.chunks")))
+                        .setControl(option -> new SliderControl(option, 5, 32, 1, ControlValueFormatter.translateVariable("options.chunks")))
                         .setBinding((options, value) -> options.simulationDistance = value,  options -> options.simulationDistance)
                         .setImpact(OptionImpact.HIGH)
                         .setFlags(OptionFlag.REQUIRES_RENDERER_RELOAD)

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/RenderSectionManager.java
Patch:
@@ -124,7 +124,7 @@ public RenderSectionManager(SodiumWorldRenderer worldRenderer, BlockRenderPassMa
     }
 
     public void reloadChunks(ChunkTracker tracker) {
-        tracker.getChunksWithAtLeastStatus(ChunkStatus.AWAITING_LIGHT)
+        tracker.getChunks(ChunkStatus.FLAG_HAS_BLOCK_DATA)
                 .forEach(pos -> this.onChunkAdded(ChunkPos.getPackedX(pos), ChunkPos.getPackedZ(pos)));
     }
 
@@ -188,7 +188,7 @@ private void iterateChunks(Camera camera, Frustum frustum, int frame, boolean sp
     }
 
     private void schedulePendingUpdates(RenderSection section) {
-        if (section.getPendingUpdate() == null || !this.tracker.isRenderable(section.getChunkX(), section.getChunkZ())) {
+        if (section.getPendingUpdate() == null || !this.tracker.hasMergedFlags(section.getChunkX(), section.getChunkZ(), ChunkStatus.FLAG_ALL)) {
             return;
         }
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/options/MixinOptionsScreen.java
Patch:
@@ -18,7 +18,7 @@ protected MixinOptionsScreen(Text title) {
     }
 
     @Dynamic
-    @Inject(method = "method_19828(Lnet/minecraft/client/gui/widget/ButtonWidget;)V", at = @At("HEAD"), cancellable = true, remap = false)
+    @Inject(method = "method_19828(Lnet/minecraft/client/gui/widget/ButtonWidget;)V", at = @At("HEAD"), cancellable = true)
     private void open(ButtonWidget widget, CallbackInfo ci) {
         this.client.setScreen(new SodiumOptionsGUI(this));
 

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptionPages.java
Patch:
@@ -239,7 +239,7 @@ public static OptionPage performance() {
                 )
                 .add(OptionImpl.createBuilder(boolean.class, sodiumOpts)
                         .setName(new TranslatableText("sodium.options.always_defer_chunk_updates.name"))
-                        .setTooltip(new LiteralText("sodium.options.always_defer_chunk_updates.tooltip"))
+                        .setTooltip(new TranslatableText("sodium.options.always_defer_chunk_updates.tooltip"))
                         .setControl(TickBoxControl::new)
                         .setImpact(OptionImpact.HIGH)
                         .setBinding((opts, value) -> opts.performance.alwaysDeferChunkUpdates = value, opts -> opts.performance.alwaysDeferChunkUpdates)

File: src/main/java/me/jellysquid/mods/sodium/client/gl/shader/uniform/GlUniformMatrix4f.java
Patch:
@@ -1,6 +1,6 @@
 package me.jellysquid.mods.sodium.client.gl.shader.uniform;
 
-import net.minecraft.util.math.Matrix4f;
+import org.joml.Matrix4f;
 import org.lwjgl.opengl.GL30C;
 import org.lwjgl.system.MemoryStack;
 
@@ -15,7 +15,7 @@ public GlUniformMatrix4f(int index) {
     public void set(Matrix4f value) {
         try (MemoryStack stack = MemoryStack.stackPush()) {
             FloatBuffer buf = stack.callocFloat(16);
-            value.writeColumnMajor(buf);
+            value.get(buf);
 
             GL30C.glUniformMatrix4fv(this.index, false, buf);
         }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/ChunkRenderer.java
Patch:
@@ -3,7 +3,6 @@
 import me.jellysquid.mods.sodium.client.gl.device.CommandList;
 import me.jellysquid.mods.sodium.client.model.vertex.type.ChunkVertexType;
 import me.jellysquid.mods.sodium.client.render.chunk.passes.BlockRenderPass;
-import net.minecraft.client.util.math.MatrixStack;
 
 /**
  * The chunk render backend takes care of managing the graphics resource state of chunk render containers. This includes
@@ -12,13 +11,13 @@
 public interface ChunkRenderer {
     /**
      * Renders the given chunk render list to the active framebuffer.
-     * @param matrixStack The current matrix stack to be used for rendering
+     * @param matrices The camera matrices to use for rendering
      * @param commandList The command list which OpenGL commands should be serialized to
      * @param renders An iterator over the list of chunks to be rendered
      * @param pass The block render pass to execute
      * @param camera The camera context containing chunk offsets for the current render
      */
-    void render(MatrixStack matrixStack, CommandList commandList, ChunkRenderList renders, BlockRenderPass pass, ChunkCameraContext camera);
+    void render(ChunkRenderMatrices matrices, CommandList commandList, ChunkRenderList renders, BlockRenderPass pass, ChunkCameraContext camera);
 
     /**
      * Deletes this render backend and any resources attached to it.

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/graph/ChunkGraphInfo.java
Patch:
@@ -2,10 +2,10 @@
 
 import me.jellysquid.mods.sodium.client.render.chunk.RenderSection;
 import me.jellysquid.mods.sodium.client.render.chunk.data.ChunkRenderData;
-import me.jellysquid.mods.sodium.client.util.math.FrustumExtended;
 import me.jellysquid.mods.sodium.common.util.DirectionUtil;
 import net.minecraft.client.render.chunk.ChunkOcclusionData;
 import net.minecraft.util.math.Direction;
+import org.joml.FrustumIntersection;
 
 public class ChunkGraphInfo {
     private static final long DEFAULT_VISIBILITY_DATA = calculateVisibilityData(ChunkRenderData.EMPTY.getOcclusionData());
@@ -68,12 +68,12 @@ public void resetCullingState() {
         this.cullingState = 0;
     }
 
-    public boolean isCulledByFrustum(FrustumExtended frustum) {
+    public boolean isCulledByFrustum(FrustumIntersection frustum) {
         float x = this.getOriginX();
         float y = this.getOriginY();
         float z = this.getOriginZ();
 
-        return !frustum.fastAabbTest(x, y, z, x + 16.0f, y + 16.0f, z + 16.0f);
+        return !frustum.testAab(x, y, z, x + 16.0f, y + 16.0f, z + 16.0f);
     }
 
     /**

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/region/RenderRegionManager.java
Patch:
@@ -15,7 +15,7 @@
 import me.jellysquid.mods.sodium.client.render.chunk.compile.ChunkBuildResult;
 import me.jellysquid.mods.sodium.client.render.chunk.data.ChunkMeshData;
 import me.jellysquid.mods.sodium.client.render.chunk.passes.BlockRenderPass;
-import me.jellysquid.mods.sodium.client.util.math.FrustumExtended;
+import org.joml.FrustumIntersection;
 
 import java.util.*;
 
@@ -28,7 +28,7 @@ public RenderRegionManager(CommandList commandList) {
         this.stagingBuffer = createStagingBuffer(commandList);
     }
 
-    public void updateVisibility(FrustumExtended frustum) {
+    public void updateVisibility(FrustumIntersection frustum) {
         for (RenderRegion region : this.regions.values()) {
             if (!region.isEmpty()) {
                 region.updateVisibility(frustum);

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/region/RenderRegionVisibility.java
Patch:
@@ -1,7 +1,7 @@
 package me.jellysquid.mods.sodium.client.render.chunk.region;
 
 public enum RenderRegionVisibility {
-    CULLED,
-    VISIBLE,
-    FULLY_VISIBLE
+    OUTSIDE,
+    INTERSECT,
+    INSIDE
 }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/shader/ChunkShaderInterface.java
Patch:
@@ -7,7 +7,7 @@
 import me.jellysquid.mods.sodium.client.gl.shader.uniform.GlUniformInt;
 import me.jellysquid.mods.sodium.client.gl.shader.uniform.GlUniformMatrix4f;
 import me.jellysquid.mods.sodium.client.model.vertex.type.ChunkVertexType;
-import net.minecraft.util.math.Matrix4f;
+import org.joml.Matrix4f;
 import org.lwjgl.opengl.GL32C;
 
 /**

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/RenderSectionManager.java
Patch:
@@ -349,10 +349,9 @@ private PriorityQueue<CompletableFuture<ChunkBuildResult>> submitRebuildTasks(Ch
                 continue;
             }
 
+            // Sections can move between update queues, but they won't be removed from the queue they were
+            // previously in to save CPU cycles. We just filter any changed entries here instead.
             if (section.getPendingUpdate() != filterType) {
-                SodiumClientMod.logger().warn("{} changed update type to {} while in queue for {}, skipping",
-                        section, section.getPendingUpdate(), filterType);
-
                 continue;
             }
 

File: src/main/java/me/jellysquid/mods/sodium/client/gl/arena/AsyncBufferArena.java
Patch:
@@ -82,7 +82,7 @@ private List<PendingBufferCopyCommand> buildTransferList(List<GlBufferSegment> u
         for (int i = 0; i < usedSegments.size(); i++) {
             GlBufferSegment s = usedSegments.get(i);
 
-            if (currentCopyCommand == null || currentCopyCommand.writeOffset + currentCopyCommand.length != s.getOffset()) {
+            if (currentCopyCommand == null || currentCopyCommand.readOffset + currentCopyCommand.length != s.getOffset()) {
                 if (currentCopyCommand != null) {
                     pendingCopies.add(currentCopyCommand);
                 }

File: src/main/java/me/jellysquid/mods/sodium/client/gl/buffer/GlBufferMapping.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.lwjgl.system.MemoryUtil;
 
-import java.nio.Buffer;
 import java.nio.ByteBuffer;
 
 public class GlBufferMapping {

File: src/main/java/me/jellysquid/mods/sodium/client/gl/buffer/GlBufferTarget.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.lwjgl.opengl.GL20C;
 import org.lwjgl.opengl.GL31C;
-import org.lwjgl.opengl.GL40C;
 
 public enum GlBufferTarget {
     ARRAY_BUFFER(GL20C.GL_ARRAY_BUFFER, GL20C.GL_ARRAY_BUFFER_BINDING),

File: src/main/java/me/jellysquid/mods/sodium/client/gl/shader/GlProgram.java
Patch:
@@ -4,7 +4,6 @@
 import me.jellysquid.mods.sodium.client.gl.GlObject;
 import me.jellysquid.mods.sodium.client.gl.shader.uniform.GlUniform;
 import me.jellysquid.mods.sodium.client.gl.shader.uniform.GlUniformBlock;
-import me.jellysquid.mods.sodium.client.render.chunk.shader.ChunkShaderInterface;
 import me.jellysquid.mods.sodium.client.render.chunk.shader.ShaderBindingContext;
 import net.minecraft.util.Identifier;
 import org.apache.logging.log4j.LogManager;
@@ -130,7 +129,7 @@ public Builder bindFragmentData(String name, ShaderBindingPoint binding) {
         }
     }
 
-    public interface ProgramFactory<P extends GlProgram> {
+    public interface ProgramFactory<P extends GlProgram<?>> {
         P create(int handle);
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/gl/shader/uniform/GlUniformBlock.java
Patch:
@@ -1,7 +1,6 @@
 package me.jellysquid.mods.sodium.client.gl.shader.uniform;
 
 import me.jellysquid.mods.sodium.client.gl.buffer.GlBuffer;
-import me.jellysquid.mods.sodium.client.gl.shader.GlProgram;
 import org.lwjgl.opengl.GL32C;
 
 public class GlUniformBlock {

File: src/main/java/me/jellysquid/mods/sodium/client/gl/sync/GlFence.java
Patch:
@@ -1,7 +1,5 @@
 package me.jellysquid.mods.sodium.client.gl.sync;
 
-import me.jellysquid.mods.sodium.client.gl.GlObject;
-import org.lwjgl.opengl.GL30C;
 import org.lwjgl.opengl.GL32C;
 import org.lwjgl.system.MemoryStack;
 

File: src/main/java/me/jellysquid/mods/sodium/client/gl/tessellation/GlAbstractTessellation.java
Patch:
@@ -1,8 +1,6 @@
 package me.jellysquid.mods.sodium.client.gl.tessellation;
 
 import me.jellysquid.mods.sodium.client.gl.attribute.GlVertexAttributeBinding;
-import me.jellysquid.mods.sodium.client.gl.buffer.GlBuffer;
-import me.jellysquid.mods.sodium.client.gl.buffer.GlBufferTarget;
 import me.jellysquid.mods.sodium.client.gl.device.CommandList;
 import org.lwjgl.opengl.GL20C;
 

File: src/main/java/me/jellysquid/mods/sodium/client/gl/tessellation/GlVertexArrayTessellation.java
Patch:
@@ -1,7 +1,6 @@
 package me.jellysquid.mods.sodium.client.gl.tessellation;
 
 import me.jellysquid.mods.sodium.client.gl.array.GlVertexArray;
-import me.jellysquid.mods.sodium.client.gl.buffer.GlBuffer;
 import me.jellysquid.mods.sodium.client.gl.device.CommandList;
 
 public class GlVertexArrayTessellation extends GlAbstractTessellation {

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/control/ControlElement.java
Patch:
@@ -4,7 +4,6 @@
 import me.jellysquid.mods.sodium.client.gui.widgets.AbstractWidget;
 import me.jellysquid.mods.sodium.client.util.Dim2i;
 import net.minecraft.client.util.math.MatrixStack;
-import net.minecraft.text.Text;
 import net.minecraft.util.Formatting;
 
 public class ControlElement<T> extends AbstractWidget {

File: src/main/java/me/jellysquid/mods/sodium/client/model/IndexBufferBuilder.java
Patch:
@@ -1,12 +1,9 @@
 package me.jellysquid.mods.sodium.client.model;
 
 import it.unimi.dsi.fastutil.ints.IntArrayList;
-import it.unimi.dsi.fastutil.ints.IntArrays;
 import it.unimi.dsi.fastutil.ints.IntIterator;
 import me.jellysquid.mods.sodium.client.gl.tessellation.GlIndexType;
-import me.jellysquid.mods.sodium.client.gl.util.ElementRange;
 import me.jellysquid.mods.sodium.client.model.quad.properties.ModelQuadWinding;
-import me.jellysquid.mods.sodium.client.model.vertex.buffer.VertexBufferBuilder;
 
 import java.nio.ByteBuffer;
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/ChunkGraphicsState.java
Patch:
@@ -1,7 +1,6 @@
 package me.jellysquid.mods.sodium.client.render.chunk;
 
 import me.jellysquid.mods.sodium.client.gl.arena.GlBufferSegment;
-import me.jellysquid.mods.sodium.client.gl.tessellation.GlIndexType;
 import me.jellysquid.mods.sodium.client.gl.util.ElementRange;
 import me.jellysquid.mods.sodium.client.model.quad.properties.ModelQuadFacing;
 import me.jellysquid.mods.sodium.client.render.chunk.data.ChunkMeshData;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/RegionChunkRenderer.java
Patch:
@@ -15,7 +15,6 @@
 import me.jellysquid.mods.sodium.client.gl.tessellation.TessellationBinding;
 import me.jellysquid.mods.sodium.client.gl.util.ElementRange;
 import me.jellysquid.mods.sodium.client.gl.util.MultiDrawBatch;
-import me.jellysquid.mods.sodium.client.model.quad.ModelQuad;
 import me.jellysquid.mods.sodium.client.model.quad.properties.ModelQuadFacing;
 import me.jellysquid.mods.sodium.client.model.vertex.type.ChunkVertexType;
 import me.jellysquid.mods.sodium.client.render.chunk.data.ChunkRenderBounds;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/ChunkBuildBuffers.java
Patch:
@@ -15,7 +15,6 @@
 import me.jellysquid.mods.sodium.client.render.chunk.passes.BlockRenderPassManager;
 import me.jellysquid.mods.sodium.client.util.NativeBuffer;
 import net.minecraft.client.render.RenderLayer;
-import net.minecraft.util.math.Vec3i;
 
 import java.util.Arrays;
 import java.util.EnumMap;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/ChunkBuildResult.java
Patch:
@@ -1,6 +1,5 @@
 package me.jellysquid.mods.sodium.client.render.chunk.compile;
 
-import me.jellysquid.mods.sodium.client.gl.tessellation.GlIndexType;
 import me.jellysquid.mods.sodium.client.render.chunk.RenderSection;
 import me.jellysquid.mods.sodium.client.render.chunk.data.ChunkMeshData;
 import me.jellysquid.mods.sodium.client.render.chunk.data.ChunkRenderData;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/region/RenderRegion.java
Patch:
@@ -8,7 +8,6 @@
 import me.jellysquid.mods.sodium.client.gl.arena.staging.StagingBuffer;
 import me.jellysquid.mods.sodium.client.gl.device.CommandList;
 import me.jellysquid.mods.sodium.client.gl.tessellation.GlTessellation;
-import me.jellysquid.mods.sodium.client.render.chunk.ChunkRenderer;
 import me.jellysquid.mods.sodium.client.render.chunk.RenderSection;
 import me.jellysquid.mods.sodium.client.render.chunk.format.ChunkModelVertexFormats;
 import me.jellysquid.mods.sodium.client.render.chunk.passes.BlockRenderPass;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/shader/ChunkShaderInterface.java
Patch:
@@ -2,8 +2,6 @@
 
 import com.mojang.blaze3d.systems.RenderSystem;
 import me.jellysquid.mods.sodium.client.gl.buffer.GlMutableBuffer;
-import me.jellysquid.mods.sodium.client.gl.shader.GlProgram;
-import me.jellysquid.mods.sodium.client.gl.device.RenderDevice;
 import me.jellysquid.mods.sodium.client.gl.shader.uniform.GlUniformBlock;
 import me.jellysquid.mods.sodium.client.gl.shader.uniform.GlUniformFloat;
 import me.jellysquid.mods.sodium.client.gl.shader.uniform.GlUniformInt;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/tasks/ChunkRenderRebuildTask.java
Patch:
@@ -7,7 +7,6 @@
 import me.jellysquid.mods.sodium.client.render.chunk.data.ChunkRenderBounds;
 import me.jellysquid.mods.sodium.client.render.chunk.data.ChunkRenderData;
 import me.jellysquid.mods.sodium.client.render.chunk.passes.BlockRenderPass;
-import me.jellysquid.mods.sodium.client.render.chunk.region.RenderRegion;
 import me.jellysquid.mods.sodium.client.render.pipeline.context.ChunkRenderCacheLocal;
 import me.jellysquid.mods.sodium.client.util.task.CancellationSource;
 import me.jellysquid.mods.sodium.client.world.WorldSlice;
@@ -23,7 +22,6 @@
 import net.minecraft.client.render.model.BakedModel;
 import net.minecraft.fluid.FluidState;
 import net.minecraft.util.math.BlockPos;
-import net.minecraft.util.math.Vec3i;
 
 import java.util.EnumMap;
 import java.util.Map;

File: src/main/java/me/jellysquid/mods/sodium/client/util/NativeBuffer.java
Patch:
@@ -4,7 +4,6 @@
 import it.unimi.dsi.fastutil.objects.Reference2ReferenceMaps;
 import it.unimi.dsi.fastutil.objects.Reference2ReferenceOpenHashMap;
 import me.jellysquid.mods.sodium.client.SodiumClientMod;
-import me.jellysquid.mods.sodium.client.gui.SodiumGameOptions;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.lwjgl.system.MemoryUtil;

File: src/main/java/me/jellysquid/mods/sodium/client/render/pipeline/FluidRenderer.java
Patch:
@@ -77,7 +77,7 @@ private boolean isFluidExposed(BlockRenderView world, int x, int y, int z, Direc
             BlockPos pos = this.scratchPos.set(x, y, z);
             BlockState blockState = world.getBlockState(pos);
             VoxelShape shape = blockState.getCullingShape(world, pos);
-            if (VoxelShapes.isSideCovered(VoxelShapes.fullCube(), shape, dir.getOpposite())) {
+            if (blockState.isOpaque() && VoxelShapes.isSideCovered(VoxelShapes.fullCube(), shape, dir.getOpposite())) {
                 return false; // Fluid is in waterlogged block that self occludes
             }
         }

File: src/main/java/me/jellysquid/mods/sodium/client/model/quad/properties/ModelQuadFacing.java
Patch:
@@ -12,6 +12,8 @@ public enum ModelQuadFacing {
     UNASSIGNED;
 
     public static final ModelQuadFacing[] VALUES = ModelQuadFacing.values();
+    public static final ModelQuadFacing[] DIRECTIONS = new ModelQuadFacing[] { UP, DOWN, EAST, WEST, SOUTH, NORTH };
+
     public static final int COUNT = VALUES.length;
 
     public static ModelQuadFacing fromDirection(Direction dir) {

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/entity/cull/MixinEntityRenderer.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.features.entity.smooth_lighting;
+package me.jellysquid.mods.sodium.mixin.features.entity.cull;
 
 import me.jellysquid.mods.sodium.client.render.SodiumWorldRenderer;
 import net.minecraft.client.render.Frustum;

File: src/main/java/me/jellysquid/mods/sodium/client/gl/arena/staging/MappedStagingBuffer.java
Patch:
@@ -17,7 +17,7 @@ public class MappedStagingBuffer implements StagingBuffer {
             EnumBitField.of(GlBufferStorageFlags.PERSISTENT, GlBufferStorageFlags.CLIENT_STORAGE, GlBufferStorageFlags.MAP_WRITE, GlBufferStorageFlags.COHERENT);
 
     private static final EnumBitField<GlBufferMapFlags> MAP_FLAGS =
-            EnumBitField.of(GlBufferMapFlags.PERSISTENT, GlBufferMapFlags.INVALIDATE_BUFFER, GlBufferMapFlags.WRITE);
+            EnumBitField.of(GlBufferMapFlags.PERSISTENT, GlBufferMapFlags.INVALIDATE_BUFFER, GlBufferMapFlags.WRITE, GlBufferMapFlags.COHERENT);
 
     private final FallbackStagingBuffer fallbackStagingBuffer;
 

File: src/main/java/me/jellysquid/mods/sodium/client/gl/buffer/GlBufferMapFlags.java
Patch:
@@ -10,7 +10,8 @@ public enum GlBufferMapFlags implements EnumBit {
     PERSISTENT(GL44C.GL_MAP_PERSISTENT_BIT),
     INVALIDATE_BUFFER(GL30C.GL_MAP_INVALIDATE_BUFFER_BIT),
     INVALIDATE_RANGE(GL30C.GL_MAP_INVALIDATE_RANGE_BIT),
-    EXPLICIT_FLUSH(GL30C.GL_MAP_FLUSH_EXPLICIT_BIT);
+    EXPLICIT_FLUSH(GL30C.GL_MAP_FLUSH_EXPLICIT_BIT),
+    COHERENT(GL44C.GL_MAP_COHERENT_BIT);
 
     private final int bit;
 

File: src/main/java/me/jellysquid/mods/sodium/client/gl/device/GLRenderDevice.java
Patch:
@@ -35,7 +35,7 @@ public void makeActive() {
             return;
         }
 
-        this.stateTracker.clearRestoreState();
+        this.stateTracker.push();
         this.isActive = true;
     }
 
@@ -45,7 +45,7 @@ public void makeInactive() {
             return;
         }
 
-        this.stateTracker.applyRestoreState();
+        this.stateTracker.pop();
         this.isActive = false;
     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/shader/ChunkFogMode.java
Patch:
@@ -9,15 +9,15 @@ public enum ChunkFogMode {
     NONE(ChunkShaderFogComponent.None::new, ImmutableList.of()),
     SMOOTH(ChunkShaderFogComponent.Smooth::new, ImmutableList.of("USE_FOG", "USE_FOG_SMOOTH"));
 
-    private final Function<ChunkProgram, ChunkShaderFogComponent> factory;
+    private final Function<ShaderBindingContext, ChunkShaderFogComponent> factory;
     private final List<String> defines;
 
-    ChunkFogMode(Function<ChunkProgram, ChunkShaderFogComponent> factory, List<String> defines) {
+    ChunkFogMode(Function<ShaderBindingContext, ChunkShaderFogComponent> factory, List<String> defines) {
         this.factory = factory;
         this.defines = defines;
     }
 
-    public Function<ChunkProgram, ChunkShaderFogComponent> getFactory() {
+    public Function<ShaderBindingContext, ChunkShaderFogComponent> getFactory() {
         return this.factory;
     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/SodiumClientMod.java
Patch:
@@ -1,6 +1,7 @@
 package me.jellysquid.mods.sodium.client;
 
 import me.jellysquid.mods.sodium.client.gui.SodiumGameOptions;
+import me.jellysquid.mods.sodium.client.util.FlawlessFrames;
 import net.fabricmc.api.ClientModInitializer;
 import net.fabricmc.loader.api.FabricLoader;
 import net.fabricmc.loader.api.ModContainer;
@@ -22,6 +23,8 @@ public void onInitializeClient() {
         MOD_VERSION = mod.getMetadata()
                 .getVersion()
                 .getFriendlyString();
+
+        FlawlessFrames.onClientInitialization();
     }
 
     public static SodiumGameOptions options() {

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/Option.java
Patch:
@@ -7,7 +7,7 @@
 import java.util.Collection;
 
 public interface Option<T> {
-    String getName();
+    Text getName();
 
     Text getTooltip();
 

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/TextProvider.java
Patch:
@@ -1,5 +1,7 @@
 package me.jellysquid.mods.sodium.client.gui.options;
 
+import net.minecraft.text.Text;
+
 public interface TextProvider {
-    String getLocalizedName();
+    Text getLocalizedName();
 }

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/control/ControlElement.java
Patch:
@@ -4,6 +4,7 @@
 import me.jellysquid.mods.sodium.client.gui.widgets.AbstractWidget;
 import me.jellysquid.mods.sodium.client.util.Dim2i;
 import net.minecraft.client.util.math.MatrixStack;
+import net.minecraft.text.Text;
 import net.minecraft.util.Formatting;
 
 public class ControlElement<T> extends AbstractWidget {
@@ -24,7 +25,7 @@ public boolean isHovered() {
 
     @Override
     public void render(MatrixStack matrixStack, int mouseX, int mouseY, float delta) {
-        String name = this.option.getName();
+        String name = this.option.getName().getString();
         String label;
 
         if (this.hovered && this.font.getWidth(name) > (this.dim.width() - this.option.getControl().getMaxWidth())) {

File: src/main/java/me/jellysquid/mods/sodium/client/gui/widgets/FlatButtonWidget.java
Patch:
@@ -3,17 +3,18 @@
 import me.jellysquid.mods.sodium.client.util.Dim2i;
 import net.minecraft.client.gui.Drawable;
 import net.minecraft.client.util.math.MatrixStack;
+import net.minecraft.text.Text;
 
 public class FlatButtonWidget extends AbstractWidget implements Drawable {
     private final Dim2i dim;
-    private final String label;
+    private final Text label;
     private final Runnable action;
 
     private boolean selected;
     private boolean enabled = true;
     private boolean visible = true;
 
-    public FlatButtonWidget(Dim2i dim, String label, Runnable action) {
+    public FlatButtonWidget(Dim2i dim, Text label, Runnable action) {
         this.dim = dim;
         this.label = label;
         this.action = action;

File: src/main/java/me/jellysquid/mods/sodium/client/gl/device/DrawCommandList.java
Patch:
@@ -1,11 +1,12 @@
 package me.jellysquid.mods.sodium.client.gl.device;
 
+import me.jellysquid.mods.sodium.client.gl.tessellation.GlIndexType;
 import org.lwjgl.PointerBuffer;
 
 import java.nio.IntBuffer;
 
 public interface DrawCommandList extends AutoCloseable {
-    void multiDrawElementsBaseVertex(PointerBuffer pointer, IntBuffer count, IntBuffer baseVertex);
+    void multiDrawElementsBaseVertex(PointerBuffer pointer, IntBuffer count, IntBuffer baseVertex, GlIndexType indexType);
 
     void endTessellating();
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/ChunkGraphicsState.java
Patch:
@@ -1,6 +1,7 @@
 package me.jellysquid.mods.sodium.client.render.chunk;
 
 import me.jellysquid.mods.sodium.client.gl.arena.GlBufferSegment;
+import me.jellysquid.mods.sodium.client.gl.tessellation.GlIndexType;
 import me.jellysquid.mods.sodium.client.gl.util.ElementRange;
 import me.jellysquid.mods.sodium.client.model.quad.properties.ModelQuadFacing;
 import me.jellysquid.mods.sodium.client.render.chunk.data.ChunkMeshData;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/ChunkBuildResult.java
Patch:
@@ -1,5 +1,6 @@
 package me.jellysquid.mods.sodium.client.render.chunk.compile;
 
+import me.jellysquid.mods.sodium.client.gl.tessellation.GlIndexType;
 import me.jellysquid.mods.sodium.client.render.chunk.RenderSection;
 import me.jellysquid.mods.sodium.client.render.chunk.data.ChunkMeshData;
 import me.jellysquid.mods.sodium.client.render.chunk.data.ChunkRenderData;

File: src/main/java/me/jellysquid/mods/sodium/common/config/SodiumConfig.java
Patch:
@@ -49,6 +49,7 @@ private SodiumConfig() {
         this.addMixinRule("features.particle.cull", true);
         this.addMixinRule("features.particle.fast_render", true);
         this.addMixinRule("features.render_layer", true);
+        this.addMixinRule("features.sky", true);
         this.addMixinRule("features.texture_tracking", true);
         this.addMixinRule("features.texture_updates", true);
         this.addMixinRule("features.world_ticking", true);

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/RenderSectionManager.java
Patch:
@@ -325,6 +325,7 @@ public void updateChunks() {
         this.needsUpdate |= this.performPendingUploads();
 
         if (!blockingFutures.isEmpty()) {
+            this.needsUpdate = true;
             this.regions.upload(RenderDevice.INSTANCE.createCommandList(), new FutureQueueDrainingIterator<>(blockingFutures));
         }
 

File: src/main/java/me/jellysquid/mods/sodium/client/gl/shader/GlProgram.java
Patch:
@@ -1,5 +1,6 @@
 package me.jellysquid.mods.sodium.client.gl.shader;
 
+import com.mojang.blaze3d.platform.GlStateManager;
 import me.jellysquid.mods.sodium.client.gl.GlObject;
 import net.minecraft.util.Identifier;
 import org.apache.logging.log4j.LogManager;
@@ -84,7 +85,7 @@ public <P extends GlProgram> P build(ProgramFactory<P> factory) {
                 LOGGER.warn("Program link log for " + this.name + ": " + log);
             }
 
-            int result = GL20C.glGetProgrami(this.program, GL20C.GL_LINK_STATUS);
+            int result = GlStateManager.glGetProgrami(this.program, GL20C.GL_LINK_STATUS);
 
             if (result != GL20C.GL_TRUE) {
                 throw new RuntimeException("Shader program linking failed, see log for details");

File: src/main/java/me/jellysquid/mods/sodium/client/gl/shader/GlShader.java
Patch:
@@ -1,5 +1,6 @@
 package me.jellysquid.mods.sodium.client.gl.shader;
 
+import com.mojang.blaze3d.platform.GlStateManager;
 import me.jellysquid.mods.sodium.client.gl.GlObject;
 import net.minecraft.util.Identifier;
 import org.apache.logging.log4j.LogManager;
@@ -27,7 +28,7 @@ public GlShader(ShaderType type, Identifier name, String src) {
             LOGGER.warn("Shader compilation log for " + this.name + ": " + log);
         }
 
-        int result = GL20C.glGetShaderi(handle, GL20C.GL_COMPILE_STATUS);
+        int result = GlStateManager.glGetShaderi(handle, GL20C.GL_COMPILE_STATUS);
 
         if (result != GL20C.GL_TRUE) {
             throw new RuntimeException("Shader compilation failed, see log for details");

File: src/main/java/me/jellysquid/mods/sodium/client/gl/arena/GlBufferArena.java
Patch:
@@ -301,7 +301,7 @@ private boolean tryUpload(CommandList commandList, PendingUpload upload) {
             return false;
         }
 
-        ByteBuffer data = upload.data.getUnsafeBuffer();
+        ByteBuffer data = upload.data.getDirectBuffer();
 
         if (dst.getLength() * this.stride != data.remaining()) {
             throw new IllegalStateException("Buffer alloc length mismatch (expected %d, found %d)".formatted(dst.getLength() * this.stride, data.remaining()));

File: src/main/java/me/jellysquid/mods/sodium/client/model/IndexBufferBuilder.java
Patch:
@@ -31,7 +31,7 @@ public int getSize() {
         return this.getCount() * 4;
     }
 
-    public void reset() {
+    public void start() {
         this.indices.clear();
     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/SodiumWorldRenderer.java
Patch:
@@ -13,6 +13,7 @@
 import me.jellysquid.mods.sodium.client.render.chunk.passes.BlockRenderPassManager;
 import me.jellysquid.mods.sodium.client.render.chunk.region.RenderRegion;
 import me.jellysquid.mods.sodium.client.render.pipeline.context.ChunkRenderCacheShared;
+import me.jellysquid.mods.sodium.client.util.NativeBuffer;
 import me.jellysquid.mods.sodium.client.util.math.FrustumExtended;
 import me.jellysquid.mods.sodium.client.world.ChunkStatusListener;
 import me.jellysquid.mods.sodium.client.world.ClientChunkManagerExtended;
@@ -158,6 +159,8 @@ public boolean isTerrainRenderComplete() {
      * Called prior to any chunk rendering in order to update necessary state.
      */
     public void updateChunks(Camera camera, Frustum frustum, boolean hasForcedFrustum, int frame, boolean spectator) {
+        NativeBuffer.reclaim(false);
+
         this.frustum = frustum;
 
         this.useEntityCulling = SodiumClientMod.options().advanced.useEntityCulling;

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/model/MixinWeightedBakedModel.java
Patch:
@@ -52,7 +52,7 @@ private static <T extends Weighted> T getAt(List<T> pool, int totalWeight) {
                 return null;
             }
 
-            weighted = pool.get(i);
+            weighted = pool.get(i++);
             totalWeight -= weighted.getWeight().getValue();
         } while (totalWeight >= 0);
 

File: src/main/java/me/jellysquid/mods/sodium/common/config/SodiumConfig.java
Patch:
@@ -53,6 +53,7 @@ private SodiumConfig() {
         this.addMixinRule("features.texture_updates", true);
         this.addMixinRule("features.world_ticking", true);
         this.addMixinRule("features.fast_biome_colors", true);
+        this.addMixinRule("features.shader", true);
     }
 
     /**

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/shader/MixinShader.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.core;
+package me.jellysquid.mods.sodium.mixin.features.shader;
 
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;

File: src/main/java/me/jellysquid/mods/sodium/client/gl/array/GlVertexArray.java
Patch:
@@ -10,9 +10,7 @@
 public class GlVertexArray extends GlObject {
     public static final int NULL_ARRAY_ID = 0;
 
-    public GlVertexArray(RenderDevice owner) {
-        super(owner);
-
+    public GlVertexArray() {
         this.setHandle(GL30C.glGenVertexArrays());
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/gl/attribute/GlVertexAttribute.java
Patch:
@@ -17,7 +17,7 @@ public class GlVertexAttribute {
      * @param pointer The offset to the first component in the attribute
      */
     public GlVertexAttribute(GlVertexAttributeFormat format, int count, boolean normalized, int pointer, int stride) {
-        this(format.getGlFormat(), format.getSize() * count, count, normalized, pointer, stride);
+        this(format.typeId(), format.size() * count, count, normalized, pointer, stride);
     }
 
     protected GlVertexAttribute(int format, int size, int count, boolean normalized, int pointer, int stride) {

File: src/main/java/me/jellysquid/mods/sodium/client/gl/attribute/GlVertexAttributeBinding.java
Patch:
@@ -8,7 +8,7 @@ public class GlVertexAttributeBinding extends GlVertexAttribute {
     public GlVertexAttributeBinding(ShaderBindingPoint bindingPoint, GlVertexAttribute attribute) {
         super(attribute.getFormat(), attribute.getSize(), attribute.getCount(), attribute.isNormalized(), attribute.getPointer(), attribute.getStride());
 
-        this.index = bindingPoint.getGenericAttributeIndex();
+        this.index = bindingPoint.genericAttributeIndex();
     }
 
     public int getIndex() {

File: src/main/java/me/jellysquid/mods/sodium/client/gl/device/DrawCommandList.java
Patch:
@@ -7,8 +7,6 @@
 public interface DrawCommandList extends AutoCloseable {
     void multiDrawElementsBaseVertex(PointerBuffer pointer, IntBuffer count, IntBuffer baseVertex);
 
-    void multiDrawElements(PointerBuffer pointer, IntBuffer count);
-
     void endTessellating();
 
     void flush();

File: src/main/java/me/jellysquid/mods/sodium/client/gl/shader/GlShader.java
Patch:
@@ -15,9 +15,7 @@ public class GlShader extends GlObject {
 
     private final Identifier name;
 
-    public GlShader(RenderDevice owner, ShaderType type, Identifier name, String src) {
-        super(owner);
-
+    public GlShader(ShaderType type, Identifier name, String src) {
         this.name = name;
 
         int handle = GL20C.glCreateShader(type.id);

File: src/main/java/me/jellysquid/mods/sodium/client/gl/tessellation/GlAbstractTessellation.java
Patch:
@@ -24,9 +24,9 @@ public GlPrimitiveType getPrimitiveType() {
 
     protected void bindAttributes(CommandList commandList) {
         for (TessellationBinding binding : this.bindings) {
-            commandList.bindBuffer(GlBufferTarget.ARRAY_BUFFER, binding.getBuffer());
+            commandList.bindBuffer(GlBufferTarget.ARRAY_BUFFER, binding.buffer());
 
-            for (GlVertexAttributeBinding attrib : binding.getAttributeBindings()) {
+            for (GlVertexAttributeBinding attrib : binding.attributeBindings()) {
                 GL20C.glVertexAttribPointer(attrib.getIndex(), attrib.getCount(), attrib.getFormat(), attrib.isNormalized(),
                         attrib.getStride(), attrib.getPointer());
                 GL20C.glEnableVertexAttribArray(attrib.getIndex());

File: src/main/java/me/jellysquid/mods/sodium/client/gl/util/GlMultiDrawBatch.java
Patch:
@@ -26,7 +26,7 @@ static GlMultiDrawBatch create(int capacity) {
 
     void begin();
 
-    void add(int pointer, int count, int baseVertex);
+    void add(long pointer, int count, int baseVertex);
 
     void end();
 
@@ -72,7 +72,7 @@ public void begin() {
         }
 
         @Override
-        public void add(int pointer, int count, int baseVertex) {
+        public void add(long pointer, int count, int baseVertex) {
             int i = this.count++;
 
             this.bufPointer.put(i, pointer);
@@ -153,7 +153,7 @@ public void begin() {
         }
 
         @Override
-        public void add(int pointer, int count, int baseVertex) {
+        public void add(long pointer, int count, int baseVertex) {
             if (this.count >= this.capacity)  {
                 throw new BufferUnderflowException();
             }

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptions.java
Patch:
@@ -106,7 +106,6 @@ public void writeChanges() throws IOException {
             throw new IOException("Not a directory: " + dir);
         }
 
-        Files.write(this.configPath, GSON.toJson(this)
-                .getBytes(StandardCharsets.UTF_8));
+        Files.writeString(this.configPath, GSON.toJson(this));
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumOptionsGUI.java
Patch:
@@ -210,7 +210,7 @@ private void renderOptionTooltip(MatrixStack matrixStack, ControlElement<?> elem
 
         int boxWidth = 200;
 
-        int boxY = dim.getOriginY();
+        int boxY = dim.y();
         int boxX = dim.getLimitX() + boxPadding;
 
         Option<?> option = element.getOption();

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/OptionImpact.java
Patch:
@@ -6,7 +6,6 @@ public enum OptionImpact {
     LOW(Formatting.GREEN, "Low"),
     MEDIUM(Formatting.YELLOW, "Medium"),
     HIGH(Formatting.GOLD, "High"),
-    EXTREME(Formatting.RED, "Extreme"),
     VARIES(Formatting.WHITE, "Varies");
 
     private final Formatting color;

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/control/ControlElement.java
Patch:
@@ -27,7 +27,7 @@ public void render(MatrixStack matrixStack, int mouseX, int mouseY, float delta)
         String name = this.option.getName();
         String label;
 
-        if (this.hovered && this.font.getWidth(name) > (this.dim.getWidth() - this.option.getControl().getMaxWidth())) {
+        if (this.hovered && this.font.getWidth(name) > (this.dim.width() - this.option.getControl().getMaxWidth())) {
             name = name.substring(0, Math.min(name.length(), 10)) + "...";
         }
 
@@ -43,8 +43,8 @@ public void render(MatrixStack matrixStack, int mouseX, int mouseY, float delta)
 
         this.hovered = this.dim.containsCursor(mouseX, mouseY);
 
-        this.drawRect(this.dim.getOriginX(), this.dim.getOriginY(), this.dim.getLimitX(), this.dim.getLimitY(), this.hovered ? 0xE0000000 : 0x90000000);
-        this.drawString(matrixStack, label, this.dim.getOriginX() + 6, this.dim.getCenterY() - 4, 0xFFFFFFFF);
+        this.drawRect(this.dim.x(), this.dim.y(), this.dim.getLimitX(), this.dim.getLimitY(), this.hovered ? 0xE0000000 : 0x90000000);
+        this.drawString(matrixStack, label, this.dim.x() + 6, this.dim.getCenterY() - 4, 0xFFFFFFFF);
     }
 
     public Option<T> getOption() {

File: src/main/java/me/jellysquid/mods/sodium/client/gui/widgets/FlatButtonWidget.java
Patch:
@@ -32,11 +32,11 @@ public void render(MatrixStack matrixStack, int mouseX, int mouseY, float delta)
 
         int strWidth = this.font.getWidth(this.label);
 
-        this.drawRect(this.dim.getOriginX(), this.dim.getOriginY(), this.dim.getLimitX(), this.dim.getLimitY(), backgroundColor);
+        this.drawRect(this.dim.x(), this.dim.y(), this.dim.getLimitX(), this.dim.getLimitY(), backgroundColor);
         this.drawString(matrixStack, this.label, this.dim.getCenterX() - (strWidth / 2), this.dim.getCenterY() - 4, textColor);
 
         if (this.enabled && this.selected) {
-            this.drawRect(this.dim.getOriginX(), this.dim.getLimitY() - 1, this.dim.getLimitX(), this.dim.getLimitY(), 0xFF94E4D3);
+            this.drawRect(this.dim.x(), this.dim.getLimitY() - 1, this.dim.getLimitX(), this.dim.getLimitY(), 0xFF94E4D3);
         }
     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/ChunkRenderList.java
Patch:
@@ -20,7 +20,7 @@ public Iterable<Map.Entry<RenderRegion, List<RenderSection>>> sorted(boolean rev
                 this.entries.reference2ObjectEntrySet();
 
         if (reverse) {
-            return () -> new Iterator<Map.Entry<RenderRegion, List<RenderSection>>>() {
+            return () -> new Iterator<>() {
                 final ObjectBidirectionalIterator<Reference2ObjectMap.Entry<RenderRegion, List<RenderSection>>> iterator =
                         entries.fastIterator(entries.last());
 
@@ -35,7 +35,7 @@ public Map.Entry<RenderRegion, List<RenderSection>> next() {
                 }
             };
         } else {
-            return () -> new Iterator<Map.Entry<RenderRegion, List<RenderSection>>>() {
+            return () -> new Iterator<>() {
                 final ObjectBidirectionalIterator<Reference2ObjectMap.Entry<RenderRegion, List<RenderSection>>> iterator =
                         entries.fastIterator();
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/ChunkBuildResult.java
Patch:
@@ -16,11 +16,13 @@ public class ChunkBuildResult {
     public final RenderSection render;
     public final ChunkRenderData data;
     public final Map<BlockRenderPass, ChunkMeshData> meshes;
+    public final int buildTime;
 
-    public ChunkBuildResult(RenderSection render, ChunkRenderData data, Map<BlockRenderPass, ChunkMeshData> meshes) {
+    public ChunkBuildResult(RenderSection render, ChunkRenderData data, Map<BlockRenderPass, ChunkMeshData> meshes, int buildTime) {
         this.render = render;
         this.data = data;
         this.meshes = meshes;
+        this.buildTime = buildTime;
     }
 
     public ChunkMeshData getMesh(BlockRenderPass pass) {

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/data/ChunkMeshData.java
Patch:
@@ -17,7 +17,7 @@ public ChunkMeshData(IndexedVertexData vertexData, Map<ModelQuadFacing, ElementR
     }
 
     public Map<ModelQuadFacing, ElementRange> getParts() {
-        return Collections.unmodifiableMap(this.parts);
+        return this.parts;
     }
 
     public IndexedVertexData getVertexData() {

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/shader/ChunkProgram.java
Patch:
@@ -30,7 +30,7 @@ public class ChunkProgram extends GlProgram {
     private final ChunkShaderFogComponent fogShader;
 
     public ChunkProgram(RenderDevice owner, int handle, ChunkShaderOptions options) {
-        super(owner, handle);
+        super(handle);
 
         this.uModelViewProjectionMatrix = this.getUniformLocation("u_ModelViewProjectionMatrix");
 
@@ -41,7 +41,7 @@ public ChunkProgram(RenderDevice owner, int handle, ChunkShaderOptions options)
         this.uTextureScale = this.getUniformLocation("u_TextureScale");
         this.uRegionOrigin = this.getUniformLocation("u_RegionOrigin");
 
-        this.fogShader = options.fogMode.getFactory().apply(this);
+        this.fogShader = options.fog().getFactory().apply(this);
     }
 
     public void setup(MatrixStack matrixStack, ChunkVertexType vertexType) {

File: src/main/java/me/jellysquid/mods/sodium/client/render/occlusion/BlockOcclusionCache.java
Patch:
@@ -100,9 +100,7 @@ public CachedOcclusionShapeTest copy() {
 
         @Override
         public boolean equals(Object o) {
-            if (o instanceof CachedOcclusionShapeTest) {
-                CachedOcclusionShapeTest that = (CachedOcclusionShapeTest) o;
-
+            if (o instanceof CachedOcclusionShapeTest that) {
                 return this.a == that.a &&
                         this.b == that.b;
             }

File: src/main/java/me/jellysquid/mods/sodium/client/world/cloned/ClonedChunkSection.java
Patch:
@@ -83,7 +83,7 @@ private void reset(ChunkSectionPos pos) {
     }
 
     private void copyBlockData(ChunkSection section) {
-        PalettedContainerExtended<BlockState> container = PalettedContainerExtended.cast(section.getContainer());;
+        PalettedContainerExtended<BlockState> container = PalettedContainerExtended.cast(section.getContainer());
 
         this.blockStateData = copyBlockData(container);
         this.blockStatePalette = copyPalette(container);

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/debug/MixinDebugHud.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.google.common.collect.Lists;
 import me.jellysquid.mods.sodium.client.SodiumClientMod;
+import me.jellysquid.mods.sodium.client.render.SodiumWorldRenderer;
 import net.minecraft.client.gui.hud.DebugHud;
 import net.minecraft.util.Formatting;
 import org.spongepowered.asm.mixin.Mixin;
@@ -26,6 +27,8 @@ private ArrayList<String> redirectRightTextEarly(Object[] elements) {
         strings.add("Sodium Renderer");
         strings.add(Formatting.UNDERLINE + getFormattedVersionText());
 
+        strings.addAll(SodiumWorldRenderer.getInstance().getMemoryDebugStrings());
+
         for (int i = 0; i < strings.size(); i++) {
             String str = strings.get(i);
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/texture_updates/MixinSpriteInterpolated.java
Patch:
@@ -55,8 +55,8 @@ void apply(Sprite.Animation animation) {
             NativeImage dst = this.images[layer];
 
             // Source pointers
-            long s1p = src.pointer + (curX + (curY * src.getWidth()) * STRIDE);
-            long s2p = src.pointer + (nextX + (nextY * src.getWidth()) * STRIDE);
+            long s1p = src.pointer + (curX + ((long) curY * src.getWidth()) * STRIDE);
+            long s2p = src.pointer + (nextX + ((long) nextY * src.getWidth()) * STRIDE);
 
             // Destination pointers
             long dp = dst.pointer;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/ChunkBuilder.java
Patch:
@@ -222,6 +222,8 @@ public void run() {
                     job.future.completeExceptionally(new RuntimeException("No result was produced by the task"));
                 }
             }
+
+            this.bufferCache.destroy();
         }
 
         /**

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/RegionChunkRenderer.java
Patch:
@@ -34,7 +34,7 @@ public RegionChunkRenderer(RenderDevice device, ChunkVertexType vertexType) {
 
         this.vertexAttributeBindings = new GlVertexAttributeBinding[] {
                 new GlVertexAttributeBinding(ChunkShaderBindingPoints.ATTRIBUTE_ORIGIN,
-                        this.vertexFormat.getAttribute(ChunkMeshAttribute.CHUNK_OFFSET)),
+                        this.vertexFormat.getAttribute(ChunkMeshAttribute.OFFSET)),
                 new GlVertexAttributeBinding(ChunkShaderBindingPoints.ATTRIBUTE_POSITION,
                         this.vertexFormat.getAttribute(ChunkMeshAttribute.POSITION)),
                 new GlVertexAttributeBinding(ChunkShaderBindingPoints.ATTRIBUTE_COLOR,

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/format/ChunkMeshAttribute.java
Patch:
@@ -1,7 +1,7 @@
 package me.jellysquid.mods.sodium.client.render.chunk.format;
 
 public enum ChunkMeshAttribute {
-    CHUNK_OFFSET,
+    OFFSET,
     POSITION,
     COLOR,
     BLOCK_TEXTURE,

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/format/sfp/ModelVertexBufferWriterNio.java
Patch:
@@ -4,7 +4,6 @@
 import me.jellysquid.mods.sodium.client.model.vertex.buffer.VertexBufferWriterNio;
 import me.jellysquid.mods.sodium.client.render.chunk.format.ChunkModelVertexFormats;
 import me.jellysquid.mods.sodium.client.render.chunk.format.ModelVertexSink;
-import me.jellysquid.mods.sodium.client.util.Int10;
 
 import java.nio.ByteBuffer;
 
@@ -18,7 +17,9 @@ public void writeVertex(int offsetX, int offsetY, int offsetZ, float posX, float
         int i = this.writeOffset;
 
         ByteBuffer buffer = this.byteBuffer;
-        buffer.putInt(i, Int10.pack(offsetX, offsetY, offsetZ));
+        buffer.put(i, (byte) offsetX);
+        buffer.put(i + 1, (byte) offsetY);
+        buffer.put(i + 2, (byte) offsetZ);
 
         buffer.putShort(i + 4, ModelVertexType.encodePosition(posX));
         buffer.putShort(i + 6, ModelVertexType.encodePosition(posY));

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/format/sfp/ModelVertexBufferWriterUnsafe.java
Patch:
@@ -4,7 +4,6 @@
 import me.jellysquid.mods.sodium.client.model.vertex.buffer.VertexBufferWriterUnsafe;
 import me.jellysquid.mods.sodium.client.render.chunk.format.ChunkModelVertexFormats;
 import me.jellysquid.mods.sodium.client.render.chunk.format.ModelVertexSink;
-import me.jellysquid.mods.sodium.client.util.Int10;
 
 public class ModelVertexBufferWriterUnsafe extends VertexBufferWriterUnsafe implements ModelVertexSink {
     public ModelVertexBufferWriterUnsafe(VertexBufferView backingBuffer) {
@@ -15,7 +14,9 @@ public ModelVertexBufferWriterUnsafe(VertexBufferView backingBuffer) {
     public void writeVertex(int offsetX, int offsetY, int offsetZ, float posX, float posY, float posZ, int color, float u, float v, int light) {
         long i = this.writePointer;
 
-        UNSAFE.putInt(i, Int10.pack(offsetX, offsetY, offsetZ));
+        UNSAFE.putByte(i, (byte) offsetX);
+        UNSAFE.putByte(i + 1, (byte) offsetY);
+        UNSAFE.putByte(i + 2, (byte) offsetZ);
 
         UNSAFE.putShort(i + 4, ModelVertexType.encodePosition(posX));
         UNSAFE.putShort(i + 6, ModelVertexType.encodePosition(posY));

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/format/sfp/ModelVertexType.java
Patch:
@@ -7,17 +7,15 @@
 import me.jellysquid.mods.sodium.client.model.vertex.type.ChunkVertexType;
 import me.jellysquid.mods.sodium.client.render.chunk.format.ChunkMeshAttribute;
 import me.jellysquid.mods.sodium.client.render.chunk.format.ModelVertexSink;
-import me.jellysquid.mods.sodium.client.util.Int10;
 import net.minecraft.client.render.VertexConsumer;
-import net.minecraft.util.math.MathHelper;
 
 /**
  * Simple vertex format which uses single-precision floating point numbers to represent position and texture
  * coordinates.
  */
 public class ModelVertexType implements ChunkVertexType {
     public static final GlVertexFormat<ChunkMeshAttribute> VERTEX_FORMAT = GlVertexFormat.builder(ChunkMeshAttribute.class, 24)
-            .addElement(ChunkMeshAttribute.CHUNK_OFFSET, 0, GlVertexAttributeFormat.UNSIGNED_INT_2_10_10_10_REV, 4, false)
+            .addElement(ChunkMeshAttribute.OFFSET, 0, GlVertexAttributeFormat.UNSIGNED_BYTE, 3, false)
             .addElement(ChunkMeshAttribute.POSITION, 4, GlVertexAttributeFormat.UNSIGNED_SHORT, 4, false)
             .addElement(ChunkMeshAttribute.COLOR, 12, GlVertexAttributeFormat.UNSIGNED_BYTE, 4, true)
             .addElement(ChunkMeshAttribute.BLOCK_TEXTURE, 16, GlVertexAttributeFormat.UNSIGNED_SHORT, 2, false)

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/tasks/ChunkRenderRebuildTask.java
Patch:
@@ -54,7 +54,6 @@ public ChunkBuildResult performBuild(ChunkRenderCacheLocal cache, ChunkBuildBuff
         cache.init(this.context);
 
         WorldSlice slice = cache.getWorldSlice();
-        RenderRegion region = this.render.getRegion();
 
         int minX = this.render.getOriginX();
         int minY = this.render.getOriginY();

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/ChunkBuilder.java
Patch:
@@ -171,8 +171,6 @@ public void init(ClientWorld world, BlockRenderPassManager renderPassManager) {
      * but can be up to the number of available processor threads on the system.
      */
     private static int getOptimalThreadCount() {
-        if (true) return 1;
-
         return Math.max(1, Runtime.getRuntime().availableProcessors());
     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/ChunkRenderer.java
Patch:
@@ -1,6 +1,5 @@
 package me.jellysquid.mods.sodium.client.render.chunk;
 
-import it.unimi.dsi.fastutil.objects.Reference2ObjectMap;
 import me.jellysquid.mods.sodium.client.gl.device.CommandList;
 import me.jellysquid.mods.sodium.client.model.vertex.type.ChunkVertexType;
 import me.jellysquid.mods.sodium.client.render.chunk.passes.BlockRenderPass;
@@ -21,7 +20,7 @@ public interface ChunkRenderer {
      * @param pass The block render pass to execute
      * @param camera The camera context containing chunk offsets for the current render
      */
-    void render(MatrixStack matrixStack, CommandList commandList, Reference2ObjectMap<RenderRegion, List<RenderChunk>> renders, BlockRenderPass pass, ChunkCameraContext camera);
+    void render(MatrixStack matrixStack, CommandList commandList, ChunkRenderList renders, BlockRenderPass pass, ChunkCameraContext camera);
 
     /**
      * Deletes this render backend and any resources attached to it.

File: src/main/java/me/jellysquid/mods/sodium/client/gl/attribute/GlVertexAttributeFormat.java
Patch:
@@ -10,6 +10,9 @@ public class GlVertexAttributeFormat {
     public static final GlVertexAttributeFormat UNSIGNED_SHORT = new GlVertexAttributeFormat(GL20C.GL_UNSIGNED_SHORT, 2);
     public static final GlVertexAttributeFormat UNSIGNED_BYTE = new GlVertexAttributeFormat(GL20C.GL_UNSIGNED_BYTE, 1);
 
+    // TODO: Some formats have a fixed number of elements and the size variable is incorrect here as a result
+    public static final GlVertexAttributeFormat UNSIGNED_INT_2_10_10_10_REV = new GlVertexAttributeFormat(GL20C.GL_UNSIGNED_INT_2_10_10_10_REV, 4);
+
     private final int glId;
     private final int size;
 

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptions.java
Patch:
@@ -30,7 +30,6 @@ public static class AdvancedSettings {
         public boolean useEntityCulling = true;
         public boolean useParticleCulling = true;
         public boolean useFogOcclusion = true;
-        public boolean useCompactVertexFormat = true;
         public boolean useBlockFaceCulling = true;
         public boolean allowDirectMemoryAccess = true;
     }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/RenderChunkManager.java
Patch:
@@ -408,7 +408,7 @@ public ChunkRenderBuildTask createRebuildTask(RenderChunk render) {
         if (context == null) {
             return new ChunkRenderEmptyBuildTask(render);
         } else {
-            return new ChunkRenderRebuildTask(render, context, render.getRenderOrigin());
+            return new ChunkRenderRebuildTask(render, context);
         }
     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/buffers/ChunkModelBuilder.java
Patch:
@@ -9,6 +9,4 @@ public interface ChunkModelBuilder {
     PrimitiveSink<ModelVertexSink> getBuilder(ModelQuadFacing facing);
 
     void addSprite(Sprite sprite);
-
-    int getOffset();
 }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/format/ChunkMeshAttribute.java
Patch:
@@ -1,9 +1,9 @@
 package me.jellysquid.mods.sodium.client.render.chunk.format;
 
 public enum ChunkMeshAttribute {
+    CHUNK_OFFSET,
     POSITION,
     COLOR,
-    TEXTURE,
-    LIGHT,
-    CHUNK_OFFSET;
+    BLOCK_TEXTURE,
+    LIGHT_TEXTURE
 }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/format/ChunkModelOffset.java
Patch:
@@ -1,7 +1,7 @@
 package me.jellysquid.mods.sodium.client.render.chunk.format;
 
 public class ChunkModelOffset {
-    public float x, y, z;
+    public int x, y, z;
 
     public void set(int x, int y, int z) {
         this.x = x;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/RegionChunkRenderer.java
Patch:
@@ -1,6 +1,7 @@
 package me.jellysquid.mods.sodium.client.render.chunk;
 
 import it.unimi.dsi.fastutil.objects.Reference2ObjectMap;
+import it.unimi.dsi.fastutil.objects.Reference2ObjectMaps;
 import me.jellysquid.mods.sodium.client.gl.attribute.GlVertexAttributeBinding;
 import me.jellysquid.mods.sodium.client.gl.device.CommandList;
 import me.jellysquid.mods.sodium.client.gl.device.DrawCommandList;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/RegionChunkRenderer.java
Patch:
@@ -51,7 +51,7 @@ public void render(MatrixStack matrixStack, CommandList commandList,
                        ChunkCameraContext camera) {
         super.begin(pass, matrixStack);
 
-        for (Map.Entry<RenderRegion, List<RenderChunk>> entry : renders.reference2ObjectEntrySet()) {
+        for (Map.Entry<RenderRegion, List<RenderChunk>> entry : Reference2ObjectMaps.fastIterable(renders)) {
             RenderRegion region = entry.getKey();
             RenderRegion.RenderRegionArenas arenas = region.getArenas(pass);
 

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptions.java
Patch:
@@ -26,16 +26,13 @@ public void notifyListeners() {
     }
 
     public static class AdvancedSettings {
-        public boolean useChunkMultidraw = true;
-
         public boolean animateOnlyVisibleTextures = true;
         public boolean useEntityCulling = true;
         public boolean useParticleCulling = true;
         public boolean useFogOcclusion = true;
         public boolean useCompactVertexFormat = true;
         public boolean useBlockFaceCulling = true;
         public boolean allowDirectMemoryAccess = true;
-        public boolean ignoreDriverBlacklist = false;
     }
 
     public static class QualitySettings {

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/buffers/ChunkModelVertexTransformer.java
Patch:
@@ -17,7 +17,7 @@ public ChunkModelVertexTransformer(ModelVertexSink delegate, ChunkModelOffset of
     }
 
     @Override
-    public void writeVertex(float x, float y, float z, int color, float u, float v, int light) {
-        this.delegate.writeVertex(x + this.offset.x, y + this.offset.y, z + this.offset.z, color, u, v, light);
+    public void writeVertex(float x, float y, float z, int color, float u, float v, int light, int offset) {
+        this.delegate.writeVertex(x + this.offset.x, y + this.offset.y, z + this.offset.z, color, u, v, light, offset);
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/format/ChunkMeshAttribute.java
Patch:
@@ -4,5 +4,6 @@ public enum ChunkMeshAttribute {
     POSITION,
     COLOR,
     TEXTURE,
-    LIGHT
+    LIGHT,
+    CHUNK_OFFSET;
 }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/format/ModelVertexSink.java
Patch:
@@ -12,6 +12,7 @@ public interface ModelVertexSink extends VertexSink {
      * @param u The u-texture of the vertex
      * @param v The y-texture of the vertex
      * @param light The packed light-map coordinates of the vertex
+     * @param offset The chunk offset for the vertex
      */
-    void writeVertex(float x, float y, float z, int color, float u, float v, int light);
+    void writeVertex(float x, float y, float z, int color, float u, float v, int light, int offset);
 }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/format/hfp/HFPModelVertexType.java
Patch:
@@ -15,11 +15,12 @@
  * their centering offset), as the
  */
 public class HFPModelVertexType implements ChunkVertexType {
-    public static final GlVertexFormat<ChunkMeshAttribute> VERTEX_FORMAT = GlVertexFormat.builder(ChunkMeshAttribute.class, 20)
+    public static final GlVertexFormat<ChunkMeshAttribute> VERTEX_FORMAT = GlVertexFormat.builder(ChunkMeshAttribute.class, 24)
             .addElement(ChunkMeshAttribute.POSITION, 0, GlVertexAttributeFormat.UNSIGNED_SHORT, 3, false)
             .addElement(ChunkMeshAttribute.COLOR, 8, GlVertexAttributeFormat.UNSIGNED_BYTE, 4, true)
             .addElement(ChunkMeshAttribute.TEXTURE, 12, GlVertexAttributeFormat.UNSIGNED_SHORT, 2, false)
             .addElement(ChunkMeshAttribute.LIGHT, 16, GlVertexAttributeFormat.UNSIGNED_SHORT, 2, true)
+            .addElement(ChunkMeshAttribute.CHUNK_OFFSET, 20, GlVertexAttributeFormat.UNSIGNED_BYTE, 3, false)
             .build();
 
     public static final float MODEL_SCALE = (32.0f / 65536.0f);

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/format/sfp/SFPModelVertexBufferWriterNio.java
Patch:
@@ -13,7 +13,7 @@ public SFPModelVertexBufferWriterNio(VertexBufferView backingBuffer) {
     }
 
     @Override
-    public void writeVertex(float x, float y, float z, int color, float u, float v, int light) {
+    public void writeVertex(float x, float y, float z, int color, float u, float v, int light, int offset) {
         int i = this.writeOffset;
 
         ByteBuffer buffer = this.byteBuffer;
@@ -24,6 +24,7 @@ public void writeVertex(float x, float y, float z, int color, float u, float v,
         buffer.putFloat(i + 16, u);
         buffer.putFloat(i + 20, v);
         buffer.putInt(i + 24, encodeLightMapTexCoord(light));
+        buffer.putInt(i + 28, offset);
 
         this.advance();
     }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/format/sfp/SFPModelVertexBufferWriterUnsafe.java
Patch:
@@ -12,7 +12,7 @@ public SFPModelVertexBufferWriterUnsafe(VertexBufferView backingBuffer) {
 
     @SuppressWarnings("SuspiciousNameCombination")
     @Override
-    public void writeVertex(float x, float y, float z, int color, float u, float v, int light) {
+    public void writeVertex(float x, float y, float z, int color, float u, float v, int light, int offset) {
         long i = this.writePointer;
 
         UNSAFE.putFloat(i, x);
@@ -22,6 +22,7 @@ public void writeVertex(float x, float y, float z, int color, float u, float v,
         UNSAFE.putFloat(i + 16, u);
         UNSAFE.putFloat(i + 20, v);
         UNSAFE.putInt(i + 24, encodeLightMapTexCoord(light));
+        UNSAFE.putInt(i + 28, offset);
 
         this.advance();
     }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/format/sfp/SFPModelVertexType.java
Patch:
@@ -19,6 +19,7 @@ public class SFPModelVertexType implements ChunkVertexType {
             .addElement(ChunkMeshAttribute.COLOR, 12, GlVertexAttributeFormat.UNSIGNED_BYTE, 4, true)
             .addElement(ChunkMeshAttribute.TEXTURE, 16, GlVertexAttributeFormat.FLOAT, 2, false)
             .addElement(ChunkMeshAttribute.LIGHT, 24, GlVertexAttributeFormat.UNSIGNED_SHORT, 2, true)
+            .addElement(ChunkMeshAttribute.CHUNK_OFFSET, 28, GlVertexAttributeFormat.UNSIGNED_BYTE, 3, false)
             .build();
 
     public static final float MODEL_SCALE = 1.0f;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/tasks/ChunkRenderEmptyBuildTask.java
Patch:
@@ -7,6 +7,8 @@
 import me.jellysquid.mods.sodium.client.render.pipeline.context.ChunkRenderCacheLocal;
 import me.jellysquid.mods.sodium.client.util.task.CancellationSource;
 
+import java.util.Collections;
+
 /**
  * A build task which does no computation and always return an empty build result. These tasks are created whenever
  * chunk meshes need to be deleted as the only way to change graphics state is to send a message to the main
@@ -22,7 +24,7 @@ public ChunkRenderEmptyBuildTask(RenderChunk render) {
 
     @Override
     public ChunkBuildResult performBuild(ChunkRenderCacheLocal cache, ChunkBuildBuffers buffers, CancellationSource cancellationSource) {
-        return new ChunkBuildResult(this.render, ChunkRenderData.EMPTY);
+        return new ChunkBuildResult(this.render, ChunkRenderData.EMPTY, Collections.emptyMap());
     }
 
     @Override

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/cull/graph/ChunkGraphCuller.java
Patch:
@@ -107,7 +107,7 @@ private void initSearch(Camera camera, FrustumExtended frustum, int frame, boole
 
             this.visible.add(rootNode, null);
         } else {
-            chunkY = MathHelper.clamp(origin.getY() >> 4, 0, 15);
+            chunkY = MathHelper.clamp(origin.getY() >> 4, this.world.getBottomSectionCoord(), this.world.getTopSectionCoord() - 1);
 
             List<ChunkGraphNode> bestNodes = new ArrayList<>();
 

File: src/main/java/me/jellysquid/mods/sodium/client/gl/util/StructBuffer.java
Patch:
@@ -43,6 +43,7 @@ public void delete() {
         @Override
         public void reset() {
             this.writePointer = this.address;
+            this.count = 0;
         }
 
         @Override

File: src/main/java/me/jellysquid/mods/sodium/client/gl/util/GlMultiDrawBatch.java
Patch:
@@ -52,8 +52,8 @@ public boolean isEmpty() {
         return this.count <= 0;
     }
 
-    public void addChunkRender(ElementRange range) {
-        this.addChunkRender(range.elementOffset * 4 /* TODO: Allow custom pointer size */, range.elementCount, range.baseVertex);
+    public void addChunkRender(ElementRange range, int vertexOffset, int indexOffset) {
+        this.addChunkRender((indexOffset + range.elementOffset) * 4 /* TODO: Allow custom pointer size */, range.elementCount, vertexOffset + range.baseVertex);
     }
 
     public void addChunkRender(int pointer, int count, int baseVertex) {

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptionPages.java
Patch:
@@ -9,7 +9,7 @@
 import me.jellysquid.mods.sodium.client.gui.options.control.TickBoxControl;
 import me.jellysquid.mods.sodium.client.gui.options.storage.MinecraftOptionsStorage;
 import me.jellysquid.mods.sodium.client.gui.options.storage.SodiumOptionsStorage;
-import me.jellysquid.mods.sodium.client.render.chunk.backends.multidraw.MultidrawChunkRenderBackend;
+import me.jellysquid.mods.sodium.client.render.chunk.backend.multidraw.MultidrawChunkRenderer;
 import me.jellysquid.mods.sodium.client.util.UnsafeUtil;
 import net.minecraft.client.MinecraftClient;
 import net.minecraft.client.gl.Framebuffer;
@@ -248,7 +248,7 @@ public static OptionPage advanced() {
                         .setBinding((opts, value) -> opts.advanced.useChunkMultidraw = value, opts -> opts.advanced.useChunkMultidraw)
                         .setFlags(OptionFlag.REQUIRES_RENDERER_RELOAD)
                         .setImpact(OptionImpact.EXTREME)
-                        .setEnabled(MultidrawChunkRenderBackend.isSupported(sodiumOpts.getData().advanced.ignoreDriverBlacklist))
+                        .setEnabled(MultidrawChunkRenderer.isSupported(sodiumOpts.getData().advanced.ignoreDriverBlacklist))
                         .build())
                 .build());
 

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptions.java
Patch:
@@ -5,7 +5,6 @@
 import com.google.gson.GsonBuilder;
 import me.jellysquid.mods.sodium.client.SodiumClientMod;
 import me.jellysquid.mods.sodium.client.gui.options.TextProvider;
-import me.jellysquid.mods.sodium.client.render.chunk.backends.multidraw.MultidrawChunkRenderBackend;
 import net.minecraft.client.option.GraphicsMode;
 
 import java.io.FileReader;
@@ -14,8 +13,6 @@
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.Arrays;
-import java.util.stream.Stream;
 
 public class SodiumGameOptions {
     public final QualitySettings quality = new QualitySettings();

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/data/ChunkMeshData.java
Patch:
@@ -8,8 +8,6 @@
 import java.util.Map;
 
 public class ChunkMeshData {
-    public static final ChunkMeshData EMPTY = new ChunkMeshData();
-
     private final EnumMap<ModelQuadFacing, ElementRange> parts = new EnumMap<>(ModelQuadFacing.class);
     private IndexedVertexData vertexData;
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/ChunkRenderManager.java
Patch:
@@ -382,7 +382,7 @@ private ChunkRenderColumn<T> getColumn(int x, int z) {
     private ChunkRenderContainer<T> createChunkRender(ChunkRenderColumn<T> column, int x, int y, int z) {
         ChunkRenderContainer<T> render = new ChunkRenderContainer<>(this.backend, this.renderer, x, y, z, column);
 
-        if (ChunkSection.isEmpty(this.world.getChunk(x, z).getSectionArray()[this.world.sectionIndexToCoord(y)])) {
+        if (ChunkSection.isEmpty(this.world.getChunk(x, z).getSectionArray()[this.world.sectionCoordToIndex(y)])) {
             render.setData(ChunkRenderData.EMPTY);
         } else {
             render.scheduleRebuild(false);

File: src/main/java/me/jellysquid/mods/sodium/client/world/WorldSlice.java
Patch:
@@ -91,7 +91,7 @@ public class WorldSlice implements BlockRenderView, BiomeAccess.Storage {
 
     public static ChunkRenderContext prepare(World world, ChunkSectionPos origin, ClonedChunkSectionCache sectionCache) {
         WorldChunk chunk = world.getChunk(origin.getX(), origin.getZ());
-        ChunkSection section = chunk.getSectionArray()[world.sectionIndexToCoord(origin.getY())];
+        ChunkSection section = chunk.getSectionArray()[world.sectionCoordToIndex(origin.getY())];
 
         // If the chunk section is absent or empty, simply terminate now. There will never be anything in this chunk
         // section to render, so we need to signal that a chunk render task shouldn't created. This saves a considerable

File: src/main/java/me/jellysquid/mods/sodium/client/world/cloned/ClonedChunkSection.java
Patch:
@@ -152,7 +152,7 @@ private static ChunkSection getChunkSection(World world, Chunk chunk, ChunkSecti
         ChunkSection section = null;
 
         if (!world.isOutOfHeightLimit(ChunkSectionPos.getBlockCoord(pos.getY()))) {
-            section = chunk.getSectionArray()[world.sectionIndexToCoord(pos.getY())];
+            section = chunk.getSectionArray()[world.sectionCoordToIndex(pos.getY())];
         }
 
         return section;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/ChunkRenderManager.java
Patch:
@@ -382,7 +382,7 @@ private ChunkRenderColumn<T> getColumn(int x, int z) {
     private ChunkRenderContainer<T> createChunkRender(ChunkRenderColumn<T> column, int x, int y, int z) {
         ChunkRenderContainer<T> render = new ChunkRenderContainer<>(this.backend, this.renderer, x, y, z, column);
 
-        if (ChunkSection.isEmpty(this.world.getChunk(x, z).getSectionArray()[y])) {
+        if (ChunkSection.isEmpty(this.world.getChunk(x, z).getSectionArray()[this.world.sectionIndexToCoord(y)])) {
             render.setData(ChunkRenderData.EMPTY);
         } else {
             render.scheduleRebuild(false);

File: src/main/java/me/jellysquid/mods/sodium/client/world/WorldSlice.java
Patch:
@@ -91,7 +91,7 @@ public class WorldSlice implements BlockRenderView, BiomeAccess.Storage {
 
     public static ChunkRenderContext prepare(World world, ChunkSectionPos origin, ClonedChunkSectionCache sectionCache) {
         WorldChunk chunk = world.getChunk(origin.getX(), origin.getZ());
-        ChunkSection section = chunk.getSectionArray()[origin.getY()];
+        ChunkSection section = chunk.getSectionArray()[world.sectionIndexToCoord(origin.getY())];
 
         // If the chunk section is absent or empty, simply terminate now. There will never be anything in this chunk
         // section to render, so we need to signal that a chunk render task shouldn't created. This saves a considerable

File: src/main/java/me/jellysquid/mods/sodium/client/world/cloned/ClonedChunkSection.java
Patch:
@@ -152,7 +152,7 @@ private static ChunkSection getChunkSection(World world, Chunk chunk, ChunkSecti
         ChunkSection section = null;
 
         if (!world.isOutOfHeightLimit(ChunkSectionPos.getBlockCoord(pos.getY()))) {
-            section = chunk.getSectionArray()[pos.getY()];
+            section = chunk.getSectionArray()[world.sectionIndexToCoord(pos.getY())];
         }
 
         return section;

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/control/ControlElement.java
Patch:
@@ -43,7 +43,6 @@ public void render(MatrixStack matrixStack, int mouseX, int mouseY, float delta)
 
         this.hovered = this.dim.containsCursor(mouseX, mouseY);
 
-
         this.drawRect(this.dim.getOriginX(), this.dim.getOriginY(), this.dim.getLimitX(), this.dim.getLimitY(), this.hovered ? 0xE0000000 : 0x90000000);
         this.drawString(matrixStack, label, this.dim.getOriginX() + 6, this.dim.getCenterY() - 4, 0xFFFFFFFF);
     }

File: src/main/java/me/jellysquid/mods/sodium/client/gl/device/DrawCommandList.java
Patch:
@@ -7,7 +7,7 @@
 public interface DrawCommandList extends AutoCloseable {
     void multiDrawElementsIndirect(long pointer, int count, int stride);
 
-    void multiDrawElementsBaseVertex(PointerBuffer indices, IntBuffer count, IntBuffer baseVertex);
+    void multiDrawElementsBaseVertex(PointerBuffer pointer, IntBuffer count, IntBuffer baseVertex);
 
     void endTessellating();
 
@@ -17,5 +17,4 @@ public interface DrawCommandList extends AutoCloseable {
     default void close() {
         this.flush();
     }
-
 }

File: src/main/java/me/jellysquid/mods/sodium/client/model/vertex/buffer/VertexBufferBuilder.java
Patch:
@@ -81,8 +81,8 @@ public int getSize() {
      * Ends the stream of written data and makes a copy of it to be passed around.
      */
     public void get(ByteBuffer dst) {
-        this.buffer.position(this.writerOffset);
-        this.buffer.flip();
+        this.buffer.clear();
+        this.buffer.limit(this.writerOffset);
 
         dst.put(this.buffer);
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/backends/multidraw/MultidrawChunkRenderBackend.java
Patch:
@@ -280,7 +280,9 @@ private void setupDrawBatches(CommandList commandList, ChunkRenderListIterator<M
                 if ((visible & mask) != 0) {
                     ElementRange part = state.getModelPart(i);
 
-                    batch.addIndirectDrawCall(part.count, 1, indexOffset + part.offset, vertexOffset + part.baseVertex, index);
+                    if (part != null) {
+                        batch.addIndirectDrawCall(part.elementCount, 1, indexOffset + part.elementOffset, vertexOffset + part.baseVertex, index);
+                    }
                 }
 
                 mask <<= 1;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/backends/oneshot/ChunkOneshotGraphicsState.java
Patch:
@@ -16,6 +16,7 @@
 import me.jellysquid.mods.sodium.client.render.chunk.format.ChunkMeshAttribute;
 import me.jellysquid.mods.sodium.client.render.chunk.shader.ChunkShaderBindingPoints;
 
+import java.util.Arrays;
 import java.util.Map;
 
 public class ChunkOneshotGraphicsState extends ChunkGraphicsState {
@@ -68,6 +69,8 @@ public void upload(CommandList commandList, ChunkMeshData meshData) {
                 }, false)
         }, this.indexBuffer);
 
+        Arrays.fill(this.parts, null);
+
         for (Map.Entry<ModelQuadFacing, ElementRange> entry : meshData.getSlices()) {
             this.setModelPart(entry.getKey(), entry.getValue());
         }

File: src/main/java/me/jellysquid/mods/sodium/client/model/vertex/formats/line/writer/LineVertexWriterFallback.java
Patch:
@@ -2,6 +2,7 @@
 
 import me.jellysquid.mods.sodium.client.model.vertex.fallback.VertexWriterFallback;
 import me.jellysquid.mods.sodium.client.model.vertex.formats.line.LineVertexSink;
+import me.jellysquid.mods.sodium.client.util.Norm3b;
 import me.jellysquid.mods.sodium.client.util.color.ColorABGR;
 import net.minecraft.client.render.VertexConsumer;
 
@@ -11,10 +12,11 @@ public LineVertexWriterFallback(VertexConsumer consumer) {
     }
 
     @Override
-    public void vertexLine(float x, float y, float z, int color) {
+    public void vertexLine(float x, float y, float z, int color, int normal) {
         VertexConsumer consumer = this.consumer;
         consumer.vertex(x, y, z);
         consumer.color(ColorABGR.unpackRed(color), ColorABGR.unpackGreen(color), ColorABGR.unpackBlue(color), ColorABGR.unpackAlpha(color));
+        consumer.normal(Norm3b.unpackX(normal), Norm3b.unpackY(normal), Norm3b.unpackZ(normal));
         consumer.next();
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptionPages.java
Patch:
@@ -37,7 +37,6 @@ public static OptionPage general() {
                         .setControl(option -> new SliderControl(option, 2, 32, 1, ControlValueFormatter.quantity("Chunks")))
                         .setBinding((options, value) -> options.viewDistance = value, options -> options.viewDistance)
                         .setImpact(OptionImpact.HIGH)
-                        .setFlags(OptionFlag.REQUIRES_RENDERER_RELOAD)
                         .build())
                 .add(OptionImpl.createBuilder(int.class, vanillaOpts)
                         .setName("Brightness")

File: src/main/java/me/jellysquid/mods/sodium/client/gl/device/GLRenderDevice.java
Patch:
@@ -77,7 +77,7 @@ public void uploadData(GlMutableBuffer glBuffer, ByteBuffer byteBuffer) {
 
         @Override
         public void copyBufferSubData(GlBuffer src, GlMutableBuffer dst, long readOffset, long writeOffset, long bytes) {
-            if (dst.getSize() <= writeOffset + bytes) {
+            if (writeOffset + bytes > dst.getSize()) {
                 throw new IllegalArgumentException("Not enough space in destination buffer (writeOffset + bytes > bufferSize)");
             }
 

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptionPages.java
Patch:
@@ -9,6 +9,7 @@
 import me.jellysquid.mods.sodium.client.gui.options.control.TickBoxControl;
 import me.jellysquid.mods.sodium.client.gui.options.storage.MinecraftOptionsStorage;
 import me.jellysquid.mods.sodium.client.gui.options.storage.SodiumOptionsStorage;
+import me.jellysquid.mods.sodium.client.render.chunk.backends.multidraw.MultidrawChunkRenderBackend;
 import me.jellysquid.mods.sodium.client.util.UnsafeUtil;
 import net.minecraft.client.MinecraftClient;
 import net.minecraft.client.gl.Framebuffer;
@@ -247,6 +248,7 @@ public static OptionPage advanced() {
                         .setBinding((opts, value) -> opts.advanced.useChunkMultidraw = value, opts -> opts.advanced.useChunkMultidraw)
                         .setFlags(OptionFlag.REQUIRES_RENDERER_RELOAD)
                         .setImpact(OptionImpact.EXTREME)
+                        .setEnabled(MultidrawChunkRenderBackend.isSupported(sodiumOpts.getData().advanced.ignoreDriverBlacklist))
                         .build())
                 .add(OptionImpl.createBuilder(boolean.class, sodiumOpts)
                         .setName("Use Vertex Array Objects")

File: src/main/java/me/jellysquid/mods/sodium/client/SodiumClientMod.java
Patch:
@@ -44,7 +44,7 @@ public static Logger logger() {
     }
 
     private static SodiumGameOptions loadConfig() {
-        SodiumGameOptions config = SodiumGameOptions.load(Paths.get("config", "sodium-options.json"));
+        SodiumGameOptions config = SodiumGameOptions.load(FabricLoader.getInstance().getConfigDir().resolve("sodium-options.json"));
         onConfigChanged(config);
 
         return config;

File: src/main/java/me/jellysquid/mods/sodium/client/gui/widgets/AbstractWidget.java
Patch:
@@ -34,6 +34,8 @@ protected void drawRect(double x1, double y1, double x2, double y2, int color) {
     }
 
     protected void drawQuads(Consumer<VertexConsumer> consumer) {
+        RenderSystem.setShader(GameRenderer::getPositionColorShader);
+
         RenderSystem.enableBlend();
         RenderSystem.disableTexture();
         RenderSystem.defaultBlendFunc();

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/gui/MixinDebugHud.java
Patch:
@@ -97,6 +97,8 @@ private void renderBackdrop(MatrixStack matrixStack, List<String> list, boolean
         BufferBuilder bufferBuilder = Tessellator.getInstance().getBuffer();
         bufferBuilder.begin(VertexFormat.DrawMode.QUADS, VertexFormats.POSITION_COLOR);
 
+        RenderSystem.setShader(GameRenderer::getPositionColorShader);
+
         Matrix4f matrix = matrixStack.peek()
                 .getModel();
 

File: src/main/java/me/jellysquid/mods/sodium/client/gl/compat/LegacyFogHelper.java
Patch:
@@ -21,11 +21,10 @@ public class LegacyFogHelper {
      * Retrieves the current fog mode from the fixed-function pipeline.
      */
     public static ChunkFogMode getFogMode() {
-        return ChunkFogMode.NONE;
+        return ChunkFogMode.SMOOTH;
     }
 
     public static float getFogCutoff() {
-        return 128.0f;
-//        return RenderSystem.getShaderFogEnd();
+        return RenderSystem.getShaderFogEnd();
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/render/SodiumWorldRenderer.java
Patch:
@@ -225,8 +225,6 @@ public void drawChunkLayer(RenderLayer renderLayer, MatrixStack matrixStack, dou
         this.chunkRenderManager.renderLayer(matrixStack, pass, x, y, z);
 
         pass.endDrawing();
-
-//        RenderSystem.clearCurrentColor();
     }
 
     public void reload() {

File: src/main/java/me/jellysquid/mods/sodium/client/world/WorldSlice.java
Patch:
@@ -42,7 +42,7 @@ public class WorldSlice implements BlockRenderView, BiomeAccess.Storage {
     private static final int SECTION_BLOCK_COUNT = SECTION_BLOCK_LENGTH * SECTION_BLOCK_LENGTH * SECTION_BLOCK_LENGTH;
 
     // The radius of blocks around the origin chunk that should be copied.
-    private static final int NEIGHBOR_BLOCK_RADIUS = 1;
+    private static final int NEIGHBOR_BLOCK_RADIUS = 2;
 
     // The radius of chunks around the origin chunk that should be copied.
     private static final int NEIGHBOR_CHUNK_RADIUS = MathHelper.roundUpToMultiple(NEIGHBOR_BLOCK_RADIUS, 16) >> 4;

File: src/main/java/me/jellysquid/mods/sodium/client/model/light/data/LightDataAccess.java
Patch:
@@ -113,7 +113,7 @@ public static long packAO(float ao) {
 
     public static float unpackAO(long word) {
         int aoi = (int) (word >>> 32 & 0xFFFFL);
-        return aoi / 4096.0f;
+        return aoi * (1.0f / 4096.0f);
     }
 
     public BlockRenderView getWorld() {

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/buffers/ChunkModelBuffers.java
Patch:
@@ -7,5 +7,6 @@
 public interface ChunkModelBuffers {
     ModelVertexSink getSink(ModelQuadFacing facing);
 
+    @Deprecated
     ChunkRenderData.Builder getRenderData();
 }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/tasks/ChunkRenderBuildTask.java
Patch:
@@ -3,7 +3,7 @@
 import me.jellysquid.mods.sodium.client.render.chunk.ChunkGraphicsState;
 import me.jellysquid.mods.sodium.client.render.chunk.compile.ChunkBuildBuffers;
 import me.jellysquid.mods.sodium.client.render.chunk.compile.ChunkBuildResult;
-import me.jellysquid.mods.sodium.client.render.pipeline.context.ChunkRenderContext;
+import me.jellysquid.mods.sodium.client.render.pipeline.context.ChunkRenderCacheLocal;
 import me.jellysquid.mods.sodium.client.util.task.CancellationSource;
 
 /**
@@ -23,13 +23,13 @@ public abstract class ChunkRenderBuildTask<T extends ChunkGraphicsState> {
      * Executes the given build task asynchronously from the calling thread. The implementation should be careful not
      * to access or modify global mutable state.
      *
-     * @param pipeline The render pipeline to use for building this chunk
+     * @param cache The render cache to use for building this chunk
      * @param buffers The temporary scratch buffers for rendering block data
      * @param cancellationSource The cancellation source which can be used to query if the task is cancelled
      * @return The build result of this task, containing any data which needs to be uploaded on the main-thread, or null
      *         if the task was cancelled.
      */
-    public abstract ChunkBuildResult<T> performBuild(ChunkRenderContext pipeline, ChunkBuildBuffers buffers,
+    public abstract ChunkBuildResult<T> performBuild(ChunkRenderCacheLocal cache, ChunkBuildBuffers buffers,
                                                      CancellationSource cancellationSource);
 
     /**

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/tasks/ChunkRenderEmptyBuildTask.java
Patch:
@@ -5,7 +5,7 @@
 import me.jellysquid.mods.sodium.client.render.chunk.compile.ChunkBuildBuffers;
 import me.jellysquid.mods.sodium.client.render.chunk.compile.ChunkBuildResult;
 import me.jellysquid.mods.sodium.client.render.chunk.data.ChunkRenderData;
-import me.jellysquid.mods.sodium.client.render.pipeline.context.ChunkRenderContext;
+import me.jellysquid.mods.sodium.client.render.pipeline.context.ChunkRenderCacheLocal;
 import me.jellysquid.mods.sodium.client.util.task.CancellationSource;
 
 /**
@@ -22,7 +22,7 @@ public ChunkRenderEmptyBuildTask(ChunkRenderContainer<T> render) {
     }
 
     @Override
-    public ChunkBuildResult<T> performBuild(ChunkRenderContext pipeline, ChunkBuildBuffers buffers, CancellationSource cancellationSource) {
+    public ChunkBuildResult<T> performBuild(ChunkRenderCacheLocal cache, ChunkBuildBuffers buffers, CancellationSource cancellationSource) {
         return new ChunkBuildResult<>(this.render, ChunkRenderData.EMPTY);
     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/pipeline/ChunkRenderCache.java
Patch:
@@ -5,8 +5,8 @@
 import me.jellysquid.mods.sodium.client.model.quad.blender.SmoothBiomeColorBlender;
 import net.minecraft.client.MinecraftClient;
 
-public class RenderContextCommon {
-    public static BiomeColorBlender createBiomeColorBlender() {
+public class ChunkRenderCache {
+    protected BiomeColorBlender createBiomeColorBlender() {
         return MinecraftClient.getInstance().options.biomeBlendRadius <= 0 ? new FlatBiomeColorBlender() : new SmoothBiomeColorBlender();
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/block/MixinWorldRenderer.java
Patch:
@@ -1,6 +1,6 @@
 package me.jellysquid.mods.sodium.mixin.features.block;
 
-import me.jellysquid.mods.sodium.client.render.pipeline.context.GlobalRenderContext;
+import me.jellysquid.mods.sodium.client.render.pipeline.context.ChunkRenderCacheShared;
 import net.minecraft.client.render.Camera;
 import net.minecraft.client.render.GameRenderer;
 import net.minecraft.client.render.LightmapTextureManager;
@@ -22,6 +22,6 @@ public class MixinWorldRenderer {
     private void reset(MatrixStack matrices, float tickDelta, long limitTime, boolean renderBlockOutline, Camera camera,
                        GameRenderer gameRenderer, LightmapTextureManager lightmapTextureManager, Matrix4f matrix4f,
                        CallbackInfo ci) {
-        GlobalRenderContext.resetCaches();
+        ChunkRenderCacheShared.resetCaches();
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/control/SliderControl.java
Patch:
@@ -97,10 +97,10 @@ private void renderSlider(MatrixStack matrixStack) {
 
             this.thumbPosition = this.getThumbPositionForValue(option.getValue());
 
-            int thumbOffset = MathHelper.clamp((int) Math.floor((double) (this.getIntValue() - this.min) / this.range * sliderWidth), 0, sliderWidth);
+            double thumbOffset = MathHelper.clamp((double) (this.getIntValue() - this.min) / this.range * sliderWidth, 0, sliderWidth);
 
-            int thumbX = sliderX + thumbOffset - THUMB_WIDTH;
-            int trackY = sliderY + (sliderHeight / 2) - TRACK_HEIGHT;
+            double thumbX = sliderX + thumbOffset - THUMB_WIDTH;
+            double trackY = sliderY + (sliderHeight / 2) - ((double) TRACK_HEIGHT / 2);
 
             this.drawRect(thumbX, sliderY, thumbX + (THUMB_WIDTH * 2), sliderY + sliderHeight, 0xFFFFFFFF);
             this.drawRect(sliderX, trackY, sliderX + sliderWidth, trackY + TRACK_HEIGHT, 0xFFFFFFFF);

File: src/main/java/me/jellysquid/mods/sodium/client/gui/widgets/AbstractWidget.java
Patch:
@@ -24,7 +24,7 @@ protected void drawString(MatrixStack matrixStack, String str, int x, int y, int
         this.font.draw(matrixStack, str, x, y, color);
     }
 
-    protected void drawRect(int x1, int y1, int x2, int y2, int color) {
+    protected void drawRect(double x1, double y1, double x2, double y2, int color) {
         float a = (float) (color >> 24 & 255) / 255.0F;
         float r = (float) (color >> 16 & 255) / 255.0F;
         float g = (float) (color >> 8 & 255) / 255.0F;
@@ -50,7 +50,7 @@ protected void drawQuads(Consumer<VertexConsumer> consumer) {
         RenderSystem.disableBlend();
     }
 
-    protected static void addQuad(VertexConsumer consumer, int x1, int y1, int x2, int y2, float a, float r, float g, float b) {
+    protected static void addQuad(VertexConsumer consumer, double x1, double y1, double x2, double y2, float a, float r, float g, float b) {
         consumer.vertex(x2, y1, 0.0D).color(r, g, b, a).next();
         consumer.vertex(x1, y1, 0.0D).color(r, g, b, a).next();
         consumer.vertex(x1, y2, 0.0D).color(r, g, b, a).next();

File: src/main/java/me/jellysquid/mods/sodium/client/gui/widgets/FlatButtonWidget.java
Patch:
@@ -64,7 +64,7 @@ public void setEnabled(boolean enabled) {
         this.enabled = enabled;
     }
 
-    public void setVisible(boolean visibel) {
-        this.visible = visibel;
+    public void setVisible(boolean visible) {
+        this.visible = visible;
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/gui/widgets/FlatButtonWidget.java
Patch:
@@ -46,7 +46,7 @@ public void setSelected(boolean selected) {
 
     @Override
     public boolean mouseClicked(double mouseX, double mouseY, int button) {
-        if (!this.enabled) {
+        if (!this.enabled || !this.visible) {
             return false;
         }
 

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/OptionImpl.java
Patch:
@@ -100,7 +100,7 @@ public boolean isAvailable() {
 
     @Override
     public boolean hasChanged() {
-        return this.value != this.modifiedValue;
+        return !this.value.equals(this.modifiedValue);
     }
 
     @Override

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/control/SliderControl.java
Patch:
@@ -134,7 +134,7 @@ public boolean mouseClicked(double mouseX, double mouseY, int button) {
         }
 
         private void setValueFromMouse(double d) {
-            this.setValue((d - (double) (this.sliderBounds.getX() + 4)) / (double) (this.sliderBounds.getWidth() - 8));
+            this.setValue((d - (double) this.sliderBounds.getX()) / (double) this.sliderBounds.getWidth());
         }
 
         private void setValue(double d) {

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/control/SliderControl.java
Patch:
@@ -95,7 +95,7 @@ private void renderSlider(MatrixStack matrixStack) {
             int sliderWidth = this.sliderBounds.getWidth();
             int sliderHeight = this.sliderBounds.getHeight();
 
-            int thumbOffset = (int) Math.floor((double) (this.getIntValue() - this.min) / this.range * sliderWidth);
+            int thumbOffset = MathHelper.clamp((int) Math.floor((double) (this.getIntValue() - this.min) / this.range * sliderWidth), 0, sliderWidth);
 
             int thumbX = sliderX + thumbOffset - THUMB_WIDTH;
             int trackY = sliderY + (sliderHeight / 2) - TRACK_HEIGHT;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/passes/BlockRenderPass.java
Patch:
@@ -8,7 +8,7 @@ public enum BlockRenderPass {
     CUTOUT(RenderLayer.getCutout(), false),
     CUTOUT_MIPPED(RenderLayer.getCutoutMipped(), false),
     TRANSLUCENT(RenderLayer.getTranslucent(), true),
-    TRIPWIRE(RenderLayer.getTripwire(), false);
+    TRIPWIRE(RenderLayer.getTripwire(), true);
 
     public static final BlockRenderPass[] VALUES = BlockRenderPass.values();
     public static final int COUNT = VALUES.length;

File: src/main/java/me/jellysquid/mods/sodium/client/SodiumClientMod.java
Patch:
@@ -7,6 +7,7 @@
 import org.apache.logging.log4j.Logger;
 
 import java.io.File;
+import java.nio.file.Paths;
 
 public class SodiumClientMod implements ClientModInitializer {
     private static SodiumGameOptions CONFIG;
@@ -34,7 +35,7 @@ public static Logger logger() {
     }
 
     private static SodiumGameOptions loadConfig() {
-        SodiumGameOptions config = SodiumGameOptions.load(new File("config/sodium-options.json"));
+        SodiumGameOptions config = SodiumGameOptions.load(Paths.get("config", "sodium-options.json"));
         onConfigChanged(config);
 
         return config;

File: src/main/java/me/jellysquid/mods/sodium/client/gl/buffer/GlBuffer.java
Patch:
@@ -2,7 +2,7 @@
 
 import me.jellysquid.mods.sodium.client.gl.GlObject;
 import me.jellysquid.mods.sodium.client.gl.device.RenderDevice;
-import org.lwjgl.opengl.GL15;
+import org.lwjgl.opengl.GL20C;
 
 public abstract class GlBuffer extends GlObject {
     public static final int NULL_BUFFER_ID = 0;
@@ -12,7 +12,7 @@ public abstract class GlBuffer extends GlObject {
     protected GlBuffer(RenderDevice owner, GlBufferUsage usage) {
         super(owner);
 
-        this.setHandle(GL15.glGenBuffers());
+        this.setHandle(GL20C.glGenBuffers());
 
         this.usage = usage;
     }

File: src/main/java/me/jellysquid/mods/sodium/client/gl/buffer/GlMutableBuffer.java
Patch:
@@ -1,7 +1,7 @@
 package me.jellysquid.mods.sodium.client.gl.buffer;
 
 import me.jellysquid.mods.sodium.client.gl.device.RenderDevice;
-import org.lwjgl.opengl.GL15;
+import org.lwjgl.opengl.GL20C;
 
 import java.nio.ByteBuffer;
 

File: src/main/java/me/jellysquid/mods/sodium/client/gl/func/GlBufferCopyFunctions.java
Patch:
@@ -1,7 +1,7 @@
 package me.jellysquid.mods.sodium.client.gl.func;
 
 import org.lwjgl.opengl.ARBCopyBuffer;
-import org.lwjgl.opengl.GL31;
+import org.lwjgl.opengl.GL31C;
 import org.lwjgl.opengl.GLCapabilities;
 
 /**
@@ -11,7 +11,7 @@ public enum GlBufferCopyFunctions {
     CORE {
         @Override
         public void glCopyBufferSubData(int readTarget, int writeTarget, long readOffset, long writeOffset, long size) {
-            GL31.glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
+            GL31C.glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
         }
     },
     ARB {

File: src/main/java/me/jellysquid/mods/sodium/client/gl/func/GlIndirectMultiDrawFunctions.java
Patch:
@@ -1,14 +1,14 @@
 package me.jellysquid.mods.sodium.client.gl.func;
 
 import org.lwjgl.opengl.ARBMultiDrawIndirect;
-import org.lwjgl.opengl.GL43;
+import org.lwjgl.opengl.GL43C;
 import org.lwjgl.opengl.GLCapabilities;
 
 public enum GlIndirectMultiDrawFunctions {
     CORE {
         @Override
         public void glMultiDrawArraysIndirect(int mode, long indirect, int primcount, int stride) {
-            GL43.glMultiDrawArraysIndirect(mode, indirect, primcount, stride);
+            GL43C.glMultiDrawArraysIndirect(mode, indirect, primcount, stride);
         }
     },
     ARB {

File: src/main/java/me/jellysquid/mods/sodium/client/gl/func/GlInstancedArrayFunctions.java
Patch:
@@ -1,14 +1,14 @@
 package me.jellysquid.mods.sodium.client.gl.func;
 
 import org.lwjgl.opengl.ARBInstancedArrays;
-import org.lwjgl.opengl.GL33;
+import org.lwjgl.opengl.GL33C;
 import org.lwjgl.opengl.GLCapabilities;
 
 public enum GlInstancedArrayFunctions {
     CORE {
         @Override
         public void glVertexAttribDivisor(int index, int divisor) {
-            GL33.glVertexAttribDivisor(index, divisor);
+            GL33C.glVertexAttribDivisor(index, divisor);
         }
     },
     ARB {

File: src/main/java/me/jellysquid/mods/sodium/client/gl/shader/ShaderType.java
Patch:
@@ -1,13 +1,13 @@
 package me.jellysquid.mods.sodium.client.gl.shader;
 
-import org.lwjgl.opengl.GL20;
+import org.lwjgl.opengl.GL20C;
 
 /**
  * An enumeration over the supported OpenGL shader types.
  */
 public enum ShaderType {
-    VERTEX(GL20.GL_VERTEX_SHADER),
-    FRAGMENT(GL20.GL_FRAGMENT_SHADER);
+    VERTEX(GL20C.GL_VERTEX_SHADER),
+    FRAGMENT(GL20C.GL_FRAGMENT_SHADER);
 
     public final int id;
 

File: src/main/java/me/jellysquid/mods/sodium/client/gl/tessellation/GlFallbackTessellation.java
Patch:
@@ -2,7 +2,7 @@
 
 import me.jellysquid.mods.sodium.client.gl.attribute.GlVertexAttributeBinding;
 import me.jellysquid.mods.sodium.client.gl.device.CommandList;
-import org.lwjgl.opengl.GL20;
+import org.lwjgl.opengl.GL20C;
 
 public class GlFallbackTessellation extends GlAbstractTessellation {
     public GlFallbackTessellation(GlPrimitiveType primitiveType, TessellationBinding[] bindings) {
@@ -23,7 +23,7 @@ public void bind(CommandList commandList) {
     public void unbind(CommandList commandList) {
         for (TessellationBinding binding : this.bindings) {
             for (GlVertexAttributeBinding attrib : binding.getAttributeBindings()) {
-                GL20.glDisableVertexAttribArray(attrib.getIndex());
+                GL20C.glDisableVertexAttribArray(attrib.getIndex());
             }
         }
     }

File: src/main/java/me/jellysquid/mods/sodium/client/gl/util/GlMultiDrawBatch.java
Patch:
@@ -1,13 +1,13 @@
 package me.jellysquid.mods.sodium.client.gl.util;
 
-import org.lwjgl.opengl.GL14;
+import org.lwjgl.opengl.GL20C;
 import org.lwjgl.system.MemoryUtil;
 
 import java.nio.IntBuffer;
 
 /**
  * Provides a fixed-size queue for batching draw calls for vertex data in the same buffer. This internally
- * uses {@link GL14#glMultiDrawArrays(int, IntBuffer, IntBuffer)} and should be compatible on any relevant platform.
+ * uses {@link GL20#glMultiDrawArrays(int, IntBuffer, IntBuffer)} and should be compatible on any relevant platform.
  */
 public class GlMultiDrawBatch {
     private final IntBuffer bufIndices;

File: src/main/java/me/jellysquid/mods/sodium/client/gui/widgets/AbstractWidget.java
Patch:
@@ -9,7 +9,7 @@
 import net.minecraft.client.sound.PositionedSoundInstance;
 import net.minecraft.client.util.math.MatrixStack;
 import net.minecraft.sound.SoundEvents;
-import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL20C;
 
 import java.util.function.Consumer;
 
@@ -39,7 +39,7 @@ protected void drawQuads(Consumer<VertexConsumer> consumer) {
         RenderSystem.defaultBlendFunc();
 
         BufferBuilder bufferBuilder = Tessellator.getInstance().getBuffer();
-        bufferBuilder.begin(GL11.GL_QUADS, VertexFormats.POSITION_COLOR);
+        bufferBuilder.begin(GL20C.GL_QUADS, VertexFormats.POSITION_COLOR);
 
         consumer.accept(bufferBuilder);
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/ChunkRenderManager.java
Patch:
@@ -11,7 +11,7 @@
 import me.jellysquid.mods.sodium.client.SodiumClientMod;
 import me.jellysquid.mods.sodium.client.gl.device.CommandList;
 import me.jellysquid.mods.sodium.client.gl.device.RenderDevice;
-import me.jellysquid.mods.sodium.client.gl.util.GlFogHelper;
+import me.jellysquid.mods.sodium.client.gl.compat.LegacyFogHelper;
 import me.jellysquid.mods.sodium.client.render.SodiumWorldRenderer;
 import me.jellysquid.mods.sodium.client.render.chunk.compile.ChunkBuildResult;
 import me.jellysquid.mods.sodium.client.render.chunk.compile.ChunkBuilder;
@@ -131,7 +131,7 @@ private void setup(Camera camera) {
         this.useFogCulling = false;
 
         if (SodiumClientMod.options().advanced.useFogOcclusion) {
-            float dist = GlFogHelper.getFogCutoff() + FOG_PLANE_OFFSET;
+            float dist = LegacyFogHelper.getFogCutoff() + FOG_PLANE_OFFSET;
 
             if (dist != 0.0f) {
                 this.useFogCulling = true;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/backends/multidraw/MultidrawChunkRenderBackend.java
Patch:
@@ -32,7 +32,7 @@
 import me.jellysquid.mods.sodium.client.render.chunk.shader.ChunkShaderBindingPoints;
 import net.minecraft.util.Formatting;
 import net.minecraft.util.Util;
-import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL20C;
 
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -358,7 +358,7 @@ private static boolean isWindowsIntelDriver() {
         }
 
         // Check to see if the GPU vendor is Intel
-        return Objects.equals(GL11.glGetString(GL11.GL_VENDOR), INTEL_VENDOR_NAME);
+        return Objects.equals(GL20C.glGetString(GL20C.GL_VENDOR), INTEL_VENDOR_NAME);
     }
 
     /**
@@ -371,7 +371,7 @@ private static boolean isKnownBrokenIntelDriver() {
             return false;
         }
 
-        String version = GL11.glGetString(GL11.GL_VERSION);
+        String version = GL20C.glGetString(GL20C.GL_VERSION);
 
         // The returned version string may be null in the case of an error
         if (version == null) {

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/backends/oneshot/ChunkRenderBackendOneshot.java
Patch:
@@ -21,7 +21,7 @@
 import me.jellysquid.mods.sodium.client.render.chunk.shader.ChunkRenderShaderBackend;
 import me.jellysquid.mods.sodium.client.render.chunk.shader.ChunkShaderBindingPoints;
 import net.minecraft.util.Identifier;
-import org.lwjgl.opengl.GL20;
+import org.lwjgl.opengl.GL20C;
 import org.lwjgl.system.MemoryStack;
 
 import java.nio.FloatBuffer;
@@ -95,7 +95,7 @@ protected void prepareDrawBatch(ChunkCameraContext camera, ChunkOneshotGraphicsS
             fb.put(1, modelY);
             fb.put(2, modelZ);
 
-            GL20.glVertexAttrib4fv(ChunkShaderBindingPoints.MODEL_OFFSET.getGenericAttributeIndex(), fb);
+            GL20C.glVertexAttrib4fv(ChunkShaderBindingPoints.MODEL_OFFSET.getGenericAttributeIndex(), fb);
         }
     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/shader/ChunkRenderShaderBackend.java
Patch:
@@ -6,6 +6,7 @@
 import me.jellysquid.mods.sodium.client.gl.device.RenderDevice;
 import me.jellysquid.mods.sodium.client.gl.shader.ShaderLoader;
 import me.jellysquid.mods.sodium.client.gl.shader.ShaderType;
+import me.jellysquid.mods.sodium.client.gl.compat.LegacyFogHelper;
 import me.jellysquid.mods.sodium.client.model.vertex.type.ChunkVertexType;
 import me.jellysquid.mods.sodium.client.render.chunk.ChunkGraphicsState;
 import me.jellysquid.mods.sodium.client.render.chunk.ChunkRenderBackend;
@@ -61,7 +62,7 @@ public final void createShaders(RenderDevice device) {
 
     @Override
     public void begin(MatrixStack matrixStack) {
-        this.activeProgram = this.programs.get(ChunkFogMode.getActiveMode());
+        this.activeProgram = this.programs.get(LegacyFogHelper.getFogMode());
         this.activeProgram.bind();
         this.activeProgram.setup(matrixStack, this.vertexType.getModelScale(), this.vertexType.getTextureScale());
     }

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/gui/MixinDebugHud.java
Patch:
@@ -9,7 +9,7 @@
 import net.minecraft.client.util.math.MatrixStack;
 import net.minecraft.util.math.Matrix4f;
 import org.apache.commons.lang3.Validate;
-import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL20C;
 import org.spongepowered.asm.mixin.Final;
 import org.spongepowered.asm.mixin.Mixin;
 import org.spongepowered.asm.mixin.Shadow;
@@ -95,7 +95,7 @@ private void renderBackdrop(MatrixStack matrixStack, List<String> list, boolean
         float k = (float) (color & 255) / 255.0F;
 
         BufferBuilder bufferBuilder = Tessellator.getInstance().getBuffer();
-        bufferBuilder.begin(GL11.GL_QUADS, VertexFormats.POSITION_COLOR);
+        bufferBuilder.begin(GL20C.GL_QUADS, VertexFormats.POSITION_COLOR);
 
         Matrix4f matrix = matrixStack.peek()
                 .getModel();

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/gui/fast_loading_screen/MixinLevelLoadingScreen.java
Patch:
@@ -16,7 +16,7 @@
 import net.minecraft.client.util.math.MatrixStack;
 import net.minecraft.util.math.Matrix4f;
 import net.minecraft.world.chunk.ChunkStatus;
-import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL20C;
 import org.spongepowered.asm.mixin.*;
 
 /**
@@ -62,7 +62,7 @@ public static void drawChunkMap(MatrixStack matrixStack, WorldGenerationProgress
         RenderSystem.defaultBlendFunc();
         
         BufferBuilder buffer = tessellator.getBuffer();
-        buffer.begin(GL11.GL_QUADS, VertexFormats.POSITION_COLOR);
+        buffer.begin(GL20C.GL_QUADS, VertexFormats.POSITION_COLOR);
 
         BasicScreenQuadVertexSink sink = VertexDrain.of(buffer).createSink(VanillaVertexTypes.BASIC_SCREEN_QUADS);
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/backends/gl20/VBOGraphicsState.java
Patch:
@@ -14,8 +14,8 @@ public class VBOGraphicsState extends ChunkOneshotGraphicsState {
     private final GlBuffer vertexBuffer;
     private GlVertexFormat<?> vertexFormat;
 
-    public VBOGraphicsState(MemoryTracker memoryTracker, ChunkRenderContainer container, int id) {
-        super(memoryTracker, container, id);
+    public VBOGraphicsState(MemoryTracker memoryTracker, ChunkRenderContainer<?> container) {
+        super(memoryTracker, container);
 
         this.vertexBuffer = new GlMutableBuffer(GL15.GL_STATIC_DRAW);
     }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/backends/gl30/VAOGraphicsState.java
Patch:
@@ -15,8 +15,8 @@ public class VAOGraphicsState extends ChunkOneshotGraphicsState {
     private final GlVertexArray vertexArray;
     private final GlBuffer vertexBuffer;
 
-    public VAOGraphicsState(MemoryTracker memoryTracker, ChunkRenderContainer container, int id) {
-        super(memoryTracker, container, id);
+    public VAOGraphicsState(MemoryTracker memoryTracker, ChunkRenderContainer<?> container) {
+        super(memoryTracker, container);
 
         this.vertexBuffer = new GlMutableBuffer(GL15.GL_STATIC_DRAW);
         this.vertexArray = new GlVertexArray();

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/backends/gl43/IndirectCommandBufferVector.java
Patch:
@@ -5,10 +5,8 @@
 import org.lwjgl.system.MemoryUtil;
 
 public class IndirectCommandBufferVector extends StructBuffer {
-    private static final int STRIDE = 16;
-
     protected IndirectCommandBufferVector(int capacity) {
-        super(capacity, STRIDE);
+        super(capacity, 16);
     }
 
     public static IndirectCommandBufferVector create(int capacity) {

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/data/ChunkRenderBounds.java
Patch:
@@ -6,9 +6,8 @@ public class ChunkRenderBounds {
     public static final ChunkRenderBounds ALWAYS_FALSE = new ChunkRenderBounds(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY,
             Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
 
-    public final float x1, x2;
-    public final float y1, y2;
-    public final float z1, z2;
+    public final float x1, y1, z1;
+    public final float x2, y2, z2;
 
     public ChunkRenderBounds(float x1, float y1, float z1, float x2, float y2, float z2) {
         this.x1 = x1;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/lists/ChunkRenderListIterator.java
Patch:
@@ -1,7 +1,7 @@
 package me.jellysquid.mods.sodium.client.render.chunk.lists;
 
-public interface ChunkRenderListIterator {
-    int getGraphicsStateId();
+public interface ChunkRenderListIterator<T> {
+    T getGraphicsState();
     int getVisibleFaces();
 
     boolean hasNext();

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/multidraw/ChunkRenderBackendMultiDraw.java
Patch:
@@ -11,8 +11,8 @@
 import net.minecraft.util.Identifier;
 
 public abstract class ChunkRenderBackendMultiDraw<T extends ChunkGraphicsState> extends ChunkRenderShaderBackend<T, ChunkProgramMultiDraw> {
-    public ChunkRenderBackendMultiDraw(Class<T> graphicsType, ChunkVertexType format) {
-        super(graphicsType, format);
+    public ChunkRenderBackendMultiDraw(ChunkVertexType format) {
+        super(format);
     }
 
     @Override

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/multidraw/StructBuffer.java
Patch:
@@ -7,8 +7,11 @@
 public abstract class StructBuffer {
     protected ByteBuffer buffer;
 
+    protected final int stride;
+
     protected StructBuffer(int bytes, int stride) {
         this.buffer = MemoryUtil.memAlloc(bytes * stride);
+        this.stride = stride;
     }
 
     public ByteBuffer getBuffer() {

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/oneshot/ChunkOneshotGraphicsState.java
Patch:
@@ -15,8 +15,8 @@ public abstract class ChunkOneshotGraphicsState extends ChunkGraphicsState {
     protected final MemoryTracker memoryTracker;
     private final long[] parts;
 
-    protected ChunkOneshotGraphicsState(MemoryTracker memoryTracker, ChunkRenderContainer container, int id) {
-        super(container, id);
+    protected ChunkOneshotGraphicsState(MemoryTracker memoryTracker, ChunkRenderContainer<?> container) {
+        super(container);
 
         this.memoryTracker = memoryTracker;
         this.parts = new long[ModelQuadFacing.COUNT];

File: src/main/java/me/jellysquid/mods/sodium/client/world/WorldSlice.java
Patch:
@@ -164,7 +164,7 @@ public WorldSlice() {
         this.originBlockStates = this.blockStatesArrays[getLocalSectionIndex((SECTION_LENGTH / 2), (SECTION_LENGTH / 2), (SECTION_LENGTH / 2))];
     }
 
-    public void init(ChunkBuilder builder, World world, ChunkSectionPos origin, WorldChunk[] chunks) {
+    public void init(ChunkBuilder<?> builder, World world, ChunkSectionPos origin, WorldChunk[] chunks) {
         this.world = world;
         this.chunks = chunks;
         this.origin = origin;

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/debug/MixinDebugHud.java
Patch:
@@ -44,7 +44,7 @@ private void appendRightText(CallbackInfoReturnable<List<String>> cir) {
     }
 
     private static List<String> getChunkRendererDebugStrings() {
-        ChunkRenderBackend backend = SodiumWorldRenderer.getInstance().getChunkRenderer();
+        ChunkRenderBackend<?> backend = SodiumWorldRenderer.getInstance().getChunkRenderer();
 
         List<String> strings = new ArrayList<>(4);
         strings.add("Chunk Renderer: " + backend.getRendererName());

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/pipeline/MixinBufferBuilder.java
Patch:
@@ -43,6 +43,9 @@ private static int roundBufferSize(int amount) {
 
     @Override
     public boolean ensureBufferCapacity(int bytes) {
+        // Ensure that there is always space for 1 more vertex; see BufferBuilder.next()
+        bytes += format.getVertexSize();
+
         if (this.elementOffset + bytes <= this.buffer.capacity()) {
             return false;
         }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/multidraw/ChunkDrawParamsVector.java
Patch:
@@ -72,7 +72,7 @@ public void reset() {
 
         private void updatePointers(long offset) {
             this.writeBase = MemoryUtil.memAddress(this.buffer);
-            this.writeEnd = this.writePointer + this.buffer.capacity();
+            this.writeEnd = this.writeBase + this.buffer.capacity();
 
             this.writePointer = this.writeBase + offset;
         }

File: src/main/java/me/jellysquid/mods/sodium/client/world/WorldSlice.java
Patch:
@@ -261,6 +261,9 @@ private void populateBlockArrays(int sectionIdx, ChunkSectionPos pos, Chunk chun
                         state = prevPaletteState;
                     } else {
                         state = palette.getByIndex(paletteId);
+                        if (state == null) {
+                            state = container.defaultValue;
+                        }
 
                         prevPaletteState = state;
                         prevPaletteId = paletteId;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/ChunkRenderColumn.java
Patch:
@@ -30,6 +30,9 @@ public void setRender(int y, ChunkRenderContainer render) {
     }
 
     public ChunkRenderContainer getRender(int y) {
+        if (y < 0 || y >= this.renders.length) {
+            return null;
+        }
         return this.renders[y];
     }
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/matrix/MixinMatrix4f.java
Patch:
@@ -267,7 +267,7 @@ public void writeToBuffer(FloatBuffer buf) {
             throw new BufferUnderflowException();
         }
 
-        if (UnsafeUtil.isAvailable()) {
+        if (buf.isDirect() && UnsafeUtil.isAvailable()) {
             this.writeToBufferUnsafe(buf);
         } else {
             this.writeToBufferSafe(buf);

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/multidraw/ChunkDrawCallBatcher.java
Patch:
@@ -32,14 +32,15 @@ public void begin() {
         this.count = 0;
         this.arrayLength = 0;
 
-        this.buffer.clear();
+        this.buffer.limit(this.buffer.capacity());
     }
 
     public void end() {
         this.isBuilding = false;
 
         this.arrayLength = this.count * STRIDE;
         this.buffer.limit(this.arrayLength);
+        this.buffer.position(0);
     }
 
     public boolean isBuilding() {

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/backends/gl20/VBOGraphicsState.java
Patch:
@@ -14,8 +14,8 @@ public class VBOGraphicsState extends ChunkOneshotGraphicsState {
     private final GlBuffer vertexBuffer;
     private GlVertexFormat<?> vertexFormat;
 
-    public VBOGraphicsState(MemoryTracker memoryTracker, ChunkRenderContainer<?> container) {
-        super(memoryTracker, container);
+    public VBOGraphicsState(MemoryTracker memoryTracker, ChunkRenderContainer container, int id) {
+        super(memoryTracker, container, id);
 
         this.vertexBuffer = new GlMutableBuffer(GL15.GL_STATIC_DRAW);
     }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/backends/gl30/VAOGraphicsState.java
Patch:
@@ -15,8 +15,8 @@ public class VAOGraphicsState extends ChunkOneshotGraphicsState {
     private final GlVertexArray vertexArray;
     private final GlBuffer vertexBuffer;
 
-    public VAOGraphicsState(MemoryTracker memoryTracker, ChunkRenderContainer<?> container) {
-        super(memoryTracker, container);
+    public VAOGraphicsState(MemoryTracker memoryTracker, ChunkRenderContainer container, int id) {
+        super(memoryTracker, container, id);
 
         this.vertexBuffer = new GlMutableBuffer(GL15.GL_STATIC_DRAW);
         this.vertexArray = new GlVertexArray();

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/backends/gl43/IndirectCommandBufferVector.java
Patch:
@@ -5,8 +5,10 @@
 import org.lwjgl.system.MemoryUtil;
 
 public class IndirectCommandBufferVector extends StructBuffer {
+    private static final int STRIDE = 16;
+
     protected IndirectCommandBufferVector(int capacity) {
-        super(capacity, 16);
+        super(capacity, STRIDE);
     }
 
     public static IndirectCommandBufferVector create(int capacity) {

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/data/ChunkRenderBounds.java
Patch:
@@ -6,8 +6,9 @@ public class ChunkRenderBounds {
     public static final ChunkRenderBounds ALWAYS_FALSE = new ChunkRenderBounds(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY,
             Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
 
-    public final float x1, y1, z1;
-    public final float x2, y2, z2;
+    public final float x1, x2;
+    public final float y1, y2;
+    public final float z1, z2;
 
     public ChunkRenderBounds(float x1, float y1, float z1, float x2, float y2, float z2) {
         this.x1 = x1;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/lists/ChunkRenderListIterator.java
Patch:
@@ -1,7 +1,7 @@
 package me.jellysquid.mods.sodium.client.render.chunk.lists;
 
-public interface ChunkRenderListIterator<T> {
-    T getGraphicsState();
+public interface ChunkRenderListIterator {
+    int getGraphicsStateId();
     int getVisibleFaces();
 
     boolean hasNext();

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/multidraw/ChunkRenderBackendMultiDraw.java
Patch:
@@ -11,8 +11,8 @@
 import net.minecraft.util.Identifier;
 
 public abstract class ChunkRenderBackendMultiDraw<T extends ChunkGraphicsState> extends ChunkRenderShaderBackend<T, ChunkProgramMultiDraw> {
-    public ChunkRenderBackendMultiDraw(ChunkVertexType format) {
-        super(format);
+    public ChunkRenderBackendMultiDraw(Class<T> graphicsType, ChunkVertexType format) {
+        super(graphicsType, format);
     }
 
     @Override

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/multidraw/StructBuffer.java
Patch:
@@ -7,11 +7,8 @@
 public abstract class StructBuffer {
     protected ByteBuffer buffer;
 
-    protected final int stride;
-
     protected StructBuffer(int bytes, int stride) {
         this.buffer = MemoryUtil.memAlloc(bytes * stride);
-        this.stride = stride;
     }
 
     public ByteBuffer getBuffer() {

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/oneshot/ChunkOneshotGraphicsState.java
Patch:
@@ -15,8 +15,8 @@ public abstract class ChunkOneshotGraphicsState extends ChunkGraphicsState {
     protected final MemoryTracker memoryTracker;
     private final long[] parts;
 
-    protected ChunkOneshotGraphicsState(MemoryTracker memoryTracker, ChunkRenderContainer<?> container) {
-        super(container);
+    protected ChunkOneshotGraphicsState(MemoryTracker memoryTracker, ChunkRenderContainer container, int id) {
+        super(container, id);
 
         this.memoryTracker = memoryTracker;
         this.parts = new long[ModelQuadFacing.COUNT];

File: src/main/java/me/jellysquid/mods/sodium/client/world/WorldSlice.java
Patch:
@@ -164,7 +164,7 @@ public WorldSlice() {
         this.originBlockStates = this.blockStatesArrays[getLocalSectionIndex((SECTION_LENGTH / 2), (SECTION_LENGTH / 2), (SECTION_LENGTH / 2))];
     }
 
-    public void init(ChunkBuilder<?> builder, World world, ChunkSectionPos origin, WorldChunk[] chunks) {
+    public void init(ChunkBuilder builder, World world, ChunkSectionPos origin, WorldChunk[] chunks) {
         this.world = world;
         this.chunks = chunks;
         this.origin = origin;

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/debug/MixinDebugHud.java
Patch:
@@ -44,7 +44,7 @@ private void appendRightText(CallbackInfoReturnable<List<String>> cir) {
     }
 
     private static List<String> getChunkRendererDebugStrings() {
-        ChunkRenderBackend<?> backend = SodiumWorldRenderer.getInstance().getChunkRenderer();
+        ChunkRenderBackend backend = SodiumWorldRenderer.getInstance().getChunkRenderer();
 
         List<String> strings = new ArrayList<>(4);
         strings.add("Chunk Renderer: " + backend.getRendererName());

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/shader/ChunkRenderShaderBackend.java
Patch:
@@ -62,7 +62,7 @@ private P createShader(ChunkFogMode fogMode, GlVertexFormat<ChunkMeshAttribute>
     public void begin(MatrixStack matrixStack) {
         this.activeProgram = this.programs.get(ChunkFogMode.getActiveMode());
         this.activeProgram.bind();
-        this.activeProgram.setup(matrixStack);
+        this.activeProgram.setup(matrixStack, this.vertexType.getModelScale(), this.vertexType.getTextureScale());
     }
 
     @Override

File: src/main/java/me/jellysquid/mods/sodium/client/model/light/flat/FlatLightPipeline.java
Patch:
@@ -29,7 +29,7 @@ public FlatLightPipeline(LightDataAccess lightCache) {
     @Override
     public void calculate(ModelQuadView quad, BlockPos pos, QuadLightData out, Direction face, boolean shade) {
         // If the face is aligned, use the light data above it
-        if ((quad.getFlags() & ModelQuadFlags.IS_ALIGNED) != 0) {
+        if ((quad.getFlags() & ModelQuadFlags.IS_ALIGNED) != 0 && !this.lightCache.getWorld().getBlockState(pos).hasEmissiveLighting(this.lightCache.getWorld(), pos)) {
             Arrays.fill(out.lm, unpackLM(this.lightCache.get(pos, face)));
         } else {
             Arrays.fill(out.lm, unpackLM(this.lightCache.get(pos)));

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/format/hfp/HFPModelVertexType.java
Patch:
@@ -17,9 +17,9 @@
  */
 public class HFPModelVertexType implements ChunkVertexType {
     public static final GlVertexFormat<ChunkMeshAttribute> VERTEX_FORMAT = GlVertexAttribute.builder(ChunkMeshAttribute.class, 20)
-            .addElement(ChunkMeshAttribute.POSITION, 0, GlVertexAttributeFormat.UNSIGNED_SHORT, 3, true)
+            .addElement(ChunkMeshAttribute.POSITION, 0, GlVertexAttributeFormat.UNSIGNED_SHORT, 3, false)
             .addElement(ChunkMeshAttribute.COLOR, 8, GlVertexAttributeFormat.UNSIGNED_BYTE, 4, true)
-            .addElement(ChunkMeshAttribute.TEXTURE, 12, GlVertexAttributeFormat.UNSIGNED_SHORT, 2, true)
+            .addElement(ChunkMeshAttribute.TEXTURE, 12, GlVertexAttributeFormat.UNSIGNED_SHORT, 2, false)
             .addElement(ChunkMeshAttribute.LIGHT, 16, GlVertexAttributeFormat.UNSIGNED_SHORT, 2, true)
             .build();
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/SodiumWorldRenderer.java
Patch:
@@ -215,7 +215,7 @@ public void updateChunks(Camera camera, Frustum frustum, boolean hasForcedFrustu
 
         profiler.pop();
 
-        Entity.setRenderDistanceMultiplier(MathHelper.clamp((double) this.client.options.viewDistance / 8.0D, 1.0D, 2.5D));
+        Entity.setRenderDistanceMultiplier(MathHelper.clamp((double) this.client.options.viewDistance / 8.0D, 1.0D, 2.5D) * (double) this.client.options.entityDistanceScaling);
     }
 
     /**

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/texture_tracking/MixinSpriteAtlasTexture.java
Patch:
@@ -2,14 +2,14 @@
 
 import me.jellysquid.mods.sodium.client.render.texture.SpriteUtil;
 import net.minecraft.client.texture.Sprite;
-import net.minecraft.client.util.SpriteIdentifier;
+import net.minecraft.client.texture.SpriteAtlasTexture;
 import org.spongepowered.asm.mixin.Mixin;
 import org.spongepowered.asm.mixin.injection.At;
 import org.spongepowered.asm.mixin.injection.Inject;
 import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;
 
-@Mixin(SpriteIdentifier.class)
-public class MixinSpriteIdentifier {
+@Mixin(SpriteAtlasTexture.class)
+public class MixinSpriteAtlasTexture {
     @Inject(method = "getSprite", at = @At("RETURN"))
     private void preReturnSprite(CallbackInfoReturnable<Sprite> cir) {
         Sprite sprite = cir.getReturnValue();

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/ChunkBuildBuffers.java
Patch:
@@ -9,6 +9,7 @@
 import me.jellysquid.mods.sodium.client.render.chunk.compile.buffers.ChunkModelBuffers;
 import me.jellysquid.mods.sodium.client.render.chunk.compile.buffers.ChunkModelVertexTransformer;
 import me.jellysquid.mods.sodium.client.render.chunk.data.ChunkMeshData;
+import me.jellysquid.mods.sodium.client.render.chunk.data.ChunkRenderData;
 import me.jellysquid.mods.sodium.client.render.chunk.format.ChunkModelOffset;
 import me.jellysquid.mods.sodium.client.render.chunk.passes.BlockRenderPass;
 import me.jellysquid.mods.sodium.client.render.chunk.passes.BlockRenderPassManager;
@@ -52,15 +53,15 @@ public ChunkBuildBuffers(ChunkVertexType vertexType, BlockRenderPassManager rend
         }
     }
 
-    public void init() {
+    public void init(ChunkRenderData.Builder renderData) {
         for (int i = 0; i < this.buffersByLayer.length; i++) {
             ChunkModelVertexTransformer[] writers = new ChunkModelVertexTransformer[ModelQuadFacing.COUNT];
 
             for (ModelQuadFacing facing : ModelQuadFacing.VALUES) {
                 writers[facing.ordinal()] = new ChunkModelVertexTransformer(this.vertexType.createBufferWriter(this.buffersByLayer[i][facing.ordinal()], UnsafeUtil.isAvailable()), this.offset);
             }
 
-            this.delegates[i] = new BakedChunkModelBuffers(writers);
+            this.delegates[i] = new BakedChunkModelBuffers(writers, renderData);
         }
     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/buffers/ChunkModelBuffers.java
Patch:
@@ -1,8 +1,11 @@
 package me.jellysquid.mods.sodium.client.render.chunk.compile.buffers;
 
 import me.jellysquid.mods.sodium.client.model.quad.properties.ModelQuadFacing;
+import me.jellysquid.mods.sodium.client.render.chunk.data.ChunkRenderData;
 import me.jellysquid.mods.sodium.client.render.chunk.format.ModelVertexSink;
 
 public interface ChunkModelBuffers {
     ModelVertexSink getSink(ModelQuadFacing facing);
+
+    ChunkRenderData.Builder getRenderData();
 }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/tasks/ChunkRenderRebuildTask.java
Patch:
@@ -54,7 +54,7 @@ public ChunkBuildResult<T> performBuild(ChunkRenderContext pipeline, ChunkBuildB
         ChunkOcclusionDataBuilder occluder = new ChunkOcclusionDataBuilder();
         ChunkRenderBounds.Builder bounds = new ChunkRenderBounds.Builder();
 
-        buffers.init();
+        buffers.init(renderData);
         pipeline.init(this.slice, this.slice.getOrigin());
 
         int baseX = this.render.getOriginX();

File: src/main/java/me/jellysquid/mods/sodium/client/gl/shader/GlShader.java
Patch:
@@ -24,7 +24,7 @@ public GlShader(ShaderType type, Identifier name, String src, ShaderConstants co
         src = processShader(src, constants);
 
         int handle = GL20.glCreateShader(type.id);
-        GL20.glShaderSource(handle, src);
+        ShaderWorkarounds.safeShaderSource(handle, src);
         GL20.glCompileShader(handle);
 
         String log = GL20.glGetShaderInfoLog(handle);

File: src/main/java/me/jellysquid/mods/sodium/client/render/SodiumWorldRenderer.java
Patch:
@@ -130,6 +130,8 @@ private void unloadWorld() {
 
         this.loadedChunkPositions.clear();
         this.globalBlockEntities.clear();
+
+        this.world = null;
     }
 
     /**

File: src/main/java/me/jellysquid/mods/sodium/mixin/core/pipeline/MixinVertexConsumer.java
Patch:
@@ -2,14 +2,14 @@
 
 import me.jellysquid.mods.sodium.client.model.vertex.VertexDrain;
 import me.jellysquid.mods.sodium.client.model.vertex.VertexSink;
-import me.jellysquid.mods.sodium.client.model.vertex.VertexSinkFactory;
+import me.jellysquid.mods.sodium.client.model.vertex.VertexType;
 import net.minecraft.client.render.VertexConsumer;
 import org.spongepowered.asm.mixin.Mixin;
 
 @Mixin(VertexConsumer.class)
 public interface MixinVertexConsumer extends VertexDrain {
     @Override
-    default <T extends VertexSink> T createSink(VertexSinkFactory<T> factory) {
+    default <T extends VertexSink> T createSink(VertexType<T> factory) {
         return factory.createFallbackWriter((VertexConsumer) this);
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/block/MixinBlockModelRenderer.java
Patch:
@@ -2,7 +2,7 @@
 
 import me.jellysquid.mods.sodium.client.model.quad.ModelQuadView;
 import me.jellysquid.mods.sodium.client.model.quad.sink.FallbackQuadSink;
-import me.jellysquid.mods.sodium.client.model.vertex.DefaultVertexSinks;
+import me.jellysquid.mods.sodium.client.model.vertex.DefaultVertexTypes;
 import me.jellysquid.mods.sodium.client.model.vertex.VertexDrain;
 import me.jellysquid.mods.sodium.client.model.vertex.formats.quad.QuadVertexSink;
 import me.jellysquid.mods.sodium.client.render.pipeline.BlockRenderer;
@@ -52,7 +52,7 @@ private void preRenderBlockInWorld(BlockRenderView world, BakedModel model, Bloc
     @Overwrite
     public void render(MatrixStack.Entry entry, VertexConsumer vertexConsumer, BlockState blockState, BakedModel bakedModel, float red, float green, float blue, int light, int overlay) {
         QuadVertexSink drain = VertexDrain.of(vertexConsumer)
-                .createSink(DefaultVertexSinks.QUADS);
+                .createSink(DefaultVertexTypes.QUADS);
         XoRoShiRoRandom random = this.random;
 
         // Clamp color ranges

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/buffer_builder/intrinsics/MixinBufferBuilder.java
Patch:
@@ -1,7 +1,7 @@
 package me.jellysquid.mods.sodium.mixin.features.buffer_builder.intrinsics;
 
 import me.jellysquid.mods.sodium.client.model.quad.ModelQuadView;
-import me.jellysquid.mods.sodium.client.model.vertex.DefaultVertexSinks;
+import me.jellysquid.mods.sodium.client.model.vertex.DefaultVertexTypes;
 import me.jellysquid.mods.sodium.client.model.vertex.VertexDrain;
 import me.jellysquid.mods.sodium.client.model.vertex.formats.quad.QuadVertexSink;
 import me.jellysquid.mods.sodium.client.util.color.ColorABGR;
@@ -43,7 +43,7 @@ public void quad(MatrixStack.Entry matrices, BakedQuad quad, float[] brightnessT
         int norm = MatrixUtil.computeNormal(normalMatrix, quad.getFace());
 
         QuadVertexSink drain = VertexDrain.of(this)
-                .createSink(DefaultVertexSinks.QUADS);
+                .createSink(DefaultVertexTypes.QUADS);
         drain.ensureCapacity(4);
 
         for (int i = 0; i < 4; i++) {

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/buffer_builder/intrinsics/MixinWorldRenderer.java
Patch:
@@ -1,6 +1,6 @@
 package me.jellysquid.mods.sodium.mixin.features.buffer_builder.intrinsics;
 
-import me.jellysquid.mods.sodium.client.model.vertex.DefaultVertexSinks;
+import me.jellysquid.mods.sodium.client.model.vertex.DefaultVertexTypes;
 import me.jellysquid.mods.sodium.client.model.vertex.VertexDrain;
 import me.jellysquid.mods.sodium.client.model.vertex.formats.line.LineVertexSink;
 import me.jellysquid.mods.sodium.client.util.color.ColorABGR;
@@ -69,7 +69,7 @@ public static void drawBox(MatrixStack matrices, VertexConsumer vertexConsumer,
         float v8z = matrixExt.transformVecZ(x2f, y2f, z2f);
 
         LineVertexSink lines = VertexDrain.of(vertexConsumer)
-                .createSink(DefaultVertexSinks.LINES);
+                .createSink(DefaultVertexTypes.LINES);
         lines.ensureCapacity(24);
 
         lines.vertexLine(v1x, v1y, v1z, red, yAxisGreen, zAxisBlue, alpha);

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/entity/fast_render/MixinModelPart.java
Patch:
@@ -2,7 +2,7 @@
 
 import it.unimi.dsi.fastutil.objects.ObjectList;
 import me.jellysquid.mods.sodium.client.model.ModelCuboidAccessor;
-import me.jellysquid.mods.sodium.client.model.vertex.DefaultVertexSinks;
+import me.jellysquid.mods.sodium.client.model.vertex.DefaultVertexTypes;
 import me.jellysquid.mods.sodium.client.model.vertex.VertexDrain;
 import me.jellysquid.mods.sodium.client.model.vertex.formats.quad.QuadVertexSink;
 import me.jellysquid.mods.sodium.client.util.Norm3b;
@@ -36,7 +36,7 @@ private void renderCuboids(MatrixStack.Entry matrices, VertexConsumer vertexCons
         Matrix3fExtended normalExt = MatrixUtil.getExtendedMatrix(matrices.getNormal());
         Matrix4fExtended modelExt = MatrixUtil.getExtendedMatrix(matrices.getModel());
 
-        QuadVertexSink drain = VertexDrain.of(vertexConsumer).createSink(DefaultVertexSinks.QUADS);
+        QuadVertexSink drain = VertexDrain.of(vertexConsumer).createSink(DefaultVertexTypes.QUADS);
         drain.ensureCapacity(this.cuboids.size() * 6 * 4);
 
         int color = ColorABGR.pack(red, green, blue, alpha);

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/gui/font/MixinGlyphRenderer.java
Patch:
@@ -1,6 +1,6 @@
 package me.jellysquid.mods.sodium.mixin.features.gui.font;
 
-import me.jellysquid.mods.sodium.client.model.vertex.DefaultVertexSinks;
+import me.jellysquid.mods.sodium.client.model.vertex.DefaultVertexTypes;
 import me.jellysquid.mods.sodium.client.model.vertex.VertexDrain;
 import me.jellysquid.mods.sodium.client.model.vertex.formats.glyph.GlyphVertexSink;
 import me.jellysquid.mods.sodium.client.util.color.ColorABGR;
@@ -64,7 +64,7 @@ public void draw(boolean italic, float x, float y, Matrix4f matrix, VertexConsum
         int color = ColorABGR.pack(red, green, blue, alpha);
 
         GlyphVertexSink drain = VertexDrain.of(vertexConsumer)
-                .createSink(DefaultVertexSinks.GLYPHS);
+                .createSink(DefaultVertexTypes.GLYPHS);
         drain.ensureCapacity(4);
         drain.writeGlyph(matrix, x1 + w1, h1, 0.0F, color, this.uMin, this.vMin, light);
         drain.writeGlyph(matrix, x1 + w2, h2, 0.0F, color, this.uMin, this.vMax, light);

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/item/MixinItemRenderer.java
Patch:
@@ -1,7 +1,7 @@
 package me.jellysquid.mods.sodium.mixin.features.item;
 
 import me.jellysquid.mods.sodium.client.model.quad.ModelQuadView;
-import me.jellysquid.mods.sodium.client.model.vertex.DefaultVertexSinks;
+import me.jellysquid.mods.sodium.client.model.vertex.DefaultVertexTypes;
 import me.jellysquid.mods.sodium.client.model.vertex.VertexDrain;
 import me.jellysquid.mods.sodium.client.model.vertex.formats.quad.QuadVertexSink;
 import me.jellysquid.mods.sodium.client.render.texture.SpriteUtil;
@@ -68,7 +68,7 @@ private void renderBakedItemQuads(MatrixStack matrices, VertexConsumer vertexCon
         ItemColorProvider colorProvider = null;
 
         QuadVertexSink drain = VertexDrain.of(vertexConsumer)
-                .createSink(DefaultVertexSinks.QUADS);
+                .createSink(DefaultVertexTypes.QUADS);
         drain.ensureCapacity(quads.size() * 4);
 
         for (BakedQuad bakedQuad : quads) {

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/particle/fast_render/MixinBillboardParticle.java
Patch:
@@ -1,6 +1,6 @@
 package me.jellysquid.mods.sodium.mixin.features.particle.fast_render;
 
-import me.jellysquid.mods.sodium.client.model.vertex.DefaultVertexSinks;
+import me.jellysquid.mods.sodium.client.model.vertex.DefaultVertexTypes;
 import me.jellysquid.mods.sodium.client.model.vertex.VertexDrain;
 import me.jellysquid.mods.sodium.client.model.vertex.formats.particle.ParticleVertexSink;
 import me.jellysquid.mods.sodium.client.util.color.ColorABGR;
@@ -72,7 +72,7 @@ public void buildGeometry(VertexConsumer vertexConsumer, Camera camera, float ti
         int color = ColorABGR.pack(this.colorRed, this.colorGreen, this.colorBlue, this.colorAlpha);
 
         ParticleVertexSink drain = VertexDrain.of(vertexConsumer)
-                .createSink(DefaultVertexSinks.PARTICLES);
+                .createSink(DefaultVertexTypes.PARTICLES);
 
         addVertex(drain, quaternion,-1.0F, -1.0F, x, y, z, maxU, maxV, color, light, size);
         addVertex(drain, quaternion,-1.0F, 1.0F, x, y, z, maxU, minV, color, light, size);

File: src/main/java/me/jellysquid/mods/sodium/client/model/light/cache/HashLightDataCache.java
Patch:
@@ -31,7 +31,7 @@ public long get(int x, int y, int z) {
         return word;
     }
 
-    public void clear() {
+    public void clearCache() {
         this.map.clear();
     }
 }
\ No newline at end of file

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/block/MixinWorldRenderer.java
Patch:
@@ -22,6 +22,6 @@ public class MixinWorldRenderer {
     private void reset(MatrixStack matrices, float tickDelta, long limitTime, boolean renderBlockOutline, Camera camera,
                        GameRenderer gameRenderer, LightmapTextureManager lightmapTextureManager, Matrix4f matrix4f,
                        CallbackInfo ci) {
-        GlobalRenderContext.reset();
+        GlobalRenderContext.resetCaches();
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/world/SodiumChunkManager.java
Patch:
@@ -56,7 +56,9 @@ public SodiumChunkManager(ClientWorld world, int loadDistance) {
     @Override
     public void unload(int x, int z) {
         // If this request unloads a chunk, notify the listener
-        if (this.chunks.remove(createChunkKey(x, z)) != null) {
+        WorldChunk unloadedChunk = this.chunks.remove(createChunkKey(x, z));
+        if (unloadedChunk != null) {
+            this.world.unloadBlockEntities(unloadedChunk);
             this.onChunkUnloaded(x, z);
         }
     }

File: src/main/java/me/jellysquid/mods/sodium/mixin/features/debug/MixinDebugHud.java
Patch:
@@ -52,8 +52,9 @@ private static List<String> getChunkRendererDebugStrings() {
         strings.add("Chunk Renderer: " + backend.getRendererName());
 
         if (memoryTracker != null) {
-            int allocated = memoryTracker.getAllocatedMemory();
-            int used = memoryTracker.getUsedMemory();
+            // Allocated/Used in kilobytes (1024 bytes)
+            long allocated = memoryTracker.getAllocatedMemory();
+            long used = memoryTracker.getUsedMemory();
 
             int ratio = (int) Math.floor(((double) used / (double) allocated) * 100.0D);
 

File: src/main/java/me/jellysquid/mods/sodium/client/gl/func/GlIndirectMultiDrawFunctions.java
Patch:
@@ -27,7 +27,7 @@ public void glMultiDrawArraysIndirect(int mode, long indirect, int primcount, in
     public static GlIndirectMultiDrawFunctions load(GLCapabilities capabilities) {
         if (capabilities.OpenGL43) {
             return CORE;
-        } else if (capabilities.GL_ARB_multi_draw_indirect) {
+        } else if (capabilities.GL_ARB_multi_draw_indirect && capabilities.GL_ARB_draw_indirect) {
             return ARB;
         } else {
             return UNSUPPORTED;

File: src/main/java/me/jellysquid/mods/sodium/common/config/SodiumConfig.java
Patch:
@@ -41,8 +41,7 @@ private SodiumConfig() {
         this.addMixinRule("features.gui", true);
         this.addMixinRule("features.gui.font", true);
         this.addMixinRule("features.item", true);
-        this.addMixinRule("features.matrix", true);
-        this.addMixinRule("features.matrix.stack", true);
+        this.addMixinRule("features.matrix_stack", true);
         this.addMixinRule("features.model", true);
         this.addMixinRule("features.options", true);
         this.addMixinRule("features.particle", true);

File: src/main/java/me/jellysquid/mods/sodium/client/gl/buffer/GlBuffer.java
Patch:
@@ -8,7 +8,6 @@
 import java.nio.ByteBuffer;
 
 public abstract class GlBuffer extends GlObject {
-    protected int vertexCount = 0;
     protected int size;
 
     protected GlBuffer() {
@@ -28,8 +27,6 @@ public void bind(int target) {
     public abstract void allocate(int target, int size);
 
     public void upload(int target, VertexData data) {
-        this.vertexCount = data.buffer.remaining() / data.format.getStride();
-
         this.upload(target, data.buffer);
     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptionPages.java
Patch:
@@ -197,7 +197,7 @@ public static OptionPage quality() {
                         .setTooltip("Controls how far away entities can render from the player. Higher values increase the render distance at the expense " +
                                 "of frame rates.")
                         .setControl(option -> new SliderControl(option, 50, 500, 25, ControlValueFormatter.percentage()))
-                        .setBinding((opts, value) -> opts.entityDistanceScaling = Math.round(value / 100.0F), opts -> Math.round(opts.entityDistanceScaling * 100.0F))
+                        .setBinding((opts, value) -> opts.entityDistanceScaling = value / 100.0F, opts -> Math.round(opts.entityDistanceScaling * 100.0F))
                         .setImpact(OptionImpact.MEDIUM)
                         .build()
                 )

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/backends/gl43/GL43ChunkRenderBackend.java
Patch:
@@ -301,6 +301,8 @@ public void delete() {
 
         this.bufferManager.delete();
         this.uploadBuffer.delete();
+        this.uniformBuffer.delete();
+        this.uniformBufferBuilder.delete();
     }
 
     @Override

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/shader/ChunkRenderShaderBackend.java
Patch:
@@ -65,6 +65,7 @@ public void begin(MatrixStack matrixStack) {
     @Override
     public void end(MatrixStack matrixStack) {
         this.activeProgram.unbind();
+        this.activeProgram = null;
     }
 
     @Override

File: src/main/java/me/jellysquid/mods/sodium/client/gl/SodiumVertexFormats.java
Patch:
@@ -94,7 +94,7 @@ public enum ChunkMeshAttribute {
      * @return The resulting de-normalized unsigned short
      */
     private static short denormalizeFloatAsShort(float value) {
-        return (short) (value * 65536.0f);
+        return (short) (value * 65535.0f);
     }
 
     /**

File: src/main/java/me/jellysquid/mods/sodium/client/model/quad/blender/FlatBiomeColorBlender.java
Patch:
@@ -1,6 +1,7 @@
 package me.jellysquid.mods.sodium.client.model.quad.blender;
 
 import me.jellysquid.mods.sodium.client.model.quad.ModelQuadView;
+import me.jellysquid.mods.sodium.client.util.color.ColorARGB;
 import net.minecraft.block.BlockState;
 import net.minecraft.client.color.block.BlockColorProvider;
 import net.minecraft.util.math.BlockPos;
@@ -17,7 +18,7 @@ public class FlatBiomeColorBlender implements BiomeColorBlender {
     @Override
     public int[] getColors(BlockColorProvider colorizer, BlockRenderView world, BlockState state, BlockPos origin,
                            ModelQuadView quad) {
-        Arrays.fill(this.cachedRet, colorizer.getColor(state, world, origin, quad.getColorIndex()));
+        Arrays.fill(this.cachedRet, ColorARGB.toABGR(colorizer.getColor(state, world, origin, quad.getColorIndex())));
 
         return this.cachedRet;
     }

File: src/main/java/me/jellysquid/mods/sodium/client/render/block/BlockRenderPipeline.java
Patch:
@@ -14,8 +14,8 @@
 import me.jellysquid.mods.sodium.client.model.quad.sink.ModelQuadSinkDelegate;
 import me.jellysquid.mods.sodium.client.render.chunk.data.ChunkRenderData;
 import me.jellysquid.mods.sodium.client.render.occlusion.BlockOcclusionCache;
-import me.jellysquid.mods.sodium.client.util.ColorRGBA;
 import me.jellysquid.mods.sodium.client.util.ModelQuadUtil;
+import me.jellysquid.mods.sodium.client.util.color.ColorABGR;
 import me.jellysquid.mods.sodium.client.world.biome.BlockColorsExtended;
 import me.jellysquid.mods.sodium.common.util.DirectionUtil;
 import net.minecraft.block.BlockState;
@@ -151,7 +151,7 @@ private void renderQuad(BlockRenderView world, BlockState state, BlockPos pos, M
             float br = light.br[srcIndex];
 
             if (colors == null) {
-                copy.setColor(dstIndex, ColorRGBA.mulPackABGR(src.getColor(srcIndex), br, br, br));
+                copy.setColor(dstIndex, ColorABGR.mul(src.getColor(srcIndex), br, br, br));
             } else {
                 copy.setColor(dstIndex, colors[srcIndex]);
             }

File: src/main/java/me/jellysquid/mods/sodium/client/render/fluid/FluidRenderPipeline.java
Patch:
@@ -8,8 +8,8 @@
 import me.jellysquid.mods.sodium.client.model.quad.properties.ModelQuadFlags;
 import me.jellysquid.mods.sodium.client.model.quad.sink.ModelQuadSinkDelegate;
 import me.jellysquid.mods.sodium.client.render.chunk.data.ChunkRenderData;
-import me.jellysquid.mods.sodium.client.util.ColorRGBA;
 import me.jellysquid.mods.sodium.client.util.Norm3b;
+import me.jellysquid.mods.sodium.client.util.color.ColorABGR;
 import me.jellysquid.mods.sodium.client.world.WorldSlice;
 import me.jellysquid.mods.sodium.common.util.DirectionUtil;
 import net.minecraft.block.Block;
@@ -363,7 +363,7 @@ private void writeQuad(ModelQuadSinkDelegate consumer, ModelQuadViewMutable quad
             float br = quadLightData.br[lightIndex];
             int lm = quadLightData.lm[lightIndex];
 
-            quad.setColor(i, ColorRGBA.packABGR(r * br, g * br, b * br, 1.0f));
+            quad.setColor(i, ColorABGR.pack(r * br, g * br, b * br, 1.0f));
             quad.setLight(i, lm);
 
             lightIndex += lightOrder;

File: src/main/java/me/jellysquid/mods/sodium/mixin/entity_rendering/MixinModelPart.java
Patch:
@@ -3,8 +3,8 @@
 import it.unimi.dsi.fastutil.objects.ObjectList;
 import me.jellysquid.mods.sodium.client.model.ModelCuboidAccessor;
 import me.jellysquid.mods.sodium.client.model.consumer.QuadVertexConsumer;
-import me.jellysquid.mods.sodium.client.util.ColorRGBA;
 import me.jellysquid.mods.sodium.client.util.Norm3b;
+import me.jellysquid.mods.sodium.client.util.color.ColorABGR;
 import me.jellysquid.mods.sodium.client.util.math.Matrix3fExtended;
 import me.jellysquid.mods.sodium.client.util.math.Matrix4fExtended;
 import me.jellysquid.mods.sodium.client.util.math.MatrixUtil;
@@ -36,7 +36,7 @@ private void renderCuboids(MatrixStack.Entry matrices, VertexConsumer vertexCons
 
         QuadVertexConsumer quadConsumer = (QuadVertexConsumer) vertexConsumer;
 
-        int color = ColorRGBA.packABGR(red, green, blue, alpha);
+        int color = ColorABGR.pack(red, green, blue, alpha);
 
         for (ModelPart.Cuboid cuboid : this.cuboids) {
             for (ModelPart.Quad quad : ((ModelCuboidAccessor) cuboid).getQuads()) {

File: src/main/java/me/jellysquid/mods/sodium/mixin/gui/font/MixinGlyphRenderer.java
Patch:
@@ -1,7 +1,7 @@
 package me.jellysquid.mods.sodium.mixin.gui.font;
 
 import me.jellysquid.mods.sodium.client.model.consumer.GlyphVertexConsumer;
-import me.jellysquid.mods.sodium.client.util.ColorRGBA;
+import me.jellysquid.mods.sodium.client.util.color.ColorABGR;
 import net.minecraft.client.font.GlyphRenderer;
 import net.minecraft.client.render.VertexConsumer;
 import net.minecraft.util.math.Matrix4f;
@@ -59,7 +59,7 @@ public void draw(boolean italic, float x, float y, Matrix4f matrix, VertexConsum
         float w1 = italic ? 1.0F - 0.25F * y1 : 0.0F;
         float w2 = italic ? 1.0F - 0.25F * y2 : 0.0F;
 
-        int color = ColorRGBA.packABGR(red, green, blue, alpha);
+        int color = ColorABGR.pack(red, green, blue, alpha);
 
         GlyphVertexConsumer glyphs = ((GlyphVertexConsumer) vertexConsumer);
         glyphs.vertexGlyph(matrix, x1 + w1, h1, 0.0F, color, this.uMin, this.vMin, light);

File: src/main/java/me/jellysquid/mods/sodium/mixin/item_rendering/MixinItemRenderer.java
Patch:
@@ -3,8 +3,8 @@
 import me.jellysquid.mods.sodium.client.model.consumer.QuadVertexConsumer;
 import me.jellysquid.mods.sodium.client.model.quad.ModelQuadView;
 import me.jellysquid.mods.sodium.client.render.texture.SpriteUtil;
-import me.jellysquid.mods.sodium.client.util.ColorRGBA;
 import me.jellysquid.mods.sodium.client.util.ModelQuadUtil;
+import me.jellysquid.mods.sodium.client.util.color.ColorARGB;
 import me.jellysquid.mods.sodium.client.util.rand.XoRoShiRoRandom;
 import me.jellysquid.mods.sodium.client.world.biome.ItemColorsExtended;
 import me.jellysquid.mods.sodium.common.util.DirectionUtil;
@@ -74,7 +74,7 @@ private void renderBakedItemQuads(MatrixStack matrices, VertexConsumer vertices,
                     colorProvider = ((ItemColorsExtended) this.colorMap).getColorProvider(stack);
                 }
 
-                color = ColorRGBA.repackABGR((colorProvider.getColor(stack, bakedQuad.getColorIndex())), 255);
+                color = ColorARGB.toABGR((colorProvider.getColor(stack, bakedQuad.getColorIndex())), 255);
             }
 
             ModelQuadView quad = ((ModelQuadView) bakedQuad);

File: src/main/java/me/jellysquid/mods/sodium/mixin/particles/MixinBillboardParticle.java
Patch:
@@ -1,7 +1,7 @@
 package me.jellysquid.mods.sodium.mixin.particles;
 
 import me.jellysquid.mods.sodium.client.model.consumer.ParticleVertexConsumer;
-import me.jellysquid.mods.sodium.client.util.ColorRGBA;
+import me.jellysquid.mods.sodium.client.util.color.ColorABGR;
 import net.minecraft.client.particle.BillboardParticle;
 import net.minecraft.client.particle.Particle;
 import net.minecraft.client.render.Camera;
@@ -67,7 +67,7 @@ public void buildGeometry(VertexConsumer vertexConsumer, Camera camera, float ti
         float minV = this.getMinV();
         float maxV = this.getMaxV();
 
-        int color = ColorRGBA.packABGR(this.colorRed, this.colorGreen, this.colorBlue, this.colorAlpha);
+        int color = ColorABGR.pack(this.colorRed, this.colorGreen, this.colorBlue, this.colorAlpha);
 
         ParticleVertexConsumer vertices = (ParticleVertexConsumer) vertexConsumer;
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/pipeline/MixinBlockModelRenderer.java
Patch:
@@ -6,8 +6,8 @@
 import me.jellysquid.mods.sodium.client.render.block.BlockRenderPipeline;
 import me.jellysquid.mods.sodium.client.render.pipeline.GlobalRenderer;
 import me.jellysquid.mods.sodium.client.render.texture.SpriteUtil;
-import me.jellysquid.mods.sodium.client.util.ColorRGBA;
 import me.jellysquid.mods.sodium.client.util.ModelQuadUtil;
+import me.jellysquid.mods.sodium.client.util.color.ColorABGR;
 import me.jellysquid.mods.sodium.client.util.rand.XoRoShiRoRandom;
 import me.jellysquid.mods.sodium.common.util.DirectionUtil;
 import net.minecraft.block.BlockState;
@@ -57,7 +57,7 @@ public void render(MatrixStack.Entry entry, VertexConsumer vertexConsumer, Block
         green = MathHelper.clamp(green, 0.0F, 1.0F);
         blue = MathHelper.clamp(blue, 0.0F, 1.0F);
 
-        int defaultColor = ColorRGBA.packABGR(red, green, blue, 1.0F);
+        int defaultColor = ColorABGR.pack(red, green, blue, 1.0F);
 
         for (Direction direction : DirectionUtil.ALL_DIRECTIONS) {
             List<BakedQuad> quads = bakedModel.getQuads(blockState, direction, random.setSeedAndReturn(42L));

File: src/main/java/me/jellysquid/mods/sodium/client/model/quad/blender/VertexColorBlender.java
Patch:
@@ -22,6 +22,8 @@ public interface VertexColorBlender {
      * @param origin The position of the block being rendered
      * @param colorIndex The color index for this vertex which will be passed to the color provider
      * @param brightness The array of brightness
+     *
+     * @return An array of integer colors in ABGR format
      */
     int[] getColors(BlockColorProvider provider, BlockState state, BlockRenderView world, ModelQuadView quad,
                     BlockPos origin, int colorIndex, float[] brightness);

File: src/main/java/me/jellysquid/mods/sodium/client/render/block/BlockRenderPipeline.java
Patch:
@@ -14,7 +14,7 @@
 import me.jellysquid.mods.sodium.client.model.quad.sink.ModelQuadSinkDelegate;
 import me.jellysquid.mods.sodium.client.render.chunk.data.ChunkRenderData;
 import me.jellysquid.mods.sodium.client.render.occlusion.BlockOcclusionCache;
-import me.jellysquid.mods.sodium.client.util.ColorARGB;
+import me.jellysquid.mods.sodium.client.util.ColorRGBA;
 import me.jellysquid.mods.sodium.client.util.ModelQuadUtil;
 import me.jellysquid.mods.sodium.client.world.biome.BlockColorsExtended;
 import me.jellysquid.mods.sodium.common.util.DirectionUtil;
@@ -151,7 +151,7 @@ private void renderQuad(BlockRenderView world, BlockState state, BlockPos pos, M
             float br = light.br[srcIndex];
 
             if (colors == null) {
-                copy.setColor(dstIndex, ColorARGB.mulPacked(src.getColor(srcIndex), br, br, br));
+                copy.setColor(dstIndex, ColorRGBA.mulPackABGR(src.getColor(srcIndex), br, br, br));
             } else {
                 copy.setColor(dstIndex, colors[srcIndex]);
             }

File: src/main/java/me/jellysquid/mods/sodium/client/render/fluid/FluidRenderPipeline.java
Patch:
@@ -8,7 +8,7 @@
 import me.jellysquid.mods.sodium.client.model.quad.properties.ModelQuadFlags;
 import me.jellysquid.mods.sodium.client.model.quad.sink.ModelQuadSinkDelegate;
 import me.jellysquid.mods.sodium.client.render.chunk.data.ChunkRenderData;
-import me.jellysquid.mods.sodium.client.util.ColorARGB;
+import me.jellysquid.mods.sodium.client.util.ColorRGBA;
 import me.jellysquid.mods.sodium.client.util.Norm3b;
 import me.jellysquid.mods.sodium.client.world.WorldSlice;
 import me.jellysquid.mods.sodium.common.util.DirectionUtil;
@@ -363,7 +363,7 @@ private void writeQuad(ModelQuadSinkDelegate consumer, ModelQuadViewMutable quad
             float br = quadLightData.br[lightIndex];
             int lm = quadLightData.lm[lightIndex];
 
-            quad.setColor(i, ColorARGB.pack(r * br, g * br, b * br, 1.0f));
+            quad.setColor(i, ColorRGBA.packABGR(r * br, g * br, b * br, 1.0f));
             quad.setLight(i, lm);
 
             lightIndex += lightOrder;

File: src/main/java/me/jellysquid/mods/sodium/mixin/entity_rendering/MixinModelPart.java
Patch:
@@ -3,7 +3,7 @@
 import it.unimi.dsi.fastutil.objects.ObjectList;
 import me.jellysquid.mods.sodium.client.model.ModelCuboidAccessor;
 import me.jellysquid.mods.sodium.client.model.consumer.QuadVertexConsumer;
-import me.jellysquid.mods.sodium.client.util.ColorARGB;
+import me.jellysquid.mods.sodium.client.util.ColorRGBA;
 import me.jellysquid.mods.sodium.client.util.Norm3b;
 import me.jellysquid.mods.sodium.client.util.math.Matrix3fExtended;
 import me.jellysquid.mods.sodium.client.util.math.Matrix4fExtended;
@@ -36,7 +36,7 @@ private void renderCuboids(MatrixStack.Entry matrices, VertexConsumer vertexCons
 
         QuadVertexConsumer quadConsumer = (QuadVertexConsumer) vertexConsumer;
 
-        int color = ColorARGB.pack(red, green, blue, alpha);
+        int color = ColorRGBA.packABGR(red, green, blue, alpha);
 
         for (ModelPart.Cuboid cuboid : this.cuboids) {
             for (ModelPart.Quad quad : ((ModelCuboidAccessor) cuboid).getQuads()) {

File: src/main/java/me/jellysquid/mods/sodium/mixin/gui/font/MixinGlyphRenderer.java
Patch:
@@ -1,7 +1,7 @@
 package me.jellysquid.mods.sodium.mixin.gui.font;
 
 import me.jellysquid.mods.sodium.client.model.consumer.GlyphVertexConsumer;
-import me.jellysquid.mods.sodium.client.util.ColorARGB;
+import me.jellysquid.mods.sodium.client.util.ColorRGBA;
 import net.minecraft.client.font.GlyphRenderer;
 import net.minecraft.client.render.VertexConsumer;
 import net.minecraft.util.math.Matrix4f;
@@ -59,7 +59,7 @@ public void draw(boolean italic, float x, float y, Matrix4f matrix, VertexConsum
         float w1 = italic ? 1.0F - 0.25F * y1 : 0.0F;
         float w2 = italic ? 1.0F - 0.25F * y2 : 0.0F;
 
-        int color = ColorARGB.pack(red, green, blue, alpha);
+        int color = ColorRGBA.packABGR(red, green, blue, alpha);
 
         GlyphVertexConsumer glyphs = ((GlyphVertexConsumer) vertexConsumer);
         glyphs.vertexGlyph(matrix, x1 + w1, h1, 0.0F, color, this.uMin, this.vMin, light);

File: src/main/java/me/jellysquid/mods/sodium/mixin/item_rendering/MixinItemRenderer.java
Patch:
@@ -3,6 +3,7 @@
 import me.jellysquid.mods.sodium.client.model.consumer.QuadVertexConsumer;
 import me.jellysquid.mods.sodium.client.model.quad.ModelQuadView;
 import me.jellysquid.mods.sodium.client.render.texture.SpriteUtil;
+import me.jellysquid.mods.sodium.client.util.ColorRGBA;
 import me.jellysquid.mods.sodium.client.util.ModelQuadUtil;
 import me.jellysquid.mods.sodium.client.util.rand.XoRoShiRoRandom;
 import me.jellysquid.mods.sodium.client.world.biome.ItemColorsExtended;
@@ -68,13 +69,12 @@ private void renderBakedItemQuads(MatrixStack matrices, VertexConsumer vertices,
         for (BakedQuad bakedQuad : quads) {
             int color = 0xFFFFFFFF;
 
-            if (bakedQuad.hasColor()) {
+            if (!stack.isEmpty() && bakedQuad.hasColor()) {
                 if (colorProvider == null) {
                     colorProvider = ((ItemColorsExtended) this.colorMap).getColorProvider(stack);
                 }
 
-                color = (colorProvider.getColor(stack, bakedQuad.getColorIndex()));
-                color |= 0xFF000000; // Drop alpha channel
+                color = ColorRGBA.repackABGR((colorProvider.getColor(stack, bakedQuad.getColorIndex())), 255);
             }
 
             ModelQuadView quad = ((ModelQuadView) bakedQuad);

File: src/main/java/me/jellysquid/mods/sodium/mixin/particles/MixinBillboardParticle.java
Patch:
@@ -1,7 +1,7 @@
 package me.jellysquid.mods.sodium.mixin.particles;
 
 import me.jellysquid.mods.sodium.client.model.consumer.ParticleVertexConsumer;
-import me.jellysquid.mods.sodium.client.util.ColorARGB;
+import me.jellysquid.mods.sodium.client.util.ColorRGBA;
 import net.minecraft.client.particle.BillboardParticle;
 import net.minecraft.client.particle.Particle;
 import net.minecraft.client.render.Camera;
@@ -67,7 +67,7 @@ public void buildGeometry(VertexConsumer vertexConsumer, Camera camera, float ti
         float minV = this.getMinV();
         float maxV = this.getMaxV();
 
-        int color = ColorARGB.pack(this.colorRed, this.colorGreen, this.colorBlue, this.colorAlpha);
+        int color = ColorRGBA.packABGR(this.colorRed, this.colorGreen, this.colorBlue, this.colorAlpha);
 
         ParticleVertexConsumer vertices = (ParticleVertexConsumer) vertexConsumer;
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/pipeline/MixinBlockModelRenderer.java
Patch:
@@ -6,7 +6,7 @@
 import me.jellysquid.mods.sodium.client.render.block.BlockRenderPipeline;
 import me.jellysquid.mods.sodium.client.render.pipeline.GlobalRenderer;
 import me.jellysquid.mods.sodium.client.render.texture.SpriteUtil;
-import me.jellysquid.mods.sodium.client.util.ColorARGB;
+import me.jellysquid.mods.sodium.client.util.ColorRGBA;
 import me.jellysquid.mods.sodium.client.util.ModelQuadUtil;
 import me.jellysquid.mods.sodium.client.util.rand.XoRoShiRoRandom;
 import me.jellysquid.mods.sodium.common.util.DirectionUtil;
@@ -57,7 +57,7 @@ public void render(MatrixStack.Entry entry, VertexConsumer vertexConsumer, Block
         green = MathHelper.clamp(green, 0.0F, 1.0F);
         blue = MathHelper.clamp(blue, 0.0F, 1.0F);
 
-        int defaultColor = ColorARGB.pack(red, green, blue, 1.0F);
+        int defaultColor = ColorRGBA.packABGR(red, green, blue, 1.0F);
 
         for (Direction direction : DirectionUtil.ALL_DIRECTIONS) {
             List<BakedQuad> quads = bakedModel.getQuads(blockState, direction, random.setSeedAndReturn(42L));

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/backends/gl20/VBOGraphicsState.java
Patch:
@@ -32,6 +32,8 @@ public void upload(ChunkMeshData meshData) {
         VertexData data = meshData.takeVertexData();
 
         this.vertexBuffer.bind(GL15.GL_ARRAY_BUFFER);
+
+        this.memoryTracker.onMemoryFreeAndRelease(this.vertexBuffer.getSize());
         this.vertexBuffer.upload(GL15.GL_ARRAY_BUFFER, data);
         this.memoryTracker.onMemoryAllocateAndUse(this.vertexBuffer.getSize());
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/backends/gl30/VAOGraphicsState.java
Patch:
@@ -29,6 +29,8 @@ public void upload(ChunkMeshData meshData) {
         this.vertexArray.bind();
 
         this.vertexBuffer.bind(GL15.GL_ARRAY_BUFFER);
+
+        this.memoryTracker.onMemoryFreeAndRelease(this.vertexBuffer.getSize());
         this.vertexBuffer.upload(GL15.GL_ARRAY_BUFFER, vertexData);
         this.memoryTracker.onMemoryAllocateAndUse(this.vertexBuffer.getSize());
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/item_rendering/MixinItemRenderer.java
Patch:
@@ -73,7 +73,8 @@ private void renderBakedItemQuads(MatrixStack matrices, VertexConsumer vertices,
                     colorProvider = ((ItemColorsExtended) this.colorMap).getColorProvider(stack);
                 }
 
-                color = colorProvider.getColor(stack, bakedQuad.getColorIndex());
+                color = (colorProvider.getColor(stack, bakedQuad.getColorIndex()));
+                color |= 0xFF000000; // Drop alpha channel
             }
 
             ModelQuadView quad = ((ModelQuadView) bakedQuad);

File: src/main/java/me/jellysquid/mods/sodium/client/gl/buffer/GlMutableBuffer.java
Patch:
@@ -18,11 +18,13 @@ public GlMutableBuffer(int hints) {
     @Override
     public void upload(int target, ByteBuffer buf) {
         GL15.glBufferData(target, buf, this.hints);
+        this.size = buf.capacity();
     }
 
     @Override
-    public void allocate(int target, long size) {
+    public void allocate(int target, int size) {
         GL15.glBufferData(target, size, this.hints);
+        this.size = size;
     }
 
     public void invalidate(int target) {

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/ChunkBuildBuffers.java
Patch:
@@ -90,7 +90,7 @@ public ChunkMeshData createMesh(Vector3d camera, BlockPos pos, BlockRenderPass p
         }
 
         if (bufferLen <= 0) {
-            return ChunkMeshData.EMPTY;
+            return null;
         }
 
         ByteBuffer buffer = GlAllocationUtils.allocateByteBuffer(bufferLen);

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/ChunkRenderContainer.java
Patch:
@@ -120,18 +120,19 @@ public void setData(ChunkRenderData info) {
             throw new NullPointerException("Mesh information must not be null");
         }
 
-        this.data = info;
         this.visibilityData = 0;
 
         for (Direction from : DirectionUtil.ALL_DIRECTIONS) {
             for (Direction to : DirectionUtil.ALL_DIRECTIONS) {
-                if (this.data.isVisibleThrough(from, to)) {
+                if (info.isVisibleThrough(from, to)) {
                     this.visibilityData |= (1L << ((from.ordinal() << 3) + to.ordinal()));
                 }
             }
         }
 
         this.worldRenderer.onChunkRenderUpdated(this.data, info);
+        this.data = info;
+
         this.tickable = !info.getAnimatedSprites().isEmpty();
     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/fluid/FluidRenderPipeline.java
Patch:
@@ -343,7 +343,7 @@ public boolean render(ChunkRenderData.Builder meshInfo, WorldSlice world, BlockP
     }
 
     private void applyLighting(ModelQuadViewMutable quad, BlockPos pos, LightPipeline lighter, QuadLightData light, Direction dir) {
-        lighter.calculate(quad, pos, light, dir, true);
+        lighter.calculate(quad, pos, light, dir, false);
     }
 
     private void writeQuad(ModelQuadSinkDelegate consumer, ModelQuadViewMutable quad, float r, float g, float b, boolean flipLight) {

File: src/main/java/me/jellysquid/mods/sodium/mixin/mojmath/MixinFrustum.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.mixin.fast_mojmath;
+package me.jellysquid.mods.sodium.mixin.mojmath;
 
 import me.jellysquid.mods.sodium.client.render.FrustumExtended;
 import net.minecraft.client.render.Frustum;

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/storage/SodiumOptionsStorage.java
Patch:
@@ -17,9 +17,8 @@ public SodiumGameOptions getData() {
 
     @Override
     public void save() {
-        SodiumClientMod.onConfigChanged(this.options);
-
         this.options.writeChanges();
+        this.options.notifyListeners();
 
         SodiumClientMod.logger().info("Flushed changes to Sodium configuration");
     }

File: src/main/java/me/jellysquid/mods/sodium/client/util/UnsafeUtil.java
Patch:
@@ -26,6 +26,8 @@ public class UnsafeUtil {
         } else {
             INT_ARRAY_OFFSET = -1;
         }
+
+        setEnabled(true);
     }
 
     private static Unsafe findUnsafe() {
@@ -72,6 +74,6 @@ public static Unsafe instanceNullable() {
     }
 
     public static void setEnabled(boolean enabled) {
-        AVAILABLE = UNSAFE != null && enabled;
+        AVAILABLE = isSupported() && enabled;
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/model/QuadVertexConsumer.java
Patch:
@@ -15,5 +15,5 @@ public interface QuadVertexConsumer {
      * @param light   The light of the vertex
      * @param normal  The normal of the vertex
      */
-    void vertex(float x, float y, float z, int color, float u, float v, int overlay, int light, int normal);
+    void vertexQuad(float x, float y, float z, int color, float u, float v, int overlay, int light, int normal);
 }

File: src/main/java/me/jellysquid/mods/sodium/mixin/buffers/MixinBufferBuilder.java
Patch:
@@ -60,11 +60,11 @@ public void vertex(float x, float y, float z, float r, float g, float b, float a
             return;
         }
 
-        this.vertex(x, y, z, ColorARGB.pack(r, g, b, a), u, v, light1, light2, Norm3b.pack(normX, normY, normZ));
+        this.vertexQuad(x, y, z, ColorARGB.pack(r, g, b, a), u, v, light1, light2, Norm3b.pack(normX, normY, normZ));
     }
 
     @Override
-    public void vertex(float x, float y, float z, int color, float u, float v, int overlay, int light, int normal) {
+    public void vertexQuad(float x, float y, float z, int color, float u, float v, int overlay, int light, int normal) {
         if (this.colorFixed) {
             throw new IllegalStateException();
         }

File: src/main/java/me/jellysquid/mods/sodium/mixin/buffers/MixinSpriteTexturedVertexConsumer.java
Patch:
@@ -20,11 +20,11 @@ public abstract class MixinSpriteTexturedVertexConsumer implements QuadVertexCon
     private Sprite sprite;
 
     @Override
-    public void vertex(float x, float y, float z, int color, float u, float v, int overlay, int light, int norm) {
+    public void vertexQuad(float x, float y, float z, int color, float u, float v, int overlay, int light, int norm) {
         u = this.sprite.getFrameU(u * 16.0F);
         v = this.sprite.getFrameV(v * 16.0F);
 
-        ((QuadVertexConsumer) this.parent).vertex(x, y, z, color, u, v, overlay, light, norm);
+        ((QuadVertexConsumer) this.parent).vertexQuad(x, y, z, color, u, v, overlay, light, norm);
     }
 
     @Override

File: src/main/java/me/jellysquid/mods/sodium/mixin/entity_rendering/MixinModelPart.java
Patch:
@@ -67,7 +67,7 @@ private void renderCuboids(MatrixStack.Entry matrices, VertexConsumer vertexCons
                     posVec1.set(x, y, z, 1.0f);
                     posVec1.transform(modelMatrix);
 
-                    vertices.vertex(posVec1.getX(), posVec1.getY(), posVec1.getZ(), color, u, v, overlay, light, Norm3b.pack(normVec1));
+                    vertices.vertexQuad(posVec1.getX(), posVec1.getY(), posVec1.getZ(), color, u, v, overlay, light, Norm3b.pack(normVec1));
                 }
             }
         }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/multidraw/ChunkDrawParamsVector.java
Patch:
@@ -28,8 +28,8 @@ public static ChunkDrawParamsVector create(int capacity) {
     public abstract void pushChunkDrawParams(float x, float y, float z);
 
     protected void growBuffer() {
-        this.capacity = this.buffer.capacity() * 2;
-        this.buffer = MemoryUtil.memRealloc(this.buffer, this.capacity);
+        this.capacity = this.capacity * 2;
+        this.buffer = MemoryUtil.memRealloc(this.buffer, this.capacity * VEC4_SIZE);
     }
 
     public static class UnsafeChunkDrawCallVector extends ChunkDrawParamsVector {

File: src/main/java/me/jellysquid/mods/sodium/client/model/light/LightPipeline.java
Patch:
@@ -15,7 +15,7 @@ public interface LightPipeline {
      * @param pos The block position of the model this quad belongs to
      * @param out The data arrays which will store the calculated light data results
      * @param face The pre-computed facing vector of the quad
-     * @param shade
+     * @param shade True if the block is shaded by ambient occlusion
      */
     void calculate(ModelQuadView quad, BlockPos pos, QuadLightData out, Direction face, boolean shade);
 

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumOptionsGUI.java
Patch:
@@ -15,6 +15,7 @@
 import net.minecraft.text.LiteralText;
 import net.minecraft.text.StringRenderable;
 import net.minecraft.text.TranslatableText;
+import net.minecraft.util.Formatting;
 import org.lwjgl.glfw.GLFW;
 
 import java.util.ArrayList;
@@ -196,7 +197,7 @@ private void renderOptionTooltip(MatrixStack matrixStack, ControlElement<?> elem
         OptionImpact impact = option.getImpact();
 
         if (impact != null) {
-            tooltip.add(new LiteralText("\n" + "Performance Impact: " + impact.toDisplayString()));
+            tooltip.add(new LiteralText(Formatting.GRAY + "Performance Impact: " + impact.toDisplayString()));
         }
 
         int boxHeight = (tooltip.size() * 12) + boxPadding;

File: src/main/java/me/jellysquid/mods/sodium/client/gui/options/control/Control.java
Patch:
@@ -1,11 +1,11 @@
 package me.jellysquid.mods.sodium.client.gui.options.control;
 
 import me.jellysquid.mods.sodium.client.gui.options.Option;
-import net.minecraft.client.util.Rect2i;
+import me.jellysquid.mods.sodium.client.util.Dim2i;
 
 public interface Control<T> {
     Option<T> getOption();
 
-    ControlElement<T> createElement(Rect2i dim);
+    ControlElement<T> createElement(Dim2i dim);
 
 }

File: src/main/java/me/jellysquid/mods/sodium/client/util/ModelQuadUtil.java
Patch:
@@ -27,6 +27,7 @@ public class ModelQuadUtil {
 
     // Size of vertex format in 4-byte integers
     public static final int VERTEX_SIZE = 8;
+    public static final int VERTEX_SIZE_BYTES = VERTEX_SIZE * 4;
 
     // Cached array of normals for every facing to avoid expensive computation
     static final int[] NORMALS = new int[DirectionUtil.ALL_DIRECTIONS.length];

File: src/main/java/me/jellysquid/mods/sodium/mixin/chunk_rendering/MixinChunkBuilder.java
Patch:
@@ -7,7 +7,7 @@
 
 @Mixin(ChunkBuilder.class)
 public class MixinChunkBuilder {
-    @ModifyVariable(method = "<init>", index = 9, at = @At(value = "INVOKE", target = "Lcom/google/common/collect/Lists;newArrayListWithExpectedSize(I)Ljava/util/ArrayList;"))
+    @ModifyVariable(method = "<init>", index = 9, at = @At(value = "INVOKE", target = "Lcom/google/common/collect/Lists;newArrayListWithExpectedSize(I)Ljava/util/ArrayList;", remap = false))
     private int modifyThreadPoolSize(int prev) {
         // Do not allow any resources to be allocated
         return 0;

File: src/main/java/me/jellysquid/mods/sodium/mixin/chunk_rendering/MixinClientWorld.java
Patch:
@@ -3,12 +3,14 @@
 import me.jellysquid.mods.sodium.client.world.SodiumChunkManager;
 import net.minecraft.client.world.ClientChunkManager;
 import net.minecraft.client.world.ClientWorld;
+import org.spongepowered.asm.mixin.Dynamic;
 import org.spongepowered.asm.mixin.Mixin;
 import org.spongepowered.asm.mixin.injection.At;
 import org.spongepowered.asm.mixin.injection.Redirect;
 
 @Mixin(ClientWorld.class)
 public abstract class MixinClientWorld {
+    @Dynamic
     @Redirect(method = "method_2940", at = @At(value = "NEW", target = "net/minecraft/client/world/ClientChunkManager"))
     private static ClientChunkManager redirectCreateChunkManager(ClientWorld world, int renderDistance) {
         return new SodiumChunkManager(world, renderDistance);

File: src/main/java/me/jellysquid/mods/sodium/mixin/entity_rendering/MixinModelPart.java
Patch:
@@ -29,6 +29,7 @@ public class MixinModelPart {
 
     /**
      * @author JellySquid
+     * @reason Use optimized vertex writer
      */
     @Overwrite
     private void renderCuboids(MatrixStack.Entry matrices, VertexConsumer vertexConsumer, int light, int overlay, float red, float green, float blue, float alpha) {

File: src/main/java/me/jellysquid/mods/sodium/mixin/models/MixinBlockColors.java
Patch:
@@ -29,6 +29,7 @@ private void init(CallbackInfo ci) {
 
     /**
      * @author JellySquid
+     * @reason Use the optimized backing collection type
      */
     @Overwrite
     public int getColor(BlockState state, BlockRenderView view, BlockPos pos, int tint) {

File: src/main/java/me/jellysquid/mods/sodium/mixin/models/MixinMultipartBakedModel.java
Patch:
@@ -33,6 +33,7 @@ private void init(List<Pair<Predicate<BlockState>, BakedModel>> components, Call
 
     /**
      * @author JellySquid
+     * @reason Avoid expensive allocations and replace bitfield indirection
      */
     @Overwrite
     public List<BakedQuad> getQuads(BlockState state, Direction face, Random random) {

File: src/main/java/me/jellysquid/mods/sodium/mixin/options/MixinGameOptions.java
Patch:
@@ -18,6 +18,7 @@ public class MixinGameOptions {
 
     /**
      * @author JellySquid
+     * @reason Make the cloud render mode user-configurable
      */
     @Overwrite
     public CloudRenderMode getCloudRenderMode() {

File: src/main/java/me/jellysquid/mods/sodium/mixin/options/MixinMinecraftClient.java
Patch:
@@ -10,6 +10,7 @@
 public class MixinMinecraftClient {
     /**
      * @author JellySquid
+     * @reason Make ambient occlusion user configurable
      */
     @Overwrite
     public static boolean isAmbientOcclusionEnabled() {

File: src/main/java/me/jellysquid/mods/sodium/mixin/options/MixinSettingsScreen.java
Patch:
@@ -5,6 +5,7 @@
 import net.minecraft.client.gui.screen.SettingsScreen;
 import net.minecraft.client.gui.widget.ButtonWidget;
 import net.minecraft.text.Text;
+import org.spongepowered.asm.mixin.Dynamic;
 import org.spongepowered.asm.mixin.Mixin;
 import org.spongepowered.asm.mixin.injection.At;
 import org.spongepowered.asm.mixin.injection.Inject;
@@ -16,7 +17,7 @@ protected MixinSettingsScreen(Text title) {
         super(title);
     }
 
-    @SuppressWarnings("UnresolvedMixinReference")
+    @Dynamic
     @Inject(method = "method_19828(Lnet/minecraft/client/gui/widget/ButtonWidget;)V", at = @At("HEAD"), cancellable = true)
     private void open(ButtonWidget widget, CallbackInfo ci) {
         this.minecraft.openScreen(new SodiumOptionsGUI(this));

File: src/main/java/me/jellysquid/mods/sodium/mixin/textures/MixinSprite.java
Patch:
@@ -20,6 +20,7 @@ public abstract class MixinSprite implements SpriteExtended {
     private int frameTicks;
 
     @Shadow
+    @Final
     private AnimationResourceMetadata animationMetadata;
 
     @Shadow
@@ -37,6 +38,7 @@ public abstract class MixinSprite implements SpriteExtended {
 
     /**
      * @author JellySquid
+     * @reason Allow conditional texture updating
      */
     @Overwrite
     public void tickAnimation() {

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/oneshot/ChunkProgramOneshot.java
Patch:
@@ -20,7 +20,7 @@ public ChunkProgramOneshot(Identifier name, int handle, Function<ChunkProgram, C
         super(name, handle, fogShaderFunction);
 
         this.dModelOffset = this.getUniformLocation("d_ModelOffset");
-        this.uModelOffsetBuffer = MemoryUtil.memAllocFloat(3);
+        this.uModelOffsetBuffer = MemoryUtil.memAllocFloat(4);
     }
 
     public void setModelOffset(float x, float y, float z) {
@@ -29,6 +29,6 @@ public void setModelOffset(float x, float y, float z) {
         buf.put(1, y);
         buf.put(2, z);
 
-        GL20.glUniform3fv(this.dModelOffset, buf);
+        GL20.glUniform4fv(this.dModelOffset, buf);
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/mixin/textures/MixinInGameOverlayRenderer.java
Patch:
@@ -14,6 +14,6 @@
 public class MixinInGameOverlayRenderer {
     @Inject(method = "renderFireOverlay", at = @At(value = "INVOKE", target = "Lnet/minecraft/client/texture/TextureManager;bindTexture(Lnet/minecraft/util/Identifier;)V", shift = At.Shift.AFTER))
     private static void preFireOverlayRender(MinecraftClient client, MatrixStack stack, CallbackInfo ci) {
-        SpriteUtil.ensureSpriteReady(ModelLoader.FIRE_1.getSprite());
+        SpriteUtil.markSpriteActive(ModelLoader.FIRE_1.getSprite());
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptions.java
Patch:
@@ -6,7 +6,7 @@
 import me.jellysquid.mods.sodium.client.gui.options.TextProvider;
 import me.jellysquid.mods.sodium.client.render.chunk.backends.gl20.GL20ChunkRenderBackend;
 import me.jellysquid.mods.sodium.client.render.chunk.backends.gl30.GL30ChunkRenderBackend;
-import me.jellysquid.mods.sodium.client.render.chunk.backends.gl46.GL46ChunkRenderBackend;
+import me.jellysquid.mods.sodium.client.render.chunk.backends.gl43.GL43ChunkRenderBackend;
 
 import java.io.File;
 import java.io.FileReader;
@@ -47,7 +47,7 @@ public static class QualitySettings {
     }
 
     public enum ChunkRendererBackendOption implements TextProvider {
-        GL46("OpenGL 4.6", GL46ChunkRenderBackend::isSupported),
+        GL43("OpenGL 4.3", GL43ChunkRenderBackend::isSupported),
         GL30("OpenGL 3.0", GL30ChunkRenderBackend::isSupported),
         GL20("OpenGL 2.0", GL20ChunkRenderBackend::isSupported);
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/backends/gl43/LCBGraphicsState.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.client.render.chunk.backends.gl46;
+package me.jellysquid.mods.sodium.client.render.chunk.backends.gl43;
 
 import me.jellysquid.mods.sodium.client.gl.arena.GlBufferRegion;
 import me.jellysquid.mods.sodium.client.gl.attribute.GlVertexFormat;

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/oneshot/ChunkProgramOneshot.java
Patch:
@@ -11,15 +11,15 @@
 
 public class ChunkProgramOneshot extends ChunkProgram {
     // Uniform variable index for model offset
-    private final int uModelOffset;
+    private final int dModelOffset;
 
     // Scratch buffer
     private final FloatBuffer uModelOffsetBuffer;
 
     public ChunkProgramOneshot(Identifier name, int handle, Function<ChunkProgram, ChunkShaderFogComponent> fogShaderFunction) {
         super(name, handle, fogShaderFunction);
 
-        this.uModelOffset = this.getUniformLocation("u_ModelOffset");
+        this.dModelOffset = this.getUniformLocation("d_ModelOffset");
         this.uModelOffsetBuffer = MemoryUtil.memAllocFloat(3);
     }
 
@@ -29,6 +29,6 @@ public void setModelOffset(float x, float y, float z) {
         buf.put(1, y);
         buf.put(2, z);
 
-        GL20.glUniform3fv(this.uModelOffset, buf);
+        GL20.glUniform3fv(this.dModelOffset, buf);
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/util/BufferUtil.java
Patch:
@@ -50,4 +50,5 @@ private static void copyIntArrayDefault(int[] data, int limit, int offset, ByteB
             buffer.putInt(offset + (i * 4), data[i]);
         }
     }
+
 }

File: src/main/java/me/jellysquid/mods/sodium/mixin/textures/MixinSprite.java
Patch:
@@ -52,7 +52,7 @@ public void tickAnimation() {
 
     @Override
     public void uploadPendingChanges() {
-        if (this.onDemand && this.hasPendingUpdate) {
+        if (this.hasPendingUpdate && this.onDemand) {
             this.uploadTexture();
         }
     }

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptions.java
Patch:
@@ -40,7 +40,6 @@ public static class QualitySettings {
         public MipmapQuality mipmapQuality = MipmapQuality.NEAREST;
 
         public boolean enableVignette = true;
-        public boolean enableFog = true;
         public boolean enableClouds = true;
 
         public LightingQuality smoothLighting = LightingQuality.HIGH;

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptions.java
Patch:
@@ -47,9 +47,9 @@ public static class QualitySettings {
     }
 
     public enum ChunkRendererBackendOption implements TextProvider {
-        GL46("OpenGL 4.6", GL20ChunkRenderBackend::isSupported),
+        GL46("OpenGL 4.6", GL46ChunkRenderBackend::isSupported),
         GL30("OpenGL 3.0", GL30ChunkRenderBackend::isSupported),
-        GL20("OpenGL 2.0", GL46ChunkRenderBackend::isSupported);
+        GL20("OpenGL 2.0", GL20ChunkRenderBackend::isSupported);
 
         public static final ChunkRendererBackendOption DEFAULT = pickBestBackend();
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/ChunkBuilder.java
Patch:
@@ -305,7 +305,7 @@ private ChunkRenderBuildTask<T> createRebuildTask(ChunkRenderContainer<T> render
         if (slice == null) {
             return new ChunkRenderEmptyBuildTask<>(render);
         } else {
-            return new ChunkRenderRebuildTask<>(this, render, slice, render.getOrigin());
+            return new ChunkRenderRebuildTask<>(this, render, slice, render.getRenderOrigin());
         }
     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/multidraw/ChunkMultiDrawBatch.java
Patch:
@@ -21,7 +21,7 @@ public class ChunkMultiDrawBatch {
     public ChunkMultiDrawBatch(int capacity) {
         this.bufIndices = allocateByteBuffer(capacity * 4).asIntBuffer();
         this.bufLen = allocateByteBuffer(capacity * 4).asIntBuffer();
-        this.bufOffsets = allocateByteBuffer(capacity * 12).asFloatBuffer();
+        this.bufOffsets = allocateByteBuffer(capacity * 16).asFloatBuffer();
     }
 
     private static ByteBuffer allocateByteBuffer(int size) {
@@ -66,7 +66,7 @@ public void addChunkRender(int first, int count, float x, float y, float z) {
         this.bufIndices.put(i, first);
         this.bufLen.put(i, count);
 
-        int j = i * 3;
+        int j = i * 4;
         this.bufOffsets.put(j++, x);
         this.bufOffsets.put(j++, y);
         this.bufOffsets.put(j  , z);

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/multidraw/ChunkProgramMultidraw.java
Patch:
@@ -18,6 +18,6 @@ public ChunkProgramMultidraw(Identifier name, int handle, Function<ChunkProgram,
     }
 
     public void uploadModelOffsetUniforms(FloatBuffer buffer) {
-        GL20.glUniform3fv(this.uModelOffsetsLocation, buffer);
+        GL20.glUniform4fv(this.uModelOffsetsLocation, buffer);
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/tasks/ChunkRenderRebuildTask.java
Patch:
@@ -119,7 +119,7 @@ public ChunkBuildResult<T> performBuild(ChunkRenderPipeline pipeline, ChunkBuild
             }
         }
 
-        meshInfo.setMeshData(buffers.createMeshes(this.camera, this.render.getOrigin()));
+        meshInfo.setMeshData(buffers.createMeshes(this.camera, this.render.getRenderOrigin()));
         meshInfo.setOcclusionData(occluder.build());
 
         return new ChunkBuildResult<>(this.render, meshInfo.build());

File: src/main/java/me/jellysquid/mods/sodium/client/render/SodiumWorldRenderer.java
Patch:
@@ -90,6 +90,7 @@ private SodiumWorldRenderer(MinecraftClient client) {
     public void setWorld(ClientWorld world) {
         this.world = world;
         this.loadedChunkPositions.clear();
+        this.globalBlockEntities.clear();
 
         if (world == null) {
             if (this.chunkRenderManager != null) {

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptions.java
Patch:
@@ -47,9 +47,9 @@ public static class QualitySettings {
     }
 
     public enum ChunkRendererBackendOption implements TextProvider {
-        GL20("OpenGL 2.0", GL46ChunkRenderBackend::isSupported),
+        GL46("OpenGL 4.6", GL20ChunkRenderBackend::isSupported),
         GL30("OpenGL 3.0", GL30ChunkRenderBackend::isSupported),
-        GL46("OpenGL 4.6", GL20ChunkRenderBackend::isSupported);
+        GL20("OpenGL 2.0", GL46ChunkRenderBackend::isSupported);
 
         public static final ChunkRendererBackendOption DEFAULT = pickBestBackend();
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/ChunkRenderManager.java
Patch:
@@ -273,6 +273,8 @@ private void unloadChunk(int x, int z) {
                     adj.setAdjacentRender(dir.getOpposite(), null);
                 }
             }
+
+            render.delete();
         }
 
         this.dirty = true;

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptions.java
Patch:
@@ -24,6 +24,7 @@ public static class PerformanceSettings {
         public boolean useAdvancedEntityCulling = true;
         public boolean useParticleCulling = true;
         public boolean useFogOcclusion = true;
+        public boolean useCompactVertexFormat = true;
     }
 
     public static class QualitySettings {

File: src/main/java/me/jellysquid/mods/sodium/client/render/pipeline/FluidRenderPipeline.java
Patch:
@@ -73,10 +73,11 @@ private boolean isFluidExposed(WorldSlice world, int x, int y, int z, Fluid flui
     }
 
     private boolean isSideExposed(WorldSlice world, int x, int y, int z, Direction dir, float height) {
-        BlockState blockState = world.getBlockState(x + dir.getOffsetX(), y + dir.getOffsetY(), z + dir.getOffsetZ());
+        BlockPos pos = this.mpos.set(x + dir.getOffsetX(), y + dir.getOffsetY(), z + dir.getOffsetZ());
+        BlockState blockState = world.getBlockState(pos);
 
         if (blockState.isOpaque()) {
-            VoxelShape shape = blockState.getCullingShape(world, this.mpos.set(x, y, z));
+            VoxelShape shape = blockState.getCullingShape(world, pos);
 
             // Hoist these checks to avoid allocating the shape below
             if (shape == VoxelShapes.fullCube()) {

File: src/main/java/me/jellysquid/mods/sodium/mixin/chunk_rendering/MixinWorldRenderer.java
Patch:
@@ -116,7 +116,7 @@ public void scheduleBlockRenders(int minX, int minY, int minZ, int maxX, int max
      */
     @Overwrite
     public void scheduleBlockRenders(int x, int y, int z) {
-        this.renderer.scheduleRebuildForBlockArea(x - 1, y - 1, z - 1, x + 1, y + 1, z + 1, false);
+        this.renderer.scheduleRebuildForChunks(x - 1, y - 1, z - 1, x + 1, y + 1, z + 1, false);
     }
 
     /**

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptionPages.java
Patch:
@@ -127,7 +127,7 @@ public static OptionPage quality() {
                         .setControl(option -> new CyclingControl<>(option, SodiumGameOptions.DefaultGraphicsQuality.values()))
                         .setBinding(
                                 (opts, value) -> opts.fancyGraphics = value == SodiumGameOptions.DefaultGraphicsQuality.FANCY,
-                                opts -> (opts.fancyGraphics ? SodiumGameOptions.DefaultGraphicsQuality.FANCY : SodiumGameOptions.DefaultGraphicsQuality.FANCY))
+                                opts -> (opts.fancyGraphics ? SodiumGameOptions.DefaultGraphicsQuality.FANCY : SodiumGameOptions.DefaultGraphicsQuality.FAST))
                         .setImpact(OptionImpact.HIGH)
                         .setFlags(OptionFlag.REQUIRES_RENDERER_RELOAD)
                         .build())

File: src/main/java/me/jellysquid/mods/sodium/mixin/SodiumMixinPlugin.java
Patch:
@@ -24,7 +24,7 @@ public void onLoad(String mixinPackage) {
         try {
             this.config = SodiumConfig.load(new File("./config/sodium-mixins.properties"), "/sodium.mixins.json");
         } catch (Exception e) {
-            throw new RuntimeException("Could not load configuration file for Lithium", e);
+            throw new RuntimeException("Could not load configuration file for Sodium", e);
         }
 
         this.logger.info("Loaded configuration file for Sodium ({} options available, {} user overrides)",

File: src/main/java/me/jellysquid/mods/sodium/client/gui/SodiumGameOptionPages.java
Patch:
@@ -126,7 +126,7 @@ public static OptionPage quality() {
                         .setControl(option -> new CyclingControl<>(option, SodiumGameOptions.DefaultGraphicsQuality.values()))
                         .setBinding(
                                 (opts, value) -> opts.fancyGraphics = value == SodiumGameOptions.DefaultGraphicsQuality.FANCY,
-                                opts -> (opts.fancyGraphics ? SodiumGameOptions.DefaultGraphicsQuality.FANCY : SodiumGameOptions.DefaultGraphicsQuality.FANCY))
+                                opts -> (opts.fancyGraphics ? SodiumGameOptions.DefaultGraphicsQuality.FANCY : SodiumGameOptions.DefaultGraphicsQuality.FAST))
                         .setImpact(OptionImpact.HIGH)
                         .setFlags(OptionFlag.REQUIRES_RENDERER_RELOAD)
                         .build())

File: src/main/java/me/jellysquid/mods/sodium/client/render/backends/shader/lcb/BufferBlock.java
Patch:
@@ -62,7 +62,7 @@ private void resize(int size) {
     }
 
     private GlBuffer createBuffer() {
-        return this.useImmutableStorage ? new GlImmutableBuffer(GL44.GL_DYNAMIC_STORAGE_BIT) : new GlMutableBuffer(GL15.GL_STATIC_DRAW);
+        return this.useImmutableStorage ? new GlImmutableBuffer(GL44.GL_DYNAMIC_STORAGE_BIT) : new GlMutableBuffer(GL15.GL_DYNAMIC_DRAW);
     }
 
     public void bind(GlVertexAttributeBinding[] attributes) {

File: src/main/java/me/jellysquid/mods/sodium/client/gl/buffer/GlBuffer.java
Patch:
@@ -44,6 +44,7 @@ public static void copy(GlBuffer src, GlBuffer dst, int readOffset, int writeOff
 
         copyBufferFuncs.glCopyBufferSubData(GL31.GL_COPY_READ_BUFFER, GL31.GL_COPY_WRITE_BUFFER, readOffset, writeOffset, copyLen);
 
+        dst.unbind(GL31.GL_COPY_WRITE_BUFFER);
         src.unbind(GL31.GL_COPY_READ_BUFFER);
     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/backends/shader/lcb/BufferBlock.java
Patch:
@@ -50,7 +50,9 @@ private void resize(int size) {
         src.unbind(GL15.GL_ARRAY_BUFFER);
 
         GlBuffer dst = this.createBuffer();
+
         GlBuffer.copy(src, dst, 0, 0, this.capacity, size);
+        src.delete();
 
         dst.bind(GL15.GL_ARRAY_BUFFER);
 

File: src/main/java/me/jellysquid/mods/sodium/mixin/SodiumMixinPlugin.java
Patch:
@@ -22,7 +22,7 @@ public class SodiumMixinPlugin implements IMixinConfigPlugin {
     @Override
     public void onLoad(String mixinPackage) {
         try {
-            this.config = SodiumConfig.load(new File("./config/sodium.properties"), "/sodium.mixins.json");
+            this.config = SodiumConfig.load(new File("./config/sodium-mixins.properties"), "/sodium.mixins.json");
         } catch (Exception e) {
             throw new RuntimeException("Could not load configuration file for Lithium", e);
         }

File: src/main/java/me/jellysquid/mods/sodium/client/render/light/smooth/SmoothLightPipeline.java
Patch:
@@ -37,10 +37,10 @@ public void apply(ModelQuadView quad, BlockPos pos, LightResult out, Direction f
 
         final AoNeighborInfo neighborInfo = AoNeighborInfo.get(face);
 
-        if (ModelQuadFlags.contains(flags, ModelQuadFlags.IS_PARTIAL)) {
-            this.applyComplex(neighborInfo, quad, pos, face, out, flags);
-        } else {
+        if (flags == ModelQuadFlags.IS_ALIGNED) {
             this.applyAlignedFullFace(neighborInfo, pos, face, out, flags);
+        } else {
+            this.applyComplex(neighborInfo, quad, pos, face, out, flags);
         }
     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/model/quad/ModelQuadFlags.java
Patch:
@@ -6,6 +6,7 @@
 public class ModelQuadFlags {
     public static final int IS_ALIGNED = 0b01;
     public static final int IS_PARTIAL = 0b10;
+    public static final int NONE = 0;
 
     public static boolean contains(int flags, int mask) {
         return (flags & mask) != 0;

File: src/main/java/me/jellysquid/mods/sodium/common/util/DirectionUtil.java
Patch:
@@ -4,6 +4,6 @@
 
 public class DirectionUtil {
     public static final Direction[] ALL_DIRECTIONS = Direction.values();
-    public static final Direction[] HORIZONTAL_DIRECTIONS = new Direction[] { Direction.NORTH, Direction.SOUTH, Direction.EAST, Direction.WEST };
+    public static final Direction[] HORIZONTAL_DIRECTIONS = new Direction[] { Direction.NORTH, Direction.SOUTH, Direction.WEST, Direction.EAST };
     public static final Direction[] VERTICAL_DIRECTIONS = new Direction[] { Direction.UP, Direction.DOWN };
 }

File: src/main/java/me/jellysquid/mods/sodium/client/render/model/quad/ModelQuadFlags.java
Patch:
@@ -6,7 +6,6 @@
 public class ModelQuadFlags {
     public static final int IS_ALIGNED = 0b01;
     public static final int IS_PARTIAL = 0b10;
-    public static final int IS_COMPLEX = IS_ALIGNED | IS_PARTIAL;
 
     public static boolean contains(int flags, int mask) {
         return (flags & mask) != 0;

File: src/main/java/me/jellysquid/mods/sodium/client/render/model/quad/ModelQuadViewMutable.java
Patch:
@@ -17,6 +17,8 @@ public interface ModelQuadViewMutable extends ModelQuadView {
 
     void setNormal(int idx, int norm);
 
+    void setFlags(int flags);
+
     int getLight(int idx);
 
     int getNormal(int idx);

File: src/main/java/me/jellysquid/mods/sodium/client/render/pipeline/FluidRenderPipeline.java
Patch:
@@ -7,6 +7,7 @@
 import me.jellysquid.mods.sodium.client.render.light.smooth.SmoothLightPipeline;
 import me.jellysquid.mods.sodium.client.render.model.quad.ModelQuad;
 import me.jellysquid.mods.sodium.client.render.model.quad.ModelQuadConsumer;
+import me.jellysquid.mods.sodium.client.render.model.quad.ModelQuadFlags;
 import me.jellysquid.mods.sodium.client.render.model.quad.ModelQuadViewMutable;
 import me.jellysquid.mods.sodium.client.util.ColorUtil;
 import me.jellysquid.mods.sodium.client.util.QuadUtil;
@@ -317,6 +318,8 @@ public boolean render(ChunkRenderData.Builder meshInfo, WorldSlice world, BlockP
     }
 
     private void lightAndFlushVertex(VertexConsumer consumer, ModelQuadViewMutable quad, LightPipeline lighter, BlockPos pos, float r, float g, float b, Direction dir) {
+        quad.setFlags(dir != Direction.UP ? ModelQuadFlags.IS_ALIGNED : 0);
+
         LightResult lightResult = this.lightResult;
         lighter.apply(quad, pos, lightResult, dir);
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/SodiumWorldRenderer.java
Patch:
@@ -179,6 +179,8 @@ public void update(Camera camera, Frustum frustum, boolean hasForcedFrustum, int
         }
 
         Entity.setRenderDistanceMultiplier(MathHelper.clamp((double) this.client.options.viewDistance / 8.0D, 1.0D, 2.5D));
+
+        this.client.getProfiler().pop();
     }
 
     private void applySettings() {

File: src/main/java/me/jellysquid/mods/sodium/client/render/light/EntityLighter.java
Patch:
@@ -47,7 +47,7 @@ public static int getAdvancedLight(Entity entity, float tickDelta) {
                     BlockState blockState = entity.world.getBlockState(pos);
 
                     // Do not consider light-blocking volumes
-                    if (blockState.isOpaque() && blockState.getLuminance() <= 0) {
+                    if (blockState.isFullOpaque(entity.world, pos) && blockState.getLuminance() <= 0) {
                         continue;
                     }
 

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/compile/tasks/ChunkRenderRebuildTask.java
Patch:
@@ -28,11 +28,11 @@
 
 public class ChunkRenderRebuildTask<T extends ChunkRenderState> extends ChunkRenderBuildTask<T> {
     private final ChunkRender<T> render;
-    private final ChunkBuilder chunkBuilder;
+    private final ChunkBuilder<T> chunkBuilder;
     private final Vector3d camera;
     private final WorldSlice slice;
 
-    public ChunkRenderRebuildTask(ChunkBuilder chunkBuilder, ChunkRender<T> render, WorldSlice slice) {
+    public ChunkRenderRebuildTask(ChunkBuilder<T> chunkBuilder, ChunkRender<T> render, WorldSlice slice) {
         this.chunkBuilder = chunkBuilder;
         this.render = render;
         this.camera = chunkBuilder.getCameraPosition();

File: src/main/java/me/jellysquid/mods/sodium/common/util/DirectionUtil.java
Patch:
@@ -4,4 +4,5 @@
 
 public class DirectionUtil {
     public static final Direction[] ALL_DIRECTIONS = Direction.values();
+    public static final Direction[] HORIZONTAL_DIRECTIONS = new Direction[] { Direction.NORTH, Direction.SOUTH, Direction.EAST, Direction.WEST };
 }

File: src/main/java/me/jellysquid/mods/sodium/mixin/chunk_rendering/MixinWorldRenderer.java
Patch:
@@ -124,7 +124,7 @@ public void scheduleBlockRenders(int minX, int minY, int minZ, int maxX, int max
      */
     @Overwrite
     private void scheduleChunkRender(int x, int y, int z, boolean important) {
-        this.chunkManager.scheduleRebuildForBlock(x, y, z);
+        this.chunkManager.scheduleRebuild(x, y, z);
     }
 
     @Inject(method = "render", at = @At(value = "FIELD", target = "Lnet/minecraft/client/render/WorldRenderer;noCullingBlockEntities:Ljava/util/Set;", shift = At.Shift.BEFORE, ordinal = 0))

File: src/main/java/me/jellysquid/mods/sodium/client/gl/tessellation/GlTessellation.java
Patch:
@@ -1,4 +1,4 @@
-package me.jellysquid.mods.sodium.client.gl.buffer;
+package me.jellysquid.mods.sodium.client.gl.tessellation;
 
 public interface GlTessellation {
     void bind();

File: src/main/java/me/jellysquid/mods/sodium/mixin/chunk_rendering/MixinWorldRenderer.java
Patch:
@@ -1,7 +1,7 @@
 package me.jellysquid.mods.sodium.mixin.chunk_rendering;
 
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
-import me.jellysquid.mods.sodium.client.render.chunk.ChunkRenderManager;
+import me.jellysquid.mods.sodium.client.render.chunk.ChunkRenderer;
 import net.minecraft.client.MinecraftClient;
 import net.minecraft.client.options.GameOptions;
 import net.minecraft.client.render.*;
@@ -28,7 +28,7 @@ public abstract class MixinWorldRenderer {
     @Shadow
     @Final
     private Long2ObjectMap<SortedSet<BlockBreakingInfo>> blockBreakingProgressions;
-    private ChunkRenderManager chunkManager;
+    private ChunkRenderer chunkManager;
 
     @Redirect(method = "reload", at = @At(value = "FIELD", target = "Lnet/minecraft/client/options/GameOptions;viewDistance:I", ordinal = 1))
     private int nullifyBuiltChunkStorage(GameOptions options) {
@@ -38,7 +38,7 @@ private int nullifyBuiltChunkStorage(GameOptions options) {
 
     @Inject(method = "<init>", at = @At("RETURN"))
     private void init(MinecraftClient client, BufferBuilderStorage bufferBuilders, CallbackInfo ci) {
-        this.chunkManager = ChunkRenderManager.create();
+        this.chunkManager = ChunkRenderer.create();
     }
 
     @Inject(method = "setWorld", at = @At("RETURN"))

File: src/main/java/me/jellysquid/mods/sodium/mixin/entity_rendering/MixinEntityRenderer.java
Patch:
@@ -2,7 +2,7 @@
 
 import me.jellysquid.mods.sodium.client.SodiumClientMod;
 import me.jellysquid.mods.sodium.client.gui.SodiumGameOptions;
-import me.jellysquid.mods.sodium.client.render.chunk.ChunkRenderManager;
+import me.jellysquid.mods.sodium.client.render.chunk.ChunkRenderer;
 import me.jellysquid.mods.sodium.client.render.light.EntityLighter;
 import net.minecraft.client.render.Frustum;
 import net.minecraft.client.render.LightmapTextureManager;
@@ -75,7 +75,7 @@ private int getSimpleLight(T entity, float tickDelta, int blockLight) {
     @Inject(method = "shouldRender", at = @At(value = "INVOKE", target = "Lnet/minecraft/client/render/Frustum;isVisible(Lnet/minecraft/util/math/Box;)Z", shift = At.Shift.AFTER), cancellable = true)
     private void preShouldRender(T entity, Frustum frustum, double x, double y, double z, CallbackInfoReturnable<Boolean> cir) {
         // If the entity isn't culled already by other means, try to perform a second pass
-        if (cir.getReturnValue() && !ChunkRenderManager.getInstance().isEntityVisible(entity)) {
+        if (cir.getReturnValue() && !ChunkRenderer.getInstance().isEntityVisible(entity)) {
             cir.setReturnValue(false);
         }
     }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/ChunkRenderManager.java
Patch:
@@ -89,6 +89,7 @@ public void setWorld(ClientWorld world) {
 
             if (this.chunkRenderBackend != null) {
                 this.chunkRenderBackend.delete();
+                this.chunkRenderBackend = null;
             }
         } else {
             if (this.chunkBuilder == null) {
@@ -283,6 +284,7 @@ private void initRenderer() {
 
         if (this.chunkRenderBackend != null) {
             this.chunkRenderBackend.delete();
+            this.chunkRenderBackend = null;
         }
 
         if (SodiumClientMod.options().performance.useRenderLayerConsolidation) {

File: src/main/java/me/jellysquid/mods/sodium/client/render/model/quad/ModelQuadOrder.java
Patch:
@@ -16,9 +16,9 @@ public int getVertexIndex(int i) {
 
     public static ModelQuadOrder orderOf(float[] brightnesses) {
         if (brightnesses[0] + brightnesses[2] > brightnesses[1] + brightnesses[3]) {
-            return FLIP;
-        } else {
             return NORMAL;
+        } else {
+            return FLIP;
         }
     }
 }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/ChunkRenderManager.java
Patch:
@@ -53,7 +53,6 @@ public class ChunkRenderManager implements ChunkStatusListener {
     private boolean useEntityCulling;
 
     private ChunkGraph<?> chunkGraph;
-    private BufferBuilderStorage bufferBuilders;
     private Set<BlockEntity> globalBlockEntities = new ObjectOpenHashSet<>();
     private ChunkBuilder chunkBuilder;
 
@@ -323,7 +322,7 @@ public void renderTileEntities(MatrixStack matrices, BufferBuilderStorage buffer
                 int stage = breakingInfos.last().getStage();
 
                 if (stage >= 0) {
-                    VertexConsumer transformer = new TransformingVertexConsumer(this.bufferBuilders.getEffectVertexConsumers().getBuffer(ModelLoader.BLOCK_DESTRUCTION_RENDER_LAYERS.get(stage)), matrices.peek());
+                    VertexConsumer transformer = new TransformingVertexConsumer(bufferBuilders.getEffectVertexConsumers().getBuffer(ModelLoader.BLOCK_DESTRUCTION_RENDER_LAYERS.get(stage)), matrices.peek());
                     consumer = (layer) -> layer.method_23037() ? VertexConsumers.dual(transformer, immediate.getBuffer(layer)) : immediate.getBuffer(layer);
                 }
             }

File: src/main/java/me/jellysquid/mods/sodium/client/render/backends/vbo/ChunkRenderBackendVBO.java
Patch:
@@ -29,7 +29,7 @@ public void render(ChunkRender<ChunkRenderStateVBO> chunk, RenderLayer layer, Ma
 
         vbo.bind();
         VertexFormats.POSITION_COLOR_TEXTURE_LIGHT_NORMAL.startDrawing(0L);
-        vbo.draw(matrixStack.peek().getModel(), GL11.GL_QUADS);
+        vbo.drawInline(GL11.GL_QUADS);
 
         this.lastRender = vbo;
     }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/ChunkRender.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.concurrent.CompletableFuture;
 
 public class ChunkRender<T extends ChunkRenderState> {
-    private final ChunkRenderManager<T> renderManager;
+    private final ChunkRenderManager renderManager;
     private final ChunkBuilder builder;
 
     @SuppressWarnings("unchecked")
@@ -44,7 +44,7 @@ public class ChunkRender<T extends ChunkRenderState> {
     public int rebuildFrame;
     public byte cullingState;
 
-    public ChunkRender(ChunkRenderManager<T> renderManager, ChunkBuilder builder, T renderState, ColumnRender<T> column, int chunkX, int chunkY, int chunkZ) {
+    public ChunkRender(ChunkRenderManager renderManager, ChunkBuilder builder, T renderState, ColumnRender<T> column, int chunkX, int chunkY, int chunkZ) {
         this.renderManager = renderManager;
         this.builder = builder;
         this.renderState = renderState;

File: src/main/java/me/jellysquid/mods/sodium/client/render/model/quad/ModelQuadTransformer.java
Patch:
@@ -2,5 +2,4 @@
 
 public interface ModelQuadTransformer {
     void transform(ModelQuadViewMutable quad);
-
 }

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/ChunkRenderManager.java
Patch:
@@ -277,6 +277,7 @@ public void reload() {
 
         if (this.chunkGraph != null) {
             this.chunkGraph.reset();
+            this.chunkGraph.setRenderDistance(this.renderDistance);
         }
 
         this.chunkBuilder.reset();

File: src/main/java/me/jellysquid/mods/sodium/client/render/chunk/ChunkSlice.java
Patch:
@@ -204,7 +204,7 @@ public int getLightLevel(LightType type, BlockPos pos) {
       ChunkNibbleArray[] arrays = type == LightType.SKY ? this.skyLightArrays : this.blockLightArrays;
 
       int x = pos.getX();
-      int y = pos.getZ();
+      int y = pos.getY();
       int z = pos.getZ();
 
       int chunkX = (x >> 4) - this.chunkXOffset;

File: src/main/java/me/jellysquid/mods/sodium/mixin/SodiumMixinPlugin.java
Patch:
@@ -33,7 +33,6 @@ public void onLoad(String mixinPackage) {
 
     private void setupMixins(SodiumConfig config) {
         this.enableIf("chunk_building", true);
-        this.enableIf("chunk_occlusion", true);
         this.enableIf("chunk_rendering", true);
         this.enableIf("models", true);
         this.enableIf("options", true);

File: src/main/java/me/jellysquid/mods/sodium/mixin/chunk_rendering/MixinClientChunkManager.java
Patch:
@@ -17,14 +17,14 @@
 public class MixinClientChunkManager implements ChunkManagerWithStatusListener {
     private ChunkStatusListener listener;
 
-    @Inject(method = "loadChunkFromPacket", at = @At(value = "INVOKE", target = "Lnet/minecraft/client/world/ClientChunkManager$ClientChunkMap;set(ILnet/minecraft/world/chunk/WorldChunk;)V"))
+    @Inject(method = "loadChunkFromPacket", at = @At(value = "INVOKE", target = "Lnet/minecraft/client/world/ClientChunkManager$ClientChunkMap;set(ILnet/minecraft/world/chunk/WorldChunk;)V", shift = At.Shift.AFTER))
     private void onChunkLoaded(int chunkX, int chunkZ, BiomeArray biomeArray, PacketByteBuf packetByteBuf, CompoundTag compoundTag, int k, CallbackInfoReturnable<WorldChunk> cir) {
         if (this.listener != null) {
             this.listener.onChunkAdded(chunkX, chunkZ);
         }
     }
 
-    @Inject(method = "unload", at = @At(value = "INVOKE", target = "Lnet/minecraft/client/world/ClientChunkManager$ClientChunkMap;compareAndSet(ILnet/minecraft/world/chunk/WorldChunk;Lnet/minecraft/world/chunk/WorldChunk;)Lnet/minecraft/world/chunk/WorldChunk;"))
+    @Inject(method = "unload", at = @At(value = "INVOKE", target = "Lnet/minecraft/client/world/ClientChunkManager$ClientChunkMap;compareAndSet(ILnet/minecraft/world/chunk/WorldChunk;Lnet/minecraft/world/chunk/WorldChunk;)Lnet/minecraft/world/chunk/WorldChunk;", shift = At.Shift.AFTER))
     private void onChunkUnloaded(int chunkX, int chunkZ, CallbackInfo ci) {
         if (this.listener != null) {
             this.listener.onChunkRemoved(chunkX, chunkZ);

File: src/main/java/me/jellysquid/mods/sodium/client/util/QuadUtil.java
Patch:
@@ -40,7 +40,7 @@ public static int encodeNormal(float x, float y, float z) {
         int normY = encodeNormal(y);
         int normZ = encodeNormal(z);
 
-        return (normX << 16) | (normY << 8) | normZ;
+        return (normZ << 16) | (normY << 8) | normX;
     }
 
     private static int encodeNormal(float v) {

