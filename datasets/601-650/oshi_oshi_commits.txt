File: oshi-core/src/main/java/oshi/util/platform/linux/SysPath.java
Patch:
@@ -29,7 +29,7 @@ public final class SysPath {
     public static final String MODEL = SYS + "firmware/devicetree/base/model";
     public static final String POWER_SUPPLY = SYS + "class/power_supply";
     public static final String HWMON = SYS + "class/hwmon/";
-    public static final String THERMAL = SYS + "class/thermal/thermal_zone";
+    public static final String THERMAL = SYS + "class/thermal/";
 
     private SysPath() {
     }

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxNetworkIF.java
Patch:
@@ -208,9 +208,9 @@ public boolean updateAttributes() {
         this.inErrors = FileUtil.getUnsignedLongFromFile(name + "/statistics/rx_errors");
         this.collisions = FileUtil.getUnsignedLongFromFile(name + "/statistics/collisions");
         this.inDrops = FileUtil.getUnsignedLongFromFile(name + "/statistics/rx_dropped");
-        long speedMiB = FileUtil.getUnsignedLongFromFile(name + "/speed");
+        long speedMbps = FileUtil.getUnsignedLongFromFile(name + "/speed");
         // speed may be -1 from file.
-        this.speed = speedMiB < 0 ? 0 : speedMiB << 20;
+        this.speed = speedMbps < 0 ? 0 : speedMbps * 1000000L;
         this.ifAlias = FileUtil.getStringFromFile(name + "/ifalias");
         this.ifOperStatus = parseIfOperStatus(FileUtil.getStringFromFile(name + "/operstate"));
 

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacCentralProcessor.java
Patch:
@@ -147,7 +147,7 @@ protected Quartet<List<LogicalProcessor>, List<PhysicalProcessor>, List<Processo
             pkgCoreKeys.add((pkgId << 16) + coreId);
         }
         Map<Integer, String> compatMap = queryCompatibleStrings();
-        int perflevels = SysctlUtil.sysctl("hw.nperflevels", 1);
+        int perflevels = SysctlUtil.sysctl("hw.nperflevels", 1, false);
         List<PhysicalProcessor> physProcs = pkgCoreKeys.stream().sorted().map(k -> {
             String compat = compatMap.getOrDefault(k, "").toLowerCase(Locale.ROOT);
             // This is brittle. A better long term solution is to use sysctls

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxOSProcess.java
Patch:
@@ -128,7 +128,7 @@ public List<String> getArguments() {
 
     private List<String> queryArguments() {
         return Collections.unmodifiableList(ParseUtil.parseByteArrayToStrings(
-                FileUtil.readAllBytes(String.format(Locale.ROOT, ProcPath.PID_CMDLINE, getProcessID()))));
+                FileUtil.readAllBytes(String.format(Locale.ROOT, ProcPath.PID_CMDLINE, getProcessID()), LOG_PROCFS_WARNING)));
     }
 
     @Override

File: oshi-core/src/main/java/oshi/driver/linux/proc/ProcessStat.java
Patch:
@@ -435,8 +435,8 @@ public static File[] getPidFiles() {
      *
      * @return a map with socket as the key and pid as the value
      */
-    public static Map<Integer, Integer> querySocketToPidMap() {
-        Map<Integer, Integer> pidMap = new HashMap<>();
+    public static Map<Long, Integer> querySocketToPidMap() {
+        Map<Long, Integer> pidMap = new HashMap<>();
         for (File f : getPidFiles()) {
             int pid = ParseUtil.parseIntOrDefault(f.getName(), -1);
             File[] fds = getFileDescriptorFiles(pid);
@@ -445,7 +445,7 @@ public static Map<Integer, Integer> querySocketToPidMap() {
                 if (symLink != null) {
                     Matcher m = SOCKET.matcher(symLink);
                     if (m.matches()) {
-                        pidMap.put(ParseUtil.parseIntOrDefault(m.group(1), -1), pid);
+                        pidMap.put(ParseUtil.parseLongOrDefault(m.group(1), -1L), pid);
                     }
                 }
             }

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxInternetProtocolStats.java
Patch:
@@ -54,15 +54,15 @@ public UdpStats getUDPv6Stats() {
     @Override
     public List<IPConnection> getConnections() {
         List<IPConnection> conns = new ArrayList<>();
-        Map<Integer, Integer> pidMap = ProcessStat.querySocketToPidMap();
+        Map<Long, Integer> pidMap = ProcessStat.querySocketToPidMap();
         conns.addAll(queryConnections("tcp", 4, pidMap));
         conns.addAll(queryConnections("tcp", 6, pidMap));
         conns.addAll(queryConnections("udp", 4, pidMap));
         conns.addAll(queryConnections("udp", 6, pidMap));
         return conns;
     }
 
-    private static List<IPConnection> queryConnections(String protocol, int ipver, Map<Integer, Integer> pidMap) {
+    private static List<IPConnection> queryConnections(String protocol, int ipver, Map<Long, Integer> pidMap) {
         List<IPConnection> conns = new ArrayList<>();
         for (String s : FileUtil.readFile(ProcPath.NET + "/" + protocol + (ipver == 6 ? "6" : ""))) {
             if (s.indexOf(':') >= 0) {
@@ -72,7 +72,7 @@ private static List<IPConnection> queryConnections(String protocol, int ipver, M
                     Pair<byte[], Integer> fAddr = parseIpAddr(split[2]);
                     TcpState state = stateLookup(ParseUtil.hexStringToInt(split[3], 0));
                     Pair<Integer, Integer> txQrxQ = parseHexColonHex(split[4]);
-                    int inode = ParseUtil.parseIntOrDefault(split[9], 0);
+                    long inode = ParseUtil.parseLongOrDefault(split[9], 0);
                     conns.add(new IPConnection(protocol + ipver, lAddr.getA(), lAddr.getB(), fAddr.getA(), fAddr.getB(),
                             state, txQrxQ.getA(), txQrxQ.getB(), pidMap.getOrDefault(inode, -1)));
                 }

File: oshi-core/src/main/java/oshi/hardware/CentralProcessor.java
Patch:
@@ -676,7 +676,7 @@ public ProcessorIdentifier(String cpuVendor, String cpuName, String cpuFamily, S
 
         public ProcessorIdentifier(String cpuVendor, String cpuName, String cpuFamily, String cpuModel,
                 String cpuStepping, String processorID, boolean cpu64bit, long vendorFreq) {
-            this.cpuVendor = cpuVendor.startsWith("0x") ? queryVendorFromImplementer() : cpuVendor;
+            this.cpuVendor = cpuVendor.startsWith("0x") ? queryVendorFromImplementer(cpuVendor) : cpuVendor;
             this.cpuName = cpuName;
             this.cpuFamily = cpuFamily;
             this.cpuModel = cpuModel;
@@ -858,10 +858,10 @@ private String queryMicroarchitecture() {
             return Util.isBlank(arch) ? Constants.UNKNOWN : arch;
         }
 
-        private String queryVendorFromImplementer() {
+        private String queryVendorFromImplementer(String cpuVendor) {
             Properties archProps = FileUtil.readPropertiesFromFilename(OSHI_ARCHITECTURE_PROPERTIES);
             String vendor = archProps.getProperty("hw_impl." + this.cpuVendor);
-            return (vendor == null ? this.cpuVendor : vendor);
+            return (vendor == null ? cpuVendor : vendor);
         }
 
         @Override

File: oshi-core/src/main/java/oshi/util/EdidUtil.java
Patch:
@@ -13,6 +13,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import oshi.annotation.SuppressForbidden;
 import oshi.annotation.concurrent.ThreadSafe;
 
 /**
@@ -32,6 +33,7 @@ private EdidUtil() {
      * @param edid The EDID byte array
      * @return The manufacturer ID
      */
+    @SuppressForbidden(reason = "customized base 2 parsing not in Util class")
     public static String getManufacturerID(byte[] edid) {
         // Bytes 8-9 are manufacturer ID in 3 5-bit characters.
         String temp = String.format(Locale.ROOT, "%8s%8s", Integer.toBinaryString(edid[8] & 0xFF),

File: oshi-core/src/main/java/oshi/driver/windows/registry/HkeyPerformanceDataUtil.java
Patch:
@@ -27,6 +27,7 @@
 import com.sun.jna.platform.win32.WinPerf.PERF_OBJECT_TYPE;
 import com.sun.jna.platform.win32.WinReg;
 
+import oshi.annotation.SuppressForbidden;
 import oshi.annotation.concurrent.ThreadSafe;
 import oshi.jna.ByRef.CloseableIntByReference;
 import oshi.util.platform.windows.PerfCounterWildcardQuery.PdhCounterWildcardProperty;
@@ -266,6 +267,7 @@ private static synchronized Memory readPerfDataBuffer(String objectName) {
      * @return An unmodifiable map containing counter name strings as keys and indices as integer values if the key is
      * read successfully; an empty map otherwise.
      */
+    @SuppressForbidden(reason = "Catching the error here")
     private static Map<String, Integer> mapCounterIndicesFromRegistry() {
         HashMap<String, Integer> indexMap = new HashMap<>();
         try {

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxOSProcess.java
Patch:
@@ -467,6 +467,6 @@ private long getProcessOpenFileLimit(long processId, int index) {
 
         // Split all non-Digits away -> ["", "{soft-limit}, "{hard-limit}"]
         final String[] split = maxOpenFilesLine.get().split("\\D+");
-        return Long.parseLong(split[index]);
+        return ParseUtil.parseLongOrDefault(split[index], -1);
     }
 }

File: oshi-core/src/main/java/oshi/software/os/unix/freebsd/FreeBsdOSProcess.java
Patch:
@@ -453,6 +453,6 @@ private long getProcessOpenFileLimit(long processId, int index) {
 
         // Split all non-Digits away -> ["", "{soft-limit}, "{hard-limit}"]
         final String[] split = maxOpenFilesLine.get().split("\\D+");
-        return Long.parseLong(split[index]);
+        return ParseUtil.parseLongOrDefault(split[index], -1);
     }
 }

File: oshi-core/src/main/java/oshi/software/os/unix/solaris/SolarisOSProcess.java
Patch:
@@ -430,6 +430,6 @@ private long getProcessOpenFileLimit(final long processId, final int index) {
 
         // Split all non-Digits away -> ["", "{soft-limit}, "{hard-limit}"]
         final String[] split = nofilesLine.get().split("\\D+");
-        return Long.parseLong(split[index]);
+        return ParseUtil.parseLongOrDefault(split[index], -1);
     }
 }

File: oshi-core/src/main/java/oshi/util/FileUtil.java
Patch:
@@ -300,7 +300,7 @@ public static int getIntFromFile(String filename) {
                 if (LOG.isTraceEnabled()) {
                     LOG.trace(READ_LOG, read.get(0));
                 }
-                return Integer.parseInt(read.get(0));
+                return ParseUtil.parseIntOrDefault(read.get(0), 0);
             }
         } catch (NumberFormatException ex) {
             LOG.warn("Unable to read value from {}. {}", filename, ex.getMessage());

File: oshi-core/src/main/java/oshi/util/ParseUtil.java
Patch:
@@ -30,6 +30,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import oshi.annotation.SuppressForbidden;
 import oshi.annotation.concurrent.ThreadSafe;
 import oshi.util.tuples.Pair;
 import oshi.util.tuples.Triplet;
@@ -38,6 +39,7 @@
  * String parsing utility.
  */
 @ThreadSafe
+@SuppressForbidden(reason = "Require parse methods to parse in utility class")
 public final class ParseUtil {
 
     private static final Logger LOG = LoggerFactory.getLogger(ParseUtil.class);

File: oshi-demo/src/main/java/oshi/demo/ComputerID.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.Locale;
 
 import oshi.SystemInfo;
-import oshi.demo.annotation.SuppressForbidden;
+import oshi.annotation.SuppressForbidden;
 import oshi.hardware.CentralProcessor;
 import oshi.hardware.ComputerSystem;
 import oshi.hardware.HardwareAbstractionLayer;

File: oshi-demo/src/main/java/oshi/demo/DetectVM.java
Patch:
@@ -11,7 +11,7 @@
 import java.util.Properties;
 
 import oshi.SystemInfo;
-import oshi.demo.annotation.SuppressForbidden;
+import oshi.annotation.SuppressForbidden;
 import oshi.hardware.HardwareAbstractionLayer;
 import oshi.hardware.NetworkIF;
 import oshi.util.FileUtil;

File: oshi-demo/src/main/java/oshi/demo/DiskStoreForPath.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.List;
 
 import oshi.SystemInfo;
-import oshi.demo.annotation.SuppressForbidden;
+import oshi.annotation.SuppressForbidden;
 import oshi.hardware.HWDiskStore;
 import oshi.hardware.HWPartition;
 import oshi.hardware.HardwareAbstractionLayer;

File: oshi-demo/src/main/java/oshi/demo/Json.java
Patch:
@@ -8,7 +8,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 import oshi.SystemInfo;
-import oshi.demo.annotation.SuppressForbidden;
+import oshi.annotation.SuppressForbidden;
 import oshi.hardware.CentralProcessor;
 import oshi.hardware.GlobalMemory;
 import oshi.hardware.HardwareAbstractionLayer;

File: oshi-demo/src/main/java/oshi/demo/UserComInit.java
Patch:
@@ -8,7 +8,7 @@
 
 import com.sun.jna.platform.win32.COM.COMException;
 
-import oshi.demo.annotation.SuppressForbidden;
+import oshi.annotation.SuppressForbidden;
 import oshi.driver.windows.wmi.Win32OperatingSystem;
 import oshi.util.platform.windows.WmiQueryHandler;
 

File: oshi-demo/src/main/java/oshi/demo/jmx/JMXOshiAgentServer.java
Patch:
@@ -38,7 +38,7 @@
 import javax.management.remote.JMXServiceURL;
 
 import oshi.SystemInfo;
-import oshi.demo.annotation.SuppressForbidden;
+import oshi.annotation.SuppressForbidden;
 import oshi.demo.jmx.api.JMXOshiAgent;
 import oshi.demo.jmx.api.StrategyRegistrationPlatformMBeans;
 import oshi.demo.jmx.strategiesplatform.WindowsStrategyRegistrattionPlatform;

File: oshi-demo/src/main/java/oshi/demo/jmx/demo/Client.java
Patch:
@@ -20,7 +20,7 @@
 import javax.management.remote.JMXConnectorFactory;
 import javax.management.remote.JMXServiceURL;
 
-import oshi.demo.annotation.SuppressForbidden;
+import oshi.annotation.SuppressForbidden;
 
 public class Client {
     @SuppressForbidden(reason = "Using System.out in a demo class")

File: oshi-demo/src/main/java/oshi/demo/ComputerID.java
Patch:
@@ -9,6 +9,7 @@
 import java.util.Locale;
 
 import oshi.SystemInfo;
+import oshi.demo.annotation.SuppressForbidden;
 import oshi.hardware.CentralProcessor;
 import oshi.hardware.ComputerSystem;
 import oshi.hardware.HardwareAbstractionLayer;
@@ -31,6 +32,7 @@ public class ComputerID {
      *
      * @param args an array of {@link java.lang.String} objects.
      */
+    @SuppressForbidden(reason = "Using System.out in a demo class")
     public static void main(String[] args) {
         String unknownHash = String.format(Locale.ROOT, "%08x", Constants.UNKNOWN.hashCode());
 

File: oshi-demo/src/main/java/oshi/demo/DetectVM.java
Patch:
@@ -11,6 +11,7 @@
 import java.util.Properties;
 
 import oshi.SystemInfo;
+import oshi.demo.annotation.SuppressForbidden;
 import oshi.hardware.HardwareAbstractionLayer;
 import oshi.hardware.NetworkIF;
 import oshi.util.FileUtil;
@@ -47,6 +48,7 @@ public class DetectVM {
      *
      * @param args Arguments, ignored.
      */
+    @SuppressForbidden(reason = "Using System.out in a demo class")
     public static void main(String[] args) {
         String vmString = identifyVM();
 

File: oshi-demo/src/main/java/oshi/demo/DiskStoreForPath.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020-2022 The OSHI Project Contributors
+ * Copyright 2020-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.demo;
@@ -9,6 +9,7 @@
 import java.util.List;
 
 import oshi.SystemInfo;
+import oshi.demo.annotation.SuppressForbidden;
 import oshi.hardware.HWDiskStore;
 import oshi.hardware.HWPartition;
 import oshi.hardware.HardwareAbstractionLayer;
@@ -29,6 +30,7 @@ public class DiskStoreForPath {
      * @param args Optional file path
      * @throws URISyntaxException on invalid path
      */
+    @SuppressForbidden(reason = "Using System.out in a demo class")
     public static void main(String[] args) throws URISyntaxException {
         // Use the arg as a file path or get this class's path
         String filePath = args.length > 0 ? args[0]

File: oshi-demo/src/main/java/oshi/demo/Json.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019-2022 The OSHI Project Contributors
+ * Copyright 2019-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.demo;
@@ -8,6 +8,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 import oshi.SystemInfo;
+import oshi.demo.annotation.SuppressForbidden;
 import oshi.hardware.CentralProcessor;
 import oshi.hardware.GlobalMemory;
 import oshi.hardware.HardwareAbstractionLayer;
@@ -23,6 +24,7 @@ public class Json {
      *
      * @param args an array of {@link java.lang.String} objects.
      */
+    @SuppressForbidden(reason = "Using System.out in a demo class")
     public static void main(String[] args) {
         // Jackson ObjectMapper
         ObjectMapper mapper = new ObjectMapper();

File: oshi-core/src/test/java/oshi/util/FormatUtilTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2022 The OSHI Project Contributors
+ * Copyright 2016-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.util;
@@ -8,6 +8,7 @@
 import static org.hamcrest.Matchers.is;
 
 import java.text.DecimalFormatSymbols;
+import java.util.Locale;
 
 import org.junit.jupiter.api.Test;
 
@@ -16,7 +17,7 @@
  */
 class FormatUtilTest {
 
-    private static char DECIMAL_SEPARATOR = new DecimalFormatSymbols().getDecimalSeparator();
+    private static final char DECIMAL_SEPARATOR = DecimalFormatSymbols.getInstance(Locale.ROOT).getDecimalSeparator();
 
     /**
      * Test format bytes.

File: oshi-core/src/test/java/oshi/util/GlobalConfigTest.java
Patch:
@@ -100,7 +100,7 @@ void testLoad() {
     void testPropertyExceptionMessage() {
         set(PROPERTY, "test");
         assertThat(new PropertyException(PROPERTY).getMessage(),
-                is(format("Invalid property: \"%s\" = test", PROPERTY)));
+                is(format(Locale.ROOT, "Invalid property: \"%s\" = test", PROPERTY)));
     }
 
     private Properties propertiesWith(String value) {
@@ -146,11 +146,11 @@ GlobalConfigAsserter assertDefaultThat(Object expected, Object def) {
         }
 
         private String failureMessage(Object def) {
-            return format(FAILURE_MESSAGE_TEMPLATE, property, def);
+            return format(Locale.ROOT, FAILURE_MESSAGE_TEMPLATE, property, def);
         }
 
         private String defaultFailureMessage(Object def) {
-            return format(DEFAULT_FAILURE_MESSAGE_TEMPLATE, PROPERTY, def);
+            return format(Locale.ROOT, DEFAULT_FAILURE_MESSAGE_TEMPLATE, PROPERTY, def);
         }
     }
 }

File: oshi-demo/src/main/java/oshi/demo/gui/ProcessorPanel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020-2022 The OSHI Project Contributors
+ * Copyright 2020-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.demo.gui;
@@ -52,7 +52,7 @@ private void init(CentralProcessor processor) {
         GridBagConstraints procConstraints = (GridBagConstraints) sysConstraints.clone();
         procConstraints.gridx = 1;
 
-        Date date = Date.from(LocalDateTime.now().atZone(ZoneId.systemDefault()).toInstant());
+        Date date = Date.from(LocalDateTime.now(ZoneId.systemDefault()).atZone(ZoneId.systemDefault()).toInstant());
         DynamicTimeSeriesCollection sysData = new DynamicTimeSeriesCollection(1, 60, new Second());
         sysData.setTimeBase(new Second(date));
         sysData.addSeries(floatArrayPercent(cpuData(processor)), 0, "All cpus");

File: oshi-core/src/main/java/oshi/hardware/common/AbstractCentralProcessor.java
Patch:
@@ -14,6 +14,7 @@
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.function.Supplier;
@@ -387,7 +388,7 @@ protected static String createProcessorID(String stepping, String model, String
                 }
             }
         }
-        return String.format("%016X", processorIdBytes);
+        return String.format(Locale.ROOT, "%016X", processorIdBytes);
     }
 
     protected List<PhysicalProcessor> createProcListFromDmesg(List<LogicalProcessor> logProcs,

File: oshi-core/src/main/java/oshi/hardware/common/AbstractNetworkIF.java
Patch:
@@ -83,7 +83,7 @@ protected AbstractNetworkIF(NetworkInterface netint, String displayName) throws
             if (hwmac != null) {
                 List<String> octets = new ArrayList<>(6);
                 for (byte b : hwmac) {
-                    octets.add(String.format("%02x", b));
+                    octets.add(String.format(Locale.ROOT, "%02x", b));
                 }
                 this.mac = String.join(":", octets);
             } else {

File: oshi-core/src/main/java/oshi/hardware/common/AbstractPowerSource.java
Patch:
@@ -1,11 +1,12 @@
 /*
- * Copyright 2016-2022 The OSHI Project Contributors
+ * Copyright 2016-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.hardware.common;
 
 import java.time.LocalDate;
 import java.util.List;
+import java.util.Locale;
 
 import com.sun.jna.Platform;
 
@@ -287,7 +288,7 @@ private static String formatTimeRemaining(double timeInSeconds) {
         } else {
             int hours = (int) (timeInSeconds / 3600);
             int minutes = (int) (timeInSeconds % 3600 / 60);
-            formattedTimeRemaining = String.format("%d:%02d", hours, minutes);
+            formattedTimeRemaining = String.format(Locale.ROOT, "%d:%02d", hours, minutes);
         }
         return formattedTimeRemaining;
     }

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxCentralProcessor.java
Patch:
@@ -647,7 +647,7 @@ private static String createMIDR(String vendor, String stepping, String model, S
         // 31:24 - Implementer = vendor
         midrBytes |= ParseUtil.parseLastInt(vendor, 0) << 24;
 
-        return String.format("%08X", midrBytes);
+        return String.format(Locale.ROOT, "%08X", midrBytes);
     }
 
     @Override

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacCentralProcessor.java
Patch:
@@ -88,9 +88,9 @@ protected ProcessorIdentifier queryProcessorId() {
                 family = SysctlUtil.sysctl("hw.cpufamily", 0);
             }
             // Translate to output
-            cpuFamily = String.format("0x%08x", family);
+            cpuFamily = String.format(Locale.ROOT, "0x%08x", family);
             // Processor ID is an intel concept but CPU type + family conveys same info
-            processorID = String.format("%08x%08x", type, family);
+            processorID = String.format(Locale.ROOT, "%08x%08x", type, family);
         } else {
             // Processing an Intel chip
             cpuVendor = SysctlUtil.sysctl("machdep.cpu.vendor", "");
@@ -103,7 +103,7 @@ protected ProcessorIdentifier queryProcessorId() {
             long processorIdBits = 0L;
             processorIdBits |= SysctlUtil.sysctl("machdep.cpu.signature", 0);
             processorIdBits |= (SysctlUtil.sysctl("machdep.cpu.feature_bits", 0L) & 0xffffffff) << 32;
-            processorID = String.format("%016x", processorIdBits);
+            processorID = String.format(Locale.ROOT, "%016x", processorIdBits);
         }
         if (isArmCpu) {
             calculateNominalFrequencies();

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdCentralProcessor.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.regex.Matcher;
@@ -363,7 +364,7 @@ private static String getProcessorIDfromDmiDecode(long processorID) {
             }
         }
         // If we've gotten this far, dmidecode failed. Used the passed-in values
-        return String.format("%016X", processorID);
+        return String.format(Locale.ROOT, "%016X", processorID);
     }
 
     @Override

File: oshi-core/src/main/java/oshi/hardware/platform/unix/openbsd/OpenBsdCentralProcessor.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.function.Supplier;
@@ -74,7 +75,7 @@ protected ProcessorIdentifier queryProcessorId() {
         String machine = OpenBsdSysctlUtil.sysctl(mib, "");
         boolean cpu64bit = machine != null && machine.contains("64")
                 || ExecutingCommand.getFirstAnswer("uname -m").trim().contains("64");
-        String processorID = String.format("%08x%08x", cpufeature, cpuid);
+        String processorID = String.format(Locale.ROOT, "%08x%08x", cpufeature, cpuid);
 
         return new ProcessorIdentifier(cpuVendor, cpuName, cpuFamily, cpuModel, cpuStepping, processorID, cpu64bit,
                 cpuFreq);

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsCentralProcessor.java
Patch:
@@ -9,6 +9,7 @@
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 import java.util.function.Supplier;
@@ -180,7 +181,8 @@ protected Triplet<List<LogicalProcessor>, List<PhysicalProcessor>, List<Processo
                     curNode = node;
                     procNum = 0;
                 }
-                numaNodeProcToLogicalProcMap.put(String.format("%d,%d", logProc.getNumaNode(), procNum++), lp++);
+                numaNodeProcToLogicalProcMap.put(String.format(Locale.ROOT, "%d,%d", logProc.getNumaNode(), procNum++),
+                        lp++);
             }
             return procs;
         } else {

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsHWDiskStore.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020-2022 The OSHI Project Contributors
+ * Copyright 2020-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.hardware.platform.windows;
@@ -9,6 +9,7 @@
 import java.util.Comparator;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Objects;
 import java.util.regex.Matcher;
@@ -165,7 +166,7 @@ public static List<HWDiskStore> getDisks() {
             WmiResult<DiskDriveProperty> vals = Win32DiskDrive.queryDiskDrive(h);
             for (int i = 0; i < vals.getResultCount(); i++) {
                 WindowsHWDiskStore ds = new WindowsHWDiskStore(WmiUtil.getString(vals, DiskDriveProperty.NAME, i),
-                        String.format("%s %s", WmiUtil.getString(vals, DiskDriveProperty.MODEL, i),
+                        String.format(Locale.ROOT, "%s %s", WmiUtil.getString(vals, DiskDriveProperty.MODEL, i),
                                 WmiUtil.getString(vals, DiskDriveProperty.MANUFACTURER, i)).trim(),
                         // Most vendors store serial # as a hex string; convert
                         ParseUtil.hexStringToString(WmiUtil.getString(vals, DiskDriveProperty.SERIALNUMBER, i)),

File: oshi-core/src/main/java/oshi/software/os/OSSession.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020-2022 The OSHI Project Contributors
+ * Copyright 2020-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.software.os;
@@ -8,6 +8,7 @@
 import java.time.LocalDateTime;
 import java.time.ZoneId;
 import java.time.format.DateTimeFormatter;
+import java.util.Locale;
 
 import oshi.annotation.concurrent.Immutable;
 
@@ -75,6 +76,6 @@ public String toString() {
         if (!host.isEmpty() && !host.equals("::") && !host.equals("0.0.0.0")) {
             hostStr = ", (" + host + ")";
         }
-        return String.format("%s, %s, %s%s", userName, terminalDevice, loginStr, hostStr);
+        return String.format(Locale.ROOT, "%s, %s, %s%s", userName, terminalDevice, loginStr, hostStr);
     }
 }

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxOperatingSystem.java
Patch:
@@ -274,7 +274,7 @@ private static Map<Integer, Integer> getParentPidsFromProcFiles(File[] pidFiles)
     }
 
     private static int getParentPidFromProcFile(int pid) {
-        String stat = FileUtil.getStringFromFile(String.format("/proc/%d/stat", pid));
+        String stat = FileUtil.getStringFromFile(String.format(Locale.ROOT, "/proc/%d/stat", pid));
         // A race condition may leave us with an empty string
         if (stat.isEmpty()) {
             return 0;

File: oshi-core/src/main/java/oshi/software/os/unix/freebsd/FreeBsdOSProcess.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020-2022 The OSHI Project Contributors
+ * Copyright 2020-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.software.os.unix.freebsd;
@@ -19,6 +19,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Optional;
 import java.util.function.Predicate;
@@ -439,7 +440,7 @@ private boolean updateAttributes(Map<PsKeywords, String> psMap) {
     }
 
     private long getProcessOpenFileLimit(long processId, int index) {
-        final String limitsPath = String.format("/proc/%d/limits", processId);
+        final String limitsPath = String.format(Locale.ROOT, "/proc/%d/limits", processId);
         if (!Files.exists(Paths.get(limitsPath))) {
             return -1; // not supported
         }

File: oshi-core/src/main/java/oshi/software/os/unix/solaris/SolarisOSProcess.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020-2022 The OSHI Project Contributors
+ * Copyright 2020-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.software.os.unix.solaris;
@@ -23,6 +23,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Optional;
 import java.util.function.Supplier;
@@ -330,7 +331,7 @@ public long getAffinityMask() {
     @Override
     public List<OSThread> getThreadDetails() {
         // Get process files in proc
-        File directory = new File(String.format("/proc/%d/lwp", getProcessID()));
+        File directory = new File(String.format(Locale.ROOT, "/proc/%d/lwp", getProcessID()));
         File[] numericFiles = directory.listFiles(file -> Constants.DIGITS.matcher(file.getName()).matches());
         if (numericFiles == null) {
             return Collections.emptyList();

File: oshi-core/src/main/java/oshi/util/ParseUtil.java
Patch:
@@ -814,7 +814,7 @@ public static long filetimeToUtcMs(long filetime, boolean local) {
     public static String parseMmDdYyyyToYyyyMmDD(String dateString) {
         try {
             // Date is MM-DD-YYYY, convert to YYYY-MM-DD
-            return String.format("%s-%s-%s", dateString.substring(6, 10), dateString.substring(0, 2),
+            return String.format(Locale.ROOT, "%s-%s-%s", dateString.substring(6, 10), dateString.substring(0, 2),
                     dateString.substring(3, 5));
         } catch (StringIndexOutOfBoundsException e) {
             return dateString;

File: oshi-core/src/main/java/oshi/util/platform/windows/PerfCounterQueryHandler.java
Patch:
@@ -1,10 +1,11 @@
 /*
- * Copyright 2019-2022 The OSHI Project Contributors
+ * Copyright 2019-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.util.platform.windows;
 
 import java.util.HashMap;
+import java.util.Locale;
 import java.util.Map;
 
 import org.slf4j.Logger;
@@ -132,7 +133,7 @@ public long queryCounter(PerfCounter counter) {
         if (value < 0) {
             if (LOG.isWarnEnabled()) {
                 LOG.warn("Error querying counter {}: {}", counter.getCounterPath(),
-                        String.format(FormatUtil.formatError((int) value)));
+                        String.format(Locale.ROOT, FormatUtil.formatError((int) value)));
             }
             return 0L;
         }

File: oshi-core/src/test/java/oshi/driver/unix/aix/PsInfoTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2022 The OSHI Project Contributors
+ * Copyright 2022-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.driver.unix.aix;
@@ -10,6 +10,7 @@
 
 import java.io.File;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 
 import org.junit.jupiter.api.Test;
@@ -37,7 +38,7 @@ void testQueryPsInfo() {
         Pair<List<String>, Map<String, String>> argsEnv = PsInfo.queryArgsEnv(pid, psinfo);
         assertThat("Arg list size should match argc", argsEnv.getA().size(), is(addrs.getA().intValue()));
 
-        File directory = new File(String.format("/proc/%d/lwp", pid));
+        File directory = new File(String.format(Locale.ROOT, "/proc/%d/lwp", pid));
         File[] numericFiles = directory.listFiles(file -> Constants.DIGITS.matcher(file.getName()).matches());
         assertNotNull(numericFiles);
         for (File lwpidFile : numericFiles) {

File: oshi-core/src/test/java/oshi/driver/unix/solaris/PsInfoTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2022 The OSHI Project Contributors
+ * Copyright 2022-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.driver.unix.solaris;
@@ -9,6 +9,7 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 import java.io.File;
+import java.util.Locale;
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledOnOs;
@@ -27,7 +28,7 @@ void testQueryPsInfo() {
         int pid = new SystemInfo().getOperatingSystem().getProcessId();
         SolarisPsInfo psinfo = PsInfo.queryPsInfo(pid);
         assertThat("Process ID in structure should match PID", psinfo.pr_pid, is(pid));
-        File directory = new File(String.format("/proc/%d/lwp", pid));
+        File directory = new File(String.format(Locale.ROOT, "/proc/%d/lwp", pid));
         File[] numericFiles = directory.listFiles(file -> Constants.DIGITS.matcher(file.getName()).matches());
         assertNotNull(numericFiles);
         for (File lwpidFile : numericFiles) {

File: oshi-core/src/test/java/oshi/software/os/OperatingSystemTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2022 The OSHI Project Contributors
+ * Copyright 2016-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.software.os;
@@ -25,6 +25,7 @@
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 
@@ -427,7 +428,7 @@ void testGetSessions() {
                     is(not(emptyString())));
             // Login time
             assertThat(
-                    String.format("Logon time should be before now: %d < %d%n%s", sess.getLoginTime(),
+                    String.format(Locale.ROOT, "Logon time should be before now: %d < %d%n%s", sess.getLoginTime(),
                             System.currentTimeMillis(), sess),
                     sess.getLoginTime(), is(lessThanOrEqualTo(System.currentTimeMillis())));
             assertThat("Session host shouldn't be null", sess.getHost(), is(notNullValue()));

File: oshi-core/src/test/java/oshi/util/GlobalConfigTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019-2022 The OSHI Project Contributors
+ * Copyright 2019-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.util;
@@ -16,6 +16,7 @@
 import static oshi.util.GlobalConfig.set;
 import static oshi.util.GlobalConfigTest.GlobalConfigAsserter.asserter;
 
+import java.util.Locale;
 import java.util.Properties;
 
 import org.junit.jupiter.api.BeforeEach;
@@ -85,7 +86,7 @@ void testRemove() {
         String removed = "test";
         set(PROPERTY, removed);
         remove(PROPERTY);
-        asserter(PROPERTY).assertThat(format("Should have removed property %s", removed), "123", "123");
+        asserter(PROPERTY).assertThat(format(Locale.ROOT, "Should have removed property %s", removed), "123", "123");
     }
 
     @Test

File: oshi-core/src/main/java/oshi/hardware/CentralProcessor.java
Patch:
@@ -7,6 +7,7 @@
 import static oshi.util.Memoizer.memoize;
 
 import java.util.List;
+import java.util.Locale;
 import java.util.Objects;
 import java.util.Properties;
 import java.util.function.Supplier;
@@ -554,7 +555,7 @@ public enum Type {
 
             @Override
             public String toString() {
-                return name().substring(0, 1) + name().substring(1).toLowerCase();
+                return name().substring(0, 1) + name().substring(1).toLowerCase(Locale.ROOT);
             }
         }
 
@@ -822,7 +823,7 @@ private String queryMicroarchitecture() {
             // Intel is default, no prefix
             StringBuilder sb = new StringBuilder();
             // AMD and ARM properties have prefix
-            String ucVendor = this.cpuVendor.toUpperCase();
+            String ucVendor = this.cpuVendor.toUpperCase(Locale.ROOT);
             if (ucVendor.contains("AMD")) {
                 sb.append("amd.");
             } else if (ucVendor.contains("ARM")) {

File: oshi-core/src/main/java/oshi/hardware/common/AbstractNetworkIF.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020-2022 The OSHI Project Contributors
+ * Copyright 2020-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.hardware.common;
@@ -15,6 +15,7 @@
 import java.util.Collections;
 import java.util.Enumeration;
 import java.util.List;
+import java.util.Locale;
 import java.util.Properties;
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
@@ -209,7 +210,7 @@ public Short[] getPrefixLengths() {
     @Override
     public boolean isKnownVmMacAddr() {
         String oui = getMacaddr().length() > 7 ? getMacaddr().substring(0, 8) : getMacaddr();
-        return this.vmMacAddrProps.get().containsKey(oui.toUpperCase());
+        return this.vmMacAddrProps.get().containsKey(oui.toUpperCase(Locale.ROOT));
     }
 
     private static Properties queryVmMacAddrProps() {

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxCentralProcessor.java
Patch:
@@ -95,7 +95,7 @@ protected ProcessorIdentifier queryProcessorId() {
                 }
                 break;
             case "flags":
-                flags = splitLine[1].toLowerCase().split(" ");
+                flags = splitLine[1].toLowerCase(Locale.ROOT).split(" ");
                 for (String flag : flags) {
                     if ("lm".equals(flag)) {
                         cpu64bit = true;
@@ -299,7 +299,7 @@ private static LogicalProcessor getLogicalProcessorFromSyspath(String syspath, S
 
     private static ProcessorCache.Type parseCacheType(String type) {
         try {
-            return ProcessorCache.Type.valueOf(type.toUpperCase());
+            return ProcessorCache.Type.valueOf(type.toUpperCase(Locale.ROOT));
         } catch (IllegalArgumentException e) {
             return ProcessorCache.Type.UNIFIED;
         }
@@ -478,7 +478,7 @@ public long[] queryCurrentFreq() {
         List<String> cpuInfo = FileUtil.readFile(CPUINFO);
         int proc = 0;
         for (String s : cpuInfo) {
-            if (s.toLowerCase().contains("cpu mhz")) {
+            if (s.toLowerCase(Locale.ROOT).contains("cpu mhz")) {
                 freqs[proc] = Math.round(ParseUtil.parseLastDouble(s, 0d) * 1_000_000d);
                 if (++proc >= freqs.length) {
                     break;

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacGraphicsCard.java
Patch:
@@ -1,11 +1,12 @@
 /*
- * Copyright 2020-2022 The OSHI Project Contributors
+ * Copyright 2020-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.hardware.platform.mac;
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Locale;
 
 import oshi.annotation.concurrent.Immutable;
 import oshi.hardware.GraphicsCard;
@@ -50,7 +51,7 @@ public static List<GraphicsCard> getGraphicsCards() {
         for (String line : sp) {
             String[] split = line.trim().split(":", 2);
             if (split.length == 2) {
-                String prefix = split[0].toLowerCase();
+                String prefix = split[0].toLowerCase(Locale.ROOT);
                 if (prefix.equals("chipset model")) {
                     // Save previous card
                     if (cardNum++ > 0) {

File: oshi-core/src/main/java/oshi/hardware/platform/unix/aix/AixGraphicsCard.java
Patch:
@@ -1,11 +1,12 @@
 /*
- * Copyright 2020-2022 The OSHI Project Contributors
+ * Copyright 2020-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.hardware.platform.unix.aix;
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Locale;
 import java.util.function.Supplier;
 
 import oshi.annotation.concurrent.Immutable;
@@ -51,7 +52,7 @@ public static List<GraphicsCard> getGraphicsCards(Supplier<List<String>> lscfg)
             String s = line.trim();
             if (s.startsWith("Name:") && s.contains("display")) {
                 display = true;
-            } else if (display && s.toLowerCase().contains("graphics")) {
+            } else if (display && s.toLowerCase(Locale.ROOT).contains("graphics")) {
                 name = s;
             } else if (display && name != null) {
                 if (s.startsWith("Manufacture ID")) {

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsSensors.java
Patch:
@@ -1,9 +1,10 @@
 /*
- * Copyright 2016-2022 The OSHI Project Contributors
+ * Copyright 2016-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.hardware.platform.windows;
 
+import java.util.Locale;
 import java.util.Objects;
 
 import org.slf4j.Logger;
@@ -191,7 +192,7 @@ private static double getVoltsFromOHM() {
                 String cpuIdentifier = null;
                 for (int i = 0; i < ohmHardware.getResultCount(); i++) {
                     String id = WmiUtil.getString(ohmHardware, IdentifierProperty.IDENTIFIER, i);
-                    if (id.toLowerCase().contains("cpu")) {
+                    if (id.toLowerCase(Locale.ROOT).contains("cpu")) {
                         cpuIdentifier = id;
                         break;
                     }

File: oshi-core/src/main/java/oshi/software/os/mac/MacFileSystem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2022 The OSHI Project Contributors
+ * Copyright 2016-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.software.os.mac;
@@ -10,6 +10,7 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
@@ -222,7 +223,7 @@ private static List<OSFileStore> getFileStoreMatching(String nameToMatch, boolea
                                     // Now get the UUID
                                     uuid = fsEntry.getStringProperty("UUID");
                                     if (uuid != null) {
-                                        uuid = uuid.toLowerCase();
+                                        uuid = uuid.toLowerCase(Locale.ROOT);
                                     }
                                     fsEntry.release();
                                 }

File: oshi-core/src/main/java/oshi/software/os/mac/MacOSProcess.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Collections;
 import java.util.LinkedHashMap;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
@@ -67,7 +68,7 @@ public class MacOSProcess extends AbstractOSProcess {
             IORegistryEntry cpu = iter.next();
             while (cpu != null) {
                 try {
-                    String s = cpu.getName().toLowerCase();
+                    String s = cpu.getName().toLowerCase(Locale.ROOT);
                     if (s.startsWith("cpu") && s.length() > 3) {
                         byte[] data = cpu.getByteArrayProperty("timebase-frequency");
                         if (data != null) {

File: oshi-demo/src/main/java/oshi/demo/ComputerID.java
Patch:
@@ -6,6 +6,7 @@
 
 import java.util.Arrays;
 import java.util.List;
+import java.util.Locale;
 
 import oshi.SystemInfo;
 import oshi.hardware.CentralProcessor;
@@ -58,7 +59,7 @@ public static String getComputerIdentifier() {
         String vendor = operatingSystem.getManufacturer();
         String processorSerialNumber = computerSystem.getSerialNumber();
         String uuid = computerSystem.getHardwareUUID();
-        if (NON_UNIQUE_UUIDS.contains(uuid.toUpperCase())) {
+        if (NON_UNIQUE_UUIDS.contains(uuid.toUpperCase(Locale.ROOT))) {
             uuid = Constants.UNKNOWN;
         }
         String processorIdentifier = centralProcessor.getProcessorIdentifier().getIdentifier();

File: oshi-demo/src/main/java/oshi/demo/DetectVM.java
Patch:
@@ -1,11 +1,12 @@
 /*
- * Copyright 2019-2022 The OSHI Project Contributors
+ * Copyright 2019-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.demo;
 
 import java.util.HashMap;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Properties;
 
@@ -75,7 +76,7 @@ public static String identifyVM() {
         // Try well known MAC addresses
         List<NetworkIF> nifs = hw.getNetworkIFs();
         for (NetworkIF nif : nifs) {
-            String mac = nif.getMacaddr().toUpperCase();
+            String mac = nif.getMacaddr().toUpperCase(Locale.ROOT);
             String oui = mac.length() > 7 ? mac.substring(0, 8) : mac;
             if (vmMacAddressProps.containsKey(oui)) {
                 return vmMacAddressProps.getProperty(oui);

File: oshi-core/src/main/java/oshi/util/platform/linux/ProcPath.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020-2022 The OSHI Project Contributors
+ * Copyright 2020-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.util.platform.linux;
@@ -48,6 +48,7 @@ public final class ProcPath {
     public static final String TASK_COMM = TASK_PATH + "/%d/comm";
     public static final String TASK_STATUS = TASK_PATH + "/%d/status";
     public static final String TASK_STAT = TASK_PATH + "/%d/stat";
+    public static final String THREAD_SELF = PROC + "/thread-self";
     public static final String UPTIME = PROC + "/uptime";
     public static final String VERSION = PROC + "/version";
     public static final String VMSTAT = PROC + "/vmstat";

File: oshi-core/src/main/java/oshi/SystemInfo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2022 The OSHI Project Contributors
+ * Copyright 2016-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi;

File: oshi-core/src/main/java/oshi/driver/linux/Who.java
Patch:
@@ -1,11 +1,12 @@
 /*
- * Copyright 2020-2022 The OSHI Project Contributors
+ * Copyright 2020-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.driver.linux;
 
 import static oshi.jna.platform.unix.CLibrary.LOGIN_PROCESS;
 import static oshi.jna.platform.unix.CLibrary.USER_PROCESS;
+import static oshi.util.Util.isSessionValid;
 
 import java.nio.charset.Charset;
 import java.util.ArrayList;
@@ -49,7 +50,7 @@ public static synchronized List<OSSession> queryUtxent() {
                     String host = ParseUtil.parseUtAddrV6toIP(ut.ut_addr_v6);
                     long loginTime = ut.ut_tv.tv_sec * 1000L + ut.ut_tv.tv_usec / 1000L;
                     // Sanity check. If errors, default to who command line
-                    if (user.isEmpty() || device.isEmpty() || loginTime < 0 || loginTime > System.currentTimeMillis()) {
+                    if (!isSessionValid(user, device, loginTime)) {
                         return oshi.driver.unix.Who.queryWho();
                     }
                     whoList.add(new OSSession(user, device, loginTime, host));

File: oshi-core/src/main/java/oshi/driver/mac/Who.java
Patch:
@@ -1,11 +1,12 @@
 /*
- * Copyright 2020-2022 The OSHI Project Contributors
+ * Copyright 2020-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.driver.mac;
 
 import static oshi.jna.platform.unix.CLibrary.LOGIN_PROCESS;
 import static oshi.jna.platform.unix.CLibrary.USER_PROCESS;
+import static oshi.util.Util.isSessionValid;
 
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
@@ -47,7 +48,7 @@ public static synchronized List<OSSession> queryUtxent() {
                     String host = Native.toString(ut.ut_host, StandardCharsets.US_ASCII);
                     long loginTime = ut.ut_tv.tv_sec.longValue() * 1000L + ut.ut_tv.tv_usec / 1000L;
                     // Sanity check. If errors, default to who command line
-                    if (user.isEmpty() || device.isEmpty() || loginTime < 0 || loginTime > System.currentTimeMillis()) {
+                    if (!isSessionValid(user, device, loginTime)) {
                         return oshi.driver.unix.Who.queryWho();
                     }
                     whoList.add(new OSSession(user, device, loginTime, host));

File: oshi-core/src/main/java/oshi/driver/unix/freebsd/Who.java
Patch:
@@ -1,11 +1,12 @@
 /*
- * Copyright 2020-2022 The OSHI Project Contributors
+ * Copyright 2020-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.driver.unix.freebsd;
 
 import static oshi.jna.platform.unix.CLibrary.LOGIN_PROCESS;
 import static oshi.jna.platform.unix.CLibrary.USER_PROCESS;
+import static oshi.util.Util.isSessionValid;
 
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
@@ -48,7 +49,7 @@ public static synchronized List<OSSession> queryUtxent() {
                     String host = Native.toString(ut.ut_host, StandardCharsets.US_ASCII);
                     long loginTime = ut.ut_tv.tv_sec * 1000L + ut.ut_tv.tv_usec / 1000L;
                     // Sanity check. If errors, default to who command line
-                    if (user.isEmpty() || device.isEmpty() || loginTime < 0 || loginTime > System.currentTimeMillis()) {
+                    if (!isSessionValid(user, device, loginTime)) {
                         return oshi.driver.unix.Who.queryWho();
                     }
                     whoList.add(new OSSession(user, device, loginTime, host));

File: oshi-core/src/main/java/oshi/driver/unix/solaris/Who.java
Patch:
@@ -1,11 +1,12 @@
 /*
- * Copyright 2020-2022 The OSHI Project Contributors
+ * Copyright 2020-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.driver.unix.solaris;
 
 import static oshi.jna.platform.unix.CLibrary.LOGIN_PROCESS;
 import static oshi.jna.platform.unix.CLibrary.USER_PROCESS;
+import static oshi.util.Util.isSessionValid;
 
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
@@ -48,7 +49,7 @@ public static synchronized List<OSSession> queryUtxent() {
                     String host = Native.toString(ut.ut_host, StandardCharsets.US_ASCII);
                     long loginTime = ut.ut_tv.tv_sec.longValue() * 1000L + ut.ut_tv.tv_usec.longValue() / 1000L;
                     // Sanity check. If errors, default to who command line
-                    if (user.isEmpty() || device.isEmpty() || loginTime < 0 || loginTime > System.currentTimeMillis()) {
+                    if (!isSessionValid(user, device, loginTime)) {
                         return oshi.driver.unix.Who.queryWho();
                     }
                     whoList.add(new OSSession(user, device, loginTime, host));

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsGlobalMemory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2022 The OSHI Project Contributors
+ * Copyright 2016-2023 The OSHI Project Contributors
  * SPDX-License-Identifier: MIT
  */
 package oshi.hardware.platform.windows;

File: oshi-core/src/test/java/oshi/hardware/CentralProcessorTest.java
Patch:
@@ -85,7 +85,7 @@ void testTicks() {
         assertThat("System's load averages length for 3 elements should equal 3", p.getSystemLoadAverage(3).length,
                 is(3));
 
-        assertThat("Cpu load between ticks should equal the logical processor count", p.getLogicalProcessorCount(),
+        assertThat("Cpu load between ticks size should equal the tick array size", procTicks.length,
                 is(p.getProcessorCpuLoadBetweenTicks(procTicks).length));
         for (int cpu = 0; cpu < p.getLogicalProcessorCount(); cpu++) {
             assertThat("Cpu number " + cpu + "'s load between ticks should be inclusively between 0 and 1",
@@ -100,12 +100,12 @@ void testTicks() {
 
     @Test
     void testDelayTicks() {
+        long[][] procTicks = p.getProcessorCpuLoadTicks();
         assertThat("System's cpu load should be inclusively between 0 and 1", p.getSystemCpuLoad(500),
                 is(both(greaterThanOrEqualTo(0d)).and(lessThanOrEqualTo(1d))));
 
         double[] procCpuLoad = p.getProcessorCpuLoad(500);
-        assertThat("Cpu load array size should equal the logical processor count", p.getLogicalProcessorCount(),
-                is(procCpuLoad.length));
+        assertThat("Cpu load array size should equal the tick array size", procTicks.length, is(procCpuLoad.length));
         for (int cpu = 0; cpu < p.getLogicalProcessorCount(); cpu++) {
             assertThat("Cpu number " + cpu + "'s load should be inclusively between 0 and 1", procCpuLoad[cpu],
                     is(both(greaterThanOrEqualTo(0d)).and(lessThanOrEqualTo(1d))));

File: oshi-core/src/test/java/oshi/SystemInfoTest.java
Patch:
@@ -299,6 +299,8 @@ private static void printProcesses(OperatingSystem os, GlobalMemory memory) {
         // current process will never be null. Other code should check for null here
         oshi.add(
                 "My PID: " + myProc.getProcessID() + " with affinity " + Long.toBinaryString(myProc.getAffinityMask()));
+        oshi.add("My TID: " + os.getThreadId() + " with details " + os.getCurrentThread());
+
         oshi.add("Processes: " + os.getProcessCount() + ", Threads: " + os.getThreadCount());
         // Sort by highest CPU
         List<OSProcess> procs = os.getProcesses(ProcessFiltering.ALL_PROCESSES, ProcessSorting.CPU_DESC, 5);

File: oshi-core/src/main/java/oshi/util/platform/linux/ProcPath.java
Patch:
@@ -43,6 +43,7 @@ public final class ProcPath {
     public static final String SELF_STAT = PROC + "/self/stat";
     public static final String STAT = PROC + "/stat";
     public static final String SYS_FS_FILE_NR = PROC + "/sys/fs/file-nr";
+    public static final String SYS_FS_FILE_MAX = PROC + "/sys/fs/file-max";
     public static final String TASK_PATH = PROC + "/%d/task";
     public static final String TASK_COMM = TASK_PATH + "/%d/comm";
     public static final String TASK_STATUS = TASK_PATH + "/%d/status";

File: oshi-core/src/main/java/oshi/hardware/PhysicalMemory.java
Patch:
@@ -51,7 +51,7 @@ public long getCapacity() {
      * <p>
      * For DDR memory, this is the data transfer rate, which is a multiple of the actual bus clock speed.
      *
-     * @return the clock speed
+     * @return the clock speed, if avaialable. If unknown, returns -1.
      */
     public long getClockSpeed() {
         return clockSpeed;

File: oshi-core/src/test/java/oshi/TestConstants.java
Patch:
@@ -8,6 +8,6 @@ public final class TestConstants {
     private TestConstants() {
     }
 
-    public static final String UUID_REGEX = "\\b[0-9a-f]{8}\\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\\b[0-9a-f]{12}\\b";
+    public static final String UUID_REGEX = "\\b[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-\\b[0-9a-fA-F]{12}\\b";
 
 }

File: oshi-core/src/test/java/oshi/hardware/GlobalMemoryTest.java
Patch:
@@ -53,7 +53,7 @@ void testPhysicalMemory() {
         for (PhysicalMemory m : pm) {
             assertThat("Bank label shouldn't be null", m.getBankLabel(), is(notNullValue()));
             assertThat("Capacity should be nonnegative", m.getCapacity(), is(greaterThanOrEqualTo(0L)));
-            assertThat("Speed should be nonnegative", m.getClockSpeed(), is(greaterThanOrEqualTo(0L)));
+            assertThat("Speed should be nonnegative or -1", m.getClockSpeed(), is(greaterThanOrEqualTo(-1L)));
             assertThat("Manufacturer shouldn't be null", m.getManufacturer(), is(notNullValue()));
             assertThat("Memory type shouldn't be null", m.getMemoryType(), is(notNullValue()));
         }

File: oshi-core/src/main/java/oshi/util/Memoizer.java
Patch:
@@ -66,9 +66,9 @@ public static long defaultExpiration() {
     public static <T> Supplier<T> memoize(Supplier<T> original, long ttlNanos) {
         // Adapted from Guava's ExpiringMemoizingSupplier
         return new Supplier<T>() {
-            final Supplier<T> delegate = original;
-            volatile T value; // NOSONAR squid:S3077
-            volatile long expirationNanos;
+            private final Supplier<T> delegate = original;
+            private volatile T value; // NOSONAR squid:S3077
+            private volatile long expirationNanos;
 
             @Override
             public T get() {

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsCentralProcessor.java
Patch:
@@ -63,6 +63,7 @@
 import oshi.util.ParseUtil;
 import oshi.util.platform.windows.WmiUtil;
 import oshi.util.tuples.Pair;
+import oshi.util.tuples.Triplet;
 
 /**
  * A CPU, representing all of a system's processors. It may contain multiple
@@ -181,9 +182,9 @@ private static String parseIdentifier(String identifier, String key) {
     }
 
     @Override
-    protected Pair<List<LogicalProcessor>, List<PhysicalProcessor>> initProcessorCounts() {
+    protected Triplet<List<LogicalProcessor>, List<PhysicalProcessor>, List<ProcessorCache>> initProcessorCounts() {
         if (VersionHelpers.IsWindows7OrGreater()) {
-            Pair<List<LogicalProcessor>, List<PhysicalProcessor>> procs = LogicalProcessorInformation
+            Triplet<List<LogicalProcessor>, List<PhysicalProcessor>, List<ProcessorCache>> procs = LogicalProcessorInformation
                     .getLogicalProcessorInformationEx();
             // Save numaNode,Processor lookup for future PerfCounter instance lookup
             // The processor number is based on the Processor Group, so we keep a separate

File: oshi-core/src/main/java/oshi/util/ParseUtil.java
Patch:
@@ -66,8 +66,8 @@ public final class ParseUtil {
     /*
      * Used for matching
      */
-    private static final Pattern HERTZ_PATTERN = Pattern.compile("(\\d+(.\\d+)?) ?([kMGT]?Hz).*");
-    private static final Pattern BYTES_PATTERN = Pattern.compile("(\\d+) ?([kMGT]?B).*");
+    private static final Pattern HERTZ_PATTERN = Pattern.compile("(\\d+(.\\d+)?) ?([kKMGT]?Hz).*");
+    private static final Pattern BYTES_PATTERN = Pattern.compile("(\\d+) ?([kKMGT]?B?).*");
     private static final Pattern UNITS_PATTERN = Pattern.compile("(\\d+(.\\d+)?)[\\s]?([kKMGT])?");
 
     /*

File: oshi-core/src/main/java/oshi/SystemInfo.java
Patch:
@@ -103,6 +103,7 @@ private static OperatingSystem createOperatingSystem() {
         case WINDOWS:
             return new WindowsOperatingSystem();
         case LINUX:
+        case ANDROID:
             return new LinuxOperatingSystem();
         case MACOS:
             return new MacOperatingSystem();
@@ -134,6 +135,7 @@ private static HardwareAbstractionLayer createHardware() {
         case WINDOWS:
             return new WindowsHardwareAbstractionLayer();
         case LINUX:
+        case ANDROID:
             return new LinuxHardwareAbstractionLayer();
         case MACOS:
             return new MacHardwareAbstractionLayer();

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxOperatingSystem.java
Patch:
@@ -91,7 +91,7 @@ public class LinuxOperatingSystem extends AbstractOperatingSystem {
         Udev lib = null;
         try {
             lib = Udev.INSTANCE;
-        } catch (UnsatisfiedLinkError e) {
+        } catch (UnsatisfiedLinkError | NoClassDefFoundError e) {
             // no udev
         }
         HAS_UDEV = lib != null;

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdCentralProcessor.java
Patch:
@@ -149,7 +149,7 @@ protected Pair<List<LogicalProcessor>, List<PhysicalProcessor>> initProcessorCou
     }
 
     private static List<LogicalProcessor> parseTopology() {
-        String[] topology = BsdSysctlUtil.sysctl("kern.sched.topology_spec", "").split("\\n|\\r");
+        String[] topology = BsdSysctlUtil.sysctl("kern.sched.topology_spec", "").split("[\\n\\r]");
         /*-
          * Sample output:
          *

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxCentralProcessor.java
Patch:
@@ -192,7 +192,7 @@ protected Pair<List<LogicalProcessor>, List<PhysicalProcessor>> initProcessorCou
         return new Pair<>(logProcs, physProcs);
     }
 
-    private Triplet<List<LogicalProcessor>, Map<Integer, Integer>, Map<Integer, String>> readTopologyFromUdev() {
+    private static Triplet<List<LogicalProcessor>, Map<Integer, Integer>, Map<Integer, String>> readTopologyFromUdev() {
         List<LogicalProcessor> logProcs = new ArrayList<>();
         Map<Integer, Integer> coreEfficiencyMap = new HashMap<>();
         Map<Integer, String> modAliasMap = new HashMap<>();
@@ -225,7 +225,7 @@ private Triplet<List<LogicalProcessor>, Map<Integer, Integer>, Map<Integer, Stri
         return new Triplet<>(logProcs, coreEfficiencyMap, modAliasMap);
     }
 
-    private Triplet<List<LogicalProcessor>, Map<Integer, Integer>, Map<Integer, String>> readTopologyFromSysfs() {
+    private static Triplet<List<LogicalProcessor>, Map<Integer, Integer>, Map<Integer, String>> readTopologyFromSysfs() {
         List<LogicalProcessor> logProcs = new ArrayList<>();
         Map<Integer, Integer> coreEfficiencyMap = new HashMap<>();
         Map<Integer, String> modAliasMap = new HashMap<>();

File: oshi-core/src/main/java/oshi/driver/windows/registry/HkeyPerformanceDataUtil.java
Patch:
@@ -68,7 +68,7 @@ public final class HkeyPerformanceDataUtil {
     private static final String COUNTER = "Counter";
     private static final Map<String, Integer> COUNTER_INDEX_MAP = mapCounterIndicesFromRegistry();
 
-    private static int maxPerfBufferSize = 4096;
+    private static int maxPerfBufferSize = 16384;
 
     private HkeyPerformanceDataUtil() {
     }
@@ -133,7 +133,7 @@ public static <T extends Enum<T> & PdhCounterWildcardProperty> Triplet<List<Map<
         for (int obj = 0; obj < perfData.NumObjectTypes; obj++) {
             PERF_OBJECT_TYPE perfObject = new PERF_OBJECT_TYPE(pPerfData.share(perfObjectOffset));
             // Some counters will require multiple objects so we iterate until we find the
-            // right one. e.g. Process (230) is by iteself but Thread (232) has Process
+            // right one. e.g. Process (230) is by itself but Thread (232) has Process
             // object first
             if (perfObject.ObjectNameTitleIndex == COUNTER_INDEX_MAP.get(objectName).intValue()) {
                 // We found a matching object.
@@ -275,7 +275,7 @@ private static synchronized Memory readPerfDataBuffer(String objectName) {
         }
         // Grow buffer as needed to fit the data
         while (ret == WinError.ERROR_MORE_DATA) {
-            maxPerfBufferSize += 4096;
+            maxPerfBufferSize += 8192;
             lpcbData.setValue(maxPerfBufferSize);
             pPerfData = new Memory(maxPerfBufferSize);
             ret = Advapi32.INSTANCE.RegQueryValueEx(WinReg.HKEY_PERFORMANCE_DATA, objectIndexStr, 0, null, pPerfData,

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxCentralProcessor.java
Patch:
@@ -247,7 +247,7 @@ private Triplet<List<LogicalProcessor>, Map<Integer, Integer>, Map<Integer, Stri
         return new Triplet<>(logProcs, coreEfficiencyMap, modAliasMap);
     }
 
-    private LogicalProcessor getLogicalProcessorFromSyspath(String syspath, String modAlias,
+    private static LogicalProcessor getLogicalProcessorFromSyspath(String syspath, String modAlias,
             Map<Integer, Integer> coreEfficiencyMap, Map<Integer, String> modAliasMap) {
         int processor = ParseUtil.getFirstIntValue(syspath);
         int coreId = FileUtil.getIntFromFile(syspath + "/topology/core_id");

File: oshi-core/src/main/java/oshi/driver/windows/LogicalProcessorInformation.java
Patch:
@@ -102,10 +102,10 @@ public static Pair<List<LogicalProcessor>, List<PhysicalProcessor>> getLogicalPr
         }
         // Windows doesn't define core and package numbers, so we define our own for
         // consistent use across the API. Here we sort so core and package numbers
-        // increment consistently with processor umbers/bitmasks, ordered in groups.
-        cores.sort(Comparator.comparing(c -> c.group * 64L + c.mask.longValue()));
+        // increment consistently with processor numbers/bitmasks, ordered in groups.
+        cores.sort(Comparator.comparing(c -> c.group * 64L + Long.numberOfTrailingZeros(c.mask.longValue())));
         // if package in multiple groups will still use first group for sorting
-        packages.sort(Comparator.comparing(p -> p[0].group * 64L + p[0].mask.longValue()));
+        packages.sort(Comparator.comparing(p -> p[0].group * 64L + Long.numberOfTrailingZeros(p[0].mask.longValue())));
 
         // Iterate Logical Processors and use bitmasks to match packages, cores,
         // and NUMA nodes. Perfmon instances are numa node + processor number, so we

File: oshi-core/src/main/java/oshi/software/common/AbstractOperatingSystem.java
Patch:
@@ -116,7 +116,7 @@ public List<OSProcess> getChildProcesses(int parentPid, Predicate<OSProcess> fil
         // Get this pid and its children
         List<OSProcess> childProcs = queryChildProcesses(parentPid);
         // Extract the parent from the list
-        OSProcess parent = childProcs.stream().filter(p -> p.getParentProcessID() == parentPid).findAny().orElse(null);
+        OSProcess parent = childProcs.stream().filter(p -> p.getProcessID() == parentPid).findAny().orElse(null);
         // Get the parent's start time
         long parentStartTime = parent == null ? 0 : parent.getStartTime();
         // Get children after parent
@@ -134,7 +134,7 @@ public List<OSProcess> getDescendantProcesses(int parentPid, Predicate<OSProcess
         // Get this pid and its descendants
         List<OSProcess> descendantProcs = queryDescendantProcesses(parentPid);
         // Extract the parent from the list
-        OSProcess parent = descendantProcs.stream().filter(p -> p.getParentProcessID() == parentPid).findAny()
+        OSProcess parent = descendantProcs.stream().filter(p -> p.getProcessID() == parentPid).findAny()
                 .orElse(null);
         // Get the parent's start time
         long parentStartTime = parent == null ? 0 : parent.getStartTime();

File: oshi-core/src/main/java/oshi/driver/unix/aix/Who.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/PlatformEnum.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/SystemInfo.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/driver/windows/LogicalProcessorInformation.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/driver/windows/perfmon/ProcessorInformation.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/Baseboard.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2018-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/CentralProcessor.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/ComputerSystem.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/Display.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2018-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/Firmware.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2018-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/GlobalMemory.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/HWDiskStore.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/HWPartition.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/HardwareAbstractionLayer.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/NetworkIF.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/PowerSource.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/Sensors.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/UsbDevice.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/common/AbstractBaseboard.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/common/AbstractCentralProcessor.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/common/AbstractComputerSystem.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/common/AbstractDisplay.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/common/AbstractFirmware.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/common/AbstractGlobalMemory.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/common/AbstractHardwareAbstractionLayer.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/common/AbstractPowerSource.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/common/AbstractSensors.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/common/AbstractSoundCard.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2018-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/common/AbstractUsbDevice.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxBaseboard.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxCentralProcessor.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxComputerSystem.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxFirmware.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxGlobalMemory.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxHardwareAbstractionLayer.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxPowerSource.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxSensors.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxSoundCard.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2018-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxUsbDevice.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxVirtualMemory.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2019-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacBaseboard.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacCentralProcessor.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacComputerSystem.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacDisplay.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacFirmware.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacGlobalMemory.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacHardwareAbstractionLayer.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacPowerSource.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacSensors.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacSoundCard.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2018-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacUsbDevice.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/unix/aix/AixHWDiskStore.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdCentralProcessor.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdComputerSystem.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdFirmware.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdGlobalMemory.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdHardwareAbstractionLayer.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdPowerSource.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdSensors.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdSoundCard.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2018-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdUsbDevice.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdVirtualMemory.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2019-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisCentralProcessor.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisComputerSystem.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisFirmware.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2018-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisGlobalMemory.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisHardwareAbstractionLayer.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisPowerSource.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisSensors.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisSoundCard.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2018-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisUsbDevice.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsBaseboard.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsCentralProcessor.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsComputerSystem.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsDisplay.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsFirmware.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsGlobalMemory.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsHardwareAbstractionLayer.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsPowerSource.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsSensors.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsSoundCard.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2018-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsUsbDevice.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsVirtualMemory.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2019-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/jna/platform/mac/IOKit.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/jna/platform/mac/SystemB.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/jna/platform/unix/CLibrary.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2017-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/jna/platform/windows/PowrProf.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/common/AbstractFileSystem.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/common/AbstractNetworkParams.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2017-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/common/AbstractOperatingSystem.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/FileSystem.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/NetworkParams.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2017-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/OSFileStore.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/OSProcess.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/OperatingSystem.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxFileSystem.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxNetworkParams.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2017-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxOSProcess.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxOperatingSystem.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/mac/MacFileSystem.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/mac/MacNetworkParams.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2017-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/mac/MacOSProcess.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/mac/MacOperatingSystem.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/unix/aix/AixOSProcess.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/unix/aix/AixOperatingSystem.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/unix/freebsd/FreeBsdFileSystem.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/unix/freebsd/FreeBsdNetworkParams.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2017-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/unix/freebsd/FreeBsdOSProcess.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/unix/freebsd/FreeBsdOperatingSystem.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/unix/solaris/SolarisFileSystem.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/unix/solaris/SolarisNetworkParams.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2017-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/unix/solaris/SolarisOSProcess.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/unix/solaris/SolarisOperatingSystem.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsFileSystem.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsNetworkParams.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2017-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsOSProcess.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsOSSystemInfo.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2018-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsOperatingSystem.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/util/EdidUtil.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/util/ExecutingCommand.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/util/FileUtil.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/util/FormatUtil.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/util/ParseUtil.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/util/Util.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/util/platform/mac/SmcUtil.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/util/platform/mac/SysctlUtil.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/util/platform/unix/freebsd/BsdSysctlUtil.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/util/platform/unix/solaris/KstatUtil.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/util/platform/windows/PerfCounterQuery.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2019-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/util/platform/windows/PerfCounterQueryHandler.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2019-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/util/platform/windows/PerfCounterWildcardQuery.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2019-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/util/platform/windows/PerfDataUtil.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2018-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/util/platform/windows/WmiQueryHandler.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2019-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/util/platform/windows/WmiUtil.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/test/java/oshi/SystemInfoTest.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/test/java/oshi/hardware/CentralProcessorTest.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/test/java/oshi/hardware/ComputerSystemTest.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/test/java/oshi/hardware/DisksTest.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/test/java/oshi/hardware/DisplayTest.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2018-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/test/java/oshi/hardware/GlobalMemoryTest.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/test/java/oshi/hardware/NetworksTest.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/test/java/oshi/hardware/PowerSourceTest.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/test/java/oshi/hardware/SensorsTest.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/test/java/oshi/hardware/UsbDeviceTest.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2018-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/test/java/oshi/software/os/FileSystemTest.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/test/java/oshi/software/os/NetworkParamsTest.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2018-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2017-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/test/java/oshi/software/os/OperatingSystemTest.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/test/java/oshi/util/EdidUtilTest.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2018-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/test/java/oshi/util/ExecutingCommandTest.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/test/java/oshi/util/FileUtilTest.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/test/java/oshi/util/FormatUtilTest.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/test/java/oshi/util/MemoizerTest.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2019-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/test/java/oshi/util/ParseUtilTest.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/test/java/oshi/util/UtilTest.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2016-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/util/FileUtil.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/software/os/unix/aix/AixOSProcess.java
Patch:
@@ -53,7 +53,7 @@
 import oshi.annotation.concurrent.ThreadSafe;
 import oshi.driver.unix.aix.PsInfo;
 import oshi.driver.unix.aix.perfstat.PerfstatCpu;
-import oshi.jna.platform.unix.AixLibc.AIXLwpsInfo;
+import oshi.jna.platform.unix.AixLibc.AixLwpsInfo;
 import oshi.jna.platform.unix.AixLibc.AixPsInfo;
 import oshi.software.common.AbstractOSProcess;
 import oshi.software.os.OSThread;
@@ -279,7 +279,7 @@ public long getAffinityMask() {
         // Iterate files
         for (File lwpidFile : numericFiles) {
             int lwpidNum = ParseUtil.parseIntOrDefault(lwpidFile.getName(), 0);
-            AIXLwpsInfo info = PsInfo.queryLwpsInfo(getProcessID(), lwpidNum);
+            AixLwpsInfo info = PsInfo.queryLwpsInfo(getProcessID(), lwpidNum);
             if (info != null) {
                 mask |= info.pr_bindpro;
             }

File: oshi-core/src/main/java/oshi/software/os/unix/aix/AixOSThread.java
Patch:
@@ -25,7 +25,7 @@
 
 import oshi.annotation.concurrent.ThreadSafe;
 import oshi.driver.unix.aix.PsInfo;
-import oshi.jna.platform.unix.AixLibc.AIXLwpsInfo;
+import oshi.jna.platform.unix.AixLibc.AixLwpsInfo;
 import oshi.software.common.AbstractOSThread;
 import oshi.software.os.OSProcess;
 
@@ -98,7 +98,7 @@ public int getPriority() {
 
     @Override
     public boolean updateAttributes() {
-        AIXLwpsInfo lwpsinfo = PsInfo.queryLwpsInfo(getOwningProcessId(), getThreadId());
+        AixLwpsInfo lwpsinfo = PsInfo.queryLwpsInfo(getOwningProcessId(), getThreadId());
         if (lwpsinfo == null) {
             this.state = OSProcess.State.INVALID;
             return false;

File: oshi-core/src/test/java/oshi/driver/unix/aix/PsInfoTest.java
Patch:
@@ -36,7 +36,7 @@
 import org.junit.jupiter.api.condition.OS;
 
 import oshi.SystemInfo;
-import oshi.jna.platform.unix.AixLibc.AIXLwpsInfo;
+import oshi.jna.platform.unix.AixLibc.AixLwpsInfo;
 import oshi.jna.platform.unix.AixLibc.AixPsInfo;
 import oshi.util.Constants;
 import oshi.util.ParseUtil;
@@ -61,7 +61,7 @@ void testQueryPsInfo() {
         assertNotNull(numericFiles);
         for (File lwpidFile : numericFiles) {
             int tid = ParseUtil.parseIntOrDefault(lwpidFile.getName(), 0);
-            AIXLwpsInfo lwpsinfo = PsInfo.queryLwpsInfo(pid, tid);
+            AixLwpsInfo lwpsinfo = PsInfo.queryLwpsInfo(pid, tid);
             assertThat("Thread ID in structure should match TID", lwpsinfo.pr_lwpid, is((long) tid));
         }
     }

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxOSProcess.java
Patch:
@@ -23,7 +23,6 @@
  */
 package oshi.software.os.linux;
 
-import static oshi.hardware.platform.linux.LinuxGlobalMemory.PAGE_SIZE;
 import static oshi.software.os.OSProcess.State.INVALID;
 import static oshi.util.Memoizer.memoize;
 
@@ -356,7 +355,7 @@ public boolean updateAttributes() {
         this.threadCount = (int) statArray[ProcPidStat.THREAD_COUNT.ordinal()];
         this.priority = (int) statArray[ProcPidStat.PRIORITY.ordinal()];
         this.virtualSize = statArray[ProcPidStat.VSZ.ordinal()];
-        this.residentSetSize = statArray[ProcPidStat.RSS.ordinal()] * PAGE_SIZE;
+        this.residentSetSize = statArray[ProcPidStat.RSS.ordinal()] * LinuxOperatingSystem.getPageSize();
         this.kernelTime = statArray[ProcPidStat.KERNEL_TIME.ordinal()] * 1000L / LinuxOperatingSystem.getHz();
         this.userTime = statArray[ProcPidStat.USER_TIME.ordinal()] * 1000L / LinuxOperatingSystem.getHz();
         this.minorFaults = statArray[ProcPidStat.MINOR_FAULTS.ordinal()];

File: oshi-core/src/main/java/oshi/util/platform/linux/ProcPath.java
Patch:
@@ -44,6 +44,7 @@ public final class ProcPath {
     public static final String PROC = queryProcConfig();
 
     public static final String ASOUND = PROC + "/asound/";
+    public static final String AUXV = PROC + "/self/auxv";
     public static final String CPUINFO = PROC + "/cpuinfo";
     public static final String DISKSTATS = PROC + "/diskstats";
     public static final String MEMINFO = PROC + "/meminfo";

File: oshi-core/src/test/java/oshi/driver/unix/aix/PsInfoTest.java
Patch:
@@ -49,7 +49,7 @@ class PsInfoTest {
     void testQueryPsInfo() {
         int pid = new SystemInfo().getOperatingSystem().getProcessId();
         AixPsInfo psinfo = PsInfo.queryPsInfo(pid);
-        assertThat("Process ID in structure should match PID", psinfo.pr_pid, is(pid));
+        assertThat("Process ID in structure should match PID", psinfo.pr_pid, is((long) pid));
 
         Triplet<Integer, Long, Long> addrs = PsInfo.queryArgsEnvAddrs(pid, psinfo);
         assertNotNull(addrs);
@@ -62,7 +62,7 @@ void testQueryPsInfo() {
         for (File lwpidFile : numericFiles) {
             int tid = ParseUtil.parseIntOrDefault(lwpidFile.getName(), 0);
             AIXLwpsInfo lwpsinfo = PsInfo.queryLwpsInfo(pid, tid);
-            assertThat("Thread ID in structure should match TID", lwpsinfo.pr_lwpid, is(tid));
+            assertThat("Thread ID in structure should match TID", lwpsinfo.pr_lwpid, is((long) tid));
         }
     }
 }

File: oshi-core/src/test/java/oshi/driver/unix/aix/UptimeAndBootTimeTest.java
Patch:
@@ -25,6 +25,7 @@
 
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.greaterThan;
+import static org.hamcrest.Matchers.greaterThanOrEqualTo;
 import static org.hamcrest.Matchers.lessThan;
 import static org.hamcrest.Matchers.lessThanOrEqualTo;
 
@@ -37,7 +38,8 @@ class UptimeAndBootTimeTest {
     @Test
     void testQueryBootTime() {
         long msSinceEpoch = Who.queryBootTime();
-        assertThat("Boot time should be after the epoch", msSinceEpoch, greaterThan(0L));
+        // Possible to return 0 if there is no year information in the command
+        assertThat("Boot time should be after the epoch", msSinceEpoch, greaterThanOrEqualTo(0L));
         assertThat("Boot time should be before now", msSinceEpoch, lessThan(System.currentTimeMillis()));
 
         long msSinceBoot = Uptime.queryUpTime();

File: oshi-core/src/main/java/oshi/software/os/unix/aix/AixFileSystem.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2020-2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2020-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/test/java/oshi/driver/linux/SysfsTest.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2021-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: oshi-core/src/main/java/oshi/util/platform/unix/openbsd/FstatUtil.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2021 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
+ * Copyright (c) 2021-2022 The OSHI Project Contributors: https://github.com/oshi/oshi/graphs/contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -46,7 +46,7 @@ private FstatUtil() {
      */
     public static String getCwd(int pid) {
         List<String> ps = ExecutingCommand.runNative("ps -axwwo cwd -p " + pid);
-        if (!ps.isEmpty()) {
+        if (ps.size() > 1) {
             return ps.get(1);
         }
         return "";

File: oshi-core/src/main/java/oshi/driver/windows/perfmon/PhysicalDisk.java
Patch:
@@ -39,7 +39,7 @@
 public final class PhysicalDisk {
 
     private static final String PHYSICAL_DISK = "PhysicalDisk";
-    private static final String WIN32_PERF_RAW_DATA_PERF_DISK_PHYSICAL_DISK_WHERE_NOT_NAME_TOTAL = "Win32_PerfRawData_PerfDisk_PhysicalDisk WHERE NOT Name=\"_Total\"";
+    private static final String WIN32_PERF_RAW_DATA_PERF_DISK_PHYSICAL_DISK_WHERE_NAME_NOT_TOTAL = "Win32_PerfRawData_PerfDisk_PhysicalDisk WHERE Name!=\"_Total\"";
 
     /**
      * Physical Disk performance counters.
@@ -77,6 +77,6 @@ private PhysicalDisk() {
      */
     public static Pair<List<String>, Map<PhysicalDiskProperty, List<Long>>> queryDiskCounters() {
         return PerfCounterWildcardQuery.queryInstancesAndValues(PhysicalDiskProperty.class, PHYSICAL_DISK,
-                WIN32_PERF_RAW_DATA_PERF_DISK_PHYSICAL_DISK_WHERE_NOT_NAME_TOTAL);
+                WIN32_PERF_RAW_DATA_PERF_DISK_PHYSICAL_DISK_WHERE_NAME_NOT_TOTAL);
     }
 }

File: oshi-core/src/main/java/oshi/driver/windows/perfmon/ProcessorInformation.java
Patch:
@@ -48,7 +48,7 @@ public final class ProcessorInformation {
     private static final String WIN32_PERF_RAW_DATA_COUNTERS_PROCESSOR_INFORMATION_WHERE_NOT_NAME_LIKE_TOTAL = "Win32_PerfRawData_Counters_ProcessorInformation WHERE NOT Name LIKE \"%_Total\"";
 
     // For Vista- ... Older systems just have processor #
-    private static final String WIN32_PERF_RAW_DATA_PERF_OS_PROCESSOR_WHERE_NOT_NAME_TOTAL = "Win32_PerfRawData_PerfOS_Processor WHERE NOT Name=\"_Total\"";
+    private static final String WIN32_PERF_RAW_DATA_PERF_OS_PROCESSOR_WHERE_NAME_NOT_TOTAL = "Win32_PerfRawData_PerfOS_Processor WHERE Name!=\"_Total\"";
     private static final String WIN32_PERF_RAW_DATA_PERF_OS_PROCESSOR_WHERE_NAME_TOTAL = "Win32_PerfRawData_PerfOS_Processor WHERE Name=\"_Total\"";
 
     private static final boolean IS_WIN7_OR_GREATER = VersionHelpers.IsWindows7OrGreater();
@@ -136,7 +136,7 @@ public static Pair<List<String>, Map<ProcessorTickCountProperty, List<Long>>> qu
         return IS_WIN7_OR_GREATER ? PerfCounterWildcardQuery.queryInstancesAndValues(ProcessorTickCountProperty.class,
                 PROCESSOR_INFORMATION, WIN32_PERF_RAW_DATA_COUNTERS_PROCESSOR_INFORMATION_WHERE_NOT_NAME_LIKE_TOTAL)
                 : PerfCounterWildcardQuery.queryInstancesAndValues(ProcessorTickCountProperty.class, PROCESSOR,
-                        WIN32_PERF_RAW_DATA_PERF_OS_PROCESSOR_WHERE_NOT_NAME_TOTAL);
+                        WIN32_PERF_RAW_DATA_PERF_OS_PROCESSOR_WHERE_NAME_NOT_TOTAL);
     }
 
     /**

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdSoundCard.java
Patch:
@@ -86,9 +86,9 @@ public static List<SoundCard> getSoundCards() {
             }
         }
         List<SoundCard> soundCards = new ArrayList<>();
-        for (String _key : sounds) {
-            soundCards.add(new FreeBsdSoundCard(productMap.get(_key), vendorMap.get(_key) + " " + productMap.get(_key),
-                    productMap.get(_key)));
+        for (String s : sounds) {
+            soundCards.add(new FreeBsdSoundCard(productMap.get(s), vendorMap.get(s) + " " + productMap.get(s),
+                    productMap.get(s)));
         }
         return soundCards;
     }

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdVirtualMemory.java
Patch:
@@ -40,7 +40,7 @@
 @ThreadSafe
 final class FreeBsdVirtualMemory extends AbstractVirtualMemory {
 
-    FreeBsdGlobalMemory global;
+    private final FreeBsdGlobalMemory global;
 
     private final Supplier<Long> used = memoize(FreeBsdVirtualMemory::querySwapUsed, defaultExpiration());
 

File: oshi-core/src/main/java/oshi/hardware/platform/unix/openbsd/OpenBsdVirtualMemory.java
Patch:
@@ -40,7 +40,7 @@
 @ThreadSafe
 final class OpenBsdVirtualMemory extends AbstractVirtualMemory {
 
-    OpenBsdGlobalMemory global;
+    private final OpenBsdGlobalMemory global;
 
     private final Supplier<Triplet<Integer, Integer, Integer>> usedTotalPgin = memoize(
             OpenBsdVirtualMemory::queryVmstat, defaultExpiration());

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisSoundCard.java
Patch:
@@ -86,9 +86,9 @@ public static List<SoundCard> getSoundCards() {
             }
         }
         List<SoundCard> soundCards = new ArrayList<>();
-        for (String _key : sounds) {
-            soundCards.add(new SolarisSoundCard(productMap.get(_key) + " " + DEFAULT_AUDIO_DRIVER,
-                    vendorMap.get(_key) + " " + productMap.get(_key), productMap.get(_key)));
+        for (String s : sounds) {
+            soundCards.add(new SolarisSoundCard(productMap.get(s) + " " + DEFAULT_AUDIO_DRIVER,
+                    vendorMap.get(s) + " " + productMap.get(s), productMap.get(s)));
         }
         return soundCards;
     }

File: oshi-core/src/main/java/oshi/software/os/unix/aix/AixOperatingSystem.java
Patch:
@@ -69,7 +69,8 @@
 public class AixOperatingSystem extends AbstractOperatingSystem {
 
     private final Supplier<perfstat_partition_config_t> config = memoize(PerfstatConfig::queryConfig);
-    Supplier<perfstat_process_t[]> procCpu = memoize(PerfstatProcess::queryProcesses, defaultExpiration());
+    private final Supplier<perfstat_process_t[]> procCpu = memoize(PerfstatProcess::queryProcesses,
+            defaultExpiration());
 
     private static final long BOOTTIME = querySystemBootTimeMillis() / 1000L;
 

File: oshi-core/src/main/java/oshi/util/Memoizer.java
Patch:
@@ -36,7 +36,7 @@
 @ThreadSafe
 public final class Memoizer {
 
-    private static final Supplier<Long> defaultExpirationNanos = memoize(Memoizer::queryExpirationConfig,
+    private static final Supplier<Long> DEFAULT_EXPIRATION_NANOS = memoize(Memoizer::queryExpirationConfig,
             TimeUnit.MINUTES.toNanos(1));
 
     private Memoizer() {
@@ -54,7 +54,7 @@ private static long queryExpirationConfig() {
      * @return The number of nanoseconds to keep memoized values before refreshing
      */
     public static long defaultExpiration() {
-        return defaultExpirationNanos.get();
+        return DEFAULT_EXPIRATION_NANOS.get();
     }
 
     /**

File: oshi-core/src/main/java/oshi/util/platform/windows/PerfCounterWildcardQuery.java
Patch:
@@ -56,7 +56,7 @@ public final class PerfCounterWildcardQuery {
     private static final Logger LOG = LoggerFactory.getLogger(PerfCounterWildcardQuery.class);
 
     // Use a thread safe set to cache failed pdh queries
-    private static final Set<String> failedQueryCache = ConcurrentHashMap.newKeySet();
+    private static final Set<String> FAILED_QUERY_CACHE = ConcurrentHashMap.newKeySet();
 
     private PerfCounterWildcardQuery() {
     }
@@ -83,15 +83,15 @@ private PerfCounterWildcardQuery() {
      */
     public static <T extends Enum<T>> Pair<List<String>, Map<T, List<Long>>> queryInstancesAndValues(
             Class<T> propertyEnum, String perfObject, String perfWmiClass) {
-        if (!failedQueryCache.contains(perfObject)) {
+        if (!FAILED_QUERY_CACHE.contains(perfObject)) {
             Pair<List<String>, Map<T, List<Long>>> instancesAndValuesMap = queryInstancesAndValuesFromPDH(propertyEnum,
                     perfObject);
             if (!instancesAndValuesMap.getA().isEmpty()) {
                 return instancesAndValuesMap;
             }
             // If we are here, query failed
             LOG.warn("Disabling further attempts to query {}.", perfObject);
-            failedQueryCache.add(perfObject);
+            FAILED_QUERY_CACHE.add(perfObject);
         }
         return queryInstancesAndValuesFromWMI(propertyEnum, perfWmiClass);
     }

File: oshi-core/src/test/java/oshi/TestConstants.java
Patch:
@@ -23,7 +23,9 @@
  */
 package oshi;
 
-public class TestConstants {
+public final class TestConstants {
+    private TestConstants() {
+    }
 
     public static final String UUID_REGEX = "\\b[0-9a-f]{8}\\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\\b[0-9a-f]{12}\\b";
 

File: oshi-core/src/main/java/oshi/util/ParseUtil.java
Patch:
@@ -1344,7 +1344,7 @@ public static List<String> parseByteArrayToStrings(byte[] bytes) {
                 }
                 // Otherwise add string and reset start
                 // Intentionally using platform default charset
-                strList.add(new String(bytes, start, end - start));
+                strList.add(new String(bytes, start, end - start, StandardCharsets.UTF_8));
                 start = end + 1;
             }
         } while (end++ < bytes.length);
@@ -1378,11 +1378,11 @@ public static Map<String, String> parseByteArrayToStringMap(byte[] bytes) {
                 }
                 // Otherwise add string (possibly empty) and reset start
                 // Intentionally using platform default charset
-                strMap.put(key, new String(bytes, start, end - start));
+                strMap.put(key, new String(bytes, start, end - start, StandardCharsets.UTF_8));
                 key = null;
                 start = end + 1;
             } else if (bytes[end] == '=' && key == null) {
-                key = new String(bytes, start, end - start);
+                key = new String(bytes, start, end - start, StandardCharsets.UTF_8);
                 start = end + 1;
             }
         } while (end++ < bytes.length);

File: oshi-core/src/main/java/oshi/PlatformEnum.java
Patch:
@@ -81,7 +81,7 @@ public enum PlatformEnum {
      */
     UNKNOWN("Unknown");
 
-    private String name;
+    private final String name;
 
     PlatformEnum(String name) {
         this.name = name;

File: oshi-core/src/main/java/oshi/driver/unix/aix/PsInfo.java
Patch:
@@ -78,7 +78,7 @@ enum LwpsInfoT {
         PR_BINDPRO(Native.POINTER_SIZE), // processor to which thread is bound
         SIZE(0);
 
-        private int size;
+        private final int size;
 
         LwpsInfoT(int bytes) {
             size = bytes;
@@ -121,7 +121,7 @@ enum PsInfoT {
         PR_LWP(lwpsInfoOffsets.get(LwpsInfoT.SIZE)), // "representative" thread info
         SIZE(0);
 
-        private int size;
+        private final int size;
 
         PsInfoT(int bytes) {
             size = bytes;

File: oshi-core/src/main/java/oshi/driver/unix/solaris/PsInfo.java
Patch:
@@ -92,7 +92,7 @@ enum LwpsInfoT {
         PR_LAST_ONPROC(8), // Timestamp of when thread last ran on a processor
         SIZE(0);
 
-        private int size;
+        private final int size;
 
         LwpsInfoT(int bytes) {
             size = bytes;
@@ -144,7 +144,7 @@ enum PsInfoT {
         PR_CONTRACT(4), // process contract id
         SIZE(0);
 
-        private int size;
+        private final int size;
 
         PsInfoT(int bytes) {
             size = bytes;

File: oshi-core/src/main/java/oshi/hardware/CentralProcessor.java
Patch:
@@ -288,7 +288,7 @@ enum TickType {
          */
         STEAL(7);
 
-        private int index;
+        private final int index;
 
         TickType(int value) {
             this.index = value;

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxOSProcess.java
Patch:
@@ -421,7 +421,7 @@ private enum ProcPidStat {
         PPID(4), MINOR_FAULTS(10), MAJOR_FAULTS(12), USER_TIME(14), KERNEL_TIME(15), PRIORITY(18), THREAD_COUNT(20),
         START_TIME(22), VSZ(23), RSS(24);
 
-        private int order;
+        private final int order;
 
         public int getOrder() {
             return this.order;

File: oshi-core/src/main/java/oshi/driver/windows/DeviceTree.java
Patch:
@@ -91,7 +91,7 @@ public static Quintet<Set<Integer>, Map<Integer, Integer>, Map<Integer, String>,
         Map<Integer, String> mfgMap = new HashMap<>();
         // Get device IDs for the top level devices
         HANDLE hDevInfo = SA.SetupDiGetClassDevs(guidDevInterface, null, null, DIGCF_DEVICEINTERFACE | DIGCF_PRESENT);
-        if (hDevInfo != INVALID_HANDLE_VALUE) {
+        if (!INVALID_HANDLE_VALUE.equals(hDevInfo)) {
             try {
                 // Create re-usable native allocations
                 Memory buf = new Memory(MAX_PATH);

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsPowerSource.java
Patch:
@@ -151,7 +151,7 @@ private static WindowsPowerSource getPowerSource(String name) {
 
         HANDLE hdev = SetupApi.INSTANCE.SetupDiGetClassDevs(GUID_DEVCLASS_BATTERY, null, null,
                 SetupApi.DIGCF_PRESENT | SetupApi.DIGCF_DEVICEINTERFACE);
-        if (WinBase.INVALID_HANDLE_VALUE != hdev) {
+        if (!WinBase.INVALID_HANDLE_VALUE.equals(hdev)) {
             boolean batteryFound = false;
             // Limit search to 100 batteries max
             for (int idev = 0; !batteryFound && idev < 100; idev++) {

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsFileSystem.java
Patch:
@@ -181,7 +181,7 @@ static ArrayList<OSFileStore> getLocalVolumes(String volumeToMatch) {
         aVolume = new char[BUFSIZE];
 
         hVol = Kernel32.INSTANCE.FindFirstVolume(aVolume, BUFSIZE);
-        if (hVol == WinBase.INVALID_HANDLE_VALUE) {
+        if (WinBase.INVALID_HANDLE_VALUE.equals(hVol)) {
             return fs;
         }
         try {

File: oshi-core/src/main/java/oshi/driver/windows/perfmon/ProcessInformation.java
Patch:
@@ -40,8 +40,8 @@ public final class ProcessInformation {
 
     private static final String WIN32_PERFPROC_PROCESS = "Win32_PerfRawData_PerfProc_Process";
     private static final String PROCESS = "Process";
-    private static final String WIN32_PROCESS_WHERE_NOT_NAME_LIKE_TOTAL = WIN32_PERFPROC_PROCESS
-            + "Win32_Process WHERE NOT Name LIKE\"%_Total\"";
+    private static final String WIN32_PERFPROC_PROCESS_WHERE_NOT_NAME_LIKE_TOTAL = WIN32_PERFPROC_PROCESS
+            + " WHERE NOT Name LIKE \"%_Total\"";
 
     /**
      * Process performance counters
@@ -102,7 +102,7 @@ private ProcessInformation() {
      */
     public static Pair<List<String>, Map<ProcessPerformanceProperty, List<Long>>> queryProcessCounters() {
         return PerfCounterWildcardQuery.queryInstancesAndValues(ProcessPerformanceProperty.class, PROCESS,
-                WIN32_PROCESS_WHERE_NOT_NAME_LIKE_TOTAL);
+                WIN32_PERFPROC_PROCESS_WHERE_NOT_NAME_LIKE_TOTAL);
     }
 
     /**

File: oshi-core/src/main/java/oshi/driver/linux/Sysfs.java
Patch:
@@ -67,9 +67,8 @@ public static String queryProductModel() {
         } else {
             if (!productVersion.isEmpty() && !"None".equals(productVersion)) {
                 return productName + " (version: " + productVersion + ")";
-            } else {
-                return productName;
             }
+            return productName;
         }
         return null;
     }

File: oshi-core/src/main/java/oshi/driver/windows/wmi/MSAcpiThermalZoneTemperature.java
Patch:
@@ -23,6 +23,8 @@
  */
 package oshi.driver.windows.wmi;
 
+import java.util.Objects;
+
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiQuery; //NOSONAR squid:S1191
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiResult;
 
@@ -56,6 +58,6 @@ private MSAcpiThermalZoneTemperature() {
     public static WmiResult<TemperatureProperty> queryCurrentTemperature() {
         WmiQuery<TemperatureProperty> curTempQuery = new WmiQuery<>(WMI_NAMESPACE, MS_ACPI_THERMAL_ZONE_TEMPERATURE,
                 TemperatureProperty.class);
-        return WmiQueryHandler.createInstance().queryWMI(curTempQuery);
+        return Objects.requireNonNull(WmiQueryHandler.createInstance()).queryWMI(curTempQuery);
     }
 }

File: oshi-core/src/main/java/oshi/driver/windows/wmi/Win32BaseBoard.java
Patch:
@@ -23,6 +23,8 @@
  */
 package oshi.driver.windows.wmi;
 
+import java.util.Objects;
+
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiQuery; //NOSONAR squid:S1191
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiResult;
 
@@ -54,6 +56,6 @@ private Win32BaseBoard() {
      */
     public static WmiResult<BaseBoardProperty> queryBaseboardInfo() {
         WmiQuery<BaseBoardProperty> baseboardQuery = new WmiQuery<>(WIN32_BASEBOARD, BaseBoardProperty.class);
-        return WmiQueryHandler.createInstance().queryWMI(baseboardQuery);
+        return Objects.requireNonNull(WmiQueryHandler.createInstance()).queryWMI(baseboardQuery);
     }
 }

File: oshi-core/src/main/java/oshi/driver/windows/wmi/Win32ComputerSystem.java
Patch:
@@ -23,6 +23,8 @@
  */
 package oshi.driver.windows.wmi;
 
+import java.util.Objects;
+
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiQuery; //NOSONAR squid:S1191
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiResult;
 
@@ -55,6 +57,6 @@ private Win32ComputerSystem() {
     public static WmiResult<ComputerSystemProperty> queryComputerSystem() {
         WmiQuery<ComputerSystemProperty> computerSystemQuery = new WmiQuery<>(WIN32_COMPUTER_SYSTEM,
                 ComputerSystemProperty.class);
-        return WmiQueryHandler.createInstance().queryWMI(computerSystemQuery);
+        return Objects.requireNonNull(WmiQueryHandler.createInstance()).queryWMI(computerSystemQuery);
     }
 }

File: oshi-core/src/main/java/oshi/driver/windows/wmi/Win32ComputerSystemProduct.java
Patch:
@@ -23,6 +23,8 @@
  */
 package oshi.driver.windows.wmi;
 
+import java.util.Objects;
+
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiQuery; //NOSONAR squid:S1191
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiResult;
 
@@ -55,6 +57,6 @@ private Win32ComputerSystemProduct() {
     public static WmiResult<ComputerSystemProductProperty> queryIdentifyingNumberUUID() {
         WmiQuery<ComputerSystemProductProperty> identifyingNumberQuery = new WmiQuery<>(WIN32_COMPUTER_SYSTEM_PRODUCT,
                 ComputerSystemProductProperty.class);
-        return WmiQueryHandler.createInstance().queryWMI(identifyingNumberQuery);
+        return Objects.requireNonNull(WmiQueryHandler.createInstance()).queryWMI(identifyingNumberQuery);
     }
 }

File: oshi-core/src/main/java/oshi/driver/windows/wmi/Win32Fan.java
Patch:
@@ -23,6 +23,8 @@
  */
 package oshi.driver.windows.wmi;
 
+import java.util.Objects;
+
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiQuery; //NOSONAR squid:S1191
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiResult;
 
@@ -55,6 +57,6 @@ private Win32Fan() {
      */
     public static WmiResult<SpeedProperty> querySpeed() {
         WmiQuery<SpeedProperty> fanQuery = new WmiQuery<>(WIN32_FAN, SpeedProperty.class);
-        return WmiQueryHandler.createInstance().queryWMI(fanQuery);
+        return Objects.requireNonNull(WmiQueryHandler.createInstance()).queryWMI(fanQuery);
     }
 }

File: oshi-core/src/main/java/oshi/driver/windows/wmi/Win32LogicalDisk.java
Patch:
@@ -23,6 +23,8 @@
  */
 package oshi.driver.windows.wmi;
 
+import java.util.Objects;
+
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiQuery; //NOSONAR squid:S1191
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiResult;
 
@@ -68,6 +70,6 @@ public static WmiResult<LogicalDiskProperty> queryLogicalDisk(String nameToMatch
         }
         WmiQuery<LogicalDiskProperty> logicalDiskQuery = new WmiQuery<>(wmiClassName.toString(),
                 LogicalDiskProperty.class);
-        return WmiQueryHandler.createInstance().queryWMI(logicalDiskQuery);
+        return Objects.requireNonNull(WmiQueryHandler.createInstance()).queryWMI(logicalDiskQuery);
     }
 }

File: oshi-core/src/main/java/oshi/driver/windows/wmi/Win32OperatingSystem.java
Patch:
@@ -23,6 +23,8 @@
  */
 package oshi.driver.windows.wmi;
 
+import java.util.Objects;
+
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiQuery; //NOSONAR squid:S1191
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiResult;
 
@@ -54,6 +56,6 @@ private Win32OperatingSystem() {
      */
     public static WmiResult<OSVersionProperty> queryOsVersion() {
         WmiQuery<OSVersionProperty> osVersionQuery = new WmiQuery<>(WIN32_OPERATING_SYSTEM, OSVersionProperty.class);
-        return WmiQueryHandler.createInstance().queryWMI(osVersionQuery);
+        return Objects.requireNonNull(WmiQueryHandler.createInstance()).queryWMI(osVersionQuery);
     }
 }

File: oshi-core/src/main/java/oshi/driver/windows/wmi/Win32VideoController.java
Patch:
@@ -23,6 +23,8 @@
  */
 package oshi.driver.windows.wmi;
 
+import java.util.Objects;
+
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiQuery; //NOSONAR squid:S1191
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiResult;
 
@@ -55,6 +57,6 @@ private Win32VideoController() {
     public static WmiResult<VideoControllerProperty> queryVideoController() {
         WmiQuery<VideoControllerProperty> videoControllerQuery = new WmiQuery<>(WIN32_VIDEO_CONTROLLER,
                 VideoControllerProperty.class);
-        return WmiQueryHandler.createInstance().queryWMI(videoControllerQuery);
+        return Objects.requireNonNull(WmiQueryHandler.createInstance()).queryWMI(videoControllerQuery);
     }
 }

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsHWDiskStore.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
@@ -171,7 +172,7 @@ public boolean updateAttributes() {
      * @return a list of {@link HWDiskStore} objects representing the disks
      */
     public static List<HWDiskStore> getDisks() {
-        WmiQueryHandler h = WmiQueryHandler.createInstance();
+        WmiQueryHandler h = Objects.requireNonNull(WmiQueryHandler.createInstance());
         boolean comInit = false;
         try {
             comInit = h.initCOM();

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsLogicalVolumeGroup.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
+import java.util.Objects;
 import java.util.Set;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -72,7 +73,7 @@ static List<LogicalVolumeGroup> getLogicalVolumeGroups() {
         if (!IS_WINDOWS8_OR_GREATER) {
             return Collections.emptyList();
         }
-        WmiQueryHandler h = WmiQueryHandler.createInstance();
+        WmiQueryHandler h = Objects.requireNonNull(WmiQueryHandler.createInstance());
         boolean comInit = false;
         try {
             comInit = h.initCOM();

File: oshi-core/src/main/java/oshi/software/common/AbstractNetworkParams.java
Patch:
@@ -63,9 +63,8 @@ public String getHostName() {
             int dot = hn.indexOf('.');
             if (dot == -1) {
                 return hn;
-            } else {
-                return hn.substring(0, dot);
             }
+            return hn.substring(0, dot);
         } catch (UnknownHostException e) {
             LOG.error("Unknown host exception when getting address of local host: {}", e.getMessage());
             return "";

File: oshi-core/src/main/java/oshi/software/common/AbstractOperatingSystem.java
Patch:
@@ -89,7 +89,7 @@ private int queryPlatformBitness() {
         }
         // Initialize based on JVM Bitness. Individual OS implementations will test
         // if 32-bit JVM running on 64-bit OS
-        int jvmBitness = System.getProperty("os.arch").indexOf("64") != -1 ? 64 : 32;
+        int jvmBitness = System.getProperty("os.arch").contains("64") ? 64 : 32;
         return queryBitness(jvmBitness);
     }
 

File: oshi-core/src/main/java/oshi/software/os/OperatingSystem.java
Patch:
@@ -24,10 +24,10 @@
 package oshi.software.os;
 
 import java.util.ArrayList;
-import java.util.List;
+import java.util.Collection;
 import java.util.Comparator;
+import java.util.List;
 import java.util.Objects;
-import java.util.Collection;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
 

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxOSProcess.java
Patch:
@@ -36,12 +36,12 @@
 import java.nio.file.InvalidPathException;
 import java.nio.file.Path;
 import java.nio.file.Paths;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
-import java.util.stream.Collectors;
-import java.util.Arrays;
 import java.util.function.Supplier;
+import java.util.stream.Collectors;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxOperatingSystem.java
Patch:
@@ -136,7 +136,7 @@ public Pair<String, OSVersionInfo> queryFamilyVersionInfo() {
 
     @Override
     protected int queryBitness(int jvmBitness) {
-        if (jvmBitness < 64 && ExecutingCommand.getFirstAnswer("uname -m").indexOf("64") == -1) {
+        if (jvmBitness < 64 && !ExecutingCommand.getFirstAnswer("uname -m").contains("64")) {
             return jvmBitness;
         }
         return 64;

File: oshi-core/src/main/java/oshi/util/platform/windows/PerfCounterQuery.java
Patch:
@@ -25,6 +25,7 @@
 
 import java.util.EnumMap;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
@@ -164,13 +165,13 @@ public static <T extends Enum<T>> Map<T, Long> queryValuesFromPDH(Class<T> prope
      */
     public static <T extends Enum<T>> Map<T, Long> queryValuesFromWMI(Class<T> propertyEnum, String wmiClass) {
         WmiQuery<T> query = new WmiQuery<>(wmiClass, propertyEnum);
-        WmiResult<T> result = WmiQueryHandler.createInstance().queryWMI(query);
+        WmiResult<T> result = Objects.requireNonNull(WmiQueryHandler.createInstance()).queryWMI(query);
         EnumMap<T, Long> valueMap = new EnumMap<>(propertyEnum);
         if (result.getResultCount() > 0) {
             for (T prop : propertyEnum.getEnumConstants()) {
                 switch (result.getCIMType(prop)) {
                 case Wbemcli.CIM_UINT16:
-                    valueMap.put(prop, Long.valueOf(WmiUtil.getUint16(result, prop, 0)));
+                    valueMap.put(prop, (long) WmiUtil.getUint16(result, prop, 0));
                     break;
                 case Wbemcli.CIM_UINT32:
                     valueMap.put(prop, WmiUtil.getUint32asLong(result, prop, 0));

File: oshi-core/src/main/java/oshi/util/platform/windows/PerfCounterWildcardQuery.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.EnumMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
@@ -191,7 +192,7 @@ public static <T extends Enum<T>> Pair<List<String>, Map<T, List<Long>>> queryIn
         List<String> instances = new ArrayList<>();
         EnumMap<T, List<Long>> valuesMap = new EnumMap<>(propertyEnum);
         WmiQuery<T> query = new WmiQuery<>(wmiClass, propertyEnum);
-        WmiResult<T> result = WmiQueryHandler.createInstance().queryWMI(query);
+        WmiResult<T> result = Objects.requireNonNull(WmiQueryHandler.createInstance()).queryWMI(query);
         if (result.getResultCount() > 0) {
             for (T prop : propertyEnum.getEnumConstants()) {
                 // First element is instance name
@@ -204,7 +205,7 @@ public static <T extends Enum<T>> Pair<List<String>, Map<T, List<Long>>> queryIn
                     for (int i = 0; i < result.getResultCount(); i++) {
                         switch (result.getCIMType(prop)) {
                         case Wbemcli.CIM_UINT16:
-                            values.add(Long.valueOf(WmiUtil.getUint16(result, prop, i)));
+                            values.add((long) WmiUtil.getUint16(result, prop, i));
                             break;
                         case Wbemcli.CIM_UINT32:
                             values.add(WmiUtil.getUint32asLong(result, prop, i));

File: oshi-core/src/test/java/oshi/driver/linux/DmidecodeTest.java
Patch:
@@ -28,8 +28,6 @@
 import oshi.util.tuples.Pair;
 
 import static org.hamcrest.MatcherAssert.assertThat;
-import static org.hamcrest.Matchers.anyOf;
-import static org.hamcrest.Matchers.nullValue;
 import static org.hamcrest.Matchers.not;
 import static org.hamcrest.Matchers.emptyString;
 import static org.hamcrest.Matchers.containsString;

File: oshi-core/src/test/java/oshi/driver/linux/LshwTest.java
Patch:
@@ -28,7 +28,6 @@
 
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.anyOf;
-import static org.hamcrest.Matchers.nullValue;
 import static org.hamcrest.Matchers.not;
 import static org.hamcrest.Matchers.emptyString;
 import static org.hamcrest.Matchers.greaterThan;

File: oshi-demo/src/main/java/oshi/demo/UserComInit.java
Patch:
@@ -28,6 +28,8 @@
 import oshi.driver.windows.wmi.Win32OperatingSystem;
 import oshi.util.platform.windows.WmiQueryHandler;
 
+import java.util.Objects;
+
 /**
  * Class demonstrating WMI stat performance improvements if the user does COM
  * initialization so OSHI doesn't have to
@@ -61,7 +63,7 @@ private static void loopWmiQueries() {
     private static void loopWmiQueriesWithUserCom() {
         // Create instance using existing WmiQueryHandler class for convenience, only to
         // be used for COM init/uninit. Not needed if user initializes COM.
-        WmiQueryHandler handlerForSingleCOMinit = WmiQueryHandler.createInstance();
+        WmiQueryHandler handlerForSingleCOMinit = Objects.requireNonNull(WmiQueryHandler.createInstance());
 
         boolean singleComInit = false;
         try {

File: oshi-core/src/main/java/oshi/driver/linux/Dmidecode.java
Patch:
@@ -113,7 +113,6 @@ public static String queryUUID() {
      *         in the pair otherwise
      */
     public static Pair<String, String> queryBiosNameRev() {
-
         String biosName = null;
         String revision = null;
 

File: oshi-core/src/test/java/oshi/driver/linux/DevicetreeTest.java
Patch:
@@ -24,8 +24,6 @@
 package oshi.driver.linux;
 
 import static org.hamcrest.MatcherAssert.assertThat;
-import static org.hamcrest.Matchers.anyOf;
-import static org.hamcrest.Matchers.nullValue;
 import static org.hamcrest.Matchers.not;
 import static org.hamcrest.Matchers.containsString;
 
@@ -38,7 +36,9 @@ public class DevicetreeTest {
     public void testQueryModel() {
         if (Platform.isLinux()) {
             String queryModel = Devicetree.queryModel();
-            assertThat("queryModel format", queryModel, anyOf(not(containsString("Machine: ")), nullValue()));
+            if (queryModel != null) {
+                assertThat("queryModel format", queryModel, not(containsString("Machine: ")));
+            }
         }
     }
 }

File: oshi-core/src/main/java/oshi/hardware/NetworkIF.java
Patch:
@@ -111,7 +111,7 @@ default IfOperStatus getIfOperStatus() {
      *         This value is set when the {@link oshi.hardware.NetworkIF} is
      *         instantiated and may not be up to date.
      */
-    int getMTU();
+    long getMTU();
 
     /**
      * The Media Access Control (MAC) address.

File: oshi-core/src/test/java/oshi/hardware/NetworksTest.java
Patch:
@@ -107,6 +107,7 @@ private void testUpdateAttributes(NetworkIF net) {
                 is(greaterThanOrEqualTo(0L)));
         assertThat("NetworkIF collisions after update attr should not be negative", net.getCollisions(),
                 is(greaterThanOrEqualTo(0L)));
+        assertThat("NetworkIF MTU should not be negative", net.getMTU(), is(greaterThanOrEqualTo(0L)));
         assertThat("NetworkIF speed after update attr should not be negative", net.getSpeed(),
                 is(greaterThanOrEqualTo(0L)));
         assertThat("NetworkIF time stamp after update attr should not be negative", net.getTimeStamp(),
@@ -131,9 +132,6 @@ void testNonLocalNetworkInterfaces() throws IOException {
             assertThat("Network interface has a hardware address", net.queryNetworkInterface().getHardwareAddress(),
                     is(notNullValue()));
 
-            // On Windows, virtual interfaces may return max unsigned int value, -1.
-            assertThat("NetworkIF MTU should not be negative", net.getMTU(), is(greaterThanOrEqualTo(0)));
-
             assertThat("NetworkIF MacAddress should not be null", net.getMacaddr(), is(notNullValue()));
         }
     }

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxOperatingSystem.java
Patch:
@@ -559,7 +559,7 @@ private static String filenameToFamily(String name) {
     }
 
     @Override
-    public OSService[] getServices() {
+    public List<OSService> getServices() {
         // Get running services
         List<OSService> services = new ArrayList<>();
         Set<String> running = new HashSet<>();
@@ -602,7 +602,7 @@ public OSService[] getServices() {
                 LOG.error("Directory: /etc/init does not exist");
             }
         }
-        return services.toArray(new OSService[0]);
+        return services;
     }
 
     /**

File: oshi-core/src/main/java/oshi/software/os/mac/MacOperatingSystem.java
Patch:
@@ -253,7 +253,7 @@ public NetworkParams getNetworkParams() {
     }
 
     @Override
-    public OSService[] getServices() {
+    public List<OSService> getServices() {
         // Get running services
         List<OSService> services = new ArrayList<>();
         Set<String> running = new HashSet<>();
@@ -286,7 +286,7 @@ public OSService[] getServices() {
                 services.add(s);
             }
         }
-        return services.toArray(new OSService[0]);
+        return services;
     }
 
     @Override

File: oshi-core/src/main/java/oshi/software/os/unix/aix/AixOperatingSystem.java
Patch:
@@ -228,7 +228,7 @@ public NetworkParams getNetworkParams() {
     }
 
     @Override
-    public OSService[] getServices() {
+    public List<OSService> getServices() {
         List<OSService> services = new ArrayList<>();
         // Get system services from lssrc command
         /*-
@@ -276,6 +276,6 @@ public OSService[] getServices() {
                 }
             }
         }
-        return services.toArray(new OSService[0]);
+        return services;
     }
 }

File: oshi-core/src/main/java/oshi/software/os/unix/freebsd/FreeBsdOperatingSystem.java
Patch:
@@ -224,7 +224,7 @@ public NetworkParams getNetworkParams() {
     }
 
     @Override
-    public OSService[] getServices() {
+    public List<OSService> getServices() {
         // Get running services
         List<OSService> services = new ArrayList<>();
         Set<String> running = new HashSet<>();
@@ -247,6 +247,6 @@ public OSService[] getServices() {
         } else {
             LOG.error("Directory: /etc/init does not exist");
         }
-        return services.toArray(new OSService[0]);
+        return services;
     }
 }

File: oshi-core/src/main/java/oshi/software/os/unix/openbsd/OpenBsdOperatingSystem.java
Patch:
@@ -220,7 +220,7 @@ public NetworkParams getNetworkParams() {
     }
 
     @Override
-    public OSService[] getServices() {
+    public List<OSService> getServices() {
         // Get running services
         List<OSService> services = new ArrayList<>();
         Set<String> running = new HashSet<>();
@@ -243,6 +243,6 @@ public OSService[] getServices() {
         } else {
             LOG.error("Directory: /etc/rc.d does not exist");
         }
-        return services.toArray(new OSService[0]);
+        return services;
     }
 }

File: oshi-core/src/main/java/oshi/software/os/unix/solaris/SolarisOperatingSystem.java
Patch:
@@ -238,7 +238,7 @@ public NetworkParams getNetworkParams() {
     }
 
     @Override
-    public OSService[] getServices() {
+    public List<OSService> getServices() {
         List<OSService> services = new ArrayList<>();
         // Get legacy RC service name possibilities
         List<String> legacySvcs = new ArrayList<>();
@@ -286,6 +286,6 @@ public OSService[] getServices() {
                 }
             }
         }
-        return services.toArray(new OSService[0]);
+        return services;
     }
 }

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsOSProcess.java
Patch:
@@ -564,7 +564,7 @@ private Triplet<String, String, Map<String, String>> queryCwdCommandlineEnvironm
         return defaultCwdCommandlineEnvironment();
     }
 
-    private Triplet<String, String, Map<String, String>> defaultCwdCommandlineEnvironment() {
+    private static Triplet<String, String, Map<String, String>> defaultCwdCommandlineEnvironment() {
         return new Triplet<>("", "", Collections.emptyMap());
     }
 

File: oshi-core/src/main/java/oshi/util/platform/windows/PerfCounterQueryHandler.java
Patch:
@@ -63,15 +63,15 @@ public boolean addCounterToQuery(PerfCounter counter) {
         if (this.queryHandle == null) {
             this.queryHandle = new HANDLEByReference();
             if (!PerfDataUtil.openQuery(this.queryHandle)) {
-                LOG.warn("Failed to open a query for PDH object: {}", counter.getObject());
+                LOG.warn("Failed to open a query for PDH counter: {}", counter.getCounterPath());
                 this.queryHandle = null;
                 return false;
             }
         }
         // Get a new handle for the counter
         HANDLEByReference p = new HANDLEByReference();
         if (!PerfDataUtil.addCounter(this.queryHandle, counter.getCounterPath(), p)) {
-            LOG.warn("Failed to add counter for PDH object: {}", counter.getObject());
+            LOG.warn("Failed to add counter for PDH counter: {}", counter.getCounterPath());
             return false;
         }
         counterHandleMap.put(counter, p);

File: oshi-core/src/main/java/oshi/jna/platform/unix/openbsd/OpenBsdLibc.java
Patch:
@@ -27,9 +27,9 @@
 import com.sun.jna.Pointer;
 import com.sun.jna.Structure;
 import com.sun.jna.Structure.FieldOrder;
-import com.sun.jna.ptr.IntByReference;
 
 import oshi.jna.platform.unix.CLibrary;
+import oshi.jna.platform.unix.NativeSizeTByReference;
 
 /**
  * C library. This class should be considered non-API as it may be removed
@@ -121,5 +121,5 @@ class Timeval extends Structure {
         public long tv_usec; // microseconds
     }
 
-    int sysctl(int[] name, int namelen, Pointer oldp, IntByReference oldlenp, Pointer newp, int newlen);
+    int sysctl(int[] name, int namelen, Pointer oldp, NativeSizeTByReference oldlenp, Pointer newp, size_t newlen);
 }

File: oshi-core/src/main/java/oshi/util/FileUtil.java
Patch:
@@ -252,7 +252,7 @@ private static boolean readPropertiesFromClassLoader(String propsFilename, Prope
         try {
             List<URL> resources = Collections.list(loader.getResources(propsFilename));
             if (resources.isEmpty()) {
-                LOG.info("No {} file found from ClassLoader {}", propsFilename, loader);
+                LOG.debug("No {} file found from ClassLoader {}", propsFilename, loader);
                 return false;
             }
             if (resources.size() > 1) {

File: oshi-core/src/main/java/oshi/util/FileUtil.java
Patch:
@@ -90,6 +90,8 @@ public static List<String> readFile(String filename, boolean reportError) {
             } catch (IOException e) {
                 if (reportError) {
                     LOG.error("Error reading file {}. {}", filename, e.getMessage());
+                } else {
+                    LOG.debug("Error reading file {}. {}", filename, e.getMessage());
                 }
             }
         } else if (reportError) {

File: oshi-core/src/main/java/oshi/software/os/unix/solaris/SolarisOSProcess.java
Patch:
@@ -318,10 +318,10 @@ private boolean updateAttributes(String[] split) {
     static Map<Integer, String[]> parseAndMergePSandPrstatInfo(List<String> psInfo, int psKeyIndex, int psLength,
             List<String> prstatInfo, boolean useTid) {
         Map<Integer, String[]> map = new HashMap<>();
-        final String[] mergedSplit = new String[psLength + 2];
         if (psInfo.size() > 1) { // first row is header
             psInfo.stream().skip(1).forEach(info -> {
                 String[] psSplit = ParseUtil.whitespaces.split(info.trim(), psLength);
+                String[] mergedSplit = new String[psLength + 2];
                 if (psSplit.length == psLength) {
                     for (int idx = 0; idx < psLength; idx++) {
                         if (idx == psKeyIndex) {

File: oshi-core/src/main/java/oshi/util/platform/unix/solaris/KstatUtil.java
Patch:
@@ -95,8 +95,8 @@ public static boolean read(Kstat ksp) {
             int retry = 0;
             while (0 > KS.kstat_read(KC, ksp, null)) {
                 if (LibKstat.EAGAIN != Native.getLastError() || 5 <= ++retry) {
-                    if (LOG.isErrorEnabled()) {
-                        LOG.error("Failed to read kstat {}:{}:{}",
+                    if (LOG.isDebugEnabled()) {
+                        LOG.debug("Failed to read kstat {}:{}:{}",
                                 Native.toString(ksp.ks_module, StandardCharsets.US_ASCII), ksp.ks_instance,
                                 Native.toString(ksp.ks_name, StandardCharsets.US_ASCII));
                     }
@@ -209,7 +209,7 @@ public static String dataLookupString(Kstat ksp, String name) {
         }
         Pointer p = KS.kstat_data_lookup(ksp, name);
         if (p == null) {
-            LOG.error("Failed lo lookup kstat value for key {}", name);
+            LOG.debug("Failed to lookup kstat value for key {}", name);
             return "";
         }
         KstatNamed data = new KstatNamed(p);

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxFileSystem.java
Patch:
@@ -145,7 +145,7 @@ private static List<OSFileStore> getFileStoreMatching(String nameToMatch, Map<St
             String name = volume;
             String path = split[1].replace(UNICODE_SPACE, " ");
             if (path.equals("/")) {
-                volume = "/";
+                name = "/";
             }
             String type = split[2];
 

File: oshi-core/src/main/java/oshi/driver/windows/LogicalProcessorInformation.java
Patch:
@@ -27,8 +27,7 @@
 import java.util.Comparator;
 import java.util.List;
 
-import com.sun.jna.platform.win32.Kernel32Util; // NOSONAR squid:S1191
-import com.sun.jna.platform.win32.WinNT;
+import com.sun.jna.platform.win32.WinNT; // NOSONAR squid:S1191
 import com.sun.jna.platform.win32.WinNT.GROUP_AFFINITY;
 import com.sun.jna.platform.win32.WinNT.LOGICAL_PROCESSOR_RELATIONSHIP;
 import com.sun.jna.platform.win32.WinNT.NUMA_NODE_RELATIONSHIP;
@@ -38,6 +37,7 @@
 
 import oshi.annotation.concurrent.ThreadSafe;
 import oshi.hardware.CentralProcessor.LogicalProcessor;
+import oshi.jna.platform.windows.Kernel32Util;
 
 /**
  * Utility to query Logical Processor Information
@@ -58,7 +58,7 @@ public static List<LogicalProcessor> getLogicalProcessorInformationEx() {
         // Collect a list of logical processors on each physical core and
         // package. These will be 64-bit bitmasks.
         SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX[] procInfo = Kernel32Util
-                .getLogicalProcessorInformationEx(WinNT.LOGICAL_PROCESSOR_RELATIONSHIP.RelationAll);
+                .getLogicalProcessorInformationExFutureproof(WinNT.LOGICAL_PROCESSOR_RELATIONSHIP.RelationAll);
         // Used to cross-reference a processor to package pr core
         List<GROUP_AFFINITY[]> packages = new ArrayList<>();
         List<GROUP_AFFINITY> cores = new ArrayList<>();

File: oshi-core/src/main/java/oshi/driver/windows/perfmon/ProcessorInformation.java
Patch:
@@ -45,7 +45,7 @@ public final class ProcessorInformation {
     private static final String PROCESSOR_INFORMATION = "Processor Information";
 
     // For Win7+ ... NAME field includes NUMA nodes
-    private static final String WIN32_PERF_RAW_DATA_COUNTERS_PROCESSOR_INFORMATION_WHERE_NOT_NAME_LIKE_TOTAL = "Win32_PerfRawData_Counters_ProcessorInformation WHERE NOT Name LIKE\"%_Total\"";
+    private static final String WIN32_PERF_RAW_DATA_COUNTERS_PROCESSOR_INFORMATION_WHERE_NOT_NAME_LIKE_TOTAL = "Win32_PerfRawData_Counters_ProcessorInformation WHERE NOT Name LIKE \"%_Total\"";
 
     // For Vista- ... Older systems just have processor #
     private static final String WIN32_PERF_RAW_DATA_PERF_OS_PROCESSOR_WHERE_NOT_NAME_TOTAL = "Win32_PerfRawData_PerfOS_Processor WHERE NOT Name=\"_Total\"";

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsNetworkIF.java
Patch:
@@ -208,6 +208,7 @@ public boolean updateAttributes() {
             this.collisions = ParseUtil.unsignedIntToLong(ifRow.dwOutDiscards); // closest proxy
             this.inDrops = ParseUtil.unsignedIntToLong(ifRow.dwInDiscards); // closest proxy
             this.speed = ParseUtil.unsignedIntToLong(ifRow.dwSpeed);
+            this.ifAlias = ""; // not supported by MIB_IFROW
         }
         this.timeStamp = System.currentTimeMillis();
         return true;

File: oshi-core/src/test/java/oshi/hardware/NetworksTest.java
Patch:
@@ -83,6 +83,8 @@ void testAllNetworkInterfaces() throws IOException {
                 assertThat("Invalid MAC adress corresponds to a known virtual machine", net.isKnownVmMacAddr(),
                         is(false));
             }
+
+            assertThat("NetworkIF.toString() should not be null", net.toString(), is(notNullValue()));
         }
     }
 

File: oshi-core/src/test/java/oshi/hardware/NetworksTest.java
Patch:
@@ -54,6 +54,7 @@ void testAllNetworkInterfaces() throws IOException {
             assertThat("NetworkIF should not be null", net.queryNetworkInterface(), is(notNullValue()));
             assertThat("NetworkIF name should not be null", net.getName(), is(notNullValue()));
             assertThat("NetworkIF display name should not be null", net.getDisplayName(), is(notNullValue()));
+            assertThat("NetworkIF ifAlias should not be null", net.getIfAlias(), is(notNullValue()));
             assertThat("NetworkIF IPv4 address should not be null", net.getIPv4addr(), is(notNullValue()));
             assertThat("NetworkIF SubnetMasks should not be null", net.getSubnetMasks(), is(notNullValue()));
             assertThat("NetworkIF IPv6 should not be null", net.getIPv6addr(), is(notNullValue()));

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsOperatingSystem.java
Patch:
@@ -165,7 +165,7 @@ private String parseVersion(WmiResult<OSVersionProperty> versionInfo, int suiteM
         boolean ntWorkstation = WmiUtil.getUint32(versionInfo, OSVersionProperty.PRODUCTTYPE,
                 0) == WinNT.VER_NT_WORKSTATION;
 
-        StringBuilder verLookup = new StringBuilder(major).append('.').append(minor);
+        StringBuilder verLookup = new StringBuilder().append(major).append('.').append(minor);
 
         if (IS_VISTA_OR_GREATER && ntWorkstation) {
             verLookup.append(".nt");

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsNetworkIF.java
Patch:
@@ -49,7 +49,7 @@ public final class WindowsNetworkIF extends AbstractNetworkIF {
     private static final Logger LOG = LoggerFactory.getLogger(WindowsNetworkIF.class);
 
     private static final boolean IS_VISTA_OR_GREATER = VersionHelpers.IsWindowsVistaOrGreater();
-    private static final byte CONNECTOR_PRESENT_BIT = 0b00100000;
+    private static final byte CONNECTOR_PRESENT_BIT = 0b00000100;
 
     private int ifType;
     private int ndisPhysicalMediumType;

File: oshi-core/src/test/java/oshi/SystemInfoTest.java
Patch:
@@ -60,7 +60,8 @@
 import oshi.software.os.OSService;
 import oshi.software.os.OSSession;
 import oshi.software.os.OperatingSystem;
-import oshi.software.os.OperatingSystem.ProcessSort;
+import oshi.software.os.OperatingSystem.ProcessFiltering;
+import oshi.software.os.OperatingSystem.ProcessSorting;
 import oshi.util.FormatUtil;
 import oshi.util.Util;
 
@@ -258,7 +259,7 @@ private static void printProcesses(OperatingSystem os, GlobalMemory memory) {
                 "My PID: " + myProc.getProcessID() + " with affinity " + Long.toBinaryString(myProc.getAffinityMask()));
         oshi.add("Processes: " + os.getProcessCount() + ", Threads: " + os.getThreadCount());
         // Sort by highest CPU
-        List<OSProcess> procs = os.getProcesses(5, ProcessSort.CPU);
+        List<OSProcess> procs = os.getProcesses(ProcessFiltering.ALL_PROCESSES, ProcessSorting.CPU_DESC, 5);
         oshi.add("   PID  %CPU %MEM       VSZ       RSS Name");
         for (int i = 0; i < procs.size() && i < 5; i++) {
             OSProcess p = procs.get(i);

File: oshi-core/src/test/java/oshi/util/FileSystemUtilTest.java
Patch:
@@ -23,14 +23,14 @@
  */
 package oshi.util;
 
-import org.junit.jupiter.api.Test;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 import java.nio.file.PathMatcher;
 import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.hamcrest.MatcherAssert.assertThat;
+import org.junit.jupiter.api.Test;
 
 class FileSystemUtilTest {
 

File: oshi-demo/src/main/java/oshi/demo/gui/ProcessPanel.java
Patch:
@@ -108,7 +108,7 @@ private void init(SystemInfo si) {
         settings.add(memButton);
         cpuButton.setSelected(true);
 
-        TableModel model = new DefaultTableModel(parseProcesses(os.getProcesses(0, null), si), COLUMNS);
+        TableModel model = new DefaultTableModel(parseProcesses(os.getProcesses(null, null, 0), si), COLUMNS);
         JTable procTable = new JTable(model);
         JScrollPane scrollV = new JScrollPane(procTable);
         scrollV.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
@@ -119,7 +119,7 @@ private void init(SystemInfo si) {
 
         Timer timer = new Timer(Config.REFRESH_SLOW, e -> {
             DefaultTableModel tableModel = (DefaultTableModel) procTable.getModel();
-            Object[][] newData = parseProcesses(os.getProcesses(0, null), si);
+            Object[][] newData = parseProcesses(os.getProcesses(null, null, 0), si);
             int rowCount = tableModel.getRowCount();
             for (int row = 0; row < newData.length; row++) {
                 if (row < rowCount) {

File: oshi-core/src/main/java/oshi/driver/windows/perfmon/MemoryInformation.java
Patch:
@@ -38,7 +38,7 @@ public final class MemoryInformation {
     private static final String MEMORY = "Memory";
     private static final String WIN32_PERF_RAW_DATA_PERF_OS_MEMORY = "Win32_PerfRawData_PerfOS_Memory";
 
-    /*
+    /**
      * For pages in/out
      */
     public enum PageSwapProperty implements PdhCounterProperty {

File: oshi-core/src/main/java/oshi/driver/windows/perfmon/PagingFile.java
Patch:
@@ -38,7 +38,7 @@ public final class PagingFile {
     private static final String PAGING_FILE = "Paging File";
     private static final String WIN32_PERF_RAW_DATA_PERF_OS_PAGING_FILE = "Win32_PerfRawData_PerfOS_PagingFile";
 
-    /*
+    /**
      * For swap file usage
      */
     public enum PagingPercentProperty implements PdhCounterProperty {

File: oshi-core/src/main/java/oshi/driver/windows/perfmon/SystemInformation.java
Patch:
@@ -38,7 +38,7 @@ public final class SystemInformation {
     private static final String SYSTEM = "System";
     private static final String WIN32_PERF_RAW_DATA_PERF_OS_SYSTEM = "Win32_PerfRawData_PerfOS_System";
 
-    /*
+    /**
      * Context switch property
      */
     public enum ContextSwitchProperty implements PdhCounterProperty {

File: oshi-core/src/main/java/oshi/hardware/common/AbstractHWDiskStore.java
Patch:
@@ -27,6 +27,9 @@
 import oshi.hardware.HWDiskStore;
 import oshi.util.FormatUtil;
 
+/**
+ * Common methods for platform HWDiskStore classes
+ */
 @ThreadSafe
 public abstract class AbstractHWDiskStore implements HWDiskStore {
 

File: oshi-core/src/main/java/oshi/hardware/platform/unix/openbsd/OpenBsdVirtualMemory.java
Patch:
@@ -35,7 +35,7 @@
 import oshi.util.tuples.Triplet;
 
 /**
- * Memory obtained by swapinfo
+ * Memory info on OpenBSD
  */
 @ThreadSafe
 final class OpenBsdVirtualMemory extends AbstractVirtualMemory {

File: oshi-core/src/main/java/oshi/jna/platform/unix/openbsd/OpenBsdLibc.java
Patch:
@@ -80,6 +80,9 @@ public interface OpenBsdLibc extends CLibrary {
     int UINT64_SIZE = Native.getNativeSize(long.class);
     int INT_SIZE = Native.getNativeSize(int.class);
 
+    /**
+     * OpenBSD Cache stats for memory
+     */
     @FieldOrder({ "numbufs", "numbufpages", "numdirtypages", "numcleanpages", "pendingwrites", "pendingreads",
             "numwrites", "numreads", "cachehits", "busymapped", "dmapages", "highpages", "delwribufs", "kvaslots",
             "kvaslots_avail", "highflips", "highflops", "dmaflips" })

File: oshi-core/src/main/java/oshi/jna/platform/unix/solaris/SolarisLibc.java
Patch:
@@ -43,6 +43,9 @@ public interface SolarisLibc extends CLibrary {
     int UTX_IDSIZE = 4;
     int UTX_HOSTSIZE = 257;
 
+    /**
+     * Connection info
+     */
     @FieldOrder({ "ut_user", "ut_id", "ut_line", "ut_pid", "ut_type", "ut_tv", "ut_session", "ut_syslen", "ut_host" })
     class SolarisUtmpx extends Structure {
         public byte[] ut_user = new byte[UTX_USERSIZE]; // user login name

File: oshi-core/src/main/java/oshi/software/common/AbstractFileSystem.java
Patch:
@@ -31,6 +31,9 @@
 import oshi.software.os.OSFileStore;
 import oshi.util.GlobalConfig;
 
+/**
+ * Common methods for filesystem implementations
+ */
 @ThreadSafe
 public abstract class AbstractFileSystem implements FileSystem {
 

File: oshi-core/src/main/java/oshi/software/common/AbstractInternetProtocolStats.java
Patch:
@@ -28,6 +28,9 @@
 import oshi.driver.unix.NetStat;
 import oshi.software.os.InternetProtocolStats;
 
+/**
+ * Common implementations for IP Stats
+ */
 public abstract class AbstractInternetProtocolStats implements InternetProtocolStats {
 
     public AbstractInternetProtocolStats() {

File: oshi-core/src/main/java/oshi/software/common/AbstractOSFileStore.java
Patch:
@@ -26,6 +26,9 @@
 import oshi.annotation.concurrent.ThreadSafe;
 import oshi.software.os.OSFileStore;
 
+/**
+ * Common implementations for OSFileStore
+ */
 @ThreadSafe
 public abstract class AbstractOSFileStore implements OSFileStore {
 

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxInternetProtocolStats.java
Patch:
@@ -49,6 +49,9 @@
 import oshi.util.platform.linux.ProcPath;
 import oshi.util.tuples.Pair;
 
+/**
+ * Internet Protocol Stats implementation
+ */
 @ThreadSafe
 public class LinuxInternetProtocolStats extends AbstractInternetProtocolStats {
 

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxOSFileStore.java
Patch:
@@ -27,6 +27,9 @@
 import oshi.software.common.AbstractOSFileStore;
 import oshi.software.os.OSFileStore;
 
+/**
+ * OSFileStore implementation
+ */
 @ThreadSafe
 public class LinuxOSFileStore extends AbstractOSFileStore {
 

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxOSProcess.java
Patch:
@@ -55,6 +55,9 @@
 import oshi.util.Util;
 import oshi.util.platform.linux.ProcPath;
 
+/**
+ * OSProcess implemenation
+ */
 @ThreadSafe
 public class LinuxOSProcess extends AbstractOSProcess {
 

File: oshi-core/src/main/java/oshi/software/os/mac/MacInternetProtocolStats.java
Patch:
@@ -69,6 +69,9 @@
 import oshi.util.platform.mac.SysctlUtil;
 import oshi.util.tuples.Pair;
 
+/**
+ * Internet Protocol Stats implementation
+ */
 @ThreadSafe
 public class MacInternetProtocolStats extends AbstractInternetProtocolStats {
 

File: oshi-core/src/main/java/oshi/software/os/mac/MacOSFileStore.java
Patch:
@@ -27,6 +27,9 @@
 import oshi.software.common.AbstractOSFileStore;
 import oshi.software.os.OSFileStore;
 
+/**
+ * OSFileStore implementation
+ */
 @ThreadSafe
 public class MacOSFileStore extends AbstractOSFileStore {
 

File: oshi-core/src/main/java/oshi/software/os/mac/MacOSProcess.java
Patch:
@@ -60,6 +60,9 @@
 import oshi.util.ExecutingCommand;
 import oshi.util.platform.mac.SysctlUtil;
 
+/**
+ * OSProcess implemenation
+ */
 @ThreadSafe
 public class MacOSProcess extends AbstractOSProcess {
 

File: oshi-core/src/main/java/oshi/software/os/unix/aix/AixInternetProtocolStats.java
Patch:
@@ -35,6 +35,9 @@
 import oshi.jna.platform.unix.aix.Perfstat.perfstat_protocol_t;
 import oshi.software.common.AbstractInternetProtocolStats;
 
+/**
+ * Internet Protocol Stats implementation
+ */
 @ThreadSafe
 public class AixInternetProtocolStats extends AbstractInternetProtocolStats {
 

File: oshi-core/src/main/java/oshi/software/os/unix/aix/AixOSFileStore.java
Patch:
@@ -27,6 +27,9 @@
 import oshi.software.common.AbstractOSFileStore;
 import oshi.software.os.OSFileStore;
 
+/**
+ * OSFileStore implementation
+ */
 @ThreadSafe
 public class AixOSFileStore extends AbstractOSFileStore {
 

File: oshi-core/src/main/java/oshi/software/os/unix/aix/AixOSProcess.java
Patch:
@@ -50,6 +50,9 @@
 import oshi.util.ParseUtil;
 import oshi.util.tuples.Pair;
 
+/**
+ * OSProcess implemenation
+ */
 @ThreadSafe
 public class AixOSProcess extends AbstractOSProcess {
 

File: oshi-core/src/main/java/oshi/software/os/unix/freebsd/FreeBsdFileSystem.java
Patch:
@@ -40,10 +40,9 @@
 import oshi.util.platform.unix.freebsd.BsdSysctlUtil;
 
 /**
- * The Solaris File System contains {@link oshi.software.os.OSFileStore}s which
+ * The FreeBSD File System contains {@link oshi.software.os.OSFileStore}s which
  * are a storage pool, device, partition, volume, concrete file system or other
- * implementation specific means of file storage. In Linux, these are found in
- * the /proc/mount filesystem, excluding temporary and kernel mounts.
+ * implementation specific means of file storage.
  */
 @ThreadSafe
 public final class FreeBsdFileSystem extends AbstractFileSystem {

File: oshi-core/src/main/java/oshi/software/os/unix/freebsd/FreeBsdInternetProtocolStats.java
Patch:
@@ -39,6 +39,9 @@
 import oshi.util.platform.unix.freebsd.BsdSysctlUtil;
 import oshi.util.tuples.Pair;
 
+/**
+ * Internet Protocol Stats implementation
+ */
 @ThreadSafe
 public class FreeBsdInternetProtocolStats extends AbstractInternetProtocolStats {
 

File: oshi-core/src/main/java/oshi/software/os/unix/freebsd/FreeBsdOSFileStore.java
Patch:
@@ -27,6 +27,9 @@
 import oshi.software.common.AbstractOSFileStore;
 import oshi.software.os.OSFileStore;
 
+/**
+ * OSFileStore implementation
+ */
 @ThreadSafe
 public class FreeBsdOSFileStore extends AbstractOSFileStore {
 

File: oshi-core/src/main/java/oshi/software/os/unix/freebsd/FreeBsdOSProcess.java
Patch:
@@ -48,6 +48,9 @@
 import oshi.util.ParseUtil;
 import oshi.util.platform.unix.freebsd.ProcstatUtil;
 
+/**
+ * OSProcess implemenation
+ */
 @ThreadSafe
 public class FreeBsdOSProcess extends AbstractOSProcess {
 

File: oshi-core/src/main/java/oshi/software/os/unix/openbsd/OpenBsdInternetProtocolStats.java
Patch:
@@ -27,6 +27,9 @@
 import oshi.driver.unix.NetStat;
 import oshi.software.common.AbstractInternetProtocolStats;
 
+/**
+ * Internet Protocol Stats implementation
+ */
 @ThreadSafe
 public class OpenBsdInternetProtocolStats extends AbstractInternetProtocolStats {
 

File: oshi-core/src/main/java/oshi/software/os/unix/openbsd/OpenBsdOSFileStore.java
Patch:
@@ -27,6 +27,9 @@
 import oshi.software.common.AbstractOSFileStore;
 import oshi.software.os.OSFileStore;
 
+/**
+ * OSFileStore implementation
+ */
 @ThreadSafe
 public class OpenBsdOSFileStore extends AbstractOSFileStore {
 

File: oshi-core/src/main/java/oshi/software/os/unix/openbsd/OpenBsdOSProcess.java
Patch:
@@ -48,6 +48,9 @@
 import oshi.util.ParseUtil;
 import oshi.util.platform.unix.openbsd.FstatUtil;
 
+/**
+ * OSProcess implemenation
+ */
 @ThreadSafe
 public class OpenBsdOSProcess extends AbstractOSProcess {
 

File: oshi-core/src/main/java/oshi/software/os/unix/solaris/SolarisInternetProtocolStats.java
Patch:
@@ -30,6 +30,9 @@
 import oshi.util.ExecutingCommand;
 import oshi.util.ParseUtil;
 
+/**
+ * Internet Protocol Stats implementation
+ */
 @ThreadSafe
 public class SolarisInternetProtocolStats extends AbstractInternetProtocolStats {
 

File: oshi-core/src/main/java/oshi/software/os/unix/solaris/SolarisOSFileStore.java
Patch:
@@ -27,6 +27,9 @@
 import oshi.software.common.AbstractOSFileStore;
 import oshi.software.os.OSFileStore;
 
+/**
+ * OSFileStore implementation
+ */
 @ThreadSafe
 public class SolarisOSFileStore extends AbstractOSFileStore {
 

File: oshi-core/src/main/java/oshi/software/os/unix/solaris/SolarisOSProcess.java
Patch:
@@ -45,6 +45,9 @@
 import oshi.util.LsofUtil;
 import oshi.util.ParseUtil;
 
+/**
+ * OSProcess implemenation
+ */
 @ThreadSafe
 public class SolarisOSProcess extends AbstractOSProcess {
 

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsInternetProtocolStats.java
Patch:
@@ -63,6 +63,9 @@
 import oshi.software.common.AbstractInternetProtocolStats;
 import oshi.util.ParseUtil;
 
+/**
+ * Internet Protocol Stats implementation
+ */
 @ThreadSafe
 public class WindowsInternetProtocolStats extends AbstractInternetProtocolStats {
 

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsOSFileStore.java
Patch:
@@ -29,6 +29,9 @@
 import oshi.software.common.AbstractOSFileStore;
 import oshi.software.os.OSFileStore;
 
+/**
+ * OSFileStore implementation
+ */
 @ThreadSafe
 public class WindowsOSFileStore extends AbstractOSFileStore {
 

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsOSProcess.java
Patch:
@@ -70,6 +70,9 @@
 import oshi.util.platform.windows.WmiUtil;
 import oshi.util.tuples.Pair;
 
+/**
+ * OSProcess implemenation
+ */
 @ThreadSafe
 public class WindowsOSProcess extends AbstractOSProcess {
 

File: oshi-core/src/main/java/oshi/driver/windows/perfmon/PhysicalDisk.java
Patch:
@@ -53,7 +53,7 @@ public enum PhysicalDiskProperty implements PdhCounterWildcardProperty {
         DISKWRITESPERSEC("Disk Writes/sec"), //
         DISKWRITEBYTESPERSEC("Disk Write Bytes/sec"), //
         CURRENTDISKQUEUELENGTH("Current Disk Queue Length"), //
-        PERCENTIDLETIME("% Idle Time");
+        PERCENTDISKTIME("% Disk Time");
 
         private final String counter;
 

File: oshi-core/src/main/java/oshi/driver/windows/perfmon/PhysicalDisk.java
Patch:
@@ -53,7 +53,7 @@ public enum PhysicalDiskProperty implements PdhCounterWildcardProperty {
         DISKWRITESPERSEC("Disk Writes/sec"), //
         DISKWRITEBYTESPERSEC("Disk Write Bytes/sec"), //
         CURRENTDISKQUEUELENGTH("Current Disk Queue Length"), //
-        PERCENTIDLETIME("% Idle Time");
+        PERCENTDISKTIME("% Disk Time");
 
         private final String counter;
 

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdComputerSystem.java
Patch:
@@ -31,6 +31,7 @@
 import oshi.hardware.Baseboard;
 import oshi.hardware.Firmware;
 import oshi.hardware.common.AbstractComputerSystem;
+import oshi.hardware.platform.unix.UnixBaseboard;
 import oshi.util.Constants;
 import oshi.util.ExecutingCommand;
 import oshi.util.ParseUtil;
@@ -74,7 +75,7 @@ public Firmware createFirmware() {
 
     @Override
     public Baseboard createBaseboard() {
-        return new FreeBsdBaseboard(manufModelSerialUuidVers.get().getA(), manufModelSerialUuidVers.get().getB(),
+        return new UnixBaseboard(manufModelSerialUuidVers.get().getA(), manufModelSerialUuidVers.get().getB(),
                 manufModelSerialUuidVers.get().getC(), manufModelSerialUuidVers.get().getE());
     }
 

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdHardwareAbstractionLayer.java
Patch:
@@ -38,6 +38,7 @@
 import oshi.hardware.SoundCard;
 import oshi.hardware.UsbDevice;
 import oshi.hardware.common.AbstractHardwareAbstractionLayer;
+import oshi.hardware.platform.unix.BsdNetworkIF;
 import oshi.hardware.platform.unix.UnixDisplay;
 
 /**
@@ -83,7 +84,7 @@ public List<Display> getDisplays() {
 
     @Override
     public List<NetworkIF> getNetworkIFs(boolean includeLocalInterfaces) {
-        return FreeBsdNetworkIF.getNetworks(includeLocalInterfaces);
+        return BsdNetworkIF.getNetworks(includeLocalInterfaces);
     }
 
     @Override

File: oshi-core/src/main/java/oshi/hardware/platform/unix/openbsd/OpenBsdComputerSystem.java
Patch:
@@ -30,6 +30,7 @@
 import oshi.hardware.Baseboard;
 import oshi.hardware.Firmware;
 import oshi.hardware.common.AbstractComputerSystem;
+import oshi.hardware.platform.unix.UnixBaseboard;
 import oshi.util.Constants;
 import oshi.util.platform.unix.openbsd.OpenBsdSysctlUtil;
 
@@ -70,7 +71,7 @@ protected Firmware createFirmware() {
 
     @Override
     protected Baseboard createBaseboard() {
-        return new OpenBsdBaseboard(manufacturer.get(), model.get(), serialNumber.get(),
+        return new UnixBaseboard(manufacturer.get(), model.get(), serialNumber.get(),
                 OpenBsdSysctlUtil.sysctl("hw.product", Constants.UNKNOWN));
     }
 

File: oshi-core/src/main/java/oshi/hardware/platform/unix/openbsd/OpenBsdHardwareAbstractionLayer.java
Patch:
@@ -38,6 +38,7 @@
 import oshi.hardware.SoundCard;
 import oshi.hardware.UsbDevice;
 import oshi.hardware.common.AbstractHardwareAbstractionLayer;
+import oshi.hardware.platform.unix.BsdNetworkIF;
 import oshi.hardware.platform.unix.UnixDisplay;
 
 /**
@@ -83,7 +84,7 @@ public List<Display> getDisplays() {
 
     @Override
     public List<NetworkIF> getNetworkIFs(boolean includeLocalInterfaces) {
-        return OpenBsdNetworkIF.getNetworks(includeLocalInterfaces);
+        return BsdNetworkIF.getNetworks(includeLocalInterfaces);
     }
 
     @Override

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisComputerSystem.java
Patch:
@@ -31,6 +31,7 @@
 import oshi.hardware.Baseboard;
 import oshi.hardware.Firmware;
 import oshi.hardware.common.AbstractComputerSystem;
+import oshi.hardware.platform.unix.UnixBaseboard;
 import oshi.util.Constants;
 import oshi.util.ExecutingCommand;
 import oshi.util.ParseUtil;
@@ -72,7 +73,7 @@ public Firmware createFirmware() {
 
     @Override
     public Baseboard createBaseboard() {
-        return new SolarisBaseboard(smbiosStrings.get().boardManufacturer, smbiosStrings.get().boardModel,
+        return new UnixBaseboard(smbiosStrings.get().boardManufacturer, smbiosStrings.get().boardModel,
                 smbiosStrings.get().boardSerialNumber, smbiosStrings.get().boardVersion);
     }
 

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxHardwareAbstractionLayer.java
Patch:
@@ -38,6 +38,7 @@
 import oshi.hardware.SoundCard;
 import oshi.hardware.UsbDevice;
 import oshi.hardware.common.AbstractHardwareAbstractionLayer;
+import oshi.hardware.platform.unix.UnixDisplay;
 
 /**
  * LinuxHardwareAbstractionLayer class.
@@ -77,7 +78,7 @@ public List<HWDiskStore> getDiskStores() {
 
     @Override
     public List<Display> getDisplays() {
-        return LinuxDisplay.getDisplays();
+        return UnixDisplay.getDisplays();
     }
 
     @Override

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacCentralProcessor.java
Patch:
@@ -155,9 +155,9 @@ public long[] querySystemCpuLoadTicks() {
 
     @Override
     public long[] queryCurrentFreq() {
-        long[] freqs = new long[getLogicalProcessorCount()];
-        Arrays.fill(freqs, SysctlUtil.sysctl("hw.cpufrequency", -1L));
-        return freqs;
+        long[] freq = new long[1];
+        freq[0] = SysctlUtil.sysctl("hw.cpufrequency", -1L);
+        return freq;
     }
 
     @Override

File: oshi-core/src/main/java/oshi/hardware/platform/unix/aix/AixHardwareAbstractionLayer.java
Patch:
@@ -44,6 +44,7 @@
 import oshi.hardware.SoundCard;
 import oshi.hardware.UsbDevice;
 import oshi.hardware.common.AbstractHardwareAbstractionLayer;
+import oshi.hardware.platform.unix.UnixDisplay;
 import oshi.jna.platform.unix.aix.Perfstat.perfstat_disk_t;
 
 /**
@@ -89,7 +90,7 @@ public List<HWDiskStore> getDiskStores() {
 
     @Override
     public List<Display> getDisplays() {
-        return AixDisplay.getDisplays();
+        return UnixDisplay.getDisplays();
     }
 
     @Override

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdHardwareAbstractionLayer.java
Patch:
@@ -38,6 +38,7 @@
 import oshi.hardware.SoundCard;
 import oshi.hardware.UsbDevice;
 import oshi.hardware.common.AbstractHardwareAbstractionLayer;
+import oshi.hardware.platform.unix.UnixDisplay;
 
 /**
  * FreeBsdHardwareAbstractionLayer class.
@@ -77,7 +78,7 @@ public List<HWDiskStore> getDiskStores() {
 
     @Override
     public List<Display> getDisplays() {
-        return FreeBsdDisplay.getDisplays();
+        return UnixDisplay.getDisplays();
     }
 
     @Override

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdUsbDevice.java
Patch:
@@ -153,7 +153,7 @@ private static void addDevicesToList(List<UsbDevice> deviceList, List<UsbDevice>
     }
 
     /**
-     * Recursively creates SolarisUsbDevices by fetching information from maps to
+     * Recursively creates FreeBsdUsbDevices by fetching information from maps to
      * populate fields
      *
      * @param devPath

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisHardwareAbstractionLayer.java
Patch:
@@ -38,6 +38,7 @@
 import oshi.hardware.SoundCard;
 import oshi.hardware.UsbDevice;
 import oshi.hardware.common.AbstractHardwareAbstractionLayer;
+import oshi.hardware.platform.unix.UnixDisplay;
 
 /**
  * SolarisHardwareAbstractionLayer class.
@@ -77,7 +78,7 @@ public List<HWDiskStore> getDiskStores() {
 
     @Override
     public List<Display> getDisplays() {
-        return SolarisDisplay.getDisplays();
+        return UnixDisplay.getDisplays();
     }
 
     @Override

File: oshi-core/src/main/java/oshi/software/os/unix/freebsd/FreeBsdFileSystem.java
Patch:
@@ -64,7 +64,8 @@ public final class FreeBsdFileSystem extends AbstractFileSystem {
 
     @Override
     public List<OSFileStore> getFileStores(boolean localOnly) {
-        // Find any partition UUIDs and map them
+        // TODO map mount point to UUID?
+        // is /etc/fstab useful for this?
         Map<String, String> uuidMap = new HashMap<>();
         // Now grab dmssg output
         String device = "";

File: oshi-core/src/main/java/oshi/driver/unix/NetStat.java
Patch:
@@ -83,8 +83,8 @@ public static List<IPConnection> queryNetstat() {
                     Pair<byte[], Integer> local = parseIP(split[3]);
                     Pair<byte[], Integer> foreign = parseIP(split[4]);
                     connections.add(new IPConnection(type, local.getA(), local.getB(), foreign.getA(), foreign.getB(),
-                            state == null ? null : TcpState.valueOf(state), ParseUtil.parseIntOrDefault(split[2], 0),
-                            ParseUtil.parseIntOrDefault(split[1], 0), -1));
+                            state == null ? TcpState.NONE : TcpState.valueOf(state),
+                            ParseUtil.parseIntOrDefault(split[2], 0), ParseUtil.parseIntOrDefault(split[1], 0), -1));
                 }
             }
         }

File: oshi-core/src/main/java/oshi/util/ParseUtil.java
Patch:
@@ -1112,7 +1112,7 @@ public static List<Integer> parseHyphenatedIntList(String str) {
      * @return The address as an array of four bytes
      */
     public static byte[] parseIntToIP(int ip) {
-        return ByteBuffer.allocate(4).order(ByteOrder.nativeOrder()).putInt(ip).array();
+        return ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN).putInt(ip).array();
     }
 
     /**
@@ -1124,7 +1124,7 @@ public static byte[] parseIntToIP(int ip) {
      * @return The address as an array of sizteen bytes
      */
     public static byte[] parseIntArrayToIP(int[] ip6) {
-        ByteBuffer bb = ByteBuffer.allocate(16).order(ByteOrder.nativeOrder());
+        ByteBuffer bb = ByteBuffer.allocate(16).order(ByteOrder.LITTLE_ENDIAN);
         for (int i : ip6) {
             bb.putInt(i);
         }

File: oshi-core/src/main/java/oshi/software/os/unix/aix/AixInternetProtocolStats.java
Patch:
@@ -33,10 +33,10 @@
 import oshi.annotation.concurrent.ThreadSafe;
 import oshi.driver.unix.aix.perfstat.PerfstatProtocol;
 import oshi.jna.platform.unix.aix.Perfstat.perfstat_protocol_t;
-import oshi.software.os.InternetProtocolStats;
+import oshi.software.common.AbstractInternetProtocolStats;
 
 @ThreadSafe
-public class AixInternetProtocolStats implements InternetProtocolStats {
+public class AixInternetProtocolStats extends AbstractInternetProtocolStats {
 
     private Supplier<perfstat_protocol_t[]> ipstats = memoize(PerfstatProtocol::queryProtocols, defaultExpiration());
 

File: oshi-core/src/main/java/oshi/software/os/unix/solaris/SolarisInternetProtocolStats.java
Patch:
@@ -26,12 +26,12 @@
 import java.util.List;
 
 import oshi.annotation.concurrent.ThreadSafe;
-import oshi.software.os.InternetProtocolStats;
+import oshi.software.common.AbstractInternetProtocolStats;
 import oshi.util.ExecutingCommand;
 import oshi.util.ParseUtil;
 
 @ThreadSafe
-public class SolarisInternetProtocolStats implements InternetProtocolStats {
+public class SolarisInternetProtocolStats extends AbstractInternetProtocolStats {
 
     @Override
     public TcpStats getTCPv4Stats() {

File: oshi-core/src/main/java/oshi/util/platform/linux/ProcPath.java
Patch:
@@ -48,6 +48,7 @@ public final class ProcPath {
     public static final String DISKSTATS = PROC + "/diskstats";
     public static final String MEMINFO = PROC + "/meminfo";
     public static final String MOUNTS = PROC + "/mounts";
+    public static final String NET = PROC + "/net";
     public static final String PID_CMDLINE = PROC + "/%d/cmdline";
     public static final String PID_CWD = PROC + "/%d/cwd";
     public static final String PID_EXE = PROC + "/%d/exe";

File: oshi-core/src/main/java/oshi/software/os/unix/solaris/SolarisOSProcess.java
Patch:
@@ -236,7 +236,7 @@ public long getAffinityMask() {
     public List<OSThread> getThreadDetails() {
         List<String> threadListInfo1 = ExecutingCommand
                 .runNative("ps -o lwp,s,etime,stime,time,addr,pri -p " + getProcessID());
-        List<String> threadListInfo2 = ExecutingCommand.runNative("prstat -L -v -p " + getProcessID());
+        List<String> threadListInfo2 = ExecutingCommand.runNative("prstat -L -v -p " + getProcessID() + " 1 1");
         Map<Integer, String[]> threadMap = parseAndMergeThreadInfo(threadListInfo1, threadListInfo2);
         if (threadMap.keySet().size() > 1) {
             return threadMap.entrySet().stream().map(entry -> new SolarisOSThread(getProcessID(), entry.getValue()))

File: oshi-core/src/main/java/oshi/software/os/unix/solaris/SolarisOSThread.java
Patch:
@@ -98,7 +98,7 @@ public int getPriority() {
     public boolean updateAttributes() {
         List<String> threadListInfo1 = ExecutingCommand
                 .runNative("ps -o lwp,s,etime,stime,time,addr,pri -p " + getOwningProcessId());
-        List<String> threadListInfo2 = ExecutingCommand.runNative("prstat -L -v -p " + getOwningProcessId());
+        List<String> threadListInfo2 = ExecutingCommand.runNative("prstat -L -v -p " + getOwningProcessId() + " 1 1");
         Map<Integer, String[]> threadMap = SolarisOSProcess.parseAndMergeThreadInfo(threadListInfo1, threadListInfo2);
         if (threadMap.keySet().size() > 1) {
             Optional<String[]> split = threadMap.entrySet().stream()

File: oshi-core/src/test/java/oshi/SystemInfoTest.java
Patch:
@@ -31,8 +31,10 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
+import java.util.concurrent.TimeUnit;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.Timeout;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -77,6 +79,7 @@ public class SystemInfoTest { // NOSONAR squid:S5786
      * Test that this platform is implemented..
      */
     @Test
+    @Timeout(value = 5, unit = TimeUnit.MINUTES)
     void testPlatformEnum() {
         assertThat("Unsupported OS", SystemInfo.getCurrentPlatformEnum(), is(not(PlatformEnum.UNKNOWN)));
         // Exercise the main method

File: oshi-core/src/test/java/oshi/util/MemoizerTest.java
Patch:
@@ -46,6 +46,7 @@
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.Timeout;
 
 final class MemoizerTest {
     // We want enough threads that some of them are forced to wait
@@ -70,6 +71,7 @@ void after() throws InterruptedException {
     }
 
     @Test
+    @Timeout(value = 2, unit = TimeUnit.MINUTES)
     void get() throws Throwable {
         // With max time limits these tests take a minute to run. But with no changes to
         // the memoizer it's simply testing overkill. Use a RNG to limit these tests

File: oshi-core/src/main/java/oshi/driver/unix/solaris/kstat/SystemPages.java
Patch:
@@ -51,9 +51,9 @@ public static Pair<Long, Long> queryAvailableTotal() {
         long memTotal = 0;
         // Get first result
         try (KstatChain kc = KstatUtil.openChain()) {
-            Kstat ksp = kc.lookup(null, -1, "system_pages");
+            Kstat ksp = KstatChain.lookup(null, -1, "system_pages");
             // Set values
-            if (ksp != null && kc.read(ksp)) {
+            if (ksp != null && KstatChain.read(ksp)) {
                 memAvailable = KstatUtil.dataLookupLong(ksp, "availrmem"); // not a typo
                 memTotal = KstatUtil.dataLookupLong(ksp, "physmem");
             }

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisHWDiskStore.java
Patch:
@@ -107,8 +107,8 @@ public List<HWPartition> getPartitions() {
     @Override
     public boolean updateAttributes() {
         try (KstatChain kc = KstatUtil.openChain()) {
-            Kstat ksp = kc.lookup(null, 0, getName());
-            if (ksp != null && kc.read(ksp)) {
+            Kstat ksp = KstatChain.lookup(null, 0, getName());
+            if (ksp != null && KstatChain.read(ksp)) {
                 KstatIO data = new KstatIO(ksp.ks_data);
                 this.reads = data.reads;
                 this.writes = data.writes;

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisNetworkIF.java
Patch:
@@ -124,11 +124,11 @@ public long getTimeStamp() {
     @Override
     public boolean updateAttributes() {
         try (KstatChain kc = KstatUtil.openChain()) {
-            Kstat ksp = kc.lookup("link", -1, getName());
+            Kstat ksp = KstatChain.lookup("link", -1, getName());
             if (ksp == null) { // Solaris 10 compatibility
-                ksp = kc.lookup(null, -1, getName());
+                ksp = KstatChain.lookup(null, -1, getName());
             }
-            if (ksp != null && kc.read(ksp)) {
+            if (ksp != null && KstatChain.read(ksp)) {
                 this.bytesSent = KstatUtil.dataLookupLong(ksp, "obytes64");
                 this.bytesRecv = KstatUtil.dataLookupLong(ksp, "rbytes64");
                 this.packetsSent = KstatUtil.dataLookupLong(ksp, "opackets64");

File: oshi-core/src/main/java/oshi/software/os/unix/solaris/SolarisOperatingSystem.java
Patch:
@@ -182,7 +182,7 @@ public long getSystemUptime() {
 
     private static long querySystemUptime() {
         try (KstatChain kc = KstatUtil.openChain()) {
-            Kstat ksp = kc.lookup("unix", 0, "system_misc");
+            Kstat ksp = KstatChain.lookup("unix", 0, "system_misc");
             if (ksp != null) {
                 // Snap Time is in nanoseconds; divide for seconds
                 return ksp.ks_snaptime / 1_000_000_000L;
@@ -198,8 +198,8 @@ public long getSystemBootTime() {
 
     private static long querySystemBootTime() {
         try (KstatChain kc = KstatUtil.openChain()) {
-            Kstat ksp = kc.lookup("unix", 0, "system_misc");
-            if (ksp != null && kc.read(ksp)) {
+            Kstat ksp = KstatChain.lookup("unix", 0, "system_misc");
+            if (ksp != null && KstatChain.read(ksp)) {
                 return KstatUtil.dataLookupLong(ksp, "boot_time");
             }
         }

File: oshi-core/src/test/java/oshi/hardware/NetworksTest.java
Patch:
@@ -54,7 +54,6 @@ void testAllNetworkInterfaces() throws IOException {
             assertThat("NetworkIF should not be null", net.queryNetworkInterface(), is(notNullValue()));
             assertThat("NetworkIF name should not be null", net.getName(), is(notNullValue()));
             assertThat("NetworkIF display name should not be null", net.getDisplayName(), is(notNullValue()));
-            assertThat("NetworkIF MacAddress should not be null", net.getMacaddr(), is(notNullValue()));
             assertThat("NetworkIF IPv4 address should not be null", net.getIPv4addr(), is(notNullValue()));
             assertThat("NetworkIF SubnetMasks should not be null", net.getSubnetMasks(), is(notNullValue()));
             assertThat("NetworkIF IPv6 should not be null", net.getIPv6addr(), is(notNullValue()));
@@ -130,6 +129,8 @@ void testNonLocalNetworkInterfaces() throws IOException {
 
             // On Windows, virtual interfaces may return max unsigned int value, -1.
             assertThat("NetworkIF MTU should not be negative", net.getMTU(), is(greaterThanOrEqualTo(0)));
+
+            assertThat("NetworkIF MacAddress should not be null", net.getMacaddr(), is(notNullValue()));
         }
     }
 }

File: oshi-core/src/test/java/oshi/util/LsofUtilTest.java
Patch:
@@ -43,7 +43,8 @@ class LsofUtilTest {
     @Test
     void testLsof() {
         if (!SystemInfo.getCurrentPlatformEnum().equals(PlatformEnum.WINDOWS)
-                && !SystemInfo.getCurrentPlatformEnum().equals(PlatformEnum.FREEBSD)) {
+                && !SystemInfo.getCurrentPlatformEnum().equals(PlatformEnum.FREEBSD)
+                && !SystemInfo.getCurrentPlatformEnum().equals(PlatformEnum.SOLARIS)) {
             int pid = new SystemInfo().getOperatingSystem().getProcessId();
 
             assertThat("Open files must be nonnegative", LsofUtil.getOpenFiles(pid), is(greaterThanOrEqualTo(0L)));

File: oshi-core/src/main/java/oshi/util/platform/unix/freebsd/ProcstatUtil.java
Patch:
@@ -53,7 +53,7 @@ public static Map<Integer, String> getCwdMap(int pid) {
         List<String> procstat = ExecutingCommand.runNative("procstat -f " + (pid < 0 ? "-a" : pid));
         Map<Integer, String> cwdMap = new HashMap<>();
         for (String line : procstat) {
-            String[] split = ParseUtil.whitespaces.split(line, 10);
+            String[] split = ParseUtil.whitespaces.split(line.trim(), 10);
             if (split.length == 10 && split[2].equals("cwd")) {
                 cwdMap.put(ParseUtil.parseIntOrDefault(split[0], -1), split[9]);
             }
@@ -71,7 +71,7 @@ public static Map<Integer, String> getCwdMap(int pid) {
     public static String getCwd(int pid) {
         List<String> procstat = ExecutingCommand.runNative("procstat -f " + pid);
         for (String line : procstat) {
-            String[] split = ParseUtil.whitespaces.split(line, 10);
+            String[] split = ParseUtil.whitespaces.split(line.trim(), 10);
             if (split.length == 10 && split[2].equals("cwd")) {
                 return split[9];
             }
@@ -90,7 +90,7 @@ public static long getOpenFiles(int pid) {
         long fd = 0L;
         List<String> procstat = ExecutingCommand.runNative("procstat -f " + pid);
         for (String line : procstat) {
-            String[] split = ParseUtil.whitespaces.split(line, 10);
+            String[] split = ParseUtil.whitespaces.split(line.trim(), 10);
             if (split.length == 10 && !"Vd-".contains(split[4])) {
                 fd++;
             }

File: oshi-core/src/test/java/oshi/hardware/GlobalMemoryTest.java
Patch:
@@ -58,12 +58,12 @@ void setUp() {
     @Test
     void testGlobalMemory() {
         assertThat("Memory shouldn't be null", memory, is(notNullValue()));
-
         assertThat("Total memory should be greater than zero", memory.getTotal(), is(greaterThan(0L)));
         assertThat("Available memory should be between 0 and total memory", memory.getAvailable(),
                 is(both(greaterThanOrEqualTo(0L)).and(lessThanOrEqualTo(memory.getTotal()))));
         assertThat("Memory page size should be greater than zero", memory.getPageSize(), is(greaterThan(0L)));
-        assertThat("Memory should contain the substring \"Available\"", memory.toString(), containsString("Available"));
+        assertThat("Memory toString should contain the substring \"Available\"", memory.toString(),
+                containsString("Available"));
     }
 
     @Test

File: oshi-core/src/main/java/oshi/software/os/unix/freebsd/FreeBsdInternetProtocolStats.java
Patch:
@@ -36,7 +36,7 @@
 import oshi.jna.platform.unix.CLibrary.BsdUdpstat;
 import oshi.software.os.InternetProtocolStats;
 import oshi.util.ParseUtil;
-import oshi.util.platform.mac.SysctlUtil;
+import oshi.util.platform.unix.freebsd.BsdSysctlUtil;
 import oshi.util.tuples.Pair;
 
 @ThreadSafe
@@ -80,7 +80,7 @@ public UdpStats getUDPv6Stats() {
 
     private static BsdTcpstat queryTcpstat() {
         BsdTcpstat ft = new BsdTcpstat();
-        Memory m = SysctlUtil.sysctl("net.inet.tcp.stats");
+        Memory m = BsdSysctlUtil.sysctl("net.inet.tcp.stats");
         if (m != null && m.size() >= 128) {
             ft.tcps_connattempt = m.getInt(0);
             ft.tcps_accepts = m.getInt(4);
@@ -99,7 +99,7 @@ private static BsdTcpstat queryTcpstat() {
 
     private static BsdUdpstat queryUdpstat() {
         BsdUdpstat ut = new BsdUdpstat();
-        Memory m = SysctlUtil.sysctl("net.inet.udp.stats");
+        Memory m = BsdSysctlUtil.sysctl("net.inet.udp.stats");
         if (m != null && m.size() >= 1644) {
             ut.udps_ipackets = m.getInt(0);
             ut.udps_hdrops = m.getInt(4);

File: oshi-core/src/main/java/oshi/software/os/unix/freebsd/FreeBsdOperatingSystem.java
Patch:
@@ -139,7 +139,7 @@ public List<OSProcess> getChildProcesses(int parentPid, int limit, ProcessSort s
 
     private static List<OSProcess> getProcessListFromPS(int pid) {
         List<OSProcess> procs = new ArrayList<>();
-        String psCommand = "ps -awwxo state,pid,ppid,user,uid,group,gid,nlwp,pri,vsz,rss,etimes,systime,time,comm,args";
+        String psCommand = "ps -awwxo state,pid,ppid,user,uid,group,gid,nlwp,pri,vsz,rss,etimes,systime,time,comm,majflt,minflt,args";
         if (pid >= 0) {
             psCommand += " -p " + pid;
         }
@@ -151,9 +151,9 @@ private static List<OSProcess> getProcessListFromPS(int pid) {
         procList.remove(0);
         // Fill list
         for (String proc : procList) {
-            String[] split = ParseUtil.whitespaces.split(proc.trim(), 16);
+            String[] split = ParseUtil.whitespaces.split(proc.trim(), 18);
             // Elements should match ps command order
-            if (split.length == 16) {
+            if (split.length == 18) {
                 procs.add(new FreeBsdOSProcess(pid < 0 ? ParseUtil.parseIntOrDefault(split[1], 0) : pid, split));
             }
         }

File: oshi-core/src/main/java/oshi/util/platform/unix/freebsd/BsdSysctlUtil.java
Patch:
@@ -30,7 +30,6 @@
 import com.sun.jna.Native;
 import com.sun.jna.Pointer;
 import com.sun.jna.Structure;
-import com.sun.jna.platform.mac.SystemB;
 import com.sun.jna.ptr.IntByReference;
 
 import oshi.annotation.concurrent.ThreadSafe;
@@ -141,12 +140,12 @@ public static boolean sysctl(String name, Structure struct) {
      */
     public static Memory sysctl(String name) {
         IntByReference size = new IntByReference();
-        if (0 != SystemB.INSTANCE.sysctlbyname(name, null, size, null, 0)) {
+        if (0 != FreeBsdLibc.INSTANCE.sysctlbyname(name, null, size, null, 0)) {
             LOG.error(SYSCTL_FAIL, name, Native.getLastError());
             return null;
         }
         Memory m = new Memory(size.getValue());
-        if (0 != SystemB.INSTANCE.sysctlbyname(name, m, size, null, 0)) {
+        if (0 != FreeBsdLibc.INSTANCE.sysctlbyname(name, m, size, null, 0)) {
             LOG.error(SYSCTL_FAIL, name, Native.getLastError());
             return null;
         }

File: oshi-core/src/test/java/oshi/software/os/OperatingSystemTest.java
Patch:
@@ -307,8 +307,7 @@ void testGetCommandLine() {
             }
         }
 
-        assertThat("Processes with non-empty command line should be 1 or higher",
-                processesWithNonEmptyCmdLine,
+        assertThat("Processes with non-empty command line should be 1 or higher", processesWithNonEmptyCmdLine,
                 is(greaterThan(0)));
     }
 

File: oshi-core/src/test/java/oshi/util/LsofUtilTest.java
Patch:
@@ -42,7 +42,8 @@ class LsofUtilTest {
 
     @Test
     void testLsof() {
-        if (!SystemInfo.getCurrentPlatformEnum().equals(PlatformEnum.WINDOWS)) {
+        if (!SystemInfo.getCurrentPlatformEnum().equals(PlatformEnum.WINDOWS)
+                && !SystemInfo.getCurrentPlatformEnum().equals(PlatformEnum.FREEBSD)) {
             int pid = new SystemInfo().getOperatingSystem().getProcessId();
 
             assertThat("Open files must be nonnegative", LsofUtil.getOpenFiles(pid), is(greaterThanOrEqualTo(0L)));

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsOperatingSystem.java
Patch:
@@ -292,7 +292,8 @@ public List<OSProcess> getChildProcesses(int parentPid, int limit, ProcessSort s
         } finally {
             Kernel32.INSTANCE.CloseHandle(snapshot);
         }
-        List<OSProcess> procList = getProcesses(childPids);
+        // Get modifiable version
+        List<OSProcess> procList = processMapToList(childPids);
         List<OSProcess> sorted = processSort(procList, limit, sort);
         return Collections.unmodifiableList(sorted);
     }

File: oshi-core/src/test/java/oshi/software/os/OperatingSystemTest.java
Patch:
@@ -40,6 +40,7 @@
 import oshi.SystemInfo;
 import oshi.software.os.OSProcess.State;
 import oshi.software.os.OperatingSystem.OSVersionInfo;
+import oshi.software.os.OperatingSystem.ProcessSort;
 
 /**
  * Test OS
@@ -231,7 +232,8 @@ public void testGetChildProcesses() {
         matched = 0;
         total = 0;
         for (Integer i : manyChildSet) {
-            if (os.getChildProcesses(i, 0, null).size() > 1) {
+            // Use a non-null sorting for test purposes
+            if (os.getChildProcesses(i, Integer.MAX_VALUE, ProcessSort.PID).size() > 1) {
                 matched++;
             }
             // Quit if enough to test

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsOperatingSystem.java
Patch:
@@ -451,7 +451,7 @@ private static boolean enableDebugPrivilege() {
                 LOG.error("AdjustTokenPrivileges failed. Error: {}", err);
                 return false;
             } else if (err == WinError.ERROR_NOT_ALL_ASSIGNED) {
-                LOG.debug("Debug priveleges not enabled.");
+                LOG.debug("Debug privileges not enabled.");
                 return false;
             }
         } finally {

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdCentralProcessor.java
Patch:
@@ -190,7 +190,7 @@ private static List<LogicalProcessor> matchBitmasks(long group1, List<Long> grou
 
     private static int getMatchingBitmask(List<Long> bitmasks, int lp) {
         for (int j = 0; j < bitmasks.size(); j++) {
-            if ((bitmasks.get(j).longValue() & (1L << lp)) > 0) {
+            if ((bitmasks.get(j).longValue() & (1L << lp)) != 0) {
                 return j;
             }
         }

File: oshi-core/src/main/java/oshi/hardware/common/AbstractCentralProcessor.java
Patch:
@@ -68,7 +68,7 @@ public abstract class AbstractCentralProcessor implements CentralProcessor {
     /**
      * Create a Processor
      */
-    public AbstractCentralProcessor() {
+    protected AbstractCentralProcessor() {
         // Populate logical processor array
         this.logicalProcessors = Collections.unmodifiableList(initProcessorCounts());
         // Init processor counts

File: oshi-core/src/main/java/oshi/hardware/common/AbstractHWDiskStore.java
Patch:
@@ -35,7 +35,7 @@ public abstract class AbstractHWDiskStore implements HWDiskStore {
     private final String serial;
     private final long size;
 
-    public AbstractHWDiskStore(String name, String model, String serial, long size) {
+    protected AbstractHWDiskStore(String name, String model, String serial, long size) {
         this.name = name;
         this.model = model;
         this.serial = serial;

File: oshi-core/src/main/java/oshi/hardware/common/AbstractPowerSource.java
Patch:
@@ -67,7 +67,7 @@ public abstract class AbstractPowerSource implements PowerSource {
     private String serialNumber;
     private double temperature;
 
-    public AbstractPowerSource(String name, String deviceName, double remainingCapacityPercent,
+    protected AbstractPowerSource(String name, String deviceName, double remainingCapacityPercent,
             double timeRemainingEstimated, double timeRemainingInstant, double powerUsageRate, double voltage,
             double amperage, boolean powerOnLine, boolean charging, boolean discharging, CapacityUnits capacityUnits,
             int currentCapacity, int maxCapacity, int designCapacity, int cycleCount, String chemistry,

File: oshi-core/src/main/java/oshi/hardware/common/AbstractSoundCard.java
Patch:
@@ -46,7 +46,7 @@ public abstract class AbstractSoundCard implements SoundCard {
      * @param codec
      *            The codec
      */
-    public AbstractSoundCard(String kernelVersion, String name, String codec) {
+    protected AbstractSoundCard(String kernelVersion, String name, String codec) {
         this.kernelVersion = kernelVersion;
         this.name = name;
         this.codec = codec;

File: oshi-core/src/main/java/oshi/hardware/common/AbstractUsbDevice.java
Patch:
@@ -43,7 +43,7 @@ public abstract class AbstractUsbDevice implements UsbDevice {
     private final String uniqueDeviceId;
     private final List<UsbDevice> connectedDevices;
 
-    public AbstractUsbDevice(String name, String vendor, String vendorId, String productId, String serialNumber,
+    protected AbstractUsbDevice(String name, String vendor, String vendorId, String productId, String serialNumber,
             String uniqueDeviceId, List<UsbDevice> connectedDevices) {
         this.name = name;
         this.vendor = vendor;

File: oshi-core/src/main/java/oshi/jna/platform/unix/aix/Perfstat.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import com.sun.jna.Library;
+import com.sun.jna.Library; // NOSONAR squid:S1191
 import com.sun.jna.Native;
 import com.sun.jna.NativeLong;
 import com.sun.jna.Structure;

File: oshi-core/src/main/java/oshi/software/common/AbstractOSFileStore.java
Patch:
@@ -45,7 +45,7 @@ protected AbstractOSFileStore(String name, String volume, String label, String m
         this.uuid = uuid;
     }
 
-    public AbstractOSFileStore() {
+    protected AbstractOSFileStore() {
     }
 
     @Override

File: oshi-core/src/main/java/oshi/software/common/AbstractOSProcess.java
Patch:
@@ -44,7 +44,7 @@ public abstract class AbstractOSProcess implements OSProcess {
 
     private int processID;
 
-    public AbstractOSProcess(int pid) {
+    protected AbstractOSProcess(int pid) {
         this.processID = pid;
     }
 

File: oshi-core/src/main/java/oshi/software/common/AbstractOSThread.java
Patch:
@@ -36,7 +36,7 @@ public abstract class AbstractOSThread implements OSThread {
 
     private final int owningProcessId;
 
-    public AbstractOSThread(int processId) {
+    protected AbstractOSThread(int processId) {
         this.owningProcessId = processId;
     }
 

File: oshi-core/src/main/java/oshi/software/os/OSProcess.java
Patch:
@@ -74,8 +74,8 @@ public interface OSProcess {
      *         multiple processes, see the configuration file to enable a batch
      *         query mode leveraging {@link Win32ProcessCached#getCommandLine} to
      *         improve performance, or setting that parameter via
-     *         {@link GlobalConfig#set()} before instantiating any {@link OSProcess}
-     *         object.
+     *         {@link GlobalConfig#set(String, Object)} before instantiating any
+     *         {@link OSProcess} object.
      */
     String getCommandLine();
 

File: oshi-core/src/main/java/oshi/software/os/mac/MacInternetProtocolStats.java
Patch:
@@ -28,7 +28,7 @@
 
 import java.util.function.Supplier;
 
-import com.sun.jna.Memory;
+import com.sun.jna.Memory; // NOSONAR squid:S1191
 
 import oshi.annotation.concurrent.ThreadSafe;
 import oshi.driver.unix.NetStatTcp;

File: oshi-core/src/main/java/oshi/software/os/unix/freebsd/FreeBsdInternetProtocolStats.java
Patch:
@@ -28,7 +28,7 @@
 
 import java.util.function.Supplier;
 
-import com.sun.jna.Memory;
+import com.sun.jna.Memory; // NOSONAR squid:S1191
 
 import oshi.annotation.concurrent.ThreadSafe;
 import oshi.driver.unix.NetStatTcp;

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxHardwareAbstractionLayer.java
Patch:
@@ -81,8 +81,8 @@ public List<Display> getDisplays() {
     }
 
     @Override
-    public List<NetworkIF> getNetworkIFs() {
-        return LinuxNetworkIF.getNetworks();
+    public List<NetworkIF> getNetworkIFs(boolean includeLocalInterfaces) {
+        return LinuxNetworkIF.getNetworks(includeLocalInterfaces);
     }
 
     @Override

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacHardwareAbstractionLayer.java
Patch:
@@ -81,8 +81,8 @@ public List<Display> getDisplays() {
     }
 
     @Override
-    public List<NetworkIF> getNetworkIFs() {
-        return MacNetworkIF.getNetworks();
+    public List<NetworkIF> getNetworkIFs(boolean includeLocalInterfaces) {
+        return MacNetworkIF.getNetworks(includeLocalInterfaces);
     }
 
     @Override

File: oshi-core/src/main/java/oshi/hardware/platform/unix/aix/AixHardwareAbstractionLayer.java
Patch:
@@ -93,8 +93,8 @@ public List<Display> getDisplays() {
     }
 
     @Override
-    public List<NetworkIF> getNetworkIFs() {
-        return AixNetworkIF.getNetworks();
+    public List<NetworkIF> getNetworkIFs(boolean includeLocalInterfaces) {
+        return AixNetworkIF.getNetworks(includeLocalInterfaces);
     }
 
     @Override

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdHardwareAbstractionLayer.java
Patch:
@@ -81,8 +81,8 @@ public List<Display> getDisplays() {
     }
 
     @Override
-    public List<NetworkIF> getNetworkIFs() {
-        return FreeBsdNetworkIF.getNetworks();
+    public List<NetworkIF> getNetworkIFs(boolean includeLocalInterfaces) {
+        return FreeBsdNetworkIF.getNetworks(includeLocalInterfaces);
     }
 
     @Override

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisHardwareAbstractionLayer.java
Patch:
@@ -81,8 +81,8 @@ public List<Display> getDisplays() {
     }
 
     @Override
-    public List<NetworkIF> getNetworkIFs() {
-        return SolarisNetworkIF.getNetworks();
+    public List<NetworkIF> getNetworkIFs(boolean includeLocalInterfaces) {
+        return SolarisNetworkIF.getNetworks(includeLocalInterfaces);
     }
 
     @Override

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsHardwareAbstractionLayer.java
Patch:
@@ -81,8 +81,8 @@ public List<Display> getDisplays() {
     }
 
     @Override
-    public List<NetworkIF> getNetworkIFs() {
-        return WindowsNetworkIF.getNetworks();
+    public List<NetworkIF> getNetworkIFs(boolean includeLocalInterfaces) {
+        return WindowsNetworkIF.getNetworks(includeLocalInterfaces);
     }
 
     @Override

File: oshi-demo/src/main/java/oshi/demo/DiskStoreForPath.java
Patch:
@@ -64,7 +64,7 @@ public static void main(String[] args) throws URISyntaxException {
 
     private static Pair<Integer, Integer> getDiskStoreAndPartitionForPath(String path, List<HWDiskStore> diskStores) {
         for (int ds = 0; ds < diskStores.size(); ds++) {
-            HWDiskStore store = diskStores.get(0);
+            HWDiskStore store = diskStores.get(ds);
             List<HWPartition> parts = store.getPartitions();
             for (int part = 0; part < parts.size(); part++) {
                 String mount = parts.get(part).getMountPoint();

File: oshi-core/src/main/java/oshi/driver/linux/proc/ProcessStat.java
Patch:
@@ -45,6 +45,7 @@
 import oshi.util.ParseUtil;
 import oshi.util.platform.linux.ProcPath;
 import oshi.util.tuples.Triplet;
+
 /**
  * Utility to read process statistics from {@code /proc/[pid]/stat}
  */

File: oshi-core/src/main/java/oshi/driver/windows/perfmon/ProcessInformation.java
Patch:
@@ -55,7 +55,8 @@ public enum ProcessPerformanceProperty implements PdhCounterWildcardProperty {
         PARENTPROCESSID("Creating Process ID"), //
         READTRANSFERCOUNT("IO Read Bytes/sec"), //
         WRITETRANSFERCOUNT("IO Write Bytes/sec"), //
-        PRIVATEPAGECOUNT("Working Set - Private");
+        PRIVATEPAGECOUNT("Working Set - Private"), //
+        PAGEFAULTSPERSEC("Page Faults/sec");
 
         private final String counter;
 

File: oshi-core/src/test/java/oshi/software/os/OperatingSystemTest.java
Patch:
@@ -88,6 +88,8 @@ public void testOperatingSystem() {
         assertTrue(proc.getKernelTime() >= 0);
         assertTrue(proc.getUserTime() >= 0);
         assertTrue(proc.getUpTime() >= 0);
+        assertTrue(proc.getMinorFaults() >= 0);
+        assertTrue(proc.getMajorFaults() >= 0);
         assertTrue(proc.getProcessCpuLoadCumulative() >= 0d);
         assertEquals(proc.getProcessCpuLoadCumulative(), proc.getProcessCpuLoadBetweenTicks(null), Double.MIN_VALUE);
         assertEquals(proc.getProcessCpuLoadCumulative(), proc.getProcessCpuLoadBetweenTicks(proc), Double.MIN_VALUE);

File: oshi-core/src/main/java/oshi/driver/mac/ThreadInfo.java
Patch:
@@ -48,7 +48,7 @@
 @ThreadSafe
 public final class ThreadInfo {
 
-    private static Pattern PS_M = Pattern.compile(
+    private static final Pattern PS_M = Pattern.compile(
             "\\D+(\\d+).+(\\d+\\.\\d)\\s+(\\w)\\s+(\\d+)\\D+(\\d+:\\d{2}\\.\\d{2})\\s+(\\d+:\\d{2}\\.\\d{2}).+");
 
     private ThreadInfo() {

File: oshi-core/src/main/java/oshi/driver/windows/registry/ThreadPerformanceData.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.List;
 import java.util.Map;
 
-import com.sun.jna.platform.win32.WinBase;
+import com.sun.jna.platform.win32.WinBase.FILETIME; // NOSONAR squid:s1191
 
 import oshi.annotation.concurrent.Immutable;
 import oshi.annotation.concurrent.ThreadSafe;
@@ -132,8 +132,7 @@ public static Map<Integer, PerfCounterBlock> buildThreadMapFromPerfCounters(Coll
                 int tid = tidList.get(inst).intValue();
                 String name = Integer.toString(nameIndex++);
                 long startTime = startTimeList.get(inst);
-                startTime = WinBase.FILETIME.filetimeToDate((int) (startTime >> 32), (int) (startTime & 0xffffffffL))
-                        .getTime();
+                startTime = FILETIME.filetimeToDate((int) (startTime >> 32), (int) (startTime & 0xffffffffL)).getTime();
                 if (startTime > now) {
                     startTime = now - 1;
                 }

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsFileSystem.java
Patch:
@@ -140,7 +140,7 @@ public List<OSFileStore> getFileStores(boolean localOnly) {
                 // using WMI's more verbose name and update label if needed
                 OSFileStore volume = volumeMap.get(wmiVolume.getMount());
                 result.remove(volume);
-                result.add(new WindowsOSFileStore(volume.getName(), volume.getVolume(),
+                result.add(new WindowsOSFileStore(wmiVolume.getName(), volume.getVolume(),
                         volume.getLabel().isEmpty() ? wmiVolume.getLabel() : volume.getLabel(), volume.getMount(),
                         volume.getOptions(), volume.getUUID(), "", volume.getDescription(), volume.getType(),
                         volume.getFreeSpace(), volume.getUsableSpace(), volume.getTotalSpace(), 0, 0));

File: oshi-core/src/main/java/oshi/util/FormatUtil.java
Patch:
@@ -162,7 +162,7 @@ public static String formatHertz(long hertz) {
      */
     public static String formatValue(long value, String unit) {
         if (value < KILO) {
-            return String.format("%d %s", value, unit);
+            return String.format("%d %s", value, unit).trim();
         } else if (value < MEGA) { // K
             return formatUnits(value, KILO, "K" + unit);
         } else if (value < GIGA) { // M

File: oshi-core/src/main/java/oshi/util/platform/windows/PerfCounterQuery.java
Patch:
@@ -119,7 +119,7 @@ public static <T extends Enum<T>> Map<T, Long> queryValuesFromPDH(Class<T> prope
                 }
             }
             // And then query. Zero timestamp means update failed
-            if (0 < pdhQueryHandler.updateQuery(perfObjectLocalized)) {
+            if (0 < pdhQueryHandler.updateQuery()) {
                 for (T prop : props) {
                     valueMap.put(prop, pdhQueryHandler.queryCounter(counterMap.get(prop)));
                 }

File: oshi-core/src/main/java/oshi/util/platform/windows/PerfCounterWildcardQuery.java
Patch:
@@ -138,7 +138,7 @@ public static <T extends Enum<T>> Pair<List<String>, Map<T, List<Long>>> queryIn
                 counterListMap.put(prop, counterList);
             }
             // And then query. Zero timestamp means update failed
-            if (0 < pdhQueryHandler.updateQuery(perfObjectLocalized)) {
+            if (0 < pdhQueryHandler.updateQuery()) {
                 // Start at 1, first counter defines instance filter
                 for (int i = 1; i < props.length; i++) {
                     T prop = props[i];

File: oshi-core/src/main/java/oshi/driver/windows/perfmon/MemoryInformation.java
Patch:
@@ -73,8 +73,6 @@ private MemoryInformation() {
      * @return Page swap counters for memory.
      */
     public static Map<PageSwapProperty, Long> queryPageSwaps() {
-        PerfCounterQuery<PageSwapProperty> memoryPerfCounters = new PerfCounterQuery<>(PageSwapProperty.class, MEMORY,
-                WIN32_PERF_RAW_DATA_PERF_OS_MEMORY);
-        return memoryPerfCounters.queryValues();
+        return PerfCounterQuery.queryValues(PageSwapProperty.class, MEMORY, WIN32_PERF_RAW_DATA_PERF_OS_MEMORY);
     }
 }

File: oshi-core/src/main/java/oshi/driver/windows/perfmon/PagingFile.java
Patch:
@@ -72,8 +72,7 @@ private PagingFile() {
      * @return Paging file counters for memory.
      */
     public static Map<PagingPercentProperty, Long> querySwapUsed() {
-        PerfCounterQuery<PagingPercentProperty> pagingPerfCounters = new PerfCounterQuery<>(PagingPercentProperty.class,
-                PAGING_FILE, WIN32_PERF_RAW_DATA_PERF_OS_PAGING_FILE);
-        return pagingPerfCounters.queryValues();
+        return PerfCounterQuery.queryValues(PagingPercentProperty.class, PAGING_FILE,
+                WIN32_PERF_RAW_DATA_PERF_OS_PAGING_FILE);
     }
 }

File: oshi-core/src/main/java/oshi/driver/windows/perfmon/SystemInformation.java
Patch:
@@ -72,8 +72,6 @@ private SystemInformation() {
      * @return Context switches counter for the total of all processors.
      */
     public static Map<ContextSwitchProperty, Long> queryContextSwitchCounters() {
-        PerfCounterQuery<ContextSwitchProperty> contextSwitchPerfCounters = new PerfCounterQuery<>(
-                ContextSwitchProperty.class, SYSTEM, WIN32_PERF_RAW_DATA_PERF_OS_SYSTEM);
-        return contextSwitchPerfCounters.queryValues();
+        return PerfCounterQuery.queryValues(ContextSwitchProperty.class, SYSTEM, WIN32_PERF_RAW_DATA_PERF_OS_SYSTEM);
     }
 }

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdCentralProcessor.java
Patch:
@@ -117,7 +117,7 @@ private static List<LogicalProcessor> parseTopology() {
         String[] topology = BsdSysctlUtil.sysctl("kern.sched.topology_spec", "").split("\\n|\\r");
         /*-
          * Sample output:
-
+         *
         <groups>
         <group level="1" cache-level="0">
          <cpu count="24" mask="ffffff">0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23</cpu>
@@ -129,7 +129,7 @@ private static List<LogicalProcessor> parseTopology() {
              <cpu count="2" mask="3">0, 1</cpu>
              <flags><flag name="THREAD">THREAD group</flag><flag name="SMT">SMT group</flag></flags>
             </group>
-
+        *
         * Opens with <groups>
         * <group> level 1 identifies all the processors via bitmask, should only be one
         * <group> level 2 separates by physical package

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsFileSystem.java
Patch:
@@ -297,7 +297,7 @@ private static String getDriveType(String drive) {
 
     @Override
     public long getOpenFileDescriptors() {
-        Map<HandleCountProperty, List<Long>> valueListMap = ProcessInformation.queryHandles();
+        Map<HandleCountProperty, List<Long>> valueListMap = ProcessInformation.queryHandles().getB();
         List<Long> valueList = valueListMap.get(HandleCountProperty.HANDLECOUNT);
         long descriptors = 0L;
         if (valueList != null) {

File: oshi-core/src/test/java/oshi/software/os/OperatingSystemTest.java
Patch:
@@ -281,8 +281,8 @@ public void testGetSessions() {
             assertTrue(sess.getUserName().length() > 0);
             assertTrue(sess.getTerminalDevice().length() > 0);
             // Login time
-            assertTrue(String.format("Logon time should be before now: %d < %d", sess.getLoginTime(),
-                    System.currentTimeMillis()), sess.getLoginTime() <= System.currentTimeMillis());
+            assertTrue(String.format("Logon time should be before now: %d < %d%n%s", sess.getLoginTime(),
+                    System.currentTimeMillis(), sess), sess.getLoginTime() <= System.currentTimeMillis());
             assertNotNull(sess.getHost());
         }
     }

File: oshi-core/src/main/java/oshi/driver/unix/freebsd/disk/GeomPartList.java
Patch:
@@ -51,7 +51,7 @@ private GeomPartList() {
 
     /**
      * Queries partition data using geom, mount, and stat commands
-     * 
+     *
      * @return A map with disk name as the key and an {@code UnmodifiableList} of
      *         partitions as the value
      */

File: oshi-core/src/main/java/oshi/driver/unix/solaris/disk/Lshal.java
Patch:
@@ -44,7 +44,7 @@ private Lshal() {
 
     /**
      * Query lshal to get device major
-     * 
+     *
      * @return A map with disk names as the key and block device major as the value
      *         if lshal is installed; empty map otherwise
      */

File: oshi-core/src/main/java/oshi/driver/unix/solaris/kstat/SystemPages.java
Patch:
@@ -42,7 +42,7 @@ private SystemPages() {
     /**
      * Queries the {@code system_pages} kstat and returns available and physical
      * memory
-     * 
+     *
      * @return A pair with the available and total memory, in pages. Mutiply by page
      *         size for bytes.
      */

File: oshi-core/src/main/java/oshi/driver/windows/registry/HkeyPerformanceDataUtil.java
Patch:
@@ -210,6 +210,9 @@ public static <T extends Enum<T> & PdhCounterWildcardProperty> Triplet<List<Map<
      * Looks up the counter index values for the given counter object and the enum
      * of counter names.
      *
+     * @param <T>
+     *            An enum containing the counters, whose class is passed as
+     *            {@code counterEnum}
      * @param objectName
      *            The counter object to look up the index for
      * @param counterEnum

File: oshi-core/src/main/java/oshi/hardware/common/AbstractComputerSystem.java
Patch:
@@ -49,7 +49,7 @@ public Firmware getFirmware() {
 
     /**
      * Instantiates the platform-specific {@link Firmware} object
-     * 
+     *
      * @return platform-specific {@link Firmware} object
      */
     protected abstract Firmware createFirmware();
@@ -61,7 +61,7 @@ public Baseboard getBaseboard() {
 
     /**
      * Instantiates the platform-specific {@link Baseboard} object
-     * 
+     *
      * @return platform-specific {@link Baseboard} object
      */
     protected abstract Baseboard createBaseboard();

File: oshi-core/src/main/java/oshi/hardware/common/AbstractPowerSource.java
Patch:
@@ -286,6 +286,8 @@ public String toString() {
     /**
      * Estimated time remaining on power source, formatted as HH:mm
      *
+     * @param timeInSeconds
+     *            The time remaining, in seconds
      * @return formatted String of time remaining
      */
     private static String formatTimeRemaining(double timeInSeconds) {

File: oshi-core/src/main/java/oshi/hardware/common/AbstractSoundCard.java
Patch:
@@ -38,7 +38,7 @@ public abstract class AbstractSoundCard implements SoundCard {
 
     /**
      * Abstract Sound Card Constructor
-     * 
+     *
      * @param kernelVersion
      *            The version
      * @param name

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxGlobalMemory.java
Patch:
@@ -85,9 +85,11 @@ private static long queryPageSize() {
      * up to date if the calculation changes: see
      * https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?
      * id=34e431b0ae398fc54ea69ff85ec700722c9da773
-     *
+     * <p>
      * Internally, reading /proc/meminfo is faster than sysinfo because it only
      * spends time populating the memory components of the sysinfo structure.
+     *
+     * @return A pair containing available and total memory in bytes
      */
     private static Pair<Long, Long> readMemInfo() {
         long memFree = 0L;

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdCentralProcessor.java
Patch:
@@ -117,7 +117,7 @@ private static List<LogicalProcessor> parseTopology() {
         String[] topology = BsdSysctlUtil.sysctl("kern.sched.topology_spec", "").split("\\n|\\r");
         /*-
          * Sample output:
-        
+
         <groups>
         <group level="1" cache-level="0">
          <cpu count="24" mask="ffffff">0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23</cpu>
@@ -129,7 +129,7 @@ private static List<LogicalProcessor> parseTopology() {
              <cpu count="2" mask="3">0, 1</cpu>
              <flags><flag name="THREAD">THREAD group</flag><flag name="SMT">SMT group</flag></flags>
             </group>
-        
+
         * Opens with <groups>
         * <group> level 1 identifies all the processors via bitmask, should only be one
         * <group> level 2 separates by physical package
@@ -293,6 +293,7 @@ public long[][] queryProcessorCpuLoadTicks() {
      * otherwise uses the values from /var/run/dmesg.boot
      *
      * @param processorID
+     *            The processorID as a long
      * @return The ProcessorID string
      */
     private static String getProcessorIDfromDmiDecode(long processorID) {

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisCentralProcessor.java
Patch:
@@ -212,8 +212,11 @@ public long[][] queryProcessorCpuLoadTicks() {
      * flags.
      *
      * @param stepping
+     *            The stepping
      * @param model
+     *            The model
      * @param family
+     *            The family
      * @return The Processor ID string
      */
     private static String getProcessorID(String stepping, String model, String family) {

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsHWDiskStore.java
Patch:
@@ -210,11 +210,12 @@ public static List<HWDiskStore> getDisks() {
     }
 
     /**
-     * Populates the maps for the specified index. If the index is null, populates
-     * all the maps
+     * Gets disk stats for the specified index. If the index is null, populates all
+     * the maps
      *
      * @param index
      *            The index to populate/update maps for
+     * @return An object encapsulating maps with the stats
      */
     private static DiskStats queryReadWriteStats(String index) {
         // Create object to hold and return results

File: oshi-core/src/main/java/oshi/jna/platform/windows/IPHlpAPI.java
Patch:
@@ -86,8 +86,7 @@ class MIB_UDPSTATS extends Structure {
      * @param Statistics
      *            A {@link MIB_TCPSTATS} structure that receives the TCP statistics
      *            for the local computer.
-     * @return If the function succeeds, the return value is
-     *         {@link WinError#NO_ERROR}.
+     * @return If the function succeeds, the return value is {@code NO_ERROR}.
      */
     int GetTcpStatistics(MIB_TCPSTATS Statistics);
 

File: oshi-core/src/main/java/oshi/jna/platform/windows/Kernel32.java
Patch:
@@ -24,7 +24,6 @@
 package oshi.jna.platform.windows;
 
 import com.sun.jna.Native; // NOSONAR squid:S1192
-import com.sun.jna.platform.win32.WinNT;
 import com.sun.jna.win32.W32APIOptions;
 
 public interface Kernel32 extends com.sun.jna.platform.win32.Kernel32 {

File: oshi-core/src/main/java/oshi/jna/platform/windows/Netapi32.java
Patch:
@@ -62,7 +62,7 @@ public SESSION_INFO_10(Pointer p) {
 
     /**
      * Provides information about sessions established on a server.
-     * 
+     *
      * @param servername
      *            Pointer to a string that specifies the DNS or NetBIOS name of the
      *            remote server on which the function is to execute. If this

File: oshi-core/src/main/java/oshi/jna/platform/windows/WinNT.java
Patch:
@@ -36,7 +36,7 @@ public interface WinNT extends com.sun.jna.platform.win32.WinNT {
      * for an access token.
      */
     @FieldOrder({ "PrimaryGroup" })
-    public static class TOKEN_PRIMARY_GROUP extends Structure {
+    class TOKEN_PRIMARY_GROUP extends Structure {
         /**
          * A pointer to a SID structure representing a group that will become the
          * primary group of any objects created by a process using this access token.
@@ -62,7 +62,7 @@ public TOKEN_PRIMARY_GROUP(int size) {
      * A 64-bit integer;
      */
     @FieldOrder({ "u" })
-    static class LARGE_INTEGER extends Structure implements Comparable<LARGE_INTEGER> {
+    class LARGE_INTEGER extends Structure implements Comparable<LARGE_INTEGER> {
         public static class ByReference extends LARGE_INTEGER implements Structure.ByReference {
         }
 

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxOperatingSystem.java
Patch:
@@ -447,6 +447,8 @@ private static Triplet<String, String, String> readLsbRelease() {
     /**
      * Attempts to read /etc/distrib-release (for some value of distrib)
      *
+     * @param filename
+     *            The /etc/distrib-release file
      * @return a triplet with the parsed family, versionID and codeName if file
      *         successfully read and " release " or " VERSION " found, null
      *         otherwise

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsOSProcess.java
Patch:
@@ -270,7 +270,7 @@ private boolean updateAttributes(PerfCounterBlock pcb, WtsInfo wts) {
             }
             // Full path
             final HANDLEByReference phToken = new HANDLEByReference();
-            try {// EXECUTABLEPATH
+            try { // EXECUTABLEPATH
                 if (IS_WINDOWS7_OR_GREATER) {
                     this.path = Kernel32Util.QueryFullProcessImageName(pHandle, 0);
                 }

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsOperatingSystem.java
Patch:
@@ -180,7 +180,7 @@ private static String parseVersion(WmiResult<OSVersionProperty> versionInfo, int
             break;
         case 5:
             if (minor == 2) {
-                if ((suiteMask & 0x00008000) != 0) {// VER_SUITE_WH_SERVER
+                if ((suiteMask & 0x00008000) != 0) { // VER_SUITE_WH_SERVER
                     version = "Home Server";
                 } else if (ntWorkstation) {
                     version = "XP"; // 64 bits
@@ -210,6 +210,7 @@ private static String parseVersion(WmiResult<OSVersionProperty> versionInfo, int
      * Gets suites available on the system and return as a codename
      *
      * @param suiteMask
+     *            The suite mask bitmask
      *
      * @return Suites
      */

File: oshi-core/src/main/java/oshi/util/platform/windows/PerfCounterQuery.java
Patch:
@@ -41,6 +41,9 @@
  * <p>
  * An instance of this class should only be instantiated and used within the
  * context of a single thread.
+ *
+ * @param <T>
+ *            The enum type for this counter query
  */
 @NotThreadSafe
 public class PerfCounterQuery<T extends Enum<T>> {

File: oshi-core/src/main/java/oshi/util/platform/windows/PerfCounterWildcardQuery.java
Patch:
@@ -49,6 +49,9 @@
  * <p>
  * An instance of this class should only be instantiated and used within the
  * context of a single thread.
+ *
+ * @param <T>
+ *            The enum type for this counter query
  */
 @NotThreadSafe
 public class PerfCounterWildcardQuery<T extends Enum<T>> extends PerfCounterQuery<T> {

File: oshi-core/src/main/java/oshi/driver/windows/registry/HkeyUserData.java
Patch:
@@ -29,7 +29,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.sun.jna.platform.win32.Advapi32Util.Account;
+import com.sun.jna.platform.win32.Advapi32Util.Account; // NOSONAR squid:S1191
 import com.sun.jna.platform.win32.Advapi32Util.InfoKey;
 import com.sun.jna.platform.win32.Win32Exception;
 import com.sun.jna.platform.win32.WinNT;

File: oshi-core/src/main/java/oshi/driver/windows/registry/NetSessionData.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import com.sun.jna.Pointer;
+import com.sun.jna.Pointer; // NOSONAR squid:S1191
 import com.sun.jna.ptr.IntByReference;
 import com.sun.jna.ptr.PointerByReference;
 

File: oshi-core/src/main/java/oshi/driver/windows/registry/SessionWtsData.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.Arrays;
 import java.util.List;
 
-import com.sun.jna.Pointer;
+import com.sun.jna.Pointer; // NOSONAR squid:S1191
 import com.sun.jna.platform.win32.VersionHelpers;
 import com.sun.jna.platform.win32.WinBase;
 import com.sun.jna.platform.win32.WinNT;

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxUsbDevice.java
Patch:
@@ -200,7 +200,7 @@ private static LinuxUsbDevice getDeviceAndChildren(String devPath, String vid, S
             Map<String, String> productIdMap, Map<String, String> serialMap, Map<String, List<String>> hubMap) {
         String vendorId = vendorIdMap.getOrDefault(devPath, vid);
         String productId = productIdMap.getOrDefault(devPath, pid);
-        List<String> childPaths = hubMap.getOrDefault(devPath, new ArrayList<String>());
+        List<String> childPaths = hubMap.getOrDefault(devPath, new ArrayList<>());
         List<UsbDevice> usbDevices = new ArrayList<>();
         for (String path : childPaths) {
             usbDevices.add(getDeviceAndChildren(path, vendorId, productId, nameMap, vendorMap, vendorIdMap,

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacUsbDevice.java
Patch:
@@ -297,7 +297,7 @@ private static MacUsbDevice getDeviceAndChildren(Long registryEntryId, String vi
             Map<Long, String> productIdMap, Map<Long, String> serialMap, Map<Long, List<Long>> hubMap) {
         String vendorId = vendorIdMap.getOrDefault(registryEntryId, vid);
         String productId = productIdMap.getOrDefault(registryEntryId, pid);
-        List<Long> childIds = hubMap.getOrDefault(registryEntryId, new ArrayList<Long>());
+        List<Long> childIds = hubMap.getOrDefault(registryEntryId, new ArrayList<>());
         List<UsbDevice> usbDevices = new ArrayList<>();
         for (Long id : childIds) {
             usbDevices.add(getDeviceAndChildren(id, vendorId, productId, nameMap, vendorMap, vendorIdMap, productIdMap,

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdUsbDevice.java
Patch:
@@ -174,7 +174,7 @@ private static FreeBsdUsbDevice getDeviceAndChildren(String devPath, String vid,
             Map<String, String> productIdMap, Map<String, String> serialMap, Map<String, List<String>> hubMap) {
         String vendorId = vendorIdMap.getOrDefault(devPath, vid);
         String productId = productIdMap.getOrDefault(devPath, pid);
-        List<String> childPaths = hubMap.getOrDefault(devPath, new ArrayList<String>());
+        List<String> childPaths = hubMap.getOrDefault(devPath, new ArrayList<>());
         List<UsbDevice> usbDevices = new ArrayList<>();
         for (String path : childPaths) {
             usbDevices.add(getDeviceAndChildren(path, vendorId, productId, nameMap, vendorMap, vendorIdMap,

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisUsbDevice.java
Patch:
@@ -197,7 +197,7 @@ private static SolarisUsbDevice getDeviceAndChildren(String devPath, String vid,
             Map<String, List<String>> hubMap) {
         String vendorId = vendorIdMap.getOrDefault(devPath, vid);
         String productId = productIdMap.getOrDefault(devPath, pid);
-        List<String> childPaths = hubMap.getOrDefault(devPath, new ArrayList<String>());
+        List<String> childPaths = hubMap.getOrDefault(devPath, new ArrayList<>());
         List<UsbDevice> usbDevices = new ArrayList<>();
         for (String path : childPaths) {
             usbDevices.add(getDeviceAndChildren(path, vendorId, productId, nameMap, vendorIdMap, productIdMap, hubMap));

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsUsbDevice.java
Patch:
@@ -216,7 +216,7 @@ private static WindowsUsbDevice getDeviceAndChildren(String hubDeviceId, String
             vendorId = idPair.getA();
             productId = idPair.getB();
         }
-        List<String> pnpDeviceIds = deviceTreeMap.getOrDefault(hubDeviceId, new ArrayList<String>());
+        List<String> pnpDeviceIds = deviceTreeMap.getOrDefault(hubDeviceId, new ArrayList<>());
         List<UsbDevice> usbDevices = new ArrayList<>();
         for (String pnpDeviceId : pnpDeviceIds) {
             WindowsUsbDevice deviceAndChildren = getDeviceAndChildren(pnpDeviceId, vendorId, productId, deviceTreeMap,

File: oshi-core/src/main/java/oshi/jna/platform/windows/Netapi32.java
Patch:
@@ -23,7 +23,7 @@
  */
 package oshi.jna.platform.windows;
 
-import com.sun.jna.Native;
+import com.sun.jna.Native; // NOSONAR squid:S1191
 import com.sun.jna.Pointer;
 import com.sun.jna.Structure;
 import com.sun.jna.Structure.FieldOrder;

File: oshi-core/src/main/java/oshi/jna/platform/windows/Wtsapi32.java
Patch:
@@ -23,7 +23,7 @@
  */
 package oshi.jna.platform.windows;
 
-import com.sun.jna.Native;
+import com.sun.jna.Native; // NOSONAR squid:S1191
 import com.sun.jna.Pointer;
 import com.sun.jna.Structure;
 import com.sun.jna.Structure.FieldOrder;

File: oshi-core/src/test/java/oshi/SystemInfoTest.java
Patch:
@@ -23,7 +23,7 @@
  */
 package oshi;
 
-import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotEquals;
 
 import java.time.Instant;
 import java.util.ArrayList;
@@ -76,7 +76,7 @@ public class SystemInfoTest {
      */
     @Test
     public void testPlatformEnum() {
-        assertFalse(PlatformEnum.UNKNOWN.equals(SystemInfo.getCurrentPlatformEnum()));
+        assertNotEquals(PlatformEnum.UNKNOWN, SystemInfo.getCurrentPlatformEnum());
         // Exercise the main method
         main(null);
     }

File: oshi-core/src/test/java/oshi/util/GlobalConfigTest.java
Patch:
@@ -68,14 +68,14 @@ public void testGetInteger() {
 
     @Test
     public void testGetDouble() {
-        assertTrue(get("oshi.test.property", 0.0) == 0.0);
+        assertEquals(0.0, get("oshi.test.property", 0.0), Double.MIN_VALUE);
         set("oshi.test.property", 1.23d);
-        assertTrue(get("oshi.test.property", 0.0) == 1.23);
+        assertEquals(1.23, get("oshi.test.property", 0.0), Double.MIN_VALUE);
         assertEquals("1.23", get("oshi.test.property", null));
 
         // Invalid double
         set("oshi.test.property", "1.2.3");
-        assertTrue(get("oshi.test.property", 0.0) == 0.0);
+        assertEquals(0.0, get("oshi.test.property", 0.0), Double.MIN_VALUE);
     }
 
     @Test

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsPowerSource.java
Patch:
@@ -152,8 +152,9 @@ private static WindowsPowerSource getPowerSource(String name) {
         HANDLE hdev = SetupApi.INSTANCE.SetupDiGetClassDevs(GUID_DEVCLASS_BATTERY, null, null,
                 SetupApi.DIGCF_PRESENT | SetupApi.DIGCF_DEVICEINTERFACE);
         if (WinBase.INVALID_HANDLE_VALUE != hdev) {
+            boolean batteryFound = false;
             // Limit search to 100 batteries max
-            for (int idev = 0; idev < 100; idev++) {
+            for (int idev = 0; !batteryFound && idev < 100; idev++) {
                 SP_DEVICE_INTERFACE_DATA did = new SP_DEVICE_INTERFACE_DATA();
                 did.cbSize = did.size();
 
@@ -293,7 +294,7 @@ private static WindowsPowerSource getPowerSource(String name) {
                                                 }
                                             }
                                             // Exit loop
-                                            break;
+                                            batteryFound = true;
                                         }
                                     }
                                 }

File: oshi-core/src/main/java/oshi/driver/windows/registry/ProcessPerformanceData.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.List;
 import java.util.Map;
 
-import com.sun.jna.platform.win32.WinBase;
+import com.sun.jna.platform.win32.WinBase; // NOSONAR squid:s1191
 
 import oshi.annotation.concurrent.Immutable;
 import oshi.annotation.concurrent.ThreadSafe;

File: oshi-core/src/main/java/oshi/hardware/Sensors.java
Patch:
@@ -48,7 +48,8 @@ public interface Sensors {
     /**
      * CPU Temperature
      *
-     * @return CPU Temperature in degrees Celsius if available, 0 otherwise.
+     * @return CPU Temperature in degrees Celsius if available, 0 or
+     *         {@link Double#NaN} otherwise.
      *         <p>
      *         On Windows, if not running Open Hardware Monitor, requires elevated
      *         permissions and hardware BIOS that supports publishing to WMI. In

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxFirmware.java
Patch:
@@ -60,7 +60,7 @@ final class LinuxFirmware extends AbstractFirmware {
 
     private final Supplier<VcGenCmdStrings> vcGenCmd = memoize(this::queryVcGenCmd);
 
-    private final Supplier<BiosStrings> bios = memoize(this::queryBios);
+    private final Supplier<BiosStrings> bios = memoize(LinuxFirmware::queryBios);
 
     @Override
     public String getManufacturer() {
@@ -205,7 +205,7 @@ private static String queryReleaseDateFromSysfs() {
     // BIOS Revision: 4.6
     // Firmware Revision: 0.0
 
-    private BiosStrings queryBios() {
+    private static BiosStrings queryBios() {
         String biosName = null;
         String revision = null;
 

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxPowerSource.java
Patch:
@@ -89,7 +89,7 @@ public static List<PowerSource> getPowerSources() {
         // Get list of power source names
         File f = new File(PS_PATH);
         String[] psNames = f.list();
-        List<LinuxPowerSource> psList = new ArrayList<>(psNames.length);
+        List<LinuxPowerSource> psList = new ArrayList<>();
         // Empty directory will give null rather than empty array, so fix
         if (psNames != null) {
             // For each power source, output various info

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdCentralProcessor.java
Patch:
@@ -117,7 +117,7 @@ private static List<LogicalProcessor> parseTopology() {
         String[] topology = BsdSysctlUtil.sysctl("kern.sched.topology_spec", "").split("\\n|\\r");
         /*-
          * Sample output:
-        
+
         <groups>
         <group level="1" cache-level="0">
          <cpu count="24" mask="ffffff">0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23</cpu>
@@ -129,7 +129,7 @@ private static List<LogicalProcessor> parseTopology() {
              <cpu count="2" mask="3">0, 1</cpu>
              <flags><flag name="THREAD">THREAD group</flag><flag name="SMT">SMT group</flag></flags>
             </group>
-        
+
         * Opens with <groups>
         * <group> level 1 identifies all the processors via bitmask, should only be one
         * <group> level 2 separates by physical package
@@ -295,7 +295,7 @@ public long[][] queryProcessorCpuLoadTicks() {
      * @param processorID
      * @return The ProcessorID string
      */
-    private String getProcessorIDfromDmiDecode(long processorID) {
+    private static String getProcessorIDfromDmiDecode(long processorID) {
         boolean procInfo = false;
         String marker = "Processor Information";
         for (String checkLine : ExecutingCommand.runNative("dmidecode -t system")) {

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsCentralProcessor.java
Patch:
@@ -138,7 +138,7 @@ protected ProcessorIdentifier queryProcessorId() {
      *            the key to retrieve
      * @return the string following id
      */
-    private String parseIdentifier(String identifier, String key) {
+    private static String parseIdentifier(String identifier, String key) {
         String[] idSplit = ParseUtil.whitespaces.split(identifier);
         boolean found = false;
         for (String s : idSplit) {
@@ -299,7 +299,7 @@ private List<LogicalProcessor> getLogicalProcessorInformation() {
      *            The bit to find matching mask
      * @return The index of the list which matched the bit
      */
-    private int getBitMatchingPackageNumber(List<Long> packageMaskList, int logProc) {
+    private static int getBitMatchingPackageNumber(List<Long> packageMaskList, int logProc) {
         for (int i = 0; i < packageMaskList.size(); i++) {
             if ((packageMaskList.get(i).longValue() & (1L << logProc)) > 0) {
                 return i;

File: oshi-core/src/main/java/oshi/software/os/OSProcess.java
Patch:
@@ -349,7 +349,7 @@ public interface OSProcess {
     /**
      * Process Execution States
      */
-    public enum State {
+    enum State {
         /**
          * Intermediate state in process creation
          */

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxFileSystem.java
Patch:
@@ -214,7 +214,7 @@ public long getMaxFileDescriptors() {
      *            can be allocated.
      * @return Corresponding file descriptor value from the Linux system file.
      */
-    private long getFileDescriptors(int index) {
+    private static long getFileDescriptors(int index) {
         String filename = ProcPath.SYS_FS_FILE_NR;
         if (index < 0 || index > 2) {
             throw new IllegalArgumentException("Index must be between 0 and 2.");

File: oshi-core/src/main/java/oshi/software/os/mac/MacOperatingSystem.java
Patch:
@@ -229,7 +229,7 @@ public List<OSProcess> getChildProcesses(int parentPid, int limit, ProcessSort s
         return Collections.unmodifiableList(sorted);
     }
 
-    private int getParentProcessPid(int pid) {
+    private static int getParentProcessPid(int pid) {
         ProcTaskAllInfo taskAllInfo = new ProcTaskAllInfo();
         if (0 > SystemB.INSTANCE.proc_pidinfo(pid, SystemB.PROC_PIDTASKALLINFO, 0, taskAllInfo, taskAllInfo.size())) {
             return 0;

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsNetworkParams.java
Patch:
@@ -113,7 +113,7 @@ public String getIpv6DefaultGateway() {
         return parseIpv6Route();
     }
 
-    private String parseIpv4Route() {
+    private static String parseIpv4Route() {
         List<String> lines = ExecutingCommand.runNative("route print -4 0.0.0.0");
         for (String line : lines) {
             String[] fields = ParseUtil.whitespaces.split(line.trim());
@@ -124,7 +124,7 @@ private String parseIpv4Route() {
         return "";
     }
 
-    private String parseIpv6Route() {
+    private static String parseIpv6Route() {
         List<String> lines = ExecutingCommand.runNative("route print -6 ::/0");
         for (String line : lines) {
             String[] fields = ParseUtil.whitespaces.split(line.trim());

File: oshi-core/src/main/java/oshi/util/FormatUtil.java
Patch:
@@ -219,7 +219,7 @@ public static float round(float d, int decimalPlace) {
      * @return long value of x unsigned
      */
     public static long getUnsignedInt(int x) {
-        return x & 0x00000000ffffffffL;
+        return x & 0x0000_0000_ffff_ffffL;
     }
 
     /**

File: oshi-demo/src/main/java/oshi/demo/gui/ProcessPanel.java
Patch:
@@ -196,7 +196,7 @@ private Object[][] parseProcesses(List<OSProcess> list, SystemInfo si) {
         return procArr;
     }
 
-    private void resizeColumns(TableColumnModel tableColumnModel) {
+    private static void resizeColumns(TableColumnModel tableColumnModel) {
         TableColumn column;
         int tW = tableColumnModel.getTotalColumnWidth();
         int cantCols = tableColumnModel.getColumnCount();

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacDisks.java
Patch:
@@ -270,8 +270,9 @@ private static boolean updateDiskStats(HWDiskStore diskStore, DASessionRef sessi
                                 Long size = sdService.getLongProperty("Size");
                                 Integer bsdMajor = sdService.getIntegerProperty("BSD Major");
                                 Integer bsdMinor = sdService.getIntegerProperty("BSD Minor");
+                                String uuid = sdService.getStringProperty("UUID");
                                 partitions.add(new HWPartition(partBsdName, name, type,
-                                        sdService.getStringProperty("UUID"), size == null ? 0L : size,
+                                        uuid == null ? Constants.UNKNOWN : uuid, size == null ? 0L : size,
                                         bsdMajor == null ? 0 : bsdMajor, bsdMinor == null ? 0 : bsdMinor, mountPoint));
                                 // iterate
                                 sdService.release();

File: oshi-core/src/test/java/oshi/software/os/NetworkParamsTest.java
Patch:
@@ -38,7 +38,7 @@ public class NetworkParamsTest {
      * Test network parameters
      */
     @Test
-    public void testOperatingSystem() {
+    public void testNetworkParams() {
         SystemInfo si = new SystemInfo();
         NetworkParams params = si.getOperatingSystem().getNetworkParams();
         assertNotNull(params.getHostName());

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxDisks.java
Patch:
@@ -164,8 +164,7 @@ private static HWDiskStore[] getDisks(HWDiskStore storeToUpdate) {
     public static boolean updateDiskStats(HWDiskStore diskStore) {
         // If this returns non-empty (the same store, but updated) then we were
         // successful in the update
-        HWDiskStore[] store = getDisks(diskStore);
-        return (store.length > 0);
+        return 0 < getDisks(diskStore).length;
     }
 
     private static Map<String, String> readMountsMap() {

File: oshi-core/src/main/java/oshi/util/platform/unix/solaris/KstatUtil.java
Patch:
@@ -28,7 +28,6 @@
 import java.util.List;
 import java.util.concurrent.locks.ReentrantLock;
 
-import javax.annotation.concurrent.GuardedBy;
 import javax.annotation.concurrent.ThreadSafe;
 
 import org.slf4j.Logger;
@@ -57,7 +56,6 @@ public final class KstatUtil {
     // Opens the kstat chain. Automatically closed on exit.
     // Only one thread may access the chain at any time, so we wrap this object in
     // the KstatChain class which locks the class until closed.
-    @GuardedBy("CHAIN")
     private static final KstatCtl KC = KS.kstat_open();
     private static final ReentrantLock CHAIN = new ReentrantLock();
 

File: oshi-core/src/main/java/oshi/driver/windows/registry/HkeyPerformanceDataUtil.java
Patch:
@@ -30,6 +30,8 @@
 import java.util.List;
 import java.util.Map;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -53,6 +55,7 @@
 /**
  * Utility to read HKEY_PERFORMANCE_DATA information.
  */
+@ThreadSafe
 public final class HkeyPerformanceDataUtil {
 
     private static final Logger LOG = LoggerFactory.getLogger(HkeyPerformanceDataUtil.class);

File: oshi-core/src/main/java/oshi/hardware/Baseboard.java
Patch:
@@ -23,10 +23,13 @@
  */
 package oshi.hardware;
 
+import javax.annotation.concurrent.Immutable;
+
 /**
  * The Baseboard represents the system board, also called motherboard, logic
  * board, etc.
  */
+@Immutable
 public interface Baseboard {
     /**
      * Get the baseboard manufacturer.

File: oshi-core/src/main/java/oshi/hardware/CentralProcessor.java
Patch:
@@ -30,6 +30,8 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 import oshi.util.Constants;
 import oshi.util.FileUtil;
 import oshi.util.ParseUtil;
@@ -41,6 +43,7 @@
  * more physical processors (cores), and one or more logical processors (what
  * the Operating System sees, which may include hyperthreaded cores.)
  */
+@ThreadSafe
 public interface CentralProcessor {
 
     /**

File: oshi-core/src/main/java/oshi/hardware/ComputerSystem.java
Patch:
@@ -23,11 +23,14 @@
  */
 package oshi.hardware;
 
+import javax.annotation.concurrent.Immutable;
+
 /**
  * The ComputerSystem represents the physical hardware, of a computer
  * system/product and includes BIOS/firmware and a motherboard, logic board,
  * etc.
  */
+@Immutable
 public interface ComputerSystem {
     /**
      * Get the computer system manufacturer.

File: oshi-core/src/main/java/oshi/hardware/Display.java
Patch:
@@ -23,10 +23,13 @@
  */
 package oshi.hardware;
 
+import javax.annotation.concurrent.Immutable;
+
 /**
  * Display refers to the information regarding a video source and monitor
  * identified by the EDID standard.
  */
+@Immutable
 public interface Display {
     /**
      * The EDID byte array.

File: oshi-core/src/main/java/oshi/hardware/Firmware.java
Patch:
@@ -23,9 +23,12 @@
  */
 package oshi.hardware;
 
+import javax.annotation.concurrent.Immutable;
+
 /**
  * The Firmware represents the low level BIOS or equivalent.
  */
+@Immutable
 public interface Firmware {
 
     /**

File: oshi-core/src/main/java/oshi/hardware/GlobalMemory.java
Patch:
@@ -23,10 +23,13 @@
  */
 package oshi.hardware;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 /**
  * The GlobalMemory class tracks information about the use of a computer's
  * physical memory (RAM) as well as any available virtual memory.
  */
+@ThreadSafe
 public interface GlobalMemory {
     /**
      * The amount of actual physical memory, in bytes.

File: oshi-core/src/main/java/oshi/hardware/HardwareAbstractionLayer.java
Patch:
@@ -23,10 +23,13 @@
  */
 package oshi.hardware;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 /**
  * A hardware abstraction layer. Provides access to hardware items such as
  * processors, memory, battery, and disks.
  */
+@ThreadSafe
 public interface HardwareAbstractionLayer {
 
     /**

File: oshi-core/src/main/java/oshi/hardware/PhysicalMemory.java
Patch:
@@ -23,12 +23,15 @@
  */
 package oshi.hardware;
 
+import javax.annotation.concurrent.Immutable;
+
 import oshi.util.FormatUtil;
 
 /**
  * The PhysicalMemory class represents a physical memory device located on a
  * computer system and available to the operating system.
  */
+@Immutable
 public class PhysicalMemory {
 
     private final String bankLabel;

File: oshi-core/src/main/java/oshi/hardware/PowerSource.java
Patch:
@@ -25,10 +25,13 @@
 
 import java.time.LocalDate;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 /**
  * The Power Source is one or more batteries with some capacity, and some state
  * of charge/discharge
  */
+@ThreadSafe
 public interface PowerSource {
     /**
      * Units of Battery Capacity

File: oshi-core/src/main/java/oshi/hardware/Sensors.java
Patch:
@@ -23,6 +23,8 @@
  */
 package oshi.hardware;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 /**
  * Sensors include hardware sensors to monitor temperature, fan speed, and other
  * information.
@@ -41,6 +43,7 @@
  * permissions and still may provide no results or unchanging results depending
  * on the motherboard manufacturer.
  */
+@ThreadSafe
 public interface Sensors {
     /**
      * CPU Temperature

File: oshi-core/src/main/java/oshi/hardware/SoundCard.java
Patch:
@@ -23,11 +23,12 @@
  */
 package oshi.hardware;
 
+import javax.annotation.concurrent.Immutable;
+
 /**
- * <p>
  * SoundCard interface.
- * </p>
  */
+@Immutable
 public interface SoundCard {
 
     /**

File: oshi-core/src/main/java/oshi/hardware/UsbDevice.java
Patch:
@@ -23,11 +23,14 @@
  */
 package oshi.hardware;
 
+import javax.annotation.concurrent.Immutable;
+
 /**
  * A USB device is a device connected via a USB port, possibly
  * internally/permanently. Hubs may contain ports to which other devices connect
  * in a recursive fashion.
  */
+@Immutable
 public interface UsbDevice extends Comparable<UsbDevice> {
     /**
      * Name of the USB device

File: oshi-core/src/main/java/oshi/hardware/VirtualMemory.java
Patch:
@@ -23,11 +23,14 @@
  */
 package oshi.hardware;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 /**
  * The VirtuallMemory class tracks information about the use of a computer's
  * virtual memory (swap file) which temporarily moves rarely accessed
  * information to a disk or other storage device.
  */
+@ThreadSafe
 public interface VirtualMemory {
 
     /**

File: oshi-core/src/main/java/oshi/hardware/common/AbstractBaseboard.java
Patch:
@@ -23,11 +23,14 @@
  */
 package oshi.hardware.common;
 
+import javax.annotation.concurrent.Immutable;
+
 import oshi.hardware.Baseboard;
 
 /**
  * Baseboard data
  */
+@Immutable
 public abstract class AbstractBaseboard implements Baseboard {
 
     @Override

File: oshi-core/src/main/java/oshi/hardware/common/AbstractCentralProcessor.java
Patch:
@@ -30,6 +30,8 @@
 import java.util.Set;
 import java.util.function.Supplier;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -39,6 +41,7 @@
 /**
  * A CPU.
  */
+@ThreadSafe
 public abstract class AbstractCentralProcessor implements CentralProcessor {
 
     private static final Logger LOG = LoggerFactory.getLogger(AbstractCentralProcessor.class);

File: oshi-core/src/main/java/oshi/hardware/common/AbstractComputerSystem.java
Patch:
@@ -27,13 +27,16 @@
 
 import java.util.function.Supplier;
 
+import javax.annotation.concurrent.Immutable;
+
 import oshi.hardware.Baseboard;
 import oshi.hardware.ComputerSystem;
 import oshi.hardware.Firmware;
 
 /**
  * Computer System data.
  */
+@Immutable
 public abstract class AbstractComputerSystem implements ComputerSystem {
 
     private final Supplier<Firmware> firmware = memoize(this::createFirmware);

File: oshi-core/src/main/java/oshi/hardware/common/AbstractFirmware.java
Patch:
@@ -23,12 +23,15 @@
  */
 package oshi.hardware.common;
 
+import javax.annotation.concurrent.Immutable;
+
 import oshi.hardware.Firmware;
 import oshi.util.Constants;
 
 /**
  * Firmware data.
  */
+@Immutable
 public abstract class AbstractFirmware implements Firmware {
 
     /*
@@ -50,7 +53,6 @@ public String getReleaseDate() {
         return Constants.UNKNOWN;
     }
 
-    /** {@inheritDoc} */
     @Override
     public String toString() {
         StringBuilder sb = new StringBuilder();

File: oshi-core/src/main/java/oshi/hardware/common/AbstractGlobalMemory.java
Patch:
@@ -26,6 +26,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 import oshi.hardware.GlobalMemory;
 import oshi.hardware.PhysicalMemory;
 import oshi.util.Constants;
@@ -36,6 +38,7 @@
 /**
  * Memory info.
  */
+@ThreadSafe
 public abstract class AbstractGlobalMemory implements GlobalMemory {
 
     @Override

File: oshi-core/src/main/java/oshi/hardware/common/AbstractHardwareAbstractionLayer.java
Patch:
@@ -27,6 +27,8 @@
 
 import java.util.function.Supplier;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 import oshi.hardware.CentralProcessor;
 import oshi.hardware.ComputerSystem;
 import oshi.hardware.GlobalMemory;
@@ -37,6 +39,7 @@
  * Common fields or methods used by platform-specific implementations of
  * HardwareAbstractionLayer
  */
+@ThreadSafe
 public abstract class AbstractHardwareAbstractionLayer implements HardwareAbstractionLayer {
 
     private final Supplier<ComputerSystem> computerSystem = memoize(this::createComputerSystem);

File: oshi-core/src/main/java/oshi/hardware/common/AbstractPowerSource.java
Patch:
@@ -25,6 +25,8 @@
 
 import java.time.LocalDate;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 import com.sun.jna.Platform; // NOSONAR squid:S1191
 
 import oshi.SystemInfo;
@@ -39,6 +41,7 @@
 /**
  * A Power Source
  */
+@ThreadSafe
 public abstract class AbstractPowerSource implements PowerSource {
 
     private String name;

File: oshi-core/src/main/java/oshi/hardware/common/AbstractUsbDevice.java
Patch:
@@ -25,11 +25,14 @@
 
 import java.util.Arrays;
 
+import javax.annotation.concurrent.Immutable;
+
 import oshi.hardware.UsbDevice;
 
 /**
  * A USB device
  */
+@Immutable
 public abstract class AbstractUsbDevice implements UsbDevice {
 
     protected String name;

File: oshi-core/src/main/java/oshi/hardware/common/AbstractVirtualMemory.java
Patch:
@@ -23,12 +23,15 @@
  */
 package oshi.hardware.common;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 import oshi.hardware.VirtualMemory;
 import oshi.util.FormatUtil;
 
 /**
  * Virtual Memory info.
  */
+@ThreadSafe
 public abstract class AbstractVirtualMemory implements VirtualMemory {
 
     @Override

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxComputerSystem.java
Patch:
@@ -29,6 +29,8 @@
 import java.util.List;
 import java.util.function.Supplier;
 
+import javax.annotation.concurrent.Immutable;
+
 import oshi.hardware.Baseboard;
 import oshi.hardware.Firmware;
 import oshi.hardware.common.AbstractComputerSystem;
@@ -40,6 +42,7 @@
 /**
  * Hardware data obtained from sysfs.
  */
+@Immutable
 final class LinuxComputerSystem extends AbstractComputerSystem {
 
     private final Supplier<String> manufacturer = memoize(LinuxComputerSystem::queryManufacturer);

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxFirmware.java
Patch:
@@ -31,6 +31,8 @@
 import java.util.Locale;
 import java.util.function.Supplier;
 
+import javax.annotation.concurrent.Immutable;
+
 import oshi.hardware.common.AbstractFirmware;
 import oshi.util.Constants;
 import oshi.util.ExecutingCommand;
@@ -41,6 +43,7 @@
 /**
  * Firmware data obtained by sysfs.
  */
+@Immutable
 final class LinuxFirmware extends AbstractFirmware {
     // Jan 13 2013 16:24:29
     private static final DateTimeFormatter VCGEN_FORMATTER = DateTimeFormatter.ofPattern("MMM d uuuu HH:mm:ss",

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacComputerSystem.java
Patch:
@@ -28,6 +28,8 @@
 import java.nio.charset.StandardCharsets;
 import java.util.function.Supplier;
 
+import javax.annotation.concurrent.Immutable;
+
 import com.sun.jna.platform.mac.IOKit.IORegistryEntry; // NOSONAR squid:S1191
 import com.sun.jna.platform.mac.IOKitUtil;
 
@@ -41,6 +43,7 @@
 /**
  * Hardware data obtained from ioreg.
  */
+@Immutable
 final class MacComputerSystem extends AbstractComputerSystem {
 
     private final Supplier<Triplet<String, String, String>> manufacturerModelSerial = memoize(

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdBaseboard.java
Patch:
@@ -23,11 +23,14 @@
  */
 package oshi.hardware.platform.unix.freebsd;
 
+import javax.annotation.concurrent.Immutable;
+
 import oshi.hardware.common.AbstractBaseboard;
 
 /**
  * Baseboard data obtained by dmidecode
  */
+@Immutable
 final class FreeBsdBaseboard extends AbstractBaseboard {
     private final String manufacturer;
     private final String model;

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdComputerSystem.java
Patch:
@@ -27,6 +27,8 @@
 
 import java.util.function.Supplier;
 
+import javax.annotation.concurrent.Immutable;
+
 import oshi.hardware.Baseboard;
 import oshi.hardware.Firmware;
 import oshi.hardware.common.AbstractComputerSystem;
@@ -39,6 +41,7 @@
 /**
  * Hardware data obtained from dmidecode.
  */
+@Immutable
 final class FreeBsdComputerSystem extends AbstractComputerSystem {
 
     private final Supplier<Quartet<String, String, String, String>> manufModelSerialVers = memoize(

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisComputerSystem.java
Patch:
@@ -27,6 +27,8 @@
 
 import java.util.function.Supplier;
 
+import javax.annotation.concurrent.Immutable;
+
 import oshi.hardware.Baseboard;
 import oshi.hardware.Firmware;
 import oshi.hardware.common.AbstractComputerSystem;
@@ -38,6 +40,7 @@
 /**
  * Hardware data obtained from smbios.
  */
+@Immutable
 final class SolarisComputerSystem extends AbstractComputerSystem {
 
     private final Supplier<SmbiosStrings> smbiosStrings = memoize(SolarisComputerSystem::readSmbios);

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsComputerSystem.java
Patch:
@@ -27,6 +27,8 @@
 
 import java.util.function.Supplier;
 
+import javax.annotation.concurrent.Immutable;
+
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiResult; // NOSONAR squid:S1191
 
 import oshi.driver.windows.wmi.Win32Bios;
@@ -46,6 +48,7 @@
 /**
  * Hardware data obtained from WMI.
  */
+@Immutable
 final class WindowsComputerSystem extends AbstractComputerSystem {
 
     private final Supplier<Pair<String, String>> manufacturerModel = memoize(

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsFirmware.java
Patch:
@@ -27,6 +27,8 @@
 
 import java.util.function.Supplier;
 
+import javax.annotation.concurrent.Immutable;
+
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiResult; // NOSONAR squid:S1191
 
 import oshi.driver.windows.wmi.Win32Bios;
@@ -40,6 +42,7 @@
 /**
  * Firmware data obtained from WMI
  */
+@Immutable
 final class WindowsFirmware extends AbstractFirmware {
 
     private final Supplier<Quintet<String, String, String, String, String>> manufNameDescVersRelease = memoize(

File: oshi-core/src/main/java/oshi/software/common/AbstractFileSystem.java
Patch:
@@ -26,9 +26,12 @@
 import java.util.Arrays;
 import java.util.List;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 import oshi.software.os.FileSystem;
 import oshi.software.os.OSFileStore;
 
+@ThreadSafe
 public abstract class AbstractFileSystem implements FileSystem {
 
     /**

File: oshi-core/src/main/java/oshi/software/os/FileSystem.java
Patch:
@@ -23,11 +23,14 @@
  */
 package oshi.software.os;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 /**
  * The File System is a logical arrangement, usually in a hierarchial tree,
  * where files are placed for storage and retrieval. It may consist of one or
  * more file stores.
  */
+@ThreadSafe
 public interface FileSystem {
 
     /**

File: oshi-core/src/main/java/oshi/software/os/NetworkParams.java
Patch:
@@ -23,10 +23,13 @@
  */
 package oshi.software.os;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 /**
  * NetworkParams presents network parameters of running OS, such as DNS, host
  * name etc.
  */
+@ThreadSafe
 public interface NetworkParams {
 
     /**

File: oshi-core/src/main/java/oshi/software/os/OSService.java
Patch:
@@ -23,6 +23,8 @@
  */
 package oshi.software.os;
 
+import javax.annotation.concurrent.Immutable;
+
 /**
  * Operating system services are responsible for the management of platform
  * resources, including the processor, memory, files, and input and output. They
@@ -31,6 +33,7 @@
  * This class is provided for information purposes only. Interpretation of the
  * meaning of services is platform-dependent.
  */
+@Immutable
 public class OSService {
 
     private final String name;

File: oshi-core/src/main/java/oshi/software/os/OperatingSystemVersion.java
Patch:
@@ -23,12 +23,15 @@
  */
 package oshi.software.os;
 
+import javax.annotation.concurrent.NotThreadSafe;
+
 /**
  * OperatingSystemVersion interface.
  * 
  * @deprecated Use {@link OperatingSystem.OSVersionInfo}
  */
 @Deprecated
+@NotThreadSafe
 public interface OperatingSystemVersion {
     /**
      * <p>

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxFileSystem.java
Patch:
@@ -34,6 +34,8 @@
 import java.util.List;
 import java.util.Map;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -52,6 +54,7 @@
  * implementation specific means of file storage. In Linux, these are found in
  * the /proc/mount filesystem, excluding temporary and kernel mounts.
  */
+@ThreadSafe
 public class LinuxFileSystem extends AbstractFileSystem {
 
     private static final Logger LOG = LoggerFactory.getLogger(LinuxFileSystem.class);
@@ -207,13 +210,11 @@ private static List<OSFileStore> getFileStoreMatching(String nameToMatch, Map<St
         return fsList;
     }
 
-    /** {@inheritDoc} */
     @Override
     public long getOpenFileDescriptors() {
         return getFileDescriptors(0);
     }
 
-    /** {@inheritDoc} */
     @Override
     public long getMaxFileDescriptors() {
         return getFileDescriptors(2);

File: oshi-core/src/main/java/oshi/software/os/mac/MacFileSystem.java
Patch:
@@ -32,6 +32,8 @@
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -60,6 +62,7 @@
  * implementation specific means of file storage. In Mac OS X, these are found
  * in the /Volumes directory.
  */
+@ThreadSafe
 public class MacFileSystem extends AbstractFileSystem {
 
     private static final Logger LOG = LoggerFactory.getLogger(MacFileSystem.class);
@@ -260,13 +263,11 @@ private static List<OSFileStore> getFileStoreMatching(String nameToMatch, boolea
         return fsList;
     }
 
-    /** {@inheritDoc} */
     @Override
     public long getOpenFileDescriptors() {
         return SysctlUtil.sysctl("kern.num_files", 0);
     }
 
-    /** {@inheritDoc} */
     @Override
     public long getMaxFileDescriptors() {
         return SysctlUtil.sysctl("kern.maxfiles", 0);

File: oshi-core/src/main/java/oshi/software/os/unix/solaris/SolarisFileSystem.java
Patch:
@@ -30,6 +30,8 @@
 import java.util.List;
 import java.util.Map;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 import com.sun.jna.platform.unix.solaris.LibKstat.Kstat; // NOSONAR
 
 import oshi.software.common.AbstractFileSystem;
@@ -45,6 +47,7 @@
  * implementation specific means of file storage. In Solaris, these are found in
  * the /proc/mount filesystem, excluding temporary and kernel mounts.
  */
+@ThreadSafe
 public class SolarisFileSystem extends AbstractFileSystem {
 
     // System path mounted as tmpfs

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsFileSystem.java
Patch:
@@ -29,6 +29,8 @@
 import java.util.Map;
 import java.util.stream.Collectors;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 import com.sun.jna.platform.win32.Kernel32; //NOSONAR
 import com.sun.jna.platform.win32.WinBase;
 import com.sun.jna.platform.win32.WinNT;
@@ -50,6 +52,7 @@
  * implementation specific means of file storage. In Windows, these are
  * represented by a drive letter, e.g., "A:\" and "C:\"
  */
+@ThreadSafe
 public class WindowsFileSystem extends AbstractFileSystem {
 
     private static final int BUFSIZE = 255;

File: oshi-core/src/main/java/oshi/util/Constants.java
Patch:
@@ -27,9 +27,12 @@
 import java.time.OffsetDateTime;
 import java.time.ZoneOffset;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 /**
  * General constants used in multiple classes
  */
+@ThreadSafe
 public final class Constants {
 
     /**

File: oshi-core/src/main/java/oshi/util/EdidUtil.java
Patch:
@@ -28,12 +28,15 @@
 import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 /**
  * EDID parsing utility.
  */
+@ThreadSafe
 public final class EdidUtil {
 
     private static final Logger LOG = LoggerFactory.getLogger(EdidUtil.class);

File: oshi-core/src/main/java/oshi/util/ExecutingCommand.java
Patch:
@@ -31,13 +31,16 @@
 import java.util.Arrays;
 import java.util.List;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 /**
  * A class for executing on the command line and returning the result of
  * execution.
  */
+@ThreadSafe
 public final class ExecutingCommand {
 
     private static final Logger LOG = LoggerFactory.getLogger(ExecutingCommand.class);

File: oshi-core/src/main/java/oshi/util/FileUtil.java
Patch:
@@ -37,12 +37,15 @@
 import java.util.Map;
 import java.util.Properties;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 /**
  * File reading methods
  */
+@ThreadSafe
 public final class FileUtil {
 
     private static final Logger LOG = LoggerFactory.getLogger(FileUtil.class);

File: oshi-core/src/main/java/oshi/util/ParseUtil.java
Patch:
@@ -38,6 +38,8 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -46,6 +48,7 @@
 /**
  * String parsing utility.
  */
+@ThreadSafe
 public final class ParseUtil {
 
     private static final Logger LOG = LoggerFactory.getLogger(ParseUtil.class);

File: oshi-core/src/main/java/oshi/util/platform/windows/PerfDataUtil.java
Patch:
@@ -23,6 +23,8 @@
  */
 package oshi.util.platform.windows;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -46,6 +48,7 @@
  * Helper class to centralize the boilerplate portions of PDH counter setup and
  * allow applications to easily add, query, and remove counters.
  */
+@ThreadSafe
 public final class PerfDataUtil {
 
     private static final Logger LOG = LoggerFactory.getLogger(PerfDataUtil.class);

File: oshi-core/src/main/java/oshi/util/platform/windows/WmiUtil.java
Patch:
@@ -25,6 +25,8 @@
 
 import java.time.OffsetDateTime;
 
+import javax.annotation.concurrent.ThreadSafe;
+
 import com.sun.jna.platform.win32.Variant; // NOSONAR
 import com.sun.jna.platform.win32.COM.Wbemcli;
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiQuery;
@@ -36,6 +38,7 @@
 /**
  * Helper class for WMI
  */
+@ThreadSafe
 public final class WmiUtil {
 
     /**

File: oshi-core/src/main/java/oshi/driver/windows/wmi/Win32VideoController.java
Patch:
@@ -48,8 +48,8 @@ private Win32VideoController() {
      * @return Information regarding video controllers
      */
     public static WmiResult<VideoControllerProperty> queryVideoController() {
-        WmiQuery<VideoControllerProperty> VideoControllerQuery = new WmiQuery<>(WIN32_VIDEO_CONTROLLER,
+        WmiQuery<VideoControllerProperty> videoControllerQuery = new WmiQuery<>(WIN32_VIDEO_CONTROLLER,
                 VideoControllerProperty.class);
-        return WmiQueryHandler.createInstance().queryWMI(VideoControllerQuery);
+        return WmiQueryHandler.createInstance().queryWMI(videoControllerQuery);
     }
 }

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsGraphicsCard.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import com.sun.jna.platform.win32.VersionHelpers;
+import com.sun.jna.platform.win32.VersionHelpers; // NOSONAR squid:S1191
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiResult;
 
 import oshi.driver.windows.wmi.Win32VideoController;

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxGraphicsCard.java
Patch:
@@ -130,7 +130,6 @@ private static List<LinuxGraphicsCard> getGraphicsCardsFromLspci() {
     }
 
     private static long queryLspciMemorySize(String lookupDevice) {
-        System.out.println("Looking up " + lookupDevice);
         long vram = 0L;
         // Lookup memory
         // Human readable version, includes memory

File: oshi-core/src/test/java/oshi/software/os/OperatingSystemTest.java
Patch:
@@ -90,7 +90,7 @@ public void testOperatingSystem() {
         assertTrue(proc.getUpTime() >= 0);
         assertTrue(proc.getProcessCpuLoadCumulative() >= 0d);
         assertEquals(proc.getProcessCpuLoadCumulative(), proc.getProcessCpuLoadBetweenTicks(null), Double.MIN_VALUE);
-        assertEquals(0d, proc.getProcessCpuLoadBetweenTicks(proc), Double.MIN_VALUE);
+        assertEquals(proc.getProcessCpuLoadCumulative(), proc.getProcessCpuLoadBetweenTicks(proc), Double.MIN_VALUE);
         OSProcess oldProc = new OSProcess(os);
         oldProc.setProcessID(proc.getProcessID());
         proc.setUpTime(2L);

File: oshi-core/src/test/java/oshi/software/os/OperatingSystemTest.java
Patch:
@@ -92,6 +92,7 @@ public void testOperatingSystem() {
         assertEquals(proc.getProcessCpuLoadCumulative(), proc.getProcessCpuLoadBetweenTicks(null), Double.MIN_VALUE);
         assertEquals(0d, proc.getProcessCpuLoadBetweenTicks(proc), Double.MIN_VALUE);
         OSProcess oldProc = new OSProcess(os);
+        oldProc.setProcessID(proc.getProcessID());
         proc.setUpTime(2L);
         proc.setKernelTime(1L);
         proc.setUserTime(1L);

File: oshi-core/src/test/java/oshi/software/os/OperatingSystemTest.java
Patch:
@@ -91,10 +91,11 @@ public void testOperatingSystem() {
         assertTrue(proc.getProcessCpuLoadCumulative() >= 0d);
         assertEquals(proc.getProcessCpuLoadCumulative(), proc.getProcessCpuLoadBetweenTicks(null), Double.MIN_VALUE);
         assertEquals(0d, proc.getProcessCpuLoadBetweenTicks(proc), Double.MIN_VALUE);
+        OSProcess oldProc = new OSProcess(os);
         proc.setUpTime(2L);
         proc.setKernelTime(1L);
         proc.setUserTime(1L);
-        assertEquals(1d, proc.getProcessCpuLoadBetweenTicks(proc), Double.MIN_VALUE);
+        assertEquals(1d, proc.getProcessCpuLoadBetweenTicks(oldProc), Double.MIN_VALUE);
         assertTrue(proc.getStartTime() >= 0);
         assertTrue(proc.getBytesRead() >= 0);
         assertTrue(proc.getBytesWritten() >= 0);

File: oshi-core/src/test/java/oshi/software/os/OperatingSystemTest.java
Patch:
@@ -89,7 +89,7 @@ public void testOperatingSystem() {
         assertTrue(proc.getUserTime() >= 0);
         assertTrue(proc.getUpTime() >= 0);
         assertTrue(proc.getProcessCpuLoadCumulative() >= 0d);
-        assertEquals(0d, proc.getProcessCpuLoadBetweenTicks(null), Double.MIN_VALUE);
+        assertEquals(proc.getProcessCpuLoadCumulative(), proc.getProcessCpuLoadBetweenTicks(null), Double.MIN_VALUE);
         assertEquals(0d, proc.getProcessCpuLoadBetweenTicks(proc), Double.MIN_VALUE);
         proc.setUpTime(2L);
         proc.setKernelTime(1L);

File: oshi-core/src/main/java/oshi/driver/windows/wmi/Win32LogicalDisk.java
Patch:
@@ -59,7 +59,7 @@ public static WmiResult<LogicalDiskProperty> queryLogicalDisk(String nameToMatch
             where = true;
         }
         if (nameToMatch != null) {
-            wmiClassName.append(where ? " WHERE" : " AND").append(" Name=\"").append(nameToMatch).append('\"');
+            wmiClassName.append(where ? " AND" : " WHERE").append(" Name=\"").append(nameToMatch).append('\"');
         }
         WmiQuery<LogicalDiskProperty> logicalDiskQuery = new WmiQuery<>(wmiClassName.toString(),
                 LogicalDiskProperty.class);

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdPowerSource.java
Patch:
@@ -68,7 +68,7 @@ private static FreeBsdPowerSource getPowerSource(String name) {
         double psRemainingCapacityPercent = 1d;
         double psTimeRemainingEstimated = -1d; // -1 = unknown, -2 = unlimited
         double psPowerUsageRate = 0d;
-        double psVoltage = -1d;
+        int psVoltage = -1;
         double psAmperage = 0d;
         boolean psPowerOnLine = false;
         boolean psCharging = false;
@@ -146,7 +146,7 @@ private static FreeBsdPowerSource getPowerSource(String name) {
         String volts = psMap.get("Present voltage");
         if (volts != null) {
             psVoltage = ParseUtil.getFirstIntValue(volts);
-            if (psVoltage != 0d) {
+            if (psVoltage != 0) {
                 psAmperage = psPowerUsageRate / psVoltage;
             }
         }

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisPowerSource.java
Patch:
@@ -153,9 +153,7 @@ private static SolarisPowerSource getPowerSource(String name) {
                     long voltageNow = KstatUtil.dataLookupLong(ksp, "bst_voltage");
                     if (voltageNow > 0) {
                         psVoltage = voltageNow / 1000d;
-                        if (psVoltage != 0d) {
-                            psAmperage = psPowerUsageRate / psVoltage;
-                        }
+                        psAmperage = psPowerUsageRate * 1000d / voltageNow;
                     }
                 }
             }

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxDisks.java
Patch:
@@ -31,7 +31,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.sun.jna.Pointer;
+import com.sun.jna.Pointer; // NOSONAR squid:S1191
 
 import oshi.hardware.Disks;
 import oshi.hardware.HWDiskStore;
@@ -100,8 +100,6 @@ public HWDiskStore[] getDisks() {
         updateMountsMap();
         hashCodeToPathMap.clear();
 
-
-
         Udev.UdevHandle handle = Udev.INSTANCE.udev_new();
         Udev.UdevEnumerate enumerate = Udev.INSTANCE.udev_enumerate_new(handle);
         Udev.INSTANCE.udev_enumerate_add_match_subsystem(enumerate, "block");

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxNetworks.java
Patch:
@@ -41,6 +41,7 @@ public class LinuxNetworks extends AbstractNetworks {
      *
      * @param netIF
      *            The interface on which to update statistics
+     * @return {@code true} if the update was successful, {@code false} otherwise.
      */
     public static boolean updateNetworkStats(NetworkIF netIF) {
         try {

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxSoundCard.java
Patch:
@@ -125,7 +125,7 @@ private static String getCardCodec(File cardDir) {
                         if (codecs != null) {
                             for (File codec : codecs) {
                                 if (!codec.isDirectory() && codec.getName().contains("#")) {
-                                    cardCodec = codec.getName().substring(0, codec.getName().indexOf("#"));
+                                    cardCodec = codec.getName().substring(0, codec.getName().indexOf('#'));
                                     break;
                                 }
                             }

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacNetworks.java
Patch:
@@ -130,6 +130,7 @@ private static Map<Integer, IFdata> queryIFdata(int index) {
      *
      * @param netIF
      *            The interface on which to update statistics
+     * @return {@code true} if the update was successful, {@code false} otherwise.
      */
     public static boolean updateNetworkStats(NetworkIF netIF) {
         int index = netIF.queryNetworkInterface().getIndex();
@@ -144,6 +145,7 @@ public static boolean updateNetworkStats(NetworkIF netIF) {
      *            The interface on which to update statistics
      * @param data
      *            A map of network interface statistics with the index as the key
+     * @return {@code true} if the update was successful, {@code false} otherwise.
      */
     private static boolean updateNetworkStats(NetworkIF netIF, Map<Integer, IFdata> data) {
         int index = netIF.queryNetworkInterface().getIndex();

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsNetworks.java
Patch:
@@ -52,7 +52,6 @@ public class WindowsNetworks extends AbstractNetworks {
      *
      * @param netIF
      *            The interface on which to update statistics
-     *
      * @return {@code true} if the update was successful, {@code false} otherwise.
      */
     public static boolean updateNetworkStats(NetworkIF netIF) {

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxDisks.java
Patch:
@@ -124,6 +124,7 @@ public HWDiskStore[] getDisks() {
             String devnode = Udev.INSTANCE.udev_device_get_devnode(device);
             if (devnode == null) {
                 LOG.warn("Failed to retrieve devnode for device {}", Pointer.nativeValue(device.getPointer()));
+                continue;
             }
             // Ignore loopback and ram disks; do nothing
             if (!devnode.startsWith("/dev/loop") && !devnode.startsWith("/dev/ram")) {

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsCentralProcessor.java
Patch:
@@ -38,6 +38,7 @@
 import com.sun.jna.platform.win32.Advapi32Util;
 import com.sun.jna.platform.win32.Kernel32;
 import com.sun.jna.platform.win32.Kernel32Util;
+import com.sun.jna.platform.win32.PowrProf.POWER_INFORMATION_LEVEL;
 import com.sun.jna.platform.win32.VersionHelpers;
 import com.sun.jna.platform.win32.WinBase;
 import com.sun.jna.platform.win32.WinBase.SYSTEM_INFO;
@@ -528,7 +529,7 @@ private long[] queryNTPower(int fieldIndex) {
         long[] freqs = new long[getLogicalProcessorCount()];
         int bufferSize = ppi.size() * freqs.length;
         Memory mem = new Memory(bufferSize);
-        if (0 != PowrProf.INSTANCE.CallNtPowerInformation(PowrProf.POWER_INFORMATION_LEVEL.ProcessorInformation, null,
+        if (0 != PowrProf.INSTANCE.CallNtPowerInformation(POWER_INFORMATION_LEVEL.ProcessorInformation, null,
                 0, mem, bufferSize)) {
             LOG.error("Unable to get Processor Information");
             Arrays.fill(freqs, -1L);

File: oshi-core/src/main/java/oshi/jna/platform/windows/PowrProf.java
Patch:
@@ -23,7 +23,7 @@
  */
 package oshi.jna.platform.windows;
 
-import com.sun.jna.Native;
+import com.sun.jna.Native; // NOSONAR squid:S1191
 import com.sun.jna.Pointer;
 import com.sun.jna.Structure;
 import com.sun.jna.Structure.FieldOrder;

File: oshi-core/src/main/java/oshi/software/common/AbstractOperatingSystem.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.List;
 import java.util.function.Supplier;
 
-import com.sun.jna.Platform;
+import com.sun.jna.Platform; // NOSONAR squid:S1191
 
 import oshi.software.os.OSProcess;
 import oshi.software.os.OSService;

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxOperatingSystem.java
Patch:
@@ -44,7 +44,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.sun.jna.Native;
+import com.sun.jna.Native; // NOSONAR squid:S1191
 import com.sun.jna.platform.linux.LibC;
 import com.sun.jna.platform.linux.LibC.Sysinfo;
 

File: oshi-core/src/main/java/oshi/software/os/unix/freebsd/FreeBsdNetworkParams.java
Patch:
@@ -32,6 +32,7 @@
 import com.sun.jna.ptr.PointerByReference;
 
 import oshi.jna.platform.unix.CLibrary;
+import oshi.jna.platform.unix.CLibrary.Addrinfo;
 import oshi.jna.platform.unix.freebsd.FreeBsdLibc;
 import oshi.software.common.AbstractNetworkParams;
 import oshi.util.ExecutingCommand;
@@ -49,7 +50,7 @@ public class FreeBsdNetworkParams extends AbstractNetworkParams {
 
     @Override
     public String getDomainName() {
-        FreeBsdLibc.Addrinfo hint = new FreeBsdLibc.Addrinfo();
+        Addrinfo hint = new Addrinfo();
         hint.ai_flags = CLibrary.AI_CANONNAME;
         String hostname = getHostName();
 
@@ -61,7 +62,7 @@ public String getDomainName() {
             }
             return "";
         }
-        FreeBsdLibc.Addrinfo info = new FreeBsdLibc.Addrinfo(ptr.getValue());
+        Addrinfo info = new Addrinfo(ptr.getValue());
         String canonname = info.ai_canonname.trim();
         LIBC.freeaddrinfo(ptr.getValue());
         return canonname;

File: oshi-core/src/main/java/oshi/software/os/unix/solaris/SolarisOperatingSystem.java
Patch:
@@ -219,7 +219,7 @@ public long getProcessAffinityMask(int processId) {
                 String[] split = ParseUtil.whitespaces.split(proc);
                 int bitToSet = ParseUtil.parseIntOrDefault(split[0], -1);
                 if (bitToSet >= 0) {
-                    bitMask |= (1L << bitToSet);
+                    bitMask |= 1L << bitToSet;
                 }
             }
             return bitMask;

File: oshi-core/src/test/java/oshi/hardware/NetworksTest.java
Patch:
@@ -54,7 +54,9 @@ public void testNetworkInterfaces() throws IOException {
             assertNotNull(net.getDisplayName());
             assertNotNull(net.getMacaddr());
             assertNotNull(net.getIPv4addr());
+            assertNotNull(net.getSubnetMasks());
             assertNotNull(net.getIPv6addr());
+            assertNotNull(net.getPrefixLengths());
             assertTrue(net.getBytesRecv() >= 0);
             assertTrue(net.getBytesSent() >= 0);
             assertTrue(net.getPacketsRecv() >= 0);

File: oshi-core/src/main/java/oshi/hardware/CentralProcessor.java
Patch:
@@ -508,7 +508,7 @@ public int getProcessorGroup() {
      * A class encapsulating ghe CPU's identifier strings ,including name, vendor,
      * stepping, model, and family information (also called the signature of a CPU)
      */
-    static final class ProcessorIdentifier {
+    final class ProcessorIdentifier {
         // Provided in constructor
         private final String cpuVendor;
         private final String cpuName;

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxPowerSource.java
Patch:
@@ -112,8 +112,8 @@ public static PowerSource[] getPowerSources() {
             }
             psName = psMap.getOrDefault("POWER_SUPPLY_NAME", name);
             String status = psMap.get("POWER_SUPPLY_STATUS");
-            psCharging = ("Charging".equals(status));
-            psDischarging = ("Discharging".equals(status));
+            psCharging = "Charging".equals(status);
+            psDischarging = "Discharging".equals(status);
             if (psMap.containsKey("POWER_SUPPLY_CAPACITY")) {
                 psRemainingCapacityPercent = ParseUtil.parseIntOrDefault(psMap.get("POWER_SUPPLY_CAPACITY"), -100)
                         / 100d;

File: oshi-core/src/main/java/oshi/software/os/unix/freebsd/FreeBsdOperatingSystem.java
Patch:
@@ -245,7 +245,7 @@ public long getProcessAffinityMask(int processId) {
             for (String bit : bits) {
                 int bitToSet = ParseUtil.parseIntOrDefault(bit.trim(), -1);
                 if (bitToSet >= 0) {
-                    bitMask |= (1L << bitToSet);
+                    bitMask |= 1L << bitToSet;
                 }
             }
         }

File: oshi-core/src/main/java/oshi/software/os/unix/solaris/SolarisOperatingSystem.java
Patch:
@@ -229,7 +229,7 @@ public long getProcessAffinityMask(int processId) {
             for (int i = split.length - 1; i >= 0; i--) {
                 int bitToSet = ParseUtil.parseIntOrDefault(split[i], -1);
                 if (bitToSet >= 0) {
-                    bitMask |= (1L << bitToSet);
+                    bitMask |= 1L << bitToSet;
                 } else {
                     // Once we run into the word processor(s) we're done
                     break;

File: oshi-core/src/test/java/oshi/software/os/OperatingSystemTest.java
Patch:
@@ -290,7 +290,7 @@ public void testGetCommandLine() {
 
         SystemInfo si = new SystemInfo();
         OperatingSystem os = si.getOperatingSystem();
-        for (OSProcess process : os.getProcesses(0, null)) {
+        for (OSProcess process : os.getProcesses(0, null, true)) {
             if (!process.getCommandLine().trim().isEmpty()) {
                 processesWithNonEmptyCmdLine++;
             }

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsOperatingSystem.java
Patch:
@@ -282,7 +282,7 @@ private static String parseCodeName(int suiteMask) {
 
     @Override
     protected int queryBitness() {
-        if (this.jvmBitness < 64 && System.getenv("ProgramFiles(x86)") == null && IS_VISTA_OR_GREATER) {
+        if (this.jvmBitness < 64 && System.getenv("ProgramFiles(x86)") != null && IS_VISTA_OR_GREATER) {
             WmiQuery<BitnessProperty> bitnessQuery = new WmiQuery<>("Win32_Processor", BitnessProperty.class);
             WmiResult<BitnessProperty> bitnessMap = wmiQueryHandler.queryWMI(bitnessQuery);
             if (bitnessMap.getResultCount() > 0) {

File: oshi-core/src/main/java/oshi/util/ParseUtil.java
Patch:
@@ -125,11 +125,11 @@ private ParseUtil() {
     }
 
     /**
-     * Parse hertz from a string, eg. "2.00MHz" in 2000000L.
+     * Parse hertz from a string, eg. "2.00MHz" is 2000000L.
      *
      * @param hertz
      *            Hertz size.
-     * @return {@link java.lang.Long} Hertz value or -1 if not parsable.
+     * @return {@link java.lang.Long} Hertz value or -1 if not parseable.
      */
     public static long parseHertz(String hertz) {
         Matcher matcher = HERTZ_PATTERN.matcher(hertz.trim());

File: oshi-core/src/main/java/oshi/util/platform/unix/freebsd/BsdSysctlUtil.java
Patch:
@@ -77,7 +77,7 @@ public static long sysctl(String name, long def) {
         IntByReference size = new IntByReference(FreeBsdLibc.UINT64_SIZE);
         Pointer p = new Memory(size.getValue());
         if (0 != FreeBsdLibc.INSTANCE.sysctlbyname(name, p, size, null, 0)) {
-            LOG.error(SYSCTL_FAIL, name, Native.getLastError());
+            LOG.warn(SYSCTL_FAIL, name, Native.getLastError());
             return def;
         }
         return p.getLong(0);
@@ -96,13 +96,13 @@ public static String sysctl(String name, String def) {
         // Call first time with null pointer to get value of size
         IntByReference size = new IntByReference();
         if (0 != FreeBsdLibc.INSTANCE.sysctlbyname(name, null, size, null, 0)) {
-            LOG.error(SYSCTL_FAIL, name, Native.getLastError());
+            LOG.warn(SYSCTL_FAIL, name, Native.getLastError());
             return def;
         }
         // Add 1 to size for null terminated string
         Pointer p = new Memory(size.getValue() + 1);
         if (0 != FreeBsdLibc.INSTANCE.sysctlbyname(name, p, size, null, 0)) {
-            LOG.error(SYSCTL_FAIL, name, Native.getLastError());
+            LOG.warn(SYSCTL_FAIL, name, Native.getLastError());
             return def;
         }
         return p.getString(0);

File: oshi-core/src/main/java/oshi/hardware/Disks.java
Patch:
@@ -23,12 +23,10 @@
  */
 package oshi.hardware;
 
-import java.io.Serializable;
-
 /**
  * Disks refers to hard drives installed in the machine.
  */
-public interface Disks extends Serializable {
+public interface Disks {
 
     /**
      * Get hard drives on this machine

File: oshi-core/src/main/java/oshi/hardware/HWPartition.java
Patch:
@@ -301,7 +301,7 @@ public boolean equals(Object obj) {
         if (obj == null) {
             return false;
         }
-        if (!(obj instanceof HWPartition)) {
+        if (!(obj.getClass().equals(this.getClass()))) {
             return false;
         }
         HWPartition other = (HWPartition) obj;

File: oshi-core/src/main/java/oshi/hardware/common/AbstractDisplay.java
Patch:
@@ -44,7 +44,7 @@ public abstract class AbstractDisplay implements Display {
      *            an array of {@link byte} objects.
      */
     protected AbstractDisplay(byte[] edid) {
-        this.edid = edid;
+        this.edid = Arrays.copyOf(edid, edid.length);
     }
 
     @Override

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxDisks.java
Patch:
@@ -44,8 +44,6 @@
  */
 public class LinuxDisks implements Disks {
 
-    private static final long serialVersionUID = 1L;
-
     private static final Logger LOG = LoggerFactory.getLogger(LinuxDisks.class);
 
     private static final int SECTORSIZE = 512;

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacComputerSystem.java
Patch:
@@ -25,6 +25,7 @@
 
 import static oshi.util.Memoizer.memoize;
 
+import java.nio.charset.StandardCharsets;
 import java.util.function.Supplier;
 
 import oshi.hardware.Baseboard;
@@ -75,11 +76,11 @@ private ManufacturerModelSerial platformExpert() {
         if (platformExpert != null) {
             byte[] data = platformExpert.getByteArrayProperty("manufacturer");
             if (data != null) {
-                manufacturer = new String(data);
+                manufacturer = new String(data, StandardCharsets.UTF_8);
             }
             data = platformExpert.getByteArrayProperty("model");
             if (data != null) {
-                model = new String(data);
+                model = new String(data, StandardCharsets.UTF_8);
             }
             serialNumber = platformExpert.getStringProperty("IOPlatformSerialNumber");
             platformExpert.release();

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdDisks.java
Patch:
@@ -44,8 +44,6 @@
  */
 public class FreeBsdDisks implements Disks {
 
-    private static final long serialVersionUID = 1L;
-
     private static final Pattern MOUNT_PATTERN = Pattern.compile("/dev/(\\S+p\\d+) on (\\S+) .*");
 
     // Create map indexed by device name to populate data from multiple commands

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisDisks.java
Patch:
@@ -45,8 +45,6 @@
  */
 public class SolarisDisks implements Disks {
 
-    private static final long serialVersionUID = 1L;
-
     /**
      * <p>
      * updateDiskStats.

File: oshi-core/src/main/java/oshi/software/os/mac/MacOperatingSystem.java
Patch:
@@ -246,7 +246,7 @@ private OSProcess getProcess(int pid, boolean slowFields) { // NOSONAR squid:S11
             // null terminated
             for (int t = 0; t < taskAllInfo.pbsd.pbi_comm.length; t++) {
                 if (taskAllInfo.pbsd.pbi_comm[t] == 0) {
-                    name = new String(taskAllInfo.pbsd.pbi_comm, 0, t);
+                    name = new String(taskAllInfo.pbsd.pbi_comm, 0, t, StandardCharsets.UTF_8);
                     break;
                 }
             }

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsOperatingSystem.java
Patch:
@@ -144,7 +144,7 @@ public String getCounter() {
         enableDebugPrivilege();
     }
 
-    private final transient WmiQueryHandler wmiQueryHandler = WmiQueryHandler.createInstance();
+    private final WmiQueryHandler wmiQueryHandler = WmiQueryHandler.createInstance();
 
     /**
      * <p>
@@ -177,7 +177,7 @@ public FamilyVersionInfo queryFamilyVersionInfo() {
         return new FamilyVersionInfo("Windows", new OSVersionInfo(version, codeName, buildNumber));
     }
 
-    private String parseVersion(WmiResult<OSVersionProperty> versionInfo, int suiteMask, String buildNumber) {
+    private static String parseVersion(WmiResult<OSVersionProperty> versionInfo, int suiteMask, String buildNumber) {
 
         // Initialize a default, sane value
         String version = System.getProperty("os.version");
@@ -250,7 +250,7 @@ private String parseVersion(WmiResult<OSVersionProperty> versionInfo, int suiteM
      *
      * @return Suites
      */
-    private String parseCodeName(int suiteMask) {
+    private static String parseCodeName(int suiteMask) {
         List<String> suites = new ArrayList<>();
         if ((suiteMask & 0x00000002) != 0) {
             suites.add("Enterprise");

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxOperatingSystem.java
Patch:
@@ -731,7 +731,6 @@ public OSService[] getServices() {
         Set<String> running = new HashSet<>();
         for (OSProcess p : getChildProcesses(1, 0, ProcessSort.PID)) {
             OSService s = new OSService(p.getName(), p.getProcessID(), RUNNING);
-            ;
             services.add(s);
             running.add(p.getName());
         }

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsOperatingSystem.java
Patch:
@@ -725,8 +725,7 @@ private static void enableDebugPrivilege() {
 
     @Override
     public OSService[] getServices() {
-        W32ServiceManager sm = new W32ServiceManager();
-        try {
+        try (W32ServiceManager sm = new W32ServiceManager()) {
             sm.open(Winsvc.SC_MANAGER_ENUMERATE_SERVICE);
             Winsvc.ENUM_SERVICE_STATUS_PROCESS[] services = sm.enumServicesStatusExProcess(WinNT.SERVICE_WIN32,
                     Winsvc.SERVICE_STATE_ALL, null);
@@ -747,7 +746,6 @@ public OSService[] getServices() {
                 svcArray[i] = new OSService(services[i].lpDisplayName, services[i].ServiceStatusProcess.dwProcessId,
                         state);
             }
-            sm.close();
             return svcArray;
         } catch (com.sun.jna.platform.win32.Win32Exception ex) {
             LOG.error("Win32Exception: {}", ex.getMessage());

File: oshi-core/src/main/java/oshi/util/platform/windows/WmiQueryHandler.java
Patch:
@@ -173,8 +173,8 @@ public <T extends Enum<T>> WbemcliUtil.WmiResult<T> queryWMI(WbemcliUtil.WmiQuer
      */
     protected void handleComException(WbemcliUtil.WmiQuery<?> query, COMException ex) {
         LOG.warn(
-                "COM exception querying {}, which might not be on your system. Will not attempt to query it again. Error was: {}:",
-                query.getWmiClassName(), ex.getMessage());
+                "COM exception querying {}, which might not be on your system. Will not attempt to query it again. Error was {}: {}",
+                query.getWmiClassName(), ex.getHresult().intValue(), ex.getMessage());
     }
 
     /**

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsCentralProcessor.java
Patch:
@@ -227,6 +227,7 @@ protected ProcessorIdentifier queryProcessorId() {
         SYSTEM_INFO sysinfo = new SYSTEM_INFO();
         Kernel32.INSTANCE.GetNativeSystemInfo(sysinfo);
         if (sysinfo.processorArchitecture.pi.wProcessorArchitecture.intValue() == 9 // PROCESSOR_ARCHITECTURE_AMD64
+                || sysinfo.processorArchitecture.pi.wProcessorArchitecture.intValue() == 12 // PROCESSOR_ARCHITECTURE_ARM64
                 || sysinfo.processorArchitecture.pi.wProcessorArchitecture.intValue() == 6) { // PROCESSOR_ARCHITECTURE_IA64
             cpu64bit = true;
         }

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsOperatingSystem.java
Patch:
@@ -512,8 +512,8 @@ private List<OSProcess> processMapToList(Collection<Integer> pids, boolean slowF
                         Kernel32.INSTANCE.CloseHandle(token);
                     }
                 }
+                Kernel32.INSTANCE.CloseHandle(pHandle);
             }
-            Kernel32.INSTANCE.CloseHandle(pHandle);
 
             // There is no easy way to get ExecutuionState for a process.
             // The WMI value is null. It's possible to get thread Execution

File: oshi-core/src/test/java/oshi/SystemInfoTest.java
Patch:
@@ -202,7 +202,7 @@ private static void printCpu(CentralProcessor processor) {
             procCpu.append(String.format(" %.1f%%", avg * 100));
         }
         oshi.add(procCpu.toString());
-        long freq = processor.getVendorFreq();
+        long freq = processor.getProcessorIdentifier().getVendorFreq();
         if (freq > 0) {
             oshi.add("Vendor Frequency: " + FormatUtil.formatHertz(freq));
         }

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacBaseboard.java
Patch:
@@ -33,7 +33,7 @@ final class MacBaseboard extends AbstractBaseboard {
     private final String serialNumber;
     private final String version;
 
-    public MacBaseboard(String manufacturer, String serialNumber, String version) {
+    MacBaseboard(String manufacturer, String serialNumber, String version) {
         this.manufacturer = manufacturer;
         this.serialNumber = serialNumber;
         this.version = version;

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacFirmware.java
Patch:
@@ -30,7 +30,7 @@ final class MacFirmware extends AbstractFirmware {
     private final String manufacturer;
     private final String version;
 
-    public MacFirmware(String manufacturer, String version) {
+    MacFirmware(String manufacturer, String version) {
         this.manufacturer = manufacturer;
         this.version = version;
     }

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdBaseboard.java
Patch:
@@ -34,7 +34,7 @@ final class FreeBsdBaseboard extends AbstractBaseboard {
     private final String serialNumber;
     private final String version;
 
-    public FreeBsdBaseboard(String manufacturer, String model, String serialNumber, String version) {
+    FreeBsdBaseboard(String manufacturer, String model, String serialNumber, String version) {
         this.manufacturer = manufacturer;
         this.model = model;
         this.serialNumber = serialNumber;

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdFirmware.java
Patch:
@@ -59,7 +59,7 @@ public String getReleaseDate() {
     private DmidecodeStrings readDmiDecode() {
         String manufacturer = null;
         String version = null;
-        String releaseDate = null;
+        String releaseDate = "";
 
         // $ sudo dmidecode -t bios
         // # dmidecode 3.0

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisBaseboard.java
Patch:
@@ -34,7 +34,7 @@ final class SolarisBaseboard extends AbstractBaseboard {
     private final String serialNumber;
     private final String version;
 
-    public SolarisBaseboard(String manufacturer, String model, String serialNumber, String version) {
+    SolarisBaseboard(String manufacturer, String model, String serialNumber, String version) {
         this.manufacturer = manufacturer;
         this.model = model;
         this.serialNumber = serialNumber;

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisFirmware.java
Patch:
@@ -31,7 +31,7 @@ final class SolarisFirmware extends AbstractFirmware {
     private final String version;
     private final String releaseDate;
 
-    public SolarisFirmware(String manufacturer, String version, String releaseDate) {
+    SolarisFirmware(String manufacturer, String version, String releaseDate) {
         this.manufacturer = manufacturer;
         this.version = version;
         this.releaseDate = releaseDate;

File: oshi-core/src/main/java/oshi/hardware/Baseboard.java
Patch:
@@ -23,13 +23,11 @@
  */
 package oshi.hardware;
 
-import java.io.Serializable;
-
 /**
  * The Baseboard represents the system board, also called motherboard, logic
  * board, etc.
  */
-public interface Baseboard extends Serializable {
+public interface Baseboard {
     /**
      * Get the baseboard manufacturer.
      *

File: oshi-core/src/main/java/oshi/hardware/ComputerSystem.java
Patch:
@@ -23,14 +23,12 @@
  */
 package oshi.hardware;
 
-import java.io.Serializable;
-
 /**
  * The ComputerSystem represents the physical hardware, of a computer
  * system/product and includes BIOS/firmware and a motherboard, logic board,
  * etc.
  */
-public interface ComputerSystem extends Serializable {
+public interface ComputerSystem {
     /**
      * Get the computer system manufacturer.
      *

File: oshi-core/src/main/java/oshi/hardware/Firmware.java
Patch:
@@ -23,12 +23,10 @@
  */
 package oshi.hardware;
 
-import java.io.Serializable;
-
 /**
  * The Firmware represents the low level BIOS or equivalent.
  */
-public interface Firmware extends Serializable {
+public interface Firmware {
 
     /**
      * Get the firmware manufacturer.

File: oshi-core/src/main/java/oshi/hardware/GlobalMemory.java
Patch:
@@ -23,13 +23,11 @@
  */
 package oshi.hardware;
 
-import java.io.Serializable;
-
 /**
  * The GlobalMemory class tracks information about the use of a computer's
  * physical memory (RAM) as well as any available virtual memory.
  */
-public interface GlobalMemory extends Serializable {
+public interface GlobalMemory {
     /**
      * The amount of actual physical memory, in bytes.
      *

File: oshi-core/src/main/java/oshi/hardware/HardwareAbstractionLayer.java
Patch:
@@ -23,13 +23,11 @@
  */
 package oshi.hardware;
 
-import java.io.Serializable;
-
 /**
  * A hardware abstraction layer. Provides access to hardware items such as
  * processors, memory, battery, and disks.
  */
-public interface HardwareAbstractionLayer extends Serializable {
+public interface HardwareAbstractionLayer {
 
     /**
      * Instantiates a {@link oshi.hardware.ComputerSystem} object. This represents

File: oshi-core/src/main/java/oshi/hardware/Sensors.java
Patch:
@@ -23,8 +23,6 @@
  */
 package oshi.hardware;
 
-import java.io.Serializable;
-
 /**
  * Sensors include hardware sensors to monitor temperature, fan speed, and other
  * information.
@@ -42,7 +40,7 @@
  * <a href="http://openhardwaremonitor.org/">Open Hardware Monitor</a> if it is
  * running.
  */
-public interface Sensors extends Serializable {
+public interface Sensors {
     /**
      * CPU Temperature
      *

File: oshi-core/src/main/java/oshi/hardware/VirtualMemory.java
Patch:
@@ -23,14 +23,12 @@
  */
 package oshi.hardware;
 
-import java.io.Serializable;
-
 /**
  * The VirtuallMemory class tracks information about the use of a computer's
  * virtual memory (swap file) which temporarily moves rarely accessed
  * information to a disk or other storage device.
  */
-public interface VirtualMemory extends Serializable {
+public interface VirtualMemory {
 
     /**
      * The current size of the paging/swap file(s), in bytes. If the paging/swap

File: oshi-core/src/main/java/oshi/jna/platform/linux/LinuxLibc.java
Patch:
@@ -31,9 +31,9 @@
  * Linux C Library. This class should be considered non-API as it may be removed
  * if/when its code is incorporated into the JNA project.
  */
-public interface Libc extends CLibrary {
+public interface LinuxLibc extends CLibrary {
 
     /** Constant <code>INSTANCE</code> */
-    Libc INSTANCE = Native.load("c", Libc.class);
+    LinuxLibc INSTANCE = Native.load("c", LinuxLibc.class);
 
 }

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxOperatingSystem.java
Patch:
@@ -40,7 +40,7 @@
 import com.sun.jna.platform.linux.LibC;
 import com.sun.jna.platform.linux.LibC.Sysinfo;
 
-import oshi.jna.platform.linux.Libc;
+import oshi.jna.platform.linux.LinuxLibc;
 import oshi.software.common.AbstractOperatingSystem;
 import oshi.software.os.FileSystem;
 import oshi.software.os.NetworkParams;
@@ -214,7 +214,7 @@ public OSProcess getProcess(int pid) {
     private OSProcess getProcess(int pid, LinuxUserGroupInfo userGroupInfo, boolean slowFields) {
         String path = "";
         Pointer buf = new Memory(1024);
-        int size = Libc.INSTANCE.readlink(String.format("/proc/%d/exe", pid), buf, 1023);
+        int size = LinuxLibc.INSTANCE.readlink(String.format("/proc/%d/exe", pid), buf, 1023);
         if (size > 0) {
             String tmp = buf.getString(0);
             path = tmp.substring(0, tmp.length() < size ? tmp.length() : size);
@@ -344,7 +344,7 @@ private static int getParentPidFromProcFile(int pid) {
     /** {@inheritDoc} */
     @Override
     public int getProcessId() {
-        return Libc.INSTANCE.getpid();
+        return LinuxLibc.INSTANCE.getpid();
     }
 
     /** {@inheritDoc} */

File: oshi-core/src/main/java/oshi/software/os/unix/freebsd/FreeBsdOperatingSystem.java
Patch:
@@ -31,8 +31,8 @@
 import com.sun.jna.Pointer;
 import com.sun.jna.ptr.IntByReference;
 
-import oshi.jna.platform.linux.Libc;
 import oshi.jna.platform.unix.CLibrary.Timeval;
+import oshi.jna.platform.unix.freebsd.FreeBsdLibc;
 import oshi.software.common.AbstractOperatingSystem;
 import oshi.software.os.FileSystem;
 import oshi.software.os.NetworkParams;
@@ -204,7 +204,7 @@ private List<OSProcess> getProcessListFromPS(String psCommand, int pid, boolean
                 Pointer abi = new Memory(32);
                 IntByReference size = new IntByReference(32);
                 // Fetch abi vector
-                if (0 == Libc.INSTANCE.sysctl(mib, mib.length, abi, size, null, 0)) {
+                if (0 == FreeBsdLibc.INSTANCE.sysctl(mib, mib.length, abi, size, null, 0)) {
                     String elf = abi.getString(0);
                     if (elf.contains("ELF32")) {
                         fproc.setBitness(32);
@@ -221,7 +221,7 @@ private List<OSProcess> getProcessListFromPS(String psCommand, int pid, boolean
     /** {@inheritDoc} */
     @Override
     public int getProcessId() {
-        return Libc.INSTANCE.getpid();
+        return FreeBsdLibc.INSTANCE.getpid();
     }
 
     /** {@inheritDoc} */

File: oshi-core/src/main/java/oshi/software/os/unix/solaris/SolarisOperatingSystem.java
Patch:
@@ -29,7 +29,7 @@
 
 import com.sun.jna.platform.unix.solaris.LibKstat.Kstat; // NOSONAR squid:S1191
 
-import oshi.jna.platform.linux.Libc;
+import oshi.jna.platform.unix.solaris.SolarisLibc;
 import oshi.software.common.AbstractOperatingSystem;
 import oshi.software.os.FileSystem;
 import oshi.software.os.NetworkParams;
@@ -199,7 +199,7 @@ private List<OSProcess> getProcessListFromPS(String psCommand, int pid, boolean
     /** {@inheritDoc} */
     @Override
     public int getProcessId() {
-        return Libc.INSTANCE.getpid();
+        return SolarisLibc.INSTANCE.getpid();
     }
 
     /** {@inheritDoc} */

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxComputerSystem.java
Patch:
@@ -67,7 +67,7 @@ public String getSerialNumber() {
                 && !querySerialFromLshal() && !queryModelAndSerialFromLshw()) {
             this.serialNumber = Constants.UNKNOWN;
         }
-        return this.serialNumber;
+        return super.getSerialNumber();
     }
 
     /** {@inheritDoc} */

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacComputerSystem.java
Patch:
@@ -46,7 +46,7 @@ public String getManufacturer() {
         if (this.manufacturer == null) {
             this.manufacturer = "Apple Inc.";
         }
-        return this.manufacturer;
+        return super.getManufacturer();
     }
 
     /** {@inheritDoc} */

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsComputerSystem.java
Patch:
@@ -66,7 +66,7 @@ public String getSerialNumber() {
         if (this.serialNumber == null) {
             querySystemSerialNumber();
         }
-        return this.serialNumber;
+        return super.getSerialNumber();
     }
 
     /** {@inheritDoc} */

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsDisks.java
Patch:
@@ -37,15 +37,15 @@
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiQuery;
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiResult;
 
-import oshi.data.windows.PerfCounterQuery;
-import oshi.data.windows.PerfCounterWildcardQuery;
-import oshi.data.windows.PerfCounterWildcardQuery.PdhCounterWildcardProperty;
 import oshi.hardware.Disks;
 import oshi.hardware.HWDiskStore;
 import oshi.hardware.HWPartition;
 import oshi.util.ParseUtil;
+import oshi.util.platform.windows.PerfCounterQuery;
+import oshi.util.platform.windows.PerfCounterWildcardQuery;
 import oshi.util.platform.windows.WmiQueryHandler;
 import oshi.util.platform.windows.WmiUtil;
+import oshi.util.platform.windows.PerfCounterWildcardQuery.PdhCounterWildcardProperty;
 
 /**
  * Windows hard disk implementation.

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsSensors.java
Patch:
@@ -32,11 +32,11 @@
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiQuery; // NOSONAR
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiResult;
 
-import oshi.data.windows.PerfCounterWildcardQuery;
-import oshi.data.windows.PerfCounterWildcardQuery.PdhCounterWildcardProperty;
 import oshi.hardware.common.AbstractSensors;
+import oshi.util.platform.windows.PerfCounterWildcardQuery;
 import oshi.util.platform.windows.WmiQueryHandler;
 import oshi.util.platform.windows.WmiUtil;
+import oshi.util.platform.windows.PerfCounterWildcardQuery.PdhCounterWildcardProperty;
 
 /**
  * <p>

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsVirtualMemory.java
Patch:
@@ -32,9 +32,9 @@
 import com.sun.jna.platform.win32.Psapi;
 import com.sun.jna.platform.win32.Psapi.PERFORMANCE_INFORMATION;
 
-import oshi.data.windows.PerfCounterQuery;
-import oshi.data.windows.PerfCounterQuery.PdhCounterProperty;
 import oshi.hardware.common.AbstractVirtualMemory;
+import oshi.util.platform.windows.PerfCounterQuery;
+import oshi.util.platform.windows.PerfCounterQuery.PdhCounterProperty;
 
 /**
  * Memory obtained from WMI

File: oshi-core/src/main/java/oshi/software/os/mac/MacOperatingSystem.java
Patch:
@@ -155,7 +155,7 @@ public OSProcess getProcess(int pid) {
         return getProcess(pid, true);
     }
 
-    private OSProcess getProcess(int pid, boolean slowFields) {
+    private OSProcess getProcess(int pid, boolean slowFields) { // NOSONAR squid:S1172
         ProcTaskAllInfo taskAllInfo = new ProcTaskAllInfo();
         if (0 > SystemB.INSTANCE.proc_pidinfo(pid, SystemB.PROC_PIDTASKALLINFO, 0, taskAllInfo, taskAllInfo.size())) {
             return null;

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsFileSystem.java
Patch:
@@ -33,14 +33,14 @@
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiQuery;
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiResult;
 
-import oshi.data.windows.PerfCounterQuery;
-import oshi.data.windows.PerfCounterWildcardQuery;
-import oshi.data.windows.PerfCounterWildcardQuery.PdhCounterWildcardProperty;
 import oshi.software.os.FileSystem;
 import oshi.software.os.OSFileStore;
 import oshi.util.ParseUtil;
+import oshi.util.platform.windows.PerfCounterQuery;
+import oshi.util.platform.windows.PerfCounterWildcardQuery;
 import oshi.util.platform.windows.WmiQueryHandler;
 import oshi.util.platform.windows.WmiUtil;
+import oshi.util.platform.windows.PerfCounterWildcardQuery.PdhCounterWildcardProperty;
 
 /**
  * The Windows File System contains {@link oshi.software.os.OSFileStore}s which

File: oshi-core/src/main/java/oshi/util/platform/windows/PerfCounterQueryHandler.java
Patch:
@@ -21,7 +21,7 @@
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  */
-package oshi.data.windows;
+package oshi.util.platform.windows;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -35,7 +35,6 @@
 import com.sun.jna.platform.win32.WinNT.HANDLEByReference; // NOSONAR
 
 import oshi.util.FormatUtil;
-import oshi.util.platform.windows.PerfDataUtil;
 import oshi.util.platform.windows.PerfDataUtil.PerfCounter;
 
 /**

File: oshi-core/src/main/java/oshi/data/windows/PerfCounterQuery.java
Patch:
@@ -45,7 +45,7 @@
  */
 public class PerfCounterQuery<T extends Enum<T>> {
 
-    private static final Logger LOG = LoggerFactory.getLogger(PerfCounter.class);
+    private static final Logger LOG = LoggerFactory.getLogger(PerfCounterQuery.class);
 
     /*
      * Set on instantiation

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisComputerSystem.java
Patch:
@@ -43,7 +43,7 @@ public String getManufacturer() {
         if (this.manufacturer == null) {
             readSmbios();
         }
-        return this.manufacturer;
+        return super.getManufacturer();
     }
 
     /** {@inheritDoc} */
@@ -52,7 +52,7 @@ public String getModel() {
         if (this.model == null) {
             readSmbios();
         }
-        return this.model;
+        return super.getModel();
     }
 
     /** {@inheritDoc} */
@@ -61,7 +61,7 @@ public String getSerialNumber() {
         if (this.serialNumber == null) {
             this.serialNumber = getSystemSerialNumber();
         }
-        return this.serialNumber;
+        return super.getSerialNumber();
     }
 
     /** {@inheritDoc} */

File: oshi-core/src/main/java/oshi/software/common/AbstractNetworkParams.java
Patch:
@@ -51,7 +51,7 @@ public String getDomainName() {
         try {
             return InetAddress.getLocalHost().getCanonicalHostName();
         } catch (UnknownHostException e) {
-            LOG.error("Unknown host exception when getting address of local host: " + e);
+            LOG.error("Unknown host exception when getting address of local host: {}", e);
             return "";
         }
     }
@@ -68,7 +68,7 @@ public String getHostName() {
                 return hn.substring(0, dot);
             }
         } catch (UnknownHostException e) {
-            LOG.error("Unknown host exception when getting address of local host: " + e);
+            LOG.error("Unknown host exception when getting address of local host: {}", e);
             return "";
         }
     }

File: oshi-core/src/main/java/oshi/software/os/mac/MacOperatingSystem.java
Patch:
@@ -65,7 +65,7 @@ public class MacOperatingSystem extends AbstractOperatingSystem {
     private int maxProc = 1024;
 
     // 64-bit flag
-    int P_LP64 = 0x4;
+    private static final int P_LP64 = 0x4;
     /*
      * OS X States:
      */

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdComputerSystem.java
Patch:
@@ -43,7 +43,7 @@ public String getManufacturer() {
         if (this.manufacturer == null) {
             readDmiDecode();
         }
-        return this.manufacturer;
+        return super.getManufacturer();
     }
 
     /** {@inheritDoc} */
@@ -52,7 +52,7 @@ public String getModel() {
         if (this.model == null) {
             readDmiDecode();
         }
-        return this.model;
+        return super.getModel();
     }
 
     /** {@inheritDoc} */
@@ -61,7 +61,7 @@ public String getSerialNumber() {
         if (this.serialNumber == null) {
             readDmiDecode();
         }
-        return this.serialNumber;
+        return super.getSerialNumber();
     }
 
     /** {@inheritDoc} */

File: oshi-core/src/main/java/oshi/software/os/OSFileStore.java
Patch:
@@ -56,8 +56,8 @@ public class OSFileStore implements Serializable {
     private long freeSpace;
     private long usableSpace;
     private long totalSpace;
-    private long freeInodes = -1;
-    private long totalInodes = -1;
+    private long freeInodes;
+    private long totalInodes;
 
     /**
      * <p>

File: oshi-core/src/main/java/oshi/SystemInfo.java
Patch:
@@ -25,7 +25,7 @@
 
 import java.io.Serializable;
 
-import com.sun.jna.Platform;
+import com.sun.jna.Platform; // NOSONAR squid:S1191
 
 import oshi.hardware.HardwareAbstractionLayer;
 import oshi.hardware.platform.linux.LinuxHardwareAbstractionLayer;

File: oshi-core/src/main/java/oshi/jna/platform/windows/PowrProf.java
Patch:
@@ -23,12 +23,11 @@
  */
 package oshi.jna.platform.windows;
 
-import com.sun.jna.Library;
+import com.sun.jna.Library; // NOSONAR squid:S1191
 import com.sun.jna.Native;
 import com.sun.jna.Pointer;
 import com.sun.jna.Structure;
 import com.sun.jna.Structure.FieldOrder;
-import com.sun.jna.platform.win32.NTStatus;
 
 /**
  * Power profile stats. This class should be considered non-API as it may be

File: oshi-core/src/main/java/oshi/software/os/unix/solaris/SolarisFileSystem.java
Patch:
@@ -49,7 +49,7 @@ public class SolarisFileSystem implements FileSystem {
     private static final long serialVersionUID = 1L;
 
     // Solaris defines a set of virtual file systems
-    private final List<String> pseudofs = Arrays.asList(new String[] { //
+    private final List<String> pseudofs = Arrays.asList(//
             "proc", // Proc file system
             "devfs", // Dev temporary file system
             "ctfs", // Contract file system
@@ -61,10 +61,10 @@ public class SolarisFileSystem implements FileSystem {
             // "tmpfs", // Temporary file system
             // NOTE: tmpfs is evaluated apart, because Solaris uses it for
             // RAMdisks
-    });
+    );
 
     // System path mounted as tmpfs
-    private final List<String> tmpfsPaths = Arrays.asList(new String[] { "/system", "/tmp", "/dev/fd" });
+    private final List<String> tmpfsPaths = Arrays.asList("/system", "/tmp", "/dev/fd");
 
     /**
      * Checks if file path equals or starts with an element in the given list

File: oshi-core/src/main/java/oshi/util/GlobalConfig.java
Patch:
@@ -33,9 +33,6 @@
 /**
  * The global configuration utility. See
  * {@code src/main/resources/default.properties} for default values.
- *
- * @author cilki
- * @since 4.0.0
  */
 public final class GlobalConfig {
 

File: oshi-core/src/main/java/oshi/PlatformEnum.java
Patch:
@@ -25,8 +25,6 @@
 
 /**
  * Enum of supported operating systems.
- *
- * @author alessandro[at]perucchi[dot]org
  */
 public enum PlatformEnum {
     /**

File: oshi-core/src/main/java/oshi/hardware/Disks.java
Patch:
@@ -27,15 +27,13 @@
 
 /**
  * Disks refers to hard drives installed in the machine.
- *
- * @author enrico[dot]bianchi[at]gmail[dot]com
  */
 public interface Disks extends Serializable {
 
     /**
      * Get hard drives on this machine
      *
-     * @return Array of {@link HWDiskStore} objects
+     * @return Array of {@link oshi.hardware.HWDiskStore} objects
      */
     HWDiskStore[] getDisks();
 }

File: oshi-core/src/main/java/oshi/hardware/Display.java
Patch:
@@ -28,8 +28,6 @@
 /**
  * Display refers to the information regarding a video source and monitor
  * identified by the EDID standard.
- *
- * @author widdis[at]gmail[dot]com
  */
 public interface Display extends Serializable {
     /**

File: oshi-core/src/main/java/oshi/hardware/GlobalMemory.java
Patch:
@@ -53,7 +53,7 @@ public interface GlobalMemory extends Serializable {
 
     /**
      * Virtual memory, such as a swap file.
-     * 
+     *
      * @return A VirtualMemory object.
      */
     VirtualMemory getVirtualMemory();

File: oshi-core/src/main/java/oshi/hardware/Networks.java
Patch:
@@ -27,15 +27,13 @@
 
 /**
  * Networks refers to network interfaces installed in the machine.
- *
- * @author enrico[dot]bianchi[at]gmail[dot]com
  */
 public interface Networks extends Serializable {
 
     /**
      * Get network interfaces on this machine
      *
-     * @return Array of {@link NetworkIF} objects
+     * @return Array of {@link oshi.hardware.NetworkIF} objects
      */
     NetworkIF[] getNetworks();
 }

File: oshi-core/src/main/java/oshi/hardware/PowerSource.java
Patch:
@@ -47,8 +47,8 @@ public interface PowerSource extends Serializable {
     /**
      * Estimated time remaining on the power source, in seconds.
      *
-     * @return If positive, seconds remaining. If negative, -1.0 (calculating)
-     *         or -2.0 (unlimited)
+     * @return If positive, seconds remaining. If negative, -1.0 (calculating) or
+     *         -2.0 (unlimited)
      */
     double getTimeRemaining();
 

File: oshi-core/src/main/java/oshi/hardware/Sensors.java
Patch:
@@ -53,8 +53,8 @@ public interface Sensors extends Serializable {
     /**
      * Fan speeds
      *
-     * @return Speed in rpm for all fans. May return empty array if no fans
-     *         detected or 0 fan speed if unable to measure fan speed.
+     * @return Speed in rpm for all fans. May return empty array if no fans detected
+     *         or 0 fan speed if unable to measure fan speed.
      */
     int[] getFanSpeeds();
 

File: oshi-core/src/main/java/oshi/hardware/SoundCard.java
Patch:
@@ -24,7 +24,9 @@
 package oshi.hardware;
 
 /**
- * @author BilalAM
+ * <p>
+ * SoundCard interface.
+ * </p>
  */
 public interface SoundCard {
 

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxNetworks.java
Patch:
@@ -28,7 +28,9 @@
 import oshi.util.FileUtil;
 
 /**
- * @author enrico[dot]bianchi[at]gmail[dot]com
+ * <p>
+ * LinuxNetworks class.
+ * </p>
  */
 public class LinuxNetworks extends AbstractNetworks {
 

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdNetworks.java
Patch:
@@ -29,7 +29,9 @@
 import oshi.util.ParseUtil;
 
 /**
- * @author widdis[at]gmail[dot]com
+ * <p>
+ * FreeBsdNetworks class.
+ * </p>
  */
 public class FreeBsdNetworks extends AbstractNetworks {
 

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisNetworks.java
Patch:
@@ -30,7 +30,9 @@
 import oshi.util.platform.unix.solaris.KstatUtil;
 
 /**
- * @author widdis[at]gmail[dot]com
+ * <p>
+ * SolarisNetworks class.
+ * </p>
  */
 public class SolarisNetworks extends AbstractNetworks {
 

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsNetworks.java
Patch:
@@ -36,7 +36,9 @@
 import oshi.util.ParseUtil;
 
 /**
- * @author widdis[at]gmail[dot]com
+ * <p>
+ * WindowsNetworks class.
+ * </p>
  */
 public class WindowsNetworks extends AbstractNetworks {
 

File: oshi-core/src/main/java/oshi/jna/platform/linux/Libc.java
Patch:
@@ -30,11 +30,10 @@
 /**
  * Linux C Library. This class should be considered non-API as it may be removed
  * if/when its code is incorporated into the JNA project.
- *
- * @author widdis[at]gmail[dot]com
  */
 public interface Libc extends CLibrary {
 
+    /** Constant <code>INSTANCE</code> */
     Libc INSTANCE = Native.load("c", Libc.class);
 
 }

File: oshi-core/src/main/java/oshi/jna/platform/mac/SystemB.java
Patch:
@@ -30,9 +30,8 @@
 /**
  * System class. This class should be considered non-API as it may be removed
  * if/when its code is incorporated into the JNA project.
- *
- * @author widdis[at]gmail[dot]com
  */
 public interface SystemB extends CLibrary, com.sun.jna.platform.mac.SystemB {
+    /** Constant <code>INSTANCE</code> */
     SystemB INSTANCE = Native.load("System", SystemB.class);
 }

File: oshi-core/src/main/java/oshi/util/platform/linux/ProcUtil.java
Patch:
@@ -65,7 +65,7 @@ private ProcUtil() {
     /**
      * The proc filesystem location may be customized to allow alternative proc
      * plugins, particularly useful for containers.
-     * 
+     *
      * @return The proc filesystem path, with a leading / but not a trailing one,
      *         e.g., "/proc"
      */
@@ -141,4 +141,4 @@ public boolean accept(File file) {
         });
         return pids != null ? pids : new File[0];
     }
-}
\ No newline at end of file
+}

File: oshi-core/src/main/java/oshi/util/platform/mac/IOKitUtil.java
Patch:
@@ -261,4 +261,4 @@ public static CFMutableDictionaryRef getBSDNameMatchingDict(String bsdName) {
         }
         return null;
     }
-}
\ No newline at end of file
+}

File: oshi-core/src/main/java/oshi/util/platform/mac/SmcUtil.java
Patch:
@@ -45,8 +45,6 @@
 
 /**
  * Provides access to SMC calls on OS X
- *
- * @author widdis[at]gmail[dot]com
  */
 public class SmcUtil {
     private static final Logger LOG = LoggerFactory.getLogger(SmcUtil.class);
@@ -245,4 +243,4 @@ public static int smcCall(int index, SMCKeyData inputStructure, SMCKeyData outpu
         return IOKit.INSTANCE.IOConnectCallStructMethod(conn.getValue(), index, inputStructure, inputStructure.size(),
                 outputStructure, new IntByReference(outputStructure.size()));
     }
-}
\ No newline at end of file
+}

File: oshi-core/src/test/java/oshi/SystemInfoTest.java
Patch:
@@ -74,7 +74,8 @@ public void testCentralProcessor() {
     /**
      * The main method, demonstrating use of classes.
      *
-     * @param args the arguments
+     * @param args
+     *            the arguments
      */
     public static void main(String[] args) {
         // Options: ERROR > WARN > INFO > DEBUG > TRACE

File: oshi-core/src/test/java/oshi/hardware/SoundCardTest.java
Patch:
@@ -31,8 +31,6 @@
 
 /**
  * Test SoundCard
- *
- * @author BilalAM
  */
 public class SoundCardTest {
 

File: oshi-core/src/test/java/oshi/util/ExecutingCommandTest.java
Patch:
@@ -39,7 +39,8 @@
 public class ExecutingCommandTest {
 
     private static final String ECHO = SystemInfo.getCurrentPlatformEnum().equals(PlatformEnum.WINDOWS)
-            ? "cmd.exe /C echo Test" : "echo Test";
+            ? "cmd.exe /C echo Test"
+            : "echo Test";
     private static final String BAD_COMMAND = "noOSshouldHaveACommandNamedThis";
 
     @Test

File: oshi-core/src/test/java/oshi/util/ParseUtilTest.java
Patch:
@@ -62,7 +62,7 @@ public void testParseLastInt() {
         assertEquals(2, ParseUtil.parseLastInt("foo", 2));
         assertEquals(3, ParseUtil.parseLastInt("max_int plus one is 2147483648", 3));
         assertEquals(255, ParseUtil.parseLastInt("0xff", 4));
-        
+
         assertEquals(-1L, ParseUtil.parseLastLong("foo : bar", -1L));
         assertEquals(1L, ParseUtil.parseLastLong("foo : 1", 0L));
         assertEquals(2L, ParseUtil.parseLastLong("foo", 2L));

File: oshi-core/src/test/java/oshi/util/ParseUtilTest.java
Patch:
@@ -61,11 +61,13 @@ public void testParseLastInt() {
         assertEquals(1, ParseUtil.parseLastInt("foo : 1", 0));
         assertEquals(2, ParseUtil.parseLastInt("foo", 2));
         assertEquals(3, ParseUtil.parseLastInt("max_int plus one is 2147483648", 3));
-
+        assertEquals(255, ParseUtil.parseLastInt("0xff", 4));
+        
         assertEquals(-1L, ParseUtil.parseLastLong("foo : bar", -1L));
         assertEquals(1L, ParseUtil.parseLastLong("foo : 1", 0L));
         assertEquals(2L, ParseUtil.parseLastLong("foo", 2L));
         assertEquals(2147483648L, ParseUtil.parseLastLong("max_int plus one is 2147483648", 3L));
+        assertEquals(255L, ParseUtil.parseLastLong("0xff", 0L));
 
         double epsilon = 1.1102230246251565E-16;
         assertEquals(-1d, ParseUtil.parseLastDouble("foo : bar", -1d), epsilon);

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacSensors.java
Patch:
@@ -47,7 +47,7 @@ public double getCpuTemperature() {
 
     private double queryCpuTemperature() {
         SmcUtil.smcOpen();
-        double temp = SmcUtil.smcGetSp78(IOKit.SMC_KEY_CPU_TEMP, 50);
+        double temp = SmcUtil.smcGetFloat(IOKit.SMC_KEY_CPU_TEMP, 50);
         SmcUtil.smcClose();
         if (temp > 0d) {
             return temp;
@@ -74,7 +74,7 @@ private int[] queryFanSpeeds() {
         }
         int[] fanSpeeds = new int[this.numFans];
         for (int i = 0; i < this.numFans; i++) {
-            fanSpeeds[i] = (int) SmcUtil.smcGetFpe2(String.format(IOKit.SMC_KEY_FAN_SPEED, i), 50);
+            fanSpeeds[i] = (int) SmcUtil.smcGetFloat(String.format(IOKit.SMC_KEY_FAN_SPEED, i), 50);
         }
         SmcUtil.smcClose();
         return fanSpeeds;
@@ -93,7 +93,7 @@ public double getCpuVoltage() {
 
     private double queryCpuVoltage() {
         SmcUtil.smcOpen();
-        double volts = SmcUtil.smcGetFpe2(IOKit.SMC_KEY_CPU_VOLTAGE, 50) / 1000d;
+        double volts = SmcUtil.smcGetFloat(IOKit.SMC_KEY_CPU_VOLTAGE, 50) / 1000d;
         SmcUtil.smcClose();
         return volts;
     }

File: oshi-core/src/test/java/oshi/hardware/CentralProcessorTest.java
Patch:
@@ -76,8 +76,10 @@ public void testCentralProcessor() {
                     && p.getProcessorCpuLoadBetweenTicks(procTicks)[cpu] <= 1);
             assertEquals(p.getProcessorCpuLoadTicks()[cpu].length, TickType.values().length);
         }
-
+        
         assertTrue(p.getSystemUptime() > 0);
+        assertTrue(p.getBootTime() > 0);
+        assertTrue(p.getBootTime() < System.currentTimeMillis() / 1000L);
         assertTrue(p.getLogicalProcessorCount() >= p.getPhysicalProcessorCount());
         assertTrue(p.getPhysicalProcessorCount() > 0);
         assertTrue(p.getPhysicalProcessorCount() >= p.getPhysicalPackageCount());

File: oshi-demo/src/main/java/oshi/demo/DetectVM.java
Patch:
@@ -84,7 +84,7 @@ public static String identifyVM() {
         for (NetworkIF nif : nifs) {
             String mac = nif.getMacaddr().toUpperCase();
             String oui = findOuiByMacAddressIfPossible(mac);
-            if (oui != null) {
+            if (oui != null && !oui.isEmpty()) {
                 return oui;
             }
         }

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxOperatingSystem.java
Patch:
@@ -214,7 +214,8 @@ private OSProcess getProcess(int pid, boolean slowFields) {
         Pointer buf = new Memory(1024);
         int size = Libc.INSTANCE.readlink(String.format("/proc/%d/exe", pid), buf, 1023);
         if (size > 0) {
-            path = buf.getString(0).substring(0, size);
+            String tmp = buf.getString(0);
+            path = tmp.substring(0, tmp.length() < size ? tmp.length() : size);
         }
         Map<String, String> io = FileUtil.getKeyValueMapFromFile(String.format("/proc/%d/io", pid), ":");
         // See man proc for how to parse /proc/[pid]/stat

File: oshi-core/src/main/java/oshi/data/windows/PerfCounterQuery.java
Patch:
@@ -106,7 +106,7 @@ public PerfCounterQuery(Class<T> propertyEnum, String perfObject, String perfWmi
     public PerfCounterQuery(Class<T> propertyEnum, String perfObject, String perfWmiClass, String queryKey) {
         if (PdhCounterProperty.class.isAssignableFrom(propertyEnum.getDeclaringClass())) {
             throw new IllegalArgumentException(
-                    propertyEnum.getDeclaringClass().getName() + " must implement PdhCounterProperty.");
+                    propertyEnum.getClass().getName() + " must implement PdhCounterProperty.");
         }
         this.propertyEnum = propertyEnum;
         this.perfObject = perfObject;

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsCentralProcessor.java
Patch:
@@ -53,7 +53,7 @@
 import oshi.jna.platform.windows.VersionHelpers;
 import oshi.jna.platform.windows.WinNT;
 import oshi.jna.platform.windows.WinNT.SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;
-import oshi.jna.platform.windows.WinNT.SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX.GROUP_AFFINITY;
+import oshi.jna.platform.windows.WinNT.GROUP_AFFINITY;
 import oshi.util.ParseUtil;
 import oshi.util.platform.windows.WmiQueryHandler;
 import oshi.util.platform.windows.WmiUtil;
@@ -271,10 +271,10 @@ private LogicalProcessor[] getLogicalProcessorInformationEx() {
         for (SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX proc : processors) {
             if (proc.relationship == WinNT.LOGICAL_PROCESSOR_RELATIONSHIP.RelationProcessorPackage) {
                 // Package may be on multiple processor groups
-                packageMaskList.add(proc.payload.Processor.getGroupMask());
+                packageMaskList.add(((WinNT.PROCESSOR_RELATIONSHIP)proc).groupMask);
             } else if (proc.relationship == WinNT.LOGICAL_PROCESSOR_RELATIONSHIP.RelationProcessorCore) {
                 // Exactly one element for the ProcessorCore relationship
-                coreMaskList.add(proc.payload.Processor.getGroupMask()[0]);
+                coreMaskList.add(((WinNT.PROCESSOR_RELATIONSHIP)proc).groupMask[0]);
             }
         }
         this.physicalProcessorCount = coreMaskList.size();

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsOperatingSystem.java
Patch:
@@ -255,7 +255,7 @@ private void initBitness() {
             // Try the easy way
             if (System.getenv("ProgramFiles(x86)") != null) {
                 this.bitness = 64;
-            } else {
+            } else if (IS_VISTA_OR_GREATER) {
                 WmiQuery<BitnessProperty> bitnessQuery = new WmiQuery<>("Win32_Processor", BitnessProperty.class);
                 WmiResult<BitnessProperty> bitnessMap = wmiQueryHandler.queryWMI(bitnessQuery);
                 if (bitnessMap.getResultCount() > 0) {

File: oshi-core/src/main/java/oshi/util/platform/linux/ProcUtil.java
Patch:
@@ -68,7 +68,7 @@ public static double getSystemUptimeSeconds() {
      *
      * @return Array of CPU ticks
      */
-    public static long[] getSystemCpuLoadTicks() {
+    public static long[] readSystemCpuLoadTicks() {
         long[] ticks = new long[TickType.values().length];
         // /proc/stat expected format
         // first line is overall user,nice,system,idle,iowait,irq, etc.

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxComputerSystem.java
Patch:
@@ -49,7 +49,7 @@ public String getManufacturer() {
                 this.manufacturer = sysVendor;
             }
         }
-        return this.manufacturer;
+        return super.getManufacturer();
     }
 
     /**

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacUsbDevice.java
Patch:
@@ -265,7 +265,6 @@ private static MacUsbDevice getDeviceAndChildren(Long registryEntryId, String vi
         Collections.sort(usbDevices);
         return new MacUsbDevice(nameMap.getOrDefault(registryEntryId, vendorId + ":" + productId),
                 vendorMap.getOrDefault(registryEntryId, ""), vendorId, productId,
-                serialMap.getOrDefault(registryEntryId, ""),
-                usbDevices.toArray(new UsbDevice[usbDevices.size()]));
+                serialMap.getOrDefault(registryEntryId, ""), usbDevices.toArray(new UsbDevice[usbDevices.size()]));
     }
 }

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdUsbDevice.java
Patch:
@@ -178,7 +178,7 @@ private static FreeBsdUsbDevice getDeviceAndChildren(String devPath, String vid,
             usbDevices.add(getDeviceAndChildren(path, vendorId, productId));
         }
         Collections.sort(usbDevices);
-        return new FreeBsdUsbDevice(nameMap.getOrDefault(devPath, vendorId + ":" + productId), "", vendorId,
-                productId, "", usbDevices.toArray(new UsbDevice[usbDevices.size()]));
+        return new FreeBsdUsbDevice(nameMap.getOrDefault(devPath, vendorId + ":" + productId), "", vendorId, productId,
+                "", usbDevices.toArray(new UsbDevice[usbDevices.size()]));
     }
 }

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisUsbDevice.java
Patch:
@@ -182,7 +182,7 @@ private static SolarisUsbDevice getDeviceAndChildren(String devPath, String vid,
             usbDevices.add(getDeviceAndChildren(path, vendorId, productId));
         }
         Collections.sort(usbDevices);
-        return new SolarisUsbDevice(nameMap.getOrDefault(devPath, vendorId + ":" + productId), "", vendorId,
-                productId, "", usbDevices.toArray(new UsbDevice[usbDevices.size()]));
+        return new SolarisUsbDevice(nameMap.getOrDefault(devPath, vendorId + ":" + productId), "", vendorId, productId,
+                "", usbDevices.toArray(new UsbDevice[usbDevices.size()]));
     }
 }

File: oshi-core/src/main/java/oshi/util/ParseUtil.java
Patch:
@@ -24,6 +24,7 @@
 package oshi.util;
 
 import java.math.BigInteger;
+import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Map;
@@ -266,14 +267,14 @@ public static byte[] longToByteArray(long value, int valueSize, int length) {
      * Convert a string to an integer representation.
      *
      * @param str
-     *            A human readable string
+     *            A human readable ASCII string
      * @param size
      *            Number of characters to convert to the long. May not exceed 8.
      * @return An integer representing the string where each character is
      *         treated as a byte
      */
     public static long strToLong(String str, int size) {
-        return byteArrayToLong(str.getBytes(), size);
+        return byteArrayToLong(str.getBytes(StandardCharsets.US_ASCII), size);
     }
 
     /**

File: oshi-core/src/main/java/oshi/util/platform/windows/WmiUtil.java
Patch:
@@ -23,7 +23,7 @@
  */
 package oshi.util.platform.windows;
 
-import com.sun.jna.platform.win32.Variant;
+import com.sun.jna.platform.win32.Variant; // NOSONAR
 import com.sun.jna.platform.win32.COM.Wbemcli;
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiQuery;
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiResult;

File: oshi-core/src/test/java/oshi/SystemInfoTest.java
Patch:
@@ -182,6 +182,7 @@ private static void printCpu(CentralProcessor processor) {
         System.out.println(
                 "Context Switches/Interrupts: " + processor.getContextSwitches() + " / " + processor.getInterrupts());
         long[] prevTicks = processor.getSystemCpuLoadTicks();
+        processor.getProcessorCpuLoadTicks();
         System.out.println("CPU, IOWait, and IRQ ticks @ 0 sec:" + Arrays.toString(prevTicks));
         // Wait a second...
         Util.sleep(1000);

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsDisks.java
Patch:
@@ -47,6 +47,7 @@
 import oshi.hardware.HWPartition;
 import oshi.util.MapUtil;
 import oshi.util.ParseUtil;
+import oshi.util.platform.windows.PdhUtilXP;
 import oshi.util.platform.windows.PerfDataUtil;
 import oshi.util.platform.windows.PerfDataUtil.PerfCounter;
 import oshi.util.platform.windows.WmiQueryHandler;
@@ -79,7 +80,7 @@ public class WindowsDisks implements Disks {
 
     private static final String PHYSICALDRIVE_PREFIX = "\\\\.\\PHYSICALDRIVE";
     private static final String PHYSICAL_DISK = "PhysicalDisk";
-    private static final String PHYSICAL_DISK_LOCALIZED = PdhUtil.PdhLookupPerfNameByIndex(null,
+    private static final String PHYSICAL_DISK_LOCALIZED = PdhUtilXP.PdhLookupPerfNameByIndex(null,
             PdhUtil.PdhLookupPerfIndexByEnglishName(PHYSICAL_DISK));
     private static final String TOTAL_INSTANCE = "_Total";
 
@@ -128,7 +129,7 @@ enum PhysicalDiskProperty {
     private static WmiQuery<PhysicalDiskProperty> physicalDiskQuery = null;
 
     static {
-        String physicalDisk = PdhUtil.PdhLookupPerfNameByIndex(null,
+        String physicalDisk = PdhUtilXP.PdhLookupPerfNameByIndex(null,
                 PdhUtil.PdhLookupPerfIndexByEnglishName(PHYSICAL_DISK));
         boolean enumeration = true;
         try {

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsSensors.java
Patch:
@@ -33,6 +33,7 @@
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiResult;
 
 import oshi.hardware.Sensors;
+import oshi.util.platform.windows.PdhUtilXP;
 import oshi.util.platform.windows.PerfDataUtil;
 import oshi.util.platform.windows.PerfDataUtil.PerfCounter;
 import oshi.util.platform.windows.WmiQueryHandler;
@@ -90,7 +91,7 @@ public WindowsSensors() {
     }
 
     private void initPdhCounters() {
-        String thermalZoneInfo = PdhUtil.PdhLookupPerfNameByIndex(null,
+        String thermalZoneInfo = PdhUtilXP.PdhLookupPerfNameByIndex(null,
                 PdhUtil.PdhLookupPerfIndexByEnglishName("Thermal Zone Information"));
         boolean enumeration = false;
         if (!thermalZoneInfo.isEmpty()) {

File: oshi-core/src/test/java/oshi/software/os/OperatingSystemTest.java
Patch:
@@ -77,7 +77,7 @@ public void testOperatingSystem() {
         assertTrue(proc.getParentProcessID() > 0);
         assertTrue(proc.getThreadCount() > 0);
         assertTrue(proc.getPriority() >= -20 && proc.getPriority() <= 128);
-        assertTrue(proc.getVirtualSize() >= proc.getResidentSetSize());
+        assertTrue(proc.getVirtualSize() >= 0);
         assertTrue(proc.getResidentSetSize() >= 0);
         assertTrue(proc.getKernelTime() >= 0);
         assertTrue(proc.getUserTime() >= 0);

File: oshi-core/src/test/java/oshi/util/UtilTest.java
Patch:
@@ -38,12 +38,12 @@ public class UtilTest {
     public void testSleep() {
         long now = System.currentTimeMillis();
         Util.sleep(100);
-        assertTrue(System.currentTimeMillis() - now >= 100);
+        assertTrue(System.currentTimeMillis() - now >= 99);
 
         now = System.currentTimeMillis();
         long then = now + 100;
         Util.sleepAfter(then, 100);
-        assertTrue(System.currentTimeMillis() - now >= 200);
+        assertTrue(System.currentTimeMillis() - now >= 199);
 
         now = System.currentTimeMillis();
         then = now - 550;

File: oshi-json/src/test/java/oshi/json/software/os/OperatingSystemTest.java
Patch:
@@ -77,7 +77,7 @@ public void testOperatingSystem() {
         assertTrue(proc.getParentProcessID() > 0);
         assertTrue(proc.getThreadCount() > 0);
         assertTrue(proc.getPriority() >= -20 && proc.getPriority() <= 128);
-        assertTrue(proc.getVirtualSize() >= proc.getResidentSetSize());
+        assertTrue(proc.getVirtualSize() >= 0);
         assertTrue(proc.getResidentSetSize() >= 0);
         assertTrue(proc.getKernelTime() >= 0);
         assertTrue(proc.getUserTime() >= 0);

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsBaseboard.java
Patch:
@@ -27,6 +27,7 @@
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiResult;
 
 import oshi.hardware.common.AbstractBaseboard;
+import oshi.util.platform.windows.WmiQueryHandler;
 import oshi.util.platform.windows.WmiUtil;
 
 /**
@@ -48,7 +49,7 @@ enum BaseboardProperty {
 
     private void init() {
         WmiQuery<BaseboardProperty> baseboardQuery = new WmiQuery<>("Win32_BaseBoard", BaseboardProperty.class);
-        WmiResult<BaseboardProperty> win32BaseBoard = WmiUtil.queryWMI(baseboardQuery);
+        WmiResult<BaseboardProperty> win32BaseBoard = WmiQueryHandler.getInstance().queryWMI(baseboardQuery);
         if (win32BaseBoard.getResultCount() > 0) {
             setManufacturer(WmiUtil.getString(win32BaseBoard, BaseboardProperty.MANUFACTURER, 0));
             setModel(WmiUtil.getString(win32BaseBoard, BaseboardProperty.MODEL, 0));

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsFirmware.java
Patch:
@@ -27,6 +27,7 @@
 import com.sun.jna.platform.win32.COM.WbemcliUtil.WmiResult;
 
 import oshi.hardware.common.AbstractFirmware;
+import oshi.util.platform.windows.WmiQueryHandler;
 import oshi.util.platform.windows.WmiUtil;
 
 /**
@@ -49,7 +50,7 @@ enum BiosProperty {
     private void init() {
         WmiQuery<BiosProperty> biosQuery = new WmiQuery<>("Win32_BIOS where PrimaryBIOS=true", BiosProperty.class);
 
-        WmiResult<BiosProperty> win32BIOS = WmiUtil.queryWMI(biosQuery);
+        WmiResult<BiosProperty> win32BIOS = WmiQueryHandler.getInstance().queryWMI(biosQuery);
         if (win32BIOS.getResultCount() > 0) {
             setManufacturer(WmiUtil.getString(win32BIOS, BiosProperty.MANUFACTURER, 0));
             setName(WmiUtil.getString(win32BIOS, BiosProperty.NAME, 0));

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsFileSystem.java
Patch:
@@ -38,6 +38,7 @@
 import oshi.util.ParseUtil;
 import oshi.util.platform.windows.PerfDataUtil;
 import oshi.util.platform.windows.PerfDataUtil.PerfCounter;
+import oshi.util.platform.windows.WmiQueryHandler;
 import oshi.util.platform.windows.WmiUtil;
 
 /**
@@ -220,7 +221,7 @@ private List<OSFileStore> getWmiVolumes() {
         long total;
         List<OSFileStore> fs = new ArrayList<>();
 
-        WmiResult<LogicalDiskProperty> drives = WmiUtil.queryWMI(this.LOGICAL_DISK_QUERY);
+        WmiResult<LogicalDiskProperty> drives = WmiQueryHandler.getInstance().queryWMI(this.LOGICAL_DISK_QUERY);
 
         for (int i = 0; i < drives.getResultCount(); i++) {
             free = WmiUtil.getUint64(drives, LogicalDiskProperty.FREESPACE, i);
@@ -288,7 +289,7 @@ public long getOpenFileDescriptors() {
             return PerfDataUtil.queryCounter(this.handleCountCounter);
         }
         // Use WMI instead
-        WmiResult<HandleCountProperty> result = WmiUtil.queryWMI(this.handleCountQuery);
+        WmiResult<HandleCountProperty> result = WmiQueryHandler.getInstance().queryWMI(this.handleCountQuery);
         long descriptors = 0L;
         for (int i = 0; i < result.getResultCount(); i++) {
             descriptors += WmiUtil.getUint32(result, HandleCountProperty.HANDLECOUNT, i);

File: oshi-core/src/test/java/oshi/hardware/PowerSourceTest.java
Patch:
@@ -36,7 +36,7 @@ public void testPowerSource() {
         SystemInfo si = new SystemInfo();
         PowerSource[] psArr = si.getHardware().getPowerSources();
         for (PowerSource ps : psArr) {
-            assertTrue(ps.getRemainingCapacity() >= 0 && ps.getRemainingCapacity() <= 1);
+            assertTrue(ps.getRemainingCapacity() >= 0);
             double epsilon = 1E-6;
             assertTrue(ps.getTimeRemaining() > 0 || Math.abs(ps.getTimeRemaining() - -1) < epsilon
                     || Math.abs(ps.getTimeRemaining() - -2) < epsilon);

File: oshi-json/src/test/java/oshi/json/hardware/PowerSourceTest.java
Patch:
@@ -36,7 +36,7 @@ public void testPowerSource() {
         SystemInfo si = new SystemInfo();
         PowerSource[] psArr = si.getHardware().getPowerSources();
         for (PowerSource ps : psArr) {
-            assertTrue(ps.getRemainingCapacity() >= 0 && ps.getRemainingCapacity() <= 1);
+            assertTrue(ps.getRemainingCapacity() >= 0);
             double epsilon = 1E-6;
             assertTrue(ps.getTimeRemaining() > 0 || Math.abs(ps.getTimeRemaining() - -1) < epsilon
                     || Math.abs(ps.getTimeRemaining() - -2) < epsilon);

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsSensors.java
Patch:
@@ -212,7 +212,7 @@ public int[] getFanSpeeds() {
         if (fan.getResultCount() > 1) {
             int[] fanSpeeds = new int[fan.getResultCount()];
             for (int i = 0; i < fan.getResultCount(); i++) {
-                fanSpeeds[i] = WmiUtil.getUint32(fan, FanProperty.DESIREDSPEED, i);
+                fanSpeeds[i] = (int) WmiUtil.getUint64(fan, FanProperty.DESIREDSPEED, i);
             }
             return fanSpeeds;
         }

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsOperatingSystem.java
Patch:
@@ -345,7 +345,7 @@ private List<OSProcess> processMapToList(Collection<Integer> pids, boolean slowF
         final WTS_PROCESS_INFO_EX[] processInfo = (WTS_PROCESS_INFO_EX[]) processInfoRef.toArray(pCount.getValue());
 
         // Store a subset of processes in a list to later return.
-        List<OSProcess> processList = new ArrayList<>(pids.size());
+        List<OSProcess> processList = new ArrayList<>();
 
         for (WTS_PROCESS_INFO_EX procInfo : processInfo) {
             // Skip if only updating a subset of pids, or if not in cache.
@@ -481,7 +481,7 @@ private List<OSProcess> processMapToList(Collection<Integer> pids, boolean slowF
     }
 
     private void updateProcessMapFromRegistry(Collection<Integer> pids) {
-        List<Integer> pidsToKeep = new ArrayList<>(pids.size());
+        List<Integer> pidsToKeep = new ArrayList<>();
 
         // Grab the PERF_DATA_BLOCK from the registry.
         // Sequentially increase the buffer until everything fits.

File: oshi-core/src/main/java/oshi/util/platform/windows/PerfDataUtil.java
Patch:
@@ -205,8 +205,7 @@ public static long queryCounter(PerfCounter counter) {
         }
         long value = queryCounter(counterMap.get(counter));
         if (value < 0) {
-            // Nevative value is error code. Make positive for comparison
-            value *= -1L;
+            // Nevative value is error code.
             if (value == PdhMsg.PDH_INVALID_HANDLE) {
                 if (LOG.isWarnEnabled()) {
                     LOG.warn(LOG_COUNTER_RECREATE, counterPath(counter));

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsSensors.java
Patch:
@@ -256,7 +256,7 @@ public double getCpuVoltage() {
         // Try to get from conventional WMI
         WmiResult<VoltProperty> voltage = WmiUtil.queryWMI(VOLT_QUERY);
         if (voltage.getResultCount() > 1) {
-            int decivolts = WmiUtil.getUint32(voltage, VoltProperty.CURRENTVOLTAGE, 0);
+            int decivolts = WmiUtil.getUint16(voltage, VoltProperty.CURRENTVOLTAGE, 0);
             // If the eighth bit is set, bits 0-6 contain the voltage
             // multiplied by 10. If the eighth bit is not set, then the bit
             // setting in VoltageCaps represents the voltage value.

File: oshi-core/src/main/java/oshi/software/os/unix/solaris/SolarisFileSystem.java
Patch:
@@ -108,11 +108,12 @@ public OSFileStore[] getFileStores() {
             */
             if (line.startsWith("/")) {
                 key = ParseUtil.whitespaces.split(line)[0];
+                total = null;
             } else if (line.contains("available") && line.contains("total files")) {
                 total = ParseUtil.getTextBetweenStrings(line, "available", "total files").trim();
             } else if (line.contains("free files")) {
                 free = ParseUtil.getTextBetweenStrings(line, "", "free files").trim();
-                if (key != null) {
+                if (key != null && total != null) {
                     inodeFreeMap.put(key, ParseUtil.parseLongOrDefault(free, 0L));
                     inodeTotalMap.put(key, ParseUtil.parseLongOrDefault(total, 0L));
                     key = null;

File: oshi-core/src/test/java/oshi/SystemInfoTest.java
Patch:
@@ -286,11 +286,12 @@ private static void printFileSystem(FileSystem fileSystem) {
             long usable = fs.getUsableSpace();
             long total = fs.getTotalSpace();
             System.out.format(
-                    " %s (%s) [%s] %s of %s free (%.1f%%) is %s "
+                    " %s (%s) [%s] %s of %s free (%.1f%%), %s of %s files free (%.1f%%) is %s "
                             + (fs.getLogicalVolume() != null && fs.getLogicalVolume().length() > 0 ? "[%s]" : "%s")
                             + " and is mounted at %s%n",
                     fs.getName(), fs.getDescription().isEmpty() ? "file system" : fs.getDescription(), fs.getType(),
                     FormatUtil.formatBytes(usable), FormatUtil.formatBytes(fs.getTotalSpace()), 100d * usable / total,
+                    fs.getFreeInodes(), fs.getTotalInodes(), 100d * fs.getFreeInodes() / fs.getTotalInodes(),
                     fs.getVolume(), fs.getLogicalVolume(), fs.getMount());
         }
     }

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsDisks.java
Patch:
@@ -214,7 +214,7 @@ public static boolean updateDiskStats(HWDiskStore diskStore) {
             diskStore.setReadBytes(MapUtil.getOrDefault(readByteMap, index, 0L));
             diskStore.setWrites(MapUtil.getOrDefault(writeMap, index, 0L));
             diskStore.setWriteBytes(MapUtil.getOrDefault(writeByteMap, index, 0L));
-            diskStore.setTransferTime(MapUtil.getOrDefault(queueLengthMap, index, 0L));
+            diskStore.setCurrentQueueLength(MapUtil.getOrDefault(queueLengthMap, index, 0L));
             diskStore.setTransferTime(MapUtil.getOrDefault(xferTimeMap, index, 0L));
             diskStore.setTimeStamp(MapUtil.getOrDefault(timeStampMap, index, 0L));
             return true;

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsSoundCard.java
Patch:
@@ -70,8 +70,6 @@ public WindowsSoundCard(String kernelVersion, String name, String codec) {
      * Creates our Win32_PnPSignedDevice query with the WHERE clause taking the
      * attributes from our map.
      * 
-     * @param map
-     *            The map whose keys will be used inside the Where Clause.
      * @return The WHERE clause
      */
     private static String createClause() {

File: oshi-json/src/main/java/oshi/json/hardware/impl/HardwareAbstractionLayerImpl.java
Patch:
@@ -31,7 +31,6 @@
 import oshi.json.hardware.Display;
 import oshi.json.hardware.GlobalMemory;
 import oshi.json.hardware.HWDiskStore;
-import oshi.json.hardware.HWPartition;
 import oshi.json.hardware.HardwareAbstractionLayer;
 import oshi.json.hardware.NetworkIF;
 import oshi.json.hardware.PowerSource;

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsCentralProcessor.java
Patch:
@@ -77,6 +77,7 @@ enum ProcessorProperty {
         try {
             localized = PdhUtil.PdhLookupPerfNameByIndex(null, PdhUtil.PdhLookupPerfIndexByEnglishName(PROCESSOR));
         } catch (Win32Exception e) {
+            LOG.error("Unable to locate English counter names in registry Perflib 009. Assuming English counters.");
             localized = PROCESSOR;
         }
         PROCESSOR_LOCALIZED = localized;

File: oshi-core/src/main/java/oshi/hardware/HardwareAbstractionLayer.java
Patch:
@@ -115,8 +115,8 @@ public interface HardwareAbstractionLayer extends Serializable {
     UsbDevice[] getUsbDevices(boolean tree);
 
     /**
-     * Instantiates an array of {@link SoundCard} objects, representing the Sound
-     * cards.
+     * Instantiates an array of {@link SoundCard} objects, representing the
+     * Sound cards.
      *
      * @return An array of SoundCard objects or an empty array if none are
      *         present.

File: oshi-core/src/main/java/oshi/hardware/SoundCard.java
Patch:
@@ -23,23 +23,23 @@
  */
 public interface SoundCard {
 
-
     /**
      * Retrieves the driver version currently in use in machine
+     * 
      * @return The current and complete name of the driver version
      */
     String getDriverVersion();
 
-
     /**
      * Retrieves the full name of the card.
+     * 
      * @return The name of the card.
      */
     String getName();
 
-
     /**
      * Retrieves the codec of the Sound card
+     * 
      * @return The name of the codec of the sound card
      */
     String getCodec();

File: oshi-core/src/main/java/oshi/hardware/common/AbstractSoundCard.java
Patch:
@@ -21,7 +21,7 @@
 import oshi.hardware.SoundCard;
 
 /**
- *  An abstract Sound Card
+ * An abstract Sound Card
  *
  * @author BilalAM
  */

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacHardwareAbstractionLayer.java
Patch:
@@ -110,11 +110,11 @@ public UsbDevice[] getUsbDevices(boolean tree) {
     }
 
     /**
-     * Instantiates an array of {@link SoundCard} objects, representing the Sound
-     * cards.
+     * Instantiates an array of {@link SoundCard} objects, representing the
+     * Sound cards.
      *
      * @return An array of SoundCard objects or an empty array if none are
-     * present.
+     *         present.
      */
     @Override
     public SoundCard[] getSoundCards() {

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdHardwareAbstractionLayer.java
Patch:
@@ -110,11 +110,11 @@ public UsbDevice[] getUsbDevices(boolean tree) {
     }
 
     /**
-     * Instantiates an array of {@link SoundCard} objects, representing the Sound
-     * cards.
+     * Instantiates an array of {@link SoundCard} objects, representing the
+     * Sound cards.
      *
      * @return An array of SoundCard objects or an empty array if none are
-     * present.
+     *         present.
      */
     @Override
     public SoundCard[] getSoundCards() {

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsHardwareAbstractionLayer.java
Patch:
@@ -110,11 +110,11 @@ public UsbDevice[] getUsbDevices(boolean tree) {
     }
 
     /**
-     * Instantiates an array of {@link SoundCard} objects, representing the Sound
-     * cards.
+     * Instantiates an array of {@link SoundCard} objects, representing the
+     * Sound cards.
      *
      * @return An array of SoundCard objects or an empty array if none are
-     * present.
+     *         present.
      */
     @Override
     public SoundCard[] getSoundCards() {

File: oshi-core/src/main/java/oshi/software/os/OSProcess.java
Patch:
@@ -570,8 +570,7 @@ public String toString() {
         StringBuilder builder = new StringBuilder("OSProcess@");
         builder.append(Integer.toHexString(hashCode()));
         builder.append("[processID=").append(processID);
-        builder.append(", name=").append(name);
-        builder.append("]");
+        builder.append(", name=").append(name).append(']');
         return builder.toString();
     }
 }

File: oshi-core/src/main/java/oshi/util/platform/windows/PerfDataUtil.java
Patch:
@@ -140,7 +140,7 @@ public static boolean addCounterToQuery(PerfCounter counter) {
      */
     public static boolean removeCounterFromQuery(PerfCounter counter) {
         if (counterMap.containsKey(counter)) {
-            return (WinError.ERROR_SUCCESS == PDH.PdhRemoveCounter(counterMap.get(counter).getValue()));
+            return WinError.ERROR_SUCCESS == PDH.PdhRemoveCounter(counterMap.get(counter).getValue());
         }
         return false;
     }

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsCentralProcessor.java
Patch:
@@ -260,9 +260,6 @@ private void initPdhCounters() {
             interruptsQuery = new WmiQuery<>("Win32_PerfRawData_PerfOS_Processor WHERE Name=\"_Total\"",
                     InterruptsProperty.class);
         }
-        // REMOVE
-        processorTickCountQuery = new WmiQuery<>("Win32_PerfRawData_PerfOS_Processor WHERE NOT Name=\"_Total\"",
-                ProcessorTickCountProperty.class);
     }
 
     /**

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsNetworkParams.java
Patch:
@@ -149,7 +149,7 @@ private String getNextHop(String dest) {
         int index = 0;
         int min = Integer.MAX_VALUE;
         for (int i = 0; i < vals.getResultCount(); i++) {
-            int metric = WmiUtil.getUint32(vals, NetRouteProperty.ROUTEMETRIC, i);
+            int metric = WmiUtil.getUint16(vals, NetRouteProperty.ROUTEMETRIC, i);
             if (metric < min) {
                 min = metric;
                 index = i;

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsCentralProcessor.java
Patch:
@@ -433,11 +433,11 @@ public String getSystemSerialNumber() {
     public long getContextSwitches() {
         if (this.contextSwitchQuery == null) {
             PerfDataUtil.updateQuery(this.contextSwitchesPerSecCounter);
-            return PerfDataUtil.queryCounter(this.contextSwitchesPerSecCounter) / 10000L;
+            return PerfDataUtil.queryCounter(this.contextSwitchesPerSecCounter);
         }
         WmiResult<ContextSwitchProperty> result = WmiUtil.queryWMI(this.contextSwitchQuery);
         if (result.getResultCount() > 0) {
-            return WmiUtil.getUint32(result, ContextSwitchProperty.CONTEXTSWITCHESPERSEC, 0) / 10000L;
+            return WmiUtil.getUint32(result, ContextSwitchProperty.CONTEXTSWITCHESPERSEC, 0);
         }
         return 0L;
     }

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsCentralProcessor.java
Patch:
@@ -433,11 +433,11 @@ public String getSystemSerialNumber() {
     public long getContextSwitches() {
         if (this.contextSwitchQuery == null) {
             PerfDataUtil.updateQuery(this.contextSwitchesPerSecCounter);
-            return PerfDataUtil.queryCounter(this.contextSwitchesPerSecCounter) / 10000L;
+            return PerfDataUtil.queryCounter(this.contextSwitchesPerSecCounter);
         }
         WmiResult<ContextSwitchProperty> result = WmiUtil.queryWMI(this.contextSwitchQuery);
         if (result.getResultCount() > 0) {
-            return WmiUtil.getUint32(result, ContextSwitchProperty.CONTEXTSWITCHESPERSEC, 0) / 10000L;
+            return WmiUtil.getUint32(result, ContextSwitchProperty.CONTEXTSWITCHESPERSEC, 0);
         }
         return 0L;
     }

File: oshi-core/src/main/java/oshi/hardware/CentralProcessor.java
Patch:
@@ -46,8 +46,7 @@ enum TickType {
         NICE(1),
         /**
          * CPU utilization that occurred while executing at the system level
-         * (kernel). Also includes CPU time which the hypervisor dedicated for
-         * other guests in the system (steal).
+         * (kernel).
          */
         SYSTEM(2),
         /**

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsCentralProcessor.java
Patch:
@@ -449,7 +449,7 @@ public long getContextSwitches() {
     public long getInterrupts() {
         if (this.interruptsQuery == null) {
             refreshTickCounters();
-            return PerfDataUtil.queryCounter(this.interruptsPerSecCounter) / 10000L;
+            return PerfDataUtil.queryCounter(this.interruptsPerSecCounter);
         }
         WmiResult<InterruptsProperty> result = WmiUtil.queryWMI(this.interruptsQuery);
         if (result.getResultCount() > 0) {

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsDisks.java
Patch:
@@ -438,7 +438,7 @@ private void populatePartitionMaps() {
     /**
      * Parse a drive name like "0 C:" to just the index "0"
      * 
-     * @param string
+     * @param s
      *            A drive name to parse
      * @return The first space-delimited value
      */

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxFileSystem.java
Patch:
@@ -115,7 +115,7 @@ public OSFileStore[] getFileStores() {
         // Map uuids with device path as key
         Map<String, String> uuidMap = new HashMap<>();
         File uuidDir = new File("/dev/disk/by-uuid");
-        if (uuidDir != null && uuidDir.listFiles() != null) {
+        if (uuidDir.listFiles() != null) {
             for (File uuid : uuidDir.listFiles()) {
                 try {
                     // Store UUID as value with path (e.g., /dev/sda1) as key

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsDisks.java
Patch:
@@ -438,7 +438,7 @@ private void populatePartitionMaps() {
     /**
      * Parse a drive name like "0 C:" to just the index "0"
      * 
-     * @param string
+     * @param s
      *            A drive name to parse
      * @return The first space-delimited value
      */

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxFileSystem.java
Patch:
@@ -115,7 +115,7 @@ public OSFileStore[] getFileStores() {
         // Map uuids with device path as key
         Map<String, String> uuidMap = new HashMap<>();
         File uuidDir = new File("/dev/disk/by-uuid");
-        if (uuidDir != null && uuidDir.listFiles() != null) {
+        if (uuidDir.listFiles() != null) {
             for (File uuid : uuidDir.listFiles()) {
                 try {
                     // Store UUID as value with path (e.g., /dev/sda1) as key

File: oshi-core/src/main/java/oshi/hardware/CentralProcessor.java
Patch:
@@ -46,8 +46,7 @@ enum TickType {
         NICE(1),
         /**
          * CPU utilization that occurred while executing at the system level
-         * (kernel). Also includes CPU time which the hypervisor dedicated for
-         * other guests in the system (steal).
+         * (kernel).
          */
         SYSTEM(2),
         /**

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsCentralProcessor.java
Patch:
@@ -449,7 +449,7 @@ public long getContextSwitches() {
     public long getInterrupts() {
         if (this.interruptsQuery == null) {
             refreshTickCounters();
-            return PerfDataUtil.queryCounter(this.interruptsPerSecCounter) / 10000L;
+            return PerfDataUtil.queryCounter(this.interruptsPerSecCounter);
         }
         WmiResult<InterruptsProperty> result = WmiUtil.queryWMI(this.interruptsQuery);
         if (result.getResultCount() > 0) {

File: oshi-core/src/main/java/oshi/software/os/OSProcess.java
Patch:
@@ -269,9 +269,6 @@ public long getUserTime() {
      * @return Returns the number of milliseconds since the process started.
      */
     public long getUpTime() {
-        if (this.upTime < this.kernelTime + this.userTime) {
-            return this.kernelTime + this.userTime;
-        }
         return this.upTime;
     }
 

File: oshi-core/src/main/java/oshi/software/os/OSProcess.java
Patch:
@@ -269,9 +269,6 @@ public long getUserTime() {
      * @return Returns the number of milliseconds since the process started.
      */
     public long getUpTime() {
-        if (this.upTime < this.kernelTime + this.userTime) {
-            return this.kernelTime + this.userTime;
-        }
         return this.upTime;
     }
 

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsComputerSystem.java
Patch:
@@ -81,15 +81,15 @@ private String getSystemSerialNumber() {
             this.systemSerialNumber = WmiUtil.getString(serialNumber, BiosProperty.SERIALNUMBER, 0);
         }
         // If the above doesn't work, this might
-        if (!"".equals(this.systemSerialNumber)) {
+        if ("".equals(this.systemSerialNumber)) {
             WmiResult<ComputerSystemProductProperty> identifyingNumber = WmiUtil.queryWMI(IDENTIFYINGNUMBER_QUERY);
             if (identifyingNumber.getResultCount() > 0) {
                 this.systemSerialNumber = WmiUtil.getString(identifyingNumber,
                         ComputerSystemProductProperty.IDENTIFYINGNUMBER, 0);
             }
         }
         // Nothing worked. Default.
-        if (!"".equals(this.systemSerialNumber)) {
+        if ("".equals(this.systemSerialNumber)) {
             this.systemSerialNumber = "unknown";
         }
         return this.systemSerialNumber;

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsComputerSystem.java
Patch:
@@ -81,15 +81,15 @@ private String getSystemSerialNumber() {
             this.systemSerialNumber = WmiUtil.getString(serialNumber, BiosProperty.SERIALNUMBER, 0);
         }
         // If the above doesn't work, this might
-        if (!"".equals(this.systemSerialNumber)) {
+        if ("".equals(this.systemSerialNumber)) {
             WmiResult<ComputerSystemProductProperty> identifyingNumber = WmiUtil.queryWMI(IDENTIFYINGNUMBER_QUERY);
             if (identifyingNumber.getResultCount() > 0) {
                 this.systemSerialNumber = WmiUtil.getString(identifyingNumber,
                         ComputerSystemProductProperty.IDENTIFYINGNUMBER, 0);
             }
         }
         // Nothing worked. Default.
-        if (!"".equals(this.systemSerialNumber)) {
+        if ("".equals(this.systemSerialNumber)) {
             this.systemSerialNumber = "unknown";
         }
         return this.systemSerialNumber;

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsNetworkParams.java
Patch:
@@ -170,7 +170,7 @@ public String getIpv6DefaultGateway() {
 
     private String getNextHop(String dest) {
         StringBuilder sb = new StringBuilder(NETROUTE_BASE_CLASS);
-        sb.append(" WHERE DestinationPrefix=\"").append(dest).append("\"");
+        sb.append(" WHERE DestinationPrefix=\"").append(dest).append('\"');
         NETROUTE_QUERY.setWmiClassName(sb.toString());
         WmiResult<NetRouteProperty> vals = WmiUtil.queryWMI(NETROUTE_QUERY);
 
@@ -192,7 +192,7 @@ private String getNextHop(String dest) {
 
     private String getNextHopWin7(String dest) {
         StringBuilder sb = new StringBuilder(IP4ROUTE_BASE_CLASS);
-        sb.append(" WHERE Destination=\"").append(dest).append("\"");
+        sb.append(" WHERE Destination=\"").append(dest).append('\"');
         IP4ROUTE_QUERY.setWmiClassName(sb.toString());
         WmiResult<IP4RouteProperty> vals = WmiUtil.queryWMI(IP4ROUTE_QUERY);
 

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxDisplay.java
Patch:
@@ -26,7 +26,6 @@
 
 import oshi.hardware.Display;
 import oshi.hardware.common.AbstractDisplay;
-import oshi.hardware.platform.unix.solaris.SolarisDisplay;
 import oshi.util.ExecutingCommand;
 import oshi.util.ParseUtil;
 
@@ -72,7 +71,7 @@ public static Display[] getDisplays() {
                 LOG.debug("Parsed EDID: {}", edidStr);
                 byte[] edid = ParseUtil.hexStringToByteArray(edidStr);
                 if (edid.length >= 128) {
-                    displays.add(new SolarisDisplay(edid));
+                    displays.add(new LinuxDisplay(edid));
                 }
                 sb = null;
             }

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdDisplay.java
Patch:
@@ -26,7 +26,6 @@
 
 import oshi.hardware.Display;
 import oshi.hardware.common.AbstractDisplay;
-import oshi.hardware.platform.unix.solaris.SolarisDisplay;
 import oshi.util.ExecutingCommand;
 import oshi.util.ParseUtil;
 
@@ -72,7 +71,7 @@ public static Display[] getDisplays() {
                 LOG.debug("Parsed EDID: {}", edidStr);
                 byte[] edid = ParseUtil.hexStringToByteArray(edidStr);
                 if (edid.length >= 128) {
-                    displays.add(new SolarisDisplay(edid));
+                    displays.add(new FreeBsdDisplay(edid));
                 }
                 sb = null;
             }

File: oshi-core/src/test/java/oshi/util/ParseUtilTest.java
Patch:
@@ -75,12 +75,13 @@ public void testParseLastString() {
     }
 
     /**
-     * Test hex string to byte array.
+     * Test hex string to byte array (and back).
      */
     @Test
     public void testHexStringToByteArray() {
         byte[] temp = { (byte) 0x12, (byte) 0xaf };
         assertTrue(Arrays.equals(temp, ParseUtil.hexStringToByteArray("12af")));
+        assertEquals("12AF", ParseUtil.byteArrayToHexString(temp));
         temp = new byte[0];
         assertTrue(Arrays.equals(temp, ParseUtil.hexStringToByteArray("expected error abcde")));
         assertTrue(Arrays.equals(temp, ParseUtil.hexStringToByteArray("abcde")));

File: oshi-json/src/main/java/oshi/json/hardware/impl/DisplayImpl.java
Patch:
@@ -29,7 +29,7 @@
 import oshi.json.json.AbstractOshiJsonObject;
 import oshi.json.json.NullAwareJsonObjectBuilder;
 import oshi.json.util.PropertiesUtil;
-import oshi.util.EdidUtil;
+import oshi.util.ParseUtil;
 
 /**
  * Wrapper class to implement Display interface with platform-specific objects
@@ -68,7 +68,7 @@ public byte[] getEdid() {
     public JsonObject toJSON(Properties properties) {
         JsonObjectBuilder json = NullAwareJsonObjectBuilder.wrap(this.jsonFactory.createObjectBuilder());
         if (PropertiesUtil.getBoolean(properties, "hardware.displays.edid")) {
-            json.add("edid", EdidUtil.toHexString(getEdid()));
+            json.add("edid", ParseUtil.byteArrayToHexString(getEdid()));
         }
         return json.build();
     }

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsNetworkParams.java
Patch:
@@ -32,6 +32,7 @@
 
 import oshi.jna.platform.windows.IPHlpAPI;
 import oshi.jna.platform.windows.IPHlpAPI.FIXED_INFO;
+import oshi.jna.platform.windows.IPHlpAPI.IP_ADDR_STRING;
 import oshi.software.common.AbstractNetworkParams;
 import oshi.util.ExecutingCommand;
 import oshi.util.ParseUtil;
@@ -136,17 +137,16 @@ public String[] getDnsServers() {
         }
 
         List<String> list = new ArrayList<>();
-        IPHlpAPI.IP_ADDR_STRING dns = buffer.DnsServerList;
+        IP_ADDR_STRING dns = buffer.DnsServerList;
         while (dns != null) {
             String addr = new String(dns.IpAddress.String);
             int nullPos = addr.indexOf(0);
             if (nullPos != -1) {
                 addr = addr.substring(0, nullPos);
             }
             list.add(addr);
-            dns = dns.Next;
+            dns = dns.Next == null ? null : new IP_ADDR_STRING(dns.Next);
         }
-
         return list.toArray(new String[list.size()]);
     }
 

File: oshi-core/src/main/java/oshi/hardware/common/AbstractNetworks.java
Patch:
@@ -59,7 +59,7 @@ public NetworkIF[] getNetworks() {
                 }
             }
         } catch (SocketException ex) {
-            LOG.error("Socket exception when retrieving network interfaces: " + ex);
+            LOG.error("Socket exception when retrieving network interfaces: {}", ex);
         }
         return result.toArray(new NetworkIF[result.size()]);
     }

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacNetworks.java
Patch:
@@ -24,7 +24,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.sun.jna.Memory;
+import com.sun.jna.Memory; // NOSONAR
 import com.sun.jna.Pointer;
 import com.sun.jna.ptr.IntByReference;
 

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacPowerSource.java
Patch:
@@ -24,7 +24,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.sun.jna.Pointer;
+import com.sun.jna.Pointer; // NOSONAR
 import com.sun.jna.ptr.IntByReference;
 
 import oshi.hardware.PowerSource;

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsPowerSource.java
Patch:
@@ -21,7 +21,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.sun.jna.NativeLong;
+import com.sun.jna.NativeLong; // NOSONAR
 
 import oshi.hardware.PowerSource;
 import oshi.hardware.common.AbstractPowerSource;

File: oshi-core/src/main/java/oshi/jna/platform/windows/COM/WbemLocator.java
Patch:
@@ -21,7 +21,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.sun.jna.NativeLong;
+import com.sun.jna.NativeLong; // NOSONAR
 import com.sun.jna.Pointer;
 import com.sun.jna.platform.win32.Guid.CLSID;
 import com.sun.jna.platform.win32.Guid.GUID;

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxNetworkParams.java
Patch:
@@ -25,7 +25,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.sun.jna.ptr.PointerByReference;
+import com.sun.jna.ptr.PointerByReference; // NOSONAR
 
 import oshi.jna.platform.linux.Libc;
 import oshi.software.common.AbstractNetworkParams;
@@ -38,7 +38,7 @@ public class LinuxNetworkParams extends AbstractNetworkParams {
 
     private static final Logger LOG = LoggerFactory.getLogger(LinuxNetworkParams.class);
 
-    private static final String IPV4_DEFAULT_DEST = "0.0.0.0";
+    private static final String IPV4_DEFAULT_DEST = "0.0.0.0"; // NOSONAR
     private static final String IPV6_DEFAULT_DEST = "::/0";
 
     /**

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxOperatingSystem.java
Patch:
@@ -74,7 +74,7 @@ public class LinuxOperatingSystem extends AbstractOperatingSystem {
     // Boot time in MS
     private static long bootTime = 0L;
 
-    private LinuxUserGroupInfo userGroupInfo = new LinuxUserGroupInfo();
+    private transient LinuxUserGroupInfo userGroupInfo = new LinuxUserGroupInfo();
 
     static {
         init();
@@ -352,7 +352,7 @@ public int getThreadCount() {
         try {
             Sysinfo info = new Sysinfo();
             if (0 != Libc.INSTANCE.sysinfo(info)) {
-                LOG.error("Failed to get process thread count. Error code: " + Native.getLastError());
+                LOG.error("Failed to get process thread count. Error code: {}", Native.getLastError());
                 return 0;
             }
             return info.procs;

File: oshi-core/src/main/java/oshi/software/os/mac/MacNetworkParams.java
Patch:
@@ -25,7 +25,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.sun.jna.ptr.PointerByReference;
+import com.sun.jna.ptr.PointerByReference; // NOSONAR
 
 import oshi.jna.platform.mac.SystemB;
 import oshi.software.common.AbstractNetworkParams;

File: oshi-core/src/main/java/oshi/software/os/unix/freebsd/FreeBsdNetworkParams.java
Patch:
@@ -24,7 +24,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.sun.jna.ptr.PointerByReference;
+import com.sun.jna.ptr.PointerByReference; // NOSONAR
 
 import oshi.jna.platform.unix.freebsd.Libc;
 import oshi.software.common.AbstractNetworkParams;

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisDisks.java
Patch:
@@ -24,11 +24,12 @@
 import java.util.Map;
 import java.util.Map.Entry;
 
+import com.sun.jna.platform.unix.solaris.LibKstat.Kstat; //NOSONAR
+import com.sun.jna.platform.unix.solaris.LibKstat.KstatIO;
+
 import oshi.hardware.Disks;
 import oshi.hardware.HWDiskStore;
 import oshi.hardware.HWPartition;
-import oshi.jna.platform.unix.solaris.LibKstat.Kstat;
-import oshi.jna.platform.unix.solaris.LibKstat.KstatIO;
 import oshi.util.ExecutingCommand;
 import oshi.util.MapUtil;
 import oshi.util.ParseUtil;

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisGlobalMemory.java
Patch:
@@ -21,8 +21,9 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import com.sun.jna.platform.unix.solaris.LibKstat.Kstat; // NOSONAR
+
 import oshi.hardware.common.AbstractGlobalMemory;
-import oshi.jna.platform.unix.solaris.LibKstat.Kstat;
 import oshi.util.ExecutingCommand;
 import oshi.util.ParseUtil;
 import oshi.util.platform.unix.solaris.KstatUtil;

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisNetworks.java
Patch:
@@ -18,9 +18,10 @@
  */
 package oshi.hardware.platform.unix.solaris;
 
+import com.sun.jna.platform.unix.solaris.LibKstat.Kstat; // NOSONAR
+
 import oshi.hardware.NetworkIF;
 import oshi.hardware.common.AbstractNetworks;
-import oshi.jna.platform.unix.solaris.LibKstat.Kstat;
 import oshi.util.platform.unix.solaris.KstatUtil;
 
 /**

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsGlobalMemory.java
Patch:
@@ -24,7 +24,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.sun.jna.platform.win32.Kernel32;
+import com.sun.jna.platform.win32.Kernel32; // NOSONAR
 import com.sun.jna.platform.win32.Psapi;
 import com.sun.jna.platform.win32.Psapi.PERFORMANCE_INFORMATION;
 

File: oshi-core/src/main/java/oshi/jna/platform/windows/COM/WbemLocator.java
Patch:
@@ -50,7 +50,9 @@ public static WbemLocator create() {
         HRESULT hres = Ole32.INSTANCE.CoCreateInstance(CLSID_WbemLocator, null, WTypes.CLSCTX_INPROC_SERVER,
                 IID_IWbemLocator, pbr);
         if (COMUtils.FAILED(hres)) {
-            LOG.error(String.format("Failed to create WbemLocator object. Error code = 0x%08x", hres.intValue()));
+            if (LOG.isErrorEnabled()) {
+                LOG.error(String.format("Failed to create WbemLocator object. Error code = 0x%08x", hres.intValue()));
+            }
             Ole32.INSTANCE.CoUninitialize();
             return null;
         }

File: oshi-core/src/main/java/oshi/jna/platform/windows/WinPerf.java
Patch:
@@ -74,7 +74,7 @@ protected List<String> getFieldOrder() {
                     "HeaderLength", "NumObjectTypes", "DefaultObject", "SystemTime", "PerfTime", "PerfFreq",
                     "PerfTime100nSec", "SystemNameLength", "SystemNameOffset" });
         }
-    };
+    }
 
     /**
      * Describes object-specific performance information, for example, the
@@ -209,6 +209,6 @@ public PERF_COUNTER_BLOCK(Pointer p) {
         protected List<String> getFieldOrder() {
             return Arrays.asList(new String[] { "ByteLength" });
         }
-    };
+    }
 
 }

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxNetworkParams.java
Patch:
@@ -58,7 +58,9 @@ public String getDomainName() {
         PointerByReference ptr = new PointerByReference();
         int res = Libc.INSTANCE.getaddrinfo(hostname, null, hint, ptr);
         if (res > 0) {
-            LOG.error("Failed getaddrinfo(): {}", Libc.INSTANCE.gai_strerror(res));
+            if (LOG.isErrorEnabled()) {
+                LOG.error("Failed getaddrinfo(): {}", Libc.INSTANCE.gai_strerror(res));
+            }
             return "";
         }
         Libc.Addrinfo info = new Libc.Addrinfo(ptr.getValue());

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxUserGroupInfo.java
Patch:
@@ -27,8 +27,7 @@
 
 public class LinuxUserGroupInfo {
 
-    private static final long CACHE_REFRESH_TIME_MS = 3 * 60 * 1000; // 3
-                                                                     // minutes
+    private static final long CACHE_REFRESH_TIME_MS = 3L * 60000; // 3 minutes
     private static final UsersCache usersCache = new UsersCache();
     private static final GroupsCache groupsCache = new GroupsCache();
 

File: oshi-core/src/main/java/oshi/software/os/mac/MacNetworkParams.java
Patch:
@@ -59,7 +59,9 @@ public String getDomainName() {
         PointerByReference ptr = new PointerByReference();
         int res = SystemB.INSTANCE.getaddrinfo(hostname, null, hint, ptr);
         if (res > 0) {
-            LOG.error("Failed getaddrinfo(): {}", SystemB.INSTANCE.gai_strerror(res));
+            if (LOG.isErrorEnabled()) {
+                LOG.error("Failed getaddrinfo(): {}", SystemB.INSTANCE.gai_strerror(res));
+            }
             return "";
         }
         SystemB.Addrinfo info = new SystemB.Addrinfo(ptr.getValue());

File: oshi-core/src/main/java/oshi/software/os/unix/freebsd/FreeBsdNetworkParams.java
Patch:
@@ -53,7 +53,9 @@ public String getDomainName() {
         PointerByReference ptr = new PointerByReference();
         int res = Libc.INSTANCE.getaddrinfo(hostname, null, hint, ptr);
         if (res > 0) {
-            LOG.error("Failed getaddrinfo(): {}", Libc.INSTANCE.gai_strerror(res));
+            if (LOG.isErrorEnabled()) {
+                LOG.error("Failed getaddrinfo(): {}", Libc.INSTANCE.gai_strerror(res));
+            }
             return "";
         }
         Libc.Addrinfo info = new Libc.Addrinfo(ptr.getValue());

File: oshi-core/src/main/java/oshi/software/os/unix/freebsd/FreeBsdOperatingSystem.java
Patch:
@@ -157,7 +157,7 @@ private List<OSProcess> getProcessListFromPS(String psCommand, int pid) {
             // gets the open files count -- only do for single-PID requests
             if (pid >= 0) {
                 List<String> openFilesList = ExecutingCommand.runNative(String.format("lsof -p %d", pid));
-                fproc.setOpenFiles(openFilesList.size() - 1);
+                fproc.setOpenFiles(openFilesList.size() - 1L);
             }
             procs.add(fproc);
         }

File: oshi-core/src/main/java/oshi/software/os/unix/solaris/SolarisFileSystem.java
Patch:
@@ -23,7 +23,8 @@
 import java.util.Arrays;
 import java.util.List;
 
-import oshi.jna.platform.unix.solaris.LibKstat.Kstat;
+import com.sun.jna.platform.unix.solaris.LibKstat.Kstat; // NOSONAR
+
 import oshi.software.os.FileSystem;
 import oshi.software.os.OSFileStore;
 import oshi.util.ExecutingCommand;

File: oshi-core/src/main/java/oshi/software/os/unix/solaris/SolarisOperatingSystem.java
Patch:
@@ -155,7 +155,7 @@ private List<OSProcess> getProcessListFromPS(String psCommand, int pid) {
             // gets the open files count -- only do for single-PID requests
             if (pid >= 0) {
                 List<String> openFilesList = ExecutingCommand.runNative(String.format("lsof -p %d", pid));
-                sproc.setOpenFiles(openFilesList.size() - 1);
+                sproc.setOpenFiles(openFilesList.size() - 1L);
             }
             procs.add(sproc);
         }

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsFileSystem.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.List;
 import java.util.Map;
 
-import com.sun.jna.platform.win32.Kernel32;
+import com.sun.jna.platform.win32.Kernel32; //NOSONAR
 import com.sun.jna.platform.win32.WinNT;
 
 import oshi.software.os.FileSystem;

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsNetworkParams.java
Patch:
@@ -25,7 +25,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.sun.jna.Memory;
+import com.sun.jna.Memory; //NOSONAR
 import com.sun.jna.platform.win32.Kernel32;
 import com.sun.jna.platform.win32.WinDef;
 import com.sun.jna.ptr.IntByReference;
@@ -44,7 +44,7 @@ public class WindowsNetworkParams extends AbstractNetworkParams {
     private static final Logger LOG = LoggerFactory.getLogger(WindowsNetworkParams.class);
 
     private static final WmiUtil.ValueType[] GATEWAY_TYPES = { WmiUtil.ValueType.STRING, WmiUtil.ValueType.UINT16 };
-    private static final String IPV4_DEFAULT_DEST = "0.0.0.0/0";
+    private static final String IPV4_DEFAULT_DEST = "0.0.0.0/0"; // NOSONAR
     private static final String IPV6_DEFAULT_DEST = "::/0";
 
     private static final int COMPUTER_NAME_DNS_DOMAIN_FULLY_QUALIFIED = 3;

File: oshi-core/src/main/java/oshi/util/EdidUtil.java
Patch:
@@ -91,7 +91,9 @@ public static String getProductID(byte[] edid) {
      */
     public static String getSerialNo(byte[] edid) {
         // Bytes 12-15 are Serial number (last 4 characters)
-        LOG.debug("Serial number: {}", Arrays.toString(Arrays.copyOfRange(edid, 12, 16)));
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("Serial number: {}", Arrays.toString(Arrays.copyOfRange(edid, 12, 16)));
+        }
         return String.format("%s%s%s%s", getAlphaNumericOrHex(edid[15]), getAlphaNumericOrHex(edid[14]),
                 getAlphaNumericOrHex(edid[13]), getAlphaNumericOrHex(edid[12]));
     }

File: oshi-core/src/main/java/oshi/util/FormatUtil.java
Patch:
@@ -35,7 +35,7 @@
  * @author dblock[at]dblock[dot]org
  */
 public class FormatUtil {
-    private static Logger LOG = LoggerFactory.getLogger(FormatUtil.class);
+    private static final Logger LOG = LoggerFactory.getLogger(FormatUtil.class);
 
     /**
      * Binary prefixes, used in IEC Standard for naming bytes.
@@ -245,7 +245,7 @@ public static LocalDate formatStringDate(String date) {
         try {
             return date == null ? null : LocalDate.parse(date, DATE_FORMATTER);
         } catch (DateTimeParseException dtpe) {
-            LOG.warn("Date parse error: " + dtpe);
+            LOG.warn("Date parse error: {}", dtpe);
             return null;
         }
     }

File: oshi-core/src/main/java/oshi/util/ParseUtil.java
Patch:
@@ -420,8 +420,7 @@ public static long parseLongOrDefault(String s, long defaultLong) {
      */
     public static long parseUnsignedLongOrDefault(String s, long defaultLong) {
         try {
-            BigInteger bi = new BigInteger(s);
-            return bi.longValue();
+            return (new BigInteger(s)).longValue();
         } catch (NumberFormatException e) {
             LOG.trace(DEFAULT_LOG_MSG, s, e);
             return defaultLong;

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsOperatingSystem.java
Patch:
@@ -514,7 +514,7 @@ private void updateRegistryStats(Collection<Integer> pids, Map<Integer, OSProces
             perfObjectOffset += perfObject.TotalByteLength;
         }
         if (pids == null) {
-            for (Integer pid : this.processMap.keySet()) {
+            for (Integer pid : new HashSet<>(this.processMap.keySet())) {
                 if (!pidsToKeep.contains(pid)) {
                     this.processMap.remove(pid);
                 }

File: oshi-core/src/main/java/oshi/jna/platform/windows/Ole32.java
Patch:
@@ -40,9 +40,6 @@ public interface Ole32 extends com.sun.jna.platform.win32.Ole32 {
     int RPC_C_AUTHZ_NONE = 0;
     int RPC_C_AUTHN_LEVEL_CALL = 3;
 
-    int RPC_E_TOO_LATE = 0x80010119;
-    int RPC_E_CHANGED_MODE = 0x80010106;
-
     int EOAC_NONE = 0;
 
     // TODO: Submit this change to JNA Ole32 class

File: oshi-core/src/main/java/oshi/util/platform/windows/WmiUtil.java
Patch:
@@ -32,6 +32,7 @@
 import com.sun.jna.platform.win32.OleAuto;
 import com.sun.jna.platform.win32.Variant.VARIANT;
 import com.sun.jna.platform.win32.WTypes.BSTR;
+import com.sun.jna.platform.win32.WinError;
 import com.sun.jna.platform.win32.WinNT.HRESULT;
 import com.sun.jna.platform.win32.COM.COMUtils;
 import com.sun.jna.ptr.LongByReference;
@@ -355,7 +356,7 @@ private static boolean initCOM() {
         // Initialize COM. ------------------------------------------
         HRESULT hres = Ole32.INSTANCE.CoInitializeEx(null, Ole32.COINIT_MULTITHREADED);
         if (COMUtils.FAILED(hres)) {
-            if (hres.intValue() == Ole32.RPC_E_CHANGED_MODE) {
+            if (hres.intValue() == WinError.RPC_E_CHANGED_MODE) {
                 // Com already initialized, ignore error
                 LOG.debug("COM already initialized.");
                 securityInitialized = true;
@@ -373,7 +374,7 @@ private static boolean initCOM() {
         // Set general COM security levels --------------------------
         hres = Ole32.INSTANCE.CoInitializeSecurity(null, new NativeLong(-1), null, null,
                 Ole32.RPC_C_AUTHN_LEVEL_DEFAULT, Ole32.RPC_C_IMP_LEVEL_IMPERSONATE, null, Ole32.EOAC_NONE, null);
-        if (COMUtils.FAILED(hres) && hres.intValue() != Ole32.RPC_E_TOO_LATE) {
+        if (COMUtils.FAILED(hres) && hres.intValue() != WinError.RPC_E_TOO_LATE) {
             LOG.error(String.format("Failed to initialize security. Error code = 0x%08x", hres.intValue()));
             Ole32.INSTANCE.CoUninitialize();
             return false;

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxCentralProcessor.java
Patch:
@@ -263,7 +263,7 @@ public String getSystemSerialNumber() {
     private String getProcessorID(String stepping, String model, String family, String[] flags) {
         boolean procInfo = false;
         String marker = "Processor Information";
-        for (String checkLine : ExecutingCommand.runNative("dmidecode -t system")) {
+        for (String checkLine : ExecutingCommand.runNative("dmidecode -t 4")) {
             if (!procInfo && checkLine.contains(marker)) {
                 marker = "ID:";
                 procInfo = true;

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxNetworks.java
Patch:
@@ -52,6 +52,7 @@ public static void updateNetworkStats(NetworkIF netIF) {
         netIF.setPacketsRecv(FileUtil.getUnsignedLongFromFile(rxPacketsPath));
         netIF.setOutErrors(FileUtil.getUnsignedLongFromFile(txErrorsPath));
         netIF.setInErrors(FileUtil.getUnsignedLongFromFile(rxErrorsPath));
-        netIF.setSpeed(FileUtil.getUnsignedLongFromFile(speed));
+        long netSpeed = FileUtil.getUnsignedLongFromFile(speed) * 1024 * 1024;
+        netIF.setSpeed(netSpeed < 0 ? 0 : netSpeed);
     }
 }

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxOperatingSystem.java
Patch:
@@ -639,4 +639,5 @@ private static String filenameToFamily(String name) {
             return name.substring(0, 1).toUpperCase() + name.substring(1);
         }
     }
+
 }

File: oshi-core/src/main/java/oshi/software/os/mac/MacOperatingSystem.java
Patch:
@@ -318,4 +318,5 @@ public int getThreadCount() {
     public NetworkParams getNetworkParams() {
         return new MacNetworkParams();
     }
+
 }

File: oshi-core/src/main/java/oshi/software/os/unix/freebsd/FreeBsdOperatingSystem.java
Patch:
@@ -190,4 +190,5 @@ public int getThreadCount() {
     public NetworkParams getNetworkParams() {
         return new FreeBsdNetworkParams();
     }
+
 }

File: oshi-core/src/main/java/oshi/software/os/unix/solaris/SolarisOperatingSystem.java
Patch:
@@ -186,4 +186,5 @@ public int getThreadCount() {
     public NetworkParams getNetworkParams() {
         return new SolarisNetworkParams();
     }
+
 }

File: oshi-core/src/main/java/oshi/software/os/unix/freebsd/FreeBsdOperatingSystem.java
Patch:
@@ -40,7 +40,6 @@
  * @author widdis[at]gmail[dot]com
  */
 public class FreeBsdOperatingSystem extends AbstractOperatingSystem {
-
     private static final long serialVersionUID = 1L;
 
     public FreeBsdOperatingSystem() {
@@ -143,7 +142,9 @@ private List<OSProcess> getProcessListFromPS(String psCommand, int pid) {
             fproc.setName(fproc.getPath().substring(fproc.getPath().lastIndexOf('/') + 1));
             fproc.setCommandLine(split[15]);
             fproc.setCurrentWorkingDirectory(MapUtil.getOrDefault(cwdMap, fproc.getProcessID(), ""));
-            // 'top -bm io' gives read/write counts, not bytes
+            //gets the open files count
+            String openFilesString = ExecutingCommand.getFirstAnswer(String.format("lsof -p %d | wc -l", pid));
+            fproc.setOpenFiles(ParseUtil.parseLongOrDefault(openFilesString, -1));
             procs.add(fproc);
         }
         return procs;

File: oshi-core/src/test/java/oshi/software/os/OperatingSystemTest.java
Patch:
@@ -73,6 +73,7 @@ public void testOperatingSystem() {
         assertTrue(proc.getStartTime() >= 0);
         assertTrue(proc.getBytesRead() >= 0);
         assertTrue(proc.getBytesWritten() >= 0);
+        assertTrue(proc.getOpenFiles()>= -1);
     }
 
     /**

File: oshi-core/src/main/java/oshi/util/EdidUtil.java
Patch:
@@ -147,7 +147,7 @@ public static String getVersion(byte[] edid) {
      */
     public static boolean isDigital(byte[] edid) {
         // Byte 20 is Video input params
-        return 1 == edid[20] >> 7;
+        return 1 == (edid[20] & 0xff) >> 7;
     }
 
     /**
@@ -211,8 +211,8 @@ public static int getDescriptorType(byte[] desc) {
      */
     public static String getTimingDescriptor(byte[] desc) {
         int clock = ByteBuffer.wrap(Arrays.copyOfRange(desc, 0, 2)).order(ByteOrder.LITTLE_ENDIAN).getShort() / 100;
-        int hActive = (desc[2] & 0xff) + (desc[4] & 0xf0) << 4;
-        int vActive = (desc[5] & 0xff) + (desc[7] & 0xf0) << 4;
+        int hActive = (desc[2] & 0xff) + ((desc[4] & 0xf0) << 4);
+        int vActive = (desc[5] & 0xff) + ((desc[7] & 0xf0) << 4);
         return String.format("Clock %dMHz, Active Pixels %dx%d ", clock, hActive, vActive);
     }
 

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsCentralProcessor.java
Patch:
@@ -52,7 +52,7 @@ public class WindowsCentralProcessor extends AbstractCentralProcessor {
     private static final Logger LOG = LoggerFactory.getLogger(WindowsCentralProcessor.class);
 
     // Save Windows version info for 32 bit/64 bit branch later
-    private static final byte majorVersion = Kernel32.INSTANCE.GetVersion().byteValue();
+    private static final byte majorVersion = Kernel32.INSTANCE.GetVersion().getLow().byteValue();
 
     /**
      * Create a Processor

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxOperatingSystem.java
Patch:
@@ -162,6 +162,8 @@ public int compare(File f1, File f2) {
 
         // divide jiffies (since boot) by seconds (since boot)
         hz = (long) (youngestJiffies / startTimeSecsSinceBoot + 0.5f);
+        // reset to default if value is invalid
+        if(hz == 0) hz = 1000L;
     }
 
     private static int getMemoryPageSize() {

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxOperatingSystem.java
Patch:
@@ -119,7 +119,7 @@ public int compare(File f1, File f2) {
         long youngestJiffies = 0L;
         String youngestPid = "";
         for (File pid : pids) {
-            List<String> stat = FileUtil.readFile(String.format("/proc/%s/stat", pid.getName()));
+            List<String> stat = FileUtil.readFile(String.format("/proc/%s/stat", pid.getName()), false);
             if (!stat.isEmpty()) {
                 String[] split = ParseUtil.whitespaces.split(stat.get(0));
                 if (split.length >= 22) {

File: oshi-core/src/main/java/oshi/software/os/OperatingSystem.java
Patch:
@@ -77,7 +77,8 @@ enum ProcessSort {
      *            If not null, determines sorting of results
      * @return An array of {@link oshi.software.os.OSProcess} objects for the
      *         specified number (or all) of currently running processes, sorted
-     *         as specified
+     *         as specified. The array may contain null elements if a process
+     *         terminates during iteration.
      */
     OSProcess[] getProcesses(int limit, ProcessSort sort);
 
@@ -87,8 +88,7 @@ enum ProcessSort {
      * @param pid
      *            A process ID
      * @return An {@link oshi.software.os.OSProcess} object for the specified
-     *         process id if it is running; null otherwise currently running
-     *         processes
+     *         process id if it is running; null otherwise
      */
     OSProcess getProcess(int pid);
 

File: oshi-json/src/main/java/oshi/json/software/os/OperatingSystem.java
Patch:
@@ -75,7 +75,8 @@ public interface OperatingSystem extends OshiJsonObject {
      *            If not null, determines sorting of results
      * @return An array of {@link oshi.software.os.OSProcess} objects for the
      *         specified number (or all) of currently running processes, sorted
-     *         as specified
+     *         as specified. The array may contain null elements if a process
+     *         terminates during iteration.
      */
     OSProcess[] getProcesses(int limit, ProcessSort sort);
 
@@ -85,8 +86,7 @@ public interface OperatingSystem extends OshiJsonObject {
      * @param pid
      *            A process ID
      * @return An {@link oshi.software.os.OSProcess} object for the specified
-     *         process id if it is running; null otherwise currently running
-     *         processes
+     *         process id if it is running; null otherwise
      */
     OSProcess getProcess(int pid);
 

File: oshi-json/src/main/java/oshi/json/software/os/impl/OperatingSystemImpl.java
Patch:
@@ -102,7 +102,7 @@ public OSProcess[] getProcesses(int limit, ProcessSort sort) {
         oshi.software.os.OSProcess[] procs = this.os.getProcesses(limit, sort);
         OSProcess[] processes = new OSProcess[procs.length];
         for (int i = 0; i < procs.length; i++) {
-            processes[i] = new OSProcess(procs[i]);
+            processes[i] = procs[i] == null ? null : new OSProcess(procs[i]);
         }
         return processes;
     }
@@ -112,7 +112,8 @@ public OSProcess[] getProcesses(int limit, ProcessSort sort) {
      */
     @Override
     public OSProcess getProcess(int pid) {
-        return new OSProcess(this.os.getProcess(pid));
+        oshi.software.os.OSProcess proc = this.os.getProcess(pid);
+        return proc == null ? null : new OSProcess(proc);
     }
 
     /**

File: oshi-core/src/test/java/oshi/software/os/FileSystemTest.java
Patch:
@@ -49,6 +49,7 @@ public void testFileSystem() throws IOException {
         for (OSFileStore store : fs) {
             assertNotNull(store.getName());
             assertNotNull(store.getVolume());
+            assertNotNull(store.getLogicalVolume());
             assertNotNull(store.getDescription());
             assertNotNull(store.getType());
             assertNotNull(store.getMount());
@@ -58,6 +59,7 @@ public void testFileSystem() throws IOException {
 
             store.setName("name");
             store.setVolume("volume");
+            store.setLogicalVolume("logical volume");
             store.setDescription("desc");
             store.setType("type");
             store.setMount("mount");
@@ -67,6 +69,7 @@ public void testFileSystem() throws IOException {
 
             assertEquals("name", store.getName());
             assertEquals("volume", store.getVolume());
+            assertEquals("logical volume", store.getLogicalVolume());
             assertEquals("desc", store.getDescription());
             assertEquals("type", store.getType());
             assertEquals("mount", store.getMount());

File: oshi-json/src/main/java/oshi/json/software/os/impl/FileSystemImpl.java
Patch:
@@ -63,9 +63,10 @@ public OSFileStore[] getFileStores() {
         oshi.software.os.OSFileStore[] fs = this.fileSystem.getFileStores();
         OSFileStore[] fileStores = new OSFileStore[fs.length];
         for (int i = 0; i < fs.length; i++) {
-            fileStores[i] = new OSFileStore(fs[i].getName(), fs[i].getVolume(), fs[i].getMount(),
+            fileStores[i] = new OSFileStore(fs[i].getName(), fs[i].getVolume(),fs[i].getMount(),
                     fs[i].getDescription(), fs[i].getType(), fs[i].getUUID(), fs[i].getUsableSpace(),
                     fs[i].getTotalSpace());
+            fileStores[i].setLogicalvolume(fs[i].getLogicalVolume());
         }
         return fileStores;
     }

File: oshi-core/src/main/java/oshi/jna/platform/unix/CLibrary.java
Patch:
@@ -252,7 +252,7 @@ public Addrinfo(Pointer p) {
      *
      * @param e
      *            Error code from getaddrinfo
-     * @return
+     * @return A human-readable version of the error code
      */
     String gai_strerror(int e);
 

File: oshi-core/src/main/java/oshi/util/FileUtil.java
Patch:
@@ -166,6 +166,9 @@ public static String[] getSplitFromFile(String filename) {
      *
      * @param filename
      *            The file to read
+     * @param separator
+     *            Characters in each line of the file that separate the key and
+     *            the value
      * @return The map contained in the file, if any; otherwise empty map
      */
     public static Map<String, String> getKeyValueMapFromFile(String filename, String separator) {

File: oshi-core/src/main/java/oshi/util/ParseUtil.java
Patch:
@@ -455,6 +455,8 @@ public static int getFirstIntValue(String line) {
      *
      * @param line
      *            The entire string
+     * @param n
+     *            Which set of integers to return
      * @return the value of nth integer if any; 0 otherwise
      */
     public static int getNthIntValue(String line, int n) {

File: oshi-json/src/main/java/oshi/json/hardware/CentralProcessor.java
Patch:
@@ -87,7 +87,7 @@ public interface CentralProcessor extends OshiJsonObject {
      * macOS return the values in Big-Endian order, while Linux and Unix results
      * are in Little-Endian order.
      *
-     * @return
+     * @return A string representing the Processor ID
      */
     String getProcessorID();
 

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsDisks.java
Patch:
@@ -25,11 +25,12 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import com.sun.jna.platform.win32.Kernel32;
+
 import java8.util.function.Function;
 import oshi.hardware.Disks;
 import oshi.hardware.HWDiskStore;
 import oshi.hardware.HWPartition;
-import oshi.jna.platform.windows.Kernel32;
 import oshi.util.MapUtil;
 import oshi.util.ParseUtil;
 import oshi.util.platform.windows.WmiUtil;

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsNetworks.java
Patch:
@@ -21,6 +21,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.sun.jna.platform.win32.Kernel32;
 import com.sun.jna.platform.win32.WinDef.ULONG;
 import com.sun.jna.platform.win32.WinNT.OSVERSIONINFO;
 
@@ -29,7 +30,6 @@
 import oshi.jna.platform.windows.IPHlpAPI;
 import oshi.jna.platform.windows.IPHlpAPI.MIB_IFROW;
 import oshi.jna.platform.windows.IPHlpAPI.MIB_IFROW2;
-import oshi.jna.platform.windows.Kernel32;
 
 /**
  * @author widdis[at]gmail[dot]com

File: oshi-core/src/main/java/oshi/jna/platform/linux/Udev.java
Patch:
@@ -32,7 +32,7 @@ public interface Udev extends Library {
 
     Udev INSTANCE = (Udev) Native.loadLibrary("udev", Udev.class);
 
-    class UdevHandle extends PointerType {
+    final class UdevHandle extends PointerType {
 
         public UdevHandle(Pointer address) {
             super(address);
@@ -54,7 +54,7 @@ public UdevDevice() {
         }
     }
 
-    class UdevEnumerate extends PointerType {
+    final class UdevEnumerate extends PointerType {
 
         public UdevEnumerate(Pointer address) {
             super(address);
@@ -65,7 +65,7 @@ public UdevEnumerate() {
         }
     }
 
-    class UdevListEntry extends PointerType {
+    final class UdevListEntry extends PointerType {
 
         public UdevListEntry(Pointer address) {
             super(address);

File: oshi-core/src/main/java/oshi/jna/platform/mac/SystemB.java
Patch:
@@ -391,7 +391,7 @@ class Group extends Structure {
         protected List<String> getFieldOrder() {
             return Arrays.asList(new String[] { "gr_name", "gr_passwd", "gr_gid", "gr_mem" });
         }
-    };
+    }
 
     /**
      * This function searches the password database for the given user uid,
@@ -414,8 +414,6 @@ protected List<String> getFieldOrder() {
      */
     Group getgrgid(int gid);
 
-    int mach_task_self();
-
     /**
      * Search through the current processes
      *

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsOperatingSystem.java
Patch:
@@ -29,12 +29,12 @@
 import com.sun.jna.platform.win32.Advapi32;
 import com.sun.jna.platform.win32.Advapi32Util;
 import com.sun.jna.platform.win32.Advapi32Util.Account;
+import com.sun.jna.platform.win32.Kernel32;
 import com.sun.jna.platform.win32.WinDef.DWORD;
 import com.sun.jna.platform.win32.WinNT;
 import com.sun.jna.platform.win32.WinNT.HANDLE;
 import com.sun.jna.platform.win32.WinNT.HANDLEByReference;
 
-import oshi.jna.platform.windows.Kernel32;
 import oshi.jna.platform.windows.Psapi;
 import oshi.jna.platform.windows.Psapi.PERFORMANCE_INFORMATION;
 import oshi.software.common.AbstractOperatingSystem;

File: oshi-core/src/main/java/oshi/hardware/Disks.java
Patch:
@@ -20,6 +20,8 @@
 
 import java.io.Serializable;
 
+import java8.lang.FunctionalInterface;
+
 /**
  * Disks refers to hard drives installed in the machine.
  *

File: oshi-core/src/main/java/oshi/hardware/Display.java
Patch:
@@ -20,6 +20,8 @@
 
 import java.io.Serializable;
 
+import java8.lang.FunctionalInterface;
+
 /**
  * Display refers to the information regarding a video source and monitor
  * identified by the EDID standard.

File: oshi-core/src/main/java/oshi/hardware/Firmware.java
Patch:
@@ -19,7 +19,8 @@
 package oshi.hardware;
 
 import java.io.Serializable;
-import java.time.LocalDate;
+
+import org.threeten.bp.LocalDate;
 
 /**
  * The Firmware represents the low level BIOS or equivalent

File: oshi-core/src/main/java/oshi/hardware/NetworkIF.java
Patch:
@@ -25,11 +25,11 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
-import java.util.StringJoiner;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java8.util.StringJoiner;
 import oshi.SystemInfo;
 import oshi.hardware.platform.linux.LinuxNetworks;
 import oshi.hardware.platform.mac.MacNetworks;

File: oshi-core/src/main/java/oshi/hardware/Networks.java
Patch:
@@ -20,6 +20,8 @@
 
 import java.io.Serializable;
 
+import java8.lang.FunctionalInterface;
+
 /**
  * Networks refers to network interfaces installed in the machine.
  *

File: oshi-core/src/main/java/oshi/hardware/common/AbstractFirmware.java
Patch:
@@ -18,7 +18,7 @@
  */
 package oshi.hardware.common;
 
-import java.time.LocalDate;
+import org.threeten.bp.LocalDate;
 
 import oshi.hardware.Firmware;
 

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxDisks.java
Patch:
@@ -31,6 +31,7 @@
 import oshi.hardware.HWPartition;
 import oshi.jna.platform.linux.Udev;
 import oshi.util.FileUtil;
+import oshi.util.MapUtil;
 import oshi.util.ParseUtil;
 
 /**
@@ -110,7 +111,7 @@ public HWDiskStore[] getDisks() {
                                     0),
                             ParseUtil.parseIntOrDefault(Udev.INSTANCE.udev_device_get_property_value(device, "MINOR"),
                                     0),
-                            this.mountsMap.getOrDefault(name, ""));
+                            MapUtil.getOrDefault(mountsMap, name, ""));
                     store.setPartitions(partArray);
                 }
                 entry = Udev.INSTANCE.udev_list_entry_get_next(oldEntry);

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacDisks.java
Patch:
@@ -49,6 +49,7 @@
 import oshi.jna.platform.mac.SystemB;
 import oshi.jna.platform.mac.SystemB.Statfs;
 import oshi.util.ExecutingCommand;
+import oshi.util.MapUtil;
 import oshi.util.ParseUtil;
 import oshi.util.platform.mac.CfUtil;
 import oshi.util.platform.mac.IOKitUtil;
@@ -339,7 +340,7 @@ public HWDiskStore[] getDisks() {
                                     if (logicalVolumeMap.containsKey(partBsdName)) {
                                         mountPoint = "Logical Volume: " + logicalVolumeMap.get(partBsdName);
                                     } else {
-                                        mountPoint = mountPointMap.getOrDefault(partBsdName, "");
+                                        mountPoint = MapUtil.getOrDefault(mountPointMap, partBsdName, "");
                                     }
                                     partitions.add(new HWPartition(partBsdName, name, type,
                                             IOKitUtil.getIORegistryStringProperty(sdService, "UUID"),

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdDisks.java
Patch:
@@ -31,6 +31,7 @@
 import oshi.hardware.HWDiskStore;
 import oshi.hardware.HWPartition;
 import oshi.util.ExecutingCommand;
+import oshi.util.MapUtil;
 import oshi.util.ParseUtil;
 import oshi.util.platform.unix.freebsd.BsdSysctlUtil;
 
@@ -169,7 +170,7 @@ public HWDiskStore[] getDisks() {
                     partition = new HWPartition();
                     partition.setIdentification(part);
                     partition.setName(part);
-                    partition.setMountPoint(mountMap.getOrDefault(part, ""));
+                    partition.setMountPoint(MapUtil.getOrDefault(mountMap, part, ""));
                 }
             }
             // If we don't have a valid store, don't bother parsing anything

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisDisks.java
Patch:
@@ -30,6 +30,7 @@
 import oshi.jna.platform.unix.solaris.LibKstat.Kstat;
 import oshi.jna.platform.unix.solaris.LibKstat.KstatIO;
 import oshi.util.ExecutingCommand;
+import oshi.util.MapUtil;
 import oshi.util.ParseUtil;
 import oshi.util.platform.unix.solaris.KstatUtil;
 
@@ -125,7 +126,7 @@ public HWDiskStore[] getDisks() {
                     // update
                     if (!disk.isEmpty()) {
                         updateStore(diskMap.get(disk), model, vendor, product, serial, size, deviceMap.get(disk),
-                                majorMap.getOrDefault(disk, 0));
+                                MapUtil.getOrDefault(majorMap, disk, 0));
                     }
                     // Reset values for next iteration
                     disk = keyValue;
@@ -157,7 +158,7 @@ public HWDiskStore[] getDisks() {
             // At end of output update last entry
             if (!disk.isEmpty()) {
                 updateStore(diskMap.get(disk), model, vendor, product, serial, size, deviceMap.get(disk),
-                        majorMap.getOrDefault(disk, 0));
+                        MapUtil.getOrDefault(majorMap, disk, 0));
             }
         }
 

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsFirmware.java
Patch:
@@ -18,11 +18,12 @@
  */
 package oshi.hardware.platform.windows;
 
-import java.time.Instant;
-import java.time.ZoneOffset;
 import java.util.List;
 import java.util.Map;
 
+import org.threeten.bp.Instant;
+import org.threeten.bp.ZoneOffset;
+
 import oshi.hardware.common.AbstractFirmware;
 import oshi.util.platform.windows.WmiUtil;
 import oshi.util.platform.windows.WmiUtil.ValueType;

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxFileSystem.java
Patch:
@@ -32,6 +32,7 @@
 import oshi.software.os.FileSystem;
 import oshi.software.os.OSFileStore;
 import oshi.util.FileUtil;
+import oshi.util.MapUtil;
 import oshi.util.ParseUtil;
 
 /**
@@ -152,7 +153,7 @@ public OSFileStore[] getFileStores() {
                 name = "/";
             }
             String volume = split[0].replaceAll("\\\\040", " ");
-            String uuid = uuidMap.getOrDefault(split[0], "");
+            String uuid = MapUtil.getOrDefault(uuidMap, split[0], "");
             long totalSpace = new File(path).getTotalSpace();
             long usableSpace = new File(path).getUsableSpace();
 

File: oshi-core/src/main/java/oshi/software/os/mac/MacOperatingSystem.java
Patch:
@@ -39,6 +39,7 @@
 import oshi.software.os.FileSystem;
 import oshi.software.os.NetworkParams;
 import oshi.software.os.OSProcess;
+import oshi.util.FormatUtil;
 import oshi.util.ParseUtil;
 import oshi.util.platform.mac.SysctlUtil;
 
@@ -228,7 +229,7 @@ private String getCommandLine(int pid) {
             offset += arg.length();
         }
         // Return args null-delimited
-        return String.join("\0", args);
+        return FormatUtil.join("\0", args);
     }
 
     /**

File: oshi-core/src/main/java/oshi/software/os/unix/freebsd/FreeBsdFileSystem.java
Patch:
@@ -28,6 +28,7 @@
 import oshi.software.os.FileSystem;
 import oshi.software.os.OSFileStore;
 import oshi.util.ExecutingCommand;
+import oshi.util.MapUtil;
 import oshi.util.platform.unix.freebsd.BsdSysctlUtil;
 
 /**
@@ -149,7 +150,7 @@ public OSFileStore[] getFileStores() {
                 description = "Mount Point";
             }
             // Match UUID
-            String uuid = uuidMap.getOrDefault(name, "");
+            String uuid = MapUtil.getOrDefault(uuidMap, name, "");
             OSFileStore osStore = new OSFileStore(name, volume, path, description, type, uuid, usableSpace, totalSpace);
             fsList.add(osStore);
         }

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsOperatingSystem.java
Patch:
@@ -41,6 +41,7 @@
 import oshi.software.os.FileSystem;
 import oshi.software.os.NetworkParams;
 import oshi.software.os.OSProcess;
+import oshi.util.FormatUtil;
 import oshi.util.ParseUtil;
 import oshi.util.platform.windows.WmiUtil;
 import oshi.util.platform.windows.WmiUtil.ValueType;
@@ -153,8 +154,8 @@ private List<OSProcess> processMapToList(Map<String, List<Object>> procs) {
                             groupList.add(account.name);
                             groupIDList.add(account.sidString);
                         }
-                        proc.setGroup(String.join(",", groupList));
-                        proc.setGroupID(String.join(",", groupIDList));
+                        proc.setGroup(FormatUtil.join(",", groupList));
+                        proc.setGroupID(FormatUtil.join(",", groupIDList));
                     } else {
                         int error = Kernel32.INSTANCE.GetLastError();
                         // Access denied errors are common and will silently

File: oshi-core/src/main/java/oshi/util/platform/unix/solaris/KstatUtil.java
Patch:
@@ -86,11 +86,11 @@ public static String kstatDataLookupString(Kstat ksp, String name) {
         case LibKstat.KSTAT_DATA_INT32:
             return Integer.toString(data.value.i32);
         case LibKstat.KSTAT_DATA_UINT32:
-            return Integer.toUnsignedString(data.value.ui32);
+            return FormatUtil.toUnsignedString(data.value.ui32);
         case LibKstat.KSTAT_DATA_INT64:
             return Long.toString(data.value.i64);
         case LibKstat.KSTAT_DATA_UINT64:
-            return Long.toUnsignedString(data.value.ui64);
+            return FormatUtil.toUnsignedString(data.value.ui64);
         case LibKstat.KSTAT_DATA_STRING:
             return data.value.str.addr.getString(0);
         default:

File: oshi-core/src/main/java/oshi/util/platform/windows/WmiUtil.java
Patch:
@@ -60,6 +60,7 @@
 import oshi.jna.platform.windows.COM.WbemClassObject;
 import oshi.jna.platform.windows.COM.WbemLocator;
 import oshi.jna.platform.windows.COM.WbemServices;
+import oshi.util.FormatUtil;
 import oshi.util.ParseUtil;
 
 /**
@@ -555,7 +556,7 @@ private static void enumerateProperties(Map<String, List<Object>> values, EnumWb
                     break;
                 case PROCESS_GETOWNER:
                     // Win32_Process object GetOwner method
-                    String owner = String.join("\\",
+                    String owner = FormatUtil.join("\\",
                             execMethod(svc, vtProp.stringValue(), "GetOwner", "Domain", "User"));
                     values.get(propertyType.name()).add("\\".equals(owner) ? "N/A" : owner);
                     break;

File: oshi-core/src/test/java/oshi/hardware/ComputerSystemTest.java
Patch:
@@ -21,9 +21,8 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 
-import java.time.LocalDate;
-
 import org.junit.Test;
+import org.threeten.bp.LocalDate;
 
 import oshi.SystemInfo;
 

File: oshi-json/src/main/java/oshi/json/hardware/Firmware.java
Patch:
@@ -18,7 +18,7 @@
  */
 package oshi.json.hardware;
 
-import java.time.LocalDate;
+import org.threeten.bp.LocalDate;
 
 import oshi.json.json.OshiJsonObject;
 

File: oshi-json/src/main/java/oshi/json/hardware/impl/FirmwareImpl.java
Patch:
@@ -18,14 +18,15 @@
  */
 package oshi.json.hardware.impl;
 
-import java.time.LocalDate;
 import java.util.Properties;
 
 import javax.json.Json;
 import javax.json.JsonBuilderFactory;
 import javax.json.JsonObject;
 import javax.json.JsonObjectBuilder;
 
+import org.threeten.bp.LocalDate;
+
 import oshi.json.hardware.Firmware;
 import oshi.json.json.AbstractOshiJsonObject;
 import oshi.json.json.NullAwareJsonObjectBuilder;

File: oshi-json/src/test/java/oshi/json/hardware/ComputerSystemTest.java
Patch:
@@ -21,9 +21,8 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 
-import java.time.LocalDate;
-
 import org.junit.Test;
+import org.threeten.bp.LocalDate;
 
 import oshi.json.SystemInfo;
 

File: oshi-core/src/test/java/oshi/SystemInfoTest.java
Patch:
@@ -71,6 +71,7 @@ public static void main(String[] args) {
 
         HardwareAbstractionLayer hal = si.getHardware();
         OperatingSystem os = si.getOperatingSystem();
+
         System.out.println(os);
 
         LOG.info("Checking computer system...");

File: oshi-json/src/main/java/oshi/json/software/os/impl/OperatingSystemImpl.java
Patch:
@@ -102,7 +102,7 @@ public OSProcess[] getProcesses(int limit, ProcessSort sort) {
         oshi.software.os.OSProcess[] procs = this.os.getProcesses(limit, sort);
         OSProcess[] processes = new OSProcess[procs.length];
         for (int i = 0; i < procs.length; i++) {
-            processes[i] = new OSProcessImpl(procs[i]);
+            processes[i] = new OSProcess(procs[i]);
         }
         return processes;
     }
@@ -112,7 +112,7 @@ public OSProcess[] getProcesses(int limit, ProcessSort sort) {
      */
     @Override
     public OSProcess getProcess(int pid) {
-        return new OSProcessImpl(this.os.getProcess(pid));
+        return new OSProcess(this.os.getProcess(pid));
     }
 
     /**

File: oshi-core/src/main/java/oshi/util/platform/windows/WmiUtil.java
Patch:
@@ -328,7 +328,7 @@ private static Map<String, List<Object>> queryWMI(String namespace, String prope
         }
         EnumWbemClassObject enumerator = new EnumWbemClassObject(pEnumerator.getValue());
 
-        enumerateProperties(values, enumerator, props, propertyTypes, wmiClass, svc);
+        enumerateProperties(values, enumerator, props, propertyTypes, svc);
 
         // Cleanup
         enumerator.Release();
@@ -476,7 +476,7 @@ private static boolean selectProperties(WbemServices svc, PointerByReference pEn
      *            The WbemServices object
      */
     private static void enumerateProperties(Map<String, List<Object>> values, EnumWbemClassObject enumerator,
-            String[] properties, ValueType[] propertyTypes, String wmiClass, WbemServices svc) {
+            String[] properties, ValueType[] propertyTypes, WbemServices svc) {
         if (propertyTypes.length > 1 && properties.length != propertyTypes.length) {
             throw new IllegalArgumentException("Property type array size must be 1 or equal to properties array size.");
         }

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdCentralProcessor.java
Patch:
@@ -101,15 +101,15 @@ private void initVars() {
                 Matcher m = CPUINFO.matcher(line);
                 if (m.matches()) {
                     setVendor(m.group(1));
-                    processorID |= Long.decode(m.group(2).toString());
+                    processorID |= Long.decode(m.group(2));
                     setFamily(Integer.decode(m.group(3)).toString());
                     setModel(Integer.decode(m.group(4)).toString());
                     setStepping(Integer.decode(m.group(5)).toString());
                 }
             } else if (line.startsWith("Features=")) {
                 Matcher m = CPUINFO2.matcher(line);
                 if (m.matches()) {
-                    processorID |= Long.decode(m.group(1).toString()) << 32;
+                    processorID |= Long.decode(m.group(1)) << 32;
                 }
                 // No further interest in this file
                 break;

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisCentralProcessor.java
Patch:
@@ -189,16 +189,16 @@ public String getSystemSerialNumber() {
      */
     private String getProcessorID(String stepping, String model, String family) {
         List<String> isainfo = ExecutingCommand.runNative("isainfo -v");
-        String flags = "";
+        StringBuilder flags = new StringBuilder();
         for (String line : isainfo) {
             if (line.startsWith("64-bit")) {
                 continue;
             } else if (line.startsWith("32-bit")) {
                 break;
             }
-            flags = flags + line;
+            flags.append(' ').append(line.trim());
         }
-        return createProcessorID(stepping, model, family, flags.toLowerCase().split("\\s+"));
+        return createProcessorID(stepping, model, family, flags.toString().toLowerCase().split("\\s+"));
     }
 
 }

File: oshi-core/src/main/java/oshi/jna/platform/unix/CLibrary.java
Patch:
@@ -61,6 +61,7 @@ class Sockaddr extends Structure {
         public static class ByReference extends Sockaddr implements Structure.ByReference {
         }
 
+        @Override
         protected List<String> getFieldOrder() {
             return Arrays.asList(new String[] { "sa_family", "sa_data" });
         }
@@ -79,6 +80,7 @@ class Addrinfo extends Structure {
         public static class ByReference extends Addrinfo implements Structure.ByReference {
         }
 
+        @Override
         protected List<String> getFieldOrder() {
             return Arrays.asList(new String[] { "ai_flags", "ai_family", "ai_socktype", "ai_protocol", "ai_addrlen",
                     "ai_addr", "ai_canonname", "ai_next" });

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxNetworkParams.java
Patch:
@@ -52,7 +52,7 @@ public String getDomainName() {
         try {
             hostname = InetAddress.getLocalHost().getHostName();
         } catch (UnknownHostException e) {
-            LOG.error("Unknown host exception when getting address of local host: " + e);
+            LOG.error("Unknown host exception when getting address of local host: {}", e);
             return "";
         }
         PointerByReference ptr = new PointerByReference();

File: oshi-core/src/main/java/oshi/software/os/mac/MacNetworkParams.java
Patch:
@@ -52,7 +52,7 @@ public String getDomainName() {
         try {
             hostname = InetAddress.getLocalHost().getHostName();
         } catch (UnknownHostException e) {
-            LOG.error("Unknown host exception when getting address of local host: " + e);
+            LOG.error("Unknown host exception when getting address of local host: {}", e);
             return "";
         }
         PointerByReference ptr = new PointerByReference();

File: oshi-core/src/main/java/oshi/software/os/unix/freebsd/FreeBsdNetworkParams.java
Patch:
@@ -47,7 +47,7 @@ public String getDomainName() {
         try {
             hostname = InetAddress.getLocalHost().getHostName();
         } catch (UnknownHostException e) {
-            LOG.error("Unknown host exception when getting address of local host: " + e);
+            LOG.error("Unknown host exception when getting address of local host: {}", e);
             return "";
         }
         PointerByReference ptr = new PointerByReference();
@@ -57,7 +57,7 @@ public String getDomainName() {
             return "";
         }
         Libc.Addrinfo info = new Libc.Addrinfo(ptr.getValue());
-        String canonname = new String(info.ai_canonname).trim();
+        String canonname = info.ai_canonname.trim();
         Libc.INSTANCE.freeaddrinfo(ptr.getValue());
         return canonname;
     }

File: oshi-core/src/main/java/oshi/jna/platform/windows/Kernel32.java
Patch:
@@ -33,6 +33,9 @@ public interface Kernel32 extends com.sun.jna.platform.win32.Kernel32 {
 
     int SEM_FAILCRITICALERRORS = 0x0001;
 
+    int ComputerNameDnsHostname = 1;
+    int ComputerNameDnsDomain = 2;
+
     // TODO: Submit this change to JNA Kernel32 class
     /**
      * Retrieves system timing information. On a multiprocessor system, the

File: oshi-core/src/main/java/oshi/util/platform/windows/WmiUtil.java
Patch:
@@ -60,7 +60,7 @@ public class WmiUtil {
      * Enum for WMI queries for proper parsing from the returned VARIANT
      */
     public enum ValueType {
-        STRING, UINT32, FLOAT, DATETIME, BOOLEAN, UINT64
+        STRING, UINT32, FLOAT, DATETIME, BOOLEAN, UINT64, UINT16
     }
 
     /**
@@ -478,6 +478,7 @@ private static void enumerateProperties(Map<String, List<Object>> values, EnumWb
                 case STRING:
                     values.get(property).add(vtProp.getValue() == null ? "unknown" : vtProp.stringValue());
                     break;
+                case UINT16: // uint16 == VT_I4
                 // WMI Uint32s will return as longs
                 case UINT32: // WinDef.LONG TODO improve in JNA 4.3
                 case UINT64:

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdNetworks.java
Patch:
@@ -49,5 +49,7 @@ public static void updateNetworkStats(NetworkIF netIF) {
         netIF.setBytesRecv(ParseUtil.parseLongOrDefault(split[7], 0L));
         netIF.setPacketsSent(ParseUtil.parseLongOrDefault(split[8], 0L));
         netIF.setPacketsRecv(ParseUtil.parseLongOrDefault(split[4], 0L));
+        netIF.setOutErrors(ParseUtil.parseLongOrDefault(split[9], 0L));
+        netIF.setInErrors(ParseUtil.parseLongOrDefault(split[5], 0L));
     }
 }

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisNetworks.java
Patch:
@@ -44,6 +44,8 @@ public static void updateNetworkStats(NetworkIF netIF) {
             netIF.setBytesRecv(KstatUtil.kstatDataLookupLong(ksp, "rbytes64"));
             netIF.setPacketsSent(KstatUtil.kstatDataLookupLong(ksp, "opackets64"));
             netIF.setPacketsRecv(KstatUtil.kstatDataLookupLong(ksp, "ipackets64"));
+            netIF.setOutErrors(KstatUtil.kstatDataLookupLong(ksp, "oerrors"));
+            netIF.setInErrors(KstatUtil.kstatDataLookupLong(ksp, "ierrors"));
             netIF.setSpeed(KstatUtil.kstatDataLookupLong(ksp, "ifspeed"));
             // Snap time in ns; convert to ms
             netIF.setTimeStamp(ksp.ks_snaptime / 1000000L);

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsNetworks.java
Patch:
@@ -59,6 +59,8 @@ public static void updateNetworkStats(NetworkIF netIF) {
         netIF.setBytesRecv(ifRow.InOctets);
         netIF.setPacketsSent(ifRow.OutUcastPkts);
         netIF.setPacketsRecv(ifRow.InUcastPkts);
+        netIF.setOutErrors(ifRow.OutErrors);
+        netIF.setInErrors(ifRow.InErrors);
         netIF.setSpeed(ifRow.ReceiveLinkSpeed);
     }
 }

File: oshi-core/src/main/java/oshi/hardware/Baseboard.java
Patch:
@@ -18,13 +18,15 @@
  */
 package oshi.hardware;
 
+import java.io.Serializable;
+
 /**
  * The Baseboard represents the system board, also called motherboard, logic
  * board, etc.
  * 
  * @author widdis [at] gmail [dot] com
  */
-public interface Baseboard {
+public interface Baseboard extends Serializable {
     /**
      * Get the baseboard manufacturer.
      * 

File: oshi-core/src/main/java/oshi/hardware/ComputerSystem.java
Patch:
@@ -18,6 +18,8 @@
  */
 package oshi.hardware;
 
+import java.io.Serializable;
+
 /**
  * The ComputerSystem represents the physical hardware, of a computer
  * system/product and includes BIOS/firmware and a motherboard, logic board,
@@ -26,7 +28,7 @@
  * @author SchiTho1 [at] Securiton AG
  * @author widdis [at] gmail [dot] com
  */
-public interface ComputerSystem {
+public interface ComputerSystem extends Serializable {
     /**
      * Get the computer system manufacturer.
      * 

File: oshi-core/src/main/java/oshi/hardware/Firmware.java
Patch:
@@ -18,14 +18,15 @@
  */
 package oshi.hardware;
 
+import java.io.Serializable;
 import java.util.Date;
 
 /**
  * The Firmware represents the low level BIOS or equivalent
  * 
  * @author SchiTho1 [at] Securiton AG
  */
-public interface Firmware {
+public interface Firmware extends Serializable {
 
     String getManufacturer();
 

File: oshi-core/src/main/java/oshi/hardware/common/AbstractBaseboard.java
Patch:
@@ -27,6 +27,8 @@
  */
 public abstract class AbstractBaseboard implements Baseboard {
 
+    private static final long serialVersionUID = 1L;
+
     private String manufacturer;
     private String model;
     private String version;

File: oshi-core/src/main/java/oshi/hardware/common/AbstractComputerSystem.java
Patch:
@@ -30,6 +30,8 @@
  */
 public abstract class AbstractComputerSystem implements ComputerSystem {
 
+    private static final long serialVersionUID = 1L;
+
     private String manufacturer;
     private String model;
     private String serialNumber;

File: oshi-core/src/main/java/oshi/hardware/common/AbstractFirmware.java
Patch:
@@ -30,6 +30,8 @@
  */
 public abstract class AbstractFirmware implements Firmware {
 
+    private static final long serialVersionUID = 1L;
+
     private String manufacturer;
     private String name;
     private String description;

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxBaseboard.java
Patch:
@@ -27,6 +27,9 @@
  * @author widdis [at] gmail [dot] com
  */
 final class LinuxBaseboard extends AbstractBaseboard {
+
+    private static final long serialVersionUID = 1L;
+
     // Note: /sys/class/dmi/id symlinks here, but /sys/devices/* is the
     // official/approved path for sysfs information
     private static final String SYSFS_SERIAL_PATH = "/sys/devices/virtual/dmi/id/";

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxComputerSystem.java
Patch:
@@ -29,6 +29,8 @@
  */
 final class LinuxComputerSystem extends AbstractComputerSystem {
 
+    private static final long serialVersionUID = 1L;
+
     // Note: /sys/class/dmi/id symlinks here, but /sys/devices/* is the
     // official/approved path for sysfs information
     private static final String SYSFS_SERIAL_PATH = "/sys/devices/virtual/dmi/id/";

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxFirmware.java
Patch:
@@ -39,6 +39,8 @@
  */
 final class LinuxFirmware extends AbstractFirmware {
 
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(LinuxFirmware.class);
 
     // TODO: Is that really not language-dependent?

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacBaseboard.java
Patch:
@@ -22,4 +22,6 @@
 
 final class MacBaseboard extends AbstractBaseboard {
 
+    private static final long serialVersionUID = 1L;
+
 }

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacFirmware.java
Patch:
@@ -22,4 +22,6 @@
 
 final class MacFirmware extends AbstractFirmware {
 
+    private static final long serialVersionUID = 1L;
+
 }

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdBaseboard.java
Patch:
@@ -23,6 +23,8 @@
 
 final class FreeBsdBaseboard extends AbstractBaseboard {
 
+    private static final long serialVersionUID = 1L;
+
     FreeBsdBaseboard() {
         init();
     }

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdComputerSystem.java
Patch:
@@ -28,6 +28,8 @@
  */
 final class FreeBsdComputerSystem extends AbstractComputerSystem {
 
+    private static final long serialVersionUID = 1L;
+
     FreeBsdComputerSystem() {
         init();
     }

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdFirmware.java
Patch:
@@ -31,6 +31,9 @@
 import oshi.util.ExecutingCommand;
 
 final class FreeBsdFirmware extends AbstractFirmware {
+
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(FreeBsdFirmware.class);
 
     // TODO: Is release really not language-dependent?

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisBaseboard.java
Patch:
@@ -22,4 +22,6 @@
 
 final class SolarisBaseboard extends AbstractBaseboard {
 
+    private static final long serialVersionUID = 1L;
+
 }

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisComputerSystem.java
Patch:
@@ -36,6 +36,9 @@
  * @author widdis [at] gmail [dot] com
  */
 final class SolarisComputerSystem extends AbstractComputerSystem {
+
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(SolarisComputerSystem.class);
 
     // TODO: Is release really not language-dependent?

File: oshi-core/src/main/java/oshi/hardware/platform/unix/solaris/SolarisFirmware.java
Patch:
@@ -22,4 +22,6 @@
 
 final class SolarisFirmware extends AbstractFirmware {
 
+    private static final long serialVersionUID = 1L;
+
 }

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsBaseboard.java
Patch:
@@ -31,6 +31,8 @@
  */
 public class WindowsBaseboard extends AbstractBaseboard {
 
+    private static final long serialVersionUID = 1L;
+
     WindowsBaseboard() {
         init();
     }

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsComputerSystem.java
Patch:
@@ -32,6 +32,8 @@
  */
 final class WindowsComputerSystem extends AbstractComputerSystem {
 
+    private static final long serialVersionUID = 1L;
+
     WindowsComputerSystem() {
         init();
     }

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsFirmware.java
Patch:
@@ -32,6 +32,9 @@
  * @author SchiTho1 [at] Securiton AG
  */
 final class WindowsFirmware extends AbstractFirmware {
+
+    private static final long serialVersionUID = 1L;
+
     private static final ValueType[] BIOS_TYPES = { ValueType.STRING, ValueType.STRING, ValueType.STRING,
             ValueType.STRING, ValueType.DATETIME };
 

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsSensors.java
Patch:
@@ -105,7 +105,7 @@ public double getCpuTemperature() {
         if (tempK > 2732) {
             tempC = tempK / 10d - 273.15;
         } else if (tempK > 274) {
-            tempC = tempK - 273;
+            tempC = tempK - 273d;
         }
         if (tempC <= 0d) {
             // Unable to get temperature via WMI. Future attempts will be

File: oshi-core/src/main/java/oshi/jna/platform/mac/SystemB.java
Patch:
@@ -430,7 +430,7 @@ protected List<String> getFieldOrder() {
      *            the type of information requested
      * @param buffer
      *            holds results
-     * @returns 0 on success; or -1 on failure, with errno set to indicate the specific error.
+     * @return 0 on success; or -1 on failure, with errno set to indicate the specific error.
      */
     int proc_pid_rusage(int pid, int flavor, RUsageInfoV2 buffer);
 

File: oshi-core/src/main/java/oshi/jna/platform/mac/SystemB.java
Patch:
@@ -430,7 +430,7 @@ protected List<String> getFieldOrder() {
      *            the type of information requested
      * @param buffer
      *            holds results
-     * @returns 0 on success; or -1 on failure, with errno set to indicate the specific error.
+     * @return 0 on success; or -1 on failure, with errno set to indicate the specific error.
      */
     int proc_pid_rusage(int pid, int flavor, RUsageInfoV2 buffer);
 

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxPowerSource.java
Patch:
@@ -63,8 +63,8 @@ public static PowerSource[] getPowerSources() {
         List<LinuxPowerSource> psList = new ArrayList<>(psNames.length);
         // For each power source, output various info
         for (String psName : psNames) {
-            // Skip if name is ADP* (AC power supply)
-            if (psName.startsWith("ADP")) {
+            // Skip if name is ADP* or AC* (AC power supply)
+            if (psName.startsWith("ADP") || psName.startsWith("AC")) {
                 continue;
             }
             // Skip if can't read uevent file

File: oshi-core/src/test/java/oshi/util/ExecutingCommandTest.java
Patch:
@@ -24,13 +24,15 @@
 import java.util.List;
 
 import org.junit.Test;
+import oshi.PlatformEnum;
+import oshi.SystemInfo;
 
 /**
  * Test command line and returning the result of execution.
  */
 public class ExecutingCommandTest {
 
-    private static final String ECHO = "echo Test";
+    private static final String ECHO = SystemInfo.getCurrentPlatformEnum().equals(PlatformEnum.WINDOWS) ? "cmd.exe /C echo Test" : "echo Test";
     private static final String BAD_COMMAND = "noOSshouldHaveACommandNamedThis";
 
     @Test

File: oshi-core/src/main/java/oshi/hardware/common/AbstractCentralProcessor.java
Patch:
@@ -45,7 +45,8 @@ public abstract class AbstractCentralProcessor implements CentralProcessor {
     /**
      * Instantiate an OperatingSystemMXBean for future convenience
      */
-    private final java.lang.management.OperatingSystemMXBean OS_MXBEAN = ManagementFactory.getOperatingSystemMXBean();
+    private static final java.lang.management.OperatingSystemMXBean OS_MXBEAN = ManagementFactory
+            .getOperatingSystemMXBean();
 
     /**
      * Calling OperatingSystemMxBean too rapidly results in NaN. Store the

File: oshi-core/src/main/java/oshi/hardware/common/AbstractNetworks.java
Patch:
@@ -59,7 +59,7 @@ public NetworkIF[] getNetworks() {
                 }
             }
         } catch (SocketException ex) {
-            LOG.error("Socket exception when retrieving network interfaces: " + ex.getMessage());
+            LOG.error("Socket exception when retrieving network interfaces: " + ex);
         }
         return result.toArray(new NetworkIF[result.size()]);
     }

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxFileSystem.java
Patch:
@@ -117,7 +117,7 @@ public OSFileStore[] getFileStores() {
                     // Store UUID as value with path (e.g., /dev/sda1) as key
                     uuidMap.put(uuid.getCanonicalPath(), uuid.getName().toLowerCase());
                 } catch (IOException e) {
-                    LOG.error("Couldn't get canonical path for {}", uuid.getName());
+                    LOG.error("Couldn't get canonical path for {}. {}", uuid.getName(), e);
                 }
             }
         }

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxOperatingSystem.java
Patch:
@@ -154,7 +154,7 @@ public int getThreadCount() {
             }
             return info.procs;
         } catch (UnsatisfiedLinkError | NoClassDefFoundError e) {
-            LOG.error("Failed to get procs from sysinfo. {}", e.getMessage());
+            LOG.error("Failed to get procs from sysinfo. {}", e);
         }
         return 0;
     }

File: oshi-core/src/main/java/oshi/util/FileUtil.java
Patch:
@@ -70,7 +70,7 @@ public static List<String> readFile(String filename, boolean reportError) {
                 return Files.readAllLines(Paths.get(filename), StandardCharsets.UTF_8);
             } catch (IOException e) {
                 if (reportError) {
-                    LOG.error("Error reading file {}", filename);
+                    LOG.error("Error reading file {}. {}", filename, e);
                 }
             }
         } else if (reportError) {
@@ -114,7 +114,7 @@ public static int getIntFromFile(String filename) {
                 return Integer.parseInt(read.get(0));
             }
         } catch (NumberFormatException ex) {
-            LOG.debug("Unable to read value from {}", filename);
+            LOG.debug("Unable to read value from {}. {}", filename, ex);
         }
         return 0;
     }

File: oshi-core/src/main/java/oshi/util/Util.java
Patch:
@@ -39,7 +39,7 @@ public static void sleep(long ms) {
         try {
             LOG.trace("Sleeping for {} ms", ms);
             Thread.sleep(ms);
-        } catch (InterruptedException e) {
+        } catch (InterruptedException e) { // NOSONAR squid:S2142
             LOG.trace("", e);
             LOG.warn("Interrupted while sleeping for {} ms", ms);
         }

File: oshi-core/src/main/java/oshi/jna/platform/windows/IPHlpAPI.java
Patch:
@@ -155,7 +155,7 @@ protected List<String> getFieldOrder() {
      * The GetIfEntry function retrieves information for the specified interface
      * on the local computer
      * 
-     * @param pIfRow
+     * @param pIfRow2
      *            A pointer to a MIB_IFROW structure that, on successful return,
      *            receives information for an interface on the local computer.
      *            On input, set the dwIndex member of MIB_IFROW to the index of

File: oshi-core/src/main/java/oshi/jna/platform/windows/IPHlpAPI.java
Patch:
@@ -155,7 +155,7 @@ protected List<String> getFieldOrder() {
      * The GetIfEntry function retrieves information for the specified interface
      * on the local computer
      * 
-     * @param pIfRow
+     * @param pIfRow2
      *            A pointer to a MIB_IFROW structure that, on successful return,
      *            receives information for an interface on the local computer.
      *            On input, set the dwIndex member of MIB_IFROW to the index of

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsDisks.java
Patch:
@@ -93,7 +93,7 @@ public HWDiskStore[] getDisks() {
             // Get partitions
             List<HWPartition> partitions = new ArrayList<>();
             List<String> partList = driveToPartitionMap.get(ds.getName());
-            if (!partList.isEmpty()) {
+            if (partList != null && !partList.isEmpty()) {
                 for (String part : partList) {
                     partitions.add(partitionMap.get(part));
                 }

File: oshi-core/src/main/java/oshi/util/FileUtil.java
Patch:
@@ -125,7 +125,7 @@ public static int getIntFromFile(String filename) {
      * 
      * @param filename
      *            The file to read
-     * @return The value contained in the file, if any; otherwise emptpy string
+     * @return The value contained in the file, if any; otherwise empty string
      */
     public static String getStringFromFile(String filename) {
         LOG.debug("Reading file {}", filename);

File: oshi-core/src/main/java/oshi/hardware/NetworkIF.java
Patch:
@@ -272,6 +272,7 @@ public void updateNetworkStats() {
             break;
         default:
             LOG.error("Unsupported platform. No update performed.");
+            break;
         }
     }
 }

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdCentralProcessor.java
Patch:
@@ -32,9 +32,9 @@
 import com.sun.jna.ptr.IntByReference;
 
 import oshi.hardware.common.AbstractCentralProcessor;
-import oshi.jna.platform.unix.freebsd.LibC;
-import oshi.jna.platform.unix.freebsd.LibC.CpTime;
-import oshi.jna.platform.unix.freebsd.LibC.Timeval;
+import oshi.jna.platform.unix.LibC;
+import oshi.jna.platform.unix.LibC.CpTime;
+import oshi.jna.platform.unix.LibC.Timeval;
 import oshi.util.ExecutingCommand;
 import oshi.util.FileUtil;
 import oshi.util.platform.unix.freebsd.BsdSysctlUtil;

File: oshi-core/src/main/java/oshi/hardware/platform/unix/freebsd/FreeBsdSensors.java
Patch:
@@ -23,7 +23,7 @@
 import com.sun.jna.ptr.IntByReference;
 
 import oshi.hardware.common.AbstractSensors;
-import oshi.jna.platform.unix.freebsd.LibC;
+import oshi.jna.platform.unix.LibC;
 
 public class FreeBsdSensors extends AbstractSensors {
 

File: oshi-core/src/main/java/oshi/jna/platform/unix/package-info.java
Patch:
@@ -17,8 +17,8 @@
  * https://github.com/dblock/oshi/graphs/contributors
  */
 /**
- * Provides extensions of JNA libraries for FreeBSD. These classes should be
+ * Provides extensions of JNA libraries for Unix. These classes should be
  * considered non-API as they may be removed if/when their code is incorporated
  * into the JNA project.
  */
-package oshi.jna.platform.unix.freebsd;
\ No newline at end of file
+package oshi.jna.platform.unix;
\ No newline at end of file

File: oshi-core/src/main/java/oshi/jna/platform/windows/Kernel32.java
Patch:
@@ -31,6 +31,8 @@
 public interface Kernel32 extends com.sun.jna.platform.win32.Kernel32 {
     Kernel32 INSTANCE = (Kernel32) Native.loadLibrary("kernel32", Kernel32.class, W32APIOptions.DEFAULT_OPTIONS);
 
+    int SEM_FAILCRITICALERRORS = 0x0001;
+
     // TODO: Submit this change to JNA Kernel32 class
     /**
      * Retrieves system timing information. On a multiprocessor system, the
@@ -63,8 +65,6 @@ public interface Kernel32 extends com.sun.jna.platform.win32.Kernel32 {
      */
     long GetTickCount64();
 
-    int SEM_FAILCRITICALERRORS = 0x0001;
-
     /**
      * Controls whether the system will handle the specified types of serious
      * errors or whether the process will handle them.

File: oshi-core/src/main/java/oshi/util/platform/unix/freebsd/BsdSysctlUtil.java
Patch:
@@ -27,7 +27,7 @@
 import com.sun.jna.Structure;
 import com.sun.jna.ptr.IntByReference;
 
-import oshi.jna.platform.unix.freebsd.LibC;
+import oshi.jna.platform.unix.LibC;
 
 /**
  * Provides access to sysctl calls on FreeBSD

File: oshi-core/src/test/java/oshi/hardware/UsbDeviceTest.java
Patch:
@@ -35,8 +35,8 @@ public class UsbDeviceTest {
     @Test
     public void testUsbDevices() {
         SystemInfo si = new SystemInfo();
-
         for (UsbDevice usb : si.getHardware().getUsbDevices(true)) {
+            assertNotNull(usb);
             testUsbRecursive(usb);
         }
     }

File: oshi-core/src/main/java/oshi/hardware/NetworkIF.java
Patch:
@@ -45,7 +45,7 @@ public class NetworkIF implements Serializable {
 
     private static final Logger LOG = LoggerFactory.getLogger(NetworkIF.class);
 
-    private NetworkInterface networkInterface;
+    private transient NetworkInterface networkInterface;
     private int mtu;
     private String mac;
     private String[] ipv4;

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacGlobalMemory.java
Patch:
@@ -42,10 +42,10 @@ public class MacGlobalMemory extends AbstractGlobalMemory {
 
     private static final Logger LOG = LoggerFactory.getLogger(MacGlobalMemory.class);
 
-    private XswUsage xswUsage = new XswUsage();
+    private transient XswUsage xswUsage = new XswUsage();
     private long lastUpdateSwap = 0;
 
-    private VMStatistics vmStats = new VMStatistics();
+    private transient VMStatistics vmStats = new VMStatistics();
     private long lastUpdateAvail = 0;
 
     private long pageSize = 4096;

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsGlobalMemory.java
Patch:
@@ -42,7 +42,7 @@ public class WindowsGlobalMemory extends AbstractGlobalMemory {
 
     private static final Logger LOG = LoggerFactory.getLogger(WindowsGlobalMemory.class);
 
-    private PERFORMANCE_INFORMATION perfInfo = new PERFORMANCE_INFORMATION();
+    private transient PERFORMANCE_INFORMATION perfInfo = new PERFORMANCE_INFORMATION();
 
     private long lastUpdate = 0;
 

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxFileSystem.java
Patch:
@@ -153,8 +153,8 @@ public OSFileStore[] getFileStores() {
             }
             String volume = split[0].replaceAll("\\\\040", " ");
             String uuid = uuidMap.getOrDefault(split[0], "");
-            long totalSpace = (new File(path)).getTotalSpace();
-            long usableSpace = (new File(path)).getUsableSpace();
+            long totalSpace = new File(path).getTotalSpace();
+            long usableSpace = new File(path).getUsableSpace();
 
             String description;
             if (volume.startsWith("/dev")) {

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsFileSystem.java
Patch:
@@ -48,7 +48,7 @@ public class WindowsFileSystem extends AbstractFileSystem {
     private static final Pattern UUID_PATTERN = Pattern
             .compile(".+([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}).+");
 
-    private final int BUFSIZE = 255;
+    private static final int BUFSIZE = 255;
 
     public WindowsFileSystem() {
         // Set error mode to fail rather than prompt for FLoppy/CD-Rom

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsOSVersionInfoEx.java
Patch:
@@ -41,7 +41,7 @@ public class WindowsOSVersionInfoEx extends AbstractOSVersionInfoEx {
 
     private static final Logger LOG = LoggerFactory.getLogger(WindowsOSVersionInfoEx.class);
 
-    private OSVERSIONINFOEX versionInfo = null;
+    private transient OSVERSIONINFOEX versionInfo = null;
 
     public WindowsOSVersionInfoEx() {
         this.versionInfo = new OSVERSIONINFOEX();

File: oshi-json/src/main/java/oshi/json/SystemInfo.java
Patch:
@@ -53,7 +53,7 @@ public class SystemInfo extends AbstractOshiJsonObject implements OshiJsonObject
 
     private HardwareAbstractionLayer hardware = null;
 
-    private JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
+    private transient JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
 
     /**
      * Primary entry point for OSHI API.

File: oshi-json/src/main/java/oshi/json/hardware/HWDiskStore.java
Patch:
@@ -43,7 +43,7 @@ public class HWDiskStore extends AbstractOshiJsonObject {
 
     private static final long serialVersionUID = 1L;
 
-    private JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
+    private transient JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
 
     private oshi.hardware.HWDiskStore hwDiskStore;
 

File: oshi-json/src/main/java/oshi/json/hardware/NetworkIF.java
Patch:
@@ -46,7 +46,7 @@ public class NetworkIF extends AbstractOshiJsonObject {
 
     private static final Logger LOG = LoggerFactory.getLogger(NetworkIF.class);
 
-    private JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
+    private transient JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
 
     private oshi.hardware.NetworkIF networkIf;
 

File: oshi-json/src/main/java/oshi/json/hardware/impl/CentralProcessorImpl.java
Patch:
@@ -39,7 +39,7 @@ public class CentralProcessorImpl extends AbstractOshiJsonObject implements Cent
 
     private static final long serialVersionUID = 1L;
 
-    private JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
+    private transient JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
 
     private oshi.hardware.CentralProcessor processor;
 

File: oshi-json/src/main/java/oshi/json/hardware/impl/DisplayImpl.java
Patch:
@@ -38,7 +38,7 @@ public class DisplayImpl extends AbstractOshiJsonObject implements Display {
 
     private static final long serialVersionUID = 1L;
 
-    private JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
+    private transient JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
 
     private oshi.hardware.Display display;
 

File: oshi-json/src/main/java/oshi/json/hardware/impl/GlobalMemoryImpl.java
Patch:
@@ -38,7 +38,7 @@ public class GlobalMemoryImpl extends AbstractOshiJsonObject implements GlobalMe
 
     private static final long serialVersionUID = 1L;
 
-    private JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
+    private transient JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
 
     private oshi.hardware.GlobalMemory memory;
 

File: oshi-json/src/main/java/oshi/json/hardware/impl/HardwareAbstractionLayerImpl.java
Patch:
@@ -47,7 +47,7 @@ public class HardwareAbstractionLayerImpl extends AbstractOshiJsonObject impleme
 
     private static final long serialVersionUID = 1L;
 
-    private JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
+    private transient JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
 
     private oshi.hardware.HardwareAbstractionLayer hal;
 

File: oshi-json/src/main/java/oshi/json/hardware/impl/PowerSourceImpl.java
Patch:
@@ -38,7 +38,7 @@ public class PowerSourceImpl extends AbstractOshiJsonObject implements PowerSour
 
     private static final long serialVersionUID = 1L;
 
-    private JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
+    private transient JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
 
     private oshi.hardware.PowerSource powerSource;
 

File: oshi-json/src/main/java/oshi/json/hardware/impl/SensorsImpl.java
Patch:
@@ -38,7 +38,7 @@ public class SensorsImpl extends AbstractOshiJsonObject implements Sensors {
 
     private static final long serialVersionUID = 1L;
 
-    private JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
+    private transient JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
 
     private oshi.hardware.Sensors sensors;
 

File: oshi-json/src/main/java/oshi/json/hardware/impl/UsbDeviceImpl.java
Patch:
@@ -38,7 +38,7 @@ public class UsbDeviceImpl extends AbstractOshiJsonObject implements UsbDevice {
 
     private static final long serialVersionUID = 1L;
 
-    private JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
+    private transient JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
 
     private oshi.hardware.UsbDevice usbDevice;
 

File: oshi-json/src/main/java/oshi/json/software/os/OSFileStore.java
Patch:
@@ -40,7 +40,7 @@ public class OSFileStore extends AbstractOshiJsonObject {
 
     private static final long serialVersionUID = 1L;
 
-    private JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
+    private transient JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
 
     private oshi.software.os.OSFileStore fileStore;
 

File: oshi-json/src/main/java/oshi/json/software/os/impl/FileSystemImpl.java
Patch:
@@ -40,7 +40,7 @@ public class FileSystemImpl extends AbstractOshiJsonObject implements FileSystem
 
     private static final long serialVersionUID = 1L;
 
-    private JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
+    private transient JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
 
     private oshi.software.os.FileSystem fileSystem;
 

File: oshi-json/src/main/java/oshi/json/software/os/impl/OSProcessImpl.java
Patch:
@@ -38,7 +38,7 @@ public class OSProcessImpl extends AbstractOshiJsonObject implements OSProcess {
 
     private static final long serialVersionUID = 1L;
 
-    private JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
+    private transient JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
 
     private oshi.software.os.OSProcess osProcess;
 

File: oshi-json/src/main/java/oshi/json/software/os/impl/OperatingSystemImpl.java
Patch:
@@ -43,7 +43,7 @@ public class OperatingSystemImpl extends AbstractOshiJsonObject implements Opera
 
     private static final long serialVersionUID = 1L;
 
-    private JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
+    private transient JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
 
     private oshi.software.os.OperatingSystem os;
 

File: oshi-json/src/main/java/oshi/json/software/os/impl/OperatingSystemVersionImpl.java
Patch:
@@ -38,7 +38,7 @@ public class OperatingSystemVersionImpl extends AbstractOshiJsonObject implement
 
     private static final long serialVersionUID = 1L;
 
-    private JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
+    private transient JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
 
     private oshi.software.os.OperatingSystemVersion version;
 

File: oshi-core/src/main/java/oshi/hardware/common/AbstractNetworks.java
Patch:
@@ -54,7 +54,7 @@ public NetworkIF[] getNetworks() {
                 if (!netint.isLoopback() && netint.getHardwareAddress() != null) {
                     NetworkIF netIF = new NetworkIF();
                     netIF.setNetworkInterface(netint);
-                    this.updateNetworkStats(netIF);
+                    netIF.updateNetworkStats();
                     result.add(netIF);
                 }
             }

File: oshi-json/src/main/java/oshi/json/util/PropertiesUtil.java
Patch:
@@ -105,6 +105,8 @@ public static String getString(Properties properties, String property) {
      *            The property to evaluate
      * @param enumClass
      *            The class of enum to return
+     * @param <T>
+     *            An enum type
      * @return The enum value if parseable, or null, otherwise
      */
     public static <T extends Enum<T>> T getEnum(Properties properties, String property, Class<T> enumClass) {

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacUsbDevice.java
Patch:
@@ -62,7 +62,7 @@ public MacUsbDevice(String name, String vendor, String vendorId, String productI
      */
     public static UsbDevice[] getUsbDevices(boolean tree) {
         UsbDevice[] devices = getUsbDevices();
-        if (!tree) {
+        if (tree) {
             return devices;
         }
         List<UsbDevice> deviceList = new ArrayList<>();

File: oshi-core/src/main/java/oshi/software/os/linux/LinuxOperatingSystem.java
Patch:
@@ -87,7 +87,8 @@ public OSProcess[] getProcesses(int limit, ProcessSort sort) {
                 procs.add(proc);
             }
         }
-        return processSort(procs, limit, sort).toArray(new OSProcess[procs.size()]);
+        List<OSProcess> sorted = processSort(procs, limit, sort);
+        return sorted.toArray(new OSProcess[sorted.size()]);
     }
 
     /**

File: oshi-core/src/main/java/oshi/software/os/windows/WindowsOperatingSystem.java
Patch:
@@ -70,7 +70,8 @@ public OSProcess[] getProcesses(int limit, ProcessSort sort) {
         Map<String, List<Object>> procs = WmiUtil.selectObjectsFrom(null, "Win32_Process", processProperties, null,
                 processPropertyTypes);
         List<OSProcess> procList = processMapToList(procs);
-        return processSort(procList, limit, sort).toArray(new OSProcess[procList.size()]);
+        List<OSProcess> sorted = processSort(procList, limit, sort);
+        return sorted.toArray(new OSProcess[sorted.size()]);
     }
 
     /**

File: oshi-json/src/main/java/oshi/json/hardware/CentralProcessor.java
Patch:
@@ -27,7 +27,7 @@
  * 
  * @author dblock[at]dblock[dot]org
  */
-public interface CentralProcessor extends oshi.hardware.CentralProcessor, OshiJsonObject {
+public interface CentralProcessor extends OshiJsonObject {
     /**
      * Processor vendor.
      * 

File: oshi-json/src/main/java/oshi/json/hardware/Display.java
Patch:
@@ -26,7 +26,7 @@
  * 
  * @author widdis[at]gmail[dot]com
  */
-public interface Display extends oshi.hardware.Display, OshiJsonObject {
+public interface Display extends OshiJsonObject {
     /**
      * The EDID byte array.
      * 

File: oshi-json/src/main/java/oshi/json/hardware/GlobalMemory.java
Patch:
@@ -30,7 +30,7 @@
  * 
  * @author dblock[at]dblock[dot]org
  */
-public interface GlobalMemory extends oshi.hardware.GlobalMemory, OshiJsonObject {
+public interface GlobalMemory extends OshiJsonObject {
     /**
      * The amount of actual physical memory, in bytes.
      * 

File: oshi-json/src/main/java/oshi/json/hardware/PowerSource.java
Patch:
@@ -26,7 +26,7 @@
  * 
  * @author widdis[at]gmail[dot]com
  */
-public interface PowerSource extends oshi.hardware.PowerSource, OshiJsonObject {
+public interface PowerSource extends OshiJsonObject {
     /**
      * Name of the power source (e.g., InternalBattery-0)
      * 

File: oshi-json/src/main/java/oshi/json/hardware/Sensors.java
Patch:
@@ -37,7 +37,7 @@
  * 
  * @author widdis[at]gmail[dot]com
  */
-public interface Sensors extends oshi.hardware.Sensors, OshiJsonObject {
+public interface Sensors extends OshiJsonObject {
     /**
      * CPU Temperature
      * 

File: oshi-json/src/main/java/oshi/json/hardware/UsbDevice.java
Patch:
@@ -27,7 +27,7 @@
  * 
  * @author widdis[at]gmail[dot]com
  */
-public interface UsbDevice extends oshi.hardware.UsbDevice, OshiJsonObject {
+public interface UsbDevice extends OshiJsonObject {
     /**
      * Name of the USB device
      * 

File: oshi-json/src/main/java/oshi/json/software/os/FileSystem.java
Patch:
@@ -27,7 +27,7 @@
  * 
  * @author widdis[at]gmail[dot]com
  */
-public interface FileSystem extends oshi.software.os.FileSystem, OshiJsonObject {
+public interface FileSystem extends OshiJsonObject {
 
     /**
      * Get file stores on this machine

File: oshi-json/src/main/java/oshi/json/software/os/OSProcess.java
Patch:
@@ -19,6 +19,7 @@
 package oshi.json.software.os;
 
 import oshi.json.json.OshiJsonObject;
+import oshi.software.os.OSProcess.State;
 
 /**
  * A process is an instance of a computer program that is being executed. It
@@ -28,7 +29,7 @@
  * 
  * @author widdis[at]gmail[dot]com
  */
-public interface OSProcess extends oshi.software.os.OSProcess, OshiJsonObject {
+public interface OSProcess extends OshiJsonObject {
 
     /**
      * @return Returns the name of the process.

File: oshi-json/src/main/java/oshi/json/software/os/OperatingSystemVersion.java
Patch:
@@ -20,7 +20,7 @@
 
 import oshi.json.json.OshiJsonObject;
 
-public interface OperatingSystemVersion extends oshi.software.os.OperatingSystemVersion, OshiJsonObject {
+public interface OperatingSystemVersion extends OshiJsonObject {
     /**
      * @return the version
      */

File: oshi-json/src/main/java/oshi/json/util/JsonUtil.java
Patch:
@@ -33,7 +33,7 @@
  * 
  * @author widdis[at]gmail[dot]com
  */
-public abstract class JsonUtil {
+public class JsonUtil {
     /**
      * Pretty print a JSON string.
      * 

File: oshi-core/src/main/java/oshi/hardware/common/AbstractHardwareAbstractionLayer.java
Patch:
@@ -77,5 +77,5 @@ public abstract class AbstractHardwareAbstractionLayer implements HardwareAbstra
      * {@inheritDoc}
      */
     @Override
-    public abstract UsbDevice[] getUsbDevices();
+    public abstract UsbDevice[] getUsbDevices(boolean tree);
 }

File: oshi-core/src/main/java/oshi/hardware/platform/linux/LinuxHardwareAbstractionLayer.java
Patch:
@@ -101,7 +101,7 @@ public NetworkIF[] getNetworkIFs() {
      * {@inheritDoc}
      */
     @Override
-    public UsbDevice[] getUsbDevices() {
-        return LinuxUsbDevice.getUsbDevices();
+    public UsbDevice[] getUsbDevices(boolean tree) {
+        return LinuxUsbDevice.getUsbDevices(tree);
     }
 }

File: oshi-core/src/main/java/oshi/hardware/platform/mac/MacHardwareAbstractionLayer.java
Patch:
@@ -101,7 +101,7 @@ public NetworkIF[] getNetworkIFs() {
      * {@inheritDoc}
      */
     @Override
-    public UsbDevice[] getUsbDevices() {
-        return MacUsbDevice.getUsbDevices();
+    public UsbDevice[] getUsbDevices(boolean tree) {
+        return MacUsbDevice.getUsbDevices(tree);
     }
 }

File: oshi-core/src/main/java/oshi/hardware/platform/windows/WindowsHardwareAbstractionLayer.java
Patch:
@@ -101,7 +101,7 @@ public NetworkIF[] getNetworkIFs() {
      * {@inheritDoc}
      */
     @Override
-    public UsbDevice[] getUsbDevices() {
-        return WindowsUsbDevice.getUsbDevices();
+    public UsbDevice[] getUsbDevices(boolean tree) {
+        return WindowsUsbDevice.getUsbDevices(tree);
     }
 }

File: oshi-core/src/test/java/oshi/SystemInfoTest.java
Patch:
@@ -358,7 +358,7 @@ public static void main(String[] args) {
         // Processes
         System.out.println("Processes: " + os.getProcessCount() + ", Threads: " + os.getThreadCount());
         // Sort by highest CPU
-        List<OSProcess> procs = Arrays.asList(os.getProcesses(5, ProcessSort.NAME));
+        List<OSProcess> procs = Arrays.asList(os.getProcesses(5, ProcessSort.CPU));
 
         System.out.println("   PID  %CPU %MEM       VSZ       RSS Name");
         for (int i = 0; i < procs.size() && i < 5; i++) {
@@ -463,7 +463,7 @@ public static void main(String[] args) {
         // hardware: USB devices
         LOG.info("Checking USB Devices...");
         System.out.println("USB Devices:");
-        for (UsbDevice usbDevice : hal.getUsbDevices()) {
+        for (UsbDevice usbDevice : hal.getUsbDevices(true)) {
             System.out.println(usbDevice.toString());
         }
     }

File: oshi-json/src/main/java/oshi/json/hardware/impl/HardwareAbstractionLayerImpl.java
Patch:
@@ -146,8 +146,8 @@ public Sensors getSensors() {
      * {@inheritDoc}
      */
     @Override
-    public UsbDevice[] getUsbDevices() {
-        oshi.hardware.UsbDevice[] usbs = this.hal.getUsbDevices();
+    public UsbDevice[] getUsbDevices(boolean tree) {
+        oshi.hardware.UsbDevice[] usbs = this.hal.getUsbDevices(tree);
         UsbDevice[] usbDevices = new UsbDevice[usbs.length];
         for (int i = 0; i < usbs.length; i++) {
             usbDevices[i] = new UsbDeviceImpl(usbs[i]);
@@ -177,7 +177,7 @@ public JsonObject toJSON() {
             displayArrayBuilder.add(display.toJSON());
         }
         JsonArrayBuilder usbDeviceArrayBuilder = jsonFactory.createArrayBuilder();
-        for (UsbDevice usbDevice : getUsbDevices()) {
+        for (UsbDevice usbDevice : getUsbDevices(true)) {
             usbDeviceArrayBuilder.add(usbDevice.toJSON());
         }
         return NullAwareJsonObjectBuilder.wrap(jsonFactory.createObjectBuilder())

File: oshi-json/src/test/java/oshi/json/SystemInfoTest.java
Patch:
@@ -359,7 +359,7 @@ public static void main(String[] args) {
         // Processes
         System.out.println("Processes: " + os.getProcessCount() + ", Threads: " + os.getThreadCount());
         // Sort by highest CPU
-        List<OSProcess> procs = Arrays.asList(os.getProcesses(5, ProcessSort.NAME));
+        List<OSProcess> procs = Arrays.asList(os.getProcesses(5, ProcessSort.CPU));
 
         System.out.println("   PID  %CPU %MEM       VSZ       RSS Name");
         for (int i = 0; i < procs.size() && i < 5; i++) {
@@ -464,7 +464,7 @@ public static void main(String[] args) {
         // hardware: USB devices
         LOG.info("Checking USB Devices...");
         System.out.println("USB Devices:");
-        for (UsbDevice usbDevice : hal.getUsbDevices()) {
+        for (UsbDevice usbDevice : hal.getUsbDevices(true)) {
             System.out.println(usbDevice.toString());
         }
 

File: src/main/java/oshi/hardware/platform/mac/MacDisplay.java
Patch:
@@ -82,9 +82,10 @@ public static Display[] getDisplays() {
                 }
             }
             // iterate
-            sdService = IOKit.INSTANCE.IOIteratorNext(sdService);
+            IOKit.INSTANCE.IOObjectRelease(sdService);
+            sdService = IOKit.INSTANCE.IOIteratorNext(serviceIterator.getValue());
         }
         IOKit.INSTANCE.IOObjectRelease(serviceIterator.getValue());
         return displays.toArray(new Display[displays.size()]);
     }
-}
\ No newline at end of file
+}

File: src/test/java/oshi/SystemInfoTest.java
Patch:
@@ -423,7 +423,7 @@ public int compare(OSProcess o1, OSProcess o2) {
         for (OSFileStore fs : fsArray) {
             long usable = fs.getUsableSpace();
             long total = fs.getTotalSpace();
-            System.out.format(" %s (%s) [%s] %s of %s free (%.1f%%)%n", fs.getName(),
+            System.out.format("(%s) %s (%s) [%s] %s of %s free (%.1f%%)%n", fs.getName(), fs.getMount(),
                     fs.getDescription().isEmpty() ? "file system" : fs.getDescription(), fs.getType(),
                     FormatUtil.formatBytes(usable), FormatUtil.formatBytes(fs.getTotalSpace()), 100d * usable / total);
         }

File: src/main/java/oshi/SystemInfo.java
Patch:
@@ -44,6 +44,9 @@
  * @author dblock[at]dblock[dot]org
  */
 public class SystemInfo implements OshiJsonObject {
+
+    private static final long serialVersionUID = 1L;
+
     private OperatingSystem _os = null;
 
     private HardwareAbstractionLayer _hardware = null;

File: src/main/java/oshi/hardware/HWDiskStore.java
Patch:
@@ -32,6 +32,8 @@
  */
 public class HWDiskStore implements OshiJsonObject {
 
+    private static final long serialVersionUID = 1L;
+
     private JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
 
     private String name;

File: src/main/java/oshi/hardware/NetworkIF.java
Patch:
@@ -43,6 +43,8 @@
  */
 public class NetworkIF implements OshiJsonObject {
 
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(NetworkIF.class);
 
     private JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);

File: src/main/java/oshi/hardware/common/AbstractCentralProcessor.java
Patch:
@@ -45,6 +45,8 @@
 @SuppressWarnings("restriction")
 public abstract class AbstractCentralProcessor implements CentralProcessor {
 
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(AbstractCentralProcessor.class);
 
     /**

File: src/main/java/oshi/hardware/common/AbstractDisks.java
Patch:
@@ -33,6 +33,9 @@
  * @author enrico[dot]bianchi[at]gmail[dot]com
  */
 public abstract class AbstractDisks implements Disks {
+
+    private static final long serialVersionUID = 1L;
+
     private JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
 
     @Override

File: src/main/java/oshi/hardware/common/AbstractDisplay.java
Patch:
@@ -33,6 +33,8 @@
  */
 public abstract class AbstractDisplay implements Display {
 
+    private static final long serialVersionUID = 1L;
+
     protected byte[] edid;
 
     private JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);

File: src/main/java/oshi/hardware/common/AbstractGlobalMemory.java
Patch:
@@ -33,6 +33,8 @@
  */
 public abstract class AbstractGlobalMemory implements GlobalMemory {
 
+    private static final long serialVersionUID = 1L;
+
     protected long memTotal = 0L;
     protected long memAvailable = 0L;
     protected long swapTotal = 0L;

File: src/main/java/oshi/hardware/common/AbstractHardwareAbstractionLayer.java
Patch:
@@ -36,6 +36,9 @@
 import oshi.software.os.OSFileStore;
 
 public abstract class AbstractHardwareAbstractionLayer implements HardwareAbstractionLayer {
+
+    private static final long serialVersionUID = 1L;
+
     protected CentralProcessor processor;
 
     protected GlobalMemory memory;

File: src/main/java/oshi/hardware/common/AbstractNetworks.java
Patch:
@@ -44,6 +44,8 @@
  */
 public abstract class AbstractNetworks implements Networks {
 
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(AbstractNetworks.class);
 
     private JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);

File: src/main/java/oshi/hardware/common/AbstractPowerSource.java
Patch:
@@ -32,6 +32,8 @@
  */
 public abstract class AbstractPowerSource implements PowerSource {
 
+    private static final long serialVersionUID = 1L;
+
     protected String name;
 
     protected double remainingCapacity;

File: src/main/java/oshi/hardware/common/AbstractSensors.java
Patch:
@@ -28,6 +28,8 @@
 
 public abstract class AbstractSensors implements Sensors {
 
+    private static final long serialVersionUID = 1L;
+
     private JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
 
     /**

File: src/main/java/oshi/hardware/platform/linux/LinuxBlockDevStats.java
Patch:
@@ -21,6 +21,7 @@
 import javax.json.Json;
 import javax.json.JsonBuilderFactory;
 import javax.json.JsonObject;
+
 import oshi.jna.platform.linux.Udev;
 import oshi.json.NullAwareJsonObjectBuilder;
 import oshi.json.OshiJsonObject;
@@ -32,6 +33,8 @@
  */
 public class LinuxBlockDevStats implements OshiJsonObject {
 
+    private static final long serialVersionUID = 1L;
+
     private JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
 
     public LinuxBlockDevStats(String device, Udev.UdevDevice disk) {

File: src/main/java/oshi/hardware/platform/linux/LinuxCentralProcessor.java
Patch:
@@ -50,6 +50,8 @@
  */
 public class LinuxCentralProcessor extends AbstractCentralProcessor {
 
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(LinuxCentralProcessor.class);
 
     /**

File: src/main/java/oshi/hardware/platform/linux/LinuxDisks.java
Patch:
@@ -34,6 +34,9 @@
  * @author enrico[dot]bianchi[at]gmail[dot]com
  */
 public class LinuxDisks extends AbstractDisks {
+
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(LinuxDisks.class);
 
     private final int SECTORSIZE = 512;

File: src/main/java/oshi/hardware/platform/linux/LinuxDisplay.java
Patch:
@@ -35,6 +35,9 @@
  * @author widdis[at]gmail[dot]com
  */
 public class LinuxDisplay extends AbstractDisplay {
+
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(LinuxDisplay.class);
 
     public LinuxDisplay(byte[] edid) {

File: src/main/java/oshi/hardware/platform/linux/LinuxGlobalMemory.java
Patch:
@@ -34,6 +34,8 @@
  */
 public class LinuxGlobalMemory extends AbstractGlobalMemory {
 
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(LinuxGlobalMemory.class);
 
     // Values read from /proc/meminfo used for other calculations

File: src/main/java/oshi/hardware/platform/linux/LinuxHardwareAbstractionLayer.java
Patch:
@@ -32,6 +32,8 @@
 
 public class LinuxHardwareAbstractionLayer extends AbstractHardwareAbstractionLayer {
 
+    private static final long serialVersionUID = 1L;
+
     /**
      * {@inheritDoc}
      */

File: src/main/java/oshi/hardware/platform/linux/LinuxNetworks.java
Patch:
@@ -27,6 +27,8 @@
  */
 public class LinuxNetworks extends AbstractNetworks {
 
+    private static final long serialVersionUID = 1L;
+
     /**
      * {@inheritDoc}
      */

File: src/main/java/oshi/hardware/platform/linux/LinuxPowerSource.java
Patch:
@@ -35,6 +35,9 @@
  * @author widdis[at]gmail[dot]com
  */
 public class LinuxPowerSource extends AbstractPowerSource {
+
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(LinuxPowerSource.class);
 
     private static final String PS_PATH = "/sys/class/power_supply/";

File: src/main/java/oshi/hardware/platform/linux/LinuxSensors.java
Patch:
@@ -31,6 +31,9 @@
 import oshi.util.FileUtil;
 
 public class LinuxSensors extends AbstractSensors {
+
+    private static final long serialVersionUID = 1L;
+
     // Possible sensor types. See sysfs documentation for others, e.g. current
     private static final String TEMP = "temp";
     private static final String FAN = "fan";

File: src/main/java/oshi/hardware/platform/mac/MacCentralProcessor.java
Patch:
@@ -55,6 +55,9 @@
  * @author widdis[at]gmail[dot]com
  */
 public class MacCentralProcessor extends AbstractCentralProcessor {
+
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(MacCentralProcessor.class);
 
     private int maxProc = 1024;

File: src/main/java/oshi/hardware/platform/mac/MacDisks.java
Patch:
@@ -49,6 +49,9 @@
  * @author enrico[dot]bianchi[at]gmail[dot]com
  */
 public class MacDisks extends AbstractDisks {
+
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(MacDisks.class);
 
     private static final CFStringRef cfModel = CFStringRef.toCFString("Model");

File: src/main/java/oshi/hardware/platform/mac/MacDisplay.java
Patch:
@@ -42,6 +42,9 @@
  * @author widdis[at]gmail[dot]com
  */
 public class MacDisplay extends AbstractDisplay {
+
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(MacDisplay.class);
 
     private static final CFStringRef cfEdid = CFStringRef.toCFString("IODisplayEDID");

File: src/main/java/oshi/hardware/platform/mac/MacGlobalMemory.java
Patch:
@@ -37,6 +37,9 @@
  * @author widdis[at]gmail[dot]com
  */
 public class MacGlobalMemory extends AbstractGlobalMemory {
+
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(MacGlobalMemory.class);
 
     private XswUsage xswUsage = new XswUsage();

File: src/main/java/oshi/hardware/platform/mac/MacHardwareAbstractionLayer.java
Patch:
@@ -32,6 +32,8 @@
 
 public class MacHardwareAbstractionLayer extends AbstractHardwareAbstractionLayer {
 
+    private static final long serialVersionUID = 1L;
+
     /**
      * {@inheritDoc}
      */

File: src/main/java/oshi/hardware/platform/mac/MacNetworks.java
Patch:
@@ -39,6 +39,8 @@
  */
 public class MacNetworks extends AbstractNetworks {
 
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(MacNetworks.class);
 
     private static int CTL_NET = 4;

File: src/main/java/oshi/hardware/platform/mac/MacPowerSource.java
Patch:
@@ -42,6 +42,9 @@
  * @author widdis[at]gmail[dot]com
  */
 public class MacPowerSource extends AbstractPowerSource {
+
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(MacPowerSource.class);
 
     public MacPowerSource(String newName, double newRemainingCapacity, double newTimeRemaining) {

File: src/main/java/oshi/hardware/platform/mac/MacSensors.java
Patch:
@@ -25,6 +25,9 @@
 import oshi.util.platform.mac.SmcUtil;
 
 public class MacSensors extends AbstractSensors {
+
+    private static final long serialVersionUID = 1L;
+
     // Store some things to throttle SMC queries
     private double lastTemp = 0d;
 

File: src/main/java/oshi/hardware/platform/windows/WindowsCentralProcessor.java
Patch:
@@ -54,6 +54,9 @@
  * @author widdis[at]gmail[dot]com
  */
 public class WindowsCentralProcessor extends AbstractCentralProcessor {
+
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(WindowsCentralProcessor.class);
 
     // PDH counters only give increments between calls so we maintain our own

File: src/main/java/oshi/hardware/platform/windows/WindowsDisks.java
Patch:
@@ -33,6 +33,8 @@
  */
 public class WindowsDisks extends AbstractDisks {
 
+    private static final long serialVersionUID = 1L;
+
     @Override
     public HWDiskStore[] getDisks() {
         List<HWDiskStore> result;

File: src/main/java/oshi/hardware/platform/windows/WindowsDisplay.java
Patch:
@@ -43,6 +43,9 @@
  * @author widdis[at]gmail[dot]com
  */
 public class WindowsDisplay extends AbstractDisplay {
+
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(WindowsDisplay.class);
 
     public WindowsDisplay(byte[] edid) {

File: src/main/java/oshi/hardware/platform/windows/WindowsGlobalMemory.java
Patch:
@@ -36,6 +36,9 @@
  * @author dblock[at]dblock[dot]org
  */
 public class WindowsGlobalMemory extends AbstractGlobalMemory {
+
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(WindowsGlobalMemory.class);
 
     private PERFORMANCE_INFORMATION perfInfo = new PERFORMANCE_INFORMATION();

File: src/main/java/oshi/hardware/platform/windows/WindowsHardwareAbstractionLayer.java
Patch:
@@ -32,6 +32,8 @@
 
 public class WindowsHardwareAbstractionLayer extends AbstractHardwareAbstractionLayer {
 
+    private static final long serialVersionUID = 1L;
+
     /**
      * {@inheritDoc}
      */

File: src/main/java/oshi/hardware/platform/windows/WindowsNetworks.java
Patch:
@@ -30,6 +30,9 @@
  * @author widdis[at]gmail[dot]com
  */
 public class WindowsNetworks extends AbstractNetworks {
+
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(WindowsNetworks.class);
 
     /**

File: src/main/java/oshi/hardware/platform/windows/WindowsPowerSource.java
Patch:
@@ -35,6 +35,9 @@
  * @author widdis[at]gmail[dot]com
  */
 public class WindowsPowerSource extends AbstractPowerSource {
+
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(WindowsPowerSource.class);
 
     public WindowsPowerSource(String newName, double newRemainingCapacity, double newTimeRemaining) {

File: src/main/java/oshi/hardware/platform/windows/WindowsSensors.java
Patch:
@@ -26,6 +26,8 @@
 
 public class WindowsSensors extends AbstractSensors {
 
+    private static final long serialVersionUID = 1L;
+
     // If null, haven't attempted OHM.
     private String tempIdentifierStr = null;
     // Successful (?) WMI namespace, path and property

File: src/main/java/oshi/json/OshiJsonObject.java
Patch:
@@ -18,9 +18,11 @@
  */
 package oshi.json;
 
+import java.io.Serializable;
+
 import javax.json.JsonObject;
 
-public interface OshiJsonObject {
+public interface OshiJsonObject extends Serializable {
     /**
      * Creates a compact JSON string containing the information for this class
      * 

File: src/main/java/oshi/software/common/AbstractFileSystem.java
Patch:
@@ -35,6 +35,8 @@
  */
 public abstract class AbstractFileSystem implements FileSystem {
 
+    private static final long serialVersionUID = 1L;
+
     private JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
 
     /**

File: src/main/java/oshi/software/common/AbstractOSVersionInfoEx.java
Patch:
@@ -32,6 +32,8 @@
  */
 public class AbstractOSVersionInfoEx implements OperatingSystemVersion {
 
+    private static final long serialVersionUID = 1L;
+
     protected String version;
 
     protected String codeName;

File: src/main/java/oshi/software/common/AbstractOperatingSystem.java
Patch:
@@ -28,6 +28,8 @@
 
 public abstract class AbstractOperatingSystem implements OperatingSystem {
 
+    private static final long serialVersionUID = 1L;
+
     protected String manufacturer;
     protected String family;
     protected OperatingSystemVersion version;

File: src/main/java/oshi/software/common/AbstractProcess.java
Patch:
@@ -35,6 +35,8 @@
  */
 public class AbstractProcess implements OSProcess {
 
+    private static final long serialVersionUID = 1L;
+
     private JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
 
     protected String name;

File: src/main/java/oshi/software/os/OSFileStore.java
Patch:
@@ -34,6 +34,8 @@
  */
 public class OSFileStore implements OshiJsonObject {
 
+    private static final long serialVersionUID = 1L;
+
     private JsonBuilderFactory jsonFactory = Json.createBuilderFactory(null);
 
     private String name;

File: src/main/java/oshi/software/os/linux/LinuxFileSystem.java
Patch:
@@ -44,6 +44,8 @@
  */
 public class LinuxFileSystem extends AbstractFileSystem {
 
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(LinuxFileSystem.class);
 
     // Linux defines a set of virtual file systems

File: src/main/java/oshi/software/os/linux/LinuxOSVersionInfoEx.java
Patch:
@@ -28,6 +28,8 @@
 
 public class LinuxOSVersionInfoEx extends AbstractOSVersionInfoEx {
 
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(LinuxOSVersionInfoEx.class);
 
     public LinuxOSVersionInfoEx() {

File: src/main/java/oshi/software/os/linux/LinuxOperatingSystem.java
Patch:
@@ -36,6 +36,8 @@
  */
 public class LinuxOperatingSystem extends AbstractOperatingSystem {
 
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(LinuxOperatingSystem.class);
 
     private List<String> osRelease;

File: src/main/java/oshi/software/os/linux/LinuxProcess.java
Patch:
@@ -39,6 +39,9 @@
  * @author widdis[at]gmail[dot]com
  */
 public class LinuxProcess extends AbstractProcess {
+
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(LinuxProcess.class);
 
     /**

File: src/main/java/oshi/software/os/mac/MacFileSystem.java
Patch:
@@ -49,6 +49,8 @@
  */
 public class MacFileSystem extends AbstractFileSystem {
 
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(MacFileSystem.class);
 
     // Regexp matcher for /dev/disk1 etc.

File: src/main/java/oshi/software/os/mac/MacOSVersionInfoEx.java
Patch:
@@ -25,6 +25,9 @@
 import oshi.util.platform.mac.SysctlUtil;
 
 public class MacOSVersionInfoEx extends AbstractOSVersionInfoEx {
+
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(MacOSVersionInfoEx.class);
 
     public MacOSVersionInfoEx() {

File: src/main/java/oshi/software/os/mac/MacOperatingSystem.java
Patch:
@@ -22,6 +22,8 @@
 
 public class MacOperatingSystem extends AbstractOperatingSystem {
 
+    private static final long serialVersionUID = 1L;
+
     public MacOperatingSystem() {
         this.manufacturer = "Apple";
         this.family = System.getProperty("os.name");

File: src/main/java/oshi/software/os/mac/MacProcess.java
Patch:
@@ -30,6 +30,8 @@
  * @author widdis[at]gmail[dot]com
  */
 public class MacProcess extends AbstractProcess {
+
+    private static final long serialVersionUID = 1L;
     /*
      * OS X States:
      */

File: src/main/java/oshi/software/os/windows/WindowsFileSystem.java
Patch:
@@ -44,6 +44,8 @@
  */
 public class WindowsFileSystem extends AbstractFileSystem {
 
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(WindowsFileSystem.class);
 
     public WindowsFileSystem() {

File: src/main/java/oshi/software/os/windows/WindowsOSVersionInfoEx.java
Patch:
@@ -36,6 +36,9 @@
 import oshi.software.common.AbstractOSVersionInfoEx;
 
 public class WindowsOSVersionInfoEx extends AbstractOSVersionInfoEx {
+
+    private static final long serialVersionUID = 1L;
+
     private static final Logger LOG = LoggerFactory.getLogger(WindowsOSVersionInfoEx.class);
 
     private OSVERSIONINFOEX versionInfo = null;

File: src/main/java/oshi/software/os/windows/WindowsOperatingSystem.java
Patch:
@@ -22,6 +22,8 @@
 
 public class WindowsOperatingSystem extends AbstractOperatingSystem {
 
+    private static final long serialVersionUID = 1L;
+
     public WindowsOperatingSystem() {
         this.manufacturer = "Microsoft";
         this.family = "Windows";

File: src/main/java/oshi/software/os/windows/WindowsProcess.java
Patch:
@@ -30,6 +30,9 @@
  * @author widdis[at]gmail[dot]com
  */
 public class WindowsProcess extends AbstractProcess {
+
+    private static final long serialVersionUID = 1L;
+
     /*
      * Windows Execution States:
      */

File: src/main/java/oshi/hardware/platform/windows/WindowsCentralProcessor.java
Patch:
@@ -19,7 +19,6 @@
 package oshi.hardware.platform.windows;
 
 import java.util.ArrayList;
-import java.util.Date;
 import java.util.List;
 import java.util.Map;
 
@@ -427,7 +426,7 @@ private List<OSProcess> processMapToList(Map<String, List<Object>> procs) {
                                 // Kernel and User time units are 100ns
                                 Long.parseLong((String) procs.get("KernelModeTime").get(p)) / 10000L,
                                 Long.parseLong((String) procs.get("UserModeTime").get(p)) / 10000L,
-                                ((Date) procs.get("CreationDate").get(p)).getTime(), now));
+                                ((Long) procs.get("CreationDate").get(p)), now));
             } catch (NumberFormatException nfe) {
                 // Ignore errors, just don't add
                 LOG.debug("Parse Exception");

File: src/test/java/oshi/util/ParseUtilTest.java
Patch:
@@ -112,7 +112,7 @@ public void testByteArrayToFloat() {
      */
     @Test
     public void testCimDateTimeToDate() {
-        assertEquals(ParseUtil.cimDateTimeToDate("20160513072950.782000-420").getTime(), 1463149790782L);
+        assertEquals(1463149790782L, ParseUtil.cimDateTimeToMillis("20160513072950.782000-420"));
     }
 
 }

File: src/main/java/oshi/hardware/platform/windows/WindowsDisks.java
Patch:
@@ -37,7 +37,8 @@ public HWDiskStore[] getDisks() {
         List<HWDiskStore> result;
         result = new ArrayList<>();
 
-        Map<String, List<String>> vals = WmiUtil.getStrValues("DiskDrive", "Name,Manufacturer,Model,SerialNumber,Size");
+        Map<String, List<String>> vals = WmiUtil.selectStringsFrom(null, "Win32_DiskDrive",
+                "Name,Manufacturer,Model,SerialNumber,Size", null);
         for (int i = 0; i < vals.get("Name").size(); i++) {
             HWDiskStore ds = new HWDiskStore();
             ds.setName(vals.get("Name").get(i));

File: src/main/java/oshi/software/os/mac/MacOperatingSystem.java
Patch:
@@ -18,7 +18,6 @@
 package oshi.software.os.mac;
 
 import oshi.software.common.AbstractOperatingSystem;
-import oshi.util.platform.mac.SysctlUtil;
 
 public class MacOperatingSystem extends AbstractOperatingSystem {
 

File: src/main/java/oshi/hardware/common/AbstractNetworks.java
Patch:
@@ -56,7 +56,7 @@ public NetworkIF[] getNetworks() {
         try {
             Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
             for (NetworkInterface netint : Collections.list(interfaces)) {
-                if (!netint.isLoopback()) {
+                if (!netint.isLoopback() && netint.getHardwareAddress() != null) {
                     NetworkIF netIF = new NetworkIF();
                     netIF.setNetworkInterface(netint);
                     this.updateNetworkStats(netIF);

File: src/main/java/oshi/jna/platform/mac/IOKit.java
Patch:
@@ -25,6 +25,7 @@
 import com.sun.jna.Structure;
 import com.sun.jna.ptr.IntByReference;
 
+import oshi.jna.platform.mac.CoreFoundation.CFAllocatorRef;
 import oshi.jna.platform.mac.CoreFoundation.CFArrayRef;
 import oshi.jna.platform.mac.CoreFoundation.CFDictionaryRef;
 import oshi.jna.platform.mac.CoreFoundation.CFMutableDictionaryRef;
@@ -174,4 +175,6 @@ class MachPort extends IntByReference {
     // Requires OS X 10.5+
     int IOConnectCallStructMethod(int connection, int selector, Structure inputStructure, int structureInputSize,
             Structure outputStructure, IntByReference structureOutputSize);
+
+    CFTypeRef IORegistryEntryCreateCFProperty(int entry, CFStringRef key, CFAllocatorRef allocator, int options);
 }

File: src/main/java/oshi/hardware/Disks.java
Patch:
@@ -31,5 +31,5 @@ public interface Disks extends OshiJsonObject {
      * 
      * @return Array of {@link HWDiskStore} objects
      */
-    public HWDiskStore[] getDisks();
+    HWDiskStore[] getDisks();
 }

File: src/main/java/oshi/hardware/common/AbstractCentralProcessor.java
Patch:
@@ -362,7 +362,7 @@ public synchronized double getSystemCpuLoadBetweenTicks() {
         long idle = curTicks[3] - prevTicks[3];
         LOG.trace("Total ticks: {}  Idle ticks: {}", total, idle);
 
-        return (total > 0 && idle >= 0) ? (double) (total - idle) / total : 0d;
+        return total > 0 && idle >= 0 ? (double) (total - idle) / total : 0d;
     }
 
     /**
@@ -454,7 +454,7 @@ public double[] getProcessorCpuLoadBetweenTicks() {
             long idle = this.curProcTicks[cpu][3] - this.prevProcTicks[cpu][3];
             LOG.trace("CPU: {}  Total ticks: {}  Idle ticks: {}", cpu, total, idle);
             // update
-            load[cpu] = (total > 0 && idle >= 0) ? (double) (total - idle) / total : 0d;
+            load[cpu] = total > 0 && idle >= 0 ? (double) (total - idle) / total : 0d;
         }
         return load;
     }

File: src/main/java/oshi/hardware/platform/linux/LinuxSensors.java
Patch:
@@ -115,7 +115,7 @@ public int[] getFanSpeeds() {
                     }
                     speeds.add(rpm);
                 }
-                // Already readed all data for current fan, we reads next fan
+                // Done reading data for current fan, read next fan
                 fan++;
             }
             int[] fanSpeeds = new int[speeds.size()];

File: src/main/java/oshi/hardware/platform/windows/WindowsDisks.java
Patch:
@@ -48,6 +48,8 @@ public HWDiskStore[] getDisks() {
                 ds.setSize(Long.parseLong(vals.get("Size").get(i)));
             } catch (NumberFormatException e) {
                 // If we failed to parse, give up
+                // This is expected for an empty string on some drives
+                ds.setSize(0L);
             }
             result.add(ds);
         }

File: src/main/java/oshi/hardware/platform/windows/WindowsDisplay.java
Patch:
@@ -59,7 +59,7 @@ public static Display[] getDisplays() {
 
         Guid.GUID monitorGuid = new Guid.GUID("E6F07B5F-EE97-4a90-B076-33F57BF4EAA7");
         WinNT.HANDLE hDevInfo = SetupApi.INSTANCE.SetupDiGetClassDevs(monitorGuid, null, null,
-                (SetupApi.DIGCF_PRESENT | SetupApi.DIGCF_DEVICEINTERFACE));
+                SetupApi.DIGCF_PRESENT | SetupApi.DIGCF_DEVICEINTERFACE);
         if (!hDevInfo.equals(WinNT.INVALID_HANDLE_VALUE)) {
             SP_DEVICE_INTERFACE_DATA deviceInterfaceData = new SetupApi.SP_DEVICE_INTERFACE_DATA();
             deviceInterfaceData.cbSize = deviceInterfaceData.size();

File: src/main/java/oshi/hardware/platform/windows/WindowsSensors.java
Patch:
@@ -82,7 +82,7 @@ public double getCpuTemperature() {
         }
         // Convert K to C and return result
         if (tempK > 0) {
-            tempC = (tempK / 10d) - 273.15;
+            tempC = tempK / 10d - 273.15;
         }
         if (tempC <= 0d) {
             // Unable to get temperature via WMI. Future attempts will be

File: src/main/java/oshi/jna/platform/linux/Libc.java
Patch:
@@ -33,9 +33,9 @@
  */
 public interface Libc extends Library {
 
-    static final Libc INSTANCE = (Libc) Native.loadLibrary("c", Libc.class);
+    Libc INSTANCE = (Libc) Native.loadLibrary("c", Libc.class);
 
-    static final class Sysinfo extends Structure {
+    class Sysinfo extends Structure {
         public NativeLong uptime; // Seconds since boot
         // 1, 5, and 15 minute load averages
 

File: src/main/java/oshi/jna/platform/mac/CoreFoundation.java
Patch:
@@ -33,7 +33,7 @@
 public interface CoreFoundation extends Library {
     CoreFoundation INSTANCE = (CoreFoundation) Native.loadLibrary("CoreFoundation", CoreFoundation.class);
 
-    static final int UTF_8 = 0x08000100;
+    int UTF_8 = 0x08000100;
 
     int CFArrayGetCount(CFArrayRef array);
 

File: src/main/java/oshi/jna/platform/windows/Kernel32.java
Patch:
@@ -62,7 +62,7 @@ public interface Kernel32 extends com.sun.jna.platform.win32.Kernel32 {
      */
     long GetTickCount64();
 
-    public static final int SEM_FAILCRITICALERRORS = 0x0001;
+    int SEM_FAILCRITICALERRORS = 0x0001;
 
     /**
      * Controls whether the system will handle the specified types of serious

File: src/main/java/oshi/jna/platform/windows/PowrProf.java
Patch:
@@ -35,9 +35,9 @@
 public interface PowrProf extends Library {
     PowrProf INSTANCE = (PowrProf) Native.loadLibrary("PowrProf", PowrProf.class);
 
-    static int SYSTEM_BATTERY_STATE = 5;
+    int SYSTEM_BATTERY_STATE = 5;
 
-    static class SystemBatteryState extends Structure {
+    class SystemBatteryState extends Structure {
         public byte acOnLine; // boolean
 
         public byte batteryPresent; // boolean

File: src/main/java/oshi/jna/platform/windows/Psapi.java
Patch:
@@ -35,7 +35,7 @@ public interface Psapi extends com.sun.jna.platform.win32.Psapi {
     Psapi INSTANCE = (Psapi) Native.loadLibrary("Psapi", Psapi.class);
 
     // TODO: Submit this change to JNA Psapi class
-    static class PERFORMANCE_INFORMATION extends Structure {
+    class PERFORMANCE_INFORMATION extends Structure {
         public DWORD cb;
         public SIZE_T CommitTotal;
         public SIZE_T CommitLimit;

File: src/main/java/oshi/json/OshiJsonObject.java
Patch:
@@ -25,5 +25,5 @@ public interface OshiJsonObject {
      * 
      * @return a compact JSON string
      */
-    public JsonObject toJSON();
+    JsonObject toJSON();
 }

File: src/main/java/oshi/software/os/FileSystem.java
Patch:
@@ -26,5 +26,5 @@ public interface FileSystem extends OshiJsonObject {
      * 
      * @return Array of {@link OSFileStore} objects
      */
-    public OSFileStore[] getFileStores();
+    OSFileStore[] getFileStores();
 }

File: src/main/java/oshi/software/os/windows/WindowsFileSystem.java
Patch:
@@ -78,7 +78,7 @@ public List<OSFileStore> doInBackground() {
                         }
                         char[] fstype = new char[16];
                         if (Kernel32.INSTANCE.GetVolumeInformation(path, null, 0, null, null, null, fstype, 16)) {
-                            type = (new String(fstype)).trim();
+                            type = new String(fstype).trim();
                         }
                     } catch (IOException e) {
                         LOG.error("Could not get canonical path for {}", f.toString());

File: src/main/java/oshi/util/EdidUtil.java
Patch:
@@ -143,7 +143,7 @@ public static String getVersion(byte[] edid) {
      */
     public static boolean isDigital(byte[] edid) {
         // Byte 20 is Video input params
-        return (1 == edid[20] >> 7);
+        return 1 == edid[20] >> 7;
     }
 
     /**

File: src/main/java/oshi/hardware/platform/windows/WindowsGlobalMemory.java
Patch:
@@ -71,7 +71,7 @@ protected void updateMeminfo() {
         if (now - this.lastUpdate > 100) {
             if (!Psapi.INSTANCE.GetPerformanceInfo(perfInfo, perfInfo.size())) {
                 LOG.error("Failed to get Performance Info. Error code: {}", Kernel32.INSTANCE.GetLastError());
-                this.perfInfo = null;
+                return;
             }
             this.memAvailable = perfInfo.PageSize.longValue() * perfInfo.PhysicalAvailable.longValue();
             this.memTotal = perfInfo.PageSize.longValue() * perfInfo.PhysicalTotal.longValue();

File: src/main/java/oshi/jna/platform/mac/IOKit.java
Patch:
@@ -62,8 +62,6 @@ public interface IOKit extends Library {
 
     static final int KERNEL_INDEX_SMC = 2;
 
-    static final byte[] DATATYPE_SP78 = { (byte) 's', (byte) 'p', (byte) '7', (byte) '8', 0 };
-
     /**
      * Holds the return value of SMC version query.
      */

File: src/main/java/oshi/software/os/linux/LinuxOperatingSystem.java
Patch:
@@ -106,7 +106,7 @@ public boolean accept(File dir, String name) {
                         || name.endsWith("_version"));
             }
         });
-        if (files.length > 0) {
+        if (files != null && files.length > 0) {
             return files[0].getPath();
         }
         if ((new File("/etc/release")).exists()) {

File: src/main/java/oshi/software/os/mac/MacFileSystem.java
Patch:
@@ -80,7 +80,7 @@ public OSFileStore[] getFileStores() {
         FileSystemView fsv = FileSystemView.getFileSystemView();
         // Mac file systems are mounted in /Volumes
         File volumes = new File("/Volumes");
-        if (volumes.listFiles() != null) {
+        if (volumes != null) {
             for (File f : volumes.listFiles()) {
                 // Everyone hates DS Store
                 if (f.getName().endsWith(".DS_Store")) {

File: src/test/java/oshi/util/ParseUtilTest.java
Patch:
@@ -48,8 +48,8 @@ public void testParseHertz() {
      */
     @Test
     public void testParseString() {
-        assertEquals(1, ParseUtil.parseString("foo : 1", 0));
-        assertEquals(2, ParseUtil.parseString("foo", 2));
+        assertEquals(1, ParseUtil.parseLastElementOfStringToInt("foo : 1", 0));
+        assertEquals(2, ParseUtil.parseLastElementOfStringToInt("foo", 2));
     }
 
     /**

File: src/main/java/oshi/hardware/platform/linux/LinuxSensors.java
Patch:
@@ -115,6 +115,8 @@ public int[] getFanSpeeds() {
                     }
                     speeds.add(rpm);
                 }
+                // Already readed all data for current fan, we reads next fan
+                fan++;
             }
             int[] fanSpeeds = new int[speeds.size()];
             for (int i = 0; i < speeds.size(); i++) {

File: src/main/java/oshi/hardware/platform/mac/MacSensors.java
Patch:
@@ -77,7 +77,7 @@ public int[] getFanSpeeds() {
         if (System.currentTimeMillis() - this.lastFanSpeedsTime > 900) {
             // If we don't have fan # try to get it
             if (this.numFans == 0) {
-                this.numFans = SmcUtil.smcGetInt(IOKit.SMC_KEY_FAN_NUM, 50);
+                this.numFans = (int) SmcUtil.smcGetLong(IOKit.SMC_KEY_FAN_NUM, 50);
                 this.lastFanSpeeds = new int[this.numFans];
             }
             for (int i = 0; i < this.numFans; i++) {

File: src/main/java/oshi/hardware/HardwareAbstractionLayer.java
Patch:
@@ -67,7 +67,7 @@ public interface HardwareAbstractionLayer extends OshiJsonObject {
      * @return An array of HWDiskStore objects or an empty array if none are
      *         present.
      */
-    HWDiskStore[] getDisksStores();
+    HWDiskStore[] getDiskStores();
     
     /**
      * Instantiates an array of {@link Display} objects, representing monitors

File: src/main/java/oshi/hardware/platform/windows/WindowsHardwareAbstractionLayer.java
Patch:
@@ -68,7 +68,7 @@ public OSFileStore[] getFileStores() {
     }
     
     @Override
-    public HWDiskStore[] getDisksStores() {
+    public HWDiskStore[] getDiskStores() {
         return new WindowsDisks().getDisks();
     }
 

File: src/main/java/oshi/software/os/linux/LinuxOSVersionInfoEx.java
Patch:
@@ -105,16 +105,16 @@ private void init(List<String> osRelease) {
             String vers = null;
             String[] split = osRelease.get(0).split("release");
             if (split.length > 1) {
-                vers = split[0].trim();
+                vers = split[1].trim();
             } else {
                 split = osRelease.get(0).split("VERSION");
                 if (split.length > 1) {
-                    vers = split[0].trim();
+                    vers = split[1].trim();
                 }
             }
             if (vers != null) {
                 // Get part before parenthesis
-                split = vers.split("(");
+                split = vers.split("\\(");
                 if (split.length > 1) {
                     vers = split[0];
                 }

File: src/main/java/oshi/hardware/HardwareAbstractionLayer.java
Patch:
@@ -57,6 +57,8 @@ public interface HardwareAbstractionLayer
 
     /**
      * Instantiates an array of {@link Display} objects, representing monitors or other video output devices.
+     * 
+     * @return An array of Display objects or an empty array if none are present.
      */
     Display[] getDisplays();
 }

File: src/main/java/oshi/hardware/platform/linux/LinuxCentralProcessor.java
Patch:
@@ -297,7 +297,7 @@ public String getIdentifier()
         if ( this.cpuIdentifier == null )
         {
             StringBuilder sb = new StringBuilder();
-            if ( getVendor().contentEquals( "GenuineIntel" ) )
+            if ( getVendor() != null && getVendor().contentEquals( "GenuineIntel" ) )
             {
                 sb.append( isCpu64bit() ? "Intel64" : "x86" );
             }

File: src/main/java/oshi/util/ExecutingCommand.java
Patch:
@@ -50,7 +50,7 @@ public static ArrayList<String> runNative( String cmdToRun )
     /**
      * Executes a command on the native command line and returns the result.
      * 
-     * @param cmdToRun Command to run and args, in an array
+     * @param cmdToRunWithArgs Command to run and args, in an array
      * @return A list of Strings representing the result of the command
      */
     public static ArrayList<String> runNative( String[] cmdToRunWithArgs )

File: src/main/java/oshi/hardware/HardwareAbstractionLayer.java
Patch:
@@ -57,6 +57,8 @@ public interface HardwareAbstractionLayer
 
     /**
      * Instantiates an array of {@link Display} objects, representing monitors or other video output devices.
+     * 
+     * @return An array of Display objects or an empty array if none are present.
      */
     Display[] getDisplays();
 }

File: src/main/java/oshi/hardware/platform/linux/LinuxCentralProcessor.java
Patch:
@@ -297,7 +297,7 @@ public String getIdentifier()
         if ( this.cpuIdentifier == null )
         {
             StringBuilder sb = new StringBuilder();
-            if ( getVendor().contentEquals( "GenuineIntel" ) )
+            if ( getVendor() != null && getVendor().contentEquals( "GenuineIntel" ) )
             {
                 sb.append( isCpu64bit() ? "Intel64" : "x86" );
             }

File: src/main/java/oshi/util/ExecutingCommand.java
Patch:
@@ -50,7 +50,7 @@ public static ArrayList<String> runNative( String cmdToRun )
     /**
      * Executes a command on the native command line and returns the result.
      * 
-     * @param cmdToRun Command to run and args, in an array
+     * @param cmdToRunWithArgs Command to run and args, in an array
      * @return A list of Strings representing the result of the command
      */
     public static ArrayList<String> runNative( String[] cmdToRunWithArgs )

File: src/main/java/oshi/PlatformEnum.java
Patch:
@@ -22,5 +22,5 @@
  * @author alessandro[at]perucchi[dot]org
  */
 public enum PlatformEnum {
-	WINDOWS, LINUX, MACOSX, UNKNOWN;
+    WINDOWS, LINUX, MACOSX, UNKNOWN;
 }

File: src/main/java/oshi/software/os/OperatingSystemVersion.java
Patch:
@@ -22,5 +22,5 @@
  * @author dblock[at]dblock[dot]org
  */
 public interface OperatingSystemVersion {
-	// TODO Build this out
+    // TODO Build this out
 }

File: src/main/java/oshi/software/os/Process.java
Patch:
@@ -25,5 +25,5 @@
  * @author dblock[at]dblock[dot]org
  */
 public interface Process {
-	// TODO Build this out
+    // TODO Build this out
 }

File: src/main/java/oshi/PlatformEnum.java
Patch:
@@ -22,5 +22,5 @@
  * @author alessandro[at]perucchi[dot]org
  */
 public enum PlatformEnum {
-	WINDOWS, LINUX, MACOSX, UNKNOWN;
+    WINDOWS, LINUX, MACOSX, UNKNOWN;
 }

File: src/main/java/oshi/software/os/OperatingSystemVersion.java
Patch:
@@ -22,5 +22,5 @@
  * @author dblock[at]dblock[dot]org
  */
 public interface OperatingSystemVersion {
-	// TODO Build this out
+    // TODO Build this out
 }

File: src/main/java/oshi/software/os/Process.java
Patch:
@@ -25,5 +25,5 @@
  * @author dblock[at]dblock[dot]org
  */
 public interface Process {
-	// TODO Build this out
+    // TODO Build this out
 }

File: src/main/java/oshi/hardware/package-info.java
Patch:
@@ -12,6 +12,6 @@
  * widdis[at]gmail[dot]com https://github.com/dblock/oshi/graphs/contributors
  */
 /**
- * Provides...
+ * Provides interfaces to hardware such as Memory, Power Sources, and Processor
  */
 package oshi.hardware;
\ No newline at end of file

File: src/main/java/oshi/package-info.java
Patch:
@@ -12,6 +12,6 @@
  * widdis[at]gmail[dot]com https://github.com/dblock/oshi/graphs/contributors
  */
 /**
- * Provides...
+ * Provides a cross-platform implementation to retrieve system information, such as version, memory, CPU, disk, battery, etc.
  */
 package oshi;
\ No newline at end of file

File: src/main/java/oshi/software/os/package-info.java
Patch:
@@ -12,6 +12,6 @@
  * widdis[at]gmail[dot]com https://github.com/dblock/oshi/graphs/contributors
  */
 /**
- * Provides...
+ * Provides interfaces and common objects for Software and OS
  */
 package oshi.software.os;
\ No newline at end of file

File: src/main/java/oshi/software/os/linux/proc/CentralProcessor.java
Patch:
@@ -329,7 +329,7 @@ public float getLoad() {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public double getSystemCpuLoadBetweenTicks() {
+	public synchronized double getSystemCpuLoadBetweenTicks() {
 		// Check if > ~ 0.95 seconds since last tick count.
 		long now = System.currentTimeMillis();
 		boolean update = (now - tickTime > 950);

File: src/main/java/oshi/software/os/linux/proc/GlobalMemory.java
Patch:
@@ -93,7 +93,7 @@ private long parseMeminfo(String[] memorySplit) {
 		if (memorySplit.length < 2) {
 			return 0l;
 		}
-		long memory = new Long(memorySplit[1]).longValue();
+		long memory = Long.valueOf(memorySplit[1]);
 		if (memorySplit.length > 2 && memorySplit[2].equals("kB")) {
 			memory *= 1024;
 		}

File: src/main/java/oshi/software/os/mac/local/CentralProcessor.java
Patch:
@@ -363,7 +363,7 @@ public float getLoad() {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public double getSystemCpuLoadBetweenTicks() {
+	public synchronized double getSystemCpuLoadBetweenTicks() {
 		// Check if > ~ 0.95 seconds since last tick count.
 		long now = System.currentTimeMillis();
 		boolean update = (now - tickTime > 950);

File: src/main/java/oshi/software/os/windows/nt/CentralProcessor.java
Patch:
@@ -361,7 +361,7 @@ public float getLoad() {
 	 * {@inheritDoc}
 	 */
 	@Override
-	public double getSystemCpuLoadBetweenTicks() {
+	public synchronized double getSystemCpuLoadBetweenTicks() {
 		// Check if > ~ 0.95 seconds since last tick count.
 		long now = System.currentTimeMillis();
 		boolean update = (now - tickTime > 950);

File: src/main/java/oshi/software/os/linux/proc/CentralProcessor.java
Patch:
@@ -113,6 +113,7 @@ public class CentralProcessor implements Processor {
 	 * Create a Processor with the given number
 	 * 
 	 * @param procNo
+	 *            The processor number
 	 */
 	public CentralProcessor(int procNo) {
 		if (procNo >= numCPU)

File: src/main/java/oshi/software/os/mac/local/CentralProcessor.java
Patch:
@@ -104,6 +104,7 @@ public class CentralProcessor implements Processor {
 	 * Create a Processor with the given number
 	 * 
 	 * @param procNo
+	 *            The processor number
 	 */
 	public CentralProcessor(int procNo) {
 		if (procNo >= numCPU)

File: src/main/java/oshi/software/os/mac/local/MacFileSystem.java
Patch:
@@ -46,7 +46,6 @@ public class MacFileSystem {
 	 * @return An array of {@link OSFileStore} objects representing mounted
 	 *         volumes. May return disconnected volumes with
 	 *         {@link OSFileStore#getTotalSpace()} = 0.
-	 * @throws IOException
 	 */
 	public static OSFileStore[] getFileStores() {
 		List<OSFileStore> fsList = new ArrayList<>();

File: src/main/java/oshi/software/os/linux/proc/CentralProcessor.java
Patch:
@@ -113,6 +113,7 @@ public class CentralProcessor implements Processor {
 	 * Create a Processor with the given number
 	 * 
 	 * @param procNo
+	 *            The processor number
 	 */
 	public CentralProcessor(int procNo) {
 		if (procNo >= numCPU)

File: src/main/java/oshi/software/os/mac/local/CentralProcessor.java
Patch:
@@ -104,6 +104,7 @@ public class CentralProcessor implements Processor {
 	 * Create a Processor with the given number
 	 * 
 	 * @param procNo
+	 *            The processor number
 	 */
 	public CentralProcessor(int procNo) {
 		if (procNo >= numCPU)

File: src/main/java/oshi/software/os/mac/local/MacFileSystem.java
Patch:
@@ -46,7 +46,6 @@ public class MacFileSystem {
 	 * @return An array of {@link OSFileStore} objects representing mounted
 	 *         volumes. May return disconnected volumes with
 	 *         {@link OSFileStore#getTotalSpace()} = 0.
-	 * @throws IOException
 	 */
 	public static OSFileStore[] getFileStores() {
 		List<OSFileStore> fsList = new ArrayList<>();

File: src/main/java/oshi/software/os/linux/proc/CentralProcessor.java
Patch:
@@ -113,6 +113,7 @@ public class CentralProcessor implements Processor {
 	 * Create a Processor with the given number
 	 * 
 	 * @param procNo
+	 *            The processor number
 	 */
 	public CentralProcessor(int procNo) {
 		if (procNo >= numCPU)

File: src/main/java/oshi/software/os/mac/local/CentralProcessor.java
Patch:
@@ -104,6 +104,7 @@ public class CentralProcessor implements Processor {
 	 * Create a Processor with the given number
 	 * 
 	 * @param procNo
+	 *            The processor number
 	 */
 	public CentralProcessor(int procNo) {
 		if (procNo >= numCPU)

File: src/main/java/oshi/software/os/mac/local/MacFileSystem.java
Patch:
@@ -46,7 +46,6 @@ public class MacFileSystem {
 	 * @return An array of {@link OSFileStore} objects representing mounted
 	 *         volumes. May return disconnected volumes with
 	 *         {@link OSFileStore#getTotalSpace()} = 0.
-	 * @throws IOException
 	 */
 	public static OSFileStore[] getFileStores() {
 		List<OSFileStore> fsList = new ArrayList<>();

File: src/main/java/oshi/software/os/OSFileStore.java
Patch:
@@ -40,8 +40,7 @@ public class OSFileStore {
 	 * @param usableSpace
 	 * @param totalSpace
 	 */
-	public OSFileStore(String name, String description, long usableSpace,
-			long totalSpace) {
+	public OSFileStore(String name, String description, long usableSpace, long totalSpace) {
 		this.setName(name);
 		this.setDescription(description);
 		this.setUsableSpace(usableSpace);

File: src/main/java/oshi/software/os/linux/LinuxHardwareAbstractionLayer.java
Patch:
@@ -82,8 +82,7 @@ public Processor[] getProcessors() {
 					continue;
 				}
 				if (toBeAnalyzed.startsWith("flags\t")) {
-					String[] flags = toBeAnalyzed.split(SEPARATOR)[1]
-							.split(" ");
+					String[] flags = toBeAnalyzed.split(SEPARATOR)[1].split(" ");
 					boolean found = false;
 					for (String flag : flags) {
 						if (flag.equalsIgnoreCase("LM")) {

File: src/main/java/oshi/software/os/windows/nt/WindowsFileSystem.java
Patch:
@@ -47,9 +47,8 @@ public static OSFileStore[] getFileStores() {
 		FileSystemView fsv = FileSystemView.getFileSystemView();
 		List<OSFileStore> fsList = new ArrayList<>();
 		for (File f : roots) {
-			fsList.add(new OSFileStore(fsv.getSystemDisplayName(f), fsv
-					.getSystemTypeDescription(f), f.getUsableSpace(), f
-					.getTotalSpace()));
+			fsList.add(new OSFileStore(fsv.getSystemDisplayName(f), fsv.getSystemTypeDescription(f), f.getUsableSpace(),
+					f.getTotalSpace()));
 		}
 		return fsList.toArray(new OSFileStore[fsList.size()]);
 	}

File: src/test/java/oshi/util/FileUtilTest.java
Patch:
@@ -32,8 +32,8 @@ public class FileUtilTest {
 	private static String THISCLASS = "src/test/java/oshi/util/FileUtilTest.java";
 
 	/**
-     * Test read file.
-     */
+	 * Test read file.
+	 */
 	@Test
 	public void testReadFile() {
 		List<String> thisFile = null;

File: src/test/java/oshi/util/ParseUtilTest.java
Patch:
@@ -26,8 +26,8 @@
 public class ParseUtilTest {
 
 	/**
-     * Test parse hertz.
-     */
+	 * Test parse hertz.
+	 */
 	@Test
 	public void testParseHertz() {
 		assertEquals(1L, ParseUtil.parseHertz("1Hz"));

File: src/main/java/oshi/software/os/OSFileStore.java
Patch:
@@ -40,8 +40,7 @@ public class OSFileStore {
 	 * @param usableSpace
 	 * @param totalSpace
 	 */
-	public OSFileStore(String name, String description, long usableSpace,
-			long totalSpace) {
+	public OSFileStore(String name, String description, long usableSpace, long totalSpace) {
 		this.setName(name);
 		this.setDescription(description);
 		this.setUsableSpace(usableSpace);

File: src/main/java/oshi/software/os/linux/LinuxHardwareAbstractionLayer.java
Patch:
@@ -82,8 +82,7 @@ public Processor[] getProcessors() {
 					continue;
 				}
 				if (toBeAnalyzed.startsWith("flags\t")) {
-					String[] flags = toBeAnalyzed.split(SEPARATOR)[1]
-							.split(" ");
+					String[] flags = toBeAnalyzed.split(SEPARATOR)[1].split(" ");
 					boolean found = false;
 					for (String flag : flags) {
 						if (flag.equalsIgnoreCase("LM")) {

File: src/main/java/oshi/software/os/windows/nt/WindowsFileSystem.java
Patch:
@@ -47,9 +47,8 @@ public static OSFileStore[] getFileStores() {
 		FileSystemView fsv = FileSystemView.getFileSystemView();
 		List<OSFileStore> fsList = new ArrayList<>();
 		for (File f : roots) {
-			fsList.add(new OSFileStore(fsv.getSystemDisplayName(f), fsv
-					.getSystemTypeDescription(f), f.getUsableSpace(), f
-					.getTotalSpace()));
+			fsList.add(new OSFileStore(fsv.getSystemDisplayName(f), fsv.getSystemTypeDescription(f), f.getUsableSpace(),
+					f.getTotalSpace()));
 		}
 		return fsList.toArray(new OSFileStore[fsList.size()]);
 	}

File: src/test/java/oshi/util/FileUtilTest.java
Patch:
@@ -32,8 +32,8 @@ public class FileUtilTest {
 	private static String THISCLASS = "src/test/java/oshi/util/FileUtilTest.java";
 
 	/**
-     * Test read file.
-     */
+	 * Test read file.
+	 */
 	@Test
 	public void testReadFile() {
 		List<String> thisFile = null;

File: src/test/java/oshi/util/ParseUtilTest.java
Patch:
@@ -26,8 +26,8 @@
 public class ParseUtilTest {
 
 	/**
-     * Test parse hertz.
-     */
+	 * Test parse hertz.
+	 */
 	@Test
 	public void testParseHertz() {
 		assertEquals(1L, ParseUtil.parseHertz("1Hz"));

File: src/main/java/oshi/software/os/linux/Libc.java
Patch:
@@ -46,7 +46,7 @@ public static final class Sysinfo extends Structure {
 		public byte[] _f = new byte[8]; // Won't be written for 64-bit systems
 
 		@Override
-		protected List getFieldOrder() {
+		protected List<String> getFieldOrder() {
 			return Arrays.asList(new String[] { "uptime", "loads", "totalram",
 					"freeram", "sharedram", "bufferram", "totalswap",
 					"freeswap", "procs", "totalhigh", "freehigh", "mem_unit",

File: src/main/java/oshi/software/os/linux/proc/LinuxFileSystem.java
Patch:
@@ -41,7 +41,7 @@ public class LinuxFileSystem {
 	 *         {@link OSFileStore#getTotalSpace()} = 0.
 	 */
 	public static OSFileStore[] getFileStores() {
-		List<OSFileStore> fsList = new ArrayList<OSFileStore>();
+		List<OSFileStore> fsList = new ArrayList<>();
 		for (FileStore store : FileSystems.getDefault().getFileStores()) {
 			// FileStore toString starts with path, then a space, then name in
 			// parentheses e.g., "/ (/dev/sda1)" and "/proc (proc)"

File: src/main/java/oshi/software/os/linux/proc/LinuxPowerSource.java
Patch:
@@ -68,7 +68,7 @@ public static PowerSource[] getPowerSources() {
 		// Empty directory will give null rather than empty array, so fix
 		if (psNames == null)
 			psNames = new String[0];
-		List<LinuxPowerSource> psList = new ArrayList<LinuxPowerSource>(
+		List<LinuxPowerSource> psList = new ArrayList<>(
 				psNames.length);
 		// For each power source, output various info
 		for (String psName : psNames) {

File: src/main/java/oshi/software/os/mac/MacHardwareAbstractionLayer.java
Patch:
@@ -54,7 +54,7 @@ public class MacHardwareAbstractionLayer implements HardwareAbstractionLayer {
 	public Processor[] getProcessors() {
 		if (_processors == null) {
 			int nbCPU = 1;
-			List<Processor> processors = new ArrayList<Processor>();
+			List<Processor> processors = new ArrayList<>();
 			int[] mib = { SystemB.CTL_HW, SystemB.HW_LOGICALCPU };
 			com.sun.jna.Memory pNbCPU = new com.sun.jna.Memory(SystemB.INT_SIZE);
 			if (0 != SystemB.INSTANCE.sysctl(mib, mib.length, pNbCPU,

File: src/main/java/oshi/software/os/mac/local/MacFileSystem.java
Patch:
@@ -49,7 +49,7 @@ public class MacFileSystem {
 	 * @throws IOException
 	 */
 	public static OSFileStore[] getFileStores() {
-		List<OSFileStore> fsList = new ArrayList<OSFileStore>();
+		List<OSFileStore> fsList = new ArrayList<>();
 		FileSystemView fsv = FileSystemView.getFileSystemView();
 		// Mac file systems are mounted in /Volumes
 		File volumes = new File("/Volumes");

File: src/main/java/oshi/software/os/mac/local/MacPowerSource.java
Patch:
@@ -76,7 +76,7 @@ public static PowerSource[] getPowerSources() {
 		double timeRemaining = IOKit.INSTANCE.IOPSGetTimeRemainingEstimate();
 
 		// For each power source, output various info
-		List<MacPowerSource> psList = new ArrayList<MacPowerSource>(
+		List<MacPowerSource> psList = new ArrayList<>(
 				powerSourcesCount);
 		for (int ps = 0; ps < powerSourcesCount; ps++) {
 			// Get the dictionary for that Power Source

File: src/main/java/oshi/software/os/windows/WindowsHardwareAbstractionLayer.java
Patch:
@@ -50,7 +50,7 @@ public Processor[] getProcessors() {
 
 		if (_processors == null) {
 			final String cpuRegistryRoot = "HARDWARE\\DESCRIPTION\\System\\CentralProcessor";
-			List<Processor> processors = new ArrayList<Processor>();
+			List<Processor> processors = new ArrayList<>();
 			String[] processorIds = Advapi32Util.registryGetKeys(
 					WinReg.HKEY_LOCAL_MACHINE, cpuRegistryRoot);
 			for (String processorId : processorIds) {

File: src/main/java/oshi/software/os/windows/nt/PowrProf.java
Patch:
@@ -50,7 +50,7 @@ public static class SystemBatteryState extends Structure {
 		public int defaultAlert2; // unsigned 32 bit
 
 		@Override
-		protected List getFieldOrder() {
+		protected List<String> getFieldOrder() {
 			return Arrays.asList(new String[] { "acOnLine", "batteryPresent",
 					"charging", "discharging", "spare1", "maxCapacity",
 					"remainingCapacity", "rate", "estimatedTime",

File: src/main/java/oshi/software/os/windows/nt/WindowsFileSystem.java
Patch:
@@ -45,7 +45,7 @@ public static OSFileStore[] getFileStores() {
 		// than FileSystem.getDefalut().getFileStores()
 		File[] roots = File.listRoots();
 		FileSystemView fsv = FileSystemView.getFileSystemView();
-		List<OSFileStore> fsList = new ArrayList<OSFileStore>();
+		List<OSFileStore> fsList = new ArrayList<>();
 		for (File f : roots) {
 			fsList.add(new OSFileStore(fsv.getSystemDisplayName(f), fsv
 					.getSystemTypeDescription(f), f.getUsableSpace(), f

File: src/main/java/oshi/util/ExecutingCommand.java
Patch:
@@ -49,7 +49,7 @@ public static ArrayList<String> runNative(String cmdToRun) {
 		BufferedReader reader = new BufferedReader(new InputStreamReader(
 				p.getInputStream()));
 		String line = "";
-		ArrayList<String> sa = new ArrayList<String>();
+		ArrayList<String> sa = new ArrayList<>();
 		try {
 			while ((line = reader.readLine()) != null) {
 				sa.add(line);

File: src/main/java/oshi/software/os/windows/nt/Kernel32.java
Patch:
@@ -36,7 +36,7 @@ public interface Kernel32 extends com.sun.jna.platform.win32.Kernel32 {
 	 * values returned are the sum of the designated times across all
 	 * processors.
 	 * 
-	 * Times are offset by {@link WIN32_TIME_OFFSET}.
+	 * Times are offset by {@value #WIN32_TIME_OFFSET}.
 	 * 
 	 * @param lpIdleTime
 	 *            A pointer to a FILETIME structure that receives the amount of

File: src/main/java/oshi/util/FormatUtil.java
Patch:
@@ -126,7 +126,7 @@ public static String formatHertz(long hertz) {
 	 *
 	 * @param d
 	 * @param decimalPlace
-	 * @return
+	 * @return rounded result
 	 */
 	public static float round(float d, int decimalPlace) {
 		BigDecimal bd = new BigDecimal(Float.toString(d));

File: src/main/java/oshi/util/ParseUtil.java
Patch:
@@ -55,8 +55,6 @@ public abstract class ParseUtil {
 	 * @param hertz
 	 *            Hertz size.
 	 * @return {@link Long} Hertz value or -1 if not parsable.
-	 * 
-	 * @author alessio.fachechi[at]gmail[dot]com
 	 */
 	public static long parseHertz(String hertz) {
 		Pattern pattern = Pattern.compile("(\\d+(.\\d+)?) ?([kMGT]?Hz)");

File: src/test/java/oshi/util/FileUtilTest.java
Patch:
@@ -41,6 +41,7 @@ public void testReadFile() {
 			thisFile = FileUtil.readFile(THISCLASS);
 		} catch (IOException e) {
 			e.printStackTrace();
+			return;
 		}
 		// Comment ONE line
 		int lineOne = 0;

File: src/main/java/oshi/software/os/linux/proc/LinuxPowerSource.java
Patch:
@@ -21,10 +21,13 @@
  * @author widdis[at]gmail[dot]com
  */
 public class LinuxPowerSource implements PowerSource {
+
 	private static final String PS_PATH = "/sys/class/power_supply/";
 
 	private String name;
+
 	private double remainingCapacity;
+
 	private double timeRemaining;
 
 	public LinuxPowerSource(String name, double remainingCapacity,
@@ -34,17 +37,14 @@ public LinuxPowerSource(String name, double remainingCapacity,
 		this.timeRemaining = timeRemaining;
 	}
 
-	@Override
 	public String getName() {
 		return name;
 	}
 
-	@Override
 	public double getRemainingCapacity() {
 		return remainingCapacity;
 	}
 
-	@Override
 	public double getTimeRemaining() {
 		return timeRemaining;
 	}

File: src/main/java/oshi/software/os/mac/MacHardwareAbstractionLayer.java
Patch:
@@ -32,7 +32,9 @@
 public class MacHardwareAbstractionLayer implements HardwareAbstractionLayer {
 
 	private Processor[] _processors;
+
 	private Memory _memory;
+
 	private PowerSource[] _powerSources;
 
 	/*
@@ -71,7 +73,6 @@ public Memory getMemory() {
 		return _memory;
 	}
 
-	@Override
 	public PowerSource[] getPowerSources() {
 		if (_powerSources == null) {
 			_powerSources = MacPowerSource.getPowerSources();

File: src/main/java/oshi/software/os/mac/local/MacPowerSource.java
Patch:
@@ -25,8 +25,11 @@
  * @author widdis[at]gmail[dot]com
  */
 public class MacPowerSource implements PowerSource {
+
 	private String name;
+
 	private double remainingCapacity;
+
 	private double timeRemaining;
 
 	public MacPowerSource(String name, double remainingCapacity,
@@ -36,17 +39,14 @@ public MacPowerSource(String name, double remainingCapacity,
 		this.timeRemaining = timeRemaining;
 	}
 
-	@Override
 	public String getName() {
 		return name;
 	}
 
-	@Override
 	public double getRemainingCapacity() {
 		return remainingCapacity;
 	}
 
-	@Override
 	public double getTimeRemaining() {
 		return timeRemaining;
 	}

File: src/main/java/oshi/software/os/windows/WindowsHardwareAbstractionLayer.java
Patch:
@@ -18,6 +18,7 @@ public class WindowsHardwareAbstractionLayer implements
 		HardwareAbstractionLayer {
 
 	private Processor[] _processors = null;
+
 	private Memory _memory = null;
 
 	public Memory getMemory() {
@@ -54,7 +55,6 @@ public Processor[] getProcessors() {
 		return _processors;
 	}
 
-	@Override
 	public PowerSource[] getPowerSources() {
 		return WindowsPowerSource.getPowerSources();
 	}

File: src/main/java/oshi/software/os/windows/nt/WindowsPowerSource.java
Patch:
@@ -19,8 +19,11 @@
  * @author widdis[at]gmail[dot]com
  */
 public class WindowsPowerSource implements PowerSource {
+
 	private String name;
+
 	private double remainingCapacity;
+
 	private double timeRemaining;
 
 	public WindowsPowerSource(String name, double remainingCapacity,
@@ -30,17 +33,14 @@ public WindowsPowerSource(String name, double remainingCapacity,
 		this.timeRemaining = timeRemaining;
 	}
 
-	@Override
 	public String getName() {
 		return name;
 	}
 
-	@Override
 	public double getRemainingCapacity() {
 		return remainingCapacity;
 	}
 
-	@Override
 	public double getTimeRemaining() {
 		return timeRemaining;
 	}

File: src/test/java/oshi/util/FormatUtilTest.java
Patch:
@@ -14,8 +14,8 @@ public class FormatUtilTest {
 	@BeforeClass
 	public static void setUpClass() {
 		// use decimal separator according to current locale
-		DECIMAL_SEPARATOR = DecimalFormatSymbols.getInstance()
-				.getDecimalSeparator();
+		DecimalFormatSymbols syms = new DecimalFormatSymbols();
+		DECIMAL_SEPARATOR = syms.getDecimalSeparator();
 	}
 
 	@Test

File: src/main/java/oshi/software/os/linux/proc/LinuxPowerSource.java
Patch:
@@ -21,10 +21,13 @@
  * @author widdis[at]gmail[dot]com
  */
 public class LinuxPowerSource implements PowerSource {
+
 	private static final String PS_PATH = "/sys/class/power_supply/";
 
 	private String name;
+
 	private double remainingCapacity;
+
 	private double timeRemaining;
 
 	public LinuxPowerSource(String name, double remainingCapacity,
@@ -34,17 +37,14 @@ public LinuxPowerSource(String name, double remainingCapacity,
 		this.timeRemaining = timeRemaining;
 	}
 
-	@Override
 	public String getName() {
 		return name;
 	}
 
-	@Override
 	public double getRemainingCapacity() {
 		return remainingCapacity;
 	}
 
-	@Override
 	public double getTimeRemaining() {
 		return timeRemaining;
 	}

File: src/main/java/oshi/software/os/mac/MacHardwareAbstractionLayer.java
Patch:
@@ -32,7 +32,9 @@
 public class MacHardwareAbstractionLayer implements HardwareAbstractionLayer {
 
 	private Processor[] _processors;
+
 	private Memory _memory;
+
 	private PowerSource[] _powerSources;
 
 	/*
@@ -71,7 +73,6 @@ public Memory getMemory() {
 		return _memory;
 	}
 
-	@Override
 	public PowerSource[] getPowerSources() {
 		if (_powerSources == null) {
 			_powerSources = MacPowerSource.getPowerSources();

File: src/main/java/oshi/software/os/mac/local/MacPowerSource.java
Patch:
@@ -25,8 +25,11 @@
  * @author widdis[at]gmail[dot]com
  */
 public class MacPowerSource implements PowerSource {
+
 	private String name;
+
 	private double remainingCapacity;
+
 	private double timeRemaining;
 
 	public MacPowerSource(String name, double remainingCapacity,
@@ -36,17 +39,14 @@ public MacPowerSource(String name, double remainingCapacity,
 		this.timeRemaining = timeRemaining;
 	}
 
-	@Override
 	public String getName() {
 		return name;
 	}
 
-	@Override
 	public double getRemainingCapacity() {
 		return remainingCapacity;
 	}
 
-	@Override
 	public double getTimeRemaining() {
 		return timeRemaining;
 	}

File: src/main/java/oshi/software/os/windows/WindowsHardwareAbstractionLayer.java
Patch:
@@ -18,6 +18,7 @@ public class WindowsHardwareAbstractionLayer implements
 		HardwareAbstractionLayer {
 
 	private Processor[] _processors = null;
+
 	private Memory _memory = null;
 
 	public Memory getMemory() {
@@ -54,7 +55,6 @@ public Processor[] getProcessors() {
 		return _processors;
 	}
 
-	@Override
 	public PowerSource[] getPowerSources() {
 		return WindowsPowerSource.getPowerSources();
 	}

File: src/main/java/oshi/software/os/windows/nt/WindowsPowerSource.java
Patch:
@@ -19,8 +19,11 @@
  * @author widdis[at]gmail[dot]com
  */
 public class WindowsPowerSource implements PowerSource {
+
 	private String name;
+
 	private double remainingCapacity;
+
 	private double timeRemaining;
 
 	public WindowsPowerSource(String name, double remainingCapacity,
@@ -30,17 +33,14 @@ public WindowsPowerSource(String name, double remainingCapacity,
 		this.timeRemaining = timeRemaining;
 	}
 
-	@Override
 	public String getName() {
 		return name;
 	}
 
-	@Override
 	public double getRemainingCapacity() {
 		return remainingCapacity;
 	}
 
-	@Override
 	public double getTimeRemaining() {
 		return timeRemaining;
 	}

File: src/test/java/oshi/util/FormatUtilTest.java
Patch:
@@ -14,8 +14,8 @@ public class FormatUtilTest {
 	@BeforeClass
 	public static void setUpClass() {
 		// use decimal separator according to current locale
-		DECIMAL_SEPARATOR = DecimalFormatSymbols.getInstance()
-				.getDecimalSeparator();
+		DecimalFormatSymbols syms = new DecimalFormatSymbols();
+		DECIMAL_SEPARATOR = syms.getDecimalSeparator();
 	}
 
 	@Test

File: src/main/java/oshi/software/os/linux/proc/CentralProcessor.java
Patch:
@@ -178,6 +178,7 @@ public float getLoad() {
 		}
 		in.useDelimiter("\n");
 		String[] result = in.next().split(" ");
+		in.close();
 		ArrayList<Float> loads = new ArrayList<Float>();
 		for (String load : result) {
 			if (load.matches("-?\\d+(\\.\\d+)?")) {

