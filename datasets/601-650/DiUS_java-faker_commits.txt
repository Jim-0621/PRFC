File: src/main/java/com/github/javafaker/Options.java
Patch:
@@ -1,12 +1,10 @@
 package com.github.javafaker;
 
-import java.util.ArrayList;
 import java.util.List;
 
 public class Options {
     private final Faker faker;
 
-
     protected Options(Faker faker) {
         this.faker = faker;
     }
@@ -33,7 +31,6 @@ public <E extends Enum<E>> E option(Class<E> enumeration) {
         return enumConstants[faker.random().nextInt(enumConstants.length)];
     }
 
-
     /**
      * Returns a random element from an array.
      *

File: src/test/java/com/github/javafaker/StarCraftTest.java
Patch:
@@ -8,7 +8,7 @@
 
 public class StarCraftTest extends AbstractFakerTest {
 
-    private final String noLeadingTrailingWhitespaceRegex = "^(?! )[A-Za-z0-9 ]*(?<! )$";
+    private final String noLeadingTrailingWhitespaceRegex = "^(?! )[A-Za-z0-9' ]*(?<! )$";
 
     @Test
     public void testUnit() {

File: src/test/java/com/github/javafaker/EnglandFootBallTest.java
Patch:
@@ -2,6 +2,7 @@
 
 
 
+import com.github.javafaker.matchers.MatchesRegularExpression;
 import org.junit.Test;
 
 import static com.github.javafaker.matchers.MatchesRegularExpression.matchesRegularExpression;

File: src/test/java/com/github/javafaker/EnglandFootBallTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.javafaker;
 
 
-import com.github.javafaker.matchers.MatchesRegularExpression;
+
 import org.junit.Test;
 
 import static com.github.javafaker.matchers.MatchesRegularExpression.matchesRegularExpression;

File: src/test/java/com/github/javafaker/StarCraftTest.java
Patch:
@@ -8,7 +8,7 @@
 
 public class StarCraftTest extends AbstractFakerTest {
 
-    private final String noLeadingTrailingWhitespaceRegex = "^(?! )[A-Za-z0-9 ]*(?<! )$";
+    private final String noLeadingTrailingWhitespaceRegex = "^(?! )[A-Za-z0-9' ]*(?<! )$";
 
     @Test
     public void testUnit() {

File: src/test/java/com/github/javafaker/integration/FakerIT.java
Patch:
@@ -163,6 +163,7 @@ public void testAllFakerMethodsThatReturnStrings() throws Exception {
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.aquaTeenHungerForce());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.programmingLanguage());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.kaamelott());
+        testAllMethodsThatReturnStringsActuallyReturnStrings(faker.bojackHorseman());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.basketball());
     }
 

File: src/main/java/com/github/javafaker/service/files/EnFile.java
Patch:
@@ -36,6 +36,7 @@ public String getPath() {
             "aviation.yml",
             "back_to_the_future.yml",
             "bank.yml",
+            "basketball.yml",
             "beer.yml",
             "bojack_horseman.yml",
             "book.yml",

File: src/test/java/com/github/javafaker/integration/FakerIT.java
Patch:
@@ -163,6 +163,7 @@ public void testAllFakerMethodsThatReturnStrings() throws Exception {
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.aquaTeenHungerForce());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.programmingLanguage());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.kaamelott());
+        testAllMethodsThatReturnStringsActuallyReturnStrings(faker.basketball());
     }
 
     private void testAllMethodsThatReturnStringsActuallyReturnStrings(Object object) throws Exception {

File: src/test/java/com/github/javafaker/service/FakeValuesTest.java
Patch:
@@ -57,4 +57,5 @@ public void getAValueFromALocaleThatCantBeLoaded() {
         FakeValues fakeValues = new FakeValues(new Locale("nothing"));
         assertThat(fakeValues.get(PATH), is(nullValue()));
     }
+
 }

File: src/test/java/com/github/javafaker/integration/FakerIT.java
Patch:
@@ -126,6 +126,7 @@ public void testAllFakerMethodsThatReturnStrings() throws Exception {
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.finance());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.food());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.gameOfThrones());
+        testAllMethodsThatReturnStringsActuallyReturnStrings(faker.gender());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.hacker());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.idNumber());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.shakespeare());

File: src/main/java/com/github/javafaker/service/files/EnFile.java
Patch:
@@ -36,7 +36,7 @@ public String getPath() {
             "aviation.yml",
             "back_to_the_future.yml",
             "bank.yml",
-            "basketbal.yml",
+            "basketball.yml",
             "beer.yml",
             "bojack_horseman.yml",
             "book.yml",

File: src/main/java/com/github/javafaker/service/files/EnFile.java
Patch:
@@ -36,6 +36,7 @@ public String getPath() {
             "aviation.yml",
             "back_to_the_future.yml",
             "bank.yml",
+            "basketball.yml",
             "beer.yml",
             "bojack_horseman.yml",
             "book.yml",
@@ -62,6 +63,7 @@ public String getPath() {
             "demographic.yml",
             "dessert.yml",
             "device.yml",
+            "disease.yml",
             "dota.yml",
             "dr_who.yml",
             "dragon_ball.yml",

File: src/test/java/com/github/javafaker/integration/FakerIT.java
Patch:
@@ -163,6 +163,7 @@ public void testAllFakerMethodsThatReturnStrings() throws Exception {
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.aquaTeenHungerForce());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.programmingLanguage());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.kaamelott());
+        testAllMethodsThatReturnStringsActuallyReturnStrings(faker.disease());
     }
 
     private void testAllMethodsThatReturnStringsActuallyReturnStrings(Object object) throws Exception {

File: src/test/java/com/github/javafaker/integration/FakerIT.java
Patch:
@@ -163,6 +163,7 @@ public void testAllFakerMethodsThatReturnStrings() throws Exception {
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.aquaTeenHungerForce());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.programmingLanguage());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.kaamelott());
+        testAllMethodsThatReturnStringsActuallyReturnStrings(faker.basketball());
     }
 
     private void testAllMethodsThatReturnStringsActuallyReturnStrings(Object object) throws Exception {

File: src/main/java/com/github/javafaker/BojackHorseman.java
Patch:
@@ -2,7 +2,7 @@
 
 /**
  * Generate random parts in BojackHorseman.
- * @author irakatz
+ * @author unknown and irakatz
  */
 public class BojackHorseman {
     private final Faker faker;

File: src/test/java/com/github/javafaker/integration/FakerIT.java
Patch:
@@ -163,6 +163,7 @@ public void testAllFakerMethodsThatReturnStrings() throws Exception {
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.aquaTeenHungerForce());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.programmingLanguage());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.kaamelott());
+        testAllMethodsThatReturnStringsActuallyReturnStrings(faker.bojackHorseman());
     }
 
     private void testAllMethodsThatReturnStringsActuallyReturnStrings(Object object) throws Exception {

File: src/test/java/com/github/javafaker/service/FakeValuesServiceTest.java
Patch:
@@ -234,7 +234,7 @@ public void expressionWithValidFakerObjectValidMethodInvalidArgs() {
 
     @Test
     public void futureDateExpression() throws ParseException {
-        SimpleDateFormat dateFormat = new SimpleDateFormat( "EEE MMM dd HH:mm:ss z yyyy" );
+        SimpleDateFormat dateFormat = new SimpleDateFormat( "EEE MMM dd HH:mm:ss z yyyy", Locale.ENGLISH  );
 
         Date now = new Date();
         Date nowPlus10Days = new Date( now.getTime() + MILLIS_IN_A_DAY * 10 );
@@ -247,7 +247,7 @@ public void futureDateExpression() throws ParseException {
 
     @Test
     public void pastDateExpression() throws ParseException {
-        SimpleDateFormat dateFormat = new SimpleDateFormat( "EEE MMM dd HH:mm:ss z yyyy" );
+        SimpleDateFormat dateFormat = new SimpleDateFormat( "EEE MMM dd HH:mm:ss z yyyy", Locale.ENGLISH );
 
         Date now = new Date();
         Date nowMinus5Hours = new Date( now.getTime() - MILLIS_IN_AN_HOUR * 5 );

File: src/main/java/com/github/javafaker/service/FakeValuesService.java
Patch:
@@ -70,7 +70,7 @@ public FakeValuesService(Locale locale, RandomService randomService) {
                 }
                 all.add(fakeValuesGrouping);
             } else {
-                all.add(new FakeValues(locale));
+                all.add(new FakeValues(l));
             }
         }
 

File: src/main/java/com/github/javafaker/service/FakeValuesService.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.regex.Pattern;
 
 public class FakeValuesService {
-    private static final Pattern EXPRESSION_PATTERN = Pattern.compile("#\\{([a-z0-9A-Z_.]+)\\s?(?:'([^']+)')?(?:,'([^']+)')*}");
+    private static final Pattern EXPRESSION_PATTERN = Pattern.compile("#\\{([a-z0-9A-Z_.]+)\\s?(?:'([^']+)')?(?:,'([^']+)')*\\}");
 
     private final Logger log = Logger.getLogger("faker");
 

File: src/main/java/com/github/javafaker/service/FakeValuesService.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.regex.Pattern;
 
 public class FakeValuesService {
-    private static final Pattern EXPRESSION_PATTERN = Pattern.compile("#\\{([a-z0-9A-Z_.]+)\\s?(?:'([^']+)')?(?:,'([^']+)')*}");
+    private static final Pattern EXPRESSION_PATTERN = Pattern.compile("#\\{([a-z0-9A-Z_.]+)\\s?(?:'([^']+)')?(?:,'([^']+)')*\\}");
 
     private final Logger log = Logger.getLogger("faker");
 

File: src/main/java/com/github/javafaker/Number.java
Patch:
@@ -39,7 +39,7 @@ public int numberBetween(int min, int max) {
      * @param max exclusive (unless min == max)
      */
     public long numberBetween(long min, long max) {
-        return decimalBetween(min,max).longValue();
+        return decimalBetween(min,max).setScale(0, BigDecimal.ROUND_HALF_DOWN).longValue();
     }
     
     /**

File: src/test/java/com/github/javafaker/LeagueOfLegendsTest.java
Patch:
@@ -10,7 +10,7 @@ public class LeagueOfLegendsTest extends AbstractFakerTest {
 
     @Test
     public void champion() {
-        assertThat(faker.leagueOfLegends().champion(), matchesRegularExpression("^([\\w &]+\\.?-?'?\\s?)+$"));
+        assertThat(faker.leagueOfLegends().champion(), matchesRegularExpression("^(\\w+\\.?-?'?\\s?&?\\s?)+$"));
     }
 
     @Test

File: src/test/java/com/github/javafaker/LeagueOfLegendsTest.java
Patch:
@@ -10,7 +10,7 @@ public class LeagueOfLegendsTest extends AbstractFakerTest {
 
     @Test
     public void champion() {
-        assertThat(faker.leagueOfLegends().champion(), matchesRegularExpression("^(\\w+\\.?-?'?\\s?)+$"));
+        assertThat(faker.leagueOfLegends().champion(), matchesRegularExpression("^(\\w+\\.?-?'?\\s?&?\\s?)+$"));
     }
 
     @Test

File: src/test/java/com/github/javafaker/FoodTest.java
Patch:
@@ -9,7 +9,7 @@ public class FoodTest extends AbstractFakerTest {
 
     @Test
     public void ingredient() {
-        assertThat(faker.food().ingredient(), matchesRegularExpression("[A-Za-z ]+"));
+        assertThat(faker.food().ingredient(), matchesRegularExpression("[A-Za-z- ]+"));
     }
 
     @Test

File: src/main/java/com/github/javafaker/Relationships.java
Patch:
@@ -37,7 +37,7 @@ public String sibling() {
     }
     
     public String any() {
-        Method currentMethod = Relationships.class.getClass().getEnclosingMethod();
+        Method currentMethod = getClass().getEnclosingMethod();
 
         try {
             Method[] methods = Relationships.class.getDeclaredMethods();
@@ -57,4 +57,4 @@ public String any() {
         }
     }
     
-}
\ No newline at end of file
+}

File: src/test/java/com/github/javafaker/LeagueOfLegendsTest.java
Patch:
@@ -10,7 +10,7 @@ public class LeagueOfLegendsTest extends AbstractFakerTest {
 
     @Test
     public void champion() {
-        assertThat(faker.leagueOfLegends().champion(), matchesRegularExpression("^(\\w+\\.?-?'?\\s?)+$"));
+        assertThat(faker.leagueOfLegends().champion(), matchesRegularExpression("^([\\w &]+\\.?-?'?\\s?)+$"));
     }
 
     @Test

File: src/test/java/com/github/javafaker/CountryTest.java
Patch:
@@ -34,7 +34,7 @@ public void testCapital() {
 
     @Test
     public void testCurrency() {
-        assertThat(faker.country().currency(), matchesRegularExpression("([\\w-]+ ?)+"));
+        assertThat(faker.country().currency(), matchesRegularExpression("([A-Za-zÀ-ÿ'’()-]+ ?)+"));
     }
 
     @Test

File: src/test/java/com/github/javafaker/NameTest.java
Patch:
@@ -77,7 +77,7 @@ public void testUsernameWithSpaces() {
     
     @Test
     public void testBloodGroup() {
-        assertThat(faker.name().bloodGroup(), matchesRegularExpression("(A|B|AB|O)[+-]"));
+        assertThat(faker.name().bloodGroup(), matchesRegularExpression("(A|B|AB|O)[+-−]"));
     }
 
 }

File: src/test/java/com/github/javafaker/FoodTest.java
Patch:
@@ -19,7 +19,7 @@ public void spice() {
 
     @Test
     public void dish() {
-        assertThat(faker.food().dish(), matchesRegularExpression("[A-Za-z1-9- ]+"));
+        assertThat(faker.food().dish(), matchesRegularExpression("\\P{Cc}+"));
     }
 
     @Test

File: src/main/java/com/github/javafaker/Lorem.java
Patch:
@@ -20,15 +20,15 @@ public char character() {
     }
 
     public char character(boolean includeUppercase) {
-        return characters(1).charAt(0);
+        return characters(1, includeUppercase).charAt(0);
     }
 
     public String characters() {
         return characters(255, false);
     }
 
     public String characters(boolean includeUppercase) {
-        return characters(255, false);
+        return characters(255, includeUppercase);
     }
 
     public String characters(int minimumLength, int maximumLength) {

File: src/main/java/com/github/javafaker/Lorem.java
Patch:
@@ -20,15 +20,15 @@ public char character() {
     }
 
     public char character(boolean includeUppercase) {
-        return characters(1).charAt(0);
+        return characters(1, includeUppercase).charAt(0);
     }
 
     public String characters() {
         return characters(255, false);
     }
 
     public String characters(boolean includeUppercase) {
-        return characters(255, false);
+        return characters(255, includeUppercase);
     }
 
     public String characters(int minimumLength, int maximumLength) {

File: src/test/java/com/github/javafaker/CountryTest.java
Patch:
@@ -39,7 +39,7 @@ public void testCurrency() {
 
     @Test
     public void testCurrencyCode() {
-        assertThat(faker.country().currencyCode(), matchesRegularExpression("([\\w-]+ ?)+"));
+        assertThat(faker.country().currencyCode(), matchesRegularExpression("([\\w-’í]+ ?)+"));
     }
 
     @Test

File: src/main/java/com/github/javafaker/service/files/EnFile.java
Patch:
@@ -184,6 +184,7 @@ public String getPath() {
             new EnFile("pokemon.yml", "games"),
             new EnFile("witcher.yml", "games"),
             new EnFile("zelda.yml", "games"),
+            new EnFile("elder_scrolls.yml", "games"),
             new EnFile("phone_number.yml", "cell_phone")); // load phone number again with a differen path
 
 

File: src/test/java/com/github/javafaker/integration/FakerIT.java
Patch:
@@ -153,6 +153,7 @@ public void testAllFakerMethodsThatReturnStrings() throws Exception {
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.weather());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.lebowski());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.princessBride());
+        testAllMethodsThatReturnStringsActuallyReturnStrings(faker.elderScrolls());
     }
 
     private void testAllMethodsThatReturnStringsActuallyReturnStrings(Object object) throws Exception {

File: src/test/java/com/github/javafaker/AddressTest.java
Patch:
@@ -110,6 +110,6 @@ public void testZipCodeByState() {
     @Test
     public void testCountyByZipCode() {
         faker = new Faker(new Locale("en-US"));
-        assertThat(faker.address().countyByZipCode(faker.address().zipCodeByState(faker.address().stateAbbr())), not(isEmptyOrNullString()));
+        assertThat(faker.address().countyByZipCode("47732"), not(isEmptyOrNullString()));
     }
 }

File: src/test/java/com/github/javafaker/ColorTest.java
Patch:
@@ -19,6 +19,6 @@ public void testHex() {
 
     @Test
     public void testHexNoHashSign() {
-        assertThat(faker.color().hex(true), matchesRegularExpression("^[0-9A-F]{6}$"));
+        assertThat(faker.color().hex(false), matchesRegularExpression("^[0-9A-F]{6}$"));
     }
 }

File: src/test/java/com/github/javafaker/service/RandomServiceTest.java
Patch:
@@ -66,6 +66,6 @@ public void testIntInRange() {
 
     @Test
     public void testHex() {
-        assertThat(faker.random().hex(8), matchesRegularExpression("^[0-9A-F]{8}$"));
+        assertThat(randomService.hex(8), matchesRegularExpression("^[0-9A-F]{8}$"));
     }
 }

File: src/test/java/com/github/javafaker/CountryTest.java
Patch:
@@ -28,7 +28,7 @@ public void testCode3() {
 
     @Test
     public void testCapital() {
-        assertThat(faker.country().capital(), matchesRegularExpression("([\\w-]+ ?)+"));
+        assertThat(faker.country().capital(), matchesRegularExpression("([\\w'-]+ ?)+"));
     }
 
     @Test

File: src/test/java/com/github/javafaker/WitcherTest.java
Patch:
@@ -29,7 +29,7 @@ public void testLocation() {
     
     @Test
     public void testQuote() {
-        assertThat(faker.witcher().quote(), matchesRegularExpression("[A-Za-z0-9 …\\?\\!\\.’',]+"));
+        assertThat(faker.witcher().quote(), matchesRegularExpression("[-A-Za-z0-9 —;…\\?\\!\\.’‘'”“,\\[\\]]+"));
     }
     
     @Test

File: src/test/java/com/github/javafaker/TeamTest.java
Patch:
@@ -24,6 +24,6 @@ public void testState() {
 
     @Test
     public void testSport() {
-        assertThat(faker.team().sport(), matchesRegularExpression("(\\w|\\s)+"));
+        assertThat(faker.team().sport(), matchesRegularExpression("(\\p{L}|\\s)+"));
     }
 }

File: src/test/java/com/github/javafaker/FriendsTest.java
Patch:
@@ -11,7 +11,7 @@ public class FriendsTest extends AbstractFakerTest {
 
     @Test
     public void character() {
-        assertThat(faker.friends().character(), matchesRegularExpression("[A-Za-z ]+"));
+        assertThat(faker.friends().character(), matchesRegularExpression("[A-Za-z .,]+"));
     }
 
     @Test

File: src/test/java/com/github/javafaker/OverwatchTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.github.javafaker;
 
+import com.github.javafaker.repeating.Repeat;
 import org.junit.Test;
 
 import static com.github.javafaker.matchers.MatchesRegularExpression.matchesRegularExpression;
@@ -15,7 +16,7 @@ public void hero() {
 
     @Test
     public void location() {
-        assertThat(faker.overwatch().location(), matchesRegularExpression("^(\\w+'?:?\\s?)+$"));
+        assertThat(faker.overwatch().location(), matchesRegularExpression("^(.+'?:?\\s?)+$"));
     }
 
     @Test

File: src/test/java/com/github/javafaker/SpaceTest.java
Patch:
@@ -59,7 +59,7 @@ public void nasaSpaceCraft() {
 
     @Test
     public void company() {
-        assertThat(faker.space().company(), matchesRegularExpression("(\\w+ ?){1,4}"));
+        assertThat(faker.space().company(), matchesRegularExpression("((\\w|')+ ?){2,4}"));
     }
 
     @Test

File: src/test/java/com/github/javafaker/EsportsTest.java
Patch:
@@ -9,12 +9,12 @@ public class EsportsTest extends AbstractFakerTest {
 
     @Test
     public void player() {
-        assertThat(faker.esports().player(), matchesRegularExpression("\\w+"));
+        assertThat(faker.esports().player(), matchesRegularExpression("(\\w|.)+"));
     }
 
     @Test
     public void team() {
-        assertThat(faker.esports().team(),  matchesRegularExpression("(\\w+ ?)+"));
+        assertThat(faker.esports().team(),  matchesRegularExpression("((\\w|.)+ ?)+"));
     }
 
     @Test

File: src/test/java/com/github/javafaker/SpaceTest.java
Patch:
@@ -59,7 +59,7 @@ public void nasaSpaceCraft() {
 
     @Test
     public void company() {
-        assertThat(faker.space().company(), matchesRegularExpression("(\\w+ ?){2,4}"));
+        assertThat(faker.space().company(), matchesRegularExpression("(\\w+ ?){1,4}"));
     }
 
     @Test

File: src/test/java/com/github/javafaker/TeamTest.java
Patch:
@@ -24,6 +24,6 @@ public void testState() {
 
     @Test
     public void testSport() {
-        assertThat(faker.team().sport(), matchesRegularExpression("\\w+"));
+        assertThat(faker.team().sport(), matchesRegularExpression("(\\w|\\s)+"));
     }
 }

File: src/test/java/com/github/javafaker/MusicTest.java
Patch:
@@ -24,6 +24,6 @@ public void chord() {
 
     @Test
     public void genre() {
-        assertThat(faker.music().genre(), matchesRegularExpression("\\w+ ?\\w+"));
+        assertThat(faker.music().genre(), matchesRegularExpression("[[ -]?\\w+]+"));
     }
 }

File: src/test/java/com/github/javafaker/MusicTest.java
Patch:
@@ -24,6 +24,6 @@ public void chord() {
 
     @Test
     public void genre() {
-        assertThat(faker.music().genre(), matchesRegularExpression("\\w+ ?\\w+"));
+        assertThat(faker.music().genre(), matchesRegularExpression("[[ -]?\\w+]+"));
     }
 }

File: src/main/java/com/github/javafaker/DateAndTime.java
Patch:
@@ -53,7 +53,7 @@ public Date future(int atMost, TimeUnit unit) {
     public Date future(int atMost, int minimum, TimeUnit unit) {
         Date now = new Date();
         Date minimumDate = new Date(now.getTime() + unit.toMillis(minimum));
-        return future(atMost, unit, minimumDate);
+        return future(atMost - minimum, unit, minimumDate);
     }
 
     /**
@@ -105,7 +105,7 @@ public Date past(int atMost, TimeUnit unit) {
     public Date past(int atMost, int minimum, TimeUnit unit) {
         Date now = new Date();
         Date minimumDate = new Date(now.getTime() - unit.toMillis(minimum));
-        return past(atMost, unit, minimumDate);
+        return past(atMost - minimum, unit, minimumDate);
     }
 
     /**

File: src/main/java/com/github/javafaker/service/FakeValuesService.java
Patch:
@@ -5,6 +5,7 @@
 import com.github.javafaker.Name;
 import com.mifmif.common.regex.Generex;
 import org.apache.commons.lang3.ClassUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.yaml.snakeyaml.Yaml;
 
 import java.io.InputStream;
@@ -383,7 +384,7 @@ protected String resolveExpression(String expression, Object current, Faker root
             }
 
             resolved = resolveExpression(resolved, current, root);
-            result = result.replace(escapedDirective, resolved);
+            result = StringUtils.replaceOnce(result, escapedDirective, resolved);
         }
         return result;
     }

File: src/test/java/com/github/javafaker/CurrencyTest.java
Patch:
@@ -7,10 +7,9 @@
 
 public class CurrencyTest extends AbstractFakerTest {
 
-
     @Test
     public void testName() {
-        assertThat(faker.currency().name(), matchesRegularExpression("[\\w\\' ]+"));
+        assertThat(faker.currency().name(), matchesRegularExpression("[\\w\\'\\.\\-\\(\\) ]+"));
     }
 
     @Test

File: src/test/java/com/github/javafaker/InternetTest.java
Patch:
@@ -250,7 +250,7 @@ public void testSlug() {
     @Test
     @Repeat(times=10)
     public void testUuid() {
-        assertThat(faker.internet().uuid(), matchesRegularExpression("/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i"));
+        assertThat(faker.internet().uuid(), matchesRegularExpression("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"));
     }
 
     @Test

File: src/test/java/com/github/javafaker/PokemonTest.java
Patch:
@@ -9,7 +9,7 @@ public class PokemonTest extends AbstractFakerTest {
 
     @Test
     public void name() {
-        assertThat(faker.pokemon().name(), matchesRegularExpression("[\\w']+.?"));
+        assertThat(faker.pokemon().name(), matchesRegularExpression("[\\w']+.?( \\w+)?"));
     }
 
     @Test

File: src/test/java/com/github/javafaker/WitcherTest.java
Patch:
@@ -14,7 +14,7 @@ public void testCharacter() {
     
     @Test
     public void testWitcher() {
-        assertThat(faker.witcher().character(), matchesRegularExpression("[A-Za-z -ë]+"));
+        assertThat(faker.witcher().character(), matchesRegularExpression("[A-Za-z -ëúï]+"));
     }
     
     @Test

File: src/test/java/com/github/javafaker/integration/FakerIT.java
Patch:
@@ -136,6 +136,7 @@ public void testAllFakerMethodsThatReturnStrings() throws Exception {
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.rickAndMorty());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.yoda());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.matz());
+        testAllMethodsThatReturnStringsActuallyReturnStrings(faker.witcher());
     }
 
     private void testAllMethodsThatReturnStringsActuallyReturnStrings(Object object) throws Exception {

File: src/test/java/com/github/javafaker/integration/FakerIT.java
Patch:
@@ -130,6 +130,7 @@ public void testAllFakerMethodsThatReturnStrings() throws Exception {
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.rockBand());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.esports());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.friends());
+        testAllMethodsThatReturnStringsActuallyReturnStrings(faker.job());
     }
 
     private void testAllMethodsThatReturnStringsActuallyReturnStrings(Object object) throws Exception {

File: src/test/java/com/github/javafaker/integration/FakerIT.java
Patch:
@@ -127,6 +127,7 @@ public void testAllFakerMethodsThatReturnStrings() throws Exception {
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.lordOfTheRings());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.zelda());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.harryPotter());
+        testAllMethodsThatReturnStringsActuallyReturnStrings(faker.rockBand());
     }
 
     private void testAllMethodsThatReturnStringsActuallyReturnStrings(Object object) throws Exception {

File: src/test/java/com/github/javafaker/AncientTest.java
Patch:
@@ -24,7 +24,7 @@ public void titan() {
 
     @Test
     public void hero() {
-        assertThat(faker.ancient().hero(), matchesRegularExpression("\\w+"));
+        assertThat(faker.ancient().hero(), matchesRegularExpression("(?U)\\w+"));
     }
 
 }

File: src/main/java/com/github/javafaker/service/FakeValuesService.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.regex.Pattern;
 
 public class FakeValuesService {
-    private static final Pattern EXPRESSION_PATTERN = Pattern.compile("#\\{([a-zA-Z_.]+)\\s?(?:'([^']+)')?(?:,'([^']+)')*\\}");
+    private static final Pattern EXPRESSION_PATTERN = Pattern.compile("#\\{([a-z0-9A-Z_.]+)\\s?(?:'([^']+)')?(?:,'([^']+)')*\\}");
 
     private final Logger log = Logger.getLogger("faker");
     

File: src/test/java/com/github/javafaker/AbstractFakerTest.java
Patch:
@@ -25,9 +25,9 @@ public void before() {
         
         Logger rootLogger = LogManager.getLogManager().getLogger("");
         Handler[] handlers = rootLogger.getHandlers();
-        rootLogger.setLevel(Level.FINEST);
+        rootLogger.setLevel(Level.INFO);
         for (Handler h : handlers) {
-            h.setLevel(Level.FINEST);
+            h.setLevel(Level.INFO);
         }
     }
 

File: src/main/java/com/github/javafaker/App.java
Patch:
@@ -16,6 +16,6 @@ public String version() {
     }
 
     public String author() {
-        return faker.fakeValuesService().resolve("app.name", this, faker);
+        return faker.fakeValuesService().resolve("app.author", this, faker);
     }
 }

File: src/test/java/com/github/javafaker/AppTest.java
Patch:
@@ -7,8 +7,6 @@
 
 public class AppTest  extends AbstractFakerTest{
 
-    
-
     @Test
     public void testName() {
         assertThat(faker.app().name(), matchesRegularExpression("([\\w-]+ ?)+"));
@@ -21,6 +19,6 @@ public void testVersion() {
 
     @Test
     public void testAuthor() {
-        assertThat(faker.app().author(), matchesRegularExpression("([\\w']+[-& ]?){2,9}"));
+        assertThat(faker.app().author(), matchesRegularExpression("([\\w']+[-&,\\.]? ?){2,9}"));
     }
 }

File: src/test/java/com/github/javafaker/UniversityTest.java
Patch:
@@ -1,6 +1,5 @@
 package com.github.javafaker;
 
-import org.junit.Before;
 import org.junit.Test;
 
 import static com.github.javafaker.matchers.MatchesRegularExpression.matchesRegularExpression;

File: src/test/java/com/github/javafaker/integration/MostSpecificLocaleIT.java
Patch:
@@ -27,8 +27,8 @@ public void setupFakers() {
     }
 
     @Test
+    @SuppressWarnings("unchecked")
     public void resolvesTheMostSpecificLocale() {
-        
         final List<String> enDefaultCountries = (List<String>) en.fetchObject("address.default_country");
         final List<String> enUsDefaultCountries = (List<String>) en_US.fetchObject("address.default_country");
         

File: src/test/java/com/github/javafaker/integration/FakerIT.java
Patch:
@@ -130,7 +130,7 @@ private void testAllMethodsThatReturnStringsActuallyReturnStrings(Object object)
                 continue;
             }
             final Object returnValue = method.invoke(object);
-            logger.info(String.format("Invoked %s.%s = %s", object.getClass().getSimpleName().toLowerCase(), method.getName(), returnValue));
+            logger.info(String.format("%s %s.%s = %s", locale, object.getClass().getSimpleName().toLowerCase(), method.getName(), returnValue));
             assertThat(method + " on " + object, returnValue, is(notNullValue()));
             assertThat(method + " on " + object, (String) returnValue, not(isEmptyString()));
         }

File: src/test/java/com/github/javafaker/FoodTest.java
Patch:
@@ -14,7 +14,7 @@ public void ingredient() {
 
     @Test
     public void spice() {
-        assertThat(faker.food().spice(), matchesRegularExpression("[A-Za-z ]+"));
+        assertThat(faker.food().spice(), matchesRegularExpression("[A-Za-z1-9- ]+"));
     }
 
     @Test

File: src/main/java/com/github/javafaker/Company.java
Patch:
@@ -1,8 +1,8 @@
 package com.github.javafaker;
 
+import com.github.javafaker.service.FakerIDN;
 import org.apache.commons.lang3.StringUtils;
 
-import java.net.IDN;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -72,7 +72,7 @@ public String url() {
         return join(new Object[]{
                 "www",
                 ".",
-                IDN.toASCII(domainName()),
+                FakerIDN.toASCII(domainName()),
                 ".",
                 domainSuffix()
         });

File: src/main/java/com/github/javafaker/Internet.java
Patch:
@@ -1,5 +1,6 @@
 package com.github.javafaker;
 
+import com.github.javafaker.service.FakerIDN;
 import com.github.javafaker.service.RandomService;
 import org.apache.commons.lang3.StringUtils;
 
@@ -51,7 +52,7 @@ public String url() {
         return join(new Object[]{
                 "www",
                 ".",
-                IDN.toASCII(
+                FakerIDN.toASCII(
                         faker.name().firstName().toLowerCase().replaceAll("'", "") +
                                 "-" +
                                 domainWord()

File: src/test/java/com/github/javafaker/service/FakeValuesServiceTest.java
Patch:
@@ -226,12 +226,12 @@ public void expressionWithValidFakerObjectButInvalidMethod() {
      * if the message changes, it's ok to update the test provided
      * the two conditions above are still true.
      */
-    @Test/*(expected = RuntimeException.class)*/
+    @Test
     public void expressionWithValidFakerObjectValidMethodInvalidArgs() {
         expressionShouldFailWith("#{Number.number_between 'x','y'}", 
-                "Unable to coerce x to Long via Long(String) constructor.");
+                "Can't find method on Number called numberbetween.");
     }
-
+    
     /**
      * Two things are important here:
      * 1) the message in the exception should be USEFUL

File: src/test/java/com/github/javafaker/RandomFakerTest.java
Patch:
@@ -16,6 +16,7 @@ public class RandomFakerTest extends AbstractFakerTest {
 
     @Before
     public void before() {
+        super.before();
         random = new Random();
         faker = new Faker(random);
     }

File: src/test/java/com/github/javafaker/service/RandomServiceTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.github.javafaker.service;
 
+import com.github.javafaker.AbstractFakerTest;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -14,12 +15,13 @@
  * @author pmiklos
  *
  */
-public class RandomServiceTest {
+public class RandomServiceTest extends AbstractFakerTest {
 
     private RandomService randomService;
 
     @Before
     public void before() {
+        super.before();
         randomService = new RandomService(new Random());
     }
 

File: src/test/java/com/github/javafaker/RandomFakerTest.java
Patch:
@@ -5,10 +5,10 @@
 
 import java.util.Random;
 
-import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.is;
 
-public class RandomFakerTest {
+public class RandomFakerTest extends AbstractFakerTest {
 
     private static final int CONSTANT_SEED_VALUE = 10;
     private Faker faker;

File: src/test/java/com/github/javafaker/UniversityTest.java
Patch:
@@ -4,9 +4,9 @@
 import org.junit.Test;
 
 import static com.github.javafaker.matchers.MatchesRegularExpression.matchesRegularExpression;
-import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.Assert.assertThat;
 
-public class UniversityTest {
+public class UniversityTest extends AbstractFakerTest {
 
     private Faker faker;
 

File: src/main/java/com/github/javafaker/Commerce.java
Patch:
@@ -4,7 +4,7 @@
 import java.util.SortedSet;
 import java.util.TreeSet;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import com.github.javafaker.service.FakeValuesServiceInterface;
 import com.github.javafaker.service.RandomService;

File: src/main/java/com/github/javafaker/Company.java
Patch:
@@ -4,12 +4,12 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import com.github.javafaker.service.FakeValuesServiceInterface;
 import com.github.javafaker.service.RandomService;
 
-import static org.apache.commons.lang.StringUtils.join;
+import static org.apache.commons.lang3.StringUtils.join;
 
 public class Company {
     private final FakeValuesServiceInterface fakeValuesService;

File: src/main/java/com/github/javafaker/Faker.java
Patch:
@@ -4,8 +4,8 @@
 import com.github.javafaker.service.FakeValuesService;
 import com.github.javafaker.service.FakeValuesServiceInterface;
 import com.github.javafaker.service.RandomService;
-import org.apache.commons.lang.WordUtils;
-import org.apache.commons.lang.reflect.MethodUtils;
+import org.apache.commons.lang3.text.WordUtils;
+import org.apache.commons.lang3.reflect.MethodUtils;
 
 import java.lang.reflect.Proxy;
 import java.util.Locale;

File: src/main/java/com/github/javafaker/Finance.java
Patch:
@@ -9,11 +9,11 @@
 import java.util.List;
 import java.util.Map;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 public class Finance {
 
-    private static final Map<String, String> countryCodeToBasicBankAccountNumberPattern = 
+    private static final Map<String, String> countryCodeToBasicBankAccountNumberPattern =
             createCountryCodeToBasicBankAccountNumberPatternMap();
 
     private final FakeValuesServiceInterface fakeValuesService;

File: src/main/java/com/github/javafaker/Internet.java
Patch:
@@ -2,9 +2,9 @@
 
 import com.github.javafaker.service.FakeValuesServiceInterface;
 import com.github.javafaker.service.RandomService;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
-import static org.apache.commons.lang.StringUtils.join;
+import static org.apache.commons.lang3.StringUtils.join;
 
 import java.net.IDN;
 

File: src/main/java/com/github/javafaker/Lorem.java
Patch:
@@ -2,13 +2,13 @@
 
 import com.github.javafaker.service.FakeValuesServiceInterface;
 import com.github.javafaker.service.RandomService;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.apache.commons.lang.StringUtils.capitalize;
-import static org.apache.commons.lang.StringUtils.join;
+import static org.apache.commons.lang3.StringUtils.capitalize;
+import static org.apache.commons.lang3.StringUtils.join;
 
 public class Lorem {
 

File: src/main/java/com/github/javafaker/Name.java
Patch:
@@ -1,6 +1,6 @@
 package com.github.javafaker;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import com.github.javafaker.service.FakeValuesServiceInterface;
 

File: src/test/java/com/github/javafaker/IdNumberTest.java
Patch:
@@ -22,7 +22,7 @@ public void testValid() {
 
     @Test
     public void testInvalid() {
-        assertThat(faker.idNumber().invalid(), matchesRegularExpression("[0-8]\\d{2}-\\d{2}-\\d{4}"));
+        assertThat(faker.idNumber().invalid(), matchesRegularExpression("[0-9]\\d{2}-\\d{2}-\\d{4}"));
     }
 
     @Test

File: src/test/java/com/github/javafaker/BeerTest.java
Patch:
@@ -27,7 +27,7 @@ public void testStyle() {
 
     @Test
     public void testHop() {
-        assertThat(faker.beer().hop(), matchesRegularExpression("[A-Za-z'()\\. 0-9-]+"));
+        assertThat(faker.beer().hop(), matchesRegularExpression("[A-Za-z'’()\\. 0-9-]+"));
     }
 
     @Test
@@ -37,6 +37,6 @@ public void testMalt() {
 
     @Test
     public void testYeast() {
-        assertThat(faker.beer().yeast(), matchesRegularExpression("[A-Za-z'() 0-9-]+"));
+        assertThat(faker.beer().yeast(), matchesRegularExpression("[\\p{L}'() 0-9-]+"));
     }
 }

File: src/test/java/com/github/javafaker/SuperheroTest.java
Patch:
@@ -16,7 +16,7 @@ public void before() {
 
     @Test
     public void testName() {
-        assertThat(faker.superhero().name(), matchesRegularExpression("[A-Za-z -]+"));
+        assertThat(faker.superhero().name(), matchesRegularExpression("[A-Za-z' -]+"));
     }
 
     @Test
@@ -31,11 +31,11 @@ public void testSuffix() {
 
     @Test
     public void testPower() {
-        assertThat(faker.superhero().power(), matchesRegularExpression("[A-Za-z -]+"));
+        assertThat(faker.superhero().power(), matchesRegularExpression("[A-Za-z/ -]+"));
     }
 
     @Test
     public void testDescriptor() {
-        assertThat(faker.superhero().descriptor(), matchesRegularExpression("[A-Za-z -]+"));
+        assertThat(faker.superhero().descriptor(), matchesRegularExpression("[A-Za-z' -]+"));
     }
 }

File: src/test/java/com/github/javafaker/BeerTest.java
Patch:
@@ -27,7 +27,7 @@ public void testStyle() {
 
     @Test
     public void testHop() {
-        assertThat(faker.beer().hop(), matchesRegularExpression("[A-Za-z'() 0-9-]+"));
+        assertThat(faker.beer().hop(), matchesRegularExpression("[A-Za-z'()\\. 0-9-]+"));
     }
 
     @Test

File: src/test/java/com/github/javafaker/NameTest.java
Patch:
@@ -17,17 +17,17 @@ public void before() {
 
     @Test
     public void testName() {
-        assertThat(faker.name().name(), matchesRegularExpression("(\\w+\\.?( )?){2,3}"));
+        assertThat(faker.name().name(), matchesRegularExpression("([\\w']+\\.?( )?){2,3}"));
     }
 
     @Test
     public void testNameWithMiddle() {
-        assertThat(faker.name().nameWithMiddle(), matchesRegularExpression("(\\w+\\.?( )?){3,4}"));
+        assertThat(faker.name().nameWithMiddle(), matchesRegularExpression("([\\w']+\\.?( )?){3,4}"));
     }
 
     @Test
     public void testFullName() {
-        assertThat(faker.name().fullName(), matchesRegularExpression("(\\w+\\.?( )?){2,4}"));
+        assertThat(faker.name().fullName(), matchesRegularExpression("([\\w']+\\.?( )?){2,4}"));
     }
 
     @Test

File: src/test/java/com/github/javafaker/BeerTest.java
Patch:
@@ -17,7 +17,7 @@ public void before() {
 
     @Test
     public void testName() {
-        assertThat(faker.beer().name(), matchesRegularExpression("[A-Za-z'() 0-9-’’]+"));
+       assertThat(faker.beer().name(), matchesRegularExpression("[\\p{L}'()\\., 0-9-’’]+"));
     }
 
     @Test

File: src/test/java/com/github/javafaker/AppTest.java
Patch:
@@ -17,7 +17,7 @@ public void before() {
 
     @Test
     public void testName() {
-        assertThat(faker.app().name(), matchesRegularExpression("[\\w-]+"));
+        assertThat(faker.app().name(), matchesRegularExpression("([\\w-]+ ?)+"));
     }
 
     @Test

File: src/test/java/com/github/javafaker/HackerTest.java
Patch:
@@ -27,7 +27,7 @@ public void testAdjective() {
 
     @Test
     public void testNoun() {
-        assertThat(faker.hacker().noun(), matchesRegularExpression("\\w+"));
+        assertThat(faker.hacker().noun(), matchesRegularExpression("\\w+( \\w+)?"));
     }
 
     @Test

File: src/test/java/com/github/javafaker/integration/FakerIT.java
Patch:
@@ -80,10 +80,12 @@ public void testAllFakerMethodsThatReturnStrings() throws Exception {
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.name());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.finance());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.superhero());
+        testAllMethodsThatReturnStringsActuallyReturnStrings(faker.team());
     }
 
 
     private void testAllMethodsThatReturnStringsActuallyReturnStrings(Object object) throws IllegalAccessException, InvocationTargetException {
+        @SuppressWarnings("unchecked")
         Set<Method> methodsThatReturnStrings = getAllMethods(object.getClass(),
                 withModifier(Modifier.PUBLIC),
                 withReturnType(String.class),

File: src/main/java/com/github/javafaker/Address.java
Patch:
@@ -62,7 +62,7 @@ public String city() {
     }
 
     public String cityName() {
-        return city();
+        return resolve("address.city_name");
     }
 
     public String state() {

File: src/main/java/com/github/javafaker/DateAndTime.java
Patch:
@@ -69,7 +69,7 @@ public Date future(int atMost, TimeUnit unit, Date referenceDate) {
     public Date past(int atMost, TimeUnit unit) {
         Date now = new Date();
         Date aBitEarlierThanNow = new Date(now.getTime() - 1000);
-        return future(atMost, unit, aBitEarlierThanNow);
+        return past(atMost, unit, aBitEarlierThanNow);
     }
 
     /**

File: src/main/java/com/github/javafaker/Business.java
Patch:
@@ -1,11 +1,11 @@
 package com.github.javafaker;
 
-import com.github.javafaker.service.FakeValuesService;
+import com.github.javafaker.service.FakeValuesServiceInterface;
 
 public class Business {
-    private final FakeValuesService fakeValuesService;
+    private final FakeValuesServiceInterface fakeValuesService;
 
-    public Business(FakeValuesService fakeValuesService) {
+    public Business(FakeValuesServiceInterface fakeValuesService) {
         this.fakeValuesService = fakeValuesService;
     }
 

File: src/main/java/com/github/javafaker/Finance.java
Patch:
@@ -1,16 +1,16 @@
 package com.github.javafaker;
 
-import com.github.javafaker.service.FakeValuesService;
+import com.github.javafaker.service.FakeValuesServiceInterface;
 import com.github.javafaker.service.RandomService;
 
 import java.util.ArrayList;
 import java.util.List;
 
 public class Finance {
-    private final FakeValuesService fakeValuesService;
+    private final FakeValuesServiceInterface fakeValuesService;
     private final RandomService randomService;
 
-    public Finance(FakeValuesService fakeValuesService, RandomService randomService) {
+    public Finance(FakeValuesServiceInterface fakeValuesService, RandomService randomService) {
         this.fakeValuesService = fakeValuesService;
         this.randomService = randomService;
     }

File: src/main/java/com/github/javafaker/PhoneNumber.java
Patch:
@@ -1,12 +1,12 @@
 package com.github.javafaker;
 
-import com.github.javafaker.service.FakeValuesService;
+import com.github.javafaker.service.FakeValuesServiceInterface;
 
 public class PhoneNumber {
 
-    private final FakeValuesService fakeValuesService;
+    private final FakeValuesServiceInterface fakeValuesService;
 
-    public PhoneNumber(FakeValuesService fakeValuesService) {
+    public PhoneNumber(FakeValuesServiceInterface fakeValuesService) {
         this.fakeValuesService = fakeValuesService;
     }
 

File: src/test/java/com/github/javafaker/integration/FakerIT.java
Patch:
@@ -66,6 +66,7 @@ public void testAllFakerMethodsThatReturnStrings() throws Exception {
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker);
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.address());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.business());
+        testAllMethodsThatReturnStringsActuallyReturnStrings(faker.company());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.internet());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.lorem());
         testAllMethodsThatReturnStringsActuallyReturnStrings(faker.phoneNumber());

File: src/test/java/com/github/javafaker/integration/FakerIT.java
Patch:
@@ -53,6 +53,7 @@ public static Collection<Object[]> data() {
         Object[][] data = new Object[][]{
                 {Locale.ENGLISH, null},
                 {Locale.FRENCH, null},
+                {new Locale("pt"), null},
                 {FINNISH_LOCALE, null},
                 {Locale.ENGLISH, new Random()},
                 {null, new Random()},

File: src/test/java/com/github/javafaker/integration/FakerIT.java
Patch:
@@ -53,6 +53,7 @@ public static Collection<Object[]> data() {
         Object[][] data = new Object[][]{
                 {Locale.ENGLISH, null},
                 {Locale.FRENCH, null},
+                {new Locale("pt"), null},
                 {FINNISH_LOCALE, null},
                 {Locale.ENGLISH, new Random()},
                 {null, new Random()},

File: src/main/java/com/github/javafaker/Faker.java
Patch:
@@ -46,7 +46,7 @@ public Faker(Locale locale, Random random) {
         this.fakeValuesService = new FakeValuesService(locale, randomService);
         this.lorem = new Lorem(fakeValuesService, randomService);
         this.name = new Name(fakeValuesService);
-        this.internet = new Internet(name, fakeValuesService);
+        this.internet = new Internet(name, fakeValuesService, randomService);
         this.phoneNumber = new PhoneNumber(fakeValuesService);
         this.address = new Address(name, fakeValuesService, randomService);
         this.business = new Business(fakeValuesService);

File: src/main/java/com/github/javafaker/Faker.java
Patch:
@@ -46,7 +46,7 @@ public Faker(Locale locale, Random random) {
         this.fakeValuesService = new FakeValuesService(locale, randomService);
         this.lorem = new Lorem(fakeValuesService, randomService);
         this.name = new Name(fakeValuesService);
-        this.internet = new Internet(name, fakeValuesService);
+        this.internet = new Internet(name, fakeValuesService, randomService);
         this.phoneNumber = new PhoneNumber(fakeValuesService);
         this.address = new Address(name, fakeValuesService, randomService);
         this.business = new Business(fakeValuesService);

File: src/main/java/com/github/javafaker/DateAndTime.java
Patch:
@@ -61,10 +61,10 @@ public Date future(int atMost, TimeUnit unit, Date referenceDate) {
      * Generates a past date from now. Note that there is a 1 second slack added.
      * 
      * @param atMost
-     *            at most this amount of time ahead from now exclusive.
+     *            at most this amount of time earlier from now exclusive.
      * @param unit
      *            the time unit.
-     * @return a future date from now.
+     * @return a past date from now.
      */
     public Date past(int atMost, TimeUnit unit) {
         Date now = new Date();
@@ -81,7 +81,7 @@ public Date past(int atMost, TimeUnit unit) {
      *            the time unit.
      * @param referenceDate
      *            the past date relative to this date.
-     * @return a future date relative to {@code referenceDate}.
+     * @return a past date relative to {@code referenceDate}.
      */
     public Date past(int atMost, TimeUnit unit, Date referenceDate) {
         long upperBound = unit.toMillis(atMost);

File: src/main/java/com/github/javafaker/Internet.java
Patch:
@@ -27,6 +27,7 @@ public String emailAddress() {
     public String url() {
         return join(new Object[]{
                 "www",
+                ".",
                 name.firstName().toLowerCase(),
                 "-",
                 name.lastName().toLowerCase(),

File: src/test/java/com/github/javafaker/AbstractFakerTest.java
Patch:
@@ -13,7 +13,7 @@
 @RunWith(value = Parameterized.class)
 public abstract class AbstractFakerTest {
 
-    private static final Locale FINISH_LOCALE = new Locale("fi", "FI");
+    private static final Locale FINNISH_LOCALE = new Locale("fi", "FI");
     protected static final Logger logger = LoggerFactory.getLogger(AbstractFakerTest.class);
     protected Faker faker;
 
@@ -34,7 +34,7 @@ public static Collection<Object[]> data() {
         Object[][] data = new Object[][]{
                 {Locale.ENGLISH, null},
                 {Locale.FRENCH, null},
-                {FINISH_LOCALE, null},
+                {FINNISH_LOCALE, null},
                 {Locale.ENGLISH, new Random()},
                 {null, new Random()},
                 {null, null}};

File: src/main/java/com/github/javafaker/Address.java
Patch:
@@ -17,7 +17,7 @@ public String streetName() {
     }
 
     public String streetAddressNumber() {
-        return fakeValuesService.fetchString("address.street_address");
+        return fakeValuesService.numerify(fakeValuesService.fetchString("address.street_address"));
     }
 
     public String streetAddress(boolean includeSecondary) {

File: src/main/java/com/github/javafaker/Faker.java
Patch:
@@ -38,7 +38,7 @@ public Faker() {
     public Faker(Locale locale) {
         logger.info("Using default locale " + locale);
         String languageCode = locale.getLanguage();
-        Map valuesMap = (Map) Yaml.load(ClassLoader.getSystemResourceAsStream(languageCode + ".yml"));
+        Map valuesMap = (Map) Yaml.load(getClass().getClassLoader().getResourceAsStream(languageCode + ".yml"));
         valuesMap = (Map) valuesMap.get(languageCode);
         fakeValuesMap = (Map<String, Object>) valuesMap.get("faker");
     }

