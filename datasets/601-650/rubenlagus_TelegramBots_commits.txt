File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/message/SavePreparedInlineMessage.java
Patch:
@@ -62,7 +62,7 @@ public class SavePreparedInlineMessage extends BotApiMethod<PreparedInlineMessag
      * Pass True if the message can be sent to private chats with bots
      */
     @JsonProperty(ALLOW_BOT_CHATS_FIELD)
-    private Integer allowBotChats;
+    private Boolean allowBotChats;
     /**
      * Pass True if the message can be sent to group and supergroup chats
      */

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/payments/star/EditUserStarSubscription.java
Patch:
@@ -33,7 +33,7 @@ public class EditUserStarSubscription extends BotApiMethodBoolean {
 
     private static final String USER_ID_FIELD = "user_id";
     private static final String TELEGRAM_PAYMENT_CHARGE_ID_FIELD = "telegram_payment_charge_id";
-    private static final String IS_CANCELLED_FIELD = "is_canceled";
+    private static final String IS_CANCELED_FIELD = "is_canceled";
 
     /**
      * Identifier of the user whose subscription will be edited
@@ -52,9 +52,9 @@ public class EditUserStarSubscription extends BotApiMethodBoolean {
      * the subscription must be active up to the end of the current subscription period.
      * Pass False to allow the user to re-enable a subscription that was previously canceled by the bot.
      */
-    @JsonProperty(IS_CANCELLED_FIELD)
+    @JsonProperty(IS_CANCELED_FIELD)
     @NonNull
-    private Boolean isCancelled;
+    private Boolean isCanceled;
 
     @Override
     public String getMethod() {

File: telegrambots-abilities/src/main/java/org/telegram/telegrambots/abilitybots/api/bot/DefaultAbilities.java
Patch:
@@ -454,13 +454,12 @@ private long getUserIdSendError(String username, MessageContext ctx) {
     }
   }
 
-
   private Optional<Message> send(String message, MessageContext ctx, String... args) {
-    return bot.silent.send(getLocalizedMessage(message, ctx.user().getLanguageCode(), args), ctx.chatId());
+    return bot.silent.send(getLocalizedMessage(message, ctx.user().getLanguageCode(), (Object[]) args), ctx.chatId());
   }
 
   private Optional<Message> sendMd(String message, MessageContext ctx, String... args) {
-    return bot.silent.sendMd(getLocalizedMessage(message, ctx.user().getLanguageCode(), args), ctx.chatId());
+    return bot.silent.sendMd(getLocalizedMessage(message, ctx.user().getLanguageCode(), (Object[]) args), ctx.chatId());
   }
 
   private Optional<Message> send(String message, Update upd) {

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/forum/EditForumTopic.java
Patch:
@@ -87,9 +87,6 @@ public void validate() throws TelegramApiValidationException {
         if (messageThreadId <= 0) {
             throw new TelegramApiValidationException("Message Thread Id can't be empty", this);
         }
-        if (iconCustomEmojiId.isEmpty()) {
-            throw new TelegramApiValidationException("Icon Custom Emoji Id can't be empty", this);
-        }
     }
 
     @Override

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/boost/ChatBoostSource.java
Patch:
@@ -12,7 +12,8 @@
 @JsonTypeInfo(
         use = JsonTypeInfo.Id.NAME,
         include = JsonTypeInfo.As.EXISTING_PROPERTY,
-        property = "source"
+        property = "source",
+        defaultImpl = Void.class
 )
 @JsonSubTypes({
         @JsonSubTypes.Type(value = ChatBoostSourcePremium.class, name = ChatBoostSource.PREMIUM_TYPE),

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/chat/background/type/BackgroundType.java
Patch:
@@ -13,7 +13,9 @@
 @JsonTypeInfo(
         use = JsonTypeInfo.Id.NAME,
         include = JsonTypeInfo.As.EXISTING_PROPERTY,
-        property = "type")
+        property = "type",
+        defaultImpl = Void.class
+)
 @JsonSubTypes({
         @JsonSubTypes.Type(value = BackgroundTypeFill.class, name = "fill"),
         @JsonSubTypes.Type(value = BackgroundTypeWallpaper.class, name = "wallpaper"),

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/chat/background/type/fill/BackgroundFill.java
Patch:
@@ -13,7 +13,9 @@
 @JsonTypeInfo(
         use = JsonTypeInfo.Id.NAME,
         include = JsonTypeInfo.As.EXISTING_PROPERTY,
-        property = "type")
+        property = "type",
+        defaultImpl = Void.class
+)
 @JsonSubTypes({
         @JsonSubTypes.Type(value = BackgroundFillSolid.class, name = "solid"),
         @JsonSubTypes.Type(value = BackgroundFillGradient.class, name = "gradient"),

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/chatmember/ChatMember.java
Patch:
@@ -15,7 +15,9 @@
 @JsonTypeInfo(
         use = JsonTypeInfo.Id.NAME,
         include = JsonTypeInfo.As.EXISTING_PROPERTY,
-        property = "status")
+        property = "status",
+        defaultImpl = Void.class
+)
 @JsonSubTypes({
         @JsonSubTypes.Type(value = ChatMemberAdministrator.class, name = "administrator"),
         @JsonSubTypes.Type(value = ChatMemberBanned.class, name = "kicked"),

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/commands/scope/BotCommandScope.java
Patch:
@@ -47,7 +47,9 @@
 @JsonTypeInfo(
         use = JsonTypeInfo.Id.NAME,
         include = JsonTypeInfo.As.EXISTING_PROPERTY,
-        property = "type")
+        property = "type",
+        defaultImpl = Void.class
+)
 @JsonSubTypes({
         @JsonSubTypes.Type(value = BotCommandScopeDefault.class, name = "default"),
         @JsonSubTypes.Type(value = BotCommandScopeAllPrivateChats.class, name = "all_private_chats"),

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/media/InputMedia.java
Patch:
@@ -43,7 +43,8 @@
 @JsonTypeInfo(
         use = JsonTypeInfo.Id.NAME,
         include = JsonTypeInfo.As.EXISTING_PROPERTY,
-        property = "type"
+        property = "type",
+        defaultImpl = Void.class
 )
 @JsonSubTypes({
         @JsonSubTypes.Type(value = InputMediaAnimation.class, name = "animation"),

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/media/paid/InputPaidMedia.java
Patch:
@@ -42,7 +42,8 @@
 @JsonTypeInfo(
         use = JsonTypeInfo.Id.NAME,
         include = JsonTypeInfo.As.EXISTING_PROPERTY,
-        property = "type"
+        property = "type",
+        defaultImpl = Void.class
 )
 @JsonSubTypes({
         @JsonSubTypes.Type(value = InputPaidMediaPhoto.class, name = "photo"),

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/menubutton/MenuButton.java
Patch:
@@ -31,7 +31,9 @@
 @JsonTypeInfo(
         use = JsonTypeInfo.Id.NAME,
         include = JsonTypeInfo.As.EXISTING_PROPERTY,
-        property = "type")
+        property = "type",
+        defaultImpl = Void.class
+)
 @JsonSubTypes({
         @JsonSubTypes.Type(value = MenuButtonDefault.class, name = "default"),
         @JsonSubTypes.Type(value = MenuButtonWebApp.class, name = "web_app"),

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/messageorigin/MessageOrigin.java
Patch:
@@ -12,7 +12,8 @@
 @JsonTypeInfo(
         use = JsonTypeInfo.Id.NAME,
         include = JsonTypeInfo.As.EXISTING_PROPERTY,
-        property = "type"
+        property = "type",
+        defaultImpl = Void.class
 )
 @JsonSubTypes({
         @JsonSubTypes.Type(value = MessageOriginUser.class, name = MessageOrigin.USER_TYPE),

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/passport/dataerror/PassportElementError.java
Patch:
@@ -23,7 +23,8 @@
 @JsonTypeInfo(
         use = JsonTypeInfo.Id.NAME,
         include = JsonTypeInfo.As.EXISTING_PROPERTY,
-        property = "source"
+        property = "source",
+        defaultImpl = Void.class
 )
 @JsonSubTypes({
         @JsonSubTypes.Type(value = PassportElementErrorDataField.class, name = "data"),

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/payments/paidmedia/PaidMedia.java
Patch:
@@ -21,7 +21,8 @@
 @JsonTypeInfo(
         use = JsonTypeInfo.Id.NAME,
         include = JsonTypeInfo.As.EXISTING_PROPERTY,
-        property = "type"
+        property = "type",
+        defaultImpl = Void.class
 )
 @JsonSubTypes({
         @JsonSubTypes.Type(value = PaidMediaPreview.class, name = "preview"),

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/payments/transactionpartner/TransactionPartner.java
Patch:
@@ -18,7 +18,8 @@
 @JsonTypeInfo(
         use = JsonTypeInfo.Id.NAME,
         include = JsonTypeInfo.As.EXISTING_PROPERTY,
-        property = "type"
+        property = "type",
+        defaultImpl = Void.class
 )
 @JsonSubTypes({
         @JsonSubTypes.Type(value = TransactionPartnerFragment.class, name = "fragment"),

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/payments/withdrawalstate/RevenueWithdrawalState.java
Patch:
@@ -17,7 +17,8 @@
 @JsonTypeInfo(
         use = JsonTypeInfo.Id.NAME,
         include = JsonTypeInfo.As.EXISTING_PROPERTY,
-        property = "type"
+        property = "type",
+        defaultImpl = Void.class
 )
 @JsonSubTypes({
         @JsonSubTypes.Type(value = RevenueWithdrawalStatePending.class, name = "pending"),

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/reactions/ReactionType.java
Patch:
@@ -13,7 +13,8 @@
 @JsonTypeInfo(
         use = JsonTypeInfo.Id.NAME,
         include = JsonTypeInfo.As.EXISTING_PROPERTY,
-        property = "type"
+        property = "type",
+        defaultImpl = Void.class
 )
 @JsonSubTypes({
         @JsonSubTypes.Type(value = ReactionTypeEmoji.class, name = ReactionType.EMOJI_TYPE),

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/payments/paidmedia/PaidMediaPhoto.java
Patch:
@@ -29,7 +29,7 @@
 @Jacksonized
 @JsonIgnoreProperties(ignoreUnknown = true)
 @SuperBuilder
-public class PaidMediaPhoto implements TransactionPartner {
+public class PaidMediaPhoto implements PaidMedia {
     private static final String TYPE_FIELD = "type";
     private static final String PHOTO_FIELD = "photo";
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/payments/paidmedia/PaidMediaPreview.java
Patch:
@@ -25,7 +25,7 @@
 @Jacksonized
 @JsonIgnoreProperties(ignoreUnknown = true)
 @SuperBuilder
-public class PaidMediaPreview implements TransactionPartner {
+public class PaidMediaPreview implements PaidMedia {
     private static final String TYPE_FIELD = "type";
     private static final String WIDTH_FIELD = "width";
     private static final String HEIGHT_FIELD = "height";

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/payments/paidmedia/PaidMediaVideo.java
Patch:
@@ -11,7 +11,6 @@
 import lombok.experimental.SuperBuilder;
 import lombok.extern.jackson.Jacksonized;
 import org.telegram.telegrambots.meta.api.objects.Video;
-import org.telegram.telegrambots.meta.api.objects.payments.transactionpartner.TransactionPartner;
 
 /**
  * @author Ruben Bermudez
@@ -27,7 +26,7 @@
 @Jacksonized
 @JsonIgnoreProperties(ignoreUnknown = true)
 @SuperBuilder
-public class PaidMediaVideo implements TransactionPartner {
+public class PaidMediaVideo implements PaidMedia {
     private static final String TYPE_FIELD = "type";
     private static final String VIDEO_FIELD = "video";
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/TelegramUrl.java
Patch:
@@ -13,6 +13,7 @@ public class TelegramUrl {
     private String schema;
     private String host;
     private int port;
+    private boolean testServer;
 
-    public static final TelegramUrl DEFAULT_URL = new TelegramUrl("https", "api.telegram.org", 443);
+    public static final TelegramUrl DEFAULT_URL = new TelegramUrl("https", "api.telegram.org", 443, false);
 }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/invoices/SendInvoice.java
Patch:
@@ -115,7 +115,6 @@ public class SendInvoice extends BotApiMethodMessage {
      * with the value used as the start parameter
      */
     @JsonProperty(START_PARAMETER_FIELD)
-    @NonNull
     private String startParameter;
     /**
      * Three-letter ISO 4217 currency code, see more on currencies.

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/invoices/SendInvoice.java
Patch:
@@ -115,7 +115,6 @@ public class SendInvoice extends BotApiMethodMessage {
      * with the value used as the start parameter
      */
     @JsonProperty(START_PARAMETER_FIELD)
-    @NonNull
     private String startParameter;
     /**
      * Three-letter ISO 4217 currency code, see more on currencies.

File: telegrambots-abilities/src/main/java/org/telegram/telegrambots/abilitybots/api/bot/BaseAbilityBot.java
Patch:
@@ -179,8 +179,8 @@ public Set<Long> admins() {
      */
     @Override
     public void consume(Update update) {
-        log.info(format("[%s] New update [%s] received at %s", botUsername, update.getUpdateId(), now()));
-        log.info(update.toString());
+        log.debug(format("[%s] New update [%s] received at %s", botUsername, update.getUpdateId(), now()));
+        log.debug(update.toString());
         long millisStarted = System.currentTimeMillis();
 
         Stream.of(update)
@@ -204,7 +204,7 @@ public void consume(Update update) {
         db.commit();
 
         long processingTime = System.currentTimeMillis() - millisStarted;
-        log.info(format("[%s] Processing of update [%s] ended at %s%n---> Processing time: [%d ms] <---%n", botUsername, update.getUpdateId(), now(), processingTime));
+        log.debug(format("[%s] Processing of update [%s] ended at %s%n---> Processing time: [%d ms] <---%n", botUsername, update.getUpdateId(), now(), processingTime));
     }
 
     public Privacy getPrivacy(Update update, long id) {

File: telegrambots-abilities/src/main/java/org/telegram/telegrambots/abilitybots/api/bot/BaseAbilityBot.java
Patch:
@@ -179,8 +179,8 @@ public Set<Long> admins() {
      */
     @Override
     public void consume(Update update) {
-        log.info(format("[%s] New update [%s] received at %s", botUsername, update.getUpdateId(), now()));
-        log.info(update.toString());
+        log.debug(format("[%s] New update [%s] received at %s", botUsername, update.getUpdateId(), now()));
+        log.debug(update.toString());
         long millisStarted = System.currentTimeMillis();
 
         Stream.of(update)
@@ -204,7 +204,7 @@ public void consume(Update update) {
         db.commit();
 
         long processingTime = System.currentTimeMillis() - millisStarted;
-        log.info(format("[%s] Processing of update [%s] ended at %s%n---> Processing time: [%d ms] <---%n", botUsername, update.getUpdateId(), now(), processingTime));
+        log.debug(format("[%s] Processing of update [%s] ended at %s%n---> Processing time: [%d ms] <---%n", botUsername, update.getUpdateId(), now(), processingTime));
     }
 
     public Privacy getPrivacy(Update update, long id) {

File: telegrambots-longpolling/src/main/java/org/telegram/telegrambots/longpolling/util/DefaultGetUpdatesGenerator.java
Patch:
@@ -11,8 +11,8 @@
 @AllArgsConstructor
 @NoArgsConstructor
 public class DefaultGetUpdatesGenerator implements Function<Integer, GetUpdates> {
-    private static final int GET_UPDATES_LIMIT = 1;
-    private static final int GET_UPDATES_TIMEOUT = 1;
+    private static final int GET_UPDATES_LIMIT = 100;
+    private static final int GET_UPDATES_TIMEOUT = 50;
 
     private List<String> allowedUpdates = new ArrayList<>();
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/updates/GetUpdates.java
Patch:
@@ -65,9 +65,7 @@ public class GetUpdates extends BotApiMethod<ArrayList<Update>>{
      * For example, specify ["message", "edited_channel_post", "callback_query"] to only receive updates of these types.
      * See Update for a complete list of available update types. Specify an empty list to receive all update types except
      * chat_member, message_reaction, and message_reaction_count (default).
-     *
      * If not specified, the previous setting will be used.
-     *
      * Please note that this parameter doesn't affect updates created before the call to the getUpdates,
      * so unwanted updates may be received for a short period of time.
      */

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/UsersShared.java
Patch:
@@ -46,7 +46,7 @@ public class UsersShared implements BotApiObject {
     private List<UserShared> users;
 
     /**
-     * Use {{@link #getUsers()}}
+     * Use {{@link UsersShared#getUsers()}}
      */
     @Deprecated
     @JsonIgnore

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/media/InputMediaAudio.java
Patch:
@@ -24,7 +24,6 @@
  * Represents an audio file to be treated as music to be sent.
  */
 @SuppressWarnings({"unused"})
-
 @EqualsAndHashCode(callSuper = true)
 @Getter
 @Setter

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/Birthdate.java
Patch:
@@ -27,7 +27,7 @@
 @Jacksonized
 @JsonIgnoreProperties(ignoreUnknown = true)
 public class Birthdate implements BotApiObject {
-    private static final String DAY_FIELD = "value";
+    private static final String DAY_FIELD = "day";
     private static final String MONTH_FIELD = "month";
     private static final String YEAR_FIELD = "year";
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/stickers/CreateNewStickerSet.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.util.Arrays;
 import java.util.List;
-import java.util.Objects;
 
 /**
  * @author Ruben Bermudez
@@ -99,7 +98,7 @@ public String getMethod() {
      */
     @Deprecated
     public String getStickerFormat() throws TelegramApiException {
-        List<String> formats = stickers.stream().map(InputSticker::getFormat).filter(Objects::nonNull).distinct().toList();
+        List<String> formats = stickers.stream().map(InputSticker::getFormat).distinct().toList();
         if (formats.size() > 1) {
             throw new TelegramApiException("Multiple format present in strickers");
         }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/stickers/CreateNewStickerSet.java
Patch:
@@ -114,8 +114,8 @@ public String getStickerFormat() throws TelegramApiException {
     @Deprecated
     public void setStickerFormat(String stickerFormat) throws TelegramApiException {
         String existingFormat = getStickerFormat();
-        if (existingFormat != null && !existingFormat.equals(stickerFormat)) {
-            this.stickers.forEach(x -> x.setFormat(existingFormat));
+        if (existingFormat == null || !existingFormat.equals(stickerFormat)) {
+            this.stickers.forEach(x -> x.setFormat(stickerFormat));
         }
     }
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/games/CallbackGame.java
Patch:
@@ -23,6 +23,7 @@
 import lombok.Setter;
 import lombok.ToString;
 import org.telegram.telegrambots.meta.api.interfaces.BotApiObject;
+import org.telegram.telegrambots.meta.api.interfaces.Validable;
 
 /**
  * @author Ruben Bermudez
@@ -34,5 +35,5 @@
 @Setter
 @ToString
 @NoArgsConstructor
-public class CallbackGame implements BotApiObject {
+public class CallbackGame implements BotApiObject, Validable {
 }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/inlinequery/result/InlineQueryResultDocument.java
Patch:
@@ -107,9 +107,6 @@ public void validate() throws TelegramApiValidationException {
         if (parseMode != null && (captionEntities != null && !captionEntities.isEmpty()) ) {
             throw new TelegramApiValidationException("Parse mode can't be enabled if Entities are provided", this);
         }
-        if (thumbnailUrl != null && !"image/jpeg".equalsIgnoreCase(thumbnailUrl)) {
-            throw new TelegramApiValidationException("Thumbnail Url must be JPEG", this);
-        }
         if (inputMessageContent != null) {
             inputMessageContent.validate();
         }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/inlinequery/result/InlineQueryResultVideo.java
Patch:
@@ -99,9 +99,6 @@ public void validate() throws TelegramApiValidationException {
         if (parseMode != null && (captionEntities != null && !captionEntities.isEmpty()) ) {
             throw new TelegramApiValidationException("Parse mode can't be enabled if Entities are provided", this);
         }
-        if (thumbnailUrl != null && !"image/jpeg".equalsIgnoreCase(thumbnailUrl)) {
-            throw new TelegramApiValidationException("Thumbnail Url must be JPEG", this);
-        }
         if (inputMessageContent != null) {
             inputMessageContent.validate();
         }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/name/GetMyName.java
Patch:
@@ -27,7 +27,7 @@
 @AllArgsConstructor
 @Builder
 public class GetMyName extends BotApiMethod<BotName> {
-    public static final String PATH = "getMyDescription";
+    public static final String PATH = "getMyName";
 
     private static final String LANGUAGE_CODE_FIELD = "language_code";
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/stickers/SetStickerSetThumb.java
Patch:
@@ -19,6 +19,7 @@
  * Use this method to set the thumbnail of a regular or mask sticker set.
  * The format of the thumbnail file must match the format of the stickers in the set.
  * Returns True on success.
+ * @deprecated Use {@link SetStickerSetThumbnail}
  */
 @EqualsAndHashCode(callSuper = false)
 @Getter
@@ -28,6 +29,7 @@
 @RequiredArgsConstructor
 @AllArgsConstructor
 @Builder
+@Deprecated
 public class SetStickerSetThumb extends BotApiMethodBoolean {
     public static final String PATH = "setStickerSetThumb";
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/WriteAccessAllowed.java
Patch:
@@ -20,7 +20,7 @@
 @Getter
 @Setter
 @ToString
-@NoArgsConstructor
+@NoArgsConstructor(force = true)
 @AllArgsConstructor
 public class WriteAccessAllowed implements BotApiObject {
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/Chat.java
Patch:
@@ -303,7 +303,7 @@ public class Chat implements BotApiObject {
      * Returned only in getChat.
      */
     @JsonProperty(PROFILE_BACKGROUND_CUSTOM_EMOJI_ID_FIELD)
-    private Boolean profileBackgroundCustomEmojiId;
+    private String profileBackgroundCustomEmojiId;
     /**
      * Optional.
      * True, if new chat members will have access to old messages; available only to chat administrators.

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/reactions/ReactionTypeCustomEmoji.java
Patch:
@@ -48,7 +48,7 @@ public void validate() throws TelegramApiValidationException {
         if (customEmoji.isEmpty()) {
             throw new TelegramApiValidationException("CustomEmoji parameter can't be empty", this);
         }
-        if (ReactionType.CUSTOM_EMOJI_TYPE.equals(type)) {
+        if (!ReactionType.CUSTOM_EMOJI_TYPE.equals(type)) {
             throw new TelegramApiValidationException("Type must be \"custom_emoji\"", this);
         }
     }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/reactions/ReactionTypeEmoji.java
Patch:
@@ -52,7 +52,7 @@ public void validate() throws TelegramApiValidationException {
         if (emoji.isEmpty()) {
             throw new TelegramApiValidationException("Emoji parameter can't be empty", this);
         }
-        if (ReactionType.EMOJI_TYPE.equals(type)) {
+        if (!ReactionType.EMOJI_TYPE.equals(type)) {
             throw new TelegramApiValidationException("Type must be \"emoji\"", this);
         }
     }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/WriteAccessAllowed.java
Patch:
@@ -4,6 +4,7 @@
 import lombok.AllArgsConstructor;
 import lombok.EqualsAndHashCode;
 import lombok.Getter;
+import lombok.NoArgsConstructor;
 import lombok.Setter;
 import lombok.ToString;
 import org.telegram.telegrambots.meta.api.interfaces.BotApiObject;
@@ -19,6 +20,7 @@
 @Getter
 @Setter
 @ToString
+@NoArgsConstructor
 @AllArgsConstructor
 public class WriteAccessAllowed implements BotApiObject {
 

File: telegrambots/src/main/java/org/telegram/telegrambots/bots/DefaultAbsSender.java
Patch:
@@ -737,7 +737,7 @@ public Boolean execute(CreateNewStickerSet createNewStickerSet) throws TelegramA
                 addInputFile(builder, createNewStickerSet.getPngSticker(), CreateNewStickerSet.PNGSTICKER_FIELD, true);
             } else if (createNewStickerSet.getTgsSticker() != null)  {
                 addInputFile(builder, createNewStickerSet.getTgsSticker(), CreateNewStickerSet.TGSSTICKER_FIELD, true);
-            } else {
+            } else if (createNewStickerSet.getWebmSticker() != null) {
                 addInputFile(builder, createNewStickerSet.getWebmSticker(), CreateNewStickerSet.WEBMSTICKER_FIELD, true);
             }
             if (createNewStickerSet.getMaskPosition() != null) {

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/stickers/StickerSet.java
Patch:
@@ -36,7 +36,7 @@ public class StickerSet implements BotApiObject {
     /**
      * Type of stickers in the set, currently one of “regular”, “mask”, “custom_emoji”
      */
-    @JsonProperty(STICKERS_FIELD)
+    @JsonProperty(STICKERTYPE_FIELD)
     private String stickerType;
     /**
      * Sticker set name

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/stickers/StickerSet.java
Patch:
@@ -36,7 +36,7 @@ public class StickerSet implements BotApiObject {
     /**
      * Type of stickers in the set, currently one of “regular”, “mask”, “custom_emoji”
      */
-    @JsonProperty(STICKERS_FIELD)
+    @JsonProperty(STICKERTYPE_FIELD)
     private String stickerType;
     /**
      * Sticker set name

File: telegrambots-abilities/src/test/java/org/telegram/abilitybots/api/bot/AbilityBotI18nTest.java
Patch:
@@ -19,8 +19,8 @@
 import static org.telegram.abilitybots.api.db.MapDBContext.offlineInstance;
 
 class AbilityBotI18nTest {
-  private static final User NO_LANGUAGE_USER = new User(1L, "first", false, "last", "username", null, false, false, false);
-  private static final User ITALIAN_USER = new User(2L, "first", false, "last", "username", "it-IT", false, false, false);
+  private static final User NO_LANGUAGE_USER = new User(1L, "first", false, "last", "username", null, false, false, false, false, false);
+  private static final User ITALIAN_USER = new User(2L, "first", false, "last", "username", "it-IT", false, false, false, false, false);
 
   private DBContext db;
   private NoPublicCommandsBot bot;

File: telegrambots-abilities/src/test/java/org/telegram/abilitybots/api/bot/AbilityBotTest.java
Patch:
@@ -374,7 +374,7 @@ void canEditUser() {
     String newFirstName = USER.getFirstName() + "-test";
     String newLastName = USER.getLastName() + "-test";
     long sameId = USER.getId();
-    User changedUser = new User(sameId, newFirstName, false, newLastName, newUsername, "en", false, false, false);
+    User changedUser = new User(sameId, newFirstName, false, newLastName, newUsername, "en", false, false, false, false, false);
 
     mockAlternateUser(update, message, changedUser);
 

File: telegrambots-abilities/src/test/java/org/telegram/abilitybots/api/bot/TestUtils.java
Patch:
@@ -11,8 +11,8 @@
 import static org.telegram.abilitybots.api.objects.MessageContext.newContext;
 
 public final class TestUtils {
-  public static final User USER = new User(1L, "first", false, "last", "username", null, false, false, false);
-  public static final User CREATOR = new User(1337L, "creatorFirst", false, "creatorLast", "creatorUsername", null, false, false, false);
+  public static final User USER = new User(1L, "first", false, "last", "username", null, false, false, false, false, false);
+  public static final User CREATOR = new User(1337L, "creatorFirst", false, "creatorLast", "creatorUsername", null, false, false, false, false, false);
 
   private TestUtils() {
 

File: telegrambots-abilities/src/test/java/org/telegram/abilitybots/api/db/MapDBContextTest.java
Patch:
@@ -154,6 +154,6 @@ void testToString() throws Exception {
     var.set(USER);
     db.commit();
     Var<User> changedVar = db.getVar(varName);
-    Assertions.assertEquals("MapDBVar{var=User(id=1, firstName=first, isBot=false, lastName=last, userName=username, languageCode=null, canJoinGroups=false, canReadAllGroupMessages=false, supportInlineQueries=false)}", ((MapDBVar) (changedVar)).toString());
+    Assertions.assertEquals("MapDBVar{var=User(id=1, firstName=first, isBot=false, lastName=last, userName=username, languageCode=null, canJoinGroups=false, canReadAllGroupMessages=false, supportInlineQueries=false, isPremium=false, addedToAttachmentMenu=false)}", ((MapDBVar) (changedVar)).toString());
   }
 }

File: telegrambots/src/test/java/org/telegram/telegrambots/test/TestRestApi.java
Patch:
@@ -227,7 +227,7 @@ public void TestGetChatMembersCount() {
                         .request(MediaType.APPLICATION_JSON)
                         .post(entity, GetChatMemberCount.class);
 
-        assertEquals("{\"chat_id\":\"12345\",\"method\":\"getChatMembersCount\"}", map(result));
+        assertEquals("{\"chat_id\":\"12345\",\"method\":\"getChatMemberCount\"}", map(result));
     }
 
     @Test
@@ -305,7 +305,7 @@ public void TestKickChatMember() {
                         .request(MediaType.APPLICATION_JSON)
                         .post(entity, BanChatMember.class);
 
-        assertEquals("{\"chat_id\":\"12345\",\"user_id\":98765,\"method\":\"kickchatmember\"}", map(result));
+        assertEquals("{\"chat_id\":\"12345\",\"user_id\":98765,\"method\":\"banChatMember\"}", map(result));
     }
 
     @Test

File: telegrambots-abilities/src/test/java/org/telegram/abilitybots/api/bot/AbilityBotTest.java
Patch:
@@ -383,7 +383,7 @@ void canEditUser() {
     Map<String, Long> expectedUserIds = ImmutableMap.of(changedUser.getUserName(), changedUser.getId());
     Map<Long, User> expectedUsers = ImmutableMap.of(changedUser.getId(), changedUser);
     assertEquals(bot.userIds(), expectedUserIds, "User was not properly edited");
-    assertEquals(expectedUsers, expectedUsers, "User was not properly edited");
+    assertEquals(bot.users(), expectedUsers, "User was not properly edited");
   }
 
   @Test

File: telegrambots/src/test/java/org/telegram/telegrambots/test/TestRestApi.java
Patch:
@@ -227,7 +227,7 @@ public void TestGetChatMembersCount() {
                         .request(MediaType.APPLICATION_JSON)
                         .post(entity, GetChatMemberCount.class);
 
-        assertEquals("{\"chat_id\":\"12345\",\"method\":\"getChatMembersCount\"}", map(result));
+        assertEquals("{\"chat_id\":\"12345\",\"method\":\"getChatMemberCount\"}", map(result));
     }
 
     @Test
@@ -305,7 +305,7 @@ public void TestKickChatMember() {
                         .request(MediaType.APPLICATION_JSON)
                         .post(entity, BanChatMember.class);
 
-        assertEquals("{\"chat_id\":\"12345\",\"user_id\":98765,\"method\":\"kickchatmember\"}", map(result));
+        assertEquals("{\"chat_id\":\"12345\",\"user_id\":98765,\"method\":\"banChatMember\"}", map(result));
     }
 
     @Test

File: telegrambots-chat-session-bot/src/main/java/org/telegram/telegrambots/session/TelegramLongPollingSessionBot.java
Patch:
@@ -27,6 +27,7 @@ public TelegramLongPollingSessionBot(ChatIdConverter chatIdConverter){
     }
 
     public TelegramLongPollingSessionBot(ChatIdConverter chatIdConverter, DefaultBotOptions defaultBotOptions){
+        super(defaultBotOptions);
         this.setSessionManager(new DefaultSessionManager());
         this.setChatIdConverter(chatIdConverter);
         AbstractSessionDAO sessionDAO = (AbstractSessionDAO) sessionManager.getSessionDAO();

File: telegrambots-chat-session-bot/src/main/java/org/telegram/telegrambots/session/TelegramLongPollingSessionBot.java
Patch:
@@ -27,6 +27,7 @@ public TelegramLongPollingSessionBot(ChatIdConverter chatIdConverter){
     }
 
     public TelegramLongPollingSessionBot(ChatIdConverter chatIdConverter, DefaultBotOptions defaultBotOptions){
+        super(defaultBotOptions);
         this.setSessionManager(new DefaultSessionManager());
         this.setChatIdConverter(chatIdConverter);
         AbstractSessionDAO sessionDAO = (AbstractSessionDAO) sessionManager.getSessionDAO();

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/ChatJoinRequest.java
Patch:
@@ -33,5 +33,5 @@ public class ChatJoinRequest implements BotApiObject {
     @JsonProperty(BIO_FIELD)
     private String bio; ///< Optional. Bio of the user.
     @JsonProperty(INVITELINK_FIELD)
-    private String inviteLink; ///< Optional. Chat invite link that was used by the user to send the join request
+    private ChatInviteLink inviteLink; ///< Optional. Chat invite link that was used by the user to send the join request
 }

File: telegrambots-abilities/src/test/java/org/telegram/abilitybots/api/bot/AbilityBotTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.telegram.telegrambots.meta.api.objects.Message;
 import org.telegram.telegrambots.meta.api.objects.Update;
 import org.telegram.telegrambots.meta.api.objects.User;
+import org.telegram.telegrambots.meta.api.objects.chatmember.ChatMember;
 import org.telegram.telegrambots.meta.api.objects.chatmember.ChatMemberAdministrator;
 import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
 
@@ -453,8 +454,8 @@ void canValidateGroupAdminPrivacy() {
     mockUser(update, message, user);
     when(message.isGroupMessage()).thenReturn(true);
 
-    ChatMemberAdministrator member = mock(ChatMemberAdministrator.class);
-    when(member.getUser()).thenReturn(user);
+    ChatMember member = mock(ChatMember.class);
+    when(member.getStatus()).thenReturn(ChatMemberAdministrator.STATUS);
     when(member.getUser()).thenReturn(user);
 
     when(silent.execute(any(GetChatAdministrators.class))).thenReturn(Optional.of(newArrayList(member)));

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/send/SendInvoice.java
Patch:
@@ -199,9 +199,6 @@ public void validate() throws TelegramApiValidationException {
         if (Strings.isNullOrEmpty(providerToken)) {
             throw new TelegramApiValidationException("ProviderToken parameter can't be empty", this);
         }
-        if (Strings.isNullOrEmpty(startParameter)) {
-            throw new TelegramApiValidationException("StartParameter parameter can't be empty", this);
-        }
         if (Strings.isNullOrEmpty(currency)) {
             throw new TelegramApiValidationException("Currency parameter can't be empty", this);
         }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/stickers/SetStickerSetThumb.java
Patch:
@@ -31,7 +31,7 @@
 @AllArgsConstructor
 @Builder
 public class SetStickerSetThumb extends BotApiMethod<Boolean> {
-    private static final String PATH = "setStickerSetThumb";
+    public static final String PATH = "setStickerSetThumb";
 
     public static final String NAME_FIELD = "name";
     public static final String USERID_FIELD = "user_id";

File: telegrambots/src/main/java/org/telegram/telegrambots/bots/DefaultAbsSender.java
Patch:
@@ -610,7 +610,7 @@ public Boolean execute(SetStickerSetThumb setStickerSetThumb) throws TelegramApi
         assertParamNotNull(setStickerSetThumb, "setStickerSetThumb");
         setStickerSetThumb.validate();
         try {
-            String url = getBaseUrl() + AddStickerToSet.PATH;
+            String url = getBaseUrl() + SetStickerSetThumb.PATH;
             HttpPost httppost = configuredHttpPost(url);
             MultipartEntityBuilder builder = MultipartEntityBuilder.create();
             builder.setLaxMode();
@@ -623,7 +623,7 @@ public Boolean execute(SetStickerSetThumb setStickerSetThumb) throws TelegramApi
 
             return setStickerSetThumb.deserializeResponse(sendHttpPostRequest(httppost));
         } catch (IOException e) {
-            throw new TelegramApiException("Unable to add sticker to set", e);
+            throw new TelegramApiException("Unable to set sticker set thumb", e);
         }
     }
 

File: telegrambots/src/main/java/org/telegram/telegrambots/bots/DefaultAbsSender.java
Patch:
@@ -623,7 +623,7 @@ public Boolean execute(SetStickerSetThumb setStickerSetThumb) throws TelegramApi
 
             return setStickerSetThumb.deserializeResponse(sendHttpPostRequest(httppost));
         } catch (IOException e) {
-            throw new TelegramApiException("Unable to add sticker to set", e);
+            throw new TelegramApiException("Unable to set sticker set thumb", e);
         }
     }
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/stickers/SetStickerSetThumb.java
Patch:
@@ -31,7 +31,7 @@
 @AllArgsConstructor
 @Builder
 public class SetStickerSetThumb extends BotApiMethod<Boolean> {
-    private static final String PATH = "setStickerSetThumb";
+    public static final String PATH = "setStickerSetThumb";
 
     public static final String NAME_FIELD = "name";
     public static final String USERID_FIELD = "user_id";

File: telegrambots/src/main/java/org/telegram/telegrambots/bots/DefaultAbsSender.java
Patch:
@@ -610,7 +610,7 @@ public Boolean execute(SetStickerSetThumb setStickerSetThumb) throws TelegramApi
         assertParamNotNull(setStickerSetThumb, "setStickerSetThumb");
         setStickerSetThumb.validate();
         try {
-            String url = getBaseUrl() + AddStickerToSet.PATH;
+            String url = getBaseUrl() + SetStickerSetThumb.PATH;
             HttpPost httppost = configuredHttpPost(url);
             MultipartEntityBuilder builder = MultipartEntityBuilder.create();
             builder.setLaxMode();

File: telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/toggle/CustomToggle.java
Patch:
@@ -3,12 +3,11 @@
 import org.telegram.abilitybots.api.objects.Ability;
 
 import java.util.HashMap;
-import java.util.Locale;
 import java.util.Map;
 import java.util.Properties;
 
 /**
- * This custom toggle can be used to customize default abilities supplied by the library. Users can call {@link CustomToggle#config} to
+ * This custom toggle can be used to customize default abilities supplied by the library. Users can call {@link CustomToggle#toggle} to
  * rename the default abilities or {@link CustomToggle#turnOff} to simply turn off the said ability.
  */
 public class CustomToggle implements AbilityToggle {

File: telegrambots-meta/src/test/java/org/telegram/telegrambots/meta/test/TestTelegramApi.java
Patch:
@@ -28,7 +28,7 @@ public void setUp() {
     }
 
     @Test
-    void TestTelegramApiMustBeInitializableForLongPolling() {
+    void testTelegramApiMustBeInitializableForLongPolling() {
         try {
             new TelegramBotsApi(BotSession.class);
         } catch (TelegramApiException e) {
@@ -37,7 +37,7 @@ void TestTelegramApiMustBeInitializableForLongPolling() {
     }
 
     @Test
-    void TestTelegramApiMustBeInitializableForWebhook() {
+    void testTelegramApiMustBeInitializableForWebhook() {
         try {
             new TelegramBotsApi(BotSession.class, webhook);
         } catch (TelegramApiException e) {
@@ -46,7 +46,7 @@ void TestTelegramApiMustBeInitializableForWebhook() {
     }
 
     @Test
-    void TestTelegramApiMustBeThrowIfNotCreatedForWebhook() {
+    void testTelegramApiMustBeThrowIfNotCreatedForWebhook() {
         try {
             TelegramBotsApi telegramBotsApi = new TelegramBotsApi(BotSession.class, null);
             telegramBotsApi.registerBot(new WebhookBot() {

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/Message.java
Patch:
@@ -87,7 +87,7 @@ public class Message implements BotApiObject {
     private static final String VIABOT_FIELD = "via_bot";
     private static final String SENDERCHAT_FIELD = "sender_chat";
     private static final String PROXIMITYALERTTRIGGERED_FIELD = "proximity_alert_triggered";
-    private static final String MESSAGEAUTODELETETIMERCHANGED_FIELD = "message_auto_delete_timer_changed\t";
+    private static final String MESSAGEAUTODELETETIMERCHANGED_FIELD = "message_auto_delete_timer_changed";
     private static final String VOICECHATSTARTED_FIELD = "voice_chat_started";
     private static final String VOICECHATENDED_FIELD = "voice_chat_ended";
     private static final String VOICECHATPARTICIPANTSINVITED_FIELD = "voice_chat_participants_invited";

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/groupadministration/EditChatInviteLink.java
Patch:
@@ -39,7 +39,7 @@
 @RequiredArgsConstructor
 @Builder
 public class EditChatInviteLink extends BotApiMethod<ChatInviteLink> {
-    public static final String PATH = "createChatInviteLink";
+    public static final String PATH = "editChatInviteLink";
 
     private static final String CHATID_FIELD = "chat_id";
     private static final String INVITELINK_FIELD = "invite_link";

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/groupadministration/RevokeChatInviteLink.java
Patch:
@@ -39,7 +39,7 @@
 @AllArgsConstructor
 @Builder
 public class RevokeChatInviteLink extends BotApiMethod<ChatInviteLink> {
-    public static final String PATH = "createChatInviteLink";
+    public static final String PATH = "revokeChatInviteLink";
 
     private static final String CHATID_FIELD = "chat_id";
     private static final String INVITELINK_FIELD = "invite_link";

File: telegrambots/src/main/java/org/telegram/telegrambots/bots/DefaultBotOptions.java
Patch:
@@ -41,7 +41,7 @@ public DefaultBotOptions() {
         baseUrl = ApiConstants.BASE_URL;
         httpContext = HttpClientContext.create();
         proxyType = ProxyType.NO_PROXY;
-        getUpdatesLimit = ApiConstants.GETUPDATES_TIMEOUT;
+        getUpdatesTimeout = ApiConstants.GETUPDATES_TIMEOUT;
         getUpdatesLimit = 100;
     }
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/groupadministration/EditChatInviteLink.java
Patch:
@@ -39,7 +39,7 @@
 @RequiredArgsConstructor
 @Builder
 public class EditChatInviteLink extends BotApiMethod<ChatInviteLink> {
-    public static final String PATH = "createChatInviteLink";
+    public static final String PATH = "editChatInviteLink";
 
     private static final String CHATID_FIELD = "chat_id";
     private static final String INVITELINK_FIELD = "invite_link";

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/groupadministration/RevokeChatInviteLink.java
Patch:
@@ -39,7 +39,7 @@
 @AllArgsConstructor
 @Builder
 public class RevokeChatInviteLink extends BotApiMethod<ChatInviteLink> {
-    public static final String PATH = "createChatInviteLink";
+    public static final String PATH = "revokeChatInviteLink";
 
     private static final String CHATID_FIELD = "chat_id";
     private static final String INVITELINK_FIELD = "invite_link";

File: telegrambots/src/main/java/org/telegram/telegrambots/bots/DefaultBotOptions.java
Patch:
@@ -41,7 +41,7 @@ public DefaultBotOptions() {
         baseUrl = ApiConstants.BASE_URL;
         httpContext = HttpClientContext.create();
         proxyType = ProxyType.NO_PROXY;
-        getUpdatesLimit = ApiConstants.GETUPDATES_TIMEOUT;
+        getUpdatesTimeout = ApiConstants.GETUPDATES_TIMEOUT;
         getUpdatesLimit = 100;
     }
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/send/SendAudio.java
Patch:
@@ -57,8 +57,6 @@ public class SendAudio extends PartialBotApiMethod<Message> {
     public static final String CAPTION_ENTITIES_FIELD = "caption_entities";
     public static final String ALLOWSENDINGWITHOUTREPLY_FIELD = "allow_sending_without_reply";
 
-    @NonNull
-    private Integer duration; ///< Integer	Duration of the audio in seconds as defined by sender
     @NonNull
     private String chatId; ///< Unique identifier for the chat to send the message to (or Username fro channels)
     @NonNull
@@ -70,6 +68,7 @@ public class SendAudio extends PartialBotApiMethod<Message> {
     private String title; ///< Optional. Title of sent audio
     private String caption; ///< Optional. Audio caption (may also be used when resending documents by file_id), 0-200 characters
     private String parseMode; ///< Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.
+    private Integer duration; ///< Integer	Duration of the audio in seconds as defined by sender
     /**
      * Optional.
      * Thumbnail of the file sent. The thumbnail should be in JPEG format and less than 200 kB in size.

File: telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/bot/AbilityWebhookBot.java
Patch:
@@ -58,14 +58,14 @@ protected AbilityWebhookBot(String botToken, String botUsername, String botPath)
     }
 
     @Override
-    public BotApiMethod onWebhookUpdateReceived(Update update) {
+    public BotApiMethod<?> onWebhookUpdateReceived(Update update) {
         super.onUpdateReceived(update);
         return null;
     }
 
     @Override
     public void setWebhook(SetWebhook setWebhook) throws TelegramApiException {
-        WebhookUtils.setWebhook(this, setWebhook);
+        WebhookUtils.setWebhook(this, this, setWebhook);
     }
 
     @Override

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/updates/SetWebhook.java
Patch:
@@ -50,7 +50,7 @@ public class SetWebhook extends BotApiMethod<Boolean> {
 
     @JsonProperty(URL_FIELD)
     @NonNull
-    private String url; ///< Optional. HTTPS url to send updates to. Use an empty string to remove webhook integration
+    private String url; ///< HTTPS url to send updates to. Use an empty string to remove webhook integration
     @JsonProperty(CERTIFICATE_FIELD)
     private InputFile certificate; ///< Optional. Upload your public key certificate so that the root certificate in use can be checked
     /**

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/generics/WebhookBot.java
Patch:
@@ -16,7 +16,7 @@ public interface WebhookBot extends TelegramBot {
      * This method is called when receiving updates via webhook
      * @param update Update received
      */
-    BotApiMethod onWebhookUpdateReceived(Update update);
+    BotApiMethod<?> onWebhookUpdateReceived(Update update);
 
     /**
      * Execute setWebhook method to set up the url of the webhook

File: telegrambots/src/main/java/org/telegram/telegrambots/Constants.java
Patch:
@@ -3,9 +3,9 @@
 /**
  * @author Ruben Bermudez
  * @version 1.0
- * @brief Constants needed for Telegram Bots API
- * @date 20 of June of 2015
+ * Constants needed for Telegram Bots API
  */
 public class Constants {
     public static final int SOCKET_TIMEOUT = 75 * 1000;
+    public static final String WEBHOOK_URL_PATH = "callback";
 }

File: telegrambots/src/main/java/org/telegram/telegrambots/bots/TelegramWebhookBot.java
Patch:
@@ -23,6 +23,6 @@ public TelegramWebhookBot(DefaultBotOptions options) {
 
   @Override
   public void setWebhook(SetWebhook setWebhook) throws TelegramApiException {
-    WebhookUtils.setWebhook(this, setWebhook);
+    WebhookUtils.setWebhook(this, this, setWebhook);
   }
 }
\ No newline at end of file

File: telegrambots/src/main/java/org/telegram/telegrambots/updatesreceivers/RestApi.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.telegram.telegrambots.Constants;
 import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
 import org.telegram.telegrambots.meta.api.objects.Update;
 import org.telegram.telegrambots.meta.exceptions.TelegramApiValidationException;
@@ -22,7 +23,7 @@
  * @version 1.0
  * Rest api to for webhook callback function
  */
-@Path("callback")
+@Path(Constants.WEBHOOK_URL_PATH)
 public class RestApi {
     private static final Logger log = LoggerFactory.getLogger(RestApi.class);
 
@@ -44,7 +45,7 @@ public void registerCallback(WebhookBot callback) {
     public Response updateReceived(@PathParam("botPath") String botPath, Update update) {
         if (callbacks.containsKey(botPath)) {
             try {
-                BotApiMethod response = callbacks.get(botPath).onWebhookUpdateReceived(update);
+                BotApiMethod<?> response = callbacks.get(botPath).onWebhookUpdateReceived(update);
                 if (response != null) {
                     response.validate();
                 }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/polls/SendPoll.java
Patch:
@@ -102,7 +102,7 @@ public class SendPoll extends BotApiMethod<Message> {
     private String explanationParseMode; ///< Optional. Mode for parsing entities in the explanation. See formatting options for more details.
     @JsonProperty(EXPLANATION_ENTITIES_FIELD)
     @Singular
-    private List<MessageEntity> captionEntities; ///< Optional. List of special entities that appear in the poll explanation, which can be specified instead of parse_mode
+    private List<MessageEntity> explanationEntities; ///< Optional. List of special entities that appear in the poll explanation, which can be specified instead of parse_mode
     @JsonProperty(ALLOWSENDINGWITHOUTREPLY_FIELD)
     private Boolean allowSendingWithoutReply; ///< Optional	Pass True, if the message should be sent even if the specified replied-to message is not found
 
@@ -158,7 +158,7 @@ public void validate() throws TelegramApiValidationException {
         if (options.parallelStream().anyMatch(x -> x.isEmpty() || x.length() > 100)) {
             throw new TelegramApiValidationException("Options parameter values must be between 1 and 100 chars length", this);
         }
-        if (explanationParseMode != null && (captionEntities != null && !captionEntities.isEmpty()) ) {
+        if (explanationParseMode != null && (explanationEntities != null && !explanationEntities.isEmpty()) ) {
             throw new TelegramApiValidationException("Parse mode can't be enabled if Entities are provided", this);
         }
         if (replyMarkup != null) {

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/send/SendDocument.java
Patch:
@@ -49,6 +49,7 @@ public class SendDocument extends PartialBotApiMethod<Message> {
     public static final String THUMB_FIELD = "thumb";
     public static final String CAPTION_ENTITIES_FIELD = "caption_entities";
     public static final String ALLOWSENDINGWITHOUTREPLY_FIELD = "allow_sending_without_reply";
+    public static final String DISABLECONTENTTYPEDETECTION_FIELD = "disable_content_type_detection";
 
     @NonNull
     private String chatId; ///< Unique identifier for the chat to send the message to or Username for the channel to send the message to
@@ -71,6 +72,7 @@ public class SendDocument extends PartialBotApiMethod<Message> {
     @Singular
     private List<MessageEntity> captionEntities; ///< Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
     private Boolean allowSendingWithoutReply; ///< Optional	Pass True, if the message should be sent even if the specified replied-to message is not found
+    private Boolean disableContentTypeDetection; ///< Optional	Disables automatic server-side content type detection for files uploaded using multipart/form-data
 
     public void enableNotification() {
         this.disableNotification = false;

File: telegrambots-meta/src/test/java/org/telegram/telegrambots/meta/test/TestSerialization.java
Patch:
@@ -36,13 +36,13 @@ void testSendLocation() throws JsonProcessingException {
                 .livePeriod(100)
                 .allowSendingWithoutReply(true)
                 .heading(125)
-                .approachingNotificationDistance(100)
+                .proximityAlertRadius(100)
                 .build();
 
         String json = mapper.writeValueAsString(location);
 
         assertNotNull(json);
-        assertEquals("{\"chat_id\":\"12345\",\"latitude\":20.758069,\"longitude\":-0.005702,\"disable_notification\":true,\"reply_to_message_id\":1,\"live_period\":100,\"allow_sending_without_reply\":true,\"horizontal_accuracy\":65.0,\"heading\":125,\"approaching_notification_distance\":100,\"method\":\"sendlocation\"}",
+        assertEquals("{\"chat_id\":\"12345\",\"latitude\":20.758069,\"longitude\":-0.005702,\"disable_notification\":true,\"reply_to_message_id\":1,\"live_period\":100,\"allow_sending_without_reply\":true,\"horizontal_accuracy\":65.0,\"heading\":125,\"proximity_alert_radius\":100,\"method\":\"sendlocation\"}",
                 json);
     }
 

File: telegrambots/src/main/java/org/telegram/telegrambots/bots/DefaultAbsSender.java
Patch:
@@ -180,6 +180,9 @@ public final Message execute(SendDocument sendDocument) throws TelegramApiExcept
             if (sendDocument.getAllowSendingWithoutReply() != null) {
                 builder.addTextBody(SendDocument.ALLOWSENDINGWITHOUTREPLY_FIELD, sendDocument.getAllowSendingWithoutReply().toString(), TEXT_PLAIN_CONTENT_TYPE);
             }
+            if (sendDocument.getDisableContentTypeDetection() != null) {
+                builder.addTextBody(SendDocument.DISABLECONTENTTYPEDETECTION_FIELD, sendDocument.getDisableContentTypeDetection().toString(), TEXT_PLAIN_CONTENT_TYPE);
+            }
             if (sendDocument.getCaptionEntities() != null) {
                 builder.addTextBody(SendDocument.CAPTION_ENTITIES_FIELD, objectMapper.writeValueAsString(sendDocument.getCaptionEntities()), TEXT_PLAIN_CONTENT_TYPE);
             }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/ChatPermissions.java
Patch:
@@ -37,7 +37,7 @@ public class ChatPermissions implements BotApiObject {
     @JsonProperty(CAN_SEND_MESSAGES_FIELD)
     private Boolean canSendMessages; ///< Optional. True, if the user is allowed to send text messages, contacts, locations and venues
     @JsonProperty(CAN_SEND_MEDIA_MESSAGES_FIELD)
-    private Boolean getCanSendMediaMessages; ///< Optional. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can_send_messages
+    private Boolean canSendMediaMessages; ///< Optional. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can_send_messages
     @JsonProperty(CAN_SEND_POLLS_FIELD)
     private Boolean canSendPolls; ///< Optional. True, if the user is allowed to send polls, implies can_send_messages
     @JsonProperty(CAN_SEND_OTHER_MESSAGES_FIELD)

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/commands/GetMyCommands.java
Patch:
@@ -1,10 +1,10 @@
 package org.telegram.telegrambots.meta.api.methods.commands;
 
 import com.fasterxml.jackson.core.type.TypeReference;
+import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.EqualsAndHashCode;
 import lombok.Getter;
-import lombok.NoArgsConstructor;
 import lombok.Setter;
 import lombok.ToString;
 import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
@@ -27,7 +27,7 @@
 @Getter
 @Setter
 @ToString
-@NoArgsConstructor
+@AllArgsConstructor
 @Builder
 public class GetMyCommands extends BotApiMethod<ArrayList<BotCommand>> {
     public static final String PATH = "getMyCommands";

File: telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/objects/Ability.java
Patch:
@@ -17,7 +17,7 @@
 import static java.lang.String.format;
 import static java.util.Objects.hash;
 import static java.util.Optional.ofNullable;
-import static org.apache.commons.lang3.StringUtils.*;
+import static org.telegram.abilitybots.api.util.AbilityUtils.isValidCommandName;
 
 /**
  * An ability is a fully-fledged bot action that contains all the necessary information to process:

File: telegrambots/src/main/java/org/telegram/telegrambots/updatesreceivers/DefaultBotSession.java
Patch:
@@ -236,8 +236,8 @@ public void run() {
 
         private List<Update> getUpdatesFromServer() throws IOException {
             GetUpdates request = new GetUpdates()
-                    .setLimit(100)
-                    .setTimeout(ApiConstants.GETUPDATES_TIMEOUT)
+                    .setLimit(options.getGetUpdatesLimit())
+                    .setTimeout(options.getGetUpdatesTimeout())
                     .setOffset(lastReceivedUpdate + 1);
 
             if (options.getAllowedUpdates() != null) {

File: telegrambots/src/main/java/org/telegram/telegrambots/updatesreceivers/DefaultBotSession.java
Patch:
@@ -236,8 +236,8 @@ public void run() {
 
         private List<Update> getUpdatesFromServer() throws IOException {
             GetUpdates request = new GetUpdates()
-                    .setLimit(100)
-                    .setTimeout(ApiConstants.GETUPDATES_TIMEOUT)
+                    .setLimit(options.getGetUpdatesLimit())
+                    .setTimeout(options.getGetUpdatesTimeout())
                     .setOffset(lastReceivedUpdate + 1);
 
             if (options.getAllowedUpdates() != null) {

File: telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/bot/BaseAbilityBot.java
Patch:
@@ -36,6 +36,7 @@
 import static java.lang.String.format;
 import static java.time.ZonedDateTime.now;
 import static java.util.Arrays.stream;
+import static java.util.Comparator.comparingInt;
 import static java.util.Objects.isNull;
 import static java.util.Optional.ofNullable;
 import static java.util.regex.Pattern.CASE_INSENSITIVE;
@@ -517,7 +518,8 @@ Trio<Update, Ability, String[]> getAbility(Update update) {
         if (allowContinuousText()) {
             String abName = abilities.keySet().stream()
                 .filter(name -> msg.getText().startsWith(format("%s%s", getCommandPrefix(), name)))
-                .findFirst().orElse(DEFAULT);
+                .max(comparingInt(String::length))
+                .orElse(DEFAULT);
             tokens = msg.getText()
                 .replaceFirst(getCommandPrefix() + abName, "")
                 .split(getCommandRegexSplit());

File: telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/bot/BaseAbilityBot.java
Patch:
@@ -36,6 +36,7 @@
 import static java.lang.String.format;
 import static java.time.ZonedDateTime.now;
 import static java.util.Arrays.stream;
+import static java.util.Comparator.comparingInt;
 import static java.util.Objects.isNull;
 import static java.util.Optional.ofNullable;
 import static java.util.regex.Pattern.CASE_INSENSITIVE;
@@ -517,7 +518,8 @@ Trio<Update, Ability, String[]> getAbility(Update update) {
         if (allowContinuousText()) {
             String abName = abilities.keySet().stream()
                 .filter(name -> msg.getText().startsWith(format("%s%s", getCommandPrefix(), name)))
-                .findFirst().orElse(DEFAULT);
+                .max(comparingInt(String::length))
+                .orElse(DEFAULT);
             tokens = msg.getText()
                 .replaceFirst(getCommandPrefix() + abName, "")
                 .split(getCommandRegexSplit());

File: telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/bot/BaseAbilityBot.java
Patch:
@@ -277,7 +277,8 @@ private void registerAbilities() {
 
             // Replies can be standalone or attached to abilities, fetch those too
             Stream<Reply> abilityReplies = abilities.values().stream()
-                    .flatMap(ability -> ability.replies().stream());
+                    .flatMap(ability -> ability.replies().stream())
+                    .flatMap(Reply::stream);
 
             // Now create the replies registry (list)
             replies = Stream.concat(abilityReplies, extensionReplies).collect(

File: telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/bot/BaseAbilityBot.java
Patch:
@@ -277,7 +277,8 @@ private void registerAbilities() {
 
             // Replies can be standalone or attached to abilities, fetch those too
             Stream<Reply> abilityReplies = abilities.values().stream()
-                    .flatMap(ability -> ability.replies().stream());
+                    .flatMap(ability -> ability.replies().stream())
+                    .flatMap(Reply::stream);
 
             // Now create the replies registry (list)
             replies = Stream.concat(abilityReplies, extensionReplies).collect(

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/send/SendDice.java
Patch:
@@ -121,7 +121,7 @@ public void validate() throws TelegramApiValidationException {
         if (chatId == null) {
             throw new TelegramApiValidationException("ChatId parameter can't be empty", this);
         }
-        if (emoji != null && !emoji.equals("“\uD83C\uDFB2") && !emoji.equals("\uD83C\uDFAF")) {
+        if (emoji != null && !emoji.equals("\uD83C\uDFB2") && !emoji.equals("\uD83C\uDFAF")) {
             throw new TelegramApiValidationException("Only \uD83C\uDFB2 and \uD83C\uDFAF are allowed in Emoji field ", this);
         }
         if (replyMarkup != null) {

File: telegrambots/src/main/java/org/telegram/telegrambots/facilities/TelegramHttpClientBuilder.java
Patch:
@@ -45,7 +45,8 @@ private static HttpClientConnectionManager createConnectionManager(DefaultBotOpt
             case SOCKS5:
                 registry = RegistryBuilder.<ConnectionSocketFactory> create()
                         .register("http", new SocksConnectionSocketFactory())
-                        .register("https", new SocksSSLConnectionSocketFactory(SSLContexts.createSystemDefault())).build();
+                        .register("https", new SocksSSLConnectionSocketFactory(SSLContexts.createSystemDefault()))
+                        .build();
                 return new PoolingHttpClientConnectionManager(registry);
         }
         return null;

File: telegrambots-extensions/src/main/java/org/telegram/telegrambots/extensions/bots/commandbot/commands/CommandRegistry.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.HashMap;
 import java.util.Map;
 import java.util.function.BiConsumer;
+import java.util.regex.Pattern;
 
 /**
  * This class manages all the commands for a bot. You can register and deregister commands on demand
@@ -122,7 +123,7 @@ public final boolean executeCommand(AbsSender absSender, Message message) {
      */
     private String removeUsernameFromCommandIfNeeded(String command) {
         if (allowCommandsWithUsername) {
-            return command.replace("@" + botUsername, "").trim();
+            return command.replaceAll("(?i)@" + Pattern.quote(botUsername), "").trim();
         }
         return command;
     }

File: telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/bot/BaseAbilityBot.java
Patch:
@@ -6,8 +6,6 @@
 import com.google.common.collect.ListMultimap;
 import com.google.common.collect.Multimap;
 import org.apache.commons.io.IOUtils;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: telegrambots/src/main/java/org/telegram/telegrambots/bots/DefaultAbsSender.java
Patch:
@@ -414,7 +414,7 @@ public final Message execute(SendAudio sendAudio) throws TelegramApiException {
 
             return sendAudio.deserializeResponse(sendHttpPostRequest(httppost));
         } catch (IOException e) {
-            throw new TelegramApiException("Unable to send sticker", e);
+            throw new TelegramApiException("Unable to send audio", e);
         }
     }
 

File: telegrambots/src/main/java/org/telegram/telegrambots/bots/DefaultAbsSender.java
Patch:
@@ -414,7 +414,7 @@ public final Message execute(SendAudio sendAudio) throws TelegramApiException {
 
             return sendAudio.deserializeResponse(sendHttpPostRequest(httppost));
         } catch (IOException e) {
-            throw new TelegramApiException("Unable to send sticker", e);
+            throw new TelegramApiException("Unable to send audio", e);
         }
     }
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/Chat.java
Patch:
@@ -25,7 +25,7 @@ public class Chat implements BotApiObject {
     private static final String PINNEDMESSAGE_FIELD = "pinned_message";
     private static final String STICKERSETNAME_FIELD = "sticker_set_name";
     private static final String CANSETSTICKERSET_FIELD = "can_set_sticker_set";
-    private static final String PERMISSIONS_FIELD = "can_set_sticker_set";
+    private static final String PERMISSIONS_FIELD = "permissions";
 
     private static final String USERCHATTYPE = "private";
     private static final String GROUPCHATTYPE = "group";

File: telegrambots/src/main/java/org/telegram/telegrambots/bots/DefaultAbsSender.java
Patch:
@@ -51,7 +51,7 @@
  * @version 1.0
  * Implementation of all the methods needed to interact with Telegram Servers
  */
-@SuppressWarnings({"unused", "WeakerAccess"})
+@SuppressWarnings({"unused"})
 public abstract class DefaultAbsSender extends AbsSender {
     private static final ContentType TEXT_PLAIN_CONTENT_TYPE = ContentType.create("text/plain", StandardCharsets.UTF_8);
 

File: telegrambots/src/main/java/org/telegram/telegrambots/facilities/filedownloader/DownloadFileException.java
Patch:
@@ -3,6 +3,7 @@
 /**
  * Runtime Exception to wrap Exceptions thrown during file download
  */
+@SuppressWarnings("WeakerAccess")
 public class DownloadFileException extends RuntimeException {
     public DownloadFileException(final String message, final Throwable e) {
         super(message, e);

File: telegrambots-extensions/src/main/java/org/telegram/telegrambots/extensions/bots/commandbot/commands/CommandRegistry.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.HashMap;
 import java.util.Map;
 import java.util.function.BiConsumer;
+import java.util.regex.Pattern;
 
 /**
  * This class manages all the commands for a bot. You can register and deregister commands on demand
@@ -122,7 +123,7 @@ public final boolean executeCommand(AbsSender absSender, Message message) {
      */
     private String removeUsernameFromCommandIfNeeded(String command) {
         if (allowCommandsWithUsername) {
-            return command.replace("@" + botUsername, "").trim();
+            return command.replaceAll("(?i)@" + Pattern.quote(botUsername), "").trim();
         }
         return command;
     }

File: telegrambots/src/main/java/org/telegram/telegrambots/util/WebhookUtils.java
Patch:
@@ -43,7 +43,7 @@ public static void setWebhook(DefaultAbsSender bot, String url, String publicCer
         builder.addTextBody(SetWebhook.MAXCONNECTIONS_FIELD, botOptions.getMaxWebhookConnections().toString());
       }
       if (botOptions.getAllowedUpdates() != null) {
-        builder.addTextBody(SetWebhook.ALLOWEDUPDATES_FIELD, new JSONArray(botOptions.getMaxWebhookConnections()).toString());
+        builder.addTextBody(SetWebhook.ALLOWEDUPDATES_FIELD, new JSONArray(botOptions.getAllowedUpdates()).toString());
       }
       if (publicCertificatePath != null) {
         File certificate = new File(publicCertificatePath);

File: telegrambots/src/main/java/org/telegram/telegrambots/util/WebhookUtils.java
Patch:
@@ -53,7 +53,7 @@ public static void setWebhook(DefaultAbsSender bot, String url, String publicCer
       }
       HttpEntity multipart = builder.build();
       httppost.setEntity(multipart);
-      try (CloseableHttpResponse response = httpclient.execute(httppost)) {
+      try (CloseableHttpResponse response = httpclient.execute(httppost, botOptions.getHttpContext())) {
         HttpEntity ht = response.getEntity();
         BufferedHttpEntity buf = new BufferedHttpEntity(ht);
         String responseContent = EntityUtils.toString(buf, StandardCharsets.UTF_8);

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/AnswerCallbackQuery.java
Patch:
@@ -35,13 +35,13 @@ public class AnswerCallbackQuery extends BotApiMethod<Boolean> {
     @JsonProperty(TEXT_FIELD)
     private String text; ///< Optional	Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
     @JsonProperty(SHOWALERT_FIELD)
-    private Boolean showAlert; ///< Optional. If true, an alert will be shown by the client instead of a notificaiton at the top of the chat screen. Defaults to false.
+    private Boolean showAlert; ///< Optional. If true, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to false.
     @JsonProperty(URL_FIELD)
     /**
      * Optional. URL that will be opened by the user's client.
      * If you have created a Game and accepted the conditions via @Botfather,
      * specify the URL that opens your game. Otherwise you may use links
-     * InlineQueryResultGamelike telegram.me/your_bot?start=XXXX that open your bot with a parameter.
+     * like telegram.me/your_bot?start=XXXX that open your bot with a parameter.
      */
     private String url;
     @JsonProperty(CACHETIME_FIELD)

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/games/SetGameScore.java
Patch:
@@ -63,7 +63,7 @@ public class SetGameScore extends BotApiMethod<Serializable> {
     @JsonProperty(SCORE_FIELD)
     private Integer score; ///< New score, must be positive
     @JsonProperty(FORCE_FIELD)
-    private Boolean force; ///< Opfional. Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
+    private Boolean force; ///< Optional. Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
 
     public SetGameScore() {
         super();

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/send/SendAnimation.java
Patch:
@@ -46,9 +46,9 @@ public class SendAnimation extends PartialBotApiMethod<Message> {
      */
     private InputFile animation;
     private Integer duration; ///< Optional. Duration of sent animation in seconds
-    private String caption; ///< OptionaL. Animation caption (may also be used when resending videos by file_id).
+    private String caption; ///< Optional. Animation caption (may also be used when resending videos by file_id).
     private Integer width; ///< Optional. Animation width
-    private Integer height; ///< OptionaL. Animation height
+    private Integer height; ///< Optional. Animation height
     private Boolean disableNotification; ///< Optional. Sends the message silently. Users will receive a notification with no sound.
     private Integer replyToMessageId; ///< Optional. If the message is a reply, ID of the original message
     private ReplyKeyboard replyMarkup; ///< Optional. JSON-serialized object for a custom reply keyboard

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/send/SendVideo.java
Patch:
@@ -39,9 +39,9 @@ public class SendVideo extends PartialBotApiMethod<Message> {
     private String chatId; ///< Unique identifier for the chat to send the message to (Or username for channels)
     private InputFile video; ///< Video to send. file_id as String to resend a video that is already on the Telegram servers or URL to upload it
     private Integer duration; ///< Optional. Duration of sent video in seconds
-    private String caption; ///< OptionaL. Video caption (may also be used when resending videos by file_id).
+    private String caption; ///< Optional. Video caption (may also be used when resending videos by file_id).
     private Integer width; ///< Optional. Video width
-    private Integer height; ///< OptionaL. Video height
+    private Integer height; ///< Optional. Video height
     private Boolean supportsStreaming; ///< Optional. Pass True, if the uploaded video is suitable for streaming
     private Boolean disableNotification; ///< Optional. Sends the message silently. Users will receive a notification with no sound.
     private Integer replyToMessageId; ///< Optional. If the message is a reply, ID of the original message

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/stickers/CreateNewStickerSet.java
Patch:
@@ -164,7 +164,7 @@ public void validate() throws TelegramApiValidationException {
             throw new TelegramApiValidationException("name can't be empty", this);
         }
         if (title == null || title.isEmpty()) {
-            throw new TelegramApiValidationException("userId can't be empty", this);
+            throw new TelegramApiValidationException("title can't be empty", this);
         }
         if (emojis == null || emojis.isEmpty()) {
             throw new TelegramApiValidationException("emojis can't be empty", this);

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/updatingmessages/EditMessageMedia.java
Patch:
@@ -153,7 +153,7 @@ public void validate() throws TelegramApiValidationException {
             }
         }
         if (media == null) {
-            throw new TelegramApiValidationException("Text parameter can't be empty", this);
+            throw new TelegramApiValidationException("Media parameter can't be empty", this);
         }
 
         media.validate();

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/Chat.java
Patch:
@@ -38,7 +38,7 @@ public class Chat implements BotApiObject {
      * so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
      */
     @JsonProperty(ID_FIELD)
-    private Long id; ///< Unique identifier for this chat, not exciding 1e13 by absolute value
+    private Long id; ///< Unique identifier for this chat, not exceeding 1e13 by absolute value
     @JsonProperty(TYPE_FIELD)
     private String type; ///< Type of the chat, one of “private”, “group” or “channel”
     @JsonProperty(TITLE_FIELD)

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/ChatMember.java
Patch:
@@ -35,7 +35,7 @@ public class ChatMember implements BotApiObject {
     @JsonProperty(STATUS_FIELD)
     private String status; ///< The member's status in the chat. Can be “creator”, “administrator”, “member”,  “restricted”, “left” or “kicked”
     @JsonProperty(UNTILDATE_FIELD)
-    private Integer untilDate; ///< Optional. Resticted and kicked only. Date when restrictions will be lifted for this user, unix time
+    private Integer untilDate; ///< Optional. Restricted and kicked only. Date when restrictions will be lifted for this user, unix time
     @JsonProperty(CANBEEDITED_FIELD)
     private Boolean canBeEdited; ///< Optional. Administrators only. True, if the bot is allowed to edit administrator privileges of that user
     @JsonProperty(CANCHANGEINFORMATION_FIELD)
@@ -53,7 +53,7 @@ public class ChatMember implements BotApiObject {
     @JsonProperty(CANPINMESSAGES_FIELD)
     private Boolean canPinMessages; ///< Optional. Administrators only. True, if the administrator can pin messages
     @JsonProperty(CANPROMOTEMEMBERS_FIELD)
-    private Boolean canPromoteMembers; ///< Optional. Administrators only. True, if the administrator can add new administrators with a subset of his own privileges or demote administrators that it has promoted, directly or indirectly (promoted by administators that were appointed by the bot)
+    private Boolean canPromoteMembers; ///< Optional. Administrators only. True, if the administrator can add new administrators with a subset of his own privileges or demote administrators that it has promoted, directly or indirectly (promoted by administrators that were appointed by the bot)
     @JsonProperty(CANSENDMESSAGES_FIELD)
     private Boolean canSendMessages; ///< Optional. Restricted only. True, if the user can send text messages, contacts, locations and venues
     @JsonProperty(CANSENDMEDIAMESSAGES_FIELD)

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/PhotoSize.java
Patch:
@@ -27,7 +27,7 @@ public class PhotoSize implements BotApiObject {
     @JsonProperty(FILESIZE_FIELD)
     private Integer fileSize; ///< Optional. File size
     @JsonProperty(FILEPATH_FIELD)
-    private String filePath; ///< Undocumented field. Optional. Can contain the path to download the file direclty without calling to getFile
+    private String filePath; ///< Undocumented field. Optional. Can contain the path to download the file directly without calling to getFile
 
     public PhotoSize() {
         super();

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/inlinequery/result/InlineQueryResultVenue.java
Patch:
@@ -189,7 +189,7 @@ public void validate() throws TelegramApiValidationException {
             throw new TelegramApiValidationException("Longitude parameter can't be empty", this);
         }
         if (address == null || address.isEmpty()) {
-            throw new TelegramApiValidationException("Longitude parameter can't be empty", this);
+            throw new TelegramApiValidationException("Address parameter can't be empty", this);
         }
         if (inputMessageContent != null) {
             inputMessageContent.validate();

File: telegrambots/src/test/java/org/telegram/telegrambots/test/BotApiMethodHelperFactory.java
Patch:
@@ -14,7 +14,7 @@
 import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChat;
 import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatAdministrators;
 import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatMember;
-import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatMemberCount;
+import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatMembersCount;
 import org.telegram.telegrambots.meta.api.methods.groupadministration.KickChatMember;
 import org.telegram.telegrambots.meta.api.methods.groupadministration.LeaveChat;
 import org.telegram.telegrambots.meta.api.methods.groupadministration.UnbanChatMember;
@@ -123,8 +123,8 @@ public static BotApiMethod getChatMember() {
                 .setUserId(98765);
     }
 
-    public static BotApiMethod getChatMemberCount() {
-        return new GetChatMemberCount()
+    public static BotApiMethod getChatMembersCount() {
+        return new GetChatMembersCount()
                 .setChatId("12345");
     }
 

File: telegrambots/src/test/java/org/telegram/telegrambots/test/TestRestApi.java
Patch:
@@ -196,14 +196,14 @@ public void TestGetChatMember() {
     }
 
     @Test
-    public void TestGetChatMemberCount() {
-        webhookBot.setReturnValue(BotApiMethodHelperFactory.getChatMemberCount());
+    public void TestGetChatMembersCount() {
+        webhookBot.setReturnValue(BotApiMethodHelperFactory.getChatMembersCount());
 
         Entity<Update> entity = Entity.json(getUpdate());
         BotApiMethod result =
                 target("callback/testbot")
                         .request(MediaType.APPLICATION_JSON)
-                        .post(entity, GetChatMemberCount.class);
+                        .post(entity, GetChatMembersCount.class);
 
         assertEquals("{\"chat_id\":\"12345\",\"method\":\"getChatMembersCount\"}", map(result));
     }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/AnswerCallbackQuery.java
Patch:
@@ -35,13 +35,13 @@ public class AnswerCallbackQuery extends BotApiMethod<Boolean> {
     @JsonProperty(TEXT_FIELD)
     private String text; ///< Optional	Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
     @JsonProperty(SHOWALERT_FIELD)
-    private Boolean showAlert; ///< Optional. If true, an alert will be shown by the client instead of a notificaiton at the top of the chat screen. Defaults to false.
+    private Boolean showAlert; ///< Optional. If true, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to false.
     @JsonProperty(URL_FIELD)
     /**
      * Optional. URL that will be opened by the user's client.
      * If you have created a Game and accepted the conditions via @Botfather,
      * specify the URL that opens your game. Otherwise you may use links
-     * InlineQueryResultGamelike telegram.me/your_bot?start=XXXX that open your bot with a parameter.
+     * like telegram.me/your_bot?start=XXXX that open your bot with a parameter.
      */
     private String url;
     @JsonProperty(CACHETIME_FIELD)

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/games/SetGameScore.java
Patch:
@@ -63,7 +63,7 @@ public class SetGameScore extends BotApiMethod<Serializable> {
     @JsonProperty(SCORE_FIELD)
     private Integer score; ///< New score, must be positive
     @JsonProperty(FORCE_FIELD)
-    private Boolean force; ///< Opfional. Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
+    private Boolean force; ///< Optional. Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
 
     public SetGameScore() {
         super();

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/groupadministration/DeleteStickerSetName.java
Patch:
@@ -19,7 +19,9 @@
  * The bot must be an administrator in the chat for this to work and must have the appropriate admin rights.
  * Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method.
  * Returns True on success.
+ * @deprecated  Replaced by {@link DeleteChatStickerSet}
  */
+@Deprecated
 public class DeleteStickerSetName extends BotApiMethod<Boolean> {
     public static final String PATH = "deleteChatStickerSet";
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/groupadministration/GetChatMemberCount.java
Patch:
@@ -16,7 +16,9 @@
  * @version 1.0
  * @brief Use this method to get the number of members in a chat. Returns Int on success.
  * @date 20 of May of 2016
+ * @deprecated  Replaced by {@link GetChatMembersCount}
  */
+@Deprecated
 public class GetChatMemberCount extends BotApiMethod<Integer> {
     public static final String PATH = "getChatMembersCount";
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/send/SendAnimation.java
Patch:
@@ -46,9 +46,9 @@ public class SendAnimation extends PartialBotApiMethod<Message> {
      */
     private InputFile animation;
     private Integer duration; ///< Optional. Duration of sent animation in seconds
-    private String caption; ///< OptionaL. Animation caption (may also be used when resending videos by file_id).
+    private String caption; ///< Optional. Animation caption (may also be used when resending videos by file_id).
     private Integer width; ///< Optional. Animation width
-    private Integer height; ///< OptionaL. Animation height
+    private Integer height; ///< Optional. Animation height
     private Boolean disableNotification; ///< Optional. Sends the message silently. Users will receive a notification with no sound.
     private Integer replyToMessageId; ///< Optional. If the message is a reply, ID of the original message
     private ReplyKeyboard replyMarkup; ///< Optional. JSON-serialized object for a custom reply keyboard

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/send/SendVideo.java
Patch:
@@ -39,9 +39,9 @@ public class SendVideo extends PartialBotApiMethod<Message> {
     private String chatId; ///< Unique identifier for the chat to send the message to (Or username for channels)
     private InputFile video; ///< Video to send. file_id as String to resend a video that is already on the Telegram servers or URL to upload it
     private Integer duration; ///< Optional. Duration of sent video in seconds
-    private String caption; ///< OptionaL. Video caption (may also be used when resending videos by file_id).
+    private String caption; ///< Optional. Video caption (may also be used when resending videos by file_id).
     private Integer width; ///< Optional. Video width
-    private Integer height; ///< OptionaL. Video height
+    private Integer height; ///< Optional. Video height
     private Boolean supportsStreaming; ///< Optional. Pass True, if the uploaded video is suitable for streaming
     private Boolean disableNotification; ///< Optional. Sends the message silently. Users will receive a notification with no sound.
     private Integer replyToMessageId; ///< Optional. If the message is a reply, ID of the original message

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/stickers/CreateNewStickerSet.java
Patch:
@@ -164,7 +164,7 @@ public void validate() throws TelegramApiValidationException {
             throw new TelegramApiValidationException("name can't be empty", this);
         }
         if (title == null || title.isEmpty()) {
-            throw new TelegramApiValidationException("userId can't be empty", this);
+            throw new TelegramApiValidationException("title can't be empty", this);
         }
         if (emojis == null || emojis.isEmpty()) {
             throw new TelegramApiValidationException("emojis can't be empty", this);

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/updatingmessages/EditMessageMedia.java
Patch:
@@ -153,7 +153,7 @@ public void validate() throws TelegramApiValidationException {
             }
         }
         if (media == null) {
-            throw new TelegramApiValidationException("Text parameter can't be empty", this);
+            throw new TelegramApiValidationException("Media parameter can't be empty", this);
         }
 
         media.validate();

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/Chat.java
Patch:
@@ -38,7 +38,7 @@ public class Chat implements BotApiObject {
      * so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
      */
     @JsonProperty(ID_FIELD)
-    private Long id; ///< Unique identifier for this chat, not exciding 1e13 by absolute value
+    private Long id; ///< Unique identifier for this chat, not exceeding 1e13 by absolute value
     @JsonProperty(TYPE_FIELD)
     private String type; ///< Type of the chat, one of “private”, “group” or “channel”
     @JsonProperty(TITLE_FIELD)

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/ChatMember.java
Patch:
@@ -35,7 +35,7 @@ public class ChatMember implements BotApiObject {
     @JsonProperty(STATUS_FIELD)
     private String status; ///< The member's status in the chat. Can be “creator”, “administrator”, “member”,  “restricted”, “left” or “kicked”
     @JsonProperty(UNTILDATE_FIELD)
-    private Integer untilDate; ///< Optional. Resticted and kicked only. Date when restrictions will be lifted for this user, unix time
+    private Integer untilDate; ///< Optional. Restricted and kicked only. Date when restrictions will be lifted for this user, unix time
     @JsonProperty(CANBEEDITED_FIELD)
     private Boolean canBeEdited; ///< Optional. Administrators only. True, if the bot is allowed to edit administrator privileges of that user
     @JsonProperty(CANCHANGEINFORMATION_FIELD)
@@ -53,7 +53,7 @@ public class ChatMember implements BotApiObject {
     @JsonProperty(CANPINMESSAGES_FIELD)
     private Boolean canPinMessages; ///< Optional. Administrators only. True, if the administrator can pin messages
     @JsonProperty(CANPROMOTEMEMBERS_FIELD)
-    private Boolean canPromoteMembers; ///< Optional. Administrators only. True, if the administrator can add new administrators with a subset of his own privileges or demote administrators that it has promoted, directly or indirectly (promoted by administators that were appointed by the bot)
+    private Boolean canPromoteMembers; ///< Optional. Administrators only. True, if the administrator can add new administrators with a subset of his own privileges or demote administrators that it has promoted, directly or indirectly (promoted by administrators that were appointed by the bot)
     @JsonProperty(CANSENDMESSAGES_FIELD)
     private Boolean canSendMessages; ///< Optional. Restricted only. True, if the user can send text messages, contacts, locations and venues
     @JsonProperty(CANSENDMEDIAMESSAGES_FIELD)

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/PhotoSize.java
Patch:
@@ -27,7 +27,7 @@ public class PhotoSize implements BotApiObject {
     @JsonProperty(FILESIZE_FIELD)
     private Integer fileSize; ///< Optional. File size
     @JsonProperty(FILEPATH_FIELD)
-    private String filePath; ///< Undocumented field. Optional. Can contain the path to download the file direclty without calling to getFile
+    private String filePath; ///< Undocumented field. Optional. Can contain the path to download the file directly without calling to getFile
 
     public PhotoSize() {
         super();

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/inlinequery/result/InlineQueryResultVenue.java
Patch:
@@ -189,7 +189,7 @@ public void validate() throws TelegramApiValidationException {
             throw new TelegramApiValidationException("Longitude parameter can't be empty", this);
         }
         if (address == null || address.isEmpty()) {
-            throw new TelegramApiValidationException("Longitude parameter can't be empty", this);
+            throw new TelegramApiValidationException("Address parameter can't be empty", this);
         }
         if (inputMessageContent != null) {
             inputMessageContent.validate();

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/inlinequery/result/chached/InlineQueryResultCachedAudio.java
Patch:
@@ -16,7 +16,9 @@
  * @note This will only work in Telegram versions released after 9 April, 2016. Older clients will
  * ignore them.
  * @date 10 of April of 2016
+ * @deprecated  Replaced by {@link org.telegram.telegrambots.meta.api.objects.inlinequery.result.cached.InlineQueryResultCachedAudio}
  */
+@Deprecated
 public class InlineQueryResultCachedAudio implements InlineQueryResult {
 
     private static final String TYPE_FIELD = "type";

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/inlinequery/result/chached/InlineQueryResultCachedDocument.java
Patch:
@@ -16,7 +16,9 @@
  * @note Currently, only pdf-files and zip archives can be sent using this method.
  * @note This will only work in Telegram versions released after 9 April, 2016. Older clients will
  * ignore them.
+ * @deprecated  Replaced by {@link org.telegram.telegrambots.meta.api.objects.inlinequery.result.cached.InlineQueryResultCachedDocument}
  */
+@Deprecated
 public class InlineQueryResultCachedDocument implements InlineQueryResult {
 
     private static final String TYPE_FIELD = "type";

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/inlinequery/result/chached/InlineQueryResultCachedGif.java
Patch:
@@ -13,7 +13,9 @@
  * Represents a link to an animated GIF file stored on the Telegram servers. By default, this
  * animated GIF file will be sent by the user with an optional caption. Alternatively, you can use
  * input_message_content to send a message with specified content instead of the animation.
+ * @deprecated  Replaced by {@link org.telegram.telegrambots.meta.api.objects.inlinequery.result.cached.InlineQueryResultCachedGif}
  */
+@Deprecated
 public class InlineQueryResultCachedGif implements InlineQueryResult {
     private static final String TYPE_FIELD = "type";
     private static final String ID_FIELD = "id";

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/inlinequery/result/chached/InlineQueryResultCachedMpeg4Gif.java
Patch:
@@ -14,7 +14,9 @@
  * this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can
  * use input_message_content to send a message with the specified content instead of the animation.
  * @date 01 of January of 2016
+ * @deprecated  Replaced by {@link org.telegram.telegrambots.meta.api.objects.inlinequery.result.cached.InlineQueryResultCachedMpeg4Gif}
  */
+@Deprecated
 public class InlineQueryResultCachedMpeg4Gif implements InlineQueryResult {
 
     private static final String TYPE_FIELD = "type";

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/inlinequery/result/chached/InlineQueryResultCachedPhoto.java
Patch:
@@ -13,7 +13,9 @@
  * Represents a link to a photo stored on the Telegram servers. By default, this photo will
  * be sent by the user with an optional caption. Alternatively, you can use input_message_content to
  * send a message with the specified content instead of the photo.
+ * @deprecated  Replaced by {@link org.telegram.telegrambots.meta.api.objects.inlinequery.result.cached.InlineQueryResultCachedPhoto}
  */
+@Deprecated
 public class InlineQueryResultCachedPhoto implements InlineQueryResult {
     private static final String TYPE_FIELD = "type";
     private static final String ID_FIELD = "id";

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/inlinequery/result/chached/InlineQueryResultCachedSticker.java
Patch:
@@ -16,7 +16,9 @@
  * @note This will only work in Telegram versions released after 9 April, 2016. Older clients will
  * ignore them.
  * @date 10 of April of 2016
+ * @deprecated  Replaced by {@link org.telegram.telegrambots.meta.api.objects.inlinequery.result.cached.InlineQueryResultCachedSticker}
  */
+@Deprecated
 public class InlineQueryResultCachedSticker implements InlineQueryResult {
 
     private static final String TYPE_FIELD = "type";

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/inlinequery/result/chached/InlineQueryResultCachedVideo.java
Patch:
@@ -13,7 +13,9 @@
  * Represents a link to a video file stored on the Telegram servers. By default, this video
  * file will be sent by the user with an optional caption. Alternatively, you can use
  * input_message_content to send a message with the specified content instead of the video.
+ * @deprecated  Replaced by {@link org.telegram.telegrambots.meta.api.objects.inlinequery.result.cached.InlineQueryResultCachedVideo}
  */
+@Deprecated
 public class InlineQueryResultCachedVideo implements InlineQueryResult {
     private static final String TYPE_FIELD = "type";
     private static final String ID_FIELD = "id";

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/inlinequery/result/chached/InlineQueryResultCachedVoice.java
Patch:
@@ -15,7 +15,9 @@
  * a message with the specified content instead of the voice message.
  * @note This will only work in Telegram versions released after 9 April, 2016. Older clients will
  * ignore them.
+ * @deprecated  Replaced by {@link org.telegram.telegrambots.meta.api.objects.inlinequery.result.cached.InlineQueryResultCachedVoice}
  */
+@Deprecated
 public class InlineQueryResultCachedVoice implements InlineQueryResult {
     private static final String TYPE_FIELD = "type";
     private static final String ID_FIELD = "id";

File: telegrambots/src/test/java/org/telegram/telegrambots/test/BotApiMethodHelperFactory.java
Patch:
@@ -14,7 +14,7 @@
 import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChat;
 import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatAdministrators;
 import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatMember;
-import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatMemberCount;
+import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatMembersCount;
 import org.telegram.telegrambots.meta.api.methods.groupadministration.KickChatMember;
 import org.telegram.telegrambots.meta.api.methods.groupadministration.LeaveChat;
 import org.telegram.telegrambots.meta.api.methods.groupadministration.UnbanChatMember;
@@ -123,8 +123,8 @@ public static BotApiMethod getChatMember() {
                 .setUserId(98765);
     }
 
-    public static BotApiMethod getChatMemberCount() {
-        return new GetChatMemberCount()
+    public static BotApiMethod getChatMembersCount() {
+        return new GetChatMembersCount()
                 .setChatId("12345");
     }
 

File: telegrambots/src/test/java/org/telegram/telegrambots/test/TestRestApi.java
Patch:
@@ -196,14 +196,14 @@ public void TestGetChatMember() {
     }
 
     @Test
-    public void TestGetChatMemberCount() {
-        webhookBot.setReturnValue(BotApiMethodHelperFactory.getChatMemberCount());
+    public void TestGetChatMembersCount() {
+        webhookBot.setReturnValue(BotApiMethodHelperFactory.getChatMembersCount());
 
         Entity<Update> entity = Entity.json(getUpdate());
         BotApiMethod result =
                 target("callback/testbot")
                         .request(MediaType.APPLICATION_JSON)
-                        .post(entity, GetChatMemberCount.class);
+                        .post(entity, GetChatMembersCount.class);
 
         assertEquals("{\"chat_id\":\"12345\",\"method\":\"getChatMembersCount\"}", map(result));
     }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/send/SendMessage.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.core.type.TypeReference;
-
 import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
 import org.telegram.telegrambots.meta.api.methods.ParseMode;
 import org.telegram.telegrambots.meta.api.objects.Message;
@@ -222,6 +221,7 @@ public String toString() {
                 "chatId='" + chatId + '\'' +
                 ", text='" + text + '\'' +
                 ", parseMode='" + parseMode + '\'' +
+                ", disableNotification='" + disableNotification + '\'' +
                 ", disableWebPagePreview=" + disableWebPagePreview +
                 ", replyToMessageId=" + replyToMessageId +
                 ", replyMarkup=" + replyMarkup +

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/inlinequery/result/chached/InlineQueryResultCachedAudio.java
Patch:
@@ -16,7 +16,9 @@
  * @note This will only work in Telegram versions released after 9 April, 2016. Older clients will
  * ignore them.
  * @date 10 of April of 2016
+ * @deprecated  Replaced by {@link org.telegram.telegrambots.meta.api.objects.inlinequery.result.cached.InlineQueryResultCachedAudio}
  */
+@Deprecated
 public class InlineQueryResultCachedAudio implements InlineQueryResult {
 
     private static final String TYPE_FIELD = "type";

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/inlinequery/result/chached/InlineQueryResultCachedDocument.java
Patch:
@@ -16,7 +16,9 @@
  * @note Currently, only pdf-files and zip archives can be sent using this method.
  * @note This will only work in Telegram versions released after 9 April, 2016. Older clients will
  * ignore them.
+ * @deprecated  Replaced by {@link org.telegram.telegrambots.meta.api.objects.inlinequery.result.cached.InlineQueryResultCachedDocument}
  */
+@Deprecated
 public class InlineQueryResultCachedDocument implements InlineQueryResult {
 
     private static final String TYPE_FIELD = "type";

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/inlinequery/result/chached/InlineQueryResultCachedGif.java
Patch:
@@ -13,7 +13,9 @@
  * Represents a link to an animated GIF file stored on the Telegram servers. By default, this
  * animated GIF file will be sent by the user with an optional caption. Alternatively, you can use
  * input_message_content to send a message with specified content instead of the animation.
+ * @deprecated  Replaced by {@link org.telegram.telegrambots.meta.api.objects.inlinequery.result.cached.InlineQueryResultCachedGif}
  */
+@Deprecated
 public class InlineQueryResultCachedGif implements InlineQueryResult {
     private static final String TYPE_FIELD = "type";
     private static final String ID_FIELD = "id";

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/inlinequery/result/chached/InlineQueryResultCachedMpeg4Gif.java
Patch:
@@ -14,7 +14,9 @@
  * this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can
  * use input_message_content to send a message with the specified content instead of the animation.
  * @date 01 of January of 2016
+ * @deprecated  Replaced by {@link org.telegram.telegrambots.meta.api.objects.inlinequery.result.cached.InlineQueryResultCachedMpeg4Gif}
  */
+@Deprecated
 public class InlineQueryResultCachedMpeg4Gif implements InlineQueryResult {
 
     private static final String TYPE_FIELD = "type";

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/inlinequery/result/chached/InlineQueryResultCachedPhoto.java
Patch:
@@ -13,7 +13,9 @@
  * Represents a link to a photo stored on the Telegram servers. By default, this photo will
  * be sent by the user with an optional caption. Alternatively, you can use input_message_content to
  * send a message with the specified content instead of the photo.
+ * @deprecated  Replaced by {@link org.telegram.telegrambots.meta.api.objects.inlinequery.result.cached.InlineQueryResultCachedPhoto}
  */
+@Deprecated
 public class InlineQueryResultCachedPhoto implements InlineQueryResult {
     private static final String TYPE_FIELD = "type";
     private static final String ID_FIELD = "id";

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/inlinequery/result/chached/InlineQueryResultCachedSticker.java
Patch:
@@ -16,7 +16,9 @@
  * @note This will only work in Telegram versions released after 9 April, 2016. Older clients will
  * ignore them.
  * @date 10 of April of 2016
+ * @deprecated  Replaced by {@link org.telegram.telegrambots.meta.api.objects.inlinequery.result.cached.InlineQueryResultCachedSticker}
  */
+@Deprecated
 public class InlineQueryResultCachedSticker implements InlineQueryResult {
 
     private static final String TYPE_FIELD = "type";

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/inlinequery/result/chached/InlineQueryResultCachedVideo.java
Patch:
@@ -13,7 +13,9 @@
  * Represents a link to a video file stored on the Telegram servers. By default, this video
  * file will be sent by the user with an optional caption. Alternatively, you can use
  * input_message_content to send a message with the specified content instead of the video.
+ * @deprecated  Replaced by {@link org.telegram.telegrambots.meta.api.objects.inlinequery.result.cached.InlineQueryResultCachedVideo}
  */
+@Deprecated
 public class InlineQueryResultCachedVideo implements InlineQueryResult {
     private static final String TYPE_FIELD = "type";
     private static final String ID_FIELD = "id";

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/inlinequery/result/chached/InlineQueryResultCachedVoice.java
Patch:
@@ -15,7 +15,9 @@
  * a message with the specified content instead of the voice message.
  * @note This will only work in Telegram versions released after 9 April, 2016. Older clients will
  * ignore them.
+ * @deprecated  Replaced by {@link org.telegram.telegrambots.meta.api.objects.inlinequery.result.cached.InlineQueryResultCachedVoice}
  */
+@Deprecated
 public class InlineQueryResultCachedVoice implements InlineQueryResult {
     private static final String TYPE_FIELD = "type";
     private static final String ID_FIELD = "id";

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/AnswerInlineQuery.java
Patch:
@@ -136,8 +136,8 @@ public void validate() throws TelegramApiValidationException {
             if (switchPmParameter.length() > 64) {
                 throw new TelegramApiValidationException("SwitchPmParameter can't be longer than 64 chars", this);
             }
-            if (!Pattern.matches("[A-Za-z0-9_]+", switchPmParameter.trim() )) {
-                throw new TelegramApiValidationException("SwitchPmParameter only allows A-Z, a-z, 0-9 and _ characters", this);
+            if (!Pattern.matches("[A-Za-z0-9_\\-]+", switchPmParameter.trim() )) {
+                throw new TelegramApiValidationException("SwitchPmParameter only allows A-Z, a-z, 0-9, _ and - characters", this);
             }
         }
         for (InlineQueryResult result : results) {

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/stickers/MaskPosition.java
Patch:
@@ -1,6 +1,7 @@
 package org.telegram.telegrambots.meta.api.objects.stickers;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import org.telegram.telegrambots.meta.api.interfaces.InputBotApiObject;
 import org.telegram.telegrambots.meta.api.interfaces.Validable;
 import org.telegram.telegrambots.meta.exceptions.TelegramApiValidationException;
@@ -10,6 +11,7 @@
  * @version 3.2
  * This object describes the position on faces where a mask should be placed by default.
  */
+@JsonTypeInfo(use=JsonTypeInfo.Id.NONE)
 public class MaskPosition implements InputBotApiObject, Validable {
     private static final String POINT_FIELD = "point";
     private static final String XSHIFT_FIELD = "x_shift";

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/stickers/Sticker.java
Patch:
@@ -36,7 +36,7 @@ public class Sticker implements BotApiObject {
     @JsonProperty(SETNAME_FIELD)
     private String setName; ///< Optional. Name of the sticker set to which the sticker belongs
     @JsonProperty(MASKPOSITON_FIELD)
-    private String maskPosition; ///< Optional. For mask stickers, the position where the mask should be placed
+    private MaskPosition maskPosition; ///< Optional. For mask stickers, the position where the mask should be placed
 
     public Sticker() {
         super();
@@ -70,7 +70,7 @@ public String getSetName() {
         return setName;
     }
 
-    public String getMaskPosition() {
+    public MaskPosition getMaskPosition() {
         return maskPosition;
     }
 
@@ -84,7 +84,7 @@ public String toString() {
                 ", fileSize=" + fileSize +
                 ", emoji='" + emoji + '\'' +
                 ", setName='" + setName + '\'' +
-                ", maskPosition='" + maskPosition + '\'' +
+                ", maskPosition=" + maskPosition +
                 '}';
     }
 }

File: telegrambots-meta/src/test/java/org/telegram/telegrambots/meta/test/apimethods/TestAnswerInlineQuery.java
Patch:
@@ -113,7 +113,7 @@ public void TestSwitchPmParameterOnlyContainsAcceptedCharacters() throws Excepti
         try {
             answerInlineQuery.validate();
         } catch (TelegramApiValidationException e) {
-            Assert.assertEquals("SwitchPmParameter only allows A-Z, a-z, 0-9 and _ characters", e.getMessage());
+            Assert.assertEquals("SwitchPmParameter only allows A-Z, a-z, 0-9, _ and - characters", e.getMessage());
         }
     }
 }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/stickers/MaskPosition.java
Patch:
@@ -1,6 +1,7 @@
 package org.telegram.telegrambots.meta.api.objects.stickers;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import org.telegram.telegrambots.meta.api.interfaces.InputBotApiObject;
 import org.telegram.telegrambots.meta.api.interfaces.Validable;
 import org.telegram.telegrambots.meta.exceptions.TelegramApiValidationException;
@@ -10,6 +11,7 @@
  * @version 3.2
  * This object describes the position on faces where a mask should be placed by default.
  */
+@JsonTypeInfo(use=JsonTypeInfo.Id.NONE)
 public class MaskPosition implements InputBotApiObject, Validable {
     private static final String POINT_FIELD = "point";
     private static final String XSHIFT_FIELD = "x_shift";

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/stickers/Sticker.java
Patch:
@@ -36,7 +36,7 @@ public class Sticker implements BotApiObject {
     @JsonProperty(SETNAME_FIELD)
     private String setName; ///< Optional. Name of the sticker set to which the sticker belongs
     @JsonProperty(MASKPOSITON_FIELD)
-    private String maskPosition; ///< Optional. For mask stickers, the position where the mask should be placed
+    private MaskPosition maskPosition; ///< Optional. For mask stickers, the position where the mask should be placed
 
     public Sticker() {
         super();
@@ -70,7 +70,7 @@ public String getSetName() {
         return setName;
     }
 
-    public String getMaskPosition() {
+    public MaskPosition getMaskPosition() {
         return maskPosition;
     }
 
@@ -84,7 +84,7 @@ public String toString() {
                 ", fileSize=" + fileSize +
                 ", emoji='" + emoji + '\'' +
                 ", setName='" + setName + '\'' +
-                ", maskPosition='" + maskPosition + '\'' +
+                ", maskPosition=" + maskPosition +
                 '}';
     }
 }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/AnswerInlineQuery.java
Patch:
@@ -136,8 +136,8 @@ public void validate() throws TelegramApiValidationException {
             if (switchPmParameter.length() > 64) {
                 throw new TelegramApiValidationException("SwitchPmParameter can't be longer than 64 chars", this);
             }
-            if (!Pattern.matches("[A-Za-z0-9_]+", switchPmParameter.trim() )) {
-                throw new TelegramApiValidationException("SwitchPmParameter only allows A-Z, a-z, 0-9 and _ characters", this);
+            if (!Pattern.matches("[A-Za-z0-9_\\-]+", switchPmParameter.trim() )) {
+                throw new TelegramApiValidationException("SwitchPmParameter only allows A-Z, a-z, 0-9, _ and - characters", this);
             }
         }
         for (InlineQueryResult result : results) {

File: telegrambots-meta/src/test/java/org/telegram/telegrambots/meta/test/apimethods/TestAnswerInlineQuery.java
Patch:
@@ -113,7 +113,7 @@ public void TestSwitchPmParameterOnlyContainsAcceptedCharacters() throws Excepti
         try {
             answerInlineQuery.validate();
         } catch (TelegramApiValidationException e) {
-            Assert.assertEquals("SwitchPmParameter only allows A-Z, a-z, 0-9 and _ characters", e.getMessage());
+            Assert.assertEquals("SwitchPmParameter only allows A-Z, a-z, 0-9, _ and - characters", e.getMessage());
         }
     }
 }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/stickers/MaskPosition.java
Patch:
@@ -1,6 +1,7 @@
 package org.telegram.telegrambots.meta.api.objects.stickers;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import org.telegram.telegrambots.meta.api.interfaces.InputBotApiObject;
 import org.telegram.telegrambots.meta.api.interfaces.Validable;
 import org.telegram.telegrambots.meta.exceptions.TelegramApiValidationException;
@@ -10,6 +11,7 @@
  * @version 3.2
  * This object describes the position on faces where a mask should be placed by default.
  */
+@JsonTypeInfo(use=JsonTypeInfo.Id.NONE)
 public class MaskPosition implements InputBotApiObject, Validable {
     private static final String POINT_FIELD = "point";
     private static final String XSHIFT_FIELD = "x_shift";

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/stickers/Sticker.java
Patch:
@@ -36,7 +36,7 @@ public class Sticker implements BotApiObject {
     @JsonProperty(SETNAME_FIELD)
     private String setName; ///< Optional. Name of the sticker set to which the sticker belongs
     @JsonProperty(MASKPOSITON_FIELD)
-    private String maskPosition; ///< Optional. For mask stickers, the position where the mask should be placed
+    private MaskPosition maskPosition; ///< Optional. For mask stickers, the position where the mask should be placed
 
     public Sticker() {
         super();
@@ -70,7 +70,7 @@ public String getSetName() {
         return setName;
     }
 
-    public String getMaskPosition() {
+    public MaskPosition getMaskPosition() {
         return maskPosition;
     }
 
@@ -84,7 +84,7 @@ public String toString() {
                 ", fileSize=" + fileSize +
                 ", emoji='" + emoji + '\'' +
                 ", setName='" + setName + '\'' +
-                ", maskPosition='" + maskPosition + '\'' +
+                ", maskPosition=" + maskPosition +
                 '}';
     }
 }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/groupadministration/DeleteStickerSetName.java
Patch:
@@ -19,7 +19,9 @@
  * The bot must be an administrator in the chat for this to work and must have the appropriate admin rights.
  * Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method.
  * Returns True on success.
+ * @deprecated  Replaced by {@link DeleteChatStickerSet}
  */
+@Deprecated
 public class DeleteStickerSetName extends BotApiMethod<Boolean> {
     public static final String PATH = "deleteChatStickerSet";
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/groupadministration/GetChatMemberCount.java
Patch:
@@ -16,7 +16,9 @@
  * @version 1.0
  * @brief Use this method to get the number of members in a chat. Returns Int on success.
  * @date 20 of May of 2016
+ * @deprecated  Replaced by {@link GetChatMembersCount}
  */
+@Deprecated
 public class GetChatMemberCount extends BotApiMethod<Integer> {
     public static final String PATH = "getChatMembersCount";
 

File: telegrambots/src/test/java/org/telegram/telegrambots/test/BotApiMethodHelperFactory.java
Patch:
@@ -14,7 +14,7 @@
 import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChat;
 import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatAdministrators;
 import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatMember;
-import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatMemberCount;
+import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatMembersCount;
 import org.telegram.telegrambots.meta.api.methods.groupadministration.KickChatMember;
 import org.telegram.telegrambots.meta.api.methods.groupadministration.LeaveChat;
 import org.telegram.telegrambots.meta.api.methods.groupadministration.UnbanChatMember;
@@ -123,8 +123,8 @@ public static BotApiMethod getChatMember() {
                 .setUserId(98765);
     }
 
-    public static BotApiMethod getChatMemberCount() {
-        return new GetChatMemberCount()
+    public static BotApiMethod getChatMembersCount() {
+        return new GetChatMembersCount()
                 .setChatId("12345");
     }
 

File: telegrambots/src/test/java/org/telegram/telegrambots/test/TestRestApi.java
Patch:
@@ -196,14 +196,14 @@ public void TestGetChatMember() {
     }
 
     @Test
-    public void TestGetChatMemberCount() {
-        webhookBot.setReturnValue(BotApiMethodHelperFactory.getChatMemberCount());
+    public void TestGetChatMembersCount() {
+        webhookBot.setReturnValue(BotApiMethodHelperFactory.getChatMembersCount());
 
         Entity<Update> entity = Entity.json(getUpdate());
         BotApiMethod result =
                 target("callback/testbot")
                         .request(MediaType.APPLICATION_JSON)
-                        .post(entity, GetChatMemberCount.class);
+                        .post(entity, GetChatMembersCount.class);
 
         assertEquals("{\"chat_id\":\"12345\",\"method\":\"getChatMembersCount\"}", map(result));
     }

File: telegrambots-meta/src/test/java/org/telegram/telegrambots/meta/test/apimethods/TestAnswerInlineQuery.java
Patch:
@@ -113,7 +113,7 @@ public void TestSwitchPmParameterOnlyContainsAcceptedCharacters() throws Excepti
         try {
             answerInlineQuery.validate();
         } catch (TelegramApiValidationException e) {
-            Assert.assertEquals("SwitchPmParameter only allows A-Z, a-z, 0-9 and _ characters", e.getMessage());
+            Assert.assertEquals("SwitchPmParameter only allows A-Z, a-z, 0-9, _ and - characters", e.getMessage());
         }
     }
 }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/AnswerCallbackQuery.java
Patch:
@@ -35,13 +35,13 @@ public class AnswerCallbackQuery extends BotApiMethod<Boolean> {
     @JsonProperty(TEXT_FIELD)
     private String text; ///< Optional	Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
     @JsonProperty(SHOWALERT_FIELD)
-    private Boolean showAlert; ///< Optional. If true, an alert will be shown by the client instead of a notificaiton at the top of the chat screen. Defaults to false.
+    private Boolean showAlert; ///< Optional. If true, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to false.
     @JsonProperty(URL_FIELD)
     /**
      * Optional. URL that will be opened by the user's client.
      * If you have created a Game and accepted the conditions via @Botfather,
      * specify the URL that opens your game. Otherwise you may use links
-     * InlineQueryResultGamelike telegram.me/your_bot?start=XXXX that open your bot with a parameter.
+     * like telegram.me/your_bot?start=XXXX that open your bot with a parameter.
      */
     private String url;
     @JsonProperty(CACHETIME_FIELD)

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/games/SetGameScore.java
Patch:
@@ -63,7 +63,7 @@ public class SetGameScore extends BotApiMethod<Serializable> {
     @JsonProperty(SCORE_FIELD)
     private Integer score; ///< New score, must be positive
     @JsonProperty(FORCE_FIELD)
-    private Boolean force; ///< Opfional. Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
+    private Boolean force; ///< Optional. Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
 
     public SetGameScore() {
         super();

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/send/SendAnimation.java
Patch:
@@ -46,9 +46,9 @@ public class SendAnimation extends PartialBotApiMethod<Message> {
      */
     private InputFile animation;
     private Integer duration; ///< Optional. Duration of sent animation in seconds
-    private String caption; ///< OptionaL. Animation caption (may also be used when resending videos by file_id).
+    private String caption; ///< Optional. Animation caption (may also be used when resending videos by file_id).
     private Integer width; ///< Optional. Animation width
-    private Integer height; ///< OptionaL. Animation height
+    private Integer height; ///< Optional. Animation height
     private Boolean disableNotification; ///< Optional. Sends the message silently. Users will receive a notification with no sound.
     private Integer replyToMessageId; ///< Optional. If the message is a reply, ID of the original message
     private ReplyKeyboard replyMarkup; ///< Optional. JSON-serialized object for a custom reply keyboard

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/send/SendVideo.java
Patch:
@@ -39,9 +39,9 @@ public class SendVideo extends PartialBotApiMethod<Message> {
     private String chatId; ///< Unique identifier for the chat to send the message to (Or username for channels)
     private InputFile video; ///< Video to send. file_id as String to resend a video that is already on the Telegram servers or URL to upload it
     private Integer duration; ///< Optional. Duration of sent video in seconds
-    private String caption; ///< OptionaL. Video caption (may also be used when resending videos by file_id).
+    private String caption; ///< Optional. Video caption (may also be used when resending videos by file_id).
     private Integer width; ///< Optional. Video width
-    private Integer height; ///< OptionaL. Video height
+    private Integer height; ///< Optional. Video height
     private Boolean supportsStreaming; ///< Optional. Pass True, if the uploaded video is suitable for streaming
     private Boolean disableNotification; ///< Optional. Sends the message silently. Users will receive a notification with no sound.
     private Integer replyToMessageId; ///< Optional. If the message is a reply, ID of the original message

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/stickers/CreateNewStickerSet.java
Patch:
@@ -164,7 +164,7 @@ public void validate() throws TelegramApiValidationException {
             throw new TelegramApiValidationException("name can't be empty", this);
         }
         if (title == null || title.isEmpty()) {
-            throw new TelegramApiValidationException("userId can't be empty", this);
+            throw new TelegramApiValidationException("title can't be empty", this);
         }
         if (emojis == null || emojis.isEmpty()) {
             throw new TelegramApiValidationException("emojis can't be empty", this);

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/updatingmessages/EditMessageMedia.java
Patch:
@@ -153,7 +153,7 @@ public void validate() throws TelegramApiValidationException {
             }
         }
         if (media == null) {
-            throw new TelegramApiValidationException("Text parameter can't be empty", this);
+            throw new TelegramApiValidationException("Media parameter can't be empty", this);
         }
 
         media.validate();

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/Chat.java
Patch:
@@ -38,7 +38,7 @@ public class Chat implements BotApiObject {
      * so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
      */
     @JsonProperty(ID_FIELD)
-    private Long id; ///< Unique identifier for this chat, not exciding 1e13 by absolute value
+    private Long id; ///< Unique identifier for this chat, not exceeding 1e13 by absolute value
     @JsonProperty(TYPE_FIELD)
     private String type; ///< Type of the chat, one of “private”, “group” or “channel”
     @JsonProperty(TITLE_FIELD)

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/ChatMember.java
Patch:
@@ -33,7 +33,7 @@ public class ChatMember implements BotApiObject {
     @JsonProperty(STATUS_FIELD)
     private String status; ///< The member's status in the chat. Can be “creator”, “administrator”, “member”,  “restricted”, “left” or “kicked”
     @JsonProperty(UNTILDATE_FIELD)
-    private Integer untilDate; ///< Optional. Resticted and kicked only. Date when restrictions will be lifted for this user, unix time
+    private Integer untilDate; ///< Optional. Restricted and kicked only. Date when restrictions will be lifted for this user, unix time
     @JsonProperty(CANBEEDITED_FIELD)
     private Boolean canBeEdited; ///< Optional. Administrators only. True, if the bot is allowed to edit administrator privileges of that user
     @JsonProperty(CANCHANGEINFORMATION_FIELD)
@@ -51,7 +51,7 @@ public class ChatMember implements BotApiObject {
     @JsonProperty(CANPINMESSAGES_FIELD)
     private Boolean canPinMessages; ///< Optional. Administrators only. True, if the administrator can pin messages
     @JsonProperty(CANPROMOTEMEMBERS_FIELD)
-    private Boolean canPromoteMembers; ///< Optional. Administrators only. True, if the administrator can add new administrators with a subset of his own privileges or demote administrators that it has promoted, directly or indirectly (promoted by administators that were appointed by the bot)
+    private Boolean canPromoteMembers; ///< Optional. Administrators only. True, if the administrator can add new administrators with a subset of his own privileges or demote administrators that it has promoted, directly or indirectly (promoted by administrators that were appointed by the bot)
     @JsonProperty(CANSENDMESSAGES_FIELD)
     private Boolean canSendMessages; ///< Optional. Restricted only. True, if the user can send text messages, contacts, locations and venues
     @JsonProperty(CANSENDMEDIAMESSAGES_FIELD)

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/PhotoSize.java
Patch:
@@ -27,7 +27,7 @@ public class PhotoSize implements BotApiObject {
     @JsonProperty(FILESIZE_FIELD)
     private Integer fileSize; ///< Optional. File size
     @JsonProperty(FILEPATH_FIELD)
-    private String filePath; ///< Undocumented field. Optional. Can contain the path to download the file direclty without calling to getFile
+    private String filePath; ///< Undocumented field. Optional. Can contain the path to download the file directly without calling to getFile
 
     public PhotoSize() {
         super();

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/inlinequery/result/InlineQueryResultVenue.java
Patch:
@@ -189,7 +189,7 @@ public void validate() throws TelegramApiValidationException {
             throw new TelegramApiValidationException("Longitude parameter can't be empty", this);
         }
         if (address == null || address.isEmpty()) {
-            throw new TelegramApiValidationException("Longitude parameter can't be empty", this);
+            throw new TelegramApiValidationException("Address parameter can't be empty", this);
         }
         if (inputMessageContent != null) {
             inputMessageContent.validate();

File: telegrambots/src/main/java/org/telegram/telegrambots/bots/DefaultAbsSender.java
Patch:
@@ -641,7 +641,7 @@ public Message execute(SendAnimation sendAnimation) throws TelegramApiException
         assertParamNotNull(sendAnimation, "sendAnimation");
         sendAnimation.validate();
         try {
-            String url = getBaseUrl() + SendVoice.PATH;
+            String url = getBaseUrl() + SendAnimation.PATH;
             HttpPost httppost = configuredHttpPost(url);
             MultipartEntityBuilder builder = MultipartEntityBuilder.create();
             builder.setLaxMode();

File: telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/bot/AbilityWebhookBot.java
Patch:
@@ -1,6 +1,5 @@
 package org.telegram.abilitybots.api.bot;
 
-import org.apache.http.impl.client.SystemDefaultCredentialsProvider;
 import org.telegram.abilitybots.api.db.DBContext;
 import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
 import org.telegram.telegrambots.meta.api.objects.Update;
@@ -29,8 +28,6 @@ protected AbilityWebhookBot(String botToken, String botUsername, String botPath,
 
   protected AbilityWebhookBot(String botToken, String botUsername, String botPath, DBContext db) {
     this(botToken, botUsername, botPath, db, new DefaultBotOptions());
-
-
   }
 
   protected AbilityWebhookBot(String botToken, String botUsername, String botPath, DefaultBotOptions botOptions) {

File: telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/bot/AbilityWebhookBot.java
Patch:
@@ -1,5 +1,6 @@
 package org.telegram.abilitybots.api.bot;
 
+import org.apache.http.impl.client.SystemDefaultCredentialsProvider;
 import org.telegram.abilitybots.api.db.DBContext;
 import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
 import org.telegram.telegrambots.meta.api.objects.Update;
@@ -28,6 +29,8 @@ protected AbilityWebhookBot(String botToken, String botUsername, String botPath,
 
   protected AbilityWebhookBot(String botToken, String botUsername, String botPath, DBContext db) {
     this(botToken, botUsername, botPath, db, new DefaultBotOptions());
+
+
   }
 
   protected AbilityWebhookBot(String botToken, String botUsername, String botPath, DefaultBotOptions botOptions) {

File: telegrambots/src/main/java/org/telegram/telegrambots/bots/DefaultAbsSender.java
Patch:
@@ -641,7 +641,7 @@ public Message execute(SendAnimation sendAnimation) throws TelegramApiException
         assertParamNotNull(sendAnimation, "sendAnimation");
         sendAnimation.validate();
         try {
-            String url = getBaseUrl() + SendVoice.PATH;
+            String url = getBaseUrl() + SendAnimation.PATH;
             HttpPost httppost = configuredHttpPost(url);
             MultipartEntityBuilder builder = MultipartEntityBuilder.create();
             builder.setLaxMode();

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/methods/send/SendAnimation.java
Patch:
@@ -52,7 +52,7 @@ public class SendAnimation extends PartialBotApiMethod<Message> {
     private Boolean disableNotification; ///< Optional. Sends the message silently. Users will receive a notification with no sound.
     private Integer replyToMessageId; ///< Optional. If the message is a reply, ID of the original message
     private ReplyKeyboard replyMarkup; ///< Optional. JSON-serialized object for a custom reply keyboard
-    private String parseMode; ///< Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.
+    private String parseMode; ///< Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.
     /**
      * Thumbnail of the file sent. The thumbnail should be in JPEG format and less than 200 kB in size.
      * A thumbnail‘s width and height should not exceed 90.

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/Chat.java
Patch:
@@ -9,6 +9,7 @@
  * @version 1.0
  * This object represents a Telegram chat with an user or a group
  */
+@SuppressWarnings("WeakerAccess")
 public class Chat implements BotApiObject {
 
     private static final String ID_FIELD = "id";
@@ -64,7 +65,7 @@ public class Chat implements BotApiObject {
     @JsonProperty(STICKERSETNAME_FIELD)
     private String stickerSetName; ///< Optional. For supergroups, name of Group sticker set. Returned only in getChat.
     @JsonProperty(CANSETSTICKERSET_FIELD)
-    private Message canSetStickerSet; ///< Optional. True, if the bot can change group the sticker set. Returned only in getChat.
+    private Boolean canSetStickerSet; ///< Optional. True, if the bot can change group the sticker set. Returned only in getChat.
 
     public Chat() {
         super();
@@ -130,7 +131,7 @@ public String getStickerSetName() {
         return stickerSetName;
     }
 
-    public Message getCanSetStickerSet() {
+    public Boolean getCanSetStickerSet() {
         return canSetStickerSet;
     }
 

File: telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/bot/AbilityBot.java
Patch:
@@ -1,11 +1,11 @@
 package org.telegram.abilitybots.api.bot;
 
 import org.telegram.abilitybots.api.db.DBContext;
-import org.telegram.telegrambots.api.objects.Update;
+import org.telegram.telegrambots.meta.api.objects.Update;
 import org.telegram.telegrambots.bots.DefaultBotOptions;
 import org.telegram.telegrambots.bots.TelegramLongPollingBot;
-import org.telegram.telegrambots.exceptions.TelegramApiRequestException;
-import org.telegram.telegrambots.generics.LongPollingBot;
+import org.telegram.telegrambots.meta.exceptions.TelegramApiRequestException;
+import org.telegram.telegrambots.meta.generics.LongPollingBot;
 import org.telegram.telegrambots.util.WebhookUtils;
 
 import static org.telegram.abilitybots.api.db.MapDBContext.onlineInstance;

File: telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/db/MapDBContext.java
Patch:
@@ -29,7 +29,7 @@
  * @author Abbas Abou Daya
  * @see <a href="https://github.com/jankotek/mapdb">MapDB project</a>
  */
-@SuppressWarnings("unchecked")
+@SuppressWarnings({"unchecked", "WeakerAccess"})
 public class MapDBContext implements DBContext {
   private static final String TAG = DBContext.class.getSimpleName();
 
@@ -169,7 +169,7 @@ public boolean contains(String name) {
   }
 
   @Override
-  public void close() throws IOException {
+  public void close() {
     db.close();
   }
 

File: telegrambots/src/main/java/org/telegram/telegrambots/bots/TelegramLongPollingBot.java
Patch:
@@ -1,10 +1,9 @@
 package org.telegram.telegrambots.bots;
 
 import org.telegram.telegrambots.meta.ApiContext;
-import org.telegram.telegrambots.meta.api.methods.updates.DeleteWebhook;
-import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
 import org.telegram.telegrambots.meta.exceptions.TelegramApiRequestException;
 import org.telegram.telegrambots.meta.generics.LongPollingBot;
+import org.telegram.telegrambots.util.WebhookUtils;
 
 /**
  * @author Ruben Bermudez

File: telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/db/DBContext.java
Patch:
@@ -1,6 +1,6 @@
 package org.telegram.abilitybots.api.db;
 
-import org.telegram.abilitybots.api.bot.AbilityBot;
+import org.telegram.abilitybots.api.bot.BaseAbilityBot;
 import org.telegram.telegrambots.meta.api.objects.Update;
 
 import java.io.Closeable;
@@ -12,7 +12,7 @@
  * This interface represents the high-level methods exposed to the user when handling an {@link Update}.
  * Example usage:
  * <p><code>Ability.builder().action(ctx -> {db.getSet(USERS); doSomething();})* </code></p>
- * {@link AbilityBot} contains a handle on the <code>db</code> that the user can use inside his declared abilities.
+ * {@link BaseAbilityBot} contains a handle on the <code>db</code> that the user can use inside his declared abilities.
  *
  * @author Abbas Abou Daya
  */

File: telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/db/MapDBContext.java
Patch:
@@ -21,7 +21,7 @@
 import static java.util.stream.Collectors.toMap;
 import static java.util.stream.StreamSupport.stream;
 import static org.mapdb.Serializer.JAVA;
-import static org.telegram.abilitybots.api.bot.AbilityBot.USERS;
+import static org.telegram.abilitybots.api.bot.BaseAbilityBot.USERS;
 
 /**
  * An implementation of {@link DBContext} that relies on a {@link DB}.

File: telegrambots-abilities/src/test/java/org/telegram/abilitybots/api/db/MapDBContextTest.java
Patch:
@@ -13,15 +13,15 @@
 import static com.google.common.collect.Sets.newHashSet;
 import static java.lang.String.format;
 import static org.junit.Assert.*;
-import static org.telegram.abilitybots.api.bot.AbilityBot.USERS;
-import static org.telegram.abilitybots.api.bot.AbilityBot.USER_ID;
 import static org.telegram.abilitybots.api.bot.AbilityBotTest.CREATOR;
 import static org.telegram.abilitybots.api.bot.AbilityBotTest.USER;
 import static org.telegram.abilitybots.api.db.MapDBContext.offlineInstance;
 
 public class MapDBContextTest {
-
+  private static final String USERS = "USERS";
+  private static final String USER_ID = "USER_ID";
   private static final String TEST = "TEST";
+
   private DBContext db;
 
   @Before

File: telegrambots/src/main/java/org/telegram/telegrambots/bots/DefaultAbsSender.java
Patch:
@@ -777,7 +777,7 @@ private void addInputFile(MultipartEntityBuilder builder, InputFile file, String
         }
     }
 
-    protected String getBaseUrl() {
+    public String getBaseUrl() {
         return options.getBaseUrl() + getBotToken() + "/";
     }
 

File: telegrambots-abilities/src/test/java/org/telegram/abilitybots/api/bot/AbilityBotI18nTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.telegram.abilitybots.api.objects.MessageContext;
 import org.telegram.abilitybots.api.sender.MessageSender;
 import org.telegram.abilitybots.api.sender.SilentSender;
-import org.telegram.telegrambots.api.objects.User;
+import org.telegram.telegrambots.meta.api.objects.User;
 
 import java.io.IOException;
 

File: telegrambots-abilities/src/test/java/org/telegram/abilitybots/api/db/MapDBContextTest.java
Patch:
@@ -3,7 +3,7 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
-import org.telegram.telegrambots.api.objects.User;
+import org.telegram.telegrambots.meta.api.objects.User;
 
 import java.io.IOException;
 import java.util.Map;

File: telegrambots-spring-boot-starter/src/test/java/org/telegram/telegrambots/starter/TestTelegramBotStarterConfiguration.java
Patch:
@@ -9,9 +9,9 @@
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.telegram.telegrambots.TelegramBotsApi;
-import org.telegram.telegrambots.generics.LongPollingBot;
-import org.telegram.telegrambots.generics.WebhookBot;
+import org.telegram.telegrambots.meta.TelegramBotsApi;
+import org.telegram.telegrambots.meta.generics.LongPollingBot;
+import org.telegram.telegrambots.meta.generics.WebhookBot;
 
 public class TestTelegramBotStarterConfiguration {
 

File: telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/objects/Flag.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * Flags are an conditions that are applied on an {@link Update}.
  * <p>
- * They can be used on {@link AbilityBuilder#flag(Flag...)} and on the post conditions in {@link AbilityBuilder#reply(Consumer, Predicate[])}.
+ * They can be used on {@link AbilityBuilder#flag(Predicate[])} and on the post conditions in {@link AbilityBuilder#reply(Consumer, Predicate[])}.
  *
  * @author Abbas Abou Daya
  */

File: telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/objects/Reply.java
Patch:
@@ -14,7 +14,7 @@
 /**
  * A reply consists of update conditionals and an action to be applied on the update.
  * <p>
- * If an update satisfies the {@link Reply#conditions}set by the reply, then it's safe to {@link Reply#actOn(Update)}.
+ * If an update satisfies the {@link Reply#conditions} set by the reply, then it's safe to {@link Reply#actOn(Update)}.
  *
  * @author Abbas Abou Daya
  */

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/meta/api/objects/WebhookInfo.java
Patch:
@@ -16,7 +16,7 @@ public class WebhookInfo implements BotApiObject {
 
     private static final String URL_FIELD = "url";
     private static final String HASCUSTOMCERTIFICATE_FIELD = "has_custom_certificate";
-    private static final String PENDINGUPDATESCOUNT_FIELD = "pending_updates_count";
+    private static final String PENDINGUPDATECOUNT_FIELD = "pending_update_count";
     private static final String MAXCONNECTIONS_FIELD = "max_connections";
     private static final String ALLOWEDUPDATES_FIELD = "allowed_updates";
     private static final String LASTERRORDATE_FIELD = "last_error_date";
@@ -26,7 +26,7 @@ public class WebhookInfo implements BotApiObject {
     private String url; ///< Webhook URL, may be empty if webhook is not set up
     @JsonProperty(HASCUSTOMCERTIFICATE_FIELD)
     private Boolean hasCustomCertificate; ///< True, if a custom certificate was provided for webhook certificate checks
-    @JsonProperty(PENDINGUPDATESCOUNT_FIELD)
+    @JsonProperty(PENDINGUPDATECOUNT_FIELD)
     private Integer pendingUpdatesCount; ///< Number updates awaiting delivery
     @JsonProperty(LASTERRORDATE_FIELD)
     private Integer lastErrorDate; ///< Optional. Unix time for the most recent error that happened when trying to deliver an update via webhook

File: telegrambots/src/main/java/org/telegram/telegrambots/updatesreceivers/DefaultBotSession.java
Patch:
@@ -241,7 +241,7 @@ private List<Update> getUpdatesFromServer() throws IOException {
             httpPost.setConfig(requestConfig);
             httpPost.setEntity(new StringEntity(objectMapper.writeValueAsString(request), ContentType.APPLICATION_JSON));
 
-            try (CloseableHttpResponse response = httpclient.execute(httpPost)) {
+            try (CloseableHttpResponse response = httpclient.execute(httpPost, options.getHttpContext())) {
                 HttpEntity ht = response.getEntity();
                 BufferedHttpEntity buf = new BufferedHttpEntity(ht);
                 String responseContent = EntityUtils.toString(buf, StandardCharsets.UTF_8);

File: telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/db/DBContext.java
Patch:
@@ -40,9 +40,9 @@ public interface DBContext extends Closeable {
   <T> Set<T> getSet(String name);
 
   /**
-   * @param name the unique name of the {@link Set}
-   * @param <T>  the type that the Set holds
-   * @return the Set with the specified name
+   * @param name the unique name of the {@link Var}
+   * @param <T>  the type that the variable holds
+   * @return the variable with the specified name
    */
   <T> Var<T> getVar(String name);
 

File: telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/bot/AbilityBot.java
Patch:
@@ -72,10 +72,11 @@
  * <li>Sets the user as the {@link Privacy#CREATOR} of the bot</li>
  * <li>Only the user with the ID returned by {@link AbilityBot#creatorId()} can genuinely claim the bot</li>
  * </ul>
- * <li>/commands - reports all user-defined commands (abilities)</li>
+ * <li>/report - reports all user-defined commands (abilities)</li>
  * <ul>
  * <li>The same format acceptable by BotFather</li>
  * </ul>
+ * <li>/commands - returns a list of all possible bot commands based on the privacy of the requesting user</li>
  * <li>/backup - returns a backup of the bot database</li>
  * <li>/recover - recovers the database</li>
  * <li>/promote <code>@username</code> - promotes user to bot admin</li>

File: telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/objects/EndUser.java
Patch:
@@ -37,7 +37,7 @@ private EndUser(Integer id, String firstName, String lastName, String username,
     this.firstName = firstName;
     this.lastName = lastName;
     this.username = username;
-    this.locale = locale != null? locale : Locale.ENGLISH;
+    this.locale = locale;
   }
 
   @JsonCreator
@@ -143,7 +143,7 @@ public String toString() {
         .add("firstName", firstName)
         .add("lastName", lastName)
         .add("username", username)
-        .add("locale", locale.toString())
+        .add("locale", locale)
         .toString();
   }
 }

File: telegrambots-abilities/src/test/java/org/telegram/abilitybots/api/bot/AbilityBotTest.java
Patch:
@@ -48,8 +48,8 @@
 
 public class AbilityBotTest {
   // Messages
-  protected static final String RECOVERY_MESSAGE = "I am ready to receive the backup file. Please reply to this message with the backup file attached.";
-  protected static final String RECOVER_SUCCESS = "I have successfully recovered.";
+  private static final String RECOVERY_MESSAGE = "I am ready to receive the backup file. Please reply to this message with the backup file attached.";
+  private static final String RECOVER_SUCCESS = "I have successfully recovered.";
 
   private static final String[] EMPTY_ARRAY = {};
   private static final long GROUP_ID = 10L;

File: telegrambots-abilities/src/test/java/org/telegram/abilitybots/api/bot/NoPublicCommandsBot.java
Patch:
@@ -4,7 +4,6 @@
 
 public class NoPublicCommandsBot extends AbilityBot {
 
-
     protected NoPublicCommandsBot(String botToken, String botUsername, DBContext db) {
         super(botToken, botUsername, db);
     }

File: telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/bot/AbilityBot.java
Patch:
@@ -637,7 +637,7 @@ boolean checkPrivacy(Trio<Update, Ability, String[]> trio) {
     Privacy privacy;
     int id = user.id();
 
-    privacy = isCreator(id) ? CREATOR : isAdmin(id) ? ADMIN : isGroupAdmin(update, id)? GROUP_ADMIN : PUBLIC;
+    privacy = isCreator(id) ? CREATOR : isAdmin(id) ? ADMIN : (isGroupUpdate(update) || isSuperGroupUpdate(update)) && isGroupAdmin(update, id)? GROUP_ADMIN : PUBLIC;
 
     boolean isOk = privacy.compareTo(trio.b().privacy()) >= 0;
 
@@ -650,7 +650,7 @@ boolean checkPrivacy(Trio<Update, Ability, String[]> trio) {
   private boolean isGroupAdmin(Update update, int id) {
     GetChatAdministrators admins = new GetChatAdministrators().setChatId(getChatId(update));
 
-    return isGroupUpdate(update) && silent.execute(admins)
+    return silent.execute(admins)
         .orElse(new ArrayList<>()).stream()
         .anyMatch(member -> member.getUser().getId() == id);
   }

File: telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/objects/Flag.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * Flags are an conditions that are applied on an {@link Update}.
  * <p>
- * They can be used on {@link AbilityBuilder#flag(Flag...)} and on the post conditions in {@link AbilityBuilder#reply(Consumer, Predicate[])}.
+ * They can be used on {@link AbilityBuilder#flag(Predicate[])} and on the post conditions in {@link AbilityBuilder#reply(Consumer, Predicate[])}.
  *
  * @author Abbas Abou Daya
  */

File: telegrambots-abilities/src/test/java/org/telegram/abilitybots/api/bot/AbilityBotTest.java
Patch:
@@ -362,7 +362,7 @@ public void canCheckPrivacy() {
   }
 
   @Test
-  public void canValidateGroupAdminPrivacy() throws TelegramApiException {
+  public void canValidateGroupAdminPrivacy() {
     Update update = mock(Update.class);
     Message message = mock(Message.class);
     org.telegram.telegrambots.api.objects.User user = mock(User.class);
@@ -383,7 +383,7 @@ public void canValidateGroupAdminPrivacy() throws TelegramApiException {
   }
 
   @Test
-  public void canRestrictNormalUsersFromGroupAdminAbilities() throws TelegramApiException {
+  public void canRestrictNormalUsersFromGroupAdminAbilities() {
     Update update = mock(Update.class);
     Message message = mock(Message.class);
     org.telegram.telegrambots.api.objects.User user = mock(User.class);

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/objects/WebhookInfo.java
Patch:
@@ -16,7 +16,7 @@ public class WebhookInfo implements BotApiObject {
 
     private static final String URL_FIELD = "url";
     private static final String HASCUSTOMCERTIFICATE_FIELD = "has_custom_certificate";
-    private static final String PENDINGUPDATESCOUNT_FIELD = "pending_updates_count";
+    private static final String PENDINGUPDATECOUNT_FIELD = "pending_update_count";
     private static final String MAXCONNECTIONS_FIELD = "max_connections";
     private static final String ALLOWEDUPDATES_FIELD = "allowed_updates";
     private static final String LASTERRORDATE_FIELD = "last_error_date";
@@ -26,7 +26,7 @@ public class WebhookInfo implements BotApiObject {
     private String url; ///< Webhook URL, may be empty if webhook is not set up
     @JsonProperty(HASCUSTOMCERTIFICATE_FIELD)
     private Boolean hasCustomCertificate; ///< True, if a custom certificate was provided for webhook certificate checks
-    @JsonProperty(PENDINGUPDATESCOUNT_FIELD)
+    @JsonProperty(PENDINGUPDATECOUNT_FIELD)
     private Integer pendingUpdatesCount; ///< Number updates awaiting delivery
     @JsonProperty(LASTERRORDATE_FIELD)
     private Integer lastErrorDate; ///< Optional. Unix time for the most recent error that happened when trying to deliver an update via webhook

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/objects/WebhookInfo.java
Patch:
@@ -16,7 +16,7 @@ public class WebhookInfo implements BotApiObject {
 
     private static final String URL_FIELD = "url";
     private static final String HASCUSTOMCERTIFICATE_FIELD = "has_custom_certificate";
-    private static final String PENDINGUPDATESCOUNT_FIELD = "pending_updates_count";
+    private static final String PENDINGUPDATECOUNT_FIELD = "pending_update_count";
     private static final String MAXCONNECTIONS_FIELD = "max_connections";
     private static final String ALLOWEDUPDATES_FIELD = "allowed_updates";
     private static final String LASTERRORDATE_FIELD = "last_error_date";
@@ -26,7 +26,7 @@ public class WebhookInfo implements BotApiObject {
     private String url; ///< Webhook URL, may be empty if webhook is not set up
     @JsonProperty(HASCUSTOMCERTIFICATE_FIELD)
     private Boolean hasCustomCertificate; ///< True, if a custom certificate was provided for webhook certificate checks
-    @JsonProperty(PENDINGUPDATESCOUNT_FIELD)
+    @JsonProperty(PENDINGUPDATECOUNT_FIELD)
     private Integer pendingUpdatesCount; ///< Number updates awaiting delivery
     @JsonProperty(LASTERRORDATE_FIELD)
     private Integer lastErrorDate; ///< Optional. Unix time for the most recent error that happened when trying to deliver an update via webhook

File: telegrambots-abilities/src/main/java/org/telegram/abilitybots/api/objects/EndUser.java
Patch:
@@ -37,7 +37,7 @@ private EndUser(Integer id, String firstName, String lastName, String username,
     this.firstName = firstName;
     this.lastName = lastName;
     this.username = username;
-    this.locale = locale != null? locale : Locale.ENGLISH;
+    this.locale = locale;
   }
 
   @JsonCreator
@@ -143,7 +143,7 @@ public String toString() {
         .add("firstName", firstName)
         .add("lastName", lastName)
         .add("username", username)
-        .add("locale", locale.toString())
+        .add("locale", locale)
         .toString();
   }
 }

File: telegrambots-abilities/src/test/java/org/telegram/abilitybots/api/bot/AbilityBotTest.java
Patch:
@@ -48,8 +48,8 @@
 
 public class AbilityBotTest {
   // Messages
-  protected static final String RECOVERY_MESSAGE = "I am ready to receive the backup file. Please reply to this message with the backup file attached.";
-  protected static final String RECOVER_SUCCESS = "I have successfully recovered.";
+  private static final String RECOVERY_MESSAGE = "I am ready to receive the backup file. Please reply to this message with the backup file attached.";
+  private static final String RECOVER_SUCCESS = "I have successfully recovered.";
 
   private static final String[] EMPTY_ARRAY = {};
   private static final long GROUP_ID = 10L;

File: telegrambots-abilities/src/test/java/org/telegram/abilitybots/api/bot/NoPublicCommandsBot.java
Patch:
@@ -4,7 +4,6 @@
 
 public class NoPublicCommandsBot extends AbilityBot {
 
-
     protected NoPublicCommandsBot(String botToken, String botUsername, DBContext db) {
         super(botToken, botUsername, db);
     }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/methods/AnswerCallbackQuery.java
Patch:
@@ -97,8 +97,9 @@ public Integer getCacheTime() {
         return cacheTime;
     }
 
-    public void setCacheTime(Integer cacheTime) {
+    public AnswerCallbackQuery setCacheTime(Integer cacheTime) {
         this.cacheTime = cacheTime;
+        return this;
     }
 
     @Override

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/methods/StopMessageLiveLocation.java
Patch:
@@ -60,7 +60,6 @@ public StopMessageLiveLocation setChatId(String chatId) {
     }
 
     public StopMessageLiveLocation setChatId(Long chatId) {
-        Objects.requireNonNull(chatId);
         this.chatId = chatId.toString();
         return this;
     }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/methods/games/GetGameHighScores.java
Patch:
@@ -86,7 +86,6 @@ public GetGameHighScores setChatId(String chatId) {
     }
 
     public GetGameHighScores setChatId(Long chatId) {
-        Objects.requireNonNull(chatId);
         this.chatId = chatId.toString();
         return this;
     }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/methods/games/SetGameScore.java
Patch:
@@ -104,7 +104,6 @@ public SetGameScore setChatId(String chatId) {
     }
 
     public SetGameScore setChatId(Long chatId) {
-        Objects.requireNonNull(chatId);
         this.chatId = chatId.toString();
         return this;
     }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/methods/updatingmessages/EditMessageLiveLocation.java
Patch:
@@ -104,7 +104,7 @@ public Float getLatitude() {
     }
 
     public EditMessageLiveLocation setLatitude(Float latitude) {
-        Objects.requireNonNull(chatId);
+        Objects.requireNonNull(latitude);
         this.latitude = latitude;
         return this;
     }
@@ -114,7 +114,7 @@ public Float getLongitud() {
     }
 
     public EditMessageLiveLocation setLongitud(Float longitud) {
-        Objects.requireNonNull(chatId);
+        Objects.requireNonNull(longitud);
         this.longitud = longitud;
         return this;
     }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/methods/updatingmessages/EditMessageReplyMarkup.java
Patch:
@@ -63,7 +63,6 @@ public EditMessageReplyMarkup setChatId(String chatId) {
     }
 
     public EditMessageReplyMarkup setChatId(Long chatId) {
-        Objects.requireNonNull(chatId);
         this.chatId = chatId.toString();
         return this;
     }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/methods/updatingmessages/EditMessageText.java
Patch:
@@ -79,7 +79,6 @@ public EditMessageText setChatId(String chatId) {
     }
 
     public EditMessageText setChatId(Long chatId) {
-        Objects.requireNonNull(chatId);
         this.chatId = chatId.toString();
         return this;
     }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/methods/AnswerCallbackQuery.java
Patch:
@@ -97,8 +97,9 @@ public Integer getCacheTime() {
         return cacheTime;
     }
 
-    public void setCacheTime(Integer cacheTime) {
+    public AnswerCallbackQuery setCacheTime(Integer cacheTime) {
         this.cacheTime = cacheTime;
+        return this;
     }
 
     @Override

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/methods/StopMessageLiveLocation.java
Patch:
@@ -60,7 +60,6 @@ public StopMessageLiveLocation setChatId(String chatId) {
     }
 
     public StopMessageLiveLocation setChatId(Long chatId) {
-        Objects.requireNonNull(chatId);
         this.chatId = chatId.toString();
         return this;
     }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/methods/games/GetGameHighScores.java
Patch:
@@ -86,7 +86,6 @@ public GetGameHighScores setChatId(String chatId) {
     }
 
     public GetGameHighScores setChatId(Long chatId) {
-        Objects.requireNonNull(chatId);
         this.chatId = chatId.toString();
         return this;
     }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/methods/games/SetGameScore.java
Patch:
@@ -104,7 +104,6 @@ public SetGameScore setChatId(String chatId) {
     }
 
     public SetGameScore setChatId(Long chatId) {
-        Objects.requireNonNull(chatId);
         this.chatId = chatId.toString();
         return this;
     }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/methods/updatingmessages/EditMessageLiveLocation.java
Patch:
@@ -104,7 +104,7 @@ public Float getLatitude() {
     }
 
     public EditMessageLiveLocation setLatitude(Float latitude) {
-        Objects.requireNonNull(chatId);
+        Objects.requireNonNull(latitude);
         this.latitude = latitude;
         return this;
     }
@@ -114,7 +114,7 @@ public Float getLongitud() {
     }
 
     public EditMessageLiveLocation setLongitud(Float longitud) {
-        Objects.requireNonNull(chatId);
+        Objects.requireNonNull(longitud);
         this.longitud = longitud;
         return this;
     }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/methods/updatingmessages/EditMessageReplyMarkup.java
Patch:
@@ -63,7 +63,6 @@ public EditMessageReplyMarkup setChatId(String chatId) {
     }
 
     public EditMessageReplyMarkup setChatId(Long chatId) {
-        Objects.requireNonNull(chatId);
         this.chatId = chatId.toString();
         return this;
     }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/methods/updatingmessages/EditMessageText.java
Patch:
@@ -79,7 +79,6 @@ public EditMessageText setChatId(String chatId) {
     }
 
     public EditMessageText setChatId(Long chatId) {
-        Objects.requireNonNull(chatId);
         this.chatId = chatId.toString();
         return this;
     }

File: telegrambots-abilities/src/test/java/org/telegram/abilitybots/api/db/MapDBContextTest.java
Patch:
@@ -31,7 +31,7 @@ public void setUp() {
   }
 
   @Test
-  public void canRecoverDB() throws IOException {
+  public void canRecoverDB() {
     Map<Integer, EndUser> users = db.getMap(USERS);
     Map<String, Integer> userIds = db.getMap(USER_ID);
     users.put(CREATOR.id(), CREATOR);

File: telegrambots-abilities/src/test/java/org/telegram/abilitybots/api/db/MapDBContextTest.java
Patch:
@@ -31,7 +31,7 @@ public void setUp() {
   }
 
   @Test
-  public void canRecoverDB() throws IOException {
+  public void canRecoverDB() {
     Map<Integer, EndUser> users = db.getMap(USERS);
     Map<String, Integer> userIds = db.getMap(USER_ID);
     users.put(CREATOR.id(), CREATOR);

File: telegrambots/src/main/java/org/telegram/telegrambots/bots/DefaultAbsSender.java
Patch:
@@ -51,7 +51,7 @@
 public abstract class DefaultAbsSender extends AbsSender {
     private static final ContentType TEXT_PLAIN_CONTENT_TYPE = ContentType.create("text/plain", StandardCharsets.UTF_8);
 
-    private final ExecutorService exe;
+    protected final ExecutorService exe;
     private final ObjectMapper objectMapper = new ObjectMapper();
     private final DefaultBotOptions options;
     private volatile CloseableHttpClient httpclient;

File: telegrambots-extensions/src/main/java/org/telegram/telegrambots/bots/commandbot/commands/CommandRegistry.java
Patch:
@@ -103,7 +103,7 @@ public final boolean executeCommand(AbsSender absSender, Message message) {
 
                 if (commandRegistryMap.containsKey(command)) {
                     String[] parameters = Arrays.copyOfRange(commandSplit, 1, commandSplit.length);
-                    commandRegistryMap.get(command).execute(absSender, message.getFrom(), message.getChat(), parameters);
+                    commandRegistryMap.get(command).processMessage(absSender, message, parameters);
                     return true;
                 } else if (defaultConsumer != null) {
                     defaultConsumer.accept(absSender, message);

File: telegrambots/src/main/java/org/telegram/telegrambots/updatesreceivers/DefaultBotSession.java
Patch:
@@ -261,7 +261,7 @@ private List<Update> getUpdatesFromServer() throws InterruptedException, Excepti
                     }
                 }
             } catch (SocketException e) {
-                if (!e.getMessage().equals("Socket Closed") {
+                if (!e.getMessage().equals("Socket Closed")) {
                     BotLogger.severe(LOGTAG, e);
                 }
             } catch (SocketTimeoutException e) {

File: telegrambots-extensions/src/main/java/org/telegram/telegrambots/bots/commandbot/commands/CommandRegistry.java
Patch:
@@ -103,7 +103,7 @@ public final boolean executeCommand(AbsSender absSender, Message message) {
 
                 if (commandRegistryMap.containsKey(command)) {
                     String[] parameters = Arrays.copyOfRange(commandSplit, 1, commandSplit.length);
-                    commandRegistryMap.get(command).execute(absSender, message.getFrom(), message.getChat(), parameters);
+                    commandRegistryMap.get(command).processMessage(absSender, message, parameters);
                     return true;
                 } else if (defaultConsumer != null) {
                     defaultConsumer.accept(absSender, message);

File: telegrambots-extensions/src/main/java/org/telegram/telegrambots/bots/commandbot/commands/BotCommand.java
Patch:
@@ -11,7 +11,7 @@
  */
 public abstract class BotCommand {
     public final static String COMMAND_INIT_CHARACTER = "/";
-    public static final String COMMAND_PARAMETER_SEPARATOR = " ";
+    public static final String COMMAND_PARAMETER_SEPARATOR_REGEXP = "\\s+";
     private final static int COMMAND_MAX_LENGTH = 32;
 
     private final String commandIdentifier;
@@ -75,4 +75,4 @@ public String toString() {
      * @param arguments passed arguments
      */
     public abstract void execute(AbsSender absSender, User user, Chat chat, String[] arguments);
-}
\ No newline at end of file
+}

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/objects/replykeyboard/ApiResponse.java
Patch:
@@ -11,8 +11,7 @@
 /**
  * @author Ruben Bermudez
  * @version 1.0
- * @brief TODO
- * @date 06 of November of 2016
+ * Response from Telegram Server
  */
 @JsonIgnoreProperties(ignoreUnknown = true)
 @JsonInclude(JsonInclude.Include.NON_NULL)

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/generics/BotOptions.java
Patch:
@@ -3,8 +3,7 @@
 /**
  * @author Ruben Bermudez
  * @version 1.0
- * @brief TODO
- * @date 29 of October of 2016
+ * Bot options
  */
 public interface BotOptions {
     String getBaseUrl();

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/generics/BotSession.java
Patch:
@@ -3,8 +3,7 @@
 /**
  * @author Ruben Bermudez
  * @version 1.0
- * @brief TODO
- * @date 29 of October of 2016
+ * Bot session interface
  */
 public interface BotSession {
     void setOptions(BotOptions options);

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/generics/UpdatesHandler.java
Patch:
@@ -3,8 +3,7 @@
 /**
  * @author Ruben Bermudez
  * @version 1.0
- * @brief TODO
- * @date 29 of October of 2016
+ * Base Updates Handler interface
  */
 public interface UpdatesHandler {
 }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/generics/UpdatesReader.java
Patch:
@@ -3,8 +3,7 @@
 /**
  * @author Ruben Bermudez
  * @version 1.0
- * @brief TODO
- * @date 29 of October of 2016
+ * Updates reader interface
  */
 public interface UpdatesReader {
     void start();

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/generics/Webhook.java
Patch:
@@ -5,8 +5,7 @@
 /**
  * @author Ruben Bermudez
  * @version 1.0
- * @brief TODO
- * @date 29 of October of 2016
+ * Webhook interface
  */
 public interface Webhook {
     void startServer() throws TelegramApiRequestException;

File: telegrambots-meta/src/test/java/org/telegram/telegrambots/test/TelegramBotsHelper.java
Patch:
@@ -3,8 +3,6 @@
 /**
  * @author Ruben Bermudez
  * @version 1.0
- * @brief TODO
- * @date 04 of November of 2016
  */
 public final class TelegramBotsHelper {
     private TelegramBotsHelper() {

File: telegrambots-meta/src/test/java/org/telegram/telegrambots/test/TestDeserialization.java
Patch:
@@ -27,8 +27,6 @@
 /**
  * @author Ruben Bermudez
  * @version 1.0
- * @brief TODO
- * @date 04 of November of 2016
  */
 public class TestDeserialization {
     private ObjectMapper mapper;

File: telegrambots-meta/src/test/java/org/telegram/telegrambots/test/TestTelegramApi.java
Patch:
@@ -9,8 +9,6 @@
 /**
  * @author Ruben Bermudez
  * @version 1.0
- * @brief TODO
- * @date 29 of October of 2016
  */
 public class TestTelegramApi extends TestBase {
 

File: telegrambots-meta/src/test/java/org/telegram/telegrambots/test/asserts/ApiAssert.java
Patch:
@@ -3,8 +3,6 @@
 /**
  * @author Ruben Bermudez
  * @version 1.0
- * @brief TODO
- * @date 04 of November of 2016
  */
 public final class ApiAssert {
     private ApiAssert() {}

File: telegrambots-meta/src/test/java/org/telegram/telegrambots/test/base/TestBase.java
Patch:
@@ -10,8 +10,6 @@
 /**
  * @author Ruben Bermudez
  * @version 1.0
- * @brief TODO
- * @date 29 of October of 2016
  */
 public abstract class TestBase {
 

File: telegrambots-meta/src/test/java/org/telegram/telegrambots/test/fakes/FakeBotSession.java
Patch:
@@ -7,8 +7,6 @@
 /**
  * @author Ruben Bermudez
  * @version 1.0
- * @brief TODO
- * @date 29 of October of 2016
  */
 public class FakeBotSession implements BotSession {
     @Override

File: telegrambots-meta/src/test/java/org/telegram/telegrambots/test/fakes/FakeWebhook.java
Patch:
@@ -7,8 +7,6 @@
 /**
  * @author Ruben Bermudez
  * @version 1.0
- * @brief TODO
- * @date 29 of October of 2016
  */
 public class FakeWebhook implements Webhook {
     private String internalUrl;

File: telegrambots/src/main/java/org/telegram/telegrambots/ApiContextInitializer.java
Patch:
@@ -8,8 +8,7 @@
 /**
  * @author Ruben Bermudez
  * @version 1.0
- * @brief TODO
- * @date 29 of October of 2016
+ * Initialization of ApiContext
  */
 public final class ApiContextInitializer {
     private ApiContextInitializer() {

File: telegrambots/src/test/java/org/telegram/telegrambots/test/BotApiMethodHelperFactory.java
Patch:
@@ -43,8 +43,6 @@
 /**
  * @author Ruben Bermudez
  * @version 1.0
- * @brief TODO
- * @date 02 of November of 2016
  */
 public final class BotApiMethodHelperFactory {
     private BotApiMethodHelperFactory() {

File: telegrambots/src/test/java/org/telegram/telegrambots/test/TestRestApi.java
Patch:
@@ -31,8 +31,6 @@
 /**
  * @author Ruben Bermudez
  * @version 1.0
- * @brief TODO
- * @date 01 of November of 2016
  */
 public class TestRestApi extends JerseyTest {
 

File: telegrambots/src/main/java/org/telegram/telegrambots/bots/TelegramWebhookBot.java
Patch:
@@ -45,7 +45,7 @@ public TelegramWebhookBot(DefaultBotOptions options) {
     @Override
     public void setWebhook(String url, String publicCertificatePath) throws TelegramApiRequestException {
         try (CloseableHttpClient httpclient = HttpClientBuilder.create().setSSLHostnameVerifier(new NoopHostnameVerifier()).build()) {
-            String requestUrl = getBaseUrl() + getBotToken() + "/" + SetWebhook.PATH;
+            String requestUrl = getBaseUrl() + SetWebhook.PATH;
 
             HttpPost httppost = new HttpPost(requestUrl);
             httppost.setConfig(botOptions.getRequestConfig());

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/objects/Message.java
Patch:
@@ -192,7 +192,9 @@ public String getText() {
     }
 
     public List<MessageEntity> getEntities() {
-        entities.forEach(x -> x.computeText(text));
+        if (entities != null) {
+            entities.forEach(x -> x.computeText(text));
+        }
         return entities;
     }
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/methods/send/SendChatAction.java
Patch:
@@ -49,7 +49,7 @@ public SendChatAction(String chatId, String action) {
         this.action = checkNotNull(action);
     }
 
-    public SendChatAction(Integer chatId, String action) {
+    public SendChatAction(Long chatId, String action) {
         this.chatId = checkNotNull(chatId).toString();
         this.action = checkNotNull(action);
     }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/methods/send/SendMessage.java
Patch:
@@ -56,7 +56,7 @@ public SendMessage(String chatId, String text) {
         this.text = checkNotNull(text);
     }
 
-    public SendMessage(Integer chatId, String text) {
+    public SendMessage(Long chatId, String text) {
         this.chatId = checkNotNull(chatId).toString();
         this.text = checkNotNull(text);
     }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/methods/send/SendVideoNote.java
Patch:
@@ -65,7 +65,7 @@ public SendVideoNote(String chatId, String videoNote) {
      * @param chatId Chat Id to send the video note
      * @param videoNote Video note file_id to send
      */
-    public SendVideoNote(Integer chatId, String videoNote) {
+    public SendVideoNote(Long chatId, String videoNote) {
         this.chatId = checkNotNull(chatId).toString();
         this.videoNote = checkNotNull(videoNote);
         this.isNewVideoNote = false;

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/methods/updatingmessages/DeleteMessage.java
Patch:
@@ -48,7 +48,7 @@ public DeleteMessage(String chatId, Integer messageId) {
         this.messageId = checkNotNull(messageId);
     }
 
-    public DeleteMessage(Integer chatId, Integer messageId) {
+    public DeleteMessage(Long chatId, Integer messageId) {
         this.chatId = checkNotNull(chatId).toString();
         this.messageId = checkNotNull(messageId);
     }

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/objects/Message.java
Patch:
@@ -183,7 +183,9 @@ public String getText() {
     }
 
     public List<MessageEntity> getEntities() {
-        entities.forEach(x -> x.computeText(text));
+        if (entities != null) {
+            entities.forEach(x -> x.computeText(text));
+        }
         return entities;
     }
 

File: telegrambots/src/test/java/org/telegram/telegrambots/TestRestApi.java
Patch:
@@ -108,7 +108,7 @@ public void TestAnswerInlineQuery() {
 
         assertEquals("{\"inline_query_id\":\"id\",\"results\":[{\"@class\":\"org." +
                 "telegram.telegrambots.api.objects.inlinequery.result.InlineQueryResultArticle\"," +
-                "\"id\":\"0\",\"title\":\"Title\",\"input_message_content\":{\"@class\":\"org." +
+                "\"type\":\"article\",\"id\":\"0\",\"title\":\"Title\",\"input_message_content\":{\"@class\":\"org." +
                 "telegram.telegrambots.api.objects.inlinequery.inputmessagecontent." +
                 "InputTextMessageContent\",\"message_text\":\"Text\",\"parse_mode\":\"Markdown\"}," +
                 "\"reply_markup\":{\"@class\":\"org.telegram.telegrambots.api.objects.replykeyboard" +
@@ -117,7 +117,7 @@ public void TestAnswerInlineQuery() {
                 "\"Button1\",\"callback_data\":\"Callback\"}]]},\"url\":\"Url\",\"hide_url\":false," +
                 "\"description\":\"Description\",\"thumb_url\":\"ThumbUrl\",\"thumb_width\":10," +
                 "\"thumb_height\":20},{\"@class\":\"org.telegram.telegrambots.api.objects." +
-                "inlinequery.result.InlineQueryResultPhoto\",\"id\":\"1\",\"photo_url\":\"PhotoUrl" +
+                "inlinequery.result.InlineQueryResultPhoto\",\"type\":\"photo\",\"id\":\"1\",\"photo_url\":\"PhotoUrl" +
                 "\",\"mime_type\":\"image/jpg\",\"photo_width\":10,\"photo_height\":20,\"thumb_url" +
                 "\":\"ThumbUrl\",\"title\":\"Title\",\"description\":\"Description\",\"caption\":" +
                 "\"Caption\",\"input_message_content\":{\"@class\":\"org.telegram.telegrambots." +

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultArticle.java
Patch:
@@ -27,7 +27,7 @@ public class InlineQueryResultArticle implements InlineQueryResult {
     private static final String THUMBHEIGHT_FIELD = "thumb_height";
 
     @JsonProperty(TYPE_FIELD)
-    private static final String type = "article"; ///< Type of the result, must be “article”
+    private final String type = "article"; ///< Type of the result, must be “article”
     @JsonProperty(ID_FIELD)
     private String id; ///< Unique identifier of this result, 1-64 bytes
     @JsonProperty(TITLE_FIELD)
@@ -53,7 +53,7 @@ public InlineQueryResultArticle() {
         super();
     }
 
-    public static String getType() {
+    public String getType() {
         return type;
     }
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultAudio.java
Patch:
@@ -29,7 +29,7 @@ public class InlineQueryResultAudio implements InlineQueryResult {
     private static final String CAPTION_FIELD = "caption";
 
     @JsonProperty(TYPE_FIELD)
-    private static final String type = "audio"; ///< Type of the result, must be "audio"
+    private final String type = "audio"; ///< Type of the result, must be "audio"
     @JsonProperty(ID_FIELD)
     private String id; ///< Unique identifier of this result
     @JsonProperty(AUDIOURL_FIELD)
@@ -51,7 +51,7 @@ public InlineQueryResultAudio() {
         super();
     }
 
-    public static String getType() {
+    public String getType() {
         return type;
     }
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultContact.java
Patch:
@@ -30,7 +30,7 @@ public class InlineQueryResultContact implements InlineQueryResult {
     private static final String THUMBHEIGHT_FIELD = "thumb_height";
 
     @JsonProperty(TYPE_FIELD)
-    private static final String type = "contact"; ///< Type of the result, must be "contact"
+    private final String type = "contact"; ///< Type of the result, must be "contact"
     @JsonProperty(ID_FIELD)
     private String id; ///< Unique identifier of this result, 1-64 bytes
     @JsonProperty(PHONE_NUMBER_FIELD)
@@ -54,7 +54,7 @@ public InlineQueryResultContact() {
         super();
     }
 
-    public static String getType() {
+    public String getType() {
         return type;
     }
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultDocument.java
Patch:
@@ -33,7 +33,7 @@ public class InlineQueryResultDocument implements InlineQueryResult {
     private static final String THUMBHEIGHT_FIELD = "thumb_height";
 
     @JsonProperty(TYPE_FIELD)
-    private static final String type = "document"; ///< Type of the result, must be "document"
+    private final String type = "document"; ///< Type of the result, must be "document"
     @JsonProperty(ID_FIELD)
     private String id; ///< Unique identifier of this result, 1-64 bytes
     @JsonProperty(TITLE_FIELD)
@@ -61,7 +61,7 @@ public InlineQueryResultDocument() {
         super();
     }
 
-    public static String getType() {
+    public String getType() {
         return type;
     }
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultGame.java
Patch:
@@ -37,7 +37,7 @@ public class InlineQueryResultGame implements InlineQueryResult {
     private static final String REPLY_MARKUP_FIELD = "reply_markup";
 
     @JsonProperty(TYPE_FIELD)
-    private static final String type = "game"; ///< Type of the result, must be "game"
+    private final String type = "game"; ///< Type of the result, must be "game"
     @JsonProperty(ID_FIELD)
     private String id; ///< Unique identifier of this result, 1-64 bytes
     @JsonProperty(GAMESHORTNAME_FIELD)
@@ -49,7 +49,7 @@ public InlineQueryResultGame() {
         super();
     }
 
-    public static String getType() {
+    public String getType() {
         return type;
     }
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultGif.java
Patch:
@@ -28,7 +28,7 @@ public class InlineQueryResultGif implements InlineQueryResult {
     private static final String REPLY_MARKUP_FIELD = "reply_markup";
 
     @JsonProperty(TYPE_FIELD)
-    private static final String type = "gif"; ///< Type of the result, must be "gif"
+    private final String type = "gif"; ///< Type of the result, must be "gif"
     @JsonProperty(ID_FIELD)
     private String id; ///< Unique identifier of this result, 1-64 bytes
     @JsonProperty(GIFURL_FIELD)
@@ -52,7 +52,7 @@ public InlineQueryResultGif() {
         super();
     }
 
-    public static String getType() {
+    public String getType() {
         return type;
     }
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultLocation.java
Patch:
@@ -30,7 +30,7 @@ public class InlineQueryResultLocation implements InlineQueryResult {
     private static final String THUMBHEIGHT_FIELD = "thumb_height";
 
     @JsonProperty(TYPE_FIELD)
-    private static final String type = "location"; ///< Type of the result, must be "location"
+    private final String type = "location"; ///< Type of the result, must be "location"
     @JsonProperty(ID_FIELD)
     private String id; ///< Unique identifier of this result, 1-64 bytes
     @JsonProperty(TITLE_FIELD)
@@ -54,7 +54,7 @@ public InlineQueryResultLocation() {
         super();
     }
 
-    public static String getType() {
+    public String getType() {
         return type;
     }
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultMpeg4Gif.java
Patch:
@@ -28,7 +28,7 @@ public class InlineQueryResultMpeg4Gif implements InlineQueryResult {
     private static final String REPLY_MARKUP_FIELD = "reply_markup";
 
     @JsonProperty(TYPE_FIELD)
-    private static final String type = "mpeg4_gif"; ///< Type of the result, must be "mpeg4_gif"
+    private final String type = "mpeg4_gif"; ///< Type of the result, must be "mpeg4_gif"
     @JsonProperty(ID_FIELD)
     private String id; ///< Unique identifier of this result, 1-64 bytes
     @JsonProperty(MPEG4URL_FIELD)
@@ -52,7 +52,7 @@ public InlineQueryResultMpeg4Gif() {
         super();
     }
 
-    public static String getType() {
+    public String getType() {
         return type;
     }
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultPhoto.java
Patch:
@@ -30,7 +30,7 @@ public class InlineQueryResultPhoto implements InlineQueryResult {
     private static final String REPLY_MARKUP_FIELD = "reply_markup";
 
     @JsonProperty(TYPE_FIELD)
-    private static final String type = "photo"; ///< Type of the result, must be “photo”
+    private final String type = "photo"; ///< Type of the result, must be “photo”
     @JsonProperty(ID_FIELD)
     private String id; ///< Unique identifier of this result, 1-64 bytes
     @JsonProperty(PHOTOURL_FIELD)
@@ -58,7 +58,7 @@ public InlineQueryResultPhoto() {
         super();
     }
 
-    public static String getType() {
+    public String getType() {
         return type;
     }
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultVenue.java
Patch:
@@ -31,7 +31,7 @@ public class InlineQueryResultVenue implements InlineQueryResult {
     private static final String THUMBHEIGHT_FIELD = "thumb_height";
 
     @JsonProperty(TYPE_FIELD)
-    private static final String type = "venue"; ///< Type of the result, must be "venue"
+    private final String type = "venue"; ///< Type of the result, must be "venue"
     @JsonProperty(ID_FIELD)
     private String id; ///< Unique identifier of this result, 1-64 bytes
     @JsonProperty(TITLE_FIELD)
@@ -59,7 +59,7 @@ public InlineQueryResultVenue() {
         super();
     }
 
-    public static String getType() {
+    public String getType() {
         return type;
     }
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultVideo.java
Patch:
@@ -31,7 +31,7 @@ public class InlineQueryResultVideo implements InlineQueryResult {
     private static final String REPLY_MARKUP_FIELD = "reply_markup";
 
     @JsonProperty(TYPE_FIELD)
-    private static final String type = "video"; ///< Type of the result, must be "video"
+    private final String type = "video"; ///< Type of the result, must be "video"
     @JsonProperty(ID_FIELD)
     private String id; ///< Unique identifier of this result
     @JsonProperty(MIMETYPE_FIELD)
@@ -61,7 +61,7 @@ public InlineQueryResultVideo() {
         super();
     }
 
-    public static String getType() {
+    public String getType() {
         return type;
     }
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultVoice.java
Patch:
@@ -28,7 +28,7 @@ public class InlineQueryResultVoice implements InlineQueryResult {
     private static final String CAPTION_FIELD = "caption";
 
     @JsonProperty(TYPE_FIELD)
-    private static final String type = "voice"; ///< Type of the result, must be "voice"
+    private final String type = "voice"; ///< Type of the result, must be "voice"
     @JsonProperty(ID_FIELD)
     private String id; ///< Unique identifier of this result, 1-64 bytes
     @JsonProperty(VOICEURL_FIELD)
@@ -48,7 +48,7 @@ public InlineQueryResultVoice() {
         super();
     }
 
-    public static String getType() {
+    public String getType() {
         return type;
     }
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/chached/InlineQueryResultCachedAudio.java
Patch:
@@ -27,7 +27,7 @@ public class InlineQueryResultCachedAudio implements InlineQueryResult {
     private static final String CAPTION_FIELD = "caption";
 
     @JsonProperty(TYPE_FIELD)
-    private static final String type = "audio"; ///< Type of the result, must be "audio"
+    private final String type = "audio"; ///< Type of the result, must be "audio"
     @JsonProperty(ID_FIELD)
     private String id; ///< Unique identifier of this result
     @JsonProperty(AUDIO_FILE_ID_FIELD)
@@ -43,7 +43,7 @@ public InlineQueryResultCachedAudio() {
         super();
     }
 
-    public static String getType() {
+    public String getType() {
         return type;
     }
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/chached/InlineQueryResultCachedDocument.java
Patch:
@@ -30,7 +30,7 @@ public class InlineQueryResultCachedDocument implements InlineQueryResult {
     private static final String INPUTMESSAGECONTENT_FIELD = "input_message_content";
 
     @JsonProperty(TYPE_FIELD)
-    private static final String type = "document"; ///< Type of the result, must be "document"
+    private final String type = "document"; ///< Type of the result, must be "document"
     @JsonProperty(ID_FIELD)
     private String id; ///< Unique identifier of this result, 1-64 bytes
     @JsonProperty(TITLE_FIELD)
@@ -50,7 +50,7 @@ public InlineQueryResultCachedDocument() {
         super();
     }
 
-    public static String getType() {
+    public String getType() {
         return type;
     }
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/chached/InlineQueryResultCachedGif.java
Patch:
@@ -26,7 +26,7 @@ public class InlineQueryResultCachedGif implements InlineQueryResult {
     private static final String REPLY_MARKUP_FIELD = "reply_markup";
 
     @JsonProperty(TYPE_FIELD)
-    private static final String type = "gif"; ///< Type of the result, must be "gif"
+    private final String type = "gif"; ///< Type of the result, must be "gif"
     @JsonProperty(ID_FIELD)
     private String id; ///< Unique identifier of this result, 1-64 bytes
     @JsonProperty(GIF_FILE_ID_FIELD)
@@ -44,7 +44,7 @@ public InlineQueryResultCachedGif() {
         super();
     }
 
-    public static String getType() {
+    public String getType() {
         return type;
     }
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/chached/InlineQueryResultCachedMpeg4Gif.java
Patch:
@@ -26,7 +26,7 @@ public class InlineQueryResultCachedMpeg4Gif implements InlineQueryResult {
     private static final String REPLY_MARKUP_FIELD = "reply_markup";
 
     @JsonProperty(TYPE_FIELD)
-    private static final String type = "mpeg4_gif"; ///< Type of the result, must be "mpeg4_gif"
+    private final String type = "mpeg4_gif"; ///< Type of the result, must be "mpeg4_gif"
     @JsonProperty(ID_FIELD)
     private String id; ///< Unique identifier of this result, 1-64 bytes
     @JsonProperty(MPEG4_FILE_ID_FIELD)
@@ -44,7 +44,7 @@ public InlineQueryResultCachedMpeg4Gif() {
         super();
     }
 
-    public static String getType() {
+    public String getType() {
         return type;
     }
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/chached/InlineQueryResultCachedPhoto.java
Patch:
@@ -27,7 +27,7 @@ public class InlineQueryResultCachedPhoto implements InlineQueryResult {
     private static final String REPLY_MARKUP_FIELD = "reply_markup";
 
     @JsonProperty(TYPE_FIELD)
-    private static final String type = "photo"; ///< Type of the result, must be “photo”
+    private final String type = "photo"; ///< Type of the result, must be “photo”
     @JsonProperty(ID_FIELD)
     private String id; ///< Unique identifier of this result, 1-64 bytes
     @JsonProperty(PHOTOFILEID_FIELD)
@@ -47,7 +47,7 @@ public InlineQueryResultCachedPhoto() {
         super();
     }
 
-    public static String getType() {
+    public String getType() {
         return type;
     }
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/chached/InlineQueryResultCachedSticker.java
Patch:
@@ -26,7 +26,7 @@ public class InlineQueryResultCachedSticker implements InlineQueryResult {
     private static final String REPLY_MARKUP_FIELD = "reply_markup";
 
     @JsonProperty(TYPE_FIELD)
-    private static final String type = "sticker"; ///< Type of the result, must be "sticker"
+    private final String type = "sticker"; ///< Type of the result, must be "sticker"
     @JsonProperty(ID_FIELD)
     private String id; ///< Unique identifier of this result, 1-64 bytes
     @JsonProperty(STICKER_FILE_ID_FIELD)
@@ -40,7 +40,7 @@ public InlineQueryResultCachedSticker() {
         super();
     }
 
-    public static String getType() {
+    public String getType() {
         return type;
     }
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/chached/InlineQueryResultCachedVideo.java
Patch:
@@ -27,7 +27,7 @@ public class InlineQueryResultCachedVideo implements InlineQueryResult {
     private static final String REPLY_MARKUP_FIELD = "reply_markup";
 
     @JsonProperty(TYPE_FIELD)
-    private static final String type = "video"; ///< Type of the result, must be "video"
+    private final String type = "video"; ///< Type of the result, must be "video"
     @JsonProperty(ID_FIELD)
     private String id; ///< Unique identifier of this result
     @JsonProperty(VIDEO_FILE_ID_FIELD)
@@ -47,7 +47,7 @@ public InlineQueryResultCachedVideo() {
         super();
     }
 
-    public static String getType() {
+    public String getType() {
         return type;
     }
 

File: telegrambots-meta/src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/chached/InlineQueryResultCachedVoice.java
Patch:
@@ -28,7 +28,7 @@ public class InlineQueryResultCachedVoice implements InlineQueryResult {
     private static final String CAPTION_FIELD = "caption";
 
     @JsonProperty(TYPE_FIELD)
-    private static final String type = "voice"; ///< Type of the result, must be "voice"
+    private final String type = "voice"; ///< Type of the result, must be "voice"
     @JsonProperty(ID_FIELD)
     private String id; ///< Unique identifier of this result, 1-64 bytes
     @JsonProperty(VOICE_FILE_ID_FIELD)
@@ -46,7 +46,7 @@ public InlineQueryResultCachedVoice() {
         super();
     }
 
-    public static String getType() {
+    public String getType() {
         return type;
     }
 

File: telegrambots/src/main/java/org/telegram/telegrambots/bots/TelegramWebhookBot.java
Patch:
@@ -29,15 +29,15 @@
  * <a href="https://core.telegram.org/bots/api#setwebhook">webhook</a>
  * @date 14 of January of 2016
  */
-public abstract class TelegramWebhookBot extends AbsSender implements WebhookBot {
+public abstract class TelegramWebhookBot extends DefaultAbsSender implements WebhookBot {
     private final DefaultBotOptions botOptions;
 
     public TelegramWebhookBot() {
         this(ApiContext.getInstance(DefaultBotOptions.class));
     }
 
     public TelegramWebhookBot(DefaultBotOptions options) {
-        super();
+        super(options);
         this.botOptions = options;
     }
 

File: src/main/java/org/telegram/telegrambots/api/methods/updates/GetUpdates.java
Patch:
@@ -31,7 +31,8 @@ public class GetUpdates implements IToJson {
      */
     private Integer limit;
     /**
-     * Optional	Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling
+     * Optional. Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling.
+     * Should be positive, 0 should be used for testing purposes only.
      */
     private Integer timeout;
 

File: src/main/java/org/telegram/telegrambots/api/objects/games/CallbackGame.java
Patch:
@@ -29,9 +29,7 @@
 /**
  * @author Ruben Bermudez
  * @version 2.4
- * @brief This object contains information about a game that will be returned as a response to a
- * callback query. It has no fields, use BotFather to setup your game,
- * its short name will actt as an identifier.
+ * @brief A placeholder, currently holds no information. Use BotFather to set up your game.
  * @date 16 of September of 2016
  */
 public class CallbackGame implements IBotApiObject {

File: src/main/java/org/telegram/telegrambots/TelegramBotsApi.java
Patch:
@@ -105,7 +105,6 @@ private static String fixExternalUrl(String externalUrl) {
      * @param webHookURL
      * @param botToken
      * @param publicCertificatePath
-     * @param publicCertificateName
      * @throws TelegramApiException
      */
     private static void setWebhook(String webHookURL, String botToken, String publicCertificatePath) throws TelegramApiException {

File: src/main/java/org/telegram/telegrambots/api/methods/AnswerCallbackQuery.java
Patch:
@@ -109,7 +109,7 @@ public void serializeWithType(JsonGenerator gen, SerializerProvider serializers,
 
     @Override
     public String toString() {
-        return "AnswerInlineQuery{" +
+        return "AnswerCallbackQuery{" +
                 "callbackQueryId='" + callbackQueryId + '\'' +
                 ", text=" + text +
                 ", showAlert=" + showAlert + '\'' +

File: src/main/java/org/telegram/telegrambots/api/methods/groupadministration/GetChatMember.java
Patch:
@@ -19,7 +19,7 @@
  * @date 20 of May of 2016
  */
 public class GetChatMember extends BotApiMethod<ChatMember> {
-    public static final String PATH = "getChatAdministrators";
+    public static final String PATH = "getChatMember";
 
     private static final String CHATID_FIELD = "chat_id";
     private static final String USERID_FIELD = "user_id";

File: src/main/java/org/telegram/telegrambots/api/methods/groupadministration/GetChatMemberCount.java
Patch:
@@ -17,7 +17,7 @@
  * @date 20 of May of 2016
  */
 public class GetChatMemberCount extends BotApiMethod<Integer> {
-    public static final String PATH = "getChatAdministrators";
+    public static final String PATH = "getChatMembersCount";
 
     private static final String CHATID_FIELD = "chat_id";
     private String chatId; ///< Unique identifier for the chat to send the message to (Or username for channels)

File: src/main/java/org/telegram/telegrambots/api/methods/groupadministration/KickChatMember.java
Patch:
@@ -90,7 +90,7 @@ public void serializeWithType(JsonGenerator gen, SerializerProvider serializers,
 
     @Override
     public String toString() {
-        return "SendMessage{" +
+        return "KickChatMember{" +
                 "chatId='" + chatId + '\'' +
                 ", userId='" + userId +
                 '}';

File: src/main/java/org/telegram/telegrambots/api/methods/groupadministration/UnbanChatMember.java
Patch:
@@ -86,7 +86,7 @@ public void serializeWithType(JsonGenerator gen, SerializerProvider serializers,
 
     @Override
     public String toString() {
-        return "SendMessage{" +
+        return "UnbanChatMember{" +
                 "chatId='" + chatId + '\'' +
                 ", userId='" + userId +
                 '}';

File: src/main/java/org/telegram/telegrambots/api/methods/send/SendContact.java
Patch:
@@ -207,7 +207,7 @@ public void serializeWithType(JsonGenerator gen, SerializerProvider serializers,
 
     @Override
     public String toString() {
-        return "SendLocation{" +
+        return "SendContact{" +
                 "chatId='" + chatId + '\'' +
                 ", phoneNumber=" + phoneNumber +
                 ", firstName=" + firstName +

File: src/main/java/org/telegram/telegrambots/api/methods/send/SendVenue.java
Patch:
@@ -233,7 +233,7 @@ public void serializeWithType(JsonGenerator gen, SerializerProvider serializers,
 
     @Override
     public String toString() {
-        return "SendLocation{" +
+        return "SendVenue{" +
                 "chatId='" + chatId + '\'' +
                 ", latitude=" + latitude +
                 ", longitude=" + longitude +

File: src/main/java/org/telegram/telegrambots/api/objects/CallbackQuery.java
Patch:
@@ -107,7 +107,7 @@ public void serializeWithType(JsonGenerator gen, SerializerProvider serializers,
 
     @Override
     public String toString() {
-        return "Contact{" +
+        return "CallbackQuery{" +
                 "id='" + id + '\'' +
                 ", from='" + from + '\'' +
                 ", message='" + message + '\'' +

File: src/main/java/org/telegram/telegrambots/api/objects/MessageEntity.java
Patch:
@@ -119,7 +119,7 @@ public void serializeWithType(JsonGenerator gen, SerializerProvider serializers,
 
     @Override
     public String toString() {
-        return "PhotoSize{" +
+        return "MessageEntity{" +
                 "type='" + type + '\'' +
                 ", offset=" + offset +
                 ", length=" + length +

File: src/main/java/org/telegram/telegrambots/TelegramBotsApi.java
Patch:
@@ -105,7 +105,6 @@ private static String fixExternalUrl(String externalUrl) {
      * @param webHookURL
      * @param botToken
      * @param publicCertificatePath
-     * @param publicCertificateName
      * @throws TelegramApiException
      */
     private static void setWebhook(String webHookURL, String botToken, String publicCertificatePath) throws TelegramApiException {

File: src/main/java/org/telegram/telegrambots/api/methods/AnswerCallbackQuery.java
Patch:
@@ -109,7 +109,7 @@ public void serializeWithType(JsonGenerator gen, SerializerProvider serializers,
 
     @Override
     public String toString() {
-        return "AnswerInlineQuery{" +
+        return "AnswerCallbackQuery{" +
                 "callbackQueryId='" + callbackQueryId + '\'' +
                 ", text=" + text +
                 ", showAlert=" + showAlert + '\'' +

File: src/main/java/org/telegram/telegrambots/api/methods/groupadministration/GetChatMember.java
Patch:
@@ -19,7 +19,7 @@
  * @date 20 of May of 2016
  */
 public class GetChatMember extends BotApiMethod<ChatMember> {
-    public static final String PATH = "getChatAdministrators";
+    public static final String PATH = "getChatMember";
 
     private static final String CHATID_FIELD = "chat_id";
     private static final String USERID_FIELD = "user_id";

File: src/main/java/org/telegram/telegrambots/api/methods/groupadministration/GetChatMemberCount.java
Patch:
@@ -17,7 +17,7 @@
  * @date 20 of May of 2016
  */
 public class GetChatMemberCount extends BotApiMethod<Integer> {
-    public static final String PATH = "getChatAdministrators";
+    public static final String PATH = "getChatMembersCount";
 
     private static final String CHATID_FIELD = "chat_id";
     private String chatId; ///< Unique identifier for the chat to send the message to (Or username for channels)

File: src/main/java/org/telegram/telegrambots/api/methods/groupadministration/KickChatMember.java
Patch:
@@ -90,7 +90,7 @@ public void serializeWithType(JsonGenerator gen, SerializerProvider serializers,
 
     @Override
     public String toString() {
-        return "SendMessage{" +
+        return "KickChatMember{" +
                 "chatId='" + chatId + '\'' +
                 ", userId='" + userId +
                 '}';

File: src/main/java/org/telegram/telegrambots/api/methods/groupadministration/UnbanChatMember.java
Patch:
@@ -86,7 +86,7 @@ public void serializeWithType(JsonGenerator gen, SerializerProvider serializers,
 
     @Override
     public String toString() {
-        return "SendMessage{" +
+        return "UnbanChatMember{" +
                 "chatId='" + chatId + '\'' +
                 ", userId='" + userId +
                 '}';

File: src/main/java/org/telegram/telegrambots/api/methods/send/SendContact.java
Patch:
@@ -207,7 +207,7 @@ public void serializeWithType(JsonGenerator gen, SerializerProvider serializers,
 
     @Override
     public String toString() {
-        return "SendLocation{" +
+        return "SendContact{" +
                 "chatId='" + chatId + '\'' +
                 ", phoneNumber=" + phoneNumber +
                 ", firstName=" + firstName +

File: src/main/java/org/telegram/telegrambots/api/methods/send/SendVenue.java
Patch:
@@ -233,7 +233,7 @@ public void serializeWithType(JsonGenerator gen, SerializerProvider serializers,
 
     @Override
     public String toString() {
-        return "SendLocation{" +
+        return "SendVenue{" +
                 "chatId='" + chatId + '\'' +
                 ", latitude=" + latitude +
                 ", longitude=" + longitude +

File: src/main/java/org/telegram/telegrambots/api/objects/CallbackQuery.java
Patch:
@@ -107,7 +107,7 @@ public void serializeWithType(JsonGenerator gen, SerializerProvider serializers,
 
     @Override
     public String toString() {
-        return "Contact{" +
+        return "CallbackQuery{" +
                 "id='" + id + '\'' +
                 ", from='" + from + '\'' +
                 ", message='" + message + '\'' +

File: src/main/java/org/telegram/telegrambots/api/objects/MessageEntity.java
Patch:
@@ -119,7 +119,7 @@ public void serializeWithType(JsonGenerator gen, SerializerProvider serializers,
 
     @Override
     public String toString() {
-        return "PhotoSize{" +
+        return "MessageEntity{" +
                 "type='" + type + '\'' +
                 ", offset=" + offset +
                 ", length=" + length +

File: src/main/java/org/telegram/telegrambots/bots/TelegramLongPollingCommandBot.java
Patch:
@@ -14,7 +14,7 @@
 /**
  * This class adds command functionality to the TelegramLongPollingBot
  *
- * @author tschulz
+ * @author Timo Schulz (Mit0x2)
  */
 public abstract class TelegramLongPollingCommandBot extends TelegramLongPollingBot implements ICommandRegistry {
     private final CommandRegistry commandRegistry;

File: src/main/java/org/telegram/telegrambots/bots/commands/ICommandRegistry.java
Patch:
@@ -8,7 +8,9 @@
 import java.util.function.BiConsumer;
 
 /**
+ * This Interface represents the gateway for registering and deregistering commands.
  *
+ * @author Timo Schulz (Mit0x2)
  */
 public interface ICommandRegistry {
 

File: src/main/java/org/telegram/telegrambots/api/commands/HelpBotCommand.java
Patch:
@@ -1,10 +1,10 @@
 package org.telegram.telegrambots.api.commands;
 
-import org.telegram.telegrambots.BotLogger;
 import org.telegram.telegrambots.TelegramApiException;
 import org.telegram.telegrambots.api.methods.send.SendMessage;
 import org.telegram.telegrambots.api.objects.Chat;
 import org.telegram.telegrambots.bots.AbsSender;
+import org.telegram.telegrambots.logging.BotLogger;
 
 /**
  * standard help command, which gets registered by default, to supply a list of all available commands

File: src/main/java/org/telegram/telegrambots/bots/TelegramLongPollingCommandBot.java
Patch:
@@ -1,13 +1,14 @@
 package org.telegram.telegrambots.bots;
 
-import org.telegram.telegrambots.BotLogger;
+
 import org.telegram.telegrambots.TelegramApiException;
 import org.telegram.telegrambots.api.commands.BotCommand;
 import org.telegram.telegrambots.api.commands.CommandRegistry;
 import org.telegram.telegrambots.api.commands.ICommandRegistry;
 import org.telegram.telegrambots.api.methods.send.SendMessage;
 import org.telegram.telegrambots.api.objects.Message;
 import org.telegram.telegrambots.api.objects.Update;
+import org.telegram.telegrambots.logging.BotLogger;
 
 import java.util.Collection;
 import java.util.Map;

File: src/main/java/org/telegram/telegrambots/api/objects/Update.java
Patch:
@@ -25,7 +25,7 @@ public class Update implements IBotApiObject {
     private static final String INLINEQUERY_FIELD = "inline_query";
     private static final String CHOSENINLINEQUERY_FIELD = "chosen_inline_result";
     private static final String CALLBACKQUERY_FIELD = "callback_query";
-    private static final String EDITEDMESSAGE_FIELD = "callback_query";
+    private static final String EDITEDMESSAGE_FIELD = "edited_message";
     @JsonProperty(UPDATEID_FIELD)
     private Integer updateId;
     @JsonProperty(MESSAGE_FIELD)

File: src/main/java/org/telegram/telegrambots/api/objects/Update.java
Patch:
@@ -25,7 +25,7 @@ public class Update implements IBotApiObject {
     private static final String INLINEQUERY_FIELD = "inline_query";
     private static final String CHOSENINLINEQUERY_FIELD = "chosen_inline_result";
     private static final String CALLBACKQUERY_FIELD = "callback_query";
-    private static final String EDITEDMESSAGE_FIELD = "callback_query";
+    private static final String EDITEDMESSAGE_FIELD = "edited_message";
     @JsonProperty(UPDATEID_FIELD)
     private Integer updateId;
     @JsonProperty(MESSAGE_FIELD)

File: src/main/java/org/telegram/telegrambots/api/methods/send/SendPhoto.java
Patch:
@@ -13,7 +13,7 @@ public class SendPhoto {
 
     public static final String CHATID_FIELD = "chat_id";
     public static final String PHOTO_FIELD = "photo";
-    public static final String CAPTION_FIELD = "photo";
+    public static final String CAPTION_FIELD = "caption";
     public static final String DISABLENOTIFICATION_FIELD = "disable_notification";
     public static final String REPLYTOMESSAGEID_FIELD = "reply_to_message_id";
     public static final String REPLYMARKUP_FIELD = "reply_markup";

File: src/main/java/org/telegram/telegrambots/bots/AbsSender.java
Patch:
@@ -510,7 +510,7 @@ public Message sendDocument(SendDocument sendDocument) throws TelegramApiExcepti
                     builder.addTextBody(SendDocument.REPLYTOMESSAGEID_FIELD, sendDocument.getReplayToMessageId().toString());
                 }
                 if (sendDocument.getCaption() != null) {
-                    builder.addTextBody(SendDocument.CAPTION_FIELD, sendDocument.getCaption());
+                    builder.addTextBody(SendDocument.CAPTION_FIELD, sendDocument.getCaption(), ContentType.create("text/plain", StandardCharsets.UTF_8));
                 }
                 if (sendDocument.getDisableNotification() != null) {
                     builder.addTextBody(SendDocument.DISABLENOTIFICATION_FIELD, sendDocument.getDisableNotification().toString());
@@ -570,7 +570,7 @@ public Message sendPhoto(SendPhoto sendPhoto) throws TelegramApiException {
                     builder.addTextBody(SendPhoto.REPLYTOMESSAGEID_FIELD, sendPhoto.getReplayToMessageId().toString());
                 }
                 if (sendPhoto.getCaption() != null) {
-                    builder.addTextBody(SendPhoto.CAPTION_FIELD, sendPhoto.getCaption());
+                    builder.addTextBody(SendPhoto.CAPTION_FIELD, sendPhoto.getCaption(), ContentType.create("text/plain", StandardCharsets.UTF_8));
                 }
                 if (sendPhoto.getDisableNotification() != null) {
                     builder.addTextBody(SendPhoto.DISABLENOTIFICATION_FIELD, sendPhoto.getDisableNotification().toString());
@@ -630,7 +630,7 @@ public Message sendVideo(SendVideo sendVideo) throws TelegramApiException {
                     builder.addTextBody(SendVideo.REPLYTOMESSAGEID_FIELD, sendVideo.getReplayToMessageId().toString());
                 }
                 if (sendVideo.getCaption() != null) {
-                    builder.addTextBody(SendVideo.CAPTION_FIELD, sendVideo.getCaption());
+                    builder.addTextBody(SendVideo.CAPTION_FIELD, sendVideo.getCaption(), ContentType.create("text/plain", StandardCharsets.UTF_8));
                 }
                 if (sendVideo.getDuration() != null) {
                     builder.addTextBody(SendVideo.DURATION_FIELD, sendVideo.getDuration().toString());

File: src/main/java/org/telegram/telegrambots/bots/TelegramLongPollingCommandBot.java
Patch:
@@ -17,7 +17,7 @@
  *
  * @author tschulz
  */
-public abstract class TelegramLongPollingCommandBot extends AbsSender implements ITelegramLongPollingBot, ICommandRegistry{
+public abstract class TelegramLongPollingCommandBot extends AbsSender implements ITelegramLongPollingBot, ICommandRegistry {
 
     public static final String LOGTAG = "TelegramLongPollingCommandBot";
     private final CommandRegistry commandRegistry;

File: src/main/java/org/telegram/telegrambots/api/commands/CommandRegistry.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * @author tschulz
  */
-public final class CommandRegistry implements ICommandRegistery {
+public final class CommandRegistry implements ICommandRegistry {
 
     private final Map<String, Command> commandRegistryMap = new HashMap<>();
 

File: src/main/java/org/telegram/telegrambots/api/commands/HelpCommand.java
Patch:
@@ -12,9 +12,9 @@
 public class HelpCommand extends Command {
 
     private static final String LOGTAG = "HELPCOMMAND";
-    private final ICommandRegistery commandRegistry;
+    private final ICommandRegistry commandRegistry;
 
-    public HelpCommand(ICommandRegistery commandRegistry, String botToken) {
+    public HelpCommand(ICommandRegistry commandRegistry, String botToken) {
         super("help", "Gives an overview over all Commands registered for this bot", botToken);
         this.commandRegistry = commandRegistry;
     }

File: src/main/java/org/telegram/telegrambots/api/commands/ICommandRegistry.java
Patch:
@@ -6,7 +6,7 @@
 /**
  *
  */
-public interface ICommandRegistery {
+public interface ICommandRegistry {
 
     /**
      * register a command

File: src/main/java/org/telegram/telegrambots/bots/TelegramLongPollingBot.java
Patch:
@@ -4,7 +4,7 @@
 import org.telegram.telegrambots.TelegramApiException;
 import org.telegram.telegrambots.api.commands.Command;
 import org.telegram.telegrambots.api.commands.CommandRegistry;
-import org.telegram.telegrambots.api.commands.ICommandRegistery;
+import org.telegram.telegrambots.api.commands.ICommandRegistry;
 import org.telegram.telegrambots.api.methods.send.SendMessage;
 import org.telegram.telegrambots.api.objects.Message;
 import org.telegram.telegrambots.api.objects.Update;
@@ -18,7 +18,7 @@
  * @brief TODO
  * @date 14 of January of 2016
  */
-public abstract class TelegramLongPollingBot extends AbsSender implements ITelegramLongPollingBot, ICommandRegistery {
+public abstract class TelegramLongPollingBot extends AbsSender implements ITelegramLongPollingBot, ICommandRegistry {
 
     public static final String LOGTAG = "TelegramLongPollingBot";
     private final CommandRegistry commandRegistry;

File: src/main/java/org/telegram/telegrambots/logging/FileFormatter.java
Patch:
@@ -39,11 +39,11 @@ private static String dateFormatterForLogs(LocalDateTime dateTime) {
     }
 
     private static String logMsgToFile(Level level, String msg, String dateForLog) {
-        return String.format("%s{%s} %s", dateForLog, level.toString(), msg);
+        return String.format("%s{%s} %s\n", dateForLog, level.toString(), msg);
     }
 
     private static String logThrowableToFile(Level level, String message, Throwable throwable, String dateForLog) {
-        String throwableLog = String.format("%s{%s} %s - %s", dateForLog, level.toString(), message, throwable.toString());
+        String throwableLog = String.format("%s{%s} %s - %s\n", dateForLog, level.toString(), message, throwable.toString());
         for (StackTraceElement element : throwable.getStackTrace()) {
             throwableLog += "\tat " + element + "\n";
         }

File: src/main/java/org/telegram/telegrambots/api/methods/send/SendPhoto.java
Patch:
@@ -13,7 +13,7 @@ public class SendPhoto {
 
     public static final String CHATID_FIELD = "chat_id";
     public static final String PHOTO_FIELD = "photo";
-    public static final String CAPTION_FIELD = "photo";
+    public static final String CAPTION_FIELD = "caption";
     public static final String DISABLENOTIFICATION_FIELD = "disable_notification";
     public static final String REPLYTOMESSAGEID_FIELD = "reply_to_message_id";
     public static final String REPLYMARKUP_FIELD = "reply_markup";

File: src/main/java/org/telegram/telegrambots/api/objects/Update.java
Patch:
@@ -125,6 +125,7 @@ public String toString() {
                 ", message=" + message +
                 ", inlineQuery=" + inlineQuery +
                 ", chosenInlineQuery=" + chosenInlineQuery +
+                ", callbackQuery=" + callbackQuery +
                 '}';
     }
 }

File: src/main/java/org/telegram/telegrambots/api/objects/Update.java
Patch:
@@ -125,6 +125,7 @@ public String toString() {
                 ", message=" + message +
                 ", inlineQuery=" + inlineQuery +
                 ", chosenInlineQuery=" + chosenInlineQuery +
+                ", callbackQuery=" + callbackQuery +
                 '}';
     }
 }

File: src/main/java/org/telegram/telegrambots/updatesreceivers/BotSession.java
Patch:
@@ -128,7 +128,7 @@ public void run() {
                         }
                     } catch (JSONException ignored) {
                     }
-                } catch (Exception ignored) {
+                } catch (Exception e) {
                     try {
                         synchronized (this) {
                             this.wait(500);

File: src/main/java/org/telegram/telegrambots/updatesreceivers/BotSession.java
Patch:
@@ -128,7 +128,7 @@ public void run() {
                         }
                     } catch (JSONException ignored) {
                     }
-                } catch (Exception ignored) {
+                } catch (Exception e) {
                     try {
                         synchronized (this) {
                             this.wait(500);

File: src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultArticle.java
Patch:
@@ -4,7 +4,6 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
-
 import org.json.JSONObject;
 import org.telegram.telegrambots.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
 import org.telegram.telegrambots.api.objects.replykeyboard.InlineKeyboardMarkup;
@@ -154,9 +153,9 @@ public JSONObject toJson() {
         jsonObject.put(TYPE_FIELD, this.type);
         jsonObject.put(ID_FIELD, this.id);
         jsonObject.put(TITLE_FIELD, this.title);
-        jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent);
+        jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent.toJson());
         if (replyMarkup != null) {
-            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup);
+            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup.toJson());
         }
         if (url != null) {
             jsonObject.put(URL_FIELD, this.url);

File: src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultAudio.java
Patch:
@@ -4,7 +4,6 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
-
 import org.json.JSONObject;
 import org.telegram.telegrambots.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
 import org.telegram.telegrambots.api.objects.replykeyboard.InlineKeyboardMarkup;
@@ -132,10 +131,10 @@ public JSONObject toJson() {
             jsonObject.put(AUDIO_DURATION_FIELD, audioDuration);
         }
         if (replyMarkup != null) {
-            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup);
+            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup.toJson());
         }
         if (inputMessageContent != null) {
-            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent);
+            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent.toJson());
         }
 
         return jsonObject;

File: src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultContact.java
Patch:
@@ -4,7 +4,6 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
-
 import org.json.JSONObject;
 import org.telegram.telegrambots.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
 import org.telegram.telegrambots.api.objects.replykeyboard.InlineKeyboardMarkup;
@@ -150,10 +149,10 @@ public JSONObject toJson() {
             jsonObject.put(LAST_NAME_FIELD, lastName);
         }
         if (replyMarkup != null) {
-            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup);
+            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup.toJson());
         }
         if (inputMessageContent != null) {
-            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent);
+            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent.toJson());
         }
         if (thumbUrl != null) {
             jsonObject.put(THUMBURL_FIELD, this.thumbUrl);

File: src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultDocument.java
Patch:
@@ -4,7 +4,6 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
-
 import org.json.JSONObject;
 import org.telegram.telegrambots.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
 import org.telegram.telegrambots.api.objects.replykeyboard.InlineKeyboardMarkup;
@@ -179,10 +178,10 @@ public JSONObject toJson() {
             jsonObject.put(CAPTION_FIELD, caption);
         }
         if (replyMarkup != null) {
-            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup);
+            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup.toJson());
         }
         if (inputMessageContent != null) {
-            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent);
+            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent.toJson());
         }
         if (thumbUrl != null) {
             jsonObject.put(THUMBURL_FIELD, this.thumbUrl);

File: src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultGif.java
Patch:
@@ -4,7 +4,6 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
-
 import org.json.JSONObject;
 import org.telegram.telegrambots.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
 import org.telegram.telegrambots.api.objects.replykeyboard.InlineKeyboardMarkup;
@@ -159,10 +158,10 @@ public JSONObject toJson() {
             jsonObject.put(CAPTION_FIELD, this.caption);
         }
         if (replyMarkup != null) {
-            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup);
+            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup.toJson());
         }
         if (inputMessageContent != null) {
-            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent);
+            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent.toJson());
         }
         return jsonObject;
     }

File: src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultLocation.java
Patch:
@@ -4,7 +4,6 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
-
 import org.json.JSONObject;
 import org.telegram.telegrambots.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
 import org.telegram.telegrambots.api.objects.replykeyboard.InlineKeyboardMarkup;
@@ -148,10 +147,10 @@ public JSONObject toJson() {
         jsonObject.put(TITLE_FIELD, title);
         jsonObject.put(LONGITUDE_FIELD, longitude);
         if (replyMarkup != null) {
-            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup);
+            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup.toJson());
         }
         if (inputMessageContent != null) {
-            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent);
+            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent.toJson());
         }
         if (thumbUrl != null) {
             jsonObject.put(THUMBURL_FIELD, this.thumbUrl);

File: src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultPhoto.java
Patch:
@@ -4,7 +4,6 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
-
 import org.json.JSONObject;
 import org.telegram.telegrambots.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
 import org.telegram.telegrambots.api.objects.replykeyboard.InlineKeyboardMarkup;
@@ -190,10 +189,10 @@ public JSONObject toJson() {
             jsonObject.put(CAPTION_FIELD, this.caption);
         }
         if (replyMarkup != null) {
-            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup);
+            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup.toJson());
         }
         if (inputMessageContent != null) {
-            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent);
+            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent.toJson());
         }
 
         return jsonObject;

File: src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultVenue.java
Patch:
@@ -4,7 +4,6 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
-
 import org.json.JSONObject;
 import org.telegram.telegrambots.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
 import org.telegram.telegrambots.api.objects.replykeyboard.InlineKeyboardMarkup;
@@ -175,10 +174,10 @@ public JSONObject toJson() {
             jsonObject.put(FOURSQUARE_ID_FIELD, foursquareId);
         }
         if (replyMarkup != null) {
-            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup);
+            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup.toJson());
         }
         if (inputMessageContent != null) {
-            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent);
+            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent.toJson());
         }
         if (thumbUrl != null) {
             jsonObject.put(THUMBURL_FIELD, this.thumbUrl);

File: src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultVideo.java
Patch:
@@ -4,7 +4,6 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
-
 import org.json.JSONObject;
 import org.telegram.telegrambots.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
 import org.telegram.telegrambots.api.objects.replykeyboard.InlineKeyboardMarkup;
@@ -205,10 +204,10 @@ public JSONObject toJson() {
             jsonObject.put(CAPTION_FIELD, caption);
         }
         if (replyMarkup != null) {
-            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup);
+            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup.toJson());
         }
         if (inputMessageContent != null) {
-            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent);
+            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent.toJson());
         }
 
         return jsonObject;

File: src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultVoice.java
Patch:
@@ -4,7 +4,6 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
-
 import org.json.JSONObject;
 import org.telegram.telegrambots.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
 import org.telegram.telegrambots.api.objects.replykeyboard.InlineKeyboardMarkup;
@@ -116,10 +115,10 @@ public JSONObject toJson() {
             jsonObject.put(VOICE_DURATION_FIELD, voiceDuration);
         }
         if (replyMarkup != null) {
-            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup);
+            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup.toJson());
         }
         if (inputMessageContent != null) {
-            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent);
+            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent.toJson());
         }
         return jsonObject;
     }

File: src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultArticle.java
Patch:
@@ -4,7 +4,6 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
-
 import org.json.JSONObject;
 import org.telegram.telegrambots.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
 import org.telegram.telegrambots.api.objects.replykeyboard.InlineKeyboardMarkup;
@@ -154,9 +153,9 @@ public JSONObject toJson() {
         jsonObject.put(TYPE_FIELD, this.type);
         jsonObject.put(ID_FIELD, this.id);
         jsonObject.put(TITLE_FIELD, this.title);
-        jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent);
+        jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent.toJson());
         if (replyMarkup != null) {
-            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup);
+            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup.toJson());
         }
         if (url != null) {
             jsonObject.put(URL_FIELD, this.url);

File: src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultAudio.java
Patch:
@@ -4,7 +4,6 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
-
 import org.json.JSONObject;
 import org.telegram.telegrambots.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
 import org.telegram.telegrambots.api.objects.replykeyboard.InlineKeyboardMarkup;
@@ -132,10 +131,10 @@ public JSONObject toJson() {
             jsonObject.put(AUDIO_DURATION_FIELD, audioDuration);
         }
         if (replyMarkup != null) {
-            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup);
+            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup.toJson());
         }
         if (inputMessageContent != null) {
-            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent);
+            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent.toJson());
         }
 
         return jsonObject;

File: src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultContact.java
Patch:
@@ -4,7 +4,6 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
-
 import org.json.JSONObject;
 import org.telegram.telegrambots.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
 import org.telegram.telegrambots.api.objects.replykeyboard.InlineKeyboardMarkup;
@@ -150,10 +149,10 @@ public JSONObject toJson() {
             jsonObject.put(LAST_NAME_FIELD, lastName);
         }
         if (replyMarkup != null) {
-            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup);
+            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup.toJson());
         }
         if (inputMessageContent != null) {
-            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent);
+            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent.toJson());
         }
         if (thumbUrl != null) {
             jsonObject.put(THUMBURL_FIELD, this.thumbUrl);

File: src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultDocument.java
Patch:
@@ -4,7 +4,6 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
-
 import org.json.JSONObject;
 import org.telegram.telegrambots.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
 import org.telegram.telegrambots.api.objects.replykeyboard.InlineKeyboardMarkup;
@@ -179,10 +178,10 @@ public JSONObject toJson() {
             jsonObject.put(CAPTION_FIELD, caption);
         }
         if (replyMarkup != null) {
-            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup);
+            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup.toJson());
         }
         if (inputMessageContent != null) {
-            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent);
+            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent.toJson());
         }
         if (thumbUrl != null) {
             jsonObject.put(THUMBURL_FIELD, this.thumbUrl);

File: src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultGif.java
Patch:
@@ -4,7 +4,6 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
-
 import org.json.JSONObject;
 import org.telegram.telegrambots.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
 import org.telegram.telegrambots.api.objects.replykeyboard.InlineKeyboardMarkup;
@@ -159,10 +158,10 @@ public JSONObject toJson() {
             jsonObject.put(CAPTION_FIELD, this.caption);
         }
         if (replyMarkup != null) {
-            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup);
+            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup.toJson());
         }
         if (inputMessageContent != null) {
-            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent);
+            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent.toJson());
         }
         return jsonObject;
     }

File: src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultLocation.java
Patch:
@@ -4,7 +4,6 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
-
 import org.json.JSONObject;
 import org.telegram.telegrambots.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
 import org.telegram.telegrambots.api.objects.replykeyboard.InlineKeyboardMarkup;
@@ -148,10 +147,10 @@ public JSONObject toJson() {
         jsonObject.put(TITLE_FIELD, title);
         jsonObject.put(LONGITUDE_FIELD, longitude);
         if (replyMarkup != null) {
-            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup);
+            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup.toJson());
         }
         if (inputMessageContent != null) {
-            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent);
+            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent.toJson());
         }
         if (thumbUrl != null) {
             jsonObject.put(THUMBURL_FIELD, this.thumbUrl);

File: src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultPhoto.java
Patch:
@@ -4,7 +4,6 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
-
 import org.json.JSONObject;
 import org.telegram.telegrambots.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
 import org.telegram.telegrambots.api.objects.replykeyboard.InlineKeyboardMarkup;
@@ -190,10 +189,10 @@ public JSONObject toJson() {
             jsonObject.put(CAPTION_FIELD, this.caption);
         }
         if (replyMarkup != null) {
-            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup);
+            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup.toJson());
         }
         if (inputMessageContent != null) {
-            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent);
+            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent.toJson());
         }
 
         return jsonObject;

File: src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultVenue.java
Patch:
@@ -4,7 +4,6 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
-
 import org.json.JSONObject;
 import org.telegram.telegrambots.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
 import org.telegram.telegrambots.api.objects.replykeyboard.InlineKeyboardMarkup;
@@ -175,10 +174,10 @@ public JSONObject toJson() {
             jsonObject.put(FOURSQUARE_ID_FIELD, foursquareId);
         }
         if (replyMarkup != null) {
-            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup);
+            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup.toJson());
         }
         if (inputMessageContent != null) {
-            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent);
+            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent.toJson());
         }
         if (thumbUrl != null) {
             jsonObject.put(THUMBURL_FIELD, this.thumbUrl);

File: src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultVideo.java
Patch:
@@ -4,7 +4,6 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
-
 import org.json.JSONObject;
 import org.telegram.telegrambots.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
 import org.telegram.telegrambots.api.objects.replykeyboard.InlineKeyboardMarkup;
@@ -205,10 +204,10 @@ public JSONObject toJson() {
             jsonObject.put(CAPTION_FIELD, caption);
         }
         if (replyMarkup != null) {
-            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup);
+            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup.toJson());
         }
         if (inputMessageContent != null) {
-            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent);
+            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent.toJson());
         }
 
         return jsonObject;

File: src/main/java/org/telegram/telegrambots/api/objects/inlinequery/result/InlineQueryResultVoice.java
Patch:
@@ -4,7 +4,6 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
-
 import org.json.JSONObject;
 import org.telegram.telegrambots.api.objects.inlinequery.inputmessagecontent.InputMessageContent;
 import org.telegram.telegrambots.api.objects.replykeyboard.InlineKeyboardMarkup;
@@ -116,10 +115,10 @@ public JSONObject toJson() {
             jsonObject.put(VOICE_DURATION_FIELD, voiceDuration);
         }
         if (replyMarkup != null) {
-            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup);
+            jsonObject.put(REPLY_MARKUP_FIELD, replyMarkup.toJson());
         }
         if (inputMessageContent != null) {
-            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent);
+            jsonObject.put(INPUTMESSAGECONTENT_FIELD, inputMessageContent.toJson());
         }
         return jsonObject;
     }

File: src/main/java/org/telegram/telegrambots/api/methods/GetFile.java
Patch:
@@ -36,8 +36,9 @@ public String getFileId() {
         return fileId;
     }
 
-    public void setFileId(String fileId) {
+    public GetFile setFileId(String fileId) {
         this.fileId = fileId;
+        return this;
     }
 
     @Override

File: src/main/java/org/telegram/telegrambots/api/objects/replykeyboard/InlineKeyboardMarkup.java
Patch:
@@ -37,8 +37,9 @@ public List<List<InlineKeyboardButton>> getKeyboard() {
         return keyboard;
     }
 
-    public void setKeyboard(List<List<InlineKeyboardButton>> keyboard) {
+    public InlineKeyboardMarkup setKeyboard(List<List<InlineKeyboardButton>> keyboard) {
         this.keyboard = keyboard;
+        return this;
     }
 
     @Override

File: src/main/java/org/telegram/telegrambots/bots/AbsSender.java
Patch:
@@ -93,12 +93,12 @@ public Message forwardMessage(ForwardMessage forwardMessage) throws TelegramApiE
         return (Message) sendApiMethod(forwardMessage);
     }
 
-    public File sendLocation(SendLocation sendLocation) throws TelegramApiException {
+    public Message sendLocation(SendLocation sendLocation) throws TelegramApiException {
         if (sendLocation == null) {
             throw new TelegramApiException("Parameter sendLocation can not be null");
         }
 
-        return (File) sendApiMethod(sendLocation);
+        return (Message) sendApiMethod(sendLocation);
     }
 
     public UserProfilePhotos getUserProfilePhotos(GetUserProfilePhotos getUserProfilePhotos) throws TelegramApiException {

File: src/main/java/org/telegram/telegrambots/bots/AbsSender.java
Patch:
@@ -93,12 +93,12 @@ public Message forwardMessage(ForwardMessage forwardMessage) throws TelegramApiE
         return (Message) sendApiMethod(forwardMessage);
     }
 
-    public File sendLocation(SendLocation sendLocation) throws TelegramApiException {
+    public Message sendLocation(SendLocation sendLocation) throws TelegramApiException {
         if (sendLocation == null) {
             throw new TelegramApiException("Parameter sendLocation can not be null");
         }
 
-        return (File) sendApiMethod(sendLocation);
+        return (Message) sendApiMethod(sendLocation);
     }
 
     public UserProfilePhotos getUserProfilePhotos(GetUserProfilePhotos getUserProfilePhotos) throws TelegramApiException {

File: src/main/java/org/telegram/telegrambots/api/objects/ChosenInlineQuery.java
Patch:
@@ -17,9 +17,10 @@
  * @date 01 of January of 2016
  */
 public class ChosenInlineQuery implements IBotApiObject {
-    public static final String RESULTID_FIELD = "id";
+    public static final String RESULTID_FIELD = "result_id";
     public static final String FROM_FIELD = "from";
     public static final String QUERY_FIELD = "query";
+
     @JsonProperty(RESULTID_FIELD)
     private String resultId; ///< The unique identifier for the result that was chosen.
     @JsonProperty(FROM_FIELD)

File: src/main/java/org/telegram/telegrambots/api/Constants.java
Patch:
@@ -8,4 +8,5 @@
  */
 public class Constants {
     public static final String BASEURL = "https://api.telegram.org/bot";
+    public static final int SOCKET_TIMEOUT = 30 * 1000;
 }

File: src/main/java/org/telegram/telegrambots/api/Constants.java
Patch:
@@ -8,4 +8,5 @@
  */
 public class Constants {
     public static final String BASEURL = "https://api.telegram.org/bot";
+    public static final int SOCKET_TIMEOUT = 30 * 1000;
 }

File: src/main/java/org/telegram/telegrambots/api/Constants.java
Patch:
@@ -7,5 +7,5 @@
  * @date 20 of June of 2015
  */
 public class Constants {
-    public static final String BASEURL = "https://api.telegram.org/bot/";
+    public static final String BASEURL = "https://api.telegram.org/bot";
 }

File: src/main/java/org/telegram/telegrambots/TelegramBotsApi.java
Patch:
@@ -134,7 +134,7 @@ private static String fixExternalUrl(String externalUrl) {
     private static void setWebhook(String webHookURL, String botToken, String publicCertificatePath, String publicCertificateName) throws TelegramApiException {
         try {
             CloseableHttpClient httpclient = HttpClientBuilder.create().setSSLHostnameVerifier(new NoopHostnameVerifier()).build();
-            String url = Constants.BASEURL + botToken + SetWebhook.PATH;
+            String url = Constants.BASEURL + botToken + "/" + SetWebhook.PATH;
 
             HttpPost httppost = new HttpPost(url);
             MultipartEntityBuilder builder = MultipartEntityBuilder.create();

File: src/main/java/org/telegram/telegrambots/TelegramBotsApi.java
Patch:
@@ -108,7 +108,7 @@ private void setWebhook(String botToken) throws TelegramApiException {
         if (botToken == null) {
             throw new TelegramApiException("Parameter botToken can not be null");
         }
-        setWebhook(extrenalUrl, botToken, pathToCertificate, publicCertificateName);
+        setWebhook(extrenalUrl == null ? "" : extrenalUrl, botToken, pathToCertificate, publicCertificateName);
     }
 
     /**

File: src/main/java/org/telegram/telegrambots/TelegramBotsApi.java
Patch:
@@ -105,7 +105,7 @@ public void registerBot(TelegramWebhookBot bot) throws TelegramApiException {
      * @param botToken
      */
     private void setWebhook(String botToken) throws TelegramApiException {
-        if (botToken != null) {
+        if (botToken == null) {
             throw new TelegramApiException("Parameter botToken can not be null");
         }
         setWebhook(extrenalUrl, botToken, pathToCertificate, publicCertificateName);

