File: small-spring-step-15/src/test/java/cn/bugstack/springframework/test/ApiTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import cn.bugstack.springframework.context.support.ClassPathXmlApplicationContext;
 import cn.bugstack.springframework.test.bean.IUserService;
+import org.junit.Test;
 
 /**
  * 作者：DerekYRC https://github.com/DerekYRC/mini-spring

File: small-spring-step-16/src/main/java/cn/bugstack/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java
Patch:
@@ -29,7 +29,7 @@
  */
 public abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactory implements AutowireCapableBeanFactory {
 
-    private InstantiationStrategy instantiationStrategy = new SimpleInstantiationStrategy();
+    private InstantiationStrategy instantiationStrategy = new CglibSubclassingInstantiationStrategy();
 
     @Override
     protected Object createBean(String beanName, BeanDefinition beanDefinition, Object[] args) throws BeansException {

File: small-spring-step-15/src/main/java/cn/bugstack/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java
Patch:
@@ -90,6 +90,8 @@ public Object postProcessBeforeInitialization(Object bean, String beanName) thro
 
     @Override
     public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
-        return null;
+        // Bug: 返回null会影响代理对象的创建
+        // return null;
+        return bean;
     }
 }

File: small-spring-step-17/src/main/java/cn/bugstack/springframework/aop/framework/Cglib2AopProxy.java
Patch:
@@ -1,6 +1,7 @@
 package cn.bugstack.springframework.aop.framework;
 
 import cn.bugstack.springframework.aop.AdvisedSupport;
+import cn.bugstack.springframework.util.ClassUtils;
 import net.sf.cglib.proxy.Enhancer;
 import net.sf.cglib.proxy.MethodInterceptor;
 import net.sf.cglib.proxy.MethodProxy;
@@ -28,7 +29,7 @@ public Cglib2AopProxy(AdvisedSupport advised) {
     @Override
     public Object getProxy() {
         Enhancer enhancer = new Enhancer();
-        enhancer.setSuperclass(advised.getTargetSource().getTarget().getClass());
+        enhancer.setSuperclass(ClassUtils.getActualClass(advised.getTargetSource().getTarget().getClass()));
         enhancer.setInterfaces(advised.getTargetSource().getTargetClass());
         enhancer.setCallback(new DynamicAdvisedInterceptor(advised));
         return enhancer.create();

File: small-spring-step-02/src/main/java/cn/bugstack/springframework/beans/factory/config/BeanDefinition.java
Patch:
@@ -5,6 +5,7 @@
  * 公众号：bugstack虫洞栈
  * Create by 小傅哥(fustack)
  */
+@SuppressWarnings({"rawtypes"})
 public class BeanDefinition {
 
     private Class beanClass;

File: small-spring-step-02/src/main/java/cn/bugstack/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java
Patch:
@@ -12,7 +12,7 @@ public abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFac
 
     @Override
     protected Object createBean(String beanName, BeanDefinition beanDefinition) throws BeansException {
-        Object bean = null;
+        Object bean;
         try {
             bean = beanDefinition.getBeanClass().newInstance();
         } catch (InstantiationException | IllegalAccessException e) {

File: small-spring-step-02/src/main/java/cn/bugstack/springframework/beans/factory/support/DefaultListableBeanFactory.java
Patch:
@@ -13,7 +13,7 @@
  */
 public class DefaultListableBeanFactory extends AbstractAutowireCapableBeanFactory implements BeanDefinitionRegistry {
 
-    private Map<String, BeanDefinition> beanDefinitionMap = new HashMap<>();
+    private final Map<String, BeanDefinition> beanDefinitionMap = new HashMap<>();
 
     @Override
     public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) {

File: small-spring-step-02/src/main/java/cn/bugstack/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java
Patch:
@@ -12,7 +12,7 @@
  */
 public class DefaultSingletonBeanRegistry implements SingletonBeanRegistry {
 
-    private Map<String, Object> singletonObjects = new HashMap<>();
+    private final Map<String, Object> singletonObjects = new HashMap<>();
 
     @Override
     public Object getSingleton(String beanName) {

File: small-spring-step-02/src/test/java/cn/bugstack/springframework/test/ApiTest.java
Patch:
@@ -1,6 +1,5 @@
 package cn.bugstack.springframework.test;
 
-import cn.bugstack.springframework.beans.factory.BeanFactory;
 import cn.bugstack.springframework.beans.factory.config.BeanDefinition;
 import cn.bugstack.springframework.beans.factory.support.DefaultListableBeanFactory;
 import cn.bugstack.springframework.test.bean.UserService;
@@ -28,7 +27,7 @@ public void test_BeanFactory(){
         userService.queryUserInfo();
 
         // 4.第二次获取 bean from Singleton
-        UserService userService_singleton = (UserService) beanFactory.getBean("userService");
+        UserService userService_singleton = (UserService) beanFactory.getSingleton("userService");
         userService_singleton.queryUserInfo();
     }
 

