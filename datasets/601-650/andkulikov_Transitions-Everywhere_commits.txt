File: library/src/main/java/com/transitionseverywhere/Recolor.java
Patch:
@@ -128,6 +128,7 @@ public Animator createAnimator(@NonNull ViewGroup sceneRoot, @Nullable Transitio
             ColorDrawable endColor = (ColorDrawable) endBackground;
             if (startColor.getColor() != endColor.getColor()) {
                 final int finalColor = endColor.getColor();
+                endColor = (ColorDrawable) endColor.mutate();
                 endColor.setColor(startColor.getColor());
                 bgAnimator = ObjectAnimator.ofInt(endColor, COLORDRAWABLE_COLOR, startColor.getColor(), finalColor);
                 bgAnimator.setEvaluator(new ArgbEvaluator());

File: library/src/main/java/com/transitionseverywhere/Recolor.java
Patch:
@@ -128,6 +128,7 @@ public Animator createAnimator(@NonNull ViewGroup sceneRoot, @Nullable Transitio
             ColorDrawable endColor = (ColorDrawable) endBackground;
             if (startColor.getColor() != endColor.getColor()) {
                 final int finalColor = endColor.getColor();
+                endColor = (ColorDrawable) endColor.mutate();
                 endColor.setColor(startColor.getColor());
                 bgAnimator = ObjectAnimator.ofInt(endColor, COLORDRAWABLE_COLOR, startColor.getColor(), finalColor);
                 bgAnimator.setEvaluator(new ArgbEvaluator());

File: library/src/main/java/com/transitionseverywhere/Visibility.java
Patch:
@@ -465,7 +465,7 @@ public void onTransitionPause(Transition transition) {
 
                     @Override
                     public void onTransitionResume(Transition transition) {
-                        if (finalOverlayView.getParent() != null) {
+                        if (finalOverlayView.getParent() == null) {
                             ViewGroupOverlayUtils.addOverlay(sceneRoot, finalOverlayView, screenLoc[0], screenLoc[1]);
                         }
                         else {

File: library/src/main/java/com/transitionseverywhere/ChangeText.java
Patch:
@@ -211,7 +211,7 @@ public void onAnimationEnd(Animator animation) {
                 ValueAnimator outAnim = null, inAnim = null;
                 if (mChangeBehavior == CHANGE_BEHAVIOR_OUT_IN ||
                         mChangeBehavior == CHANGE_BEHAVIOR_OUT) {
-                    outAnim = ValueAnimator.ofInt(255, 0);
+                    outAnim = ValueAnimator.ofInt(Color.alpha(startColor), 0);
                     outAnim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                         @Override
                         public void onAnimationUpdate(ValueAnimator animation) {
@@ -238,7 +238,7 @@ public void onAnimationEnd(Animator animation) {
                 }
                 if (mChangeBehavior == CHANGE_BEHAVIOR_OUT_IN ||
                         mChangeBehavior == CHANGE_BEHAVIOR_IN) {
-                    inAnim = ValueAnimator.ofInt(0, 255);
+                    inAnim = ValueAnimator.ofInt(0, Color.alpha(endColor));
                     inAnim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                         @Override
                         public void onAnimationUpdate(ValueAnimator animation) {

File: library/src/main/java/com/transitionseverywhere/TransitionManager.java
Patch:
@@ -451,7 +451,7 @@ public static void endTransitions(final ViewGroup sceneRoot) {
             ArrayList<Transition> copy = new ArrayList(runningTransitions);
             for (int i = copy.size() - 1; i >= 0; i--) {
                 final Transition transition = copy.get(i);
-                transition.end();
+                transition.forceToEnd(sceneRoot);
             }
         }
     }

File: library/src/main/java/com/transitionseverywhere/ChangeText.java
Patch:
@@ -244,7 +244,7 @@ public void onAnimationEnd(Animator animation) {
                         public void onAnimationUpdate(ValueAnimator animation) {
                             int currAlpha = (Integer) animation.getAnimatedValue();
                             view.setTextColor(currAlpha << 24 | Color.red(endColor) << 16 |
-                                    Color.green(endColor) << 8 | Color.red(endColor));
+                                    Color.green(endColor) << 8 | Color.blue(endColor));
                         }
                     });
                     inAnim.addListener(new AnimatorListenerAdapter() {

File: library/src/main/java/com/transitionseverywhere/Transition.java
Patch:
@@ -1919,13 +1919,13 @@ protected void end() {
             }
             for (int i = 0; i < mStartValues.itemIdValues.size(); ++i) {
                 View view = mStartValues.itemIdValues.valueAt(i);
-                if (ViewUtils.hasTransientState(view)) {
+                if (view != null) {
                     ViewUtils.setHasTransientState(view, false);
                 }
             }
             for (int i = 0; i < mEndValues.itemIdValues.size(); ++i) {
                 View view = mEndValues.itemIdValues.valueAt(i);
-                if (ViewUtils.hasTransientState(view)) {
+                if (view != null) {
                     ViewUtils.setHasTransientState(view, false);
                 }
             }

File: sample/src/main/java/com/andkulikov/transitionseverywhere/ScenesSample.java
Patch:
@@ -10,7 +10,6 @@
 import android.widget.RadioGroup;
 
 import com.transitionseverywhere.ChangeBounds;
-import com.transitionseverywhere.ChangeImageTransform;
 import com.transitionseverywhere.Scene;
 import com.transitionseverywhere.Slide;
 import com.transitionseverywhere.TransitionInflater;

File: sample/src/main/java/com/andkulikov/transitionseverywhere/CustomTransitionSample.java
Patch:
@@ -70,7 +70,7 @@ public void setValue(ProgressBar progressBar, int value) {
             public Integer get(ProgressBar progressBar) {
                 return progressBar.getProgress();
             }
-        };
+        }.optimize();
 
         /**
          * Internal name of property. Like a bundles for intent

File: sample/src/main/java/com/andkulikov/transitionseverywhere/ScaleSample.java
Patch:
@@ -5,14 +5,12 @@
 import android.support.v4.app.Fragment;
 import android.support.v4.view.animation.FastOutLinearInInterpolator;
 import android.support.v4.view.animation.LinearOutSlowInInterpolator;
-import android.view.Gravity;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.TextView;
 
 import com.transitionseverywhere.Fade;
-import com.transitionseverywhere.Slide;
 import com.transitionseverywhere.TransitionManager;
 import com.transitionseverywhere.TransitionSet;
 import com.transitionseverywhere.extra.Scale;

File: library/src/main/java/com/transitionseverywhere/ChangeBounds.java
Patch:
@@ -424,14 +424,14 @@ public void onTransitionResume(Transition transition) {
                 anim = AnimatorUtils.ofPointF(drawable, DRAWABLE_ORIGIN_PROPERTY, getPathMotion(),
                         startX, startY, endX, endY);
                 if (anim != null) {
-                    final float transitionAlpha = ViewUtils.getTransitionAlpha(view);
-                    ViewUtils.setTransitionAlpha(view, 0);
+                    final float alpha = view.getAlpha();
+                    view.setAlpha(0);
                     ViewOverlayUtils.addOverlay(sceneRoot, drawable);
                     anim.addListener(new AnimatorListenerAdapter() {
                         @Override
                         public void onAnimationEnd(Animator animation) {
                             ViewOverlayUtils.removeOverlay(sceneRoot, drawable);
-                            ViewUtils.setTransitionAlpha(view, transitionAlpha);
+                            view.setAlpha(alpha);
                         }
                     });
                 }

File: library/src/main/java/com/transitionseverywhere/ChangeTransform.java
Patch:
@@ -360,9 +360,9 @@ private void createGhostView(final ViewGroup sceneRoot, TransitionValues startVa
         }
 
         if (startValues.view != endValues.view) {
-            ViewUtils.setTransitionAlpha(view, 0);
+            view.setAlpha(0);
         }
-        ViewUtils.setTransitionAlpha(view, 1);
+        view.setAlpha(1);
     }
 
     private void setMatricesForParent(TransitionValues startValues, TransitionValues endValues) {

File: library/src/main/java/com/transitionseverywhere/Visibility.java
Patch:
@@ -311,7 +311,7 @@ public Animator onAppear(ViewGroup sceneRoot,
             // Make sure that we reverse the effect of onDisappear's setTransitionAlpha(0)
             Object savedAlpha = endValues.view.getTag(R.id.transitionAlpha);
             if (savedAlpha instanceof Float) {
-                ViewUtils.setTransitionAlpha(endValues.view, (Float) savedAlpha);
+                endValues.view.setAlpha((Float) savedAlpha);
                 endValues.view.setTag(R.id.transitionAlpha, null);
             }
         }
@@ -596,7 +596,7 @@ private void hideViewWhenNotCanceled() {
             if (!mCanceled) {
                 if (mIsForcedVisibility) {
                     mView.setTag(R.id.transitionAlpha, mView.getAlpha());
-                    ViewUtils.setTransitionAlpha(mView, 0);
+                    mView.setAlpha(0);
                 } else if (!mFinalVisibilitySet) {
                     // Recreate the parent's display list in case it includes mView.
                     ViewUtils.setTransitionVisibility(mView, mFinalVisibility);

File: library/src/main/java/com/transitionseverywhere/Transition.java
Patch:
@@ -181,7 +181,7 @@ public abstract class Transition implements Cloneable {
     private TransitionValuesMaps mStartValues = new TransitionValuesMaps();
     private TransitionValuesMaps mEndValues = new TransitionValuesMaps();
     TransitionSet mParent = null;
-    private int[] mMatchOrder = DEFAULT_MATCH_ORDER;
+    int[] mMatchOrder = DEFAULT_MATCH_ORDER;
     ArrayList<TransitionValues> mStartValuesList; // only valid after playTransition starts
     ArrayList<TransitionValues> mEndValuesList; // only valid after playTransitions starts
 
@@ -235,7 +235,7 @@ public abstract class Transition implements Cloneable {
 
     // The function used to interpolate along two-dimensional points. Typically used
     // for adding curves to x/y View motion.
-    private PathMotion mPathMotion = PathMotion.STRAIGHT_PATH_MOTION;
+    PathMotion mPathMotion = PathMotion.STRAIGHT_PATH_MOTION;
 
     /**
      * Constructs a Transition object with no target objects. A transition with
@@ -777,7 +777,7 @@ protected void createAnimators(ViewGroup sceneRoot, TransitionValuesMaps startVa
                 }
             }
         }
-        if (minStartDelay != 0) {
+        if (startDelays.size() != 0) {
             for (int i = 0; i < startDelays.size(); i++) {
                 int index = startDelays.keyAt(i);
                 Animator animator = mAnimators.get(index);

File: library/src/main/java/com/transitionseverywhere/TransitionSet.java
Patch:
@@ -44,7 +44,7 @@
  * transition on the affected view targets:</p>
  * <pre>
  *     &lt;transitionSet xmlns:android="http://schemas.android.com/apk/res/android"
- *             android:ordering="sequential"&gt;
+ *             android:transitionOrdering="sequential"&gt;
  *         &lt;fade/&gt;
  *         &lt;changeBounds/&gt;
  *     &lt;/transitionSet&gt;

File: library/src/main/java/com/transitionseverywhere/SidePropagation.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.transitionseverywhere;
 
+import android.annotation.SuppressLint;
 import android.annotation.TargetApi;
 import android.graphics.Rect;
 import android.os.Build;
@@ -122,6 +123,7 @@ public long getStartDelay(ViewGroup sceneRoot, Transition transition,
         return Math.round(duration * directionMultiplier / mPropagationSpeed * distanceFraction);
     }
 
+    @SuppressLint("RtlHardcoded")
     private int distance(View sceneRoot, int viewX, int viewY, int epicenterX, int epicenterY,
                          int left, int top, int right, int bottom) {
         final int side;
@@ -152,6 +154,7 @@ private int distance(View sceneRoot, int viewX, int viewY, int epicenterX, int e
         return distance;
     }
 
+    @SuppressLint("RtlHardcoded")
     private int getMaxDistance(ViewGroup sceneRoot) {
         switch (mSide) {
             case Gravity.LEFT:

File: library/src/main/java/com/transitionseverywhere/Slide.java
Patch:
@@ -17,6 +17,7 @@
 
 import android.animation.Animator;
 import android.animation.TimeInterpolator;
+import android.annotation.SuppressLint;
 import android.annotation.TargetApi;
 import android.content.Context;
 import android.content.res.TypedArray;
@@ -159,6 +160,7 @@ public Slide(Context context, AttributeSet attrs) {
      *                  {@link android.view.Gravity#RIGHT}, {@link android.view.Gravity#BOTTOM}.
      * @attr ref android.R.styleable#Slide_slideEdge
      */
+    @SuppressLint("RtlHardcoded")
     public void setSlideEdge(int slideEdge) {
         switch (slideEdge) {
             case Gravity.LEFT:

File: library/src/main/java/com/transitionseverywhere/TransitionSet.java
Patch:
@@ -534,7 +534,7 @@ TransitionSet setSceneRoot(ViewGroup sceneRoot) {
         for (int i = 0; i < numTransitions; ++i) {
             mTransitions.get(i).setSceneRoot(sceneRoot);
         }
-        return (TransitionSet) this;
+        return this;
     }
 
     @Override

File: library/src/main/java/com/transitionseverywhere/Visibility.java
Patch:
@@ -416,7 +416,6 @@ public Animator onDisappear(final ViewGroup sceneRoot,
                 }
             }
         }
-        final int finalVisibility = endVisibility;
 
         if (overlayView != null) {
             // TODO: Need to do this for general case of adding to overlay
@@ -448,7 +447,7 @@ public void onTransitionEnd(Transition transition) {
             Animator animator = onDisappear(sceneRoot, viewToKeep, startValues, endValues);
             if (animator != null) {
                 DisappearListener disappearListener = new DisappearListener(viewToKeep,
-                        finalVisibility, isForcedVisibility);
+                        endVisibility, isForcedVisibility);
                 animator.addListener(disappearListener);
                 AnimatorUtils.addPauseListener(animator, disappearListener);
                 addListener(disappearListener);

File: library/src/main/java/com/transitionseverywhere/Crossfade.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.transitionseverywhere.hidden;
+package com.transitionseverywhere;
 
 import android.animation.Animator;
 import android.animation.AnimatorListenerAdapter;
@@ -33,8 +33,6 @@
 import android.view.View;
 import android.view.ViewGroup;
 
-import com.transitionseverywhere.Transition;
-import com.transitionseverywhere.TransitionValues;
 import com.transitionseverywhere.utils.RectEvaluator;
 import com.transitionseverywhere.utils.ViewGroupOverlayUtils;
 

File: library/src/main/java/com/transitionseverywhere/Recolor.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.transitionseverywhere.hidden;
+package com.transitionseverywhere;
 
 import android.animation.Animator;
 import android.animation.ArgbEvaluator;

File: library/src/main/java/com/transitionseverywhere/Rotate.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.transitionseverywhere.hidden;
+package com.transitionseverywhere;
 
 import android.animation.Animator;
 import android.animation.ObjectAnimator;

File: library/src/main/java/com/transitionseverywhere/TransitionInflater.java
Patch:
@@ -28,7 +28,6 @@
 
 import com.transitionseverywhere.extra.Scale;
 import com.transitionseverywhere.extra.TranslationTransition;
-import com.transitionseverywhere.hidden.Recolor;
 import com.transitionseverywhere.utils.ArrayMap;
 
 import org.xmlpull.v1.XmlPullParser;

File: sample/src/main/java/com/andkulikov/transitionseverywhere/RecolorSample.java
Patch:
@@ -10,7 +10,7 @@
 import android.widget.Button;
 
 import com.transitionseverywhere.TransitionManager;
-import com.transitionseverywhere.hidden.Recolor;
+import com.transitionseverywhere.Recolor;
 
 /**
  * Created by Andrey Kulikov on 17/04/16.

File: sample/src/main/java/com/andkulikov/transitionseverywhere/RotateSample.java
Patch:
@@ -10,7 +10,7 @@
 import android.view.ViewGroup;
 
 import com.transitionseverywhere.TransitionManager;
-import com.transitionseverywhere.hidden.Rotate;
+import com.transitionseverywhere.Rotate;
 
 /**
  * Created by Andrey Kulikov on 17/04/16.

File: library/src/main/java/com/transitionseverywhere/utils/ViewGroupUtils.java
Patch:
@@ -37,7 +37,7 @@ public boolean isChangingLayout() {
             if (suppress) {
                 LayoutTransition layoutTransition = group.getLayoutTransition();
                 if (layoutTransition != null && layoutTransition != sEmptyLayoutTransition) {
-                    group.setTag(R.id.group_layouttransition_cache, group.getLayoutTransition());
+                    group.setTag(R.id.group_layouttransition_backup, group.getLayoutTransition());
                 }
                 group.setLayoutTransition(sEmptyLayoutTransition);
             } else {
@@ -53,9 +53,9 @@ public boolean isChangingLayout() {
                     group.requestLayout();
                 }
                 final LayoutTransition layoutTransition = (LayoutTransition)
-                        group.getTag(R.id.group_layouttransition_cache);
+                        group.getTag(R.id.group_layouttransition_backup);
                 if (layoutTransition != null) {
-                    group.setTag(R.id.group_layouttransition_cache, null);
+                    group.setTag(R.id.group_layouttransition_backup, null);
                     group.post(new Runnable() {
                         @Override
                         public void run() {

File: library/src/main/java/com/transitionseverywhere/hidden/Recolor.java
Patch:
@@ -121,9 +121,10 @@ public Animator createAnimator(ViewGroup sceneRoot, TransitionValues startValues
             ColorDrawable startColor = (ColorDrawable) startBackground;
             ColorDrawable endColor = (ColorDrawable) endBackground;
             if (startColor.getColor() != endColor.getColor()) {
+                final int finalColor = endColor.getColor();
                 endColor.setColor(startColor.getColor());
                 return ObjectAnimator.ofObject(endColor, COLORDRAWABLE_COLOR,
-                        new ArgbEvaluator(), startColor.getColor(), endColor.getColor());
+                        new ArgbEvaluator(), startColor.getColor(), finalColor);
             }
         }
         if (view instanceof TextView) {

File: library/src/main/java/com/transitionseverywhere/ChangeBounds.java
Patch:
@@ -418,6 +418,7 @@ public void onTransitionResume(Transition transition) {
                 view.draw(canvas);
                 final BitmapDrawable drawable = new BitmapDrawable(
                         sceneRoot.getContext().getResources(), bitmap);
+                drawable.setBounds(0, 0, view.getWidth(), view.getHeight());
                 Animator anim;
                 anim = AnimatorUtils.ofPointF(drawable, DRAWABLE_ORIGIN_PROPERTY, getPathMotion(),
                         startX - tempLocation[0], startY - tempLocation[1],

File: library/src/main/java/com/transitionseverywhere/TransitionManager.java
Patch:
@@ -185,10 +185,10 @@ private static void changeScene(Scene scene, Transition transition) {
 
         final ViewGroup sceneRoot = scene.getSceneRoot();
         if (!sPendingTransitions.contains(sceneRoot)) {
-            sPendingTransitions.add(sceneRoot);
-
             Transition transitionClone = null;
             if (isTransitionsAllowed()) {
+                sPendingTransitions.add(sceneRoot);
+
                 if (transition != null) {
                     transitionClone = transition.clone();
                     transitionClone.setSceneRoot(sceneRoot);

File: library/src/main/java/com/transitionseverywhere/hidden/Rotate.java
Patch:
@@ -56,7 +56,7 @@ public Animator createAnimator(ViewGroup sceneRoot, TransitionValues startValues
         float endRotation = (Float) endValues.values.get(PROPNAME_ROTATION);
         if (startRotation != endRotation) {
             view.setRotation(startRotation);
-            return ObjectAnimator.ofFloat(view, "rotation",
+            return ObjectAnimator.ofFloat(view, View.ROTATION,
                     startRotation, endRotation);
         }
         return null;

File: library/src/main/java/com/transitionseverywhere/utils/BasePointFAnimator.java
Patch:
@@ -8,9 +8,7 @@
 import java.lang.ref.WeakReference;
 
 /**
- * Copyright New Cloud Technology, Ltd, 2014
- * <p/>
- * NOTICE:  The intellectual and technical concepts contained herein are proprietary to New Cloud Technology, Ltd, and is protected by trade secret and copyright law. Dissemination of any of this information or reproduction of this material is strictly forbidden unless prior written permission is obtained from New Cloud Technology, Ltd.
+ * Created by Andrey Kulikov on 17.08.15.
  */
 @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
 public abstract class BasePointFAnimator extends ValueAnimator implements ValueAnimator.AnimatorUpdateListener {

File: library/src/main/java/com/transitionseverywhere/utils/PathAnimatorCompat.java
Patch:
@@ -7,9 +7,7 @@
 import android.os.Build;
 
 /**
- * Copyright New Cloud Technology, Ltd, 2014
- * <p/>
- * NOTICE:  The intellectual and technical concepts contained herein are proprietary to New Cloud Technology, Ltd, and is protected by trade secret and copyright law. Dissemination of any of this information or reproduction of this material is strictly forbidden unless prior written permission is obtained from New Cloud Technology, Ltd.
+ * Created by Andrey Kulikov on 17.08.15.
  */
 @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
 public class PathAnimatorCompat extends BasePointFAnimator {

File: library/src/main/java/com/transitionseverywhere/utils/PointFAnimator.java
Patch:
@@ -5,9 +5,7 @@
 import android.os.Build;
 
 /**
- * Copyright New Cloud Technology, Ltd, 2014
- * <p/>
- * NOTICE:  The intellectual and technical concepts contained herein are proprietary to New Cloud Technology, Ltd, and is protected by trade secret and copyright law. Dissemination of any of this information or reproduction of this material is strictly forbidden unless prior written permission is obtained from New Cloud Technology, Ltd.
+ * Created by Andrey Kulikov on 17.08.15.
  */
 @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
 public class PointFAnimator extends BasePointFAnimator {

File: library/src/main/java/android/transitions/everywhere/Visibility.java
Patch:
@@ -425,9 +425,9 @@ public Animator onDisappear(final ViewGroup sceneRoot,
                 ViewGroupOverlayUtils.removeOverlay(sceneRoot, overlayView);
             } else {
                 final View finalOverlayView = overlayView;
-                addListener(new TransitionListenerAdapter() {
+                animator.addListener(new AnimatorListenerAdapter() {
                     @Override
-                    public void onTransitionEnd(Transition transition) {
+                    public void onAnimationEnd(Animator animation) {
                         ViewGroupOverlayUtils.removeOverlay(sceneRoot, finalOverlayView);
                     }
                 });

File: library/src/main/java/android/transitions/everywhere/TransitionManager.java
Patch:
@@ -221,6 +221,7 @@ private static ArrayMap<ViewGroup, ArrayList<Transition>> getRunningTransitions(
         return runningTransitions.get();
     }
 
+    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
     private static void sceneChangeRunTransition(final ViewGroup sceneRoot,
                                                  final Transition transition) {
         if (transition != null && sceneRoot != null) {

File: library/src/main/java/android/transitions/everywhere/utils/AnimatorUtils.java
Patch:
@@ -132,7 +132,7 @@ public ObjectAnimator ofFloat(Transition transition, Object target, String xProp
                 pvh[pvhIndex++] = PropertyValuesHolder.ofFloat(xPropertyName, startLeft, endLeft);
             }
             if (startTop != endTop) {
-                pvh[pvhIndex++] = PropertyValuesHolder.ofFloat(yPropertyName, startTop, endTop);
+                pvh[pvhIndex] = PropertyValuesHolder.ofFloat(yPropertyName, startTop, endTop);
             }
             return ObjectAnimator.ofPropertyValuesHolder(target, pvh);
         }

File: library/src/main/java/android/transitions/everywhere/utils/ViewGroupOverlayUtils.java
Patch:
@@ -88,7 +88,7 @@ public void removeOverlay(ViewGroup sceneRoot, View overlayView) {
 
         @Override
         public void moveViewInOverlay(ViewGroup sceneRoot, View overlayView, int screenX, int screenY) {
-            if (screenX != 0 && screenY != 0) {
+            if (screenX != 0 || screenY != 0) {
                 int[] loc = new int[2];
                 sceneRoot.getLocationOnScreen(loc);
                 overlayView.offsetLeftAndRight((screenX - loc[0]) - overlayView.getLeft());

File: library/src/main/java/android/transitions/everywhere/Transition.java
Patch:
@@ -1070,7 +1070,7 @@ public Transition removeTarget(String targetName) {
      */
     public Transition removeTarget(int targetId) {
         if (targetId > 0) {
-            mTargetIds.remove(targetId);
+            mTargetIds.remove((Integer) targetId);
         }
         return this;
     }

File: library/src/main/java/android/transitions/everywhere/Transition.java
Patch:
@@ -1070,7 +1070,7 @@ public Transition removeTarget(String targetName) {
      */
     public Transition removeTarget(int targetId) {
         if (targetId > 0) {
-            mTargetIds.remove(targetId);
+            mTargetIds.remove((Integer) targetId);
         }
         return this;
     }

File: library/src/main/java/android/transitions/everywhere/ArcMotion.java
Patch:
@@ -19,7 +19,6 @@
 import android.content.res.TypedArray;
 import android.graphics.Path;
 import android.util.AttributeSet;
-import android.util.FloatMath;
 
 /**
  * A PathMotion that generates a curved path along an arc on an imaginary circle containing
@@ -255,7 +254,7 @@ public Path getPath(float startX, float startY, float endX, float endY) {
             }
             if (newArcDistance2 != 0) {
                 float ratio2 = newArcDistance2 / arcDist2;
-                float ratio = FloatMath.sqrt(ratio2);
+                float ratio = (float) Math.sqrt(ratio2);
                 ex = dx + (ratio * (ex - dx));
                 ey = dy + (ratio * (ey - dy));
             }

File: library/src/main/java/android/transitions/everywhere/CircularPropagation.java
Patch:
@@ -18,7 +18,6 @@
 import android.annotation.TargetApi;
 import android.graphics.Rect;
 import android.os.Build;
-import android.util.FloatMath;
 import android.view.View;
 import android.view.ViewGroup;
 
@@ -104,6 +103,6 @@ public long getStartDelay(ViewGroup sceneRoot, Transition transition,
     private static float distance(float x1, float y1, float x2, float y2) {
         float x = x2 - x1;
         float y = y2 - y1;
-        return FloatMath.sqrt((x * x) + (y * y));
+        return (float) Math.sqrt((x * x) + (y * y));
     }
 }

File: library/src/main/java/android/transitions/everywhere/Explode.java
Patch:
@@ -22,7 +22,6 @@
 import android.graphics.Rect;
 import android.os.Build;
 import android.util.AttributeSet;
-import android.util.FloatMath;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.animation.AccelerateInterpolator;
@@ -171,6 +170,6 @@ private static float calculateMaxDistance(View sceneRoot, int focalX, int focalY
     }
 
     private static float calculateDistance(float x, float y) {
-        return FloatMath.sqrt((x * x) + (y * y));
+        return (float) Math.sqrt((x * x) + (y * y));
     }
 }

File: library/src/main/java/android/transitions/everywhere/Fade.java
Patch:
@@ -102,6 +102,7 @@ public Fade(Context context, AttributeSet attrs) {
         super(context, attrs);
         TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.Fade);
         int fadingMode = a.getInt(R.styleable.Fade_fadingMode, getMode());
+        a.recycle();
         setMode(fadingMode);
     }
 

File: library/src/main/java/android/transitions/everywhere/PatternPathMotion.java
Patch:
@@ -21,7 +21,6 @@
 import android.graphics.Path;
 import android.graphics.PathMeasure;
 import android.util.AttributeSet;
-import android.util.FloatMath;
 
 /**
  * A PathMotion that takes a Path pattern and applies it to the separation between two points.
@@ -141,6 +140,6 @@ public Path getPath(float startX, float startY, float endX, float endY) {
     }
 
     private static float distance(float x, float y) {
-        return FloatMath.sqrt((x * x) + (y * y));
+        return (float) Math.sqrt((x * x) + (y * y));
     }
 }

File: library/src/main/java/android/transitions/everywhere/TransitionInflater.java
Patch:
@@ -291,6 +291,7 @@ private void getTargetIds(XmlPullParser parser,
                         throw new RuntimeException("Could not create " + className, e);
                     }
                 }
+                a.recycle();
             } else {
                 throw new RuntimeException("Unknown scene name: " + parser.getName());
             }

File: library/src/main/java/android/transitions/everywhere/utils/ViewGroupUtils.java
Patch:
@@ -14,7 +14,7 @@ interface ViewGroupUtilsImpl {
         void suppressLayout(ViewGroup group, boolean suppress);
     }
 
-    @TargetApi(VERSION_CODES.HONEYCOMB)
+    @TargetApi(VERSION_CODES.JELLY_BEAN)
     static class BaseViewGroupUtilsImpl implements ViewGroupUtilsImpl {
 
         private static Field sFieldLayoutSuppressed;

File: library/src/main/java/android/transitions/everywhere/TranslationAnimationCreator.java
Patch:
@@ -48,7 +48,7 @@ public class TranslationAnimationCreator {
      * @return An animator that moves from (startX, startY) to (endX, endY) unless there was
      * a previous interruption, in which case it moves from the current position to (endX, endY).
      */
-    static Animator createAnimation(View view, TransitionValues values, int viewPosX, int viewPosY,
+    public static Animator createAnimation(View view, TransitionValues values, int viewPosX, int viewPosY,
                                     float startX, float startY, float endX, float endY, TimeInterpolator interpolator) {
         float terminalX = view.getTranslationX();
         float terminalY = view.getTranslationY();

File: library/src/main/java/android/transitions/everywhere/TransitionManager.java
Patch:
@@ -245,7 +245,6 @@ public void onTransitionEnd(Transition transition) {
                                     ArrayList<Transition> currentTransitions =
                                             runningTransitions.get(sceneRoot);
                                     currentTransitions.remove(transition);
-                                    transition.onEndOfAllTransitions();
                                 }
                             });
                             transition.captureValues(sceneRoot, false);

File: library/src/main/java/android/transitions/everywhere/utils/ViewUtilsLollipop.java
Patch:
@@ -12,7 +12,7 @@
  * Created by Andrey Kulikov on 20.10.14.
  */
 @TargetApi(Build.VERSION_CODES.LOLLIPOP)
-class ViewUtilsLolipop extends ViewUtils.ViewUtilsJellyBeanMR2 {
+class ViewUtilsLollipop extends ViewUtilsKitKat {
 
     private static final Class CLASS_GhostView = ReflectionUtils.getClass("android.view.GhostView");
     private static final Method METHOD_addGhost = ReflectionUtils.getMethod(CLASS_GhostView,

File: library/src/main/java/android/transitions/everywhere/ChangeTransform.java
Patch:
@@ -268,7 +268,7 @@ private ObjectAnimator createTransformAnimator(TransitionValues startValues,
         setIdentityTransforms(view);
 
         ObjectAnimator animator = ObjectAnimator.ofObject(view, ANIMATION_MATRIX_PROPERTY,
-                new TransitionUtils.MatrixEvaluator(), startMatrix, endMatrix);
+                new MatrixUtils.MatrixEvaluator(), startMatrix, endMatrix);
 
         final Matrix finalEndMatrix = endMatrix;
 

File: library/src/main/java/android/transitions/everywhere/TransitionManager.java
Patch:
@@ -19,7 +19,6 @@
 import android.content.Context;
 import android.os.Build;
 import android.transitions.everywhere.utils.ArrayMap;
-import android.transitions.everywhere.utils.ViewGroupOverlayUtils;
 import android.transitions.everywhere.utils.ViewUtils;
 import android.util.Log;
 import android.view.View;
@@ -220,7 +219,6 @@ private static ArrayMap<ViewGroup, ArrayList<Transition>> getRunningTransitions(
     private static void sceneChangeRunTransition(final ViewGroup sceneRoot,
                                                  final Transition transition) {
         if (transition != null && isTransitionsAllowed()) {
-            ViewGroupOverlayUtils.addOverlayIfNeeded(sceneRoot);
             final ViewTreeObserver observer = sceneRoot.getViewTreeObserver();
             final ViewTreeObserver.OnPreDrawListener listener =
                     new ViewTreeObserver.OnPreDrawListener() {

File: library/src/main/java/android/transitions/everywhere/TranslationAnimationCreator.java
Patch:
@@ -63,9 +63,6 @@ static Animator createAnimation(View view, TransitionValues values, int viewPosX
 
         view.setTranslationX(startX);
         view.setTranslationY(startY);
-        if (startX == endX && startY == endY) {
-            return null;
-        }
         ObjectAnimator anim = AnimatorUtils.ofFloat(null, view,
                 "translationX", "translationY", startX, startY, endX, endY);
 

File: library/src/main/java/android/transitions/everywhere/ChangeBounds.java
Patch:
@@ -105,7 +105,7 @@ public void setReparent(boolean reparent) {
 
     private void captureValues(TransitionValues values) {
         View view = values.view;
-        if (ViewUtils.isLaidOut(view) || view.getWidth() != 0 || view.getHeight() != 0) {
+        if (ViewUtils.isLaidOut(view, false) || view.getWidth() != 0 || view.getHeight() != 0) {
             values.values.put(PROPNAME_BOUNDS, new Rect(view.getLeft(), view.getTop(),
                     view.getRight(), view.getBottom()));
             values.values.put(PROPNAME_PARENT, values.view.getParent());

File: library/src/main/java/android/transitions/everywhere/TransitionManager.java
Patch:
@@ -365,7 +365,7 @@ public static void beginDelayedTransition(final ViewGroup sceneRoot) {
      *                   value of null causes the TransitionManager to use the default transition.
      */
     public static void beginDelayedTransition(final ViewGroup sceneRoot, Transition transition) {
-        if (!sPendingTransitions.contains(sceneRoot) && ViewUtils.isLaidOut(sceneRoot)) {
+        if (!sPendingTransitions.contains(sceneRoot) && ViewUtils.isLaidOut(sceneRoot, true)) {
             if (Transition.DBG) {
                 Log.d(LOG_TAG, "beginDelayedTransition: root, transition = " +
                         sceneRoot + ", " + transition);

File: library/src/main/java/android/transitions/everywhere/utils/ViewUtilsKitKat.java
Patch:
@@ -19,7 +19,7 @@ public float getTransitionAlpha(View v) {
     }
 
     @Override
-    public boolean isLaidOut(View v) {
+    public boolean isLaidOut(View v, boolean defaultValue) {
         return v.isLaidOut();
     }
 

File: library/src/main/java/android/transitions/everywhere/ChangeBounds.java
Patch:
@@ -322,7 +322,7 @@ public void onAnimationEnd(Animator animation) {
                     }
                     Path topLeftPath = getPathMotion().getPath(startX - tempLocation[0],
                             startY - tempLocation[1], endX - tempLocation[0], endY - tempLocation[1]);
-                    PropertyValuesHolder origin = PropertyValuesHolder.ofObject(
+                    PropertyValuesHolder origin = AnimatorUtils.pvhOfObject(
                             sDrawableOriginProperty, null, topLeftPath);
                     anim = ObjectAnimator.ofPropertyValuesHolder(drawable, origin);
                 } else {

File: library/src/main/java/android/transitions/everywhere/utils/ViewGroupUtils.java
Patch:
@@ -28,8 +28,7 @@ public void suppressLayout(ViewGroup group, boolean suppress) {
     private static final ViewGroupUtilsImpl IMPL;
 
     static {
-        final int version = VERSION.SDK_INT;
-        if (version >= VERSION_CODES.KITKAT) {
+        if (VERSION.SDK_INT >= VERSION_CODES.KITKAT) {
             IMPL = new KitKatViewGroupUtilsImpl();
         } else {
             IMPL = new BaseViewGroupUtilsImpl();

File: library/src/main/java/android/transitions/everywhere/Transition.java
Patch:
@@ -269,15 +269,15 @@ public Transition() {
     public Transition(Context context, AttributeSet attrs) {
 
         TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.Transition);
-        long duration = a.getInt(R.styleable.Transition_duration, -1);
+        long duration = a.getInt(R.styleable.Transition_android_duration, -1);
         if (duration >= 0) {
             setDuration(duration);
         }
         long startDelay = a.getInt(R.styleable.Transition_startDelay, -1);
         if (startDelay > 0) {
             setStartDelay(startDelay);
         }
-        final int resID = a.getResourceId(R.styleable.Animator_interpolator, 0);
+        final int resID = a.getResourceId(R.styleable.Animator_android_interpolator, 0);
         if (resID > 0) {
             setInterpolator(AnimationUtils.loadInterpolator(context, resID));
         }

File: library/src/main/java/android/transitions/everywhere/TransitionManager.java
Patch:
@@ -245,6 +245,7 @@ public void onTransitionEnd(Transition transition) {
                                     ArrayList<Transition> currentTransitions =
                                             runningTransitions.get(sceneRoot);
                                     currentTransitions.remove(transition);
+                                    transition.onEndOfAllTransitions();
                                 }
                             });
                             transition.captureValues(sceneRoot, false);

File: src/main/java/android/support/transition/TransitionInflater.java
Patch:
@@ -154,6 +154,7 @@ private Transition createTransitionFromXml(XmlPullParser parser,
                         android.support.transition.R.styleable.Fade);
                 int fadingMode = a.getInt(android.support.transition.R.styleable.Fade_fadingMode,
                         Fade.IN | Fade.OUT);
+                a.recycle();
                 transition = new Fade(fadingMode);
                 newTransition = true;
             } else if ("changeBounds".equals(name)) {
@@ -224,6 +225,7 @@ private void getTargetIds(XmlPullParser parser,
                         android.support.transition.R.styleable.TransitionTarget);
                 int id = a.getResourceId(
                         android.support.transition.R.styleable.TransitionTarget_targetId, -1);
+                a.recycle();
                 if (id >= 0) {
                     targetIds.add(id);
                 }

File: src/main/java/android/support/transition/AutoTransition.java
Patch:
@@ -19,18 +19,17 @@
 /**
  * Utility class for creating a default transition that automatically fades,
  * moves, and resizes views during a scene change.
- *
+ * <p/>
  * <p>An AutoTransition can be described in a resource file by using the
  * tag <code>autoTransition</code>, along with the other standard
- * attributes of {@link android.R.styleable#Transition}.</p>
+ * attributes of {@link android.support.transition.R.styleable#Transition}.</p>
  */
 public class AutoTransition extends TransitionSet {
 
     /**
      * Constructs an AutoTransition object, which is a TransitionSet which
      * first fades out disappearing targets, then moves and resizes existing
      * targets, and finally fades in appearing targets.
-     *
      */
     public AutoTransition() {
         setOrdering(ORDERING_SEQUENTIAL);

File: src/main/java/android/support/transition/ChangeText.java
Patch:
@@ -100,7 +100,7 @@ public class ChangeText extends Transition {
      * {@link #CHANGE_BEHAVIOR_IN}, and {@link #CHANGE_BEHAVIOR_OUT_IN}.
      *
      * @param changeBehavior The type of fading animation to use when this
-     * transition is run.
+     *                       transition is run.
      * @return this textChange object.
      */
     public ChangeText setChangeBehavior(int changeBehavior) {
@@ -153,7 +153,7 @@ public void captureEndValues(TransitionValues transitionValues) {
 
     @Override
     public Animator createAnimator(ViewGroup sceneRoot, TransitionValues startValues,
-            TransitionValues endValues) {
+                                   TransitionValues endValues) {
         if (startValues == null || endValues == null ||
                 !(startValues.view instanceof TextView) || !(endValues.view instanceof TextView)) {
             return null;

File: src/main/java/android/support/transition/Recolor.java
Patch:
@@ -45,7 +45,7 @@ private void captureValues(TransitionValues transitionValues) {
         transitionValues.values.put(PROPNAME_BACKGROUND, transitionValues.view.getBackground());
         if (transitionValues.view instanceof TextView) {
             transitionValues.values.put(PROPNAME_TEXT_COLOR,
-                    ((TextView)transitionValues.view).getCurrentTextColor());
+                    ((TextView) transitionValues.view).getCurrentTextColor());
         }
     }
 
@@ -61,7 +61,7 @@ public void captureEndValues(TransitionValues transitionValues) {
 
     @Override
     public Animator createAnimator(ViewGroup sceneRoot, TransitionValues startValues,
-            TransitionValues endValues) {
+                                   TransitionValues endValues) {
         if (startValues == null || endValues == null) {
             return null;
         }

File: src/main/java/android/support/transition/Rotate.java
Patch:
@@ -43,7 +43,7 @@ public void captureEndValues(TransitionValues transitionValues) {
 
     @Override
     public Animator createAnimator(ViewGroup sceneRoot, TransitionValues startValues,
-            TransitionValues endValues) {
+                                   TransitionValues endValues) {
         if (startValues == null || endValues == null) {
             return null;
         }

File: src/main/java/android/support/transition/TransitionValues.java
Patch:
@@ -31,7 +31,7 @@
  * such as the convention project:transition_name:property_name. For
  * example, the platform might store a property "alpha" in a transition
  * "Fader" as "android:fader:alpha".
- *
+ * <p/>
  * <p>These values are cached during the
  * {@link Transition#captureStartValues(android.support.transition.TransitionValues)}
  * capture} phases of a scene change, once when the start values are captured
@@ -66,7 +66,7 @@ public boolean equals(Object other) {
 
     @Override
     public int hashCode() {
-        return 31*view.hashCode() + values.hashCode();
+        return 31 * view.hashCode() + values.hashCode();
     }
 
     @Override

File: src/main/java/android/support/view/ViewCompatJellybeanMr2.java
Patch:
@@ -7,7 +7,7 @@
 
 @TargetApi(VERSION_CODES.JELLY_BEAN_MR2)
 public class ViewCompatJellybeanMr2 {
-	public static void setClipBounds(View v, Rect clipBounds) {
-		v.setClipBounds(clipBounds);
-	}
+    public static void setClipBounds(View v, Rect clipBounds) {
+        v.setClipBounds(clipBounds);
+    }
 }

File: src/main/java/android/support/view/ViewGroupOverlay.java
Patch:
@@ -3,7 +3,7 @@
 import android.view.View;
 
 public abstract class ViewGroupOverlay extends ViewOverlay {
-	public abstract void add(View view);
+    public abstract void add(View view);
 
-	public abstract void remove(View view);
+    public abstract void remove(View view);
 }

File: src/main/java/android/support/view/ViewOverlay.java
Patch:
@@ -3,9 +3,9 @@
 import android.graphics.drawable.Drawable;
 
 public abstract class ViewOverlay {
-	public abstract void add(Drawable drawable);
+    public abstract void add(Drawable drawable);
 
-	public abstract void clear();
+    public abstract void clear();
 
-	public abstract void remove(Drawable drawable);
+    public abstract void remove(Drawable drawable);
 }

File: src/main/java/android/support/transition/Scene.java
Patch:
@@ -60,6 +60,7 @@ public static Scene getSceneForLayout(ViewGroup sceneRoot, int layoutId, Context
         }
         Scene scene = scenes.get(layoutId);
         if (scene != null) {
+            scene.mSceneRoot = sceneRoot; //Fix when you recreate the same layout on configuration change
             return scene;
         } else {
             scene = new Scene(sceneRoot, layoutId, context);

